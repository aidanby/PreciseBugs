{"buggy_code": ["<?php\n\n/*\n* LimeSurvey\n* Copyright (C) 2007-2015 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*/\n\n/**\n * This is the model class for table \"{{template_configuration}}\".\n *\n * NOTE: if you only need to access to the table, you don't need to call prepareTemplateRendering\n *\n * The following are the available columns in table '{{template_configuration}}':\n * @property integer $id Primary key\n * @property string $template_name\n * @property integer $sid Survey ID\n * @property integer $gsid\n * @property integer $uid user ID\n * @property string $files_css\n * @property string $files_js\n * @property string $files_print_css\n * @property string $options\n * @property string $cssframework_name\n * @property string $cssframework_css\n * @property string $cssframework_js\n * @property string $packages_to_load\n * @property string $packages_ltr\n * @property string $packages_rtl\n * @property Template $template\n *\n * @package       LimeSurvey\n * @subpackage    Backend\n */\nclass TemplateConfiguration extends TemplateConfig\n{\n    /**\n     * @var TemplateConfiguration $oParentTemplate The parent template name\n     * A template configuration, in the database, can inherit from another one.\n     * This used to manage the different configuration levels for a very same template: global, survey group, survey\n     * This is not related to motherTemplate (inheritance between two different templates)\n     */\n    public $oParentTemplate;\n\n    /**@var boolean\n     * Should the magic getters automatically retreives the parent value when field is set to inherit. Only turn to\n     * on for template rendering. There is no option inheritance on Manifest mode: values from XML are always used.\n     */\n    public $bUseMagicInherit = false;\n\n    /**@var boolean\n     * Indicate if this entry in DB get created on the fly. If yes, because of Cache, it can need a page redirect\n     */\n    public $bJustCreated = false;\n\n    // Caches\n\n    /** @var string $sPreviewImgTag the template preview image tag for the template list*/\n    public $sPreviewImgTag;\n\n    /** @var array $aInstancesFromTemplateName cache for method getInstanceFromTemplateName*/\n    public static $aInstancesFromTemplateName;\n\n    /** @var array $aInstancesFromTemplateName cache for method prepareTemplateRendering*/\n    public static $aPreparedToRender;\n\n    /** @var boolean $bTemplateCheckResult is the template valid?*/\n    private $bTemplateCheckResult;\n\n    /** @var string $sTypeIcon the type of template for icon (core vs user)*/\n    private $sTypeIcon;\n\n    /** @var array $aFilesTo cache for the method getFilesTo*/\n    private $aFilesTo;\n\n    /** @var array $aFrameworkAssetsToReplace cache for the method getFrameworkAssetsToReplace()*/\n    private $aFrameworkAssetsToReplace;\n\n    /** @var array $aReplacements cache for the method getFrameworkAssetsReplacement */\n    private $aReplacements;\n\n    /** @var array $Ofiles cache for the method getOfiles */\n    private $Ofiles;\n\n    public $generalFilesPath; //Yii::app()->getConfig(\"userthemerootdir\").DIRECTORY_SEPARATOR.'generalfiles'.DIRECTORY_SEPARATOR;\n\n    /** @var int $showpopups show warnings when running survey */\n    public $showpopups; //\n\n    // for survey theme gridview columns\n    public $template_type;\n    public $template_extends;\n    public $template_description;\n\n\n    /**\n     * @todo document me\n     * @return string the associated database table name\n     */\n    public function tableName()\n    {\n        return '{{template_configuration}}';\n    }\n\n    /**\n     * @todo document me\n     * @return array validation rules for model attributes.\n     */\n    public function rules()\n    {\n        // NOTE: you should only define rules for those attributes that\n        // will receive user inputs.\n        return array(\n            array('template_name', 'required'),\n            array('id, sid, gsid', 'numerical', 'integerOnly' => true),\n            array('template_name', 'length', 'max' => 150),\n            array('cssframework_name', 'length', 'max' => 45),\n            array('files_css, files_js, files_print_css, options, cssframework_css, cssframework_js, packages_to_load',\n                'safe'),\n            array('options', 'sanitizeImagePathsOnJson'),\n            // The following rule is used by search().\n            array('id, template_name, sid, gsid, files_css, files_js, files_print_css, options, cssframework_name, cssframework_css, cssframework_js, packages_to_load', 'safe', 'on' => 'search'),\n        );\n    }\n\n    /**\n     * @todo document me\n     * @return array relational rules.\n     */\n    public function relations()\n    {\n        return array(\n            'template' => array(self::HAS_ONE, 'Template', array('name' => 'template_name'), 'together' => true),\n        );\n    }\n\n    /** @inheritdoc */\n    public function defaultScope()\n    {\n        return array('order' => App()->db->quoteColumnName($this->getTableAlias(false, false) . '.template_name'));\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return array customized attribute labels (name=>label)\n     */\n    public function attributeLabels()\n    {\n        return array(\n            'id' => 'ID',\n            'template_name' => gT('Template name'),\n            'sid' => 'Sid',\n            'gsid' => 'Gsid',\n            'files_css' => gT('Files CSS'),\n            'files_js' => gT('Files JS'),\n            'files_print_css' => gT('Files Print CSS'),\n            'options' => gT('Options'),\n            'cssframework_name' => gT('CSS framework name'),\n            'cssframework_css' => gT('CSS framework CSS'),\n            'cssframework_js' => gT('CSS framework JS'),\n            'packages_to_load' => gT('Packages to load'),\n        );\n    }\n\n    /**\n     * Gets an instance of a templateconfiguration by name\n     *\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromTemplateName($sTemplateName, $abstractInstance = false)\n    {\n        if (!empty(self::$aInstancesFromTemplateName[$sTemplateName]) && !$abstractInstance) {\n            return self::$aInstancesFromTemplateName[$sTemplateName];\n        }\n\n        $oInstance = self::model()->find(\n            'template_name=:template_name AND sid IS NULL AND gsid IS NULL',\n            array(':template_name' => $sTemplateName)\n        );\n\n        // If the survey configuration table of the wanted template doesn't exist (eg: manually deleted),\n        // then we provide the default one.\n        if (!is_a($oInstance, 'TemplateConfiguration')) {\n            $oInstance = self::getInstanceFromTemplateName(App()->getConfig('defaulttheme'));\n        }\n\n        if ($abstractInstance === true) {\n            return $oInstance;\n        }\n\n        self::$aInstancesFromTemplateName[$sTemplateName] = $oInstance;\n\n        return $oInstance;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveygroup ID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyGroupId\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName = null, $abstractInstance = false)\n    {\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null\n            ? $sTemplateName\n            : SurveysGroups::model()->findByPk($iSurveyGroupId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n\n            $oTemplateConfigurationModel->bJustCreated = true;\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveyID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyId\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyId($iSurveyId, $sTemplateName = null, $abstractInstance = false)\n    {\n        // set template name if it does not exists or if it is inherit\n        if ($sTemplateName === null || $sTemplateName == 'inherit') {\n            $oSurvey = Survey::model()->findByPk($iSurveyId);\n            // set real value from inheritance\n            if (!empty($oSurvey->oOptions->template)) {\n                $sTemplateName = $oSurvey->oOptions->template;\n            }\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a Theme options array based on a surveyID\n     *\n     * @param integer $iSurveyId\n     * @param bool $bInherited should inherited theme option values be used?\n     * @return array\n     */\n    public static function getThemeOptionsFromSurveyId($iSurveyId = 0, $bInherited = false)\n    {\n        $aTemplateConfigurations = array();\n        // fetch all themes belonging to $iSurveyId\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->params = array('sid' => $iSurveyId);\n        $oTemplateConfigurations = self::model()->findAll($criteria);\n\n        if ($bInherited) { // inherited values\n            foreach ($oTemplateConfigurations as $key => $oTemplateConfiguration) {\n                $oTemplateConfiguration->bUseMagicInherit = true;\n                $oTemplateConfiguration->setOptions();\n                // set array with values\n                $aTemplateConfigurations[$key]['id'] = null;\n                $aTemplateConfigurations[$key]['sid'] = $iSurveyId;\n                $aTemplateConfigurations[$key]['template_name'] = $oTemplateConfiguration->template_name;\n                $aTemplateConfigurations[$key]['config']['options'] = (array)$oTemplateConfiguration->oOptions;\n            }\n        } else { // db values\n            foreach ($oTemplateConfigurations as $key => $oTemplateConfiguration) {\n                $oTemplateConfiguration->bUseMagicInherit = false;\n                $oAttributes = $oTemplateConfiguration->attributes;\n                // set array with values\n                $aTemplateConfigurations[$key]['id'] = null;\n                $aTemplateConfigurations[$key]['sid'] = $iSurveyId;\n                $aTemplateConfigurations[$key]['template_name'] = $oAttributes['template_name'];\n                $aTemplateConfigurations[$key]['config']['options'] = isJson($oAttributes['options'])\n                    ? (array)json_decode((string) $oAttributes['options'])\n                    : $oAttributes['options'];\n            }\n        }\n\n        return $aTemplateConfigurations;\n    }\n\n    /**\n     * For a given survey, it checks if its theme have a all the needed configuration entries (survey + survey group).\n     * Else, it will create it.\n     * @TODO: recursivity for survey group\n     * @param int $iSurveyId\n     * @return TemplateConfiguration the template configuration for the survey group\n     */\n    public static function checkAndcreateSurveyConfig($iSurveyId)\n    {\n        //if a template name is given also check against that\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n        $sTemplateName  = $oSurvey->oOptions->template;\n        $iSurveyGroupId = $oSurvey->gsid;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Get an instance of a fitting TemplateConfiguration\n     * NOTE: for rendering prupose, you should never call this function directly, but rather Template::getInstance.\n     * if force_xmlsettings_for_survey_rendering is on, then the configuration from the XML file should be loaded,\n     * not the one from database\n     *\n     * @param string $sTemplateName\n     * @param integer $iSurveyGroupId\n     * @param integer $iSurveyId\n     * @return TemplateConfiguration\n     */\n    public static function getInstance($sTemplateName = null, $iSurveyGroupId = null, $iSurveyId = null, $abstractInstance = false)\n    {\n        $oTemplateConfigurationModel = new TemplateConfiguration();\n\n        if ($sTemplateName != null && $iSurveyGroupId == null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n        }\n\n        if ($iSurveyGroupId != null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyGroup(\n                $iSurveyGroupId,\n                $sTemplateName,\n                true\n            );\n        }\n\n        if ($iSurveyId != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyId(\n                $iSurveyId,\n                $sTemplateName,\n                true\n            );\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * Typical usecase:\n     * - Initialize the model fields with values from filter form.\n     * - Execute this method to get CActiveDataProvider instance which will filter\n     * models according to data in model fields.\n     * - Pass data provider to CGridView, CListView or any similar widget.\n     *\n     * @return CActiveDataProvider the data provider that can return the models\n     * based on the search/filter conditions.\n     */\n    public function search()\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $criteria = new CDbCriteria();\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON ' .\n            App()->db->quoteColumnName(\"t.template_name\") .\n            ' = template.name';\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('t.gsid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        $criteria->compare('id', $this->id);\n        $criteria->compare('template_name', $this->template_name, true);\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n\n        return new CActiveDataProvider($this, array(\n            'criteria' => $criteria,\n        ));\n    }\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * @param integer $gsid Survey group, else get global\n     * @return CActiveDataProvider\n     * @throws Exception\n     */\n    public function searchGrid(?int $gsid = null)\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $pageSizeTemplateView = App()->user->getState('pageSizeTemplateView', App()->params['defaultPageSize']);\n        $criteria = new CDbCriteria();\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON ' .\n            App()->db->quoteColumnName(\"t.template_name\") .\n            ' = template.name';\n        $criteria->together = true;\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        if ($gsid !== null) {\n            /* Group configuration */\n            $criteria->compare('t.gsid', $gsid);\n        } else {\n            /* Global configuration */\n            $criteria->addCondition('t.gsid IS NULL');\n        }\n\n        $criteria->compare('id', $this->id);\n        if (!empty($this->template_name)) {\n            $templateNameEscaped = strtr($this->template_name, ['%' => '\\%', '_' => '\\_', '\\\\' => '\\\\\\\\']);\n            $criteria->addCondition('template.name LIKE :templatename1 OR template.title LIKE :templatename2');\n            $criteria->params[':templatename1'] = '%' . $templateNameEscaped . '%';\n            $criteria->params[':templatename2'] = '%' . $templateNameEscaped . '%';\n        }\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n        $criteria->compare('template.description', $this->template_description, true);\n        $criteria->compare('template.extends', $this->template_extends, true);\n\n        Yii::import('application.helpers.SurveyThemeHelper');\n        $coreTemplates = SurveyThemeHelper::getStandardTemplateList();\n        if ($this->template_type == 'core') {\n            $criteria->addInCondition('template_name', $coreTemplates);\n        } elseif ($this->template_type == 'user') {\n            $criteria->addNotInCondition('template_name', $coreTemplates);\n        }\n\n        return new CActiveDataProvider($this, array(\n            'criteria' => $criteria,\n            'pagination' => array(\n                'pageSize' => $pageSizeTemplateView,\n            ),\n        ));\n    }\n\n    /**\n     * Twig statements can be used in Theme description\n     */\n    public function getDescription()\n    {\n        $sDescription = $this->template->description;\n\n          // If wrong Twig in manifest, we don't want to block the whole list rendering\n          // Note: if no twig statement in the description, twig will just render it as usual\n        try {\n            $sDescription = App()->twigRenderer->convertTwigToHtml($this->template->description);\n            $sDescription = viewHelper::purified($sDescription);\n        } catch (\\Exception $e) {\n          // It should never happen, but let's avoid to anoy final user in production mode :)\n            if (YII_DEBUG) {\n                App()->setFlashMessage(\n                    \"Twig error in template \" .\n                    $this->template->name .\n                    \" description <br> Please fix it and reset the theme <br>\" .\n                    $e,\n                    'error'\n                );\n            }\n        }\n\n          return $sDescription;\n    }\n\n    /**\n     * Returns the static model of the specified AR class.\n     * Please note that you should have this exact method in all your CActiveRecord descendants!\n     *\n     * @param string $className active record class name.\n     * @return TemplateConfiguration the static model class\n     */\n    public static function model($className = __CLASS__)\n    {\n        /** @var self $model */\n        $model = parent::model($className);\n        return $model;\n    }\n\n\n    /**\n     * Create a new entry in {{templates}} and {{template_configuration}} table using the template manifest\n     *\n     * @param string $sTemplateName the name of the template to import\n     * @param array $aDatas Data\n     * @return boolean true on success | exception\n     * @throws Exception\n     */\n    public static function importManifest($sTemplateName, $aDatas = array())\n    {\n        if (!empty($aDatas['extends'])) {\n            $oMotherTemplate = self::getInstanceFromTemplateName($aDatas['extends']);\n            if (is_a($oMotherTemplate, 'TemplateConfiguration')) {\n                $aDatas['api_version']     = $oMotherTemplate->template->api_version;\n                $aDatas['view_folder']     = $oMotherTemplate->template->view_folder;\n                $aDatas['author_email']    = $oMotherTemplate->template->author_email;\n                $aDatas['author_url']      = $oMotherTemplate->template->author_url;\n                $aDatas['copyright']       = $oMotherTemplate->template->copyright;\n                $aDatas['version']         = $oMotherTemplate->template->version;\n                $aDatas['license']         = $oMotherTemplate->template->license;\n                $aDatas['files_folder']    = $oMotherTemplate->template->files_folder;\n                $aDatas['aOptions']        = (empty($aDatas['aOptions']))\n                    ? json_decode($oMotherTemplate->options)\n                    : $aDatas['aOptions'];\n            }\n        }\n\n        return parent::importManifest($sTemplateName, $aDatas);\n    }\n\n    /**\n     * @todo document me\n     */\n    public function setToInherit()\n    {\n        $this->files_css         = 'inherit';\n        $this->files_js          = 'inherit';\n        $this->files_print_css   = 'inherit';\n        $this->options           = 'inherit';\n        $this->cssframework_name = 'inherit';\n        $this->cssframework_css  = 'inherit';\n        $this->cssframework_js   = 'inherit';\n        $this->packages_to_load  = 'inherit';\n    }\n\n    /**\n     * Check if the template exists and is valid\n     *\n     * @return bool\n     */\n    public function checkTemplate()\n    {\n        if (empty($this->bTemplateCheckResult)) {\n            $this->bTemplateCheckResult = true;\n            if (\n                !is_object($this->template) ||\n                (is_object($this->template) && !Template::checkTemplateXML($this->template->name, $this->template->folder))\n            ) {\n                $this->bTemplateCheckResult = false;\n            }\n        }\n        return $this->bTemplateCheckResult;\n    }\n\n    /**\n     * @todo document me\n     *\n     * @param string $sTemplateName\n     * @param string $iSurveyId\n     * @param bool $bUseMagicInherit\n     */\n    public function setBasics($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = false)\n    {\n        $this->bUseMagicInherit = $bUseMagicInherit;\n        $this->sTemplateName = $this->template->name;\n        $this->setIsStandard(); // Check if  it is a CORE template\n        $this->path = ($this->isStandard)\n            ? App()->getConfig(\"standardthemerootdir\") . DIRECTORY_SEPARATOR . $this->template->folder . DIRECTORY_SEPARATOR\n            : App()->getConfig(\"userthemerootdir\") . DIRECTORY_SEPARATOR . $this->template->folder . DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Add a file replacement in the field `file_{css|js|print_css}` in table {{template_configuration}},\n     * eg: {\"replace\": [ {original files to replace here...}, \"css/template.css\",]}\n     * In general, should be called from TemplateManifest, after adding a file replacement inside the manifest.\n     *\n     * @param string $sFile the file to replace\n     * @param string $sType css|js\n     * @return bool|void\n     * @throws Exception\n     */\n    public function addFileReplacement($sFile, $sType)\n    {\n        $sField = 'files_' . $sType;\n        $oFiles = (array) json_decode((string) $this->$sField);\n\n        $oFiles['replace'][] = $sFile;\n\n        $this->$sField = json_encode($oFiles);\n\n        if ($this->save()) {\n            return true;\n        } else {\n            throw new Exception(\"could not add $sFile to  $sField replacements! \" . $this->getErrors());\n        }\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return string\n     */\n    public function getTypeIcon()\n    {\n        if (empty($this->sTypeIcon)) {\n            Yii::import('application.helpers.SurveyThemeHelper');\n            $this->sTypeIcon = (SurveyThemeHelper::isStandardTemplate($this->template->name)) ?\n                gT(\"Core theme\") :\n                gT(\"User theme\");\n        }\n        return $this->sTypeIcon;\n    }\n\n    /**\n     * Displays survey theme action buttons\n     *\n     * @return string\n     */\n    public function getButtons()\n    {\n        /* What ? We can get but $this->getAttribute ??? */\n        $gsid = App()->request->getQuery('id', null); // $this->gsid;\n        // don't show any buttons if user doesn't have update permission\n        if (!Permission::model()->hasGlobalPermission('templates', 'update')) {\n            /* Global settings */\n            if (empty($gsid) || App()->getController()->action->id != \"surveysgroups\") {\n                return '';\n            }\n            /* SurveysGroups settings */\n            $oSurveysGroups = SurveysGroups::model()->findByPk($gsid);\n            if (empty($oSurveysGroups)) {\n                return '';\n            }\n            if (!$oSurveysGroups->hasPermission('surveys', 'update')) {\n                return '';\n            }\n        }\n        $templateName = CHtml::encode($this->template_name);\n        $sEditorUrl = App()->getController()->createUrl(\n            'admin/themes/sa/view',\n            array(\"templatename\" => $templateName)\n        );\n        $sExtendUrl = App()->getController()->createUrl('admin/themes/sa/templatecopy');\n        $sOptionUrl = (App()->getController()->action->id == \"surveysgroups\") ?\n            App()->getController()->createUrl(\n                'themeOptions/updateSurveyGroup',\n                array(\"id\" => $this->id, \"gsid\" => $gsid)\n            ) :\n            App()->getController()->createUrl(\n                'themeOptions/update',\n                array(\"id\" => $this->id)\n            );\n\n        $sUninstallUrl = Yii::app()->getController()->createUrl('themeOptions/uninstall/');\n        $sResetUrl     = Yii::app()->getController()->createUrl('themeOptions/reset/', array(\"gsid\" => (int) $gsid));\n\n        $dropdownItems = [];\n        $dropdownItems[] = [\n            'title'            => gT('Theme editor'),\n            'url'              => $sEditorUrl,\n            'linkId'           => 'template_editor_link_' . $templateName,\n            'linkClass'        => '',\n            'iconClass'        => 'ri-brush-fill',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n\n        ];\n\n        $dropdownItems[] = [\n            'title'            => gT('Theme options'),\n            'url'              => $sOptionUrl,\n            'linkId'           => 'template_options_link_' . $templateName ,\n            'linkClass'        => '',\n            'iconClass'        => 'ri-dashboard-3-fill',\n            'enabledCondition' => $this->getHasOptionPage(),\n        ];\n\n\n        $dropdownItems[] = [\n            'title'            => gT('Extend'),\n            'url'              => $sExtendUrl,\n            'linkId'           => 'extendthis_' . $templateName,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-file-copy-line text-success',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n            'linkAttributes'   => [\n                'title'            => sprintf(gT('Type in the new name to extend %s'), $templateName),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Extend'),\n                'data-text'        => gT('Please type in the new theme name above.'),\n                'data-post'        => json_encode([\n                    \"copydir\" => $templateName,\n                    \"action\"  => \"templatecopy\",\n                    \"newname\" => [ \"value\" => \"extends_\" . $templateName,\n                                    \"type\" => \"text\",\n                                    \"class\" => \"form-control col-md-12\" ]\n                    ]),\n            ]\n        ];\n\n\n        $dropdownItems[] = [\n            'title'            => gT('Uninstall'),\n            'url'              => $sUninstallUrl,\n            'linkId'           => 'remove_fromdb_link_' . $templateName,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-delete-bin-fill text-danger',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\" &&\n                                    $templateName != App()->getConfig('defaulttheme'),\n            'linkAttributes'   => [\n                'title'            => gT('Uninstall this theme'),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Uninstall'),\n                'data-text'        => gT('This will reset all the specific configurations of this theme.')\n                                         . '<br>' . gT('Do you want to continue?'),\n                'data-post'        => json_encode([ \"templatename\" => $templateName ]),\n                'data-button-type' => \"btn-danger\"\n            ]\n        ];\n\n        $dropdownItems[] = [\n            'title'            => gT('Reset'),\n            'url'              => $sResetUrl,\n            'linkId'           => 'remove_fromdb_link_' . $templateName,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-refresh-line text-warning',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n            'linkAttributes'   => [\n                'title'            => gT('Reset this theme'),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Reset'),\n                'data-text'        => gT('This will reload the configuration file of this theme.') . '<br>' . gT('Do you want to continue?'),\n                'data-post'        => json_encode([ \"templatename\" => $templateName ]),\n                'data-button-type' => \"btn-warning\"\n            ]\n        ];\n        return App()->getController()->widget('ext.admin.grid.GridActionsWidget.GridActionsWidget', ['dropdownItems' => $dropdownItems], true);\n    }\n\n    /**\n     * Returns true if this theme or any mothertemplate has a TemplateConfiguration set\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function getHasOptionPage()\n    {\n        $filteredName = Template::templateNameFilter($this->template->name);\n        $oRTemplate = $this->prepareTemplateRendering($filteredName);\n\n        $sOptionFile = 'options' . DIRECTORY_SEPARATOR . 'options.twig';\n        while (!file_exists($oRTemplate->path . $sOptionFile)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                return false;\n                break;\n            }\n            $oRTemplate = $oMotherTemplate->prepareTemplateRendering($this->template->name);\n        }\n        return true;\n    }\n\n    /**\n     * Set a value on a given option at global setting level (survey level not affected).\n     * Will be used to turn ON ajax mode on update.\n     *\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function setGlobalOption($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n\n            if (empty($this->sid)) {\n                $oOptions->$name = $value;\n                $sOptions = json_encode($oOptions);\n                $this->options = $sOptions;\n                $this->save();\n            }\n        }\n    }\n\n    /**\n     * Apply options from XML configuration for all missing template options\n     *\n     * @return void\n     */\n    public function addOptionFromXMLToLiveTheme()\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = get_object_vars(json_decode($this->options));\n            $oTemplateConfigurationModel = new TemplateManifest();\n            $oTemplateConfigurationModel->setBasics();\n            $oXmlOptions = get_object_vars($oTemplateConfigurationModel->config->options);\n\n            // compare template options to options from the XML and add if missing\n            foreach ($oXmlOptions as $key => $value) {\n                if (!array_key_exists($key, $oOptions)) {\n                    $this->addOptionToLiveTheme($key, $value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add an option definition to the current theme.\n     * Will be used to turn ON ajax mode on update.\n     *\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function addOptionToLiveTheme($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n            $oOptions->$name = $value;\n            $sOptions = json_encode($oOptions);\n            $this->options = $sOptions;\n            $this->save();\n        }\n    }\n\n    /**\n     * Set option (unless if options is set to \"inherit\").\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function setOption($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n\n            $oOptions->$name = $value;\n            $sOptions = json_encode($oOptions);\n            $this->options = $sOptions;\n            $this->save();\n        }\n    }\n\n    /**\n     * @todo document me\n     *\n     * @param $from\n     * @param $to\n     * @return string\n     */\n    private function getRelativePath($from, $to)\n    {\n        $dir = explode(DIRECTORY_SEPARATOR, is_file($from) ? dirname((string) $from) : rtrim((string) $from, DIRECTORY_SEPARATOR));\n        $file = explode(DIRECTORY_SEPARATOR, (string) $to);\n\n        while ($dir && $file && ($dir[0] == $file[0])) {\n            array_shift($dir);\n            array_shift($file);\n        }\n        return str_repeat('..' . DIRECTORY_SEPARATOR, count($dir)) . implode(DIRECTORY_SEPARATOR, $file);\n    }\n\n    /**\n     * Return image information\n     *\n     * @param string $file with Path\n     * @return array|null\n     */\n    private function getImageInfo($file, $pathPrefix = '')\n    {\n        if (!file_exists($file)) {\n            return;\n        }\n        // Currently it's private and only used one time, before put this function in twig :\n        // must validate directory is inside rootdir\n        $checkImage = LSYii_ImageValidator::validateImage($file);\n        if (!$checkImage['check']) {\n            return;\n        }\n        $filePath = $this->getRelativePath(App()->getConfig('rootdir'), $file);\n        $previewFilePath = App()->getAssetManager()->publish($file);\n        $fileName = basename($file);\n        return [\n            'preview' => $previewFilePath,\n            'filepath' => $pathPrefix . $fileName,\n            'filepathOptions' => $filePath,\n            'filename' => $fileName\n        ];\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return array\n     */\n    public function getOptionPageAttributes()\n    {\n        $aData = $this->attributes;\n        $aData['maxFileSize'] = getMaximumFileUploadSize();\n        $aData['imageFileList'] = [];\n        Yii::import('application.helpers.SurveyThemeHelper');\n        $categoryList = SurveyThemeHelper::getFileCategories($this->template_name, $this->sid);\n\n        // Compose list of image files for each category\n        foreach ($categoryList as $category) {\n            // Get base path for category\n            $pathPrefix = empty($category->pathPrefix) ? '' : $category->pathPrefix;\n            $basePath = $category->path;\n            // If the category is theme, add the \"files folder\" to the base path, as that's the directory to scan for files\n            if ($category->name == 'theme') {\n                $filesFolder = $this->getAttributeValue('files_folder') . DIRECTORY_SEPARATOR;\n                $basePath = $basePath . $filesFolder;\n                $pathPrefix = $pathPrefix . $filesFolder;\n            }\n            // Get full list of files\n            $fileList = Template::getOtherFiles($basePath);\n            // Order File List alphabetically\n            usort($fileList, function ($a, $b) {\n                return strcasecmp((string) $a['name'], (string) $b['name']);\n            });\n            // Keep only image files\n            foreach ($fileList as $file) {\n                $imageInfo = $this->getImageInfo($basePath . $file['name'], $pathPrefix);\n                if ($imageInfo) {\n                    $aData['imageFileList'][] = array_merge(\n                        [\n                            'group' => $category->title,\n                        ],\n                        $imageInfo\n                    );\n                }\n            };\n        }\n\n        return $aData;\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return mixed\n     */\n    public function getOptionPage()\n    {\n        $oSimpleInheritance = Template::getInstance($this->template->name, $this->sid, $this->gsid, null, true);\n        $oSimpleInheritance->options = 'inherit';\n        $oSimpleInheritanceTemplate = $oSimpleInheritance->prepareTemplateRendering($this->template->name);\n\n        // TODO: It's not clear which class prepareTemplateRendering() returns or should return.\n        /** @var Template */\n        $oTemplate = $this->prepareTemplateRendering($this->template->name);\n\n        $renderArray = array('templateConfiguration' => $oTemplate->getOptionPageAttributes());\n\n        $oTemplate->setToInherit();\n        $oTemplate->setOptions();\n\n        $oOptions = (array) $oSimpleInheritanceTemplate->oOptions;\n\n        //We add some extra values to the option page\n        //This is just a dirty hack, and somewhere in the future we will correct it\n        $renderArray['oParentOptions'] = array_merge(\n            ($oOptions),\n            array(\n                'packages_to_load' =>  $oTemplate->packages_to_load,\n                'files_css' => $oTemplate->files_css\n            )\n        );\n\n        $renderArray['aOptionAttributes'] = TemplateManifest::getOptionAttributes($oSimpleInheritance->path);\n        $renderArray['aFontOptions'] = TemplateManifest::getFontDropdownOptions();\n        return App()->twigRenderer->renderOptionPage($oTemplate, $renderArray);\n    }\n\n    /**\n     * From a list of json files in db it will generate a PHP array ready to use by removeFileFromPackage()\n     *\n     * @param TemplateConfiguration $oTemplate\n     * @param string $sType\n     * @param string $sAction Action\n     * @return array\n     * @internal param string $jFiles json\n     */\n    protected function getFilesTo($oTemplate, $sType, $sAction)\n    {\n        // Todo: make it in a recursive way\n        if (!empty($this->aFilesTo[$oTemplate->template->name])) {\n            if (!empty($this->aFilesTo[$oTemplate->template->name][$sType])) {\n                if (!empty($this->aFilesTo[$oTemplate->template->name][$sType][$sAction])) {\n                    return $this->aFilesTo[$oTemplate->template->name][$sType][$sAction];\n                } else {\n                    $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n                }\n            } else {\n                $this->aFilesTo[$oTemplate->template->name][$sType]           = array();\n                $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n            }\n        } else {\n            $this->aFilesTo[$oTemplate->template->name]                   = array();\n            $this->aFilesTo[$oTemplate->template->name][$sType]           = array();\n            $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n        }\n\n        $sField = 'files_' . $sType;\n        $oFiles = $this->getOfiles($oTemplate, $sField);\n\n        $aFiles = array();\n\n        if ($oFiles) {\n            foreach ($oFiles as $action => $aFileList) {\n                if (is_array($aFileList)) {\n                    if ($action == $sAction) {\n                        // Specific inheritance of one of the value of the json array\n                        if ($aFileList[0] == 'inherit') {\n                            $aParentjFiles = (array) json_decode((string) $oTemplate->getParentConfiguration->$sField);\n                            $aFileList = $aParentjFiles[$action];\n                        }\n\n                        $aFiles = array_merge($aFiles, $aFileList);\n                    }\n                }\n            }\n        }\n\n        $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = $aFiles;\n        return $aFiles;\n    }\n\n    /**\n     * Get the json files (to load/replace/remove) from  a theme, and checks if its correctly formated\n     *\n     * @param $oTemplate the theme to check\n     * @param $sField name of the DB field to get (file_css, file_js, file_print_css)\n     * @return bool|mixed\n     */\n    protected function getOfiles($oTemplate, $sField)\n    {\n        if (!empty($this->Ofiles[$oTemplate->template->name])) {\n            if (!empty($this->Ofiles[$oTemplate->template->name][$sField])) {\n                return $this->Ofiles[$oTemplate->template->name][$sField];\n            } else {\n                $this->Ofiles[$oTemplate->template->name][$sField] = array();\n            }\n        } else {\n            $this->Ofiles[$oTemplate->template->name] = array();\n            $this->Ofiles[$oTemplate->template->name][$sField] = array();\n        }\n\n        $files = $oTemplate->$sField;\n        $oFiles = [];\n        if (!empty($files)) {\n            $oFiles = json_decode((string) $files, true);\n            if ($oFiles === null) {\n                App()->setFlashMessage(\n                    sprintf(\n                        gT('Error: Malformed JSON - field %s must be either a JSON array or the string \"inherit\". Found \"null\".'),\n                        $sField\n                    ),\n                    'error'\n                );\n                return false;\n            }\n        }\n\n        $this->Ofiles[$oTemplate->template->name][$sField] = $oFiles;\n        return $oFiles;\n    }\n\n    /**\n     * Proxy for Yii::app()->clientScript->removeFileFromPackage()\n     *\n     * @param string $sPackageName name of the package to edit\n     * @param string $sType        the type of settings to change (css or js)\n     * @param $aSettings           array of local setting\n     * @return void\n     */\n    protected function removeFileFromPackage($sPackageName, $sType, $aSettings)\n    {\n        foreach ($aSettings as $sFile) {\n            App()->clientScript->removeFileFromPackage($sPackageName, $sType, $sFile);\n        }\n    }\n\n    /**\n     * Configure the mother template (and its mother templates)\n     * This is an object recursive call to TemplateConfiguration::prepareTemplateRendering()\n     */\n    protected function setMotherTemplates()\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName   = $this->template->extends;\n            $instance = TemplateConfiguration::getInstanceFromTemplateName($sMotherTemplateName);\n            $instance->template->checkTemplate();\n            $this->oMotherTemplate = $instance->prepareTemplateRendering($sMotherTemplateName, '');\n        }\n    }\n\n    /**\n     * Get the closest template in the hierarchy that has the definition for $attribute\n     *\n     * @param TemplateConfiguration $oRTemplate\n     * @param string $attribute\n     * @return TemplateConfiguration\n     */\n    protected function getTemplateConfigurationForAttribute($oRTemplate, $attribute)\n    {\n        while (empty($oRTemplate->getRelatedTemplate()->$attribute)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                $this->uninstallIncorectTheme($this->template_name);\n                break;\n            }\n            $oRTemplate = $oMotherTemplate;\n        }\n        return $oRTemplate;\n    }\n\n    /**\n     * Uninstall a theme and, display error message, and redirect to theme list\n     * @param string $sTemplateName\n     */\n    protected function uninstallIncorectTheme($sTemplateName)\n    {\n        TemplateConfiguration::uninstall($sTemplateName);\n        App()->setFlashMessage(\n            sprintf(\n                gT(\"Theme '%s' has been uninstalled because it's not compatible with this LimeSurvey version.\"),\n                $sTemplateName\n            ),\n            'error'\n        );\n        App()->getController()->redirect(array(\"themeOptions/index\", \"#\" => \"surveythemes\"));\n        App()->end();\n    }\n\n    /**\n     * Set the default configuration values for the template, and use the motherTemplate value if needed\n     *\n     * @return void\n     */\n    protected function setThisTemplate()\n    {\n        // Mandatory setting in config XML\n        $this->apiVersion = (!empty($this->template->api_version)) ? $this->template->api_version : null;\n        $this->viewPath = $this->path . $this->getTemplateConfigurationForAttribute($this, 'view_folder')->template->view_folder . DIRECTORY_SEPARATOR;\n        $this->filesPath = $this->path . $this->getTemplateConfigurationForAttribute($this, 'files_folder')->template->files_folder . DIRECTORY_SEPARATOR;\n        $this->generalFilesPath = App()->getConfig(\"userthemerootdir\") . DIRECTORY_SEPARATOR . 'generalfiles' . DIRECTORY_SEPARATOR;\n        // Options are optional\n        $this->setOptions();\n\n        // Not mandatory (use package dependances)\n        $this->setCssFramework();\n        $this->packages = $this->getDependsPackages($this);\n        if (!empty($this->packages_to_load)) {\n            $templateToLoadPackages = json_decode($this->packages_to_load);\n            if (!empty($templateToLoadPackages->add)) {\n                $this->packages = array_merge($templateToLoadPackages->add, $this->packages);\n            }\n            if (!empty($templateToLoadPackages->remove)) {\n                $this->packages = array_diff($this->packages, $templateToLoadPackages->remove);\n            }\n        }\n\n        // Add depend package according to packages\n        $this->depends = array_merge($this->depends, $this->packages);\n    }\n\n    /**\n     * @todo document me\n     * @return void\n     */\n    private function setCssFramework()\n    {\n        if (!empty($this->cssframework_name)) {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = $this->cssframework_name;\n            $this->cssFramework->css  = json_decode($this->cssframework_css);\n            $this->cssFramework->js   = json_decode($this->cssframework_js);\n        } else {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = '';\n            $this->cssFramework->css  = '';\n            $this->cssFramework->js   = '';\n        }\n    }\n\n    /**\n     * Decodes json string from the database field \"options\" and stores it inside $this->oOptions\n     * Also triggers inheritence checks\n     * @return void\n     */\n    protected function setOptions()\n    {\n        $this->oOptions = new stdClass();\n        if (!empty($this->options)) {\n            $this->oOptions = json_decode($this->options);\n        }\n        // unset \"comment\" property which is auto generated from HTML comments in xml file\n        unset($this->oOptions->comment);\n\n        $this->setOptionInheritance();\n    }\n\n    /**\n     * Loop through all theme options defined, trigger check for inheritance and write the new value back to the options object\n     * @return void\n     */\n    protected function setOptionInheritance()\n    {\n        $oOptions = $this->oOptions;\n\n        if (!empty($oOptions)) {\n            foreach ($oOptions as $sKey => $sOption) {\n                $this->oOptions->$sKey = $this->getOptionKey($sKey);\n            }\n        }\n    }\n\n    /**\n     * Search through the inheritence chain and find the inherited value for theme option\n     * @param string $key\n     * @return mixed\n     */\n    protected function getOptionKey($key)\n    {\n        $aOptions = (array) json_decode($this->options);\n        if (isset($aOptions[$key])) {\n            $value = $aOptions[$key];\n            if ($value === 'inherit') {\n                $oParentConfig = $this->getParentConfiguration();\n                if ($oParentConfig->id != $this->id) {\n                    return $this->getParentConfiguration()->getOptionKey($key);\n                } else {\n                    $this->uninstallIncorectTheme($this->template_name);\n                }\n            }\n            return  $value;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * loads the main theme template from the parent theme that it is extending, as a package. Ready to be registered\n     *\n     * @param string[] $packages\n     * @return string[]\n     */\n    protected function addMotherTemplatePackage($packages)\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName = (string) $this->template->extends;\n            $packages[]          = 'survey-template-' . $sMotherTemplateName;\n        }\n        return $packages;\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @param boolean $bInlcudeRemove   also get the files to remove\n     * @return array\n     */\n    protected function getFrameworkAssetsToReplace($sType, $bInlcudeRemove = false)\n    {\n        if (empty($this->aFrameworkAssetsToReplace)) {\n            $this->aFrameworkAssetsToReplace = array();\n        }\n\n        $this->aFrameworkAssetsToReplace[$sType] = array();\n\n        $sFieldName  = 'cssframework_' . $sType;\n        $aFieldValue = (array) json_decode((string) $this->$sFieldName);\n\n        if (!empty($aFieldValue) && !empty($aFieldValue['replace'])) {\n            $this->aFrameworkAssetsToReplace[$sType] = (array) $aFieldValue['replace'];\n\n            // Inner field inheritance\n            foreach ($this->aFrameworkAssetsToReplace[$sType] as $key => $aFiles) {\n                foreach ($aFiles as $sReplacement) {\n                    if ($sReplacement == \"inherit\") {\n                        $aParentReplacement = $this->getParentConfiguration()->getFrameworkAssetsToReplace($sType);\n                        $this->aFrameworkAssetsToReplace[$sType][$key][1] = $aParentReplacement[$key][1];\n                    }\n                }\n            }\n\n            if ($bInlcudeRemove && isset($aFieldValue['remove'])) {\n                $this->aFrameworkAssetsToReplace[$sType] = array_merge(\n                    $this->aFrameworkAssetsToReplace,\n                    (array) $aFieldValue['remove']\n                );\n            }\n        }\n\n        return $this->aFrameworkAssetsToReplace[$sType];\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @return array\n     */\n    protected function getFrameworkAssetsReplacement($sType)\n    {\n        if (empty($this->aReplacements)) {\n            $this->aReplacements = array();\n        }\n        $this->aReplacements[$sType] = array();\n\n        $aFrameworkAssetsToReplace = $this->getFrameworkAssetsToReplace($sType);\n\n        foreach ($aFrameworkAssetsToReplace as $key => $aAsset) {\n            $aReplace = $aAsset[1];\n            $this->aReplacements[$sType][] = $aReplace;\n        }\n\n\n        return $this->aReplacements[$sType];\n    }\n\n    /**\n     * @todo document me\n     * @return TemplateConfiguration\n     */\n    public function getParentConfiguration()\n    {\n        if (empty($this->oParentTemplate)) {\n            //check for surveygroup id if a survey is given\n            if ($this->sid != null) {\n                $oSurvey = Survey::model()->findByPk($this->sid);\n                // set template name from real inherited value\n                $sTemplateName = !empty($oSurvey->oOptions->template) ?\n                    $oSurvey->oOptions->template :\n                    $this->template->name;\n                $oParentTemplate = Template::getTemplateConfiguration($sTemplateName, null, $oSurvey->gsid);\n                if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                    $this->oParentTemplate = $oParentTemplate;\n                    $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                    return $this->oParentTemplate;\n                }\n            }\n\n            //check for surveygroup id if a surveygroup is given\n            if ($this->sid == null && $this->gsid != null) {\n                $oSurveyGroup = SurveysGroups::model()->findByPk($this->gsid);\n                //Switch if the surveygroup inherits from a parent surveygroup\n                if ($oSurveyGroup != null && $oSurveyGroup->parent_id != 0) {\n                    $oParentTemplate = Template::getTemplateConfiguration(\n                        $this->template->name,\n                        null,\n                        $oSurveyGroup->parent_id\n                    );\n                    if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                        $this->oParentTemplate = $oParentTemplate;\n                        $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                        return $this->oParentTemplate;\n                    }\n                }\n            }\n\n            //in the endcheck for general global template\n            $this->oParentTemplate = Template::getTemplateConfiguration($this->template_name, null, null);\n            $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n            return $this->oParentTemplate;\n        }\n        return $this->oParentTemplate;\n    }\n\n\n    /**\n     * Change the template name inside the configuration entries (called from template editor)\n     * NOTE: all tests (like template exist, etc) are done from template controller.\n     *\n     * @param string $sOldName The old name of the template\n     * @param string $sNewName The newname of the template\n     */\n    public static function rename($sOldName, $sNewName)\n    {\n        self::model()->updateAll(\n            array('template_name' => $sNewName),\n            \"template_name = :oldname\",\n            array(':oldname' => $sOldName)\n        );\n    }\n\n    /**\n     * Proxy for the AR method to manage the inheritance\n     * If one of the field that can be inherited is set to \"inherit\", then it will return the value of its parent\n     * NOTE: this is recursive, if the parent field itself is set to inherit, then it will\n     * the value of the parent of the parent, etc\n     *\n     * @param string $name the name of the attribute\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        $aAttributesThatCanBeInherited = array(\n            'files_css',\n            'files_js',\n            'options',\n            'cssframework_name',\n            'cssframework_css',\n            'cssframework_js',\n            'packages_to_load'\n        );\n\n        if (in_array($name, $aAttributesThatCanBeInherited) && $this->bUseMagicInherit) {\n            // Full inheritance of the whole field\n            $sAttribute = parent::__get($name);\n            if ($sAttribute === 'inherit') {\n                // NOTE: this is object recursive (if parent configuration field is set to inherit,\n                // then it will lead to this method again.)\n                $sAttribute = $this->getParentConfiguration()->$name;\n            }\n        } else {\n            $sAttribute = parent::__get($name);\n        }\n\n        return $sAttribute;\n    }\n\n    /**\n     * @todo document me\n     * @return string\n     */\n    public function getTemplateAndMotherNames()\n    {\n        $oRTemplate = $this;\n        $sTemplateNames = $this->sTemplateName;\n\n        while (!empty($oRTemplate->oMotherTemplate)) {\n            $sTemplateNames .= ' ' . $oRTemplate->template->extends;\n            $oRTemplate      = $oRTemplate->oMotherTemplate;\n            if (!($oRTemplate instanceof TemplateConfiguration)) {\n                // Throw alert: should not happen\n                break;\n            }\n        }\n\n        return $sTemplateNames;\n    }\n\n    /**\n     * Get the global template configuration with same name as $this.\n     * The global config has no sid, no gsid and no uid.\n     * @return TemplateConfiguration\n     */\n    public function getGlobalParent()\n    {\n        return self::model()->find(\n            'sid IS NULL AND uid IS NULL and gsid IS NULL AND template_name = :template_name',\n            [':template_name' => $this->template_name]\n        );\n    }\n\n    /**\n     * Get showpopups value from config or template configuration\n     */\n    public function getshowpopups()\n    {\n        $config = (int) App()->getConfig('showpopups');\n        if ($config == 2) {\n            if (isset($this->oOptions->showpopups)) {\n                $this->showpopups = (int)$this->oOptions->showpopups;\n            } else {\n                $this->showpopups = 1;\n            }\n        } else {\n            $this->showpopups = $config;\n        }\n    }\n\n    /**\n     * Set each option key value to 'inherit' instead of having only one 'inherit' value for options.\n     * Keys are fetched from parent xml configuration.\n     */\n    public function setOptionKeysToInherit()\n    {\n        $oTemplate = $this->getParentConfiguration();\n        $oTemplate->bUseMagicInherit = true;\n        $oTemplate->setOptions();\n\n        $aOptions = array();\n        if ((string) $this->options === 'inherit') {\n            foreach ($oTemplate->oOptions as $key => $value) {\n                $aOptions[$key] = 'inherit';\n            }\n            $this->options = json_encode($aOptions);\n        }\n    }\n\n    /**\n     * Sanitizes the theme options making sure that paths are valid.\n     * Options that match a file will be marked as invalid if the file\n     * is not valid, or replaced with the virtual path if the file is valid.\n     */\n    public function sanitizeImagePathsOnJson($attribute, $params)\n    {\n        $excludedOptions = [\n            'cssframework'\n        ];\n        // Validates all options of the theme. Not only classic ones which are expected to hold a path,\n        // as other options may hold a path as well (eg. custom theme options)\n        $decodedOptions = json_decode((string) $this->$attribute, true);\n        if (is_array($decodedOptions)) {\n            Yii::import('application.helpers.SurveyThemeHelper');\n            foreach ($decodedOptions as $option => &$value) {\n                if (in_array($option, $excludedOptions)) {\n                    continue;\n                }\n                $value = SurveyThemeHelper::sanitizePathInOption($value, $this->template_name, $this->sid);\n            }\n            $this->$attribute = json_encode($decodedOptions);\n        }\n    }\n\n    /**\n     * Returns the related Template.\n     * The template can only be accessed as a relation when this model is stored in the DB. Before\n     * saving, $this->template is null. In that case, this method will load the approriate Template.\n     * @return Template|null\n     */\n    private function getRelatedTemplate()\n    {\n        $template = !empty($this->template) ? $this->template : Template::model()->findByAttributes(['name' => $this->template_name]);\n        return $template;\n    }\n\n    /**\n     * Returns the value of the specified attribute ($attributeName) from\n     * the closest Template in the hierarchy.\n     *\n     * @param string $attributeName\n     * @return mixed\n     */\n    private function getAttributeValue($attributeName)\n    {\n        return $this->getTemplateConfigurationForAttribute($this, $attributeName)->template->$attributeName;\n    }\n\n    /**\n     * @todo document me\n     * @return array|mixed|string|null\n     */\n    public function getPreview()\n    {\n        if (empty($this->sPreviewImgTag)) {\n            if (is_a($this->template, 'Template')) {\n                $sTemplateFileFolder = Template::getTemplatesFileFolder($this->template->name);\n                $previewPath         = Template::getTemplatePath($this->template->name) . '/' . $sTemplateFileFolder;\n\n                if ($previewPath && file_exists($previewPath . '/preview.png')) {\n                    $previewUrl = Template::getTemplateURL($this->template->name) . $sTemplateFileFolder;\n                    $this->sPreviewImgTag = '<img src=\"' .\n                        $previewUrl .\n                        '/preview.png\" alt=\"template preview\" height=\"200\" class=\"img-thumbnail p-0 rounded-0\" />';\n                }\n            } else {\n                $this->sPreviewImgTag = '<em>' . gT('No preview available') . '</em>';\n            }\n        }\n\n        return $this->sPreviewImgTag;\n    }\n\n    /**\n     * Prepare all the needed datas to render the temple\n     * If any problem (like template doesn't exist), it will load the default theme configuration\n     * NOTE 1: This function will create/update all the packages needed to render the template, which imply to do the\n     *         same for all mother templates\n     * NOTE 2: So if you just want to access the TemplateConfiguration AR Object, you don't need to call it. Call it\n     *         only before rendering anything related to the template.\n     *\n     * @param  string $sTemplateName the name of the template to load.\n     *                               The string comes from the template selector in survey settings\n     * @param  string $iSurveyId the id of the survey. If\n     * @param bool $bUseMagicInherit\n     * @return self\n     */\n    public function prepareTemplateRendering($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = true)\n    {\n        if (!empty($sTemplateName) && !empty($iSurveyId)) {\n            if (!empty(self::$aPreparedToRender[$sTemplateName])) {\n                if (!empty(self::$aPreparedToRender[$sTemplateName][$iSurveyId])) {\n                    if (!empty(self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit])) {\n                        return self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit];\n                    } else {\n                        /** @psalm-supress InvalidArrayOffset */\n                        self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n                    }\n                } else {\n                    self::$aPreparedToRender[$sTemplateName][$iSurveyId] = array();\n                    /** @psalm-suppress InvalidArrayOffset */\n                    self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n                }\n            } else {\n                self::$aPreparedToRender = array();\n                self::$aPreparedToRender[$sTemplateName][$iSurveyId] = array();\n                /** @psalm-suppress InvalidArrayOffset */\n                self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n            }\n        }\n\n        $this->setBasics($sTemplateName, $iSurveyId, $bUseMagicInherit);\n        $this->setMotherTemplates(); // Recursive mother templates configuration\n        $this->setThisTemplate(); // Set the main config values of this template\n        $this->createTemplatePackage($this); // Create an asset package ready to be loaded\n        $this->removeFiles();\n        $this->getshowpopups();\n\n        if (!empty($sTemplateName) && !empty($iSurveyId)) {\n            self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = $this;\n        }\n        return $this;\n    }\n\n    /**\n     * Create a package for the asset manager.\n     * The asset manager will push to tmp/assets/xyxyxy/ the whole template directory (with css, js, files, etc.)\n     * And it will publish the CSS and the JS defined in config.xml. So CSS can use relative path for pictures.\n     * The publication of the package itself is in LSETwigViewRenderer::renderTemplateFromString()\n     *\n     * @param TemplateConfiguration|TemplateManifest $oTemplate TemplateManifest\n     */\n    protected function createTemplatePackage($oTemplate)\n    {\n        // Each template in the inheritance tree needs a specific alias\n        $sPathName  = 'survey.template-' . $oTemplate->sTemplateName . '.path';\n        $sViewName  = 'survey.template-' . $oTemplate->sTemplateName . '.viewpath';\n\n        Yii::setPathOfAlias($sPathName, $oTemplate->path);\n        Yii::setPathOfAlias($sViewName, $oTemplate->viewPath);\n\n        // First we add the framework replacement (bootstrap.css must be loaded before template.css)\n        $aCssFiles  = $this->getFrameworkAssetsReplacement('css');\n        $aJsFiles   = $this->getFrameworkAssetsReplacement('js');\n\n        // This variable will be used to add the variation name to the body class\n        // via $aClassAndAttributes['class']['body']\n        $this->aCssFrameworkReplacement = $aCssFiles;\n\n        // Then we add the template config files\n        $aTCssFiles = $this->getFilesToLoad($oTemplate, 'css');\n        $aTJsFiles  = $this->getFilesToLoad($oTemplate, 'js');\n\n        $aCssFiles  = array_merge($aCssFiles, $aTCssFiles);\n        $aJsFiles   = array_merge($aJsFiles, $aTJsFiles);\n\n        // Remove/Replace mother template files\n        if (\n            App()->getConfig('force_xmlsettings_for_survey_rendering') ||\n            ($this->template instanceof Template &&  $this->template->extends) ||\n            !empty($this->config->metadata->extends)\n        ) {\n              $aCssFiles = $this->changeMotherConfiguration('css', $aCssFiles);\n              $aJsFiles  = $this->changeMotherConfiguration('js', $aJsFiles);\n        }\n\n        //For fruity_twentythree surveytheme we completely replace the variation theme css file:\n        $aCssFiles = $this->replaceVariationFilesWithRtl($aCssFiles);\n\n        $this->sPackageName = 'survey-template-' . $this->sTemplateName;\n        $sTemplateurl       = $oTemplate->getTemplateURL();\n\n        $aDepends = empty($oTemplate->depends) ? array() : $oTemplate->depends;\n\n        // The package \"survey-template-{sTemplateName}\" will be available from anywhere in the app now.\n        // To publish it : Yii::app()->clientScript->registerPackage( 'survey-template-{sTemplateName}' );\n        // Depending on settings, it will create the asset directory, and publish the css and js files\n        App()->clientScript->addPackage($this->sPackageName, array(\n            'devBaseUrl'  => $sTemplateurl, // Used when asset manager is off\n            'basePath'    => $sPathName, // Used when asset manager is on\n            'css'         => $aCssFiles,\n            'js'          => $aJsFiles,\n            'depends'     => $aDepends,\n        ));\n    }\n\n    /**\n     * When rtl language is chosen:\n     * if a css file in folder variations is in array cssFiles, then it will be replaced with the\n     * *-rtl version\n     * @param array $cssFiles\n     * @return array\n     */\n    private function replaceVariationFilesWithRtl(array $cssFiles)\n    {\n        if (getLanguageRTL(App()->getLanguage()) == 'rtl') {\n            foreach ($cssFiles as $index => $cssFile) {\n                if (strpos($cssFile, 'css/variations/theme_') !== false) {\n                    $cssFileSplitArray = explode('.', $cssFile);\n                    $cssFiles[$index] =  $cssFileSplitArray[0] . '-rtl.css';\n                }\n            }\n        }\n        return $cssFiles;\n    }\n}\n", "<?php\n/**\n * This view generate the 'general' tab inside global settings.\n *\n */\n\nuse LimeSurvey\\Libraries\\FormExtension\\FormExtensionWidget;\nuse LimeSurvey\\Libraries\\FormExtension\\Inputs\\GlobalSettingsRenderer;\n\n?>\n<?php\n$thisdefaulttheme                = getGlobalSetting('defaulttheme');\n$templatenames                   = array_keys(Template::getTemplateList());\n$thisadmintheme                  = getGlobalSetting('admintheme');\n$thisdefaulthtmleditormode       = getGlobalSetting('defaulthtmleditormode');\n$thismaintenancemode             = !empty(getGlobalSetting('maintenancemode')) ? getGlobalSetting('maintenancemode') : 'off';\n$thisdefaultquestionselectormode = getGlobalSetting('defaultquestionselectormode');\n$thisdefaultthemeteeditormode    = getGlobalSetting('defaultthemeteeditormode');\n$dateformatdata                  = getDateFormatData(Yii::app()->session['dateformat']);\n?>\n\n<div class=\"container\">\n<div class=\"row\">\n    <div class=\"col-6\">\n        <!-- Global sitename -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='sitename'>\n                <?php eT(\"Site name:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='50' id='sitename' name='sitename' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('sitename')); ?>\"/>\n            </div>\n        </div>\n\n        <!-- Default Template -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"defaulttheme\">\n                <?php eT(\"Default theme:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <select class=\"form-select\" name=\"defaulttheme\" id=\"defaulttheme\">\n                    <?php foreach ($templatenames as $templatename) : ?>\n                        <option value='<?php echo $templatename; ?>' <?php echo ($thisdefaulttheme == $templatename) ? \"selected='selected'\" : \"\" ?> >\n                            <?php echo $templatename; ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n        </div>\n\n        <!-- Autocreate group and question -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"createsample\">\n                <?php eT(\"Create example question group and question:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'createsample',\n                    'checkedOption' => App()->getConfig('createsample'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Administrative Template -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"admintheme\">\n                <?php eT(\"Administration theme:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <select class=\"form-select\" name=\"admintheme\" id=\"admintheme\">\n                    <?php foreach ($aListOfThemeObjects as $templatename => $templateconfig): ?>\n                        <option value='<?php echo $templatename; ?>' <?php echo ($thisadmintheme == $templatename) ? \"selected='selected'\" : \"\" ?> >\n                            <?php echo $templateconfig->metadata->name; ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n            <?php if (Permission::model()->hasGlobalPermission('superadmin', 'read')): ?>\n                <div class=\"col-12 form-label \">\n                    <span class=\"hint\">\n                    <?php eT(\"You can add your custom themes in upload/admintheme\"); ?>\n                    </span>\n                </div>\n            <?php endif; ?>\n        </div>\n\n        <!-- Time difference -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='timeadjust'>\n                <?php eT(\"Time difference (in hours):\"); ?>\n            </label>\n            <div class=\"col-md-4\">\n                    <span>\n                        <input class=\"form-control\" type='text' id='timeadjust' name='timeadjust'\n                               value=\"<?php echo htmlspecialchars((string) (str_replace(array('+', ' hours', ' minutes'), array('', '', ''), (string) getGlobalSetting('timeadjust')) / 60)); ?>\"/>\n                    </span>\n            </div>\n            <div class=\"col-md-8\">\n                <?php echo gT(\"Server time:\") . ' ' . convertDateTimeFormat(date('Y-m-d H:i:s'), 'Y-m-d H:i:s', $dateformatdata['phpdate'] . ' H:i')\n                    . \"<br>\"\n                    . gT(\"Corrected time:\") . ' '\n                    . convertDateTimeFormat(dateShift(date(\"Y-m-d H:i:s\"), 'Y-m-d H:i:s', getGlobalSetting('timeadjust')), 'Y-m-d H:i:s', $dateformatdata['phpdate'] . ' H:i'); ?>\n            </div>\n        </div>\n\n        <?php if (isset(Yii::app()->session->connectionID)): ?>\n            <div class=\"mb-3\">\n                <label class=\"col-12 form-label\" for='iSessionExpirationTime'>\n                    <?php eT(\"Session lifetime for surveys (seconds):\"); ?>\n                </label>\n                <div class=\"col-12\">\n                    <input class=\"form-control\" type='text' size='10' id='iSessionExpirationTime' name='iSessionExpirationTime'\n                           value=\"<?php echo htmlspecialchars((string) getGlobalSetting('iSessionExpirationTime')); ?>\"/>\n                </div>\n            </div>\n        <?php endif; ?>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='ipInfoDbAPIKey'>\n                <?php eT(\"IP Info DB API Key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='ipInfoDbAPIKey' name='ipInfoDbAPIKey' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('ipInfoDbAPIKey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googleMapsAPIKey'>\n                <?php eT(\"Google Maps API key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googleMapsAPIKey' name='googleMapsAPIKey' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googleMapsAPIKey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googleanalyticsapikey'>\n                <?php eT(\"Google Analytics Tracking ID:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googleanalyticsapikey' name='googleanalyticsapikey'\n                       value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googleanalyticsapikey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googletranslateapikey'>\n                <?php eT(\"Google Translate API key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googletranslateapikey' name='googletranslateapikey'\n                       value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googletranslateapikey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class='col-12 form-label' for='characterset'>\n                <?php eT(\"Character set for file import/export:\") ?>\n            </label>\n            <div class='col-12'>\n                <select class='form-select' name='characterset' id='characterset'>\n                    <?php foreach ($aEncodings as $code => $charset): ?>\n                        <option value='<?php echo $code; ?>'\n                            <?php if (array_key_exists($thischaracterset, $aEncodings) && $code == $thischaracterset): ?>\n                                selected='selected'\n                            <?php elseif (!array_key_exists($thischaracterset, $aEncodings) && $code == \"auto\"): ?>\n                                selected='selected'\n                            <?php endif; ?>\n                        >\n                            <?php echo $charset; ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"col-6\">\n\n        <!-- Maintenance mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"maintenancemode\" title=\"<?php echo gT('Maintenance modes:\nOff\nSoft lock - participants are able to finish started surveys, no new participants are allowed\nFull lock - none of participants are allowed to take survey, even if they already started to take it'\n            ); ?> \">\n                <?php eT(\"Maintenance mode:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'maintenancemode',\n                    'checkedOption' => $thismaintenancemode,\n                    'selectOptions' => [\n                        \"off\"  => gT(\"Off\", 'unescaped'),\n                        \"soft\" => gT(\"Soft lock\", 'unescaped'),\n                        \"hard\" => gT(\"Full lock\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Refresh assets -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='refreshassets'>\n                <?php eT(\"Clear assets cache:\"); ?> <small>(<?php echo getGlobalSetting('customassetversionnumber'); ?>)</small>\n            </label>\n            <div class=\"col-12\">\n                <a href=\"<?php echo App()->createUrl('admin/globalsettings', array(\"sa\" => \"refreshAssets\")); ?>\"\n                   class=\"btn btn-outline-dark btn-large\">\n                   \t<?php eT(\"Clear now\"); ?>\n                </a>\n            </div>\n        </div>\n\n        <!-- Default Editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaulthtmleditormode'>\n                <?php eT(\"Default HTML editor mode:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget',\n                    [\n                        'name'          => 'defaulthtmleditormode',\n                        'checkedOption' => $thisdefaulthtmleditormode,\n                        'selectOptions' => [\n                            \"inline\" => gT(\"Inline\", 'unescaped'),\n                            \"popup\"  => gT(\"Popup\", 'unescaped'),\n                            \"none\"   => gT(\"HTML source\", 'unescaped')\n                        ]\n                    ]); ?>\n            </div>\n        </div>\n\n        <!-- Side menu behaviour -->\n        <?php /* This setting is just remaining here for campatibility reasons. It is not yet implemented into the new admmin panel */ ?>\n        <div class=\"mb-3\" style=\"display: none;\">\n            <label class='col-12 form-label' for='sideMenuBehaviour'>\n                <?php eT(\"Side-menu behaviour:\"); ?>\n            </label>\n            <div class='col-md-4'>\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'sideMenuBehaviour',\n                    'checkedOption' => $sideMenuBehaviour,\n                    'selectOptions' => [\n                        \"adaptive\"     => gT(\"Adaptive\", 'unescaped'),\n                        \"alwaysOpen\"   => gT(\"Always open\", 'unescaped'),\n                        \"alwaysClosed\" => gT(\"Always closed\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default question type selector mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaultquestionselectormode'>\n                <?php eT(\"Question type selector:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'defaultquestionselectormode',\n                    'checkedOption' => $thisdefaultquestionselectormode,\n                    'selectOptions' => [\n                        \"default\" => gT(\"Full\", 'unescaped'),\n                        \"none\"    => gT(\"Simple\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaultthemeteeditormode'>\n                <?php eT(\"Template editor:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'defaultthemeteeditormode',\n                    'checkedOption' => $thisdefaultthemeteeditormode,\n                    'selectOptions' => [\n                        \"default\" => gT(\"Full\", 'unescaped'),\n                        \"none\"    => gT(\"Simple\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='javascriptdebugbcknd'>\n                <?php eT(\"JS-Debug mode [Backend]:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'javascriptdebugbcknd',\n                    'checkedOption' => App()->getConfig('javascriptdebugbcknd'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='javascriptdebugfrntnd'>\n                <?php eT(\"JS-Debug mode [Frontend]:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'javascriptdebugfrntnd',\n                    'checkedOption' => App()->getConfig('javascriptdebugfrntnd'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Allow unstable extension updates (only visible for super admin)-->\n        <?php if (Permission::model()->hasGlobalPermission('superadmin', 'read')): ?>\n            <div class=\"mb-3\">\n                <label class=\"col-12 form-label\" for='allow_unstable_extension_update'>\n                    <?php eT('Allow unstable extension updates:'); ?>\n                </label>\n                <div class=\"col-12\">\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name' => 'allow_unstable_extension_update',\n                        'checkedOption' => App()->getConfig('allow_unstable_extension_update'),\n                        'selectOptions' => [\n                            '1' => gT('On'),\n                            '0' => gT('Off'),\n                        ],\n                    ]); ?>\n                </div>\n                <div class=\"col-12 form-label \">\n                        <span class=\"hint\">\n                            <?php eT(\"Enabling unstable updates will allow you to try alpha and beta versions of extensions. Talk to the extension author for more information.\"); ?>\n                        </span>\n                </div>\n            </div>\n        <?php endif; ?>\n    </div>\n\n    <div class=\"ls-flex-column ls-space padding left-5 right-5 col-md-7\">\n        <?= FormExtensionWidget::render(\n            App()->formExtensionService->getAll('globalsettings.general'),\n            new GlobalSettingsRenderer()\n        ); ?>\n    </div>\n\n</div>\n</div>\n\n<?php if (Yii::app()->getConfig(\"demoMode\") == true): ?>\n    <p>\n        <?php eT(\"Note: Demo mode is activated. Marked (*) settings can't be changed.\"); ?>\n    </p>\n<?php endif; ?>\n", "<?php\n\n/**\n * General options\n * @var AdminController $this\n * @var Survey $oSurvey\n */\n$scriptVarsNeccessary = \"\n        var jsonUrl = '';\n        var sAction = '';\n        var sParameter = '';\n        var sTargetQuestion = '';\n        var sNoParametersDefined = '';\n        var sAdminEmailAddressNeeded = '\" . gT(\"If you are using surveys with a closed participant group or notifications emails you need to set an administrator email address.\", 'js') . \"'\n        var sURLParameters = '';\n        var sAddParam = '';\n    \";\nYii::app()->getClientScript()->registerScript(\n    \"GeneralOption-variables\",\n    $scriptVarsNeccessary,\n    LSYii_ClientScript::POS_BEGIN\n);\n?>\n<!-- General options -->\n<?php\n$yii = Yii::app();\n$controller = $yii->getController();\n$action = 'editsurveysettings';\n\n$formatSelectOptions = array(\n    'S' => gT('Question by Question', 'unescaped'),\n    'G' => gT('Group by Group', 'unescaped'),\n    'A' => gT('All in one', 'unescaped')\n);\nif ($bShowInherited) {\n    $formatSelectOptions['I'] = $oSurveyOptions->format . \" \u1d35\";\n}\n?>\n<?php if ($action == 'editsurveysettings'): ?>\n<?php\n$sConfirmLanguageScript = \"\n        $(document).on('submit','#globalsetting',function(){\n        if(!ConfirmLanguageChange('\" . gT(\"All questions, answers, etc for removed languages will be lost. Are you sure?\", \"js\") . \"')){\n            return false;\n        }\n        });\n\n        function ConfirmLanguageChange(confirmtxt) {\n\n            if ($('#oldlanguages').val().trim()=='') {\n                mylangs= [];\n            } else {\n                mylangs=$('#oldlanguages').val().split(' ');\n            }\n\n            if (checkSelect2Languages(mylangs)) {\n                return true;\n            } else {\n                return confirm(confirmtxt);\n            }\n        }\n\n        function checkSelect2Languages(mylangs) {\n            newLanguages=$('#additional_languages').val();\n            for (x = 0; x < mylangs.length; x++) {\n                if ($.inArray(mylangs[x],newLanguages)==-1) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    \";\nYii::app()->getClientScript()->registerScript(\"GeneralOption-confirm-language\", $sConfirmLanguageScript, LSYii_ClientScript::POS_POSTSCRIPT);\n// var_dump($owner);\n?>\n\n<!-- Container -->\n<div class=\"row\">\n    <div class=\"col-lg-6 col-12\">\n        <?php if ($bShowAllOptions === true) { ?>\n            <?php if (!$oSurvey->isNewRecord): ?>\n                <!-- Survey Languages -->\n                <div class=\"mb-3\">\n                    <label class=\" form-label\" for='additional_languages'><?php eT(\"Survey languages:\"); ?></label>\n                    <div class=\"\">\n                        <?php\n                        $aAllLanguages = getLanguageDataRestricted(false, 'short');\n\n                        Yii::app()->getController()->widget('ext.admin.survey.LanguagesWidget.LanguagesWidget',\n                            array(\n                                'asDropDownList' => true,\n                                'htmlOptions' => array('multiple' => 'multiple', 'style' => \"width: 100%\", 'class' => 'form-select'),\n                                'data' => $aAllLanguages,\n                                'value' => $oSurvey->allLanguages,\n                                'name' => 'additional_languages',\n                                'pluginOptions' => array(\n                                    'placeholder' => gT('Select additional languages', 'unescaped'),\n                                    'baselanguage' => $oSurvey->language,\n                                    'baselanguage_selector' => '#language',\n                                )\n                            )\n                        );\n                        ?>\n                        <input type='hidden' name='oldlanguages' id='oldlanguages' value='<?php echo implode(' ', $oSurvey->additionalLanguages); ?>'>\n                    </div>\n                </div>\n                <!-- Base language -->\n                <div class=\"mb-3\">\n                    <label class=\" form-label\"><?php eT(\"Base language:\"); ?></label>\n                    <div class=\"\">\n                        <?php $this->widget('yiiwheels.widgets.select2.WhSelect2',\n                            array(\n                                'asDropDownList' => true,\n                                'htmlOptions' => array('style' => \"width: 100%\"),\n                                'data' => array_intersect_key($aAllLanguages, array_flip($oSurvey->allLanguages)),\n                                'value' => $oSurvey->language,\n                                'name' => 'language',\n                                'pluginOptions' => array()\n                            )\n                        ); ?>\n                    </div>\n                </div>\n            <?php endif; ?>\n        <?php } ?>\n        <!-- Survey owner -->\n        <?php\n        if (isset($oSurvey->owner_id) && Yii::app()->session['loginID'] == $oSurvey->owner_id || Permission::model()->hasGlobalPermission('superadmin', 'read')):?>\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='owner_id'><?php eT(\"Survey owner:\"); ?></label>\n                <div class=\"\"><?php\n                    Yii::app()->getController()->widget('yiiwheels.widgets.select2.WhSelect2',\n                        array(\n                            'asDropDownList' => true,\n                            'htmlOptions' => array(\n                                'style' => 'width:100%;'\n                            ),\n                            'data' => isset($users) ? $users : [],\n                            'value' => $oSurvey->owner_id,\n                            'name' => 'owner_id',\n                            'pluginOptions' => array()\n                        )\n                    );\n                    ?>\n                </div>\n            </div>\n        <?php endif; ?>\n\n        <!-- Administrator -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $admin = $oSurvey->admin; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='admin'><?php eT(\"Administrator:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $admin === 'inherit' ? 'd-none' : 'd-block'); ?>\" type='text' size='50' id='admin' name='admin'\n                           value=\"<?php echo htmlspecialchars((string) $admin); ?>\" data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $admin); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $admin === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->admin); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='admin'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'adminbutton',\n                        'checkedOption' => ($bShowInherited && $admin === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit'\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n        <!-- Admin email -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $adminemail = $oSurvey->adminemail; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='adminemail'><?php eT(\"Administrator email address:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $adminemail === 'inherit' ? 'd-none' : 'd-block'); ?>\" type='<?php echo ($bShowInherited) ? 'text' : 'email'; ?>'\n                           size='50' id='adminemail' name='adminemail' value=\"<?php echo htmlspecialchars((string) $adminemail); ?>\" data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $adminemail); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $adminemail === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->adminemail); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='adminemail'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'adminemailbutton',\n                        'checkedOption' => ($bShowInherited && $adminemail === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit'\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n        <!-- Bounce email -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $bounce_email = $oSurvey->bounce_email; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='bounce_email'><?php eT(\"Bounce email address:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $bounce_email === 'inherit' ? 'd-none' : 'd-block'); ?>\"\n                           type='<?php echo ($bShowInherited) ? 'text' : 'email'; ?>' size='50' id='bounce_email' name='bounce_email' value=\"<?php echo htmlspecialchars((string) $bounce_email); ?>\"\n                           data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $bounce_email); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $bounce_email === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->bounce_email); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='bounce_email'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'bounce_emailbutton',\n                        'checkedOption' => ($bShowInherited && $bounce_email === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit '\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n            <?php else: ?>\n            <!-- End URL -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='url'><?php eT(\"End URL:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' class=\"form-control\" id='url' name='url' placeholder=\"http://example.com\"/>\n                </div>\n            </div>\n\n            <!-- URL description -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='urldescrip'><?php eT(\"URL description:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' maxlength='255' size='50' id='urldescrip' name='urldescrip' value='' class=\"form-control\" placeholder=\"<?php eT('Some description text'); ?>\"/>\n                </div>\n            </div>\n\n            <!-- Date format -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='dateformat'><?php eT(\"Date format:\"); ?></label>\n                <div class=\"\">\n                    <?php echo CHtml::listBox('dateformat', $sDateFormatDefault, $aDateFormatData, array('id' => 'dateformat', 'size' => '1', 'class' => 'form-control')); ?>\n                </div>\n            </div>\n\n            <!-- Decimal mark -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='numberformat'><?php eT(\"Decimal mark:\"); ?></label>\n                <div class=\"\">\n                    <?php echo CHtml::listBox('numberformat', $sRadixDefault, $aRadixPointData, array('id' => 'numberformat', 'size' => '1', 'class' => 'form-control')); ?>\n                </div>\n            </div>\n\n            <!-- Administrator -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='admin'><?php eT(\"Administrator:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' size='50' id='admin' name='admin' class=\"form-control\" value='<?php echo $owner['full_name']; ?>'/>\n                </div>\n            </div>\n\n            <!-- Admin email -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='adminemail'><?php eT(\"Administrator email address:\"); ?></label>\n                <div class=\"\">\n                    <input type='email' size='30' class=\"form-control\" id='adminemail' name='adminemail' value='<?php echo $owner['email']; ?>'/>\n                </div>\n            </div>\n\n            <!-- Bounce Email -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='bounce_email'><?php eT(\"Bounce email address:\"); ?></label>\n                <div class=\"\">\n                    <input type='email' size='50' class=\"form-control\" id='bounce_email' name='bounce_email' value='<?php echo $owner['bounce_email']; ?>'/>\n                </div>\n            </div>\n        <?php endif; ?>\n    </div>\n    <div class=\"col-lg-6 col-12\">\n\n        <!-- Survey Group -->\n        <?php if ($bShowAllOptions === true) { ?>\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='gsid'><?php eT(\"Group:\"); ?></label>\n                <div class=\"\">\n                    <?php $this->widget('yiiwheels.widgets.select2.WhSelect2',\n                        array(\n                            'asDropDownList' => true,\n                            'htmlOptions' => array('style' => \"width: 100%\"),\n                            'data' => isset($aSurveyGroupList) ? $aSurveyGroupList : [],\n                            'value' => $oSurvey->gsid,\n                            'name' => 'gsid',\n                            'pluginOptions' => array()\n                        )\n                    ); ?>\n                </div>\n            </div>\n        <?php } ?>\n\n        <!-- Format -->\n        <div class=\"mb-3\">\n            <label class=\" form-label\" for='format'><?php eT(\"Format:\"); ?></label>\n            <div>\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'format',\n                    'checkedOption'         => $oSurvey->format,\n                    'selectOptions' => $formatSelectOptions,\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Theme -->\n        <div class=\"mb-3\" >\n            <label class=\" form-label\" for='template'><?php eT(\"Theme:\"); ?></label>\n            <div class=\"\">\n                <?php $themeConf = TemplateConfiguration::getInstanceFromTemplateName(($oSurvey->template === 'inherit') ? $oSurveyOptions->template : $oSurvey->template) ?>\n                <select id='template' style=\"width:100%;\" class=\"form-select activate-search\" name='template' data-updateurl='<?php echo App()->createUrl('themeOptions/getPreviewTag') ?>'\n                        data-inherit-template-name='<?= $themeConf->template_name ?>'>\n                    <?php if ($bShowInherited) : ?>\n                        <option value=\"inherit\" <?= ($oSurvey->template == 'inherit') ? 'selected=\"selected\"' : ''; ?>>\n                            <?= gT('Inherit') . ' [' . $themeConf->template_name . ']'; ?>\n                        </option>\n                    <?php endif; ?>\n                    <?php\n                    $aTemplateList = Template::getTemplateListWithPreviews();\n                    foreach ($aTemplateList as $templateName => $preview) {\n                        if (Permission::model()->hasGlobalPermission('templates', 'read') || Permission::model()->hasTemplatePermission($templateName\n                            ) || $oSurvey->template == htmlspecialchars((string) $templateName)) { ?>\n                            <option value='<?php echo $templateName; ?>'\n                                <?php if ($oSurvey->template && htmlspecialchars((string) $templateName) === $themeConf->template_name && $oSurvey->template !== 'inherit') { ?>\n                                    selected='selected'\n                                <?php } elseif (!$oSurvey->template && $templateName === App()->getConfig('defaulttheme') && $oSurvey->template !== 'inherit') { ?>\n                                    selected='selected'\n                                <?php } ?>\n                            ><?php echo $templateName; ?></option>\n                        <?php } ?>\n\n                    <?php } ?>\n                </select>\n            </div>\n            <div class=\"col-md-6 mt-4 w-100\" id=\"preview-image-container\">\n                <?php echo $themeConf->getPreview() ?>\n            </div>\n        </div>\n        <?php\n        /* @todo : add a js var with standard template list name */\n\n        //$aStandardTemplateLis=Template::getStandardTemplateList();\n        ?>\n\n    </div>\n</div>\n<?php $this->renderPartial('/surveyAdministration/_inherit_sub_footer'); ?>\n"], "fixing_code": ["<?php\n\n/*\n* LimeSurvey\n* Copyright (C) 2007-2015 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*/\n\n/**\n * This is the model class for table \"{{template_configuration}}\".\n *\n * NOTE: if you only need to access to the table, you don't need to call prepareTemplateRendering\n *\n * The following are the available columns in table '{{template_configuration}}':\n * @property integer $id Primary key\n * @property string $template_name\n * @property integer $sid Survey ID\n * @property integer $gsid\n * @property integer $uid user ID\n * @property string $files_css\n * @property string $files_js\n * @property string $files_print_css\n * @property string $options\n * @property string $cssframework_name\n * @property string $cssframework_css\n * @property string $cssframework_js\n * @property string $packages_to_load\n * @property string $packages_ltr\n * @property string $packages_rtl\n * @property Template $template\n *\n * @package       LimeSurvey\n * @subpackage    Backend\n */\nclass TemplateConfiguration extends TemplateConfig\n{\n    /**\n     * @var TemplateConfiguration $oParentTemplate The parent template name\n     * A template configuration, in the database, can inherit from another one.\n     * This used to manage the different configuration levels for a very same template: global, survey group, survey\n     * This is not related to motherTemplate (inheritance between two different templates)\n     */\n    public $oParentTemplate;\n\n    /**@var boolean\n     * Should the magic getters automatically retreives the parent value when field is set to inherit. Only turn to\n     * on for template rendering. There is no option inheritance on Manifest mode: values from XML are always used.\n     */\n    public $bUseMagicInherit = false;\n\n    /**@var boolean\n     * Indicate if this entry in DB get created on the fly. If yes, because of Cache, it can need a page redirect\n     */\n    public $bJustCreated = false;\n\n    // Caches\n\n    /** @var string $sPreviewImgTag the template preview image tag for the template list*/\n    public $sPreviewImgTag;\n\n    /** @var array $aInstancesFromTemplateName cache for method getInstanceFromTemplateName*/\n    public static $aInstancesFromTemplateName;\n\n    /** @var array $aInstancesFromTemplateName cache for method prepareTemplateRendering*/\n    public static $aPreparedToRender;\n\n    /** @var boolean $bTemplateCheckResult is the template valid?*/\n    private $bTemplateCheckResult;\n\n    /** @var string $sTypeIcon the type of template for icon (core vs user)*/\n    private $sTypeIcon;\n\n    /** @var array $aFilesTo cache for the method getFilesTo*/\n    private $aFilesTo;\n\n    /** @var array $aFrameworkAssetsToReplace cache for the method getFrameworkAssetsToReplace()*/\n    private $aFrameworkAssetsToReplace;\n\n    /** @var array $aReplacements cache for the method getFrameworkAssetsReplacement */\n    private $aReplacements;\n\n    /** @var array $Ofiles cache for the method getOfiles */\n    private $Ofiles;\n\n    public $generalFilesPath; //Yii::app()->getConfig(\"userthemerootdir\").DIRECTORY_SEPARATOR.'generalfiles'.DIRECTORY_SEPARATOR;\n\n    /** @var int $showpopups show warnings when running survey */\n    public $showpopups; //\n\n    // for survey theme gridview columns\n    public $template_type;\n    public $template_extends;\n    public $template_description;\n\n\n    /**\n     * @todo document me\n     * @return string the associated database table name\n     */\n    public function tableName()\n    {\n        return '{{template_configuration}}';\n    }\n\n    /**\n     * @todo document me\n     * @return array validation rules for model attributes.\n     */\n    public function rules()\n    {\n        // NOTE: you should only define rules for those attributes that\n        // will receive user inputs.\n        return array(\n            array('template_name', 'required'),\n            array('id, sid, gsid', 'numerical', 'integerOnly' => true),\n            array('template_name', 'filter', 'filter' => function ($value) {\n                return sanitize_filename($value, false, false, false);\n            }),\n            array('template_name', 'length', 'max' => 150),\n            array('cssframework_name', 'length', 'max' => 45),\n            array('files_css, files_js, files_print_css, options, cssframework_css, cssframework_js, packages_to_load',\n                'safe'),\n            array('options', 'sanitizeImagePathsOnJson'),\n            // The following rule is used by search().\n            array('id, template_name, sid, gsid, files_css, files_js, files_print_css, options, cssframework_name, cssframework_css, cssframework_js, packages_to_load', 'safe', 'on' => 'search'),\n        );\n    }\n\n    /**\n     * @todo document me\n     * @return array relational rules.\n     */\n    public function relations()\n    {\n        return array(\n            'template' => array(self::HAS_ONE, 'Template', array('name' => 'template_name'), 'together' => true),\n        );\n    }\n\n    /** @inheritdoc */\n    public function defaultScope()\n    {\n        return array('order' => App()->db->quoteColumnName($this->getTableAlias(false, false) . '.template_name'));\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return array customized attribute labels (name=>label)\n     */\n    public function attributeLabels()\n    {\n        return array(\n            'id' => 'ID',\n            'template_name' => gT('Template name'),\n            'sid' => 'Sid',\n            'gsid' => 'Gsid',\n            'files_css' => gT('Files CSS'),\n            'files_js' => gT('Files JS'),\n            'files_print_css' => gT('Files Print CSS'),\n            'options' => gT('Options'),\n            'cssframework_name' => gT('CSS framework name'),\n            'cssframework_css' => gT('CSS framework CSS'),\n            'cssframework_js' => gT('CSS framework JS'),\n            'packages_to_load' => gT('Packages to load'),\n        );\n    }\n\n    /**\n     * Gets an instance of a templateconfiguration by name\n     *\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromTemplateName($sTemplateName, $abstractInstance = false)\n    {\n        if (!empty(self::$aInstancesFromTemplateName[$sTemplateName]) && !$abstractInstance) {\n            return self::$aInstancesFromTemplateName[$sTemplateName];\n        }\n\n        $oInstance = self::model()->find(\n            'template_name=:template_name AND sid IS NULL AND gsid IS NULL',\n            array(':template_name' => $sTemplateName)\n        );\n\n        // If the survey configuration table of the wanted template doesn't exist (eg: manually deleted),\n        // then we provide the default one.\n        if (!is_a($oInstance, 'TemplateConfiguration')) {\n            $oInstance = self::getInstanceFromTemplateName(App()->getConfig('defaulttheme'));\n        }\n\n        if ($abstractInstance === true) {\n            return $oInstance;\n        }\n\n        self::$aInstancesFromTemplateName[$sTemplateName] = $oInstance;\n\n        return $oInstance;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveygroup ID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyGroupId\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName = null, $abstractInstance = false)\n    {\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null\n            ? $sTemplateName\n            : SurveysGroups::model()->findByPk($iSurveyGroupId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n\n            $oTemplateConfigurationModel->bJustCreated = true;\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveyID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyId\n     * @param string $sTemplateName\n     * @param boolean $abstractInstance\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyId($iSurveyId, $sTemplateName = null, $abstractInstance = false)\n    {\n        // set template name if it does not exists or if it is inherit\n        if ($sTemplateName === null || $sTemplateName == 'inherit') {\n            $oSurvey = Survey::model()->findByPk($iSurveyId);\n            // set real value from inheritance\n            if (!empty($oSurvey->oOptions->template)) {\n                $sTemplateName = $oSurvey->oOptions->template;\n            }\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a Theme options array based on a surveyID\n     *\n     * @param integer $iSurveyId\n     * @param bool $bInherited should inherited theme option values be used?\n     * @return array\n     */\n    public static function getThemeOptionsFromSurveyId($iSurveyId = 0, $bInherited = false)\n    {\n        $aTemplateConfigurations = array();\n        // fetch all themes belonging to $iSurveyId\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->params = array('sid' => $iSurveyId);\n        $oTemplateConfigurations = self::model()->findAll($criteria);\n\n        if ($bInherited) { // inherited values\n            foreach ($oTemplateConfigurations as $key => $oTemplateConfiguration) {\n                $oTemplateConfiguration->bUseMagicInherit = true;\n                $oTemplateConfiguration->setOptions();\n                // set array with values\n                $aTemplateConfigurations[$key]['id'] = null;\n                $aTemplateConfigurations[$key]['sid'] = $iSurveyId;\n                $aTemplateConfigurations[$key]['template_name'] = $oTemplateConfiguration->template_name;\n                $aTemplateConfigurations[$key]['config']['options'] = (array)$oTemplateConfiguration->oOptions;\n            }\n        } else { // db values\n            foreach ($oTemplateConfigurations as $key => $oTemplateConfiguration) {\n                $oTemplateConfiguration->bUseMagicInherit = false;\n                $oAttributes = $oTemplateConfiguration->attributes;\n                // set array with values\n                $aTemplateConfigurations[$key]['id'] = null;\n                $aTemplateConfigurations[$key]['sid'] = $iSurveyId;\n                $aTemplateConfigurations[$key]['template_name'] = $oAttributes['template_name'];\n                $aTemplateConfigurations[$key]['config']['options'] = isJson($oAttributes['options'])\n                    ? (array)json_decode((string) $oAttributes['options'])\n                    : $oAttributes['options'];\n            }\n        }\n\n        return $aTemplateConfigurations;\n    }\n\n    /**\n     * For a given survey, it checks if its theme have a all the needed configuration entries (survey + survey group).\n     * Else, it will create it.\n     * @TODO: recursivity for survey group\n     * @param int $iSurveyId\n     * @return TemplateConfiguration the template configuration for the survey group\n     */\n    public static function checkAndcreateSurveyConfig($iSurveyId)\n    {\n        //if a template name is given also check against that\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n        $sTemplateName  = $oSurvey->oOptions->template;\n        $iSurveyGroupId = $oSurvey->gsid;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Get an instance of a fitting TemplateConfiguration\n     * NOTE: for rendering prupose, you should never call this function directly, but rather Template::getInstance.\n     * if force_xmlsettings_for_survey_rendering is on, then the configuration from the XML file should be loaded,\n     * not the one from database\n     *\n     * @param string $sTemplateName\n     * @param integer $iSurveyGroupId\n     * @param integer $iSurveyId\n     * @return TemplateConfiguration\n     */\n    public static function getInstance($sTemplateName = null, $iSurveyGroupId = null, $iSurveyId = null, $abstractInstance = false)\n    {\n        $oTemplateConfigurationModel = new TemplateConfiguration();\n\n        if ($sTemplateName != null && $iSurveyGroupId == null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName(\n                $sTemplateName,\n                $abstractInstance\n            );\n        }\n\n        if ($iSurveyGroupId != null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyGroup(\n                $iSurveyGroupId,\n                $sTemplateName,\n                true\n            );\n        }\n\n        if ($iSurveyId != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyId(\n                $iSurveyId,\n                $sTemplateName,\n                true\n            );\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * Typical usecase:\n     * - Initialize the model fields with values from filter form.\n     * - Execute this method to get CActiveDataProvider instance which will filter\n     * models according to data in model fields.\n     * - Pass data provider to CGridView, CListView or any similar widget.\n     *\n     * @return CActiveDataProvider the data provider that can return the models\n     * based on the search/filter conditions.\n     */\n    public function search()\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $criteria = new CDbCriteria();\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON ' .\n            App()->db->quoteColumnName(\"t.template_name\") .\n            ' = template.name';\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('t.gsid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        $criteria->compare('id', $this->id);\n        $criteria->compare('template_name', $this->template_name, true);\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n\n        return new CActiveDataProvider($this, array(\n            'criteria' => $criteria,\n        ));\n    }\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * @param integer $gsid Survey group, else get global\n     * @return CActiveDataProvider\n     * @throws Exception\n     */\n    public function searchGrid(?int $gsid = null)\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $pageSizeTemplateView = App()->user->getState('pageSizeTemplateView', App()->params['defaultPageSize']);\n        $criteria = new CDbCriteria();\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON ' .\n            App()->db->quoteColumnName(\"t.template_name\") .\n            ' = template.name';\n        $criteria->together = true;\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        if ($gsid !== null) {\n            /* Group configuration */\n            $criteria->compare('t.gsid', $gsid);\n        } else {\n            /* Global configuration */\n            $criteria->addCondition('t.gsid IS NULL');\n        }\n\n        $criteria->compare('id', $this->id);\n        if (!empty($this->template_name)) {\n            $templateNameEscaped = strtr($this->template_name, ['%' => '\\%', '_' => '\\_', '\\\\' => '\\\\\\\\']);\n            $criteria->addCondition('template.name LIKE :templatename1 OR template.title LIKE :templatename2');\n            $criteria->params[':templatename1'] = '%' . $templateNameEscaped . '%';\n            $criteria->params[':templatename2'] = '%' . $templateNameEscaped . '%';\n        }\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n        $criteria->compare('template.description', $this->template_description, true);\n        $criteria->compare('template.extends', $this->template_extends, true);\n\n        Yii::import('application.helpers.SurveyThemeHelper');\n        $coreTemplates = SurveyThemeHelper::getStandardTemplateList();\n        if ($this->template_type == 'core') {\n            $criteria->addInCondition('template_name', $coreTemplates);\n        } elseif ($this->template_type == 'user') {\n            $criteria->addNotInCondition('template_name', $coreTemplates);\n        }\n\n        return new CActiveDataProvider($this, array(\n            'criteria' => $criteria,\n            'pagination' => array(\n                'pageSize' => $pageSizeTemplateView,\n            ),\n        ));\n    }\n\n    /**\n     * Twig statements can be used in Theme description\n     */\n    public function getDescription()\n    {\n        $sDescription = $this->template->description;\n\n          // If wrong Twig in manifest, we don't want to block the whole list rendering\n          // Note: if no twig statement in the description, twig will just render it as usual\n        try {\n            $sDescription = App()->twigRenderer->convertTwigToHtml($this->template->description);\n            $sDescription = viewHelper::purified($sDescription);\n        } catch (\\Exception $e) {\n          // It should never happen, but let's avoid to anoy final user in production mode :)\n            if (YII_DEBUG) {\n                App()->setFlashMessage(\n                    \"Twig error in template \" .\n                    $this->template->name .\n                    \" description <br> Please fix it and reset the theme <br>\" .\n                    $e,\n                    'error'\n                );\n            }\n        }\n\n          return $sDescription;\n    }\n\n    /**\n     * Returns the static model of the specified AR class.\n     * Please note that you should have this exact method in all your CActiveRecord descendants!\n     *\n     * @param string $className active record class name.\n     * @return TemplateConfiguration the static model class\n     */\n    public static function model($className = __CLASS__)\n    {\n        /** @var self $model */\n        $model = parent::model($className);\n        return $model;\n    }\n\n\n    /**\n     * Create a new entry in {{templates}} and {{template_configuration}} table using the template manifest\n     *\n     * @param string $sTemplateName the name of the template to import\n     * @param array $aDatas Data\n     * @return boolean true on success | exception\n     * @throws Exception\n     */\n    public static function importManifest($sTemplateName, $aDatas = array())\n    {\n        if (!empty($aDatas['extends'])) {\n            $oMotherTemplate = self::getInstanceFromTemplateName($aDatas['extends']);\n            if (is_a($oMotherTemplate, 'TemplateConfiguration')) {\n                $aDatas['api_version']     = $oMotherTemplate->template->api_version;\n                $aDatas['view_folder']     = $oMotherTemplate->template->view_folder;\n                $aDatas['author_email']    = $oMotherTemplate->template->author_email;\n                $aDatas['author_url']      = $oMotherTemplate->template->author_url;\n                $aDatas['copyright']       = $oMotherTemplate->template->copyright;\n                $aDatas['version']         = $oMotherTemplate->template->version;\n                $aDatas['license']         = $oMotherTemplate->template->license;\n                $aDatas['files_folder']    = $oMotherTemplate->template->files_folder;\n                $aDatas['aOptions']        = (empty($aDatas['aOptions']))\n                    ? json_decode($oMotherTemplate->options)\n                    : $aDatas['aOptions'];\n            }\n        }\n\n        return parent::importManifest($sTemplateName, $aDatas);\n    }\n\n    /**\n     * @todo document me\n     */\n    public function setToInherit()\n    {\n        $this->files_css         = 'inherit';\n        $this->files_js          = 'inherit';\n        $this->files_print_css   = 'inherit';\n        $this->options           = 'inherit';\n        $this->cssframework_name = 'inherit';\n        $this->cssframework_css  = 'inherit';\n        $this->cssframework_js   = 'inherit';\n        $this->packages_to_load  = 'inherit';\n    }\n\n    /**\n     * Check if the template exists and is valid\n     *\n     * @return bool\n     */\n    public function checkTemplate()\n    {\n        if (empty($this->bTemplateCheckResult)) {\n            $this->bTemplateCheckResult = true;\n            if (\n                !is_object($this->template) ||\n                (is_object($this->template) && !Template::checkTemplateXML($this->template->name, $this->template->folder))\n            ) {\n                $this->bTemplateCheckResult = false;\n            }\n        }\n        return $this->bTemplateCheckResult;\n    }\n\n    /**\n     * @todo document me\n     *\n     * @param string $sTemplateName\n     * @param string $iSurveyId\n     * @param bool $bUseMagicInherit\n     */\n    public function setBasics($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = false)\n    {\n        $this->bUseMagicInherit = $bUseMagicInherit;\n        $this->sTemplateName = $this->template->name;\n        $this->setIsStandard(); // Check if  it is a CORE template\n        $this->path = ($this->isStandard)\n            ? App()->getConfig(\"standardthemerootdir\") . DIRECTORY_SEPARATOR . $this->template->folder . DIRECTORY_SEPARATOR\n            : App()->getConfig(\"userthemerootdir\") . DIRECTORY_SEPARATOR . $this->template->folder . DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Add a file replacement in the field `file_{css|js|print_css}` in table {{template_configuration}},\n     * eg: {\"replace\": [ {original files to replace here...}, \"css/template.css\",]}\n     * In general, should be called from TemplateManifest, after adding a file replacement inside the manifest.\n     *\n     * @param string $sFile the file to replace\n     * @param string $sType css|js\n     * @return bool|void\n     * @throws Exception\n     */\n    public function addFileReplacement($sFile, $sType)\n    {\n        $sField = 'files_' . $sType;\n        $oFiles = (array) json_decode((string) $this->$sField);\n\n        $oFiles['replace'][] = $sFile;\n\n        $this->$sField = json_encode($oFiles);\n\n        if ($this->save()) {\n            return true;\n        } else {\n            throw new Exception(\"could not add $sFile to  $sField replacements! \" . $this->getErrors());\n        }\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return string\n     */\n    public function getTypeIcon()\n    {\n        if (empty($this->sTypeIcon)) {\n            Yii::import('application.helpers.SurveyThemeHelper');\n            $this->sTypeIcon = (SurveyThemeHelper::isStandardTemplate($this->template->name)) ?\n                gT(\"Core theme\") :\n                gT(\"User theme\");\n        }\n        return $this->sTypeIcon;\n    }\n\n    /**\n     * Displays survey theme action buttons\n     *\n     * @return string\n     */\n    public function getButtons()\n    {\n        /* What ? We can get but $this->getAttribute ??? */\n        $gsid = App()->request->getQuery('id', null); // $this->gsid;\n        // don't show any buttons if user doesn't have update permission\n        if (!Permission::model()->hasGlobalPermission('templates', 'update')) {\n            /* Global settings */\n            if (empty($gsid) || App()->getController()->action->id != \"surveysgroups\") {\n                return '';\n            }\n            /* SurveysGroups settings */\n            $oSurveysGroups = SurveysGroups::model()->findByPk($gsid);\n            if (empty($oSurveysGroups)) {\n                return '';\n            }\n            if (!$oSurveysGroups->hasPermission('surveys', 'update')) {\n                return '';\n            }\n        }\n        /* Use sanitized filename for previous bad upload */\n        $templateName = sanitize_filename($this->template_name, false, false, false);\n        $sEditorUrl = App()->getController()->createUrl(\n            'admin/themes/sa/view',\n            array(\"templatename\" => $templateName)\n        );\n        $sExtendUrl = App()->getController()->createUrl('admin/themes/sa/templatecopy');\n        $sOptionUrl = (App()->getController()->action->id == \"surveysgroups\") ?\n            App()->getController()->createUrl(\n                'themeOptions/updateSurveyGroup',\n                array(\"id\" => $this->id, \"gsid\" => $gsid)\n            ) :\n            App()->getController()->createUrl(\n                'themeOptions/update',\n                array(\"id\" => $this->id)\n            );\n\n        $sUninstallUrl = Yii::app()->getController()->createUrl('themeOptions/uninstall/');\n        $sResetUrl     = Yii::app()->getController()->createUrl('themeOptions/reset/', array(\"gsid\" => (int) $gsid));\n\n        $dropdownItems = [];\n        $dropdownItems[] = [\n            'title'            => gT('Theme editor'),\n            'url'              => $sEditorUrl,\n            'linkId'           => 'template_editor_link_' . $this->id,\n            'linkClass'        => '',\n            'iconClass'        => 'ri-brush-fill',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n\n        ];\n\n        $dropdownItems[] = [\n            'title'            => gT('Theme options'),\n            'url'              => $sOptionUrl,\n            'linkId'           => 'template_options_link_' . $this->id ,\n            'linkClass'        => '',\n            'iconClass'        => 'ri-dashboard-3-fill',\n            'enabledCondition' => $this->getHasOptionPage(),\n        ];\n\n\n        $dropdownItems[] = [\n            'title'            => gT('Extend'),\n            'url'              => $sExtendUrl,\n            'linkId'           => 'extendthis_' . $this->id,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-file-copy-line text-success',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n            'linkAttributes'   => [\n                'title'            => sprintf(gT('Type in the new name to extend %s'), $templateName),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Extend'),\n                'data-text'        => gT('Please type in the new theme name above.'),\n                'data-post'        => json_encode([\n                    \"copydir\" => $templateName,\n                    \"action\"  => \"templatecopy\",\n                    \"newname\" => [ \"value\" => \"extends_\" . $templateName,\n                                    \"type\" => \"text\",\n                                    \"class\" => \"form-control col-md-12\" ]\n                    ]),\n            ]\n        ];\n\n\n        $dropdownItems[] = [\n            'title'            => gT('Uninstall'),\n            'url'              => $sUninstallUrl,\n            'linkId'           => 'remove_fromdb_link_' . $this->id,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-delete-bin-fill text-danger',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\" &&\n                                    $templateName != App()->getConfig('defaulttheme'),\n            'linkAttributes'   => [\n                'title'            => gT('Uninstall this theme'),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Uninstall'),\n                'data-text'        => gT('This will reset all the specific configurations of this theme.')\n                                         . '<br>' . gT('Do you want to continue?'),\n                'data-post'        => json_encode([ \"templatename\" => $templateName ]),\n                'data-button-type' => \"btn-danger\"\n            ]\n        ];\n\n        $dropdownItems[] = [\n            'title'            => gT('Reset'),\n            'url'              => $sResetUrl,\n            'linkId'           => 'remove_fromdb_link_' . $this->id,\n            'linkClass'        => 'selector--ConfirmModal ',\n            'iconClass'        => 'ri-refresh-line text-warning',\n            'enabledCondition' => App()->getController()->action->id !== \"surveysgroups\",\n            'linkAttributes'   => [\n                'title'            => gT('Reset this theme'),\n                'data-button-no'   => gt('Cancel'),\n                'data-button-yes'  => gt('Reset'),\n                'data-text'        => gT('This will reload the configuration file of this theme.') . '<br>' . gT('Do you want to continue?'),\n                'data-post'        => json_encode([ \"templatename\" => $templateName ]),\n                'data-button-type' => \"btn-warning\"\n            ]\n        ];\n        return App()->getController()->widget('ext.admin.grid.GridActionsWidget.GridActionsWidget', ['dropdownItems' => $dropdownItems], true);\n    }\n\n    /**\n     * Returns true if this theme or any mothertemplate has a TemplateConfiguration set\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function getHasOptionPage()\n    {\n        $filteredName = Template::templateNameFilter($this->template->name);\n        $oRTemplate = $this->prepareTemplateRendering($filteredName);\n\n        $sOptionFile = 'options' . DIRECTORY_SEPARATOR . 'options.twig';\n        while (!file_exists($oRTemplate->path . $sOptionFile)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                return false;\n                break;\n            }\n            $oRTemplate = $oMotherTemplate->prepareTemplateRendering($this->template->name);\n        }\n        return true;\n    }\n\n    /**\n     * Set a value on a given option at global setting level (survey level not affected).\n     * Will be used to turn ON ajax mode on update.\n     *\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function setGlobalOption($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n\n            if (empty($this->sid)) {\n                $oOptions->$name = $value;\n                $sOptions = json_encode($oOptions);\n                $this->options = $sOptions;\n                $this->save();\n            }\n        }\n    }\n\n    /**\n     * Apply options from XML configuration for all missing template options\n     *\n     * @return void\n     */\n    public function addOptionFromXMLToLiveTheme()\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = get_object_vars(json_decode($this->options));\n            $oTemplateConfigurationModel = new TemplateManifest();\n            $oTemplateConfigurationModel->setBasics();\n            $oXmlOptions = get_object_vars($oTemplateConfigurationModel->config->options);\n\n            // compare template options to options from the XML and add if missing\n            foreach ($oXmlOptions as $key => $value) {\n                if (!array_key_exists($key, $oOptions)) {\n                    $this->addOptionToLiveTheme($key, $value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add an option definition to the current theme.\n     * Will be used to turn ON ajax mode on update.\n     *\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function addOptionToLiveTheme($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n            $oOptions->$name = $value;\n            $sOptions = json_encode($oOptions);\n            $this->options = $sOptions;\n            $this->save();\n        }\n    }\n\n    /**\n     * Set option (unless if options is set to \"inherit\").\n     * @param string $name\n     * @param mixed $value\n     * @return void\n     */\n    public function setOption($name, $value)\n    {\n        if ($this->options != 'inherit') {\n            $oOptions = json_decode($this->options);\n\n            $oOptions->$name = $value;\n            $sOptions = json_encode($oOptions);\n            $this->options = $sOptions;\n            $this->save();\n        }\n    }\n\n    /**\n     * @todo document me\n     *\n     * @param $from\n     * @param $to\n     * @return string\n     */\n    private function getRelativePath($from, $to)\n    {\n        $dir = explode(DIRECTORY_SEPARATOR, is_file($from) ? dirname((string) $from) : rtrim((string) $from, DIRECTORY_SEPARATOR));\n        $file = explode(DIRECTORY_SEPARATOR, (string) $to);\n\n        while ($dir && $file && ($dir[0] == $file[0])) {\n            array_shift($dir);\n            array_shift($file);\n        }\n        return str_repeat('..' . DIRECTORY_SEPARATOR, count($dir)) . implode(DIRECTORY_SEPARATOR, $file);\n    }\n\n    /**\n     * Return image information\n     *\n     * @param string $file with Path\n     * @return array|null\n     */\n    private function getImageInfo($file, $pathPrefix = '')\n    {\n        if (!file_exists($file)) {\n            return;\n        }\n        // Currently it's private and only used one time, before put this function in twig :\n        // must validate directory is inside rootdir\n        $checkImage = LSYii_ImageValidator::validateImage($file);\n        if (!$checkImage['check']) {\n            return;\n        }\n        $filePath = $this->getRelativePath(App()->getConfig('rootdir'), $file);\n        $previewFilePath = App()->getAssetManager()->publish($file);\n        $fileName = basename($file);\n        return [\n            'preview' => $previewFilePath,\n            'filepath' => $pathPrefix . $fileName,\n            'filepathOptions' => $filePath,\n            'filename' => $fileName\n        ];\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return array\n     */\n    public function getOptionPageAttributes()\n    {\n        $aData = $this->attributes;\n        $aData['maxFileSize'] = getMaximumFileUploadSize();\n        $aData['imageFileList'] = [];\n        Yii::import('application.helpers.SurveyThemeHelper');\n        $categoryList = SurveyThemeHelper::getFileCategories($this->template_name, $this->sid);\n\n        // Compose list of image files for each category\n        foreach ($categoryList as $category) {\n            // Get base path for category\n            $pathPrefix = empty($category->pathPrefix) ? '' : $category->pathPrefix;\n            $basePath = $category->path;\n            // If the category is theme, add the \"files folder\" to the base path, as that's the directory to scan for files\n            if ($category->name == 'theme') {\n                $filesFolder = $this->getAttributeValue('files_folder') . DIRECTORY_SEPARATOR;\n                $basePath = $basePath . $filesFolder;\n                $pathPrefix = $pathPrefix . $filesFolder;\n            }\n            // Get full list of files\n            $fileList = Template::getOtherFiles($basePath);\n            // Order File List alphabetically\n            usort($fileList, function ($a, $b) {\n                return strcasecmp((string) $a['name'], (string) $b['name']);\n            });\n            // Keep only image files\n            foreach ($fileList as $file) {\n                $imageInfo = $this->getImageInfo($basePath . $file['name'], $pathPrefix);\n                if ($imageInfo) {\n                    $aData['imageFileList'][] = array_merge(\n                        [\n                            'group' => $category->title,\n                        ],\n                        $imageInfo\n                    );\n                }\n            };\n        }\n\n        return $aData;\n    }\n\n    /**\n     * @todo document me\n     *\n     * @return mixed\n     */\n    public function getOptionPage()\n    {\n        $oSimpleInheritance = Template::getInstance($this->template->name, $this->sid, $this->gsid, null, true);\n        $oSimpleInheritance->options = 'inherit';\n        $oSimpleInheritanceTemplate = $oSimpleInheritance->prepareTemplateRendering($this->template->name);\n\n        // TODO: It's not clear which class prepareTemplateRendering() returns or should return.\n        /** @var Template */\n        $oTemplate = $this->prepareTemplateRendering($this->template->name);\n\n        $renderArray = array('templateConfiguration' => $oTemplate->getOptionPageAttributes());\n\n        $oTemplate->setToInherit();\n        $oTemplate->setOptions();\n\n        $oOptions = (array) $oSimpleInheritanceTemplate->oOptions;\n\n        //We add some extra values to the option page\n        //This is just a dirty hack, and somewhere in the future we will correct it\n        $renderArray['oParentOptions'] = array_merge(\n            ($oOptions),\n            array(\n                'packages_to_load' =>  $oTemplate->packages_to_load,\n                'files_css' => $oTemplate->files_css\n            )\n        );\n\n        $renderArray['aOptionAttributes'] = TemplateManifest::getOptionAttributes($oSimpleInheritance->path);\n        $renderArray['aFontOptions'] = TemplateManifest::getFontDropdownOptions();\n        return App()->twigRenderer->renderOptionPage($oTemplate, $renderArray);\n    }\n\n    /**\n     * From a list of json files in db it will generate a PHP array ready to use by removeFileFromPackage()\n     *\n     * @param TemplateConfiguration $oTemplate\n     * @param string $sType\n     * @param string $sAction Action\n     * @return array\n     * @internal param string $jFiles json\n     */\n    protected function getFilesTo($oTemplate, $sType, $sAction)\n    {\n        // Todo: make it in a recursive way\n        if (!empty($this->aFilesTo[$oTemplate->template->name])) {\n            if (!empty($this->aFilesTo[$oTemplate->template->name][$sType])) {\n                if (!empty($this->aFilesTo[$oTemplate->template->name][$sType][$sAction])) {\n                    return $this->aFilesTo[$oTemplate->template->name][$sType][$sAction];\n                } else {\n                    $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n                }\n            } else {\n                $this->aFilesTo[$oTemplate->template->name][$sType]           = array();\n                $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n            }\n        } else {\n            $this->aFilesTo[$oTemplate->template->name]                   = array();\n            $this->aFilesTo[$oTemplate->template->name][$sType]           = array();\n            $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = array();\n        }\n\n        $sField = 'files_' . $sType;\n        $oFiles = $this->getOfiles($oTemplate, $sField);\n\n        $aFiles = array();\n\n        if ($oFiles) {\n            foreach ($oFiles as $action => $aFileList) {\n                if (is_array($aFileList)) {\n                    if ($action == $sAction) {\n                        // Specific inheritance of one of the value of the json array\n                        if ($aFileList[0] == 'inherit') {\n                            $aParentjFiles = (array) json_decode((string) $oTemplate->getParentConfiguration->$sField);\n                            $aFileList = $aParentjFiles[$action];\n                        }\n\n                        $aFiles = array_merge($aFiles, $aFileList);\n                    }\n                }\n            }\n        }\n\n        $this->aFilesTo[$oTemplate->template->name][$sType][$sAction] = $aFiles;\n        return $aFiles;\n    }\n\n    /**\n     * Get the json files (to load/replace/remove) from  a theme, and checks if its correctly formated\n     *\n     * @param $oTemplate the theme to check\n     * @param $sField name of the DB field to get (file_css, file_js, file_print_css)\n     * @return bool|mixed\n     */\n    protected function getOfiles($oTemplate, $sField)\n    {\n        if (!empty($this->Ofiles[$oTemplate->template->name])) {\n            if (!empty($this->Ofiles[$oTemplate->template->name][$sField])) {\n                return $this->Ofiles[$oTemplate->template->name][$sField];\n            } else {\n                $this->Ofiles[$oTemplate->template->name][$sField] = array();\n            }\n        } else {\n            $this->Ofiles[$oTemplate->template->name] = array();\n            $this->Ofiles[$oTemplate->template->name][$sField] = array();\n        }\n\n        $files = $oTemplate->$sField;\n        $oFiles = [];\n        if (!empty($files)) {\n            $oFiles = json_decode((string) $files, true);\n            if ($oFiles === null) {\n                App()->setFlashMessage(\n                    sprintf(\n                        gT('Error: Malformed JSON - field %s must be either a JSON array or the string \"inherit\". Found \"null\".'),\n                        $sField\n                    ),\n                    'error'\n                );\n                return false;\n            }\n        }\n\n        $this->Ofiles[$oTemplate->template->name][$sField] = $oFiles;\n        return $oFiles;\n    }\n\n    /**\n     * Proxy for Yii::app()->clientScript->removeFileFromPackage()\n     *\n     * @param string $sPackageName name of the package to edit\n     * @param string $sType        the type of settings to change (css or js)\n     * @param $aSettings           array of local setting\n     * @return void\n     */\n    protected function removeFileFromPackage($sPackageName, $sType, $aSettings)\n    {\n        foreach ($aSettings as $sFile) {\n            App()->clientScript->removeFileFromPackage($sPackageName, $sType, $sFile);\n        }\n    }\n\n    /**\n     * Configure the mother template (and its mother templates)\n     * This is an object recursive call to TemplateConfiguration::prepareTemplateRendering()\n     */\n    protected function setMotherTemplates()\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName   = $this->template->extends;\n            $instance = TemplateConfiguration::getInstanceFromTemplateName($sMotherTemplateName);\n            $instance->template->checkTemplate();\n            $this->oMotherTemplate = $instance->prepareTemplateRendering($sMotherTemplateName, '');\n        }\n    }\n\n    /**\n     * Get the closest template in the hierarchy that has the definition for $attribute\n     *\n     * @param TemplateConfiguration $oRTemplate\n     * @param string $attribute\n     * @return TemplateConfiguration\n     */\n    protected function getTemplateConfigurationForAttribute($oRTemplate, $attribute)\n    {\n        while (empty($oRTemplate->getRelatedTemplate()->$attribute)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                $this->uninstallIncorectTheme($this->template_name);\n                break;\n            }\n            $oRTemplate = $oMotherTemplate;\n        }\n        return $oRTemplate;\n    }\n\n    /**\n     * Uninstall a theme and, display error message, and redirect to theme list\n     * @param string $sTemplateName\n     */\n    protected function uninstallIncorectTheme($sTemplateName)\n    {\n        TemplateConfiguration::uninstall($sTemplateName);\n        App()->setFlashMessage(\n            sprintf(\n                gT(\"Theme '%s' has been uninstalled because it's not compatible with this LimeSurvey version.\"),\n                $sTemplateName\n            ),\n            'error'\n        );\n        App()->getController()->redirect(array(\"themeOptions/index\", \"#\" => \"surveythemes\"));\n        App()->end();\n    }\n\n    /**\n     * Set the default configuration values for the template, and use the motherTemplate value if needed\n     *\n     * @return void\n     */\n    protected function setThisTemplate()\n    {\n        // Mandatory setting in config XML\n        $this->apiVersion = (!empty($this->template->api_version)) ? $this->template->api_version : null;\n        $this->viewPath = $this->path . $this->getTemplateConfigurationForAttribute($this, 'view_folder')->template->view_folder . DIRECTORY_SEPARATOR;\n        $this->filesPath = $this->path . $this->getTemplateConfigurationForAttribute($this, 'files_folder')->template->files_folder . DIRECTORY_SEPARATOR;\n        $this->generalFilesPath = App()->getConfig(\"userthemerootdir\") . DIRECTORY_SEPARATOR . 'generalfiles' . DIRECTORY_SEPARATOR;\n        // Options are optional\n        $this->setOptions();\n\n        // Not mandatory (use package dependances)\n        $this->setCssFramework();\n        $this->packages = $this->getDependsPackages($this);\n        if (!empty($this->packages_to_load)) {\n            $templateToLoadPackages = json_decode($this->packages_to_load);\n            if (!empty($templateToLoadPackages->add)) {\n                $this->packages = array_merge($templateToLoadPackages->add, $this->packages);\n            }\n            if (!empty($templateToLoadPackages->remove)) {\n                $this->packages = array_diff($this->packages, $templateToLoadPackages->remove);\n            }\n        }\n\n        // Add depend package according to packages\n        $this->depends = array_merge($this->depends, $this->packages);\n    }\n\n    /**\n     * @todo document me\n     * @return void\n     */\n    private function setCssFramework()\n    {\n        if (!empty($this->cssframework_name)) {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = $this->cssframework_name;\n            $this->cssFramework->css  = json_decode($this->cssframework_css);\n            $this->cssFramework->js   = json_decode($this->cssframework_js);\n        } else {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = '';\n            $this->cssFramework->css  = '';\n            $this->cssFramework->js   = '';\n        }\n    }\n\n    /**\n     * Decodes json string from the database field \"options\" and stores it inside $this->oOptions\n     * Also triggers inheritence checks\n     * @return void\n     */\n    protected function setOptions()\n    {\n        $this->oOptions = new stdClass();\n        if (!empty($this->options)) {\n            $this->oOptions = json_decode($this->options);\n        }\n        // unset \"comment\" property which is auto generated from HTML comments in xml file\n        unset($this->oOptions->comment);\n\n        $this->setOptionInheritance();\n    }\n\n    /**\n     * Loop through all theme options defined, trigger check for inheritance and write the new value back to the options object\n     * @return void\n     */\n    protected function setOptionInheritance()\n    {\n        $oOptions = $this->oOptions;\n\n        if (!empty($oOptions)) {\n            foreach ($oOptions as $sKey => $sOption) {\n                $this->oOptions->$sKey = $this->getOptionKey($sKey);\n            }\n        }\n    }\n\n    /**\n     * Search through the inheritence chain and find the inherited value for theme option\n     * @param string $key\n     * @return mixed\n     */\n    protected function getOptionKey($key)\n    {\n        $aOptions = (array) json_decode($this->options);\n        if (isset($aOptions[$key])) {\n            $value = $aOptions[$key];\n            if ($value === 'inherit') {\n                $oParentConfig = $this->getParentConfiguration();\n                if ($oParentConfig->id != $this->id) {\n                    return $this->getParentConfiguration()->getOptionKey($key);\n                } else {\n                    $this->uninstallIncorectTheme($this->template_name);\n                }\n            }\n            return  $value;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * loads the main theme template from the parent theme that it is extending, as a package. Ready to be registered\n     *\n     * @param string[] $packages\n     * @return string[]\n     */\n    protected function addMotherTemplatePackage($packages)\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName = (string) $this->template->extends;\n            $packages[]          = 'survey-template-' . $sMotherTemplateName;\n        }\n        return $packages;\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @param boolean $bInlcudeRemove   also get the files to remove\n     * @return array\n     */\n    protected function getFrameworkAssetsToReplace($sType, $bInlcudeRemove = false)\n    {\n        if (empty($this->aFrameworkAssetsToReplace)) {\n            $this->aFrameworkAssetsToReplace = array();\n        }\n\n        $this->aFrameworkAssetsToReplace[$sType] = array();\n\n        $sFieldName  = 'cssframework_' . $sType;\n        $aFieldValue = (array) json_decode((string) $this->$sFieldName);\n\n        if (!empty($aFieldValue) && !empty($aFieldValue['replace'])) {\n            $this->aFrameworkAssetsToReplace[$sType] = (array) $aFieldValue['replace'];\n\n            // Inner field inheritance\n            foreach ($this->aFrameworkAssetsToReplace[$sType] as $key => $aFiles) {\n                foreach ($aFiles as $sReplacement) {\n                    if ($sReplacement == \"inherit\") {\n                        $aParentReplacement = $this->getParentConfiguration()->getFrameworkAssetsToReplace($sType);\n                        $this->aFrameworkAssetsToReplace[$sType][$key][1] = $aParentReplacement[$key][1];\n                    }\n                }\n            }\n\n            if ($bInlcudeRemove && isset($aFieldValue['remove'])) {\n                $this->aFrameworkAssetsToReplace[$sType] = array_merge(\n                    $this->aFrameworkAssetsToReplace,\n                    (array) $aFieldValue['remove']\n                );\n            }\n        }\n\n        return $this->aFrameworkAssetsToReplace[$sType];\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @return array\n     */\n    protected function getFrameworkAssetsReplacement($sType)\n    {\n        if (empty($this->aReplacements)) {\n            $this->aReplacements = array();\n        }\n        $this->aReplacements[$sType] = array();\n\n        $aFrameworkAssetsToReplace = $this->getFrameworkAssetsToReplace($sType);\n\n        foreach ($aFrameworkAssetsToReplace as $key => $aAsset) {\n            $aReplace = $aAsset[1];\n            $this->aReplacements[$sType][] = $aReplace;\n        }\n\n\n        return $this->aReplacements[$sType];\n    }\n\n    /**\n     * @todo document me\n     * @return TemplateConfiguration\n     */\n    public function getParentConfiguration()\n    {\n        if (empty($this->oParentTemplate)) {\n            //check for surveygroup id if a survey is given\n            if ($this->sid != null) {\n                $oSurvey = Survey::model()->findByPk($this->sid);\n                // set template name from real inherited value\n                $sTemplateName = !empty($oSurvey->oOptions->template) ?\n                    $oSurvey->oOptions->template :\n                    $this->template->name;\n                $oParentTemplate = Template::getTemplateConfiguration($sTemplateName, null, $oSurvey->gsid);\n                if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                    $this->oParentTemplate = $oParentTemplate;\n                    $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                    return $this->oParentTemplate;\n                }\n            }\n\n            //check for surveygroup id if a surveygroup is given\n            if ($this->sid == null && $this->gsid != null) {\n                $oSurveyGroup = SurveysGroups::model()->findByPk($this->gsid);\n                //Switch if the surveygroup inherits from a parent surveygroup\n                if ($oSurveyGroup != null && $oSurveyGroup->parent_id != 0) {\n                    $oParentTemplate = Template::getTemplateConfiguration(\n                        $this->template->name,\n                        null,\n                        $oSurveyGroup->parent_id\n                    );\n                    if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                        $this->oParentTemplate = $oParentTemplate;\n                        $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                        return $this->oParentTemplate;\n                    }\n                }\n            }\n\n            //in the endcheck for general global template\n            $this->oParentTemplate = Template::getTemplateConfiguration($this->template_name, null, null);\n            $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n            return $this->oParentTemplate;\n        }\n        return $this->oParentTemplate;\n    }\n\n\n    /**\n     * Change the template name inside the configuration entries (called from template editor)\n     * NOTE: all tests (like template exist, etc) are done from template controller.\n     *\n     * @param string $sOldName The old name of the template\n     * @param string $sNewName The newname of the template\n     */\n    public static function rename($sOldName, $sNewName)\n    {\n        self::model()->updateAll(\n            array('template_name' => $sNewName),\n            \"template_name = :oldname\",\n            array(':oldname' => $sOldName)\n        );\n    }\n\n    /**\n     * Proxy for the AR method to manage the inheritance\n     * If one of the field that can be inherited is set to \"inherit\", then it will return the value of its parent\n     * NOTE: this is recursive, if the parent field itself is set to inherit, then it will\n     * the value of the parent of the parent, etc\n     *\n     * @param string $name the name of the attribute\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        $aAttributesThatCanBeInherited = array(\n            'files_css',\n            'files_js',\n            'options',\n            'cssframework_name',\n            'cssframework_css',\n            'cssframework_js',\n            'packages_to_load'\n        );\n\n        if (in_array($name, $aAttributesThatCanBeInherited) && $this->bUseMagicInherit) {\n            // Full inheritance of the whole field\n            $sAttribute = parent::__get($name);\n            if ($sAttribute === 'inherit') {\n                // NOTE: this is object recursive (if parent configuration field is set to inherit,\n                // then it will lead to this method again.)\n                $sAttribute = $this->getParentConfiguration()->$name;\n            }\n        } else {\n            $sAttribute = parent::__get($name);\n        }\n\n        return $sAttribute;\n    }\n\n    /**\n     * @todo document me\n     * @return string\n     */\n    public function getTemplateAndMotherNames()\n    {\n        $oRTemplate = $this;\n        $sTemplateNames = $this->sTemplateName;\n\n        while (!empty($oRTemplate->oMotherTemplate)) {\n            $sTemplateNames .= ' ' . $oRTemplate->template->extends;\n            $oRTemplate      = $oRTemplate->oMotherTemplate;\n            if (!($oRTemplate instanceof TemplateConfiguration)) {\n                // Throw alert: should not happen\n                break;\n            }\n        }\n\n        return $sTemplateNames;\n    }\n\n    /**\n     * Get the global template configuration with same name as $this.\n     * The global config has no sid, no gsid and no uid.\n     * @return TemplateConfiguration\n     */\n    public function getGlobalParent()\n    {\n        return self::model()->find(\n            'sid IS NULL AND uid IS NULL and gsid IS NULL AND template_name = :template_name',\n            [':template_name' => $this->template_name]\n        );\n    }\n\n    /**\n     * Get showpopups value from config or template configuration\n     */\n    public function getshowpopups()\n    {\n        $config = (int) App()->getConfig('showpopups');\n        if ($config == 2) {\n            if (isset($this->oOptions->showpopups)) {\n                $this->showpopups = (int)$this->oOptions->showpopups;\n            } else {\n                $this->showpopups = 1;\n            }\n        } else {\n            $this->showpopups = $config;\n        }\n    }\n\n    /**\n     * Set each option key value to 'inherit' instead of having only one 'inherit' value for options.\n     * Keys are fetched from parent xml configuration.\n     */\n    public function setOptionKeysToInherit()\n    {\n        $oTemplate = $this->getParentConfiguration();\n        $oTemplate->bUseMagicInherit = true;\n        $oTemplate->setOptions();\n\n        $aOptions = array();\n        if ((string) $this->options === 'inherit') {\n            foreach ($oTemplate->oOptions as $key => $value) {\n                $aOptions[$key] = 'inherit';\n            }\n            $this->options = json_encode($aOptions);\n        }\n    }\n\n    /**\n     * Sanitizes the theme options making sure that paths are valid.\n     * Options that match a file will be marked as invalid if the file\n     * is not valid, or replaced with the virtual path if the file is valid.\n     */\n    public function sanitizeImagePathsOnJson($attribute, $params)\n    {\n        $excludedOptions = [\n            'cssframework'\n        ];\n        // Validates all options of the theme. Not only classic ones which are expected to hold a path,\n        // as other options may hold a path as well (eg. custom theme options)\n        $decodedOptions = json_decode((string) $this->$attribute, true);\n        if (is_array($decodedOptions)) {\n            Yii::import('application.helpers.SurveyThemeHelper');\n            foreach ($decodedOptions as $option => &$value) {\n                if (in_array($option, $excludedOptions)) {\n                    continue;\n                }\n                $value = SurveyThemeHelper::sanitizePathInOption($value, $this->template_name, $this->sid);\n            }\n            $this->$attribute = json_encode($decodedOptions);\n        }\n    }\n\n    /**\n     * Returns the related Template.\n     * The template can only be accessed as a relation when this model is stored in the DB. Before\n     * saving, $this->template is null. In that case, this method will load the approriate Template.\n     * @return Template|null\n     */\n    private function getRelatedTemplate()\n    {\n        $template = !empty($this->template) ? $this->template : Template::model()->findByAttributes(['name' => $this->template_name]);\n        return $template;\n    }\n\n    /**\n     * Returns the value of the specified attribute ($attributeName) from\n     * the closest Template in the hierarchy.\n     *\n     * @param string $attributeName\n     * @return mixed\n     */\n    private function getAttributeValue($attributeName)\n    {\n        return $this->getTemplateConfigurationForAttribute($this, $attributeName)->template->$attributeName;\n    }\n\n    /**\n     * @todo document me\n     * @return array|mixed|string|null\n     */\n    public function getPreview()\n    {\n        if (empty($this->sPreviewImgTag)) {\n            if (is_a($this->template, 'Template')) {\n                $sTemplateFileFolder = Template::getTemplatesFileFolder($this->template->name);\n                $previewPath         = Template::getTemplatePath($this->template->name) . '/' . $sTemplateFileFolder;\n\n                if ($previewPath && file_exists($previewPath . '/preview.png')) {\n                    $previewUrl = Template::getTemplateURL($this->template->name) . $sTemplateFileFolder;\n                    $this->sPreviewImgTag = '<img src=\"' .\n                        $previewUrl .\n                        '/preview.png\" alt=\"template preview\" height=\"200\" class=\"img-thumbnail p-0 rounded-0\" />';\n                }\n            } else {\n                $this->sPreviewImgTag = '<em>' . gT('No preview available') . '</em>';\n            }\n        }\n\n        return $this->sPreviewImgTag;\n    }\n\n    /**\n     * Prepare all the needed datas to render the temple\n     * If any problem (like template doesn't exist), it will load the default theme configuration\n     * NOTE 1: This function will create/update all the packages needed to render the template, which imply to do the\n     *         same for all mother templates\n     * NOTE 2: So if you just want to access the TemplateConfiguration AR Object, you don't need to call it. Call it\n     *         only before rendering anything related to the template.\n     *\n     * @param  string $sTemplateName the name of the template to load.\n     *                               The string comes from the template selector in survey settings\n     * @param  string $iSurveyId the id of the survey. If\n     * @param bool $bUseMagicInherit\n     * @return self\n     */\n    public function prepareTemplateRendering($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = true)\n    {\n        if (!empty($sTemplateName) && !empty($iSurveyId)) {\n            if (!empty(self::$aPreparedToRender[$sTemplateName])) {\n                if (!empty(self::$aPreparedToRender[$sTemplateName][$iSurveyId])) {\n                    if (!empty(self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit])) {\n                        return self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit];\n                    } else {\n                        /** @psalm-supress InvalidArrayOffset */\n                        self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n                    }\n                } else {\n                    self::$aPreparedToRender[$sTemplateName][$iSurveyId] = array();\n                    /** @psalm-suppress InvalidArrayOffset */\n                    self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n                }\n            } else {\n                self::$aPreparedToRender = array();\n                self::$aPreparedToRender[$sTemplateName][$iSurveyId] = array();\n                /** @psalm-suppress InvalidArrayOffset */\n                self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = array();\n            }\n        }\n\n        $this->setBasics($sTemplateName, $iSurveyId, $bUseMagicInherit);\n        $this->setMotherTemplates(); // Recursive mother templates configuration\n        $this->setThisTemplate(); // Set the main config values of this template\n        $this->createTemplatePackage($this); // Create an asset package ready to be loaded\n        $this->removeFiles();\n        $this->getshowpopups();\n\n        if (!empty($sTemplateName) && !empty($iSurveyId)) {\n            self::$aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] = $this;\n        }\n        return $this;\n    }\n\n    /**\n     * Create a package for the asset manager.\n     * The asset manager will push to tmp/assets/xyxyxy/ the whole template directory (with css, js, files, etc.)\n     * And it will publish the CSS and the JS defined in config.xml. So CSS can use relative path for pictures.\n     * The publication of the package itself is in LSETwigViewRenderer::renderTemplateFromString()\n     *\n     * @param TemplateConfiguration|TemplateManifest $oTemplate TemplateManifest\n     */\n    protected function createTemplatePackage($oTemplate)\n    {\n        // Each template in the inheritance tree needs a specific alias\n        $sPathName  = 'survey.template-' . $oTemplate->sTemplateName . '.path';\n        $sViewName  = 'survey.template-' . $oTemplate->sTemplateName . '.viewpath';\n\n        Yii::setPathOfAlias($sPathName, $oTemplate->path);\n        Yii::setPathOfAlias($sViewName, $oTemplate->viewPath);\n\n        // First we add the framework replacement (bootstrap.css must be loaded before template.css)\n        $aCssFiles  = $this->getFrameworkAssetsReplacement('css');\n        $aJsFiles   = $this->getFrameworkAssetsReplacement('js');\n\n        // This variable will be used to add the variation name to the body class\n        // via $aClassAndAttributes['class']['body']\n        $this->aCssFrameworkReplacement = $aCssFiles;\n\n        // Then we add the template config files\n        $aTCssFiles = $this->getFilesToLoad($oTemplate, 'css');\n        $aTJsFiles  = $this->getFilesToLoad($oTemplate, 'js');\n\n        $aCssFiles  = array_merge($aCssFiles, $aTCssFiles);\n        $aJsFiles   = array_merge($aJsFiles, $aTJsFiles);\n\n        // Remove/Replace mother template files\n        if (\n            App()->getConfig('force_xmlsettings_for_survey_rendering') ||\n            ($this->template instanceof Template &&  $this->template->extends) ||\n            !empty($this->config->metadata->extends)\n        ) {\n              $aCssFiles = $this->changeMotherConfiguration('css', $aCssFiles);\n              $aJsFiles  = $this->changeMotherConfiguration('js', $aJsFiles);\n        }\n\n        //For fruity_twentythree surveytheme we completely replace the variation theme css file:\n        $aCssFiles = $this->replaceVariationFilesWithRtl($aCssFiles);\n\n        $this->sPackageName = 'survey-template-' . $this->sTemplateName;\n        $sTemplateurl       = $oTemplate->getTemplateURL();\n\n        $aDepends = empty($oTemplate->depends) ? array() : $oTemplate->depends;\n\n        // The package \"survey-template-{sTemplateName}\" will be available from anywhere in the app now.\n        // To publish it : Yii::app()->clientScript->registerPackage( 'survey-template-{sTemplateName}' );\n        // Depending on settings, it will create the asset directory, and publish the css and js files\n        App()->clientScript->addPackage($this->sPackageName, array(\n            'devBaseUrl'  => $sTemplateurl, // Used when asset manager is off\n            'basePath'    => $sPathName, // Used when asset manager is on\n            'css'         => $aCssFiles,\n            'js'          => $aJsFiles,\n            'depends'     => $aDepends,\n        ));\n    }\n\n    /**\n     * When rtl language is chosen:\n     * if a css file in folder variations is in array cssFiles, then it will be replaced with the\n     * *-rtl version\n     * @param array $cssFiles\n     * @return array\n     */\n    private function replaceVariationFilesWithRtl(array $cssFiles)\n    {\n        if (getLanguageRTL(App()->getLanguage()) == 'rtl') {\n            foreach ($cssFiles as $index => $cssFile) {\n                if (strpos($cssFile, 'css/variations/theme_') !== false) {\n                    $cssFileSplitArray = explode('.', $cssFile);\n                    $cssFiles[$index] =  $cssFileSplitArray[0] . '-rtl.css';\n                }\n            }\n        }\n        return $cssFiles;\n    }\n}\n", "<?php\n/**\n * This view generate the 'general' tab inside global settings.\n *\n */\n\nuse LimeSurvey\\Libraries\\FormExtension\\FormExtensionWidget;\nuse LimeSurvey\\Libraries\\FormExtension\\Inputs\\GlobalSettingsRenderer;\n\n?>\n<?php\n$thisdefaulttheme                = getGlobalSetting('defaulttheme');\n$templatenames                   = array_keys(Template::getTemplateList());\n$thisadmintheme                  = getGlobalSetting('admintheme');\n$thisdefaulthtmleditormode       = getGlobalSetting('defaulthtmleditormode');\n$thismaintenancemode             = !empty(getGlobalSetting('maintenancemode')) ? getGlobalSetting('maintenancemode') : 'off';\n$thisdefaultquestionselectormode = getGlobalSetting('defaultquestionselectormode');\n$thisdefaultthemeteeditormode    = getGlobalSetting('defaultthemeteeditormode');\n$dateformatdata                  = getDateFormatData(Yii::app()->session['dateformat']);\n?>\n\n<div class=\"container\">\n<div class=\"row\">\n    <div class=\"col-6\">\n        <!-- Global sitename -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='sitename'>\n                <?php eT(\"Site name:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='50' id='sitename' name='sitename' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('sitename')); ?>\"/>\n            </div>\n        </div>\n\n        <!-- Default Template -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"defaulttheme\">\n                <?php eT(\"Default theme:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <select class=\"form-select\" name=\"defaulttheme\" id=\"defaulttheme\">\n                    <?php foreach ($templatenames as $templatename) : ?>\n                        <option value='<?php echo CHtml::encode($themeName); ?>' <?php echo ($thisdefaulttheme == $templatename) ? \"selected='selected'\" : \"\" ?> >\n                            <?php echo CHtml::encode($templatename); ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n        </div>\n\n        <!-- Autocreate group and question -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"createsample\">\n                <?php eT(\"Create example question group and question:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'createsample',\n                    'checkedOption' => App()->getConfig('createsample'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Administrative Template -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"admintheme\">\n                <?php eT(\"Administration theme:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <select class=\"form-select\" name=\"admintheme\" id=\"admintheme\">\n                    <?php foreach ($aListOfThemeObjects as $templatename => $templateconfig): ?>\n                        <option value='<?php echo CHtml::encode($templatename); ?>' <?php echo ($thisadmintheme == $templatename) ? \"selected='selected'\" : \"\" ?> >\n                            <?php echo CHtml::encode($templateconfig->metadata->name); ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n            <?php if (Permission::model()->hasGlobalPermission('superadmin', 'read')): ?>\n                <div class=\"col-12 form-label \">\n                    <span class=\"hint\">\n                    <?php eT(\"You can add your custom themes in upload/admintheme\"); ?>\n                    </span>\n                </div>\n            <?php endif; ?>\n        </div>\n\n        <!-- Time difference -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='timeadjust'>\n                <?php eT(\"Time difference (in hours):\"); ?>\n            </label>\n            <div class=\"col-md-4\">\n                    <span>\n                        <input class=\"form-control\" type='text' id='timeadjust' name='timeadjust'\n                               value=\"<?php echo htmlspecialchars((string) (str_replace(array('+', ' hours', ' minutes'), array('', '', ''), (string) getGlobalSetting('timeadjust')) / 60)); ?>\"/>\n                    </span>\n            </div>\n            <div class=\"col-md-8\">\n                <?php echo gT(\"Server time:\") . ' ' . convertDateTimeFormat(date('Y-m-d H:i:s'), 'Y-m-d H:i:s', $dateformatdata['phpdate'] . ' H:i')\n                    . \"<br>\"\n                    . gT(\"Corrected time:\") . ' '\n                    . convertDateTimeFormat(dateShift(date(\"Y-m-d H:i:s\"), 'Y-m-d H:i:s', getGlobalSetting('timeadjust')), 'Y-m-d H:i:s', $dateformatdata['phpdate'] . ' H:i'); ?>\n            </div>\n        </div>\n\n        <?php if (isset(Yii::app()->session->connectionID)): ?>\n            <div class=\"mb-3\">\n                <label class=\"col-12 form-label\" for='iSessionExpirationTime'>\n                    <?php eT(\"Session lifetime for surveys (seconds):\"); ?>\n                </label>\n                <div class=\"col-12\">\n                    <input class=\"form-control\" type='text' size='10' id='iSessionExpirationTime' name='iSessionExpirationTime'\n                           value=\"<?php echo htmlspecialchars((string) getGlobalSetting('iSessionExpirationTime')); ?>\"/>\n                </div>\n            </div>\n        <?php endif; ?>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='ipInfoDbAPIKey'>\n                <?php eT(\"IP Info DB API Key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='ipInfoDbAPIKey' name='ipInfoDbAPIKey' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('ipInfoDbAPIKey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googleMapsAPIKey'>\n                <?php eT(\"Google Maps API key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googleMapsAPIKey' name='googleMapsAPIKey' value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googleMapsAPIKey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googleanalyticsapikey'>\n                <?php eT(\"Google Analytics Tracking ID:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googleanalyticsapikey' name='googleanalyticsapikey'\n                       value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googleanalyticsapikey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='googletranslateapikey'>\n                <?php eT(\"Google Translate API key:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <input class=\"form-control\" type='text' size='35' id='googletranslateapikey' name='googletranslateapikey'\n                       value=\"<?php echo htmlspecialchars((string) getGlobalSetting('googletranslateapikey')); ?>\"/>\n            </div>\n        </div>\n\n        <div class=\"mb-3\">\n            <label class='col-12 form-label' for='characterset'>\n                <?php eT(\"Character set for file import/export:\") ?>\n            </label>\n            <div class='col-12'>\n                <select class='form-select' name='characterset' id='characterset'>\n                    <?php foreach ($aEncodings as $code => $charset): ?>\n                        <option value='<?php echo $code; ?>'\n                            <?php if (array_key_exists($thischaracterset, $aEncodings) && $code == $thischaracterset): ?>\n                                selected='selected'\n                            <?php elseif (!array_key_exists($thischaracterset, $aEncodings) && $code == \"auto\"): ?>\n                                selected='selected'\n                            <?php endif; ?>\n                        >\n                            <?php echo $charset; ?>\n                        </option>\n                    <?php endforeach; ?>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"col-6\">\n\n        <!-- Maintenance mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for=\"maintenancemode\" title=\"<?php echo gT('Maintenance modes:\nOff\nSoft lock - participants are able to finish started surveys, no new participants are allowed\nFull lock - none of participants are allowed to take survey, even if they already started to take it'\n            ); ?> \">\n                <?php eT(\"Maintenance mode:\"); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'maintenancemode',\n                    'checkedOption' => $thismaintenancemode,\n                    'selectOptions' => [\n                        \"off\"  => gT(\"Off\", 'unescaped'),\n                        \"soft\" => gT(\"Soft lock\", 'unescaped'),\n                        \"hard\" => gT(\"Full lock\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Refresh assets -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='refreshassets'>\n                <?php eT(\"Clear assets cache:\"); ?> <small>(<?php echo getGlobalSetting('customassetversionnumber'); ?>)</small>\n            </label>\n            <div class=\"col-12\">\n                <a href=\"<?php echo App()->createUrl('admin/globalsettings', array(\"sa\" => \"refreshAssets\")); ?>\"\n                   class=\"btn btn-outline-dark btn-large\">\n                   \t<?php eT(\"Clear now\"); ?>\n                </a>\n            </div>\n        </div>\n\n        <!-- Default Editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaulthtmleditormode'>\n                <?php eT(\"Default HTML editor mode:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget',\n                    [\n                        'name'          => 'defaulthtmleditormode',\n                        'checkedOption' => $thisdefaulthtmleditormode,\n                        'selectOptions' => [\n                            \"inline\" => gT(\"Inline\", 'unescaped'),\n                            \"popup\"  => gT(\"Popup\", 'unescaped'),\n                            \"none\"   => gT(\"HTML source\", 'unescaped')\n                        ]\n                    ]); ?>\n            </div>\n        </div>\n\n        <!-- Side menu behaviour -->\n        <?php /* This setting is just remaining here for campatibility reasons. It is not yet implemented into the new admmin panel */ ?>\n        <div class=\"mb-3\" style=\"display: none;\">\n            <label class='col-12 form-label' for='sideMenuBehaviour'>\n                <?php eT(\"Side-menu behaviour:\"); ?>\n            </label>\n            <div class='col-md-4'>\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'sideMenuBehaviour',\n                    'checkedOption' => $sideMenuBehaviour,\n                    'selectOptions' => [\n                        \"adaptive\"     => gT(\"Adaptive\", 'unescaped'),\n                        \"alwaysOpen\"   => gT(\"Always open\", 'unescaped'),\n                        \"alwaysClosed\" => gT(\"Always closed\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default question type selector mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaultquestionselectormode'>\n                <?php eT(\"Question type selector:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'defaultquestionselectormode',\n                    'checkedOption' => $thisdefaultquestionselectormode,\n                    'selectOptions' => [\n                        \"default\" => gT(\"Full\", 'unescaped'),\n                        \"none\"    => gT(\"Simple\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='defaultthemeteeditormode'>\n                <?php eT(\"Template editor:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'defaultthemeteeditormode',\n                    'checkedOption' => $thisdefaultthemeteeditormode,\n                    'selectOptions' => [\n                        \"default\" => gT(\"Full\", 'unescaped'),\n                        \"none\"    => gT(\"Simple\", 'unescaped')\n                    ]\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='javascriptdebugbcknd'>\n                <?php eT(\"JS-Debug mode [Backend]:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'javascriptdebugbcknd',\n                    'checkedOption' => App()->getConfig('javascriptdebugbcknd'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Default theme editor mode -->\n        <div class=\"mb-3\">\n            <label class=\"col-12 form-label\" for='javascriptdebugfrntnd'>\n                <?php eT(\"JS-Debug mode [Frontend]:\");\n                echo((Yii::app()->getConfig(\"demoMode\") == true) ? '*' : ''); ?>\n            </label>\n            <div class=\"col-12\">\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name' => 'javascriptdebugfrntnd',\n                    'checkedOption' => App()->getConfig('javascriptdebugfrntnd'),\n                    'selectOptions' => [\n                        '1' => gT('On'),\n                        '0' => gT('Off'),\n                    ],\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Allow unstable extension updates (only visible for super admin)-->\n        <?php if (Permission::model()->hasGlobalPermission('superadmin', 'read')): ?>\n            <div class=\"mb-3\">\n                <label class=\"col-12 form-label\" for='allow_unstable_extension_update'>\n                    <?php eT('Allow unstable extension updates:'); ?>\n                </label>\n                <div class=\"col-12\">\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name' => 'allow_unstable_extension_update',\n                        'checkedOption' => App()->getConfig('allow_unstable_extension_update'),\n                        'selectOptions' => [\n                            '1' => gT('On'),\n                            '0' => gT('Off'),\n                        ],\n                    ]); ?>\n                </div>\n                <div class=\"col-12 form-label \">\n                        <span class=\"hint\">\n                            <?php eT(\"Enabling unstable updates will allow you to try alpha and beta versions of extensions. Talk to the extension author for more information.\"); ?>\n                        </span>\n                </div>\n            </div>\n        <?php endif; ?>\n    </div>\n\n    <div class=\"ls-flex-column ls-space padding left-5 right-5 col-md-7\">\n        <?= FormExtensionWidget::render(\n            App()->formExtensionService->getAll('globalsettings.general'),\n            new GlobalSettingsRenderer()\n        ); ?>\n    </div>\n\n</div>\n</div>\n\n<?php if (Yii::app()->getConfig(\"demoMode\") == true): ?>\n    <p>\n        <?php eT(\"Note: Demo mode is activated. Marked (*) settings can't be changed.\"); ?>\n    </p>\n<?php endif; ?>\n", "<?php\n\n/**\n * General options\n * @var AdminController $this\n * @var Survey $oSurvey\n */\n$scriptVarsNeccessary = \"\n        var jsonUrl = '';\n        var sAction = '';\n        var sParameter = '';\n        var sTargetQuestion = '';\n        var sNoParametersDefined = '';\n        var sAdminEmailAddressNeeded = '\" . gT(\"If you are using surveys with a closed participant group or notifications emails you need to set an administrator email address.\", 'js') . \"'\n        var sURLParameters = '';\n        var sAddParam = '';\n    \";\nYii::app()->getClientScript()->registerScript(\n    \"GeneralOption-variables\",\n    $scriptVarsNeccessary,\n    LSYii_ClientScript::POS_BEGIN\n);\n?>\n<!-- General options -->\n<?php\n$yii = Yii::app();\n$controller = $yii->getController();\n$action = 'editsurveysettings';\n\n$formatSelectOptions = array(\n    'S' => gT('Question by Question', 'unescaped'),\n    'G' => gT('Group by Group', 'unescaped'),\n    'A' => gT('All in one', 'unescaped')\n);\nif ($bShowInherited) {\n    $formatSelectOptions['I'] = $oSurveyOptions->format . \" \u1d35\";\n}\n?>\n<?php if ($action == 'editsurveysettings'): ?>\n<?php\n$sConfirmLanguageScript = \"\n        $(document).on('submit','#globalsetting',function(){\n        if(!ConfirmLanguageChange('\" . gT(\"All questions, answers, etc for removed languages will be lost. Are you sure?\", \"js\") . \"')){\n            return false;\n        }\n        });\n\n        function ConfirmLanguageChange(confirmtxt) {\n\n            if ($('#oldlanguages').val().trim()=='') {\n                mylangs= [];\n            } else {\n                mylangs=$('#oldlanguages').val().split(' ');\n            }\n\n            if (checkSelect2Languages(mylangs)) {\n                return true;\n            } else {\n                return confirm(confirmtxt);\n            }\n        }\n\n        function checkSelect2Languages(mylangs) {\n            newLanguages=$('#additional_languages').val();\n            for (x = 0; x < mylangs.length; x++) {\n                if ($.inArray(mylangs[x],newLanguages)==-1) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    \";\nYii::app()->getClientScript()->registerScript(\"GeneralOption-confirm-language\", $sConfirmLanguageScript, LSYii_ClientScript::POS_POSTSCRIPT);\n// var_dump($owner);\n?>\n\n<!-- Container -->\n<div class=\"row\">\n    <div class=\"col-lg-6 col-12\">\n        <?php if ($bShowAllOptions === true) { ?>\n            <?php if (!$oSurvey->isNewRecord): ?>\n                <!-- Survey Languages -->\n                <div class=\"mb-3\">\n                    <label class=\" form-label\" for='additional_languages'><?php eT(\"Survey languages:\"); ?></label>\n                    <div class=\"\">\n                        <?php\n                        $aAllLanguages = getLanguageDataRestricted(false, 'short');\n\n                        Yii::app()->getController()->widget('ext.admin.survey.LanguagesWidget.LanguagesWidget',\n                            array(\n                                'asDropDownList' => true,\n                                'htmlOptions' => array('multiple' => 'multiple', 'style' => \"width: 100%\", 'class' => 'form-select'),\n                                'data' => $aAllLanguages,\n                                'value' => $oSurvey->allLanguages,\n                                'name' => 'additional_languages',\n                                'pluginOptions' => array(\n                                    'placeholder' => gT('Select additional languages', 'unescaped'),\n                                    'baselanguage' => $oSurvey->language,\n                                    'baselanguage_selector' => '#language',\n                                )\n                            )\n                        );\n                        ?>\n                        <input type='hidden' name='oldlanguages' id='oldlanguages' value='<?php echo implode(' ', $oSurvey->additionalLanguages); ?>'>\n                    </div>\n                </div>\n                <!-- Base language -->\n                <div class=\"mb-3\">\n                    <label class=\" form-label\"><?php eT(\"Base language:\"); ?></label>\n                    <div class=\"\">\n                        <?php $this->widget('yiiwheels.widgets.select2.WhSelect2',\n                            array(\n                                'asDropDownList' => true,\n                                'htmlOptions' => array('style' => \"width: 100%\"),\n                                'data' => array_intersect_key($aAllLanguages, array_flip($oSurvey->allLanguages)),\n                                'value' => $oSurvey->language,\n                                'name' => 'language',\n                                'pluginOptions' => array()\n                            )\n                        ); ?>\n                    </div>\n                </div>\n            <?php endif; ?>\n        <?php } ?>\n        <!-- Survey owner -->\n        <?php\n        if (isset($oSurvey->owner_id) && Yii::app()->session['loginID'] == $oSurvey->owner_id || Permission::model()->hasGlobalPermission('superadmin', 'read')):?>\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='owner_id'><?php eT(\"Survey owner:\"); ?></label>\n                <div class=\"\"><?php\n                    Yii::app()->getController()->widget('yiiwheels.widgets.select2.WhSelect2',\n                        array(\n                            'asDropDownList' => true,\n                            'htmlOptions' => array(\n                                'style' => 'width:100%;'\n                            ),\n                            'data' => isset($users) ? $users : [],\n                            'value' => $oSurvey->owner_id,\n                            'name' => 'owner_id',\n                            'pluginOptions' => array()\n                        )\n                    );\n                    ?>\n                </div>\n            </div>\n        <?php endif; ?>\n\n        <!-- Administrator -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $admin = $oSurvey->admin; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='admin'><?php eT(\"Administrator:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $admin === 'inherit' ? 'd-none' : 'd-block'); ?>\" type='text' size='50' id='admin' name='admin'\n                           value=\"<?php echo htmlspecialchars((string) $admin); ?>\" data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $admin); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $admin === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->admin); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='admin'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'adminbutton',\n                        'checkedOption' => ($bShowInherited && $admin === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit'\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n        <!-- Admin email -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $adminemail = $oSurvey->adminemail; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='adminemail'><?php eT(\"Administrator email address:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $adminemail === 'inherit' ? 'd-none' : 'd-block'); ?>\" type='<?php echo ($bShowInherited) ? 'text' : 'email'; ?>'\n                           size='50' id='adminemail' name='adminemail' value=\"<?php echo htmlspecialchars((string) $adminemail); ?>\" data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $adminemail); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $adminemail === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->adminemail); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='adminemail'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'adminemailbutton',\n                        'checkedOption' => ($bShowInherited && $adminemail === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit'\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n        <!-- Bounce email -->\n        <div class=\"mb-3\">\n            <?php //Switch for creation/editing ?>\n            <?php $bounce_email = $oSurvey->bounce_email; ?>\n            <div class=\"row\">\n                <div class=\"col-12 col-lg-8 content-right\">\n                    <label class=\" form-label\" for='bounce_email'><?php eT(\"Bounce email address:\"); ?></label>\n                    <input class=\"form-control inherit-edit <?php echo($bShowInherited && $bounce_email === 'inherit' ? 'd-none' : 'd-block'); ?>\"\n                           type='<?php echo ($bShowInherited) ? 'text' : 'email'; ?>' size='50' id='bounce_email' name='bounce_email' value=\"<?php echo htmlspecialchars((string) $bounce_email); ?>\"\n                           data-inherit-value=\"inherit\" data-saved-value=\"<?php echo htmlspecialchars((string) $bounce_email); ?>\"/>\n                    <input class=\"form-control inherit-readonly <?php echo($bShowInherited && $bounce_email === 'inherit' ? 'd-block' : 'd-none'); ?>\" type='text' size='50'\n                           value=\"<?php echo htmlspecialchars((string) $oSurveyOptions->bounce_email); ?>\" readonly/>\n                </div>\n                <div class=\"col-12 col-lg-4 content-right <?php echo($bShowInherited ? 'd-block' : 'd-none'); ?>\">\n                    <label class=\" form-label content-center col-12\" for='bounce_email'><?php eT(\"Inherit:\"); ?></label>\n                    <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                        'name'          => 'bounce_emailbutton',\n                        'checkedOption' => ($bShowInherited && $bounce_email === 'inherit' ? 'Y' : 'N'),\n                        'selectOptions' => $optionsOnOff,\n                        'htmlOptions'   => [\n                            'class' => 'text-option-inherit '\n                        ]\n                    ]); ?>\n                </div>\n            </div>\n        </div>\n\n            <?php else: ?>\n            <!-- End URL -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='url'><?php eT(\"End URL:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' class=\"form-control\" id='url' name='url' placeholder=\"http://example.com\"/>\n                </div>\n            </div>\n\n            <!-- URL description -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='urldescrip'><?php eT(\"URL description:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' maxlength='255' size='50' id='urldescrip' name='urldescrip' value='' class=\"form-control\" placeholder=\"<?php eT('Some description text'); ?>\"/>\n                </div>\n            </div>\n\n            <!-- Date format -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='dateformat'><?php eT(\"Date format:\"); ?></label>\n                <div class=\"\">\n                    <?php echo CHtml::listBox('dateformat', $sDateFormatDefault, $aDateFormatData, array('id' => 'dateformat', 'size' => '1', 'class' => 'form-control')); ?>\n                </div>\n            </div>\n\n            <!-- Decimal mark -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='numberformat'><?php eT(\"Decimal mark:\"); ?></label>\n                <div class=\"\">\n                    <?php echo CHtml::listBox('numberformat', $sRadixDefault, $aRadixPointData, array('id' => 'numberformat', 'size' => '1', 'class' => 'form-control')); ?>\n                </div>\n            </div>\n\n            <!-- Administrator -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='admin'><?php eT(\"Administrator:\"); ?></label>\n                <div class=\"\">\n                    <input type='text' size='50' id='admin' name='admin' class=\"form-control\" value='<?php echo $owner['full_name']; ?>'/>\n                </div>\n            </div>\n\n            <!-- Admin email -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='adminemail'><?php eT(\"Administrator email address:\"); ?></label>\n                <div class=\"\">\n                    <input type='email' size='30' class=\"form-control\" id='adminemail' name='adminemail' value='<?php echo $owner['email']; ?>'/>\n                </div>\n            </div>\n\n            <!-- Bounce Email -->\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='bounce_email'><?php eT(\"Bounce email address:\"); ?></label>\n                <div class=\"\">\n                    <input type='email' size='50' class=\"form-control\" id='bounce_email' name='bounce_email' value='<?php echo $owner['bounce_email']; ?>'/>\n                </div>\n            </div>\n        <?php endif; ?>\n    </div>\n    <div class=\"col-lg-6 col-12\">\n\n        <!-- Survey Group -->\n        <?php if ($bShowAllOptions === true) { ?>\n            <div class=\"mb-3\">\n                <label class=\" form-label\" for='gsid'><?php eT(\"Group:\"); ?></label>\n                <div class=\"\">\n                    <?php $this->widget('yiiwheels.widgets.select2.WhSelect2',\n                        array(\n                            'asDropDownList' => true,\n                            'htmlOptions' => array('style' => \"width: 100%\"),\n                            'data' => isset($aSurveyGroupList) ? $aSurveyGroupList : [],\n                            'value' => $oSurvey->gsid,\n                            'name' => 'gsid',\n                            'pluginOptions' => array()\n                        )\n                    ); ?>\n                </div>\n            </div>\n        <?php } ?>\n\n        <!-- Format -->\n        <div class=\"mb-3\">\n            <label class=\" form-label\" for='format'><?php eT(\"Format:\"); ?></label>\n            <div>\n                <?php $this->widget('ext.ButtonGroupWidget.ButtonGroupWidget', [\n                    'name'          => 'format',\n                    'checkedOption'         => $oSurvey->format,\n                    'selectOptions' => $formatSelectOptions,\n                ]); ?>\n            </div>\n        </div>\n\n        <!-- Theme -->\n        <div class=\"mb-3\" >\n            <label class=\" form-label\" for='template'><?php eT(\"Theme:\"); ?></label>\n            <div class=\"\">\n                <?php $themeConf = TemplateConfiguration::getInstanceFromTemplateName(($oSurvey->template === 'inherit') ? $oSurveyOptions->template : $oSurvey->template) ?>\n                <select id='template' style=\"width:100%;\" class=\"form-select activate-search\" name='template' data-updateurl='<?php echo App()->createUrl('themeOptions/getPreviewTag') ?>'\n                        data-inherit-template-name='<?= $themeConf->template_name ?>'>\n                    <?php if ($bShowInherited) : ?>\n                        <option value=\"inherit\" <?= ($oSurvey->template == 'inherit') ? 'selected=\"selected\"' : ''; ?>>\n                            <?= gT('Inherit') . ' [' . CHtml::encode($themeConf->template_name) . ']'; ?>\n                        </option>\n                    <?php endif; ?>\n                    <?php\n                    $aTemplateList = Template::getTemplateListWithPreviews();\n                    foreach ($aTemplateList as $templateName => $preview) {\n                        if (Permission::model()->hasGlobalPermission('templates', 'read') || Permission::model()->hasTemplatePermission($templateName\n                            ) || $oSurvey->template == htmlspecialchars((string) $templateName)) { ?>\n                            <option value='<?php echo CHtml::encode($templateName); ?>'\n                                <?php if ($oSurvey->template && htmlspecialchars((string) $templateName) === $themeConf->template_name && $oSurvey->template !== 'inherit') { ?>\n                                    selected='selected'\n                                <?php } elseif (!$oSurvey->template && $templateName === App()->getConfig('defaulttheme') && $oSurvey->template !== 'inherit') { ?>\n                                    selected='selected'\n                                <?php } ?>\n                            ><?php echo CHtml::encode($templateName); ?></option>\n                        <?php } ?>\n\n                    <?php } ?>\n                </select>\n            </div>\n            <div class=\"col-md-6 mt-4 w-100\" id=\"preview-image-container\">\n                <?php echo $themeConf->getPreview() ?>\n            </div>\n        </div>\n        <?php\n        /* @todo : add a js var with standard template list name */\n\n        //$aStandardTemplateLis=Template::getStandardTemplateList();\n        ?>\n\n    </div>\n</div>\n<?php $this->renderPartial('/surveyAdministration/_inherit_sub_footer'); ?>\n"], "filenames": ["application/models/TemplateConfiguration.php", "application/views/admin/globalsettings/_general.php", "application/views/admin/survey/subview/accordion/_generaloptions_panel.php"], "buggy_code_start_loc": [121, 45, 327], "buggy_code_end_loc": [813, 80, 342], "fixing_code_start_loc": [122, 45, 327], "fixing_code_end_loc": [817, 80, 342], "type": "CWE-79", "message": "Cross Site Scripting (XSS) vulnerability in LimeSurvey before version 6.2.9-230925 allows a remote attacker to escalate privileges via a crafted script to the _generaloptions_panel.php component.", "other": {"cve": {"id": "CVE-2023-44796", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-18T00:15:07.133", "lastModified": "2024-01-10T03:15:43.313", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross Site Scripting (XSS) vulnerability in LimeSurvey before version 6.2.9-230925 allows a remote attacker to escalate privileges via a crafted script to the _generaloptions_panel.php component."}, {"lang": "es", "value": "Vulnerabilidad de Cross Site Scripting (XSS) en LimeSurvey anterior a la versi\u00f3n 6.2.9-230925 permite a un atacante remoto escalar privilegios a trav\u00e9s de un script manipulado al componente _generaloptions_panel.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.2.9", "matchCriteriaId": "05741E6D-3E8F-43BE-9EF7-4C535AAD6C3B"}]}]}], "references": [{"url": "https://github.com/Hebing123/CVE-2023-44796/issues/1", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/Hebing123/cve/issues/4", "source": "cve@mitre.org"}, {"url": "https://github.com/LimeSurvey/LimeSurvey/pull/3483", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/limesurvey/limesurvey/commit/135511073c51c332613dd7fad9a8ca0aad34a3fe", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/limesurvey/limesurvey/commit/135511073c51c332613dd7fad9a8ca0aad34a3fe"}}