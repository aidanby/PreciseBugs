{"buggy_code": ["# Changelog\n\n## 3.3.1 - 2021-09-01\n\n### Fixes\n\n* In some situations it was possible for a relationship with just one selected document to list that document several times in the returned result, resulting in very large responses.\n* Permissions roles UI localized correctly.\n* Do not crash on startup if users have a relationship to another type. This was caused by the code that checks whether any users exist to present a warning to developers. That code was running too early for relationships to work due to event timing issues.\n\n## 3.3.0 - 2021-08-30\n\n### Fixes\n\n* Addresses the page jump when using the in-context undo/redo feature. The page will immediately return users to their origin scroll position after the content refreshes.\n* Resolves slug-related bug when switching between images in the archived view of the media manager. The slug field was not taking into account the double slug prefix case.\n* Fixes migration task crash when parking new page. Thanks to [Miro Yovchev](https://www.corllete.com/) for this fix.\n* Fixes incorrect month name in `AposCellDate`, which can be optionally used in manage views of pieces. Thanks to [Miro Yovchev](https://www.corllete.com/) for this fix.\n\n### Adds\n\n* This version achieves localization (l10n) through a rich set of internationalization (i18n) features. For more information, [see the documentation](https://v3.docs.apostrophecms.org/).\n* There is support for both static string localization and dynamic content localization.\n* The home page, other parked pages, and the global document are automatically replicated to all configured locales at startup. Parked properties are refreshed if needed. Other pages and pieces are replicated if and when an editor chooses to do so.\n* An API route has been added for voluntary replication, i.e. when deciding a document should exist in a second locale, or desiring to overwrite the current draft contents in locale `B` with the draft contents of locale `A`.\n* Locales can specify `prefix` and `hostname` options, which are automatically recognized by middleware that removes the prefix dynamically where appropriate and sets `req.locale`. In 3.x this works more like the global site `prefix` option. This is a departure from 2.x which stored the prefix directly in the slug, creating maintenance issues.\n* Locales are stateless: they are never recorded in the session. This eliminates many avenues for bugs and bad SEO. However, this also means the developer must fully distinguish them from the beginning via either `prefix` or `hostname`. A helpful error message is displayed if this is not the case.\n* Switching locales preserves the user's editing session even if on separate hostnames. To enable this, if any locales have hostnames, all configured locales must have hostnames and/or baseUrl must be set for those that don't.\n* An API route has been added to discover the locales in which a document exists. This provides basic information only for performance (it does not report `title` or `_url`).\n* Editors can \"localize\" documents, copying draft content from one locale to another to create a corresponding document in a different locale. For convenience related documents, such as images and other pieces directly referenced by the document's structure, can be localized at the same time. Developers can opt out of this mechanism for a piece type entirely, check the box by default for that type, or leave it as an \"opt-in\" choice.\n* The `@apostrophecms/i18n` module now uses `i18next` to implement static localization. All phrases in the Vue-based admin UI are passed through `i18next` via `this.$t`, and `i18next` is also available via `req.t()` in routes and `__t()` in templates. Apostrophe's own admin UI phrases are in the `apostrophe` namespace for a clean separation. An array of locale codes, such as `en` or `fr` or `en-au`, can be specified using the `locales` option to the `@apostrophecms/i18n` module. The first locale is the default, unless the `defaultLocale` option is set. If no locales are set, the locale defaults to `en`. The `i18next-http-middleware` locale guesser is installed and will select an available locale if possible, otherwise it will fall back to the default.\n* In the admin UI, `v-tooltip` has been extended as `v-apos-tooltip`, which passes phrases through `i18next`.\n* Developers can link to alternate locales by iterating over `data.localizations` in any page template. Each element always has `locale`, `label` and `homePageUrl` properties. Each element also has an `available` property (if true, the current context document is available in that locale), `title` and a small number of other document properties are populated, and `_url` redirects to the context document in that locale. The current locale is marked with `current: true`.\n* To facilitate adding interpolated values to phrases that are passed as a single value through many layers of code, the `this.$t` helper provided in Vue also accepts an object argument with a `key` property. Additional properties may be used for interpolation.\n* `i18next` localization JSON files can be added to the `i18n` subdirectory of *any* module, as long as its `i18n` option is set. The `i18n` object may specify `ns` to give an `i18next` namespace, otherwise phrases are in the default namespace, used when no namespace is specified with a `:` in an `i18next` call. The default namespace is yours for use at project level. Multiple modules may contribute to the same namespace.\n* If `APOS_DEBUG_I18N=1` is set in the environment, the `i18next` debug flag is activated. For server-side translations, i.e. `req.t()` and `__t()`, debugging output will appear on the server console. For browser-side translations in the Vue admin UI, debugging output will appear in the browser console.\n* If `APOS_SHOW_I18N=1` is set in the environment, all phrases passed through `i18next` are visually marked, to make it easier to find those that didn't go through `i18next`. This does not mean translations actually exist in the JSON files. For that, review the output of `APOS_DEBUG_I18N=1`.\n* There is a locale switcher for editors.\n* There is a backend route to accept a new locale on switch.\n* A `req.clone(properties)` method is now available. This creates a clone of the `req` object, optionally passing in an object of properties to be set. The use of `req.clone` ensures the new object supports `req.get` and other methods of a true `req` object. This technique is mainly used to obtain a new request object with the same privileges but a different mode or locale, i.e. `mode: 'published'`.\n* Fallback wrappers are provided for the `req.__()`, `res.__()` and `__()` localization helpers, which were never official or documented in 3.x but may be in use in projects ported from 2.x. These wrappers do not localize but do output the input they are given along with a developer warning. You should migrate them to use `req.t()` (in server-side javascript) or `__t()` (Nunjucks templates).\n\n### Changes\n\n* Bolsters the CSS that backs Apostrophe UI's typography to help prevent unintended style leaks at project-level code.\n* Removes the 2.x series changelog entries. They can be found in the 2.0 branch in Github.\n\n## 3.2.0 - 2021-08-13\n\n### Fixes\n\n* `req.hostname` now works as expected when `trustProxy: true` is passed to the `@apostrophecms/express` module.\n* Apostrophe loads modules from npm if they exist there and are configured in the `modules` section of `app.js`. This was always intended only as a way to load direct, intentional dependencies of your project. However, since npm \"flattens\" the dependency tree, dependencies of dependencies that happen to have the same name as a project-level Apostrophe module could be loaded by default, crashing the site or causing unexpected behavior. So beginning with this release, Apostrophe scans `package.json` to verify an npm module is actually a dependency of the project itself before attempting to load it as an Apostrophe module.\n* Fixes the reference to sanitize-html defaults in the rich text widget.\n* Fixes the `toolbarToAllowedStyles` method in the rich text widget, which was not returning any configuration.\n* Fixes the broken text alignment in rich text widgets.\n* Adds a missing npm dependency on `chokidar`, which Apostrophe and Nunjucks use for template refreshes. In most environments this worked anyway due to an indirect dependency via the `sass` module, but for stability Apostrophe should depend directly on any npm module it uses.\n* Fixes the display of inline range inputs, notably broken when using Palette\n* Fixes occasional unique key errors from migrations when attempting to start up again with a site that experienced a startup failure before inserting its first document.\n* Requires that locale names begin with a letter character to ensure order when looping over the object entries.\n* Unit tests pass in MongoDB 5.x.\n\n### Adds\n* Adds Cut and Paste to area controls. You can now Cut a widget to a virtual clipboard and paste it in suitable areas. If an area\ncan include the widget on the clipboard, a special Clipboard widget will appear in area's Add UI. This works across pages as well.\n\n### Changes\n* Apostrophe's Global's UI (the @apostrophecms/global singleton has moved from the admin bar's content controls to\nthe admin utility tray under a cog icon.\n* The context bar's document Edit button, which was a cog icon, has been rolled into the doc's context menu.\n\n## 3.1.3 - 2021-07-16\n\n### Fixes\n\n* Hotfix for an incompatibility between `vue-loader` and `webpack` 5.45.0 which causes a crash at startup in development, or asset build time in production. We have temporarily pinned our dependency to `webpack` 5.44.x. We are [contributing to the discussion around the best long-term fix for vue-loader](https://github.com/vuejs/vue-loader/issues/1854).\n\n## 3.1.2 - 2021-07-14\n\n### Changes\n\n* Removes an unused method, `mapMongoIdToJqtreeId`, that was used in A2 but is no longer relevant.\n* Removes deprecated and non-functional steps from the `edit` method in the `AposDocsManager.vue` component.\n* Legacy migrations to update 3.0 alpha and 3.0 beta sites to 3.0 stable are still in place, with no functional changes, but have been relocated to separate source files for ease of maintenance. Note that this is not a migration path for 2.x databases. Tools for that are forthcoming.\n\n## 3.1.1 - 2021-07-08\n\n### Fixes\n\n* Two distinct modules may each have their own `ui/src/index.scss` file, similar to the fix already applied to allow multiple `ui/src/index.js` files.\n\n## 3.1.0 - 2021-06-30\n\n### Fixes\n\n* Corrects a bug that caused Apostrophe to rebuild the admin UI on every nodemon restart, which led to excessive wait times to test new code. Now this happens only when `package-lock.json` has been modified (i.e. you installed a new module that might contain new Apostrophe admin UI code). If you are actively developing Apostrophe admin UI code, you can opt into rebuilding all the time with the `APOS_DEV=1` environment variable. In any case, `ui/src` is always rebuilt in a dev environment.\n* Updates `cheerio`, `deep-get-set`, and `oembetter` versions to resolve vulnerability warnings.\n* Modules with a `ui/src` folder, but no other content, are no longer considered \"empty\" and do not generate a warning.\n* Pushing a secondary context document now always results in entry to draft mode, as intended.\n* Pushing a secondary context document works reliably, correcting a race condition that could cause the primary document to remain in context in some cases if the user was not already in edit mode.\n\n### Changes\n\n* Deprecates `self.renderPage` method for removal in next major version.\n* Since `ui/src/index.js` files must export a function to avoid a browser error in production which breaks the website experience, we now detect this at startup and throw a more helpful error to prevent a last-minute discovery in production.\n\n## 3.0.1 - 2021-06-17\n\n### Fixes\n\n* Fixes an error observed in the browser console when using more than one `ui/src/index.js` file in the same project. Using more than one is a good practice as it allows you to group frontend code with an appropriate module, or ship frontend code in an npm module that extends Apostrophe.\n* Migrates all of our own frontend players and utilities from `ui/public` to `ui/src`, which provides a robust functional test of the above.\n* Executes `ui/src` imports without waiting for next tick, which is appropriate as we have positioned it as an alternative to `ui/public` which is run without delay.\n\n## 3.0.0 - 2021-06-16\n\n### Breaks\n\n* Previously our `a3-boilerplate` project came with a webpack build that pushed code to the `ui/public` folder of an `asset` module. Now the webpack build is not needed because Apostrophe takes care of compiling `ui/src` for us. This is good! However, **if you are transitioning your project to this new strategy, you will need to remove the `modules/asset/ui/public` folder from your project manually** to ensure that webpack-generated code originally intended for webpack-dev-server does not fail with a `publicPath` error in the console.\n* The `CORE_DEV=1` environment setting has been changed to `APOS_DEV=1` because it is appropriate for anyone who is actively developing custom Apostrophe admin UI using `ui/apos` folders in their own modules.\n* Apostrophe now uses Dart Sass, aka the `sass` npm module. The `node-sass` npm module has been deprecated by its authors for some time now. Most existing projects will be unaffected, but those writing their own Apostrophe UI components will need to change any `/deep/` selectors to `::v-deep` and consider making other Dart Sass updates as well. For more information see the [Dart Sass documentation](https://sass-lang.com/dart-sass). Those embracing the new `ui/src` feature should also bear in mind that Dart Sass is being used.\n\n### Changes\n\n* Relationship ids are now stored as aposDocIds (without the locale and mode part). The appropriate locale and mode are known from the request. This allows easy comparison and copying of these properties across locales and fixes a bug with reverse relationships when publishing documents. A migration has been added to take care of this conversion on first startup.\n- The `attachment` field type now correctly limits file uploads by file type when using the `fileGroup` field option.\n- Uploading SVG files is permitted in the Media Library by default.\n\n### Adds\n\n- Apostrophe now enables you to ship frontend JavaScript and Sass (using the SCSS syntax) without your own webpack configuration.\n- Any module may contain modern JavaScript in a `ui/src/index.js` file, which may use `import` to bring in other files in the standard way. Note that **`ui/src/index.js must export a function`**. These functions are called for you in the order modules are initialized.\n- Any module may contain a Sass (SCSS) stylesheet in a `ui/src/index.scss` file, which may also import other Sass (SCSS) files.\n- Any project that requires IE11 support for `ui/src` JavaScript code can enable it by setting the `es5: true` option to the `@apostrophecms/asset` module. Apostrophe produces separate builds for IE11 and modern browsers, so there is no loss of performance in modern browsers. Code is automatically compiled for IE11 using `babel` and missing language features are polyfilled using `core-js` so you can use promises, `async/await` and other standard modern JavaScript features.\n- `ui/public` is still available for raw JavaScript and CSS files that should be pushed *as-is* to the browser. The best use of this feature is to deliver the output of your own custom webpack build, if you have one.\n- Adds browser-side `editMode` flag that tracks the state of the current view (edit or preview), located at `window.apos.adminBar.editMode`.\n- Support for automatic inline style attribute sanitization for Rich Text widgets.\n- Adds text align controls for Rich Text widgets. The following tools are now supported as part of a rich text widget's `toolbar` property:\n-- `alignLeft`\n-- `alignRight`\n-- `alignCenter`\n-- `alignJustify`\n- `@apostrophecms/express` module now supports the `trustProxy: true` option, allowing your reverse proxy server (such as nginx) to pass on the original hostname, protocol and client IP address.\n\n### Fixes\n\n* Unit tests passing again. Temporarily disabled npm audit checks as a source of critical failures owing to upstream issues with third-party packages which are not actually a concern in our use case.\n* Fixed issues with the query builder code for relationships. These issues were introduced in beta 3 but did not break typical applications, except for displaying distinct choices for existing values of a relationship field.\n* Checkbox field types can now be used as conditional fields.\n* Tracks references to attachments correctly, and introduces a migration to address any attachments previously tracked as part of documents that merely have a relationship to the proper document, i.e. pages containing widgets that reference an image piece.\n* Tracks the \"previously published\" version of a document as a legitimate reference to any attachments, so that they are not discarded and can be brought back as expected if \"Undo Publish\" is clicked.\n* Reverse relationships work properly for published documents.\n* Relationship subfields are now loaded properly when `reverseOf` is used.\n* \"Discard Draft\" is available when appropriate in \"Manage Pages\" and \"Manage Pieces.\"\n* \"Discard Draft\" disables the \"Submit Updates\" button when working as a contributor.\n* Relationship subfields can now be edited when selecting in the full \"manage view\" browser, as well as in the compact relationship field view which worked previously.\n* Relationship subfields now respect the `def` property.\n* Relationship subfields are restored if you deselect a document and then reselect it within a single editing experience, i.e. accidentally deselect and immediately reselect, for instance.\n* A console warning when editing subfields for a new relationship was fixed.\n* Field type `color`'s `format` option moved out of the UI options and into the general options object. Supported formats are \"rgb\", \"prgb\", \"hex6\", \"hex3\", \"hex8\", \"name\", \"hsl\", \"hsv\". Pass the `format` string like:\n```js\nmyColorField: {\n  type: 'color',\n  label: 'My Color',\n  options: {\n    format: 'hsl'\n  }\n}\n```\n* Restored Vue dependency to using semantic versioning now that Vue 2.6.14 has been released with a fix for the bug that required us to pin 2.6.12.\n* Nunjucks template loader is fully compatible with Linux in a development environment.\n* Improved template performance by reusing template loaders.\n* `min` and `max` work properly for both string-like and number-like fields.\n* Negative numbers, leading minus and plus signs, and trailing periods are accepted in the right ways by appropriate field types.\n* If a user is inadvertently inserted with no password, set a random password on the backend for safety. In tests it appears that login with a blank password was already forbidden, but this provides an additional level of certainty.\n* `data.page` and `data.contextOptions` are now available in `widget.html` templates in most cases. Specifically, they are available when loading the page, (2) when a widget has just been inserted on the page, and (3) when a widget has just been edited and saved back to the page. However, bear in mind that these parameters are never available when a widget is being edited \"out of context\" via \"Page Settings\", via the \"Edit Piece\" dialog box, via a dialog box for a parent widget, etc. Your templates should be written to tolerate the absence of these parameters.\n* Double slashes in the slug cannot be used to trick Apostrophe into serving as an open redirect (fix ported to 3.x from 2.92.0).\n* The global doc respects the `def` property of schema fields when first inserted at site creation time.\n* Fixed fragment keyword arguments being available when not a part of the fragment signature.\n\n## 3.0.0-beta.3.1 - 2021-06-07\n\n### Breaks\n- This backwards compatibility break actually occurred in 3.0.0-beta.3 and was not documented at that time, but it is important to know that the following Rich Text tool names have been updated to match Tiptap2's convention:\n-- `bullet_list` -> `bulletList`\n-- `ordered_list` -> `orderedList`\n-- `code_block` -> `codeBlock`\n-- `horizontal_rule` -> `horizontalRule`\n\n### Fixes\n\n- Rich Text default tool names updated, no longer broken. Bug introduced in 3.0.0-beta.3.\n- Fixed Rich Text's tool cascade to properly account for core defaults, project level defaults, and area-specific options.\n\n## 3.0.0-beta.3 - 2021-06-03\n\n### Security Fixes\n\nThe `nlbr` and `nlp` Nunjucks filters marked their output as safe to preserve the tags that they added, without first escaping their input, creating a CSRF risk. These filters have been updated to escape their input unless it has already been marked safe. No code changes are required to templates whose input to the filter is intended as plaintext, however if you were intentionally leveraging this bug to output unescaped HTML markup you will need to make sure your input is free of CSRF risks and then use the `| safe` filter before the `| nlbr` or `| nlp` filter.\n\n### Adds\n\n- Added the `ignoreUnusedFolderWarning` option for modules that intentionally might not be activated or inherited from in a particular startup.\n- Better explanation of how to replace macros with fragments, in particular how to call the fragments with `{% render fragmentName(args) %}`.\n\n### Fixes\n\n- Temporarily pinned to Vue 2.6.12 to fix an issue where the \"New\" button in the piece manager modals disappeared. We think this is a bug in the newly released Vue 2.6.13 but we are continuing to research it.\n- Updated dependencies on `sanitize-html` and `nodemailer` to new major versions, causing no bc breaks at the ApostropheCMS level. This resolved two critical vulnerabilities according to `npm audit`.\n- Removed many unused dependencies.\n- The data retained for \"Undo Publish\" no longer causes slug conflicts in certain situations.\n- Custom piece types using `localized: false` or `autopublish: true,` as well as singleton types, now display the correct options on the \"Save\" dropdown.\n- The \"Save and View,\" \"Publish and View\" and/or \"Save Draft and Preview\" options now appear only if an appropriate piece page actually exists for the piece type.\n- Duplicating a widget now properly assigns new IDs to all copied sub-widgets, sub-areas and array items as well.\n\n- Added the `ignoreUnusedFolderWarning` option for modules that intentionally might not be activated or inherited from in a particular startup.\n- If you refresh the page while previewing or editing, you will be returned to that same state.\n\n### Notices\n\n- Numerous `npm audit` vulnerability warnings relating to `postcss` 7.x were examined, however it was determined that these are based on the idea of a malicious SASS coder attempting to cause a denial of service. Apostrophe developers would in any case be able to contribute JavaScript as well and so are already expected to be trusted parties. This issue must be resolved upstream in packages including both `stylelint` and `vue-loader` which have considerable work to do before supporting `postcss` 8.x, and in any case public access to write SASS is not part of the attack surface of Apostrophe.\n\n### Changes\n\n- When logging out on a page that only exists in draft form, or a page with access controls, you are redirected to the home page rather than seeing a 404 message.\n\n- Rich text editor upgraded to [tiptap 2.x beta](https://www.tiptap.dev) :tada:. On the surface not a lot has changed with the upgrade, but tiptap 2 has big improvements in terms of speed, composability, and extension support. [See the technical differences of tiptap 1 and 2 here](https://www.tiptap.dev/overview/upgrade-guide#reasons-to-upgrade-to-tiptap-2x)\n\n## 3.0.0-beta.2 - 2021-05-21\n\n### **Breaks**\n\n- The `updateModified: false` option, formerly supported only by `apos.doc.update`, has been renamed to `setModified: false` and is now supported by `apos.doc.insert` as well. If explicitly set to false, the insert and update methods will leave the `modified` property alone, rather than trying to detect or infer whether a change has been made to the draft relative to the published version.\n- The `permission` module no longer takes an `interestingTypes` option. Instead, doc type managers may set their `showPermissions` option to `true` to always be broken out separately in the permissions explorer, or explicitly set it to `false` to never be mentioned at all, even on a list of typical piece types that have the same permissions. This allows module creators to ship the right options with their modules rather than requiring the developer to hand-configure `interestingTypes`.\n- When editing users, the permissions explorer no longer lists \"submitted draft\" as a piece type.\n- Removed `apos.adminBar.group` method, which is unlikely to be needed in 3.x. One can group admin bar items into dropdowns via the `groups` option.\n- Raw HTML is no longer permitted in an `apos.notify` message parameter. Instead, `options.buttons` is available. If present, it must be an array of objects with `type` and `label` properties. If `type` is `'event'` then that button object must have `name` and `data` properties, and when clicked the button will trigger an apos bus event of the given `name` with the provided `data` object. Currently `'event'` is the only supported value for `type`.\n\n### Adds\n\n- The name `@apostrophecms/any-page-type` is now accepted for relationships that should match any page. With this change, the doc type manager module name and the type name are now identical for all types in 3.x. However, for backwards compatibility `@apostrophecms/page` is still accepted. `apos.doc.getManager` will accept either name.\n- Sets the project root-level `views` directory as the default fallback views directory. This is no longer a necessary configuration in projects unless they want to change it on the `@apostrophecms/template` option `viewsFolderFallback`.\n- The new `afterAposScripts` nunjucks block allows for pushing markup after Apostrophe's asset bundle script tag, at the end of the body. This is a useful way to add a script tag for Webpack's hot reload capabilities in development while still ensuring that Apostrophe's utility methods are available first, like they are in production.\n- An `uploadfs` option may be passed to the `@apostrophecms/asset` module, in order to pass options configuring a separate instance of `uploadfs` specifically for the static assets. The `@apostrophecms/uploadfs` module now exports a method to instantiate an uploadfs instance. The default behavior, in which user-uploaded attachments and static assets share a single instance of uploadfs, is unchanged. Note that asset builds never use uploadfs unless `APOS_UPLOADFS_ASSETS=1` is set in the environment.\n- `AposButtonSplit` is a new UI component that combines a button with a context menu. Users can act on a primary action or change the button's function via menu button to the right of the button itself.\n- Developers can now pass options to the `color` schema field by passing a `pickerOptions` object through your field. This allows for modifying/removing the default color palette, changing the resulting color format, and disabling various UI. For full set of options [see this example](https://github.com/xiaokaike/vue-color/blob/master/src/components/Sketch.vue)\n- `AposModal` now emits a `ready` event when it is fully painted and can be interacted with by users or code.\n- The video widget is now compatible with vimeo private videos when the domain is on the allowlist in vimeo.\n\n### Changes\n\n- You can now override the parked page definition for the home page without copying the entirety of `minimumPark` from the source code. Specifically, you will not lose the root archive page if you park the home page without explicitly parking the archive page as well. This makes it easier to choose your own type for the home page, in lieu of `@apostrophecms/home-page`.\n\n### Fixes\n\n- Piece types like users that have a slug prefix no longer trigger a false positive as being \"modified\" when you first click the \"New\" button.\n- The `name` option to widget modules, which never worked in 3.x, has been officially removed. The name of the widget type is always the name of the module, with the `-widget` suffix removed.\n- The home page and other parked pages should not immediately show as \"pending changes.\"\n- In-context editing works properly when the current browser URL has a hash (portion beginning with `#`), enabling the use of the hash for project-specific work. Thanks to [https://stepanjakl.com/](\u0160t\u011bp\u00e1n J\u00e1kl) for reporting the issue.\n- When present, the `apos.http.addQueryToUrl` method preserves the hash of the URL intact.\n- The home page and other parked pages should not immediately show as \"pending changes.\"\n- The browser-side `apos.http.parseQuery` function now handles objects and arrays properly again.\n- The in-context menu for documents has been refactored as a smart component that carries out actions on its own, eliminating a great deal of redundant code, props and events.\n- Added additional retries when binding to the port in a dev environment.\n- The \"Submit\" button in the admin bar updates properly to \"Submitted\" if the submission happens in the page settings modal.\n- Skipping positional arguments in fragments now works as expected.\n- The rich text editor now supports specifying a `styles` array with no `p` tags properly. A newly added rich text widget initially contains an element with the first style, rather than always a paragraph. If no styles are configured, a `p` tag is assumed. Thanks to Stepan Jakl for reporting the issue.\n\n### Changes\n- Editor modal's Save button (publish / save draft / submit) now updated to use the `AposSplitButton` component. Editors can choose from several follow-up actions that occur after save, including creating another piece of content of the same type, being taken to the in-context version of the document, or being returned to the manager. Editor's selection is saved in localstorage, creating a remembered preference per content type.\n\n## 3.0.0-beta.1.1 - 2021-05-07\n\n### Fixes\n\n- A hotfix for an issue spotted in beta 1 in our demo: all previously published pages of sites migrated from early alpha releases had a \"Draft\" label until published again.\n\n## 3.0.0-beta.1 - 2021-05-06\n\n### **Breaks**\n\n- Removes the\u00a0`firstName`\u00a0and\u00a0`lastName`\u00a0fields in user pieces.\n- The query parameters\u00a0`apos-refresh`,\u00a0`apos-edit`,\u00a0`apos-mode`\u00a0and\u00a0`apos-locale`\u00a0are now\u00a0`aposRefresh`,\u00a0`aposEdit`,\u00a0`aposMode`and\u00a0`aposLocale`. Going forward all query parameters will be camelCase for consistency with query builders.\n\n### Changes\n\n- Archiving a page or piece deletes any outstanding draft in favor of archiving the last published version. Previously the behavior was effectively the opposite.\n- \"Publish Changes\" button label has been changes to \"Update\".\n- Draft mode is no longer the default view for published documents.\n- The page and piece manager views now display the title, etc. of the published version of a document, unless that document only exists in draft form. However a label is also provided indicating if a newer draft is in progress.\n- Notifications have been updated with a new visual display and animation style.\n\n### **Adds**\n\n- Four permissions roles are supported and enforced: guest, contributor, editor and admin. See the documentation for details. Pre-existing alpha users are automatically migrated to the admin role.\n- Documents in managers now have context sensitive action menus that allow actions like edit, discard draft, archive, restore, etc.\n- A fragment call may now have a body using\u00a0`rendercall`, just like a macro call can have a body using\u00a0`call`. In addition, fragments can now have named arguments, just like macros. Many thanks to Miro Yovchev for contributing this implementation.\n- Major performance improvement to the\u00a0`nestedModuleSubdirs`\u00a0option.\n- Updates URL fields and oEmbed URL requests to use the\u00a0`httpsFix`\u00a0option in launder's\u00a0`url()`\u00a0method.\n- Documents receive a state label based on their document state (draft, pending, pending updates)\n- Contributors can submit drafts for review (\"Submit\" versus \"Submit Updates\").\n- Editors and admins can manage submitted drafts.\n- Editors and admins can easily see the number of proposed changes awaiting their attention.\n- Support for virtual piece types, such as submitted drafts, which in actuality manage more than one type of doc.\n- Confirm modals now support a schema which can be assessed after confirmation.\n- When archiving and restoring pages, editors can chose whether the action affects only this document or this document + children\n- Routes support the\u00a0`before`\u00a0syntax, allowing routes that are added to Express prior to the routes or middleware of another module. The syntax\u00a0`before: 'middleware:moduleName'`\u00a0must be used to add the route prior to the middleware of\u00a0`moduleName`. If\u00a0`middleware:`\u00a0is not used, the route is added before the routes of\u00a0`moduleName`. Note that normally all middleware is added before all routes.\n- A\u00a0`url`\u00a0property can now optionally be specified when adding middleware. By default all middleware is global.\n- The pieces REST GET API now supports returning only a count of all matching pieces, using the\u00a0`?count=1`\u00a0query parameter.\n- Admin bar menu items can now specify a custom Vue component to be used in place of\u00a0`AposButton`.\n- Sets\u00a0`username`\u00a0fields to follow the user\u00a0`title`\u00a0field to remove an extra step in user creation.\n- Adds default data to the\u00a0`outerLayoutBase.html`\u00a0`<title>`\u00a0tag:\u00a0`data.piece.title or data.page.title`.\n- Moves the core UI build task into the start up process. The UI build runs automatically when\u00a0`NODE_ENV`\u00a0is\u00a0*not*\u00a0'production' and when:\n    1. The build folder does not yet exist.\n    2. The package.json file is newer than the existing UI build.\n    3. You explicitly tell it to by setting the environment variable\u00a0`CORE_DEV=1`\n- The new\u00a0`._ids(_idOrArrayOfIds)`\u00a0query builder replaces\u00a0`explicitOrder`\u00a0and accepts an array of document\u00a0`_id`s or a single one.\u00a0`_id`\u00a0can be used as a multivalued query parameter. Documents are returned in the order you specify, and just like with single-document REST GET requests, the locale of the\u00a0`_id`s is overridden by the\u00a0`aposMode`\u00a0query parameter if present.\n- The\u00a0`.withPublished(true)`\u00a0query builder adds a\u00a0`_publishedDoc`\u00a0property to each returned draft document that has a published equivalent.\u00a0`withPublished=1`\u00a0can be used as a query parameter. Note this is not the way to fetch only published documents. For that, use\u00a0`.locale('en:published')`\u00a0or similar.\n- The server-side implementation of\u00a0`apos.http.post`\u00a0now supports passing a\u00a0`FormData`\u00a0object created with the\u00a0`[form-data](https://www.npmjs.com/package/form-data)`\u00a0npm module. This keeps the API parallel with the browser-side implementation and allows for unit testing the attachments feature, as well as uploading files to internal and external APIs from the server.\n- `manuallyPublished`\u00a0computed property moved to the\u00a0`AposPublishMixin`\u00a0for the use cases where that mixin is otherwise warranted.\n- `columns`\u00a0specified for a piece type's manage view can have a name that uses \"dot notation\" to access a subproperty. Also, for types that are localized, the column name can begin with\u00a0`draft:`\u00a0or\u00a0`published:`\u00a0to specifically display a property of the draft or published version of the document rather than the best available. When a prefix is not used, the property comes from the published version of the document if available, otherwise from the draft.\n- For page queries, the\u00a0`children`\u00a0query builder is now supported in query strings, including the\u00a0`depth`\u00a0subproperty. For instance you could fetch\u00a0`/api/v1/@apostrophecms/page/id-of-page?children=1`\u00a0or\u00a0`/api/v1/@apostrophecms/page/id-of-page?children[depth]=3`.\n- Setting\u00a0`APOS_LOG_ALL_QUERIES=1`\u00a0now logs the projection, skip, limit and sort in addition to the criteria, which were previously logged.\n\n### **Fixes**\n\n- Fragments can now call other fragments, both those declared in the same file and those imported, just like macros calling other macros. Thanks to Miro Yovchev for reporting the issue.\n- There was a bug that allowed parked properties, such as the slug of the home page, to be edited. Note that if you don't want a property of a parked page to be locked down forever you can use the\u00a0`_defaults`\u00a0feature of parked pages.\n- A required field error no longer appears immediately when you first start creating a user.\n- Vue warning in the pieces manager due to use of value rather than name of column as a Vue key. Thanks to Miro Yovchev for spotting the issue.\n- \"Save Draft\" is not an appropriate operation to offer when editing users.\n- Pager links no longer break due to\u00a0`aposRefresh=1`\u00a0when in edit mode. Also removed superfluous\u00a0`append`\u00a0query parameter from these.\n- You may now intentionally clear the username and slug fields in preparation to type a new value. They do not instantly repopulate based on the title field when you clear them.\n- Language of buttons, labels, filters, and other UI updated and normalized throughout.\n- A contributor who enters the page tree dialog box, opens the editor, and selects \"delete draft\" from within the editor of an individual page now sees the page tree reflect that change right away.\n- The page manager listens for content change events in general and its refresh mechanism is robust in possible situations where both an explicit refresh call and a content change event occur.\n- Automatically retries once if unable to bind to the port in a dev environment. This helps with occasional\u00a0`EADDRINUSE`\u00a0errors during nodemon restarts.\n- Update the current page's context bar properly when appropriate after actions such as \"Discard Draft.\"\n- The main archive page cannot be restored, etc. via the context menu in the page tree.\n- The context menu and \"Preview Draft\" are both disabled while errors are present in the editor dialog box.\n- \"Duplicate\" should lead to a \"Publish\" button, not an \"Update\" button, \"Submit\" rather than \"Submit Update,\" etc.\n- When you \"Duplicate\" the home page you should be able to set a slug for the new page (parked properties of parked pages should be editable when making a duplicate).\n- When duplicating the home page, the suggested slug should not be\u00a0`/`\u00a0as only one page can have that slug at a time.\n- Attention is properly called to a slug conflict if it exists immediately when the document is opened (such as making a copy where the suggested slug has already been used for another copy).\n- \"Preview Draft\" never appears for types that do not use drafts.\n- The toggle state of admin bar utility items should only be mapped to an\u00a0`is-active`\u00a0class if, like palette, they opt in with\u00a0`toggle: true`\n- Fixed unique key errors in the migrate task by moving the parking of parked pages to a new\u00a0`@apostrophecms/migrate:after`\u00a0event handler, which runs only after migrations, whether that is at startup (in dev) or at the end of the migration task (in production).\n- UI does not offer \"Archive\" for the home page, or other archived pages.\n- Notification checks and other polling requests now occur only when the tab is in the foreground, resolving a number of problems that masqueraded as other bugs when the browser hit its connection limit for multiple tabs on the same site.\n- Parked pages are now parked immediately after database migrations are checked and/or run. In dev this still happens at each startup. In production this happens when the database is brand new and when the migration task is manually run.\n\n## 3.0.0-alpha.7 - 2021-04-07\n\n### Breaks\n\n* The `trash` property has been renamed `archived`, and throughout the UI we refer to \"archiving\" and the \"archive\" rather than \"move to trash\" and the \"trash can.\" A database migration is included to address this for existing databases. However, **if you set the minimumPark option, or used a boilerplate in which it is set,** you will need to **change the settings for the `parkedId: 'trash'` page to match those [currently found in the `minimumPark` option setting in the `@apostrophecms/page` source code](https://github.com/apostrophecms/apostrophe/blob/481252f9bd8f42b62648a0695105e6e9250810d3/modules/%40apostrophecms/page/index.js#L25-L32).\n\n### Adds\n\n* General UX and UI improvements to the experience of moving documents to and from the archive, formerly known as the trash.\n* Links to each piece are available in the manage view when appropriate.\n* Search is implemented in the media library.\n* You can now pass core widgets a `className` option when configuring them as part of an area.\n* `previewDraft` for pieces, adds a Preview Draft button on creation for quick in-context editing. Defaults to true.\n\n### Changes\n\n* Do not immediately redirect to new pages and pieces.\n* Restored pieces now restore as unpublished drafts.\n* Refactored the admin bar component for maintainability.\n* Notification style updates\n\n### Fixes\n\n* Advisory lock no longer triggers an update to the modification timestamp of a document.\n* Attempts to connect Apostrophe 3.x to an Apostrophe 2.x database are blocked to prevent content loss.\n* \"Save as Draft\" is now available as soon as a new document is created.\n* Areas nested in array schema fields can now be edited in context.\n* When using `apos.image.first`, the alt attribute of the image piece is available on the returned attachment object as `._alt`. In addition, `_credit` and `_creditUrl` are available.\n* Fixes relating to the editing of widgets in nested areas, both on the page and in the modal.\n* Removed published / draft switch for unpublished drafts.\n* \"Publish Changes\" appears only at appropriate times.\n* Notifications moved from the bottom right of the viewport to the bottom center, fixing some cases of UI overlap.\n\n## 3.0.0-alpha.6.1 - 2021-03-26\n\n### Fixes\n\n* Conditional fields (`if`) and the \"following values\" mechanism now work properly in array item fields.\n* When editing \"Page Settings\" or a piece, the \"publish\" button should not be clickable if there are errors.\n\n## 3.0.0-alpha.6 - 2021-03-24\n\n### Adds\n* You can \"copy\" a page or a piece via the \u2807 menu.\n* When moving the current page or piece to the trash, you are taken to the home page.\n* `permissions: false` is supported for piece and page insert operations.\n* Adds note to remove deprecated `allowedInChooser` option on piece type filters.\n* UX improvement: \"Move to Trash\" and \"Restore\" buttons added for pieces, replacing the boolean field. You can open a piece that is in the trash in a read-only way in order to review it and click \"Restore.\"\n* Advisory lock support has been completed for all content types, including on-page, in-context editing. This prevents accidental conflicts between editors.\n* Image widgets now accept a `size` context option from the template, which can be used to avoid sending a full-width image for a very small placement.\n* Additional improvements.\n\n### Fixes\n* Fixes error from missing `select` method in `AposPiecesManager` component.\n* No more migration messages at startup for brand-new sites.\n* `max` is now properly implemented for relationships when using the manager dialog box as a chooser.\n* \"Trash\" filter now displays its state properly in the piece manager dialog box.\n* Dragging an image to the media library works reliably.\n* Infinite loop warning when editing page titles has been fixed.\n* Users can locate the tab that still contains errors when blocked from saving a piece due to schema field errors.\n* Calling `insert` works properly in the `init` function of a module.\n* Additional fixes.\n\n### Breaks\n\n* Apostrophe's instance of `uploadfs` has moved from `apos.attachment.uploadfs` to `apos.uploadfs`. The `uploadfs` configuration option has similarly moved from the `@apostrophecms/attachment` module to the `@apostrophecms/uploadfs` module. `imageSizes` is still an option to `@apostrophecms/attachment`.\n\n## 3.0.0-alpha.5 - 2021-02-11\n\n* Conditional fields are now supported via the new `if` syntax. The old 2.x `showFields` feature has been replaced with `if: { ... }`.\n* Adds the option to pass context options to an area for its widgets following the `with` keyword. Context options for widgets not in that area (or that don't exist) are ignored. Syntax: `{% area data.page, 'areaName' with { '@apostrophecms/image: { size: 'full' } } %}`.\n* Advisory locking has been implemented for in-context editing, including nested contexts like the palette module. Advisory locking has also been implemented for the media manager, completing the advisory locking story.\n* Detects many common configuration errors at startup.\n* Extends `getBrowserData` in `@apostrophecms/doc-type` rather than overwriting the method.\n* If a select element has no default, but is required, it should default to the first option. The select elements appeared as if this were the case, but on save you would be told to make a choice, forcing you to change and change back. This has been fixed.\n* Removes 2.x piece module option code, including for `contextual`, `manageViews`, `publishMenu`, and `contextMenu`.\n* Removes admin bar module options related to 2.x slide-out UI: `openOnLoad`, `openOnHomepageLoad`, `closeDelay`.\n* Fixed a bug that allowed users to appear to be in edit mode while looking at published content in certain edge cases.\n* The PATCH API for pages can now infer the correct _id in cases where the locale is specified in the query string as an override, just like other methods.\n* Check permissions for the delete and publish operations.\n* Many bug fixes.\n\n### Breaks\n* Changes the `piecesModuleName` option to `pieceModuleName` (no \"s\") in the `@apostrophecms/piece-page-type` module. This feature is used only when you have two or more piece page types for the same piece type.\n\n## 3.0.0-alpha.4.2 - 2021-01-27\n\n* The `label` option is no longer required for widget type modules. This was already true for piece type and page type modules.\n* Ability to namespace asset builds. Do not push asset builds to uploadfs unless specified.\n\n### Breaking changes\n\n* Removes the `browser` module option, which was only used by the rich text widget in core. All browser data should now be added by extending or overriding `getBrowserData` in a module. Also updates `getComponentName` to reference `options.components` instead of `options.browser.components`.\n\n## 3.0.0-alpha.4.1\n\n* Hotfix: the asset module now looks for a `./release-id` file (relative to the project), not a `./data/release-id` file, because `data` is not a deployed folder and the intent of `release-id` is to share a common release identifier between the asset build step and the deployed instances.\n\n## 3.0.0-alpha.4\n\n* **\"Fragments\" have been added to the Apostrophe template API, as an alternative to Nunjucks' macros, to fully support areas and async components.** [See the A3 alpha documentation](https://a3.docs.apos.dev/guide/widgets-and-templates/fragments.html) for instructions on how to use this feature.\n* **CSS files in the `ui/public` subdirectory of any module are now bundled and pushed to the browser.** This allows you to efficiently deliver your CSS assets, just as you can deliver JS assets in `ui/public`. Note that these assets must be browser-ready JS and CSS, so it is customary to use your own webpack build to generate them. See [the a3-boilerplate project](https://github.com/apostrophecms/a3-boilerplate) for an example, especially `webpack.config.js`.\n* **More support for rendering HTML in REST API requests.** See the `render-areas` query parameter in [piece and page REST API documentation](https://a3.docs.apos.dev/reference/api/pieces.html#get-api-v1-piece-name).\n* **Context bar takeover capability,** for situations where a secondary document should temporarily own the undo/redo/publish UI.\n* **Unpublished pages in the tree** are easier to identify\n* **Range fields** have been added.\n* **Support for npm bundles is back.** It works just like in 2.x, but the property is `bundle`, not `moogBundle`. Thanks to Miro Yovchev.\n\n### Breaking changes\n\n* **A3 now uses webpack 5.** For now, **due to a known issue with vue-loader, your own project must also be updated to use webpack 5.** The a3-boilerplate project has been updated accordingly, so you may refer to [the a3-boilerplate project](https://github.com/apostrophecms/a3-boilerplate) for an example of the changes to be made, notably in `webpack.config.js` and `package.json`. We are in communication with upstream developers to resolve the issue so that projects and apostrophe core can use different major versions of webpack.\n\n## 3.0.0-alpha.3\n\nThird alpha release of 3.x. Introduced draft mode and the \"Publish Changes\" button.\n\n## 3.0.0-alpha.2\n\nSecond alpha release of 3.x. Introduced a distinct \"edit\" mode.\n\n## 3.0.0-alpha.1\n\nFirst alpha release of 3.x.\n", "const _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs');\nconst Promise = require('bluebird');\n\nmodule.exports = {\n  options: { alias: 'attachment' },\n  cascades: [ 'imageSizes' ],\n  imageSizes: {\n    add: {\n      max: {\n        width: 1600,\n        height: 1600\n      },\n      full: {\n        width: 1140,\n        height: 1140\n      },\n      'two-thirds': {\n        width: 760,\n        height: 760\n      },\n      'one-half': {\n        width: 570,\n        height: 700\n      },\n      'one-third': {\n        width: 380,\n        height: 700\n      },\n      'one-sixth': {\n        width: 190,\n        height: 350\n      }\n    }\n  },\n\n  async init(self) {\n    // For convenience and bc\n    self.uploadfs = self.apos.uploadfs;\n    // uploadfs expects an array\n    self.imageSizes = Object.keys(self.imageSizes).map(name => ({\n      name,\n      ...self.imageSizes[name]\n    }));\n    self.name = 'attachment';\n    self.fileGroups = self.options.fileGroups || [\n      {\n        name: 'images',\n        label: 'apostrophe:images',\n        extensions: [\n          'gif',\n          'jpg',\n          'png',\n          'svg'\n        ],\n        extensionMaps: { jpeg: 'jpg' },\n        // uploadfs should treat this as an image and create scaled versions\n        image: true\n      },\n      {\n        name: 'office',\n        label: 'apostrophe:office',\n        extensions: [\n          'txt',\n          'rtf',\n          'pdf',\n          'xls',\n          'ppt',\n          'doc',\n          'pptx',\n          'sldx',\n          'ppsx',\n          'potx',\n          'xlsx',\n          'xltx',\n          'csv',\n          'docx',\n          'dotx'\n        ],\n        extensionMaps: {},\n        // uploadfs should just accept this file as-is\n        image: false\n      }\n    ];\n\n    // Do NOT add keys here unless they have the value `true`\n    self.croppable = {\n      gif: true,\n      jpg: true,\n      png: true\n    };\n\n    // Do NOT add keys here unless they have the value `true`\n    self.sized = {\n      gif: true,\n      jpg: true,\n      png: true\n    };\n\n    self.sizeAvailableInArchive = self.options.sizeAvailableInArchive || 'one-sixth';\n\n    self.rescaleTask = require('./lib/tasks/rescale.js')(self);\n    self.addFieldType();\n    self.enableBrowserData();\n\n    self.db = await self.apos.db.collection('aposAttachments');\n    await self.db.createIndex({ docIds: 1 });\n    await self.db.createIndex({ archivedDocIds: 1 });\n    self.addLegacyMigrations();\n  },\n\n  tasks(self) {\n    return {\n      rescale: {\n        usage: 'Usage: node app @apostrophecms/attachment:rescale\\n\\nRegenerate all sizes of all image attachments. Useful after a new size\\nis added to the configuration. Takes a long time!',\n        task: self.rescaleTask\n      },\n      'migrate-to-disabled-file-key': {\n        usage: 'Usage: node app @apostrophecms/attachment:migrate-to-disabled-file-key\\n\\nThis task should be run after adding the disabledFileKey option to uploadfs\\nfor the first time. It should only be relevant for storage backends where\\nthat option is not mandatory, i.e. only local storage as of this writing.',\n        task: self.migrateToDisabledFileKeyTask\n      },\n      'migrate-from-disabled-file-key': {\n        usage: 'Usage: node app @apostrophecms/attachment:migrate-from-disabled-file-key\\n\\nThis task should be run after removing the disabledFileKey option from uploadfs.\\nIt should only be relevant for storage backends where\\n' + 'that option is not mandatory, i.e. only local storage as of this writing.',\n        task: self.migrateFromDisabledFileKeyTask\n      },\n      'recompute-all-doc-references': {\n        usage: 'Recompute mapping between attachments and docs,\\nshould only be needed for rare repair situations',\n        task: self.recomputeAllDocReferences\n      }\n    };\n  },\n\n  // TODO RESTify where possible\n  apiRoutes(self) {\n    // TODO this must be updated to employ the new useMiddleware format and that\n    // section has to be implemented\n    return {\n      post: {\n        upload: [\n          self.canUpload,\n          require('connect-multiparty')(),\n          async function (req) {\n            try {\n              // The name attribute could be anything because of how fileupload\n              // controls work; we don't really care.\n              const file = Object.values(req.files || {})[0];\n\n              if (!file) {\n                throw self.apos.error('invalid');\n              }\n\n              const attachment = await self.insert(req, file);\n              self.all({ attachment }, { annotate: true });\n\n              return attachment;\n            } finally {\n              for (const file of (Object.values(req.files || {}))) {\n                try {\n                  fs.unlinkSync(file.path);\n                } catch (e) {\n                  self.apos.util.warn(`Uploaded temporary file ${file.path} was already removed, this should have been the responsibility of the upload route`);\n                }\n              }\n            }\n          }\n        ],\n        // Crop a previously uploaded image, based on the `id` POST parameter\n        // and the `crop` POST parameter. `id` should refer to an existing\n        // file in /attachments. `crop` should contain top, left, width and height\n        // properties.\n        //\n        // This route uploads a new, cropped version of\n        // the existing image to uploadfs, named:\n        //\n        // /attachments/ID-NAME.top.left.width.height.extension\n        //\n        // The `crop` object is appended to the `crops` array property\n        // of the file object.\n        crop: [\n          self.canUpload,\n          async function (req) {\n            const _id = self.apos.launder.id(req.body._id);\n            let crop = req.body.crop;\n            if (typeof crop !== 'object') {\n              throw self.apos.error('invalid');\n            }\n            crop = self.sanitizeCrop(crop);\n            if (!crop) {\n              throw self.apos.error('invalid');\n            }\n            await self.crop(req, _id, crop);\n            return true;\n          }\n        ]\n      }\n    };\n  },\n  handlers(self) {\n    return {\n      '@apostrophecms/doc-type:afterSave': {\n        async updateDocReferencesAfterSave(req, doc, options) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterArchive': {\n        async updateDocReferencesAfterArchive(req, doc) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterRescue': {\n        async updateDocReferencesAfterRescue(req, doc) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterDelete': {\n        async updateDocReferencesAfterDelete(req, doc) {\n          return self.updateDocReferences(doc, {\n            deleted: true\n          });\n        }\n      }\n    };\n  },\n  methods(self) {\n    return {\n      addFieldType() {\n        self.apos.schema.addFieldType({\n          name: self.name,\n          partial: self.fieldTypePartial,\n          convert: self.convert,\n          index: self.index,\n          register: self.register\n        });\n      },\n      async convert(req, field, data, object) {\n        let info = data[field.name];\n        if (typeof info !== 'object') {\n          info = {};\n        }\n        info = _.pick(info, '_id', 'crop');\n        info._id = self.apos.launder.id(info._id);\n        if (!info._id) {\n          object[field.name] = null;\n        }\n        info.crop = info.crop ? self.sanitizeCrop(info.crop) : undefined;\n        const dbInfo = await self.db.findOne({ _id: info._id });\n        if (!dbInfo) {\n          object[field.name] = null;\n          return;\n        }\n        _.assign(info, _.omit(dbInfo, 'crop'));\n\n        // Check if the file type is acceptable\n        const correctedExtensions = self.checkExtension(field, info);\n\n        if (correctedExtensions) {\n          const message = req.t('apostrophe:fileTypeNotAccepted', {\n            // i18next has no built-in support for interpolating an array argument\n            extensions: correctedExtensions.join(req.t('apostrophe:listJoiner'))\n          });\n          throw self.apos.error('invalid', message);\n        }\n\n        if (info.crop) {\n          if (!_.find(info.crops, info.crop)) {\n            info.crop = null;\n          }\n        }\n        info.used = true;\n        await self.db.replaceOne({ _id: info._id }, info);\n        object[field.name] = info;\n      },\n      fieldTypePartial(data) {\n        return self.partial('attachment', data);\n      },\n      index(value, field, texts) {\n        const silent = field.silent === undefined ? true : field.silent;\n        texts.push({\n          weight: field.weight || 15,\n          text: (value && value.title) || '',\n          silent: silent\n        });\n      },\n      // When the field is registered in the schema,\n      // canonicalize .group and .extensions and .extension\n      // into .accept for convenience, as a comma-separated\n      // list of dotted file extensions suitable to pass to\n      // the \"accept\" HTML5 attribute, including mapped extensions\n      // like jpeg. If none of these options are set, .accept is\n      // set to an array of all accepted file extensions across\n      // all groups\n      register(metaType, type, field) {\n        let fileGroups = self.fileGroups;\n        if (field.fileGroups) {\n          fileGroups = fileGroups.filter(group => field.fileGroups.includes(group.name));\n        }\n        if (field.fileGroup) {\n          fileGroups = fileGroups.filter(group => group.name === field.fileGroup);\n        }\n        let extensions = [];\n        fileGroups.forEach(group => {\n          extensions = [ ...extensions, ...group.extensions ];\n        });\n        if (field.extensions) {\n          extensions = extensions.filter(extension => field.extensions.includes(extension));\n        }\n        if (field.extension) {\n          extensions = extensions.filter(extension => extension === field.extension);\n        }\n        fileGroups.forEach(group => {\n          for (const [ from, to ] of Object.entries(group.extensionMaps || {})) {\n            if (extensions.includes(to) && (!extensions.includes(from))) {\n              extensions.push(from);\n            }\n          }\n        });\n        field.accept = extensions.map(extension => `.${extension}`).join(',');\n      },\n      // Checked a given attachment's file extension against the extensions\n      // allowed by a particular schema field. If the attachment's file\n      // extension is allowed, `null` is returned. If the file extension is not\n      // allowed, `checkExtension` returns an array of the file extensions that\n      // _are_ allowed (or an empty array if the allowed extensions are\n      // unknown).\n      checkExtension(field, attachment) {\n        const groups = field.fileGroups ||\n          (field.fileGroup && [ field.fileGroup ]);\n        let extensions;\n\n        if (groups) {\n          if (!_.includes(groups, attachment.group)) {\n            extensions = [];\n            _.each(groups, function (group) {\n              const groupInfo = _.find(self.fileGroups, { name: group });\n              if (!groupInfo) {\n                return [];\n              }\n              extensions = extensions.concat(groupInfo.extensions);\n            });\n            return extensions;\n          }\n        }\n        extensions = field.extensions ||\n          (field.extension && [ field.extension ]);\n\n        if (extensions) {\n          if (!_.includes(extensions, attachment.extension)) {\n            return extensions;\n          }\n        }\n        return null;\n      },\n      // Insert a file as an Apostrophe attachment. The `file` object\n      // should be an object with `name` and `path` properties.\n      // `name` must be the name the user claims for the file, while `path`\n      // must be the actual full path to the file on disk and need not have\n      // any file extension necessarily.\n      //\n      // Note that when using Express to handle file uploads,\n      // req.files['yourfieldname'] will be such an object as long as you\n      // configure jquery fileupload to submit one per request.\n      //\n      // The `options` argument may be omitted completely.\n      // If `options.permissions` is explicitly set to `false`,\n      // permissions are not checked.\n      //\n      // This method returns `attachment` where `attachment` is an attachment\n      // object, suitable for passing to the `url` API and for use as the value\n      // of a `type: 'attachment'` schema field.\n      async insert(req, file, options) {\n        options = options || {};\n        let extension = path.extname(file.name);\n        if (extension && extension.length) {\n          extension = extension.substr(1);\n        }\n        extension = extension.toLowerCase();\n        // Do we *ever* accept this file extension?\n        const group = self.getFileGroup(extension);\n\n        if (!group) {\n          const accepted = _.union(_.map(self.fileGroups, 'extensions')).flat();\n          throw self.apos.error('invalid', req.t('apostrophe:fileTypeNotAccepted', {\n            extensions: accepted.join(req.t('apostrophe:listJoiner'))\n          }));\n        }\n        const info = {\n          _id: self.apos.util.generateId(),\n          group: group.name,\n          createdAt: new Date(),\n          name: self.apos.util.slugify(path.basename(file.name, path.extname(file.name))),\n          title: self.apos.util.sortify(path.basename(file.name, path.extname(file.name))),\n          extension: extension,\n          type: 'attachment',\n          docIds: [],\n          archivedDocIds: []\n        };\n        if (!(options.permissions === false)) {\n          if (!self.apos.permission.can(req, 'upload-attachment')) {\n            throw self.apos.error('forbidden');\n          }\n        }\n        info.length = await self.apos.util.fileLength(file.path);\n        info.md5 = await self.apos.util.md5File(file.path);\n        if (self.isSized(extension)) {\n          // For images we correct automatically for common file extension mistakes\n          const result = await Promise.promisify(self.uploadfs.copyImageIn)(file.path, '/attachments/' + info._id + '-' + info.name, { sizes: self.imageSizes });\n          info.extension = result.extension;\n          info.width = result.width;\n          info.height = result.height;\n          if (info.width > info.height) {\n            info.landscape = true;\n          } else {\n            info.portrait = true;\n          }\n        } else {\n          // For non-image files we have to trust the file extension\n          // (but we only serve it as that content type, so this should\n          // be reasonably safe)\n          await Promise.promisify(self.uploadfs.copyIn)(file.path, '/attachments/' + info._id + '-' + info.name + '.' + info.extension);\n        }\n        info.createdAt = new Date();\n        await self.db.insertOne(info);\n        return info;\n      },\n      getFileGroup(extension) {\n        return _.find(self.fileGroups, function (group) {\n          const candidate = group.extensionMaps[extension] || extension;\n          if (_.includes(group.extensions, candidate)) {\n            return true;\n          }\n        });\n      },\n      async crop(req, _id, crop) {\n        const info = await self.db.findOne({ _id: _id });\n        if (!info) {\n          throw self.apos.error('notfound');\n        }\n        if (!self.croppable[info.extension]) {\n          throw new Error(info.extension + ' files cannot be cropped, do not present cropping UI for this type');\n        }\n        const crops = info.crops || [];\n        const existing = _.find(crops, crop);\n        if (existing) {\n          // We're done, this crop is already available\n          return;\n        }\n        // Pull the original out of cloud storage to a temporary folder where\n        // it can be cropped and popped back into uploadfs\n        const originalFile = '/attachments/' + info._id + '-' + info.name + '.' + info.extension;\n        const tempFile = self.uploadfs.getTempPath() + '/' + self.apos.util.generateId() + '.' + info.extension;\n        const croppedFile = '/attachments/' + info._id + '-' + info.name + '.' + crop.left + '.' + crop.top + '.' + crop.width + '.' + crop.height + '.' + info.extension;\n        await Promise.promisify(self.uploadfs.copyOut)(originalFile, tempFile);\n        await Promise.promisify(self.uploadfs.copyImageIn)(tempFile, croppedFile, {\n          crop: crop,\n          sizes: self.imageSizes\n        });\n        crops.push(crop);\n        await self.db.updateOne({\n          _id: info._id\n        }, {\n          $set: {\n            crops\n          }\n        });\n        await Promise.promisify(fs.unlink)(tempFile);\n      },\n      sanitizeCrop(crop) {\n        crop = _.pick(crop, 'top', 'left', 'width', 'height');\n        crop.top = self.apos.launder.integer(crop.top, 0, 0, 10000);\n        crop.left = self.apos.launder.integer(crop.left, 0, 0, 10000);\n        crop.width = self.apos.launder.integer(crop.width, 1, 1, 10000);\n        crop.height = self.apos.launder.integer(crop.height, 1, 1, 10000);\n        if (_.keys(crop).length < 4) {\n          return undefined;\n        }\n        return crop;\n      },\n      // This method return a default icon url if an attachment is missing\n      // to avoid template errors\n      getMissingAttachmentUrl() {\n        const defaultIconUrl = '/modules/@apostrophecms/attachment/img/missing-icon.svg';\n        self.apos.util.warn('Template warning: Impossible to retrieve the attachment url since it is missing, a default icon has been set. Please fix this ASAP!');\n        return defaultIconUrl;\n      },\n      // This method is available as a template helper: apos.attachment.url\n      //\n      // Given an attachment object,\n      // return the URL. If options.size is set, return the URL for\n      // that size (one-third, one-half, two-thirds, full). full is\n      // \"full width\" (1140px), not the original. For the original,\n      // pass `original`. If size is not specified, you will receive\n      // the `full` size if an image, otherwise the original.\n      //\n      // If the \"uploadfsPath\" option is true, an\n      // uploadfs path is returned instead of a URL.\n      url(attachment, options) {\n        options = options || {};\n        if (!attachment) {\n          return self.getMissingAttachmentUrl();\n        }\n        let path = '/attachments/' + attachment._id + '-' + attachment.name;\n        if (!options.uploadfsPath) {\n          path = self.uploadfs.getUrl() + path;\n        }\n        // Attachments can have \"one true crop,\" or a crop can be passed with the options.\n        // For convenience, be tolerant if options.crop is passed but doesn't\n        // actually have valid cropping properties\n        let c;\n        if (options.crop !== false) {\n          c = options.crop || attachment._crop || attachment.crop;\n          if (c && c.width) {\n            path += '.' + c.left + '.' + c.top + '.' + c.width + '.' + c.height;\n          }\n        }\n        let effectiveSize;\n        if (!self.isSized(attachment) || options.size === 'original') {\n          effectiveSize = false;\n        } else {\n          effectiveSize = options.size || 'full';\n        }\n        if (effectiveSize) {\n          path += '.' + effectiveSize;\n        }\n        return path + '.' + attachment.extension;\n      },\n      // This method is available as a template helper: apos.attachment.first\n      //\n      // Find the first attachment referenced within any object with\n      // attachments as possible properties or sub-properties.\n      //\n      // For best performance be reasonably specific; don't pass an entire page or piece\n      // object if you can pass page.thumbnail to avoid an exhaustive search, especially\n      // if the page has many relationships.\n      //\n      // Returns the first attachment matching the criteria.\n      //\n      // For ease of use, a null or undefined `within` argument is accepted.\n      //\n      // Examples:\n      //\n      // 1. In the body please\n      //\n      // apos.attachment.first(page.body)\n      //\n      // 2. Must be a PDF\n      //\n      // apos.attachment.first(page.body, { extension: 'pdf' })\n      //\n      // 3. May be any office-oriented file type\n      //\n      // apos.attachment.first(page.body, { group: 'office' })\n      //\n      // apos.image.first is a convenience wrapper for fetching only images.\n      //\n      // OPTIONS:\n      //\n      // You may specify `extension`, `extensions` (an array of extensions)\n      // or `group` to filter the results.\n      first(within, options) {\n        options = options ? _.clone(options) : {};\n        options.limit = 1;\n        return self.all(within, options)[0];\n      },\n      // This method is available as a template helper: apos.attachment.all\n      //\n      // Find all attachments referenced within an object, whether they are\n      // properties or sub-properties (via relationships, etc).\n      //\n      // For best performance be reasonably specific; don't pass an entire page\n      // or piece object if you can pass piece.thumbnail to avoid an exhaustive\n      // search, especially if the piece has many relationships.\n      //\n      // Returns an array of attachments, or an empty array if none are found.\n      //\n      // When available, the `description`, `credit`, `alt` and `creditUrl`\n      // properties of the containing piece are returned as `_description`,\n      // `_credit`, `_alt` and `_creditUrl`.\n      //\n      // For ease of use, a null or undefined `within` argument is accepted,\n      // resulting in an empty array.\n      //\n      // Examples:\n      //\n      // 1. In the body please\n      //\n      // apos.attachment.all(page.body)\n      //\n      // 2. Must be a PDF\n      //\n      // apos.attachment.all(page.body, { extension: 'pdf' })\n      //\n      // 3. May be any office-oriented file type\n      //\n      // apos.attachment.all(page.body, { group: 'office' })\n      //\n      // apos.image.all is a convenience wrapper for fetching only images.\n      //\n      // OPTIONS:\n      //\n      // You may specify `extension`, `extensions` (an array of extensions)\n      // or `group` to filter the results.\n      //\n      // If `options.annotate` is true, a `._urls` property is added to all\n      // image attachments wherever they are found in `within`, with\n      // subproperties for each image size name, including `original`.\n      // For non-images, a `._url` property is set.\n      all(within, options) {\n        options = options || {};\n        function test(attachment) {\n          if (!attachment || typeof attachment !== 'object') {\n            return false;\n          }\n          if (attachment.type !== 'attachment') {\n            return false;\n          }\n          if (options.extension) {\n            if (self.resolveExtension(attachment.extension) !== options.extension) {\n              return false;\n            }\n          }\n          if (options.group) {\n            if (attachment.group !== options.group) {\n              return false;\n            }\n          }\n          if (options.extensions) {\n            if (!_.contains(options.extensions, self.resolveExtension(attachment.extension))) {\n              return false;\n            }\n          }\n          return true;\n        }\n        const winners = [];\n        if (!within) {\n          return [];\n        }\n        self.apos.doc.walk(within, function (o, key, value, dotPath, ancestors) {\n          if (test(value)) {\n            if (o.credit) {\n              value._credit = o.credit;\n            }\n            if (o.creditUrl) {\n              value._creditUrl = o.creditUrl;\n            }\n            if (o.alt) {\n              value._alt = o.alt;\n            }\n            o[key] = value;\n\n            // If one of our ancestors has a relationship to the piece that\n            // immediately contains us, provide that as the crop. This ensures\n            // that cropping coordinates stored in an @apostrophecms/image widget\n            // are passed through when we make a simple call to\n            // apos.attachment.url with the returned object\n            for (let i = ancestors.length - 1; i >= 0; i--) {\n              const ancestor = ancestors[i];\n              const fields = ancestor.imagesFields && ancestor.imagesFields[o._id];\n              if (fields) {\n                value = _.clone(value);\n                value._crop = _.pick(fields, 'top', 'left', 'width', 'height');\n                value._focalPoint = _.pick(fields, 'x', 'y');\n                break;\n              }\n            }\n\n            if (options.annotate) {\n              // Add URLs\n              value._urls = {};\n              if (value.group === 'images') {\n                _.each(self.imageSizes, function (size) {\n                  value._urls[size.name] = self.url(value, { size: size.name });\n                });\n                value._urls.original = self.url(value, { size: 'original' });\n              } else {\n                value._url = self.url(value);\n              }\n            }\n            winners.push(value);\n          }\n        });\n        return winners;\n      },\n      // Iterates over all of the attachments that exist, processing\n      // up to `limit` attachments at any given time.\n      //\n      // If only 2 arguments are given the limit defaults to 1.\n      //\n      // For use only in command line tasks, migrations and other batch operations\n      // in which permissions are a complete nonissue. NEVER use on the front end.\n      //\n      // This method will `await` when calling your `each` function,\n      // which must return a promise (i.e. just use an `async` function).\n      //\n      // This method is designed to succeed even if `each` is a fairly slow\n      // operation and there are many attachments. It does not rely on keeping\n      // a single MongoDB cursor open for a long time.\n      async each(criteria, limit, each) {\n        if (!each) {\n          each = limit;\n          limit = 1;\n        }\n        // \"Why do we fetch a bucket of attachments at a time?\" File operations\n        // can be very slow. This can lead to MongoDB cursor timeouts in\n        // tasks like @apostrophecms/attachment:rescale. We need a robust solution that\n        // does not require keeping a MongoDB cursor open too long. -Tom\n        const batchSize = 100;\n        let lastId = '';\n        while (true) {\n          const docs = await self.db.find({ _id: { $gt: lastId } }).limit(batchSize).sort({ _id: 1 }).toArray();\n          if (!docs.length) {\n            return;\n          }\n          await Promise.map(docs, each, { concurrency: limit });\n          lastId = docs[docs.length - 1]._id;\n          if (docs.length < batchSize) {\n            // Don't waste an extra query\n            break;\n          }\n        }\n      },\n      // Returns true if, based on the provided attachment object,\n      // a valid focal point has been specified. Useful to avoid\n      // the default of `background-position: center center` if\n      // not desired.\n      hasFocalPoint(attachment) {\n        // No attachment object; tolerate for nunjucks friendliness\n        if (!attachment) {\n          return false;\n        }\n        // Specified directly on the attachment (it's not a relationship situation)\n        if (typeof attachment.x === 'number') {\n          return true;\n        }\n        // Specified on a `_focalPoint` property hoisted via a join\n        return attachment._focalPoint && typeof attachment._focalPoint.x === 'number';\n      },\n      // If a focal point is present on the attachment, convert it to\n      // CSS syntax for `background-position`. No trailing `;` is returned.\n      // The coordinates are in percentage terms.\n      focalPointToBackgroundPosition(attachment) {\n        if (!self.hasFocalPoint(attachment)) {\n          return 'center center';\n        }\n        const point = self.getFocalPoint(attachment);\n        return point.x + '% ' + point.y + '%';\n      },\n      // Returns an object with `x` and `y` properties containing the\n      // focal point chosen by the user, as percentages. If there is no\n      // focal point, null is returned.\n      getFocalPoint(attachment) {\n        if (!self.hasFocalPoint(attachment)) {\n          return null;\n        }\n        const x = attachment._focalPoint ? attachment._focalPoint.x : attachment.x;\n        const y = attachment._focalPoint ? attachment._focalPoint.y : attachment.y;\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Returns true if this type of attachment is croppable.\n      // Available as a template helper.\n      isCroppable(attachment) {\n        return attachment && self.croppable[self.resolveExtension(attachment.extension)];\n      },\n      // Returns true if this type of attachment is sized,\n      // i.e. uploadfs produces versions of it for each configured\n      // size, as it does with GIF, JPEG and PNG files.\n      //\n      // Accepts either an entire attachment object or an extension.\n      isSized(attachment) {\n        if ((typeof attachment) === 'object') {\n          return self.sized[self.resolveExtension(attachment.extension)];\n        } else {\n          return self.sized[self.resolveExtension(attachment)];\n        }\n      },\n      // Resolve a file extension such as jpeg to its canonical form (jpg).\n      // If no extension map is configured for this extension, return it as-is.\n      resolveExtension(extension) {\n        const group = self.getFileGroup(extension);\n        if (group) {\n          return group.extensionMaps[extension] || extension;\n        }\n        return extension;\n      },\n      // When the last doc that contains an attachment goes to the\n      // archive, its permissions should change to reflect that so\n      // it is no longer web-accessible to those who know the URL.\n      //\n      // If an attachment has no more archived *or* live docs associated\n      // with it, truly delete the attachment.\n      //\n      // This method is invoked after any doc is inserted, updated, archived\n      // or restored.\n      //\n      // If a document is truly deleted, call with the `{ deleted: true}` option.\n      async updateDocReferences(doc, options = {\n        deleted: false\n      }) {\n        const attachments = self.all(self.apos.util.clonePermanent(doc));\n        const ids = _.uniq(_.map(attachments, '_id'));\n        // Build an array of mongo commands to run. Each\n        // entry in the array is a 2-element array. Element 0\n        // is the criteria, element 1 is the command\n        const commands = [];\n        if (options.deleted) {\n          commands.push([\n            { _id: { $in: ids } },\n            {\n              $pull: {\n                docIds: doc._id,\n                archivedDocIds: doc._id\n              }\n            }\n          ]);\n        } else if (!doc.archived) {\n          commands.push([\n            { _id: { $in: ids } },\n            { $addToSet: { docIds: doc._id } }\n          ], [\n            { _id: { $in: ids } },\n            { $pull: { archivedDocIds: doc._id } }\n          ]);\n        } else {\n          commands.push([\n            { _id: { $in: ids } },\n            { $addToSet: { archivedDocIds: doc._id } }\n          ], [\n            { _id: { $in: ids } },\n            { $pull: { docIds: doc._id } }\n          ]);\n        }\n        commands.push([\n          {\n            $or: [\n              { archivedDocIds: { $in: [ doc._id ] } },\n              { docIds: { $in: [ doc._id ] } }\n            ],\n            _id: { $nin: ids }\n          },\n          {\n            $pull: {\n              archivedDocIds: doc._id,\n              docIds: doc._id\n            }\n          }\n        ], [\n          { _id: { $in: ids } },\n          { $set: { utilized: true } }\n        ]);\n        for (const command of commands) {\n          await self.db.updateMany(command[0], command[1]);\n        }\n        await self.alterAttachments();\n      },\n      // Enable/disable access in uploadfs to all attachments\n      // based on whether the documents containing them\n      // are in the archive or not. Specifically, if an attachment\n      // has been utilized at least once but no longer has\n      // any entries in `docIds` and `archived` is not yet true,\n      // it becomes web-inaccessible, `utilized` is set to false\n      // and `archived` is set to true. Similarly, if an attachment\n      // has entries in `docIds` but `archived` is true,\n      // it becomes web-accessible and archived becomes false.\n      //\n      // This method is invoked at the end of `updateDocReferences`\n      // and also at the end of the migration that adds `docIds`\n      // to legacy sites. You should not need to invoke it yourself.\n      //\n      // This method also handles actually deleting attachments\n      // if they have been utilized but are no longer associated\n      // with any document, not even in the archive, as will occur\n      // if the document is truly deleted.\n      async alterAttachments() {\n        await hide();\n        await show();\n        await _delete();\n        async function hide() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 0 },\n            archived: { $ne: true }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'disable');\n          }\n        }\n        async function show() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 1 },\n            archived: { $ne: false }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'enable');\n          }\n        }\n        async function _delete() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 0 },\n            'archivedDocIds.0': { $exists: 0 }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'remove');\n          }\n        }\n        async function alterOne(attachment, action) {\n          await self.alterAttachment(attachment, action);\n          if (action === 'remove') {\n            await self.db.removeOne({ _id: attachment._id });\n          } else {\n            await self.db.updateOne({\n              _id: attachment._id\n            }, {\n              $set: {\n                archived: (action === 'disable')\n              }\n            });\n          }\n        }\n      },\n      // Enable access, disable access, or truly remove the given attachment via uploadfs,\n      // based on whether `action` is `enable`, `disable`, or `remove`. If the attachment\n      // is an image, access to the size indicated by the `sizeAvailableInArchive` option\n      // (usually `one-sixth`) remains available except when removing. This operation is carried\n      // out across all sizes and crops.\n      async alterAttachment(attachment, action) {\n        let method = self.uploadfs[action];\n        method = Promise.promisify(method);\n        await original();\n        await crops();\n        // Handle the original image and its scaled versions\n        // here (\"original\" means \"not cropped\")\n        async function original() {\n          if ((action === 'enable') && attachment.archived === undefined) {\n            // Archive status not set at all yet means\n            // it'll be a live file as of this point,\n            // skip extra API calls\n            return;\n          }\n          let sizes;\n          if (![ 'gif', 'jpg', 'png' ].includes(self.resolveExtension(attachment.extension))) {\n            sizes = [ { name: 'original' } ];\n          } else {\n            sizes = self.imageSizes.concat([ { name: 'original' } ]);\n          }\n          for (const size of sizes) {\n            if ((action !== 'remove') && (size.name === self.sizeAvailableInArchive)) {\n              // This size is always kept accessible for preview\n              // in the media library\n              continue;\n            }\n            const path = self.url(attachment, {\n              uploadfsPath: true,\n              size: size.name\n            });\n            try {\n              await method(path);\n            } catch (e) {\n              // afterSave is not a good place for fatal errors\n              self.apos.util.warn(`Unable to ${action} ${path}, most likely already done`);\n            }\n          }\n        }\n        async function crops() {\n          if ((action === 'enable') && (attachment.archived === undefined)) {\n            // Archive status not set at all yet means\n            // it'll be a live file as of this point,\n            // skip extra API calls\n            return;\n          }\n          for (const crop of attachment.crops || []) {\n            await cropOne(crop);\n          }\n        }\n        async function cropOne(crop) {\n          for (const size of self.imageSizes.concat([ { name: 'original' } ])) {\n            if (size.name === self.sizeAvailableInArchive) {\n              // This size is always kept accessible for preview\n              // in the media library\n              continue;\n            }\n            const path = self.url(attachment, {\n              crop: crop,\n              uploadfsPath: true,\n              size: size.name\n            });\n            try {\n              await method(path);\n            } catch (e) {\n              // afterSave is not a good place for fatal errors\n              self.apos.util.warn(`Unable to ${action} ${path}, most likely already done`);\n            }\n          }\n        }\n      },\n      async migrateToDisabledFileKeyTask(argv) {\n        await Promise.promisify(self.uploadfs.migrateToDisabledFileKey)();\n      },\n      async migrateFromDisabledFileKeyTask(argv) {\n        await Promise.promisify(self.uploadfs.migrateFromDisabledFileKey)();\n      },\n      getBrowserData(req) {\n        return {\n          action: self.action,\n          fileGroups: self.fileGroups,\n          name: self.name,\n          uploadsUrl: self.uploadfs.getUrl(),\n          croppable: self.croppable,\n          sized: self.sized\n        };\n      },\n      // Middleware method used when only those with attachment privileges should be allowed to do something\n      canUpload(req, res, next) {\n        if (!self.apos.permission.can(req, 'upload-attachment')) {\n          res.statusCode = 403;\n          return res.send({\n            type: 'forbidden',\n            message: req.t('apostrophe:uploadForbidden')\n          });\n        }\n        next();\n      },\n      // Recompute the `docIds` and `archivedDocIds` arrays\n      // from scratch. Should only be needed by the\n      // one-time migration that fixes these for older\n      // databases, but can be run at any time via the\n      // `apostrophe-attachments:recompute-doc-references`\n      // task.\n      async recomputeAllDocReferences() {\n        const attachmentUpdates = {};\n        await self.apos.migration.eachDoc({}, 5, addAttachmentUpdates);\n        await attachments();\n        await self.alterAttachments();\n\n        async function addAttachmentUpdates(doc) {\n          const attachments = self.all(doc);\n          const ids = _.uniq(_.map(attachments, '_id'));\n          _.each(ids, function(id) {\n            attachmentUpdates[id] = attachmentUpdates[id] || {\n              $set: {\n                docIds: [],\n                archivedDocIds: []\n              }\n            };\n            if (doc.archived) {\n              attachmentUpdates[id].$set.archivedDocIds.push(doc._id);\n            } else {\n              attachmentUpdates[id].$set.docIds.push(doc._id);\n            }\n            attachmentUpdates[id].$set.utilized = true;\n          });\n        }\n\n        async function attachments(callback) {\n          const bulk = self.db.initializeUnorderedBulkOp();\n          let count = 0;\n          _.each(attachmentUpdates, function(updates, id) {\n            const c = bulk.find({ _id: id });\n            _.each(updates, function(update) {\n              c.updateOne(attachmentUpdates[id]);\n              count++;\n            });\n          });\n          if (!count) {\n            return;\n          }\n          return bulk.execute();\n        }\n      },\n      ...require('./lib/legacy-migrations')(self)\n    };\n  },\n  helpers: [\n    'url',\n    'first',\n    'all',\n    'hasFocalPoint',\n    'getFocalPoint',\n    'focalPointToBackgroundPosition',\n    'isCroppable'\n  ]\n};\n", "{\n  \"addContent\": \"Add Content\",\n  \"addItem\": \"Add Item\",\n  \"addWidgetType\": \"Add {{ label }}\",\n  \"admin\": \"Admin\",\n  \"altText\": \"Alt Text\",\n  \"altTextHelp\": \"Image description used for accessibility\",\n  \"any\": \"Any\",\n  \"apostropheAdminUi\": \"Apostrophe admin UI\",\n  \"applyToSubpages\": \"Apply to Subpages\",\n  \"arrayCancelDescription\": \"Do you want to discard changes to this list?\",\n  \"archive\": \"Archive\",\n  \"archiveImage\": \"Archive Image\",\n  \"archiveOnlyThisPage\": \"Archive only this page\",\n  \"archivePageAndSubpages\": \"Archive this page and all child pages\",\n  \"archiveType\": \"Archive {{ type }}\",\n  \"archiveTypeAffirmativeLabel\": \"Yes, archive {{ type }}\",\n  \"archiveTypeNote\": \"You are currently viewing the {{ type }} you want to archive. When it is archived you will be returned to the home page.\",\n  \"archived\": \"Archived\",\n  \"archivingDraftChildCount\": \"{{ count }} of those descendants have never been published.\",\n  \"archivingPageHasChild\": \"That page has one descendant.\",\n  \"archivingPageHasChild_plural\": \"That page has {{ count }} descendants.\",\n  \"archivingPageWillLoseDraftChanges\": \"Unpublished draft changes to this page and its descendants will be permanently deleted.\",\n  \"archivingWillDeleteDraftChildren\": \"Child pages that have never been published will be permanently deleted.\",\n  \"archivingWillLoseDraftChanges\": \"Unpublished draft changes to this {{ type }} will be permanently deleted.\",\n  \"archivingWillUnpublish\": \"This will also un-publish the {{ type }}.\",\n  \"areYouSure\": \"Are You Sure?\",\n  \"assetTypeBuildComplete\": \"\ud83d\udc4d {{ label }} is complete!\",\n  \"assetTypeBuilding\": \"\ud83e\uddd1\u200d\ud83d\udcbb Building the {{ label }}...\",\n  \"back\": \"Back\",\n  \"backToHome\": \"Back to Home\",\n  \"basics\": \"Basics\",\n  \"browseDocType\": \"Browse {{ type }}\",\n  \"cancel\": \"Cancel\",\n  \"cannotMoveArchive\": \"You cannot move the Archive\",\n  \"changed\": \"Changed\",\n  \"changesAwaitingApproval\": \"Changes to this document are awaiting approval by an admin or editor.\",\n  \"changesDiscarded\": \"Changes discarded\",\n  \"changesPublished\": \"Your changes have been published.\",\n  \"cannotChangeSlugPrefix\": \"cannot change the slug prefix\",\n  \"chooseDocType\": \"Choose {{ type }}\",\n  \"clear\": \"Clear\",\n  \"clearSelection\": \"Clear Selection\",\n  \"clone\": \"Clone\",\n  \"close\": \"Close\",\n  \"closeGlobal\": \"Close Global Site Settings\",\n  \"confirmArchive\": \"You are going to archive the {{ type }} {{ title }}.\",\n  \"confirmSettings\": \"Confirm Settings\",\n  \"contentArchived\": \"Content Archived\",\n  \"contentRestored\": \"Content Restored\",\n  \"contributor\": \"Contributor\",\n  \"create\": \"Create\",\n  \"credit\": \"Credit\",\n  \"creditUrl\": \"Credit URL\",\n  \"currentLocale\": \"Currently selected locale\",\n  \"cut\": \"Cut\",\n  \"copy\": \"Copy\",\n  \"dayjsRelativeTimeFormat\": \"apostrophe\",\n  \"dayjsTitleDateFormat\": \"ddd MMMM D [at] H:mma\",\n  \"dayjsCellDateFormat\": \"apostrophe\",\n  \"deduplicateSlugReserved\": \"The deduplicate- slug is reserved.\",\n  \"delete\": \"Delete\",\n  \"deleteDraft\": \"Delete Draft\",\n  \"deleteDraftAffirmativeLabel\": \"Yes, delete document\",\n  \"deleteDraftDescription\": \"Since {{ title }} has never been published, this will completely delete the document.\",\n  \"description\": \"Description\",\n  \"disabled\": \"Disabled\",\n  \"discardChanges\": \"Discard Changes\",\n  \"discardChangesPrompt\": \"Do you want to discard changes?\",\n  \"discardChangesToDocTypePrompt\": \"Do you want to discard changes to this {{ type }}?\",\n  \"discardImageChangesPrompt\": \"Do you want to discard changes to the active image?\",\n  \"discardDraft\": \"Discard Draft\",\n  \"discardDraftAffirmativeLabel\": \"Yes, discard changes\",\n  \"discardDraftDescription\": \"This will discard all changes since the document was last published.\",\n  \"dismissSubmission\": \"Dismiss Submission\",\n  \"dismissedSubmission\": \"Dismissed submission.\",\n  \"displayName\": \"Display Name\",\n  \"docInUseByAnother\": \"Another User Is Editing\",\n  \"docInUseBySelf\": \"Editing in Another Tab or Window\",\n  \"document\": \"document\",\n  \"documentExistsInLocales\": \"This document exists in these locales:\",\n  \"documentPublishedNoPreview\": \"Document published but could not navigate to a preview.\",\n  \"documentSaved\": \"Document saved.\",\n  \"doesNotExistYet\": \"Does Not Exist Yet\",\n  \"doesNotExistYetDescription\": \"The document does not exist yet as {{ mode }} in the {{ locale }} locale.\",\n  \"download\": \"Download\",\n  \"draft\": \"Draft\",\n  \"draftDeleted\": \"Draft Deleted\",\n  \"draftDiscarded\": \"Draft Discarded\",\n  \"draftSaved\": \"Draft saved\",\n  \"draftSavedNoPreview\": \"Draft saved but could not navigate to a preview.\",\n  \"dropMedia\": \"Drop new media here\",\n  \"duplicate\": \"Duplicate...\",\n  \"edit\": \"Edit\",\n  \"editType\": \"Edit {{ type }}\",\n  \"editor\": \"Editor\",\n  \"editRelationshipFor\": \"Edit Relationship for {{ title }}\",\n  \"editWidget\": \"Edit Widget\",\n  \"editWidgetForeignTooltip\": \"Click to edit this content in its natural context\",\n  \"editWidgetType\": \"Edit {{ label }}\",\n  \"email\": \"Email\",\n  \"emptyRichTextWidget\": \"Empty Rich Text Widget\",\n  \"enabled\": \"Enabled\",\n  \"error\": \"An error occurred\",\n  \"errorCount\": \"{{ count }} error remaining\",\n  \"errorCount_plural\": \"{{ count }} errors remaining\",\n  \"errorCreatingNewContent\": \"Error while creating new, empty content.\",\n  \"errorWhileRestoring\": \"An error occurred while restoring the previously published version.\",\n  \"errorWhileUnpublishing\": \"An error occurred while unpublishing the document.\",\n  \"errorWhileArchiving\": \"An error occurred while moving the document to the archive.\",\n  \"errorWhileDismissing\": \"An Error Occurred While Dismissing\",\n  \"errorWhileDismissingDescription\": \"An error occurred while dismissing the submission.\",\n  \"errorWhilePublishing\": \"An Error Occurred While Publishing\",\n  \"errorWhilePublishingDocument\": \"An error occurred while publishing the document.\",\n  \"errorWhilePublishingParentPage\": \"An error occurred while publishing a parent page.\",\n  \"errorWhileRestoringArchive\": \"An error occurred while restoring the document from the archive.\",\n  \"errorWhileRestoringPrevious\": \"An error occurred while restoring the previously published version.\",\n  \"errorWhileSubmitting\": \"An Error Occurred While Submitting\",\n  \"errorWhileSubmittingDescription\": \"An error occurred while submitting the document.\",\n  \"errorPageMessage\": \"An error has occurred\",\n  \"errorPageStatusCode\": \"500\",\n  \"errorPageTitle\": \"An error has occurred\",\n  \"everythingElse\": \"Everything Else\",\n  \"exit\": \"Exit\",\n  \"fetchPublishedVersionFailed\": \"An error occurred fetching the published version of the document.\",\n  \"fieldHasUnpublishedChanges\": \"This field has unpublished changes\",\n  \"file\": \"File\",\n  \"fileTag\": \"File Tag\",\n  \"fileTags\": \"File Tags\",\n  \"fileTypeNotAccepted\": \"File type was not accepted. Allowed extensions: {{ extensions }}\",\n  \"files\": \"Files\",\n  \"filter\": \"Filter\",\n  \"filterByTag\": \"Filter by Tag\",\n  \"filterResultsByType\": \"Filter Results By Type\",\n  \"findOrAddTag\": \"Find an existing tag or add a new one\",\n  \"globalDocLabel\": \"Global Content\",\n  \"goToPage\": \"Go to page {{ page }}\",\n  \"guest\": \"Guest\",\n  \"hideInNavigation\": \"Hide in Navigation\",\n  \"home\": \"Home\",\n  \"image\": \"Image\",\n  \"imageFile\": \"Image File\",\n  \"imageTag\": \"Image Tag\",\n  \"imageTags\": \"Image Tags\",\n  \"images\": \"Images\",\n  \"insertAndRedirect\": \"{{ saveLabel }} {{ typeLabel }} and be redirected to the {{ typeLabel }}.\",\n  \"insertAndReturn\": \"{{ saveLabel }} and return to the {{ typeLabel }} listing.\",\n  \"insertAndNew\": \"{{ saveLabel }} {{ typeLabel }} and create a new one.\",\n  \"lastEdited\": \"Last Edited\",\n  \"leavePageDescription\": \"The content you're trying to edit belongs to another document and must be edited there.\\nChanges made to {{ oldTitle }} are saved automatically.\",\n  \"leavePageHeading\": \"Leave {{ oldTitle }} to edit {{ newTitle }}?\",\n  \"listJoiner\": \", \",\n  \"live\": \"Live\",\n  \"lastUpdatedBy\": \"Last saved on {{ updatedAt }} <br /> by {{ updatedBy }}\",\n  \"loadDocFailed\": \"The requested document was not found.\",\n  \"locale\": \"Locale\",\n  \"localize\": \"Localize...\",\n  \"localizeContent\": \"Localize Content\",\n  \"localized\": \"Localized the {{ type }} {{ title }} to {{ locale }}\",\n  \"localizeAllRelated\": \"Localize all related documents and overwrite existing documents\",\n  \"localizeNewRelated\": \"Localize new related documents\",\n  \"localizingBusy\": \"Localizing Content\",\n  \"login\": \"Login\",\n  \"loginDisabled\": \"Login Disabled\",\n  \"loginPageBothRequired\": \"Both the username and the password are required.\",\n  \"loginPageBadCredentials\": \"Your credentials are incorrect, or there is no such user\",\n  \"loginPageTitle\": \"Login\",\n  \"loginRequired\": \"Login Required\",\n  \"logOut\": \"Log Out\",\n  \"logOutNotLoggedIn\": \"You were not logged in.\",\n  \"manageDocType\": \"Manage {{ type }}\",\n  \"manageDraftSubmissions\": \"Manage Draft Submissions\",\n  \"managePages\": \"Manage Pages\",\n  \"mediaUploadViaDrop\": \"Drop \u2019em when you\u2019re ready\",\n  \"mediaUploadViaExplorer\": \"Or click to open the file explorer\",\n  \"moreOptions\": \"More Options\",\n  \"moreOperations\": \"More Operations\",\n  \"multipleEditors\": \"MultipleEditors\",\n  \"newDocType\": \"New {{ type }}\",\n  \"newItem\": \"New item\",\n  \"newPage\": \"New Page\",\n  \"newSearch\": \"New Search\",\n  \"next\": \"Next\",\n  \"nextPage\": \"Next Page\",\n  \"no\": \"No\",\n  \"noDraftSubmissions\": \"No Draft Submissions to Manage\",\n  \"noItemsSelected\": \"No Items Selected\",\n  \"noJustSwitchLocales\": \"No, just switch locales\",\n  \"noLongerPublished\": \"No longer published.\",\n  \"noMediaFound\": \"No media found\",\n  \"noNewRelatedDocuments\": \"Although this document has related documents, none of them are new to the locales you have selected.\",\n  \"none\": \"None\",\n  \"notFound\": \"Not found.\",\n  \"notFoundPageMessage\": \"We can't seem to find the page you're looking for.\",\n  \"notFoundPageStatusCode\": \"404\",\n  \"notFoundPageTitle\": \"404 - Page not found\",\n  \"notInLocale\": \"The current page doesn\u2019t exist in {{ label }}. Localize the version from {{ currentLocale }}?\",\n  \"noTypeFound\": \"No {{ type }} Found\",\n  \"parentNotLocalized\": \"Localize the parent page first\",\n  \"notYetPublished\": \"This document hasn't been published yet.\",\n  \"nudgeDown\": \"Nudge Down\",\n  \"nudgeUp\": \"Nudge Up\",\n  \"office\": \"Office\",\n  \"openGlobal\": \"Open Global Site Settings\",\n  \"page\": \"Page\",\n  \"pageDoesNotExistYet\": \"Page Does Not Exist Yet\",\n  \"pageDoesNotExistYetDescription\": \"The page that provides a listing for this type of piece is not yet available as {{ mode }} in the {{ locale }} locale.\",\n  \"pageIsParked\": \"This page is parked and cannot be moved\",\n  \"pageNumber\": \"Page {{ number }}\",\n  \"pageTitle\": \"Page Title\",\n  \"pages\": \"Pages\",\n  \"piecePermissionsIntro\": \"Pieces are structured content. They are often used for content like articles, events, products, categories, etc.\",\n  \"piecePermissionsPieceTypeList\": \"Pieces for this site include:\",\n  \"richTextAlignCenter\": \"Align Center\",\n  \"richTextAlignJustify\": \"Align Justify\",\n  \"richTextAlignLeft\": \"Align Left\",\n  \"richTextAlignRight\": \"Align Right\",\n  \"richTextBlockquote\": \"Blockquote\",\n  \"richTextBold\": \"Bold\",\n  \"richTextBulletedList\": \"Bulleted List\",\n  \"richTextCodeBlock\": \"Code Block\",\n  \"richTextHighlight\": \"Mark\",\n  \"richTextHorizontalRule\": \"Horizontal Rule\",\n  \"richTextItalic\": \"Italic\",\n  \"richTextLink\": \"Link\",\n  \"richTextParagraph\": \"Paragraph (P)\",\n  \"richTextH2\": \"Heading 2 (H2)\",\n  \"richTextH3\": \"Heading 3 (H3)\",\n  \"richTextH4\": \"Heading 4 (H4)\",\n  \"richTextOrderedList\": \"Ordered List\",\n  \"richTextRedo\": \"Redo\",\n  \"richTextStrikethrough\": \"Strike\",\n  \"richTextStyles\": \"Styles\",\n  \"richTextUnderline\": \"Underline\",\n  \"richTextUndo\": \"Undo\",\n  \"richTextStyleConfigWarning\": \"Misconfigured rich text style: label: {{ label }}, {{ tag }}\",\n  \"password\": \"Password\",\n  \"passwordResetRequest\": \"Your request to reset your password on {{ site }}\",\n  \"pasteWidget\": \"Paste {{ widget }}\",\n  \"pending\": \"Pending\",\n  \"pendingUpdates\": \"Pending Updates\",\n  \"permissions\": \"Permissions\",\n  \"pieceContent\": \"Piece Content\",\n  \"preview\": \"Preview\",\n  \"previewTooltip\": \"Toggle Preview Mode\",\n  \"provideButtonLabel\": \"Provide a Button Label\",\n  \"previousPage\": \"Previous Page\",\n  \"public\": \"Public\",\n  \"modernBuild\": \"public-facing modern JavaScript and Sass\",\n  \"ie11Build\": \"public-facing modern JavaScript and Sass (IE11 build)\",\n  \"publish\": \"Publish\",\n  \"publishBeforeUsingTooltip\": \"Publish this content before using it in a relationship\",\n  \"published\": \"Published\",\n  \"rawCssAndJs\": \"raw CSS and JS\",\n  \"rawHtml\": \"Raw HTML\",\n  \"rawHtmlCode\": \"Raw HTML (Code)\",\n  \"rawHtmlCodeHelp\": \"Be careful when embedding third-party code, as it can break the website editing functionality. If a page becomes unusable, add \\\"?safe_mode=1\\\" to the URL to make it work temporarily without the problem code being rendered.\",\n  \"redo\": \"Redo\",\n  \"redoTooltip\": \"Redo Change\",\n  \"redoTooltipNoChanges\": \"No Changes to Redo\",\n  \"redoFailed\": \"The operation could not be redone.\",\n  \"remove\": \"Remove\",\n  \"removeItem\": \"Remove item\",\n  \"removeLink\": \"Remove Link\",\n  \"replace\": \"Replace\",\n  \"refreshForRawHtml\": \"Refresh the page to view raw HTML.\",\n  \"relatedDocOverwriteWarning\": \"If a related document exists in the destination locale, it will be overwritten by the incoming document. This may result in loss of translation work.\",\n  \"relatedDocSettings\": \"Related Documents Settings\",\n  \"relatedDocTypesToLocalize\": \"Related document types to localize\",\n  \"relatedDocsOnly\": \"Related documents only\",\n  \"relatedDocsDefinition\": \"Related documents are documents referenced by this document. This typically includes images, content defined by relationships, etc.\",\n  \"restore\": \"Restore\",\n  \"resolveErrorsBeforeSaving\": \"Resolve errors before saving.\",\n  \"resolveErrorsFirst\": \"Resolve errors first.\",\n  \"restoreOnlyThisPage\": \"Restore only this page\",\n  \"restoreThisPageAndSubpages\": \"Restore this page and subpages\",\n  \"restoreType\": \"Restore {{ type }}\",\n  \"restoreTypeAffirmativeLabel\": \"Yes, restore {{ type }}\",\n  \"restoredPrevious\": \"Restored previously published version.\",\n  \"resumeEditing\": \"Resume Editing\",\n  \"returnToPage\": \"Return to {{ label }}\",\n  \"retryingSaveDocument\": \"Retrying save document...\",\n  \"richText\": \"Rich Text\",\n  \"safeModeActive\": \"Running in safe mode, not showing raw HTML.\",\n  \"save\": \"Save\",\n  \"saveType\": \"Save {{ type }}\",\n  \"saveDraft\": \"Save Draft\",\n  \"saveDraftDescription\": \"Save as a draft to publish later.\",\n  \"saveDraftAndCreateNew\": \"Save Draft and Create New\",\n  \"saveDraftAndCreateNewDescription\": \"Save as a draft and create a new {{ typeLabel }}.\",\n  \"saveDraftAndPreview\": \"Save Draft and Preview\",\n  \"saveDraftAndPreviewDescription\": \"Save as a draft and preview the {{ typeLabel }}.\",\n  \"savingDocument\": \"Saving document...\",\n  \"searchDocType\": \"Search {{ type }}\",\n  \"searchLocales\": \"Search Locales\",\n  \"searchLocalesPlaceholder\": \"Search locales...\",\n  \"select\": \"Select\",\n  \"selectedMenuItem\": \"\u2713 {{ label }}\",\n  \"selectAll\": \"Select All\",\n  \"selectContent\": \"Select Content\",\n  \"selectContentToLocalize\": \"What content do you want to localize?\",\n  \"selectPage\": \"Select Page\",\n  \"selectOneLabel\": \"Select {{ typeLabel }}\",\n  \"selectManyLabel\": \"Select {{ typeLabel }}\",\n  \"selectLocales\": \"Select Locales\",\n  \"sentenceJoiner\": \" \",\n  \"visibilityHelp\": \"Select whether this content is public or private\",\n  \"slug\": \"Slug\",\n  \"slugInUse\": \"Slug already in use\",\n  \"someoneElseTookControl\": \"{{ who }} took control of this document in another tab or window. A document can only be edited in one place at a time.\",\n  \"submit\": \"Submit\",\n  \"submitted\": \"Submitted\",\n  \"submittedDraft\": \"Submitted Draft\",\n  \"submittedForReview\": \"Submitted to Admins and Editors for review\",\n  \"submitUpdate\": \"Submit Update\",\n  \"suggestionsHeader\": \"Try one of these suggestions:\",\n  \"switchLocalesAndLocalizePage\": \"Switch locales and localize page to {{ label }}?\",\n  \"tags\": \"Tags\",\n  \"tagYourImages\": \"Tag your images to make searching and filtering the media manager easier\",\n  \"takeActionAndCreateNew\": \"{{ saveLabel }} and View\",\n  \"takeActionAndView\": \"{{ saveLabel }} and View\",\n  \"takeControlFromOther\": \"{{ who }} is editing that document. Do you want to take control?\",\n  \"takeControlFromSelf\": \"You are editing that document in another tab or window. Do you want to take control in this tab?\",\n  \"thereAreActiveChanges\": \"There are active changes to this document.\",\n  \"thereWasAnIssueLocalizing\": \"There was an issue localizing some content:\",\n  \"title\": \"Title\",\n  \"thisDocument\": \"This document\",\n  \"thisDocumentAndRelated\": \"This document and related documents\",\n  \"toggleEditMode\": \"Toggle Edit Mode\",\n  \"toggleSection\": \"Toggle section\",\n  \"toggleSelectionOf\": \"Toggle selection of {{ title }}\",\n  \"treeError\": \"An error occurred while updating the page tree.\",\n  \"type\": \"Type\",\n  \"typeWithCount\": \"{{ type }} ({{ count }})\",\n  \"unableToSwitchModes\": \"Unable to switch modes.\",\n  \"undo\": \"Undo\",\n  \"undoTooltip\": \"Undo Change\",\n  \"undoTooltipNoChanges\": \"No Changes to Undo\",\n  \"undoFailed\": \"The operation could not be undone.\",\n  \"undoPublish\": \"Undo Publish\",\n  \"ungrouped\": \"Ungrouped\",\n  \"ungroupedWidgets\": \"Ungrouped Widgets\",\n  \"unpublish\": \"Unpublish\",\n  \"unpublishedParent\": \"One or more parent pages have not been published\",\n  \"unpublishedParentDescription\": \"To publish this page, you must also publish the following pages: {{ unpublishedParents }}.\\nDo you want to do that now?\",\n  \"unsavedChanges\": \"Unsaved Changes\",\n  \"update\": \"Update\",\n  \"updateAndRedirect\": \"{{ saveLabel }} updates and be redirected to the {{ typeLabel }}.\",\n  \"updateAndReturn\": \"{{ saveLabel }} updates and return to the {{ typeLabel }} listing.\",\n  \"updateAndNew\": \"{{ saveLabel }} updates and create a new {{ typeLabel }}.\",\n  \"updated\": \"Updated\",\n  \"uploadError\": \"Upload Error\",\n  \"uploadForbidden\": \"You do not have permission to upload a file\",\n  \"uploaded\": \"Successfully uploaded a file\",\n  \"uploaded_plural\": \"Successfully uploaded {{ count }} files\",\n  \"uploadedMediaPlaceholder\": \"Uploaded media will appear here\",\n  \"uploading\": \"Uploading {{ name }}\",\n  \"user\": \"User\",\n  \"username\": \"Username\",\n  \"users\": \"Users\",\n  \"utility\": \"Utility\",\n  \"video\": \"Video\",\n  \"videoUrl\": \"Video URL\",\n  \"videoUrlHelp\": \"Enter the URL for a media source you wish to embed (e.g., YouTube, Vimeo, or other hosted video URL).\",\n  \"view\": \"View\",\n  \"visibility\": \"Visibility\",\n  \"visibilityLabel\": \"Who can view this?\",\n  \"willMoveImageToArchive\": \"This will move the image to the archive.\",\n  \"yes\": \"Yes\",\n  \"yesLocalizeAndSwitchLocales\": \"Yes, localize this page and switch locales\",\n  \"youTookControl\": \"You took control of this document in another tab or window. A document can only be edited in one place at a time.\"\n}\n", "{\n  \"name\": \"apostrophe\",\n  \"version\": \"3.3.1\",\n  \"description\": \"The Apostrophe Content Management System.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"pretest\": \"npm run lint && npm audit\",\n    \"test\": \"nyc --reporter=html mocha -t 10000\",\n    \"lint\": \"eslint . && node scripts/lint-i18n\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:apostrophecms/apostrophe.git\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"keywords\": [\n    \"apostrophe\",\n    \"apostrophe-cms\",\n    \"apostrophecms\",\n    \"cms\",\n    \"node cms\",\n    \"headless cms\",\n    \"content management system\"\n  ],\n  \"author\": \"Apostrophe Technologies, Inc.\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@apostrophecms/vue-color\": \"^2.8.2\",\n    \"@babel/core\": \"^7.14.3\",\n    \"@babel/preset-env\": \"^7.14.4\",\n    \"@tiptap/extension-highlight\": \"^2.0.0-beta.13\",\n    \"@tiptap/extension-link\": \"^2.0.0-beta.17\",\n    \"@tiptap/extension-text-align\": \"^2.0.0-beta.17\",\n    \"@tiptap/extension-text-style\": \"^2.0.0-beta.13\",\n    \"@tiptap/extension-underline\": \"^2.0.0-beta.14\",\n    \"@tiptap/starter-kit\": \"^2.0.0-beta.75\",\n    \"@tiptap/vue-2\": \"^2.0.0-beta.34\",\n    \"autoprefixer\": \"^10.2.4\",\n    \"babel-loader\": \"^8.2.2\",\n    \"bluebird\": \"^3.7.2\",\n    \"body-parser\": \"^1.18.2\",\n    \"boring\": \"^1.1.1\",\n    \"broadband\": \"^1.1.0\",\n    \"cheerio\": \"^1.0.0-rc.10\",\n    \"chokidar\": \"^3.5.2\",\n    \"common-tags\": \"^1.8.0\",\n    \"connect-mongo\": \"^3.0.0\",\n    \"connect-multiparty\": \"^2.1.1\",\n    \"cookie-parser\": \"^1.4.5\",\n    \"core-js\": \"~3.14.0\",\n    \"cors\": \"^2.8.5\",\n    \"credential\": \"^2.0.0\",\n    \"css-loader\": \"^5.2.4\",\n    \"cuid\": \"^1.3.8\",\n    \"dayjs\": \"^1.9.8\",\n    \"debounce-async\": \"0.0.2\",\n    \"deep-get-set\": \"^1.1.1\",\n    \"eslint-plugin-promise\": \"^5.1.0\",\n    \"express\": \"^4.16.4\",\n    \"express-bearer-token\": \"^2.4.0\",\n    \"express-session\": \"^1.17.1\",\n    \"form-data\": \"^4.0.0\",\n    \"fs-extra\": \"^7.0.1\",\n    \"glob\": \"^5.0.15\",\n    \"he\": \"^0.5.0\",\n    \"html-to-text\": \"^5.1.1\",\n    \"i18next\": \"^20.3.2\",\n    \"i18next-http-middleware\": \"^3.1.4\",\n    \"import-fresh\": \"^3.3.0\",\n    \"is-wsl\": \"^2.2.0\",\n    \"klona\": \"^2.0.4\",\n    \"launder\": \"^1.4.0\",\n    \"lodash\": \"^4.17.20\",\n    \"mini-css-extract-plugin\": \"^1.6.0\",\n    \"minimatch\": \"^3.0.4\",\n    \"mkdirp\": \"^0.5.5\",\n    \"mongodb\": \"^3.6.6\",\n    \"node-fetch\": \"^2.6.1\",\n    \"nodemailer\": \"^6.6.1\",\n    \"nunjucks\": \"^3.2.1\",\n    \"oembetter\": \"^1.0.1\",\n    \"passport\": \"^0.3.2\",\n    \"passport-local\": \"^1.0.0\",\n    \"path-to-regexp\": \"^1.8.0\",\n    \"performance-now\": \"^2.1.0\",\n    \"postcss-loader\": \"^5.0.0\",\n    \"prompts\": \"^2.4.1\",\n    \"qs\": \"^6.10.1\",\n    \"regenerator-runtime\": \"^0.13.7\",\n    \"regexp-quote\": \"0.0.0\",\n    \"resolve\": \"^1.19.0\",\n    \"resolve-from\": \"^5.0.0\",\n    \"sanitize-html\": \"^2.0.0\",\n    \"sass\": \"^1.34.1\",\n    \"sass-loader\": \"^10.1.1\",\n    \"server-destroy\": \"^1.0.1\",\n    \"sluggo\": \"^0.3.0\",\n    \"stylelint\": \"^13.13.0\",\n    \"stylelint-config-standard\": \"^20.0.0\",\n    \"stylelint-declaration-strict-value\": \"^1.7.12\",\n    \"stylelint-order\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.1.1\",\n    \"tinycolor2\": \"^1.4.2\",\n    \"tough-cookie\": \"^4.0.0\",\n    \"underscore.string\": \"^3.3.4\",\n    \"uploadfs\": \"^1.17.1\",\n    \"v-tooltip\": \"^2.0.3\",\n    \"vue\": \"^2.6.14\",\n    \"vue-click-outside-element\": \"^1.0.13\",\n    \"vue-loader\": \"^15.9.6\",\n    \"vue-material-design-icons\": \"^4.9.0\",\n    \"vue-style-loader\": \"^4.1.2\",\n    \"vue-template-compiler\": \"^2.6.14\",\n    \"vuedraggable\": \"^2.24.3\",\n    \"webpack\": \"~5.44.0\",\n    \"webpack-merge\": \"^5.7.3\",\n    \"xregexp\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"^10.1.0\",\n    \"eslint\": \"^7.25.0\",\n    \"eslint-config-apostrophe\": \"^3.4.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-vue\": \"^7.9.0\",\n    \"mocha\": \"^7.1.2\",\n    \"nyc\": \"^15.1.0\",\n    \"replace-in-file\": \"^6.1.0\",\n    \"vue-eslint-parser\": \"^7.1.1\",\n    \"webpack-bundle-analyzer\": \"^3.9.0\"\n  },\n  \"browserslist\": [\n    \"ie >= 10\"\n  ]\n}\n"], "fixing_code": ["# Changelog\n\n## 3.3.2 - 2021-09-07\n\n### Security\n\nUsers with permission to upload SVG files were previously able to do so even if they contained XSS attacks. In Apostrophe 3.x, the general public so far never has access to upload SVG files, so the risk is minor but could be used to phish access from an admin user uploading a file. While Apostrophe typically displays SVG files using the `img` tag, which ignores XSS vectors, an XSS attack could still be carried out if the image were opened directly via the Apostrophe media library's convenience link for doing so. Beginning in version 3.3.2 all SVG uploads are sanitized via DOMPurify to remove XSS attack vectors. In addition, all existing SVG attachments not already validated are passed through DOMPurify during a migration upon deployment of version 3.3.2. \n\n## 3.3.1 - 2021-09-01\n\n### Fixes\n\n* In some situations it was possible for a relationship with just one selected document to list that document several times in the returned result, resulting in very large responses.\n* Permissions roles UI localized correctly.\n* Do not crash on startup if users have a relationship to another type. This was caused by the code that checks whether any users exist to present a warning to developers. That code was running too early for relationships to work due to event timing issues.\n\n## 3.3.0 - 2021-08-30\n\n### Fixes\n\n* Addresses the page jump when using the in-context undo/redo feature. The page will immediately return users to their origin scroll position after the content refreshes.\n* Resolves slug-related bug when switching between images in the archived view of the media manager. The slug field was not taking into account the double slug prefix case.\n* Fixes migration task crash when parking new page. Thanks to [Miro Yovchev](https://www.corllete.com/) for this fix.\n* Fixes incorrect month name in `AposCellDate`, which can be optionally used in manage views of pieces. Thanks to [Miro Yovchev](https://www.corllete.com/) for this fix.\n\n### Adds\n\n* This version achieves localization (l10n) through a rich set of internationalization (i18n) features. For more information, [see the documentation](https://v3.docs.apostrophecms.org/).\n* There is support for both static string localization and dynamic content localization.\n* The home page, other parked pages, and the global document are automatically replicated to all configured locales at startup. Parked properties are refreshed if needed. Other pages and pieces are replicated if and when an editor chooses to do so.\n* An API route has been added for voluntary replication, i.e. when deciding a document should exist in a second locale, or desiring to overwrite the current draft contents in locale `B` with the draft contents of locale `A`.\n* Locales can specify `prefix` and `hostname` options, which are automatically recognized by middleware that removes the prefix dynamically where appropriate and sets `req.locale`. In 3.x this works more like the global site `prefix` option. This is a departure from 2.x which stored the prefix directly in the slug, creating maintenance issues.\n* Locales are stateless: they are never recorded in the session. This eliminates many avenues for bugs and bad SEO. However, this also means the developer must fully distinguish them from the beginning via either `prefix` or `hostname`. A helpful error message is displayed if this is not the case.\n* Switching locales preserves the user's editing session even if on separate hostnames. To enable this, if any locales have hostnames, all configured locales must have hostnames and/or baseUrl must be set for those that don't.\n* An API route has been added to discover the locales in which a document exists. This provides basic information only for performance (it does not report `title` or `_url`).\n* Editors can \"localize\" documents, copying draft content from one locale to another to create a corresponding document in a different locale. For convenience related documents, such as images and other pieces directly referenced by the document's structure, can be localized at the same time. Developers can opt out of this mechanism for a piece type entirely, check the box by default for that type, or leave it as an \"opt-in\" choice.\n* The `@apostrophecms/i18n` module now uses `i18next` to implement static localization. All phrases in the Vue-based admin UI are passed through `i18next` via `this.$t`, and `i18next` is also available via `req.t()` in routes and `__t()` in templates. Apostrophe's own admin UI phrases are in the `apostrophe` namespace for a clean separation. An array of locale codes, such as `en` or `fr` or `en-au`, can be specified using the `locales` option to the `@apostrophecms/i18n` module. The first locale is the default, unless the `defaultLocale` option is set. If no locales are set, the locale defaults to `en`. The `i18next-http-middleware` locale guesser is installed and will select an available locale if possible, otherwise it will fall back to the default.\n* In the admin UI, `v-tooltip` has been extended as `v-apos-tooltip`, which passes phrases through `i18next`.\n* Developers can link to alternate locales by iterating over `data.localizations` in any page template. Each element always has `locale`, `label` and `homePageUrl` properties. Each element also has an `available` property (if true, the current context document is available in that locale), `title` and a small number of other document properties are populated, and `_url` redirects to the context document in that locale. The current locale is marked with `current: true`.\n* To facilitate adding interpolated values to phrases that are passed as a single value through many layers of code, the `this.$t` helper provided in Vue also accepts an object argument with a `key` property. Additional properties may be used for interpolation.\n* `i18next` localization JSON files can be added to the `i18n` subdirectory of *any* module, as long as its `i18n` option is set. The `i18n` object may specify `ns` to give an `i18next` namespace, otherwise phrases are in the default namespace, used when no namespace is specified with a `:` in an `i18next` call. The default namespace is yours for use at project level. Multiple modules may contribute to the same namespace.\n* If `APOS_DEBUG_I18N=1` is set in the environment, the `i18next` debug flag is activated. For server-side translations, i.e. `req.t()` and `__t()`, debugging output will appear on the server console. For browser-side translations in the Vue admin UI, debugging output will appear in the browser console.\n* If `APOS_SHOW_I18N=1` is set in the environment, all phrases passed through `i18next` are visually marked, to make it easier to find those that didn't go through `i18next`. This does not mean translations actually exist in the JSON files. For that, review the output of `APOS_DEBUG_I18N=1`.\n* There is a locale switcher for editors.\n* There is a backend route to accept a new locale on switch.\n* A `req.clone(properties)` method is now available. This creates a clone of the `req` object, optionally passing in an object of properties to be set. The use of `req.clone` ensures the new object supports `req.get` and other methods of a true `req` object. This technique is mainly used to obtain a new request object with the same privileges but a different mode or locale, i.e. `mode: 'published'`.\n* Fallback wrappers are provided for the `req.__()`, `res.__()` and `__()` localization helpers, which were never official or documented in 3.x but may be in use in projects ported from 2.x. These wrappers do not localize but do output the input they are given along with a developer warning. You should migrate them to use `req.t()` (in server-side javascript) or `__t()` (Nunjucks templates).\n\n### Changes\n\n* Bolsters the CSS that backs Apostrophe UI's typography to help prevent unintended style leaks at project-level code.\n* Removes the 2.x series changelog entries. They can be found in the 2.0 branch in Github.\n\n## 3.2.0 - 2021-08-13\n\n### Fixes\n\n* `req.hostname` now works as expected when `trustProxy: true` is passed to the `@apostrophecms/express` module.\n* Apostrophe loads modules from npm if they exist there and are configured in the `modules` section of `app.js`. This was always intended only as a way to load direct, intentional dependencies of your project. However, since npm \"flattens\" the dependency tree, dependencies of dependencies that happen to have the same name as a project-level Apostrophe module could be loaded by default, crashing the site or causing unexpected behavior. So beginning with this release, Apostrophe scans `package.json` to verify an npm module is actually a dependency of the project itself before attempting to load it as an Apostrophe module.\n* Fixes the reference to sanitize-html defaults in the rich text widget.\n* Fixes the `toolbarToAllowedStyles` method in the rich text widget, which was not returning any configuration.\n* Fixes the broken text alignment in rich text widgets.\n* Adds a missing npm dependency on `chokidar`, which Apostrophe and Nunjucks use for template refreshes. In most environments this worked anyway due to an indirect dependency via the `sass` module, but for stability Apostrophe should depend directly on any npm module it uses.\n* Fixes the display of inline range inputs, notably broken when using Palette\n* Fixes occasional unique key errors from migrations when attempting to start up again with a site that experienced a startup failure before inserting its first document.\n* Requires that locale names begin with a letter character to ensure order when looping over the object entries.\n* Unit tests pass in MongoDB 5.x.\n\n### Adds\n* Adds Cut and Paste to area controls. You can now Cut a widget to a virtual clipboard and paste it in suitable areas. If an area\ncan include the widget on the clipboard, a special Clipboard widget will appear in area's Add UI. This works across pages as well.\n\n### Changes\n* Apostrophe's Global's UI (the @apostrophecms/global singleton has moved from the admin bar's content controls to\nthe admin utility tray under a cog icon.\n* The context bar's document Edit button, which was a cog icon, has been rolled into the doc's context menu.\n\n## 3.1.3 - 2021-07-16\n\n### Fixes\n\n* Hotfix for an incompatibility between `vue-loader` and `webpack` 5.45.0 which causes a crash at startup in development, or asset build time in production. We have temporarily pinned our dependency to `webpack` 5.44.x. We are [contributing to the discussion around the best long-term fix for vue-loader](https://github.com/vuejs/vue-loader/issues/1854).\n\n## 3.1.2 - 2021-07-14\n\n### Changes\n\n* Removes an unused method, `mapMongoIdToJqtreeId`, that was used in A2 but is no longer relevant.\n* Removes deprecated and non-functional steps from the `edit` method in the `AposDocsManager.vue` component.\n* Legacy migrations to update 3.0 alpha and 3.0 beta sites to 3.0 stable are still in place, with no functional changes, but have been relocated to separate source files for ease of maintenance. Note that this is not a migration path for 2.x databases. Tools for that are forthcoming.\n\n## 3.1.1 - 2021-07-08\n\n### Fixes\n\n* Two distinct modules may each have their own `ui/src/index.scss` file, similar to the fix already applied to allow multiple `ui/src/index.js` files.\n\n## 3.1.0 - 2021-06-30\n\n### Fixes\n\n* Corrects a bug that caused Apostrophe to rebuild the admin UI on every nodemon restart, which led to excessive wait times to test new code. Now this happens only when `package-lock.json` has been modified (i.e. you installed a new module that might contain new Apostrophe admin UI code). If you are actively developing Apostrophe admin UI code, you can opt into rebuilding all the time with the `APOS_DEV=1` environment variable. In any case, `ui/src` is always rebuilt in a dev environment.\n* Updates `cheerio`, `deep-get-set`, and `oembetter` versions to resolve vulnerability warnings.\n* Modules with a `ui/src` folder, but no other content, are no longer considered \"empty\" and do not generate a warning.\n* Pushing a secondary context document now always results in entry to draft mode, as intended.\n* Pushing a secondary context document works reliably, correcting a race condition that could cause the primary document to remain in context in some cases if the user was not already in edit mode.\n\n### Changes\n\n* Deprecates `self.renderPage` method for removal in next major version.\n* Since `ui/src/index.js` files must export a function to avoid a browser error in production which breaks the website experience, we now detect this at startup and throw a more helpful error to prevent a last-minute discovery in production.\n\n## 3.0.1 - 2021-06-17\n\n### Fixes\n\n* Fixes an error observed in the browser console when using more than one `ui/src/index.js` file in the same project. Using more than one is a good practice as it allows you to group frontend code with an appropriate module, or ship frontend code in an npm module that extends Apostrophe.\n* Migrates all of our own frontend players and utilities from `ui/public` to `ui/src`, which provides a robust functional test of the above.\n* Executes `ui/src` imports without waiting for next tick, which is appropriate as we have positioned it as an alternative to `ui/public` which is run without delay.\n\n## 3.0.0 - 2021-06-16\n\n### Breaks\n\n* Previously our `a3-boilerplate` project came with a webpack build that pushed code to the `ui/public` folder of an `asset` module. Now the webpack build is not needed because Apostrophe takes care of compiling `ui/src` for us. This is good! However, **if you are transitioning your project to this new strategy, you will need to remove the `modules/asset/ui/public` folder from your project manually** to ensure that webpack-generated code originally intended for webpack-dev-server does not fail with a `publicPath` error in the console.\n* The `CORE_DEV=1` environment setting has been changed to `APOS_DEV=1` because it is appropriate for anyone who is actively developing custom Apostrophe admin UI using `ui/apos` folders in their own modules.\n* Apostrophe now uses Dart Sass, aka the `sass` npm module. The `node-sass` npm module has been deprecated by its authors for some time now. Most existing projects will be unaffected, but those writing their own Apostrophe UI components will need to change any `/deep/` selectors to `::v-deep` and consider making other Dart Sass updates as well. For more information see the [Dart Sass documentation](https://sass-lang.com/dart-sass). Those embracing the new `ui/src` feature should also bear in mind that Dart Sass is being used.\n\n### Changes\n\n* Relationship ids are now stored as aposDocIds (without the locale and mode part). The appropriate locale and mode are known from the request. This allows easy comparison and copying of these properties across locales and fixes a bug with reverse relationships when publishing documents. A migration has been added to take care of this conversion on first startup.\n- The `attachment` field type now correctly limits file uploads by file type when using the `fileGroup` field option.\n- Uploading SVG files is permitted in the Media Library by default.\n\n### Adds\n\n- Apostrophe now enables you to ship frontend JavaScript and Sass (using the SCSS syntax) without your own webpack configuration.\n- Any module may contain modern JavaScript in a `ui/src/index.js` file, which may use `import` to bring in other files in the standard way. Note that **`ui/src/index.js must export a function`**. These functions are called for you in the order modules are initialized.\n- Any module may contain a Sass (SCSS) stylesheet in a `ui/src/index.scss` file, which may also import other Sass (SCSS) files.\n- Any project that requires IE11 support for `ui/src` JavaScript code can enable it by setting the `es5: true` option to the `@apostrophecms/asset` module. Apostrophe produces separate builds for IE11 and modern browsers, so there is no loss of performance in modern browsers. Code is automatically compiled for IE11 using `babel` and missing language features are polyfilled using `core-js` so you can use promises, `async/await` and other standard modern JavaScript features.\n- `ui/public` is still available for raw JavaScript and CSS files that should be pushed *as-is* to the browser. The best use of this feature is to deliver the output of your own custom webpack build, if you have one.\n- Adds browser-side `editMode` flag that tracks the state of the current view (edit or preview), located at `window.apos.adminBar.editMode`.\n- Support for automatic inline style attribute sanitization for Rich Text widgets.\n- Adds text align controls for Rich Text widgets. The following tools are now supported as part of a rich text widget's `toolbar` property:\n-- `alignLeft`\n-- `alignRight`\n-- `alignCenter`\n-- `alignJustify`\n- `@apostrophecms/express` module now supports the `trustProxy: true` option, allowing your reverse proxy server (such as nginx) to pass on the original hostname, protocol and client IP address.\n\n### Fixes\n\n* Unit tests passing again. Temporarily disabled npm audit checks as a source of critical failures owing to upstream issues with third-party packages which are not actually a concern in our use case.\n* Fixed issues with the query builder code for relationships. These issues were introduced in beta 3 but did not break typical applications, except for displaying distinct choices for existing values of a relationship field.\n* Checkbox field types can now be used as conditional fields.\n* Tracks references to attachments correctly, and introduces a migration to address any attachments previously tracked as part of documents that merely have a relationship to the proper document, i.e. pages containing widgets that reference an image piece.\n* Tracks the \"previously published\" version of a document as a legitimate reference to any attachments, so that they are not discarded and can be brought back as expected if \"Undo Publish\" is clicked.\n* Reverse relationships work properly for published documents.\n* Relationship subfields are now loaded properly when `reverseOf` is used.\n* \"Discard Draft\" is available when appropriate in \"Manage Pages\" and \"Manage Pieces.\"\n* \"Discard Draft\" disables the \"Submit Updates\" button when working as a contributor.\n* Relationship subfields can now be edited when selecting in the full \"manage view\" browser, as well as in the compact relationship field view which worked previously.\n* Relationship subfields now respect the `def` property.\n* Relationship subfields are restored if you deselect a document and then reselect it within a single editing experience, i.e. accidentally deselect and immediately reselect, for instance.\n* A console warning when editing subfields for a new relationship was fixed.\n* Field type `color`'s `format` option moved out of the UI options and into the general options object. Supported formats are \"rgb\", \"prgb\", \"hex6\", \"hex3\", \"hex8\", \"name\", \"hsl\", \"hsv\". Pass the `format` string like:\n```js\nmyColorField: {\n  type: 'color',\n  label: 'My Color',\n  options: {\n    format: 'hsl'\n  }\n}\n```\n* Restored Vue dependency to using semantic versioning now that Vue 2.6.14 has been released with a fix for the bug that required us to pin 2.6.12.\n* Nunjucks template loader is fully compatible with Linux in a development environment.\n* Improved template performance by reusing template loaders.\n* `min` and `max` work properly for both string-like and number-like fields.\n* Negative numbers, leading minus and plus signs, and trailing periods are accepted in the right ways by appropriate field types.\n* If a user is inadvertently inserted with no password, set a random password on the backend for safety. In tests it appears that login with a blank password was already forbidden, but this provides an additional level of certainty.\n* `data.page` and `data.contextOptions` are now available in `widget.html` templates in most cases. Specifically, they are available when loading the page, (2) when a widget has just been inserted on the page, and (3) when a widget has just been edited and saved back to the page. However, bear in mind that these parameters are never available when a widget is being edited \"out of context\" via \"Page Settings\", via the \"Edit Piece\" dialog box, via a dialog box for a parent widget, etc. Your templates should be written to tolerate the absence of these parameters.\n* Double slashes in the slug cannot be used to trick Apostrophe into serving as an open redirect (fix ported to 3.x from 2.92.0).\n* The global doc respects the `def` property of schema fields when first inserted at site creation time.\n* Fixed fragment keyword arguments being available when not a part of the fragment signature.\n\n## 3.0.0-beta.3.1 - 2021-06-07\n\n### Breaks\n- This backwards compatibility break actually occurred in 3.0.0-beta.3 and was not documented at that time, but it is important to know that the following Rich Text tool names have been updated to match Tiptap2's convention:\n-- `bullet_list` -> `bulletList`\n-- `ordered_list` -> `orderedList`\n-- `code_block` -> `codeBlock`\n-- `horizontal_rule` -> `horizontalRule`\n\n### Fixes\n\n- Rich Text default tool names updated, no longer broken. Bug introduced in 3.0.0-beta.3.\n- Fixed Rich Text's tool cascade to properly account for core defaults, project level defaults, and area-specific options.\n\n## 3.0.0-beta.3 - 2021-06-03\n\n### Security Fixes\n\nThe `nlbr` and `nlp` Nunjucks filters marked their output as safe to preserve the tags that they added, without first escaping their input, creating a CSRF risk. These filters have been updated to escape their input unless it has already been marked safe. No code changes are required to templates whose input to the filter is intended as plaintext, however if you were intentionally leveraging this bug to output unescaped HTML markup you will need to make sure your input is free of CSRF risks and then use the `| safe` filter before the `| nlbr` or `| nlp` filter.\n\n### Adds\n\n- Added the `ignoreUnusedFolderWarning` option for modules that intentionally might not be activated or inherited from in a particular startup.\n- Better explanation of how to replace macros with fragments, in particular how to call the fragments with `{% render fragmentName(args) %}`.\n\n### Fixes\n\n- Temporarily pinned to Vue 2.6.12 to fix an issue where the \"New\" button in the piece manager modals disappeared. We think this is a bug in the newly released Vue 2.6.13 but we are continuing to research it.\n- Updated dependencies on `sanitize-html` and `nodemailer` to new major versions, causing no bc breaks at the ApostropheCMS level. This resolved two critical vulnerabilities according to `npm audit`.\n- Removed many unused dependencies.\n- The data retained for \"Undo Publish\" no longer causes slug conflicts in certain situations.\n- Custom piece types using `localized: false` or `autopublish: true,` as well as singleton types, now display the correct options on the \"Save\" dropdown.\n- The \"Save and View,\" \"Publish and View\" and/or \"Save Draft and Preview\" options now appear only if an appropriate piece page actually exists for the piece type.\n- Duplicating a widget now properly assigns new IDs to all copied sub-widgets, sub-areas and array items as well.\n\n- Added the `ignoreUnusedFolderWarning` option for modules that intentionally might not be activated or inherited from in a particular startup.\n- If you refresh the page while previewing or editing, you will be returned to that same state.\n\n### Notices\n\n- Numerous `npm audit` vulnerability warnings relating to `postcss` 7.x were examined, however it was determined that these are based on the idea of a malicious SASS coder attempting to cause a denial of service. Apostrophe developers would in any case be able to contribute JavaScript as well and so are already expected to be trusted parties. This issue must be resolved upstream in packages including both `stylelint` and `vue-loader` which have considerable work to do before supporting `postcss` 8.x, and in any case public access to write SASS is not part of the attack surface of Apostrophe.\n\n### Changes\n\n- When logging out on a page that only exists in draft form, or a page with access controls, you are redirected to the home page rather than seeing a 404 message.\n\n- Rich text editor upgraded to [tiptap 2.x beta](https://www.tiptap.dev) :tada:. On the surface not a lot has changed with the upgrade, but tiptap 2 has big improvements in terms of speed, composability, and extension support. [See the technical differences of tiptap 1 and 2 here](https://www.tiptap.dev/overview/upgrade-guide#reasons-to-upgrade-to-tiptap-2x)\n\n## 3.0.0-beta.2 - 2021-05-21\n\n### **Breaks**\n\n- The `updateModified: false` option, formerly supported only by `apos.doc.update`, has been renamed to `setModified: false` and is now supported by `apos.doc.insert` as well. If explicitly set to false, the insert and update methods will leave the `modified` property alone, rather than trying to detect or infer whether a change has been made to the draft relative to the published version.\n- The `permission` module no longer takes an `interestingTypes` option. Instead, doc type managers may set their `showPermissions` option to `true` to always be broken out separately in the permissions explorer, or explicitly set it to `false` to never be mentioned at all, even on a list of typical piece types that have the same permissions. This allows module creators to ship the right options with their modules rather than requiring the developer to hand-configure `interestingTypes`.\n- When editing users, the permissions explorer no longer lists \"submitted draft\" as a piece type.\n- Removed `apos.adminBar.group` method, which is unlikely to be needed in 3.x. One can group admin bar items into dropdowns via the `groups` option.\n- Raw HTML is no longer permitted in an `apos.notify` message parameter. Instead, `options.buttons` is available. If present, it must be an array of objects with `type` and `label` properties. If `type` is `'event'` then that button object must have `name` and `data` properties, and when clicked the button will trigger an apos bus event of the given `name` with the provided `data` object. Currently `'event'` is the only supported value for `type`.\n\n### Adds\n\n- The name `@apostrophecms/any-page-type` is now accepted for relationships that should match any page. With this change, the doc type manager module name and the type name are now identical for all types in 3.x. However, for backwards compatibility `@apostrophecms/page` is still accepted. `apos.doc.getManager` will accept either name.\n- Sets the project root-level `views` directory as the default fallback views directory. This is no longer a necessary configuration in projects unless they want to change it on the `@apostrophecms/template` option `viewsFolderFallback`.\n- The new `afterAposScripts` nunjucks block allows for pushing markup after Apostrophe's asset bundle script tag, at the end of the body. This is a useful way to add a script tag for Webpack's hot reload capabilities in development while still ensuring that Apostrophe's utility methods are available first, like they are in production.\n- An `uploadfs` option may be passed to the `@apostrophecms/asset` module, in order to pass options configuring a separate instance of `uploadfs` specifically for the static assets. The `@apostrophecms/uploadfs` module now exports a method to instantiate an uploadfs instance. The default behavior, in which user-uploaded attachments and static assets share a single instance of uploadfs, is unchanged. Note that asset builds never use uploadfs unless `APOS_UPLOADFS_ASSETS=1` is set in the environment.\n- `AposButtonSplit` is a new UI component that combines a button with a context menu. Users can act on a primary action or change the button's function via menu button to the right of the button itself.\n- Developers can now pass options to the `color` schema field by passing a `pickerOptions` object through your field. This allows for modifying/removing the default color palette, changing the resulting color format, and disabling various UI. For full set of options [see this example](https://github.com/xiaokaike/vue-color/blob/master/src/components/Sketch.vue)\n- `AposModal` now emits a `ready` event when it is fully painted and can be interacted with by users or code.\n- The video widget is now compatible with vimeo private videos when the domain is on the allowlist in vimeo.\n\n### Changes\n\n- You can now override the parked page definition for the home page without copying the entirety of `minimumPark` from the source code. Specifically, you will not lose the root archive page if you park the home page without explicitly parking the archive page as well. This makes it easier to choose your own type for the home page, in lieu of `@apostrophecms/home-page`.\n\n### Fixes\n\n- Piece types like users that have a slug prefix no longer trigger a false positive as being \"modified\" when you first click the \"New\" button.\n- The `name` option to widget modules, which never worked in 3.x, has been officially removed. The name of the widget type is always the name of the module, with the `-widget` suffix removed.\n- The home page and other parked pages should not immediately show as \"pending changes.\"\n- In-context editing works properly when the current browser URL has a hash (portion beginning with `#`), enabling the use of the hash for project-specific work. Thanks to [https://stepanjakl.com/](\u0160t\u011bp\u00e1n J\u00e1kl) for reporting the issue.\n- When present, the `apos.http.addQueryToUrl` method preserves the hash of the URL intact.\n- The home page and other parked pages should not immediately show as \"pending changes.\"\n- The browser-side `apos.http.parseQuery` function now handles objects and arrays properly again.\n- The in-context menu for documents has been refactored as a smart component that carries out actions on its own, eliminating a great deal of redundant code, props and events.\n- Added additional retries when binding to the port in a dev environment.\n- The \"Submit\" button in the admin bar updates properly to \"Submitted\" if the submission happens in the page settings modal.\n- Skipping positional arguments in fragments now works as expected.\n- The rich text editor now supports specifying a `styles` array with no `p` tags properly. A newly added rich text widget initially contains an element with the first style, rather than always a paragraph. If no styles are configured, a `p` tag is assumed. Thanks to Stepan Jakl for reporting the issue.\n\n### Changes\n- Editor modal's Save button (publish / save draft / submit) now updated to use the `AposSplitButton` component. Editors can choose from several follow-up actions that occur after save, including creating another piece of content of the same type, being taken to the in-context version of the document, or being returned to the manager. Editor's selection is saved in localstorage, creating a remembered preference per content type.\n\n## 3.0.0-beta.1.1 - 2021-05-07\n\n### Fixes\n\n- A hotfix for an issue spotted in beta 1 in our demo: all previously published pages of sites migrated from early alpha releases had a \"Draft\" label until published again.\n\n## 3.0.0-beta.1 - 2021-05-06\n\n### **Breaks**\n\n- Removes the\u00a0`firstName`\u00a0and\u00a0`lastName`\u00a0fields in user pieces.\n- The query parameters\u00a0`apos-refresh`,\u00a0`apos-edit`,\u00a0`apos-mode`\u00a0and\u00a0`apos-locale`\u00a0are now\u00a0`aposRefresh`,\u00a0`aposEdit`,\u00a0`aposMode`and\u00a0`aposLocale`. Going forward all query parameters will be camelCase for consistency with query builders.\n\n### Changes\n\n- Archiving a page or piece deletes any outstanding draft in favor of archiving the last published version. Previously the behavior was effectively the opposite.\n- \"Publish Changes\" button label has been changes to \"Update\".\n- Draft mode is no longer the default view for published documents.\n- The page and piece manager views now display the title, etc. of the published version of a document, unless that document only exists in draft form. However a label is also provided indicating if a newer draft is in progress.\n- Notifications have been updated with a new visual display and animation style.\n\n### **Adds**\n\n- Four permissions roles are supported and enforced: guest, contributor, editor and admin. See the documentation for details. Pre-existing alpha users are automatically migrated to the admin role.\n- Documents in managers now have context sensitive action menus that allow actions like edit, discard draft, archive, restore, etc.\n- A fragment call may now have a body using\u00a0`rendercall`, just like a macro call can have a body using\u00a0`call`. In addition, fragments can now have named arguments, just like macros. Many thanks to Miro Yovchev for contributing this implementation.\n- Major performance improvement to the\u00a0`nestedModuleSubdirs`\u00a0option.\n- Updates URL fields and oEmbed URL requests to use the\u00a0`httpsFix`\u00a0option in launder's\u00a0`url()`\u00a0method.\n- Documents receive a state label based on their document state (draft, pending, pending updates)\n- Contributors can submit drafts for review (\"Submit\" versus \"Submit Updates\").\n- Editors and admins can manage submitted drafts.\n- Editors and admins can easily see the number of proposed changes awaiting their attention.\n- Support for virtual piece types, such as submitted drafts, which in actuality manage more than one type of doc.\n- Confirm modals now support a schema which can be assessed after confirmation.\n- When archiving and restoring pages, editors can chose whether the action affects only this document or this document + children\n- Routes support the\u00a0`before`\u00a0syntax, allowing routes that are added to Express prior to the routes or middleware of another module. The syntax\u00a0`before: 'middleware:moduleName'`\u00a0must be used to add the route prior to the middleware of\u00a0`moduleName`. If\u00a0`middleware:`\u00a0is not used, the route is added before the routes of\u00a0`moduleName`. Note that normally all middleware is added before all routes.\n- A\u00a0`url`\u00a0property can now optionally be specified when adding middleware. By default all middleware is global.\n- The pieces REST GET API now supports returning only a count of all matching pieces, using the\u00a0`?count=1`\u00a0query parameter.\n- Admin bar menu items can now specify a custom Vue component to be used in place of\u00a0`AposButton`.\n- Sets\u00a0`username`\u00a0fields to follow the user\u00a0`title`\u00a0field to remove an extra step in user creation.\n- Adds default data to the\u00a0`outerLayoutBase.html`\u00a0`<title>`\u00a0tag:\u00a0`data.piece.title or data.page.title`.\n- Moves the core UI build task into the start up process. The UI build runs automatically when\u00a0`NODE_ENV`\u00a0is\u00a0*not*\u00a0'production' and when:\n    1. The build folder does not yet exist.\n    2. The package.json file is newer than the existing UI build.\n    3. You explicitly tell it to by setting the environment variable\u00a0`CORE_DEV=1`\n- The new\u00a0`._ids(_idOrArrayOfIds)`\u00a0query builder replaces\u00a0`explicitOrder`\u00a0and accepts an array of document\u00a0`_id`s or a single one.\u00a0`_id`\u00a0can be used as a multivalued query parameter. Documents are returned in the order you specify, and just like with single-document REST GET requests, the locale of the\u00a0`_id`s is overridden by the\u00a0`aposMode`\u00a0query parameter if present.\n- The\u00a0`.withPublished(true)`\u00a0query builder adds a\u00a0`_publishedDoc`\u00a0property to each returned draft document that has a published equivalent.\u00a0`withPublished=1`\u00a0can be used as a query parameter. Note this is not the way to fetch only published documents. For that, use\u00a0`.locale('en:published')`\u00a0or similar.\n- The server-side implementation of\u00a0`apos.http.post`\u00a0now supports passing a\u00a0`FormData`\u00a0object created with the\u00a0`[form-data](https://www.npmjs.com/package/form-data)`\u00a0npm module. This keeps the API parallel with the browser-side implementation and allows for unit testing the attachments feature, as well as uploading files to internal and external APIs from the server.\n- `manuallyPublished`\u00a0computed property moved to the\u00a0`AposPublishMixin`\u00a0for the use cases where that mixin is otherwise warranted.\n- `columns`\u00a0specified for a piece type's manage view can have a name that uses \"dot notation\" to access a subproperty. Also, for types that are localized, the column name can begin with\u00a0`draft:`\u00a0or\u00a0`published:`\u00a0to specifically display a property of the draft or published version of the document rather than the best available. When a prefix is not used, the property comes from the published version of the document if available, otherwise from the draft.\n- For page queries, the\u00a0`children`\u00a0query builder is now supported in query strings, including the\u00a0`depth`\u00a0subproperty. For instance you could fetch\u00a0`/api/v1/@apostrophecms/page/id-of-page?children=1`\u00a0or\u00a0`/api/v1/@apostrophecms/page/id-of-page?children[depth]=3`.\n- Setting\u00a0`APOS_LOG_ALL_QUERIES=1`\u00a0now logs the projection, skip, limit and sort in addition to the criteria, which were previously logged.\n\n### **Fixes**\n\n- Fragments can now call other fragments, both those declared in the same file and those imported, just like macros calling other macros. Thanks to Miro Yovchev for reporting the issue.\n- There was a bug that allowed parked properties, such as the slug of the home page, to be edited. Note that if you don't want a property of a parked page to be locked down forever you can use the\u00a0`_defaults`\u00a0feature of parked pages.\n- A required field error no longer appears immediately when you first start creating a user.\n- Vue warning in the pieces manager due to use of value rather than name of column as a Vue key. Thanks to Miro Yovchev for spotting the issue.\n- \"Save Draft\" is not an appropriate operation to offer when editing users.\n- Pager links no longer break due to\u00a0`aposRefresh=1`\u00a0when in edit mode. Also removed superfluous\u00a0`append`\u00a0query parameter from these.\n- You may now intentionally clear the username and slug fields in preparation to type a new value. They do not instantly repopulate based on the title field when you clear them.\n- Language of buttons, labels, filters, and other UI updated and normalized throughout.\n- A contributor who enters the page tree dialog box, opens the editor, and selects \"delete draft\" from within the editor of an individual page now sees the page tree reflect that change right away.\n- The page manager listens for content change events in general and its refresh mechanism is robust in possible situations where both an explicit refresh call and a content change event occur.\n- Automatically retries once if unable to bind to the port in a dev environment. This helps with occasional\u00a0`EADDRINUSE`\u00a0errors during nodemon restarts.\n- Update the current page's context bar properly when appropriate after actions such as \"Discard Draft.\"\n- The main archive page cannot be restored, etc. via the context menu in the page tree.\n- The context menu and \"Preview Draft\" are both disabled while errors are present in the editor dialog box.\n- \"Duplicate\" should lead to a \"Publish\" button, not an \"Update\" button, \"Submit\" rather than \"Submit Update,\" etc.\n- When you \"Duplicate\" the home page you should be able to set a slug for the new page (parked properties of parked pages should be editable when making a duplicate).\n- When duplicating the home page, the suggested slug should not be\u00a0`/`\u00a0as only one page can have that slug at a time.\n- Attention is properly called to a slug conflict if it exists immediately when the document is opened (such as making a copy where the suggested slug has already been used for another copy).\n- \"Preview Draft\" never appears for types that do not use drafts.\n- The toggle state of admin bar utility items should only be mapped to an\u00a0`is-active`\u00a0class if, like palette, they opt in with\u00a0`toggle: true`\n- Fixed unique key errors in the migrate task by moving the parking of parked pages to a new\u00a0`@apostrophecms/migrate:after`\u00a0event handler, which runs only after migrations, whether that is at startup (in dev) or at the end of the migration task (in production).\n- UI does not offer \"Archive\" for the home page, or other archived pages.\n- Notification checks and other polling requests now occur only when the tab is in the foreground, resolving a number of problems that masqueraded as other bugs when the browser hit its connection limit for multiple tabs on the same site.\n- Parked pages are now parked immediately after database migrations are checked and/or run. In dev this still happens at each startup. In production this happens when the database is brand new and when the migration task is manually run.\n\n## 3.0.0-alpha.7 - 2021-04-07\n\n### Breaks\n\n* The `trash` property has been renamed `archived`, and throughout the UI we refer to \"archiving\" and the \"archive\" rather than \"move to trash\" and the \"trash can.\" A database migration is included to address this for existing databases. However, **if you set the minimumPark option, or used a boilerplate in which it is set,** you will need to **change the settings for the `parkedId: 'trash'` page to match those [currently found in the `minimumPark` option setting in the `@apostrophecms/page` source code](https://github.com/apostrophecms/apostrophe/blob/481252f9bd8f42b62648a0695105e6e9250810d3/modules/%40apostrophecms/page/index.js#L25-L32).\n\n### Adds\n\n* General UX and UI improvements to the experience of moving documents to and from the archive, formerly known as the trash.\n* Links to each piece are available in the manage view when appropriate.\n* Search is implemented in the media library.\n* You can now pass core widgets a `className` option when configuring them as part of an area.\n* `previewDraft` for pieces, adds a Preview Draft button on creation for quick in-context editing. Defaults to true.\n\n### Changes\n\n* Do not immediately redirect to new pages and pieces.\n* Restored pieces now restore as unpublished drafts.\n* Refactored the admin bar component for maintainability.\n* Notification style updates\n\n### Fixes\n\n* Advisory lock no longer triggers an update to the modification timestamp of a document.\n* Attempts to connect Apostrophe 3.x to an Apostrophe 2.x database are blocked to prevent content loss.\n* \"Save as Draft\" is now available as soon as a new document is created.\n* Areas nested in array schema fields can now be edited in context.\n* When using `apos.image.first`, the alt attribute of the image piece is available on the returned attachment object as `._alt`. In addition, `_credit` and `_creditUrl` are available.\n* Fixes relating to the editing of widgets in nested areas, both on the page and in the modal.\n* Removed published / draft switch for unpublished drafts.\n* \"Publish Changes\" appears only at appropriate times.\n* Notifications moved from the bottom right of the viewport to the bottom center, fixing some cases of UI overlap.\n\n## 3.0.0-alpha.6.1 - 2021-03-26\n\n### Fixes\n\n* Conditional fields (`if`) and the \"following values\" mechanism now work properly in array item fields.\n* When editing \"Page Settings\" or a piece, the \"publish\" button should not be clickable if there are errors.\n\n## 3.0.0-alpha.6 - 2021-03-24\n\n### Adds\n* You can \"copy\" a page or a piece via the \u2807 menu.\n* When moving the current page or piece to the trash, you are taken to the home page.\n* `permissions: false` is supported for piece and page insert operations.\n* Adds note to remove deprecated `allowedInChooser` option on piece type filters.\n* UX improvement: \"Move to Trash\" and \"Restore\" buttons added for pieces, replacing the boolean field. You can open a piece that is in the trash in a read-only way in order to review it and click \"Restore.\"\n* Advisory lock support has been completed for all content types, including on-page, in-context editing. This prevents accidental conflicts between editors.\n* Image widgets now accept a `size` context option from the template, which can be used to avoid sending a full-width image for a very small placement.\n* Additional improvements.\n\n### Fixes\n* Fixes error from missing `select` method in `AposPiecesManager` component.\n* No more migration messages at startup for brand-new sites.\n* `max` is now properly implemented for relationships when using the manager dialog box as a chooser.\n* \"Trash\" filter now displays its state properly in the piece manager dialog box.\n* Dragging an image to the media library works reliably.\n* Infinite loop warning when editing page titles has been fixed.\n* Users can locate the tab that still contains errors when blocked from saving a piece due to schema field errors.\n* Calling `insert` works properly in the `init` function of a module.\n* Additional fixes.\n\n### Breaks\n\n* Apostrophe's instance of `uploadfs` has moved from `apos.attachment.uploadfs` to `apos.uploadfs`. The `uploadfs` configuration option has similarly moved from the `@apostrophecms/attachment` module to the `@apostrophecms/uploadfs` module. `imageSizes` is still an option to `@apostrophecms/attachment`.\n\n## 3.0.0-alpha.5 - 2021-02-11\n\n* Conditional fields are now supported via the new `if` syntax. The old 2.x `showFields` feature has been replaced with `if: { ... }`.\n* Adds the option to pass context options to an area for its widgets following the `with` keyword. Context options for widgets not in that area (or that don't exist) are ignored. Syntax: `{% area data.page, 'areaName' with { '@apostrophecms/image: { size: 'full' } } %}`.\n* Advisory locking has been implemented for in-context editing, including nested contexts like the palette module. Advisory locking has also been implemented for the media manager, completing the advisory locking story.\n* Detects many common configuration errors at startup.\n* Extends `getBrowserData` in `@apostrophecms/doc-type` rather than overwriting the method.\n* If a select element has no default, but is required, it should default to the first option. The select elements appeared as if this were the case, but on save you would be told to make a choice, forcing you to change and change back. This has been fixed.\n* Removes 2.x piece module option code, including for `contextual`, `manageViews`, `publishMenu`, and `contextMenu`.\n* Removes admin bar module options related to 2.x slide-out UI: `openOnLoad`, `openOnHomepageLoad`, `closeDelay`.\n* Fixed a bug that allowed users to appear to be in edit mode while looking at published content in certain edge cases.\n* The PATCH API for pages can now infer the correct _id in cases where the locale is specified in the query string as an override, just like other methods.\n* Check permissions for the delete and publish operations.\n* Many bug fixes.\n\n### Breaks\n* Changes the `piecesModuleName` option to `pieceModuleName` (no \"s\") in the `@apostrophecms/piece-page-type` module. This feature is used only when you have two or more piece page types for the same piece type.\n\n## 3.0.0-alpha.4.2 - 2021-01-27\n\n* The `label` option is no longer required for widget type modules. This was already true for piece type and page type modules.\n* Ability to namespace asset builds. Do not push asset builds to uploadfs unless specified.\n\n### Breaking changes\n\n* Removes the `browser` module option, which was only used by the rich text widget in core. All browser data should now be added by extending or overriding `getBrowserData` in a module. Also updates `getComponentName` to reference `options.components` instead of `options.browser.components`.\n\n## 3.0.0-alpha.4.1\n\n* Hotfix: the asset module now looks for a `./release-id` file (relative to the project), not a `./data/release-id` file, because `data` is not a deployed folder and the intent of `release-id` is to share a common release identifier between the asset build step and the deployed instances.\n\n## 3.0.0-alpha.4\n\n* **\"Fragments\" have been added to the Apostrophe template API, as an alternative to Nunjucks' macros, to fully support areas and async components.** [See the A3 alpha documentation](https://a3.docs.apos.dev/guide/widgets-and-templates/fragments.html) for instructions on how to use this feature.\n* **CSS files in the `ui/public` subdirectory of any module are now bundled and pushed to the browser.** This allows you to efficiently deliver your CSS assets, just as you can deliver JS assets in `ui/public`. Note that these assets must be browser-ready JS and CSS, so it is customary to use your own webpack build to generate them. See [the a3-boilerplate project](https://github.com/apostrophecms/a3-boilerplate) for an example, especially `webpack.config.js`.\n* **More support for rendering HTML in REST API requests.** See the `render-areas` query parameter in [piece and page REST API documentation](https://a3.docs.apos.dev/reference/api/pieces.html#get-api-v1-piece-name).\n* **Context bar takeover capability,** for situations where a secondary document should temporarily own the undo/redo/publish UI.\n* **Unpublished pages in the tree** are easier to identify\n* **Range fields** have been added.\n* **Support for npm bundles is back.** It works just like in 2.x, but the property is `bundle`, not `moogBundle`. Thanks to Miro Yovchev.\n\n### Breaking changes\n\n* **A3 now uses webpack 5.** For now, **due to a known issue with vue-loader, your own project must also be updated to use webpack 5.** The a3-boilerplate project has been updated accordingly, so you may refer to [the a3-boilerplate project](https://github.com/apostrophecms/a3-boilerplate) for an example of the changes to be made, notably in `webpack.config.js` and `package.json`. We are in communication with upstream developers to resolve the issue so that projects and apostrophe core can use different major versions of webpack.\n\n## 3.0.0-alpha.3\n\nThird alpha release of 3.x. Introduced draft mode and the \"Publish Changes\" button.\n\n## 3.0.0-alpha.2\n\nSecond alpha release of 3.x. Introduced a distinct \"edit\" mode.\n\n## 3.0.0-alpha.1\n\nFirst alpha release of 3.x.\n", "const _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs');\nconst Promise = require('bluebird');\nconst createDOMPurify = require('dompurify');\nconst { JSDOM } = require('jsdom');\n\nmodule.exports = {\n  options: { alias: 'attachment' },\n  cascades: [ 'imageSizes' ],\n  imageSizes: {\n    add: {\n      max: {\n        width: 1600,\n        height: 1600\n      },\n      full: {\n        width: 1140,\n        height: 1140\n      },\n      'two-thirds': {\n        width: 760,\n        height: 760\n      },\n      'one-half': {\n        width: 570,\n        height: 700\n      },\n      'one-third': {\n        width: 380,\n        height: 700\n      },\n      'one-sixth': {\n        width: 190,\n        height: 350\n      }\n    }\n  },\n\n  async init(self) {\n    // For convenience and bc\n    self.uploadfs = self.apos.uploadfs;\n    // uploadfs expects an array\n    self.imageSizes = Object.keys(self.imageSizes).map(name => ({\n      name,\n      ...self.imageSizes[name]\n    }));\n    self.name = 'attachment';\n    self.fileGroups = self.options.fileGroups || [\n      {\n        name: 'images',\n        label: 'apostrophe:images',\n        extensions: [\n          'gif',\n          'jpg',\n          'png',\n          'svg'\n        ],\n        extensionMaps: { jpeg: 'jpg' },\n        // uploadfs should treat this as an image and create scaled versions\n        image: true\n      },\n      {\n        name: 'office',\n        label: 'apostrophe:office',\n        extensions: [\n          'txt',\n          'rtf',\n          'pdf',\n          'xls',\n          'ppt',\n          'doc',\n          'pptx',\n          'sldx',\n          'ppsx',\n          'potx',\n          'xlsx',\n          'xltx',\n          'csv',\n          'docx',\n          'dotx'\n        ],\n        extensionMaps: {},\n        // uploadfs should just accept this file as-is\n        image: false\n      }\n    ];\n\n    // Do NOT add keys here unless they have the value `true`\n    self.croppable = {\n      gif: true,\n      jpg: true,\n      png: true\n    };\n\n    // Do NOT add keys here unless they have the value `true`\n    self.sized = {\n      gif: true,\n      jpg: true,\n      png: true\n    };\n\n    self.sizeAvailableInArchive = self.options.sizeAvailableInArchive || 'one-sixth';\n\n    self.rescaleTask = require('./lib/tasks/rescale.js')(self);\n    self.addFieldType();\n    self.enableBrowserData();\n\n    self.db = await self.apos.db.collection('aposAttachments');\n    await self.db.createIndex({ docIds: 1 });\n    await self.db.createIndex({ archivedDocIds: 1 });\n    self.addLegacyMigrations();\n    self.addSvgSanitizationMigration();\n  },\n\n  tasks(self) {\n    return {\n      rescale: {\n        usage: 'Usage: node app @apostrophecms/attachment:rescale\\n\\nRegenerate all sizes of all image attachments. Useful after a new size\\nis added to the configuration. Takes a long time!',\n        task: self.rescaleTask\n      },\n      'migrate-to-disabled-file-key': {\n        usage: 'Usage: node app @apostrophecms/attachment:migrate-to-disabled-file-key\\n\\nThis task should be run after adding the disabledFileKey option to uploadfs\\nfor the first time. It should only be relevant for storage backends where\\nthat option is not mandatory, i.e. only local storage as of this writing.',\n        task: self.migrateToDisabledFileKeyTask\n      },\n      'migrate-from-disabled-file-key': {\n        usage: 'Usage: node app @apostrophecms/attachment:migrate-from-disabled-file-key\\n\\nThis task should be run after removing the disabledFileKey option from uploadfs.\\nIt should only be relevant for storage backends where\\n' + 'that option is not mandatory, i.e. only local storage as of this writing.',\n        task: self.migrateFromDisabledFileKeyTask\n      },\n      'recompute-all-doc-references': {\n        usage: 'Recompute mapping between attachments and docs,\\nshould only be needed for rare repair situations',\n        task: self.recomputeAllDocReferences\n      }\n    };\n  },\n\n  // TODO RESTify where possible\n  apiRoutes(self) {\n    // TODO this must be updated to employ the new useMiddleware format and that\n    // section has to be implemented\n    return {\n      post: {\n        upload: [\n          self.canUpload,\n          require('connect-multiparty')(),\n          async function (req) {\n            try {\n              // The name attribute could be anything because of how fileupload\n              // controls work; we don't really care.\n              const file = Object.values(req.files || {})[0];\n\n              if (!file) {\n                throw self.apos.error('invalid');\n              }\n\n              const attachment = await self.insert(req, file);\n              self.all({ attachment }, { annotate: true });\n\n              return attachment;\n            } finally {\n              for (const file of (Object.values(req.files || {}))) {\n                try {\n                  fs.unlinkSync(file.path);\n                } catch (e) {\n                  self.apos.util.warn(`Uploaded temporary file ${file.path} was already removed, this should have been the responsibility of the upload route`);\n                }\n              }\n            }\n          }\n        ],\n        // Crop a previously uploaded image, based on the `id` POST parameter\n        // and the `crop` POST parameter. `id` should refer to an existing\n        // file in /attachments. `crop` should contain top, left, width and height\n        // properties.\n        //\n        // This route uploads a new, cropped version of\n        // the existing image to uploadfs, named:\n        //\n        // /attachments/ID-NAME.top.left.width.height.extension\n        //\n        // The `crop` object is appended to the `crops` array property\n        // of the file object.\n        crop: [\n          self.canUpload,\n          async function (req) {\n            const _id = self.apos.launder.id(req.body._id);\n            let crop = req.body.crop;\n            if (typeof crop !== 'object') {\n              throw self.apos.error('invalid');\n            }\n            crop = self.sanitizeCrop(crop);\n            if (!crop) {\n              throw self.apos.error('invalid');\n            }\n            await self.crop(req, _id, crop);\n            return true;\n          }\n        ]\n      }\n    };\n  },\n  handlers(self) {\n    return {\n      '@apostrophecms/doc-type:afterSave': {\n        async updateDocReferencesAfterSave(req, doc, options) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterArchive': {\n        async updateDocReferencesAfterArchive(req, doc) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterRescue': {\n        async updateDocReferencesAfterRescue(req, doc) {\n          return self.updateDocReferences(doc);\n        }\n      },\n      '@apostrophecms/doc-type:afterDelete': {\n        async updateDocReferencesAfterDelete(req, doc) {\n          return self.updateDocReferences(doc, {\n            deleted: true\n          });\n        }\n      }\n    };\n  },\n  methods(self) {\n    return {\n      addFieldType() {\n        self.apos.schema.addFieldType({\n          name: self.name,\n          partial: self.fieldTypePartial,\n          convert: self.convert,\n          index: self.index,\n          register: self.register\n        });\n      },\n      async convert(req, field, data, object) {\n        let info = data[field.name];\n        if (typeof info !== 'object') {\n          info = {};\n        }\n        info = _.pick(info, '_id', 'crop');\n        info._id = self.apos.launder.id(info._id);\n        if (!info._id) {\n          object[field.name] = null;\n        }\n        info.crop = info.crop ? self.sanitizeCrop(info.crop) : undefined;\n        const dbInfo = await self.db.findOne({ _id: info._id });\n        if (!dbInfo) {\n          object[field.name] = null;\n          return;\n        }\n        _.assign(info, _.omit(dbInfo, 'crop'));\n\n        // Check if the file type is acceptable\n        const correctedExtensions = self.checkExtension(field, info);\n\n        if (correctedExtensions) {\n          const message = req.t('apostrophe:fileTypeNotAccepted', {\n            // i18next has no built-in support for interpolating an array argument\n            extensions: correctedExtensions.join(req.t('apostrophe:listJoiner'))\n          });\n          throw self.apos.error('invalid', message);\n        }\n\n        if (info.crop) {\n          if (!_.find(info.crops, info.crop)) {\n            info.crop = null;\n          }\n        }\n        info.used = true;\n        await self.db.replaceOne({ _id: info._id }, info);\n        object[field.name] = info;\n      },\n      fieldTypePartial(data) {\n        return self.partial('attachment', data);\n      },\n      index(value, field, texts) {\n        const silent = field.silent === undefined ? true : field.silent;\n        texts.push({\n          weight: field.weight || 15,\n          text: (value && value.title) || '',\n          silent: silent\n        });\n      },\n      // When the field is registered in the schema,\n      // canonicalize .group and .extensions and .extension\n      // into .accept for convenience, as a comma-separated\n      // list of dotted file extensions suitable to pass to\n      // the \"accept\" HTML5 attribute, including mapped extensions\n      // like jpeg. If none of these options are set, .accept is\n      // set to an array of all accepted file extensions across\n      // all groups\n      register(metaType, type, field) {\n        let fileGroups = self.fileGroups;\n        if (field.fileGroups) {\n          fileGroups = fileGroups.filter(group => field.fileGroups.includes(group.name));\n        }\n        if (field.fileGroup) {\n          fileGroups = fileGroups.filter(group => group.name === field.fileGroup);\n        }\n        let extensions = [];\n        fileGroups.forEach(group => {\n          extensions = [ ...extensions, ...group.extensions ];\n        });\n        if (field.extensions) {\n          extensions = extensions.filter(extension => field.extensions.includes(extension));\n        }\n        if (field.extension) {\n          extensions = extensions.filter(extension => extension === field.extension);\n        }\n        fileGroups.forEach(group => {\n          for (const [ from, to ] of Object.entries(group.extensionMaps || {})) {\n            if (extensions.includes(to) && (!extensions.includes(from))) {\n              extensions.push(from);\n            }\n          }\n        });\n        field.accept = extensions.map(extension => `.${extension}`).join(',');\n      },\n      // Checked a given attachment's file extension against the extensions\n      // allowed by a particular schema field. If the attachment's file\n      // extension is allowed, `null` is returned. If the file extension is not\n      // allowed, `checkExtension` returns an array of the file extensions that\n      // _are_ allowed (or an empty array if the allowed extensions are\n      // unknown).\n      checkExtension(field, attachment) {\n        const groups = field.fileGroups ||\n          (field.fileGroup && [ field.fileGroup ]);\n        let extensions;\n\n        if (groups) {\n          if (!_.includes(groups, attachment.group)) {\n            extensions = [];\n            _.each(groups, function (group) {\n              const groupInfo = _.find(self.fileGroups, { name: group });\n              if (!groupInfo) {\n                return [];\n              }\n              extensions = extensions.concat(groupInfo.extensions);\n            });\n            return extensions;\n          }\n        }\n        extensions = field.extensions ||\n          (field.extension && [ field.extension ]);\n\n        if (extensions) {\n          if (!_.includes(extensions, attachment.extension)) {\n            return extensions;\n          }\n        }\n        return null;\n      },\n      // Insert a file as an Apostrophe attachment. The `file` object\n      // should be an object with `name` and `path` properties.\n      // `name` must be the name the user claims for the file, while `path`\n      // must be the actual full path to the file on disk and need not have\n      // any file extension necessarily.\n      //\n      // Note that when using Express to handle file uploads,\n      // req.files['yourfieldname'] will be such an object as long as you\n      // configure jquery fileupload to submit one per request.\n      //\n      // The `options` argument may be omitted completely.\n      // If `options.permissions` is explicitly set to `false`,\n      // permissions are not checked.\n      //\n      // This method returns `attachment` where `attachment` is an attachment\n      // object, suitable for passing to the `url` API and for use as the value\n      // of a `type: 'attachment'` schema field.\n      async insert(req, file, options) {\n        options = options || {};\n        let extension = path.extname(file.name);\n        if (extension && extension.length) {\n          extension = extension.substr(1);\n        }\n        extension = extension.toLowerCase();\n        // Do we *ever* accept this file extension?\n        const group = self.getFileGroup(extension);\n\n        if (!group) {\n          const accepted = _.union(_.map(self.fileGroups, 'extensions')).flat();\n          throw self.apos.error('invalid', req.t('apostrophe:fileTypeNotAccepted', {\n            extensions: accepted.join(req.t('apostrophe:listJoiner'))\n          }));\n        }\n        const info = {\n          _id: self.apos.util.generateId(),\n          group: group.name,\n          createdAt: new Date(),\n          name: self.apos.util.slugify(path.basename(file.name, path.extname(file.name))),\n          title: self.apos.util.sortify(path.basename(file.name, path.extname(file.name))),\n          extension: extension,\n          type: 'attachment',\n          docIds: [],\n          archivedDocIds: []\n        };\n        if (!(options.permissions === false)) {\n          if (!self.apos.permission.can(req, 'upload-attachment')) {\n            throw self.apos.error('forbidden');\n          }\n        }\n        info.length = await self.apos.util.fileLength(file.path);\n        info.md5 = await self.apos.util.md5File(file.path);\n        if (info.extension === 'svg') {\n          try {\n            await self.sanitizeSvg(file, info);\n          } catch (e) {\n            // Currently DOMPurify passes invalid SVG content without comment as long\n            // as it's not an SVG XSS attack vector, but make provision to report\n            // a relevant error if that changes\n            throw self.apos.error('invalid', req.t('apostrophe:fileInvalid'));\n          }\n        }\n        if (self.isSized(extension)) {\n          // For images we correct automatically for common file extension mistakes\n          const result = await Promise.promisify(self.uploadfs.copyImageIn)(file.path, '/attachments/' + info._id + '-' + info.name, { sizes: self.imageSizes });\n          info.extension = result.extension;\n          info.width = result.width;\n          info.height = result.height;\n          if (info.width > info.height) {\n            info.landscape = true;\n          } else {\n            info.portrait = true;\n          }\n        } else {\n          // For non-image files we have to trust the file extension\n          // (but we only serve it as that content type, so this should\n          // be reasonably safe)\n          await Promise.promisify(self.uploadfs.copyIn)(file.path, '/attachments/' + info._id + '-' + info.name + '.' + info.extension);\n        }\n        info.createdAt = new Date();\n        await self.db.insertOne(info);\n        return info;\n      },\n      // Given a path to a local svg file, sanitize any XSS attack vectors that\n      // may be present in the file. The caller is responsible for catching any\n      // exception thrown and treating that as an invalid file but there is no\n      // guarantee that invalid SVG files will be detected or cleaned up, only\n      // XSS attacks.\n      async sanitizeSvg(path) {\n        const readFile = require('util').promisify(fs.readFile);\n        const writeFile = require('util').promisify(fs.writeFile);\n        const window = new JSDOM('').window;\n        const DOMPurify = createDOMPurify(window);\n        const dirty = await readFile(path);\n        const clean = DOMPurify.sanitize(dirty);\n        return writeFile(path, clean);\n      },\n      getFileGroup(extension) {\n        return _.find(self.fileGroups, function (group) {\n          const candidate = group.extensionMaps[extension] || extension;\n          if (_.includes(group.extensions, candidate)) {\n            return true;\n          }\n        });\n      },\n      async crop(req, _id, crop) {\n        const info = await self.db.findOne({ _id: _id });\n        if (!info) {\n          throw self.apos.error('notfound');\n        }\n        if (!self.croppable[info.extension]) {\n          throw new Error(info.extension + ' files cannot be cropped, do not present cropping UI for this type');\n        }\n        const crops = info.crops || [];\n        const existing = _.find(crops, crop);\n        if (existing) {\n          // We're done, this crop is already available\n          return;\n        }\n        // Pull the original out of cloud storage to a temporary folder where\n        // it can be cropped and popped back into uploadfs\n        const originalFile = '/attachments/' + info._id + '-' + info.name + '.' + info.extension;\n        const tempFile = self.uploadfs.getTempPath() + '/' + self.apos.util.generateId() + '.' + info.extension;\n        const croppedFile = '/attachments/' + info._id + '-' + info.name + '.' + crop.left + '.' + crop.top + '.' + crop.width + '.' + crop.height + '.' + info.extension;\n        await Promise.promisify(self.uploadfs.copyOut)(originalFile, tempFile);\n        await Promise.promisify(self.uploadfs.copyImageIn)(tempFile, croppedFile, {\n          crop: crop,\n          sizes: self.imageSizes\n        });\n        crops.push(crop);\n        await self.db.updateOne({\n          _id: info._id\n        }, {\n          $set: {\n            crops\n          }\n        });\n        await Promise.promisify(fs.unlink)(tempFile);\n      },\n      sanitizeCrop(crop) {\n        crop = _.pick(crop, 'top', 'left', 'width', 'height');\n        crop.top = self.apos.launder.integer(crop.top, 0, 0, 10000);\n        crop.left = self.apos.launder.integer(crop.left, 0, 0, 10000);\n        crop.width = self.apos.launder.integer(crop.width, 1, 1, 10000);\n        crop.height = self.apos.launder.integer(crop.height, 1, 1, 10000);\n        if (_.keys(crop).length < 4) {\n          return undefined;\n        }\n        return crop;\n      },\n      // This method return a default icon url if an attachment is missing\n      // to avoid template errors\n      getMissingAttachmentUrl() {\n        const defaultIconUrl = '/modules/@apostrophecms/attachment/img/missing-icon.svg';\n        self.apos.util.warn('Template warning: Impossible to retrieve the attachment url since it is missing, a default icon has been set. Please fix this ASAP!');\n        return defaultIconUrl;\n      },\n      // This method is available as a template helper: apos.attachment.url\n      //\n      // Given an attachment object,\n      // return the URL. If options.size is set, return the URL for\n      // that size (one-third, one-half, two-thirds, full). full is\n      // \"full width\" (1140px), not the original. For the original,\n      // pass `original`. If size is not specified, you will receive\n      // the `full` size if an image, otherwise the original.\n      //\n      // If the \"uploadfsPath\" option is true, an\n      // uploadfs path is returned instead of a URL.\n      url(attachment, options) {\n        options = options || {};\n        if (!attachment) {\n          return self.getMissingAttachmentUrl();\n        }\n        let path = '/attachments/' + attachment._id + '-' + attachment.name;\n        if (!options.uploadfsPath) {\n          path = self.uploadfs.getUrl() + path;\n        }\n        // Attachments can have \"one true crop,\" or a crop can be passed with the options.\n        // For convenience, be tolerant if options.crop is passed but doesn't\n        // actually have valid cropping properties\n        let c;\n        if (options.crop !== false) {\n          c = options.crop || attachment._crop || attachment.crop;\n          if (c && c.width) {\n            path += '.' + c.left + '.' + c.top + '.' + c.width + '.' + c.height;\n          }\n        }\n        let effectiveSize;\n        if (!self.isSized(attachment) || options.size === 'original') {\n          effectiveSize = false;\n        } else {\n          effectiveSize = options.size || 'full';\n        }\n        if (effectiveSize) {\n          path += '.' + effectiveSize;\n        }\n        return path + '.' + attachment.extension;\n      },\n      // This method is available as a template helper: apos.attachment.first\n      //\n      // Find the first attachment referenced within any object with\n      // attachments as possible properties or sub-properties.\n      //\n      // For best performance be reasonably specific; don't pass an entire page or piece\n      // object if you can pass page.thumbnail to avoid an exhaustive search, especially\n      // if the page has many relationships.\n      //\n      // Returns the first attachment matching the criteria.\n      //\n      // For ease of use, a null or undefined `within` argument is accepted.\n      //\n      // Examples:\n      //\n      // 1. In the body please\n      //\n      // apos.attachment.first(page.body)\n      //\n      // 2. Must be a PDF\n      //\n      // apos.attachment.first(page.body, { extension: 'pdf' })\n      //\n      // 3. May be any office-oriented file type\n      //\n      // apos.attachment.first(page.body, { group: 'office' })\n      //\n      // apos.image.first is a convenience wrapper for fetching only images.\n      //\n      // OPTIONS:\n      //\n      // You may specify `extension`, `extensions` (an array of extensions)\n      // or `group` to filter the results.\n      first(within, options) {\n        options = options ? _.clone(options) : {};\n        options.limit = 1;\n        return self.all(within, options)[0];\n      },\n      // This method is available as a template helper: apos.attachment.all\n      //\n      // Find all attachments referenced within an object, whether they are\n      // properties or sub-properties (via relationships, etc).\n      //\n      // For best performance be reasonably specific; don't pass an entire page\n      // or piece object if you can pass piece.thumbnail to avoid an exhaustive\n      // search, especially if the piece has many relationships.\n      //\n      // Returns an array of attachments, or an empty array if none are found.\n      //\n      // When available, the `description`, `credit`, `alt` and `creditUrl`\n      // properties of the containing piece are returned as `_description`,\n      // `_credit`, `_alt` and `_creditUrl`.\n      //\n      // For ease of use, a null or undefined `within` argument is accepted,\n      // resulting in an empty array.\n      //\n      // Examples:\n      //\n      // 1. In the body please\n      //\n      // apos.attachment.all(page.body)\n      //\n      // 2. Must be a PDF\n      //\n      // apos.attachment.all(page.body, { extension: 'pdf' })\n      //\n      // 3. May be any office-oriented file type\n      //\n      // apos.attachment.all(page.body, { group: 'office' })\n      //\n      // apos.image.all is a convenience wrapper for fetching only images.\n      //\n      // OPTIONS:\n      //\n      // You may specify `extension`, `extensions` (an array of extensions)\n      // or `group` to filter the results.\n      //\n      // If `options.annotate` is true, a `._urls` property is added to all\n      // image attachments wherever they are found in `within`, with\n      // subproperties for each image size name, including `original`.\n      // For non-images, a `._url` property is set.\n      all(within, options) {\n        options = options || {};\n        function test(attachment) {\n          if (!attachment || typeof attachment !== 'object') {\n            return false;\n          }\n          if (attachment.type !== 'attachment') {\n            return false;\n          }\n          if (options.extension) {\n            if (self.resolveExtension(attachment.extension) !== options.extension) {\n              return false;\n            }\n          }\n          if (options.group) {\n            if (attachment.group !== options.group) {\n              return false;\n            }\n          }\n          if (options.extensions) {\n            if (!_.contains(options.extensions, self.resolveExtension(attachment.extension))) {\n              return false;\n            }\n          }\n          return true;\n        }\n        const winners = [];\n        if (!within) {\n          return [];\n        }\n        self.apos.doc.walk(within, function (o, key, value, dotPath, ancestors) {\n          if (test(value)) {\n            if (o.credit) {\n              value._credit = o.credit;\n            }\n            if (o.creditUrl) {\n              value._creditUrl = o.creditUrl;\n            }\n            if (o.alt) {\n              value._alt = o.alt;\n            }\n            o[key] = value;\n\n            // If one of our ancestors has a relationship to the piece that\n            // immediately contains us, provide that as the crop. This ensures\n            // that cropping coordinates stored in an @apostrophecms/image widget\n            // are passed through when we make a simple call to\n            // apos.attachment.url with the returned object\n            for (let i = ancestors.length - 1; i >= 0; i--) {\n              const ancestor = ancestors[i];\n              const fields = ancestor.imagesFields && ancestor.imagesFields[o._id];\n              if (fields) {\n                value = _.clone(value);\n                value._crop = _.pick(fields, 'top', 'left', 'width', 'height');\n                value._focalPoint = _.pick(fields, 'x', 'y');\n                break;\n              }\n            }\n\n            if (options.annotate) {\n              // Add URLs\n              value._urls = {};\n              if (value.group === 'images') {\n                _.each(self.imageSizes, function (size) {\n                  value._urls[size.name] = self.url(value, { size: size.name });\n                });\n                value._urls.original = self.url(value, { size: 'original' });\n              } else {\n                value._url = self.url(value);\n              }\n            }\n            winners.push(value);\n          }\n        });\n        return winners;\n      },\n      // Iterates over all of the attachments that exist, processing\n      // up to `limit` attachments at any given time.\n      //\n      // If only 2 arguments are given the limit defaults to 1.\n      //\n      // For use only in command line tasks, migrations and other batch operations\n      // in which permissions are a complete nonissue. NEVER use on the front end.\n      //\n      // This method will `await` when calling your `each` function,\n      // which must return a promise (i.e. just use an `async` function).\n      //\n      // This method is designed to succeed even if `each` is a fairly slow\n      // operation and there are many attachments. It does not rely on keeping\n      // a single MongoDB cursor open for a long time.\n      async each(criteria, limit, each) {\n        if (!each) {\n          each = limit;\n          limit = 1;\n        }\n        // \"Why do we fetch a bucket of attachments at a time?\" File operations\n        // can be very slow. This can lead to MongoDB cursor timeouts in\n        // tasks like @apostrophecms/attachment:rescale. We need a robust solution that\n        // does not require keeping a MongoDB cursor open too long. -Tom\n        const batchSize = 100;\n        let lastId = '';\n        while (true) {\n          const docs = await self.db.find({\n            ...(criteria || {}),\n            _id: { $gt: lastId }\n          }).limit(batchSize).sort({ _id: 1 }).toArray();\n          if (!docs.length) {\n            return;\n          }\n          await Promise.map(docs, each, { concurrency: limit });\n          lastId = docs[docs.length - 1]._id;\n          if (docs.length < batchSize) {\n            // Don't waste an extra query\n            break;\n          }\n        }\n      },\n      // Returns true if, based on the provided attachment object,\n      // a valid focal point has been specified. Useful to avoid\n      // the default of `background-position: center center` if\n      // not desired.\n      hasFocalPoint(attachment) {\n        // No attachment object; tolerate for nunjucks friendliness\n        if (!attachment) {\n          return false;\n        }\n        // Specified directly on the attachment (it's not a relationship situation)\n        if (typeof attachment.x === 'number') {\n          return true;\n        }\n        // Specified on a `_focalPoint` property hoisted via a join\n        return attachment._focalPoint && typeof attachment._focalPoint.x === 'number';\n      },\n      // If a focal point is present on the attachment, convert it to\n      // CSS syntax for `background-position`. No trailing `;` is returned.\n      // The coordinates are in percentage terms.\n      focalPointToBackgroundPosition(attachment) {\n        if (!self.hasFocalPoint(attachment)) {\n          return 'center center';\n        }\n        const point = self.getFocalPoint(attachment);\n        return point.x + '% ' + point.y + '%';\n      },\n      // Returns an object with `x` and `y` properties containing the\n      // focal point chosen by the user, as percentages. If there is no\n      // focal point, null is returned.\n      getFocalPoint(attachment) {\n        if (!self.hasFocalPoint(attachment)) {\n          return null;\n        }\n        const x = attachment._focalPoint ? attachment._focalPoint.x : attachment.x;\n        const y = attachment._focalPoint ? attachment._focalPoint.y : attachment.y;\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Returns true if this type of attachment is croppable.\n      // Available as a template helper.\n      isCroppable(attachment) {\n        return attachment && self.croppable[self.resolveExtension(attachment.extension)];\n      },\n      // Returns true if this type of attachment is sized,\n      // i.e. uploadfs produces versions of it for each configured\n      // size, as it does with GIF, JPEG and PNG files.\n      //\n      // Accepts either an entire attachment object or an extension.\n      isSized(attachment) {\n        if ((typeof attachment) === 'object') {\n          return self.sized[self.resolveExtension(attachment.extension)];\n        } else {\n          return self.sized[self.resolveExtension(attachment)];\n        }\n      },\n      // Resolve a file extension such as jpeg to its canonical form (jpg).\n      // If no extension map is configured for this extension, return it as-is.\n      resolveExtension(extension) {\n        const group = self.getFileGroup(extension);\n        if (group) {\n          return group.extensionMaps[extension] || extension;\n        }\n        return extension;\n      },\n      // When the last doc that contains an attachment goes to the\n      // archive, its permissions should change to reflect that so\n      // it is no longer web-accessible to those who know the URL.\n      //\n      // If an attachment has no more archived *or* live docs associated\n      // with it, truly delete the attachment.\n      //\n      // This method is invoked after any doc is inserted, updated, archived\n      // or restored.\n      //\n      // If a document is truly deleted, call with the `{ deleted: true}` option.\n      async updateDocReferences(doc, options = {\n        deleted: false\n      }) {\n        const attachments = self.all(self.apos.util.clonePermanent(doc));\n        const ids = _.uniq(_.map(attachments, '_id'));\n        // Build an array of mongo commands to run. Each\n        // entry in the array is a 2-element array. Element 0\n        // is the criteria, element 1 is the command\n        const commands = [];\n        if (options.deleted) {\n          commands.push([\n            { _id: { $in: ids } },\n            {\n              $pull: {\n                docIds: doc._id,\n                archivedDocIds: doc._id\n              }\n            }\n          ]);\n        } else if (!doc.archived) {\n          commands.push([\n            { _id: { $in: ids } },\n            { $addToSet: { docIds: doc._id } }\n          ], [\n            { _id: { $in: ids } },\n            { $pull: { archivedDocIds: doc._id } }\n          ]);\n        } else {\n          commands.push([\n            { _id: { $in: ids } },\n            { $addToSet: { archivedDocIds: doc._id } }\n          ], [\n            { _id: { $in: ids } },\n            { $pull: { docIds: doc._id } }\n          ]);\n        }\n        commands.push([\n          {\n            $or: [\n              { archivedDocIds: { $in: [ doc._id ] } },\n              { docIds: { $in: [ doc._id ] } }\n            ],\n            _id: { $nin: ids }\n          },\n          {\n            $pull: {\n              archivedDocIds: doc._id,\n              docIds: doc._id\n            }\n          }\n        ], [\n          { _id: { $in: ids } },\n          { $set: { utilized: true } }\n        ]);\n        for (const command of commands) {\n          await self.db.updateMany(command[0], command[1]);\n        }\n        await self.alterAttachments();\n      },\n      // Enable/disable access in uploadfs to all attachments\n      // based on whether the documents containing them\n      // are in the archive or not. Specifically, if an attachment\n      // has been utilized at least once but no longer has\n      // any entries in `docIds` and `archived` is not yet true,\n      // it becomes web-inaccessible, `utilized` is set to false\n      // and `archived` is set to true. Similarly, if an attachment\n      // has entries in `docIds` but `archived` is true,\n      // it becomes web-accessible and archived becomes false.\n      //\n      // This method is invoked at the end of `updateDocReferences`\n      // and also at the end of the migration that adds `docIds`\n      // to legacy sites. You should not need to invoke it yourself.\n      //\n      // This method also handles actually deleting attachments\n      // if they have been utilized but are no longer associated\n      // with any document, not even in the archive, as will occur\n      // if the document is truly deleted.\n      async alterAttachments() {\n        await hide();\n        await show();\n        await _delete();\n        async function hide() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 0 },\n            archived: { $ne: true }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'disable');\n          }\n        }\n        async function show() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 1 },\n            archived: { $ne: false }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'enable');\n          }\n        }\n        async function _delete() {\n          const attachments = await self.db.find({\n            utilized: true,\n            'docIds.0': { $exists: 0 },\n            'archivedDocIds.0': { $exists: 0 }\n          }).toArray();\n          for (const attachment of attachments) {\n            await alterOne(attachment, 'remove');\n          }\n        }\n        async function alterOne(attachment, action) {\n          await self.alterAttachment(attachment, action);\n          if (action === 'remove') {\n            await self.db.removeOne({ _id: attachment._id });\n          } else {\n            await self.db.updateOne({\n              _id: attachment._id\n            }, {\n              $set: {\n                archived: (action === 'disable')\n              }\n            });\n          }\n        }\n      },\n      // Enable access, disable access, or truly remove the given attachment via uploadfs,\n      // based on whether `action` is `enable`, `disable`, or `remove`. If the attachment\n      // is an image, access to the size indicated by the `sizeAvailableInArchive` option\n      // (usually `one-sixth`) remains available except when removing. This operation is carried\n      // out across all sizes and crops.\n      async alterAttachment(attachment, action) {\n        let method = self.uploadfs[action];\n        method = Promise.promisify(method);\n        await original();\n        await crops();\n        // Handle the original image and its scaled versions\n        // here (\"original\" means \"not cropped\")\n        async function original() {\n          if ((action === 'enable') && attachment.archived === undefined) {\n            // Archive status not set at all yet means\n            // it'll be a live file as of this point,\n            // skip extra API calls\n            return;\n          }\n          let sizes;\n          if (![ 'gif', 'jpg', 'png' ].includes(self.resolveExtension(attachment.extension))) {\n            sizes = [ { name: 'original' } ];\n          } else {\n            sizes = self.imageSizes.concat([ { name: 'original' } ]);\n          }\n          for (const size of sizes) {\n            if ((action !== 'remove') && (size.name === self.sizeAvailableInArchive)) {\n              // This size is always kept accessible for preview\n              // in the media library\n              continue;\n            }\n            const path = self.url(attachment, {\n              uploadfsPath: true,\n              size: size.name\n            });\n            try {\n              await method(path);\n            } catch (e) {\n              // afterSave is not a good place for fatal errors\n              self.apos.util.warn(`Unable to ${action} ${path}, most likely already done`);\n            }\n          }\n        }\n        async function crops() {\n          if ((action === 'enable') && (attachment.archived === undefined)) {\n            // Archive status not set at all yet means\n            // it'll be a live file as of this point,\n            // skip extra API calls\n            return;\n          }\n          for (const crop of attachment.crops || []) {\n            await cropOne(crop);\n          }\n        }\n        async function cropOne(crop) {\n          for (const size of self.imageSizes.concat([ { name: 'original' } ])) {\n            if (size.name === self.sizeAvailableInArchive) {\n              // This size is always kept accessible for preview\n              // in the media library\n              continue;\n            }\n            const path = self.url(attachment, {\n              crop: crop,\n              uploadfsPath: true,\n              size: size.name\n            });\n            try {\n              await method(path);\n            } catch (e) {\n              // afterSave is not a good place for fatal errors\n              self.apos.util.warn(`Unable to ${action} ${path}, most likely already done`);\n            }\n          }\n        }\n      },\n      async migrateToDisabledFileKeyTask(argv) {\n        await Promise.promisify(self.uploadfs.migrateToDisabledFileKey)();\n      },\n      async migrateFromDisabledFileKeyTask(argv) {\n        await Promise.promisify(self.uploadfs.migrateFromDisabledFileKey)();\n      },\n      getBrowserData(req) {\n        return {\n          action: self.action,\n          fileGroups: self.fileGroups,\n          name: self.name,\n          uploadsUrl: self.uploadfs.getUrl(),\n          croppable: self.croppable,\n          sized: self.sized\n        };\n      },\n      // Middleware method used when only those with attachment privileges should be allowed to do something\n      canUpload(req, res, next) {\n        if (!self.apos.permission.can(req, 'upload-attachment')) {\n          res.statusCode = 403;\n          return res.send({\n            type: 'forbidden',\n            message: req.t('apostrophe:uploadForbidden')\n          });\n        }\n        next();\n      },\n      // Recompute the `docIds` and `archivedDocIds` arrays\n      // from scratch. Should only be needed by the\n      // one-time migration that fixes these for older\n      // databases, but can be run at any time via the\n      // `apostrophe-attachments:recompute-doc-references`\n      // task.\n      async recomputeAllDocReferences() {\n        const attachmentUpdates = {};\n        await self.apos.migration.eachDoc({}, 5, addAttachmentUpdates);\n        await attachments();\n        await self.alterAttachments();\n\n        async function addAttachmentUpdates(doc) {\n          const attachments = self.all(doc);\n          const ids = _.uniq(_.map(attachments, '_id'));\n          _.each(ids, function(id) {\n            attachmentUpdates[id] = attachmentUpdates[id] || {\n              $set: {\n                docIds: [],\n                archivedDocIds: []\n              }\n            };\n            if (doc.archived) {\n              attachmentUpdates[id].$set.archivedDocIds.push(doc._id);\n            } else {\n              attachmentUpdates[id].$set.docIds.push(doc._id);\n            }\n            attachmentUpdates[id].$set.utilized = true;\n          });\n        }\n\n        async function attachments(callback) {\n          const bulk = self.db.initializeUnorderedBulkOp();\n          let count = 0;\n          _.each(attachmentUpdates, function(updates, id) {\n            const c = bulk.find({ _id: id });\n            _.each(updates, function(update) {\n              c.updateOne(attachmentUpdates[id]);\n              count++;\n            });\n          });\n          if (!count) {\n            return;\n          }\n          return bulk.execute();\n        }\n      },\n      async addSvgSanitizationMigration() {\n        self.apos.migration.add('svg-sanitization', async () => {\n          return self.each({\n            extension: 'svg',\n            sanitized: {\n              $ne: true\n            },\n          }, 1, async attachment => {\n            const tempFile = self.uploadfs.getTempPath() + '/' + self.apos.util.generateId() + '.' + attachment.extension;\n            const copyIn = require('util').promisify(self.uploadfs.copyIn);\n            const copyOut = require('util').promisify(self.uploadfs.copyOut);\n            const uploadfsPath = self.url(attachment, { uploadfsPath: true });\n            try {\n              await copyOut(uploadfsPath, tempFile);\n              await self.sanitizeSvg(tempFile);\n              await copyIn(tempFile, uploadfsPath);\n              await self.db.update({\n                _id: attachment._id\n              }, {\n                $set: {\n                  sanitized: true\n                }\n              });\n            } catch (e) {\n              console.error(e);\n              // This condition shouldn't occur, but do warn the operator if it does\n              // (possibly on input that is not really an SVG file at all)\n              self.apos.util.error(`Warning: unable to sanitize SVG file ${uploadfsPath}`);\n            }\n          });\n        });\n      },\n      ...require('./lib/legacy-migrations')(self)\n    };\n  },\n  helpers: [\n    'url',\n    'first',\n    'all',\n    'hasFocalPoint',\n    'getFocalPoint',\n    'focalPointToBackgroundPosition',\n    'isCroppable'\n  ]\n};\n", "{\n  \"addContent\": \"Add Content\",\n  \"addItem\": \"Add Item\",\n  \"addWidgetType\": \"Add {{ label }}\",\n  \"admin\": \"Admin\",\n  \"altText\": \"Alt Text\",\n  \"altTextHelp\": \"Image description used for accessibility\",\n  \"any\": \"Any\",\n  \"apostropheAdminUi\": \"Apostrophe admin UI\",\n  \"applyToSubpages\": \"Apply to Subpages\",\n  \"arrayCancelDescription\": \"Do you want to discard changes to this list?\",\n  \"archive\": \"Archive\",\n  \"archiveImage\": \"Archive Image\",\n  \"archiveOnlyThisPage\": \"Archive only this page\",\n  \"archivePageAndSubpages\": \"Archive this page and all child pages\",\n  \"archiveType\": \"Archive {{ type }}\",\n  \"archiveTypeAffirmativeLabel\": \"Yes, archive {{ type }}\",\n  \"archiveTypeNote\": \"You are currently viewing the {{ type }} you want to archive. When it is archived you will be returned to the home page.\",\n  \"archived\": \"Archived\",\n  \"archivingDraftChildCount\": \"{{ count }} of those descendants have never been published.\",\n  \"archivingPageHasChild\": \"That page has one descendant.\",\n  \"archivingPageHasChild_plural\": \"That page has {{ count }} descendants.\",\n  \"archivingPageWillLoseDraftChanges\": \"Unpublished draft changes to this page and its descendants will be permanently deleted.\",\n  \"archivingWillDeleteDraftChildren\": \"Child pages that have never been published will be permanently deleted.\",\n  \"archivingWillLoseDraftChanges\": \"Unpublished draft changes to this {{ type }} will be permanently deleted.\",\n  \"archivingWillUnpublish\": \"This will also un-publish the {{ type }}.\",\n  \"areYouSure\": \"Are You Sure?\",\n  \"assetTypeBuildComplete\": \"\ud83d\udc4d {{ label }} is complete!\",\n  \"assetTypeBuilding\": \"\ud83e\uddd1\u200d\ud83d\udcbb Building the {{ label }}...\",\n  \"back\": \"Back\",\n  \"backToHome\": \"Back to Home\",\n  \"basics\": \"Basics\",\n  \"browseDocType\": \"Browse {{ type }}\",\n  \"cancel\": \"Cancel\",\n  \"cannotMoveArchive\": \"You cannot move the Archive\",\n  \"changed\": \"Changed\",\n  \"changesAwaitingApproval\": \"Changes to this document are awaiting approval by an admin or editor.\",\n  \"changesDiscarded\": \"Changes discarded\",\n  \"changesPublished\": \"Your changes have been published.\",\n  \"cannotChangeSlugPrefix\": \"cannot change the slug prefix\",\n  \"chooseDocType\": \"Choose {{ type }}\",\n  \"clear\": \"Clear\",\n  \"clearSelection\": \"Clear Selection\",\n  \"clone\": \"Clone\",\n  \"close\": \"Close\",\n  \"closeGlobal\": \"Close Global Site Settings\",\n  \"confirmArchive\": \"You are going to archive the {{ type }} {{ title }}.\",\n  \"confirmSettings\": \"Confirm Settings\",\n  \"contentArchived\": \"Content Archived\",\n  \"contentRestored\": \"Content Restored\",\n  \"contributor\": \"Contributor\",\n  \"create\": \"Create\",\n  \"credit\": \"Credit\",\n  \"creditUrl\": \"Credit URL\",\n  \"currentLocale\": \"Currently selected locale\",\n  \"cut\": \"Cut\",\n  \"copy\": \"Copy\",\n  \"dayjsRelativeTimeFormat\": \"apostrophe\",\n  \"dayjsTitleDateFormat\": \"ddd MMMM D [at] H:mma\",\n  \"dayjsCellDateFormat\": \"apostrophe\",\n  \"deduplicateSlugReserved\": \"The deduplicate- slug is reserved.\",\n  \"delete\": \"Delete\",\n  \"deleteDraft\": \"Delete Draft\",\n  \"deleteDraftAffirmativeLabel\": \"Yes, delete document\",\n  \"deleteDraftDescription\": \"Since {{ title }} has never been published, this will completely delete the document.\",\n  \"description\": \"Description\",\n  \"disabled\": \"Disabled\",\n  \"discardChanges\": \"Discard Changes\",\n  \"discardChangesPrompt\": \"Do you want to discard changes?\",\n  \"discardChangesToDocTypePrompt\": \"Do you want to discard changes to this {{ type }}?\",\n  \"discardImageChangesPrompt\": \"Do you want to discard changes to the active image?\",\n  \"discardDraft\": \"Discard Draft\",\n  \"discardDraftAffirmativeLabel\": \"Yes, discard changes\",\n  \"discardDraftDescription\": \"This will discard all changes since the document was last published.\",\n  \"dismissSubmission\": \"Dismiss Submission\",\n  \"dismissedSubmission\": \"Dismissed submission.\",\n  \"displayName\": \"Display Name\",\n  \"docInUseByAnother\": \"Another User Is Editing\",\n  \"docInUseBySelf\": \"Editing in Another Tab or Window\",\n  \"document\": \"document\",\n  \"documentExistsInLocales\": \"This document exists in these locales:\",\n  \"documentPublishedNoPreview\": \"Document published but could not navigate to a preview.\",\n  \"documentSaved\": \"Document saved.\",\n  \"doesNotExistYet\": \"Does Not Exist Yet\",\n  \"doesNotExistYetDescription\": \"The document does not exist yet as {{ mode }} in the {{ locale }} locale.\",\n  \"download\": \"Download\",\n  \"draft\": \"Draft\",\n  \"draftDeleted\": \"Draft Deleted\",\n  \"draftDiscarded\": \"Draft Discarded\",\n  \"draftSaved\": \"Draft saved\",\n  \"draftSavedNoPreview\": \"Draft saved but could not navigate to a preview.\",\n  \"dropMedia\": \"Drop new media here\",\n  \"duplicate\": \"Duplicate...\",\n  \"edit\": \"Edit\",\n  \"editType\": \"Edit {{ type }}\",\n  \"editor\": \"Editor\",\n  \"editRelationshipFor\": \"Edit Relationship for {{ title }}\",\n  \"editWidget\": \"Edit Widget\",\n  \"editWidgetForeignTooltip\": \"Click to edit this content in its natural context\",\n  \"editWidgetType\": \"Edit {{ label }}\",\n  \"email\": \"Email\",\n  \"emptyRichTextWidget\": \"Empty Rich Text Widget\",\n  \"enabled\": \"Enabled\",\n  \"error\": \"An error occurred\",\n  \"errorCount\": \"{{ count }} error remaining\",\n  \"errorCount_plural\": \"{{ count }} errors remaining\",\n  \"errorCreatingNewContent\": \"Error while creating new, empty content.\",\n  \"errorWhileRestoring\": \"An error occurred while restoring the previously published version.\",\n  \"errorWhileUnpublishing\": \"An error occurred while unpublishing the document.\",\n  \"errorWhileArchiving\": \"An error occurred while moving the document to the archive.\",\n  \"errorWhileDismissing\": \"An Error Occurred While Dismissing\",\n  \"errorWhileDismissingDescription\": \"An error occurred while dismissing the submission.\",\n  \"errorWhilePublishing\": \"An Error Occurred While Publishing\",\n  \"errorWhilePublishingDocument\": \"An error occurred while publishing the document.\",\n  \"errorWhilePublishingParentPage\": \"An error occurred while publishing a parent page.\",\n  \"errorWhileRestoringArchive\": \"An error occurred while restoring the document from the archive.\",\n  \"errorWhileRestoringPrevious\": \"An error occurred while restoring the previously published version.\",\n  \"errorWhileSubmitting\": \"An Error Occurred While Submitting\",\n  \"errorWhileSubmittingDescription\": \"An error occurred while submitting the document.\",\n  \"errorPageMessage\": \"An error has occurred\",\n  \"errorPageStatusCode\": \"500\",\n  \"errorPageTitle\": \"An error has occurred\",\n  \"everythingElse\": \"Everything Else\",\n  \"exit\": \"Exit\",\n  \"fetchPublishedVersionFailed\": \"An error occurred fetching the published version of the document.\",\n  \"fieldHasUnpublishedChanges\": \"This field has unpublished changes\",\n  \"file\": \"File\",\n  \"fileTag\": \"File Tag\",\n  \"fileTags\": \"File Tags\",\n  \"fileTypeNotAccepted\": \"File type was not accepted. Allowed extensions: {{ extensions }}\",\n  \"fileInvalid\": \"File was not accepted. It may be corrupted or its content may not match its file extension.\",\n  \"files\": \"Files\",\n  \"filter\": \"Filter\",\n  \"filterByTag\": \"Filter by Tag\",\n  \"filterResultsByType\": \"Filter Results By Type\",\n  \"findOrAddTag\": \"Find an existing tag or add a new one\",\n  \"globalDocLabel\": \"Global Content\",\n  \"goToPage\": \"Go to page {{ page }}\",\n  \"guest\": \"Guest\",\n  \"hideInNavigation\": \"Hide in Navigation\",\n  \"home\": \"Home\",\n  \"image\": \"Image\",\n  \"imageFile\": \"Image File\",\n  \"imageTag\": \"Image Tag\",\n  \"imageTags\": \"Image Tags\",\n  \"images\": \"Images\",\n  \"insertAndRedirect\": \"{{ saveLabel }} {{ typeLabel }} and be redirected to the {{ typeLabel }}.\",\n  \"insertAndReturn\": \"{{ saveLabel }} and return to the {{ typeLabel }} listing.\",\n  \"insertAndNew\": \"{{ saveLabel }} {{ typeLabel }} and create a new one.\",\n  \"lastEdited\": \"Last Edited\",\n  \"leavePageDescription\": \"The content you're trying to edit belongs to another document and must be edited there.\\nChanges made to {{ oldTitle }} are saved automatically.\",\n  \"leavePageHeading\": \"Leave {{ oldTitle }} to edit {{ newTitle }}?\",\n  \"listJoiner\": \", \",\n  \"live\": \"Live\",\n  \"lastUpdatedBy\": \"Last saved on {{ updatedAt }} <br /> by {{ updatedBy }}\",\n  \"loadDocFailed\": \"The requested document was not found.\",\n  \"locale\": \"Locale\",\n  \"localize\": \"Localize...\",\n  \"localizeContent\": \"Localize Content\",\n  \"localized\": \"Localized the {{ type }} {{ title }} to {{ locale }}\",\n  \"localizeAllRelated\": \"Localize all related documents and overwrite existing documents\",\n  \"localizeNewRelated\": \"Localize new related documents\",\n  \"localizingBusy\": \"Localizing Content\",\n  \"login\": \"Login\",\n  \"loginDisabled\": \"Login Disabled\",\n  \"loginPageBothRequired\": \"Both the username and the password are required.\",\n  \"loginPageBadCredentials\": \"Your credentials are incorrect, or there is no such user\",\n  \"loginPageTitle\": \"Login\",\n  \"loginRequired\": \"Login Required\",\n  \"logOut\": \"Log Out\",\n  \"logOutNotLoggedIn\": \"You were not logged in.\",\n  \"manageDocType\": \"Manage {{ type }}\",\n  \"manageDraftSubmissions\": \"Manage Draft Submissions\",\n  \"managePages\": \"Manage Pages\",\n  \"mediaUploadViaDrop\": \"Drop \u2019em when you\u2019re ready\",\n  \"mediaUploadViaExplorer\": \"Or click to open the file explorer\",\n  \"moreOptions\": \"More Options\",\n  \"moreOperations\": \"More Operations\",\n  \"multipleEditors\": \"MultipleEditors\",\n  \"newDocType\": \"New {{ type }}\",\n  \"newItem\": \"New item\",\n  \"newPage\": \"New Page\",\n  \"newSearch\": \"New Search\",\n  \"next\": \"Next\",\n  \"nextPage\": \"Next Page\",\n  \"no\": \"No\",\n  \"noDraftSubmissions\": \"No Draft Submissions to Manage\",\n  \"noItemsSelected\": \"No Items Selected\",\n  \"noJustSwitchLocales\": \"No, just switch locales\",\n  \"noLongerPublished\": \"No longer published.\",\n  \"noMediaFound\": \"No media found\",\n  \"noNewRelatedDocuments\": \"Although this document has related documents, none of them are new to the locales you have selected.\",\n  \"none\": \"None\",\n  \"notFound\": \"Not found.\",\n  \"notFoundPageMessage\": \"We can't seem to find the page you're looking for.\",\n  \"notFoundPageStatusCode\": \"404\",\n  \"notFoundPageTitle\": \"404 - Page not found\",\n  \"notInLocale\": \"The current page doesn\u2019t exist in {{ label }}. Localize the version from {{ currentLocale }}?\",\n  \"noTypeFound\": \"No {{ type }} Found\",\n  \"parentNotLocalized\": \"Localize the parent page first\",\n  \"notYetPublished\": \"This document hasn't been published yet.\",\n  \"nudgeDown\": \"Nudge Down\",\n  \"nudgeUp\": \"Nudge Up\",\n  \"office\": \"Office\",\n  \"openGlobal\": \"Open Global Site Settings\",\n  \"page\": \"Page\",\n  \"pageDoesNotExistYet\": \"Page Does Not Exist Yet\",\n  \"pageDoesNotExistYetDescription\": \"The page that provides a listing for this type of piece is not yet available as {{ mode }} in the {{ locale }} locale.\",\n  \"pageIsParked\": \"This page is parked and cannot be moved\",\n  \"pageNumber\": \"Page {{ number }}\",\n  \"pageTitle\": \"Page Title\",\n  \"pages\": \"Pages\",\n  \"piecePermissionsIntro\": \"Pieces are structured content. They are often used for content like articles, events, products, categories, etc.\",\n  \"piecePermissionsPieceTypeList\": \"Pieces for this site include:\",\n  \"richTextAlignCenter\": \"Align Center\",\n  \"richTextAlignJustify\": \"Align Justify\",\n  \"richTextAlignLeft\": \"Align Left\",\n  \"richTextAlignRight\": \"Align Right\",\n  \"richTextBlockquote\": \"Blockquote\",\n  \"richTextBold\": \"Bold\",\n  \"richTextBulletedList\": \"Bulleted List\",\n  \"richTextCodeBlock\": \"Code Block\",\n  \"richTextHighlight\": \"Mark\",\n  \"richTextHorizontalRule\": \"Horizontal Rule\",\n  \"richTextItalic\": \"Italic\",\n  \"richTextLink\": \"Link\",\n  \"richTextParagraph\": \"Paragraph (P)\",\n  \"richTextH2\": \"Heading 2 (H2)\",\n  \"richTextH3\": \"Heading 3 (H3)\",\n  \"richTextH4\": \"Heading 4 (H4)\",\n  \"richTextOrderedList\": \"Ordered List\",\n  \"richTextRedo\": \"Redo\",\n  \"richTextStrikethrough\": \"Strike\",\n  \"richTextStyles\": \"Styles\",\n  \"richTextUnderline\": \"Underline\",\n  \"richTextUndo\": \"Undo\",\n  \"richTextStyleConfigWarning\": \"Misconfigured rich text style: label: {{ label }}, {{ tag }}\",\n  \"password\": \"Password\",\n  \"passwordResetRequest\": \"Your request to reset your password on {{ site }}\",\n  \"pasteWidget\": \"Paste {{ widget }}\",\n  \"pending\": \"Pending\",\n  \"pendingUpdates\": \"Pending Updates\",\n  \"permissions\": \"Permissions\",\n  \"pieceContent\": \"Piece Content\",\n  \"preview\": \"Preview\",\n  \"previewTooltip\": \"Toggle Preview Mode\",\n  \"provideButtonLabel\": \"Provide a Button Label\",\n  \"previousPage\": \"Previous Page\",\n  \"public\": \"Public\",\n  \"modernBuild\": \"public-facing modern JavaScript and Sass\",\n  \"ie11Build\": \"public-facing modern JavaScript and Sass (IE11 build)\",\n  \"publish\": \"Publish\",\n  \"publishBeforeUsingTooltip\": \"Publish this content before using it in a relationship\",\n  \"published\": \"Published\",\n  \"rawCssAndJs\": \"raw CSS and JS\",\n  \"rawHtml\": \"Raw HTML\",\n  \"rawHtmlCode\": \"Raw HTML (Code)\",\n  \"rawHtmlCodeHelp\": \"Be careful when embedding third-party code, as it can break the website editing functionality. If a page becomes unusable, add \\\"?safe_mode=1\\\" to the URL to make it work temporarily without the problem code being rendered.\",\n  \"redo\": \"Redo\",\n  \"redoTooltip\": \"Redo Change\",\n  \"redoTooltipNoChanges\": \"No Changes to Redo\",\n  \"redoFailed\": \"The operation could not be redone.\",\n  \"remove\": \"Remove\",\n  \"removeItem\": \"Remove item\",\n  \"removeLink\": \"Remove Link\",\n  \"replace\": \"Replace\",\n  \"refreshForRawHtml\": \"Refresh the page to view raw HTML.\",\n  \"relatedDocOverwriteWarning\": \"If a related document exists in the destination locale, it will be overwritten by the incoming document. This may result in loss of translation work.\",\n  \"relatedDocSettings\": \"Related Documents Settings\",\n  \"relatedDocTypesToLocalize\": \"Related document types to localize\",\n  \"relatedDocsOnly\": \"Related documents only\",\n  \"relatedDocsDefinition\": \"Related documents are documents referenced by this document. This typically includes images, content defined by relationships, etc.\",\n  \"restore\": \"Restore\",\n  \"resolveErrorsBeforeSaving\": \"Resolve errors before saving.\",\n  \"resolveErrorsFirst\": \"Resolve errors first.\",\n  \"restoreOnlyThisPage\": \"Restore only this page\",\n  \"restoreThisPageAndSubpages\": \"Restore this page and subpages\",\n  \"restoreType\": \"Restore {{ type }}\",\n  \"restoreTypeAffirmativeLabel\": \"Yes, restore {{ type }}\",\n  \"restoredPrevious\": \"Restored previously published version.\",\n  \"resumeEditing\": \"Resume Editing\",\n  \"returnToPage\": \"Return to {{ label }}\",\n  \"retryingSaveDocument\": \"Retrying save document...\",\n  \"richText\": \"Rich Text\",\n  \"safeModeActive\": \"Running in safe mode, not showing raw HTML.\",\n  \"save\": \"Save\",\n  \"saveType\": \"Save {{ type }}\",\n  \"saveDraft\": \"Save Draft\",\n  \"saveDraftDescription\": \"Save as a draft to publish later.\",\n  \"saveDraftAndCreateNew\": \"Save Draft and Create New\",\n  \"saveDraftAndCreateNewDescription\": \"Save as a draft and create a new {{ typeLabel }}.\",\n  \"saveDraftAndPreview\": \"Save Draft and Preview\",\n  \"saveDraftAndPreviewDescription\": \"Save as a draft and preview the {{ typeLabel }}.\",\n  \"savingDocument\": \"Saving document...\",\n  \"searchDocType\": \"Search {{ type }}\",\n  \"searchLocales\": \"Search Locales\",\n  \"searchLocalesPlaceholder\": \"Search locales...\",\n  \"select\": \"Select\",\n  \"selectedMenuItem\": \"\u2713 {{ label }}\",\n  \"selectAll\": \"Select All\",\n  \"selectContent\": \"Select Content\",\n  \"selectContentToLocalize\": \"What content do you want to localize?\",\n  \"selectPage\": \"Select Page\",\n  \"selectOneLabel\": \"Select {{ typeLabel }}\",\n  \"selectManyLabel\": \"Select {{ typeLabel }}\",\n  \"selectLocales\": \"Select Locales\",\n  \"sentenceJoiner\": \" \",\n  \"visibilityHelp\": \"Select whether this content is public or private\",\n  \"slug\": \"Slug\",\n  \"slugInUse\": \"Slug already in use\",\n  \"someoneElseTookControl\": \"{{ who }} took control of this document in another tab or window. A document can only be edited in one place at a time.\",\n  \"submit\": \"Submit\",\n  \"submitted\": \"Submitted\",\n  \"submittedDraft\": \"Submitted Draft\",\n  \"submittedForReview\": \"Submitted to Admins and Editors for review\",\n  \"submitUpdate\": \"Submit Update\",\n  \"suggestionsHeader\": \"Try one of these suggestions:\",\n  \"switchLocalesAndLocalizePage\": \"Switch locales and localize page to {{ label }}?\",\n  \"tags\": \"Tags\",\n  \"tagYourImages\": \"Tag your images to make searching and filtering the media manager easier\",\n  \"takeActionAndCreateNew\": \"{{ saveLabel }} and View\",\n  \"takeActionAndView\": \"{{ saveLabel }} and View\",\n  \"takeControlFromOther\": \"{{ who }} is editing that document. Do you want to take control?\",\n  \"takeControlFromSelf\": \"You are editing that document in another tab or window. Do you want to take control in this tab?\",\n  \"thereAreActiveChanges\": \"There are active changes to this document.\",\n  \"thereWasAnIssueLocalizing\": \"There was an issue localizing some content:\",\n  \"title\": \"Title\",\n  \"thisDocument\": \"This document\",\n  \"thisDocumentAndRelated\": \"This document and related documents\",\n  \"toggleEditMode\": \"Toggle Edit Mode\",\n  \"toggleSection\": \"Toggle section\",\n  \"toggleSelectionOf\": \"Toggle selection of {{ title }}\",\n  \"treeError\": \"An error occurred while updating the page tree.\",\n  \"type\": \"Type\",\n  \"typeWithCount\": \"{{ type }} ({{ count }})\",\n  \"unableToSwitchModes\": \"Unable to switch modes.\",\n  \"undo\": \"Undo\",\n  \"undoTooltip\": \"Undo Change\",\n  \"undoTooltipNoChanges\": \"No Changes to Undo\",\n  \"undoFailed\": \"The operation could not be undone.\",\n  \"undoPublish\": \"Undo Publish\",\n  \"ungrouped\": \"Ungrouped\",\n  \"ungroupedWidgets\": \"Ungrouped Widgets\",\n  \"unpublish\": \"Unpublish\",\n  \"unpublishedParent\": \"One or more parent pages have not been published\",\n  \"unpublishedParentDescription\": \"To publish this page, you must also publish the following pages: {{ unpublishedParents }}.\\nDo you want to do that now?\",\n  \"unsavedChanges\": \"Unsaved Changes\",\n  \"update\": \"Update\",\n  \"updateAndRedirect\": \"{{ saveLabel }} updates and be redirected to the {{ typeLabel }}.\",\n  \"updateAndReturn\": \"{{ saveLabel }} updates and return to the {{ typeLabel }} listing.\",\n  \"updateAndNew\": \"{{ saveLabel }} updates and create a new {{ typeLabel }}.\",\n  \"updated\": \"Updated\",\n  \"uploadError\": \"Upload Error\",\n  \"uploadForbidden\": \"You do not have permission to upload a file\",\n  \"uploaded\": \"Successfully uploaded a file\",\n  \"uploaded_plural\": \"Successfully uploaded {{ count }} files\",\n  \"uploadedMediaPlaceholder\": \"Uploaded media will appear here\",\n  \"uploading\": \"Uploading {{ name }}\",\n  \"user\": \"User\",\n  \"username\": \"Username\",\n  \"users\": \"Users\",\n  \"utility\": \"Utility\",\n  \"video\": \"Video\",\n  \"videoUrl\": \"Video URL\",\n  \"videoUrlHelp\": \"Enter the URL for a media source you wish to embed (e.g., YouTube, Vimeo, or other hosted video URL).\",\n  \"view\": \"View\",\n  \"visibility\": \"Visibility\",\n  \"visibilityLabel\": \"Who can view this?\",\n  \"willMoveImageToArchive\": \"This will move the image to the archive.\",\n  \"yes\": \"Yes\",\n  \"yesLocalizeAndSwitchLocales\": \"Yes, localize this page and switch locales\",\n  \"youTookControl\": \"You took control of this document in another tab or window. A document can only be edited in one place at a time.\"\n}\n", "{\n  \"name\": \"apostrophe\",\n  \"version\": \"3.3.1\",\n  \"description\": \"The Apostrophe Content Management System.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"pretest\": \"npm run lint && npm audit\",\n    \"test\": \"nyc --reporter=html mocha -t 10000\",\n    \"lint\": \"eslint . && node scripts/lint-i18n\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:apostrophecms/apostrophe.git\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"keywords\": [\n    \"apostrophe\",\n    \"apostrophe-cms\",\n    \"apostrophecms\",\n    \"cms\",\n    \"node cms\",\n    \"headless cms\",\n    \"content management system\"\n  ],\n  \"author\": \"Apostrophe Technologies, Inc.\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@apostrophecms/vue-color\": \"^2.8.2\",\n    \"@babel/core\": \"^7.14.3\",\n    \"@babel/preset-env\": \"^7.14.4\",\n    \"@tiptap/extension-highlight\": \"^2.0.0-beta.13\",\n    \"@tiptap/extension-link\": \"^2.0.0-beta.17\",\n    \"@tiptap/extension-text-align\": \"^2.0.0-beta.17\",\n    \"@tiptap/extension-text-style\": \"^2.0.0-beta.13\",\n    \"@tiptap/extension-underline\": \"^2.0.0-beta.14\",\n    \"@tiptap/starter-kit\": \"^2.0.0-beta.75\",\n    \"@tiptap/vue-2\": \"^2.0.0-beta.34\",\n    \"autoprefixer\": \"^10.2.4\",\n    \"babel-loader\": \"^8.2.2\",\n    \"bluebird\": \"^3.7.2\",\n    \"body-parser\": \"^1.18.2\",\n    \"boring\": \"^1.1.1\",\n    \"broadband\": \"^1.1.0\",\n    \"cheerio\": \"^1.0.0-rc.10\",\n    \"chokidar\": \"^3.5.2\",\n    \"common-tags\": \"^1.8.0\",\n    \"connect-mongo\": \"^3.0.0\",\n    \"connect-multiparty\": \"^2.1.1\",\n    \"cookie-parser\": \"^1.4.5\",\n    \"core-js\": \"~3.14.0\",\n    \"cors\": \"^2.8.5\",\n    \"credential\": \"^2.0.0\",\n    \"css-loader\": \"^5.2.4\",\n    \"cuid\": \"^1.3.8\",\n    \"dayjs\": \"^1.9.8\",\n    \"debounce-async\": \"0.0.2\",\n    \"deep-get-set\": \"^1.1.1\",\n    \"dompurify\": \"^2.3.1\",\n    \"eslint-plugin-promise\": \"^5.1.0\",\n    \"express\": \"^4.16.4\",\n    \"express-bearer-token\": \"^2.4.0\",\n    \"express-session\": \"^1.17.1\",\n    \"form-data\": \"^4.0.0\",\n    \"fs-extra\": \"^7.0.1\",\n    \"glob\": \"^5.0.15\",\n    \"he\": \"^0.5.0\",\n    \"html-to-text\": \"^5.1.1\",\n    \"i18next\": \"^20.3.2\",\n    \"i18next-http-middleware\": \"^3.1.4\",\n    \"import-fresh\": \"^3.3.0\",\n    \"is-wsl\": \"^2.2.0\",\n    \"jsdom\": \"^17.0.0\",\n    \"klona\": \"^2.0.4\",\n    \"launder\": \"^1.4.0\",\n    \"lodash\": \"^4.17.20\",\n    \"mini-css-extract-plugin\": \"^1.6.0\",\n    \"minimatch\": \"^3.0.4\",\n    \"mkdirp\": \"^0.5.5\",\n    \"mongodb\": \"^3.6.6\",\n    \"node-fetch\": \"^2.6.1\",\n    \"nodemailer\": \"^6.6.1\",\n    \"nunjucks\": \"^3.2.1\",\n    \"oembetter\": \"^1.0.1\",\n    \"passport\": \"^0.3.2\",\n    \"passport-local\": \"^1.0.0\",\n    \"path-to-regexp\": \"^1.8.0\",\n    \"performance-now\": \"^2.1.0\",\n    \"postcss-loader\": \"^5.0.0\",\n    \"prompts\": \"^2.4.1\",\n    \"qs\": \"^6.10.1\",\n    \"regenerator-runtime\": \"^0.13.7\",\n    \"regexp-quote\": \"0.0.0\",\n    \"resolve\": \"^1.19.0\",\n    \"resolve-from\": \"^5.0.0\",\n    \"sanitize-html\": \"^2.0.0\",\n    \"sass\": \"^1.34.1\",\n    \"sass-loader\": \"^10.1.1\",\n    \"server-destroy\": \"^1.0.1\",\n    \"sluggo\": \"^0.3.0\",\n    \"stylelint\": \"^13.13.0\",\n    \"stylelint-config-standard\": \"^20.0.0\",\n    \"stylelint-declaration-strict-value\": \"^1.7.12\",\n    \"stylelint-order\": \"^4.1.0\",\n    \"stylelint-webpack-plugin\": \"^2.1.1\",\n    \"tinycolor2\": \"^1.4.2\",\n    \"tough-cookie\": \"^4.0.0\",\n    \"underscore.string\": \"^3.3.4\",\n    \"uploadfs\": \"^1.17.1\",\n    \"v-tooltip\": \"^2.0.3\",\n    \"vue\": \"^2.6.14\",\n    \"vue-click-outside-element\": \"^1.0.13\",\n    \"vue-loader\": \"^15.9.6\",\n    \"vue-material-design-icons\": \"^4.9.0\",\n    \"vue-style-loader\": \"^4.1.2\",\n    \"vue-template-compiler\": \"^2.6.14\",\n    \"vuedraggable\": \"^2.24.3\",\n    \"webpack\": \"~5.44.0\",\n    \"webpack-merge\": \"^5.7.3\",\n    \"xregexp\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"^10.1.0\",\n    \"eslint\": \"^7.25.0\",\n    \"eslint-config-apostrophe\": \"^3.4.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-vue\": \"^7.9.0\",\n    \"mocha\": \"^7.1.2\",\n    \"nyc\": \"^15.1.0\",\n    \"replace-in-file\": \"^6.1.0\",\n    \"vue-eslint-parser\": \"^7.1.1\",\n    \"webpack-bundle-analyzer\": \"^3.9.0\"\n  },\n  \"browserslist\": [\n    \"ie >= 10\"\n  ]\n}\n"], "filenames": ["CHANGELOG.md", "modules/@apostrophecms/attachment/index.js", "modules/@apostrophecms/i18n/i18n/en.json", "package.json"], "buggy_code_start_loc": [1, 4, 130, 59], "buggy_code_end_loc": [1, 1073, 130, 72], "fixing_code_start_loc": [2, 5, 131, 60], "fixing_code_end_loc": [8, 1136, 132, 75], "type": "CWE-79", "message": "Apostrophe CMS versions between 2.63.0 to 3.3.1 are vulnerable to Stored XSS where an editor uploads an SVG file that contains malicious JavaScript onto the Images module, which triggers XSS once viewed.", "other": {"cve": {"id": "CVE-2021-25978", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-11-07T18:15:07.620", "lastModified": "2021-11-09T18:21:12.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Apostrophe CMS versions between 2.63.0 to 3.3.1 are vulnerable to Stored XSS where an editor uploads an SVG file that contains malicious JavaScript onto the Images module, which triggers XSS once viewed."}, {"lang": "es", "value": "Apostrophe CMS versiones entre la 2.63.0 y la 3.3.1, son vulnerables a un ataque de tipo XSS almacenado, en el que un editor carga un archivo SVG que contiene JavaScript malicioso en el m\u00f3dulo de im\u00e1genes, lo que desencadena un ataque de tipo XSS una vez visualizado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apostrophecms:apostrophecms:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.63.0", "versionEndIncluding": "3.3.1", "matchCriteriaId": "CCE7D4A0-5A5B-4617-BFEC-2BD0ACE0312D"}]}]}], "references": [{"url": "https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59"}}