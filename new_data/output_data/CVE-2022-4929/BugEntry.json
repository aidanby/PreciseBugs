{"buggy_code": ["(function (window) {\r\n\r\n    window.TTSUtils = {\r\n\r\n        statics: {\r\n            breakText: '&&break&&',\r\n            gap: '&&gap&&',\r\n            dropdown: '&&dropdown&&',\r\n            correct: '&&correct&&',\r\n            wrong: '&&wrong&&',\r\n            empty: '&&empty&&',\r\n            nonBreakingSpace: '\\u00A0',\r\n            textNodeId: 3\r\n        },\r\n\r\n        GENDER: {\r\n            MASCULINE: 0,\r\n            FEMININE: 1,\r\n            NEUTER: 2\r\n        },\r\n\r\n        getTextVoiceArrayFromElement: function($element, presenterLangTag) {\r\n            var $clone = $('<div></div>').append($element.clone());\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n            $clone = this._prepareLists($clone);\r\n            $clone = this._addEndingSpace($clone);\r\n\r\n            var splitTexts = $clone.text().split(this.statics.breakText);\r\n            var TextVoiceArray = [];\r\n            for (var i = 0; i<splitTexts.length; i++) {\r\n                TextVoiceArray.push(this.getTextVoiceObject(splitTexts[i].trim(), presenterLangTag));\r\n            }\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        getTextVoiceArrayFromElementWithGaps: function($element, presenterLangTag, speechTextsModel) {\r\n            var $clone = $('<div></div>').append($element.clone());\r\n\r\n\r\n            var speechTexts = {\r\n                gap: 'gap',\r\n                dropdown: 'dropdown',\r\n                correct: 'correct',\r\n                empty: 'empty',\r\n                wrong: 'wrong'\r\n            };\r\n            if (speechTextsModel) {\r\n                if(speechTextsModel.gap) speechTexts.gap = speechTextsModel.gap;\r\n                if(speechTextsModel.dropdown) speechTexts.dropdown = speechTextsModel.dropdown;\r\n                if(speechTextsModel.correct) speechTexts.correct = speechTextsModel.correct;\r\n                if(speechTextsModel.wrong) speechTexts.wrong = speechTextsModel.wrong;\r\n                if(speechTextsModel.empty) speechTexts.empty = speechTextsModel.empty;\r\n            }\r\n\r\n            $element.find('select[id]').each( function() { //jquery.clone doesn't copy select values\r\n                var id = $(this).attr('id');\r\n                $clone.find('#'+id).val($(this).val());\r\n            });\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n            $clone = this._prepareGaps($clone);\r\n            $clone = this._prepareLists($clone);\r\n            $clone = this._addEndingSpace($clone);\r\n\r\n            var TextVoiceArray = this._parseRawText($clone.text(), speechTexts, presenterLangTag);\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        getTextVoiceArrayFromGap: function($gap, $gapContainer, presenterLangTag, speechTextsModel) {\r\n            var $clone = $('<div></div>').append($gap.clone());\r\n\r\n            var speechTexts = {\r\n                gap: 'gap',\r\n                dropdown: 'dropdown',\r\n                correct: 'correct',\r\n                empty: 'empty',\r\n                wrong: 'wrong'\r\n            };\r\n            if (speechTextsModel) {\r\n                if (speechTextsModel.gap) speechTexts.gap = speechTextsModel.gap;\r\n                if (speechTextsModel.dropdown) speechTexts.dropdown = speechTextsModel.dropdown;\r\n                if (speechTextsModel.correct) speechTexts.correct = speechTextsModel.correct;\r\n                if (speechTextsModel.wrong) speechTexts.wrong = speechTextsModel.wrong;\r\n                if (speechTextsModel.empty) speechTexts.empty = speechTextsModel.empty;\r\n            }\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n\r\n            // ensure the correct gap index when $element is a gap\r\n            var gapIndex = 0;\r\n            $gapContainer.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(index){\r\n                if($(this).is($gap)){\r\n                    gapIndex = index;\r\n                }\r\n            });\r\n\r\n            if($gap.is('select')){\r\n                $clone.find('select').val($gap.val());\r\n            }\r\n\r\n            $clone = this._prepareGaps($clone, gapIndex);\r\n\r\n            return this._parseRawText($clone.text(), speechTexts, presenterLangTag);\r\n        },\r\n\r\n        getTextVoiceObject: function (text, lang) {return {text: text, lang: lang};},\r\n\r\n        getSpeechTextProperty: function (rawValue, defaultValue) {\r\n            var value = rawValue.trim();\r\n\r\n            if (value === undefined || value === null || value === '') {\r\n                return defaultValue;\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        parsePreviewAltText: function (text) {\r\n            text = text.replace(/\\\\alt{([^{}|]*?)\\|[^{}|]*?}(\\[[a-zA-Z0-9_\\- ]*?\\])*/g, '$1'); // replace \\alt{a|b}[c] with a\r\n            text = text.replace(/\\\\alt{([^|{}]*?)\\|[^|{}]*?}/g, '$1'); // replace \\alt{a|b} with a\r\n            return text;\r\n        },\r\n\r\n        numberToPolishNumber: function(n) {\r\n            if (n === 0)\r\n                return 'zero';\r\n\r\n            var textUnits = ['', 'jeden', 'dwa', 'trzy', 'cztery', 'pi\\u0119\\u0107', 'sze\\u015b\\u0107', 'siedem', 'osiem', 'dziewi\\u0119\\u0107'];\r\n            var textTeens = ['', 'jedena\\u015bcie', 'dwana\\u015bcie', 'trzyna\\u015bcie', 'czterna\\u015bcie', 'pi\\u0119tna\\u015bcie', 'szesna\\u015bcie', 'siedemna\\u015bcie', 'osiemna\\u015bcie', 'dziewi\\u0119tna\\u015bcie'];\r\n            var textTens = ['', 'dziesi\\u0119\\u0107', 'dwadzie\\u015bcia', 'trzydzie\\u015bci', 'czterdzie\\u015bci', 'pi\\u0119\\u0107dziesi\\u0105t', 'sze\\u015b\\u0107dziesi\\u0105t', 'siedemdziesi\\u0105t', 'osiemdziesi\\u0105t', 'dziewi\\u0119\\u0107dziesi\\u0105t'];\r\n            var textHundreds = ['', 'sto', 'dwie\\u015bcie', 'trzysta', 'czterysta', 'pi\\u0119\\u0107set', 'sze\\u015b\\u0107set', 'siedemset', 'osiemset', 'dziewi\\u0119\\u0107set'];\r\n\r\n            var units = Math.floor(n % 10);\r\n            var tens = Math.floor((n / 10) % 10);\r\n            var hundreds = Math.floor((n / 100) % 10);\r\n            var thousands = Math.floor((n % Math.pow(10, 6)) / Math.pow(10, 3));\r\n            var millions = Math.floor((n % Math.pow(10, 9)) / Math.pow(10, 6));\r\n            var billions = Math.floor((n % Math.pow(10, 12)) / Math.pow(10, 9));\r\n\r\n            var nAsText = '';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(billions, ['miliard', 'miliardy', 'miliard\\u00f3w'], true) + ' ';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(millions, ['milion', 'miliony', 'milion\\u00f3w'], true) + ' ';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(thousands, ['tysi\\u0105c', 'tysi\\u0105ce', 'tysi\\u0119cy'], true) + ' ';\r\n            nAsText += textHundreds[hundreds] + ' ';\r\n\r\n            var numberEndsWithTeens = (tens === 1 && units != 0);\r\n            if (numberEndsWithTeens)\r\n                nAsText += textTeens[units];\r\n            else\r\n                nAsText += textTens[tens] + ' ' + textUnits[units];\r\n\r\n            return this._removeExtraSpaces(nAsText);\r\n        },\r\n\r\n        numberToPolishOrdinalNumber: function(n, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE;\r\n            }\r\n            if (n === 0)\r\n                return this._simpleChangePolishWordGender('zerowy', gender);\r\n            return this._getTextNonOrdinalPartOfNumber(n) + ' ' + this._getTextOrdinalPartOfNumber(n, gender);\r\n        },\r\n\r\n        numberToOrdinalNumber: function(n, language, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE;\r\n            }\r\n            if (['pl', 'pl-pl', 'polish'].includes(language.toLowerCase()))\r\n                return this.numberToPolishOrdinalNumber(n, gender);\r\n            return n;\r\n        },\r\n\r\n        _prepareAltTexts: function($clone) {\r\n            $clone.find('[aria-hidden=\"true\"]').remove();\r\n\r\n            $clone.find('[aria-label]').each(function(){\r\n                var replaceText = $(this).attr('aria-label');\r\n                var sanitizedText = window.xssUtils.sanitize(replaceText);\r\n                var langTag = $(this).attr('lang');\r\n                if (langTag && langTag.trim().length > 0 ) {\r\n                    sanitizedText = '\\\\alt{ |' + sanitizedText + '}' + '[lang ' + langTag + ']';\r\n                }\r\n                $(this).append(sanitizedText);\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _prepareImages: function($clone) {\r\n            var breakText = this.statics.breakText;\r\n\r\n            $clone.find('img[alt]').each(function(){\r\n                var altText = $(this).attr('alt');\r\n                $('<span>' + breakText + '</span>').insertBefore($(this));\r\n                $('<span>' + breakText + '</span>').insertAfter($(this));\r\n                $('<span>' + altText + '</span>').insertAfter($(this));\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _prepareLists: function($clone) {\r\n            $clone.find('ol > li').each(function(){\r\n                var index = 0;\r\n                var currentElement = this;\r\n                while (currentElement != null) {\r\n                    if (currentElement.nodeName && currentElement.nodeName.toLowerCase()  == \"li\") {\r\n                        index += 1;\r\n                        if (currentElement.hasAttribute(\"value\")) {\r\n                            var value = currentElement.getAttribute(\"value\");\r\n                            if (!isNaN(value)) {\r\n                                index += parseInt(value) - 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    currentElement = currentElement.previousSibling;\r\n                }\r\n                this.innerHTML = \". \" + index + \": \" + this.innerHTML;\r\n                this.setAttribute(\"value\", index);\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _addEndingSpace: function($clone) {\r\n            var self = this;\r\n            function isTextNode(node) {\r\n                return node != null && node.nodeType == self.statics.textNodeId;\r\n            }\r\n\r\n            function endsWithPunctuation(text) {\r\n                var trimmedText = text.replaceAll(self.statics.nonBreakingSpace, \" \").replaceAll(\"&nbsp;\", \" \").trim();\r\n                if (trimmedText.length === 0) return true; //text node with only white spaces should be ignored\r\n                var punc = \".,;?!\";\r\n                for (var i = 0; i < punc.length; i++) {\r\n                    if (trimmedText.endsWith(punc[i])) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            $clone.find('div, p').each(function(){\r\n                originalHTML = this.innerHTML;\r\n                if (isTextNode(this.previousSibling) && !endsWithPunctuation(this.previousSibling.wholeText)) {\r\n                    originalHTML = \".\" + self.statics.nonBreakingSpace + originalHTML;\r\n                }\r\n                if (isTextNode(this.lastChild) && !endsWithPunctuation(this.innerText)) {\r\n                    originalHTML = originalHTML + \".\" + self.statics.nonBreakingSpace;\r\n                }\r\n                originalHTML = originalHTML + self.statics.nonBreakingSpace;\r\n                this.innerHTML = originalHTML;\r\n            });\r\n            return $clone;\r\n        },\r\n\r\n        _prepareGaps: function($clone, gapIndex) {\r\n            var breakText = this.statics.breakText;\r\n            var gap = this.statics.gap;\r\n            var dropdown = this.statics.dropdown;\r\n            var correct = this.statics.correct;\r\n            var wrong = this.statics.wrong;\r\n            var empty = this.statics.empty;\r\n\r\n            $clone.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(index){\r\n                if (gapIndex) {\r\n                    $(this).attr('index', gapIndex + 1);\r\n                } else {\r\n                    $(this).attr('index', index + 1);\r\n                }\r\n            });\r\n\r\n            $clone.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(){\r\n                var $self = $(this);\r\n                var index = $self.attr('index');\r\n\r\n                var prefix = '';\r\n                if ($self.is('select')) {\r\n                    prefix = breakText + dropdown + ' ' + index + breakText;\r\n                } else {\r\n                    prefix = breakText + gap + ' ' + index + breakText;\r\n                }\r\n\r\n                var value = '';\r\n                if ($self.is('select, input')) {\r\n                    value = $self.val();\r\n                } else {\r\n                    value = $self.text();\r\n                }\r\n                if (value.length === 0 || ($self.is('select') && (value === '-' || value === '---'))) {\r\n                    if ($self.hasClass('ic_gap-empty')) {\r\n                        value = '';\r\n                    } else {\r\n                        value = empty + breakText;\r\n                    }\r\n                } else {\r\n                    value = value + breakText;\r\n                }\r\n\r\n                var suffix = '';\r\n                if ($self.hasClass('ic_gap-correct')) {\r\n                    suffix = correct + breakText;\r\n                } else if ($self.hasClass('ic_gap-wrong')) {\r\n                    suffix = wrong + breakText;\r\n                } else if ($self.hasClass('ic_gap-empty')) {\r\n                    suffix = empty + breakText;\r\n                }\r\n\r\n                var $newElement = $('<span>' + prefix + value + suffix + '</span>');\r\n                $self.replaceWith($newElement);\r\n            });\r\n            return $clone;\r\n        },\r\n\r\n        _parseRawText: function(content, speechTexts, presenterLangTag) {\r\n            var splitTexts = content.split(this.statics.breakText);\r\n            var TextVoiceArray = [];\r\n            for (var i = 0; i < splitTexts.length; i++) {\r\n                if(splitTexts[i].trim().length == 0){\r\n                    continue;\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.gap) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.gap, speechTexts.gap);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.dropdown) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.dropdown, speechTexts.dropdown);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.correct) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.correct, speechTexts.correct);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else  if (splitTexts[i].trim().indexOf(this.statics.wrong) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.wrong, speechTexts.wrong);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.empty) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.empty, speechTexts.empty);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else {\r\n                    TextVoiceArray.push(this.getTextVoiceObject(splitTexts[i].trim(), presenterLangTag));\r\n                }\r\n            }\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        focusInvisibleElement: function() {\r\n            $('#input_element_for_focus_to_change_focused_element_by_browser').focus();\r\n        },\r\n\r\n        _removeExtraSpaces: function(str) {\r\n            return str.replace(/\\s+/g,\" \").trim();\r\n        },\r\n\r\n        _reverseString: function(str) {\r\n            var newString = \"\";\r\n            for (var i = (str.length - 1); i >= 0; i--) {\r\n                newString += str[i];\r\n            }\r\n            return newString;\r\n        },\r\n\r\n        _removeLastWord: function(str) {\r\n            var lastWordIndex = str.lastIndexOf(\" \");\r\n            return str.substring(0, lastWordIndex);\r\n        },\r\n\r\n        _simpleChangePolishWordGender: function(word, gender) {\r\n            if (word === '' || ![this.GENDER.MASCULINE, this.GENDER.FEMININE, this.GENDER.NEUTER].includes(gender))\r\n                return word;\r\n\r\n            var genderCharacter = 'y';\r\n            if (gender === this.GENDER.FEMININE)\r\n                genderCharacter = 'a';\r\n            else if (gender === this.GENDER.NEUTER)\r\n                genderCharacter = 'e';\r\n\r\n            var lastCharacter = word.slice(word.length - 1);\r\n            var lastCharacterIsAGenderCharacter = ['a', 'e', 'y'].includes(lastCharacter);\r\n\r\n            if (lastCharacterIsAGenderCharacter)\r\n                return word.slice(0, -1) + genderCharacter;\r\n            return word + genderCharacter;\r\n        },\r\n\r\n        _partOfNumberToBigElementOfPolishNumber: function(n, wordsDescribingNumber, skipZero) {\r\n            if (!skipZero) {\r\n                skipZero = false;\r\n            }\r\n            if (n === 0 && skipZero)\r\n                return '';\r\n\r\n            var numberEndsWith2or3or4 = [2, 3, 4].includes(n % 10);\r\n\r\n            if (n === 1)\r\n                return ' ' + wordsDescribingNumber[0] + ' ';\r\n            else if (numberEndsWith2or3or4)\r\n                return this.numberToPolishNumber(n) + ' ' + wordsDescribingNumber[1] + ' ';\r\n            return this.numberToPolishNumber(n) + ' ' + wordsDescribingNumber[2] + ' ';\r\n        },\r\n\r\n        _getOrdinalPartOfNumber: function(n) {\r\n            var reversedOrdinalPart = '';\r\n\r\n            var nAsString = n.toString();\r\n            var unitsJustAdded;\r\n            for (var i = (nAsString.length - 1); i >= 0; i--) {\r\n                reversedOrdinalPart += nAsString[i];\r\n\r\n                if (nAsString[i] !== '0') {\r\n                    unitsJustAdded = ((nAsString.length - i - 1) % 3 === 0)\r\n                    if (unitsJustAdded && i > 0) {\r\n                        reversedOrdinalPart += nAsString[i - 1];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            return parseInt(this._reverseString(reversedOrdinalPart));\r\n        },\r\n\r\n        _getTextNonOrdinalPartOfNumber: function(n) {\r\n            numberLength = n.toString().length;\r\n            var ordinalPartAsStr = this._getOrdinalPartOfNumber(n).toString();\r\n            var ordinalPartLength = ordinalPartAsStr.length;\r\n            var numberWithoutOrdinalPart = Math.floor(n / Math.pow(10, ordinalPartLength)) * Math.pow(10, ordinalPartLength);\r\n\r\n            var hasNonOrdinalPart = (ordinalPartLength !== numberLength);\r\n            if (!hasNonOrdinalPart)\r\n                return '';\r\n            var nAsText = this.numberToPolishNumber(numberWithoutOrdinalPart);\r\n\r\n            var ordinalPartSize = Math.floor((ordinalPartLength - 1) / 3);\r\n            var nonOrdinalPartWithoutOrdinalPartSize = Math.floor(n / Math.pow(10, (ordinalPartSize + 1) * 3)) * Math.pow(10, (ordinalPartSize + 1) * 3);\r\n\r\n            var ordinalPartIsABigNumber = (ordinalPartLength > 3);\r\n            var nonOrdinalPartContainsOrdinalPartSize = (nonOrdinalPartWithoutOrdinalPartSize !== numberWithoutOrdinalPart);\r\n\r\n            if (ordinalPartIsABigNumber && nonOrdinalPartContainsOrdinalPartSize)\r\n                nAsText = this._removeLastWord(nAsText);\r\n\r\n            return this._removeExtraSpaces(nAsText)\r\n        },\r\n\r\n        _getTextOrdinalPartOfNumber: function(n, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE\r\n            }\r\n            var textUnits = ['', 'pierwszy', 'drugi', 'trzeci', 'czwarty', 'pi\\u0105ty', 'sz\\u00f3sty', 'si\\u00f3dmy', '\\u00f3smy', 'dziewi\\u0105ty'];\r\n            var textTeens = ['', 'jedenasty', 'dwunasty', 'trzynasty', 'czternasty', 'pi\\u0119tnasty', 'szesnasty', 'siedemnasty', 'osiemnasty', 'dziewi\\u0119tnasty'];\r\n            var textTens = ['', 'dziesi\\u0105ty', 'dwudziesty', 'trzydziesty', 'czterdziesty', 'pi\\u0119\\u0107dziesi\\u0105ty', 'sze\\u015b\\u0107dziesi\\u0105ty', 'siedemdziesi\\u0105ty', 'osiemdziesi\\u0105ty', 'dziewi\\u0119\\u0107dziesi\\u0105ty'];\r\n            var textHundreds = ['', 'setny', 'dwusetny', 'trzysetny', 'czterysetny', 'pi\\u0119\\u0107setny', 'sze\\u015b\\u0107setny', 'siedemsetny', 'osiemsetny', 'dziewi\\u0119\\u0107setny'];\r\n\r\n            var textBigUnits = ['', 'jedno', 'dwu', 'trzy', 'cztero', 'pi\\u0119cio', 'sze\\u015bcio', 'siedmio', 'o\\u015bmio', 'dziewi\\u0119cio'];\r\n            var textBigTeens = ['', 'jedenasto', 'dwunasto', 'trzynasto', 'czternasto', 'pi\\u0119tnasto', 'szesnasto', 'siedemnasto', 'osiemnasto', 'dziewi\\u0119tnasto'];\r\n            var textBigTens = ['', 'dziesi\\u0119cio', 'dwudziesto', 'trzydziesto', 'czterdziesto', 'pi\\u0119\\u0107dziesi\\u0119cio', 'sze\\u015b\\u0107dziesi\\u0119cio', 'siedemdziesi\\u0119cio', 'osiemdziesi\\u0119cio', 'dziewi\\u0119\\u0107dziesi\\u0119cio'];\r\n            var textBigHundreds = ['', 'stu', 'dwustu', 'trzystu', 'czterystu', 'pi\\u0119ciuset', 'sze\\u015bciuset', 'siedmuset', 'o\\u015bmiuset', 'dziewi\\u0119ciuset'];\r\n            var sizes = ['', 'tysi\\u0119czny', 'milionowy', 'miliardowy'];\r\n\r\n            textUnits.forEach(function(element, index, array) {\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textTeens.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textTens.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textHundreds.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            sizes.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n\r\n            if (gender === this.GENDER.FEMININE) {\r\n                textUnits[2] = 'druga';\r\n            }\r\n\r\n            var ordinalPart = this._getOrdinalPartOfNumber(n);\r\n            var ordinalPartAsStr = ordinalPart.toString();\r\n            var ordinalPartLength = ordinalPartAsStr.length;\r\n\r\n            var ordinalPartIsUnits = ((ordinalPartLength - 1) % 3 === 0);\r\n            var ordinalPartIsTens = ((ordinalPartLength - 1) % 3 === 1);\r\n            var ordinalPartIsTeens = (ordinalPartIsTens && ordinalPartAsStr[0] === '1' && ordinalPartAsStr[1] !== '0');\r\n            var ordinalPartIsHundreds = ((ordinalPartLength - 1) % 3 === 2);\r\n            var size = sizes[Math.floor((ordinalPartLength - 1) / 3)];\r\n\r\n            if (ordinalPartLength === 1)\r\n                ordinalPartAsText = textUnits[ordinalPartAsStr[0]];\r\n            else if (ordinalPartIsTeens && ordinalPartLength === 2)\r\n                ordinalPartAsText = textTeens[ordinalPartAsStr[1]];\r\n            else if (ordinalPartLength === 2)\r\n                ordinalPartAsText = (textTens[ordinalPartAsStr[0]] + ' ' + textUnits[ordinalPartAsStr[1]]).trim();\r\n            else if (ordinalPartLength === 3)\r\n                ordinalPartAsText = textHundreds[ordinalPartAsStr[0]];\r\n            else {\r\n                if (ordinalPartIsUnits)\r\n                    ordinalPartAsText = textBigUnits[ordinalPartAsStr[0]];\r\n                else if (ordinalPartIsTeens)\r\n                    ordinalPartAsText = textBigTeens[ordinalPartAsStr[1]];\r\n                else if (ordinalPartIsTens)\r\n                    ordinalPartAsText = (textBigTens[ordinalPartAsStr[0]] + ' ' + textBigUnits[ordinalPartAsStr[1]]).trim();\r\n                else if (ordinalPartIsHundreds)\r\n                    ordinalPartAsText = textBigHundreds[ordinalPartAsStr[0]];\r\n\r\n                ordinalPartAsText += size;\r\n            }\r\n\r\n            return this._removeExtraSpaces(ordinalPartAsText);\r\n        }\r\n    }\r\n})(window);", "function AddonTable_create() {\n\n    /*\n        INTEGRATION WITH MATH MODULE:\n            Table supports integration with Math module. Table which is not activity, will show answers provided by\n            Math module. Requires implementation of methods and variables listed below.\n\n            Attributes:\n                @param isConnectedWith {boolean}  required by Math module, to detect if table is connected with Math\n\n            Methods:\n                presenter.setGapAnswer (gapIndex, answer, answersLength) - method used by Math to set gap answer at\n                    show answers when table is not activity. Gap index based by DOM occurence order. 1-n based\n\n                presenter.setUserValue (gapIndex, value) - method used by Math module to restore user answer at hide answers\n\n                presenter.getValue (gapIndex) - method used by Math module to get user value in gap by index\n\n                presenter.isActivity - method used by Math module to determine if addon is activity\n     */\n\n\n    var presenter = function () {\n    };\n\n    var isConnectedWithMath = false;\n    presenter.gapsSize = [];\n    presenter.isSetShowErrorsMode = false;\n    presenter.keyboardControllerObject = null;\n    presenter.isWCAGOn = false;\n    presenter.gapNavigation = false;\n    presenter.addonKeyboardNavigationActive = false;\n    presenter.gapIndex = 0;\n    presenter.isGradualShowAnswersActive = false;\n    presenter.printableState = null;\n    presenter.printableStateMode = null;\n    presenter.printableParserID = null;\n    presenter.printableParserCallback = null;\n\n    presenter.ERROR_CODES = {\n        'RW_01': 'Number of rows must be a positive integer!',\n        'CL_01': 'Number of columns must be a positive integer!',\n        'CO_01': 'Row number must be a positive integer!',\n        'CO_02': 'Column number must be a positive integer',\n        'CO_03': 'Row number must be a number from 1 to rows count!',\n        'CO_04': 'Column number must be a number from 1 to columns count',\n        'CO_05': 'Each table cell can be defined only once!',\n        'CO_06': 'Empty table cell definition must contain only one empty element!',\n        'CR_00': 'Column and row numbers must be sequential within one table cell',\n        'CW_01': \"Number of items in 'Columns width' property cannot be higher than number of columns!\",\n        'RH_01': \"Number of items in 'Rows height' property cannot be higher than number of rows!\",\n        'GW_01': \"Gap width incorrect!\"\n    };\n\n    presenter.replaceGapID = function (gap, parsedText) {\n        var gapID = presenter.configuration.addonID + gap.id;\n        var patt = new RegExp(\"id=\\\"\" + gap.id + \"\\\"\");\n        var rep = \"id=\\\"\" + gapID + \"\\\"\";\n        return  parsedText.replace(patt, rep);\n    };\n\n    function getParsedHTMLView () {\n        return presenter.textParser.parseGaps(presenter.$view.html(),\n            {\n                isCaseSensitive: presenter.configuration.isCaseSensitive,\n                isKeepOriginalOrder: presenter.configuration.keepOriginalOrder\n            }\n        );\n    }\n\n    presenter.parseGaps = function (isPreview) {\n        if (presenter.configuration.gapType === \"draggable\") {\n            return presenter.parseGapsWrapper(presenter.DraggableDroppableGap, isPreview);\n        } else {\n            return presenter.parseGapsWrapper(presenter.EditableInputGap, isPreview);\n        }\n    };\n\n    function changeInlineGapsIDs (inlineGaps, parsedText) {\n        inlineGaps.forEach(function (gap) {\n            parsedText = presenter.replaceGapID(gap, parsedText);\n            var gapID = presenter.configuration.addonID + gap.id;\n\n            presenter.gapsContainer.addGap(new presenter.SelectGap(gapID, [gap.answer], gap.value));\n        });\n\n        return parsedText;\n    }\n\n    function changeSimpleGapsIDs (simpleGaps, parsedText, objectType) {\n        simpleGaps.forEach(function (gap) {\n            parsedText = presenter.replaceGapID(gap, parsedText);\n            var gapID = presenter.configuration.addonID + gap.id;\n            presenter.gapsContainer.addGap(new objectType(gapID, gap.answers, 1));\n        });\n\n        return parsedText;\n    }\n\n    presenter.parseGapsWrapper = function (objectType, isPreview) {\n        var textParserResult = getParsedHTMLView();\n\n        var parsedText = textParserResult.parsedText;\n        parsedText = changeSimpleGapsIDs(textParserResult.gaps, parsedText, objectType);\n        parsedText = changeInlineGapsIDs(textParserResult.inLineGaps, parsedText, objectType);\n\n        presenter.$view.html(parsedText);\n\n        if(!isPreview){\n            presenter.getInputsSize();\n        }\n    };\n\n    presenter.getInputsSize = function () {\n        presenter.$view.find('input').each(function () {\n            var inputID = $(this).attr('id'),\n                inputSize = $(this).attr('size');\n\n            presenter.gapsSize.push({id : inputID, size: inputSize})\n        });\n    };\n\n    presenter.setGapsClassAndWidth = function () {\n        presenter.$view.find('.ic_inlineChoice').addClass('ic_gap');\n        presenter.$view.find('.ic_inlineChoice').css('width', presenter.configuration.gapWidth.value+\"px\");\n    };\n\n    presenter.initializeGaps = function (isPreview) {\n        presenter.parseGaps(isPreview);\n\n        if (presenter.hasMathGaps()){\n            presenter.gapsContainer.gaps = [];\n            $(presenter.$view).find('input').each(function () {\n                $(this).replaceWith(\n                    generateMathGap(\n                        $(this).attr('id'),\n                        presenter.configuration.gapWidth.value\n                    )\n                );\n            });\n        }\n\n        presenter.gapsContainer.replaceDOMViewWithGap();\n        presenter.setGapsClassAndWidth();\n    };\n\n    /**\n     * String generated by this function can be replaced by MathJax to input.\n     * See media/js/forminput.js\n     * @param id\n     * @param width\n     */\n    function generateMathGap(id, width) {\n        return `\\\\gap{${id}|1|${width}|{{value:${id}}}}`;\n    }\n\n    function deleteCommands () {\n        delete presenter.getScore;\n        delete presenter.getMaxScore;\n        delete presenter.getState;\n        delete presenter.setState;\n        delete presenter.getGapTextCommand;\n        delete presenter.getGapTextCommand;\n        delete presenter.markGapAsEmptyCommand;\n        delete presenter.markGapAsCorrectCommand;\n        delete presenter.markGapAsWrongCommand;\n        delete presenter.enableGapCommand;\n        delete presenter.enableAllGaps;\n        delete presenter.disableGapCommand;\n        delete presenter.disableAllGaps;\n        delete presenter.isAttempted;\n    }\n\n    function replaceInputsInPreview () {\n        if (presenter.configuration.gapType === \"draggable\") {\n            var inputs = presenter.$wrapper.find(\"input\");\n\n            for (var i = 0; i < inputs.length; i++) {\n                $(inputs[i]).replaceWith(presenter.DraggableDroppableGap.prototype.createView());\n            }\n        }\n    }\n\n    presenter.logic = function (view, model, isPreview) {\n        presenter.$view = $(view);\n        presenter.$wrapper = presenter.$view.find('.table-addon-wrapper');\n        presenter.configuration = presenter.validateModel(presenter.upgradeModel(model));\n        presenter.isPreview = isPreview;\n\n        if (presenter.hasMathGaps()){\n            var mathJaxDeferred = new jQuery.Deferred();\n            presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;\n            presenter.mathJaxProcessEnded = mathJaxDeferred.promise();\n\n            MathJax.Hub.Register.MessageHook(\"End Process\", function (message) {\n                if ($(message[1]).hasClass('ic_page')) {\n                    presenter.mathJaxProcessEndedDeferred.resolve();\n                }\n            });\n        }\n\n        if (!presenter.configuration.isValid) {\n            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);\n            deleteCommands();\n            return;\n        }\n\n        presenter.mainLogic(isPreview);\n\n        if (presenter.hasMathGaps()){\n            presenter.mathJaxProcessEnded.then(function() {\n                MathJax.CallBack.Queue().Push(function () {\n                    if(!isPreview){\n                        presenter.renderMathJax();\n                        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());\n                        var checkSelector = setInterval(function () {\n                            if ($(presenter.$view).find('input').length > 0) {\n                                presenter.gapsContainer.gaps = [];\n                                $(presenter.$view).find('input').each(function (_, index) {\n                                    for(var i = 0; i < presenter.gapsAnswers.length; i++){\n                                        if(presenter.gapsAnswers[i].id === $(this).attr('id')){\n                                            var correctAnswers = presenter.gapsAnswers[i].answers;\n                                        }\n                                    }\n                                    presenter.gapsContainer.addGap(new presenter.EditableInputGap($(this).attr('id'), correctAnswers, 1));\n                                });\n                                clearInterval(checkSelector);\n                                presenter.eventBus.sendEvent('ValueChanged', []);\n                            }\n                        }, 100);\n                    }\n                });\n            });\n        }\n\n        if(isPreview) {\n            presenter.setEditorGapWidth();\n        } else {\n            presenter.setInputsSize();\n        }\n    };\n\n    presenter.setInputsSize = function () {\n        for (var i = 0; i < presenter.gapsSize.length; i++) {\n            var inputId = presenter.gapsSize[i].id,\n                size = presenter.gapsSize[i].size;\n\n            presenter.$view.find('#'+inputId).attr('size', size);\n        }\n    };\n\n    presenter.setEditorGapWidth = function () {\n        presenter.$view.find('input').css(\"width\", presenter.configuration.gapWidth.value+\"px\");\n        presenter.$view.find('span').css(\"width\", presenter.configuration.gapWidth.value+\"px\");\n    };\n\n    presenter.mainLogic = function (isPreview) {\n        presenter.gapsContainer = new presenter.GapsContainerObject();\n\n        var $table = presenter.generateTable(presenter.configuration.contents, isPreview);\n        presenter.setColumnWidth($table, presenter.configuration.columnsWidths, presenter.configuration.rowsHeights);\n        presenter.setRowHeight($table, presenter.configuration.rowsHeights);\n        presenter.setVisibility(presenter.configuration.isVisible || isPreview);\n\n        presenter.initializeGaps(isPreview);\n\n        if (!isPreview) {\n            presenter.parseDefinitionLinks();\n        } else {\n            replaceInputsInPreview();\n            presenter.setGapsClassAndWidth();\n            presenter.$view.find('input').attr(\"size\", \"auto\");\n            if (presenter.configuration.gapType === \"draggable\") {\n                presenter.$view.find('input').addClass(\"draggable-gap\");\n            }\n        }\n\n        presenter.gapsContainer.replaceGapsDOMWithView();\n        presenter.lastDraggedItem = {};\n\n        if (presenter.configuration.isDisabledByDefault) {\n            presenter.gapsContainer.lockAllGaps();\n        }\n\n        presenter.buildKeyboardController();\n    };\n\n    presenter.setPlayerController = function (controller) {\n        presenter.playerController = controller;\n        presenter.textParser = new TextParserProxy(controller.getTextParser());\n\n    };\n\n    presenter.setEventBus = function (eventBus) {\n        presenter.eventBus = eventBus;\n\n        presenter.eventBus.addEventListener('ShowAnswers', this);\n        presenter.eventBus.addEventListener('HideAnswers', this);\n        presenter.eventBus.addEventListener('ItemSelected', this);\n        presenter.eventBus.addEventListener('ItemConsumed', this);\n        presenter.eventBus.addEventListener('GradualShowAnswers', this);\n        presenter.eventBus.addEventListener('GradualHideAnswers', this);\n    };\n\n    presenter.setTextParser = function (textParser) {\n        presenter.textParser = new TextParserProxy(textParser());\n    };\n\n    presenter.getSelectedItem = function () {\n        var item = presenter.lastDraggedItem;\n\n        presenter.lastDraggedItem = {};\n\n        return item;\n    };\n\n    presenter.createPreview = function (view, model) {\n        presenter.logic(view, model, true);\n    };\n\n    presenter.run = function (view, model) {\n        presenter.logic(view, model, false);\n    };\n\n    presenter.reset = function () {\n        presenter.gapsContainer.reset();\n        presenter.setVisibility(presenter.configuration.isVisibleByDefault);\n        presenter.isSetShowErrorsMode = false;\n        presenter.attemptedGaps = [];\n    };\n\n    presenter.getState = function () {\n        var spans;\n        var gaps = presenter.gapsContainer.getGapsState();\n\n        if (presenter.configuration.gapType === \"draggable\") {\n            spans = presenter.gapsContainer.getState();\n        } else {\n            spans = null;\n        }\n\n        return JSON.stringify({\n            gaps: gaps,\n            isVisible: presenter.configuration.isVisible,\n            spans: spans\n        });\n    };\n\n    presenter.setState = function (rawState) {\n        var state = JSON.parse(rawState);\n\n        presenter.setVisibility(state.isVisible);\n        presenter.configuration.isVisible = state.isVisible;\n        presenter.attemptedGaps = state.attemptedGaps === undefined ? presenter.attemptedGaps : state.attemptedGaps;\n\n        if (presenter.hasMathGaps()) {\n            var checkSelector = setInterval(\n                function () {\n                    if ($(presenter.$view).find('.mathGap').length === presenter.gapsAnswers.length) {\n                        try{\n                            presenter.gapsContainer.setGapsState(state.gaps);\n                            presenter.gapsContainer.setSpansState(state.spans);\n                            clearInterval(checkSelector);\n                        } catch (e) { }\n                    }\n                }, 100);\n        } else {\n            presenter.gapsContainer.setGapsState(state.gaps);\n            presenter.gapsContainer.setSpansState(state.spans);\n        }\n    };\n\n    /**\n     * Generate table row (tr) element. Each cell has col_C and row_R classes where R is row number\n     * (counted from 1 to rows count) and C is column number (from 1 to columns count).\n     *\n     * @param row row number counted from 0\n     * @param content row content array\n     * @param isPreview\n     *\n     * @return {jQuery} jQuery reference to new table row element\n     */\n    presenter.generateRow = function (row, content, isPreview) {\n        var $rowElement = $(document.createElement('tr')), i, length;\n\n        for (i = 0, length = content.length; i < length; i++) {\n            if (!content[i]) continue;\n\n            var $element;\n            if ((row === 0 && presenter.configuration.isFirstRowHeader) ||\n                (i === 0 && presenter.configuration.isFirstColumnHeader)) {\n                $element = $(document.createElement('th'));\n            } else {\n                $element = $(document.createElement('td'));\n            }\n\n            $element.addClass('table_cell');\n            $element.addClass('row_' + (row + 1));\n            $element.addClass('col_' + (i + 1));\n            $element.html(content[i].content);\n            $element.attr({\n                colspan: content[i].colSpan,\n                rowspan: content[i].rowSpan\n            });\n\n            if ( presenter.configuration.isTabindexEnabled) {\n                $element.attr('tabindex', '0');\n            }\n\n            if (content[i].class) {\n                $element.addClass(content[i].class)\n            }\n            if (content[i].style) {\n                $element.attr({style:content[i].style})\n            }\n\n            $rowElement.append($element);\n        }\n\n        return $rowElement;\n    };\n\n    presenter.parseDefinitionLinks = function () {\n        $.each(presenter.$view.find('.table_cell'), function (index, element) {\n            const sanitizedLink = window.xssUtils.sanitize(presenter.textParser.parse($(element).html()));\n            $(element).html(sanitizedLink);\n        });\n\n        presenter.textParser.connectLinks(presenter.$view);\n    };\n\n    /**\n     * Generate table element with content based on provided array.\n     *\n     * @param content array with table cells contents\n     * @param isPreview\n     *\n     * @return {jQuery} jQuery reference to new table element\n     */\n    presenter.generateTable = function (content, isPreview) {\n        var $table = $(document.createElement('table'));\n\n        for (var i = 0, length = content.length; i < length; i++) {\n            var $row = presenter.generateRow(i, content[i], isPreview);\n\n            $table.append($row);\n        }\n\n        presenter.$wrapper.html($table);\n\n        return $table;\n    };\n\n    presenter.setColumnWidth = function ($table, columnWidth, rowsHeights) {\n        var i = 0;\n        if (presenter.configuration.newWidthCalculate) {\n            var rowsNumber = rowsHeights.length;\n            var columsNumber = columnWidth.length;\n            for (var row = 1; row <= rowsNumber; row++) {\n                var foundedRow = $table.find('.row_' + row);\n                for (i = 0; i < columsNumber; i++) {\n                    $(foundedRow[i]).css('width', columnWidth[i]);\n                }\n            }\n        } else {\n            var firstRow = $table.find('.row_1');\n\n            for (i = 0; i < columnWidth.length; i++) {\n                $(firstRow[i]).css('width', columnWidth[i]);\n            }\n        }\n};\n\n\n    presenter.setRowHeight = function ($table, rowHeight) {\n        var i;\n        for (i = 0; i < rowHeight.length; i++) {\n            $table.find('.row_' + (i + 1)).each(function () {\n                $(this).css('height', rowHeight[i]);\n            });\n        }\n    };\n\n    /**\n     * Validate content list and convert it into multidimensional {Array}. Not specified contents equals empty elements.\n     *\n     * @param content list of content definition (consist Row, Column and Content fields)\n     * @param rowsCount number of rows\n     * @param columnsCount number of columns\n     *\n     * @return {Object} validation result\n     * @return {Boolean} isValid\n     * @return {String} error code if any occurs\n     * @return {Array} contents array of contents. Dimensions based on Rows and Columns properties\n     */\n    presenter.validateContent = function (content, rowsCount, columnsCount) {\n        var validatedContent = [], controlArray = [], c, r;\n\n        for (r = 0; r < rowsCount; r++) {\n            validatedContent[r] = [];\n            controlArray[r] = [];\n\n            for (c = 0; c < columnsCount; c++) {\n                validatedContent[r][c] = { content: \"\", rowSpan: 1, colSpan: 1 };\n                controlArray[r][c] = false;\n            }\n        }\n\n        if (ModelValidationUtils.isArrayElementEmpty(content[0])) {\n            if (content.length === 1) {\n                return { isValid: true, content: validatedContent };\n            } else {\n                return { isValid: false, errorCode: 'CO_06' };\n            }\n        }\n\n        for (var i = 0, length = content.length; i < length; i++) {\n            var rows = presenter.validateSequence(content[i].Row, rowsCount, true);\n            if (!rows.isValid)  return { isValid: false, errorCode: rows.errorCode };\n\n            var columns = presenter.validateSequence(content[i].Column, columnsCount, false);\n            if (!columns.isValid)  return { isValid: false, errorCode: columns.errorCode };\n\n            for (r = 0; r < rows.values.length; r++) {\n                for (c = 0; c < columns.values.length; c++) {\n                    var row = rows.values[r] - 1;\n                    var column = columns.values[c] - 1;\n\n                    if (controlArray[row][column]) return { isValid: false, errorCode: 'CO_05' };\n                    controlArray[row][column] = true;\n\n                    if (r === 0 && c === 0) {\n                        validatedContent[row][column] = {\n                            content: content[i].Content,\n                            rowSpan: rows.values.length,\n                            colSpan: columns.values.length,\n                            class : content[i].hasOwnProperty(\"CSS Class\") ? content[i][\"CSS Class\"] : \"\",\n                            style: content[i].hasOwnProperty(\"CSS Style\") ? content[i][\"CSS Style\"] : \"\"\n                        };\n                    } else {\n                        validatedContent[row][column] = undefined;\n                    }\n                }\n            }\n        }\n\n        return { isValid: true, content: validatedContent };\n    };\n\n    presenter.validateSingleNumber = function (column, columnsCount, isRowValidated) {\n        var validatedColumn = ModelValidationUtils.validatePositiveInteger(column);\n\n        if (!validatedColumn.isValid) return { isValid: false, errorCode: isRowValidated ? 'CO_01' : 'CO_02'};\n        if (validatedColumn.value > columnsCount) return { isValid: false, errorCode: isRowValidated ? 'CO_03' : 'CO_04' };\n\n        return {isValid: true, value: validatedColumn.value };\n    };\n\n    presenter.validateSequence = function (columns, columnsCount, isRowValidated) {\n        var values = [], validatedColumn, splittedColumns, i;\n\n        splittedColumns = columns.indexOf(',') === -1 ? [columns] : columns.split(',');\n\n        for (i = 0; i < splittedColumns.length; i++) {\n            validatedColumn = presenter.validateSingleNumber(splittedColumns[i], columnsCount, isRowValidated);\n\n            if (!validatedColumn.isValid) return { isValid: false, errorCode: validatedColumn.errorCode };\n\n            values.push(validatedColumn.value);\n        }\n\n        if (values.length > 1) {\n            for (i = 1; i < values.length; i++) {\n                if (values[i - 1] + 1 !== values[i]) {\n                    return { isValid: false, errorCode: 'CR_00' };\n                }\n            }\n        }\n\n        return { values: values, isValid: true };\n    };\n\n    presenter.convertDimensionsArray = function (columnWidth, columnsCount, propertyName) {\n        if (columnWidth.length > columnsCount) return { isValid: false };\n\n        var widths = [], value, i;\n        for (i = 0; i < columnWidth.length; i++) {\n            if (ModelValidationUtils.isStringEmpty(columnWidth[i][propertyName])) {\n                value = 'auto';\n            } else {\n                value = columnWidth[i][propertyName];\n            }\n\n            widths.push(value);\n        }\n\n        if (columnWidth.length < columnsCount) {\n            for (i = columnWidth.length; i < columnsCount; i++) {\n                widths.push('auto');\n            }\n        }\n\n        return { isValid: true, dimensions: widths };\n    };\n\n    function getSpeechTextProperty (rawValue, defaultValue) {\n        var value = rawValue.trim();\n\n        if (value === undefined || value === null || value === '') {\n            return defaultValue;\n        }\n\n        return value;\n    }\n\n    presenter.setSpeechTexts = function(speechTexts) {\n        presenter.speechTexts = {\n            correct:  'correct',\n            wrong: 'wrong',\n            empty: 'empty',\n            gap: 'gap',\n            dropdown: 'dropdown',\n            inserted: 'inserted',\n            removed: 'removed',\n            cell: 'cell',\n            row: 'row',\n            column: 'column',\n            rowSpan: 'row span',\n            colSpan: 'column span'\n        };\n\n        if (!speechTexts) {\n            return;\n        }\n\n        presenter.speechTexts = {\n            correct:    getSpeechTextProperty(speechTexts['Correct']['Correct'], presenter.speechTexts.correct),\n            wrong: getSpeechTextProperty(speechTexts['Wrong']['Wrong'], presenter.speechTexts.wrong),\n            empty:  getSpeechTextProperty(speechTexts['Empty']['Empty'], presenter.speechTexts.empty),\n            gap:     getSpeechTextProperty(speechTexts['Gap']['Gap'], presenter.speechTexts.gap),\n            dropdown:   getSpeechTextProperty(speechTexts['Dropdown']['Dropdown'], presenter.speechTexts.dropdown),\n            inserted:      getSpeechTextProperty(speechTexts['Inserted']['Inserted'], presenter.speechTexts.inserted),\n            removed:        getSpeechTextProperty(speechTexts['Removed']['Removed'], presenter.speechTexts.removed),\n            cell:        getSpeechTextProperty(speechTexts['Cell']['Cell'], presenter.speechTexts.cell),\n            row:        getSpeechTextProperty(speechTexts['Row']['Row'], presenter.speechTexts.row),\n            column:        getSpeechTextProperty(speechTexts['Column']['Column'], presenter.speechTexts.column),\n            rowSpan:        getSpeechTextProperty(speechTexts['RowSpan']['RowSpan'], presenter.speechTexts.rowSpan),\n            colSpan:        getSpeechTextProperty(speechTexts['ColSpan']['ColSpan'], presenter.speechTexts.colSpan)\n        };\n    };\n\n    /**\n     * Validate user input configuration.\n     *\n     * @param model {Array} of properties injected into Addon\n     *\n     * @return {Object} validation result\n     * @return {Boolean} isValid\n     * @return {String} error code if any occurs\n     * @return {Object} contents array of contents. Dimensions based on Rows and Columns properties\n     */\n    presenter.validateModel = function (model) {\n\n        presenter.setSpeechTexts(model['speechTexts']);\n\n        if (model[\"newWidthCalculate\"] === undefined) {\n            model[\"newWidthCalculate\"] = false;\n        }\n\n        var validatedRows = ModelValidationUtils.validatePositiveInteger(model.Rows);\n        if (!validatedRows.isValid) {\n            return { isValid: false, errorCode: 'RW_01' };\n        }\n\n        var validatedColumns = ModelValidationUtils.validatePositiveInteger(model.Columns);\n        if (!validatedColumns.isValid) {\n            return { isValid: false, errorCode: 'CL_01' };\n        }\n\n        var validatedContents = presenter.validateContent(model[\"Table cells\"], validatedRows.value, validatedColumns.value);\n        if (!validatedContents.isValid) {\n            return { isValid: false, errorCode: validatedContents.errorCode };\n        }\n\n        var convertedColumnWidth = presenter.convertDimensionsArray(model[\"Columns width\"], validatedColumns.value, 'Width');\n        if (!convertedColumnWidth.isValid) {\n            return { isValid: false, errorCode: 'CW_01' };\n        }\n\n        var convertedRowWidths = presenter.convertDimensionsArray(model[\"Rows height\"], validatedRows.value, 'Height');\n        if (!convertedRowWidths.isValid) {\n            return { isValid: false, errorCode: 'RH_01' };\n        }\n\n        var gapWidth = { isSet: false, value: undefined };\n        if (!ModelValidationUtils.isStringEmpty(model[\"Gap width\"])) {\n            var validatedGapWidth = ModelValidationUtils.validatePositiveInteger(model[\"Gap width\"]);\n            if (!validatedGapWidth.isValid) {\n                return { isValid: false, errorCode: 'GW_01' };\n            } else {\n                gapWidth = { isSet: true, value: validatedGapWidth.value };\n            }\n        }\n\n        var isFirstRowHeader = ModelValidationUtils.validateBoolean(model[\"isFirstRowHeader\"]);\n        var isFirstColumnHeader = ModelValidationUtils.validateBoolean(model[\"isFirstColumnHeader\"]);\n\n        var isVisible = ModelValidationUtils.validateBoolean(model[\"Is Visible\"]);\n\n        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);\n\n        return {\n            addonID: model.ID,\n            isValid: true,\n            contents: validatedContents.content,\n            columnsWidths: convertedColumnWidth.dimensions,\n            rowsHeights: convertedRowWidths.dimensions,\n            isVisible: isVisible,\n            isVisibleByDefault: isVisible,\n            isActivity: !ModelValidationUtils.validateBoolean(model[\"Is not an activity\"]),\n            isNotActivity: ModelValidationUtils.validateBoolean(model[\"Is not an activity\"]),\n            isDisabledByDefault: ModelValidationUtils.validateBoolean(model[\"Is disabled\"]),\n            isPunctuationIgnored: ModelValidationUtils.validateBoolean(model[\"Ignore punctuation\"]),\n            isCaseSensitive: ModelValidationUtils.validateBoolean(model[\"Case sensitive\"]),\n            newWidthCalculate: ModelValidationUtils.validateBoolean(model[\"newWidthCalculate\"]),\n            gapWidth: gapWidth,\n            gapType: model[\"Gap Type\"],\n            isTabindexEnabled: isTabindexEnabled,\n            columnsCount: validatedColumns.value,\n            rowsCount: validatedRows.value,\n            langTag: model[\"langAttribute\"],\n            useNumericKeyboard: ModelValidationUtils.validateBoolean(model[\"useNumericKeyboard\"]),\n            keepOriginalOrder: ModelValidationUtils.validateBoolean(model[\"keepOriginalOrder\"]),\n            isFirstRowHeader: isFirstRowHeader,\n            isFirstColumnHeader: isFirstColumnHeader\n        };\n    };\n\n    presenter.addColumnsWidth = function (model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model[\"Columns width\"]) {\n            upgradedModel[\"Columns width\"] = [\n                { Width: \"\" }\n            ];\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addRowHeights = function (model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model[\"Rows height\"]) {\n            upgradedModel[\"Rows height\"] = [\n                { Height: \"\" }\n            ];\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addLangTag = function AddonTable_addLangTag(model) {\n         var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model['langAttribute']) {\n            upgradedModel['langAttribute'] =  '';\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addSpeechTexts = function(model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model['speechTexts']) {\n            upgradedModel['speechTexts'] = {\n                Gap: {Gap: \"Gap\"},\n                Dropdown: {Dropdown: \"Dropdown\"},\n                Correct: {Correct: \"Correct\"},\n                Wrong: {Wrong: \"Wrong\"},\n                Empty: {Empty: \"Empty\"},\n                Inserted: {Inserted: \"Inserted\"},\n                Removed: {Removed: \"Removed\"},\n                Cell: {Cell: \"Cell\"}\n            }\n        }\n        return upgradedModel;\n    };\n\n    presenter.addUseNumericKeyboard = function (model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model); // Deep copy of model object\n\n        if(model.useNumericKeyboard === undefined) {\n            upgradedModel[\"useNumericKeyboard\"] = \"False\";\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addKeepOriginalOrder = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model); // Deep copy of model object\n\n        if(model.keepOriginalOrder === undefined) {\n            upgradedModel[\"keepOriginalOrder\"] = \"False\";\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addHeaders = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model);\n\n        if (model.isFirstRowHeader === undefined) {\n            upgradedModel[\"isFirstRowHeader\"] = \"False\";\n        }\n\n        if (model.isFirstColumnHeader === undefined) {\n            upgradedModel[\"isFirstColumnHeader\"] = \"False\";\n        }\n\n        if (model['speechTexts'][\"Row\"] === undefined) {\n            upgradedModel['speechTexts'][\"Row\"] = {Row: \"Row\"};\n        }\n\n        if (model['speechTexts'][\"Column\"] === undefined) {\n            upgradedModel['speechTexts'][\"Column\"] = {Column: \"Column\"};\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addSpanSpeechTexts = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model);\n\n        if (model['speechTexts'][\"RowSpan\"] === undefined) {\n            upgradedModel['speechTexts'][\"RowSpan\"] = {RowSpan: \"Row span\"};\n        }\n\n        if (model['speechTexts'][\"ColSpan\"] === undefined) {\n            upgradedModel['speechTexts'][\"ColSpan\"] = {ColSpan: \"Column span\"};\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.upgradeModel = function (model) {\n        var upgradedModel = presenter.addColumnsWidth(model);\n        upgradedModel = presenter.addRowHeights(upgradedModel);\n        upgradedModel = presenter.addLangTag(upgradedModel);\n        upgradedModel = presenter.addSpeechTexts(upgradedModel);\n        upgradedModel = presenter.addUseNumericKeyboard(upgradedModel);\n        upgradedModel = presenter.addKeepOriginalOrder(upgradedModel);\n        upgradedModel = presenter.addHeaders(upgradedModel);\n        upgradedModel = presenter.addSpanSpeechTexts(upgradedModel);\n        return upgradedModel;\n    };\n\n    presenter.setVisibility = function (isVisible) {\n        presenter.$view.css(\"visibility\", isVisible ? \"visible\" : \"hidden\");\n    };\n\n    presenter.show = function () {\n        presenter.setVisibility(true);\n        presenter.configuration.isVisible = true;\n        presenter.enableAllGaps();\n    };\n\n    presenter.hide = function () {\n        presenter.setVisibility(false);\n        presenter.configuration.isVisible = false;\n        presenter.disableAllGaps();\n    };\n\n    presenter.getGapText = function (gapIndex) {\n        return executeFunctionOnGap(gapIndex, \"getGapValueByIndex\");\n    };\n\n    presenter.getGapValue = function (gapIndex) {\n        return presenter.getGapText(gapIndex);\n    };\n\n    presenter.getGapTextCommand = function (params) {\n        return presenter.getGapText(parseInt(params[0], 10));\n    };\n\n    function executeFunctionOnGap(gapIndex, functionToCall) {\n        var validatedGapIndex = presenter.validateGapIndex(gapIndex);\n\n        if (validatedGapIndex.isValid) {\n            return presenter.gapsContainer[functionToCall](validatedGapIndex.index);\n        }\n    }\n\n    presenter.validateGapIndex = function (gapIndex) {\n        if (isNaN(gapIndex) || gapIndex < 1 || gapIndex > presenter.gapsContainer.getLength()) {\n            return {isValid: false};\n        }\n\n        return {\n            isValid: true,\n            index: parseInt(gapIndex, 10) - 1\n        };\n    };\n\n\n    presenter.markGapAsCorrect = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsCorrect\");\n    };\n\n    presenter.markGapAsCorrectCommand = function (params) {\n        presenter.markGapAsCorrect(parseInt(params[0], 10));\n    };\n\n    presenter.markGapAsWrong = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsWrong\");\n    };\n\n    presenter.markGapAsWrongCommand = function (params) {\n        presenter.markGapAsWrong(parseInt(params[0], 10));\n    };\n\n    presenter.markGapAsEmpty = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsEmpty\");\n    };\n\n    presenter.markGapAsEmptyCommand = function (params) {\n        presenter.markGapAsEmpty(parseInt(params[0], 10));\n    };\n\n    presenter.enableGap = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"unlockGapByIndex\");\n    };\n\n    presenter.enableGapCommand = function (params) {\n        presenter.enableGap(parseInt(params[0], 10));\n    };\n\n    presenter.enableAllGaps = function () {\n        presenter.gapsContainer.unlockAllGaps();\n    };\n\n    presenter.disableGap = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"lockGapByIndex\");\n    };\n\n    presenter.disableGapCommand = function (params) {\n        presenter.disableGap(parseInt(params[0], 10));\n    };\n\n    presenter.disableAllGaps = function () {\n        presenter.gapsContainer.lockAllGaps();\n    };\n\n    presenter.getView = function() {\n        return presenter.$view;\n    };\n\n    presenter.isAllOK = function() {\n        var score = presenter.getScore();\n        return score === presenter.getMaxScore() && score !== 0;\n    };\n\n    presenter.executeCommand = function (name, params) {\n        var commands = {\n            'disableAllGaps': presenter.disableAllGaps,\n            'disableGap': presenter.disableGapCommand,\n            'enableAllGaps': presenter.enableAllGaps,\n            'enableGap': presenter.enableGapCommand,\n            'getGapText': presenter.getGapTextCommand,\n            'getGapValue': presenter.getGapTextCommand,\n            'getView': presenter.getView,\n            'hide': presenter.hide,\n            'isAllOK': presenter.isAllOK,\n            'isAttempted': presenter.isAttempted,\n            'markGapAsCorrect': presenter.markGapAsCorrectCommand,\n            'markGapAsEmpty': presenter.markGapAsEmptyCommand,\n            'markGapAsWrong': presenter.markGapAsWrongCommand,\n            'show': presenter.show\n        };\n\n        return Commands.dispatch(commands, name, params, presenter);\n    };\n\n    presenter.sendAllOKEvent = function () {\n        var eventData = {\n            'source': presenter.configuration.addonID,\n            'item': 'all',\n            'value': '',\n            'score': ''\n        };\n\n        presenter.eventBus.sendEvent('ValueChanged', eventData);\n    };\n\n    presenter.getMaxScore = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getMaxScore();\n    };\n\n    presenter.getScore = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getScore();\n    };\n\n    presenter.getErrorCount = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getErrorCount();\n    };\n\n    presenter.setShowErrorsMode = function () {\n        if (!presenter.isSetShowErrorsMode) {\n            presenter.gapsContainer.check();\n            presenter.isSetShowErrorsMode = true;\n        }\n\n        if (isConnectedWithMath) {\n            presenter.gapsContainer.unlockAllGaps();\n            presenter.gapsContainer.lockAllNotEmptyGaps();\n        }\n    };\n\n    presenter.setWorkMode = function () {\n        if (presenter.isSetShowErrorsMode) {\n            presenter.gapsContainer.check();\n            presenter.isSetShowErrorsMode = false;\n        }\n\n        presenter.gapsContainer.removeAllGapsClasses();\n\n        if (isConnectedWithMath) {\n            presenter.gapsContainer.unlockAllGaps();\n        }\n    };\n\n    presenter.createEventData = function (item, value, score) {\n        return {\n            source: presenter.configuration.addonID,\n            item: \"\" + item,\n            value: \"\" + value,\n            score: \"\" + score\n        };\n    };\n\n    presenter.onEventReceived = function (eventName, eventData) {\n        switch (eventName) {\n            case \"ShowAnswers\":\n                presenter.showAnswers();\n                break;\n            case \"HideAnswers\":\n                presenter.hideAnswers();\n                break;\n            case \"GradualShowAnswers\":\n                if (!presenter.isGradualShowAnswersActive) {\n                    presenter.isGradualShowAnswersActive = true;\n                }\n                if (eventData.moduleID === presenter.configuration.addonID) {\n                    presenter.gradualShowAnswers(parseInt(eventData.item, 10));\n                }\n                break;\n            case \"GradualHideAnswers\":\n                presenter.gradualHideAnswers();\n                break;\n            case \"ItemSelected\":\n                if(presenter.configuration.isVisible) {\n                    presenter.lastDraggedItem = eventData;\n                }\n                break;\n            case \"ItemConsumed\":\n                const isEqualToDraggedValue = presenter.lastDraggedItem.value && eventData.value === presenter.lastDraggedItem.value\n                const isEqualToDraggedItem = presenter.lastDraggedItem.item && eventData.item === presenter.lastDraggedItem.item\n\n                if (isEqualToDraggedValue  && isEqualToDraggedItem && presenter.configuration.isVisible) {\n                    presenter.lastDraggedItem = {};\n                }\n                break;\n            default:\n                break;\n            \n        }\n    };\n\n    presenter.showAnswers = function () {\n        if (presenter.configuration.isActivity) {\n            presenter.gapsContainer.showAnswers();\n            presenter.isShowAnswersActive = true;\n            presenter.isSetShowErrorsMode = false;\n            presenter.renderMathJax();\n        } else {\n            if (presenter.isSetShowErrorsMode) {\n                presenter.setWorkMode();\n                \n                if (isConnectedWithMath) {\n                    presenter.disableAllGaps();\n                }\n            }\n        }\n    };\n\n    presenter.hideAnswers = function () {\n        if (!presenter.isShowAnswersActive) {\n            return;\n        }\n\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            presenter.gapsContainer.hideAnswers();\n            if (isConnectedWithMath){\n                presenter.gapsContainer.unlockAllGaps();\n            }\n            presenter.isShowAnswersActive = false;\n            presenter.isSetShowErrorsMode = false;\n            presenter.renderMathJax();\n        }\n    };\n\n    presenter.getCSSConfiguration = function () {\n        return {\n            correct: \"ic_gap-correct\",\n            wrong: \"ic_gap-wrong\",\n            showAnswers: \"ic_gap-show-answers\",\n            block: \"ic_gap-empty\",\n            droppableHover: \"table-addon-gap-highlight\"\n        };\n    };\n\n    presenter.GapUtils = function (configuration) {\n        if(!presenter.isPreview){\n            DraggableDroppableObject.call(this, configuration, presenter.getCSSConfiguration());\n        }\n\n        this.gapScore = configuration.gapScore;\n        this.gapType = presenter.GapUtils.GAP_TYPE.NORMAL;\n        this.isDisabled = false;\n        this.isEnabled = true;\n        this.mathShowAnswersValue = \"\";\n        this.mathCSSClass = \"math-answer\";\n        this.valueChangeObserver = new presenter.ValueChangeObserver();\n        this.isAttempted = false;\n    };\n\n    presenter.GapUtils.prototype = Object.create(DraggableDroppableObject.prototype);\n    presenter.GapUtils.parent = DraggableDroppableObject.prototype;\n\n    presenter.GapUtils.GAP_TYPE = {\n        NORMAL: 0,\n        SELECT: 1\n    };\n\n    presenter.GapUtils.prototype.getParsedCorrectAnswers = function () {\n        return this.showAnswersValue.map(function (value) {\n            return this.parseValue(value);\n        }, this);\n    };\n\n    presenter.GapUtils.prototype.getParsedValue = function () {\n        return this.parseValue(this.getValue());\n    };\n\n    presenter.GapUtils.prototype.isCorrect = function () {\n        var correctAnswers = this.getParsedCorrectAnswers();\n        var value = this.getParsedValue();\n\n        return (correctAnswers.indexOf(value) !== -1);\n    };\n\n    presenter.GapUtils.prototype.parseValue = function (value) {\n        if(presenter.hasMathGaps()) {\n            return value;\n        }\n\n        if (!presenter.configuration.isCaseSensitive) {\n            value = value.toLowerCase();\n        }\n\n        if (presenter.configuration.isPunctuationIgnored) {\n            value = value.replace(/\\W/g, '');\n        }\n\n        return value.trim();\n    };\n\n    presenter.GapUtils.prototype.isValueEmpty = function () {\n        var value = this.getValue().trim();\n        return value.length === 0 || (this.gapType===1 && 0 === value.localeCompare(\"---\")); //gapType===1 is the dropdown gap\n    };\n\n    presenter.GapUtils.prototype.setCssOnCorrect = function () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        DraggableDroppableObject.prototype.setCssOnCorrect.call(this);\n    };\n\n    presenter.GapUtils.prototype.setCssOnUnCorrect = function () {\n        this.removeAllClasses();\n    };\n\n    presenter.GapUtils.prototype.onBlock = function () {\n        if (!this.isDisabled) {\n            this.lock();\n        }\n    };\n\n    presenter.GapUtils.prototype.onUnblock = function () {\n        if (this.isDisabled && this.isEnabled) {\n            this.unlock();\n        }\n    };\n\n    presenter.GapUtils.prototype.onCorrect = function () {\n        this.onBlock();\n    };\n\n    presenter.GapUtils.prototype.onUnCorrect = function () {\n        this.onUnblock();\n    };\n\n    presenter.GapUtils.prototype.onWrong = function () {\n        this.onBlock();\n    };\n\n    presenter.GapUtils.prototype.onUnWrong = function () {\n        this.onUnblock();\n    };\n\n    presenter.GapUtils.prototype.setCssOnWrong = function () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        if (this.isValueEmpty()) {\n            this.addCssClass('ic_gap-empty');\n            return;\n        }\n\n        DraggableDroppableObject.prototype.setCssOnWrong.call(this);\n    };\n\n    presenter.GapUtils.prototype.setCssOnUnWrong = function () {\n        this.removeAllClasses();\n    };\n\n    presenter.GapUtils.prototype.setCssOnShowAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            DraggableDroppableObject.prototype.setCssOnShowAnswers.call(this);\n        }\n\n        if (isConnectedWithMath) {\n            this.addCssClass(this.mathCSSClass);\n        }\n    };\n\n    presenter.GapUtils.prototype.setCssOnHideAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            DraggableDroppableObject.prototype.setCssOnHideAnswers.call(this);\n    \t}\n\n        if (isConnectedWithMath) {\n            this.removeCssClass(this.mathCSSClass);\n        }\n    };\n\n    presenter.GapUtils.prototype.onShowAnswers = function () {\n        if (presenter.configuration.isActivity) {\n            this.onBlock();\n            this.setViewValue(this.showAnswersValue[0]);\n        }\n\n        if (isConnectedWithMath) {\n            this.onBlock();\n            this.setViewValue(this.mathShowAnswersValue);\n        }\n    };\n\n    presenter.GapUtils.prototype.onHideAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            this.setViewValue(this.value);\n            this.onUnblock();\n        }\n    };\n\n    presenter.GapUtils.prototype.setGapWidth = function () {\n        if (presenter.configuration.gapWidth.isSet && !presenter.isPreview) {\n            this.$view.width(presenter.configuration.gapWidth.value + 'px');\n        }\n    };\n\n    presenter.GapUtils.prototype.removeAllClasses = function () {\n        this.removeCssClass('ic_gap-correct');\n        this.removeCssClass('ic_gap-wrong');\n        this.removeCssClass('ic_gap-empty');\n    };\n\n    presenter.GapUtils.prototype.getScore = function () {\n        return this.isCorrect() ? this.gapScore : 0;\n    };\n\n    presenter.GapUtils.prototype.getErrorCount = function () {\n        if (this.getValue().trim() === \"\") {\n            return 0;\n        }\n\n        return this.isCorrect() ? 0 : 1;\n    };\n\n    presenter.GapUtils.prototype.notify = function () {\n        if (this.isValueEmpty()) {\n            this.isAttempted = false;\n        } else {\n            this.isAttempted = true;\n        }\n\n        this.valueChangeObserver.notify(this.getValueChangeEventData());\n    };\n\n    /**\n     *\n     * @returns {{objectID: (string|*), isCorrect: boolean, value: string}}\n     */\n    presenter.GapUtils.prototype.getValueChangeEventData = function () {\n        return {\n            objectID: this.getObjectID(),\n            isCorrect: this.isCorrect(),\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.setIsEnabled = function (isEnabled) {\n        if (this.isDisabled && isEnabled) {\n            this.unlock();\n        }\n\n        if (!this.isDisabled && !isEnabled) {\n            this.lock();\n        }\n\n        this.isEnabled = isEnabled;\n    };\n\n    presenter.GapUtils.prototype.setMathShowAnswersValue = function (value) {\n        this.mathShowAnswersValue = value;\n    };\n\n    presenter.GapUtils.prototype.getGapState = function () {\n        return {\n            isAttempted: this.isAttempted,\n            isEnabled: this.isEnabled,\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.getState = function () {\n        return {\n            droppedElement: this.getDroppedElement(),\n            isAttempted: this.isAttempted,\n            item: this.getSource(),\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.setState = function (configuration) {\n        var value = configuration.value;\n        var source = configuration.source;\n        var isEnabled = configuration.isEnabled;\n        var droppedElement = configuration.droppable;\n        this.isAttempted = configuration.isAttempted === undefined ? false : configuration.isAttempted;\n\n        if (presenter.configuration.gapType === \"draggable\") {\n            DraggableDroppableObject.prototype.setState.call(this, value, source, droppedElement);\n        } else {\n            this.value = value;\n            this.source = source;\n            this.setViewValue(value);\n        }\n\n        if (isEnabled !== undefined) {\n            this.setIsEnabled(isEnabled);\n        }\n    };\n\n    presenter.GapUtils.prototype.onReset = function () {\n        DraggableDroppableObject.prototype.onReset.call(this);\n\n        if (presenter.configuration.isDisabledByDefault) {\n            this.setIsEnabled(false);\n        } else {\n            this.setIsEnabled(true);\n        }\n\n        this.removeAllClasses();\n        this.removeCssClass(\"gapFilled\");\n        this.isAttempted = false;\n    };\n\n    presenter.GapUtils.prototype.setAttempted = function (value) {\n        this.isAttempted = value;\n    };\n\n\n    presenter.SelectGap = function (htmlID, correctAnswer, gapScore) {\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n\n            showAnswersValue: correctAnswer,\n\n            connectEvents: presenter.SelectGap.prototype.connectEvents,\n            setViewValue: presenter.SelectGap.prototype.setViewValue,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n\n        this.gapType = presenter.GapUtils.GAP_TYPE.SELECT;\n        this.setGapWidth();\n    };\n\n    presenter.SelectGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.SelectGap.constructor = presenter.SelectGap;\n\n    presenter.SelectGap.prototype.connectEvents = function () {\n        this.$view.off('change').bind('change', this.onEdit.bind(this));\n    };\n\n    presenter.SelectGap.prototype.onEdit = function (event) {\n        this.notifyEdit();\n        this.value = this.$view.find(\":selected\").text();\n        this.notify();\n    };\n\n    presenter.SelectGap.prototype.setViewValue = function (value) {\n        var escaped = presenter.textParser.escapeXMLEntities(value);\n        this.$view.val(escaped);\n    };\n\n    presenter.SelectGap.prototype.lock = function () {\n        this.isDisabled = true;\n        this.$view.attr('disabled','disabled');\n    };\n\n    presenter.SelectGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        this.$view.removeAttr('disabled');\n    };\n\n    presenter.gapsAnswers = [];\n\n    function addGapAnswers(htmlID, correctAnswer) {\n        var isInTable = false;\n        for (var i = 0; i < presenter.gapsAnswers.length; i++){\n            if(presenter.gapsAnswers[i].id === htmlID){\n                isInTable = true;\n            }\n        }\n\n        if(!isInTable){\n            presenter.gapsAnswers.push({id: htmlID, answers: correctAnswer});\n        }\n    }\n\n    presenter.EditableInputGap = function (htmlID, correctAnswer, gapScore) {\n        addGapAnswers(htmlID, correctAnswer);\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n\n            showAnswersValue: correctAnswer,\n\n            createView: presenter.EditableInputGap.prototype.createView,\n            connectEvents: this.connectEvents,\n            setViewValue: presenter.EditableInputGap.prototype.setViewValue,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n        this.setGapWidth();\n    };\n\n    presenter.EditableInputGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.EditableInputGap.constructor = presenter.EditableInputGap;\n\n    presenter.EditableInputGap.prototype.connectEvents = function () {\n        this.$view.on(\"input\", this.onEdit.bind(this));\n        this.$view.on(\"blur\", this.blurHandler.bind(this));\n        this.$view.on('keyup', this.onKeyUp.bind(this));\n        this.$view.on(\"keypress\", this.onKeyPress.bind(this));\n        this.$view.off('change').bind('change', this.onEdit.bind(this));\n    };\n\n    presenter.EditableInputGap.prototype.createView = function () {\n        if (presenter.hasMathGaps()) {\n            return $(presenter.$view).find(\"input[id='\"+this.objectID+\"']\");\n        }else{\n            var inputType = \"text\";\n            if (presenter.configuration.useNumericKeyboard) {\n                inputType = \"tel\";\n            }\n            var $inputGap = $('<input type=\"' + inputType + '\" value=\"\" id=\"' + this.objectID + '\" />');\n            $inputGap.css({\n                width: presenter.configuration.gapWidth + \"px\"\n            });\n\n            $inputGap.addClass(\"ic_gap\");\n            if (presenter.configuration.useNumericKeyboard) {\n                $inputGap.attr(\"step\", \"any\");\n            }\n\n            return $inputGap;\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onKeyUp = function(event) {\n        event.stopPropagation();\n        if (presenter.configuration.useNumericKeyboard) {\n            var newText = String(event.target.value);\n            var pattern = StringUtils.getNumericPattern();\n            if (newText.length > 0 && !newText.match(pattern)) {\n                var patternWithoutLastCharacter = pattern.slice(0, -1);\n                var regExp = RegExp(patternWithoutLastCharacter);\n                var match = regExp.exec(newText);\n\n                if (match) {\n                    this.setViewValue(match[0]);\n                } else {\n                    this.setViewValue(\"\");\n                }\n                this.value = this.getViewValue();\n            }\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onKeyPress = function(event) {\n        event.stopPropagation();\n        if (presenter.configuration.useNumericKeyboard) {\n            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n            var selectionStartIdx = event.target.selectionStart;\n            var selectionEndIdx = event.target.selectionEnd;\n            var oldText = String(event.target.value);\n            var newText = oldText.substring(0, selectionStartIdx)\n                            + key\n                            + oldText.substring(selectionEndIdx);\n            var pattern = StringUtils.getNumericPattern();\n            if (!newText.match(pattern)) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onEdit = function (event) {\n        this.notifyEdit();\n        this.value = this.getViewValue();\n    };\n\n    presenter.EditableInputGap.prototype.blurHandler = function (event) {\n        this.notify();\n    };\n\n    presenter.EditableInputGap.prototype.getViewValue = function () {\n        return this.$view.val();\n    };\n\n    presenter.EditableInputGap.prototype.lock = function () {\n        this.isDisabled = true;\n        this.$view.attr('disabled','disabled');\n    };\n\n    presenter.EditableInputGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        this.$view.removeAttr('disabled');\n    };\n\n    presenter.EditableInputGap.prototype.getValue = function () {\n        return this.value;\n    };\n\n    presenter.EditableInputGap.prototype.setViewValue = function (value) {\n        return this.$view.val(value);\n    };\n\n    presenter.DraggableDroppableGap = function (htmlID, correctAnswers, gapScore) {\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n            createView: presenter.DraggableDroppableGap.prototype.createView,\n\n            showAnswersValue: correctAnswers,\n            fillGap: presenter.DraggableDroppableGap.prototype.fillGap,\n            makeGapEmpty: presenter.DraggableDroppableGap.prototype.makeGapEmpty,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n        this.setGapWidth();\n    };\n\n    presenter.DraggableDroppableGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.DraggableDroppableGap.parent = presenter.GapUtils.prototype;\n    presenter.DraggableDroppableGap.constructor = presenter.DraggableDroppableGap;\n\n    presenter.DraggableDroppableGap.prototype.createView = function () {\n        var $view = DraggableDroppableObject.prototype.createView.call(this);\n\n        $view.css({\n            width: presenter.configuration.gapWidth + \"px\",\n            display: 'inline-block'\n        });\n\n        $view.addClass(\"draggable-gap\");\n        $view.addClass(\"ic_gap\");\n\n        return $view;\n    };\n\n    presenter.DraggableDroppableGap.prototype.lock = function () {\n        this.isDisabled = true;\n        DraggableDroppableObject.prototype.lock.call(this);\n    };\n\n    presenter.DraggableDroppableGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        DraggableDroppableObject.prototype.unlock.call(this);\n    };\n\n    presenter.DraggableDroppableGap.prototype.fillGap = function (selectedItem) {\n        DraggableDroppableObject.prototype.fillGap.call(this, selectedItem);\n        this.addCssClass(\"gapFilled\");\n        this.notify();\n\n        presenter.renderMathJax();\n        presenter.rerenderMathJax();\n    };\n\n    presenter.DraggableDroppableGap.prototype.makeGapEmpty = function () {\n        DraggableDroppableObject.prototype.makeGapEmpty.call(this);\n        this.removeCssClass(\"gapFilled\");\n        this.notify();\n    };\n\n    presenter.GapsContainerObject = function () {\n        this.gaps = [];\n    };\n\n    presenter.GapsContainerObject.prototype.addGap = function (gap) {\n        this.gaps.push(gap);\n    };\n\n    presenter.GapsContainerObject.prototype.replaceDOMViewWithGap = function () {\n        this.gaps.filter(function (gap) {\n            return gap.gapType === presenter.GapUtils.GAP_TYPE.NORMAL;\n        }).forEach(function (gap) {\n            var gapID = \"#\" + gap.getObjectID(),\n                element = presenter.$view.find(gapID),\n                placeholder = element.attr(\"placeholder\");\n\n            element.replaceWith(gap.getView());\n            element = presenter.$view.find(gapID);\n            if(placeholder) {\n                element.attr(\"placeholder\", placeholder);\n                element.removeClass(\"ic_gap\").addClass(\"ic_filled_gap\");\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.replaceGapsDOMWithView = function () {\n        this.gaps.forEach(function (gap) {\n            gap.$view = presenter.$view.find(\"#\" + gap.getObjectID());\n            if(!presenter.isPreview){\n                gap.connectEvents();\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.removeAllGapsClasses = function () {\n        this.gaps.forEach(function (gap) {\n            gap.removeAllClasses();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.check = function (isSetShow) {\n        this.gaps.forEach(function (gap) {\n            gap.check(isSetShow);\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.showAnswers = function () {\n        this.gaps.forEach(function (gap) {\n            gap.showAnswers();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.showAnswer = function (item) {\n        this.gaps[item].showAnswers();\n    }\n\n    presenter.GapsContainerObject.prototype.showAnswersMath = function () {\n        this.gaps.forEach(function (gap) {\n            if(gap.mathShowAnswersValue !== \"\"){\n                gap.showAnswers();\n            }else{\n                gap.lock();\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.hideAnswers = function () {\n        this.gaps.forEach(function (gap) {\n            gap.hideAnswers();\n            gap.removeAllClasses();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.reset = function () {\n        this.gaps.forEach(function (gap) {\n            gap.reset();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.getErrorCount = function () {\n        return this.gaps.reduce(function (errorCount, gap) {\n            return errorCount += gap.getErrorCount();\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.getScore = function () {\n        return this.gaps.reduce(function (score, gap) {\n            return score += gap.getScore();\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.getMaxScore = function () {\n        return this.gaps.reduce(function (maxScore, gap) {\n            return maxScore += gap.gapScore;\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexWithClass = function (index, cssClass) {\n        this.gaps[index].removeAllClasses();\n        this.gaps[index].addCssClass(cssClass);\n        this.gaps[index].notifyEdit();\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsCorrect = function (index) {\n        this.markGapByIndexWithClass(index, this.gaps[index].correctCSS);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsWrong = function (index) {\n        this.markGapByIndexWithClass(index, this.gaps[index].wrongCSS);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsEmpty = function (index) {\n        this.markGapByIndexWithClass(index, 'ic_gap-empty');\n    };\n\n    presenter.GapsContainerObject.prototype.getLength = function () {\n        return this.gaps.length;\n    };\n\n    presenter.GapsContainerObject.prototype.getGapValueByIndex = function (index) {\n        return this.gaps[index].getValue();\n    };\n\n    presenter.GapsContainerObject.prototype.setLockGapByIndex = function (index, lock) {\n        this.gaps[index].setIsEnabled(lock);\n        this.gaps[index].notifyEdit();\n    };\n\n    presenter.GapsContainerObject.prototype.lockGapByIndex = function (index) {\n        this.setLockGapByIndex(index, false);\n    };\n\n    presenter.GapsContainerObject.prototype.unlockGapByIndex = function (index) {\n        this.setLockGapByIndex(index, true);\n    };\n\n    presenter.GapsContainerObject.prototype.unlockAllGaps = function () {\n        this.gaps.map(function (gap, index) {\n            this.unlockGapByIndex(index);\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.lockAllGaps = function () {\n        this.gaps.map(function (gap, index) {\n            this.lockGapByIndex(index);\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.lockAllNotEmptyGaps = function () {\n        this.gaps.map(function (gap, index) {\n            if(!gap.isValueEmpty()){\n                this.lockGapByIndex(index);\n            }\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.getGapIndexByObjectID = function (objectID) {\n        for (var index = 0; index < this.gaps.length; index++) {\n            if (this.gaps[index].getObjectID() === objectID) {\n                return (index + 1);\n            }\n        }\n    };\n\n    presenter.GapsContainerObject.prototype.getGapsState = function () {\n        return this.gaps.map(function (gap) {\n            return gap.getGapState();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.getState = function () {\n        return this.gaps.map(function (gap) {\n            return gap.getState();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.setGapsState = function (state) {\n        state.map(function (stateData, index) {\n            var configuration = {\n                droppedElement: undefined,\n                isAttempted: stateData.isAttempted === undefined ? false : stateData.isAttempted,\n                isEnabled: stateData.isEnabled,\n                source: \"\",\n                value: stateData.value\n            };\n\n            this.gaps[index].setState(configuration);\n            this.gaps[index].$view.trigger('change');\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.setSpansState = function (state, undefinedAttr) {\n        if ((state !== undefinedAttr) && (state !== null)) {\n            state.map(function (stateData, index) {\n                var configuration = {\n                    value: stateData.value,\n                    source: stateData.item,\n                    isEnabled: undefined,\n                    droppedElement: stateData.droppedElement\n                };\n\n                this.gaps[index].setState(configuration);\n\n                if (stateData.value === \"\") {\n                    this.gaps[index].destroyDraggableProperty();\n                }else{\n                    this.gaps[index].addCssClass(\"gapFilled\");\n                }\n\n            }, this);\n        }\n    };\n\n    presenter.GapsContainerObject.prototype.setMathShowAnswersValueByGapIndex = function (index, value) {\n        this.gaps[index].setMathShowAnswersValue(value);\n    };\n\n    presenter.GapsContainerObject.prototype.isGapAttempted = function (index) {\n        return this.gaps[index].isAttempted;\n    };\n\n    presenter.GapsContainerObject.prototype.isAnyGapAttempted = function () {\n        return this.gaps.some(function (gap) {\n            return gap.isAttempted;\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.setIsAttemptedByGapId = function(objectID, value) {\n        for (var index = 0; index < this.gaps.length; index++) {\n            if (this.gaps[index].getObjectID() === objectID) {\n                this.gaps[index].setAttempted(value);\n                break;\n            }\n        }\n    };\n\n\n    presenter.ValueChangeObserver = function () {};\n\n    presenter.ValueChangeObserver.prototype.notify = function (data) {\n        presenter.eventBus.sendEvent('ValueChanged', this.getEventData(data));\n\n        if (presenter.isAllOK()) presenter.sendAllOKEvent();\n    };\n\n    presenter.ValueChangeObserver.prototype.getEventData = function (data) {\n        return {\n            score: data.isCorrect ? \"1\" : \"0\",\n            value: data.value,\n            source: presenter.configuration.addonID,\n            item: presenter.gapsContainer.getGapIndexByObjectID(data.objectID)\n        };\n    };\n\n    presenter.isActivity = function () {\n        return presenter.configuration.isActivity;\n    };\n\n    presenter.setMathShowAnswersCounter = function (counter) {\n        presenter.configuration.mathShowAnswersCounter = counter;\n    };\n\n    presenter.tickMathCounter = function () {\n        if (presenter.configuration.mathShowAnswersCounter) {\n            presenter.configuration.mathShowAnswersCounter = presenter.configuration.mathShowAnswersCounter - 1;\n        }\n    };\n\n    presenter.shouldTriggerMathShowAnswers = function () {\n        return presenter.configuration.mathShowAnswersCounter === 0;\n    };\n\n    //showAnswers from Math\n    presenter.setGapAnswer = function (gapIndex, answer, counter) {\n        if (presenter.configuration.mathShowAnswersCounter === undefined) {\n            presenter.setMathShowAnswersCounter(counter);\n        }\n\n        presenter.gapsContainer.setMathShowAnswersValueByGapIndex((gapIndex - 1), answer);\n\n        presenter.tickMathCounter();\n\n        if (presenter.shouldTriggerMathShowAnswers()) {\n            presenter.gapsContainer.removeAllGapsClasses();\n            presenter.gapsContainer.showAnswersMath();\n            presenter.setMathShowAnswersCounter(counter);\n        }\n    };\n\n    //hideAnswers from Math\n    //hideAnswers is called anyway so just void function\n    presenter.setUserValue = function () {};\n\n    presenter.markConnectionWithMath = function() {\n        isConnectedWithMath = true;\n        presenter.isConnectedWithMath = true;\n    };\n\n    presenter.getValue = function (index) {\n        return presenter.gapsContainer.getGapValueByIndex((index-1))\n    };\n\n    presenter.renderMathJax = function () {\n        MathJax.CallBack.Queue().Push(function () {\n            MathJax.Hub.Typeset(presenter.$view.find(\".table-addon-wrapper\")[0]);\n        });\n    };\n\n    presenter.rerenderMathJax = function () {\n        MathJax.CallBack.Queue().Push(function () {\n            MathJax.Hub.Rerender(presenter.$view.find(\".table-addon-wrapper\")[0]);\n        });\n    };\n\n    function TableKeyboardController (elements, columnsCount, rowsCount) {\n        var newElements = accountForMergedCells(elements, columnsCount, rowsCount);\n        KeyboardController.call(this, newElements, columnsCount);\n        this.rowsCount = rowsCount;\n    }\n\n    function accountForMergedCells(elements, columnsCount, rowsCount) {\n        if (columnsCount === undefined || rowsCount === undefined ||\n            elements.length === 0 || elements[0].getAttribute === undefined) return elements;\n        var elementsArray = Array.from(Array(rowsCount), () => new Array(columnsCount));\n        var i = 0;\n        for (var ri = 0; ri < rowsCount; ri++) {\n            for (var ci = 0; ci < columnsCount; ci++) {\n                if (elementsArray[ri][ci] === undefined && i < elements.length) {\n                    var element = elements[i];\n                    i++;\n                    var colNumber = getColspan(element);\n                    var rowNumber = getRowspan(element);\n                    for (var rj = 0; rj < rowNumber; rj++) {\n                        for (var cj = 0; cj < colNumber; cj++) {\n                            var newColIndex = ci + cj;\n                            var newRowIndex = ri + rj;\n                            if (newRowIndex < rowsCount && newColIndex < columnsCount) {\n                                elementsArray[newRowIndex][newColIndex] = element;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        var newElements = [];\n        for (var i = 0; i < rowsCount; i++) newElements = newElements.concat(elementsArray[i]);\n        return newElements;\n    }\n\n    function getColspan(element) {\n        return getAttributeNumberValue(element, \"colspan\", 1);\n    }\n\n    function getRowspan(element) {\n        return getAttributeNumberValue(element, \"rowspan\", 1);\n    }\n\n    function getAttributeNumberValue(element, attributeName, defaultValue) {\n        if (element.getAttribute(attributeName)!= null && !isNaN(element.getAttribute(attributeName))) {\n            return new Number(element.getAttribute(attributeName));\n        } else {\n            return defaultValue;\n        }\n    }\n\n    TableKeyboardController.prototype.reload = function (elements, columnsCount, rowsCount) {\n        var newElements = accountForMergedCells(elements, columnsCount, rowsCount);\n        KeyboardController.prototype.reload.call(this, newElements, columnsCount);\n    }\n\n    TableKeyboardController.prototype = Object.create(window.KeyboardController.prototype);\n    TableKeyboardController.prototype.constructor = TableKeyboardController;\n\n    TableKeyboardController.prototype.select = function (event) {\n        event.preventDefault();\n        presenter.addWhiteSpaceToValue();\n        if (presenter.gapNavigation && presenter.configuration.gapType === 'draggable' && presenter.getCurrentGapsNumber() > 0) {\n            var $gap = presenter.getGap(presenter.gapIndex);\n\n            if (!$gap || !$gap.is('span')) return;\n\n            var oldVal = $gap.text();\n            $gap.click();\n            var value = $gap.text();\n\n            if (0 !== oldVal.localeCompare(value)) {\n                var data = [];\n                if (value) {\n                    data.push(window.TTSUtils.getTextVoiceObject(value, presenter.configuration.langTag));\n                    data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.inserted));\n                } else {\n                    data.push(window.TTSUtils.getTextVoiceObject(oldVal, presenter.configuration.langTag));\n                    data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.removed));\n                }\n                presenter.speak(data);\n            }\n        }\n    };\n\n    presenter.addWhiteSpaceToValue = function () {\n        if (!presenter.getGap(presenter.gapIndex)) return;\n\n        var gap = presenter.getGap(presenter.gapIndex)[0];\n        var classNames = ['ic_filled_gap', 'ic_gap'];\n        var isInputTypeGap = classNames.some(className => gap.classList.contains(className));\n        if (!gap || !isInputTypeGap) return;\n\n        var oldValue = gap.value;\n        $(gap).val(`${oldValue} `);\n    }\n\n    TableKeyboardController.prototype.mark =  function (element) {\n        KeyboardController.prototype.mark.call(this, element);\n        this.getTarget(element, false).focus();\n    };\n\n    TableKeyboardController.prototype.unmark = function (element) {\n        KeyboardController.prototype.unmark.call(this, element);\n        this.getTarget(element, false).blur();\n    };\n\n    presenter.buildKeyboardController = function () {\n        presenter.keyboardControllerObject = new TableKeyboardController(presenter.getElementsForKeyboardNavigation(), presenter.configuration.columnsCount, presenter.configuration.rowsCount);\n    };\n\n    presenter.getElementsForKeyboardNavigation = function () {\n        return presenter.$view.find('.table_cell');\n    };\n\n    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {\n        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);\n    };\n\n    TableKeyboardController.prototype.getTarget = function (element, willBeClicked){\n        return $(element);\n    };\n\n    TableKeyboardController.prototype.escape = function (event) {\n        if (presenter.gapNavigation) {\n            if (event) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            presenter.gapNavigation = false;\n            presenter.clearCurrentCell();\n            presenter.readCurrentCellTitle();\n        } else {\n            // must be set to false, otherwise module won't exit navigation\n            presenter.addonKeyboardNavigationActive = false;\n            KeyboardController.prototype.escape.call(this, event);\n        }\n    };\n\n    TableKeyboardController.prototype.enter = function (event){\n        KeyboardController.prototype.enter.call(this, event);\n\n        if (presenter.addonKeyboardNavigationActive && !presenter.gapNavigation) {\n            presenter.gapNavigation = true;\n            presenter.selectGap(0);\n        }\n        if (!presenter.addonKeyboardNavigationActive){\n            presenter.addonKeyboardNavigationActive = true;\n            presenter.readCurrentCellTitle();\n        } else {\n            presenter.readCurrentNavigationElement();\n        }\n    }\n\n    KeyboardController.prototype.switchElement = function (move) {\n        var new_position_index = this.keyboardNavigationCurrentElementIndex + move;\n        if (new_position_index >= this.keyboardNavigationElementsLen) {\n            new_position_index = new_position_index - this.keyboardNavigationElementsLen;\n        } else if (new_position_index < 0) {\n            new_position_index = this.keyboardNavigationElementsLen + new_position_index;\n        }\n        if (this.keyboardNavigationCurrentElement === this.keyboardNavigationElements[new_position_index]\n            && this.keyboardNavigationCurrentElementIndex != new_position_index) {\n                this.keyboardNavigationCurrentElementIndex = new_position_index;\n                if (move == this.columnsCount || move == -1 * this.columnsCount) {\n                    if (new_position_index + move >=0 && new_position_index + move < this.keyboardNavigationElementsLen) {\n                        this.switchElement(move);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                } else {\n                if (move < 0) {\n                    if (new_position_index % this.columnsCount != 0) {\n                        this.switchElement(-1);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                } else {\n                    if (new_position_index % this.columnsCount != this.columnsCount - 1) {\n                        this.switchElement(1);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                }\n            }\n        } else {\n            this.markCurrentElement(new_position_index);\n        }\n    };\n\n    presenter.readCurrentNavigationElement = function() {\n        var html = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n        var data = window.TTSUtils.getTextVoiceArrayFromElementWithGaps(html, presenter.configuration.langTag, presenter.speechTexts);\n        presenter.speak(data);\n    };\n\n    presenter.readCurrentCellTitle = function() {\n        var row = Math.floor(presenter.keyboardControllerObject.keyboardNavigationCurrentElementIndex / presenter.configuration.columnsCount);\n        var column = presenter.keyboardControllerObject.keyboardNavigationCurrentElementIndex % presenter.configuration.columnsCount;\n        var element = presenter.keyboardControllerObject.keyboardNavigationCurrentElement;\n        var rowSpan = getRowspan(element);\n        var colSpan = getColspan(element);\n\n        if (rowSpan != 1 || colSpan != 1) {\n            var classNames = element.className.split(' ');\n            for (var i = 0; i < classNames.length; i++) {\n                var className = classNames[i];\n                if (className.startsWith('col_')) {\n                    var numberString = className.replace('col_', '').trim();\n                    if (numberString.length > 0 && !isNaN(numberString)) column = new Number(numberString) - 1;\n                }\n                if (className.startsWith('row_')) {\n                    var numberString = className.replace('row_', '').trim();\n                    if (numberString.length > 0 && !isNaN(numberString)) row = new Number(numberString) - 1;\n                }\n            }\n        }\n        var alphabet = \"ABCDEFGHIJKLMNOPRSTUWXYZ\";\n        var content = presenter.speechTexts.cell + \" \" + alphabet[column % alphabet.length] + \" \" + (row+1);\n        var data = [window.TTSUtils.getTextVoiceObject(content)];\n        if (rowSpan > 1) {\n            data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.rowSpan+\" \"+rowSpan));\n        }\n        if (colSpan > 1) {\n            data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.colSpan+\" \"+colSpan));\n        }\n        if (presenter.configuration.isFirstRowHeader) {\n            data = data.concat(getCellHeaderUtterances('.row_1.col_'+(column+1), presenter.speechTexts.column));\n        }\n        if (presenter.configuration.isFirstColumnHeader) {\n            data = data.concat(getCellHeaderUtterances('.col_1.row_'+(row+1), presenter.speechTexts.row));\n        }\n        presenter.speak(data);\n    };\n\n    function getCellHeaderUtterances(headerSelector, headerTypeSpeechText) {\n        var data = [];\n        var html = presenter.$view.find(headerSelector);\n        if (html.length > 0) {\n            var headerContent = window.TTSUtils.getTextVoiceArrayFromElementWithGaps(html, presenter.configuration.langTag, presenter.speechTexts);\n            if (headerContent.length > 0) {\n                data.push(window.TTSUtils.getTextVoiceObject(headerTypeSpeechText));\n                data = data.concat(headerContent);\n            }\n        }\n        return data;\n    }\n\n    // TAB or Right Arrow\n    TableKeyboardController.prototype.nextElement = function (event) {\n        if(event.keyCode === 9) { //TAB\n            this.handleTab(event);\n            event.preventDefault();\n            return;\n        }\n\n        if (presenter.gapNavigation){\n            presenter.switchSelectedValue(1);\n            return;\n        }\n\n        event.preventDefault();\n\n        if (this.keyboardNavigationCurrentElementIndex % this.columnsCount === this.columnsCount - 1) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(1);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    // SHIFT+TAB or Left Arrow\n    TableKeyboardController.prototype.previousElement = function (event) {\n        if(event.keyCode === 9) { //TAB\n            this.handleTab(event);\n            return;\n        }\n\n        if (presenter.gapNavigation){\n            presenter.switchSelectedValue(-1);\n            return;\n        }\n\n        event.preventDefault();\n\n        if (this.keyboardNavigationCurrentElementIndex % this.columnsCount === 0) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(-1);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    TableKeyboardController.prototype.handleTab = function (event) {\n        if (presenter.getCurrentGapsNumber() > 0) {\n            if (!presenter.gapNavigation) {\n                presenter.gapNavigation = true;\n                presenter.selectGap(0);\n            } else {\n                if ( !event.shiftKey ) {\n                    presenter.selectGap(presenter.gapIndex + 1);\n                } else {\n                    presenter.selectGap(presenter.gapIndex - 1);\n                }\n            }\n\n            var $gap = presenter.getGap(presenter.gapIndex);\n            var $cell = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n            var data = window.TTSUtils.getTextVoiceArrayFromGap($gap, $cell, presenter.configuration.langTag, presenter.speechTexts);\n            presenter.speak(data);\n\n        }\n\n    };\n\n    // UP Arrow\n    TableKeyboardController.prototype.previousRow = function (event) {\n        if (presenter.gapNavigation) {\n            presenter.switchSelectedValue(-1);\n            return;\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (Math.floor(this.keyboardNavigationCurrentElementIndex / this.columnsCount) === 0) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(-this.columnsCount);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    // DOWN Arrow\n    TableKeyboardController.prototype.nextRow = function (event) {\n        if (presenter.gapNavigation) {\n            presenter.switchSelectedValue(1);\n            return;\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (Math.floor(this.keyboardNavigationCurrentElementIndex / this.columnsCount) === this.rowsCount - 1) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(this.columnsCount);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    function getTableKeyboardController() {\n        return TableKeyboardController;\n    }\n\n    getTableKeyboardController().prototype.exitWCAGMode = function () {\n        presenter.gapNavigation = false;\n        presenter.clearCurrentCell();\n        presenter.addonKeyboardNavigationActive = false;\n        KeyboardController.prototype.exitWCAGMode.call(this);\n    };\n\n    presenter.getTextToSpeechOrNull = function AddonTable_getTextToSpeechOrNull(playerController) {\n        if (playerController) {\n            return playerController.getModule('Text_To_Speech1');\n        }\n\n        return null;\n    };\n\n    presenter.setWCAGStatus = function AddonTable_setWCAGStatus(isOn) {\n        presenter.isWCAGOn = isOn;\n    };\n\n    presenter.speak = function AddonTable_speak(data) {\n        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);\n        if (tts && presenter.isWCAGOn) {\n            tts.speak(data);\n        }\n    };\n\n    presenter.isDeactivationBlocked = function() {\n        return presenter.addonKeyboardNavigationActive || presenter.gapNavigation;\n    };\n\n    presenter.getCurrentGapsNumber = function() {\n        return $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap').length;\n    };\n\n    presenter.clearCurrentCell = function() {\n        var $cell = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n        $cell.find('.keyboard_navigation_active_element').removeClass('keyboard_navigation_active_element');\n        if ($cell.find('input:focus').length > 0) {\n            $cell.find('input:focus').blur();\n        }\n    };\n\n    presenter.getGap = function (index) {\n        var $gaps = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap');\n        if ($gaps.length === 0) return;\n        if (index < 0) index = 0;\n        if (index >= $gaps.length) index = $gaps.length-1;\n        return $gaps.eq(index);\n    };\n\n    presenter.selectGap = function(index) {\n        var $gaps = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap');\n        if ($gaps.length === 0) return;\n        if(index < 0) index = 0;\n        if(index >= $gaps.length) index = $gaps.length - 1;\n        var $gap = $gaps.eq(index);\n\n        presenter.clearCurrentCell();\n        $gap.addClass('keyboard_navigation_active_element');\n\n        presenter.gapIndex = index;\n        if ($gap.is('input')) {\n            $gap.focus();\n        }\n    };\n\n    presenter.switchSelectedValue = function(move) {\n        if(presenter.isShowAnswersActive || presenter.isSetShowErrorsMode) return;\n        var $gap = presenter.getGap(presenter.gapIndex);\n\n        if (!$gap || !$gap.is('select')) return;\n\n        var index = $gap.prop(\"selectedIndex\");\n        var optionSize = $gap.find('option').size();\n        index = index + move;\n\n        if (0 <= index && index < optionSize) {\n            $gap.prop(\"selectedIndex\", index);\n            $gap.change();\n            var value = $gap.val();\n            if (value.length === 0 || value === '-' || value === '---') {\n                var data = [window.TTSUtils.getTextVoiceObject(presenter.speechTexts.empty)];\n            } else {\n                var data = [window.TTSUtils.getTextVoiceObject($gap.val(), presenter.configuration.langTag)];\n            }\n            presenter.speak(data);\n        }\n    };\n\n    /**\n    * @method isAttempted method returning if user has interacted with addon\n    * @return boolean\n    */\n    presenter.isAttempted = function AddonTable_isAttempted () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        return presenter.gapsContainer.getLength() === 0 ? true : presenter.gapsContainer.isAnyGapAttempted();\n    };\n\n\n    /**\n     * @param gapIndex - index of gap to check\n     * @returns boolean\n     */\n    presenter.isGapAttempted = function AddonTableisGapAttempted (gapIndex) {\n        if (gapIndex > 0) {\n            gapIndex = gapIndex - 1;\n        }\n\n        return presenter.gapsContainer.isGapAttempted(gapIndex);\n    };\n\n    presenter.PRINTABLE_STATE_MODE = {\n        EMPTY: 0,\n        SHOW_ANSWERS: 1,\n        SHOW_USER_ANSWERS: 2,\n        CHECK_ANSWERS: 3\n    };\n\n    function isPrintableShowAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;\n    }\n    function isPrintableShowUserAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;\n    }\n    function isPrintableCheckAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;\n    }\n    function isPrintableStateMode() {\n        return isPrintableShowUserAnswersStateMode() || isPrintableCheckAnswersStateMode();\n    }\n\n    presenter.setPrintableState = function(state) {\n        if (state === null || ModelValidationUtils.isStringEmpty(state))\n            return;\n        presenter.printableState = JSON.parse(state);\n    }\n\n    presenter.setPrintableController = function(controller) {\n        presenter.textParser = new TextParserProxy(controller.getTextParser());\n    }\n\n    function chosePrintableStateMode(showAnswers) {\n        if (presenter.printableState) {\n            if (showAnswers)\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;\n            else\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;\n        } else {\n            if (showAnswers)\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;\n            else\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;\n        }\n    }\n\n    presenter.setPrintableAsyncCallback = function(id, callback) {\n        presenter.printableParserID = id;\n        presenter.printableParserCallback = callback;\n    }\n\n    presenter.isPrintableAsync = function() {\n        return true;\n    }\n\n    presenter.hasMathGaps = function() {\n        return presenter.configuration.gapType === 'math';\n    }\n\n    presenter.getPrintableHTML = function(model, showAnswers) {\n        presenter.configuration = presenter.validateModel(presenter.upgradeModel(model));\n        chosePrintableStateMode(showAnswers);\n        createPrintableHTMLStructure(model);\n\n        presenter.$view.addClass(\"printable_module\");\n        const clone = presenter.$view.clone();\n        clone.attr('id', presenter.printableParserID);\n\n        if (presenter.hasMathGaps()) {\n            presenter.transformMathGaps();\n        } else {\n            // normal gaps don't need additional parsing like math gaps, this just notifies callback asynchronusly\n            setTimeout(function() {\n                const result = parsePrintableGaps(presenter.$view[0].outerHTML);\n\n                presenter.notifyParserCallback(result);\n            }, 0);\n        }\n\n        return clone[0].outerHTML;\n\n    };\n\n    function createPrintableHTMLStructure(model) {\n        createPrintableHTMLWrapper(model);\n        var $table = presenter.generateTable(presenter.configuration.contents, false);\n        presenter.$wrapper.append($table);\n    }\n\n    function createPrintableHTMLWrapper(model) {\n        presenter.$view = $('<div></div>');\n        presenter.$view.attr(\"id\", model.ID);\n        presenter.$view.addClass('printable_addon_Table');\n        presenter.$view.css('max-width', model.Width + 'px');\n        presenter.$wrapper = $('<div></div>');\n        presenter.$wrapper.addClass('table-addon-wrapper');\n        presenter.$view.append(presenter.$wrapper);\n\n        presenter.$view.addClass(getViewClassesBasedOnMode());\n    }\n\n    function getViewClassesBasedOnMode() {\n        switch(presenter.printableStateMode) {\n            case presenter.PRINTABLE_STATE_MODE.EMPTY: {\n                return \"printable_addon_Table-empty-mode\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS: {\n                return \"printable_addon_Table-show-answers\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS: {\n                return \"printable_addon_Table-show-user-answers\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS: {\n                return \"printable_addon_Table-check-answers\";\n            }\n        }\n\n    }\n\n    function matchGap(gapRegex, textToSearch, closingSignGapSize) {\n        let closingBracketIndex = 0;\n\n        let gapMatch = textToSearch.match(gapRegex);\n        if (gapMatch == null)\n            return [];\n\n        const gapsMatches = [];\n        while (gapMatch != null) {\n            const textWithoutFoundGapBeginning = textToSearch.substring(gapMatch.index + gapMatch[0].length);\n\n            closingBracketIndex = presenter.textParser.findClosingBracket(textWithoutFoundGapBeginning);\n            if (closingBracketIndex > 0) {\n                const gapEndIndex = gapMatch.index + gapMatch[0].length + closingBracketIndex + closingSignGapSize;\n                const wholeGapTextToTheEndingBracket = textToSearch.substring(gapMatch.index, gapEndIndex);\n                // ex: \\gap{lorem|ispum|\\(\\frac{1}{4}\\)}\n                gapsMatches.push(wholeGapTextToTheEndingBracket);\n                textToSearch = textToSearch.substring(gapEndIndex);\n            } else {\n                // gap has no ending bracket, so syntax is broken and in fact it doesn't contain gap, ex:\n                // \\gap{lorem|ispum|\\(\\frac{1}{4}\\)\n                break;\n            }\n\n            gapMatch = textToSearch.match(gapRegex);\n        }\n\n        return gapsMatches;\n    }\n\n    function matchGapAndFilledGap(html) {\n        const gapsRegex = /\\\\gap{|\\\\filledGap{/;\n        return matchGap(gapsRegex, html, \"}\".length);\n    }\n\n    function matchDropdownGap(html) {\n        // match last {{ ex. \\frac{1}{{{gap_definition}}} will match last two \"{{\" from \"{{{\"\n        const gapRegex = /{{(?!{)/;\n        return matchGap(gapRegex, html, \"}}\".length);\n    }\n\n    function parsePrintableGaps (html) {\n        let gapsMatches = matchGapAndFilledGap(html);\n        gapsMatches = gapsMatches.concat(matchDropdownGap(html));\n\n        const tablePrintableOptions = indexRegexMatchesBaseOnGapsTypes(gapsMatches);\n        for (let i = 0; i < tablePrintableOptions.length; i++) {\n            const tablePrintableOption = tablePrintableOptions[i];\n            const optionHTML = tablePrintableOption.getPrintableHTML();\n            html = html.replace(tablePrintableOption.text, optionHTML);\n        }\n        return html;\n    }\n\n    /**\n     To properly parse math gaps, gaps need to be transformed to special syntax \\gap{id|width|size|{{value:value}}\n     and it needs to be passed into mathjax processor.\n     Then gaps will be changed to html inputs which can be transformed into proper printable gap html\n     */\n    presenter.transformMathGaps = function() {\n        let result = parsePrintableMathGaps(presenter.$view[0].outerHTML);\n        presenter.$view.html(result.html);\n\n        function mathJaxTypesetEnd() {\n            // replace each input with its corresponding gap html\n            presenter.$view.find('input').each(function (index, element) {\n                let html = result.printableOptions[index].getPrintableHTML();\n                $(this).replaceWith(html);\n            });\n\n            presenter.notifyParserCallback(presenter.$view[0].outerHTML);\n        }\n\n        const args = [];\n        args.push(\"Typeset\", MathJax.Hub, presenter.$view[0]);\n        args.push(mathJaxTypesetEnd);\n        MathJax.Hub.Queue(args);\n    }\n\n    presenter.notifyParserCallback = function (outerHTML) {\n        presenter.printableStateMode = null;\n\n        presenter.printableParserCallback(\n            presenter.textParser.parseAltTexts(outerHTML)\n        );\n    }\n\n    function parsePrintableMathGaps(html) {\n        const gapsMatches = matchGapAndFilledGap(html);\n        const tablePrintableOptions = indexRegexMatchesBaseOnGapsTypes(gapsMatches);\n\n        // replace normal gap syntax with math gap syntax\n        for (let i = 0; i < gapsMatches.length; i++) {\n            const match = gapsMatches[i];\n            const gapId = `${presenter.configuration.addonID}-${i}`;\n            html = html.replace(match, generateMathGap(gapId, presenter.configuration.gapWidth.value));\n        }\n\n        return {\n            printableOptions: tablePrintableOptions,\n            html: html\n        }\n    }\n\n    function indexRegexMatchesBaseOnGapsTypes(gapsMatches) {\n        const normalGapRegex = /\\\\gap{.*?}/g,\n            filledGapRegex = /\\\\filledGap{.*?}/g,\n            dropdownGapRegex = /{{.*?}}/g;\n        var tablePrintableOptions = [],\n            stateIndex = 0,\n            isMatchesGapType,\n            gapMatch,\n            gapMatchIndex;\n\n        for (gapMatchIndex = 0; gapMatchIndex < gapsMatches.length; gapMatchIndex++) {\n            gapMatch = gapsMatches[gapMatchIndex];\n\n            isMatchesGapType = gapMatch.match(normalGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableNormalGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                )\n                stateIndex += 1;\n                continue;\n            }\n\n            isMatchesGapType = gapMatch.match(filledGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableFilledGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                )\n                stateIndex += 1;\n            }\n        }\n        for (gapMatchIndex = 0; gapMatchIndex < gapsMatches.length; gapMatchIndex++) {\n            gapMatch = gapsMatches[gapMatchIndex];\n\n            isMatchesGapType = gapMatch.match(dropdownGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableDropdownGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                );\n                stateIndex += 1;\n            }\n        }\n        return tablePrintableOptions;\n    }\n\n    function getTextWidthInPixels(html) {\n        var $outerLessonWrapper = $(\"<div></div>\");\n        $outerLessonWrapper.css(\"position\", \"absolute\");\n        $outerLessonWrapper.css(\"visibility\", \"hidden\");\n        $outerLessonWrapper.addClass(\"printable_lesson\");\n\n        var $outerPageWrapper = $(\"<div></div>\");\n        $outerPageWrapper.addClass(\"printable_page\");\n        $outerLessonWrapper.append($outerPageWrapper);\n\n        var $outerModuleWrapper = $(\"<div></div>\");\n        $outerModuleWrapper.addClass(\"printable_module\");\n        $outerModuleWrapper.addClass(\"printable_addon_Table\");\n        $outerPageWrapper.append($outerModuleWrapper);\n\n        var $wrapper = $(\"<div></div>\");\n\t\t$wrapper.css(\"margin\", \"0px\");\n\t\t$wrapper.css(\"padding\", \"0px\");\n\t\t$wrapper.addClass(\"printable_gap\");\n\t\t$outerModuleWrapper.append($wrapper);\n\n\t\t$wrapper.html(html);\n\t\t$(\"body\").append($outerLessonWrapper);\n\t\tvar width = $wrapper[0].getBoundingClientRect().width;\n\t\t$outerLessonWrapper.detach();\n\t\treturn width;\n    }\n\n    presenter.gradualShowAnswers = function(item) {\n        presenter.gapsContainer.showAnswer(item);\n        presenter.renderMathJax();\n    }\n\n    presenter.gradualHideAnswers = function() {\n         presenter.gapsContainer.hideAnswers();\n         presenter.renderMathJax();\n         presenter.isGradualShowAnswersActive = false;\n    }\n\n    presenter.getActivitiesCount = function () {\n        return presenter.gapsContainer.getLength();\n    }\n\n    /**\n    * TablePrintableOption\n    * */\n    function TablePrintableOption (text, stateID) {\n        this.text = text;\n        this.stateID = stateID;\n        this.options = [];\n    }\n\n    TablePrintableOption.prototype = Object.create(Object.prototype);\n    TablePrintableOption.prototype.constructor = TablePrintableOption;\n\n    TablePrintableOption.prototype.getPrintableGapSignHTML = function() {\n        var $signSpan = $(\"<span></span>\");\n        if (this.hasCorrectAnswer()) {\n            $signSpan.addClass(\"printable_gap_correct\");\n        } else {\n            $signSpan.addClass(\"printable_gap_wrong\");\n        }\n        return $signSpan[0].outerHTML;\n    }\n\n    /**\n     * TablePrintableEditableGapOption\n     */\n\n    /**\n     * @param text\n     * @param stateID\n     * @constructor\n     */\n    function TablePrintableEditableGapOption (text, stateID) {\n        TablePrintableOption.call(this, text, stateID)\n        this.initialValue = \"\";\n        this.correctAnswer = \"\";\n    }\n\n    TablePrintableEditableGapOption.prototype = Object.create(TablePrintableOption.prototype);\n    TablePrintableEditableGapOption.prototype.constructor = TablePrintableEditableGapOption;\n\n    TablePrintableEditableGapOption.prototype.getPrintableHTML = function () {\n        this.getGapTextData();\n        var gapInnerText = this.generateInnerText();\n        var gapHTML = this.generateGapHTML(gapInnerText);\n        if (isPrintableCheckAnswersStateMode() && this.hasAnswer()) {\n            gapHTML += this.getPrintableGapSignHTML();\n        }\n        return gapHTML;\n    }\n\n    TablePrintableEditableGapOption.prototype.getAnswer = function () {\n        const gapState = presenter.printableState.gaps[this.stateID];\n        return gapState === undefined ? null : gapState.value;\n    }\n\n    TablePrintableEditableGapOption.prototype.hasCorrectAnswer = function () {\n        return this.correctAnswer === this.getAnswer();\n    }\n\n    TablePrintableEditableGapOption.prototype.hasAnswer = function () {\n        return this.getAnswer() !== \"\" && this.getAnswer() !== null;\n    }\n\n    TablePrintableEditableGapOption.prototype.generateInnerText = function() {\n        switch(presenter.printableStateMode) {\n            case presenter.PRINTABLE_STATE_MODE.EMPTY: {\n                return this.generateInnerTextForEmptyStateMode();\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS: {\n                return this.correctAnswer;\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS:\n            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS: {\n                return this.hasAnswer() ? this.getAnswer() : this.generateInnerTextForEmptyStateMode();\n            }\n        }\n    }\n\n    TablePrintableEditableGapOption.prototype.generateInnerTextForEmptyStateMode = function(){\n        var longestAnswer = \"\";\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.options[i].length > longestAnswer.length) {\n                longestAnswer = this.options[i];\n            }\n        }\n        if (longestAnswer.length === 0)\n            longestAnswer = \"&nbsp;&nbsp;&nbsp;\";\n\n        var gapWidth = 0;\n        if (presenter.configuration.gapWidth.isSet) {\n            gapWidth = presenter.configuration.gapWidth.value;\n        } else {\n            gapWidth = getTextWidthInPixels(longestAnswer);\n        }\n\n        var value = this.initialValue;\n        var initialValueLength = 0;\n        if (this.initialValue.length > 0) {\n            initialValueLength = getTextWidthInPixels(this.initialValue);\n        }\n\n        var spaceWidth = getTextWidthInPixels('&nbsp;');\n        var spaceCount = Math.ceil((gapWidth - initialValueLength) / spaceWidth);\n        var maxSplitFreeWidth = 50; //must be at least minSplitSize * 2\n        var minSplitSize = 20;\n\n        if (spaceCount > maxSplitFreeWidth) {\n            for (i = 0; i < minSplitSize; i++) {\n                value += \"&nbsp;\";\n            }\n\n            var nextNbsp = false;\n            for (i = 0; i < spaceCount - 2 * minSplitSize; i++) {\n                if (nextNbsp) {\n                    value += \"&nbsp;\";\n                } else {\n                    value += \" \";\n                }\n                nextNbsp = !nextNbsp;\n            }\n\n            for (i = 0; i < minSplitSize; i++) {\n                value += \"&nbsp;\";\n            }\n        } else {\n            for (i = 0; i < spaceCount; i++) {\n                value += \"&nbsp;\";\n            }\n        }\n        return value;\n    }\n\n    TablePrintableEditableGapOption.prototype.generateGapHTML = function(gapInnerText) {\n        const $span = $(\"<span></span>\");\n        const classes = presenter.hasMathGaps() ? \"printable_gap printable_math_gap\" : \"printable_gap\";\n        $span.addClass(classes);\n        $span.html(gapInnerText);\n        return $span[0].outerHTML;\n    }\n\n    /**\n     * TablePrintableNormalGapOption\n     */\n\n    function TablePrintableNormalGapOption (text, stateID) {\n        TablePrintableEditableGapOption.call(this, text, stateID)\n    }\n\n    TablePrintableNormalGapOption.prototype = Object.create(TablePrintableEditableGapOption.prototype);\n    TablePrintableNormalGapOption.prototype.constructor = TablePrintableNormalGapOption;\n\n    TablePrintableNormalGapOption.prototype.getGapTextData = function() {\n        // remove \"\\\\gap{\" and last \"}\"\n        this.options = this.text.replace(\"\\\\gap{\", \"\").replace(/}$/, \"\").split(\"|\");\n        this.correctAnswer = this.options[0];\n    }\n\n\n    /**\n     * TablePrintableFilledGapOption\n     */\n\n    function TablePrintableFilledGapOption (text, stateID) {\n        TablePrintableEditableGapOption.call(this, text, stateID)\n    }\n\n    TablePrintableFilledGapOption.prototype = Object.create(TablePrintableEditableGapOption.prototype);\n    TablePrintableFilledGapOption.prototype.constructor = TablePrintableFilledGapOption;\n\n    TablePrintableFilledGapOption.prototype.getGapTextData = function() {\n        this.options = this.text.replace(\"\\\\filledGap{\", \"\").replace(/}$/, \"\").split(\"|\");\n        this.correctAnswer = this.options[1];\n        this.initialValue = this.options.splice(0, 1)[0];\n    }\n\n    /**\n    * TablePrintableDropdownGapOption\n    * */\n\n    function TablePrintableDropdownGapOption (text, stateID) {\n        TablePrintableOption.call(this, text, stateID);\n        this.correctOptionRegex = /[0-9]*?:/;\n        this.correctOptionIndex = null;\n        this.chosenOptionIndex = null;\n    }\n\n    TablePrintableDropdownGapOption.prototype = Object.create(TablePrintableOption.prototype);\n    TablePrintableDropdownGapOption.prototype.constructor = TablePrintableDropdownGapOption;\n\n    TablePrintableDropdownGapOption.prototype.getPrintableHTML = function() {\n        this.getGapTextData();\n        if (!presenter.configuration.keepOriginalOrder)\n            this.sortOptions();\n        this.findCorrectOptionIndex();\n        this.removeScoreInformationFromCorrectOption();\n\n        if (isPrintableStateMode())\n            this.findChosenOptionIndex();\n\n        var gapHTML = this.generateGapHTML();\n        if (isPrintableCheckAnswersStateMode() && this.hasAnswer()){\n            gapHTML += this.getPrintableGapSignHTML();\n        }\n        return gapHTML;\n    }\n\n    TablePrintableDropdownGapOption.prototype.getAnswer = function () {\n        return this.chosenOptionIndex;\n    }\n\n    TablePrintableDropdownGapOption.prototype.hasAnswer = function () {\n        return this.chosenOptionIndex !== null;\n    }\n\n    TablePrintableDropdownGapOption.prototype.hasCorrectAnswer = function () {\n        return this.chosenOptionIndex === this.correctOptionIndex;\n    }\n\n    TablePrintableDropdownGapOption.prototype.getGapTextData = function() {\n        this.options = this.text.replace(\"{{\",\"\").replace(\"}}\",\"\").split(\"|\");\n    }\n\n    TablePrintableDropdownGapOption.prototype.sortOptions = function() {\n        this.options.sort(function(a,b){\n            return a.replace(this.correctOptionRegex, \"\").localeCompare(b.replace(this.correctOptionRegex, \"\"));\n        }.bind(this));\n    }\n\n    TablePrintableDropdownGapOption.prototype.findCorrectOptionIndex = function() {\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.correctOptionRegex.test(this.options[i])) {\n                this.correctOptionIndex = i;\n                return;\n            }\n        }\n    }\n\n    TablePrintableDropdownGapOption.prototype.removeScoreInformationFromCorrectOption = function() {\n        this.options[this.correctOptionIndex]\n            = this.options[this.correctOptionIndex].replace(this.correctOptionRegex, \"\");\n    }\n\n    TablePrintableDropdownGapOption.prototype.findChosenOptionIndex = function() {\n        const gapState = presenter.printableState.gaps[this.stateID];\n        const gapValue = gapState === undefined ? null : gapState.value;\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.options[i] === gapValue) {\n                this.chosenOptionIndex = i;\n                return;\n            }\n        }\n    }\n\n    TablePrintableDropdownGapOption.prototype.generateGapHTML = function() {\n        var $span = $(\"<span></span>\");\n        $span.addClass(\"printable_gap\");\n\n        if (isPrintableShowAnswersStateMode()) {\n            $span.html(this.options[this.correctOptionIndex]);\n            this.options[this.correctOptionIndex] = $span[0].outerHTML;\n        } else if (isPrintableStateMode()) {\n            $span.html(this.options[this.chosenOptionIndex]);\n            this.options[this.chosenOptionIndex] = $span[0].outerHTML;\n        }\n        return this.options.join(\" / \");\n    }\n\n    return presenter;\n}\n", "2022-12-09 Fixed XSS vulnerabilities in some addons\n2022-12-08 Fixed script and module-script asset getting relative urls when not appropriate\n2022-11-28 Added ModuleScript property\n2022-11-25 Removed pause while reading syntax about time for TTS\n2022-11-25 Fixed TTS reading an extra comma when alt text with dot is present at the end of a list element  \n2022-11-25 Fixed no break in tts at the end of a line of text.\n2022-11-14 Fixed support for only one audio type in slideshow addon\n2022-11-10 Added grid size and rulers position separation\n2022-11-07 Added worksWithAll property to eKeyboard\n2022-11-03 Fixed bug with reading whole HTML elements instead of their content in TTS for Text Coloring\n2022-11-03 Added LottiePlayer module\n2022-11-03 Added support for eraser mode in Text Coloring's keyboard controller\n2022-11-03 Fixed hidden GSA button showing up on keyboard navigation bug\n2022-11-03 Fixed gradual show answers in the Magic Boxes\n2022-11-03 Fixed absence of reading A with a colon in TTS\n2022-11-03 Fixed grad show answers in the PointsLines\n2022-10-28 Fixed no printable_module-className classes assigned to asynchronously loaded addons in print\n2022-10-28 Fixed Lesson Progress and PlayerUtils returning a different scaled score\n2022-10-28 Fixed calculating total score in the Hierarchical Lesson Report\n2022-10-25 Fixed Text Selection quitting from show answers on getState\n2022-10-20 Fixed multiplegap countItem sometimes returning wrong value\n2022-10-20 Fixed bug with self-increasing text on IOS\n2022-10-20 Fixed outstretchHeight command not working properly with static header\n2022-10-14 Added methods for accessing correct/incorrect/partial/empty feedbacks to the Automatic Feedback addon\n2022-10-10 Added Enlarge Button to header in present view\n2022-10-07 Fixed Media Recorder show/hide not affecting addon's main div element \n2022-10-06 Fixed downloading zip package for Android mLibro app\n2022-10-06 Fixed tts not reading numbers of ordered lists\n2022-10-06 Fixed functionality of \"Force Load Audio\" in Audio on IOS\n2022-10-06 Added new page property to block page splitting in print\n2022-09-27 Fixed bug where Table would steal events from other addons when it was hidden\n2022-09-27 Added getView() to Ordering module\n2022-09-23 Added disable axis lock property to the Ordering module\n2022-09-23 Added GSA ignoring addons with is activity set  to false\n2022-09-15 Added value attribute in AddonProperty\n2022-09-09 Added xss prevention and secured Wiris addon against xss attacks\n2022-09-08 Fixed bug where it was possible to insert one draggable element into gaps in multiple Table addons\n2022-09-05 Fixed displaying of model answer in the Crossword\n2022-09-02 Fixed GSA functionality for empty model answers in the Paragraph\n2022-09-02 Fixed reading text separator in gap text.\n2022-09-02 Fixed Media Recorder deleting recordings on check answers and play blocking in certain conditions\n2022-08-31 Added external library injection support\n2022-08-29 Added page_id to paginated score\n2022-08-29 Fixed recording problem in recorder when M1 processor is used\n2022-08-25 Fixed outstretchHeight command not working properly with layout argument\n2022-08-19 Fixed keyboard navigation throught link gaps\n2022-08-19 Updated setGapText method to fix indexation\n2022-08-19 Fixed not sending the \"start\" event the first time a recording is played in Media Recorder\n2022-08-19 Fixed displaying answers in Figure Drawing\n2022-08-18 Fixed bug with audio not playing properly on IOS WebView in Media Recorder\n2022-08-11 Added GSA support to Magic Boxes\n2022-08-11 Fixed the CSS class in AudioPlaylist breaking the appearance of addon\n2022-08-05 Removed static editor notification\n2022-08-05 Fixed getActivitiesCount method in Connection\n2022-08-05 Added IsNotActivity property to Puzzle\n2022-08-05 Added new method setGapText to the Text module\n2022-08-05 Fixed Paragraph not hiding editable placeholder content\n2022-08-05 Fixed XLIFF export not working with Hierarchical Lesson Report and Catch modules\n2022-08-05 Added option of reading individual sentences with TTS\n2022-08-03 Added gap binder addon\n2022-07-26 Fixed Math hiding answers on getState call\n2022-07-26 Fixed Paragraph hiding answers on getState call\n2022-07-25 Fixed Double State Button not calling events when placed in dynamic dom elements\n2022-07-21 Added Depth Of Expand property to Hierarchical Table Of Contents\n2022-07-20 Added ResetOnPageChange property to Automatic Feedback\n2022-07-20 Added new parameter layoutName to outstretchHeight function\n2022-07-19 Fixed Text TTS skipping commas when gap is present\n2022-07-19 Fixed direct cross-origin calls in several places in the app\n2022-07-15 Added TTS support to Magic Boxes\n2022-07-15 Changed Cross Lesson model validation to allow check only by LessonID\n2022-07-14 Fixed Assessment Navigation Bar not receiving Show/Hide answers event\n2022-07-12 Upgraded Zoom Image destroy to close module when changing layout\n2022-07-12 Fixed ANB not adding \"inactive\" class\n2022-07-11 Added new property Page has not been reset to the Reset Button speech text\n2022-07-08 Correct checking user answer in Table\n2022-07-07 Fixed MathJax not rendering in editor\n2022-07-05 Fixed Multigap MathJax element doubling on iOS\n2022-07-05 Added TTS support to FlashCards\n2022-07-05 Added \"Not assignable\" property to page\n2022-07-05 Added keyboard navigation to the Confirm dialog in Reset Button\n2022-07-01 New Addon Speechace\n2022-06-28 Added Keyboard Navigation + TTS to Hierarchical Table Of Contents\n2022-06-24 Added support for audio speed controller in keyboard navigation and TTS in Text Audio addon\n2022-06-24 Added TTS support to Automatic Feedback\n2022-06-24 Added keyboard navigation and TTS to Limited Reset\n2022-06-24 Added keyboard navigation and TTS to Gradual Show Answer\n2022-06-23 Added support for audio speed controller in keyboard navigation and TTS in Text Audio addon\n2022-06-23 Added keyboard navigation and TTS to External Link Button\n2022-06-23 Add Keyboard Navigation and TTS to Text Coloring addon\n2022-06-17 Added keyboard navigation and TTS to Audio Playlist\n2022-06-17 Fixed TTS in Text Gaps not reseting index after quitting Keyboard Navigation\n2022-06-17 Fixed TTS Dictionary not being parsed after lesson template update\n2022-06-10 Changed playback speed text in Audio\n2022-06-09 Added placeholder to Paragraph Keyboard addon\n2022-06-09 Changed Media Recorder TTS text for stop recording\n2022-06-09 Added keyboard navigation and TTS to Crossword\n2022-06-06 Removed redundant blank lines for paragraph\n2022-06-02 Fixed editing gaps in Table\n2022-06-02 Fixed Assessments Navigation Bar not adding \"inactive\" class\n2027-06-01 Fixed color not being retained by the Text Coloring addon if you leave the page in check answers mode\n2022-05-31 Fixed Crossword auto-navigation ignoring fixed word orientation\n2022-05-31 Cross Lesson change logic with CheckUserAccess\n2022-05-27 Fixed NextPageButton and PrevPageButton triggering click twice on moodle on iOS\n2022-05-24 Fix display ZoomImage in mobile\n2022-05-24 Fix Drawing.uploadImage command not working on Safari iOS\n2022-05-20 Changed Show Answers property from single string to multiple correct answers in Addon Paragraph\n2022-05-20 Block strict letters in Crossword\n2022-05-20 TTS keyboard navigation no longer ignores disabled addons\n2022-05-20 Add new property to CrossLesson addon - check access to cross lesson in LMS mCourser\n2022-05-19 Fixed Crossword improper answers on Gradual Show Answers\n2022-05-18 Added React to Script in the Automatic Feedback addon\n2022-05-16 Added an event when Editable Window is closed\n2022-05-13 Added Show Answers property to Paragraph Keyboard\n2022-05-13 Implemented extended auto navigation for addon Crossword\n2022-05-13 Fixed problem with unchecking in limited check and check combinations\n2022-05-13 Added Audio support to Ordering Addon\n2022-05-13 Add keyboard navigation and text-to-speech to Paragraph addon\n2022-05-13 Fixed setAllPagesAsVisited command resetting previously visited pages\n2022-05-12 Added Speech Text Dictionary to the Editor\n2022-05-06 Add keyboard navigation and tts to editable window\n2022-05-06 Fixed problem with printable version of Text module when audio added to text\n2022-05-06 Fixed not working properly TTS in Text Selection addon when langAttribute not defined\n2022-05-06 Fixed Text-selection not working properly with text formatting\n2022-05-06 Added Audio support to Choice Addon\n2022-04-26 Added File Sender addon\n2022-04-21 Fixed Media Recorder removing recordings and resetting time on reset property\n2022-04-19 Fixed too many Media Recorders blocking audio in Chrome\n2022-04-12 Added ability to define CSS classes for Assessments navigation bar addon sections\n2022-04-06 Fixed Paragraph not setting content properly on page change with show answers active\n2022-04-06 Fixed problem with SourceList module\n2022-04-04 Fixed Limited Hide Answers not un-clicking on Limited Check\n2022-04-01 Fixed visible lines after hide and show\\hide answers in Points and Lines addon\n2022-04-01 Fixed commands to bookmark and unbookmark pages not visible in Assessments_Navigation_Bar addon\n2022-04-01 Fixed Text with draggable gaps not able to fill gaps other than first with keyboard navigation.\n2022-04-01 Changed Text-selection logic on clicks outside selectable elements\n2022-04-01 Fixed Text-selection clicking between available selections with multiSelect selects both of them\n2022-04-01 Fixed incorrect width of Connections middle column when images are present\n2022-04-01 Fixed Paragraph not resetting properly during Limited Show Answers on Limited Reset\n2022-04-01 Added keyboard navigation and tts to CrossLesson module\n2022-03-29 Added keyboard navigation and TTS to Media Recorder\n2022-03-14 Fixed video speed controls adding whenever reset was called\n2022-03-14 Added TTS to Table of Contents\n2022-03-04 Added SrtParser to commons. Added audio narration loading from SRT File to AddonAudio addon\n2022-03-04 Added TTS and Keyboard Navigation support for links in the Text\n2022-03-01 Added second hand to Clock Addon\n2022-02-22 Added removing only incorrect answers in Coloring and Figure Drawing\n2022-02-14 Add TTS to Assessment Navigation Bar\n2022-02-11 Fixed remaining ErrorsMode in Single State Button\n2022-02-02 Fixed Addon containing special chars in its ID\n2022-01-28 HTMLEditor public with new feature - editable text field\n2022-01-26 Fixed Media Recorder not recording/playing on mLibro on iOS devices \n2022-01-24 Fixed video addon progress bar issues on mobiles - fullscreen changed first click and offset between click and actual\n2022-01-12 Added setAllPagesAsVisited command\n2022-01-10 Fixed issue with module ids including non-letter/number signs\n2022-01-04 Added new properties to youtube addon - time video starts and autoplay checkbox\n2021-12-27 Fix visibility of TextColoring on reset and restoring by state\n2021-12-20 Change audio format from wav to mp3 in MediaRecorder addon\n2021-12-15 Added event on blur in Paragraph Keyboard addon\n2021-12-14 Added audio speed controller to Audio Playlist\n2021-12-14 Prevent from adding the dragging class to checked element in Multiple Gap\n2021-12-14 Skipping image in keyboard navigation\n2021-12-13 Added video speed controller to the Video\n2021-12-09 Added nested addons\n2021-11-19 Improve of Addon Coloring performance while reset on firefox\n2021-11-17 Added audio speed controller to the Text Audio\n2021-11-17 Added disabling of analyser in media recorder on safari due to conflicts with recorder\n2021-11-16 Fixed behaviour of text gap when flag ignorePlaceholder is set and placeholder equals actual answer\n2021-11-05 Add dontSendEvent param to select/deselect commands in Addon ImageIdentification\n2021-11-05 Fixed popup absolute position according to absolute parent\n2021-11-04 Separation of the help buttons in the Quiz addon\n2021-11-03 Fixed reopening eKeyboard after closing on the ESC button clicked\n2021-10-22 Fixed flashcard audio after finished record not returning to play state\n2021-10-20 Add new characters to French ekeyboard and change it's order\n2021-10-13 Fix dropdownClicked event received behaviour in Audio, TextAudio and Video addon\n2021-10-04 Added support for method getOpenEndedContentForCurrentPage for addon Paragraph Keyboard\n2021-10-01 Added tests for getState, setState and visibility\n2021-09-29 Added tests for the printable version of Hierarchical Lesson Report\n2021-09-29 Added functionality for the printable version of Hierarchical Lesson Report\n2021-09-29 Added functionality for the printable version in preview of Hierarchical Lesson Report\n2021-09-29 Added functionality to extract content information for Printable Controller\n2021-09-28 Fix Filled Gap reset method\n2021-09-27 Added in paragraph destructor stop function called by timeout from setIframeHeight method\n2021-09-24 Fixed a bug causing lessons to not start in edesk\n2021-09-15 Added a new property for SingleStateButton that allows clicking in show answers mode\n2021-09-09 Added support for printable state for text selection\n2021-09-09 Added tests for printable state in text selection\n2021-09-09 Added support for printable check answers state in text selection\n2021-09-09 Added support for printable show user answers state in text selection\n2021-09-09 Added printable state for text selection\n2021-09-08 Fixed incompatibility bug in getState and setState between versions\n2021-09-03 Fix bug with no event on stop recording android mLibro\n2021-09-01 Fix GSA not working in Text module\n2021-08-31 Add ScoreWithMetadata API\n2021-08-24 Fix bug with eKeyboard going to next input\n2021-08-18 Fixed bug that always gave 100% score or sent end of game event when Hangman addon was in Show Answers mode\n2021-08-16 Add Gradual Show Answer to Point and Lines addon\n2021-08-11 Add GSA mode for Coloring addon\n2021-08-09 Add GSA mode for Memo Game addon\n2021-08-04 Add clear visited pages property to lesson reset\n2021-08-02 Add GSA mode for Text Coloring addon\n2021-07-30 Add getOpenEndedContentsForCurrentPage to PlayerServices\n2021-07-28 Added keyboard navigation and TTS to Quiz\n2021-07-27 Fixed bug that audiodescription in Chrome doesn't stop video\n2021-07-22 Add removeAllBookmarks command and tests to Navigation bar addon\n2021-07-12 Added math editor in popup property to WIRIS addon\n2021-07-12 Fixed Editable Window allowing for resizing of images when editing is disabled\n2021-07-09 Fixed Editable Window replcing it's content with a textbox after page change\n2021-06-24 Added support for printable state in Table\n2021-06-18 Added headers to Table TTS\n2021-06-17 Fixed issue with Text gaps connected to Math addon when leavinh Show Answers mode\n2021-06-17 Hotfix GradualShowAnswer respect null argument (for usage in private addons)\n2021-06-14 Fixed TTS failing when text is too long\n2021-06-09 Fixed too long event handling blocking redrawing of the Coloring addon on Firefox\n2021-06-07 Fix eKeyboard getting triggered by clicking on the audio gap\n2021-06-07 Added support for printable state in Text addon\n2021-06-07 Added support for printable state in Connection\n2021-05-28 Fix width and height space for floating images in IWBToolbar\n2021-05-25 Added support for printable state in ordering\n2021-05-24 Added support for printable state in Choice addon\n2021-05-21 Added support for printable state in text identification\n2021-05-20 Added \"enable undo/redo buttons\" property in IWB Toolbar\n2021-05-20 Change the way text works in the Drawing addon to support multiple lines\n2021-05-19 Added docs and missing label for SkipLink\n2021-05-18 Fixed not being able to use audio element in multiplegap using keyboard navigation\n2021-05-11 Added undo-one button to IWB Toolbar\n2021-05-11 Fix communication between IWBToolbar and Scoreboard\n2021-04-29 Added Support for printable state in Image Identification\n2021-04-29 Added SkipLink module\n2021-04-22 Add zip file property for Iframe addon\n2021-04-21 Scoreboard documentation\n2021-04-19 Added Support for text and image in Drawing addon\n2021-04-13 Added notifier for save\n2021-04-13 Added externalVariables\n2021-04-07 Added disable new page message property to the Text To Speech addon\n2021-04-07 Fixed no correct loading from state for addon table when drop down\n2021-04-07 Added TTS support in Audio addon\n2021-04-06 Added TTS support in Lesson Reset module\n2021-04-02 Fixed issue with IWB Toolbar button selection\n2021-04-02 Added TTS support in Limited Check module\n2021-04-01 Added TTS support in multiplegap\n2021-03-30 Fixed reading Chrome browser version on android\n2021-03-29 Implementation of audio files export\n2021-03-29 Fixed issue with empty spaces at the end of a print page\n2021-03-26 Add new addon Scoreboard\n2021-03-25 Added scriptable button to IWB Toolbar\n2021-03-25 Fixed issue with images breaking pagination in print\n2021-03-24 Added support for regex when used useNumericKeyboard in addons\n2021-03-22 Added support for setPages in printable\n2021-03-18 Increased maximum time in addon Media Recorder\n2021-03-18 Removed display of placeholder text after show and hide\n2021-03-15 Fixed table stretching in print\n2021-03-15 Added show and hide for Crossword\n2021-03-15 Fixed numeric TextBox for iPad\n2021-03-15 Fixed Test Puzzle error on firefox when entering a page in show errors mode\n2021-03-15 Fixed numeric TextBox for iPad\n2021-03-09 Fix Gradual Show Answers addon to work properly with Check Ansers button\n2021-02-24 Add Text property to Multiaudio addon\n2021-02-22 Added Enable in error checking mode property to Media Recorder\n2021-02-11 Fixed show answers and check sending unneeded events\n2021-01-25 Change gradual show answers addon name and labels\n2021-01-21 Fixed dropdown gaps not sending events in Text module when user action events is set to true\n2021-01-20 Add gradual show answers mode\n2020-12-17 Fixed stretching of Connection addon and added draggable gap support in Text for print\n2020-12-03 Fixxed issue with font size of printable lessons\n2020-11-27 Added playback rate control to the Audio addon\n2020-11-26 Fixed issue with assessmentUser==teacher being overrriden by student's state\n2020-11-26 Added WCAG support for TextAudio\n2020-11-25 Added support for assessmentUser metadata in Assessment Navigation Bar\n2020-11-20 Changed randomizeLesson in Assessment Navigation Bar to override addon state\n2020-11-19 Add new property for SingleStateButton which allows clicking in error mode.\n2020-11-17 Added support for randomizeLesson metadata in Assessment Navigation Bar\n2020-11-13 Fixed issue with isAttempted disabling ShowErrors mode in Fractions\n2020-11-12 Removed gap wrapping in Text\n2020-11-02 Added gaps not breaking from text that is directly adjacent to it in Text and Table \n2020-11-02 Fixed issues with navigation in assessment navigation bar.\n2020-11-02 Fixed issue with opening popup page with YouTube addon\n2020-10-27 Fixed issue with AudioPlaylist on iOS\n2020-10-23 Fixed issue with setting pages as nonreportable by adaptive learning service\n2020-10-22 Remove allOK event from Text\n2020-10-22 Fixed problem with null elements in LineNumber after getState call\n2020-10-15 Fix issue with assessments navigation bar and specific pages selected\n2020-10-14 Add new addon AudioPlaylist\n2020-09-25 Add possibility to reset only wrong answers.\n2020-09-22 Added queuing commands to Connection when it is being loaded, fix issue with getting state of loading connection\n2020-09-18 Added handling situation where Assessment Navigation Bar had more pages than lesson\n2020-09-18 Added getNarration command for Audio\n2020-09-15 Added new properties for ValueChanged event and added method for injecting eventbus for addons\n2020-09-15 Added possibility for creating adaptive lessons\n2020-09-11 Fixed state of marker tool in IWB Toolbar not being saved\n2020-08-17 Added property to Assesment Navigation Bar for switching off the randomization\n2020-07-21 Changed icon of YouTube addon\n2020-06-26 Changed the way lesson score is rounded\n2020-06-20 Add checking if gap is audio gap\n2020-06-19 Add getresponseindex to commands in Feedback addon\n2020-06-17 Fix page weight in utils.\n2020-06-08 Added checking if event item is null in MultiAudio\n2020-06-04 Modified youtube addon to use new mauthor api\n2020-06-02 Fix problem with page size when static footer is enabled\n2020-05-26 Fixed issue with Paragraph when the default layout is not the initial one\n2020-05-15 Fixed numeric gaps displaying a warning when a fraction is inputed\n2020-05-06 Added draggable items interface for multiaudio and support for it in multiplegap\n2020-04-21 Added resetPage and resetPageByName commands\n2020-04-17 Changed enabled youtube addon to work regardless of api quoata\n2020-03-05 Fix issue with XML entities in dropdown gap breaking show answers\n2020-03-05 Added HTML IDs to Choice options\n2020-03-04 Added maintain state property to Limited Check addon\n2020-02-10 Add new property for Lesson Progress to enable refreshing view on page load\n2020-01-07 Lock only addons which are set in config in eKeyboard addon.\n2019-12-12 Added use numeric keyboard property to Basic Math Gaps, Table, Text and Writing Calculations\n2019-12-09 Fix problem with Basic Math Gaps and jQuery copy.\n2019-12-09 Fix problem with show answers and Image Gap module\n2019-12-06 Fix problem with LinkInfo to page\n2019-12-05 Fixed issue with updating links in text leading to their previous address\n2019-12-04 Fixed issues with echo on FireFox, events on Edge and suspended analyzer on Chrome in Media Recorder addon\n2019-11-27 Add new property to Basic Maths Gaps: User action events.\n2019-11-22 Fixed issues with text from draggable gaps dissapearing when dragged out of text\n2019-11-18 Fix problem with static footer and page size\n2019-11-18 Fixed issues with Slovak letters in crossword\n2019-11-08 Fixed issues with module group visibility\n2019-11-08 Added modules metadata.\n2019-11-08 Add alt text support for SourceList\n2019-11-05 Added isAttempted command to Text Coloring.\n2019-11-05 Remove side effect from getState in paragraph module.\n2019-11-05 Remove hideAnswers in getState, getScore and getErrorCount in table addon.\n2019-10-30 Fixed Slider working incorrectly when inside overflow: auto\n2019-10-29 Added Count Errors property to Text Coloring\n2019-10-29 Added clearing Catch addon objects on page change.\n2019-10-29 Fixed getting readable text in Text module\n2019-10-28 Fixed issues with scaling of multiplegap\n2019-10-24 When table is not activity or does not have gaps, then return true in isAttempted\n2019-10-24 Fixed problem with animation and transparency.\n2019-10-23 Fixed error in destroy method in IWB Toolbar module\n2019-10-18 Fixed styles in Flash Cards module\n2019-10-17 Fix problem with hideAnswers in getScore, getErrorCount, getState in multiple gap addon\n2019-10-16 TrueFalse is not hidding show answers during getState\n2019-10-16 Remove hideAnswers from getState in ordering module.\n2019-10-14 Optimize drawing frames in Animation addon\n2019-10-11 Added isAttempted command to Table.\n2019-10-10 Added TTS support to Slider\n2019-10-10 Fix for moveToFrame command in Image Vierwer not calling tts\n2019-10-09 Added destroy method and fixed getting state in Slideshow module\n2019-10-09 Add destroy lifecycle management for modules. Use destroy in IWB addon. Fix problem with DropDown gap and disable. Remove hideAnswers from getState in Text module.\n2019-10-07 Fix Coloring issue when the first layer is not default\n2019-10-07 Fixed issues on Edge and mlibro\n2019-10-03 Fixed TTS reading Image Viewer alt text after entering a page\n2019-09-27 Fix ImageViewerPublic model upgrade.\n2019-09-26 Fixed disabling Image Gap module\n2019-09-23 Added TTS support to Image Viewer\n2019-09-17 Added a new text property for controlling how gap size attribute is calculated\n2019-09-17 Added TTS support to the Animation addon\n2019-09-13 Fixed TrueFalse showAnswers method when correct answers are empty.\n2019-09-11 Added handling of online video files when offline\n2019-09-10 Fixed getState breaking Swiffy Animation addon\n2019-09-05 Added loading CSS styles to Editable Window\n2019-09-04 Fixed IWB Toolbar zoom working incorrectly in iframe\n2019-09-02 Fixed problem with fullscreen in iframe addon\n2019-08-26 Added getter for Content metadata. Added SCORM passed/failed statuses.\n2019-08-20 Added alt text support to text identification\n2019-08-12 Fixed problem with editable window with audio on IE, EDGE, FIREFOX\n2019-07-31 Blocked the download audio in Editable Window module\n2019-07-26 Fixed scrolling while dragging the Slider on mobile devices\n2019-07-26 Fixed issue with the values of newly added properties being overwritten\n2019-07-26 Fixed opacity in Editable Window module\n2019-07-22 Removed the ability to download the video in editable window\n2019-07-19 Added supporting of only audio to Editable Window\n2019-07-15 Fixed problem with editable window with video on IE\n2019-07-11 Fixed test - position of IWB toolbar in fullscreen mode\n2019-07-11 Fixed position of IWB toolbar in fullscreen mode\n2019-07-04 Added translations for Sejer to Paragraph and Editable Window\n2019-07-03 Changed structure of a Editable Window\n2019-06-27 Fixed saving and closing notes on mobile devices in IWB Toolbar module\n2019-06-19 Fixed anchors in Editable Window\n2019-06-11 Fixed issue with Report when multiple pages have the same name\n2019-06-11 Fixed issue with background color in show answers mode of Text Coloring\n2019-06-10 Fixed issues with editable window position centering. Disallow moving the window outside of document.\n2019-06-07 Added fullscreen option to editable window.\n2019-06-04 Added property to disable or enable editing in popup in Editable window module\n2019-05-23 Added title to a ediatble window custon addon\n2019-05-14 Fixed issue with setState in Audio on Mobile Safari\n2019-05-10 Fixed setting iframe height in Paragraph module\n2019-05-10 Added reset button, limited width and limited colors in Editable Window\n2019-04-18 Fixed issue with isAttempted command in Paragraph\n2019-04-18 Fixed issue with pause command in video only being available from AC scripts\n2019-04-17 Added audio to text module\n2019-04-17 Fixed sorting on mobile devices in Ordering module\n2019-04-16 Added new custom addon editable window\n2019-04-11 Fixed issue with the dotted button in Navigation Bar and added Block not visited pages property\n2019-04-10 Added setContextMetadata to player API\n2019-04-10 Added lock and unlock commands and weight property in Paragraph and Paragraph Keyboard modules\n2019-04-04 Added 'no audio' option to the slideshow addon\n2019-04-04 Fixed calculating max score in Choice module\n2019-04-02 Fixed setting isEnable property in Text Audio module\n2019-04-01 Added refreshing mathjax in filled gap in Text module\n2019-04-01 Added bookmarks to Navigation Bar\n2019-03-13 Fixed issue with dropdown gap editor when 'keep in order' is disabled\n2019-03-12 Fixed setting state in Basic Math Gaps module\n2019-03-06 Fixed problem with not selectable placeholder text in filled gap after reset command\n2019-03-04 Added showAnswers, hideAnswers, enable and disable commands in True False module\n2019-02-28 Fixed problem with setting state in Text Audio module\n2019-02-26 Added Manual grading and Title properties in Paragraph and Paragraph Keyboard modules\n2019-02-21 Fix for problem with dissapearing Source List items after drag stop\n2019-02-08 Fixed adding selectable characters in word in Text Coloring\n2019-01-31 Added starting values to connection modules\n2019-01-28 Fixed problem with recreating gaps on show command\n2019-01-22 Fixed getting error count in Shooting Range module\n2019-01-21 Added disable and enable commands for TextAudio addon\n2019-01-14 Added new addon Limited Submit\n2019-01-14 Fixed a model in media recorder addon\n2019-01-14 Added a end of game event to a shooting range addon\n2019-01-14 Fixed setting state in Coloring module\n2019-01-14 Fixed the problem of latex reloading in a quiz addon\n2019-01-11 Added disable enable commands to Media Recorder addon\n2019-01-10 Fixed view shift on mobile devices in Points and lines, Connecting dots, Coloring\n2019-01-10 Added commands to Text, Ordering, Image Gap and Choice\n2019-01-10 Changed the behavior of the point counter in a Catch addon\n2019-01-04 Fixed setting player controller in Shape Tracing module\n2019-01-02 Added command isOK to a connection addon\n2018-12-21 Fixed a rerendered mathjax of text module\n2018-12-19 Fixed reseting after using setText command in Text module\n2018-12-17 Fixed ekeyboard paragraph loading on the first page of mCourser\n2018-12-17 Fixed mathjax calls\n2018-12-12 Fixed shape tracing scaling on mobile devices\n2018-12-11 Upgraded tinymce library\n2018-11-28 Fixed media recorder on safari mobile devices and mLibro\n2018-11-28 Fixed reset issue in Shooting Range\n2018-11-27 Fixed issues with inline display: none in multiple addons\n2018-11-21 Fixed toolbar and added color pickers in Paragraph module\n2018-11-09 Fixed hyperlinks in feedback\n2018-11-05 Added alt text to audiodescriptions in video\n2018-11-05 Fixed static header and footer positioning when in scaled iframe\n2018-11-02 Added removal of MathJax \"End Process\" hooks after modules detach\n2018-10-25 Fixed problem with loading math jax\n2018-10-25 Added new addon audio recorder\n2018-10-22 Grouping modules into a div\n2018-10-16 Hierarchical lesson report add maxscore link\n2018-10-16 Added property Plate Image in Catch module\n2018-10-15 Fixed iFrame visible in the editor when the hide option is enabled\n2018-10-12 Shooting range impoving the game.\n2018-10-11 Removed sending ValueChanged with value removed on stopping item drag in multiplegap\n2018-10-10 Added disable dragging property in Ordering\n2018-10-09 Fixed scoring in multiplegap when incorrect answers are present\n2018-10-09 Fixed problem with setState in shooting range module\n2018-10-08 Fixed issue with show answers in Text Selection when Limited Check is used\n2018-10-05 Fixed issue with MathJax in eKeyboard and Text when the first layout is not default\n2018-10-03 Added setText in Paragraph\n2018-10-02 Fixed isAttempted method in not activity mode in True False module\n2018-09-27 Changed mouse and touch control scheme in Catch addon\n2018-09-24 Fixed issues with scoring in multiplegap\n2018-09-24 Added missing split page label\n2018-09-19 Fixed issue with decimals in Math\n2018-09-19 Unifed visiblity settings in preview for multiple addons\n2018-09-17 Fixed issue with Audio progress bard\n2018-09-17 Fixed conflict CSS of modules\n2018-09-14 Removing semi word from translations labels and API calls.\n2018-08-24 Fixed problem with hiding audio descriptions in Video module\n2018-08-23 Added 'Enable scroll on mobile' property in Text Identification module\n2018-08-17 Added show answer class for individual words in Text Coloring.\n2018-08-17 Fixed Double_State_Button native navigation.\n2018-08-13 Fixed Choice disable command on mobiles\n2018-08-10 Added audio descriptions to the video addon\n2018-08-10 Fixed displaying of < > buttons in assessments navigation bar\n2018-08-07 Fixed layout change issue after quiting fullscreen mode\n2018-08-06 Fixed issues with tests for page version update\n2018-08-03 Fixed playing Video without controls bar\n2018-08-03 Added Copy Page Settings to Page properties\n2018-08-03 Changed is visible property so that it's common for all layouts\n2018-07-31 Fixed PieChart's display on Desktop devices\n2018-07-26 Removed reading \" connected\" when in Show Answer Mode in TTS\n2018-07-25 Added test mode in quiz\n2018-07-23 Added module sorting in editor\n2018-07-20 Fixed issues with invalid model in Crossword addon\n2018-07-18 Replaced Video Tutorials button with Interactive Tutorials\n2018-07-18 Fixed Scrolling on a Page in TTS\n2018-07-17 Added Phrase Selection Mode to Text Coloring\n2018-07-17 Fixed coursor position in GridScene\n2018-07-13 Fixed next() and previous() methods in MultiAudio addon\n2018-07-13 Fixed fullscreen on iPad\n2018-07-13 Fixed restartGame command in Shooting Range\n2018-07-12 Removed Byte Order Mark from polish dictionary\n2018-07-10 Added Games category\n2018-07-10 Added scrolling to the active module in keyboard navigation\n2018-07-10 Added TTS support for Image Gap\n2018-07-09 Added TTS support for gaps in Table\n2018-07-06 Added TTS support for Double State Button\n2018-07-06 Added TTS support for Memo Game\n2018-07-04 Fixed setting of working mode in text coloring addon\n2018-07-04 Fixed calculation of popup elements position\n2018-06-29 Fixed several issues between TTS and NVDA on Firefox\n2018-06-27 Fixed autofill option for TTS\n2018-06-26 Fixed identification of expression variables in math addon\n2018-06-25 Added feature to color individual letters in text coloring addon\n2018-06-25 Fixed visibility of the element dragged from the gap\n2018-06-22 Fixed problem with pseudo code console on IE11\n2018-06-20 Added Autofill option for TTS\n2018-06-18 Added a caching of the video posters\n2018-06-15 Changed labels for Limited Show Answer addon\n2018-06-15 Added TTS support for Text Selection\n2018-06-14 Added new addon Limited Show Answers\n2018-06-05 Added TTS support for Table cells\n2018-06-05 Moved pausing on getState to destroy method in media addons\n2018-06-04 Fixed issues with TTS handling of the Dropdown gap in Text module\n2018-05-28 Fixed issues with hover style in reset button on mobile\n2018-05-28 Fixed issue with TTS in multiplegap after reset\n2018-05-28 Added TTS support for Image Identification\n2018-05-25 Added a test to check for special character handling in text coloring\n2018-05-24 Fixed conflicts between WCAG mode and NVDA\n2018-05-24 Added TTS support for Zoom Image\n2018-05-21 Added TTS support for Heading\n2018-05-15 Fixed several issues with choice module on mobile devices\n2018-05-15 Fixed cell-show-answers class name in gamememo\n2018-05-15 Added class on hover in TrueFalse addon\n2018-05-14 Added TTS support for alt texts of images in multiple modules/addons\n2018-05-11 Added keyboard shortcut for changing the page in player\n2018-05-09 Fixed problems with static footer display when chaning layouts. Fixed problems with footer width after orientation change.\n2018-05-08 Fixed issues with eKeyboard in Popup.\n2018-05-07 Fixed issues with special characters in Text module gaps.\n2018-04-27 Fixed problem with saving choice feedback property.\n2018-04-27 Added TTS support for Hierarchical Lesson Report\n2018-04-26 Fixed issues with spacebar in keyboard navigation\n2018-04-26 Added TTS support for feedback addon\n2018-04-26 Added TTS support for Image Source and Multiple gap\n2018-04-24 Fixed problem with != statement in math module\n2018-04-24 Fixed problems with hovering classes and executing actions in button modules.\n2018-04-24 Added show and hide commands to Page Counter addon.\n2018-04-24 Fixed problem with size of popup\n2018-04-23 Added 'Enable scroll on mobile' property to the Text Selection addon\n2018-04-18 Fixed problem with check answers mode of gaps in the Table addon\n2018-04-17 Fixed problem with empty XML tag in page progress configuration\n2018-04-16 Fixed problem with CORS in popup addon.\n2018-04-13 Added option to select the language used in gaps ant alt texts in Text, Choice, Connection and Ordering modules\n2018-04-12 Fixed problem with <> symbols in Text draggable gap\n2018-04-11 Fixed problem with video on IE 11\n2018-04-09 Fixed a problem with WCAG mode sometimes turning off on page change.\n2018-04-03 Fixed problem with rotating ruler in IWB Toolbar module.\n2018-03-28 Added property to vertically center the answer in Quiz module. Added headers-of-answers class to posibility to style headers of answers in Quiz module.\n2018-03-28 Added checking for permissions to modify top window in glossary\n2018-03-26 Added classes while checking answer in Pseduo Code Console. Fixed problem with exceptions translations in pseudo code console.\n2018-03-23 Added game mode to board game. Added new addon dice. Added validation utils.\n2018-03-22 Added \"video-poster-pause\" CSS class to \"video-poster-play\" element on pause and removing it on stop\n2018-03-20 Fixed problem with eKeyboard removing event handlers\n2018-03-20 Fixed problem with showing answers in gaps\n2018-03-20 Added calling show answer on enter press event\n2018-03-20 Added keyboard navigation to Text Selection addon\n2018-03-19 Added Alt Text in Text, Ordering, Connection and Choice modules\n2018-03-16 Added current-page class in icon+list display type in Table of Contents module\n2018-03-13 Added new property - \"Is Disabled\" to Image Identification module\n2018-03-13 Added TTS support for Navigation Bar\n2018-03-13 Added TTS support for Page Counter\n2018-03-13 Added fix in Page Progress Panel\n2018-03-12 Added minus errors scoring type for modules group\n2018-03-09 Fixed problem with TrueFalse module and undefined model field.\n2018-03-09 Added Page Progress Panel module\n2018-03-08 Fixed problem with zooming after page change in when using Navigation Bar and Paragraph.\n2018-03-07 Fixed tests for pseudo code console and webpack build script.\n2018-03-07 Static list property returns objects not lists. Added pseudo code console.\n2018-03-06 Fixed problem with & in text selection\n2018-03-06 Fixed problem with scrolling and page look with static header on\n2018-03-05 Fixed problems with scaling in Popup\n2018-03-05 Better handling of the editor page loading error\n2018-03-05 Added Timer addon\n2018-03-02 Fixed problem with scaling in Connection addon\n2018-03-02 Added property to set ordering items to starting position\n2018-03-01 Fixed problem with gap parsing with opening tag character\n2018-03-01 Fixed problem with opening gaps on mobile devices in eKeyboard module\n2018-02-28 Fixed problem with restoring state in video addon\n2018-02-28 Fixed problem with hover in iOS\n2018-02-27 Added localization for alt-text in some modules and layout in eKeyboard\n2018-02-27 Renamed Hierarichal Lesson Report property\n2018-02-23 Readded works with property in Page Progress.\n2018-02-22 Changed when Text has no gaps it does not require escape to deactivate in WCAG navigation\n2018-02-21 Added TTS support for Reset button\n2018-02-21 Added TTS plays the title of the new page\n2018-02-20 Added Page mapping ids translations, Size and ModuleDimensions equals implementations\n2018-02-20 Added TTS support for SHow Answers Button\n2018-02-15 Added TTS support for the Text's Draggable Gap\n2018-02-15 Added TTS support for Check Answers Button\n2018-02-15 Fixed issue with scaling in Figure Drawing on mobile devices\n2018-02-14 Fixed issue with reseting module in Catch module\n2018-02-13 Fixed issues with Glossary scaling on mobile devices\n2018-02-13 Fixed problem with resolving url in inline css\n2018-02-12 Fixed Catch addon double click behaviour on mobile devices, paddle is always appearing and can't run past right edge of screen. Also simulation is paused on show answers and checks answers, and it calculates max score.\n2018-02-12 Deselecting Double State Button on the end of Multiaudio track connected via Audio Binder.\n2018-02-09 Fixed dragging out elements from Draggable Gap.\n2018-02-09 Fixed speak and playTitle commands in TTS addon\n2018-02-07 Added attribute role in TrueFalse for screen reader apps.\n2018-02-06 Fixed issues with scaling in Drawing\n2018-02-01 Fixed issue with saving empty inlineStyles or classStyles.\n2018-01-30 Added alt text for images added by RichTextEditor and for Memogame.\n2018-01-30 Fixed Double State Button not activating on keyboard input.\n2018-01-29 Fixed Image gap and multiplegap not getting image source alt text\n2018-01-26 Fixed addon TrueFalse now only adds text as checkbox alt text\n2018-01-24 Fixed addon TrueFalse not being read correctly by NVDA\n2018-01-23 Fixed url resolving for modules\n2018-01-23 Fixed Choice chosen element not reseting\n2018-01-23 Fixed tests in TTS and Text Identification\n2018-01-23 Added tabindex in Image Identification, Image Source and Text Identification\n2018-01-23 Added TTS functionality\n2018-01-19 Puzzle addon allows drag'n'dropping elements; fixed showing correctness marks for many puzzle addons at once; now it sends valueChanged event\n2018-01-18 Added item handling of MultiAudio in Multiple Audio Controler Binder\n2018-01-18 Fixed events in LearnPen Data module\n2018-01-17 Fixed player start with subset of pages from exported lesson.\n2018-01-17 Fixed reading data in LearnPen Report module\n2018-01-15 Added time labels property for video addon.\n2018-01-10 Fixed problem with saving and restoring modules xml.\n2018-01-10 Fixed deselects the selected widget when showing errors, correct answer, or resetting\n2018-01-09 Fixed setting enable tabindex property\n2018-01-05 Added Do not block in check mode property to DoubleStateButton\n2018-01-04 Fixed issue with too large coordinates in Coloring\n2018-01-04 Fixed showing system keyboard for eKeyboard on mobiles.\n2018-01-03 Fixed inline-css error with not unescaping apostrophe\n2018-01-03 Fixed problem with opening popup.\n2018-01-03 Fixed problem with moving to next gap in eKeyboard module\n2017-12-28 Added possibility to define many layouts for lesson depending on device threshold\n2017-12-22 Fixed tests in Video module\n2017-12-22 Added initial configuration in Blockly Code Editor module\n2017-12-22 Fixed showing cards and images in Memogame module\n2017-12-14 Fixed performance issues with preloading images for preview mode in Animation module\n2017-12-13 Fixed popup scrolling\n2017-12-13 Fixed managing tabindex property\n2017-12-12 Fixed Text coloring that was producing additional clickable elements\n2017-12-06 Fixed navigating in gaps\n2017-12-06 Added custom events handling and using /file/serve files from mCourser with no_gcs flag\n2017-12-05 Added Enable tabindex property and changed default value.\n2017-12-01 Added setVideoURL command for video addon.\n2017-11-27 Added tabindex for text.\n2017-11-23 Double State Button can be activated with enter/space when cycling through modules using browser's tab navigation\n2017-11-22 Fixed Ordering module that could crash browser when two items were added and \"don't generate correct order\" was selected\n2017-11-22 Fixed log2 operation in Fractions module\n2017-11-15 Added alternative text property in Image Source, Image Identification, iFrame and Multiplegap modules\n2017-11-14 Fixed problem with math gaps in Text when changing page quickly.\n2017-11-09 Added commands to fire keyboard navigation\n2017-11-09 Added Tabindex property for next part of modules.\n2017-11-09 Added show play button for video addon. Added setVideoURL command for video addon.\n2017-11-06 Fixed problems with Magic_Boxes view.\n2017-10-31 Added Tabindex property for modules. Added tabindex handling for Choice, Connection, TrueFalse, Ordering and Memo.\n2017-10-31 Fixed problem with adding scroll handlers in IWB Toolbar.\n2017-10-23 Fixed problem with defining functions in math. Fixed problem with calling build in functions in math.\n2017-10-23 Added keyboard navigation in Table of Contents module\n2017-10-16 Added sending events on select and deselect and corresponding property.\n2017-10-16 Load button for list property in editor showed only for iframe module.\n2017-10-12 Fixed test configuration in Quiz module\n2017-10-12 Fixed bug with TextAudio still playing sound after closing popup with it\n2017-10-11 Fixed Programming Code Prompt module - enter now creates a new line.\n2017-10-11 Added property to Ordering module, which disallows generating a correct ordering by random.\n2017-10-11 Fixed problem with errors in console in iFrame module\n2017-10-11 Added new addon Quiz\n2017-10-10 Added alternative name styling property in Hierarchical Lesson Report.\n2017-10-09 Added closed panel drawing property in IWB Toolbar module\n2017-10-05 Added shooting range addon.\n2017-10-05 Added language attribute in Text module and lesson\n2017-10-05 Fixed problem with too large page index\n2017-10-02 Fixed imageSource that got position zeroed when called reset() on it after PageLoaded event\n2017-10-02 Fixed problem with jumping video. Fixed problem with poster visibility.\n2017-10-02 Fixed problem with showing glossary popup in present view.\n2017-10-02 Fixed problem with auto play in Video module\n2017-09-29 Removed gap definition from html attributes in text module\n2017-09-28 Fixed accessing window.top properties\n2017-09-28 Fixed random order in Choice module\n2017-09-26 Added sendMessage command in iFrame module\n2017-09-25 Added alternative text and keyboard navigation in Zoom Image module\n2017-09-22 Fixed Assessments Navigation Bar page selecting and added keyboard navigation. Changed keyboard navigation in Navigation Bar.\n2017-09-22 Added new addon Catch\n2017-09-19 Added notification about setting header/footer.\n2017-09-18 Setting individual header and footer for pages.\n2017-09-15 Removed changing controls visibility in glossary addon\n2017-09-15 Added alternative text property for video and image\n2017-09-14 Fixed events problem in eKeyboard and devices with touchscreen and mouse\n2017-09-14 Added new addon Heading\n2017-09-12 Fixed problem with dragging in source list.\n2017-09-11 Added ended event for animation addon\n2017-09-11 Fixed problem with preview and Slideshow. Fixed problem with playing slideshow without loaded audio.\n2017-09-04 Added WCAG support for Image Gap and Image Source\n2017-09-04 Fixed problem with multiple calling WCAG on elements. Added WCAG for Image ID.\n2017-08-31 Added WCAG support for Table.\n2017-08-29 Added message watcher for listening on keydown event outside iframe for WCAG\n2017-08-25 Added WCAG support for Image ID\n2017-08-25 Added full support for WCAG in Text module\n2017-08-24 Added WCAG support for Multiplegap\n2017-08-23 Fixed problem with disabling source list by Limited check. Removed commons.js from repository. Added to addons tests building commons.js.\n2017-08-22 Fixed problem with using chars and numbers in math addon.\n2017-08-22 Added to audio force loading audio. Upgraded sinon to 2.4.1.\n2017-08-17 Fixed problem with scaling popup\n2017-08-14 Added go to last visited page for previous page button.\n2017-08-14 Fixed problem with default keyboard navigation in browser while using player keyboard navigation\n2017-08-14 Added keyboard navigation for Single State Button and Double State Button. Fixed keyboard navigation for addon buttons.\n2017-08-14 Added keyboard navigation for ordering module.\n2017-08-14 Removed unnecessary text from SVG2 addon.\n2017-08-10 Added keyboard navigation (WCAG) for connection addon.\n2017-08-09 Added gotoCommonPageId, setHeaderVisibility, setFooterVisibility commands for player.\n2017-08-09 Fixed problem with double mathjax rendering in ordering module.\n2017-08-08 Added keyboard navigation (WCAG) to Source List module and draggable gaps in Text module\n2017-08-08 Added WCAG for GotoPageButton.\n2017-08-04 Added EOG event for Hangman addon\n2017-08-04 Added keyboard navigation and timer feature to Memo Game module\n2017-08-04 Fixed problem with different display of math gaps in editor and player.\n2017-07-31 Fixed problem with eKeyboard open command.\n2017-07-28 Added option for sorting assets in select file window.\n2017-07-26 Fixed problem with empty stroke width property in fractions addon.\n2017-07-25 Added Increment mistake counter property for Show Answers.\n2017-07-25 Fixed popup size when page bigger than window size.\n2017-07-25 Changed default video control bar to custom control bar. Fixed problems with subtitles in fullscreen in video.\n2017-07-24 Added new mode do fractions addon to dividing square. Refactored fractions addon.\n2017-07-18 Fixed popup close event.\n2017-07-17 Added video current time event.\n2017-07-11 Added command execute for reset button module.\n2017-07-10 Fixed selecting text while dragging slider. Fixed dragged slider position.\n2017-07-07 Added Wrap Items property to multiplegap module\n2017-07-05 Fixed problem with tests which are using gwt classes\n2017-06-29 Fixed problem with using apostrophe in gaps\n2017-06-19 Fixed problem with custom events in Source list\n2017-06-08 Fixed problem with dropdown gaps in Text module\n2017-06-06 Fixed issue with scoring in Text module, added escaping pattern in gaps.\n2017-06-05 Fixed problem with using eKeyboard in Text module. Added build files to gitignore.\n2017-05-29 Fixed scoring and error counting in Text Presenter for dropdown gaps.\n2017-05-26 Added new commands: setAsReportable nad setAsNonReportable for page.\n2017-05-25 Fixed problem with checking answers in Hangman module\n2017-05-22 Fixed Image Source module issue with show command and relocating module to 0,0 position\n2017-05-22 Fixed problem with relative url returned by getPreview on localhost\n2017-05-12 Added new display type icons+list in Table of Contents module\n2017-05-11 Fixed propagating click in Image identification module\n2017-05-09 Fixed resizing iframe in Paragraph eKeyboard module\n2017-04-27 Changed url for image in eKeyboard module\n2017-04-26 Fixed tests in Iframe, shape_tracing addons.\n2017-04-24 Fixed loading images in Shape Tracing and Coloring\n2017-04-24 Added sending event after closing popup page\n2017-04-20 Added commands to get and set scroll value from iframe.\n2017-04-19 Added playing, stop, end, pause events for slide show addon.\n2017-04-12 Added dontMoveModules parameter to outstretchHeight command.\n2017-04-07 Added allow fullscreen property to iFrame addon.\n2017-04-04 Added changes in Variable Storage module\n2017-04-04 Fixed adding hovering class in Reset module\n2017-04-04 Added changes in page list.\n2017-04-04 Fixed problem with reseting module after closing Popup in Paragraph module\n2017-04-03 Fixed problem with not initialized eKeyboard while calling eKeyboard command.\n2017-03-29 Fixed getting state in Paragraph module\n2017-03-29 Fixed scrolling screen on iOS in Drawing module\n2017-03-29 Added counting score from provided modules in Limited Check module\n2017-03-27 Removed unused logo library\n2017-03-27 Fixed problem with Z-Index in Programming Command Prompt\n2017-03-23 Fixed removing chapters\n2017-03-21 Added changes to PieChart module\n2017-03-21 Changed getting parent chapter\n2017-03-16 Added missing labels\n2017-03-16 Added full screen mode and disable full screen property in YouTube module\n2017-03-15 Fixed resetting bookmarks and added moveToPreviousPage and moveToNextPage commands in Assessment Navigation Bar module\n2017-03-13 Added filled gap in Table module\n2017-03-10 Fixed problem with zoom on iPhone in Paragraph module\n2017-03-08 Fixed test in Table module\n2017-03-08 Fixed tests in Math and Table modules\n2017-03-08 Fixed rendering LaTeX in draggable gaps in Table module\n2017-03-03 Fixed executing code after checking, showing and resetting answers in Grid Scene module\n2017-03-02 Added current-page class in Table of Contents module\n2017-03-02 Fixed working in popup in eKeyboard module\n2017-02-27 Fixed expressions with white spaces in Math module\n2017-02-27 Added showCloseButton command in eKeyboard module\n2017-02-24 Fixed parsing expressions in Math module\n2017-02-24 Fixed scoring when placeholder text is the same as correct answer in Text module\n2017-02-24 Fixed removing hover styles in Popup Button module\n2017-02-23 Fixed highlighting text in Text Audio module\n2017-02-21 Added show answers mode in Puzzle module\n2017-02-21 Added math.js library and fixed problem with calculating expressions\n2017-02-16 Fixed displaying current page in Navigation Bar module\n2017-02-15 Added icon display type in Table of Contents module\n2017-02-15 Fixed static header and footer\n2017-02-06 Updated ekeyboard labels in dictionaries.\n2017-02-02 Fixed static header and footer with outstretch height and in fit to window and full screen modes\n2017-02-02 Added Works with property in Page Progress module\n2017-02-02 Added show/hide commands in Writing Calculations module\n2017-02-02 Added enable/disable button/command in eKeyboard. Fixed changing focus by eKeyboard. Fixed open command in eKeyboard. Changed Esc button action in eKeyboard. Updated jquery.keyboard.min.js.\n2017-01-31 Added setting text parser in Table module\n2017-01-24 Added events for drawing commands in Grid Scene module\n2017-01-24 Fixed problems on iPad in Paragraph module\n2017-01-24 Fixed saving changes in Choice module\n2017-01-16 Fixed display bug in animation module on android 5.1.1 and 5.0.2\n2017-01-16 Fixed isVisible property on Safari in Iframe module\n2017-01-11 Added Enable pages property in Hierarchical Lesson Report module\n2017-01-11 Fixed problem with updating additional styles and displaying pages in Navigation Bar module\n2017-01-04 Fixed rendering LaTeX afetr showing answers in Math module\n2016-12-29 Fixed issue with doubled events in Table module\n2016-12-29 Fixed saving state of drawings in IWB Toolbar\n2016-12-22 Added Animated gif refresh property in Layered Image module\n2016-12-20 Fixed counting score after showing answers in Math module\n2016-12-19 Fixed counting score after showing answers in Writing Calculation module\n2016-12-14 Removed random values from report when stylus is of in LearnPen Report module\n2016-12-12 Added Open external link in property in Glossary module\n2016-12-01 Added confirmation box in Reset module\n2016-12-01 Added refreshing animated gifs in Image module\n2016-12-01 Fixed problems with coloring ans saving state in Text Coloring module\n2016-11-24 Fixed problem with dragging in Clock addon.\n2016-11-24 Added multiple answers in filled gap.\n2016-11-23 Added outstretch height command to player controller\n2016-11-22 Added looping in Video module\n2016-11-21 Fixed refreshing animated gifs in Layered Image module\n2016-11-21 Added isAttempted command in Paragraph module\n2016-11-17 Added continous events in Clock module\n2016-11-17 Fixed calculating max score in Choice module\n2016-11-16 Removed unicode special characters from Shape Tracing comments\n2016-11-08 Fixed width calculating in Table addon.\n2016-11-03 Fixed showAnswer, setShowErrorMode bugs in Grid Scene addon.\n2016-11-03 Added Blockly Code Editor addon. Fixed bugs in Grid Scene. Added property Editable Select and Select for list.\n2016-10-27 Added hiding answers after reset in Image Gap module\n2016-10-27 Fixed operating on module in popup page in Connection and eKeyboard modules\n2016-10-27 Fixed setting space after punctuation marks in Text Coloring module\n2016-10-26 Fixed problem with saving state in Paragraph module\n2016-10-25 Fixed issue with setting element to invisible module in Multiplagap module\n2016-10-24 Fixed saving and closing notes in IWB Toolbar\n2016-10-21 Fixed issue with pen and marker tools in IWB Toolbar module\n2016-10-07 Added new addon Text Coloring, added new commons ErrorUtils and fixed SAO depedencies\n2016-10-04 Added getText command in Paragraph module\n2016-09-29 Fixed setting state in Paragraph module\n2016-09-27 Fixed displaying animation with transparent background in Animation module\n2016-09-26 Added events on pause and pause command in Audio module\n2016-09-21 Added test from Programming Code Prompt\n2016-09-21 Added Progamming Code Prompt addon. Added Grid Scene addon. Added static list property.\n2016-09-21 Fixed issue with moved droppable area in Connection module\n2016-09-21 Fixed setting gap size in Table module\n2016-09-19 Fixed issue with missing arguments in function in Paragraph addon\n2016-09-19 Added default property to addons: Table, Puzzle, feedback, PieChart, TrueFalse, TextAudio, MenuPanel, MultiAdui, Text_Selection, Variable_storage, text_identification, Double_State_Button, WrittingCalculations, Single_state_Button, SelectableAddonsBinder, Multiple_Audio_Controls_Binder\n2016-09-14 Added new property buttons width and buttons number in Assessments Navigation Bar addon\n2016-09-08 Fixed checking pages scores in Navigation Bar module\n2016-08-30 Fixed issue with relative urls in css and eKeyboard styling\n2016-08-30 Added function addonIsLoaded to Content, Fixed bug with thumbnail in YouTube Addon\n2016-08-30 Added hiding subtitles in Video module\n2016-08-29 Fixed problem with Player crashes when properties \"static header\" / \"static footer\" are marked and lesson doesn't have header / footer\n2016-08-24 Added notification functions and pages limit to Content.\n2016-08-19 Updated tinymce library from version 4.0b2 to 4.4.0, fixed memory leaks issues in Paragraph and Paragraph_eKeyboard\n2016-08-18 Fixed ant build scripts issues with paths for Ubuntu platform\n2016-08-18 Added fetching all libraries in 1 reuqest, addons xml loaded in 1 request\n2016-08-11 Added exchange URL to scheme-less URL in addon descriptor factory\n2016-08-09 Added new addon IFrame\n2016-08-04 Added Target type property in External Link Button module\n2016-08-03 Fixed displaying viewBox in SVG module\n2016-08-03 Fixed checking answers in Memo Game module\n2016-08-02 Added compiled Commons library in version 4.0.0 to icplayer libs\n2016-08-02 Removing loading-screen from commons\n2016-08-01 Added new property to keep wrong marks in Memo Gama module\n2016-08-01 Fixed displaying coordinates in editor in Line Selection module\n2016-07-27 Fixed problem with removing listeners in Source List\n2016-07-27 Fixed problem with sending events in Page Score Counter module\n2016-07-27 Fixed displaying watermark in Image Viewer module\n2016-07-22 Fixed memory leaks in TextAudio and Audio module\n2016-07-21 Fixed issue with static footer when lesson is in iframe\n2016-07-19 Fixed issue with https in Vimeo module\n2016-07-13 Added removeWrongColors command in Connection module\n2016-07-08 Added dragging line in Connection module\n2016-07-07 Added show/hide commands in Memo Game module\n2016-07-06 Fixed issue with displaying score in Hierarchical Lesson Report\n2016-07-06 Fixed issues with static header and footer\n2016-07-04 Added positioning to Popup button\n2016-06-29 Removed sending event from drawRange commend from Line Number module\n2016-06-20 Added property Single Connection to PointsLines module\n2016-06-16 Fixed Memo Game crash in KeepAspect Image Mode\n2016-06-15 Added keyboard navigation to TrueFalse module\n2016-06-13 Added scrolling window to active module in keyboard navigation\n2016-06-10 Added ValueChange Event to ZoomImage module\n2016-06-07 Added fixes to Fraction Binder modules\n2016-06-07 Added commend disable do Connection module\n2016-06-07 Added new version of Figure Drawing module\n2016-06-06 Improved usability of CrossWord addon\n2016-06-02 Fixed issue with LearnPen_Report fetching data from drawing addons\n2016-06-02 Added Remove dragged element property to Connection module\n2016-06-01 Added allOK event and command in Math module\n2016-06-01 Added disable/enable commands in Image Identification module\n2016-06-01 Added disable/enable commands in Text Identification module\n2016-06-01 Added parsing rendered definition gaps to gaps syntax\n2016-06-01 Fixed tests in Video module\n2016-06-01 Fixed problem with setting poster on Firefox in Video module\n2016-05-30 Fixed sending allOK event in Crossword module\n2016-05-25 Added parsing for views of gaps in editor\n2016-05-23 Fixed adding empty class to wrong element in Text Identification module\n2016-05-23 Added playing event in Audio and Video modules\n2016-05-18 Added reseting poster before adding new one in Video module\n2016-05-18 Added showPopup and closePopup commands\n2016-05-13 Added new addon Hierarchical Table of Contents\n2016-05-13 Added User action events property in Text module\n2016-05-10 Added class on hover in Image Identification module\n2016-05-10 Fixed issue with indexing pages in DIsable Score Pages in HLR module\n2016-05-09 Added show/hide commands in Text Identification module\n2016-05-06 Fixed rendering LaTeX in draggable gaps in Text module\n2016-05-05 Optimized state in IWB Toolbar\n2016-05-04 Fixed setting popup position\n2016-05-04 Added blocking wrong answers in Image Identification module\n2016-05-04 Added new event to CrossWord adddon - CorrectWord\n2016-04-26 Fixed issue with hide answers in Multiplegap module\n2016-04-26 Fixed issue with sending event in Submit module\n2016-04-25 Added blocking wrong answers in PlotsLines module\n2016-04-25 Fixed issue with non displaying coordinations in PointsLines module\n2016-04-25 Added blocking wrong answers in MultipleGap module\n2016-04-22 Added blocking wrong answers for editable gaps in Text module\n2016-04-22 Fixed tests in Crossword module\n2016-04-21 Added Color correct property in Coloring module\n2016-04-19 Added blocking wrong answers in Crossword module\n2016-04-19 Fixed memory leaks in IWB_Toolbar module and added destroy method to zoom.js\n2016-04-19 Added property weight to page\n2016-04-18 Added blocking wrong answers in Image Gap module\n2016-04-18 Added blocking wrong answers in Connection module\n2016-04-14 Added blocking wrong answers in Text Identification module\n2016-04-14 Added blocking wrong answers in Text module\n2016-04-13 Fixed rendering latex in Text module\n2016-04-11 Added sending continuous events and stick steps in Slider module\n2016-04-08 Fixed dragging element in Ordering module\n2016-04-08 Added french layout to Paragraph\n2016-04-08 Added list and combo views in Table of Contents module\n2016-04-07 Added exporting report to file in Print Report module\n2016-04-07 Added Reset, CheckAnswers and ShowAnswers to Keyboard Navigation\n2016-04-07 Added method getModulesAsJS to player's API\n2016-04-06 Fixed tests in Table module\n2016-04-06 Fixed issue with inserting Image_Viewer module\n2016-04-06 Fixed issue with changing gap width in editor in Table module\n2016-04-05 Fixed issue with showing module when lesson is in iframe in Glossary module\n2016-04-04 Fixed issue with appearing native keyboard in eKeyboard module on Android\n2016-03-30 Fixed issue with droppable gaps in Text module\n2016-03-24 Added new module Variable Storage\n2016-03-21 Fixed scrolling and text wrapping on iOS in Paragraph module\n2016-03-18 Added displaying current date in Print Report module\n2016-03-18 Fixed issue with class after changing page in Table module\n2016-03-18 Fixed issue with variables in Math module\n2016-03-18 Added isAllOK command to Writing Calculation module\n2016-03-17 Added labels for showing documentation in editor\n2016-03-16 Added show and hide methods in Magic Box module\n2016-03-16 Added mode on and off to keyboard navigation\n2016-03-15 Fixed displaying background in Memo Game module\n2016-03-15 Fixed reseting axis values position in Plot module\n2016-03-14 Fixed issue with reset in Audio module\n2016-03-14 Added keyboard navigation\n2016-03-10 Secured adding handlers for creating presenters\n2016-03-09 Fixed issue with inline styles\n2016-03-07 Added loading all dictionaries.\n2016-03-04 Fixed zoom in IWB Toolbar module\n2016-03-04 Added setting last page as separated page in Navigation Bar module\n2016-03-03 Fixed memory leaks in Audio module\n2016-03-03 Fixed memory leaks in TextAudio module\n2016-03-03 Fixed issue with id selector in Text module\n2016-03-01 Fixed memory leaks in Text with draggable gaps, Source List and Show Answers\n2016-03-01 Added ignoring inline styles\n2016-03-01 Added positioning of values on x and y axis in Plot module\n2016-02-24 Fixed displaying ranges after reset in Animated Page Progress module\n2016-02-22 Added possibility to define smaller steps in Line Number module\n2016-02-17 Added setting first page as cover in Navigation Bar module\n2016-02-15 Added reading values only from canvas in LearnPen Report module\n2016-02-10 Changed page name in dictionary\n2016-02-10 Fixed displaying alert in Advanced Connector module\n2016-02-10 Added isAllOK method and event in Text Identification module\n2016-02-10 Fixed Check mode and Show Answers mode in Text and Writing Calculations modules\n2016-02-04 Fixed getting error count in Hangman module\n2016-02-03 Fixed setting state in Basic Math Gaps module\n2016-02-03 Fixed issue with printing graphical backgrounds in Print Report module\n2016-02-02 Added adding class during video playback in Video module\n2016-02-01 Fixed issue with setting state in Multiple Audio Binder module\n2016-01-27 Fixed issue with adding video source to addon model\n2016-01-27 Fixed issue with removing module in group\n2016-01-25 Added global state in Show Answers module\n2016-01-20 Fixed adding class when page score is 100% in Navigation Bar module\n2016-01-19 Fixed issue with Keep Original Order mode and dropdowngaps in Text module\n2016-01-19 Fixed issue with Source List and Text gaps in Text module\n2016-01-18 Fixed issue with double ShowAnswers execution in Multiplegap module\n2016-01-18 Added new module Print Report\n2016-01-18 Fixed test in LearnPen Report module\n2016-01-15 Changed default values of correct range in LearnPen Report module\n2016-01-15 Fixed changing module ID\n2016-01-14 Fixed issue with show answers and check mode in Text module\n2016-01-13 Fixed issue with dragging when check mode is on in Ordering module\n2016-01-12 Fixed issue with dragged elements and them scores in MultipleGap module\n2016-01-12 Added Blocked Lines property in Point And Lines module\n2016-01-11 Added custom event on uncheck in LimitedCheck module\n2016-01-11 Added pause command to MultiAudio\n2016-01-08 Added property Empty Answer to Math module\n2016-01-08 Added graduated score to Ordering module\n2016-01-08 Added select and deselect commands in Line Selection module\n2016-01-07 Fixed issue with Video on Chrome\n2016-01-07 Added isAllOK command to Fractions module\n2016-01-07 Added isAllOK command to Graph module\n2016-01-05 Fixed problem with MathJax in Table module\n2016-01-05 Added horizontal layout property to Choice module\n2015-12-23 Fixed problem with reseting visibility in Text Selection module\n2015-12-21 Added image modes in Memo Game module\n2015-12-18 Fixed problem with stopping audio on mLibro in Audio module\n2015-12-17 Fixed error messages in Standard Shapes module\n2015-12-16 Fixed tests in Shape Tracing\n2015-12-16 Added displaying coordinates in editor in BoardGame, PointsLine, LineSelection, FigureDrawing and ConnectingDots modules\n2015-12-15 Fixed issue with slow drawing in Shape Tracing\n2015-12-15 Fixed issue with rulers in editor\n2015-12-15 Fixed problem withs Show Answers mode in TrueFalse module\n2015-12-11 Added show and hide commands in Connection and TrueFalse modules\n2015-12-10 Added optional parameter to isOrderCorrect function in Shape Tracing module\n2015-12-10 Fixed setting item after reset and changing page in MultiAudio module\n2015-12-09 Fixed issue with detecting boundaries is Shape Tracing\n2015-12-09 Added new property Value type in Text module\n2015-12-08 Added Time measurement feature to Player\n2015-12-08 Added rulers handling\n2015-12-08 Fixed issue with draggable gaps with LaTeX in Text module\n2015-12-04 Added Is not activity and Enable more digits in gap properties in Writing Calculations module\n2015-12-03 Fixed issue with Limited Check and Check in Basic Math Gaps module\n2015-12-02 Added possibility of displaying page from commons\n2015-12-01 Added math gaps in Table module\n2015-11-30 Added ShowAnswers to Plot module\n2015-11-27 Fixed issue with editor height in Paragraph module\n2015-11-25 Added displaying coordinates in editor in Coloring and Shape Tracing modules\n2015-11-24 Fixed issue with show answers mode in Choice module\n2015-11-24 Fixed issue with displaying columns in Connection module\n2015-11-19 Fixed issue with adding class in Image Identification module\n2015-11-19 Fixed issue with class in draggable gap in Table module\n2015-11-13 Added isAllOK event and command in Image Gap module\n2015-11-10 Fixed issue with desktop browsers having mobile events in Image Identification, Shape Tracing, Drawing modules\n2015-11-10 Fixed issue with incorrect values and visibility in LearnPen(Data/Report) module\n2015-11-06 Fixed issue with allAttempted class in Assesment Navigation Bar module\n2015-11-05 Fixed issue with zooming in Programmed Drawing module\n2015-11-03 Added IsNotActivity property to MemoGame module\n2015-11-03 Added changes to Clock module\n2015-11-02 Added stop command to YouTube module\n2015-10-30 Upgraded Swiffy library to version 7.4\n2015-10-30 Added commend getColor(x, y) and property \"Disable filling on click\" to Coloring module\n2015-10-30 Added sending event on click in Open Popup Button and Close Popup Button\n2015-10-30 Added reset command in True False module\n2015-10-30 Added new module Programmed Drawing\n2015-10-30 Fixed displaying correct and wrong icons in Coloring module\n2015-10-28 Fixed issue after drop gap to filledDraggableGap in Text module\n2015-10-28 Added calling functionality by command in Lesson Reset module\n2015-10-28 Fixed issue with checking attempted modules in Sumbit and Assesment Navigation Bar modules\n2015-10-28 Added new command markGapAsEmpty to dropdowngaps in Text module\n2015-10-26 Fixed displaying data on Firefox in Count and Graph module\n2015-10-22 Fixed addon properties types (from file to audio and image). Introduced new property type - video\n2015-10-22 Fixed styling module in Show Answers mode in Count and Graph module\n2015-10-21 Fixed book view configuration\n2015-10-19 Added new property Clear placeholder on focus to Text module\n2015-10-15 Fixed issue with state in Assessments Navigation Bar module\n2015-10-13 Added possibility move to common page in GoToPage Module\n2015-10-12 Added disabled events configuration.\n2015-10-09 Fixed displaying data in LearnPen Data module\n2015-10-09 Fixed issue with active tools after changing lesson page in IWB Toolbar module\n2015-10-09 Fixed sending notAllAttempted event in Submit module\n2015-10-09 Added commands markOptionAs... and new classes on their execute to Choice module\n2015-10-09 Added property Is not an activity in Count and Graph module\n2015-10-08 Added commands show/hide in Submit module\n2015-10-07 Fixed setting visibility and added new version of Swiffy library in Swiffy Animation module\n2015-10-06 Fixed problem with displaying data in Graph module\n2015-10-05 Fixed isAttempted action in Image Gap module\n2015-10-05 Added isAllOK command to Table module\n2015-10-05 Added support for calculating time that user spent on each page to PlayerUtils\n2015-10-02 Fixed problem with displaying percentage score in LearnPen Report module\n2015-09-30 Added increaseMistakeCounter command\n2015-09-28 Added classes on show answers and show errors mode in Line Number module\n2015-09-28 Added property Page Attempted in Assesment Navigation Bar module\n2015-09-28 Fixed saving visibility in state after reset in Text module\n2015-09-23 Fixed reading-out data from sensors in LearnPen Report module\n2015-09-23 Fixed disabling gap after checking answers in Image Gap module\n2015-09-22 Added handling reset in Page Rating module\n2015-09-16 Fixed issue with checking answer in Is Equation mode in Basic Math Gaps module\n2015-09-16 Fixed check mode and show answers mode connected with Math module in Table module\n2015-09-15 Fixed problem with coloring empty dropdown gaps in Text module\n2015-09-11 Fixed problem with disabled gaps in show answers mode in Text module\n2015-09-11 Fixed problem with displaying page numbers on mLibro in Page Icon Toolbar\n2015-09-11 Fixed problem with setting gap width in Table module\n2015-09-09 Added changes to Sudoku, Fractions modules and added new module Fractions Binder\n2015-09-09 Fixed issue with wrong range image after reset in Animated Lesson Progress\n2015-09-08 Fixed issue with class on hover after reset in Image Identification module\n2015-09-08 Added incrementing check counter in Show Answers module\n2015-09-01 Fixed issue with earlier end of movie in Video module\n2015-08-27 Fixed issue with draggable element in Text module\n2015-08-25 Fixed issue with receiving state without droppedElements in Text module\n2015-08-25 Added Show Answers mode in Hangman module\n2015-08-25 Fixed getting maxScore by page name on page loaded event.\n2015-08-24 Fixed problem with displaying initial image after reset in Animated Page Progress module\n2015-08-21 Fixed problem with dragging in Slider module\n2015-08-21 Fixed problem with checking answers in Basic Math Gaps and Table modules\n2015-08-21 Added updating ranges on check in Animated Page Progress module\n2015-08-21 Fixed sending score in event in Multiple Gap module\n2015-08-20 Fixed adding classes to previous and next buttons in Navigation Bar module\n2015-08-19 Added sending ValueChanged event in Limited Reset module\n2015-08-19 Fixed issue with showing answers in check mode in Hangman module.\n2015-08-18 Added navigating to page by number in Go To Page Button module\n2015-08-18 Fixed issue with checking in not activity mode in Line Number module\n2015-08-18 Updated Swiffy library to version 7.3.0\n2015-08-13 Fixed issue with wrong position of draggable item in Source List module\n2015-08-13 Fixed issue with error in setting state on mLibro in IWB Toolbar module\n2015-08-13 Fixed issue with playing audio and video after clicking in dropdown button in Audio, TextAudio and Video modules\n2015-08-12 Added handling draggable object with HTML structure and classes from Source List in Basic Math Gaps, Table and Text\n2015-08-12 Added getting HTML structure and css classes from Source List in draggable object\n2015-08-11 Fixed issue with adding images in Animated Page Progress module\n2015-08-07 Added adding equals sign in Writing Calculation module\n2015-08-07 Fixed issue with checking answers with white spaces in Basic Math Gaps module\n2015-08-07 Fixed issue with checking answer in editor Preview\n2015-08-04 Fixed issue with reseting and checking editable gaps in Basic Math Gaps and Table modules\n2015-08-04 Fixed issue with closing bottom panel in IWB Toolbar module\n2015-07-30 Fixed issue with errors when module is empty in Magic Boxes module\n2015-07-29 Fixed issue with checking score in show answers mode in Animated Lesson Progress and Animated Page Progress modules\n2015-07-29 Fixed issue with adding class on reset in Text module\n2015-07-28 Added drag&drop feature in Table module\n2015-07-28 Corrected mistakes in dictionary\n2015-07-28 Added CSS classes to draggable gaps in Basic Math Gaps\n2015-07-27 Fixed issue with checking score and show answers in Navigation Bar module\n2015-07-27 Added group scoring\n2015-07-27 Fixed issue with check mode in Graph module\n2015-07-27 Added show answers mode in Graph module\n2015-07-24 Added sending score in event data in Image Viewer module\n2015-07-23 Added compiled Commons library in version 3.0.1 to icplayer libs\n2015-07-23 Fixed issue that filled gap was not sending ItemReturned event on click with DraggableDroppableObject  in Commons (now in version 3.0.1)\n2015-07-23 Fixed issue with error after reset and show answers in Limited Check module\n2015-07-22 Added show/hide commands in YouTube module\n2015-07-21 Fixed issue with alert on Safari Windows in Swiffy Animation module\n2015-07-21 Fixed issue with wrong checking in Shape Tracing module\n2015-07-21 Fixed parsing and styling in Text module\n2015-07-21 Fixed issue with numerating gaps in Writing Calculation module\n2015-07-21 Fixed unit tests in Text Audio & Text Selection modules\n2015-07-20 Changed defining and parsing gaps in Show Answers in Math module\n2015-07-16 Added new module Assessments Navigation Bar\n2015-07-15 Added new module Board Game\n2015-07-15 Added show answers mode to Math module connected with Text, Table and Image Gap modules\n2015-07-10 Added selection by plotting in Magic Boxes module\n2015-07-09 Fixed issue with wrong input in order property in Ordering module\n2015-07-07 Added checking by words in Magic Boxes module\n2015-07-06 Added drag&drop feature and fixed issue with events in isEquation mode in Basic Math Gaps module\n2015-07-06 Added compiled Commons library in version 3.0.0 to icplayer libs\n2015-07-06 Added StatefullAddonObject: State machine for check, reset, show/hide answers and fixed minor issues with DraggableDroppableObject in Commons (now in version 3.0.0)\n2015-07-03 Added show and hide commands to Zoom Image module\n2015-07-03 Added static header and static footer\n2015-07-02 Added Assets Service\n2015-07-02 Added new module Line Selection\n2015-07-01 Added Horizontal Bar and reading out the data from the individual Squeeze sensors in LearnPen Report module\n2015-07-01 Fixed issue with custom classes in Editor\n2015-06-30 Fixed issue with dragging in multiple gap module\n2015-06-26 Fixed issue with few Paragraphs with placeholders on the same page\n2015-06-26 Fixed issue with reset in IWB Toolbar\n2015-06-26 Fixed issue with displaying full screen image in Zoom Image module\n2015-06-25 Added handling offline connection in YouTube module\n2015-06-25 Fixed dragging on Windows 8 in Graph module\n2015-06-24 Fixed issue with transparency on Check and Show Answers in Image Gap module\n2015-06-24 Fixed issue with dragging in Sourcelist and Imagesource modules\n2015-06-23 Fixed issue with controls on iPad in video module\n2015-06-23 Added changes to Clock module\n2015-06-23 Fixed issue with erasing in IWB Toolbar module\n2015-06-23 Fixed issue with displaying addon in player and preview in Page Score Counter module\n2015-06-18 Fixed issue with displaying uppercase letters in crossword module\n2015-06-17 Added new module Selectable Addons Binder\n2015-06-17 Fixed issue with MathJax in Memo Game module\n2015-06-17 Added changes in Fractions module\n2015-06-16 Added changes in Figure Drawing module\n2015-06-16 Fixed issue with dragging in SourceList and ImageSource modules\n2015-06-15 Added compiled Commons library in version 2.0.0 to icplayer libs\n2015-06-15 Added DraggableDroppableObject: New object which is draggable and droppable - in Commons (now in version 2.0.0)\n2015-06-12 Added new module Lesson Reset\n2015-06-12 Fixed issue with dragging empty gap in Text module\n2015-06-11 Added fillArea and clearArea command to Coloring module\n2015-06-10 Fixed issue with returning item to the source in copy mode\n2015-06-09 Fixed issue with dragging in Show Answers mode in Multiple Gap module\n2015-06-09 Added new properties 'Number of repetitions' and 'ID repeated element'\n2015-06-08 Fixed issue with scoring in Line Number module\n2015-06-08 Added new property Don't show ranges to Line Number module\n2015-06-08 Fixed issue with parsing HTML tags in Text Selection module\n2015-06-03 Fixed issue with displaying eKeyboard in disabled gaps in eKeyboard module\n2015-06-03 Fixed issue with missing signs in Text Selection module\n2015-06-03 Added assetsService and handling SVG files in Image module\n2015-06-02 Fixed issue with duplicating gaps when elements from Multiple gap are dragged in Editor\n2015-06-02 Added new command isOrderCorrect to Shape Tracing module\n2015-06-01 Added enable, disable commands and isDisabled property in Image Gap and Image Source modules\n2015-06-01 Fixed issue with check and reset in Basic Math Gaps module\n2015-05-29 Fixed issue with blocking scoring after show answers and reset in Connection module\n2015-05-28 Added new way to close full screen image in Zoom Image module\n2015-05-28 Added commutativy property to Writing Calculations module\n2015-05-28 Added commands show and hide to Shape module\n2015-05-27 Fixed issue with input align in Writing Calculations module\n2015-05-27 Fixed issue with draggable element in editor in Ordering module\n2015-05-27 Fixed adding custom classes in editor in IWB Toolbar module\n2015-05-27 Fixed issue with text parsing and state in Text Selection module\n2015-05-25 Fixed counting errors in Count and Graph module\n2015-05-25 Fixed issue with ShowAnswers in SourceList module\n2015-05-25 Fixed issue with changing frames in Image Viewer module\n2015-05-22 Fixed issue with reset in ImageSource and SourceList modules\n2015-05-20 Added new property gap type and drag feature in \"Basic Math Gaps\" module\n2015-05-20 Fixed issue with nextStep command in Slider module\n2015-05-20 Added isDelayed property to eventBus addEventListener API\n2015-05-20 Added getModulesScore() command to Limited Check module\n2015-05-20 Fixed issue with dragging element to the same MultipleGap\n2015-05-20 Fixed issue with Reset in Coloring module\n2015-05-20 Fixed issue with dragging to filled gaps Text and ImageGap modules\n2015-05-19 Fixed issue with fire PageLoaded events from previous pages\n2015-05-19 Added handling HideAnswers event in Show Answers module\n2015-05-19 Fixed handling HideAnswers events in Choice and True/False modules\n2015-05-19 Added new modules - Limited Check and Limited Reset\n2015-05-19 Fixed issue with slider on Desktop in Slider module\n2015-05-18 Fixed reporting individual page score in JavaScript API\n2015-05-18 Fixed issues with isAllOk in Shape Tracing module\n2015-05-13 Fixed issue with capturing events from all pages\n2015-05-14 Added drag feature to elements dropped to modules: Text, ImageGap & MultipleGap\n2015-05-14 Added handling draggable gaps in Table module\n2015-05-13 Fixed issue with height of PagePopupPanel glass\n2015-05-13 Fixed issue with adding custom class to panel in IWB Toolbar module\n2015-05-12 Fixed issue with loading on iOS 8 in Count and Graph module\n2015-05-11 Fixed visual issues after reset in Line Number module\n2015-05-07 Fixed issue with ScoreType:first\n2015-05-07 Added new events to Crossword module\n2015-05-07 Added new property \"Keyboard letters order\" in Hangman module\n2015-05-07 Fixed issue with reset button on IE and issue with missing labels in \"memo game\" module\n2015-05-06 Fixed issue with scores and their view in Hierarchical Lesson Report\n2015-05-06 Fixed issue with compatibility Drawing and IWB in IWBToolbar module\n2015-05-04 Added Show Answers mode in Line Number module\n2015-05-04 Changed names of classes in Check mode in Connection module\n2015-05-04 Added Show Answers mode in Image Viewer module\n2015-05-04 Fixed issue with Randomizing in Choice module\n2015-04-30 Added drag&drop feature to Connection module\n2015-04-30 Added Reset command to Puzzle module\n2015-04-29 Added saving color and thickness after closing the tool in IWB Toolbar module\n2015-04-29 Added 'correct' and 'wrong' classes in Check mode in Connection module\n2015-04-29 Added LearnPen Data module\n2015-04-27 Added reset command to Ordering module\n2015-04-23 Fixed issue with button handlers in IWB Toolbar module\n2015-04-23 Added property \"Placeholder text\" in Paragraph module\n2015-04-23 Fixed issue with Show Answers in Not Activity mode in Text Selection module\n2015-04-21 Fixed issue with math Gaps in Text module\n2015-04-21 Fixed issue with ShowAnswers in Text module\n2015-04-21 Fixed issue with parsing of mathgaps having editable syntax in Text module\n2015-04-20 Fixed issue with moving slider on zoomed page in Slider module\n2015-04-17 Fixed issue with gap causing crashing of Editor in Text module\n2015-04-17 Added Italian language to eKeyboard module\n2015-04-17 Fixed issue with rounding seconds in TextAudio module\n2015-04-17 Fixed issue with showing boundaries in editor and scoring in Chrome in Shape Tracing module\n2015-04-16 Fixed issue with isOptionSelected method for Random Mode in Choice module\n2015-04-15 Fixed issue with parsing text in Text Selection module\n2015-04-15 Deleted changes in css classes in Line Number module\n2015-04-15 Added drag&drop feature to Ordering module\n2015-04-15 Added property Hide default controls to Video module\n2015-04-15 Added Is Not Activity property to Text Selection module\n2015-04-14 Fixed issue with positioning axis elements and fixed issue with axis x values property in Line Number module\n2015-04-14 Fixed issue with PopupPanelGlass in PopupPage\n2015-04-13 Added sending event after pair matching in Memo Game module\n2015-04-13 Fixed issue with rounding times in Text Audio module\n2015-04-09 Fixed issue with random noises in LearnPen_Report module\n2015-04-09 Fixed issue with state restoring in Shape Tracing module\n2015-04-09 Fixed issue with label positions in full screen mode in Video module\n2015-04-08 Added isAllOK method to Choice module\n2015-04-08 Added possibility to add tips in Hangman module\n2015-04-08 Fixed issue with css classes in Line Number module\n2015-04-07 Fixed issue with hidden label in Video module\n2015-04-04 Added new commands: descentsFromShape, numberOfLines, pointsMissed and getDirections to Shape Tracing module\n2015-04-03 Added new Addon LearnPen Report\n2015-04-02 Fixed issue with zoom on IE 10 in IWB Toolbar module\n2015-04-02 Fixed issue with input restriction in eKeyboard module\n2015-04-01 Fixed issue with eKeyboard cooperating with math gaps in eKeyboard module\n2015-04-01 Fixed issue with allLinesDrawn() command and added styles for different modes in Figure Drawing module\n2015-04-01 Fixed issue with draggable filledGap in Text module\n2015-03-31 Fixed playing words in TextAudio while zooming using IWB Toolbard module\n2015-03-31 Added getView() command to Shape module\n2015-03-31 Fixed issue with crashing browser on iOS in eKeyboard module\n2015-03-26 Fixed issue with setColor and nonremovable lines in Figure Drawing module\n2015-03-26 Fixed issue with playing event on Android 5.0 devices in Multi Audio module\n2015-03-25 Added Show slides property and positioning in Text Audio module\n2015-03-25 Fixed drawing logic, double events and added setEraserThickness, setMarkerThickness commands in IWB Toolbar module\n2015-03-23 Updated Google Swiffy library to ver. 7.2\n2015-03-23 Added show() and hide() commands in Source List module\n2015-03-23 Fixed issue with lines interpretation in Figure Drawing module properties\n2015-03-20 Fixed issue with Chapters in Hierarchical Lesson Report module\n2015-03-20 Added new controls in TextAudio module\n2015-03-19 Added Figure Drawing module\n2015-03-18 Added new area type and fixed issue with show answers in Coloring module\n2015-03-17 Fixed issue with preview of editor in Hierarchical Lesson Report\n2015-03-16 Added show() and hide() commands to Image Source module.\n2015-03-16 Fixed issue with custom class in Check Answers module\n2015-03-13 Fixed issue with mode Keep Aspect on IE9, 10 in Image module\n2015-03-13 Fixed issue with sending events in Shape Tracing module\n2015-03-12 Fixed issue with clicking on Android 4.4.2 in Image Identification module\n2015-03-12 Fixed issue with playing audio on Firefox 19 in Slideshow module\n2015-03-12 Fixed Show Answers mode in Table module\n2015-03-11 Added show() and hide() commands to Multiple Gap module\n2015-03-11 Fixed problem with reacting to ShowAnswers event in Multiple Gap module connected to Image Source modules\n2015-03-09 Added reset command in Image Gap module\n2015-03-09 Fixed issue with setting opacity, drawing and double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3, 4.4.2 in Shape Tracing module\n2015-03-09 Fixed issue with restoring state in IWB Toolbar module\n2015-03-06 Fixed issue with restoring state in older content that uses Fractions module\n2015-03-06 Fixed issue with state in Double State Button module\n2015-03-06 Fixed calculating results for just part of lesson in Hierarchical Lesson Report module\n2015-03-05 Fixed issue with commands play/stop/next/previous in Slideshow module\n2015-03-05 Fixed issue with using play command on iOS 7 and iOS 8 in Video module\n2015-03-04 Fixed issue with double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3, 4.4.2 in Connection module\n2015-03-02 Fixed issues with parsing HTML in Text Audio module\n2015-02-27 Fixed issue with serving of mixed content by HTTPS and HTTP in YouTube module\n2015-02-27 Fixed issue with keeping state disable/enable in filledGap in Text module\n2015-02-27 Fixed issue with double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3 and 4.4.2 in Drawing module\n2015-02-26 Added changes to Fraction module\n2015-02-26 Added new commands moveTo, next, previous, play, pause, stop in Slideshow module\n2015-02-26 Fixed issue with opacity in Drawing module\n2015-02-25 Fixed issue with layout when LearnPen Drawing module is on page\n2015-02-25 Added new command setEraserOff to Shape Tracing and Drawing modules\n2015-02-25 Fixed issue with Step property in Line Number module.\n2015-02-25 Added Show Answers to Sudoku module\n2015-02-23 Fixed issue with disableGap command in Text module\n2015-02-23 Added new command setOpacity to Shape Tracing and Drawing modules\n2015-02-23 Added French special characters to eKeyboard module\n2015-02-23 Fixed CSS styles in Hierarchical Lesson Report module\n2015-02-23 Added new property \"Y axis values\" in Graph module\n2015-02-23 Fixed displaying double image on Android in Viewer 3D module\n2015-02-20 Changed loading gif size in Text Audio module\n2015-02-20 Fixed issue with Show Answers in Dropdown gap in Text module\n2015-02-19 Fixed problem with Show Answers in Image Gap module\n2015-02-19 Fixed problem with Show Answers in Text module\n2015-02-19 Fixed rendering LaTeX in Video module\n2015-02-18 Fixed issue with working module on header in Animated Progress module\n2015-02-18 Added property Is Click Disabled in Text Audio module\n2015-02-18 Fixed rendering LaTeX in Double State Button module\n2015-02-18 Fixed CSS classes in Connecting Dots module\n2015-02-18 Added new property Keep state and position to IWB Toolbar\n2015-02-17 Fixed translation of properties in Count and Graph and Basic Math Gaps modules\n2015-02-17 Fixed setting visibility on IE9 in Double State Button module\n2015-02-17 Fixed issue with vocabulary files in Text Audio module\n2015-02-17 Fixed adding CSS classes in Shape Tracing module\n2015-02-17 Added Show Answers to Multiple Gap module\n2015-02-13 Fixed problem with changed visibility of drawing in IE9 and IE10\n2015-02-12 Fixed opacity property name in Drawing module\n2015-02-11 Fixed issue with playing vocabulary on second click in Text Audio module on iOS 8.1.3\n2015-02-11 Fixed issue with playing wrong words on first try in Text Audio module\n2015-02-10 Fixed parsing HTML in Text Audio module\n2015-02-10 Added \"Start from\" property in Page Counter module\n2015-02-09 Revert parsing HTML in Text Audio module\n2015-02-09 Added Is Not Activity property in Hangman module\n2015-02-09 Fixed counting score in Count and Graph module\n2015-02-09 Fixed reacting to Show Answers events in Double State Button and Single State Button modules\n2015-02-09 Added getView(), show() and hide() commands to Error Counter module\n2015-02-06 Added parsing HTML in Text Audio module\n2015-02-06 Fixed issue with Show Answer in Shape Tracing module\n2015-02-06 Added new css class to Basic Math Gaps module\n2015-02-06 Added Show Answers to Count and Graph module\n2015-02-06 Added new property Signs to to Basic Math Gaps module\n2015-02-05 Added translations for almost all remaining addons properties names\n2015-02-05 Fixed problem with scaling enlarged image in Zoom Image module\n2015-02-04 Changed icon and translated property names in Sudoku module\n2015-02-02 Fixed PageProgress score alignment when command Show is executed after ShowErrosEvent\n2015-02-02 Added getItem() command to Source List module\n2015-01-29 Fixed swiping the slides in Slideshow module\n2015-01-29 Added Menu Panel module\n2015-01-29 Added new property Gap width to Basic Math Gaps module\n2015-01-28 Added Show Answers to Memo Game module\n2015-01-26 Added Show Answers to Text Identification module\n2015-01-26 TextAudio supports play vocabulary from one merged audio file\n2015-01-23 Added Show Answers to Connecting Dots module\n2015-01-23 Fixed issue with Hide and Stand Area in IWB Toolbar\n2015-01-23 Fixed issue with backward compatibility in IWB Toolbar module\n2015-01-22 Added Show Answers to Magic Boxes module\n2015-01-22 Added Show Answers to Shape Tracing module\n2015-01-22 Changed visibility of drawing in IWB Toolbar module\n2015-01-20 Added translations of addons properties names\n2015-01-20 Fixed issue with ignore punctuation and accented letters in Text module\n2015-01-19 Added translations of addons names\n2015-01-16 Added show and hide commands to Ordering module\n2015-01-16 Fixed sending multiple events after reset and coloring fields in Coloring module\n2015-01-16 Moved zoom library code outside IWB Toolbar module\n2015-01-14 Added new property Custom Display to eKeyboard module\n2015-01-13 Updated Google Swiffy library to ver. 7.1\n2015-01-13 Added show and hide commands to SVG module\n2015-01-12 Added ability to choose starting point of presentation in Slideshow module\n2015-01-12 Fixed double click effect on mobile devices in IWB Toolbar module\n2015-01-09 Fixed Stand and Hide Area functions on mobile devices in IWB Toolbar module\n2015-01-08 Fixed notes on mobile devices in IWB Toolbar module\n2015-01-08 Added ShowAnswers to Fractions module\n2015-01-08 Added ShowAnswers to Clock module\n2015-01-07 Adapted tests to current module version in Video module\n2015-01-07 Fixed issue with removing class disable on switching to work mode in TrueFalse module\n2015-01-07 Adapted tests to current module version in Animated Lesson Progress module\n2015-01-02 Adapted tests to current module version in LearnPen Data module\n2015-01-02 Adapted tests to current module version in Custom Scoring module\n2015-01-02 Adapted tests to current module version in Image Viewer module\n2015-01-02 Adapted tests to current module version in Memo Game module\n2015-01-02 Adapted tests to current module version in Page Rating module\n2015-01-02 Adapted tests to current module version in Paragraph eKeyboard module\n2015-01-02 Adapted tests to current module version in Coloring module\n2015-01-02 Adapted tests to current module version in Paragraph module\n2015-01-02 Adapted tests to current module version in Text Selection module\n2015-01-02 Adapted tests to current module version in LearnPen module\n2015-01-02 Adapted tests to current module version in MultiAudio module\n2014-12-31 Fixed issue with visible state in Drawing module\n2014-12-30 Fixed issues with SCORM local resources in navigation bar and External Link Button module when lesson is run with external Player\n2014-12-30 Fixed issue with page preview URL pointing to SCORM local resource in navigation bar\n2014-12-30 Fixed issue with hiding whole contents of Table Of Contents\n2014-12-29 Fixed issue with URI pointing to SCORM local resource in External Link Button module\n2014-12-29 Fixed issue with checking answers in not activity mode in Connection module\n2014-12-29 Fixed issue with saving state in Slider module\n2014-12-29 Fixed issue with saving state in Layered Image module\n2014-12-29 Fixed issue with saving state in Image Viewer Button Controlled module\n2014-12-29 Fixed problem with stopwatch in IWB Toolbar module\n2014-12-29 Added new property Don't show pages to Table of Contents\n2014-12-24 Added information to pay ettention to the correct linking resources\n2014-12-22 Fixed issue with toggling bottom panels in IWB toolbar\n2014-12-19 Fixed problem with jumping to the next gap in eKeyboard module\n2014-12-18 Fixed calling commands on PageLoaded event in Layered Image module\n2014-12-18 Fixed translation of event properties in Image Gap module\n2014-12-18 Fixed problem with playing MultiAudio on iPad\n2014-12-16 Fixed issues with zooming after deactivating Zoom feature and color and thickness panels visibility in IWB Toolbar module\n2014-12-16 Fixed problem with moveToFrame command in ImageViewer addon\n2014-12-11 Fixed formatting text with bolds, italics etc. in Text Selection module\n2014-12-10 Fixed issue with changing audio on iOS and android in Multi Audio module\n2014-12-08 Fixed issue with touch/mouse coordinates, issue with zoom and more in IWB toolbar\n2014-12-03 Fixed problem with setting state in Image Viewer addon\n2014-12-02 Fixed problem with getting score from Image Identification addon\n2014-12-01 Added changes to Swiffy Animation module\n2014-12-01 Fixed adding class navigationbar-page-ok in Navigation Bar module\n2014-11-28 Fixed problem with animation in SVG format\n2014-11-27 Added Show for pen and Show for marker properties in IWB toolbar\n2014-11-27 Fixed problem with rewind to start movie in Android 4.1 in Video module\n2014-11-27 Fixed problem with view of Text identification module in editor\n2014-11-27 Fixed problem with rewind to start movie in Video module\n2014-11-27 Added setPenColor and setDefaultPenThickness commands to IWB toolbar\n2014-11-27 Fixed problem with jumpTo in Multi Audio module\n2014-11-26 Fixed problem with hiding in Video module\n2014-11-26 Fixed problem with images in Multiple gap and Image gap module\n2014-11-24 Added Vocabulary audio files properties to Text Audio\n2014-11-20 Added Fixed position property, changed displaying rulers and fixed double page view in IWB Toolbar module\n2014-11-19 Player saves state of addons in header and footer\n2014-11-18 Fixed problem with editor preview in Hierarchical Lesson Report\n2014-11-17 Fixed problem with the second advent of Popup\n2014-11-14 Fixed issue with skipping words in Text Audio\n2014-11-13 Fixed problem with play action and ended event in Video module\n2014-11-13 Added isAllOK method and allOK event in Hangman module\n2014-11-12 New Player Commands: setNavigationPanelsAutomaticAppearance, showNavigationPanels, hideNavigationPanels\n2014-11-06 Added new property \"Individual fragment playback\" to Text Audio module\n2014-11-05 Fixed problem with isAttempted in Math module connected with dropdown gaps\n2014-11-04 Fixed problem with saving visibility in Paragraph and Paragraph Keyboard modules\n2014-11-04 Fixed problem with getting error Can not load page: null\n2014-11-03 Added events \"playing\" and \"stop\" to Text Audio module\n2014-11-03 Fixed setting width in IWB Toolbar module\n2014-11-03 Added isAttempted method to Math module\n2014-10-30 New Addon - Paragraph eKeyboard\n2014-10-30 Fixed propagation of onclick event in Plot module\n2014-10-29 Fixed highlighting text after clicking stop or reset in Text Audio module\n2014-10-29 Fixed working IWB Toolbar module on iframe\n2014-10-24 Added Event on select rate and method getRate() in Page Rating\n2014-10-24 Added Show Answers to Pie Chart module\n2014-10-24 Added Show Answers to Points and Lines module\n2014-10-24 Added new properties: \"Row classes\", \"Show max score field\", \"Show page score\" and \"Disable score on pages\" to Hierarchical Lesson Report\n2014-10-24 Fixed displaying IWB Toolbar in editor preview\n2014-10-23 Fixed issue with pulling up collumns reduced to 0 on mobile devices in Graph module\n2014-10-23 Fixed problem with autoplaying after click on text fragment in TextAudio module\n2014-10-23 Added playing and end events to MultiAudio\n2014-10-23 Fixed issue with zoom, note and displaying elements in IWB Toolbar module\n2014-10-23 Fixed stopwatch on mLibro windows in IWB toolbar module\n2014-10-21 Fixed problem with autoplaying in MultiAudio module\n2014-10-20 Improved Spanish translations\n2014-10-17 A return full functionality mouseMoveCallback in Graph module\n2014-10-17 Fixed issue with pulling up collumn reduced to 0 in Graph module\n2014-10-16 Fixed issue with double rendered LaTeX in Choice\n2014-10-16 Added handling property Is Visible in IWB Toolbar module\n2014-10-15 Added collaboration between crossword and eKeyboard modules\n2014-10-13 Added stopwatch, clock and changed view of panel in IWB Toolbar module\n2014-10-13 Added new property: Real-time navigationbar-page-ok to Navigation Bar\n2014-10-13 Fixed issue with getting JS representation of Check Button module\n2014-10-13 Fixed showing Layered Image module on IOS 8.0.2\n2014-10-09 Fixed issue with symbols in dropdown gaps for Table module\n2014-10-09 Fixed issue with double lines in Connection module\n2014-10-09 Added new version of Swiffy Animation module and swiffy library.\n2014-10-09 Added Show Answers to Crossword module\n2014-10-08 Fixed issue with double lines in Connection module\n2014-10-06 Removed console.log from Text module\n2014-10-06 Added Show Answers to Table module\n2014-10-06 Removed unused libraries\n2014-10-06 Added Show Answers to Writing Calculations module\n2014-10-06 Added Show Answers to Basic Math Gaps module\n2014-10-03 Fixed problem with Connection in editor preview\n2014-10-03 Fixed problem with apostrophes in gaps are being worked with eKeyboard\n2014-10-01 Fixed problem with gaps being enabled regardless of initial configuration after Reset in Text module\n2014-10-01 Fixed issiue with lines on Android 4.1.2 in Connection module\n2014-10-01 Fixed issues with loading Adobe Edge Animation JavaScript Runtime in Edge Animation module\n2014-10-01 Fixed problems with configuration in Paragraph module\n2014-09-30 Fixed blocked gaps issue in response to ShowAnswers event in Text module\n2014-09-29 Added blocking on Check in Coloring module\n2014-09-29 Fixed activity in Show Answers mode in Coloring, Connection and Image Identification modules.\n2014-09-29 Fixed problem with libraries and date in IWB Toolbar module.\n2014-09-29 Fixed problem with Play button in Slideshow module after changing slides\n2014-09-29 Fixed placement of Next and Report buttons in Navigation Bar module\n2014-09-26 Fixed restoring user selection after CheckAnswers event in ShowAnswers mode in Text Selection module\n2014-09-26 Fixed handling Reset event while in ShowAnswers mode in Ordering module\n2014-09-26 Fixed double lines on Android.4.1.2 in Connection module\n2014-09-26 Fixed showing on Android 4.1.2 in Glossary module\n2014-09-25 Fixed ShowAnswers in Text module for all type of gaps\n2014-09-25 Added disable to Choice module when in ShowAnswers mode\n2014-09-24 Added toolbar separator support in Paragraph module ( | - pipe)\n2014-09-24 Removed cut, copy & paste buttons from toolbar in Paragraph module\n2014-09-24 Added new toolbar features in Paragraph module: forecolor and backcolor\n2014-09-24 Fixed hiding toolbar when toolbar buttons are in more than one line in Paragraph module\n2014-09-24 Loading content fixes in Coloring module\n2014-09-21 Added library for Edge Animation module\n2014-09-23 Added close button to Page Rating module\n2014-09-23 Fixed issue with Navigation Bar on iPad with iOS8\n2014-09-22 Fixed issue with Animation on iPads\n2014-09-22 Fixed Connection module: hiding images does not occur anymore\n2014-09-19 Fixed show answers in Text module\n2014-09-19 Added new module: Pie Chart\n2014-09-19 [IWB Toolbar] Unified date in notes, now notes appears always below panel\n2014-09-18 Fixed problem with width and height in Ordering module\n2014-09-17 Changed libraries to minified versions\n2014-09-17 Fixed problem with doubled properties in Editor\n2014-09-17 Fixed problem with loading progress circle in Editor\n2014-09-17 Fixed problem with Player not loading in iframe embeded lessons\n2014-09-16 [CheckAnswers] Fixed problem with backward compatibility checkAnswers modules\n2014-09-16 Fixed problem with setting state in Multiple Gap module\n2014-09-15 Fixed issue with loading resources on IE11 in Slideshow module\n2014-09-15 Added \"Custom toolbar\" property to Paragraph module\n2014-09-15 Fixed Image Viewer issue in mexican lesson\n2014-09-15 Fixed eKeyboard issues on Android devices\n2014-09-12 IWB Toolbar: fixed preview\n2014-09-12 [Ordering] Added new property: Even width for all elements, to avoid problems with images in Safari\n2014-09-12 IWB Toolbar: now you can hide unnecessary buttons\n2014-09-12 Fixed problem with loading progress circle for other views than embed\n2014-09-12 Fixed problem with propagation in IWB Toolbar module\n2014-09-11 Changed time format in note in IWB Toolbar module\n2014-09-11 Fixed problem with command stop on iPad in Text Audio module\n2014-09-11 Fixed problem with double lines on Android 4.1.2 in Connection module\n2014-09-11 Fixed drawing issue on Android 4.1.2 native browser in ShapeTracing module\n2014-09-10 Changed Default Confirmation Alert Box to Custom in IWB Toolbar module\n2014-09-10 Fixed drawing issue on IE 11 mobile browser in ShapeTracing addon\n2014-09-10 Fixed drawing issue on IE 11 mobile browser\n2014-09-10 Fixed drawing issue on Android 4.1.2 native browser\n2014-09-10 Fixed reaction on Check button in Show Answers module and reaction on Show Answers in True False module\n2014-09-10 Added show, hide and isVisible commands to Paragraph module\n2014-09-08 Fixed isAttempted method in Coloring module\n2014-09-08 Fixed performance issue in Drawing addon\n2014-09-08 Added enabling letters selection in Text Selection module\n2014-09-05 Fixed deselecting text after completion of audio\n2014-09-04 Fixed calculating page and lesson scores in PlayerUtils\n2014-09-04 Writing Calculation: fixed error in console.log\n2014-09-04 IWB Toolbar: now you can change tooltip text in css styles\n2014-09-04 Fixed problem with model validation in Connection module\n2014-09-03 Fixed IWB Toolbar position from the left side of the screen\n2014-09-03 Fixed lesson loading image position\n2014-09-03 Removed unexpected behavior when some one types in some characters from standard keyboard and then clicked on any button in eKeyboard module\n2014-09-02 Added random order properties to Connection module\n2014-09-02 Added responding to Show Answers events in Coloring, Connection, Text, Image Gap, Image Identification, Ordering and Text Selection\n2014-09-02 Fixed initial scoring in Puzzle module\n2014-09-02 Fixed initial scoring in Coloring module\n2014-09-01 Added getFooterModule() method in Player API\n2014-09-01 Added sending events in Magic Boxes module\n2014-09-01 IWB Toolbar: fixed problem with module not working on Internet Explorer 11\n2014-09-01 IWB Toolbar: now the position of toolbar in Player is the as in Editor\n2014-09-01 Added adding CSS class to page when page score is 100%\n2014-09-01 Added getHeaderModule() method to icPlayer API\n2014-09-01 Added isAttempted() to Ordering module commands (previously was only as presenter API)\n2014-08-29 Fixed issue with Drawing on IE 11\n2014-08-29 Changed eKeyboard CustomLayout property, added new property Lock Standard Keyboard Input, added Special Characters for 3 languages\n2014-08-29 Added new library Sonic.js\n2014-08-29 Fixed getting score in Puzzle module\n2014-08-28 Added commands for setting scoring values in Custom Scoring module\n2014-08-28 Changed the parent for the masks in IWB Toolbar\n2014-08-28 Fixed reaction on methods isAttempted() in Completion Progress module\n2014-08-28 Fixed saving state when \"Is disabled\" property is selected in Table module\n2014-08-27 Fixed isAttempted command visibility in Ordering module in not activity mode\n2014-08-27 Added isAttempted() command to Ordering module\n2014-08-27 Fixed multiple issues with Page Score Counter module\n2014-08-27 Added \"Calculate in real time\" property to Error Counter module\n2014-08-27 Added new module: Lesson Score Counter\n2014-08-27 Added new module: Page Score Counter\n2014-08-27 Added new module: Lesson Error Count\n2014-08-26 Added \"Initial image\" property to Animated Page Progress module\n2014-08-26 Fixed isAttempted command visibility in Text module in not activity mode\n2014-08-26 Added new module: Completion Progress\n2014-08-26 Added new module: Animated Lesson Progress\n2014-08-26 Added permutations (safari,ie9,gecko1_8,opera)\n2014-08-26 Added isVisited() method to icPlayer API\n2014-08-26 New gap type in Text module - filled gap\n2014-08-26 Added libraries ydp and CreateJS\n2014-08-25 Fixed bug with SlideShow plays when page is closed\n2014-08-22 Fixed blocking options in ShowAnswers mode and clearing styles on HideAnswers event in True/False module\n2014-08-22 Fixed handling HideAnswers event in Choice module\n2014-08-22 Fixed triggering work mode in modules from Check Answers module when ShowAnswers event is fired\n2014-08-22 Added responding to Show Answers events in Check module\n2014-08-22 Added parsing item markups from Source List to Multiple Gap module\n2014-08-21 Added new colors to IWB Toolbar\n2014-08-21 Fixed video module not seeking to start after video eneded\n2014-08-21 Added new method open(module_ID, input_index) to eKeyboard module\n2014-08-21 Renamed Interactive Table to IWB Toolbar\n2014-08-21 Added Gap max length property in Text module\n2014-08-20 Added responding to Show Answers events in Text module\n2014-08-20 Added Styles property to Navigation Bar module\n2014-08-20 Added Random order property to Choice module\n2014-08-20 Added new languages layouts to eKeyboard module\n2014-08-20 Added API method getView to Table module\n2014-08-19 Fixed drawing stand area nad hide area, some styling changes, new icons in Interactive Table\n2014-08-18 Fixed drawing on mobile devices in Interactive Table module\n2014-08-11 Added isAllOK() command to Magic Boxes module\n2014-08-07 Fixed selecting issue in Line Number addon on Android 4.2.2 devices\n2014-08-07 Added new module Interactive Table\n2014-08-07 Fixed problem when video ended in full screen mode on Android native browser\n2014-08-07 Fixed problem with page scroll when glossary popup appears in nested iframes\n2014-08-07 Fixed problem with Popup module when appears in nested iframes\n2014-08-06 Added responding to Show Answers events in Text Selection module\n2014-08-06 Added new module: Animated Page Progress\n2014-08-01 Added new property, \"Random order\", to Source List module\n2014-08-01 Fixed LearnPen module name\n2014-08-01 Added responding to Show Answers events in Choice module\n2014-08-01 Added separate CSS classes for elements in show answers mode in True/False module\n2014-08-01 Fixed problem with checking case sensitive answers in Table module gaps\n2014-08-01 Extended TextParser service gaps API with additional options property\n2014-07-31 Added isAllOK() command and AllOK event to Crossword module.\n2014-07-30 Fixed text wrapping and removed problem with double scroll bars in Paragraph module\n2014-07-30 Added possibility of custom styling each cell (via CSS styles and classes) in Writing Calculations module\n2014-07-29 Fixed responding to Check Answers button in True/False module while it's set as not-activity\n2014-07-29 Added isAllOK() command and AllOK event to Memo Game module.\n2014-07-29 Added responding to Show Answers events in True/False module\n2014-07-29 Added new module: Show Answers\n2014-07-25 Added new module: Page Rating\n2014-07-24 Added new module: Sudoku\n2014-07-24 Added new command to Player Services - sendPageAllOkOnValueChanged()\n2014-07-24 Added isAllOK() command to Ordering module\n2014-07-24 Fixed problem with image size in Slider addon\n2014-07-23 Added reset() command to Image Source module\n2014-07-23 Fixed centering content in both Single View and Book View modes for Text Identification module\n2014-07-23 Added support for drag & drop in Points and Lines module\n2014-07-23 Added support for drag & drop in Connecting Dots module\n2014-07-23 Added default HTML player to Audio addon\n2014-07-22 Removed tooltip from Close popup Button module\n2014-07-16 Crossword - setting position of a cursor to the end on the focus\n2014-07-16 Fixed problem with Popup module when appears in iframe\n2014-07-16 Fixed Writing Calculation scoring\n2014-07-15 Fixed draggable elements on Win8 Mobile/IE10\n2014-07-15 Fixed problem with page scroll when glossary popup appears in iframe\n2014-07-14 New properties for cells in Table addon: CSS Class and CSS Style\n2014-07-14 Fixed Text Audio module was hidding hightlighted text on pause\n2014-07-11 Fixed Writing Calculation styling\n2014-07-11 Fixed bug with True/False module scoring\n2014-07-10 Fixed bug with removing elements from MultipleGap addon on Windows 8 mobile\n2014-07-09 Fixed True/False module when checking answers after state was restored\n2014-07-09 Fixed issue with scoring on some mobile devices in Text module\n2014-07-09 Fixed bug with wrong events in Text module\n2014-07-08 Fixed sliding effect in Image Viewer addon on Windows Mobile browsers\n2014-07-08 Fixed sliding effect in Image Viewer addon on Internet Explorer 11\n2014-07-07 Fixed issue with first click on Image Viewer addon\n2014-07-07 Fixed loading cached image on Slider module on IE 10\n2014-07-04 New addon - Zoom Image\n2014-07-03 Fixed issue with scoring on some mobile devices in Text module\n2014-07-03 Added parsing definitions in Connection module\n2014-07-02 Fixed issue with Animation addon on Windows 8 Mobile devices\n2014-07-02 Fixed issue with dragging and clicking on mobile devices in ImageViewer addon\n2014-07-01 Adden new LearnPen addons: LearnPen Drawing and LearnPen Data\n2014-06-25 Fixed touch behavior on Windows 8 Mobile in 3D Viewer addon\n2014-06-24 Fixed Audio module on mLibro and Opera\n2014-06-24 Fixed problem with poster on iPad in Video Addon\n2014-06-16 Added listening on PageAllOk event in EventListener module\n2014-06-16 New event PageAllOk\n2014-06-16 Fixed selecting issue in Line Number addon on Android 4.2.2 devices\n2014-06-11 Added command isAllOk() to Shape Tracing addon\n2014-06-10 Fixed issue with text width in TextAudio addon\n2014-06-10 Added support for touches on Windows 8 Mobile in Image Viewer addon\n2014-06-10 Fixed issue with allOk event in Text Selection addon\n2014-06-09 Fixed bug with TextAudio addon on Safari and Opera\n2014-06-06 New addon - TextAudio\n2014-06-06 Added support for touches on Windows 8 Mobile in Slider module\n2014-05-28 Fixed issue with MathJax in Multiplegap addon\n2014-05-26 Added command isAttempted to Text Selection addon\n2014-05-26 Fixed issue with Video addon on IE\n2014-05-23 Added isAttempted method to Multiplegap module\n2014-05-23 Fixed wrong positioning of Glossary module in iFrame\n2014-05-22 Fixed issue with states in Table addon\n2014-05-22 Fixed issue with Slider not working on Firefox\n2014-05-22 Fixed issue with doubled 3D Viewer addon on devices with Android 4.2.2\n2014-05-22 Added command reset to SourceList addon\n2014-05-21 Added possibility to style correct/wrong answers to Coloring module\n2014-05-20 Fixed issue with states in Line Number addon\n2014-05-16 Removed navigation pages for single page\n2014-05-16 Fixed issues with states and reset in Done addon\n2014-05-16 Fixed issue with Graph module on page change\n2014-05-16 New Gap type: Math in Text module\n2014-05-15 Added commands hide and show to Done addon\n2014-05-12 Added commands setColor(color), setThickness(thickness), setEraserOn() and setEraserThickness(thickness) to Drawing addon\n2014-05-11 Added isAttempted, setAttempted, isAllOK to Plot addon\n2014-05-10 Choice returns max score on All ok event.\n2014-05-08 New commands in Points and Lines addon: markAsCorrect, markAsWrong, markAsNeutral, isConnected, isEmpty\n2014-05-08 Fixed problem with Coloring module not displaying coordinates in editor\n2014-05-08 Fixed problem with check counter in report after reopening page\n2014-05-07 Setting visibility of Feedback module on reset\n2014-05-07 Fixed issue with True/False addon on Firefox mobile browser\n2014-05-06 Added show/hide methods to Feedback addon\n2014-05-06 Fixed problem with reading page name with special characters\n2014-05-06 Fixed problem with dragging image source and source list while in editor mode\n2014-05-05 Added ability to define constant letters in Crossword addon\n2014-04-30 Fixed issue with custom events improper behaviour in Advanced Connector\n2014-04-24 Popup button is active while in check answers mode\n2014-04-23 Fixed issue with incorrect glossary widget position for Glossary addon placed in header/footer\n2014-04-22 Fixed issue with slow response of Connection addon\n2014-04-22 Fixed issue with correct answer mark for drop-down gaps in Table addon\n2014-04-22 Fixed bug with selected page number in Table of Contents addon\n2014-04-18 Removed restrictions to URLs in External Link Button\n2014-04-16 Added MathJax \\blank{} macro for Text module, which can be used for creating gaps in Math Expressions\n2014-04-16 New addons Clock and Swiffy Animation\n2014-04-16 New gap type - drop-down in Table addon.\n2014-04-16 Added Is Not Activity property to Graph addon.\n2014-04-10 Fixed selecting issue in Text Selection module in adroid 4.2.2\n2014-04-09 Fixed issue with boundaries detection in Shape Tracing addon on iOS7 devices\n2014-04-08 Ordering is always shuffled\n2014-04-08 Prevented adding class .hover to elements, when tapping on mobile devices in Text Selection module\n2014-04-07 Fixed issue with scoring in Shape Tracing addon\n2014-04-04 Fixed issue with NaN scores in hierarchical lesson report. Improvement to chapter names formatting.\n2014-03-31 Fixed bug in calculating scores in hierarchical lesson report\n2014-03-31 Added parseGaps command to JavaScriptPlayerServices\n2014-03-31 Added global style, fixing android highlight when focus on HTML element, to the Player\n2014-03-31 Fixed bug with disable/enable in Coloring module.\n2014-03-28 Fixed problem with checking answers when not all gaps were filled in Basic Math Gaps module\n2014-03-28 Player API extended to switch pages by page id\n2014-03-27 New module Done, it checks whenever all activities on the page has been attempted and button Submit has been pressed, then it sends 'Done' event\n2014-03-27 Fixed issue with improper total lesson scoring in hierarchical lesson report.\n2014-03-27 Score is saved by page id instead of name.\n2014-03-27 Fixed issue with Basic Math Gaps events\n2014-03-27 New module Next, similar to Next Page Button module, navigating to next page, but first it checks whenever all activities on the page has been attempted and button Submit has been pressed.\n2014-03-26 Added command isAttempted for Connection addon\n2014-03-26 Fixed couple of issues with Shape Tracing addon\n2014-03-26 Added command isAttempted for True/False addon\n2014-03-26 Is attempted command for Fractions addon\n2014-03-25 New addons Points and Lines and Edge Animation\n2014-03-25 Fixed problem with report score for not visited pages\n2014-03-25 Fixed problem with reset and set state in Submit module\n2014-03-24 \"Return first score\" flag modifies how the score is presented to the user\n2014-03-24 New module Submit, which acts like a Check module, but checks results only when all modules are in attempted state\n2014-03-24 Added handling custom events in the Advanced Connector\n2014-03-24 Added custom event to event bus\n2014-03-21 Added command isAttempted to Image Gap module\n2014-03-21 Added new text properties to check button\n2014-03-21 Added checkAnswers and uncheckAnswers method to Player API\n2014-03-21 Added command isAttempted to Text module\n2014-03-21 New addon: Hierarchical_Lesson_Report\n2014-03-19 Fixed issue with special characters external links in Text module\n2014-03-19 Added getModules method to Player API\n2014-03-19 Fixed problem with Tex in Video module\n2014-03-19 Added Coloring module\n2014-03-18 Fixed problem with links in page styles.\n2014-03-18 Added sending events to Text Selection module\n2014-03-17 Added addon Shape Tracing\n2014-03-14 Added command isAttempted to choice\n2014-03-12 Player can return first or last score\n2014-03-11 Fixed problem with Animation module commands execution on PageLoaded event\n2014-03-11 Player API extended to return page id\n2014-03-07 Added AllOK event and isAllOK command in Text module\n2014-03-07 Fixed problem with parsing addon properties\n2014-03-07 Fixed issue with icon pages on navigation bar for mLibro.\n2014-03-07 New addon connecting dots and updated fractions\n2014-03-06 Added enableAllGaps and disableAllGaps commands in Table module\n2014-03-06 Added enableAllGaps and disableAllGaps commands in Text module\n2014-03-06 Added injecting 'event' object into Advanced Connector module scripts\n2014-03-04 Added property for external links target in Text module.\n2014-03-05 Added 'Is disabled' property in Advanced Connector module\n2014-03-04 Basic Math Gaps module: Fixed navigation arrows showing up when clicking on the input and fixed alert error in Editor when Is Equation flag has been set to true\n2014-03-04 Fixed issue with external links in Text module.\n2014-03-04 Fixed few bugs in eKeyboard i.a. on mobile devices system keyboard will not display anymore, added draggable\n2014-03-04 Drag'n'drop with multiple gap fixed, no more doubled images.\n2014-03-03 New addon: Count and Graph\n2014-02-28 Add CSS class for selected page number in Table of Contents addon.\n2014-02-26 Fixed problem with scoring and events in Hangman addon.\n2014-02-21 Fixed problem with numeration of pages in Table Of Contents addon.\n2014-02-21 New modules: Basic Math Gaps and eKeyboard\n2014-02-21 PlayerUtils return mistake count also\n2014-02-20 Support for dragging in multiple gap\n2014-02-19 Fixed problem with page move notification\n2014-02-18 Fixed problem with scoring method when module LineNumber was not activity\n2014-02-18 PlayerUtils extended to return score for individual pages\n2014-02-18 Fixed problem with empty text on chrome browser\n2014-02-17 Fixed problem with localized property names\n2014-02-17 Added new property for additional classes in popup\n2014-02-13 Added API interface to get table of contents\n2014-02-13 Fixed problem with exception thrown to JavaScript console at presentation start\n2014-02-13 Fixed problem with blocking popup button after check+reset combination\n2014-02-13 Don't allow opening the popup twice\n2014-02-11 Different handling for d&d on mobile devices and PC\n2014-02-10 Fixed problem with d&d\n2014-02-06 Fixed problem with page progress on not reportable page\n2014-02-05 Added drag and drop support to image source and image gap\n2014-02-05 Added drag and drop support to source list and text modules\n2014-02-05 Added custom css support for plots in Plot module\n2014-02-04 Fixed state restoring after clicking Reset button in Memo Game module\n2014-01-27 Added new command to Puzzle module: getLoadedPromise\n2014-01-23 Add Navigation Panel feature.\n2014-01-23 Changed type of property Description (from text to html) in Glossary module\n2014-01-23 Fixed problem with positioning LaTeX in Text Identification module in book view mode\n2014-01-22 Fixed problem with MathJax rendering in Video module\n2014-01-16 Fixed problem with drag & drop in Graph module\n2014-01-16 Glossary definition click events are not propagated any more to stop navigation buttons display.\n2014-01-15 Fixed problem with zero one score.\n2014-01-14 Added new score type. result - errors.\n2014-01-13 Fixed bug in Text Identification, when clicking on the module was showing navigation arrows\n2014-01-13 Added new score type Zero-One\n2014-01-13 Allow putting glossary module in header and footer.\n2014-01-13 Fixed Text Selection module when marked word has signs before/after.\n2014-01-12 Unified command names for presenter and plot addon\n2014-01-10 Added CustomScoring methods to Connection module.\n2014-01-09 Added CustomScoring methods to True/False module.\n2014-01-09 Added show and hide methods to Page Progress module.\n2014-01-08 Fixed problem with Memo Game when trying to read state saved in different platform\n2014-01-08 Fixed problem with relative URLs in inline styles.\n2014-01-08 Changed True/False property type to accept HTML formatting.\n2014-01-02 Libraries removed from addon descriptor\n2013-12-31 Fixed problem with hiding multiplegap under other addons\n2013-12-30 Fixed problem with Animation addon on Firefox\n2013-12-18 Added new addon: Line\n2013-12-17 Fixed problem with popup's custom closing time and initialization of Glossary addon\n2013-12-16 Header for Table of Contents is now editable\n2013-12-16 Fixed tests in Line Number and Audio addons\n2013-12-13 Fixed problem with custom styles in Glossary addon\n2013-12-13 Fixed problem with placing Glossary widget into closing popup\n2013-12-13 Fixed problem with centering the mismatch mark in memo game\n2013-12-11 Fixed problem with restoring state from same lesson but other source\n2013-12-11 Close popup while changing page\n2013-12-11 Fixed problem with navigation toolbars position\n2013-12-10 Fixed problem with page numbers in Table Of Contents addon\n2013-12-10 Fixed problem with counting errors and sending events on setState, setShowErrorsMode and setWorkMode in Hangman addon\n2013-12-10 Fixed problem with navigation toolbars and report module\n2013-12-09 Removed reaction on Reset in Check Counter module\n2013-12-09 Removed console.logs in Double State Button\n2013-12-09 Fixed problem with drawRange function in Line Number addon\n2013-12-09 Fixed problem with Audio addon on iPads with getState function and AC scripts\n2013-12-06 Fixed problem with rendering mathjax in text module while loading state\n2013-12-05 Fixed problem with selecting Paragraph addon in the editor\n2013-12-05 Fixed problem with low height Paragraph addon\n2013-12-04 Fixed issue with marking points as wrong in free points mode\n2013-12-04 Added Custom CSS property to Paragraph addon\n2013-12-04 Fixed issue with points on axis after 'check' in LineNumber addon\n2013-12-03 Blockage displaying page navigation's arrows after clicking on the ExternalLinkButton\n2013-12-02 Added drop event handler for gaps in Text module\n2013-11-29 Fixed problem with errors counting in Memo Game addon\n2013-11-27 Fixed problem with showing choice after reset\n2013-11-22 New commands in module choice: show, hide, reset\n2013-11-22 Fixed problem with initial setState in Paragraph addon\n2013-11-20 Fixed problem with Source list not activity mode\n2013-11-20 Source list can contain formatted text\n2013-11-19 Fixed issue with Text Selection addon\n2013-11-18 Fixed issue with axis custom values in Plot addon\n2013-11-18 Added stop propagation on event click in Double State Button module.\n2013-11-18 Added support for Eastern Arabic and Perso-Arabic numericals in Navigation Bar\n2013-11-18 Added support for Eastern Arabic and Perso-Arabic numericals in Page Counter\n2013-11-15 Fixed bug in selection with selecting last phrase\n2013-11-15 Add markAs... command to choice module\n2013-11-14 Scorm libraries updated to handle storing session time\n2013-11-08 Fixed problem with leaping frames in Animation addon\n2013-11-06 New JS library to handle SCORM 1.2\n2013-11-05 Fixed issue with Double State Button on mLibro Android application\n2013-10-31 Added 2 commands setClickDisabled and setClickEnabled to Image Viewer addon\n2013-10-29 Fixed issue with precision in Plot addon\n2013-10-25 Fixed problem with restoring gap states\n2013-10-24 Fixed problem with Text Selection containg LaTeX with additional spaces\n2013-10-23 Fixed tests in Single State Button\n2013-10-23 Added 2 commands markAsCorrect and markAsWrong to Image Viewer addon\n2013-10-22 Fixed problem with LaTeX in Text Selection addon\n2013-10-21 Added displayName for addons' properties\n2013-10-21 Added saving in state if addon Graph is started\n2013-10-21 Fixed problem with gaps in Text module\n2013-10-16 Clear event bus when closing popup\n2013-10-16 Added CSS3 animation to navigation arrows\n2013-10-15 Fixed problem with counting errors in Custom Scoring\n2013-10-14 Fixed bug with hover effect on mobile devices in Choice and Image Source modules\n2013-10-14 Fixed problem with multiple parentheses in latex code\n2013-10-14 Fixed bug with limited errors in Custom Scoring\n2013-10-09 Fixed True/False and Table not loading properly due to bug 'c.find is undefined'\n2013-10-09 Fixed Glossary links on feedback when div.ic_page had more then one class\n2013-10-09 Fixed bug with calculating graph max score when activity was not started\n2013-10-09 Fixed bug with hover effect on mobile devices in Double State Button\n2013-10-09 Fixed bug with black background on IE 10 in Multiplegap addon\n2013-10-08 Fixed problem with definition event in book mode\n2013-10-08 event bug on safari in Video addon fixed\n2013-10-07 Fixed problem with next page in book mode while presentation contains 2 pages only\n2013-10-07 event bug in addons Graph and Single State Button fixed\n2013-10-07 Added getView function for modules\n2013-10-06 Changed navigation arrows default styling.\n2013-10-04 Fixed bug in event propagation in Double State Button\n2013-10-04 Removed user-select property from Drawing module styles, which was causing inability to select property value in Editor\n2013-10-03 Added stop propagation to addons: Crossword, Graph, Line Number, Plot, Audio, Drawing, IMageViewer Button Controller, Multi audio, DOuble State Button, Single State Button, Slider, Event Sender\n2013-10-03 Navigation arrows restored\n2013-10-03 Added stop propagation to addons: Connection, Hangman, Image Identification, Magic boxes, Gamememo, Multiplegap, Puzzle, Text selection, True False, Writing Calculations, Navigation Bar, Slide show, Image viewer, Animation\n2013-10-03 MP4 sources are now prefered in video addon\n2013-10-02 Fixed problem with Navigation Bar with page indexes.\n2013-10-02 Fixed problem with blocking Line Number addon and added new class 'disable' to '.outer' div when property 'Disable' is on true           d\n2013-10-01 Added page name to page loaded event\n2013-10-01 Fixed problem with definition of disable and not activity properties\n2013-10-01 Fixed problem with scoring in graph\n2013-09-30 Fixed problem with points in Image Indentification addon\n2013-09-30 Fixed problem with mouseleave.\n2013-09-30 Fixed problem with Drawing addon. Loading state and eraser.\n2013-09-27 Fixed problem with displaying Glossary on book view\n2013-09-26 Fixed displaying Glossary and other addons (Video, Image etc) on the following addons: Feedback, True/False, Table\n2013-09-23 Fixed TextParserProxy issue\n2013-09-23 Added simulate Tap event listeners to 4 addons (True/False, Connection, Image Identification, Text Identification)\n2013-09-20 Fixed addon on Feedback issue\n2013-09-19 Fixed Glossary links on feedback\n2013-09-19 Added TextParserProxy: parse, connectLinks - in Commons (now in version 1.8)\n2013-09-19 Added Drawing module. This module allows to draw on digital canvas.\n2013-09-18 Fixed Glossary issue\n2013-09-17 Script allows True and False values\n2013-09-16 Added getState and setState for Puzzle\n2013-09-16 goToPageIndex added to API\n2013-09-13 Choice can work in not activity mode\n2013-09-12 Addon Glossary can not hide other addons\n2013-09-12 Fixed problem with Glossary in Preview\n2013-09-11 Fixed problem with image gap not activity under show errors mode\n2013-09-06 Fixed problem with Glossary and Popup\n2013-09-06 Fixed problem with draggable gaps and state\n2013-09-06 Fixed problem with going to first page in book mode\n2013-09-05 Popup z-index = 100\n2013-09-04 Added Book API\n2013-09-03 Fixed Paragraph for non existing tinymce editor\n2013-09-03 Added default sizes to ic_popup_page CSS class\n2013-09-02 Fixed PlayerUtils for object with unavailable API\n2013-09-02 Fixed problem addon resources\n2013-09-02 Fixed problem with gaps on popups\n2013-09-02 Added thousand separator for Math module\n2013-09-02 Added StringUtils: replaceAll, startsWith, endsWith - in Commons (now in version 1.7)\n2013-08-29 Fixed problem with shuffling in Puzzle module\n2013-08-29 Fixed problem with state in text module\n2013-08-27 Added relative layout\n2013-08-26 Page without tasks is calculated as 100% in score\n2013-08-19 Added Text Selection module - enable to select parts of texts\n2013-08-09 Fixed problem with too many change events from choice module\n2013-08-09 Added cover page to book mode\n2013-08-07 Updated modules descriptions\n2013-08-05 Fixed problem with nonunicode characters pasted to text editor\n2013-08-02 Check can be used on footer and header\n2013-08-01 Fixed Open Popup Button in error checking mode\n2013-08-01 Added show and hide commands to all button modules\n2013-07-30 Fixed Video module visibility in popup page\n2013-07-29 Fixed onEnd event in Video module\n2013-07-26 Fixed problem with inline choice when selecting default value '---'\n2013-07-26 Fixed problem with spaces in URL\n2013-07-25 Added visibility commands in Standard Shapes module\n2013-07-25 Added restoring visibility in Slideshow module\n2013-07-22 Added 'Hide toolbar' property which hides default options toolbar and makes more space for text\n2013-07-16 Fixed value change events in Table module gaps system\n2013-07-05 Fixed a bug when event AllOk was sent even when wrong ranges were drawn\n2013-07-05 Fixed problem when Check was not removing range end image in Line Number module\n2013-07-04 Fixed problem when changing pages in Graph module\n2013-07-04 Fixed drawing range bug in Line Number module\n2013-07-03 Added Line Number module - used to draw X-axis ranges\n2013-07-03 Updated Custom Scoring module icon\n2013-07-02 Added event sending on playback finish to Video module\n2013-07-01 Fixed problem with events from not activity gaps\n2013-07-01 Fixed problem with disabled state for draggable gaps\n2013-06-30 Improved performance in Slider module\n2013-06-30 Fixed problem with Graph module loading\n2013-06-29 Removed 'Show time' property from Video module\n2013-06-28 Updated 3D Viewer module icon\n2013-06-28 Fixed problem with audio resources in Slideshow module on Safari Mobile\n2013-06-27 Added decimal separator property to Graph module\n2013-06-27 Added jQuery CSV library\n2013-06-26 Fixed focus problem in Paragraph module on Firefox browser\n2013-06-26 Added command for obtaining current frame in Image Viewer module\n2013-06-26 Added rotation and quality change commands to 3D Viewer module\n2013-06-25 Fixed min/max validation in float validation in Commons (now in version 1.6.10)\n2013-06-25 Added parsedValue property in float validation in Commons (now in version 1.6.9)\n2013-06-24 Fixed labels visibility in Animation module\n2013-06-24 Fixed float validation in Commons (now in version 1.6.8.)\n2013-06-21 Added new command to Image Identification module - removeMark - which removes marks done by markAs.. commands\n2013-06-21 Added new property - \"Is not an activity\" to Image Identification module\n2013-06-21 Fixed integer validation for zero values in Commons (now in version 1.6.7)\n2013-06-21 Added helper method - displaying error messages - in Commons (now in version 1.6.6)\n2013-06-21 Added Custom Scoring module. This module allows users to bind multiple modules and create fully scored activities from them\n2013-06-17 Fixed displaying error messages in Slideshow module\n2013-06-13 Added localization to new page name\n2013-06-13 Fixed problem with adding Paragraph module into presentation\n2013-06-12 Fixed problem with restoring visibility in Table module after page change\n2013-06-12 Fixed problem with fonts in multiple Paragraph editors on one page\n2013-06-12 Added JSC3D library for viewing 3D models purposes\n2013-06-12 Added 3D Viewer module. This module allow simple viewing 3D objects saved in OBJ format\n2013-06-12 Added commands queue utility to Commons which allows postponing commands execution (while module is loading asynchronously)\n"], "fixing_code": ["(function (window) {\r\n\r\n    window.TTSUtils = {\r\n\r\n        statics: {\r\n            breakText: '&&break&&',\r\n            gap: '&&gap&&',\r\n            dropdown: '&&dropdown&&',\r\n            correct: '&&correct&&',\r\n            wrong: '&&wrong&&',\r\n            empty: '&&empty&&',\r\n            nonBreakingSpace: '\\u00A0',\r\n            textNodeId: 3\r\n        },\r\n\r\n        GENDER: {\r\n            MASCULINE: 0,\r\n            FEMININE: 1,\r\n            NEUTER: 2\r\n        },\r\n\r\n        getTextVoiceArrayFromElement: function($element, presenterLangTag) {\r\n            var $clone = $('<div></div>').append($element.clone());\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n            $clone = this._prepareLists($clone);\r\n            $clone = this._addEndingSpace($clone);\r\n\r\n            var splitTexts = $clone.text().split(this.statics.breakText);\r\n            var TextVoiceArray = [];\r\n            for (var i = 0; i<splitTexts.length; i++) {\r\n                TextVoiceArray.push(this.getTextVoiceObject(splitTexts[i].trim(), presenterLangTag));\r\n            }\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        getTextVoiceArrayFromElementWithGaps: function($element, presenterLangTag, speechTextsModel) {\r\n            var $clone = $('<div></div>').append($element.clone());\r\n\r\n\r\n            var speechTexts = {\r\n                gap: 'gap',\r\n                dropdown: 'dropdown',\r\n                correct: 'correct',\r\n                empty: 'empty',\r\n                wrong: 'wrong'\r\n            };\r\n            if (speechTextsModel) {\r\n                if(speechTextsModel.gap) speechTexts.gap = speechTextsModel.gap;\r\n                if(speechTextsModel.dropdown) speechTexts.dropdown = speechTextsModel.dropdown;\r\n                if(speechTextsModel.correct) speechTexts.correct = speechTextsModel.correct;\r\n                if(speechTextsModel.wrong) speechTexts.wrong = speechTextsModel.wrong;\r\n                if(speechTextsModel.empty) speechTexts.empty = speechTextsModel.empty;\r\n            }\r\n\r\n            $element.find('select[id]').each( function() { //jquery.clone doesn't copy select values\r\n                var id = $(this).attr('id');\r\n                $clone.find('#'+id).val($(this).val());\r\n            });\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n            $clone = this._prepareGaps($clone);\r\n            $clone = this._prepareLists($clone);\r\n            $clone = this._addEndingSpace($clone);\r\n\r\n            var TextVoiceArray = this._parseRawText($clone.text(), speechTexts, presenterLangTag);\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        getTextVoiceArrayFromGap: function($gap, $gapContainer, presenterLangTag, speechTextsModel) {\r\n            var $clone = $('<div></div>').append($gap.clone());\r\n\r\n            var speechTexts = {\r\n                gap: 'gap',\r\n                dropdown: 'dropdown',\r\n                correct: 'correct',\r\n                empty: 'empty',\r\n                wrong: 'wrong'\r\n            };\r\n            if (speechTextsModel) {\r\n                if (speechTextsModel.gap) speechTexts.gap = speechTextsModel.gap;\r\n                if (speechTextsModel.dropdown) speechTexts.dropdown = speechTextsModel.dropdown;\r\n                if (speechTextsModel.correct) speechTexts.correct = speechTextsModel.correct;\r\n                if (speechTextsModel.wrong) speechTexts.wrong = speechTextsModel.wrong;\r\n                if (speechTextsModel.empty) speechTexts.empty = speechTextsModel.empty;\r\n            }\r\n\r\n            $clone = this._prepareAltTexts($clone);\r\n            $clone = this._prepareImages($clone);\r\n\r\n            // ensure the correct gap index when $element is a gap\r\n            var gapIndex = 0;\r\n            $gapContainer.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(index){\r\n                if($(this).is($gap)){\r\n                    gapIndex = index;\r\n                }\r\n            });\r\n\r\n            if($gap.is('select')){\r\n                $clone.find('select').val($gap.val());\r\n            }\r\n\r\n            $clone = this._prepareGaps($clone, gapIndex);\r\n\r\n            return this._parseRawText($clone.text(), speechTexts, presenterLangTag);\r\n        },\r\n\r\n        getTextVoiceObject: function (text, lang) {return {text: text, lang: lang};},\r\n\r\n        getSpeechTextProperty: function (rawValue, defaultValue) {\r\n            var value = rawValue.trim();\r\n\r\n            if (value === undefined || value === null || value === '') {\r\n                return defaultValue;\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        parsePreviewAltText: function (text) {\r\n            text = text.replace(/\\\\alt{([^{}|]*?)\\|[^{}|]*?}(\\[[a-zA-Z0-9_\\- ]*?\\])*/g, '$1'); // replace \\alt{a|b}[c] with a\r\n            text = text.replace(/\\\\alt{([^|{}]*?)\\|[^|{}]*?}/g, '$1'); // replace \\alt{a|b} with a\r\n            return text;\r\n        },\r\n\r\n        numberToPolishNumber: function(n) {\r\n            if (n === 0)\r\n                return 'zero';\r\n\r\n            var textUnits = ['', 'jeden', 'dwa', 'trzy', 'cztery', 'pi\\u0119\\u0107', 'sze\\u015b\\u0107', 'siedem', 'osiem', 'dziewi\\u0119\\u0107'];\r\n            var textTeens = ['', 'jedena\\u015bcie', 'dwana\\u015bcie', 'trzyna\\u015bcie', 'czterna\\u015bcie', 'pi\\u0119tna\\u015bcie', 'szesna\\u015bcie', 'siedemna\\u015bcie', 'osiemna\\u015bcie', 'dziewi\\u0119tna\\u015bcie'];\r\n            var textTens = ['', 'dziesi\\u0119\\u0107', 'dwadzie\\u015bcia', 'trzydzie\\u015bci', 'czterdzie\\u015bci', 'pi\\u0119\\u0107dziesi\\u0105t', 'sze\\u015b\\u0107dziesi\\u0105t', 'siedemdziesi\\u0105t', 'osiemdziesi\\u0105t', 'dziewi\\u0119\\u0107dziesi\\u0105t'];\r\n            var textHundreds = ['', 'sto', 'dwie\\u015bcie', 'trzysta', 'czterysta', 'pi\\u0119\\u0107set', 'sze\\u015b\\u0107set', 'siedemset', 'osiemset', 'dziewi\\u0119\\u0107set'];\r\n\r\n            var units = Math.floor(n % 10);\r\n            var tens = Math.floor((n / 10) % 10);\r\n            var hundreds = Math.floor((n / 100) % 10);\r\n            var thousands = Math.floor((n % Math.pow(10, 6)) / Math.pow(10, 3));\r\n            var millions = Math.floor((n % Math.pow(10, 9)) / Math.pow(10, 6));\r\n            var billions = Math.floor((n % Math.pow(10, 12)) / Math.pow(10, 9));\r\n\r\n            var nAsText = '';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(billions, ['miliard', 'miliardy', 'miliard\\u00f3w'], true) + ' ';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(millions, ['milion', 'miliony', 'milion\\u00f3w'], true) + ' ';\r\n            nAsText += this._partOfNumberToBigElementOfPolishNumber(thousands, ['tysi\\u0105c', 'tysi\\u0105ce', 'tysi\\u0119cy'], true) + ' ';\r\n            nAsText += textHundreds[hundreds] + ' ';\r\n\r\n            var numberEndsWithTeens = (tens === 1 && units != 0);\r\n            if (numberEndsWithTeens)\r\n                nAsText += textTeens[units];\r\n            else\r\n                nAsText += textTens[tens] + ' ' + textUnits[units];\r\n\r\n            return this._removeExtraSpaces(nAsText);\r\n        },\r\n\r\n        numberToPolishOrdinalNumber: function(n, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE;\r\n            }\r\n            if (n === 0)\r\n                return this._simpleChangePolishWordGender('zerowy', gender);\r\n            return this._getTextNonOrdinalPartOfNumber(n) + ' ' + this._getTextOrdinalPartOfNumber(n, gender);\r\n        },\r\n\r\n        numberToOrdinalNumber: function(n, language, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE;\r\n            }\r\n            if (['pl', 'pl-pl', 'polish'].includes(language.toLowerCase()))\r\n                return this.numberToPolishOrdinalNumber(n, gender);\r\n            return n;\r\n        },\r\n\r\n        _prepareAltTexts: function($clone) {\r\n            $clone.find('[aria-hidden=\"true\"]').remove();\r\n\r\n            $clone.find('[aria-label]').each(function(){\r\n                var replaceText = $(this).attr('aria-label');\r\n                var sanitizedText = window.xssUtils.sanitize(replaceText);\r\n                var langTag = $(this).attr('lang');\r\n                if (langTag && langTag.trim().length > 0 ) {\r\n                    sanitizedText = '\\\\alt{ |' + sanitizedText + '}' + '[lang ' + langTag + ']';\r\n                }\r\n                $(this).append(sanitizedText);\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _prepareImages: function($clone) {\r\n            var breakText = this.statics.breakText;\r\n\r\n            $clone.find('img[alt]').each(function(){\r\n                var altText = window.xssUtils.sanitize($(this).attr('alt'));\r\n                $('<span>' + breakText + '</span>').insertBefore($(this));\r\n                $('<span>' + breakText + '</span>').insertAfter($(this));\r\n                $('<span>' + altText + '</span>').insertAfter($(this));\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _prepareLists: function($clone) {\r\n            $clone.find('ol > li').each(function(){\r\n                var index = 0;\r\n                var currentElement = this;\r\n                while (currentElement != null) {\r\n                    if (currentElement.nodeName && currentElement.nodeName.toLowerCase()  == \"li\") {\r\n                        index += 1;\r\n                        if (currentElement.hasAttribute(\"value\")) {\r\n                            var value = currentElement.getAttribute(\"value\");\r\n                            if (!isNaN(value)) {\r\n                                index += parseInt(value) - 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    currentElement = currentElement.previousSibling;\r\n                }\r\n                this.innerHTML = \". \" + index + \": \" + this.innerHTML;\r\n                this.setAttribute(\"value\", index);\r\n            });\r\n\r\n            return $clone;\r\n        },\r\n\r\n        _addEndingSpace: function($clone) {\r\n            var self = this;\r\n            function isTextNode(node) {\r\n                return node != null && node.nodeType == self.statics.textNodeId;\r\n            }\r\n\r\n            function endsWithPunctuation(text) {\r\n                var trimmedText = text.replaceAll(self.statics.nonBreakingSpace, \" \").replaceAll(\"&nbsp;\", \" \").trim();\r\n                if (trimmedText.length === 0) return true; //text node with only white spaces should be ignored\r\n                var punc = \".,;?!\";\r\n                for (var i = 0; i < punc.length; i++) {\r\n                    if (trimmedText.endsWith(punc[i])) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            $clone.find('div, p').each(function(){\r\n                originalHTML = this.innerHTML;\r\n                if (isTextNode(this.previousSibling) && !endsWithPunctuation(this.previousSibling.wholeText)) {\r\n                    originalHTML = \".\" + self.statics.nonBreakingSpace + originalHTML;\r\n                }\r\n                if (isTextNode(this.lastChild) && !endsWithPunctuation(this.innerText)) {\r\n                    originalHTML = originalHTML + \".\" + self.statics.nonBreakingSpace;\r\n                }\r\n                originalHTML = originalHTML + self.statics.nonBreakingSpace;\r\n                this.innerHTML = originalHTML;\r\n            });\r\n            return $clone;\r\n        },\r\n\r\n        _prepareGaps: function($clone, gapIndex) {\r\n            var breakText = this.statics.breakText;\r\n            var gap = this.statics.gap;\r\n            var dropdown = this.statics.dropdown;\r\n            var correct = this.statics.correct;\r\n            var wrong = this.statics.wrong;\r\n            var empty = this.statics.empty;\r\n\r\n            $clone.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(index){\r\n                if (gapIndex) {\r\n                    $(this).attr('index', gapIndex + 1);\r\n                } else {\r\n                    $(this).attr('index', index + 1);\r\n                }\r\n            });\r\n\r\n            $clone.find('span.ic_gap, input.ic_gap, select.ic_inlineChoice').each(function(){\r\n                var $self = $(this);\r\n                var index = $self.attr('index');\r\n\r\n                var prefix = '';\r\n                if ($self.is('select')) {\r\n                    prefix = breakText + dropdown + ' ' + index + breakText;\r\n                } else {\r\n                    prefix = breakText + gap + ' ' + index + breakText;\r\n                }\r\n\r\n                var value = '';\r\n                if ($self.is('select, input')) {\r\n                    value = $self.val();\r\n                } else {\r\n                    value = $self.text();\r\n                }\r\n                if (value.length === 0 || ($self.is('select') && (value === '-' || value === '---'))) {\r\n                    if ($self.hasClass('ic_gap-empty')) {\r\n                        value = '';\r\n                    } else {\r\n                        value = empty + breakText;\r\n                    }\r\n                } else {\r\n                    value = value + breakText;\r\n                }\r\n\r\n                var suffix = '';\r\n                if ($self.hasClass('ic_gap-correct')) {\r\n                    suffix = correct + breakText;\r\n                } else if ($self.hasClass('ic_gap-wrong')) {\r\n                    suffix = wrong + breakText;\r\n                } else if ($self.hasClass('ic_gap-empty')) {\r\n                    suffix = empty + breakText;\r\n                }\r\n\r\n                var $newElement = $('<span>' + prefix + value + suffix + '</span>');\r\n                $self.replaceWith($newElement);\r\n            });\r\n            return $clone;\r\n        },\r\n\r\n        _parseRawText: function(content, speechTexts, presenterLangTag) {\r\n            var splitTexts = content.split(this.statics.breakText);\r\n            var TextVoiceArray = [];\r\n            for (var i = 0; i < splitTexts.length; i++) {\r\n                if(splitTexts[i].trim().length == 0){\r\n                    continue;\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.gap) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.gap, speechTexts.gap);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.dropdown) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.dropdown, speechTexts.dropdown);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.correct) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.correct, speechTexts.correct);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else  if (splitTexts[i].trim().indexOf(this.statics.wrong) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.wrong, speechTexts.wrong);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else if (splitTexts[i].trim().indexOf(this.statics.empty) !== -1) {\r\n                    var content = splitTexts[i].trim().replace(this.statics.empty, speechTexts.empty);\r\n                    TextVoiceArray.push(this.getTextVoiceObject(content));\r\n                } else {\r\n                    TextVoiceArray.push(this.getTextVoiceObject(splitTexts[i].trim(), presenterLangTag));\r\n                }\r\n            }\r\n\r\n            return TextVoiceArray;\r\n        },\r\n\r\n        focusInvisibleElement: function() {\r\n            $('#input_element_for_focus_to_change_focused_element_by_browser').focus();\r\n        },\r\n\r\n        _removeExtraSpaces: function(str) {\r\n            return str.replace(/\\s+/g,\" \").trim();\r\n        },\r\n\r\n        _reverseString: function(str) {\r\n            var newString = \"\";\r\n            for (var i = (str.length - 1); i >= 0; i--) {\r\n                newString += str[i];\r\n            }\r\n            return newString;\r\n        },\r\n\r\n        _removeLastWord: function(str) {\r\n            var lastWordIndex = str.lastIndexOf(\" \");\r\n            return str.substring(0, lastWordIndex);\r\n        },\r\n\r\n        _simpleChangePolishWordGender: function(word, gender) {\r\n            if (word === '' || ![this.GENDER.MASCULINE, this.GENDER.FEMININE, this.GENDER.NEUTER].includes(gender))\r\n                return word;\r\n\r\n            var genderCharacter = 'y';\r\n            if (gender === this.GENDER.FEMININE)\r\n                genderCharacter = 'a';\r\n            else if (gender === this.GENDER.NEUTER)\r\n                genderCharacter = 'e';\r\n\r\n            var lastCharacter = word.slice(word.length - 1);\r\n            var lastCharacterIsAGenderCharacter = ['a', 'e', 'y'].includes(lastCharacter);\r\n\r\n            if (lastCharacterIsAGenderCharacter)\r\n                return word.slice(0, -1) + genderCharacter;\r\n            return word + genderCharacter;\r\n        },\r\n\r\n        _partOfNumberToBigElementOfPolishNumber: function(n, wordsDescribingNumber, skipZero) {\r\n            if (!skipZero) {\r\n                skipZero = false;\r\n            }\r\n            if (n === 0 && skipZero)\r\n                return '';\r\n\r\n            var numberEndsWith2or3or4 = [2, 3, 4].includes(n % 10);\r\n\r\n            if (n === 1)\r\n                return ' ' + wordsDescribingNumber[0] + ' ';\r\n            else if (numberEndsWith2or3or4)\r\n                return this.numberToPolishNumber(n) + ' ' + wordsDescribingNumber[1] + ' ';\r\n            return this.numberToPolishNumber(n) + ' ' + wordsDescribingNumber[2] + ' ';\r\n        },\r\n\r\n        _getOrdinalPartOfNumber: function(n) {\r\n            var reversedOrdinalPart = '';\r\n\r\n            var nAsString = n.toString();\r\n            var unitsJustAdded;\r\n            for (var i = (nAsString.length - 1); i >= 0; i--) {\r\n                reversedOrdinalPart += nAsString[i];\r\n\r\n                if (nAsString[i] !== '0') {\r\n                    unitsJustAdded = ((nAsString.length - i - 1) % 3 === 0)\r\n                    if (unitsJustAdded && i > 0) {\r\n                        reversedOrdinalPart += nAsString[i - 1];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            return parseInt(this._reverseString(reversedOrdinalPart));\r\n        },\r\n\r\n        _getTextNonOrdinalPartOfNumber: function(n) {\r\n            numberLength = n.toString().length;\r\n            var ordinalPartAsStr = this._getOrdinalPartOfNumber(n).toString();\r\n            var ordinalPartLength = ordinalPartAsStr.length;\r\n            var numberWithoutOrdinalPart = Math.floor(n / Math.pow(10, ordinalPartLength)) * Math.pow(10, ordinalPartLength);\r\n\r\n            var hasNonOrdinalPart = (ordinalPartLength !== numberLength);\r\n            if (!hasNonOrdinalPart)\r\n                return '';\r\n            var nAsText = this.numberToPolishNumber(numberWithoutOrdinalPart);\r\n\r\n            var ordinalPartSize = Math.floor((ordinalPartLength - 1) / 3);\r\n            var nonOrdinalPartWithoutOrdinalPartSize = Math.floor(n / Math.pow(10, (ordinalPartSize + 1) * 3)) * Math.pow(10, (ordinalPartSize + 1) * 3);\r\n\r\n            var ordinalPartIsABigNumber = (ordinalPartLength > 3);\r\n            var nonOrdinalPartContainsOrdinalPartSize = (nonOrdinalPartWithoutOrdinalPartSize !== numberWithoutOrdinalPart);\r\n\r\n            if (ordinalPartIsABigNumber && nonOrdinalPartContainsOrdinalPartSize)\r\n                nAsText = this._removeLastWord(nAsText);\r\n\r\n            return this._removeExtraSpaces(nAsText)\r\n        },\r\n\r\n        _getTextOrdinalPartOfNumber: function(n, gender) {\r\n            if (!gender) {\r\n                gender = this.GENDER.MASCULINE\r\n            }\r\n            var textUnits = ['', 'pierwszy', 'drugi', 'trzeci', 'czwarty', 'pi\\u0105ty', 'sz\\u00f3sty', 'si\\u00f3dmy', '\\u00f3smy', 'dziewi\\u0105ty'];\r\n            var textTeens = ['', 'jedenasty', 'dwunasty', 'trzynasty', 'czternasty', 'pi\\u0119tnasty', 'szesnasty', 'siedemnasty', 'osiemnasty', 'dziewi\\u0119tnasty'];\r\n            var textTens = ['', 'dziesi\\u0105ty', 'dwudziesty', 'trzydziesty', 'czterdziesty', 'pi\\u0119\\u0107dziesi\\u0105ty', 'sze\\u015b\\u0107dziesi\\u0105ty', 'siedemdziesi\\u0105ty', 'osiemdziesi\\u0105ty', 'dziewi\\u0119\\u0107dziesi\\u0105ty'];\r\n            var textHundreds = ['', 'setny', 'dwusetny', 'trzysetny', 'czterysetny', 'pi\\u0119\\u0107setny', 'sze\\u015b\\u0107setny', 'siedemsetny', 'osiemsetny', 'dziewi\\u0119\\u0107setny'];\r\n\r\n            var textBigUnits = ['', 'jedno', 'dwu', 'trzy', 'cztero', 'pi\\u0119cio', 'sze\\u015bcio', 'siedmio', 'o\\u015bmio', 'dziewi\\u0119cio'];\r\n            var textBigTeens = ['', 'jedenasto', 'dwunasto', 'trzynasto', 'czternasto', 'pi\\u0119tnasto', 'szesnasto', 'siedemnasto', 'osiemnasto', 'dziewi\\u0119tnasto'];\r\n            var textBigTens = ['', 'dziesi\\u0119cio', 'dwudziesto', 'trzydziesto', 'czterdziesto', 'pi\\u0119\\u0107dziesi\\u0119cio', 'sze\\u015b\\u0107dziesi\\u0119cio', 'siedemdziesi\\u0119cio', 'osiemdziesi\\u0119cio', 'dziewi\\u0119\\u0107dziesi\\u0119cio'];\r\n            var textBigHundreds = ['', 'stu', 'dwustu', 'trzystu', 'czterystu', 'pi\\u0119ciuset', 'sze\\u015bciuset', 'siedmuset', 'o\\u015bmiuset', 'dziewi\\u0119ciuset'];\r\n            var sizes = ['', 'tysi\\u0119czny', 'milionowy', 'miliardowy'];\r\n\r\n            textUnits.forEach(function(element, index, array) {\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textTeens.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textTens.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            textHundreds.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n            sizes.forEach(function(element, index, array){\r\n                array[index] = this._simpleChangePolishWordGender(element, gender);\r\n            }.bind(this));\r\n\r\n            if (gender === this.GENDER.FEMININE) {\r\n                textUnits[2] = 'druga';\r\n            }\r\n\r\n            var ordinalPart = this._getOrdinalPartOfNumber(n);\r\n            var ordinalPartAsStr = ordinalPart.toString();\r\n            var ordinalPartLength = ordinalPartAsStr.length;\r\n\r\n            var ordinalPartIsUnits = ((ordinalPartLength - 1) % 3 === 0);\r\n            var ordinalPartIsTens = ((ordinalPartLength - 1) % 3 === 1);\r\n            var ordinalPartIsTeens = (ordinalPartIsTens && ordinalPartAsStr[0] === '1' && ordinalPartAsStr[1] !== '0');\r\n            var ordinalPartIsHundreds = ((ordinalPartLength - 1) % 3 === 2);\r\n            var size = sizes[Math.floor((ordinalPartLength - 1) / 3)];\r\n\r\n            if (ordinalPartLength === 1)\r\n                ordinalPartAsText = textUnits[ordinalPartAsStr[0]];\r\n            else if (ordinalPartIsTeens && ordinalPartLength === 2)\r\n                ordinalPartAsText = textTeens[ordinalPartAsStr[1]];\r\n            else if (ordinalPartLength === 2)\r\n                ordinalPartAsText = (textTens[ordinalPartAsStr[0]] + ' ' + textUnits[ordinalPartAsStr[1]]).trim();\r\n            else if (ordinalPartLength === 3)\r\n                ordinalPartAsText = textHundreds[ordinalPartAsStr[0]];\r\n            else {\r\n                if (ordinalPartIsUnits)\r\n                    ordinalPartAsText = textBigUnits[ordinalPartAsStr[0]];\r\n                else if (ordinalPartIsTeens)\r\n                    ordinalPartAsText = textBigTeens[ordinalPartAsStr[1]];\r\n                else if (ordinalPartIsTens)\r\n                    ordinalPartAsText = (textBigTens[ordinalPartAsStr[0]] + ' ' + textBigUnits[ordinalPartAsStr[1]]).trim();\r\n                else if (ordinalPartIsHundreds)\r\n                    ordinalPartAsText = textBigHundreds[ordinalPartAsStr[0]];\r\n\r\n                ordinalPartAsText += size;\r\n            }\r\n\r\n            return this._removeExtraSpaces(ordinalPartAsText);\r\n        }\r\n    }\r\n})(window);", "function AddonTable_create() {\n\n    /*\n        INTEGRATION WITH MATH MODULE:\n            Table supports integration with Math module. Table which is not activity, will show answers provided by\n            Math module. Requires implementation of methods and variables listed below.\n\n            Attributes:\n                @param isConnectedWith {boolean}  required by Math module, to detect if table is connected with Math\n\n            Methods:\n                presenter.setGapAnswer (gapIndex, answer, answersLength) - method used by Math to set gap answer at\n                    show answers when table is not activity. Gap index based by DOM occurence order. 1-n based\n\n                presenter.setUserValue (gapIndex, value) - method used by Math module to restore user answer at hide answers\n\n                presenter.getValue (gapIndex) - method used by Math module to get user value in gap by index\n\n                presenter.isActivity - method used by Math module to determine if addon is activity\n     */\n\n\n    var presenter = function () {\n    };\n\n    var isConnectedWithMath = false;\n    presenter.gapsSize = [];\n    presenter.isSetShowErrorsMode = false;\n    presenter.keyboardControllerObject = null;\n    presenter.isWCAGOn = false;\n    presenter.gapNavigation = false;\n    presenter.addonKeyboardNavigationActive = false;\n    presenter.gapIndex = 0;\n    presenter.isGradualShowAnswersActive = false;\n    presenter.printableState = null;\n    presenter.printableStateMode = null;\n    presenter.printableParserID = null;\n    presenter.printableParserCallback = null;\n\n    presenter.ERROR_CODES = {\n        'RW_01': 'Number of rows must be a positive integer!',\n        'CL_01': 'Number of columns must be a positive integer!',\n        'CO_01': 'Row number must be a positive integer!',\n        'CO_02': 'Column number must be a positive integer',\n        'CO_03': 'Row number must be a number from 1 to rows count!',\n        'CO_04': 'Column number must be a number from 1 to columns count',\n        'CO_05': 'Each table cell can be defined only once!',\n        'CO_06': 'Empty table cell definition must contain only one empty element!',\n        'CR_00': 'Column and row numbers must be sequential within one table cell',\n        'CW_01': \"Number of items in 'Columns width' property cannot be higher than number of columns!\",\n        'RH_01': \"Number of items in 'Rows height' property cannot be higher than number of rows!\",\n        'GW_01': \"Gap width incorrect!\"\n    };\n\n    presenter.replaceGapID = function (gap, parsedText) {\n        var gapID = presenter.configuration.addonID + gap.id;\n        var patt = new RegExp(\"id=\\\"\" + gap.id + \"\\\"\");\n        var rep = \"id=\\\"\" + gapID + \"\\\"\";\n        return  parsedText.replace(patt, rep);\n    };\n\n    function getParsedHTMLView () {\n        return presenter.textParser.parseGaps(presenter.$view.html(),\n            {\n                isCaseSensitive: presenter.configuration.isCaseSensitive,\n                isKeepOriginalOrder: presenter.configuration.keepOriginalOrder\n            }\n        );\n    }\n\n    presenter.parseGaps = function (isPreview) {\n        if (presenter.configuration.gapType === \"draggable\") {\n            return presenter.parseGapsWrapper(presenter.DraggableDroppableGap, isPreview);\n        } else {\n            return presenter.parseGapsWrapper(presenter.EditableInputGap, isPreview);\n        }\n    };\n\n    function changeInlineGapsIDs (inlineGaps, parsedText) {\n        inlineGaps.forEach(function (gap) {\n            parsedText = presenter.replaceGapID(gap, parsedText);\n            var gapID = presenter.configuration.addonID + gap.id;\n\n            presenter.gapsContainer.addGap(new presenter.SelectGap(gapID, [gap.answer], gap.value));\n        });\n\n        return parsedText;\n    }\n\n    function changeSimpleGapsIDs (simpleGaps, parsedText, objectType) {\n        simpleGaps.forEach(function (gap) {\n            parsedText = presenter.replaceGapID(gap, parsedText);\n            var gapID = presenter.configuration.addonID + gap.id;\n            presenter.gapsContainer.addGap(new objectType(gapID, gap.answers, 1));\n        });\n\n        return parsedText;\n    }\n\n    presenter.parseGapsWrapper = function (objectType, isPreview) {\n        var textParserResult = getParsedHTMLView();\n\n        var parsedText = textParserResult.parsedText;\n        parsedText = changeSimpleGapsIDs(textParserResult.gaps, parsedText, objectType);\n        parsedText = changeInlineGapsIDs(textParserResult.inLineGaps, parsedText, objectType);\n\n        presenter.$view.html(parsedText);\n\n        if(!isPreview){\n            presenter.getInputsSize();\n        }\n    };\n\n    presenter.getInputsSize = function () {\n        presenter.$view.find('input').each(function () {\n            var inputID = $(this).attr('id'),\n                inputSize = $(this).attr('size');\n\n            presenter.gapsSize.push({id : inputID, size: inputSize})\n        });\n    };\n\n    presenter.setGapsClassAndWidth = function () {\n        presenter.$view.find('.ic_inlineChoice').addClass('ic_gap');\n        presenter.$view.find('.ic_inlineChoice').css('width', presenter.configuration.gapWidth.value+\"px\");\n    };\n\n    presenter.initializeGaps = function (isPreview) {\n        presenter.parseGaps(isPreview);\n\n        if (presenter.hasMathGaps()){\n            presenter.gapsContainer.gaps = [];\n            $(presenter.$view).find('input').each(function () {\n                $(this).replaceWith(\n                    generateMathGap(\n                        window.xssUtils.sanitize($(this).attr('id')),\n                        presenter.configuration.gapWidth.value\n                    )\n                );\n            });\n        }\n\n        presenter.gapsContainer.replaceDOMViewWithGap();\n        presenter.setGapsClassAndWidth();\n    };\n\n    /**\n     * String generated by this function can be replaced by MathJax to input.\n     * See media/js/forminput.js\n     * @param id\n     * @param width\n     */\n    function generateMathGap(id, width) {\n        return `\\\\gap{${id}|1|${width}|{{value:${id}}}}`;\n    }\n\n    function deleteCommands () {\n        delete presenter.getScore;\n        delete presenter.getMaxScore;\n        delete presenter.getState;\n        delete presenter.setState;\n        delete presenter.getGapTextCommand;\n        delete presenter.getGapTextCommand;\n        delete presenter.markGapAsEmptyCommand;\n        delete presenter.markGapAsCorrectCommand;\n        delete presenter.markGapAsWrongCommand;\n        delete presenter.enableGapCommand;\n        delete presenter.enableAllGaps;\n        delete presenter.disableGapCommand;\n        delete presenter.disableAllGaps;\n        delete presenter.isAttempted;\n    }\n\n    function replaceInputsInPreview () {\n        if (presenter.configuration.gapType === \"draggable\") {\n            var inputs = presenter.$wrapper.find(\"input\");\n\n            for (var i = 0; i < inputs.length; i++) {\n                $(inputs[i]).replaceWith(presenter.DraggableDroppableGap.prototype.createView());\n            }\n        }\n    }\n\n    presenter.logic = function (view, model, isPreview) {\n        presenter.$view = $(view);\n        presenter.$wrapper = presenter.$view.find('.table-addon-wrapper');\n        presenter.configuration = presenter.validateModel(presenter.upgradeModel(model));\n        presenter.isPreview = isPreview;\n\n        if (presenter.hasMathGaps()){\n            var mathJaxDeferred = new jQuery.Deferred();\n            presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;\n            presenter.mathJaxProcessEnded = mathJaxDeferred.promise();\n\n            MathJax.Hub.Register.MessageHook(\"End Process\", function (message) {\n                if ($(message[1]).hasClass('ic_page')) {\n                    presenter.mathJaxProcessEndedDeferred.resolve();\n                }\n            });\n        }\n\n        if (!presenter.configuration.isValid) {\n            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);\n            deleteCommands();\n            return;\n        }\n\n        presenter.mainLogic(isPreview);\n\n        if (presenter.hasMathGaps()){\n            presenter.mathJaxProcessEnded.then(function() {\n                MathJax.CallBack.Queue().Push(function () {\n                    if(!isPreview){\n                        presenter.renderMathJax();\n                        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());\n                        var checkSelector = setInterval(function () {\n                            if ($(presenter.$view).find('input').length > 0) {\n                                presenter.gapsContainer.gaps = [];\n                                $(presenter.$view).find('input').each(function (_, index) {\n                                    for(var i = 0; i < presenter.gapsAnswers.length; i++){\n                                        if(presenter.gapsAnswers[i].id === $(this).attr('id')){\n                                            var correctAnswers = presenter.gapsAnswers[i].answers;\n                                        }\n                                    }\n                                    presenter.gapsContainer.addGap(new presenter.EditableInputGap($(this).attr('id'), correctAnswers, 1));\n                                });\n                                clearInterval(checkSelector);\n                                presenter.eventBus.sendEvent('ValueChanged', []);\n                            }\n                        }, 100);\n                    }\n                });\n            });\n        }\n\n        if(isPreview) {\n            presenter.setEditorGapWidth();\n        } else {\n            presenter.setInputsSize();\n        }\n    };\n\n    presenter.setInputsSize = function () {\n        for (var i = 0; i < presenter.gapsSize.length; i++) {\n            var inputId = presenter.gapsSize[i].id,\n                size = presenter.gapsSize[i].size;\n\n            presenter.$view.find('#'+inputId).attr('size', size);\n        }\n    };\n\n    presenter.setEditorGapWidth = function () {\n        presenter.$view.find('input').css(\"width\", presenter.configuration.gapWidth.value+\"px\");\n        presenter.$view.find('span').css(\"width\", presenter.configuration.gapWidth.value+\"px\");\n    };\n\n    presenter.mainLogic = function (isPreview) {\n        presenter.gapsContainer = new presenter.GapsContainerObject();\n\n        var $table = presenter.generateTable(presenter.configuration.contents, isPreview);\n        presenter.setColumnWidth($table, presenter.configuration.columnsWidths, presenter.configuration.rowsHeights);\n        presenter.setRowHeight($table, presenter.configuration.rowsHeights);\n        presenter.setVisibility(presenter.configuration.isVisible || isPreview);\n\n        presenter.initializeGaps(isPreview);\n\n        if (!isPreview) {\n            presenter.parseDefinitionLinks();\n        } else {\n            replaceInputsInPreview();\n            presenter.setGapsClassAndWidth();\n            presenter.$view.find('input').attr(\"size\", \"auto\");\n            if (presenter.configuration.gapType === \"draggable\") {\n                presenter.$view.find('input').addClass(\"draggable-gap\");\n            }\n        }\n\n        presenter.gapsContainer.replaceGapsDOMWithView();\n        presenter.lastDraggedItem = {};\n\n        if (presenter.configuration.isDisabledByDefault) {\n            presenter.gapsContainer.lockAllGaps();\n        }\n\n        presenter.buildKeyboardController();\n    };\n\n    presenter.setPlayerController = function (controller) {\n        presenter.playerController = controller;\n        presenter.textParser = new TextParserProxy(controller.getTextParser());\n\n    };\n\n    presenter.setEventBus = function (eventBus) {\n        presenter.eventBus = eventBus;\n\n        presenter.eventBus.addEventListener('ShowAnswers', this);\n        presenter.eventBus.addEventListener('HideAnswers', this);\n        presenter.eventBus.addEventListener('ItemSelected', this);\n        presenter.eventBus.addEventListener('ItemConsumed', this);\n        presenter.eventBus.addEventListener('GradualShowAnswers', this);\n        presenter.eventBus.addEventListener('GradualHideAnswers', this);\n    };\n\n    presenter.setTextParser = function (textParser) {\n        presenter.textParser = new TextParserProxy(textParser());\n    };\n\n    presenter.getSelectedItem = function () {\n        var item = presenter.lastDraggedItem;\n\n        presenter.lastDraggedItem = {};\n\n        return item;\n    };\n\n    presenter.createPreview = function (view, model) {\n        presenter.logic(view, model, true);\n    };\n\n    presenter.run = function (view, model) {\n        presenter.logic(view, model, false);\n    };\n\n    presenter.reset = function () {\n        presenter.gapsContainer.reset();\n        presenter.setVisibility(presenter.configuration.isVisibleByDefault);\n        presenter.isSetShowErrorsMode = false;\n        presenter.attemptedGaps = [];\n    };\n\n    presenter.getState = function () {\n        var spans;\n        var gaps = presenter.gapsContainer.getGapsState();\n\n        if (presenter.configuration.gapType === \"draggable\") {\n            spans = presenter.gapsContainer.getState();\n        } else {\n            spans = null;\n        }\n\n        return JSON.stringify({\n            gaps: gaps,\n            isVisible: presenter.configuration.isVisible,\n            spans: spans\n        });\n    };\n\n    presenter.setState = function (rawState) {\n        var state = JSON.parse(rawState);\n\n        presenter.setVisibility(state.isVisible);\n        presenter.configuration.isVisible = state.isVisible;\n        presenter.attemptedGaps = state.attemptedGaps === undefined ? presenter.attemptedGaps : state.attemptedGaps;\n\n        if (presenter.hasMathGaps()) {\n            var checkSelector = setInterval(\n                function () {\n                    if ($(presenter.$view).find('.mathGap').length === presenter.gapsAnswers.length) {\n                        try{\n                            presenter.gapsContainer.setGapsState(state.gaps);\n                            presenter.gapsContainer.setSpansState(state.spans);\n                            clearInterval(checkSelector);\n                        } catch (e) { }\n                    }\n                }, 100);\n        } else {\n            presenter.gapsContainer.setGapsState(state.gaps);\n            presenter.gapsContainer.setSpansState(state.spans);\n        }\n    };\n\n    /**\n     * Generate table row (tr) element. Each cell has col_C and row_R classes where R is row number\n     * (counted from 1 to rows count) and C is column number (from 1 to columns count).\n     *\n     * @param row row number counted from 0\n     * @param content row content array\n     * @param isPreview\n     *\n     * @return {jQuery} jQuery reference to new table row element\n     */\n    presenter.generateRow = function (row, content, isPreview) {\n        var $rowElement = $(document.createElement('tr')), i, length;\n\n        for (i = 0, length = content.length; i < length; i++) {\n            if (!content[i]) continue;\n\n            var $element;\n            if ((row === 0 && presenter.configuration.isFirstRowHeader) ||\n                (i === 0 && presenter.configuration.isFirstColumnHeader)) {\n                $element = $(document.createElement('th'));\n            } else {\n                $element = $(document.createElement('td'));\n            }\n\n            $element.addClass('table_cell');\n            $element.addClass('row_' + (row + 1));\n            $element.addClass('col_' + (i + 1));\n            $element.html(content[i].content);\n            $element.attr({\n                colspan: content[i].colSpan,\n                rowspan: content[i].rowSpan\n            });\n\n            if ( presenter.configuration.isTabindexEnabled) {\n                $element.attr('tabindex', '0');\n            }\n\n            if (content[i].class) {\n                $element.addClass(content[i].class)\n            }\n            if (content[i].style) {\n                $element.attr({style:content[i].style})\n            }\n\n            $rowElement.append($element);\n        }\n\n        return $rowElement;\n    };\n\n    presenter.parseDefinitionLinks = function () {\n        $.each(presenter.$view.find('.table_cell'), function (index, element) {\n            const sanitizedLink = window.xssUtils.sanitize(presenter.textParser.parse($(element).html()));\n            $(element).html(sanitizedLink);\n        });\n\n        presenter.textParser.connectLinks(presenter.$view);\n    };\n\n    /**\n     * Generate table element with content based on provided array.\n     *\n     * @param content array with table cells contents\n     * @param isPreview\n     *\n     * @return {jQuery} jQuery reference to new table element\n     */\n    presenter.generateTable = function (content, isPreview) {\n        var $table = $(document.createElement('table'));\n\n        for (var i = 0, length = content.length; i < length; i++) {\n            var $row = presenter.generateRow(i, content[i], isPreview);\n\n            $table.append($row);\n        }\n\n        presenter.$wrapper.html($table);\n\n        return $table;\n    };\n\n    presenter.setColumnWidth = function ($table, columnWidth, rowsHeights) {\n        var i = 0;\n        if (presenter.configuration.newWidthCalculate) {\n            var rowsNumber = rowsHeights.length;\n            var columsNumber = columnWidth.length;\n            for (var row = 1; row <= rowsNumber; row++) {\n                var foundedRow = $table.find('.row_' + row);\n                for (i = 0; i < columsNumber; i++) {\n                    $(foundedRow[i]).css('width', columnWidth[i]);\n                }\n            }\n        } else {\n            var firstRow = $table.find('.row_1');\n\n            for (i = 0; i < columnWidth.length; i++) {\n                $(firstRow[i]).css('width', columnWidth[i]);\n            }\n        }\n};\n\n\n    presenter.setRowHeight = function ($table, rowHeight) {\n        var i;\n        for (i = 0; i < rowHeight.length; i++) {\n            $table.find('.row_' + (i + 1)).each(function () {\n                $(this).css('height', rowHeight[i]);\n            });\n        }\n    };\n\n    /**\n     * Validate content list and convert it into multidimensional {Array}. Not specified contents equals empty elements.\n     *\n     * @param content list of content definition (consist Row, Column and Content fields)\n     * @param rowsCount number of rows\n     * @param columnsCount number of columns\n     *\n     * @return {Object} validation result\n     * @return {Boolean} isValid\n     * @return {String} error code if any occurs\n     * @return {Array} contents array of contents. Dimensions based on Rows and Columns properties\n     */\n    presenter.validateContent = function (content, rowsCount, columnsCount) {\n        var validatedContent = [], controlArray = [], c, r;\n\n        for (r = 0; r < rowsCount; r++) {\n            validatedContent[r] = [];\n            controlArray[r] = [];\n\n            for (c = 0; c < columnsCount; c++) {\n                validatedContent[r][c] = { content: \"\", rowSpan: 1, colSpan: 1 };\n                controlArray[r][c] = false;\n            }\n        }\n\n        if (ModelValidationUtils.isArrayElementEmpty(content[0])) {\n            if (content.length === 1) {\n                return { isValid: true, content: validatedContent };\n            } else {\n                return { isValid: false, errorCode: 'CO_06' };\n            }\n        }\n\n        for (var i = 0, length = content.length; i < length; i++) {\n            var rows = presenter.validateSequence(content[i].Row, rowsCount, true);\n            if (!rows.isValid)  return { isValid: false, errorCode: rows.errorCode };\n\n            var columns = presenter.validateSequence(content[i].Column, columnsCount, false);\n            if (!columns.isValid)  return { isValid: false, errorCode: columns.errorCode };\n\n            for (r = 0; r < rows.values.length; r++) {\n                for (c = 0; c < columns.values.length; c++) {\n                    var row = rows.values[r] - 1;\n                    var column = columns.values[c] - 1;\n\n                    if (controlArray[row][column]) return { isValid: false, errorCode: 'CO_05' };\n                    controlArray[row][column] = true;\n\n                    if (r === 0 && c === 0) {\n                        validatedContent[row][column] = {\n                            content: content[i].Content,\n                            rowSpan: rows.values.length,\n                            colSpan: columns.values.length,\n                            class : content[i].hasOwnProperty(\"CSS Class\") ? content[i][\"CSS Class\"] : \"\",\n                            style: content[i].hasOwnProperty(\"CSS Style\") ? content[i][\"CSS Style\"] : \"\"\n                        };\n                    } else {\n                        validatedContent[row][column] = undefined;\n                    }\n                }\n            }\n        }\n\n        return { isValid: true, content: validatedContent };\n    };\n\n    presenter.validateSingleNumber = function (column, columnsCount, isRowValidated) {\n        var validatedColumn = ModelValidationUtils.validatePositiveInteger(column);\n\n        if (!validatedColumn.isValid) return { isValid: false, errorCode: isRowValidated ? 'CO_01' : 'CO_02'};\n        if (validatedColumn.value > columnsCount) return { isValid: false, errorCode: isRowValidated ? 'CO_03' : 'CO_04' };\n\n        return {isValid: true, value: validatedColumn.value };\n    };\n\n    presenter.validateSequence = function (columns, columnsCount, isRowValidated) {\n        var values = [], validatedColumn, splittedColumns, i;\n\n        splittedColumns = columns.indexOf(',') === -1 ? [columns] : columns.split(',');\n\n        for (i = 0; i < splittedColumns.length; i++) {\n            validatedColumn = presenter.validateSingleNumber(splittedColumns[i], columnsCount, isRowValidated);\n\n            if (!validatedColumn.isValid) return { isValid: false, errorCode: validatedColumn.errorCode };\n\n            values.push(validatedColumn.value);\n        }\n\n        if (values.length > 1) {\n            for (i = 1; i < values.length; i++) {\n                if (values[i - 1] + 1 !== values[i]) {\n                    return { isValid: false, errorCode: 'CR_00' };\n                }\n            }\n        }\n\n        return { values: values, isValid: true };\n    };\n\n    presenter.convertDimensionsArray = function (columnWidth, columnsCount, propertyName) {\n        if (columnWidth.length > columnsCount) return { isValid: false };\n\n        var widths = [], value, i;\n        for (i = 0; i < columnWidth.length; i++) {\n            if (ModelValidationUtils.isStringEmpty(columnWidth[i][propertyName])) {\n                value = 'auto';\n            } else {\n                value = columnWidth[i][propertyName];\n            }\n\n            widths.push(value);\n        }\n\n        if (columnWidth.length < columnsCount) {\n            for (i = columnWidth.length; i < columnsCount; i++) {\n                widths.push('auto');\n            }\n        }\n\n        return { isValid: true, dimensions: widths };\n    };\n\n    function getSpeechTextProperty (rawValue, defaultValue) {\n        var value = rawValue.trim();\n\n        if (value === undefined || value === null || value === '') {\n            return defaultValue;\n        }\n\n        return value;\n    }\n\n    presenter.setSpeechTexts = function(speechTexts) {\n        presenter.speechTexts = {\n            correct:  'correct',\n            wrong: 'wrong',\n            empty: 'empty',\n            gap: 'gap',\n            dropdown: 'dropdown',\n            inserted: 'inserted',\n            removed: 'removed',\n            cell: 'cell',\n            row: 'row',\n            column: 'column',\n            rowSpan: 'row span',\n            colSpan: 'column span'\n        };\n\n        if (!speechTexts) {\n            return;\n        }\n\n        presenter.speechTexts = {\n            correct:    getSpeechTextProperty(speechTexts['Correct']['Correct'], presenter.speechTexts.correct),\n            wrong: getSpeechTextProperty(speechTexts['Wrong']['Wrong'], presenter.speechTexts.wrong),\n            empty:  getSpeechTextProperty(speechTexts['Empty']['Empty'], presenter.speechTexts.empty),\n            gap:     getSpeechTextProperty(speechTexts['Gap']['Gap'], presenter.speechTexts.gap),\n            dropdown:   getSpeechTextProperty(speechTexts['Dropdown']['Dropdown'], presenter.speechTexts.dropdown),\n            inserted:      getSpeechTextProperty(speechTexts['Inserted']['Inserted'], presenter.speechTexts.inserted),\n            removed:        getSpeechTextProperty(speechTexts['Removed']['Removed'], presenter.speechTexts.removed),\n            cell:        getSpeechTextProperty(speechTexts['Cell']['Cell'], presenter.speechTexts.cell),\n            row:        getSpeechTextProperty(speechTexts['Row']['Row'], presenter.speechTexts.row),\n            column:        getSpeechTextProperty(speechTexts['Column']['Column'], presenter.speechTexts.column),\n            rowSpan:        getSpeechTextProperty(speechTexts['RowSpan']['RowSpan'], presenter.speechTexts.rowSpan),\n            colSpan:        getSpeechTextProperty(speechTexts['ColSpan']['ColSpan'], presenter.speechTexts.colSpan)\n        };\n    };\n\n    /**\n     * Validate user input configuration.\n     *\n     * @param model {Array} of properties injected into Addon\n     *\n     * @return {Object} validation result\n     * @return {Boolean} isValid\n     * @return {String} error code if any occurs\n     * @return {Object} contents array of contents. Dimensions based on Rows and Columns properties\n     */\n    presenter.validateModel = function (model) {\n\n        presenter.setSpeechTexts(model['speechTexts']);\n\n        if (model[\"newWidthCalculate\"] === undefined) {\n            model[\"newWidthCalculate\"] = false;\n        }\n\n        var validatedRows = ModelValidationUtils.validatePositiveInteger(model.Rows);\n        if (!validatedRows.isValid) {\n            return { isValid: false, errorCode: 'RW_01' };\n        }\n\n        var validatedColumns = ModelValidationUtils.validatePositiveInteger(model.Columns);\n        if (!validatedColumns.isValid) {\n            return { isValid: false, errorCode: 'CL_01' };\n        }\n\n        var validatedContents = presenter.validateContent(model[\"Table cells\"], validatedRows.value, validatedColumns.value);\n        if (!validatedContents.isValid) {\n            return { isValid: false, errorCode: validatedContents.errorCode };\n        }\n\n        var convertedColumnWidth = presenter.convertDimensionsArray(model[\"Columns width\"], validatedColumns.value, 'Width');\n        if (!convertedColumnWidth.isValid) {\n            return { isValid: false, errorCode: 'CW_01' };\n        }\n\n        var convertedRowWidths = presenter.convertDimensionsArray(model[\"Rows height\"], validatedRows.value, 'Height');\n        if (!convertedRowWidths.isValid) {\n            return { isValid: false, errorCode: 'RH_01' };\n        }\n\n        var gapWidth = { isSet: false, value: undefined };\n        if (!ModelValidationUtils.isStringEmpty(model[\"Gap width\"])) {\n            var validatedGapWidth = ModelValidationUtils.validatePositiveInteger(model[\"Gap width\"]);\n            if (!validatedGapWidth.isValid) {\n                return { isValid: false, errorCode: 'GW_01' };\n            } else {\n                gapWidth = { isSet: true, value: validatedGapWidth.value };\n            }\n        }\n\n        var isFirstRowHeader = ModelValidationUtils.validateBoolean(model[\"isFirstRowHeader\"]);\n        var isFirstColumnHeader = ModelValidationUtils.validateBoolean(model[\"isFirstColumnHeader\"]);\n\n        var isVisible = ModelValidationUtils.validateBoolean(model[\"Is Visible\"]);\n\n        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);\n\n        return {\n            addonID: model.ID,\n            isValid: true,\n            contents: validatedContents.content,\n            columnsWidths: convertedColumnWidth.dimensions,\n            rowsHeights: convertedRowWidths.dimensions,\n            isVisible: isVisible,\n            isVisibleByDefault: isVisible,\n            isActivity: !ModelValidationUtils.validateBoolean(model[\"Is not an activity\"]),\n            isNotActivity: ModelValidationUtils.validateBoolean(model[\"Is not an activity\"]),\n            isDisabledByDefault: ModelValidationUtils.validateBoolean(model[\"Is disabled\"]),\n            isPunctuationIgnored: ModelValidationUtils.validateBoolean(model[\"Ignore punctuation\"]),\n            isCaseSensitive: ModelValidationUtils.validateBoolean(model[\"Case sensitive\"]),\n            newWidthCalculate: ModelValidationUtils.validateBoolean(model[\"newWidthCalculate\"]),\n            gapWidth: gapWidth,\n            gapType: model[\"Gap Type\"],\n            isTabindexEnabled: isTabindexEnabled,\n            columnsCount: validatedColumns.value,\n            rowsCount: validatedRows.value,\n            langTag: model[\"langAttribute\"],\n            useNumericKeyboard: ModelValidationUtils.validateBoolean(model[\"useNumericKeyboard\"]),\n            keepOriginalOrder: ModelValidationUtils.validateBoolean(model[\"keepOriginalOrder\"]),\n            isFirstRowHeader: isFirstRowHeader,\n            isFirstColumnHeader: isFirstColumnHeader\n        };\n    };\n\n    presenter.addColumnsWidth = function (model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model[\"Columns width\"]) {\n            upgradedModel[\"Columns width\"] = [\n                { Width: \"\" }\n            ];\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addRowHeights = function (model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model[\"Rows height\"]) {\n            upgradedModel[\"Rows height\"] = [\n                { Height: \"\" }\n            ];\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addLangTag = function AddonTable_addLangTag(model) {\n         var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model['langAttribute']) {\n            upgradedModel['langAttribute'] =  '';\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addSpeechTexts = function(model) {\n        var upgradedModel = {};\n        $.extend(true, upgradedModel, model);\n\n        if (!model['speechTexts']) {\n            upgradedModel['speechTexts'] = {\n                Gap: {Gap: \"Gap\"},\n                Dropdown: {Dropdown: \"Dropdown\"},\n                Correct: {Correct: \"Correct\"},\n                Wrong: {Wrong: \"Wrong\"},\n                Empty: {Empty: \"Empty\"},\n                Inserted: {Inserted: \"Inserted\"},\n                Removed: {Removed: \"Removed\"},\n                Cell: {Cell: \"Cell\"}\n            }\n        }\n        return upgradedModel;\n    };\n\n    presenter.addUseNumericKeyboard = function (model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model); // Deep copy of model object\n\n        if(model.useNumericKeyboard === undefined) {\n            upgradedModel[\"useNumericKeyboard\"] = \"False\";\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addKeepOriginalOrder = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model); // Deep copy of model object\n\n        if(model.keepOriginalOrder === undefined) {\n            upgradedModel[\"keepOriginalOrder\"] = \"False\";\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addHeaders = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model);\n\n        if (model.isFirstRowHeader === undefined) {\n            upgradedModel[\"isFirstRowHeader\"] = \"False\";\n        }\n\n        if (model.isFirstColumnHeader === undefined) {\n            upgradedModel[\"isFirstColumnHeader\"] = \"False\";\n        }\n\n        if (model['speechTexts'][\"Row\"] === undefined) {\n            upgradedModel['speechTexts'][\"Row\"] = {Row: \"Row\"};\n        }\n\n        if (model['speechTexts'][\"Column\"] === undefined) {\n            upgradedModel['speechTexts'][\"Column\"] = {Column: \"Column\"};\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.addSpanSpeechTexts = function(model) {\n        var upgradedModel = {};\n        jQuery.extend(true, upgradedModel, model);\n\n        if (model['speechTexts'][\"RowSpan\"] === undefined) {\n            upgradedModel['speechTexts'][\"RowSpan\"] = {RowSpan: \"Row span\"};\n        }\n\n        if (model['speechTexts'][\"ColSpan\"] === undefined) {\n            upgradedModel['speechTexts'][\"ColSpan\"] = {ColSpan: \"Column span\"};\n        }\n\n        return upgradedModel;\n    };\n\n    presenter.upgradeModel = function (model) {\n        var upgradedModel = presenter.addColumnsWidth(model);\n        upgradedModel = presenter.addRowHeights(upgradedModel);\n        upgradedModel = presenter.addLangTag(upgradedModel);\n        upgradedModel = presenter.addSpeechTexts(upgradedModel);\n        upgradedModel = presenter.addUseNumericKeyboard(upgradedModel);\n        upgradedModel = presenter.addKeepOriginalOrder(upgradedModel);\n        upgradedModel = presenter.addHeaders(upgradedModel);\n        upgradedModel = presenter.addSpanSpeechTexts(upgradedModel);\n        return upgradedModel;\n    };\n\n    presenter.setVisibility = function (isVisible) {\n        presenter.$view.css(\"visibility\", isVisible ? \"visible\" : \"hidden\");\n    };\n\n    presenter.show = function () {\n        presenter.setVisibility(true);\n        presenter.configuration.isVisible = true;\n        presenter.enableAllGaps();\n    };\n\n    presenter.hide = function () {\n        presenter.setVisibility(false);\n        presenter.configuration.isVisible = false;\n        presenter.disableAllGaps();\n    };\n\n    presenter.getGapText = function (gapIndex) {\n        return executeFunctionOnGap(gapIndex, \"getGapValueByIndex\");\n    };\n\n    presenter.getGapValue = function (gapIndex) {\n        return presenter.getGapText(gapIndex);\n    };\n\n    presenter.getGapTextCommand = function (params) {\n        return presenter.getGapText(parseInt(params[0], 10));\n    };\n\n    function executeFunctionOnGap(gapIndex, functionToCall) {\n        var validatedGapIndex = presenter.validateGapIndex(gapIndex);\n\n        if (validatedGapIndex.isValid) {\n            return presenter.gapsContainer[functionToCall](validatedGapIndex.index);\n        }\n    }\n\n    presenter.validateGapIndex = function (gapIndex) {\n        if (isNaN(gapIndex) || gapIndex < 1 || gapIndex > presenter.gapsContainer.getLength()) {\n            return {isValid: false};\n        }\n\n        return {\n            isValid: true,\n            index: parseInt(gapIndex, 10) - 1\n        };\n    };\n\n\n    presenter.markGapAsCorrect = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsCorrect\");\n    };\n\n    presenter.markGapAsCorrectCommand = function (params) {\n        presenter.markGapAsCorrect(parseInt(params[0], 10));\n    };\n\n    presenter.markGapAsWrong = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsWrong\");\n    };\n\n    presenter.markGapAsWrongCommand = function (params) {\n        presenter.markGapAsWrong(parseInt(params[0], 10));\n    };\n\n    presenter.markGapAsEmpty = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"markGapByIndexAsEmpty\");\n    };\n\n    presenter.markGapAsEmptyCommand = function (params) {\n        presenter.markGapAsEmpty(parseInt(params[0], 10));\n    };\n\n    presenter.enableGap = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"unlockGapByIndex\");\n    };\n\n    presenter.enableGapCommand = function (params) {\n        presenter.enableGap(parseInt(params[0], 10));\n    };\n\n    presenter.enableAllGaps = function () {\n        presenter.gapsContainer.unlockAllGaps();\n    };\n\n    presenter.disableGap = function (gapIndex) {\n        executeFunctionOnGap(gapIndex, \"lockGapByIndex\");\n    };\n\n    presenter.disableGapCommand = function (params) {\n        presenter.disableGap(parseInt(params[0], 10));\n    };\n\n    presenter.disableAllGaps = function () {\n        presenter.gapsContainer.lockAllGaps();\n    };\n\n    presenter.getView = function() {\n        return presenter.$view;\n    };\n\n    presenter.isAllOK = function() {\n        var score = presenter.getScore();\n        return score === presenter.getMaxScore() && score !== 0;\n    };\n\n    presenter.executeCommand = function (name, params) {\n        var commands = {\n            'disableAllGaps': presenter.disableAllGaps,\n            'disableGap': presenter.disableGapCommand,\n            'enableAllGaps': presenter.enableAllGaps,\n            'enableGap': presenter.enableGapCommand,\n            'getGapText': presenter.getGapTextCommand,\n            'getGapValue': presenter.getGapTextCommand,\n            'getView': presenter.getView,\n            'hide': presenter.hide,\n            'isAllOK': presenter.isAllOK,\n            'isAttempted': presenter.isAttempted,\n            'markGapAsCorrect': presenter.markGapAsCorrectCommand,\n            'markGapAsEmpty': presenter.markGapAsEmptyCommand,\n            'markGapAsWrong': presenter.markGapAsWrongCommand,\n            'show': presenter.show\n        };\n\n        return Commands.dispatch(commands, name, params, presenter);\n    };\n\n    presenter.sendAllOKEvent = function () {\n        var eventData = {\n            'source': presenter.configuration.addonID,\n            'item': 'all',\n            'value': '',\n            'score': ''\n        };\n\n        presenter.eventBus.sendEvent('ValueChanged', eventData);\n    };\n\n    presenter.getMaxScore = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getMaxScore();\n    };\n\n    presenter.getScore = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getScore();\n    };\n\n    presenter.getErrorCount = function () {\n        if (presenter.configuration.isNotActivity) {\n            return 0;\n        }\n\n        if (presenter.gapsContainer === undefined) {\n            return 0;\n        }\n\n        return presenter.gapsContainer.getErrorCount();\n    };\n\n    presenter.setShowErrorsMode = function () {\n        if (!presenter.isSetShowErrorsMode) {\n            presenter.gapsContainer.check();\n            presenter.isSetShowErrorsMode = true;\n        }\n\n        if (isConnectedWithMath) {\n            presenter.gapsContainer.unlockAllGaps();\n            presenter.gapsContainer.lockAllNotEmptyGaps();\n        }\n    };\n\n    presenter.setWorkMode = function () {\n        if (presenter.isSetShowErrorsMode) {\n            presenter.gapsContainer.check();\n            presenter.isSetShowErrorsMode = false;\n        }\n\n        presenter.gapsContainer.removeAllGapsClasses();\n\n        if (isConnectedWithMath) {\n            presenter.gapsContainer.unlockAllGaps();\n        }\n    };\n\n    presenter.createEventData = function (item, value, score) {\n        return {\n            source: presenter.configuration.addonID,\n            item: \"\" + item,\n            value: \"\" + value,\n            score: \"\" + score\n        };\n    };\n\n    presenter.onEventReceived = function (eventName, eventData) {\n        switch (eventName) {\n            case \"ShowAnswers\":\n                presenter.showAnswers();\n                break;\n            case \"HideAnswers\":\n                presenter.hideAnswers();\n                break;\n            case \"GradualShowAnswers\":\n                if (!presenter.isGradualShowAnswersActive) {\n                    presenter.isGradualShowAnswersActive = true;\n                }\n                if (eventData.moduleID === presenter.configuration.addonID) {\n                    presenter.gradualShowAnswers(parseInt(eventData.item, 10));\n                }\n                break;\n            case \"GradualHideAnswers\":\n                presenter.gradualHideAnswers();\n                break;\n            case \"ItemSelected\":\n                if(presenter.configuration.isVisible) {\n                    presenter.lastDraggedItem = eventData;\n                }\n                break;\n            case \"ItemConsumed\":\n                const isEqualToDraggedValue = presenter.lastDraggedItem.value && eventData.value === presenter.lastDraggedItem.value\n                const isEqualToDraggedItem = presenter.lastDraggedItem.item && eventData.item === presenter.lastDraggedItem.item\n\n                if (isEqualToDraggedValue  && isEqualToDraggedItem && presenter.configuration.isVisible) {\n                    presenter.lastDraggedItem = {};\n                }\n                break;\n            default:\n                break;\n            \n        }\n    };\n\n    presenter.showAnswers = function () {\n        if (presenter.configuration.isActivity) {\n            presenter.gapsContainer.showAnswers();\n            presenter.isShowAnswersActive = true;\n            presenter.isSetShowErrorsMode = false;\n            presenter.renderMathJax();\n        } else {\n            if (presenter.isSetShowErrorsMode) {\n                presenter.setWorkMode();\n                \n                if (isConnectedWithMath) {\n                    presenter.disableAllGaps();\n                }\n            }\n        }\n    };\n\n    presenter.hideAnswers = function () {\n        if (!presenter.isShowAnswersActive) {\n            return;\n        }\n\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            presenter.gapsContainer.hideAnswers();\n            if (isConnectedWithMath){\n                presenter.gapsContainer.unlockAllGaps();\n            }\n            presenter.isShowAnswersActive = false;\n            presenter.isSetShowErrorsMode = false;\n            presenter.renderMathJax();\n        }\n    };\n\n    presenter.getCSSConfiguration = function () {\n        return {\n            correct: \"ic_gap-correct\",\n            wrong: \"ic_gap-wrong\",\n            showAnswers: \"ic_gap-show-answers\",\n            block: \"ic_gap-empty\",\n            droppableHover: \"table-addon-gap-highlight\"\n        };\n    };\n\n    presenter.GapUtils = function (configuration) {\n        if(!presenter.isPreview){\n            DraggableDroppableObject.call(this, configuration, presenter.getCSSConfiguration());\n        }\n\n        this.gapScore = configuration.gapScore;\n        this.gapType = presenter.GapUtils.GAP_TYPE.NORMAL;\n        this.isDisabled = false;\n        this.isEnabled = true;\n        this.mathShowAnswersValue = \"\";\n        this.mathCSSClass = \"math-answer\";\n        this.valueChangeObserver = new presenter.ValueChangeObserver();\n        this.isAttempted = false;\n    };\n\n    presenter.GapUtils.prototype = Object.create(DraggableDroppableObject.prototype);\n    presenter.GapUtils.parent = DraggableDroppableObject.prototype;\n\n    presenter.GapUtils.GAP_TYPE = {\n        NORMAL: 0,\n        SELECT: 1\n    };\n\n    presenter.GapUtils.prototype.getParsedCorrectAnswers = function () {\n        return this.showAnswersValue.map(function (value) {\n            return this.parseValue(value);\n        }, this);\n    };\n\n    presenter.GapUtils.prototype.getParsedValue = function () {\n        return this.parseValue(this.getValue());\n    };\n\n    presenter.GapUtils.prototype.isCorrect = function () {\n        var correctAnswers = this.getParsedCorrectAnswers();\n        var value = this.getParsedValue();\n\n        return (correctAnswers.indexOf(value) !== -1);\n    };\n\n    presenter.GapUtils.prototype.parseValue = function (value) {\n        if(presenter.hasMathGaps()) {\n            return value;\n        }\n\n        if (!presenter.configuration.isCaseSensitive) {\n            value = value.toLowerCase();\n        }\n\n        if (presenter.configuration.isPunctuationIgnored) {\n            value = value.replace(/\\W/g, '');\n        }\n\n        return value.trim();\n    };\n\n    presenter.GapUtils.prototype.isValueEmpty = function () {\n        var value = this.getValue().trim();\n        return value.length === 0 || (this.gapType===1 && 0 === value.localeCompare(\"---\")); //gapType===1 is the dropdown gap\n    };\n\n    presenter.GapUtils.prototype.setCssOnCorrect = function () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        DraggableDroppableObject.prototype.setCssOnCorrect.call(this);\n    };\n\n    presenter.GapUtils.prototype.setCssOnUnCorrect = function () {\n        this.removeAllClasses();\n    };\n\n    presenter.GapUtils.prototype.onBlock = function () {\n        if (!this.isDisabled) {\n            this.lock();\n        }\n    };\n\n    presenter.GapUtils.prototype.onUnblock = function () {\n        if (this.isDisabled && this.isEnabled) {\n            this.unlock();\n        }\n    };\n\n    presenter.GapUtils.prototype.onCorrect = function () {\n        this.onBlock();\n    };\n\n    presenter.GapUtils.prototype.onUnCorrect = function () {\n        this.onUnblock();\n    };\n\n    presenter.GapUtils.prototype.onWrong = function () {\n        this.onBlock();\n    };\n\n    presenter.GapUtils.prototype.onUnWrong = function () {\n        this.onUnblock();\n    };\n\n    presenter.GapUtils.prototype.setCssOnWrong = function () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        if (this.isValueEmpty()) {\n            this.addCssClass('ic_gap-empty');\n            return;\n        }\n\n        DraggableDroppableObject.prototype.setCssOnWrong.call(this);\n    };\n\n    presenter.GapUtils.prototype.setCssOnUnWrong = function () {\n        this.removeAllClasses();\n    };\n\n    presenter.GapUtils.prototype.setCssOnShowAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            DraggableDroppableObject.prototype.setCssOnShowAnswers.call(this);\n        }\n\n        if (isConnectedWithMath) {\n            this.addCssClass(this.mathCSSClass);\n        }\n    };\n\n    presenter.GapUtils.prototype.setCssOnHideAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            DraggableDroppableObject.prototype.setCssOnHideAnswers.call(this);\n    \t}\n\n        if (isConnectedWithMath) {\n            this.removeCssClass(this.mathCSSClass);\n        }\n    };\n\n    presenter.GapUtils.prototype.onShowAnswers = function () {\n        if (presenter.configuration.isActivity) {\n            this.onBlock();\n            this.setViewValue(this.showAnswersValue[0]);\n        }\n\n        if (isConnectedWithMath) {\n            this.onBlock();\n            this.setViewValue(this.mathShowAnswersValue);\n        }\n    };\n\n    presenter.GapUtils.prototype.onHideAnswers = function () {\n        if (presenter.configuration.isActivity || isConnectedWithMath) {\n            this.setViewValue(this.value);\n            this.onUnblock();\n        }\n    };\n\n    presenter.GapUtils.prototype.setGapWidth = function () {\n        if (presenter.configuration.gapWidth.isSet && !presenter.isPreview) {\n            this.$view.width(presenter.configuration.gapWidth.value + 'px');\n        }\n    };\n\n    presenter.GapUtils.prototype.removeAllClasses = function () {\n        this.removeCssClass('ic_gap-correct');\n        this.removeCssClass('ic_gap-wrong');\n        this.removeCssClass('ic_gap-empty');\n    };\n\n    presenter.GapUtils.prototype.getScore = function () {\n        return this.isCorrect() ? this.gapScore : 0;\n    };\n\n    presenter.GapUtils.prototype.getErrorCount = function () {\n        if (this.getValue().trim() === \"\") {\n            return 0;\n        }\n\n        return this.isCorrect() ? 0 : 1;\n    };\n\n    presenter.GapUtils.prototype.notify = function () {\n        if (this.isValueEmpty()) {\n            this.isAttempted = false;\n        } else {\n            this.isAttempted = true;\n        }\n\n        this.valueChangeObserver.notify(this.getValueChangeEventData());\n    };\n\n    /**\n     *\n     * @returns {{objectID: (string|*), isCorrect: boolean, value: string}}\n     */\n    presenter.GapUtils.prototype.getValueChangeEventData = function () {\n        return {\n            objectID: this.getObjectID(),\n            isCorrect: this.isCorrect(),\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.setIsEnabled = function (isEnabled) {\n        if (this.isDisabled && isEnabled) {\n            this.unlock();\n        }\n\n        if (!this.isDisabled && !isEnabled) {\n            this.lock();\n        }\n\n        this.isEnabled = isEnabled;\n    };\n\n    presenter.GapUtils.prototype.setMathShowAnswersValue = function (value) {\n        this.mathShowAnswersValue = value;\n    };\n\n    presenter.GapUtils.prototype.getGapState = function () {\n        return {\n            isAttempted: this.isAttempted,\n            isEnabled: this.isEnabled,\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.getState = function () {\n        return {\n            droppedElement: this.getDroppedElement(),\n            isAttempted: this.isAttempted,\n            item: this.getSource(),\n            value: this.getValue()\n        };\n    };\n\n    presenter.GapUtils.prototype.setState = function (configuration) {\n        var value = configuration.value;\n        var source = configuration.source;\n        var isEnabled = configuration.isEnabled;\n        var droppedElement = configuration.droppable;\n        this.isAttempted = configuration.isAttempted === undefined ? false : configuration.isAttempted;\n\n        if (presenter.configuration.gapType === \"draggable\") {\n            DraggableDroppableObject.prototype.setState.call(this, value, source, droppedElement);\n        } else {\n            this.value = value;\n            this.source = source;\n            this.setViewValue(value);\n        }\n\n        if (isEnabled !== undefined) {\n            this.setIsEnabled(isEnabled);\n        }\n    };\n\n    presenter.GapUtils.prototype.onReset = function () {\n        DraggableDroppableObject.prototype.onReset.call(this);\n\n        if (presenter.configuration.isDisabledByDefault) {\n            this.setIsEnabled(false);\n        } else {\n            this.setIsEnabled(true);\n        }\n\n        this.removeAllClasses();\n        this.removeCssClass(\"gapFilled\");\n        this.isAttempted = false;\n    };\n\n    presenter.GapUtils.prototype.setAttempted = function (value) {\n        this.isAttempted = value;\n    };\n\n\n    presenter.SelectGap = function (htmlID, correctAnswer, gapScore) {\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n\n            showAnswersValue: correctAnswer,\n\n            connectEvents: presenter.SelectGap.prototype.connectEvents,\n            setViewValue: presenter.SelectGap.prototype.setViewValue,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n\n        this.gapType = presenter.GapUtils.GAP_TYPE.SELECT;\n        this.setGapWidth();\n    };\n\n    presenter.SelectGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.SelectGap.constructor = presenter.SelectGap;\n\n    presenter.SelectGap.prototype.connectEvents = function () {\n        this.$view.off('change').bind('change', this.onEdit.bind(this));\n    };\n\n    presenter.SelectGap.prototype.onEdit = function (event) {\n        this.notifyEdit();\n        this.value = this.$view.find(\":selected\").text();\n        this.notify();\n    };\n\n    presenter.SelectGap.prototype.setViewValue = function (value) {\n        var escaped = presenter.textParser.escapeXMLEntities(value);\n        this.$view.val(escaped);\n    };\n\n    presenter.SelectGap.prototype.lock = function () {\n        this.isDisabled = true;\n        this.$view.attr('disabled','disabled');\n    };\n\n    presenter.SelectGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        this.$view.removeAttr('disabled');\n    };\n\n    presenter.gapsAnswers = [];\n\n    function addGapAnswers(htmlID, correctAnswer) {\n        var isInTable = false;\n        for (var i = 0; i < presenter.gapsAnswers.length; i++){\n            if(presenter.gapsAnswers[i].id === htmlID){\n                isInTable = true;\n            }\n        }\n\n        if(!isInTable){\n            presenter.gapsAnswers.push({id: htmlID, answers: correctAnswer});\n        }\n    }\n\n    presenter.EditableInputGap = function (htmlID, correctAnswer, gapScore) {\n        addGapAnswers(htmlID, correctAnswer);\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n\n            showAnswersValue: correctAnswer,\n\n            createView: presenter.EditableInputGap.prototype.createView,\n            connectEvents: this.connectEvents,\n            setViewValue: presenter.EditableInputGap.prototype.setViewValue,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n        this.setGapWidth();\n    };\n\n    presenter.EditableInputGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.EditableInputGap.constructor = presenter.EditableInputGap;\n\n    presenter.EditableInputGap.prototype.connectEvents = function () {\n        this.$view.on(\"input\", this.onEdit.bind(this));\n        this.$view.on(\"blur\", this.blurHandler.bind(this));\n        this.$view.on('keyup', this.onKeyUp.bind(this));\n        this.$view.on(\"keypress\", this.onKeyPress.bind(this));\n        this.$view.off('change').bind('change', this.onEdit.bind(this));\n    };\n\n    presenter.EditableInputGap.prototype.createView = function () {\n        if (presenter.hasMathGaps()) {\n            return $(presenter.$view).find(\"input[id='\"+this.objectID+\"']\");\n        }else{\n            var inputType = \"text\";\n            if (presenter.configuration.useNumericKeyboard) {\n                inputType = \"tel\";\n            }\n            var $inputGap = $('<input type=\"' + inputType + '\" value=\"\" id=\"' + this.objectID + '\" />');\n            $inputGap.css({\n                width: presenter.configuration.gapWidth + \"px\"\n            });\n\n            $inputGap.addClass(\"ic_gap\");\n            if (presenter.configuration.useNumericKeyboard) {\n                $inputGap.attr(\"step\", \"any\");\n            }\n\n            return $inputGap;\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onKeyUp = function(event) {\n        event.stopPropagation();\n        if (presenter.configuration.useNumericKeyboard) {\n            var newText = String(event.target.value);\n            var pattern = StringUtils.getNumericPattern();\n            if (newText.length > 0 && !newText.match(pattern)) {\n                var patternWithoutLastCharacter = pattern.slice(0, -1);\n                var regExp = RegExp(patternWithoutLastCharacter);\n                var match = regExp.exec(newText);\n\n                if (match) {\n                    this.setViewValue(match[0]);\n                } else {\n                    this.setViewValue(\"\");\n                }\n                this.value = this.getViewValue();\n            }\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onKeyPress = function(event) {\n        event.stopPropagation();\n        if (presenter.configuration.useNumericKeyboard) {\n            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n            var selectionStartIdx = event.target.selectionStart;\n            var selectionEndIdx = event.target.selectionEnd;\n            var oldText = String(event.target.value);\n            var newText = oldText.substring(0, selectionStartIdx)\n                            + key\n                            + oldText.substring(selectionEndIdx);\n            var pattern = StringUtils.getNumericPattern();\n            if (!newText.match(pattern)) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    presenter.EditableInputGap.prototype.onEdit = function (event) {\n        this.notifyEdit();\n        this.value = this.getViewValue();\n    };\n\n    presenter.EditableInputGap.prototype.blurHandler = function (event) {\n        this.notify();\n    };\n\n    presenter.EditableInputGap.prototype.getViewValue = function () {\n        return this.$view.val();\n    };\n\n    presenter.EditableInputGap.prototype.lock = function () {\n        this.isDisabled = true;\n        this.$view.attr('disabled','disabled');\n    };\n\n    presenter.EditableInputGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        this.$view.removeAttr('disabled');\n    };\n\n    presenter.EditableInputGap.prototype.getValue = function () {\n        return this.value;\n    };\n\n    presenter.EditableInputGap.prototype.setViewValue = function (value) {\n        return this.$view.val(value);\n    };\n\n    presenter.DraggableDroppableGap = function (htmlID, correctAnswers, gapScore) {\n        var configuration = {\n            addonID: presenter.configuration.addonID,\n            objectID: htmlID,\n            eventBus: presenter.eventBus,\n            getSelectedItem: presenter.getSelectedItem,\n            createView: presenter.DraggableDroppableGap.prototype.createView,\n\n            showAnswersValue: correctAnswers,\n            fillGap: presenter.DraggableDroppableGap.prototype.fillGap,\n            makeGapEmpty: presenter.DraggableDroppableGap.prototype.makeGapEmpty,\n\n            gapScore: gapScore\n        };\n\n        presenter.GapUtils.call(this, configuration);\n        this.setGapWidth();\n    };\n\n    presenter.DraggableDroppableGap.prototype = Object.create(presenter.GapUtils.prototype);\n    presenter.DraggableDroppableGap.parent = presenter.GapUtils.prototype;\n    presenter.DraggableDroppableGap.constructor = presenter.DraggableDroppableGap;\n\n    presenter.DraggableDroppableGap.prototype.createView = function () {\n        var $view = DraggableDroppableObject.prototype.createView.call(this);\n\n        $view.css({\n            width: presenter.configuration.gapWidth + \"px\",\n            display: 'inline-block'\n        });\n\n        $view.addClass(\"draggable-gap\");\n        $view.addClass(\"ic_gap\");\n\n        return $view;\n    };\n\n    presenter.DraggableDroppableGap.prototype.lock = function () {\n        this.isDisabled = true;\n        DraggableDroppableObject.prototype.lock.call(this);\n    };\n\n    presenter.DraggableDroppableGap.prototype.unlock = function () {\n        this.isDisabled = false;\n        DraggableDroppableObject.prototype.unlock.call(this);\n    };\n\n    presenter.DraggableDroppableGap.prototype.fillGap = function (selectedItem) {\n        DraggableDroppableObject.prototype.fillGap.call(this, selectedItem);\n        this.addCssClass(\"gapFilled\");\n        this.notify();\n\n        presenter.renderMathJax();\n        presenter.rerenderMathJax();\n    };\n\n    presenter.DraggableDroppableGap.prototype.makeGapEmpty = function () {\n        DraggableDroppableObject.prototype.makeGapEmpty.call(this);\n        this.removeCssClass(\"gapFilled\");\n        this.notify();\n    };\n\n    presenter.GapsContainerObject = function () {\n        this.gaps = [];\n    };\n\n    presenter.GapsContainerObject.prototype.addGap = function (gap) {\n        this.gaps.push(gap);\n    };\n\n    presenter.GapsContainerObject.prototype.replaceDOMViewWithGap = function () {\n        this.gaps.filter(function (gap) {\n            return gap.gapType === presenter.GapUtils.GAP_TYPE.NORMAL;\n        }).forEach(function (gap) {\n            var gapID = \"#\" + gap.getObjectID(),\n                element = presenter.$view.find(gapID),\n                placeholder = element.attr(\"placeholder\");\n\n            element.replaceWith(gap.getView());\n            element = presenter.$view.find(gapID);\n            if(placeholder) {\n                element.attr(\"placeholder\", placeholder);\n                element.removeClass(\"ic_gap\").addClass(\"ic_filled_gap\");\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.replaceGapsDOMWithView = function () {\n        this.gaps.forEach(function (gap) {\n            gap.$view = presenter.$view.find(\"#\" + gap.getObjectID());\n            if(!presenter.isPreview){\n                gap.connectEvents();\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.removeAllGapsClasses = function () {\n        this.gaps.forEach(function (gap) {\n            gap.removeAllClasses();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.check = function (isSetShow) {\n        this.gaps.forEach(function (gap) {\n            gap.check(isSetShow);\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.showAnswers = function () {\n        this.gaps.forEach(function (gap) {\n            gap.showAnswers();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.showAnswer = function (item) {\n        this.gaps[item].showAnswers();\n    }\n\n    presenter.GapsContainerObject.prototype.showAnswersMath = function () {\n        this.gaps.forEach(function (gap) {\n            if(gap.mathShowAnswersValue !== \"\"){\n                gap.showAnswers();\n            }else{\n                gap.lock();\n            }\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.hideAnswers = function () {\n        this.gaps.forEach(function (gap) {\n            gap.hideAnswers();\n            gap.removeAllClasses();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.reset = function () {\n        this.gaps.forEach(function (gap) {\n            gap.reset();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.getErrorCount = function () {\n        return this.gaps.reduce(function (errorCount, gap) {\n            return errorCount += gap.getErrorCount();\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.getScore = function () {\n        return this.gaps.reduce(function (score, gap) {\n            return score += gap.getScore();\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.getMaxScore = function () {\n        return this.gaps.reduce(function (maxScore, gap) {\n            return maxScore += gap.gapScore;\n        }, 0);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexWithClass = function (index, cssClass) {\n        this.gaps[index].removeAllClasses();\n        this.gaps[index].addCssClass(cssClass);\n        this.gaps[index].notifyEdit();\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsCorrect = function (index) {\n        this.markGapByIndexWithClass(index, this.gaps[index].correctCSS);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsWrong = function (index) {\n        this.markGapByIndexWithClass(index, this.gaps[index].wrongCSS);\n    };\n\n    presenter.GapsContainerObject.prototype.markGapByIndexAsEmpty = function (index) {\n        this.markGapByIndexWithClass(index, 'ic_gap-empty');\n    };\n\n    presenter.GapsContainerObject.prototype.getLength = function () {\n        return this.gaps.length;\n    };\n\n    presenter.GapsContainerObject.prototype.getGapValueByIndex = function (index) {\n        return this.gaps[index].getValue();\n    };\n\n    presenter.GapsContainerObject.prototype.setLockGapByIndex = function (index, lock) {\n        this.gaps[index].setIsEnabled(lock);\n        this.gaps[index].notifyEdit();\n    };\n\n    presenter.GapsContainerObject.prototype.lockGapByIndex = function (index) {\n        this.setLockGapByIndex(index, false);\n    };\n\n    presenter.GapsContainerObject.prototype.unlockGapByIndex = function (index) {\n        this.setLockGapByIndex(index, true);\n    };\n\n    presenter.GapsContainerObject.prototype.unlockAllGaps = function () {\n        this.gaps.map(function (gap, index) {\n            this.unlockGapByIndex(index);\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.lockAllGaps = function () {\n        this.gaps.map(function (gap, index) {\n            this.lockGapByIndex(index);\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.lockAllNotEmptyGaps = function () {\n        this.gaps.map(function (gap, index) {\n            if(!gap.isValueEmpty()){\n                this.lockGapByIndex(index);\n            }\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.getGapIndexByObjectID = function (objectID) {\n        for (var index = 0; index < this.gaps.length; index++) {\n            if (this.gaps[index].getObjectID() === objectID) {\n                return (index + 1);\n            }\n        }\n    };\n\n    presenter.GapsContainerObject.prototype.getGapsState = function () {\n        return this.gaps.map(function (gap) {\n            return gap.getGapState();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.getState = function () {\n        return this.gaps.map(function (gap) {\n            return gap.getState();\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.setGapsState = function (state) {\n        state.map(function (stateData, index) {\n            var configuration = {\n                droppedElement: undefined,\n                isAttempted: stateData.isAttempted === undefined ? false : stateData.isAttempted,\n                isEnabled: stateData.isEnabled,\n                source: \"\",\n                value: stateData.value\n            };\n\n            this.gaps[index].setState(configuration);\n            this.gaps[index].$view.trigger('change');\n        }, this);\n    };\n\n    presenter.GapsContainerObject.prototype.setSpansState = function (state, undefinedAttr) {\n        if ((state !== undefinedAttr) && (state !== null)) {\n            state.map(function (stateData, index) {\n                var configuration = {\n                    value: stateData.value,\n                    source: stateData.item,\n                    isEnabled: undefined,\n                    droppedElement: stateData.droppedElement\n                };\n\n                this.gaps[index].setState(configuration);\n\n                if (stateData.value === \"\") {\n                    this.gaps[index].destroyDraggableProperty();\n                }else{\n                    this.gaps[index].addCssClass(\"gapFilled\");\n                }\n\n            }, this);\n        }\n    };\n\n    presenter.GapsContainerObject.prototype.setMathShowAnswersValueByGapIndex = function (index, value) {\n        this.gaps[index].setMathShowAnswersValue(value);\n    };\n\n    presenter.GapsContainerObject.prototype.isGapAttempted = function (index) {\n        return this.gaps[index].isAttempted;\n    };\n\n    presenter.GapsContainerObject.prototype.isAnyGapAttempted = function () {\n        return this.gaps.some(function (gap) {\n            return gap.isAttempted;\n        });\n    };\n\n    presenter.GapsContainerObject.prototype.setIsAttemptedByGapId = function(objectID, value) {\n        for (var index = 0; index < this.gaps.length; index++) {\n            if (this.gaps[index].getObjectID() === objectID) {\n                this.gaps[index].setAttempted(value);\n                break;\n            }\n        }\n    };\n\n\n    presenter.ValueChangeObserver = function () {};\n\n    presenter.ValueChangeObserver.prototype.notify = function (data) {\n        presenter.eventBus.sendEvent('ValueChanged', this.getEventData(data));\n\n        if (presenter.isAllOK()) presenter.sendAllOKEvent();\n    };\n\n    presenter.ValueChangeObserver.prototype.getEventData = function (data) {\n        return {\n            score: data.isCorrect ? \"1\" : \"0\",\n            value: data.value,\n            source: presenter.configuration.addonID,\n            item: presenter.gapsContainer.getGapIndexByObjectID(data.objectID)\n        };\n    };\n\n    presenter.isActivity = function () {\n        return presenter.configuration.isActivity;\n    };\n\n    presenter.setMathShowAnswersCounter = function (counter) {\n        presenter.configuration.mathShowAnswersCounter = counter;\n    };\n\n    presenter.tickMathCounter = function () {\n        if (presenter.configuration.mathShowAnswersCounter) {\n            presenter.configuration.mathShowAnswersCounter = presenter.configuration.mathShowAnswersCounter - 1;\n        }\n    };\n\n    presenter.shouldTriggerMathShowAnswers = function () {\n        return presenter.configuration.mathShowAnswersCounter === 0;\n    };\n\n    //showAnswers from Math\n    presenter.setGapAnswer = function (gapIndex, answer, counter) {\n        if (presenter.configuration.mathShowAnswersCounter === undefined) {\n            presenter.setMathShowAnswersCounter(counter);\n        }\n\n        presenter.gapsContainer.setMathShowAnswersValueByGapIndex((gapIndex - 1), answer);\n\n        presenter.tickMathCounter();\n\n        if (presenter.shouldTriggerMathShowAnswers()) {\n            presenter.gapsContainer.removeAllGapsClasses();\n            presenter.gapsContainer.showAnswersMath();\n            presenter.setMathShowAnswersCounter(counter);\n        }\n    };\n\n    //hideAnswers from Math\n    //hideAnswers is called anyway so just void function\n    presenter.setUserValue = function () {};\n\n    presenter.markConnectionWithMath = function() {\n        isConnectedWithMath = true;\n        presenter.isConnectedWithMath = true;\n    };\n\n    presenter.getValue = function (index) {\n        return presenter.gapsContainer.getGapValueByIndex((index-1))\n    };\n\n    presenter.renderMathJax = function () {\n        MathJax.CallBack.Queue().Push(function () {\n            MathJax.Hub.Typeset(presenter.$view.find(\".table-addon-wrapper\")[0]);\n        });\n    };\n\n    presenter.rerenderMathJax = function () {\n        MathJax.CallBack.Queue().Push(function () {\n            MathJax.Hub.Rerender(presenter.$view.find(\".table-addon-wrapper\")[0]);\n        });\n    };\n\n    function TableKeyboardController (elements, columnsCount, rowsCount) {\n        var newElements = accountForMergedCells(elements, columnsCount, rowsCount);\n        KeyboardController.call(this, newElements, columnsCount);\n        this.rowsCount = rowsCount;\n    }\n\n    function accountForMergedCells(elements, columnsCount, rowsCount) {\n        if (columnsCount === undefined || rowsCount === undefined ||\n            elements.length === 0 || elements[0].getAttribute === undefined) return elements;\n        var elementsArray = Array.from(Array(rowsCount), () => new Array(columnsCount));\n        var i = 0;\n        for (var ri = 0; ri < rowsCount; ri++) {\n            for (var ci = 0; ci < columnsCount; ci++) {\n                if (elementsArray[ri][ci] === undefined && i < elements.length) {\n                    var element = elements[i];\n                    i++;\n                    var colNumber = getColspan(element);\n                    var rowNumber = getRowspan(element);\n                    for (var rj = 0; rj < rowNumber; rj++) {\n                        for (var cj = 0; cj < colNumber; cj++) {\n                            var newColIndex = ci + cj;\n                            var newRowIndex = ri + rj;\n                            if (newRowIndex < rowsCount && newColIndex < columnsCount) {\n                                elementsArray[newRowIndex][newColIndex] = element;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        var newElements = [];\n        for (var i = 0; i < rowsCount; i++) newElements = newElements.concat(elementsArray[i]);\n        return newElements;\n    }\n\n    function getColspan(element) {\n        return getAttributeNumberValue(element, \"colspan\", 1);\n    }\n\n    function getRowspan(element) {\n        return getAttributeNumberValue(element, \"rowspan\", 1);\n    }\n\n    function getAttributeNumberValue(element, attributeName, defaultValue) {\n        if (element.getAttribute(attributeName)!= null && !isNaN(element.getAttribute(attributeName))) {\n            return new Number(element.getAttribute(attributeName));\n        } else {\n            return defaultValue;\n        }\n    }\n\n    TableKeyboardController.prototype.reload = function (elements, columnsCount, rowsCount) {\n        var newElements = accountForMergedCells(elements, columnsCount, rowsCount);\n        KeyboardController.prototype.reload.call(this, newElements, columnsCount);\n    }\n\n    TableKeyboardController.prototype = Object.create(window.KeyboardController.prototype);\n    TableKeyboardController.prototype.constructor = TableKeyboardController;\n\n    TableKeyboardController.prototype.select = function (event) {\n        event.preventDefault();\n        presenter.addWhiteSpaceToValue();\n        if (presenter.gapNavigation && presenter.configuration.gapType === 'draggable' && presenter.getCurrentGapsNumber() > 0) {\n            var $gap = presenter.getGap(presenter.gapIndex);\n\n            if (!$gap || !$gap.is('span')) return;\n\n            var oldVal = $gap.text();\n            $gap.click();\n            var value = $gap.text();\n\n            if (0 !== oldVal.localeCompare(value)) {\n                var data = [];\n                if (value) {\n                    data.push(window.TTSUtils.getTextVoiceObject(value, presenter.configuration.langTag));\n                    data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.inserted));\n                } else {\n                    data.push(window.TTSUtils.getTextVoiceObject(oldVal, presenter.configuration.langTag));\n                    data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.removed));\n                }\n                presenter.speak(data);\n            }\n        }\n    };\n\n    presenter.addWhiteSpaceToValue = function () {\n        if (!presenter.getGap(presenter.gapIndex)) return;\n\n        var gap = presenter.getGap(presenter.gapIndex)[0];\n        var classNames = ['ic_filled_gap', 'ic_gap'];\n        var isInputTypeGap = classNames.some(className => gap.classList.contains(className));\n        if (!gap || !isInputTypeGap) return;\n\n        var oldValue = gap.value;\n        $(gap).val(`${oldValue} `);\n    }\n\n    TableKeyboardController.prototype.mark =  function (element) {\n        KeyboardController.prototype.mark.call(this, element);\n        this.getTarget(element, false).focus();\n    };\n\n    TableKeyboardController.prototype.unmark = function (element) {\n        KeyboardController.prototype.unmark.call(this, element);\n        this.getTarget(element, false).blur();\n    };\n\n    presenter.buildKeyboardController = function () {\n        presenter.keyboardControllerObject = new TableKeyboardController(presenter.getElementsForKeyboardNavigation(), presenter.configuration.columnsCount, presenter.configuration.rowsCount);\n    };\n\n    presenter.getElementsForKeyboardNavigation = function () {\n        return presenter.$view.find('.table_cell');\n    };\n\n    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {\n        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);\n    };\n\n    TableKeyboardController.prototype.getTarget = function (element, willBeClicked){\n        return $(element);\n    };\n\n    TableKeyboardController.prototype.escape = function (event) {\n        if (presenter.gapNavigation) {\n            if (event) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            presenter.gapNavigation = false;\n            presenter.clearCurrentCell();\n            presenter.readCurrentCellTitle();\n        } else {\n            // must be set to false, otherwise module won't exit navigation\n            presenter.addonKeyboardNavigationActive = false;\n            KeyboardController.prototype.escape.call(this, event);\n        }\n    };\n\n    TableKeyboardController.prototype.enter = function (event){\n        KeyboardController.prototype.enter.call(this, event);\n\n        if (presenter.addonKeyboardNavigationActive && !presenter.gapNavigation) {\n            presenter.gapNavigation = true;\n            presenter.selectGap(0);\n        }\n        if (!presenter.addonKeyboardNavigationActive){\n            presenter.addonKeyboardNavigationActive = true;\n            presenter.readCurrentCellTitle();\n        } else {\n            presenter.readCurrentNavigationElement();\n        }\n    }\n\n    KeyboardController.prototype.switchElement = function (move) {\n        var new_position_index = this.keyboardNavigationCurrentElementIndex + move;\n        if (new_position_index >= this.keyboardNavigationElementsLen) {\n            new_position_index = new_position_index - this.keyboardNavigationElementsLen;\n        } else if (new_position_index < 0) {\n            new_position_index = this.keyboardNavigationElementsLen + new_position_index;\n        }\n        if (this.keyboardNavigationCurrentElement === this.keyboardNavigationElements[new_position_index]\n            && this.keyboardNavigationCurrentElementIndex != new_position_index) {\n                this.keyboardNavigationCurrentElementIndex = new_position_index;\n                if (move == this.columnsCount || move == -1 * this.columnsCount) {\n                    if (new_position_index + move >=0 && new_position_index + move < this.keyboardNavigationElementsLen) {\n                        this.switchElement(move);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                } else {\n                if (move < 0) {\n                    if (new_position_index % this.columnsCount != 0) {\n                        this.switchElement(-1);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                } else {\n                    if (new_position_index % this.columnsCount != this.columnsCount - 1) {\n                        this.switchElement(1);\n                    } else {\n                        this.markCurrentElement(new_position_index);\n                    }\n                }\n            }\n        } else {\n            this.markCurrentElement(new_position_index);\n        }\n    };\n\n    presenter.readCurrentNavigationElement = function() {\n        var html = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n        var data = window.TTSUtils.getTextVoiceArrayFromElementWithGaps(html, presenter.configuration.langTag, presenter.speechTexts);\n        presenter.speak(data);\n    };\n\n    presenter.readCurrentCellTitle = function() {\n        var row = Math.floor(presenter.keyboardControllerObject.keyboardNavigationCurrentElementIndex / presenter.configuration.columnsCount);\n        var column = presenter.keyboardControllerObject.keyboardNavigationCurrentElementIndex % presenter.configuration.columnsCount;\n        var element = presenter.keyboardControllerObject.keyboardNavigationCurrentElement;\n        var rowSpan = getRowspan(element);\n        var colSpan = getColspan(element);\n\n        if (rowSpan != 1 || colSpan != 1) {\n            var classNames = element.className.split(' ');\n            for (var i = 0; i < classNames.length; i++) {\n                var className = classNames[i];\n                if (className.startsWith('col_')) {\n                    var numberString = className.replace('col_', '').trim();\n                    if (numberString.length > 0 && !isNaN(numberString)) column = new Number(numberString) - 1;\n                }\n                if (className.startsWith('row_')) {\n                    var numberString = className.replace('row_', '').trim();\n                    if (numberString.length > 0 && !isNaN(numberString)) row = new Number(numberString) - 1;\n                }\n            }\n        }\n        var alphabet = \"ABCDEFGHIJKLMNOPRSTUWXYZ\";\n        var content = presenter.speechTexts.cell + \" \" + alphabet[column % alphabet.length] + \" \" + (row+1);\n        var data = [window.TTSUtils.getTextVoiceObject(content)];\n        if (rowSpan > 1) {\n            data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.rowSpan+\" \"+rowSpan));\n        }\n        if (colSpan > 1) {\n            data.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.colSpan+\" \"+colSpan));\n        }\n        if (presenter.configuration.isFirstRowHeader) {\n            data = data.concat(getCellHeaderUtterances('.row_1.col_'+(column+1), presenter.speechTexts.column));\n        }\n        if (presenter.configuration.isFirstColumnHeader) {\n            data = data.concat(getCellHeaderUtterances('.col_1.row_'+(row+1), presenter.speechTexts.row));\n        }\n        presenter.speak(data);\n    };\n\n    function getCellHeaderUtterances(headerSelector, headerTypeSpeechText) {\n        var data = [];\n        var html = presenter.$view.find(headerSelector);\n        if (html.length > 0) {\n            var headerContent = window.TTSUtils.getTextVoiceArrayFromElementWithGaps(html, presenter.configuration.langTag, presenter.speechTexts);\n            if (headerContent.length > 0) {\n                data.push(window.TTSUtils.getTextVoiceObject(headerTypeSpeechText));\n                data = data.concat(headerContent);\n            }\n        }\n        return data;\n    }\n\n    // TAB or Right Arrow\n    TableKeyboardController.prototype.nextElement = function (event) {\n        if(event.keyCode === 9) { //TAB\n            this.handleTab(event);\n            event.preventDefault();\n            return;\n        }\n\n        if (presenter.gapNavigation){\n            presenter.switchSelectedValue(1);\n            return;\n        }\n\n        event.preventDefault();\n\n        if (this.keyboardNavigationCurrentElementIndex % this.columnsCount === this.columnsCount - 1) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(1);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    // SHIFT+TAB or Left Arrow\n    TableKeyboardController.prototype.previousElement = function (event) {\n        if(event.keyCode === 9) { //TAB\n            this.handleTab(event);\n            return;\n        }\n\n        if (presenter.gapNavigation){\n            presenter.switchSelectedValue(-1);\n            return;\n        }\n\n        event.preventDefault();\n\n        if (this.keyboardNavigationCurrentElementIndex % this.columnsCount === 0) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(-1);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    TableKeyboardController.prototype.handleTab = function (event) {\n        if (presenter.getCurrentGapsNumber() > 0) {\n            if (!presenter.gapNavigation) {\n                presenter.gapNavigation = true;\n                presenter.selectGap(0);\n            } else {\n                if ( !event.shiftKey ) {\n                    presenter.selectGap(presenter.gapIndex + 1);\n                } else {\n                    presenter.selectGap(presenter.gapIndex - 1);\n                }\n            }\n\n            var $gap = presenter.getGap(presenter.gapIndex);\n            var $cell = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n            var data = window.TTSUtils.getTextVoiceArrayFromGap($gap, $cell, presenter.configuration.langTag, presenter.speechTexts);\n            presenter.speak(data);\n\n        }\n\n    };\n\n    // UP Arrow\n    TableKeyboardController.prototype.previousRow = function (event) {\n        if (presenter.gapNavigation) {\n            presenter.switchSelectedValue(-1);\n            return;\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (Math.floor(this.keyboardNavigationCurrentElementIndex / this.columnsCount) === 0) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(-this.columnsCount);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    // DOWN Arrow\n    TableKeyboardController.prototype.nextRow = function (event) {\n        if (presenter.gapNavigation) {\n            presenter.switchSelectedValue(1);\n            return;\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (Math.floor(this.keyboardNavigationCurrentElementIndex / this.columnsCount) === this.rowsCount - 1) {\n            presenter.readCurrentCellTitle();\n        } else {\n            this.switchElement(this.columnsCount);\n            presenter.readCurrentCellTitle();\n        }\n    };\n\n    function getTableKeyboardController() {\n        return TableKeyboardController;\n    }\n\n    getTableKeyboardController().prototype.exitWCAGMode = function () {\n        presenter.gapNavigation = false;\n        presenter.clearCurrentCell();\n        presenter.addonKeyboardNavigationActive = false;\n        KeyboardController.prototype.exitWCAGMode.call(this);\n    };\n\n    presenter.getTextToSpeechOrNull = function AddonTable_getTextToSpeechOrNull(playerController) {\n        if (playerController) {\n            return playerController.getModule('Text_To_Speech1');\n        }\n\n        return null;\n    };\n\n    presenter.setWCAGStatus = function AddonTable_setWCAGStatus(isOn) {\n        presenter.isWCAGOn = isOn;\n    };\n\n    presenter.speak = function AddonTable_speak(data) {\n        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);\n        if (tts && presenter.isWCAGOn) {\n            tts.speak(data);\n        }\n    };\n\n    presenter.isDeactivationBlocked = function() {\n        return presenter.addonKeyboardNavigationActive || presenter.gapNavigation;\n    };\n\n    presenter.getCurrentGapsNumber = function() {\n        return $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap').length;\n    };\n\n    presenter.clearCurrentCell = function() {\n        var $cell = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement);\n        $cell.find('.keyboard_navigation_active_element').removeClass('keyboard_navigation_active_element');\n        if ($cell.find('input:focus').length > 0) {\n            $cell.find('input:focus').blur();\n        }\n    };\n\n    presenter.getGap = function (index) {\n        var $gaps = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap');\n        if ($gaps.length === 0) return;\n        if (index < 0) index = 0;\n        if (index >= $gaps.length) index = $gaps.length-1;\n        return $gaps.eq(index);\n    };\n\n    presenter.selectGap = function(index) {\n        var $gaps = $(presenter.keyboardControllerObject.keyboardNavigationCurrentElement).find('.ic_gap, ic_inlineChoice, .ic_filled_gap');\n        if ($gaps.length === 0) return;\n        if(index < 0) index = 0;\n        if(index >= $gaps.length) index = $gaps.length - 1;\n        var $gap = $gaps.eq(index);\n\n        presenter.clearCurrentCell();\n        $gap.addClass('keyboard_navigation_active_element');\n\n        presenter.gapIndex = index;\n        if ($gap.is('input')) {\n            $gap.focus();\n        }\n    };\n\n    presenter.switchSelectedValue = function(move) {\n        if(presenter.isShowAnswersActive || presenter.isSetShowErrorsMode) return;\n        var $gap = presenter.getGap(presenter.gapIndex);\n\n        if (!$gap || !$gap.is('select')) return;\n\n        var index = $gap.prop(\"selectedIndex\");\n        var optionSize = $gap.find('option').size();\n        index = index + move;\n\n        if (0 <= index && index < optionSize) {\n            $gap.prop(\"selectedIndex\", index);\n            $gap.change();\n            var value = $gap.val();\n            if (value.length === 0 || value === '-' || value === '---') {\n                var data = [window.TTSUtils.getTextVoiceObject(presenter.speechTexts.empty)];\n            } else {\n                var data = [window.TTSUtils.getTextVoiceObject($gap.val(), presenter.configuration.langTag)];\n            }\n            presenter.speak(data);\n        }\n    };\n\n    /**\n    * @method isAttempted method returning if user has interacted with addon\n    * @return boolean\n    */\n    presenter.isAttempted = function AddonTable_isAttempted () {\n        if (presenter.configuration.isNotActivity) {\n            return true;\n        }\n\n        return presenter.gapsContainer.getLength() === 0 ? true : presenter.gapsContainer.isAnyGapAttempted();\n    };\n\n\n    /**\n     * @param gapIndex - index of gap to check\n     * @returns boolean\n     */\n    presenter.isGapAttempted = function AddonTableisGapAttempted (gapIndex) {\n        if (gapIndex > 0) {\n            gapIndex = gapIndex - 1;\n        }\n\n        return presenter.gapsContainer.isGapAttempted(gapIndex);\n    };\n\n    presenter.PRINTABLE_STATE_MODE = {\n        EMPTY: 0,\n        SHOW_ANSWERS: 1,\n        SHOW_USER_ANSWERS: 2,\n        CHECK_ANSWERS: 3\n    };\n\n    function isPrintableShowAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;\n    }\n    function isPrintableShowUserAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;\n    }\n    function isPrintableCheckAnswersStateMode() {\n        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;\n    }\n    function isPrintableStateMode() {\n        return isPrintableShowUserAnswersStateMode() || isPrintableCheckAnswersStateMode();\n    }\n\n    presenter.setPrintableState = function(state) {\n        if (state === null || ModelValidationUtils.isStringEmpty(state))\n            return;\n        presenter.printableState = JSON.parse(state);\n    }\n\n    presenter.setPrintableController = function(controller) {\n        presenter.textParser = new TextParserProxy(controller.getTextParser());\n    }\n\n    function chosePrintableStateMode(showAnswers) {\n        if (presenter.printableState) {\n            if (showAnswers)\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;\n            else\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;\n        } else {\n            if (showAnswers)\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;\n            else\n                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;\n        }\n    }\n\n    presenter.setPrintableAsyncCallback = function(id, callback) {\n        presenter.printableParserID = id;\n        presenter.printableParserCallback = callback;\n    }\n\n    presenter.isPrintableAsync = function() {\n        return true;\n    }\n\n    presenter.hasMathGaps = function() {\n        return presenter.configuration.gapType === 'math';\n    }\n\n    presenter.getPrintableHTML = function(model, showAnswers) {\n        presenter.configuration = presenter.validateModel(presenter.upgradeModel(model));\n        chosePrintableStateMode(showAnswers);\n        createPrintableHTMLStructure(model);\n\n        presenter.$view.addClass(\"printable_module\");\n        const clone = presenter.$view.clone();\n        clone.attr('id', presenter.printableParserID);\n\n        if (presenter.hasMathGaps()) {\n            presenter.transformMathGaps();\n        } else {\n            // normal gaps don't need additional parsing like math gaps, this just notifies callback asynchronusly\n            setTimeout(function() {\n                const result = parsePrintableGaps(presenter.$view[0].outerHTML);\n\n                presenter.notifyParserCallback(result);\n            }, 0);\n        }\n\n        return clone[0].outerHTML;\n\n    };\n\n    function createPrintableHTMLStructure(model) {\n        createPrintableHTMLWrapper(model);\n        var $table = presenter.generateTable(presenter.configuration.contents, false);\n        presenter.$wrapper.append($table);\n    }\n\n    function createPrintableHTMLWrapper(model) {\n        presenter.$view = $('<div></div>');\n        presenter.$view.attr(\"id\", model.ID);\n        presenter.$view.addClass('printable_addon_Table');\n        presenter.$view.css('max-width', model.Width + 'px');\n        presenter.$wrapper = $('<div></div>');\n        presenter.$wrapper.addClass('table-addon-wrapper');\n        presenter.$view.append(presenter.$wrapper);\n\n        presenter.$view.addClass(getViewClassesBasedOnMode());\n    }\n\n    function getViewClassesBasedOnMode() {\n        switch(presenter.printableStateMode) {\n            case presenter.PRINTABLE_STATE_MODE.EMPTY: {\n                return \"printable_addon_Table-empty-mode\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS: {\n                return \"printable_addon_Table-show-answers\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS: {\n                return \"printable_addon_Table-show-user-answers\";\n            }\n            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS: {\n                return \"printable_addon_Table-check-answers\";\n            }\n        }\n\n    }\n\n    function matchGap(gapRegex, textToSearch, closingSignGapSize) {\n        let closingBracketIndex = 0;\n\n        let gapMatch = textToSearch.match(gapRegex);\n        if (gapMatch == null)\n            return [];\n\n        const gapsMatches = [];\n        while (gapMatch != null) {\n            const textWithoutFoundGapBeginning = textToSearch.substring(gapMatch.index + gapMatch[0].length);\n\n            closingBracketIndex = presenter.textParser.findClosingBracket(textWithoutFoundGapBeginning);\n            if (closingBracketIndex > 0) {\n                const gapEndIndex = gapMatch.index + gapMatch[0].length + closingBracketIndex + closingSignGapSize;\n                const wholeGapTextToTheEndingBracket = textToSearch.substring(gapMatch.index, gapEndIndex);\n                // ex: \\gap{lorem|ispum|\\(\\frac{1}{4}\\)}\n                gapsMatches.push(wholeGapTextToTheEndingBracket);\n                textToSearch = textToSearch.substring(gapEndIndex);\n            } else {\n                // gap has no ending bracket, so syntax is broken and in fact it doesn't contain gap, ex:\n                // \\gap{lorem|ispum|\\(\\frac{1}{4}\\)\n                break;\n            }\n\n            gapMatch = textToSearch.match(gapRegex);\n        }\n\n        return gapsMatches;\n    }\n\n    function matchGapAndFilledGap(html) {\n        const gapsRegex = /\\\\gap{|\\\\filledGap{/;\n        return matchGap(gapsRegex, html, \"}\".length);\n    }\n\n    function matchDropdownGap(html) {\n        // match last {{ ex. \\frac{1}{{{gap_definition}}} will match last two \"{{\" from \"{{{\"\n        const gapRegex = /{{(?!{)/;\n        return matchGap(gapRegex, html, \"}}\".length);\n    }\n\n    function parsePrintableGaps (html) {\n        let gapsMatches = matchGapAndFilledGap(html);\n        gapsMatches = gapsMatches.concat(matchDropdownGap(html));\n\n        const tablePrintableOptions = indexRegexMatchesBaseOnGapsTypes(gapsMatches);\n        for (let i = 0; i < tablePrintableOptions.length; i++) {\n            const tablePrintableOption = tablePrintableOptions[i];\n            const optionHTML = tablePrintableOption.getPrintableHTML();\n            html = html.replace(tablePrintableOption.text, optionHTML);\n        }\n        return html;\n    }\n\n    /**\n     To properly parse math gaps, gaps need to be transformed to special syntax \\gap{id|width|size|{{value:value}}\n     and it needs to be passed into mathjax processor.\n     Then gaps will be changed to html inputs which can be transformed into proper printable gap html\n     */\n    presenter.transformMathGaps = function() {\n        let result = parsePrintableMathGaps(presenter.$view[0].outerHTML);\n        presenter.$view.html(result.html);\n\n        function mathJaxTypesetEnd() {\n            // replace each input with its corresponding gap html\n            presenter.$view.find('input').each(function (index, element) {\n                let html = result.printableOptions[index].getPrintableHTML();\n                $(this).replaceWith(html);\n            });\n\n            presenter.notifyParserCallback(presenter.$view[0].outerHTML);\n        }\n\n        const args = [];\n        args.push(\"Typeset\", MathJax.Hub, presenter.$view[0]);\n        args.push(mathJaxTypesetEnd);\n        MathJax.Hub.Queue(args);\n    }\n\n    presenter.notifyParserCallback = function (outerHTML) {\n        presenter.printableStateMode = null;\n\n        presenter.printableParserCallback(\n            presenter.textParser.parseAltTexts(outerHTML)\n        );\n    }\n\n    function parsePrintableMathGaps(html) {\n        const gapsMatches = matchGapAndFilledGap(html);\n        const tablePrintableOptions = indexRegexMatchesBaseOnGapsTypes(gapsMatches);\n\n        // replace normal gap syntax with math gap syntax\n        for (let i = 0; i < gapsMatches.length; i++) {\n            const match = gapsMatches[i];\n            const gapId = `${presenter.configuration.addonID}-${i}`;\n            html = html.replace(match, generateMathGap(gapId, presenter.configuration.gapWidth.value));\n        }\n\n        return {\n            printableOptions: tablePrintableOptions,\n            html: html\n        }\n    }\n\n    function indexRegexMatchesBaseOnGapsTypes(gapsMatches) {\n        const normalGapRegex = /\\\\gap{.*?}/g,\n            filledGapRegex = /\\\\filledGap{.*?}/g,\n            dropdownGapRegex = /{{.*?}}/g;\n        var tablePrintableOptions = [],\n            stateIndex = 0,\n            isMatchesGapType,\n            gapMatch,\n            gapMatchIndex;\n\n        for (gapMatchIndex = 0; gapMatchIndex < gapsMatches.length; gapMatchIndex++) {\n            gapMatch = gapsMatches[gapMatchIndex];\n\n            isMatchesGapType = gapMatch.match(normalGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableNormalGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                )\n                stateIndex += 1;\n                continue;\n            }\n\n            isMatchesGapType = gapMatch.match(filledGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableFilledGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                )\n                stateIndex += 1;\n            }\n        }\n        for (gapMatchIndex = 0; gapMatchIndex < gapsMatches.length; gapMatchIndex++) {\n            gapMatch = gapsMatches[gapMatchIndex];\n\n            isMatchesGapType = gapMatch.match(dropdownGapRegex);\n            if (isMatchesGapType != null) {\n                tablePrintableOptions.push(\n                    new TablePrintableDropdownGapOption(\n                        gapMatch,\n                        stateIndex\n                    )\n                );\n                stateIndex += 1;\n            }\n        }\n        return tablePrintableOptions;\n    }\n\n    function getTextWidthInPixels(html) {\n        var $outerLessonWrapper = $(\"<div></div>\");\n        $outerLessonWrapper.css(\"position\", \"absolute\");\n        $outerLessonWrapper.css(\"visibility\", \"hidden\");\n        $outerLessonWrapper.addClass(\"printable_lesson\");\n\n        var $outerPageWrapper = $(\"<div></div>\");\n        $outerPageWrapper.addClass(\"printable_page\");\n        $outerLessonWrapper.append($outerPageWrapper);\n\n        var $outerModuleWrapper = $(\"<div></div>\");\n        $outerModuleWrapper.addClass(\"printable_module\");\n        $outerModuleWrapper.addClass(\"printable_addon_Table\");\n        $outerPageWrapper.append($outerModuleWrapper);\n\n        var $wrapper = $(\"<div></div>\");\n\t\t$wrapper.css(\"margin\", \"0px\");\n\t\t$wrapper.css(\"padding\", \"0px\");\n\t\t$wrapper.addClass(\"printable_gap\");\n\t\t$outerModuleWrapper.append($wrapper);\n\n\t\t$wrapper.html(html);\n\t\t$(\"body\").append($outerLessonWrapper);\n\t\tvar width = $wrapper[0].getBoundingClientRect().width;\n\t\t$outerLessonWrapper.detach();\n\t\treturn width;\n    }\n\n    presenter.gradualShowAnswers = function(item) {\n        presenter.gapsContainer.showAnswer(item);\n        presenter.renderMathJax();\n    }\n\n    presenter.gradualHideAnswers = function() {\n         presenter.gapsContainer.hideAnswers();\n         presenter.renderMathJax();\n         presenter.isGradualShowAnswersActive = false;\n    }\n\n    presenter.getActivitiesCount = function () {\n        return presenter.gapsContainer.getLength();\n    }\n\n    /**\n    * TablePrintableOption\n    * */\n    function TablePrintableOption (text, stateID) {\n        this.text = text;\n        this.stateID = stateID;\n        this.options = [];\n    }\n\n    TablePrintableOption.prototype = Object.create(Object.prototype);\n    TablePrintableOption.prototype.constructor = TablePrintableOption;\n\n    TablePrintableOption.prototype.getPrintableGapSignHTML = function() {\n        var $signSpan = $(\"<span></span>\");\n        if (this.hasCorrectAnswer()) {\n            $signSpan.addClass(\"printable_gap_correct\");\n        } else {\n            $signSpan.addClass(\"printable_gap_wrong\");\n        }\n        return $signSpan[0].outerHTML;\n    }\n\n    /**\n     * TablePrintableEditableGapOption\n     */\n\n    /**\n     * @param text\n     * @param stateID\n     * @constructor\n     */\n    function TablePrintableEditableGapOption (text, stateID) {\n        TablePrintableOption.call(this, text, stateID)\n        this.initialValue = \"\";\n        this.correctAnswer = \"\";\n    }\n\n    TablePrintableEditableGapOption.prototype = Object.create(TablePrintableOption.prototype);\n    TablePrintableEditableGapOption.prototype.constructor = TablePrintableEditableGapOption;\n\n    TablePrintableEditableGapOption.prototype.getPrintableHTML = function () {\n        this.getGapTextData();\n        var gapInnerText = this.generateInnerText();\n        var gapHTML = this.generateGapHTML(gapInnerText);\n        if (isPrintableCheckAnswersStateMode() && this.hasAnswer()) {\n            gapHTML += this.getPrintableGapSignHTML();\n        }\n        return gapHTML;\n    }\n\n    TablePrintableEditableGapOption.prototype.getAnswer = function () {\n        const gapState = presenter.printableState.gaps[this.stateID];\n        return gapState === undefined ? null : gapState.value;\n    }\n\n    TablePrintableEditableGapOption.prototype.hasCorrectAnswer = function () {\n        return this.correctAnswer === this.getAnswer();\n    }\n\n    TablePrintableEditableGapOption.prototype.hasAnswer = function () {\n        return this.getAnswer() !== \"\" && this.getAnswer() !== null;\n    }\n\n    TablePrintableEditableGapOption.prototype.generateInnerText = function() {\n        switch(presenter.printableStateMode) {\n            case presenter.PRINTABLE_STATE_MODE.EMPTY: {\n                return this.generateInnerTextForEmptyStateMode();\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS: {\n                return this.correctAnswer;\n            }\n            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS:\n            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS: {\n                return this.hasAnswer() ? this.getAnswer() : this.generateInnerTextForEmptyStateMode();\n            }\n        }\n    }\n\n    TablePrintableEditableGapOption.prototype.generateInnerTextForEmptyStateMode = function(){\n        var longestAnswer = \"\";\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.options[i].length > longestAnswer.length) {\n                longestAnswer = this.options[i];\n            }\n        }\n        if (longestAnswer.length === 0)\n            longestAnswer = \"&nbsp;&nbsp;&nbsp;\";\n\n        var gapWidth = 0;\n        if (presenter.configuration.gapWidth.isSet) {\n            gapWidth = presenter.configuration.gapWidth.value;\n        } else {\n            gapWidth = getTextWidthInPixels(longestAnswer);\n        }\n\n        var value = this.initialValue;\n        var initialValueLength = 0;\n        if (this.initialValue.length > 0) {\n            initialValueLength = getTextWidthInPixels(this.initialValue);\n        }\n\n        var spaceWidth = getTextWidthInPixels('&nbsp;');\n        var spaceCount = Math.ceil((gapWidth - initialValueLength) / spaceWidth);\n        var maxSplitFreeWidth = 50; //must be at least minSplitSize * 2\n        var minSplitSize = 20;\n\n        if (spaceCount > maxSplitFreeWidth) {\n            for (i = 0; i < minSplitSize; i++) {\n                value += \"&nbsp;\";\n            }\n\n            var nextNbsp = false;\n            for (i = 0; i < spaceCount - 2 * minSplitSize; i++) {\n                if (nextNbsp) {\n                    value += \"&nbsp;\";\n                } else {\n                    value += \" \";\n                }\n                nextNbsp = !nextNbsp;\n            }\n\n            for (i = 0; i < minSplitSize; i++) {\n                value += \"&nbsp;\";\n            }\n        } else {\n            for (i = 0; i < spaceCount; i++) {\n                value += \"&nbsp;\";\n            }\n        }\n        return value;\n    }\n\n    TablePrintableEditableGapOption.prototype.generateGapHTML = function(gapInnerText) {\n        const $span = $(\"<span></span>\");\n        const classes = presenter.hasMathGaps() ? \"printable_gap printable_math_gap\" : \"printable_gap\";\n        $span.addClass(classes);\n        $span.html(gapInnerText);\n        return $span[0].outerHTML;\n    }\n\n    /**\n     * TablePrintableNormalGapOption\n     */\n\n    function TablePrintableNormalGapOption (text, stateID) {\n        TablePrintableEditableGapOption.call(this, text, stateID)\n    }\n\n    TablePrintableNormalGapOption.prototype = Object.create(TablePrintableEditableGapOption.prototype);\n    TablePrintableNormalGapOption.prototype.constructor = TablePrintableNormalGapOption;\n\n    TablePrintableNormalGapOption.prototype.getGapTextData = function() {\n        // remove \"\\\\gap{\" and last \"}\"\n        this.options = this.text.replace(\"\\\\gap{\", \"\").replace(/}$/, \"\").split(\"|\");\n        this.correctAnswer = this.options[0];\n    }\n\n\n    /**\n     * TablePrintableFilledGapOption\n     */\n\n    function TablePrintableFilledGapOption (text, stateID) {\n        TablePrintableEditableGapOption.call(this, text, stateID)\n    }\n\n    TablePrintableFilledGapOption.prototype = Object.create(TablePrintableEditableGapOption.prototype);\n    TablePrintableFilledGapOption.prototype.constructor = TablePrintableFilledGapOption;\n\n    TablePrintableFilledGapOption.prototype.getGapTextData = function() {\n        this.options = this.text.replace(\"\\\\filledGap{\", \"\").replace(/}$/, \"\").split(\"|\");\n        this.correctAnswer = this.options[1];\n        this.initialValue = this.options.splice(0, 1)[0];\n    }\n\n    /**\n    * TablePrintableDropdownGapOption\n    * */\n\n    function TablePrintableDropdownGapOption (text, stateID) {\n        TablePrintableOption.call(this, text, stateID);\n        this.correctOptionRegex = /[0-9]*?:/;\n        this.correctOptionIndex = null;\n        this.chosenOptionIndex = null;\n    }\n\n    TablePrintableDropdownGapOption.prototype = Object.create(TablePrintableOption.prototype);\n    TablePrintableDropdownGapOption.prototype.constructor = TablePrintableDropdownGapOption;\n\n    TablePrintableDropdownGapOption.prototype.getPrintableHTML = function() {\n        this.getGapTextData();\n        if (!presenter.configuration.keepOriginalOrder)\n            this.sortOptions();\n        this.findCorrectOptionIndex();\n        this.removeScoreInformationFromCorrectOption();\n\n        if (isPrintableStateMode())\n            this.findChosenOptionIndex();\n\n        var gapHTML = this.generateGapHTML();\n        if (isPrintableCheckAnswersStateMode() && this.hasAnswer()){\n            gapHTML += this.getPrintableGapSignHTML();\n        }\n        return gapHTML;\n    }\n\n    TablePrintableDropdownGapOption.prototype.getAnswer = function () {\n        return this.chosenOptionIndex;\n    }\n\n    TablePrintableDropdownGapOption.prototype.hasAnswer = function () {\n        return this.chosenOptionIndex !== null;\n    }\n\n    TablePrintableDropdownGapOption.prototype.hasCorrectAnswer = function () {\n        return this.chosenOptionIndex === this.correctOptionIndex;\n    }\n\n    TablePrintableDropdownGapOption.prototype.getGapTextData = function() {\n        this.options = this.text.replace(\"{{\",\"\").replace(\"}}\",\"\").split(\"|\");\n    }\n\n    TablePrintableDropdownGapOption.prototype.sortOptions = function() {\n        this.options.sort(function(a,b){\n            return a.replace(this.correctOptionRegex, \"\").localeCompare(b.replace(this.correctOptionRegex, \"\"));\n        }.bind(this));\n    }\n\n    TablePrintableDropdownGapOption.prototype.findCorrectOptionIndex = function() {\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.correctOptionRegex.test(this.options[i])) {\n                this.correctOptionIndex = i;\n                return;\n            }\n        }\n    }\n\n    TablePrintableDropdownGapOption.prototype.removeScoreInformationFromCorrectOption = function() {\n        this.options[this.correctOptionIndex]\n            = this.options[this.correctOptionIndex].replace(this.correctOptionRegex, \"\");\n    }\n\n    TablePrintableDropdownGapOption.prototype.findChosenOptionIndex = function() {\n        const gapState = presenter.printableState.gaps[this.stateID];\n        const gapValue = gapState === undefined ? null : gapState.value;\n        for (var i = 0; i < this.options.length; i++) {\n            if (this.options[i] === gapValue) {\n                this.chosenOptionIndex = i;\n                return;\n            }\n        }\n    }\n\n    TablePrintableDropdownGapOption.prototype.generateGapHTML = function() {\n        var $span = $(\"<span></span>\");\n        $span.addClass(\"printable_gap\");\n\n        if (isPrintableShowAnswersStateMode()) {\n            $span.html(this.options[this.correctOptionIndex]);\n            this.options[this.correctOptionIndex] = $span[0].outerHTML;\n        } else if (isPrintableStateMode()) {\n            $span.html(this.options[this.chosenOptionIndex]);\n            this.options[this.chosenOptionIndex] = $span[0].outerHTML;\n        }\n        return this.options.join(\" / \");\n    }\n\n    return presenter;\n}\n", "2022-12-09 Fixed XSS vulnerabilities in Table and tts-utils\n2022-12-09 Fixed XSS vulnerabilities in some addons\n2022-12-08 Fixed script and module-script asset getting relative urls when not appropriate\n2022-11-28 Added ModuleScript property\n2022-11-25 Removed pause while reading syntax about time for TTS\n2022-11-25 Fixed TTS reading an extra comma when alt text with dot is present at the end of a list element  \n2022-11-25 Fixed no break in tts at the end of a line of text.\n2022-11-14 Fixed support for only one audio type in slideshow addon\n2022-11-10 Added grid size and rulers position separation\n2022-11-07 Added worksWithAll property to eKeyboard\n2022-11-03 Fixed bug with reading whole HTML elements instead of their content in TTS for Text Coloring\n2022-11-03 Added LottiePlayer module\n2022-11-03 Added support for eraser mode in Text Coloring's keyboard controller\n2022-11-03 Fixed hidden GSA button showing up on keyboard navigation bug\n2022-11-03 Fixed gradual show answers in the Magic Boxes\n2022-11-03 Fixed absence of reading A with a colon in TTS\n2022-11-03 Fixed grad show answers in the PointsLines\n2022-10-28 Fixed no printable_module-className classes assigned to asynchronously loaded addons in print\n2022-10-28 Fixed Lesson Progress and PlayerUtils returning a different scaled score\n2022-10-28 Fixed calculating total score in the Hierarchical Lesson Report\n2022-10-25 Fixed Text Selection quitting from show answers on getState\n2022-10-20 Fixed multiplegap countItem sometimes returning wrong value\n2022-10-20 Fixed bug with self-increasing text on IOS\n2022-10-20 Fixed outstretchHeight command not working properly with static header\n2022-10-14 Added methods for accessing correct/incorrect/partial/empty feedbacks to the Automatic Feedback addon\n2022-10-10 Added Enlarge Button to header in present view\n2022-10-07 Fixed Media Recorder show/hide not affecting addon's main div element \n2022-10-06 Fixed downloading zip package for Android mLibro app\n2022-10-06 Fixed tts not reading numbers of ordered lists\n2022-10-06 Fixed functionality of \"Force Load Audio\" in Audio on IOS\n2022-10-06 Added new page property to block page splitting in print\n2022-09-27 Fixed bug where Table would steal events from other addons when it was hidden\n2022-09-27 Added getView() to Ordering module\n2022-09-23 Added disable axis lock property to the Ordering module\n2022-09-23 Added GSA ignoring addons with is activity set  to false\n2022-09-15 Added value attribute in AddonProperty\n2022-09-09 Added xss prevention and secured Wiris addon against xss attacks\n2022-09-08 Fixed bug where it was possible to insert one draggable element into gaps in multiple Table addons\n2022-09-05 Fixed displaying of model answer in the Crossword\n2022-09-02 Fixed GSA functionality for empty model answers in the Paragraph\n2022-09-02 Fixed reading text separator in gap text.\n2022-09-02 Fixed Media Recorder deleting recordings on check answers and play blocking in certain conditions\n2022-08-31 Added external library injection support\n2022-08-29 Added page_id to paginated score\n2022-08-29 Fixed recording problem in recorder when M1 processor is used\n2022-08-25 Fixed outstretchHeight command not working properly with layout argument\n2022-08-19 Fixed keyboard navigation throught link gaps\n2022-08-19 Updated setGapText method to fix indexation\n2022-08-19 Fixed not sending the \"start\" event the first time a recording is played in Media Recorder\n2022-08-19 Fixed displaying answers in Figure Drawing\n2022-08-18 Fixed bug with audio not playing properly on IOS WebView in Media Recorder\n2022-08-11 Added GSA support to Magic Boxes\n2022-08-11 Fixed the CSS class in AudioPlaylist breaking the appearance of addon\n2022-08-05 Removed static editor notification\n2022-08-05 Fixed getActivitiesCount method in Connection\n2022-08-05 Added IsNotActivity property to Puzzle\n2022-08-05 Added new method setGapText to the Text module\n2022-08-05 Fixed Paragraph not hiding editable placeholder content\n2022-08-05 Fixed XLIFF export not working with Hierarchical Lesson Report and Catch modules\n2022-08-05 Added option of reading individual sentences with TTS\n2022-08-03 Added gap binder addon\n2022-07-26 Fixed Math hiding answers on getState call\n2022-07-26 Fixed Paragraph hiding answers on getState call\n2022-07-25 Fixed Double State Button not calling events when placed in dynamic dom elements\n2022-07-21 Added Depth Of Expand property to Hierarchical Table Of Contents\n2022-07-20 Added ResetOnPageChange property to Automatic Feedback\n2022-07-20 Added new parameter layoutName to outstretchHeight function\n2022-07-19 Fixed Text TTS skipping commas when gap is present\n2022-07-19 Fixed direct cross-origin calls in several places in the app\n2022-07-15 Added TTS support to Magic Boxes\n2022-07-15 Changed Cross Lesson model validation to allow check only by LessonID\n2022-07-14 Fixed Assessment Navigation Bar not receiving Show/Hide answers event\n2022-07-12 Upgraded Zoom Image destroy to close module when changing layout\n2022-07-12 Fixed ANB not adding \"inactive\" class\n2022-07-11 Added new property Page has not been reset to the Reset Button speech text\n2022-07-08 Correct checking user answer in Table\n2022-07-07 Fixed MathJax not rendering in editor\n2022-07-05 Fixed Multigap MathJax element doubling on iOS\n2022-07-05 Added TTS support to FlashCards\n2022-07-05 Added \"Not assignable\" property to page\n2022-07-05 Added keyboard navigation to the Confirm dialog in Reset Button\n2022-07-01 New Addon Speechace\n2022-06-28 Added Keyboard Navigation + TTS to Hierarchical Table Of Contents\n2022-06-24 Added support for audio speed controller in keyboard navigation and TTS in Text Audio addon\n2022-06-24 Added TTS support to Automatic Feedback\n2022-06-24 Added keyboard navigation and TTS to Limited Reset\n2022-06-24 Added keyboard navigation and TTS to Gradual Show Answer\n2022-06-23 Added support for audio speed controller in keyboard navigation and TTS in Text Audio addon\n2022-06-23 Added keyboard navigation and TTS to External Link Button\n2022-06-23 Add Keyboard Navigation and TTS to Text Coloring addon\n2022-06-17 Added keyboard navigation and TTS to Audio Playlist\n2022-06-17 Fixed TTS in Text Gaps not reseting index after quitting Keyboard Navigation\n2022-06-17 Fixed TTS Dictionary not being parsed after lesson template update\n2022-06-10 Changed playback speed text in Audio\n2022-06-09 Added placeholder to Paragraph Keyboard addon\n2022-06-09 Changed Media Recorder TTS text for stop recording\n2022-06-09 Added keyboard navigation and TTS to Crossword\n2022-06-06 Removed redundant blank lines for paragraph\n2022-06-02 Fixed editing gaps in Table\n2022-06-02 Fixed Assessments Navigation Bar not adding \"inactive\" class\n2027-06-01 Fixed color not being retained by the Text Coloring addon if you leave the page in check answers mode\n2022-05-31 Fixed Crossword auto-navigation ignoring fixed word orientation\n2022-05-31 Cross Lesson change logic with CheckUserAccess\n2022-05-27 Fixed NextPageButton and PrevPageButton triggering click twice on moodle on iOS\n2022-05-24 Fix display ZoomImage in mobile\n2022-05-24 Fix Drawing.uploadImage command not working on Safari iOS\n2022-05-20 Changed Show Answers property from single string to multiple correct answers in Addon Paragraph\n2022-05-20 Block strict letters in Crossword\n2022-05-20 TTS keyboard navigation no longer ignores disabled addons\n2022-05-20 Add new property to CrossLesson addon - check access to cross lesson in LMS mCourser\n2022-05-19 Fixed Crossword improper answers on Gradual Show Answers\n2022-05-18 Added React to Script in the Automatic Feedback addon\n2022-05-16 Added an event when Editable Window is closed\n2022-05-13 Added Show Answers property to Paragraph Keyboard\n2022-05-13 Implemented extended auto navigation for addon Crossword\n2022-05-13 Fixed problem with unchecking in limited check and check combinations\n2022-05-13 Added Audio support to Ordering Addon\n2022-05-13 Add keyboard navigation and text-to-speech to Paragraph addon\n2022-05-13 Fixed setAllPagesAsVisited command resetting previously visited pages\n2022-05-12 Added Speech Text Dictionary to the Editor\n2022-05-06 Add keyboard navigation and tts to editable window\n2022-05-06 Fixed problem with printable version of Text module when audio added to text\n2022-05-06 Fixed not working properly TTS in Text Selection addon when langAttribute not defined\n2022-05-06 Fixed Text-selection not working properly with text formatting\n2022-05-06 Added Audio support to Choice Addon\n2022-04-26 Added File Sender addon\n2022-04-21 Fixed Media Recorder removing recordings and resetting time on reset property\n2022-04-19 Fixed too many Media Recorders blocking audio in Chrome\n2022-04-12 Added ability to define CSS classes for Assessments navigation bar addon sections\n2022-04-06 Fixed Paragraph not setting content properly on page change with show answers active\n2022-04-06 Fixed problem with SourceList module\n2022-04-04 Fixed Limited Hide Answers not un-clicking on Limited Check\n2022-04-01 Fixed visible lines after hide and show\\hide answers in Points and Lines addon\n2022-04-01 Fixed commands to bookmark and unbookmark pages not visible in Assessments_Navigation_Bar addon\n2022-04-01 Fixed Text with draggable gaps not able to fill gaps other than first with keyboard navigation.\n2022-04-01 Changed Text-selection logic on clicks outside selectable elements\n2022-04-01 Fixed Text-selection clicking between available selections with multiSelect selects both of them\n2022-04-01 Fixed incorrect width of Connections middle column when images are present\n2022-04-01 Fixed Paragraph not resetting properly during Limited Show Answers on Limited Reset\n2022-04-01 Added keyboard navigation and tts to CrossLesson module\n2022-03-29 Added keyboard navigation and TTS to Media Recorder\n2022-03-14 Fixed video speed controls adding whenever reset was called\n2022-03-14 Added TTS to Table of Contents\n2022-03-04 Added SrtParser to commons. Added audio narration loading from SRT File to AddonAudio addon\n2022-03-04 Added TTS and Keyboard Navigation support for links in the Text\n2022-03-01 Added second hand to Clock Addon\n2022-02-22 Added removing only incorrect answers in Coloring and Figure Drawing\n2022-02-14 Add TTS to Assessment Navigation Bar\n2022-02-11 Fixed remaining ErrorsMode in Single State Button\n2022-02-02 Fixed Addon containing special chars in its ID\n2022-01-28 HTMLEditor public with new feature - editable text field\n2022-01-26 Fixed Media Recorder not recording/playing on mLibro on iOS devices \n2022-01-24 Fixed video addon progress bar issues on mobiles - fullscreen changed first click and offset between click and actual\n2022-01-12 Added setAllPagesAsVisited command\n2022-01-10 Fixed issue with module ids including non-letter/number signs\n2022-01-04 Added new properties to youtube addon - time video starts and autoplay checkbox\n2021-12-27 Fix visibility of TextColoring on reset and restoring by state\n2021-12-20 Change audio format from wav to mp3 in MediaRecorder addon\n2021-12-15 Added event on blur in Paragraph Keyboard addon\n2021-12-14 Added audio speed controller to Audio Playlist\n2021-12-14 Prevent from adding the dragging class to checked element in Multiple Gap\n2021-12-14 Skipping image in keyboard navigation\n2021-12-13 Added video speed controller to the Video\n2021-12-09 Added nested addons\n2021-11-19 Improve of Addon Coloring performance while reset on firefox\n2021-11-17 Added audio speed controller to the Text Audio\n2021-11-17 Added disabling of analyser in media recorder on safari due to conflicts with recorder\n2021-11-16 Fixed behaviour of text gap when flag ignorePlaceholder is set and placeholder equals actual answer\n2021-11-05 Add dontSendEvent param to select/deselect commands in Addon ImageIdentification\n2021-11-05 Fixed popup absolute position according to absolute parent\n2021-11-04 Separation of the help buttons in the Quiz addon\n2021-11-03 Fixed reopening eKeyboard after closing on the ESC button clicked\n2021-10-22 Fixed flashcard audio after finished record not returning to play state\n2021-10-20 Add new characters to French ekeyboard and change it's order\n2021-10-13 Fix dropdownClicked event received behaviour in Audio, TextAudio and Video addon\n2021-10-04 Added support for method getOpenEndedContentForCurrentPage for addon Paragraph Keyboard\n2021-10-01 Added tests for getState, setState and visibility\n2021-09-29 Added tests for the printable version of Hierarchical Lesson Report\n2021-09-29 Added functionality for the printable version of Hierarchical Lesson Report\n2021-09-29 Added functionality for the printable version in preview of Hierarchical Lesson Report\n2021-09-29 Added functionality to extract content information for Printable Controller\n2021-09-28 Fix Filled Gap reset method\n2021-09-27 Added in paragraph destructor stop function called by timeout from setIframeHeight method\n2021-09-24 Fixed a bug causing lessons to not start in edesk\n2021-09-15 Added a new property for SingleStateButton that allows clicking in show answers mode\n2021-09-09 Added support for printable state for text selection\n2021-09-09 Added tests for printable state in text selection\n2021-09-09 Added support for printable check answers state in text selection\n2021-09-09 Added support for printable show user answers state in text selection\n2021-09-09 Added printable state for text selection\n2021-09-08 Fixed incompatibility bug in getState and setState between versions\n2021-09-03 Fix bug with no event on stop recording android mLibro\n2021-09-01 Fix GSA not working in Text module\n2021-08-31 Add ScoreWithMetadata API\n2021-08-24 Fix bug with eKeyboard going to next input\n2021-08-18 Fixed bug that always gave 100% score or sent end of game event when Hangman addon was in Show Answers mode\n2021-08-16 Add Gradual Show Answer to Point and Lines addon\n2021-08-11 Add GSA mode for Coloring addon\n2021-08-09 Add GSA mode for Memo Game addon\n2021-08-04 Add clear visited pages property to lesson reset\n2021-08-02 Add GSA mode for Text Coloring addon\n2021-07-30 Add getOpenEndedContentsForCurrentPage to PlayerServices\n2021-07-28 Added keyboard navigation and TTS to Quiz\n2021-07-27 Fixed bug that audiodescription in Chrome doesn't stop video\n2021-07-22 Add removeAllBookmarks command and tests to Navigation bar addon\n2021-07-12 Added math editor in popup property to WIRIS addon\n2021-07-12 Fixed Editable Window allowing for resizing of images when editing is disabled\n2021-07-09 Fixed Editable Window replcing it's content with a textbox after page change\n2021-06-24 Added support for printable state in Table\n2021-06-18 Added headers to Table TTS\n2021-06-17 Fixed issue with Text gaps connected to Math addon when leavinh Show Answers mode\n2021-06-17 Hotfix GradualShowAnswer respect null argument (for usage in private addons)\n2021-06-14 Fixed TTS failing when text is too long\n2021-06-09 Fixed too long event handling blocking redrawing of the Coloring addon on Firefox\n2021-06-07 Fix eKeyboard getting triggered by clicking on the audio gap\n2021-06-07 Added support for printable state in Text addon\n2021-06-07 Added support for printable state in Connection\n2021-05-28 Fix width and height space for floating images in IWBToolbar\n2021-05-25 Added support for printable state in ordering\n2021-05-24 Added support for printable state in Choice addon\n2021-05-21 Added support for printable state in text identification\n2021-05-20 Added \"enable undo/redo buttons\" property in IWB Toolbar\n2021-05-20 Change the way text works in the Drawing addon to support multiple lines\n2021-05-19 Added docs and missing label for SkipLink\n2021-05-18 Fixed not being able to use audio element in multiplegap using keyboard navigation\n2021-05-11 Added undo-one button to IWB Toolbar\n2021-05-11 Fix communication between IWBToolbar and Scoreboard\n2021-04-29 Added Support for printable state in Image Identification\n2021-04-29 Added SkipLink module\n2021-04-22 Add zip file property for Iframe addon\n2021-04-21 Scoreboard documentation\n2021-04-19 Added Support for text and image in Drawing addon\n2021-04-13 Added notifier for save\n2021-04-13 Added externalVariables\n2021-04-07 Added disable new page message property to the Text To Speech addon\n2021-04-07 Fixed no correct loading from state for addon table when drop down\n2021-04-07 Added TTS support in Audio addon\n2021-04-06 Added TTS support in Lesson Reset module\n2021-04-02 Fixed issue with IWB Toolbar button selection\n2021-04-02 Added TTS support in Limited Check module\n2021-04-01 Added TTS support in multiplegap\n2021-03-30 Fixed reading Chrome browser version on android\n2021-03-29 Implementation of audio files export\n2021-03-29 Fixed issue with empty spaces at the end of a print page\n2021-03-26 Add new addon Scoreboard\n2021-03-25 Added scriptable button to IWB Toolbar\n2021-03-25 Fixed issue with images breaking pagination in print\n2021-03-24 Added support for regex when used useNumericKeyboard in addons\n2021-03-22 Added support for setPages in printable\n2021-03-18 Increased maximum time in addon Media Recorder\n2021-03-18 Removed display of placeholder text after show and hide\n2021-03-15 Fixed table stretching in print\n2021-03-15 Added show and hide for Crossword\n2021-03-15 Fixed numeric TextBox for iPad\n2021-03-15 Fixed Test Puzzle error on firefox when entering a page in show errors mode\n2021-03-15 Fixed numeric TextBox for iPad\n2021-03-09 Fix Gradual Show Answers addon to work properly with Check Ansers button\n2021-02-24 Add Text property to Multiaudio addon\n2021-02-22 Added Enable in error checking mode property to Media Recorder\n2021-02-11 Fixed show answers and check sending unneeded events\n2021-01-25 Change gradual show answers addon name and labels\n2021-01-21 Fixed dropdown gaps not sending events in Text module when user action events is set to true\n2021-01-20 Add gradual show answers mode\n2020-12-17 Fixed stretching of Connection addon and added draggable gap support in Text for print\n2020-12-03 Fixxed issue with font size of printable lessons\n2020-11-27 Added playback rate control to the Audio addon\n2020-11-26 Fixed issue with assessmentUser==teacher being overrriden by student's state\n2020-11-26 Added WCAG support for TextAudio\n2020-11-25 Added support for assessmentUser metadata in Assessment Navigation Bar\n2020-11-20 Changed randomizeLesson in Assessment Navigation Bar to override addon state\n2020-11-19 Add new property for SingleStateButton which allows clicking in error mode.\n2020-11-17 Added support for randomizeLesson metadata in Assessment Navigation Bar\n2020-11-13 Fixed issue with isAttempted disabling ShowErrors mode in Fractions\n2020-11-12 Removed gap wrapping in Text\n2020-11-02 Added gaps not breaking from text that is directly adjacent to it in Text and Table \n2020-11-02 Fixed issues with navigation in assessment navigation bar.\n2020-11-02 Fixed issue with opening popup page with YouTube addon\n2020-10-27 Fixed issue with AudioPlaylist on iOS\n2020-10-23 Fixed issue with setting pages as nonreportable by adaptive learning service\n2020-10-22 Remove allOK event from Text\n2020-10-22 Fixed problem with null elements in LineNumber after getState call\n2020-10-15 Fix issue with assessments navigation bar and specific pages selected\n2020-10-14 Add new addon AudioPlaylist\n2020-09-25 Add possibility to reset only wrong answers.\n2020-09-22 Added queuing commands to Connection when it is being loaded, fix issue with getting state of loading connection\n2020-09-18 Added handling situation where Assessment Navigation Bar had more pages than lesson\n2020-09-18 Added getNarration command for Audio\n2020-09-15 Added new properties for ValueChanged event and added method for injecting eventbus for addons\n2020-09-15 Added possibility for creating adaptive lessons\n2020-09-11 Fixed state of marker tool in IWB Toolbar not being saved\n2020-08-17 Added property to Assesment Navigation Bar for switching off the randomization\n2020-07-21 Changed icon of YouTube addon\n2020-06-26 Changed the way lesson score is rounded\n2020-06-20 Add checking if gap is audio gap\n2020-06-19 Add getresponseindex to commands in Feedback addon\n2020-06-17 Fix page weight in utils.\n2020-06-08 Added checking if event item is null in MultiAudio\n2020-06-04 Modified youtube addon to use new mauthor api\n2020-06-02 Fix problem with page size when static footer is enabled\n2020-05-26 Fixed issue with Paragraph when the default layout is not the initial one\n2020-05-15 Fixed numeric gaps displaying a warning when a fraction is inputed\n2020-05-06 Added draggable items interface for multiaudio and support for it in multiplegap\n2020-04-21 Added resetPage and resetPageByName commands\n2020-04-17 Changed enabled youtube addon to work regardless of api quoata\n2020-03-05 Fix issue with XML entities in dropdown gap breaking show answers\n2020-03-05 Added HTML IDs to Choice options\n2020-03-04 Added maintain state property to Limited Check addon\n2020-02-10 Add new property for Lesson Progress to enable refreshing view on page load\n2020-01-07 Lock only addons which are set in config in eKeyboard addon.\n2019-12-12 Added use numeric keyboard property to Basic Math Gaps, Table, Text and Writing Calculations\n2019-12-09 Fix problem with Basic Math Gaps and jQuery copy.\n2019-12-09 Fix problem with show answers and Image Gap module\n2019-12-06 Fix problem with LinkInfo to page\n2019-12-05 Fixed issue with updating links in text leading to their previous address\n2019-12-04 Fixed issues with echo on FireFox, events on Edge and suspended analyzer on Chrome in Media Recorder addon\n2019-11-27 Add new property to Basic Maths Gaps: User action events.\n2019-11-22 Fixed issues with text from draggable gaps dissapearing when dragged out of text\n2019-11-18 Fix problem with static footer and page size\n2019-11-18 Fixed issues with Slovak letters in crossword\n2019-11-08 Fixed issues with module group visibility\n2019-11-08 Added modules metadata.\n2019-11-08 Add alt text support for SourceList\n2019-11-05 Added isAttempted command to Text Coloring.\n2019-11-05 Remove side effect from getState in paragraph module.\n2019-11-05 Remove hideAnswers in getState, getScore and getErrorCount in table addon.\n2019-10-30 Fixed Slider working incorrectly when inside overflow: auto\n2019-10-29 Added Count Errors property to Text Coloring\n2019-10-29 Added clearing Catch addon objects on page change.\n2019-10-29 Fixed getting readable text in Text module\n2019-10-28 Fixed issues with scaling of multiplegap\n2019-10-24 When table is not activity or does not have gaps, then return true in isAttempted\n2019-10-24 Fixed problem with animation and transparency.\n2019-10-23 Fixed error in destroy method in IWB Toolbar module\n2019-10-18 Fixed styles in Flash Cards module\n2019-10-17 Fix problem with hideAnswers in getScore, getErrorCount, getState in multiple gap addon\n2019-10-16 TrueFalse is not hidding show answers during getState\n2019-10-16 Remove hideAnswers from getState in ordering module.\n2019-10-14 Optimize drawing frames in Animation addon\n2019-10-11 Added isAttempted command to Table.\n2019-10-10 Added TTS support to Slider\n2019-10-10 Fix for moveToFrame command in Image Vierwer not calling tts\n2019-10-09 Added destroy method and fixed getting state in Slideshow module\n2019-10-09 Add destroy lifecycle management for modules. Use destroy in IWB addon. Fix problem with DropDown gap and disable. Remove hideAnswers from getState in Text module.\n2019-10-07 Fix Coloring issue when the first layer is not default\n2019-10-07 Fixed issues on Edge and mlibro\n2019-10-03 Fixed TTS reading Image Viewer alt text after entering a page\n2019-09-27 Fix ImageViewerPublic model upgrade.\n2019-09-26 Fixed disabling Image Gap module\n2019-09-23 Added TTS support to Image Viewer\n2019-09-17 Added a new text property for controlling how gap size attribute is calculated\n2019-09-17 Added TTS support to the Animation addon\n2019-09-13 Fixed TrueFalse showAnswers method when correct answers are empty.\n2019-09-11 Added handling of online video files when offline\n2019-09-10 Fixed getState breaking Swiffy Animation addon\n2019-09-05 Added loading CSS styles to Editable Window\n2019-09-04 Fixed IWB Toolbar zoom working incorrectly in iframe\n2019-09-02 Fixed problem with fullscreen in iframe addon\n2019-08-26 Added getter for Content metadata. Added SCORM passed/failed statuses.\n2019-08-20 Added alt text support to text identification\n2019-08-12 Fixed problem with editable window with audio on IE, EDGE, FIREFOX\n2019-07-31 Blocked the download audio in Editable Window module\n2019-07-26 Fixed scrolling while dragging the Slider on mobile devices\n2019-07-26 Fixed issue with the values of newly added properties being overwritten\n2019-07-26 Fixed opacity in Editable Window module\n2019-07-22 Removed the ability to download the video in editable window\n2019-07-19 Added supporting of only audio to Editable Window\n2019-07-15 Fixed problem with editable window with video on IE\n2019-07-11 Fixed test - position of IWB toolbar in fullscreen mode\n2019-07-11 Fixed position of IWB toolbar in fullscreen mode\n2019-07-04 Added translations for Sejer to Paragraph and Editable Window\n2019-07-03 Changed structure of a Editable Window\n2019-06-27 Fixed saving and closing notes on mobile devices in IWB Toolbar module\n2019-06-19 Fixed anchors in Editable Window\n2019-06-11 Fixed issue with Report when multiple pages have the same name\n2019-06-11 Fixed issue with background color in show answers mode of Text Coloring\n2019-06-10 Fixed issues with editable window position centering. Disallow moving the window outside of document.\n2019-06-07 Added fullscreen option to editable window.\n2019-06-04 Added property to disable or enable editing in popup in Editable window module\n2019-05-23 Added title to a ediatble window custon addon\n2019-05-14 Fixed issue with setState in Audio on Mobile Safari\n2019-05-10 Fixed setting iframe height in Paragraph module\n2019-05-10 Added reset button, limited width and limited colors in Editable Window\n2019-04-18 Fixed issue with isAttempted command in Paragraph\n2019-04-18 Fixed issue with pause command in video only being available from AC scripts\n2019-04-17 Added audio to text module\n2019-04-17 Fixed sorting on mobile devices in Ordering module\n2019-04-16 Added new custom addon editable window\n2019-04-11 Fixed issue with the dotted button in Navigation Bar and added Block not visited pages property\n2019-04-10 Added setContextMetadata to player API\n2019-04-10 Added lock and unlock commands and weight property in Paragraph and Paragraph Keyboard modules\n2019-04-04 Added 'no audio' option to the slideshow addon\n2019-04-04 Fixed calculating max score in Choice module\n2019-04-02 Fixed setting isEnable property in Text Audio module\n2019-04-01 Added refreshing mathjax in filled gap in Text module\n2019-04-01 Added bookmarks to Navigation Bar\n2019-03-13 Fixed issue with dropdown gap editor when 'keep in order' is disabled\n2019-03-12 Fixed setting state in Basic Math Gaps module\n2019-03-06 Fixed problem with not selectable placeholder text in filled gap after reset command\n2019-03-04 Added showAnswers, hideAnswers, enable and disable commands in True False module\n2019-02-28 Fixed problem with setting state in Text Audio module\n2019-02-26 Added Manual grading and Title properties in Paragraph and Paragraph Keyboard modules\n2019-02-21 Fix for problem with dissapearing Source List items after drag stop\n2019-02-08 Fixed adding selectable characters in word in Text Coloring\n2019-01-31 Added starting values to connection modules\n2019-01-28 Fixed problem with recreating gaps on show command\n2019-01-22 Fixed getting error count in Shooting Range module\n2019-01-21 Added disable and enable commands for TextAudio addon\n2019-01-14 Added new addon Limited Submit\n2019-01-14 Fixed a model in media recorder addon\n2019-01-14 Added a end of game event to a shooting range addon\n2019-01-14 Fixed setting state in Coloring module\n2019-01-14 Fixed the problem of latex reloading in a quiz addon\n2019-01-11 Added disable enable commands to Media Recorder addon\n2019-01-10 Fixed view shift on mobile devices in Points and lines, Connecting dots, Coloring\n2019-01-10 Added commands to Text, Ordering, Image Gap and Choice\n2019-01-10 Changed the behavior of the point counter in a Catch addon\n2019-01-04 Fixed setting player controller in Shape Tracing module\n2019-01-02 Added command isOK to a connection addon\n2018-12-21 Fixed a rerendered mathjax of text module\n2018-12-19 Fixed reseting after using setText command in Text module\n2018-12-17 Fixed ekeyboard paragraph loading on the first page of mCourser\n2018-12-17 Fixed mathjax calls\n2018-12-12 Fixed shape tracing scaling on mobile devices\n2018-12-11 Upgraded tinymce library\n2018-11-28 Fixed media recorder on safari mobile devices and mLibro\n2018-11-28 Fixed reset issue in Shooting Range\n2018-11-27 Fixed issues with inline display: none in multiple addons\n2018-11-21 Fixed toolbar and added color pickers in Paragraph module\n2018-11-09 Fixed hyperlinks in feedback\n2018-11-05 Added alt text to audiodescriptions in video\n2018-11-05 Fixed static header and footer positioning when in scaled iframe\n2018-11-02 Added removal of MathJax \"End Process\" hooks after modules detach\n2018-10-25 Fixed problem with loading math jax\n2018-10-25 Added new addon audio recorder\n2018-10-22 Grouping modules into a div\n2018-10-16 Hierarchical lesson report add maxscore link\n2018-10-16 Added property Plate Image in Catch module\n2018-10-15 Fixed iFrame visible in the editor when the hide option is enabled\n2018-10-12 Shooting range impoving the game.\n2018-10-11 Removed sending ValueChanged with value removed on stopping item drag in multiplegap\n2018-10-10 Added disable dragging property in Ordering\n2018-10-09 Fixed scoring in multiplegap when incorrect answers are present\n2018-10-09 Fixed problem with setState in shooting range module\n2018-10-08 Fixed issue with show answers in Text Selection when Limited Check is used\n2018-10-05 Fixed issue with MathJax in eKeyboard and Text when the first layout is not default\n2018-10-03 Added setText in Paragraph\n2018-10-02 Fixed isAttempted method in not activity mode in True False module\n2018-09-27 Changed mouse and touch control scheme in Catch addon\n2018-09-24 Fixed issues with scoring in multiplegap\n2018-09-24 Added missing split page label\n2018-09-19 Fixed issue with decimals in Math\n2018-09-19 Unifed visiblity settings in preview for multiple addons\n2018-09-17 Fixed issue with Audio progress bard\n2018-09-17 Fixed conflict CSS of modules\n2018-09-14 Removing semi word from translations labels and API calls.\n2018-08-24 Fixed problem with hiding audio descriptions in Video module\n2018-08-23 Added 'Enable scroll on mobile' property in Text Identification module\n2018-08-17 Added show answer class for individual words in Text Coloring.\n2018-08-17 Fixed Double_State_Button native navigation.\n2018-08-13 Fixed Choice disable command on mobiles\n2018-08-10 Added audio descriptions to the video addon\n2018-08-10 Fixed displaying of < > buttons in assessments navigation bar\n2018-08-07 Fixed layout change issue after quiting fullscreen mode\n2018-08-06 Fixed issues with tests for page version update\n2018-08-03 Fixed playing Video without controls bar\n2018-08-03 Added Copy Page Settings to Page properties\n2018-08-03 Changed is visible property so that it's common for all layouts\n2018-07-31 Fixed PieChart's display on Desktop devices\n2018-07-26 Removed reading \" connected\" when in Show Answer Mode in TTS\n2018-07-25 Added test mode in quiz\n2018-07-23 Added module sorting in editor\n2018-07-20 Fixed issues with invalid model in Crossword addon\n2018-07-18 Replaced Video Tutorials button with Interactive Tutorials\n2018-07-18 Fixed Scrolling on a Page in TTS\n2018-07-17 Added Phrase Selection Mode to Text Coloring\n2018-07-17 Fixed coursor position in GridScene\n2018-07-13 Fixed next() and previous() methods in MultiAudio addon\n2018-07-13 Fixed fullscreen on iPad\n2018-07-13 Fixed restartGame command in Shooting Range\n2018-07-12 Removed Byte Order Mark from polish dictionary\n2018-07-10 Added Games category\n2018-07-10 Added scrolling to the active module in keyboard navigation\n2018-07-10 Added TTS support for Image Gap\n2018-07-09 Added TTS support for gaps in Table\n2018-07-06 Added TTS support for Double State Button\n2018-07-06 Added TTS support for Memo Game\n2018-07-04 Fixed setting of working mode in text coloring addon\n2018-07-04 Fixed calculation of popup elements position\n2018-06-29 Fixed several issues between TTS and NVDA on Firefox\n2018-06-27 Fixed autofill option for TTS\n2018-06-26 Fixed identification of expression variables in math addon\n2018-06-25 Added feature to color individual letters in text coloring addon\n2018-06-25 Fixed visibility of the element dragged from the gap\n2018-06-22 Fixed problem with pseudo code console on IE11\n2018-06-20 Added Autofill option for TTS\n2018-06-18 Added a caching of the video posters\n2018-06-15 Changed labels for Limited Show Answer addon\n2018-06-15 Added TTS support for Text Selection\n2018-06-14 Added new addon Limited Show Answers\n2018-06-05 Added TTS support for Table cells\n2018-06-05 Moved pausing on getState to destroy method in media addons\n2018-06-04 Fixed issues with TTS handling of the Dropdown gap in Text module\n2018-05-28 Fixed issues with hover style in reset button on mobile\n2018-05-28 Fixed issue with TTS in multiplegap after reset\n2018-05-28 Added TTS support for Image Identification\n2018-05-25 Added a test to check for special character handling in text coloring\n2018-05-24 Fixed conflicts between WCAG mode and NVDA\n2018-05-24 Added TTS support for Zoom Image\n2018-05-21 Added TTS support for Heading\n2018-05-15 Fixed several issues with choice module on mobile devices\n2018-05-15 Fixed cell-show-answers class name in gamememo\n2018-05-15 Added class on hover in TrueFalse addon\n2018-05-14 Added TTS support for alt texts of images in multiple modules/addons\n2018-05-11 Added keyboard shortcut for changing the page in player\n2018-05-09 Fixed problems with static footer display when chaning layouts. Fixed problems with footer width after orientation change.\n2018-05-08 Fixed issues with eKeyboard in Popup.\n2018-05-07 Fixed issues with special characters in Text module gaps.\n2018-04-27 Fixed problem with saving choice feedback property.\n2018-04-27 Added TTS support for Hierarchical Lesson Report\n2018-04-26 Fixed issues with spacebar in keyboard navigation\n2018-04-26 Added TTS support for feedback addon\n2018-04-26 Added TTS support for Image Source and Multiple gap\n2018-04-24 Fixed problem with != statement in math module\n2018-04-24 Fixed problems with hovering classes and executing actions in button modules.\n2018-04-24 Added show and hide commands to Page Counter addon.\n2018-04-24 Fixed problem with size of popup\n2018-04-23 Added 'Enable scroll on mobile' property to the Text Selection addon\n2018-04-18 Fixed problem with check answers mode of gaps in the Table addon\n2018-04-17 Fixed problem with empty XML tag in page progress configuration\n2018-04-16 Fixed problem with CORS in popup addon.\n2018-04-13 Added option to select the language used in gaps ant alt texts in Text, Choice, Connection and Ordering modules\n2018-04-12 Fixed problem with <> symbols in Text draggable gap\n2018-04-11 Fixed problem with video on IE 11\n2018-04-09 Fixed a problem with WCAG mode sometimes turning off on page change.\n2018-04-03 Fixed problem with rotating ruler in IWB Toolbar module.\n2018-03-28 Added property to vertically center the answer in Quiz module. Added headers-of-answers class to posibility to style headers of answers in Quiz module.\n2018-03-28 Added checking for permissions to modify top window in glossary\n2018-03-26 Added classes while checking answer in Pseduo Code Console. Fixed problem with exceptions translations in pseudo code console.\n2018-03-23 Added game mode to board game. Added new addon dice. Added validation utils.\n2018-03-22 Added \"video-poster-pause\" CSS class to \"video-poster-play\" element on pause and removing it on stop\n2018-03-20 Fixed problem with eKeyboard removing event handlers\n2018-03-20 Fixed problem with showing answers in gaps\n2018-03-20 Added calling show answer on enter press event\n2018-03-20 Added keyboard navigation to Text Selection addon\n2018-03-19 Added Alt Text in Text, Ordering, Connection and Choice modules\n2018-03-16 Added current-page class in icon+list display type in Table of Contents module\n2018-03-13 Added new property - \"Is Disabled\" to Image Identification module\n2018-03-13 Added TTS support for Navigation Bar\n2018-03-13 Added TTS support for Page Counter\n2018-03-13 Added fix in Page Progress Panel\n2018-03-12 Added minus errors scoring type for modules group\n2018-03-09 Fixed problem with TrueFalse module and undefined model field.\n2018-03-09 Added Page Progress Panel module\n2018-03-08 Fixed problem with zooming after page change in when using Navigation Bar and Paragraph.\n2018-03-07 Fixed tests for pseudo code console and webpack build script.\n2018-03-07 Static list property returns objects not lists. Added pseudo code console.\n2018-03-06 Fixed problem with & in text selection\n2018-03-06 Fixed problem with scrolling and page look with static header on\n2018-03-05 Fixed problems with scaling in Popup\n2018-03-05 Better handling of the editor page loading error\n2018-03-05 Added Timer addon\n2018-03-02 Fixed problem with scaling in Connection addon\n2018-03-02 Added property to set ordering items to starting position\n2018-03-01 Fixed problem with gap parsing with opening tag character\n2018-03-01 Fixed problem with opening gaps on mobile devices in eKeyboard module\n2018-02-28 Fixed problem with restoring state in video addon\n2018-02-28 Fixed problem with hover in iOS\n2018-02-27 Added localization for alt-text in some modules and layout in eKeyboard\n2018-02-27 Renamed Hierarichal Lesson Report property\n2018-02-23 Readded works with property in Page Progress.\n2018-02-22 Changed when Text has no gaps it does not require escape to deactivate in WCAG navigation\n2018-02-21 Added TTS support for Reset button\n2018-02-21 Added TTS plays the title of the new page\n2018-02-20 Added Page mapping ids translations, Size and ModuleDimensions equals implementations\n2018-02-20 Added TTS support for SHow Answers Button\n2018-02-15 Added TTS support for the Text's Draggable Gap\n2018-02-15 Added TTS support for Check Answers Button\n2018-02-15 Fixed issue with scaling in Figure Drawing on mobile devices\n2018-02-14 Fixed issue with reseting module in Catch module\n2018-02-13 Fixed issues with Glossary scaling on mobile devices\n2018-02-13 Fixed problem with resolving url in inline css\n2018-02-12 Fixed Catch addon double click behaviour on mobile devices, paddle is always appearing and can't run past right edge of screen. Also simulation is paused on show answers and checks answers, and it calculates max score.\n2018-02-12 Deselecting Double State Button on the end of Multiaudio track connected via Audio Binder.\n2018-02-09 Fixed dragging out elements from Draggable Gap.\n2018-02-09 Fixed speak and playTitle commands in TTS addon\n2018-02-07 Added attribute role in TrueFalse for screen reader apps.\n2018-02-06 Fixed issues with scaling in Drawing\n2018-02-01 Fixed issue with saving empty inlineStyles or classStyles.\n2018-01-30 Added alt text for images added by RichTextEditor and for Memogame.\n2018-01-30 Fixed Double State Button not activating on keyboard input.\n2018-01-29 Fixed Image gap and multiplegap not getting image source alt text\n2018-01-26 Fixed addon TrueFalse now only adds text as checkbox alt text\n2018-01-24 Fixed addon TrueFalse not being read correctly by NVDA\n2018-01-23 Fixed url resolving for modules\n2018-01-23 Fixed Choice chosen element not reseting\n2018-01-23 Fixed tests in TTS and Text Identification\n2018-01-23 Added tabindex in Image Identification, Image Source and Text Identification\n2018-01-23 Added TTS functionality\n2018-01-19 Puzzle addon allows drag'n'dropping elements; fixed showing correctness marks for many puzzle addons at once; now it sends valueChanged event\n2018-01-18 Added item handling of MultiAudio in Multiple Audio Controler Binder\n2018-01-18 Fixed events in LearnPen Data module\n2018-01-17 Fixed player start with subset of pages from exported lesson.\n2018-01-17 Fixed reading data in LearnPen Report module\n2018-01-15 Added time labels property for video addon.\n2018-01-10 Fixed problem with saving and restoring modules xml.\n2018-01-10 Fixed deselects the selected widget when showing errors, correct answer, or resetting\n2018-01-09 Fixed setting enable tabindex property\n2018-01-05 Added Do not block in check mode property to DoubleStateButton\n2018-01-04 Fixed issue with too large coordinates in Coloring\n2018-01-04 Fixed showing system keyboard for eKeyboard on mobiles.\n2018-01-03 Fixed inline-css error with not unescaping apostrophe\n2018-01-03 Fixed problem with opening popup.\n2018-01-03 Fixed problem with moving to next gap in eKeyboard module\n2017-12-28 Added possibility to define many layouts for lesson depending on device threshold\n2017-12-22 Fixed tests in Video module\n2017-12-22 Added initial configuration in Blockly Code Editor module\n2017-12-22 Fixed showing cards and images in Memogame module\n2017-12-14 Fixed performance issues with preloading images for preview mode in Animation module\n2017-12-13 Fixed popup scrolling\n2017-12-13 Fixed managing tabindex property\n2017-12-12 Fixed Text coloring that was producing additional clickable elements\n2017-12-06 Fixed navigating in gaps\n2017-12-06 Added custom events handling and using /file/serve files from mCourser with no_gcs flag\n2017-12-05 Added Enable tabindex property and changed default value.\n2017-12-01 Added setVideoURL command for video addon.\n2017-11-27 Added tabindex for text.\n2017-11-23 Double State Button can be activated with enter/space when cycling through modules using browser's tab navigation\n2017-11-22 Fixed Ordering module that could crash browser when two items were added and \"don't generate correct order\" was selected\n2017-11-22 Fixed log2 operation in Fractions module\n2017-11-15 Added alternative text property in Image Source, Image Identification, iFrame and Multiplegap modules\n2017-11-14 Fixed problem with math gaps in Text when changing page quickly.\n2017-11-09 Added commands to fire keyboard navigation\n2017-11-09 Added Tabindex property for next part of modules.\n2017-11-09 Added show play button for video addon. Added setVideoURL command for video addon.\n2017-11-06 Fixed problems with Magic_Boxes view.\n2017-10-31 Added Tabindex property for modules. Added tabindex handling for Choice, Connection, TrueFalse, Ordering and Memo.\n2017-10-31 Fixed problem with adding scroll handlers in IWB Toolbar.\n2017-10-23 Fixed problem with defining functions in math. Fixed problem with calling build in functions in math.\n2017-10-23 Added keyboard navigation in Table of Contents module\n2017-10-16 Added sending events on select and deselect and corresponding property.\n2017-10-16 Load button for list property in editor showed only for iframe module.\n2017-10-12 Fixed test configuration in Quiz module\n2017-10-12 Fixed bug with TextAudio still playing sound after closing popup with it\n2017-10-11 Fixed Programming Code Prompt module - enter now creates a new line.\n2017-10-11 Added property to Ordering module, which disallows generating a correct ordering by random.\n2017-10-11 Fixed problem with errors in console in iFrame module\n2017-10-11 Added new addon Quiz\n2017-10-10 Added alternative name styling property in Hierarchical Lesson Report.\n2017-10-09 Added closed panel drawing property in IWB Toolbar module\n2017-10-05 Added shooting range addon.\n2017-10-05 Added language attribute in Text module and lesson\n2017-10-05 Fixed problem with too large page index\n2017-10-02 Fixed imageSource that got position zeroed when called reset() on it after PageLoaded event\n2017-10-02 Fixed problem with jumping video. Fixed problem with poster visibility.\n2017-10-02 Fixed problem with showing glossary popup in present view.\n2017-10-02 Fixed problem with auto play in Video module\n2017-09-29 Removed gap definition from html attributes in text module\n2017-09-28 Fixed accessing window.top properties\n2017-09-28 Fixed random order in Choice module\n2017-09-26 Added sendMessage command in iFrame module\n2017-09-25 Added alternative text and keyboard navigation in Zoom Image module\n2017-09-22 Fixed Assessments Navigation Bar page selecting and added keyboard navigation. Changed keyboard navigation in Navigation Bar.\n2017-09-22 Added new addon Catch\n2017-09-19 Added notification about setting header/footer.\n2017-09-18 Setting individual header and footer for pages.\n2017-09-15 Removed changing controls visibility in glossary addon\n2017-09-15 Added alternative text property for video and image\n2017-09-14 Fixed events problem in eKeyboard and devices with touchscreen and mouse\n2017-09-14 Added new addon Heading\n2017-09-12 Fixed problem with dragging in source list.\n2017-09-11 Added ended event for animation addon\n2017-09-11 Fixed problem with preview and Slideshow. Fixed problem with playing slideshow without loaded audio.\n2017-09-04 Added WCAG support for Image Gap and Image Source\n2017-09-04 Fixed problem with multiple calling WCAG on elements. Added WCAG for Image ID.\n2017-08-31 Added WCAG support for Table.\n2017-08-29 Added message watcher for listening on keydown event outside iframe for WCAG\n2017-08-25 Added WCAG support for Image ID\n2017-08-25 Added full support for WCAG in Text module\n2017-08-24 Added WCAG support for Multiplegap\n2017-08-23 Fixed problem with disabling source list by Limited check. Removed commons.js from repository. Added to addons tests building commons.js.\n2017-08-22 Fixed problem with using chars and numbers in math addon.\n2017-08-22 Added to audio force loading audio. Upgraded sinon to 2.4.1.\n2017-08-17 Fixed problem with scaling popup\n2017-08-14 Added go to last visited page for previous page button.\n2017-08-14 Fixed problem with default keyboard navigation in browser while using player keyboard navigation\n2017-08-14 Added keyboard navigation for Single State Button and Double State Button. Fixed keyboard navigation for addon buttons.\n2017-08-14 Added keyboard navigation for ordering module.\n2017-08-14 Removed unnecessary text from SVG2 addon.\n2017-08-10 Added keyboard navigation (WCAG) for connection addon.\n2017-08-09 Added gotoCommonPageId, setHeaderVisibility, setFooterVisibility commands for player.\n2017-08-09 Fixed problem with double mathjax rendering in ordering module.\n2017-08-08 Added keyboard navigation (WCAG) to Source List module and draggable gaps in Text module\n2017-08-08 Added WCAG for GotoPageButton.\n2017-08-04 Added EOG event for Hangman addon\n2017-08-04 Added keyboard navigation and timer feature to Memo Game module\n2017-08-04 Fixed problem with different display of math gaps in editor and player.\n2017-07-31 Fixed problem with eKeyboard open command.\n2017-07-28 Added option for sorting assets in select file window.\n2017-07-26 Fixed problem with empty stroke width property in fractions addon.\n2017-07-25 Added Increment mistake counter property for Show Answers.\n2017-07-25 Fixed popup size when page bigger than window size.\n2017-07-25 Changed default video control bar to custom control bar. Fixed problems with subtitles in fullscreen in video.\n2017-07-24 Added new mode do fractions addon to dividing square. Refactored fractions addon.\n2017-07-18 Fixed popup close event.\n2017-07-17 Added video current time event.\n2017-07-11 Added command execute for reset button module.\n2017-07-10 Fixed selecting text while dragging slider. Fixed dragged slider position.\n2017-07-07 Added Wrap Items property to multiplegap module\n2017-07-05 Fixed problem with tests which are using gwt classes\n2017-06-29 Fixed problem with using apostrophe in gaps\n2017-06-19 Fixed problem with custom events in Source list\n2017-06-08 Fixed problem with dropdown gaps in Text module\n2017-06-06 Fixed issue with scoring in Text module, added escaping pattern in gaps.\n2017-06-05 Fixed problem with using eKeyboard in Text module. Added build files to gitignore.\n2017-05-29 Fixed scoring and error counting in Text Presenter for dropdown gaps.\n2017-05-26 Added new commands: setAsReportable nad setAsNonReportable for page.\n2017-05-25 Fixed problem with checking answers in Hangman module\n2017-05-22 Fixed Image Source module issue with show command and relocating module to 0,0 position\n2017-05-22 Fixed problem with relative url returned by getPreview on localhost\n2017-05-12 Added new display type icons+list in Table of Contents module\n2017-05-11 Fixed propagating click in Image identification module\n2017-05-09 Fixed resizing iframe in Paragraph eKeyboard module\n2017-04-27 Changed url for image in eKeyboard module\n2017-04-26 Fixed tests in Iframe, shape_tracing addons.\n2017-04-24 Fixed loading images in Shape Tracing and Coloring\n2017-04-24 Added sending event after closing popup page\n2017-04-20 Added commands to get and set scroll value from iframe.\n2017-04-19 Added playing, stop, end, pause events for slide show addon.\n2017-04-12 Added dontMoveModules parameter to outstretchHeight command.\n2017-04-07 Added allow fullscreen property to iFrame addon.\n2017-04-04 Added changes in Variable Storage module\n2017-04-04 Fixed adding hovering class in Reset module\n2017-04-04 Added changes in page list.\n2017-04-04 Fixed problem with reseting module after closing Popup in Paragraph module\n2017-04-03 Fixed problem with not initialized eKeyboard while calling eKeyboard command.\n2017-03-29 Fixed getting state in Paragraph module\n2017-03-29 Fixed scrolling screen on iOS in Drawing module\n2017-03-29 Added counting score from provided modules in Limited Check module\n2017-03-27 Removed unused logo library\n2017-03-27 Fixed problem with Z-Index in Programming Command Prompt\n2017-03-23 Fixed removing chapters\n2017-03-21 Added changes to PieChart module\n2017-03-21 Changed getting parent chapter\n2017-03-16 Added missing labels\n2017-03-16 Added full screen mode and disable full screen property in YouTube module\n2017-03-15 Fixed resetting bookmarks and added moveToPreviousPage and moveToNextPage commands in Assessment Navigation Bar module\n2017-03-13 Added filled gap in Table module\n2017-03-10 Fixed problem with zoom on iPhone in Paragraph module\n2017-03-08 Fixed test in Table module\n2017-03-08 Fixed tests in Math and Table modules\n2017-03-08 Fixed rendering LaTeX in draggable gaps in Table module\n2017-03-03 Fixed executing code after checking, showing and resetting answers in Grid Scene module\n2017-03-02 Added current-page class in Table of Contents module\n2017-03-02 Fixed working in popup in eKeyboard module\n2017-02-27 Fixed expressions with white spaces in Math module\n2017-02-27 Added showCloseButton command in eKeyboard module\n2017-02-24 Fixed parsing expressions in Math module\n2017-02-24 Fixed scoring when placeholder text is the same as correct answer in Text module\n2017-02-24 Fixed removing hover styles in Popup Button module\n2017-02-23 Fixed highlighting text in Text Audio module\n2017-02-21 Added show answers mode in Puzzle module\n2017-02-21 Added math.js library and fixed problem with calculating expressions\n2017-02-16 Fixed displaying current page in Navigation Bar module\n2017-02-15 Added icon display type in Table of Contents module\n2017-02-15 Fixed static header and footer\n2017-02-06 Updated ekeyboard labels in dictionaries.\n2017-02-02 Fixed static header and footer with outstretch height and in fit to window and full screen modes\n2017-02-02 Added Works with property in Page Progress module\n2017-02-02 Added show/hide commands in Writing Calculations module\n2017-02-02 Added enable/disable button/command in eKeyboard. Fixed changing focus by eKeyboard. Fixed open command in eKeyboard. Changed Esc button action in eKeyboard. Updated jquery.keyboard.min.js.\n2017-01-31 Added setting text parser in Table module\n2017-01-24 Added events for drawing commands in Grid Scene module\n2017-01-24 Fixed problems on iPad in Paragraph module\n2017-01-24 Fixed saving changes in Choice module\n2017-01-16 Fixed display bug in animation module on android 5.1.1 and 5.0.2\n2017-01-16 Fixed isVisible property on Safari in Iframe module\n2017-01-11 Added Enable pages property in Hierarchical Lesson Report module\n2017-01-11 Fixed problem with updating additional styles and displaying pages in Navigation Bar module\n2017-01-04 Fixed rendering LaTeX afetr showing answers in Math module\n2016-12-29 Fixed issue with doubled events in Table module\n2016-12-29 Fixed saving state of drawings in IWB Toolbar\n2016-12-22 Added Animated gif refresh property in Layered Image module\n2016-12-20 Fixed counting score after showing answers in Math module\n2016-12-19 Fixed counting score after showing answers in Writing Calculation module\n2016-12-14 Removed random values from report when stylus is of in LearnPen Report module\n2016-12-12 Added Open external link in property in Glossary module\n2016-12-01 Added confirmation box in Reset module\n2016-12-01 Added refreshing animated gifs in Image module\n2016-12-01 Fixed problems with coloring ans saving state in Text Coloring module\n2016-11-24 Fixed problem with dragging in Clock addon.\n2016-11-24 Added multiple answers in filled gap.\n2016-11-23 Added outstretch height command to player controller\n2016-11-22 Added looping in Video module\n2016-11-21 Fixed refreshing animated gifs in Layered Image module\n2016-11-21 Added isAttempted command in Paragraph module\n2016-11-17 Added continous events in Clock module\n2016-11-17 Fixed calculating max score in Choice module\n2016-11-16 Removed unicode special characters from Shape Tracing comments\n2016-11-08 Fixed width calculating in Table addon.\n2016-11-03 Fixed showAnswer, setShowErrorMode bugs in Grid Scene addon.\n2016-11-03 Added Blockly Code Editor addon. Fixed bugs in Grid Scene. Added property Editable Select and Select for list.\n2016-10-27 Added hiding answers after reset in Image Gap module\n2016-10-27 Fixed operating on module in popup page in Connection and eKeyboard modules\n2016-10-27 Fixed setting space after punctuation marks in Text Coloring module\n2016-10-26 Fixed problem with saving state in Paragraph module\n2016-10-25 Fixed issue with setting element to invisible module in Multiplagap module\n2016-10-24 Fixed saving and closing notes in IWB Toolbar\n2016-10-21 Fixed issue with pen and marker tools in IWB Toolbar module\n2016-10-07 Added new addon Text Coloring, added new commons ErrorUtils and fixed SAO depedencies\n2016-10-04 Added getText command in Paragraph module\n2016-09-29 Fixed setting state in Paragraph module\n2016-09-27 Fixed displaying animation with transparent background in Animation module\n2016-09-26 Added events on pause and pause command in Audio module\n2016-09-21 Added test from Programming Code Prompt\n2016-09-21 Added Progamming Code Prompt addon. Added Grid Scene addon. Added static list property.\n2016-09-21 Fixed issue with moved droppable area in Connection module\n2016-09-21 Fixed setting gap size in Table module\n2016-09-19 Fixed issue with missing arguments in function in Paragraph addon\n2016-09-19 Added default property to addons: Table, Puzzle, feedback, PieChart, TrueFalse, TextAudio, MenuPanel, MultiAdui, Text_Selection, Variable_storage, text_identification, Double_State_Button, WrittingCalculations, Single_state_Button, SelectableAddonsBinder, Multiple_Audio_Controls_Binder\n2016-09-14 Added new property buttons width and buttons number in Assessments Navigation Bar addon\n2016-09-08 Fixed checking pages scores in Navigation Bar module\n2016-08-30 Fixed issue with relative urls in css and eKeyboard styling\n2016-08-30 Added function addonIsLoaded to Content, Fixed bug with thumbnail in YouTube Addon\n2016-08-30 Added hiding subtitles in Video module\n2016-08-29 Fixed problem with Player crashes when properties \"static header\" / \"static footer\" are marked and lesson doesn't have header / footer\n2016-08-24 Added notification functions and pages limit to Content.\n2016-08-19 Updated tinymce library from version 4.0b2 to 4.4.0, fixed memory leaks issues in Paragraph and Paragraph_eKeyboard\n2016-08-18 Fixed ant build scripts issues with paths for Ubuntu platform\n2016-08-18 Added fetching all libraries in 1 reuqest, addons xml loaded in 1 request\n2016-08-11 Added exchange URL to scheme-less URL in addon descriptor factory\n2016-08-09 Added new addon IFrame\n2016-08-04 Added Target type property in External Link Button module\n2016-08-03 Fixed displaying viewBox in SVG module\n2016-08-03 Fixed checking answers in Memo Game module\n2016-08-02 Added compiled Commons library in version 4.0.0 to icplayer libs\n2016-08-02 Removing loading-screen from commons\n2016-08-01 Added new property to keep wrong marks in Memo Gama module\n2016-08-01 Fixed displaying coordinates in editor in Line Selection module\n2016-07-27 Fixed problem with removing listeners in Source List\n2016-07-27 Fixed problem with sending events in Page Score Counter module\n2016-07-27 Fixed displaying watermark in Image Viewer module\n2016-07-22 Fixed memory leaks in TextAudio and Audio module\n2016-07-21 Fixed issue with static footer when lesson is in iframe\n2016-07-19 Fixed issue with https in Vimeo module\n2016-07-13 Added removeWrongColors command in Connection module\n2016-07-08 Added dragging line in Connection module\n2016-07-07 Added show/hide commands in Memo Game module\n2016-07-06 Fixed issue with displaying score in Hierarchical Lesson Report\n2016-07-06 Fixed issues with static header and footer\n2016-07-04 Added positioning to Popup button\n2016-06-29 Removed sending event from drawRange commend from Line Number module\n2016-06-20 Added property Single Connection to PointsLines module\n2016-06-16 Fixed Memo Game crash in KeepAspect Image Mode\n2016-06-15 Added keyboard navigation to TrueFalse module\n2016-06-13 Added scrolling window to active module in keyboard navigation\n2016-06-10 Added ValueChange Event to ZoomImage module\n2016-06-07 Added fixes to Fraction Binder modules\n2016-06-07 Added commend disable do Connection module\n2016-06-07 Added new version of Figure Drawing module\n2016-06-06 Improved usability of CrossWord addon\n2016-06-02 Fixed issue with LearnPen_Report fetching data from drawing addons\n2016-06-02 Added Remove dragged element property to Connection module\n2016-06-01 Added allOK event and command in Math module\n2016-06-01 Added disable/enable commands in Image Identification module\n2016-06-01 Added disable/enable commands in Text Identification module\n2016-06-01 Added parsing rendered definition gaps to gaps syntax\n2016-06-01 Fixed tests in Video module\n2016-06-01 Fixed problem with setting poster on Firefox in Video module\n2016-05-30 Fixed sending allOK event in Crossword module\n2016-05-25 Added parsing for views of gaps in editor\n2016-05-23 Fixed adding empty class to wrong element in Text Identification module\n2016-05-23 Added playing event in Audio and Video modules\n2016-05-18 Added reseting poster before adding new one in Video module\n2016-05-18 Added showPopup and closePopup commands\n2016-05-13 Added new addon Hierarchical Table of Contents\n2016-05-13 Added User action events property in Text module\n2016-05-10 Added class on hover in Image Identification module\n2016-05-10 Fixed issue with indexing pages in DIsable Score Pages in HLR module\n2016-05-09 Added show/hide commands in Text Identification module\n2016-05-06 Fixed rendering LaTeX in draggable gaps in Text module\n2016-05-05 Optimized state in IWB Toolbar\n2016-05-04 Fixed setting popup position\n2016-05-04 Added blocking wrong answers in Image Identification module\n2016-05-04 Added new event to CrossWord adddon - CorrectWord\n2016-04-26 Fixed issue with hide answers in Multiplegap module\n2016-04-26 Fixed issue with sending event in Submit module\n2016-04-25 Added blocking wrong answers in PlotsLines module\n2016-04-25 Fixed issue with non displaying coordinations in PointsLines module\n2016-04-25 Added blocking wrong answers in MultipleGap module\n2016-04-22 Added blocking wrong answers for editable gaps in Text module\n2016-04-22 Fixed tests in Crossword module\n2016-04-21 Added Color correct property in Coloring module\n2016-04-19 Added blocking wrong answers in Crossword module\n2016-04-19 Fixed memory leaks in IWB_Toolbar module and added destroy method to zoom.js\n2016-04-19 Added property weight to page\n2016-04-18 Added blocking wrong answers in Image Gap module\n2016-04-18 Added blocking wrong answers in Connection module\n2016-04-14 Added blocking wrong answers in Text Identification module\n2016-04-14 Added blocking wrong answers in Text module\n2016-04-13 Fixed rendering latex in Text module\n2016-04-11 Added sending continuous events and stick steps in Slider module\n2016-04-08 Fixed dragging element in Ordering module\n2016-04-08 Added french layout to Paragraph\n2016-04-08 Added list and combo views in Table of Contents module\n2016-04-07 Added exporting report to file in Print Report module\n2016-04-07 Added Reset, CheckAnswers and ShowAnswers to Keyboard Navigation\n2016-04-07 Added method getModulesAsJS to player's API\n2016-04-06 Fixed tests in Table module\n2016-04-06 Fixed issue with inserting Image_Viewer module\n2016-04-06 Fixed issue with changing gap width in editor in Table module\n2016-04-05 Fixed issue with showing module when lesson is in iframe in Glossary module\n2016-04-04 Fixed issue with appearing native keyboard in eKeyboard module on Android\n2016-03-30 Fixed issue with droppable gaps in Text module\n2016-03-24 Added new module Variable Storage\n2016-03-21 Fixed scrolling and text wrapping on iOS in Paragraph module\n2016-03-18 Added displaying current date in Print Report module\n2016-03-18 Fixed issue with class after changing page in Table module\n2016-03-18 Fixed issue with variables in Math module\n2016-03-18 Added isAllOK command to Writing Calculation module\n2016-03-17 Added labels for showing documentation in editor\n2016-03-16 Added show and hide methods in Magic Box module\n2016-03-16 Added mode on and off to keyboard navigation\n2016-03-15 Fixed displaying background in Memo Game module\n2016-03-15 Fixed reseting axis values position in Plot module\n2016-03-14 Fixed issue with reset in Audio module\n2016-03-14 Added keyboard navigation\n2016-03-10 Secured adding handlers for creating presenters\n2016-03-09 Fixed issue with inline styles\n2016-03-07 Added loading all dictionaries.\n2016-03-04 Fixed zoom in IWB Toolbar module\n2016-03-04 Added setting last page as separated page in Navigation Bar module\n2016-03-03 Fixed memory leaks in Audio module\n2016-03-03 Fixed memory leaks in TextAudio module\n2016-03-03 Fixed issue with id selector in Text module\n2016-03-01 Fixed memory leaks in Text with draggable gaps, Source List and Show Answers\n2016-03-01 Added ignoring inline styles\n2016-03-01 Added positioning of values on x and y axis in Plot module\n2016-02-24 Fixed displaying ranges after reset in Animated Page Progress module\n2016-02-22 Added possibility to define smaller steps in Line Number module\n2016-02-17 Added setting first page as cover in Navigation Bar module\n2016-02-15 Added reading values only from canvas in LearnPen Report module\n2016-02-10 Changed page name in dictionary\n2016-02-10 Fixed displaying alert in Advanced Connector module\n2016-02-10 Added isAllOK method and event in Text Identification module\n2016-02-10 Fixed Check mode and Show Answers mode in Text and Writing Calculations modules\n2016-02-04 Fixed getting error count in Hangman module\n2016-02-03 Fixed setting state in Basic Math Gaps module\n2016-02-03 Fixed issue with printing graphical backgrounds in Print Report module\n2016-02-02 Added adding class during video playback in Video module\n2016-02-01 Fixed issue with setting state in Multiple Audio Binder module\n2016-01-27 Fixed issue with adding video source to addon model\n2016-01-27 Fixed issue with removing module in group\n2016-01-25 Added global state in Show Answers module\n2016-01-20 Fixed adding class when page score is 100% in Navigation Bar module\n2016-01-19 Fixed issue with Keep Original Order mode and dropdowngaps in Text module\n2016-01-19 Fixed issue with Source List and Text gaps in Text module\n2016-01-18 Fixed issue with double ShowAnswers execution in Multiplegap module\n2016-01-18 Added new module Print Report\n2016-01-18 Fixed test in LearnPen Report module\n2016-01-15 Changed default values of correct range in LearnPen Report module\n2016-01-15 Fixed changing module ID\n2016-01-14 Fixed issue with show answers and check mode in Text module\n2016-01-13 Fixed issue with dragging when check mode is on in Ordering module\n2016-01-12 Fixed issue with dragged elements and them scores in MultipleGap module\n2016-01-12 Added Blocked Lines property in Point And Lines module\n2016-01-11 Added custom event on uncheck in LimitedCheck module\n2016-01-11 Added pause command to MultiAudio\n2016-01-08 Added property Empty Answer to Math module\n2016-01-08 Added graduated score to Ordering module\n2016-01-08 Added select and deselect commands in Line Selection module\n2016-01-07 Fixed issue with Video on Chrome\n2016-01-07 Added isAllOK command to Fractions module\n2016-01-07 Added isAllOK command to Graph module\n2016-01-05 Fixed problem with MathJax in Table module\n2016-01-05 Added horizontal layout property to Choice module\n2015-12-23 Fixed problem with reseting visibility in Text Selection module\n2015-12-21 Added image modes in Memo Game module\n2015-12-18 Fixed problem with stopping audio on mLibro in Audio module\n2015-12-17 Fixed error messages in Standard Shapes module\n2015-12-16 Fixed tests in Shape Tracing\n2015-12-16 Added displaying coordinates in editor in BoardGame, PointsLine, LineSelection, FigureDrawing and ConnectingDots modules\n2015-12-15 Fixed issue with slow drawing in Shape Tracing\n2015-12-15 Fixed issue with rulers in editor\n2015-12-15 Fixed problem withs Show Answers mode in TrueFalse module\n2015-12-11 Added show and hide commands in Connection and TrueFalse modules\n2015-12-10 Added optional parameter to isOrderCorrect function in Shape Tracing module\n2015-12-10 Fixed setting item after reset and changing page in MultiAudio module\n2015-12-09 Fixed issue with detecting boundaries is Shape Tracing\n2015-12-09 Added new property Value type in Text module\n2015-12-08 Added Time measurement feature to Player\n2015-12-08 Added rulers handling\n2015-12-08 Fixed issue with draggable gaps with LaTeX in Text module\n2015-12-04 Added Is not activity and Enable more digits in gap properties in Writing Calculations module\n2015-12-03 Fixed issue with Limited Check and Check in Basic Math Gaps module\n2015-12-02 Added possibility of displaying page from commons\n2015-12-01 Added math gaps in Table module\n2015-11-30 Added ShowAnswers to Plot module\n2015-11-27 Fixed issue with editor height in Paragraph module\n2015-11-25 Added displaying coordinates in editor in Coloring and Shape Tracing modules\n2015-11-24 Fixed issue with show answers mode in Choice module\n2015-11-24 Fixed issue with displaying columns in Connection module\n2015-11-19 Fixed issue with adding class in Image Identification module\n2015-11-19 Fixed issue with class in draggable gap in Table module\n2015-11-13 Added isAllOK event and command in Image Gap module\n2015-11-10 Fixed issue with desktop browsers having mobile events in Image Identification, Shape Tracing, Drawing modules\n2015-11-10 Fixed issue with incorrect values and visibility in LearnPen(Data/Report) module\n2015-11-06 Fixed issue with allAttempted class in Assesment Navigation Bar module\n2015-11-05 Fixed issue with zooming in Programmed Drawing module\n2015-11-03 Added IsNotActivity property to MemoGame module\n2015-11-03 Added changes to Clock module\n2015-11-02 Added stop command to YouTube module\n2015-10-30 Upgraded Swiffy library to version 7.4\n2015-10-30 Added commend getColor(x, y) and property \"Disable filling on click\" to Coloring module\n2015-10-30 Added sending event on click in Open Popup Button and Close Popup Button\n2015-10-30 Added reset command in True False module\n2015-10-30 Added new module Programmed Drawing\n2015-10-30 Fixed displaying correct and wrong icons in Coloring module\n2015-10-28 Fixed issue after drop gap to filledDraggableGap in Text module\n2015-10-28 Added calling functionality by command in Lesson Reset module\n2015-10-28 Fixed issue with checking attempted modules in Sumbit and Assesment Navigation Bar modules\n2015-10-28 Added new command markGapAsEmpty to dropdowngaps in Text module\n2015-10-26 Fixed displaying data on Firefox in Count and Graph module\n2015-10-22 Fixed addon properties types (from file to audio and image). Introduced new property type - video\n2015-10-22 Fixed styling module in Show Answers mode in Count and Graph module\n2015-10-21 Fixed book view configuration\n2015-10-19 Added new property Clear placeholder on focus to Text module\n2015-10-15 Fixed issue with state in Assessments Navigation Bar module\n2015-10-13 Added possibility move to common page in GoToPage Module\n2015-10-12 Added disabled events configuration.\n2015-10-09 Fixed displaying data in LearnPen Data module\n2015-10-09 Fixed issue with active tools after changing lesson page in IWB Toolbar module\n2015-10-09 Fixed sending notAllAttempted event in Submit module\n2015-10-09 Added commands markOptionAs... and new classes on their execute to Choice module\n2015-10-09 Added property Is not an activity in Count and Graph module\n2015-10-08 Added commands show/hide in Submit module\n2015-10-07 Fixed setting visibility and added new version of Swiffy library in Swiffy Animation module\n2015-10-06 Fixed problem with displaying data in Graph module\n2015-10-05 Fixed isAttempted action in Image Gap module\n2015-10-05 Added isAllOK command to Table module\n2015-10-05 Added support for calculating time that user spent on each page to PlayerUtils\n2015-10-02 Fixed problem with displaying percentage score in LearnPen Report module\n2015-09-30 Added increaseMistakeCounter command\n2015-09-28 Added classes on show answers and show errors mode in Line Number module\n2015-09-28 Added property Page Attempted in Assesment Navigation Bar module\n2015-09-28 Fixed saving visibility in state after reset in Text module\n2015-09-23 Fixed reading-out data from sensors in LearnPen Report module\n2015-09-23 Fixed disabling gap after checking answers in Image Gap module\n2015-09-22 Added handling reset in Page Rating module\n2015-09-16 Fixed issue with checking answer in Is Equation mode in Basic Math Gaps module\n2015-09-16 Fixed check mode and show answers mode connected with Math module in Table module\n2015-09-15 Fixed problem with coloring empty dropdown gaps in Text module\n2015-09-11 Fixed problem with disabled gaps in show answers mode in Text module\n2015-09-11 Fixed problem with displaying page numbers on mLibro in Page Icon Toolbar\n2015-09-11 Fixed problem with setting gap width in Table module\n2015-09-09 Added changes to Sudoku, Fractions modules and added new module Fractions Binder\n2015-09-09 Fixed issue with wrong range image after reset in Animated Lesson Progress\n2015-09-08 Fixed issue with class on hover after reset in Image Identification module\n2015-09-08 Added incrementing check counter in Show Answers module\n2015-09-01 Fixed issue with earlier end of movie in Video module\n2015-08-27 Fixed issue with draggable element in Text module\n2015-08-25 Fixed issue with receiving state without droppedElements in Text module\n2015-08-25 Added Show Answers mode in Hangman module\n2015-08-25 Fixed getting maxScore by page name on page loaded event.\n2015-08-24 Fixed problem with displaying initial image after reset in Animated Page Progress module\n2015-08-21 Fixed problem with dragging in Slider module\n2015-08-21 Fixed problem with checking answers in Basic Math Gaps and Table modules\n2015-08-21 Added updating ranges on check in Animated Page Progress module\n2015-08-21 Fixed sending score in event in Multiple Gap module\n2015-08-20 Fixed adding classes to previous and next buttons in Navigation Bar module\n2015-08-19 Added sending ValueChanged event in Limited Reset module\n2015-08-19 Fixed issue with showing answers in check mode in Hangman module.\n2015-08-18 Added navigating to page by number in Go To Page Button module\n2015-08-18 Fixed issue with checking in not activity mode in Line Number module\n2015-08-18 Updated Swiffy library to version 7.3.0\n2015-08-13 Fixed issue with wrong position of draggable item in Source List module\n2015-08-13 Fixed issue with error in setting state on mLibro in IWB Toolbar module\n2015-08-13 Fixed issue with playing audio and video after clicking in dropdown button in Audio, TextAudio and Video modules\n2015-08-12 Added handling draggable object with HTML structure and classes from Source List in Basic Math Gaps, Table and Text\n2015-08-12 Added getting HTML structure and css classes from Source List in draggable object\n2015-08-11 Fixed issue with adding images in Animated Page Progress module\n2015-08-07 Added adding equals sign in Writing Calculation module\n2015-08-07 Fixed issue with checking answers with white spaces in Basic Math Gaps module\n2015-08-07 Fixed issue with checking answer in editor Preview\n2015-08-04 Fixed issue with reseting and checking editable gaps in Basic Math Gaps and Table modules\n2015-08-04 Fixed issue with closing bottom panel in IWB Toolbar module\n2015-07-30 Fixed issue with errors when module is empty in Magic Boxes module\n2015-07-29 Fixed issue with checking score in show answers mode in Animated Lesson Progress and Animated Page Progress modules\n2015-07-29 Fixed issue with adding class on reset in Text module\n2015-07-28 Added drag&drop feature in Table module\n2015-07-28 Corrected mistakes in dictionary\n2015-07-28 Added CSS classes to draggable gaps in Basic Math Gaps\n2015-07-27 Fixed issue with checking score and show answers in Navigation Bar module\n2015-07-27 Added group scoring\n2015-07-27 Fixed issue with check mode in Graph module\n2015-07-27 Added show answers mode in Graph module\n2015-07-24 Added sending score in event data in Image Viewer module\n2015-07-23 Added compiled Commons library in version 3.0.1 to icplayer libs\n2015-07-23 Fixed issue that filled gap was not sending ItemReturned event on click with DraggableDroppableObject  in Commons (now in version 3.0.1)\n2015-07-23 Fixed issue with error after reset and show answers in Limited Check module\n2015-07-22 Added show/hide commands in YouTube module\n2015-07-21 Fixed issue with alert on Safari Windows in Swiffy Animation module\n2015-07-21 Fixed issue with wrong checking in Shape Tracing module\n2015-07-21 Fixed parsing and styling in Text module\n2015-07-21 Fixed issue with numerating gaps in Writing Calculation module\n2015-07-21 Fixed unit tests in Text Audio & Text Selection modules\n2015-07-20 Changed defining and parsing gaps in Show Answers in Math module\n2015-07-16 Added new module Assessments Navigation Bar\n2015-07-15 Added new module Board Game\n2015-07-15 Added show answers mode to Math module connected with Text, Table and Image Gap modules\n2015-07-10 Added selection by plotting in Magic Boxes module\n2015-07-09 Fixed issue with wrong input in order property in Ordering module\n2015-07-07 Added checking by words in Magic Boxes module\n2015-07-06 Added drag&drop feature and fixed issue with events in isEquation mode in Basic Math Gaps module\n2015-07-06 Added compiled Commons library in version 3.0.0 to icplayer libs\n2015-07-06 Added StatefullAddonObject: State machine for check, reset, show/hide answers and fixed minor issues with DraggableDroppableObject in Commons (now in version 3.0.0)\n2015-07-03 Added show and hide commands to Zoom Image module\n2015-07-03 Added static header and static footer\n2015-07-02 Added Assets Service\n2015-07-02 Added new module Line Selection\n2015-07-01 Added Horizontal Bar and reading out the data from the individual Squeeze sensors in LearnPen Report module\n2015-07-01 Fixed issue with custom classes in Editor\n2015-06-30 Fixed issue with dragging in multiple gap module\n2015-06-26 Fixed issue with few Paragraphs with placeholders on the same page\n2015-06-26 Fixed issue with reset in IWB Toolbar\n2015-06-26 Fixed issue with displaying full screen image in Zoom Image module\n2015-06-25 Added handling offline connection in YouTube module\n2015-06-25 Fixed dragging on Windows 8 in Graph module\n2015-06-24 Fixed issue with transparency on Check and Show Answers in Image Gap module\n2015-06-24 Fixed issue with dragging in Sourcelist and Imagesource modules\n2015-06-23 Fixed issue with controls on iPad in video module\n2015-06-23 Added changes to Clock module\n2015-06-23 Fixed issue with erasing in IWB Toolbar module\n2015-06-23 Fixed issue with displaying addon in player and preview in Page Score Counter module\n2015-06-18 Fixed issue with displaying uppercase letters in crossword module\n2015-06-17 Added new module Selectable Addons Binder\n2015-06-17 Fixed issue with MathJax in Memo Game module\n2015-06-17 Added changes in Fractions module\n2015-06-16 Added changes in Figure Drawing module\n2015-06-16 Fixed issue with dragging in SourceList and ImageSource modules\n2015-06-15 Added compiled Commons library in version 2.0.0 to icplayer libs\n2015-06-15 Added DraggableDroppableObject: New object which is draggable and droppable - in Commons (now in version 2.0.0)\n2015-06-12 Added new module Lesson Reset\n2015-06-12 Fixed issue with dragging empty gap in Text module\n2015-06-11 Added fillArea and clearArea command to Coloring module\n2015-06-10 Fixed issue with returning item to the source in copy mode\n2015-06-09 Fixed issue with dragging in Show Answers mode in Multiple Gap module\n2015-06-09 Added new properties 'Number of repetitions' and 'ID repeated element'\n2015-06-08 Fixed issue with scoring in Line Number module\n2015-06-08 Added new property Don't show ranges to Line Number module\n2015-06-08 Fixed issue with parsing HTML tags in Text Selection module\n2015-06-03 Fixed issue with displaying eKeyboard in disabled gaps in eKeyboard module\n2015-06-03 Fixed issue with missing signs in Text Selection module\n2015-06-03 Added assetsService and handling SVG files in Image module\n2015-06-02 Fixed issue with duplicating gaps when elements from Multiple gap are dragged in Editor\n2015-06-02 Added new command isOrderCorrect to Shape Tracing module\n2015-06-01 Added enable, disable commands and isDisabled property in Image Gap and Image Source modules\n2015-06-01 Fixed issue with check and reset in Basic Math Gaps module\n2015-05-29 Fixed issue with blocking scoring after show answers and reset in Connection module\n2015-05-28 Added new way to close full screen image in Zoom Image module\n2015-05-28 Added commutativy property to Writing Calculations module\n2015-05-28 Added commands show and hide to Shape module\n2015-05-27 Fixed issue with input align in Writing Calculations module\n2015-05-27 Fixed issue with draggable element in editor in Ordering module\n2015-05-27 Fixed adding custom classes in editor in IWB Toolbar module\n2015-05-27 Fixed issue with text parsing and state in Text Selection module\n2015-05-25 Fixed counting errors in Count and Graph module\n2015-05-25 Fixed issue with ShowAnswers in SourceList module\n2015-05-25 Fixed issue with changing frames in Image Viewer module\n2015-05-22 Fixed issue with reset in ImageSource and SourceList modules\n2015-05-20 Added new property gap type and drag feature in \"Basic Math Gaps\" module\n2015-05-20 Fixed issue with nextStep command in Slider module\n2015-05-20 Added isDelayed property to eventBus addEventListener API\n2015-05-20 Added getModulesScore() command to Limited Check module\n2015-05-20 Fixed issue with dragging element to the same MultipleGap\n2015-05-20 Fixed issue with Reset in Coloring module\n2015-05-20 Fixed issue with dragging to filled gaps Text and ImageGap modules\n2015-05-19 Fixed issue with fire PageLoaded events from previous pages\n2015-05-19 Added handling HideAnswers event in Show Answers module\n2015-05-19 Fixed handling HideAnswers events in Choice and True/False modules\n2015-05-19 Added new modules - Limited Check and Limited Reset\n2015-05-19 Fixed issue with slider on Desktop in Slider module\n2015-05-18 Fixed reporting individual page score in JavaScript API\n2015-05-18 Fixed issues with isAllOk in Shape Tracing module\n2015-05-13 Fixed issue with capturing events from all pages\n2015-05-14 Added drag feature to elements dropped to modules: Text, ImageGap & MultipleGap\n2015-05-14 Added handling draggable gaps in Table module\n2015-05-13 Fixed issue with height of PagePopupPanel glass\n2015-05-13 Fixed issue with adding custom class to panel in IWB Toolbar module\n2015-05-12 Fixed issue with loading on iOS 8 in Count and Graph module\n2015-05-11 Fixed visual issues after reset in Line Number module\n2015-05-07 Fixed issue with ScoreType:first\n2015-05-07 Added new events to Crossword module\n2015-05-07 Added new property \"Keyboard letters order\" in Hangman module\n2015-05-07 Fixed issue with reset button on IE and issue with missing labels in \"memo game\" module\n2015-05-06 Fixed issue with scores and their view in Hierarchical Lesson Report\n2015-05-06 Fixed issue with compatibility Drawing and IWB in IWBToolbar module\n2015-05-04 Added Show Answers mode in Line Number module\n2015-05-04 Changed names of classes in Check mode in Connection module\n2015-05-04 Added Show Answers mode in Image Viewer module\n2015-05-04 Fixed issue with Randomizing in Choice module\n2015-04-30 Added drag&drop feature to Connection module\n2015-04-30 Added Reset command to Puzzle module\n2015-04-29 Added saving color and thickness after closing the tool in IWB Toolbar module\n2015-04-29 Added 'correct' and 'wrong' classes in Check mode in Connection module\n2015-04-29 Added LearnPen Data module\n2015-04-27 Added reset command to Ordering module\n2015-04-23 Fixed issue with button handlers in IWB Toolbar module\n2015-04-23 Added property \"Placeholder text\" in Paragraph module\n2015-04-23 Fixed issue with Show Answers in Not Activity mode in Text Selection module\n2015-04-21 Fixed issue with math Gaps in Text module\n2015-04-21 Fixed issue with ShowAnswers in Text module\n2015-04-21 Fixed issue with parsing of mathgaps having editable syntax in Text module\n2015-04-20 Fixed issue with moving slider on zoomed page in Slider module\n2015-04-17 Fixed issue with gap causing crashing of Editor in Text module\n2015-04-17 Added Italian language to eKeyboard module\n2015-04-17 Fixed issue with rounding seconds in TextAudio module\n2015-04-17 Fixed issue with showing boundaries in editor and scoring in Chrome in Shape Tracing module\n2015-04-16 Fixed issue with isOptionSelected method for Random Mode in Choice module\n2015-04-15 Fixed issue with parsing text in Text Selection module\n2015-04-15 Deleted changes in css classes in Line Number module\n2015-04-15 Added drag&drop feature to Ordering module\n2015-04-15 Added property Hide default controls to Video module\n2015-04-15 Added Is Not Activity property to Text Selection module\n2015-04-14 Fixed issue with positioning axis elements and fixed issue with axis x values property in Line Number module\n2015-04-14 Fixed issue with PopupPanelGlass in PopupPage\n2015-04-13 Added sending event after pair matching in Memo Game module\n2015-04-13 Fixed issue with rounding times in Text Audio module\n2015-04-09 Fixed issue with random noises in LearnPen_Report module\n2015-04-09 Fixed issue with state restoring in Shape Tracing module\n2015-04-09 Fixed issue with label positions in full screen mode in Video module\n2015-04-08 Added isAllOK method to Choice module\n2015-04-08 Added possibility to add tips in Hangman module\n2015-04-08 Fixed issue with css classes in Line Number module\n2015-04-07 Fixed issue with hidden label in Video module\n2015-04-04 Added new commands: descentsFromShape, numberOfLines, pointsMissed and getDirections to Shape Tracing module\n2015-04-03 Added new Addon LearnPen Report\n2015-04-02 Fixed issue with zoom on IE 10 in IWB Toolbar module\n2015-04-02 Fixed issue with input restriction in eKeyboard module\n2015-04-01 Fixed issue with eKeyboard cooperating with math gaps in eKeyboard module\n2015-04-01 Fixed issue with allLinesDrawn() command and added styles for different modes in Figure Drawing module\n2015-04-01 Fixed issue with draggable filledGap in Text module\n2015-03-31 Fixed playing words in TextAudio while zooming using IWB Toolbard module\n2015-03-31 Added getView() command to Shape module\n2015-03-31 Fixed issue with crashing browser on iOS in eKeyboard module\n2015-03-26 Fixed issue with setColor and nonremovable lines in Figure Drawing module\n2015-03-26 Fixed issue with playing event on Android 5.0 devices in Multi Audio module\n2015-03-25 Added Show slides property and positioning in Text Audio module\n2015-03-25 Fixed drawing logic, double events and added setEraserThickness, setMarkerThickness commands in IWB Toolbar module\n2015-03-23 Updated Google Swiffy library to ver. 7.2\n2015-03-23 Added show() and hide() commands in Source List module\n2015-03-23 Fixed issue with lines interpretation in Figure Drawing module properties\n2015-03-20 Fixed issue with Chapters in Hierarchical Lesson Report module\n2015-03-20 Added new controls in TextAudio module\n2015-03-19 Added Figure Drawing module\n2015-03-18 Added new area type and fixed issue with show answers in Coloring module\n2015-03-17 Fixed issue with preview of editor in Hierarchical Lesson Report\n2015-03-16 Added show() and hide() commands to Image Source module.\n2015-03-16 Fixed issue with custom class in Check Answers module\n2015-03-13 Fixed issue with mode Keep Aspect on IE9, 10 in Image module\n2015-03-13 Fixed issue with sending events in Shape Tracing module\n2015-03-12 Fixed issue with clicking on Android 4.4.2 in Image Identification module\n2015-03-12 Fixed issue with playing audio on Firefox 19 in Slideshow module\n2015-03-12 Fixed Show Answers mode in Table module\n2015-03-11 Added show() and hide() commands to Multiple Gap module\n2015-03-11 Fixed problem with reacting to ShowAnswers event in Multiple Gap module connected to Image Source modules\n2015-03-09 Added reset command in Image Gap module\n2015-03-09 Fixed issue with setting opacity, drawing and double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3, 4.4.2 in Shape Tracing module\n2015-03-09 Fixed issue with restoring state in IWB Toolbar module\n2015-03-06 Fixed issue with restoring state in older content that uses Fractions module\n2015-03-06 Fixed issue with state in Double State Button module\n2015-03-06 Fixed calculating results for just part of lesson in Hierarchical Lesson Report module\n2015-03-05 Fixed issue with commands play/stop/next/previous in Slideshow module\n2015-03-05 Fixed issue with using play command on iOS 7 and iOS 8 in Video module\n2015-03-04 Fixed issue with double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3, 4.4.2 in Connection module\n2015-03-02 Fixed issues with parsing HTML in Text Audio module\n2015-02-27 Fixed issue with serving of mixed content by HTTPS and HTTP in YouTube module\n2015-02-27 Fixed issue with keeping state disable/enable in filledGap in Text module\n2015-02-27 Fixed issue with double lines in Android 4.1.1, 4.1.2, 4.2.2, 4.3 and 4.4.2 in Drawing module\n2015-02-26 Added changes to Fraction module\n2015-02-26 Added new commands moveTo, next, previous, play, pause, stop in Slideshow module\n2015-02-26 Fixed issue with opacity in Drawing module\n2015-02-25 Fixed issue with layout when LearnPen Drawing module is on page\n2015-02-25 Added new command setEraserOff to Shape Tracing and Drawing modules\n2015-02-25 Fixed issue with Step property in Line Number module.\n2015-02-25 Added Show Answers to Sudoku module\n2015-02-23 Fixed issue with disableGap command in Text module\n2015-02-23 Added new command setOpacity to Shape Tracing and Drawing modules\n2015-02-23 Added French special characters to eKeyboard module\n2015-02-23 Fixed CSS styles in Hierarchical Lesson Report module\n2015-02-23 Added new property \"Y axis values\" in Graph module\n2015-02-23 Fixed displaying double image on Android in Viewer 3D module\n2015-02-20 Changed loading gif size in Text Audio module\n2015-02-20 Fixed issue with Show Answers in Dropdown gap in Text module\n2015-02-19 Fixed problem with Show Answers in Image Gap module\n2015-02-19 Fixed problem with Show Answers in Text module\n2015-02-19 Fixed rendering LaTeX in Video module\n2015-02-18 Fixed issue with working module on header in Animated Progress module\n2015-02-18 Added property Is Click Disabled in Text Audio module\n2015-02-18 Fixed rendering LaTeX in Double State Button module\n2015-02-18 Fixed CSS classes in Connecting Dots module\n2015-02-18 Added new property Keep state and position to IWB Toolbar\n2015-02-17 Fixed translation of properties in Count and Graph and Basic Math Gaps modules\n2015-02-17 Fixed setting visibility on IE9 in Double State Button module\n2015-02-17 Fixed issue with vocabulary files in Text Audio module\n2015-02-17 Fixed adding CSS classes in Shape Tracing module\n2015-02-17 Added Show Answers to Multiple Gap module\n2015-02-13 Fixed problem with changed visibility of drawing in IE9 and IE10\n2015-02-12 Fixed opacity property name in Drawing module\n2015-02-11 Fixed issue with playing vocabulary on second click in Text Audio module on iOS 8.1.3\n2015-02-11 Fixed issue with playing wrong words on first try in Text Audio module\n2015-02-10 Fixed parsing HTML in Text Audio module\n2015-02-10 Added \"Start from\" property in Page Counter module\n2015-02-09 Revert parsing HTML in Text Audio module\n2015-02-09 Added Is Not Activity property in Hangman module\n2015-02-09 Fixed counting score in Count and Graph module\n2015-02-09 Fixed reacting to Show Answers events in Double State Button and Single State Button modules\n2015-02-09 Added getView(), show() and hide() commands to Error Counter module\n2015-02-06 Added parsing HTML in Text Audio module\n2015-02-06 Fixed issue with Show Answer in Shape Tracing module\n2015-02-06 Added new css class to Basic Math Gaps module\n2015-02-06 Added Show Answers to Count and Graph module\n2015-02-06 Added new property Signs to to Basic Math Gaps module\n2015-02-05 Added translations for almost all remaining addons properties names\n2015-02-05 Fixed problem with scaling enlarged image in Zoom Image module\n2015-02-04 Changed icon and translated property names in Sudoku module\n2015-02-02 Fixed PageProgress score alignment when command Show is executed after ShowErrosEvent\n2015-02-02 Added getItem() command to Source List module\n2015-01-29 Fixed swiping the slides in Slideshow module\n2015-01-29 Added Menu Panel module\n2015-01-29 Added new property Gap width to Basic Math Gaps module\n2015-01-28 Added Show Answers to Memo Game module\n2015-01-26 Added Show Answers to Text Identification module\n2015-01-26 TextAudio supports play vocabulary from one merged audio file\n2015-01-23 Added Show Answers to Connecting Dots module\n2015-01-23 Fixed issue with Hide and Stand Area in IWB Toolbar\n2015-01-23 Fixed issue with backward compatibility in IWB Toolbar module\n2015-01-22 Added Show Answers to Magic Boxes module\n2015-01-22 Added Show Answers to Shape Tracing module\n2015-01-22 Changed visibility of drawing in IWB Toolbar module\n2015-01-20 Added translations of addons properties names\n2015-01-20 Fixed issue with ignore punctuation and accented letters in Text module\n2015-01-19 Added translations of addons names\n2015-01-16 Added show and hide commands to Ordering module\n2015-01-16 Fixed sending multiple events after reset and coloring fields in Coloring module\n2015-01-16 Moved zoom library code outside IWB Toolbar module\n2015-01-14 Added new property Custom Display to eKeyboard module\n2015-01-13 Updated Google Swiffy library to ver. 7.1\n2015-01-13 Added show and hide commands to SVG module\n2015-01-12 Added ability to choose starting point of presentation in Slideshow module\n2015-01-12 Fixed double click effect on mobile devices in IWB Toolbar module\n2015-01-09 Fixed Stand and Hide Area functions on mobile devices in IWB Toolbar module\n2015-01-08 Fixed notes on mobile devices in IWB Toolbar module\n2015-01-08 Added ShowAnswers to Fractions module\n2015-01-08 Added ShowAnswers to Clock module\n2015-01-07 Adapted tests to current module version in Video module\n2015-01-07 Fixed issue with removing class disable on switching to work mode in TrueFalse module\n2015-01-07 Adapted tests to current module version in Animated Lesson Progress module\n2015-01-02 Adapted tests to current module version in LearnPen Data module\n2015-01-02 Adapted tests to current module version in Custom Scoring module\n2015-01-02 Adapted tests to current module version in Image Viewer module\n2015-01-02 Adapted tests to current module version in Memo Game module\n2015-01-02 Adapted tests to current module version in Page Rating module\n2015-01-02 Adapted tests to current module version in Paragraph eKeyboard module\n2015-01-02 Adapted tests to current module version in Coloring module\n2015-01-02 Adapted tests to current module version in Paragraph module\n2015-01-02 Adapted tests to current module version in Text Selection module\n2015-01-02 Adapted tests to current module version in LearnPen module\n2015-01-02 Adapted tests to current module version in MultiAudio module\n2014-12-31 Fixed issue with visible state in Drawing module\n2014-12-30 Fixed issues with SCORM local resources in navigation bar and External Link Button module when lesson is run with external Player\n2014-12-30 Fixed issue with page preview URL pointing to SCORM local resource in navigation bar\n2014-12-30 Fixed issue with hiding whole contents of Table Of Contents\n2014-12-29 Fixed issue with URI pointing to SCORM local resource in External Link Button module\n2014-12-29 Fixed issue with checking answers in not activity mode in Connection module\n2014-12-29 Fixed issue with saving state in Slider module\n2014-12-29 Fixed issue with saving state in Layered Image module\n2014-12-29 Fixed issue with saving state in Image Viewer Button Controlled module\n2014-12-29 Fixed problem with stopwatch in IWB Toolbar module\n2014-12-29 Added new property Don't show pages to Table of Contents\n2014-12-24 Added information to pay ettention to the correct linking resources\n2014-12-22 Fixed issue with toggling bottom panels in IWB toolbar\n2014-12-19 Fixed problem with jumping to the next gap in eKeyboard module\n2014-12-18 Fixed calling commands on PageLoaded event in Layered Image module\n2014-12-18 Fixed translation of event properties in Image Gap module\n2014-12-18 Fixed problem with playing MultiAudio on iPad\n2014-12-16 Fixed issues with zooming after deactivating Zoom feature and color and thickness panels visibility in IWB Toolbar module\n2014-12-16 Fixed problem with moveToFrame command in ImageViewer addon\n2014-12-11 Fixed formatting text with bolds, italics etc. in Text Selection module\n2014-12-10 Fixed issue with changing audio on iOS and android in Multi Audio module\n2014-12-08 Fixed issue with touch/mouse coordinates, issue with zoom and more in IWB toolbar\n2014-12-03 Fixed problem with setting state in Image Viewer addon\n2014-12-02 Fixed problem with getting score from Image Identification addon\n2014-12-01 Added changes to Swiffy Animation module\n2014-12-01 Fixed adding class navigationbar-page-ok in Navigation Bar module\n2014-11-28 Fixed problem with animation in SVG format\n2014-11-27 Added Show for pen and Show for marker properties in IWB toolbar\n2014-11-27 Fixed problem with rewind to start movie in Android 4.1 in Video module\n2014-11-27 Fixed problem with view of Text identification module in editor\n2014-11-27 Fixed problem with rewind to start movie in Video module\n2014-11-27 Added setPenColor and setDefaultPenThickness commands to IWB toolbar\n2014-11-27 Fixed problem with jumpTo in Multi Audio module\n2014-11-26 Fixed problem with hiding in Video module\n2014-11-26 Fixed problem with images in Multiple gap and Image gap module\n2014-11-24 Added Vocabulary audio files properties to Text Audio\n2014-11-20 Added Fixed position property, changed displaying rulers and fixed double page view in IWB Toolbar module\n2014-11-19 Player saves state of addons in header and footer\n2014-11-18 Fixed problem with editor preview in Hierarchical Lesson Report\n2014-11-17 Fixed problem with the second advent of Popup\n2014-11-14 Fixed issue with skipping words in Text Audio\n2014-11-13 Fixed problem with play action and ended event in Video module\n2014-11-13 Added isAllOK method and allOK event in Hangman module\n2014-11-12 New Player Commands: setNavigationPanelsAutomaticAppearance, showNavigationPanels, hideNavigationPanels\n2014-11-06 Added new property \"Individual fragment playback\" to Text Audio module\n2014-11-05 Fixed problem with isAttempted in Math module connected with dropdown gaps\n2014-11-04 Fixed problem with saving visibility in Paragraph and Paragraph Keyboard modules\n2014-11-04 Fixed problem with getting error Can not load page: null\n2014-11-03 Added events \"playing\" and \"stop\" to Text Audio module\n2014-11-03 Fixed setting width in IWB Toolbar module\n2014-11-03 Added isAttempted method to Math module\n2014-10-30 New Addon - Paragraph eKeyboard\n2014-10-30 Fixed propagation of onclick event in Plot module\n2014-10-29 Fixed highlighting text after clicking stop or reset in Text Audio module\n2014-10-29 Fixed working IWB Toolbar module on iframe\n2014-10-24 Added Event on select rate and method getRate() in Page Rating\n2014-10-24 Added Show Answers to Pie Chart module\n2014-10-24 Added Show Answers to Points and Lines module\n2014-10-24 Added new properties: \"Row classes\", \"Show max score field\", \"Show page score\" and \"Disable score on pages\" to Hierarchical Lesson Report\n2014-10-24 Fixed displaying IWB Toolbar in editor preview\n2014-10-23 Fixed issue with pulling up collumns reduced to 0 on mobile devices in Graph module\n2014-10-23 Fixed problem with autoplaying after click on text fragment in TextAudio module\n2014-10-23 Added playing and end events to MultiAudio\n2014-10-23 Fixed issue with zoom, note and displaying elements in IWB Toolbar module\n2014-10-23 Fixed stopwatch on mLibro windows in IWB toolbar module\n2014-10-21 Fixed problem with autoplaying in MultiAudio module\n2014-10-20 Improved Spanish translations\n2014-10-17 A return full functionality mouseMoveCallback in Graph module\n2014-10-17 Fixed issue with pulling up collumn reduced to 0 in Graph module\n2014-10-16 Fixed issue with double rendered LaTeX in Choice\n2014-10-16 Added handling property Is Visible in IWB Toolbar module\n2014-10-15 Added collaboration between crossword and eKeyboard modules\n2014-10-13 Added stopwatch, clock and changed view of panel in IWB Toolbar module\n2014-10-13 Added new property: Real-time navigationbar-page-ok to Navigation Bar\n2014-10-13 Fixed issue with getting JS representation of Check Button module\n2014-10-13 Fixed showing Layered Image module on IOS 8.0.2\n2014-10-09 Fixed issue with symbols in dropdown gaps for Table module\n2014-10-09 Fixed issue with double lines in Connection module\n2014-10-09 Added new version of Swiffy Animation module and swiffy library.\n2014-10-09 Added Show Answers to Crossword module\n2014-10-08 Fixed issue with double lines in Connection module\n2014-10-06 Removed console.log from Text module\n2014-10-06 Added Show Answers to Table module\n2014-10-06 Removed unused libraries\n2014-10-06 Added Show Answers to Writing Calculations module\n2014-10-06 Added Show Answers to Basic Math Gaps module\n2014-10-03 Fixed problem with Connection in editor preview\n2014-10-03 Fixed problem with apostrophes in gaps are being worked with eKeyboard\n2014-10-01 Fixed problem with gaps being enabled regardless of initial configuration after Reset in Text module\n2014-10-01 Fixed issiue with lines on Android 4.1.2 in Connection module\n2014-10-01 Fixed issues with loading Adobe Edge Animation JavaScript Runtime in Edge Animation module\n2014-10-01 Fixed problems with configuration in Paragraph module\n2014-09-30 Fixed blocked gaps issue in response to ShowAnswers event in Text module\n2014-09-29 Added blocking on Check in Coloring module\n2014-09-29 Fixed activity in Show Answers mode in Coloring, Connection and Image Identification modules.\n2014-09-29 Fixed problem with libraries and date in IWB Toolbar module.\n2014-09-29 Fixed problem with Play button in Slideshow module after changing slides\n2014-09-29 Fixed placement of Next and Report buttons in Navigation Bar module\n2014-09-26 Fixed restoring user selection after CheckAnswers event in ShowAnswers mode in Text Selection module\n2014-09-26 Fixed handling Reset event while in ShowAnswers mode in Ordering module\n2014-09-26 Fixed double lines on Android.4.1.2 in Connection module\n2014-09-26 Fixed showing on Android 4.1.2 in Glossary module\n2014-09-25 Fixed ShowAnswers in Text module for all type of gaps\n2014-09-25 Added disable to Choice module when in ShowAnswers mode\n2014-09-24 Added toolbar separator support in Paragraph module ( | - pipe)\n2014-09-24 Removed cut, copy & paste buttons from toolbar in Paragraph module\n2014-09-24 Added new toolbar features in Paragraph module: forecolor and backcolor\n2014-09-24 Fixed hiding toolbar when toolbar buttons are in more than one line in Paragraph module\n2014-09-24 Loading content fixes in Coloring module\n2014-09-21 Added library for Edge Animation module\n2014-09-23 Added close button to Page Rating module\n2014-09-23 Fixed issue with Navigation Bar on iPad with iOS8\n2014-09-22 Fixed issue with Animation on iPads\n2014-09-22 Fixed Connection module: hiding images does not occur anymore\n2014-09-19 Fixed show answers in Text module\n2014-09-19 Added new module: Pie Chart\n2014-09-19 [IWB Toolbar] Unified date in notes, now notes appears always below panel\n2014-09-18 Fixed problem with width and height in Ordering module\n2014-09-17 Changed libraries to minified versions\n2014-09-17 Fixed problem with doubled properties in Editor\n2014-09-17 Fixed problem with loading progress circle in Editor\n2014-09-17 Fixed problem with Player not loading in iframe embeded lessons\n2014-09-16 [CheckAnswers] Fixed problem with backward compatibility checkAnswers modules\n2014-09-16 Fixed problem with setting state in Multiple Gap module\n2014-09-15 Fixed issue with loading resources on IE11 in Slideshow module\n2014-09-15 Added \"Custom toolbar\" property to Paragraph module\n2014-09-15 Fixed Image Viewer issue in mexican lesson\n2014-09-15 Fixed eKeyboard issues on Android devices\n2014-09-12 IWB Toolbar: fixed preview\n2014-09-12 [Ordering] Added new property: Even width for all elements, to avoid problems with images in Safari\n2014-09-12 IWB Toolbar: now you can hide unnecessary buttons\n2014-09-12 Fixed problem with loading progress circle for other views than embed\n2014-09-12 Fixed problem with propagation in IWB Toolbar module\n2014-09-11 Changed time format in note in IWB Toolbar module\n2014-09-11 Fixed problem with command stop on iPad in Text Audio module\n2014-09-11 Fixed problem with double lines on Android 4.1.2 in Connection module\n2014-09-11 Fixed drawing issue on Android 4.1.2 native browser in ShapeTracing module\n2014-09-10 Changed Default Confirmation Alert Box to Custom in IWB Toolbar module\n2014-09-10 Fixed drawing issue on IE 11 mobile browser in ShapeTracing addon\n2014-09-10 Fixed drawing issue on IE 11 mobile browser\n2014-09-10 Fixed drawing issue on Android 4.1.2 native browser\n2014-09-10 Fixed reaction on Check button in Show Answers module and reaction on Show Answers in True False module\n2014-09-10 Added show, hide and isVisible commands to Paragraph module\n2014-09-08 Fixed isAttempted method in Coloring module\n2014-09-08 Fixed performance issue in Drawing addon\n2014-09-08 Added enabling letters selection in Text Selection module\n2014-09-05 Fixed deselecting text after completion of audio\n2014-09-04 Fixed calculating page and lesson scores in PlayerUtils\n2014-09-04 Writing Calculation: fixed error in console.log\n2014-09-04 IWB Toolbar: now you can change tooltip text in css styles\n2014-09-04 Fixed problem with model validation in Connection module\n2014-09-03 Fixed IWB Toolbar position from the left side of the screen\n2014-09-03 Fixed lesson loading image position\n2014-09-03 Removed unexpected behavior when some one types in some characters from standard keyboard and then clicked on any button in eKeyboard module\n2014-09-02 Added random order properties to Connection module\n2014-09-02 Added responding to Show Answers events in Coloring, Connection, Text, Image Gap, Image Identification, Ordering and Text Selection\n2014-09-02 Fixed initial scoring in Puzzle module\n2014-09-02 Fixed initial scoring in Coloring module\n2014-09-01 Added getFooterModule() method in Player API\n2014-09-01 Added sending events in Magic Boxes module\n2014-09-01 IWB Toolbar: fixed problem with module not working on Internet Explorer 11\n2014-09-01 IWB Toolbar: now the position of toolbar in Player is the as in Editor\n2014-09-01 Added adding CSS class to page when page score is 100%\n2014-09-01 Added getHeaderModule() method to icPlayer API\n2014-09-01 Added isAttempted() to Ordering module commands (previously was only as presenter API)\n2014-08-29 Fixed issue with Drawing on IE 11\n2014-08-29 Changed eKeyboard CustomLayout property, added new property Lock Standard Keyboard Input, added Special Characters for 3 languages\n2014-08-29 Added new library Sonic.js\n2014-08-29 Fixed getting score in Puzzle module\n2014-08-28 Added commands for setting scoring values in Custom Scoring module\n2014-08-28 Changed the parent for the masks in IWB Toolbar\n2014-08-28 Fixed reaction on methods isAttempted() in Completion Progress module\n2014-08-28 Fixed saving state when \"Is disabled\" property is selected in Table module\n2014-08-27 Fixed isAttempted command visibility in Ordering module in not activity mode\n2014-08-27 Added isAttempted() command to Ordering module\n2014-08-27 Fixed multiple issues with Page Score Counter module\n2014-08-27 Added \"Calculate in real time\" property to Error Counter module\n2014-08-27 Added new module: Lesson Score Counter\n2014-08-27 Added new module: Page Score Counter\n2014-08-27 Added new module: Lesson Error Count\n2014-08-26 Added \"Initial image\" property to Animated Page Progress module\n2014-08-26 Fixed isAttempted command visibility in Text module in not activity mode\n2014-08-26 Added new module: Completion Progress\n2014-08-26 Added new module: Animated Lesson Progress\n2014-08-26 Added permutations (safari,ie9,gecko1_8,opera)\n2014-08-26 Added isVisited() method to icPlayer API\n2014-08-26 New gap type in Text module - filled gap\n2014-08-26 Added libraries ydp and CreateJS\n2014-08-25 Fixed bug with SlideShow plays when page is closed\n2014-08-22 Fixed blocking options in ShowAnswers mode and clearing styles on HideAnswers event in True/False module\n2014-08-22 Fixed handling HideAnswers event in Choice module\n2014-08-22 Fixed triggering work mode in modules from Check Answers module when ShowAnswers event is fired\n2014-08-22 Added responding to Show Answers events in Check module\n2014-08-22 Added parsing item markups from Source List to Multiple Gap module\n2014-08-21 Added new colors to IWB Toolbar\n2014-08-21 Fixed video module not seeking to start after video eneded\n2014-08-21 Added new method open(module_ID, input_index) to eKeyboard module\n2014-08-21 Renamed Interactive Table to IWB Toolbar\n2014-08-21 Added Gap max length property in Text module\n2014-08-20 Added responding to Show Answers events in Text module\n2014-08-20 Added Styles property to Navigation Bar module\n2014-08-20 Added Random order property to Choice module\n2014-08-20 Added new languages layouts to eKeyboard module\n2014-08-20 Added API method getView to Table module\n2014-08-19 Fixed drawing stand area nad hide area, some styling changes, new icons in Interactive Table\n2014-08-18 Fixed drawing on mobile devices in Interactive Table module\n2014-08-11 Added isAllOK() command to Magic Boxes module\n2014-08-07 Fixed selecting issue in Line Number addon on Android 4.2.2 devices\n2014-08-07 Added new module Interactive Table\n2014-08-07 Fixed problem when video ended in full screen mode on Android native browser\n2014-08-07 Fixed problem with page scroll when glossary popup appears in nested iframes\n2014-08-07 Fixed problem with Popup module when appears in nested iframes\n2014-08-06 Added responding to Show Answers events in Text Selection module\n2014-08-06 Added new module: Animated Page Progress\n2014-08-01 Added new property, \"Random order\", to Source List module\n2014-08-01 Fixed LearnPen module name\n2014-08-01 Added responding to Show Answers events in Choice module\n2014-08-01 Added separate CSS classes for elements in show answers mode in True/False module\n2014-08-01 Fixed problem with checking case sensitive answers in Table module gaps\n2014-08-01 Extended TextParser service gaps API with additional options property\n2014-07-31 Added isAllOK() command and AllOK event to Crossword module.\n2014-07-30 Fixed text wrapping and removed problem with double scroll bars in Paragraph module\n2014-07-30 Added possibility of custom styling each cell (via CSS styles and classes) in Writing Calculations module\n2014-07-29 Fixed responding to Check Answers button in True/False module while it's set as not-activity\n2014-07-29 Added isAllOK() command and AllOK event to Memo Game module.\n2014-07-29 Added responding to Show Answers events in True/False module\n2014-07-29 Added new module: Show Answers\n2014-07-25 Added new module: Page Rating\n2014-07-24 Added new module: Sudoku\n2014-07-24 Added new command to Player Services - sendPageAllOkOnValueChanged()\n2014-07-24 Added isAllOK() command to Ordering module\n2014-07-24 Fixed problem with image size in Slider addon\n2014-07-23 Added reset() command to Image Source module\n2014-07-23 Fixed centering content in both Single View and Book View modes for Text Identification module\n2014-07-23 Added support for drag & drop in Points and Lines module\n2014-07-23 Added support for drag & drop in Connecting Dots module\n2014-07-23 Added default HTML player to Audio addon\n2014-07-22 Removed tooltip from Close popup Button module\n2014-07-16 Crossword - setting position of a cursor to the end on the focus\n2014-07-16 Fixed problem with Popup module when appears in iframe\n2014-07-16 Fixed Writing Calculation scoring\n2014-07-15 Fixed draggable elements on Win8 Mobile/IE10\n2014-07-15 Fixed problem with page scroll when glossary popup appears in iframe\n2014-07-14 New properties for cells in Table addon: CSS Class and CSS Style\n2014-07-14 Fixed Text Audio module was hidding hightlighted text on pause\n2014-07-11 Fixed Writing Calculation styling\n2014-07-11 Fixed bug with True/False module scoring\n2014-07-10 Fixed bug with removing elements from MultipleGap addon on Windows 8 mobile\n2014-07-09 Fixed True/False module when checking answers after state was restored\n2014-07-09 Fixed issue with scoring on some mobile devices in Text module\n2014-07-09 Fixed bug with wrong events in Text module\n2014-07-08 Fixed sliding effect in Image Viewer addon on Windows Mobile browsers\n2014-07-08 Fixed sliding effect in Image Viewer addon on Internet Explorer 11\n2014-07-07 Fixed issue with first click on Image Viewer addon\n2014-07-07 Fixed loading cached image on Slider module on IE 10\n2014-07-04 New addon - Zoom Image\n2014-07-03 Fixed issue with scoring on some mobile devices in Text module\n2014-07-03 Added parsing definitions in Connection module\n2014-07-02 Fixed issue with Animation addon on Windows 8 Mobile devices\n2014-07-02 Fixed issue with dragging and clicking on mobile devices in ImageViewer addon\n2014-07-01 Adden new LearnPen addons: LearnPen Drawing and LearnPen Data\n2014-06-25 Fixed touch behavior on Windows 8 Mobile in 3D Viewer addon\n2014-06-24 Fixed Audio module on mLibro and Opera\n2014-06-24 Fixed problem with poster on iPad in Video Addon\n2014-06-16 Added listening on PageAllOk event in EventListener module\n2014-06-16 New event PageAllOk\n2014-06-16 Fixed selecting issue in Line Number addon on Android 4.2.2 devices\n2014-06-11 Added command isAllOk() to Shape Tracing addon\n2014-06-10 Fixed issue with text width in TextAudio addon\n2014-06-10 Added support for touches on Windows 8 Mobile in Image Viewer addon\n2014-06-10 Fixed issue with allOk event in Text Selection addon\n2014-06-09 Fixed bug with TextAudio addon on Safari and Opera\n2014-06-06 New addon - TextAudio\n2014-06-06 Added support for touches on Windows 8 Mobile in Slider module\n2014-05-28 Fixed issue with MathJax in Multiplegap addon\n2014-05-26 Added command isAttempted to Text Selection addon\n2014-05-26 Fixed issue with Video addon on IE\n2014-05-23 Added isAttempted method to Multiplegap module\n2014-05-23 Fixed wrong positioning of Glossary module in iFrame\n2014-05-22 Fixed issue with states in Table addon\n2014-05-22 Fixed issue with Slider not working on Firefox\n2014-05-22 Fixed issue with doubled 3D Viewer addon on devices with Android 4.2.2\n2014-05-22 Added command reset to SourceList addon\n2014-05-21 Added possibility to style correct/wrong answers to Coloring module\n2014-05-20 Fixed issue with states in Line Number addon\n2014-05-16 Removed navigation pages for single page\n2014-05-16 Fixed issues with states and reset in Done addon\n2014-05-16 Fixed issue with Graph module on page change\n2014-05-16 New Gap type: Math in Text module\n2014-05-15 Added commands hide and show to Done addon\n2014-05-12 Added commands setColor(color), setThickness(thickness), setEraserOn() and setEraserThickness(thickness) to Drawing addon\n2014-05-11 Added isAttempted, setAttempted, isAllOK to Plot addon\n2014-05-10 Choice returns max score on All ok event.\n2014-05-08 New commands in Points and Lines addon: markAsCorrect, markAsWrong, markAsNeutral, isConnected, isEmpty\n2014-05-08 Fixed problem with Coloring module not displaying coordinates in editor\n2014-05-08 Fixed problem with check counter in report after reopening page\n2014-05-07 Setting visibility of Feedback module on reset\n2014-05-07 Fixed issue with True/False addon on Firefox mobile browser\n2014-05-06 Added show/hide methods to Feedback addon\n2014-05-06 Fixed problem with reading page name with special characters\n2014-05-06 Fixed problem with dragging image source and source list while in editor mode\n2014-05-05 Added ability to define constant letters in Crossword addon\n2014-04-30 Fixed issue with custom events improper behaviour in Advanced Connector\n2014-04-24 Popup button is active while in check answers mode\n2014-04-23 Fixed issue with incorrect glossary widget position for Glossary addon placed in header/footer\n2014-04-22 Fixed issue with slow response of Connection addon\n2014-04-22 Fixed issue with correct answer mark for drop-down gaps in Table addon\n2014-04-22 Fixed bug with selected page number in Table of Contents addon\n2014-04-18 Removed restrictions to URLs in External Link Button\n2014-04-16 Added MathJax \\blank{} macro for Text module, which can be used for creating gaps in Math Expressions\n2014-04-16 New addons Clock and Swiffy Animation\n2014-04-16 New gap type - drop-down in Table addon.\n2014-04-16 Added Is Not Activity property to Graph addon.\n2014-04-10 Fixed selecting issue in Text Selection module in adroid 4.2.2\n2014-04-09 Fixed issue with boundaries detection in Shape Tracing addon on iOS7 devices\n2014-04-08 Ordering is always shuffled\n2014-04-08 Prevented adding class .hover to elements, when tapping on mobile devices in Text Selection module\n2014-04-07 Fixed issue with scoring in Shape Tracing addon\n2014-04-04 Fixed issue with NaN scores in hierarchical lesson report. Improvement to chapter names formatting.\n2014-03-31 Fixed bug in calculating scores in hierarchical lesson report\n2014-03-31 Added parseGaps command to JavaScriptPlayerServices\n2014-03-31 Added global style, fixing android highlight when focus on HTML element, to the Player\n2014-03-31 Fixed bug with disable/enable in Coloring module.\n2014-03-28 Fixed problem with checking answers when not all gaps were filled in Basic Math Gaps module\n2014-03-28 Player API extended to switch pages by page id\n2014-03-27 New module Done, it checks whenever all activities on the page has been attempted and button Submit has been pressed, then it sends 'Done' event\n2014-03-27 Fixed issue with improper total lesson scoring in hierarchical lesson report.\n2014-03-27 Score is saved by page id instead of name.\n2014-03-27 Fixed issue with Basic Math Gaps events\n2014-03-27 New module Next, similar to Next Page Button module, navigating to next page, but first it checks whenever all activities on the page has been attempted and button Submit has been pressed.\n2014-03-26 Added command isAttempted for Connection addon\n2014-03-26 Fixed couple of issues with Shape Tracing addon\n2014-03-26 Added command isAttempted for True/False addon\n2014-03-26 Is attempted command for Fractions addon\n2014-03-25 New addons Points and Lines and Edge Animation\n2014-03-25 Fixed problem with report score for not visited pages\n2014-03-25 Fixed problem with reset and set state in Submit module\n2014-03-24 \"Return first score\" flag modifies how the score is presented to the user\n2014-03-24 New module Submit, which acts like a Check module, but checks results only when all modules are in attempted state\n2014-03-24 Added handling custom events in the Advanced Connector\n2014-03-24 Added custom event to event bus\n2014-03-21 Added command isAttempted to Image Gap module\n2014-03-21 Added new text properties to check button\n2014-03-21 Added checkAnswers and uncheckAnswers method to Player API\n2014-03-21 Added command isAttempted to Text module\n2014-03-21 New addon: Hierarchical_Lesson_Report\n2014-03-19 Fixed issue with special characters external links in Text module\n2014-03-19 Added getModules method to Player API\n2014-03-19 Fixed problem with Tex in Video module\n2014-03-19 Added Coloring module\n2014-03-18 Fixed problem with links in page styles.\n2014-03-18 Added sending events to Text Selection module\n2014-03-17 Added addon Shape Tracing\n2014-03-14 Added command isAttempted to choice\n2014-03-12 Player can return first or last score\n2014-03-11 Fixed problem with Animation module commands execution on PageLoaded event\n2014-03-11 Player API extended to return page id\n2014-03-07 Added AllOK event and isAllOK command in Text module\n2014-03-07 Fixed problem with parsing addon properties\n2014-03-07 Fixed issue with icon pages on navigation bar for mLibro.\n2014-03-07 New addon connecting dots and updated fractions\n2014-03-06 Added enableAllGaps and disableAllGaps commands in Table module\n2014-03-06 Added enableAllGaps and disableAllGaps commands in Text module\n2014-03-06 Added injecting 'event' object into Advanced Connector module scripts\n2014-03-04 Added property for external links target in Text module.\n2014-03-05 Added 'Is disabled' property in Advanced Connector module\n2014-03-04 Basic Math Gaps module: Fixed navigation arrows showing up when clicking on the input and fixed alert error in Editor when Is Equation flag has been set to true\n2014-03-04 Fixed issue with external links in Text module.\n2014-03-04 Fixed few bugs in eKeyboard i.a. on mobile devices system keyboard will not display anymore, added draggable\n2014-03-04 Drag'n'drop with multiple gap fixed, no more doubled images.\n2014-03-03 New addon: Count and Graph\n2014-02-28 Add CSS class for selected page number in Table of Contents addon.\n2014-02-26 Fixed problem with scoring and events in Hangman addon.\n2014-02-21 Fixed problem with numeration of pages in Table Of Contents addon.\n2014-02-21 New modules: Basic Math Gaps and eKeyboard\n2014-02-21 PlayerUtils return mistake count also\n2014-02-20 Support for dragging in multiple gap\n2014-02-19 Fixed problem with page move notification\n2014-02-18 Fixed problem with scoring method when module LineNumber was not activity\n2014-02-18 PlayerUtils extended to return score for individual pages\n2014-02-18 Fixed problem with empty text on chrome browser\n2014-02-17 Fixed problem with localized property names\n2014-02-17 Added new property for additional classes in popup\n2014-02-13 Added API interface to get table of contents\n2014-02-13 Fixed problem with exception thrown to JavaScript console at presentation start\n2014-02-13 Fixed problem with blocking popup button after check+reset combination\n2014-02-13 Don't allow opening the popup twice\n2014-02-11 Different handling for d&d on mobile devices and PC\n2014-02-10 Fixed problem with d&d\n2014-02-06 Fixed problem with page progress on not reportable page\n2014-02-05 Added drag and drop support to image source and image gap\n2014-02-05 Added drag and drop support to source list and text modules\n2014-02-05 Added custom css support for plots in Plot module\n2014-02-04 Fixed state restoring after clicking Reset button in Memo Game module\n2014-01-27 Added new command to Puzzle module: getLoadedPromise\n2014-01-23 Add Navigation Panel feature.\n2014-01-23 Changed type of property Description (from text to html) in Glossary module\n2014-01-23 Fixed problem with positioning LaTeX in Text Identification module in book view mode\n2014-01-22 Fixed problem with MathJax rendering in Video module\n2014-01-16 Fixed problem with drag & drop in Graph module\n2014-01-16 Glossary definition click events are not propagated any more to stop navigation buttons display.\n2014-01-15 Fixed problem with zero one score.\n2014-01-14 Added new score type. result - errors.\n2014-01-13 Fixed bug in Text Identification, when clicking on the module was showing navigation arrows\n2014-01-13 Added new score type Zero-One\n2014-01-13 Allow putting glossary module in header and footer.\n2014-01-13 Fixed Text Selection module when marked word has signs before/after.\n2014-01-12 Unified command names for presenter and plot addon\n2014-01-10 Added CustomScoring methods to Connection module.\n2014-01-09 Added CustomScoring methods to True/False module.\n2014-01-09 Added show and hide methods to Page Progress module.\n2014-01-08 Fixed problem with Memo Game when trying to read state saved in different platform\n2014-01-08 Fixed problem with relative URLs in inline styles.\n2014-01-08 Changed True/False property type to accept HTML formatting.\n2014-01-02 Libraries removed from addon descriptor\n2013-12-31 Fixed problem with hiding multiplegap under other addons\n2013-12-30 Fixed problem with Animation addon on Firefox\n2013-12-18 Added new addon: Line\n2013-12-17 Fixed problem with popup's custom closing time and initialization of Glossary addon\n2013-12-16 Header for Table of Contents is now editable\n2013-12-16 Fixed tests in Line Number and Audio addons\n2013-12-13 Fixed problem with custom styles in Glossary addon\n2013-12-13 Fixed problem with placing Glossary widget into closing popup\n2013-12-13 Fixed problem with centering the mismatch mark in memo game\n2013-12-11 Fixed problem with restoring state from same lesson but other source\n2013-12-11 Close popup while changing page\n2013-12-11 Fixed problem with navigation toolbars position\n2013-12-10 Fixed problem with page numbers in Table Of Contents addon\n2013-12-10 Fixed problem with counting errors and sending events on setState, setShowErrorsMode and setWorkMode in Hangman addon\n2013-12-10 Fixed problem with navigation toolbars and report module\n2013-12-09 Removed reaction on Reset in Check Counter module\n2013-12-09 Removed console.logs in Double State Button\n2013-12-09 Fixed problem with drawRange function in Line Number addon\n2013-12-09 Fixed problem with Audio addon on iPads with getState function and AC scripts\n2013-12-06 Fixed problem with rendering mathjax in text module while loading state\n2013-12-05 Fixed problem with selecting Paragraph addon in the editor\n2013-12-05 Fixed problem with low height Paragraph addon\n2013-12-04 Fixed issue with marking points as wrong in free points mode\n2013-12-04 Added Custom CSS property to Paragraph addon\n2013-12-04 Fixed issue with points on axis after 'check' in LineNumber addon\n2013-12-03 Blockage displaying page navigation's arrows after clicking on the ExternalLinkButton\n2013-12-02 Added drop event handler for gaps in Text module\n2013-11-29 Fixed problem with errors counting in Memo Game addon\n2013-11-27 Fixed problem with showing choice after reset\n2013-11-22 New commands in module choice: show, hide, reset\n2013-11-22 Fixed problem with initial setState in Paragraph addon\n2013-11-20 Fixed problem with Source list not activity mode\n2013-11-20 Source list can contain formatted text\n2013-11-19 Fixed issue with Text Selection addon\n2013-11-18 Fixed issue with axis custom values in Plot addon\n2013-11-18 Added stop propagation on event click in Double State Button module.\n2013-11-18 Added support for Eastern Arabic and Perso-Arabic numericals in Navigation Bar\n2013-11-18 Added support for Eastern Arabic and Perso-Arabic numericals in Page Counter\n2013-11-15 Fixed bug in selection with selecting last phrase\n2013-11-15 Add markAs... command to choice module\n2013-11-14 Scorm libraries updated to handle storing session time\n2013-11-08 Fixed problem with leaping frames in Animation addon\n2013-11-06 New JS library to handle SCORM 1.2\n2013-11-05 Fixed issue with Double State Button on mLibro Android application\n2013-10-31 Added 2 commands setClickDisabled and setClickEnabled to Image Viewer addon\n2013-10-29 Fixed issue with precision in Plot addon\n2013-10-25 Fixed problem with restoring gap states\n2013-10-24 Fixed problem with Text Selection containg LaTeX with additional spaces\n2013-10-23 Fixed tests in Single State Button\n2013-10-23 Added 2 commands markAsCorrect and markAsWrong to Image Viewer addon\n2013-10-22 Fixed problem with LaTeX in Text Selection addon\n2013-10-21 Added displayName for addons' properties\n2013-10-21 Added saving in state if addon Graph is started\n2013-10-21 Fixed problem with gaps in Text module\n2013-10-16 Clear event bus when closing popup\n2013-10-16 Added CSS3 animation to navigation arrows\n2013-10-15 Fixed problem with counting errors in Custom Scoring\n2013-10-14 Fixed bug with hover effect on mobile devices in Choice and Image Source modules\n2013-10-14 Fixed problem with multiple parentheses in latex code\n2013-10-14 Fixed bug with limited errors in Custom Scoring\n2013-10-09 Fixed True/False and Table not loading properly due to bug 'c.find is undefined'\n2013-10-09 Fixed Glossary links on feedback when div.ic_page had more then one class\n2013-10-09 Fixed bug with calculating graph max score when activity was not started\n2013-10-09 Fixed bug with hover effect on mobile devices in Double State Button\n2013-10-09 Fixed bug with black background on IE 10 in Multiplegap addon\n2013-10-08 Fixed problem with definition event in book mode\n2013-10-08 event bug on safari in Video addon fixed\n2013-10-07 Fixed problem with next page in book mode while presentation contains 2 pages only\n2013-10-07 event bug in addons Graph and Single State Button fixed\n2013-10-07 Added getView function for modules\n2013-10-06 Changed navigation arrows default styling.\n2013-10-04 Fixed bug in event propagation in Double State Button\n2013-10-04 Removed user-select property from Drawing module styles, which was causing inability to select property value in Editor\n2013-10-03 Added stop propagation to addons: Crossword, Graph, Line Number, Plot, Audio, Drawing, IMageViewer Button Controller, Multi audio, DOuble State Button, Single State Button, Slider, Event Sender\n2013-10-03 Navigation arrows restored\n2013-10-03 Added stop propagation to addons: Connection, Hangman, Image Identification, Magic boxes, Gamememo, Multiplegap, Puzzle, Text selection, True False, Writing Calculations, Navigation Bar, Slide show, Image viewer, Animation\n2013-10-03 MP4 sources are now prefered in video addon\n2013-10-02 Fixed problem with Navigation Bar with page indexes.\n2013-10-02 Fixed problem with blocking Line Number addon and added new class 'disable' to '.outer' div when property 'Disable' is on true           d\n2013-10-01 Added page name to page loaded event\n2013-10-01 Fixed problem with definition of disable and not activity properties\n2013-10-01 Fixed problem with scoring in graph\n2013-09-30 Fixed problem with points in Image Indentification addon\n2013-09-30 Fixed problem with mouseleave.\n2013-09-30 Fixed problem with Drawing addon. Loading state and eraser.\n2013-09-27 Fixed problem with displaying Glossary on book view\n2013-09-26 Fixed displaying Glossary and other addons (Video, Image etc) on the following addons: Feedback, True/False, Table\n2013-09-23 Fixed TextParserProxy issue\n2013-09-23 Added simulate Tap event listeners to 4 addons (True/False, Connection, Image Identification, Text Identification)\n2013-09-20 Fixed addon on Feedback issue\n2013-09-19 Fixed Glossary links on feedback\n2013-09-19 Added TextParserProxy: parse, connectLinks - in Commons (now in version 1.8)\n2013-09-19 Added Drawing module. This module allows to draw on digital canvas.\n2013-09-18 Fixed Glossary issue\n2013-09-17 Script allows True and False values\n2013-09-16 Added getState and setState for Puzzle\n2013-09-16 goToPageIndex added to API\n2013-09-13 Choice can work in not activity mode\n2013-09-12 Addon Glossary can not hide other addons\n2013-09-12 Fixed problem with Glossary in Preview\n2013-09-11 Fixed problem with image gap not activity under show errors mode\n2013-09-06 Fixed problem with Glossary and Popup\n2013-09-06 Fixed problem with draggable gaps and state\n2013-09-06 Fixed problem with going to first page in book mode\n2013-09-05 Popup z-index = 100\n2013-09-04 Added Book API\n2013-09-03 Fixed Paragraph for non existing tinymce editor\n2013-09-03 Added default sizes to ic_popup_page CSS class\n2013-09-02 Fixed PlayerUtils for object with unavailable API\n2013-09-02 Fixed problem addon resources\n2013-09-02 Fixed problem with gaps on popups\n2013-09-02 Added thousand separator for Math module\n2013-09-02 Added StringUtils: replaceAll, startsWith, endsWith - in Commons (now in version 1.7)\n2013-08-29 Fixed problem with shuffling in Puzzle module\n2013-08-29 Fixed problem with state in text module\n2013-08-27 Added relative layout\n2013-08-26 Page without tasks is calculated as 100% in score\n2013-08-19 Added Text Selection module - enable to select parts of texts\n2013-08-09 Fixed problem with too many change events from choice module\n2013-08-09 Added cover page to book mode\n2013-08-07 Updated modules descriptions\n2013-08-05 Fixed problem with nonunicode characters pasted to text editor\n2013-08-02 Check can be used on footer and header\n2013-08-01 Fixed Open Popup Button in error checking mode\n2013-08-01 Added show and hide commands to all button modules\n2013-07-30 Fixed Video module visibility in popup page\n2013-07-29 Fixed onEnd event in Video module\n2013-07-26 Fixed problem with inline choice when selecting default value '---'\n2013-07-26 Fixed problem with spaces in URL\n2013-07-25 Added visibility commands in Standard Shapes module\n2013-07-25 Added restoring visibility in Slideshow module\n2013-07-22 Added 'Hide toolbar' property which hides default options toolbar and makes more space for text\n2013-07-16 Fixed value change events in Table module gaps system\n2013-07-05 Fixed a bug when event AllOk was sent even when wrong ranges were drawn\n2013-07-05 Fixed problem when Check was not removing range end image in Line Number module\n2013-07-04 Fixed problem when changing pages in Graph module\n2013-07-04 Fixed drawing range bug in Line Number module\n2013-07-03 Added Line Number module - used to draw X-axis ranges\n2013-07-03 Updated Custom Scoring module icon\n2013-07-02 Added event sending on playback finish to Video module\n2013-07-01 Fixed problem with events from not activity gaps\n2013-07-01 Fixed problem with disabled state for draggable gaps\n2013-06-30 Improved performance in Slider module\n2013-06-30 Fixed problem with Graph module loading\n2013-06-29 Removed 'Show time' property from Video module\n2013-06-28 Updated 3D Viewer module icon\n2013-06-28 Fixed problem with audio resources in Slideshow module on Safari Mobile\n2013-06-27 Added decimal separator property to Graph module\n2013-06-27 Added jQuery CSV library\n2013-06-26 Fixed focus problem in Paragraph module on Firefox browser\n2013-06-26 Added command for obtaining current frame in Image Viewer module\n2013-06-26 Added rotation and quality change commands to 3D Viewer module\n2013-06-25 Fixed min/max validation in float validation in Commons (now in version 1.6.10)\n2013-06-25 Added parsedValue property in float validation in Commons (now in version 1.6.9)\n2013-06-24 Fixed labels visibility in Animation module\n2013-06-24 Fixed float validation in Commons (now in version 1.6.8.)\n2013-06-21 Added new command to Image Identification module - removeMark - which removes marks done by markAs.. commands\n2013-06-21 Added new property - \"Is not an activity\" to Image Identification module\n2013-06-21 Fixed integer validation for zero values in Commons (now in version 1.6.7)\n2013-06-21 Added helper method - displaying error messages - in Commons (now in version 1.6.6)\n2013-06-21 Added Custom Scoring module. This module allows users to bind multiple modules and create fully scored activities from them\n2013-06-17 Fixed displaying error messages in Slideshow module\n2013-06-13 Added localization to new page name\n2013-06-13 Fixed problem with adding Paragraph module into presentation\n2013-06-12 Fixed problem with restoring visibility in Table module after page change\n2013-06-12 Fixed problem with fonts in multiple Paragraph editors on one page\n2013-06-12 Added JSC3D library for viewing 3D models purposes\n2013-06-12 Added 3D Viewer module. This module allow simple viewing 3D objects saved in OBJ format\n2013-06-12 Added commands queue utility to Commons which allows postponing commands execution (while module is loading asynchronously)\n"], "filenames": ["addons/Commons/src/tts-utils.js", "addons/Table/src/presenter.js", "changelog.txt"], "buggy_code_start_loc": [199, 136, 0], "buggy_code_end_loc": [200, 137, 0], "fixing_code_start_loc": [199, 136, 1], "fixing_code_end_loc": [200, 137, 2], "type": "CWE-79", "message": "A vulnerability was found in icplayer up to 0.818. It has been rated as problematic. Affected by this issue is some unknown functionality of the file addons/Commons/src/tts-utils.js. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 0.819 is able to address this issue. The name of the patch is fa785969f213c76384f1fe67d47b17d57fcc60c8. It is recommended to upgrade the affected component. VDB-222290 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4929", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-06T03:15:08.440", "lastModified": "2023-03-13T17:14:45.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in icplayer up to 0.818. It has been rated as problematic. Affected by this issue is some unknown functionality of the file addons/Commons/src/tts-utils.js. The manipulation leads to cross site scripting. The attack may be launched remotely. Upgrading to version 0.819 is able to address this issue. The name of the patch is fa785969f213c76384f1fe67d47b17d57fcc60c8. It is recommended to upgrade the affected component. VDB-222290 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:learnetic:icplayer:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.819", "matchCriteriaId": "BE7B1645-5AFC-416A-A7BA-5A329F0B328F"}]}]}], "references": [{"url": "https://github.com/icplayer/icplayer/commit/fa785969f213c76384f1fe67d47b17d57fcc60c8", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/icplayer/icplayer/pull/885", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/icplayer/icplayer/releases/tag/v0.819", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.222290", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.222290", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/icplayer/icplayer/commit/fa785969f213c76384f1fe67d47b17d57fcc60c8"}}