{"buggy_code": ["# BEGIN BPS TAGGED BLOCK {{{\n#\n# COPYRIGHT:\n#\n# This software is Copyright (c) 1996-2021 Best Practical Solutions, LLC\n#                                          <sales@bestpractical.com>\n#\n# (Except where explicitly superseded by other copyright notices)\n#\n#\n# LICENSE:\n#\n# This work is made available to you under the terms of Version 2 of\n# the GNU General Public License. A copy of that license should have\n# been provided with this software, but in any event can be snarfed\n# from www.gnu.org.\n#\n# This work is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n# 02110-1301 or visit their web page on the internet at\n# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.\n#\n#\n# CONTRIBUTION SUBMISSION POLICY:\n#\n# (The following paragraph is not intended to limit the rights granted\n# to you to modify and distribute this software under the terms of\n# the GNU General Public License and is only of importance to you if\n# you choose to contribute your changes and enhancements to the\n# community by submitting them to Best Practical Solutions, LLC.)\n#\n# By intentionally submitting any modifications, corrections or\n# derivatives to this work, or any other work intended for use with\n# Request Tracker, to Best Practical Solutions, LLC, you confirm that\n# you are the copyright holder for those contributions and you grant\n# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,\n# royalty-free, perpetual, license to use, copy, create derivative\n# works based on those contributions, and sublicense and distribute\n# those contributions and any derivatives thereof.\n#\n# END BPS TAGGED BLOCK }}}\n\npackage RT::REST2::Middleware::Auth;\n\nuse strict;\nuse warnings;\n\nuse base 'Plack::Middleware';\n\nour @auth_priority = qw(\n    login_from_cookie\n    login_from_authtoken\n    login_from_basicauth\n);\n\nsub call {\n    my ($self, $env) = @_;\n\n    RT::ConnectToDatabase();\n    for my $method (@auth_priority) {\n        last if $env->{'rt.current_user'} = $self->$method($env);\n    }\n\n    if ($env->{'rt.current_user'}) {\n        return $self->app->($env);\n    }\n    else {\n        return $self->unauthorized($env);\n    }\n}\n\nsub login_from_cookie {\n    my ($self, $env) = @_;\n\n    # allow reusing authentication from the ordinary web UI so that\n    # among other things our JS can use REST2\n    if ($env->{HTTP_COOKIE}) {\n        no warnings 'redefine';\n\n        # this is foul but LoadSessionFromCookie doesn't have a hook for\n        # saying \"look up cookie in my $env\". this beats duplicating\n        # LoadSessionFromCookie\n        local *RT::Interface::Web::RequestENV = sub { return $env->{$_[0]} }\n            if RT::Handle::cmp_version($RT::VERSION, '4.4.0') >= 0;\n\n        # similar but for 4.2\n        local %ENV = %$env\n            if RT::Handle::cmp_version($RT::VERSION, '4.4.0') < 0;\n\n        local *HTML::Mason::Commands::session;\n\n        RT::Interface::Web::LoadSessionFromCookie();\n        if (RT::Interface::Web::_UserLoggedIn) {\n            return $HTML::Mason::Commands::session{CurrentUser};\n        }\n    }\n\n    return;\n}\n\nsub login_from_authtoken {\n    my ($self, $env) = @_;\n\n    # needs RT::Authen::Token extension\n    return unless RT::AuthToken->can('Create');\n\n    # Authorization: token 1-14-abcdef header\n    my ($authstring) = ($env->{HTTP_AUTHORIZATION}||'') =~ /^token (.*)$/i;\n\n    # or ?token=1-14-abcdef query parameter\n    $authstring ||= Plack::Request->new($env)->parameters->{token};\n\n    if ($authstring) {\n        my ($user_obj, $token) = RT::Authen::Token->UserForAuthString($authstring);\n        return $user_obj;\n    }\n\n    return;\n}\n\nsub login_from_basicauth {\n    my ($self, $env) = @_;\n\n    require MIME::Base64;\n    if (($env->{HTTP_AUTHORIZATION}||'') =~ /^basic (.*)$/i) {\n        my($user, $pass) = split /:/, (MIME::Base64::decode($1) || \":\"), 2;\n        my $cu = RT::CurrentUser->new;\n        $cu->Load($user);\n        if ($cu->id and $cu->IsPassword($pass)) {\n            return $cu;\n        }\n        else {\n            RT->Logger->info(\"Failed login for $user\");\n            return;\n        }\n    }\n\n    return;\n}\n\nsub _looks_like_browser {\n    my $self = shift;\n    my $env = shift;\n\n    return 1 if $env->{HTTP_COOKIE};\n    return 1 if $env->{HTTP_USER_AGENT} =~ /Mozilla/;\n    return 0;\n}\n\nsub unauthorized {\n    my $self = shift;\n    my $env = shift;\n\n    if ($self->_looks_like_browser($env)) {\n        my $url = RT->Config->Get('WebPath') . '/';\n        return [\n            302,\n            [ 'Location' => $url ],\n            [ \"Login required\" ],\n        ];\n    }\n    else {\n        my $body = 'Authorization required';\n        return [\n            401,\n            [ 'Content-Type' => 'text/plain',\n              'Content-Length' => length $body ],\n            [ $body ],\n        ];\n    }\n}\n\n1;\n"], "fixing_code": ["# BEGIN BPS TAGGED BLOCK {{{\n#\n# COPYRIGHT:\n#\n# This software is Copyright (c) 1996-2021 Best Practical Solutions, LLC\n#                                          <sales@bestpractical.com>\n#\n# (Except where explicitly superseded by other copyright notices)\n#\n#\n# LICENSE:\n#\n# This work is made available to you under the terms of Version 2 of\n# the GNU General Public License. A copy of that license should have\n# been provided with this software, but in any event can be snarfed\n# from www.gnu.org.\n#\n# This work is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n# 02110-1301 or visit their web page on the internet at\n# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.\n#\n#\n# CONTRIBUTION SUBMISSION POLICY:\n#\n# (The following paragraph is not intended to limit the rights granted\n# to you to modify and distribute this software under the terms of\n# the GNU General Public License and is only of importance to you if\n# you choose to contribute your changes and enhancements to the\n# community by submitting them to Best Practical Solutions, LLC.)\n#\n# By intentionally submitting any modifications, corrections or\n# derivatives to this work, or any other work intended for use with\n# Request Tracker, to Best Practical Solutions, LLC, you confirm that\n# you are the copyright holder for those contributions and you grant\n# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,\n# royalty-free, perpetual, license to use, copy, create derivative\n# works based on those contributions, and sublicense and distribute\n# those contributions and any derivatives thereof.\n#\n# END BPS TAGGED BLOCK }}}\n\npackage RT::REST2::Middleware::Auth;\n\nuse strict;\nuse warnings;\n\nuse base 'Plack::Middleware';\n\nour @auth_priority = qw(\n    login_from_cookie\n    login_from_authtoken\n    login_from_basicauth\n);\n\nsub call {\n    my ($self, $env) = @_;\n\n    RT::ConnectToDatabase();\n    for my $method (@auth_priority) {\n        last if $env->{'rt.current_user'} = $self->$method($env);\n    }\n\n    if ($env->{'rt.current_user'}) {\n        return $self->app->($env);\n    }\n    else {\n        return $self->unauthorized($env);\n    }\n}\n\nsub login_from_cookie {\n    my ($self, $env) = @_;\n\n    # allow reusing authentication from the ordinary web UI so that\n    # among other things our JS can use REST2\n    if ($env->{HTTP_COOKIE}) {\n        no warnings 'redefine';\n\n        # this is foul but LoadSessionFromCookie doesn't have a hook for\n        # saying \"look up cookie in my $env\". this beats duplicating\n        # LoadSessionFromCookie\n        local *RT::Interface::Web::RequestENV = sub { return $env->{$_[0]} }\n            if RT::Handle::cmp_version($RT::VERSION, '4.4.0') >= 0;\n\n        # similar but for 4.2\n        local %ENV = %$env\n            if RT::Handle::cmp_version($RT::VERSION, '4.4.0') < 0;\n\n        local *HTML::Mason::Commands::session;\n\n        RT::Interface::Web::LoadSessionFromCookie();\n        if (RT::Interface::Web::_UserLoggedIn) {\n            return $HTML::Mason::Commands::session{CurrentUser};\n        }\n    }\n\n    return;\n}\n\nsub login_from_authtoken {\n    my ($self, $env) = @_;\n\n    # needs RT::Authen::Token extension\n    return unless RT::AuthToken->can('Create');\n\n    # Authorization: token 1-14-abcdef header\n    my ($authstring) = ($env->{HTTP_AUTHORIZATION}||'') =~ /^token (.*)$/i;\n\n    # or ?token=1-14-abcdef query parameter\n    $authstring ||= Plack::Request->new($env)->parameters->{token};\n\n    if ($authstring) {\n        my ($user_obj, $token) = RT::Authen::Token->UserForAuthString($authstring);\n        return $user_obj;\n    }\n\n    return;\n}\n\nsub login_from_basicauth {\n    my ($self, $env) = @_;\n\n    require MIME::Base64;\n    if (($env->{HTTP_AUTHORIZATION}||'') =~ /^basic (.*)$/i) {\n        my($user, $pass) = split /:/, (MIME::Base64::decode($1) || \":\"), 2;\n        my $cu = RT::CurrentUser->new;\n        $cu->Load($user);\n\n        # Load the RT system user as well to avoid timing side channel\n        my $system_user = RT::CurrentUser->new();\n        $system_user->Load(1);    # User with ID 1 should always exist!\n\n        if ($cu->id and $cu->IsPassword($pass)) {\n            return $cu;\n        }\n        else {\n            if (!$cu->id) {\n                # Avoid timing side channel... always run IsPassword\n                $system_user->IsPassword($pass);\n            }\n            RT->Logger->info(\"Failed login for $user\");\n            return;\n        }\n    }\n\n    return;\n}\n\nsub _looks_like_browser {\n    my $self = shift;\n    my $env = shift;\n\n    return 1 if $env->{HTTP_COOKIE};\n    return 1 if $env->{HTTP_USER_AGENT} =~ /Mozilla/;\n    return 0;\n}\n\nsub unauthorized {\n    my $self = shift;\n    my $env = shift;\n\n    if ($self->_looks_like_browser($env)) {\n        my $url = RT->Config->Get('WebPath') . '/';\n        return [\n            302,\n            [ 'Location' => $url ],\n            [ \"Login required\" ],\n        ];\n    }\n    else {\n        my $body = 'Authorization required';\n        return [\n            401,\n            [ 'Content-Type' => 'text/plain',\n              'Content-Length' => length $body ],\n            [ $body ],\n        ];\n    }\n}\n\n1;\n"], "filenames": ["lib/RT/REST2/Middleware/Auth.pm"], "buggy_code_start_loc": [134], "buggy_code_end_loc": [138], "fixing_code_start_loc": [135], "fixing_code_end_loc": [148], "type": "CWE-203", "message": "Best Practical Request Tracker (RT) 4.2 before 4.2.17, 4.4 before 4.4.5, and 5.0 before 5.0.2 allows sensitive information disclosure via a timing attack against lib/RT/REST2/Middleware/Auth.pm.", "other": {"cve": {"id": "CVE-2021-38562", "sourceIdentifier": "cve@mitre.org", "published": "2021-10-18T09:15:08.767", "lastModified": "2023-01-20T02:07:39.160", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Best Practical Request Tracker (RT) 4.2 before 4.2.17, 4.4 before 4.4.5, and 5.0 before 5.0.2 allows sensitive information disclosure via a timing attack against lib/RT/REST2/Middleware/Auth.pm."}, {"lang": "es", "value": "Best Practical Request Tracker (RT) versiones 4.2 anteriores a 4.2.17, versiones 4.4 anteriores a 4.4.5, y versiones 5.0 anteriores a 5.0.2, permite una divulgaci\u00f3n de informaci\u00f3n confidencial por medio de un ataque de tiempo contra el archivo lib/RT/REST2/Middleware/Auth.pm"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-203"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bestpractical:request_tracker:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2.0", "versionEndExcluding": "4.2.17", "matchCriteriaId": "7D08BAE0-181B-46A0-B8B4-311B8E6C550E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bestpractical:request_tracker:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.4.0", "versionEndExcluding": "4.4.5", "matchCriteriaId": "35D6692C-6D84-4D03-B65F-5BBAFD439826"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bestpractical:request_tracker:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.0.2", "matchCriteriaId": "861FFFAE-2644-474C-AD4F-2CC84F907869"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://docs.bestpractical.com/release-notes/rt/index.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/bestpractical/rt/commit/70749bb66cb13dd70bd53340c371038a5f3ca57c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/06/msg00019.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2JK57CEEXLQF7MGBCUX76DZHXML7LUSQ/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bestpractical/rt/commit/70749bb66cb13dd70bd53340c371038a5f3ca57c"}}