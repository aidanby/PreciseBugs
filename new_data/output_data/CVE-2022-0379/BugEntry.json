{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Checkout\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckoutV2\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\Closure $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n\n        $checkCart = cart_get_items_count();\n\n        if (!$checkCart) {\n            //$shop_page = get_content('single=true&content_type=page&is_shop=1');\n            $shop_page = app()->content_repository->getFirstShopPage();\n\n            $redir = site_url();\n            if ($shop_page and isset($shop_page['id'])) {\n                $link = content_link($shop_page['id']);\n                if ($link) {\n                    $redir = $link;\n                }\n\n            }\n\n            return redirect($redir);\n        }\n\n        $requiresRegistration = get_option('shop_require_registration', 'website') == '1';\n        if ($requiresRegistration and is_logged() == false) {\n            return redirect(route('checkout.login'));\n        }\n\n        return $next($request);\n    }\n}\n", "<?php\n\n// Private\nRoute::name('checkout.')\n   // ->prefix(multilanguage_route_prefix('checkout'))\n    ->middleware([\\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class, \\MicroweberPackages\\Checkout\\Http\\Middleware\\CheckoutV2::class])\n    ->namespace('\\MicroweberPackages\\Checkout\\Http\\Controllers')\n    ->group(function () {\n\n        // Contact info\n        Route::get('cart', 'CheckoutController@index')->name('cart');\n        Route::get('contact-information', 'CheckoutController@contactInformation')->name('contact_information');\n        Route::post('contact-information-save', 'CheckoutController@contactInformationSave')->name('contact_information_save');\n\n        // Shipping info\n        Route::get('shipping-method', 'CheckoutController@shippingMethod')->name('shipping_method');\n        Route::post('shipping-method-change', 'CheckoutController@shippingMethodChange')->name('shipping_method_change');\n        Route::post('shipping-method-save', 'CheckoutController@shippingMethodSave')->name('shipping_method_save');\n\n        // Payment method\n        Route::get('payment-method', 'CheckoutController@paymentMethod')->name('payment_method');\n        Route::post('payment-method-change', 'CheckoutController@paymentMethodChange')->name('payment_method_change');\n        Route::post('payment-method-save', 'CheckoutController@paymentMethodSave')->name('payment_method_save');\n    });\n\n// Public\nRoute::name('checkout.')\n    //->prefix(multilanguage_route_prefix('checkout'))\n    ->namespace('\\MicroweberPackages\\Checkout\\Http\\Controllers')\n    ->group(function () {\n        Route::get('login', 'CheckoutController@login')->name('login');\n        Route::get('forgot-password', 'CheckoutController@forgotPassword')->name('forgot_password');\n        Route::get('register', 'CheckoutController@register')->name('register');\n        Route::get('finish/{id}', 'CheckoutController@finish')->name('finish');\n    });\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Checkout\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckoutV2\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\Closure $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $checkCart = cart_get_items_count();\n\n        if (!$checkCart) {\n            //$shop_page = get_content('single=true&content_type=page&is_shop=1');\n            $shop_page = app()->content_repository->getFirstShopPage();\n\n            $redir = site_url();\n            if ($shop_page and isset($shop_page['id'])) {\n                $link = content_link($shop_page['id']);\n                if ($link) {\n                    $redir = $link;\n                }\n\n            }\n\n            return redirect($redir);\n        }\n\n        $requiresRegistration = get_option('shop_require_registration', 'website') == '1';\n        if ($requiresRegistration and is_logged() == false) {\n            return redirect(route('checkout.login'));\n        }\n\n        return $next($request);\n    }\n}\n", "<?php\n\n// Private\nRoute::name('checkout.')\n   // ->prefix(multilanguage_route_prefix('checkout'))\n    ->middleware([\n        \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n       \\MicroweberPackages\\Checkout\\Http\\Middleware\\CheckoutV2::class,\n       \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n   ])\n    ->namespace('\\MicroweberPackages\\Checkout\\Http\\Controllers')\n    ->group(function () {\n\n        // Contact info\n        Route::get('cart', 'CheckoutController@index')->name('cart');\n        Route::get('contact-information', 'CheckoutController@contactInformation')->name('contact_information');\n        Route::post('contact-information-save', 'CheckoutController@contactInformationSave')->name('contact_information_save');\n\n        // Shipping info\n        Route::get('shipping-method', 'CheckoutController@shippingMethod')->name('shipping_method');\n        Route::post('shipping-method-change', 'CheckoutController@shippingMethodChange')->name('shipping_method_change');\n        Route::post('shipping-method-save', 'CheckoutController@shippingMethodSave')->name('shipping_method_save');\n\n        // Payment method\n        Route::get('payment-method', 'CheckoutController@paymentMethod')->name('payment_method');\n        Route::post('payment-method-change', 'CheckoutController@paymentMethodChange')->name('payment_method_change');\n        Route::post('payment-method-save', 'CheckoutController@paymentMethodSave')->name('payment_method_save');\n    });\n\n// Public\nRoute::name('checkout.')\n    //->prefix(multilanguage_route_prefix('checkout'))\n    ->namespace('\\MicroweberPackages\\Checkout\\Http\\Controllers')\n    ->group(function () {\n        Route::get('login', 'CheckoutController@login')->name('login');\n        Route::get('forgot-password', 'CheckoutController@forgotPassword')->name('forgot_password');\n        Route::get('register', 'CheckoutController@register')->name('register');\n        Route::get('finish/{id}', 'CheckoutController@finish')->name('finish');\n    });\n"], "filenames": ["src/MicroweberPackages/Checkout/Http/Middleware/CheckoutV2.php", "src/MicroweberPackages/Checkout/routes/web.php"], "buggy_code_start_loc": [18, 6], "buggy_code_end_loc": [19, 7], "fixing_code_start_loc": [17, 6], "fixing_code_end_loc": [17, 11], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in Packagist microweber/microweber prior to 1.2.11.", "other": {"cve": {"id": "CVE-2022-0379", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-26T16:15:07.713", "lastModified": "2022-02-02T16:04:57.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in Packagist microweber/microweber prior to 1.2.11."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en Packagist microweber/microweber versiones anteriores a 1.2.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.11", "matchCriteriaId": "52D59B39-B1A3-45D1-B4C4-65BEF86F2D85"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/f017cbfbd5c4f097d2c78c5e15b6c8a9da479d7b", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/933f94b8-c5e7-4c3a-92e0-4d1577d5fee6", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/f017cbfbd5c4f097d2c78c5e15b6c8a9da479d7b"}}