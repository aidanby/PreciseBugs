{"buggy_code": ["/* Pi-hole: A black hole for Internet advertisements\n *  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n *  Network-wide ad blocking via your own hardware.\n *\n *  This file is copyright under the latest version of the EUPL.\n *  Please see LICENSE file for your rights under this license. */\n\n/* global utils:false */\n\nvar table;\nvar groups = [];\nvar token = $(\"#token\").text();\n\nfunction reloadClientSuggestions() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_unconfigured_clients\", token: token },\n    function (data) {\n      var sel = $(\"#select\");\n      sel.empty();\n\n      // In order for the placeholder value to appear, we have to have a blank\n      // <option> as the first option in our <select> control. This is because\n      // the browser tries to select the first option by default. If our first\n      // option were non-empty, the browser would display this instead of the\n      // placeholder.\n      sel.append($(\"<option />\"));\n\n      // Add data obtained from API\n      for (var key in data) {\n        if (!Object.prototype.hasOwnProperty.call(data, key)) {\n          continue;\n        }\n\n        var text = key;\n        var keyPlain = key;\n        if (key.startsWith(\"IP-\")) {\n          // Mock MAC address for address-only devices\n          keyPlain = key.substring(3);\n          text = keyPlain;\n        }\n\n        // Append host name if available\n        if (data[key].length > 0) {\n          text += \" (\" + data[key] + \")\";\n        }\n\n        sel.append($(\"<option />\").val(keyPlain).text(text));\n      }\n    },\n    \"json\"\n  );\n}\n\nfunction getGroups() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_groups\", token: token },\n    function (data) {\n      groups = data.data;\n      initTable();\n    },\n    \"json\"\n  );\n}\n\n$(function () {\n  $(\"#btnAdd\").on(\"click\", addClient);\n  $(\"select\").select2({\n    tags: true,\n    placeholder: \"Select client...\",\n    allowClear: true,\n  });\n\n  reloadClientSuggestions();\n  utils.setBsSelectDefaults();\n  getGroups();\n\n  $(\"#select\").on(\"change\", function () {\n    $(\"#ip-custom\").val(\"\");\n    $(\"#ip-custom\").prop(\"disabled\", $(\"#select option:selected\").val() !== \"custom\");\n  });\n});\n\nfunction initTable() {\n  table = $(\"#clientsTable\").DataTable({\n    ajax: {\n      url: \"scripts/pi-hole/php/groups.php\",\n      data: { action: \"get_clients\", token: token },\n      type: \"POST\",\n    },\n    order: [[0, \"asc\"]],\n    columns: [\n      { data: \"id\", visible: false },\n      { data: \"ip\", type: \"ip-address\" },\n      { data: \"comment\" },\n      { data: \"groups\", searchable: false },\n      { data: \"name\", width: \"80px\", orderable: false },\n    ],\n    drawCallback: function () {\n      $('button[id^=\"deleteClient_\"]').on(\"click\", deleteClient);\n      // Remove visible dropdown to prevent orphaning\n      $(\"body > .bootstrap-select.dropdown\").remove();\n    },\n    rowCallback: function (row, data) {\n      $(row).attr(\"data-id\", data.id);\n      var tooltip =\n        \"Added: \" +\n        utils.datetime(data.date_added, false) +\n        \"\\nLast modified: \" +\n        utils.datetime(data.date_modified, false) +\n        \"\\nDatabase ID: \" +\n        data.id;\n      var ipName =\n        '<code id=\"ip_' +\n        data.id +\n        '\" title=\"' +\n        tooltip +\n        '\" class=\"breakall\">' +\n        data.ip +\n        \"</code>\";\n      if (data.name !== null && data.name.length > 0)\n        ipName +=\n          '<br><code id=\"name_' +\n          data.id +\n          '\" title=\"' +\n          tooltip +\n          '\" class=\"breakall\">' +\n          data.name +\n          \"</code>\";\n      $(\"td:eq(0)\", row).html(ipName);\n\n      $(\"td:eq(1)\", row).html('<input id=\"comment_' + data.id + '\" class=\"form-control\">');\n      var commentEl = $(\"#comment_\" + data.id, row);\n      commentEl.val(utils.unescapeHtml(data.comment));\n      commentEl.on(\"change\", editClient);\n\n      $(\"td:eq(2)\", row).empty();\n      $(\"td:eq(2)\", row).append(\n        '<select class=\"selectpicker\" id=\"multiselect_' + data.id + '\" multiple></select>'\n      );\n      var selectEl = $(\"#multiselect_\" + data.id, row);\n      // Add all known groups\n      for (var i = 0; i < groups.length; i++) {\n        var dataSub = \"\";\n        if (!groups[i].enabled) {\n          dataSub = 'data-subtext=\"(disabled)\"';\n        }\n\n        selectEl.append(\n          $(\"<option \" + dataSub + \"/>\")\n            .val(groups[i].id)\n            .text(groups[i].name)\n        );\n      }\n\n      // Select assigned groups\n      selectEl.val(data.groups);\n      // Initialize bootstrap-select\n      selectEl\n        // fix dropdown if it would stick out right of the viewport\n        .on(\"show.bs.select\", function () {\n          var winWidth = $(window).width();\n          var dropdownEl = $(\"body > .bootstrap-select.dropdown\");\n          if (dropdownEl.length > 0) {\n            dropdownEl.removeClass(\"align-right\");\n            var width = dropdownEl.width();\n            var left = dropdownEl.offset().left;\n            if (left + width > winWidth) {\n              dropdownEl.addClass(\"align-right\");\n            }\n          }\n        })\n        .on(\"changed.bs.select\", function () {\n          // enable Apply button\n          if ($(applyBtn).prop(\"disabled\")) {\n            $(applyBtn)\n              .addClass(\"btn-success\")\n              .prop(\"disabled\", false)\n              .on(\"click\", function () {\n                editClient.call(selectEl);\n              });\n          }\n        })\n        .on(\"hide.bs.select\", function () {\n          // Restore values if drop-down menu is closed without clicking the Apply button\n          if (!$(applyBtn).prop(\"disabled\")) {\n            $(this).val(data.groups).selectpicker(\"refresh\");\n            $(applyBtn).removeClass(\"btn-success\").prop(\"disabled\", true).off(\"click\");\n          }\n        })\n        .selectpicker()\n        .siblings(\".dropdown-menu\")\n        .find(\".bs-actionsbox\")\n        .prepend(\n          '<button type=\"button\" id=btn_apply_' +\n            data.id +\n            ' class=\"btn btn-block btn-sm\" disabled>Apply</button>'\n        );\n\n      var applyBtn = \"#btn_apply_\" + data.id;\n\n      var button =\n        '<button type=\"button\" class=\"btn btn-danger btn-xs\" id=\"deleteClient_' +\n        data.id +\n        '\">' +\n        '<span class=\"far fa-trash-alt\"></span>' +\n        \"</button>\";\n      $(\"td:eq(3)\", row).html(button);\n    },\n    dom:\n      \"<'row'<'col-sm-4'l><'col-sm-8'f>>\" +\n      \"<'row'<'col-sm-12'<'table-responsive'tr>>>\" +\n      \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    lengthMenu: [\n      [10, 25, 50, 100, -1],\n      [10, 25, 50, 100, \"All\"],\n    ],\n    stateSave: true,\n    stateSaveCallback: function (settings, data) {\n      utils.stateSaveCallback(\"groups-clients-table\", data);\n    },\n    stateLoadCallback: function () {\n      var data = utils.stateLoadCallback(\"groups-clients-table\");\n\n      // Return if not available\n      if (data === null) {\n        return null;\n      }\n\n      // Reset visibility of ID column\n      data.columns[0].visible = false;\n      // Apply loaded state to table\n      return data;\n    },\n  });\n\n  // Disable autocorrect in the search box\n  var input = document.querySelector(\"input[type=search]\");\n  if (input !== null) {\n    input.setAttribute(\"autocomplete\", \"off\");\n    input.setAttribute(\"autocorrect\", \"off\");\n    input.setAttribute(\"autocapitalize\", \"off\");\n    input.setAttribute(\"spellcheck\", false);\n  }\n\n  table.on(\"order.dt\", function () {\n    var order = table.order();\n    if (order[0][0] !== 0 || order[0][1] !== \"asc\") {\n      $(\"#resetButton\").removeClass(\"hidden\");\n    } else {\n      $(\"#resetButton\").addClass(\"hidden\");\n    }\n  });\n\n  $(\"#resetButton\").on(\"click\", function () {\n    table.order([[0, \"asc\"]]).draw();\n    $(\"#resetButton\").addClass(\"hidden\");\n  });\n}\n\nfunction addClient() {\n  var ip = $(\"#select\").val().trim();\n  var comment = utils.escapeHtml($(\"#new_comment\").val());\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Adding client...\", ip);\n\n  if (ip.length === 0) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Please specify a client IP or MAC address\");\n    return;\n  }\n\n  // Validate input, can be:\n  // - IPv4 address (with and without CIDR)\n  // - IPv6 address (with and without CIDR)\n  // - MAC address (in the form AA:BB:CC:DD:EE:FF)\n  // - host name (arbitrary form, we're only checking against some reserved characters)\n  if (utils.validateIPv4CIDR(ip) || utils.validateIPv6CIDR(ip) || utils.validateMAC(ip)) {\n    // Convert input to upper case (important for MAC addresses)\n    ip = ip.toUpperCase();\n  } else if (!utils.validateHostname(ip)) {\n    utils.enableAll();\n    utils.showAlert(\n      \"warning\",\n      \"\",\n      \"Warning\",\n      \"Input is neither a valid IP or MAC address nor a valid host name!\"\n    );\n    return;\n  }\n\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"add_client\", ip: ip, comment: comment, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-plus\", \"Successfully added client\", ip);\n        reloadClientSuggestions();\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while adding new client\", response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while adding new client\", jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n\nfunction editClient() {\n  var elem = $(this).attr(\"id\");\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var groups = tr.find(\"#multiselect_\" + id).val();\n  var ip = utils.escapeHtml(tr.find(\"#ip_\" + id).text());\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n  var comment = utils.escapeHtml(tr.find(\"#comment_\" + id).val());\n\n  var done = \"edited\";\n  var notDone = \"editing\";\n  switch (elem) {\n    case \"multiselect_\" + id:\n      done = \"edited groups of\";\n      notDone = \"editing groups of\";\n      break;\n    case \"comment_\" + id:\n      done = \"edited comment of\";\n      notDone = \"editing comment of\";\n      break;\n    default:\n      alert(\"bad element or invalid data-id!\");\n      return;\n  }\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Editing client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: {\n      action: \"edit_client\",\n      id: id,\n      groups: groups,\n      token: token,\n      comment: comment,\n    },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-pencil-alt\", \"Successfully \" + done + \" client\", ip);\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\n          \"error\",\n          \"Error while \" + notDone + \" client with ID \" + id,\n          response.message\n        );\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\n        \"error\",\n        \"\",\n        \"Error while \" + notDone + \" client with ID \" + id,\n        jqXHR.responseText\n      );\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n\nfunction deleteClient() {\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var ip = tr.find(\"#ip_\" + id).text();\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Deleting client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"delete_client\", id: id, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"far fa-trash-alt\", \"Successfully deleted client \", ip);\n        table.row(tr).remove().draw(false).ajax.reload(null, false);\n        reloadClientSuggestions();\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n", "<?php\n/* Pi-hole: A black hole for Internet advertisements\n*  (c) 2019 Pi-hole, LLC (https://pi-hole.net)\n*  Network-wide ad blocking via your own hardware.\n*\n*  This file is copyright under the latest version of the EUPL.\n*  Please see LICENSE file for your rights under this license. */\n\nrequire_once('auth.php');\n\n// Authentication checks\nif (!isset($api)) {\n    if (isset($_POST['token'])) {\n        check_cors();\n        check_csrf($_POST['token']);\n    } else {\n        log_and_die('Not allowed (login session invalid or expired, please relogin on the Pi-hole dashboard)!');\n    }\n}\n\n$reload = false;\n\nrequire_once('func.php');\nrequire_once('database.php');\n$GRAVITYDB = getGravityDBFilename();\n$db = SQLite3_connect($GRAVITYDB, SQLITE3_OPEN_READWRITE);\n\nfunction JSON_success($message = null)\n{\n    header('Content-type: application/json');\n    echo json_encode(array('success' => true, 'message' => $message));\n}\n\nfunction JSON_error($message = null)\n{\n    header('Content-type: application/json');\n    $response = array('success' => false, 'message' => $message);\n    if (isset($_POST['action'])) {\n        array_push($response, array('action' => $_POST['action']));\n    }\n    echo json_encode($response);\n}\n\nif ($_POST['action'] == 'get_groups') {\n    // List all available groups\n    try {\n        $query = $db->query('SELECT * FROM \"group\";');\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_group') {\n    // Add new group\n    try {\n        $input = html_entity_decode(trim($_POST['name']));\n        $names = str_getcsv($input, ' ');\n        $total = count($names);\n        $added = 0;\n        $stmt = $db->prepare('INSERT INTO \"group\" (name,description) VALUES (:name,:desc)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $desc = $_POST['desc'];\n        if (strlen($desc) === 0) {\n            // Store NULL in database for empty descriptions\n            $desc = null;\n        }\n        if (!$stmt->bindValue(':desc', $desc, SQLITE3_TEXT)) {\n            throw new Exception('While binding desc: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($names as $name) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($name) || strlen($name) == 0) {\n                continue;\n            }\n\n            if (!$stmt->bindValue(':name', $name, SQLITE3_TEXT)) {\n                throw new Exception('While binding name: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" groups\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" groups\");\n            }\n            $added++;\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_group') {\n    // Edit group identified by ID\n    try {\n        $name = html_entity_decode($_POST['name']);\n        $desc = html_entity_decode($_POST['desc']);\n\n        $stmt = $db->prepare('UPDATE \"group\" SET enabled=:enabled, name=:name, description=:desc WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = ((int) $_POST['status']) !== 0 ? 1 : 0;\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':name', $name, SQLITE3_TEXT)) {\n            throw new Exception('While binding name: ' . $db->lastErrorMsg());\n        }\n\n        if (strlen($desc) === 0) {\n            // Store NULL in database for empty descriptions\n            $desc = null;\n        }\n        if (!$stmt->bindValue(':desc', $desc, SQLITE3_TEXT)) {\n            throw new Exception('While binding desc: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_group') {\n    // Delete group identified by ID\n    try {\n        $table_name = ['domainlist_by_group', 'client_by_group', 'adlist_by_group', 'group'];\n        $table_keys = ['group_id', 'group_id', 'group_id', 'id'];\n        for ($i = 0; $i < count($table_name); $i++) {\n            $table = $table_name[$i];\n            $key = $table_keys[$i];\n\n            $stmt = $db->prepare(\"DELETE FROM \\\"$table\\\" WHERE $key = :id;\");\n            if (!$stmt) {\n                throw new Exception(\"While preparing DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception(\"While binding id to DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception(\"While executing DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->reset()) {\n                throw new Exception(\"While resetting DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n        }\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_clients') {\n    // List all available groups\n    try {\n        $QUERYDB = getQueriesDBFilename();\n        $FTLdb = SQLite3_connect($QUERYDB);\n\n        $query = $db->query('SELECT * FROM client;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s client table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM client_by_group WHERE client_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s client_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $stmt = $FTLdb->prepare('SELECT name FROM network_addresses WHERE ip = :ip;');\n            if (!$stmt) {\n                throw new Exception('Error while preparing network table statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':ip', $res['ip'], SQLITE3_TEXT)) {\n                throw new Exception('While binding to network table statement: ' . $db->lastErrorMsg());\n            }\n\n            $result = $stmt->execute();\n            if (!$result) {\n                throw new Exception('While executing network table statement: ' . $db->lastErrorMsg());\n            }\n\n            // Check if got a hostname from the database. This may not be the case if the client is\n            // specified by MAC address, a hostname or via a more general selector like an interface.\n            $name_result = $result->fetchArray(SQLITE3_ASSOC);\n            if(!is_bool($name_result))\n            {\n                $res['name'] = $name_result['name'];\n                error_log(\"IP: \".$name_result['name']);\n            }\n            else\n            {\n                // Check if we can get a host name from the database when looking up the MAC\n                // address of this client instead.\n                $stmt = $FTLdb->prepare('SELECT name FROM network n JOIN network_addresses na ON na.network_id = n.id WHERE hwaddr=:hwaddr COLLATE NOCASE AND name IS NOT NULL;');\n                if (!$stmt) {\n                    throw new Exception('Error while preparing network table statement: ' . $db->lastErrorMsg());\n                }\n\n                if (!$stmt->bindValue(':hwaddr', $res['ip'], SQLITE3_TEXT)) {\n                    throw new Exception('While binding to network table statement: ' . $db->lastErrorMsg());\n                }\n\n                $result = $stmt->execute();\n                if (!$result) {\n                    throw new Exception('While executing network table statement: ' . $db->lastErrorMsg());\n                }\n\n                // Check if we found a result. There may be multiple entries for\n                // this client in the network_addresses table. We use the first\n                // hostname we find for the sake of simplicity.\n                $name_result = $result->fetchArray(SQLITE3_ASSOC);\n                if(!is_bool($name_result))\n                {\n                    $res['name'] = $name_result['name'];\n                }\n                else\n                {\n                    $res['name'] = null;\n                }\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $group_query->finalize();\n            $res['groups'] = $groups;\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_unconfigured_clients') {\n    // List all available clients WITHOUT already configured clients\n    try {\n        $QUERYDB = getQueriesDBFilename();\n        $FTLdb = SQLite3_connect($QUERYDB);\n\n        $query = $FTLdb->query('SELECT DISTINCT id,hwaddr,macVendor FROM network ORDER BY firstSeen DESC;');\n        if (!$query) {\n            throw new Exception('Error while querying FTL\\'s database: ' . $db->lastErrorMsg());\n        }\n\n        // Loop over results\n        $ips = array();\n        while ($res = $query->fetchArray(SQLITE3_ASSOC)) {\n            $id = intval($res[\"id\"]);\n\n            // Get possibly associated IP addresses and hostnames for this client\n            $query_ips = $FTLdb->query(\"SELECT ip,name FROM network_addresses WHERE network_id = $id ORDER BY lastSeen DESC;\");\n            $addresses = [];\n            $names = [];\n            while ($res_ips = $query_ips->fetchArray(SQLITE3_ASSOC)) {\n                array_push($addresses, utf8_encode($res_ips[\"ip\"]));\n                if($res_ips[\"name\"] !== null)\n                    array_push($names,utf8_encode($res_ips[\"name\"]));\n            }\n            $query_ips->finalize();\n\n            // Prepare extra information\n            $extrainfo = \"\";\n            // Add list of associated host names to info string (if available)\n            if(count($names) === 1)\n                $extrainfo .= \"hostname: \".$names[0];\n            else if(count($names) > 0)\n                $extrainfo .= \"hostnames: \".implode(\", \", $names);\n\n            // Add device vendor to info string (if available)\n            if (strlen($res[\"macVendor\"]) > 0) {\n                if (count($names) > 0)\n                    $extrainfo .= \"; \";\n                $extrainfo .= \"vendor: \".htmlspecialchars($res[\"macVendor\"]);\n            }\n\n            // Add list of associated host names to info string (if available and if this is not a mock device)\n            if (stripos($res[\"hwaddr\"], \"ip-\") === FALSE) {\n\n                if ((count($names) > 0 || strlen($res[\"macVendor\"]) > 0) && count($addresses) > 0)\n                    $extrainfo .= \"; \";\n\n                if(count($addresses) === 1)\n                    $extrainfo .= \"address: \".$addresses[0];\n                else if(count($addresses) > 0)\n                    $extrainfo .= \"addresses: \".implode(\", \", $addresses);\n            }\n\n            $ips[strtoupper($res['hwaddr'])] = $extrainfo;\n        }\n        $FTLdb->close();\n\n        $query = $db->query('SELECT ip FROM client;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s database: ' . $db->lastErrorMsg());\n        }\n\n        // Loop over results, remove already configured clients\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            if (isset($ips[$res['ip']])) {\n                unset($ips[$res['ip']]);\n            }\n            if (isset($ips[\"IP-\".$res['ip']])) {\n                unset($ips[\"IP-\".$res['ip']]);\n            }\n        }\n\n        header('Content-type: application/json');\n        echo json_encode($ips);\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_client') {\n    // Add new client\n    try {\n        $ips = explode(' ', trim($_POST['ip']));\n        $total = count($ips);\n        $added = 0;\n        $stmt = $db->prepare('INSERT INTO client (ip,comment) VALUES (:ip,:comment)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($ips as $ip) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($ip) || strlen($ip) == 0) {\n                continue;\n            }\n\n            if (!$stmt->bindValue(':ip', $ip, SQLITE3_TEXT)) {\n                throw new Exception('While binding ip: ' . $db->lastErrorMsg());\n            }\n\n            $comment = html_entity_decode($_POST['comment']);\n            if (strlen($comment) === 0) {\n                    // Store NULL in database for empty comments\n                    $comment = null;\n            }\n            if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n                throw new Exception('While binding comment: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" clients\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" clients\");\n            }\n            $added++;\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_client') {\n    // Edit client identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE client SET comment=:comment WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM client_by_group WHERE client_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO client_by_group (client_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_client') {\n    // Delete client identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM client_by_group WHERE client_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM client WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing client statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to client statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing client statement: ' . $db->lastErrorMsg());\n        }\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_domains') {\n    // List all available groups\n    try {\n        $limit = \"\";\n        if (isset($_POST[\"showtype\"]) && $_POST[\"showtype\"] === \"white\"){\n            $limit = \" WHERE type = 0 OR type = 2\";\n        } elseif (isset($_POST[\"showtype\"]) && $_POST[\"showtype\"] === \"black\"){\n            $limit = \" WHERE type = 1 OR type = 3\";\n        } elseif (isset($_POST[\"type\"]) && is_numeric($_POST[\"type\"])){\n            $limit = \" WHERE type = \" . $_POST[\"type\"];\n        }\n        $query = $db->query('SELECT * FROM domainlist'.$limit);\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s domainlist table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM domainlist_by_group WHERE domainlist_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s domainlist_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $res['groups'] = $groups;\n            if (extension_loaded(\"intl\") &&\n                ($res['type'] === ListType::whitelist ||\n                 $res['type'] === ListType::blacklist) ) {\n\n                // Try to convert possible IDNA domain to Unicode, we try the UTS #46 standard first\n                // as this is the new default, see https://sourceforge.net/p/icu/mailman/message/32980778/\n                // We know that this fails for some Google domains violating the standard\n                // see https://github.com/pi-hole/AdminLTE/issues/1223\n                $utf8_domain = false;\n                if (defined(\"INTL_IDNA_VARIANT_UTS46\")) {\n                    // We have to use the option IDNA_NONTRANSITIONAL_TO_ASCII here\n                    // to ensure sparkasse-gie\u00dfen.de is not converted into\n                    // sparkass-giessen.de but into xn--sparkasse-gieen-2ib.de\n                    // as mandated by the UTS #46 standard\n                    $utf8_domain = idn_to_utf8($res['domain'], IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n                }\n\n                // If conversion failed, try with the (deprecated!) IDNA 2003 variant\n                // We have to check for its existence as support of this variant is\n                // scheduled for removal with PHP 8.0\n                // see https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n                if ($utf8_domain === false && defined(\"INTL_IDNA_VARIANT_2003\")) {\n                    $utf8_domain = idn_to_utf8($res['domain'], IDNA_DEFAULT, INTL_IDNA_VARIANT_2003);\n                }\n\n                // Convert domain name to international form\n                // if applicable and extension is available\n                if ($utf8_domain !== false && $res['domain'] !== $utf8_domain) {\n                    $res['domain'] = $utf8_domain.' ('.$res['domain'].')';\n                }\n            }\n            // Prevent domain and comment fields from returning any arbitrary javascript code which could be executed on the browser.\n            $res['domain'] = htmlentities($res['domain']);\n            $res['comment'] = htmlentities($res['comment']);\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_domain' || $_POST['action'] == 'replace_domain') {\n    // Add new domain\n    try {\n        $domains = explode(' ', html_entity_decode(trim($_POST['domain'])));\n        $before = intval($db->querySingle(\"SELECT COUNT(*) FROM domainlist;\"));\n        $total = count($domains);\n        $added = 0;\n\n        $db->query('BEGIN TRANSACTION;');\n\n        // Prepare INSERT INTO statement\n        $insert_stmt = $db->prepare('INSERT OR IGNORE INTO domainlist (domain,type) VALUES (:domain,:type)');\n        if (!$insert_stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        // Prepare UPDATE statement\n        $update_stmt = $db->prepare('UPDATE domainlist SET comment = :comment WHERE domain = :domain AND type = :type');\n        if (!$update_stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $check_stmt = null;\n        $delete_stmt = null;\n        if($_POST['action'] == 'replace_domain') {\n            // Check statement will reveal any group associations for a given (domain,type) which do NOT belong to the default group\n            $check_stmt = $db->prepare('SELECT EXISTS(SELECT domain FROM domainlist_by_group dlbg JOIN domainlist dl on dlbg.domainlist_id = dl.id WHERE dl.domain = :domain AND dlbg.group_id != 0)');\n            if (!$check_stmt) {\n                throw new Exception('While preparing check statement: ' . $db->lastErrorMsg());\n            }\n            // Delete statement will remove this domain from any type of list\n            $delete_stmt = $db->prepare('DELETE FROM domainlist WHERE domain = :domain');\n            if (!$delete_stmt) {\n                throw new Exception('While preparing delete statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if (isset($_POST['type'])) {\n            $type = intval($_POST['type']);\n        } else if (isset($_POST['list']) && $_POST['list'] === \"white\") {\n            $type = ListType::whitelist;\n        } else if (isset($_POST['list']) && $_POST['list'] === \"black\") {\n            $type = ListType::blacklist;\n        }\n\n        if (!$insert_stmt->bindValue(':type', $type, SQLITE3_TEXT) ||\n            !$update_stmt->bindValue(':type', $type, SQLITE3_TEXT)) {\n            throw new Exception('While binding type: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n            // Store NULL in database for empty comments\n            $comment = null;\n        }\n        if (!$update_stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($domains as $domain) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($domain) || strlen($domain) == 0) {\n                continue;\n            }\n\n            $input = $domain;\n            // Convert domain name to IDNA ASCII form for international domains\n            if (extension_loaded(\"intl\")) {\n                // Be prepared that this may fail and see our comments above\n                // (search for \"idn_to_utf8)\n                $idn_domain = false;\n                if (defined(\"INTL_IDNA_VARIANT_UTS46\")) {\n                    $idn_domain = idn_to_ascii($domain, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n                }\n                if ($idn_domain === false && defined(\"INTL_IDNA_VARIANT_2003\")) {\n                    $idn_domain = idn_to_ascii($domain, IDNA_DEFAULT, INTL_IDNA_VARIANT_2003);\n                }\n                if($idn_domain !== false) {\n                    $domain = $idn_domain;\n                }\n            }\n\n            if(isset($_POST['type']) && strlen($_POST['type']) === 2 && $_POST['type'][1] === 'W')\n            {\n                // Apply wildcard-style formatting\n                $domain = \"(\\\\.|^)\".str_replace(\".\",\"\\\\.\",$domain).\"$\";\n            }\n\n            if($type === ListType::whitelist || $type === ListType::blacklist)\n            {\n                // If adding to the exact lists, we convert the domain lower case and check whether it is valid\n                $domain = strtolower($domain);\n                $msg = \"\";\n                if(!validDomain($domain, $msg))\n                {\n                    // This is the case when idn_to_ascii() modified the string\n                    if($input !== $domain && strlen($domain) > 0)\n                        $errormsg = 'Domain ' . htmlentities($input) . ' (converted to \"' . htmlentities(utf8_encode($domain)) . '\") is not a valid domain because ' . $msg . '.';\n                    elseif($input !== $domain)\n                        $errormsg = 'Domain ' . htmlentities($input) . ' is not a valid domain because ' . $msg . '.';\n                    else\n                        $errormsg = 'Domain ' . htmlentities(utf8_encode($domain)) . ' is not a valid domain because ' . $msg . '.';\n                    throw new Exception($errormsg . '<br>Added ' . $added . \" out of \". $total . \" domains\");\n                }\n            }\n\n            // First try to delete any occurrences of this domain if we're in\n            // replace mode. Only do this when the domain to be replaced is in\n            // the default group! Otherwise, we would shuffle group settings and\n            // just throw an error at the user to tell them to change this\n            // domain manually. This ensures user's will really get what they\n            // want from us.\n            if($_POST['action'] == 'replace_domain') {\n                if (!$check_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain to check: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                $check_result = $check_stmt->execute();\n                if (!$check_result) {\n                    throw new Exception('While executing check: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                // Check return value of CHECK query (0 = only default group, 1 = special group assignments)\n                $only_default_group = (($check_result->fetchArray(SQLITE3_NUM)[0]) == 0) ? true : false;\n                if(!$only_default_group) {\n                    throw new Exception('Domain ' . $domain . ' is configured with special group settings.<br>'.\n                    'Please modify the domain on the respective group management pages.');\n                }\n\n                if (!$delete_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                if (!$delete_stmt->execute()) {\n                    throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n            }\n\n\n            if (!$insert_stmt->bindValue(':domain', $domain, SQLITE3_TEXT) ||\n                !$update_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n\n            // First execute INSERT OR IGNORE statement to create a record for\n            // this domain (ignore if already existing)\n            if (!$insert_stmt->execute()) {\n                throw new Exception('While executing INSERT OT IGNORE: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n\n            // Then update the record with a new comment (and modification date\n            // due to the trigger event) We are not using REPLACE INTO to avoid\n            // the initial DELETE event (losing group assignments in case an\n            // entry did already exist).\n            if (!$update_stmt->execute()) {\n                throw new Exception('While executing UPDATE: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n            $added++;\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $after = intval($db->querySingle(\"SELECT COUNT(*) FROM domainlist;\"));\n        $difference = $after - $before;\n        if($total === 1) {\n            if($difference !== 1) {\n                    $msg = \"Not adding \". htmlentities(utf8_encode($domain)) . \" as it is already on the list\";\n            } else {\n                    $msg = \"Added \" . htmlentities(utf8_encode($domain));\n            }\n        } else {\n            if($difference !== $total) {\n                    $msg = \"Added \" . ($after-$before) . \" out of \". $total . \" domains (skipped duplicates)\";\n            } else {\n                    $msg = \"Added \" . $total . \" domains\";\n            }\n        }\n        $reload = true;\n        JSON_success($msg);\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_domain') {\n    // Edit domain identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE domainlist SET enabled=:enabled, comment=:comment, type=:type WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = intval($_POST['status']);\n        if ($status !== 0) {\n                $status = 1;\n        }\n\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO domainlist_by_group (domainlist_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_domain') {\n    // Delete domain identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n}  elseif ($_POST['action'] == 'delete_domain_string') {\n    // Delete domain identified by the domain string itself\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id=(SELECT id FROM domainlist WHERE domain=:domain AND type=:type);');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':domain', $_POST['domain'], SQLITE3_TEXT)) {\n            throw new Exception('While binding domain to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist WHERE domain=:domain AND type=:type');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':domain', $_POST['domain'], SQLITE3_TEXT)) {\n            throw new Exception('While binding domain to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_adlists') {\n    // List all available groups\n    try {\n        $query = $db->query('SELECT * FROM adlist;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s adlist table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM adlist_by_group WHERE adlist_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s adlist_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $res['groups'] = $groups;\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_adlist') {\n    // Add new adlist\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $addresses = explode(' ', html_entity_decode(trim($_POST['address'])));\n        $total = count($addresses);\n        $added = 0;\n\n        $stmt = $db->prepare('INSERT OR IGNORE INTO adlist (address,comment) VALUES (:address,:comment)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n            // Store NULL in database for empty comments\n            $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($addresses as $address) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($address) || strlen($address) == 0) {\n                continue;\n            }\n\n            // this will remove first @ that is after schema and before domain\n           // $1 is optional schema, $2 is userinfo\n            $check_address = preg_replace(\"|([^:/]*://)?([^/]+)@|\", \"$1$2\", $address, 1);\n\n            if(preg_match(\"/[^a-zA-Z0-9:\\/?&%=~._()-;]/\", $check_address) !== 0) {\n                throw new Exception('<strong>Invalid adlist URL ' . htmlentities($address) . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n\n            if (!$stmt->bindValue(':address', $address, SQLITE3_TEXT)) {\n                throw new Exception('While binding address: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n            $added++;\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_adlist') {\n    // Edit adlist identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE adlist SET enabled=:enabled, comment=:comment WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = intval($_POST['status']);\n        if ($status !== 0) {\n                $status = 1;\n        }\n\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM adlist_by_group WHERE adlist_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO adlist_by_group (adlist_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_adlist') {\n    // Delete adlist identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM adlist_by_group WHERE adlist_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM adlist WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_audit') {\n        // Add new domain\n        try {\n            $domains = explode(' ', html_entity_decode(trim($_POST['domain'])));\n            $before = intval($db->querySingle(\"SELECT COUNT(*) FROM domain_audit;\"));\n            $total = count($domains);\n            $added = 0;\n\n            $db->query('BEGIN TRANSACTION;');\n\n            $stmt = $db->prepare('REPLACE INTO domain_audit (domain) VALUES (:domain)');\n            if (!$stmt) {\n                throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n            }\n\n            foreach ($domains as $domain) {\n                // Silently skip this entry when it is empty or not a string (e.g. NULL)\n                if(!is_string($domain) || strlen($domain) == 0) {\n                    continue;\n                }\n\n                if (!$stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                if (!$stmt->execute()) {\n                    throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n                $added++;\n            }\n\n            if(!$db->query('COMMIT;')) {\n                throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n            }\n\n            $after = intval($db->querySingle(\"SELECT COUNT(*) FROM domain_audit;\"));\n            $difference = $after - $before;\n            if($total === 1) {\n                if($difference !== 1) {\n                        $msg = \"Not adding \". htmlentities(utf8_encode($domain)) . \" as it is already on the list\";\n                } else {\n                        $msg = \"Added \" . htmlentities(utf8_encode($domain));\n                }\n            } else {\n                if($difference !== $total) {\n                        $msg = \"Added \" . ($after-$before) . \" out of \". $total . \" domains (skipped duplicates)\";\n                } else {\n                        $msg = \"Added \" . $total . \" domains\";\n                }\n            }\n\n            // Reloading isn't necessary for audit domains (no effect on blocking)\n            $reload = false;\n            JSON_success($msg);\n        } catch (\\Exception $ex) {\n            JSON_error($ex->getMessage());\n        }\n} else {\n    log_and_die('Requested action not supported!');\n}\n// Reload lists in pihole-FTL after having added something\nif ($reload) {\n    $output = pihole_execute('restartdns reload-lists');\n}\n"], "fixing_code": ["/* Pi-hole: A black hole for Internet advertisements\n *  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n *  Network-wide ad blocking via your own hardware.\n *\n *  This file is copyright under the latest version of the EUPL.\n *  Please see LICENSE file for your rights under this license. */\n\n/* global utils:false */\n\nvar table;\nvar groups = [];\nvar token = $(\"#token\").text();\n\nfunction reloadClientSuggestions() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_unconfigured_clients\", token: token },\n    function (data) {\n      var sel = $(\"#select\");\n      sel.empty();\n\n      // In order for the placeholder value to appear, we have to have a blank\n      // <option> as the first option in our <select> control. This is because\n      // the browser tries to select the first option by default. If our first\n      // option were non-empty, the browser would display this instead of the\n      // placeholder.\n      sel.append($(\"<option />\"));\n\n      // Add data obtained from API\n      for (var key in data) {\n        if (!Object.prototype.hasOwnProperty.call(data, key)) {\n          continue;\n        }\n\n        var text = key;\n        var keyPlain = key;\n        if (key.startsWith(\"IP-\")) {\n          // Mock MAC address for address-only devices\n          keyPlain = key.substring(3);\n          text = keyPlain;\n        }\n\n        // Append host name if available\n        if (data[key].length > 0) {\n          text += \" (\" + data[key] + \")\";\n        }\n\n        sel.append($(\"<option />\").val(keyPlain).text(text));\n      }\n    },\n    \"json\"\n  );\n}\n\nfunction getGroups() {\n  $.post(\n    \"scripts/pi-hole/php/groups.php\",\n    { action: \"get_groups\", token: token },\n    function (data) {\n      groups = data.data;\n      initTable();\n    },\n    \"json\"\n  );\n}\n\n$(function () {\n  $(\"#btnAdd\").on(\"click\", addClient);\n  $(\"select\").select2({\n    tags: true,\n    placeholder: \"Select client...\",\n    allowClear: true,\n  });\n\n  reloadClientSuggestions();\n  utils.setBsSelectDefaults();\n  getGroups();\n\n  $(\"#select\").on(\"change\", function () {\n    $(\"#ip-custom\").val(\"\");\n    $(\"#ip-custom\").prop(\"disabled\", $(\"#select option:selected\").val() !== \"custom\");\n  });\n});\n\nfunction initTable() {\n  table = $(\"#clientsTable\").DataTable({\n    ajax: {\n      url: \"scripts/pi-hole/php/groups.php\",\n      data: { action: \"get_clients\", token: token },\n      type: \"POST\",\n    },\n    order: [[0, \"asc\"]],\n    columns: [\n      { data: \"id\", visible: false },\n      { data: \"ip\", type: \"ip-address\" },\n      { data: \"comment\" },\n      { data: \"groups\", searchable: false },\n      { data: \"name\", width: \"80px\", orderable: false },\n    ],\n    drawCallback: function () {\n      $('button[id^=\"deleteClient_\"]').on(\"click\", deleteClient);\n      // Remove visible dropdown to prevent orphaning\n      $(\"body > .bootstrap-select.dropdown\").remove();\n    },\n    rowCallback: function (row, data) {\n      $(row).attr(\"data-id\", data.id);\n      var tooltip =\n        \"Added: \" +\n        utils.datetime(data.date_added, false) +\n        \"\\nLast modified: \" +\n        utils.datetime(data.date_modified, false) +\n        \"\\nDatabase ID: \" +\n        data.id;\n      var ipName =\n        '<code id=\"ip_' +\n        data.id +\n        '\" title=\"' +\n        tooltip +\n        '\" class=\"breakall\">' +\n        data.ip +\n        \"</code>\";\n      if (data.name !== null && data.name.length > 0)\n        ipName +=\n          '<br><code id=\"name_' +\n          data.id +\n          '\" title=\"' +\n          tooltip +\n          '\" class=\"breakall\">' +\n          data.name +\n          \"</code>\";\n      $(\"td:eq(0)\", row).html(ipName);\n\n      $(\"td:eq(1)\", row).html('<input id=\"comment_' + data.id + '\" class=\"form-control\">');\n      var commentEl = $(\"#comment_\" + data.id, row);\n      commentEl.val(utils.unescapeHtml(data.comment));\n      commentEl.on(\"change\", editClient);\n\n      $(\"td:eq(2)\", row).empty();\n      $(\"td:eq(2)\", row).append(\n        '<select class=\"selectpicker\" id=\"multiselect_' + data.id + '\" multiple></select>'\n      );\n      var selectEl = $(\"#multiselect_\" + data.id, row);\n      // Add all known groups\n      for (var i = 0; i < groups.length; i++) {\n        var dataSub = \"\";\n        if (!groups[i].enabled) {\n          dataSub = 'data-subtext=\"(disabled)\"';\n        }\n\n        selectEl.append(\n          $(\"<option \" + dataSub + \"/>\")\n            .val(groups[i].id)\n            .text(groups[i].name)\n        );\n      }\n\n      // Select assigned groups\n      selectEl.val(data.groups);\n      // Initialize bootstrap-select\n      selectEl\n        // fix dropdown if it would stick out right of the viewport\n        .on(\"show.bs.select\", function () {\n          var winWidth = $(window).width();\n          var dropdownEl = $(\"body > .bootstrap-select.dropdown\");\n          if (dropdownEl.length > 0) {\n            dropdownEl.removeClass(\"align-right\");\n            var width = dropdownEl.width();\n            var left = dropdownEl.offset().left;\n            if (left + width > winWidth) {\n              dropdownEl.addClass(\"align-right\");\n            }\n          }\n        })\n        .on(\"changed.bs.select\", function () {\n          // enable Apply button\n          if ($(applyBtn).prop(\"disabled\")) {\n            $(applyBtn)\n              .addClass(\"btn-success\")\n              .prop(\"disabled\", false)\n              .on(\"click\", function () {\n                editClient.call(selectEl);\n              });\n          }\n        })\n        .on(\"hide.bs.select\", function () {\n          // Restore values if drop-down menu is closed without clicking the Apply button\n          if (!$(applyBtn).prop(\"disabled\")) {\n            $(this).val(data.groups).selectpicker(\"refresh\");\n            $(applyBtn).removeClass(\"btn-success\").prop(\"disabled\", true).off(\"click\");\n          }\n        })\n        .selectpicker()\n        .siblings(\".dropdown-menu\")\n        .find(\".bs-actionsbox\")\n        .prepend(\n          '<button type=\"button\" id=btn_apply_' +\n            data.id +\n            ' class=\"btn btn-block btn-sm\" disabled>Apply</button>'\n        );\n\n      var applyBtn = \"#btn_apply_\" + data.id;\n\n      var button =\n        '<button type=\"button\" class=\"btn btn-danger btn-xs\" id=\"deleteClient_' +\n        data.id +\n        '\">' +\n        '<span class=\"far fa-trash-alt\"></span>' +\n        \"</button>\";\n      $(\"td:eq(3)\", row).html(button);\n    },\n    dom:\n      \"<'row'<'col-sm-4'l><'col-sm-8'f>>\" +\n      \"<'row'<'col-sm-12'<'table-responsive'tr>>>\" +\n      \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    lengthMenu: [\n      [10, 25, 50, 100, -1],\n      [10, 25, 50, 100, \"All\"],\n    ],\n    stateSave: true,\n    stateSaveCallback: function (settings, data) {\n      utils.stateSaveCallback(\"groups-clients-table\", data);\n    },\n    stateLoadCallback: function () {\n      var data = utils.stateLoadCallback(\"groups-clients-table\");\n\n      // Return if not available\n      if (data === null) {\n        return null;\n      }\n\n      // Reset visibility of ID column\n      data.columns[0].visible = false;\n      // Apply loaded state to table\n      return data;\n    },\n  });\n\n  // Disable autocorrect in the search box\n  var input = document.querySelector(\"input[type=search]\");\n  if (input !== null) {\n    input.setAttribute(\"autocomplete\", \"off\");\n    input.setAttribute(\"autocorrect\", \"off\");\n    input.setAttribute(\"autocapitalize\", \"off\");\n    input.setAttribute(\"spellcheck\", false);\n  }\n\n  table.on(\"order.dt\", function () {\n    var order = table.order();\n    if (order[0][0] !== 0 || order[0][1] !== \"asc\") {\n      $(\"#resetButton\").removeClass(\"hidden\");\n    } else {\n      $(\"#resetButton\").addClass(\"hidden\");\n    }\n  });\n\n  $(\"#resetButton\").on(\"click\", function () {\n    table.order([[0, \"asc\"]]).draw();\n    $(\"#resetButton\").addClass(\"hidden\");\n  });\n}\n\nfunction addClient() {\n  var ip = utils.escapeHtml($(\"#select\").val().trim());\n  var comment = utils.escapeHtml($(\"#new_comment\").val());\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Adding client...\", ip);\n\n  if (ip.length === 0) {\n    utils.enableAll();\n    utils.showAlert(\"warning\", \"\", \"Warning\", \"Please specify a client IP or MAC address\");\n    return;\n  }\n\n  // Validate input, can be:\n  // - IPv4 address (with and without CIDR)\n  // - IPv6 address (with and without CIDR)\n  // - MAC address (in the form AA:BB:CC:DD:EE:FF)\n  // - host name (arbitrary form, we're only checking against some reserved characters)\n  if (utils.validateIPv4CIDR(ip) || utils.validateIPv6CIDR(ip) || utils.validateMAC(ip)) {\n    // Convert input to upper case (important for MAC addresses)\n    ip = ip.toUpperCase();\n  } else if (!utils.validateHostname(ip)) {\n    utils.enableAll();\n    utils.showAlert(\n      \"warning\",\n      \"\",\n      \"Warning\",\n      \"Input is neither a valid IP or MAC address nor a valid host name!\"\n    );\n    return;\n  }\n\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"add_client\", ip: ip, comment: comment, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-plus\", \"Successfully added client\", ip);\n        reloadClientSuggestions();\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while adding new client\", response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while adding new client\", jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n\nfunction editClient() {\n  var elem = $(this).attr(\"id\");\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var groups = tr.find(\"#multiselect_\" + id).val();\n  var ip = utils.escapeHtml(tr.find(\"#ip_\" + id).text());\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n  var comment = utils.escapeHtml(tr.find(\"#comment_\" + id).val());\n\n  var done = \"edited\";\n  var notDone = \"editing\";\n  switch (elem) {\n    case \"multiselect_\" + id:\n      done = \"edited groups of\";\n      notDone = \"editing groups of\";\n      break;\n    case \"comment_\" + id:\n      done = \"edited comment of\";\n      notDone = \"editing comment of\";\n      break;\n    default:\n      alert(\"bad element or invalid data-id!\");\n      return;\n  }\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Editing client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: {\n      action: \"edit_client\",\n      id: id,\n      groups: groups,\n      token: token,\n      comment: comment,\n    },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"fas fa-pencil-alt\", \"Successfully \" + done + \" client\", ip);\n        table.ajax.reload(null, false);\n      } else {\n        utils.showAlert(\n          \"error\",\n          \"Error while \" + notDone + \" client with ID \" + id,\n          response.message\n        );\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\n        \"error\",\n        \"\",\n        \"Error while \" + notDone + \" client with ID \" + id,\n        jqXHR.responseText\n      );\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n\nfunction deleteClient() {\n  var tr = $(this).closest(\"tr\");\n  var id = tr.attr(\"data-id\");\n  var ip = utils.escapeHtml(tr.find(\"#ip_\" + id).text());\n  var name = utils.escapeHtml(tr.find(\"#name_\" + id).text());\n\n  if (name.length > 0) {\n    ip += \" (\" + name + \")\";\n  }\n\n  utils.disableAll();\n  utils.showAlert(\"info\", \"\", \"Deleting client...\", ip);\n  $.ajax({\n    url: \"scripts/pi-hole/php/groups.php\",\n    method: \"post\",\n    dataType: \"json\",\n    data: { action: \"delete_client\", id: id, token: token },\n    success: function (response) {\n      utils.enableAll();\n      if (response.success) {\n        utils.showAlert(\"success\", \"far fa-trash-alt\", \"Successfully deleted client \", ip);\n        table.row(tr).remove().draw(false).ajax.reload(null, false);\n        reloadClientSuggestions();\n      } else {\n        utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, response.message);\n      }\n    },\n    error: function (jqXHR, exception) {\n      utils.enableAll();\n      utils.showAlert(\"error\", \"\", \"Error while deleting client with ID \" + id, jqXHR.responseText);\n      console.log(exception); // eslint-disable-line no-console\n    },\n  });\n}\n", "<?php\n/* Pi-hole: A black hole for Internet advertisements\n*  (c) 2019 Pi-hole, LLC (https://pi-hole.net)\n*  Network-wide ad blocking via your own hardware.\n*\n*  This file is copyright under the latest version of the EUPL.\n*  Please see LICENSE file for your rights under this license. */\n\nrequire_once('auth.php');\n\n// Authentication checks\nif (!isset($api)) {\n    if (isset($_POST['token'])) {\n        check_cors();\n        check_csrf($_POST['token']);\n    } else {\n        log_and_die('Not allowed (login session invalid or expired, please relogin on the Pi-hole dashboard)!');\n    }\n}\n\n$reload = false;\n\nrequire_once('func.php');\nrequire_once('database.php');\n$GRAVITYDB = getGravityDBFilename();\n$db = SQLite3_connect($GRAVITYDB, SQLITE3_OPEN_READWRITE);\n\nfunction JSON_success($message = null)\n{\n    header('Content-type: application/json');\n    echo json_encode(array('success' => true, 'message' => $message));\n}\n\nfunction JSON_error($message = null)\n{\n    header('Content-type: application/json');\n    $response = array('success' => false, 'message' => $message);\n    if (isset($_POST['action'])) {\n        array_push($response, array('action' => $_POST['action']));\n    }\n    echo json_encode($response);\n}\n\nif ($_POST['action'] == 'get_groups') {\n    // List all available groups\n    try {\n        $query = $db->query('SELECT * FROM \"group\";');\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_group') {\n    // Add new group\n    try {\n        $input = html_entity_decode(trim($_POST['name']));\n        $names = str_getcsv($input, ' ');\n        $total = count($names);\n        $added = 0;\n        $stmt = $db->prepare('INSERT INTO \"group\" (name,description) VALUES (:name,:desc)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $desc = $_POST['desc'];\n        if (strlen($desc) === 0) {\n            // Store NULL in database for empty descriptions\n            $desc = null;\n        }\n        if (!$stmt->bindValue(':desc', $desc, SQLITE3_TEXT)) {\n            throw new Exception('While binding desc: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($names as $name) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($name) || strlen($name) == 0) {\n                continue;\n            }\n\n            if (!$stmt->bindValue(':name', $name, SQLITE3_TEXT)) {\n                throw new Exception('While binding name: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" groups\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" groups\");\n            }\n            $added++;\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_group') {\n    // Edit group identified by ID\n    try {\n        $name = html_entity_decode($_POST['name']);\n        $desc = html_entity_decode($_POST['desc']);\n\n        $stmt = $db->prepare('UPDATE \"group\" SET enabled=:enabled, name=:name, description=:desc WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = ((int) $_POST['status']) !== 0 ? 1 : 0;\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':name', $name, SQLITE3_TEXT)) {\n            throw new Exception('While binding name: ' . $db->lastErrorMsg());\n        }\n\n        if (strlen($desc) === 0) {\n            // Store NULL in database for empty descriptions\n            $desc = null;\n        }\n        if (!$stmt->bindValue(':desc', $desc, SQLITE3_TEXT)) {\n            throw new Exception('While binding desc: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_group') {\n    // Delete group identified by ID\n    try {\n        $table_name = ['domainlist_by_group', 'client_by_group', 'adlist_by_group', 'group'];\n        $table_keys = ['group_id', 'group_id', 'group_id', 'id'];\n        for ($i = 0; $i < count($table_name); $i++) {\n            $table = $table_name[$i];\n            $key = $table_keys[$i];\n\n            $stmt = $db->prepare(\"DELETE FROM \\\"$table\\\" WHERE $key = :id;\");\n            if (!$stmt) {\n                throw new Exception(\"While preparing DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception(\"While binding id to DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception(\"While executing DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->reset()) {\n                throw new Exception(\"While resetting DELETE FROM $table statement: \" . $db->lastErrorMsg());\n            }\n        }\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_clients') {\n    // List all available groups\n    try {\n        $QUERYDB = getQueriesDBFilename();\n        $FTLdb = SQLite3_connect($QUERYDB);\n\n        $query = $db->query('SELECT * FROM client;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s client table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM client_by_group WHERE client_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s client_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $stmt = $FTLdb->prepare('SELECT name FROM network_addresses WHERE ip = :ip;');\n            if (!$stmt) {\n                throw new Exception('Error while preparing network table statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':ip', $res['ip'], SQLITE3_TEXT)) {\n                throw new Exception('While binding to network table statement: ' . $db->lastErrorMsg());\n            }\n\n            $result = $stmt->execute();\n            if (!$result) {\n                throw new Exception('While executing network table statement: ' . $db->lastErrorMsg());\n            }\n\n            // Check if got a hostname from the database. This may not be the case if the client is\n            // specified by MAC address, a hostname or via a more general selector like an interface.\n            $name_result = $result->fetchArray(SQLITE3_ASSOC);\n            if(!is_bool($name_result))\n            {\n                $res['name'] = $name_result['name'];\n                error_log(\"IP: \".$name_result['name']);\n            }\n            else\n            {\n                // Check if we can get a host name from the database when looking up the MAC\n                // address of this client instead.\n                $stmt = $FTLdb->prepare('SELECT name FROM network n JOIN network_addresses na ON na.network_id = n.id WHERE hwaddr=:hwaddr COLLATE NOCASE AND name IS NOT NULL;');\n                if (!$stmt) {\n                    throw new Exception('Error while preparing network table statement: ' . $db->lastErrorMsg());\n                }\n\n                if (!$stmt->bindValue(':hwaddr', $res['ip'], SQLITE3_TEXT)) {\n                    throw new Exception('While binding to network table statement: ' . $db->lastErrorMsg());\n                }\n\n                $result = $stmt->execute();\n                if (!$result) {\n                    throw new Exception('While executing network table statement: ' . $db->lastErrorMsg());\n                }\n\n                // Check if we found a result. There may be multiple entries for\n                // this client in the network_addresses table. We use the first\n                // hostname we find for the sake of simplicity.\n                $name_result = $result->fetchArray(SQLITE3_ASSOC);\n                if(!is_bool($name_result))\n                {\n                    $res['name'] = $name_result['name'];\n                }\n                else\n                {\n                    $res['name'] = null;\n                }\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $group_query->finalize();\n            $res['groups'] = $groups;\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_unconfigured_clients') {\n    // List all available clients WITHOUT already configured clients\n    try {\n        $QUERYDB = getQueriesDBFilename();\n        $FTLdb = SQLite3_connect($QUERYDB);\n\n        $query = $FTLdb->query('SELECT DISTINCT id,hwaddr,macVendor FROM network ORDER BY firstSeen DESC;');\n        if (!$query) {\n            throw new Exception('Error while querying FTL\\'s database: ' . $db->lastErrorMsg());\n        }\n\n        // Loop over results\n        $ips = array();\n        while ($res = $query->fetchArray(SQLITE3_ASSOC)) {\n            $id = intval($res[\"id\"]);\n\n            // Get possibly associated IP addresses and hostnames for this client\n            $query_ips = $FTLdb->query(\"SELECT ip,name FROM network_addresses WHERE network_id = $id ORDER BY lastSeen DESC;\");\n            $addresses = [];\n            $names = [];\n            while ($res_ips = $query_ips->fetchArray(SQLITE3_ASSOC)) {\n                array_push($addresses, utf8_encode($res_ips[\"ip\"]));\n                if($res_ips[\"name\"] !== null)\n                    array_push($names,utf8_encode($res_ips[\"name\"]));\n            }\n            $query_ips->finalize();\n\n            // Prepare extra information\n            $extrainfo = \"\";\n            // Add list of associated host names to info string (if available)\n            if(count($names) === 1)\n                $extrainfo .= \"hostname: \".$names[0];\n            else if(count($names) > 0)\n                $extrainfo .= \"hostnames: \".implode(\", \", $names);\n\n            // Add device vendor to info string (if available)\n            if (strlen($res[\"macVendor\"]) > 0) {\n                if (count($names) > 0)\n                    $extrainfo .= \"; \";\n                $extrainfo .= \"vendor: \".htmlspecialchars($res[\"macVendor\"]);\n            }\n\n            // Add list of associated host names to info string (if available and if this is not a mock device)\n            if (stripos($res[\"hwaddr\"], \"ip-\") === FALSE) {\n\n                if ((count($names) > 0 || strlen($res[\"macVendor\"]) > 0) && count($addresses) > 0)\n                    $extrainfo .= \"; \";\n\n                if(count($addresses) === 1)\n                    $extrainfo .= \"address: \".$addresses[0];\n                else if(count($addresses) > 0)\n                    $extrainfo .= \"addresses: \".implode(\", \", $addresses);\n            }\n\n            $ips[strtoupper($res['hwaddr'])] = $extrainfo;\n        }\n        $FTLdb->close();\n\n        $query = $db->query('SELECT ip FROM client;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s database: ' . $db->lastErrorMsg());\n        }\n\n        // Loop over results, remove already configured clients\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            if (isset($ips[$res['ip']])) {\n                unset($ips[$res['ip']]);\n            }\n            if (isset($ips[\"IP-\".$res['ip']])) {\n                unset($ips[\"IP-\".$res['ip']]);\n            }\n        }\n\n        header('Content-type: application/json');\n        echo json_encode($ips);\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_client') {\n    // Add new client\n    try {\n        $ips = explode(' ', trim($_POST['ip']));\n        $total = count($ips);\n        $added = 0;\n        $stmt = $db->prepare('INSERT INTO client (ip,comment) VALUES (:ip,:comment)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($ips as $ip) {\n            // Encode $ip variable to prevent XSS\n            $ip = htmlspecialchars($ip);\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($ip) || strlen($ip) == 0) {\n                continue;\n            }\n\n            if (!$stmt->bindValue(':ip', $ip, SQLITE3_TEXT)) {\n                throw new Exception('While binding ip: ' . $db->lastErrorMsg());\n            }\n\n            $comment = html_entity_decode($_POST['comment']);\n            if (strlen($comment) === 0) {\n                    // Store NULL in database for empty comments\n                    $comment = null;\n            }\n            if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n                throw new Exception('While binding comment: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" clients\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" clients\");\n            }\n            $added++;\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_client') {\n    // Edit client identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE client SET comment=:comment WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM client_by_group WHERE client_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO client_by_group (client_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_client') {\n    // Delete client identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM client_by_group WHERE client_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing client_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM client WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing client statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to client statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing client statement: ' . $db->lastErrorMsg());\n        }\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_domains') {\n    // List all available groups\n    try {\n        $limit = \"\";\n        if (isset($_POST[\"showtype\"]) && $_POST[\"showtype\"] === \"white\"){\n            $limit = \" WHERE type = 0 OR type = 2\";\n        } elseif (isset($_POST[\"showtype\"]) && $_POST[\"showtype\"] === \"black\"){\n            $limit = \" WHERE type = 1 OR type = 3\";\n        } elseif (isset($_POST[\"type\"]) && is_numeric($_POST[\"type\"])){\n            $limit = \" WHERE type = \" . $_POST[\"type\"];\n        }\n        $query = $db->query('SELECT * FROM domainlist'.$limit);\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s domainlist table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM domainlist_by_group WHERE domainlist_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s domainlist_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $res['groups'] = $groups;\n            if (extension_loaded(\"intl\") &&\n                ($res['type'] === ListType::whitelist ||\n                 $res['type'] === ListType::blacklist) ) {\n\n                // Try to convert possible IDNA domain to Unicode, we try the UTS #46 standard first\n                // as this is the new default, see https://sourceforge.net/p/icu/mailman/message/32980778/\n                // We know that this fails for some Google domains violating the standard\n                // see https://github.com/pi-hole/AdminLTE/issues/1223\n                $utf8_domain = false;\n                if (defined(\"INTL_IDNA_VARIANT_UTS46\")) {\n                    // We have to use the option IDNA_NONTRANSITIONAL_TO_ASCII here\n                    // to ensure sparkasse-gie\u00dfen.de is not converted into\n                    // sparkass-giessen.de but into xn--sparkasse-gieen-2ib.de\n                    // as mandated by the UTS #46 standard\n                    $utf8_domain = idn_to_utf8($res['domain'], IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n                }\n\n                // If conversion failed, try with the (deprecated!) IDNA 2003 variant\n                // We have to check for its existence as support of this variant is\n                // scheduled for removal with PHP 8.0\n                // see https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n                if ($utf8_domain === false && defined(\"INTL_IDNA_VARIANT_2003\")) {\n                    $utf8_domain = idn_to_utf8($res['domain'], IDNA_DEFAULT, INTL_IDNA_VARIANT_2003);\n                }\n\n                // Convert domain name to international form\n                // if applicable and extension is available\n                if ($utf8_domain !== false && $res['domain'] !== $utf8_domain) {\n                    $res['domain'] = $utf8_domain.' ('.$res['domain'].')';\n                }\n            }\n            // Prevent domain and comment fields from returning any arbitrary javascript code which could be executed on the browser.\n            $res['domain'] = htmlentities($res['domain']);\n            $res['comment'] = htmlentities($res['comment']);\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_domain' || $_POST['action'] == 'replace_domain') {\n    // Add new domain\n    try {\n        $domains = explode(' ', html_entity_decode(trim($_POST['domain'])));\n        $before = intval($db->querySingle(\"SELECT COUNT(*) FROM domainlist;\"));\n        $total = count($domains);\n        $added = 0;\n\n        $db->query('BEGIN TRANSACTION;');\n\n        // Prepare INSERT INTO statement\n        $insert_stmt = $db->prepare('INSERT OR IGNORE INTO domainlist (domain,type) VALUES (:domain,:type)');\n        if (!$insert_stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        // Prepare UPDATE statement\n        $update_stmt = $db->prepare('UPDATE domainlist SET comment = :comment WHERE domain = :domain AND type = :type');\n        if (!$update_stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $check_stmt = null;\n        $delete_stmt = null;\n        if($_POST['action'] == 'replace_domain') {\n            // Check statement will reveal any group associations for a given (domain,type) which do NOT belong to the default group\n            $check_stmt = $db->prepare('SELECT EXISTS(SELECT domain FROM domainlist_by_group dlbg JOIN domainlist dl on dlbg.domainlist_id = dl.id WHERE dl.domain = :domain AND dlbg.group_id != 0)');\n            if (!$check_stmt) {\n                throw new Exception('While preparing check statement: ' . $db->lastErrorMsg());\n            }\n            // Delete statement will remove this domain from any type of list\n            $delete_stmt = $db->prepare('DELETE FROM domainlist WHERE domain = :domain');\n            if (!$delete_stmt) {\n                throw new Exception('While preparing delete statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if (isset($_POST['type'])) {\n            $type = intval($_POST['type']);\n        } else if (isset($_POST['list']) && $_POST['list'] === \"white\") {\n            $type = ListType::whitelist;\n        } else if (isset($_POST['list']) && $_POST['list'] === \"black\") {\n            $type = ListType::blacklist;\n        }\n\n        if (!$insert_stmt->bindValue(':type', $type, SQLITE3_TEXT) ||\n            !$update_stmt->bindValue(':type', $type, SQLITE3_TEXT)) {\n            throw new Exception('While binding type: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n            // Store NULL in database for empty comments\n            $comment = null;\n        }\n        if (!$update_stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($domains as $domain) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($domain) || strlen($domain) == 0) {\n                continue;\n            }\n\n            $input = $domain;\n            // Convert domain name to IDNA ASCII form for international domains\n            if (extension_loaded(\"intl\")) {\n                // Be prepared that this may fail and see our comments above\n                // (search for \"idn_to_utf8)\n                $idn_domain = false;\n                if (defined(\"INTL_IDNA_VARIANT_UTS46\")) {\n                    $idn_domain = idn_to_ascii($domain, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n                }\n                if ($idn_domain === false && defined(\"INTL_IDNA_VARIANT_2003\")) {\n                    $idn_domain = idn_to_ascii($domain, IDNA_DEFAULT, INTL_IDNA_VARIANT_2003);\n                }\n                if($idn_domain !== false) {\n                    $domain = $idn_domain;\n                }\n            }\n\n            if(isset($_POST['type']) && strlen($_POST['type']) === 2 && $_POST['type'][1] === 'W')\n            {\n                // Apply wildcard-style formatting\n                $domain = \"(\\\\.|^)\".str_replace(\".\",\"\\\\.\",$domain).\"$\";\n            }\n\n            if($type === ListType::whitelist || $type === ListType::blacklist)\n            {\n                // If adding to the exact lists, we convert the domain lower case and check whether it is valid\n                $domain = strtolower($domain);\n                $msg = \"\";\n                if(!validDomain($domain, $msg))\n                {\n                    // This is the case when idn_to_ascii() modified the string\n                    if($input !== $domain && strlen($domain) > 0)\n                        $errormsg = 'Domain ' . htmlentities($input) . ' (converted to \"' . htmlentities(utf8_encode($domain)) . '\") is not a valid domain because ' . $msg . '.';\n                    elseif($input !== $domain)\n                        $errormsg = 'Domain ' . htmlentities($input) . ' is not a valid domain because ' . $msg . '.';\n                    else\n                        $errormsg = 'Domain ' . htmlentities(utf8_encode($domain)) . ' is not a valid domain because ' . $msg . '.';\n                    throw new Exception($errormsg . '<br>Added ' . $added . \" out of \". $total . \" domains\");\n                }\n            }\n\n            // First try to delete any occurrences of this domain if we're in\n            // replace mode. Only do this when the domain to be replaced is in\n            // the default group! Otherwise, we would shuffle group settings and\n            // just throw an error at the user to tell them to change this\n            // domain manually. This ensures user's will really get what they\n            // want from us.\n            if($_POST['action'] == 'replace_domain') {\n                if (!$check_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain to check: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                $check_result = $check_stmt->execute();\n                if (!$check_result) {\n                    throw new Exception('While executing check: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                // Check return value of CHECK query (0 = only default group, 1 = special group assignments)\n                $only_default_group = (($check_result->fetchArray(SQLITE3_NUM)[0]) == 0) ? true : false;\n                if(!$only_default_group) {\n                    throw new Exception('Domain ' . $domain . ' is configured with special group settings.<br>'.\n                    'Please modify the domain on the respective group management pages.');\n                }\n\n                if (!$delete_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                if (!$delete_stmt->execute()) {\n                    throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n            }\n\n\n            if (!$insert_stmt->bindValue(':domain', $domain, SQLITE3_TEXT) ||\n                !$update_stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n\n            // First execute INSERT OR IGNORE statement to create a record for\n            // this domain (ignore if already existing)\n            if (!$insert_stmt->execute()) {\n                throw new Exception('While executing INSERT OT IGNORE: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n\n            // Then update the record with a new comment (and modification date\n            // due to the trigger event) We are not using REPLACE INTO to avoid\n            // the initial DELETE event (losing group assignments in case an\n            // entry did already exist).\n            if (!$update_stmt->execute()) {\n                throw new Exception('While executing UPDATE: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" domains\");\n            }\n            $added++;\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $after = intval($db->querySingle(\"SELECT COUNT(*) FROM domainlist;\"));\n        $difference = $after - $before;\n        if($total === 1) {\n            if($difference !== 1) {\n                    $msg = \"Not adding \". htmlentities(utf8_encode($domain)) . \" as it is already on the list\";\n            } else {\n                    $msg = \"Added \" . htmlentities(utf8_encode($domain));\n            }\n        } else {\n            if($difference !== $total) {\n                    $msg = \"Added \" . ($after-$before) . \" out of \". $total . \" domains (skipped duplicates)\";\n            } else {\n                    $msg = \"Added \" . $total . \" domains\";\n            }\n        }\n        $reload = true;\n        JSON_success($msg);\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_domain') {\n    // Edit domain identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE domainlist SET enabled=:enabled, comment=:comment, type=:type WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = intval($_POST['status']);\n        if ($status !== 0) {\n                $status = 1;\n        }\n\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO domainlist_by_group (domainlist_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_domain') {\n    // Delete domain identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n}  elseif ($_POST['action'] == 'delete_domain_string') {\n    // Delete domain identified by the domain string itself\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM domainlist_by_group WHERE domainlist_id=(SELECT id FROM domainlist WHERE domain=:domain AND type=:type);');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':domain', $_POST['domain'], SQLITE3_TEXT)) {\n            throw new Exception('While binding domain to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type to domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM domainlist WHERE domain=:domain AND type=:type');\n        if (!$stmt) {\n            throw new Exception('While preparing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':domain', $_POST['domain'], SQLITE3_TEXT)) {\n            throw new Exception('While binding domain to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':type', intval($_POST['type']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding type to domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing domainlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'get_adlists') {\n    // List all available groups\n    try {\n        $query = $db->query('SELECT * FROM adlist;');\n        if (!$query) {\n            throw new Exception('Error while querying gravity\\'s adlist table: ' . $db->lastErrorMsg());\n        }\n\n        $data = array();\n        while (($res = $query->fetchArray(SQLITE3_ASSOC)) !== false) {\n            $group_query = $db->query('SELECT group_id FROM adlist_by_group WHERE adlist_id = ' . $res['id'] . ';');\n            if (!$group_query) {\n                throw new Exception('Error while querying gravity\\'s adlist_by_group table: ' . $db->lastErrorMsg());\n            }\n\n            $groups = array();\n            while ($gres = $group_query->fetchArray(SQLITE3_ASSOC)) {\n                array_push($groups, $gres['group_id']);\n            }\n            $res['groups'] = $groups;\n            array_push($data, $res);\n        }\n\n        header('Content-type: application/json');\n        echo json_encode(array('data' => $data));\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_adlist') {\n    // Add new adlist\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $addresses = explode(' ', html_entity_decode(trim($_POST['address'])));\n        $total = count($addresses);\n        $added = 0;\n\n        $stmt = $db->prepare('INSERT OR IGNORE INTO adlist (address,comment) VALUES (:address,:comment)');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n            // Store NULL in database for empty comments\n            $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        foreach ($addresses as $address) {\n            // Silently skip this entry when it is empty or not a string (e.g. NULL)\n            if(!is_string($address) || strlen($address) == 0) {\n                continue;\n            }\n\n            // this will remove first @ that is after schema and before domain\n           // $1 is optional schema, $2 is userinfo\n            $check_address = preg_replace(\"|([^:/]*://)?([^/]+)@|\", \"$1$2\", $address, 1);\n\n            if(preg_match(\"/[^a-zA-Z0-9:\\/?&%=~._()-;]/\", $check_address) !== 0) {\n                throw new Exception('<strong>Invalid adlist URL ' . htmlentities($address) . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n\n            if (!$stmt->bindValue(':address', $address, SQLITE3_TEXT)) {\n                throw new Exception('While binding address: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                'Added ' . $added . \" out of \". $total . \" adlists\");\n            }\n            $added++;\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'edit_adlist') {\n    // Edit adlist identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('UPDATE adlist SET enabled=:enabled, comment=:comment WHERE id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n        }\n\n        $status = intval($_POST['status']);\n        if ($status !== 0) {\n                $status = 1;\n        }\n\n        if (!$stmt->bindValue(':enabled', $status, SQLITE3_INTEGER)) {\n            throw new Exception('While binding enabled: ' . $db->lastErrorMsg());\n        }\n\n        $comment = html_entity_decode($_POST['comment']);\n        if (strlen($comment) === 0) {\n                // Store NULL in database for empty comments\n                $comment = null;\n        }\n        if (!$stmt->bindValue(':comment', $comment, SQLITE3_TEXT)) {\n            throw new Exception('While binding comment: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM adlist_by_group WHERE adlist_id = :id');\n        if (!$stmt) {\n            throw new Exception('While preparing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing DELETE statement: ' . $db->lastErrorMsg());\n        }\n\n        $groups = array();\n        if(isset($_POST['groups']))\n            $groups = $_POST['groups'];\n        foreach ($groups as $gid) {\n            $stmt = $db->prepare('INSERT INTO adlist_by_group (adlist_id,group_id) VALUES(:id,:gid);');\n            if (!$stmt) {\n                throw new Exception('While preparing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n                throw new Exception('While binding id: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->bindValue(':gid', intval($gid), SQLITE3_INTEGER)) {\n                throw new Exception('While binding gid: ' . $db->lastErrorMsg());\n            }\n\n            if (!$stmt->execute()) {\n                throw new Exception('While executing INSERT INTO statement: ' . $db->lastErrorMsg());\n            }\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'delete_adlist') {\n    // Delete adlist identified by ID\n    try {\n        $db->query('BEGIN TRANSACTION;');\n\n        $stmt = $db->prepare('DELETE FROM adlist_by_group WHERE adlist_id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing adlist_by_group statement: ' . $db->lastErrorMsg());\n        }\n\n        $stmt = $db->prepare('DELETE FROM adlist WHERE id=:id');\n        if (!$stmt) {\n            throw new Exception('While preparing adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->bindValue(':id', intval($_POST['id']), SQLITE3_INTEGER)) {\n            throw new Exception('While binding id to adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if (!$stmt->execute()) {\n            throw new Exception('While executing adlist statement: ' . $db->lastErrorMsg());\n        }\n\n        if(!$db->query('COMMIT;')) {\n            throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n        }\n\n        $reload = true;\n        JSON_success();\n    } catch (\\Exception $ex) {\n        JSON_error($ex->getMessage());\n    }\n} elseif ($_POST['action'] == 'add_audit') {\n        // Add new domain\n        try {\n            $domains = explode(' ', html_entity_decode(trim($_POST['domain'])));\n            $before = intval($db->querySingle(\"SELECT COUNT(*) FROM domain_audit;\"));\n            $total = count($domains);\n            $added = 0;\n\n            $db->query('BEGIN TRANSACTION;');\n\n            $stmt = $db->prepare('REPLACE INTO domain_audit (domain) VALUES (:domain)');\n            if (!$stmt) {\n                throw new Exception('While preparing statement: ' . $db->lastErrorMsg());\n            }\n\n            foreach ($domains as $domain) {\n                // Silently skip this entry when it is empty or not a string (e.g. NULL)\n                if(!is_string($domain) || strlen($domain) == 0) {\n                    continue;\n                }\n\n                if (!$stmt->bindValue(':domain', $domain, SQLITE3_TEXT)) {\n                    throw new Exception('While binding domain: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n\n                if (!$stmt->execute()) {\n                    throw new Exception('While executing: <strong>' . $db->lastErrorMsg() . '</strong><br>'.\n                    'Added ' . $added . \" out of \". $total . \" domains\");\n                }\n                $added++;\n            }\n\n            if(!$db->query('COMMIT;')) {\n                throw new Exception('While committing changes to the database: ' . $db->lastErrorMsg());\n            }\n\n            $after = intval($db->querySingle(\"SELECT COUNT(*) FROM domain_audit;\"));\n            $difference = $after - $before;\n            if($total === 1) {\n                if($difference !== 1) {\n                        $msg = \"Not adding \". htmlentities(utf8_encode($domain)) . \" as it is already on the list\";\n                } else {\n                        $msg = \"Added \" . htmlentities(utf8_encode($domain));\n                }\n            } else {\n                if($difference !== $total) {\n                        $msg = \"Added \" . ($after-$before) . \" out of \". $total . \" domains (skipped duplicates)\";\n                } else {\n                        $msg = \"Added \" . $total . \" domains\";\n                }\n            }\n\n            // Reloading isn't necessary for audit domains (no effect on blocking)\n            $reload = false;\n            JSON_success($msg);\n        } catch (\\Exception $ex) {\n            JSON_error($ex->getMessage());\n        }\n} else {\n    log_and_die('Requested action not supported!');\n}\n// Reload lists in pihole-FTL after having added something\nif ($reload) {\n    $output = pihole_execute('restartdns reload-lists');\n}\n"], "filenames": ["scripts/pi-hole/js/groups-clients.js", "scripts/pi-hole/php/groups.php"], "buggy_code_start_loc": [263, 349], "buggy_code_end_loc": [389, 349], "fixing_code_start_loc": [263, 350], "fixing_code_end_loc": [389, 352], "type": "CWE-79", "message": "Pi-hole's Web interface (based on AdminLTE) provides a central location to manage one's Pi-hole and review the statistics generated by FTLDNS. Prior to version 5.8, cross-site scripting is possible when adding a client via the groups-clients management page. This issue was patched in version 5.8.", "other": {"cve": {"id": "CVE-2021-41175", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-26T14:15:08.193", "lastModified": "2021-10-28T20:45:09.680", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pi-hole's Web interface (based on AdminLTE) provides a central location to manage one's Pi-hole and review the statistics generated by FTLDNS. Prior to version 5.8, cross-site scripting is possible when adding a client via the groups-clients management page. This issue was patched in version 5.8."}, {"lang": "es", "value": "La interfaz Web de Pi-hole (basada en AdminLTE) proporciona una ubicaci\u00f3n central para administrar el propio Pi-hole y revisar las estad\u00edsticas generadas por FTLDNS. En versiones anteriores a 5.8, era posible un ataque de tipo cross-site scripting cuando se agregaba un cliente por medio de la p\u00e1gina de administraci\u00f3n de grupos-clientes. Este problema fue parcheado en la versi\u00f3n 5.8"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pi-hole:web_interface:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.8", "matchCriteriaId": "182A32FC-8A74-4C19-BB3A-33EFA71BF6B6"}]}]}], "references": [{"url": "https://github.com/pi-hole/AdminLTE/commit/01191c7a1b8d5032991ed9d88e0db8d3dbec744d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pi-hole/AdminLTE/releases/tag/v5.8", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/pi-hole/AdminLTE/security/advisories/GHSA-mhr8-7rvg-8r43", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pi-hole/AdminLTE/commit/01191c7a1b8d5032991ed9d88e0db8d3dbec744d"}}