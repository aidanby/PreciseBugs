{"buggy_code": ["<?php \n// INSTALL_ROOT is defined in the index.php bootstrap file\ndefine('FUEL_VERSION', '1.5.0');\nif (!defined('MODULES_FOLDER'))\n{\n\tdefine('MODULES_FOLDER', '../../fuel/modules');\n}\ndefine('FUEL_FOLDER', 'fuel');\ndefine('MODULES_PATH', APPPATH.MODULES_FOLDER.'/');\ndefine('MODULES_FROM_APPCONTROLLERS', '../'.MODULES_FOLDER.'/');\ndefine('FUEL_PATH', MODULES_PATH.FUEL_FOLDER.'/');\ndefine('WEB_ROOT', str_replace('\\\\', '/', realpath(dirname(SELF)).DIRECTORY_SEPARATOR)); // replace \\ with / for windows\n\n// Needed to take care of some server environments\n$_SERVER['SCRIPT_NAME'] = preg_replace('#^/(.+)\\.php/(.*)#', '/$1.php', $_SERVER['SCRIPT_NAME']);\nif (!isset($_SERVER['HTTP_HOST']))\n{\n\t$_SERVER['HTTP_HOST'] = $_SERVER['SERVER_NAME'];\n\tif (!empty($_SERVER['SERVER_PORT']))\n\t{\n\t\t$_SERVER['HTTP_HOST'] .= ':'.$_SERVER['SERVER_PORT'];\n\t}\n}\ndefine('WEB_PATH', str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));\n\n// Change slashes for some Windows platforms\n$_FUEL_SEGS = explode('/', str_replace(\"\\\\\", '/', $_SERVER['SCRIPT_FILENAME']));\n\ndefine('WEB_FOLDER', (count($_FUEL_SEGS) > 1) ? $_FUEL_SEGS[count($_FUEL_SEGS)-2] : '/');\ndefine('MODULES_WEB_PATH', FUEL_FOLDER.'/modules/');\n\n// Must include language helper if you want to use lang function\ninclude(APPPATH.'helpers/MY_language_helper.php');\ninclude(FUEL_PATH.'config/fuel.php');\n\n// Used for CLI... must create $_SERVER['REQUEST_URI]\nif (defined('STDIN'))\n{\n\t$args = array_slice($_SERVER['argv'], 1);\n\t$_SERVER['REQUEST_URI'] = $args ? implode('/', $args) : '';\n}\n\ndefine('FUEL_ROUTE', $config['fuel_path']);\n\n// Detect URI path\nif (isset($_SERVER['REQUEST_URI']))\n{\n\t$_URI_PATH = $_SERVER['REQUEST_URI'];\n}\nelse if (isset($_SERVER['PATH_INFO']))\n{\n\t$_URI_PATH = $_SERVER['PATH_INFO'];\n}\nelse if (isset($_SERVER['ORIG_PATH_INFO']))\n{\n\t$_URI_PATH = $_SERVER['ORIG_PATH_INFO'];\n}\n\ndefine('USE_FUEL_ROUTES', (strpos($_URI_PATH, '/'.$config['fuel_path']) !== FALSE));\n\nforeach ($config['modules_allowed'] as $module)\n{\n\t$constants_path = MODULES_PATH . $module . '/config/' . $module . '_constants.php';\n\n\tif (file_exists($constants_path))\n\t{\n\t\trequire_once($constants_path);\n\t}\n}\n\nif ( ! defined('BASE_URL'))\n{\n\t$_base_path = $_SERVER['HTTP_HOST'].str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']);\n\n\tif ( ! empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off' OR $_SERVER['SERVER_PORT'] == 443)\n\t{\n\t\tdefine('BASE_URL', \"https://\".$_base_path);\n\t}\n\telse\n\t{\n\t\tdefine('BASE_URL', \"http://\".$_base_path);\n\t}\n}\n\nif ( ! defined('FUEL_DSN'))\n{\n\tdefine('FUEL_DSN', 'default');\n}\n\n/* End of file fuel_constants.php */\n/* Location: ./modules/fuel/config/fuel_constants.php */", "<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n/**\n * FUEL CMS\n * http://www.getfuelcms.com\n *\n * An open source Content Management System based on the \n * Codeigniter framework (http://codeigniter.com)\n *\n * @package\t\tFUEL CMS\n * @author\t\tDavid McReynolds @ Daylight Studio\n * @copyright\tCopyright (c) 2018, Daylight Studio LLC.\n * @license\t\thttp://docs.getfuelcms.com/general/license\n * @link\t\thttp://www.getfuelcms.com\n * @filesource\n */\n\n// ------------------------------------------------------------------------\n\n/**\n * FUEL Asset Class\n *\n * This class allows you to output css, js links and/or files as well as\n * allows you to compress and cache them. It also has convenience methods for \n * paths to different assets like images, PDFs, javascript css etc.\n * \n * Additionally, you can use the <a href=\"[user_guide_url]helpers/asset\">asset helper</a>\n * which provides a shortcut for many of the methods of the Asset class. \n * \n * This class is auto-loaded.\n *\n * @package\t\tFUEL CMS\n * @subpackage\tLibraries\n * @category\tLibraries\n * @author\t\tDavid McReynolds @ Daylight Studio\n * @link\t\thttp://docs.getfuelcms.com/libraries/asset\n */\n\nclass Asset {\n\t\n\t// relative to web_root\n\tpublic $assets_path = 'assets/';\n\n\t// relative to web_root/assets_path\n\tpublic $assets_folders = array(\n\t\t'images' => 'images/',\n\t\t'css' => 'css/',\n\t\t'js' => 'js/',\n\t\t'pdf' => 'pdf/',\n\t\t'swf' => 'swf/',\n\t\t'media' => 'media/',\n\t\t'captchas' => 'captchas/'\n\t\t);\n\n\t// makes paths to assets absolute\n\tpublic $assets_absolute_path = TRUE;\n\n\t// used for caching\n\tpublic $assets_last_updated = '00/00/0000 00:00:00';\n\n\t// appends timestamp of last updated after file name\n\tpublic $asset_append_cache_timestamp = array('js', 'css');\n\t\n\t/**\n\t * Optimize and/or cache assets. Options are:\n\t *\n\t<ul>\n\t\t<li><strong>FALSE</strong> - no optimization</li>\n\t\t<li><strong>TRUE</strong> - will combine files, strip whitespace, and gzip</li>\n\t\t<li><strong>inline</strong> - will render the files inline</li>\n\t\t<li><strong>gzip</strong> - will combine files (if multiple) and gzip without stripping whitespace</li>\n\t\t<li><strong>whitespace</strong> - will combine files (if multiple) and strip out whitespace without gzipping</li>\n\t\t<li><strong>combine</strong> - will combine files (if multiple) but will not strip out whitespace or gzip</li>\n\t</ul>\n\t */\n\tpublic $assets_output = FALSE;\n\n\t// force assets to recompile on each load\n\tpublic $force_assets_recompile = FALSE;\n\n\t// cache folder relative to the application folder... must be writable directory (default is the application/assets/cache folder)\n\tpublic $assets_cache_folder = 'cache/';\n\n\t// time limit on gzip cache file in seconds\n\tpublic $assets_gzip_cache_expiration = 3600;\n\t\n\t// module assets path \n\tpublic $assets_module_path = 'fuel/modules/{module}/assets/';\n\t\n\t// module context for assets\n\tpublic $assets_module = '';\n\t\n\t// will ignore loading css and js files if loaded already\n\tpublic $ignore_if_loaded = FALSE;\n\t\n\t// an array of all the css/js files used so we can check as to whether we need to call them again.\n\tprotected $_used = array();\n\t\n\t// cache of module configs loaded\n\tprotected $_module_config_loaded = array();\n\t\n\t// has assets configuration been loaded?\n\tprotected $_asset_config_loaded = FALSE;\n\t\n\t// the collection of files to cache\n\tprotected $_cacheable_files = array();\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Constructor\n\t *\n\t * Accepts an associative array as input, containing preferences (optional)\n\t *\n\t * @access\tpublic\n\t * @param\tarray\tconfig preferences\n\t * @return\tvoid\n\t */\t\n\tpublic function __construct($params = array())\n\t{\n\t\tif (!defined('WEB_ROOT')) define('WEB_ROOT', str_replace(SELF, '', FCPATH));\n\t\tif (!defined('WEB_PATH')) define('WEB_PATH', str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));\n\t\tif (count($params) > 0)\n\t\t{\n\t\t\t$this->initialize($params);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Initialize the user preferences\n\t *\n\t * Accepts an associative array as input, containing display preferences\n\t *\n\t * @access\tpublic\n\t * @param\tarray\tconfig preferences\n\t * @return\tvoid\n\t */\t\n\tpublic function initialize($config = array())\n\t{\n\t\tforeach ($config as $key => $val)\n\t\t{\n\t\t\tif (isset($this->$key))\n\t\t\t{\n\t\t\t\t$this->$key = $val;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an image asset path\n\t *\n\t<code>\n\techo $this->asset->img_path('banner.jpg');\n\t// /assets/images/banner.jpg\n\n\techo $this->asset->img_path('banner.jpg', 'my_module');\n\t// /fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->img_path('banner.jpg', NULL, TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg (if the \"assets_module\" Asset class property is empty)\n\t// http://www.mysite.com/fuel/modules/my_module/assets/images/banner.jpg (if the \"assets_module\" Asset class property is my_module)\n\n\techo $this->asset->img_path('banner.jpg', '', TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg (and empty string for the module parameter will properly ignore anything in the assets_module Asset class property)\n\n\t</code>\n\t<p class=\"important\">File extension <strong>must</strong> be included.</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\timage file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function img_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'images', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a css asset path\n\t *\n\t<code>\n\techo $this->asset->css_path('main');\n\t// /assets/css/main.css\n\n\techo $this->asset->css_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/css/main.css (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->css_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/css/main.css\n\t</pre>\n\n\t</code>\n\t<p class=\"important\">The <kbd>.css</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tcss file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function css_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file)) \n\t\t{\n\t\t\tif (!preg_match('#(\\.css|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.css';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'css', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a js asset path\n\t<code>\n\techo $this->asset->js_path('main');\n\t// /assets/js/main.js\n\n\techo $this->asset->js_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/js/main.js (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->js_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/js/main.js\n\t</code>\n\n\t<p class=\"important\">The <kbd>.js</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tjavascript file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function js_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file)) \n\t\t{\n\t\t\tif (!preg_match('#(\\.js|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.js';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'js', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a swf asset path\n\t *\n\t<code>\n\techo $this->asset->swf_path('main');\n\t// /assets/swf/home.swf\n\n\techo $this->asset->swf_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/swf/home.swf (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->swf_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/swf/home.swf\n\t</code>\n\n\t<p class=\"important\">The <kbd>.swf</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tswf file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function swf_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file))\n\t\t{\n\t\t\tif (!preg_match('#(\\.swf|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.swf';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'swf', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a pdf asset path\n\t *\n\t<code>\n\techo $this->asset->pdf_path('newsletter');\n\t// /assets/swf/newsletter.pdf\n\n\techo $this->asset->pdf_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/pdf/newsletter.pdf (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->pdf_path('main', NULL, TRUE);\t\n\t// http://www.mysite.com/assets/pdf/newsletter.pdf\n\t</code>\n\n\t<p class=\"important\">The <kbd>.pdf</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tpdf file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function pdf_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file))\n\t\t{\n\t\t\tif (!preg_match('#(\\.pdf|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.pdf';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'pdf', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a media asset path (e.g. quicktime .mov)\n\t<code>\n\techo $this->asset->media_path('mymovie.mov');\n\t// /assets/media/mymovie.mov\n\n\techo $this->asset->media_path('mymovie.mov', 'my_module');\n\t// /fuel/modules/my_module/assets/media/nmymovie.mov (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->media_path('mymovie.mov', NULL, TRUE);\n\t// http://www.mysite.com/assets/media/mymovie.mov\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included.</p>\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tpdf file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function media_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'media', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a document asset path (e.g. doc, docx)\n\t *\n\t<code>\n\techo $this->asset->docs_path('mydoc.doc');\n\t// /assets/docs/mydoc.doc\n\n\techo $this->asset->docs_path('mydoc.doc', 'my_module');\n\t// /fuel/modules/my_module/assets/docs/mydoc.doc (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->media_path('mydoc.doc', NULL, TRUE);\n\t// http://www.mysite.com/assets/docs/mydoc.doc\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tdoc file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function docs_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'docs', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a cache asset path\n\t *\n\t<code>\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php');\n\t// /assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\n\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php', 'my_module');\n\t// /fuel/modules/my_module/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php', NULL, TRUE);\n\t// http://www.mysite.com/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. \n\tModules should include a <strong>writable</strong> asset cache folder (e.g. assets/cache) if asset optimizing is used\n\t</p>\n\t * @access\tpublic\n\t * @param\tstring\tcached file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function cache_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, trim($this->assets_cache_folder, '/'), $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a captcha image path\n\t *\n\t<code>\n\techo $this->asset->captcha_path('123456_captcha.jpg');\n\t// /assets/captcha/123456_captcha.jpg\n\n\techo $this->asset->captcha_path('123456_captcha.jpg', 'my_module');\n\t// /fuel/modules/my_module/assets/captcha/123456_captcha.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->captcha_path('123456_captcha.jpg', NULL, TRUE);\n\t// http://www.mysite.com/assets/captcha/123456_captcha.jpg\n\t</code>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tcaptcha file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function captcha_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'captchas', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an asset path and is what the others above use\n\t *\n\t<code>\n\techo $this->asset->assets_path();\n\t// /assets/\n\n\techo $this->asset->assets_path('banner.jpg', 'images');\n\t// /assets/images/banner.jpg\n\n\techo $this->asset->assets_path('banner.jpg', 'images', 'my_module');\n\t// /fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->assets_path('banner.jpg', 'images', NULL, TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. This folder must be <strong>writable</strong>.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n\t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc). Subfolder must be defined as key in `$config['assets_folders']` application/config/assets.php\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function assets_path($file = NULL, $path = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\t$cache = '';\n\t\tif (!isset($absolute)) $absolute = $this->assets_absolute_path;\n\t\t\n\t\t$CI = $this->_get_assets_config();\n\t\tif ($this->asset_append_cache_timestamp AND in_array($path, $this->asset_append_cache_timestamp) AND !empty($file))\n\t\t{\n\t\t\t$q_str = (strpos($file, '?') === FALSE) ? '?' : '&';\n\t\t\t$cache = $q_str.'c='.strtotime($this->assets_last_updated);\n\t\t}\n\t\n\t\t// if it is an absolute path already provided, then we just return it without any caching\n\t\tif (!$this->_is_local_path($file))\n\t\t{\n\t\t\treturn $file.$cache;\n\t\t}\n\t\t\n\t\t$assets_folders = $this->assets_folders;\n\n\t\t$asset_type = (!empty($assets_folders[$path])) ? $assets_folders[$path] : $CI->config->item($path);\n\n\t\t// if absolute path, then we just return that\n\t\tif (!$this->_is_local_path($this->assets_path))\n\t\t{\n\t\t\treturn $this->assets_path.$asset_type.$file.$cache;\n\t\t}\n\n\t\t$assets_path = $this->_get_assets_path($module);\n\t\t\n\t\t$path = WEB_PATH.$assets_path.$asset_type.$file.$cache;\n\n\t\tif ($absolute)\n\t\t{\n\t\t\t$protocol = ($_SERVER[\"SERVER_PORT\"] == 443) ? \"https://\" : \"http://\";\n\t\t\t$path = $protocol.$_SERVER['HTTP_HOST'].$path;\n\t\t}\n\t\treturn $path;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Get the server path\n\t *\n\t<code>\n\techo $this->asset->assets_server_path();\n\t// /Library/WebServer/Documents/assets/\n\n\techo $this->asset->assets_path('banner.jpg', 'images');\n\t// /Library/WebServer/Documents/assets/images/banner.jpg\n\n\techo $this->asset->assets_path('banner.jpg', 'images', 'my_module');\n\t// /Library/WebServer/Documents/fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. This folder must be <strong>writable</strong>.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n\t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n\t * @param\tstring\tmodule folder if any\n\t * @return\tstring\n\t */\t\n\tpublic function assets_server_path($file = NULL, $path = NULL, $module = NULL)\n\t{\n\t\t$CI = $this->_get_assets_config();\n\n\t\t$assets_path = $this->_get_assets_path($module);\n\t\t$assets_folders = $this->assets_folders;\n\t\t\n\t\t$asset_type = (!empty($assets_folders[$path])) ? $assets_folders[$path] : $CI->config->item($path);\n\t\t$path = WEB_ROOT.$assets_path.$asset_type.$file;\n\t\t//$path = str_replace('/', DIRECTORY_SEPARATOR, $path); // for windows\n\t\treturn $path;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Convert a server path to a web path\n\t *\n\t<code>\n\t$file_server_path = '/Library/WebServer/Documents/assets/images/my_img.jpg';\n\techo $this->asset->assets_server_to_web_path($file_server_path);\n\t// /assets/images/my_img.jpg\n\t</code>\n\t * @access\tpublic\n\t * @param\tstring\tserver path to asset file\n\t * @param\tbool\tdetermines whether to truncate to the asset folder or not\n\t * @return\tstring\n\t */\t\n\tpublic function assets_server_to_web_path($file, $truncate_to_asset_folder = FALSE)\n\t{\n\t\t$file = str_replace('\\\\', '/', $file); // for windows\n\t\t$web_path = str_replace(WEB_ROOT, '', '/'.$file);\n\t//\t$assets_path = str_replace('/', DIRECTORY_SEPARATOR, $this->assets_path); // for windows\n\t\t$assets_path = str_replace($this->assets_path, '', $web_path);\n\n\t\t// Causes issues in some environments like GoDaddy... was originally changed for the assets to potentially be in a parent folder \n\t\t// $doc_root = preg_replace(\"!${_SERVER['SCRIPT_NAME']}$!\", '', $_SERVER['SCRIPT_FILENAME']);\n\t\t// $assets_path = str_replace($doc_root, '', $assets_path);\n\n\t\tif ($truncate_to_asset_folder)\n\t\t{\n\t\t\tif (strncmp($assets_path, '/', 1) === 0) $asset_path = substr($assets_path, 1);  // to remove beginning slash\n\t\t\treturn $assets_path;\n\t\t}\n\t\t\t\t\n\t\treturn $this->assets_path(str_replace('//', '/', $assets_path));\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a boolean value of whether a file exists\n\t *\n\t<code>\n\tif ($this->asset->asset_exists('banner.jpg'))\n\t{\n\t\techo 'file exists!';\n\t}\n\t</code>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n \t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n \t * @param\tstring\tmodule folder if any\n\t * @return\tboolean\n\t */\t\n\tpublic function asset_exists($file = NULL, $path = NULL, $module = NULL)\n\t{\n\t\t$asset_file = assets_server_path($file, $path, $module);\n\t\treturn (file_exists($asset_file));\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns the file size of an asset\n\t *\n\t<code>\n\techo $this->asset->asset_filesize('banner.jpg');\n\t// 20500\n\n\techo $this->asset->assets_path('banner.jpg', 'images', '', TRUE);\n\t// 20.5 KB \n\t</code>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n \t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n \t * @param\tstring\tmodule folder if any\n \t * @param\tboolean\tformat\n\t * @return\tstring\n\t */\t\n\tpublic function asset_filesize($file = NULL, $path = NULL, $module = NULL, $format = TRUE)\n\t{\n\t\t$asset_file = assets_server_path($file, $path, $module);\n\t\t$filesize = 0;\n\t\tif (file_exists($asset_file))\n\t\t{\n\t\t\t$filesize = filesize($asset_file);\n\t\t}\n\t\tif ($format)\n\t\t{\n\t\t\tif (!function_exists('byte_format'))\n\t\t\t{\n\t\t\t\t$CI = $this->_get_assets_config();\n\t\t\t\t$CI->load->helper('number');\n\t\t\t}\n\t\t\t$filesize = byte_format($filesize);\n\t\t}\n\t\treturn $filesize;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Creates javascript code that first tries to pull in jquery from the Google CDN, and if it doesn't exist, goes to the local backup version\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tjQuery version number for Google CDN\n\t * @param\tstring\tlocal asset path to default version\n\t * @return\tstring\n\t */\t\n\tpublic function jquery($version = '1.7.1', $default = 'jquery')\n\t{\n\t\t$CI =& get_instance();\n\t\t$cache_id = 'jquery_'.$version;\n\t\t$jquery_url = 'https://ajax.googleapis.com/ajax/libs/jquery/'.$version.'/jquery.min.js';\n\n\t\tif (!$CI->fuel->cache->is_cached($cache_id)) \n\t\t{\n\t\t\t$ch = curl_init();\n\t\t\tcurl_setopt($ch, CURLOPT_URL, $jquery_url);\n\t\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\t\t\t$result = curl_exec($ch);\n\t\t\tcurl_close($ch);\n\t\t\t$scriptHash = hash('sha256', $result, TRUE);\n\t\t\t$base64 = base64_encode($scriptHash);\n\t\t\t$CI->fuel->cache->save($cache_id, $base64);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$base64 = $CI->fuel->cache->get($cache_id);\n\t\t}\n\t\t\n\t\t$js = '<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/'.$version.'/jquery.min.js\" integrity=\"sha256-'.$base64.'\" crossorigin=\"anonymous\"></script>';\n\t\t$js .= '<script>window.jQuery || document.write(\\'<script src=\"'.js_path($default).'\"><\\/script>\\');</script>';\n\t\treturn $js;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Inserts <script ...></script> tags based on configuration settings for js file path\n\t *\n\t<p>The third parameter is an <kbd>array</kbd> of additional attributes to pass. Those attributes can be the following</p>\n\t<ul>\n\t\t<li><strong>attrs</strong> - additional attributes to pass to the <kbd>&lt;script&gt;</kbd> tag. Can be a string or an array</li>\n\t\t<li><strong>output</strong> - the output method to be applied to the contents of the file. Can be any of the <kbd>assets_output</kbd></li>\n\t\t<li><strong>ie_conditional</strong> - applies an IE specific conditional comment around the <kbd>&lt;script&gt;</kbd> tag</li>\n\t</ul>\n\n\t<p>Additionally, if the asset configuration of <strong>asset_append_cache_timestamp</strong> includes <strong>js</strong>,\n\tthen the caching timestamp will be appended as a query string parameter at the end just like if you were to use\n\t<kbd>$this->asset->js_path().</kbd>\n\tExamples:\n\t</p>\n\n\t<code>\n\techo $this->asset->js('main');\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('jquery, main');\n\t// &lt;script src=\"/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js(array('jquery', 'main'));\n\t// &lt;script src=\"/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('main', 'my_module');\n\t// &lt;script src=\"/fuel/modules/my_module/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('main', NULL, array('output' => TRUE, 'attrs' => 'onload=myOnloadFunc()', 'ie_conditional' => 'lte IE 6'));\n\t// &lt;!--[if lte IE 6]&gt;\n\t// &lt;script src=\"/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\" type=\"text/javascript\" charset=\"utf-8\" onload=\"myOnloadFunc\"&gt;&lt;/script&gt;\n\t// &lt;![endif]--&gt;\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - All path references in the javascript file (e.g. paths to image files), should be changed to absolute if the script is printed <strong>inline</strong>.</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\tmodule module folder if any\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output... Can be any of the <strong>assets_output</strong>)\n\t * @return\tstring\n\t */\t\n\tpublic function js($path, $module = '', $options = array())\n\t{\n\t\t// if the path is an associative array, than we assume the key is the module\n\t\tif (is_array($path))\n\t\t{\n\t\t\tif (!is_numeric(key($path)))\n\t\t\t{\n\t\t\t\t$module = key($path);\n\t\t\t\t$path = current($path);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!empty($options['attrs']))\n\t\t{\n\t\t\t$options['attrs'] = $this->_array_to_attr($options['attrs']);\n\t\t\tif (strpos($options['attrs'], 'type=\"text/javascript\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= 'type=\"text/javascript\"';\n\t\t\t}\n\n\t\t\tif (strpos($options['attrs'], 'charset=\"utf-8\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= ' charset=\"utf-8\"';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$options['attrs'] = 'type=\"text/javascript\" charset=\"utf-8\"';\n\t\t}\n\t\t\n\t\t\n\t\tif (!isset($options['output']))\n\t\t{\n\t\t\t$options['output'] = $this->assets_output;\n\t\t}\n\t\t\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$open = \"<script>\\n\";\n\t\t\t$close = \"\\t</script>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$open = '<script src=\"';\n\t\t\t$close = '></script>';\n\t\t}\n\n\t\t$str = $this->_output('js', $module, $open, $close, $path, $options);\n\t\tif (!empty($options['echo'])) echo $str;\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Inserts <link ... /> tags based on configuration settings for css file path\n\t *\n\t<p>The third parameter is an <kbd>array</kbd> of additional attributes to pass. Those attributes can be the following</p>\n\t<ul>\n\t\t<li><strong>attrs</strong> - additional attributes to pass to the <kbd>&lt;script&gt;</kbd> tag. Can be a string or an array</li>\n\t\t<li><strong>output</strong> - the output method to be applied to the contents of the file. Can be any of the <kbd>assets_output</kbd></li>\n\t\t<li><strong>ie_conditional</strong> - applies an IE specific conditional comment around the <kbd>&lt;script&gt;</kbd> tag</li>\n\t</ul>\n\t\n\t<p>Additionally, if the asset configuration of <strong>asset_append_cache_timestamp</strong> includes <strong>js</strong>,\n\tthen the caching timestamp will be appended as a query string parameter at the end just like if you were to use\n\t<kbd>$this->asset->js_path().</kbd>\n\tExamples:\n\t</p>\n\n\t<code>\n\techo $this->asset->css('main');\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main, home');\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\t// &lt;link href=\"/assets/css/home.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css(array('main', 'home'));\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\t// &lt;link href=\"/assets/css/home.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main', 'my_module');\n\t// &lt;link href=\"fuel/modules/my_module/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main', NULL, array('output' => TRUE, 'attrs' => 'media=\"print\"', 'ie_conditional' => 'lte IE 6'));\n\t// &lt;!--[if lte IE 6]&gt;\n\t// &lt;link href=\"/assets/css/main.css\" media=\"print\" rel=\"stylesheet\"/&gt;\n\t// &lt;![endif]--&gt;\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - All path references in the css file (e.g. paths to background image files), should be changed to absolute if the script is printed <strong>inline</strong></p>\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\tmodule module folder if any\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output)\n\t * @return\tstring\n\t */\t\n\tpublic function css($path, $module = '', $options = array())\n\t{\n\t\t// if the path is an associative array, than we assume the key is the module\n\t\tif (is_array($path))\n\t\t{\n\t\t\tif (!is_numeric(key($path)))\n\t\t\t{\n\t\t\t\t$module = key($path);\n\t\t\t\t$path = current($path);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!empty($options['attrs']))\n\t\t{\n\t\t\t$options['attrs'] = $this->_array_to_attr($options['attrs']);\n\t\t\tif (strpos($options['attrs'], 'rel=\"stylesheet\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= 'rel=\"stylesheet\"';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$options['attrs'] = 'media=\"all\" rel=\"stylesheet\"';\n\t\t}\n\t\t\n\t\tif (!isset($options['output']))\n\t\t{\n\t\t\t$options['output'] = $this->assets_output;\n\t\t}\n\t\t\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$open = \"<style type=\\\"text/css\\\" media=\\\"screen\\\">\\n\";\n\t\t\t$close = \"\\n\\t</style>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$open = '<link href=\"';\n\t\t\t$close = '/>';\n\t\t}\n\n\t\t$str = $this->_output('css', $module, $open, $close, $path, $options);\n\n\t\t// fix background images urls\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$str = str_replace('url(../images/', 'url('.$this->img_path('', $module).'../images/', $str);\n\t\t\t$str = str_replace('@import url(', '@import url('.$this->css_path('', $module), $str);\n\t\t}\n\t\tif (!empty($options['echo'])) echo $str;\n\t\treturn $str;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Convenience method that returns the HTML for the css() and js() methods\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tthe type of file to output. Options are js or css\n\t * @param\tstring\tmodule folder if any\n\t * @param\tstring\tthe opening html\n\t * @param\tstring\tthe closing html\n\t * @param\tstring\tthe path to the asset\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output)\n\t * @return\tstring\n\t */\t\n\tprotected function _output($type, $module, $open, $close, $path, $options)\n\t{\n\t\t$attrs = ''; \n\t\t$ie_conditional = ''; \n\t\t$output = FALSE; \n\t\t$echo = FALSE; \n\t\t\n\t\textract($options);\n\t\t\n\t\tif (empty($path)) return;\n\t\t$CI = $this->_get_assets_config();\n\t\t\n\t\tif (!isset($ignore_if_loaded))\n\t\t{\n\t\t\t$ignore_if_loaded = $this->ignore_if_loaded;\n\t\t}\n\n\t\t//normalize\n\t\tif (is_string($output))\n\t\t{\n\t\t\t$output = strtolower($output);\n\t\t}\n\t\t\n\t\t$use_cache = ($output !== FALSE AND $output !== 'inline');\n\t\t$str = '';\n\t\t$nested = '';\n\n\t\t// open\n\t\tif (!empty($ie_conditional)) $open = \"\\n\\t<!--[if \".$ie_conditional.\"]>\\n\\t\".$open;\n\t\n\t\t// close\n\t\tif ($output !== 'inline')\n\t\t{\n\t\t\tif (!empty($attrs))\n\t\t\t{\n\t\t\t\t$attrs = $this->_array_to_attr($attrs);\n\t\t\t\t$close = '\" '.$attrs.$close;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$close = '\"'.$close;\n\t\t\t}\n\t\t}\n\t\tif (!empty($ie_conditional)) $close .= \"\\n\\t<![endif]-->\\n\";\n\t\n\t\t// normalize $path\n\t\tif (is_string($path) AND strpos($path, ',') !== FALSE)\n\t\t{\n\t\t\t$path = preg_replace(\"/\\s/\", \"\", $path);\n\t\t\t$path = explode(',', $path);\n\t\t}\n\t\t\n\t\tif ($use_cache AND $output !== 'inline')\n\t\t{\n\t\t\t// reset cacheable files array\n\t\t\t$this->_cacheable_files = array();\n\t\t\t\n\t\t\t$cache_file = $this->_check_cache($path, $type, $output, $module);\n\t\t\t$str .= $open;\n\t\t\t$str .= $cache_file;\n\t\t\t$str .= $close;\n\t\t\t$str .= \"\\n\\t\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// convert to an array if not already \n\t\t\t$path = (array) $path;\n\t\t\t$files_arr = array();\n\t\t\t$default_module = $module;\n\n\t\t\tforeach($path as $key => $val)\n\t\t\t{\n\t\t\t\tif ($ignore_if_loaded AND $this->is_used($type, $val))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$module = (is_string($key)) ? $key : $default_module;\n\t\t\t\t\n\t\t\t\tif ($module == 'app' OR $module =='application')\n\t\t\t\t{\n\t\t\t\t\t$module = NULL;\n\t\t\t\t}\n\n\t\t\t\tif (is_array($val))\n\t\t\t\t{\n\t\t\t\t\t$nested .= $this->$type($val, $module, $options);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$file_str = $open;\n\t\t\t\t\t$type_path = $type.'_path';\n\t\t\t\t\t$assets_folders = $this->assets_folders;\n\t\t\t\t\tif (!$this->_is_local_path($val) AND $output !== 'inline')\n\t\t\t\t\t{\n\t\t\t\t\t\t$file_str .= $val;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($output === 'inline')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$contents_path = $this->assets_server_path($val, $type, $module).'.'.$type;\n\t\t\t\t\t\t\tif (file_exists($contents_path))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$file_str .= file_get_contents($contents_path);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$file_str .= $this->$type_path($val, $module);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$file_str .= $close;\n\t\t\t\t\t$files_arr[] = $file_str;\n\t\t\t\t\t//$file_str .= \"\\n\\t\";\n\t\t\t\t\t$this->_add_used($type, $val);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// use implode so it doesn't add the trailing \\n\\t'\n\t\t\t$str = $str.implode(\"\\n\\t\", $files_arr);\n\n\t\t\t\n\t\t}\n\t\t\n\t\t$str .= \"\\n\\t\".$nested;\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Embeds a flash file using swfobject\n\t *\n\t<p>The fourth parameter is a catch all for additional parameter that can be passed which include:</p>\n\t<ul>\n\t\t<li><strong>vars</strong> - FlashVar variables to pass to the swf file</li>\n\t\t<li><strong>version</strong> - the Flash Player version to detect for. Default is Flash Player 9</li>\n\t\t<li><strong>color</strong> - the background color to be used. May be seen briefly before the swf file runs.</li>\n\t\t<li><strong>params</strong> - additional parameters to be passed to the swf file. For information on the additional parameters, visit the <a href=\"http://http://code.google.com/p/swfobject/wiki/documentation\">swfobject documentation</a></li>\n\t</ul>\n\t<code>\n\techo $this->asset->swf('home', 'home_flash', 800, 300, array('color' => '#000000', 'version' => 9));\n\n\t// &lt;script src=\"/assets/js/swfobject.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script type=\"text/javascript\"&gt;\n\t// //&lt;![CDATA[\n\t//     var so = new SWFObject(\"/assets/swf/home.swf\", \"flash_swf\", \"800\", \"300\", \"9\", \"#000000\");\n\t//     so.write(\"flash\");\n\t// // ]]&gt;\n\t// &lt;/script&gt;\n\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - Requires the <kbd>swfobject.js</kbd> to be located in the javascript assets folder. The swfoject being used is an older version (1.5)</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\thtml id that the flash will replace with swfobject\n\t * @param\tint\t\twidth of the flash file\n\t * @param\tint\t\theight of the flash file\n\t * @param\tarray\tadditional parameter to include (vars, version, and color, params)\n\t * @return\tstring\n\t */\t\n\tpublic function swf($flash, $id, $width, $height, $options = array())\n\t{\n\t\t$vars = NULL; \n\t\t$version = 9; \n\t\t$color = '#ffffff'; \n\t\t$params = array(); \n\n\t\tif (is_array($options))\n\t\t{\n\t\t\tif (isset($options['vars'])) $vars = $options['vars'];\n\t\t\tif (isset($options['version'])) $version = $options['version'];\n\t\t\tif (isset($options['color'])) $color = $options['color'];\n\t\t\tif (isset($options['params'])) $params = $options['params'];\n\t\t}\n\t\t\n\t\tif (empty($flash)) return;\n\t\t$CI = $this->_get_assets_config();\n\t\tif (!empty($CI))\n\t\t{\n\t\t\t$swf_path = $CI->config->item('swf_path');\n\t\t}\n\t\n\t\t$str = '';\n\t\tif (empty($id))\n\t\t{\n\t\t\t$id_arr = explode('.', $flash);\n\t\t\t$id = $id_arr[0];\n\t\t\t$str .= '\n\t\t\t<div id=\"'.$id.'\">\n\t\t\t</div>';\n\t\t}\n\t\tif (!$this->is_used('js', 'swfobject') AND !$this->is_used('js', 'swfobject.js'))\n\t\t{\n\t\t\t$str .= $this->js('swfobject');\n\t\t}\n\t\t$str .= '\n\t\t<script>\n\t\t   var so = new SWFObject(\"'.$this->swf_path($flash).'\", \"'.$id.'_swf\", \"'.$width.'\", \"'.$height.'\", \"'.$version.'\", \"'.$color.'\");\n\t\t ';\n\t\tif(!is_array($vars))\n\t\t{\n\t\t\tparse_str($vars, $vars);\n\t\t}\n\t \tforeach($vars as $key => $val)\n\t{\n\t\t\t$str .= '\t\tso.addVariable(\"'.$key.'\", \"'.$val.'\"); \n\t';\n\t\t}\n\t\n\t\t foreach($params as $key => $val)\n\t\t{\n\t\t\t$str .= '\t\tso.addParam(\"'.$key.'\", \"'.$val.'\"); \n\t';\n\t\t}\n\n\t\t$str .= '\t\tso.write(\"'.$id.'\");\n\t\t</script>\n\t';\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Check to see whether a css/js file has been used yet\n\t *\n\t * @access\tpublic\n\t * @param\tstring\ttype of file (e.g. images, js, css... etc)\n\t * @param\tstring\tfile name\n\t * @return\tboolean\n\t */\t\n\tpublic function is_used($type, $file)\n\t{\n\t\treturn (isset($this->_used[$type]) AND in_array($file, $this->_used[$type]));\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Set and get cache version\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\ttype of file (e.g.  js or css)\n\t * @param\tstring\toptimization methods which include FALSE, TRUE, 'inline', 'gzip', 'whitespace' and 'combine'\n\t * @param\tstring\ttype module folder if any\n\t * @return\tstring\n\t */\t\n\tprotected function _check_cache($files, $type, $optimize, $module)\n\t{\n\t\t$CI =& get_instance();\n\t\t$files = (array) $files;\n\t\t$cache_file_name = '';\n\t\t$cache_dir = $this->assets_server_path($this->assets_cache_folder, '', $module);\n\t\t$return = array();\n\t\n\t\t$default_module = $module;\n\t\n\t\t// first create file name\n\t\tforeach($files as $file)\n\t\t{\n\t\t\tif (is_array($file))\n\t\t\t{\n\t\t\t\tforeach($file as $key => $f)\n\t\t\t\t{\n\t\t\t\t\t$mod = (is_string($key)) ? $key : $default_module;\n\t\t\t\t\t$this->_cacheable_files[] = array($mod => $f);\n\t\t\t\t\t$cache_file_name .= $mod.'/'.$f.'|';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->_is_local_path($file))\n\t\t\t\t{\n\t\t\t\t\tif (substr($file, -(strlen($type)), (strlen($type) + 1)) == '.'.$type)\n\t\t\t\t\t{\n\t\t\t\t\t\t//$file = $file.'.'.$type;\n\t\t\t\t\t\t$file = substr($file, -(strlen($type)), (strlen($type) + 1));\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->_cacheable_files[] = array($module => trim($file));\n\n\t\t\t\t\t// replace backslashes with hyphens\n\t\t\t\t\t$file = str_replace('/', '_', $file);\n\t\t\t\t\t$cache_file_name .= $module.'/'.$file.'|';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t$cache_file_name = $cache_file_name.'.'.$type;\n\n\t\t$cache_file_name_md5 = md5($cache_file_name);\n\t\t$ext = ($optimize === TRUE OR $optimize == 'gzip') ? 'php' : $type;\n\t\t$cache_file_name = $cache_file_name_md5.'_'.strtotime($this->assets_last_updated).'.'.$ext;\n\t\t$cache_file = rtrim($cache_dir, '/').'/'.$cache_file_name;\n\n\n\t\t// create cache file if it doesn't exist'\n\t\tif (!file_exists($cache_file) OR $this->force_assets_recompile)\n\t\t{\n\t\t\n\t\t\t$CI->load->helper('file');\n\t\t\t$assets_folders = $this->assets_folders;\n\t\t\t//$asset_folder = WEB_ROOT.'/'.$this->assets_path.$assets_folders[$type];\n\t\t\t\n\t\t\t$output = '';\n\n\t\t\t// set optimization parameters\n\t\t\t$optimize_params['type'] = $type;\n\t\t\t$optimize_params['js_minify'] = TRUE;\n\n\t\t\tif ($optimize === TRUE OR $optimize == 'whitespace')\n\t\t\t{\n\t\t\t\t$optimize_params['whitespace'] = TRUE;\n\t\t\t}\n\n\t\t\tif ($optimize === TRUE OR $optimize == 'gzip')\n\t\t\t{\n\t\t\t\t$optimize_params['gzip'] = TRUE;\n\t\t\t}\n\n\t\t\t$output = $this->optimize($this->_cacheable_files, $optimize_params);\n\n\t\t\t// try to create directories if not there\n\t\t\tif (!is_dir($cache_dir) AND is_writable($cache_dir))\n\t\t\t{\n\t\t\t\t@mkdir($cache_dir, 0777, TRUE);\n\t\t\t}\n\t\t\n\t\t\n\t\t\t// cleanup files with the same prefix without the last updated time\n\t\t\t$dir_files = (array) get_filenames($cache_dir);\n\t\t\tforeach($dir_files as $dir_file)\n\t\t\t{\n\t\t\t\tif (strncmp($dir_file, $cache_file_name_md5, 10) === 0)\n\t\t\t\t{\n\t\t\t\t\t unlink(rtrim($cache_dir, '/').'/'.$dir_file);\n\t\t\t\t}\n\t\t\t}\n\t\t\twrite_file($cache_file, $output); // write cache file\n\t\t}\n\n\t\treturn $this->cache_path($cache_file_name, $module);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Optimizes CSS and JS files by combining files together with options to remove whitespace and optimize code.\n\t *\n\t<ul>\n\t\t<li><strong>type</strong> - valid options are \"js\", \"css\" and auto. The default is \"auto\" and will look for the first file extension in the list of files passed</li>\n\t\t<li><strong>destination</strong> - the path and file name of the file to save the output to. Default is FALSE which means no file will be written</li>\n\t\t<li><strong>whitespace</strong> - whether to perform basic removal of whitespace.</li>\n\t\t<li><strong>js_minify</strong> - will use <a href=\"https://developers.google.com/closure/compiler/\" target=\"_blank\">Google's Closure Compiler</a> for javascript minification.</li>\n\t\t<li><strong>compilation_level</strong> - WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS and ADVANCED_OPTIMIZATION. More can be found here <a href=\"https://developers.google.com/closure/compiler/docs/api-ref\" target=\"_blank\">here</a>. The default is WHITESPACE_ONLY.</li>\n\t\t<li><strong>gzip</strong> - determines whether to add PHP code to gzip the file. Must be saved as a php file.</li>\n\t</ul>\n\t<code>\n\t$output = $this->asset->optimize(array('file1, 'file2.js', array('type' => 'js', 'destination' => 'my.min.js', 'whitespace' => TRUE, 'js_minify' => TRUE, 'gzip' => TRUE));\n\t</code>\n\n\t *\n\t * @access\tprotected\n\t * @param\tmixed\tfile(s) to optimize. Can be an array or string\n\t * @param\tarray  an array of parameters including \"destination\", \"whitespace\", \"js_minify\", \"compilation_level\" and \"type\"\n\t * @return\tstring\n\t */\t\n\tpublic function optimize($files, $params = array())\n\t{\n\t\t$CI =& get_instance();\n\t\t$CI->load->helper('file');\n\n\t\t// removes basic whitespace\n\t\tif (!isset($params['destination']))\n\t\t{\n\t\t\t$params['destination'] = FALSE;\n\t\t}\n\n\t\t// removes basic whitespace\n\t\tif (!isset($params['whitespace']))\n\t\t{\n\t\t\t$params['whitespace'] = TRUE;\n\t\t}\n\n\t\t// will CURL http://closure-compiler.appspot.com/compile\n\t\tif (empty($params['js_minify']))\n\t\t{\n\t\t\t$params['js_minify'] = TRUE;\n\t\t}\n\n\t\t// sets the curl level of http://closure-compiler.appspot.com/compile\n\t\tif (empty($params['compilation_level']))\n\t\t{\n\t\t\t$params['compilation_level'] = 'WHITESPACE_ONLY';\n\t\t}\n\n\t\t// type of optimization (\"css\" or \"js\")\n\t\tif (empty($params['type']))\n\t\t{\n\t\t\t$params['type'] = 'auto';\n\t\t}\n\n\t\t// add gzip compression and make it a .php file\n\t\tif (!isset($params['gzip']))\n\t\t{\n\t\t\t$params['gzip'] = FALSE;\n\t\t}\n\n\t\t$assets_folders = $this->assets_folders;\n\t\t\n\t\t$output = '';\n\n\t\t// normalize $files array\n\t\tif (!is_array($files))\n\t\t{\n\t\t\t$files = array($files);\n\t\t}\n\n\t\t// automatically come up with the type of file based on first file that you can detect extension\n\t\t$valid_exts = array('css', 'js');\n\t\tif (strtolower($params['type']) == 'auto')\n\t\t{\n\t\t\t// set type to javascript by default\n\t\t\t$params['type'] = 'js';\n\t\t\tforeach($files as $file)\n\t\t\t{\n\t\t\t\t$file_parts = explode('.', $files[0]); \n\t\t\t\t$ext = end($file_parts);\n\t\t\t\tif (in_array($ext, $valid_exts))\n\t\t\t\t{\n\t\t\t\t\t$params['type'] = $ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (!in_array($params['type'], $valid_exts))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$mime = NULL;\n\n\t\t// loop through files to combine them\n\t\tforeach($files as $key => $file)\n\t\t{\t\n\t\t\tif (!empty($params['module']))\n\t\t\t{\n\t\t\t\t$module = $params['module'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$module = $this->assets_module;\t\n\t\t\t}\n\t\t\t\n\t\t\tif (is_array($file))\n\t\t\t{\n\t\t\t\tif (!is_numeric(key($file)))\n\t\t\t\t{\n\t\t\t\t\t$module = key($file);\n\t\t\t\t\t$file = current($file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check for extension... if not there, add it\n\t\t\tif (!preg_match('#(\\.'.$params['type'].'|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.'.$params['type'];\n\t\t\t}\n\t\t\t// replace backslashes with hyphens\n\t\t\t$asset_folder = $this->assets_server_path('', $params['type'], $module);\n\t\t\t$file_path = $asset_folder.$file;\n\n\t\t\tif (file_exists($file_path))\n\t\t\t{\n\t\t\t\t$output .= file_get_contents($file_path).PHP_EOL;\n\t\t\t}\n\t\t}\n\n\t\t// optimize file by removing returns and tabs\n\t\tif ($params['type'] == 'js')\n\t\t{\n\t\t\tif ($params['whitespace'] == TRUE)\n\t\t\t{\n\t\t\t\t$output = str_replace(array(\"\\t\"), '', $output);\n\n\t\t\t\t// remove whitespace from the beginning of the line\n\t\t\t\t$output = preg_replace(\"/^\\s+/m\", '', $output);\n\n\t\t\t\t// no replacing multi-line comments because it normally has copyright stuff\n\t\t\t} \n\n\t\t\tif ($params['js_minify'] == TRUE AND extension_loaded('curl'))\n\t\t\t{\n\n\t\t\t\t// REST API arguments\n\t\t\t\t$api_args = array(\n\t\t\t\t\t'compilation_level' => $params['compilation_level'],\n\t\t\t\t\t'output_format' => 'text',\n\t\t\t\t\t'output_info' => 'compiled_code'\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t$args = 'js_code=' . urlencode($output);\n\t\t\t\tforeach ($api_args as $key => $value)\n\t\t\t\t{\n\t\t\t\t\t$args .= '&' . $key . '=' . urlencode($value);\n\t\t\t\t}\n\t\t\t\t// API call using cURL\n\t\t\t\t$ch = curl_init();\n\t\t\t\tcurl_setopt_array($ch, array(\n\t\t\t\t\tCURLOPT_URL => 'http://closure-compiler.appspot.com/compile',\n\t\t\t\t\tCURLOPT_POST => 1,\n\t\t\t\t\tCURLOPT_POSTFIELDS => $args,\n\t\t\t\t\tCURLOPT_RETURNTRANSFER => 1,\n\t\t\t\t\tCURLOPT_HEADER => 0,\n\t\t\t\t\tCURLOPT_FOLLOWLOCATION => 0\n\t\t\t\t));\n\n\t\t\t\tif (curl_error($ch) == '' )\n\t\t\t\t{\n\t\t\t\t\t$result = curl_exec($ch);\n\t\t\t\t\tif (!empty($result))\n\t\t\t\t\t{\n\t\t\t\t\t\t$output = $result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texit(lang('error_curl_page'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$mime = 'text/javascript';\n\t\t}\n\t\telse if ($params['type'] == 'css')\n\t\t{\n\t\t\t// now include all import files as well ... only 1 deep though\n\t\t\tpreg_match_all('/@import url\\(([\\'|\"])*(.+)\\\\1\\);/U', $output, $imports);\n\t\t\tif (!empty($imports[2][0]))\n\t\t\t{\n\t\t\t\tforeach($imports[2] as $import)\n\t\t\t\t{\n\t\t\t\t\t$import_file_path = $this->assets_server_path($import, $params['type'], $module);\n\t\t\t\t\tif (file_exists($import_file_path))\n\t\t\t\t\t{\n\t\t\t\t\t\t$import_files[$import] = file_get_contents($import_file_path);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$callback = function($matches) {\n\t\t\t\t\tif (isset($matches[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn $GLOBALS[\"__TMP_CSS_IMPORT__\"][$matches[2]];\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// remove calls to the import since they are combined into the same css\n\t\t\t\tif (!empty($import_files))\n\t\t\t\t{\n\t\t\t\t\t// temporarily put it in the global space so the anonymous function can grab it\n\t\t\t\t\t$GLOBALS[\"__TMP_CSS_IMPORT__\"] = $import_files;\n\t\t\t\t\t$output = preg_replace_callback('/@import url\\(([\\'|\"])*(.+)\\\\1\\);/U', $callback, $output);\n\t\t\t\t\tunset($GLOBALS[\"__TMP_CSS_IMPORT__\"]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t// strip unnecessary whitespace\n\t\t\tif ($params['whitespace'] == TRUE)\n\t\t\t{\n\t\t\t\t$output = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $output);\n\t\t\t\t$output = preg_replace('<\\s*([@{}:;,]|\\)\\s|\\s\\()\\s*>S', '\\1', $output);// Remove whitespace around separators,\n\t\t\t\t// remove multi-line comments...\n\t\t\t\t//$output = preg_replace(\"/((?:\\/\\*(?:[^*]|(?:\\*+[^*\\/]))*\\*+\\/?)|(?:\\/\\/.*))/\", \"\", $output);// buggy with absolute image paths\n\t\t\t\t$output = preg_replace(\"#/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/#\", \"\", $output);\n\t\t\t}\n\t\t\t$mime = 'text/css';\n\t\t\n\t\t}\n\t\t\n\t\t// gzip if enabled in config and the server\n\t\tif ((($params['gzip'] == TRUE) AND extension_loaded('zlib')) AND (isset($_SERVER['HTTP_ACCEPT_ENCODING']) AND strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE))\n\t\t{\n\t\t\t$gzip = \"<?php\".PHP_EOL;\n\t\t\t$gzip .= \"ob_start();\".PHP_EOL;\n\t\t\n\t\t\t// start an inner buffer so we can get the content length\n\t\t\t$gzip .= \"ob_start (\\\"ob_gzhandler\\\");\".PHP_EOL;\n\t\t\t$gzip .= \"\\n?>\";\n\t\t\t$gzip .= $output;\n\t\t\t$gzip .= \"<?php\".PHP_EOL;\n\t\t\t$gzip .= \"ob_end_flush();\".PHP_EOL;\n\t\t\n\t\t\t// now begin inner buffer headers\n\t\t\tif (!empty($mime))\n\t\t\t{\n\t\t\t\t$gzip .= \"header(\\\"Content-type: \".$mime.\"; charset: UTF-8\\\");\".PHP_EOL;\t\n\t\t\t}\n\t\t\t$gzip .= \"header(\\\"Cache-Control: must-revalidate\\\");\".PHP_EOL;\n\t\t\t$gzip .= \"\\$offset = \".$this->assets_gzip_cache_expiration.\";\".PHP_EOL;\n\t\t\t$gzip .= \"\\$exp = \\\"Expires: \\\".gmdate(\\\"D, d M Y H:i:s\\\",time() + \\$offset).\\\" GMT\\\";\".PHP_EOL;\n\t\t\t$gzip .= \"header(\\$exp);\".PHP_EOL;\n\t\t\t$gzip .= \"\\$size = \\\"Content-Length: \\\".ob_get_length();\".PHP_EOL;\n\t\t\t$gzip .= \"header(\\$size);\".PHP_EOL;\n\t\t\t$gzip .= 'ob_end_flush();';\n\t\t\t$gzip .= \"\\n?>\".PHP_EOL;\n\t\t\t$output = $gzip;\n\t\t}\n\t\t\n\t\t// write contents to file\n\t\tif (!empty($params['destination']))\n\t\t{\n\t\t\t$destination_dir = dirname($params['destination']);\n\n\t\t\tif (is_writable($destination_dir))\n\t\t\t{\n\t\t\t\twrite_file($params['destination'], $output);\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn $output;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Creates attributes for a tag\n\t *\n\t * @access\tprotected\n\t * @param\tmixed\tarray or string of attribute values\n\t * @return\tstring\n\t */\t\n\tprotected function _array_to_attr($arr)\n\t{\n\t\tif (is_array($arr))\n\t\t{\n\t\t\t$str = '';\n\t\t\tforeach($arr as $key => $val)\n\t\t\t{\n\t\t\t\t$str .= $key.'=\"'.$val.'\" ';\n\t\t\t}\n\t\t\treturn $str;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $arr;\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Helper function to determine if it is a local path\n\t *\n\t * @access\tprotected\n\t * @param\tfile\tpath to the file\n\t * @return\tboolean\n\t */\t\n\tprotected function _is_local_path($path)\n\t{\n\t\tif (strncmp($path, 'http', 4) === 0)\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t\treturn TRUE;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Add to the used array\n\t *\n\t * @access\tprotected\n\t * @param\tstring\ttype of file (e.g. images, js, css... etc)\n\t * @param\tstring\tfile name\n\t * @return\tvoid\n\t */\t\n\tprotected function _add_used($type, $file)\n\t{\n\t\tif (!isset($this->_used[$type])) $this->_used[$type] = array();\n\t\t$this->_used[$type][] = $file;\n\t\t\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns the path to the asset. \n\t *\n\t * if a module is provided, we look in the modules folder or whatever it states in the {module}_assets_path config value\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tmodule module folder if any\n\t * @return\tstring\n\t */\t\n\tprotected function _get_assets_path($module = NULL)\n\t{\n\t\tif (!isset($module)) $module = $this->assets_module;\n\t\t$assets_path = '';\n\n\t\t// if a module is provided, we look in the modules folder or whatever it states in the {module}_assets_path config value\n\t\tif (!empty($module))\n\t\t{\n\t\t\tif (empty($this->_module_config_loaded[$module]))\n\t\t\t{\n\t\t\t\t$assets_path = $this->assets_module_path;\n\t\t\t\t$module_config = MODULES_PATH.$module.'/config/'.$module.EXT;\n\t\t\t\tif (file_exists($module_config))\n\t\t\t\t{\n\t\t\t\t\tinclude_once($module_config);\n\t\t\t\t\tif (!empty($config[$module.'_assets_path']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$assets_path = $config[$module.'_assets_path'];\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$assets_path = $this->_module_config_loaded[$module];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$assets_path = $this->assets_path;\n\t\t}\n\t\t$assets_path = str_replace('{module}', $module, $assets_path);\n\n\t\t// cache it so we only include it once\n\t\tif (!empty($module))\n\t\t{\n\t\t\t$this->_module_config_loaded[$module] = $assets_path;\n\t\t}\n\t\treturn $assets_path;\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Loads the asset config and returns the CI super global object\n\t *\n\t * @access\tprotected\n\t * @return\tobject\n\t */\t\n\tprotected function _get_assets_config()\n\t{\n\t\tif (function_exists('get_instance'))\n\t\t{\n\t\t\t$CI =& get_instance();\n\t\t\tif (!$this->_asset_config_loaded)\n\t\t\t{\n\t\t\t\t$CI->load->config('asset');\n\t\t\t\t$this->_asset_config_loaded = TRUE;\n\t\t\t}\n\t\t\treturn $CI;\n\t\t}\n\t\treturn NULL;\n\t}\n}\n\n/* End of file Asset.php */\n/* Location: ./modules/fuel/libraries/Asset.php */\n", "<?php\n/*\n *---------------------------------------------------------------\n * FUEL INSTALL DIRECTORY\n *---------------------------------------------------------------\n *\n * This is the directory path to the fuel installation folder\n *\n */\ndefine('INSTALL_ROOT', str_replace('\\\\', '/', realpath(dirname(__FILE__))).'/fuel/');\n\n/*\n *---------------------------------------------------------------\n * FUEL CLI (Command Line Interface)\n *---------------------------------------------------------------\n *\n * You may need to alter these if you are using the CLI.  These $_SERVER variables\n * are used for calculating the $config['base_url'] which is used in the site_url() function.\n * So if your output requires the correct site_url() path, you will need to change these.\n */\n\nif (PHP_SAPI === 'cli' OR defined('STDIN'))\n{\n\t/* if your FUEL installation exists in a subfolder, then you may want to change SCRIPT_NAME to /subfolder/index.php \n\t (Needed for using Tester module if running via CLI) */\n\t$_SERVER['SCRIPT_NAME'] = 'index.php';\n\t$_SERVER['SERVER_NAME'] = 'localhost';\n\t$_SERVER['SERVER_PORT'] = 80;\n\t$_SERVER['REMOTE_ADDR'] = '127.0.0.1';\n\t$_SERVER['HTTP_HOST'] = 'localhost';\n}\n\n/**\n * CodeIgniter\n *\n * An open source application development framework for PHP\n *\n * This content is released under the MIT License (MIT)\n *\n * Copyright (c) 2014 - 2015, British Columbia Institute of Technology\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * @package\tCodeIgniter\n * @author\tEllisLab Dev Team\n * @copyright\tCopyright (c) 2008 - 2014, EllisLab, Inc. (http://ellislab.com/)\n * @copyright\tCopyright (c) 2014 - 2015, British Columbia Institute of Technology (http://bcit.ca/)\n * @license\thttp://opensource.org/licenses/MIT\tMIT License\n * @link\thttp://codeigniter.com\n * @since\tVersion 1.0.0\n * @filesource\n */\n\n/*\n *---------------------------------------------------------------\n * APPLICATION ENVIRONMENT\n *---------------------------------------------------------------\n *\n * You can load different configurations depending on your\n * current environment. Setting the environment also influences\n * things like logging and error reporting.\n *\n * This can be set to anything, but default usage is:\n *\n *     development\n *     testing\n *     production\n *\n * NOTE: If you change these, also change the error_reporting() code below\n */\n// automatically set environment based on the values set in the environments config\n\nif (isset($_SERVER['CI_ENV']))\n{\n\tdefine('ENVIRONMENT', $_SERVER['CI_ENV']);\n}\nelse\n{\n\t@include(INSTALL_ROOT.'application/config/environments.php');\n\n\tif (!empty($environments))\n\t{\n\t\tforeach($environments as $env => $paths)\n\t\t{\n\t\t\t// normalize to an array\n\t\t\tif (is_string($paths))\n\t\t\t{\n\t\t\t\t$paths = array($paths);\n\t\t\t}\n\n\t\t\tforeach($paths as $path)\n\t\t\t{\n\t\t\t\t// Convert wild-cards to RegEx\n\t\t\t\t$path = str_replace(array(':any', '*'), '.*', str_replace(':num', '[0-9]+', $path));\n\n\t\t\t\t// Does the RegEx match?\n\t\t\t\tif (!empty($_SERVER['HTTP_HOST']) AND preg_match('#^'.$path.'$#', $_SERVER['HTTP_HOST']))\n\t\t\t\t{\n\t\t\t\t\tdefine('ENVIRONMENT', $env);\n\t\t\t\t\tbreak 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!defined('ENVIRONMENT'))\n\t{\n\t\tdefine('ENVIRONMENT', 'development');\n\t}\n}\n\t\n\n/*\n *---------------------------------------------------------------\n * ERROR REPORTING\n *---------------------------------------------------------------\n *\n * Different environments will require different levels of error reporting.\n * By default development will show errors but testing and live will hide them.\n */\nif (defined('ENVIRONMENT'))\n{\n\tswitch (ENVIRONMENT)\n\t{\n\t\tcase 'development': case 'testing':\n\t\t\terror_reporting(-1);\n\t\t\tini_set('display_errors', 1);\n\t\tbreak;\n\n\t\tcase 'staging': case 'production':\n\t\t\tini_set('display_errors', 0);\n\t\t\tif (version_compare(PHP_VERSION, '5.3', '>='))\n\t\t\t{\n\t\t\t\terror_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\terror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_USER_NOTICE);\n\t\t\t}\n\t\tbreak;\n\n\t\tdefault:\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'The application environment is not set correctly.';\n\t\t\texit(1); // EXIT_ERROR\n\t}\n}\n/*\n *---------------------------------------------------------------\n * SYSTEM FOLDER NAME\n *---------------------------------------------------------------\n *\n * This variable must contain the name of your \"system\" folder.\n * Include the path if the folder is not in the same directory\n * as this file.\n */\n\t$system_path = INSTALL_ROOT.'codeigniter';\n\n/*\n *---------------------------------------------------------------\n * APPLICATION FOLDER NAME\n *---------------------------------------------------------------\n *\n * If you want this front controller to use a different \"application\"\n * folder than the default one you can set its name here. The folder\n * can also be renamed or relocated anywhere on your server. If\n * you do, use a full server path. For more info please see the user guide:\n * http://codeigniter.com/user_guide/general/managing_apps.html\n *\n * NO TRAILING SLASH!\n */\n\t$application_folder = INSTALL_ROOT.'application';\n\n/*\n *---------------------------------------------------------------\n * VIEW FOLDER NAME\n *---------------------------------------------------------------\n *\n * If you want to move the view folder out of the application\n * folder set the path to the folder here. The folder can be renamed\n * and relocated anywhere on your server. If blank, it will default\n * to the standard location inside your application folder. If you\n * do move this, use the full server path to this folder.\n *\n * NO TRAILING SLASH!\n */\n\t$view_folder = '';\n\n\n/*\n * --------------------------------------------------------------------\n * DEFAULT CONTROLLER\n * --------------------------------------------------------------------\n *\n * Normally you will set your default controller in the routes.php file.\n * You can, however, force a custom routing by hard-coding a\n * specific controller class/function here. For most applications, you\n * WILL NOT set your routing here, but it's an option for those\n * special instances where you might want to override the standard\n * routing in a specific front controller that shares a common CI installation.\n *\n * IMPORTANT: If you set the routing here, NO OTHER controller will be\n * callable. In essence, this preference limits your application to ONE\n * specific controller. Leave the function name blank if you need\n * to call functions dynamically via the URI.\n *\n * Un-comment the $routing array below to use this feature\n */\n\t// The directory name, relative to the \"controllers\" folder.  Leave blank\n\t// if your controller is not in a sub-folder within the \"controllers\" folder\n\t// $routing['directory'] = '';\n\n\t// The controller class file name.  Example:  mycontroller\n\t// $routing['controller'] = '';\n\n\t// The controller function you wish to be called.\n\t// $routing['function']\t= '';\n\n\n/*\n * -------------------------------------------------------------------\n *  CUSTOM CONFIG VALUES\n * -------------------------------------------------------------------\n *\n * The $assign_to_config array below will be passed dynamically to the\n * config class when initialized. This allows you to set custom config\n * items or override any default config values found in the config.php file.\n * This can be handy as it permits you to share one application between\n * multiple front controller files, with each file containing different\n * config values.\n *\n * Un-comment the $assign_to_config array below to use this feature\n */\n\t// $assign_to_config['name_of_config_item'] = 'value of config item';\n\n\n\n// --------------------------------------------------------------------\n// END OF USER CONFIGURABLE SETTINGS.  DO NOT EDIT BELOW THIS LINE\n// --------------------------------------------------------------------\n\n/*\n * ---------------------------------------------------------------\n *  Resolve the system path for increased reliability\n * ---------------------------------------------------------------\n */\n\n\t// Set the current directory correctly for CLI requests\n\tif (defined('STDIN'))\n\t{\n\t\tchdir(dirname(__FILE__));\n\t}\n\n\tif (($_temp = realpath($system_path)) !== FALSE)\n\t{\n\t\t$system_path = $_temp.'/';\n\t}\n\telse\n\t{\n\t\t// Ensure there's a trailing slash\n\t\t$system_path = rtrim($system_path, '/').'/';\n\t}\n\n\t// Is the system path correct?\n\tif ( ! is_dir($system_path))\n\t{\n\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\techo 'Your system folder path does not appear to be set correctly. Please open the following file and correct this: '.pathinfo(__FILE__, PATHINFO_BASENAME);\n\t\texit(3); // EXIT_CONFIG\n\t}\n\n/*\n * -------------------------------------------------------------------\n *  Now that we know the path, set the main path constants\n * -------------------------------------------------------------------\n */\n\t// The name of THIS file\n\tdefine('SELF', pathinfo(__FILE__, PATHINFO_BASENAME));\n\n\t// Path to the system folder\n\tdefine('BASEPATH', str_replace('\\\\', '/', $system_path));\n\n\t// Path to the front controller (this file)\n\tdefine('FCPATH', dirname(__FILE__).'/');\n\n\t// Name of the \"system folder\"\n\tdefine('SYSDIR', trim(strrchr(trim(BASEPATH, '/'), '/'), '/'));\n\n\t// The path to the \"application\" folder\n\tif (is_dir($application_folder))\n\t{\n\t\tif (($_temp = realpath($application_folder)) !== FALSE)\n\t\t{\n\t\t\t$application_folder = $_temp;\n\t\t}\n\n\t\tdefine('APPPATH', $application_folder.DIRECTORY_SEPARATOR);\n\t}\n\telse\n\t{\n\t\tif ( ! is_dir(BASEPATH.$application_folder.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'Your application folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;\n\t\t\texit(3); // EXIT_CONFIG\n\t\t}\n\n\t\tdefine('APPPATH', BASEPATH.$application_folder.DIRECTORY_SEPARATOR);\n\t}\n\n\t// The path to the \"views\" folder\n\tif ( ! is_dir($view_folder))\n\t{\n\t\tif ( ! empty($view_folder) && is_dir(APPPATH.$view_folder.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\t$view_folder = APPPATH.$view_folder;\n\t\t}\n\t\telseif ( ! is_dir(APPPATH.'views'.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'Your view folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;\n\t\t\texit(3); // EXIT_CONFIG\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$view_folder = APPPATH.'views';\n\t\t}\n\t}\n\n\tif (($_temp = realpath($view_folder)) !== FALSE)\n\t{\n\t\t$view_folder = $_temp.DIRECTORY_SEPARATOR;\n\t}\n\telse\n\t{\n\t\t$view_folder = rtrim($view_folder, '/\\\\').DIRECTORY_SEPARATOR;\n\t}\n\n\tdefine('VIEWPATH', $view_folder);\n\n/*\n * --------------------------------------------------------------------\n * LOAD THE BOOTSTRAP FILE\n * --------------------------------------------------------------------\n *\n * And away we go...\n */\nrequire_once BASEPATH.'core/CodeIgniter.php';\n"], "fixing_code": ["<?php \n// INSTALL_ROOT is defined in the index.php bootstrap file\ndefine('FUEL_VERSION', '1.5.0');\nif (!defined('MODULES_FOLDER'))\n{\n\tdefine('MODULES_FOLDER', '../../fuel/modules');\n}\ndefine('FUEL_FOLDER', 'fuel');\ndefine('MODULES_PATH', APPPATH.MODULES_FOLDER.'/');\ndefine('MODULES_FROM_APPCONTROLLERS', '../'.MODULES_FOLDER.'/');\ndefine('FUEL_PATH', MODULES_PATH.FUEL_FOLDER.'/');\ndefine('WEB_ROOT', str_replace('\\\\', '/', realpath(dirname(SELF)).DIRECTORY_SEPARATOR)); // replace \\ with / for windows\n\n// Needed to take care of some server environments\n$_SERVER['SCRIPT_NAME'] = preg_replace('#^/(.+)\\.php/(.*)#', '/$1.php', $_SERVER['SCRIPT_NAME']);\nif (!isset($_SERVER['HTTP_HOST']))\n{\n\t$_SERVER['HTTP_HOST'] = $_SERVER['SERVER_NAME'];\n\tif (!empty($_SERVER['SERVER_PORT']))\n\t{\n\t\t$_SERVER['HTTP_HOST'] .= ':'.$_SERVER['SERVER_PORT'];\n\t}\n}\ndefine('WEB_PATH', str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));\n\n// Change slashes for some Windows platforms\n$_FUEL_SEGS = explode('/', str_replace(\"\\\\\", '/', $_SERVER['SCRIPT_FILENAME']));\n\ndefine('WEB_FOLDER', (count($_FUEL_SEGS) > 1) ? $_FUEL_SEGS[count($_FUEL_SEGS)-2] : '/');\ndefine('MODULES_WEB_PATH', FUEL_FOLDER.'/modules/');\n\n// Must include language helper if you want to use lang function\ninclude(APPPATH.'helpers/MY_language_helper.php');\ninclude(FUEL_PATH.'config/fuel.php');\n\n// Used for CLI... must create $_SERVER['REQUEST_URI]\nif (defined('STDIN'))\n{\n\t$args = array_slice($_SERVER['argv'], 1);\n\t$_SERVER['REQUEST_URI'] = $args ? implode('/', $args) : '';\n}\n\ndefine('FUEL_ROUTE', $config['fuel_path']);\n\n// Detect URI path\nif (isset($_SERVER['REQUEST_URI']))\n{\n\t$_URI_PATH = $_SERVER['REQUEST_URI'];\n}\nelse if (isset($_SERVER['PATH_INFO']))\n{\n\t$_URI_PATH = $_SERVER['PATH_INFO'];\n}\nelse if (isset($_SERVER['ORIG_PATH_INFO']))\n{\n\t$_URI_PATH = $_SERVER['ORIG_PATH_INFO'];\n}\n\ndefine('USE_FUEL_ROUTES', (strpos($_URI_PATH, '/'.$config['fuel_path']) !== FALSE));\n\nforeach ($config['modules_allowed'] as $module)\n{\n\t$constants_path = MODULES_PATH . $module . '/config/' . $module . '_constants.php';\n\n\tif (file_exists($constants_path))\n\t{\n\t\trequire_once($constants_path);\n\t}\n}\n\nif ( ! defined('BASE_URL'))\n{\n\t$_base_path = $_SERVER['SERVER_NAME'].str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']);\n\n\tif ( ! empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off' OR $_SERVER['SERVER_PORT'] == 443)\n\t{\n\t\tdefine('BASE_URL', \"https://\".$_base_path);\n\t}\n\telse\n\t{\n\t\tdefine('BASE_URL', \"http://\".$_base_path);\n\t}\n}\n\nif ( ! defined('FUEL_DSN'))\n{\n\tdefine('FUEL_DSN', 'default');\n}\n\n/* End of file fuel_constants.php */\n/* Location: ./modules/fuel/config/fuel_constants.php */", "<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n/**\n * FUEL CMS\n * http://www.getfuelcms.com\n *\n * An open source Content Management System based on the \n * Codeigniter framework (http://codeigniter.com)\n *\n * @package\t\tFUEL CMS\n * @author\t\tDavid McReynolds @ Daylight Studio\n * @copyright\tCopyright (c) 2018, Daylight Studio LLC.\n * @license\t\thttp://docs.getfuelcms.com/general/license\n * @link\t\thttp://www.getfuelcms.com\n * @filesource\n */\n\n// ------------------------------------------------------------------------\n\n/**\n * FUEL Asset Class\n *\n * This class allows you to output css, js links and/or files as well as\n * allows you to compress and cache them. It also has convenience methods for \n * paths to different assets like images, PDFs, javascript css etc.\n * \n * Additionally, you can use the <a href=\"[user_guide_url]helpers/asset\">asset helper</a>\n * which provides a shortcut for many of the methods of the Asset class. \n * \n * This class is auto-loaded.\n *\n * @package\t\tFUEL CMS\n * @subpackage\tLibraries\n * @category\tLibraries\n * @author\t\tDavid McReynolds @ Daylight Studio\n * @link\t\thttp://docs.getfuelcms.com/libraries/asset\n */\n\nclass Asset {\n\t\n\t// relative to web_root\n\tpublic $assets_path = 'assets/';\n\n\t// relative to web_root/assets_path\n\tpublic $assets_folders = array(\n\t\t'images' => 'images/',\n\t\t'css' => 'css/',\n\t\t'js' => 'js/',\n\t\t'pdf' => 'pdf/',\n\t\t'swf' => 'swf/',\n\t\t'media' => 'media/',\n\t\t'captchas' => 'captchas/'\n\t\t);\n\n\t// makes paths to assets absolute\n\tpublic $assets_absolute_path = TRUE;\n\n\t// used for caching\n\tpublic $assets_last_updated = '00/00/0000 00:00:00';\n\n\t// appends timestamp of last updated after file name\n\tpublic $asset_append_cache_timestamp = array('js', 'css');\n\t\n\t/**\n\t * Optimize and/or cache assets. Options are:\n\t *\n\t<ul>\n\t\t<li><strong>FALSE</strong> - no optimization</li>\n\t\t<li><strong>TRUE</strong> - will combine files, strip whitespace, and gzip</li>\n\t\t<li><strong>inline</strong> - will render the files inline</li>\n\t\t<li><strong>gzip</strong> - will combine files (if multiple) and gzip without stripping whitespace</li>\n\t\t<li><strong>whitespace</strong> - will combine files (if multiple) and strip out whitespace without gzipping</li>\n\t\t<li><strong>combine</strong> - will combine files (if multiple) but will not strip out whitespace or gzip</li>\n\t</ul>\n\t */\n\tpublic $assets_output = FALSE;\n\n\t// force assets to recompile on each load\n\tpublic $force_assets_recompile = FALSE;\n\n\t// cache folder relative to the application folder... must be writable directory (default is the application/assets/cache folder)\n\tpublic $assets_cache_folder = 'cache/';\n\n\t// time limit on gzip cache file in seconds\n\tpublic $assets_gzip_cache_expiration = 3600;\n\t\n\t// module assets path \n\tpublic $assets_module_path = 'fuel/modules/{module}/assets/';\n\t\n\t// module context for assets\n\tpublic $assets_module = '';\n\t\n\t// will ignore loading css and js files if loaded already\n\tpublic $ignore_if_loaded = FALSE;\n\t\n\t// an array of all the css/js files used so we can check as to whether we need to call them again.\n\tprotected $_used = array();\n\t\n\t// cache of module configs loaded\n\tprotected $_module_config_loaded = array();\n\t\n\t// has assets configuration been loaded?\n\tprotected $_asset_config_loaded = FALSE;\n\t\n\t// the collection of files to cache\n\tprotected $_cacheable_files = array();\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Constructor\n\t *\n\t * Accepts an associative array as input, containing preferences (optional)\n\t *\n\t * @access\tpublic\n\t * @param\tarray\tconfig preferences\n\t * @return\tvoid\n\t */\t\n\tpublic function __construct($params = array())\n\t{\n\t\tif (!defined('WEB_ROOT')) define('WEB_ROOT', str_replace(SELF, '', FCPATH));\n\t\tif (!defined('WEB_PATH')) define('WEB_PATH', str_replace(basename($_SERVER['SCRIPT_NAME']),\"\",$_SERVER['SCRIPT_NAME']));\n\t\tif (count($params) > 0)\n\t\t{\n\t\t\t$this->initialize($params);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Initialize the user preferences\n\t *\n\t * Accepts an associative array as input, containing display preferences\n\t *\n\t * @access\tpublic\n\t * @param\tarray\tconfig preferences\n\t * @return\tvoid\n\t */\t\n\tpublic function initialize($config = array())\n\t{\n\t\tforeach ($config as $key => $val)\n\t\t{\n\t\t\tif (isset($this->$key))\n\t\t\t{\n\t\t\t\t$this->$key = $val;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an image asset path\n\t *\n\t<code>\n\techo $this->asset->img_path('banner.jpg');\n\t// /assets/images/banner.jpg\n\n\techo $this->asset->img_path('banner.jpg', 'my_module');\n\t// /fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->img_path('banner.jpg', NULL, TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg (if the \"assets_module\" Asset class property is empty)\n\t// http://www.mysite.com/fuel/modules/my_module/assets/images/banner.jpg (if the \"assets_module\" Asset class property is my_module)\n\n\techo $this->asset->img_path('banner.jpg', '', TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg (and empty string for the module parameter will properly ignore anything in the assets_module Asset class property)\n\n\t</code>\n\t<p class=\"important\">File extension <strong>must</strong> be included.</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\timage file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function img_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'images', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a css asset path\n\t *\n\t<code>\n\techo $this->asset->css_path('main');\n\t// /assets/css/main.css\n\n\techo $this->asset->css_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/css/main.css (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->css_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/css/main.css\n\t</pre>\n\n\t</code>\n\t<p class=\"important\">The <kbd>.css</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tcss file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function css_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file)) \n\t\t{\n\t\t\tif (!preg_match('#(\\.css|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.css';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'css', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a js asset path\n\t<code>\n\techo $this->asset->js_path('main');\n\t// /assets/js/main.js\n\n\techo $this->asset->js_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/js/main.js (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->js_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/js/main.js\n\t</code>\n\n\t<p class=\"important\">The <kbd>.js</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tjavascript file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function js_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file)) \n\t\t{\n\t\t\tif (!preg_match('#(\\.js|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.js';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'js', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a swf asset path\n\t *\n\t<code>\n\techo $this->asset->swf_path('main');\n\t// /assets/swf/home.swf\n\n\techo $this->asset->swf_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/swf/home.swf (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->swf_path('main', NULL, TRUE);\n\t// http://www.mysite.com/assets/swf/home.swf\n\t</code>\n\n\t<p class=\"important\">The <kbd>.swf</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tswf file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function swf_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file))\n\t\t{\n\t\t\tif (!preg_match('#(\\.swf|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.swf';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'swf', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a pdf asset path\n\t *\n\t<code>\n\techo $this->asset->pdf_path('newsletter');\n\t// /assets/swf/newsletter.pdf\n\n\techo $this->asset->pdf_path('main', 'my_module');\n\t// /fuel/modules/my_module/assets/pdf/newsletter.pdf (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->pdf_path('main', NULL, TRUE);\t\n\t// http://www.mysite.com/assets/pdf/newsletter.pdf\n\t</code>\n\n\t<p class=\"important\">The <kbd>.pdf</kbd> file extension will automatically be added if it is not found in the file name (first parameter).</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tpdf file name (extension not required)\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function pdf_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\tif (!empty($file))\n\t\t{\n\t\t\tif (!preg_match('#(\\.pdf|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.pdf';\n\t\t\t}\n\t\t}\n\t\treturn $this->assets_path($file, 'pdf', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a media asset path (e.g. quicktime .mov)\n\t<code>\n\techo $this->asset->media_path('mymovie.mov');\n\t// /assets/media/mymovie.mov\n\n\techo $this->asset->media_path('mymovie.mov', 'my_module');\n\t// /fuel/modules/my_module/assets/media/nmymovie.mov (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->media_path('mymovie.mov', NULL, TRUE);\n\t// http://www.mysite.com/assets/media/mymovie.mov\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included.</p>\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tpdf file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function media_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'media', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a document asset path (e.g. doc, docx)\n\t *\n\t<code>\n\techo $this->asset->docs_path('mydoc.doc');\n\t// /assets/docs/mydoc.doc\n\n\techo $this->asset->docs_path('mydoc.doc', 'my_module');\n\t// /fuel/modules/my_module/assets/docs/mydoc.doc (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->media_path('mydoc.doc', NULL, TRUE);\n\t// http://www.mysite.com/assets/docs/mydoc.doc\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tdoc file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function docs_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'docs', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a cache asset path\n\t *\n\t<code>\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php');\n\t// /assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\n\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php', 'my_module');\n\t// /fuel/modules/my_module/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->cache_path('3c38643da81c3cee289feac34465c353_943948800.php', NULL, TRUE);\n\t// http://www.mysite.com/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. \n\tModules should include a <strong>writable</strong> asset cache folder (e.g. assets/cache) if asset optimizing is used\n\t</p>\n\t * @access\tpublic\n\t * @param\tstring\tcached file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function cache_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, trim($this->assets_cache_folder, '/'), $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a captcha image path\n\t *\n\t<code>\n\techo $this->asset->captcha_path('123456_captcha.jpg');\n\t// /assets/captcha/123456_captcha.jpg\n\n\techo $this->asset->captcha_path('123456_captcha.jpg', 'my_module');\n\t// /fuel/modules/my_module/assets/captcha/123456_captcha.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->captcha_path('123456_captcha.jpg', NULL, TRUE);\n\t// http://www.mysite.com/assets/captcha/123456_captcha.jpg\n\t</code>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tcaptcha file name including extension\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function captcha_path($file = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\treturn $this->assets_path($file, 'captchas', $module, $absolute);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an asset path and is what the others above use\n\t *\n\t<code>\n\techo $this->asset->assets_path();\n\t// /assets/\n\n\techo $this->asset->assets_path('banner.jpg', 'images');\n\t// /assets/images/banner.jpg\n\n\techo $this->asset->assets_path('banner.jpg', 'images', 'my_module');\n\t// /fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\n\techo $this->asset->assets_path('banner.jpg', 'images', NULL, TRUE);\n\t// http://www.mysite.com/assets/images/banner.jpg\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. This folder must be <strong>writable</strong>.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n\t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc). Subfolder must be defined as key in `$config['assets_folders']` application/config/assets.php\n\t * @param\tstring\tmodule folder if any\n\t * @param\tboolean\twhether to include http://... at beginning\n\t * @return\tstring\n\t */\t\n\tpublic function assets_path($file = NULL, $path = NULL, $module = NULL, $absolute = NULL)\n\t{\n\t\t$cache = '';\n\t\tif (!isset($absolute)) $absolute = $this->assets_absolute_path;\n\t\t\n\t\t$CI = $this->_get_assets_config();\n\t\tif ($this->asset_append_cache_timestamp AND in_array($path, $this->asset_append_cache_timestamp) AND !empty($file))\n\t\t{\n\t\t\t$q_str = (strpos($file, '?') === FALSE) ? '?' : '&';\n\t\t\t$cache = $q_str.'c='.strtotime($this->assets_last_updated);\n\t\t}\n\t\n\t\t// if it is an absolute path already provided, then we just return it without any caching\n\t\tif (!$this->_is_local_path($file))\n\t\t{\n\t\t\treturn $file.$cache;\n\t\t}\n\t\t\n\t\t$assets_folders = $this->assets_folders;\n\n\t\t$asset_type = (!empty($assets_folders[$path])) ? $assets_folders[$path] : $CI->config->item($path);\n\n\t\t// if absolute path, then we just return that\n\t\tif (!$this->_is_local_path($this->assets_path))\n\t\t{\n\t\t\treturn $this->assets_path.$asset_type.$file.$cache;\n\t\t}\n\n\t\t$assets_path = $this->_get_assets_path($module);\n\t\t\n\t\t$path = WEB_PATH.$assets_path.$asset_type.$file.$cache;\n\n\t\tif ($absolute)\n\t\t{\n\t\t\t$protocol = ($_SERVER[\"SERVER_PORT\"] == 443) ? \"https://\" : \"http://\";\n\t\t\t$path = $protocol.$_SERVER['SERVER_NAME'].$path;\n\t\t}\n\t\treturn $path;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Get the server path\n\t *\n\t<code>\n\techo $this->asset->assets_server_path();\n\t// /Library/WebServer/Documents/assets/\n\n\techo $this->asset->assets_path('banner.jpg', 'images');\n\t// /Library/WebServer/Documents/assets/images/banner.jpg\n\n\techo $this->asset->assets_path('banner.jpg', 'images', 'my_module');\n\t// /Library/WebServer/Documents/fuel/modules/my_module/assets/images/banner.jpg (assuming /fuel/modules is where the module folder is located)\n\t</code>\n\n\t<p class=\"important\">File extensions <strong>must</strong> be included. This folder must be <strong>writable</strong>.</p>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n\t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n\t * @param\tstring\tmodule folder if any\n\t * @return\tstring\n\t */\t\n\tpublic function assets_server_path($file = NULL, $path = NULL, $module = NULL)\n\t{\n\t\t$CI = $this->_get_assets_config();\n\n\t\t$assets_path = $this->_get_assets_path($module);\n\t\t$assets_folders = $this->assets_folders;\n\t\t\n\t\t$asset_type = (!empty($assets_folders[$path])) ? $assets_folders[$path] : $CI->config->item($path);\n\t\t$path = WEB_ROOT.$assets_path.$asset_type.$file;\n\t\t//$path = str_replace('/', DIRECTORY_SEPARATOR, $path); // for windows\n\t\treturn $path;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Convert a server path to a web path\n\t *\n\t<code>\n\t$file_server_path = '/Library/WebServer/Documents/assets/images/my_img.jpg';\n\techo $this->asset->assets_server_to_web_path($file_server_path);\n\t// /assets/images/my_img.jpg\n\t</code>\n\t * @access\tpublic\n\t * @param\tstring\tserver path to asset file\n\t * @param\tbool\tdetermines whether to truncate to the asset folder or not\n\t * @return\tstring\n\t */\t\n\tpublic function assets_server_to_web_path($file, $truncate_to_asset_folder = FALSE)\n\t{\n\t\t$file = str_replace('\\\\', '/', $file); // for windows\n\t\t$web_path = str_replace(WEB_ROOT, '', '/'.$file);\n\t//\t$assets_path = str_replace('/', DIRECTORY_SEPARATOR, $this->assets_path); // for windows\n\t\t$assets_path = str_replace($this->assets_path, '', $web_path);\n\n\t\t// Causes issues in some environments like GoDaddy... was originally changed for the assets to potentially be in a parent folder \n\t\t// $doc_root = preg_replace(\"!${_SERVER['SCRIPT_NAME']}$!\", '', $_SERVER['SCRIPT_FILENAME']);\n\t\t// $assets_path = str_replace($doc_root, '', $assets_path);\n\n\t\tif ($truncate_to_asset_folder)\n\t\t{\n\t\t\tif (strncmp($assets_path, '/', 1) === 0) $asset_path = substr($assets_path, 1);  // to remove beginning slash\n\t\t\treturn $assets_path;\n\t\t}\n\t\t\t\t\n\t\treturn $this->assets_path(str_replace('//', '/', $assets_path));\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns a boolean value of whether a file exists\n\t *\n\t<code>\n\tif ($this->asset->asset_exists('banner.jpg'))\n\t{\n\t\techo 'file exists!';\n\t}\n\t</code>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n \t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n \t * @param\tstring\tmodule folder if any\n\t * @return\tboolean\n\t */\t\n\tpublic function asset_exists($file = NULL, $path = NULL, $module = NULL)\n\t{\n\t\t$asset_file = assets_server_path($file, $path, $module);\n\t\treturn (file_exists($asset_file));\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns the file size of an asset\n\t *\n\t<code>\n\techo $this->asset->asset_filesize('banner.jpg');\n\t// 20500\n\n\techo $this->asset->assets_path('banner.jpg', 'images', '', TRUE);\n\t// 20.5 KB \n\t</code>\n\n\t * @access\tpublic\n\t * @param\tstring\tasset file name including extension\n \t * @param\tstring\tsubfolder to asset file (e.g. images, js, css... etc)\n \t * @param\tstring\tmodule folder if any\n \t * @param\tboolean\tformat\n\t * @return\tstring\n\t */\t\n\tpublic function asset_filesize($file = NULL, $path = NULL, $module = NULL, $format = TRUE)\n\t{\n\t\t$asset_file = assets_server_path($file, $path, $module);\n\t\t$filesize = 0;\n\t\tif (file_exists($asset_file))\n\t\t{\n\t\t\t$filesize = filesize($asset_file);\n\t\t}\n\t\tif ($format)\n\t\t{\n\t\t\tif (!function_exists('byte_format'))\n\t\t\t{\n\t\t\t\t$CI = $this->_get_assets_config();\n\t\t\t\t$CI->load->helper('number');\n\t\t\t}\n\t\t\t$filesize = byte_format($filesize);\n\t\t}\n\t\treturn $filesize;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Creates javascript code that first tries to pull in jquery from the Google CDN, and if it doesn't exist, goes to the local backup version\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tjQuery version number for Google CDN\n\t * @param\tstring\tlocal asset path to default version\n\t * @return\tstring\n\t */\t\n\tpublic function jquery($version = '1.7.1', $default = 'jquery')\n\t{\n\t\t$CI =& get_instance();\n\t\t$cache_id = 'jquery_'.$version;\n\t\t$jquery_url = 'https://ajax.googleapis.com/ajax/libs/jquery/'.$version.'/jquery.min.js';\n\n\t\tif (!$CI->fuel->cache->is_cached($cache_id)) \n\t\t{\n\t\t\t$ch = curl_init();\n\t\t\tcurl_setopt($ch, CURLOPT_URL, $jquery_url);\n\t\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\t\t\t$result = curl_exec($ch);\n\t\t\tcurl_close($ch);\n\t\t\t$scriptHash = hash('sha256', $result, TRUE);\n\t\t\t$base64 = base64_encode($scriptHash);\n\t\t\t$CI->fuel->cache->save($cache_id, $base64);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$base64 = $CI->fuel->cache->get($cache_id);\n\t\t}\n\t\t\n\t\t$js = '<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/'.$version.'/jquery.min.js\" integrity=\"sha256-'.$base64.'\" crossorigin=\"anonymous\"></script>';\n\t\t$js .= '<script>window.jQuery || document.write(\\'<script src=\"'.js_path($default).'\"><\\/script>\\');</script>';\n\t\treturn $js;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Inserts <script ...></script> tags based on configuration settings for js file path\n\t *\n\t<p>The third parameter is an <kbd>array</kbd> of additional attributes to pass. Those attributes can be the following</p>\n\t<ul>\n\t\t<li><strong>attrs</strong> - additional attributes to pass to the <kbd>&lt;script&gt;</kbd> tag. Can be a string or an array</li>\n\t\t<li><strong>output</strong> - the output method to be applied to the contents of the file. Can be any of the <kbd>assets_output</kbd></li>\n\t\t<li><strong>ie_conditional</strong> - applies an IE specific conditional comment around the <kbd>&lt;script&gt;</kbd> tag</li>\n\t</ul>\n\n\t<p>Additionally, if the asset configuration of <strong>asset_append_cache_timestamp</strong> includes <strong>js</strong>,\n\tthen the caching timestamp will be appended as a query string parameter at the end just like if you were to use\n\t<kbd>$this->asset->js_path().</kbd>\n\tExamples:\n\t</p>\n\n\t<code>\n\techo $this->asset->js('main');\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('jquery, main');\n\t// &lt;script src=\"/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js(array('jquery', 'main'));\n\t// &lt;script src=\"/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script src=\"/assets/js/main.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('main', 'my_module');\n\t// &lt;script src=\"/fuel/modules/my_module/assets/js/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n\techo $this->asset->js('main', NULL, array('output' => TRUE, 'attrs' => 'onload=myOnloadFunc()', 'ie_conditional' => 'lte IE 6'));\n\t// &lt;!--[if lte IE 6]&gt;\n\t// &lt;script src=\"/assets/cache/3c38643da81c3cee289feac34465c353_943948800.php\" type=\"text/javascript\" charset=\"utf-8\" onload=\"myOnloadFunc\"&gt;&lt;/script&gt;\n\t// &lt;![endif]--&gt;\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - All path references in the javascript file (e.g. paths to image files), should be changed to absolute if the script is printed <strong>inline</strong>.</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\tmodule module folder if any\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output... Can be any of the <strong>assets_output</strong>)\n\t * @return\tstring\n\t */\t\n\tpublic function js($path, $module = '', $options = array())\n\t{\n\t\t// if the path is an associative array, than we assume the key is the module\n\t\tif (is_array($path))\n\t\t{\n\t\t\tif (!is_numeric(key($path)))\n\t\t\t{\n\t\t\t\t$module = key($path);\n\t\t\t\t$path = current($path);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!empty($options['attrs']))\n\t\t{\n\t\t\t$options['attrs'] = $this->_array_to_attr($options['attrs']);\n\t\t\tif (strpos($options['attrs'], 'type=\"text/javascript\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= 'type=\"text/javascript\"';\n\t\t\t}\n\n\t\t\tif (strpos($options['attrs'], 'charset=\"utf-8\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= ' charset=\"utf-8\"';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$options['attrs'] = 'type=\"text/javascript\" charset=\"utf-8\"';\n\t\t}\n\t\t\n\t\t\n\t\tif (!isset($options['output']))\n\t\t{\n\t\t\t$options['output'] = $this->assets_output;\n\t\t}\n\t\t\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$open = \"<script>\\n\";\n\t\t\t$close = \"\\t</script>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$open = '<script src=\"';\n\t\t\t$close = '></script>';\n\t\t}\n\n\t\t$str = $this->_output('js', $module, $open, $close, $path, $options);\n\t\tif (!empty($options['echo'])) echo $str;\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Inserts <link ... /> tags based on configuration settings for css file path\n\t *\n\t<p>The third parameter is an <kbd>array</kbd> of additional attributes to pass. Those attributes can be the following</p>\n\t<ul>\n\t\t<li><strong>attrs</strong> - additional attributes to pass to the <kbd>&lt;script&gt;</kbd> tag. Can be a string or an array</li>\n\t\t<li><strong>output</strong> - the output method to be applied to the contents of the file. Can be any of the <kbd>assets_output</kbd></li>\n\t\t<li><strong>ie_conditional</strong> - applies an IE specific conditional comment around the <kbd>&lt;script&gt;</kbd> tag</li>\n\t</ul>\n\t\n\t<p>Additionally, if the asset configuration of <strong>asset_append_cache_timestamp</strong> includes <strong>js</strong>,\n\tthen the caching timestamp will be appended as a query string parameter at the end just like if you were to use\n\t<kbd>$this->asset->js_path().</kbd>\n\tExamples:\n\t</p>\n\n\t<code>\n\techo $this->asset->css('main');\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main, home');\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\t// &lt;link href=\"/assets/css/home.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css(array('main', 'home'));\n\t// &lt;link href=\"/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\t// &lt;link href=\"/assets/css/home.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main', 'my_module');\n\t// &lt;link href=\"fuel/modules/my_module/assets/css/main.css\" media=\"all\" rel=\"stylesheet\"/&gt;\n\n\techo $this->asset->css('main', NULL, array('output' => TRUE, 'attrs' => 'media=\"print\"', 'ie_conditional' => 'lte IE 6'));\n\t// &lt;!--[if lte IE 6]&gt;\n\t// &lt;link href=\"/assets/css/main.css\" media=\"print\" rel=\"stylesheet\"/&gt;\n\t// &lt;![endif]--&gt;\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - All path references in the css file (e.g. paths to background image files), should be changed to absolute if the script is printed <strong>inline</strong></p>\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\tmodule module folder if any\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output)\n\t * @return\tstring\n\t */\t\n\tpublic function css($path, $module = '', $options = array())\n\t{\n\t\t// if the path is an associative array, than we assume the key is the module\n\t\tif (is_array($path))\n\t\t{\n\t\t\tif (!is_numeric(key($path)))\n\t\t\t{\n\t\t\t\t$module = key($path);\n\t\t\t\t$path = current($path);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!empty($options['attrs']))\n\t\t{\n\t\t\t$options['attrs'] = $this->_array_to_attr($options['attrs']);\n\t\t\tif (strpos($options['attrs'], 'rel=\"stylesheet\"') === FALSE)\n\t\t\t{\n\t\t\t\t$options['attrs'] .= 'rel=\"stylesheet\"';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$options['attrs'] = 'media=\"all\" rel=\"stylesheet\"';\n\t\t}\n\t\t\n\t\tif (!isset($options['output']))\n\t\t{\n\t\t\t$options['output'] = $this->assets_output;\n\t\t}\n\t\t\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$open = \"<style type=\\\"text/css\\\" media=\\\"screen\\\">\\n\";\n\t\t\t$close = \"\\n\\t</style>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$open = '<link href=\"';\n\t\t\t$close = '/>';\n\t\t}\n\n\t\t$str = $this->_output('css', $module, $open, $close, $path, $options);\n\n\t\t// fix background images urls\n\t\tif ($options['output'] === 'inline')\n\t\t{\n\t\t\t$str = str_replace('url(../images/', 'url('.$this->img_path('', $module).'../images/', $str);\n\t\t\t$str = str_replace('@import url(', '@import url('.$this->css_path('', $module), $str);\n\t\t}\n\t\tif (!empty($options['echo'])) echo $str;\n\t\treturn $str;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Convenience method that returns the HTML for the css() and js() methods\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tthe type of file to output. Options are js or css\n\t * @param\tstring\tmodule folder if any\n\t * @param\tstring\tthe opening html\n\t * @param\tstring\tthe closing html\n\t * @param\tstring\tthe path to the asset\n\t * @param\tarray\tadditional parameter to include (attrs, ie_conditional, and output)\n\t * @return\tstring\n\t */\t\n\tprotected function _output($type, $module, $open, $close, $path, $options)\n\t{\n\t\t$attrs = ''; \n\t\t$ie_conditional = ''; \n\t\t$output = FALSE; \n\t\t$echo = FALSE; \n\t\t\n\t\textract($options);\n\t\t\n\t\tif (empty($path)) return;\n\t\t$CI = $this->_get_assets_config();\n\t\t\n\t\tif (!isset($ignore_if_loaded))\n\t\t{\n\t\t\t$ignore_if_loaded = $this->ignore_if_loaded;\n\t\t}\n\n\t\t//normalize\n\t\tif (is_string($output))\n\t\t{\n\t\t\t$output = strtolower($output);\n\t\t}\n\t\t\n\t\t$use_cache = ($output !== FALSE AND $output !== 'inline');\n\t\t$str = '';\n\t\t$nested = '';\n\n\t\t// open\n\t\tif (!empty($ie_conditional)) $open = \"\\n\\t<!--[if \".$ie_conditional.\"]>\\n\\t\".$open;\n\t\n\t\t// close\n\t\tif ($output !== 'inline')\n\t\t{\n\t\t\tif (!empty($attrs))\n\t\t\t{\n\t\t\t\t$attrs = $this->_array_to_attr($attrs);\n\t\t\t\t$close = '\" '.$attrs.$close;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$close = '\"'.$close;\n\t\t\t}\n\t\t}\n\t\tif (!empty($ie_conditional)) $close .= \"\\n\\t<![endif]-->\\n\";\n\t\n\t\t// normalize $path\n\t\tif (is_string($path) AND strpos($path, ',') !== FALSE)\n\t\t{\n\t\t\t$path = preg_replace(\"/\\s/\", \"\", $path);\n\t\t\t$path = explode(',', $path);\n\t\t}\n\t\t\n\t\tif ($use_cache AND $output !== 'inline')\n\t\t{\n\t\t\t// reset cacheable files array\n\t\t\t$this->_cacheable_files = array();\n\t\t\t\n\t\t\t$cache_file = $this->_check_cache($path, $type, $output, $module);\n\t\t\t$str .= $open;\n\t\t\t$str .= $cache_file;\n\t\t\t$str .= $close;\n\t\t\t$str .= \"\\n\\t\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// convert to an array if not already \n\t\t\t$path = (array) $path;\n\t\t\t$files_arr = array();\n\t\t\t$default_module = $module;\n\n\t\t\tforeach($path as $key => $val)\n\t\t\t{\n\t\t\t\tif ($ignore_if_loaded AND $this->is_used($type, $val))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$module = (is_string($key)) ? $key : $default_module;\n\t\t\t\t\n\t\t\t\tif ($module == 'app' OR $module =='application')\n\t\t\t\t{\n\t\t\t\t\t$module = NULL;\n\t\t\t\t}\n\n\t\t\t\tif (is_array($val))\n\t\t\t\t{\n\t\t\t\t\t$nested .= $this->$type($val, $module, $options);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$file_str = $open;\n\t\t\t\t\t$type_path = $type.'_path';\n\t\t\t\t\t$assets_folders = $this->assets_folders;\n\t\t\t\t\tif (!$this->_is_local_path($val) AND $output !== 'inline')\n\t\t\t\t\t{\n\t\t\t\t\t\t$file_str .= $val;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($output === 'inline')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$contents_path = $this->assets_server_path($val, $type, $module).'.'.$type;\n\t\t\t\t\t\t\tif (file_exists($contents_path))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$file_str .= file_get_contents($contents_path);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$file_str .= $this->$type_path($val, $module);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$file_str .= $close;\n\t\t\t\t\t$files_arr[] = $file_str;\n\t\t\t\t\t//$file_str .= \"\\n\\t\";\n\t\t\t\t\t$this->_add_used($type, $val);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// use implode so it doesn't add the trailing \\n\\t'\n\t\t\t$str = $str.implode(\"\\n\\t\", $files_arr);\n\n\t\t\t\n\t\t}\n\t\t\n\t\t$str .= \"\\n\\t\".$nested;\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Embeds a flash file using swfobject\n\t *\n\t<p>The fourth parameter is a catch all for additional parameter that can be passed which include:</p>\n\t<ul>\n\t\t<li><strong>vars</strong> - FlashVar variables to pass to the swf file</li>\n\t\t<li><strong>version</strong> - the Flash Player version to detect for. Default is Flash Player 9</li>\n\t\t<li><strong>color</strong> - the background color to be used. May be seen briefly before the swf file runs.</li>\n\t\t<li><strong>params</strong> - additional parameters to be passed to the swf file. For information on the additional parameters, visit the <a href=\"http://http://code.google.com/p/swfobject/wiki/documentation\">swfobject documentation</a></li>\n\t</ul>\n\t<code>\n\techo $this->asset->swf('home', 'home_flash', 800, 300, array('color' => '#000000', 'version' => 9));\n\n\t// &lt;script src=\"/assets/js/swfobject.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\t// &lt;script type=\"text/javascript\"&gt;\n\t// //&lt;![CDATA[\n\t//     var so = new SWFObject(\"/assets/swf/home.swf\", \"flash_swf\", \"800\", \"300\", \"9\", \"#000000\");\n\t//     so.write(\"flash\");\n\t// // ]]&gt;\n\t// &lt;/script&gt;\n\n\t</code>\n\n\t<p class=\"important\"><strong>Important</strong> - Requires the <kbd>swfobject.js</kbd> to be located in the javascript assets folder. The swfoject being used is an older version (1.5)</p>\n\t\n\t * @access\tpublic\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\thtml id that the flash will replace with swfobject\n\t * @param\tint\t\twidth of the flash file\n\t * @param\tint\t\theight of the flash file\n\t * @param\tarray\tadditional parameter to include (vars, version, and color, params)\n\t * @return\tstring\n\t */\t\n\tpublic function swf($flash, $id, $width, $height, $options = array())\n\t{\n\t\t$vars = NULL; \n\t\t$version = 9; \n\t\t$color = '#ffffff'; \n\t\t$params = array(); \n\n\t\tif (is_array($options))\n\t\t{\n\t\t\tif (isset($options['vars'])) $vars = $options['vars'];\n\t\t\tif (isset($options['version'])) $version = $options['version'];\n\t\t\tif (isset($options['color'])) $color = $options['color'];\n\t\t\tif (isset($options['params'])) $params = $options['params'];\n\t\t}\n\t\t\n\t\tif (empty($flash)) return;\n\t\t$CI = $this->_get_assets_config();\n\t\tif (!empty($CI))\n\t\t{\n\t\t\t$swf_path = $CI->config->item('swf_path');\n\t\t}\n\t\n\t\t$str = '';\n\t\tif (empty($id))\n\t\t{\n\t\t\t$id_arr = explode('.', $flash);\n\t\t\t$id = $id_arr[0];\n\t\t\t$str .= '\n\t\t\t<div id=\"'.$id.'\">\n\t\t\t</div>';\n\t\t}\n\t\tif (!$this->is_used('js', 'swfobject') AND !$this->is_used('js', 'swfobject.js'))\n\t\t{\n\t\t\t$str .= $this->js('swfobject');\n\t\t}\n\t\t$str .= '\n\t\t<script>\n\t\t   var so = new SWFObject(\"'.$this->swf_path($flash).'\", \"'.$id.'_swf\", \"'.$width.'\", \"'.$height.'\", \"'.$version.'\", \"'.$color.'\");\n\t\t ';\n\t\tif(!is_array($vars))\n\t\t{\n\t\t\tparse_str($vars, $vars);\n\t\t}\n\t \tforeach($vars as $key => $val)\n\t{\n\t\t\t$str .= '\t\tso.addVariable(\"'.$key.'\", \"'.$val.'\"); \n\t';\n\t\t}\n\t\n\t\t foreach($params as $key => $val)\n\t\t{\n\t\t\t$str .= '\t\tso.addParam(\"'.$key.'\", \"'.$val.'\"); \n\t';\n\t\t}\n\n\t\t$str .= '\t\tso.write(\"'.$id.'\");\n\t\t</script>\n\t';\n\t\treturn $str;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Check to see whether a css/js file has been used yet\n\t *\n\t * @access\tpublic\n\t * @param\tstring\ttype of file (e.g. images, js, css... etc)\n\t * @param\tstring\tfile name\n\t * @return\tboolean\n\t */\t\n\tpublic function is_used($type, $file)\n\t{\n\t\treturn (isset($this->_used[$type]) AND in_array($file, $this->_used[$type]));\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Set and get cache version\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tfile name of the swf file including extension\n\t * @param\tstring\ttype of file (e.g.  js or css)\n\t * @param\tstring\toptimization methods which include FALSE, TRUE, 'inline', 'gzip', 'whitespace' and 'combine'\n\t * @param\tstring\ttype module folder if any\n\t * @return\tstring\n\t */\t\n\tprotected function _check_cache($files, $type, $optimize, $module)\n\t{\n\t\t$CI =& get_instance();\n\t\t$files = (array) $files;\n\t\t$cache_file_name = '';\n\t\t$cache_dir = $this->assets_server_path($this->assets_cache_folder, '', $module);\n\t\t$return = array();\n\t\n\t\t$default_module = $module;\n\t\n\t\t// first create file name\n\t\tforeach($files as $file)\n\t\t{\n\t\t\tif (is_array($file))\n\t\t\t{\n\t\t\t\tforeach($file as $key => $f)\n\t\t\t\t{\n\t\t\t\t\t$mod = (is_string($key)) ? $key : $default_module;\n\t\t\t\t\t$this->_cacheable_files[] = array($mod => $f);\n\t\t\t\t\t$cache_file_name .= $mod.'/'.$f.'|';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->_is_local_path($file))\n\t\t\t\t{\n\t\t\t\t\tif (substr($file, -(strlen($type)), (strlen($type) + 1)) == '.'.$type)\n\t\t\t\t\t{\n\t\t\t\t\t\t//$file = $file.'.'.$type;\n\t\t\t\t\t\t$file = substr($file, -(strlen($type)), (strlen($type) + 1));\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->_cacheable_files[] = array($module => trim($file));\n\n\t\t\t\t\t// replace backslashes with hyphens\n\t\t\t\t\t$file = str_replace('/', '_', $file);\n\t\t\t\t\t$cache_file_name .= $module.'/'.$file.'|';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t$cache_file_name = $cache_file_name.'.'.$type;\n\n\t\t$cache_file_name_md5 = md5($cache_file_name);\n\t\t$ext = ($optimize === TRUE OR $optimize == 'gzip') ? 'php' : $type;\n\t\t$cache_file_name = $cache_file_name_md5.'_'.strtotime($this->assets_last_updated).'.'.$ext;\n\t\t$cache_file = rtrim($cache_dir, '/').'/'.$cache_file_name;\n\n\n\t\t// create cache file if it doesn't exist'\n\t\tif (!file_exists($cache_file) OR $this->force_assets_recompile)\n\t\t{\n\t\t\n\t\t\t$CI->load->helper('file');\n\t\t\t$assets_folders = $this->assets_folders;\n\t\t\t//$asset_folder = WEB_ROOT.'/'.$this->assets_path.$assets_folders[$type];\n\t\t\t\n\t\t\t$output = '';\n\n\t\t\t// set optimization parameters\n\t\t\t$optimize_params['type'] = $type;\n\t\t\t$optimize_params['js_minify'] = TRUE;\n\n\t\t\tif ($optimize === TRUE OR $optimize == 'whitespace')\n\t\t\t{\n\t\t\t\t$optimize_params['whitespace'] = TRUE;\n\t\t\t}\n\n\t\t\tif ($optimize === TRUE OR $optimize == 'gzip')\n\t\t\t{\n\t\t\t\t$optimize_params['gzip'] = TRUE;\n\t\t\t}\n\n\t\t\t$output = $this->optimize($this->_cacheable_files, $optimize_params);\n\n\t\t\t// try to create directories if not there\n\t\t\tif (!is_dir($cache_dir) AND is_writable($cache_dir))\n\t\t\t{\n\t\t\t\t@mkdir($cache_dir, 0777, TRUE);\n\t\t\t}\n\t\t\n\t\t\n\t\t\t// cleanup files with the same prefix without the last updated time\n\t\t\t$dir_files = (array) get_filenames($cache_dir);\n\t\t\tforeach($dir_files as $dir_file)\n\t\t\t{\n\t\t\t\tif (strncmp($dir_file, $cache_file_name_md5, 10) === 0)\n\t\t\t\t{\n\t\t\t\t\t unlink(rtrim($cache_dir, '/').'/'.$dir_file);\n\t\t\t\t}\n\t\t\t}\n\t\t\twrite_file($cache_file, $output); // write cache file\n\t\t}\n\n\t\treturn $this->cache_path($cache_file_name, $module);\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Optimizes CSS and JS files by combining files together with options to remove whitespace and optimize code.\n\t *\n\t<ul>\n\t\t<li><strong>type</strong> - valid options are \"js\", \"css\" and auto. The default is \"auto\" and will look for the first file extension in the list of files passed</li>\n\t\t<li><strong>destination</strong> - the path and file name of the file to save the output to. Default is FALSE which means no file will be written</li>\n\t\t<li><strong>whitespace</strong> - whether to perform basic removal of whitespace.</li>\n\t\t<li><strong>js_minify</strong> - will use <a href=\"https://developers.google.com/closure/compiler/\" target=\"_blank\">Google's Closure Compiler</a> for javascript minification.</li>\n\t\t<li><strong>compilation_level</strong> - WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS and ADVANCED_OPTIMIZATION. More can be found here <a href=\"https://developers.google.com/closure/compiler/docs/api-ref\" target=\"_blank\">here</a>. The default is WHITESPACE_ONLY.</li>\n\t\t<li><strong>gzip</strong> - determines whether to add PHP code to gzip the file. Must be saved as a php file.</li>\n\t</ul>\n\t<code>\n\t$output = $this->asset->optimize(array('file1, 'file2.js', array('type' => 'js', 'destination' => 'my.min.js', 'whitespace' => TRUE, 'js_minify' => TRUE, 'gzip' => TRUE));\n\t</code>\n\n\t *\n\t * @access\tprotected\n\t * @param\tmixed\tfile(s) to optimize. Can be an array or string\n\t * @param\tarray  an array of parameters including \"destination\", \"whitespace\", \"js_minify\", \"compilation_level\" and \"type\"\n\t * @return\tstring\n\t */\t\n\tpublic function optimize($files, $params = array())\n\t{\n\t\t$CI =& get_instance();\n\t\t$CI->load->helper('file');\n\n\t\t// removes basic whitespace\n\t\tif (!isset($params['destination']))\n\t\t{\n\t\t\t$params['destination'] = FALSE;\n\t\t}\n\n\t\t// removes basic whitespace\n\t\tif (!isset($params['whitespace']))\n\t\t{\n\t\t\t$params['whitespace'] = TRUE;\n\t\t}\n\n\t\t// will CURL http://closure-compiler.appspot.com/compile\n\t\tif (empty($params['js_minify']))\n\t\t{\n\t\t\t$params['js_minify'] = TRUE;\n\t\t}\n\n\t\t// sets the curl level of http://closure-compiler.appspot.com/compile\n\t\tif (empty($params['compilation_level']))\n\t\t{\n\t\t\t$params['compilation_level'] = 'WHITESPACE_ONLY';\n\t\t}\n\n\t\t// type of optimization (\"css\" or \"js\")\n\t\tif (empty($params['type']))\n\t\t{\n\t\t\t$params['type'] = 'auto';\n\t\t}\n\n\t\t// add gzip compression and make it a .php file\n\t\tif (!isset($params['gzip']))\n\t\t{\n\t\t\t$params['gzip'] = FALSE;\n\t\t}\n\n\t\t$assets_folders = $this->assets_folders;\n\t\t\n\t\t$output = '';\n\n\t\t// normalize $files array\n\t\tif (!is_array($files))\n\t\t{\n\t\t\t$files = array($files);\n\t\t}\n\n\t\t// automatically come up with the type of file based on first file that you can detect extension\n\t\t$valid_exts = array('css', 'js');\n\t\tif (strtolower($params['type']) == 'auto')\n\t\t{\n\t\t\t// set type to javascript by default\n\t\t\t$params['type'] = 'js';\n\t\t\tforeach($files as $file)\n\t\t\t{\n\t\t\t\t$file_parts = explode('.', $files[0]); \n\t\t\t\t$ext = end($file_parts);\n\t\t\t\tif (in_array($ext, $valid_exts))\n\t\t\t\t{\n\t\t\t\t\t$params['type'] = $ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (!in_array($params['type'], $valid_exts))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$mime = NULL;\n\n\t\t// loop through files to combine them\n\t\tforeach($files as $key => $file)\n\t\t{\t\n\t\t\tif (!empty($params['module']))\n\t\t\t{\n\t\t\t\t$module = $params['module'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$module = $this->assets_module;\t\n\t\t\t}\n\t\t\t\n\t\t\tif (is_array($file))\n\t\t\t{\n\t\t\t\tif (!is_numeric(key($file)))\n\t\t\t\t{\n\t\t\t\t\t$module = key($file);\n\t\t\t\t\t$file = current($file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check for extension... if not there, add it\n\t\t\tif (!preg_match('#(\\.'.$params['type'].'|\\.php)(\\?.+)?$#', $file))\n\t\t\t{\n\t\t\t\t$file = $file.'.'.$params['type'];\n\t\t\t}\n\t\t\t// replace backslashes with hyphens\n\t\t\t$asset_folder = $this->assets_server_path('', $params['type'], $module);\n\t\t\t$file_path = $asset_folder.$file;\n\n\t\t\tif (file_exists($file_path))\n\t\t\t{\n\t\t\t\t$output .= file_get_contents($file_path).PHP_EOL;\n\t\t\t}\n\t\t}\n\n\t\t// optimize file by removing returns and tabs\n\t\tif ($params['type'] == 'js')\n\t\t{\n\t\t\tif ($params['whitespace'] == TRUE)\n\t\t\t{\n\t\t\t\t$output = str_replace(array(\"\\t\"), '', $output);\n\n\t\t\t\t// remove whitespace from the beginning of the line\n\t\t\t\t$output = preg_replace(\"/^\\s+/m\", '', $output);\n\n\t\t\t\t// no replacing multi-line comments because it normally has copyright stuff\n\t\t\t} \n\n\t\t\tif ($params['js_minify'] == TRUE AND extension_loaded('curl'))\n\t\t\t{\n\n\t\t\t\t// REST API arguments\n\t\t\t\t$api_args = array(\n\t\t\t\t\t'compilation_level' => $params['compilation_level'],\n\t\t\t\t\t'output_format' => 'text',\n\t\t\t\t\t'output_info' => 'compiled_code'\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t$args = 'js_code=' . urlencode($output);\n\t\t\t\tforeach ($api_args as $key => $value)\n\t\t\t\t{\n\t\t\t\t\t$args .= '&' . $key . '=' . urlencode($value);\n\t\t\t\t}\n\t\t\t\t// API call using cURL\n\t\t\t\t$ch = curl_init();\n\t\t\t\tcurl_setopt_array($ch, array(\n\t\t\t\t\tCURLOPT_URL => 'http://closure-compiler.appspot.com/compile',\n\t\t\t\t\tCURLOPT_POST => 1,\n\t\t\t\t\tCURLOPT_POSTFIELDS => $args,\n\t\t\t\t\tCURLOPT_RETURNTRANSFER => 1,\n\t\t\t\t\tCURLOPT_HEADER => 0,\n\t\t\t\t\tCURLOPT_FOLLOWLOCATION => 0\n\t\t\t\t));\n\n\t\t\t\tif (curl_error($ch) == '' )\n\t\t\t\t{\n\t\t\t\t\t$result = curl_exec($ch);\n\t\t\t\t\tif (!empty($result))\n\t\t\t\t\t{\n\t\t\t\t\t\t$output = $result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\texit(lang('error_curl_page'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$mime = 'text/javascript';\n\t\t}\n\t\telse if ($params['type'] == 'css')\n\t\t{\n\t\t\t// now include all import files as well ... only 1 deep though\n\t\t\tpreg_match_all('/@import url\\(([\\'|\"])*(.+)\\\\1\\);/U', $output, $imports);\n\t\t\tif (!empty($imports[2][0]))\n\t\t\t{\n\t\t\t\tforeach($imports[2] as $import)\n\t\t\t\t{\n\t\t\t\t\t$import_file_path = $this->assets_server_path($import, $params['type'], $module);\n\t\t\t\t\tif (file_exists($import_file_path))\n\t\t\t\t\t{\n\t\t\t\t\t\t$import_files[$import] = file_get_contents($import_file_path);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$callback = function($matches) {\n\t\t\t\t\tif (isset($matches[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn $GLOBALS[\"__TMP_CSS_IMPORT__\"][$matches[2]];\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// remove calls to the import since they are combined into the same css\n\t\t\t\tif (!empty($import_files))\n\t\t\t\t{\n\t\t\t\t\t// temporarily put it in the global space so the anonymous function can grab it\n\t\t\t\t\t$GLOBALS[\"__TMP_CSS_IMPORT__\"] = $import_files;\n\t\t\t\t\t$output = preg_replace_callback('/@import url\\(([\\'|\"])*(.+)\\\\1\\);/U', $callback, $output);\n\t\t\t\t\tunset($GLOBALS[\"__TMP_CSS_IMPORT__\"]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t// strip unnecessary whitespace\n\t\t\tif ($params['whitespace'] == TRUE)\n\t\t\t{\n\t\t\t\t$output = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $output);\n\t\t\t\t$output = preg_replace('<\\s*([@{}:;,]|\\)\\s|\\s\\()\\s*>S', '\\1', $output);// Remove whitespace around separators,\n\t\t\t\t// remove multi-line comments...\n\t\t\t\t//$output = preg_replace(\"/((?:\\/\\*(?:[^*]|(?:\\*+[^*\\/]))*\\*+\\/?)|(?:\\/\\/.*))/\", \"\", $output);// buggy with absolute image paths\n\t\t\t\t$output = preg_replace(\"#/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/#\", \"\", $output);\n\t\t\t}\n\t\t\t$mime = 'text/css';\n\t\t\n\t\t}\n\t\t\n\t\t// gzip if enabled in config and the server\n\t\tif ((($params['gzip'] == TRUE) AND extension_loaded('zlib')) AND (isset($_SERVER['HTTP_ACCEPT_ENCODING']) AND strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE))\n\t\t{\n\t\t\t$gzip = \"<?php\".PHP_EOL;\n\t\t\t$gzip .= \"ob_start();\".PHP_EOL;\n\t\t\n\t\t\t// start an inner buffer so we can get the content length\n\t\t\t$gzip .= \"ob_start (\\\"ob_gzhandler\\\");\".PHP_EOL;\n\t\t\t$gzip .= \"\\n?>\";\n\t\t\t$gzip .= $output;\n\t\t\t$gzip .= \"<?php\".PHP_EOL;\n\t\t\t$gzip .= \"ob_end_flush();\".PHP_EOL;\n\t\t\n\t\t\t// now begin inner buffer headers\n\t\t\tif (!empty($mime))\n\t\t\t{\n\t\t\t\t$gzip .= \"header(\\\"Content-type: \".$mime.\"; charset: UTF-8\\\");\".PHP_EOL;\t\n\t\t\t}\n\t\t\t$gzip .= \"header(\\\"Cache-Control: must-revalidate\\\");\".PHP_EOL;\n\t\t\t$gzip .= \"\\$offset = \".$this->assets_gzip_cache_expiration.\";\".PHP_EOL;\n\t\t\t$gzip .= \"\\$exp = \\\"Expires: \\\".gmdate(\\\"D, d M Y H:i:s\\\",time() + \\$offset).\\\" GMT\\\";\".PHP_EOL;\n\t\t\t$gzip .= \"header(\\$exp);\".PHP_EOL;\n\t\t\t$gzip .= \"\\$size = \\\"Content-Length: \\\".ob_get_length();\".PHP_EOL;\n\t\t\t$gzip .= \"header(\\$size);\".PHP_EOL;\n\t\t\t$gzip .= 'ob_end_flush();';\n\t\t\t$gzip .= \"\\n?>\".PHP_EOL;\n\t\t\t$output = $gzip;\n\t\t}\n\t\t\n\t\t// write contents to file\n\t\tif (!empty($params['destination']))\n\t\t{\n\t\t\t$destination_dir = dirname($params['destination']);\n\n\t\t\tif (is_writable($destination_dir))\n\t\t\t{\n\t\t\t\twrite_file($params['destination'], $output);\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn $output;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Creates attributes for a tag\n\t *\n\t * @access\tprotected\n\t * @param\tmixed\tarray or string of attribute values\n\t * @return\tstring\n\t */\t\n\tprotected function _array_to_attr($arr)\n\t{\n\t\tif (is_array($arr))\n\t\t{\n\t\t\t$str = '';\n\t\t\tforeach($arr as $key => $val)\n\t\t\t{\n\t\t\t\t$str .= $key.'=\"'.$val.'\" ';\n\t\t\t}\n\t\t\treturn $str;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $arr;\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Helper function to determine if it is a local path\n\t *\n\t * @access\tprotected\n\t * @param\tfile\tpath to the file\n\t * @return\tboolean\n\t */\t\n\tprotected function _is_local_path($path)\n\t{\n\t\tif (strncmp($path, 'http', 4) === 0)\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t\treturn TRUE;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Add to the used array\n\t *\n\t * @access\tprotected\n\t * @param\tstring\ttype of file (e.g. images, js, css... etc)\n\t * @param\tstring\tfile name\n\t * @return\tvoid\n\t */\t\n\tprotected function _add_used($type, $file)\n\t{\n\t\tif (!isset($this->_used[$type])) $this->_used[$type] = array();\n\t\t$this->_used[$type][] = $file;\n\t\t\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns the path to the asset. \n\t *\n\t * if a module is provided, we look in the modules folder or whatever it states in the {module}_assets_path config value\n\t *\n\t * @access\tprotected\n\t * @param\tstring\tmodule module folder if any\n\t * @return\tstring\n\t */\t\n\tprotected function _get_assets_path($module = NULL)\n\t{\n\t\tif (!isset($module)) $module = $this->assets_module;\n\t\t$assets_path = '';\n\n\t\t// if a module is provided, we look in the modules folder or whatever it states in the {module}_assets_path config value\n\t\tif (!empty($module))\n\t\t{\n\t\t\tif (empty($this->_module_config_loaded[$module]))\n\t\t\t{\n\t\t\t\t$assets_path = $this->assets_module_path;\n\t\t\t\t$module_config = MODULES_PATH.$module.'/config/'.$module.EXT;\n\t\t\t\tif (file_exists($module_config))\n\t\t\t\t{\n\t\t\t\t\tinclude_once($module_config);\n\t\t\t\t\tif (!empty($config[$module.'_assets_path']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$assets_path = $config[$module.'_assets_path'];\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$assets_path = $this->_module_config_loaded[$module];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$assets_path = $this->assets_path;\n\t\t}\n\t\t$assets_path = str_replace('{module}', $module, $assets_path);\n\n\t\t// cache it so we only include it once\n\t\tif (!empty($module))\n\t\t{\n\t\t\t$this->_module_config_loaded[$module] = $assets_path;\n\t\t}\n\t\treturn $assets_path;\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Loads the asset config and returns the CI super global object\n\t *\n\t * @access\tprotected\n\t * @return\tobject\n\t */\t\n\tprotected function _get_assets_config()\n\t{\n\t\tif (function_exists('get_instance'))\n\t\t{\n\t\t\t$CI =& get_instance();\n\t\t\tif (!$this->_asset_config_loaded)\n\t\t\t{\n\t\t\t\t$CI->load->config('asset');\n\t\t\t\t$this->_asset_config_loaded = TRUE;\n\t\t\t}\n\t\t\treturn $CI;\n\t\t}\n\t\treturn NULL;\n\t}\n}\n\n/* End of file Asset.php */\n/* Location: ./modules/fuel/libraries/Asset.php */\n", "<?php\n/*\n *---------------------------------------------------------------\n * FUEL INSTALL DIRECTORY\n *---------------------------------------------------------------\n *\n * This is the directory path to the fuel installation folder\n *\n */\ndefine('INSTALL_ROOT', str_replace('\\\\', '/', realpath(dirname(__FILE__))).'/fuel/');\n\n/*\n *---------------------------------------------------------------\n * FUEL CLI (Command Line Interface)\n *---------------------------------------------------------------\n *\n * You may need to alter these if you are using the CLI.  These $_SERVER variables\n * are used for calculating the $config['base_url'] which is used in the site_url() function.\n * So if your output requires the correct site_url() path, you will need to change these.\n */\n\nif (PHP_SAPI === 'cli' OR defined('STDIN'))\n{\n\t/* if your FUEL installation exists in a subfolder, then you may want to change SCRIPT_NAME to /subfolder/index.php \n\t (Needed for using Tester module if running via CLI) */\n\t$_SERVER['SCRIPT_NAME'] = 'index.php';\n\t$_SERVER['SERVER_NAME'] = 'localhost';\n\t$_SERVER['SERVER_PORT'] = 80;\n\t$_SERVER['REMOTE_ADDR'] = '127.0.0.1';\n\t$_SERVER['HTTP_HOST'] = 'localhost';\n}\n\n/**\n * CodeIgniter\n *\n * An open source application development framework for PHP\n *\n * This content is released under the MIT License (MIT)\n *\n * Copyright (c) 2014 - 2015, British Columbia Institute of Technology\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * @package\tCodeIgniter\n * @author\tEllisLab Dev Team\n * @copyright\tCopyright (c) 2008 - 2014, EllisLab, Inc. (http://ellislab.com/)\n * @copyright\tCopyright (c) 2014 - 2015, British Columbia Institute of Technology (http://bcit.ca/)\n * @license\thttp://opensource.org/licenses/MIT\tMIT License\n * @link\thttp://codeigniter.com\n * @since\tVersion 1.0.0\n * @filesource\n */\n\n/*\n *---------------------------------------------------------------\n * APPLICATION ENVIRONMENT\n *---------------------------------------------------------------\n *\n * You can load different configurations depending on your\n * current environment. Setting the environment also influences\n * things like logging and error reporting.\n *\n * This can be set to anything, but default usage is:\n *\n *     development\n *     testing\n *     production\n *\n * NOTE: If you change these, also change the error_reporting() code below\n */\n// automatically set environment based on the values set in the environments config\n\nif (isset($_SERVER['CI_ENV']))\n{\n\tdefine('ENVIRONMENT', $_SERVER['CI_ENV']);\n}\nelse\n{\n\t@include(INSTALL_ROOT.'application/config/environments.php');\n\n\tif (!empty($environments))\n\t{\n\t\tforeach($environments as $env => $paths)\n\t\t{\n\t\t\t// normalize to an array\n\t\t\tif (is_string($paths))\n\t\t\t{\n\t\t\t\t$paths = array($paths);\n\t\t\t}\n\n\t\t\tforeach($paths as $path)\n\t\t\t{\n\t\t\t\t// Convert wild-cards to RegEx\n\t\t\t\t$path = str_replace(array(':any', '*'), '.*', str_replace(':num', '[0-9]+', $path));\n\n\t\t\t\t// Does the RegEx match?\n\t\t\t\tif (!empty($_SERVER['SERVER_NAME']) AND preg_match('#^'.$path.'$#', $_SERVER['SERVER_NAME']))\n\t\t\t\t{\n\t\t\t\t\tdefine('ENVIRONMENT', $env);\n\t\t\t\t\tbreak 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!defined('ENVIRONMENT'))\n\t{\n\t\tdefine('ENVIRONMENT', 'development');\n\t}\n}\n\t\n\n/*\n *---------------------------------------------------------------\n * ERROR REPORTING\n *---------------------------------------------------------------\n *\n * Different environments will require different levels of error reporting.\n * By default development will show errors but testing and live will hide them.\n */\nif (defined('ENVIRONMENT'))\n{\n\tswitch (ENVIRONMENT)\n\t{\n\t\tcase 'development': case 'testing':\n\t\t\terror_reporting(-1);\n\t\t\tini_set('display_errors', 1);\n\t\tbreak;\n\n\t\tcase 'staging': case 'production':\n\t\t\tini_set('display_errors', 0);\n\t\t\tif (version_compare(PHP_VERSION, '5.3', '>='))\n\t\t\t{\n\t\t\t\terror_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_USER_NOTICE & ~E_USER_DEPRECATED);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\terror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_USER_NOTICE);\n\t\t\t}\n\t\tbreak;\n\n\t\tdefault:\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'The application environment is not set correctly.';\n\t\t\texit(1); // EXIT_ERROR\n\t}\n}\n/*\n *---------------------------------------------------------------\n * SYSTEM FOLDER NAME\n *---------------------------------------------------------------\n *\n * This variable must contain the name of your \"system\" folder.\n * Include the path if the folder is not in the same directory\n * as this file.\n */\n\t$system_path = INSTALL_ROOT.'codeigniter';\n\n/*\n *---------------------------------------------------------------\n * APPLICATION FOLDER NAME\n *---------------------------------------------------------------\n *\n * If you want this front controller to use a different \"application\"\n * folder than the default one you can set its name here. The folder\n * can also be renamed or relocated anywhere on your server. If\n * you do, use a full server path. For more info please see the user guide:\n * http://codeigniter.com/user_guide/general/managing_apps.html\n *\n * NO TRAILING SLASH!\n */\n\t$application_folder = INSTALL_ROOT.'application';\n\n/*\n *---------------------------------------------------------------\n * VIEW FOLDER NAME\n *---------------------------------------------------------------\n *\n * If you want to move the view folder out of the application\n * folder set the path to the folder here. The folder can be renamed\n * and relocated anywhere on your server. If blank, it will default\n * to the standard location inside your application folder. If you\n * do move this, use the full server path to this folder.\n *\n * NO TRAILING SLASH!\n */\n\t$view_folder = '';\n\n\n/*\n * --------------------------------------------------------------------\n * DEFAULT CONTROLLER\n * --------------------------------------------------------------------\n *\n * Normally you will set your default controller in the routes.php file.\n * You can, however, force a custom routing by hard-coding a\n * specific controller class/function here. For most applications, you\n * WILL NOT set your routing here, but it's an option for those\n * special instances where you might want to override the standard\n * routing in a specific front controller that shares a common CI installation.\n *\n * IMPORTANT: If you set the routing here, NO OTHER controller will be\n * callable. In essence, this preference limits your application to ONE\n * specific controller. Leave the function name blank if you need\n * to call functions dynamically via the URI.\n *\n * Un-comment the $routing array below to use this feature\n */\n\t// The directory name, relative to the \"controllers\" folder.  Leave blank\n\t// if your controller is not in a sub-folder within the \"controllers\" folder\n\t// $routing['directory'] = '';\n\n\t// The controller class file name.  Example:  mycontroller\n\t// $routing['controller'] = '';\n\n\t// The controller function you wish to be called.\n\t// $routing['function']\t= '';\n\n\n/*\n * -------------------------------------------------------------------\n *  CUSTOM CONFIG VALUES\n * -------------------------------------------------------------------\n *\n * The $assign_to_config array below will be passed dynamically to the\n * config class when initialized. This allows you to set custom config\n * items or override any default config values found in the config.php file.\n * This can be handy as it permits you to share one application between\n * multiple front controller files, with each file containing different\n * config values.\n *\n * Un-comment the $assign_to_config array below to use this feature\n */\n\t// $assign_to_config['name_of_config_item'] = 'value of config item';\n\n\n\n// --------------------------------------------------------------------\n// END OF USER CONFIGURABLE SETTINGS.  DO NOT EDIT BELOW THIS LINE\n// --------------------------------------------------------------------\n\n/*\n * ---------------------------------------------------------------\n *  Resolve the system path for increased reliability\n * ---------------------------------------------------------------\n */\n\n\t// Set the current directory correctly for CLI requests\n\tif (defined('STDIN'))\n\t{\n\t\tchdir(dirname(__FILE__));\n\t}\n\n\tif (($_temp = realpath($system_path)) !== FALSE)\n\t{\n\t\t$system_path = $_temp.'/';\n\t}\n\telse\n\t{\n\t\t// Ensure there's a trailing slash\n\t\t$system_path = rtrim($system_path, '/').'/';\n\t}\n\n\t// Is the system path correct?\n\tif ( ! is_dir($system_path))\n\t{\n\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\techo 'Your system folder path does not appear to be set correctly. Please open the following file and correct this: '.pathinfo(__FILE__, PATHINFO_BASENAME);\n\t\texit(3); // EXIT_CONFIG\n\t}\n\n/*\n * -------------------------------------------------------------------\n *  Now that we know the path, set the main path constants\n * -------------------------------------------------------------------\n */\n\t// The name of THIS file\n\tdefine('SELF', pathinfo(__FILE__, PATHINFO_BASENAME));\n\n\t// Path to the system folder\n\tdefine('BASEPATH', str_replace('\\\\', '/', $system_path));\n\n\t// Path to the front controller (this file)\n\tdefine('FCPATH', dirname(__FILE__).'/');\n\n\t// Name of the \"system folder\"\n\tdefine('SYSDIR', trim(strrchr(trim(BASEPATH, '/'), '/'), '/'));\n\n\t// The path to the \"application\" folder\n\tif (is_dir($application_folder))\n\t{\n\t\tif (($_temp = realpath($application_folder)) !== FALSE)\n\t\t{\n\t\t\t$application_folder = $_temp;\n\t\t}\n\n\t\tdefine('APPPATH', $application_folder.DIRECTORY_SEPARATOR);\n\t}\n\telse\n\t{\n\t\tif ( ! is_dir(BASEPATH.$application_folder.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'Your application folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;\n\t\t\texit(3); // EXIT_CONFIG\n\t\t}\n\n\t\tdefine('APPPATH', BASEPATH.$application_folder.DIRECTORY_SEPARATOR);\n\t}\n\n\t// The path to the \"views\" folder\n\tif ( ! is_dir($view_folder))\n\t{\n\t\tif ( ! empty($view_folder) && is_dir(APPPATH.$view_folder.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\t$view_folder = APPPATH.$view_folder;\n\t\t}\n\t\telseif ( ! is_dir(APPPATH.'views'.DIRECTORY_SEPARATOR))\n\t\t{\n\t\t\theader('HTTP/1.1 503 Service Unavailable.', TRUE, 503);\n\t\t\techo 'Your view folder path does not appear to be set correctly. Please open the following file and correct this: '.SELF;\n\t\t\texit(3); // EXIT_CONFIG\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$view_folder = APPPATH.'views';\n\t\t}\n\t}\n\n\tif (($_temp = realpath($view_folder)) !== FALSE)\n\t{\n\t\t$view_folder = $_temp.DIRECTORY_SEPARATOR;\n\t}\n\telse\n\t{\n\t\t$view_folder = rtrim($view_folder, '/\\\\').DIRECTORY_SEPARATOR;\n\t}\n\n\tdefine('VIEWPATH', $view_folder);\n\n/*\n * --------------------------------------------------------------------\n * LOAD THE BOOTSTRAP FILE\n * --------------------------------------------------------------------\n *\n * And away we go...\n */\nrequire_once BASEPATH.'core/CodeIgniter.php';\n"], "filenames": ["fuel/modules/fuel/config/fuel_constants.php", "fuel/modules/fuel/libraries/Asset.php", "index.php"], "buggy_code_start_loc": [73, 504, 113], "buggy_code_end_loc": [74, 505, 114], "fixing_code_start_loc": [73, 504, 113], "fixing_code_end_loc": [74, 505, 114], "type": "CWE-74", "message": "A host header attack vulnerability exists in FUEL CMS 1.5.0 through fuel/modules/fuel/config/fuel_constants.php and fuel/modules/fuel/libraries/Asset.php. An attacker can use a man in the middle attack such as phishing.", "other": {"cve": {"id": "CVE-2021-38290", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-09T11:15:07.377", "lastModified": "2021-08-17T12:18:44.097", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A host header attack vulnerability exists in FUEL CMS 1.5.0 through fuel/modules/fuel/config/fuel_constants.php and fuel/modules/fuel/libraries/Asset.php. An attacker can use a man in the middle attack such as phishing."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de ataque al encabezado del host en FUEL CMS versi\u00f3n 1.5.0, mediante los archivos fuel/modules/fuel/config/fuel_constants.php y fuel/modules/fuel/libraries/Asset.php. Un atacante puede usar un ataque de tipo man in the middle como el phishing"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thedaylightstudio:fuel_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.5.0", "matchCriteriaId": "7F49387D-17F4-4155-BDDD-65D7770D7E72"}]}]}], "references": [{"url": "https://github.com/daylightstudio/FUEL-CMS/commit/8a0d88ad6869623c90e24b3b2ea33352049d39a7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/daylightstudio/FUEL-CMS/issues/580", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/daylightstudio/FUEL-CMS/commit/8a0d88ad6869623c90e24b3b2ea33352049d39a7"}}