{"buggy_code": ["<?php\n/* Copyright (C) 2001-2007\tRodolphe Quiedeville\t<rodolphe@quiedeville.org>\n * Copyright (C) 2004-2014\tLaurent Destailleur\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t\t<regis.houssin@capnetworks.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t\t<acianfa@free.fr>\n * Copyright (C) 2007-2011\tJean Heimburger\t\t\t<jean@tiaris.info>\n * Copyright (C) 2010-2013\tJuanjo Menent\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2012       Cedric Salvador         <csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2014\tCedric GROSS\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2011-2017\tAlexandre Spangaro\t\t<aspangaro@zendsi.com>\n * Copyright (C) 2014\t\tHenry Florian\t\t\t<florian.henry@open-concept.pro>\n * Copyright (C) 2014-2016\tPhilippe Grand\t\t\t<philippe.grand@atoo-net.com>\n * Copyright (C) 2014\t\tIon agorria\t\t\t    <ion@agorria.com>\n * Copyright (C) 2016-2018\tFerran Marcet\t\t\t<fmarcet@2byte.es>\n * Copyright (C) 2017\t\tGustavo Novaro\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/product/class/product.class.php\n *\t\\ingroup    produit\n *\t\\brief      File of class to manage predefined products or services\n */\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/productbatch.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\n/**\n * Class to manage products or services\n */\nclass Product extends CommonObject\n{\n\tpublic $element='product';\n\tpublic $table_element='product';\n\tpublic $fk_element='fk_product';\n\tprotected $childtables=array('supplier_proposaldet', 'propaldet','commandedet','facturedet','contratdet','facture_fourn_det','commande_fournisseurdet');    // To test if we can delete object\n\tpublic $ismultientitymanaged = 1;\t// 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected $table_ref_field = 'ref';\n\n\tpublic $regeximgext='\\.gif|\\.jpg|\\.jpeg|\\.png|\\.bmp|\\.xpm|\\.xbm'; // See also into images.lib.php\n\n\t/*\n\t * @deprecated\n\t * @see label\n\t */\n\tpublic $libelle;\n\t/**\n\t * Product label\n\t * @var string\n\t */\n\tpublic $label;\n\n\t/**\n     \t* Product descripion\n     \t* @var string\n     \t*/\n\tpublic $description;\n\n\t/**\n\t * Check TYPE constants\n\t * @var int\n\t */\n\tpublic $type = self::TYPE_PRODUCT;\n\n\t/**\n\t * Selling price\n\t * @var float\n\t */\n\tpublic $price;\t\t\t// Price net\n\n\t/**\n\t * Price with tax\n\t * @var float\n\t */\n\tpublic $price_ttc;\n\n\t/**\n\t * Minimum price net\n\t * @var float\n\t */\n\tpublic $price_min;\n\n\t/**\n\t * Minimum price with tax\n\t * @var float\n\t */\n\tpublic $price_min_ttc;\n\n\t/*\n\t * Base price ('TTC' for price including tax or 'HT' for net price)\n\t * @var float\n\t */\n\tpublic $price_base_type;\n\n\t//! Arrays for multiprices\n\tpublic $multiprices=array();\n\tpublic $multiprices_ttc=array();\n\tpublic $multiprices_base_type=array();\n\tpublic $multiprices_min=array();\n\tpublic $multiprices_min_ttc=array();\n\tpublic $multiprices_tva_tx=array();\n\tpublic $multiprices_recuperableonly=array();\n\n\t//! Price by quantity arrays\n\tpublic $price_by_qty;\n\tpublic $prices_by_qty=array();\n\tpublic $prices_by_qty_id=array();\n\tpublic $prices_by_qty_list=array();\n\n\t//! Default VAT code for product (link to code into llx_c_tva but without foreign keys)\n\tpublic $default_vat_code;\n\n\t//! Default VAT rate of product\n\tpublic $tva_tx;\n\n\t//! French VAT NPR (0 or 1)\n    public $tva_npr=0;\n\n\t//! Other local taxes\n\tpublic $localtax1_tx;\n\tpublic $localtax2_tx;\n\tpublic $localtax1_type;\n\tpublic $localtax2_type;\n\n\t/**\n\t * Stock real\n\t * @var int\n\t */\n\tpublic $stock_reel = 0;\n\n\t/**\n\t * Stock virtual\n\t * @var int\n\t */\n\tpublic $stock_theorique;\n\n\t/**\n\t * Cost price\n\t * @var float\n\t */\n\tpublic $cost_price;\n\n\t//! Average price value for product entry into stock (PMP)\n\tpublic $pmp;\n\n\t/**\n\t * Stock alert\n\t * @var int\n\t */\n\tpublic $seuil_stock_alerte=0;\n\n\t/**\n\t * Ask for replenishment when $desiredstock < $stock_reel\n\t */\n\tpublic $desiredstock=0;\n\n\t/*\n\t * Service expiration\n\t */\n\tpublic $duration_value;\n\n\t/**\n\t * Exoiration unit\n\t */\n\tpublic $duration_unit;\n\n\t/**\n\t * Status indicates whether the product is on sale '1' or not '0'\n\t * @var int\n\t */\n\tpublic $status=0;\n\n\t/**\n\t * Status indicate whether the product is available for purchase '1' or not '0'\n\t * @var int\n\t */\n\tpublic $status_buy=0;\n\n\t/**\n\t * Status indicates whether the product is a finished product '1' or a raw material '0'\n\t * @var int\n\t */\n\tpublic $finished;\n\n\t/**\n\t * We must manage lot/batch number, sell-by date and so on : '1':yes '0':no\n\t * @var int\n\t */\n\tpublic $status_batch=0;\n\n\t/**\n\t * Customs code\n\t * @var\n\t */\n\tpublic $customcode;\n\n\t/**\n\t * Product URL\n\t * @var string\n\t */\n\tpublic $url;\n\n\t//! Unites de mesure\n\tpublic $weight;\n\tpublic $weight_units;\n\tpublic $length;\n\tpublic $length_units;\n\tpublic $surface;\n\tpublic $surface_units;\n\tpublic $volume;\n\tpublic $volume_units;\n\n\tpublic $accountancy_code_sell;\n\tpublic $accountancy_code_sell_intra;\n\tpublic $accountancy_code_sell_export;\n\tpublic $accountancy_code_buy;\n\n\t/**\n\t * Main barcode\n\t * barcode value\n\t * @var\n\t */\n\tpublic $barcode;\n\n\t/**\n\t * Additional barcodes (Some products have different barcodes according to the country of origin of manufacture)\n\t * @var array\n\t */\n\tpublic $barcodes_extra=array();\n\n\tpublic $stats_propale=array();\n\tpublic $stats_commande=array();\n\tpublic $stats_contrat=array();\n\tpublic $stats_facture=array();\n    public $stats_commande_fournisseur=array();\n\n\tpublic $multilangs=array();\n\n\t//! Taille de l'image\n\tpublic $imgWidth;\n\tpublic $imgHeight;\n\n\tpublic $date_creation;\n\tpublic $date_modification;\n\n\t//! Id du fournisseur\n\tpublic $product_fourn_id;\n\n\t//! Product ID already linked to a reference supplier\n\tpublic $product_id_already_linked;\n\n\tpublic $nbphoto=0;\n\n\t//! Contains detail of stock of product into each warehouse\n\tpublic $stock_warehouse=array();\n\n\tpublic $oldcopy;\n\n    public $fk_price_expression;\n\n    /* To store supplier price found */\n\tpublic $fourn_pu;\n\tpublic $fourn_price_base_type;\n\tpublic $fourn_socid;\n\n\t/**\n\t * @deprecated\n\t * @see ref_supplier\n\t */\n\tpublic $ref_fourn;\n\tpublic $ref_supplier;\n\n\t/**\n\t * Unit code ('km', 'm', 'l', 'p', ...)\n\t * @var string\n\t */\n\tpublic $fk_unit;\n\n\t/**\n\t * Price is generated using multiprice rules\n\t * @var int\n\t */\n\tpublic $price_autogen = 0;\n\n\n\t/**\n\t * Regular product\n\t */\n\tconst TYPE_PRODUCT = 0;\n\t/**\n\t * Service\n\t */\n\tconst TYPE_SERVICE = 1;\n\t/**\n\t * Advanced feature: assembly kit\n\t */\n\tconst TYPE_ASSEMBLYKIT = 2;\n\t/**\n\t * Advanced feature: stock kit\n\t */\n\tconst TYPE_STOCKKIT = 3;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t *  @param      DoliDB\t\t$db      Database handler\n\t */\n\tfunction __construct($db)\n\t{\n\t\tglobal $langs;\n\n\t\t$this->db = $db;\n\t\t$this->canvas = '';\n\t}\n\n\t/**\n\t *    Check that ref and label are ok\n\t *\n\t *    @return     int         >1 if OK, <=0 if KO\n\t */\n\tfunction check()\n\t{\n\t\t$this->ref = dol_sanitizeFileName(stripslashes($this->ref));\n\n\t\t$err = 0;\n\t\tif (dol_strlen(trim($this->ref)) == 0)\n\t\t$err++;\n\n\t\tif (dol_strlen(trim($this->label)) == 0)\n\t\t$err++;\n\n\t\tif ($err > 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *\tInsert product into database\n\t *\n\t *\t@param\tUser\t$user     \t\tUser making insert\n\t *  @param\tint\t\t$notrigger\t\tDisable triggers\n\t *\t@return int\t\t\t     \t\tId of product/service if OK, < 0 if KO\n\t */\n\tfunction create($user,$notrigger=0)\n\t{\n\t\tglobal $conf, $langs;\n\n        \t$error=0;\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->price_ttc=price2num($this->price_ttc);\n\t\t$this->price=price2num($this->price);\n\t\t$this->price_min_ttc=price2num($this->price_min_ttc);\n\t\t$this->price_min=price2num($this->price_min);\n\t\tif (empty($this->tva_tx))    \t$this->tva_tx = 0;\n\t\tif (empty($this->tva_npr))    \t$this->tva_npr = 0;\n\t\t//Local taxes\n\t\tif (empty($this->localtax1_tx)) $this->localtax1_tx = 0;\n\t\tif (empty($this->localtax2_tx)) $this->localtax2_tx = 0;\n\t\tif (empty($this->localtax1_type)) $this->localtax1_type = '0';\n\t\tif (empty($this->localtax2_type)) $this->localtax2_type = '0';\n\n\t\tif (empty($this->price))     \t$this->price = 0;\n\t\tif (empty($this->price_min)) \t$this->price_min = 0;\n\n\t\t// Price by quantity\n\t\tif (empty($this->price_by_qty)) \t$this->price_by_qty = 0;\n\n\t\tif (empty($this->status))    \t$this->status = 0;\n\t\tif (empty($this->status_buy))   $this->status_buy = 0;\n\n\t\t$price_ht=0;\n\t\t$price_ttc=0;\n\t\t$price_min_ht=0;\n\t\t$price_min_ttc=0;\n\n\t\t//\n\t\tif ($this->price_base_type == 'TTC' && $this->price_ttc > 0)\n\t\t{\n\t\t\t$price_ttc = price2num($this->price_ttc,'MU');\n\t\t\t$price_ht = price2num($this->price_ttc / (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif ($this->price_base_type != 'TTC' && $this->price > 0)\n\t\t{\n\t\t\t$price_ht = price2num($this->price,'MU');\n\t\t\t$price_ttc = price2num($this->price * (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min_ttc > 0) && ($this->price_base_type == 'TTC'))\n\t\t{\n\t\t\t$price_min_ttc = price2num($this->price_min_ttc,'MU');\n\t\t\t$price_min_ht = price2num($this->price_min_ttc / (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min > 0) && ($this->price_base_type != 'TTC'))\n\t\t{\n\t\t\t$price_min_ht = price2num($this->price_min,'MU');\n\t\t\t$price_min_ttc = price2num($this->price_min * (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_sell= trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra= trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export= trim($this->accountancy_code_sell_export);\n\n\t\t// Barcode value\n\t\t$this->barcode=trim($this->barcode);\n\n\t\t// Check parameters\n\t\tif (empty($this->label))\n\t\t{\n\t\t\t$this->error='ErrorMandatoryParametersNotProvided';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($this->ref))\n\t\t{\n\t\t\t// Load object modCodeProduct\n\t\t\t$module=(! empty($conf->global->PRODUCT_CODEPRODUCT_ADDON)?$conf->global->PRODUCT_CODEPRODUCT_ADDON:'mod_codeproduct_leopard');\n\t\t\tif ($module != 'mod_codeproduct_leopard')\t// Do not load module file for leopard\n\t\t\t{\n\t\t\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php')\n\t\t\t\t{\n\t\t\t\t\t$module = substr($module, 0, dol_strlen($module)-4);\n\t\t\t\t}\n\t\t\t\tdol_include_once('/core/modules/product/'.$module.'.php');\n\t\t\t\t$modCodeProduct = new $module;\n\t\t\t\tif (! empty($modCodeProduct->code_auto))\n\t\t\t\t{\n\t\t\t\t\t$this->ref = $modCodeProduct->getNextValue($this,$this->type);\n\t\t\t\t}\n\t\t\t\tunset($modCodeProduct);\n\t\t\t}\n\n\t\t\tif (empty($this->ref))\n\t\t\t{\n\t\t\t\t$this->error='ProductModuleNotSetupForAutoRef';\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create ref=\".$this->ref.\" price=\".$this->price.\" price_ttc=\".$this->price_ttc.\" tva_tx=\".$this->tva_tx.\" price_base_type=\".$this->price_base_type, LOG_DEBUG);\n\n\t\t$now=dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// For automatic creation during create action (not used by Dolibarr GUI, can be used by scripts)\n\t\tif ($this->barcode == -1) $this->barcode = $this->get_barcode($this,$this->barcode_type_code);\n\n\t\t// Check more parameters\n\t\t// If error, this->errors[] is filled\n\t\t$result = $this->verify();\n\n\t\tif ($result >= 0)\n\t\t{\n\t\t\t$sql = \"SELECT count(*) as nb\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql.= \" WHERE entity IN (\".getEntity('product').\")\";\n\t\t\t$sql.= \" AND ref = '\" .$this->db->escape($this->ref).\"'\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\tif ($obj->nb == 0)\n\t\t\t\t{\n\t\t\t\t\t// Produit non deja existant\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product (\";\n\t\t\t\t\t$sql.= \"datec\";\n\t\t\t\t\t$sql.= \", entity\";\n\t\t\t\t\t$sql.= \", ref\";\n\t\t\t\t\t$sql.= \", ref_ext\";\n\t\t\t\t\t$sql.= \", price_min\";\n\t\t\t\t\t$sql.= \", price_min_ttc\";\n\t\t\t\t\t$sql.= \", label\";\n\t\t\t\t\t$sql.= \", fk_user_author\";\n\t\t\t\t\t$sql.= \", fk_product_type\";\n\t\t\t\t\t$sql.= \", price\";\n\t\t\t\t\t$sql.= \", price_ttc\";\n\t\t\t\t\t$sql.= \", price_base_type\";\n\t\t\t\t\t$sql.= \", tobuy\";\n\t\t\t\t\t$sql.= \", tosell\";\n\t\t\t\t\t$sql.= \", accountancy_code_buy\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell_intra\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell_export\";\n\t\t\t\t\t$sql.= \", canvas\";\n\t\t\t\t\t$sql.= \", finished\";\n\t\t\t\t\t$sql.= \", tobatch\";\n\t\t\t\t\t$sql.= \", fk_unit\";\n\t\t\t\t\t$sql.= \") VALUES (\";\n\t\t\t\t\t$sql.= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t\t$sql.= \", \".$conf->entity;\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->ref).\"'\";\n\t\t\t\t\t$sql.= \", \".(! empty($this->ref_ext)?\"'\".$this->db->escape($this->ref_ext).\"'\":\"null\");\n\t\t\t\t\t$sql.= \", \".price2num($price_min_ht);\n\t\t\t\t\t$sql.= \", \".price2num($price_min_ttc);\n\t\t\t\t\t$sql.= \", \".(! empty($this->label)?\"'\".$this->db->escape($this->label).\"'\":\"null\");\n\t\t\t\t\t$sql.= \", \".$user->id;\n\t\t\t\t\t$sql.= \", \".$this->type;\n\t\t\t\t\t$sql.= \", \".price2num($price_ht);\n\t\t\t\t\t$sql.= \", \".price2num($price_ttc);\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->price_base_type).\"'\";\n\t\t\t\t\t$sql.= \", \".$this->status;\n\t\t\t\t\t$sql.= \", \".$this->status_buy;\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->canvas).\"'\";\n\t\t\t\t\t$sql.= \", \".((! isset($this->finished) || $this->finished < 0 || $this->finished == '') ? 'null' : (int) $this->finished);\n\t\t\t\t\t$sql.= \", \".((empty($this->status_batch) || $this->status_batch < 0)? '0':$this->status_batch);\n\t\t\t\t\t$sql.= \", \".(!$this->fk_unit ? 'NULL' : $this->fk_unit);\n\t\t\t\t\t$sql.= \")\";\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::Create\", LOG_DEBUG);\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif ( $result )\n\t\t\t\t\t{\n\t\t\t\t\t\t$id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product\");\n\n\t\t\t\t\t\tif ($id > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->id\t\t\t\t= $id;\n\t\t\t\t\t\t\t$this->price\t\t\t= $price_ht;\n\t\t\t\t\t\t\t$this->price_ttc\t\t= $price_ttc;\n\t\t\t\t\t\t\t$this->price_min\t\t= $price_min_ht;\n\t\t\t\t\t\t\t$this->price_min_ttc\t= $price_min_ttc;\n\n\t\t\t\t\t\t\t$result = $this->_log_price($user);\n\t\t\t\t\t\t\tif ($result > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($this->update($id, $user, true, 'add') <= 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->error='ErrorFailedToGetInsertedId';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Product already exists with this ref\n\t\t\t\t\t$langs->load(\"products\");\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->error = \"ErrorProductAlreadyExists\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t}\n\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('PRODUCT_CREATE',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n        }\n        else\n       {\n            $this->db->rollback();\n            dol_syslog(get_class($this).\"::Create fails verify \".join(',',$this->errors), LOG_WARNING);\n            return -3;\n        }\n\n\t}\n\n\n    /**\n     *    Check properties of product are ok (like name, barcode, ...).\n     *    All properties must be already loaded on object (this->barcode, this->barcode_type_code, ...).\n     *\n     *    @return     int\t\t0 if OK, <0 if KO\n     */\n    function verify()\n    {\n        $this->errors=array();\n\n        $result = 0;\n        $this->ref = trim($this->ref);\n\n        if (! $this->ref)\n        {\n            $this->errors[] = 'ErrorBadRef';\n            $result = -2;\n        }\n\n        $rescode = $this->check_barcode($this->barcode, $this->barcode_type_code);\n        if ($rescode)\n        {\n        \tif ($rescode == -1)\n        \t{\n        \t\t$this->errors[] = 'ErrorBadBarCodeSyntax';\n        \t}\n        \telseif ($rescode == -2)\n        \t{\n        \t\t$this->errors[] = 'ErrorBarCodeRequired';\n        \t}\n        \telseif ($rescode == -3)\n        \t{\n        \t\t// Note: Common usage is to have barcode unique. For variants, we should have a different barcode.\n        \t\t$this->errors[] = 'ErrorBarCodeAlreadyUsed';\n        \t}\n\n        \t$result = -3;\n        }\n\n        return $result;\n    }\n\n    /**\n     *  Check barcode\n     *\n     *\t@param\tstring\t$valuetotest\tValue to test\n     *  @param\tstring\t$typefortest\tType of barcode (ISBN, EAN, ...)\n     *  @return int\t\t\t\t\t\t0 if OK\n     * \t\t\t\t\t\t\t\t\t-1 ErrorBadBarCodeSyntax\n     * \t\t\t\t\t\t\t\t\t-2 ErrorBarCodeRequired\n     * \t\t\t\t\t\t\t\t\t-3 ErrorBarCodeAlreadyUsed\n     */\n    function check_barcode($valuetotest,$typefortest)\n    {\n        global $conf;\n        if (! empty($conf->barcode->enabled) && ! empty($conf->global->BARCODE_PRODUCT_ADDON_NUM))\n        {\n        \t$module=strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\n            $dirsociete=array_merge(array('/core/modules/barcode/'),$conf->modules_parts['barcode']);\n            foreach ($dirsociete as $dirroot)\n            {\n                $res=dol_include_once($dirroot.$module.'.php');\n                if ($res) break;\n            }\n\n            $mod = new $module();\n\n            dol_syslog(get_class($this).\"::check_barcode value=\".$valuetotest.\" type=\".$typefortest.\" module=\".$module);\n            $result = $mod->verif($this->db, $valuetotest, $this, 0, $typefortest);\n            return $result;\n        }\n        else\n\t\t{\n            return 0;\n        }\n    }\n\n\t/**\n\t *\tUpdate a record into database.\n\t *  If batch flag is set to on, we create records into llx_product_batch\n\t *\n\t *\t@param\tint\t\t$id         Id of product\n\t *\t@param  User\t$user       Object user making update\n\t *\t@param\tint\t\t$notrigger\tDisable triggers\n\t *\t@param\tstring\t$action\t\tCurrent action for hookmanager ('add' or 'update')\n\t *\t@return int         \t\t1 if OK, -1 if ref already exists, -2 if other error\n\t */\n\tfunction update($id, $user, $notrigger=false, $action='update')\n\t{\n\t\tglobal $langs, $conf, $hookmanager;\n\n\t\t$error=0;\n\n\t\t// Check parameters\n\t\tif (! $this->label) $this->label = 'MISSING LABEL';\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->description = trim($this->description);\n\t\t$this->note = (isset($this->note) ? trim($this->note) : null);\n\t\t$this->weight = price2num($this->weight);\n\t\t$this->weight_units = trim($this->weight_units);\n\t\t$this->length = price2num($this->length);\n\t\t$this->length_units = trim($this->length_units);\n\t\t$this->width = price2num($this->width);\n\t\t$this->width_units = trim($this->width_units);\n\t\t$this->height = price2num($this->height);\n\t\t$this->height_units = trim($this->height_units);\n\t\t// set unit not defined\n\t\tif ($this->length_units) $this->width_units = $this->length_units;    // Not used yet\n\t\tif ($this->length_units) $this->height_units = $this->length_units;    // Not used yet\n\t\t// Automated compute surface and volume if not filled\n\t\tif (empty($this->surface) && !empty($this->length) && !empty($this->width) && $this->length_units == $this->width_units)\n\t\t{\n\t\t\t$this->surface = $this->length * $this->width;\n\t\t\t$this->surface_units = measuring_units_squared($this->length_units);\n\t\t}\n\t\tif (empty($this->volume) && !empty($this->surface_units) && !empty($this->height) && $this->length_units == $this->height_units)\n\t\t{\n\t\t\t$this->volume =  $this->surface * $this->height;\n\t\t\t$this->volume_units = measuring_units_cubed($this->height_units);\n\t\t}\n\n\t\t$this->surface = price2num($this->surface);\n\t\t$this->surface_units = trim($this->surface_units);\n\t\t$this->volume = price2num($this->volume);\n\t\t$this->volume_units = trim($this->volume_units);\n\t\tif (empty($this->tva_tx))    \t\t\t$this->tva_tx = 0;\n\t\tif (empty($this->tva_npr))    \t\t\t$this->tva_npr = 0;\n\t\tif (empty($this->localtax1_tx))\t\t\t$this->localtax1_tx = 0;\n\t\tif (empty($this->localtax2_tx))\t\t\t$this->localtax2_tx = 0;\n\t\tif (empty($this->localtax1_type))\t\t$this->localtax1_type = '0';\n\t\tif (empty($this->localtax2_type))\t\t$this->localtax2_type = '0';\n\t\tif (empty($this->status))\t\t\t\t$this->status = 0;\n\t\tif (empty($this->status_buy))\t\t\t$this->status_buy = 0;\n\n        if (empty($this->country_id))           $this->country_id = 0;\n\n        // Barcode value\n        $this->barcode=trim($this->barcode);\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_sell= trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra= trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export= trim($this->accountancy_code_sell_export);\n\n\n        $this->db->begin();\n\n        // Check name is required and codes are ok or unique.\n        // If error, this->errors[] is filled\n        if ($action != 'add')\n        {\n        \t$result = $this->verify();\t// We don't check when update called during a create because verify was already done\n        }\n\n        if ($result >= 0)\n        {\n            if (empty($this->oldcopy))\n            {\n                $org=new self($this->db);\n                $org->fetch($this->id);\n                $this->oldcopy=$org;\n            }\n\n            // Test if batch management is activated on existing product\n            // If yes, we create missing entries into product_batch\n            if ($this->hasbatch() && !$this->oldcopy->hasbatch())\n            {\n                //$valueforundefinedlot = 'Undefined';  // In previous version, 39 and lower\n                $valueforundefinedlot = '000000';\n\n                dol_syslog(\"Flag batch of product id=\".$this->id.\" is set to ON, so we will create missing records into product_batch\");\n\n                $this->load_stock();\n                foreach ($this->stock_warehouse as $idW => $ObjW)   // For each warehouse where we have stocks defined for this product (for each lines in product_stock)\n                {\n                    $qty_batch = 0;\n                    foreach ($ObjW->detail_batch as $detail)    // Each lines of detail in product_batch of the current $ObjW = product_stock\n                    {\n                        if ($detail->batch == $valueforundefinedlot || $detail->batch == 'Undefined')\n                        {\n                            // We discard this line, we will create it later\n                            $sqlclean=\"DELETE FROM \".MAIN_DB_PREFIX.\"product_batch WHERE batch in('Undefined', '\".$valueforundefinedlot.\"') AND fk_product_stock = \".$ObjW->id;\n                            $result = $this->db->query($sqlclean);\n                            if (! $result)\n                            {\n                                dol_print_error($this->db);\n                                exit;\n                            }\n                            continue;\n                        }\n\n                        $qty_batch += $detail->qty;\n                    }\n                    // Quantities in batch details are not same as stock quantity,\n                    // so we add a default batch record to complete and get same qty in parent and child table\n                    if ($ObjW->real <> $qty_batch)\n                    {\n                        $ObjBatch = new Productbatch($this->db);\n                        $ObjBatch->batch = $valueforundefinedlot;\n                        $ObjBatch->qty = ($ObjW->real - $qty_batch);\n                        $ObjBatch->fk_product_stock = $ObjW->id;\n\n                        if ($ObjBatch->create($user,1) < 0)\n                        {\n                            $error++;\n                            $this->errors=$ObjBatch->errors;\n                        }\n                    }\n                }\n            }\n\n\t        // For automatic creation\n\t        if ($this->barcode == -1) $this->barcode = $this->get_barcode($this,$this->barcode_type_code);\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql.= \" SET label = '\" . $this->db->escape($this->label) .\"'\";\n\t\t\t$sql.= \", ref = '\" . $this->db->escape($this->ref) .\"'\";\n\t\t\t$sql.= \", ref_ext = \".(! empty($this->ref_ext)?\"'\".$this->db->escape($this->ref_ext).\"'\":\"null\");\n\t\t\t$sql.= \", default_vat_code = \".($this->default_vat_code ? \"'\".$this->db->escape($this->default_vat_code).\"'\" : \"null\");\n\t\t\t$sql.= \", tva_tx = \" . $this->tva_tx;\n\t\t\t$sql.= \", recuperableonly = \" . $this->tva_npr;\n\t\t\t$sql.= \", localtax1_tx = \" . $this->localtax1_tx;\n\t\t\t$sql.= \", localtax2_tx = \" . $this->localtax2_tx;\n\t\t\t$sql.= \", localtax1_type = \" . ($this->localtax1_type!=''?\"'\".$this->db->escape($this->localtax1_type).\"'\":\"'0'\");\n\t\t\t$sql.= \", localtax2_type = \" . ($this->localtax2_type!=''?\"'\".$this->db->escape($this->localtax2_type).\"'\":\"'0'\");\n\n\t\t\t$sql.= \", barcode = \". (empty($this->barcode)?\"null\":\"'\".$this->db->escape($this->barcode).\"'\");\n\t\t\t$sql.= \", fk_barcode_type = \". (empty($this->barcode_type)?\"null\":$this->db->escape($this->barcode_type));\n\n\t\t\t$sql.= \", tosell = \" . $this->status;\n\t\t\t$sql.= \", tobuy = \" . $this->status_buy;\n\t\t\t$sql.= \", tobatch = \" . ((empty($this->status_batch) || $this->status_batch < 0) ? '0' : $this->status_batch);\n\t\t\t$sql.= \", finished = \" . ((! isset($this->finished) || $this->finished < 0) ? \"null\" : (int) $this->finished);\n\t\t\t$sql.= \", weight = \" . ($this->weight!='' ? \"'\".$this->db->escape($this->weight).\"'\" : 'null');\n\t\t\t$sql.= \", weight_units = \" . ($this->weight_units!='' ? \"'\".$this->db->escape($this->weight_units).\"'\": 'null');\n\t\t\t$sql.= \", length = \" . ($this->length!='' ? \"'\".$this->db->escape($this->length).\"'\" : 'null');\n\t\t\t$sql.= \", length_units = \" . ($this->length_units!='' ? \"'\".$this->db->escape($this->length_units).\"'\" : 'null');\n\t\t\t$sql.= \", width= \" . ($this->width!='' ? \"'\".$this->db->escape($this->width).\"'\" : 'null');\n\t\t\t$sql.= \", width_units = \" . ($this->width_units!='' ? \"'\".$this->db->escape($this->width_units).\"'\" : 'null');\n\t\t\t$sql.= \", height = \" . ($this->height!='' ? \"'\".$this->db->escape($this->height).\"'\" : 'null');\n\t\t\t$sql.= \", height_units = \" . ($this->height_units!='' ? \"'\".$this->db->escape($this->height_units).\"'\" : 'null');\n\t\t\t$sql.= \", surface = \" . ($this->surface!='' ? \"'\".$this->db->escape($this->surface).\"'\" : 'null');\n\t\t\t$sql.= \", surface_units = \" . ($this->surface_units!='' ? \"'\".$this->db->escape($this->surface_units).\"'\" : 'null');\n\t\t\t$sql.= \", volume = \" . ($this->volume!='' ? \"'\".$this->db->escape($this->volume).\"'\" : 'null');\n\t\t\t$sql.= \", volume_units = \" . ($this->volume_units!='' ? \"'\".$this->db->escape($this->volume_units).\"'\" : 'null');\n\t\t\t$sql.= \", fk_default_warehouse = \" . ($this->fk_default_warehouse > 0 ? $this->db->escape($this->fk_default_warehouse) : 'null');\n\t\t\t$sql.= \", seuil_stock_alerte = \" . ((isset($this->seuil_stock_alerte) && $this->seuil_stock_alerte != '') ? \"'\".$this->db->escape($this->seuil_stock_alerte).\"'\" : \"null\");\n\t\t\t$sql.= \", description = '\" . $this->db->escape($this->description) .\"'\";\n\t\t\t$sql.= \", url = \" . ($this->url?\"'\".$this->db->escape($this->url).\"'\":'null');\n\t\t\t$sql.= \", customcode = '\" .        $this->db->escape($this->customcode) .\"'\";\n\t        $sql.= \", fk_country = \" . ($this->country_id > 0 ? $this->country_id : 'null');\n\t        $sql.= \", note = \".(isset($this->note) ? \"'\" .$this->db->escape($this->note).\"'\" : 'null');\n\t\t\t$sql.= \", duration = '\" . $this->db->escape($this->duration_value . $this->duration_unit) .\"'\";\n\t\t\t$sql.= \", accountancy_code_buy = '\" . $this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell= '\" . $this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell_intra= '\" . $this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell_export= '\" . $this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t$sql.= \", desiredstock = \" . ((isset($this->desiredstock) && $this->desiredstock != '') ? $this->desiredstock : \"null\");\n\t\t\t$sql.= \", cost_price = \" . ($this->cost_price != '' ? $this->db->escape($this->cost_price) : 'null');\n\t        $sql.= \", fk_unit= \" . (!$this->fk_unit ? 'NULL' : $this->fk_unit);\n\t        $sql.= \", price_autogen = \" . (!$this->price_autogen ? 0 : 1);\n\t\t\t$sql.= \", fk_price_expression = \".($this->fk_price_expression != 0 ? $this->fk_price_expression : 'NULL');\n\t\t\t$sql.= \", fk_user_modif = \".($user->id > 0 ? $user->id : 'NULL');\n\t\t\t// stock field is not here because it is a denormalized value from product_stock.\n\t\t\t$sql.= \" WHERE rowid = \" . $id;\n\n\t\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->id = $id;\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (! empty($conf->global->MAIN_MULTILANGS))\n\t\t\t\t{\n\t\t\t\t\tif ( $this->setMultiLangs($user) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t\treturn -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$action='update';\n\n\t\t\t\t// Actions on extra fields\n\t\t\t\tif (! $error && empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))\n\t\t\t\t{\n\t\t\t\t\t$result=$this->insertExtraFields();\n\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error && ! $notrigger)\n\t\t\t\t{\n                    // Call trigger\n                    $result=$this->call_trigger('PRODUCT_MODIFY',$user);\n                    if ($result < 0) { $error++; }\n                    // End call triggers\n\t\t\t\t}\n\n\t\t\t\tif (! $error && (is_object($this->oldcopy) && $this->oldcopy->ref !== $this->ref))\n\t\t\t\t{\n\t\t\t\t\t// We remove directory\n\t\t\t\t\tif ($conf->product->dir_output)\n\t\t\t\t\t{\n\t\t\t\t\t\t$olddir = $conf->product->dir_output . \"/\" . dol_sanitizeFileName($this->oldcopy->ref);\n\t\t\t\t\t\t$newdir = $conf->product->dir_output . \"/\" . dol_sanitizeFileName($this->ref);\n\t\t\t\t\t\tif (file_exists($olddir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//include_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\t\t\t\t\t\t\t//$res = dol_move($olddir, $newdir);\n\t\t\t\t\t\t\t// do not use dol_move with directory\n\t\t\t\t\t\t\t$res = @rename($olddir, $newdir);\n\t\t\t\t\t\t\tif (! $res)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    $langs->load(\"errors\");\n\t\t\t\t\t\t\t\t$this->error=$langs->trans('ErrorFailToRenameDir',$olddir,$newdir);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error)\n\t\t\t\t{\n\t\t\t\t\tif ($conf->variants->enabled) {\n\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\n\t\t\t\t\t\t$comb = new ProductCombination($this->db);\n\n\t\t\t\t\t\tforeach ($comb->fetchAllByFkProductParent($this->id) as $currcomb) {\n\t\t\t\t\t\t\t$currcomb->updateProperties($this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -$error;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS')\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\tif (empty($conf->barcode->enabled) || empty($this->barcode)) $this->error=$langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductAlreadyExists\",$this->ref);\n\t\t\t\t\telse $this->error=$langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductBarCodeAlreadyExists\",$this->barcode);\n\t\t\t\t\t$this->errors[]=$this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t$this->errors[]=$this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n        }\n        else\n       {\n            $this->db->rollback();\n            dol_syslog(get_class($this).\"::Update fails verify \".join(',',$this->errors), LOG_WARNING);\n            return -3;\n        }\n\t}\n\n\t/**\n\t *  Delete a product from database (if not used)\n\t *\n\t *\t@param      User\t$user       Product id (usage of this is deprecated, delete should be called without parameters on a fetched object)\n\t *  @param      int     $notrigger  Do not execute trigger\n\t * \t@return\t\tint\t\t\t\t\t< 0 if KO, 0 = Not possible, > 0 if OK\n\t */\n\tfunction delete(User $user, $notrigger=0)\n\t{\n\t\t// Deprecation warning\n\t\tif ($id > 0) {\n\t\t\tdol_syslog(__METHOD__ . \" with parameter is deprecated\", LOG_WARNING);\n\t\t}\n\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\n\t\t$error=0;\n\n\t\t// Clean parameters\n\t\tif (empty($id)) $id=$this->id;\n\t\telse $this->fetch($id);\n\n\t\t// Check parameters\n\t\tif (empty($id))\n\t\t{\n\t\t\t$this->error = \"Object must be fetched before calling delete\";\n\t\t\treturn -1;\n\t\t}\n\t\tif (($this->type == Product::TYPE_PRODUCT && empty($user->rights->produit->supprimer)) || ($this->type == Product::TYPE_SERVICE && empty($user->rights->service->supprimer)))\n\t\t{\n\t\t\t$this->error = \"ErrorForbidden\";\n\t\t\treturn 0;\n\t\t}\n\n\t\t$objectisused = $this->isObjectUsed($id);\n\t\tif (empty($objectisused))\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\tif (! $error && empty($notrigger))\n\t\t\t{\n                // Call trigger\n                $result=$this->call_trigger('PRODUCT_DELETE',$user);\n                if ($result < 0) { $error++; }\n                // End call triggers\n\t\t\t}\n\n\t\t\t// Delete from product_batch on product delete\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.'product_batch';\n\t\t\t\t$sql.= \" WHERE fk_product_stock IN (\";\n\t\t\t\t$sql.= \"SELECT rowid FROM \".MAIN_DB_PREFIX.'product_stock';\n\t\t\t\t$sql.= \" WHERE fk_product = \".$id.\")\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (! $result)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n   \t\t\t// Delete all child tables\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$elements = array('product_fournisseur_price','product_price','product_lang','categorie_product','product_stock','product_customer_price','product_lot');  // product_batch is done before\n    \t\t\tforeach($elements as $table)\n    \t\t\t{\n    \t\t\t\tif (! $error)\n    \t\t\t\t{\n    \t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.$table;\n    \t\t\t\t\t$sql.= \" WHERE fk_product = \".$id;\n\n    \t\t\t\t\t$result = $this->db->query($sql);\n    \t\t\t\t\tif (! $result)\n    \t\t\t\t\t{\n    \t\t\t\t\t\t$error++;\n    \t\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination2ValuePair.class.php';\n\n\t\t\t\t//If it is a parent product, then we remove the association with child products\n\t\t\t\t$prodcomb = new ProductCombination($this->db);\n\n\t\t\t\tif ($prodcomb->deleteByFkProductParent($user, $id) < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting combinations';\n\t\t\t\t}\n\n\t\t\t\t//We also check if it is a child product\n\t\t\t\tif (!$error && ($prodcomb->fetchByFkProductChild($id) > 0) && ($prodcomb->delete($user) < 0)) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting child combination';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete from product_association\n\t\t\tif (!$error){\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql.= \" WHERE fk_product_pere = \".$id.\" OR fk_product_fils = \".$id;\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (! $result)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete product\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$sqlz = \"DELETE FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t\t$sqlz.= \" WHERE rowid = \".$id;\n\n\t\t\t\t$resultz = $this->db->query($sqlz);\n\t\t\t\tif ( ! $resultz )\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t// We remove directory\n\t\t\t\t$ref = dol_sanitizeFileName($this->ref);\n\t\t\t\tif ($conf->product->dir_output)\n\t\t\t\t{\n\t\t\t\t\t$dir = $conf->product->dir_output . \"/\" . $ref;\n\t\t\t\t\tif (file_exists($dir))\n\t\t\t\t\t{\n\t\t\t\t\t\t$res=@dol_delete_dir_recursive($dir);\n\t\t\t\t\t\tif (! $res)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->errors[] = 'ErrorFailToDeleteDir';\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove extrafields\n\t\t\tif ((! $error) && (empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))) // For avoid conflicts if trigger used\n\t\t\t{\n\t\t\t\t$result=$this->deleteExtraFields();\n\t\t\t\tif ($result < 0)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($this->errors as $errmsg)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t\t$this->error.=($this->error?', '.$errmsg:$errmsg);\n\t\t\t\t}\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error = \"ErrorRecordIsUsedCantDelete\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *\tUpdate or add a translation for a product\n\t *\n\t *\t@param     User\t   $user                   Object user making update\n\t *\t@return\t   int\t\t<0 if KO, >0 if OK\n\t */\n\tfunction setMultiLangs($user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs_available = $langs->get_available_languages(DOL_DOCUMENT_ROOT, 0, 2);\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\tforeach ($langs_available as $key => $value)\n\t\t{\n\t\t\tif ($key == $current_lang)\n\t\t\t{\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\t\t\t\t$sql.= \" AND lang='\".$key.\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) // if there is already a description line for this language\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2.= \" SET \";\n\t\t\t\t\t$sql2.= \" label='\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2.= \" description='\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", note='\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t$sql2.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($key).\"'\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.=\", note\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t\t$sql2.= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\". $this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2.= \" '\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", '\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t}\n\t\t\t\tdol_syslog(get_class($this).'::setMultiLangs key = current_lang = '.$key);\n\t\t\t\tif (! $this->db->query($sql2))\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($this->multilangs[$key]))\n\t\t\t{\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\t\t\t\t$sql.= \" AND lang='\".$key.\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) // if there is already a description line for this language\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2.= \" SET \";\n\t\t\t\t\t$sql2.= \" label='\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2.= \" description='\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", note='\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t$sql2.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($key).\"'\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.=\", note\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t\t$sql2.= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\". $this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2.= \" '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t}\n\n\t\t\t\t// We do not save if main fields are empty\n\t\t\t\tif ($this->multilangs[\"$key\"][\"label\"] || $this->multilangs[\"$key\"][\"description\"])\n\t\t\t\t{\n    \t\t\t\tif (! $this->db->query($sql2))\n    \t\t\t\t{\n    \t\t\t\t\t$this->error=$this->db->lasterror();\n    \t\t\t\t\treturn -1;\n    \t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// language is not current language and we didn't provide a multilang description for this language\n\t\t\t}\n\t\t}\n\n\t\t// Call trigger\n\t\t$result = $this->call_trigger('PRODUCT_SET_MULTILANGS',$user);\n\t\tif ($result < 0) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\t// End call triggers\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tDelete a language for this product\n\t *\n\t *  @param\t\tstring\t$langtodelete\t\tLanguage code to delete\n\t *\t@param\t\tUser\t$user       Object user making delete\n\t *\n\t *\t@return\t\tint\t\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction delMultiLangs($langtodelete, $user)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($langtodelete).\"'\";\n\n\t\tdol_syslog(get_class($this).'::delMultiLangs', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_DEL_MULTILANGS',$user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/*\n\t * Sets an accountancy code for a product.\n\t * Also calls PRODUCT_MODIFY trigger when modified\n\t *\n\t * @param string $type It can be 'buy', 'sell', 'sell_intra' or 'sell_export'\n\t * @param string $value Accountancy code\n\t * @return int <0 KO >0 OK\n\t */\n\tpublic function setAccountancyCode($type, $value)\n\t{\n\t\tglobal $user, $langs, $conf;\n\n\t\t$this->db->begin();\n\n\t\tif ($type == 'buy') {\n\t\t\t$field = 'accountancy_code_buy';\n\t\t} elseif ($type == 'sell') {\n\t\t\t$field = 'accountancy_code_sell';\n\t\t} elseif ($type == 'sell_intra') {\n\t\t\t$field = 'accountancy_code_sell_intra';\n\t\t} elseif ($type == 'sell_export') {\n\t\t\t$field = 'accountancy_code_sell_export';\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET \";\n\t\t$sql.= \"$field = '\".$this->db->escape($value).\"'\";\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::\".__FUNCTION__.\" sql=\".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\n\t\tif ($resql)\n\t\t{\n\t\t\t// Call triggers\n\t\t\tinclude_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';\n\t\t\t$interface=new Interfaces($this->db);\n\t\t\t$result=$interface->run_triggers('PRODUCT_MODIFY',$this,$user,$langs,$conf);\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$this->errors=$interface->errors;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->$field = $value;\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad array this->multilangs\n\t *\n\t *\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tfunction getMultiLangs()\n\t{\n\t\tglobal $langs;\n\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\t$sql = \"SELECT lang, label, description, note as other\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\twhile ($obj = $this->db->fetch_object($result))\n\t\t\t{\n\t\t\t\t//print 'lang='.$obj->lang.' current='.$current_lang.'<br>';\n\t\t\t\tif ($obj->lang == $current_lang)  // si on a les traduct. dans la langue courante on les charge en infos principales.\n\t\t\t\t{\n\t\t\t\t\t$this->label\t\t= $obj->label;\n\t\t\t\t\t$this->description\t= $obj->description;\n\t\t\t\t\t$this->other\t    = $obj->other;\n\t\t\t\t}\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"label\"]\t\t= $obj->label;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"description\"]\t= $obj->description;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"other\"]\t\t= $obj->other;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=\"Error: \".$this->db->lasterror().\" - \".$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\n\t/**\n\t *  Insert a track that we changed a customer price\n\t *\n\t *\t@param  \tUser\t$user       User making change\n\t *\t@param\t\tint\t\t$level\t\tprice level to change\n\t *\t@return\t\tint\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction _log_price($user,$level=0)\n\t{\n\t\tglobal $conf;\n\n\t\t$now=dol_now();\n\n\t\t// Clean parameters\n\t\tif (empty($this->price_by_qty)) $this->price_by_qty=0;\n\n\t\t// Add new price\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price(price_level,date_price, fk_product, fk_user_author, price, price_ttc, price_base_type,tosell, tva_tx, default_vat_code, recuperableonly,\";\n\t\t$sql.= \" localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, price_min,price_min_ttc,price_by_qty,entity,fk_price_expression) \";\n\t\t$sql.= \" VALUES(\".($level?$level:1).\", '\".$this->db->idate($now).\"',\".$this->id.\",\".$user->id.\",\".$this->price.\",\".$this->price_ttc.\",'\".$this->db->escape($this->price_base_type).\"',\".$this->status.\",\".$this->tva_tx.\", \".($this->default_vat_code?(\"'\".$this->db->escape($this->default_vat_code).\"'\"):\"null\").\",\".$this->tva_npr.\",\";\n\t\t$sql.= \" \".$this->localtax1_tx.\", \".$this->localtax2_tx.\", '\".$this->db->escape($this->localtax1_type).\"', '\".$this->db->escape($this->localtax2_type).\"', \".$this->price_min.\",\".$this->price_min_ttc.\",\".$this->price_by_qty.\",\".$conf->entity.\",\".($this->fk_price_expression > 0?$this->fk_price_expression:'null');\n\t\t$sql.= \")\";\n\n\t\tdol_syslog(get_class($this).\"::_log_price\", LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif(! $resql)\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Delete a price line\n\t *\n\t * \t@param\t\tUser\t$user\tObject user\n\t * \t@param\t\tint\t\t$rowid\tLine id to delete\n\t * \t@return\t\tint\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction log_price_delete($user, $rowid)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t$sql.= \" WHERE fk_product_price=\".$rowid;\n\t\t$resql=$this->db->query($sql);\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql.= \" WHERE rowid=\".$rowid;\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *\tRead price used by a provider.\n\t *\tWe enter as input couple prodfournprice/qty or triplet qty/product_id/fourn_ref.\n\t *  This also set some properties on product like ->buyprice, ->fourn_pu, ...\n\t *\n\t *  @param     \tint\t\t$prodfournprice     Id du tarif = rowid table product_fournisseur_price\n\t *  @param     \tdouble\t$qty                Quantity asked or -1 to get first entry found\n\t *\t@param\t\tint\t\t$product_id\t\t\tFilter on a particular product id\n\t * \t@param\t\tstring\t$fourn_ref\t\t\tFilter on a supplier price ref. 'none' to exclude ref in search.\n\t *  @param      int     $fk_soc             If of supplier\n\t *  @return    \tint \t\t\t\t\t\t<-1 if KO, -1 if qty not enough, 0 if OK but nothing found, id_product if OK and found. May also initialize some properties like (->ref_supplier, buyprice, fourn_pu, vatrate_supplier...)\n\t */\n\tfunction get_buyprice($prodfournprice, $qty, $product_id=0, $fourn_ref='', $fk_soc=0)\n\t{\n\t\tglobal $conf;\n\t\t$result = 0;\n\n\t\t// We do a first seach with a select by searching with couple prodfournprice and qty only (later we will search on triplet qty/product_id/fourn_ref)\n\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent,\";\n\t\t$sql.= \" pfp.fk_product, pfp.ref_fourn, pfp.fk_soc, pfp.tva_tx, pfp.fk_supplier_price_expression\";\n\t\t$sql.= \" ,pfp.default_vat_code\";\n        $sql.= \" ,pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t$sql.= \" WHERE pfp.rowid = \".$prodfournprice;\n\t\tif ($qty > 0) $sql.= \" AND pfp.quantity <= \".$qty;\n\t\t$sql.= \" ORDER BY pfp.quantity DESC\";\n\n\t\tdol_syslog(get_class($this).\"::get_buyprice first search by prodfournprice/qty\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj && $obj->quantity > 0)\t\t// If we found a supplier prices from the id of supplier price\n\t\t\t{\n                if (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression))\n                {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n                    $prod_supplier = new ProductFournisseur($this->db);\n                    $prod_supplier->product_fourn_price_id = $obj->rowid;\n                    $prod_supplier->id = $obj->fk_product;\n                    $prod_supplier->fourn_qty = $obj->quantity;\n                    $prod_supplier->fourn_tva_tx = $obj->tva_tx;\n                    $prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n                    $priceparser = new PriceParser($this->db);\n                    $price_result = $priceparser->parseProductSupplier($prod_supplier);\n                    if ($price_result >= 0) {\n                    \t$obj->price = $price_result;\n                    }\n                }\n                $this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t$this->buyprice = $obj->price;                      // deprecated\n\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity;     // Unit price of product of supplier\n\t\t\t\t$this->fourn_price_base_type = 'HT';                // Price base type\n\t\t\t\t$this->fourn_socid = $obj->fk_soc;                  // Company that offer this price\n\t\t\t\t$this->ref_fourn = $obj->ref_fourn;                 // deprecated\n\t\t\t\t$this->ref_supplier = $obj->ref_fourn;              // Ref supplier\n\t\t\t\t$this->remise_percent = $obj->remise_percent;       // remise percent if present and not typed\n\t\t\t\t$this->vatrate_supplier = $obj->tva_tx;             // Vat ref supplier\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code;   // Vat code supplier\n                $this->fourn_multicurrency_price       = $obj->multicurrency_price;\n                $this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n                $this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n                $this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n                $this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t$result=$obj->fk_product;\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse // If not found\n\t\t\t{\n\t\t\t\t// We do a second search by doing a select again but searching with less reliable criteria: couple qty/id product, and if set fourn_ref or fk_soc.\n\t\t\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.fk_soc,\";\n\t\t\t\t$sql.= \" pfp.fk_product, pfp.ref_fourn as ref_supplier, pfp.tva_tx, pfp.fk_supplier_price_expression\";\n\t\t\t\t$sql.= \" ,pfp.default_vat_code\";\n                $sql.= \" ,pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t\t\t$sql.= \" WHERE pfp.fk_product = \".$product_id;\n\t\t\t\tif ($fourn_ref != 'none') $sql.= \" AND pfp.ref_fourn = '\".$fourn_ref.\"'\";\n\t\t\t\tif ($fk_soc > 0) $sql.= \" AND pfp.fk_soc = \".$fk_soc;\n\t\t\t\tif ($qty > 0) $sql.= \" AND pfp.quantity <= \".$qty;\n\t\t\t\t$sql.= \" ORDER BY pfp.quantity DESC\";\n\t\t\t\t$sql.= \" LIMIT 1\";\n\n\t\t\t\tdol_syslog(get_class($this).\"::get_buyprice second search from qty/ref/product_id\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\tif ($obj && $obj->quantity > 0)\t\t// If found\n\t\t\t\t\t{\n\t\t                if (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression))\n\t\t                {\n\t\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t                    $prod_supplier = new ProductFournisseur($this->db);\n\t\t                    $prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t                    $prod_supplier->id = $obj->fk_product;\n\t\t                    $prod_supplier->fourn_qty = $obj->quantity;\n\t\t                    $prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t                    $prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t                    $priceparser = new PriceParser($this->db);\n\t\t                    $price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t                    if ($result >= 0) {\n\t\t                    \t$obj->price = $price_result;\n\t\t                    }\n\t\t                }\n\t\t                $this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t$this->buyprice = $obj->price;                      // deprecated\n\t\t\t\t\t\t$this->fourn_qty = $obj->quantity;\t\t\t\t\t// min quantity for price for a virtual supplier\n\t\t\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity;     // Unit price of product for a virtual supplier\n\t\t\t\t\t\t$this->fourn_price_base_type = 'HT';                // Price base type for a virtual supplier\n\t\t\t\t\t\t$this->fourn_socid = $obj->fk_soc;                  // Company that offer this price\n\t\t\t\t\t\t$this->ref_fourn = $obj->ref_supplier;              // deprecated\n\t\t\t\t\t\t$this->ref_supplier = $obj->ref_supplier;           // Ref supplier\n\t\t\t\t\t\t$this->remise_percent = $obj->remise_percent;       // remise percent if present and not typed\n\t\t\t\t\t\t$this->vatrate_supplier = $obj->tva_tx;             // Vat ref supplier\n\t\t\t\t\t\t$this->default_vat_code = $obj->default_vat_code;   // Vat code supplier\n                        $this->fourn_multicurrency_price       = $obj->multicurrency_price;\n                        $this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n                        $this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n                        $this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n                        $this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t\t\t$result=$obj->fk_product;\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn -1;\t// Ce produit n'existe pas avec cet id tarif fournisseur ou existe mais qte insuffisante, ni pour le couple produit/ref fournisseur dans la quantit\u00e9.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t *\tModify customer price of a product/Service\n\t *\n\t *\t@param  \tdouble\t$newprice\t\t    New price\n\t *\t@param  \tstring\t$newpricebase\t    HT or TTC\n\t *\t@param  \tUser\t$user        \t    Object user that make change\n\t *\t@param  \tdouble\t$newvat\t\t\t    New VAT Rate (For example 8.5. Should not be a string)\n\t *  @param\t\tdouble\t$newminprice\t    New price min\n\t *  @param\t\tint\t\t$level\t\t\t    0=standard, >0 = level if multilevel prices\n\t *  @param     \tint\t\t$newnpr             0=Standard vat rate, 1=Special vat rate for French NPR VAT\n\t *  @param     \tint\t\t$newpbq             1 if it has price by quantity\n\t *  @param \t\tint \t$ignore_autogen     Used to avoid infinite loops\n     *\t@param      array\t$localtaxes_array\tArray with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).\n     *  @param      string  $newdefaultvatcode  Default vat code\n\t * \t@return\t\tint\t\t\t\t\t\t    <0 if KO, >0 if OK\n\t */\n\tfunction updatePrice($newprice, $newpricebase, $user, $newvat='',$newminprice=0, $level=0, $newnpr=0, $newpbq=0, $ignore_autogen=0, $localtaxes_array=array(), $newdefaultvatcode='')\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$id=$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_price id=\".$id.\" newprice=\".$newprice.\" newpricebase=\".$newpricebase.\" newminprice=\".$newminprice.\" level=\".$level.\" npr=\".$newnpr.\" newdefaultvatcode=\".$newdefaultvatcode);\n\n\t\t// Clean parameters\n\t\tif (empty($this->tva_tx))  $this->tva_tx=0;\n        if (empty($newnpr)) $newnpr=0;\n\n\t\t// Check parameters\n\t\tif ($newvat == '') $newvat=$this->tva_tx;\n\n\t\t// If multiprices are enabled, then we check if the current product is subject to price autogeneration\n\t\t// Price will be modified ONLY when the first one is the one that is being modified\n\t\tif ((!empty($conf->global->PRODUIT_MULTIPRICES) || ! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) && !$ignore_autogen && $this->price_autogen && ($level == 1))\n\t\t{\n\t\t\treturn $this->generateMultiprices($user, $newprice, $newpricebase, $newvat, $newnpr, $newpbq);\n\t\t}\n\n\t\tif (! empty($newminprice) && ($newminprice > $newprice))\n\t\t{\n\t\t\t$this->error='ErrorPriceCantBeLowerThanMinPrice';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ($newprice !== '' || $newprice === 0)\n\t\t{\n\t\t\tif ($newpricebase == 'TTC')\n\t\t\t{\n\t\t\t\t$price_ttc = price2num($newprice,'MU');\n\t\t\t\t$price = price2num($newprice) / (1 + ($newvat / 100));\n\t\t\t\t$price = price2num($price,'MU');\n\n\t\t\t\tif ($newminprice != '' || $newminprice == 0)\n\t\t\t\t{\n\t\t\t\t\t$price_min_ttc = price2num($newminprice,'MU');\n\t\t\t\t\t$price_min = price2num($newminprice) / (1 + ($newvat / 100));\n\t\t\t\t\t$price_min = price2num($price_min,'MU');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$price_min=0;\n\t\t\t\t\t$price_min_ttc=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$price = price2num($newprice,'MU');\n\t\t\t\t$price_ttc = ( $newnpr != 1 ) ? price2num($newprice) * (1 + ($newvat / 100)) : $price;\n\t\t\t\t$price_ttc = price2num($price_ttc,'MU');\n\n\t\t\t\tif ( $newminprice !== '' || $newminprice === 0)\n\t\t\t\t{\n\t\t\t\t\t$price_min = price2num($newminprice,'MU');\n\t\t\t\t\t$price_min_ttc = price2num($newminprice) * (1 + ($newvat / 100));\n\t\t\t\t\t$price_min_ttc = price2num($price_min_ttc,'MU');\n\t\t\t\t\t//print 'X'.$newminprice.'-'.$price_min;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$price_min=0;\n\t\t\t\t\t$price_min_ttc=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//print 'x'.$id.'-'.$newprice.'-'.$newpricebase.'-'.$price.'-'.$price_ttc.'-'.$price_min.'-'.$price_min_ttc;\n\n\t\t\tif (count($localtaxes_array) > 0)\n\t\t\t{\n\t\t\t    $localtaxtype1=$localtaxes_array['0'];\n\t\t\t    $localtax1=$localtaxes_array['1'];\n\t\t\t    $localtaxtype2=$localtaxes_array['2'];\n\t\t\t    $localtax2=$localtaxes_array['3'];\n\t\t\t}\n\t\t\telse     // old method. deprecated because ot can't retreive type\n\t\t\t{\n\t       \t\t$localtaxtype1='0';\n\t\t\t    $localtax1=get_localtax($newvat,1);\n\t       \t\t$localtaxtype2='0';\n\t\t\t    $localtax2=get_localtax($newvat,2);\n\t\t\t}\n\t\t\tif (empty($localtax1)) $localtax1=0;\t// If = '' then = 0\n\t\t\tif (empty($localtax2)) $localtax2=0;\t// If = '' then = 0\n\n\t\t\t$this->db->begin();\n\n\t\t\t// Ne pas mettre de quote sur les numeriques decimaux.\n\t\t\t// Ceci provoque des stockages avec arrondis en base au lieu des valeurs exactes.\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product SET\";\n\t\t\t$sql.= \" price_base_type='\".$newpricebase.\"',\";\n\t\t\t$sql.= \" price=\".$price.\",\";\n\t\t\t$sql.= \" price_ttc=\".$price_ttc.\",\";\n\t\t\t$sql.= \" price_min=\".$price_min.\",\";\n\t\t\t$sql.= \" price_min_ttc=\".$price_min_ttc.\",\";\n\t\t\t$sql.= \" localtax1_tx=\".($localtax1>=0?$localtax1:'NULL').\",\";\n\t\t\t$sql.= \" localtax2_tx=\".($localtax2>=0?$localtax2:'NULL').\",\";\n\t\t\t$sql.= \" localtax1_type=\".($localtaxtype1!=''?\"'\".$localtaxtype1.\"'\":\"'0'\").\",\";\n\t\t\t$sql.= \" localtax2_type=\".($localtaxtype2!=''?\"'\".$localtaxtype2.\"'\":\"'0'\").\",\";\n            $sql.= \" default_vat_code=\".($newdefaultvatcode?\"'\".$this->db->escape($newdefaultvatcode).\"'\":\"null\").\",\";\n\t\t\t$sql.= \" tva_tx='\".price2num($newvat).\"',\";\n            $sql.= \" recuperableonly='\".$newnpr.\"'\";\n\t\t\t$sql.= \" WHERE rowid = \".$id;\n\n\t\t\tdol_syslog(get_class($this).\"::update_price\", LOG_DEBUG);\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->multiprices[$level] = $price;\n\t\t\t\t$this->multiprices_ttc[$level] = $price_ttc;\n\t\t\t\t$this->multiprices_min[$level]= $price_min;\n\t\t\t\t$this->multiprices_min_ttc[$level]= $price_min_ttc;\n\t\t\t\t$this->multiprices_base_type[$level]= $newpricebase;\n\t\t\t\t$this->multiprices_default_vat_code[$level]= $newdefaultvatcode;\n\t\t\t\t$this->multiprices_tva_tx[$level]= $newvat;\n\t\t\t\t$this->multiprices_recuperableonly[$level]= $newnpr;\n\n\t\t\t\t$this->price = $price;\n\t\t\t\t$this->price_ttc = $price_ttc;\n\t\t\t\t$this->price_min = $price_min;\n\t\t\t\t$this->price_min_ttc = $price_min_ttc;\n\t\t\t\t$this->price_base_type = $newpricebase;\n\t\t\t\t$this->default_vat_code = $newdefaultvatcode;\n\t\t\t\t$this->tva_tx = $newvat;\n\t\t\t\t$this->tva_npr = $newnpr;\n\t\t\t\t//Local taxes\n\t\t\t\t$this->localtax1_tx = $localtax1;\n\t\t\t\t$this->localtax2_tx = $localtax2;\n\t\t\t\t$this->localtax1_type = $localtaxtype1;\n\t\t\t\t$this->localtax2_type = $localtaxtype2;\n\n\t\t\t\t// Price by quantity\n\t\t\t\t$this->price_by_qty = $newpbq;\n\n\t\t\t\t$this->_log_price($user,$level);\t// Save price for level into table product_price\n\n\t\t\t\t$this->level = $level;\t\t\t\t// Store level of price edited for trigger\n\n                // Call trigger\n                $result=$this->call_trigger('PRODUCT_PRICE_MODIFY',$user);\n                if ($result < 0)\n                {\n                \t$this->db->rollback();\n                \treturn -1;\n                }\n                // End call triggers\n\n                $this->db->commit();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t    dol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n    /**\n     *  Sets the supplier price expression\n     *\n     *  @param  int     $expression_id\tExpression\n     *  @return int                 \t<0 if KO, >0 if OK\n\t * @deprecated Use Product::update instead\n     */\n    function setPriceExpression($expression_id)\n    {\n\t\tglobal $user;\n\n\t\t$this->fk_price_expression = $expression_id;\n\n\t\treturn $this->update($this->id, $user);\n    }\n\n\t/**\n\t *  Load a product in memory from database\n\t *\n\t *  @param\tint\t\t$id      \t\t\tId of product/service to load\n\t *  @param  string\t$ref     \t\t\tRef of product/service to load\n\t *  @param\tstring\t$ref_ext\t\t\tRef ext of product/service to load\n     *  @param\tint\t\t$ignore_expression  Ignores the math expression for calculating price and uses the db value instead\n\t *  @return int     \t\t\t\t\t<0 if KO, 0 if not found, >0 if OK\n\t */\n\tfunction fetch($id='', $ref='', $ref_ext='', $ignore_expression=0)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t\tglobal $langs, $conf;\n\n\t\tdol_syslog(get_class($this).\"::fetch id=\".$id.\" ref=\".$ref.\" ref_ext=\".$ref_ext);\n\n\t\t// Check parameters\n\t\tif (! $id && ! $ref && ! $ref_ext)\n\t\t{\n\t\t\t$this->error='ErrorWrongParameters';\n\t\t\tdol_syslog(get_class($this).\"::fetch \".$this->error);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT rowid, ref, ref_ext, label, description, url, note as note_private, customcode, fk_country, price, price_ttc,\";\n\t\t$sql.= \" price_min, price_min_ttc, price_base_type, cost_price, default_vat_code, tva_tx, recuperableonly as tva_npr, localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, tosell,\";\n\t\t$sql.= \" tobuy, fk_product_type, duration, fk_default_warehouse, seuil_stock_alerte, canvas, weight, weight_units,\";\n\t\t$sql.= \" length, length_units, width, width_units, height, height_units,\";\n\t\t$sql.= \" surface, surface_units, volume, volume_units, barcode, fk_barcode_type, finished,\";\n\t\t$sql.= \" accountancy_code_buy, accountancy_code_sell, accountancy_code_sell_intra, accountancy_code_sell_export, stock, pmp,\";\n\t\t$sql.= \" datec, tms, import_key, entity, desiredstock, tobatch, fk_unit,\";\n\t\t$sql.= \" fk_price_expression, price_autogen\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\tif ($id) $sql.= \" WHERE rowid = \".$this->db->escape($id);\n\t\telse\n\t\t{\n\t\t\t$sql.= \" WHERE entity IN (\".getEntity($this->element).\")\";\n\t\t\tif ($ref) $sql.= \" AND ref = '\".$this->db->escape($ref).\"'\";\n\t\t\telse if ($ref_ext) $sql.= \" AND ref_ext = '\".$this->db->escape($ref_ext).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ( $resql )\n\t\t{\n\t\t\tif ($this->db->num_rows($resql) > 0)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id\t\t\t\t\t\t\t= $obj->rowid;\n\t\t\t\t$this->ref\t\t\t\t\t\t\t= $obj->ref;\n\t\t\t\t$this->ref_ext\t\t\t\t\t\t= $obj->ref_ext;\n\t\t\t\t$this->label\t\t\t\t\t\t= $obj->label;\n\t\t\t\t$this->description\t\t\t\t\t= $obj->description;\n\t\t\t\t$this->url\t\t\t\t\t\t\t= $obj->url;\n\t\t\t\t$this->note_private\t\t\t\t\t= $obj->note_private;\n\t\t\t\t$this->note\t\t\t\t\t\t\t= $obj->note_private;  // deprecated\n\n\t\t\t\t$this->type\t\t\t\t\t\t\t= $obj->fk_product_type;\n\t\t\t\t$this->status\t\t\t\t\t\t= $obj->tosell;\n\t\t\t\t$this->status_buy\t\t\t\t\t= $obj->tobuy;\n\t\t\t\t$this->status_batch\t\t\t\t\t= $obj->tobatch;\n\n\t\t\t\t$this->customcode\t\t\t\t\t= $obj->customcode;\n\t\t\t\t$this->country_id\t\t\t\t\t= $obj->fk_country;\n\t\t\t\t$this->country_code\t\t\t\t\t= getCountry($this->country_id,2,$this->db);\n\t\t\t\t$this->price\t\t\t\t\t\t= $obj->price;\n\t\t\t\t$this->price_ttc\t\t\t\t\t= $obj->price_ttc;\n\t\t\t\t$this->price_min\t\t\t\t\t= $obj->price_min;\n\t\t\t\t$this->price_min_ttc\t\t\t\t= $obj->price_min_ttc;\n\t\t\t\t$this->price_base_type\t\t\t\t= $obj->price_base_type;\n\t\t\t\t$this->cost_price\t\t\t\t\t= $obj->cost_price;\n\t\t\t\t$this->default_vat_code\t\t\t\t= $obj->default_vat_code;\n\t\t\t\t$this->tva_tx\t\t\t\t\t\t= $obj->tva_tx;\n\t\t\t\t//! French VAT NPR\n\t\t\t\t$this->tva_npr\t\t\t\t\t\t= $obj->tva_npr;\n\t\t\t\t$this->recuperableonly\t\t\t\t= $obj->tva_npr;       // For backward compatibility\n\t\t\t\t//! Local taxes\n\t\t\t\t$this->localtax1_tx\t\t\t\t\t= $obj->localtax1_tx;\n\t\t\t\t$this->localtax2_tx\t\t\t\t\t= $obj->localtax2_tx;\n\t\t\t\t$this->localtax1_type\t\t\t\t= $obj->localtax1_type;\n\t\t\t\t$this->localtax2_type\t\t\t\t= $obj->localtax2_type;\n\n\t\t\t\t$this->finished\t\t\t\t\t\t= $obj->finished;\n\t\t\t\t$this->duration\t\t\t\t\t\t= $obj->duration;\n\t\t\t\t$this->duration_value\t\t\t\t= substr($obj->duration,0,dol_strlen($obj->duration)-1);\n\t\t\t\t$this->duration_unit\t\t\t\t= substr($obj->duration,-1);\n\t\t\t\t$this->canvas\t\t\t\t\t\t= $obj->canvas;\n\t\t\t\t$this->weight\t\t\t\t\t\t= $obj->weight;\n\t\t\t\t$this->weight_units\t\t\t\t\t= $obj->weight_units;\n\t\t\t\t$this->length\t\t\t\t\t\t= $obj->length;\n\t\t\t\t$this->length_units\t\t\t\t\t= $obj->length_units;\n\t\t\t\t$this->width\t\t\t\t\t\t= $obj->width;\n\t\t\t\t$this->width_units\t\t\t\t\t= $obj->width_units;\n\t\t\t\t$this->height\t\t\t\t\t\t= $obj->height;\n\t\t\t\t$this->height_units\t\t\t\t\t= $obj->height_units;\n\n\t\t\t\t$this->surface\t\t\t\t\t\t= $obj->surface;\n\t\t\t\t$this->surface_units\t\t\t\t= $obj->surface_units;\n\t\t\t\t$this->volume\t\t\t\t\t\t= $obj->volume;\n\t\t\t\t$this->volume_units\t\t\t\t\t= $obj->volume_units;\n\t\t\t\t$this->barcode\t\t\t\t\t\t= $obj->barcode;\n\t\t\t\t$this->barcode_type\t\t\t\t\t= $obj->fk_barcode_type;\n\n\t\t\t\t$this->accountancy_code_buy\t\t\t= $obj->accountancy_code_buy;\n\t\t\t\t$this->accountancy_code_sell\t\t= $obj->accountancy_code_sell;\n\t\t\t\t$this->accountancy_code_sell_intra\t= $obj->accountancy_code_sell_intra;\n\t\t\t\t$this->accountancy_code_sell_export\t= $obj->accountancy_code_sell_export;\n\n\t\t\t\t$this->fk_default_warehouse\t\t\t= $obj->fk_default_warehouse;\n\t\t\t\t$this->seuil_stock_alerte\t\t\t= $obj->seuil_stock_alerte;\n\t\t\t\t$this->desiredstock\t\t\t\t\t= $obj->desiredstock;\n\t\t\t\t$this->stock_reel\t\t\t\t\t= $obj->stock;\n\t\t\t\t$this->pmp\t\t\t\t\t\t\t= $obj->pmp;\n\n\t\t\t\t$this->date_creation\t\t\t\t= $obj->datec;\n\t\t\t\t$this->date_modification\t\t\t= $obj->tms;\n\t\t\t\t$this->import_key\t\t\t\t\t= $obj->import_key;\n\t\t\t\t$this->entity\t\t\t\t\t\t= $obj->entity;\n\n\t\t\t\t$this->ref_ext\t\t\t\t\t\t= $obj->ref_ext;\n\t\t\t\t$this->fk_price_expression\t\t\t= $obj->fk_price_expression;\n\t\t\t\t$this->fk_unit\t\t\t\t\t\t= $obj->fk_unit;\n\t\t\t\t$this->price_autogen\t\t\t\t= $obj->price_autogen;\n\n\t\t\t\t$this->db->free($resql);\n\n\t\t\t\t// Retreive all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t// multilangs\n\t\t\t\tif (! empty($conf->global->MAIN_MULTILANGS)) $this->getMultiLangs();\n\n\t\t\t\t// Load multiprices array\n\t\t\t\tif (! empty($conf->global->PRODUIT_MULTIPRICES))\t\t\t\t// prices per segment\n\t\t\t\t{\n\t\t\t\t\tfor ($i=1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql.= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql.= \" AND price_level=\".$i;\n\t\t\t\t\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i]=$result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i]=$result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i]=$result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i]=$result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i]=$result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i]=$result[\"tva_tx\"];     // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i]=$result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t$this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[$i];\n\t\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (! empty($conf->global->PRODUIT_CUSTOMER_PRICES))\t\t\t// prices per customers\n\t\t\t\t{\n\t\t\t\t\t// Nothing loaded by default. List may be very long.\n\t\t\t\t}\n\t\t\t\telse if (! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY))\t// prices per quantity\n\t\t\t\t{\n\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid\";\n\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t$sql.= \" WHERE fk_product = \".$this->id;\n\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql)\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t$this->prices_by_qty[0]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t$this->prices_by_qty_id[0]=$result[\"rowid\"];\n\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\tif ($this->prices_by_qty[0] == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sql = \"SELECT rowid,price, unitprice, quantity, remise_percent, remise, remise, price_base_type\";\n\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[0];\n\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t//$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->prices_by_qty_list[0]=$resultat;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES))\t// prices per customer and quantity\n\t\t\t\t{\n\t\t\t\t\tfor ($i=1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql.= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql.= \" AND price_level=\".$i;\n\t\t\t\t\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i]=$result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i]=$result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i]=$result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i]=$result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i]=$result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i]=$result[\"tva_tx\"];     // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i]=$result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t$this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[$i];\n\t\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n                if (!empty($conf->dynamicprices->enabled) && !empty($this->fk_price_expression) && empty($ignore_expression))\n                {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n                \t$priceparser = new PriceParser($this->db);\n                    $price_result = $priceparser->parseProduct($this);\n                    if ($price_result >= 0)\n                    {\n                        $this->price = $price_result;\n                        // Calculate the VAT\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price) * (1 + ($this->tva_tx / 100));\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price_ttc,'MU');\n                    }\n                }\n\n\t\t\t\t// We should not load stock during the fetch. If someone need stock of product, he must call load_stock after fetching product.\n\t\t\t\t// Instead we just init the stock_warehouse array\n\t\t\t\t$this->stock_warehouse = array();\n\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id societe\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_propale($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_customers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql.= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"propaldet as pd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"propal as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = pd.fk_propal\";\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\t$sql.= \" AND pd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_propale['customers']=$obj->nb_customers;\n\t\t\t$this->stats_propale['nb']=$obj->nb;\n\t\t\t$this->stats_propale['rows']=$obj->nb_rows;\n\t\t\t$this->stats_propale['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id thirdparty\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_proposal_supplier($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_suppliers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql.= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as pd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"supplier_proposal as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = pd.fk_supplier_proposal\";\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\t$sql.= \" AND pd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_proposal_supplier['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_proposal_supplier['nb']=$obj->nb;\n\t\t\t$this->stats_proposal_supplier['rows']=$obj->nb_rows;\n\t\t\t$this->stats_proposal_supplier['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats commande client pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                  Array of stats (nb=nb of order, qty=qty ordered)\n\t */\n\tfunction load_stats_commande($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_commande['customers']=$obj->nb_customers;\n\t\t\t$this->stats_commande['nb']=$obj->nb;\n\t\t\t$this->stats_commande['rows']=$obj->nb_rows;\n\t\t\t$this->stats_commande['qty']=$obj->qty?$obj->qty:0;\n\n\t\t\t// if it's a virtual product, maybe it is in order by extension\n\t\t\tif (! empty($conf->global->ORDER_ADD_ORDERS_WITH_PARENT_PROD_IF_INCDEC))\n\t\t\t{\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_commande($socid, $filtrestatut);\n\n\t\t\t\t\t\t\t$this->stats_commande['customers']+=$pFather->stats_commande['customers'];\n\t\t\t\t\t\t\t$this->stats_commande['nb']+=$pFather->stats_commande['nb'];\n\t\t\t\t\t\t\t$this->stats_commande['rows']+=$pFather->stats_commande['rows'];\n\t\t\t\t\t\t\t$this->stats_commande['qty']+=$pFather->stats_commande['qty'] * $qtyCoef;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If stock decrease is on invoice validation, the theorical stock continue to\n\t\t\t// count the orders to ship in theorical stock when some are already removed b invoice validation.\n\t\t\t// If option DECREASE_ONLY_UNINVOICEDPRODUCTS is on, we make a compensation.\n\t\t\tif (! empty($conf->global->STOCK_CALCULATE_ON_BILL))\n\t\t\t{\n\t\t\t\tif (! empty($conf->global->DECREASE_ONLY_UNINVOICEDPRODUCTS))\n\t\t\t\t{\n\t\t\t\t\t$adeduire = 0;\n\t\t\t\t\t$sql = \"SELECT sum(fd.qty) as count FROM \".MAIN_DB_PREFIX.\"facturedet fd \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"facture f ON fd.fk_facture = f.rowid \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"element_element el ON el.fk_target = f.rowid and el.targettype = 'facture' and sourcetype = 'commande'\";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"commande c ON el.fk_source = c.rowid \";\n\t\t\t\t\t$sql .= \" WHERE c.fk_statut IN (\".$filtrestatut.\") AND c.facture = 0 AND fd.fk_product = \".$this->id;\n\t\t\t\t\tdol_syslog(__METHOD__.\":: sql $sql\", LOG_NOTICE);\n\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ( $resql )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($this->db->num_rows($resql) > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t\t\t$adeduire += $obj->count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->stats_commande['qty'] -= $adeduire;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats commande fournisseur pour le produit/service\n\t *\n\t *  @param    int      $socid           Id societe pour filtrer sur une societe\n\t *  @param    string   $filtrestatut    Id des statuts pour filtrer sur des statuts\n\t *  @param    int      $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                     Tableau des stats\n\t */\n\tfunction load_stats_commande_fournisseur($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_suppliers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0) $sql.= \" AND c.fk_soc = \".$socid;\n\t\tif ($filtrestatut != '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\"; // Peut valoir 0\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_commande_fournisseur['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_commande_fournisseur['nb']=$obj->nb;\n\t\t\t$this->stats_commande_fournisseur['rows']=$obj->nb_rows;\n\t\t\t$this->stats_commande_fournisseur['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats expedition client pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                   Tableau des stats\n\t */\n\tfunction load_stats_sending($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT e.fk_soc) as nb_customers, COUNT(DISTINCT e.rowid) as nb,\";\n\t\t$sql.= \" COUNT(ed.rowid) as nb_rows, SUM(ed.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"expeditiondet as ed\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"expedition as e\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE e.rowid = ed.fk_expedition\";\n\t\t$sql.= \" AND c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND e.fk_soc = s.rowid\";\n\t\t$sql.= \" AND e.entity IN (\".getEntity('expedition').\")\";\n\t\t$sql.= \" AND ed.fk_origin_line = cd.rowid\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND e.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND e.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_expedition['customers']=$obj->nb_customers;\n\t\t\t$this->stats_expedition['nb']=$obj->nb;\n\t\t\t$this->stats_expedition['rows']=$obj->nb_rows;\n\t\t\t$this->stats_expedition['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats r\u00e9ception fournisseur pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                   Tableau des stats\n\t */\n\tfunction load_stats_reception($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT cf.fk_soc) as nb_customers, COUNT(DISTINCT cf.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseur_dispatch as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as cf\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE cf.rowid = fd.fk_commande\";\n\t\t$sql.= \" AND cf.fk_soc = s.rowid\";\n\t\t$sql.= \" AND cf.entity IN (\".getEntity('supplier_order').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND cf.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND cf.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND cf.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_reception['suppliers']=$obj->nb_customers;\n\t\t\t$this->stats_reception['nb']=$obj->nb;\n\t\t\t$this->stats_reception['rows']=$obj->nb_rows;\n\t\t\t$this->stats_reception['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats contrat pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id societe\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_contrat($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"contratdet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"contrat as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_contrat\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND c.statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_contrat['customers']=$obj->nb_customers;\n\t\t\t$this->stats_contrat['nb']=$obj->nb;\n\t\t\t$this->stats_contrat['rows']=$obj->nb_rows;\n\t\t\t$this->stats_contrat['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t *  @param    int\t\t$socid      Id societe\n\t *  @return   array       \t\t\tTableau des stats\n\t */\n\tfunction load_stats_facture($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_customers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facturedet as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"facture as f\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = fd.fk_facture\";\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql .= \" AND f.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_facture['customers']=$obj->nb_customers;\n\t\t\t$this->stats_facture['nb']=$obj->nb;\n\t\t\t$this->stats_facture['rows']=$obj->nb_rows;\n\t\t\t$this->stats_facture['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t *  @param    int\t\t$socid      Id societe\n\t *  @return   array       \t\t\tTableau des stats\n\t */\n\tfunction load_stats_facture_fournisseur($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_suppliers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"facture_fourn as f\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = fd.fk_facture_fourn\";\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql .= \" AND f.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_facture_fournisseur['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_facture_fournisseur['nb']=$obj->nb;\n\t\t\t$this->stats_facture_fournisseur['rows']=$obj->nb_rows;\n\t\t\t$this->stats_facture_fournisseur['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return an array formated for showing graphs\n\t *\n\t *  @param\t\tstring\t$sql        Request to execute\n\t *  @param\t\tstring\t$mode\t\t'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $year       Year (0=current year)\n\t *  @return   \tarray       \t\t<0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction _get_stats($sql, $mode, $year=0)\n\t{\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$arr = $this->db->fetch_array($resql);\n\t\t\t\tif ($mode == 'byunit')   $tab[$arr[1]] = $arr[0];\t// 1st field\n\t\t\t\tif ($mode == 'bynumber') $tab[$arr[1]] = $arr[2];\t// 3rd field\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($year))\n\t\t{\n\t\t    $year = strftime('%Y',time());\n\t\t    $month = strftime('%m',time());\n\t\t}\n\t\telse\n\t\t{\n\t\t    $month=12;    // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t}\n\t\t$result = array();\n\n\t\tfor ($j = 0 ; $j < 12 ; $j++)\n\t\t{\n\t\t\t$idx=ucfirst(dol_trunc(dol_print_date(dol_mktime(12,0,0,$month,1,$year),\"%b\"),3,'right','UTF-8',1));\n\t\t\t$monthnum=sprintf(\"%02s\",$month);\n\n\t\t\t$result[$j] = array($idx,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\t\t\t//            $result[$j] = array($monthnum,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\n\t\t\t$month = \"0\".($month - 1);\n\t\t\tif (dol_strlen($month) == 3)\n\t\t\t{\n\t\t\t\t$month = substr($month,1);\n\t\t\t}\n\t\t\tif ($month == 0)\n\t\t\t{\n\t\t\t\t$month = 12;\n\t\t\t\t$year = $year - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn array_reverse($result);\n\t}\n\n\n\t/**\n\t *  Return nb of units or customers invoices in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_vente($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT f.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facturedet as d, \".MAIN_DB_PREFIX.\"facture as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = d.fk_facture\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND f.fk_soc = $socid\";\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\n\t/**\n\t *  Return nb of units or supplier invoices in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_achat($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT f.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as d, \".MAIN_DB_PREFIX.\"facture_fourn as f, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n        if (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = d.fk_facture_fourn\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND f.fk_soc = $socid\";\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or proposals in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_propal($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.datep, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT p.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"propaldet as d, \".MAIN_DB_PREFIX.\"propal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = d.fk_propal\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND prod.rowid = d.fk_product AND prod.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(p.datep,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(p.datep,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or proposals in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_propalsupplier($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT p.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as d, \".MAIN_DB_PREFIX.\"supplier_proposal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = d.fk_supplier_proposal\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND prod.rowid = d.fk_product AND prod.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(p.date_valid,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(p.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or orders in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_order($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT c.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commandedet as d, \".MAIN_DB_PREFIX.\"commande as c, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n        if (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or orders in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_ordersupplier($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT c.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as d, \".MAIN_DB_PREFIX.\"commande_fournisseur as c, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Link a product/service to a parent product/service\n\t *\n\t *  @param      int\t$id_pere    Id of parent product/service\n\t *  @param      int\t$id_fils    Id of child product/service\n\t *  @param\t\tint\t$qty\t\tQuantity\n\t *  @param\t\tint\t$incdec\t\t1=Increase/decrease stock of child when parent stock increase/decrease\n\t *  @return     int        \t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction add_sousproduit($id_pere, $id_fils, $qty, $incdec=1)\n\t{\n\t\t// Clean parameters\n\t\tif (! is_numeric($id_pere)) $id_pere=0;\n\t\tif (! is_numeric($id_fils)) $id_fils=0;\n\t\tif (! is_numeric($incdec)) $incdec=0;\n\n\t\t$result=$this->del_sousproduit($id_pere, $id_fils);\n\t\tif ($result < 0) return $result;\n\n\t\t// Check not already father of id_pere (to avoid father -> child -> father links)\n\t\t$sql = 'SELECT fk_product_pere from '.MAIN_DB_PREFIX.'product_association';\n\t\t$sql .= ' WHERE fk_product_pere  = '.$id_fils.' AND fk_product_fils = '.$id_pere;\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\tif($num > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->error=\"isFatherOfThis\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association(fk_product_pere,fk_product_fils,qty,incdec)';\n\t\t\t\t\t$sql .= ' VALUES ('.$id_pere.', '.$id_fils.', '.$qty.', '.$incdec.')';\n\t\t\t\t\tif (! $this->db->query($sql))\n\t\t\t\t\t{\n\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Modify composed product\n\t *\n\t *  @param      int\t$id_pere    Id of parent product/service\n\t *  @param      int\t$id_fils    Id of child product/service\n\t *  @param\t\tint\t$qty\t\tQuantity\n\t *  @param\t\tint\t$incdec\t\t1=Increase/decrease stock of child when parent stock increase/decrease\n\t * \t@return     int        \t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction update_sousproduit($id_pere, $id_fils, $qty, $incdec=1)\n\t{\n\t\t// Clean parameters\n\t\tif (! is_numeric($id_pere)) $id_pere=0;\n\t\tif (! is_numeric($id_fils)) $id_fils=0;\n\t\tif (! is_numeric($incdec)) $incdec=1;\n\t\tif (! is_numeric($qty)) $qty=1;\n\n\t\t$sql = 'UPDATE '.MAIN_DB_PREFIX.'product_association SET ';\n\t\t$sql.= 'qty='.$qty;\n\t\t$sql.= ',incdec='.$incdec;\n\t\t$sql .= ' WHERE fk_product_pere='.$id_pere.' AND fk_product_fils='.$id_fils;\n\n\t\tif (!$this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\t/**\n\t *  Retire le lien entre un sousproduit et un produit/service\n\t *\n\t *  @param      int\t$fk_parent\t\tId du produit auquel ne sera plus lie le produit lie\n\t *  @param      int\t$fk_child\t\tId du produit a ne plus lie\n\t *  @return     int\t\t\t    \t< 0 if KO, > 0 if OK\n\t */\n\tfunction del_sousproduit($fk_parent, $fk_child)\n\t{\n\t\tif (! is_numeric($fk_parent)) $fk_parent=0;\n\t\tif (! is_numeric($fk_child)) $fk_child=0;\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere  = \".$fk_parent;\n\t\t$sql.= \" AND fk_product_fils = \".$fk_child;\n\n\t\tdol_syslog(get_class($this).'::del_sousproduit', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Verifie si c'est un sous-produit\n\t *\n\t *  @param      int\t$fk_parent\t\tId du produit auquel le produit est lie\n\t *  @param      int\t$fk_child\t\tId du produit lie\n\t *  @return     int\t\t\t    \t< 0 si erreur, > 0 si ok\n\t */\n\tfunction is_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t$sql = \"SELECT fk_product_pere, qty, incdec\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere  = '\".$fk_parent.\"'\";\n\t\t$sql.= \" AND fk_product_fils = '\".$fk_child.\"'\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\n\t\t\tif($num > 0)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->is_sousproduit_qty = $obj->qty;\n\t\t\t\t$this->is_sousproduit_incdec = $obj->incdec;\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Add a supplier price for the product.\n\t *  Note: Duplicate ref is accepted for different quantity only, or for different companies.\n\t *\n\t *  @param      User\t$user       User that make link\n\t *  @param      int\t\t$id_fourn   Supplier id\n\t *  @param      string\t$ref_fourn  Supplier ref\n\t *  @param\t\tfloat\t$quantity\tQuantity minimum for price\n\t *  @return     int         \t\t< 0 if KO, 0 if link already exists for this product, > 0 if OK\n\t */\n\tfunction add_fournisseur($user, $id_fourn, $ref_fourn, $quantity)\n\t{\n\t\tglobal $conf;\n\n\t\t$now=dol_now();\n\n    \tdol_syslog(get_class($this).\"::add_fournisseur id_fourn = \".$id_fourn.\" ref_fourn=\".$ref_fourn.\" quantity=\".$quantity, LOG_DEBUG);\n\n\t\tif ($ref_fourn)\n\t\t{\n    \t\t$sql = \"SELECT rowid, fk_product\";\n    \t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n    \t\t$sql.= \" WHERE fk_soc = \".$id_fourn;\n    \t\t$sql.= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n    \t\t$sql.= \" AND fk_product != \".$this->id;\n    \t\t$sql.= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n    \t\t$resql=$this->db->query($sql);\n    \t\tif ($resql)\n    \t\t{\n    \t\t\t$obj = $this->db->fetch_object($resql);\n                if ($obj)\n                {\n        \t\t\t// If the supplier ref already exists but for another product (duplicate ref is accepted for different quantity only or different companies)\n                    $this->product_id_already_linked = $obj->fk_product;\n    \t\t\t\treturn -3;\n    \t\t\t}\n                $this->db->free($resql);\n    \t\t}\n\t\t}\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql.= \" WHERE fk_soc = \".$id_fourn;\n\t\tif ($ref_fourn) $sql.= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\telse $sql.= \" AND (ref_fourn = '' OR ref_fourn IS NULL)\";\n\t\t$sql.= \" AND quantity = '\".$quantity.\"'\";\n\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t$sql.= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n    \t\t$obj = $this->db->fetch_object($resql);\n\n\t\t    // The reference supplier does not exist, we create it for this product.\n\t\t\tif (! $obj)\n\t\t\t{\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_fournisseur_price(\";\n\t\t\t\t$sql.= \"datec\";\n\t\t\t\t$sql.= \", entity\";\n\t\t\t\t$sql.= \", fk_product\";\n\t\t\t\t$sql.= \", fk_soc\";\n\t\t\t\t$sql.= \", ref_fourn\";\n\t\t\t\t$sql.= \", quantity\";\n\t\t\t\t$sql.= \", fk_user\";\n\t\t\t\t$sql.= \", tva_tx\";\n\t\t\t\t$sql.= \") VALUES (\";\n\t\t\t\t$sql.= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t$sql.= \", \".$conf->entity;\n\t\t\t\t$sql.= \", \".$this->id;\n\t\t\t\t$sql.= \", \".$id_fourn;\n\t\t\t\t$sql.= \", '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t\t$sql.= \", \".$quantity;\n\t\t\t\t$sql.= \", \".$user->id;\n\t\t\t\t$sql.= \", 0\";\n\t\t\t\t$sql.= \")\";\n\n\t\t\t\tif ($this->db->query($sql))\n\t\t\t\t{\n\t\t\t\t\t$this->product_fourn_price_id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product_fournisseur_price\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the supplier price already exists for this product and quantity\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Renvoie la liste des fournisseurs du produit/service\n\t *\n\t *  @return \tarray\t\tTableau des id de fournisseur\n\t */\n\tfunction list_suppliers()\n\t{\n\t\tglobal $conf;\n\n\t\t$list = array();\n\n\t\t$sql = \"SELECT DISTINCT p.fk_soc\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as p\";\n\t\t$sql.= \" WHERE p.fk_product = \".$this->id;\n\t\t$sql.= \" AND p.entity = \".$conf->entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i=0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$list[$i] = $obj->fk_soc;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t/**\n\t *  Recopie les prix d'un produit/service sur un autre\n\t *\n\t *  @param\tint\t\t$fromId     Id product source\n\t *  @param  int\t\t$toId       Id product target\n\t *  @return nt         \t\t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction clone_price($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t// les prix\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_price (\";\n\t\t$sql.= \" fk_product, date_price, price, tva_tx, localtax1_tx, localtax2_tx, fk_user_author, tosell)\";\n\t\t$sql.= \" SELECT \".$toId . \", date_price, price, tva_tx, localtax1_tx, localtax2_tx, fk_user_author, tosell\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price \";\n\t\t$sql.= \" WHERE fk_product = \". $fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_price', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Clone links between products\n\t *\n\t * @param  int\t\t$fromId\t\tProduct id\n\t * @param  int\t\t$toId\t\tProduct id\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tfunction clone_associations($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association (fk_product_pere, fk_product_fils, qty)';\n\t\t$sql.= \" SELECT \".$toId.\", fk_product_fils, qty FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere = \".$fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_association', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Recopie les fournisseurs et prix fournisseurs d'un produit/service sur un autre\n\t *\n\t *  @param    int\t$fromId      Id produit source\n\t *  @param    int\t$toId        Id produit cible\n\t *  @return   int    \t\t     < 0 si erreur, > 0 si ok\n\t */\n\tfunction clone_fournisseurs($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t$now=dol_now();\n\n\t\t// les fournisseurs\n\t\t/*$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur (\"\n\t\t. \" datec, fk_product, fk_soc, ref_fourn, fk_user_author )\"\n\t\t. \" SELECT '\".$this->db->idate($now).\"', \".$toId.\", fk_soc, ref_fourn, fk_user_author\"\n\t\t. \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur\"\n\t\t. \" WHERE fk_product = \".$fromId;\n\n\t\tif ( ! $this->db->query($sql ) )\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}*/\n\n\t\t// les prix de fournisseurs.\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur_price (\";\n\t\t$sql.= \" datec, fk_product, fk_soc, price, quantity, fk_user)\";\n\t\t$sql.= \" SELECT '\".$this->db->idate($now).\"', \".$toId. \", fk_soc, price, quantity, fk_user\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql.= \" WHERE fk_product = \".$fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_fournisseurs', LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t    $this->db->commit();\n\t\t    return 1;\n\t\t}\n\t}\n\n\t/**\n\t *  Fonction recursive uniquement utilisee par get_arbo_each_prod, recompose l'arborescence des sousproduits\n\t * \tDefine value of this->res\n\t *\n\t *\t@param\t\tarray\t\t$prod\t\t\tProducts array\n\t *\t@param\t\tstring\t\t$compl_path\t\tDirectory path of parents to add before\n\t *\t@param\t\tint\t\t\t$multiply\t\tBecause each sublevel must be multiplicated by parent nb\n\t *\t@param\t\tint\t\t\t$level\t\t\tInit level\n\t *  @param\t\tint\t\t\t$id_parent\t\tId parent\n\t *  @return \tvoid\n\t */\n\tfunction fetch_prod_arbo($prod, $compl_path=\"\", $multiply=1, $level=1, $id_parent=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$product = new Product($this->db);\n\t\t//var_dump($prod);\n\t\tforeach($prod as $id_product => $desc_pere)\t// $id_product is 0 (first call starting with root top) or an id of a sub_product\n\t\t{\n\t\t\tif (is_array($desc_pere))\t// If desc_pere is an array, this means it's a child\n\t\t\t{\n\t\t\t\t$id=(! empty($desc_pere[0]) ? $desc_pere[0] :'');\n\t\t\t\t$nb=(! empty($desc_pere[1]) ? $desc_pere[1] :'');\n\t\t\t\t$type=(! empty($desc_pere[2]) ? $desc_pere[2] :'');\n\t\t\t\t$label=(! empty($desc_pere[3]) ? $desc_pere[3] :'');\n\t\t\t\t$incdec=!empty($desc_pere[4]) ? $desc_pere[4] : 0;\n\n\t\t\t\tif ($multiply < 1) $multiply=1;\n\n\t\t\t\t//print \"XXX We add id=\".$id.\" - label=\".$label.\" - nb=\".$nb.\" - multiply=\".$multiply.\" fullpath=\".$compl_path.$label.\"\\n\";\n\t\t\t\t$this->fetch($id);\t\t// Load product\n\t\t\t\t$this->load_stock('nobatch,novirtual');\t// Load stock to get true this->stock_reel\n\t\t\t\t$this->res[]= array(\n\t\t\t\t\t'id'=>$id,\t\t\t\t\t// Id product\n\t\t\t\t\t'id_parent'=>$id_parent,\n\t\t\t\t\t'ref'=>$this->ref,\t\t\t// Ref product\n\t\t\t\t\t'nb'=>$nb,\t\t\t\t\t// Nb of units that compose parent product\n\t\t\t\t\t'nb_total'=>$nb*$multiply,\t// Nb of units for all nb of product\n\t\t\t\t\t'stock'=>$this->stock_reel,\t// Stock\n\t\t\t\t\t'stock_alert'=>$this->seuil_stock_alerte,\t// Stock alert\n\t\t\t\t\t'label'=>$label,\n\t\t\t\t\t'fullpath'=>$compl_path.$label,\t\t\t// Label\n\t\t\t\t\t'type'=>$type,\t\t\t\t// Nb of units that compose parent product\n\t\t\t\t\t'desiredstock'=>$this->desiredstock,\n\t\t\t\t\t'level'=>$level,\n\t\t\t\t\t'incdec'=>$incdec,\n\t\t\t\t\t'entity'=>$this->entity\n\t\t\t\t);\n\n\t\t\t\t// Recursive call if there is childs to child\n\t\t\t\tif (is_array($desc_pere['childs']))\n\t\t\t\t{\n\t\t\t\t\t//print 'YYY We go down for '.$desc_pere[3].\" -> \\n\";\n\t\t\t\t\t$this->fetch_prod_arbo($desc_pere['childs'], $compl_path.$desc_pere[3].\" -> \", $desc_pere[1]*$multiply, $level+1, $id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Build the tree of subproducts into an array\n\t *  this->sousprods is loaded by this->get_sousproduits_arbo()\n\t *\n\t *\t@param\t\tint\t\t$multiply\t\tBecause each sublevel must be multiplicated by parent nb\n\t *  @return \tarray \t\t\t\t\t$this->res\n\t */\n\tfunction get_arbo_each_prod($multiply=1)\n\t{\n\t\t$this->res = array();\n\t\tif (isset($this->sousprods) && is_array($this->sousprods))\n\t\t{\n\t\t\tforeach($this->sousprods as $prod_name => $desc_product)\n\t\t\t{\n\t\t\t\tif (is_array($desc_product)) $this->fetch_prod_arbo($desc_product,\"\",$multiply,1,$this->id);\n\t\t\t}\n\t\t}\n\t\t//var_dump($this->res);\n\t\treturn $this->res;\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t *  @return \tint\t\t\tNb of father + child\n\t */\n\tfunction hasFatherOrChild()\n\t{\n\t\t$nb = 0;\n\n\t\t$sql = \"SELECT COUNT(pa.rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql.= \" WHERE pa.fk_product_fils = \".$this->id.\" OR pa.fk_product_pere = \".$this->id;\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) $nb = $obj->nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t *  @return \tarray \t\tArray of product\n\t */\n\tfunction getFather()\n\t{\n\t\t$sql = \"SELECT p.rowid, p.label as label, p.ref as ref, pa.fk_product_pere as id, p.fk_product_type, pa.qty, pa.incdec, p.entity\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= \" WHERE p.rowid = pa.fk_product_pere\";\n\t\t$sql.= \" AND pa.fk_product_fils = \".$this->id;\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$prods = array ();\n\t\t\twhile ($record = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\t// $record['id'] = $record['rowid'] = id of father\n\t\t\t\t$prods[$record['id']]['id'] = $record['rowid'];\n\t\t\t\t$prods[$record['id']]['ref'] = $record['ref'];\n\t\t\t\t$prods[$record['id']]['label'] = $record['label'];\n\t\t\t\t$prods[$record['id']]['qty'] = $record['qty'];\n\t\t\t\t$prods[$record['id']]['incdec'] = $record['incdec'];\n\t\t\t\t$prods[$record['id']]['fk_product_type'] =  $record['fk_product_type'];\n\t\t\t\t$prods[$record['id']]['entity'] =  $record['entity'];\n\t\t\t}\n\t\t\treturn $prods;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return childs of product $id\n\t *\n\t * \t@param\t\tint\t\t$id\t\t\t\t\tId of product to search childs of\n\t *  @param\t\tint\t\t$firstlevelonly\t\tReturn only direct child\n\t *  @param\t\tint\t\t$level\t\t\t\tLevel of recursing call (start to 1)\n\t *  @return     array       \t\t\t\tReturn array(prodid=>array(0=prodid, 1=>qty, 2=> ...)\n\t */\n\tfunction getChildsArbo($id, $firstlevelonly=0, $level=1)\n\t{\n\t\tglobal $alreadyfound;\n\n\t\t$sql = \"SELECT p.rowid, p.label as label, pa.qty as qty, pa.fk_product_fils as id, p.fk_product_type, pa.incdec\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql.= \" WHERE p.rowid = pa.fk_product_fils\";\n\t\t$sql.= \" AND pa.fk_product_pere = \".$id;\n\t\t$sql.= \" AND pa.fk_product_fils != \".$id;\t// This should not happens, it is to avoid infinite loop if it happens\n\n\t\tdol_syslog(get_class($this).'::getChildsArbo id='.$id.' level='.$level, LOG_DEBUG);\n\n\t\tif ($level == 1) $alreadyfound=array($id=>1);\t// We init array of found object to start of tree, so if we found it later (should not happened), we stop immediatly\n\t\t// Protection against infinite loop\n\t\tif ($level > 30) return array();\n\n\t\t$res  = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$prods = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\tif (! empty($alreadyfound[$rec['rowid']]))\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).'::getChildsArbo the product id='.$rec['rowid'].' was already found at a higher level in tree. We discard to avoid infinite loop', LOG_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$alreadyfound[$rec['rowid']]=1;\n\t\t\t\t$prods[$rec['rowid']]= array(\n\t\t\t\t\t0=>$rec['rowid'],\n\t\t\t\t\t1=>$rec['qty'],\n\t\t\t\t\t2=>$rec['fk_product_type'],\n\t\t\t\t\t3=>$this->db->escape($rec['label']),\n\t\t\t\t\t4=>$rec['incdec']\n\t\t\t\t);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty'],2=>$rec['fk_product_type']);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty']);\n\t\t\t\tif (empty($firstlevelonly))\n\t\t\t\t{\n\t\t\t\t\t$listofchilds=$this->getChildsArbo($rec['rowid'], 0, $level + 1);\n\t\t\t\t\tforeach($listofchilds as $keyChild => $valueChild)\n\t\t\t\t\t{\n\t\t\t\t\t\t$prods[$rec['rowid']]['childs'][$keyChild] = $valueChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $prods;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \tReturn tree of all subproducts for product. Tree contains id, name and quantity.\n\t * \tSet this->sousprods\n\t *\n\t *  @return    \tvoid\n\t */\n\tfunction get_sousproduits_arbo()\n\t{\n\t    $parent=array();\n\n\t\tforeach($this->getChildsArbo($this->id) as $keyChild => $valueChild)\t// Warning. getChildsArbo can call getChildsArbo recursively. Starting point is $value[0]=id of product\n\t\t{\n\t\t\t$parent[$this->label][$keyChild] = $valueChild;\n\t\t}\n\t\tforeach($parent as $key => $value)\t\t// key=label, value is array of childs\n\t\t{\n\t\t\t$this->sousprods[$key] = $value;\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn clicable link of object (with eventually picto)\n\t *\n\t *\t@param\t\tint\t\t$withpicto\t\t\t\t\tAdd picto into link\n\t *\t@param\t\tstring\t$option\t\t\t\t\t\tWhere point the link ('stock', 'composition', 'category', 'supplier', '')\n\t *\t@param\t\tint\t\t$maxlength\t\t\t\t\tMaxlength of ref\n     *  @param      int     $save_lastsearch_value\t\t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\t\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tfunction getNomUrl($withpicto=0, $option='', $maxlength=0, $save_lastsearch_value=-1)\n\t{\n\t\tglobal $conf, $langs, $hookmanager;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\t\t$result='';\n        $newref=$this->ref;\n        if ($maxlength) $newref=dol_trunc($newref,$maxlength,'middle');\n\n        if ($this->type == Product::TYPE_PRODUCT) $label = '<u>' . $langs->trans(\"ShowProduct\") . '</u>';\n        if ($this->type == Product::TYPE_SERVICE) $label = '<u>' . $langs->trans(\"ShowService\") . '</u>';\n        if (! empty($this->ref))\n            $label .= '<br><b>' . $langs->trans('ProductRef') . ':</b> ' . $this->ref;\n        if (! empty($this->label))\n            $label .= '<br><b>' . $langs->trans('ProductLabel') . ':</b> ' . $this->label;\n\n        if ($this->type == Product::TYPE_PRODUCT)\n        {\n            if ($this->weight)  $label.=\"<br><b>\".$langs->trans(\"Weight\").'</b>: '.$this->weight.' '.measuring_units_string($this->weight_units,\"weight\");\n    \t\tif ($this->length)  $label.=\"<br><b>\".$langs->trans(\"Length\").'</b>: '.$this->length.' '.measuring_units_string($this->length_units,'length');\n    \t\tif ($this->surface) $label.=\"<br><b>\".$langs->trans(\"Surface\").'</b>: '.$this->surface.' '.measuring_units_string($this->surface_units,'surface');\n    \t\tif ($this->volume)  $label.=\"<br><b>\".$langs->trans(\"Volume\").'</b>: '.$this->volume.' '.measuring_units_string($this->volume_units,'volume');\n        }\n\n        if ($this->type == Product::TYPE_PRODUCT || ! empty($conf->global->STOCK_SUPPORTS_SERVICES))\n        {\n    \t\tif (! empty($conf->productbatch->enabled))\n            {\n            \t$langs->load(\"productbatch\");\n                $label.=\"<br><b>\".$langs->trans(\"ManageLotSerial\").'</b>: '.$this->getLibStatut(0,2);\n            }\n        }\n        if ($this->type == Product::TYPE_SERVICE)\n        {\n            //\n        }\n        if (! empty($conf->accounting->enabled) && $this->status)\n        {\n        \tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellCode') . ':</b> '. length_accountg($this->accountancy_code_sell);\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellIntraCode') . ':</b> '. length_accountg($this->accountancy_code_sell_export);\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellExportCode') . ':</b> '. length_accountg($this->accountancy_code_sell_intra);\n        }\n        if (! empty($conf->accounting->enabled) && $this->status_buy)\n        {\n        \tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancyBuyCode') . ':</b> '. length_accountg($this->accountancy_code_buy);\n        }\n        if (! empty($this->entity))\n        {\n            $tmpphoto = $this->show_photos('product', $conf->product->multidir_output[$this->entity], 1, 1, 0, 0, 0, 80);\n            if ($this->nbphoto > 0) $label .= '<br>' . $tmpphoto;\n        }\n\n\t\t$linkclose='';\n\t\tif (empty($notooltip))\n\t\t{\n\t\t    if (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t\t    {\n\t\t        $label=$langs->trans(\"ShowOrder\");\n\t\t        $linkclose.=' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t    }\n\n\t\t    $linkclose.= ' title=\"'.dol_escape_htmltag($label, 1, 1).'\"';\n\t\t    $linkclose.= ' class=\"classfortooltip\"';\n\n\t\t    /*\n\t        $hookmanager->initHooks(array('productdao'));\n\t        $parameters=array('id'=>$this->id);\n\t        $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t        if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t        */\n\t\t}\n\n        if ($option == 'supplier' || $option == 'category') {\n            $url = DOL_URL_ROOT.'/product/fournisseurs.php?id='.$this->id;\n        } else if ($option == 'stock') {\n            $url = DOL_URL_ROOT.'/product/stock/product.php?id='.$this->id;\n        } else if ($option == 'composition') {\n            $url = DOL_URL_ROOT.'/product/composition/card.php?id='.$this->id;\n        } else {\n            $url = DOL_URL_ROOT.'/product/card.php?id='.$this->id;\n        }\n\n        if ($option !== 'nolink')\n        {\n        \t// Add param to save lastsearch_values or not\n        \t$add_save_lastsearch_values=($save_lastsearch_value == 1 ? 1 : 0);\n        \tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/',$_SERVER[\"PHP_SELF\"])) $add_save_lastsearch_values=1;\n        \tif ($add_save_lastsearch_values) $url.='&save_lastsearch_values=1';\n        }\n\n        $linkstart = '<a href=\"'.$url.'\"';\n        $linkstart.=$linkclose.'>';\n        $linkend='</a>';\n\n        $result.=$linkstart;\n\t\tif ($withpicto) {\n\t\t\tif ($this->type == Product::TYPE_PRODUCT) $result.=(img_object(($notooltip?'':$label), 'product', ($notooltip?'class=\"paddingright\"':'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip?0:1));\n\t\t\tif ($this->type == Product::TYPE_SERVICE) $result.=(img_object(($notooltip?'':$label), 'service',  ($notooltip?'class=\"paddinright\"':'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip?0:1));\n\t\t}\n\t\t$result.= $newref;\n\t\t$result.= $linkend;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters=array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook=$hookmanager->executeHooks('getNomUrl',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) $result = $hookmanager->resPrint;\n\t\telse $result .= $hookmanager->resPrint;\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails=0, $hidedesc=0, $hideref=0)\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$langs->load(\"products\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (! dol_strlen($modele))\n\t\t{\n\t\t\tif (! empty($conf->global->PRODUCT_ADDON_PDF))\n\t\t\t{\n\t\t\t\t$modele = $conf->global->PRODUCT_ADDON_PDF;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$modele = 'strato';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/product/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t}\n\n\t/**\n\t *\tReturn label of status of object\n\t *\n\t *\t@param      int\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t *\t@param      int\t$type       0=Sell, 1=Buy, 2=Batch Number management\n\t *\t@return     string      \tLabel of status\n\t */\n\tfunction getLibStatut($mode=0, $type=0)\n\t{\n\t\tswitch ($type)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\treturn $this->LibStatut($this->status,$mode,$type);\n\t\t\tcase 1:\n\t\t\t\treturn $this->LibStatut($this->status_buy,$mode,$type);\n\t\t\tcase 2:\n\t\t\t\treturn $this->LibStatut($this->status_batch,$mode,$type);\n\t\t\tdefault:\n\t\t\t\t//Simulate previous behavior but should return an error string\n\t\t\t\treturn $this->LibStatut($this->status_buy,$mode,$type);\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn label of a given status\n\t *\n\t *\t@param      int\t\t$status     Statut\n\t *\t@param      int\t\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t *\t@param      int\t\t$type       0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t *\t@return     string      \t\tLabel of status\n\t */\n\tfunction LibStatut($status,$mode=0,$type=0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs->load('products');\n\t\tif (! empty($conf->productbatch->enabled)) $langs->load(\"productbatch\");\n\n\t\tif ($type == 2)\n\t\t{\n\t\t\tswitch ($mode)\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\treturn ($status == 0 ? $langs->trans('ProductStatusNotOnBatch') : $langs->trans('ProductStatusOnBatch'));\n\t\t\t\tcase 1:\n\t\t\t\t\treturn ($status == 0 ? $langs->trans('ProductStatusNotOnBatchShort') : $langs->trans('ProductStatusOnBatchShort'));\n\t\t\t\tcase 2:\n\t\t\t\t\treturn $this->LibStatut($status,3,2).' '.$this->LibStatut($status,1,2);\n\t\t\t\tcase 3:\n\t\t\t\t\tif ($status == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn img_picto($langs->trans('ProductStatusNotOnBatch'),'statut5');\n\t\t\t\t\t}\n\t\t\t\t\treturn img_picto($langs->trans('ProductStatusOnBatch'),'statut4');\n\t\t\t\tcase 4:\n\t\t\t\t\treturn $this->LibStatut($status,3,2).' '.$this->LibStatut($status,0,2);\n\t\t\t\tcase 5:\n\t\t\t\t\treturn $this->LibStatut($status,1,2).' '.$this->LibStatut($status,3,2);\n\t\t\t\tdefault:\n\t\t\t\t\treturn $langs->trans('Unknown');\n\t\t\t}\n\t\t}\n\t\tif ($mode == 0)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort'));\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort'));\n\t\t}\n\t\tif ($mode == 1)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy'));\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy'));\n\t\t}\n\t\tif ($mode == 2)\n\t\t{\n\t\t\tif ($status == 0) return img_picto($langs->trans('ProductStatusNotOnSell'),'statut5', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort'));\n\t\t\tif ($status == 1) return img_picto($langs->trans('ProductStatusOnSell'),'statut4', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort'));\n\t\t}\n\t\tif ($mode == 3)\n\t\t{\n\t\t\tif ($status == 0) return img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell') : $langs->trans('ProductStatusNotOnBuy')),'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return img_picto(($type==0 ? $langs->trans('ProductStatusOnSell') : $langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 4)\n\t\t{\n\t\t\tif ($status == 0) return img_picto($langs->trans('ProductStatusNotOnSell'),'statut5', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy'));\n\t\t\tif ($status == 1) return img_picto($langs->trans('ProductStatusOnSell'),'statut4', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy'));\n\t\t}\n\t\tif ($mode == 5)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy')), 'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 6)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy')), 'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\treturn $langs->trans('Unknown');\n\t}\n\n\n\t/**\n\t *  Retourne le libelle du finished du produit\n\t *\n\t *  @return     string\t\tLibelle\n\t */\n\tfunction getLibFinished()\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('products');\n\n\t\tif ($this->finished == '0') return $langs->trans(\"RowMaterial\");\n\t\tif ($this->finished == '1') return $langs->trans(\"Finished\");\n\t\treturn '';\n\t}\n\n\n\t/**\n\t *  Adjust stock in a warehouse for product\n\t *\n\t *  @param  \tUser\t$user           user asking change\n\t *  @param  \tint\t\t$id_entrepot    id of warehouse\n\t *  @param  \tdouble\t$nbpiece        nb of units\n\t *  @param  \tint\t\t$movement       0 = add, 1 = remove\n\t * \t@param\t\tstring\t$label\t\t\tLabel of stock movement\n\t * \t@param\t\tdouble\t$price\t\t\tUnit price HT of product, used to calculate average weighted price (PMP in french). If 0, average weighted price is not changed.\n\t *  @param\t\tstring\t$inventorycode\tInventory code\n\t *  @param  \tstring\t$origin_element Origin element type\n\t *  @param  \tint\t\t$origin_id      Origin id of element\n\t * \t@return     int     \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction correct_stock($user, $id_entrepot, $nbpiece, $movement, $label='', $price=0, $inventorycode='', $origin_element='', $origin_id=null)\n\t{\n\t\tif ($id_entrepot)\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\trequire_once DOL_DOCUMENT_ROOT .'/product/stock/class/mouvementstock.class.php';\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock=new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id);\n\t\t\t$result=$movementstock->_create($user,$this->id,$id_entrepot,$op[$movement],$movement,$price,$label,$inventorycode);\n\n\t\t\tif ($result >= 0)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    $this->error=$movementstock->error;\n\t\t\t    $this->errors=$movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Adjust stock in a warehouse for product with batch number\n\t *\n\t *  @param  \tUser\t$user           user asking change\n\t *  @param  \tint\t\t$id_entrepot    id of warehouse\n\t *  @param  \tdouble\t$nbpiece        nb of units\n\t *  @param  \tint\t\t$movement       0 = add, 1 = remove\n\t * \t@param\t\tstring\t$label\t\t\tLabel of stock movement\n\t * \t@param\t\tdouble\t$price\t\t\tPrice to use for stock eval\n\t * \t@param\t\tdate\t$dlc\t\t\teat-by date\n\t * \t@param\t\tdate\t$dluo\t\t\tsell-by date\n\t * \t@param\t\tstring\t$lot\t\t\tLot number\n\t *  @param\t\tstring\t$inventorycode\tInventory code\n\t *  @param  \tstring\t$origin_element Origin element type\n\t *  @param  \tint\t\t$origin_id      Origin id of element\n\t * \t@return     int     \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction correct_stock_batch($user, $id_entrepot, $nbpiece, $movement, $label='', $price=0, $dlc='', $dluo='',$lot='', $inventorycode='', $origin_element='', $origin_id=null)\n\t{\n\t\tif ($id_entrepot)\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\trequire_once DOL_DOCUMENT_ROOT .'/product/stock/class/mouvementstock.class.php';\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock=new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id);\n\t\t\t$result=$movementstock->_create($user,$this->id,$id_entrepot,$op[$movement],$movement,$price,$label,$inventorycode,'',$dlc,$dluo,$lot);\n\n\t\t\tif ($result >= 0)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    $this->error=$movementstock->error;\n\t\t\t    $this->errors=$movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *    Load information about stock of a product into ->stock_reel, ->stock_warehouse[] (including stock_warehouse[idwarehouse]->detail_batch for batch products)\n\t *    This function need a lot of load. If you use it on list, use a cache to execute it once for each product id.\n\t *    If ENTREPOT_EXTRA_STATUS set, filtering on warehouse status possible.\n\t *\n\t *    @param      string   $option \t\t'' = Load all stock info, also from closed and internal warehouses,\n\t *\t\t\t\t\t\t\t\t\t\t'nobatch' = Do not load batch information,\n\t *\t\t\t\t\t\t\t\t\t\t'novirtual' = Do not load virtual stock,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseopen' = Load stock from open warehouses only,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseclosed' = Load stock from closed warehouses only,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseinternal' = Load stock from warehouses for internal correction/transfer only\n\t *    @return     int                   < 0 if KO, > 0 if OK\n\t *    @see\t\t  load_virtual_stock, getBatchInfo\n\t */\n\tfunction load_stock($option='')\n\t{\n\t\tglobal $conf;\n\n\t\t$this->stock_reel = 0;\n\t\t$this->stock_warehouse = array();\n\t\t$this->stock_theorique = 0;\n\n\t\t$warehouseStatus = array();\n\n\t\tif (preg_match('/warehouseclosed/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_CLOSED;\n\t\t}\n\t\tif (preg_match('/warehouseopen/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_OPEN_ALL;\n\t\t}\n\t\tif (preg_match('/warehouseinternal/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_OPEN_INTERNAL;\n\t\t}\n\n\t\t$sql = \"SELECT ps.rowid, ps.reel, ps.fk_entrepot\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"entrepot as w\";\n\t\t$sql.= \" WHERE w.entity IN (\".getEntity('stock').\")\";\n\t\t$sql.= \" AND w.rowid = ps.fk_entrepot\";\n\t\t$sql.= \" AND ps.fk_product = \".$this->id;\n\t\tif ($conf->global->ENTREPOT_EXTRA_STATUS && count($warehouseStatus)) $sql.= \" AND w.statut IN (\".$this->db->escape(implode(',',$warehouseStatus)).\")\";\n\n\t\tdol_syslog(get_class($this).\"::load_stock\", LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i=0;\n\t\t\tif ($num > 0)\n\t\t\t{\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$row = $this->db->fetch_object($result);\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot] = new stdClass();\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->real = $row->reel;\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->id = $row->rowid;\n\t\t\t\t\tif ((! preg_match('/nobatch/', $option)) && $this->hasbatch()) $this->stock_warehouse[$row->fk_entrepot]->detail_batch=Productbatch::findAll($this->db, $row->rowid, 1, $this->id);\n\t\t\t\t\t$this->stock_reel+=$row->reel;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($result);\n\n\t\t\tif (! preg_match('/novirtual/', $option))\n\t\t\t{\n\t\t\t    $this->load_virtual_stock();\t\t// This also load stats_commande_fournisseur, ...\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *    Load value ->stock_theorique of a product. Property this->id must be defined.\n\t *    This function need a lot of load. If you use it on list, use a cache to execute it one for each product id.\n\t *\n\t *    @return   int             < 0 if KO, > 0 if OK\n\t *    @see\t\tload_stock, getBatchInfo\n\t */\n    function load_virtual_stock()\n    {\n        global $conf;\n\n        $stock_commande_client=0;\n        $stock_commande_fournisseur=0;\n        $stock_sending_client=0;\n        $stock_reception_fournisseur=0;\n\n        if (! empty($conf->commande->enabled))\n        {\n            $result=$this->load_stats_commande(0,'1,2', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_commande_client=$this->stats_commande['qty'];\n        }\n        if (! empty($conf->expedition->enabled))\n        {\n            $result=$this->load_stats_sending(0,'1,2', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_sending_client=$this->stats_expedition['qty'];\n        }\n        if (! empty($conf->fournisseur->enabled))\n        {\n            $result=$this->load_stats_commande_fournisseur(0,'1,2,3,4', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_commande_fournisseur=$this->stats_commande_fournisseur['qty'];\n\n            $result=$this->load_stats_reception(0,'4', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_reception_fournisseur=$this->stats_reception['qty'];\n        }\n\n        // Stock decrease mode\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT) || ! empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n            $this->stock_theorique=$this->stock_reel-$stock_commande_client+$stock_sending_client;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_VALIDATE_ORDER)) {\n            $this->stock_theorique=$this->stock_reel;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n            $this->stock_theorique=$this->stock_reel-$stock_commande_client;\n        }\n        // Stock Increase mode\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_DISPATCH_ORDER)) {\n            $this->stock_theorique+=$stock_commande_fournisseur-$stock_reception_fournisseur;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_VALIDATE_ORDER)) {\n            $this->stock_theorique-=$stock_reception_fournisseur;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_BILL)) {\n            $this->stock_theorique+=$stock_commande_fournisseur-$stock_reception_fournisseur;\n        }\n    }\n\n\n\t/**\n\t *  Load existing information about a serial\n\t *\n\t *\t@param\t\tstring\t\t$batch\t\tLot/serial number\n\t *  @return     array\t\t\t\t\tArray with record into product_batch\n\t *  @see\t\tload_stock, load_virtual_stock\n\t */\n    function loadBatchInfo($batch)\n    {\n    \t$result=array();\n\n    \t$sql = \"SELECT pb.batch, pb.eatby, pb.sellby, SUM(pb.qty) FROM \".MAIN_DB_PREFIX.\"product_batch as pb, \".MAIN_DB_PREFIX.\"product_stock as ps\";\n    \t$sql.= \" WHERE pb.fk_product_stock = ps.rowid AND ps.fk_product = \".$this->id.\" AND pb.batch = '\".$this->db->escape($batch).\"'\";\n    \t$sql.= \" GROUP BY pb.batch, pb.eatby, pb.sellby\";\n    \tdol_syslog(get_class($this).\"::loadBatchInfo load first entry found for lot/serial = \".$batch, LOG_DEBUG);\n    \t$resql = $this->db->query($sql);\n    \tif ($resql)\n    \t{\n    \t\t$num = $this->db->num_rows($resql);\n    \t\t$i=0;\n    \t\twhile ($i < $num)\n    \t\t{\n    \t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$result[]=array('batch'=>$batch, 'eatby'=>$this->db->jdate($obj->eatby), 'sellby'=>$this->db->jdate($obj->sellby), 'qty'=>$obj->qty);\n\t\t\t\t$i++;\n    \t\t}\n    \t\treturn $result;\n    \t}\n    \telse\n    \t{\n    \t\tdol_print_error($this->db);\n    \t\t$this->db->rollback();\n    \t\treturn array();\n    \t}\n    }\n\n\n\t/**\n\t *  Move an uploaded file described into $file array into target directory $sdir.\n\t *\n\t *  @param  string\t$sdir       Target directory\n\t *  @param  string\t$file       Array of file info of file to upload: array('name'=>..., 'tmp_name'=>...)\n\t *  @return\tint\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction add_photo($sdir, $file)\n\t{\n\t\tglobal $conf;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$result = 0;\n\n\t\t$dir = $sdir;\n\t\tif (! empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $dir .= '/'. get_exdir($this->id,2,0,0,$this,'product') . $this->id .\"/photos\";\n\t\telse $dir .= '/'.get_exdir(0,0,0,0,$this,'product').dol_sanitizeFileName($this->ref);\n\n\t\tdol_mkdir($dir);\n\n\t\t$dir_osencoded=$dir;\n\n\t\tif (is_dir($dir_osencoded))\n\t\t{\n\t\t\t$originImage = $dir . '/' . $file['name'];\n\n\t\t\t// Cree fichier en taille origine\n\t\t\t$result=dol_move_uploaded_file($file['tmp_name'], $originImage, 1);\n\n\t\t\tif (file_exists(dol_osencode($originImage)))\n\t\t\t{\n\t\t\t\t// Create thumbs\n\t\t\t\t$this->addThumbs($originImage);\n\t\t\t}\n\t\t}\n\n\t\tif (is_numeric($result) && $result > 0) return 1;\n\t\telse return -1;\n\t}\n\n\t/**\n\t *  Return if at least one photo is available\n\t *\n\t *  @param      string\t\t$sdir       Directory to scan\n\t *  @return     boolean     \t\t\tTrue if at least one photo is available, False if not\n\t */\n\tfunction is_photo_available($sdir)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT .'/core/lib/files.lib.php';\n\t    include_once DOL_DOCUMENT_ROOT .'/core/lib/images.lib.php';\n\n\t\tglobal $conf;\n\n\t\t$dir = $sdir;\n\t\tif (! empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $dir .= '/'. get_exdir($this->id,2,0,0,$this,'product') . $this->id .\"/photos/\";\n\t\telse $dir .= '/'.get_exdir(0,0,0,0,$this,'product').dol_sanitizeFileName($this->ref).'/';\n\n\t\t$nbphoto=0;\n\n\t\t$dir_osencoded=dol_osencode($dir);\n\t\tif (file_exists($dir_osencoded))\n\t\t{\n\t\t\t$handle=opendir($dir_osencoded);\n\t\t\tif (is_resource($handle))\n\t\t\t{\n\t\t\t    while (($file = readdir($handle)) !== false)\n    \t\t\t{\n    \t\t\t\tif (! utf8_check($file)) $file=utf8_encode($file);\t// To be sure data is stored in UTF8 in memory\n    \t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) > 0) return true;\n    \t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t *  Retourne tableau de toutes les photos du produit\n\t *\n\t *  @param      string\t\t$dir        Repertoire a scanner\n\t *  @param      int\t\t\t$nbmax      Nombre maximum de photos (0=pas de max)\n\t *  @return     array       \t\t\tTableau de photos\n\t */\n\tfunction liste_photos($dir,$nbmax=0)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$nbphoto=0;\n\t\t$tabobj=array();\n\n\t\t$dir_osencoded=dol_osencode($dir);\n\t\t$handle=@opendir($dir_osencoded);\n\t\tif (is_resource($handle))\n\t\t{\n\t\t\twhile (($file = readdir($handle)) !== false)\n\t\t\t{\n\t\t\t\tif (! utf8_check($file)) $file=utf8_encode($file);\t// readdir returns ISO\n\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0)\n\t\t\t\t{\n\t\t\t\t\t$nbphoto++;\n\n\t\t\t\t\t// On determine nom du fichier vignette\n\t\t\t\t\t$photo=$file;\n\t\t\t\t\t$photo_vignette='';\n\t\t\t\t\tif (preg_match('/('.$this->regeximgext.')$/i', $photo, $regs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i', '', $photo).'_small'.$regs[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t$dirthumb = $dir.'thumbs/';\n\n\t\t\t\t\t// Objet\n\t\t\t\t\t$obj=array();\n\t\t\t\t\t$obj['photo']=$photo;\n\t\t\t\t\tif ($photo_vignette && dol_is_file($dirthumb.$photo_vignette)) $obj['photo_vignette']='thumbs/' . $photo_vignette;\n\t\t\t\t\telse $obj['photo_vignette']=\"\";\n\n\t\t\t\t\t$tabobj[$nbphoto-1]=$obj;\n\n\t\t\t\t\t// On continue ou on arrete de boucler ?\n\t\t\t\t\tif ($nbmax && $nbphoto >= $nbmax) break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclosedir($handle);\n\t\t}\n\n\t\treturn $tabobj;\n\t}\n\n\t/**\n\t *  Efface la photo du produit et sa vignette\n\t *\n\t *  @param  string\t\t$file        Chemin de l'image\n\t *  @return\tvoid\n\t */\n\tfunction delete_photo($file)\n\t{\n\t    require_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t    require_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n        $dir = dirname($file).'/'; // Chemin du dossier contenant l'image d'origine\n\t\t$dirthumb = $dir.'/thumbs/'; // Chemin du dossier contenant la vignette\n\t\t$filename = preg_replace('/'.preg_quote($dir,'/').'/i','',$file); // Nom du fichier\n\n\t\t// On efface l'image d'origine\n\t\tdol_delete_file($file, 0, 0, 0, $this); // For triggers\n\n\t\t// Si elle existe, on efface la vignette\n\t\tif (preg_match('/('.$this->regeximgext.')$/i',$filename,$regs))\n\t\t{\n\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i','',$filename).'_small'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette)))\n\t\t\t{\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\n\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i','',$filename).'_mini'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette)))\n\t\t\t{\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Load size of image file\n\t *\n\t *  @param  string\t$file        Path to file\n\t *  @return\tvoid\n\t */\n\tfunction get_image_size($file)\n\t{\n\t\t$file_osencoded=dol_osencode($file);\n\t\t$infoImg = getimagesize($file_osencoded); // Get information on image\n\t\t$this->imgWidth = $infoImg[0]; // Largeur de l'image\n\t\t$this->imgHeight = $infoImg[1]; // Hauteur de l'image\n\t}\n\n\t/**\n\t *  Load indicators this->nb for the dashboard\n\t *\n\t *  @return    int                 <0 if KO, >0 if OK\n\t */\n\tfunction load_state_board()\n\t{\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$this->nb=array();\n\n\t\t$sql = \"SELECT count(p.rowid) as nb, fk_product_type\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= ' WHERE p.entity IN ('.getEntity($this->element, 1).')';\n\t\t// Add where from hooks\n\t\tif (is_object($hookmanager))\n\t\t{\n\t\t    $parameters=array();\n\t\t    $reshook=$hookmanager->executeHooks('printFieldListWhere',$parameters);    // Note that $action and $object may have been modified by hook\n\t\t    $sql.=$hookmanager->resPrint;\n\t\t}\n        $sql.= ' GROUP BY fk_product_type';\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj=$this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\tif ($obj->fk_product_type == 1) $this->nb[\"services\"]=$obj->nb;\n\t\t\t\telse $this->nb[\"products\"]=$obj->nb;\n\t\t\t}\n            $this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n    /**\n     * Return if object is a product\n     *\n     * @return  boolean     True if it's a product\n     */\n\tfunction isProduct()\n\t{\n\t\treturn ($this->type == Product::TYPE_PRODUCT ? true : false);\n\t}\n\n    /**\n     * Return if object is a product\n     *\n     * @return  boolean     True if it's a service\n     */\n\tfunction isService()\n\t{\n\t\treturn ($this->type == Product::TYPE_SERVICE ? true : false);\n\t}\n\n    /**\n     *  Get a barcode from the module to generate barcode values.\n     *  Return value is stored into this->barcode\n     *\n     *\t@param\tProduct\t\t$object\t\tObject product or service\n     *\t@param\tstring\t\t$type\t\tBarcode type (ean, isbn, ...)\n     *  @return void\n     */\n    function get_barcode($object,$type='')\n    {\n        global $conf;\n\n        $result='';\n        if (! empty($conf->global->BARCODE_PRODUCT_ADDON_NUM))\n        {\n            $dirsociete=array_merge(array('/core/modules/barcode/'),$conf->modules_parts['barcode']);\n            foreach ($dirsociete as $dirroot)\n            {\n                $res=dol_include_once($dirroot.$conf->global->BARCODE_PRODUCT_ADDON_NUM.'.php');\n                if ($res) break;\n            }\n            $var = $conf->global->BARCODE_PRODUCT_ADDON_NUM;\n            $mod = new $var;\n\n            $result=$mod->getNextValue($object,$type);\n\n            dol_syslog(get_class($this).\"::get_barcode barcode=\".$result.\" module=\".$var);\n        }\n        return $result;\n    }\n\n    /**\n     *  Initialise an instance with random values.\n     *  Used to build previews or test instances.\n     *\tid must be 0 if object instance is a specimen.\n     *\n     *  @return\tvoid\n     */\n    function initAsSpecimen()\n    {\n        global $user,$langs,$conf,$mysoc;\n\n        $now=dol_now();\n\n        // Initialize parameters\n        $this->specimen=1;\n        $this->id=0;\n        $this->ref = 'PRODUCT_SPEC';\n        $this->label = 'PRODUCT SPECIMEN';\n        $this->description = 'This is description of this product specimen that was created the '.dol_print_date($now,'dayhourlog').'.';\n        $this->specimen=1;\n        $this->country_id=1;\n        $this->tosell=1;\n        $this->tobuy=1;\n\t\t$this->tobatch=0;\n        $this->note='This is a comment (private)';\n        $this->date_creation = $now;\n        $this->date_modification = $now;\n\n        $this->weight = 4;\n        $this->weight_unit = 1;\n\n        $this->length = 5;\n        $this->length_unit = 1;\n        $this->width = 6;\n        $this->width_unit = 0;\n        $this->height = null;\n        $this->height_unit = null;\n\n        $this->surface = 30;\n        $this->surface_unit = 0;\n        $this->volume = 300;\n        $this->volume_unit = 0;\n\n        $this->barcode=-1;\t// Create barcode automatically\n    }\n\n\t/**\n\t *\tReturns the text label from units dictionary\n\t *\n\t * \t@param\tstring $type Label type (long or short)\n\t *\t@return\tstring|int <0 if ko, label if ok\n\t */\n\tfunction getLabelOfUnit($type='long')\n\t{\n\t\tglobal $langs;\n\n\t\tif (!$this->fk_unit) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$langs->load('products');\n\n\t\t$label_type = 'label';\n\n\t\tif ($type == 'short')\n\t\t{\n\t\t\t$label_type = 'short_label';\n\t\t}\n\n\t\t$sql = 'select '.$label_type.' from '.MAIN_DB_PREFIX.'c_units where rowid='.$this->fk_unit;\n\t\t$resql = $this->db->query($sql);\n\t\tif($resql && $this->db->num_rows($resql) > 0)\n\t\t{\n\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t$label = $res[$label_type];\n\t\t\t$this->db->free($resql);\n\t\t\treturn $label;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\tdol_syslog(get_class($this).\"::getLabelOfUnit Error \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n    /**\n     * Return if object has a sell-by date or eat-by date\n     *\n     * @return  boolean     True if it's has\n     */\n\tfunction hasbatch()\n\t{\n\t\treturn ($this->status_batch == 1 ? true : false);\n\t}\n\n\n\t/**\n     * Return minimum product recommended price\n     *\n\t * @return\tint\t\t\tMinimum recommanded price that is higher price among all suppliers * PRODUCT_MINIMUM_RECOMMENDED_PRICE\n     */\n\tfunction min_recommended_price()\n\t{\n\t\tglobal $conf;\n\n\t\t$maxpricesupplier=0;\n\n\t\tif (! empty($conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE))\n\t\t{\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t\t$product_fourn = new ProductFournisseur($this->db);\n\t\t\t$product_fourn_list = $product_fourn->list_product_fournisseur_price($this->id, '', '');\n\n\t\t\tif (is_array($product_fourn_list) && count($product_fourn_list)>0)\n\t\t\t{\n\t\t\t\tforeach($product_fourn_list as $productfourn)\n\t\t\t\t{\n\t\t\t\t\tif ($productfourn->fourn_unitprice > $maxpricesupplier)\n\t\t\t\t\t{\n\t\t\t\t\t\t$maxpricesupplier = $productfourn->fourn_unitprice;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$maxpricesupplier *= $conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE;\n\t\t\t}\n\t\t}\n\n\t\treturn $maxpricesupplier;\n\t}\n\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t */\n\tpublic function setCategories($categories) {\n\t\t// Handle single category\n\t\tif (! is_array($categories)) {\n\t\t\t$categories = array($categories);\n\t\t}\n\n\t\t// Get current categories\n\t\trequire_once DOL_DOCUMENT_ROOT . '/categories/class/categorie.class.php';\n\t\t$c = new Categorie($this->db);\n\t\t$existing = $c->containing($this->id, Categorie::TYPE_PRODUCT, 'id');\n\n\t\t// Diff\n\t\tif (is_array($existing)) {\n\t\t\t$to_del = array_diff($existing, $categories);\n\t\t\t$to_add = array_diff($categories, $existing);\n\t\t} else {\n\t\t\t$to_del = array(); // Nothing to delete\n\t\t\t$to_add = $categories;\n\t\t}\n\n\t\t// Process\n\t\tforeach($to_del as $del) {\n\t\t\tif ($c->fetch($del) > 0) {\n\t\t\t\t$c->del_type($this, 'product');\n\t\t\t}\n\t\t}\n\t\tforeach ($to_add as $add) {\n\t\t\tif ($c->fetch($add) > 0) {\n\t\t\t\t$c->add_type($this, 'product');\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB \t$db \t\t\tDatabase handler\n\t * @param int \t\t$origin_id \t\tOld thirdparty id\n\t * @param int \t\t$dest_id \t\tNew thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'product_customer_price',\n\t\t\t'product_customer_price_log'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Generates prices for a product based on product multiprice generation rules\n\t *\n\t * @param User $user User that updates the prices\n\t * @param float $baseprice Base price\n\t * @param string $price_type Base price type\n\t * @param float $price_vat VAT % tax\n\t * @param int $npr NPR\n\t * @param string $psq \u00bf?\n\t * @return int -1 KO, 1 OK\n\t */\n\tpublic function generateMultiprices(User $user, $baseprice, $price_type, $price_vat, $npr, $psq)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t$sql = \"SELECT rowid, level, fk_level, var_percent, var_min_percent FROM \".MAIN_DB_PREFIX.\"product_pricerules\";\n\t\t$query = $db->query($sql);\n\n\t\t$rules = array();\n\n\t\twhile ($result = $db->fetch_object($query)) {\n\t\t\t$rules[$result->level] = $result;\n\t\t}\n\n\t\t//Because prices can be based on other level's prices, we temporarily store them\n\t\t$prices = array(\n\t\t\t1 => $baseprice\n\t\t);\n\n\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\n\t\t\t$price = $baseprice;\n\t\t\t$price_min = $baseprice;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\t//First price level only allows changing min_price\n\t\t\tif ($i > 1 && isset($rules[$i]->var_percent) && $rules[$i]->var_percent) {\n\t\t\t\t$price = $prices[$rules[$i]->fk_level] * (1 + ($rules[$i]->var_percent/100));\n\t\t\t}\n\n\t\t\t$prices[$i] = $price;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\tif (isset($rules[$i]->var_min_percent) && $rules[$i]->var_min_percent) {\n\t\t\t\t$price_min = $price * (1 - ($rules[$i]->var_min_percent/100));\n\t\t\t}\n\n\t\t\t//Little check to make sure the price is modified before triggering generation\n\t\t\t$check_amount = (($price == $this->multiprices[$i]) && ($price_min == $this->multiprices_min[$i]));\n\t\t\t$check_type = ($baseprice == $this->multiprices_base_type[$i]);\n\n\t\t\tif ($check_amount && $check_type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($this->updatePrice($price, $price_type, $user, $price_vat, $price_min, $i, $npr, $psq, true) < 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Returns the rights used for this class\n\t * @return stdClass\n\t */\n\tpublic function getRights()\n\t{\n\t\tglobal $user;\n\n\t\tif ($this->isProduct()) {\n\t\t\treturn $user->rights->produit;\n\t\t} else {\n\t\t\treturn $user->rights->service;\n\t\t}\n\t}\n\n    /**\n     *  Load information for tab info\n     *\n     *  @param  int\t\t$id     Id of thirdparty to load\n     *  @return\tvoid\n     */\n    function info($id)\n    {\n        $sql = \"SELECT p.rowid, p.ref, p.datec as date_creation, p.tms as date_modification,\";\n        $sql.= \" p.fk_user_author, p.fk_user_modif\";\n        $sql.= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as p\";\n        $sql.= \" WHERE p.rowid = \".$id;\n\n        $result=$this->db->query($sql);\n        if ($result)\n        {\n            if ($this->db->num_rows($result))\n            {\n                $obj = $this->db->fetch_object($result);\n\n                $this->id = $obj->rowid;\n\n                if ($obj->fk_user_author) {\n                    $cuser = new User($this->db);\n                    $cuser->fetch($obj->fk_user_author);\n                    $this->user_creation     = $cuser;\n                }\n\n                if ($obj->fk_user_modif) {\n                    $muser = new User($this->db);\n                    $muser->fetch($obj->fk_user_modif);\n                    $this->user_modification = $muser;\n                }\n\n                $this->ref\t\t\t     = $obj->ref;\n                $this->date_creation     = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n            }\n\n            $this->db->free($result);\n\n        }\n        else\n\t\t{\n            dol_print_error($this->db);\n        }\n    }\n\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2001-2007\tRodolphe Quiedeville\t<rodolphe@quiedeville.org>\n * Copyright (C) 2004-2014\tLaurent Destailleur\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t\t<regis.houssin@capnetworks.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t\t<acianfa@free.fr>\n * Copyright (C) 2007-2011\tJean Heimburger\t\t\t<jean@tiaris.info>\n * Copyright (C) 2010-2013\tJuanjo Menent\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2012       Cedric Salvador         <csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2014\tCedric GROSS\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2011-2017\tAlexandre Spangaro\t\t<aspangaro@zendsi.com>\n * Copyright (C) 2014\t\tHenry Florian\t\t\t<florian.henry@open-concept.pro>\n * Copyright (C) 2014-2016\tPhilippe Grand\t\t\t<philippe.grand@atoo-net.com>\n * Copyright (C) 2014\t\tIon agorria\t\t\t    <ion@agorria.com>\n * Copyright (C) 2016-2018\tFerran Marcet\t\t\t<fmarcet@2byte.es>\n * Copyright (C) 2017\t\tGustavo Novaro\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/product/class/product.class.php\n *\t\\ingroup    produit\n *\t\\brief      File of class to manage predefined products or services\n */\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/productbatch.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\n/**\n * Class to manage products or services\n */\nclass Product extends CommonObject\n{\n\tpublic $element='product';\n\tpublic $table_element='product';\n\tpublic $fk_element='fk_product';\n\tprotected $childtables=array('supplier_proposaldet', 'propaldet','commandedet','facturedet','contratdet','facture_fourn_det','commande_fournisseurdet');    // To test if we can delete object\n\tpublic $ismultientitymanaged = 1;\t// 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected $table_ref_field = 'ref';\n\n\tpublic $regeximgext='\\.gif|\\.jpg|\\.jpeg|\\.png|\\.bmp|\\.xpm|\\.xbm'; // See also into images.lib.php\n\n\t/*\n\t * @deprecated\n\t * @see label\n\t */\n\tpublic $libelle;\n\t/**\n\t * Product label\n\t * @var string\n\t */\n\tpublic $label;\n\n\t/**\n     \t* Product descripion\n     \t* @var string\n     \t*/\n\tpublic $description;\n\n\t/**\n\t * Check TYPE constants\n\t * @var int\n\t */\n\tpublic $type = self::TYPE_PRODUCT;\n\n\t/**\n\t * Selling price\n\t * @var float\n\t */\n\tpublic $price;\t\t\t// Price net\n\n\t/**\n\t * Price with tax\n\t * @var float\n\t */\n\tpublic $price_ttc;\n\n\t/**\n\t * Minimum price net\n\t * @var float\n\t */\n\tpublic $price_min;\n\n\t/**\n\t * Minimum price with tax\n\t * @var float\n\t */\n\tpublic $price_min_ttc;\n\n\t/*\n\t * Base price ('TTC' for price including tax or 'HT' for net price)\n\t * @var float\n\t */\n\tpublic $price_base_type;\n\n\t//! Arrays for multiprices\n\tpublic $multiprices=array();\n\tpublic $multiprices_ttc=array();\n\tpublic $multiprices_base_type=array();\n\tpublic $multiprices_min=array();\n\tpublic $multiprices_min_ttc=array();\n\tpublic $multiprices_tva_tx=array();\n\tpublic $multiprices_recuperableonly=array();\n\n\t//! Price by quantity arrays\n\tpublic $price_by_qty;\n\tpublic $prices_by_qty=array();\n\tpublic $prices_by_qty_id=array();\n\tpublic $prices_by_qty_list=array();\n\n\t//! Default VAT code for product (link to code into llx_c_tva but without foreign keys)\n\tpublic $default_vat_code;\n\n\t//! Default VAT rate of product\n\tpublic $tva_tx;\n\n\t//! French VAT NPR (0 or 1)\n    public $tva_npr=0;\n\n\t//! Other local taxes\n\tpublic $localtax1_tx;\n\tpublic $localtax2_tx;\n\tpublic $localtax1_type;\n\tpublic $localtax2_type;\n\n\t/**\n\t * Stock real\n\t * @var int\n\t */\n\tpublic $stock_reel = 0;\n\n\t/**\n\t * Stock virtual\n\t * @var int\n\t */\n\tpublic $stock_theorique;\n\n\t/**\n\t * Cost price\n\t * @var float\n\t */\n\tpublic $cost_price;\n\n\t//! Average price value for product entry into stock (PMP)\n\tpublic $pmp;\n\n\t/**\n\t * Stock alert\n\t * @var int\n\t */\n\tpublic $seuil_stock_alerte=0;\n\n\t/**\n\t * Ask for replenishment when $desiredstock < $stock_reel\n\t */\n\tpublic $desiredstock=0;\n\n\t/*\n\t * Service expiration\n\t */\n\tpublic $duration_value;\n\n\t/**\n\t * Exoiration unit\n\t */\n\tpublic $duration_unit;\n\n\t/**\n\t * Status indicates whether the product is on sale '1' or not '0'\n\t * @var int\n\t */\n\tpublic $status=0;\n\n\t/**\n\t * Status indicate whether the product is available for purchase '1' or not '0'\n\t * @var int\n\t */\n\tpublic $status_buy=0;\n\n\t/**\n\t * Status indicates whether the product is a finished product '1' or a raw material '0'\n\t * @var int\n\t */\n\tpublic $finished;\n\n\t/**\n\t * We must manage lot/batch number, sell-by date and so on : '1':yes '0':no\n\t * @var int\n\t */\n\tpublic $status_batch=0;\n\n\t/**\n\t * Customs code\n\t * @var\n\t */\n\tpublic $customcode;\n\n\t/**\n\t * Product URL\n\t * @var string\n\t */\n\tpublic $url;\n\n\t//! Unites de mesure\n\tpublic $weight;\n\tpublic $weight_units;\n\tpublic $length;\n\tpublic $length_units;\n\tpublic $surface;\n\tpublic $surface_units;\n\tpublic $volume;\n\tpublic $volume_units;\n\n\tpublic $accountancy_code_sell;\n\tpublic $accountancy_code_sell_intra;\n\tpublic $accountancy_code_sell_export;\n\tpublic $accountancy_code_buy;\n\n\t/**\n\t * Main barcode\n\t * barcode value\n\t * @var\n\t */\n\tpublic $barcode;\n\n\t/**\n\t * Additional barcodes (Some products have different barcodes according to the country of origin of manufacture)\n\t * @var array\n\t */\n\tpublic $barcodes_extra=array();\n\n\tpublic $stats_propale=array();\n\tpublic $stats_commande=array();\n\tpublic $stats_contrat=array();\n\tpublic $stats_facture=array();\n    public $stats_commande_fournisseur=array();\n\n\tpublic $multilangs=array();\n\n\t//! Taille de l'image\n\tpublic $imgWidth;\n\tpublic $imgHeight;\n\n\tpublic $date_creation;\n\tpublic $date_modification;\n\n\t//! Id du fournisseur\n\tpublic $product_fourn_id;\n\n\t//! Product ID already linked to a reference supplier\n\tpublic $product_id_already_linked;\n\n\tpublic $nbphoto=0;\n\n\t//! Contains detail of stock of product into each warehouse\n\tpublic $stock_warehouse=array();\n\n\tpublic $oldcopy;\n\n    public $fk_price_expression;\n\n    /* To store supplier price found */\n\tpublic $fourn_pu;\n\tpublic $fourn_price_base_type;\n\tpublic $fourn_socid;\n\n\t/**\n\t * @deprecated\n\t * @see ref_supplier\n\t */\n\tpublic $ref_fourn;\n\tpublic $ref_supplier;\n\n\t/**\n\t * Unit code ('km', 'm', 'l', 'p', ...)\n\t * @var string\n\t */\n\tpublic $fk_unit;\n\n\t/**\n\t * Price is generated using multiprice rules\n\t * @var int\n\t */\n\tpublic $price_autogen = 0;\n\n\n\t/**\n\t * Regular product\n\t */\n\tconst TYPE_PRODUCT = 0;\n\t/**\n\t * Service\n\t */\n\tconst TYPE_SERVICE = 1;\n\t/**\n\t * Advanced feature: assembly kit\n\t */\n\tconst TYPE_ASSEMBLYKIT = 2;\n\t/**\n\t * Advanced feature: stock kit\n\t */\n\tconst TYPE_STOCKKIT = 3;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t *  @param      DoliDB\t\t$db      Database handler\n\t */\n\tfunction __construct($db)\n\t{\n\t\tglobal $langs;\n\n\t\t$this->db = $db;\n\t\t$this->canvas = '';\n\t}\n\n\t/**\n\t *    Check that ref and label are ok\n\t *\n\t *    @return     int         >1 if OK, <=0 if KO\n\t */\n\tfunction check()\n\t{\n\t\t$this->ref = dol_sanitizeFileName(stripslashes($this->ref));\n\n\t\t$err = 0;\n\t\tif (dol_strlen(trim($this->ref)) == 0)\n\t\t$err++;\n\n\t\tif (dol_strlen(trim($this->label)) == 0)\n\t\t$err++;\n\n\t\tif ($err > 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *\tInsert product into database\n\t *\n\t *\t@param\tUser\t$user     \t\tUser making insert\n\t *  @param\tint\t\t$notrigger\t\tDisable triggers\n\t *\t@return int\t\t\t     \t\tId of product/service if OK, < 0 if KO\n\t */\n\tfunction create($user,$notrigger=0)\n\t{\n\t\tglobal $conf, $langs;\n\n        \t$error=0;\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->price_ttc=price2num($this->price_ttc);\n\t\t$this->price=price2num($this->price);\n\t\t$this->price_min_ttc=price2num($this->price_min_ttc);\n\t\t$this->price_min=price2num($this->price_min);\n\t\tif (empty($this->tva_tx))    \t$this->tva_tx = 0;\n\t\tif (empty($this->tva_npr))    \t$this->tva_npr = 0;\n\t\t//Local taxes\n\t\tif (empty($this->localtax1_tx)) $this->localtax1_tx = 0;\n\t\tif (empty($this->localtax2_tx)) $this->localtax2_tx = 0;\n\t\tif (empty($this->localtax1_type)) $this->localtax1_type = '0';\n\t\tif (empty($this->localtax2_type)) $this->localtax2_type = '0';\n\n\t\tif (empty($this->price))     \t$this->price = 0;\n\t\tif (empty($this->price_min)) \t$this->price_min = 0;\n\n\t\t// Price by quantity\n\t\tif (empty($this->price_by_qty)) \t$this->price_by_qty = 0;\n\n\t\tif (empty($this->status))    \t$this->status = 0;\n\t\tif (empty($this->status_buy))   $this->status_buy = 0;\n\n\t\t$price_ht=0;\n\t\t$price_ttc=0;\n\t\t$price_min_ht=0;\n\t\t$price_min_ttc=0;\n\n\t\t//\n\t\tif ($this->price_base_type == 'TTC' && $this->price_ttc > 0)\n\t\t{\n\t\t\t$price_ttc = price2num($this->price_ttc,'MU');\n\t\t\t$price_ht = price2num($this->price_ttc / (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif ($this->price_base_type != 'TTC' && $this->price > 0)\n\t\t{\n\t\t\t$price_ht = price2num($this->price,'MU');\n\t\t\t$price_ttc = price2num($this->price * (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min_ttc > 0) && ($this->price_base_type == 'TTC'))\n\t\t{\n\t\t\t$price_min_ttc = price2num($this->price_min_ttc,'MU');\n\t\t\t$price_min_ht = price2num($this->price_min_ttc / (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min > 0) && ($this->price_base_type != 'TTC'))\n\t\t{\n\t\t\t$price_min_ht = price2num($this->price_min,'MU');\n\t\t\t$price_min_ttc = price2num($this->price_min * (1 + ($this->tva_tx / 100)),'MU');\n\t\t}\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_sell= trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra= trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export= trim($this->accountancy_code_sell_export);\n\n\t\t// Barcode value\n\t\t$this->barcode=trim($this->barcode);\n\n\t\t// Check parameters\n\t\tif (empty($this->label))\n\t\t{\n\t\t\t$this->error='ErrorMandatoryParametersNotProvided';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($this->ref))\n\t\t{\n\t\t\t// Load object modCodeProduct\n\t\t\t$module=(! empty($conf->global->PRODUCT_CODEPRODUCT_ADDON)?$conf->global->PRODUCT_CODEPRODUCT_ADDON:'mod_codeproduct_leopard');\n\t\t\tif ($module != 'mod_codeproduct_leopard')\t// Do not load module file for leopard\n\t\t\t{\n\t\t\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php')\n\t\t\t\t{\n\t\t\t\t\t$module = substr($module, 0, dol_strlen($module)-4);\n\t\t\t\t}\n\t\t\t\tdol_include_once('/core/modules/product/'.$module.'.php');\n\t\t\t\t$modCodeProduct = new $module;\n\t\t\t\tif (! empty($modCodeProduct->code_auto))\n\t\t\t\t{\n\t\t\t\t\t$this->ref = $modCodeProduct->getNextValue($this,$this->type);\n\t\t\t\t}\n\t\t\t\tunset($modCodeProduct);\n\t\t\t}\n\n\t\t\tif (empty($this->ref))\n\t\t\t{\n\t\t\t\t$this->error='ProductModuleNotSetupForAutoRef';\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create ref=\".$this->ref.\" price=\".$this->price.\" price_ttc=\".$this->price_ttc.\" tva_tx=\".$this->tva_tx.\" price_base_type=\".$this->price_base_type, LOG_DEBUG);\n\n\t\t$now=dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// For automatic creation during create action (not used by Dolibarr GUI, can be used by scripts)\n\t\tif ($this->barcode == -1) $this->barcode = $this->get_barcode($this,$this->barcode_type_code);\n\n\t\t// Check more parameters\n\t\t// If error, this->errors[] is filled\n\t\t$result = $this->verify();\n\n\t\tif ($result >= 0)\n\t\t{\n\t\t\t$sql = \"SELECT count(*) as nb\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql.= \" WHERE entity IN (\".getEntity('product').\")\";\n\t\t\t$sql.= \" AND ref = '\" .$this->db->escape($this->ref).\"'\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\tif ($obj->nb == 0)\n\t\t\t\t{\n\t\t\t\t\t// Produit non deja existant\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product (\";\n\t\t\t\t\t$sql.= \"datec\";\n\t\t\t\t\t$sql.= \", entity\";\n\t\t\t\t\t$sql.= \", ref\";\n\t\t\t\t\t$sql.= \", ref_ext\";\n\t\t\t\t\t$sql.= \", price_min\";\n\t\t\t\t\t$sql.= \", price_min_ttc\";\n\t\t\t\t\t$sql.= \", label\";\n\t\t\t\t\t$sql.= \", fk_user_author\";\n\t\t\t\t\t$sql.= \", fk_product_type\";\n\t\t\t\t\t$sql.= \", price\";\n\t\t\t\t\t$sql.= \", price_ttc\";\n\t\t\t\t\t$sql.= \", price_base_type\";\n\t\t\t\t\t$sql.= \", tobuy\";\n\t\t\t\t\t$sql.= \", tosell\";\n\t\t\t\t\t$sql.= \", accountancy_code_buy\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell_intra\";\n\t\t\t\t\t$sql.= \", accountancy_code_sell_export\";\n\t\t\t\t\t$sql.= \", canvas\";\n\t\t\t\t\t$sql.= \", finished\";\n\t\t\t\t\t$sql.= \", tobatch\";\n\t\t\t\t\t$sql.= \", fk_unit\";\n\t\t\t\t\t$sql.= \") VALUES (\";\n\t\t\t\t\t$sql.= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t\t$sql.= \", \".$conf->entity;\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->ref).\"'\";\n\t\t\t\t\t$sql.= \", \".(! empty($this->ref_ext)?\"'\".$this->db->escape($this->ref_ext).\"'\":\"null\");\n\t\t\t\t\t$sql.= \", \".price2num($price_min_ht);\n\t\t\t\t\t$sql.= \", \".price2num($price_min_ttc);\n\t\t\t\t\t$sql.= \", \".(! empty($this->label)?\"'\".$this->db->escape($this->label).\"'\":\"null\");\n\t\t\t\t\t$sql.= \", \".$user->id;\n\t\t\t\t\t$sql.= \", \".$this->type;\n\t\t\t\t\t$sql.= \", \".price2num($price_ht);\n\t\t\t\t\t$sql.= \", \".price2num($price_ttc);\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->price_base_type).\"'\";\n\t\t\t\t\t$sql.= \", \".$this->status;\n\t\t\t\t\t$sql.= \", \".$this->status_buy;\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t\t\t$sql.= \", '\".$this->db->escape($this->canvas).\"'\";\n\t\t\t\t\t$sql.= \", \".((! isset($this->finished) || $this->finished < 0 || $this->finished == '') ? 'null' : (int) $this->finished);\n\t\t\t\t\t$sql.= \", \".((empty($this->status_batch) || $this->status_batch < 0)? '0':$this->status_batch);\n\t\t\t\t\t$sql.= \", \".(!$this->fk_unit ? 'NULL' : $this->fk_unit);\n\t\t\t\t\t$sql.= \")\";\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::Create\", LOG_DEBUG);\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif ( $result )\n\t\t\t\t\t{\n\t\t\t\t\t\t$id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product\");\n\n\t\t\t\t\t\tif ($id > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->id\t\t\t\t= $id;\n\t\t\t\t\t\t\t$this->price\t\t\t= $price_ht;\n\t\t\t\t\t\t\t$this->price_ttc\t\t= $price_ttc;\n\t\t\t\t\t\t\t$this->price_min\t\t= $price_min_ht;\n\t\t\t\t\t\t\t$this->price_min_ttc\t= $price_min_ttc;\n\n\t\t\t\t\t\t\t$result = $this->_log_price($user);\n\t\t\t\t\t\t\tif ($result > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($this->update($id, $user, true, 'add') <= 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->error='ErrorFailedToGetInsertedId';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Product already exists with this ref\n\t\t\t\t\t$langs->load(\"products\");\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->error = \"ErrorProductAlreadyExists\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t}\n\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('PRODUCT_CREATE',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n        }\n        else\n       {\n            $this->db->rollback();\n            dol_syslog(get_class($this).\"::Create fails verify \".join(',',$this->errors), LOG_WARNING);\n            return -3;\n        }\n\n\t}\n\n\n    /**\n     *    Check properties of product are ok (like name, barcode, ...).\n     *    All properties must be already loaded on object (this->barcode, this->barcode_type_code, ...).\n     *\n     *    @return     int\t\t0 if OK, <0 if KO\n     */\n    function verify()\n    {\n        $this->errors=array();\n\n        $result = 0;\n        $this->ref = trim($this->ref);\n\n        if (! $this->ref)\n        {\n            $this->errors[] = 'ErrorBadRef';\n            $result = -2;\n        }\n\n        $rescode = $this->check_barcode($this->barcode, $this->barcode_type_code);\n        if ($rescode)\n        {\n        \tif ($rescode == -1)\n        \t{\n        \t\t$this->errors[] = 'ErrorBadBarCodeSyntax';\n        \t}\n        \telseif ($rescode == -2)\n        \t{\n        \t\t$this->errors[] = 'ErrorBarCodeRequired';\n        \t}\n        \telseif ($rescode == -3)\n        \t{\n        \t\t// Note: Common usage is to have barcode unique. For variants, we should have a different barcode.\n        \t\t$this->errors[] = 'ErrorBarCodeAlreadyUsed';\n        \t}\n\n        \t$result = -3;\n        }\n\n        return $result;\n    }\n\n    /**\n     *  Check barcode\n     *\n     *\t@param\tstring\t$valuetotest\tValue to test\n     *  @param\tstring\t$typefortest\tType of barcode (ISBN, EAN, ...)\n     *  @return int\t\t\t\t\t\t0 if OK\n     * \t\t\t\t\t\t\t\t\t-1 ErrorBadBarCodeSyntax\n     * \t\t\t\t\t\t\t\t\t-2 ErrorBarCodeRequired\n     * \t\t\t\t\t\t\t\t\t-3 ErrorBarCodeAlreadyUsed\n     */\n    function check_barcode($valuetotest,$typefortest)\n    {\n        global $conf;\n        if (! empty($conf->barcode->enabled) && ! empty($conf->global->BARCODE_PRODUCT_ADDON_NUM))\n        {\n        \t$module=strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\n            $dirsociete=array_merge(array('/core/modules/barcode/'),$conf->modules_parts['barcode']);\n            foreach ($dirsociete as $dirroot)\n            {\n                $res=dol_include_once($dirroot.$module.'.php');\n                if ($res) break;\n            }\n\n            $mod = new $module();\n\n            dol_syslog(get_class($this).\"::check_barcode value=\".$valuetotest.\" type=\".$typefortest.\" module=\".$module);\n            $result = $mod->verif($this->db, $valuetotest, $this, 0, $typefortest);\n            return $result;\n        }\n        else\n\t\t{\n            return 0;\n        }\n    }\n\n\t/**\n\t *\tUpdate a record into database.\n\t *  If batch flag is set to on, we create records into llx_product_batch\n\t *\n\t *\t@param\tint\t\t$id         Id of product\n\t *\t@param  User\t$user       Object user making update\n\t *\t@param\tint\t\t$notrigger\tDisable triggers\n\t *\t@param\tstring\t$action\t\tCurrent action for hookmanager ('add' or 'update')\n\t *\t@return int         \t\t1 if OK, -1 if ref already exists, -2 if other error\n\t */\n\tfunction update($id, $user, $notrigger=false, $action='update')\n\t{\n\t\tglobal $langs, $conf, $hookmanager;\n\n\t\t$error=0;\n\n\t\t// Check parameters\n\t\tif (! $this->label) $this->label = 'MISSING LABEL';\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->description = trim($this->description);\n\t\t$this->note = (isset($this->note) ? trim($this->note) : null);\n\t\t$this->weight = price2num($this->weight);\n\t\t$this->weight_units = trim($this->weight_units);\n\t\t$this->length = price2num($this->length);\n\t\t$this->length_units = trim($this->length_units);\n\t\t$this->width = price2num($this->width);\n\t\t$this->width_units = trim($this->width_units);\n\t\t$this->height = price2num($this->height);\n\t\t$this->height_units = trim($this->height_units);\n\t\t// set unit not defined\n\t\tif ($this->length_units) $this->width_units = $this->length_units;    // Not used yet\n\t\tif ($this->length_units) $this->height_units = $this->length_units;    // Not used yet\n\t\t// Automated compute surface and volume if not filled\n\t\tif (empty($this->surface) && !empty($this->length) && !empty($this->width) && $this->length_units == $this->width_units)\n\t\t{\n\t\t\t$this->surface = $this->length * $this->width;\n\t\t\t$this->surface_units = measuring_units_squared($this->length_units);\n\t\t}\n\t\tif (empty($this->volume) && !empty($this->surface_units) && !empty($this->height) && $this->length_units == $this->height_units)\n\t\t{\n\t\t\t$this->volume =  $this->surface * $this->height;\n\t\t\t$this->volume_units = measuring_units_cubed($this->height_units);\n\t\t}\n\n\t\t$this->surface = price2num($this->surface);\n\t\t$this->surface_units = trim($this->surface_units);\n\t\t$this->volume = price2num($this->volume);\n\t\t$this->volume_units = trim($this->volume_units);\n\t\tif (empty($this->tva_tx))    \t\t\t$this->tva_tx = 0;\n\t\tif (empty($this->tva_npr))    \t\t\t$this->tva_npr = 0;\n\t\tif (empty($this->localtax1_tx))\t\t\t$this->localtax1_tx = 0;\n\t\tif (empty($this->localtax2_tx))\t\t\t$this->localtax2_tx = 0;\n\t\tif (empty($this->localtax1_type))\t\t$this->localtax1_type = '0';\n\t\tif (empty($this->localtax2_type))\t\t$this->localtax2_type = '0';\n\t\tif (empty($this->status))\t\t\t\t$this->status = 0;\n\t\tif (empty($this->status_buy))\t\t\t$this->status_buy = 0;\n\n        if (empty($this->country_id))           $this->country_id = 0;\n\n        // Barcode value\n        $this->barcode=trim($this->barcode);\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_sell= trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra= trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export= trim($this->accountancy_code_sell_export);\n\n\n        $this->db->begin();\n\n        // Check name is required and codes are ok or unique.\n        // If error, this->errors[] is filled\n        if ($action != 'add')\n        {\n        \t$result = $this->verify();\t// We don't check when update called during a create because verify was already done\n        }\n\n        if ($result >= 0)\n        {\n            if (empty($this->oldcopy))\n            {\n                $org=new self($this->db);\n                $org->fetch($this->id);\n                $this->oldcopy=$org;\n            }\n\n            // Test if batch management is activated on existing product\n            // If yes, we create missing entries into product_batch\n            if ($this->hasbatch() && !$this->oldcopy->hasbatch())\n            {\n                //$valueforundefinedlot = 'Undefined';  // In previous version, 39 and lower\n                $valueforundefinedlot = '000000';\n\n                dol_syslog(\"Flag batch of product id=\".$this->id.\" is set to ON, so we will create missing records into product_batch\");\n\n                $this->load_stock();\n                foreach ($this->stock_warehouse as $idW => $ObjW)   // For each warehouse where we have stocks defined for this product (for each lines in product_stock)\n                {\n                    $qty_batch = 0;\n                    foreach ($ObjW->detail_batch as $detail)    // Each lines of detail in product_batch of the current $ObjW = product_stock\n                    {\n                        if ($detail->batch == $valueforundefinedlot || $detail->batch == 'Undefined')\n                        {\n                            // We discard this line, we will create it later\n                            $sqlclean=\"DELETE FROM \".MAIN_DB_PREFIX.\"product_batch WHERE batch in('Undefined', '\".$valueforundefinedlot.\"') AND fk_product_stock = \".$ObjW->id;\n                            $result = $this->db->query($sqlclean);\n                            if (! $result)\n                            {\n                                dol_print_error($this->db);\n                                exit;\n                            }\n                            continue;\n                        }\n\n                        $qty_batch += $detail->qty;\n                    }\n                    // Quantities in batch details are not same as stock quantity,\n                    // so we add a default batch record to complete and get same qty in parent and child table\n                    if ($ObjW->real <> $qty_batch)\n                    {\n                        $ObjBatch = new Productbatch($this->db);\n                        $ObjBatch->batch = $valueforundefinedlot;\n                        $ObjBatch->qty = ($ObjW->real - $qty_batch);\n                        $ObjBatch->fk_product_stock = $ObjW->id;\n\n                        if ($ObjBatch->create($user,1) < 0)\n                        {\n                            $error++;\n                            $this->errors=$ObjBatch->errors;\n                        }\n                    }\n                }\n            }\n\n\t        // For automatic creation\n\t        if ($this->barcode == -1) $this->barcode = $this->get_barcode($this,$this->barcode_type_code);\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql.= \" SET label = '\" . $this->db->escape($this->label) .\"'\";\n\t\t\t$sql.= \", ref = '\" . $this->db->escape($this->ref) .\"'\";\n\t\t\t$sql.= \", ref_ext = \".(! empty($this->ref_ext)?\"'\".$this->db->escape($this->ref_ext).\"'\":\"null\");\n\t\t\t$sql.= \", default_vat_code = \".($this->default_vat_code ? \"'\".$this->db->escape($this->default_vat_code).\"'\" : \"null\");\n\t\t\t$sql.= \", tva_tx = \" . $this->tva_tx;\n\t\t\t$sql.= \", recuperableonly = \" . $this->tva_npr;\n\t\t\t$sql.= \", localtax1_tx = \" . $this->localtax1_tx;\n\t\t\t$sql.= \", localtax2_tx = \" . $this->localtax2_tx;\n\t\t\t$sql.= \", localtax1_type = \" . ($this->localtax1_type!=''?\"'\".$this->db->escape($this->localtax1_type).\"'\":\"'0'\");\n\t\t\t$sql.= \", localtax2_type = \" . ($this->localtax2_type!=''?\"'\".$this->db->escape($this->localtax2_type).\"'\":\"'0'\");\n\n\t\t\t$sql.= \", barcode = \". (empty($this->barcode)?\"null\":\"'\".$this->db->escape($this->barcode).\"'\");\n\t\t\t$sql.= \", fk_barcode_type = \". (empty($this->barcode_type)?\"null\":$this->db->escape($this->barcode_type));\n\n\t\t\t$sql.= \", tosell = \" . (int) $this->status;\n\t\t\t$sql.= \", tobuy = \" . (int) $this->status_buy;\n\t\t\t$sql.= \", tobatch = \" . ((empty($this->status_batch) || $this->status_batch < 0) ? '0' : (int) $this->status_batch);\n\t\t\t$sql.= \", finished = \" . ((! isset($this->finished) || $this->finished < 0) ? \"null\" : (int) $this->finished);\n\t\t\t$sql.= \", weight = \" . ($this->weight!='' ? \"'\".$this->db->escape($this->weight).\"'\" : 'null');\n\t\t\t$sql.= \", weight_units = \" . ($this->weight_units!='' ? \"'\".$this->db->escape($this->weight_units).\"'\": 'null');\n\t\t\t$sql.= \", length = \" . ($this->length!='' ? \"'\".$this->db->escape($this->length).\"'\" : 'null');\n\t\t\t$sql.= \", length_units = \" . ($this->length_units!='' ? \"'\".$this->db->escape($this->length_units).\"'\" : 'null');\n\t\t\t$sql.= \", width= \" . ($this->width!='' ? \"'\".$this->db->escape($this->width).\"'\" : 'null');\n\t\t\t$sql.= \", width_units = \" . ($this->width_units!='' ? \"'\".$this->db->escape($this->width_units).\"'\" : 'null');\n\t\t\t$sql.= \", height = \" . ($this->height!='' ? \"'\".$this->db->escape($this->height).\"'\" : 'null');\n\t\t\t$sql.= \", height_units = \" . ($this->height_units!='' ? \"'\".$this->db->escape($this->height_units).\"'\" : 'null');\n\t\t\t$sql.= \", surface = \" . ($this->surface!='' ? \"'\".$this->db->escape($this->surface).\"'\" : 'null');\n\t\t\t$sql.= \", surface_units = \" . ($this->surface_units!='' ? \"'\".$this->db->escape($this->surface_units).\"'\" : 'null');\n\t\t\t$sql.= \", volume = \" . ($this->volume!='' ? \"'\".$this->db->escape($this->volume).\"'\" : 'null');\n\t\t\t$sql.= \", volume_units = \" . ($this->volume_units!='' ? \"'\".$this->db->escape($this->volume_units).\"'\" : 'null');\n\t\t\t$sql.= \", fk_default_warehouse = \" . ($this->fk_default_warehouse > 0 ? $this->db->escape($this->fk_default_warehouse) : 'null');\n\t\t\t$sql.= \", seuil_stock_alerte = \" . ((isset($this->seuil_stock_alerte) && $this->seuil_stock_alerte != '') ? \"'\".$this->db->escape($this->seuil_stock_alerte).\"'\" : \"null\");\n\t\t\t$sql.= \", description = '\" . $this->db->escape($this->description) .\"'\";\n\t\t\t$sql.= \", url = \" . ($this->url?\"'\".$this->db->escape($this->url).\"'\":'null');\n\t\t\t$sql.= \", customcode = '\" .        $this->db->escape($this->customcode) .\"'\";\n\t        $sql.= \", fk_country = \" . ($this->country_id > 0 ? (int) $this->country_id : 'null');\n\t        $sql.= \", note = \".(isset($this->note) ? \"'\" .$this->db->escape($this->note).\"'\" : 'null');\n\t\t\t$sql.= \", duration = '\" . $this->db->escape($this->duration_value . $this->duration_unit) .\"'\";\n\t\t\t$sql.= \", accountancy_code_buy = '\" . $this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell= '\" . $this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell_intra= '\" . $this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t$sql.= \", accountancy_code_sell_export= '\" . $this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t$sql.= \", desiredstock = \" . ((isset($this->desiredstock) && $this->desiredstock != '') ? (int) $this->desiredstock : \"null\");\n\t\t\t$sql.= \", cost_price = \" . ($this->cost_price != '' ? $this->db->escape($this->cost_price) : 'null');\n\t        $sql.= \", fk_unit= \" . ((! $this->fk_unit) ? 'NULL' : (int) $this->fk_unit);\n\t        $sql.= \", price_autogen = \" . (!$this->price_autogen ? 0 : 1);\n\t\t\t$sql.= \", fk_price_expression = \".($this->fk_price_expression != 0 ? (int) $this->fk_price_expression : 'NULL');\n\t\t\t$sql.= \", fk_user_modif = \".($user->id > 0 ? $user->id : 'NULL');\n\t\t\t// stock field is not here because it is a denormalized value from product_stock.\n\t\t\t$sql.= \" WHERE rowid = \" . $id;\n\n\t\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->id = $id;\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (! empty($conf->global->MAIN_MULTILANGS))\n\t\t\t\t{\n\t\t\t\t\tif ( $this->setMultiLangs($user) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t\treturn -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$action='update';\n\n\t\t\t\t// Actions on extra fields\n\t\t\t\tif (! $error && empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))\n\t\t\t\t{\n\t\t\t\t\t$result=$this->insertExtraFields();\n\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error && ! $notrigger)\n\t\t\t\t{\n                    // Call trigger\n                    $result=$this->call_trigger('PRODUCT_MODIFY',$user);\n                    if ($result < 0) { $error++; }\n                    // End call triggers\n\t\t\t\t}\n\n\t\t\t\tif (! $error && (is_object($this->oldcopy) && $this->oldcopy->ref !== $this->ref))\n\t\t\t\t{\n\t\t\t\t\t// We remove directory\n\t\t\t\t\tif ($conf->product->dir_output)\n\t\t\t\t\t{\n\t\t\t\t\t\t$olddir = $conf->product->dir_output . \"/\" . dol_sanitizeFileName($this->oldcopy->ref);\n\t\t\t\t\t\t$newdir = $conf->product->dir_output . \"/\" . dol_sanitizeFileName($this->ref);\n\t\t\t\t\t\tif (file_exists($olddir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//include_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\t\t\t\t\t\t\t//$res = dol_move($olddir, $newdir);\n\t\t\t\t\t\t\t// do not use dol_move with directory\n\t\t\t\t\t\t\t$res = @rename($olddir, $newdir);\n\t\t\t\t\t\t\tif (! $res)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t    $langs->load(\"errors\");\n\t\t\t\t\t\t\t\t$this->error=$langs->trans('ErrorFailToRenameDir',$olddir,$newdir);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error)\n\t\t\t\t{\n\t\t\t\t\tif ($conf->variants->enabled) {\n\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\n\t\t\t\t\t\t$comb = new ProductCombination($this->db);\n\n\t\t\t\t\t\tforeach ($comb->fetchAllByFkProductParent($this->id) as $currcomb) {\n\t\t\t\t\t\t\t$currcomb->updateProperties($this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -$error;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS')\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\tif (empty($conf->barcode->enabled) || empty($this->barcode)) $this->error=$langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductAlreadyExists\",$this->ref);\n\t\t\t\t\telse $this->error=$langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductBarCodeAlreadyExists\",$this->barcode);\n\t\t\t\t\t$this->errors[]=$this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t$this->errors[]=$this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n        }\n        else\n       {\n            $this->db->rollback();\n            dol_syslog(get_class($this).\"::Update fails verify \".join(',',$this->errors), LOG_WARNING);\n            return -3;\n        }\n\t}\n\n\t/**\n\t *  Delete a product from database (if not used)\n\t *\n\t *\t@param      User\t$user       Product id (usage of this is deprecated, delete should be called without parameters on a fetched object)\n\t *  @param      int     $notrigger  Do not execute trigger\n\t * \t@return\t\tint\t\t\t\t\t< 0 if KO, 0 = Not possible, > 0 if OK\n\t */\n\tfunction delete(User $user, $notrigger=0)\n\t{\n\t\t// Deprecation warning\n\t\tif ($id > 0) {\n\t\t\tdol_syslog(__METHOD__ . \" with parameter is deprecated\", LOG_WARNING);\n\t\t}\n\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\n\t\t$error=0;\n\n\t\t// Clean parameters\n\t\tif (empty($id)) $id=$this->id;\n\t\telse $this->fetch($id);\n\n\t\t// Check parameters\n\t\tif (empty($id))\n\t\t{\n\t\t\t$this->error = \"Object must be fetched before calling delete\";\n\t\t\treturn -1;\n\t\t}\n\t\tif (($this->type == Product::TYPE_PRODUCT && empty($user->rights->produit->supprimer)) || ($this->type == Product::TYPE_SERVICE && empty($user->rights->service->supprimer)))\n\t\t{\n\t\t\t$this->error = \"ErrorForbidden\";\n\t\t\treturn 0;\n\t\t}\n\n\t\t$objectisused = $this->isObjectUsed($id);\n\t\tif (empty($objectisused))\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\tif (! $error && empty($notrigger))\n\t\t\t{\n                // Call trigger\n                $result=$this->call_trigger('PRODUCT_DELETE',$user);\n                if ($result < 0) { $error++; }\n                // End call triggers\n\t\t\t}\n\n\t\t\t// Delete from product_batch on product delete\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.'product_batch';\n\t\t\t\t$sql.= \" WHERE fk_product_stock IN (\";\n\t\t\t\t$sql.= \"SELECT rowid FROM \".MAIN_DB_PREFIX.'product_stock';\n\t\t\t\t$sql.= \" WHERE fk_product = \".$id.\")\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (! $result)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n   \t\t\t// Delete all child tables\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$elements = array('product_fournisseur_price','product_price','product_lang','categorie_product','product_stock','product_customer_price','product_lot');  // product_batch is done before\n    \t\t\tforeach($elements as $table)\n    \t\t\t{\n    \t\t\t\tif (! $error)\n    \t\t\t\t{\n    \t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.$table;\n    \t\t\t\t\t$sql.= \" WHERE fk_product = \".$id;\n\n    \t\t\t\t\t$result = $this->db->query($sql);\n    \t\t\t\t\tif (! $result)\n    \t\t\t\t\t{\n    \t\t\t\t\t\t$error++;\n    \t\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination2ValuePair.class.php';\n\n\t\t\t\t//If it is a parent product, then we remove the association with child products\n\t\t\t\t$prodcomb = new ProductCombination($this->db);\n\n\t\t\t\tif ($prodcomb->deleteByFkProductParent($user, $id) < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting combinations';\n\t\t\t\t}\n\n\t\t\t\t//We also check if it is a child product\n\t\t\t\tif (!$error && ($prodcomb->fetchByFkProductChild($id) > 0) && ($prodcomb->delete($user) < 0)) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting child combination';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete from product_association\n\t\t\tif (!$error){\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql.= \" WHERE fk_product_pere = \".$id.\" OR fk_product_fils = \".$id;\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (! $result)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete product\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$sqlz = \"DELETE FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t\t$sqlz.= \" WHERE rowid = \".$id;\n\n\t\t\t\t$resultz = $this->db->query($sqlz);\n\t\t\t\tif ( ! $resultz )\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t// We remove directory\n\t\t\t\t$ref = dol_sanitizeFileName($this->ref);\n\t\t\t\tif ($conf->product->dir_output)\n\t\t\t\t{\n\t\t\t\t\t$dir = $conf->product->dir_output . \"/\" . $ref;\n\t\t\t\t\tif (file_exists($dir))\n\t\t\t\t\t{\n\t\t\t\t\t\t$res=@dol_delete_dir_recursive($dir);\n\t\t\t\t\t\tif (! $res)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->errors[] = 'ErrorFailToDeleteDir';\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove extrafields\n\t\t\tif ((! $error) && (empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))) // For avoid conflicts if trigger used\n\t\t\t{\n\t\t\t\t$result=$this->deleteExtraFields();\n\t\t\t\tif ($result < 0)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($this->errors as $errmsg)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t\t$this->error.=($this->error?', '.$errmsg:$errmsg);\n\t\t\t\t}\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error = \"ErrorRecordIsUsedCantDelete\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *\tUpdate or add a translation for a product\n\t *\n\t *\t@param     User\t   $user                   Object user making update\n\t *\t@return\t   int\t\t<0 if KO, >0 if OK\n\t */\n\tfunction setMultiLangs($user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs_available = $langs->get_available_languages(DOL_DOCUMENT_ROOT, 0, 2);\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\tforeach ($langs_available as $key => $value)\n\t\t{\n\t\t\tif ($key == $current_lang)\n\t\t\t{\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\t\t\t\t$sql.= \" AND lang='\".$key.\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) // if there is already a description line for this language\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2.= \" SET \";\n\t\t\t\t\t$sql2.= \" label='\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2.= \" description='\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", note='\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t$sql2.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($key).\"'\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.=\", note\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t\t$sql2.= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\". $this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2.= \" '\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", '\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t}\n\t\t\t\tdol_syslog(get_class($this).'::setMultiLangs key = current_lang = '.$key);\n\t\t\t\tif (! $this->db->query($sql2))\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($this->multilangs[$key]))\n\t\t\t{\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\t\t\t\t$sql.= \" AND lang='\".$key.\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) // if there is already a description line for this language\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2.= \" SET \";\n\t\t\t\t\t$sql2.= \" label='\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2.= \" description='\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", note='\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t$sql2.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($key).\"'\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.=\", note\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t\t$sql2.= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\". $this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2.= \" '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (! empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) $sql2.= \", '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t$sql2.= \")\";\n\t\t\t\t}\n\n\t\t\t\t// We do not save if main fields are empty\n\t\t\t\tif ($this->multilangs[\"$key\"][\"label\"] || $this->multilangs[\"$key\"][\"description\"])\n\t\t\t\t{\n    \t\t\t\tif (! $this->db->query($sql2))\n    \t\t\t\t{\n    \t\t\t\t\t$this->error=$this->db->lasterror();\n    \t\t\t\t\treturn -1;\n    \t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// language is not current language and we didn't provide a multilang description for this language\n\t\t\t}\n\t\t}\n\n\t\t// Call trigger\n\t\t$result = $this->call_trigger('PRODUCT_SET_MULTILANGS',$user);\n\t\tif ($result < 0) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\t// End call triggers\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tDelete a language for this product\n\t *\n\t *  @param\t\tstring\t$langtodelete\t\tLanguage code to delete\n\t *\t@param\t\tUser\t$user       Object user making delete\n\t *\n\t *\t@return\t\tint\t\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction delMultiLangs($langtodelete, $user)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql.= \" WHERE fk_product=\".$this->id.\" AND lang='\".$this->db->escape($langtodelete).\"'\";\n\n\t\tdol_syslog(get_class($this).'::delMultiLangs', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_DEL_MULTILANGS',$user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/*\n\t * Sets an accountancy code for a product.\n\t * Also calls PRODUCT_MODIFY trigger when modified\n\t *\n\t * @param string $type It can be 'buy', 'sell', 'sell_intra' or 'sell_export'\n\t * @param string $value Accountancy code\n\t * @return int <0 KO >0 OK\n\t */\n\tpublic function setAccountancyCode($type, $value)\n\t{\n\t\tglobal $user, $langs, $conf;\n\n\t\t$this->db->begin();\n\n\t\tif ($type == 'buy') {\n\t\t\t$field = 'accountancy_code_buy';\n\t\t} elseif ($type == 'sell') {\n\t\t\t$field = 'accountancy_code_sell';\n\t\t} elseif ($type == 'sell_intra') {\n\t\t\t$field = 'accountancy_code_sell_intra';\n\t\t} elseif ($type == 'sell_export') {\n\t\t\t$field = 'accountancy_code_sell_export';\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET \";\n\t\t$sql.= \"$field = '\".$this->db->escape($value).\"'\";\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::\".__FUNCTION__.\" sql=\".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\n\t\tif ($resql)\n\t\t{\n\t\t\t// Call triggers\n\t\t\tinclude_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';\n\t\t\t$interface=new Interfaces($this->db);\n\t\t\t$result=$interface->run_triggers('PRODUCT_MODIFY',$this,$user,$langs,$conf);\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$this->errors=$interface->errors;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->$field = $value;\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad array this->multilangs\n\t *\n\t *\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tfunction getMultiLangs()\n\t{\n\t\tglobal $langs;\n\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\t$sql = \"SELECT lang, label, description, note as other\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql.= \" WHERE fk_product=\".$this->id;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\twhile ($obj = $this->db->fetch_object($result))\n\t\t\t{\n\t\t\t\t//print 'lang='.$obj->lang.' current='.$current_lang.'<br>';\n\t\t\t\tif ($obj->lang == $current_lang)  // si on a les traduct. dans la langue courante on les charge en infos principales.\n\t\t\t\t{\n\t\t\t\t\t$this->label\t\t= $obj->label;\n\t\t\t\t\t$this->description\t= $obj->description;\n\t\t\t\t\t$this->other\t    = $obj->other;\n\t\t\t\t}\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"label\"]\t\t= $obj->label;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"description\"]\t= $obj->description;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"other\"]\t\t= $obj->other;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=\"Error: \".$this->db->lasterror().\" - \".$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\n\t/**\n\t *  Insert a track that we changed a customer price\n\t *\n\t *\t@param  \tUser\t$user       User making change\n\t *\t@param\t\tint\t\t$level\t\tprice level to change\n\t *\t@return\t\tint\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction _log_price($user,$level=0)\n\t{\n\t\tglobal $conf;\n\n\t\t$now=dol_now();\n\n\t\t// Clean parameters\n\t\tif (empty($this->price_by_qty)) $this->price_by_qty=0;\n\n\t\t// Add new price\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price(price_level,date_price, fk_product, fk_user_author, price, price_ttc, price_base_type,tosell, tva_tx, default_vat_code, recuperableonly,\";\n\t\t$sql.= \" localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, price_min,price_min_ttc,price_by_qty,entity,fk_price_expression) \";\n\t\t$sql.= \" VALUES(\".($level?$level:1).\", '\".$this->db->idate($now).\"',\".$this->id.\",\".$user->id.\",\".$this->price.\",\".$this->price_ttc.\",'\".$this->db->escape($this->price_base_type).\"',\".$this->status.\",\".$this->tva_tx.\", \".($this->default_vat_code?(\"'\".$this->db->escape($this->default_vat_code).\"'\"):\"null\").\",\".$this->tva_npr.\",\";\n\t\t$sql.= \" \".$this->localtax1_tx.\", \".$this->localtax2_tx.\", '\".$this->db->escape($this->localtax1_type).\"', '\".$this->db->escape($this->localtax2_type).\"', \".$this->price_min.\",\".$this->price_min_ttc.\",\".$this->price_by_qty.\",\".$conf->entity.\",\".($this->fk_price_expression > 0?$this->fk_price_expression:'null');\n\t\t$sql.= \")\";\n\n\t\tdol_syslog(get_class($this).\"::_log_price\", LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif(! $resql)\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Delete a price line\n\t *\n\t * \t@param\t\tUser\t$user\tObject user\n\t * \t@param\t\tint\t\t$rowid\tLine id to delete\n\t * \t@return\t\tint\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction log_price_delete($user, $rowid)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t$sql.= \" WHERE fk_product_price=\".$rowid;\n\t\t$resql=$this->db->query($sql);\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql.= \" WHERE rowid=\".$rowid;\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *\tRead price used by a provider.\n\t *\tWe enter as input couple prodfournprice/qty or triplet qty/product_id/fourn_ref.\n\t *  This also set some properties on product like ->buyprice, ->fourn_pu, ...\n\t *\n\t *  @param     \tint\t\t$prodfournprice     Id du tarif = rowid table product_fournisseur_price\n\t *  @param     \tdouble\t$qty                Quantity asked or -1 to get first entry found\n\t *\t@param\t\tint\t\t$product_id\t\t\tFilter on a particular product id\n\t * \t@param\t\tstring\t$fourn_ref\t\t\tFilter on a supplier price ref. 'none' to exclude ref in search.\n\t *  @param      int     $fk_soc             If of supplier\n\t *  @return    \tint \t\t\t\t\t\t<-1 if KO, -1 if qty not enough, 0 if OK but nothing found, id_product if OK and found. May also initialize some properties like (->ref_supplier, buyprice, fourn_pu, vatrate_supplier...)\n\t */\n\tfunction get_buyprice($prodfournprice, $qty, $product_id=0, $fourn_ref='', $fk_soc=0)\n\t{\n\t\tglobal $conf;\n\t\t$result = 0;\n\n\t\t// We do a first seach with a select by searching with couple prodfournprice and qty only (later we will search on triplet qty/product_id/fourn_ref)\n\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent,\";\n\t\t$sql.= \" pfp.fk_product, pfp.ref_fourn, pfp.fk_soc, pfp.tva_tx, pfp.fk_supplier_price_expression\";\n\t\t$sql.= \" ,pfp.default_vat_code\";\n        $sql.= \" ,pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t$sql.= \" WHERE pfp.rowid = \".$prodfournprice;\n\t\tif ($qty > 0) $sql.= \" AND pfp.quantity <= \".$qty;\n\t\t$sql.= \" ORDER BY pfp.quantity DESC\";\n\n\t\tdol_syslog(get_class($this).\"::get_buyprice first search by prodfournprice/qty\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj && $obj->quantity > 0)\t\t// If we found a supplier prices from the id of supplier price\n\t\t\t{\n                if (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression))\n                {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n                    $prod_supplier = new ProductFournisseur($this->db);\n                    $prod_supplier->product_fourn_price_id = $obj->rowid;\n                    $prod_supplier->id = $obj->fk_product;\n                    $prod_supplier->fourn_qty = $obj->quantity;\n                    $prod_supplier->fourn_tva_tx = $obj->tva_tx;\n                    $prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n                    $priceparser = new PriceParser($this->db);\n                    $price_result = $priceparser->parseProductSupplier($prod_supplier);\n                    if ($price_result >= 0) {\n                    \t$obj->price = $price_result;\n                    }\n                }\n                $this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t$this->buyprice = $obj->price;                      // deprecated\n\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity;     // Unit price of product of supplier\n\t\t\t\t$this->fourn_price_base_type = 'HT';                // Price base type\n\t\t\t\t$this->fourn_socid = $obj->fk_soc;                  // Company that offer this price\n\t\t\t\t$this->ref_fourn = $obj->ref_fourn;                 // deprecated\n\t\t\t\t$this->ref_supplier = $obj->ref_fourn;              // Ref supplier\n\t\t\t\t$this->remise_percent = $obj->remise_percent;       // remise percent if present and not typed\n\t\t\t\t$this->vatrate_supplier = $obj->tva_tx;             // Vat ref supplier\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code;   // Vat code supplier\n                $this->fourn_multicurrency_price       = $obj->multicurrency_price;\n                $this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n                $this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n                $this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n                $this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t$result=$obj->fk_product;\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\telse // If not found\n\t\t\t{\n\t\t\t\t// We do a second search by doing a select again but searching with less reliable criteria: couple qty/id product, and if set fourn_ref or fk_soc.\n\t\t\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.fk_soc,\";\n\t\t\t\t$sql.= \" pfp.fk_product, pfp.ref_fourn as ref_supplier, pfp.tva_tx, pfp.fk_supplier_price_expression\";\n\t\t\t\t$sql.= \" ,pfp.default_vat_code\";\n                $sql.= \" ,pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t\t\t$sql.= \" WHERE pfp.fk_product = \".$product_id;\n\t\t\t\tif ($fourn_ref != 'none') $sql.= \" AND pfp.ref_fourn = '\".$fourn_ref.\"'\";\n\t\t\t\tif ($fk_soc > 0) $sql.= \" AND pfp.fk_soc = \".$fk_soc;\n\t\t\t\tif ($qty > 0) $sql.= \" AND pfp.quantity <= \".$qty;\n\t\t\t\t$sql.= \" ORDER BY pfp.quantity DESC\";\n\t\t\t\t$sql.= \" LIMIT 1\";\n\n\t\t\t\tdol_syslog(get_class($this).\"::get_buyprice second search from qty/ref/product_id\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\tif ($obj && $obj->quantity > 0)\t\t// If found\n\t\t\t\t\t{\n\t\t                if (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression))\n\t\t                {\n\t\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t                    $prod_supplier = new ProductFournisseur($this->db);\n\t\t                    $prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t                    $prod_supplier->id = $obj->fk_product;\n\t\t                    $prod_supplier->fourn_qty = $obj->quantity;\n\t\t                    $prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t                    $prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t                    $priceparser = new PriceParser($this->db);\n\t\t                    $price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t                    if ($result >= 0) {\n\t\t                    \t$obj->price = $price_result;\n\t\t                    }\n\t\t                }\n\t\t                $this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t$this->buyprice = $obj->price;                      // deprecated\n\t\t\t\t\t\t$this->fourn_qty = $obj->quantity;\t\t\t\t\t// min quantity for price for a virtual supplier\n\t\t\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity;     // Unit price of product for a virtual supplier\n\t\t\t\t\t\t$this->fourn_price_base_type = 'HT';                // Price base type for a virtual supplier\n\t\t\t\t\t\t$this->fourn_socid = $obj->fk_soc;                  // Company that offer this price\n\t\t\t\t\t\t$this->ref_fourn = $obj->ref_supplier;              // deprecated\n\t\t\t\t\t\t$this->ref_supplier = $obj->ref_supplier;           // Ref supplier\n\t\t\t\t\t\t$this->remise_percent = $obj->remise_percent;       // remise percent if present and not typed\n\t\t\t\t\t\t$this->vatrate_supplier = $obj->tva_tx;             // Vat ref supplier\n\t\t\t\t\t\t$this->default_vat_code = $obj->default_vat_code;   // Vat code supplier\n                        $this->fourn_multicurrency_price       = $obj->multicurrency_price;\n                        $this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n                        $this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n                        $this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n                        $this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t\t\t$result=$obj->fk_product;\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn -1;\t// Ce produit n'existe pas avec cet id tarif fournisseur ou existe mais qte insuffisante, ni pour le couple produit/ref fournisseur dans la quantit\u00e9.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t *\tModify customer price of a product/Service\n\t *\n\t *\t@param  \tdouble\t$newprice\t\t    New price\n\t *\t@param  \tstring\t$newpricebase\t    HT or TTC\n\t *\t@param  \tUser\t$user        \t    Object user that make change\n\t *\t@param  \tdouble\t$newvat\t\t\t    New VAT Rate (For example 8.5. Should not be a string)\n\t *  @param\t\tdouble\t$newminprice\t    New price min\n\t *  @param\t\tint\t\t$level\t\t\t    0=standard, >0 = level if multilevel prices\n\t *  @param     \tint\t\t$newnpr             0=Standard vat rate, 1=Special vat rate for French NPR VAT\n\t *  @param     \tint\t\t$newpbq             1 if it has price by quantity\n\t *  @param \t\tint \t$ignore_autogen     Used to avoid infinite loops\n     *\t@param      array\t$localtaxes_array\tArray with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).\n     *  @param      string  $newdefaultvatcode  Default vat code\n\t * \t@return\t\tint\t\t\t\t\t\t    <0 if KO, >0 if OK\n\t */\n\tfunction updatePrice($newprice, $newpricebase, $user, $newvat='',$newminprice=0, $level=0, $newnpr=0, $newpbq=0, $ignore_autogen=0, $localtaxes_array=array(), $newdefaultvatcode='')\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$id=$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_price id=\".$id.\" newprice=\".$newprice.\" newpricebase=\".$newpricebase.\" newminprice=\".$newminprice.\" level=\".$level.\" npr=\".$newnpr.\" newdefaultvatcode=\".$newdefaultvatcode);\n\n\t\t// Clean parameters\n\t\tif (empty($this->tva_tx))  $this->tva_tx=0;\n        if (empty($newnpr)) $newnpr=0;\n\n\t\t// Check parameters\n\t\tif ($newvat == '') $newvat=$this->tva_tx;\n\n\t\t// If multiprices are enabled, then we check if the current product is subject to price autogeneration\n\t\t// Price will be modified ONLY when the first one is the one that is being modified\n\t\tif ((!empty($conf->global->PRODUIT_MULTIPRICES) || ! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) && !$ignore_autogen && $this->price_autogen && ($level == 1))\n\t\t{\n\t\t\treturn $this->generateMultiprices($user, $newprice, $newpricebase, $newvat, $newnpr, $newpbq);\n\t\t}\n\n\t\tif (! empty($newminprice) && ($newminprice > $newprice))\n\t\t{\n\t\t\t$this->error='ErrorPriceCantBeLowerThanMinPrice';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ($newprice !== '' || $newprice === 0)\n\t\t{\n\t\t\tif ($newpricebase == 'TTC')\n\t\t\t{\n\t\t\t\t$price_ttc = price2num($newprice,'MU');\n\t\t\t\t$price = price2num($newprice) / (1 + ($newvat / 100));\n\t\t\t\t$price = price2num($price,'MU');\n\n\t\t\t\tif ($newminprice != '' || $newminprice == 0)\n\t\t\t\t{\n\t\t\t\t\t$price_min_ttc = price2num($newminprice,'MU');\n\t\t\t\t\t$price_min = price2num($newminprice) / (1 + ($newvat / 100));\n\t\t\t\t\t$price_min = price2num($price_min,'MU');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$price_min=0;\n\t\t\t\t\t$price_min_ttc=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$price = price2num($newprice,'MU');\n\t\t\t\t$price_ttc = ( $newnpr != 1 ) ? price2num($newprice) * (1 + ($newvat / 100)) : $price;\n\t\t\t\t$price_ttc = price2num($price_ttc,'MU');\n\n\t\t\t\tif ( $newminprice !== '' || $newminprice === 0)\n\t\t\t\t{\n\t\t\t\t\t$price_min = price2num($newminprice,'MU');\n\t\t\t\t\t$price_min_ttc = price2num($newminprice) * (1 + ($newvat / 100));\n\t\t\t\t\t$price_min_ttc = price2num($price_min_ttc,'MU');\n\t\t\t\t\t//print 'X'.$newminprice.'-'.$price_min;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$price_min=0;\n\t\t\t\t\t$price_min_ttc=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//print 'x'.$id.'-'.$newprice.'-'.$newpricebase.'-'.$price.'-'.$price_ttc.'-'.$price_min.'-'.$price_min_ttc;\n\n\t\t\tif (count($localtaxes_array) > 0)\n\t\t\t{\n\t\t\t    $localtaxtype1=$localtaxes_array['0'];\n\t\t\t    $localtax1=$localtaxes_array['1'];\n\t\t\t    $localtaxtype2=$localtaxes_array['2'];\n\t\t\t    $localtax2=$localtaxes_array['3'];\n\t\t\t}\n\t\t\telse     // old method. deprecated because ot can't retreive type\n\t\t\t{\n\t       \t\t$localtaxtype1='0';\n\t\t\t    $localtax1=get_localtax($newvat,1);\n\t       \t\t$localtaxtype2='0';\n\t\t\t    $localtax2=get_localtax($newvat,2);\n\t\t\t}\n\t\t\tif (empty($localtax1)) $localtax1=0;\t// If = '' then = 0\n\t\t\tif (empty($localtax2)) $localtax2=0;\t// If = '' then = 0\n\n\t\t\t$this->db->begin();\n\n\t\t\t// Ne pas mettre de quote sur les numeriques decimaux.\n\t\t\t// Ceci provoque des stockages avec arrondis en base au lieu des valeurs exactes.\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product SET\";\n\t\t\t$sql.= \" price_base_type='\".$newpricebase.\"',\";\n\t\t\t$sql.= \" price=\".$price.\",\";\n\t\t\t$sql.= \" price_ttc=\".$price_ttc.\",\";\n\t\t\t$sql.= \" price_min=\".$price_min.\",\";\n\t\t\t$sql.= \" price_min_ttc=\".$price_min_ttc.\",\";\n\t\t\t$sql.= \" localtax1_tx=\".($localtax1>=0?$localtax1:'NULL').\",\";\n\t\t\t$sql.= \" localtax2_tx=\".($localtax2>=0?$localtax2:'NULL').\",\";\n\t\t\t$sql.= \" localtax1_type=\".($localtaxtype1!=''?\"'\".$localtaxtype1.\"'\":\"'0'\").\",\";\n\t\t\t$sql.= \" localtax2_type=\".($localtaxtype2!=''?\"'\".$localtaxtype2.\"'\":\"'0'\").\",\";\n            $sql.= \" default_vat_code=\".($newdefaultvatcode?\"'\".$this->db->escape($newdefaultvatcode).\"'\":\"null\").\",\";\n\t\t\t$sql.= \" tva_tx='\".price2num($newvat).\"',\";\n            $sql.= \" recuperableonly='\".$newnpr.\"'\";\n\t\t\t$sql.= \" WHERE rowid = \".$id;\n\n\t\t\tdol_syslog(get_class($this).\"::update_price\", LOG_DEBUG);\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->multiprices[$level] = $price;\n\t\t\t\t$this->multiprices_ttc[$level] = $price_ttc;\n\t\t\t\t$this->multiprices_min[$level]= $price_min;\n\t\t\t\t$this->multiprices_min_ttc[$level]= $price_min_ttc;\n\t\t\t\t$this->multiprices_base_type[$level]= $newpricebase;\n\t\t\t\t$this->multiprices_default_vat_code[$level]= $newdefaultvatcode;\n\t\t\t\t$this->multiprices_tva_tx[$level]= $newvat;\n\t\t\t\t$this->multiprices_recuperableonly[$level]= $newnpr;\n\n\t\t\t\t$this->price = $price;\n\t\t\t\t$this->price_ttc = $price_ttc;\n\t\t\t\t$this->price_min = $price_min;\n\t\t\t\t$this->price_min_ttc = $price_min_ttc;\n\t\t\t\t$this->price_base_type = $newpricebase;\n\t\t\t\t$this->default_vat_code = $newdefaultvatcode;\n\t\t\t\t$this->tva_tx = $newvat;\n\t\t\t\t$this->tva_npr = $newnpr;\n\t\t\t\t//Local taxes\n\t\t\t\t$this->localtax1_tx = $localtax1;\n\t\t\t\t$this->localtax2_tx = $localtax2;\n\t\t\t\t$this->localtax1_type = $localtaxtype1;\n\t\t\t\t$this->localtax2_type = $localtaxtype2;\n\n\t\t\t\t// Price by quantity\n\t\t\t\t$this->price_by_qty = $newpbq;\n\n\t\t\t\t$this->_log_price($user,$level);\t// Save price for level into table product_price\n\n\t\t\t\t$this->level = $level;\t\t\t\t// Store level of price edited for trigger\n\n                // Call trigger\n                $result=$this->call_trigger('PRODUCT_PRICE_MODIFY',$user);\n                if ($result < 0)\n                {\n                \t$this->db->rollback();\n                \treturn -1;\n                }\n                // End call triggers\n\n                $this->db->commit();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t    dol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n    /**\n     *  Sets the supplier price expression\n     *\n     *  @param  int     $expression_id\tExpression\n     *  @return int                 \t<0 if KO, >0 if OK\n\t * @deprecated Use Product::update instead\n     */\n    function setPriceExpression($expression_id)\n    {\n\t\tglobal $user;\n\n\t\t$this->fk_price_expression = $expression_id;\n\n\t\treturn $this->update($this->id, $user);\n    }\n\n\t/**\n\t *  Load a product in memory from database\n\t *\n\t *  @param\tint\t\t$id      \t\t\tId of product/service to load\n\t *  @param  string\t$ref     \t\t\tRef of product/service to load\n\t *  @param\tstring\t$ref_ext\t\t\tRef ext of product/service to load\n     *  @param\tint\t\t$ignore_expression  Ignores the math expression for calculating price and uses the db value instead\n\t *  @return int     \t\t\t\t\t<0 if KO, 0 if not found, >0 if OK\n\t */\n\tfunction fetch($id='', $ref='', $ref_ext='', $ignore_expression=0)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t\tglobal $langs, $conf;\n\n\t\tdol_syslog(get_class($this).\"::fetch id=\".$id.\" ref=\".$ref.\" ref_ext=\".$ref_ext);\n\n\t\t// Check parameters\n\t\tif (! $id && ! $ref && ! $ref_ext)\n\t\t{\n\t\t\t$this->error='ErrorWrongParameters';\n\t\t\tdol_syslog(get_class($this).\"::fetch \".$this->error);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT rowid, ref, ref_ext, label, description, url, note as note_private, customcode, fk_country, price, price_ttc,\";\n\t\t$sql.= \" price_min, price_min_ttc, price_base_type, cost_price, default_vat_code, tva_tx, recuperableonly as tva_npr, localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, tosell,\";\n\t\t$sql.= \" tobuy, fk_product_type, duration, fk_default_warehouse, seuil_stock_alerte, canvas, weight, weight_units,\";\n\t\t$sql.= \" length, length_units, width, width_units, height, height_units,\";\n\t\t$sql.= \" surface, surface_units, volume, volume_units, barcode, fk_barcode_type, finished,\";\n\t\t$sql.= \" accountancy_code_buy, accountancy_code_sell, accountancy_code_sell_intra, accountancy_code_sell_export, stock, pmp,\";\n\t\t$sql.= \" datec, tms, import_key, entity, desiredstock, tobatch, fk_unit,\";\n\t\t$sql.= \" fk_price_expression, price_autogen\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\tif ($id) $sql.= \" WHERE rowid = \".$this->db->escape($id);\n\t\telse\n\t\t{\n\t\t\t$sql.= \" WHERE entity IN (\".getEntity($this->element).\")\";\n\t\t\tif ($ref) $sql.= \" AND ref = '\".$this->db->escape($ref).\"'\";\n\t\t\telse if ($ref_ext) $sql.= \" AND ref_ext = '\".$this->db->escape($ref_ext).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ( $resql )\n\t\t{\n\t\t\tif ($this->db->num_rows($resql) > 0)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id\t\t\t\t\t\t\t= $obj->rowid;\n\t\t\t\t$this->ref\t\t\t\t\t\t\t= $obj->ref;\n\t\t\t\t$this->ref_ext\t\t\t\t\t\t= $obj->ref_ext;\n\t\t\t\t$this->label\t\t\t\t\t\t= $obj->label;\n\t\t\t\t$this->description\t\t\t\t\t= $obj->description;\n\t\t\t\t$this->url\t\t\t\t\t\t\t= $obj->url;\n\t\t\t\t$this->note_private\t\t\t\t\t= $obj->note_private;\n\t\t\t\t$this->note\t\t\t\t\t\t\t= $obj->note_private;  // deprecated\n\n\t\t\t\t$this->type\t\t\t\t\t\t\t= $obj->fk_product_type;\n\t\t\t\t$this->status\t\t\t\t\t\t= $obj->tosell;\n\t\t\t\t$this->status_buy\t\t\t\t\t= $obj->tobuy;\n\t\t\t\t$this->status_batch\t\t\t\t\t= $obj->tobatch;\n\n\t\t\t\t$this->customcode\t\t\t\t\t= $obj->customcode;\n\t\t\t\t$this->country_id\t\t\t\t\t= $obj->fk_country;\n\t\t\t\t$this->country_code\t\t\t\t\t= getCountry($this->country_id,2,$this->db);\n\t\t\t\t$this->price\t\t\t\t\t\t= $obj->price;\n\t\t\t\t$this->price_ttc\t\t\t\t\t= $obj->price_ttc;\n\t\t\t\t$this->price_min\t\t\t\t\t= $obj->price_min;\n\t\t\t\t$this->price_min_ttc\t\t\t\t= $obj->price_min_ttc;\n\t\t\t\t$this->price_base_type\t\t\t\t= $obj->price_base_type;\n\t\t\t\t$this->cost_price\t\t\t\t\t= $obj->cost_price;\n\t\t\t\t$this->default_vat_code\t\t\t\t= $obj->default_vat_code;\n\t\t\t\t$this->tva_tx\t\t\t\t\t\t= $obj->tva_tx;\n\t\t\t\t//! French VAT NPR\n\t\t\t\t$this->tva_npr\t\t\t\t\t\t= $obj->tva_npr;\n\t\t\t\t$this->recuperableonly\t\t\t\t= $obj->tva_npr;       // For backward compatibility\n\t\t\t\t//! Local taxes\n\t\t\t\t$this->localtax1_tx\t\t\t\t\t= $obj->localtax1_tx;\n\t\t\t\t$this->localtax2_tx\t\t\t\t\t= $obj->localtax2_tx;\n\t\t\t\t$this->localtax1_type\t\t\t\t= $obj->localtax1_type;\n\t\t\t\t$this->localtax2_type\t\t\t\t= $obj->localtax2_type;\n\n\t\t\t\t$this->finished\t\t\t\t\t\t= $obj->finished;\n\t\t\t\t$this->duration\t\t\t\t\t\t= $obj->duration;\n\t\t\t\t$this->duration_value\t\t\t\t= substr($obj->duration,0,dol_strlen($obj->duration)-1);\n\t\t\t\t$this->duration_unit\t\t\t\t= substr($obj->duration,-1);\n\t\t\t\t$this->canvas\t\t\t\t\t\t= $obj->canvas;\n\t\t\t\t$this->weight\t\t\t\t\t\t= $obj->weight;\n\t\t\t\t$this->weight_units\t\t\t\t\t= $obj->weight_units;\n\t\t\t\t$this->length\t\t\t\t\t\t= $obj->length;\n\t\t\t\t$this->length_units\t\t\t\t\t= $obj->length_units;\n\t\t\t\t$this->width\t\t\t\t\t\t= $obj->width;\n\t\t\t\t$this->width_units\t\t\t\t\t= $obj->width_units;\n\t\t\t\t$this->height\t\t\t\t\t\t= $obj->height;\n\t\t\t\t$this->height_units\t\t\t\t\t= $obj->height_units;\n\n\t\t\t\t$this->surface\t\t\t\t\t\t= $obj->surface;\n\t\t\t\t$this->surface_units\t\t\t\t= $obj->surface_units;\n\t\t\t\t$this->volume\t\t\t\t\t\t= $obj->volume;\n\t\t\t\t$this->volume_units\t\t\t\t\t= $obj->volume_units;\n\t\t\t\t$this->barcode\t\t\t\t\t\t= $obj->barcode;\n\t\t\t\t$this->barcode_type\t\t\t\t\t= $obj->fk_barcode_type;\n\n\t\t\t\t$this->accountancy_code_buy\t\t\t= $obj->accountancy_code_buy;\n\t\t\t\t$this->accountancy_code_sell\t\t= $obj->accountancy_code_sell;\n\t\t\t\t$this->accountancy_code_sell_intra\t= $obj->accountancy_code_sell_intra;\n\t\t\t\t$this->accountancy_code_sell_export\t= $obj->accountancy_code_sell_export;\n\n\t\t\t\t$this->fk_default_warehouse\t\t\t= $obj->fk_default_warehouse;\n\t\t\t\t$this->seuil_stock_alerte\t\t\t= $obj->seuil_stock_alerte;\n\t\t\t\t$this->desiredstock\t\t\t\t\t= $obj->desiredstock;\n\t\t\t\t$this->stock_reel\t\t\t\t\t= $obj->stock;\n\t\t\t\t$this->pmp\t\t\t\t\t\t\t= $obj->pmp;\n\n\t\t\t\t$this->date_creation\t\t\t\t= $obj->datec;\n\t\t\t\t$this->date_modification\t\t\t= $obj->tms;\n\t\t\t\t$this->import_key\t\t\t\t\t= $obj->import_key;\n\t\t\t\t$this->entity\t\t\t\t\t\t= $obj->entity;\n\n\t\t\t\t$this->ref_ext\t\t\t\t\t\t= $obj->ref_ext;\n\t\t\t\t$this->fk_price_expression\t\t\t= $obj->fk_price_expression;\n\t\t\t\t$this->fk_unit\t\t\t\t\t\t= $obj->fk_unit;\n\t\t\t\t$this->price_autogen\t\t\t\t= $obj->price_autogen;\n\n\t\t\t\t$this->db->free($resql);\n\n\t\t\t\t// Retreive all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t// multilangs\n\t\t\t\tif (! empty($conf->global->MAIN_MULTILANGS)) $this->getMultiLangs();\n\n\t\t\t\t// Load multiprices array\n\t\t\t\tif (! empty($conf->global->PRODUIT_MULTIPRICES))\t\t\t\t// prices per segment\n\t\t\t\t{\n\t\t\t\t\tfor ($i=1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql.= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql.= \" AND price_level=\".$i;\n\t\t\t\t\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i]=$result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i]=$result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i]=$result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i]=$result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i]=$result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i]=$result[\"tva_tx\"];     // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i]=$result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t$this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[$i];\n\t\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif (! empty($conf->global->PRODUIT_CUSTOMER_PRICES))\t\t\t// prices per customers\n\t\t\t\t{\n\t\t\t\t\t// Nothing loaded by default. List may be very long.\n\t\t\t\t}\n\t\t\t\telse if (! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY))\t// prices per quantity\n\t\t\t\t{\n\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid\";\n\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t$sql.= \" WHERE fk_product = \".$this->id;\n\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql)\n\t\t\t\t\t{\n\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t$this->prices_by_qty[0]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t$this->prices_by_qty_id[0]=$result[\"rowid\"];\n\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\tif ($this->prices_by_qty[0] == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sql = \"SELECT rowid,price, unitprice, quantity, remise_percent, remise, remise, price_base_type\";\n\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[0];\n\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t//$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->prices_by_qty_list[0]=$resultat;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (! empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES))\t// prices per customer and quantity\n\t\t\t\t{\n\t\t\t\t\tfor ($i=1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql.= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql.= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql.= \" AND price_level=\".$i;\n\t\t\t\t\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t\t\t\t\t$sql.= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql.= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i]=$result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i]=$result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i]=$result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i]=$result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i]=$result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i]=$result[\"tva_tx\"];     // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i]=$result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t$this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql.= \" WHERE fk_product_price = \".$this->prices_by_qty_id[$i];\n\t\t\t\t\t\t\t\t$sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat=array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$ii=0;\n\t\t\t\t\t\t\t\t\twhile ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii]=array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"]= $result[\"remise\"];\t\t\t\t\t// deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n                if (!empty($conf->dynamicprices->enabled) && !empty($this->fk_price_expression) && empty($ignore_expression))\n                {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n                \t$priceparser = new PriceParser($this->db);\n                    $price_result = $priceparser->parseProduct($this);\n                    if ($price_result >= 0)\n                    {\n                        $this->price = $price_result;\n                        // Calculate the VAT\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price) * (1 + ($this->tva_tx / 100));\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price_ttc,'MU');\n                    }\n                }\n\n\t\t\t\t// We should not load stock during the fetch. If someone need stock of product, he must call load_stock after fetching product.\n\t\t\t\t// Instead we just init the stock_warehouse array\n\t\t\t\t$this->stock_warehouse = array();\n\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id societe\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_propale($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_customers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql.= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"propaldet as pd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"propal as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = pd.fk_propal\";\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\t$sql.= \" AND pd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_propale['customers']=$obj->nb_customers;\n\t\t\t$this->stats_propale['nb']=$obj->nb;\n\t\t\t$this->stats_propale['rows']=$obj->nb_rows;\n\t\t\t$this->stats_propale['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id thirdparty\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_proposal_supplier($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_suppliers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql.= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as pd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"supplier_proposal as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = pd.fk_supplier_proposal\";\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\t$sql.= \" AND pd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_proposal_supplier['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_proposal_supplier['nb']=$obj->nb;\n\t\t\t$this->stats_proposal_supplier['rows']=$obj->nb_rows;\n\t\t\t$this->stats_proposal_supplier['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Charge tableau des stats commande client pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                  Array of stats (nb=nb of order, qty=qty ordered)\n\t */\n\tfunction load_stats_commande($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_commande['customers']=$obj->nb_customers;\n\t\t\t$this->stats_commande['nb']=$obj->nb;\n\t\t\t$this->stats_commande['rows']=$obj->nb_rows;\n\t\t\t$this->stats_commande['qty']=$obj->qty?$obj->qty:0;\n\n\t\t\t// if it's a virtual product, maybe it is in order by extension\n\t\t\tif (! empty($conf->global->ORDER_ADD_ORDERS_WITH_PARENT_PROD_IF_INCDEC))\n\t\t\t{\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_commande($socid, $filtrestatut);\n\n\t\t\t\t\t\t\t$this->stats_commande['customers']+=$pFather->stats_commande['customers'];\n\t\t\t\t\t\t\t$this->stats_commande['nb']+=$pFather->stats_commande['nb'];\n\t\t\t\t\t\t\t$this->stats_commande['rows']+=$pFather->stats_commande['rows'];\n\t\t\t\t\t\t\t$this->stats_commande['qty']+=$pFather->stats_commande['qty'] * $qtyCoef;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If stock decrease is on invoice validation, the theorical stock continue to\n\t\t\t// count the orders to ship in theorical stock when some are already removed b invoice validation.\n\t\t\t// If option DECREASE_ONLY_UNINVOICEDPRODUCTS is on, we make a compensation.\n\t\t\tif (! empty($conf->global->STOCK_CALCULATE_ON_BILL))\n\t\t\t{\n\t\t\t\tif (! empty($conf->global->DECREASE_ONLY_UNINVOICEDPRODUCTS))\n\t\t\t\t{\n\t\t\t\t\t$adeduire = 0;\n\t\t\t\t\t$sql = \"SELECT sum(fd.qty) as count FROM \".MAIN_DB_PREFIX.\"facturedet fd \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"facture f ON fd.fk_facture = f.rowid \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"element_element el ON el.fk_target = f.rowid and el.targettype = 'facture' and sourcetype = 'commande'\";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"commande c ON el.fk_source = c.rowid \";\n\t\t\t\t\t$sql .= \" WHERE c.fk_statut IN (\".$filtrestatut.\") AND c.facture = 0 AND fd.fk_product = \".$this->id;\n\t\t\t\t\tdol_syslog(__METHOD__.\":: sql $sql\", LOG_NOTICE);\n\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ( $resql )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($this->db->num_rows($resql) > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t\t\t$adeduire += $obj->count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->stats_commande['qty'] -= $adeduire;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats commande fournisseur pour le produit/service\n\t *\n\t *  @param    int      $socid           Id societe pour filtrer sur une societe\n\t *  @param    string   $filtrestatut    Id des statuts pour filtrer sur des statuts\n\t *  @param    int      $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                     Tableau des stats\n\t */\n\tfunction load_stats_commande_fournisseur($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_suppliers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0) $sql.= \" AND c.fk_soc = \".$socid;\n\t\tif ($filtrestatut != '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\"; // Peut valoir 0\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_commande_fournisseur['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_commande_fournisseur['nb']=$obj->nb;\n\t\t\t$this->stats_commande_fournisseur['rows']=$obj->nb_rows;\n\t\t\t$this->stats_commande_fournisseur['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats expedition client pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                   Tableau des stats\n\t */\n\tfunction load_stats_sending($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT e.fk_soc) as nb_customers, COUNT(DISTINCT e.rowid) as nb,\";\n\t\t$sql.= \" COUNT(ed.rowid) as nb_rows, SUM(ed.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"expeditiondet as ed\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"expedition as e\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE e.rowid = ed.fk_expedition\";\n\t\t$sql.= \" AND c.rowid = cd.fk_commande\";\n\t\t$sql.= \" AND e.fk_soc = s.rowid\";\n\t\t$sql.= \" AND e.entity IN (\".getEntity('expedition').\")\";\n\t\t$sql.= \" AND ed.fk_origin_line = cd.rowid\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND e.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND e.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND c.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_expedition['customers']=$obj->nb_customers;\n\t\t\t$this->stats_expedition['nb']=$obj->nb;\n\t\t\t$this->stats_expedition['rows']=$obj->nb_rows;\n\t\t\t$this->stats_expedition['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats r\u00e9ception fournisseur pour le produit/service\n\t *\n\t *  @param    int    $socid           Id societe pour filtrer sur une societe\n\t *  @param    string $filtrestatut    Id statut pour filtrer sur un statut\n\t *  @param    int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t *  @return   array                   Tableau des stats\n\t */\n\tfunction load_stats_reception($socid=0,$filtrestatut='', $forVirtualStock = 0)\n\t{\n\t\tglobal $conf,$user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT cf.fk_soc) as nb_customers, COUNT(DISTINCT cf.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseur_dispatch as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as cf\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE cf.rowid = fd.fk_commande\";\n\t\t$sql.= \" AND cf.fk_soc = s.rowid\";\n\t\t$sql.= \" AND cf.entity IN (\".getEntity('supplier_order').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid && !$forVirtualStock) $sql.= \" AND cf.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND cf.fk_soc = \".$socid;\n\t\tif ($filtrestatut <> '') $sql.= \" AND cf.fk_statut in (\".$filtrestatut.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_reception['suppliers']=$obj->nb_customers;\n\t\t\t$this->stats_reception['nb']=$obj->nb;\n\t\t\t$this->stats_reception['rows']=$obj->nb_rows;\n\t\t\t$this->stats_reception['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats contrat pour le produit/service\n\t *\n\t *  @param    int\t$socid      Id societe\n\t *  @return   array       \t\tTableau des stats\n\t */\n\tfunction load_stats_contrat($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql.= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"contratdet as cd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"contrat as c\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = cd.fk_contrat\";\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql.= \" AND cd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND c.statut != 0\";\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_contrat['customers']=$obj->nb_customers;\n\t\t\t$this->stats_contrat['nb']=$obj->nb;\n\t\t\t$this->stats_contrat['rows']=$obj->nb_rows;\n\t\t\t$this->stats_contrat['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t *  @param    int\t\t$socid      Id societe\n\t *  @return   array       \t\t\tTableau des stats\n\t */\n\tfunction load_stats_facture($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_customers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facturedet as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"facture as f\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = fd.fk_facture\";\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql .= \" AND f.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_facture['customers']=$obj->nb_customers;\n\t\t\t$this->stats_facture['nb']=$obj->nb;\n\t\t\t$this->stats_facture['rows']=$obj->nb_rows;\n\t\t\t$this->stats_facture['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t *  @param    int\t\t$socid      Id societe\n\t *  @return   array       \t\t\tTableau des stats\n\t */\n\tfunction load_stats_facture_fournisseur($socid=0)\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_suppliers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql.= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as fd\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"facture_fourn as f\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = fd.fk_facture_fourn\";\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\t$sql.= \" AND fd.fk_product = \".$this->id;\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0)\t$sql .= \" AND f.fk_soc = \".$socid;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ( $result )\n\t\t{\n\t\t\t$obj=$this->db->fetch_object($result);\n\t\t\t$this->stats_facture_fournisseur['suppliers']=$obj->nb_suppliers;\n\t\t\t$this->stats_facture_fournisseur['nb']=$obj->nb;\n\t\t\t$this->stats_facture_fournisseur['rows']=$obj->nb_rows;\n\t\t\t$this->stats_facture_fournisseur['qty']=$obj->qty?$obj->qty:0;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return an array formated for showing graphs\n\t *\n\t *  @param\t\tstring\t$sql        Request to execute\n\t *  @param\t\tstring\t$mode\t\t'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $year       Year (0=current year)\n\t *  @return   \tarray       \t\t<0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction _get_stats($sql, $mode, $year=0)\n\t{\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$arr = $this->db->fetch_array($resql);\n\t\t\t\tif ($mode == 'byunit')   $tab[$arr[1]] = $arr[0];\t// 1st field\n\t\t\t\tif ($mode == 'bynumber') $tab[$arr[1]] = $arr[2];\t// 3rd field\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($year))\n\t\t{\n\t\t    $year = strftime('%Y',time());\n\t\t    $month = strftime('%m',time());\n\t\t}\n\t\telse\n\t\t{\n\t\t    $month=12;    // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t}\n\t\t$result = array();\n\n\t\tfor ($j = 0 ; $j < 12 ; $j++)\n\t\t{\n\t\t\t$idx=ucfirst(dol_trunc(dol_print_date(dol_mktime(12,0,0,$month,1,$year),\"%b\"),3,'right','UTF-8',1));\n\t\t\t$monthnum=sprintf(\"%02s\",$month);\n\n\t\t\t$result[$j] = array($idx,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\t\t\t//            $result[$j] = array($monthnum,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\n\t\t\t$month = \"0\".($month - 1);\n\t\t\tif (dol_strlen($month) == 3)\n\t\t\t{\n\t\t\t\t$month = substr($month,1);\n\t\t\t}\n\t\t\tif ($month == 0)\n\t\t\t{\n\t\t\t\t$month = 12;\n\t\t\t\t$year = $year - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn array_reverse($result);\n\t}\n\n\n\t/**\n\t *  Return nb of units or customers invoices in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_vente($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT f.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facturedet as d, \".MAIN_DB_PREFIX.\"facture as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = d.fk_facture\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND f.fk_soc = $socid\";\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\n\t/**\n\t *  Return nb of units or supplier invoices in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_achat($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT f.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as d, \".MAIN_DB_PREFIX.\"facture_fourn as f, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n        if (!$user->rights->societe->client->voir && !$socid) $sql.= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE f.rowid = d.fk_facture_fourn\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND f.fk_soc = s.rowid\";\n\t\t$sql.= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND f.fk_soc = $socid\";\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or proposals in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_propal($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.datep, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT p.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"propaldet as d, \".MAIN_DB_PREFIX.\"propal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = d.fk_propal\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND prod.rowid = d.fk_product AND prod.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(p.datep,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(p.datep,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or proposals in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t * \t@param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_propalsupplier($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT p.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as d, \".MAIN_DB_PREFIX.\"supplier_proposal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE p.rowid = d.fk_supplier_proposal\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND prod.rowid = d.fk_product AND prod.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND p.fk_soc = s.rowid\";\n\t\t$sql.= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND p.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(p.date_valid,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(p.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or orders in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_order($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT c.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commandedet as d, \".MAIN_DB_PREFIX.\"commande as c, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n        if (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Return nb of units or orders in which product is included\n\t *\n\t *  @param  \tint\t\t$socid                   Limit count on a particular third party id\n\t *  @param\t\tstring\t$mode\t\t             'byunit'=number of unit, 'bynumber'=nb of entities\n\t *  @param      int     $filteronproducttype     0=To filter on product only, 1=To filter on services only\n\t *  @param      int     $year                    Year (0=last 12 month)\n\t *  @param      string  $morefilter              More sql filters\n\t * \t@return   \tarray       \t\t             <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tfunction get_nb_ordersupplier($socid, $mode, $filteronproducttype=-1, $year=0, $morefilter='')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') $sql.= \", count(DISTINCT c.rowid)\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as d, \".MAIN_DB_PREFIX.\"commande_fournisseur as c, \".MAIN_DB_PREFIX.\"societe as s\";\n        if ($filteronproducttype >= 0) $sql.=\", \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t$sql.= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) $sql.= \" AND d.fk_product =\".$this->id;\n\t\telse $sql.=\" AND d.fk_product > 0\";\n\t\tif ($filteronproducttype >= 0) $sql.= \" AND p.rowid = d.fk_product AND p.fk_product_type =\".$filteronproducttype;\n\t\t$sql.= \" AND c.fk_soc = s.rowid\";\n\t\t$sql.= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\tif (!$user->rights->societe->client->voir && !$socid) $sql.= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \" .$user->id;\n\t\tif ($socid > 0)\t$sql.= \" AND c.fk_soc = \".$socid;\n\t\t$sql.=$morefilter;\n\t\t$sql.= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql.= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql,$mode, $year);\n\t}\n\n\t/**\n\t *  Link a product/service to a parent product/service\n\t *\n\t *  @param      int\t$id_pere    Id of parent product/service\n\t *  @param      int\t$id_fils    Id of child product/service\n\t *  @param\t\tint\t$qty\t\tQuantity\n\t *  @param\t\tint\t$incdec\t\t1=Increase/decrease stock of child when parent stock increase/decrease\n\t *  @return     int        \t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction add_sousproduit($id_pere, $id_fils, $qty, $incdec=1)\n\t{\n\t\t// Clean parameters\n\t\tif (! is_numeric($id_pere)) $id_pere=0;\n\t\tif (! is_numeric($id_fils)) $id_fils=0;\n\t\tif (! is_numeric($incdec)) $incdec=0;\n\n\t\t$result=$this->del_sousproduit($id_pere, $id_fils);\n\t\tif ($result < 0) return $result;\n\n\t\t// Check not already father of id_pere (to avoid father -> child -> father links)\n\t\t$sql = 'SELECT fk_product_pere from '.MAIN_DB_PREFIX.'product_association';\n\t\t$sql .= ' WHERE fk_product_pere  = '.$id_fils.' AND fk_product_fils = '.$id_pere;\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\tif($num > 0)\n\t\t\t\t{\n\t\t\t\t\t$this->error=\"isFatherOfThis\";\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association(fk_product_pere,fk_product_fils,qty,incdec)';\n\t\t\t\t\t$sql .= ' VALUES ('.$id_pere.', '.$id_fils.', '.$qty.', '.$incdec.')';\n\t\t\t\t\tif (! $this->db->query($sql))\n\t\t\t\t\t{\n\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Modify composed product\n\t *\n\t *  @param      int\t$id_pere    Id of parent product/service\n\t *  @param      int\t$id_fils    Id of child product/service\n\t *  @param\t\tint\t$qty\t\tQuantity\n\t *  @param\t\tint\t$incdec\t\t1=Increase/decrease stock of child when parent stock increase/decrease\n\t * \t@return     int        \t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction update_sousproduit($id_pere, $id_fils, $qty, $incdec=1)\n\t{\n\t\t// Clean parameters\n\t\tif (! is_numeric($id_pere)) $id_pere=0;\n\t\tif (! is_numeric($id_fils)) $id_fils=0;\n\t\tif (! is_numeric($incdec)) $incdec=1;\n\t\tif (! is_numeric($qty)) $qty=1;\n\n\t\t$sql = 'UPDATE '.MAIN_DB_PREFIX.'product_association SET ';\n\t\t$sql.= 'qty='.$qty;\n\t\t$sql.= ',incdec='.$incdec;\n\t\t$sql .= ' WHERE fk_product_pere='.$id_pere.' AND fk_product_fils='.$id_fils;\n\n\t\tif (!$this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\t/**\n\t *  Retire le lien entre un sousproduit et un produit/service\n\t *\n\t *  @param      int\t$fk_parent\t\tId du produit auquel ne sera plus lie le produit lie\n\t *  @param      int\t$fk_child\t\tId du produit a ne plus lie\n\t *  @return     int\t\t\t    \t< 0 if KO, > 0 if OK\n\t */\n\tfunction del_sousproduit($fk_parent, $fk_child)\n\t{\n\t\tif (! is_numeric($fk_parent)) $fk_parent=0;\n\t\tif (! is_numeric($fk_child)) $fk_child=0;\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere  = \".$fk_parent;\n\t\t$sql.= \" AND fk_product_fils = \".$fk_child;\n\n\t\tdol_syslog(get_class($this).'::del_sousproduit', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Verifie si c'est un sous-produit\n\t *\n\t *  @param      int\t$fk_parent\t\tId du produit auquel le produit est lie\n\t *  @param      int\t$fk_child\t\tId du produit lie\n\t *  @return     int\t\t\t    \t< 0 si erreur, > 0 si ok\n\t */\n\tfunction is_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t$sql = \"SELECT fk_product_pere, qty, incdec\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere  = '\".$fk_parent.\"'\";\n\t\t$sql.= \" AND fk_product_fils = '\".$fk_child.\"'\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\n\t\t\tif($num > 0)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->is_sousproduit_qty = $obj->qty;\n\t\t\t\t$this->is_sousproduit_incdec = $obj->incdec;\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Add a supplier price for the product.\n\t *  Note: Duplicate ref is accepted for different quantity only, or for different companies.\n\t *\n\t *  @param      User\t$user       User that make link\n\t *  @param      int\t\t$id_fourn   Supplier id\n\t *  @param      string\t$ref_fourn  Supplier ref\n\t *  @param\t\tfloat\t$quantity\tQuantity minimum for price\n\t *  @return     int         \t\t< 0 if KO, 0 if link already exists for this product, > 0 if OK\n\t */\n\tfunction add_fournisseur($user, $id_fourn, $ref_fourn, $quantity)\n\t{\n\t\tglobal $conf;\n\n\t\t$now=dol_now();\n\n    \tdol_syslog(get_class($this).\"::add_fournisseur id_fourn = \".$id_fourn.\" ref_fourn=\".$ref_fourn.\" quantity=\".$quantity, LOG_DEBUG);\n\n\t\tif ($ref_fourn)\n\t\t{\n    \t\t$sql = \"SELECT rowid, fk_product\";\n    \t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n    \t\t$sql.= \" WHERE fk_soc = \".$id_fourn;\n    \t\t$sql.= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n    \t\t$sql.= \" AND fk_product != \".$this->id;\n    \t\t$sql.= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n    \t\t$resql=$this->db->query($sql);\n    \t\tif ($resql)\n    \t\t{\n    \t\t\t$obj = $this->db->fetch_object($resql);\n                if ($obj)\n                {\n        \t\t\t// If the supplier ref already exists but for another product (duplicate ref is accepted for different quantity only or different companies)\n                    $this->product_id_already_linked = $obj->fk_product;\n    \t\t\t\treturn -3;\n    \t\t\t}\n                $this->db->free($resql);\n    \t\t}\n\t\t}\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql.= \" WHERE fk_soc = \".$id_fourn;\n\t\tif ($ref_fourn) $sql.= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\telse $sql.= \" AND (ref_fourn = '' OR ref_fourn IS NULL)\";\n\t\t$sql.= \" AND quantity = '\".$quantity.\"'\";\n\t\t$sql.= \" AND fk_product = \".$this->id;\n\t\t$sql.= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n    \t\t$obj = $this->db->fetch_object($resql);\n\n\t\t    // The reference supplier does not exist, we create it for this product.\n\t\t\tif (! $obj)\n\t\t\t{\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_fournisseur_price(\";\n\t\t\t\t$sql.= \"datec\";\n\t\t\t\t$sql.= \", entity\";\n\t\t\t\t$sql.= \", fk_product\";\n\t\t\t\t$sql.= \", fk_soc\";\n\t\t\t\t$sql.= \", ref_fourn\";\n\t\t\t\t$sql.= \", quantity\";\n\t\t\t\t$sql.= \", fk_user\";\n\t\t\t\t$sql.= \", tva_tx\";\n\t\t\t\t$sql.= \") VALUES (\";\n\t\t\t\t$sql.= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t$sql.= \", \".$conf->entity;\n\t\t\t\t$sql.= \", \".$this->id;\n\t\t\t\t$sql.= \", \".$id_fourn;\n\t\t\t\t$sql.= \", '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t\t$sql.= \", \".$quantity;\n\t\t\t\t$sql.= \", \".$user->id;\n\t\t\t\t$sql.= \", 0\";\n\t\t\t\t$sql.= \")\";\n\n\t\t\t\tif ($this->db->query($sql))\n\t\t\t\t{\n\t\t\t\t\t$this->product_fourn_price_id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product_fournisseur_price\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the supplier price already exists for this product and quantity\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Renvoie la liste des fournisseurs du produit/service\n\t *\n\t *  @return \tarray\t\tTableau des id de fournisseur\n\t */\n\tfunction list_suppliers()\n\t{\n\t\tglobal $conf;\n\n\t\t$list = array();\n\n\t\t$sql = \"SELECT DISTINCT p.fk_soc\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as p\";\n\t\t$sql.= \" WHERE p.fk_product = \".$this->id;\n\t\t$sql.= \" AND p.entity = \".$conf->entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i=0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$list[$i] = $obj->fk_soc;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t/**\n\t *  Recopie les prix d'un produit/service sur un autre\n\t *\n\t *  @param\tint\t\t$fromId     Id product source\n\t *  @param  int\t\t$toId       Id product target\n\t *  @return nt         \t\t\t< 0 if KO, > 0 if OK\n\t */\n\tfunction clone_price($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t// les prix\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_price (\";\n\t\t$sql.= \" fk_product, date_price, price, tva_tx, localtax1_tx, localtax2_tx, fk_user_author, tosell)\";\n\t\t$sql.= \" SELECT \".$toId . \", date_price, price, tva_tx, localtax1_tx, localtax2_tx, fk_user_author, tosell\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price \";\n\t\t$sql.= \" WHERE fk_product = \". $fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_price', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Clone links between products\n\t *\n\t * @param  int\t\t$fromId\t\tProduct id\n\t * @param  int\t\t$toId\t\tProduct id\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tfunction clone_associations($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association (fk_product_pere, fk_product_fils, qty)';\n\t\t$sql.= \" SELECT \".$toId.\", fk_product_fils, qty FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql.= \" WHERE fk_product_pere = \".$fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_association', LOG_DEBUG);\n\t\tif (! $this->db->query($sql))\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Recopie les fournisseurs et prix fournisseurs d'un produit/service sur un autre\n\t *\n\t *  @param    int\t$fromId      Id produit source\n\t *  @param    int\t$toId        Id produit cible\n\t *  @return   int    \t\t     < 0 si erreur, > 0 si ok\n\t */\n\tfunction clone_fournisseurs($fromId, $toId)\n\t{\n\t\t$this->db->begin();\n\n\t\t$now=dol_now();\n\n\t\t// les fournisseurs\n\t\t/*$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur (\"\n\t\t. \" datec, fk_product, fk_soc, ref_fourn, fk_user_author )\"\n\t\t. \" SELECT '\".$this->db->idate($now).\"', \".$toId.\", fk_soc, ref_fourn, fk_user_author\"\n\t\t. \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur\"\n\t\t. \" WHERE fk_product = \".$fromId;\n\n\t\tif ( ! $this->db->query($sql ) )\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}*/\n\n\t\t// les prix de fournisseurs.\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur_price (\";\n\t\t$sql.= \" datec, fk_product, fk_soc, price, quantity, fk_user)\";\n\t\t$sql.= \" SELECT '\".$this->db->idate($now).\"', \".$toId. \", fk_soc, price, quantity, fk_user\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql.= \" WHERE fk_product = \".$fromId;\n\n\t\tdol_syslog(get_class($this).'::clone_fournisseurs', LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t    $this->db->commit();\n\t\t    return 1;\n\t\t}\n\t}\n\n\t/**\n\t *  Fonction recursive uniquement utilisee par get_arbo_each_prod, recompose l'arborescence des sousproduits\n\t * \tDefine value of this->res\n\t *\n\t *\t@param\t\tarray\t\t$prod\t\t\tProducts array\n\t *\t@param\t\tstring\t\t$compl_path\t\tDirectory path of parents to add before\n\t *\t@param\t\tint\t\t\t$multiply\t\tBecause each sublevel must be multiplicated by parent nb\n\t *\t@param\t\tint\t\t\t$level\t\t\tInit level\n\t *  @param\t\tint\t\t\t$id_parent\t\tId parent\n\t *  @return \tvoid\n\t */\n\tfunction fetch_prod_arbo($prod, $compl_path=\"\", $multiply=1, $level=1, $id_parent=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$product = new Product($this->db);\n\t\t//var_dump($prod);\n\t\tforeach($prod as $id_product => $desc_pere)\t// $id_product is 0 (first call starting with root top) or an id of a sub_product\n\t\t{\n\t\t\tif (is_array($desc_pere))\t// If desc_pere is an array, this means it's a child\n\t\t\t{\n\t\t\t\t$id=(! empty($desc_pere[0]) ? $desc_pere[0] :'');\n\t\t\t\t$nb=(! empty($desc_pere[1]) ? $desc_pere[1] :'');\n\t\t\t\t$type=(! empty($desc_pere[2]) ? $desc_pere[2] :'');\n\t\t\t\t$label=(! empty($desc_pere[3]) ? $desc_pere[3] :'');\n\t\t\t\t$incdec=!empty($desc_pere[4]) ? $desc_pere[4] : 0;\n\n\t\t\t\tif ($multiply < 1) $multiply=1;\n\n\t\t\t\t//print \"XXX We add id=\".$id.\" - label=\".$label.\" - nb=\".$nb.\" - multiply=\".$multiply.\" fullpath=\".$compl_path.$label.\"\\n\";\n\t\t\t\t$this->fetch($id);\t\t// Load product\n\t\t\t\t$this->load_stock('nobatch,novirtual');\t// Load stock to get true this->stock_reel\n\t\t\t\t$this->res[]= array(\n\t\t\t\t\t'id'=>$id,\t\t\t\t\t// Id product\n\t\t\t\t\t'id_parent'=>$id_parent,\n\t\t\t\t\t'ref'=>$this->ref,\t\t\t// Ref product\n\t\t\t\t\t'nb'=>$nb,\t\t\t\t\t// Nb of units that compose parent product\n\t\t\t\t\t'nb_total'=>$nb*$multiply,\t// Nb of units for all nb of product\n\t\t\t\t\t'stock'=>$this->stock_reel,\t// Stock\n\t\t\t\t\t'stock_alert'=>$this->seuil_stock_alerte,\t// Stock alert\n\t\t\t\t\t'label'=>$label,\n\t\t\t\t\t'fullpath'=>$compl_path.$label,\t\t\t// Label\n\t\t\t\t\t'type'=>$type,\t\t\t\t// Nb of units that compose parent product\n\t\t\t\t\t'desiredstock'=>$this->desiredstock,\n\t\t\t\t\t'level'=>$level,\n\t\t\t\t\t'incdec'=>$incdec,\n\t\t\t\t\t'entity'=>$this->entity\n\t\t\t\t);\n\n\t\t\t\t// Recursive call if there is childs to child\n\t\t\t\tif (is_array($desc_pere['childs']))\n\t\t\t\t{\n\t\t\t\t\t//print 'YYY We go down for '.$desc_pere[3].\" -> \\n\";\n\t\t\t\t\t$this->fetch_prod_arbo($desc_pere['childs'], $compl_path.$desc_pere[3].\" -> \", $desc_pere[1]*$multiply, $level+1, $id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Build the tree of subproducts into an array\n\t *  this->sousprods is loaded by this->get_sousproduits_arbo()\n\t *\n\t *\t@param\t\tint\t\t$multiply\t\tBecause each sublevel must be multiplicated by parent nb\n\t *  @return \tarray \t\t\t\t\t$this->res\n\t */\n\tfunction get_arbo_each_prod($multiply=1)\n\t{\n\t\t$this->res = array();\n\t\tif (isset($this->sousprods) && is_array($this->sousprods))\n\t\t{\n\t\t\tforeach($this->sousprods as $prod_name => $desc_product)\n\t\t\t{\n\t\t\t\tif (is_array($desc_product)) $this->fetch_prod_arbo($desc_product,\"\",$multiply,1,$this->id);\n\t\t\t}\n\t\t}\n\t\t//var_dump($this->res);\n\t\treturn $this->res;\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t *  @return \tint\t\t\tNb of father + child\n\t */\n\tfunction hasFatherOrChild()\n\t{\n\t\t$nb = 0;\n\n\t\t$sql = \"SELECT COUNT(pa.rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql.= \" WHERE pa.fk_product_fils = \".$this->id.\" OR pa.fk_product_pere = \".$this->id;\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) $nb = $obj->nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t *  @return \tarray \t\tArray of product\n\t */\n\tfunction getFather()\n\t{\n\t\t$sql = \"SELECT p.rowid, p.label as label, p.ref as ref, pa.fk_product_pere as id, p.fk_product_type, pa.qty, pa.incdec, p.entity\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= \" WHERE p.rowid = pa.fk_product_pere\";\n\t\t$sql.= \" AND pa.fk_product_fils = \".$this->id;\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$prods = array ();\n\t\t\twhile ($record = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\t// $record['id'] = $record['rowid'] = id of father\n\t\t\t\t$prods[$record['id']]['id'] = $record['rowid'];\n\t\t\t\t$prods[$record['id']]['ref'] = $record['ref'];\n\t\t\t\t$prods[$record['id']]['label'] = $record['label'];\n\t\t\t\t$prods[$record['id']]['qty'] = $record['qty'];\n\t\t\t\t$prods[$record['id']]['incdec'] = $record['incdec'];\n\t\t\t\t$prods[$record['id']]['fk_product_type'] =  $record['fk_product_type'];\n\t\t\t\t$prods[$record['id']]['entity'] =  $record['entity'];\n\t\t\t}\n\t\t\treturn $prods;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return childs of product $id\n\t *\n\t * \t@param\t\tint\t\t$id\t\t\t\t\tId of product to search childs of\n\t *  @param\t\tint\t\t$firstlevelonly\t\tReturn only direct child\n\t *  @param\t\tint\t\t$level\t\t\t\tLevel of recursing call (start to 1)\n\t *  @return     array       \t\t\t\tReturn array(prodid=>array(0=prodid, 1=>qty, 2=> ...)\n\t */\n\tfunction getChildsArbo($id, $firstlevelonly=0, $level=1)\n\t{\n\t\tglobal $alreadyfound;\n\n\t\t$sql = \"SELECT p.rowid, p.label as label, pa.qty as qty, pa.fk_product_fils as id, p.fk_product_type, pa.incdec\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql.= \" WHERE p.rowid = pa.fk_product_fils\";\n\t\t$sql.= \" AND pa.fk_product_pere = \".$id;\n\t\t$sql.= \" AND pa.fk_product_fils != \".$id;\t// This should not happens, it is to avoid infinite loop if it happens\n\n\t\tdol_syslog(get_class($this).'::getChildsArbo id='.$id.' level='.$level, LOG_DEBUG);\n\n\t\tif ($level == 1) $alreadyfound=array($id=>1);\t// We init array of found object to start of tree, so if we found it later (should not happened), we stop immediatly\n\t\t// Protection against infinite loop\n\t\tif ($level > 30) return array();\n\n\t\t$res  = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$prods = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\tif (! empty($alreadyfound[$rec['rowid']]))\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).'::getChildsArbo the product id='.$rec['rowid'].' was already found at a higher level in tree. We discard to avoid infinite loop', LOG_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$alreadyfound[$rec['rowid']]=1;\n\t\t\t\t$prods[$rec['rowid']]= array(\n\t\t\t\t\t0=>$rec['rowid'],\n\t\t\t\t\t1=>$rec['qty'],\n\t\t\t\t\t2=>$rec['fk_product_type'],\n\t\t\t\t\t3=>$this->db->escape($rec['label']),\n\t\t\t\t\t4=>$rec['incdec']\n\t\t\t\t);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty'],2=>$rec['fk_product_type']);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty']);\n\t\t\t\tif (empty($firstlevelonly))\n\t\t\t\t{\n\t\t\t\t\t$listofchilds=$this->getChildsArbo($rec['rowid'], 0, $level + 1);\n\t\t\t\t\tforeach($listofchilds as $keyChild => $valueChild)\n\t\t\t\t\t{\n\t\t\t\t\t\t$prods[$rec['rowid']]['childs'][$keyChild] = $valueChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $prods;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \tReturn tree of all subproducts for product. Tree contains id, name and quantity.\n\t * \tSet this->sousprods\n\t *\n\t *  @return    \tvoid\n\t */\n\tfunction get_sousproduits_arbo()\n\t{\n\t    $parent=array();\n\n\t\tforeach($this->getChildsArbo($this->id) as $keyChild => $valueChild)\t// Warning. getChildsArbo can call getChildsArbo recursively. Starting point is $value[0]=id of product\n\t\t{\n\t\t\t$parent[$this->label][$keyChild] = $valueChild;\n\t\t}\n\t\tforeach($parent as $key => $value)\t\t// key=label, value is array of childs\n\t\t{\n\t\t\t$this->sousprods[$key] = $value;\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn clicable link of object (with eventually picto)\n\t *\n\t *\t@param\t\tint\t\t$withpicto\t\t\t\t\tAdd picto into link\n\t *\t@param\t\tstring\t$option\t\t\t\t\t\tWhere point the link ('stock', 'composition', 'category', 'supplier', '')\n\t *\t@param\t\tint\t\t$maxlength\t\t\t\t\tMaxlength of ref\n     *  @param      int     $save_lastsearch_value\t\t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\t\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tfunction getNomUrl($withpicto=0, $option='', $maxlength=0, $save_lastsearch_value=-1)\n\t{\n\t\tglobal $conf, $langs, $hookmanager;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\t\t$result='';\n        $newref=$this->ref;\n        if ($maxlength) $newref=dol_trunc($newref,$maxlength,'middle');\n\n        if ($this->type == Product::TYPE_PRODUCT) $label = '<u>' . $langs->trans(\"ShowProduct\") . '</u>';\n        if ($this->type == Product::TYPE_SERVICE) $label = '<u>' . $langs->trans(\"ShowService\") . '</u>';\n        if (! empty($this->ref))\n            $label .= '<br><b>' . $langs->trans('ProductRef') . ':</b> ' . $this->ref;\n        if (! empty($this->label))\n            $label .= '<br><b>' . $langs->trans('ProductLabel') . ':</b> ' . $this->label;\n\n        if ($this->type == Product::TYPE_PRODUCT)\n        {\n            if ($this->weight)  $label.=\"<br><b>\".$langs->trans(\"Weight\").'</b>: '.$this->weight.' '.measuring_units_string($this->weight_units,\"weight\");\n    \t\tif ($this->length)  $label.=\"<br><b>\".$langs->trans(\"Length\").'</b>: '.$this->length.' '.measuring_units_string($this->length_units,'length');\n    \t\tif ($this->surface) $label.=\"<br><b>\".$langs->trans(\"Surface\").'</b>: '.$this->surface.' '.measuring_units_string($this->surface_units,'surface');\n    \t\tif ($this->volume)  $label.=\"<br><b>\".$langs->trans(\"Volume\").'</b>: '.$this->volume.' '.measuring_units_string($this->volume_units,'volume');\n        }\n\n        if ($this->type == Product::TYPE_PRODUCT || ! empty($conf->global->STOCK_SUPPORTS_SERVICES))\n        {\n    \t\tif (! empty($conf->productbatch->enabled))\n            {\n            \t$langs->load(\"productbatch\");\n                $label.=\"<br><b>\".$langs->trans(\"ManageLotSerial\").'</b>: '.$this->getLibStatut(0,2);\n            }\n        }\n        if ($this->type == Product::TYPE_SERVICE)\n        {\n            //\n        }\n        if (! empty($conf->accounting->enabled) && $this->status)\n        {\n        \tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellCode') . ':</b> '. length_accountg($this->accountancy_code_sell);\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellIntraCode') . ':</b> '. length_accountg($this->accountancy_code_sell_export);\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancySellExportCode') . ':</b> '. length_accountg($this->accountancy_code_sell_intra);\n        }\n        if (! empty($conf->accounting->enabled) && $this->status_buy)\n        {\n        \tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n        \t$label.= '<br><b>' . $langs->trans('ProductAccountancyBuyCode') . ':</b> '. length_accountg($this->accountancy_code_buy);\n        }\n        if (! empty($this->entity))\n        {\n            $tmpphoto = $this->show_photos('product', $conf->product->multidir_output[$this->entity], 1, 1, 0, 0, 0, 80);\n            if ($this->nbphoto > 0) $label .= '<br>' . $tmpphoto;\n        }\n\n\t\t$linkclose='';\n\t\tif (empty($notooltip))\n\t\t{\n\t\t    if (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t\t    {\n\t\t        $label=$langs->trans(\"ShowOrder\");\n\t\t        $linkclose.=' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t    }\n\n\t\t    $linkclose.= ' title=\"'.dol_escape_htmltag($label, 1, 1).'\"';\n\t\t    $linkclose.= ' class=\"classfortooltip\"';\n\n\t\t    /*\n\t        $hookmanager->initHooks(array('productdao'));\n\t        $parameters=array('id'=>$this->id);\n\t        $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t        if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t        */\n\t\t}\n\n        if ($option == 'supplier' || $option == 'category') {\n            $url = DOL_URL_ROOT.'/product/fournisseurs.php?id='.$this->id;\n        } else if ($option == 'stock') {\n            $url = DOL_URL_ROOT.'/product/stock/product.php?id='.$this->id;\n        } else if ($option == 'composition') {\n            $url = DOL_URL_ROOT.'/product/composition/card.php?id='.$this->id;\n        } else {\n            $url = DOL_URL_ROOT.'/product/card.php?id='.$this->id;\n        }\n\n        if ($option !== 'nolink')\n        {\n        \t// Add param to save lastsearch_values or not\n        \t$add_save_lastsearch_values=($save_lastsearch_value == 1 ? 1 : 0);\n        \tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/',$_SERVER[\"PHP_SELF\"])) $add_save_lastsearch_values=1;\n        \tif ($add_save_lastsearch_values) $url.='&save_lastsearch_values=1';\n        }\n\n        $linkstart = '<a href=\"'.$url.'\"';\n        $linkstart.=$linkclose.'>';\n        $linkend='</a>';\n\n        $result.=$linkstart;\n\t\tif ($withpicto) {\n\t\t\tif ($this->type == Product::TYPE_PRODUCT) $result.=(img_object(($notooltip?'':$label), 'product', ($notooltip?'class=\"paddingright\"':'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip?0:1));\n\t\t\tif ($this->type == Product::TYPE_SERVICE) $result.=(img_object(($notooltip?'':$label), 'service',  ($notooltip?'class=\"paddinright\"':'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip?0:1));\n\t\t}\n\t\t$result.= $newref;\n\t\t$result.= $linkend;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters=array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook=$hookmanager->executeHooks('getNomUrl',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) $result = $hookmanager->resPrint;\n\t\telse $result .= $hookmanager->resPrint;\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails=0, $hidedesc=0, $hideref=0)\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$langs->load(\"products\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (! dol_strlen($modele))\n\t\t{\n\t\t\tif (! empty($conf->global->PRODUCT_ADDON_PDF))\n\t\t\t{\n\t\t\t\t$modele = $conf->global->PRODUCT_ADDON_PDF;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$modele = 'strato';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/product/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t}\n\n\t/**\n\t *\tReturn label of status of object\n\t *\n\t *\t@param      int\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t *\t@param      int\t$type       0=Sell, 1=Buy, 2=Batch Number management\n\t *\t@return     string      \tLabel of status\n\t */\n\tfunction getLibStatut($mode=0, $type=0)\n\t{\n\t\tswitch ($type)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\treturn $this->LibStatut($this->status,$mode,$type);\n\t\t\tcase 1:\n\t\t\t\treturn $this->LibStatut($this->status_buy,$mode,$type);\n\t\t\tcase 2:\n\t\t\t\treturn $this->LibStatut($this->status_batch,$mode,$type);\n\t\t\tdefault:\n\t\t\t\t//Simulate previous behavior but should return an error string\n\t\t\t\treturn $this->LibStatut($this->status_buy,$mode,$type);\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn label of a given status\n\t *\n\t *\t@param      int\t\t$status     Statut\n\t *\t@param      int\t\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t *\t@param      int\t\t$type       0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t *\t@return     string      \t\tLabel of status\n\t */\n\tfunction LibStatut($status,$mode=0,$type=0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs->load('products');\n\t\tif (! empty($conf->productbatch->enabled)) $langs->load(\"productbatch\");\n\n\t\tif ($type == 2)\n\t\t{\n\t\t\tswitch ($mode)\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\treturn ($status == 0 ? $langs->trans('ProductStatusNotOnBatch') : $langs->trans('ProductStatusOnBatch'));\n\t\t\t\tcase 1:\n\t\t\t\t\treturn ($status == 0 ? $langs->trans('ProductStatusNotOnBatchShort') : $langs->trans('ProductStatusOnBatchShort'));\n\t\t\t\tcase 2:\n\t\t\t\t\treturn $this->LibStatut($status,3,2).' '.$this->LibStatut($status,1,2);\n\t\t\t\tcase 3:\n\t\t\t\t\tif ($status == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn img_picto($langs->trans('ProductStatusNotOnBatch'),'statut5');\n\t\t\t\t\t}\n\t\t\t\t\treturn img_picto($langs->trans('ProductStatusOnBatch'),'statut4');\n\t\t\t\tcase 4:\n\t\t\t\t\treturn $this->LibStatut($status,3,2).' '.$this->LibStatut($status,0,2);\n\t\t\t\tcase 5:\n\t\t\t\t\treturn $this->LibStatut($status,1,2).' '.$this->LibStatut($status,3,2);\n\t\t\t\tdefault:\n\t\t\t\t\treturn $langs->trans('Unknown');\n\t\t\t}\n\t\t}\n\t\tif ($mode == 0)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort'));\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort'));\n\t\t}\n\t\tif ($mode == 1)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy'));\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy'));\n\t\t}\n\t\tif ($mode == 2)\n\t\t{\n\t\t\tif ($status == 0) return img_picto($langs->trans('ProductStatusNotOnSell'),'statut5', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort'));\n\t\t\tif ($status == 1) return img_picto($langs->trans('ProductStatusOnSell'),'statut4', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort'));\n\t\t}\n\t\tif ($mode == 3)\n\t\t{\n\t\t\tif ($status == 0) return img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell') : $langs->trans('ProductStatusNotOnBuy')),'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return img_picto(($type==0 ? $langs->trans('ProductStatusOnSell') : $langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 4)\n\t\t{\n\t\t\tif ($status == 0) return img_picto($langs->trans('ProductStatusNotOnSell'),'statut5', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy'));\n\t\t\tif ($status == 1) return img_picto($langs->trans('ProductStatusOnSell'),'statut4', 'class=\"pictostatus\"').' '.($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy'));\n\t\t}\n\t\tif ($mode == 5)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy')), 'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 6)\n\t\t{\n\t\t\tif ($status == 0) return ($type==0 ? $langs->trans('ProductStatusNotOnSellShort'):$langs->trans('ProductStatusNotOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusNotOnSell'):$langs->trans('ProductStatusNotOnBuy')), 'statut5', 'class=\"pictostatus\"');\n\t\t\tif ($status == 1) return ($type==0 ? $langs->trans('ProductStatusOnSellShort'):$langs->trans('ProductStatusOnBuyShort')).' '.img_picto(($type==0 ? $langs->trans('ProductStatusOnSell'):$langs->trans('ProductStatusOnBuy')),'statut4', 'class=\"pictostatus\"');\n\t\t}\n\t\treturn $langs->trans('Unknown');\n\t}\n\n\n\t/**\n\t *  Retourne le libelle du finished du produit\n\t *\n\t *  @return     string\t\tLibelle\n\t */\n\tfunction getLibFinished()\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('products');\n\n\t\tif ($this->finished == '0') return $langs->trans(\"RowMaterial\");\n\t\tif ($this->finished == '1') return $langs->trans(\"Finished\");\n\t\treturn '';\n\t}\n\n\n\t/**\n\t *  Adjust stock in a warehouse for product\n\t *\n\t *  @param  \tUser\t$user           user asking change\n\t *  @param  \tint\t\t$id_entrepot    id of warehouse\n\t *  @param  \tdouble\t$nbpiece        nb of units\n\t *  @param  \tint\t\t$movement       0 = add, 1 = remove\n\t * \t@param\t\tstring\t$label\t\t\tLabel of stock movement\n\t * \t@param\t\tdouble\t$price\t\t\tUnit price HT of product, used to calculate average weighted price (PMP in french). If 0, average weighted price is not changed.\n\t *  @param\t\tstring\t$inventorycode\tInventory code\n\t *  @param  \tstring\t$origin_element Origin element type\n\t *  @param  \tint\t\t$origin_id      Origin id of element\n\t * \t@return     int     \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction correct_stock($user, $id_entrepot, $nbpiece, $movement, $label='', $price=0, $inventorycode='', $origin_element='', $origin_id=null)\n\t{\n\t\tif ($id_entrepot)\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\trequire_once DOL_DOCUMENT_ROOT .'/product/stock/class/mouvementstock.class.php';\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock=new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id);\n\t\t\t$result=$movementstock->_create($user,$this->id,$id_entrepot,$op[$movement],$movement,$price,$label,$inventorycode);\n\n\t\t\tif ($result >= 0)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    $this->error=$movementstock->error;\n\t\t\t    $this->errors=$movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Adjust stock in a warehouse for product with batch number\n\t *\n\t *  @param  \tUser\t$user           user asking change\n\t *  @param  \tint\t\t$id_entrepot    id of warehouse\n\t *  @param  \tdouble\t$nbpiece        nb of units\n\t *  @param  \tint\t\t$movement       0 = add, 1 = remove\n\t * \t@param\t\tstring\t$label\t\t\tLabel of stock movement\n\t * \t@param\t\tdouble\t$price\t\t\tPrice to use for stock eval\n\t * \t@param\t\tdate\t$dlc\t\t\teat-by date\n\t * \t@param\t\tdate\t$dluo\t\t\tsell-by date\n\t * \t@param\t\tstring\t$lot\t\t\tLot number\n\t *  @param\t\tstring\t$inventorycode\tInventory code\n\t *  @param  \tstring\t$origin_element Origin element type\n\t *  @param  \tint\t\t$origin_id      Origin id of element\n\t * \t@return     int     \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction correct_stock_batch($user, $id_entrepot, $nbpiece, $movement, $label='', $price=0, $dlc='', $dluo='',$lot='', $inventorycode='', $origin_element='', $origin_id=null)\n\t{\n\t\tif ($id_entrepot)\n\t\t{\n\t\t\t$this->db->begin();\n\n\t\t\trequire_once DOL_DOCUMENT_ROOT .'/product/stock/class/mouvementstock.class.php';\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock=new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id);\n\t\t\t$result=$movementstock->_create($user,$this->id,$id_entrepot,$op[$movement],$movement,$price,$label,$inventorycode,'',$dlc,$dluo,$lot);\n\n\t\t\tif ($result >= 0)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    $this->error=$movementstock->error;\n\t\t\t    $this->errors=$movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *    Load information about stock of a product into ->stock_reel, ->stock_warehouse[] (including stock_warehouse[idwarehouse]->detail_batch for batch products)\n\t *    This function need a lot of load. If you use it on list, use a cache to execute it once for each product id.\n\t *    If ENTREPOT_EXTRA_STATUS set, filtering on warehouse status possible.\n\t *\n\t *    @param      string   $option \t\t'' = Load all stock info, also from closed and internal warehouses,\n\t *\t\t\t\t\t\t\t\t\t\t'nobatch' = Do not load batch information,\n\t *\t\t\t\t\t\t\t\t\t\t'novirtual' = Do not load virtual stock,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseopen' = Load stock from open warehouses only,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseclosed' = Load stock from closed warehouses only,\n\t *\t\t\t\t\t\t\t\t\t\t'warehouseinternal' = Load stock from warehouses for internal correction/transfer only\n\t *    @return     int                   < 0 if KO, > 0 if OK\n\t *    @see\t\t  load_virtual_stock, getBatchInfo\n\t */\n\tfunction load_stock($option='')\n\t{\n\t\tglobal $conf;\n\n\t\t$this->stock_reel = 0;\n\t\t$this->stock_warehouse = array();\n\t\t$this->stock_theorique = 0;\n\n\t\t$warehouseStatus = array();\n\n\t\tif (preg_match('/warehouseclosed/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_CLOSED;\n\t\t}\n\t\tif (preg_match('/warehouseopen/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_OPEN_ALL;\n\t\t}\n\t\tif (preg_match('/warehouseinternal/', $option))\n\t\t{\n\t\t\t$warehouseStatus[] = Entrepot::STATUS_OPEN_INTERNAL;\n\t\t}\n\n\t\t$sql = \"SELECT ps.rowid, ps.reel, ps.fk_entrepot\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"entrepot as w\";\n\t\t$sql.= \" WHERE w.entity IN (\".getEntity('stock').\")\";\n\t\t$sql.= \" AND w.rowid = ps.fk_entrepot\";\n\t\t$sql.= \" AND ps.fk_product = \".$this->id;\n\t\tif ($conf->global->ENTREPOT_EXTRA_STATUS && count($warehouseStatus)) $sql.= \" AND w.statut IN (\".$this->db->escape(implode(',',$warehouseStatus)).\")\";\n\n\t\tdol_syslog(get_class($this).\"::load_stock\", LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i=0;\n\t\t\tif ($num > 0)\n\t\t\t{\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$row = $this->db->fetch_object($result);\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot] = new stdClass();\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->real = $row->reel;\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->id = $row->rowid;\n\t\t\t\t\tif ((! preg_match('/nobatch/', $option)) && $this->hasbatch()) $this->stock_warehouse[$row->fk_entrepot]->detail_batch=Productbatch::findAll($this->db, $row->rowid, 1, $this->id);\n\t\t\t\t\t$this->stock_reel+=$row->reel;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($result);\n\n\t\t\tif (! preg_match('/novirtual/', $option))\n\t\t\t{\n\t\t\t    $this->load_virtual_stock();\t\t// This also load stats_commande_fournisseur, ...\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *    Load value ->stock_theorique of a product. Property this->id must be defined.\n\t *    This function need a lot of load. If you use it on list, use a cache to execute it one for each product id.\n\t *\n\t *    @return   int             < 0 if KO, > 0 if OK\n\t *    @see\t\tload_stock, getBatchInfo\n\t */\n    function load_virtual_stock()\n    {\n        global $conf;\n\n        $stock_commande_client=0;\n        $stock_commande_fournisseur=0;\n        $stock_sending_client=0;\n        $stock_reception_fournisseur=0;\n\n        if (! empty($conf->commande->enabled))\n        {\n            $result=$this->load_stats_commande(0,'1,2', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_commande_client=$this->stats_commande['qty'];\n        }\n        if (! empty($conf->expedition->enabled))\n        {\n            $result=$this->load_stats_sending(0,'1,2', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_sending_client=$this->stats_expedition['qty'];\n        }\n        if (! empty($conf->fournisseur->enabled))\n        {\n            $result=$this->load_stats_commande_fournisseur(0,'1,2,3,4', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_commande_fournisseur=$this->stats_commande_fournisseur['qty'];\n\n            $result=$this->load_stats_reception(0,'4', 1);\n            if ($result < 0) dol_print_error($this->db,$this->error);\n            $stock_reception_fournisseur=$this->stats_reception['qty'];\n        }\n\n        // Stock decrease mode\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT) || ! empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n            $this->stock_theorique=$this->stock_reel-$stock_commande_client+$stock_sending_client;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_VALIDATE_ORDER)) {\n            $this->stock_theorique=$this->stock_reel;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n            $this->stock_theorique=$this->stock_reel-$stock_commande_client;\n        }\n        // Stock Increase mode\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_DISPATCH_ORDER)) {\n            $this->stock_theorique+=$stock_commande_fournisseur-$stock_reception_fournisseur;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_VALIDATE_ORDER)) {\n            $this->stock_theorique-=$stock_reception_fournisseur;\n        }\n        if (! empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_BILL)) {\n            $this->stock_theorique+=$stock_commande_fournisseur-$stock_reception_fournisseur;\n        }\n    }\n\n\n\t/**\n\t *  Load existing information about a serial\n\t *\n\t *\t@param\t\tstring\t\t$batch\t\tLot/serial number\n\t *  @return     array\t\t\t\t\tArray with record into product_batch\n\t *  @see\t\tload_stock, load_virtual_stock\n\t */\n    function loadBatchInfo($batch)\n    {\n    \t$result=array();\n\n    \t$sql = \"SELECT pb.batch, pb.eatby, pb.sellby, SUM(pb.qty) FROM \".MAIN_DB_PREFIX.\"product_batch as pb, \".MAIN_DB_PREFIX.\"product_stock as ps\";\n    \t$sql.= \" WHERE pb.fk_product_stock = ps.rowid AND ps.fk_product = \".$this->id.\" AND pb.batch = '\".$this->db->escape($batch).\"'\";\n    \t$sql.= \" GROUP BY pb.batch, pb.eatby, pb.sellby\";\n    \tdol_syslog(get_class($this).\"::loadBatchInfo load first entry found for lot/serial = \".$batch, LOG_DEBUG);\n    \t$resql = $this->db->query($sql);\n    \tif ($resql)\n    \t{\n    \t\t$num = $this->db->num_rows($resql);\n    \t\t$i=0;\n    \t\twhile ($i < $num)\n    \t\t{\n    \t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$result[]=array('batch'=>$batch, 'eatby'=>$this->db->jdate($obj->eatby), 'sellby'=>$this->db->jdate($obj->sellby), 'qty'=>$obj->qty);\n\t\t\t\t$i++;\n    \t\t}\n    \t\treturn $result;\n    \t}\n    \telse\n    \t{\n    \t\tdol_print_error($this->db);\n    \t\t$this->db->rollback();\n    \t\treturn array();\n    \t}\n    }\n\n\n\t/**\n\t *  Move an uploaded file described into $file array into target directory $sdir.\n\t *\n\t *  @param  string\t$sdir       Target directory\n\t *  @param  string\t$file       Array of file info of file to upload: array('name'=>..., 'tmp_name'=>...)\n\t *  @return\tint\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction add_photo($sdir, $file)\n\t{\n\t\tglobal $conf;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$result = 0;\n\n\t\t$dir = $sdir;\n\t\tif (! empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $dir .= '/'. get_exdir($this->id,2,0,0,$this,'product') . $this->id .\"/photos\";\n\t\telse $dir .= '/'.get_exdir(0,0,0,0,$this,'product').dol_sanitizeFileName($this->ref);\n\n\t\tdol_mkdir($dir);\n\n\t\t$dir_osencoded=$dir;\n\n\t\tif (is_dir($dir_osencoded))\n\t\t{\n\t\t\t$originImage = $dir . '/' . $file['name'];\n\n\t\t\t// Cree fichier en taille origine\n\t\t\t$result=dol_move_uploaded_file($file['tmp_name'], $originImage, 1);\n\n\t\t\tif (file_exists(dol_osencode($originImage)))\n\t\t\t{\n\t\t\t\t// Create thumbs\n\t\t\t\t$this->addThumbs($originImage);\n\t\t\t}\n\t\t}\n\n\t\tif (is_numeric($result) && $result > 0) return 1;\n\t\telse return -1;\n\t}\n\n\t/**\n\t *  Return if at least one photo is available\n\t *\n\t *  @param      string\t\t$sdir       Directory to scan\n\t *  @return     boolean     \t\t\tTrue if at least one photo is available, False if not\n\t */\n\tfunction is_photo_available($sdir)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT .'/core/lib/files.lib.php';\n\t    include_once DOL_DOCUMENT_ROOT .'/core/lib/images.lib.php';\n\n\t\tglobal $conf;\n\n\t\t$dir = $sdir;\n\t\tif (! empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) $dir .= '/'. get_exdir($this->id,2,0,0,$this,'product') . $this->id .\"/photos/\";\n\t\telse $dir .= '/'.get_exdir(0,0,0,0,$this,'product').dol_sanitizeFileName($this->ref).'/';\n\n\t\t$nbphoto=0;\n\n\t\t$dir_osencoded=dol_osencode($dir);\n\t\tif (file_exists($dir_osencoded))\n\t\t{\n\t\t\t$handle=opendir($dir_osencoded);\n\t\t\tif (is_resource($handle))\n\t\t\t{\n\t\t\t    while (($file = readdir($handle)) !== false)\n    \t\t\t{\n    \t\t\t\tif (! utf8_check($file)) $file=utf8_encode($file);\t// To be sure data is stored in UTF8 in memory\n    \t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) > 0) return true;\n    \t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t *  Retourne tableau de toutes les photos du produit\n\t *\n\t *  @param      string\t\t$dir        Repertoire a scanner\n\t *  @param      int\t\t\t$nbmax      Nombre maximum de photos (0=pas de max)\n\t *  @return     array       \t\t\tTableau de photos\n\t */\n\tfunction liste_photos($dir,$nbmax=0)\n\t{\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t    include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$nbphoto=0;\n\t\t$tabobj=array();\n\n\t\t$dir_osencoded=dol_osencode($dir);\n\t\t$handle=@opendir($dir_osencoded);\n\t\tif (is_resource($handle))\n\t\t{\n\t\t\twhile (($file = readdir($handle)) !== false)\n\t\t\t{\n\t\t\t\tif (! utf8_check($file)) $file=utf8_encode($file);\t// readdir returns ISO\n\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0)\n\t\t\t\t{\n\t\t\t\t\t$nbphoto++;\n\n\t\t\t\t\t// On determine nom du fichier vignette\n\t\t\t\t\t$photo=$file;\n\t\t\t\t\t$photo_vignette='';\n\t\t\t\t\tif (preg_match('/('.$this->regeximgext.')$/i', $photo, $regs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i', '', $photo).'_small'.$regs[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t$dirthumb = $dir.'thumbs/';\n\n\t\t\t\t\t// Objet\n\t\t\t\t\t$obj=array();\n\t\t\t\t\t$obj['photo']=$photo;\n\t\t\t\t\tif ($photo_vignette && dol_is_file($dirthumb.$photo_vignette)) $obj['photo_vignette']='thumbs/' . $photo_vignette;\n\t\t\t\t\telse $obj['photo_vignette']=\"\";\n\n\t\t\t\t\t$tabobj[$nbphoto-1]=$obj;\n\n\t\t\t\t\t// On continue ou on arrete de boucler ?\n\t\t\t\t\tif ($nbmax && $nbphoto >= $nbmax) break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclosedir($handle);\n\t\t}\n\n\t\treturn $tabobj;\n\t}\n\n\t/**\n\t *  Efface la photo du produit et sa vignette\n\t *\n\t *  @param  string\t\t$file        Chemin de l'image\n\t *  @return\tvoid\n\t */\n\tfunction delete_photo($file)\n\t{\n\t    require_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t    require_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n        $dir = dirname($file).'/'; // Chemin du dossier contenant l'image d'origine\n\t\t$dirthumb = $dir.'/thumbs/'; // Chemin du dossier contenant la vignette\n\t\t$filename = preg_replace('/'.preg_quote($dir,'/').'/i','',$file); // Nom du fichier\n\n\t\t// On efface l'image d'origine\n\t\tdol_delete_file($file, 0, 0, 0, $this); // For triggers\n\n\t\t// Si elle existe, on efface la vignette\n\t\tif (preg_match('/('.$this->regeximgext.')$/i',$filename,$regs))\n\t\t{\n\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i','',$filename).'_small'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette)))\n\t\t\t{\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\n\t\t\t$photo_vignette=preg_replace('/'.$regs[0].'/i','',$filename).'_mini'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette)))\n\t\t\t{\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Load size of image file\n\t *\n\t *  @param  string\t$file        Path to file\n\t *  @return\tvoid\n\t */\n\tfunction get_image_size($file)\n\t{\n\t\t$file_osencoded=dol_osencode($file);\n\t\t$infoImg = getimagesize($file_osencoded); // Get information on image\n\t\t$this->imgWidth = $infoImg[0]; // Largeur de l'image\n\t\t$this->imgHeight = $infoImg[1]; // Hauteur de l'image\n\t}\n\n\t/**\n\t *  Load indicators this->nb for the dashboard\n\t *\n\t *  @return    int                 <0 if KO, >0 if OK\n\t */\n\tfunction load_state_board()\n\t{\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$this->nb=array();\n\n\t\t$sql = \"SELECT count(p.rowid) as nb, fk_product_type\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql.= ' WHERE p.entity IN ('.getEntity($this->element, 1).')';\n\t\t// Add where from hooks\n\t\tif (is_object($hookmanager))\n\t\t{\n\t\t    $parameters=array();\n\t\t    $reshook=$hookmanager->executeHooks('printFieldListWhere',$parameters);    // Note that $action and $object may have been modified by hook\n\t\t    $sql.=$hookmanager->resPrint;\n\t\t}\n        $sql.= ' GROUP BY fk_product_type';\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj=$this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\tif ($obj->fk_product_type == 1) $this->nb[\"services\"]=$obj->nb;\n\t\t\t\telse $this->nb[\"products\"]=$obj->nb;\n\t\t\t}\n            $this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n    /**\n     * Return if object is a product\n     *\n     * @return  boolean     True if it's a product\n     */\n\tfunction isProduct()\n\t{\n\t\treturn ($this->type == Product::TYPE_PRODUCT ? true : false);\n\t}\n\n    /**\n     * Return if object is a product\n     *\n     * @return  boolean     True if it's a service\n     */\n\tfunction isService()\n\t{\n\t\treturn ($this->type == Product::TYPE_SERVICE ? true : false);\n\t}\n\n    /**\n     *  Get a barcode from the module to generate barcode values.\n     *  Return value is stored into this->barcode\n     *\n     *\t@param\tProduct\t\t$object\t\tObject product or service\n     *\t@param\tstring\t\t$type\t\tBarcode type (ean, isbn, ...)\n     *  @return void\n     */\n    function get_barcode($object,$type='')\n    {\n        global $conf;\n\n        $result='';\n        if (! empty($conf->global->BARCODE_PRODUCT_ADDON_NUM))\n        {\n            $dirsociete=array_merge(array('/core/modules/barcode/'),$conf->modules_parts['barcode']);\n            foreach ($dirsociete as $dirroot)\n            {\n                $res=dol_include_once($dirroot.$conf->global->BARCODE_PRODUCT_ADDON_NUM.'.php');\n                if ($res) break;\n            }\n            $var = $conf->global->BARCODE_PRODUCT_ADDON_NUM;\n            $mod = new $var;\n\n            $result=$mod->getNextValue($object,$type);\n\n            dol_syslog(get_class($this).\"::get_barcode barcode=\".$result.\" module=\".$var);\n        }\n        return $result;\n    }\n\n    /**\n     *  Initialise an instance with random values.\n     *  Used to build previews or test instances.\n     *\tid must be 0 if object instance is a specimen.\n     *\n     *  @return\tvoid\n     */\n    function initAsSpecimen()\n    {\n        global $user,$langs,$conf,$mysoc;\n\n        $now=dol_now();\n\n        // Initialize parameters\n        $this->specimen=1;\n        $this->id=0;\n        $this->ref = 'PRODUCT_SPEC';\n        $this->label = 'PRODUCT SPECIMEN';\n        $this->description = 'This is description of this product specimen that was created the '.dol_print_date($now,'dayhourlog').'.';\n        $this->specimen=1;\n        $this->country_id=1;\n        $this->tosell=1;\n        $this->tobuy=1;\n\t\t$this->tobatch=0;\n        $this->note='This is a comment (private)';\n        $this->date_creation = $now;\n        $this->date_modification = $now;\n\n        $this->weight = 4;\n        $this->weight_unit = 1;\n\n        $this->length = 5;\n        $this->length_unit = 1;\n        $this->width = 6;\n        $this->width_unit = 0;\n        $this->height = null;\n        $this->height_unit = null;\n\n        $this->surface = 30;\n        $this->surface_unit = 0;\n        $this->volume = 300;\n        $this->volume_unit = 0;\n\n        $this->barcode=-1;\t// Create barcode automatically\n    }\n\n\t/**\n\t *\tReturns the text label from units dictionary\n\t *\n\t * \t@param\tstring $type Label type (long or short)\n\t *\t@return\tstring|int <0 if ko, label if ok\n\t */\n\tfunction getLabelOfUnit($type='long')\n\t{\n\t\tglobal $langs;\n\n\t\tif (!$this->fk_unit) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$langs->load('products');\n\n\t\t$label_type = 'label';\n\n\t\tif ($type == 'short')\n\t\t{\n\t\t\t$label_type = 'short_label';\n\t\t}\n\n\t\t$sql = 'select '.$label_type.' from '.MAIN_DB_PREFIX.'c_units where rowid='.$this->fk_unit;\n\t\t$resql = $this->db->query($sql);\n\t\tif($resql && $this->db->num_rows($resql) > 0)\n\t\t{\n\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t$label = $res[$label_type];\n\t\t\t$this->db->free($resql);\n\t\t\treturn $label;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error().' sql='.$sql;\n\t\t\tdol_syslog(get_class($this).\"::getLabelOfUnit Error \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n    /**\n     * Return if object has a sell-by date or eat-by date\n     *\n     * @return  boolean     True if it's has\n     */\n\tfunction hasbatch()\n\t{\n\t\treturn ($this->status_batch == 1 ? true : false);\n\t}\n\n\n\t/**\n     * Return minimum product recommended price\n     *\n\t * @return\tint\t\t\tMinimum recommanded price that is higher price among all suppliers * PRODUCT_MINIMUM_RECOMMENDED_PRICE\n     */\n\tfunction min_recommended_price()\n\t{\n\t\tglobal $conf;\n\n\t\t$maxpricesupplier=0;\n\n\t\tif (! empty($conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE))\n\t\t{\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t\t$product_fourn = new ProductFournisseur($this->db);\n\t\t\t$product_fourn_list = $product_fourn->list_product_fournisseur_price($this->id, '', '');\n\n\t\t\tif (is_array($product_fourn_list) && count($product_fourn_list)>0)\n\t\t\t{\n\t\t\t\tforeach($product_fourn_list as $productfourn)\n\t\t\t\t{\n\t\t\t\t\tif ($productfourn->fourn_unitprice > $maxpricesupplier)\n\t\t\t\t\t{\n\t\t\t\t\t\t$maxpricesupplier = $productfourn->fourn_unitprice;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$maxpricesupplier *= $conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE;\n\t\t\t}\n\t\t}\n\n\t\treturn $maxpricesupplier;\n\t}\n\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t */\n\tpublic function setCategories($categories) {\n\t\t// Handle single category\n\t\tif (! is_array($categories)) {\n\t\t\t$categories = array($categories);\n\t\t}\n\n\t\t// Get current categories\n\t\trequire_once DOL_DOCUMENT_ROOT . '/categories/class/categorie.class.php';\n\t\t$c = new Categorie($this->db);\n\t\t$existing = $c->containing($this->id, Categorie::TYPE_PRODUCT, 'id');\n\n\t\t// Diff\n\t\tif (is_array($existing)) {\n\t\t\t$to_del = array_diff($existing, $categories);\n\t\t\t$to_add = array_diff($categories, $existing);\n\t\t} else {\n\t\t\t$to_del = array(); // Nothing to delete\n\t\t\t$to_add = $categories;\n\t\t}\n\n\t\t// Process\n\t\tforeach($to_del as $del) {\n\t\t\tif ($c->fetch($del) > 0) {\n\t\t\t\t$c->del_type($this, 'product');\n\t\t\t}\n\t\t}\n\t\tforeach ($to_add as $add) {\n\t\t\tif ($c->fetch($add) > 0) {\n\t\t\t\t$c->add_type($this, 'product');\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB \t$db \t\t\tDatabase handler\n\t * @param int \t\t$origin_id \t\tOld thirdparty id\n\t * @param int \t\t$dest_id \t\tNew thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'product_customer_price',\n\t\t\t'product_customer_price_log'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Generates prices for a product based on product multiprice generation rules\n\t *\n\t * @param User $user User that updates the prices\n\t * @param float $baseprice Base price\n\t * @param string $price_type Base price type\n\t * @param float $price_vat VAT % tax\n\t * @param int $npr NPR\n\t * @param string $psq \u00bf?\n\t * @return int -1 KO, 1 OK\n\t */\n\tpublic function generateMultiprices(User $user, $baseprice, $price_type, $price_vat, $npr, $psq)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t$sql = \"SELECT rowid, level, fk_level, var_percent, var_min_percent FROM \".MAIN_DB_PREFIX.\"product_pricerules\";\n\t\t$query = $db->query($sql);\n\n\t\t$rules = array();\n\n\t\twhile ($result = $db->fetch_object($query)) {\n\t\t\t$rules[$result->level] = $result;\n\t\t}\n\n\t\t//Because prices can be based on other level's prices, we temporarily store them\n\t\t$prices = array(\n\t\t\t1 => $baseprice\n\t\t);\n\n\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\n\t\t\t$price = $baseprice;\n\t\t\t$price_min = $baseprice;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\t//First price level only allows changing min_price\n\t\t\tif ($i > 1 && isset($rules[$i]->var_percent) && $rules[$i]->var_percent) {\n\t\t\t\t$price = $prices[$rules[$i]->fk_level] * (1 + ($rules[$i]->var_percent/100));\n\t\t\t}\n\n\t\t\t$prices[$i] = $price;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\tif (isset($rules[$i]->var_min_percent) && $rules[$i]->var_min_percent) {\n\t\t\t\t$price_min = $price * (1 - ($rules[$i]->var_min_percent/100));\n\t\t\t}\n\n\t\t\t//Little check to make sure the price is modified before triggering generation\n\t\t\t$check_amount = (($price == $this->multiprices[$i]) && ($price_min == $this->multiprices_min[$i]));\n\t\t\t$check_type = ($baseprice == $this->multiprices_base_type[$i]);\n\n\t\t\tif ($check_amount && $check_type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($this->updatePrice($price, $price_type, $user, $price_vat, $price_min, $i, $npr, $psq, true) < 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Returns the rights used for this class\n\t * @return stdClass\n\t */\n\tpublic function getRights()\n\t{\n\t\tglobal $user;\n\n\t\tif ($this->isProduct()) {\n\t\t\treturn $user->rights->produit;\n\t\t} else {\n\t\t\treturn $user->rights->service;\n\t\t}\n\t}\n\n    /**\n     *  Load information for tab info\n     *\n     *  @param  int\t\t$id     Id of thirdparty to load\n     *  @return\tvoid\n     */\n    function info($id)\n    {\n        $sql = \"SELECT p.rowid, p.ref, p.datec as date_creation, p.tms as date_modification,\";\n        $sql.= \" p.fk_user_author, p.fk_user_modif\";\n        $sql.= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as p\";\n        $sql.= \" WHERE p.rowid = \".$id;\n\n        $result=$this->db->query($sql);\n        if ($result)\n        {\n            if ($this->db->num_rows($result))\n            {\n                $obj = $this->db->fetch_object($result);\n\n                $this->id = $obj->rowid;\n\n                if ($obj->fk_user_author) {\n                    $cuser = new User($this->db);\n                    $cuser->fetch($obj->fk_user_author);\n                    $this->user_creation     = $cuser;\n                }\n\n                if ($obj->fk_user_modif) {\n                    $muser = new User($this->db);\n                    $muser->fetch($obj->fk_user_modif);\n                    $this->user_modification = $muser;\n                }\n\n                $this->ref\t\t\t     = $obj->ref;\n                $this->date_creation     = $this->db->jdate($obj->date_creation);\n                $this->date_modification = $this->db->jdate($obj->date_modification);\n            }\n\n            $this->db->free($result);\n\n        }\n        else\n\t\t{\n            dol_print_error($this->db);\n        }\n    }\n\n}\n"], "filenames": ["htdocs/product/class/product.class.php"], "buggy_code_start_loc": [862], "buggy_code_end_loc": [895], "fixing_code_start_loc": [862], "fixing_code_end_loc": [895], "type": "CWE-89", "message": "An error-based SQL injection vulnerability in product/card.php in Dolibarr version 8.0.2 allows remote authenticated users to execute arbitrary SQL commands via the desiredstock parameter.", "other": {"cve": {"id": "CVE-2018-19994", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-03T19:29:01.053", "lastModified": "2022-11-17T17:21:59.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An error-based SQL injection vulnerability in product/card.php in Dolibarr version 8.0.2 allows remote authenticated users to execute arbitrary SQL commands via the desiredstock parameter."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL basada en errores en la versi\u00f3n 8.0.2 de Dolibarr en product/card.php permite a los atacantes remotos autenticados ejecutar comandos SQL arbitrarios mediante el par\u00e1metro desiredstock."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:8.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "30608213-F99C-4D9E-B848-794532E85267"}]}]}], "references": [{"url": "https://github.com/Dolibarr/dolibarr/commit/850b939ffd2c7a4443649331b923d5e0da2d6446", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/850b939ffd2c7a4443649331b923d5e0da2d6446"}}