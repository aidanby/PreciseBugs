{"buggy_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2019-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Base Content Block class\n *\n * For block generation you must define Data source class, data source class method,\n * parameters array and block template\n *\n * @category   Mage\n * @package    Mage_Core\n * @author     Magento Core Team <core@magentocommerce.com>\n *\n * @method $this setAdditionalHtml(string $value)\n * @method $this setBlockParams(array $value)\n * @method $this setCacheLifetime(int|false $value)\n * @method $this setCacheKey(string $value)\n * @method $this setCacheTags(array $value)\n * @method $this setClass(string $value)\n * @method $this setDisabled(bool $value)\n * @method $this setLabel(string $value)\n * @method $this setOnclick(string $value)\n * @method string getPosition()\n * @method $this setTemplate(string $value)\n * @method $this setType(string $value)\n * @method bool hasWrapperMustBeVisible()\n */\nabstract class Mage_Core_Block_Abstract extends Varien_Object\n{\n    /**\n     * Prefix for cache key\n     */\n    public const CACHE_KEY_PREFIX = 'BLOCK_';\n    /**\n     * Cache group Tag\n     */\n    public const CACHE_GROUP = 'block_html';\n\n    /**\n     * Cache tags data key\n     */\n    public const CACHE_TAGS_DATA_KEY = 'cache_tags';\n\n    /**\n     * Block name in layout\n     *\n     * @var string\n     */\n    protected $_nameInLayout;\n\n    /**\n     * Parent layout of the block\n     *\n     * @var Mage_Core_Model_Layout\n     */\n    protected $_layout;\n\n    /**\n     * Parent block\n     *\n     * @var Mage_Core_Block_Abstract\n     */\n    protected $_parent;\n\n    /**\n     * Short alias of this block that was refered from parent\n     *\n     * @var string\n     */\n    protected $_alias;\n\n    /**\n     * Suffix for name of anonymous block\n     *\n     * @var string\n     */\n    protected $_anonSuffix;\n\n    /**\n     * Contains references to child block objects\n     *\n     * @var Mage_Core_Block_Abstract[]\n     */\n    protected $_children = [];\n\n    /**\n     * Sorted children list\n     *\n     * @var array\n     */\n    protected $_sortedChildren = [];\n\n    /**\n     * Children blocks HTML cache array\n     *\n     * @var array\n     */\n    protected $_childrenHtmlCache = [];\n\n    /**\n     * Arbitrary groups of child blocks\n     *\n     * @var array\n     */\n    protected $_childGroups = [];\n\n    /**\n     * Request object\n     *\n     * @var Zend_Controller_Request_Http\n     */\n    protected $_request;\n\n    /**\n     * Messages block instance\n     *\n     * @var Mage_Core_Block_Messages|null\n     */\n    protected $_messagesBlock = null;\n\n    /**\n     * Whether this block was not explicitly named\n     *\n     * @var bool\n     */\n    protected $_isAnonymous = false;\n\n    /**\n     * Parent block\n     *\n     * @var Mage_Core_Block_Abstract\n     */\n    protected $_parentBlock;\n\n    /**\n     * Block html frame open tag\n     * @var string\n     */\n    protected $_frameOpenTag;\n\n    /**\n     * Block html frame close tag\n     * @var string\n     */\n    protected $_frameCloseTag;\n\n    /**\n     * Url object\n     *\n     * @var Mage_Core_Model_Url\n     */\n    protected static $_urlModel;\n\n    /**\n     * @var Varien_Object\n     */\n    private static $_transportObject;\n\n    /**\n     * Array of block sort priority instructions\n     *\n     * @var array\n     */\n    protected $_sortInstructions = [];\n\n    /**\n     * Factory instance\n     *\n     * @var Mage_Core_Model_Factory|null\n     */\n    protected $_factory;\n\n    /**\n     * Application instance\n     *\n     * @var Mage_Core_Model_App|null\n     */\n    protected $_app;\n\n    /**\n     * Initialize factory instance\n     *\n     * @param array $args\n     */\n    public function __construct(array $args = [])\n    {\n        if (!empty($args['core_factory']) && ($args['core_factory'] instanceof Mage_Core_Model_Factory)) {\n            $this->_factory = $args['core_factory'];\n        }\n        if (!empty($args['app']) && ($args['app'] instanceof Mage_Core_Model_App)) {\n            $this->_app = $args['app'];\n        }\n        parent::__construct($args);\n    }\n\n    /**\n     * Internal constructor, that is called from real constructor\n     *\n     * Please override this one instead of overriding real __construct constructor\n     *\n     */\n    protected function _construct()\n    {\n        /**\n         * Please override this one instead of overriding real __construct constructor\n         */\n    }\n\n    /**\n     * Retrieve factory instance\n     *\n     * @return Mage_Core_Model_Factory\n     */\n    protected function _getFactory()\n    {\n        return is_null($this->_factory) ? Mage::getSingleton('core/factory') : $this->_factory;\n    }\n\n    /**\n     * Retrieve application instance\n     *\n     * @return Mage_Core_Model_App\n     */\n    protected function _getApp()\n    {\n        return is_null($this->_app) ? Mage::app() : $this->_app;\n    }\n\n    /**\n     * Retrieve request object\n     *\n     * @return Mage_Core_Controller_Request_Http\n     * @throws Exception\n     */\n    public function getRequest()\n    {\n        $controller = $this->_getApp()->getFrontController();\n        if ($controller) {\n            $this->_request = $controller->getRequest();\n        } else {\n            throw new Exception(Mage::helper('core')->__(\"Can't retrieve request object\"));\n        }\n        return $this->_request;\n    }\n\n    /**\n     * Retrieve parent block\n     *\n     * @return $this\n     */\n    public function getParentBlock()\n    {\n        return $this->_parentBlock;\n    }\n\n    /**\n     * Set parent block\n     *\n     * @param   Mage_Core_Block_Abstract $block\n     * @return  $this\n     */\n    public function setParentBlock(Mage_Core_Block_Abstract $block)\n    {\n        $this->_parentBlock = $block;\n        return $this;\n    }\n\n    /**\n     * Retrieve current action object\n     *\n     * @return Mage_Core_Controller_Varien_Action\n     */\n    public function getAction()\n    {\n        return $this->_getApp()->getFrontController()->getAction();\n    }\n\n    /**\n     * Set layout object\n     *\n     * @param   Mage_Core_Model_Layout $layout\n     * @return  $this\n     */\n    public function setLayout(Mage_Core_Model_Layout $layout)\n    {\n        $this->_layout = $layout;\n        Mage::dispatchEvent('core_block_abstract_prepare_layout_before', ['block' => $this]);\n        $this->_prepareLayout();\n        Mage::dispatchEvent('core_block_abstract_prepare_layout_after', ['block' => $this]);\n        return $this;\n    }\n\n    /**\n     * Preparing global layout\n     *\n     * You can redefine this method in child classes for changing layout\n     *\n     * @return $this\n     */\n    protected function _prepareLayout()\n    {\n        return $this;\n    }\n\n    /**\n     * Retrieve layout object\n     *\n     * @return Mage_Core_Model_Layout\n     */\n    public function getLayout()\n    {\n        return $this->_layout;\n    }\n\n    /**\n     * Check if block is using auto generated (Anonymous) name\n     * @return bool\n     */\n    public function getIsAnonymous()\n    {\n        return $this->_isAnonymous;\n    }\n\n    /**\n     * Set the anonymous flag\n     *\n     * @param  bool $flag\n     * @return $this\n     */\n    public function setIsAnonymous($flag)\n    {\n        $this->_isAnonymous = (bool)$flag;\n        return $this;\n    }\n\n    /**\n     * Returns anonymous block suffix\n     *\n     * @return string\n     */\n    public function getAnonSuffix()\n    {\n        return $this->_anonSuffix;\n    }\n\n    /**\n     * Set anonymous suffix for current block\n     *\n     * @param string $suffix\n     * @return $this\n     */\n    public function setAnonSuffix($suffix)\n    {\n        $this->_anonSuffix = $suffix;\n        return $this;\n    }\n\n    /**\n     * Returns block alias\n     *\n     * @return string\n     */\n    public function getBlockAlias()\n    {\n        return $this->_alias;\n    }\n\n    /**\n     * Set block alias\n     *\n     * @param string $alias\n     * @return $this\n     */\n    public function setBlockAlias($alias)\n    {\n        $this->_alias = $alias;\n        return $this;\n    }\n\n    /**\n     * Set block's name in layout and unsets previous link if such exists.\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function setNameInLayout($name)\n    {\n        if (!empty($this->_nameInLayout) && $this->getLayout()) {\n            $this->getLayout()->unsetBlock($this->_nameInLayout)\n                ->setBlock($name, $this);\n        }\n        $this->_nameInLayout = $name;\n        return $this;\n    }\n\n    /**\n     * Retrieve sorted list of children.\n     *\n     * @return array\n     */\n    public function getSortedChildren()\n    {\n        $this->sortChildren();\n        return $this->_sortedChildren;\n    }\n\n    /**\n     * Set block attribute value\n     *\n     * Wrapper for method \"setData\"\n     *\n     * @param   string $name\n     * @param   mixed $value\n     * @return  $this\n     */\n    public function setAttribute($name, $value = null)\n    {\n        return $this->setData($name, $value);\n    }\n\n    /**\n     * Set child block\n     *\n     * @param   string $alias\n     * @param   Mage_Core_Block_Abstract $block\n     * @return  $this\n     */\n    public function setChild($alias, $block)\n    {\n        if (is_string($block)) {\n            $block = $this->getLayout()->getBlock($block);\n        }\n        if (!$block) {\n            return $this;\n        }\n\n        if ($block->getIsAnonymous()) {\n            $suffix = $block->getAnonSuffix();\n            if (empty($suffix)) {\n                $suffix = 'child' . count($this->_children);\n            }\n            $blockName = $this->getNameInLayout() . '.' . $suffix;\n\n            if ($this->getLayout()) {\n                $this->getLayout()->unsetBlock($block->getNameInLayout())\n                    ->setBlock($blockName, $block);\n            }\n\n            $block->setNameInLayout($blockName);\n            $block->setIsAnonymous(false);\n\n            if (empty($alias)) {\n                $alias = $blockName;\n            }\n        }\n\n        $block->setParentBlock($this);\n        $block->setBlockAlias($alias);\n        $this->_children[$alias] = $block;\n        return $this;\n    }\n\n    /**\n     * Unset child block\n     *\n     * @param  string $alias\n     * @return $this\n     */\n    public function unsetChild($alias)\n    {\n        if (isset($this->_children[$alias])) {\n            $block = $this->_children[$alias];\n            $name = $block->getNameInLayout();\n            unset($this->_children[$alias]);\n            $key = array_search($name, $this->_sortedChildren);\n            if ($key !== false) {\n                unset($this->_sortedChildren[$key]);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Call a child and unset it, if callback matched result\n     *\n     * $params will pass to child callback\n     * $params may be array, if called from layout with elements with same name, for example:\n     * ...<foo>value_1</foo><foo>value_2</foo><foo>value_3</foo>\n     *\n     * Or, if called like this:\n     * ...<foo>value_1</foo><bar>value_2</bar><baz>value_3</baz>\n     * - then it will be $params1, $params2, $params3\n     *\n     * It is no difference anyway, because they will be transformed in appropriate way.\n     *\n     * @param string $alias\n     * @param string $callback\n     * @param mixed $result\n     * @param array $params\n     * @return $this\n     */\n    public function unsetCallChild($alias, $callback, $result, $params)\n    {\n        $child = $this->getChild($alias);\n        if ($child) {\n            $args = func_get_args();\n            $alias = array_shift($args);\n            $callback = array_shift($args);\n            $result = (string)array_shift($args);\n            if (!is_array($params)) {\n                $params = $args;\n            }\n\n            Mage::helper('core/security')->validateAgainstBlockMethodBlacklist($child, $callback, $params);\n            if ($result == call_user_func_array([&$child, $callback], $params)) {\n                $this->unsetChild($alias);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Unset all children blocks\n     *\n     * @return $this\n     */\n    public function unsetChildren()\n    {\n        $this->_children = [];\n        $this->_sortedChildren = [];\n        return $this;\n    }\n\n    /**\n     * Retrieve child block by name\n     *\n     * @param  string $name\n     * @return mixed\n     */\n    public function getChild($name = '')\n    {\n        if ($name === '') {\n            return $this->_children;\n        } elseif (isset($this->_children[$name])) {\n            return $this->_children[$name];\n        }\n        return false;\n    }\n\n    /**\n     * Retrieve child block HTML\n     *\n     * @param   string $name\n     * @param   bool $useCache\n     * @param   bool $sorted\n     * @return  string\n     */\n    public function getChildHtml($name = '', $useCache = true, $sorted = false)\n    {\n        if ($name === '') {\n            if ($sorted) {\n                $children = [];\n                foreach ($this->getSortedChildren() as $childName) {\n                    $children[$childName] = $this->getLayout()->getBlock($childName);\n                }\n            } else {\n                $children = $this->getChild();\n            }\n            $out = '';\n            foreach ($children as $child) {\n                $out .= $this->_getChildHtml($child->getBlockAlias(), $useCache);\n            }\n            return $out;\n        } else {\n            return $this->_getChildHtml($name, $useCache);\n        }\n    }\n\n    /**\n     * @param string $name          Parent block name\n     * @param string $childName     OPTIONAL Child block name\n     * @param bool $useCache        OPTIONAL Use cache flag\n     * @param bool $sorted          OPTIONAL @see getChildHtml()\n     * @return string\n     */\n    public function getChildChildHtml($name, $childName = '', $useCache = true, $sorted = false)\n    {\n        if (empty($name)) {\n            return '';\n        }\n        $child = $this->getChild($name);\n        if (!$child) {\n            return '';\n        }\n        return $child->getChildHtml($childName, $useCache, $sorted);\n    }\n\n    /**\n     * Obtain sorted child blocks\n     *\n     * @return Mage_Core_Block_Abstract[]\n     */\n    public function getSortedChildBlocks()\n    {\n        $children = [];\n        foreach ($this->getSortedChildren() as $childName) {\n            $children[$childName] = $this->getLayout()->getBlock($childName);\n        }\n        return $children;\n    }\n\n    /**\n     * Retrieve child block HTML\n     *\n     * @param   string $name\n     * @param   bool $useCache\n     * @return  string\n     */\n    protected function _getChildHtml($name, $useCache = true)\n    {\n        if ($useCache && isset($this->_childrenHtmlCache[$name])) {\n            return $this->_childrenHtmlCache[$name];\n        }\n\n        $child = $this->getChild($name);\n\n        if (!$child) {\n            $html = '';\n        } else {\n            $this->_beforeChildToHtml($name, $child);\n            $html = $child->toHtml();\n        }\n\n        $this->_childrenHtmlCache[$name] = $html;\n        return $html;\n    }\n\n    /**\n     * Prepare child block before generate html\n     *\n     * @param   string $name\n     * @param   Mage_Core_Block_Abstract $child\n     */\n    protected function _beforeChildToHtml($name, $child)\n    {\n    }\n\n    /**\n     * Retrieve block html\n     *\n     * @param   string $name\n     * @return  string\n     */\n    public function getBlockHtml($name)\n    {\n        if (!($layout = $this->getLayout()) && !($layout = $this->getAction()->getLayout())) {\n            return '';\n        }\n        if (!($block = $layout->getBlock($name))) {\n            return '';\n        }\n        return $block->toHtml();\n    }\n\n    /**\n     * Insert child block\n     *\n     * @param   Mage_Core_Block_Abstract|string $block\n     * @param   string $siblingName\n     * @param   bool $after\n     * @param   string $alias\n     * @return  object $this\n     */\n    public function insert($block, $siblingName = '', $after = false, $alias = '')\n    {\n        if (is_string($block)) {\n            $block = $this->getLayout()->getBlock($block);\n        }\n        if (!$block) {\n            /*\n             * if we don't have block - don't throw exception because\n             * block can simply removed using layout method remove\n             */\n            //Mage::throwException(Mage::helper('core')\n            // ->__('Invalid block name to set child %s: %s', $alias, $block));\n            return $this;\n        }\n        if ($block->getIsAnonymous()) {\n            $this->setChild('', $block);\n            $name = $block->getNameInLayout();\n        } elseif ($alias != '') {\n            $this->setChild($alias, $block);\n            $name = $block->getNameInLayout();\n        } else {\n            $name = $block->getNameInLayout();\n            $this->setChild($name, $block);\n        }\n\n        if ($siblingName === '') {\n            if ($after) {\n                $this->_sortedChildren[] = $name;\n            } else {\n                array_unshift($this->_sortedChildren, $name);\n            }\n        } else {\n            $key = array_search($siblingName, $this->_sortedChildren);\n            if ($key !== false) {\n                if ($after) {\n                    $key++;\n                }\n                array_splice($this->_sortedChildren, $key, 0, $name);\n            } else {\n                if ($after) {\n                    $this->_sortedChildren[] = $name;\n                } else {\n                    array_unshift($this->_sortedChildren, $name);\n                }\n            }\n\n            $this->_sortInstructions[$name] = [$siblingName, (bool)$after, $key !== false];\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sort block's children\n     *\n     * @param bool $force force re-sort all children\n     * @return $this\n     */\n    public function sortChildren($force = false)\n    {\n        $this->_sortedChildren = array_values($this->_sortedChildren); // reset indexes which might have gaps after unsetting blocks\n        foreach ($this->_sortInstructions as $name => $list) {\n            list($siblingName, $after, $exists) = $list;\n            if ($exists && !$force) {\n                continue;\n            }\n            $this->_sortInstructions[$name][2] = true;\n\n            $index = array_search($name, $this->_sortedChildren);\n            $siblingKey = array_search($siblingName, $this->_sortedChildren);\n\n            if ($index === false || $siblingKey === false) {\n                continue;\n            }\n\n            if ($after) {\n                // insert after block\n                if ($index == $siblingKey + 1) {\n                    continue;\n                }\n                // remove sibling from array\n                array_splice($this->_sortedChildren, $index, 1, []);\n                // insert sibling after\n                array_splice($this->_sortedChildren, $siblingKey + 1, 0, [$name]);\n            } else {\n                // insert before block\n                if ($index == $siblingKey - 1) {\n                    continue;\n                }\n                // remove sibling from array\n                array_splice($this->_sortedChildren, $index, 1, []);\n                // insert sibling after\n                array_splice($this->_sortedChildren, $siblingKey, 0, [$name]);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Append child block\n     *\n     * @param   Mage_Core_Block_Abstract|string $block\n     * @param   string $alias\n     * @return  $this\n     */\n    public function append($block, $alias = '')\n    {\n        $this->insert($block, '', true, $alias);\n        return $this;\n    }\n\n    /**\n     * Make sure specified block will be registered in the specified child groups\n     *\n     * @param string $groupName\n     * @param Mage_Core_Block_Abstract $child\n     */\n    public function addToChildGroup($groupName, Mage_Core_Block_Abstract $child)\n    {\n        if (!isset($this->_childGroups[$groupName])) {\n            $this->_childGroups[$groupName] = [];\n        }\n        if (!in_array($child->getBlockAlias(), $this->_childGroups[$groupName])) {\n            $this->_childGroups[$groupName][] = $child->getBlockAlias();\n        }\n    }\n\n    /**\n     * Add self to the specified group of parent block\n     *\n     * @param string $groupName\n     * @return $this\n     */\n    public function addToParentGroup($groupName)\n    {\n        $this->getParentBlock()->addToChildGroup($groupName, $this);\n        return $this;\n    }\n\n    /**\n     * Get a group of child blocks\n     *\n     * Returns an array of <alias> => <block>\n     * or an array of <alias> => <callback_result>\n     * The callback currently supports only $this methods and passes the alias as parameter\n     *\n     * @param string $groupName\n     * @param string $callback\n     * @param bool $skipEmptyResults\n     * @return array\n     */\n    public function getChildGroup($groupName, $callback = null, $skipEmptyResults = true)\n    {\n        $result = [];\n        if (!isset($this->_childGroups[$groupName])) {\n            return $result;\n        }\n        foreach ($this->getSortedChildBlocks() as $block) {\n            $alias = $block->getBlockAlias();\n            if (in_array($alias, $this->_childGroups[$groupName])) {\n                if ($callback) {\n                    $row = $this->$callback($alias);\n                    if (!$skipEmptyResults || $row) {\n                        $result[$alias] = $row;\n                    }\n                } else {\n                    $result[$alias] = $block;\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Get a value from child block by specified key\n     *\n     * @param string $alias\n     * @param string $key\n     * @return mixed\n     */\n    public function getChildData($alias, $key = '')\n    {\n        $child = $this->getChild($alias);\n        if ($child) {\n            return $child->getData($key);\n        }\n    }\n\n    /**\n     * Before rendering html, but after trying to load cache\n     *\n     * @return $this\n     */\n    protected function _beforeToHtml()\n    {\n        return $this;\n    }\n\n    /**\n     * Specify block output frame tags\n     *\n     * @param string $openTag\n     * @param string $closeTag\n     * @return $this\n     */\n    public function setFrameTags($openTag, $closeTag = null)\n    {\n        $this->_frameOpenTag = $openTag;\n        if ($closeTag) {\n            $this->_frameCloseTag = $closeTag;\n        } else {\n            $this->_frameCloseTag = '/' . $openTag;\n        }\n        return $this;\n    }\n\n    /**\n     * Produce and return block's html output\n     *\n     * It is a final method, but you can override _toHtml() method in descendants if needed.\n     *\n     * @return string\n     */\n    final public function toHtml()\n    {\n        Mage::dispatchEvent('core_block_abstract_to_html_before', ['block' => $this]);\n        if (Mage::getStoreConfig('advanced/modules_disable_output/' . $this->getModuleName())) {\n            return '';\n        }\n        $html = $this->_loadCache();\n        if ($html === false) {\n            $translate = Mage::getSingleton('core/translate');\n            /** @var Mage_Core_Model_Translate $translate */\n            if ($this->hasData('translate_inline')) {\n                $translate->setTranslateInline($this->getData('translate_inline'));\n            }\n\n            $this->_beforeToHtml();\n            $html = $this->_toHtml();\n            $this->_saveCache($html);\n\n            if ($this->hasData('translate_inline')) {\n                $translate->setTranslateInline(true);\n            }\n        }\n        $html = $this->_afterToHtml($html);\n\n        /**\n         * Check framing options\n         */\n        if ($this->_frameOpenTag) {\n            $html = '<' . $this->_frameOpenTag . '>' . $html . '<' . $this->_frameCloseTag . '>';\n        }\n\n        /**\n         * Use single transport object instance for all blocks\n         */\n        if (self::$_transportObject === null) {\n            self::$_transportObject = new Varien_Object();\n        }\n        self::$_transportObject->setHtml($html);\n        Mage::dispatchEvent(\n            'core_block_abstract_to_html_after',\n            ['block' => $this, 'transport' => self::$_transportObject]\n        );\n        $html = self::$_transportObject->getHtml();\n\n        return $html;\n    }\n\n    /**\n     * Processing block html after rendering\n     *\n     * @param   string $html\n     * @return  string\n     */\n    protected function _afterToHtml($html)\n    {\n        return $html;\n    }\n\n    /**\n     * Override this method in descendants to produce html\n     *\n     * @return string\n     */\n    protected function _toHtml()\n    {\n        return '';\n    }\n\n    /**\n     * Returns url model class name\n     *\n     * @return string\n     */\n    protected function _getUrlModelClass()\n    {\n        return 'core/url';\n    }\n\n    /**\n     * Create and return url object\n     *\n     * @return Mage_Core_Model_Url\n     */\n    protected function _getUrlModel()\n    {\n        return Mage::getModel($this->_getUrlModelClass());\n    }\n\n    /**\n     * Generate url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrl($route = '', $params = [])\n    {\n        return $this->_getUrlModel()->getUrl($route, $params);\n    }\n\n    /**\n     * Generate security url by route and parameters (add form key if \"Add Secret Key to URLs\" disabled)\n     *\n     * @param string $route\n     * @param array $params\n     *\n     * @return string\n     */\n    public function getUrlSecure($route = '', $params = [])\n    {\n        if (!Mage::helper('adminhtml')->isEnabledSecurityKeyUrl()) {\n            $params[Mage_Core_Model_Url::FORM_KEY] = $this->getFormKey();\n        }\n        return $this->getUrl($route, $params);\n    }\n\n    /**\n     * Generate base64-encoded url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrlBase64($route = '', $params = [])\n    {\n        return Mage::helper('core')->urlEncode($this->getUrl($route, $params));\n    }\n\n    /**\n     * Generate url-encoded url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrlEncoded($route = '', $params = [])\n    {\n        return Mage::helper('core')->urlEncode($this->getUrl($route, $params));\n    }\n\n    /**\n     * Retrieve url of skins file\n     *\n     * @param   string $file path to file in skin\n     * @param   array $params\n     * @return  string\n     */\n    public function getSkinUrl($file = null, array $params = [])\n    {\n        return Mage::getDesign()->getSkinUrl($file, $params);\n    }\n\n    /**\n     * Retrieve messages block\n     *\n     * @return Mage_Core_Block_Messages\n     */\n    public function getMessagesBlock()\n    {\n        if (is_null($this->_messagesBlock)) {\n            return $this->getLayout()->getMessagesBlock();\n        }\n        return $this->_messagesBlock;\n    }\n\n    /**\n     * Set messages block\n     *\n     * @param   Mage_Core_Block_Messages $block\n     * @return  $this\n     */\n    public function setMessagesBlock(Mage_Core_Block_Messages $block)\n    {\n        $this->_messagesBlock = $block;\n        return $this;\n    }\n\n    /**\n     * Return block helper\n     *\n     * @param string $type\n     * @return $this\n     */\n    public function getHelper($type)\n    {\n        return $this->getLayout()->getBlockSingleton($type);\n    }\n\n    /**\n     * Returns helper object\n     *\n     * @param string $name\n     * @return Mage_Core_Helper_Abstract\n     */\n    public function helper($name)\n    {\n        if ($this->getLayout()) {\n            return $this->getLayout()->helper($name);\n        }\n        return Mage::helper($name);\n    }\n\n    /**\n     * Retrieve formatting date\n     *\n     * @param   string $date\n     * @param   string $format\n     * @param   bool $showTime\n     * @return  string\n     */\n    public function formatDate($date = null, $format = Mage_Core_Model_Locale::FORMAT_TYPE_SHORT, $showTime = false)\n    {\n        /** @var Mage_Core_Helper_Data $helper */\n        $helper = $this->helper('core');\n        return $helper->formatDate($date, $format, $showTime);\n    }\n\n    /**\n     * Retrieve formatting time\n     *\n     * @param   string $time\n     * @param   string $format\n     * @param   bool $showDate\n     * @return  string\n     */\n    public function formatTime($time = null, $format = Mage_Core_Model_Locale::FORMAT_TYPE_SHORT, $showDate = false)\n    {\n        /** @var Mage_Core_Helper_Data $helper */\n        $helper = $this->helper('core');\n        return $helper->formatTime($time, $format, $showDate);\n    }\n\n    /**\n     * Retrieve module name of block\n     *\n     * @return string\n     */\n    public function getModuleName()\n    {\n        $module = $this->getData('module_name');\n        if (is_null($module)) {\n            $class = get_class($this);\n            $module = substr($class, 0, strpos($class, '_Block'));\n            $this->setData('module_name', $module);\n        }\n        return $module;\n    }\n\n    /**\n     * Translate block sentence\n     *\n     * @return string\n     */\n    public function __()\n    {\n        $args = func_get_args();\n        $expr = new Mage_Core_Model_Translate_Expr(array_shift($args), $this->getModuleName());\n        array_unshift($args, $expr);\n        return $this->_getApp()->getTranslator()->translate($args);\n    }\n\n    /**\n     * @param string|array $data\n     * @param array $allowedTags\n     * @return string\n     * @see self::escapeHtml()\n     * @deprecated after 1.4.0.0-rc1\n     */\n    public function htmlEscape($data, $allowedTags = null)\n    {\n        return $this->escapeHtml($data, $allowedTags);\n    }\n\n    /**\n     * Escape html entities\n     *\n     * @param   string|array $data\n     * @param   array $allowedTags\n     * @return  string\n     */\n    public function escapeHtml($data, $allowedTags = null)\n    {\n        return $this->helper('core')->escapeHtml($data, $allowedTags);\n    }\n\n    /**\n     * Wrapper for standard strip_tags() function with extra functionality for html entities\n     *\n     * @param string $data\n     * @param string $allowableTags\n     * @param bool $allowHtmlEntities\n     * @return string\n     */\n    public function stripTags($data, $allowableTags = null, $allowHtmlEntities = false)\n    {\n        return $this->helper('core')->stripTags($data, $allowableTags, $allowHtmlEntities);\n    }\n\n    /**\n     * @param string $data\n     * @return string\n     * @deprecated after 1.4.0.0-rc1\n     * @see self::escapeUrl()\n     */\n    public function urlEscape($data)\n    {\n        return $this->escapeUrl($data);\n    }\n\n    /**\n     * Escape html entities in url\n     *\n     * @param string $data\n     * @return string\n     */\n    public function escapeUrl($data)\n    {\n        return $this->helper('core')->escapeUrl($data);\n    }\n\n    /**\n     * Escape quotes inside html attributes\n     * Use $addSlashes = false for escaping js that inside html attribute (onClick, onSubmit etc)\n     *\n     * @param  string $data\n     * @param  bool $addSlashes\n     * @return string\n     */\n    public function quoteEscape($data, $addSlashes = false)\n    {\n        return $this->helper('core')->quoteEscape($data, $addSlashes);\n    }\n\n    /**\n     * Escape quotes in java scripts\n     *\n     * @param mixed $data\n     * @param string $quote\n     * @return mixed\n     */\n    public function jsQuoteEscape($data, $quote = '\\'')\n    {\n        return $this->helper('core')->jsQuoteEscape($data, $quote);\n    }\n\n    /**\n     * Alias for getName method.\n     *\n     * @return string\n     */\n    public function getNameInLayout()\n    {\n        return $this->_nameInLayout;\n    }\n\n    /**\n     * Get children blocks count\n     * @return int\n     */\n    public function countChildren()\n    {\n        return count($this->_children);\n    }\n\n    /**\n     * Prepare url for save to cache\n     *\n     * @return $this\n     */\n    protected function _beforeCacheUrl()\n    {\n        if ($this->_getApp()->useCache(self::CACHE_GROUP)) {\n            $this->_getApp()->setUseSessionVar(true);\n        }\n        return $this;\n    }\n\n    /**\n     * Replace URLs from cache\n     *\n     * @param string $html\n     * @return string\n     */\n    protected function _afterCacheUrl($html)\n    {\n        if ($this->_getApp()->useCache(self::CACHE_GROUP)) {\n            $this->_getApp()->setUseSessionVar(false);\n            Varien_Profiler::start('CACHE_URL');\n            /** @var Mage_Core_Model_Url $model */\n            $model = Mage::getSingleton($this->_getUrlModelClass());\n            $html = $model->sessionUrlVar($html);\n            Varien_Profiler::stop('CACHE_URL');\n        }\n        return $html;\n    }\n\n    /**\n     * Get cache key informative items\n     * Provide string array key to share specific info item with FPC placeholder\n     *\n     * @return array\n     */\n    public function getCacheKeyInfo()\n    {\n        return [\n            $this->getNameInLayout()\n        ];\n    }\n\n    /**\n     * Get Key for caching block content\n     *\n     * @return string\n     */\n    public function getCacheKey()\n    {\n        if ($this->hasData('cache_key')) {\n            $cacheKey = $this->getData('cache_key');\n            if (strpos($cacheKey, self::CACHE_KEY_PREFIX) !== 0) {\n                $cacheKey = self::CACHE_KEY_PREFIX . $cacheKey;\n                $this->setData('cache_key', $cacheKey);\n            }\n\n            return $cacheKey;\n        }\n        /**\n         * don't prevent recalculation by saving generated cache key\n         * because of ability to render single block instance with different data\n         */\n        $key = $this->getCacheKeyInfo();\n        //ksort($key);  // ignore order\n        $key = array_values($key); // ignore array keys\n        $key = implode('|', $key);\n        $key = sha1($key);\n        return $key;\n    }\n\n    /**\n     * Get tags array for saving cache\n     *\n     * @return array\n     */\n    public function getCacheTags()\n    {\n        $tagsCache = $this->_getApp()->loadCache($this->_getTagsCacheKey());\n        if ($tagsCache) {\n            $tags = json_decode($tagsCache);\n        }\n        if (!isset($tags) || !is_array($tags) || empty($tags)) {\n            $tags = !$this->hasData(self::CACHE_TAGS_DATA_KEY) ? [] : $this->getData(self::CACHE_TAGS_DATA_KEY);\n            if (!in_array(self::CACHE_GROUP, $tags)) {\n                $tags[] = self::CACHE_GROUP;\n            }\n        }\n        return array_unique($tags);\n    }\n\n    /**\n     * Add tag to block\n     *\n     * @param string|array $tag\n     * @return $this\n     */\n    public function addCacheTag($tag)\n    {\n        $tag = is_array($tag) ? $tag : [$tag];\n        $tags = !$this->hasData(self::CACHE_TAGS_DATA_KEY) ?\n            $tag : array_merge($this->getData(self::CACHE_TAGS_DATA_KEY), $tag);\n        $this->setData(self::CACHE_TAGS_DATA_KEY, $tags);\n        return $this;\n    }\n\n    /**\n     * Add tags from specified model to current block\n     *\n     * @param Mage_Core_Model_Abstract $model\n     * @return $this\n     */\n    public function addModelTags(Mage_Core_Model_Abstract $model)\n    {\n        $cacheTags = $model->getCacheIdTags();\n        if ($cacheTags !== false) {\n            $this->addCacheTag($cacheTags);\n        }\n        return $this;\n    }\n\n    /**\n     * Get block cache life time\n     *\n     * @return int|null\n     */\n    public function getCacheLifetime()\n    {\n        if (!$this->hasData('cache_lifetime')) {\n            return null;\n        }\n        return $this->getData('cache_lifetime');\n    }\n\n    /**\n     * Retrieve Session Form Key\n     *\n     * @return string\n     */\n    public function getFormKey()\n    {\n        return Mage::getSingleton('core/session')->getFormKey();\n    }\n\n    /**\n     * Load block html from cache storage\n     *\n     * @return string | false\n     */\n    protected function _loadCache()\n    {\n        if (is_null($this->getCacheLifetime()) || !$this->_getApp()->useCache(self::CACHE_GROUP)) {\n            return false;\n        }\n        $cacheKey = $this->getCacheKey();\n        /** @var Mage_Core_Model_Session $session */\n        $session = Mage::getSingleton('core/session');\n        $cacheData = $this->_getApp()->loadCache($cacheKey);\n        if ($cacheData) {\n            $cacheData = str_replace(\n                $this->_getSidPlaceholder($cacheKey),\n                $session->getSessionIdQueryParam() . '=' . $session->getEncryptedSessionId(),\n                $cacheData\n            );\n        }\n        return $cacheData;\n    }\n\n    /**\n     * Save block content to cache storage\n     *\n     * @param string $data\n     * @return $this|false\n     */\n    protected function _saveCache($data)\n    {\n        if (is_null($this->getCacheLifetime()) || !$this->_getApp()->useCache(self::CACHE_GROUP)) {\n            return false;\n        }\n        $cacheKey = $this->getCacheKey();\n        /** @var Mage_Core_Model_Session $session */\n        $session = Mage::getSingleton('core/session');\n        $data = str_replace(\n            $session->getSessionIdQueryParam() . '=' . $session->getEncryptedSessionId(),\n            $this->_getSidPlaceholder($cacheKey),\n            $data\n        );\n\n        $tags = $this->getCacheTags();\n\n        $this->_getApp()->saveCache($data, $cacheKey, $tags, $this->getCacheLifetime());\n        $this->_getApp()->saveCache(\n            json_encode($tags),\n            $this->_getTagsCacheKey($cacheKey),\n            $tags,\n            $this->getCacheLifetime()\n        );\n        return $this;\n    }\n\n    /**\n     * Get cache key for tags\n     *\n     * @param string $cacheKey\n     * @return string\n     */\n    protected function _getTagsCacheKey($cacheKey = null)\n    {\n        $cacheKey = !empty($cacheKey) ? $cacheKey : $this->getCacheKey();\n        $cacheKey = md5($cacheKey . '_tags');\n        return $cacheKey;\n    }\n\n    /**\n     * Get SID placeholder for cache\n     *\n     * @param null|string $cacheKey\n     * @return string\n     */\n    protected function _getSidPlaceholder($cacheKey = null)\n    {\n        if (is_null($cacheKey)) {\n            $cacheKey = $this->getCacheKey();\n        }\n\n        return '<!--SID=' . $cacheKey . '-->';\n    }\n\n    /**\n     * Collect and retrieve items tags.\n     * Item should implements Mage_Core_Model_Abstract::getCacheIdTags method\n     *\n     * @param array|Varien_Data_Collection $items\n     * @return array\n     */\n    public function getItemsTags($items)\n    {\n        $tags = [];\n        /** @var Mage_Core_Model_Abstract $item */\n        foreach ($items as $item) {\n            $itemTags = $item->getCacheIdTags();\n            if ($itemTags === false) {\n                continue;\n            }\n            $tags = array_merge($tags, $itemTags);\n        }\n        return $tags;\n    }\n\n    /**\n     * Checks is request Url is secure\n     *\n     * @return bool\n     */\n    protected function _isSecure()\n    {\n        return $this->_getApp()->getFrontController()->getRequest()->isSecure();\n    }\n}\n", "<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2020-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * @category   Mage\n * @package    Mage_Core\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Core_Helper_Security\n{\n    private $invalidBlockActions\n        = [\n            // explicitly not using class constant here Mage_Page_Block_Html_Topmenu_Renderer::class\n            // if the class does not exists it breaks.\n            ['block' => Mage_Page_Block_Html_Topmenu_Renderer::class, 'method' => 'render'],\n            ['block' => Mage_Core_Block_Template::class, 'method' => 'fetchView'],\n        ];\n\n    /**\n     * @param Mage_Core_Block_Abstract $block\n     * @param string                   $method\n     * @param string[]                 $args\n     *\n     * @throws Mage_Core_Exception\n     */\n    public function validateAgainstBlockMethodBlacklist(Mage_Core_Block_Abstract $block, $method, array $args)\n    {\n        foreach ($this->invalidBlockActions as $action) {\n            $calledMethod = strtolower($method);\n            if (($block instanceof $action['block'] && strtolower($action['method']) === $calledMethod)\n                || ($block instanceof $action['block']\n                    && strtolower($action['block'] . '::' . $action['method']) === $calledMethod)\n            ) {\n                Mage::throwException(\n                    sprintf('Action with combination block %s and method %s is forbidden.', get_class($block), $method)\n                );\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2019-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Base Content Block class\n *\n * For block generation you must define Data source class, data source class method,\n * parameters array and block template\n *\n * @category   Mage\n * @package    Mage_Core\n * @author     Magento Core Team <core@magentocommerce.com>\n *\n * @method $this setAdditionalHtml(string $value)\n * @method $this setBlockParams(array $value)\n * @method $this setCacheLifetime(int|false $value)\n * @method $this setCacheKey(string $value)\n * @method $this setCacheTags(array $value)\n * @method $this setClass(string $value)\n * @method $this setDisabled(bool $value)\n * @method $this setLabel(string $value)\n * @method $this setOnclick(string $value)\n * @method string getPosition()\n * @method $this setTemplate(string $value)\n * @method $this setType(string $value)\n * @method bool hasWrapperMustBeVisible()\n */\nabstract class Mage_Core_Block_Abstract extends Varien_Object\n{\n    /**\n     * Prefix for cache key\n     */\n    public const CACHE_KEY_PREFIX = 'BLOCK_';\n    /**\n     * Cache group Tag\n     */\n    public const CACHE_GROUP = 'block_html';\n\n    /**\n     * Cache tags data key\n     */\n    public const CACHE_TAGS_DATA_KEY = 'cache_tags';\n\n    /**\n     * Block name in layout\n     *\n     * @var string\n     */\n    protected $_nameInLayout;\n\n    /**\n     * Parent layout of the block\n     *\n     * @var Mage_Core_Model_Layout\n     */\n    protected $_layout;\n\n    /**\n     * Parent block\n     *\n     * @var Mage_Core_Block_Abstract\n     */\n    protected $_parent;\n\n    /**\n     * Short alias of this block that was refered from parent\n     *\n     * @var string\n     */\n    protected $_alias;\n\n    /**\n     * Suffix for name of anonymous block\n     *\n     * @var string\n     */\n    protected $_anonSuffix;\n\n    /**\n     * Contains references to child block objects\n     *\n     * @var Mage_Core_Block_Abstract[]\n     */\n    protected $_children = [];\n\n    /**\n     * Sorted children list\n     *\n     * @var array\n     */\n    protected $_sortedChildren = [];\n\n    /**\n     * Children blocks HTML cache array\n     *\n     * @var array\n     */\n    protected $_childrenHtmlCache = [];\n\n    /**\n     * Arbitrary groups of child blocks\n     *\n     * @var array\n     */\n    protected $_childGroups = [];\n\n    /**\n     * Request object\n     *\n     * @var Zend_Controller_Request_Http\n     */\n    protected $_request;\n\n    /**\n     * Messages block instance\n     *\n     * @var Mage_Core_Block_Messages|null\n     */\n    protected $_messagesBlock = null;\n\n    /**\n     * Whether this block was not explicitly named\n     *\n     * @var bool\n     */\n    protected $_isAnonymous = false;\n\n    /**\n     * Parent block\n     *\n     * @var Mage_Core_Block_Abstract\n     */\n    protected $_parentBlock;\n\n    /**\n     * Block html frame open tag\n     * @var string\n     */\n    protected $_frameOpenTag;\n\n    /**\n     * Block html frame close tag\n     * @var string\n     */\n    protected $_frameCloseTag;\n\n    /**\n     * Url object\n     *\n     * @var Mage_Core_Model_Url\n     */\n    protected static $_urlModel;\n\n    /**\n     * @var Varien_Object\n     */\n    private static $_transportObject;\n\n    /**\n     * Array of block sort priority instructions\n     *\n     * @var array\n     */\n    protected $_sortInstructions = [];\n\n    /**\n     * Factory instance\n     *\n     * @var Mage_Core_Model_Factory|null\n     */\n    protected $_factory;\n\n    /**\n     * Application instance\n     *\n     * @var Mage_Core_Model_App|null\n     */\n    protected $_app;\n\n    /**\n     * Initialize factory instance\n     *\n     * @param array $args\n     */\n    public function __construct(array $args = [])\n    {\n        if (!empty($args['core_factory']) && ($args['core_factory'] instanceof Mage_Core_Model_Factory)) {\n            $this->_factory = $args['core_factory'];\n        }\n        if (!empty($args['app']) && ($args['app'] instanceof Mage_Core_Model_App)) {\n            $this->_app = $args['app'];\n        }\n        parent::__construct($args);\n    }\n\n    /**\n     * Internal constructor, that is called from real constructor\n     *\n     * Please override this one instead of overriding real __construct constructor\n     *\n     */\n    protected function _construct()\n    {\n        /**\n         * Please override this one instead of overriding real __construct constructor\n         */\n    }\n\n    /**\n     * Retrieve factory instance\n     *\n     * @return Mage_Core_Model_Factory\n     */\n    protected function _getFactory()\n    {\n        return is_null($this->_factory) ? Mage::getSingleton('core/factory') : $this->_factory;\n    }\n\n    /**\n     * Retrieve application instance\n     *\n     * @return Mage_Core_Model_App\n     */\n    protected function _getApp()\n    {\n        return is_null($this->_app) ? Mage::app() : $this->_app;\n    }\n\n    /**\n     * Retrieve request object\n     *\n     * @return Mage_Core_Controller_Request_Http\n     * @throws Exception\n     */\n    public function getRequest()\n    {\n        $controller = $this->_getApp()->getFrontController();\n        if ($controller) {\n            $this->_request = $controller->getRequest();\n        } else {\n            throw new Exception(Mage::helper('core')->__(\"Can't retrieve request object\"));\n        }\n        return $this->_request;\n    }\n\n    /**\n     * Retrieve parent block\n     *\n     * @return $this\n     */\n    public function getParentBlock()\n    {\n        return $this->_parentBlock;\n    }\n\n    /**\n     * Set parent block\n     *\n     * @param   Mage_Core_Block_Abstract $block\n     * @return  $this\n     */\n    public function setParentBlock(Mage_Core_Block_Abstract $block)\n    {\n        $this->_parentBlock = $block;\n        return $this;\n    }\n\n    /**\n     * Retrieve current action object\n     *\n     * @return Mage_Core_Controller_Varien_Action\n     */\n    public function getAction()\n    {\n        return $this->_getApp()->getFrontController()->getAction();\n    }\n\n    /**\n     * Set layout object\n     *\n     * @param   Mage_Core_Model_Layout $layout\n     * @return  $this\n     */\n    public function setLayout(Mage_Core_Model_Layout $layout)\n    {\n        $this->_layout = $layout;\n        Mage::dispatchEvent('core_block_abstract_prepare_layout_before', ['block' => $this]);\n        $this->_prepareLayout();\n        Mage::dispatchEvent('core_block_abstract_prepare_layout_after', ['block' => $this]);\n        return $this;\n    }\n\n    /**\n     * Preparing global layout\n     *\n     * You can redefine this method in child classes for changing layout\n     *\n     * @return $this\n     */\n    protected function _prepareLayout()\n    {\n        return $this;\n    }\n\n    /**\n     * Retrieve layout object\n     *\n     * @return Mage_Core_Model_Layout\n     */\n    public function getLayout()\n    {\n        return $this->_layout;\n    }\n\n    /**\n     * Check if block is using auto generated (Anonymous) name\n     * @return bool\n     */\n    public function getIsAnonymous()\n    {\n        return $this->_isAnonymous;\n    }\n\n    /**\n     * Set the anonymous flag\n     *\n     * @param  bool $flag\n     * @return $this\n     */\n    public function setIsAnonymous($flag)\n    {\n        $this->_isAnonymous = (bool)$flag;\n        return $this;\n    }\n\n    /**\n     * Returns anonymous block suffix\n     *\n     * @return string\n     */\n    public function getAnonSuffix()\n    {\n        return $this->_anonSuffix;\n    }\n\n    /**\n     * Set anonymous suffix for current block\n     *\n     * @param string $suffix\n     * @return $this\n     */\n    public function setAnonSuffix($suffix)\n    {\n        $this->_anonSuffix = $suffix;\n        return $this;\n    }\n\n    /**\n     * Returns block alias\n     *\n     * @return string\n     */\n    public function getBlockAlias()\n    {\n        return $this->_alias;\n    }\n\n    /**\n     * Set block alias\n     *\n     * @param string $alias\n     * @return $this\n     */\n    public function setBlockAlias($alias)\n    {\n        $this->_alias = $alias;\n        return $this;\n    }\n\n    /**\n     * Set block's name in layout and unsets previous link if such exists.\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function setNameInLayout($name)\n    {\n        if (!empty($this->_nameInLayout) && $this->getLayout()) {\n            $this->getLayout()->unsetBlock($this->_nameInLayout)\n                ->setBlock($name, $this);\n        }\n        $this->_nameInLayout = $name;\n        return $this;\n    }\n\n    /**\n     * Retrieve sorted list of children.\n     *\n     * @return array\n     */\n    public function getSortedChildren()\n    {\n        $this->sortChildren();\n        return $this->_sortedChildren;\n    }\n\n    /**\n     * Set block attribute value\n     *\n     * Wrapper for method \"setData\"\n     *\n     * @param   string $name\n     * @param   mixed $value\n     * @return  $this\n     */\n    public function setAttribute($name, $value = null)\n    {\n        return $this->setData($name, $value);\n    }\n\n    /**\n     * Set child block\n     *\n     * @param   string $alias\n     * @param   Mage_Core_Block_Abstract $block\n     * @return  $this\n     */\n    public function setChild($alias, $block)\n    {\n        if (is_string($block)) {\n            $block = $this->getLayout()->getBlock($block);\n        }\n        if (!$block) {\n            return $this;\n        }\n\n        if ($block->getIsAnonymous()) {\n            $suffix = $block->getAnonSuffix();\n            if (empty($suffix)) {\n                $suffix = 'child' . count($this->_children);\n            }\n            $blockName = $this->getNameInLayout() . '.' . $suffix;\n\n            if ($this->getLayout()) {\n                $this->getLayout()->unsetBlock($block->getNameInLayout())\n                    ->setBlock($blockName, $block);\n            }\n\n            $block->setNameInLayout($blockName);\n            $block->setIsAnonymous(false);\n\n            if (empty($alias)) {\n                $alias = $blockName;\n            }\n        }\n\n        $block->setParentBlock($this);\n        $block->setBlockAlias($alias);\n        $this->_children[$alias] = $block;\n        return $this;\n    }\n\n    /**\n     * Unset child block\n     *\n     * @param  string $alias\n     * @return $this\n     */\n    public function unsetChild($alias)\n    {\n        if (isset($this->_children[$alias])) {\n            $block = $this->_children[$alias];\n            $name = $block->getNameInLayout();\n            unset($this->_children[$alias]);\n            $key = array_search($name, $this->_sortedChildren);\n            if ($key !== false) {\n                unset($this->_sortedChildren[$key]);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Call a child and unset it, if callback matched result\n     *\n     * $params will pass to child callback\n     * $params may be array, if called from layout with elements with same name, for example:\n     * ...<foo>value_1</foo><foo>value_2</foo><foo>value_3</foo>\n     *\n     * Or, if called like this:\n     * ...<foo>value_1</foo><bar>value_2</bar><baz>value_3</baz>\n     * - then it will be $params1, $params2, $params3\n     *\n     * It is no difference anyway, because they will be transformed in appropriate way.\n     *\n     * @param string $alias\n     * @param string $callback\n     * @param mixed $result\n     * @param array $params\n     * @return $this\n     */\n    public function unsetCallChild($alias, $callback, $result, $params)\n    {\n        $child = $this->getChild($alias);\n        if ($child) {\n            $args = func_get_args();\n            $alias = array_shift($args);\n            $callback = array_shift($args);\n            $result = (string)array_shift($args);\n            if (!is_array($params)) {\n                $params = $args;\n            }\n\n            Mage::helper('core/security')->validateAgainstBlockMethodBlacklist($child, $callback, $params);\n            if ($result == call_user_func_array([&$child, $callback], $params)) {\n                $this->unsetChild($alias);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Unset all children blocks\n     *\n     * @return $this\n     */\n    public function unsetChildren()\n    {\n        $this->_children = [];\n        $this->_sortedChildren = [];\n        return $this;\n    }\n\n    /**\n     * Retrieve child block by name\n     *\n     * @param  string $name\n     * @return mixed\n     */\n    public function getChild($name = '')\n    {\n        if ($name === '') {\n            return $this->_children;\n        } elseif (isset($this->_children[$name])) {\n            return $this->_children[$name];\n        }\n        return false;\n    }\n\n    /**\n     * Retrieve child block HTML\n     *\n     * @param   string $name\n     * @param   bool $useCache\n     * @param   bool $sorted\n     * @return  string\n     */\n    public function getChildHtml($name = '', $useCache = true, $sorted = false)\n    {\n        if ($name === '') {\n            if ($sorted) {\n                $children = [];\n                foreach ($this->getSortedChildren() as $childName) {\n                    $children[$childName] = $this->getLayout()->getBlock($childName);\n                }\n            } else {\n                $children = $this->getChild();\n            }\n            $out = '';\n            foreach ($children as $child) {\n                $out .= $this->_getChildHtml($child->getBlockAlias(), $useCache);\n            }\n            return $out;\n        } else {\n            return $this->_getChildHtml($name, $useCache);\n        }\n    }\n\n    /**\n     * @param string $name          Parent block name\n     * @param string $childName     OPTIONAL Child block name\n     * @param bool $useCache        OPTIONAL Use cache flag\n     * @param bool $sorted          OPTIONAL @see getChildHtml()\n     * @return string\n     */\n    public function getChildChildHtml($name, $childName = '', $useCache = true, $sorted = false)\n    {\n        if (empty($name)) {\n            return '';\n        }\n        $child = $this->getChild($name);\n        if (!$child) {\n            return '';\n        }\n        return $child->getChildHtml($childName, $useCache, $sorted);\n    }\n\n    /**\n     * Obtain sorted child blocks\n     *\n     * @return Mage_Core_Block_Abstract[]\n     */\n    public function getSortedChildBlocks()\n    {\n        $children = [];\n        foreach ($this->getSortedChildren() as $childName) {\n            $children[$childName] = $this->getLayout()->getBlock($childName);\n        }\n        return $children;\n    }\n\n    /**\n     * Retrieve child block HTML\n     *\n     * @param   string $name\n     * @param   bool $useCache\n     * @return  string\n     */\n    protected function _getChildHtml($name, $useCache = true)\n    {\n        if ($useCache && isset($this->_childrenHtmlCache[$name])) {\n            return $this->_childrenHtmlCache[$name];\n        }\n\n        $child = $this->getChild($name);\n\n        if (!$child) {\n            $html = '';\n        } else {\n            $this->_beforeChildToHtml($name, $child);\n            $html = $child->toHtml();\n        }\n\n        $this->_childrenHtmlCache[$name] = $html;\n        return $html;\n    }\n\n    /**\n     * Prepare child block before generate html\n     *\n     * @param   string $name\n     * @param   Mage_Core_Block_Abstract $child\n     */\n    protected function _beforeChildToHtml($name, $child)\n    {\n    }\n\n    /**\n     * Retrieve block html\n     *\n     * @param   string $name\n     * @return  string\n     */\n    public function getBlockHtml($name)\n    {\n        if (!($layout = $this->getLayout()) && !($layout = $this->getAction()->getLayout())) {\n            return '';\n        }\n        if (!($block = $layout->getBlock($name))) {\n            return '';\n        }\n        return $block->toHtml();\n    }\n\n    /**\n     * Insert child block\n     *\n     * @param   Mage_Core_Block_Abstract|string $block\n     * @param   string $siblingName\n     * @param   bool $after\n     * @param   string $alias\n     * @return  object $this\n     */\n    public function insert($block, $siblingName = '', $after = false, $alias = '')\n    {\n        if (is_string($block)) {\n            $block = $this->getLayout()->getBlock($block);\n        }\n        if (!$block) {\n            /*\n             * if we don't have block - don't throw exception because\n             * block can simply removed using layout method remove\n             */\n            //Mage::throwException(Mage::helper('core')\n            // ->__('Invalid block name to set child %s: %s', $alias, $block));\n            return $this;\n        }\n        if ($block->getIsAnonymous()) {\n            $this->setChild('', $block);\n            $name = $block->getNameInLayout();\n        } elseif ($alias != '') {\n            $this->setChild($alias, $block);\n            $name = $block->getNameInLayout();\n        } else {\n            $name = $block->getNameInLayout();\n            $this->setChild($name, $block);\n        }\n\n        if ($siblingName === '') {\n            if ($after) {\n                $this->_sortedChildren[] = $name;\n            } else {\n                array_unshift($this->_sortedChildren, $name);\n            }\n        } else {\n            $key = array_search($siblingName, $this->_sortedChildren);\n            if ($key !== false) {\n                if ($after) {\n                    $key++;\n                }\n                array_splice($this->_sortedChildren, $key, 0, $name);\n            } else {\n                if ($after) {\n                    $this->_sortedChildren[] = $name;\n                } else {\n                    array_unshift($this->_sortedChildren, $name);\n                }\n            }\n\n            $this->_sortInstructions[$name] = [$siblingName, (bool)$after, $key !== false];\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sort block's children\n     *\n     * @param bool $force force re-sort all children\n     * @return $this\n     */\n    public function sortChildren($force = false)\n    {\n        $this->_sortedChildren = array_values($this->_sortedChildren); // reset indexes which might have gaps after unsetting blocks\n        foreach ($this->_sortInstructions as $name => $list) {\n            list($siblingName, $after, $exists) = $list;\n            if ($exists && !$force) {\n                continue;\n            }\n            $this->_sortInstructions[$name][2] = true;\n\n            $index = array_search($name, $this->_sortedChildren);\n            $siblingKey = array_search($siblingName, $this->_sortedChildren);\n\n            if ($index === false || $siblingKey === false) {\n                continue;\n            }\n\n            if ($after) {\n                // insert after block\n                if ($index == $siblingKey + 1) {\n                    continue;\n                }\n                // remove sibling from array\n                array_splice($this->_sortedChildren, $index, 1, []);\n                // insert sibling after\n                array_splice($this->_sortedChildren, $siblingKey + 1, 0, [$name]);\n            } else {\n                // insert before block\n                if ($index == $siblingKey - 1) {\n                    continue;\n                }\n                // remove sibling from array\n                array_splice($this->_sortedChildren, $index, 1, []);\n                // insert sibling after\n                array_splice($this->_sortedChildren, $siblingKey, 0, [$name]);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Append child block\n     *\n     * @param   Mage_Core_Block_Abstract|string $block\n     * @param   string $alias\n     * @return  $this\n     */\n    public function append($block, $alias = '')\n    {\n        $this->insert($block, '', true, $alias);\n        return $this;\n    }\n\n    /**\n     * Make sure specified block will be registered in the specified child groups\n     *\n     * @param string $groupName\n     * @param Mage_Core_Block_Abstract $child\n     */\n    public function addToChildGroup($groupName, Mage_Core_Block_Abstract $child)\n    {\n        if (!isset($this->_childGroups[$groupName])) {\n            $this->_childGroups[$groupName] = [];\n        }\n        if (!in_array($child->getBlockAlias(), $this->_childGroups[$groupName])) {\n            $this->_childGroups[$groupName][] = $child->getBlockAlias();\n        }\n    }\n\n    /**\n     * Add self to the specified group of parent block\n     *\n     * @param string $groupName\n     * @return $this\n     */\n    public function addToParentGroup($groupName)\n    {\n        $this->getParentBlock()->addToChildGroup($groupName, $this);\n        return $this;\n    }\n\n    /**\n     * Get a group of child blocks\n     *\n     * Returns an array of <alias> => <block>\n     * or an array of <alias> => <callback_result>\n     * The callback currently supports only $this methods and passes the alias as parameter\n     *\n     * @param string $groupName\n     * @param string $callback\n     * @param bool $skipEmptyResults\n     * @return array\n     */\n    public function getChildGroup($groupName, $callback = null, $skipEmptyResults = true)\n    {\n        $result = [];\n        if (!isset($this->_childGroups[$groupName])) {\n            return $result;\n        }\n        foreach ($this->getSortedChildBlocks() as $block) {\n            $alias = $block->getBlockAlias();\n            if (in_array($alias, $this->_childGroups[$groupName])) {\n                if ($callback) {\n                    Mage::helper('core/security')->validateAgainstBlockMethodBlacklist($this, $callback, [$alias]);\n                    $row = $this->$callback($alias);\n                    if (!$skipEmptyResults || $row) {\n                        $result[$alias] = $row;\n                    }\n                } else {\n                    $result[$alias] = $block;\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Get a value from child block by specified key\n     *\n     * @param string $alias\n     * @param string $key\n     * @return mixed\n     */\n    public function getChildData($alias, $key = '')\n    {\n        $child = $this->getChild($alias);\n        if ($child) {\n            return $child->getData($key);\n        }\n    }\n\n    /**\n     * Before rendering html, but after trying to load cache\n     *\n     * @return $this\n     */\n    protected function _beforeToHtml()\n    {\n        return $this;\n    }\n\n    /**\n     * Specify block output frame tags\n     *\n     * @param string $openTag\n     * @param string $closeTag\n     * @return $this\n     */\n    public function setFrameTags($openTag, $closeTag = null)\n    {\n        $this->_frameOpenTag = $openTag;\n        if ($closeTag) {\n            $this->_frameCloseTag = $closeTag;\n        } else {\n            $this->_frameCloseTag = '/' . $openTag;\n        }\n        return $this;\n    }\n\n    /**\n     * Produce and return block's html output\n     *\n     * It is a final method, but you can override _toHtml() method in descendants if needed.\n     *\n     * @return string\n     */\n    final public function toHtml()\n    {\n        Mage::dispatchEvent('core_block_abstract_to_html_before', ['block' => $this]);\n        if (Mage::getStoreConfig('advanced/modules_disable_output/' . $this->getModuleName())) {\n            return '';\n        }\n        $html = $this->_loadCache();\n        if ($html === false) {\n            $translate = Mage::getSingleton('core/translate');\n            /** @var Mage_Core_Model_Translate $translate */\n            if ($this->hasData('translate_inline')) {\n                $translate->setTranslateInline($this->getData('translate_inline'));\n            }\n\n            $this->_beforeToHtml();\n            $html = $this->_toHtml();\n            $this->_saveCache($html);\n\n            if ($this->hasData('translate_inline')) {\n                $translate->setTranslateInline(true);\n            }\n        }\n        $html = $this->_afterToHtml($html);\n\n        /**\n         * Check framing options\n         */\n        if ($this->_frameOpenTag) {\n            $html = '<' . $this->_frameOpenTag . '>' . $html . '<' . $this->_frameCloseTag . '>';\n        }\n\n        /**\n         * Use single transport object instance for all blocks\n         */\n        if (self::$_transportObject === null) {\n            self::$_transportObject = new Varien_Object();\n        }\n        self::$_transportObject->setHtml($html);\n        Mage::dispatchEvent(\n            'core_block_abstract_to_html_after',\n            ['block' => $this, 'transport' => self::$_transportObject]\n        );\n        $html = self::$_transportObject->getHtml();\n\n        return $html;\n    }\n\n    /**\n     * Processing block html after rendering\n     *\n     * @param   string $html\n     * @return  string\n     */\n    protected function _afterToHtml($html)\n    {\n        return $html;\n    }\n\n    /**\n     * Override this method in descendants to produce html\n     *\n     * @return string\n     */\n    protected function _toHtml()\n    {\n        return '';\n    }\n\n    /**\n     * Returns url model class name\n     *\n     * @return string\n     */\n    protected function _getUrlModelClass()\n    {\n        return 'core/url';\n    }\n\n    /**\n     * Create and return url object\n     *\n     * @return Mage_Core_Model_Url\n     */\n    protected function _getUrlModel()\n    {\n        return Mage::getModel($this->_getUrlModelClass());\n    }\n\n    /**\n     * Generate url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrl($route = '', $params = [])\n    {\n        return $this->_getUrlModel()->getUrl($route, $params);\n    }\n\n    /**\n     * Generate security url by route and parameters (add form key if \"Add Secret Key to URLs\" disabled)\n     *\n     * @param string $route\n     * @param array $params\n     *\n     * @return string\n     */\n    public function getUrlSecure($route = '', $params = [])\n    {\n        if (!Mage::helper('adminhtml')->isEnabledSecurityKeyUrl()) {\n            $params[Mage_Core_Model_Url::FORM_KEY] = $this->getFormKey();\n        }\n        return $this->getUrl($route, $params);\n    }\n\n    /**\n     * Generate base64-encoded url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrlBase64($route = '', $params = [])\n    {\n        return Mage::helper('core')->urlEncode($this->getUrl($route, $params));\n    }\n\n    /**\n     * Generate url-encoded url by route and parameters\n     *\n     * @param   string $route\n     * @param   array $params\n     * @return  string\n     */\n    public function getUrlEncoded($route = '', $params = [])\n    {\n        return Mage::helper('core')->urlEncode($this->getUrl($route, $params));\n    }\n\n    /**\n     * Retrieve url of skins file\n     *\n     * @param   string $file path to file in skin\n     * @param   array $params\n     * @return  string\n     */\n    public function getSkinUrl($file = null, array $params = [])\n    {\n        return Mage::getDesign()->getSkinUrl($file, $params);\n    }\n\n    /**\n     * Retrieve messages block\n     *\n     * @return Mage_Core_Block_Messages\n     */\n    public function getMessagesBlock()\n    {\n        if (is_null($this->_messagesBlock)) {\n            return $this->getLayout()->getMessagesBlock();\n        }\n        return $this->_messagesBlock;\n    }\n\n    /**\n     * Set messages block\n     *\n     * @param   Mage_Core_Block_Messages $block\n     * @return  $this\n     */\n    public function setMessagesBlock(Mage_Core_Block_Messages $block)\n    {\n        $this->_messagesBlock = $block;\n        return $this;\n    }\n\n    /**\n     * Return block helper\n     *\n     * @param string $type\n     * @return $this\n     */\n    public function getHelper($type)\n    {\n        return $this->getLayout()->getBlockSingleton($type);\n    }\n\n    /**\n     * Returns helper object\n     *\n     * @param string $name\n     * @return Mage_Core_Helper_Abstract\n     */\n    public function helper($name)\n    {\n        if ($this->getLayout()) {\n            return $this->getLayout()->helper($name);\n        }\n        return Mage::helper($name);\n    }\n\n    /**\n     * Retrieve formatting date\n     *\n     * @param   string $date\n     * @param   string $format\n     * @param   bool $showTime\n     * @return  string\n     */\n    public function formatDate($date = null, $format = Mage_Core_Model_Locale::FORMAT_TYPE_SHORT, $showTime = false)\n    {\n        /** @var Mage_Core_Helper_Data $helper */\n        $helper = $this->helper('core');\n        return $helper->formatDate($date, $format, $showTime);\n    }\n\n    /**\n     * Retrieve formatting time\n     *\n     * @param   string $time\n     * @param   string $format\n     * @param   bool $showDate\n     * @return  string\n     */\n    public function formatTime($time = null, $format = Mage_Core_Model_Locale::FORMAT_TYPE_SHORT, $showDate = false)\n    {\n        /** @var Mage_Core_Helper_Data $helper */\n        $helper = $this->helper('core');\n        return $helper->formatTime($time, $format, $showDate);\n    }\n\n    /**\n     * Retrieve module name of block\n     *\n     * @return string\n     */\n    public function getModuleName()\n    {\n        $module = $this->getData('module_name');\n        if (is_null($module)) {\n            $class = get_class($this);\n            $module = substr($class, 0, strpos($class, '_Block'));\n            $this->setData('module_name', $module);\n        }\n        return $module;\n    }\n\n    /**\n     * Translate block sentence\n     *\n     * @return string\n     */\n    public function __()\n    {\n        $args = func_get_args();\n        $expr = new Mage_Core_Model_Translate_Expr(array_shift($args), $this->getModuleName());\n        array_unshift($args, $expr);\n        return $this->_getApp()->getTranslator()->translate($args);\n    }\n\n    /**\n     * @param string|array $data\n     * @param array $allowedTags\n     * @return string\n     * @see self::escapeHtml()\n     * @deprecated after 1.4.0.0-rc1\n     */\n    public function htmlEscape($data, $allowedTags = null)\n    {\n        return $this->escapeHtml($data, $allowedTags);\n    }\n\n    /**\n     * Escape html entities\n     *\n     * @param   string|array $data\n     * @param   array $allowedTags\n     * @return  string\n     */\n    public function escapeHtml($data, $allowedTags = null)\n    {\n        return $this->helper('core')->escapeHtml($data, $allowedTags);\n    }\n\n    /**\n     * Wrapper for standard strip_tags() function with extra functionality for html entities\n     *\n     * @param string $data\n     * @param string $allowableTags\n     * @param bool $allowHtmlEntities\n     * @return string\n     */\n    public function stripTags($data, $allowableTags = null, $allowHtmlEntities = false)\n    {\n        return $this->helper('core')->stripTags($data, $allowableTags, $allowHtmlEntities);\n    }\n\n    /**\n     * @param string $data\n     * @return string\n     * @deprecated after 1.4.0.0-rc1\n     * @see self::escapeUrl()\n     */\n    public function urlEscape($data)\n    {\n        return $this->escapeUrl($data);\n    }\n\n    /**\n     * Escape html entities in url\n     *\n     * @param string $data\n     * @return string\n     */\n    public function escapeUrl($data)\n    {\n        return $this->helper('core')->escapeUrl($data);\n    }\n\n    /**\n     * Escape quotes inside html attributes\n     * Use $addSlashes = false for escaping js that inside html attribute (onClick, onSubmit etc)\n     *\n     * @param  string $data\n     * @param  bool $addSlashes\n     * @return string\n     */\n    public function quoteEscape($data, $addSlashes = false)\n    {\n        return $this->helper('core')->quoteEscape($data, $addSlashes);\n    }\n\n    /**\n     * Escape quotes in java scripts\n     *\n     * @param mixed $data\n     * @param string $quote\n     * @return mixed\n     */\n    public function jsQuoteEscape($data, $quote = '\\'')\n    {\n        return $this->helper('core')->jsQuoteEscape($data, $quote);\n    }\n\n    /**\n     * Alias for getName method.\n     *\n     * @return string\n     */\n    public function getNameInLayout()\n    {\n        return $this->_nameInLayout;\n    }\n\n    /**\n     * Get children blocks count\n     * @return int\n     */\n    public function countChildren()\n    {\n        return count($this->_children);\n    }\n\n    /**\n     * Prepare url for save to cache\n     *\n     * @return $this\n     */\n    protected function _beforeCacheUrl()\n    {\n        if ($this->_getApp()->useCache(self::CACHE_GROUP)) {\n            $this->_getApp()->setUseSessionVar(true);\n        }\n        return $this;\n    }\n\n    /**\n     * Replace URLs from cache\n     *\n     * @param string $html\n     * @return string\n     */\n    protected function _afterCacheUrl($html)\n    {\n        if ($this->_getApp()->useCache(self::CACHE_GROUP)) {\n            $this->_getApp()->setUseSessionVar(false);\n            Varien_Profiler::start('CACHE_URL');\n            /** @var Mage_Core_Model_Url $model */\n            $model = Mage::getSingleton($this->_getUrlModelClass());\n            $html = $model->sessionUrlVar($html);\n            Varien_Profiler::stop('CACHE_URL');\n        }\n        return $html;\n    }\n\n    /**\n     * Get cache key informative items\n     * Provide string array key to share specific info item with FPC placeholder\n     *\n     * @return array\n     */\n    public function getCacheKeyInfo()\n    {\n        return [\n            $this->getNameInLayout()\n        ];\n    }\n\n    /**\n     * Get Key for caching block content\n     *\n     * @return string\n     */\n    public function getCacheKey()\n    {\n        if ($this->hasData('cache_key')) {\n            $cacheKey = $this->getData('cache_key');\n            if (strpos($cacheKey, self::CACHE_KEY_PREFIX) !== 0) {\n                $cacheKey = self::CACHE_KEY_PREFIX . $cacheKey;\n                $this->setData('cache_key', $cacheKey);\n            }\n\n            return $cacheKey;\n        }\n        /**\n         * don't prevent recalculation by saving generated cache key\n         * because of ability to render single block instance with different data\n         */\n        $key = $this->getCacheKeyInfo();\n        //ksort($key);  // ignore order\n        $key = array_values($key); // ignore array keys\n        $key = implode('|', $key);\n        $key = sha1($key);\n        return $key;\n    }\n\n    /**\n     * Get tags array for saving cache\n     *\n     * @return array\n     */\n    public function getCacheTags()\n    {\n        $tagsCache = $this->_getApp()->loadCache($this->_getTagsCacheKey());\n        if ($tagsCache) {\n            $tags = json_decode($tagsCache);\n        }\n        if (!isset($tags) || !is_array($tags) || empty($tags)) {\n            $tags = !$this->hasData(self::CACHE_TAGS_DATA_KEY) ? [] : $this->getData(self::CACHE_TAGS_DATA_KEY);\n            if (!in_array(self::CACHE_GROUP, $tags)) {\n                $tags[] = self::CACHE_GROUP;\n            }\n        }\n        return array_unique($tags);\n    }\n\n    /**\n     * Add tag to block\n     *\n     * @param string|array $tag\n     * @return $this\n     */\n    public function addCacheTag($tag)\n    {\n        $tag = is_array($tag) ? $tag : [$tag];\n        $tags = !$this->hasData(self::CACHE_TAGS_DATA_KEY) ?\n            $tag : array_merge($this->getData(self::CACHE_TAGS_DATA_KEY), $tag);\n        $this->setData(self::CACHE_TAGS_DATA_KEY, $tags);\n        return $this;\n    }\n\n    /**\n     * Add tags from specified model to current block\n     *\n     * @param Mage_Core_Model_Abstract $model\n     * @return $this\n     */\n    public function addModelTags(Mage_Core_Model_Abstract $model)\n    {\n        $cacheTags = $model->getCacheIdTags();\n        if ($cacheTags !== false) {\n            $this->addCacheTag($cacheTags);\n        }\n        return $this;\n    }\n\n    /**\n     * Get block cache life time\n     *\n     * @return int|null\n     */\n    public function getCacheLifetime()\n    {\n        if (!$this->hasData('cache_lifetime')) {\n            return null;\n        }\n        return $this->getData('cache_lifetime');\n    }\n\n    /**\n     * Retrieve Session Form Key\n     *\n     * @return string\n     */\n    public function getFormKey()\n    {\n        return Mage::getSingleton('core/session')->getFormKey();\n    }\n\n    /**\n     * Load block html from cache storage\n     *\n     * @return string | false\n     */\n    protected function _loadCache()\n    {\n        if (is_null($this->getCacheLifetime()) || !$this->_getApp()->useCache(self::CACHE_GROUP)) {\n            return false;\n        }\n        $cacheKey = $this->getCacheKey();\n        /** @var Mage_Core_Model_Session $session */\n        $session = Mage::getSingleton('core/session');\n        $cacheData = $this->_getApp()->loadCache($cacheKey);\n        if ($cacheData) {\n            $cacheData = str_replace(\n                $this->_getSidPlaceholder($cacheKey),\n                $session->getSessionIdQueryParam() . '=' . $session->getEncryptedSessionId(),\n                $cacheData\n            );\n        }\n        return $cacheData;\n    }\n\n    /**\n     * Save block content to cache storage\n     *\n     * @param string $data\n     * @return $this|false\n     */\n    protected function _saveCache($data)\n    {\n        if (is_null($this->getCacheLifetime()) || !$this->_getApp()->useCache(self::CACHE_GROUP)) {\n            return false;\n        }\n        $cacheKey = $this->getCacheKey();\n        /** @var Mage_Core_Model_Session $session */\n        $session = Mage::getSingleton('core/session');\n        $data = str_replace(\n            $session->getSessionIdQueryParam() . '=' . $session->getEncryptedSessionId(),\n            $this->_getSidPlaceholder($cacheKey),\n            $data\n        );\n\n        $tags = $this->getCacheTags();\n\n        $this->_getApp()->saveCache($data, $cacheKey, $tags, $this->getCacheLifetime());\n        $this->_getApp()->saveCache(\n            json_encode($tags),\n            $this->_getTagsCacheKey($cacheKey),\n            $tags,\n            $this->getCacheLifetime()\n        );\n        return $this;\n    }\n\n    /**\n     * Get cache key for tags\n     *\n     * @param string $cacheKey\n     * @return string\n     */\n    protected function _getTagsCacheKey($cacheKey = null)\n    {\n        $cacheKey = !empty($cacheKey) ? $cacheKey : $this->getCacheKey();\n        $cacheKey = md5($cacheKey . '_tags');\n        return $cacheKey;\n    }\n\n    /**\n     * Get SID placeholder for cache\n     *\n     * @param null|string $cacheKey\n     * @return string\n     */\n    protected function _getSidPlaceholder($cacheKey = null)\n    {\n        if (is_null($cacheKey)) {\n            $cacheKey = $this->getCacheKey();\n        }\n\n        return '<!--SID=' . $cacheKey . '-->';\n    }\n\n    /**\n     * Collect and retrieve items tags.\n     * Item should implements Mage_Core_Model_Abstract::getCacheIdTags method\n     *\n     * @param array|Varien_Data_Collection $items\n     * @return array\n     */\n    public function getItemsTags($items)\n    {\n        $tags = [];\n        /** @var Mage_Core_Model_Abstract $item */\n        foreach ($items as $item) {\n            $itemTags = $item->getCacheIdTags();\n            if ($itemTags === false) {\n                continue;\n            }\n            $tags = array_merge($tags, $itemTags);\n        }\n        return $tags;\n    }\n\n    /**\n     * Checks is request Url is secure\n     *\n     * @return bool\n     */\n    protected function _isSecure()\n    {\n        return $this->_getApp()->getFrontController()->getRequest()->isSecure();\n    }\n}\n", "<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2020-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * @category   Mage\n * @package    Mage_Core\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Core_Helper_Security\n{\n    private $invalidBlockActions\n        = [\n            ['block' => Mage_Page_Block_Html_Topmenu_Renderer::class, 'method' => 'render'],\n            ['block' => Mage_Core_Block_Template::class, 'method' => 'fetchView'],\n        ];\n\n    /**\n     * @param Mage_Core_Block_Abstract $block\n     * @param string                   $method\n     * @param string[]                 $args\n     *\n     * @throws Mage_Core_Exception\n     */\n    public function validateAgainstBlockMethodBlacklist(Mage_Core_Block_Abstract $block, $method, array $args)\n    {\n        foreach ($this->invalidBlockActions as $action) {\n            $calledMethod = strtolower($method);\n            if (($block instanceof $action['block'] && strtolower($action['method']) === $calledMethod)\n                || ($block instanceof $action['block']\n                    && strtolower($action['block'] . '::' . $action['method']) === $calledMethod)\n            ) {\n                Mage::throwException(\n                    sprintf('Action with combination block %s and method %s is forbidden.', get_class($block), $method)\n                );\n            }\n        }\n    }\n}\n"], "filenames": ["app/code/core/Mage/Core/Block/Abstract.php", "app/code/core/Mage/Core/Helper/Security.php"], "buggy_code_start_loc": [854, 31], "buggy_code_end_loc": [854, 33], "fixing_code_start_loc": [855, 30], "fixing_code_end_loc": [856, 30], "type": "CWE-77", "message": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, a layout block was able to bypass the block blacklist to execute remote code. Versions 19.4.22 and 20.0.19 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2021-41144", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-27T19:15:09.963", "lastModified": "2023-02-06T18:54:58.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, a layout block was able to bypass the block blacklist to execute remote code. Versions 19.4.22 and 20.0.19 contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionEndExcluding": "19.4.22", "matchCriteriaId": "B87F8CA0-6C21-4615-A520-39F1E9E737D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.19", "matchCriteriaId": "15B9BC3F-BF81-4DF5-B57B-ECF7059A7991"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/06c45940ba3256cdfc9feea12a3c0ca56d23acf8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v19.4.22", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v20.0.19", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-5j2g-3ph4-rgvm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/06c45940ba3256cdfc9feea12a3c0ca56d23acf8"}}