{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Cache\\CacheManager;\nuse Glpi\\Dashboard\\Grid;\nuse Glpi\\Exception\\PasswordTooWeakException;\nuse Glpi\\Plugin\\Hooks;\nuse Glpi\\System\\RequirementsManager;\nuse Glpi\\Toolbox\\Sanitizer;\nuse PHPMailer\\PHPMailer\\PHPMailer;\n\n/**\n *  Config class\n **/\nclass Config extends CommonDBTM\n{\n    const DELETE_ALL = -1;\n    const KEEP_ALL = 0;\n\n   // From CommonGLPI\n    protected $displaylist         = false;\n\n   // From CommonDBTM\n    public $auto_message_on_action = false;\n    public $showdebug              = true;\n\n    public static $rightname              = 'config';\n\n    public static $undisclosedFields      = ['proxy_passwd', 'smtp_passwd', 'glpinetwork_registration_key'];\n    public static $saferUndisclosedFields = ['admin_email', 'replyto_email'];\n\n    public static function getTypeName($nb = 0)\n    {\n        return __('Setup');\n    }\n\n\n    public static function getMenuContent()\n    {\n        $menu = [];\n        if (static::canView()) {\n            $menu['title']   = _x('setup', 'General');\n            $menu['page']    = Config::getFormURL(false);\n            $menu['icon']    = Config::getIcon();\n\n            $menu['options']['apiclient']['icon']            = APIClient::getIcon();\n            $menu['options']['apiclient']['title']           = APIClient::getTypeName(Session::getPluralNumber());\n            $menu['options']['apiclient']['page']            = Config::getFormURL(false) . '?forcetab=Config$8';\n            $menu['options']['apiclient']['links']['search'] = Config::getFormURL(false) . '?forcetab=Config$8';\n            $menu['options']['apiclient']['links']['add']    = '/front/apiclient.form.php';\n        }\n        if (count($menu)) {\n            return $menu;\n        }\n        return false;\n    }\n\n\n    public static function canCreate()\n    {\n        return false;\n    }\n\n\n    public function canViewItem()\n    {\n        if (\n            isset($this->fields['context']) &&\n            ($this->fields['context'] == 'core' ||\n            Plugin::isPluginActive($this->fields['context']))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('GLPINetwork', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n        global $CFG_GLPI;\n\n       // Unset _no_history to not save it as a configuration value\n        unset($input['_no_history']);\n\n       // Update only an item\n        if (isset($input['context'])) {\n            return $input;\n        }\n\n       // Process configuration for plugins\n        if (!empty($input['config_context'])) {\n            $config_context = $input['config_context'];\n            unset($input['id']);\n            unset($input['_glpi_csrf_token']);\n            unset($input['_update']);\n            unset($input['config_context']);\n            if (\n                (!empty($input['config_class']))\n                && (class_exists($input['config_class']))\n                && (method_exists($input['config_class'], 'configUpdate'))\n            ) {\n                $config_method = $input['config_class'] . '::configUpdate';\n                unset($input['config_class']);\n                $input = call_user_func($config_method, $input);\n            }\n            $this->setConfigurationValues($config_context, $input);\n            return false;\n        }\n\n       // Trim automatically endig slash for url_base config as, for all existing occurences,\n       // this URL will be prepended to something that starts with a slash.\n        if (isset($input[\"url_base\"]) && !empty($input[\"url_base\"])) {\n            if (Toolbox::isValidWebUrl($input[\"url_base\"])) {\n                $input[\"url_base\"] = rtrim($input[\"url_base\"], '/');\n            } else {\n                Session::addMessageAfterRedirect(__('Invalid base URL!'), false, ERROR);\n                return false;\n            }\n        }\n\n        if (isset($input[\"url_base_api\"]) && !empty($input[\"url_base_api\"])) {\n            if (!Toolbox::isValidWebUrl($input[\"url_base_api\"])) {\n                Session::addMessageAfterRedirect(__('Invalid API base URL!'), false, ERROR);\n                return false;\n            }\n        }\n\n        if (isset($input['allow_search_view']) && !$input['allow_search_view']) {\n           // Global search need \"view\"\n            $input['allow_search_global'] = 0;\n        }\n\n        if (isset($input[\"smtp_passwd\"]) && empty($input[\"smtp_passwd\"])) {\n            unset($input[\"smtp_passwd\"]);\n        }\n        if (isset($input[\"_blank_smtp_passwd\"]) && $input[\"_blank_smtp_passwd\"]) {\n            $input['smtp_passwd'] = '';\n        }\n\n        if (isset($input[\"proxy_passwd\"]) && empty($input[\"proxy_passwd\"])) {\n            unset($input[\"proxy_passwd\"]);\n        }\n        if (isset($input[\"_blank_proxy_passwd\"]) && $input[\"_blank_proxy_passwd\"]) {\n            $input['proxy_passwd'] = '';\n        }\n\n       // Manage DB Slave process\n        if (isset($input['_dbslave_status'])) {\n            $already_active = DBConnection::isDBSlaveActive();\n\n            if ($input['_dbslave_status']) {\n                DBConnection::changeCronTaskStatus(true);\n\n                if (!$already_active) {\n                    // Activate Slave from the \"system\" tab\n                    DBConnection::createDBSlaveConfig();\n                } else if (isset($input[\"_dbreplicate_dbhost\"])) {\n                   // Change parameter from the \"replicate\" tab\n                    DBConnection::saveDBSlaveConf(\n                        $input[\"_dbreplicate_dbhost\"],\n                        $input[\"_dbreplicate_dbuser\"],\n                        $input[\"_dbreplicate_dbpassword\"],\n                        $input[\"_dbreplicate_dbdefault\"]\n                    );\n                }\n            }\n\n            if (!$input['_dbslave_status'] && $already_active) {\n                DBConnection::deleteDBSlaveConfig();\n                DBConnection::changeCronTaskStatus(false);\n            }\n        }\n\n       // Matrix for Impact / Urgence / Priority\n        if (isset($input['_matrix'])) {\n            $tab = [];\n\n            for ($urgency = 1; $urgency <= 5; $urgency++) {\n                for ($impact = 1; $impact <= 5; $impact++) {\n                    $priority               = $input[\"_matrix_${urgency}_${impact}\"];\n                    $tab[$urgency][$impact] = $priority;\n                }\n            }\n\n            $input['priority_matrix'] = exportArrayToDB($tab);\n            $input['urgency_mask']    = 0;\n            $input['impact_mask']     = 0;\n\n            for ($i = 1; $i <= 5; $i++) {\n                if ($input[\"_urgency_${i}\"]) {\n                    $input['urgency_mask'] += (1 << $i);\n                }\n\n                if ($input[\"_impact_${i}\"]) {\n                    $input['impact_mask'] += (1 << $i);\n                }\n            }\n        }\n\n        if (isset($input['_update_devices_in_menu'])) {\n            $input['devices_in_menu'] = exportArrayToDB(\n                (isset($input['devices_in_menu']) ? $input['devices_in_menu'] : [])\n            );\n        }\n\n       // lock mechanism update\n        if (isset($input['lock_use_lock_item'])) {\n            $input['lock_item_list'] = exportArrayToDB((isset($input['lock_item_list'])\n                                                      ? $input['lock_item_list'] : []));\n        }\n\n        if (isset($input[Impact::CONF_ENABLED])) {\n            $input[Impact::CONF_ENABLED] = exportArrayToDB($input[Impact::CONF_ENABLED]);\n        }\n\n        if (isset($input['planning_work_days'])) {\n            $input['planning_work_days'] = exportArrayToDB($input['planning_work_days']);\n        }\n\n       // Beware : with new management system, we must update each value\n        unset($input['id']);\n        unset($input['_glpi_csrf_token']);\n        unset($input['_update']);\n\n       // Add skipMaintenance if maintenance mode update\n        if (isset($input['maintenance_mode']) && $input['maintenance_mode']) {\n            $_SESSION['glpiskipMaintenance'] = 1;\n            $url = $CFG_GLPI['root_doc'] . \"/index.php?skipMaintenance=1\";\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('Maintenance mode activated. Backdoor using: %s'),\n                    \"<a href='$url'>$url</a>\"\n                ),\n                false,\n                WARNING\n            );\n        }\n\n        $this->setConfigurationValues('core', $input);\n\n        return false;\n    }\n\n    public static function unsetUndisclosedFields(&$fields)\n    {\n        if (isset($fields['context']) && isset($fields['name'])) {\n            if (\n                $fields['context'] == 'core'\n                && in_array($fields['name'], self::$undisclosedFields)\n            ) {\n                unset($fields['value']);\n            } else {\n                $fields = Plugin::doHookFunction(Hooks::UNDISCLOSED_CONFIG_VALUE, $fields);\n            }\n        }\n    }\n\n    /**\n     * Print the config form for display\n     *\n     * @return void\n     **/\n    public function showFormDisplay()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Session::haveRight(self::$rightname, UPDATE);\n\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('General setup') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='url_base'>\" . __('URL of the application') . \"</label></td>\";\n        echo \"<td colspan='3'><input type='url' name='url_base' id='url_base' value='\" . $CFG_GLPI[\"url_base\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='text_login'>\" . __('Text in the login box (HTML tags supported)') . \"</label></td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<textarea class='form-control' name='text_login' id='text_login'>\" . $CFG_GLPI[\"text_login\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_use_public_faq$rand'>\" . __('Allow FAQ anonymous access') . \"</label></td><td  width='20%'>\";\n        Dropdown::showYesNo(\"use_public_faq\", $CFG_GLPI[\"use_public_faq\"], -1, ['rand' => $rand]);\n        echo \"</td><td width='30%'><label for='helpdesk_doc_url'>\" . __('Simplified interface help link') . \"</label></td>\";\n        echo \"<td><input size='22' type='text' name='helpdesk_doc_url' id='helpdesk_doc_url' value='\" .\n                 $CFG_GLPI[\"helpdesk_doc_url\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_list_limit_max$rand'>\" . __('Default search results limit (page)') . \"</td><td>\";\n        Dropdown::showNumber(\"list_limit_max\", ['value' => $CFG_GLPI[\"list_limit_max\"],\n            'min'   => 5,\n            'max'   => 200,\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td><td><label for='central_doc_url'>\" . __('Standard interface help link') . \"</label></td>\";\n        echo \"<td><input size='22' type='text' name='central_doc_url' id='central_doc_url' value='\" .\n                 $CFG_GLPI[\"central_doc_url\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='cut$rand'>\" . __('Default characters limit (summary text boxes)') . \"</label></td><td>\";\n        echo Html::input('cut', [\n            'value' => $CFG_GLPI[\"cut\"],\n            'id'    => \"cut$rand\"\n        ]);\n        echo \"</td><td><label for='dropdown_url_maxlength$rand'>\" . __('Default url length limit') . \"</td><td>\";\n        Dropdown::showNumber('url_maxlength', ['value' => $CFG_GLPI[\"url_maxlength\"],\n            'min'   => 20,\n            'max'   => 80,\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_decimal_number$rand'>\" . __('Default decimals limit') . \"</label></td><td>\";\n        Dropdown::showNumber(\"decimal_number\", ['value' => $CFG_GLPI[\"decimal_number\"],\n            'min'   => 1,\n            'max'   => 4,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_translate_dropdowns$rand'>\" . __(\"Translation of dropdowns\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_dropdowns\", $CFG_GLPI[\"translate_dropdowns\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_translate_kb$rand'>\" . __(\"Knowledge base translation\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_kb\", $CFG_GLPI[\"translate_kb\"], -1, ['rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='reminder_translate_dropdowns$rand'>\" . __(\"Translation of reminders\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_reminders\", $CFG_GLPI[\"translate_reminders\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td colspan='2'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Dynamic display') .\n           \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_dropdown_max$rand'>\" .\n            __('Page size for dropdown (paging using scroll)') .\n            \"</label></td><td>\";\n        Dropdown::showNumber('dropdown_max', ['value' => $CFG_GLPI[\"dropdown_max\"],\n            'min'   => 1,\n            'max'   => 200,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_ajax_limit_count$rand'>\" . __(\"Don't show search engine in dropdowns if the number of items is less than\") .\n           \"</label></td><td>\";\n        Dropdown::showNumber('ajax_limit_count', ['value' => $CFG_GLPI[\"ajax_limit_count\"],\n            'min'   => 1,\n            'max'   => 200,\n            'step'  => 1,\n            'toadd' => [0 => __('Never')],\n            'rand'  => $rand\n        ]);\n        echo \"<td colspan='2'></td>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Search engine') . \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_allow_search_view$rand'>\" . __('Items seen') . \"</label></td><td>\";\n        $values = [0 => __('No'),\n            1 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('last criterion')),\n            2 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('default criterion'))\n        ];\n        Dropdown::showFromArray(\n            'allow_search_view',\n            $values,\n            ['value' => $CFG_GLPI['allow_search_view'], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_allow_search_global$rand'>\" . __('Global search') . \"</label></td><td>\";\n        if ($CFG_GLPI['allow_search_view']) {\n            Dropdown::showYesNo('allow_search_global', $CFG_GLPI['allow_search_global'], -1, ['rand' => $rand]);\n        } else {\n            echo Dropdown::getYesNo(0);\n        }\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_allow_search_all$rand'>\" . __('All') . \"</label></td><td>\";\n        $values = [0 => __('No'),\n            1 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('last criterion'))\n        ];\n        Dropdown::showFromArray(\n            'allow_search_all',\n            $values,\n            ['value' => $CFG_GLPI['allow_search_all'], 'rand' => $rand]\n        );\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Item locks') . \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_lock_use_lock_item$rand'>\" . __('Use locks') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"lock_use_lock_item\", $CFG_GLPI[\"lock_use_lock_item\"], -1, ['rand' => $rand]);\n        echo \"</td><td><label for='dropdown_lock_lockprofile_id$rand'>\" . __('Profile to be used when locking items') . \"</label></td><td>\";\n        if ($CFG_GLPI[\"lock_use_lock_item\"]) {\n            Profile::dropdown(['name'                  => 'lock_lockprofile_id',\n                'display_emptychoice'   => true,\n                'value'                 => $CFG_GLPI['lock_lockprofile_id'],\n                'rand'                  => $rand\n            ]);\n        } else {\n            echo Dropdown::getDropdownName(Profile::getTable(), $CFG_GLPI['lock_lockprofile_id']);\n        }\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_lock_item_list$rand'>\" . __('List of items to lock') . \"</label></td>\";\n        echo \"<td colspan=3>\";\n        Dropdown::showFromArray(\n            'lock_item_list',\n            ObjectLock::getLockableObjects(),\n            ['values'   => $CFG_GLPI['lock_item_list'],\n                'width'    => '100%',\n                'multiple' => true,\n                'readonly' => !$CFG_GLPI[\"lock_use_lock_item\"],\n                'rand'     => $rand\n            ]\n        );\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Auto Login') .\n           \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_login_remember_time$rand'>\" . __('Time to allow \"Remember Me\"') .\n           \"</label></td><td>\";\n        Dropdown::showTimeStamp('login_remember_time', ['value' => $CFG_GLPI[\"login_remember_time\"],\n            'emptylabel'   => __('Disabled'),\n            'min'   => 0,\n            'max'   => MONTH_TIMESTAMP * 2,\n            'step'  => DAY_TIMESTAMP,\n            'toadd' => [HOUR_TIMESTAMP, HOUR_TIMESTAMP * 2, HOUR_TIMESTAMP * 6, HOUR_TIMESTAMP * 12],\n            'rand'  => $rand\n        ]);\n        echo \"<td><label for='dropdown_login_remember_default$rand'>\" . __(\"Default state of checkbox\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"login_remember_default\", $CFG_GLPI[\"login_remember_default\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_display_login_source$rand'>\" .\n         __('Display source dropdown on login page') .\n         \"</label></td><td>\";\n        Dropdown::showYesNo(\"display_login_source\", $CFG_GLPI[\"display_login_source\"], -1, ['rand' => $rand]);\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='4' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for restrictions\n     *\n     * @return void\n     **/\n    public function showFormInventory()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . _n('Asset', 'Assets', Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_auto_create_infocoms$rand'>\" . __('Enable the financial and administrative information by default') . \"</label></td>\";\n        echo \"<td  width='20%'>\";\n        Dropdown::ShowYesNo('auto_create_infocoms', $CFG_GLPI[\"auto_create_infocoms\"], -1, ['rand' => $rand]);\n        echo \"</td><td width='20%'><label for='dropdown_monitors_management_restrict$rand'>\" . __('Restrict monitor management') . \"</label></td>\";\n        echo \"<td width='30%'>\";\n        $this->dropdownGlobalManagement(\n            \"monitors_management_restrict\",\n            $CFG_GLPI[\"monitors_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_softwarecategories_id_ondelete$rand'>\" . __('Software category deleted by the dictionary rules') .\n           \"</label></td><td>\";\n        SoftwareCategory::dropdown(['value' => $CFG_GLPI[\"softwarecategories_id_ondelete\"],\n            'name'  => \"softwarecategories_id_ondelete\",\n            'rand'  => $rand\n        ]);\n        echo \"</td><td><label for='dropdown_peripherals_management_restrict$rand'>\" . __('Restrict device management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"peripherals_management_restrict\",\n            $CFG_GLPI[\"peripherals_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='showdate$rand'>\" . __('End of fiscal year') . \"</label></td><td>\";\n        Html::showDateField(\"date_tax\", ['value'      => $CFG_GLPI[\"date_tax\"],\n            'maybeempty' => false,\n            'canedit'    => true,\n            'min'        => '',\n            'max'        => '',\n            'showyear'   => false,\n            'rand'       => $rand\n        ]);\n        echo \"</td><td><label for='dropdown_phones_management_restrict$rand'>\" . __('Restrict phone management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"phones_management_restrict\",\n            $CFG_GLPI[\"phones_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_use_autoname_by_entity$rand'>\" . __('Automatic fields (marked by *)') . \"</label></td><td>\";\n        $tab = [0 => __('Global'),\n            1 => __('By entity')\n        ];\n        Dropdown::showFromArray(\n            'use_autoname_by_entity',\n            $tab,\n            ['value' => $CFG_GLPI[\"use_autoname_by_entity\"], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_printers_management_restrict$rand'>\" . __('Restrict printer management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"printers_management_restrict\",\n            $CFG_GLPI[\"printers_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='devices_in_menu$rand'>\" . __('Devices displayed in menu') . \"</label></td>\";\n        echo \"<td>\";\n\n        $dd_params = [\n            'name'      => 'devices_in_menu',\n            'values'    => $CFG_GLPI['devices_in_menu'],\n            'display'   => true,\n            'rand'      => $rand,\n            'multiple'  => true,\n            'size'      => 3\n        ];\n\n        $item_devices_types = [];\n        foreach ($CFG_GLPI['itemdevices'] as $key => $itemtype) {\n            if ($item = getItemForItemtype($itemtype)) {\n                $item_devices_types[$itemtype] = $item->getTypeName();\n            } else {\n                unset($CFG_GLPI['itemdevices'][$key]);\n            }\n        }\n\n        Dropdown::showFromArray($dd_params['name'], $item_devices_types, $dd_params);\n\n        echo \"<input type='hidden' name='_update_devices_in_menu' value='1'>\";\n        echo \"</td>\";\n        echo \"</tr>\\n\";\n\n        echo \"</table>\";\n\n        echo \"<br><table class='tab_cadre_fixe'>\";\n        echo \"<tr>\";\n        echo \"<th colspan='4'>\" . __('Automatically update of the elements related to the computers');\n        echo \"</th><th colspan='2'>\" . __('Unit management') . \"</th></tr>\";\n\n        echo \"<tr><th>&nbsp;</th>\";\n        echo \"<th>\" . __('Alternate username') . \"</th>\";\n        echo \"<th>\" . User::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . Group::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . Location::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . __('Status') . \"</th>\";\n        echo \"</tr>\";\n\n        $fields = [\"contact\", \"user\", \"group\", \"location\"];\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('When connecting or updating') . \"</td>\";\n        $values = [\n            __('Do not copy'),\n            __('Copy'),\n        ];\n\n        foreach ($fields as $field) {\n            echo \"<td>\";\n            $fieldname = \"is_\" . $field . \"_autoupdate\";\n            Dropdown::showFromArray($fieldname, $values, ['value' => $CFG_GLPI[$fieldname]]);\n            echo \"</td>\";\n        }\n\n        echo \"<td>\";\n        State::dropdownBehaviour(\n            \"state_autoupdate_mode\",\n            __('Copy computer status'),\n            $CFG_GLPI[\"state_autoupdate_mode\"]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('When disconnecting') . \"</td>\";\n        $values = [\n            __('Do not delete'),\n            __('Clear'),\n        ];\n\n        foreach ($fields as $field) {\n            echo \"<td>\";\n            $fieldname = \"is_\" . $field . \"_autoclean\";\n            Dropdown::showFromArray($fieldname, $values, ['value' => $CFG_GLPI[$fieldname]]);\n            echo \"</td>\";\n        }\n\n        echo \"<td>\";\n        State::dropdownBehaviour(\n            \"state_autoclean_mode\",\n            __('Clear status'),\n            $CFG_GLPI[\"state_autoclean_mode\"]\n        );\n        echo \"</td></tr>\";\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='6' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for restrictions\n     *\n     * @return void\n     **/\n    public function showFormAuthentication()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return;\n        }\n\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<div class='card' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . __('Authentication') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'>\" . __('Automatically add users from an external authentication source') .\n           \"</td><td width='20%'>\";\n        Dropdown::showYesNo(\"is_users_auto_add\", $CFG_GLPI[\"is_users_auto_add\"]);\n        echo \"</td><td width='30%'>\" . __('Add a user without accreditation from a LDAP directory') .\n           \"</td><td width='20%'>\";\n        Dropdown::showYesNo(\"use_noright_users_add\", $CFG_GLPI[\"use_noright_users_add\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('Action when a user is deleted from the LDAP directory') . \"</td><td>\";\n        AuthLDAP::dropdownUserDeletedActions($CFG_GLPI[\"user_deleted_ldap\"]);\n        echo \"</td><td> \" . __('Action when a user is restored in the LDAP directory') . \"</td><td>\";\n        AuthLDAP::dropdownUserRestoredActions($CFG_GLPI[\"user_restored_ldap\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('GLPI server time zone') . \"</td><td>\";\n        Dropdown::showGMT(\"time_offset\", $CFG_GLPI[\"time_offset\"]);\n        echo \"</td><td></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update_auth' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') .\n           \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for slave DB\n     *\n     * @return void\n     **/\n    public function showFormDBSlave()\n    {\n        global $DB, $CFG_GLPI, $DBslave;\n\n        if (!Config::canUpdate()) {\n            return;\n        }\n\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<input type='hidden' name='_dbslave_status' value='1'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_2'><th colspan='4'>\" . _n('SQL replica', 'SQL replicas', Session::getPluralNumber()) .\n           \"</th></tr>\";\n        $DBslave = DBConnection::getDBSlaveConf();\n\n        if (is_array($DBslave->dbhost)) {\n            $host = implode(' ', $DBslave->dbhost);\n        } else {\n            $host = $DBslave->dbhost;\n        }\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('SQL server (MariaDB or MySQL)') . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbhost' size='40' value='$host'></td>\";\n        echo \"<td>\" . _n('Database', 'Databases', 1) . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbdefault' value='\" . $DBslave->dbdefault . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('SQL user') . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbuser' value='\" . $DBslave->dbuser . \"'></td>\";\n        echo \"<td>\" . __('SQL password') . \"</td>\";\n        echo \"<td><input type='password' name='_dbreplicate_dbpassword' value='\" .\n                 rawurldecode($DBslave->dbpassword) . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Use the replica for the search engine') . \"</td><td>\";\n        $values = [0 => __('Never'),\n            1 => __('If synced (all changes)'),\n            2 => __('If synced (current user changes)'),\n            3 => __('If synced or read-only account'),\n            4 => __('Always')\n        ];\n        Dropdown::showFromArray(\n            'use_slave_for_search',\n            $values,\n            ['value' => $CFG_GLPI[\"use_slave_for_search\"]]\n        );\n        echo \"<td colspan='2'>&nbsp;</td>\";\n        echo \"</tr>\";\n\n        if ($DBslave->connected && !$DB->isSlave()) {\n            echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n            DBConnection::showAllReplicateDelay();\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for External API\n     *\n     * @since 9.1\n     * @return void\n     **/\n    public function showFormAPI()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        echo \"<div class='center spaced' id='tabsbody'>\";\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('API') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='url_base_api'>\" . __('URL of the API') . \"</label></td>\";\n        echo \"<td colspan='3'><input type='url' name='url_base_api' id='url_base_api' value='\" . $CFG_GLPI[\"url_base_api\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_enable_api$rand'>\" . __(\"Enable Rest API\") . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api\", $CFG_GLPI[\"enable_api\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        if ($CFG_GLPI[\"enable_api\"]) {\n            echo \"<td colspan='2'>\";\n            $inline_doc_api = trim($CFG_GLPI['url_base_api'], '/') . \"/\";\n            echo \"<a href='$inline_doc_api'>\" . __(\"API inline Documentation\") . \"</a>\";\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Authentication') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_enable_api_login_credentials$rand'>\";\n        echo __(\"Enable login with credentials\") . \"</label>&nbsp;\";\n        Html::showToolTip(__(\"Allow to login to API and get a session token with user credentials\"));\n        echo \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api_login_credentials\", $CFG_GLPI[\"enable_api_login_credentials\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_enable_api_login_external_token$rand'>\";\n        echo __(\"Enable login with external token\") . \"</label>&nbsp;\";\n        Html::showToolTip(__(\"Allow to login to API and get a session token with user external token. See Remote access key in user Settings tab \"));\n        echo \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api_login_external_token\", $CFG_GLPI[\"enable_api_login_external_token\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"<br><br><br>\";\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><td>\";\n        echo \"<hr>\";\n        $buttons = [\n            'apiclient.form.php' => __('Add API client'),\n        ];\n        Html::displayTitle(\n            \"\",\n            self::getTypeName(Session::getPluralNumber()),\n            \"\",\n            $buttons\n        );\n        Search::show(\"APIClient\");\n        echo \"</td></tr>\";\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Print the config form for connections\n     *\n     * @return void\n     **/\n    public function showFormHelpdesk()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center spaced' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Assistance') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_time_step$rand'>\" . __('Step for the hours (minutes)') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showNumber('time_step', ['value' => $CFG_GLPI[\"time_step\"],\n            'min'   => 30,\n            'max'   => 60,\n            'step'  => 30,\n            'toadd' => [1  => 1,\n                5  => 5,\n                10 => 10,\n                15 => 15,\n                20 => 20\n            ],\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td width='30%'><label for='dropdown_planning_begin$rand'>\" . __('Limit of the schedules for planning') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showHours('planning_begin', ['value' => $CFG_GLPI[\"planning_begin\"], 'rand' => $rand]);\n        echo \"&nbsp;<label for='dropdown_planning_end$rand'>-></label>&nbsp;\";\n        Dropdown::showHours('planning_end', ['value' => $CFG_GLPI[\"planning_end\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_default_mailcollector_filesize_max$rand'>\" . __('Default file size limit imported by the mails receiver') . \"</label></td><td>\";\n        MailCollector::showMaxFilesize(\n            'default_mailcollector_filesize_max',\n            $CFG_GLPI[\"default_mailcollector_filesize_max\"],\n            $rand\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_documentcategories_id_forticket$rand'>\" . __('Default heading when adding a document to a ticket') . \"</label></td><td>\";\n        DocumentCategory::dropdown(['value' => $CFG_GLPI[\"documentcategories_id_forticket\"],\n            'name'  => \"documentcategories_id_forticket\",\n            'rand'  => $rand\n        ]);\n        echo \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_default_software_helpdesk_visible$rand'>\" . __('By default, a software may be linked to a ticket') . \"</label></td><td>\";\n        Dropdown::showYesNo(\n            \"default_software_helpdesk_visible\",\n            $CFG_GLPI[\"default_software_helpdesk_visible\"],\n            -1,\n            ['rand' => $rand]\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_keep_tickets_on_delete$rand'>\" . __('Keep tickets when purging hardware in the inventory') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"keep_tickets_on_delete\", $CFG_GLPI[\"keep_tickets_on_delete\"], -1, ['rand' => $rand]);\n        echo \"</td></tr><tr class='tab_bg_2'><td><label for='dropdown_use_check_pref$rand'>\" . __('Show personnal information in new ticket form (simplified interface)');\n        echo \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('use_check_pref', $CFG_GLPI['use_check_pref'], -1, ['rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_use_anonymous_helpdesk$rand'>\" . __('Allow anonymous ticket creation (helpdesk.receiver)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_anonymous_helpdesk\", $CFG_GLPI[\"use_anonymous_helpdesk\"], -1, ['rand' => $rand]);\n        echo \"</td></tr><tr class='tab_bg_2'><td><label for='dropdown_use_anonymous_followups$rand'>\" . __('Allow anonymous followups (receiver)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_anonymous_followups\", $CFG_GLPI[\"use_anonymous_followups\"], -1, ['rand' => $rand]);\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        echo \"<tr>\";\n        echo \"<td>\";\n        echo \"<label for='dropdown_planning_work_days$rand'>\" . __('Planning work days') . \"</label>\";\n        echo \"</td>\";\n        echo \"<td colspan='3'>\";\n        Dropdown::showFromArray(\n            \"planning_work_days\",\n            [\n                1 => __(\"Monday\"),\n                2 => __(\"Tuesday\"),\n                3 => __(\"Wednesday\"),\n                4 => __(\"Thursday\"),\n                5 => __(\"Friday\"),\n                6 => __(\"Saturday\"),\n                0 => __(\"Sunday\"),\n            ],\n            [\n                'values'   => $CFG_GLPI[\"planning_work_days\"],\n                'multiple' => true,\n                'rand'     => $rand,\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n        echo \"</table>\";\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='7'>\" . __('Matrix of calculus for priority');\n        echo \"<input type='hidden' name='_matrix' value='1'></th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td class='b right' colspan='2'>\" . __('Impact') . \"</td>\";\n\n        $isimpact = [];\n        for ($impact = 5; $impact >= 1; $impact--) {\n            echo \"<td class='center'>\" . Ticket::getImpactName($impact) . '<br>';\n\n            if ($impact == 3) {\n                $isimpact[3] = 1;\n                echo \"<input type='hidden' name='_impact_3' value='1'>\";\n            } else {\n                $isimpact[$impact] = (($CFG_GLPI['impact_mask'] & (1 << $impact)) > 0);\n                Dropdown::showYesNo(\"_impact_${impact}\", $isimpact[$impact]);\n            }\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='b' colspan='2'>\" . __('Urgency') . \"</td>\";\n\n        for ($impact = 5; $impact >= 1; $impact--) {\n            echo \"<td>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        $isurgency = [];\n        for ($urgency = 5; $urgency >= 1; $urgency--) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . Ticket::getUrgencyName($urgency) . \"&nbsp;</td>\";\n            echo \"<td>\";\n\n            if ($urgency == 3) {\n                $isurgency[3] = 1;\n                echo \"<input type='hidden' name='_urgency_3' value='1'>\";\n            } else {\n                $isurgency[$urgency] = (($CFG_GLPI['urgency_mask'] & (1 << $urgency)) > 0);\n                Dropdown::showYesNo(\"_urgency_${urgency}\", $isurgency[$urgency]);\n            }\n            echo \"</td>\";\n\n            for ($impact = 5; $impact >= 1; $impact--) {\n                $pri = round(($urgency + $impact) / 2);\n\n                if (isset($CFG_GLPI['priority_matrix'][$urgency][$impact])) {\n                    $pri = $CFG_GLPI['priority_matrix'][$urgency][$impact];\n                }\n\n                if ($isurgency[$urgency] && $isimpact[$impact]) {\n                    $bgcolor = $_SESSION[\"glpipriority_$pri\"];\n                    echo \"<td class='center' bgcolor='$bgcolor'>\";\n                    Ticket::dropdownPriority(['value' => $pri,\n                        'name'  => \"_matrix_${urgency}_${impact}\"\n                    ]);\n                    echo \"</td>\";\n                } else {\n                    echo \"<td><input type='hidden' name='_matrix_${urgency}_${impact}' value='$pri'>\n                     </td>\";\n                }\n            }\n            echo \"</tr>\\n\";\n        }\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='7' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for default user prefs\n     *\n     * @param $data array containing datas\n     * (CFG_GLPI for global config / glpi_users fields for user prefs)\n     *\n     * @return void\n     **/\n    public function showFormUserPrefs($data = [])\n    {\n        global $CFG_GLPI, $DB;\n\n        $oncentral = (Session::getCurrentInterface() == \"central\");\n        $userpref  = false;\n        $url       = Toolbox::getItemTypeFormURL(__CLASS__);\n        $rand      = mt_rand();\n\n        $canedit = Config::canUpdate();\n        $canedituser = Session::haveRight('personalization', UPDATE);\n        if (array_key_exists('last_login', $data)) {\n            $userpref = true;\n            if ($data[\"id\"] === Session::getLoginUserID()) {\n                $url  = $CFG_GLPI['root_doc'] . \"/front/preference.php\";\n            } else {\n                $url  = User::getFormURL();\n            }\n        }\n\n        if ((!$userpref && $canedit) || ($userpref && $canedituser)) {\n            echo \"<form name='form' action='$url' method='post' data-track-changes='true'>\";\n        }\n\n       // Only set id for user prefs\n        if ($userpref) {\n            echo \"<input type='hidden' name='id' value='\" . $data['id'] . \"'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Personalization') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_language$rand'>\" . ($userpref ? __('Language') : __('Default language')) . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        if (\n            Config::canUpdate()\n            || !GLPI_DEMO_MODE\n        ) {\n            Dropdown::showLanguages(\"language\", ['value' => $data[\"language\"], 'rand' => $rand]);\n        } else {\n            echo \"&nbsp;\";\n        }\n\n        echo \"<td width='30%'><label for='dropdown_date_format$rand'>\" . __('Date format') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showFromArray('date_format', Toolbox::phpDateFormats(), ['value' => $data[\"date_format\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_names_format$rand'>\" . __('Display order of surnames firstnames') . \"</label></td><td>\";\n        $values = [User::REALNAME_BEFORE  => __('Surname, First name'),\n            User::FIRSTNAME_BEFORE => __('First name, Surname')\n        ];\n        Dropdown::showFromArray('names_format', $values, ['value' => $data[\"names_format\"], 'rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_number_format$rand'>\" . __('Number format') . \"</label></td>\";\n        $values = [0 => '1 234.56',\n            1 => '1,234.56',\n            2 => '1 234,56',\n            3 => '1234.56',\n            4 => '1234,56'\n        ];\n        echo \"<td>\";\n        Dropdown::showFromArray('number_format', $values, ['value' => $data[\"number_format\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_list_limit$rand'>\" . __('Results to display by page') . \"</label></td><td>\";\n       // Limit using global config\n        $value = (($data['list_limit'] < $CFG_GLPI['list_limit_max'])\n                ? $data['list_limit'] : $CFG_GLPI['list_limit_max']);\n        Dropdown::showNumber('list_limit', ['value' => $value,\n            'min'   => 5,\n            'max'   => $CFG_GLPI['list_limit_max'],\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_backcreated$rand'>\" . __('Go to created item after creation') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"backcreated\", $data[\"backcreated\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_use_flat_dropdowntree$rand'>\" . __('Display the complete name in tree dropdowns') . \"</label></td><td>\";\n            Dropdown::showYesNo('use_flat_dropdowntree', $data[\"use_flat_dropdowntree\"], -1, ['rand' => $rand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n\n        if (\n            !$userpref\n            || ($CFG_GLPI['show_count_on_tabs'] != -1)\n        ) {\n            echo \"<td><label for='dropdown_show_count_on_tabs$rand'>\" . __('Display counters') . \"</label></td><td>\";\n\n            $values = [0 => __('No'),\n                1 => __('Yes')\n            ];\n\n            if (!$userpref) {\n                $values[-1] = __('Never');\n            }\n            Dropdown::showFromArray(\n                'show_count_on_tabs',\n                $values,\n                ['value' => $data[\"show_count_on_tabs\"], 'rand' => $rand]\n            );\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_is_ids_visible$rand'>\" . __('Show GLPI ID') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"is_ids_visible\", $data[\"is_ids_visible\"], -1, ['rand' => $rand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'></td>\";\n        }\n\n        echo \"<td><label for='dropdown_keep_devices_when_purging_item$rand'>\" . __('Keep devices when purging an item') . \"</label></td><td>\";\n        Dropdown::showYesNo(\n            'keep_devices_when_purging_item',\n            $data['keep_devices_when_purging_item'],\n            -1,\n            ['rand' => $rand]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_notification_to_myself$rand'>\" . __('Notifications for my changes') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"notification_to_myself\", $data[\"notification_to_myself\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_display_count_on_home$rand'>\" . __('Results to display on home page') . \"</label></td><td>\";\n            Dropdown::showNumber(\n                'display_count_on_home',\n                ['value' => $data['display_count_on_home'],\n                    'min'   => 0,\n                    'max'   => 30,\n                    'rand'  => $rand\n                ]\n            );\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_pdffont$rand'>\" . __('PDF export font') . \"</label></td><td>\";\n        Dropdown::showFromArray(\n            \"pdffont\",\n            GLPIPDF::getFontList(),\n            ['value' => $data[\"pdffont\"],\n                'width' => 200,\n                'rand'  => $rand\n            ]\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_csv_delimiter$rand'>\" . __('CSV delimiter') . \"</label></td><td>\";\n        $values = [';' => ';',\n            ',' => ','\n        ];\n        Dropdown::showFromArray('csv_delimiter', $values, ['value' => $data[\"csv_delimiter\"], 'rand' => $rand]);\n\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='theme-selector'>\" . __(\"Color palette\") . \"</label></td><td>\";\n        echo Html::select(\n            'palette',\n            $this->getPalettes(),\n            [\n                'id'        => 'theme-selector',\n                'selected'  => $data['palette']\n            ]\n        );\n        echo Html::scriptBlock(\"\n         function formatThemes(theme) {\n             if (!theme.id) {\n                return theme.text;\n             }\n\n             return $('<span></span>').html('<img src=\\'../css/palettes/previews/' + theme.text.toLowerCase() + '.png\\'/>'\n                      + '&nbsp;' + theme.text);\n         }\n         $(\\\"#theme-selector\\\").select2({\n             templateResult: formatThemes,\n             templateSelection: formatThemes,\n             width: '100%',\n             escapeMarkup: function(m) { return m; }\n         });\n         $('label[for=theme-selector]').on('click', function(){ $('#theme-selector').select2('open'); });\n      \");\n        echo \"</td>\";\n        echo \"<td>\";\n\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_page_layout$rand'>\" . __('Page layout') . \"</label></td>\";\n        echo \"<td>\";\n\n        $global_layout_options = [\n            'horizontal' => __('Horizontal (menu in header)'),\n            'vertical'   => __('Vertical (menu in sidebar)'),\n        ];\n        echo Html::select(\n            'page_layout',\n            $global_layout_options,\n            [\n                'id'        => 'global-layout-selector',\n                'selected'  => $data['page_layout']\n            ]\n        );\n\n        echo Html::scriptBlock(\"\n         function formatGlobalLayout(layout) {\n             if (!layout.id) {\n                return layout.text;\n             }\n             return $('<span></span>').html('<img src=\\'../pics/layout/global_layout_' + layout.id.toLowerCase() + '.png\\'/>'\n                      + '&nbsp;' + layout.text);\n         }\n         $('#global-layout-selector').select2({\n             dropdownAutoWidth: true,\n             templateResult: formatGlobalLayout,\n             templateSelection: formatGlobalLayout\n         });\n         $('label[for=global-layout-selector]').on('click', function(){\n            $('#global-layout-selector').select2('open');\n         });\n      \");\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_richtext_layout$rand'>\" . __('Rich text field layout') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showFromArray(\n            'richtext_layout',\n            [\n                'inline'  => __('Inline (no toolbars)'),\n                'classic' => __('Classic (toolbar on top)'),\n            ],\n            [\n                'value' => $data[\"richtext_layout\"],\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_highcontrast_css$rand'>\" . __('Enable high contrast') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('highcontrast_css', $data['highcontrast_css'], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_timezone$rand'>\" . __('Timezone') . \"</label></td>\";\n        echo \"<td>\";\n        if ($DB->use_timezones) {\n            $timezones = $DB->getTimezones();\n            Dropdown::showFromArray(\n                'timezone',\n                $timezones,\n                [\n                    'value'                 => $data[\"timezone\"] ?? \"\",\n                    'display_emptychoice'   => true,\n                    'emptylabel'            => __('Use server configuration')\n                ]\n            );\n        } else {\n            echo __('Timezone usage has not been activated.')\n            . ' '\n            . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n        }\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_default_central_tab$rand'>\" . __('Default central tab') . \"</label></td>\";\n        echo \"<td>\";\n        $central = new Central();\n        Dropdown::showFromArray('default_central_tab', $central->getTabNameForItem($central, 0), ['value' => $data['default_central_tab'], 'rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_timeline_order$rand'>\" . __('Timeline order') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showFromArray('timeline_order', [\n            CommonITILObject::TIMELINE_ORDER_NATURAL => __('Natural order (old items on top, recent on bottom)'),\n            CommonITILObject::TIMELINE_ORDER_REVERSE => __('Reverse order (old items on bottom, recent on top)'),\n        ], [\n            'value' => $data['timeline_order'],\n            'rand' => $rand\n        ]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        if ($oncentral) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Assistance') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td><label for='dropdown_followup_private$rand'>\" . __('Private followups by default') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"followup_private\", $data[\"followup_private\"], -1, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_show_jobs_at_login$rand'>\" . __('Show new tickets on the home page') . \"</label></td><td>\";\n            if (\n                Session::haveRightsOr(\n                    \"ticket\",\n                    [Ticket::READMY, Ticket::READALL, Ticket::READASSIGN]\n                )\n            ) {\n                Dropdown::showYesNo(\"show_jobs_at_login\", $data[\"show_jobs_at_login\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \" </td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_task_private$rand'>\" . __('Private tasks by default') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"task_private\", $data[\"task_private\"], -1, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_default_requesttypes_id$rand'>\" . __('Request sources by default') . \"</label></td><td>\";\n            RequestType::dropdown([\n                'value'      => $data[\"default_requesttypes_id\"],\n                'name'       => \"default_requesttypes_id\",\n                'condition'  => ['is_active' => 1, 'is_ticketheader' => 1],\n                'rand'       => $rand\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_task_state$rand'>\" . __('Tasks state by default') . \"</label></td><td>\";\n            Planning::dropdownState(\"task_state\", $data[\"task_state\"], true, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_refresh_views$rand'>\" . __('Automatically refresh data (tickets list, project kanban) in minutes.') . \"</label></td><td>\";\n            Dropdown::showNumber('refresh_views', ['value' => $data[\"refresh_views\"],\n                'min'   => 1,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [0 => __('Never')],\n                'rand'  => $rand\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_set_default_tech$rand'>\" . __('Pre-select me as a technician when creating a ticket') .\n              \"</label></td><td>\";\n            if (!$userpref || Session::haveRight('ticket', Ticket::OWN)) {\n                Dropdown::showYesNo(\"set_default_tech\", $data[\"set_default_tech\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \"</td><td><label for='dropdown_set_default_requester$rand'>\" . __('Pre-select me as a requester when creating a ticket') . \"</label></td><td>\";\n            if (!$userpref || Session::haveRight('ticket', CREATE)) {\n                Dropdown::showYesNo(\"set_default_requester\", $data[\"set_default_requester\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Priority colors') . \"</td>\";\n            echo \"<td colspan='3'>\";\n\n            echo \"<table><tr>\";\n            echo \"<td><label for='dropdown_priority_1$rand'>1</label>&nbsp;\";\n            Html::showColorField('priority_1', ['value' => $data[\"priority_1\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_2$rand'>2</label>&nbsp;\";\n            Html::showColorField('priority_2', ['value' => $data[\"priority_2\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_3$rand'>3</label>&nbsp;\";\n            Html::showColorField('priority_3', ['value' => $data[\"priority_3\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_4$rand'>4</label>&nbsp;\";\n            Html::showColorField('priority_4', ['value' => $data[\"priority_4\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_5$rand'>5</label>&nbsp;\";\n            Html::showColorField('priority_5', ['value' => $data[\"priority_5\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_6$rand'>6</label>&nbsp;\";\n            Html::showColorField('priority_6', ['value' => $data[\"priority_6\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"</tr></table>\";\n\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('Due date progression') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\" .\n           \"<td>\" . __('OK state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedateok_color', ['value' => $data[\"duedateok_color\"]]);\n        echo \"</td><td colspan='2'>&nbsp;</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Warning state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedatewarning_color', ['value' => $data[\"duedatewarning_color\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('Warning state threshold') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"duedatewarning_less\", ['value' => $data['duedatewarning_less']]);\n        $elements = ['%'     => '%',\n            'hours' => _n('Hour', 'Hours', Session::getPluralNumber()),\n            'days'  => _n('Day', 'Days', Session::getPluralNumber())\n        ];\n        echo \"&nbsp;\";\n        Dropdown::showFromArray(\n            \"duedatewarning_unit\",\n            $elements,\n            ['value' => $data['duedatewarning_unit']]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\" .\n           \"<td>\" . __('Critical state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedatecritical_color', ['value' => $data[\"duedatecritical_color\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('Critical state threshold') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"duedatecritical_less\", ['value' => $data['duedatecritical_less']]);\n        echo \"&nbsp;\";\n        $elements = ['%'    => '%',\n            'hours' => _n('Hour', 'Hours', Session::getPluralNumber()),\n            'days'  => _n('Day', 'Days', Session::getPluralNumber())\n        ];\n        Dropdown::showFromArray(\n            \"duedatecritical_unit\",\n            $elements,\n            ['value' => $data['duedatecritical_unit']]\n        );\n        echo \"</td></tr>\";\n\n        if ($oncentral && $CFG_GLPI[\"lock_use_lock_item\"]) {\n            echo \"<tr class='tab_bg_1'><th colspan='4' class='center b'>\" . __('Item locks') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Auto-lock Mode') . \"</td><td>\";\n            Dropdown::showYesNo(\"lock_autolock_mode\", $data[\"lock_autolock_mode\"]);\n            echo \"</td><td>\" . __('Direct Notification (requester for unlock will be the notification sender)') .\n              \"</td><td>\";\n            Dropdown::showYesNo(\"lock_directunlock_notification\", $data[\"lock_directunlock_notification\"]);\n            echo \"</td></tr>\";\n        }\n\n        if (Grid::canViewOneDashboard()) {\n            echo \"<tr class='tab_bg_1'><th colspan='4' class='center b'>\" . __('Dashboards') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Default for central') . \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_central\", [\n                'value' => $data['default_dashboard_central'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td><td>\" . __('Default for Assets') .\n             \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_assets\", [\n                'value' => $data['default_dashboard_assets'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Default for Assistance') . \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_helpdesk\", [\n                'value' => $data['default_dashboard_helpdesk'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td><td>\" . __('Default for tickets (mini dashboard)') .\n             \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_mini_ticket\", [\n                'value' => $data['default_dashboard_mini_ticket'],\n                'display_emptychoice' => true,\n                'context'   => 'mini_core',\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        if ((!$userpref && $canedit) || ($userpref && $canedituser)) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='4' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Check if the \"use_password_security\" parameter is enabled\n     *\n     * @return bool\n     */\n    public static function arePasswordSecurityChecksEnabled(): bool\n    {\n        global $CFG_GLPI;\n\n        return $CFG_GLPI[\"use_password_security\"];\n    }\n\n    /**\n     * Display security checks on password\n     *\n     * @param $field string id of the field containing password to check (default 'password')\n     *\n     * @since 0.84\n     **/\n    public static function displayPasswordSecurityChecks($field = 'password')\n    {\n        global $CFG_GLPI;\n\n        $needs = [];\n\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            printf(\n                __('%1$s: %2$s'),\n                __('Password minimum length'),\n                \"<span id='password_min_length' class='red'>\" . $CFG_GLPI['password_min_length'] .\n                \"</span>\"\n            );\n        }\n\n        echo \"<script type='text/javascript' >\\n\";\n        echo \"function passwordCheck() {\\n\";\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            echo \"var pwd = \" . Html::jsGetElementbyID($field) . \";\";\n            echo \"if (pwd.val().length < \" . $CFG_GLPI['password_min_length'] . \") {\n               \" . Html::jsGetElementByID('password_min_length') . \".addClass('red');\n               \" . Html::jsGetElementByID('password_min_length') . \".removeClass('green');\n         } else {\n               \" . Html::jsGetElementByID('password_min_length') . \".addClass('green');\n               \" . Html::jsGetElementByID('password_min_length') . \".removeClass('red');\n         }\";\n            if ($CFG_GLPI[\"password_need_number\"]) {\n                $needs[] = \"<span id='password_need_number' class='red'>\" . __('Digit') . \"</span>\";\n                echo \"var numberRegex = new RegExp('[0-9]', 'g');\n            if (false == numberRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_number') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_number') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_number') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_number') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_letter\"]) {\n                $needs[] = \"<span id='password_need_letter' class='red'>\" . __('Lowercase') . \"</span>\";\n                echo \"var letterRegex = new RegExp('[a-z]', 'g');\n            if (false == letterRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_letter') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_letter') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_letter') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_letter') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_caps\"]) {\n                $needs[] = \"<span id='password_need_caps' class='red'>\" . __('Uppercase') . \"</span>\";\n                echo \"var capsRegex = new RegExp('[A-Z]', 'g');\n            if (false == capsRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_caps') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_caps') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_caps') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_caps') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_symbol\"]) {\n                $needs[] = \"<span id='password_need_symbol' class='red'>\" . __('Symbol') . \"</span>\";\n                echo \"var capsRegex = new RegExp('[^a-zA-Z0-9_]', 'g');\n            if (false == capsRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".removeClass('red');\n            }\";\n            }\n        }\n        echo \"}\";\n        echo '</script>';\n        if (count($needs)) {\n            echo \"<br>\";\n            printf(__('%1$s: %2$s'), __('Password must contains'), implode(', ', $needs));\n        }\n    }\n\n\n    /**\n     * Validate password based on security rules\n     *\n     * @since 0.84\n     *\n     * @param $password  string   password to validate\n     * @param $display   boolean  display errors messages? (true by default)\n     *\n     * @throws PasswordTooWeakException when $display is false and the password does not matches the requirements\n     *\n     * @return boolean is password valid?\n     **/\n    public static function validatePassword($password, $display = true)\n    {\n        global $CFG_GLPI;\n\n        $ok = true;\n        $exception = new \\Glpi\\Exception\\PasswordTooWeakException();\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            if (Toolbox::strlen($password) < $CFG_GLPI['password_min_length']) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(__('Password too short!'), false, ERROR);\n                } else {\n                    $exception->addMessage(__('Password too short!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_number\"]\n                && !preg_match(\"/[0-9]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a digit!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a digit!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_letter\"]\n                && !preg_match(\"/[a-z]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a lowercase letter!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a lowercase letter!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_caps\"]\n                && !preg_match(\"/[A-Z]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a uppercase letter!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a uppercase letter!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_symbol\"]\n                && !preg_match(\"/\\W+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a symbol!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a symbol!'));\n                }\n            }\n        }\n        if (!$ok && !$display) {\n            throw $exception;\n        }\n        return $ok;\n    }\n\n\n    /**\n     * Display a report about system performance\n     * - opcode cache (opcache)\n     * - core cache\n     * - translations cache\n     *\n     * @since 9.1\n     **/\n    public function showPerformanceInformations()\n    {\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('PHP opcode cache') . \"</th></tr>\";\n        $ext = 'Zend OPcache';\n        if (extension_loaded($ext) && ($info = opcache_get_status(false))) {\n            $msg = sprintf(__s('%s extension is installed'), $ext);\n            echo \"<tr><td>\" . sprintf(__('The \"%s\" extension is installed'), $ext) . \"</td>\n               <td>\" . phpversion($ext) . \"</td>\n               <td></td>\n               <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'><span class='sr-only'>$msg</span></td></tr>\";\n\n           // Memory\n            $used = $info['memory_usage']['used_memory'];\n            $free = $info['memory_usage']['free_memory'];\n            $rate = round(100.0 * $used / ($used + $free));\n            $max  = Toolbox::getSize($used + $free);\n            $used = Toolbox::getSize($used);\n            echo \"<tr><td>\" . _n('Memory', 'Memories', 1) . \"</td>\n               <td>\" . sprintf(__('%1$s / %2$s'), $used, $max) . \"</td><td>\";\n            Html::displayProgressBar('100', $rate, ['simple'       => true,\n                'forcepadding' => false\n            ]);\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s memory usage is too low or too high'), $ext);\n            if ($rate > 5 && $rate < 75) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s memory usage is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n           // Hits\n            $hits = $info['opcache_statistics']['hits'];\n            $miss = $info['opcache_statistics']['misses'];\n            $max  = $hits + $miss;\n            $rate = round($info['opcache_statistics']['opcache_hit_rate']);\n            echo \"<tr><td>\" . __('Hits rate') . \"</td>\n               <td>\" . sprintf(__('%1$s / %2$s'), $hits, $max) . \"</td><td>\";\n            Html::displayProgressBar('100', $rate, ['simple'       => true,\n                'forcepadding' => false\n            ]);\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s hits rate is low'), $ext);\n            if ($rate > 90) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s hits rate is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n           // Restart (1 seems ok, can happen)\n            $max = $info['opcache_statistics']['oom_restarts'];\n            echo \"<tr><td>\" . __('Out of memory restart') . \"</td>\n               <td>$max</td><td>\";\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s restart rate is too high'), $ext);\n            if ($max < 2) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s restart rate is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                echo \"<tr><td></td><td colspan='3'>\";\n                echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" class=\"d-inline\">';\n                echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n                echo Html::hidden('reset_opcache', ['value' => 1]);\n                echo '<button type=\"submit\" class=\"btn btn-primary\">';\n                echo __('Reset');\n                echo '</button>';\n                echo '</form>';\n                echo \"</td></tr>\";\n            }\n        } else {\n            $msg = sprintf(__s('%s extension is not present'), $ext);\n            echo \"<tr><td colspan='3'>\" . sprintf(__('Installing and enabling the \"%s\" extension may improve GLPI performance'), $ext) . \"</td>\n               <td class='icons_block'><i class='fa fa-info-circle missing' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('User data cache') . \"</th></tr>\";\n        echo '<tr><td class=\"b\">' . __('You can use \"php bin/console cache:configure\" command to configure cache system.') . '</td></tr>';\n        $cache_manager = new CacheManager();\n        $ext = strtolower(get_class($cache_manager->getCacheStorageAdapter(CacheManager::CONTEXT_CORE)));\n        $ext = preg_replace('/^.*\\\\\\([a-z]+?)(?:adapter)?$/', '$1', $ext);\n        if (in_array($ext, ['memcached', 'redis'])) {\n            $msg = sprintf(__s('The \"%s\" cache extension is installed'), $ext);\n        } else {\n            $msg = sprintf(__s('\"%s\" cache system is used'), $ext);\n        }\n        echo \"<tr><td>\" . $msg . \"</td>\n            <td>\" . phpversion($ext) . \"</td>\n            <td></td>\n            <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            echo \"<tr><td></td><td colspan='3'>\";\n            echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" class=\"d-inline\">';\n            echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n            echo Html::hidden('reset_core_cache', ['value' => 1]);\n            echo '<button type=\"submit\" class=\"btn btn-primary\">';\n            echo __('Reset');\n            echo '</button>';\n            echo '</form>';\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('Translation cache') . \"</th></tr>\";\n        $adapter_class = strtolower(get_class($cache_manager->getCacheStorageAdapter(CacheManager::CONTEXT_TRANSLATIONS)));\n        $adapter = preg_replace('/^.*\\\\\\([a-z]+?)(?:adapter)?$/', '$1', $adapter_class);\n        $msg = sprintf(__s('\"%s\" cache system is used'), $adapter);\n        echo \"<tr><td colspan='3'>\" . $msg . \"</td>\n            <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            echo \"<tr><td></td><td colspan='3'>\";\n            echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" style=\"d-inline\">';\n            echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n            echo Html::hidden('reset_translation_cache', ['value' => 1]);\n            echo '<button type=\"submit\" class=\"btn btn-primary\">';\n            echo __('Reset');\n            echo '</button>';\n            echo '</form>';\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n    }\n\n    public static function showSystemInfoTable($params = [])\n    {\n        global $CFG_GLPI, $DB;\n\n        $p = [\n            'word_wrap_width' => 128\n        ];\n        $p = array_replace($p, $params);\n\n        echo \"<table id='system-info-table' class='tab_cadre_fixe'>\";\n        echo \"<tr><th class='section-header'>\" . __('Information about system installation and configuration') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td></td></tr>\";\n\n        $oldlang = $_SESSION['glpilanguage'];\n       // Keep this, for some function call which still use translation (ex showAllReplicateDelay)\n        Session::loadLanguage('en_GB');\n\n       // No need to translate, this part always display in english (for copy/paste to forum)\n\n       // Try to compute a better version for .git\n        $ver = GLPI_VERSION;\n        if (is_dir(GLPI_ROOT . \"/.git\")) {\n            $dir = getcwd();\n            chdir(GLPI_ROOT);\n            $returnCode = 1;\n            /** @var array $output */\n            $gitrev = @exec('git show --format=\"%h\" --no-patch 2>&1', $output, $returnCode);\n            $gitbranch = '';\n            if (!$returnCode) {\n                $gitbranch = @exec('git symbolic-ref --quiet --short HEAD || git rev-parse --short HEAD 2>&1', $output, $returnCode);\n            }\n            chdir($dir);\n            if (!$returnCode) {\n                $ver .= '-git-' . $gitbranch . '-' . $gitrev;\n            }\n        }\n\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\";\n        echo \"GLPI $ver (\" . $CFG_GLPI['root_doc'] . \" => \" . GLPI_ROOT . \")\\n\";\n        echo \"Installation mode: \" . GLPI_INSTALL_MODE . \"\\n\";\n        echo \"Current language:\" . $oldlang . \"\\n\";\n        echo \"\\n</pre></td></tr>\";\n\n        echo \"<tr><th class='section-header'>Server</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n        echo wordwrap(\"Operating system: \" . php_uname() . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n        $exts = get_loaded_extensions();\n        sort($exts);\n        echo wordwrap(\n            \"PHP \" . phpversion() . ' ' . php_sapi_name() . \" (\" . implode(', ', $exts) . \")\\n\",\n            $p['word_wrap_width'],\n            \"\\n\\t\"\n        );\n        $msg = \"Setup: \";\n\n        foreach (\n            ['max_execution_time', 'memory_limit', 'post_max_size', 'safe_mode',\n                'session.save_handler', 'upload_max_filesize'\n            ] as $key\n        ) {\n            $msg .= $key . '=\"' . ini_get($key) . '\" ';\n        }\n        echo wordwrap($msg . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n\n        $msg = 'Software: ';\n        if (isset($_SERVER[\"SERVER_SOFTWARE\"])) {\n            $msg .= $_SERVER[\"SERVER_SOFTWARE\"];\n        }\n        if (isset($_SERVER[\"SERVER_SIGNATURE\"])) {\n            $msg .= ' (' . Toolbox::stripTags($_SERVER[\"SERVER_SIGNATURE\"]) . ')';\n        }\n        echo wordwrap($msg . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n\n        if (isset($_SERVER[\"HTTP_USER_AGENT\"])) {\n            echo \"\\t\" . Sanitizer::encodeHtmlSpecialChars($_SERVER[\"HTTP_USER_AGENT\"]) . \"\\n\";\n        }\n\n        foreach ($DB->getInfo() as $key => $val) {\n            echo \"$key: $val\\n\\t\";\n        }\n        echo \"\\n\";\n\n        $core_requirements = (new RequirementsManager())->getCoreRequirementList($DB);\n       /* @var \\Glpi\\System\\Requirement\\RequirementInterface $requirement */\n        foreach ($core_requirements as $requirement) {\n            if ($requirement->isOutOfContext()) {\n                continue; // skip requirement if not relevant\n            }\n\n            $img = $requirement->isValidated()\n            ? 'ok'\n            : ($requirement->isOptional() ? 'warning' : 'ko');\n            $messages = Html::entities_deep($requirement->getValidationMessages());\n\n            echo '<img src=\"' . $CFG_GLPI['root_doc'] . '/pics/' . $img . '_min.png\"'\n            . ' alt=\"' . implode(' ', $messages) . '\" title=\"' . implode(' ', $messages) . '\" />';\n            echo implode(\"\\n\", $messages);\n\n            echo \"\\n\";\n        }\n\n        echo \"\\n</pre></td></tr>\";\n\n        echo \"<tr><th class='section-header'>GLPI constants</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n        foreach (get_defined_constants() as $constant_name => $constant_value) {\n            if (preg_match('/^GLPI_/', $constant_name)) {\n                echo $constant_name . ': ' . $constant_value . \"\\n\";\n            }\n        }\n        echo \"\\n</pre></td></tr>\";\n\n        self::showLibrariesInformation();\n\n        foreach ($CFG_GLPI[\"systeminformations_types\"] as $type) {\n            $tmp = new $type();\n            $tmp->showSystemInformations($p['word_wrap_width']);\n        }\n\n        Session::loadLanguage($oldlang);\n\n        $files = array_merge(\n            glob(GLPI_LOCAL_I18N_DIR . \"/**/*.php\"),\n            glob(GLPI_LOCAL_I18N_DIR . \"/**/*.mo\")\n        );\n        sort($files);\n        if (count($files)) {\n            echo \"<tr><th class='section-header'>Locales overrides</th></tr>\\n\";\n            echo \"<tr class='tab_bg_1'><td>\\n\";\n            foreach ($files as $file) {\n                echo \"$file<br/>\\n\";\n            }\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><th>\" . __('To copy/paste in your support request') . \"</th></tr>\\n\";\n\n        echo \"</table>\";\n    }\n\n    /**\n     * Display a HTML report about systeme information / configuration\n     **/\n    public function showSystemInformations()\n    {\n        global $DB, $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $rand = mt_rand();\n\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . __('General setup') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_event_loglevel$rand'>\" . __('Log Level') . \"</label></td><td>\";\n\n        $values = [\n            1 => __('1- Critical (login error only)'),\n            2 => __('2- Severe (not used)'),\n            3 => __('3- Important (successful logins)'),\n            4 => __('4- Notices (add, delete, tracking)'),\n            5 => __('5- Complete (all)'),\n        ];\n\n        Dropdown::showFromArray(\n            'event_loglevel',\n            $values,\n            ['value' => $CFG_GLPI[\"event_loglevel\"], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_cron_limit$rand'>\" . __('Maximal number of automatic actions (run by CLI)') . \"</label></td><td>\";\n        Dropdown::showNumber('cron_limit', ['value' => $CFG_GLPI[\"cron_limit\"],\n            'min'   => 1,\n            'max'   => 30,\n            'rand'  => $rand\n        ]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_use_log_in_files$rand'>\" . __('Logs in files (SQL, email, automatic action...)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_log_in_files\", $CFG_GLPI[\"use_log_in_files\"], -1, ['rand' => $rand]);\n        echo \"</td><td><label for='dropdown__dbslave_status$rand'>\" . _n('SQL replica', 'SQL replicas', 1) . \"</label></td><td>\";\n        $active = DBConnection::isDBSlaveActive();\n        Dropdown::showYesNo(\"_dbslave_status\", $active, -1, ['rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center b'>\" . __('Maintenance mode');\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_maintenance_mode$rand'>\" . __('Maintenance mode') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"maintenance_mode\", $CFG_GLPI[\"maintenance_mode\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n       //TRANS: Proxy port\n        echo \"<td><label for='maintenance_text'>\" . __('Maintenance text') . \"</label></td>\";\n        echo \"<td>\";\n        echo \"<textarea class='form-control' name='maintenance_text' id='maintenance_text'>\" . $CFG_GLPI[\"maintenance_text\"];\n        echo \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center b'>\" . __('Proxy configuration for upgrade check');\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='proxy_name'>\" . __('Server') . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_name' id='proxy_name' value='\" . $CFG_GLPI[\"proxy_name\"] . \"' class='form-control'></td>\";\n       //TRANS: Proxy port\n        echo \"<td><label for='proxy_port'>\" . _n('Port', 'Ports', 1) . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_port' id='proxy_port' value='\" . $CFG_GLPI[\"proxy_port\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='proxy_user'>\" . __('Login') . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_user' id='proxy_user' value='\" . $CFG_GLPI[\"proxy_user\"] . \"' class='form-control'></td>\";\n        echo \"<td><label for='proxy_passwd'>\" . __('Password') . \"</label></td>\";\n        echo \"<td><input type='password' name='proxy_passwd' id='proxy_passwd' value='' autocomplete='new-password' class='form-control'>\";\n        echo \"<br><input type='checkbox' name='_blank_proxy_passwd' id='_blank_proxy_passwd'><label for='_blank_proxy_passwd'>\" . __('Clear') . \"</label>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n\n        echo \"<p>\" . Telemetry::getViewLink() . \"</p>\";\n\n        $copy_msg = __('Copy system information');\n        $copy_onclick = <<<JS\n      copyTextToClipboard(tableToDetails('#system-info-table'));\n      flashIconButton(this, 'btn btn-success', 'fas fa-check', 1500);\nJS;\n        echo <<<HTML\n         <button type=\"button\" name=\"copy-sysinfo\" class=\"btn btn-secondary\" onclick=\"{$copy_onclick}\">\n            <i class=\"far fa-copy me-2\"></i>{$copy_msg}\n         </button>\nHTML;\n        $check_new_version_msg = __('Check if a new version is available');\n        echo <<<HTML\n      <a class='btn btn-secondary' href='?check_version'>\n         <i class=\"fas fa-sync me-2\"></i>{$check_new_version_msg}\n      </a>\nHTML;\n        self::showSystemInfoTable();\n        echo \"</div>\\n\";\n    }\n\n\n    /**\n     * Retrieve full directory of a lib\n     * @param  $libstring  object, class or function\n     * @return string       the path or false\n     *\n     * @since 9.1\n     */\n    public static function getLibraryDir($libstring)\n    {\n        if (is_object($libstring)) {\n            return realpath(dirname((new ReflectionObject($libstring))->getFileName()));\n        } else if (class_exists($libstring) || interface_exists($libstring)) {\n            return realpath(dirname((new ReflectionClass($libstring))->getFileName()));\n        } else if (function_exists($libstring)) {\n           // Internal function have no file name\n            $path = (new ReflectionFunction($libstring))->getFileName();\n            return ($path ? realpath(dirname($path)) : false);\n        }\n        return false;\n    }\n\n\n    /**\n     * get libraries list\n     *\n     * @param $all   (default false)\n     * @return array dependencies list\n     *\n     * @since 9.4\n     */\n    public static function getLibraries($all = false)\n    {\n        $pm = new PHPMailer();\n        $sp = new SimplePie();\n\n       // use same name that in composer.json\n        $deps = [[ 'name'    => 'htmlawed/htmlawed',\n            'version' => hl_version() ,\n            'check'   => 'hl_version'\n        ],\n            [ 'name'    => 'phpmailer/phpmailer',\n                'version' => $pm::VERSION,\n                'check'   => 'PHPMailer\\\\PHPMailer\\\\PHPMailer'\n            ],\n            [ 'name'    => 'simplepie/simplepie',\n                'version' => SIMPLEPIE_VERSION,\n                'check'   => $sp\n            ],\n            [ 'name'    => 'mpdf/mpdf',\n                'check'   => 'Mpdf\\\\Mpdf'\n            ],\n            [ 'name'    => 'michelf/php-markdown',\n                'check'   => 'Michelf\\\\Markdown'\n            ],\n            [ 'name'    => 'true/punycode',\n                'check'   => 'TrueBV\\\\Punycode'\n            ],\n            [ 'name'    => 'iamcal/lib_autolink',\n                'check'   => 'autolink'\n            ],\n            [ 'name'    => 'sabre/dav',\n                'check'   => 'Sabre\\\\DAV\\\\Version'\n            ],\n            [ 'name'    => 'sabre/http',\n                'check'   => 'Sabre\\\\HTTP\\\\Version'\n            ],\n            [ 'name'    => 'sabre/uri',\n                'check'   => 'Sabre\\\\Uri\\\\Version'\n            ],\n            [ 'name'    => 'sabre/vobject',\n                'check'   => 'Sabre\\\\VObject\\\\Component'\n            ],\n            [ 'name'    => 'laminas/laminas-i18n',\n                'check'   => 'Laminas\\\\I18n\\\\Module'\n            ],\n            [ 'name'    => 'laminas/laminas-servicemanager',\n                'check'   => 'Laminas\\\\ServiceManager\\\\ServiceManager'\n            ],\n            [ 'name'    => 'monolog/monolog',\n                'check'   => 'Monolog\\\\Logger'\n            ],\n            [ 'name'    => 'sebastian/diff',\n                'check'   => 'SebastianBergmann\\\\Diff\\\\Diff'\n            ],\n            [ 'name'    => 'donatj/phpuseragentparser',\n                'check'   => 'donatj\\\\UserAgent\\\\UserAgentParser'\n            ],\n            [ 'name'    => 'elvanto/litemoji',\n                'check'   => 'LitEmoji\\\\LitEmoji'\n            ],\n            [ 'name'    => 'symfony/console',\n                'check'   => 'Symfony\\\\Component\\\\Console\\\\Application'\n            ],\n            [ 'name'    => 'scssphp/scssphp',\n                'check'   => 'ScssPhp\\ScssPhp\\Compiler'\n            ],\n            [ 'name'    => 'laminas/laminas-mail',\n                'check'   => 'Laminas\\\\Mail\\\\Protocol\\\\Imap'\n            ],\n            [ 'name'    => 'laminas/laminas-mime',\n                'check'   => 'Laminas\\\\Mime\\\\Mime'\n            ],\n            [ 'name'    => 'rlanvin/php-rrule',\n                'check'   => 'RRule\\\\RRule'\n            ],\n            [ 'name'    => 'blueimp/jquery-file-upload',\n                'check'   => 'UploadHandler'\n            ],\n            [ 'name'    => 'ramsey/uuid',\n                'check'   => 'Ramsey\\\\Uuid\\\\Uuid'\n            ],\n            [ 'name'    => 'psr/log',\n                'check'   => 'Psr\\\\Log\\\\LoggerInterface'\n            ],\n            [ 'name'    => 'psr/simple-cache',\n                'check'   => 'Psr\\\\SimpleCache\\\\CacheInterface'\n            ],\n            [ 'name'    => 'psr/cache',\n                'check'   => 'Psr\\\\Cache\\\\CacheItemPoolInterface'\n            ],\n            [ 'name'    => 'league/csv',\n                'check'   => 'League\\\\Csv\\\\Writer'\n            ],\n            [ 'name'    => 'mexitek/phpcolors',\n                'check'   => 'Mexitek\\\\PHPColors\\\\Color'\n            ],\n            [ 'name'    => 'guzzlehttp/guzzle',\n                'check'   => 'GuzzleHttp\\\\Client'\n            ],\n            [ 'name'    => 'guzzlehttp/psr7',\n                'check'   => 'GuzzleHttp\\\\Psr7\\\\Response'\n            ],\n            [ 'name'    => 'glpi-project/inventory_format',\n                'check'   => 'Glpi\\Inventory\\Converter'\n            ],\n            [ 'name'    => 'wapmorgan/unified-archive',\n                'check'   => 'wapmorgan\\\\UnifiedArchive\\\\UnifiedArchive'\n            ],\n            [ 'name'    => 'paragonie/sodium_compat',\n                'check'   => 'ParagonIE_Sodium_Compat'\n            ],\n            [ 'name'    => 'symfony/cache',\n                'check'   => 'Symfony\\\\Component\\\\Cache\\\\Psr16Cache'\n            ],\n            [ 'name'    => 'html2text/html2text',\n                'check'   => 'Html2Text\\\\Html2Text'\n            ],\n            [ 'name'    => 'symfony/dom-crawler',\n                'check'   => 'Symfony\\\\Component\\\\DomCrawler\\\\Crawler'\n            ],\n            [ 'name'    => 'twig/twig',\n                'check'   => 'Twig\\\\Environment'\n            ],\n            [ 'name'    => 'twig/string-extra',\n                'check'   => 'Twig\\\\Extra\\\\String\\\\StringExtension'\n            ],\n            [ 'name'    => 'symfony/polyfill-ctype',\n                'check'   => 'ctype_digit'\n            ],\n            [ 'name'    => 'symfony/polyfill-iconv',\n                'check'   => 'iconv'\n            ],\n            [ 'name'    => 'symfony/polyfill-mbstring',\n                'check'   => 'mb_list_encodings'\n            ],\n            [ 'name'    => 'symfony/polyfill-php80',\n                'check'   => 'str_contains'\n            ],\n            [\n                'name'  => 'symfony/polyfill-php81',\n                'check' => 'array_is_list'\n            ],\n        ];\n        if (Toolbox::canUseCAS()) {\n            $deps[] = [\n                'name'    => 'phpCas',\n                'version' => phpCAS::getVersion(),\n                'check'   => 'phpCAS'\n            ];\n        }\n        return $deps;\n    }\n\n\n    /**\n     * show Libraries information in system information\n     *\n     * @since 0.84\n     **/\n    public static function showLibrariesInformation()\n    {\n\n       // No gettext\n\n        echo \"<tr class='tab_bg_2'><th class='section-header'>Libraries</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n\n        foreach (self::getLibraries() as $dep) {\n            $path = self::getLibraryDir($dep['check']);\n            if ($path) {\n                echo \"{$dep['name']} \";\n                if (isset($dep['version'])) {\n                    echo \"version {$dep['version']} \";\n                }\n                echo \"in ($path)\\n\";\n            } else {\n                echo \"{$dep['name']} not found\\n\";\n            }\n        }\n\n        echo \"\\n</pre></td></tr>\";\n    }\n\n\n    /**\n     * Dropdown for global management config\n     *\n     * @param string       $name   select name\n     * @param string       $value  default value\n     * @param integer|null $rand   rand\n     **/\n    public static function dropdownGlobalManagement($name, $value, $rand = null)\n    {\n\n        $choices = [\n            __('Yes - Restrict to unit management for manual add'),\n            __('Yes - Restrict to global management for manual add'),\n            __('No'),\n        ];\n        Dropdown::showFromArray($name, $choices, ['value' => $value, 'rand' => $rand]);\n    }\n\n\n    /**\n     * Get language in GLPI associated with the value coming from LDAP/SSO\n     * Value can be, for example : English, en_EN, en-EN or en\n     *\n     * @param string $lang the value coming from LDAP/SSO\n     *\n     * @return string locale's php page in GLPI or '' is no language associated with the value\n     **/\n    public static function getLanguage($lang)\n    {\n        global $CFG_GLPI;\n\n       // Alternative language code: en-EN --> en_EN\n        $altLang = str_replace(\"-\", \"_\", $lang);\n\n       // Search in order : ID or extjs dico or tinymce dico / native lang / english name\n       //                   / extjs dico / tinymce dico\n       // ID  or extjs dico or tinymce dico\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (\n                (strcasecmp($lang, $ID) == 0)\n                || (strcasecmp($altLang, $ID) == 0)\n                || (strcasecmp($lang, $language[2]) == 0)\n                || (strcasecmp($lang, $language[3]) == 0)\n            ) {\n                return $ID;\n            }\n        }\n\n       // native lang\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (strcasecmp($lang, $language[0]) == 0) {\n                return $ID;\n            }\n        }\n\n       // english lang name\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (strcasecmp($lang, $language[4]) == 0) {\n                return $ID;\n            }\n        }\n\n        return \"\";\n    }\n\n\n    public static function detectRootDoc()\n    {\n        global $DB, $CFG_GLPI;\n\n        if (isset($CFG_GLPI['root_doc'])) {\n            return; // already computed\n        }\n\n        if (isset($_SERVER['REQUEST_URI'])) {\n            // $_SERVER['REQUEST_URI'] is set, meaning that GLPI is accessed from web server.\n            // In this case, `$CFG_GLPI['root_doc']` corresponds to the piece of URI\n            // that is common between `GLPI_ROOT` and $_SERVER['REQUEST_URI']\n            // e.g. GLPI_ROOT=/var/www/glpi and $_SERVER['REQUEST_URI']=/glpi/front/index.php -> $CFG_GLPI['root_doc']=/glpi\n\n            // Extract relative path of entry script directory\n            // e.g. /var/www/mydomain.org/glpi/front/index.php -> /front\n            $current_dir_relative = str_replace(\n                str_replace(DIRECTORY_SEPARATOR, '/', realpath(GLPI_ROOT)),\n                '',\n                str_replace(DIRECTORY_SEPARATOR, '/', realpath(getcwd()))\n            );\n\n            // Extract relative path of request URI directory\n            // e.g. /glpi/front/index.php -> /glpi/front\n            $request_dir_relative = preg_replace(\n                '/\\/[0-9a-zA-Z\\.\\-\\_]+\\.php/',\n                '',\n                Html::cleanParametersURL($_SERVER['REQUEST_URI'])\n            );\n            // API exception (handles `RewriteRule api/(.*)$ apirest.php/$1`)\n            if (strpos($request_dir_relative, 'api/') !== false) {\n                $request_dir_relative = preg_replace(\"/(.*\\/)api\\/.*/\", \"$1\", $request_dir_relative);\n            }\n\n            // Remove relative path of entry script directory\n            // e.g. /glpi/front -> /glpi\n            $root_doc = str_replace($current_dir_relative, '', $request_dir_relative);\n            $root_doc = rtrim($root_doc, '/');\n\n            // urldecode for space redirect to encoded URL : change entity\n            // note: not sure this line is actually used\n            $root_doc = urldecode($root_doc);\n\n            $CFG_GLPI['root_doc'] = $root_doc;\n        } else {\n            // $_SERVER['REQUEST_URI'] is not set, meaning that GLPI is probably acces from CLI.\n            // In this case, `$CFG_GLPI['root_doc']` has to be extracted from `$CFG_GLPI['url_base']`.\n\n            $url_base = $CFG_GLPI['url_base'] ?? null;\n            // $CFG_GLPI may have not been loaded yet, load value form DB if `$CFG_GLPI['url_base']` is not set.\n            if ($url_base === null && $DB instanceof DBmysql && $DB->connected) {\n                $url_base = Config::getConfigurationValue('core', 'url_base');\n            }\n\n            if ($url_base !== null) {\n                $CFG_GLPI['root_doc'] = parse_url($url_base, PHP_URL_PATH) ?? '';\n            }\n        }\n    }\n\n\n    /**\n     * Display debug information for dbslave\n     **/\n    public function showDebug()\n    {\n\n        $options = [\n            'diff' => 0,\n            'name' => '',\n        ];\n        NotificationEvent::debugEvent(new DBConnection(), $options);\n    }\n\n\n    /**\n     * Display field unicity criterias form\n     **/\n    public function showFormFieldUnicity()\n    {\n\n        $unicity = new FieldUnicity();\n        $unicity->showForm(1, -1);\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'Preference':\n                return __('Personalization');\n\n            case 'User':\n                if (\n                    User::canUpdate()\n                    && $item->currentUserHaveMoreRightThan($item->getID())\n                ) {\n                    return __('Settings');\n                }\n                break;\n\n            case __CLASS__:\n                $tabs = [\n                    1 => __('General setup'),  // Display\n                    2 => __('Default values'), // Prefs\n                    3 => _n('Asset', 'Assets', Session::getPluralNumber()),\n                    4 => __('Assistance'),\n                    12 => __('Management'),\n                ];\n                if (Config::canUpdate()) {\n                    $tabs[9]  = __('Logs purge');\n                    $tabs[5]  = __('System');\n                    $tabs[10] = __('Security');\n                    $tabs[7]  = __('Performance');\n                    $tabs[8]  = __('API');\n                    $tabs[11] = Impact::getTypeName();\n                }\n\n                if (\n                    DBConnection::isDBSlaveActive()\n                    && Config::canUpdate()\n                ) {\n                    $tabs[6]  = _n('SQL replica', 'SQL replicas', Session::getPluralNumber());  // Slave\n                }\n                return $tabs;\n\n            case 'GLPINetwork':\n                return 'GLPI Network';\n\n            case Impact::getType():\n                return Impact::getTypeName();\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        global $CFG_GLPI;\n\n        if ($item->getType() == 'Preference') {\n            $config = new self();\n            $user   = new User();\n            if ($user->getFromDB(Session::getLoginUserID())) {\n                $user->computePreferences();\n                $config->showFormUserPrefs($user->fields);\n            }\n        } else if ($item->getType() == 'User') {\n            $config = new self();\n            $item->computePreferences();\n            $config->showFormUserPrefs($item->fields);\n        } else if ($item->getType() == __CLASS__) {\n            switch ($tabnum) {\n                case 1:\n                    $item->showFormDisplay();\n                    break;\n\n                case 2:\n                    $item->showFormUserPrefs($CFG_GLPI);\n                    break;\n\n                case 3:\n                    $item->showFormInventory();\n                    break;\n\n                case 4:\n                    $item->showFormHelpdesk();\n                    break;\n\n                case 5:\n                    $item->showSystemInformations();\n                    break;\n\n                case 6:\n                    $item->showFormDBSlave();\n                    break;\n\n                case 7:\n                    $item->showPerformanceInformations();\n                    break;\n\n                case 8:\n                    $item->showFormAPI();\n                    break;\n\n                case 9:\n                    $item->showFormLogs();\n                    break;\n\n                case 10:\n                    $item->showFormSecurity();\n                    break;\n\n                case 11:\n                    Impact::showConfigForm();\n                    break;\n\n                case 12:\n                    $item->showFormManagement();\n                    break;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Display database engine checks report\n     *\n     * @since 9.3\n     *\n     * @param boolean $fordebug display for debug (no html required) (false by default)\n     * @param string  $version  Version to check (mainly from install), defaults to null\n     *\n     * @return integer 2: missing extension,  1: missing optionnal extension, 0: OK,\n     **/\n    public static function displayCheckDbEngine($fordebug = false, $version = null)\n    {\n        global $CFG_GLPI;\n\n        $error = 0;\n        $result = self::checkDbEngine($version);\n        $version = key($result);\n        $db_ver = $result[$version];\n\n        $ok_message = sprintf(__s('Database version seems correct (%s) - Perfect!'), $version);\n        $ko_message = sprintf(__s('Your database engine version seems too old: %s.'), $version);\n\n        if (!$db_ver) {\n            $error = 2;\n        }\n        $message = $error > 0 ? $ko_message : $ok_message;\n\n        if (isCommandLine()) {\n            echo $message . \"\\n\";\n        } else {\n            $img = \"<img src='\" . $CFG_GLPI['root_doc'] . \"/pics/\";\n            $img .= ($error > 0 ? \"ko_min\" : \"ok_min\") . \".png' alt='$message' title='$message'/>\";\n\n            if ($fordebug) {\n                echo $img . $message . \"\\n\";\n            } else {\n                $html = \"<td\";\n                if ($error > 0) {\n                    $html .= \" class='red'\";\n                }\n                $html .= \">\";\n                $html .= $img;\n                $html .= '</td>';\n                echo $html;\n            }\n        }\n        return $error;\n    }\n\n\n    /**\n     * Check for needed extensions\n     *\n     * @since 9.3\n     *\n     * @param string $raw Raw version to check (mainly from install), defaults to null\n     *\n     * @return array\n     **/\n    public static function checkDbEngine($raw = null)\n    {\n        if ($raw === null) {\n            global $DB;\n            $raw = $DB->getVersion();\n        }\n\n        $server  = preg_match('/-MariaDB/', $raw) ? 'MariaDB' : 'MySQL';\n        $version = preg_replace('/^((\\d+\\.?)+).*$/', '$1', $raw);\n\n       // MySQL >= 5.7 || MariaDB >= 10.2\n        $is_supported = $server === 'MariaDB'\n         ? version_compare($version, '10.2', '>=')\n         : version_compare($version, '5.7', '>=');\n\n        return [$version => $is_supported];\n    }\n\n\n    /**\n     * Check for needed extensions\n     *\n     * @since 9.2 Method signature and return has changed\n     *\n     * @param null|array $list     Extensions list (from plugins)\n     *\n     * @return array [\n     *                'error'     => integer 2: missing extension,  1: missing optionnal extension, 0: OK,\n     *                'good'      => [ext => message],\n     *                'missing'   => [ext => message],\n     *                'may'       => [ext => message]\n     *               ]\n     **/\n    public static function checkExtensions($list = null)\n    {\n        if ($list === null) {\n            $extensions_to_check = [\n                'mysqli'   => [\n                    'required'  => true\n                ],\n                'fileinfo' => [\n                    'required'  => true,\n                    'class'     => 'finfo'\n                ],\n                'json'     => [\n                    'required'  => true,\n                    'function'  => 'json_encode'\n                ],\n                'zlib'     => [\n                    'required'  => true,\n                ],\n                'curl'      => [\n                    'required'  => true,\n                ],\n                'gd'       => [\n                    'required'  => true,\n                ],\n                'simplexml' => [\n                    'required'  => true,\n                ],\n                'xml'        => [\n                    'required'  => true,\n                    'function'  => 'utf8_decode'\n                ],\n            //to sync/connect from LDAP\n                'ldap'       => [\n                    'required'  => false,\n                ],\n            //to enhance perfs\n                'Zend OPcache' => [\n                    'required'  => false\n                ],\n            //for CAS lib\n                'CAS'     => [\n                    'required' => false,\n                    'class'    => 'phpCAS'\n                ],\n                'exif' => [\n                    'required'  => false\n                ],\n                'intl' => [\n                    'required' => true\n                ],\n                'sodium' => [\n                    'required' => false\n                ]\n            ];\n        } else {\n            $extensions_to_check = $list;\n        }\n\n        $report = [\n            'error'     => 0,\n            'good'      => [],\n            'missing'   => [],\n            'may'       => []\n        ];\n\n       //check for PHP extensions\n        foreach ($extensions_to_check as $ext => $params) {\n            $success = true;\n\n            if (isset($params['call'])) {\n                $success = call_user_func($params['call']);\n            } else if (isset($params['function'])) {\n                if (!function_exists($params['function'])) {\n                    $success = false;\n                }\n            } else if (isset($params['class'])) {\n                if (!class_exists($params['class'])) {\n                    $success = false;\n                }\n            } else {\n                if (!extension_loaded($ext)) {\n                    $success = false;\n                }\n            }\n\n            if ($success) {\n                $msg = sprintf(__('%s extension is installed'), $ext);\n                $report['good'][$ext] = $msg;\n            } else {\n                if (isset($params['required']) && $params['required'] === true) {\n                    if ($report['error'] < 2) {\n                        $report['error'] = 2;\n                    }\n                    $msg = sprintf(__('%s extension is missing'), $ext);\n                    $report['missing'][$ext] = $msg;\n                } else {\n                    if ($report['error'] < 1) {\n                        $report['error'] = 1;\n                    }\n                    $msg = sprintf(__('%s extension is not present'), $ext);\n                    $report['may'][$ext] = $msg;\n                }\n            }\n        }\n\n        return $report;\n    }\n\n\n    /**\n     * Get current DB version (compatible with all version of GLPI)\n     *\n     * @since 0.85\n     *\n     * @return DB version\n     **/\n    public static function getCurrentDBVersion()\n    {\n        global $DB;\n\n       //Default current case\n        $select  = 'value AS version';\n        $table   = 'glpi_configs';\n        $where   = [\n            'context'   => 'core',\n            'name'      => 'version'\n        ];\n\n        if (!$DB->tableExists('glpi_configs')) {\n            $select  = 'version';\n            $table   = 'glpi_config';\n            $where   = ['id' => 1];\n        } else if ($DB->fieldExists('glpi_configs', 'version')) {\n            $select  = 'version';\n            $where   = ['id' => 1];\n        }\n\n        $row = $DB->request([\n            'SELECT' => [$select],\n            'FROM'   => $table,\n            'WHERE'  => $where\n        ])->current();\n\n        return trim($row['version']);\n    }\n\n\n    /**\n     * Get config values\n     *\n     * @since 0.85\n     *\n     * @param $context  string   context to get values (default for glpi is core)\n     * @param $names    array    of config names to get\n     *\n     * @return array of config values\n     **/\n    public static function getConfigurationValues($context, array $names = [])\n    {\n        global $DB;\n\n        $query = [\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'context'   => $context\n            ]\n        ];\n\n        if (count($names) > 0) {\n            $query['WHERE']['name'] = $names;\n        }\n\n        $iterator = $DB->request($query);\n        $result = [];\n        foreach ($iterator as $line) {\n            $result[$line['name']] = $line['value'];\n        }\n        return $result;\n    }\n\n\n    /**\n     * Get config value\n     *\n     * @param $context  string   context to get values (default for glpi is core)\n     * @param $name     string   config name\n     *\n     * @return mixed\n     *\n     * @since 10.0.0\n     */\n    public static function getConfigurationValue(string $context, string $name)\n    {\n        return self::getConfigurationValues($context, [$name])[$name] ?? null;\n    }\n\n    /**\n     * Load legacy configuration into $CFG_GLPI global variable.\n     *\n     * @return boolean True for success, false if an error occured\n     *\n     * @since 10.0.0 Parameter $older_to_latest is not longer used.\n     */\n    public static function loadLegacyConfiguration()\n    {\n\n        global $CFG_GLPI, $DB;\n\n        $iterator = $DB->request(['FROM' => 'glpi_configs']);\n\n        if ($iterator->count() === 0) {\n            return false;\n        }\n\n        if ($iterator->count() === 1) {\n           // 1 row = 0.78 to 0.84 config table schema\n            $values = $iterator->current();\n        } else {\n           // multiple rows = 0.85+ config\n            $values = [];\n            foreach ($iterator as $row) {\n                if ('core' !== $row['context']) {\n                    continue;\n                }\n                $values[$row['name']] = $row['value'];\n            }\n        }\n\n        $CFG_GLPI = array_merge($CFG_GLPI, $values);\n\n        if (isset($CFG_GLPI['priority_matrix'])) {\n            $CFG_GLPI['priority_matrix'] = importArrayFromDB($CFG_GLPI['priority_matrix']);\n        }\n\n        if (isset($CFG_GLPI['devices_in_menu'])) {\n            $CFG_GLPI['devices_in_menu'] = importArrayFromDB($CFG_GLPI['devices_in_menu']);\n        }\n\n        if (isset($CFG_GLPI['lock_item_list'])) {\n            $CFG_GLPI['lock_item_list'] = importArrayFromDB($CFG_GLPI['lock_item_list']);\n        }\n\n        if (\n            isset($CFG_GLPI['lock_lockprofile_id'])\n            && $CFG_GLPI['lock_use_lock_item']\n            && $CFG_GLPI['lock_lockprofile_id'] > 0\n            && !isset($CFG_GLPI['lock_lockprofile'])\n        ) {\n            $prof = new Profile();\n            $prof->getFromDB($CFG_GLPI['lock_lockprofile_id']);\n            $prof->cleanProfile();\n            $CFG_GLPI['lock_lockprofile'] = $prof->fields;\n        }\n\n       // Path for icon of document type (web mode only)\n        if (isset($CFG_GLPI['root_doc'])) {\n            $CFG_GLPI['typedoc_icon_dir'] = $CFG_GLPI['root_doc'] . '/pics/icones';\n        }\n\n        if (isset($CFG_GLPI['planning_work_days'])) {\n            $CFG_GLPI['planning_work_days'] = importArrayFromDB($CFG_GLPI['planning_work_days']);\n        }\n\n        return true;\n    }\n\n\n    /**\n     * Set config values : create or update entry\n     *\n     * @since 0.85\n     *\n     * @param $context  string context to get values (default for glpi is core)\n     * @param $values   array  of config names to set\n     *\n     * @return void\n     **/\n    public static function setConfigurationValues($context, array $values = [])\n    {\n\n        $glpikey = new GLPIKey();\n\n        $config = new self();\n        foreach ($values as $name => $value) {\n           // Encrypt config values according to list declared to GLPIKey service\n            if (!empty($value) && $glpikey->isConfigSecured($context, $name)) {\n                $value = $glpikey->encrypt($value);\n            }\n\n            if (\n                $config->getFromDBByCrit([\n                    'context'   => $context,\n                    'name'      => $name\n                ])\n            ) {\n                $input = ['id'      => $config->getID(),\n                    'context' => $context,\n                    'value'   => $value\n                ];\n\n                $config->update($input);\n            } else {\n                $input = ['context' => $context,\n                    'name'    => $name,\n                    'value'   => $value\n                ];\n\n                $config->add($input);\n            }\n        }\n    }\n\n    /**\n     * Delete config entries\n     *\n     * @since 0.85\n     *\n     * @param $context string  context to get values (default for glpi is core)\n     * @param $values  array   of config names to delete\n     *\n     * @return void\n     **/\n    public static function deleteConfigurationValues($context, array $values = [])\n    {\n\n        $config = new self();\n        foreach ($values as $value) {\n            if (\n                $config->getFromDBByCrit([\n                    'context'   => $context,\n                    'name'      => $value\n                ])\n            ) {\n                $config->delete(['id' => $config->getID()]);\n            }\n        }\n    }\n\n\n    public function getRights($interface = 'central')\n    {\n\n        $values = parent::getRights();\n        unset(\n            $values[CREATE],\n            $values[DELETE],\n            $values[PURGE]\n        );\n\n        return $values;\n    }\n\n    /**\n     * Get message that informs the user he is using an unstable version.\n     *\n     * @param bool $is_dev\n     *\n     * @return void\n     */\n    public static function agreeUnstableMessage(bool $is_dev)\n    {\n        $msg = $is_dev\n         ? __('You are using a development version, be careful!')\n         : __('You are using a pre-release version, be careful!');\n\n        $out = '<div class=\"alert alert-warning\">\n         <strong>' . $msg . '</strong>\n         <br/>';\n        $out .= \"<div class='form-check'>\n         <input type='checkbox' class='form-check-input' required='required' id='agree_unstable' name='agree_unstable'>\n         <label for='agree_unstable' class='form-check-label'>\" . __('I know I am using a unstable version.') . \"</label>\n      </div>\n      </div>\";\n        $out .= \"<script type=text/javascript>\n            $(function() {\n               $('[name=from_update]').on('click', function(event){\n                  if(!$('#agree_unstable').is(':checked')) {\n                     event.preventDefault();\n                     alert('\" . __('Please check the unstable version checkbox.') . \"');\n                  }\n               });\n            });\n            </script>\";\n        return $out;\n    }\n\n    /**\n     * Get available palettes\n     *\n     * @return array\n     */\n    public function getPalettes()\n    {\n        $themes_files = scandir(GLPI_ROOT . \"/css/palettes/\");\n        $themes = [];\n        foreach ($themes_files as $file) {\n            if (preg_match('/^[^_].*\\.scss$/', $file) === 1) {\n                $name          = basename($file, '.scss');\n                $themes[$name] = ucfirst($name);\n            }\n        }\n        return $themes;\n    }\n\n    /**\n     * Logs purge form\n     *\n     * @since 9.3\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormLogs()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        echo \"<form name='form' id='purgelogs_form' method='post' action='\" . $this->getFormURL() . \"' data-track-changes='true'>\";\n        echo \"<div class='center'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"Logs purge configuration\") .\n           \"</th></tr>\";\n        echo \"<tr class='tab_bg_1 center'><td colspan='4'><i>\" . __(\"Change all\") . \"</i>\";\n        echo Html::scriptBlock(\"function form_init_all(value) {\n         $('#purgelogs_form .purgelog_interval select').val(value).trigger('change');;\n      }\");\n        self::showLogsInterval(\n            'init_all',\n            0,\n            [\n                'on_change' => \"form_init_all(this.value);\",\n                'class'     => ''\n            ]\n        );\n        echo \"</td></tr>\";\n        echo \"<input type='hidden' name='id' value='1'>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"General\") . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add/update relation between items\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_addrelation', $CFG_GLPI[\"purge_addrelation\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Delete relation between items\") . \"</td><td>\";\n        self::showLogsInterval('purge_deleterelation', $CFG_GLPI[\"purge_deleterelation\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_createitem', $CFG_GLPI[\"purge_createitem\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Delete the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_deleteitem', $CFG_GLPI[\"purge_deleteitem\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Restore the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_restoreitem', $CFG_GLPI[\"purge_restoreitem\"]);\n        echo \"</td>\";\n\n        echo \"<td>\" . __('Update the item') . \"</td><td>\";\n        self::showLogsInterval('purge_updateitem', $CFG_GLPI[\"purge_updateitem\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Comments\") . \"</td><td>\";\n        self::showLogsInterval('purge_comments', $CFG_GLPI[\"purge_comments\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Last update\") . \"</td><td>\";\n        self::showLogsInterval('purge_datemod', $CFG_GLPI[\"purge_datemod\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Plugins\") . \"</td><td>\";\n        self::showLogsInterval('purge_plugins', $CFG_GLPI[\"purge_plugins\"]);\n        echo \"</td>\";\n        echo \"<td class='center'>\" . RefusedEquipment::getTypeName(Session::getPluralNumber()) . \"</td><td>\";\n        self::showLogsInterval('purge_refusedequipment', $CFG_GLPI[\"purge_refusedequipment\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . _n('Software', 'Software', Session::getPluralNumber()) . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Installation/uninstallation of software on items\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_item_software_install',\n            $CFG_GLPI[\"purge_item_software_install\"]\n        );\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Installation/uninstallation versions on software\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_software_version_install',\n            $CFG_GLPI[\"purge_software_version_install\"]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add/Remove items from software versions\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_software_item_install',\n            $CFG_GLPI[\"purge_software_item_install\"]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Financial and administrative information') .\n           \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add financial information to an item\") . \"</td><td>\";\n        self::showLogsInterval('purge_infocom_creation', $CFG_GLPI[\"purge_infocom_creation\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . User::getTypeName(Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add/remove profiles to users\") . \"</td><td>\";\n        self::showLogsInterval('purge_profile_user', $CFG_GLPI[\"purge_profile_user\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Add/remove groups to users\") . \"</td><td>\";\n        self::showLogsInterval('purge_group_user', $CFG_GLPI[\"purge_group_user\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"User authentication method changes\") . \"</td><td>\";\n        self::showLogsInterval('purge_user_auth_changes', $CFG_GLPI[\"purge_user_auth_changes\"]);\n        echo \"</td>\";\n        echo \"<td class='center'>\" . __(\"Deleted user in LDAP directory\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_userdeletedfromldap', $CFG_GLPI[\"purge_userdeletedfromldap\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . _n('Component', 'Components', Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add component\") . \"</td><td>\";\n        self::showLogsInterval('purge_adddevice', $CFG_GLPI[\"purge_adddevice\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Update component\") . \"</td><td>\";\n        self::showLogsInterval('purge_updatedevice', $CFG_GLPI[\"purge_updatedevice\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Disconnect a component\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_disconnectdevice', $CFG_GLPI[\"purge_disconnectdevice\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Connect a component\") . \"</td><td>\";\n        self::showLogsInterval('purge_connectdevice', $CFG_GLPI[\"purge_connectdevice\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Delete component\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_deletedevice', $CFG_GLPI[\"purge_deletedevice\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"All sections\") . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Purge all log entries\") . \"</td><td>\";\n        self::showLogsInterval('purge_all', $CFG_GLPI[\"purge_all\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' value=\\\"\" . _sx('button', 'Save') . \"\\\" class='btn btn-primary' >\";\n        echo\"</td>\";\n        echo \"</tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Show intervals for logs purge\n     *\n     * @since 9.3\n     *\n     * @param string $name    Parameter name\n     * @param mixed  $value   Parameter value\n     * @param array  $options Options\n     *\n     * @return void\n     */\n    public static function showLogsInterval($name, $value, $options = [])\n    {\n\n        $values = [\n            self::DELETE_ALL => __(\"Delete all\"),\n            self::KEEP_ALL   => __(\"Keep all\"),\n        ];\n        for ($i = 1; $i < 121; $i++) {\n            $values[$i] = sprintf(\n                _n(\n                    \"Delete if older than %s month\",\n                    \"Delete if older than %s months\",\n                    $i\n                ),\n                $i\n            );\n        }\n        $options = array_merge([\n            'value'   => $value,\n            'display' => false,\n            'class'   => 'purgelog_interval'\n        ], $options);\n\n        $out = \"<div class='{$options['class']}'>\";\n        $out .= Dropdown::showFromArray($name, $values, $options);\n        $out .= \"</div>\";\n\n        echo $out;\n    }\n\n    /**\n     * Security policy form\n     *\n     * @since 9.5.0\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormSecurity()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $rand = mt_rand();\n\n        echo '<div class=\"center\" id=\"tabsbody\">';\n        echo '<form name=\"form\" action=\"' . Toolbox::getItemTypeFormURL(__CLASS__) . '\" method=\"post\" data-track-changes=\"true\">';\n        echo '<table class=\"tab_cadre_fixe\">';\n        echo '<tr><th colspan=\"4\">' . __('Security setup') . '</th></tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td colspan=\"4\" class=\"center b\">' . __('Password security policy') . '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_use_password_security' . $rand . '\">';\n        echo __('Password security policy validation');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'use_password_security',\n            $CFG_GLPI['use_password_security'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_min_length' . $rand . '\">';\n        echo __('Password minimum length');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_min_length',\n            [\n                'value' => $CFG_GLPI['password_min_length'],\n                'min'   => 4,\n                'max'   => 30,\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_number' . $rand . '\">';\n        echo __('Password need digit');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_number',\n            $CFG_GLPI['password_need_number'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_letter' . $rand . '\">';\n        echo __('Password need lowercase character');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_letter',\n            $CFG_GLPI['password_need_letter'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_caps' . $rand . '\">';\n        echo __('Password need uppercase character');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_caps',\n            $CFG_GLPI['password_need_caps'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_symbol' . $rand . '\">';\n        echo __('Password need symbol');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_symbol',\n            $CFG_GLPI['password_need_symbol'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td colspan=\"4\" class=\"center b\">' . __('Password expiration policy') . '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_delay' . $rand . '\">';\n        echo __('Password expiration delay (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_delay',\n            [\n                'value' => $CFG_GLPI['password_expiration_delay'],\n                'min'   => 30,\n                'max'   => 365,\n                'step'  => 15,\n                'toadd' => [-1 => __('Never')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_notice' . $rand . '\">';\n        echo __('Password expiration notice time (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_notice',\n            [\n                'value' => $CFG_GLPI['password_expiration_notice'],\n                'min'   => 0,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [-1 => __('Notification disabled')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_lock_delay' . $rand . '\">';\n        echo __('Delay before account deactivation (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_lock_delay',\n            [\n                'value' => $CFG_GLPI['password_expiration_lock_delay'],\n                'min'   => 0,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [-1 => __('Do not deactivate')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '<td colspan=\"2\"></td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td colspan=\"4\" class=\"center\">';\n        echo '<input type=\"submit\" name=\"update\" class=\"btn btn-primary\" value=\"' . _sx('button', 'Save') . '\">';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '</table>';\n        Html::closeForm();\n    }\n\n    /**\n     * Security form related to management entries.\n     *\n     * @since 10.0.0\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormManagement()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Session::haveRight(self::$rightname, UPDATE);\n\n        echo '<div class=\"center\" id=\"tabsbody\">';\n        if ($canedit) {\n            echo '<form name=\"form\" action=\"' . Toolbox::getItemTypeFormURL(__CLASS__) . '\" method=\"post\" data-track-changes=\"true\">';\n        }\n        echo '<table class=\"tab_cadre_fixe\">';\n        echo '<tr><th colspan=\"4\">' . __('Documents setup') . '</th></tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_document_max_size' . $rand . '\">';\n        echo __('Document files maximum size (Mio)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'document_max_size',\n            [\n                'value' => $CFG_GLPI['document_max_size'],\n                'min'   => 1,\n                'max'   => 250,\n                'rand'  => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td colspan=\"2\"></td>';\n        echo '</tr>';\n\n        if ($canedit) {\n            echo '<tr class=\"tab_bg_2\">';\n            echo '<td colspan=\"4\" class=\"center\">';\n            echo '<input type=\"submit\" name=\"update\" class=\"btn btn-primary\" value=\"' . _sx('button', 'Save') . '\">';\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '</table>';\n\n        if ($canedit) {\n            Html::closeForm();\n        }\n\n        echo '</div>';\n    }\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'   => 'common',\n            'name' => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'            => 1,\n            'table'         => $this->getTable(),\n            'field'         => 'value',\n            'name'          => __('Value'),\n            'massiveaction' => false\n        ];\n\n        return $tab;\n    }\n\n    public function getLogTypeID()\n    {\n        return [$this->getType(), 1];\n    }\n\n    public function post_addItem()\n    {\n        $this->logConfigChange($this->fields['context'], $this->fields['name'], (string)$this->fields['value'], '');\n    }\n\n    public function post_updateItem($history = 1)\n    {\n        global $DB;\n\n       // Check if password expiration mechanism has been activated\n        if (\n            $this->fields['name'] == 'password_expiration_delay'\n            && array_key_exists('value', $this->oldvalues)\n            && (int)$this->oldvalues['value'] === -1\n        ) {\n           // As passwords will now expire, consider that \"now\" is the reference date of expiration delay\n            $DB->update(\n                User::getTable(),\n                ['password_last_update' => $_SESSION['glpi_currenttime']],\n                ['authtype' => Auth::DB_GLPI]\n            );\n\n           // Activate passwordexpiration automated task\n            $DB->update(\n                CronTask::getTable(),\n                ['state' => 1,],\n                ['name' => 'passwordexpiration']\n            );\n        }\n\n        if (array_key_exists('value', $this->oldvalues)) {\n            $this->logConfigChange(\n                $this->fields['context'],\n                $this->fields['name'],\n                (string)$this->fields['value'],\n                (string)$this->oldvalues['value']\n            );\n        }\n    }\n\n    public function post_purgeItem()\n    {\n        $this->logConfigChange($this->fields['context'], $this->fields['name'], '', (string)$this->fields['value']);\n    }\n\n    /**\n     * Log config change in history.\n     *\n     * @param string $context\n     * @param string $name\n     * @param string $newvalue\n     * @param string $oldvalue\n     *\n     * @return void\n     */\n    private function logConfigChange(string $context, string $name, string $newvalue, string $oldvalue): void\n    {\n        $glpi_key = new GLPIKey();\n        if ($glpi_key->isConfigSecured($context, $name)) {\n            $newvalue = $oldvalue = '********';\n        }\n        $oldvalue = $name . ($context !== 'core' ? ' (' . $context . ') ' : ' ') . $oldvalue;\n        Log::constructHistory($this, ['value' => $oldvalue], ['value' => $newvalue]);\n    }\n\n    /**\n     * Get the GLPI Config without unsafe keys like passwords and emails (true on $safer)\n     *\n     * @param boolean $safer do we need to clean more (avoid emails disclosure)\n     * @return array of $CFG_GLPI without unsafe keys\n     *\n     * @since 9.5\n     */\n    public static function getSafeConfig($safer = false)\n    {\n        global $CFG_GLPI;\n\n        $excludedKeys = array_flip(self::$undisclosedFields);\n        $safe_config  = array_diff_key($CFG_GLPI, $excludedKeys);\n\n        if ($safer) {\n            $excludedKeys = array_flip(self::$saferUndisclosedFields);\n            $safe_config = array_diff_key($safe_config, $excludedKeys);\n        }\n\n        return $safe_config;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-adjustments\";\n    }\n\n    /**\n     * Get UUID\n     *\n     * @param string $type UUID type (e.g. 'instance' or 'registration')\n     *\n     * @return string\n     */\n    final public static function getUuid($type)\n    {\n        $conf = self::getConfigurationValues('core', [$type . '_uuid']);\n        $uuid = null;\n        if (!isset($conf[$type . '_uuid']) || empty($conf[$type . '_uuid'])) {\n            $uuid = self::generateUuid($type);\n        } else {\n            $uuid = $conf[$type . '_uuid'];\n        }\n        return $uuid;\n    }\n\n    /**\n     * Generates an unique identifier and store it\n     *\n     * @param string $type UUID type (e.g. 'instance' or 'registration')\n     *\n     * @return string\n     */\n    final public static function generateUuid($type)\n    {\n        $uuid = Toolbox::getRandomString(40);\n        self::setConfigurationValues('core', [$type . '_uuid' => $uuid]);\n        return $uuid;\n    }\n\n    /**\n     * Try to find a valid sender email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     * @param bool     $no_reply     Should the configured \"noreply\" address be\n     *                               used (default: false)\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getEmailSender(\n        ?int $entities_id = null,\n        bool $no_reply = false\n    ): array {\n        // Try to use the configured noreply address if no response is expected\n        // for this notification\n        if ($no_reply) {\n            $sender = Config::getNoReplyEmailSender($entities_id);\n            if ($sender['email'] !== null) {\n                return $sender;\n            } else {\n                trigger_error('No-Reply address is not defined in configuration.', E_USER_WARNING);\n            }\n        }\n\n        // Try to use the configured \"from\" email address\n        $sender = Config::getFromEmailSender($entities_id);\n        if ($sender['email'] !== null) {\n            return $sender;\n        }\n\n        // Try to use the configured \"admin\" email address\n        $sender = Config::getAdminEmailSender($entities_id);\n        if ($sender['email'] !== null) {\n            return $sender;\n        }\n\n        // No valid email was found\n        trigger_error(\n            'No email address is not defined in configuration.',\n            E_USER_WARNING\n        );\n\n        // No values found\n        return [\n            'email' => null,\n            'name'  => null,\n        ];\n    }\n\n    /**\n     * Try to find a valid \"from\" email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getFromEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('from_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid \"admin_email\" email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getAdminEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('admin_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid noreply email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => noreply address, name => noreply name]\n     */\n    public static function getNoReplyEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('noreply_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid replyto email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => replyto address, name => replyto name]\n     */\n    public static function getReplyToEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('replyto_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid email from the GLPI configuration\n     *\n     * @param string   $config_name  Configuration name\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => address, name => name]\n     */\n    private static function getEmailSenderFromEntityOrConfig(string $config_name, ?int $entities_id = null): array\n    {\n        global $CFG_GLPI;\n\n        $email_config_name = $config_name;\n        $name_config_name  = $config_name . '_name';\n\n        // Check admin email in specified entity\n        if (!is_null($entities_id)) {\n            $entity_sender_email = trim(\n                Entity::getUsedConfig($email_config_name, $entities_id, '', '')\n            );\n            $entity_sender_name = trim(\n                Entity::getUsedConfig($name_config_name, $entities_id, '', '')\n            );\n\n            if (NotificationMailing::isUserAddressValid($entity_sender_email)) {\n                return [\n                    'email' => $entity_sender_email,\n                    'name'  => $entity_sender_name,\n                ];\n            }\n        }\n\n        // Fallback to global configuration\n        $global_sender_email = $CFG_GLPI[$email_config_name] ?? \"\";\n        $global_sender_name  = $CFG_GLPI[$name_config_name]  ?? \"\";\n\n        if (NotificationMailing::isUserAddressValid($global_sender_email)) {\n            return [\n                'email' => $global_sender_email,\n                'name'  => $global_sender_name,\n            ];\n        }\n\n        // No valid values found\n        return [\n            'email' => null,\n            'name'  => null,\n        ];\n    }\n\n    /**\n     * Override parent: \"{itemtype} - {header name}\" -> \"{itemtype}\"\n     * There is only one config, no need to display the item name\n     *\n     * @return string\n     */\n    public function getBrowserTabName(): string\n    {\n        return self::getTypeName(1);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Cache\\CacheManager;\nuse Glpi\\Dashboard\\Grid;\nuse Glpi\\Exception\\PasswordTooWeakException;\nuse Glpi\\Plugin\\Hooks;\nuse Glpi\\System\\RequirementsManager;\nuse Glpi\\Toolbox\\Sanitizer;\nuse PHPMailer\\PHPMailer\\PHPMailer;\n\n/**\n *  Config class\n **/\nclass Config extends CommonDBTM\n{\n    const DELETE_ALL = -1;\n    const KEEP_ALL = 0;\n\n   // From CommonGLPI\n    protected $displaylist         = false;\n\n   // From CommonDBTM\n    public $auto_message_on_action = false;\n    public $showdebug              = true;\n\n    public static $rightname              = 'config';\n\n    public static $undisclosedFields      = [\n        'proxy_passwd',\n        'smtp_passwd',\n        'glpinetwork_registration_key',\n        'ldap_pass', // this one should not exist anymore, but may be present when admin restored config dump after migration\n    ];\n    public static $saferUndisclosedFields = ['admin_email', 'replyto_email'];\n\n    public static function getTypeName($nb = 0)\n    {\n        return __('Setup');\n    }\n\n\n    public static function getMenuContent()\n    {\n        $menu = [];\n        if (static::canView()) {\n            $menu['title']   = _x('setup', 'General');\n            $menu['page']    = Config::getFormURL(false);\n            $menu['icon']    = Config::getIcon();\n\n            $menu['options']['apiclient']['icon']            = APIClient::getIcon();\n            $menu['options']['apiclient']['title']           = APIClient::getTypeName(Session::getPluralNumber());\n            $menu['options']['apiclient']['page']            = Config::getFormURL(false) . '?forcetab=Config$8';\n            $menu['options']['apiclient']['links']['search'] = Config::getFormURL(false) . '?forcetab=Config$8';\n            $menu['options']['apiclient']['links']['add']    = '/front/apiclient.form.php';\n        }\n        if (count($menu)) {\n            return $menu;\n        }\n        return false;\n    }\n\n\n    public static function canCreate()\n    {\n        return false;\n    }\n\n\n    public function canViewItem()\n    {\n        if (\n            isset($this->fields['context']) &&\n            ($this->fields['context'] == 'core' ||\n            Plugin::isPluginActive($this->fields['context']))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('GLPINetwork', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n        global $CFG_GLPI;\n\n       // Unset _no_history to not save it as a configuration value\n        unset($input['_no_history']);\n\n       // Update only an item\n        if (isset($input['context'])) {\n            return $input;\n        }\n\n       // Process configuration for plugins\n        if (!empty($input['config_context'])) {\n            $config_context = $input['config_context'];\n            unset($input['id']);\n            unset($input['_glpi_csrf_token']);\n            unset($input['_update']);\n            unset($input['config_context']);\n            if (\n                (!empty($input['config_class']))\n                && (class_exists($input['config_class']))\n                && (method_exists($input['config_class'], 'configUpdate'))\n            ) {\n                $config_method = $input['config_class'] . '::configUpdate';\n                unset($input['config_class']);\n                $input = call_user_func($config_method, $input);\n            }\n            $this->setConfigurationValues($config_context, $input);\n            return false;\n        }\n\n       // Trim automatically endig slash for url_base config as, for all existing occurences,\n       // this URL will be prepended to something that starts with a slash.\n        if (isset($input[\"url_base\"]) && !empty($input[\"url_base\"])) {\n            if (Toolbox::isValidWebUrl($input[\"url_base\"])) {\n                $input[\"url_base\"] = rtrim($input[\"url_base\"], '/');\n            } else {\n                Session::addMessageAfterRedirect(__('Invalid base URL!'), false, ERROR);\n                return false;\n            }\n        }\n\n        if (isset($input[\"url_base_api\"]) && !empty($input[\"url_base_api\"])) {\n            if (!Toolbox::isValidWebUrl($input[\"url_base_api\"])) {\n                Session::addMessageAfterRedirect(__('Invalid API base URL!'), false, ERROR);\n                return false;\n            }\n        }\n\n        if (isset($input['allow_search_view']) && !$input['allow_search_view']) {\n           // Global search need \"view\"\n            $input['allow_search_global'] = 0;\n        }\n\n        if (isset($input[\"smtp_passwd\"]) && empty($input[\"smtp_passwd\"])) {\n            unset($input[\"smtp_passwd\"]);\n        }\n        if (isset($input[\"_blank_smtp_passwd\"]) && $input[\"_blank_smtp_passwd\"]) {\n            $input['smtp_passwd'] = '';\n        }\n\n        if (isset($input[\"proxy_passwd\"]) && empty($input[\"proxy_passwd\"])) {\n            unset($input[\"proxy_passwd\"]);\n        }\n        if (isset($input[\"_blank_proxy_passwd\"]) && $input[\"_blank_proxy_passwd\"]) {\n            $input['proxy_passwd'] = '';\n        }\n\n       // Manage DB Slave process\n        if (isset($input['_dbslave_status'])) {\n            $already_active = DBConnection::isDBSlaveActive();\n\n            if ($input['_dbslave_status']) {\n                DBConnection::changeCronTaskStatus(true);\n\n                if (!$already_active) {\n                    // Activate Slave from the \"system\" tab\n                    DBConnection::createDBSlaveConfig();\n                } else if (isset($input[\"_dbreplicate_dbhost\"])) {\n                   // Change parameter from the \"replicate\" tab\n                    DBConnection::saveDBSlaveConf(\n                        $input[\"_dbreplicate_dbhost\"],\n                        $input[\"_dbreplicate_dbuser\"],\n                        $input[\"_dbreplicate_dbpassword\"],\n                        $input[\"_dbreplicate_dbdefault\"]\n                    );\n                }\n            }\n\n            if (!$input['_dbslave_status'] && $already_active) {\n                DBConnection::deleteDBSlaveConfig();\n                DBConnection::changeCronTaskStatus(false);\n            }\n        }\n\n       // Matrix for Impact / Urgence / Priority\n        if (isset($input['_matrix'])) {\n            $tab = [];\n\n            for ($urgency = 1; $urgency <= 5; $urgency++) {\n                for ($impact = 1; $impact <= 5; $impact++) {\n                    $priority               = $input[\"_matrix_${urgency}_${impact}\"];\n                    $tab[$urgency][$impact] = $priority;\n                }\n            }\n\n            $input['priority_matrix'] = exportArrayToDB($tab);\n            $input['urgency_mask']    = 0;\n            $input['impact_mask']     = 0;\n\n            for ($i = 1; $i <= 5; $i++) {\n                if ($input[\"_urgency_${i}\"]) {\n                    $input['urgency_mask'] += (1 << $i);\n                }\n\n                if ($input[\"_impact_${i}\"]) {\n                    $input['impact_mask'] += (1 << $i);\n                }\n            }\n        }\n\n        if (isset($input['_update_devices_in_menu'])) {\n            $input['devices_in_menu'] = exportArrayToDB(\n                (isset($input['devices_in_menu']) ? $input['devices_in_menu'] : [])\n            );\n        }\n\n       // lock mechanism update\n        if (isset($input['lock_use_lock_item'])) {\n            $input['lock_item_list'] = exportArrayToDB((isset($input['lock_item_list'])\n                                                      ? $input['lock_item_list'] : []));\n        }\n\n        if (isset($input[Impact::CONF_ENABLED])) {\n            $input[Impact::CONF_ENABLED] = exportArrayToDB($input[Impact::CONF_ENABLED]);\n        }\n\n        if (isset($input['planning_work_days'])) {\n            $input['planning_work_days'] = exportArrayToDB($input['planning_work_days']);\n        }\n\n       // Beware : with new management system, we must update each value\n        unset($input['id']);\n        unset($input['_glpi_csrf_token']);\n        unset($input['_update']);\n\n       // Add skipMaintenance if maintenance mode update\n        if (isset($input['maintenance_mode']) && $input['maintenance_mode']) {\n            $_SESSION['glpiskipMaintenance'] = 1;\n            $url = $CFG_GLPI['root_doc'] . \"/index.php?skipMaintenance=1\";\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('Maintenance mode activated. Backdoor using: %s'),\n                    \"<a href='$url'>$url</a>\"\n                ),\n                false,\n                WARNING\n            );\n        }\n\n        $this->setConfigurationValues('core', $input);\n\n        return false;\n    }\n\n    public static function unsetUndisclosedFields(&$fields)\n    {\n        if (isset($fields['context']) && isset($fields['name'])) {\n            if (\n                $fields['context'] == 'core'\n                && in_array($fields['name'], self::$undisclosedFields)\n            ) {\n                unset($fields['value']);\n            } else {\n                $fields = Plugin::doHookFunction(Hooks::UNDISCLOSED_CONFIG_VALUE, $fields);\n            }\n        }\n    }\n\n    /**\n     * Print the config form for display\n     *\n     * @return void\n     **/\n    public function showFormDisplay()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Session::haveRight(self::$rightname, UPDATE);\n\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('General setup') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='url_base'>\" . __('URL of the application') . \"</label></td>\";\n        echo \"<td colspan='3'><input type='url' name='url_base' id='url_base' value='\" . $CFG_GLPI[\"url_base\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='text_login'>\" . __('Text in the login box (HTML tags supported)') . \"</label></td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<textarea class='form-control' name='text_login' id='text_login'>\" . $CFG_GLPI[\"text_login\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_use_public_faq$rand'>\" . __('Allow FAQ anonymous access') . \"</label></td><td  width='20%'>\";\n        Dropdown::showYesNo(\"use_public_faq\", $CFG_GLPI[\"use_public_faq\"], -1, ['rand' => $rand]);\n        echo \"</td><td width='30%'><label for='helpdesk_doc_url'>\" . __('Simplified interface help link') . \"</label></td>\";\n        echo \"<td><input size='22' type='text' name='helpdesk_doc_url' id='helpdesk_doc_url' value='\" .\n                 $CFG_GLPI[\"helpdesk_doc_url\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_list_limit_max$rand'>\" . __('Default search results limit (page)') . \"</td><td>\";\n        Dropdown::showNumber(\"list_limit_max\", ['value' => $CFG_GLPI[\"list_limit_max\"],\n            'min'   => 5,\n            'max'   => 200,\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td><td><label for='central_doc_url'>\" . __('Standard interface help link') . \"</label></td>\";\n        echo \"<td><input size='22' type='text' name='central_doc_url' id='central_doc_url' value='\" .\n                 $CFG_GLPI[\"central_doc_url\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='cut$rand'>\" . __('Default characters limit (summary text boxes)') . \"</label></td><td>\";\n        echo Html::input('cut', [\n            'value' => $CFG_GLPI[\"cut\"],\n            'id'    => \"cut$rand\"\n        ]);\n        echo \"</td><td><label for='dropdown_url_maxlength$rand'>\" . __('Default url length limit') . \"</td><td>\";\n        Dropdown::showNumber('url_maxlength', ['value' => $CFG_GLPI[\"url_maxlength\"],\n            'min'   => 20,\n            'max'   => 80,\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_decimal_number$rand'>\" . __('Default decimals limit') . \"</label></td><td>\";\n        Dropdown::showNumber(\"decimal_number\", ['value' => $CFG_GLPI[\"decimal_number\"],\n            'min'   => 1,\n            'max'   => 4,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_translate_dropdowns$rand'>\" . __(\"Translation of dropdowns\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_dropdowns\", $CFG_GLPI[\"translate_dropdowns\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_translate_kb$rand'>\" . __(\"Knowledge base translation\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_kb\", $CFG_GLPI[\"translate_kb\"], -1, ['rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='reminder_translate_dropdowns$rand'>\" . __(\"Translation of reminders\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"translate_reminders\", $CFG_GLPI[\"translate_reminders\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td colspan='2'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Dynamic display') .\n           \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_dropdown_max$rand'>\" .\n            __('Page size for dropdown (paging using scroll)') .\n            \"</label></td><td>\";\n        Dropdown::showNumber('dropdown_max', ['value' => $CFG_GLPI[\"dropdown_max\"],\n            'min'   => 1,\n            'max'   => 200,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_ajax_limit_count$rand'>\" . __(\"Don't show search engine in dropdowns if the number of items is less than\") .\n           \"</label></td><td>\";\n        Dropdown::showNumber('ajax_limit_count', ['value' => $CFG_GLPI[\"ajax_limit_count\"],\n            'min'   => 1,\n            'max'   => 200,\n            'step'  => 1,\n            'toadd' => [0 => __('Never')],\n            'rand'  => $rand\n        ]);\n        echo \"<td colspan='2'></td>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Search engine') . \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_allow_search_view$rand'>\" . __('Items seen') . \"</label></td><td>\";\n        $values = [0 => __('No'),\n            1 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('last criterion')),\n            2 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('default criterion'))\n        ];\n        Dropdown::showFromArray(\n            'allow_search_view',\n            $values,\n            ['value' => $CFG_GLPI['allow_search_view'], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_allow_search_global$rand'>\" . __('Global search') . \"</label></td><td>\";\n        if ($CFG_GLPI['allow_search_view']) {\n            Dropdown::showYesNo('allow_search_global', $CFG_GLPI['allow_search_global'], -1, ['rand' => $rand]);\n        } else {\n            echo Dropdown::getYesNo(0);\n        }\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_allow_search_all$rand'>\" . __('All') . \"</label></td><td>\";\n        $values = [0 => __('No'),\n            1 => sprintf(__('%1$s (%2$s)'), __('Yes'), __('last criterion'))\n        ];\n        Dropdown::showFromArray(\n            'allow_search_all',\n            $values,\n            ['value' => $CFG_GLPI['allow_search_all'], 'rand' => $rand]\n        );\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Item locks') . \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_lock_use_lock_item$rand'>\" . __('Use locks') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"lock_use_lock_item\", $CFG_GLPI[\"lock_use_lock_item\"], -1, ['rand' => $rand]);\n        echo \"</td><td><label for='dropdown_lock_lockprofile_id$rand'>\" . __('Profile to be used when locking items') . \"</label></td><td>\";\n        if ($CFG_GLPI[\"lock_use_lock_item\"]) {\n            Profile::dropdown(['name'                  => 'lock_lockprofile_id',\n                'display_emptychoice'   => true,\n                'value'                 => $CFG_GLPI['lock_lockprofile_id'],\n                'rand'                  => $rand\n            ]);\n        } else {\n            echo Dropdown::getDropdownName(Profile::getTable(), $CFG_GLPI['lock_lockprofile_id']);\n        }\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_lock_item_list$rand'>\" . __('List of items to lock') . \"</label></td>\";\n        echo \"<td colspan=3>\";\n        Dropdown::showFromArray(\n            'lock_item_list',\n            ObjectLock::getLockableObjects(),\n            ['values'   => $CFG_GLPI['lock_item_list'],\n                'width'    => '100%',\n                'multiple' => true,\n                'readonly' => !$CFG_GLPI[\"lock_use_lock_item\"],\n                'rand'     => $rand\n            ]\n        );\n\n        echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\" . __('Auto Login') .\n           \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_login_remember_time$rand'>\" . __('Time to allow \"Remember Me\"') .\n           \"</label></td><td>\";\n        Dropdown::showTimeStamp('login_remember_time', ['value' => $CFG_GLPI[\"login_remember_time\"],\n            'emptylabel'   => __('Disabled'),\n            'min'   => 0,\n            'max'   => MONTH_TIMESTAMP * 2,\n            'step'  => DAY_TIMESTAMP,\n            'toadd' => [HOUR_TIMESTAMP, HOUR_TIMESTAMP * 2, HOUR_TIMESTAMP * 6, HOUR_TIMESTAMP * 12],\n            'rand'  => $rand\n        ]);\n        echo \"<td><label for='dropdown_login_remember_default$rand'>\" . __(\"Default state of checkbox\") . \"</label></td><td>\";\n        Dropdown::showYesNo(\"login_remember_default\", $CFG_GLPI[\"login_remember_default\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_display_login_source$rand'>\" .\n         __('Display source dropdown on login page') .\n         \"</label></td><td>\";\n        Dropdown::showYesNo(\"display_login_source\", $CFG_GLPI[\"display_login_source\"], -1, ['rand' => $rand]);\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='4' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for restrictions\n     *\n     * @return void\n     **/\n    public function showFormInventory()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . _n('Asset', 'Assets', Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_auto_create_infocoms$rand'>\" . __('Enable the financial and administrative information by default') . \"</label></td>\";\n        echo \"<td  width='20%'>\";\n        Dropdown::ShowYesNo('auto_create_infocoms', $CFG_GLPI[\"auto_create_infocoms\"], -1, ['rand' => $rand]);\n        echo \"</td><td width='20%'><label for='dropdown_monitors_management_restrict$rand'>\" . __('Restrict monitor management') . \"</label></td>\";\n        echo \"<td width='30%'>\";\n        $this->dropdownGlobalManagement(\n            \"monitors_management_restrict\",\n            $CFG_GLPI[\"monitors_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_softwarecategories_id_ondelete$rand'>\" . __('Software category deleted by the dictionary rules') .\n           \"</label></td><td>\";\n        SoftwareCategory::dropdown(['value' => $CFG_GLPI[\"softwarecategories_id_ondelete\"],\n            'name'  => \"softwarecategories_id_ondelete\",\n            'rand'  => $rand\n        ]);\n        echo \"</td><td><label for='dropdown_peripherals_management_restrict$rand'>\" . __('Restrict device management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"peripherals_management_restrict\",\n            $CFG_GLPI[\"peripherals_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='showdate$rand'>\" . __('End of fiscal year') . \"</label></td><td>\";\n        Html::showDateField(\"date_tax\", ['value'      => $CFG_GLPI[\"date_tax\"],\n            'maybeempty' => false,\n            'canedit'    => true,\n            'min'        => '',\n            'max'        => '',\n            'showyear'   => false,\n            'rand'       => $rand\n        ]);\n        echo \"</td><td><label for='dropdown_phones_management_restrict$rand'>\" . __('Restrict phone management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"phones_management_restrict\",\n            $CFG_GLPI[\"phones_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_use_autoname_by_entity$rand'>\" . __('Automatic fields (marked by *)') . \"</label></td><td>\";\n        $tab = [0 => __('Global'),\n            1 => __('By entity')\n        ];\n        Dropdown::showFromArray(\n            'use_autoname_by_entity',\n            $tab,\n            ['value' => $CFG_GLPI[\"use_autoname_by_entity\"], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_printers_management_restrict$rand'>\" . __('Restrict printer management') . \"</label></td><td>\";\n        $this->dropdownGlobalManagement(\n            \"printers_management_restrict\",\n            $CFG_GLPI[\"printers_management_restrict\"],\n            $rand\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='devices_in_menu$rand'>\" . __('Devices displayed in menu') . \"</label></td>\";\n        echo \"<td>\";\n\n        $dd_params = [\n            'name'      => 'devices_in_menu',\n            'values'    => $CFG_GLPI['devices_in_menu'],\n            'display'   => true,\n            'rand'      => $rand,\n            'multiple'  => true,\n            'size'      => 3\n        ];\n\n        $item_devices_types = [];\n        foreach ($CFG_GLPI['itemdevices'] as $key => $itemtype) {\n            if ($item = getItemForItemtype($itemtype)) {\n                $item_devices_types[$itemtype] = $item->getTypeName();\n            } else {\n                unset($CFG_GLPI['itemdevices'][$key]);\n            }\n        }\n\n        Dropdown::showFromArray($dd_params['name'], $item_devices_types, $dd_params);\n\n        echo \"<input type='hidden' name='_update_devices_in_menu' value='1'>\";\n        echo \"</td>\";\n        echo \"</tr>\\n\";\n\n        echo \"</table>\";\n\n        echo \"<br><table class='tab_cadre_fixe'>\";\n        echo \"<tr>\";\n        echo \"<th colspan='4'>\" . __('Automatically update of the elements related to the computers');\n        echo \"</th><th colspan='2'>\" . __('Unit management') . \"</th></tr>\";\n\n        echo \"<tr><th>&nbsp;</th>\";\n        echo \"<th>\" . __('Alternate username') . \"</th>\";\n        echo \"<th>\" . User::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . Group::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . Location::getTypeName(1) . \"</th>\";\n        echo \"<th>\" . __('Status') . \"</th>\";\n        echo \"</tr>\";\n\n        $fields = [\"contact\", \"user\", \"group\", \"location\"];\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('When connecting or updating') . \"</td>\";\n        $values = [\n            __('Do not copy'),\n            __('Copy'),\n        ];\n\n        foreach ($fields as $field) {\n            echo \"<td>\";\n            $fieldname = \"is_\" . $field . \"_autoupdate\";\n            Dropdown::showFromArray($fieldname, $values, ['value' => $CFG_GLPI[$fieldname]]);\n            echo \"</td>\";\n        }\n\n        echo \"<td>\";\n        State::dropdownBehaviour(\n            \"state_autoupdate_mode\",\n            __('Copy computer status'),\n            $CFG_GLPI[\"state_autoupdate_mode\"]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('When disconnecting') . \"</td>\";\n        $values = [\n            __('Do not delete'),\n            __('Clear'),\n        ];\n\n        foreach ($fields as $field) {\n            echo \"<td>\";\n            $fieldname = \"is_\" . $field . \"_autoclean\";\n            Dropdown::showFromArray($fieldname, $values, ['value' => $CFG_GLPI[$fieldname]]);\n            echo \"</td>\";\n        }\n\n        echo \"<td>\";\n        State::dropdownBehaviour(\n            \"state_autoclean_mode\",\n            __('Clear status'),\n            $CFG_GLPI[\"state_autoclean_mode\"]\n        );\n        echo \"</td></tr>\";\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='6' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for restrictions\n     *\n     * @return void\n     **/\n    public function showFormAuthentication()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return;\n        }\n\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<div class='card' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . __('Authentication') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'>\" . __('Automatically add users from an external authentication source') .\n           \"</td><td width='20%'>\";\n        Dropdown::showYesNo(\"is_users_auto_add\", $CFG_GLPI[\"is_users_auto_add\"]);\n        echo \"</td><td width='30%'>\" . __('Add a user without accreditation from a LDAP directory') .\n           \"</td><td width='20%'>\";\n        Dropdown::showYesNo(\"use_noright_users_add\", $CFG_GLPI[\"use_noright_users_add\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('Action when a user is deleted from the LDAP directory') . \"</td><td>\";\n        AuthLDAP::dropdownUserDeletedActions($CFG_GLPI[\"user_deleted_ldap\"]);\n        echo \"</td><td> \" . __('Action when a user is restored in the LDAP directory') . \"</td><td>\";\n        AuthLDAP::dropdownUserRestoredActions($CFG_GLPI[\"user_restored_ldap\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td> \" . __('GLPI server time zone') . \"</td><td>\";\n        Dropdown::showGMT(\"time_offset\", $CFG_GLPI[\"time_offset\"]);\n        echo \"</td><td></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update_auth' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') .\n           \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for slave DB\n     *\n     * @return void\n     **/\n    public function showFormDBSlave()\n    {\n        global $DB, $CFG_GLPI, $DBslave;\n\n        if (!Config::canUpdate()) {\n            return;\n        }\n\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<input type='hidden' name='_dbslave_status' value='1'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_2'><th colspan='4'>\" . _n('SQL replica', 'SQL replicas', Session::getPluralNumber()) .\n           \"</th></tr>\";\n        $DBslave = DBConnection::getDBSlaveConf();\n\n        if (is_array($DBslave->dbhost)) {\n            $host = implode(' ', $DBslave->dbhost);\n        } else {\n            $host = $DBslave->dbhost;\n        }\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('SQL server (MariaDB or MySQL)') . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbhost' size='40' value='$host'></td>\";\n        echo \"<td>\" . _n('Database', 'Databases', 1) . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbdefault' value='\" . $DBslave->dbdefault . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('SQL user') . \"</td>\";\n        echo \"<td><input type='text' name='_dbreplicate_dbuser' value='\" . $DBslave->dbuser . \"'></td>\";\n        echo \"<td>\" . __('SQL password') . \"</td>\";\n        echo \"<td><input type='password' name='_dbreplicate_dbpassword' value='\" .\n                 rawurldecode($DBslave->dbpassword) . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Use the replica for the search engine') . \"</td><td>\";\n        $values = [0 => __('Never'),\n            1 => __('If synced (all changes)'),\n            2 => __('If synced (current user changes)'),\n            3 => __('If synced or read-only account'),\n            4 => __('Always')\n        ];\n        Dropdown::showFromArray(\n            'use_slave_for_search',\n            $values,\n            ['value' => $CFG_GLPI[\"use_slave_for_search\"]]\n        );\n        echo \"<td colspan='2'>&nbsp;</td>\";\n        echo \"</tr>\";\n\n        if ($DBslave->connected && !$DB->isSlave()) {\n            echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n            DBConnection::showAllReplicateDelay();\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for External API\n     *\n     * @since 9.1\n     * @return void\n     **/\n    public function showFormAPI()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        echo \"<div class='center spaced' id='tabsbody'>\";\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('API') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='url_base_api'>\" . __('URL of the API') . \"</label></td>\";\n        echo \"<td colspan='3'><input type='url' name='url_base_api' id='url_base_api' value='\" . $CFG_GLPI[\"url_base_api\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_enable_api$rand'>\" . __(\"Enable Rest API\") . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api\", $CFG_GLPI[\"enable_api\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        if ($CFG_GLPI[\"enable_api\"]) {\n            echo \"<td colspan='2'>\";\n            $inline_doc_api = trim($CFG_GLPI['url_base_api'], '/') . \"/\";\n            echo \"<a href='$inline_doc_api'>\" . __(\"API inline Documentation\") . \"</a>\";\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Authentication') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_enable_api_login_credentials$rand'>\";\n        echo __(\"Enable login with credentials\") . \"</label>&nbsp;\";\n        Html::showToolTip(__(\"Allow to login to API and get a session token with user credentials\"));\n        echo \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api_login_credentials\", $CFG_GLPI[\"enable_api_login_credentials\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_enable_api_login_external_token$rand'>\";\n        echo __(\"Enable login with external token\") . \"</label>&nbsp;\";\n        Html::showToolTip(__(\"Allow to login to API and get a session token with user external token. See Remote access key in user Settings tab \"));\n        echo \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"enable_api_login_external_token\", $CFG_GLPI[\"enable_api_login_external_token\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"<br><br><br>\";\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><td>\";\n        echo \"<hr>\";\n        $buttons = [\n            'apiclient.form.php' => __('Add API client'),\n        ];\n        Html::displayTitle(\n            \"\",\n            self::getTypeName(Session::getPluralNumber()),\n            \"\",\n            $buttons\n        );\n        Search::show(\"APIClient\");\n        echo \"</td></tr>\";\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Print the config form for connections\n     *\n     * @return void\n     **/\n    public function showFormHelpdesk()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        }\n        echo \"<div class='center spaced' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Assistance') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_time_step$rand'>\" . __('Step for the hours (minutes)') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showNumber('time_step', ['value' => $CFG_GLPI[\"time_step\"],\n            'min'   => 30,\n            'max'   => 60,\n            'step'  => 30,\n            'toadd' => [1  => 1,\n                5  => 5,\n                10 => 10,\n                15 => 15,\n                20 => 20\n            ],\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td width='30%'><label for='dropdown_planning_begin$rand'>\" . __('Limit of the schedules for planning') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showHours('planning_begin', ['value' => $CFG_GLPI[\"planning_begin\"], 'rand' => $rand]);\n        echo \"&nbsp;<label for='dropdown_planning_end$rand'>-></label>&nbsp;\";\n        Dropdown::showHours('planning_end', ['value' => $CFG_GLPI[\"planning_end\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_default_mailcollector_filesize_max$rand'>\" . __('Default file size limit imported by the mails receiver') . \"</label></td><td>\";\n        MailCollector::showMaxFilesize(\n            'default_mailcollector_filesize_max',\n            $CFG_GLPI[\"default_mailcollector_filesize_max\"],\n            $rand\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_documentcategories_id_forticket$rand'>\" . __('Default heading when adding a document to a ticket') . \"</label></td><td>\";\n        DocumentCategory::dropdown(['value' => $CFG_GLPI[\"documentcategories_id_forticket\"],\n            'name'  => \"documentcategories_id_forticket\",\n            'rand'  => $rand\n        ]);\n        echo \"</td></tr>\";\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_default_software_helpdesk_visible$rand'>\" . __('By default, a software may be linked to a ticket') . \"</label></td><td>\";\n        Dropdown::showYesNo(\n            \"default_software_helpdesk_visible\",\n            $CFG_GLPI[\"default_software_helpdesk_visible\"],\n            -1,\n            ['rand' => $rand]\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_keep_tickets_on_delete$rand'>\" . __('Keep tickets when purging hardware in the inventory') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"keep_tickets_on_delete\", $CFG_GLPI[\"keep_tickets_on_delete\"], -1, ['rand' => $rand]);\n        echo \"</td></tr><tr class='tab_bg_2'><td><label for='dropdown_use_check_pref$rand'>\" . __('Show personnal information in new ticket form (simplified interface)');\n        echo \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('use_check_pref', $CFG_GLPI['use_check_pref'], -1, ['rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_use_anonymous_helpdesk$rand'>\" . __('Allow anonymous ticket creation (helpdesk.receiver)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_anonymous_helpdesk\", $CFG_GLPI[\"use_anonymous_helpdesk\"], -1, ['rand' => $rand]);\n        echo \"</td></tr><tr class='tab_bg_2'><td><label for='dropdown_use_anonymous_followups$rand'>\" . __('Allow anonymous followups (receiver)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_anonymous_followups\", $CFG_GLPI[\"use_anonymous_followups\"], -1, ['rand' => $rand]);\n        echo \"</td><td colspan='2'></td></tr>\";\n\n        echo \"<tr>\";\n        echo \"<td>\";\n        echo \"<label for='dropdown_planning_work_days$rand'>\" . __('Planning work days') . \"</label>\";\n        echo \"</td>\";\n        echo \"<td colspan='3'>\";\n        Dropdown::showFromArray(\n            \"planning_work_days\",\n            [\n                1 => __(\"Monday\"),\n                2 => __(\"Tuesday\"),\n                3 => __(\"Wednesday\"),\n                4 => __(\"Thursday\"),\n                5 => __(\"Friday\"),\n                6 => __(\"Saturday\"),\n                0 => __(\"Sunday\"),\n            ],\n            [\n                'values'   => $CFG_GLPI[\"planning_work_days\"],\n                'multiple' => true,\n                'rand'     => $rand,\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n        echo \"</table>\";\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='7'>\" . __('Matrix of calculus for priority');\n        echo \"<input type='hidden' name='_matrix' value='1'></th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td class='b right' colspan='2'>\" . __('Impact') . \"</td>\";\n\n        $isimpact = [];\n        for ($impact = 5; $impact >= 1; $impact--) {\n            echo \"<td class='center'>\" . Ticket::getImpactName($impact) . '<br>';\n\n            if ($impact == 3) {\n                $isimpact[3] = 1;\n                echo \"<input type='hidden' name='_impact_3' value='1'>\";\n            } else {\n                $isimpact[$impact] = (($CFG_GLPI['impact_mask'] & (1 << $impact)) > 0);\n                Dropdown::showYesNo(\"_impact_${impact}\", $isimpact[$impact]);\n            }\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='b' colspan='2'>\" . __('Urgency') . \"</td>\";\n\n        for ($impact = 5; $impact >= 1; $impact--) {\n            echo \"<td>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        $isurgency = [];\n        for ($urgency = 5; $urgency >= 1; $urgency--) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . Ticket::getUrgencyName($urgency) . \"&nbsp;</td>\";\n            echo \"<td>\";\n\n            if ($urgency == 3) {\n                $isurgency[3] = 1;\n                echo \"<input type='hidden' name='_urgency_3' value='1'>\";\n            } else {\n                $isurgency[$urgency] = (($CFG_GLPI['urgency_mask'] & (1 << $urgency)) > 0);\n                Dropdown::showYesNo(\"_urgency_${urgency}\", $isurgency[$urgency]);\n            }\n            echo \"</td>\";\n\n            for ($impact = 5; $impact >= 1; $impact--) {\n                $pri = round(($urgency + $impact) / 2);\n\n                if (isset($CFG_GLPI['priority_matrix'][$urgency][$impact])) {\n                    $pri = $CFG_GLPI['priority_matrix'][$urgency][$impact];\n                }\n\n                if ($isurgency[$urgency] && $isimpact[$impact]) {\n                    $bgcolor = $_SESSION[\"glpipriority_$pri\"];\n                    echo \"<td class='center' bgcolor='$bgcolor'>\";\n                    Ticket::dropdownPriority(['value' => $pri,\n                        'name'  => \"_matrix_${urgency}_${impact}\"\n                    ]);\n                    echo \"</td>\";\n                } else {\n                    echo \"<td><input type='hidden' name='_matrix_${urgency}_${impact}' value='$pri'>\n                     </td>\";\n                }\n            }\n            echo \"</tr>\\n\";\n        }\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='7' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Print the config form for default user prefs\n     *\n     * @param $data array containing datas\n     * (CFG_GLPI for global config / glpi_users fields for user prefs)\n     *\n     * @return void\n     **/\n    public function showFormUserPrefs($data = [])\n    {\n        global $CFG_GLPI, $DB;\n\n        $oncentral = (Session::getCurrentInterface() == \"central\");\n        $userpref  = false;\n        $url       = Toolbox::getItemTypeFormURL(__CLASS__);\n        $rand      = mt_rand();\n\n        $canedit = Config::canUpdate();\n        $canedituser = Session::haveRight('personalization', UPDATE);\n        if (array_key_exists('last_login', $data)) {\n            $userpref = true;\n            if ($data[\"id\"] === Session::getLoginUserID()) {\n                $url  = $CFG_GLPI['root_doc'] . \"/front/preference.php\";\n            } else {\n                $url  = User::getFormURL();\n            }\n        }\n\n        if ((!$userpref && $canedit) || ($userpref && $canedituser)) {\n            echo \"<form name='form' action='$url' method='post' data-track-changes='true'>\";\n        }\n\n       // Only set id for user prefs\n        if ($userpref) {\n            echo \"<input type='hidden' name='id' value='\" . $data['id'] . \"'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('Personalization') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td width='30%'><label for='dropdown_language$rand'>\" . ($userpref ? __('Language') : __('Default language')) . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        if (\n            Config::canUpdate()\n            || !GLPI_DEMO_MODE\n        ) {\n            Dropdown::showLanguages(\"language\", ['value' => $data[\"language\"], 'rand' => $rand]);\n        } else {\n            echo \"&nbsp;\";\n        }\n\n        echo \"<td width='30%'><label for='dropdown_date_format$rand'>\" . __('Date format') . \"</label></td>\";\n        echo \"<td width='20%'>\";\n        Dropdown::showFromArray('date_format', Toolbox::phpDateFormats(), ['value' => $data[\"date_format\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_names_format$rand'>\" . __('Display order of surnames firstnames') . \"</label></td><td>\";\n        $values = [User::REALNAME_BEFORE  => __('Surname, First name'),\n            User::FIRSTNAME_BEFORE => __('First name, Surname')\n        ];\n        Dropdown::showFromArray('names_format', $values, ['value' => $data[\"names_format\"], 'rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_number_format$rand'>\" . __('Number format') . \"</label></td>\";\n        $values = [0 => '1 234.56',\n            1 => '1,234.56',\n            2 => '1 234,56',\n            3 => '1234.56',\n            4 => '1234,56'\n        ];\n        echo \"<td>\";\n        Dropdown::showFromArray('number_format', $values, ['value' => $data[\"number_format\"], 'rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_list_limit$rand'>\" . __('Results to display by page') . \"</label></td><td>\";\n       // Limit using global config\n        $value = (($data['list_limit'] < $CFG_GLPI['list_limit_max'])\n                ? $data['list_limit'] : $CFG_GLPI['list_limit_max']);\n        Dropdown::showNumber('list_limit', ['value' => $value,\n            'min'   => 5,\n            'max'   => $CFG_GLPI['list_limit_max'],\n            'step'  => 5,\n            'rand'  => $rand\n        ]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_backcreated$rand'>\" . __('Go to created item after creation') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"backcreated\", $data[\"backcreated\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_use_flat_dropdowntree$rand'>\" . __('Display the complete name in tree dropdowns') . \"</label></td><td>\";\n            Dropdown::showYesNo('use_flat_dropdowntree', $data[\"use_flat_dropdowntree\"], -1, ['rand' => $rand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n\n        if (\n            !$userpref\n            || ($CFG_GLPI['show_count_on_tabs'] != -1)\n        ) {\n            echo \"<td><label for='dropdown_show_count_on_tabs$rand'>\" . __('Display counters') . \"</label></td><td>\";\n\n            $values = [0 => __('No'),\n                1 => __('Yes')\n            ];\n\n            if (!$userpref) {\n                $values[-1] = __('Never');\n            }\n            Dropdown::showFromArray(\n                'show_count_on_tabs',\n                $values,\n                ['value' => $data[\"show_count_on_tabs\"], 'rand' => $rand]\n            );\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_is_ids_visible$rand'>\" . __('Show GLPI ID') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"is_ids_visible\", $data[\"is_ids_visible\"], -1, ['rand' => $rand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'></td>\";\n        }\n\n        echo \"<td><label for='dropdown_keep_devices_when_purging_item$rand'>\" . __('Keep devices when purging an item') . \"</label></td><td>\";\n        Dropdown::showYesNo(\n            'keep_devices_when_purging_item',\n            $data['keep_devices_when_purging_item'],\n            -1,\n            ['rand' => $rand]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_notification_to_myself$rand'>\" . __('Notifications for my changes') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"notification_to_myself\", $data[\"notification_to_myself\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        if ($oncentral) {\n            echo \"<td><label for='dropdown_display_count_on_home$rand'>\" . __('Results to display on home page') . \"</label></td><td>\";\n            Dropdown::showNumber(\n                'display_count_on_home',\n                ['value' => $data['display_count_on_home'],\n                    'min'   => 0,\n                    'max'   => 30,\n                    'rand'  => $rand\n                ]\n            );\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_pdffont$rand'>\" . __('PDF export font') . \"</label></td><td>\";\n        Dropdown::showFromArray(\n            \"pdffont\",\n            GLPIPDF::getFontList(),\n            ['value' => $data[\"pdffont\"],\n                'width' => 200,\n                'rand'  => $rand\n            ]\n        );\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_csv_delimiter$rand'>\" . __('CSV delimiter') . \"</label></td><td>\";\n        $values = [';' => ';',\n            ',' => ','\n        ];\n        Dropdown::showFromArray('csv_delimiter', $values, ['value' => $data[\"csv_delimiter\"], 'rand' => $rand]);\n\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='theme-selector'>\" . __(\"Color palette\") . \"</label></td><td>\";\n        echo Html::select(\n            'palette',\n            $this->getPalettes(),\n            [\n                'id'        => 'theme-selector',\n                'selected'  => $data['palette']\n            ]\n        );\n        echo Html::scriptBlock(\"\n         function formatThemes(theme) {\n             if (!theme.id) {\n                return theme.text;\n             }\n\n             return $('<span></span>').html('<img src=\\'../css/palettes/previews/' + theme.text.toLowerCase() + '.png\\'/>'\n                      + '&nbsp;' + theme.text);\n         }\n         $(\\\"#theme-selector\\\").select2({\n             templateResult: formatThemes,\n             templateSelection: formatThemes,\n             width: '100%',\n             escapeMarkup: function(m) { return m; }\n         });\n         $('label[for=theme-selector]').on('click', function(){ $('#theme-selector').select2('open'); });\n      \");\n        echo \"</td>\";\n        echo \"<td>\";\n\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_page_layout$rand'>\" . __('Page layout') . \"</label></td>\";\n        echo \"<td>\";\n\n        $global_layout_options = [\n            'horizontal' => __('Horizontal (menu in header)'),\n            'vertical'   => __('Vertical (menu in sidebar)'),\n        ];\n        echo Html::select(\n            'page_layout',\n            $global_layout_options,\n            [\n                'id'        => 'global-layout-selector',\n                'selected'  => $data['page_layout']\n            ]\n        );\n\n        echo Html::scriptBlock(\"\n         function formatGlobalLayout(layout) {\n             if (!layout.id) {\n                return layout.text;\n             }\n             return $('<span></span>').html('<img src=\\'../pics/layout/global_layout_' + layout.id.toLowerCase() + '.png\\'/>'\n                      + '&nbsp;' + layout.text);\n         }\n         $('#global-layout-selector').select2({\n             dropdownAutoWidth: true,\n             templateResult: formatGlobalLayout,\n             templateSelection: formatGlobalLayout\n         });\n         $('label[for=global-layout-selector]').on('click', function(){\n            $('#global-layout-selector').select2('open');\n         });\n      \");\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_richtext_layout$rand'>\" . __('Rich text field layout') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showFromArray(\n            'richtext_layout',\n            [\n                'inline'  => __('Inline (no toolbars)'),\n                'classic' => __('Classic (toolbar on top)'),\n            ],\n            [\n                'value' => $data[\"richtext_layout\"],\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_highcontrast_css$rand'>\" . __('Enable high contrast') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('highcontrast_css', $data['highcontrast_css'], -1, ['rand' => $rand]);\n        echo \"</td>\";\n        echo \"<td><label for='dropdown_timezone$rand'>\" . __('Timezone') . \"</label></td>\";\n        echo \"<td>\";\n        if ($DB->use_timezones) {\n            $timezones = $DB->getTimezones();\n            Dropdown::showFromArray(\n                'timezone',\n                $timezones,\n                [\n                    'value'                 => $data[\"timezone\"] ?? \"\",\n                    'display_emptychoice'   => true,\n                    'emptylabel'            => __('Use server configuration')\n                ]\n            );\n        } else {\n            echo __('Timezone usage has not been activated.')\n            . ' '\n            . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n        }\n\n        echo \"<tr class='tab_bg_2'><td><label for='dropdown_default_central_tab$rand'>\" . __('Default central tab') . \"</label></td>\";\n        echo \"<td>\";\n        $central = new Central();\n        Dropdown::showFromArray('default_central_tab', $central->getTabNameForItem($central, 0), ['value' => $data['default_central_tab'], 'rand' => $rand]);\n        echo \"</td>\";\n\n        echo \"<td><label for='dropdown_timeline_order$rand'>\" . __('Timeline order') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showFromArray('timeline_order', [\n            CommonITILObject::TIMELINE_ORDER_NATURAL => __('Natural order (old items on top, recent on bottom)'),\n            CommonITILObject::TIMELINE_ORDER_REVERSE => __('Reverse order (old items on bottom, recent on top)'),\n        ], [\n            'value' => $data['timeline_order'],\n            'rand' => $rand\n        ]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        if ($oncentral) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Assistance') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td><label for='dropdown_followup_private$rand'>\" . __('Private followups by default') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"followup_private\", $data[\"followup_private\"], -1, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_show_jobs_at_login$rand'>\" . __('Show new tickets on the home page') . \"</label></td><td>\";\n            if (\n                Session::haveRightsOr(\n                    \"ticket\",\n                    [Ticket::READMY, Ticket::READALL, Ticket::READASSIGN]\n                )\n            ) {\n                Dropdown::showYesNo(\"show_jobs_at_login\", $data[\"show_jobs_at_login\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \" </td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_task_private$rand'>\" . __('Private tasks by default') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"task_private\", $data[\"task_private\"], -1, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_default_requesttypes_id$rand'>\" . __('Request sources by default') . \"</label></td><td>\";\n            RequestType::dropdown([\n                'value'      => $data[\"default_requesttypes_id\"],\n                'name'       => \"default_requesttypes_id\",\n                'condition'  => ['is_active' => 1, 'is_ticketheader' => 1],\n                'rand'       => $rand\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_task_state$rand'>\" . __('Tasks state by default') . \"</label></td><td>\";\n            Planning::dropdownState(\"task_state\", $data[\"task_state\"], true, ['rand' => $rand]);\n            echo \"</td><td><label for='dropdown_refresh_views$rand'>\" . __('Automatically refresh data (tickets list, project kanban) in minutes.') . \"</label></td><td>\";\n            Dropdown::showNumber('refresh_views', ['value' => $data[\"refresh_views\"],\n                'min'   => 1,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [0 => __('Never')],\n                'rand'  => $rand\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'><td><label for='dropdown_set_default_tech$rand'>\" . __('Pre-select me as a technician when creating a ticket') .\n              \"</label></td><td>\";\n            if (!$userpref || Session::haveRight('ticket', Ticket::OWN)) {\n                Dropdown::showYesNo(\"set_default_tech\", $data[\"set_default_tech\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \"</td><td><label for='dropdown_set_default_requester$rand'>\" . __('Pre-select me as a requester when creating a ticket') . \"</label></td><td>\";\n            if (!$userpref || Session::haveRight('ticket', CREATE)) {\n                Dropdown::showYesNo(\"set_default_requester\", $data[\"set_default_requester\"], -1, ['rand' => $rand]);\n            } else {\n                echo Dropdown::getYesNo(0);\n            }\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Priority colors') . \"</td>\";\n            echo \"<td colspan='3'>\";\n\n            echo \"<table><tr>\";\n            echo \"<td><label for='dropdown_priority_1$rand'>1</label>&nbsp;\";\n            Html::showColorField('priority_1', ['value' => $data[\"priority_1\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_2$rand'>2</label>&nbsp;\";\n            Html::showColorField('priority_2', ['value' => $data[\"priority_2\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_3$rand'>3</label>&nbsp;\";\n            Html::showColorField('priority_3', ['value' => $data[\"priority_3\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_4$rand'>4</label>&nbsp;\";\n            Html::showColorField('priority_4', ['value' => $data[\"priority_4\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_5$rand'>5</label>&nbsp;\";\n            Html::showColorField('priority_5', ['value' => $data[\"priority_5\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"<td><label for='dropdown_priority_6$rand'>6</label>&nbsp;\";\n            Html::showColorField('priority_6', ['value' => $data[\"priority_6\"], 'rand' => $rand]);\n            echo \"</td>\";\n            echo \"</tr></table>\";\n\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('Due date progression') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\" .\n           \"<td>\" . __('OK state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedateok_color', ['value' => $data[\"duedateok_color\"]]);\n        echo \"</td><td colspan='2'>&nbsp;</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Warning state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedatewarning_color', ['value' => $data[\"duedatewarning_color\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('Warning state threshold') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"duedatewarning_less\", ['value' => $data['duedatewarning_less']]);\n        $elements = ['%'     => '%',\n            'hours' => _n('Hour', 'Hours', Session::getPluralNumber()),\n            'days'  => _n('Day', 'Days', Session::getPluralNumber())\n        ];\n        echo \"&nbsp;\";\n        Dropdown::showFromArray(\n            \"duedatewarning_unit\",\n            $elements,\n            ['value' => $data['duedatewarning_unit']]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\" .\n           \"<td>\" . __('Critical state color') . \"</td>\";\n        echo \"<td>\";\n        Html::showColorField('duedatecritical_color', ['value' => $data[\"duedatecritical_color\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('Critical state threshold') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"duedatecritical_less\", ['value' => $data['duedatecritical_less']]);\n        echo \"&nbsp;\";\n        $elements = ['%'    => '%',\n            'hours' => _n('Hour', 'Hours', Session::getPluralNumber()),\n            'days'  => _n('Day', 'Days', Session::getPluralNumber())\n        ];\n        Dropdown::showFromArray(\n            \"duedatecritical_unit\",\n            $elements,\n            ['value' => $data['duedatecritical_unit']]\n        );\n        echo \"</td></tr>\";\n\n        if ($oncentral && $CFG_GLPI[\"lock_use_lock_item\"]) {\n            echo \"<tr class='tab_bg_1'><th colspan='4' class='center b'>\" . __('Item locks') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Auto-lock Mode') . \"</td><td>\";\n            Dropdown::showYesNo(\"lock_autolock_mode\", $data[\"lock_autolock_mode\"]);\n            echo \"</td><td>\" . __('Direct Notification (requester for unlock will be the notification sender)') .\n              \"</td><td>\";\n            Dropdown::showYesNo(\"lock_directunlock_notification\", $data[\"lock_directunlock_notification\"]);\n            echo \"</td></tr>\";\n        }\n\n        if (Grid::canViewOneDashboard()) {\n            echo \"<tr class='tab_bg_1'><th colspan='4' class='center b'>\" . __('Dashboards') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Default for central') . \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_central\", [\n                'value' => $data['default_dashboard_central'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td><td>\" . __('Default for Assets') .\n             \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_assets\", [\n                'value' => $data['default_dashboard_assets'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Default for Assistance') . \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_helpdesk\", [\n                'value' => $data['default_dashboard_helpdesk'],\n                'display_emptychoice' => true\n            ]);\n            echo \"</td><td>\" . __('Default for tickets (mini dashboard)') .\n             \"</td><td>\";\n            Grid::dropdownDashboard(\"default_dashboard_mini_ticket\", [\n                'value' => $data['default_dashboard_mini_ticket'],\n                'display_emptychoice' => true,\n                'context'   => 'mini_core',\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        if ((!$userpref && $canedit) || ($userpref && $canedituser)) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='4' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Check if the \"use_password_security\" parameter is enabled\n     *\n     * @return bool\n     */\n    public static function arePasswordSecurityChecksEnabled(): bool\n    {\n        global $CFG_GLPI;\n\n        return $CFG_GLPI[\"use_password_security\"];\n    }\n\n    /**\n     * Display security checks on password\n     *\n     * @param $field string id of the field containing password to check (default 'password')\n     *\n     * @since 0.84\n     **/\n    public static function displayPasswordSecurityChecks($field = 'password')\n    {\n        global $CFG_GLPI;\n\n        $needs = [];\n\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            printf(\n                __('%1$s: %2$s'),\n                __('Password minimum length'),\n                \"<span id='password_min_length' class='red'>\" . $CFG_GLPI['password_min_length'] .\n                \"</span>\"\n            );\n        }\n\n        echo \"<script type='text/javascript' >\\n\";\n        echo \"function passwordCheck() {\\n\";\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            echo \"var pwd = \" . Html::jsGetElementbyID($field) . \";\";\n            echo \"if (pwd.val().length < \" . $CFG_GLPI['password_min_length'] . \") {\n               \" . Html::jsGetElementByID('password_min_length') . \".addClass('red');\n               \" . Html::jsGetElementByID('password_min_length') . \".removeClass('green');\n         } else {\n               \" . Html::jsGetElementByID('password_min_length') . \".addClass('green');\n               \" . Html::jsGetElementByID('password_min_length') . \".removeClass('red');\n         }\";\n            if ($CFG_GLPI[\"password_need_number\"]) {\n                $needs[] = \"<span id='password_need_number' class='red'>\" . __('Digit') . \"</span>\";\n                echo \"var numberRegex = new RegExp('[0-9]', 'g');\n            if (false == numberRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_number') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_number') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_number') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_number') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_letter\"]) {\n                $needs[] = \"<span id='password_need_letter' class='red'>\" . __('Lowercase') . \"</span>\";\n                echo \"var letterRegex = new RegExp('[a-z]', 'g');\n            if (false == letterRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_letter') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_letter') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_letter') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_letter') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_caps\"]) {\n                $needs[] = \"<span id='password_need_caps' class='red'>\" . __('Uppercase') . \"</span>\";\n                echo \"var capsRegex = new RegExp('[A-Z]', 'g');\n            if (false == capsRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_caps') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_caps') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_caps') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_caps') . \".removeClass('red');\n            }\";\n            }\n            if ($CFG_GLPI[\"password_need_symbol\"]) {\n                $needs[] = \"<span id='password_need_symbol' class='red'>\" . __('Symbol') . \"</span>\";\n                echo \"var capsRegex = new RegExp('[^a-zA-Z0-9_]', 'g');\n            if (false == capsRegex.test(pwd.val())) {\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".addClass('red');\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".removeClass('green');\n            } else {\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".addClass('green');\n                  \" . Html::jsGetElementByID('password_need_symbol') . \".removeClass('red');\n            }\";\n            }\n        }\n        echo \"}\";\n        echo '</script>';\n        if (count($needs)) {\n            echo \"<br>\";\n            printf(__('%1$s: %2$s'), __('Password must contains'), implode(', ', $needs));\n        }\n    }\n\n\n    /**\n     * Validate password based on security rules\n     *\n     * @since 0.84\n     *\n     * @param $password  string   password to validate\n     * @param $display   boolean  display errors messages? (true by default)\n     *\n     * @throws PasswordTooWeakException when $display is false and the password does not matches the requirements\n     *\n     * @return boolean is password valid?\n     **/\n    public static function validatePassword($password, $display = true)\n    {\n        global $CFG_GLPI;\n\n        $ok = true;\n        $exception = new \\Glpi\\Exception\\PasswordTooWeakException();\n        if ($CFG_GLPI[\"use_password_security\"]) {\n            if (Toolbox::strlen($password) < $CFG_GLPI['password_min_length']) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(__('Password too short!'), false, ERROR);\n                } else {\n                    $exception->addMessage(__('Password too short!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_number\"]\n                && !preg_match(\"/[0-9]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a digit!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a digit!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_letter\"]\n                && !preg_match(\"/[a-z]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a lowercase letter!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a lowercase letter!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_caps\"]\n                && !preg_match(\"/[A-Z]+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a uppercase letter!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a uppercase letter!'));\n                }\n            }\n            if (\n                $CFG_GLPI[\"password_need_symbol\"]\n                && !preg_match(\"/\\W+/\", $password)\n            ) {\n                $ok = false;\n                if ($display) {\n                    Session::addMessageAfterRedirect(\n                        __('Password must include at least a symbol!'),\n                        false,\n                        ERROR\n                    );\n                } else {\n                    $exception->addMessage(__('Password must include at least a symbol!'));\n                }\n            }\n        }\n        if (!$ok && !$display) {\n            throw $exception;\n        }\n        return $ok;\n    }\n\n\n    /**\n     * Display a report about system performance\n     * - opcode cache (opcache)\n     * - core cache\n     * - translations cache\n     *\n     * @since 9.1\n     **/\n    public function showPerformanceInformations()\n    {\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='4'>\" . __('PHP opcode cache') . \"</th></tr>\";\n        $ext = 'Zend OPcache';\n        if (extension_loaded($ext) && ($info = opcache_get_status(false))) {\n            $msg = sprintf(__s('%s extension is installed'), $ext);\n            echo \"<tr><td>\" . sprintf(__('The \"%s\" extension is installed'), $ext) . \"</td>\n               <td>\" . phpversion($ext) . \"</td>\n               <td></td>\n               <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'><span class='sr-only'>$msg</span></td></tr>\";\n\n           // Memory\n            $used = $info['memory_usage']['used_memory'];\n            $free = $info['memory_usage']['free_memory'];\n            $rate = round(100.0 * $used / ($used + $free));\n            $max  = Toolbox::getSize($used + $free);\n            $used = Toolbox::getSize($used);\n            echo \"<tr><td>\" . _n('Memory', 'Memories', 1) . \"</td>\n               <td>\" . sprintf(__('%1$s / %2$s'), $used, $max) . \"</td><td>\";\n            Html::displayProgressBar('100', $rate, ['simple'       => true,\n                'forcepadding' => false\n            ]);\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s memory usage is too low or too high'), $ext);\n            if ($rate > 5 && $rate < 75) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s memory usage is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n           // Hits\n            $hits = $info['opcache_statistics']['hits'];\n            $miss = $info['opcache_statistics']['misses'];\n            $max  = $hits + $miss;\n            $rate = round($info['opcache_statistics']['opcache_hit_rate']);\n            echo \"<tr><td>\" . __('Hits rate') . \"</td>\n               <td>\" . sprintf(__('%1$s / %2$s'), $hits, $max) . \"</td><td>\";\n            Html::displayProgressBar('100', $rate, ['simple'       => true,\n                'forcepadding' => false\n            ]);\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s hits rate is low'), $ext);\n            if ($rate > 90) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s hits rate is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n           // Restart (1 seems ok, can happen)\n            $max = $info['opcache_statistics']['oom_restarts'];\n            echo \"<tr><td>\" . __('Out of memory restart') . \"</td>\n               <td>$max</td><td>\";\n\n            $class   = 'info-circle missing';\n            $msg     = sprintf(__s('%1$s restart rate is too high'), $ext);\n            if ($max < 2) {\n                $class   = 'check-circle ok';\n                $msg     = sprintf(__s('%1$s restart rate is correct'), $ext);\n            }\n            echo \"</td><td class='icons_block'><i title='$msg' class='fa fa-$class'></td></tr>\";\n\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                echo \"<tr><td></td><td colspan='3'>\";\n                echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" class=\"d-inline\">';\n                echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n                echo Html::hidden('reset_opcache', ['value' => 1]);\n                echo '<button type=\"submit\" class=\"btn btn-primary\">';\n                echo __('Reset');\n                echo '</button>';\n                echo '</form>';\n                echo \"</td></tr>\";\n            }\n        } else {\n            $msg = sprintf(__s('%s extension is not present'), $ext);\n            echo \"<tr><td colspan='3'>\" . sprintf(__('Installing and enabling the \"%s\" extension may improve GLPI performance'), $ext) . \"</td>\n               <td class='icons_block'><i class='fa fa-info-circle missing' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('User data cache') . \"</th></tr>\";\n        echo '<tr><td class=\"b\">' . __('You can use \"php bin/console cache:configure\" command to configure cache system.') . '</td></tr>';\n        $cache_manager = new CacheManager();\n        $ext = strtolower(get_class($cache_manager->getCacheStorageAdapter(CacheManager::CONTEXT_CORE)));\n        $ext = preg_replace('/^.*\\\\\\([a-z]+?)(?:adapter)?$/', '$1', $ext);\n        if (in_array($ext, ['memcached', 'redis'])) {\n            $msg = sprintf(__s('The \"%s\" cache extension is installed'), $ext);\n        } else {\n            $msg = sprintf(__s('\"%s\" cache system is used'), $ext);\n        }\n        echo \"<tr><td>\" . $msg . \"</td>\n            <td>\" . phpversion($ext) . \"</td>\n            <td></td>\n            <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            echo \"<tr><td></td><td colspan='3'>\";\n            echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" class=\"d-inline\">';\n            echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n            echo Html::hidden('reset_core_cache', ['value' => 1]);\n            echo '<button type=\"submit\" class=\"btn btn-primary\">';\n            echo __('Reset');\n            echo '</button>';\n            echo '</form>';\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr><th colspan='4'>\" . __('Translation cache') . \"</th></tr>\";\n        $adapter_class = strtolower(get_class($cache_manager->getCacheStorageAdapter(CacheManager::CONTEXT_TRANSLATIONS)));\n        $adapter = preg_replace('/^.*\\\\\\([a-z]+?)(?:adapter)?$/', '$1', $adapter_class);\n        $msg = sprintf(__s('\"%s\" cache system is used'), $adapter);\n        echo \"<tr><td colspan='3'>\" . $msg . \"</td>\n            <td class='icons_block'><i class='fa fa-check-circle ok' title='$msg'></i><span class='sr-only'>$msg</span></td></tr>\";\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            echo \"<tr><td></td><td colspan='3'>\";\n            echo '<form method=\"POST\" action=\"' . static::getFormURL() . '\" style=\"d-inline\">';\n            echo Html::hidden('_glpi_csrf_token', ['value' => Session::getNewCSRFToken()]);\n            echo Html::hidden('reset_translation_cache', ['value' => 1]);\n            echo '<button type=\"submit\" class=\"btn btn-primary\">';\n            echo __('Reset');\n            echo '</button>';\n            echo '</form>';\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n    }\n\n    public static function showSystemInfoTable($params = [])\n    {\n        global $CFG_GLPI, $DB;\n\n        $p = [\n            'word_wrap_width' => 128\n        ];\n        $p = array_replace($p, $params);\n\n        echo \"<table id='system-info-table' class='tab_cadre_fixe'>\";\n        echo \"<tr><th class='section-header'>\" . __('Information about system installation and configuration') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td></td></tr>\";\n\n        $oldlang = $_SESSION['glpilanguage'];\n       // Keep this, for some function call which still use translation (ex showAllReplicateDelay)\n        Session::loadLanguage('en_GB');\n\n       // No need to translate, this part always display in english (for copy/paste to forum)\n\n       // Try to compute a better version for .git\n        $ver = GLPI_VERSION;\n        if (is_dir(GLPI_ROOT . \"/.git\")) {\n            $dir = getcwd();\n            chdir(GLPI_ROOT);\n            $returnCode = 1;\n            /** @var array $output */\n            $gitrev = @exec('git show --format=\"%h\" --no-patch 2>&1', $output, $returnCode);\n            $gitbranch = '';\n            if (!$returnCode) {\n                $gitbranch = @exec('git symbolic-ref --quiet --short HEAD || git rev-parse --short HEAD 2>&1', $output, $returnCode);\n            }\n            chdir($dir);\n            if (!$returnCode) {\n                $ver .= '-git-' . $gitbranch . '-' . $gitrev;\n            }\n        }\n\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\";\n        echo \"GLPI $ver (\" . $CFG_GLPI['root_doc'] . \" => \" . GLPI_ROOT . \")\\n\";\n        echo \"Installation mode: \" . GLPI_INSTALL_MODE . \"\\n\";\n        echo \"Current language:\" . $oldlang . \"\\n\";\n        echo \"\\n</pre></td></tr>\";\n\n        echo \"<tr><th class='section-header'>Server</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n        echo wordwrap(\"Operating system: \" . php_uname() . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n        $exts = get_loaded_extensions();\n        sort($exts);\n        echo wordwrap(\n            \"PHP \" . phpversion() . ' ' . php_sapi_name() . \" (\" . implode(', ', $exts) . \")\\n\",\n            $p['word_wrap_width'],\n            \"\\n\\t\"\n        );\n        $msg = \"Setup: \";\n\n        foreach (\n            ['max_execution_time', 'memory_limit', 'post_max_size', 'safe_mode',\n                'session.save_handler', 'upload_max_filesize'\n            ] as $key\n        ) {\n            $msg .= $key . '=\"' . ini_get($key) . '\" ';\n        }\n        echo wordwrap($msg . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n\n        $msg = 'Software: ';\n        if (isset($_SERVER[\"SERVER_SOFTWARE\"])) {\n            $msg .= $_SERVER[\"SERVER_SOFTWARE\"];\n        }\n        if (isset($_SERVER[\"SERVER_SIGNATURE\"])) {\n            $msg .= ' (' . Toolbox::stripTags($_SERVER[\"SERVER_SIGNATURE\"]) . ')';\n        }\n        echo wordwrap($msg . \"\\n\", $p['word_wrap_width'], \"\\n\\t\");\n\n        if (isset($_SERVER[\"HTTP_USER_AGENT\"])) {\n            echo \"\\t\" . Sanitizer::encodeHtmlSpecialChars($_SERVER[\"HTTP_USER_AGENT\"]) . \"\\n\";\n        }\n\n        foreach ($DB->getInfo() as $key => $val) {\n            echo \"$key: $val\\n\\t\";\n        }\n        echo \"\\n\";\n\n        $core_requirements = (new RequirementsManager())->getCoreRequirementList($DB);\n       /* @var \\Glpi\\System\\Requirement\\RequirementInterface $requirement */\n        foreach ($core_requirements as $requirement) {\n            if ($requirement->isOutOfContext()) {\n                continue; // skip requirement if not relevant\n            }\n\n            $img = $requirement->isValidated()\n            ? 'ok'\n            : ($requirement->isOptional() ? 'warning' : 'ko');\n            $messages = Html::entities_deep($requirement->getValidationMessages());\n\n            echo '<img src=\"' . $CFG_GLPI['root_doc'] . '/pics/' . $img . '_min.png\"'\n            . ' alt=\"' . implode(' ', $messages) . '\" title=\"' . implode(' ', $messages) . '\" />';\n            echo implode(\"\\n\", $messages);\n\n            echo \"\\n\";\n        }\n\n        echo \"\\n</pre></td></tr>\";\n\n        echo \"<tr><th class='section-header'>GLPI constants</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n        foreach (get_defined_constants() as $constant_name => $constant_value) {\n            if (preg_match('/^GLPI_/', $constant_name)) {\n                echo $constant_name . ': ' . $constant_value . \"\\n\";\n            }\n        }\n        echo \"\\n</pre></td></tr>\";\n\n        self::showLibrariesInformation();\n\n        foreach ($CFG_GLPI[\"systeminformations_types\"] as $type) {\n            $tmp = new $type();\n            $tmp->showSystemInformations($p['word_wrap_width']);\n        }\n\n        Session::loadLanguage($oldlang);\n\n        $files = array_merge(\n            glob(GLPI_LOCAL_I18N_DIR . \"/**/*.php\"),\n            glob(GLPI_LOCAL_I18N_DIR . \"/**/*.mo\")\n        );\n        sort($files);\n        if (count($files)) {\n            echo \"<tr><th class='section-header'>Locales overrides</th></tr>\\n\";\n            echo \"<tr class='tab_bg_1'><td>\\n\";\n            foreach ($files as $file) {\n                echo \"$file<br/>\\n\";\n            }\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><th>\" . __('To copy/paste in your support request') . \"</th></tr>\\n\";\n\n        echo \"</table>\";\n    }\n\n    /**\n     * Display a HTML report about systeme information / configuration\n     **/\n    public function showSystemInformations()\n    {\n        global $DB, $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $rand = mt_rand();\n\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"\\\" method='post' data-track-changes='true'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . __('General setup') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_event_loglevel$rand'>\" . __('Log Level') . \"</label></td><td>\";\n\n        $values = [\n            1 => __('1- Critical (login error only)'),\n            2 => __('2- Severe (not used)'),\n            3 => __('3- Important (successful logins)'),\n            4 => __('4- Notices (add, delete, tracking)'),\n            5 => __('5- Complete (all)'),\n        ];\n\n        Dropdown::showFromArray(\n            'event_loglevel',\n            $values,\n            ['value' => $CFG_GLPI[\"event_loglevel\"], 'rand' => $rand]\n        );\n        echo \"</td><td><label for='dropdown_cron_limit$rand'>\" . __('Maximal number of automatic actions (run by CLI)') . \"</label></td><td>\";\n        Dropdown::showNumber('cron_limit', ['value' => $CFG_GLPI[\"cron_limit\"],\n            'min'   => 1,\n            'max'   => 30,\n            'rand'  => $rand\n        ]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_use_log_in_files$rand'>\" . __('Logs in files (SQL, email, automatic action...)') . \"</label></td><td>\";\n        Dropdown::showYesNo(\"use_log_in_files\", $CFG_GLPI[\"use_log_in_files\"], -1, ['rand' => $rand]);\n        echo \"</td><td><label for='dropdown__dbslave_status$rand'>\" . _n('SQL replica', 'SQL replicas', 1) . \"</label></td><td>\";\n        $active = DBConnection::isDBSlaveActive();\n        Dropdown::showYesNo(\"_dbslave_status\", $active, -1, ['rand' => $rand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center b'>\" . __('Maintenance mode');\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='dropdown_maintenance_mode$rand'>\" . __('Maintenance mode') . \"</label></td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"maintenance_mode\", $CFG_GLPI[\"maintenance_mode\"], -1, ['rand' => $rand]);\n        echo \"</td>\";\n       //TRANS: Proxy port\n        echo \"<td><label for='maintenance_text'>\" . __('Maintenance text') . \"</label></td>\";\n        echo \"<td>\";\n        echo \"<textarea class='form-control' name='maintenance_text' id='maintenance_text'>\" . $CFG_GLPI[\"maintenance_text\"];\n        echo \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center b'>\" . __('Proxy configuration for upgrade check');\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='proxy_name'>\" . __('Server') . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_name' id='proxy_name' value='\" . $CFG_GLPI[\"proxy_name\"] . \"' class='form-control'></td>\";\n       //TRANS: Proxy port\n        echo \"<td><label for='proxy_port'>\" . _n('Port', 'Ports', 1) . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_port' id='proxy_port' value='\" . $CFG_GLPI[\"proxy_port\"] . \"' class='form-control'></td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='proxy_user'>\" . __('Login') . \"</label></td>\";\n        echo \"<td><input type='text' name='proxy_user' id='proxy_user' value='\" . $CFG_GLPI[\"proxy_user\"] . \"' class='form-control'></td>\";\n        echo \"<td><label for='proxy_passwd'>\" . __('Password') . \"</label></td>\";\n        echo \"<td><input type='password' name='proxy_passwd' id='proxy_passwd' value='' autocomplete='new-password' class='form-control'>\";\n        echo \"<br><input type='checkbox' name='_blank_proxy_passwd' id='_blank_proxy_passwd'><label for='_blank_proxy_passwd'>\" . __('Clear') . \"</label>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n\n        echo \"<p>\" . Telemetry::getViewLink() . \"</p>\";\n\n        $copy_msg = __('Copy system information');\n        $copy_onclick = <<<JS\n      copyTextToClipboard(tableToDetails('#system-info-table'));\n      flashIconButton(this, 'btn btn-success', 'fas fa-check', 1500);\nJS;\n        echo <<<HTML\n         <button type=\"button\" name=\"copy-sysinfo\" class=\"btn btn-secondary\" onclick=\"{$copy_onclick}\">\n            <i class=\"far fa-copy me-2\"></i>{$copy_msg}\n         </button>\nHTML;\n        $check_new_version_msg = __('Check if a new version is available');\n        echo <<<HTML\n      <a class='btn btn-secondary' href='?check_version'>\n         <i class=\"fas fa-sync me-2\"></i>{$check_new_version_msg}\n      </a>\nHTML;\n        self::showSystemInfoTable();\n        echo \"</div>\\n\";\n    }\n\n\n    /**\n     * Retrieve full directory of a lib\n     * @param  $libstring  object, class or function\n     * @return string       the path or false\n     *\n     * @since 9.1\n     */\n    public static function getLibraryDir($libstring)\n    {\n        if (is_object($libstring)) {\n            return realpath(dirname((new ReflectionObject($libstring))->getFileName()));\n        } else if (class_exists($libstring) || interface_exists($libstring)) {\n            return realpath(dirname((new ReflectionClass($libstring))->getFileName()));\n        } else if (function_exists($libstring)) {\n           // Internal function have no file name\n            $path = (new ReflectionFunction($libstring))->getFileName();\n            return ($path ? realpath(dirname($path)) : false);\n        }\n        return false;\n    }\n\n\n    /**\n     * get libraries list\n     *\n     * @param $all   (default false)\n     * @return array dependencies list\n     *\n     * @since 9.4\n     */\n    public static function getLibraries($all = false)\n    {\n        $pm = new PHPMailer();\n        $sp = new SimplePie();\n\n       // use same name that in composer.json\n        $deps = [[ 'name'    => 'htmlawed/htmlawed',\n            'version' => hl_version() ,\n            'check'   => 'hl_version'\n        ],\n            [ 'name'    => 'phpmailer/phpmailer',\n                'version' => $pm::VERSION,\n                'check'   => 'PHPMailer\\\\PHPMailer\\\\PHPMailer'\n            ],\n            [ 'name'    => 'simplepie/simplepie',\n                'version' => SIMPLEPIE_VERSION,\n                'check'   => $sp\n            ],\n            [ 'name'    => 'mpdf/mpdf',\n                'check'   => 'Mpdf\\\\Mpdf'\n            ],\n            [ 'name'    => 'michelf/php-markdown',\n                'check'   => 'Michelf\\\\Markdown'\n            ],\n            [ 'name'    => 'true/punycode',\n                'check'   => 'TrueBV\\\\Punycode'\n            ],\n            [ 'name'    => 'iamcal/lib_autolink',\n                'check'   => 'autolink'\n            ],\n            [ 'name'    => 'sabre/dav',\n                'check'   => 'Sabre\\\\DAV\\\\Version'\n            ],\n            [ 'name'    => 'sabre/http',\n                'check'   => 'Sabre\\\\HTTP\\\\Version'\n            ],\n            [ 'name'    => 'sabre/uri',\n                'check'   => 'Sabre\\\\Uri\\\\Version'\n            ],\n            [ 'name'    => 'sabre/vobject',\n                'check'   => 'Sabre\\\\VObject\\\\Component'\n            ],\n            [ 'name'    => 'laminas/laminas-i18n',\n                'check'   => 'Laminas\\\\I18n\\\\Module'\n            ],\n            [ 'name'    => 'laminas/laminas-servicemanager',\n                'check'   => 'Laminas\\\\ServiceManager\\\\ServiceManager'\n            ],\n            [ 'name'    => 'monolog/monolog',\n                'check'   => 'Monolog\\\\Logger'\n            ],\n            [ 'name'    => 'sebastian/diff',\n                'check'   => 'SebastianBergmann\\\\Diff\\\\Diff'\n            ],\n            [ 'name'    => 'donatj/phpuseragentparser',\n                'check'   => 'donatj\\\\UserAgent\\\\UserAgentParser'\n            ],\n            [ 'name'    => 'elvanto/litemoji',\n                'check'   => 'LitEmoji\\\\LitEmoji'\n            ],\n            [ 'name'    => 'symfony/console',\n                'check'   => 'Symfony\\\\Component\\\\Console\\\\Application'\n            ],\n            [ 'name'    => 'scssphp/scssphp',\n                'check'   => 'ScssPhp\\ScssPhp\\Compiler'\n            ],\n            [ 'name'    => 'laminas/laminas-mail',\n                'check'   => 'Laminas\\\\Mail\\\\Protocol\\\\Imap'\n            ],\n            [ 'name'    => 'laminas/laminas-mime',\n                'check'   => 'Laminas\\\\Mime\\\\Mime'\n            ],\n            [ 'name'    => 'rlanvin/php-rrule',\n                'check'   => 'RRule\\\\RRule'\n            ],\n            [ 'name'    => 'blueimp/jquery-file-upload',\n                'check'   => 'UploadHandler'\n            ],\n            [ 'name'    => 'ramsey/uuid',\n                'check'   => 'Ramsey\\\\Uuid\\\\Uuid'\n            ],\n            [ 'name'    => 'psr/log',\n                'check'   => 'Psr\\\\Log\\\\LoggerInterface'\n            ],\n            [ 'name'    => 'psr/simple-cache',\n                'check'   => 'Psr\\\\SimpleCache\\\\CacheInterface'\n            ],\n            [ 'name'    => 'psr/cache',\n                'check'   => 'Psr\\\\Cache\\\\CacheItemPoolInterface'\n            ],\n            [ 'name'    => 'league/csv',\n                'check'   => 'League\\\\Csv\\\\Writer'\n            ],\n            [ 'name'    => 'mexitek/phpcolors',\n                'check'   => 'Mexitek\\\\PHPColors\\\\Color'\n            ],\n            [ 'name'    => 'guzzlehttp/guzzle',\n                'check'   => 'GuzzleHttp\\\\Client'\n            ],\n            [ 'name'    => 'guzzlehttp/psr7',\n                'check'   => 'GuzzleHttp\\\\Psr7\\\\Response'\n            ],\n            [ 'name'    => 'glpi-project/inventory_format',\n                'check'   => 'Glpi\\Inventory\\Converter'\n            ],\n            [ 'name'    => 'wapmorgan/unified-archive',\n                'check'   => 'wapmorgan\\\\UnifiedArchive\\\\UnifiedArchive'\n            ],\n            [ 'name'    => 'paragonie/sodium_compat',\n                'check'   => 'ParagonIE_Sodium_Compat'\n            ],\n            [ 'name'    => 'symfony/cache',\n                'check'   => 'Symfony\\\\Component\\\\Cache\\\\Psr16Cache'\n            ],\n            [ 'name'    => 'html2text/html2text',\n                'check'   => 'Html2Text\\\\Html2Text'\n            ],\n            [ 'name'    => 'symfony/dom-crawler',\n                'check'   => 'Symfony\\\\Component\\\\DomCrawler\\\\Crawler'\n            ],\n            [ 'name'    => 'twig/twig',\n                'check'   => 'Twig\\\\Environment'\n            ],\n            [ 'name'    => 'twig/string-extra',\n                'check'   => 'Twig\\\\Extra\\\\String\\\\StringExtension'\n            ],\n            [ 'name'    => 'symfony/polyfill-ctype',\n                'check'   => 'ctype_digit'\n            ],\n            [ 'name'    => 'symfony/polyfill-iconv',\n                'check'   => 'iconv'\n            ],\n            [ 'name'    => 'symfony/polyfill-mbstring',\n                'check'   => 'mb_list_encodings'\n            ],\n            [ 'name'    => 'symfony/polyfill-php80',\n                'check'   => 'str_contains'\n            ],\n            [\n                'name'  => 'symfony/polyfill-php81',\n                'check' => 'array_is_list'\n            ],\n        ];\n        if (Toolbox::canUseCAS()) {\n            $deps[] = [\n                'name'    => 'phpCas',\n                'version' => phpCAS::getVersion(),\n                'check'   => 'phpCAS'\n            ];\n        }\n        return $deps;\n    }\n\n\n    /**\n     * show Libraries information in system information\n     *\n     * @since 0.84\n     **/\n    public static function showLibrariesInformation()\n    {\n\n       // No gettext\n\n        echo \"<tr class='tab_bg_2'><th class='section-header'>Libraries</th></tr>\\n\";\n        echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n\n        foreach (self::getLibraries() as $dep) {\n            $path = self::getLibraryDir($dep['check']);\n            if ($path) {\n                echo \"{$dep['name']} \";\n                if (isset($dep['version'])) {\n                    echo \"version {$dep['version']} \";\n                }\n                echo \"in ($path)\\n\";\n            } else {\n                echo \"{$dep['name']} not found\\n\";\n            }\n        }\n\n        echo \"\\n</pre></td></tr>\";\n    }\n\n\n    /**\n     * Dropdown for global management config\n     *\n     * @param string       $name   select name\n     * @param string       $value  default value\n     * @param integer|null $rand   rand\n     **/\n    public static function dropdownGlobalManagement($name, $value, $rand = null)\n    {\n\n        $choices = [\n            __('Yes - Restrict to unit management for manual add'),\n            __('Yes - Restrict to global management for manual add'),\n            __('No'),\n        ];\n        Dropdown::showFromArray($name, $choices, ['value' => $value, 'rand' => $rand]);\n    }\n\n\n    /**\n     * Get language in GLPI associated with the value coming from LDAP/SSO\n     * Value can be, for example : English, en_EN, en-EN or en\n     *\n     * @param string $lang the value coming from LDAP/SSO\n     *\n     * @return string locale's php page in GLPI or '' is no language associated with the value\n     **/\n    public static function getLanguage($lang)\n    {\n        global $CFG_GLPI;\n\n       // Alternative language code: en-EN --> en_EN\n        $altLang = str_replace(\"-\", \"_\", $lang);\n\n       // Search in order : ID or extjs dico or tinymce dico / native lang / english name\n       //                   / extjs dico / tinymce dico\n       // ID  or extjs dico or tinymce dico\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (\n                (strcasecmp($lang, $ID) == 0)\n                || (strcasecmp($altLang, $ID) == 0)\n                || (strcasecmp($lang, $language[2]) == 0)\n                || (strcasecmp($lang, $language[3]) == 0)\n            ) {\n                return $ID;\n            }\n        }\n\n       // native lang\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (strcasecmp($lang, $language[0]) == 0) {\n                return $ID;\n            }\n        }\n\n       // english lang name\n        foreach ($CFG_GLPI[\"languages\"] as $ID => $language) {\n            if (strcasecmp($lang, $language[4]) == 0) {\n                return $ID;\n            }\n        }\n\n        return \"\";\n    }\n\n\n    public static function detectRootDoc()\n    {\n        global $DB, $CFG_GLPI;\n\n        if (isset($CFG_GLPI['root_doc'])) {\n            return; // already computed\n        }\n\n        if (isset($_SERVER['REQUEST_URI'])) {\n            // $_SERVER['REQUEST_URI'] is set, meaning that GLPI is accessed from web server.\n            // In this case, `$CFG_GLPI['root_doc']` corresponds to the piece of URI\n            // that is common between `GLPI_ROOT` and $_SERVER['REQUEST_URI']\n            // e.g. GLPI_ROOT=/var/www/glpi and $_SERVER['REQUEST_URI']=/glpi/front/index.php -> $CFG_GLPI['root_doc']=/glpi\n\n            // Extract relative path of entry script directory\n            // e.g. /var/www/mydomain.org/glpi/front/index.php -> /front\n            $current_dir_relative = str_replace(\n                str_replace(DIRECTORY_SEPARATOR, '/', realpath(GLPI_ROOT)),\n                '',\n                str_replace(DIRECTORY_SEPARATOR, '/', realpath(getcwd()))\n            );\n\n            // Extract relative path of request URI directory\n            // e.g. /glpi/front/index.php -> /glpi/front\n            $request_dir_relative = preg_replace(\n                '/\\/[0-9a-zA-Z\\.\\-\\_]+\\.php/',\n                '',\n                Html::cleanParametersURL($_SERVER['REQUEST_URI'])\n            );\n            // API exception (handles `RewriteRule api/(.*)$ apirest.php/$1`)\n            if (strpos($request_dir_relative, 'api/') !== false) {\n                $request_dir_relative = preg_replace(\"/(.*\\/)api\\/.*/\", \"$1\", $request_dir_relative);\n            }\n\n            // Remove relative path of entry script directory\n            // e.g. /glpi/front -> /glpi\n            $root_doc = str_replace($current_dir_relative, '', $request_dir_relative);\n            $root_doc = rtrim($root_doc, '/');\n\n            // urldecode for space redirect to encoded URL : change entity\n            // note: not sure this line is actually used\n            $root_doc = urldecode($root_doc);\n\n            $CFG_GLPI['root_doc'] = $root_doc;\n        } else {\n            // $_SERVER['REQUEST_URI'] is not set, meaning that GLPI is probably acces from CLI.\n            // In this case, `$CFG_GLPI['root_doc']` has to be extracted from `$CFG_GLPI['url_base']`.\n\n            $url_base = $CFG_GLPI['url_base'] ?? null;\n            // $CFG_GLPI may have not been loaded yet, load value form DB if `$CFG_GLPI['url_base']` is not set.\n            if ($url_base === null && $DB instanceof DBmysql && $DB->connected) {\n                $url_base = Config::getConfigurationValue('core', 'url_base');\n            }\n\n            if ($url_base !== null) {\n                $CFG_GLPI['root_doc'] = parse_url($url_base, PHP_URL_PATH) ?? '';\n            }\n        }\n    }\n\n\n    /**\n     * Display debug information for dbslave\n     **/\n    public function showDebug()\n    {\n\n        $options = [\n            'diff' => 0,\n            'name' => '',\n        ];\n        NotificationEvent::debugEvent(new DBConnection(), $options);\n    }\n\n\n    /**\n     * Display field unicity criterias form\n     **/\n    public function showFormFieldUnicity()\n    {\n\n        $unicity = new FieldUnicity();\n        $unicity->showForm(1, -1);\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'Preference':\n                return __('Personalization');\n\n            case 'User':\n                if (\n                    User::canUpdate()\n                    && $item->currentUserHaveMoreRightThan($item->getID())\n                ) {\n                    return __('Settings');\n                }\n                break;\n\n            case __CLASS__:\n                $tabs = [\n                    1 => __('General setup'),  // Display\n                    2 => __('Default values'), // Prefs\n                    3 => _n('Asset', 'Assets', Session::getPluralNumber()),\n                    4 => __('Assistance'),\n                    12 => __('Management'),\n                ];\n                if (Config::canUpdate()) {\n                    $tabs[9]  = __('Logs purge');\n                    $tabs[5]  = __('System');\n                    $tabs[10] = __('Security');\n                    $tabs[7]  = __('Performance');\n                    $tabs[8]  = __('API');\n                    $tabs[11] = Impact::getTypeName();\n                }\n\n                if (\n                    DBConnection::isDBSlaveActive()\n                    && Config::canUpdate()\n                ) {\n                    $tabs[6]  = _n('SQL replica', 'SQL replicas', Session::getPluralNumber());  // Slave\n                }\n                return $tabs;\n\n            case 'GLPINetwork':\n                return 'GLPI Network';\n\n            case Impact::getType():\n                return Impact::getTypeName();\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        global $CFG_GLPI;\n\n        if ($item->getType() == 'Preference') {\n            $config = new self();\n            $user   = new User();\n            if ($user->getFromDB(Session::getLoginUserID())) {\n                $user->computePreferences();\n                $config->showFormUserPrefs($user->fields);\n            }\n        } else if ($item->getType() == 'User') {\n            $config = new self();\n            $item->computePreferences();\n            $config->showFormUserPrefs($item->fields);\n        } else if ($item->getType() == __CLASS__) {\n            switch ($tabnum) {\n                case 1:\n                    $item->showFormDisplay();\n                    break;\n\n                case 2:\n                    $item->showFormUserPrefs($CFG_GLPI);\n                    break;\n\n                case 3:\n                    $item->showFormInventory();\n                    break;\n\n                case 4:\n                    $item->showFormHelpdesk();\n                    break;\n\n                case 5:\n                    $item->showSystemInformations();\n                    break;\n\n                case 6:\n                    $item->showFormDBSlave();\n                    break;\n\n                case 7:\n                    $item->showPerformanceInformations();\n                    break;\n\n                case 8:\n                    $item->showFormAPI();\n                    break;\n\n                case 9:\n                    $item->showFormLogs();\n                    break;\n\n                case 10:\n                    $item->showFormSecurity();\n                    break;\n\n                case 11:\n                    Impact::showConfigForm();\n                    break;\n\n                case 12:\n                    $item->showFormManagement();\n                    break;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Display database engine checks report\n     *\n     * @since 9.3\n     *\n     * @param boolean $fordebug display for debug (no html required) (false by default)\n     * @param string  $version  Version to check (mainly from install), defaults to null\n     *\n     * @return integer 2: missing extension,  1: missing optionnal extension, 0: OK,\n     **/\n    public static function displayCheckDbEngine($fordebug = false, $version = null)\n    {\n        global $CFG_GLPI;\n\n        $error = 0;\n        $result = self::checkDbEngine($version);\n        $version = key($result);\n        $db_ver = $result[$version];\n\n        $ok_message = sprintf(__s('Database version seems correct (%s) - Perfect!'), $version);\n        $ko_message = sprintf(__s('Your database engine version seems too old: %s.'), $version);\n\n        if (!$db_ver) {\n            $error = 2;\n        }\n        $message = $error > 0 ? $ko_message : $ok_message;\n\n        if (isCommandLine()) {\n            echo $message . \"\\n\";\n        } else {\n            $img = \"<img src='\" . $CFG_GLPI['root_doc'] . \"/pics/\";\n            $img .= ($error > 0 ? \"ko_min\" : \"ok_min\") . \".png' alt='$message' title='$message'/>\";\n\n            if ($fordebug) {\n                echo $img . $message . \"\\n\";\n            } else {\n                $html = \"<td\";\n                if ($error > 0) {\n                    $html .= \" class='red'\";\n                }\n                $html .= \">\";\n                $html .= $img;\n                $html .= '</td>';\n                echo $html;\n            }\n        }\n        return $error;\n    }\n\n\n    /**\n     * Check for needed extensions\n     *\n     * @since 9.3\n     *\n     * @param string $raw Raw version to check (mainly from install), defaults to null\n     *\n     * @return array\n     **/\n    public static function checkDbEngine($raw = null)\n    {\n        if ($raw === null) {\n            global $DB;\n            $raw = $DB->getVersion();\n        }\n\n        $server  = preg_match('/-MariaDB/', $raw) ? 'MariaDB' : 'MySQL';\n        $version = preg_replace('/^((\\d+\\.?)+).*$/', '$1', $raw);\n\n       // MySQL >= 5.7 || MariaDB >= 10.2\n        $is_supported = $server === 'MariaDB'\n         ? version_compare($version, '10.2', '>=')\n         : version_compare($version, '5.7', '>=');\n\n        return [$version => $is_supported];\n    }\n\n\n    /**\n     * Check for needed extensions\n     *\n     * @since 9.2 Method signature and return has changed\n     *\n     * @param null|array $list     Extensions list (from plugins)\n     *\n     * @return array [\n     *                'error'     => integer 2: missing extension,  1: missing optionnal extension, 0: OK,\n     *                'good'      => [ext => message],\n     *                'missing'   => [ext => message],\n     *                'may'       => [ext => message]\n     *               ]\n     **/\n    public static function checkExtensions($list = null)\n    {\n        if ($list === null) {\n            $extensions_to_check = [\n                'mysqli'   => [\n                    'required'  => true\n                ],\n                'fileinfo' => [\n                    'required'  => true,\n                    'class'     => 'finfo'\n                ],\n                'json'     => [\n                    'required'  => true,\n                    'function'  => 'json_encode'\n                ],\n                'zlib'     => [\n                    'required'  => true,\n                ],\n                'curl'      => [\n                    'required'  => true,\n                ],\n                'gd'       => [\n                    'required'  => true,\n                ],\n                'simplexml' => [\n                    'required'  => true,\n                ],\n                'xml'        => [\n                    'required'  => true,\n                    'function'  => 'utf8_decode'\n                ],\n            //to sync/connect from LDAP\n                'ldap'       => [\n                    'required'  => false,\n                ],\n            //to enhance perfs\n                'Zend OPcache' => [\n                    'required'  => false\n                ],\n            //for CAS lib\n                'CAS'     => [\n                    'required' => false,\n                    'class'    => 'phpCAS'\n                ],\n                'exif' => [\n                    'required'  => false\n                ],\n                'intl' => [\n                    'required' => true\n                ],\n                'sodium' => [\n                    'required' => false\n                ]\n            ];\n        } else {\n            $extensions_to_check = $list;\n        }\n\n        $report = [\n            'error'     => 0,\n            'good'      => [],\n            'missing'   => [],\n            'may'       => []\n        ];\n\n       //check for PHP extensions\n        foreach ($extensions_to_check as $ext => $params) {\n            $success = true;\n\n            if (isset($params['call'])) {\n                $success = call_user_func($params['call']);\n            } else if (isset($params['function'])) {\n                if (!function_exists($params['function'])) {\n                    $success = false;\n                }\n            } else if (isset($params['class'])) {\n                if (!class_exists($params['class'])) {\n                    $success = false;\n                }\n            } else {\n                if (!extension_loaded($ext)) {\n                    $success = false;\n                }\n            }\n\n            if ($success) {\n                $msg = sprintf(__('%s extension is installed'), $ext);\n                $report['good'][$ext] = $msg;\n            } else {\n                if (isset($params['required']) && $params['required'] === true) {\n                    if ($report['error'] < 2) {\n                        $report['error'] = 2;\n                    }\n                    $msg = sprintf(__('%s extension is missing'), $ext);\n                    $report['missing'][$ext] = $msg;\n                } else {\n                    if ($report['error'] < 1) {\n                        $report['error'] = 1;\n                    }\n                    $msg = sprintf(__('%s extension is not present'), $ext);\n                    $report['may'][$ext] = $msg;\n                }\n            }\n        }\n\n        return $report;\n    }\n\n\n    /**\n     * Get current DB version (compatible with all version of GLPI)\n     *\n     * @since 0.85\n     *\n     * @return DB version\n     **/\n    public static function getCurrentDBVersion()\n    {\n        global $DB;\n\n       //Default current case\n        $select  = 'value AS version';\n        $table   = 'glpi_configs';\n        $where   = [\n            'context'   => 'core',\n            'name'      => 'version'\n        ];\n\n        if (!$DB->tableExists('glpi_configs')) {\n            $select  = 'version';\n            $table   = 'glpi_config';\n            $where   = ['id' => 1];\n        } else if ($DB->fieldExists('glpi_configs', 'version')) {\n            $select  = 'version';\n            $where   = ['id' => 1];\n        }\n\n        $row = $DB->request([\n            'SELECT' => [$select],\n            'FROM'   => $table,\n            'WHERE'  => $where\n        ])->current();\n\n        return trim($row['version']);\n    }\n\n\n    /**\n     * Get config values\n     *\n     * @since 0.85\n     *\n     * @param $context  string   context to get values (default for glpi is core)\n     * @param $names    array    of config names to get\n     *\n     * @return array of config values\n     **/\n    public static function getConfigurationValues($context, array $names = [])\n    {\n        global $DB;\n\n        $query = [\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'context'   => $context\n            ]\n        ];\n\n        if (count($names) > 0) {\n            $query['WHERE']['name'] = $names;\n        }\n\n        $iterator = $DB->request($query);\n        $result = [];\n        foreach ($iterator as $line) {\n            $result[$line['name']] = $line['value'];\n        }\n        return $result;\n    }\n\n\n    /**\n     * Get config value\n     *\n     * @param $context  string   context to get values (default for glpi is core)\n     * @param $name     string   config name\n     *\n     * @return mixed\n     *\n     * @since 10.0.0\n     */\n    public static function getConfigurationValue(string $context, string $name)\n    {\n        return self::getConfigurationValues($context, [$name])[$name] ?? null;\n    }\n\n    /**\n     * Load legacy configuration into $CFG_GLPI global variable.\n     *\n     * @return boolean True for success, false if an error occured\n     *\n     * @since 10.0.0 Parameter $older_to_latest is not longer used.\n     */\n    public static function loadLegacyConfiguration()\n    {\n\n        global $CFG_GLPI, $DB;\n\n        $iterator = $DB->request(['FROM' => 'glpi_configs']);\n\n        if ($iterator->count() === 0) {\n            return false;\n        }\n\n        if ($iterator->count() === 1) {\n           // 1 row = 0.78 to 0.84 config table schema\n            $values = $iterator->current();\n        } else {\n           // multiple rows = 0.85+ config\n            $values = [];\n            foreach ($iterator as $row) {\n                if ('core' !== $row['context']) {\n                    continue;\n                }\n                $values[$row['name']] = $row['value'];\n            }\n        }\n\n        $CFG_GLPI = array_merge($CFG_GLPI, $values);\n\n        if (isset($CFG_GLPI['priority_matrix'])) {\n            $CFG_GLPI['priority_matrix'] = importArrayFromDB($CFG_GLPI['priority_matrix']);\n        }\n\n        if (isset($CFG_GLPI['devices_in_menu'])) {\n            $CFG_GLPI['devices_in_menu'] = importArrayFromDB($CFG_GLPI['devices_in_menu']);\n        }\n\n        if (isset($CFG_GLPI['lock_item_list'])) {\n            $CFG_GLPI['lock_item_list'] = importArrayFromDB($CFG_GLPI['lock_item_list']);\n        }\n\n        if (\n            isset($CFG_GLPI['lock_lockprofile_id'])\n            && $CFG_GLPI['lock_use_lock_item']\n            && $CFG_GLPI['lock_lockprofile_id'] > 0\n            && !isset($CFG_GLPI['lock_lockprofile'])\n        ) {\n            $prof = new Profile();\n            $prof->getFromDB($CFG_GLPI['lock_lockprofile_id']);\n            $prof->cleanProfile();\n            $CFG_GLPI['lock_lockprofile'] = $prof->fields;\n        }\n\n       // Path for icon of document type (web mode only)\n        if (isset($CFG_GLPI['root_doc'])) {\n            $CFG_GLPI['typedoc_icon_dir'] = $CFG_GLPI['root_doc'] . '/pics/icones';\n        }\n\n        if (isset($CFG_GLPI['planning_work_days'])) {\n            $CFG_GLPI['planning_work_days'] = importArrayFromDB($CFG_GLPI['planning_work_days']);\n        }\n\n        return true;\n    }\n\n\n    /**\n     * Set config values : create or update entry\n     *\n     * @since 0.85\n     *\n     * @param $context  string context to get values (default for glpi is core)\n     * @param $values   array  of config names to set\n     *\n     * @return void\n     **/\n    public static function setConfigurationValues($context, array $values = [])\n    {\n\n        $glpikey = new GLPIKey();\n\n        $config = new self();\n        foreach ($values as $name => $value) {\n           // Encrypt config values according to list declared to GLPIKey service\n            if (!empty($value) && $glpikey->isConfigSecured($context, $name)) {\n                $value = $glpikey->encrypt($value);\n            }\n\n            if (\n                $config->getFromDBByCrit([\n                    'context'   => $context,\n                    'name'      => $name\n                ])\n            ) {\n                $input = ['id'      => $config->getID(),\n                    'context' => $context,\n                    'value'   => $value\n                ];\n\n                $config->update($input);\n            } else {\n                $input = ['context' => $context,\n                    'name'    => $name,\n                    'value'   => $value\n                ];\n\n                $config->add($input);\n            }\n        }\n    }\n\n    /**\n     * Delete config entries\n     *\n     * @since 0.85\n     *\n     * @param $context string  context to get values (default for glpi is core)\n     * @param $values  array   of config names to delete\n     *\n     * @return void\n     **/\n    public static function deleteConfigurationValues($context, array $values = [])\n    {\n\n        $config = new self();\n        foreach ($values as $value) {\n            if (\n                $config->getFromDBByCrit([\n                    'context'   => $context,\n                    'name'      => $value\n                ])\n            ) {\n                $config->delete(['id' => $config->getID()]);\n            }\n        }\n    }\n\n\n    public function getRights($interface = 'central')\n    {\n\n        $values = parent::getRights();\n        unset(\n            $values[CREATE],\n            $values[DELETE],\n            $values[PURGE]\n        );\n\n        return $values;\n    }\n\n    /**\n     * Get message that informs the user he is using an unstable version.\n     *\n     * @param bool $is_dev\n     *\n     * @return void\n     */\n    public static function agreeUnstableMessage(bool $is_dev)\n    {\n        $msg = $is_dev\n         ? __('You are using a development version, be careful!')\n         : __('You are using a pre-release version, be careful!');\n\n        $out = '<div class=\"alert alert-warning\">\n         <strong>' . $msg . '</strong>\n         <br/>';\n        $out .= \"<div class='form-check'>\n         <input type='checkbox' class='form-check-input' required='required' id='agree_unstable' name='agree_unstable'>\n         <label for='agree_unstable' class='form-check-label'>\" . __('I know I am using a unstable version.') . \"</label>\n      </div>\n      </div>\";\n        $out .= \"<script type=text/javascript>\n            $(function() {\n               $('[name=from_update]').on('click', function(event){\n                  if(!$('#agree_unstable').is(':checked')) {\n                     event.preventDefault();\n                     alert('\" . __('Please check the unstable version checkbox.') . \"');\n                  }\n               });\n            });\n            </script>\";\n        return $out;\n    }\n\n    /**\n     * Get available palettes\n     *\n     * @return array\n     */\n    public function getPalettes()\n    {\n        $themes_files = scandir(GLPI_ROOT . \"/css/palettes/\");\n        $themes = [];\n        foreach ($themes_files as $file) {\n            if (preg_match('/^[^_].*\\.scss$/', $file) === 1) {\n                $name          = basename($file, '.scss');\n                $themes[$name] = ucfirst($name);\n            }\n        }\n        return $themes;\n    }\n\n    /**\n     * Logs purge form\n     *\n     * @since 9.3\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormLogs()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        echo \"<form name='form' id='purgelogs_form' method='post' action='\" . $this->getFormURL() . \"' data-track-changes='true'>\";\n        echo \"<div class='center'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"Logs purge configuration\") .\n           \"</th></tr>\";\n        echo \"<tr class='tab_bg_1 center'><td colspan='4'><i>\" . __(\"Change all\") . \"</i>\";\n        echo Html::scriptBlock(\"function form_init_all(value) {\n         $('#purgelogs_form .purgelog_interval select').val(value).trigger('change');;\n      }\");\n        self::showLogsInterval(\n            'init_all',\n            0,\n            [\n                'on_change' => \"form_init_all(this.value);\",\n                'class'     => ''\n            ]\n        );\n        echo \"</td></tr>\";\n        echo \"<input type='hidden' name='id' value='1'>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"General\") . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add/update relation between items\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_addrelation', $CFG_GLPI[\"purge_addrelation\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Delete relation between items\") . \"</td><td>\";\n        self::showLogsInterval('purge_deleterelation', $CFG_GLPI[\"purge_deleterelation\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_createitem', $CFG_GLPI[\"purge_createitem\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Delete the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_deleteitem', $CFG_GLPI[\"purge_deleteitem\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Restore the item\") . \"</td><td>\";\n        self::showLogsInterval('purge_restoreitem', $CFG_GLPI[\"purge_restoreitem\"]);\n        echo \"</td>\";\n\n        echo \"<td>\" . __('Update the item') . \"</td><td>\";\n        self::showLogsInterval('purge_updateitem', $CFG_GLPI[\"purge_updateitem\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Comments\") . \"</td><td>\";\n        self::showLogsInterval('purge_comments', $CFG_GLPI[\"purge_comments\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Last update\") . \"</td><td>\";\n        self::showLogsInterval('purge_datemod', $CFG_GLPI[\"purge_datemod\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Plugins\") . \"</td><td>\";\n        self::showLogsInterval('purge_plugins', $CFG_GLPI[\"purge_plugins\"]);\n        echo \"</td>\";\n        echo \"<td class='center'>\" . RefusedEquipment::getTypeName(Session::getPluralNumber()) . \"</td><td>\";\n        self::showLogsInterval('purge_refusedequipment', $CFG_GLPI[\"purge_refusedequipment\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . _n('Software', 'Software', Session::getPluralNumber()) . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Installation/uninstallation of software on items\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_item_software_install',\n            $CFG_GLPI[\"purge_item_software_install\"]\n        );\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Installation/uninstallation versions on software\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_software_version_install',\n            $CFG_GLPI[\"purge_software_version_install\"]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add/Remove items from software versions\") . \"</td><td>\";\n        self::showLogsInterval(\n            'purge_software_item_install',\n            $CFG_GLPI[\"purge_software_item_install\"]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Financial and administrative information') .\n           \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add financial information to an item\") . \"</td><td>\";\n        self::showLogsInterval('purge_infocom_creation', $CFG_GLPI[\"purge_infocom_creation\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . User::getTypeName(Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"Add/remove profiles to users\") . \"</td><td>\";\n        self::showLogsInterval('purge_profile_user', $CFG_GLPI[\"purge_profile_user\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Add/remove groups to users\") . \"</td><td>\";\n        self::showLogsInterval('purge_group_user', $CFG_GLPI[\"purge_group_user\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" .\n           __(\"User authentication method changes\") . \"</td><td>\";\n        self::showLogsInterval('purge_user_auth_changes', $CFG_GLPI[\"purge_user_auth_changes\"]);\n        echo \"</td>\";\n        echo \"<td class='center'>\" . __(\"Deleted user in LDAP directory\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_userdeletedfromldap', $CFG_GLPI[\"purge_userdeletedfromldap\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . _n('Component', 'Components', Session::getPluralNumber()) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Add component\") . \"</td><td>\";\n        self::showLogsInterval('purge_adddevice', $CFG_GLPI[\"purge_adddevice\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Update component\") . \"</td><td>\";\n        self::showLogsInterval('purge_updatedevice', $CFG_GLPI[\"purge_updatedevice\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Disconnect a component\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_disconnectdevice', $CFG_GLPI[\"purge_disconnectdevice\"]);\n        echo \"</td>\";\n        echo \"<td>\" . __(\"Connect a component\") . \"</td><td>\";\n        self::showLogsInterval('purge_connectdevice', $CFG_GLPI[\"purge_connectdevice\"]);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Delete component\") .\n           \"</td><td>\";\n        self::showLogsInterval('purge_deletedevice', $CFG_GLPI[\"purge_deletedevice\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __(\"All sections\") . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td class='center'>\" . __(\"Purge all log entries\") . \"</td><td>\";\n        self::showLogsInterval('purge_all', $CFG_GLPI[\"purge_all\"]);\n        echo \"</td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td colspan='4' class='center'>\";\n        echo \"<input type='submit' name='update' value=\\\"\" . _sx('button', 'Save') . \"\\\" class='btn btn-primary' >\";\n        echo\"</td>\";\n        echo \"</tr>\";\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Show intervals for logs purge\n     *\n     * @since 9.3\n     *\n     * @param string $name    Parameter name\n     * @param mixed  $value   Parameter value\n     * @param array  $options Options\n     *\n     * @return void\n     */\n    public static function showLogsInterval($name, $value, $options = [])\n    {\n\n        $values = [\n            self::DELETE_ALL => __(\"Delete all\"),\n            self::KEEP_ALL   => __(\"Keep all\"),\n        ];\n        for ($i = 1; $i < 121; $i++) {\n            $values[$i] = sprintf(\n                _n(\n                    \"Delete if older than %s month\",\n                    \"Delete if older than %s months\",\n                    $i\n                ),\n                $i\n            );\n        }\n        $options = array_merge([\n            'value'   => $value,\n            'display' => false,\n            'class'   => 'purgelog_interval'\n        ], $options);\n\n        $out = \"<div class='{$options['class']}'>\";\n        $out .= Dropdown::showFromArray($name, $values, $options);\n        $out .= \"</div>\";\n\n        echo $out;\n    }\n\n    /**\n     * Security policy form\n     *\n     * @since 9.5.0\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormSecurity()\n    {\n        global $CFG_GLPI;\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $rand = mt_rand();\n\n        echo '<div class=\"center\" id=\"tabsbody\">';\n        echo '<form name=\"form\" action=\"' . Toolbox::getItemTypeFormURL(__CLASS__) . '\" method=\"post\" data-track-changes=\"true\">';\n        echo '<table class=\"tab_cadre_fixe\">';\n        echo '<tr><th colspan=\"4\">' . __('Security setup') . '</th></tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td colspan=\"4\" class=\"center b\">' . __('Password security policy') . '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_use_password_security' . $rand . '\">';\n        echo __('Password security policy validation');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'use_password_security',\n            $CFG_GLPI['use_password_security'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_min_length' . $rand . '\">';\n        echo __('Password minimum length');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_min_length',\n            [\n                'value' => $CFG_GLPI['password_min_length'],\n                'min'   => 4,\n                'max'   => 30,\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_number' . $rand . '\">';\n        echo __('Password need digit');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_number',\n            $CFG_GLPI['password_need_number'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_letter' . $rand . '\">';\n        echo __('Password need lowercase character');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_letter',\n            $CFG_GLPI['password_need_letter'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_caps' . $rand . '\">';\n        echo __('Password need uppercase character');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_caps',\n            $CFG_GLPI['password_need_caps'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_need_symbol' . $rand . '\">';\n        echo __('Password need symbol');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showYesNo(\n            'password_need_symbol',\n            $CFG_GLPI['password_need_symbol'],\n            -1,\n            [\n                'rand' => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td colspan=\"4\" class=\"center b\">' . __('Password expiration policy') . '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_delay' . $rand . '\">';\n        echo __('Password expiration delay (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_delay',\n            [\n                'value' => $CFG_GLPI['password_expiration_delay'],\n                'min'   => 30,\n                'max'   => 365,\n                'step'  => 15,\n                'toadd' => [-1 => __('Never')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_notice' . $rand . '\">';\n        echo __('Password expiration notice time (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_notice',\n            [\n                'value' => $CFG_GLPI['password_expiration_notice'],\n                'min'   => 0,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [-1 => __('Notification disabled')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_password_expiration_lock_delay' . $rand . '\">';\n        echo __('Delay before account deactivation (in days)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'password_expiration_lock_delay',\n            [\n                'value' => $CFG_GLPI['password_expiration_lock_delay'],\n                'min'   => 0,\n                'max'   => 30,\n                'step'  => 1,\n                'toadd' => [-1 => __('Do not deactivate')],\n                'rand'  => $rand\n            ]\n        );\n        echo '</td>';\n        echo '<td colspan=\"2\"></td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td colspan=\"4\" class=\"center\">';\n        echo '<input type=\"submit\" name=\"update\" class=\"btn btn-primary\" value=\"' . _sx('button', 'Save') . '\">';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '</table>';\n        Html::closeForm();\n    }\n\n    /**\n     * Security form related to management entries.\n     *\n     * @since 10.0.0\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showFormManagement()\n    {\n        global $CFG_GLPI;\n\n        if (!self::canView()) {\n            return;\n        }\n\n        $rand = mt_rand();\n        $canedit = Session::haveRight(self::$rightname, UPDATE);\n\n        echo '<div class=\"center\" id=\"tabsbody\">';\n        if ($canedit) {\n            echo '<form name=\"form\" action=\"' . Toolbox::getItemTypeFormURL(__CLASS__) . '\" method=\"post\" data-track-changes=\"true\">';\n        }\n        echo '<table class=\"tab_cadre_fixe\">';\n        echo '<tr><th colspan=\"4\">' . __('Documents setup') . '</th></tr>';\n\n        echo '<tr class=\"tab_bg_2\">';\n        echo '<td>';\n        echo '<label for=\"dropdown_document_max_size' . $rand . '\">';\n        echo __('Document files maximum size (Mio)');\n        echo '</label>';\n        echo '</td>';\n        echo '<td>';\n        Dropdown::showNumber(\n            'document_max_size',\n            [\n                'value' => $CFG_GLPI['document_max_size'],\n                'min'   => 1,\n                'max'   => 250,\n                'rand'  => $rand,\n            ]\n        );\n        echo '</td>';\n        echo '<td colspan=\"2\"></td>';\n        echo '</tr>';\n\n        if ($canedit) {\n            echo '<tr class=\"tab_bg_2\">';\n            echo '<td colspan=\"4\" class=\"center\">';\n            echo '<input type=\"submit\" name=\"update\" class=\"btn btn-primary\" value=\"' . _sx('button', 'Save') . '\">';\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '</table>';\n\n        if ($canedit) {\n            Html::closeForm();\n        }\n\n        echo '</div>';\n    }\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'   => 'common',\n            'name' => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'            => 1,\n            'table'         => $this->getTable(),\n            'field'         => 'value',\n            'name'          => __('Value'),\n            'massiveaction' => false\n        ];\n\n        return $tab;\n    }\n\n    public function getLogTypeID()\n    {\n        return [$this->getType(), 1];\n    }\n\n    public function post_addItem()\n    {\n        $this->logConfigChange($this->fields['context'], $this->fields['name'], (string)$this->fields['value'], '');\n    }\n\n    public function post_updateItem($history = 1)\n    {\n        global $DB;\n\n       // Check if password expiration mechanism has been activated\n        if (\n            $this->fields['name'] == 'password_expiration_delay'\n            && array_key_exists('value', $this->oldvalues)\n            && (int)$this->oldvalues['value'] === -1\n        ) {\n           // As passwords will now expire, consider that \"now\" is the reference date of expiration delay\n            $DB->update(\n                User::getTable(),\n                ['password_last_update' => $_SESSION['glpi_currenttime']],\n                ['authtype' => Auth::DB_GLPI]\n            );\n\n           // Activate passwordexpiration automated task\n            $DB->update(\n                CronTask::getTable(),\n                ['state' => 1,],\n                ['name' => 'passwordexpiration']\n            );\n        }\n\n        if (array_key_exists('value', $this->oldvalues)) {\n            $this->logConfigChange(\n                $this->fields['context'],\n                $this->fields['name'],\n                (string)$this->fields['value'],\n                (string)$this->oldvalues['value']\n            );\n        }\n    }\n\n    public function post_purgeItem()\n    {\n        $this->logConfigChange($this->fields['context'], $this->fields['name'], '', (string)$this->fields['value']);\n    }\n\n    /**\n     * Log config change in history.\n     *\n     * @param string $context\n     * @param string $name\n     * @param string $newvalue\n     * @param string $oldvalue\n     *\n     * @return void\n     */\n    private function logConfigChange(string $context, string $name, string $newvalue, string $oldvalue): void\n    {\n        $glpi_key = new GLPIKey();\n        if ($glpi_key->isConfigSecured($context, $name)) {\n            $newvalue = $oldvalue = '********';\n        }\n        $oldvalue = $name . ($context !== 'core' ? ' (' . $context . ') ' : ' ') . $oldvalue;\n        Log::constructHistory($this, ['value' => $oldvalue], ['value' => $newvalue]);\n    }\n\n    /**\n     * Get the GLPI Config without unsafe keys like passwords and emails (true on $safer)\n     *\n     * @param boolean $safer do we need to clean more (avoid emails disclosure)\n     * @return array of $CFG_GLPI without unsafe keys\n     *\n     * @since 9.5\n     */\n    public static function getSafeConfig($safer = false)\n    {\n        global $CFG_GLPI;\n\n        $excludedKeys = array_flip(self::$undisclosedFields);\n        $safe_config  = array_diff_key($CFG_GLPI, $excludedKeys);\n\n        if ($safer) {\n            $excludedKeys = array_flip(self::$saferUndisclosedFields);\n            $safe_config = array_diff_key($safe_config, $excludedKeys);\n        }\n\n        return $safe_config;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-adjustments\";\n    }\n\n    /**\n     * Get UUID\n     *\n     * @param string $type UUID type (e.g. 'instance' or 'registration')\n     *\n     * @return string\n     */\n    final public static function getUuid($type)\n    {\n        $conf = self::getConfigurationValues('core', [$type . '_uuid']);\n        $uuid = null;\n        if (!isset($conf[$type . '_uuid']) || empty($conf[$type . '_uuid'])) {\n            $uuid = self::generateUuid($type);\n        } else {\n            $uuid = $conf[$type . '_uuid'];\n        }\n        return $uuid;\n    }\n\n    /**\n     * Generates an unique identifier and store it\n     *\n     * @param string $type UUID type (e.g. 'instance' or 'registration')\n     *\n     * @return string\n     */\n    final public static function generateUuid($type)\n    {\n        $uuid = Toolbox::getRandomString(40);\n        self::setConfigurationValues('core', [$type . '_uuid' => $uuid]);\n        return $uuid;\n    }\n\n    /**\n     * Try to find a valid sender email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     * @param bool     $no_reply     Should the configured \"noreply\" address be\n     *                               used (default: false)\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getEmailSender(\n        ?int $entities_id = null,\n        bool $no_reply = false\n    ): array {\n        // Try to use the configured noreply address if no response is expected\n        // for this notification\n        if ($no_reply) {\n            $sender = Config::getNoReplyEmailSender($entities_id);\n            if ($sender['email'] !== null) {\n                return $sender;\n            } else {\n                trigger_error('No-Reply address is not defined in configuration.', E_USER_WARNING);\n            }\n        }\n\n        // Try to use the configured \"from\" email address\n        $sender = Config::getFromEmailSender($entities_id);\n        if ($sender['email'] !== null) {\n            return $sender;\n        }\n\n        // Try to use the configured \"admin\" email address\n        $sender = Config::getAdminEmailSender($entities_id);\n        if ($sender['email'] !== null) {\n            return $sender;\n        }\n\n        // No valid email was found\n        trigger_error(\n            'No email address is not defined in configuration.',\n            E_USER_WARNING\n        );\n\n        // No values found\n        return [\n            'email' => null,\n            'name'  => null,\n        ];\n    }\n\n    /**\n     * Try to find a valid \"from\" email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getFromEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('from_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid \"admin_email\" email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => sender address, name => sender name]\n     */\n    public static function getAdminEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('admin_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid noreply email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => noreply address, name => noreply name]\n     */\n    public static function getNoReplyEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('noreply_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid replyto email from the GLPI configuration\n     *\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => replyto address, name => replyto name]\n     */\n    public static function getReplyToEmailSender(?int $entities_id = null): array\n    {\n        return self::getEmailSenderFromEntityOrConfig('replyto_email', $entities_id);\n    }\n\n    /**\n     * Try to find a valid email from the GLPI configuration\n     *\n     * @param string   $config_name  Configuration name\n     * @param int|null $entities_id  Entity configuration to be used, default to\n     *                               global configuration\n     *\n     * @return array [email => address, name => name]\n     */\n    private static function getEmailSenderFromEntityOrConfig(string $config_name, ?int $entities_id = null): array\n    {\n        global $CFG_GLPI;\n\n        $email_config_name = $config_name;\n        $name_config_name  = $config_name . '_name';\n\n        // Check admin email in specified entity\n        if (!is_null($entities_id)) {\n            $entity_sender_email = trim(\n                Entity::getUsedConfig($email_config_name, $entities_id, '', '')\n            );\n            $entity_sender_name = trim(\n                Entity::getUsedConfig($name_config_name, $entities_id, '', '')\n            );\n\n            if (NotificationMailing::isUserAddressValid($entity_sender_email)) {\n                return [\n                    'email' => $entity_sender_email,\n                    'name'  => $entity_sender_name,\n                ];\n            }\n        }\n\n        // Fallback to global configuration\n        $global_sender_email = $CFG_GLPI[$email_config_name] ?? \"\";\n        $global_sender_name  = $CFG_GLPI[$name_config_name]  ?? \"\";\n\n        if (NotificationMailing::isUserAddressValid($global_sender_email)) {\n            return [\n                'email' => $global_sender_email,\n                'name'  => $global_sender_name,\n            ];\n        }\n\n        // No valid values found\n        return [\n            'email' => null,\n            'name'  => null,\n        ];\n    }\n\n    /**\n     * Override parent: \"{itemtype} - {header name}\" -> \"{itemtype}\"\n     * There is only one config, no need to display the item name\n     *\n     * @return string\n     */\n    public function getBrowserTabName(): string\n    {\n        return self::getTypeName(1);\n    }\n}\n"], "filenames": ["src/Config.php"], "buggy_code_start_loc": [59], "buggy_code_end_loc": [60], "fixing_code_start_loc": [59], "fixing_code_end_loc": [65], "type": "CWE-522", "message": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. When you pass the config to the javascript, some entries are filtered out. The variable ldap_pass is not filtered and when you look at the source code of the rendered page, we can see the password for the root dn. Users are advised to upgrade. There is no known workaround for this issue.", "other": {"cve": {"id": "CVE-2022-24867", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-21T17:15:08.557", "lastModified": "2022-05-03T13:26:02.953", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. When you pass the config to the javascript, some entries are filtered out. The variable ldap_pass is not filtered and when you look at the source code of the rendered page, we can see the password for the root dn. Users are advised to upgrade. There is no known workaround for this issue."}, {"lang": "es", "value": "GLPI es un paquete gratuito de software de administraci\u00f3n de activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. Cuando es pasada la configuraci\u00f3n al javascript, son filtradas algunas entradas. La variable ldap_pass no es filtrada y cuando es visualizado el c\u00f3digo fuente de la p\u00e1gina renderizada, podemos visualizar la contrase\u00f1a del dn root. Es recomendado a usuarios actualizar. No se presenta ninguna mitigaci\u00f3n conocida para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.8}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-522"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.0", "matchCriteriaId": "DA46AECA-E66C-473E-A101-CA04D74088A3"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/26f0a20810db11641afdcf671bac7a309acbb94e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-4r49-52q9-5fgr", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/26f0a20810db11641afdcf671bac7a309acbb94e"}}