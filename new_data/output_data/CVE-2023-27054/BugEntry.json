{"buggy_code": ["/*\n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\n\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\n\u2588\u2588\u2001     \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001   \u2588\u2588\u2001   \n\u2588\u2588\u2001     \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001   \n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001  \n*/\n\n/**\n * MiroTalk P2P - Client component\n *\n * @link    GitHub: https://github.com/miroslavpejic85/mirotalk\n * @link    Official Live demo: https://p2p.mirotalk.com\n * @license For open source use: AGPLv3\n * @license For commercial use or closed source, contact us at license.mirotalk@gmail.com or purchase directly from CodeCanyon\n * @license CodeCanyon: https://codecanyon.net/item/mirotalk-p2p-webrtc-realtime-video-conferences/38376661\n * @author  Miroslav Pejic - miroslav.pejic.85@gmail.com\n * @version 1.0.2\n *\n */\n\n'use strict';\n\n// https://www.w3schools.com/js/js_strict.asp\n\nconst signalingServer = getSignalingServer();\nconst roomId = getRoomId();\nconst peerLoockupUrl = 'https://extreme-ip-lookup.com/json/?key=demo2'; // get your API Key at https://extreme-ip-lookup.com\nconst avatarApiUrl = 'https://eu.ui-avatars.com/api';\nconst welcomeImg = '../images/image-placeholder.png';\nconst shareUrlImg = '../images/image-placeholder.png';\nconst leaveRoomImg = '../images/leave-room.png';\nconst confirmImg = '../images/image-placeholder.png';\nconst fileSharingImg = '../images/share.png';\nconst roomLockedImg = '../images/locked.png';\nconst camOffImg = '../images/cam-off.png';\nconst audioOffImg = '../images/audio-off.png';\nconst deleteImg = '../images/delete.png';\nconst youtubeImg = '../images/youtube.png';\nconst messageImg = '../images/message.png';\nconst kickedOutImg = '../images/leave-room.png';\nconst audioGif = '../images/audio.gif';\nconst videoAudioShare = '../images/va-share.png';\nconst aboutImg = '../images/mirotalk-logo.png';\nconst imgFeedback = '../images/feedback.png';\nconst forbiddenImg = '../images/forbidden.png';\nconst avatarImg = '../images/mirotalk-logo.png';\nconst camMicOff = '../images/cam-mic-off.png';\n\n// nice free icon: https://www.iconfinder.com\n\nconst fileSharingInput = '*'; // allow all file extensions\n\nconst isWebRTCSupported = DetectRTC.isWebRTCSupported;\nconst isMobileDevice = DetectRTC.isMobileDevice;\nconst myBrowserName = DetectRTC.browser.name;\n\nconst wbImageInput = 'image/*';\nconst wbWidth = 1200;\nconst wbHeight = 600;\n\nconst chatInputEmoji = {\n    '<3': '\\u2764\\uFE0F',\n    '</3': '\\uD83D\\uDC94',\n    ':D': '\\uD83D\\uDE00',\n    ':)': '\\uD83D\\uDE03',\n    ';)': '\\uD83D\\uDE09',\n    ':(': '\\uD83D\\uDE12',\n    ':p': '\\uD83D\\uDE1B',\n    ';p': '\\uD83D\\uDE1C',\n    \":'(\": '\\uD83D\\uDE22',\n    ':+1:': '\\uD83D\\uDC4D',\n}; // https://github.com/wooorm/gemoji/blob/main/support.md\n\nconst className = {\n    user: 'fas fa-user',\n    clock: 'fas fa-clock',\n    audioOn: 'fas fa-microphone',\n    audioOff: 'fas fa-microphone-slash',\n    videoOn: 'fas fa-video',\n    videoOff: 'fas fa-video-slash',\n    screenOn: 'fas fa-desktop',\n    screenOff: 'fas fa-stop-circle',\n    handPulsate: 'fas fa-hand-paper pulsate',\n    privacy: 'far fa-circle',\n    snapShot: 'fas fa-camera-retro',\n    pinUnpin: 'fas fa-map-pin',\n    fullScreen: 'fas fa-expand',\n    fsOn: 'fas fa-compress-alt',\n    fsOff: 'fas fa-expand-alt',\n    msgPrivate: 'fas fa-paper-plane',\n    shareFile: 'fas fa-upload',\n    shareVideoAudio: 'fab fa-youtube',\n    kickOut: 'fas fa-sign-out-alt',\n    chatOn: 'fas fa-comment',\n    chatOff: 'fas fa-comment-slash',\n    ghost: 'fas fa-ghost',\n    undo: 'fas fa-undo',\n    captionOn: 'fas fa-closed-captioning',\n    trash: 'fas fa-trash',\n    copy: 'fas fa-copy',\n    heart: 'fas fa-heart',\n};\n// https://fontawesome.com/search?o=r&m=free\n\nconst myRoomUrl = window.location.href;\n\n// Show desired buttons captionBtn, showSwapCameraBtn, showScreenShareBtn, showFullScreenBtn -> (auto-detected)\nconst buttons = {\n    main: {\n        showShareRoomBtn: true,\n        showAudioBtn: true,\n        showVideoBtn: true,\n        showScreenBtn: true,\n        showRecordStreamBtn: true,\n        showChatRoomBtn: true,\n        showCaptionRoomBtn: true,\n        showMyHandBtn: true,\n        showWhiteboardBtn: true,\n        showFileShareBtn: true,\n        showMySettingsBtn: true,\n        showAboutBtn: true, // Please keep me always true, Thank you!\n    },\n    chat: {\n        showSaveMessageBtn: true,\n        showMarkDownBtn: true,\n        showFileShareBtn: true,\n        showShareVideoAudioBtn: true,\n        showParticipantsBtn: true,\n    },\n    settings: {\n        showTabRoomParticipants: true,\n        showTabRoomSecurity: true,\n        showMuteEveryoneBtn: true,\n        showHideEveryoneBtn: true,\n        showEjectEveryoneBtn: true,\n        showLockRoomBtn: true,\n        showUnlockRoomBtn: true,\n    },\n    remote: {\n        showAudioVolume: true,\n        audioBtnClickAllowed: true,\n        videoBtnClickAllowed: true,\n        showKickOutBtn: true,\n        showSnapShotBtn: true,\n        showFileShareBtn: true,\n        showShareVideoAudioBtn: true,\n        showPrivateMessageBtn: true,\n    },\n    local: {\n        showSnapShotBtn: true,\n        showVideoCircleBtn: true,\n    },\n};\n\nconst isRulesActive = true; // Presenter can do anything, guest is slightly moderate, if false no Rules for the room.\n\nconst forceCamMaxResolutionAndFps = false; // This force the webCam to max resolution, up to 4k and 60fps (very high bandwidth are required) if false, you can set it from settings\n\nconst userLimitsActive = false; // Limit users per room\n\nconst usersCountLimit = 2; // Limit 2 users per room if userLimitsActive true\n\nconst useAvatarApi = true; // if false the cam-Off avatar = avatarImg\n\nlet notifyBySound = true; // turn on - off sound notifications\n\nlet thisRoomPassword = null;\n\nlet isRoomLocked = false;\n\nlet isPresenter = false; // Who init the room (aka first peer joined)\n\nlet needToEnableMyAudio = false; // On screen sharing end, check if need to enable my audio\n\nlet initEnumerateDevicesFailed = false; // Check if user webcam and audio init is failed\n\nlet isVideoPrivacyActive = false; // Video circle for privacy\n\nlet surveyActive = true; // when leaving the room give a feedback, if false will be redirected to newcall page\n\nlet surveyURL = 'https://www.questionpro.com/t/AUs7VZq00L';\n\nlet myPeerId; // socket.id\nlet peerInfo = {}; // Some peer info\nlet userAgent; // User agent info\n\nlet isTabletDevice = false;\nlet isIPadDevice = false;\nlet isVideoFullScreenSupported = true;\n\n// video cam - screen max frame rate\nlet videoMaxFrameRate = 30;\nlet screenMaxFrameRate = 30;\n\nlet videoQualitySelectedIndex = 0; // default\n\nlet leftChatAvatar;\nlet rightChatAvatar;\nlet chatMessagesId = 0;\n\nlet callStartTime;\nlet callElapsedTime;\nlet recStartTime;\nlet recElapsedTime;\nlet mirotalkTheme = 'dark'; // dark - grey ...\nlet mirotalkBtnsBar = 'vertical'; // vertical - horizontal\nlet pinVideoPositionSelect;\nlet swalBackground = 'rgba(0, 0, 0, 0.7)'; // black - #16171b - transparent ...\nlet peerGeo;\nlet myPeerName = getPeerName();\nlet isScreenEnabled = getScreenEnabled();\nlet isScreenSharingSupported = false;\nlet isCamMirrored = false;\nlet notify = getNotify();\nlet useAudio = true;\nlet useVideo = true;\nlet isEnumerateVideoDevices = false;\nlet isEnumerateAudioDevices = false;\nlet camera = 'user'; // user = front-facing camera on a smartphone. | environment = the back camera on a smartphone.\nlet roomLocked = false;\nlet myVideoChange = false;\nlet myHandStatus = false;\nlet myVideoStatus = false;\nlet myAudioStatus = false;\nlet myScreenStatus = false;\nlet pitchDetectionStatus = false;\nlet audioContext;\nlet mediaStreamSource;\nlet meter;\nlet isScreenStreaming = false;\nlet showChatOnMessage = true;\nlet isChatRoomVisible = false;\nlet isCaptionBoxVisible = false;\nlet isChatEmojiVisible = false;\nlet isChatMarkdownOn = false;\nlet isButtonsVisible = false;\nlet isButtonsBarOver = false;\nlet isMySettingsVisible = false;\nlet isVideoOnFullScreen = false;\nlet isDocumentOnFullScreen = false;\nlet isWhiteboardFs = false;\nlet isVideoUrlPlayerOpen = false;\nlet isVideoPinned = false;\nlet pinnedVideoPlayerId = null;\nlet isRecScreenStream = false;\nlet isChatPasteTxt = false;\nlet needToCreateOffer = false; // after session description answer\nlet signalingSocket; // socket.io connection to our webserver\nlet initStream; // initial webcam stream\nlet localMediaStream; // my microphone / webcam\nlet remoteMediaStream; // peers microphone / webcam\nlet recScreenStream; // recorded screen stream\nlet remoteMediaControls = false; // enable - disable peers video player controls (default false)\nlet peerConnection = null; // RTCPeerConnection\nlet peerConnections = {}; // keep track of our peer connections, indexed by peer_id == socket.io id\nlet chatDataChannels = {}; // keep track of our peer chat data channels\nlet fileDataChannels = {}; // keep track of our peer file sharing data channels\nlet peerMediaElements = {}; // keep track of our peer <video> tags, indexed by peer_id\nlet chatMessages = []; // collect chat messages to save it later if want\nlet allPeers = {}; // keep track of all peers in the room, indexed by peer_id == socket.io id\nlet transcripts = []; //collect all the transcripts to save it later if you need\nlet backupIceServers = [{ urls: 'stun:stun.l.google.com:19302' }]; // backup iceServers\nlet countTime; // conference count time\n// init audio-video\nlet initAudioBtn;\nlet initVideoBtn;\n// init Devices select\nlet initVideo;\nlet initVideoSelect;\nlet initMicrophoneSelect;\nlet initSpeakerSelect;\n// buttons bar\nlet buttonsBar;\nlet shareRoomBtn;\nlet audioBtn;\nlet videoBtn;\nlet swapCameraBtn;\nlet screenShareBtn;\nlet recordStreamBtn;\nlet fullScreenBtn;\nlet chatRoomBtn;\nlet captionBtn;\nlet myHandBtn;\nlet whiteboardBtn;\nlet fileShareBtn;\nlet mySettingsBtn;\nlet aboutBtn;\nlet leaveRoomBtn;\n// chat room elements\nlet msgerDraggable;\nlet msgerHeader;\nlet msgerTheme;\nlet msgerCPBtn;\nlet msgerClean;\nlet msgerSaveBtn;\nlet msgerClose;\nlet msgerChat;\nlet msgerEmojiBtn;\nlet msgerMarkdownBtn;\nlet msgerShareFileBtn;\nlet msgerInput;\nlet msgerCleanTextBtn;\nlet msgerPasteBtn;\nlet msgerShowChatOnMsg;\nlet msgerSendBtn;\n//caption section\nlet captionDraggable;\nlet captionHeader;\nlet captionTheme;\nlet captionClean;\nlet captionSaveBtn;\nlet captionClose;\nlet captionChat;\n// chat room connected peers\nlet msgerCP;\nlet msgerCPHeader;\nlet msgerCPCloseBtn;\nlet msgerCPList;\n// chat room emoji picker\nlet msgerEmojiPicker;\n// my settings\nlet mySettings;\nlet mySettingsHeader;\nlet tabDevicesBtn;\nlet tabBandwidthBtn;\nlet tabRoomBtn;\nlet tabStylingBtn;\nlet tabLanguagesBtn;\nlet mySettingsCloseBtn;\nlet myPeerNameSet;\nlet myPeerNameSetBtn;\nlet switchSounds;\nlet audioInputSelect;\nlet audioOutputSelect;\nlet videoSelect;\nlet videoQualitySelect;\nlet videoFpsSelect;\nlet screenFpsSelect;\nlet themeSelect;\nlet videoObjFitSelect;\n\nlet btnsBarSelect;\nlet selectors;\nlet tabRoomParticipants;\nlet tabRoomSecurity;\n// my video element\nlet myVideo;\nlet myVideoWrap;\nlet myVideoAvatarImage;\n// name && hand video audio status\nlet myVideoParagraph;\nlet myHandStatusIcon;\nlet myVideoStatusIcon;\nlet myAudioStatusIcon;\n// record Media Stream\nlet mediaRecorder;\nlet recordedBlobs;\nlet isStreamRecording = false;\n// whiteboard init\nlet whiteboard;\nlet whiteboardHeader;\nlet wbDrawingColorEl;\nlet whiteboardGhostButton;\nlet wbBackgroundColorEl;\nlet whiteboardPencilBtn;\nlet whiteboardObjectBtn;\nlet whiteboardUndoBtn;\nlet whiteboardRedoBtn;\nlet whiteboardImgFileBtn;\nlet whiteboardImgUrlBtn;\nlet whiteboardTextBtn;\nlet whiteboardLineBtn;\nlet whiteboardRectBtn;\nlet whiteboardCircleBtn;\nlet whiteboardSaveBtn;\nlet whiteboardEraserBtn;\nlet whiteboardCleanBtn;\nlet whiteboardCloseBtn;\n// whiteboard settings\nlet wbCanvas = null;\nlet wbIsDrawing = false;\nlet wbIsOpen = false;\nlet wbIsRedoing = false;\nlet wbIsEraser = false;\nlet wbIsBgTransparent = false;\nlet wbPop = [];\n// room actions btns\nlet muteEveryoneBtn;\nlet hideEveryoneBtn;\nlet ejectEveryoneBtn;\nlet lockRoomBtn;\nlet unlockRoomBtn;\n// file transfer settings\nlet fileToSend;\nlet fileReader;\nlet receiveBuffer = [];\nlet receivedSize = 0;\nlet incomingFileInfo;\nlet incomingFileData;\n// send form\nlet sendFileDiv;\nlet sendFileInfo;\nlet sendProgress;\nlet sendAbortBtn;\nlet sendInProgress = false;\n// receive form\nlet receiveFileDiv;\nlet receiveFileInfo;\nlet receiveProgress;\nlet receiveHideBtn;\nlet receiveFilePercentage;\nlet receiveInProgress = false;\n// MTU 1kb to prevent drop.\n// const chunkSize = 1024;\nconst chunkSize = 1024 * 16; // 16kb/s\n// video URL player\nlet videoUrlCont;\nlet videoAudioUrlCont;\nlet videoUrlHeader;\nlet videoAudioUrlHeader;\nlet videoUrlCloseBtn;\nlet videoAudioCloseBtn;\nlet videoUrlIframe;\nlet videoAudioUrlElement;\n// speech recognition\nlet speechRecognitionIcon;\nlet speechRecognitionStart;\nlet speechRecognitionStop;\n\n// Local Storage class\nlet lS = new LocalStorage();\n\n/**\n * Load all Html elements by Id\n */\nfunction getHtmlElementsById() {\n    countTime = getId('countTime');\n    // Init devices select\n    initVideo = getId('initVideo');\n    initVideoSelect = getId('initVideoSelect');\n    initMicrophoneSelect = getId('initMicrophoneSelect');\n    initSpeakerSelect = getId('initSpeakerSelect');\n    // my video\n    myVideo = getId('myVideo');\n    myVideoWrap = getId('myVideoWrap');\n    myVideoAvatarImage = getId('myVideoAvatarImage');\n    // buttons Bar\n    buttonsBar = getId('buttonsBar');\n    shareRoomBtn = getId('shareRoomBtn');\n    audioBtn = getId('audioBtn');\n    videoBtn = getId('videoBtn');\n    swapCameraBtn = getId('swapCameraBtn');\n    screenShareBtn = getId('screenShareBtn');\n    recordStreamBtn = getId('recordStreamBtn');\n    fullScreenBtn = getId('fullScreenBtn');\n    captionBtn = getId('captionBtn');\n    chatRoomBtn = getId('chatRoomBtn');\n    whiteboardBtn = getId('whiteboardBtn');\n    fileShareBtn = getId('fileShareBtn');\n    myHandBtn = getId('myHandBtn');\n    mySettingsBtn = getId('mySettingsBtn');\n    aboutBtn = getId('aboutBtn');\n    leaveRoomBtn = getId('leaveRoomBtn');\n    // chat Room elements\n    msgerDraggable = getId('msgerDraggable');\n    msgerHeader = getId('msgerHeader');\n    msgerTheme = getId('msgerTheme');\n    msgerCPBtn = getId('msgerCPBtn');\n    msgerClean = getId('msgerClean');\n    msgerSaveBtn = getId('msgerSaveBtn');\n    msgerClose = getId('msgerClose');\n    msgerChat = getId('msgerChat');\n    msgerEmojiBtn = getId('msgerEmojiBtn');\n    msgerMarkdownBtn = getId('msgerMarkdownBtn');\n    msgerShareFileBtn = getId('msgerShareFileBtn');\n    msgerInput = getId('msgerInput');\n    msgerCleanTextBtn = getId('msgerCleanTextBtn');\n    msgerPasteBtn = getId('msgerPasteBtn');\n    msgerShowChatOnMsg = getId('msgerShowChatOnMsg');\n    msgerSendBtn = getId('msgerSendBtn');\n    // chat room connected peers\n    msgerCP = getId('msgerCP');\n    msgerCPHeader = getId('msgerCPHeader');\n    msgerCPCloseBtn = getId('msgerCPCloseBtn');\n    msgerCPList = getId('msgerCPList');\n    // chat room emoji picker\n    msgerEmojiPicker = getId('msgerEmojiPicker');\n    //caption box elements\n    captionDraggable = getId('captionDraggable');\n    captionHeader = getId('captionHeader');\n    captionTheme = getId('captionTheme');\n    captionClean = getId('captionClean');\n    captionSaveBtn = getId('captionSaveBtn');\n    captionClose = getId('captionClose');\n    captionChat = getId('captionChat');\n    // my settings\n    mySettings = getId('mySettings');\n    mySettingsHeader = getId('mySettingsHeader');\n    tabDevicesBtn = getId('tabDevicesBtn');\n    tabBandwidthBtn = getId('tabBandwidthBtn');\n    tabRoomBtn = getId('tabRoomBtn');\n    tabStylingBtn = getId('tabStylingBtn');\n    tabLanguagesBtn = getId('tabLanguagesBtn');\n    mySettingsCloseBtn = getId('mySettingsCloseBtn');\n    myPeerNameSet = getId('myPeerNameSet');\n    myPeerNameSetBtn = getId('myPeerNameSetBtn');\n    switchSounds = getId('switchSounds');\n    audioInputSelect = getId('audioSource');\n    audioOutputSelect = getId('audioOutput');\n    videoSelect = getId('videoSource');\n    videoQualitySelect = getId('videoQuality');\n    videoFpsSelect = getId('videoFps');\n    screenFpsSelect = getId('screenFps');\n    themeSelect = getId('mirotalkTheme');\n    videoObjFitSelect = getId('videoObjFitSelect');\n    btnsBarSelect = getId('mirotalkBtnsBar');\n    pinVideoPositionSelect = getId('pinVideoPositionSelect');\n    tabRoomParticipants = getId('tabRoomParticipants');\n    tabRoomSecurity = getId('tabRoomSecurity');\n    // my conference name, hand, video - audio status\n    myVideoParagraph = getId('myVideoParagraph');\n    myHandStatusIcon = getId('myHandStatusIcon');\n    myVideoStatusIcon = getId('myVideoStatusIcon');\n    myAudioStatusIcon = getId('myAudioStatusIcon');\n    // my whiteboard\n    whiteboard = getId('whiteboard');\n    whiteboardHeader = getId('whiteboardHeader');\n    wbDrawingColorEl = getId('wbDrawingColorEl');\n    whiteboardGhostButton = getId('whiteboardGhostButton');\n    wbBackgroundColorEl = getId('wbBackgroundColorEl');\n    whiteboardPencilBtn = getId('whiteboardPencilBtn');\n    whiteboardObjectBtn = getId('whiteboardObjectBtn');\n    whiteboardUndoBtn = getId('whiteboardUndoBtn');\n    whiteboardRedoBtn = getId('whiteboardRedoBtn');\n    whiteboardImgFileBtn = getId('whiteboardImgFileBtn');\n    whiteboardImgUrlBtn = getId('whiteboardImgUrlBtn');\n    whiteboardTextBtn = getId('whiteboardTextBtn');\n    whiteboardLineBtn = getId('whiteboardLineBtn');\n    whiteboardRectBtn = getId('whiteboardRectBtn');\n    whiteboardCircleBtn = getId('whiteboardCircleBtn');\n    whiteboardSaveBtn = getId('whiteboardSaveBtn');\n    whiteboardEraserBtn = getId('whiteboardEraserBtn');\n    whiteboardCleanBtn = getId('whiteboardCleanBtn');\n    whiteboardCloseBtn = getId('whiteboardCloseBtn');\n    // room actions buttons\n    muteEveryoneBtn = getId('muteEveryoneBtn');\n    hideEveryoneBtn = getId('hideEveryoneBtn');\n    ejectEveryoneBtn = getId('ejectEveryoneBtn');\n    lockRoomBtn = getId('lockRoomBtn');\n    unlockRoomBtn = getId('unlockRoomBtn');\n    // file send progress\n    sendFileDiv = getId('sendFileDiv');\n    sendFileInfo = getId('sendFileInfo');\n    sendProgress = getId('sendProgress');\n    sendAbortBtn = getId('sendAbortBtn');\n    // file receive progress\n    receiveFileDiv = getId('receiveFileDiv');\n    receiveFileInfo = getId('receiveFileInfo');\n    receiveProgress = getId('receiveProgress');\n    receiveHideBtn = getId('receiveHideBtn');\n    receiveFilePercentage = getId('receiveFilePercentage');\n    // video url player\n    videoUrlCont = getId('videoUrlCont');\n    videoAudioUrlCont = getId('videoAudioUrlCont');\n    videoUrlHeader = getId('videoUrlHeader');\n    videoAudioUrlHeader = getId('videoAudioUrlHeader');\n    videoUrlCloseBtn = getId('videoUrlCloseBtn');\n    videoAudioCloseBtn = getId('videoAudioCloseBtn');\n    videoUrlIframe = getId('videoUrlIframe');\n    videoAudioUrlElement = getId('videoAudioUrlElement');\n    // speech recognition\n    speechRecognitionIcon = getId('speechRecognitionIcon');\n    speechRecognitionStart = getId('speechRecognitionStart');\n    speechRecognitionStop = getId('speechRecognitionStop');\n}\n\n/**\n * Using tippy aka very nice tooltip!\n * https://atomiks.github.io/tippyjs/\n */\nfunction setButtonsToolTip() {\n    // not need for mobile\n    if (isMobileDevice) return;\n    // main buttons\n    setTippy(shareRoomBtn, 'Invite others to join', 'right-start');\n    setTippy(audioBtn, 'Stop the audio', 'right-start');\n    setTippy(videoBtn, 'Stop the video', 'right-start');\n    setTippy(screenShareBtn, 'Start screen sharing', 'right-start');\n    setTippy(recordStreamBtn, 'Start recording', 'right-start');\n    setTippy(fullScreenBtn, 'View full screen', 'right-start');\n    setTippy(chatRoomBtn, 'Open the chat', 'right-start');\n    setTippy(captionBtn, 'Open the caption', 'right-start');\n    setTippy(myHandBtn, 'Raise your hand', 'right-start');\n    setTippy(whiteboardBtn, 'Open the whiteboard', 'right-start');\n    setTippy(fileShareBtn, 'Share file', 'right-start');\n    setTippy(mySettingsBtn, 'Open settings', 'right-start');\n    setTippy(aboutBtn, 'About this project', 'right-start');\n    setTippy(leaveRoomBtn, 'Leave this room', 'right-start');\n    // chat room buttons\n    setTippy(msgerTheme, 'Ghost theme', 'top');\n    setTippy(msgerCPBtn, 'Private messages', 'top');\n    setTippy(msgerClean, 'Clean the messages', 'top');\n    setTippy(msgerSaveBtn, 'Save the messages', 'top');\n    setTippy(msgerClose, 'Close', 'right');\n    setTippy(msgerEmojiBtn, 'Emoji', 'top');\n    setTippy(msgerMarkdownBtn, 'Markdown', 'top');\n    setTippy(msgerShareFileBtn, 'Share file', 'top');\n    setTippy(msgerCleanTextBtn, 'Clean', 'top');\n    setTippy(msgerPasteBtn, 'Paste', 'top');\n    setTippy(msgerShowChatOnMsg, \"Show me when I'm receive a new message\", 'top');\n    setTippy(msgerSendBtn, 'Send', 'top');\n    // chat participants buttons\n    setTippy(msgerCPCloseBtn, 'Close', 'left');\n    // caption buttons\n    setTippy(captionClose, 'Close', 'right');\n    setTippy(captionTheme, 'Ghost theme', 'top');\n    setTippy(captionClean, 'Clean the messages', 'top');\n    setTippy(captionSaveBtn, 'Save the messages', 'top');\n    // settings\n    setTippy(mySettingsCloseBtn, 'Close', 'right');\n    setTippy(myPeerNameSetBtn, 'Change name', 'top');\n    // tab btns\n    setTippy(tabDevicesBtn, 'Devices', 'top');\n    setTippy(tabBandwidthBtn, 'Bandwidth', 'top');\n    setTippy(tabRoomBtn, 'Room', 'top');\n    setTippy(tabStylingBtn, 'Styling', 'top');\n    setTippy(tabLanguagesBtn, 'Languages', 'top');\n    // whiteboard btns\n    setTippy(wbDrawingColorEl, 'Drawing color', 'bottom');\n    setTippy(whiteboardGhostButton, 'Toggle transparent background', 'bottom');\n    setTippy(wbBackgroundColorEl, 'Background color', 'bottom');\n    setTippy(whiteboardPencilBtn, 'Drawing mode', 'bottom');\n    setTippy(whiteboardObjectBtn, 'Object mode', 'bottom');\n    setTippy(whiteboardUndoBtn, 'Undo', 'bottom');\n    setTippy(whiteboardRedoBtn, 'Redo', 'bottom');\n    setTippy(whiteboardImgFileBtn, 'Add image from file', 'bottom');\n    setTippy(whiteboardImgUrlBtn, 'Add image from URL', 'bottom');\n    setTippy(whiteboardTextBtn, 'Add the text', 'bottom');\n    setTippy(whiteboardLineBtn, 'Add the line', 'bottom');\n    setTippy(whiteboardRectBtn, 'Add the rectangle', 'bottom');\n    setTippy(whiteboardCircleBtn, 'Add the circle', 'bottom');\n    setTippy(whiteboardSaveBtn, 'Save the board', 'bottom');\n    setTippy(whiteboardEraserBtn, 'Erase the object', 'bottom');\n    setTippy(whiteboardCleanBtn, 'Clean the board', 'bottom');\n    setTippy(whiteboardCloseBtn, 'Close', 'right');\n    // room actions btn\n    // setTippy(muteEveryoneBtn, 'Mute everyone except yourself', 'top');\n    // setTippy(hideEveryoneBtn, 'Hide everyone except yourself', 'top');\n    // setTippy(ejectEveryoneBtn, 'Eject everyone except yourself', 'top');\n    // Suspend/Hide File transfer btn\n    setTippy(sendAbortBtn, 'Abort file transfer', 'right-start');\n    setTippy(receiveHideBtn, 'Hide file transfer', 'right-start');\n    // video URL player\n    setTippy(videoUrlCloseBtn, 'Close the video player', 'right-start');\n    setTippy(videoAudioCloseBtn, 'Close the video player', 'right-start');\n    setTippy(msgerVideoUrlBtn, 'Share a video or audio to all participants', 'top');\n}\n\n/**\n * Set nice tooltip to element\n * @param {object} elem element\n * @param {string} content message to popup\n * @param {string} placement position\n */\nfunction setTippy(elem, content, placement) {\n    if (isMobileDevice) return;\n    tippy(elem, {\n        content: content,\n        placement: placement,\n    });\n}\n\n/**\n * Get peer info using DetecRTC\n * https://github.com/muaz-khan/DetectRTC\n * @returns {object} peer info\n */\nfunction getPeerInfo() {\n    return {\n        detectRTCversion: DetectRTC.version,\n        isWebRTCSupported: DetectRTC.isWebRTCSupported,\n        isDesktopDevice: !DetectRTC.isMobileDevice && !isTabletDevice && !isIPadDevice,\n        isMobileDevice: DetectRTC.isMobileDevice,\n        isTabletDevice: isTabletDevice,\n        isIPadDevice: isIPadDevice,\n        osName: DetectRTC.osName,\n        osVersion: DetectRTC.osVersion,\n        browserName: DetectRTC.browser.name,\n        browserVersion: DetectRTC.browser.version,\n    };\n}\n\n/**\n * Get approximative peer geolocation\n * Get your API Key at https://extreme-ip-lookup.com\n */\nasync function getPeerGeoLocation() {\n    console.log('07. Get peer geo location');\n    fetch(peerLoockupUrl)\n        .then((res) => res.json())\n        .then((outJson) => {\n            peerGeo = outJson;\n        })\n        .catch((err) => console.warn(err));\n}\n\n/**\n * Get Signaling server URL\n * @returns {string} Signaling server URL\n */\nfunction getSignalingServer() {\n    console.log('00 Location', window.location);\n    return window.location.protocol + '//' + window.location.hostname;\n}\n\n/**\n * Generate random Room id if not set\n * @returns {string} Room Id\n */\nfunction getRoomId() {\n    // chek if passed as params /join?room=id\n    let qs = new URLSearchParams(window.location.search);\n    let queryRoomId = qs.get('room');\n\n    // skip /join/\n    let roomId = queryRoomId ? queryRoomId : window.location.pathname.substring(6);\n\n    // if not specified room id, create one random\n    if (roomId == '') {\n        roomId = makeId(20);\n        const newUrl = signalingServer + '/join/' + roomId;\n        window.history.pushState({ url: newUrl }, roomId, newUrl);\n    }\n    return roomId;\n}\n\n/**\n * Generate random Id\n * @param {integer} length\n * @returns {string} random id\n */\nfunction makeId(length) {\n    let result = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n/**\n * Check if notify is set\n * @returns {boolean} true/false (default true)\n */\nfunction getNotify() {\n    let qs = new URLSearchParams(window.location.search);\n    let notify = qs.get('notify');\n    if (notify) {\n        let queryNotify = notify === '1' || notify === 'true';\n        if (queryNotify != null) return queryNotify;\n    }\n    return true;\n}\n\n/**\n * Check if peer name is set\n * @returns {string} Peer Name\n */\nfunction getPeerName() {\n    let qs = new URLSearchParams(window.location.search);\n    return qs.get('name');\n}\n\n/**\n * Is screen enabled on join room\n * @returns {boolean} true/false\n */\nfunction getScreenEnabled() {\n    let qs = new URLSearchParams(window.location.search);\n    let screen = qs.get('screen');\n    if (screen) {\n        screen = screen.toLowerCase();\n        let queryPeerScreen = screen === '1' || screen === 'true';\n        return queryPeerScreen;\n    }\n    return false;\n}\n\n/**\n * Check if there is peer connections\n * @returns {boolean} true/false\n */\nfunction thereIsPeerConnections() {\n    if (Object.keys(peerConnections).length === 0) return false;\n    return true;\n}\n\n/**\n * Count the peer connections\n * @returns peer connections count\n */\nfunction countPeerConnections() {\n    return Object.keys(peerConnections).length;\n}\n\n/**\n * On body load Get started\n */\nfunction initClientPeer() {\n    if (!isWebRTCSupported) {\n        return userLog('error', 'This browser seems not supported WebRTC!');\n    }\n\n    userAgent = navigator.userAgent.toLowerCase();\n\n    isTabletDevice = isTablet(userAgent);\n    isIPadDevice = isIpad(userAgent);\n    peerInfo = getPeerInfo();\n\n    // check if video Full screen supported on default true\n    if (peerInfo.isMobileDevice && peerInfo.osName === 'iOS') {\n        isVideoFullScreenSupported = false;\n    }\n\n    console.log('01. Connecting to signaling server');\n\n    // Disable the HTTP long-polling transport\n    signalingSocket = io({ transports: ['websocket'] });\n\n    const transport = signalingSocket.io.engine.transport.name; // in most cases, \"polling\"\n    console.log('02. Connection transport', transport);\n\n    // Check upgrade transport\n    signalingSocket.io.engine.on('upgrade', () => {\n        const upgradedTransport = signalingSocket.io.engine.transport.name; // in most cases, \"websocket\"\n        console.log('Connection upgraded transport', upgradedTransport);\n    });\n\n    // on receiving data from signaling server...\n    signalingSocket.on('connect', handleConnect);\n    signalingSocket.on('roomIsLocked', handleUnlockTheRoom);\n    signalingSocket.on('roomAction', handleRoomAction);\n    signalingSocket.on('addPeer', handleAddPeer);\n    signalingSocket.on('serverInfo', handleServerInfo);\n    signalingSocket.on('sessionDescription', handleSessionDescription);\n    signalingSocket.on('iceCandidate', handleIceCandidate);\n    signalingSocket.on('peerName', handlePeerName);\n    signalingSocket.on('peerStatus', handlePeerStatus);\n    signalingSocket.on('peerAction', handlePeerAction);\n    signalingSocket.on('wbCanvasToJson', handleJsonToWbCanvas);\n    signalingSocket.on('whiteboardAction', handleWhiteboardAction);\n    signalingSocket.on('kickOut', handleKickedOut);\n    signalingSocket.on('fileInfo', handleFileInfo);\n    signalingSocket.on('fileAbort', handleFileAbort);\n    signalingSocket.on('videoPlayer', handleVideoPlayer);\n    signalingSocket.on('disconnect', handleDisconnect);\n    signalingSocket.on('removePeer', handleRemovePeer);\n} // end [initClientPeer]\n\n/**\n * Send async data to signaling server (server.js)\n * @param {string} msg msg to send to signaling server\n * @param {object} config data to send to signaling server\n */\nasync function sendToServer(msg, config = {}) {\n    await signalingSocket.emit(msg, config);\n}\n\n/**\n * Send async data through RTC Data Channels\n * @param {object} config data\n */\nasync function sendToDataChannel(config) {\n    if (thereIsPeerConnections() && typeof config === 'object' && config !== null) {\n        for (let peer_id in chatDataChannels) {\n            if (chatDataChannels[peer_id].readyState === 'open')\n                await chatDataChannels[peer_id].send(JSON.stringify(config));\n        }\n    }\n}\n\n/**\n * Connected to Signaling Server. Once the user has given us access to their\n * microphone/cam, join the channel and start peering up\n */\nasync function handleConnect() {\n    console.log('03. Connected to signaling server');\n\n    myPeerId = signalingSocket.id;\n    console.log('04. My peer id [ ' + myPeerId + ' ]');\n\n    if (localMediaStream) {\n        await joinToChannel();\n    } else {\n        await initEnumerateDevices();\n        await setupLocalMedia();\n    }\n}\n\n/**\n * Handle some signaling server info\n * @param {object} config data\n */\nfunction handleServerInfo(config) {\n    let peers_count = config.peers_count;\n\n    // Get survey settings from server\n    surveyActive = config.survey.active;\n    surveyURL = config.survey.url;\n\n    console.log('13. Peers count', peers_count);\n\n    // Limit room to n peers\n    if (userLimitsActive && peers_count > usersCountLimit) {\n        return roomIsBusy();\n    }\n\n    // Let start with some basic rules\n    isPresenter = peers_count == 1 ? true : false;\n    if (isRulesActive) {\n        handleRules(isPresenter);\n    }\n\n    if (notify && peers_count == 1) {\n        shareRoomMeetingURL(true);\n    } else {\n        checkShareScreen();\n    }\n}\n\n/**\n * Room is busy, disconnect me and alert the user that\n * will be redirected to home page\n */\nfunction roomIsBusy() {\n    signalingSocket.disconnect();\n    playSound('alert');\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: swalBackground,\n        imageUrl: forbiddenImg,\n        position: 'center',\n        title: 'Room is busy',\n        html: `The room is limited to ${usersCountLimit} users. <br/> Please try again later`,\n        showDenyButton: false,\n        confirmButtonText: `OK`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            openURL('/');\n        }\n    });\n}\n\n/**\n * Presenter can do anything, for others you can limit\n * some functions by hidden the buttons etc.\n *\n * @param {boolean} isPresenter true/false\n */\nfunction handleRules(isPresenter) {\n    console.log('14. Peer isPresenter: ' + isPresenter);\n    if (!isPresenter) {\n        buttons.settings.showTabRoomParticipants = false;\n        buttons.settings.showTabRoomSecurity = false;\n        buttons.remote.audioBtnClickAllowed = false;\n        buttons.remote.videoBtnClickAllowed = false;\n        buttons.remote.showKickOutBtn = false;\n        //...\n    } else {\n        buttons.settings.showTabRoomParticipants = true;\n        buttons.settings.showTabRoomSecurity = true;\n        buttons.settings.showLockRoomBtn = !isRoomLocked;\n        buttons.settings.showUnlockRoomBtn = isRoomLocked;\n        buttons.remote.audioBtnClickAllowed = true;\n        buttons.remote.videoBtnClickAllowed = true;\n        buttons.remote.showKickOutBtn = true;\n    }\n\n    handleButtonsRule();\n}\n\n/**\n * Hide not desired buttons\n */\nfunction handleButtonsRule() {\n    // Main\n    elemDisplay(shareRoomBtn, buttons.main.showShareRoomBtn);\n    elemDisplay(audioBtn, buttons.main.showAudioBtn);\n    elemDisplay(videoBtn, buttons.main.showVideoBtn);\n    //elemDisplay(screenShareBtn, buttons.main.showScreenBtn); // auto-detected\n    elemDisplay(recordStreamBtn, buttons.main.showRecordStreamBtn);\n    elemDisplay(chatRoomBtn, buttons.main.showChatRoomBtn);\n    //elemDisplay(captionBtn, buttons.main.showCaptionRoomBtn); // auto-detected\n    elemDisplay(myHandBtn, buttons.main.showMyHandBtn);\n    elemDisplay(whiteboardBtn, buttons.main.showWhiteboardBtn);\n    elemDisplay(fileShareBtn, buttons.main.showFileShareBtn);\n    elemDisplay(mySettingsBtn, buttons.main.showMySettingsBtn);\n    elemDisplay(aboutBtn, buttons.main.showAboutBtn);\n    // chat\n    elemDisplay(msgerSaveBtn, buttons.chat.showSaveMessageBtn);\n    elemDisplay(msgerMarkdownBtn, buttons.chat.showMarkDownBtn);\n    elemDisplay(msgerShareFileBtn, buttons.chat.showFileShareBtn);\n    elemDisplay(msgerVideoUrlBtn, buttons.chat.showShareVideoAudioBtn);\n    elemDisplay(msgerCPBtn, buttons.chat.showParticipantsBtn);\n    // Settings\n    elemDisplay(muteEveryoneBtn, buttons.settings.showMuteEveryoneBtn);\n    elemDisplay(hideEveryoneBtn, buttons.settings.showHideEveryoneBtn);\n    elemDisplay(ejectEveryoneBtn, buttons.settings.showEjectEveryoneBtn);\n    elemDisplay(lockRoomBtn, buttons.settings.showLockRoomBtn);\n    elemDisplay(unlockRoomBtn, buttons.settings.showUnlockRoomBtn);\n    elemDisplay(tabRoomParticipants, buttons.settings.showTabRoomParticipants);\n    elemDisplay(tabRoomSecurity, buttons.settings.showTabRoomSecurity);\n}\n\n/**\n * set your name for the conference\n */\nasync function whoAreYou() {\n    console.log('11. Who are you?');\n\n    getId('loadingDiv').style.display = 'none';\n    document.body.style.background = 'var(--body-bg)';\n\n    if (myPeerName) {\n        checkPeerAudioVideo();\n        whoAreYouJoin();\n        playSound('addPeer');\n        return;\n    }\n\n    playSound('newMessage');\n\n    await loadLocalStorage();\n\n    const initUser = getId('initUser');\n    initUser.classList.toggle('hidden');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: 'radial-gradient(#393939, #000000)', //swalBackground,\n        title: 'MiroTalk P2P',\n        position: 'center',\n        input: 'text',\n        inputPlaceholder: 'Enter your name',\n        inputValue: window.localStorage.peer_name ? window.localStorage.peer_name : '',\n        html: initUser, // inject html\n        confirmButtonText: `Join meeting`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n        inputValidator: (value) => {\n            if (!value) return 'Please enter your name';\n            myPeerName = value;\n            window.localStorage.peer_name = myPeerName;\n            whoAreYouJoin();\n        },\n    }).then(() => {\n        playSound('addPeer');\n    });\n\n    // select video - audio\n\n    initVideoSelect.onchange = () => {\n        videoSelect.selectedIndex = initVideoSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, videoSelect.selectedIndex, videoSelect.value);\n        myVideoChange = true;\n        refreshLocalMedia();\n        changeCamera(initVideoSelect.value);\n    };\n    initMicrophoneSelect.onchange = () => {\n        audioInputSelect.selectedIndex = initMicrophoneSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.audio, audioInputSelect.selectedIndex, audioInputSelect.value);\n        myVideoChange = false;\n        refreshLocalMedia();\n    };\n    initSpeakerSelect.onchange = () => {\n        audioOutputSelect.selectedIndex = initSpeakerSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.speaker, audioOutputSelect.selectedIndex, audioOutputSelect.value);\n        changeAudioDestination();\n    };\n\n    // init video -audio buttons\n\n    initAudioBtn = getId('initAudioBtn');\n    initVideoBtn = getId('initVideoBtn');\n\n    if (!useVideo) {\n        initVideoBtn.className = className.videoOff;\n        setMyVideoStatus(useVideo);\n    }\n    if (!useAudio) {\n        initAudioBtn.className = className.audioOff;\n        setMyAudioStatus(useAudio);\n    }\n\n    setTippy(initAudioBtn, 'Stop the audio', 'top');\n    setTippy(initVideoBtn, 'Stop the video', 'top');\n}\n\n/**\n * Load settings from Local Storage\n */\nasync function loadLocalStorage() {\n    const localStorageDevices = lS.getLocalStorageDevices();\n    console.log('12. Get Local Storage Devices before', localStorageDevices);\n    if (localStorageDevices) {\n        //\n        initMicrophoneSelect.selectedIndex = localStorageDevices.audio.index;\n        initSpeakerSelect.selectedIndex = localStorageDevices.speaker.index;\n        initVideoSelect.selectedIndex = localStorageDevices.video.index;\n        //\n        audioInputSelect.selectedIndex = initMicrophoneSelect.selectedIndex;\n        audioOutputSelect.selectedIndex = initSpeakerSelect.selectedIndex;\n        videoSelect.selectedIndex = initVideoSelect.selectedIndex;\n        //\n        if (lS.DEVICES_COUNT.audio != localStorageDevices.audio.count) {\n            console.log('12.1 Audio devices seems changed, use default index 0');\n            initMicrophoneSelect.selectedIndex = 0;\n            audioInputSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(\n                lS.MEDIA_TYPE.audio,\n                initMicrophoneSelect.selectedIndex,\n                initMicrophoneSelect.value,\n            );\n        }\n        if (lS.DEVICES_COUNT.speaker != localStorageDevices.speaker.count) {\n            console.log('12.2 Speaker devices seems changed, use default index 0');\n            initSpeakerSelect.selectedIndex = 0;\n            audioOutputSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(\n                lS.MEDIA_TYPE.speaker,\n                initSpeakerSelect.selectedIndexIndex,\n                initSpeakerSelect.value,\n            );\n        }\n        if (lS.DEVICES_COUNT.video != localStorageDevices.video.count) {\n            console.log('12.3 Video devices seems changed, use default index 0');\n            initVideoSelect.selectedIndex = 0;\n            videoSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, initVideoSelect.selectedIndex, initVideoSelect.value);\n        }\n        //\n        console.log('12.4 Get Local Storage Devices after', lS.getLocalStorageDevices());\n    }\n    // Start init cam\n    if (useVideo && initVideoSelect.value) {\n        myVideoChange = true;\n        refreshLocalMedia();\n        changeCamera(initVideoSelect.value);\n    }\n}\n\n/**\n * Change init camera by device id\n * @param {string} deviceId\n */\nfunction changeCamera(deviceId) {\n    if (initStream) {\n        stopTracks(initStream);\n        initVideo.style.display = 'block';\n    }\n    navigator.mediaDevices\n        .getUserMedia({ video: { deviceId: deviceId } })\n        .then((camStream) => {\n            initVideo.srcObject = camStream;\n            initStream = camStream;\n            console.log('Success attached init video stream');\n        })\n        .catch((err) => {\n            console.error('[Error] changeCamera', err);\n            userLog('error', 'Error while swapping camera' + err, 'top-end');\n        });\n}\n\n/**\n * Check peer audio and video &audio=1&video=1\n * 1/true = enabled / 0/false = disabled\n */\nfunction checkPeerAudioVideo() {\n    let qs = new URLSearchParams(window.location.search);\n    let audio = qs.get('audio');\n    let video = qs.get('video');\n    if (audio) {\n        audio = audio.toLowerCase();\n        let queryPeerAudio = audio === '1' || audio === 'true';\n        if (queryPeerAudio != null) handleAudio(audioBtn, false, queryPeerAudio);\n    }\n    if (video) {\n        video = video.toLowerCase();\n        let queryPeerVideo = video === '1' || video === 'true';\n        if (queryPeerVideo != null) handleVideo(videoBtn, false, queryPeerVideo);\n    }\n}\n\n/**\n * Room and Peer name are ok Join Channel\n */\nasync function whoAreYouJoin() {\n    if (isMobileDevice && myVideoStatus && myAudioStatus) refreshLocalMedia();\n    myVideoWrap.style.display = 'inline';\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n    setPeerAvatarImgName('myVideoAvatarImage', myPeerName, useAvatarApi);\n    setPeerChatAvatarImgName('right', myPeerName);\n    joinToChannel();\n    setTheme(mirotalkTheme);\n}\n\n/**\n * join to channel and send some peer info\n */\nasync function joinToChannel() {\n    console.log('12. join to channel', roomId);\n    sendToServer('join', {\n        channel: roomId,\n        userAgent: userAgent,\n        channel_password: thisRoomPassword,\n        peer_info: peerInfo,\n        peer_geo: peerGeo,\n        peer_name: myPeerName,\n        peer_video: useVideo,\n        peer_audio: useAudio,\n        peer_video_status: myVideoStatus,\n        peer_audio_status: myAudioStatus,\n        peer_screen_status: myScreenStatus,\n        peer_hand_status: myHandStatus,\n        peer_rec_status: isRecScreenStream,\n        peer_privacy_status: isVideoPrivacyActive,\n    });\n    handleBodyOnMouseMove(); // show/hide buttonsBar...\n}\n\n/**\n * When we join a group, our signaling server will send out 'addPeer' events to each pair of users in the group (creating a fully-connected graph of users,\n * ie if there are 6 people in the channel you will connect directly to the other 5, so there will be a total of 15 connections in the network).\n * @param {object} config data\n */\nasync function handleAddPeer(config) {\n    //console.log(\"addPeer\", JSON.stringify(config));\n\n    let peer_id = config.peer_id;\n    let peers = config.peers;\n    let peer_name = peers[peer_id]['peer_name'];\n    let peer_video = peers[peer_id]['peer_video'];\n    let should_create_offer = config.should_create_offer;\n    let iceServers = config.iceServers;\n\n    if (peer_id in peerConnections) {\n        // This could happen if the user joins multiple channels where the other peer is also in.\n        return console.log('Already connected to peer', peer_id);\n    }\n\n    if (!iceServers) iceServers = backupIceServers;\n    console.log('iceServers', iceServers[0]);\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    peerConnection = new RTCPeerConnection({ iceServers: iceServers });\n    peerConnections[peer_id] = peerConnection;\n\n    allPeers = peers;\n\n    console.log('[RTCPeerConnection] - PEER_ID', peer_id); // the connected peer_id\n    console.log('[RTCPeerConnection] - PEER-CONNECTIONS', peerConnections); // all peers connections in the room expect myself\n    console.log('[RTCPeerConnection] - PEERS', peers); // all peers in the room\n\n    // As P2P check who I am connected with\n    let connectedPeersName = [];\n    for (let peer_id in peerConnections) {\n        connectedPeersName.push({\n            peer_name: peers[peer_id]['peer_name'],\n        });\n    }\n    console.log('[RTCPeerConnection] - CONNECTED TO', JSON.stringify(connectedPeersName));\n    // userLog('info', 'Connected to: ' + JSON.stringify(connectedPeersName));\n\n    await handlePeersConnectionStatus(peer_id);\n    await msgerAddPeers(peers);\n    await handleOnIceCandidate(peer_id);\n    await handleRTCDataChannels(peer_id);\n    await handleOnTrack(peer_id, peers);\n    await handleAddTracks(peer_id);\n\n    if (useVideo && !peer_video && !needToCreateOffer) {\n        needToCreateOffer = true;\n    }\n    if (should_create_offer) {\n        await handleRtcOffer(peer_id);\n        console.log('[RTCPeerConnection] - SHOULD CREATE OFFER', {\n            peer_id: peer_id,\n            peer_name: peer_name,\n        });\n    }\n\n    await wbUpdate();\n    playSound('addPeer');\n}\n\n/**\n * Handle peers connection state\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState\n * @param {string} peer_id socket.id\n */\nasync function handlePeersConnectionStatus(peer_id) {\n    peerConnections[peer_id].onconnectionstatechange = function (event) {\n        const connectionStatus = event.currentTarget.connectionState;\n        const signalingState = event.currentTarget.signalingState;\n        const peerName = allPeers[peer_id]['peer_name'];\n        console.log('[RTCPeerConnection] - CONNECTION', {\n            peer_id: peer_id,\n            peer_name: peerName,\n            connectionStatus: connectionStatus,\n            signalingState: signalingState,\n        });\n    };\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate\n * @param {string} peer_id socket.id\n */\nasync function handleOnIceCandidate(peer_id) {\n    peerConnections[peer_id].onicecandidate = (event) => {\n        if (!event.candidate) return;\n        sendToServer('relayICE', {\n            peer_id: peer_id,\n            ice_candidate: {\n                sdpMLineIndex: event.candidate.sdpMLineIndex,\n                candidate: event.candidate.candidate,\n            },\n        });\n    };\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack\n * @param {string} peer_id socket.id\n * @param {object} peers all peers info connected to the same room\n */\nasync function handleOnTrack(peer_id, peers) {\n    console.log('[ON TRACK] - peer_id', { peer_id: peer_id });\n    peerConnections[peer_id].ontrack = (event) => {\n        let remoteVideoStream = getId(peer_id + '_video');\n        let peer_name = peers[peer_id]['peer_name'];\n        let kind = event.track.kind;\n        //userLog('info', '[ON TRACK] - peer_name: ' + peer_name + ' kind: ' + kind);\n        console.log('[ON TRACK] - info', { peer_id: peer_id, peer_name: peer_name, kind: kind, track: event.track });\n        if (event.streams && event.streams[0]) {\n            console.log('[ON TRACK] - peers', peers);\n            remoteVideoStream\n                ? attachMediaStream(remoteVideoStream, event.streams[0])\n                : loadRemoteMediaStream(event.streams[0], peers, peer_id);\n        } else {\n            console.log('[ON TRACK] - SCREEN SHARING', { peer_id: peer_id, peer_name: peer_name, kind: kind });\n            // attach newStream with screen share video and audio already existing\n            let inboundStream = new MediaStream([event.track, remoteVideoStream.srcObject.getAudioTracks()[0]]);\n            attachMediaStream(remoteVideoStream, inboundStream);\n        }\n    };\n}\n\n/**\n * Add my localMediaStream Tracks to connected peer\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack\n * @param {string} peer_id socket.id\n */\nasync function handleAddTracks(peer_id) {\n    let peer_name = allPeers[peer_id]['peer_name'];\n    await localMediaStream.getTracks().forEach((track) => {\n        console.log('[ADD TRACK] to Peer Name [' + peer_name + '] kind - ' + track.kind);\n        peerConnections[peer_id].addTrack(track, localMediaStream);\n    });\n}\n\n/**\n * Secure RTC Data Channel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage\n * @param {string} peer_id socket.id\n */\nasync function handleRTCDataChannels(peer_id) {\n    peerConnections[peer_id].ondatachannel = (event) => {\n        console.log('handleRTCDataChannels ' + peer_id, event);\n        event.channel.onmessage = (msg) => {\n            switch (event.channel.label) {\n                case 'mirotalk_chat_channel':\n                    try {\n                        let dataMessage = JSON.parse(msg.data);\n                        switch (dataMessage.type) {\n                            case 'chat':\n                                handleDataChannelChat(dataMessage);\n                                break;\n                            case 'speech':\n                                handleDataChannelSpeechTranscript(dataMessage);\n                                break;\n                            case 'micVolume':\n                                handlePeerVolume(dataMessage);\n                                break;\n                        }\n                    } catch (err) {\n                        console.error('mirotalk_chat_channel', err);\n                    }\n                    break;\n                case 'mirotalk_file_sharing_channel':\n                    try {\n                        let dataFile = msg.data;\n                        handleDataChannelFileSharing(dataFile);\n                    } catch (err) {\n                        console.error('mirotalk_file_sharing_channel', err);\n                    }\n                    break;\n            }\n        };\n    };\n    createChatDataChannel(peer_id);\n    createFileSharingDataChannel(peer_id);\n}\n\n/**\n * Only one side of the peer connection should create the offer, the signaling server picks one to be the offerer.\n * The other user will get a 'sessionDescription' event and will create an offer, then send back an answer 'sessionDescription' to us\n * @param {string} peer_id socket.id\n */\nasync function handleRtcOffer(peer_id) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded\n    peerConnections[peer_id].onnegotiationneeded = () => {\n        console.log('Creating RTC offer to ' + allPeers[peer_id]['peer_name']);\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n        peerConnections[peer_id]\n            .createOffer()\n            .then((local_description) => {\n                console.log('Local offer description is', local_description);\n                // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\n                peerConnections[peer_id]\n                    .setLocalDescription(local_description)\n                    .then(() => {\n                        sendToServer('relaySDP', {\n                            peer_id: peer_id,\n                            session_description: local_description,\n                        });\n                        console.log('Offer setLocalDescription done!');\n                    })\n                    .catch((err) => {\n                        console.error('[Error] offer setLocalDescription', err);\n                        userLog('error', 'Offer setLocalDescription failed ' + err);\n                    });\n            })\n            .catch((err) => {\n                console.error('[Error] sending offer', err);\n            });\n    };\n}\n\n/**\n * Peers exchange session descriptions which contains information about their audio / video settings and that sort of stuff. First\n * the 'offerer' sends a description to the 'answerer' (with type \"offer\"), then the answerer sends one back (with type \"answer\").\n * @param {object} config data\n */\nfunction handleSessionDescription(config) {\n    console.log('Remote Session Description', config);\n\n    let peer_id = config.peer_id;\n    let remote_description = config.session_description;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription\n    let description = new RTCSessionDescription(remote_description);\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\n    peerConnections[peer_id]\n        .setRemoteDescription(description)\n        .then(() => {\n            console.log('setRemoteDescription done!');\n            if (remote_description.type == 'offer') {\n                console.log('Creating answer');\n                // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n                peerConnections[peer_id]\n                    .createAnswer()\n                    .then((local_description) => {\n                        console.log('Answer description is: ', local_description);\n                        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\n                        peerConnections[peer_id]\n                            .setLocalDescription(local_description)\n                            .then(() => {\n                                sendToServer('relaySDP', {\n                                    peer_id: peer_id,\n                                    session_description: local_description,\n                                });\n                                console.log('Answer setLocalDescription done!');\n\n                                // https://github.com/miroslavpejic85/mirotalk/issues/110\n                                if (needToCreateOffer) {\n                                    needToCreateOffer = false;\n                                    handleRtcOffer(peer_id);\n                                    console.log('[RTCSessionDescription] - NEED TO CREATE OFFER', {\n                                        peer_id: peer_id,\n                                    });\n                                }\n                            })\n                            .catch((err) => {\n                                console.error('[Error] answer setLocalDescription', err);\n                                userLog('error', 'Answer setLocalDescription failed ' + err);\n                            });\n                    })\n                    .catch((err) => {\n                        console.error('[Error] creating answer', err);\n                    });\n            } // end [if type offer]\n        })\n        .catch((err) => {\n            console.error('[Error] setRemoteDescription', err);\n        });\n}\n\n/**\n * The offerer will send a number of ICE Candidate blobs to the answerer so they\n * can begin trying to find the best path to one another on the net.\n * @param {object} config data\n */\nfunction handleIceCandidate(config) {\n    let peer_id = config.peer_id;\n    let ice_candidate = config.ice_candidate;\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\n    peerConnections[peer_id].addIceCandidate(new RTCIceCandidate(ice_candidate)).catch((err) => {\n        console.error('[Error] addIceCandidate', err);\n    });\n}\n\n/**\n * Disconnected from Signaling Server.\n * Tear down all of our peer connections and remove all the media divs.\n * @param {object} reason of disconnection\n */\nfunction handleDisconnect(reason) {\n    console.log('Disconnected from signaling server', { reason: reason });\n    for (let peer_id in peerMediaElements) {\n        peerMediaElements[peer_id].parentNode.removeChild(peerMediaElements[peer_id]);\n        adaptAspectRatio();\n    }\n    for (let peer_id in peerConnections) {\n        peerConnections[peer_id].close();\n        msgerRemovePeer(peer_id);\n        removeVideoPinMediaContainer(peer_id);\n    }\n    chatDataChannels = {};\n    fileDataChannels = {};\n    peerConnections = {};\n    peerMediaElements = {};\n}\n\n/**\n * When a user leaves a channel (or is disconnected from the signaling server) everyone will recieve a 'removePeer' message\n * telling them to trash the media channels they have open for those that peer. If it was this client that left a channel,\n * they'll also receive the removePeers. If this client was disconnected, they wont receive removePeers, but rather the\n * signaling_socket.on('disconnect') code will kick in and tear down all the peer sessions.\n * @param {object} config data\n */\nfunction handleRemovePeer(config) {\n    console.log('Signaling server said to remove peer:', config);\n\n    let peer_id = config.peer_id;\n\n    if (peer_id in peerMediaElements) {\n        peerMediaElements[peer_id].parentNode.removeChild(peerMediaElements[peer_id]);\n        adaptAspectRatio();\n    }\n    if (peer_id in peerConnections) peerConnections[peer_id].close();\n\n    msgerRemovePeer(peer_id);\n    removeVideoPinMediaContainer(peer_id);\n\n    delete chatDataChannels[peer_id];\n    delete fileDataChannels[peer_id];\n    delete peerConnections[peer_id];\n    delete peerMediaElements[peer_id];\n    delete allPeers[peer_id];\n\n    isPresenter = !thereIsPeerConnections();\n    if (isRulesActive && isPresenter) {\n        console.log('I am alone in the room, got Presenter Rules');\n        handleRules(isPresenter);\n    }\n\n    playSound('removePeer');\n\n    console.log('ALL PEERS', allPeers);\n}\n\n/**\n * Set mirotalk theme | dark | grey | ...\n * @param {string} theme type\n */\nfunction setTheme(theme) {\n    if (!theme) return;\n\n    mirotalkTheme = theme;\n    switch (mirotalkTheme) {\n        case 'dark':\n            // dark theme\n            swalBackground = 'radial-gradient(#393939, #000000)';\n            document.documentElement.style.setProperty('--body-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--msger-private-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--wb-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--box-shadow', '0px 8px 16px 0px rgba(0, 0, 0, 0.2)');\n            document.documentElement.style.setProperty('--left-msg-bg', '#252d31');\n            document.documentElement.style.setProperty('--right-msg-bg', '#056162');\n            document.documentElement.style.setProperty('--private-msg-bg', '#6b1226');\n            document.body.style.background = 'radial-gradient(#393939, #000000)';\n            break;\n        case 'grey':\n            // grey theme\n            swalBackground = 'radial-gradient(#666, #333)';\n            document.documentElement.style.setProperty('--body-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--wb-bg', 'radial-gradient(#797979, #000)');\n            document.documentElement.style.setProperty('--box-shadow', '0px 8px 16px 0px rgba(0, 0, 0, 0.2)');\n            document.documentElement.style.setProperty('--msger-private-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--left-msg-bg', '#252d31');\n            document.documentElement.style.setProperty('--right-msg-bg', '#056162');\n            document.documentElement.style.setProperty('--private-msg-bg', '#6b1226');\n            document.body.style.background = 'radial-gradient(#666, #333)';\n            break;\n        // ...\n        default:\n            console.log('No theme found');\n    }\n\n    setButtonsBarPosition(mirotalkBtnsBar);\n}\n\n/**\n * Set buttons bar position\n * @param {string} position vertical / horizontal\n */\nfunction setButtonsBarPosition(position) {\n    if (!position || isMobileDevice) return;\n\n    mirotalkBtnsBar = position;\n    switch (mirotalkBtnsBar) {\n        case 'vertical':\n            document.documentElement.style.setProperty('--btns-top', '50%');\n            document.documentElement.style.setProperty('--btns-right', '0px');\n            document.documentElement.style.setProperty('--btns-left', '15px');\n            document.documentElement.style.setProperty('--btns-margin-left', '0px');\n            document.documentElement.style.setProperty('--btns-width', '40px');\n            document.documentElement.style.setProperty('--btns-flex-direction', 'column');\n            break;\n        case 'horizontal':\n            document.documentElement.style.setProperty('--btns-top', '95%');\n            document.documentElement.style.setProperty('--btns-right', '25%');\n            document.documentElement.style.setProperty('--btns-left', '50%');\n            document.documentElement.style.setProperty('--btns-margin-left', '-300px');\n            document.documentElement.style.setProperty('--btns-width', '600px');\n            document.documentElement.style.setProperty('--btns-flex-direction', 'row');\n            break;\n        default:\n            console.log('No position found');\n    }\n}\n\n/**\n * Init to enumerate the devices\n */\nasync function initEnumerateDevices() {\n    console.log('05. init Enumerate Devices');\n    await initEnumerateVideoDevices();\n    await initEnumerateAudioDevices();\n    if (!useAudio && !useVideo) {\n        initEnumerateDevicesFailed = true;\n        playSound('alert');\n        await Swal.fire({\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            background: '#000000',\n            position: 'center',\n            imageUrl: camMicOff,\n            title: 'Camera and microphone not allowed',\n            text: \"Meet needs access to the camera and microphone. Click the locked camera and microphone icon in your browser's address bar, before to join room.\",\n            showDenyButton: false,\n            confirmButtonText: `OK`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) {\n                openURL('/'); // back to homepage\n            }\n        });\n    }\n}\n\n/**\n * Init to enumerate the audio devices\n * @returns boolean true/false\n */\nasync function initEnumerateAudioDevices() {\n    if (isEnumerateAudioDevices) return;\n    // allow the audio\n    await navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then((stream) => {\n            enumerateAudioDevices(stream);\n            useAudio = true;\n        })\n        .catch(() => {\n            useAudio = false;\n        });\n}\n\n/**\n * Init to enumerate the vide devices\n * @returns boolean true/false\n */\nasync function initEnumerateVideoDevices() {\n    if (isEnumerateVideoDevices) return;\n    // allow the video\n    await navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then((stream) => {\n            enumerateVideoDevices(stream);\n            useVideo = true;\n        })\n        .catch(() => {\n            useVideo = false;\n        });\n}\n\n/**\n * Enumerate Audio\n * @param {object} stream\n */\nfunction enumerateAudioDevices(stream) {\n    console.log('06. Get Audio Devices');\n    navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) =>\n            devices.forEach((device) => {\n                let el,\n                    eli = null;\n                if ('audioinput' === device.kind) {\n                    el = getId('audioSource');\n                    eli = getId('initMicrophoneSelect');\n                } else if ('audiooutput' === device.kind) {\n                    el = getId('audioOutput');\n                    eli = getId('initSpeakerSelect');\n                }\n                if (!el) return;\n                addChild(device, [el, eli]);\n            }),\n        )\n        .then(() => {\n            stopTracks(stream);\n            isEnumerateAudioDevices = true;\n            const sinkId = 'sinkId' in HTMLMediaElement.prototype;\n            getId('audioOutput').disabled = !sinkId;\n            if (!sinkId) getId('initSpeakerSelect').display = 'none';\n        });\n}\n\n/**\n * Enumerate Video\n * @param {object} stream\n */\nfunction enumerateVideoDevices(stream) {\n    console.log('07. Get Video Devices');\n    navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) =>\n            devices.forEach((device) => {\n                let el,\n                    eli = null;\n                if ('videoinput' === device.kind) {\n                    el = getId('videoSource');\n                    eli = getId('initVideoSelect');\n                }\n                if (!el) return;\n                addChild(device, [el, eli]);\n            }),\n        )\n        .then(() => {\n            stopTracks(stream);\n            isEnumerateVideoDevices = true;\n        });\n}\n\n/**\n * Stop tracks from stream\n * @param {object} stream\n */\nfunction stopTracks(stream) {\n    stream.getTracks().forEach((track) => {\n        track.stop();\n    });\n}\n\n/**\n * Add child to element\n * @param {object} device\n * @param {object} els\n */\nfunction addChild(device, els) {\n    let kind = device.kind;\n    els.forEach((el) => {\n        let option = document.createElement('option');\n        option.value = device.deviceId;\n        switch (kind) {\n            case 'videoinput':\n                option.innerHTML = `\ud83d\udcf9 ` + device.label || `\ud83d\udcf9 camera ${el.length + 1}`;\n                break;\n            case 'audioinput':\n                option.innerHTML = `\ud83c\udfa4 ` + device.label || `\ud83c\udfa4 microphone ${el.length + 1}`;\n                break;\n            case 'audiooutput':\n                option.innerHTML = `\ud83d\udd08 ` + device.label || `\ud83d\udd08 speaker ${el.length + 1}`;\n                break;\n            default:\n                break;\n        }\n        el.appendChild(option);\n    });\n    selectors = [getId('audioSource'), getId('audioOutput'), getId('videoSource')];\n}\n\n/**\n * Setup local media stuff. Ask user for permission to use the computers microphone and/or camera,\n * attach it to an <audio> or <video> tag if they give us access.\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n */\nasync function setupLocalMedia() {\n    // if we've already been initialized do nothing or there is error on initEnumerateDevicesFailed\n    if (localMediaStream != null || initEnumerateDevicesFailed) {\n        return;\n    }\n\n    await getPeerGeoLocation();\n\n    console.log('08. Requesting access to local audio - video inputs');\n    console.log('09. Supported constraints', navigator.mediaDevices.getSupportedConstraints());\n\n    // default | qvgaVideo | vgaVideo | hdVideo | fhdVideo | 2kVideo | 4kVideo |\n    let videoConstraints = useVideo ? getVideoConstraints('default') : false;\n    let audioConstraints = useAudio;\n    if (useAudio) {\n        audioConstraints = {\n            echoCancellation: true,\n            noiseSuppression: true,\n            sampleRate: 44100,\n        };\n    }\n\n    const constraints = {\n        audio: audioConstraints,\n        video: videoConstraints,\n    };\n\n    let stream = null;\n\n    try {\n        stream = await navigator.mediaDevices.getUserMedia(constraints);\n        if (stream) {\n            await loadLocalMedia(stream);\n            await startPitchDetection(stream);\n            await whoAreYou();\n        }\n    } catch (err) {\n        console.error('[Error] - Access denied for audio - video device', err);\n        playSound('alert');\n        openURL(\n            `/permission?roomId=${roomId}&getUserMediaError=${err.toString()} <br/> Check the common getusermedia errors <a href=\"https://blog.addpipe.com/common-getusermedia-errors\" target=\"_blank\">here<a/>`,\n        );\n    }\n} // end [setup_local_stream]\n\n/**\n * Load Local Media Stream obj\n * @param {object} stream media stream audio - video\n */\nasync function loadLocalMedia(stream) {\n    console.log('10. Access granted to audio - video device');\n\n    localMediaStream = stream;\n\n    console.log('LOAD LOCAL MEDIA STREAM TRACKS', localMediaStream.getTracks());\n\n    // local video elemets\n    const myVideoWrap = document.createElement('div');\n    const myLocalMedia = document.createElement('video');\n\n    // html elements\n    const myVideoNavBar = document.createElement('div');\n    const myCountTime = document.createElement('button');\n    const myPeerName = document.createElement('p');\n    const myHandStatusIcon = document.createElement('button');\n    const myVideoToImgBtn = document.createElement('button');\n    const myPrivacyBtn = document.createElement('button');\n    const myVideoStatusIcon = document.createElement('button');\n    const myAudioStatusIcon = document.createElement('button');\n    const myVideoFullScreenBtn = document.createElement('button');\n    const myVideoPinBtn = document.createElement('button');\n    const myVideoAvatarImage = document.createElement('img');\n    const myPitchMeter = document.createElement('div');\n    const myPitchBar = document.createElement('div');\n\n    // session time\n    myCountTime.setAttribute('id', 'countTime');\n\n    // my peer name\n    myPeerName.setAttribute('id', 'myVideoParagraph');\n    myPeerName.className = 'videoPeerName';\n\n    // my hand status element\n    myHandStatusIcon.setAttribute('id', 'myHandStatusIcon');\n    myHandStatusIcon.className = className.handPulsate;\n    myHandStatusIcon.style.setProperty('color', 'rgb(0, 255, 0)');\n\n    // my privacy button\n    myPrivacyBtn.setAttribute('id', 'myPrivacyBtn');\n    myPrivacyBtn.className = className.privacy;\n\n    // my video status element\n    myVideoStatusIcon.setAttribute('id', 'myVideoStatusIcon');\n    myVideoStatusIcon.className = className.videoOn;\n\n    // my audio status element\n    myAudioStatusIcon.setAttribute('id', 'myAudioStatusIcon');\n    myAudioStatusIcon.className = className.audioOn;\n\n    // my video to image\n    myVideoToImgBtn.setAttribute('id', 'myVideoToImgBtn');\n    myVideoToImgBtn.className = className.snapShot;\n\n    // my video full screen mode\n    myVideoFullScreenBtn.setAttribute('id', 'myVideoFullScreenBtn');\n    myVideoFullScreenBtn.className = className.fullScreen;\n\n    // my video pin/unpin button\n    myVideoPinBtn.setAttribute('id', 'myVideoPinBtn');\n    myVideoPinBtn.className = className.pinUnpin;\n\n    // no mobile devices\n    setTippy(myCountTime, 'Session Time', 'bottom');\n    setTippy(myPeerName, 'My name', 'bottom');\n    setTippy(myHandStatusIcon, 'My hand is raised', 'bottom');\n    setTippy(myPrivacyBtn, 'Toggle video privacy', 'bottom');\n    setTippy(myVideoStatusIcon, 'My video is on', 'bottom');\n    setTippy(myAudioStatusIcon, 'My audio is on', 'bottom');\n    setTippy(myVideoToImgBtn, 'Take a snapshot', 'bottom');\n    setTippy(myVideoFullScreenBtn, 'Full screen mode', 'bottom');\n    setTippy(myVideoPinBtn, 'Toggle Pin video', 'bottom');\n\n    // my video avatar image\n    myVideoAvatarImage.setAttribute('id', 'myVideoAvatarImage');\n    myVideoAvatarImage.className = 'videoAvatarImage pulsate';\n\n    // my pitch meter\n    myPitchMeter.setAttribute('id', 'myPitch');\n    myPitchBar.setAttribute('id', 'myPitchBar');\n    myPitchMeter.className = 'speechbar';\n    myPitchBar.className = 'bar';\n    myPitchBar.style.height = '1%';\n\n    // my video nav bar\n    myVideoNavBar.className = 'navbar fadein';\n\n    // attach to video nav bar\n    myVideoNavBar.appendChild(myCountTime);\n\n    if (!isMobileDevice) {\n        myVideoNavBar.appendChild(myVideoPinBtn);\n    }\n    if (isVideoFullScreenSupported) {\n        myVideoNavBar.appendChild(myVideoFullScreenBtn);\n    }\n    if (buttons.local.showSnapShotBtn) {\n        myVideoNavBar.appendChild(myVideoToImgBtn);\n    }\n    if (buttons.local.showVideoCircleBtn) {\n        myVideoNavBar.appendChild(myPrivacyBtn);\n    }\n\n    myVideoNavBar.appendChild(myVideoStatusIcon);\n    myVideoNavBar.appendChild(myAudioStatusIcon);\n    myVideoNavBar.appendChild(myHandStatusIcon);\n\n    // add my pitchBar\n    myPitchMeter.appendChild(myPitchBar);\n\n    // hand display none on default menad is raised == false\n    myHandStatusIcon.style.display = 'none';\n\n    myLocalMedia.setAttribute('id', 'myVideo');\n    myLocalMedia.setAttribute('playsinline', true);\n    myLocalMedia.className = 'mirror';\n    myLocalMedia.autoplay = true;\n    myLocalMedia.muted = true;\n    myLocalMedia.volume = 0;\n    myLocalMedia.controls = false;\n\n    myVideoWrap.className = 'Camera';\n    myVideoWrap.setAttribute('id', 'myVideoWrap');\n\n    // add elements to video wrap div\n    myVideoWrap.appendChild(myVideoNavBar);\n    myVideoWrap.appendChild(myVideoAvatarImage);\n    myVideoWrap.appendChild(myLocalMedia);\n    myVideoWrap.appendChild(myPitchMeter);\n    myVideoWrap.appendChild(myPeerName);\n\n    getId('videoMediaContainer').appendChild(myVideoWrap);\n    myVideoWrap.style.display = 'none';\n\n    logStreamSettingsInfo('localMediaStream', localMediaStream);\n    attachMediaStream(myLocalMedia, localMediaStream);\n    adaptAspectRatio();\n\n    getHtmlElementsById();\n    setButtonsToolTip();\n    manageLeftButtons();\n    handleButtonsRule();\n    setupMySettings();\n    setupVideoUrlPlayer();\n    startCountTime();\n\n    if (isVideoFullScreenSupported) {\n        handleVideoPlayerFs(myLocalMedia.id, myVideoFullScreenBtn.id);\n    }\n\n    handleFileDragAndDrop(myLocalMedia.id, myPeerId, true);\n\n    if (buttons.local.showSnapShotBtn) {\n        handleVideoToImg(myLocalMedia.id, myVideoToImgBtn.id);\n    }\n    if (buttons.local.showVideoCircleBtn) {\n        handleVideoPrivacyBtn(myLocalMedia.id, myPrivacyBtn.id);\n    }\n\n    handleVideoPinUnpin(myLocalMedia.id, myVideoPinBtn.id, myVideoWrap.id, myLocalMedia.id);\n\n    refreshMyVideoAudioStatus(localMediaStream);\n\n    if (!useVideo) {\n        myVideoAvatarImage.style.display = 'block';\n        myVideoStatusIcon.className = className.videoOff;\n        videoBtn.className = className.videoOff;\n    }\n}\n\n/**\n * Check if screen is shared on join room\n */\nfunction checkShareScreen() {\n    if (!isMobileDevice && isScreenEnabled && isScreenSharingSupported) {\n        playSound('newMessage');\n        // screenShareBtn.click(); // Chrome - Opera - Edge - Brave\n        // handle error: getDisplayMedia requires transient activation from a user gesture on Safari - FireFox\n        Swal.fire({\n            background: swalBackground,\n            position: 'center',\n            icon: 'question',\n            text: 'Do you want to share your screen?',\n            showDenyButton: true,\n            confirmButtonText: `Yes`,\n            denyButtonText: `No`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) {\n                screenShareBtn.click();\n            }\n        });\n    }\n}\n\n/**\n * Load Remote Media Stream obj\n * @param {object} stream media stream audio - video\n * @param {object} peers all peers info connected to the same room\n * @param {string} peer_id socket.id\n */\nasync function loadRemoteMediaStream(stream, peers, peer_id) {\n    // get data from peers obj\n    let peer_name = peers[peer_id]['peer_name'];\n    let peer_video = peers[peer_id]['peer_video'];\n    let peer_video_status = peers[peer_id]['peer_video_status'];\n    let peer_audio_status = peers[peer_id]['peer_audio_status'];\n    let peer_screen_status = peers[peer_id]['peer_screen_status'];\n    let peer_hand_status = peers[peer_id]['peer_hand_status'];\n    let peer_rec_status = peers[peer_id]['peer_rec_status'];\n    let peer_privacy_status = peers[peer_id]['peer_privacy_status'];\n\n    remoteMediaStream = stream;\n\n    console.log('LOAD REMOTE MEDIA STREAM TRACKS - PeerName:[' + peer_name + ']', remoteMediaStream.getTracks());\n\n    // remote video elements\n    const remoteVideoWrap = document.createElement('div');\n    const remoteMedia = document.createElement('video');\n\n    // html elements\n    const remoteVideoNavBar = document.createElement('div');\n    const remotePeerName = document.createElement('p');\n    const remoteHandStatusIcon = document.createElement('button');\n    const remoteVideoStatusIcon = document.createElement('button');\n    const remoteAudioStatusIcon = document.createElement('button');\n    const remoteVideoAudioUrlBtn = document.createElement('button');\n    const remoteFileShareBtn = document.createElement('button');\n    const remotePrivateMsgBtn = document.createElement('button');\n    const remotePeerKickOut = document.createElement('button');\n    const remoteVideoToImgBtn = document.createElement('button');\n    const remoteVideoFullScreenBtn = document.createElement('button');\n    const remoteVideoPinBtn = document.createElement('button');\n    const remoteVideoAvatarImage = document.createElement('img');\n    const remotePitchMeter = document.createElement('div');\n    const remotePitchBar = document.createElement('div');\n    const remoteAudioVolume = document.createElement('input');\n\n    // remote peer name element\n    remotePeerName.setAttribute('id', peer_id + '_name');\n    remotePeerName.className = 'videoPeerName';\n\n    const peerVideoText = document.createTextNode(peer_name);\n    remotePeerName.appendChild(peerVideoText);\n\n    // remote hand status element\n    remoteHandStatusIcon.setAttribute('id', peer_id + '_handStatus');\n    remoteHandStatusIcon.style.setProperty('color', 'rgb(0, 255, 0)');\n    remoteHandStatusIcon.className = className.handPulsate;\n\n    // remote video status element\n    remoteVideoStatusIcon.setAttribute('id', peer_id + '_videoStatus');\n    remoteVideoStatusIcon.className = className.videoOn;\n\n    // remote audio status element\n    remoteAudioStatusIcon.setAttribute('id', peer_id + '_audioStatus');\n    remoteAudioStatusIcon.className = className.audioOn;\n\n    // remote audio volume element\n    remoteAudioVolume.setAttribute('id', peer_id + '_audioVolume');\n    remoteAudioVolume.type = 'range';\n    remoteAudioVolume.min = 0;\n    remoteAudioVolume.max = 100;\n    remoteAudioVolume.value = 100;\n\n    // remote private message\n    remotePrivateMsgBtn.setAttribute('id', peer_id + '_privateMsg');\n    remotePrivateMsgBtn.className = className.msgPrivate;\n\n    // remote share file\n    remoteFileShareBtn.setAttribute('id', peer_id + '_shareFile');\n    remoteFileShareBtn.className = className.shareFile;\n\n    // remote peer YouTube video\n    remoteVideoAudioUrlBtn.setAttribute('id', peer_id + '_videoAudioUrl');\n    remoteVideoAudioUrlBtn.className = className.shareVideoAudio;\n\n    // my video to image\n    remoteVideoToImgBtn.setAttribute('id', peer_id + '_snapshot');\n    remoteVideoToImgBtn.className = className.snapShot;\n\n    // remote peer kick out\n    remotePeerKickOut.setAttribute('id', peer_id + '_kickOut');\n    remotePeerKickOut.className = className.kickOut;\n\n    // remote video full screen mode\n    remoteVideoFullScreenBtn.setAttribute('id', peer_id + '_fullScreen');\n    remoteVideoFullScreenBtn.className = className.fullScreen;\n\n    // remote video pin/unpin button\n    remoteVideoPinBtn.setAttribute('id', peer_id + '_pinUnpin');\n    remoteVideoPinBtn.className = className.pinUnpin;\n\n    // no mobile devices\n    setTippy(remotePeerName, 'Participant name', 'bottom');\n    setTippy(remoteHandStatusIcon, 'Participant hand is raised', 'bottom');\n    setTippy(remoteVideoStatusIcon, 'Participant video is on', 'bottom');\n    setTippy(remoteAudioStatusIcon, 'Participant audio is on', 'bottom');\n    setTippy(remoteAudioVolume, '\ud83d\udd0a Volume', 'top-end');\n    setTippy(remoteVideoAudioUrlBtn, 'Send Video or Audio', 'bottom');\n    setTippy(remotePrivateMsgBtn, 'Send private message', 'bottom');\n    setTippy(remoteFileShareBtn, 'Send file', 'bottom');\n    setTippy(remoteVideoToImgBtn, 'Take a snapshot', 'bottom');\n    setTippy(remotePeerKickOut, 'Kick out', 'bottom');\n    setTippy(remoteVideoFullScreenBtn, 'Full screen mode', 'bottom');\n    setTippy(remoteVideoPinBtn, 'Toggle Pin video', 'bottom');\n\n    // my video avatar image\n    remoteVideoAvatarImage.setAttribute('id', peer_id + '_avatar');\n    remoteVideoAvatarImage.className = 'videoAvatarImage pulsate';\n\n    // remote pitch meter\n    remotePitchMeter.setAttribute('id', peer_id + '_pitch');\n    remotePitchBar.setAttribute('id', peer_id + '_pitch_bar');\n    remotePitchMeter.className = 'speechbar';\n    remotePitchBar.className = 'bar';\n    remotePitchBar.style.height = '1%';\n\n    remotePitchMeter.appendChild(remotePitchBar);\n\n    // remote video nav bar\n    remoteVideoNavBar.className = 'navbar fadein';\n\n    // attach to remote video nav bar\n    if (!isMobileDevice) {\n        remoteVideoNavBar.appendChild(remoteVideoPinBtn);\n    }\n    if (isVideoFullScreenSupported) {\n        remoteVideoNavBar.appendChild(remoteVideoFullScreenBtn);\n    }\n    if (buttons.remote.showSnapShotBtn) {\n        remoteVideoNavBar.appendChild(remoteVideoToImgBtn);\n    }\n\n    remoteVideoNavBar.appendChild(remoteVideoStatusIcon);\n    remoteVideoNavBar.appendChild(remoteAudioStatusIcon);\n\n    if (buttons.remote.showAudioVolume) {\n        remoteVideoNavBar.appendChild(remoteAudioVolume);\n    }\n    remoteVideoNavBar.appendChild(remoteHandStatusIcon);\n\n    if (buttons.remote.showPrivateMessageBtn) {\n        remoteVideoNavBar.appendChild(remotePrivateMsgBtn);\n    }\n    if (buttons.remote.showFileShareBtn) {\n        remoteVideoNavBar.appendChild(remoteFileShareBtn);\n    }\n    if (buttons.remote.showShareVideoAudioBtn) {\n        remoteVideoNavBar.appendChild(remoteVideoAudioUrlBtn);\n    }\n    if (buttons.remote.showKickOutBtn) {\n        remoteVideoNavBar.appendChild(remotePeerKickOut);\n    }\n\n    remoteMedia.setAttribute('id', peer_id + '_video');\n    remoteMedia.setAttribute('playsinline', true);\n    remoteMedia.autoplay = true;\n    isMobileDevice ? (remoteMediaControls = false) : (remoteMediaControls = remoteMediaControls);\n    remoteMedia.style.objectFit = peer_screen_status ? 'contain' : 'var(--video-object-fit)';\n    remoteMedia.style.name = peer_id + (peer_screen_status ? '_typeScreen' : '_typeCam');\n    remoteMedia.controls = remoteMediaControls;\n\n    remoteVideoWrap.className = 'Camera';\n    remoteVideoWrap.setAttribute('id', peer_id + '_videoWrap');\n\n    // add elements to videoWrap div\n    remoteVideoWrap.appendChild(remoteVideoNavBar);\n    remoteVideoWrap.appendChild(remoteVideoAvatarImage);\n    remoteVideoWrap.appendChild(remotePitchMeter);\n    remoteVideoWrap.appendChild(remoteMedia);\n    remoteVideoWrap.appendChild(remotePeerName);\n\n    // need later on disconnect or remove peers\n    peerMediaElements[peer_id] = remoteVideoWrap;\n\n    // append all elements to videoMediaContainer\n    getId('videoMediaContainer').appendChild(remoteVideoWrap);\n    // attachMediaStream is a part of the adapter.js library\n    attachMediaStream(remoteMedia, remoteMediaStream);\n    // resize video elements\n    adaptAspectRatio();\n\n    if (buttons.remote.showSnapShotBtn) {\n        // handle video to image\n        handleVideoToImg(remoteMedia.id, remoteVideoToImgBtn.id, peer_id);\n    }\n\n    // handle video pin/unpin\n    handleVideoPinUnpin(remoteMedia.id, remoteVideoPinBtn.id, remoteVideoWrap.id, peer_id, peer_screen_status);\n\n    // pin video on screen share detected\n    if (peer_video_status && peer_screen_status) {\n        getId(remoteVideoPinBtn.id).click();\n    }\n\n    if (isVideoFullScreenSupported) {\n        // handle video full screen mode\n        handleVideoPlayerFs(remoteMedia.id, remoteVideoFullScreenBtn.id, peer_id);\n    }\n\n    // handle file share drag and drop\n    handleFileDragAndDrop(remoteMedia.id, peer_id);\n\n    if (buttons.remote.showKickOutBtn) {\n        // handle kick out button event\n        handlePeerKickOutBtn(peer_id);\n    }\n\n    if (peer_privacy_status) {\n        // set video privacy true\n        setVideoPrivacyStatus(remoteMedia.id, peer_privacy_status);\n    }\n\n    // refresh remote peers avatar name\n    setPeerAvatarImgName(remoteVideoAvatarImage.id, peer_name, useAvatarApi);\n    // refresh remote peers hand icon status and title\n    setPeerHandStatus(peer_id, peer_name, peer_hand_status);\n    // refresh remote peers video icon status and title\n    setPeerVideoStatus(peer_id, peer_video_status);\n    // refresh remote peers audio icon status and title\n    setPeerAudioStatus(peer_id, peer_audio_status);\n    // handle remote peers audio volume\n    handleAudioVolume(remoteAudioVolume.id, remoteMedia.id);\n    // handle remote peers audio on-off\n    handlePeerAudioBtn(peer_id);\n    // handle remote peers video on-off\n    handlePeerVideoBtn(peer_id);\n\n    if (buttons.remote.showPrivateMessageBtn) {\n        // handle remote private messages\n        handlePeerPrivateMsg(peer_id, peer_name);\n    }\n    if (buttons.remote.showFileShareBtn) {\n        // handle remote send file\n        handlePeerSendFile(peer_id);\n    }\n    if (buttons.remote.showShareVideoAudioBtn) {\n        // handle remote video - audio URL\n        handlePeerVideoAudioUrl(peer_id);\n    }\n\n    // show status menu\n    toggleClassElements('statusMenu', 'inline');\n    // notify if peer started to recording own screen + audio\n    if (peer_rec_status) notifyRecording(peer_name, 'Started');\n\n    // peer not has video at all\n    if (!peer_video) {\n        remoteVideoAvatarImage.style.display = 'block';\n        remoteVideoStatusIcon.className = className.videoOff;\n    }\n}\n\n/**\n * Log stream settings info\n * @param {string} name function name called from\n * @param {object} stream media stream audio - video\n */\nfunction logStreamSettingsInfo(name, stream) {\n    if (useVideo || isScreenStreaming) {\n        console.log(name, {\n            video: {\n                label: stream.getVideoTracks()[0].label,\n                settings: stream.getVideoTracks()[0].getSettings(),\n            },\n        });\n    }\n    if (useAudio) {\n        console.log(name, {\n            audio: {\n                label: stream.getAudioTracks()[0].label,\n                settings: stream.getAudioTracks()[0].getSettings(),\n            },\n        });\n    }\n}\n\n/**\n * Handle aspect ratio\n * ['0:0', '4:3', '16:9', '1:1', '1:2'];\n *    0      1       2      3      4\n */\nfunction adaptAspectRatio() {\n    let participantsCount = getId('videoMediaContainer').childElementCount;\n    let desktop,\n        mobile = 1;\n    // desktop aspect ratio\n    switch (participantsCount) {\n        // case 1:\n        //     desktop = 0; // (0:0)\n        //     break;\n        case 1:\n        case 3:\n        case 4:\n        case 7:\n        case 9:\n            desktop = 2; // (16:9)\n            break;\n        case 5:\n        case 6:\n        case 10:\n        case 11:\n            desktop = 1; // (4:3)\n            break;\n        case 2:\n        case 8:\n            desktop = 3; // (1:1)\n            break;\n        default:\n            desktop = 0; // (0:0)\n    }\n    // mobile aspect ratio\n    switch (participantsCount) {\n        case 3:\n        case 9:\n        case 10:\n            mobile = 2; // (16:9)\n            break;\n        case 2:\n        case 7:\n        case 8:\n        case 11:\n            mobile = 1; // (4:3)\n            break;\n        case 1:\n        case 4:\n        case 5:\n        case 6:\n            mobile = 3; // (1:1)\n            break;\n        default:\n            mobile = 3; // (1:1)\n    }\n    if (participantsCount > 11) {\n        desktop = 1; // (4:3)\n        mobile = 3; // (1:1)\n    }\n    setAspectRatio(isMobileDevice ? mobile : desktop);\n}\n\n/**\n * Refresh video - chat image avatar on name changes: https://eu.ui-avatars.com/\n * @param {string} videoAvatarImageId element id\n * @param {string} peerName\n * @param {boolean} useAvatar use avatar api for image\n */\nfunction setPeerAvatarImgName(videoAvatarImageId, peerName, useAvatar) {\n    let videoAvatarImageElement = getId(videoAvatarImageId);\n    if (useAvatar) {\n        // default img size 64 max 512\n        let avatarImgSize = isMobileDevice ? 128 : 256;\n        videoAvatarImageElement.setAttribute(\n            'src',\n            avatarApiUrl + '?name=' + peerName + '&size=' + avatarImgSize + '&background=random&rounded=true',\n        );\n    } else {\n        videoAvatarImageElement.setAttribute('src', avatarImg);\n    }\n}\n\n/**\n * Set Chat avatar image by peer name\n * @param {string} avatar position left/right\n * @param {string} peerName me or peer name\n */\nfunction setPeerChatAvatarImgName(avatar, peerName) {\n    let avatarImg = avatarApiUrl + '?name=' + peerName + '&size=32' + '&background=random&rounded=true';\n\n    switch (avatar) {\n        case 'left':\n            // console.log(\"Set Friend chat avatar image\");\n            leftChatAvatar = avatarImg;\n            break;\n        case 'right':\n            // console.log(\"Set My chat avatar image\");\n            rightChatAvatar = avatarImg;\n            break;\n    }\n}\n\n/**\n * On video player click, go on full screen mode ||\n * On button click, go on full screen mode.\n * Press Esc to exit from full screen mode, or click again.\n * @param {string} videoId uuid video element\n * @param {string} videoFullScreenBtnId uuid full screen btn\n * @param {string} peer_id socket.id\n */\nfunction handleVideoPlayerFs(videoId, videoFullScreenBtnId, peer_id = null) {\n    let videoPlayer = getId(videoId);\n    let videoFullScreenBtn = getId(videoFullScreenBtnId);\n\n    // handle Chrome Firefox Opera Microsoft Edge videoPlayer ESC\n    videoPlayer.addEventListener('fullscreenchange', (e) => {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n        let fullscreenElement = document.fullscreenElement;\n        if (!fullscreenElement) {\n            videoPlayer.style.pointerEvents = 'auto';\n            isVideoOnFullScreen = false;\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    });\n\n    // handle Safari videoPlayer ESC\n    videoPlayer.addEventListener('webkitfullscreenchange', (e) => {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n        let webkitIsFullScreen = document.webkitIsFullScreen;\n        if (!webkitIsFullScreen) {\n            videoPlayer.style.pointerEvents = 'auto';\n            isVideoOnFullScreen = false;\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    });\n\n    // on button click go on FS mobile/desktop\n    videoFullScreenBtn.addEventListener('click', (e) => {\n        if (videoPlayer.classList.contains('videoCircle')) {\n            return userLog('toast', 'Full Screen not allowed if video on privacy mode');\n        }\n        gotoFS();\n    });\n\n    // on video click go on FS\n    videoPlayer.addEventListener('click', (e) => {\n        if (videoPlayer.classList.contains('videoCircle')) {\n            return userLog('toast', 'Full Screen not allowed if video on privacy mode');\n        }\n        // not mobile on click go on FS or exit from FS\n        if (!isMobileDevice) {\n            gotoFS();\n        } else {\n            // mobile on click exit from FS, for enter use videoFullScreenBtn\n            if (isVideoOnFullScreen) handleFSVideo();\n        }\n    });\n\n    function gotoFS() {\n        // handle remote peer video fs\n        if (peer_id !== null) {\n            let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n            if (remoteVideoStatusBtn.className === className.videoOn) {\n                handleFSVideo();\n            } else {\n                showMsg();\n            }\n        } else {\n            // handle local video fs\n            if (myVideoStatusIcon.className === className.videoOn || isScreenStreaming) {\n                handleFSVideo();\n            } else {\n                showMsg();\n            }\n        }\n    }\n\n    function showMsg() {\n        userLog('toast', 'Full screen mode work when video is on');\n    }\n\n    function handleFSVideo() {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n\n        if (!isVideoOnFullScreen) {\n            if (videoPlayer.requestFullscreen) {\n                // Chrome Firefox Opera Microsoft Edge\n                videoPlayer.requestFullscreen();\n            } else if (videoPlayer.webkitRequestFullscreen) {\n                // Safari request full screen mode\n                videoPlayer.webkitRequestFullscreen();\n            } else if (videoPlayer.msRequestFullscreen) {\n                // IE11 request full screen mode\n                videoPlayer.msRequestFullscreen();\n            }\n            isVideoOnFullScreen = true;\n            videoPlayer.style.pointerEvents = 'none';\n            // console.log(\"Go on FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        } else {\n            if (document.exitFullscreen) {\n                // Chrome Firefox Opera Microsoft Edge\n                document.exitFullscreen();\n            } else if (document.webkitCancelFullScreen) {\n                // Safari exit full screen mode ( Not work... )\n                document.webkitCancelFullScreen();\n            } else if (document.msExitFullscreen) {\n                // IE11 exit full screen mode\n                document.msExitFullscreen();\n            }\n            isVideoOnFullScreen = false;\n            videoPlayer.style.pointerEvents = 'auto';\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    }\n}\n\n/**\n * Handle file drag and drop on video element\n * @param {string} elemId element id\n * @param {string} peer_id peer id\n * @param {boolean} itsMe true/false\n */\nfunction handleFileDragAndDrop(elemId, peer_id, itsMe = false) {\n    let videoPeer = getId(elemId);\n\n    videoPeer.addEventListener('dragover', function (e) {\n        e.preventDefault();\n    });\n\n    videoPeer.addEventListener('drop', function (e) {\n        e.preventDefault();\n        if (itsMe) {\n            return userLog('warning', 'You cannot send files to yourself.');\n        }\n        if (sendInProgress) {\n            return userLog('warning', 'Please wait for the previous file to be sent.');\n        }\n        if (e.dataTransfer.items && e.dataTransfer.items.length > 1) {\n            return userLog('warning', 'Please drag and drop a single file.');\n        }\n        // Use DataTransferItemList interface to access the file(s)\n        if (e.dataTransfer.items) {\n            // If dropped items aren't files, reject them\n            let item = e.dataTransfer.items[0].webkitGetAsEntry();\n            console.log('Drag and drop', item);\n            if (item.isDirectory) {\n                return userLog('warning', 'Please drag and drop a single file not a folder.', 'top-end');\n            }\n            let file = e.dataTransfer.items[0].getAsFile();\n            sendFileInformations(file, peer_id);\n        } else {\n            // Use DataTransfer interface to access the file(s)\n            sendFileInformations(e.dataTransfer.files[0], peer_id);\n        }\n    });\n}\n\n/**\n * Handle video privacy button click event\n * @param {string} videoId\n * @param {boolean} privacyBtnId\n */\nfunction handleVideoPrivacyBtn(videoId, privacyBtnId) {\n    let video = getId(videoId);\n    let privacyBtn = getId(privacyBtnId);\n    if (useVideo && video && privacyBtn) {\n        privacyBtn.addEventListener('click', () => {\n            playSound('click');\n            isVideoPrivacyActive = !isVideoPrivacyActive;\n            setVideoPrivacyStatus(videoId, isVideoPrivacyActive);\n            emitPeerStatus('privacy', isVideoPrivacyActive);\n        });\n    } else {\n        if (privacyBtn) privacyBtn.style.display = 'none';\n    }\n}\n\n/**\n * Set video privacy status\n * @param {string} peerVideoId\n * @param {boolean} peerPrivacyActive\n */\nfunction setVideoPrivacyStatus(peerVideoId, peerPrivacyActive) {\n    let video = getId(peerVideoId);\n    if (peerPrivacyActive) {\n        video.classList.remove('videoDefault');\n        video.classList.add('videoCircle');\n        video.style.objectFit = 'cover';\n    } else {\n        video.classList.remove('videoCircle');\n        video.classList.add('videoDefault');\n        video.style.objectFit = 'var(--video-object-fit)';\n    }\n}\n\n/**\n * Handle video pin/unpin\n * @param {string} elemId video id\n * @param {string} pnId button pin id\n * @param {string} camId video wrap id\n * @param {string} peerId peer id\n * @param {boolean} isScreen stream\n */\nfunction handleVideoPinUnpin(elemId, pnId, camId, peerId, isScreen = false) {\n    let videoPlayer = getId(elemId);\n    let btnPn = getId(pnId);\n    let cam = getId(camId);\n    let videoMediaContainer = getId('videoMediaContainer');\n    let videoPinMediaContainer = getId('videoPinMediaContainer');\n    if (btnPn && videoPlayer && cam) {\n        btnPn.addEventListener('click', () => {\n            playSound('click');\n            isVideoPinned = !isVideoPinned;\n            if (isVideoPinned) {\n                if (!videoPlayer.classList.contains('videoCircle')) {\n                    videoPlayer.style.objectFit = 'contain';\n                }\n                cam.className = '';\n                cam.style.width = '100%';\n                cam.style.height = '100%';\n                toggleVideoPin(pinVideoPositionSelect.value);\n                videoPinMediaContainer.appendChild(cam);\n                videoPinMediaContainer.style.display = 'block';\n                pinnedVideoPlayerId = elemId;\n                setColor(btnPn, 'lime');\n            } else {\n                if (pinnedVideoPlayerId != videoPlayer.id) {\n                    isVideoPinned = true;\n                    return userLog('toast', 'Another video seems pinned, unpin it before to pin this one', 5000);\n                }\n                if (!isScreenStreaming) videoPlayer.style.objectFit = 'var(--video-object-fit)';\n                if (isScreen || videoPlayer.style.name == peerId + '_typeScreen')\n                    videoPlayer.style.objectFit = 'contain';\n                videoPinMediaContainer.removeChild(cam);\n                cam.className = 'Camera';\n                videoMediaContainer.appendChild(cam);\n                removeVideoPinMediaContainer(peerId, true);\n                setColor(btnPn, 'white');\n            }\n            adaptAspectRatio();\n        });\n    }\n}\n\nfunction toggleVideoPin(position) {\n    if (!isVideoPinned) return;\n    const videoMediaContainer = getId('videoMediaContainer');\n    const videoPinMediaContainer = getId('videoPinMediaContainer');\n    switch (position) {\n        case 'top':\n            videoPinMediaContainer.style.top = '25%';\n            videoPinMediaContainer.style.width = '100%';\n            videoPinMediaContainer.style.height = '70%';\n            videoMediaContainer.style.top = 0;\n            videoMediaContainer.style.width = '100%';\n            videoMediaContainer.style.height = '25%';\n            videoMediaContainer.style.right = 0;\n            break;\n        case 'vertical':\n            videoPinMediaContainer.style.top = 0;\n            videoPinMediaContainer.style.width = '75%';\n            videoPinMediaContainer.style.height = '100%';\n            videoMediaContainer.style.top = 0;\n            videoMediaContainer.style.width = '25%';\n            videoMediaContainer.style.height = '100%';\n            videoMediaContainer.style.right = 0;\n            break;\n        case 'horizontal':\n            videoPinMediaContainer.style.top = 0;\n            videoPinMediaContainer.style.width = '100%';\n            videoPinMediaContainer.style.height = '75%';\n            videoMediaContainer.style.top = '75%';\n            videoMediaContainer.style.right = null;\n            videoMediaContainer.style.width = null;\n            videoMediaContainer.style.width = '100% !important';\n            videoMediaContainer.style.height = '25%';\n            break;\n    }\n    resizeVideoMedia();\n}\n\n/**\n * Remove video pin media container\n * @param {string} peer_id aka socket.id\n * @param {boolean} force_remove force to remove\n */\nfunction removeVideoPinMediaContainer(peer_id, force_remove = false) {\n    //alert(pinnedVideoPlayerId + '==' + peer_id);\n    if (\n        (isVideoPinned && (pinnedVideoPlayerId == peer_id + '_video' || pinnedVideoPlayerId == peer_id)) ||\n        force_remove\n    ) {\n        const videoPinMediaContainer = getId('videoPinMediaContainer');\n        const videoMediaContainer = getId('videoMediaContainer');\n        videoPinMediaContainer.style.display = 'none';\n        videoMediaContainer.style.top = 0;\n        videoMediaContainer.style.right = null;\n        videoMediaContainer.style.width = '100%';\n        videoMediaContainer.style.height = '100%';\n        pinnedVideoPlayerId = null;\n        isVideoPinned = false;\n        resizeVideoMedia();\n    }\n}\n\n/**\n * Handle Video to Img click event\n * @param {string} videoStream uuid video element\n * @param {string} videoToImgBtn uuid snapshot btn\n * @param {string} peer_id socket.id\n */\nfunction handleVideoToImg(videoStream, videoToImgBtn, peer_id = null) {\n    let videoBtn = getId(videoToImgBtn);\n    let video = getId(videoStream);\n    videoBtn.addEventListener('click', () => {\n        if (video.classList.contains('videoCircle')) {\n            return userLog('toast', 'Snapshot not allowed if video on privacy mode');\n        }\n        if (peer_id !== null) {\n            // handle remote video snapshot\n            let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n            if (remoteVideoStatusBtn.className === className.videoOn) {\n                return takeSnapshot(video);\n            }\n        } else {\n            // handle local video snapshot\n            if (myVideoStatusIcon.className === className.videoOn) {\n                return takeSnapshot(video);\n            }\n        }\n        userLog('toast', 'Snapshot not work on video disabled');\n    });\n}\n\n/**\n * Save Video Frame to Image\n * @param {object} video element from where to take the snapshot\n */\nfunction takeSnapshot(video) {\n    playSound('snapshot');\n    let context, canvas, width, height, dataURL;\n    width = video.videoWidth;\n    height = video.videoHeight;\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, width, height);\n    dataURL = canvas.toDataURL('image/png'); // or image/jpeg\n    // console.log(dataURL);\n    saveDataToFile(dataURL, getDataTimeString() + '-SNAPSHOT.png');\n}\n\n/**\n * Start talk time\n */\nfunction startCountTime() {\n    countTime.style.display = 'inline';\n    callStartTime = Date.now();\n    setInterval(function printTime() {\n        callElapsedTime = Date.now() - callStartTime;\n        countTime.innerHTML = getTimeToString(callElapsedTime);\n    }, 1000);\n}\n\n/**\n * Convert time to string\n * @param {integer} time\n * @return {string} format HH:MM:SS\n */\nfunction getTimeToString(time) {\n    let diffInHrs = time / 3600000;\n    let hh = Math.floor(diffInHrs);\n    let diffInMin = (diffInHrs - hh) * 60;\n    let mm = Math.floor(diffInMin);\n    let diffInSec = (diffInMin - mm) * 60;\n    let ss = Math.floor(diffInSec);\n    let formattedHH = hh.toString().padStart(2, '0');\n    let formattedMM = mm.toString().padStart(2, '0');\n    let formattedSS = ss.toString().padStart(2, '0');\n    return `${formattedHH}:${formattedMM}:${formattedSS}`;\n}\n\n/**\n * Refresh my localMediaStream audio/video status\n * @param object} localMediaStream\n */\nfunction refreshMyVideoAudioStatus(localMediaStream) {\n    // check Track audio/video status\n    localMediaStream.getTracks().forEach((track) => {\n        switch (track.kind) {\n            case 'video':\n                myVideoStatus = track.enabled;\n                break;\n            case 'audio':\n                myAudioStatus = track.enabled;\n                break;\n        }\n    });\n}\n\n/**\n * Handle WebRTC left buttons\n */\nfunction manageLeftButtons() {\n    setShareRoomBtn();\n    setAudioBtn();\n    setVideoBtn();\n    setSwapCameraBtn();\n    setScreenShareBtn();\n    setRecordStreamBtn();\n    setFullScreenBtn();\n    setChatRoomBtn();\n    setCaptionRoomBtn();\n    setChatEmojiBtn();\n    setMyHandBtn();\n    setMyWhiteboardBtn();\n    setMyFileShareBtn();\n    setMySettingsBtn();\n    setAboutBtn();\n    setLeaveRoomBtn();\n}\n\n/**\n * Copy - share room url button click event\n */\nfunction setShareRoomBtn() {\n    shareRoomBtn.addEventListener('click', async (e) => {\n        shareRoomUrl();\n    });\n}\n\n/**\n * Audio mute - unmute button click event\n */\nfunction setAudioBtn() {\n    audioBtn.addEventListener('click', (e) => {\n        handleAudio(e, false);\n    });\n}\n\n/**\n * Video hide - show button click event\n */\nfunction setVideoBtn() {\n    videoBtn.addEventListener('click', (e) => {\n        handleVideo(e, false);\n    });\n}\n\n/**\n * Check if can swap or not the cam, if yes show the button else hide it\n */\nfunction setSwapCameraBtn() {\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\n        const videoInput = devices.filter((device) => device.kind === 'videoinput');\n        if (videoInput.length > 1 && isMobileDevice) {\n            swapCameraBtn.addEventListener('click', (e) => {\n                swapCamera();\n            });\n        } else {\n            swapCameraBtn.style.display = 'none';\n        }\n    });\n}\n\n/**\n * Check if i can share the screen, if yes show button else hide it\n */\nfunction setScreenShareBtn() {\n    if (\n        !isMobileDevice &&\n        (navigator.getDisplayMedia || navigator.mediaDevices.getDisplayMedia) &&\n        buttons.main.showScreenBtn\n    ) {\n        isScreenSharingSupported = true;\n        screenShareBtn.addEventListener('click', async (e) => {\n            await toggleScreenSharing();\n        });\n    } else {\n        screenShareBtn.style.display = 'none';\n        elemDisplay(getId('screenFpsDiv'), false);\n    }\n}\n\n/**\n * Start - Stop Stream recording\n */\nfunction setRecordStreamBtn() {\n    recordStreamBtn.addEventListener('click', (e) => {\n        if (isStreamRecording) {\n            stopStreamRecording();\n        } else {\n            startStreamRecording();\n        }\n    });\n}\n\n/**\n * Full screen button click event\n */\nfunction setFullScreenBtn() {\n    if (myBrowserName != 'Safari') {\n        // detect esc from full screen mode\n        document.addEventListener('fullscreenchange', (e) => {\n            let fullscreenElement = document.fullscreenElement;\n            if (!fullscreenElement) {\n                fullScreenBtn.className = className.fsOff;\n                isDocumentOnFullScreen = false;\n                setTippy(fullScreenBtn, 'View full screen', 'right-start');\n            }\n        });\n        fullScreenBtn.addEventListener('click', (e) => {\n            toggleFullScreen();\n        });\n    } else {\n        fullScreenBtn.style.display = 'none';\n    }\n}\n\n/**\n * Chat room buttons click event\n */\nfunction setChatRoomBtn() {\n    // adapt chat room size for mobile\n    setChatRoomAndCaptionForMobile();\n\n    // open hide chat room\n    chatRoomBtn.addEventListener('click', (e) => {\n        if (!isChatRoomVisible) {\n            showChatRoomDraggable();\n        } else {\n            hideChatRoomAndEmojiPicker();\n            e.target.className = className.chatOn;\n        }\n    });\n\n    // ghost theme + undo\n    msgerTheme.addEventListener('click', (e) => {\n        if (e.target.className == className.ghost) {\n            e.target.className = className.undo;\n            document.documentElement.style.setProperty('--msger-bg', 'rgba(0, 0, 0, 0.100)');\n        } else {\n            e.target.className = className.ghost;\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n        }\n    });\n\n    // show msger participants section\n    msgerCPBtn.addEventListener('click', (e) => {\n        if (!thereIsPeerConnections()) {\n            return userLog('info', 'No participants detected');\n        }\n        msgerCP.style.display = 'flex';\n    });\n\n    // hide msger participants section\n    msgerCPCloseBtn.addEventListener('click', (e) => {\n        msgerCP.style.display = 'none';\n    });\n\n    // clean chat messages\n    msgerClean.addEventListener('click', (e) => {\n        if (chatMessages.length != 0) {\n            return cleanMessages();\n        }\n        userLog('info', 'No chat messages to delete');\n    });\n\n    // save chat messages to file\n    msgerSaveBtn.addEventListener('click', (e) => {\n        if (chatMessages.length != 0) {\n            return downloadChatMsgs();\n        }\n        userLog('info', 'No chat messages to save');\n    });\n\n    // close chat room - show left button and status menu if hide\n    msgerClose.addEventListener('click', (e) => {\n        hideChatRoomAndEmojiPicker();\n        showButtonsBarAndMenu();\n    });\n\n    // Markdown on-off\n    msgerMarkdownBtn.addEventListener('click', (e) => {\n        isChatMarkdownOn = !isChatMarkdownOn;\n        setColor(msgerMarkdownBtn, isChatMarkdownOn ? 'lime' : 'white');\n    });\n\n    // share file from chat\n    msgerShareFileBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        selectFileToShare(myPeerId, true);\n    });\n\n    // open Video Url Player\n    msgerVideoUrlBtn.addEventListener('click', (e) => {\n        sendVideoUrl();\n    });\n\n    // Execute a function when the user releases a key on the keyboard\n    msgerInput.addEventListener('keyup', (e) => {\n        // Number 13 is the \"Enter\" key on the keyboard\n        if (e.keyCode === 13 && (isMobileDevice || !e.shiftKey)) {\n            e.preventDefault();\n            msgerSendBtn.click();\n        }\n    });\n\n    // on input check 4emoji from map\n    msgerInput.oninput = function () {\n        for (let i in chatInputEmoji) {\n            let regex = new RegExp(escapeSpecialChars(i), 'gim');\n            this.value = this.value.replace(regex, chatInputEmoji[i]);\n        }\n        checkLineBreaks();\n    };\n\n    msgerInput.onpaste = () => {\n        isChatPasteTxt = true;\n        checkLineBreaks();\n    };\n\n    // clean input msg txt\n    msgerCleanTextBtn.addEventListener('click', (e) => {\n        cleanMessageInput();\n    });\n\n    // paste to input msg txt\n    msgerPasteBtn.addEventListener('click', (e) => {\n        pasteToMessageInput();\n    });\n\n    // chat show on message\n    msgerShowChatOnMsg.addEventListener('change', (e) => {\n        playSound('click');\n        showChatOnMessage = e.currentTarget.checked;\n        if (showChatOnMessage) {\n            msgPopup('info', \"Chat will be shown, when I'm receive a new message\", 'top-end', 3000);\n        } else {\n            msgPopup('info', \"Chat not will be shown, when I'm receive a new message\", 'top-end', 3000);\n        }\n    });\n\n    // chat send msg\n    msgerSendBtn.addEventListener('click', (e) => {\n        // prevent refresh page\n        e.preventDefault();\n        sendChatMessage();\n    });\n\n    // adapt input font size 4 mobile\n    if (isMobileDevice) msgerInput.style.fontSize = 'xx-small';\n}\n\n/**\n * Caption room buttons click event\n */\nfunction setCaptionRoomBtn() {\n    if (speechRecognition && buttons.main.showCaptionRoomBtn) {\n        // open hide caption\n        captionBtn.addEventListener('click', (e) => {\n            if (!isCaptionBoxVisible) {\n                showCaptionDraggable();\n            } else {\n                hideCaptionBox();\n            }\n        });\n\n        // ghost theme + undo\n        captionTheme.addEventListener('click', (e) => {\n            if (e.target.className == className.ghost) {\n                e.target.className = className.undo;\n                document.documentElement.style.setProperty('--msger-bg', 'rgba(0, 0, 0, 0.100)');\n            } else {\n                e.target.className = className.ghost;\n                document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n            }\n        });\n\n        // clean caption transcripts\n        captionClean.addEventListener('click', (e) => {\n            if (transcripts.length != 0) {\n                return cleanCaptions();\n            }\n            userLog('info', 'No captions to delete');\n        });\n\n        // save caption transcripts to file\n        captionSaveBtn.addEventListener('click', (e) => {\n            if (transcripts.length != 0) {\n                return downloadCaptions();\n            }\n            userLog('info', 'No captions to save');\n        });\n\n        // close caption box - show left button and status menu if hide\n        captionClose.addEventListener('click', (e) => {\n            hideCaptionBox();\n            showButtonsBarAndMenu();\n        });\n\n        // hide it\n        speechRecognitionStop.style.display = 'none';\n\n        // start recognition speech\n        speechRecognitionStart.addEventListener('click', (e) => {\n            startSpeech(true);\n        });\n        // stop recognition speech\n        speechRecognitionStop.addEventListener('click', (e) => {\n            startSpeech(false);\n        });\n    } else {\n        captionBtn.style.display = 'none';\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API#browser_compatibility\n    }\n}\n\n/**\n * Emoji picker chat room button click event\n */\nfunction setChatEmojiBtn() {\n    msgerEmojiBtn.addEventListener('click', (e) => {\n        // prevent refresh page\n        e.preventDefault();\n        hideShowEmojiPicker();\n    });\n    // Add emoji picker\n    const pickerOptions = {\n        theme: 'dark',\n        onEmojiSelect: addEmojiToMsg,\n    };\n    const emojiPicker = new EmojiMart.Picker(pickerOptions);\n    msgerEmojiPicker.appendChild(emojiPicker);\n}\n\n/**\n * Add emoji to chat message\n */\nfunction addEmojiToMsg(data) {\n    //console.log(data);\n    msgerInput.value += data.native;\n    hideShowEmojiPicker();\n}\n\n/**\n * Set my hand button click event\n */\nfunction setMyHandBtn() {\n    myHandBtn.addEventListener('click', async (e) => {\n        setMyHandStatus();\n    });\n}\n\n/**\n * Whiteboard: https://github.com/fabricjs/fabric.js\n */\nfunction setMyWhiteboardBtn() {\n    dragElement(whiteboard, whiteboardHeader);\n\n    setupWhiteboard();\n\n    whiteboardBtn.addEventListener('click', (e) => {\n        handleWhiteboardToggle();\n    });\n    whiteboardPencilBtn.addEventListener('click', (e) => {\n        whiteboardIsDrawingMode(true);\n    });\n    whiteboardObjectBtn.addEventListener('click', (e) => {\n        whiteboardIsDrawingMode(false);\n    });\n    whiteboardUndoBtn.addEventListener('click', (e) => {\n        whiteboardAction(getWhiteboardAction('undo'));\n    });\n    whiteboardRedoBtn.addEventListener('click', (e) => {\n        whiteboardAction(getWhiteboardAction('redo'));\n    });\n    whiteboardSaveBtn.addEventListener('click', (e) => {\n        wbCanvasSaveImg();\n    });\n    whiteboardImgFileBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('imgFile');\n    });\n    whiteboardImgUrlBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('imgUrl');\n    });\n    whiteboardTextBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('text');\n    });\n    whiteboardLineBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('line');\n    });\n    whiteboardRectBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('rect');\n    });\n    whiteboardCircleBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('circle');\n    });\n    whiteboardEraserBtn.addEventListener('click', (e) => {\n        whiteboardIsEraser(true);\n    });\n    whiteboardCleanBtn.addEventListener('click', (e) => {\n        confirmCleanBoard();\n    });\n    whiteboardCloseBtn.addEventListener('click', (e) => {\n        handleWhiteboardToggle();\n    });\n    wbDrawingColorEl.addEventListener('change', (e) => {\n        wbCanvas.freeDrawingBrush.color = wbDrawingColorEl.value;\n        whiteboardIsDrawingMode(true);\n    });\n    wbBackgroundColorEl.addEventListener('change', (e) => {\n        setWhiteboardBgColor(wbBackgroundColorEl.value);\n    });\n    whiteboardGhostButton.addEventListener('click', (e) => {\n        wbIsBgTransparent = !wbIsBgTransparent;\n        setWhiteboardBgColor(wbIsBgTransparent ? 'rgba(0, 0, 0, 0.100)' : wbBackgroundColorEl.value);\n        //wbIsBgTransparent ? wbCanvasBackgroundColor('rgba(0, 0, 0, 0.100)'): setTheme(mirotalkTheme);\n    });\n}\n\n/**\n * File Transfer button event click\n */\nfunction setMyFileShareBtn() {\n    // make send-receive file div draggable\n    if (!isMobileDevice) {\n        dragElement(getId('sendFileDiv'), getId('imgShareSend'));\n        dragElement(getId('receiveFileDiv'), getId('imgShareReceive'));\n    }\n\n    fileShareBtn.addEventListener('click', (e) => {\n        //window.open(\"https://fromsmash.com\"); // for Big Data\n        selectFileToShare(myPeerId, true);\n    });\n    sendAbortBtn.addEventListener('click', (e) => {\n        abortFileTransfer();\n    });\n    receiveHideBtn.addEventListener('click', (e) => {\n        hideFileTransfer();\n    });\n}\n\n/**\n * My settings button click event\n */\nfunction setMySettingsBtn() {\n    mySettingsBtn.addEventListener('click', (e) => {\n        if (isMobileDevice) {\n            buttonsBar.style.display = 'none';\n            isButtonsVisible = false;\n        }\n        hideShowMySettings();\n    });\n    mySettingsCloseBtn.addEventListener('click', (e) => {\n        hideShowMySettings();\n    });\n    myPeerNameSetBtn.addEventListener('click', (e) => {\n        updateMyPeerName();\n    });\n    // Sounds\n    switchSounds.addEventListener('change', (e) => {\n        notifyBySound = e.currentTarget.checked;\n    });\n\n    // make chat room draggable for desktop\n    if (!isMobileDevice) dragElement(mySettings, mySettingsHeader);\n}\n\n/**\n * About button click event\n */\nfunction setAboutBtn() {\n    aboutBtn.addEventListener('click', (e) => {\n        showAbout();\n    });\n}\n\n/**\n * Leave room button click event\n */\nfunction setLeaveRoomBtn() {\n    leaveRoomBtn.addEventListener('click', (e) => {\n        leaveRoom();\n    });\n}\n\n/**\n * Handle left buttons - status men\u00f9 show - hide on body mouse move\n */\nfunction handleBodyOnMouseMove() {\n    document.body.addEventListener('mousemove', (e) => {\n        showButtonsBarAndMenu();\n    });\n    // detect buttons bar over\n    buttonsBar.addEventListener('mouseover', () => {\n        isButtonsBarOver = true;\n    });\n    buttonsBar.addEventListener('mouseout', () => {\n        isButtonsBarOver = false;\n    });\n    checkButtonsBarAndMenu();\n}\n\n/**\n * Setup local audio - video devices - theme ...\n */\nfunction setupMySettings() {\n    // tab buttons\n    tabDevicesBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabDevices');\n    });\n    tabBandwidthBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabBandwidth');\n    });\n    tabRoomBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabRoom');\n    });\n    tabStylingBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabStyling');\n    });\n    tabLanguagesBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabLanguages');\n    });\n    // select audio input\n    audioInputSelect.addEventListener('change', (e) => {\n        myVideoChange = false;\n        refreshLocalMedia();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.audio, audioInputSelect.selectedIndex, audioInputSelect.value);\n    });\n    // select audio output\n    audioOutputSelect.addEventListener('change', (e) => {\n        changeAudioDestination();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.speaker, audioOutputSelect.selectedIndex, audioOutputSelect.value);\n    });\n    // select video input\n    videoSelect.addEventListener('change', (e) => {\n        myVideoChange = true;\n        refreshLocalMedia();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, videoSelect.selectedIndex, videoSelect.value);\n    });\n    // select video quality\n    videoQualitySelect.addEventListener('change', (e) => {\n        setLocalVideoQuality();\n    });\n    // select video fps\n    videoFpsSelect.addEventListener('change', (e) => {\n        videoMaxFrameRate = parseInt(videoFpsSelect.value);\n        setLocalMaxFps(videoMaxFrameRate);\n    });\n    // default 30 fps\n    videoFpsSelect.selectedIndex = '1';\n\n    // Firefox not support video cam Fps O.o\n    if (myBrowserName === 'Firefox') {\n        videoFpsSelect.value = null;\n        videoFpsSelect.disabled = true;\n    }\n    // select screen fps\n    screenFpsSelect.addEventListener('change', (e) => {\n        screenMaxFrameRate = parseInt(screenFpsSelect.value);\n        if (isScreenStreaming) setLocalMaxFps(screenMaxFrameRate);\n    });\n    // default 30 fps\n    screenFpsSelect.selectedIndex = '1';\n\n    // Mobile not support screen sharing\n    if (isMobileDevice) {\n        screenFpsSelect.value = null;\n        screenFpsSelect.disabled = true;\n    }\n    // select themes\n    themeSelect.addEventListener('change', (e) => {\n        setTheme(themeSelect.value);\n    });\n    // video object fit\n    videoObjFitSelect.addEventListener('change', (e) => {\n        document.documentElement.style.setProperty('--video-object-fit', videoObjFitSelect.value);\n    });\n    videoObjFitSelect.selectedIndex = 2; // cover\n\n    // Mobile not support buttons bar position horizontal\n    if (isMobileDevice) {\n        btnsBarSelect.disabled = true;\n    } else {\n        btnsBarSelect.addEventListener('change', (e) => {\n            setButtonsBarPosition(btnsBarSelect.value);\n        });\n    }\n\n    // Mobile not support pin/unpin video\n    if (!isMobileDevice) {\n        pinVideoPositionSelect.addEventListener('change', (e) => {\n            toggleVideoPin(pinVideoPositionSelect.value);\n        });\n    } else {\n        getId('pinUnpinGridDiv').style.display = 'none';\n    }\n\n    // room actions\n    muteEveryoneBtn.addEventListener('click', (e) => {\n        disableAllPeers('audio');\n    });\n    hideEveryoneBtn.addEventListener('click', (e) => {\n        disableAllPeers('video');\n    });\n    ejectEveryoneBtn.addEventListener('click', (e) => {\n        ejectEveryone();\n    });\n    lockRoomBtn.addEventListener('click', (e) => {\n        handleRoomAction({ action: 'lock' }, true);\n    });\n    unlockRoomBtn.addEventListener('click', (e) => {\n        handleRoomAction({ action: 'unlock' }, true);\n    });\n}\n\n/**\n * Make video Url player draggable\n */\nfunction setupVideoUrlPlayer() {\n    if (isMobileDevice) {\n        // adapt video player iframe for mobile\n        document.documentElement.style.setProperty('--iframe-width', '320px');\n        document.documentElement.style.setProperty('--iframe-height', '240px');\n    } else {\n        dragElement(videoUrlCont, videoUrlHeader);\n        dragElement(videoAudioUrlCont, videoAudioUrlHeader);\n    }\n    videoUrlCloseBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        closeVideoUrlPlayer();\n        emitVideoPlayer('close');\n    });\n    videoAudioCloseBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        closeVideoUrlPlayer();\n        emitVideoPlayer('close');\n    });\n}\n\n/**\n * Refresh Local media audio video in - out\n */\nfunction refreshLocalMedia() {\n    // some devices can't swap the video track, if already in execution.\n    stopLocalVideoTrack();\n    stopLocalAudioTrack();\n\n    navigator.mediaDevices.getUserMedia(getAudioVideoConstraints()).then(gotStream).then(gotDevices).catch(handleError);\n}\n\n/**\n * Get audio - video constraints\n * @returns {object} audio - video constraints\n */\nfunction getAudioVideoConstraints() {\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    let videoConstraints = false;\n    if (useVideo) {\n        videoConstraints = getVideoConstraints(videoQualitySelect.value ? videoQualitySelect.value : 'default');\n        videoConstraints['deviceId'] = videoSource ? { exact: videoSource } : undefined;\n    }\n    let audioConstraints = {\n        deviceId: audioSource ? { exact: audioSource } : undefined,\n        echoCancellation: true,\n        noiseSuppression: true,\n        sampleRate: 44100,\n    };\n    const constraints = {\n        audio: audioConstraints,\n        video: videoConstraints,\n    };\n    return constraints;\n}\n\n/**\n * Get video constraints: https://webrtc.github.io/samples/src/content/getusermedia/resolution/\n * WebCam resolution: https://webcamtests.com/resolution\n * @param {string} videoQuality desired video quality\n * @returns {object} video constraints\n */\nfunction getVideoConstraints(videoQuality) {\n    let frameRate = { max: videoMaxFrameRate };\n\n    switch (videoQuality) {\n        case 'default':\n            if (forceCamMaxResolutionAndFps) {\n                // This will make the browser use the maximum resolution available as default, `up to 4K and 60fps`.\n                return {\n                    width: { ideal: 3840 },\n                    height: { ideal: 2160 },\n                    frameRate: { ideal: 60 },\n                }; // video cam constraints default\n            }\n            // This will make the browser use hdVideo and 30fps.\n            return {\n                width: { ideal: 1280 },\n                height: { ideal: 720 },\n                frameRate: { ideal: 30 },\n            }; // on default as hdVideo\n        case 'qvgaVideo':\n            return {\n                width: { exact: 320 },\n                height: { exact: 240 },\n                frameRate: frameRate,\n            }; // video cam constraints low bandwidth\n        case 'vgaVideo':\n            return {\n                width: { exact: 640 },\n                height: { exact: 480 },\n                frameRate: frameRate,\n            }; // video cam constraints medium bandwidth\n        case 'hdVideo':\n            return {\n                width: { exact: 1280 },\n                height: { exact: 720 },\n                frameRate: frameRate,\n            }; // video cam constraints high bandwidth\n        case 'fhdVideo':\n            return {\n                width: { exact: 1920 },\n                height: { exact: 1080 },\n                frameRate: frameRate,\n            }; // video cam constraints very high bandwidth\n        case '2kVideo':\n            return {\n                width: { exact: 2560 },\n                height: { exact: 1440 },\n                frameRate: frameRate,\n            }; // video cam constraints ultra high bandwidth\n        case '4kVideo':\n            return {\n                width: { exact: 3840 },\n                height: { exact: 2160 },\n                frameRate: frameRate,\n            }; // video cam constraints ultra high bandwidth\n    }\n}\n\n/**\n * Set local max fps: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints\n * @param {string} maxFrameRate desired max frame rate\n */\nfunction setLocalMaxFps(maxFrameRate) {\n    if (!useVideo) return;\n    localMediaStream\n        .getVideoTracks()[0]\n        .applyConstraints({ frameRate: { max: maxFrameRate } })\n        .then(() => {\n            logStreamSettingsInfo('setLocalMaxFps', localMediaStream);\n        })\n        .catch((err) => {\n            console.error('setLocalMaxFps', err);\n            userLog('error', \"Your device doesn't support the selected fps, please select the another one.\");\n        });\n}\n\n/**\n * Set local video quality: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints\n */\nfunction setLocalVideoQuality() {\n    if (!useVideo) return;\n    let videoConstraints = getVideoConstraints(videoQualitySelect.value ? videoQualitySelect.value : 'default');\n    localMediaStream\n        .getVideoTracks()[0]\n        .applyConstraints(videoConstraints)\n        .then(() => {\n            logStreamSettingsInfo('setLocalVideoQuality', localMediaStream);\n            videoQualitySelectedIndex = videoQualitySelect.selectedIndex;\n        })\n        .catch((err) => {\n            videoQualitySelect.selectedIndex = videoQualitySelectedIndex;\n            console.error('setLocalVideoQuality', err);\n            userLog('error', \"Your device doesn't support the selected video quality, please select the another one.\");\n        });\n}\n\n/**\n * Change Speaker\n */\nfunction changeAudioDestination() {\n    const audioDestination = audioOutputSelect.value;\n    attachSinkId(myVideo, audioDestination);\n}\n\n/**\n * Attach audio output device to video element using device/sink ID.\n * @param {object} element video element to attach the audio output\n * @param {string} sinkId uuid audio output device\n */\nfunction attachSinkId(element, sinkId) {\n    if (typeof element.sinkId !== 'undefined') {\n        element\n            .setSinkId(sinkId)\n            .then(() => {\n                console.log(`Success, audio output device attached: ${sinkId}`);\n            })\n            .catch((err) => {\n                let errorMessage = err;\n                if (err.name === 'SecurityError')\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${err}`;\n                console.error(errorMessage);\n                // Jump back to first output device in the list as it's the default.\n                audioOutputSelect.selectedIndex = 0;\n            });\n    } else {\n        console.warn('Browser does not support output device selection.');\n    }\n}\n\n/**\n * Got Stream and append to local media\n * @param {object} stream media stream audio - video\n * @returns {object} media Devices Info\n */\nasync function gotStream(stream) {\n    await refreshMyStreamToPeers(stream, true);\n    await refreshMyLocalStream(stream, true);\n    if (myVideoChange) {\n        setMyVideoStatusTrue();\n        // This fix IPadPro - Tablet mirror of the back camera\n        if ((isMobileDevice || isIPadDevice || isTabletDevice) && !isCamMirrored) {\n            myVideo.classList.toggle('mirror');\n            isCamMirrored = true;\n        }\n    }\n    // Refresh button list in case labels have become available\n    return navigator.mediaDevices.enumerateDevices();\n}\n\n/**\n * Get audio-video Devices and show it to select box\n * https://webrtc.github.io/samples/src/content/devices/input-output/\n * https://github.com/webrtc/samples/tree/gh-pages/src/content/devices/input-output\n * @param {object} deviceInfos device infos\n */\nfunction gotDevices(deviceInfos) {\n    // Handles being called several times to update labels. Preserve values.\n    const values = selectors.map((select) => select.value);\n    selectors.forEach((select) => {\n        while (select.firstChild) {\n            select.removeChild(select.firstChild);\n        }\n    });\n    // check devices\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        // console.log(\"device-info ------> \", deviceInfo);\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        switch (deviceInfo.kind) {\n            case 'videoinput':\n                option.text = `\ud83d\udcf9 ` + deviceInfo.label || `\ud83d\udcf9 camera ${videoSelect.length + 1}`;\n                videoSelect.appendChild(option);\n                break;\n\n            case 'audioinput':\n                option.text = `\ud83c\udfa4 ` + deviceInfo.label || `\ud83c\udfa4 microphone ${audioInputSelect.length + 1}`;\n                audioInputSelect.appendChild(option);\n                break;\n\n            case 'audiooutput':\n                option.text = `\ud83d\udd08 ` + deviceInfo.label || `\ud83d\udd08 speaker ${audioOutputSelect.length + 1}`;\n                audioOutputSelect.appendChild(option);\n                break;\n\n            default:\n                console.log('Some other kind of source/device: ', deviceInfo);\n        }\n    } // end for devices\n\n    selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some((n) => n.value === values[selectorIndex])) {\n            select.value = values[selectorIndex];\n        }\n    });\n}\n\n/**\n * Handle getUserMedia error: https://blog.addpipe.com/common-getusermedia-errors/\n * @param {object} err user media error\n */\nfunction handleError(err) {\n    console.log('navigator.MediaDevices.getUserMedia error: ', err);\n    switch (err.name) {\n        case 'OverconstrainedError':\n            userLog(\n                'error',\n                \"GetUserMedia: Your device doesn't support the selected video quality or fps, please select the another one.\",\n            );\n            break;\n        default:\n            userLog('error', 'GetUserMedia error ' + err);\n    }\n}\n\n/**\n * AttachMediaStream stream to element\n * @param {object} element element to attach the stream\n * @param {object} stream media stream audio - video\n */\nfunction attachMediaStream(element, stream) {\n    //console.log(\"DEPRECATED, attachMediaStream will soon be removed.\");\n    element.srcObject = stream;\n    console.log('Success, media stream attached', stream.getTracks());\n\n    if (myBrowserName === 'Safari') {\n        /*\n            Hack for Safari...\n            https://www.pilatesanytime.com/Pilates-Help/1016/How-to-Get-Safari-to-Autoplay-Video-and-Audio-Chapters\n        */\n        element.onloadedmetadata = function () {\n            let videoPlayPromise = element.play();\n            if (videoPlayPromise !== undefined) {\n                videoPlayPromise\n                    .then(function () {\n                        console.log('Safari - automatic playback started!');\n                    })\n                    .catch(function (err) {\n                        console.error('Safari - automatic playback error', err);\n                    });\n            }\n        };\n    }\n}\n\n/**\n * Show left buttons & status\n * if buttons visible or I'm on hover do nothing return\n * if mobile and chatroom open do nothing return\n * if mobile and myCaption visible do nothing\n * if mobile and mySettings open do nothing return\n */\nfunction showButtonsBarAndMenu() {\n    if (\n        isButtonsBarOver ||\n        isButtonsVisible ||\n        (isMobileDevice && isChatRoomVisible) ||\n        (isMobileDevice && isCaptionBoxVisible) ||\n        (isMobileDevice && isMySettingsVisible)\n    )\n        return;\n    toggleClassElements('navbar', 'block');\n    buttonsBar.style.display = 'flex';\n    isButtonsVisible = true;\n}\n\n/**\n * Check every 10 sec if need to hide buttons bar and status menu\n */\nfunction checkButtonsBarAndMenu() {\n    if (!isButtonsBarOver) {\n        toggleClassElements('navbar', 'none');\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    setTimeout(() => {\n        checkButtonsBarAndMenu();\n    }, 10000);\n}\n\n/**\n * Copy room url to clipboard and share it with navigator share if supported\n * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share\n */\nasync function shareRoomUrl() {\n    // navigator share\n    if (navigator.share) {\n        try {\n            // not add title and description to load metadata from url\n            await navigator.share({ url: myRoomUrl });\n            userLog('toast', 'Room Shared successfully!');\n        } catch (err) {\n            /*\n            This feature is available only in secure contexts (HTTPS),\n            in some or all supporting browsers and mobile devices\n            console.error(\"navigator.share\", err); \n            */\n            console.error('Navigator share error', err);\n\n            shareRoomMeetingURL();\n        }\n    } else {\n        shareRoomMeetingURL();\n    }\n}\n\n/**\n * Share meeting room\n * @param {boolean} checkScreen check screen share\n */\nfunction shareRoomMeetingURL(checkScreen = false) {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Share the room',\n        html: `\n        <div id=\"qrRoomContainer\">\n            <canvas id=\"qrRoom\"></canvas>\n        </div>\n        <br/>\n        <p style=\"color:rgb(8, 189, 89);\">Join from your mobile device</p>\n        <p style=\"background:transparent; color:white;\">No need for apps, simply capture the QR code with your mobile camera Or Invite someone else to join by sending them the following URL</p>\n        <p style=\"color:rgb(8, 189, 89);\">${myRoomUrl}</p>`,\n        showDenyButton: true,\n        showCancelButton: true,\n        cancelButtonColor: 'red',\n        denyButtonColor: 'green',\n        confirmButtonText: `Copy URL`,\n        denyButtonText: `Email invite`,\n        cancelButtonText: `Close`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            copyRoomURL();\n        } else if (result.isDenied) {\n            let message = {\n                email: '',\n                subject: 'Please join our MiroTalk Video Chat Meeting',\n                body: 'Click to join: ' + myRoomUrl,\n            };\n            shareRoomByEmail(message);\n        }\n        // share screen on join room\n        if (checkScreen) checkShareScreen();\n    });\n    makeRoomQR();\n}\n\n/**\n * Make Room QR\n * https://github.com/neocotic/qrious\n */\nfunction makeRoomQR() {\n    let qr = new QRious({\n        element: getId('qrRoom'),\n        value: window.location.href,\n    });\n    qr.set({\n        size: 256,\n    });\n}\n\n/**\n * Copy Room URL to clipboard\n */\nfunction copyRoomURL() {\n    let roomURL = window.location.href;\n    let tmpInput = document.createElement('input');\n    document.body.appendChild(tmpInput);\n    tmpInput.value = roomURL;\n    tmpInput.select();\n    tmpInput.setSelectionRange(0, 99999); // For mobile devices\n    navigator.clipboard.writeText(tmpInput.value);\n    console.log('Copied to clipboard Join Link ', roomURL);\n    document.body.removeChild(tmpInput);\n    userLog('toast', 'Meeting URL copied to clipboard \ud83d\udc4d');\n}\n\n/**\n * Share room id by email\n * @param {object} message content: email | subject | body\n */\nfunction shareRoomByEmail(message) {\n    let email = message.email;\n    let subject = message.subject;\n    let emailBody = message.body;\n    document.location = 'mailto:' + email + '?subject=' + subject + '&body=' + emailBody;\n}\n\n/**\n * Handle Audio ON - OFF\n * @param {object} e event\n * @param {boolean} init on join room\n * @param {null|boolean} force audio off (default null can be true/false)\n */\nfunction handleAudio(e, init, force = null) {\n    if (!useAudio) return;\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getAudioTracks\n\n    localMediaStream.getAudioTracks()[0].enabled =\n        force != null ? force : !localMediaStream.getAudioTracks()[0].enabled;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n\n    force != null\n        ? (e.className = myAudioStatus ? className.audioOn : className.audioOff)\n        : (e.target.className = myAudioStatus ? className.audioOn : className.audioOff);\n\n    if (init) {\n        audioBtn.className = myAudioStatus ? className.audioOn : className.audioOff;\n        setTippy(initAudioBtn, myAudioStatus ? 'Stop the audio' : 'Start the audio', 'top');\n        getId('initMicrophoneSelect').disabled = !myAudioStatus;\n        getId('initSpeakerSelect').disabled = !myAudioStatus;\n    }\n    setMyAudioStatus(myAudioStatus);\n}\n\n/**\n * Handle Video ON - OFF\n * @param {object} e event\n * @param {boolean} init on join room\n * @param {null|boolean} force video off (default null can be true/false)\n */\nfunction handleVideo(e, init, force = null) {\n    if (!useVideo) return;\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks\n\n    localMediaStream.getVideoTracks()[0].enabled =\n        force != null ? force : !localMediaStream.getVideoTracks()[0].enabled;\n    myVideoStatus = localMediaStream.getVideoTracks()[0].enabled;\n\n    force != null\n        ? (e.className = myVideoStatus ? className.videoOn : className.videoOff)\n        : (e.target.className = myVideoStatus ? className.videoOn : className.videoOff);\n\n    if (init) {\n        videoBtn.className = myVideoStatus ? className.videoOn : className.videoOff;\n        setTippy(initVideoBtn, myVideoStatus ? 'Stop the video' : 'Start the video', 'top');\n        initVideo.style.display = myVideoStatus ? 'block' : 'none';\n        initVideoSelect.disabled = !myVideoStatus;\n    }\n    setMyVideoStatus(myVideoStatus);\n}\n\n/**\n * SwapCamera front (user) - rear (environment)\n */\nasync function swapCamera() {\n    // setup camera\n    let camVideo = false;\n    camera = camera == 'user' ? 'environment' : 'user';\n    camVideo = camera == 'user' ? true : { facingMode: { exact: camera } };\n\n    // some devices can't swap the cam, if have Video Track already in execution.\n    await stopLocalVideoTrack();\n\n    let camStream = null;\n\n    try {\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        camStream = await navigator.mediaDevices.getUserMedia({ video: camVideo });\n        if (camStream) {\n            await refreshMyStreamToPeers(camStream);\n            await refreshMyLocalStream(camStream);\n            await setMyVideoStatusTrue();\n            if (!isCamMirrored) {\n                myVideo.classList.toggle('mirror');\n                isCamMirrored = true;\n            }\n        }\n    } catch (err) {\n        console.log('[Error] to swapping camera', err);\n        userLog('error', 'Error to swapping the camera ' + err);\n        // https://blog.addpipe.com/common-getusermedia-errors/\n    }\n}\n\n/**\n * Stop Local Video Track\n */\nasync function stopLocalVideoTrack() {\n    if (useVideo || !isScreenStreaming) localMediaStream.getVideoTracks()[0].stop();\n}\n\n/**\n * Stop Local Audio Track\n */\nfunction stopLocalAudioTrack() {\n    localMediaStream.getAudioTracks()[0].stop();\n}\n\n/**\n * Enable - disable screen sharing\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\n */\nasync function toggleScreenSharing() {\n    screenMaxFrameRate = parseInt(screenFpsSelect.value);\n    const constraints = {\n        audio: true, // enable tab audio\n        video: { frameRate: { max: screenMaxFrameRate } },\n    }; // true | { frameRate: { max: screenMaxFrameRate } }\n\n    let screenMediaPromise = null;\n\n    try {\n        screenMediaPromise = isScreenStreaming\n            ? await navigator.mediaDevices.getUserMedia(getAudioVideoConstraints())\n            : await navigator.mediaDevices.getDisplayMedia(constraints);\n        if (screenMediaPromise) {\n            isVideoPrivacyActive = false;\n            emitPeerStatus('privacy', isVideoPrivacyActive);\n            isScreenStreaming = !isScreenStreaming;\n            if (isScreenStreaming) {\n                setMyVideoStatusTrue();\n                emitPeersAction('screenStart');\n            } else {\n                emitPeersAction('screenStop');\n                adaptAspectRatio();\n            }\n            myScreenStatus = isScreenStreaming;\n            await emitPeerStatus('screen', myScreenStatus);\n            await stopLocalVideoTrack();\n            await refreshMyLocalStream(screenMediaPromise);\n            await refreshMyStreamToPeers(screenMediaPromise);\n            myVideo.classList.toggle('mirror');\n            setScreenSharingStatus(isScreenStreaming);\n            if (myVideoAvatarImage && !useVideo)\n                myVideoAvatarImage.style.display = isScreenStreaming ? 'none' : 'block';\n            let myPrivacyBtn = getId('myPrivacyBtn');\n            if (myPrivacyBtn) myPrivacyBtn.style.display = isScreenStreaming ? 'none' : 'inline';\n            if (isScreenStreaming || isVideoPinned) getId('myVideoPinBtn').click();\n        }\n    } catch (err) {\n        console.error('[Error] Unable to share the screen', err);\n        userLog('error', 'Unable to share the screen ' + err);\n    }\n}\n\n/**\n * Set Screen Sharing Status\n * @param {boolean} status of screen sharing\n */\nfunction setScreenSharingStatus(status) {\n    screenShareBtn.className = status ? className.screenOff : className.screenOn;\n    setTippy(screenShareBtn, status ? 'Stop screen sharing' : 'Start screen sharing', 'right-start');\n}\n\n/**\n * Set myVideoStatus true\n */\nasync function setMyVideoStatusTrue() {\n    if (myVideoStatus || !useVideo) return;\n    // Put video status already ON\n    localMediaStream.getVideoTracks()[0].enabled = true;\n    myVideoStatus = true;\n    videoBtn.className = className.videoOn;\n    myVideoStatusIcon.className = className.videoOn;\n    myVideoAvatarImage.style.display = 'none';\n    emitPeerStatus('video', myVideoStatus);\n    setTippy(videoBtn, 'Stop the video', 'right-start');\n}\n\n/**\n * Enter - esc on full screen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nfunction toggleFullScreen() {\n    if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n        fullScreenBtn.className = className.fsOn;\n        isDocumentOnFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            fullScreenBtn.className = className.fsOff;\n            isDocumentOnFullScreen = false;\n        }\n    }\n    setTippy(fullScreenBtn, isDocumentOnFullScreen ? 'Exit full screen' : 'View full screen', 'right-start');\n}\n\n/**\n * Refresh my stream changes to connected peers in the room\n * @param {object} stream media stream audio - video\n * @param {boolean} localAudioTrackChange default false\n */\nasync function refreshMyStreamToPeers(stream, localAudioTrackChange = false) {\n    if (!thereIsPeerConnections()) return;\n\n    console.log('PEER-CONNECTIONS', peerConnections); // all peers connections in the room expect myself\n    console.log('ALL-PEERS', allPeers); // all peers connected in the room\n\n    // refresh my stream to connected peers expect myself\n    for (let peer_id in peerConnections) {\n        let peer_name = allPeers[peer_id]['peer_name'];\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders\n        let videoSender = peerConnections[peer_id]\n            .getSenders()\n            .find((s) => (s.track ? s.track.kind === 'video' : false));\n        console.log('CHECK VIDEO SENDER - ' + peer_name, videoSender);\n\n        if (videoSender) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack\n            videoSender.replaceTrack(stream.getVideoTracks()[0]);\n            console.log('REPLACE VIDEO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n        } else {\n            stream.getTracks().forEach((track) => {\n                if (track.kind === 'video') {\n                    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack\n                    peerConnections[peer_id].addTrack(track);\n                    handleRtcOffer(peer_id); // https://groups.google.com/g/discuss-webrtc/c/Ky3wf_hg1l8?pli=1\n                    console.log('ADD VIDEO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n                }\n            });\n        }\n\n        let myAudioTrack; // audio Track to replace to peers\n\n        if (stream.getAudioTracks()[0] && (localAudioTrackChange || isScreenStreaming)) {\n            myAudioTrack = stream.getAudioTracks()[0];\n        } else {\n            myAudioTrack = localMediaStream.getAudioTracks()[0];\n        }\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders\n        let audioSender = peerConnections[peer_id]\n            .getSenders()\n            .find((s) => (s.track ? s.track.kind === 'audio' : false));\n\n        if (audioSender) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack\n            audioSender.replaceTrack(myAudioTrack);\n            console.log('REPLACE AUDIO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n        }\n\n        // When share a video tab that contain audio, my voice will be turned off\n        if (isScreenStreaming && stream.getAudioTracks()[0]) {\n            setMyAudioOff('you');\n            needToEnableMyAudio = true;\n            audioBtn.disabled = true;\n        }\n        // On end screen sharing enable my audio if need\n        if (!isScreenStreaming && needToEnableMyAudio) {\n            setMyAudioOn('you');\n            needToEnableMyAudio = false;\n            audioBtn.disabled = false;\n        }\n    }\n}\n\n/**\n * Refresh my local stream\n * @param {object} stream media stream audio - video\n * @param {boolean} localAudioTrackChange default false\n */\nasync function refreshMyLocalStream(stream, localAudioTrackChange = false) {\n    if (useVideo || isScreenStreaming) stream.getVideoTracks()[0].enabled = true;\n\n    // enable audio\n    if (localAudioTrackChange && myAudioStatus === false) {\n        audioBtn.className = className.audioOn;\n        setMyAudioStatus(true);\n        myAudioStatus = true;\n    }\n\n    let newStream = null;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n    if (useVideo || isScreenStreaming) {\n        console.log('Refresh my local media stream VIDEO - AUDIO');\n        newStream = new MediaStream([\n            stream.getVideoTracks()[0],\n            localAudioTrackChange ? stream.getAudioTracks()[0] : localMediaStream.getAudioTracks()[0],\n        ]);\n    } else {\n        console.log('Refresh my local media stream AUDIO');\n        newStream = new MediaStream([\n            localAudioTrackChange ? stream.getAudioTracks()[0] : localMediaStream.getAudioTracks()[0],\n        ]);\n    }\n\n    localMediaStream = newStream;\n\n    // refresh video privacy mode on screen sharing\n    if (isScreenStreaming) {\n        isVideoPrivacyActive = false;\n        setVideoPrivacyStatus('myVideo', isVideoPrivacyActive);\n    }\n\n    // adapt video object fit on screen streaming\n    getId('myVideo').style.objectFit = isScreenStreaming ? 'contain' : 'var(--video-object-fit)';\n\n    // log newStream devices\n    logStreamSettingsInfo('refreshMyLocalStream', localMediaStream);\n\n    // start capture mic volumes\n    startPitchDetection(localMediaStream);\n\n    // attachMediaStream is a part of the adapter.js library\n    attachMediaStream(myVideo, localMediaStream); // newStream\n\n    // on toggleScreenSharing video stop\n    if (useVideo || isScreenStreaming) {\n        stream.getVideoTracks()[0].onended = () => {\n            toggleScreenSharing();\n        };\n    }\n\n    /**\n     * When you stop the screen sharing, on default i turn back to the webcam with video stream ON.\n     * If you want the webcam with video stream OFF, just disable it with the button (Stop the video),\n     * before to stop the screen sharing.\n     */\n    if (useVideo && myVideoStatus === false) localMediaStream.getVideoTracks()[0].enabled = false;\n}\n\n/**\n * Start recording time\n */\nfunction startRecordingTime() {\n    recStartTime = Date.now();\n    let rc = setInterval(function printTime() {\n        if (isStreamRecording) {\n            recElapsedTime = Date.now() - recStartTime;\n            myVideoParagraph.innerHTML = myPeerName + '&nbsp;&nbsp; \ud83d\udd34 &nbsp; REC ' + getTimeToString(recElapsedTime);\n            return;\n        }\n        clearInterval(rc);\n    }, 1000);\n}\n\n/**\n * Get MediaRecorder MimeTypes\n * @returns {boolean} is mimeType supported by media recorder\n */\nfunction getSupportedMimeTypes() {\n    const possibleTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=vp8,opus',\n        'video/webm;codecs=h264,opus',\n        'video/mp4;codecs=h264,aac',\n        'video/mp4',\n    ];\n    return possibleTypes.filter((mimeType) => {\n        return MediaRecorder.isTypeSupported(mimeType);\n    });\n}\n\n/**\n * Start Recording\n * https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/record\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n */\nfunction startStreamRecording() {\n    recordedBlobs = [];\n\n    let options = getSupportedMimeTypes();\n    console.log('MediaRecorder options supported', options);\n    options = { mimeType: options[0] }; // select the first available as mimeType\n\n    try {\n        if (isMobileDevice) {\n            // on mobile devices recording camera + audio\n            mediaRecorder = new MediaRecorder(localMediaStream, options);\n            console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n            handleMediaRecorder(mediaRecorder);\n        } else {\n            // on desktop devices recording screen + audio\n            screenMaxFrameRate = parseInt(screenFpsSelect.value);\n            const constraints = {\n                video: { frameRate: { max: screenMaxFrameRate } },\n            };\n            let recScreenStreamPromise = navigator.mediaDevices.getDisplayMedia(constraints);\n            recScreenStreamPromise\n                .then((screenStream) => {\n                    const newStream = new MediaStream([\n                        screenStream.getVideoTracks()[0],\n                        localMediaStream.getAudioTracks()[0],\n                    ]);\n                    recScreenStream = newStream;\n                    mediaRecorder = new MediaRecorder(recScreenStream, options);\n                    console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n                    isRecScreenStream = true;\n                    handleMediaRecorder(mediaRecorder);\n                })\n                .catch((err) => {\n                    console.error('[Error] Unable to recording the screen + audio', err);\n                    userLog('error', 'Unable to recording the screen + audio ' + err);\n                });\n        }\n    } catch (err) {\n        console.error('Exception while creating MediaRecorder: ', err);\n        return userLog('error', \"Can't start stream recording: \" + err);\n    }\n}\n\n/**\n * Notify me if someone start to recording they screen + audio\n * @param {string} from peer_name\n * @param {string} action recording action\n */\nfunction notifyRecording(from, action) {\n    let msg = '[ \ud83d\udd34 REC ] : ' + action + ' to recording his own screen and audio';\n    let chatMessage = {\n        from: from,\n        to: myPeerName,\n        msg: msg,\n        privateMsg: false,\n    };\n    handleDataChannelChat(chatMessage);\n    userLog('toast', from + ' ' + msg);\n}\n\n/**\n * Handle Media Recorder\n * @param {object} mediaRecorder\n */\nfunction handleMediaRecorder(mediaRecorder) {\n    mediaRecorder.start();\n    mediaRecorder.addEventListener('start', handleMediaRecorderStart);\n    mediaRecorder.addEventListener('dataavailable', handleMediaRecorderData);\n    mediaRecorder.addEventListener('stop', handleMediaRecorderStop);\n}\n\n/**\n * Handle Media Recorder onstart event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderStart(event) {\n    playSound('recStart');\n    if (isRecScreenStream) {\n        emitPeersAction('recStart');\n        emitPeerStatus('rec', isRecScreenStream);\n    }\n    console.log('MediaRecorder started: ', event);\n    isStreamRecording = true;\n    recordStreamBtn.style.setProperty('color', '#ff4500');\n    startRecordingTime();\n    setTippy(recordStreamBtn, 'Stop recording', 'right-start');\n    if (isMobileDevice) {\n        swapCameraBtn.style.display = 'none';\n    }\n}\n\n/**\n * Handle Media Recorder ondata event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderData(event) {\n    console.log('MediaRecorder data: ', event);\n    if (event.data && event.data.size > 0) recordedBlobs.push(event.data);\n}\n\n/**\n * Handle Media Recorder onstop event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderStop(event) {\n    playSound('recStop');\n    console.log('MediaRecorder stopped: ', event);\n    console.log('MediaRecorder Blobs: ', recordedBlobs);\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n    isStreamRecording = false;\n    if (isRecScreenStream) {\n        recScreenStream.getTracks().forEach((track) => {\n            if (track.kind === 'video') track.stop();\n        });\n        isRecScreenStream = false;\n        emitPeersAction('recStop');\n        emitPeerStatus('rec', isRecScreenStream);\n    }\n    recordStreamBtn.style.setProperty('color', '#000');\n    downloadRecordedStream();\n    setTippy(recordStreamBtn, 'Start recording', 'right-start');\n    if (isMobileDevice) {\n        swapCameraBtn.style.display = 'block';\n    }\n}\n\n/**\n * Stop recording\n */\nfunction stopStreamRecording() {\n    mediaRecorder.stop();\n}\n\n/**\n * Download recorded stream\n */\nfunction downloadRecordedStream() {\n    try {\n        const type = recordedBlobs[0].type.includes('mp4') ? 'mp4' : 'webm';\n        const blob = new Blob(recordedBlobs, { type: 'video/' + type });\n        const recFileName = getDataTimeString() + '-REC.' + type;\n        const currentDevice = isMobileDevice ? 'MOBILE' : 'PC';\n        const blobFileSize = bytesToSize(blob.size);\n\n        userLog(\n            'success-html',\n            `<div style=\"text-align: left;\">\n                \ud83d\udd34 &nbsp; Recording Info: <br/>\n                <ul>\n                    <li>File: ${recFileName}</li>\n                    <li>Size: ${blobFileSize}</li>\n                </ul>\n                <br/>\n                Please wait to be processed, then will be downloaded to your ${currentDevice} device.\n            </div>`,\n        );\n\n        saveBlobToFile(blob, recFileName);\n    } catch (err) {\n        userLog('error', 'Recording save failed: ' + err);\n    }\n}\n\n/**\n * Create Chat Room Data Channel\n * @param {string} peer_id socket.id\n */\nfunction createChatDataChannel(peer_id) {\n    chatDataChannels[peer_id] = peerConnections[peer_id].createDataChannel('mirotalk_chat_channel');\n    chatDataChannels[peer_id].onopen = (event) => {\n        console.log('chatDataChannels created', event);\n    };\n}\n\n/**\n * Set the chat room on full screen mode for mobile\n */\nfunction setChatRoomAndCaptionForMobile() {\n    if (isMobileDevice) {\n        document.documentElement.style.setProperty('--msger-height', '99%');\n        document.documentElement.style.setProperty('--msger-width', '99%');\n    } else {\n        // make chat room draggable for desktop\n        dragElement(msgerDraggable, msgerHeader);\n        // make caption draggable for desktop\n        dragElement(captionDraggable, captionHeader);\n    }\n}\n\n/**\n * Show msger draggable on center screen position\n */\nfunction showChatRoomDraggable() {\n    playSound('newMessage');\n    if (isMobileDevice) {\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    chatRoomBtn.className = className.chatOff;\n    msgerDraggable.style.top = '50%';\n    msgerDraggable.style.left = isMobileDevice ? '50%' : '25%';\n    msgerDraggable.style.display = 'flex';\n    isChatRoomVisible = true;\n    setTippy(chatRoomBtn, 'Close the chat', 'right-start');\n}\n\n/**\n * Show caption box draggable on center screen position\n */\nfunction showCaptionDraggable() {\n    playSound('newMessage');\n    if (isMobileDevice) {\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    captionBtn.className = 'far fa-closed-captioning';\n    captionDraggable.style.top = '50%';\n    captionDraggable.style.left = isMobileDevice ? '50' : '75%';\n    captionDraggable.style.display = 'flex';\n    isCaptionBoxVisible = true;\n    setTippy(captionBtn, 'Close the caption', 'right-start');\n}\n\n/**\n * Clean chat messages\n */\nfunction cleanMessages() {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Clean up chat messages?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean chat messages\n        if (result.isConfirmed) {\n            let msgs = msgerChat.firstChild;\n            while (msgs) {\n                msgerChat.removeChild(msgs);\n                msgs = msgerChat.firstChild;\n            }\n            // clean object\n            chatMessages = [];\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Clean captions\n */\nfunction cleanCaptions() {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Clean up all caption transcripts?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean chat messages\n        if (result.isConfirmed) {\n            let captions = captionChat.firstChild;\n            while (captions) {\n                captionChat.removeChild(captions);\n                captions = captionChat.firstChild;\n            }\n            // clean object\n            transcripts = [];\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Hide chat room and emoji picker\n */\nfunction hideChatRoomAndEmojiPicker() {\n    msgerDraggable.style.display = 'none';\n    msgerEmojiPicker.style.display = 'none';\n    msgerEmojiBtn.style.color = '#FFFFFF';\n    chatRoomBtn.className = className.chatOn;\n    isChatRoomVisible = false;\n    isChatEmojiVisible = false;\n    setTippy(chatRoomBtn, 'Open the chat', 'right-start');\n}\n\n/**\n * Hide chat room and emoji picker\n */\nfunction hideCaptionBox() {\n    captionDraggable.style.display = 'none';\n    captionBtn.className = className.captionOn;\n    isCaptionBoxVisible = false;\n    setTippy(captionBtn, 'Open the caption', 'right-start');\n}\n\n/**\n * Send Chat messages to peers in the room\n */\nfunction sendChatMessage() {\n    if (!thereIsPeerConnections()) {\n        cleanMessageInput();\n        isChatPasteTxt = false;\n        return userLog('info', \"Can't send message, no participants in the room\");\n    }\n\n    const msg = checkMsg(msgerInput.value.trim());\n\n    // empty msg or\n    if (!msg) {\n        isChatPasteTxt = false;\n        return cleanMessageInput();\n    }\n\n    emitMsg(myPeerName, 'toAll', msg, false, myPeerId);\n    appendMessage(myPeerName, rightChatAvatar, 'right', msg, false);\n    cleanMessageInput();\n}\n\n/**\n * handle Incoming Data Channel Chat Messages\n * @param {object} dataMessage chat messages\n */\nfunction handleDataChannelChat(dataMessage) {\n    if (!dataMessage) return;\n\n    let msgFrom = dataMessage.from;\n    let msgTo = dataMessage.to;\n    let msg = dataMessage.msg;\n    let msgPrivate = dataMessage.privateMsg;\n    let msgId = dataMessage.id;\n\n    // private message but not for me return\n    if (msgPrivate && msgTo != myPeerName) return;\n\n    console.log('handleDataChannelChat', dataMessage);\n\n    // chat message for me also\n    if (!isChatRoomVisible && showChatOnMessage) {\n        showChatRoomDraggable();\n        chatRoomBtn.className = className.chatOff;\n    }\n    // show message from\n    if (!showChatOnMessage) {\n        userLog('toast', `New message from: ${msgFrom}`);\n    }\n\n    playSound('chatMessage');\n    setPeerChatAvatarImgName('left', msgFrom);\n    appendMessage(msgFrom, leftChatAvatar, 'left', msg, msgPrivate, msgId);\n}\n\n/**\n * Clean input txt message\n */\nfunction cleanMessageInput() {\n    msgerInput.value = '';\n    msgerInput.style.height = '25px';\n}\n\n/**\n * Paste from clipboard to input txt message\n */\nfunction pasteToMessageInput() {\n    navigator.clipboard\n        .readText()\n        .then((text) => {\n            msgerInput.value += text;\n            isChatPasteTxt = true;\n            checkLineBreaks();\n        })\n        .catch((err) => {\n            console.error('Failed to read clipboard contents: ', err);\n        });\n}\n\n/**\n * Handle text transcript getting from peers\n * @param {object} config data\n */\nfunction handleDataChannelSpeechTranscript(config) {\n    handleSpeechTranscript(config);\n}\n\n/**\n * Handle text transcript getting from peers\n * @param {object} config data\n */\nfunction handleSpeechTranscript(config) {\n    if (!config) return;\n\n    let time_stamp = getFormatDate(new Date());\n    let name = config.peer_name;\n    let avatar_image = avatarApiUrl + '?name=' + name + '&size=32' + '&background=random&rounded=true';\n    let transcipt = config.text_data;\n\n    console.log('Handle speech transcript', config);\n\n    if (!isCaptionBoxVisible) showCaptionDraggable();\n\n    const msgHTML = `\n\t<div class=\"msg left-msg\">\n\t\t<div class=\"msg-img\" style=\"background-image: url('${avatar_image}')\"></div>\n\t\t<div class=\"msg-caption-bubble\">\n            <div class=\"msg-info\">\n                <div class=\"msg-info-name\">${name} : ${time_stamp}</div>\n            </div>\n            <div class=\"msg-text\">${transcipt}</div>\n        </div>\n\t</div>\n    `;\n    captionChat.insertAdjacentHTML('beforeend', msgHTML);\n    captionChat.scrollTop += 500;\n    transcripts.push({\n        time: time_stamp,\n        name: name,\n        caption: transcipt,\n    });\n    playSound('speech');\n}\n\n/**\n * Escape Special Chars\n * @param {string} regex string to replace\n */\nfunction escapeSpecialChars(regex) {\n    return regex.replace(/([()[{*+.$^\\\\|?])/g, '\\\\$1');\n}\n\n/**\n * Append Message to msger chat room\n * @param {string} from peer name\n * @param {string} img images url\n * @param {string} side left/right\n * @param {string} msg message to append\n * @param {boolean} privateMsg if is private message\n * @param {string} msgId peer id\n */\nfunction appendMessage(from, img, side, msg, privateMsg, msgId = null) {\n    let time = getFormatDate(new Date());\n\n    // collect chat msges to save it later\n    chatMessages.push({\n        time: time,\n        from: from,\n        msg: msg,\n        privateMsg: privateMsg,\n    });\n\n    // check if i receive a private message\n    let msgBubble = privateMsg ? 'private-msg-bubble' : 'msg-bubble';\n\n    let msgHTML = `\n\t<div id=\"msg-${chatMessagesId}\" class=\"msg ${side}-msg\">\n\t\t<div class=\"msg-img\" style=\"background-image: url('${img}')\"></div>\n\t\t<div class=${msgBubble}>\n            <div class=\"msg-info\">\n                <div class=\"msg-info-name\">${from}</div>\n                <div class=\"msg-info-time\">${time}</div>\n            </div>\n            <div id=\"${chatMessagesId}\" class=\"msg-text\">${msg}\n                <hr/>\n    `;\n    // add btn direct reply to private message\n    if (privateMsg && msgId != null && msgId != myPeerId) {\n        msgHTML += `\n                <button \n                    class=\"${className.msgPrivate}\"\n                    id=\"msg-private-reply-${chatMessagesId}\"\n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"sendPrivateMsgToPeer('${myPeerId}','${from}')\"\n                ></button>`;\n    }\n    msgHTML += `\n                <button\n                    id=\"msg-delete-${chatMessagesId}\"\n                    class=\"${className.trash}\"\n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"deleteMessage('msg-${chatMessagesId}')\"\n                ></button>\n                <button\n                    id=\"msg-copy-${chatMessagesId}\"\n                    class=\"${className.copy}\" \n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"copyToClipboard('${chatMessagesId}')\"\n                ></button>\n            </div>\n        </div>\n\t</div>\n    `;\n    msgerChat.insertAdjacentHTML('beforeend', msgHTML);\n    msgerChat.scrollTop += 500;\n    setTippy(getId('msg-delete-' + chatMessagesId), 'Delete', 'top');\n    setTippy(getId('msg-copy-' + chatMessagesId), 'Copy', 'top');\n    setTippy(getId('msg-private-reply-' + chatMessagesId), 'Reply', 'top');\n    chatMessagesId++;\n}\n\n/**\n * Delete message\n * @param {string} id msg id\n */\nfunction deleteMessage(id) {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Delete this messages?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean this message\n        if (result.isConfirmed) {\n            getId(id).remove();\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Copy the element innerText on clipboard\n * @param {string} id\n */\nfunction copyToClipboard(id) {\n    const text = getId(id).innerText;\n    navigator.clipboard\n        .writeText(text)\n        .then(() => {\n            msgPopup('success', 'Message copied!', 'top-end', 1000);\n        })\n        .catch((err) => {\n            msgPopup('error', err, 'top-end', 2000);\n        });\n}\n\n/**\n * Add participants in the chat room lists\n * @param {object} peers all peers info connected to the same room\n */\nasync function msgerAddPeers(peers) {\n    // console.log(\"peers\", peers);\n    // add all current Participants\n    for (let peer_id in peers) {\n        let peer_name = peers[peer_id]['peer_name'];\n        // bypass insert to myself in the list :)\n        if (peer_id != myPeerId && peer_name) {\n            let exsistMsgerPrivateDiv = getId(peer_id + '_pMsgDiv');\n            // if there isn't add it....\n            if (!exsistMsgerPrivateDiv) {\n                let msgerPrivateDiv = `\n                <div id=\"${peer_id}_pMsgDiv\" class=\"msger-peer-inputarea\">\n                    <img id=\"${peer_id}_pMsgAvatar\" src='${avatarApiUrl}?name=${peer_name}&size=24&background=random&rounded=true'> \n                    <textarea\n                        rows=\"1\"\n                        cols=\"1\"\n                        id=\"${peer_id}_pMsgInput\"\n                        class=\"msger-input\"\n                        placeholder=\"\ud83d\udcac Enter your message...\"\n                    ></textarea>\n                    <button id=\"${peer_id}_pMsgBtn\" class=\"${className.msgPrivate}\" value=\"${peer_name}\"></button>\n                </div>\n                `;\n                msgerCPList.insertAdjacentHTML('beforeend', msgerPrivateDiv);\n                msgerCPList.scrollTop += 500;\n\n                let msgerPrivateMsgInput = getId(peer_id + '_pMsgInput');\n                let msgerPrivateBtn = getId(peer_id + '_pMsgBtn');\n                addMsgerPrivateBtn(msgerPrivateBtn, msgerPrivateMsgInput, myPeerId);\n            }\n        }\n    }\n}\n\n/**\n * Search peer by name in chat room lists to send the private messages\n */\nfunction searchPeer() {\n    let searchPeerBarName = getId('searchPeerBarName').value;\n    let msgerPeerInputarea = getEcN('msger-peer-inputarea');\n    searchPeerBarName = searchPeerBarName.toLowerCase();\n    for (let i = 0; i < msgerPeerInputarea.length; i++) {\n        if (!msgerPeerInputarea[i].innerHTML.toLowerCase().includes(searchPeerBarName)) {\n            msgerPeerInputarea[i].style.display = 'none';\n        } else {\n            msgerPeerInputarea[i].style.display = 'flex';\n        }\n    }\n}\n\n/**\n * Remove participant from chat room lists\n * @param {string} peer_id socket.id\n */\nfunction msgerRemovePeer(peer_id) {\n    let msgerPrivateDiv = getId(peer_id + '_pMsgDiv');\n    if (msgerPrivateDiv) {\n        let peerToRemove = msgerPrivateDiv.firstChild;\n        while (peerToRemove) {\n            msgerPrivateDiv.removeChild(peerToRemove);\n            peerToRemove = msgerPrivateDiv.firstChild;\n        }\n        msgerPrivateDiv.remove();\n    }\n}\n\n/**\n * Setup msger buttons to send private messages\n * @param {object} msgerPrivateBtn chat private message send button\n * @param {object} msgerPrivateMsgInput chat private message text input\n * @param {string} peerId chat peer_id\n */\nfunction addMsgerPrivateBtn(msgerPrivateBtn, msgerPrivateMsgInput, peerId) {\n    // add button to send private messages\n    msgerPrivateBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        sendPrivateMessage();\n    });\n\n    // Number 13 is the \"Enter\" key on the keyboard\n    msgerPrivateMsgInput.addEventListener('keyup', (e) => {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            sendPrivateMessage();\n        }\n    });\n\n    msgerPrivateMsgInput.onpaste = () => {\n        isChatPasteTxt = true;\n    };\n\n    function sendPrivateMessage() {\n        let pMsg = checkMsg(msgerPrivateMsgInput.value.trim());\n        if (!pMsg) {\n            msgerPrivateMsgInput.value = '';\n            isChatPasteTxt = false;\n            return;\n        }\n        let toPeerName = msgerPrivateBtn.value;\n        emitMsg(myPeerName, toPeerName, pMsg, true, peerId);\n        appendMessage(myPeerName, rightChatAvatar, 'right', pMsg + '<hr>Private message to ' + toPeerName, true);\n        msgerPrivateMsgInput.value = '';\n        msgerCP.style.display = 'none';\n    }\n}\n\n/**\n * Check Message\n * Detect url from text and make it clickable\n * If url is a img to create preview of it\n * Prevent XSS (strip html part)\n * @param {string} text passed text\n * @returns {string} html format\n */\nfunction checkMsg(text) {\n    if (text.trim().length == 0) return;\n    if (isHtml(text)) return sanitizeHtml(text);\n    if (isValidHttpURL(text)) {\n        if (isImageURL(text)) return '<img src=\"' + text + '\" alt=\"img\" width=\"180\" height=\"auto\"/>';\n        if (isVideoTypeSupported(text)) return getIframe(text);\n        return '<a href=\"' + text + '\" target=\"_blank\" class=\"msg-a\">' + text + '</a>';\n    }\n    if (isChatMarkdownOn) return marked.parse(text);\n    let pre = '<pre>' + text + '</pre>';\n    if (isChatPasteTxt) {\n        isChatPasteTxt = false;\n        return pre;\n    }\n    if (getLineBreaks(text) > 1) {\n        return pre;\n    }\n    return text;\n}\n\n/**\n * Sanitize Html\n * @param {string} html code\n * @returns Html as string\n */\nfunction sanitizeHtml(str) {\n    const tagsToReplace = { '&': '&amp;', '<': '&lt;', '>': '&gt;' };\n    const replaceTag = (tag) => tagsToReplace[tag] || tag;\n    const safe_tags_replace = (str) => str.replace(/[&<>]/g, replaceTag);\n    return safe_tags_replace(str);\n}\n\n/**\n * Check if string contain html\n * @param {string} str\n * @returns\n */\nfunction isHtml(str) {\n    let a = document.createElement('div');\n    a.innerHTML = str;\n    for (let c = a.childNodes, i = c.length; i--; ) {\n        if (c[i].nodeType == 1) return true;\n    }\n    return false;\n}\n\n/**\n * Check if valid URL\n * @param {string} str to check\n * @returns boolean true/false\n */\nfunction isValidHttpURL(str) {\n    let url;\n    try {\n        url = new URL(str);\n    } catch (_) {\n        return false;\n    }\n    return url.protocol === 'http:' || url.protocol === 'https:';\n}\n\n/**\n * Check if url passed is a image\n * @param {string} url to check\n * @returns {boolean} true/false\n */\nfunction isImageURL(url) {\n    return url.match(/\\.(jpeg|jpg|gif|png|tiff|bmp)$/) != null;\n}\n\n/**\n * Get IFrame from URL\n * @param {string} url\n * @returns html iframe\n */\nfunction getIframe(url) {\n    let is_youtube = getVideoType(url) == 'na' ? true : false;\n    let video_audio_url = is_youtube ? getYoutubeEmbed(url) : url;\n    return `\n    <iframe\n        title=\"Chat-IFrame\"\n        src=\"${video_audio_url}\"\n        width=\"auto\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n    ></iframe>`;\n}\n\n/**\n * Get text Line breaks\n * @param {string} text\n * @returns integer lines\n */\nfunction getLineBreaks(text) {\n    return (text.match(/\\n/g) || []).length;\n}\n\n/**\n * Check chat input line breaks\n */\nfunction checkLineBreaks() {\n    msgerInput.style.height = '';\n    if (getLineBreaks(msgerInput.value) > 0) {\n        msgerInput.style.height = '200px';\n    }\n}\n\n/**\n * Format date\n * @param {object} date\n * @returns {string} date format h:m:s\n */\nfunction getFormatDate(date) {\n    const time = date.toTimeString().split(' ')[0];\n    return `${time}`;\n}\n\n/**\n * Send message over Secure dataChannels\n * @param {string} from peer name\n * @param {string} to peer name\n * @param {string} msg message to send\n * @param {boolean} privateMsg if is a private message\n * @param {string} id peer_id\n */\nfunction emitMsg(from, to, msg, privateMsg, id) {\n    if (!msg) return;\n\n    let chatMessage = {\n        type: 'chat',\n        from: from,\n        id: id,\n        to: to,\n        msg: msg,\n        privateMsg: privateMsg,\n    };\n    console.log('Send msg', chatMessage);\n    sendToDataChannel(chatMessage);\n}\n\n/**\n * Hide - Show emoji picker div\n */\nfunction hideShowEmojiPicker() {\n    if (!isChatEmojiVisible) {\n        msgerEmojiPicker.style.display = 'block';\n        msgerEmojiBtn.style.color = '#FFFF00';\n        isChatEmojiVisible = true;\n        return;\n    }\n    msgerEmojiPicker.style.display = 'none';\n    msgerEmojiBtn.style.color = '#FFFFFF';\n    isChatEmojiVisible = false;\n}\n\n/**\n * Download Chat messages in json format\n * https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n */\nfunction downloadChatMsgs() {\n    let a = document.createElement('a');\n    a.href = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(chatMessages, null, 1));\n    a.download = getDataTimeString() + '-CHAT.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    playSound('download');\n}\n\n/**\n * Download Captions in json format\n * https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n */\nfunction downloadCaptions() {\n    let a = document.createElement('a');\n    a.href = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(transcripts, null, 1));\n    a.download = getDataTimeString() + roomId + '-CAPTIONS.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    playSound('download');\n}\n\n/**\n * Hide - show my settings\n */\nfunction hideShowMySettings() {\n    if (!isMySettingsVisible) {\n        playSound('newMessage');\n        // adapt it for mobile\n        if (isMobileDevice) {\n            mySettings.style.setProperty('width', '100%');\n            mySettings.style.setProperty('height', '100%');\n            document.documentElement.style.setProperty('--mySettings-select-w', '99%');\n        }\n        // my current peer name\n        myPeerNameSet.placeholder = myPeerName;\n        // center screen on show\n        mySettings.style.top = '50%';\n        mySettings.style.left = '50%';\n        mySettings.style.display = 'block';\n        isMySettingsVisible = true;\n        return;\n    }\n    mySettings.style.display = 'none';\n    isMySettingsVisible = false;\n}\n\n/**\n * Handle html tab settings\n * https://www.w3schools.com/howto/howto_js_tabs.asp\n * @param {object} evt event\n * @param {string} tabName name of the tab to open\n */\nfunction openTab(evt, tabName) {\n    let i, tabcontent, tablinks;\n    tabcontent = getEcN('tabcontent');\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = 'none';\n    }\n    tablinks = getEcN('tablinks');\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(' active', '');\n    }\n    getId(tabName).style.display = 'block';\n    evt.currentTarget.className += ' active';\n}\n\n/**\n * Update myPeerName to other peers in the room\n */\nfunction updateMyPeerName() {\n    const myNewPeerName = myPeerNameSet.value;\n    const myOldPeerName = myPeerName;\n\n    // myNewPeerName empty\n    if (!myNewPeerName) return;\n\n    // prevent XSS injection to remote peer\n    if (isHtml(myNewPeerName)) return userLog('warning', 'Invalid name!');\n\n    myPeerName = myNewPeerName;\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n\n    sendToServer('peerName', {\n        room_id: roomId,\n        peer_name_old: myOldPeerName,\n        peer_name_new: myPeerName,\n    });\n\n    myPeerNameSet.value = '';\n    myPeerNameSet.placeholder = myPeerName;\n\n    window.localStorage.peer_name = myPeerName;\n\n    setPeerAvatarImgName('myVideoAvatarImage', myPeerName, useAvatarApi);\n    setPeerChatAvatarImgName('right', myPeerName);\n    userLog('toast', 'My name changed to ' + myPeerName);\n}\n\n/**\n * Append updated peer name to video player\n * @param {object} config data\n */\nfunction handlePeerName(config) {\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let videoName = getId(peer_id + '_name');\n    if (videoName) videoName.innerHTML = peer_name;\n    // change also avatar and btn value - name on chat lists....\n    let msgerPeerName = getId(peer_id + '_pMsgBtn');\n    let msgerPeerAvatar = getId(peer_id + '_pMsgAvatar');\n    if (msgerPeerName) msgerPeerName.value = peer_name;\n    if (msgerPeerAvatar)\n        msgerPeerAvatar.src = `${avatarApiUrl}?name=${peer_name}&size=24&background=random&rounded=true`;\n    // refresh also peer video avatar name\n    setPeerAvatarImgName(peer_id + '_avatar', peer_name, useAvatarApi);\n}\n\n/**\n * Send my Video-Audio-Hand... status\n * @param {string} element typo\n * @param {boolean} status true/false\n */\nasync function emitPeerStatus(element, status) {\n    sendToServer('peerStatus', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        element: element,\n        status: status,\n    });\n}\n\n/**\n * Set my Hand Status and Icon\n */\nfunction setMyHandStatus() {\n    if (myHandStatus) {\n        // Raise hand\n        myHandStatus = false;\n        setTippy(myHandBtn, 'Raise your hand', 'right-start');\n    } else {\n        // Lower hand\n        myHandStatus = true;\n        setTippy(myHandBtn, 'Lower your hand', 'right-start');\n        playSound('raiseHand');\n    }\n    myHandStatusIcon.style.display = myHandStatus ? 'inline' : 'none';\n    emitPeerStatus('hand', myHandStatus);\n}\n\n/**\n * Set My Audio Status Icon and Title\n * @param {boolean} status of my audio\n */\nfunction setMyAudioStatus(status) {\n    myAudioStatusIcon.className = status ? className.audioOn : className.audioOff;\n    // send my audio status to all peers in the room\n    emitPeerStatus('audio', status);\n    setTippy(myAudioStatusIcon, status ? 'My audio is on' : 'My audio is off', 'bottom');\n    setTippy(audioBtn, status ? 'Stop the audio' : 'Start the audio', 'right-start');\n    status ? playSound('on') : playSound('off');\n}\n\n/**\n * Set My Video Status Icon and Title\n * @param {boolean} status of my video\n */\nfunction setMyVideoStatus(status) {\n    // on vdeo OFF display my video avatar name\n    if (myVideoAvatarImage) myVideoAvatarImage.style.display = status ? 'none' : 'block';\n    if (myVideoStatusIcon) myVideoStatusIcon.className = status ? className.videoOn : className.videoOff;\n    // send my video status to all peers in the room\n    emitPeerStatus('video', status);\n    if (!isMobileDevice) {\n        if (myVideoStatusIcon) setTippy(myVideoStatusIcon, status ? 'My video is on' : 'My video is off', 'bottom');\n        setTippy(videoBtn, status ? 'Stop the video' : 'Start the video', 'right-start');\n    }\n    status ? playSound('on') : playSound('off');\n}\n\n/**\n * Handle peer audio - video - hand - privacy status\n * @param {object} config data\n */\nfunction handlePeerStatus(config) {\n    //\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let element = config.element;\n    let status = config.status;\n\n    switch (element) {\n        case 'video':\n            setPeerVideoStatus(peer_id, status);\n            break;\n        case 'audio':\n            setPeerAudioStatus(peer_id, status);\n            break;\n        case 'hand':\n            setPeerHandStatus(peer_id, peer_name, status);\n            break;\n        case 'privacy':\n            setVideoPrivacyStatus(peer_id + '_video', status);\n            break;\n    }\n}\n\n/**\n * Set Participant Hand Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {string} peer_name peer name\n * @param {boolean} status of the hand\n */\nfunction setPeerHandStatus(peer_id, peer_name, status) {\n    let peerHandStatus = getId(peer_id + '_handStatus');\n    peerHandStatus.style.display = status ? 'inline' : 'none';\n    if (status) {\n        userLog('toast', peer_name + ' has raised the hand');\n        playSound('raiseHand');\n    }\n}\n\n/**\n * Set Participant Audio Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {boolean} status of peer audio\n */\nfunction setPeerAudioStatus(peer_id, status) {\n    let peerAudioStatus = getId(peer_id + '_audioStatus');\n    if (peerAudioStatus) {\n        peerAudioStatus.className = status ? className.audioOn : className.audioOff;\n        setTippy(peerAudioStatus, status ? 'Participant audio is on' : 'Participant audio is off', 'bottom');\n        status ? playSound('on') : playSound('off');\n    }\n}\n\n/**\n * Handle Peer audio volume 0/100\n * @param {string} audioVolumeId audio volume input id\n * @param {string} mediaId media id\n */\nfunction handleAudioVolume(audioVolumeId, mediaId) {\n    let media = getId(mediaId);\n    let audioVolume = getId(audioVolumeId);\n    if (audioVolume && media) {\n        audioVolume.style.maxWidth = '40px';\n        audioVolume.style.display = 'inline';\n        audioVolume.style.cursor = 'pointer';\n        audioVolume.value = 100;\n        audioVolume.addEventListener('input', () => {\n            media.volume = audioVolume.value / 100;\n        });\n    }\n}\n\n/**\n * Mute Audio to specific user in the room\n * @param {string} peer_id socket.id\n */\nfunction handlePeerAudioBtn(peer_id) {\n    if (!buttons.remote.audioBtnClickAllowed) return;\n    let peerAudioBtn = getId(peer_id + '_audioStatus');\n    peerAudioBtn.onclick = () => {\n        if (peerAudioBtn.className === className.audioOn) disablePeer(peer_id, 'audio');\n    };\n}\n\n/**\n * Hide Video to specified peer in the room\n * @param {string} peer_id socket.id\n */\nfunction handlePeerVideoBtn(peer_id) {\n    if (!useVideo || !buttons.remote.videoBtnClickAllowed) return;\n    let peerVideoBtn = getId(peer_id + '_videoStatus');\n    peerVideoBtn.onclick = () => {\n        if (peerVideoBtn.className === className.videoOn) disablePeer(peer_id, 'video');\n    };\n}\n\n/**\n * Send Private Message to specific peer\n * @param {string} peer_id socket.id\n * @param {string} toPeerName peer name to send message\n */\nfunction handlePeerPrivateMsg(peer_id, toPeerName) {\n    let peerPrivateMsg = getId(peer_id + '_privateMsg');\n    peerPrivateMsg.onclick = (e) => {\n        e.preventDefault();\n        sendPrivateMsgToPeer(myPeerId, toPeerName);\n    };\n}\n\n/**\n * Send Private messages to peers\n * @param {string} toPeerId\n * @param {string} toPeerName\n */\nfunction sendPrivateMsgToPeer(toPeerId, toPeerName) {\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: messageImg,\n        title: 'Send private message',\n        input: 'text',\n        showCancelButton: true,\n        confirmButtonText: `Send`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.value) {\n            let pMsg = checkMsg(result.value);\n            if (!pMsg) {\n                isChatPasteTxt = false;\n                return;\n            }\n            emitMsg(myPeerName, toPeerName, pMsg, true, toPeerId);\n            appendMessage(\n                myPeerName,\n                rightChatAvatar,\n                'right',\n                pMsg + '<br/><hr>Private message to ' + toPeerName,\n                true,\n            );\n            userLog('toast', 'Message sent to ' + toPeerName + ' \ud83d\udc4d');\n        }\n    });\n}\n\n/**\n * Handle peer send file\n * @param {string} peer_id\n */\nfunction handlePeerSendFile(peer_id) {\n    let peerFileSendBtn = getId(peer_id + '_shareFile');\n    peerFileSendBtn.onclick = () => {\n        selectFileToShare(peer_id);\n    };\n}\n\n/**\n * Send video - audio URL to specific peer\n * @param {string} peer_id socket.id\n */\nfunction handlePeerVideoAudioUrl(peer_id) {\n    let peerYoutubeBtn = getId(peer_id + '_videoAudioUrl');\n    peerYoutubeBtn.onclick = () => {\n        sendVideoUrl(peer_id);\n    };\n}\n\n/**\n * Set Participant Video Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {boolean} status of peer video\n */\nfunction setPeerVideoStatus(peer_id, status) {\n    let peerVideoAvatarImage = getId(peer_id + '_avatar');\n    let peerVideoStatus = getId(peer_id + '_videoStatus');\n    if (peerVideoAvatarImage) peerVideoAvatarImage.style.display = status ? 'none' : 'block';\n    if (peerVideoStatus) {\n        peerVideoStatus.className = status ? className.videoOn : className.videoOff;\n        setTippy(peerVideoStatus, status ? 'Participant video is on' : 'Participant video is off', 'bottom');\n        status ? playSound('on') : playSound('off');\n    }\n}\n\n/**\n * Emit actions to all peers in the same room except yourself\n * @param {object} peerAction to all peers\n */\nasync function emitPeersAction(peerAction) {\n    if (!thereIsPeerConnections()) return;\n\n    sendToServer('peerAction', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        peer_id: myPeerId,\n        peer_use_video: useVideo,\n        peer_action: peerAction,\n        send_to_all: true,\n    });\n}\n\n/**\n * Emit actions to specified peer in the same room\n * @param {string} peer_id socket.id\n * @param {object} peerAction to specified peer\n */\nasync function emitPeerAction(peer_id, peerAction) {\n    if (!thereIsPeerConnections()) return;\n\n    sendToServer('peerAction', {\n        room_id: roomId,\n        peer_id: peer_id,\n        peer_use_video: useVideo,\n        peer_name: myPeerName,\n        peer_action: peerAction,\n        send_to_all: false,\n    });\n}\n\n/**\n * Handle received peer actions\n * @param {object} config data\n */\nfunction handlePeerAction(config) {\n    // console.log('Handle peer action: ', config);\n\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let peer_use_video = config.peer_use_video;\n    let peer_action = config.peer_action;\n\n    switch (peer_action) {\n        case 'muteAudio':\n            setMyAudioOff(peer_name);\n            break;\n        case 'hideVideo':\n            setMyVideoOff(peer_name);\n            break;\n        case 'recStart':\n            notifyRecording(peer_name, 'Started');\n            break;\n        case 'recStop':\n            notifyRecording(peer_name, 'Stopped');\n            break;\n        case 'screenStart':\n            handleScreenStart(peer_id);\n            break;\n        case 'screenStop':\n            handleScreenStop(peer_id, peer_use_video);\n            break;\n        case 'ejectAll':\n            handleKickedOut(config);\n            break;\n    }\n}\n\n/**\n * Handle Screen Start\n * @param {string} peer_id\n */\nfunction handleScreenStart(peer_id) {\n    let remoteVideoAvatarImage = getId(peer_id + '_avatar');\n    let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n    let remoteVideoStream = getId(peer_id + '_video');\n    if (remoteVideoStatusBtn) {\n        remoteVideoStatusBtn.className = className.videoOn;\n        setTippy(remoteVideoStatusBtn, 'Participant screen share is on', 'bottom');\n    }\n    if (remoteVideoStream) {\n        getId(peer_id + '_pinUnpin').click();\n        remoteVideoStream.style.objectFit = 'contain';\n        remoteVideoStream.style.name = peer_id + '_typeScreen';\n    }\n    if (remoteVideoAvatarImage) {\n        remoteVideoAvatarImage.style.display = 'none';\n    }\n}\n\n/**\n * Handle Screen Stop\n * @param {string} peer_id\n * @param {boolean} peer_use_video\n */\nfunction handleScreenStop(peer_id, peer_use_video) {\n    let remoteVideoStream = getId(peer_id + '_video');\n    let remoteVideoAvatarImage = getId(peer_id + '_avatar');\n    let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n    if (remoteVideoStatusBtn) {\n        remoteVideoStatusBtn.className = className.videoOff;\n        setTippy(remoteVideoStatusBtn, 'Participant screen share is off', 'bottom');\n    }\n    if (remoteVideoStream) {\n        if (isVideoPinned) getId(peer_id + '_pinUnpin').click();\n        remoteVideoStream.style.objectFit = 'var(--video-object-fit)';\n        remoteVideoStream.style.name = peer_id + '_typeCam';\n        adaptAspectRatio();\n    }\n    if (remoteVideoAvatarImage && remoteVideoStream && !peer_use_video) {\n        remoteVideoAvatarImage.style.display = 'block';\n        remoteVideoStream.srcObject.getVideoTracks().forEach((track) => {\n            track.enabled = false;\n        });\n    } else {\n        if (remoteVideoAvatarImage) {\n            remoteVideoAvatarImage.style.display = 'none';\n        }\n    }\n}\n\n/**\n * Set my Audio off and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyAudioOff(peer_name) {\n    if (myAudioStatus === false || !useAudio) return;\n    localMediaStream.getAudioTracks()[0].enabled = false;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n    audioBtn.className = className.audioOff;\n    setMyAudioStatus(myAudioStatus);\n    userLog('toast', peer_name + ' has disabled your audio');\n    playSound('off');\n}\n\n/**\n * Set my Audio on and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyAudioOn(peer_name) {\n    if (myAudioStatus === true || !useAudio) return;\n    localMediaStream.getAudioTracks()[0].enabled = true;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n    audioBtn.className = className.audioOn;\n    setMyAudioStatus(myAudioStatus);\n    userLog('toast', peer_name + ' has enabled your audio');\n    playSound('on');\n}\n\n/**\n * Set my Video off and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyVideoOff(peer_name) {\n    if (myVideoStatus === false || !useVideo) return;\n    localMediaStream.getVideoTracks()[0].enabled = false;\n    myVideoStatus = localMediaStream.getVideoTracks()[0].enabled;\n    videoBtn.className = className.videoOff;\n    setMyVideoStatus(myVideoStatus);\n    userLog('toast', peer_name + ' has disabled your video');\n    playSound('off');\n}\n\n/**\n * Mute or Hide everyone except yourself\n * @param {string} element type audio/video\n */\nfunction disableAllPeers(element) {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: element == 'audio' ? audioOffImg : camOffImg,\n        title: element == 'audio' ? 'Mute everyone except yourself?' : 'Hide everyone except yourself?',\n        text:\n            element == 'audio'\n                ? \"Once muted, you won't be able to unmute them, but they can unmute themselves at any time.\"\n                : \"Once hided, you won't be able to unhide them, but they can unhide themselves at any time.\",\n        showDenyButton: true,\n        confirmButtonText: element == 'audio' ? `Mute` : `Hide`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            switch (element) {\n                case 'audio':\n                    userLog('toast', 'Mute everyone \ud83d\udc4d');\n                    emitPeersAction('muteAudio');\n                    break;\n                case 'video':\n                    userLog('toast', 'Hide everyone \ud83d\udc4d');\n                    emitPeersAction('hideVideo');\n                    break;\n            }\n        }\n    });\n}\n\n/**\n * Eject all participants in the room expect yourself\n */\nfunction ejectEveryone() {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        imageUrl: kickedOutImg,\n        position: 'center',\n        title: 'Eject everyone except yourself?',\n        text: 'Are you sure to want eject all participants from the room?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            emitPeersAction('ejectAll');\n        }\n    });\n}\n\n/**\n * Mute or Hide specific peer\n * @param {string} peer_id socket.id\n * @param {string} element type audio/video\n */\nfunction disablePeer(peer_id, element) {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: element == 'audio' ? audioOffImg : camOffImg,\n        title: element == 'audio' ? 'Mute this participant?' : 'Hide this participant?',\n        text:\n            element == 'audio'\n                ? \"Once muted, you won't be able to unmute them, but they can unmute themselves at any time.\"\n                : \"Once hided, you won't be able to unhide them, but they can unhide themselves at any time.\",\n        showDenyButton: true,\n        confirmButtonText: element == 'audio' ? `Mute` : `Hide`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            switch (element) {\n                case 'audio':\n                    userLog('toast', 'Mute audio \ud83d\udc4d');\n                    emitPeerAction(peer_id, 'muteAudio');\n                    break;\n                case 'video':\n                    userLog('toast', 'Hide video \ud83d\udc4d');\n                    emitPeerAction(peer_id, 'hideVideo');\n                    break;\n            }\n        }\n    });\n}\n\n/**\n * Handle Room action\n * @param {object} config data\n * @param {boolean} emit data to signaling server\n */\nfunction handleRoomAction(config, emit = false) {\n    if (emit) {\n        let thisConfig = {\n            room_id: roomId,\n            peer_name: myPeerName,\n            action: config.action,\n            password: null,\n        };\n        switch (config.action) {\n            case 'lock':\n                playSound('newMessage');\n\n                Swal.fire({\n                    allowOutsideClick: false,\n                    allowEscapeKey: false,\n                    showDenyButton: true,\n                    background: swalBackground,\n                    imageUrl: roomLockedImg,\n                    input: 'text',\n                    inputPlaceholder: 'Set Room password',\n                    confirmButtonText: `OK`,\n                    denyButtonText: `Cancel`,\n                    showClass: {\n                        popup: 'animate__animated animate__fadeInDown',\n                    },\n                    hideClass: {\n                        popup: 'animate__animated animate__fadeOutUp',\n                    },\n                    inputValidator: (pwd) => {\n                        if (!pwd) return 'Please enter the Room password';\n                        thisRoomPassword = pwd;\n                    },\n                }).then((result) => {\n                    if (result.isConfirmed) {\n                        thisConfig.password = thisRoomPassword;\n                        sendToServer('roomAction', thisConfig);\n                        handleRoomStatus(thisConfig);\n                    }\n                });\n                break;\n            case 'unlock':\n                sendToServer('roomAction', thisConfig);\n                handleRoomStatus(thisConfig);\n                break;\n        }\n    } else {\n        // data coming from signaling server\n        handleRoomStatus(config);\n    }\n}\n\n/**\n * Handle room status\n * @param {object} config data\n */\nfunction handleRoomStatus(config) {\n    let action = config.action;\n    let peer_name = config.peer_name;\n    switch (action) {\n        case 'lock':\n            playSound('locked');\n            userLog('toast', peer_name + ' has \ud83d\udd12 LOCKED the room by password', 'top-end');\n            elemDisplay(lockRoomBtn, false);\n            elemDisplay(unlockRoomBtn, true);\n            isRoomLocked = true;\n            break;\n        case 'unlock':\n            userLog('toast', peer_name + ' has \ud83d\udd13 UNLOCKED the room', 'top-end');\n            elemDisplay(unlockRoomBtn, false);\n            elemDisplay(lockRoomBtn, true);\n            isRoomLocked = false;\n            break;\n        case 'checkPassword':\n            let password = config.password;\n            isRoomLocked = true;\n            password == 'OK' ? joinToChannel() : handleRoomLocked();\n            break;\n    }\n}\n\n/**\n * Room is locked you provide a wrong password, can't access!\n */\nfunction handleRoomLocked() {\n    playSound('eject');\n\n    console.log('Room is Locked, try with another one');\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        position: 'center',\n        imageUrl: roomLockedImg,\n        title: 'Oops, Wrong Room Password',\n        text: 'The room is locked, try with another one.',\n        showDenyButton: false,\n        confirmButtonText: `Ok`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) openURL('/newcall');\n    });\n}\n\n/**\n * Try to unlock the room by providing a valid password\n */\nfunction handleUnlockTheRoom() {\n    playSound('alert');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: swalBackground,\n        imageUrl: roomLockedImg,\n        title: 'Oops, Room is Locked',\n        input: 'text',\n        inputPlaceholder: 'Enter the Room password',\n        confirmButtonText: `OK`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n        inputValidator: (pwd) => {\n            if (!pwd) return 'Please enter the Room password';\n            thisRoomPassword = pwd;\n        },\n    }).then(() => {\n        let config = {\n            room_id: roomId,\n            peer_name: myPeerName,\n            action: 'checkPassword',\n            password: thisRoomPassword,\n        };\n        sendToServer('roomAction', config);\n        elemDisplay(lockRoomBtn, false);\n        elemDisplay(unlockRoomBtn, true);\n    });\n}\n\n/**\n * Handle whiteboard toogle\n */\nfunction handleWhiteboardToggle() {\n    thereIsPeerConnections() ? whiteboardAction(getWhiteboardAction('toggle')) : toggleWhiteboard();\n}\n\n/**\n * Whiteboard: Show-Hide\n */\nfunction toggleWhiteboard() {\n    if (!wbIsOpen) playSound('newMessage');\n    whiteboard.classList.toggle('show');\n    whiteboard.style.top = '50%';\n    whiteboard.style.left = '50%';\n    wbIsOpen = wbIsOpen ? false : true;\n}\n\n/**\n * Whiteboard: setup\n */\nfunction setupWhiteboard() {\n    setupWhiteboardCanvas();\n    setupWhiteboardCanvasSize();\n    setupWhiteboardLocalListners();\n}\n\n/**\n * Whiteboard: setup canvas\n */\nfunction setupWhiteboardCanvas() {\n    wbCanvas = new fabric.Canvas('wbCanvas');\n    wbCanvas.freeDrawingBrush.color = '#FFFFFF';\n    wbCanvas.freeDrawingBrush.width = 3;\n    whiteboardIsDrawingMode(true);\n}\n\n/**\n * Whiteboard: setup canvas size\n */\nfunction setupWhiteboardCanvasSize() {\n    let optimalSize = [wbWidth, wbHeight];\n    let scaleFactorX = window.innerWidth / optimalSize[0];\n    let scaleFactorY = window.innerHeight / optimalSize[1];\n    if (scaleFactorX < scaleFactorY && scaleFactorX < 1) {\n        wbCanvas.setWidth(optimalSize[0] * scaleFactorX);\n        wbCanvas.setHeight(optimalSize[1] * scaleFactorX);\n        wbCanvas.setZoom(scaleFactorX);\n        setWhiteboardSize(optimalSize[0] * scaleFactorX, optimalSize[1] * scaleFactorX);\n    } else if (scaleFactorX > scaleFactorY && scaleFactorY < 1) {\n        wbCanvas.setWidth(optimalSize[0] * scaleFactorY);\n        wbCanvas.setHeight(optimalSize[1] * scaleFactorY);\n        wbCanvas.setZoom(scaleFactorY);\n        setWhiteboardSize(optimalSize[0] * scaleFactorY, optimalSize[1] * scaleFactorY);\n    } else {\n        wbCanvas.setWidth(optimalSize[0]);\n        wbCanvas.setHeight(optimalSize[1]);\n        wbCanvas.setZoom(1);\n        setWhiteboardSize(optimalSize[0], optimalSize[1]);\n    }\n    wbCanvas.calcOffset();\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: setup size\n * @param {string} w width\n * @param {string} h height\n */\nfunction setWhiteboardSize(w, h) {\n    document.documentElement.style.setProperty('--wb-width', w);\n    document.documentElement.style.setProperty('--wb-height', h);\n}\n\n/**\n * Set whiteboard background color\n * @param {string} color whiteboard bg\n */\nfunction setWhiteboardBgColor(color) {\n    let config = {\n        room_id: roomId,\n        peer_name: myPeerName,\n        action: 'bgcolor',\n        color: color,\n    };\n    whiteboardAction(config);\n}\n\n/**\n * Whiteboard: drawing mode\n * @param {boolean} status of drawing mode\n */\nfunction whiteboardIsDrawingMode(status) {\n    wbCanvas.isDrawingMode = status;\n    if (status) {\n        setColor(whiteboardPencilBtn, 'green');\n        setColor(whiteboardObjectBtn, 'white');\n        setColor(whiteboardEraserBtn, 'white');\n        wbIsEraser = false;\n    } else {\n        setColor(whiteboardPencilBtn, 'white');\n        setColor(whiteboardObjectBtn, 'green');\n    }\n}\n\n/**\n * Whiteboard: eraser\n * @param {boolean} status if eraser on\n */\nfunction whiteboardIsEraser(status) {\n    whiteboardIsDrawingMode(false);\n    wbIsEraser = status;\n    setColor(whiteboardEraserBtn, wbIsEraser ? 'green' : 'white');\n}\n\n/**\n * Set color to specific element\n * @param {object} elem element\n * @param {string} color to set\n */\nfunction setColor(elem, color) {\n    elem.style.color = color;\n}\n\n/**\n * Whiteboard: Add object to canvas\n * @param {string} type of object to add\n */\nfunction whiteboardAddObj(type) {\n    switch (type) {\n        case 'imgUrl':\n            Swal.fire({\n                background: swalBackground,\n                title: 'Image URL',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonText: 'OK',\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasImgURL = result.value;\n                    if (isImageURL(wbCanvasImgURL)) {\n                        fabric.Image.fromURL(wbCanvasImgURL, function (myImg) {\n                            addWbCanvasObj(myImg);\n                        });\n                    } else {\n                        userLog('error', 'The URL is not a valid image');\n                    }\n                }\n            });\n            break;\n        case 'imgFile':\n            Swal.fire({\n                allowOutsideClick: false,\n                background: swalBackground,\n                position: 'center',\n                title: 'Select image',\n                input: 'file',\n                inputAttributes: {\n                    accept: wbImageInput,\n                    'aria-label': 'Select image',\n                },\n                showDenyButton: true,\n                confirmButtonText: `OK`,\n                denyButtonText: `Cancel`,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasImg = result.value;\n                    if (wbCanvasImg && wbCanvasImg.size > 0) {\n                        let reader = new FileReader();\n                        reader.onload = function (event) {\n                            let imgObj = new Image();\n                            imgObj.src = event.target.result;\n                            imgObj.onload = function () {\n                                let image = new fabric.Image(imgObj);\n                                image.set({ top: 0, left: 0 }).scale(0.3);\n                                addWbCanvasObj(image);\n                            };\n                        };\n                        reader.readAsDataURL(wbCanvasImg);\n                    } else {\n                        userLog('error', 'File not selected or empty');\n                    }\n                }\n            });\n            break;\n        case 'text':\n            Swal.fire({\n                background: swalBackground,\n                title: 'Enter the text',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonText: 'OK',\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasText = result.value;\n                    if (wbCanvasText) {\n                        const text = new fabric.Text(wbCanvasText, {\n                            top: 0,\n                            left: 0,\n                            fontFamily: 'Comfortaa',\n                            fill: wbCanvas.freeDrawingBrush.color,\n                            strokeWidth: wbCanvas.freeDrawingBrush.width,\n                            stroke: wbCanvas.freeDrawingBrush.color,\n                        });\n                        addWbCanvasObj(text);\n                    }\n                }\n            });\n            break;\n        case 'line':\n            const line = new fabric.Line([50, 100, 200, 200], {\n                top: 0,\n                left: 0,\n                fill: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n                stroke: wbCanvas.freeDrawingBrush.color,\n            });\n            addWbCanvasObj(line);\n            break;\n        case 'circle':\n            const circle = new fabric.Circle({\n                radius: 50,\n                fill: 'transparent',\n                stroke: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n            });\n            addWbCanvasObj(circle);\n            break;\n        case 'rect':\n            const rect = new fabric.Rect({\n                top: 0,\n                left: 0,\n                width: 150,\n                height: 100,\n                fill: 'transparent',\n                stroke: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n            });\n            addWbCanvasObj(rect);\n            break;\n    }\n}\n\n/**\n * Whiteboard: add object\n * @param {object} obj to add\n */\nfunction addWbCanvasObj(obj) {\n    if (obj) {\n        wbCanvas.add(obj);\n        whiteboardIsDrawingMode(false);\n        wbCanvasToJson();\n    }\n}\n\n/**\n * Whiteboard: Local listners\n */\nfunction setupWhiteboardLocalListners() {\n    wbCanvas.on('mouse:down', function (e) {\n        mouseDown(e);\n    });\n    wbCanvas.on('mouse:up', function () {\n        mouseUp();\n    });\n    wbCanvas.on('mouse:move', function () {\n        mouseMove();\n    });\n    wbCanvas.on('object:added', function () {\n        objectAdded();\n    });\n}\n\n/**\n * Whiteboard: mouse down\n * @param {object} e event\n * @returns\n */\nfunction mouseDown(e) {\n    wbIsDrawing = true;\n    if (wbIsEraser && e.target) {\n        wbCanvas.remove(e.target);\n        return;\n    }\n}\n\n/**\n * Whiteboard: mouse up\n */\nfunction mouseUp() {\n    wbIsDrawing = false;\n    wbCanvasToJson();\n}\n\n/**\n * Whiteboard: mouse move\n * @returns\n */\nfunction mouseMove() {\n    if (wbIsEraser) {\n        wbCanvas.hoverCursor = 'not-allowed';\n        return;\n    } else {\n        wbCanvas.hoverCursor = 'move';\n    }\n    if (!wbIsDrawing) return;\n}\n\n/**\n * Whiteboard: tmp objects\n */\nfunction objectAdded() {\n    if (!wbIsRedoing) wbPop = [];\n    wbIsRedoing = false;\n}\n\n/**\n * Whiteboard: set background color\n * @param {string} color to set\n */\nfunction wbCanvasBackgroundColor(color) {\n    document.documentElement.style.setProperty('--wb-bg', color);\n    wbBackgroundColorEl.value = color;\n    wbCanvas.setBackgroundColor(color);\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: undo\n */\nfunction wbCanvasUndo() {\n    if (wbCanvas._objects.length > 0) {\n        wbPop.push(wbCanvas._objects.pop());\n        wbCanvas.renderAll();\n    }\n}\n\n/**\n * Whiteboard: redo\n */\nfunction wbCanvasRedo() {\n    if (wbPop.length > 0) {\n        wbIsRedoing = true;\n        wbCanvas.add(wbPop.pop());\n    }\n}\n\n/**\n * Whiteboard: save as images png\n */\nfunction wbCanvasSaveImg() {\n    const dataURL = wbCanvas.toDataURL({\n        width: wbCanvas.getWidth(),\n        height: wbCanvas.getHeight(),\n        left: 0,\n        top: 0,\n        format: 'png',\n    });\n    const dataNow = getDataTimeString();\n    const fileName = `whiteboard-${dataNow}.png`;\n    saveDataToFile(dataURL, fileName);\n    playSound('ok');\n}\n\n/**\n * Whiteboard: save data to file\n * @param {object} dataURL to download\n * @param {string} fileName to save\n */\nfunction saveDataToFile(dataURL, fileName) {\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = dataURL;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(dataURL);\n    }, 100);\n}\n\n/**\n * Whiteboard: canvas objects to json\n */\nfunction wbCanvasToJson() {\n    if (thereIsPeerConnections()) {\n        let config = {\n            room_id: roomId,\n            wbCanvasJson: JSON.stringify(wbCanvas.toJSON()),\n        };\n        sendToServer('wbCanvasToJson', config);\n    }\n}\n\n/**\n * If whiteboard opened, update canvas to all peers connected\n */\nasync function wbUpdate() {\n    if (wbIsOpen && thereIsPeerConnections()) wbCanvasToJson();\n}\n\n/**\n * Whiteboard: json to canvas objects\n * @param {object} config data\n */\nfunction handleJsonToWbCanvas(config) {\n    if (!wbIsOpen) toggleWhiteboard();\n\n    wbCanvas.loadFromJSON(config.wbCanvasJson);\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: actions\n * @param {string} action whiteboard action\n * @returns {object} data\n */\nfunction getWhiteboardAction(action) {\n    return {\n        room_id: roomId,\n        peer_name: myPeerName,\n        action: action,\n    };\n}\n\n/**\n * Whiteboard: Clean content\n */\nfunction confirmCleanBoard() {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        imageUrl: deleteImg,\n        position: 'center',\n        title: 'Clean the board',\n        text: 'Are you sure you want to clean the board?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            whiteboardAction(getWhiteboardAction('clear'));\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Whiteboard: actions\n * @param {object} config data\n */\nfunction whiteboardAction(config) {\n    if (thereIsPeerConnections()) {\n        sendToServer('whiteboardAction', config);\n    }\n    handleWhiteboardAction(config, false);\n}\n\n/**\n * Whiteboard: handle actions\n * @param {object} config data\n * @param {boolean} logme popup action\n */\nfunction handleWhiteboardAction(config, logme = true) {\n    if (logme) {\n        userLog('toast', `${config.peer_name} whiteboard action: ${config.action}`);\n    }\n    switch (config.action) {\n        case 'bgcolor':\n            wbCanvasBackgroundColor(config.color);\n            break;\n        case 'undo':\n            wbCanvasUndo();\n            break;\n        case 'redo':\n            wbCanvasRedo();\n            break;\n        case 'clear':\n            wbCanvas.clear();\n            break;\n        case 'toggle':\n            toggleWhiteboard();\n            break;\n        //...\n    }\n}\n\n/**\n * Create File Sharing Data Channel\n * @param {string} peer_id socket.id\n */\nfunction createFileSharingDataChannel(peer_id) {\n    fileDataChannels[peer_id] = peerConnections[peer_id].createDataChannel('mirotalk_file_sharing_channel');\n    fileDataChannels[peer_id].binaryType = 'arraybuffer';\n    fileDataChannels[peer_id].onopen = (event) => {\n        console.log('fileDataChannels created', event);\n    };\n}\n\n/**\n * Handle File Sharing\n * @param {object} data received\n */\nfunction handleDataChannelFileSharing(data) {\n    if (!receiveInProgress) return;\n    receiveBuffer.push(data);\n    receivedSize += data.byteLength;\n    receiveProgress.value = receivedSize;\n    receiveFilePercentage.innerHTML =\n        'Receive progress: ' + ((receivedSize / incomingFileInfo.file.fileSize) * 100).toFixed(2) + '%';\n    if (receivedSize === incomingFileInfo.file.fileSize) {\n        receiveFileDiv.style.display = 'none';\n        incomingFileData = receiveBuffer;\n        receiveBuffer = [];\n        endDownload();\n    }\n}\n\n/**\n * Send File Data trought datachannel\n * https://webrtc.github.io/samples/src/content/datachannel/filetransfer/\n * https://github.com/webrtc/samples/blob/gh-pages/src/content/datachannel/filetransfer/js/main.js\n *\n * @param {string} peer_id peer id\n * @param {boolean} broadcast sent to all or not\n */\nfunction sendFileData(peer_id, broadcast) {\n    console.log('Send file ' + fileToSend.name + ' size ' + bytesToSize(fileToSend.size) + ' type ' + fileToSend.type);\n\n    sendInProgress = true;\n\n    sendFileInfo.innerHTML =\n        'File name: ' +\n        fileToSend.name +\n        '<br>' +\n        'File type: ' +\n        fileToSend.type +\n        '<br>' +\n        'File size: ' +\n        bytesToSize(fileToSend.size) +\n        '<br>';\n\n    sendFileDiv.style.display = 'inline';\n    sendProgress.max = fileToSend.size;\n    fileReader = new FileReader();\n    let offset = 0;\n\n    fileReader.addEventListener('error', (err) => console.error('fileReader error', err));\n    fileReader.addEventListener('abort', (e) => console.log('fileReader aborted', e));\n    fileReader.addEventListener('load', (e) => {\n        if (!sendInProgress) return;\n\n        // peer to peer over DataChannels\n        let data = {\n            peer_id: peer_id,\n            broadcast: broadcast,\n            fileData: e.target.result,\n        };\n        sendFSData(data);\n        offset += data.fileData.byteLength;\n\n        sendProgress.value = offset;\n        sendFilePercentage.innerHTML = 'Send progress: ' + ((offset / fileToSend.size) * 100).toFixed(2) + '%';\n\n        // send file completed\n        if (offset === fileToSend.size) {\n            sendInProgress = false;\n            sendFileDiv.style.display = 'none';\n            userLog('success', 'The file ' + fileToSend.name + ' was sent successfully.');\n        }\n\n        if (offset < fileToSend.size) readSlice(offset);\n    });\n    const readSlice = (o) => {\n        for (let peer_id in fileDataChannels) {\n            // https://stackoverflow.com/questions/71285807/i-am-trying-to-share-a-file-over-webrtc-but-after-some-time-it-stops-and-log-rt\n            if (fileDataChannels[peer_id].bufferedAmount > fileDataChannels[peer_id].bufferedAmountLowThreshold) {\n                fileDataChannels[peer_id].onbufferedamountlow = () => {\n                    fileDataChannels[peer_id].onbufferedamountlow = null;\n                    readSlice(0);\n                };\n                return;\n            }\n        }\n        const slice = fileToSend.slice(offset, o + chunkSize);\n        fileReader.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n}\n\n/**\n * Send File through RTC Data Channels\n * @param {object} data to sent\n */\nfunction sendFSData(data) {\n    let broadcast = data.broadcast;\n    let peer_id_to_send = data.peer_id;\n    if (broadcast) {\n        // send to all peers\n        for (let peer_id in fileDataChannels) {\n            if (fileDataChannels[peer_id].readyState === 'open') fileDataChannels[peer_id].send(data.fileData);\n        }\n    } else {\n        // send to peer\n        for (let peer_id in fileDataChannels) {\n            if (peer_id_to_send == peer_id && fileDataChannels[peer_id].readyState === 'open') {\n                fileDataChannels[peer_id].send(data.fileData);\n            }\n        }\n    }\n}\n\n/**\n * Abort the file transfer\n */\nfunction abortFileTransfer() {\n    if (fileReader && fileReader.readyState === 1) {\n        fileReader.abort();\n        sendFileDiv.style.display = 'none';\n        sendInProgress = false;\n        sendToServer('fileAbort', {\n            room_id: roomId,\n            peer_name: myPeerName,\n        });\n    }\n}\n\n/**\n * File Transfer aborted by peer\n */\nfunction handleFileAbort() {\n    receiveBuffer = [];\n    incomingFileData = [];\n    receivedSize = 0;\n    receiveInProgress = false;\n    receiveFileDiv.style.display = 'none';\n    console.log('File transfer aborted');\n    userLog('toast', '\u26a0\ufe0f File transfer aborted');\n}\n\n/**\n * Hide incoming file transfer\n */\nfunction hideFileTransfer() {\n    receiveFileDiv.style.display = 'none';\n}\n\n/**\n * Select the File to Share\n * @param {string} peer_id\n * @param {boolean} broadcast send to all (default false)\n */\nfunction selectFileToShare(peer_id, broadcast = false) {\n    playSound('newMessage');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        imageAlt: 'mirotalk-file-sharing',\n        imageUrl: fileSharingImg,\n        position: 'center',\n        title: 'Share file',\n        input: 'file',\n        inputAttributes: {\n            accept: fileSharingInput,\n            'aria-label': 'Select file',\n        },\n        showDenyButton: true,\n        confirmButtonText: `Send`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            sendFileInformations(result.value, peer_id, broadcast);\n        }\n    });\n}\n\n/**\n * Send file informations\n * @param {object} file data\n * @param {string} peer_id\n * @param {boolean} broadcast send to all (default false)\n * @returns\n */\nfunction sendFileInformations(file, peer_id, broadcast = false) {\n    fileToSend = file;\n    // check if valid\n    if (fileToSend && fileToSend.size > 0) {\n        // no peers in the room\n        if (!thereIsPeerConnections()) {\n            return userLog('info', 'No participants detected');\n        }\n\n        // prevent XSS injection to remote peer\n        if (isHtml(fileToSend.name)) return userLog('warning', 'Invalid file name!');\n\n        const fileInfo = {\n            room_id: roomId,\n            broadcast: broadcast,\n            peer_name: myPeerName,\n            peer_id: peer_id,\n            file: {\n                fileName: fileToSend.name,\n                fileSize: fileToSend.size,\n                fileType: fileToSend.type,\n            },\n        };\n        // keep trace of sent file in chat\n        appendMessage(myPeerName, rightChatAvatar, 'right', 'Send file: \\n' + toHtmlJson(fileInfo), false);\n        // send some metadata about our file to peers in the room\n        sendToServer('fileInfo', fileInfo);\n        // send the File\n        setTimeout(() => {\n            sendFileData(peer_id, broadcast);\n        }, 1000);\n    } else {\n        userLog('error', 'File dragged not valid or empty.');\n    }\n}\n\n/**\n * Html Json pretty print\n * @param {object} obj\n * @returns html pre json\n */\nfunction toHtmlJson(obj) {\n    return '<pre>' + JSON.stringify(obj, null, 4) + '</pre>';\n}\n\n/**\n * Get remote file info\n * @param {object} config data\n */\nfunction handleFileInfo(config) {\n    incomingFileInfo = config;\n    incomingFileData = [];\n    receiveBuffer = [];\n    receivedSize = 0;\n    let fileToReceiveInfo =\n        'From: ' +\n        incomingFileInfo.peer_name +\n        '<br />' +\n        ' Incoming file: ' +\n        incomingFileInfo.file.fileName +\n        '<br />' +\n        ' File size: ' +\n        bytesToSize(incomingFileInfo.file.fileSize) +\n        '<br />' +\n        ' File type: ' +\n        incomingFileInfo.file.fileType;\n    console.log(fileToReceiveInfo);\n    // keep track of received file on chat\n    appendMessage(\n        incomingFileInfo.peer_name,\n        leftChatAvatar,\n        'left',\n        'Receive file: \\n' + toHtmlJson(incomingFileInfo),\n        !incomingFileInfo.broadcast,\n        incomingFileInfo.peer_id,\n    );\n    receiveFileInfo.innerHTML = fileToReceiveInfo;\n    receiveFileDiv.style.display = 'inline';\n    receiveProgress.max = incomingFileInfo.file.fileSize;\n    receiveInProgress = true;\n    userLog('toast', fileToReceiveInfo);\n}\n\n/**\n * The file will be saved in the Blob. You will be asked to confirm if you want to save it on your PC / Mobile device.\n * https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nfunction endDownload() {\n    playSound('download');\n\n    // save received file into Blob\n    const blob = new Blob(incomingFileData);\n    const file = incomingFileInfo.file.fileName;\n\n    incomingFileData = [];\n\n    // if file is image, show the preview\n    if (isImageURL(incomingFileInfo.file.fileName)) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            Swal.fire({\n                allowOutsideClick: false,\n                background: swalBackground,\n                position: 'center',\n                title: 'Received file',\n                text: incomingFileInfo.file.fileName + ' size ' + bytesToSize(incomingFileInfo.file.fileSize),\n                imageUrl: e.target.result,\n                imageAlt: 'mirotalk-file-img-download',\n                showDenyButton: true,\n                confirmButtonText: `Save`,\n                denyButtonText: `Cancel`,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) saveBlobToFile(blob, file);\n            });\n        };\n        // blob where is stored downloaded file\n        reader.readAsDataURL(blob);\n    } else {\n        // not img file\n        Swal.fire({\n            allowOutsideClick: false,\n            background: swalBackground,\n            imageAlt: 'mirotalk-file-download',\n            imageUrl: fileSharingImg,\n            position: 'center',\n            title: 'Received file',\n            text: incomingFileInfo.file.fileName + ' size ' + bytesToSize(incomingFileInfo.file.fileSize),\n            showDenyButton: true,\n            confirmButtonText: `Save`,\n            denyButtonText: `Cancel`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) saveBlobToFile(blob, file);\n        });\n    }\n}\n\n/**\n * Save to PC / Mobile devices\n * https://developer.mozilla.org/en-US/docs/Web/API/Blob\n * @param {object} blob content\n * @param {string} file to save\n */\nfunction saveBlobToFile(blob, file) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = file;\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n    }, 100);\n}\n\n/**\n * Opend and send Video URL to all peers in the room\n * @param {string} peer_id socket.id\n */\nfunction sendVideoUrl(peer_id = null) {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: videoAudioShare,\n        title: 'Share a Video or Audio',\n        text: 'Paste a Video or audio URL',\n        input: 'text',\n        showCancelButton: true,\n        confirmButtonText: `Share`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.value) {\n            if (!thereIsPeerConnections()) {\n                return userLog('info', 'No participants detected');\n            }\n            console.log('Video URL: ' + result.value);\n            /*\n                https://www.youtube.com/watch?v=RT6_Id5-7-s\n                http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\n                https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3\n            */\n            if (!isVideoTypeSupported(result.value)) {\n                return userLog('warning', 'Something wrong, try with another Video or audio URL');\n            }\n            let is_youtube = getVideoType(result.value) == 'na' ? true : false;\n            let video_url = is_youtube ? getYoutubeEmbed(result.value) : result.value;\n            let config = {\n                peer_id: peer_id,\n                video_src: video_url,\n            };\n            openVideoUrlPlayer(config);\n            emitVideoPlayer('open', config);\n        }\n    });\n}\n\n/**\n * Open video url Player\n */\nfunction openVideoUrlPlayer(config) {\n    console.log('Open video Player', config);\n    let videoSrc = config.video_src;\n    let videoType = getVideoType(videoSrc);\n    let videoEmbed = getYoutubeEmbed(videoSrc);\n    console.log('Video embed', videoEmbed);\n    //\n    if (!isVideoUrlPlayerOpen) {\n        if (videoEmbed) {\n            playSound('newMessage');\n            console.log('Load element type: iframe');\n            videoUrlIframe.src = videoEmbed;\n            videoUrlCont.style.display = 'flex';\n            isVideoUrlPlayerOpen = true;\n        } else {\n            playSound('newMessage');\n            console.log('Load element type: Video');\n            videoAudioUrlCont.style.display = 'flex';\n            videoAudioUrlElement.setAttribute('src', videoSrc);\n            videoAudioUrlElement.type = videoType;\n            if (videoAudioUrlElement.type == 'video/mp3') {\n                videoAudioUrlElement.poster = audioGif;\n            }\n            isVideoUrlPlayerOpen = true;\n        }\n    } else {\n        // video player seems open\n        if (videoEmbed) {\n            videoUrlIframe.src = videoEmbed;\n        } else {\n            videoAudioUrlElement.src = videoSrc;\n        }\n    }\n}\n\n/**\n * Get video type\n * @param {string} url\n * @returns string video type\n */\nfunction getVideoType(url) {\n    if (url.endsWith('.mp4')) return 'video/mp4';\n    if (url.endsWith('.mp3')) return 'video/mp3';\n    if (url.endsWith('.webm')) return 'video/webm';\n    if (url.endsWith('.ogg')) return 'video/ogg';\n    return 'na';\n}\n\n/**\n * Check if video URL is supported\n * @param {string} url\n * @returns boolean true/false\n */\nfunction isVideoTypeSupported(url) {\n    if (\n        url.endsWith('.mp4') ||\n        url.endsWith('.mp3') ||\n        url.endsWith('.webm') ||\n        url.endsWith('.ogg') ||\n        url.includes('youtube.com')\n    )\n        return true;\n    return false;\n}\n\n/**\n * Get youtube embed URL\n * @param {string} url of YouTube video\n * @returns {string} YouTube Embed URL\n */\nfunction getYoutubeEmbed(url) {\n    let regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    let match = url.match(regExp);\n    return match && match[7].length == 11 ? 'https://www.youtube.com/embed/' + match[7] + '?autoplay=1' : false;\n}\n\n/**\n * Close Video Url Player\n */\nfunction closeVideoUrlPlayer() {\n    console.log('Close video Player', {\n        videoUrlIframe: videoUrlIframe.src,\n        videoAudioUrlElement: videoAudioUrlElement.src,\n    });\n    if (videoUrlIframe.src != '') videoUrlIframe.setAttribute('src', '');\n    if (videoAudioUrlElement.src != '') videoAudioUrlElement.setAttribute('src', '');\n    videoUrlCont.style.display = 'none';\n    videoAudioUrlCont.style.display = 'none';\n    isVideoUrlPlayerOpen = false;\n}\n\n/**\n * Emit video palyer to peers\n * @param {string} video_action type\n * @param {object} config data\n */\nfunction emitVideoPlayer(video_action, config = {}) {\n    sendToServer('videoPlayer', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        video_action: video_action,\n        video_src: config.video_src,\n        peer_id: config.peer_id,\n    });\n}\n\n/**\n * Handle Video Player\n * @param {object} config data\n */\nfunction handleVideoPlayer(config) {\n    let peer_name = config.peer_name;\n    let video_action = config.video_action;\n    //\n    switch (video_action) {\n        case 'open':\n            userLog('toast', peer_name + ' open video player');\n            openVideoUrlPlayer(config);\n            break;\n        case 'close':\n            userLog('toast', peer_name + ' close video player');\n            closeVideoUrlPlayer();\n            break;\n    }\n}\n\n/**\n * Handle peer kick out event button\n * @param {string} peer_id socket.id\n */\nfunction handlePeerKickOutBtn(peer_id) {\n    if (!buttons.remote.showKickOutBtn) return;\n    let peerKickOutBtn = getId(peer_id + '_kickOut');\n    peerKickOutBtn.addEventListener('click', (e) => {\n        kickOut(peer_id);\n    });\n}\n\n/**\n * Eject peer, confirm before\n * @param {string} peer_id socket.id\n */\nfunction kickOut(peer_id) {\n    let pName = getId(peer_id + '_name').innerHTML;\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: confirmImg,\n        title: 'Kick out ' + pName,\n        text: 'Are you sure you want to kick out this participant?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            // send peer to kick out from room\n            sendToServer('kickOut', {\n                room_id: roomId,\n                peer_id: peer_id,\n                peer_name: myPeerName,\n            });\n        }\n    });\n}\n\n/**\n * You will be kicked out from the room and popup the peer name that performed this action\n * @param {object} config data\n */\nfunction handleKickedOut(config) {\n    let peer_name = config.peer_name;\n\n    playSound('eject');\n\n    let timerInterval;\n\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        position: 'center',\n        imageUrl: kickedOutImg,\n        title: 'Kicked out!',\n        html:\n            `<h2 style=\"color: #FF2D00;\">` +\n            `User ` +\n            peer_name +\n            `</h2> will kick out you after <b style=\"color: #FF2D00;\"></b> milliseconds.`,\n        timer: 10000,\n        timerProgressBar: true,\n        didOpen: () => {\n            Swal.showLoading();\n            timerInterval = setInterval(() => {\n                const content = Swal.getHtmlContainer();\n                if (content) {\n                    const b = content.querySelector('b');\n                    if (b) b.textContent = Swal.getTimerLeft();\n                }\n            }, 100);\n        },\n        willClose: () => {\n            clearInterval(timerInterval);\n        },\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then(() => {\n        openURL('/newcall');\n    });\n}\n\n/**\n * MiroTalk about info\n */\nfunction showAbout() {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: '<strong>WebRTC P2P</strong>',\n        imageAlt: 'mirotalk-about',\n        imageUrl: aboutImg,\n        html: `\n        <br/>\n        <div id=\"about\">\n            <b><a href=\"https://github.com/miroslavpejic85/mirotalk\" class=\"umami--click--github\" target=\"_blank\">Open Source</a></b> project\n            <br/><br/>\n            <button class=\"pulsate umami--click--sponsor\" onclick=\"window.open('https://github.com/sponsors/miroslavpejic85?o=esb')\"><i class=\"${className.heart}\" ></i>&nbsp;Support</button>\n            <br /><br />\n            Author:<a href=\"https://www.linkedin.com/in/miroslav-pejic-976a07101/\" class=\"umami--click--linkedin\" target=\"_blank\"> Miroslav Pejic</a>\n        </div>\n        `,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    });\n}\n\n/**\n * Leave the Room and create a new one\n */\nfunction leaveRoom() {\n    playSound('eject');\n    if (surveyActive) {\n        leaveFeedback();\n    } else {\n        openURL('/newcall');\n    }\n}\n\n/**\n * Ask for feedback when room exit\n */\nfunction leaveFeedback() {\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        showDenyButton: true,\n        background: swalBackground,\n        imageUrl: imgFeedback,\n        title: 'Leave a feedback',\n        text: 'Do you want to rate your MiroTalk experience?',\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            openURL(surveyURL);\n        } else {\n            openURL('/newcall');\n        }\n    });\n}\n\n/**\n * Make Obj draggable: https://www.w3schools.com/howto/howto_js_draggable.asp\n * @param {object} elmnt father element\n * @param {object} dragObj children element to make father draggable (click + mouse move)\n */\nfunction dragElement(elmnt, dragObj) {\n    let pos1 = 0,\n        pos2 = 0,\n        pos3 = 0,\n        pos4 = 0;\n    if (dragObj) {\n        // if present, the header is where you move the DIV from:\n        dragObj.onmousedown = dragMouseDown;\n    } else {\n        // otherwise, move the DIV from anywhere inside the DIV:\n        elmnt.onmousedown = dragMouseDown;\n    }\n\n    function dragMouseDown(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // get the mouse cursor position at startup:\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        document.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        document.onmousemove = elementDrag;\n    }\n\n    function elementDrag(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // calculate the new cursor position:\n        pos1 = pos3 - e.clientX;\n        pos2 = pos4 - e.clientY;\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        // set the element's new position:\n        elmnt.style.top = elmnt.offsetTop - pos2 + 'px';\n        elmnt.style.left = elmnt.offsetLeft - pos1 + 'px';\n    }\n\n    function closeDragElement() {\n        // stop moving when mouse button is released:\n        document.onmouseup = null;\n        document.onmousemove = null;\n    }\n}\n\n/**\n * Date Format: https://convertio.co/it/\n * @returns {string} date string format: DD-MM-YYYY-H_M_S\n */\nfunction getDataTimeString() {\n    const d = new Date();\n    const date = d.toISOString().split('T')[0];\n    const time = d.toTimeString().split(' ')[0];\n    return `${date}-${time}`;\n}\n\n/**\n * Convert bytes to KB-MB-GB-TB\n * @param {object} bytes to convert\n * @returns {string} converted size\n */\nfunction bytesToSize(bytes) {\n    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes == 0) return '0 Byte';\n    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n}\n\n/**\n * Handle peer audio volume\n * @param {object} data peer audio\n */\nfunction handlePeerVolume(data) {\n    let peer_id = data.peer_id;\n    let element = getId(peer_id + '_pitch_bar');\n    let remoteVideoWrap = getId(peer_id + '_videoWrap');\n    let volume = data.volume + 25; //for design purpose\n    if (!element) return;\n    if (volume > 50) {\n        element.style.backgroundColor = 'orange';\n    }\n    element.style.height = volume + '%';\n    remoteVideoWrap.classList.toggle('speaking');\n    setTimeout(function () {\n        element.style.backgroundColor = '#19bb5c';\n        element.style.height = '0%';\n        remoteVideoWrap.classList.toggle('speaking');\n    }, 700);\n}\n\n/**\n * Handle my audio volume\n * @param {object} data my audio\n */\nfunction handleMyVolume(data) {\n    let element = getId('myPitchBar');\n    let volume = data.volume + 25;\n    if (!element) return;\n    if (volume > 50) {\n        element.style.backgroundColor = 'orange';\n    }\n    element.style.height = volume + '%';\n    myVideoWrap.classList.toggle('speaking');\n    setTimeout(function () {\n        element.style.backgroundColor = '#19bb5c';\n        element.style.height = '0%';\n        myVideoWrap.classList.toggle('speaking');\n    }, 700);\n}\n\n/**\n * Basic user logging using https://sweetalert2.github.io\n * @param {string} type of popup\n * @param {string} message to popup\n * @param {integer} timer toast duration ms\n */\nfunction userLog(type, message, timer = 3000) {\n    switch (type) {\n        case 'warning':\n        case 'error':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: type,\n                title: type,\n                text: message,\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            playSound('alert');\n            break;\n        case 'info':\n        case 'success':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: type,\n                title: type,\n                text: message,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            break;\n        case 'success-html':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: 'success',\n                title: 'Success',\n                html: message,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            break;\n        case 'toast':\n            const Toast = Swal.mixin({\n                background: swalBackground,\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: timer,\n                timerProgressBar: true,\n            });\n            Toast.fire({\n                icon: 'info',\n                title: message,\n            });\n            break;\n        // ......\n        default:\n            alert(message);\n    }\n}\n\n/**\n * Message popup\n * @param {string} icon info, success, warning, error\n * @param {string} message to show\n * @param {string} position of the toast\n * @param {integer} timer ms before to hide\n */\nfunction msgPopup(icon, message, position, timer = 1000) {\n    const Toast = Swal.mixin({\n        background: swalBackground,\n        toast: true,\n        position: position,\n        showConfirmButton: false,\n        timer: timer,\n        timerProgressBar: true,\n    });\n    Toast.fire({\n        icon: icon,\n        title: message,\n    });\n}\n\n/**\n * https://notificationsounds.com/notification-sounds\n * @param {string} name audio to play\n */\nasync function playSound(name) {\n    if (!notifyBySound) return;\n    let sound = '../sounds/' + name + '.mp3';\n    let audioToPlay = new Audio(sound);\n    try {\n        audioToPlay.volume = 0.5;\n        await audioToPlay.play();\n    } catch (err) {\n        // console.error(\"Cannot play sound\", err);\n        // Automatic playback failed. (safari)\n        return;\n    }\n}\n\n/**\n * Open specified URL\n * @param {string} url to open\n * @param {boolean} blank if true opne url in the new tab\n */\nfunction openURL(url, blank = false) {\n    blank ? window.open(url, '_blank') : (window.location.href = url);\n}\n\n/**\n * Show-Hide all elements grp by class name\n * @param {string} className to toggle\n * @param {string} displayState of the element\n */\nfunction toggleClassElements(className, displayState) {\n    let elements = getEcN(className);\n    for (let i = 0; i < elements.length; i++) {\n        elements[i].style.display = displayState;\n    }\n}\n\n/**\n * Check if Tablet device\n * @param {object} userAgent info\n * @return {boolean} true/false\n */\nfunction isTablet(userAgent) {\n    return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(\n        userAgent,\n    );\n}\n\n/**\n * Check if IPad device\n * @param {object} userAgent\n * @return {boolean} true/false\n */\nfunction isIpad(userAgent) {\n    return /macintosh/.test(userAgent) && 'ontouchend' in document;\n}\n\n/**\n * Get Html element by Id\n * @param {string} id of the element\n * @returns {object} element\n */\nfunction getId(id) {\n    return document.getElementById(id);\n}\n\n/**\n * Get Html element by selector\n * @param {string} selector of the element\n * @returns {object} element\n */\nfunction getSl(selector) {\n    return document.querySelector(selector);\n}\n\n/**\n * Get Html element by class name\n * @param {string} className of the element\n * @returns {object} element\n */\nfunction getEcN(className) {\n    return document.getElementsByClassName(className);\n}\n\n/**\n * Get html element by name\n * @param {string} name\n * @returns element\n */\nfunction getName(name) {\n    return document.getElementsByName(name);\n}\n\n/**\n * Element style display\n * @param {object} elem\n * @param {boolean} yes true/false\n */\nfunction elemDisplay(elem, yes) {\n    elem.style.display = yes ? 'inline' : 'none';\n}\n", "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- https://github.com/mikecao/umami -->\n\n        <script\n            async\n            defer\n            data-website-id=\"a378bd09-212d-4801-94cc-9797b6a5f3f7\"\n            src=\"https://stats.mirotalk.org/umami.js\"\n        ></script>\n\n        <!-- Title and Icon -->\n\n        <title>MiroTalk WebRTC Video call, Chat Room & Screen Sharing.</title>\n        <link rel=\"shortcut icon\" href=\"../images/logo.svg\" />\n        <link rel=\"apple-touch-icon\" href=\"../images/logo.svg\" />\n\n        <!-- Meta Information -->\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <meta\n            name=\"viewport\"\n            content=\"width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"\n        />\n        <meta\n            name=\"description\"\n            content=\"MiroTalk powered by WebRTC, Real-time Simple Secure Fast video calls, chat and screen sharing capabilities in the browser, from your mobile or desktop.\"\n        />\n        <meta\n            name=\"keywords\"\n            content=\"webrtc, webrtc stun, webrtc turn, video meeting, video chat, multi video chat, peer to peer, p2p, zoom\"\n        />\n\n        <!-- https://ogp.me -->\n\n        <meta property=\"og:type\" content=\"app-webrtc\" />\n        <meta property=\"og:site_name\" content=\"MiroTalk\" />\n        <meta property=\"og:title\" content=\"Click the link to join this call.\" />\n        <meta property=\"og:description\" content=\"Free WebRTC browser-based video call.\" />\n        <meta property=\"og:image\" content=\"https://p2p.mirotalk.com/images/preview.png\" />\n        <meta property=\"og:url\" content=\"https://p2p.mirotalk.org\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"../images/favicon.png\" />\n\n        <!-- StyleSheet -->\n\n        <link rel=\"stylesheet\" href=\"../css/client.css\" />\n        <link rel=\"stylesheet\" href=\"../css/videoGrid.css\" />\n        <link rel=\"stylesheet\" href=\"../css/whiteboard.css\" />\n\n        <!-- https://cdnjs.com/libraries/font-awesome -->\n\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" />\n\n        <!-- https://animate.style 4 using for swal fadeIn-Out -->\n\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\" />\n    </head>\n\n    <body onload=\"initClientPeer()\">\n        <noscript>You need to enable JavaScript to run this app.</noscript>\n\n        <!-- just 4SEO Optimization -->\n\n        <div id=\"webRTCSeo\">\n            <h1>WebRTC</h1>\n        </div>\n\n        <!-- show this before to join -->\n\n        <div id=\"loadingDiv\" class=\"center pulsate\">\n            <h1>Loading</h1>\n            <img src=\"../images/loader.gif\" />\n            <pre>\nPlease allow the camera or microphone\naccess to use this app.\n            </pre>\n        </div>\n\n        <!-- init user devices -->\n\n        <div id=\"initUser\" class=\"init-user hidden\">\n            <!-- <p>Please allow the camera & microphone access to use this app.</p> -->\n            <video\n                id=\"initVideo\"\n                playsinline=\"true\"\n                autoplay=\"\"\n                class=\"mirror\"\n                poster=\"../images/loader.gif\"\n                style=\"object-fit: var(--videoObjFit)\"\n            ></video>\n            <button id=\"initAudioBtn\" class=\"fas fa-microphone\" onclick=\"handleAudio(event, true)\"></button>\n            <button id=\"initVideoBtn\" class=\"fas fa-video\" onclick=\"handleVideo(event, true)\"></button>\n            <select id=\"initVideoSelect\" class=\"form-select text-light bg-dark\"></select>\n            <select id=\"initMicrophoneSelect\" class=\"form-select text-light bg-dark\"></select>\n            <select id=\"initSpeakerSelect\" class=\"form-select text-light bg-dark\"></select>\n        </div>\n\n        <!-- Start buttons bar https://fontawesome.com/icons?d=gallery -->\n\n        <div id=\"buttonsBar\" class=\"fadein\">\n            <button id=\"shareRoomBtn\" class=\"fas fa-share-alt\"></button>\n            <button id=\"audioBtn\" class=\"fas fa-microphone\"></button>\n            <button id=\"videoBtn\" class=\"fas fa-video\"></button>\n            <button id=\"swapCameraBtn\" class=\"fas fa-camera-rotate\"></button>\n            <button id=\"screenShareBtn\" class=\"fas fa-desktop\"></button>\n            <button id=\"recordStreamBtn\" class=\"fas fa-record-vinyl\"></button>\n            <button id=\"fullScreenBtn\" class=\"fas fa-expand-alt\"></button>\n            <button id=\"chatRoomBtn\" class=\"fas fa-comment\"></button>\n            <button id=\"captionBtn\" class=\"fas fa-closed-captioning\"></button>\n            <button id=\"myHandBtn\" class=\"fas fa-hand-paper\"></button>\n            <button id=\"whiteboardBtn\" class=\"fas fa-chalkboard-teacher\"></button>\n            <button id=\"fileShareBtn\" class=\"fas fa-folder-open\"></button>\n            <button id=\"mySettingsBtn\" class=\"fas fa-cogs\"></button>\n            <button id=\"aboutBtn\" class=\"fas fa-question\"></button>\n            <button id=\"leaveRoomBtn\" class=\"fas fa-right-from-bracket\"></button>\n        </div>\n        <!-- End left buttons -->\n\n        <!-- Start chat room \n        https://codepen.io/sajadhsm/pen/odaBdd\n        https://getemoji.com\n        -->\n\n        <section id=\"msgerDraggable\" class=\"msger-draggable fadein\">\n            <section id=\"msger\" class=\"msger\">\n                <header id=\"msgerHeader\" class=\"msger-header\">\n                    <div class=\"msger-header-title\"><button id=\"msgerClose\" class=\"fas fa-times\"></button></div>\n                    <div class=\"msger-header-options\">\n                        <button id=\"msgerTheme\" class=\"fas fa-ghost\"></button>\n                        <button id=\"msgerSaveBtn\" class=\"fas fa-save\"></button>\n                        <button id=\"msgerClean\" class=\"fas fa-trash\"></button>\n                    </div>\n                </header>\n\n                <main id=\"msgerChat\" class=\"msger-chat\"></main>\n\n                <!-- Start emoji picker -->\n\n                <section id=\"msgerEmojiPicker\" class=\"hidden fadein\"></section>\n\n                <!-- End emoji picker -->\n\n                <div class=\"msger-inputarea\">\n                    <textarea\n                        rows=\"1\"\n                        cols=\"1\"\n                        id=\"msgerInput\"\n                        class=\"msger-input\"\n                        placeholder=\"\ud83d\udcac Write a message...\"\n                    ></textarea>\n                </div>\n\n                <div class=\"msger-input-buttons\">\n                    <button id=\"msgerEmojiBtn\" class=\"fas fa-smile\"></button>\n                    <button id=\"msgerMarkdownBtn\" class=\"fab fa-markdown\"></button>\n                    <button id=\"msgerShareFileBtn\" class=\"fas fa-paperclip\"></button>\n                    <button id=\"msgerVideoUrlBtn\" class=\"fab fa-youtube\"></button>\n                    <button id=\"msgerCPBtn\" class=\"fas fa-users\"></button>\n                    <button id=\"msgerCleanTextBtn\" class=\"fas fa-trash\"></button>\n                    <button id=\"msgerPasteBtn\" class=\"fas fa-paste\"></button>\n                    <label class=\"switch\">\n                        <input id=\"msgerShowChatOnMsg\" type=\"checkbox\" checked />\n                        <span class=\"slider round\"></span>\n                    </label>\n                    <button id=\"msgerSendBtn\" class=\"fas fa-paper-plane\"></button>\n                </div>\n            </section>\n\n            <!-- Start private msg -->\n\n            <section id=\"msgerCP\" class=\"center fadein\">\n                <section id=\"msgerCPSec\" class=\"msger\">\n                    <header id=\"msgerCPHeader\" class=\"msger-private-header\">\n                        <div class=\"msger-header-title\"><i class=\"fas fa-comment-alt\"></i> Send Private messages</div>\n                        <div class=\"msger-header-options\">\n                            <button id=\"msgerCPCloseBtn\" class=\"fas fa-times\"></button>\n                        </div>\n                    </header>\n                    <main id=\"msgerCPChat\" class=\"msger-chat\">\n                        <div class=\"search-container\">\n                            <input\n                                id=\"searchPeerBarName\"\n                                type=\"text\"\n                                placeholder=\" \ud83d\udd0d Search peer by name...\"\n                                name=\"search\"\n                                onkeyup=\"searchPeer()\"\n                            />\n                        </div>\n                        <br />\n                        <div id=\"msgerCPList\"></div>\n                    </main>\n                </section>\n            </section>\n\n            <!-- End private msg -->\n        </section>\n\n        <!-- End chat room -->\n\n        <!-- Start of caption section -->\n\n        <section id=\"captionDraggable\" class=\"msger-draggable fadein\">\n            <section id=\"caption\" class=\"msger\">\n                <header id=\"captionHeader\" class=\"msger-header\">\n                    <div class=\"msger-header-title\">\n                        <button id=\"captionClose\" class=\"fas fa-times\"></button>\n                    </div>\n                    <div class=\"msger-header-options\">\n                        <button id=\"captionTheme\" class=\"fas fa-ghost\"></button>\n                        <button id=\"captionSaveBtn\" class=\"fas fa-save\"></button>\n                        <button id=\"captionClean\" class=\"fas fa-trash\"></button>\n                    </div>\n                </header>\n\n                <main id=\"captionChat\" class=\"msger-chat\"></main>\n                <div class=\"msger-inputarea\">\n                    <button id=\"speechRecognitionIcon\" class=\"fas fa-microphone-alt\"></button>\n                    <select id=\"recognitionLanguage\"></select>\n                    <select id=\"recognitionDialect\"></select>\n                    <button type=\"button\" id=\"speechRecognitionStart\"><i class=\"fas fa-play\"></i>&nbsp;Start</button>\n                    <button type=\"button\" id=\"speechRecognitionStop\"><i class=\"fas fa-stop\"></i>&nbsp;Stop</button>\n                </div>\n            </section>\n        </section>\n\n        <!-- End of caption section -->\n\n        <!-- Start my settings -->\n\n        <section id=\"mySettings\" class=\"center fadein\">\n            <header id=\"mySettingsHeader\">\n                <button id=\"mySettingsCloseBtn\" class=\"fas fa-times\"></button>\n            </header>\n            <main>\n                <br />\n                <div class=\"tab\">\n                    <button id=\"tabDevicesBtn\" class=\"fas fa-cog tablinks\"></button>\n                    <button id=\"tabBandwidthBtn\" class=\"fas fa-wifi tablinks\"></button>\n                    <button id=\"tabRoomBtn\" class=\"fas fa-home tablinks\"></button>\n                    <button id=\"tabStylingBtn\" class=\"fas fa-palette tablinks\"></button>\n                    <button id=\"tabLanguagesBtn\" class=\"fas fa-globe tablinks\"></button>\n                </div>\n\n                <div id=\"tabDevices\" class=\"tabcontent\">\n                    <br />\n                    <div>\n                        <label for=\"videoSource\">Camera</label><br />\n                        <select id=\"videoSource\"></select>\n                    </div>\n                    <br />\n                    <div>\n                        <label for=\"audioSource\">Microphone</label><br />\n                        <select id=\"audioSource\"></select>\n                    </div>\n                    <br />\n                    <div>\n                        <label for=\"audioOutput\">Speaker</label><br />\n                        <select id=\"audioOutput\"></select>\n                    </div>\n                </div>\n\n                <div id=\"tabBandwidth\" class=\"tabcontent\">\n                    <br />\n                    <label for=\"videoQuality\">Video quality</label>\n                    <br />\n                    <select id=\"videoQuality\">\n                        <option value=\"default\">Default</option>\n                        <option value=\"qvgaVideo\">QVGA</option>\n                        <option value=\"vgaVideo\">VGA</option>\n                        <option value=\"hdVideo\">HD</option>\n                        <option value=\"fhdVideo\">FULL HD</option>\n                        <option value=\"2kVideo\">2k</option>\n                        <option value=\"4kVideo\">4K</option>\n                    </select>\n                    <br /><br />\n                    <label for=\"videoFps\">Camera fps</label>\n                    <br />\n                    <select id=\"videoFps\">\n                        <option value=\"60\">60 fps</option>\n                        <option value=\"30\">30 fps</option>\n                        <option value=\"25\">25 fps</option>\n                        <option value=\"20\">20 fps</option>\n                        <option value=\"15\">15 fps</option>\n                        <option value=\"10\">10 fps</option>\n                        <option value=\"5\">5 fps</option>\n                    </select>\n                    <div id=\"screenFpsDiv\">\n                        <br />\n                        <label for=\"screenFps\">Screen fps</label>\n                        <br />\n                        <select id=\"screenFps\">\n                            <option value=\"60\">60 fps</option>\n                            <option value=\"30\">30 fps</option>\n                            <option value=\"25\">25 fps</option>\n                            <option value=\"20\">20 fps</option>\n                            <option value=\"15\">15 fps</option>\n                            <option value=\"10\">10 fps</option>\n                            <option value=\"5\">5 fps</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div id=\"tabRoom\" class=\"tabcontent\">\n                    <br />\n                    <div>\n                        <label>My name</label><br />\n                        <input id=\"myPeerNameSet\" type=\"text\" placeholder=\"Change name...\" />&nbsp;&nbsp;\n                        <button id=\"myPeerNameSetBtn\"><i class=\"fas fa-user-edit\"></i>&nbsp;Change</button>\n                    </div>\n                    <div id=\"tabRoomParticipants\">\n                        <br />\n                        <label>Participants</label><br />\n                        <button id=\"muteEveryoneBtn\"><i class=\"fas fa-microphone\"></i>&nbsp;Mute everyone</button>\n                        <button id=\"hideEveryoneBtn\"><i class=\"fas fa-video\"></i>&nbsp;Hide everyone</button>\n                        <button id=\"ejectEveryoneBtn\">\n                            <i class=\"fas fa-right-from-bracket\"></i>&nbsp;Eject everyone\n                        </button>\n                    </div>\n                    <div id=\"tabRoomSecurity\">\n                        <br /><br />\n                        <label>Security</label><br />\n                        <button id=\"lockRoomBtn\"><i class=\"fas fa-lock-open\"></i>&nbsp;Lock room</button>\n                        <button id=\"unlockRoomBtn\"><i class=\"fas fa-lock\"></i>&nbsp;Unlock room</button>\n                    </div>\n                    <br /><br />\n                    <label>Sounds</label><br />\n                    <input id=\"switchSounds\" style=\"color: #fff\" class=\"toggle\" type=\"checkbox\" checked />\n                </div>\n\n                <div id=\"tabStyling\" class=\"tabcontent\">\n                    <br />\n                    <label for=\"mirotalkTheme\">Theme color</label>\n                    <br />\n                    <select id=\"mirotalkTheme\">\n                        <option value=\"dark\">\u26ab\ufe0f Dark</option>\n                        <option value=\"grey\">\u26aa\ufe0f Grey</option>\n                    </select>\n                    <br /><br />\n                    <label>Video fit:</label>\n                    <br />\n                    <select id=\"videoObjFitSelect\">\n                        <option value=\"fill\">Fill</option>\n                        <option value=\"contain\">Contain</option>\n                        <option value=\"cover\">Cover</option>\n                        <option value=\"scale-down\">Scale-down</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                    <br /><br />\n                    <label for=\"mirotalkBtnsBar\">Buttons bar</label>\n                    <br />\n                    <select id=\"mirotalkBtnsBar\">\n                        <option value=\"vertical\">Vertical</option>\n                        <option value=\"horizontal\">Horizontal</option>\n                    </select>\n                    <br /><br />\n                    <div id=\"pinUnpinGridDiv\">\n                        <label for=\"pinVideoPositionSelect\">Pin grid</label>\n                        <br />\n                        <select id=\"pinVideoPositionSelect\">\n                            <option value=\"vertical\">Vertical</option>\n                            <option value=\"horizontal\">Horizontal</option>\n                            <option value=\"top\">Top</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div id=\"tabLanguages\" class=\"tabcontent\">\n                    <br />\n                    <div id=\"google_translate_element\"></div>\n                </div>\n                <br />\n            </main>\n        </section>\n\n        <!-- End my settings -->\n\n        <!-- Start whiteboard -->\n\n        <section id=\"whiteboard\" class=\"hidden\">\n            <header id=\"whiteboardHeader\" class=\"whiteboard-header\">\n                <div id=\"whiteboardTitle\" class=\"whiteboard-header-title\">\n                    <button id=\"whiteboardCloseBtn\" class=\"fas fa-times\"></button>\n                </div>\n                <div class=\"whiteboard-header-options\">\n                    <button id=\"whiteboardGhostButton\" class=\"fas fa-circle-half-stroke\"></button>\n                    <input id=\"wbBackgroundColorEl\" class=\"whiteboardColorPicker\" type=\"color\" value=\"#000000\" />\n                    <input id=\"wbDrawingColorEl\" class=\"whiteboardColorPicker\" type=\"color\" value=\"#FFFFFF\" />\n                    <button id=\"whiteboardPencilBtn\" class=\"fas fa-pencil-alt\"></button>\n                    <button id=\"whiteboardObjectBtn\" class=\"fas fa-mouse-pointer\"></button>\n                    <button id=\"whiteboardUndoBtn\" class=\"fas fa-undo\"></button>\n                    <button id=\"whiteboardRedoBtn\" class=\"fas fa-redo\"></button>\n                    <button id=\"whiteboardImgFileBtn\" class=\"far fa-image\"></button>\n                    <button id=\"whiteboardImgUrlBtn\" class=\"fas fa-link\"></button>\n                    <button id=\"whiteboardTextBtn\" class=\"fas fa-spell-check\"></button>\n                    <button id=\"whiteboardLineBtn\" class=\"fas fa-slash\"></button>\n                    <button id=\"whiteboardRectBtn\" class=\"far fa-square\"></button>\n                    <button id=\"whiteboardCircleBtn\" class=\"far fa-circle\"></button>\n                    <button id=\"whiteboardSaveBtn\" class=\"fas fa-save\"></button>\n                    <button id=\"whiteboardEraserBtn\" class=\"fas fa-eraser\"></button>\n                    <button id=\"whiteboardCleanBtn\" class=\"fas fa-trash\"></button>\n                </div>\n            </header>\n            <main>\n                <canvas id=\"wbCanvas\"></canvas>\n            </main>\n        </section>\n\n        <!-- End whiteboard -->\n\n        <!-- Start File Send -->\n\n        <div id=\"sendFileDiv\" class=\"center fadein\">\n            <img id=\"imgShareSend\" src=\"../images/share.png\" alt=\"mirotalk-share-send\" class=\"center-img\" /><br />\n            <div id=\"sendFileInfo\"></div>\n            <div id=\"sendFilePercentage\"></div>\n            <progress id=\"sendProgress\" max=\"0\" value=\"0\"></progress>\n            <button id=\"sendAbortBtn\"><i class=\"fas fa-stop-circle\"></i>&nbsp; Abort</button>\n        </div>\n\n        <!-- End File Send -->\n\n        <!-- Start File Receive -->\n\n        <div id=\"receiveFileDiv\" class=\"center fadein\">\n            <img id=\"imgShareReceive\" src=\"../images/share.png\" alt=\"mirotalk-share-receive\" class=\"center-img\" /><br />\n            <div id=\"receiveFileInfo\"></div>\n            <div id=\"receiveFilePercentage\"></div>\n            <progress id=\"receiveProgress\" max=\"0\" value=\"0\"></progress>\n            <button id=\"receiveHideBtn\"><i class=\"fas fa-eye-slash\"></i>&nbsp; Hide</button>\n        </div>\n\n        <!-- Stop File Receive -->\n\n        <!-- Start video URL iframe -->\n\n        <div id=\"videoUrlCont\" class=\"center fadein\">\n            <div id=\"videoUrlHeader\">\n                <button id=\"videoUrlCloseBtn\" class=\"fas fa-times\"></button>\n            </div>\n            <br />\n            <iframe\n                id=\"videoUrlIframe\"\n                title=\"Video Url Player\"\n                src=\"\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n            ></iframe>\n        </div>\n\n        <!-- End Youtube Iframe -->\n\n        <!-- Start Video - Audio player -->\n\n        <div id=\"videoAudioUrlCont\" class=\"center fadein\">\n            <div id=\"videoAudioUrlHeader\">\n                <button id=\"videoAudioCloseBtn\" class=\"fas fa-times\"></button>\n            </div>\n            <br />\n            <video id=\"videoAudioUrlElement\" src=\"\" autoplay controls></video>\n        </div>\n\n        <!-- End Video - Audio player -->\n\n        <!-- Start Video container -->\n\n        <div id=\"videoPinMediaContainer\"></div>\n        <div id=\"videoMediaContainer\">\n            <!-- <div class=\"Camera\"></div> -->\n        </div>\n\n        <!-- End Video container -->\n\n        <!--\n        - JS scripts https://cdn.jsdelivr.net\n        \n        - https://webrtc.github.io/adapter/adapter-latest.js                (https://github.com/webrtcHacks/adapter)\n        - https://www.npmjs.com/package/marked                              (https://github.com/markedjs/marked)\n        - https://www.npmjs.com/package/detectrtc                           (https://github.com/muaz-khan/DetectRTC)\n        - https://www.npmjs.com/package/sweetalert2                         (https://github.com/sweetalert2/sweetalert2)\n        - https://www.npmjs.com/package/fabric                              (https://github.com/fabricjs/fabric.js)\n        - https://www.npmjs.com/package/qrious                              (https://github.com/neocotic/qrious)\n        - https://cdn.jsdelivr.net/npm/emoji-mart@latest/dist/browser.js    (https://github.com/missive/emoji-mart)\n        - https://www.npmjs.com/package/tippy.js                            (https://github.com/atomiks/tippyjs) \n        -->\n        <script defer src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/detectrtc@1.4.1/DetectRTC.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/fabric@5.3.0-browser/dist/fabric.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/emoji-mart@latest/dist/browser.js\"></script>\n        <script defer src=\"https://unpkg.com/@popperjs/core@2\"></script>\n        <script defer src=\"https://unpkg.com/tippy.js@6\"></script>\n        <script defer src=\"/socket.io/socket.io.js\"></script>\n        <script defer src=\"../js/localStorage.js\"></script>\n        <script defer src=\"../js/client.js\"></script>\n        <script defer src=\"../js/detectSpeaking.js\"></script>\n        <script defer src=\"../js/speechRecognition.js\"></script>\n        <script defer src=\"../js/videoGrid.js\"></script>\n\n        <!-- end of Js scripts -->\n\n        <!-- \n\t\tthe <video> and <audio> tags are all added and removed dynamically\n\t\tin 'onAddStream', 'setupLocalMedia', and 'removePeer'/'disconnect'\n\t\t-->\n\n        <!-- \n            Start Google Translate \n            https://www.w3schools.com/howto/howto_google_translate.asp\n        -->\n\n        <script>\n            function googleTranslateElementInit() {\n                new google.translate.TranslateElement({ pageLanguage: 'en' }, 'google_translate_element');\n            }\n        </script>\n        <script src=\"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\n\n        <!-- End Google Translate -->\n    </body>\n</html>\n"], "fixing_code": ["/*\n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\n\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\n\u2588\u2588\u2001     \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001   \u2588\u2588\u2001   \n\u2588\u2588\u2001     \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001   \n \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001  \n*/\n\n/**\n * MiroTalk P2P - Client component\n *\n * @link    GitHub: https://github.com/miroslavpejic85/mirotalk\n * @link    Official Live demo: https://p2p.mirotalk.com\n * @license For open source use: AGPLv3\n * @license For commercial use or closed source, contact us at license.mirotalk@gmail.com or purchase directly from CodeCanyon\n * @license CodeCanyon: https://codecanyon.net/item/mirotalk-p2p-webrtc-realtime-video-conferences/38376661\n * @author  Miroslav Pejic - miroslav.pejic.85@gmail.com\n * @version 1.0.2\n *\n */\n\n'use strict';\n\n// https://www.w3schools.com/js/js_strict.asp\n\nconst signalingServer = getSignalingServer();\nconst roomId = getRoomId();\nconst peerLoockupUrl = 'https://extreme-ip-lookup.com/json/?key=demo2'; // get your API Key at https://extreme-ip-lookup.com\nconst avatarApiUrl = 'https://eu.ui-avatars.com/api';\nconst welcomeImg = '../images/image-placeholder.png';\nconst shareUrlImg = '../images/image-placeholder.png';\nconst leaveRoomImg = '../images/leave-room.png';\nconst confirmImg = '../images/image-placeholder.png';\nconst fileSharingImg = '../images/share.png';\nconst roomLockedImg = '../images/locked.png';\nconst camOffImg = '../images/cam-off.png';\nconst audioOffImg = '../images/audio-off.png';\nconst deleteImg = '../images/delete.png';\nconst youtubeImg = '../images/youtube.png';\nconst messageImg = '../images/message.png';\nconst kickedOutImg = '../images/leave-room.png';\nconst audioGif = '../images/audio.gif';\nconst videoAudioShare = '../images/va-share.png';\nconst aboutImg = '../images/mirotalk-logo.png';\nconst imgFeedback = '../images/feedback.png';\nconst forbiddenImg = '../images/forbidden.png';\nconst avatarImg = '../images/mirotalk-logo.png';\nconst camMicOff = '../images/cam-mic-off.png';\n\n// nice free icon: https://www.iconfinder.com\n\nconst fileSharingInput = '*'; // allow all file extensions\n\nconst isWebRTCSupported = DetectRTC.isWebRTCSupported;\nconst isMobileDevice = DetectRTC.isMobileDevice;\nconst myBrowserName = DetectRTC.browser.name;\n\nconst wbImageInput = 'image/*';\nconst wbWidth = 1200;\nconst wbHeight = 600;\n\nconst chatInputEmoji = {\n    '<3': '\\u2764\\uFE0F',\n    '</3': '\\uD83D\\uDC94',\n    ':D': '\\uD83D\\uDE00',\n    ':)': '\\uD83D\\uDE03',\n    ';)': '\\uD83D\\uDE09',\n    ':(': '\\uD83D\\uDE12',\n    ':p': '\\uD83D\\uDE1B',\n    ';p': '\\uD83D\\uDE1C',\n    \":'(\": '\\uD83D\\uDE22',\n    ':+1:': '\\uD83D\\uDC4D',\n}; // https://github.com/wooorm/gemoji/blob/main/support.md\n\nconst className = {\n    user: 'fas fa-user',\n    clock: 'fas fa-clock',\n    audioOn: 'fas fa-microphone',\n    audioOff: 'fas fa-microphone-slash',\n    videoOn: 'fas fa-video',\n    videoOff: 'fas fa-video-slash',\n    screenOn: 'fas fa-desktop',\n    screenOff: 'fas fa-stop-circle',\n    handPulsate: 'fas fa-hand-paper pulsate',\n    privacy: 'far fa-circle',\n    snapShot: 'fas fa-camera-retro',\n    pinUnpin: 'fas fa-map-pin',\n    fullScreen: 'fas fa-expand',\n    fsOn: 'fas fa-compress-alt',\n    fsOff: 'fas fa-expand-alt',\n    msgPrivate: 'fas fa-paper-plane',\n    shareFile: 'fas fa-upload',\n    shareVideoAudio: 'fab fa-youtube',\n    kickOut: 'fas fa-sign-out-alt',\n    chatOn: 'fas fa-comment',\n    chatOff: 'fas fa-comment-slash',\n    ghost: 'fas fa-ghost',\n    undo: 'fas fa-undo',\n    captionOn: 'fas fa-closed-captioning',\n    trash: 'fas fa-trash',\n    copy: 'fas fa-copy',\n    heart: 'fas fa-heart',\n};\n// https://fontawesome.com/search?o=r&m=free\n\nconst myRoomUrl = window.location.href;\n\n// Show desired buttons captionBtn, showSwapCameraBtn, showScreenShareBtn, showFullScreenBtn -> (auto-detected)\nconst buttons = {\n    main: {\n        showShareRoomBtn: true,\n        showAudioBtn: true,\n        showVideoBtn: true,\n        showScreenBtn: true,\n        showRecordStreamBtn: true,\n        showChatRoomBtn: true,\n        showCaptionRoomBtn: true,\n        showMyHandBtn: true,\n        showWhiteboardBtn: true,\n        showFileShareBtn: true,\n        showMySettingsBtn: true,\n        showAboutBtn: true, // Please keep me always true, Thank you!\n    },\n    chat: {\n        showSaveMessageBtn: true,\n        showMarkDownBtn: true,\n        showFileShareBtn: true,\n        showShareVideoAudioBtn: true,\n        showParticipantsBtn: true,\n    },\n    settings: {\n        showTabRoomParticipants: true,\n        showTabRoomSecurity: true,\n        showMuteEveryoneBtn: true,\n        showHideEveryoneBtn: true,\n        showEjectEveryoneBtn: true,\n        showLockRoomBtn: true,\n        showUnlockRoomBtn: true,\n    },\n    remote: {\n        showAudioVolume: true,\n        audioBtnClickAllowed: true,\n        videoBtnClickAllowed: true,\n        showKickOutBtn: true,\n        showSnapShotBtn: true,\n        showFileShareBtn: true,\n        showShareVideoAudioBtn: true,\n        showPrivateMessageBtn: true,\n    },\n    local: {\n        showSnapShotBtn: true,\n        showVideoCircleBtn: true,\n    },\n};\n\nconst isRulesActive = true; // Presenter can do anything, guest is slightly moderate, if false no Rules for the room.\n\nconst forceCamMaxResolutionAndFps = false; // This force the webCam to max resolution, up to 4k and 60fps (very high bandwidth are required) if false, you can set it from settings\n\nconst userLimitsActive = false; // Limit users per room\n\nconst usersCountLimit = 2; // Limit 2 users per room if userLimitsActive true\n\nconst useAvatarApi = true; // if false the cam-Off avatar = avatarImg\n\nlet notifyBySound = true; // turn on - off sound notifications\n\nlet thisRoomPassword = null;\n\nlet isRoomLocked = false;\n\nlet isPresenter = false; // Who init the room (aka first peer joined)\n\nlet needToEnableMyAudio = false; // On screen sharing end, check if need to enable my audio\n\nlet initEnumerateDevicesFailed = false; // Check if user webcam and audio init is failed\n\nlet isVideoPrivacyActive = false; // Video circle for privacy\n\nlet surveyActive = true; // when leaving the room give a feedback, if false will be redirected to newcall page\n\nlet surveyURL = 'https://www.questionpro.com/t/AUs7VZq00L';\n\nlet myPeerId; // socket.id\nlet peerInfo = {}; // Some peer info\nlet userAgent; // User agent info\n\nlet isTabletDevice = false;\nlet isIPadDevice = false;\nlet isVideoFullScreenSupported = true;\n\n// video cam - screen max frame rate\nlet videoMaxFrameRate = 30;\nlet screenMaxFrameRate = 30;\n\nlet videoQualitySelectedIndex = 0; // default\n\nlet leftChatAvatar;\nlet rightChatAvatar;\nlet chatMessagesId = 0;\n\nlet callStartTime;\nlet callElapsedTime;\nlet recStartTime;\nlet recElapsedTime;\nlet mirotalkTheme = 'dark'; // dark - grey ...\nlet mirotalkBtnsBar = 'vertical'; // vertical - horizontal\nlet pinVideoPositionSelect;\nlet swalBackground = 'rgba(0, 0, 0, 0.7)'; // black - #16171b - transparent ...\nlet peerGeo;\nlet myPeerName = getPeerName();\nlet isScreenEnabled = getScreenEnabled();\nlet isScreenSharingSupported = false;\nlet isCamMirrored = false;\nlet notify = getNotify();\nlet useAudio = true;\nlet useVideo = true;\nlet isEnumerateVideoDevices = false;\nlet isEnumerateAudioDevices = false;\nlet camera = 'user'; // user = front-facing camera on a smartphone. | environment = the back camera on a smartphone.\nlet roomLocked = false;\nlet myVideoChange = false;\nlet myHandStatus = false;\nlet myVideoStatus = false;\nlet myAudioStatus = false;\nlet myScreenStatus = false;\nlet pitchDetectionStatus = false;\nlet audioContext;\nlet mediaStreamSource;\nlet meter;\nlet isScreenStreaming = false;\nlet showChatOnMessage = true;\nlet isChatRoomVisible = false;\nlet isCaptionBoxVisible = false;\nlet isChatEmojiVisible = false;\nlet isChatMarkdownOn = false;\nlet isButtonsVisible = false;\nlet isButtonsBarOver = false;\nlet isMySettingsVisible = false;\nlet isVideoOnFullScreen = false;\nlet isDocumentOnFullScreen = false;\nlet isWhiteboardFs = false;\nlet isVideoUrlPlayerOpen = false;\nlet isVideoPinned = false;\nlet pinnedVideoPlayerId = null;\nlet isRecScreenStream = false;\nlet isChatPasteTxt = false;\nlet needToCreateOffer = false; // after session description answer\nlet signalingSocket; // socket.io connection to our webserver\nlet initStream; // initial webcam stream\nlet localMediaStream; // my microphone / webcam\nlet remoteMediaStream; // peers microphone / webcam\nlet recScreenStream; // recorded screen stream\nlet remoteMediaControls = false; // enable - disable peers video player controls (default false)\nlet peerConnection = null; // RTCPeerConnection\nlet peerConnections = {}; // keep track of our peer connections, indexed by peer_id == socket.io id\nlet chatDataChannels = {}; // keep track of our peer chat data channels\nlet fileDataChannels = {}; // keep track of our peer file sharing data channels\nlet peerMediaElements = {}; // keep track of our peer <video> tags, indexed by peer_id\nlet chatMessages = []; // collect chat messages to save it later if want\nlet allPeers = {}; // keep track of all peers in the room, indexed by peer_id == socket.io id\nlet transcripts = []; //collect all the transcripts to save it later if you need\nlet backupIceServers = [{ urls: 'stun:stun.l.google.com:19302' }]; // backup iceServers\nlet countTime; // conference count time\n// init audio-video\nlet initAudioBtn;\nlet initVideoBtn;\n// init Devices select\nlet initVideo;\nlet initVideoSelect;\nlet initMicrophoneSelect;\nlet initSpeakerSelect;\n// buttons bar\nlet buttonsBar;\nlet shareRoomBtn;\nlet audioBtn;\nlet videoBtn;\nlet swapCameraBtn;\nlet screenShareBtn;\nlet recordStreamBtn;\nlet fullScreenBtn;\nlet chatRoomBtn;\nlet captionBtn;\nlet myHandBtn;\nlet whiteboardBtn;\nlet fileShareBtn;\nlet mySettingsBtn;\nlet aboutBtn;\nlet leaveRoomBtn;\n// chat room elements\nlet msgerDraggable;\nlet msgerHeader;\nlet msgerTheme;\nlet msgerCPBtn;\nlet msgerClean;\nlet msgerSaveBtn;\nlet msgerClose;\nlet msgerChat;\nlet msgerEmojiBtn;\nlet msgerMarkdownBtn;\nlet msgerShareFileBtn;\nlet msgerInput;\nlet msgerCleanTextBtn;\nlet msgerPasteBtn;\nlet msgerShowChatOnMsg;\nlet msgerSendBtn;\n//caption section\nlet captionDraggable;\nlet captionHeader;\nlet captionTheme;\nlet captionClean;\nlet captionSaveBtn;\nlet captionClose;\nlet captionChat;\n// chat room connected peers\nlet msgerCP;\nlet msgerCPHeader;\nlet msgerCPCloseBtn;\nlet msgerCPList;\n// chat room emoji picker\nlet msgerEmojiPicker;\n// my settings\nlet mySettings;\nlet mySettingsHeader;\nlet tabDevicesBtn;\nlet tabBandwidthBtn;\nlet tabRoomBtn;\nlet tabStylingBtn;\nlet tabLanguagesBtn;\nlet mySettingsCloseBtn;\nlet myPeerNameSet;\nlet myPeerNameSetBtn;\nlet switchSounds;\nlet audioInputSelect;\nlet audioOutputSelect;\nlet videoSelect;\nlet videoQualitySelect;\nlet videoFpsSelect;\nlet screenFpsSelect;\nlet themeSelect;\nlet videoObjFitSelect;\n\nlet btnsBarSelect;\nlet selectors;\nlet tabRoomParticipants;\nlet tabRoomSecurity;\n// my video element\nlet myVideo;\nlet myVideoWrap;\nlet myVideoAvatarImage;\n// name && hand video audio status\nlet myVideoParagraph;\nlet myHandStatusIcon;\nlet myVideoStatusIcon;\nlet myAudioStatusIcon;\n// record Media Stream\nlet mediaRecorder;\nlet recordedBlobs;\nlet isStreamRecording = false;\n// whiteboard init\nlet whiteboard;\nlet whiteboardHeader;\nlet wbDrawingColorEl;\nlet whiteboardGhostButton;\nlet wbBackgroundColorEl;\nlet whiteboardPencilBtn;\nlet whiteboardObjectBtn;\nlet whiteboardUndoBtn;\nlet whiteboardRedoBtn;\nlet whiteboardImgFileBtn;\nlet whiteboardImgUrlBtn;\nlet whiteboardTextBtn;\nlet whiteboardLineBtn;\nlet whiteboardRectBtn;\nlet whiteboardCircleBtn;\nlet whiteboardSaveBtn;\nlet whiteboardEraserBtn;\nlet whiteboardCleanBtn;\nlet whiteboardCloseBtn;\n// whiteboard settings\nlet wbCanvas = null;\nlet wbIsDrawing = false;\nlet wbIsOpen = false;\nlet wbIsRedoing = false;\nlet wbIsEraser = false;\nlet wbIsBgTransparent = false;\nlet wbPop = [];\n// room actions btns\nlet muteEveryoneBtn;\nlet hideEveryoneBtn;\nlet ejectEveryoneBtn;\nlet lockRoomBtn;\nlet unlockRoomBtn;\n// file transfer settings\nlet fileToSend;\nlet fileReader;\nlet receiveBuffer = [];\nlet receivedSize = 0;\nlet incomingFileInfo;\nlet incomingFileData;\n// send form\nlet sendFileDiv;\nlet sendFileInfo;\nlet sendProgress;\nlet sendAbortBtn;\nlet sendInProgress = false;\n// receive form\nlet receiveFileDiv;\nlet receiveFileInfo;\nlet receiveProgress;\nlet receiveHideBtn;\nlet receiveFilePercentage;\nlet receiveInProgress = false;\n// MTU 1kb to prevent drop.\n// const chunkSize = 1024;\nconst chunkSize = 1024 * 16; // 16kb/s\n// video URL player\nlet videoUrlCont;\nlet videoAudioUrlCont;\nlet videoUrlHeader;\nlet videoAudioUrlHeader;\nlet videoUrlCloseBtn;\nlet videoAudioCloseBtn;\nlet videoUrlIframe;\nlet videoAudioUrlElement;\n// speech recognition\nlet speechRecognitionIcon;\nlet speechRecognitionStart;\nlet speechRecognitionStop;\n\n// Local Storage class\nlet lS = new LocalStorage();\n\n/**\n * Load all Html elements by Id\n */\nfunction getHtmlElementsById() {\n    countTime = getId('countTime');\n    // Init devices select\n    initVideo = getId('initVideo');\n    initVideoSelect = getId('initVideoSelect');\n    initMicrophoneSelect = getId('initMicrophoneSelect');\n    initSpeakerSelect = getId('initSpeakerSelect');\n    // my video\n    myVideo = getId('myVideo');\n    myVideoWrap = getId('myVideoWrap');\n    myVideoAvatarImage = getId('myVideoAvatarImage');\n    // buttons Bar\n    buttonsBar = getId('buttonsBar');\n    shareRoomBtn = getId('shareRoomBtn');\n    audioBtn = getId('audioBtn');\n    videoBtn = getId('videoBtn');\n    swapCameraBtn = getId('swapCameraBtn');\n    screenShareBtn = getId('screenShareBtn');\n    recordStreamBtn = getId('recordStreamBtn');\n    fullScreenBtn = getId('fullScreenBtn');\n    captionBtn = getId('captionBtn');\n    chatRoomBtn = getId('chatRoomBtn');\n    whiteboardBtn = getId('whiteboardBtn');\n    fileShareBtn = getId('fileShareBtn');\n    myHandBtn = getId('myHandBtn');\n    mySettingsBtn = getId('mySettingsBtn');\n    aboutBtn = getId('aboutBtn');\n    leaveRoomBtn = getId('leaveRoomBtn');\n    // chat Room elements\n    msgerDraggable = getId('msgerDraggable');\n    msgerHeader = getId('msgerHeader');\n    msgerTheme = getId('msgerTheme');\n    msgerCPBtn = getId('msgerCPBtn');\n    msgerClean = getId('msgerClean');\n    msgerSaveBtn = getId('msgerSaveBtn');\n    msgerClose = getId('msgerClose');\n    msgerChat = getId('msgerChat');\n    msgerEmojiBtn = getId('msgerEmojiBtn');\n    msgerMarkdownBtn = getId('msgerMarkdownBtn');\n    msgerShareFileBtn = getId('msgerShareFileBtn');\n    msgerInput = getId('msgerInput');\n    msgerCleanTextBtn = getId('msgerCleanTextBtn');\n    msgerPasteBtn = getId('msgerPasteBtn');\n    msgerShowChatOnMsg = getId('msgerShowChatOnMsg');\n    msgerSendBtn = getId('msgerSendBtn');\n    // chat room connected peers\n    msgerCP = getId('msgerCP');\n    msgerCPHeader = getId('msgerCPHeader');\n    msgerCPCloseBtn = getId('msgerCPCloseBtn');\n    msgerCPList = getId('msgerCPList');\n    // chat room emoji picker\n    msgerEmojiPicker = getId('msgerEmojiPicker');\n    //caption box elements\n    captionDraggable = getId('captionDraggable');\n    captionHeader = getId('captionHeader');\n    captionTheme = getId('captionTheme');\n    captionClean = getId('captionClean');\n    captionSaveBtn = getId('captionSaveBtn');\n    captionClose = getId('captionClose');\n    captionChat = getId('captionChat');\n    // my settings\n    mySettings = getId('mySettings');\n    mySettingsHeader = getId('mySettingsHeader');\n    tabDevicesBtn = getId('tabDevicesBtn');\n    tabBandwidthBtn = getId('tabBandwidthBtn');\n    tabRoomBtn = getId('tabRoomBtn');\n    tabStylingBtn = getId('tabStylingBtn');\n    tabLanguagesBtn = getId('tabLanguagesBtn');\n    mySettingsCloseBtn = getId('mySettingsCloseBtn');\n    myPeerNameSet = getId('myPeerNameSet');\n    myPeerNameSetBtn = getId('myPeerNameSetBtn');\n    switchSounds = getId('switchSounds');\n    audioInputSelect = getId('audioSource');\n    audioOutputSelect = getId('audioOutput');\n    videoSelect = getId('videoSource');\n    videoQualitySelect = getId('videoQuality');\n    videoFpsSelect = getId('videoFps');\n    screenFpsSelect = getId('screenFps');\n    themeSelect = getId('mirotalkTheme');\n    videoObjFitSelect = getId('videoObjFitSelect');\n    btnsBarSelect = getId('mirotalkBtnsBar');\n    pinVideoPositionSelect = getId('pinVideoPositionSelect');\n    tabRoomParticipants = getId('tabRoomParticipants');\n    tabRoomSecurity = getId('tabRoomSecurity');\n    // my conference name, hand, video - audio status\n    myVideoParagraph = getId('myVideoParagraph');\n    myHandStatusIcon = getId('myHandStatusIcon');\n    myVideoStatusIcon = getId('myVideoStatusIcon');\n    myAudioStatusIcon = getId('myAudioStatusIcon');\n    // my whiteboard\n    whiteboard = getId('whiteboard');\n    whiteboardHeader = getId('whiteboardHeader');\n    wbDrawingColorEl = getId('wbDrawingColorEl');\n    whiteboardGhostButton = getId('whiteboardGhostButton');\n    wbBackgroundColorEl = getId('wbBackgroundColorEl');\n    whiteboardPencilBtn = getId('whiteboardPencilBtn');\n    whiteboardObjectBtn = getId('whiteboardObjectBtn');\n    whiteboardUndoBtn = getId('whiteboardUndoBtn');\n    whiteboardRedoBtn = getId('whiteboardRedoBtn');\n    whiteboardImgFileBtn = getId('whiteboardImgFileBtn');\n    whiteboardImgUrlBtn = getId('whiteboardImgUrlBtn');\n    whiteboardTextBtn = getId('whiteboardTextBtn');\n    whiteboardLineBtn = getId('whiteboardLineBtn');\n    whiteboardRectBtn = getId('whiteboardRectBtn');\n    whiteboardCircleBtn = getId('whiteboardCircleBtn');\n    whiteboardSaveBtn = getId('whiteboardSaveBtn');\n    whiteboardEraserBtn = getId('whiteboardEraserBtn');\n    whiteboardCleanBtn = getId('whiteboardCleanBtn');\n    whiteboardCloseBtn = getId('whiteboardCloseBtn');\n    // room actions buttons\n    muteEveryoneBtn = getId('muteEveryoneBtn');\n    hideEveryoneBtn = getId('hideEveryoneBtn');\n    ejectEveryoneBtn = getId('ejectEveryoneBtn');\n    lockRoomBtn = getId('lockRoomBtn');\n    unlockRoomBtn = getId('unlockRoomBtn');\n    // file send progress\n    sendFileDiv = getId('sendFileDiv');\n    sendFileInfo = getId('sendFileInfo');\n    sendProgress = getId('sendProgress');\n    sendAbortBtn = getId('sendAbortBtn');\n    // file receive progress\n    receiveFileDiv = getId('receiveFileDiv');\n    receiveFileInfo = getId('receiveFileInfo');\n    receiveProgress = getId('receiveProgress');\n    receiveHideBtn = getId('receiveHideBtn');\n    receiveFilePercentage = getId('receiveFilePercentage');\n    // video url player\n    videoUrlCont = getId('videoUrlCont');\n    videoAudioUrlCont = getId('videoAudioUrlCont');\n    videoUrlHeader = getId('videoUrlHeader');\n    videoAudioUrlHeader = getId('videoAudioUrlHeader');\n    videoUrlCloseBtn = getId('videoUrlCloseBtn');\n    videoAudioCloseBtn = getId('videoAudioCloseBtn');\n    videoUrlIframe = getId('videoUrlIframe');\n    videoAudioUrlElement = getId('videoAudioUrlElement');\n    // speech recognition\n    speechRecognitionIcon = getId('speechRecognitionIcon');\n    speechRecognitionStart = getId('speechRecognitionStart');\n    speechRecognitionStop = getId('speechRecognitionStop');\n}\n\n/**\n * Using tippy aka very nice tooltip!\n * https://atomiks.github.io/tippyjs/\n */\nfunction setButtonsToolTip() {\n    // not need for mobile\n    if (isMobileDevice) return;\n    // main buttons\n    setTippy(shareRoomBtn, 'Invite others to join', 'right-start');\n    setTippy(audioBtn, 'Stop the audio', 'right-start');\n    setTippy(videoBtn, 'Stop the video', 'right-start');\n    setTippy(screenShareBtn, 'Start screen sharing', 'right-start');\n    setTippy(recordStreamBtn, 'Start recording', 'right-start');\n    setTippy(fullScreenBtn, 'View full screen', 'right-start');\n    setTippy(chatRoomBtn, 'Open the chat', 'right-start');\n    setTippy(captionBtn, 'Open the caption', 'right-start');\n    setTippy(myHandBtn, 'Raise your hand', 'right-start');\n    setTippy(whiteboardBtn, 'Open the whiteboard', 'right-start');\n    setTippy(fileShareBtn, 'Share file', 'right-start');\n    setTippy(mySettingsBtn, 'Open settings', 'right-start');\n    setTippy(aboutBtn, 'About this project', 'right-start');\n    setTippy(leaveRoomBtn, 'Leave this room', 'right-start');\n    // chat room buttons\n    setTippy(msgerTheme, 'Ghost theme', 'top');\n    setTippy(msgerCPBtn, 'Private messages', 'top');\n    setTippy(msgerClean, 'Clean the messages', 'top');\n    setTippy(msgerSaveBtn, 'Save the messages', 'top');\n    setTippy(msgerClose, 'Close', 'right');\n    setTippy(msgerEmojiBtn, 'Emoji', 'top');\n    setTippy(msgerMarkdownBtn, 'Markdown', 'top');\n    setTippy(msgerShareFileBtn, 'Share file', 'top');\n    setTippy(msgerCleanTextBtn, 'Clean', 'top');\n    setTippy(msgerPasteBtn, 'Paste', 'top');\n    setTippy(msgerShowChatOnMsg, \"Show me when I'm receive a new message\", 'top');\n    setTippy(msgerSendBtn, 'Send', 'top');\n    // chat participants buttons\n    setTippy(msgerCPCloseBtn, 'Close', 'left');\n    // caption buttons\n    setTippy(captionClose, 'Close', 'right');\n    setTippy(captionTheme, 'Ghost theme', 'top');\n    setTippy(captionClean, 'Clean the messages', 'top');\n    setTippy(captionSaveBtn, 'Save the messages', 'top');\n    // settings\n    setTippy(mySettingsCloseBtn, 'Close', 'right');\n    setTippy(myPeerNameSetBtn, 'Change name', 'top');\n    // tab btns\n    setTippy(tabDevicesBtn, 'Devices', 'top');\n    setTippy(tabBandwidthBtn, 'Bandwidth', 'top');\n    setTippy(tabRoomBtn, 'Room', 'top');\n    setTippy(tabStylingBtn, 'Styling', 'top');\n    setTippy(tabLanguagesBtn, 'Languages', 'top');\n    // whiteboard btns\n    setTippy(wbDrawingColorEl, 'Drawing color', 'bottom');\n    setTippy(whiteboardGhostButton, 'Toggle transparent background', 'bottom');\n    setTippy(wbBackgroundColorEl, 'Background color', 'bottom');\n    setTippy(whiteboardPencilBtn, 'Drawing mode', 'bottom');\n    setTippy(whiteboardObjectBtn, 'Object mode', 'bottom');\n    setTippy(whiteboardUndoBtn, 'Undo', 'bottom');\n    setTippy(whiteboardRedoBtn, 'Redo', 'bottom');\n    setTippy(whiteboardImgFileBtn, 'Add image from file', 'bottom');\n    setTippy(whiteboardImgUrlBtn, 'Add image from URL', 'bottom');\n    setTippy(whiteboardTextBtn, 'Add the text', 'bottom');\n    setTippy(whiteboardLineBtn, 'Add the line', 'bottom');\n    setTippy(whiteboardRectBtn, 'Add the rectangle', 'bottom');\n    setTippy(whiteboardCircleBtn, 'Add the circle', 'bottom');\n    setTippy(whiteboardSaveBtn, 'Save the board', 'bottom');\n    setTippy(whiteboardEraserBtn, 'Erase the object', 'bottom');\n    setTippy(whiteboardCleanBtn, 'Clean the board', 'bottom');\n    setTippy(whiteboardCloseBtn, 'Close', 'right');\n    // room actions btn\n    // setTippy(muteEveryoneBtn, 'Mute everyone except yourself', 'top');\n    // setTippy(hideEveryoneBtn, 'Hide everyone except yourself', 'top');\n    // setTippy(ejectEveryoneBtn, 'Eject everyone except yourself', 'top');\n    // Suspend/Hide File transfer btn\n    setTippy(sendAbortBtn, 'Abort file transfer', 'right-start');\n    setTippy(receiveHideBtn, 'Hide file transfer', 'right-start');\n    // video URL player\n    setTippy(videoUrlCloseBtn, 'Close the video player', 'right-start');\n    setTippy(videoAudioCloseBtn, 'Close the video player', 'right-start');\n    setTippy(msgerVideoUrlBtn, 'Share a video or audio to all participants', 'top');\n}\n\n/**\n * Set nice tooltip to element\n * @param {object} elem element\n * @param {string} content message to popup\n * @param {string} placement position\n */\nfunction setTippy(elem, content, placement) {\n    if (isMobileDevice) return;\n    tippy(elem, {\n        content: content,\n        placement: placement,\n    });\n}\n\n/**\n * Get peer info using DetecRTC\n * https://github.com/muaz-khan/DetectRTC\n * @returns {object} peer info\n */\nfunction getPeerInfo() {\n    return {\n        detectRTCversion: DetectRTC.version,\n        isWebRTCSupported: DetectRTC.isWebRTCSupported,\n        isDesktopDevice: !DetectRTC.isMobileDevice && !isTabletDevice && !isIPadDevice,\n        isMobileDevice: DetectRTC.isMobileDevice,\n        isTabletDevice: isTabletDevice,\n        isIPadDevice: isIPadDevice,\n        osName: DetectRTC.osName,\n        osVersion: DetectRTC.osVersion,\n        browserName: DetectRTC.browser.name,\n        browserVersion: DetectRTC.browser.version,\n    };\n}\n\n/**\n * Get approximative peer geolocation\n * Get your API Key at https://extreme-ip-lookup.com\n */\nasync function getPeerGeoLocation() {\n    console.log('07. Get peer geo location');\n    fetch(peerLoockupUrl)\n        .then((res) => res.json())\n        .then((outJson) => {\n            peerGeo = outJson;\n        })\n        .catch((err) => console.warn(err));\n}\n\n/**\n * Get Signaling server URL\n * @returns {string} Signaling server URL\n */\nfunction getSignalingServer() {\n    console.log('00 Location', window.location);\n    return window.location.protocol + '//' + window.location.hostname;\n}\n\n/**\n * Generate random Room id if not set\n * @returns {string} Room Id\n */\nfunction getRoomId() {\n    // chek if passed as params /join?room=id\n    let qs = new URLSearchParams(window.location.search);\n    let queryRoomId = qs.get('room');\n\n    // skip /join/\n    let roomId = queryRoomId ? queryRoomId : window.location.pathname.substring(6);\n\n    // if not specified room id, create one random\n    if (roomId == '') {\n        roomId = makeId(20);\n        const newUrl = signalingServer + '/join/' + roomId;\n        window.history.pushState({ url: newUrl }, roomId, newUrl);\n    }\n    return roomId;\n}\n\n/**\n * Generate random Id\n * @param {integer} length\n * @returns {string} random id\n */\nfunction makeId(length) {\n    let result = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n/**\n * Check if notify is set\n * @returns {boolean} true/false (default true)\n */\nfunction getNotify() {\n    let qs = new URLSearchParams(window.location.search);\n    let notify = qs.get('notify');\n    if (notify) {\n        let queryNotify = notify === '1' || notify === 'true';\n        if (queryNotify != null) return queryNotify;\n    }\n    return true;\n}\n\n/**\n * Check if peer name is set\n * @returns {string} Peer Name\n */\nfunction getPeerName() {\n    let qs = new URLSearchParams(window.location.search);\n    return qs.get('name');\n}\n\n/**\n * Is screen enabled on join room\n * @returns {boolean} true/false\n */\nfunction getScreenEnabled() {\n    let qs = new URLSearchParams(window.location.search);\n    let screen = qs.get('screen');\n    if (screen) {\n        screen = screen.toLowerCase();\n        let queryPeerScreen = screen === '1' || screen === 'true';\n        return queryPeerScreen;\n    }\n    return false;\n}\n\n/**\n * Check if there is peer connections\n * @returns {boolean} true/false\n */\nfunction thereIsPeerConnections() {\n    if (Object.keys(peerConnections).length === 0) return false;\n    return true;\n}\n\n/**\n * Count the peer connections\n * @returns peer connections count\n */\nfunction countPeerConnections() {\n    return Object.keys(peerConnections).length;\n}\n\n/**\n * On body load Get started\n */\nfunction initClientPeer() {\n    if (!isWebRTCSupported) {\n        return userLog('error', 'This browser seems not supported WebRTC!');\n    }\n\n    userAgent = navigator.userAgent.toLowerCase();\n\n    isTabletDevice = isTablet(userAgent);\n    isIPadDevice = isIpad(userAgent);\n    peerInfo = getPeerInfo();\n\n    // check if video Full screen supported on default true\n    if (peerInfo.isMobileDevice && peerInfo.osName === 'iOS') {\n        isVideoFullScreenSupported = false;\n    }\n\n    console.log('01. Connecting to signaling server');\n\n    // Disable the HTTP long-polling transport\n    signalingSocket = io({ transports: ['websocket'] });\n\n    const transport = signalingSocket.io.engine.transport.name; // in most cases, \"polling\"\n    console.log('02. Connection transport', transport);\n\n    // Check upgrade transport\n    signalingSocket.io.engine.on('upgrade', () => {\n        const upgradedTransport = signalingSocket.io.engine.transport.name; // in most cases, \"websocket\"\n        console.log('Connection upgraded transport', upgradedTransport);\n    });\n\n    // on receiving data from signaling server...\n    signalingSocket.on('connect', handleConnect);\n    signalingSocket.on('roomIsLocked', handleUnlockTheRoom);\n    signalingSocket.on('roomAction', handleRoomAction);\n    signalingSocket.on('addPeer', handleAddPeer);\n    signalingSocket.on('serverInfo', handleServerInfo);\n    signalingSocket.on('sessionDescription', handleSessionDescription);\n    signalingSocket.on('iceCandidate', handleIceCandidate);\n    signalingSocket.on('peerName', handlePeerName);\n    signalingSocket.on('peerStatus', handlePeerStatus);\n    signalingSocket.on('peerAction', handlePeerAction);\n    signalingSocket.on('wbCanvasToJson', handleJsonToWbCanvas);\n    signalingSocket.on('whiteboardAction', handleWhiteboardAction);\n    signalingSocket.on('kickOut', handleKickedOut);\n    signalingSocket.on('fileInfo', handleFileInfo);\n    signalingSocket.on('fileAbort', handleFileAbort);\n    signalingSocket.on('videoPlayer', handleVideoPlayer);\n    signalingSocket.on('disconnect', handleDisconnect);\n    signalingSocket.on('removePeer', handleRemovePeer);\n} // end [initClientPeer]\n\n/**\n * Send async data to signaling server (server.js)\n * @param {string} msg msg to send to signaling server\n * @param {object} config data to send to signaling server\n */\nasync function sendToServer(msg, config = {}) {\n    await signalingSocket.emit(msg, config);\n}\n\n/**\n * Send async data through RTC Data Channels\n * @param {object} config data\n */\nasync function sendToDataChannel(config) {\n    if (thereIsPeerConnections() && typeof config === 'object' && config !== null) {\n        for (let peer_id in chatDataChannels) {\n            if (chatDataChannels[peer_id].readyState === 'open')\n                await chatDataChannels[peer_id].send(JSON.stringify(config));\n        }\n    }\n}\n\n/**\n * Connected to Signaling Server. Once the user has given us access to their\n * microphone/cam, join the channel and start peering up\n */\nasync function handleConnect() {\n    console.log('03. Connected to signaling server');\n\n    myPeerId = signalingSocket.id;\n    console.log('04. My peer id [ ' + myPeerId + ' ]');\n\n    if (localMediaStream) {\n        await joinToChannel();\n    } else {\n        await initEnumerateDevices();\n        await setupLocalMedia();\n    }\n}\n\n/**\n * Handle some signaling server info\n * @param {object} config data\n */\nfunction handleServerInfo(config) {\n    let peers_count = config.peers_count;\n\n    // Get survey settings from server\n    surveyActive = config.survey.active;\n    surveyURL = config.survey.url;\n\n    console.log('13. Peers count', peers_count);\n\n    // Limit room to n peers\n    if (userLimitsActive && peers_count > usersCountLimit) {\n        return roomIsBusy();\n    }\n\n    // Let start with some basic rules\n    isPresenter = peers_count == 1 ? true : false;\n    if (isRulesActive) {\n        handleRules(isPresenter);\n    }\n\n    if (notify && peers_count == 1) {\n        shareRoomMeetingURL(true);\n    } else {\n        checkShareScreen();\n    }\n}\n\n/**\n * Room is busy, disconnect me and alert the user that\n * will be redirected to home page\n */\nfunction roomIsBusy() {\n    signalingSocket.disconnect();\n    playSound('alert');\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: swalBackground,\n        imageUrl: forbiddenImg,\n        position: 'center',\n        title: 'Room is busy',\n        html: `The room is limited to ${usersCountLimit} users. <br/> Please try again later`,\n        showDenyButton: false,\n        confirmButtonText: `OK`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            openURL('/');\n        }\n    });\n}\n\n/**\n * Presenter can do anything, for others you can limit\n * some functions by hidden the buttons etc.\n *\n * @param {boolean} isPresenter true/false\n */\nfunction handleRules(isPresenter) {\n    console.log('14. Peer isPresenter: ' + isPresenter);\n    if (!isPresenter) {\n        buttons.settings.showTabRoomParticipants = false;\n        buttons.settings.showTabRoomSecurity = false;\n        buttons.remote.audioBtnClickAllowed = false;\n        buttons.remote.videoBtnClickAllowed = false;\n        buttons.remote.showKickOutBtn = false;\n        //...\n    } else {\n        buttons.settings.showTabRoomParticipants = true;\n        buttons.settings.showTabRoomSecurity = true;\n        buttons.settings.showLockRoomBtn = !isRoomLocked;\n        buttons.settings.showUnlockRoomBtn = isRoomLocked;\n        buttons.remote.audioBtnClickAllowed = true;\n        buttons.remote.videoBtnClickAllowed = true;\n        buttons.remote.showKickOutBtn = true;\n    }\n\n    handleButtonsRule();\n}\n\n/**\n * Hide not desired buttons\n */\nfunction handleButtonsRule() {\n    // Main\n    elemDisplay(shareRoomBtn, buttons.main.showShareRoomBtn);\n    elemDisplay(audioBtn, buttons.main.showAudioBtn);\n    elemDisplay(videoBtn, buttons.main.showVideoBtn);\n    //elemDisplay(screenShareBtn, buttons.main.showScreenBtn); // auto-detected\n    elemDisplay(recordStreamBtn, buttons.main.showRecordStreamBtn);\n    elemDisplay(chatRoomBtn, buttons.main.showChatRoomBtn);\n    //elemDisplay(captionBtn, buttons.main.showCaptionRoomBtn); // auto-detected\n    elemDisplay(myHandBtn, buttons.main.showMyHandBtn);\n    elemDisplay(whiteboardBtn, buttons.main.showWhiteboardBtn);\n    elemDisplay(fileShareBtn, buttons.main.showFileShareBtn);\n    elemDisplay(mySettingsBtn, buttons.main.showMySettingsBtn);\n    elemDisplay(aboutBtn, buttons.main.showAboutBtn);\n    // chat\n    elemDisplay(msgerSaveBtn, buttons.chat.showSaveMessageBtn);\n    elemDisplay(msgerMarkdownBtn, buttons.chat.showMarkDownBtn);\n    elemDisplay(msgerShareFileBtn, buttons.chat.showFileShareBtn);\n    elemDisplay(msgerVideoUrlBtn, buttons.chat.showShareVideoAudioBtn);\n    elemDisplay(msgerCPBtn, buttons.chat.showParticipantsBtn);\n    // Settings\n    elemDisplay(muteEveryoneBtn, buttons.settings.showMuteEveryoneBtn);\n    elemDisplay(hideEveryoneBtn, buttons.settings.showHideEveryoneBtn);\n    elemDisplay(ejectEveryoneBtn, buttons.settings.showEjectEveryoneBtn);\n    elemDisplay(lockRoomBtn, buttons.settings.showLockRoomBtn);\n    elemDisplay(unlockRoomBtn, buttons.settings.showUnlockRoomBtn);\n    elemDisplay(tabRoomParticipants, buttons.settings.showTabRoomParticipants);\n    elemDisplay(tabRoomSecurity, buttons.settings.showTabRoomSecurity);\n}\n\n/**\n * set your name for the conference\n */\nasync function whoAreYou() {\n    console.log('11. Who are you?');\n\n    getId('loadingDiv').style.display = 'none';\n    document.body.style.background = 'var(--body-bg)';\n\n    if (myPeerName) {\n        checkPeerAudioVideo();\n        whoAreYouJoin();\n        playSound('addPeer');\n        return;\n    }\n\n    playSound('newMessage');\n\n    await loadLocalStorage();\n\n    const initUser = getId('initUser');\n    initUser.classList.toggle('hidden');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: 'radial-gradient(#393939, #000000)', //swalBackground,\n        title: 'MiroTalk P2P',\n        position: 'center',\n        input: 'text',\n        inputPlaceholder: 'Enter your name',\n        inputValue: window.localStorage.peer_name ? window.localStorage.peer_name : '',\n        html: initUser, // inject html\n        confirmButtonText: `Join meeting`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n        inputValidator: (value) => {\n            if (!value) return 'Please enter your name';\n            myPeerName = value;\n            window.localStorage.peer_name = myPeerName;\n            whoAreYouJoin();\n        },\n    }).then(() => {\n        playSound('addPeer');\n    });\n\n    // select video - audio\n\n    initVideoSelect.onchange = () => {\n        videoSelect.selectedIndex = initVideoSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, videoSelect.selectedIndex, videoSelect.value);\n        myVideoChange = true;\n        refreshLocalMedia();\n        changeCamera(initVideoSelect.value);\n    };\n    initMicrophoneSelect.onchange = () => {\n        audioInputSelect.selectedIndex = initMicrophoneSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.audio, audioInputSelect.selectedIndex, audioInputSelect.value);\n        myVideoChange = false;\n        refreshLocalMedia();\n    };\n    initSpeakerSelect.onchange = () => {\n        audioOutputSelect.selectedIndex = initSpeakerSelect.selectedIndex;\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.speaker, audioOutputSelect.selectedIndex, audioOutputSelect.value);\n        changeAudioDestination();\n    };\n\n    // init video -audio buttons\n\n    initAudioBtn = getId('initAudioBtn');\n    initVideoBtn = getId('initVideoBtn');\n\n    if (!useVideo) {\n        initVideoBtn.className = className.videoOff;\n        setMyVideoStatus(useVideo);\n    }\n    if (!useAudio) {\n        initAudioBtn.className = className.audioOff;\n        setMyAudioStatus(useAudio);\n    }\n\n    setTippy(initAudioBtn, 'Stop the audio', 'top');\n    setTippy(initVideoBtn, 'Stop the video', 'top');\n}\n\n/**\n * Load settings from Local Storage\n */\nasync function loadLocalStorage() {\n    const localStorageDevices = lS.getLocalStorageDevices();\n    console.log('12. Get Local Storage Devices before', localStorageDevices);\n    if (localStorageDevices) {\n        //\n        initMicrophoneSelect.selectedIndex = localStorageDevices.audio.index;\n        initSpeakerSelect.selectedIndex = localStorageDevices.speaker.index;\n        initVideoSelect.selectedIndex = localStorageDevices.video.index;\n        //\n        audioInputSelect.selectedIndex = initMicrophoneSelect.selectedIndex;\n        audioOutputSelect.selectedIndex = initSpeakerSelect.selectedIndex;\n        videoSelect.selectedIndex = initVideoSelect.selectedIndex;\n        //\n        if (lS.DEVICES_COUNT.audio != localStorageDevices.audio.count) {\n            console.log('12.1 Audio devices seems changed, use default index 0');\n            initMicrophoneSelect.selectedIndex = 0;\n            audioInputSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(\n                lS.MEDIA_TYPE.audio,\n                initMicrophoneSelect.selectedIndex,\n                initMicrophoneSelect.value,\n            );\n        }\n        if (lS.DEVICES_COUNT.speaker != localStorageDevices.speaker.count) {\n            console.log('12.2 Speaker devices seems changed, use default index 0');\n            initSpeakerSelect.selectedIndex = 0;\n            audioOutputSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(\n                lS.MEDIA_TYPE.speaker,\n                initSpeakerSelect.selectedIndexIndex,\n                initSpeakerSelect.value,\n            );\n        }\n        if (lS.DEVICES_COUNT.video != localStorageDevices.video.count) {\n            console.log('12.3 Video devices seems changed, use default index 0');\n            initVideoSelect.selectedIndex = 0;\n            videoSelect.selectedIndex = 0;\n            lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, initVideoSelect.selectedIndex, initVideoSelect.value);\n        }\n        //\n        console.log('12.4 Get Local Storage Devices after', lS.getLocalStorageDevices());\n    }\n    // Start init cam\n    if (useVideo && initVideoSelect.value) {\n        myVideoChange = true;\n        refreshLocalMedia();\n        changeCamera(initVideoSelect.value);\n    }\n}\n\n/**\n * Change init camera by device id\n * @param {string} deviceId\n */\nfunction changeCamera(deviceId) {\n    if (initStream) {\n        stopTracks(initStream);\n        initVideo.style.display = 'block';\n    }\n    navigator.mediaDevices\n        .getUserMedia({ video: { deviceId: deviceId } })\n        .then((camStream) => {\n            initVideo.srcObject = camStream;\n            initStream = camStream;\n            console.log('Success attached init video stream');\n        })\n        .catch((err) => {\n            console.error('[Error] changeCamera', err);\n            userLog('error', 'Error while swapping camera' + err, 'top-end');\n        });\n}\n\n/**\n * Check peer audio and video &audio=1&video=1\n * 1/true = enabled / 0/false = disabled\n */\nfunction checkPeerAudioVideo() {\n    let qs = new URLSearchParams(window.location.search);\n    let audio = qs.get('audio');\n    let video = qs.get('video');\n    if (audio) {\n        audio = audio.toLowerCase();\n        let queryPeerAudio = audio === '1' || audio === 'true';\n        if (queryPeerAudio != null) handleAudio(audioBtn, false, queryPeerAudio);\n    }\n    if (video) {\n        video = video.toLowerCase();\n        let queryPeerVideo = video === '1' || video === 'true';\n        if (queryPeerVideo != null) handleVideo(videoBtn, false, queryPeerVideo);\n    }\n}\n\n/**\n * Room and Peer name are ok Join Channel\n */\nasync function whoAreYouJoin() {\n    if (isMobileDevice && myVideoStatus && myAudioStatus) refreshLocalMedia();\n    myVideoWrap.style.display = 'inline';\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n    setPeerAvatarImgName('myVideoAvatarImage', myPeerName, useAvatarApi);\n    setPeerChatAvatarImgName('right', myPeerName);\n    joinToChannel();\n    setTheme(mirotalkTheme);\n}\n\n/**\n * join to channel and send some peer info\n */\nasync function joinToChannel() {\n    console.log('12. join to channel', roomId);\n    sendToServer('join', {\n        channel: roomId,\n        userAgent: userAgent,\n        channel_password: thisRoomPassword,\n        peer_info: peerInfo,\n        peer_geo: peerGeo,\n        peer_name: myPeerName,\n        peer_video: useVideo,\n        peer_audio: useAudio,\n        peer_video_status: myVideoStatus,\n        peer_audio_status: myAudioStatus,\n        peer_screen_status: myScreenStatus,\n        peer_hand_status: myHandStatus,\n        peer_rec_status: isRecScreenStream,\n        peer_privacy_status: isVideoPrivacyActive,\n    });\n    handleBodyOnMouseMove(); // show/hide buttonsBar...\n}\n\n/**\n * When we join a group, our signaling server will send out 'addPeer' events to each pair of users in the group (creating a fully-connected graph of users,\n * ie if there are 6 people in the channel you will connect directly to the other 5, so there will be a total of 15 connections in the network).\n * @param {object} config data\n */\nasync function handleAddPeer(config) {\n    //console.log(\"addPeer\", JSON.stringify(config));\n\n    let peer_id = config.peer_id;\n    let peers = config.peers;\n    let peer_name = peers[peer_id]['peer_name'];\n    let peer_video = peers[peer_id]['peer_video'];\n    let should_create_offer = config.should_create_offer;\n    let iceServers = config.iceServers;\n\n    if (peer_id in peerConnections) {\n        // This could happen if the user joins multiple channels where the other peer is also in.\n        return console.log('Already connected to peer', peer_id);\n    }\n\n    if (!iceServers) iceServers = backupIceServers;\n    console.log('iceServers', iceServers[0]);\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    peerConnection = new RTCPeerConnection({ iceServers: iceServers });\n    peerConnections[peer_id] = peerConnection;\n\n    allPeers = peers;\n\n    console.log('[RTCPeerConnection] - PEER_ID', peer_id); // the connected peer_id\n    console.log('[RTCPeerConnection] - PEER-CONNECTIONS', peerConnections); // all peers connections in the room expect myself\n    console.log('[RTCPeerConnection] - PEERS', peers); // all peers in the room\n\n    // As P2P check who I am connected with\n    let connectedPeersName = [];\n    for (let peer_id in peerConnections) {\n        connectedPeersName.push({\n            peer_name: peers[peer_id]['peer_name'],\n        });\n    }\n    console.log('[RTCPeerConnection] - CONNECTED TO', JSON.stringify(connectedPeersName));\n    // userLog('info', 'Connected to: ' + JSON.stringify(connectedPeersName));\n\n    await handlePeersConnectionStatus(peer_id);\n    await msgerAddPeers(peers);\n    await handleOnIceCandidate(peer_id);\n    await handleRTCDataChannels(peer_id);\n    await handleOnTrack(peer_id, peers);\n    await handleAddTracks(peer_id);\n\n    if (useVideo && !peer_video && !needToCreateOffer) {\n        needToCreateOffer = true;\n    }\n    if (should_create_offer) {\n        await handleRtcOffer(peer_id);\n        console.log('[RTCPeerConnection] - SHOULD CREATE OFFER', {\n            peer_id: peer_id,\n            peer_name: peer_name,\n        });\n    }\n\n    await wbUpdate();\n    playSound('addPeer');\n}\n\n/**\n * Handle peers connection state\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState\n * @param {string} peer_id socket.id\n */\nasync function handlePeersConnectionStatus(peer_id) {\n    peerConnections[peer_id].onconnectionstatechange = function (event) {\n        const connectionStatus = event.currentTarget.connectionState;\n        const signalingState = event.currentTarget.signalingState;\n        const peerName = allPeers[peer_id]['peer_name'];\n        console.log('[RTCPeerConnection] - CONNECTION', {\n            peer_id: peer_id,\n            peer_name: peerName,\n            connectionStatus: connectionStatus,\n            signalingState: signalingState,\n        });\n    };\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate\n * @param {string} peer_id socket.id\n */\nasync function handleOnIceCandidate(peer_id) {\n    peerConnections[peer_id].onicecandidate = (event) => {\n        if (!event.candidate) return;\n        sendToServer('relayICE', {\n            peer_id: peer_id,\n            ice_candidate: {\n                sdpMLineIndex: event.candidate.sdpMLineIndex,\n                candidate: event.candidate.candidate,\n            },\n        });\n    };\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack\n * @param {string} peer_id socket.id\n * @param {object} peers all peers info connected to the same room\n */\nasync function handleOnTrack(peer_id, peers) {\n    console.log('[ON TRACK] - peer_id', { peer_id: peer_id });\n    peerConnections[peer_id].ontrack = (event) => {\n        let remoteVideoStream = getId(peer_id + '_video');\n        let peer_name = peers[peer_id]['peer_name'];\n        let kind = event.track.kind;\n        //userLog('info', '[ON TRACK] - peer_name: ' + peer_name + ' kind: ' + kind);\n        console.log('[ON TRACK] - info', { peer_id: peer_id, peer_name: peer_name, kind: kind, track: event.track });\n        if (event.streams && event.streams[0]) {\n            console.log('[ON TRACK] - peers', peers);\n            remoteVideoStream\n                ? attachMediaStream(remoteVideoStream, event.streams[0])\n                : loadRemoteMediaStream(event.streams[0], peers, peer_id);\n        } else {\n            console.log('[ON TRACK] - SCREEN SHARING', { peer_id: peer_id, peer_name: peer_name, kind: kind });\n            // attach newStream with screen share video and audio already existing\n            let inboundStream = new MediaStream([event.track, remoteVideoStream.srcObject.getAudioTracks()[0]]);\n            attachMediaStream(remoteVideoStream, inboundStream);\n        }\n    };\n}\n\n/**\n * Add my localMediaStream Tracks to connected peer\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack\n * @param {string} peer_id socket.id\n */\nasync function handleAddTracks(peer_id) {\n    let peer_name = allPeers[peer_id]['peer_name'];\n    await localMediaStream.getTracks().forEach((track) => {\n        console.log('[ADD TRACK] to Peer Name [' + peer_name + '] kind - ' + track.kind);\n        peerConnections[peer_id].addTrack(track, localMediaStream);\n    });\n}\n\n/**\n * Secure RTC Data Channel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage\n * @param {string} peer_id socket.id\n */\nasync function handleRTCDataChannels(peer_id) {\n    peerConnections[peer_id].ondatachannel = (event) => {\n        console.log('handleRTCDataChannels ' + peer_id, event);\n        event.channel.onmessage = (msg) => {\n            switch (event.channel.label) {\n                case 'mirotalk_chat_channel':\n                    try {\n                        let dataMessage = JSON.parse(msg.data);\n                        switch (dataMessage.type) {\n                            case 'chat':\n                                handleDataChannelChat(dataMessage);\n                                break;\n                            case 'speech':\n                                handleDataChannelSpeechTranscript(dataMessage);\n                                break;\n                            case 'micVolume':\n                                handlePeerVolume(dataMessage);\n                                break;\n                        }\n                    } catch (err) {\n                        console.error('mirotalk_chat_channel', err);\n                    }\n                    break;\n                case 'mirotalk_file_sharing_channel':\n                    try {\n                        let dataFile = msg.data;\n                        handleDataChannelFileSharing(dataFile);\n                    } catch (err) {\n                        console.error('mirotalk_file_sharing_channel', err);\n                    }\n                    break;\n            }\n        };\n    };\n    createChatDataChannel(peer_id);\n    createFileSharingDataChannel(peer_id);\n}\n\n/**\n * Only one side of the peer connection should create the offer, the signaling server picks one to be the offerer.\n * The other user will get a 'sessionDescription' event and will create an offer, then send back an answer 'sessionDescription' to us\n * @param {string} peer_id socket.id\n */\nasync function handleRtcOffer(peer_id) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded\n    peerConnections[peer_id].onnegotiationneeded = () => {\n        console.log('Creating RTC offer to ' + allPeers[peer_id]['peer_name']);\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n        peerConnections[peer_id]\n            .createOffer()\n            .then((local_description) => {\n                console.log('Local offer description is', local_description);\n                // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\n                peerConnections[peer_id]\n                    .setLocalDescription(local_description)\n                    .then(() => {\n                        sendToServer('relaySDP', {\n                            peer_id: peer_id,\n                            session_description: local_description,\n                        });\n                        console.log('Offer setLocalDescription done!');\n                    })\n                    .catch((err) => {\n                        console.error('[Error] offer setLocalDescription', err);\n                        userLog('error', 'Offer setLocalDescription failed ' + err);\n                    });\n            })\n            .catch((err) => {\n                console.error('[Error] sending offer', err);\n            });\n    };\n}\n\n/**\n * Peers exchange session descriptions which contains information about their audio / video settings and that sort of stuff. First\n * the 'offerer' sends a description to the 'answerer' (with type \"offer\"), then the answerer sends one back (with type \"answer\").\n * @param {object} config data\n */\nfunction handleSessionDescription(config) {\n    console.log('Remote Session Description', config);\n\n    let peer_id = config.peer_id;\n    let remote_description = config.session_description;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription\n    let description = new RTCSessionDescription(remote_description);\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\n    peerConnections[peer_id]\n        .setRemoteDescription(description)\n        .then(() => {\n            console.log('setRemoteDescription done!');\n            if (remote_description.type == 'offer') {\n                console.log('Creating answer');\n                // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n                peerConnections[peer_id]\n                    .createAnswer()\n                    .then((local_description) => {\n                        console.log('Answer description is: ', local_description);\n                        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\n                        peerConnections[peer_id]\n                            .setLocalDescription(local_description)\n                            .then(() => {\n                                sendToServer('relaySDP', {\n                                    peer_id: peer_id,\n                                    session_description: local_description,\n                                });\n                                console.log('Answer setLocalDescription done!');\n\n                                // https://github.com/miroslavpejic85/mirotalk/issues/110\n                                if (needToCreateOffer) {\n                                    needToCreateOffer = false;\n                                    handleRtcOffer(peer_id);\n                                    console.log('[RTCSessionDescription] - NEED TO CREATE OFFER', {\n                                        peer_id: peer_id,\n                                    });\n                                }\n                            })\n                            .catch((err) => {\n                                console.error('[Error] answer setLocalDescription', err);\n                                userLog('error', 'Answer setLocalDescription failed ' + err);\n                            });\n                    })\n                    .catch((err) => {\n                        console.error('[Error] creating answer', err);\n                    });\n            } // end [if type offer]\n        })\n        .catch((err) => {\n            console.error('[Error] setRemoteDescription', err);\n        });\n}\n\n/**\n * The offerer will send a number of ICE Candidate blobs to the answerer so they\n * can begin trying to find the best path to one another on the net.\n * @param {object} config data\n */\nfunction handleIceCandidate(config) {\n    let peer_id = config.peer_id;\n    let ice_candidate = config.ice_candidate;\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\n    peerConnections[peer_id].addIceCandidate(new RTCIceCandidate(ice_candidate)).catch((err) => {\n        console.error('[Error] addIceCandidate', err);\n    });\n}\n\n/**\n * Disconnected from Signaling Server.\n * Tear down all of our peer connections and remove all the media divs.\n * @param {object} reason of disconnection\n */\nfunction handleDisconnect(reason) {\n    console.log('Disconnected from signaling server', { reason: reason });\n    for (let peer_id in peerMediaElements) {\n        peerMediaElements[peer_id].parentNode.removeChild(peerMediaElements[peer_id]);\n        adaptAspectRatio();\n    }\n    for (let peer_id in peerConnections) {\n        peerConnections[peer_id].close();\n        msgerRemovePeer(peer_id);\n        removeVideoPinMediaContainer(peer_id);\n    }\n    chatDataChannels = {};\n    fileDataChannels = {};\n    peerConnections = {};\n    peerMediaElements = {};\n}\n\n/**\n * When a user leaves a channel (or is disconnected from the signaling server) everyone will recieve a 'removePeer' message\n * telling them to trash the media channels they have open for those that peer. If it was this client that left a channel,\n * they'll also receive the removePeers. If this client was disconnected, they wont receive removePeers, but rather the\n * signaling_socket.on('disconnect') code will kick in and tear down all the peer sessions.\n * @param {object} config data\n */\nfunction handleRemovePeer(config) {\n    console.log('Signaling server said to remove peer:', config);\n\n    let peer_id = config.peer_id;\n\n    if (peer_id in peerMediaElements) {\n        peerMediaElements[peer_id].parentNode.removeChild(peerMediaElements[peer_id]);\n        adaptAspectRatio();\n    }\n    if (peer_id in peerConnections) peerConnections[peer_id].close();\n\n    msgerRemovePeer(peer_id);\n    removeVideoPinMediaContainer(peer_id);\n\n    delete chatDataChannels[peer_id];\n    delete fileDataChannels[peer_id];\n    delete peerConnections[peer_id];\n    delete peerMediaElements[peer_id];\n    delete allPeers[peer_id];\n\n    isPresenter = !thereIsPeerConnections();\n    if (isRulesActive && isPresenter) {\n        console.log('I am alone in the room, got Presenter Rules');\n        handleRules(isPresenter);\n    }\n\n    playSound('removePeer');\n\n    console.log('ALL PEERS', allPeers);\n}\n\n/**\n * Set mirotalk theme | dark | grey | ...\n * @param {string} theme type\n */\nfunction setTheme(theme) {\n    if (!theme) return;\n\n    mirotalkTheme = theme;\n    switch (mirotalkTheme) {\n        case 'dark':\n            // dark theme\n            swalBackground = 'radial-gradient(#393939, #000000)';\n            document.documentElement.style.setProperty('--body-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--msger-private-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--wb-bg', 'radial-gradient(#393939, #000000)');\n            document.documentElement.style.setProperty('--box-shadow', '0px 8px 16px 0px rgba(0, 0, 0, 0.2)');\n            document.documentElement.style.setProperty('--left-msg-bg', '#252d31');\n            document.documentElement.style.setProperty('--right-msg-bg', '#056162');\n            document.documentElement.style.setProperty('--private-msg-bg', '#6b1226');\n            document.body.style.background = 'radial-gradient(#393939, #000000)';\n            break;\n        case 'grey':\n            // grey theme\n            swalBackground = 'radial-gradient(#666, #333)';\n            document.documentElement.style.setProperty('--body-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--wb-bg', 'radial-gradient(#797979, #000)');\n            document.documentElement.style.setProperty('--box-shadow', '0px 8px 16px 0px rgba(0, 0, 0, 0.2)');\n            document.documentElement.style.setProperty('--msger-private-bg', 'radial-gradient(#666, #333)');\n            document.documentElement.style.setProperty('--left-msg-bg', '#252d31');\n            document.documentElement.style.setProperty('--right-msg-bg', '#056162');\n            document.documentElement.style.setProperty('--private-msg-bg', '#6b1226');\n            document.body.style.background = 'radial-gradient(#666, #333)';\n            break;\n        // ...\n        default:\n            console.log('No theme found');\n    }\n\n    setButtonsBarPosition(mirotalkBtnsBar);\n}\n\n/**\n * Set buttons bar position\n * @param {string} position vertical / horizontal\n */\nfunction setButtonsBarPosition(position) {\n    if (!position || isMobileDevice) return;\n\n    mirotalkBtnsBar = position;\n    switch (mirotalkBtnsBar) {\n        case 'vertical':\n            document.documentElement.style.setProperty('--btns-top', '50%');\n            document.documentElement.style.setProperty('--btns-right', '0px');\n            document.documentElement.style.setProperty('--btns-left', '15px');\n            document.documentElement.style.setProperty('--btns-margin-left', '0px');\n            document.documentElement.style.setProperty('--btns-width', '40px');\n            document.documentElement.style.setProperty('--btns-flex-direction', 'column');\n            break;\n        case 'horizontal':\n            document.documentElement.style.setProperty('--btns-top', '95%');\n            document.documentElement.style.setProperty('--btns-right', '25%');\n            document.documentElement.style.setProperty('--btns-left', '50%');\n            document.documentElement.style.setProperty('--btns-margin-left', '-300px');\n            document.documentElement.style.setProperty('--btns-width', '600px');\n            document.documentElement.style.setProperty('--btns-flex-direction', 'row');\n            break;\n        default:\n            console.log('No position found');\n    }\n}\n\n/**\n * Init to enumerate the devices\n */\nasync function initEnumerateDevices() {\n    console.log('05. init Enumerate Devices');\n    await initEnumerateVideoDevices();\n    await initEnumerateAudioDevices();\n    if (!useAudio && !useVideo) {\n        initEnumerateDevicesFailed = true;\n        playSound('alert');\n        await Swal.fire({\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            background: '#000000',\n            position: 'center',\n            imageUrl: camMicOff,\n            title: 'Camera and microphone not allowed',\n            text: \"Meet needs access to the camera and microphone. Click the locked camera and microphone icon in your browser's address bar, before to join room.\",\n            showDenyButton: false,\n            confirmButtonText: `OK`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) {\n                openURL('/'); // back to homepage\n            }\n        });\n    }\n}\n\n/**\n * Init to enumerate the audio devices\n * @returns boolean true/false\n */\nasync function initEnumerateAudioDevices() {\n    if (isEnumerateAudioDevices) return;\n    // allow the audio\n    await navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then((stream) => {\n            enumerateAudioDevices(stream);\n            useAudio = true;\n        })\n        .catch(() => {\n            useAudio = false;\n        });\n}\n\n/**\n * Init to enumerate the vide devices\n * @returns boolean true/false\n */\nasync function initEnumerateVideoDevices() {\n    if (isEnumerateVideoDevices) return;\n    // allow the video\n    await navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then((stream) => {\n            enumerateVideoDevices(stream);\n            useVideo = true;\n        })\n        .catch(() => {\n            useVideo = false;\n        });\n}\n\n/**\n * Enumerate Audio\n * @param {object} stream\n */\nfunction enumerateAudioDevices(stream) {\n    console.log('06. Get Audio Devices');\n    navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) =>\n            devices.forEach((device) => {\n                let el,\n                    eli = null;\n                if ('audioinput' === device.kind) {\n                    el = getId('audioSource');\n                    eli = getId('initMicrophoneSelect');\n                } else if ('audiooutput' === device.kind) {\n                    el = getId('audioOutput');\n                    eli = getId('initSpeakerSelect');\n                }\n                if (!el) return;\n                addChild(device, [el, eli]);\n            }),\n        )\n        .then(() => {\n            stopTracks(stream);\n            isEnumerateAudioDevices = true;\n            const sinkId = 'sinkId' in HTMLMediaElement.prototype;\n            getId('audioOutput').disabled = !sinkId;\n            if (!sinkId) getId('initSpeakerSelect').display = 'none';\n        });\n}\n\n/**\n * Enumerate Video\n * @param {object} stream\n */\nfunction enumerateVideoDevices(stream) {\n    console.log('07. Get Video Devices');\n    navigator.mediaDevices\n        .enumerateDevices()\n        .then((devices) =>\n            devices.forEach((device) => {\n                let el,\n                    eli = null;\n                if ('videoinput' === device.kind) {\n                    el = getId('videoSource');\n                    eli = getId('initVideoSelect');\n                }\n                if (!el) return;\n                addChild(device, [el, eli]);\n            }),\n        )\n        .then(() => {\n            stopTracks(stream);\n            isEnumerateVideoDevices = true;\n        });\n}\n\n/**\n * Stop tracks from stream\n * @param {object} stream\n */\nfunction stopTracks(stream) {\n    stream.getTracks().forEach((track) => {\n        track.stop();\n    });\n}\n\n/**\n * Add child to element\n * @param {object} device\n * @param {object} els\n */\nfunction addChild(device, els) {\n    let kind = device.kind;\n    els.forEach((el) => {\n        let option = document.createElement('option');\n        option.value = device.deviceId;\n        switch (kind) {\n            case 'videoinput':\n                option.innerHTML = `\ud83d\udcf9 ` + device.label || `\ud83d\udcf9 camera ${el.length + 1}`;\n                break;\n            case 'audioinput':\n                option.innerHTML = `\ud83c\udfa4 ` + device.label || `\ud83c\udfa4 microphone ${el.length + 1}`;\n                break;\n            case 'audiooutput':\n                option.innerHTML = `\ud83d\udd08 ` + device.label || `\ud83d\udd08 speaker ${el.length + 1}`;\n                break;\n            default:\n                break;\n        }\n        el.appendChild(option);\n    });\n    selectors = [getId('audioSource'), getId('audioOutput'), getId('videoSource')];\n}\n\n/**\n * Setup local media stuff. Ask user for permission to use the computers microphone and/or camera,\n * attach it to an <audio> or <video> tag if they give us access.\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n */\nasync function setupLocalMedia() {\n    // if we've already been initialized do nothing or there is error on initEnumerateDevicesFailed\n    if (localMediaStream != null || initEnumerateDevicesFailed) {\n        return;\n    }\n\n    await getPeerGeoLocation();\n\n    console.log('08. Requesting access to local audio - video inputs');\n    console.log('09. Supported constraints', navigator.mediaDevices.getSupportedConstraints());\n\n    // default | qvgaVideo | vgaVideo | hdVideo | fhdVideo | 2kVideo | 4kVideo |\n    let videoConstraints = useVideo ? getVideoConstraints('default') : false;\n    let audioConstraints = useAudio;\n    if (useAudio) {\n        audioConstraints = {\n            echoCancellation: true,\n            noiseSuppression: true,\n            sampleRate: 44100,\n        };\n    }\n\n    const constraints = {\n        audio: audioConstraints,\n        video: videoConstraints,\n    };\n\n    let stream = null;\n\n    try {\n        stream = await navigator.mediaDevices.getUserMedia(constraints);\n        if (stream) {\n            await loadLocalMedia(stream);\n            await startPitchDetection(stream);\n            await whoAreYou();\n        }\n    } catch (err) {\n        console.error('[Error] - Access denied for audio - video device', err);\n        playSound('alert');\n        openURL(\n            `/permission?roomId=${roomId}&getUserMediaError=${err.toString()} <br/> Check the common getusermedia errors <a href=\"https://blog.addpipe.com/common-getusermedia-errors\" target=\"_blank\">here<a/>`,\n        );\n    }\n} // end [setup_local_stream]\n\n/**\n * Load Local Media Stream obj\n * @param {object} stream media stream audio - video\n */\nasync function loadLocalMedia(stream) {\n    console.log('10. Access granted to audio - video device');\n\n    localMediaStream = stream;\n\n    console.log('LOAD LOCAL MEDIA STREAM TRACKS', localMediaStream.getTracks());\n\n    // local video elemets\n    const myVideoWrap = document.createElement('div');\n    const myLocalMedia = document.createElement('video');\n\n    // html elements\n    const myVideoNavBar = document.createElement('div');\n    const myCountTime = document.createElement('button');\n    const myPeerName = document.createElement('p');\n    const myHandStatusIcon = document.createElement('button');\n    const myVideoToImgBtn = document.createElement('button');\n    const myPrivacyBtn = document.createElement('button');\n    const myVideoStatusIcon = document.createElement('button');\n    const myAudioStatusIcon = document.createElement('button');\n    const myVideoFullScreenBtn = document.createElement('button');\n    const myVideoPinBtn = document.createElement('button');\n    const myVideoAvatarImage = document.createElement('img');\n    const myPitchMeter = document.createElement('div');\n    const myPitchBar = document.createElement('div');\n\n    // session time\n    myCountTime.setAttribute('id', 'countTime');\n\n    // my peer name\n    myPeerName.setAttribute('id', 'myVideoParagraph');\n    myPeerName.className = 'videoPeerName';\n\n    // my hand status element\n    myHandStatusIcon.setAttribute('id', 'myHandStatusIcon');\n    myHandStatusIcon.className = className.handPulsate;\n    myHandStatusIcon.style.setProperty('color', 'rgb(0, 255, 0)');\n\n    // my privacy button\n    myPrivacyBtn.setAttribute('id', 'myPrivacyBtn');\n    myPrivacyBtn.className = className.privacy;\n\n    // my video status element\n    myVideoStatusIcon.setAttribute('id', 'myVideoStatusIcon');\n    myVideoStatusIcon.className = className.videoOn;\n\n    // my audio status element\n    myAudioStatusIcon.setAttribute('id', 'myAudioStatusIcon');\n    myAudioStatusIcon.className = className.audioOn;\n\n    // my video to image\n    myVideoToImgBtn.setAttribute('id', 'myVideoToImgBtn');\n    myVideoToImgBtn.className = className.snapShot;\n\n    // my video full screen mode\n    myVideoFullScreenBtn.setAttribute('id', 'myVideoFullScreenBtn');\n    myVideoFullScreenBtn.className = className.fullScreen;\n\n    // my video pin/unpin button\n    myVideoPinBtn.setAttribute('id', 'myVideoPinBtn');\n    myVideoPinBtn.className = className.pinUnpin;\n\n    // no mobile devices\n    setTippy(myCountTime, 'Session Time', 'bottom');\n    setTippy(myPeerName, 'My name', 'bottom');\n    setTippy(myHandStatusIcon, 'My hand is raised', 'bottom');\n    setTippy(myPrivacyBtn, 'Toggle video privacy', 'bottom');\n    setTippy(myVideoStatusIcon, 'My video is on', 'bottom');\n    setTippy(myAudioStatusIcon, 'My audio is on', 'bottom');\n    setTippy(myVideoToImgBtn, 'Take a snapshot', 'bottom');\n    setTippy(myVideoFullScreenBtn, 'Full screen mode', 'bottom');\n    setTippy(myVideoPinBtn, 'Toggle Pin video', 'bottom');\n\n    // my video avatar image\n    myVideoAvatarImage.setAttribute('id', 'myVideoAvatarImage');\n    myVideoAvatarImage.className = 'videoAvatarImage pulsate';\n\n    // my pitch meter\n    myPitchMeter.setAttribute('id', 'myPitch');\n    myPitchBar.setAttribute('id', 'myPitchBar');\n    myPitchMeter.className = 'speechbar';\n    myPitchBar.className = 'bar';\n    myPitchBar.style.height = '1%';\n\n    // my video nav bar\n    myVideoNavBar.className = 'navbar fadein';\n\n    // attach to video nav bar\n    myVideoNavBar.appendChild(myCountTime);\n\n    if (!isMobileDevice) {\n        myVideoNavBar.appendChild(myVideoPinBtn);\n    }\n    if (isVideoFullScreenSupported) {\n        myVideoNavBar.appendChild(myVideoFullScreenBtn);\n    }\n    if (buttons.local.showSnapShotBtn) {\n        myVideoNavBar.appendChild(myVideoToImgBtn);\n    }\n    if (buttons.local.showVideoCircleBtn) {\n        myVideoNavBar.appendChild(myPrivacyBtn);\n    }\n\n    myVideoNavBar.appendChild(myVideoStatusIcon);\n    myVideoNavBar.appendChild(myAudioStatusIcon);\n    myVideoNavBar.appendChild(myHandStatusIcon);\n\n    // add my pitchBar\n    myPitchMeter.appendChild(myPitchBar);\n\n    // hand display none on default menad is raised == false\n    myHandStatusIcon.style.display = 'none';\n\n    myLocalMedia.setAttribute('id', 'myVideo');\n    myLocalMedia.setAttribute('playsinline', true);\n    myLocalMedia.className = 'mirror';\n    myLocalMedia.autoplay = true;\n    myLocalMedia.muted = true;\n    myLocalMedia.volume = 0;\n    myLocalMedia.controls = false;\n\n    myVideoWrap.className = 'Camera';\n    myVideoWrap.setAttribute('id', 'myVideoWrap');\n\n    // add elements to video wrap div\n    myVideoWrap.appendChild(myVideoNavBar);\n    myVideoWrap.appendChild(myVideoAvatarImage);\n    myVideoWrap.appendChild(myLocalMedia);\n    myVideoWrap.appendChild(myPitchMeter);\n    myVideoWrap.appendChild(myPeerName);\n\n    getId('videoMediaContainer').appendChild(myVideoWrap);\n    myVideoWrap.style.display = 'none';\n\n    logStreamSettingsInfo('localMediaStream', localMediaStream);\n    attachMediaStream(myLocalMedia, localMediaStream);\n    adaptAspectRatio();\n\n    getHtmlElementsById();\n    setButtonsToolTip();\n    manageLeftButtons();\n    handleButtonsRule();\n    setupMySettings();\n    setupVideoUrlPlayer();\n    startCountTime();\n\n    if (isVideoFullScreenSupported) {\n        handleVideoPlayerFs(myLocalMedia.id, myVideoFullScreenBtn.id);\n    }\n\n    handleFileDragAndDrop(myLocalMedia.id, myPeerId, true);\n\n    if (buttons.local.showSnapShotBtn) {\n        handleVideoToImg(myLocalMedia.id, myVideoToImgBtn.id);\n    }\n    if (buttons.local.showVideoCircleBtn) {\n        handleVideoPrivacyBtn(myLocalMedia.id, myPrivacyBtn.id);\n    }\n\n    handleVideoPinUnpin(myLocalMedia.id, myVideoPinBtn.id, myVideoWrap.id, myLocalMedia.id);\n\n    refreshMyVideoAudioStatus(localMediaStream);\n\n    if (!useVideo) {\n        myVideoAvatarImage.style.display = 'block';\n        myVideoStatusIcon.className = className.videoOff;\n        videoBtn.className = className.videoOff;\n    }\n}\n\n/**\n * Check if screen is shared on join room\n */\nfunction checkShareScreen() {\n    if (!isMobileDevice && isScreenEnabled && isScreenSharingSupported) {\n        playSound('newMessage');\n        // screenShareBtn.click(); // Chrome - Opera - Edge - Brave\n        // handle error: getDisplayMedia requires transient activation from a user gesture on Safari - FireFox\n        Swal.fire({\n            background: swalBackground,\n            position: 'center',\n            icon: 'question',\n            text: 'Do you want to share your screen?',\n            showDenyButton: true,\n            confirmButtonText: `Yes`,\n            denyButtonText: `No`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) {\n                screenShareBtn.click();\n            }\n        });\n    }\n}\n\n/**\n * Load Remote Media Stream obj\n * @param {object} stream media stream audio - video\n * @param {object} peers all peers info connected to the same room\n * @param {string} peer_id socket.id\n */\nasync function loadRemoteMediaStream(stream, peers, peer_id) {\n    // get data from peers obj\n    let peer_name = peers[peer_id]['peer_name'];\n    let peer_video = peers[peer_id]['peer_video'];\n    let peer_video_status = peers[peer_id]['peer_video_status'];\n    let peer_audio_status = peers[peer_id]['peer_audio_status'];\n    let peer_screen_status = peers[peer_id]['peer_screen_status'];\n    let peer_hand_status = peers[peer_id]['peer_hand_status'];\n    let peer_rec_status = peers[peer_id]['peer_rec_status'];\n    let peer_privacy_status = peers[peer_id]['peer_privacy_status'];\n\n    remoteMediaStream = stream;\n\n    console.log('LOAD REMOTE MEDIA STREAM TRACKS - PeerName:[' + peer_name + ']', remoteMediaStream.getTracks());\n\n    // remote video elements\n    const remoteVideoWrap = document.createElement('div');\n    const remoteMedia = document.createElement('video');\n\n    // html elements\n    const remoteVideoNavBar = document.createElement('div');\n    const remotePeerName = document.createElement('p');\n    const remoteHandStatusIcon = document.createElement('button');\n    const remoteVideoStatusIcon = document.createElement('button');\n    const remoteAudioStatusIcon = document.createElement('button');\n    const remoteVideoAudioUrlBtn = document.createElement('button');\n    const remoteFileShareBtn = document.createElement('button');\n    const remotePrivateMsgBtn = document.createElement('button');\n    const remotePeerKickOut = document.createElement('button');\n    const remoteVideoToImgBtn = document.createElement('button');\n    const remoteVideoFullScreenBtn = document.createElement('button');\n    const remoteVideoPinBtn = document.createElement('button');\n    const remoteVideoAvatarImage = document.createElement('img');\n    const remotePitchMeter = document.createElement('div');\n    const remotePitchBar = document.createElement('div');\n    const remoteAudioVolume = document.createElement('input');\n\n    // remote peer name element\n    remotePeerName.setAttribute('id', peer_id + '_name');\n    remotePeerName.className = 'videoPeerName';\n\n    const peerVideoText = document.createTextNode(peer_name);\n    remotePeerName.appendChild(peerVideoText);\n\n    // remote hand status element\n    remoteHandStatusIcon.setAttribute('id', peer_id + '_handStatus');\n    remoteHandStatusIcon.style.setProperty('color', 'rgb(0, 255, 0)');\n    remoteHandStatusIcon.className = className.handPulsate;\n\n    // remote video status element\n    remoteVideoStatusIcon.setAttribute('id', peer_id + '_videoStatus');\n    remoteVideoStatusIcon.className = className.videoOn;\n\n    // remote audio status element\n    remoteAudioStatusIcon.setAttribute('id', peer_id + '_audioStatus');\n    remoteAudioStatusIcon.className = className.audioOn;\n\n    // remote audio volume element\n    remoteAudioVolume.setAttribute('id', peer_id + '_audioVolume');\n    remoteAudioVolume.type = 'range';\n    remoteAudioVolume.min = 0;\n    remoteAudioVolume.max = 100;\n    remoteAudioVolume.value = 100;\n\n    // remote private message\n    remotePrivateMsgBtn.setAttribute('id', peer_id + '_privateMsg');\n    remotePrivateMsgBtn.className = className.msgPrivate;\n\n    // remote share file\n    remoteFileShareBtn.setAttribute('id', peer_id + '_shareFile');\n    remoteFileShareBtn.className = className.shareFile;\n\n    // remote peer YouTube video\n    remoteVideoAudioUrlBtn.setAttribute('id', peer_id + '_videoAudioUrl');\n    remoteVideoAudioUrlBtn.className = className.shareVideoAudio;\n\n    // my video to image\n    remoteVideoToImgBtn.setAttribute('id', peer_id + '_snapshot');\n    remoteVideoToImgBtn.className = className.snapShot;\n\n    // remote peer kick out\n    remotePeerKickOut.setAttribute('id', peer_id + '_kickOut');\n    remotePeerKickOut.className = className.kickOut;\n\n    // remote video full screen mode\n    remoteVideoFullScreenBtn.setAttribute('id', peer_id + '_fullScreen');\n    remoteVideoFullScreenBtn.className = className.fullScreen;\n\n    // remote video pin/unpin button\n    remoteVideoPinBtn.setAttribute('id', peer_id + '_pinUnpin');\n    remoteVideoPinBtn.className = className.pinUnpin;\n\n    // no mobile devices\n    setTippy(remotePeerName, 'Participant name', 'bottom');\n    setTippy(remoteHandStatusIcon, 'Participant hand is raised', 'bottom');\n    setTippy(remoteVideoStatusIcon, 'Participant video is on', 'bottom');\n    setTippy(remoteAudioStatusIcon, 'Participant audio is on', 'bottom');\n    setTippy(remoteAudioVolume, '\ud83d\udd0a Volume', 'top-end');\n    setTippy(remoteVideoAudioUrlBtn, 'Send Video or Audio', 'bottom');\n    setTippy(remotePrivateMsgBtn, 'Send private message', 'bottom');\n    setTippy(remoteFileShareBtn, 'Send file', 'bottom');\n    setTippy(remoteVideoToImgBtn, 'Take a snapshot', 'bottom');\n    setTippy(remotePeerKickOut, 'Kick out', 'bottom');\n    setTippy(remoteVideoFullScreenBtn, 'Full screen mode', 'bottom');\n    setTippy(remoteVideoPinBtn, 'Toggle Pin video', 'bottom');\n\n    // my video avatar image\n    remoteVideoAvatarImage.setAttribute('id', peer_id + '_avatar');\n    remoteVideoAvatarImage.className = 'videoAvatarImage pulsate';\n\n    // remote pitch meter\n    remotePitchMeter.setAttribute('id', peer_id + '_pitch');\n    remotePitchBar.setAttribute('id', peer_id + '_pitch_bar');\n    remotePitchMeter.className = 'speechbar';\n    remotePitchBar.className = 'bar';\n    remotePitchBar.style.height = '1%';\n\n    remotePitchMeter.appendChild(remotePitchBar);\n\n    // remote video nav bar\n    remoteVideoNavBar.className = 'navbar fadein';\n\n    // attach to remote video nav bar\n    if (!isMobileDevice) {\n        remoteVideoNavBar.appendChild(remoteVideoPinBtn);\n    }\n    if (isVideoFullScreenSupported) {\n        remoteVideoNavBar.appendChild(remoteVideoFullScreenBtn);\n    }\n    if (buttons.remote.showSnapShotBtn) {\n        remoteVideoNavBar.appendChild(remoteVideoToImgBtn);\n    }\n\n    remoteVideoNavBar.appendChild(remoteVideoStatusIcon);\n    remoteVideoNavBar.appendChild(remoteAudioStatusIcon);\n\n    if (buttons.remote.showAudioVolume) {\n        remoteVideoNavBar.appendChild(remoteAudioVolume);\n    }\n    remoteVideoNavBar.appendChild(remoteHandStatusIcon);\n\n    if (buttons.remote.showPrivateMessageBtn) {\n        remoteVideoNavBar.appendChild(remotePrivateMsgBtn);\n    }\n    if (buttons.remote.showFileShareBtn) {\n        remoteVideoNavBar.appendChild(remoteFileShareBtn);\n    }\n    if (buttons.remote.showShareVideoAudioBtn) {\n        remoteVideoNavBar.appendChild(remoteVideoAudioUrlBtn);\n    }\n    if (buttons.remote.showKickOutBtn) {\n        remoteVideoNavBar.appendChild(remotePeerKickOut);\n    }\n\n    remoteMedia.setAttribute('id', peer_id + '_video');\n    remoteMedia.setAttribute('playsinline', true);\n    remoteMedia.autoplay = true;\n    isMobileDevice ? (remoteMediaControls = false) : (remoteMediaControls = remoteMediaControls);\n    remoteMedia.style.objectFit = peer_screen_status ? 'contain' : 'var(--video-object-fit)';\n    remoteMedia.style.name = peer_id + (peer_screen_status ? '_typeScreen' : '_typeCam');\n    remoteMedia.controls = remoteMediaControls;\n\n    remoteVideoWrap.className = 'Camera';\n    remoteVideoWrap.setAttribute('id', peer_id + '_videoWrap');\n\n    // add elements to videoWrap div\n    remoteVideoWrap.appendChild(remoteVideoNavBar);\n    remoteVideoWrap.appendChild(remoteVideoAvatarImage);\n    remoteVideoWrap.appendChild(remotePitchMeter);\n    remoteVideoWrap.appendChild(remoteMedia);\n    remoteVideoWrap.appendChild(remotePeerName);\n\n    // need later on disconnect or remove peers\n    peerMediaElements[peer_id] = remoteVideoWrap;\n\n    // append all elements to videoMediaContainer\n    getId('videoMediaContainer').appendChild(remoteVideoWrap);\n    // attachMediaStream is a part of the adapter.js library\n    attachMediaStream(remoteMedia, remoteMediaStream);\n    // resize video elements\n    adaptAspectRatio();\n\n    if (buttons.remote.showSnapShotBtn) {\n        // handle video to image\n        handleVideoToImg(remoteMedia.id, remoteVideoToImgBtn.id, peer_id);\n    }\n\n    // handle video pin/unpin\n    handleVideoPinUnpin(remoteMedia.id, remoteVideoPinBtn.id, remoteVideoWrap.id, peer_id, peer_screen_status);\n\n    // pin video on screen share detected\n    if (peer_video_status && peer_screen_status) {\n        getId(remoteVideoPinBtn.id).click();\n    }\n\n    if (isVideoFullScreenSupported) {\n        // handle video full screen mode\n        handleVideoPlayerFs(remoteMedia.id, remoteVideoFullScreenBtn.id, peer_id);\n    }\n\n    // handle file share drag and drop\n    handleFileDragAndDrop(remoteMedia.id, peer_id);\n\n    if (buttons.remote.showKickOutBtn) {\n        // handle kick out button event\n        handlePeerKickOutBtn(peer_id);\n    }\n\n    if (peer_privacy_status) {\n        // set video privacy true\n        setVideoPrivacyStatus(remoteMedia.id, peer_privacy_status);\n    }\n\n    // refresh remote peers avatar name\n    setPeerAvatarImgName(remoteVideoAvatarImage.id, peer_name, useAvatarApi);\n    // refresh remote peers hand icon status and title\n    setPeerHandStatus(peer_id, peer_name, peer_hand_status);\n    // refresh remote peers video icon status and title\n    setPeerVideoStatus(peer_id, peer_video_status);\n    // refresh remote peers audio icon status and title\n    setPeerAudioStatus(peer_id, peer_audio_status);\n    // handle remote peers audio volume\n    handleAudioVolume(remoteAudioVolume.id, remoteMedia.id);\n    // handle remote peers audio on-off\n    handlePeerAudioBtn(peer_id);\n    // handle remote peers video on-off\n    handlePeerVideoBtn(peer_id);\n\n    if (buttons.remote.showPrivateMessageBtn) {\n        // handle remote private messages\n        handlePeerPrivateMsg(peer_id, peer_name);\n    }\n    if (buttons.remote.showFileShareBtn) {\n        // handle remote send file\n        handlePeerSendFile(peer_id);\n    }\n    if (buttons.remote.showShareVideoAudioBtn) {\n        // handle remote video - audio URL\n        handlePeerVideoAudioUrl(peer_id);\n    }\n\n    // show status menu\n    toggleClassElements('statusMenu', 'inline');\n    // notify if peer started to recording own screen + audio\n    if (peer_rec_status) notifyRecording(peer_name, 'Started');\n\n    // peer not has video at all\n    if (!peer_video) {\n        remoteVideoAvatarImage.style.display = 'block';\n        remoteVideoStatusIcon.className = className.videoOff;\n    }\n}\n\n/**\n * Log stream settings info\n * @param {string} name function name called from\n * @param {object} stream media stream audio - video\n */\nfunction logStreamSettingsInfo(name, stream) {\n    if (useVideo || isScreenStreaming) {\n        console.log(name, {\n            video: {\n                label: stream.getVideoTracks()[0].label,\n                settings: stream.getVideoTracks()[0].getSettings(),\n            },\n        });\n    }\n    if (useAudio) {\n        console.log(name, {\n            audio: {\n                label: stream.getAudioTracks()[0].label,\n                settings: stream.getAudioTracks()[0].getSettings(),\n            },\n        });\n    }\n}\n\n/**\n * Handle aspect ratio\n * ['0:0', '4:3', '16:9', '1:1', '1:2'];\n *    0      1       2      3      4\n */\nfunction adaptAspectRatio() {\n    let participantsCount = getId('videoMediaContainer').childElementCount;\n    let desktop,\n        mobile = 1;\n    // desktop aspect ratio\n    switch (participantsCount) {\n        // case 1:\n        //     desktop = 0; // (0:0)\n        //     break;\n        case 1:\n        case 3:\n        case 4:\n        case 7:\n        case 9:\n            desktop = 2; // (16:9)\n            break;\n        case 5:\n        case 6:\n        case 10:\n        case 11:\n            desktop = 1; // (4:3)\n            break;\n        case 2:\n        case 8:\n            desktop = 3; // (1:1)\n            break;\n        default:\n            desktop = 0; // (0:0)\n    }\n    // mobile aspect ratio\n    switch (participantsCount) {\n        case 3:\n        case 9:\n        case 10:\n            mobile = 2; // (16:9)\n            break;\n        case 2:\n        case 7:\n        case 8:\n        case 11:\n            mobile = 1; // (4:3)\n            break;\n        case 1:\n        case 4:\n        case 5:\n        case 6:\n            mobile = 3; // (1:1)\n            break;\n        default:\n            mobile = 3; // (1:1)\n    }\n    if (participantsCount > 11) {\n        desktop = 1; // (4:3)\n        mobile = 3; // (1:1)\n    }\n    setAspectRatio(isMobileDevice ? mobile : desktop);\n}\n\n/**\n * Refresh video - chat image avatar on name changes: https://eu.ui-avatars.com/\n * @param {string} videoAvatarImageId element id\n * @param {string} peerName\n * @param {boolean} useAvatar use avatar api for image\n */\nfunction setPeerAvatarImgName(videoAvatarImageId, peerName, useAvatar) {\n    let videoAvatarImageElement = getId(videoAvatarImageId);\n    if (useAvatar) {\n        // default img size 64 max 512\n        let avatarImgSize = isMobileDevice ? 128 : 256;\n        videoAvatarImageElement.setAttribute(\n            'src',\n            avatarApiUrl + '?name=' + peerName + '&size=' + avatarImgSize + '&background=random&rounded=true',\n        );\n    } else {\n        videoAvatarImageElement.setAttribute('src', avatarImg);\n    }\n}\n\n/**\n * Set Chat avatar image by peer name\n * @param {string} avatar position left/right\n * @param {string} peerName me or peer name\n */\nfunction setPeerChatAvatarImgName(avatar, peerName) {\n    let avatarImg = avatarApiUrl + '?name=' + peerName + '&size=32' + '&background=random&rounded=true';\n\n    switch (avatar) {\n        case 'left':\n            // console.log(\"Set Friend chat avatar image\");\n            leftChatAvatar = avatarImg;\n            break;\n        case 'right':\n            // console.log(\"Set My chat avatar image\");\n            rightChatAvatar = avatarImg;\n            break;\n    }\n}\n\n/**\n * On video player click, go on full screen mode ||\n * On button click, go on full screen mode.\n * Press Esc to exit from full screen mode, or click again.\n * @param {string} videoId uuid video element\n * @param {string} videoFullScreenBtnId uuid full screen btn\n * @param {string} peer_id socket.id\n */\nfunction handleVideoPlayerFs(videoId, videoFullScreenBtnId, peer_id = null) {\n    let videoPlayer = getId(videoId);\n    let videoFullScreenBtn = getId(videoFullScreenBtnId);\n\n    // handle Chrome Firefox Opera Microsoft Edge videoPlayer ESC\n    videoPlayer.addEventListener('fullscreenchange', (e) => {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n        let fullscreenElement = document.fullscreenElement;\n        if (!fullscreenElement) {\n            videoPlayer.style.pointerEvents = 'auto';\n            isVideoOnFullScreen = false;\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    });\n\n    // handle Safari videoPlayer ESC\n    videoPlayer.addEventListener('webkitfullscreenchange', (e) => {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n        let webkitIsFullScreen = document.webkitIsFullScreen;\n        if (!webkitIsFullScreen) {\n            videoPlayer.style.pointerEvents = 'auto';\n            isVideoOnFullScreen = false;\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    });\n\n    // on button click go on FS mobile/desktop\n    videoFullScreenBtn.addEventListener('click', (e) => {\n        if (videoPlayer.classList.contains('videoCircle')) {\n            return userLog('toast', 'Full Screen not allowed if video on privacy mode');\n        }\n        gotoFS();\n    });\n\n    // on video click go on FS\n    videoPlayer.addEventListener('click', (e) => {\n        if (videoPlayer.classList.contains('videoCircle')) {\n            return userLog('toast', 'Full Screen not allowed if video on privacy mode');\n        }\n        // not mobile on click go on FS or exit from FS\n        if (!isMobileDevice) {\n            gotoFS();\n        } else {\n            // mobile on click exit from FS, for enter use videoFullScreenBtn\n            if (isVideoOnFullScreen) handleFSVideo();\n        }\n    });\n\n    function gotoFS() {\n        // handle remote peer video fs\n        if (peer_id !== null) {\n            let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n            if (remoteVideoStatusBtn.className === className.videoOn) {\n                handleFSVideo();\n            } else {\n                showMsg();\n            }\n        } else {\n            // handle local video fs\n            if (myVideoStatusIcon.className === className.videoOn || isScreenStreaming) {\n                handleFSVideo();\n            } else {\n                showMsg();\n            }\n        }\n    }\n\n    function showMsg() {\n        userLog('toast', 'Full screen mode work when video is on');\n    }\n\n    function handleFSVideo() {\n        // if Controls enabled, or document on FS do nothing\n        if (videoPlayer.controls || isDocumentOnFullScreen) return;\n\n        if (!isVideoOnFullScreen) {\n            if (videoPlayer.requestFullscreen) {\n                // Chrome Firefox Opera Microsoft Edge\n                videoPlayer.requestFullscreen();\n            } else if (videoPlayer.webkitRequestFullscreen) {\n                // Safari request full screen mode\n                videoPlayer.webkitRequestFullscreen();\n            } else if (videoPlayer.msRequestFullscreen) {\n                // IE11 request full screen mode\n                videoPlayer.msRequestFullscreen();\n            }\n            isVideoOnFullScreen = true;\n            videoPlayer.style.pointerEvents = 'none';\n            // console.log(\"Go on FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        } else {\n            if (document.exitFullscreen) {\n                // Chrome Firefox Opera Microsoft Edge\n                document.exitFullscreen();\n            } else if (document.webkitCancelFullScreen) {\n                // Safari exit full screen mode ( Not work... )\n                document.webkitCancelFullScreen();\n            } else if (document.msExitFullscreen) {\n                // IE11 exit full screen mode\n                document.msExitFullscreen();\n            }\n            isVideoOnFullScreen = false;\n            videoPlayer.style.pointerEvents = 'auto';\n            // console.log(\"Esc FS isVideoOnFullScreen\", isVideoOnFullScreen);\n        }\n    }\n}\n\n/**\n * Handle file drag and drop on video element\n * @param {string} elemId element id\n * @param {string} peer_id peer id\n * @param {boolean} itsMe true/false\n */\nfunction handleFileDragAndDrop(elemId, peer_id, itsMe = false) {\n    let videoPeer = getId(elemId);\n\n    videoPeer.addEventListener('dragover', function (e) {\n        e.preventDefault();\n    });\n\n    videoPeer.addEventListener('drop', function (e) {\n        e.preventDefault();\n        if (itsMe) {\n            return userLog('warning', 'You cannot send files to yourself.');\n        }\n        if (sendInProgress) {\n            return userLog('warning', 'Please wait for the previous file to be sent.');\n        }\n        if (e.dataTransfer.items && e.dataTransfer.items.length > 1) {\n            return userLog('warning', 'Please drag and drop a single file.');\n        }\n        // Use DataTransferItemList interface to access the file(s)\n        if (e.dataTransfer.items) {\n            // If dropped items aren't files, reject them\n            let item = e.dataTransfer.items[0].webkitGetAsEntry();\n            console.log('Drag and drop', item);\n            if (item.isDirectory) {\n                return userLog('warning', 'Please drag and drop a single file not a folder.', 'top-end');\n            }\n            let file = e.dataTransfer.items[0].getAsFile();\n            sendFileInformations(file, peer_id);\n        } else {\n            // Use DataTransfer interface to access the file(s)\n            sendFileInformations(e.dataTransfer.files[0], peer_id);\n        }\n    });\n}\n\n/**\n * Handle video privacy button click event\n * @param {string} videoId\n * @param {boolean} privacyBtnId\n */\nfunction handleVideoPrivacyBtn(videoId, privacyBtnId) {\n    let video = getId(videoId);\n    let privacyBtn = getId(privacyBtnId);\n    if (useVideo && video && privacyBtn) {\n        privacyBtn.addEventListener('click', () => {\n            playSound('click');\n            isVideoPrivacyActive = !isVideoPrivacyActive;\n            setVideoPrivacyStatus(videoId, isVideoPrivacyActive);\n            emitPeerStatus('privacy', isVideoPrivacyActive);\n        });\n    } else {\n        if (privacyBtn) privacyBtn.style.display = 'none';\n    }\n}\n\n/**\n * Set video privacy status\n * @param {string} peerVideoId\n * @param {boolean} peerPrivacyActive\n */\nfunction setVideoPrivacyStatus(peerVideoId, peerPrivacyActive) {\n    let video = getId(peerVideoId);\n    if (peerPrivacyActive) {\n        video.classList.remove('videoDefault');\n        video.classList.add('videoCircle');\n        video.style.objectFit = 'cover';\n    } else {\n        video.classList.remove('videoCircle');\n        video.classList.add('videoDefault');\n        video.style.objectFit = 'var(--video-object-fit)';\n    }\n}\n\n/**\n * Handle video pin/unpin\n * @param {string} elemId video id\n * @param {string} pnId button pin id\n * @param {string} camId video wrap id\n * @param {string} peerId peer id\n * @param {boolean} isScreen stream\n */\nfunction handleVideoPinUnpin(elemId, pnId, camId, peerId, isScreen = false) {\n    let videoPlayer = getId(elemId);\n    let btnPn = getId(pnId);\n    let cam = getId(camId);\n    let videoMediaContainer = getId('videoMediaContainer');\n    let videoPinMediaContainer = getId('videoPinMediaContainer');\n    if (btnPn && videoPlayer && cam) {\n        btnPn.addEventListener('click', () => {\n            playSound('click');\n            isVideoPinned = !isVideoPinned;\n            if (isVideoPinned) {\n                if (!videoPlayer.classList.contains('videoCircle')) {\n                    videoPlayer.style.objectFit = 'contain';\n                }\n                cam.className = '';\n                cam.style.width = '100%';\n                cam.style.height = '100%';\n                toggleVideoPin(pinVideoPositionSelect.value);\n                videoPinMediaContainer.appendChild(cam);\n                videoPinMediaContainer.style.display = 'block';\n                pinnedVideoPlayerId = elemId;\n                setColor(btnPn, 'lime');\n            } else {\n                if (pinnedVideoPlayerId != videoPlayer.id) {\n                    isVideoPinned = true;\n                    return userLog('toast', 'Another video seems pinned, unpin it before to pin this one', 5000);\n                }\n                if (!isScreenStreaming) videoPlayer.style.objectFit = 'var(--video-object-fit)';\n                if (isScreen || videoPlayer.style.name == peerId + '_typeScreen')\n                    videoPlayer.style.objectFit = 'contain';\n                videoPinMediaContainer.removeChild(cam);\n                cam.className = 'Camera';\n                videoMediaContainer.appendChild(cam);\n                removeVideoPinMediaContainer(peerId, true);\n                setColor(btnPn, 'white');\n            }\n            adaptAspectRatio();\n        });\n    }\n}\n\nfunction toggleVideoPin(position) {\n    if (!isVideoPinned) return;\n    const videoMediaContainer = getId('videoMediaContainer');\n    const videoPinMediaContainer = getId('videoPinMediaContainer');\n    switch (position) {\n        case 'top':\n            videoPinMediaContainer.style.top = '25%';\n            videoPinMediaContainer.style.width = '100%';\n            videoPinMediaContainer.style.height = '70%';\n            videoMediaContainer.style.top = 0;\n            videoMediaContainer.style.width = '100%';\n            videoMediaContainer.style.height = '25%';\n            videoMediaContainer.style.right = 0;\n            break;\n        case 'vertical':\n            videoPinMediaContainer.style.top = 0;\n            videoPinMediaContainer.style.width = '75%';\n            videoPinMediaContainer.style.height = '100%';\n            videoMediaContainer.style.top = 0;\n            videoMediaContainer.style.width = '25%';\n            videoMediaContainer.style.height = '100%';\n            videoMediaContainer.style.right = 0;\n            break;\n        case 'horizontal':\n            videoPinMediaContainer.style.top = 0;\n            videoPinMediaContainer.style.width = '100%';\n            videoPinMediaContainer.style.height = '75%';\n            videoMediaContainer.style.top = '75%';\n            videoMediaContainer.style.right = null;\n            videoMediaContainer.style.width = null;\n            videoMediaContainer.style.width = '100% !important';\n            videoMediaContainer.style.height = '25%';\n            break;\n    }\n    resizeVideoMedia();\n}\n\n/**\n * Remove video pin media container\n * @param {string} peer_id aka socket.id\n * @param {boolean} force_remove force to remove\n */\nfunction removeVideoPinMediaContainer(peer_id, force_remove = false) {\n    //alert(pinnedVideoPlayerId + '==' + peer_id);\n    if (\n        (isVideoPinned && (pinnedVideoPlayerId == peer_id + '_video' || pinnedVideoPlayerId == peer_id)) ||\n        force_remove\n    ) {\n        const videoPinMediaContainer = getId('videoPinMediaContainer');\n        const videoMediaContainer = getId('videoMediaContainer');\n        videoPinMediaContainer.style.display = 'none';\n        videoMediaContainer.style.top = 0;\n        videoMediaContainer.style.right = null;\n        videoMediaContainer.style.width = '100%';\n        videoMediaContainer.style.height = '100%';\n        pinnedVideoPlayerId = null;\n        isVideoPinned = false;\n        resizeVideoMedia();\n    }\n}\n\n/**\n * Handle Video to Img click event\n * @param {string} videoStream uuid video element\n * @param {string} videoToImgBtn uuid snapshot btn\n * @param {string} peer_id socket.id\n */\nfunction handleVideoToImg(videoStream, videoToImgBtn, peer_id = null) {\n    let videoBtn = getId(videoToImgBtn);\n    let video = getId(videoStream);\n    videoBtn.addEventListener('click', () => {\n        if (video.classList.contains('videoCircle')) {\n            return userLog('toast', 'Snapshot not allowed if video on privacy mode');\n        }\n        if (peer_id !== null) {\n            // handle remote video snapshot\n            let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n            if (remoteVideoStatusBtn.className === className.videoOn) {\n                return takeSnapshot(video);\n            }\n        } else {\n            // handle local video snapshot\n            if (myVideoStatusIcon.className === className.videoOn) {\n                return takeSnapshot(video);\n            }\n        }\n        userLog('toast', 'Snapshot not work on video disabled');\n    });\n}\n\n/**\n * Save Video Frame to Image\n * @param {object} video element from where to take the snapshot\n */\nfunction takeSnapshot(video) {\n    playSound('snapshot');\n    let context, canvas, width, height, dataURL;\n    width = video.videoWidth;\n    height = video.videoHeight;\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, width, height);\n    dataURL = canvas.toDataURL('image/png'); // or image/jpeg\n    // console.log(dataURL);\n    saveDataToFile(dataURL, getDataTimeString() + '-SNAPSHOT.png');\n}\n\n/**\n * Start talk time\n */\nfunction startCountTime() {\n    countTime.style.display = 'inline';\n    callStartTime = Date.now();\n    setInterval(function printTime() {\n        callElapsedTime = Date.now() - callStartTime;\n        countTime.innerHTML = getTimeToString(callElapsedTime);\n    }, 1000);\n}\n\n/**\n * Convert time to string\n * @param {integer} time\n * @return {string} format HH:MM:SS\n */\nfunction getTimeToString(time) {\n    let diffInHrs = time / 3600000;\n    let hh = Math.floor(diffInHrs);\n    let diffInMin = (diffInHrs - hh) * 60;\n    let mm = Math.floor(diffInMin);\n    let diffInSec = (diffInMin - mm) * 60;\n    let ss = Math.floor(diffInSec);\n    let formattedHH = hh.toString().padStart(2, '0');\n    let formattedMM = mm.toString().padStart(2, '0');\n    let formattedSS = ss.toString().padStart(2, '0');\n    return `${formattedHH}:${formattedMM}:${formattedSS}`;\n}\n\n/**\n * Refresh my localMediaStream audio/video status\n * @param object} localMediaStream\n */\nfunction refreshMyVideoAudioStatus(localMediaStream) {\n    // check Track audio/video status\n    localMediaStream.getTracks().forEach((track) => {\n        switch (track.kind) {\n            case 'video':\n                myVideoStatus = track.enabled;\n                break;\n            case 'audio':\n                myAudioStatus = track.enabled;\n                break;\n        }\n    });\n}\n\n/**\n * Handle WebRTC left buttons\n */\nfunction manageLeftButtons() {\n    setShareRoomBtn();\n    setAudioBtn();\n    setVideoBtn();\n    setSwapCameraBtn();\n    setScreenShareBtn();\n    setRecordStreamBtn();\n    setFullScreenBtn();\n    setChatRoomBtn();\n    setCaptionRoomBtn();\n    setChatEmojiBtn();\n    setMyHandBtn();\n    setMyWhiteboardBtn();\n    setMyFileShareBtn();\n    setMySettingsBtn();\n    setAboutBtn();\n    setLeaveRoomBtn();\n}\n\n/**\n * Copy - share room url button click event\n */\nfunction setShareRoomBtn() {\n    shareRoomBtn.addEventListener('click', async (e) => {\n        shareRoomUrl();\n    });\n}\n\n/**\n * Audio mute - unmute button click event\n */\nfunction setAudioBtn() {\n    audioBtn.addEventListener('click', (e) => {\n        handleAudio(e, false);\n    });\n}\n\n/**\n * Video hide - show button click event\n */\nfunction setVideoBtn() {\n    videoBtn.addEventListener('click', (e) => {\n        handleVideo(e, false);\n    });\n}\n\n/**\n * Check if can swap or not the cam, if yes show the button else hide it\n */\nfunction setSwapCameraBtn() {\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\n        const videoInput = devices.filter((device) => device.kind === 'videoinput');\n        if (videoInput.length > 1 && isMobileDevice) {\n            swapCameraBtn.addEventListener('click', (e) => {\n                swapCamera();\n            });\n        } else {\n            swapCameraBtn.style.display = 'none';\n        }\n    });\n}\n\n/**\n * Check if i can share the screen, if yes show button else hide it\n */\nfunction setScreenShareBtn() {\n    if (\n        !isMobileDevice &&\n        (navigator.getDisplayMedia || navigator.mediaDevices.getDisplayMedia) &&\n        buttons.main.showScreenBtn\n    ) {\n        isScreenSharingSupported = true;\n        screenShareBtn.addEventListener('click', async (e) => {\n            await toggleScreenSharing();\n        });\n    } else {\n        screenShareBtn.style.display = 'none';\n        elemDisplay(getId('screenFpsDiv'), false);\n    }\n}\n\n/**\n * Start - Stop Stream recording\n */\nfunction setRecordStreamBtn() {\n    recordStreamBtn.addEventListener('click', (e) => {\n        if (isStreamRecording) {\n            stopStreamRecording();\n        } else {\n            startStreamRecording();\n        }\n    });\n}\n\n/**\n * Full screen button click event\n */\nfunction setFullScreenBtn() {\n    if (myBrowserName != 'Safari') {\n        // detect esc from full screen mode\n        document.addEventListener('fullscreenchange', (e) => {\n            let fullscreenElement = document.fullscreenElement;\n            if (!fullscreenElement) {\n                fullScreenBtn.className = className.fsOff;\n                isDocumentOnFullScreen = false;\n                setTippy(fullScreenBtn, 'View full screen', 'right-start');\n            }\n        });\n        fullScreenBtn.addEventListener('click', (e) => {\n            toggleFullScreen();\n        });\n    } else {\n        fullScreenBtn.style.display = 'none';\n    }\n}\n\n/**\n * Chat room buttons click event\n */\nfunction setChatRoomBtn() {\n    // adapt chat room size for mobile\n    setChatRoomAndCaptionForMobile();\n\n    // open hide chat room\n    chatRoomBtn.addEventListener('click', (e) => {\n        if (!isChatRoomVisible) {\n            showChatRoomDraggable();\n        } else {\n            hideChatRoomAndEmojiPicker();\n            e.target.className = className.chatOn;\n        }\n    });\n\n    // ghost theme + undo\n    msgerTheme.addEventListener('click', (e) => {\n        if (e.target.className == className.ghost) {\n            e.target.className = className.undo;\n            document.documentElement.style.setProperty('--msger-bg', 'rgba(0, 0, 0, 0.100)');\n        } else {\n            e.target.className = className.ghost;\n            document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n        }\n    });\n\n    // show msger participants section\n    msgerCPBtn.addEventListener('click', (e) => {\n        if (!thereIsPeerConnections()) {\n            return userLog('info', 'No participants detected');\n        }\n        msgerCP.style.display = 'flex';\n    });\n\n    // hide msger participants section\n    msgerCPCloseBtn.addEventListener('click', (e) => {\n        msgerCP.style.display = 'none';\n    });\n\n    // clean chat messages\n    msgerClean.addEventListener('click', (e) => {\n        if (chatMessages.length != 0) {\n            return cleanMessages();\n        }\n        userLog('info', 'No chat messages to delete');\n    });\n\n    // save chat messages to file\n    msgerSaveBtn.addEventListener('click', (e) => {\n        if (chatMessages.length != 0) {\n            return downloadChatMsgs();\n        }\n        userLog('info', 'No chat messages to save');\n    });\n\n    // close chat room - show left button and status menu if hide\n    msgerClose.addEventListener('click', (e) => {\n        hideChatRoomAndEmojiPicker();\n        showButtonsBarAndMenu();\n    });\n\n    // Markdown on-off\n    msgerMarkdownBtn.addEventListener('click', (e) => {\n        isChatMarkdownOn = !isChatMarkdownOn;\n        setColor(msgerMarkdownBtn, isChatMarkdownOn ? 'lime' : 'white');\n    });\n\n    // share file from chat\n    msgerShareFileBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        selectFileToShare(myPeerId, true);\n    });\n\n    // open Video Url Player\n    msgerVideoUrlBtn.addEventListener('click', (e) => {\n        sendVideoUrl();\n    });\n\n    // Execute a function when the user releases a key on the keyboard\n    msgerInput.addEventListener('keyup', (e) => {\n        // Number 13 is the \"Enter\" key on the keyboard\n        if (e.keyCode === 13 && (isMobileDevice || !e.shiftKey)) {\n            e.preventDefault();\n            msgerSendBtn.click();\n        }\n    });\n\n    // on input check 4emoji from map\n    msgerInput.oninput = function () {\n        for (let i in chatInputEmoji) {\n            let regex = new RegExp(escapeSpecialChars(i), 'gim');\n            this.value = this.value.replace(regex, chatInputEmoji[i]);\n        }\n        checkLineBreaks();\n    };\n\n    msgerInput.onpaste = () => {\n        isChatPasteTxt = true;\n        checkLineBreaks();\n    };\n\n    // clean input msg txt\n    msgerCleanTextBtn.addEventListener('click', (e) => {\n        cleanMessageInput();\n    });\n\n    // paste to input msg txt\n    msgerPasteBtn.addEventListener('click', (e) => {\n        pasteToMessageInput();\n    });\n\n    // chat show on message\n    msgerShowChatOnMsg.addEventListener('change', (e) => {\n        playSound('click');\n        showChatOnMessage = e.currentTarget.checked;\n        if (showChatOnMessage) {\n            msgPopup('info', \"Chat will be shown, when I'm receive a new message\", 'top-end', 3000);\n        } else {\n            msgPopup('info', \"Chat not will be shown, when I'm receive a new message\", 'top-end', 3000);\n        }\n    });\n\n    // chat send msg\n    msgerSendBtn.addEventListener('click', (e) => {\n        // prevent refresh page\n        e.preventDefault();\n        sendChatMessage();\n    });\n\n    // adapt input font size 4 mobile\n    if (isMobileDevice) msgerInput.style.fontSize = 'xx-small';\n}\n\n/**\n * Caption room buttons click event\n */\nfunction setCaptionRoomBtn() {\n    if (speechRecognition && buttons.main.showCaptionRoomBtn) {\n        // open hide caption\n        captionBtn.addEventListener('click', (e) => {\n            if (!isCaptionBoxVisible) {\n                showCaptionDraggable();\n            } else {\n                hideCaptionBox();\n            }\n        });\n\n        // ghost theme + undo\n        captionTheme.addEventListener('click', (e) => {\n            if (e.target.className == className.ghost) {\n                e.target.className = className.undo;\n                document.documentElement.style.setProperty('--msger-bg', 'rgba(0, 0, 0, 0.100)');\n            } else {\n                e.target.className = className.ghost;\n                document.documentElement.style.setProperty('--msger-bg', 'radial-gradient(#393939, #000000)');\n            }\n        });\n\n        // clean caption transcripts\n        captionClean.addEventListener('click', (e) => {\n            if (transcripts.length != 0) {\n                return cleanCaptions();\n            }\n            userLog('info', 'No captions to delete');\n        });\n\n        // save caption transcripts to file\n        captionSaveBtn.addEventListener('click', (e) => {\n            if (transcripts.length != 0) {\n                return downloadCaptions();\n            }\n            userLog('info', 'No captions to save');\n        });\n\n        // close caption box - show left button and status menu if hide\n        captionClose.addEventListener('click', (e) => {\n            hideCaptionBox();\n            showButtonsBarAndMenu();\n        });\n\n        // hide it\n        speechRecognitionStop.style.display = 'none';\n\n        // start recognition speech\n        speechRecognitionStart.addEventListener('click', (e) => {\n            startSpeech(true);\n        });\n        // stop recognition speech\n        speechRecognitionStop.addEventListener('click', (e) => {\n            startSpeech(false);\n        });\n    } else {\n        captionBtn.style.display = 'none';\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API#browser_compatibility\n    }\n}\n\n/**\n * Emoji picker chat room button click event\n */\nfunction setChatEmojiBtn() {\n    msgerEmojiBtn.addEventListener('click', (e) => {\n        // prevent refresh page\n        e.preventDefault();\n        hideShowEmojiPicker();\n    });\n    // Add emoji picker\n    const pickerOptions = {\n        theme: 'dark',\n        onEmojiSelect: addEmojiToMsg,\n    };\n    const emojiPicker = new EmojiMart.Picker(pickerOptions);\n    msgerEmojiPicker.appendChild(emojiPicker);\n}\n\n/**\n * Add emoji to chat message\n */\nfunction addEmojiToMsg(data) {\n    //console.log(data);\n    msgerInput.value += data.native;\n    hideShowEmojiPicker();\n}\n\n/**\n * Set my hand button click event\n */\nfunction setMyHandBtn() {\n    myHandBtn.addEventListener('click', async (e) => {\n        setMyHandStatus();\n    });\n}\n\n/**\n * Whiteboard: https://github.com/fabricjs/fabric.js\n */\nfunction setMyWhiteboardBtn() {\n    dragElement(whiteboard, whiteboardHeader);\n\n    setupWhiteboard();\n\n    whiteboardBtn.addEventListener('click', (e) => {\n        handleWhiteboardToggle();\n    });\n    whiteboardPencilBtn.addEventListener('click', (e) => {\n        whiteboardIsDrawingMode(true);\n    });\n    whiteboardObjectBtn.addEventListener('click', (e) => {\n        whiteboardIsDrawingMode(false);\n    });\n    whiteboardUndoBtn.addEventListener('click', (e) => {\n        whiteboardAction(getWhiteboardAction('undo'));\n    });\n    whiteboardRedoBtn.addEventListener('click', (e) => {\n        whiteboardAction(getWhiteboardAction('redo'));\n    });\n    whiteboardSaveBtn.addEventListener('click', (e) => {\n        wbCanvasSaveImg();\n    });\n    whiteboardImgFileBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('imgFile');\n    });\n    whiteboardImgUrlBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('imgUrl');\n    });\n    whiteboardTextBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('text');\n    });\n    whiteboardLineBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('line');\n    });\n    whiteboardRectBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('rect');\n    });\n    whiteboardCircleBtn.addEventListener('click', (e) => {\n        whiteboardAddObj('circle');\n    });\n    whiteboardEraserBtn.addEventListener('click', (e) => {\n        whiteboardIsEraser(true);\n    });\n    whiteboardCleanBtn.addEventListener('click', (e) => {\n        confirmCleanBoard();\n    });\n    whiteboardCloseBtn.addEventListener('click', (e) => {\n        handleWhiteboardToggle();\n    });\n    wbDrawingColorEl.addEventListener('change', (e) => {\n        wbCanvas.freeDrawingBrush.color = wbDrawingColorEl.value;\n        whiteboardIsDrawingMode(true);\n    });\n    wbBackgroundColorEl.addEventListener('change', (e) => {\n        setWhiteboardBgColor(wbBackgroundColorEl.value);\n    });\n    whiteboardGhostButton.addEventListener('click', (e) => {\n        wbIsBgTransparent = !wbIsBgTransparent;\n        setWhiteboardBgColor(wbIsBgTransparent ? 'rgba(0, 0, 0, 0.100)' : wbBackgroundColorEl.value);\n        //wbIsBgTransparent ? wbCanvasBackgroundColor('rgba(0, 0, 0, 0.100)'): setTheme(mirotalkTheme);\n    });\n}\n\n/**\n * File Transfer button event click\n */\nfunction setMyFileShareBtn() {\n    // make send-receive file div draggable\n    if (!isMobileDevice) {\n        dragElement(getId('sendFileDiv'), getId('imgShareSend'));\n        dragElement(getId('receiveFileDiv'), getId('imgShareReceive'));\n    }\n\n    fileShareBtn.addEventListener('click', (e) => {\n        //window.open(\"https://fromsmash.com\"); // for Big Data\n        selectFileToShare(myPeerId, true);\n    });\n    sendAbortBtn.addEventListener('click', (e) => {\n        abortFileTransfer();\n    });\n    receiveHideBtn.addEventListener('click', (e) => {\n        hideFileTransfer();\n    });\n}\n\n/**\n * My settings button click event\n */\nfunction setMySettingsBtn() {\n    mySettingsBtn.addEventListener('click', (e) => {\n        if (isMobileDevice) {\n            buttonsBar.style.display = 'none';\n            isButtonsVisible = false;\n        }\n        hideShowMySettings();\n    });\n    mySettingsCloseBtn.addEventListener('click', (e) => {\n        hideShowMySettings();\n    });\n    myPeerNameSetBtn.addEventListener('click', (e) => {\n        updateMyPeerName();\n    });\n    // Sounds\n    switchSounds.addEventListener('change', (e) => {\n        notifyBySound = e.currentTarget.checked;\n    });\n\n    // make chat room draggable for desktop\n    if (!isMobileDevice) dragElement(mySettings, mySettingsHeader);\n}\n\n/**\n * About button click event\n */\nfunction setAboutBtn() {\n    aboutBtn.addEventListener('click', (e) => {\n        showAbout();\n    });\n}\n\n/**\n * Leave room button click event\n */\nfunction setLeaveRoomBtn() {\n    leaveRoomBtn.addEventListener('click', (e) => {\n        leaveRoom();\n    });\n}\n\n/**\n * Handle left buttons - status men\u00f9 show - hide on body mouse move\n */\nfunction handleBodyOnMouseMove() {\n    document.body.addEventListener('mousemove', (e) => {\n        showButtonsBarAndMenu();\n    });\n    // detect buttons bar over\n    buttonsBar.addEventListener('mouseover', () => {\n        isButtonsBarOver = true;\n    });\n    buttonsBar.addEventListener('mouseout', () => {\n        isButtonsBarOver = false;\n    });\n    checkButtonsBarAndMenu();\n}\n\n/**\n * Setup local audio - video devices - theme ...\n */\nfunction setupMySettings() {\n    // tab buttons\n    tabDevicesBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabDevices');\n    });\n    tabBandwidthBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabBandwidth');\n    });\n    tabRoomBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabRoom');\n    });\n    tabStylingBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabStyling');\n    });\n    tabLanguagesBtn.addEventListener('click', (e) => {\n        openTab(e, 'tabLanguages');\n    });\n    // select audio input\n    audioInputSelect.addEventListener('change', (e) => {\n        myVideoChange = false;\n        refreshLocalMedia();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.audio, audioInputSelect.selectedIndex, audioInputSelect.value);\n    });\n    // select audio output\n    audioOutputSelect.addEventListener('change', (e) => {\n        changeAudioDestination();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.speaker, audioOutputSelect.selectedIndex, audioOutputSelect.value);\n    });\n    // select video input\n    videoSelect.addEventListener('change', (e) => {\n        myVideoChange = true;\n        refreshLocalMedia();\n        lS.setLocalStorageDevices(lS.MEDIA_TYPE.video, videoSelect.selectedIndex, videoSelect.value);\n    });\n    // select video quality\n    videoQualitySelect.addEventListener('change', (e) => {\n        setLocalVideoQuality();\n    });\n    // select video fps\n    videoFpsSelect.addEventListener('change', (e) => {\n        videoMaxFrameRate = parseInt(videoFpsSelect.value);\n        setLocalMaxFps(videoMaxFrameRate);\n    });\n    // default 30 fps\n    videoFpsSelect.selectedIndex = '1';\n\n    // Firefox not support video cam Fps O.o\n    if (myBrowserName === 'Firefox') {\n        videoFpsSelect.value = null;\n        videoFpsSelect.disabled = true;\n    }\n    // select screen fps\n    screenFpsSelect.addEventListener('change', (e) => {\n        screenMaxFrameRate = parseInt(screenFpsSelect.value);\n        if (isScreenStreaming) setLocalMaxFps(screenMaxFrameRate);\n    });\n    // default 30 fps\n    screenFpsSelect.selectedIndex = '1';\n\n    // Mobile not support screen sharing\n    if (isMobileDevice) {\n        screenFpsSelect.value = null;\n        screenFpsSelect.disabled = true;\n    }\n    // select themes\n    themeSelect.addEventListener('change', (e) => {\n        setTheme(themeSelect.value);\n    });\n    // video object fit\n    videoObjFitSelect.addEventListener('change', (e) => {\n        document.documentElement.style.setProperty('--video-object-fit', videoObjFitSelect.value);\n    });\n    videoObjFitSelect.selectedIndex = 2; // cover\n\n    // Mobile not support buttons bar position horizontal\n    if (isMobileDevice) {\n        btnsBarSelect.disabled = true;\n    } else {\n        btnsBarSelect.addEventListener('change', (e) => {\n            setButtonsBarPosition(btnsBarSelect.value);\n        });\n    }\n\n    // Mobile not support pin/unpin video\n    if (!isMobileDevice) {\n        pinVideoPositionSelect.addEventListener('change', (e) => {\n            toggleVideoPin(pinVideoPositionSelect.value);\n        });\n    } else {\n        getId('pinUnpinGridDiv').style.display = 'none';\n    }\n\n    // room actions\n    muteEveryoneBtn.addEventListener('click', (e) => {\n        disableAllPeers('audio');\n    });\n    hideEveryoneBtn.addEventListener('click', (e) => {\n        disableAllPeers('video');\n    });\n    ejectEveryoneBtn.addEventListener('click', (e) => {\n        ejectEveryone();\n    });\n    lockRoomBtn.addEventListener('click', (e) => {\n        handleRoomAction({ action: 'lock' }, true);\n    });\n    unlockRoomBtn.addEventListener('click', (e) => {\n        handleRoomAction({ action: 'unlock' }, true);\n    });\n}\n\n/**\n * Make video Url player draggable\n */\nfunction setupVideoUrlPlayer() {\n    if (isMobileDevice) {\n        // adapt video player iframe for mobile\n        document.documentElement.style.setProperty('--iframe-width', '320px');\n        document.documentElement.style.setProperty('--iframe-height', '240px');\n    } else {\n        dragElement(videoUrlCont, videoUrlHeader);\n        dragElement(videoAudioUrlCont, videoAudioUrlHeader);\n    }\n    videoUrlCloseBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        closeVideoUrlPlayer();\n        emitVideoPlayer('close');\n    });\n    videoAudioCloseBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        closeVideoUrlPlayer();\n        emitVideoPlayer('close');\n    });\n}\n\n/**\n * Refresh Local media audio video in - out\n */\nfunction refreshLocalMedia() {\n    // some devices can't swap the video track, if already in execution.\n    stopLocalVideoTrack();\n    stopLocalAudioTrack();\n\n    navigator.mediaDevices.getUserMedia(getAudioVideoConstraints()).then(gotStream).then(gotDevices).catch(handleError);\n}\n\n/**\n * Get audio - video constraints\n * @returns {object} audio - video constraints\n */\nfunction getAudioVideoConstraints() {\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    let videoConstraints = false;\n    if (useVideo) {\n        videoConstraints = getVideoConstraints(videoQualitySelect.value ? videoQualitySelect.value : 'default');\n        videoConstraints['deviceId'] = videoSource ? { exact: videoSource } : undefined;\n    }\n    let audioConstraints = {\n        deviceId: audioSource ? { exact: audioSource } : undefined,\n        echoCancellation: true,\n        noiseSuppression: true,\n        sampleRate: 44100,\n    };\n    const constraints = {\n        audio: audioConstraints,\n        video: videoConstraints,\n    };\n    return constraints;\n}\n\n/**\n * Get video constraints: https://webrtc.github.io/samples/src/content/getusermedia/resolution/\n * WebCam resolution: https://webcamtests.com/resolution\n * @param {string} videoQuality desired video quality\n * @returns {object} video constraints\n */\nfunction getVideoConstraints(videoQuality) {\n    let frameRate = { max: videoMaxFrameRate };\n\n    switch (videoQuality) {\n        case 'default':\n            if (forceCamMaxResolutionAndFps) {\n                // This will make the browser use the maximum resolution available as default, `up to 4K and 60fps`.\n                return {\n                    width: { ideal: 3840 },\n                    height: { ideal: 2160 },\n                    frameRate: { ideal: 60 },\n                }; // video cam constraints default\n            }\n            // This will make the browser use hdVideo and 30fps.\n            return {\n                width: { ideal: 1280 },\n                height: { ideal: 720 },\n                frameRate: { ideal: 30 },\n            }; // on default as hdVideo\n        case 'qvgaVideo':\n            return {\n                width: { exact: 320 },\n                height: { exact: 240 },\n                frameRate: frameRate,\n            }; // video cam constraints low bandwidth\n        case 'vgaVideo':\n            return {\n                width: { exact: 640 },\n                height: { exact: 480 },\n                frameRate: frameRate,\n            }; // video cam constraints medium bandwidth\n        case 'hdVideo':\n            return {\n                width: { exact: 1280 },\n                height: { exact: 720 },\n                frameRate: frameRate,\n            }; // video cam constraints high bandwidth\n        case 'fhdVideo':\n            return {\n                width: { exact: 1920 },\n                height: { exact: 1080 },\n                frameRate: frameRate,\n            }; // video cam constraints very high bandwidth\n        case '2kVideo':\n            return {\n                width: { exact: 2560 },\n                height: { exact: 1440 },\n                frameRate: frameRate,\n            }; // video cam constraints ultra high bandwidth\n        case '4kVideo':\n            return {\n                width: { exact: 3840 },\n                height: { exact: 2160 },\n                frameRate: frameRate,\n            }; // video cam constraints ultra high bandwidth\n    }\n}\n\n/**\n * Set local max fps: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints\n * @param {string} maxFrameRate desired max frame rate\n */\nfunction setLocalMaxFps(maxFrameRate) {\n    if (!useVideo) return;\n    localMediaStream\n        .getVideoTracks()[0]\n        .applyConstraints({ frameRate: { max: maxFrameRate } })\n        .then(() => {\n            logStreamSettingsInfo('setLocalMaxFps', localMediaStream);\n        })\n        .catch((err) => {\n            console.error('setLocalMaxFps', err);\n            userLog('error', \"Your device doesn't support the selected fps, please select the another one.\");\n        });\n}\n\n/**\n * Set local video quality: https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints\n */\nfunction setLocalVideoQuality() {\n    if (!useVideo) return;\n    let videoConstraints = getVideoConstraints(videoQualitySelect.value ? videoQualitySelect.value : 'default');\n    localMediaStream\n        .getVideoTracks()[0]\n        .applyConstraints(videoConstraints)\n        .then(() => {\n            logStreamSettingsInfo('setLocalVideoQuality', localMediaStream);\n            videoQualitySelectedIndex = videoQualitySelect.selectedIndex;\n        })\n        .catch((err) => {\n            videoQualitySelect.selectedIndex = videoQualitySelectedIndex;\n            console.error('setLocalVideoQuality', err);\n            userLog('error', \"Your device doesn't support the selected video quality, please select the another one.\");\n        });\n}\n\n/**\n * Change Speaker\n */\nfunction changeAudioDestination() {\n    const audioDestination = audioOutputSelect.value;\n    attachSinkId(myVideo, audioDestination);\n}\n\n/**\n * Attach audio output device to video element using device/sink ID.\n * @param {object} element video element to attach the audio output\n * @param {string} sinkId uuid audio output device\n */\nfunction attachSinkId(element, sinkId) {\n    if (typeof element.sinkId !== 'undefined') {\n        element\n            .setSinkId(sinkId)\n            .then(() => {\n                console.log(`Success, audio output device attached: ${sinkId}`);\n            })\n            .catch((err) => {\n                let errorMessage = err;\n                if (err.name === 'SecurityError')\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${err}`;\n                console.error(errorMessage);\n                // Jump back to first output device in the list as it's the default.\n                audioOutputSelect.selectedIndex = 0;\n            });\n    } else {\n        console.warn('Browser does not support output device selection.');\n    }\n}\n\n/**\n * Got Stream and append to local media\n * @param {object} stream media stream audio - video\n * @returns {object} media Devices Info\n */\nasync function gotStream(stream) {\n    await refreshMyStreamToPeers(stream, true);\n    await refreshMyLocalStream(stream, true);\n    if (myVideoChange) {\n        setMyVideoStatusTrue();\n        // This fix IPadPro - Tablet mirror of the back camera\n        if ((isMobileDevice || isIPadDevice || isTabletDevice) && !isCamMirrored) {\n            myVideo.classList.toggle('mirror');\n            isCamMirrored = true;\n        }\n    }\n    // Refresh button list in case labels have become available\n    return navigator.mediaDevices.enumerateDevices();\n}\n\n/**\n * Get audio-video Devices and show it to select box\n * https://webrtc.github.io/samples/src/content/devices/input-output/\n * https://github.com/webrtc/samples/tree/gh-pages/src/content/devices/input-output\n * @param {object} deviceInfos device infos\n */\nfunction gotDevices(deviceInfos) {\n    // Handles being called several times to update labels. Preserve values.\n    const values = selectors.map((select) => select.value);\n    selectors.forEach((select) => {\n        while (select.firstChild) {\n            select.removeChild(select.firstChild);\n        }\n    });\n    // check devices\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        // console.log(\"device-info ------> \", deviceInfo);\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        switch (deviceInfo.kind) {\n            case 'videoinput':\n                option.text = `\ud83d\udcf9 ` + deviceInfo.label || `\ud83d\udcf9 camera ${videoSelect.length + 1}`;\n                videoSelect.appendChild(option);\n                break;\n\n            case 'audioinput':\n                option.text = `\ud83c\udfa4 ` + deviceInfo.label || `\ud83c\udfa4 microphone ${audioInputSelect.length + 1}`;\n                audioInputSelect.appendChild(option);\n                break;\n\n            case 'audiooutput':\n                option.text = `\ud83d\udd08 ` + deviceInfo.label || `\ud83d\udd08 speaker ${audioOutputSelect.length + 1}`;\n                audioOutputSelect.appendChild(option);\n                break;\n\n            default:\n                console.log('Some other kind of source/device: ', deviceInfo);\n        }\n    } // end for devices\n\n    selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some((n) => n.value === values[selectorIndex])) {\n            select.value = values[selectorIndex];\n        }\n    });\n}\n\n/**\n * Handle getUserMedia error: https://blog.addpipe.com/common-getusermedia-errors/\n * @param {object} err user media error\n */\nfunction handleError(err) {\n    console.log('navigator.MediaDevices.getUserMedia error: ', err);\n    switch (err.name) {\n        case 'OverconstrainedError':\n            userLog(\n                'error',\n                \"GetUserMedia: Your device doesn't support the selected video quality or fps, please select the another one.\",\n            );\n            break;\n        default:\n            userLog('error', 'GetUserMedia error ' + err);\n    }\n}\n\n/**\n * AttachMediaStream stream to element\n * @param {object} element element to attach the stream\n * @param {object} stream media stream audio - video\n */\nfunction attachMediaStream(element, stream) {\n    //console.log(\"DEPRECATED, attachMediaStream will soon be removed.\");\n    element.srcObject = stream;\n    console.log('Success, media stream attached', stream.getTracks());\n\n    if (myBrowserName === 'Safari') {\n        /*\n            Hack for Safari...\n            https://www.pilatesanytime.com/Pilates-Help/1016/How-to-Get-Safari-to-Autoplay-Video-and-Audio-Chapters\n        */\n        element.onloadedmetadata = function () {\n            let videoPlayPromise = element.play();\n            if (videoPlayPromise !== undefined) {\n                videoPlayPromise\n                    .then(function () {\n                        console.log('Safari - automatic playback started!');\n                    })\n                    .catch(function (err) {\n                        console.error('Safari - automatic playback error', err);\n                    });\n            }\n        };\n    }\n}\n\n/**\n * Show left buttons & status\n * if buttons visible or I'm on hover do nothing return\n * if mobile and chatroom open do nothing return\n * if mobile and myCaption visible do nothing\n * if mobile and mySettings open do nothing return\n */\nfunction showButtonsBarAndMenu() {\n    if (\n        isButtonsBarOver ||\n        isButtonsVisible ||\n        (isMobileDevice && isChatRoomVisible) ||\n        (isMobileDevice && isCaptionBoxVisible) ||\n        (isMobileDevice && isMySettingsVisible)\n    )\n        return;\n    toggleClassElements('navbar', 'block');\n    buttonsBar.style.display = 'flex';\n    isButtonsVisible = true;\n}\n\n/**\n * Check every 10 sec if need to hide buttons bar and status menu\n */\nfunction checkButtonsBarAndMenu() {\n    if (!isButtonsBarOver) {\n        toggleClassElements('navbar', 'none');\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    setTimeout(() => {\n        checkButtonsBarAndMenu();\n    }, 10000);\n}\n\n/**\n * Copy room url to clipboard and share it with navigator share if supported\n * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share\n */\nasync function shareRoomUrl() {\n    // navigator share\n    if (navigator.share) {\n        try {\n            // not add title and description to load metadata from url\n            await navigator.share({ url: myRoomUrl });\n            userLog('toast', 'Room Shared successfully!');\n        } catch (err) {\n            /*\n            This feature is available only in secure contexts (HTTPS),\n            in some or all supporting browsers and mobile devices\n            console.error(\"navigator.share\", err); \n            */\n            console.error('Navigator share error', err);\n\n            shareRoomMeetingURL();\n        }\n    } else {\n        shareRoomMeetingURL();\n    }\n}\n\n/**\n * Share meeting room\n * @param {boolean} checkScreen check screen share\n */\nfunction shareRoomMeetingURL(checkScreen = false) {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Share the room',\n        html: `\n        <div id=\"qrRoomContainer\">\n            <canvas id=\"qrRoom\"></canvas>\n        </div>\n        <br/>\n        <p style=\"color:rgb(8, 189, 89);\">Join from your mobile device</p>\n        <p style=\"background:transparent; color:white;\">No need for apps, simply capture the QR code with your mobile camera Or Invite someone else to join by sending them the following URL</p>\n        <p style=\"color:rgb(8, 189, 89);\">${myRoomUrl}</p>`,\n        showDenyButton: true,\n        showCancelButton: true,\n        cancelButtonColor: 'red',\n        denyButtonColor: 'green',\n        confirmButtonText: `Copy URL`,\n        denyButtonText: `Email invite`,\n        cancelButtonText: `Close`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            copyRoomURL();\n        } else if (result.isDenied) {\n            let message = {\n                email: '',\n                subject: 'Please join our MiroTalk Video Chat Meeting',\n                body: 'Click to join: ' + myRoomUrl,\n            };\n            shareRoomByEmail(message);\n        }\n        // share screen on join room\n        if (checkScreen) checkShareScreen();\n    });\n    makeRoomQR();\n}\n\n/**\n * Make Room QR\n * https://github.com/neocotic/qrious\n */\nfunction makeRoomQR() {\n    let qr = new QRious({\n        element: getId('qrRoom'),\n        value: window.location.href,\n    });\n    qr.set({\n        size: 256,\n    });\n}\n\n/**\n * Copy Room URL to clipboard\n */\nfunction copyRoomURL() {\n    let roomURL = window.location.href;\n    let tmpInput = document.createElement('input');\n    document.body.appendChild(tmpInput);\n    tmpInput.value = roomURL;\n    tmpInput.select();\n    tmpInput.setSelectionRange(0, 99999); // For mobile devices\n    navigator.clipboard.writeText(tmpInput.value);\n    console.log('Copied to clipboard Join Link ', roomURL);\n    document.body.removeChild(tmpInput);\n    userLog('toast', 'Meeting URL copied to clipboard \ud83d\udc4d');\n}\n\n/**\n * Share room id by email\n * @param {object} message content: email | subject | body\n */\nfunction shareRoomByEmail(message) {\n    let email = message.email;\n    let subject = message.subject;\n    let emailBody = message.body;\n    document.location = 'mailto:' + email + '?subject=' + subject + '&body=' + emailBody;\n}\n\n/**\n * Handle Audio ON - OFF\n * @param {object} e event\n * @param {boolean} init on join room\n * @param {null|boolean} force audio off (default null can be true/false)\n */\nfunction handleAudio(e, init, force = null) {\n    if (!useAudio) return;\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getAudioTracks\n\n    localMediaStream.getAudioTracks()[0].enabled =\n        force != null ? force : !localMediaStream.getAudioTracks()[0].enabled;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n\n    force != null\n        ? (e.className = myAudioStatus ? className.audioOn : className.audioOff)\n        : (e.target.className = myAudioStatus ? className.audioOn : className.audioOff);\n\n    if (init) {\n        audioBtn.className = myAudioStatus ? className.audioOn : className.audioOff;\n        setTippy(initAudioBtn, myAudioStatus ? 'Stop the audio' : 'Start the audio', 'top');\n        getId('initMicrophoneSelect').disabled = !myAudioStatus;\n        getId('initSpeakerSelect').disabled = !myAudioStatus;\n    }\n    setMyAudioStatus(myAudioStatus);\n}\n\n/**\n * Handle Video ON - OFF\n * @param {object} e event\n * @param {boolean} init on join room\n * @param {null|boolean} force video off (default null can be true/false)\n */\nfunction handleVideo(e, init, force = null) {\n    if (!useVideo) return;\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks\n\n    localMediaStream.getVideoTracks()[0].enabled =\n        force != null ? force : !localMediaStream.getVideoTracks()[0].enabled;\n    myVideoStatus = localMediaStream.getVideoTracks()[0].enabled;\n\n    force != null\n        ? (e.className = myVideoStatus ? className.videoOn : className.videoOff)\n        : (e.target.className = myVideoStatus ? className.videoOn : className.videoOff);\n\n    if (init) {\n        videoBtn.className = myVideoStatus ? className.videoOn : className.videoOff;\n        setTippy(initVideoBtn, myVideoStatus ? 'Stop the video' : 'Start the video', 'top');\n        initVideo.style.display = myVideoStatus ? 'block' : 'none';\n        initVideoSelect.disabled = !myVideoStatus;\n    }\n    setMyVideoStatus(myVideoStatus);\n}\n\n/**\n * SwapCamera front (user) - rear (environment)\n */\nasync function swapCamera() {\n    // setup camera\n    let camVideo = false;\n    camera = camera == 'user' ? 'environment' : 'user';\n    camVideo = camera == 'user' ? true : { facingMode: { exact: camera } };\n\n    // some devices can't swap the cam, if have Video Track already in execution.\n    await stopLocalVideoTrack();\n\n    let camStream = null;\n\n    try {\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        camStream = await navigator.mediaDevices.getUserMedia({ video: camVideo });\n        if (camStream) {\n            await refreshMyStreamToPeers(camStream);\n            await refreshMyLocalStream(camStream);\n            await setMyVideoStatusTrue();\n            if (!isCamMirrored) {\n                myVideo.classList.toggle('mirror');\n                isCamMirrored = true;\n            }\n        }\n    } catch (err) {\n        console.log('[Error] to swapping camera', err);\n        userLog('error', 'Error to swapping the camera ' + err);\n        // https://blog.addpipe.com/common-getusermedia-errors/\n    }\n}\n\n/**\n * Stop Local Video Track\n */\nasync function stopLocalVideoTrack() {\n    if (useVideo || !isScreenStreaming) localMediaStream.getVideoTracks()[0].stop();\n}\n\n/**\n * Stop Local Audio Track\n */\nfunction stopLocalAudioTrack() {\n    localMediaStream.getAudioTracks()[0].stop();\n}\n\n/**\n * Enable - disable screen sharing\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\n */\nasync function toggleScreenSharing() {\n    screenMaxFrameRate = parseInt(screenFpsSelect.value);\n    const constraints = {\n        audio: true, // enable tab audio\n        video: { frameRate: { max: screenMaxFrameRate } },\n    }; // true | { frameRate: { max: screenMaxFrameRate } }\n\n    let screenMediaPromise = null;\n\n    try {\n        screenMediaPromise = isScreenStreaming\n            ? await navigator.mediaDevices.getUserMedia(getAudioVideoConstraints())\n            : await navigator.mediaDevices.getDisplayMedia(constraints);\n        if (screenMediaPromise) {\n            isVideoPrivacyActive = false;\n            emitPeerStatus('privacy', isVideoPrivacyActive);\n            isScreenStreaming = !isScreenStreaming;\n            if (isScreenStreaming) {\n                setMyVideoStatusTrue();\n                emitPeersAction('screenStart');\n            } else {\n                emitPeersAction('screenStop');\n                adaptAspectRatio();\n            }\n            myScreenStatus = isScreenStreaming;\n            await emitPeerStatus('screen', myScreenStatus);\n            await stopLocalVideoTrack();\n            await refreshMyLocalStream(screenMediaPromise);\n            await refreshMyStreamToPeers(screenMediaPromise);\n            myVideo.classList.toggle('mirror');\n            setScreenSharingStatus(isScreenStreaming);\n            if (myVideoAvatarImage && !useVideo)\n                myVideoAvatarImage.style.display = isScreenStreaming ? 'none' : 'block';\n            let myPrivacyBtn = getId('myPrivacyBtn');\n            if (myPrivacyBtn) myPrivacyBtn.style.display = isScreenStreaming ? 'none' : 'inline';\n            if (isScreenStreaming || isVideoPinned) getId('myVideoPinBtn').click();\n        }\n    } catch (err) {\n        console.error('[Error] Unable to share the screen', err);\n        userLog('error', 'Unable to share the screen ' + err);\n    }\n}\n\n/**\n * Set Screen Sharing Status\n * @param {boolean} status of screen sharing\n */\nfunction setScreenSharingStatus(status) {\n    screenShareBtn.className = status ? className.screenOff : className.screenOn;\n    setTippy(screenShareBtn, status ? 'Stop screen sharing' : 'Start screen sharing', 'right-start');\n}\n\n/**\n * Set myVideoStatus true\n */\nasync function setMyVideoStatusTrue() {\n    if (myVideoStatus || !useVideo) return;\n    // Put video status already ON\n    localMediaStream.getVideoTracks()[0].enabled = true;\n    myVideoStatus = true;\n    videoBtn.className = className.videoOn;\n    myVideoStatusIcon.className = className.videoOn;\n    myVideoAvatarImage.style.display = 'none';\n    emitPeerStatus('video', myVideoStatus);\n    setTippy(videoBtn, 'Stop the video', 'right-start');\n}\n\n/**\n * Enter - esc on full screen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nfunction toggleFullScreen() {\n    if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n        fullScreenBtn.className = className.fsOn;\n        isDocumentOnFullScreen = true;\n    } else {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n            fullScreenBtn.className = className.fsOff;\n            isDocumentOnFullScreen = false;\n        }\n    }\n    setTippy(fullScreenBtn, isDocumentOnFullScreen ? 'Exit full screen' : 'View full screen', 'right-start');\n}\n\n/**\n * Refresh my stream changes to connected peers in the room\n * @param {object} stream media stream audio - video\n * @param {boolean} localAudioTrackChange default false\n */\nasync function refreshMyStreamToPeers(stream, localAudioTrackChange = false) {\n    if (!thereIsPeerConnections()) return;\n\n    console.log('PEER-CONNECTIONS', peerConnections); // all peers connections in the room expect myself\n    console.log('ALL-PEERS', allPeers); // all peers connected in the room\n\n    // refresh my stream to connected peers expect myself\n    for (let peer_id in peerConnections) {\n        let peer_name = allPeers[peer_id]['peer_name'];\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders\n        let videoSender = peerConnections[peer_id]\n            .getSenders()\n            .find((s) => (s.track ? s.track.kind === 'video' : false));\n        console.log('CHECK VIDEO SENDER - ' + peer_name, videoSender);\n\n        if (videoSender) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack\n            videoSender.replaceTrack(stream.getVideoTracks()[0]);\n            console.log('REPLACE VIDEO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n        } else {\n            stream.getTracks().forEach((track) => {\n                if (track.kind === 'video') {\n                    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack\n                    peerConnections[peer_id].addTrack(track);\n                    handleRtcOffer(peer_id); // https://groups.google.com/g/discuss-webrtc/c/Ky3wf_hg1l8?pli=1\n                    console.log('ADD VIDEO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n                }\n            });\n        }\n\n        let myAudioTrack; // audio Track to replace to peers\n\n        if (stream.getAudioTracks()[0] && (localAudioTrackChange || isScreenStreaming)) {\n            myAudioTrack = stream.getAudioTracks()[0];\n        } else {\n            myAudioTrack = localMediaStream.getAudioTracks()[0];\n        }\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders\n        let audioSender = peerConnections[peer_id]\n            .getSenders()\n            .find((s) => (s.track ? s.track.kind === 'audio' : false));\n\n        if (audioSender) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack\n            audioSender.replaceTrack(myAudioTrack);\n            console.log('REPLACE AUDIO TRACK TO', { peer_id: peer_id, peer_name: peer_name });\n        }\n\n        // When share a video tab that contain audio, my voice will be turned off\n        if (isScreenStreaming && stream.getAudioTracks()[0]) {\n            setMyAudioOff('you');\n            needToEnableMyAudio = true;\n            audioBtn.disabled = true;\n        }\n        // On end screen sharing enable my audio if need\n        if (!isScreenStreaming && needToEnableMyAudio) {\n            setMyAudioOn('you');\n            needToEnableMyAudio = false;\n            audioBtn.disabled = false;\n        }\n    }\n}\n\n/**\n * Refresh my local stream\n * @param {object} stream media stream audio - video\n * @param {boolean} localAudioTrackChange default false\n */\nasync function refreshMyLocalStream(stream, localAudioTrackChange = false) {\n    if (useVideo || isScreenStreaming) stream.getVideoTracks()[0].enabled = true;\n\n    // enable audio\n    if (localAudioTrackChange && myAudioStatus === false) {\n        audioBtn.className = className.audioOn;\n        setMyAudioStatus(true);\n        myAudioStatus = true;\n    }\n\n    let newStream = null;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n    if (useVideo || isScreenStreaming) {\n        console.log('Refresh my local media stream VIDEO - AUDIO');\n        newStream = new MediaStream([\n            stream.getVideoTracks()[0],\n            localAudioTrackChange ? stream.getAudioTracks()[0] : localMediaStream.getAudioTracks()[0],\n        ]);\n    } else {\n        console.log('Refresh my local media stream AUDIO');\n        newStream = new MediaStream([\n            localAudioTrackChange ? stream.getAudioTracks()[0] : localMediaStream.getAudioTracks()[0],\n        ]);\n    }\n\n    localMediaStream = newStream;\n\n    // refresh video privacy mode on screen sharing\n    if (isScreenStreaming) {\n        isVideoPrivacyActive = false;\n        setVideoPrivacyStatus('myVideo', isVideoPrivacyActive);\n    }\n\n    // adapt video object fit on screen streaming\n    getId('myVideo').style.objectFit = isScreenStreaming ? 'contain' : 'var(--video-object-fit)';\n\n    // log newStream devices\n    logStreamSettingsInfo('refreshMyLocalStream', localMediaStream);\n\n    // start capture mic volumes\n    startPitchDetection(localMediaStream);\n\n    // attachMediaStream is a part of the adapter.js library\n    attachMediaStream(myVideo, localMediaStream); // newStream\n\n    // on toggleScreenSharing video stop\n    if (useVideo || isScreenStreaming) {\n        stream.getVideoTracks()[0].onended = () => {\n            toggleScreenSharing();\n        };\n    }\n\n    /**\n     * When you stop the screen sharing, on default i turn back to the webcam with video stream ON.\n     * If you want the webcam with video stream OFF, just disable it with the button (Stop the video),\n     * before to stop the screen sharing.\n     */\n    if (useVideo && myVideoStatus === false) localMediaStream.getVideoTracks()[0].enabled = false;\n}\n\n/**\n * Start recording time\n */\nfunction startRecordingTime() {\n    recStartTime = Date.now();\n    let rc = setInterval(function printTime() {\n        if (isStreamRecording) {\n            recElapsedTime = Date.now() - recStartTime;\n            myVideoParagraph.innerHTML = myPeerName + '&nbsp;&nbsp; \ud83d\udd34 &nbsp; REC ' + getTimeToString(recElapsedTime);\n            return;\n        }\n        clearInterval(rc);\n    }, 1000);\n}\n\n/**\n * Get MediaRecorder MimeTypes\n * @returns {boolean} is mimeType supported by media recorder\n */\nfunction getSupportedMimeTypes() {\n    const possibleTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=vp8,opus',\n        'video/webm;codecs=h264,opus',\n        'video/mp4;codecs=h264,aac',\n        'video/mp4',\n    ];\n    return possibleTypes.filter((mimeType) => {\n        return MediaRecorder.isTypeSupported(mimeType);\n    });\n}\n\n/**\n * Start Recording\n * https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/record\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n */\nfunction startStreamRecording() {\n    recordedBlobs = [];\n\n    let options = getSupportedMimeTypes();\n    console.log('MediaRecorder options supported', options);\n    options = { mimeType: options[0] }; // select the first available as mimeType\n\n    try {\n        if (isMobileDevice) {\n            // on mobile devices recording camera + audio\n            mediaRecorder = new MediaRecorder(localMediaStream, options);\n            console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n            handleMediaRecorder(mediaRecorder);\n        } else {\n            // on desktop devices recording screen + audio\n            screenMaxFrameRate = parseInt(screenFpsSelect.value);\n            const constraints = {\n                video: { frameRate: { max: screenMaxFrameRate } },\n            };\n            let recScreenStreamPromise = navigator.mediaDevices.getDisplayMedia(constraints);\n            recScreenStreamPromise\n                .then((screenStream) => {\n                    const newStream = new MediaStream([\n                        screenStream.getVideoTracks()[0],\n                        localMediaStream.getAudioTracks()[0],\n                    ]);\n                    recScreenStream = newStream;\n                    mediaRecorder = new MediaRecorder(recScreenStream, options);\n                    console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n                    isRecScreenStream = true;\n                    handleMediaRecorder(mediaRecorder);\n                })\n                .catch((err) => {\n                    console.error('[Error] Unable to recording the screen + audio', err);\n                    userLog('error', 'Unable to recording the screen + audio ' + err);\n                });\n        }\n    } catch (err) {\n        console.error('Exception while creating MediaRecorder: ', err);\n        return userLog('error', \"Can't start stream recording: \" + err);\n    }\n}\n\n/**\n * Notify me if someone start to recording they screen + audio\n * @param {string} from peer_name\n * @param {string} action recording action\n */\nfunction notifyRecording(from, action) {\n    let msg = '[ \ud83d\udd34 REC ] : ' + action + ' to recording his own screen and audio';\n    let chatMessage = {\n        from: from,\n        to: myPeerName,\n        msg: msg,\n        privateMsg: false,\n    };\n    handleDataChannelChat(chatMessage);\n    userLog('toast', from + ' ' + msg);\n}\n\n/**\n * Handle Media Recorder\n * @param {object} mediaRecorder\n */\nfunction handleMediaRecorder(mediaRecorder) {\n    mediaRecorder.start();\n    mediaRecorder.addEventListener('start', handleMediaRecorderStart);\n    mediaRecorder.addEventListener('dataavailable', handleMediaRecorderData);\n    mediaRecorder.addEventListener('stop', handleMediaRecorderStop);\n}\n\n/**\n * Handle Media Recorder onstart event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderStart(event) {\n    playSound('recStart');\n    if (isRecScreenStream) {\n        emitPeersAction('recStart');\n        emitPeerStatus('rec', isRecScreenStream);\n    }\n    console.log('MediaRecorder started: ', event);\n    isStreamRecording = true;\n    recordStreamBtn.style.setProperty('color', '#ff4500');\n    startRecordingTime();\n    setTippy(recordStreamBtn, 'Stop recording', 'right-start');\n    if (isMobileDevice) {\n        swapCameraBtn.style.display = 'none';\n    }\n}\n\n/**\n * Handle Media Recorder ondata event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderData(event) {\n    console.log('MediaRecorder data: ', event);\n    if (event.data && event.data.size > 0) recordedBlobs.push(event.data);\n}\n\n/**\n * Handle Media Recorder onstop event\n * @param {object} event of media recorder\n */\nfunction handleMediaRecorderStop(event) {\n    playSound('recStop');\n    console.log('MediaRecorder stopped: ', event);\n    console.log('MediaRecorder Blobs: ', recordedBlobs);\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n    isStreamRecording = false;\n    if (isRecScreenStream) {\n        recScreenStream.getTracks().forEach((track) => {\n            if (track.kind === 'video') track.stop();\n        });\n        isRecScreenStream = false;\n        emitPeersAction('recStop');\n        emitPeerStatus('rec', isRecScreenStream);\n    }\n    recordStreamBtn.style.setProperty('color', '#000');\n    downloadRecordedStream();\n    setTippy(recordStreamBtn, 'Start recording', 'right-start');\n    if (isMobileDevice) {\n        swapCameraBtn.style.display = 'block';\n    }\n}\n\n/**\n * Stop recording\n */\nfunction stopStreamRecording() {\n    mediaRecorder.stop();\n}\n\n/**\n * Download recorded stream\n */\nfunction downloadRecordedStream() {\n    try {\n        const type = recordedBlobs[0].type.includes('mp4') ? 'mp4' : 'webm';\n        const blob = new Blob(recordedBlobs, { type: 'video/' + type });\n        const recFileName = getDataTimeString() + '-REC.' + type;\n        const currentDevice = isMobileDevice ? 'MOBILE' : 'PC';\n        const blobFileSize = bytesToSize(blob.size);\n\n        userLog(\n            'success-html',\n            `<div style=\"text-align: left;\">\n                \ud83d\udd34 &nbsp; Recording Info: <br/>\n                <ul>\n                    <li>File: ${recFileName}</li>\n                    <li>Size: ${blobFileSize}</li>\n                </ul>\n                <br/>\n                Please wait to be processed, then will be downloaded to your ${currentDevice} device.\n            </div>`,\n        );\n\n        saveBlobToFile(blob, recFileName);\n    } catch (err) {\n        userLog('error', 'Recording save failed: ' + err);\n    }\n}\n\n/**\n * Create Chat Room Data Channel\n * @param {string} peer_id socket.id\n */\nfunction createChatDataChannel(peer_id) {\n    chatDataChannels[peer_id] = peerConnections[peer_id].createDataChannel('mirotalk_chat_channel');\n    chatDataChannels[peer_id].onopen = (event) => {\n        console.log('chatDataChannels created', event);\n    };\n}\n\n/**\n * Set the chat room on full screen mode for mobile\n */\nfunction setChatRoomAndCaptionForMobile() {\n    if (isMobileDevice) {\n        document.documentElement.style.setProperty('--msger-height', '99%');\n        document.documentElement.style.setProperty('--msger-width', '99%');\n    } else {\n        // make chat room draggable for desktop\n        dragElement(msgerDraggable, msgerHeader);\n        // make caption draggable for desktop\n        dragElement(captionDraggable, captionHeader);\n    }\n}\n\n/**\n * Show msger draggable on center screen position\n */\nfunction showChatRoomDraggable() {\n    playSound('newMessage');\n    if (isMobileDevice) {\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    chatRoomBtn.className = className.chatOff;\n    msgerDraggable.style.top = '50%';\n    msgerDraggable.style.left = isMobileDevice ? '50%' : '25%';\n    msgerDraggable.style.display = 'flex';\n    isChatRoomVisible = true;\n    setTippy(chatRoomBtn, 'Close the chat', 'right-start');\n}\n\n/**\n * Show caption box draggable on center screen position\n */\nfunction showCaptionDraggable() {\n    playSound('newMessage');\n    if (isMobileDevice) {\n        buttonsBar.style.display = 'none';\n        isButtonsVisible = false;\n    }\n    captionBtn.className = 'far fa-closed-captioning';\n    captionDraggable.style.top = '50%';\n    captionDraggable.style.left = isMobileDevice ? '50' : '75%';\n    captionDraggable.style.display = 'flex';\n    isCaptionBoxVisible = true;\n    setTippy(captionBtn, 'Close the caption', 'right-start');\n}\n\n/**\n * Clean chat messages\n */\nfunction cleanMessages() {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Clean up chat messages?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean chat messages\n        if (result.isConfirmed) {\n            let msgs = msgerChat.firstChild;\n            while (msgs) {\n                msgerChat.removeChild(msgs);\n                msgs = msgerChat.firstChild;\n            }\n            // clean object\n            chatMessages = [];\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Clean captions\n */\nfunction cleanCaptions() {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Clean up all caption transcripts?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean chat messages\n        if (result.isConfirmed) {\n            let captions = captionChat.firstChild;\n            while (captions) {\n                captionChat.removeChild(captions);\n                captions = captionChat.firstChild;\n            }\n            // clean object\n            transcripts = [];\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Hide chat room and emoji picker\n */\nfunction hideChatRoomAndEmojiPicker() {\n    msgerDraggable.style.display = 'none';\n    msgerEmojiPicker.style.display = 'none';\n    msgerEmojiBtn.style.color = '#FFFFFF';\n    chatRoomBtn.className = className.chatOn;\n    isChatRoomVisible = false;\n    isChatEmojiVisible = false;\n    setTippy(chatRoomBtn, 'Open the chat', 'right-start');\n}\n\n/**\n * Hide chat room and emoji picker\n */\nfunction hideCaptionBox() {\n    captionDraggable.style.display = 'none';\n    captionBtn.className = className.captionOn;\n    isCaptionBoxVisible = false;\n    setTippy(captionBtn, 'Open the caption', 'right-start');\n}\n\n/**\n * Send Chat messages to peers in the room\n */\nfunction sendChatMessage() {\n    if (!thereIsPeerConnections()) {\n        cleanMessageInput();\n        isChatPasteTxt = false;\n        return userLog('info', \"Can't send message, no participants in the room\");\n    }\n\n    const msg = checkMsg(msgerInput.value.trim());\n\n    // empty msg or\n    if (!msg) {\n        isChatPasteTxt = false;\n        return cleanMessageInput();\n    }\n\n    emitMsg(myPeerName, 'toAll', msg, false, myPeerId);\n    appendMessage(myPeerName, rightChatAvatar, 'right', msg, false);\n    cleanMessageInput();\n}\n\n/**\n * handle Incoming Data Channel Chat Messages\n * @param {object} data chat messages\n */\nfunction handleDataChannelChat(data) {\n    if (!data) return;\n\n    // prevent XSS injection from remote peer through Data Channel\n    const dataMessage = JSON.parse(filterXSS(JSON.stringify(data)));\n\n    let msgFrom = dataMessage.from;\n    let msgTo = dataMessage.to;\n    let msg = dataMessage.msg;\n    let msgPrivate = dataMessage.privateMsg;\n    let msgId = dataMessage.id;\n\n    // private message but not for me return\n    if (msgPrivate && msgTo != myPeerName) return;\n\n    console.log('handleDataChannelChat', dataMessage);\n\n    // chat message for me also\n    if (!isChatRoomVisible && showChatOnMessage) {\n        showChatRoomDraggable();\n        chatRoomBtn.className = className.chatOff;\n    }\n    // show message from\n    if (!showChatOnMessage) {\n        userLog('toast', `New message from: ${msgFrom}`);\n    }\n\n    playSound('chatMessage');\n    setPeerChatAvatarImgName('left', msgFrom);\n    appendMessage(msgFrom, leftChatAvatar, 'left', msg, msgPrivate, msgId);\n}\n\n/**\n * Clean input txt message\n */\nfunction cleanMessageInput() {\n    msgerInput.value = '';\n    msgerInput.style.height = '25px';\n}\n\n/**\n * Paste from clipboard to input txt message\n */\nfunction pasteToMessageInput() {\n    navigator.clipboard\n        .readText()\n        .then((text) => {\n            msgerInput.value += text;\n            isChatPasteTxt = true;\n            checkLineBreaks();\n        })\n        .catch((err) => {\n            console.error('Failed to read clipboard contents: ', err);\n        });\n}\n\n/**\n * Handle text transcript getting from peers\n * @param {object} config data\n */\nfunction handleDataChannelSpeechTranscript(config) {\n    handleSpeechTranscript(config);\n}\n\n/**\n * Handle text transcript getting from peers\n * @param {object} config data\n */\nfunction handleSpeechTranscript(config) {\n    if (!config) return;\n\n    let time_stamp = getFormatDate(new Date());\n    let name = config.peer_name;\n    let avatar_image = avatarApiUrl + '?name=' + name + '&size=32' + '&background=random&rounded=true';\n    let transcipt = config.text_data;\n\n    console.log('Handle speech transcript', config);\n\n    if (!isCaptionBoxVisible) showCaptionDraggable();\n\n    const msgHTML = `\n\t<div class=\"msg left-msg\">\n\t\t<div class=\"msg-img\" style=\"background-image: url('${avatar_image}')\"></div>\n\t\t<div class=\"msg-caption-bubble\">\n            <div class=\"msg-info\">\n                <div class=\"msg-info-name\">${name} : ${time_stamp}</div>\n            </div>\n            <div class=\"msg-text\">${transcipt}</div>\n        </div>\n\t</div>\n    `;\n    captionChat.insertAdjacentHTML('beforeend', msgHTML);\n    captionChat.scrollTop += 500;\n    transcripts.push({\n        time: time_stamp,\n        name: name,\n        caption: transcipt,\n    });\n    playSound('speech');\n}\n\n/**\n * Escape Special Chars\n * @param {string} regex string to replace\n */\nfunction escapeSpecialChars(regex) {\n    return regex.replace(/([()[{*+.$^\\\\|?])/g, '\\\\$1');\n}\n\n/**\n * Append Message to msger chat room\n * @param {string} from peer name\n * @param {string} img images url\n * @param {string} side left/right\n * @param {string} msg message to append\n * @param {boolean} privateMsg if is private message\n * @param {string} msgId peer id\n */\nfunction appendMessage(from, img, side, msg, privateMsg, msgId = null) {\n    let time = getFormatDate(new Date());\n\n    // collect chat msges to save it later\n    chatMessages.push({\n        time: time,\n        from: from,\n        msg: msg,\n        privateMsg: privateMsg,\n    });\n\n    // check if i receive a private message\n    let msgBubble = privateMsg ? 'private-msg-bubble' : 'msg-bubble';\n\n    let msgHTML = `\n\t<div id=\"msg-${chatMessagesId}\" class=\"msg ${side}-msg\">\n\t\t<div class=\"msg-img\" style=\"background-image: url('${img}')\"></div>\n\t\t<div class=${msgBubble}>\n            <div class=\"msg-info\">\n                <div class=\"msg-info-name\">${from}</div>\n                <div class=\"msg-info-time\">${time}</div>\n            </div>\n            <div id=\"${chatMessagesId}\" class=\"msg-text\">${msg}\n                <hr/>\n    `;\n    // add btn direct reply to private message\n    if (privateMsg && msgId != null && msgId != myPeerId) {\n        msgHTML += `\n                <button \n                    class=\"${className.msgPrivate}\"\n                    id=\"msg-private-reply-${chatMessagesId}\"\n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"sendPrivateMsgToPeer('${myPeerId}','${from}')\"\n                ></button>`;\n    }\n    msgHTML += `\n                <button\n                    id=\"msg-delete-${chatMessagesId}\"\n                    class=\"${className.trash}\"\n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"deleteMessage('msg-${chatMessagesId}')\"\n                ></button>\n                <button\n                    id=\"msg-copy-${chatMessagesId}\"\n                    class=\"${className.copy}\" \n                    style=\"color:#fff; border:none; background:transparent;\"\n                    onclick=\"copyToClipboard('${chatMessagesId}')\"\n                ></button>\n            </div>\n        </div>\n\t</div>\n    `;\n    msgerChat.insertAdjacentHTML('beforeend', msgHTML);\n    msgerChat.scrollTop += 500;\n    setTippy(getId('msg-delete-' + chatMessagesId), 'Delete', 'top');\n    setTippy(getId('msg-copy-' + chatMessagesId), 'Copy', 'top');\n    setTippy(getId('msg-private-reply-' + chatMessagesId), 'Reply', 'top');\n    chatMessagesId++;\n}\n\n/**\n * Delete message\n * @param {string} id msg id\n */\nfunction deleteMessage(id) {\n    playSound('newMessage');\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: 'Delete this messages?',\n        imageUrl: deleteImg,\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        // clean this message\n        if (result.isConfirmed) {\n            getId(id).remove();\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Copy the element innerText on clipboard\n * @param {string} id\n */\nfunction copyToClipboard(id) {\n    const text = getId(id).innerText;\n    navigator.clipboard\n        .writeText(text)\n        .then(() => {\n            msgPopup('success', 'Message copied!', 'top-end', 1000);\n        })\n        .catch((err) => {\n            msgPopup('error', err, 'top-end', 2000);\n        });\n}\n\n/**\n * Add participants in the chat room lists\n * @param {object} peers all peers info connected to the same room\n */\nasync function msgerAddPeers(peers) {\n    // console.log(\"peers\", peers);\n    // add all current Participants\n    for (let peer_id in peers) {\n        let peer_name = peers[peer_id]['peer_name'];\n        // bypass insert to myself in the list :)\n        if (peer_id != myPeerId && peer_name) {\n            let exsistMsgerPrivateDiv = getId(peer_id + '_pMsgDiv');\n            // if there isn't add it....\n            if (!exsistMsgerPrivateDiv) {\n                let msgerPrivateDiv = `\n                <div id=\"${peer_id}_pMsgDiv\" class=\"msger-peer-inputarea\">\n                    <img id=\"${peer_id}_pMsgAvatar\" src='${avatarApiUrl}?name=${peer_name}&size=24&background=random&rounded=true'> \n                    <textarea\n                        rows=\"1\"\n                        cols=\"1\"\n                        id=\"${peer_id}_pMsgInput\"\n                        class=\"msger-input\"\n                        placeholder=\"\ud83d\udcac Enter your message...\"\n                    ></textarea>\n                    <button id=\"${peer_id}_pMsgBtn\" class=\"${className.msgPrivate}\" value=\"${peer_name}\"></button>\n                </div>\n                `;\n                msgerCPList.insertAdjacentHTML('beforeend', msgerPrivateDiv);\n                msgerCPList.scrollTop += 500;\n\n                let msgerPrivateMsgInput = getId(peer_id + '_pMsgInput');\n                let msgerPrivateBtn = getId(peer_id + '_pMsgBtn');\n                addMsgerPrivateBtn(msgerPrivateBtn, msgerPrivateMsgInput, myPeerId);\n            }\n        }\n    }\n}\n\n/**\n * Search peer by name in chat room lists to send the private messages\n */\nfunction searchPeer() {\n    let searchPeerBarName = getId('searchPeerBarName').value;\n    let msgerPeerInputarea = getEcN('msger-peer-inputarea');\n    searchPeerBarName = searchPeerBarName.toLowerCase();\n    for (let i = 0; i < msgerPeerInputarea.length; i++) {\n        if (!msgerPeerInputarea[i].innerHTML.toLowerCase().includes(searchPeerBarName)) {\n            msgerPeerInputarea[i].style.display = 'none';\n        } else {\n            msgerPeerInputarea[i].style.display = 'flex';\n        }\n    }\n}\n\n/**\n * Remove participant from chat room lists\n * @param {string} peer_id socket.id\n */\nfunction msgerRemovePeer(peer_id) {\n    let msgerPrivateDiv = getId(peer_id + '_pMsgDiv');\n    if (msgerPrivateDiv) {\n        let peerToRemove = msgerPrivateDiv.firstChild;\n        while (peerToRemove) {\n            msgerPrivateDiv.removeChild(peerToRemove);\n            peerToRemove = msgerPrivateDiv.firstChild;\n        }\n        msgerPrivateDiv.remove();\n    }\n}\n\n/**\n * Setup msger buttons to send private messages\n * @param {object} msgerPrivateBtn chat private message send button\n * @param {object} msgerPrivateMsgInput chat private message text input\n * @param {string} peerId chat peer_id\n */\nfunction addMsgerPrivateBtn(msgerPrivateBtn, msgerPrivateMsgInput, peerId) {\n    // add button to send private messages\n    msgerPrivateBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        sendPrivateMessage();\n    });\n\n    // Number 13 is the \"Enter\" key on the keyboard\n    msgerPrivateMsgInput.addEventListener('keyup', (e) => {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            sendPrivateMessage();\n        }\n    });\n\n    msgerPrivateMsgInput.onpaste = () => {\n        isChatPasteTxt = true;\n    };\n\n    function sendPrivateMessage() {\n        let pMsg = msgerPrivateMsgInput.value.trim();\n\n        // let pMsg = checkMsg(msgerPrivateMsgInput.value.trim());\n        // if (!pMsg) {\n        //     msgerPrivateMsgInput.value = '';\n        //     isChatPasteTxt = false;\n        //     return;\n        // }\n        let toPeerName = msgerPrivateBtn.value;\n        emitMsg(myPeerName, toPeerName, pMsg, true, peerId);\n        appendMessage(myPeerName, rightChatAvatar, 'right', pMsg + '<hr>Private message to ' + toPeerName, true);\n        msgerPrivateMsgInput.value = '';\n        msgerCP.style.display = 'none';\n    }\n}\n\n/**\n * Check Message\n * Detect url from text and make it clickable\n * If url is a img to create preview of it\n * Prevent XSS (strip html part)\n * @param {string} text passed text\n * @returns {string} html format\n */\nfunction checkMsg(text) {\n    if (text.trim().length == 0) return;\n    if (isHtml(text)) return sanitizeHtml(text);\n    if (isValidHttpURL(text)) {\n        if (isImageURL(text)) return '<img src=\"' + text + '\" alt=\"img\" width=\"180\" height=\"auto\"/>';\n        if (isVideoTypeSupported(text)) return getIframe(text);\n        return '<a href=\"' + text + '\" target=\"_blank\" class=\"msg-a\">' + text + '</a>';\n    }\n    if (isChatMarkdownOn) return marked.parse(text);\n    let pre = '<pre>' + text + '</pre>';\n    if (isChatPasteTxt) {\n        isChatPasteTxt = false;\n        return pre;\n    }\n    if (getLineBreaks(text) > 1) {\n        return pre;\n    }\n    return text;\n}\n\n/**\n * Sanitize Html\n * @param {string} html code\n * @returns Html as string\n */\nfunction sanitizeHtml(str) {\n    const tagsToReplace = { '&': '&amp;', '<': '&lt;', '>': '&gt;' };\n    const replaceTag = (tag) => tagsToReplace[tag] || tag;\n    const safe_tags_replace = (str) => str.replace(/[&<>]/g, replaceTag);\n    return safe_tags_replace(str);\n}\n\n/**\n * Check if string contain html\n * @param {string} str\n * @returns\n */\nfunction isHtml(str) {\n    let a = document.createElement('div');\n    a.innerHTML = str;\n    for (let c = a.childNodes, i = c.length; i--; ) {\n        if (c[i].nodeType == 1) return true;\n    }\n    return false;\n}\n\n/**\n * Check if valid URL\n * @param {string} str to check\n * @returns boolean true/false\n */\nfunction isValidHttpURL(str) {\n    let url;\n    try {\n        url = new URL(str);\n    } catch (_) {\n        return false;\n    }\n    return url.protocol === 'http:' || url.protocol === 'https:';\n}\n\n/**\n * Check if url passed is a image\n * @param {string} url to check\n * @returns {boolean} true/false\n */\nfunction isImageURL(url) {\n    return url.match(/\\.(jpeg|jpg|gif|png|tiff|bmp)$/) != null;\n}\n\n/**\n * Get IFrame from URL\n * @param {string} url\n * @returns html iframe\n */\nfunction getIframe(url) {\n    let is_youtube = getVideoType(url) == 'na' ? true : false;\n    let video_audio_url = is_youtube ? getYoutubeEmbed(url) : url;\n    return `\n    <iframe\n        title=\"Chat-IFrame\"\n        src=\"${video_audio_url}\"\n        width=\"auto\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n    ></iframe>`;\n}\n\n/**\n * Get text Line breaks\n * @param {string} text\n * @returns integer lines\n */\nfunction getLineBreaks(text) {\n    return (text.match(/\\n/g) || []).length;\n}\n\n/**\n * Check chat input line breaks\n */\nfunction checkLineBreaks() {\n    msgerInput.style.height = '';\n    if (getLineBreaks(msgerInput.value) > 0) {\n        msgerInput.style.height = '200px';\n    }\n}\n\n/**\n * Format date\n * @param {object} date\n * @returns {string} date format h:m:s\n */\nfunction getFormatDate(date) {\n    const time = date.toTimeString().split(' ')[0];\n    return `${time}`;\n}\n\n/**\n * Send message over Secure dataChannels\n * @param {string} from peer name\n * @param {string} to peer name\n * @param {string} msg message to send\n * @param {boolean} privateMsg if is a private message\n * @param {string} id peer_id\n */\nfunction emitMsg(from, to, msg, privateMsg, id) {\n    if (!msg) return;\n\n    let chatMessage = {\n        type: 'chat',\n        from: from,\n        id: id,\n        to: to,\n        msg: msg,\n        privateMsg: privateMsg,\n    };\n    console.log('Send msg', chatMessage);\n    sendToDataChannel(chatMessage);\n}\n\n/**\n * Hide - Show emoji picker div\n */\nfunction hideShowEmojiPicker() {\n    if (!isChatEmojiVisible) {\n        msgerEmojiPicker.style.display = 'block';\n        msgerEmojiBtn.style.color = '#FFFF00';\n        isChatEmojiVisible = true;\n        return;\n    }\n    msgerEmojiPicker.style.display = 'none';\n    msgerEmojiBtn.style.color = '#FFFFFF';\n    isChatEmojiVisible = false;\n}\n\n/**\n * Download Chat messages in json format\n * https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n */\nfunction downloadChatMsgs() {\n    let a = document.createElement('a');\n    a.href = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(chatMessages, null, 1));\n    a.download = getDataTimeString() + '-CHAT.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    playSound('download');\n}\n\n/**\n * Download Captions in json format\n * https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n */\nfunction downloadCaptions() {\n    let a = document.createElement('a');\n    a.href = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(transcripts, null, 1));\n    a.download = getDataTimeString() + roomId + '-CAPTIONS.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    playSound('download');\n}\n\n/**\n * Hide - show my settings\n */\nfunction hideShowMySettings() {\n    if (!isMySettingsVisible) {\n        playSound('newMessage');\n        // adapt it for mobile\n        if (isMobileDevice) {\n            mySettings.style.setProperty('width', '100%');\n            mySettings.style.setProperty('height', '100%');\n            document.documentElement.style.setProperty('--mySettings-select-w', '99%');\n        }\n        // my current peer name\n        myPeerNameSet.placeholder = myPeerName;\n        // center screen on show\n        mySettings.style.top = '50%';\n        mySettings.style.left = '50%';\n        mySettings.style.display = 'block';\n        isMySettingsVisible = true;\n        return;\n    }\n    mySettings.style.display = 'none';\n    isMySettingsVisible = false;\n}\n\n/**\n * Handle html tab settings\n * https://www.w3schools.com/howto/howto_js_tabs.asp\n * @param {object} evt event\n * @param {string} tabName name of the tab to open\n */\nfunction openTab(evt, tabName) {\n    let i, tabcontent, tablinks;\n    tabcontent = getEcN('tabcontent');\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = 'none';\n    }\n    tablinks = getEcN('tablinks');\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(' active', '');\n    }\n    getId(tabName).style.display = 'block';\n    evt.currentTarget.className += ' active';\n}\n\n/**\n * Update myPeerName to other peers in the room\n */\nfunction updateMyPeerName() {\n    const myNewPeerName = myPeerNameSet.value;\n    const myOldPeerName = myPeerName;\n\n    // myNewPeerName empty\n    if (!myNewPeerName) return;\n\n    // prevent XSS injection to remote peer\n    if (isHtml(myNewPeerName)) return userLog('warning', 'Invalid name!');\n\n    myPeerName = myNewPeerName;\n    myVideoParagraph.innerHTML = myPeerName + ' (me)';\n\n    sendToServer('peerName', {\n        room_id: roomId,\n        peer_name_old: myOldPeerName,\n        peer_name_new: myPeerName,\n    });\n\n    myPeerNameSet.value = '';\n    myPeerNameSet.placeholder = myPeerName;\n\n    window.localStorage.peer_name = myPeerName;\n\n    setPeerAvatarImgName('myVideoAvatarImage', myPeerName, useAvatarApi);\n    setPeerChatAvatarImgName('right', myPeerName);\n    userLog('toast', 'My name changed to ' + myPeerName);\n}\n\n/**\n * Append updated peer name to video player\n * @param {object} config data\n */\nfunction handlePeerName(config) {\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let videoName = getId(peer_id + '_name');\n    if (videoName) videoName.innerHTML = peer_name;\n    // change also avatar and btn value - name on chat lists....\n    let msgerPeerName = getId(peer_id + '_pMsgBtn');\n    let msgerPeerAvatar = getId(peer_id + '_pMsgAvatar');\n    if (msgerPeerName) msgerPeerName.value = peer_name;\n    if (msgerPeerAvatar)\n        msgerPeerAvatar.src = `${avatarApiUrl}?name=${peer_name}&size=24&background=random&rounded=true`;\n    // refresh also peer video avatar name\n    setPeerAvatarImgName(peer_id + '_avatar', peer_name, useAvatarApi);\n}\n\n/**\n * Send my Video-Audio-Hand... status\n * @param {string} element typo\n * @param {boolean} status true/false\n */\nasync function emitPeerStatus(element, status) {\n    sendToServer('peerStatus', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        element: element,\n        status: status,\n    });\n}\n\n/**\n * Set my Hand Status and Icon\n */\nfunction setMyHandStatus() {\n    if (myHandStatus) {\n        // Raise hand\n        myHandStatus = false;\n        setTippy(myHandBtn, 'Raise your hand', 'right-start');\n    } else {\n        // Lower hand\n        myHandStatus = true;\n        setTippy(myHandBtn, 'Lower your hand', 'right-start');\n        playSound('raiseHand');\n    }\n    myHandStatusIcon.style.display = myHandStatus ? 'inline' : 'none';\n    emitPeerStatus('hand', myHandStatus);\n}\n\n/**\n * Set My Audio Status Icon and Title\n * @param {boolean} status of my audio\n */\nfunction setMyAudioStatus(status) {\n    myAudioStatusIcon.className = status ? className.audioOn : className.audioOff;\n    // send my audio status to all peers in the room\n    emitPeerStatus('audio', status);\n    setTippy(myAudioStatusIcon, status ? 'My audio is on' : 'My audio is off', 'bottom');\n    setTippy(audioBtn, status ? 'Stop the audio' : 'Start the audio', 'right-start');\n    status ? playSound('on') : playSound('off');\n}\n\n/**\n * Set My Video Status Icon and Title\n * @param {boolean} status of my video\n */\nfunction setMyVideoStatus(status) {\n    // on vdeo OFF display my video avatar name\n    if (myVideoAvatarImage) myVideoAvatarImage.style.display = status ? 'none' : 'block';\n    if (myVideoStatusIcon) myVideoStatusIcon.className = status ? className.videoOn : className.videoOff;\n    // send my video status to all peers in the room\n    emitPeerStatus('video', status);\n    if (!isMobileDevice) {\n        if (myVideoStatusIcon) setTippy(myVideoStatusIcon, status ? 'My video is on' : 'My video is off', 'bottom');\n        setTippy(videoBtn, status ? 'Stop the video' : 'Start the video', 'right-start');\n    }\n    status ? playSound('on') : playSound('off');\n}\n\n/**\n * Handle peer audio - video - hand - privacy status\n * @param {object} config data\n */\nfunction handlePeerStatus(config) {\n    //\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let element = config.element;\n    let status = config.status;\n\n    switch (element) {\n        case 'video':\n            setPeerVideoStatus(peer_id, status);\n            break;\n        case 'audio':\n            setPeerAudioStatus(peer_id, status);\n            break;\n        case 'hand':\n            setPeerHandStatus(peer_id, peer_name, status);\n            break;\n        case 'privacy':\n            setVideoPrivacyStatus(peer_id + '_video', status);\n            break;\n    }\n}\n\n/**\n * Set Participant Hand Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {string} peer_name peer name\n * @param {boolean} status of the hand\n */\nfunction setPeerHandStatus(peer_id, peer_name, status) {\n    let peerHandStatus = getId(peer_id + '_handStatus');\n    peerHandStatus.style.display = status ? 'inline' : 'none';\n    if (status) {\n        userLog('toast', peer_name + ' has raised the hand');\n        playSound('raiseHand');\n    }\n}\n\n/**\n * Set Participant Audio Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {boolean} status of peer audio\n */\nfunction setPeerAudioStatus(peer_id, status) {\n    let peerAudioStatus = getId(peer_id + '_audioStatus');\n    if (peerAudioStatus) {\n        peerAudioStatus.className = status ? className.audioOn : className.audioOff;\n        setTippy(peerAudioStatus, status ? 'Participant audio is on' : 'Participant audio is off', 'bottom');\n        status ? playSound('on') : playSound('off');\n    }\n}\n\n/**\n * Handle Peer audio volume 0/100\n * @param {string} audioVolumeId audio volume input id\n * @param {string} mediaId media id\n */\nfunction handleAudioVolume(audioVolumeId, mediaId) {\n    let media = getId(mediaId);\n    let audioVolume = getId(audioVolumeId);\n    if (audioVolume && media) {\n        audioVolume.style.maxWidth = '40px';\n        audioVolume.style.display = 'inline';\n        audioVolume.style.cursor = 'pointer';\n        audioVolume.value = 100;\n        audioVolume.addEventListener('input', () => {\n            media.volume = audioVolume.value / 100;\n        });\n    }\n}\n\n/**\n * Mute Audio to specific user in the room\n * @param {string} peer_id socket.id\n */\nfunction handlePeerAudioBtn(peer_id) {\n    if (!buttons.remote.audioBtnClickAllowed) return;\n    let peerAudioBtn = getId(peer_id + '_audioStatus');\n    peerAudioBtn.onclick = () => {\n        if (peerAudioBtn.className === className.audioOn) disablePeer(peer_id, 'audio');\n    };\n}\n\n/**\n * Hide Video to specified peer in the room\n * @param {string} peer_id socket.id\n */\nfunction handlePeerVideoBtn(peer_id) {\n    if (!useVideo || !buttons.remote.videoBtnClickAllowed) return;\n    let peerVideoBtn = getId(peer_id + '_videoStatus');\n    peerVideoBtn.onclick = () => {\n        if (peerVideoBtn.className === className.videoOn) disablePeer(peer_id, 'video');\n    };\n}\n\n/**\n * Send Private Message to specific peer\n * @param {string} peer_id socket.id\n * @param {string} toPeerName peer name to send message\n */\nfunction handlePeerPrivateMsg(peer_id, toPeerName) {\n    let peerPrivateMsg = getId(peer_id + '_privateMsg');\n    peerPrivateMsg.onclick = (e) => {\n        e.preventDefault();\n        sendPrivateMsgToPeer(myPeerId, toPeerName);\n    };\n}\n\n/**\n * Send Private messages to peers\n * @param {string} toPeerId\n * @param {string} toPeerName\n */\nfunction sendPrivateMsgToPeer(toPeerId, toPeerName) {\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: messageImg,\n        title: 'Send private message',\n        input: 'text',\n        showCancelButton: true,\n        confirmButtonText: `Send`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.value) {\n            let pMsg = checkMsg(result.value);\n            if (!pMsg) {\n                isChatPasteTxt = false;\n                return;\n            }\n            emitMsg(myPeerName, toPeerName, pMsg, true, toPeerId);\n            appendMessage(\n                myPeerName,\n                rightChatAvatar,\n                'right',\n                pMsg + '<br/><hr>Private message to ' + toPeerName,\n                true,\n            );\n            userLog('toast', 'Message sent to ' + toPeerName + ' \ud83d\udc4d');\n        }\n    });\n}\n\n/**\n * Handle peer send file\n * @param {string} peer_id\n */\nfunction handlePeerSendFile(peer_id) {\n    let peerFileSendBtn = getId(peer_id + '_shareFile');\n    peerFileSendBtn.onclick = () => {\n        selectFileToShare(peer_id);\n    };\n}\n\n/**\n * Send video - audio URL to specific peer\n * @param {string} peer_id socket.id\n */\nfunction handlePeerVideoAudioUrl(peer_id) {\n    let peerYoutubeBtn = getId(peer_id + '_videoAudioUrl');\n    peerYoutubeBtn.onclick = () => {\n        sendVideoUrl(peer_id);\n    };\n}\n\n/**\n * Set Participant Video Status Icon and Title\n * @param {string} peer_id socket.id\n * @param {boolean} status of peer video\n */\nfunction setPeerVideoStatus(peer_id, status) {\n    let peerVideoAvatarImage = getId(peer_id + '_avatar');\n    let peerVideoStatus = getId(peer_id + '_videoStatus');\n    if (peerVideoAvatarImage) peerVideoAvatarImage.style.display = status ? 'none' : 'block';\n    if (peerVideoStatus) {\n        peerVideoStatus.className = status ? className.videoOn : className.videoOff;\n        setTippy(peerVideoStatus, status ? 'Participant video is on' : 'Participant video is off', 'bottom');\n        status ? playSound('on') : playSound('off');\n    }\n}\n\n/**\n * Emit actions to all peers in the same room except yourself\n * @param {object} peerAction to all peers\n */\nasync function emitPeersAction(peerAction) {\n    if (!thereIsPeerConnections()) return;\n\n    sendToServer('peerAction', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        peer_id: myPeerId,\n        peer_use_video: useVideo,\n        peer_action: peerAction,\n        send_to_all: true,\n    });\n}\n\n/**\n * Emit actions to specified peer in the same room\n * @param {string} peer_id socket.id\n * @param {object} peerAction to specified peer\n */\nasync function emitPeerAction(peer_id, peerAction) {\n    if (!thereIsPeerConnections()) return;\n\n    sendToServer('peerAction', {\n        room_id: roomId,\n        peer_id: peer_id,\n        peer_use_video: useVideo,\n        peer_name: myPeerName,\n        peer_action: peerAction,\n        send_to_all: false,\n    });\n}\n\n/**\n * Handle received peer actions\n * @param {object} config data\n */\nfunction handlePeerAction(config) {\n    // console.log('Handle peer action: ', config);\n\n    let peer_id = config.peer_id;\n    let peer_name = config.peer_name;\n    let peer_use_video = config.peer_use_video;\n    let peer_action = config.peer_action;\n\n    switch (peer_action) {\n        case 'muteAudio':\n            setMyAudioOff(peer_name);\n            break;\n        case 'hideVideo':\n            setMyVideoOff(peer_name);\n            break;\n        case 'recStart':\n            notifyRecording(peer_name, 'Started');\n            break;\n        case 'recStop':\n            notifyRecording(peer_name, 'Stopped');\n            break;\n        case 'screenStart':\n            handleScreenStart(peer_id);\n            break;\n        case 'screenStop':\n            handleScreenStop(peer_id, peer_use_video);\n            break;\n        case 'ejectAll':\n            handleKickedOut(config);\n            break;\n    }\n}\n\n/**\n * Handle Screen Start\n * @param {string} peer_id\n */\nfunction handleScreenStart(peer_id) {\n    let remoteVideoAvatarImage = getId(peer_id + '_avatar');\n    let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n    let remoteVideoStream = getId(peer_id + '_video');\n    if (remoteVideoStatusBtn) {\n        remoteVideoStatusBtn.className = className.videoOn;\n        setTippy(remoteVideoStatusBtn, 'Participant screen share is on', 'bottom');\n    }\n    if (remoteVideoStream) {\n        getId(peer_id + '_pinUnpin').click();\n        remoteVideoStream.style.objectFit = 'contain';\n        remoteVideoStream.style.name = peer_id + '_typeScreen';\n    }\n    if (remoteVideoAvatarImage) {\n        remoteVideoAvatarImage.style.display = 'none';\n    }\n}\n\n/**\n * Handle Screen Stop\n * @param {string} peer_id\n * @param {boolean} peer_use_video\n */\nfunction handleScreenStop(peer_id, peer_use_video) {\n    let remoteVideoStream = getId(peer_id + '_video');\n    let remoteVideoAvatarImage = getId(peer_id + '_avatar');\n    let remoteVideoStatusBtn = getId(peer_id + '_videoStatus');\n    if (remoteVideoStatusBtn) {\n        remoteVideoStatusBtn.className = className.videoOff;\n        setTippy(remoteVideoStatusBtn, 'Participant screen share is off', 'bottom');\n    }\n    if (remoteVideoStream) {\n        if (isVideoPinned) getId(peer_id + '_pinUnpin').click();\n        remoteVideoStream.style.objectFit = 'var(--video-object-fit)';\n        remoteVideoStream.style.name = peer_id + '_typeCam';\n        adaptAspectRatio();\n    }\n    if (remoteVideoAvatarImage && remoteVideoStream && !peer_use_video) {\n        remoteVideoAvatarImage.style.display = 'block';\n        remoteVideoStream.srcObject.getVideoTracks().forEach((track) => {\n            track.enabled = false;\n        });\n    } else {\n        if (remoteVideoAvatarImage) {\n            remoteVideoAvatarImage.style.display = 'none';\n        }\n    }\n}\n\n/**\n * Set my Audio off and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyAudioOff(peer_name) {\n    if (myAudioStatus === false || !useAudio) return;\n    localMediaStream.getAudioTracks()[0].enabled = false;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n    audioBtn.className = className.audioOff;\n    setMyAudioStatus(myAudioStatus);\n    userLog('toast', peer_name + ' has disabled your audio');\n    playSound('off');\n}\n\n/**\n * Set my Audio on and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyAudioOn(peer_name) {\n    if (myAudioStatus === true || !useAudio) return;\n    localMediaStream.getAudioTracks()[0].enabled = true;\n    myAudioStatus = localMediaStream.getAudioTracks()[0].enabled;\n    audioBtn.className = className.audioOn;\n    setMyAudioStatus(myAudioStatus);\n    userLog('toast', peer_name + ' has enabled your audio');\n    playSound('on');\n}\n\n/**\n * Set my Video off and Popup the peer name that performed this action\n * @param {string} peer_name peer name\n */\nfunction setMyVideoOff(peer_name) {\n    if (myVideoStatus === false || !useVideo) return;\n    localMediaStream.getVideoTracks()[0].enabled = false;\n    myVideoStatus = localMediaStream.getVideoTracks()[0].enabled;\n    videoBtn.className = className.videoOff;\n    setMyVideoStatus(myVideoStatus);\n    userLog('toast', peer_name + ' has disabled your video');\n    playSound('off');\n}\n\n/**\n * Mute or Hide everyone except yourself\n * @param {string} element type audio/video\n */\nfunction disableAllPeers(element) {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: element == 'audio' ? audioOffImg : camOffImg,\n        title: element == 'audio' ? 'Mute everyone except yourself?' : 'Hide everyone except yourself?',\n        text:\n            element == 'audio'\n                ? \"Once muted, you won't be able to unmute them, but they can unmute themselves at any time.\"\n                : \"Once hided, you won't be able to unhide them, but they can unhide themselves at any time.\",\n        showDenyButton: true,\n        confirmButtonText: element == 'audio' ? `Mute` : `Hide`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            switch (element) {\n                case 'audio':\n                    userLog('toast', 'Mute everyone \ud83d\udc4d');\n                    emitPeersAction('muteAudio');\n                    break;\n                case 'video':\n                    userLog('toast', 'Hide everyone \ud83d\udc4d');\n                    emitPeersAction('hideVideo');\n                    break;\n            }\n        }\n    });\n}\n\n/**\n * Eject all participants in the room expect yourself\n */\nfunction ejectEveryone() {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        imageUrl: kickedOutImg,\n        position: 'center',\n        title: 'Eject everyone except yourself?',\n        text: 'Are you sure to want eject all participants from the room?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            emitPeersAction('ejectAll');\n        }\n    });\n}\n\n/**\n * Mute or Hide specific peer\n * @param {string} peer_id socket.id\n * @param {string} element type audio/video\n */\nfunction disablePeer(peer_id, element) {\n    if (!thereIsPeerConnections()) {\n        return userLog('info', 'No participants detected');\n    }\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: element == 'audio' ? audioOffImg : camOffImg,\n        title: element == 'audio' ? 'Mute this participant?' : 'Hide this participant?',\n        text:\n            element == 'audio'\n                ? \"Once muted, you won't be able to unmute them, but they can unmute themselves at any time.\"\n                : \"Once hided, you won't be able to unhide them, but they can unhide themselves at any time.\",\n        showDenyButton: true,\n        confirmButtonText: element == 'audio' ? `Mute` : `Hide`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            switch (element) {\n                case 'audio':\n                    userLog('toast', 'Mute audio \ud83d\udc4d');\n                    emitPeerAction(peer_id, 'muteAudio');\n                    break;\n                case 'video':\n                    userLog('toast', 'Hide video \ud83d\udc4d');\n                    emitPeerAction(peer_id, 'hideVideo');\n                    break;\n            }\n        }\n    });\n}\n\n/**\n * Handle Room action\n * @param {object} config data\n * @param {boolean} emit data to signaling server\n */\nfunction handleRoomAction(config, emit = false) {\n    if (emit) {\n        let thisConfig = {\n            room_id: roomId,\n            peer_name: myPeerName,\n            action: config.action,\n            password: null,\n        };\n        switch (config.action) {\n            case 'lock':\n                playSound('newMessage');\n\n                Swal.fire({\n                    allowOutsideClick: false,\n                    allowEscapeKey: false,\n                    showDenyButton: true,\n                    background: swalBackground,\n                    imageUrl: roomLockedImg,\n                    input: 'text',\n                    inputPlaceholder: 'Set Room password',\n                    confirmButtonText: `OK`,\n                    denyButtonText: `Cancel`,\n                    showClass: {\n                        popup: 'animate__animated animate__fadeInDown',\n                    },\n                    hideClass: {\n                        popup: 'animate__animated animate__fadeOutUp',\n                    },\n                    inputValidator: (pwd) => {\n                        if (!pwd) return 'Please enter the Room password';\n                        thisRoomPassword = pwd;\n                    },\n                }).then((result) => {\n                    if (result.isConfirmed) {\n                        thisConfig.password = thisRoomPassword;\n                        sendToServer('roomAction', thisConfig);\n                        handleRoomStatus(thisConfig);\n                    }\n                });\n                break;\n            case 'unlock':\n                sendToServer('roomAction', thisConfig);\n                handleRoomStatus(thisConfig);\n                break;\n        }\n    } else {\n        // data coming from signaling server\n        handleRoomStatus(config);\n    }\n}\n\n/**\n * Handle room status\n * @param {object} config data\n */\nfunction handleRoomStatus(config) {\n    let action = config.action;\n    let peer_name = config.peer_name;\n    switch (action) {\n        case 'lock':\n            playSound('locked');\n            userLog('toast', peer_name + ' has \ud83d\udd12 LOCKED the room by password', 'top-end');\n            elemDisplay(lockRoomBtn, false);\n            elemDisplay(unlockRoomBtn, true);\n            isRoomLocked = true;\n            break;\n        case 'unlock':\n            userLog('toast', peer_name + ' has \ud83d\udd13 UNLOCKED the room', 'top-end');\n            elemDisplay(unlockRoomBtn, false);\n            elemDisplay(lockRoomBtn, true);\n            isRoomLocked = false;\n            break;\n        case 'checkPassword':\n            let password = config.password;\n            isRoomLocked = true;\n            password == 'OK' ? joinToChannel() : handleRoomLocked();\n            break;\n    }\n}\n\n/**\n * Room is locked you provide a wrong password, can't access!\n */\nfunction handleRoomLocked() {\n    playSound('eject');\n\n    console.log('Room is Locked, try with another one');\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        position: 'center',\n        imageUrl: roomLockedImg,\n        title: 'Oops, Wrong Room Password',\n        text: 'The room is locked, try with another one.',\n        showDenyButton: false,\n        confirmButtonText: `Ok`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) openURL('/newcall');\n    });\n}\n\n/**\n * Try to unlock the room by providing a valid password\n */\nfunction handleUnlockTheRoom() {\n    playSound('alert');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        background: swalBackground,\n        imageUrl: roomLockedImg,\n        title: 'Oops, Room is Locked',\n        input: 'text',\n        inputPlaceholder: 'Enter the Room password',\n        confirmButtonText: `OK`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n        inputValidator: (pwd) => {\n            if (!pwd) return 'Please enter the Room password';\n            thisRoomPassword = pwd;\n        },\n    }).then(() => {\n        let config = {\n            room_id: roomId,\n            peer_name: myPeerName,\n            action: 'checkPassword',\n            password: thisRoomPassword,\n        };\n        sendToServer('roomAction', config);\n        elemDisplay(lockRoomBtn, false);\n        elemDisplay(unlockRoomBtn, true);\n    });\n}\n\n/**\n * Handle whiteboard toogle\n */\nfunction handleWhiteboardToggle() {\n    thereIsPeerConnections() ? whiteboardAction(getWhiteboardAction('toggle')) : toggleWhiteboard();\n}\n\n/**\n * Whiteboard: Show-Hide\n */\nfunction toggleWhiteboard() {\n    if (!wbIsOpen) playSound('newMessage');\n    whiteboard.classList.toggle('show');\n    whiteboard.style.top = '50%';\n    whiteboard.style.left = '50%';\n    wbIsOpen = wbIsOpen ? false : true;\n}\n\n/**\n * Whiteboard: setup\n */\nfunction setupWhiteboard() {\n    setupWhiteboardCanvas();\n    setupWhiteboardCanvasSize();\n    setupWhiteboardLocalListners();\n}\n\n/**\n * Whiteboard: setup canvas\n */\nfunction setupWhiteboardCanvas() {\n    wbCanvas = new fabric.Canvas('wbCanvas');\n    wbCanvas.freeDrawingBrush.color = '#FFFFFF';\n    wbCanvas.freeDrawingBrush.width = 3;\n    whiteboardIsDrawingMode(true);\n}\n\n/**\n * Whiteboard: setup canvas size\n */\nfunction setupWhiteboardCanvasSize() {\n    let optimalSize = [wbWidth, wbHeight];\n    let scaleFactorX = window.innerWidth / optimalSize[0];\n    let scaleFactorY = window.innerHeight / optimalSize[1];\n    if (scaleFactorX < scaleFactorY && scaleFactorX < 1) {\n        wbCanvas.setWidth(optimalSize[0] * scaleFactorX);\n        wbCanvas.setHeight(optimalSize[1] * scaleFactorX);\n        wbCanvas.setZoom(scaleFactorX);\n        setWhiteboardSize(optimalSize[0] * scaleFactorX, optimalSize[1] * scaleFactorX);\n    } else if (scaleFactorX > scaleFactorY && scaleFactorY < 1) {\n        wbCanvas.setWidth(optimalSize[0] * scaleFactorY);\n        wbCanvas.setHeight(optimalSize[1] * scaleFactorY);\n        wbCanvas.setZoom(scaleFactorY);\n        setWhiteboardSize(optimalSize[0] * scaleFactorY, optimalSize[1] * scaleFactorY);\n    } else {\n        wbCanvas.setWidth(optimalSize[0]);\n        wbCanvas.setHeight(optimalSize[1]);\n        wbCanvas.setZoom(1);\n        setWhiteboardSize(optimalSize[0], optimalSize[1]);\n    }\n    wbCanvas.calcOffset();\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: setup size\n * @param {string} w width\n * @param {string} h height\n */\nfunction setWhiteboardSize(w, h) {\n    document.documentElement.style.setProperty('--wb-width', w);\n    document.documentElement.style.setProperty('--wb-height', h);\n}\n\n/**\n * Set whiteboard background color\n * @param {string} color whiteboard bg\n */\nfunction setWhiteboardBgColor(color) {\n    let config = {\n        room_id: roomId,\n        peer_name: myPeerName,\n        action: 'bgcolor',\n        color: color,\n    };\n    whiteboardAction(config);\n}\n\n/**\n * Whiteboard: drawing mode\n * @param {boolean} status of drawing mode\n */\nfunction whiteboardIsDrawingMode(status) {\n    wbCanvas.isDrawingMode = status;\n    if (status) {\n        setColor(whiteboardPencilBtn, 'green');\n        setColor(whiteboardObjectBtn, 'white');\n        setColor(whiteboardEraserBtn, 'white');\n        wbIsEraser = false;\n    } else {\n        setColor(whiteboardPencilBtn, 'white');\n        setColor(whiteboardObjectBtn, 'green');\n    }\n}\n\n/**\n * Whiteboard: eraser\n * @param {boolean} status if eraser on\n */\nfunction whiteboardIsEraser(status) {\n    whiteboardIsDrawingMode(false);\n    wbIsEraser = status;\n    setColor(whiteboardEraserBtn, wbIsEraser ? 'green' : 'white');\n}\n\n/**\n * Set color to specific element\n * @param {object} elem element\n * @param {string} color to set\n */\nfunction setColor(elem, color) {\n    elem.style.color = color;\n}\n\n/**\n * Whiteboard: Add object to canvas\n * @param {string} type of object to add\n */\nfunction whiteboardAddObj(type) {\n    switch (type) {\n        case 'imgUrl':\n            Swal.fire({\n                background: swalBackground,\n                title: 'Image URL',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonText: 'OK',\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasImgURL = result.value;\n                    if (isImageURL(wbCanvasImgURL)) {\n                        fabric.Image.fromURL(wbCanvasImgURL, function (myImg) {\n                            addWbCanvasObj(myImg);\n                        });\n                    } else {\n                        userLog('error', 'The URL is not a valid image');\n                    }\n                }\n            });\n            break;\n        case 'imgFile':\n            Swal.fire({\n                allowOutsideClick: false,\n                background: swalBackground,\n                position: 'center',\n                title: 'Select image',\n                input: 'file',\n                inputAttributes: {\n                    accept: wbImageInput,\n                    'aria-label': 'Select image',\n                },\n                showDenyButton: true,\n                confirmButtonText: `OK`,\n                denyButtonText: `Cancel`,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasImg = result.value;\n                    if (wbCanvasImg && wbCanvasImg.size > 0) {\n                        let reader = new FileReader();\n                        reader.onload = function (event) {\n                            let imgObj = new Image();\n                            imgObj.src = event.target.result;\n                            imgObj.onload = function () {\n                                let image = new fabric.Image(imgObj);\n                                image.set({ top: 0, left: 0 }).scale(0.3);\n                                addWbCanvasObj(image);\n                            };\n                        };\n                        reader.readAsDataURL(wbCanvasImg);\n                    } else {\n                        userLog('error', 'File not selected or empty');\n                    }\n                }\n            });\n            break;\n        case 'text':\n            Swal.fire({\n                background: swalBackground,\n                title: 'Enter the text',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonText: 'OK',\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let wbCanvasText = result.value;\n                    if (wbCanvasText) {\n                        const text = new fabric.Text(wbCanvasText, {\n                            top: 0,\n                            left: 0,\n                            fontFamily: 'Comfortaa',\n                            fill: wbCanvas.freeDrawingBrush.color,\n                            strokeWidth: wbCanvas.freeDrawingBrush.width,\n                            stroke: wbCanvas.freeDrawingBrush.color,\n                        });\n                        addWbCanvasObj(text);\n                    }\n                }\n            });\n            break;\n        case 'line':\n            const line = new fabric.Line([50, 100, 200, 200], {\n                top: 0,\n                left: 0,\n                fill: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n                stroke: wbCanvas.freeDrawingBrush.color,\n            });\n            addWbCanvasObj(line);\n            break;\n        case 'circle':\n            const circle = new fabric.Circle({\n                radius: 50,\n                fill: 'transparent',\n                stroke: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n            });\n            addWbCanvasObj(circle);\n            break;\n        case 'rect':\n            const rect = new fabric.Rect({\n                top: 0,\n                left: 0,\n                width: 150,\n                height: 100,\n                fill: 'transparent',\n                stroke: wbCanvas.freeDrawingBrush.color,\n                strokeWidth: wbCanvas.freeDrawingBrush.width,\n            });\n            addWbCanvasObj(rect);\n            break;\n    }\n}\n\n/**\n * Whiteboard: add object\n * @param {object} obj to add\n */\nfunction addWbCanvasObj(obj) {\n    if (obj) {\n        wbCanvas.add(obj);\n        whiteboardIsDrawingMode(false);\n        wbCanvasToJson();\n    }\n}\n\n/**\n * Whiteboard: Local listners\n */\nfunction setupWhiteboardLocalListners() {\n    wbCanvas.on('mouse:down', function (e) {\n        mouseDown(e);\n    });\n    wbCanvas.on('mouse:up', function () {\n        mouseUp();\n    });\n    wbCanvas.on('mouse:move', function () {\n        mouseMove();\n    });\n    wbCanvas.on('object:added', function () {\n        objectAdded();\n    });\n}\n\n/**\n * Whiteboard: mouse down\n * @param {object} e event\n * @returns\n */\nfunction mouseDown(e) {\n    wbIsDrawing = true;\n    if (wbIsEraser && e.target) {\n        wbCanvas.remove(e.target);\n        return;\n    }\n}\n\n/**\n * Whiteboard: mouse up\n */\nfunction mouseUp() {\n    wbIsDrawing = false;\n    wbCanvasToJson();\n}\n\n/**\n * Whiteboard: mouse move\n * @returns\n */\nfunction mouseMove() {\n    if (wbIsEraser) {\n        wbCanvas.hoverCursor = 'not-allowed';\n        return;\n    } else {\n        wbCanvas.hoverCursor = 'move';\n    }\n    if (!wbIsDrawing) return;\n}\n\n/**\n * Whiteboard: tmp objects\n */\nfunction objectAdded() {\n    if (!wbIsRedoing) wbPop = [];\n    wbIsRedoing = false;\n}\n\n/**\n * Whiteboard: set background color\n * @param {string} color to set\n */\nfunction wbCanvasBackgroundColor(color) {\n    document.documentElement.style.setProperty('--wb-bg', color);\n    wbBackgroundColorEl.value = color;\n    wbCanvas.setBackgroundColor(color);\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: undo\n */\nfunction wbCanvasUndo() {\n    if (wbCanvas._objects.length > 0) {\n        wbPop.push(wbCanvas._objects.pop());\n        wbCanvas.renderAll();\n    }\n}\n\n/**\n * Whiteboard: redo\n */\nfunction wbCanvasRedo() {\n    if (wbPop.length > 0) {\n        wbIsRedoing = true;\n        wbCanvas.add(wbPop.pop());\n    }\n}\n\n/**\n * Whiteboard: save as images png\n */\nfunction wbCanvasSaveImg() {\n    const dataURL = wbCanvas.toDataURL({\n        width: wbCanvas.getWidth(),\n        height: wbCanvas.getHeight(),\n        left: 0,\n        top: 0,\n        format: 'png',\n    });\n    const dataNow = getDataTimeString();\n    const fileName = `whiteboard-${dataNow}.png`;\n    saveDataToFile(dataURL, fileName);\n    playSound('ok');\n}\n\n/**\n * Whiteboard: save data to file\n * @param {object} dataURL to download\n * @param {string} fileName to save\n */\nfunction saveDataToFile(dataURL, fileName) {\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = dataURL;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(dataURL);\n    }, 100);\n}\n\n/**\n * Whiteboard: canvas objects to json\n */\nfunction wbCanvasToJson() {\n    if (thereIsPeerConnections()) {\n        let config = {\n            room_id: roomId,\n            wbCanvasJson: JSON.stringify(wbCanvas.toJSON()),\n        };\n        sendToServer('wbCanvasToJson', config);\n    }\n}\n\n/**\n * If whiteboard opened, update canvas to all peers connected\n */\nasync function wbUpdate() {\n    if (wbIsOpen && thereIsPeerConnections()) wbCanvasToJson();\n}\n\n/**\n * Whiteboard: json to canvas objects\n * @param {object} config data\n */\nfunction handleJsonToWbCanvas(config) {\n    if (!wbIsOpen) toggleWhiteboard();\n\n    wbCanvas.loadFromJSON(config.wbCanvasJson);\n    wbCanvas.renderAll();\n}\n\n/**\n * Whiteboard: actions\n * @param {string} action whiteboard action\n * @returns {object} data\n */\nfunction getWhiteboardAction(action) {\n    return {\n        room_id: roomId,\n        peer_name: myPeerName,\n        action: action,\n    };\n}\n\n/**\n * Whiteboard: Clean content\n */\nfunction confirmCleanBoard() {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        imageUrl: deleteImg,\n        position: 'center',\n        title: 'Clean the board',\n        text: 'Are you sure you want to clean the board?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            whiteboardAction(getWhiteboardAction('clear'));\n            playSound('delete');\n        }\n    });\n}\n\n/**\n * Whiteboard: actions\n * @param {object} config data\n */\nfunction whiteboardAction(config) {\n    if (thereIsPeerConnections()) {\n        sendToServer('whiteboardAction', config);\n    }\n    handleWhiteboardAction(config, false);\n}\n\n/**\n * Whiteboard: handle actions\n * @param {object} config data\n * @param {boolean} logme popup action\n */\nfunction handleWhiteboardAction(config, logme = true) {\n    if (logme) {\n        userLog('toast', `${config.peer_name} whiteboard action: ${config.action}`);\n    }\n    switch (config.action) {\n        case 'bgcolor':\n            wbCanvasBackgroundColor(config.color);\n            break;\n        case 'undo':\n            wbCanvasUndo();\n            break;\n        case 'redo':\n            wbCanvasRedo();\n            break;\n        case 'clear':\n            wbCanvas.clear();\n            break;\n        case 'toggle':\n            toggleWhiteboard();\n            break;\n        //...\n    }\n}\n\n/**\n * Create File Sharing Data Channel\n * @param {string} peer_id socket.id\n */\nfunction createFileSharingDataChannel(peer_id) {\n    fileDataChannels[peer_id] = peerConnections[peer_id].createDataChannel('mirotalk_file_sharing_channel');\n    fileDataChannels[peer_id].binaryType = 'arraybuffer';\n    fileDataChannels[peer_id].onopen = (event) => {\n        console.log('fileDataChannels created', event);\n    };\n}\n\n/**\n * Handle File Sharing\n * @param {object} data received\n */\nfunction handleDataChannelFileSharing(data) {\n    if (!receiveInProgress) return;\n    receiveBuffer.push(data);\n    receivedSize += data.byteLength;\n    receiveProgress.value = receivedSize;\n    receiveFilePercentage.innerHTML =\n        'Receive progress: ' + ((receivedSize / incomingFileInfo.file.fileSize) * 100).toFixed(2) + '%';\n    if (receivedSize === incomingFileInfo.file.fileSize) {\n        receiveFileDiv.style.display = 'none';\n        incomingFileData = receiveBuffer;\n        receiveBuffer = [];\n        endDownload();\n    }\n}\n\n/**\n * Send File Data trought datachannel\n * https://webrtc.github.io/samples/src/content/datachannel/filetransfer/\n * https://github.com/webrtc/samples/blob/gh-pages/src/content/datachannel/filetransfer/js/main.js\n *\n * @param {string} peer_id peer id\n * @param {boolean} broadcast sent to all or not\n */\nfunction sendFileData(peer_id, broadcast) {\n    console.log('Send file ' + fileToSend.name + ' size ' + bytesToSize(fileToSend.size) + ' type ' + fileToSend.type);\n\n    sendInProgress = true;\n\n    sendFileInfo.innerHTML =\n        'File name: ' +\n        fileToSend.name +\n        '<br>' +\n        'File type: ' +\n        fileToSend.type +\n        '<br>' +\n        'File size: ' +\n        bytesToSize(fileToSend.size) +\n        '<br>';\n\n    sendFileDiv.style.display = 'inline';\n    sendProgress.max = fileToSend.size;\n    fileReader = new FileReader();\n    let offset = 0;\n\n    fileReader.addEventListener('error', (err) => console.error('fileReader error', err));\n    fileReader.addEventListener('abort', (e) => console.log('fileReader aborted', e));\n    fileReader.addEventListener('load', (e) => {\n        if (!sendInProgress) return;\n\n        // peer to peer over DataChannels\n        let data = {\n            peer_id: peer_id,\n            broadcast: broadcast,\n            fileData: e.target.result,\n        };\n        sendFSData(data);\n        offset += data.fileData.byteLength;\n\n        sendProgress.value = offset;\n        sendFilePercentage.innerHTML = 'Send progress: ' + ((offset / fileToSend.size) * 100).toFixed(2) + '%';\n\n        // send file completed\n        if (offset === fileToSend.size) {\n            sendInProgress = false;\n            sendFileDiv.style.display = 'none';\n            userLog('success', 'The file ' + fileToSend.name + ' was sent successfully.');\n        }\n\n        if (offset < fileToSend.size) readSlice(offset);\n    });\n    const readSlice = (o) => {\n        for (let peer_id in fileDataChannels) {\n            // https://stackoverflow.com/questions/71285807/i-am-trying-to-share-a-file-over-webrtc-but-after-some-time-it-stops-and-log-rt\n            if (fileDataChannels[peer_id].bufferedAmount > fileDataChannels[peer_id].bufferedAmountLowThreshold) {\n                fileDataChannels[peer_id].onbufferedamountlow = () => {\n                    fileDataChannels[peer_id].onbufferedamountlow = null;\n                    readSlice(0);\n                };\n                return;\n            }\n        }\n        const slice = fileToSend.slice(offset, o + chunkSize);\n        fileReader.readAsArrayBuffer(slice);\n    };\n    readSlice(0);\n}\n\n/**\n * Send File through RTC Data Channels\n * @param {object} data to sent\n */\nfunction sendFSData(data) {\n    let broadcast = data.broadcast;\n    let peer_id_to_send = data.peer_id;\n    if (broadcast) {\n        // send to all peers\n        for (let peer_id in fileDataChannels) {\n            if (fileDataChannels[peer_id].readyState === 'open') fileDataChannels[peer_id].send(data.fileData);\n        }\n    } else {\n        // send to peer\n        for (let peer_id in fileDataChannels) {\n            if (peer_id_to_send == peer_id && fileDataChannels[peer_id].readyState === 'open') {\n                fileDataChannels[peer_id].send(data.fileData);\n            }\n        }\n    }\n}\n\n/**\n * Abort the file transfer\n */\nfunction abortFileTransfer() {\n    if (fileReader && fileReader.readyState === 1) {\n        fileReader.abort();\n        sendFileDiv.style.display = 'none';\n        sendInProgress = false;\n        sendToServer('fileAbort', {\n            room_id: roomId,\n            peer_name: myPeerName,\n        });\n    }\n}\n\n/**\n * File Transfer aborted by peer\n */\nfunction handleFileAbort() {\n    receiveBuffer = [];\n    incomingFileData = [];\n    receivedSize = 0;\n    receiveInProgress = false;\n    receiveFileDiv.style.display = 'none';\n    console.log('File transfer aborted');\n    userLog('toast', '\u26a0\ufe0f File transfer aborted');\n}\n\n/**\n * Hide incoming file transfer\n */\nfunction hideFileTransfer() {\n    receiveFileDiv.style.display = 'none';\n}\n\n/**\n * Select the File to Share\n * @param {string} peer_id\n * @param {boolean} broadcast send to all (default false)\n */\nfunction selectFileToShare(peer_id, broadcast = false) {\n    playSound('newMessage');\n\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        imageAlt: 'mirotalk-file-sharing',\n        imageUrl: fileSharingImg,\n        position: 'center',\n        title: 'Share file',\n        input: 'file',\n        inputAttributes: {\n            accept: fileSharingInput,\n            'aria-label': 'Select file',\n        },\n        showDenyButton: true,\n        confirmButtonText: `Send`,\n        denyButtonText: `Cancel`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            sendFileInformations(result.value, peer_id, broadcast);\n        }\n    });\n}\n\n/**\n * Send file informations\n * @param {object} file data\n * @param {string} peer_id\n * @param {boolean} broadcast send to all (default false)\n * @returns\n */\nfunction sendFileInformations(file, peer_id, broadcast = false) {\n    fileToSend = file;\n    // check if valid\n    if (fileToSend && fileToSend.size > 0) {\n        // no peers in the room\n        if (!thereIsPeerConnections()) {\n            return userLog('info', 'No participants detected');\n        }\n\n        // prevent XSS injection to remote peer\n        if (isHtml(fileToSend.name)) return userLog('warning', 'Invalid file name!');\n\n        const fileInfo = {\n            room_id: roomId,\n            broadcast: broadcast,\n            peer_name: myPeerName,\n            peer_id: peer_id,\n            file: {\n                fileName: fileToSend.name,\n                fileSize: fileToSend.size,\n                fileType: fileToSend.type,\n            },\n        };\n        // keep trace of sent file in chat\n        appendMessage(myPeerName, rightChatAvatar, 'right', 'Send file: \\n' + toHtmlJson(fileInfo), false);\n        // send some metadata about our file to peers in the room\n        sendToServer('fileInfo', fileInfo);\n        // send the File\n        setTimeout(() => {\n            sendFileData(peer_id, broadcast);\n        }, 1000);\n    } else {\n        userLog('error', 'File dragged not valid or empty.');\n    }\n}\n\n/**\n * Html Json pretty print\n * @param {object} obj\n * @returns html pre json\n */\nfunction toHtmlJson(obj) {\n    return '<pre>' + JSON.stringify(obj, null, 4) + '</pre>';\n}\n\n/**\n * Get remote file info\n * @param {object} config data\n */\nfunction handleFileInfo(config) {\n    incomingFileInfo = config;\n    incomingFileData = [];\n    receiveBuffer = [];\n    receivedSize = 0;\n    let fileToReceiveInfo =\n        'From: ' +\n        incomingFileInfo.peer_name +\n        '<br />' +\n        ' Incoming file: ' +\n        incomingFileInfo.file.fileName +\n        '<br />' +\n        ' File size: ' +\n        bytesToSize(incomingFileInfo.file.fileSize) +\n        '<br />' +\n        ' File type: ' +\n        incomingFileInfo.file.fileType;\n    console.log(fileToReceiveInfo);\n    // keep track of received file on chat\n    appendMessage(\n        incomingFileInfo.peer_name,\n        leftChatAvatar,\n        'left',\n        'Receive file: \\n' + toHtmlJson(incomingFileInfo),\n        !incomingFileInfo.broadcast,\n        incomingFileInfo.peer_id,\n    );\n    receiveFileInfo.innerHTML = fileToReceiveInfo;\n    receiveFileDiv.style.display = 'inline';\n    receiveProgress.max = incomingFileInfo.file.fileSize;\n    receiveInProgress = true;\n    userLog('toast', fileToReceiveInfo);\n}\n\n/**\n * The file will be saved in the Blob. You will be asked to confirm if you want to save it on your PC / Mobile device.\n * https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nfunction endDownload() {\n    playSound('download');\n\n    // save received file into Blob\n    const blob = new Blob(incomingFileData);\n    const file = incomingFileInfo.file.fileName;\n\n    incomingFileData = [];\n\n    // if file is image, show the preview\n    if (isImageURL(incomingFileInfo.file.fileName)) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            Swal.fire({\n                allowOutsideClick: false,\n                background: swalBackground,\n                position: 'center',\n                title: 'Received file',\n                text: incomingFileInfo.file.fileName + ' size ' + bytesToSize(incomingFileInfo.file.fileSize),\n                imageUrl: e.target.result,\n                imageAlt: 'mirotalk-file-img-download',\n                showDenyButton: true,\n                confirmButtonText: `Save`,\n                denyButtonText: `Cancel`,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            }).then((result) => {\n                if (result.isConfirmed) saveBlobToFile(blob, file);\n            });\n        };\n        // blob where is stored downloaded file\n        reader.readAsDataURL(blob);\n    } else {\n        // not img file\n        Swal.fire({\n            allowOutsideClick: false,\n            background: swalBackground,\n            imageAlt: 'mirotalk-file-download',\n            imageUrl: fileSharingImg,\n            position: 'center',\n            title: 'Received file',\n            text: incomingFileInfo.file.fileName + ' size ' + bytesToSize(incomingFileInfo.file.fileSize),\n            showDenyButton: true,\n            confirmButtonText: `Save`,\n            denyButtonText: `Cancel`,\n            showClass: {\n                popup: 'animate__animated animate__fadeInDown',\n            },\n            hideClass: {\n                popup: 'animate__animated animate__fadeOutUp',\n            },\n        }).then((result) => {\n            if (result.isConfirmed) saveBlobToFile(blob, file);\n        });\n    }\n}\n\n/**\n * Save to PC / Mobile devices\n * https://developer.mozilla.org/en-US/docs/Web/API/Blob\n * @param {object} blob content\n * @param {string} file to save\n */\nfunction saveBlobToFile(blob, file) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = file;\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n    }, 100);\n}\n\n/**\n * Opend and send Video URL to all peers in the room\n * @param {string} peer_id socket.id\n */\nfunction sendVideoUrl(peer_id = null) {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: videoAudioShare,\n        title: 'Share a Video or Audio',\n        text: 'Paste a Video or audio URL',\n        input: 'text',\n        showCancelButton: true,\n        confirmButtonText: `Share`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.value) {\n            if (!thereIsPeerConnections()) {\n                return userLog('info', 'No participants detected');\n            }\n            console.log('Video URL: ' + result.value);\n            /*\n                https://www.youtube.com/watch?v=RT6_Id5-7-s\n                http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\n                https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3\n            */\n            if (!isVideoTypeSupported(result.value)) {\n                return userLog('warning', 'Something wrong, try with another Video or audio URL');\n            }\n            let is_youtube = getVideoType(result.value) == 'na' ? true : false;\n            let video_url = is_youtube ? getYoutubeEmbed(result.value) : result.value;\n            let config = {\n                peer_id: peer_id,\n                video_src: video_url,\n            };\n            openVideoUrlPlayer(config);\n            emitVideoPlayer('open', config);\n        }\n    });\n}\n\n/**\n * Open video url Player\n */\nfunction openVideoUrlPlayer(config) {\n    console.log('Open video Player', config);\n    let videoSrc = config.video_src;\n    let videoType = getVideoType(videoSrc);\n    let videoEmbed = getYoutubeEmbed(videoSrc);\n    console.log('Video embed', videoEmbed);\n    //\n    if (!isVideoUrlPlayerOpen) {\n        if (videoEmbed) {\n            playSound('newMessage');\n            console.log('Load element type: iframe');\n            videoUrlIframe.src = videoEmbed;\n            videoUrlCont.style.display = 'flex';\n            isVideoUrlPlayerOpen = true;\n        } else {\n            playSound('newMessage');\n            console.log('Load element type: Video');\n            videoAudioUrlCont.style.display = 'flex';\n            videoAudioUrlElement.setAttribute('src', videoSrc);\n            videoAudioUrlElement.type = videoType;\n            if (videoAudioUrlElement.type == 'video/mp3') {\n                videoAudioUrlElement.poster = audioGif;\n            }\n            isVideoUrlPlayerOpen = true;\n        }\n    } else {\n        // video player seems open\n        if (videoEmbed) {\n            videoUrlIframe.src = videoEmbed;\n        } else {\n            videoAudioUrlElement.src = videoSrc;\n        }\n    }\n}\n\n/**\n * Get video type\n * @param {string} url\n * @returns string video type\n */\nfunction getVideoType(url) {\n    if (url.endsWith('.mp4')) return 'video/mp4';\n    if (url.endsWith('.mp3')) return 'video/mp3';\n    if (url.endsWith('.webm')) return 'video/webm';\n    if (url.endsWith('.ogg')) return 'video/ogg';\n    return 'na';\n}\n\n/**\n * Check if video URL is supported\n * @param {string} url\n * @returns boolean true/false\n */\nfunction isVideoTypeSupported(url) {\n    if (\n        url.endsWith('.mp4') ||\n        url.endsWith('.mp3') ||\n        url.endsWith('.webm') ||\n        url.endsWith('.ogg') ||\n        url.includes('youtube.com')\n    )\n        return true;\n    return false;\n}\n\n/**\n * Get youtube embed URL\n * @param {string} url of YouTube video\n * @returns {string} YouTube Embed URL\n */\nfunction getYoutubeEmbed(url) {\n    let regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    let match = url.match(regExp);\n    return match && match[7].length == 11 ? 'https://www.youtube.com/embed/' + match[7] + '?autoplay=1' : false;\n}\n\n/**\n * Close Video Url Player\n */\nfunction closeVideoUrlPlayer() {\n    console.log('Close video Player', {\n        videoUrlIframe: videoUrlIframe.src,\n        videoAudioUrlElement: videoAudioUrlElement.src,\n    });\n    if (videoUrlIframe.src != '') videoUrlIframe.setAttribute('src', '');\n    if (videoAudioUrlElement.src != '') videoAudioUrlElement.setAttribute('src', '');\n    videoUrlCont.style.display = 'none';\n    videoAudioUrlCont.style.display = 'none';\n    isVideoUrlPlayerOpen = false;\n}\n\n/**\n * Emit video palyer to peers\n * @param {string} video_action type\n * @param {object} config data\n */\nfunction emitVideoPlayer(video_action, config = {}) {\n    sendToServer('videoPlayer', {\n        room_id: roomId,\n        peer_name: myPeerName,\n        video_action: video_action,\n        video_src: config.video_src,\n        peer_id: config.peer_id,\n    });\n}\n\n/**\n * Handle Video Player\n * @param {object} config data\n */\nfunction handleVideoPlayer(config) {\n    let peer_name = config.peer_name;\n    let video_action = config.video_action;\n    //\n    switch (video_action) {\n        case 'open':\n            userLog('toast', peer_name + ' open video player');\n            openVideoUrlPlayer(config);\n            break;\n        case 'close':\n            userLog('toast', peer_name + ' close video player');\n            closeVideoUrlPlayer();\n            break;\n    }\n}\n\n/**\n * Handle peer kick out event button\n * @param {string} peer_id socket.id\n */\nfunction handlePeerKickOutBtn(peer_id) {\n    if (!buttons.remote.showKickOutBtn) return;\n    let peerKickOutBtn = getId(peer_id + '_kickOut');\n    peerKickOutBtn.addEventListener('click', (e) => {\n        kickOut(peer_id);\n    });\n}\n\n/**\n * Eject peer, confirm before\n * @param {string} peer_id socket.id\n */\nfunction kickOut(peer_id) {\n    let pName = getId(peer_id + '_name').innerHTML;\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        imageUrl: confirmImg,\n        title: 'Kick out ' + pName,\n        text: 'Are you sure you want to kick out this participant?',\n        showDenyButton: true,\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            // send peer to kick out from room\n            sendToServer('kickOut', {\n                room_id: roomId,\n                peer_id: peer_id,\n                peer_name: myPeerName,\n            });\n        }\n    });\n}\n\n/**\n * You will be kicked out from the room and popup the peer name that performed this action\n * @param {object} config data\n */\nfunction handleKickedOut(config) {\n    let peer_name = config.peer_name;\n\n    playSound('eject');\n\n    let timerInterval;\n\n    Swal.fire({\n        allowOutsideClick: false,\n        background: swalBackground,\n        position: 'center',\n        imageUrl: kickedOutImg,\n        title: 'Kicked out!',\n        html:\n            `<h2 style=\"color: #FF2D00;\">` +\n            `User ` +\n            peer_name +\n            `</h2> will kick out you after <b style=\"color: #FF2D00;\"></b> milliseconds.`,\n        timer: 10000,\n        timerProgressBar: true,\n        didOpen: () => {\n            Swal.showLoading();\n            timerInterval = setInterval(() => {\n                const content = Swal.getHtmlContainer();\n                if (content) {\n                    const b = content.querySelector('b');\n                    if (b) b.textContent = Swal.getTimerLeft();\n                }\n            }, 100);\n        },\n        willClose: () => {\n            clearInterval(timerInterval);\n        },\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then(() => {\n        openURL('/newcall');\n    });\n}\n\n/**\n * MiroTalk about info\n */\nfunction showAbout() {\n    playSound('newMessage');\n\n    Swal.fire({\n        background: swalBackground,\n        position: 'center',\n        title: '<strong>WebRTC P2P</strong>',\n        imageAlt: 'mirotalk-about',\n        imageUrl: aboutImg,\n        html: `\n        <br/>\n        <div id=\"about\">\n            <b><a href=\"https://github.com/miroslavpejic85/mirotalk\" class=\"umami--click--github\" target=\"_blank\">Open Source</a></b> project\n            <br/><br/>\n            <button class=\"pulsate umami--click--sponsor\" onclick=\"window.open('https://github.com/sponsors/miroslavpejic85?o=esb')\"><i class=\"${className.heart}\" ></i>&nbsp;Support</button>\n            <br /><br />\n            Author:<a href=\"https://www.linkedin.com/in/miroslav-pejic-976a07101/\" class=\"umami--click--linkedin\" target=\"_blank\"> Miroslav Pejic</a>\n        </div>\n        `,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    });\n}\n\n/**\n * Leave the Room and create a new one\n */\nfunction leaveRoom() {\n    playSound('eject');\n    if (surveyActive) {\n        leaveFeedback();\n    } else {\n        openURL('/newcall');\n    }\n}\n\n/**\n * Ask for feedback when room exit\n */\nfunction leaveFeedback() {\n    Swal.fire({\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        showDenyButton: true,\n        background: swalBackground,\n        imageUrl: imgFeedback,\n        title: 'Leave a feedback',\n        text: 'Do you want to rate your MiroTalk experience?',\n        confirmButtonText: `Yes`,\n        denyButtonText: `No`,\n        showClass: {\n            popup: 'animate__animated animate__fadeInDown',\n        },\n        hideClass: {\n            popup: 'animate__animated animate__fadeOutUp',\n        },\n    }).then((result) => {\n        if (result.isConfirmed) {\n            openURL(surveyURL);\n        } else {\n            openURL('/newcall');\n        }\n    });\n}\n\n/**\n * Make Obj draggable: https://www.w3schools.com/howto/howto_js_draggable.asp\n * @param {object} elmnt father element\n * @param {object} dragObj children element to make father draggable (click + mouse move)\n */\nfunction dragElement(elmnt, dragObj) {\n    let pos1 = 0,\n        pos2 = 0,\n        pos3 = 0,\n        pos4 = 0;\n    if (dragObj) {\n        // if present, the header is where you move the DIV from:\n        dragObj.onmousedown = dragMouseDown;\n    } else {\n        // otherwise, move the DIV from anywhere inside the DIV:\n        elmnt.onmousedown = dragMouseDown;\n    }\n\n    function dragMouseDown(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // get the mouse cursor position at startup:\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        document.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves:\n        document.onmousemove = elementDrag;\n    }\n\n    function elementDrag(e) {\n        e = e || window.event;\n        e.preventDefault();\n        // calculate the new cursor position:\n        pos1 = pos3 - e.clientX;\n        pos2 = pos4 - e.clientY;\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        // set the element's new position:\n        elmnt.style.top = elmnt.offsetTop - pos2 + 'px';\n        elmnt.style.left = elmnt.offsetLeft - pos1 + 'px';\n    }\n\n    function closeDragElement() {\n        // stop moving when mouse button is released:\n        document.onmouseup = null;\n        document.onmousemove = null;\n    }\n}\n\n/**\n * Date Format: https://convertio.co/it/\n * @returns {string} date string format: DD-MM-YYYY-H_M_S\n */\nfunction getDataTimeString() {\n    const d = new Date();\n    const date = d.toISOString().split('T')[0];\n    const time = d.toTimeString().split(' ')[0];\n    return `${date}-${time}`;\n}\n\n/**\n * Convert bytes to KB-MB-GB-TB\n * @param {object} bytes to convert\n * @returns {string} converted size\n */\nfunction bytesToSize(bytes) {\n    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes == 0) return '0 Byte';\n    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n}\n\n/**\n * Handle peer audio volume\n * @param {object} data peer audio\n */\nfunction handlePeerVolume(data) {\n    let peer_id = data.peer_id;\n    let element = getId(peer_id + '_pitch_bar');\n    let remoteVideoWrap = getId(peer_id + '_videoWrap');\n    let volume = data.volume + 25; //for design purpose\n    if (!element) return;\n    if (volume > 50) {\n        element.style.backgroundColor = 'orange';\n    }\n    element.style.height = volume + '%';\n    remoteVideoWrap.classList.toggle('speaking');\n    setTimeout(function () {\n        element.style.backgroundColor = '#19bb5c';\n        element.style.height = '0%';\n        remoteVideoWrap.classList.toggle('speaking');\n    }, 700);\n}\n\n/**\n * Handle my audio volume\n * @param {object} data my audio\n */\nfunction handleMyVolume(data) {\n    let element = getId('myPitchBar');\n    let volume = data.volume + 25;\n    if (!element) return;\n    if (volume > 50) {\n        element.style.backgroundColor = 'orange';\n    }\n    element.style.height = volume + '%';\n    myVideoWrap.classList.toggle('speaking');\n    setTimeout(function () {\n        element.style.backgroundColor = '#19bb5c';\n        element.style.height = '0%';\n        myVideoWrap.classList.toggle('speaking');\n    }, 700);\n}\n\n/**\n * Basic user logging using https://sweetalert2.github.io\n * @param {string} type of popup\n * @param {string} message to popup\n * @param {integer} timer toast duration ms\n */\nfunction userLog(type, message, timer = 3000) {\n    switch (type) {\n        case 'warning':\n        case 'error':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: type,\n                title: type,\n                text: message,\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            playSound('alert');\n            break;\n        case 'info':\n        case 'success':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: type,\n                title: type,\n                text: message,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            break;\n        case 'success-html':\n            Swal.fire({\n                background: swalBackground,\n                position: 'center',\n                icon: 'success',\n                title: 'Success',\n                html: message,\n                showClass: {\n                    popup: 'animate__animated animate__fadeInDown',\n                },\n                hideClass: {\n                    popup: 'animate__animated animate__fadeOutUp',\n                },\n            });\n            break;\n        case 'toast':\n            const Toast = Swal.mixin({\n                background: swalBackground,\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: timer,\n                timerProgressBar: true,\n            });\n            Toast.fire({\n                icon: 'info',\n                title: message,\n            });\n            break;\n        // ......\n        default:\n            alert(message);\n    }\n}\n\n/**\n * Message popup\n * @param {string} icon info, success, warning, error\n * @param {string} message to show\n * @param {string} position of the toast\n * @param {integer} timer ms before to hide\n */\nfunction msgPopup(icon, message, position, timer = 1000) {\n    const Toast = Swal.mixin({\n        background: swalBackground,\n        toast: true,\n        position: position,\n        showConfirmButton: false,\n        timer: timer,\n        timerProgressBar: true,\n    });\n    Toast.fire({\n        icon: icon,\n        title: message,\n    });\n}\n\n/**\n * https://notificationsounds.com/notification-sounds\n * @param {string} name audio to play\n */\nasync function playSound(name) {\n    if (!notifyBySound) return;\n    let sound = '../sounds/' + name + '.mp3';\n    let audioToPlay = new Audio(sound);\n    try {\n        audioToPlay.volume = 0.5;\n        await audioToPlay.play();\n    } catch (err) {\n        // console.error(\"Cannot play sound\", err);\n        // Automatic playback failed. (safari)\n        return;\n    }\n}\n\n/**\n * Open specified URL\n * @param {string} url to open\n * @param {boolean} blank if true opne url in the new tab\n */\nfunction openURL(url, blank = false) {\n    blank ? window.open(url, '_blank') : (window.location.href = url);\n}\n\n/**\n * Show-Hide all elements grp by class name\n * @param {string} className to toggle\n * @param {string} displayState of the element\n */\nfunction toggleClassElements(className, displayState) {\n    let elements = getEcN(className);\n    for (let i = 0; i < elements.length; i++) {\n        elements[i].style.display = displayState;\n    }\n}\n\n/**\n * Check if Tablet device\n * @param {object} userAgent info\n * @return {boolean} true/false\n */\nfunction isTablet(userAgent) {\n    return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(\n        userAgent,\n    );\n}\n\n/**\n * Check if IPad device\n * @param {object} userAgent\n * @return {boolean} true/false\n */\nfunction isIpad(userAgent) {\n    return /macintosh/.test(userAgent) && 'ontouchend' in document;\n}\n\n/**\n * Get Html element by Id\n * @param {string} id of the element\n * @returns {object} element\n */\nfunction getId(id) {\n    return document.getElementById(id);\n}\n\n/**\n * Get Html element by selector\n * @param {string} selector of the element\n * @returns {object} element\n */\nfunction getSl(selector) {\n    return document.querySelector(selector);\n}\n\n/**\n * Get Html element by class name\n * @param {string} className of the element\n * @returns {object} element\n */\nfunction getEcN(className) {\n    return document.getElementsByClassName(className);\n}\n\n/**\n * Get html element by name\n * @param {string} name\n * @returns element\n */\nfunction getName(name) {\n    return document.getElementsByName(name);\n}\n\n/**\n * Element style display\n * @param {object} elem\n * @param {boolean} yes true/false\n */\nfunction elemDisplay(elem, yes) {\n    elem.style.display = yes ? 'inline' : 'none';\n}\n", "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- https://github.com/mikecao/umami -->\n\n        <script\n            async\n            defer\n            data-website-id=\"a378bd09-212d-4801-94cc-9797b6a5f3f7\"\n            src=\"https://stats.mirotalk.org/umami.js\"\n        ></script>\n\n        <!-- Title and Icon -->\n\n        <title>MiroTalk WebRTC Video call, Chat Room & Screen Sharing.</title>\n        <link rel=\"shortcut icon\" href=\"../images/logo.svg\" />\n        <link rel=\"apple-touch-icon\" href=\"../images/logo.svg\" />\n\n        <!-- Meta Information -->\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <meta\n            name=\"viewport\"\n            content=\"width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"\n        />\n        <meta\n            name=\"description\"\n            content=\"MiroTalk powered by WebRTC, Real-time Simple Secure Fast video calls, chat and screen sharing capabilities in the browser, from your mobile or desktop.\"\n        />\n        <meta\n            name=\"keywords\"\n            content=\"webrtc, webrtc stun, webrtc turn, video meeting, video chat, multi video chat, peer to peer, p2p, zoom\"\n        />\n\n        <!-- https://ogp.me -->\n\n        <meta property=\"og:type\" content=\"app-webrtc\" />\n        <meta property=\"og:site_name\" content=\"MiroTalk\" />\n        <meta property=\"og:title\" content=\"Click the link to join this call.\" />\n        <meta property=\"og:description\" content=\"Free WebRTC browser-based video call.\" />\n        <meta property=\"og:image\" content=\"https://p2p.mirotalk.com/images/preview.png\" />\n        <meta property=\"og:url\" content=\"https://p2p.mirotalk.org\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"../images/favicon.png\" />\n\n        <!-- StyleSheet -->\n\n        <link rel=\"stylesheet\" href=\"../css/client.css\" />\n        <link rel=\"stylesheet\" href=\"../css/videoGrid.css\" />\n        <link rel=\"stylesheet\" href=\"../css/whiteboard.css\" />\n\n        <!-- https://cdnjs.com/libraries/font-awesome -->\n\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" />\n\n        <!-- https://animate.style 4 using for swal fadeIn-Out -->\n\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\" />\n    </head>\n\n    <body onload=\"initClientPeer()\">\n        <noscript>You need to enable JavaScript to run this app.</noscript>\n\n        <!-- just 4SEO Optimization -->\n\n        <div id=\"webRTCSeo\">\n            <h1>WebRTC</h1>\n        </div>\n\n        <!-- show this before to join -->\n\n        <div id=\"loadingDiv\" class=\"center pulsate\">\n            <h1>Loading</h1>\n            <img src=\"../images/loader.gif\" />\n            <pre>\nPlease allow the camera or microphone\naccess to use this app.\n            </pre>\n        </div>\n\n        <!-- init user devices -->\n\n        <div id=\"initUser\" class=\"init-user hidden\">\n            <!-- <p>Please allow the camera & microphone access to use this app.</p> -->\n            <video\n                id=\"initVideo\"\n                playsinline=\"true\"\n                autoplay=\"\"\n                class=\"mirror\"\n                poster=\"../images/loader.gif\"\n                style=\"object-fit: var(--videoObjFit)\"\n            ></video>\n            <button id=\"initAudioBtn\" class=\"fas fa-microphone\" onclick=\"handleAudio(event, true)\"></button>\n            <button id=\"initVideoBtn\" class=\"fas fa-video\" onclick=\"handleVideo(event, true)\"></button>\n            <select id=\"initVideoSelect\" class=\"form-select text-light bg-dark\"></select>\n            <select id=\"initMicrophoneSelect\" class=\"form-select text-light bg-dark\"></select>\n            <select id=\"initSpeakerSelect\" class=\"form-select text-light bg-dark\"></select>\n        </div>\n\n        <!-- Start buttons bar https://fontawesome.com/icons?d=gallery -->\n\n        <div id=\"buttonsBar\" class=\"fadein\">\n            <button id=\"shareRoomBtn\" class=\"fas fa-share-alt\"></button>\n            <button id=\"audioBtn\" class=\"fas fa-microphone\"></button>\n            <button id=\"videoBtn\" class=\"fas fa-video\"></button>\n            <button id=\"swapCameraBtn\" class=\"fas fa-camera-rotate\"></button>\n            <button id=\"screenShareBtn\" class=\"fas fa-desktop\"></button>\n            <button id=\"recordStreamBtn\" class=\"fas fa-record-vinyl\"></button>\n            <button id=\"fullScreenBtn\" class=\"fas fa-expand-alt\"></button>\n            <button id=\"chatRoomBtn\" class=\"fas fa-comment\"></button>\n            <button id=\"captionBtn\" class=\"fas fa-closed-captioning\"></button>\n            <button id=\"myHandBtn\" class=\"fas fa-hand-paper\"></button>\n            <button id=\"whiteboardBtn\" class=\"fas fa-chalkboard-teacher\"></button>\n            <button id=\"fileShareBtn\" class=\"fas fa-folder-open\"></button>\n            <button id=\"mySettingsBtn\" class=\"fas fa-cogs\"></button>\n            <button id=\"aboutBtn\" class=\"fas fa-question\"></button>\n            <button id=\"leaveRoomBtn\" class=\"fas fa-right-from-bracket\"></button>\n        </div>\n        <!-- End left buttons -->\n\n        <!-- Start chat room \n        https://codepen.io/sajadhsm/pen/odaBdd\n        https://getemoji.com\n        -->\n\n        <section id=\"msgerDraggable\" class=\"msger-draggable fadein\">\n            <section id=\"msger\" class=\"msger\">\n                <header id=\"msgerHeader\" class=\"msger-header\">\n                    <div class=\"msger-header-title\"><button id=\"msgerClose\" class=\"fas fa-times\"></button></div>\n                    <div class=\"msger-header-options\">\n                        <button id=\"msgerTheme\" class=\"fas fa-ghost\"></button>\n                        <button id=\"msgerSaveBtn\" class=\"fas fa-save\"></button>\n                        <button id=\"msgerClean\" class=\"fas fa-trash\"></button>\n                    </div>\n                </header>\n\n                <main id=\"msgerChat\" class=\"msger-chat\"></main>\n\n                <!-- Start emoji picker -->\n\n                <section id=\"msgerEmojiPicker\" class=\"hidden fadein\"></section>\n\n                <!-- End emoji picker -->\n\n                <div class=\"msger-inputarea\">\n                    <textarea\n                        rows=\"1\"\n                        cols=\"1\"\n                        id=\"msgerInput\"\n                        class=\"msger-input\"\n                        placeholder=\"\ud83d\udcac Write a message...\"\n                    ></textarea>\n                </div>\n\n                <div class=\"msger-input-buttons\">\n                    <button id=\"msgerEmojiBtn\" class=\"fas fa-smile\"></button>\n                    <button id=\"msgerMarkdownBtn\" class=\"fab fa-markdown\"></button>\n                    <button id=\"msgerShareFileBtn\" class=\"fas fa-paperclip\"></button>\n                    <button id=\"msgerVideoUrlBtn\" class=\"fab fa-youtube\"></button>\n                    <button id=\"msgerCPBtn\" class=\"fas fa-users\"></button>\n                    <button id=\"msgerCleanTextBtn\" class=\"fas fa-trash\"></button>\n                    <button id=\"msgerPasteBtn\" class=\"fas fa-paste\"></button>\n                    <label class=\"switch\">\n                        <input id=\"msgerShowChatOnMsg\" type=\"checkbox\" checked />\n                        <span class=\"slider round\"></span>\n                    </label>\n                    <button id=\"msgerSendBtn\" class=\"fas fa-paper-plane\"></button>\n                </div>\n            </section>\n\n            <!-- Start private msg -->\n\n            <section id=\"msgerCP\" class=\"center fadein\">\n                <section id=\"msgerCPSec\" class=\"msger\">\n                    <header id=\"msgerCPHeader\" class=\"msger-private-header\">\n                        <div class=\"msger-header-title\"><i class=\"fas fa-comment-alt\"></i> Send Private messages</div>\n                        <div class=\"msger-header-options\">\n                            <button id=\"msgerCPCloseBtn\" class=\"fas fa-times\"></button>\n                        </div>\n                    </header>\n                    <main id=\"msgerCPChat\" class=\"msger-chat\">\n                        <div class=\"search-container\">\n                            <input\n                                id=\"searchPeerBarName\"\n                                type=\"text\"\n                                placeholder=\" \ud83d\udd0d Search peer by name...\"\n                                name=\"search\"\n                                onkeyup=\"searchPeer()\"\n                            />\n                        </div>\n                        <br />\n                        <div id=\"msgerCPList\"></div>\n                    </main>\n                </section>\n            </section>\n\n            <!-- End private msg -->\n        </section>\n\n        <!-- End chat room -->\n\n        <!-- Start of caption section -->\n\n        <section id=\"captionDraggable\" class=\"msger-draggable fadein\">\n            <section id=\"caption\" class=\"msger\">\n                <header id=\"captionHeader\" class=\"msger-header\">\n                    <div class=\"msger-header-title\">\n                        <button id=\"captionClose\" class=\"fas fa-times\"></button>\n                    </div>\n                    <div class=\"msger-header-options\">\n                        <button id=\"captionTheme\" class=\"fas fa-ghost\"></button>\n                        <button id=\"captionSaveBtn\" class=\"fas fa-save\"></button>\n                        <button id=\"captionClean\" class=\"fas fa-trash\"></button>\n                    </div>\n                </header>\n\n                <main id=\"captionChat\" class=\"msger-chat\"></main>\n                <div class=\"msger-inputarea\">\n                    <button id=\"speechRecognitionIcon\" class=\"fas fa-microphone-alt\"></button>\n                    <select id=\"recognitionLanguage\"></select>\n                    <select id=\"recognitionDialect\"></select>\n                    <button type=\"button\" id=\"speechRecognitionStart\"><i class=\"fas fa-play\"></i>&nbsp;Start</button>\n                    <button type=\"button\" id=\"speechRecognitionStop\"><i class=\"fas fa-stop\"></i>&nbsp;Stop</button>\n                </div>\n            </section>\n        </section>\n\n        <!-- End of caption section -->\n\n        <!-- Start my settings -->\n\n        <section id=\"mySettings\" class=\"center fadein\">\n            <header id=\"mySettingsHeader\">\n                <button id=\"mySettingsCloseBtn\" class=\"fas fa-times\"></button>\n            </header>\n            <main>\n                <br />\n                <div class=\"tab\">\n                    <button id=\"tabDevicesBtn\" class=\"fas fa-cog tablinks\"></button>\n                    <button id=\"tabBandwidthBtn\" class=\"fas fa-wifi tablinks\"></button>\n                    <button id=\"tabRoomBtn\" class=\"fas fa-home tablinks\"></button>\n                    <button id=\"tabStylingBtn\" class=\"fas fa-palette tablinks\"></button>\n                    <button id=\"tabLanguagesBtn\" class=\"fas fa-globe tablinks\"></button>\n                </div>\n\n                <div id=\"tabDevices\" class=\"tabcontent\">\n                    <br />\n                    <div>\n                        <label for=\"videoSource\">Camera</label><br />\n                        <select id=\"videoSource\"></select>\n                    </div>\n                    <br />\n                    <div>\n                        <label for=\"audioSource\">Microphone</label><br />\n                        <select id=\"audioSource\"></select>\n                    </div>\n                    <br />\n                    <div>\n                        <label for=\"audioOutput\">Speaker</label><br />\n                        <select id=\"audioOutput\"></select>\n                    </div>\n                </div>\n\n                <div id=\"tabBandwidth\" class=\"tabcontent\">\n                    <br />\n                    <label for=\"videoQuality\">Video quality</label>\n                    <br />\n                    <select id=\"videoQuality\">\n                        <option value=\"default\">Default</option>\n                        <option value=\"qvgaVideo\">QVGA</option>\n                        <option value=\"vgaVideo\">VGA</option>\n                        <option value=\"hdVideo\">HD</option>\n                        <option value=\"fhdVideo\">FULL HD</option>\n                        <option value=\"2kVideo\">2k</option>\n                        <option value=\"4kVideo\">4K</option>\n                    </select>\n                    <br /><br />\n                    <label for=\"videoFps\">Camera fps</label>\n                    <br />\n                    <select id=\"videoFps\">\n                        <option value=\"60\">60 fps</option>\n                        <option value=\"30\">30 fps</option>\n                        <option value=\"25\">25 fps</option>\n                        <option value=\"20\">20 fps</option>\n                        <option value=\"15\">15 fps</option>\n                        <option value=\"10\">10 fps</option>\n                        <option value=\"5\">5 fps</option>\n                    </select>\n                    <div id=\"screenFpsDiv\">\n                        <br />\n                        <label for=\"screenFps\">Screen fps</label>\n                        <br />\n                        <select id=\"screenFps\">\n                            <option value=\"60\">60 fps</option>\n                            <option value=\"30\">30 fps</option>\n                            <option value=\"25\">25 fps</option>\n                            <option value=\"20\">20 fps</option>\n                            <option value=\"15\">15 fps</option>\n                            <option value=\"10\">10 fps</option>\n                            <option value=\"5\">5 fps</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div id=\"tabRoom\" class=\"tabcontent\">\n                    <br />\n                    <div>\n                        <label>My name</label><br />\n                        <input id=\"myPeerNameSet\" type=\"text\" placeholder=\"Change name...\" />&nbsp;&nbsp;\n                        <button id=\"myPeerNameSetBtn\"><i class=\"fas fa-user-edit\"></i>&nbsp;Change</button>\n                    </div>\n                    <div id=\"tabRoomParticipants\">\n                        <br />\n                        <label>Participants</label><br />\n                        <button id=\"muteEveryoneBtn\"><i class=\"fas fa-microphone\"></i>&nbsp;Mute everyone</button>\n                        <button id=\"hideEveryoneBtn\"><i class=\"fas fa-video\"></i>&nbsp;Hide everyone</button>\n                        <button id=\"ejectEveryoneBtn\">\n                            <i class=\"fas fa-right-from-bracket\"></i>&nbsp;Eject everyone\n                        </button>\n                    </div>\n                    <div id=\"tabRoomSecurity\">\n                        <br /><br />\n                        <label>Security</label><br />\n                        <button id=\"lockRoomBtn\"><i class=\"fas fa-lock-open\"></i>&nbsp;Lock room</button>\n                        <button id=\"unlockRoomBtn\"><i class=\"fas fa-lock\"></i>&nbsp;Unlock room</button>\n                    </div>\n                    <br /><br />\n                    <label>Sounds</label><br />\n                    <input id=\"switchSounds\" style=\"color: #fff\" class=\"toggle\" type=\"checkbox\" checked />\n                </div>\n\n                <div id=\"tabStyling\" class=\"tabcontent\">\n                    <br />\n                    <label for=\"mirotalkTheme\">Theme color</label>\n                    <br />\n                    <select id=\"mirotalkTheme\">\n                        <option value=\"dark\">\u26ab\ufe0f Dark</option>\n                        <option value=\"grey\">\u26aa\ufe0f Grey</option>\n                    </select>\n                    <br /><br />\n                    <label>Video fit:</label>\n                    <br />\n                    <select id=\"videoObjFitSelect\">\n                        <option value=\"fill\">Fill</option>\n                        <option value=\"contain\">Contain</option>\n                        <option value=\"cover\">Cover</option>\n                        <option value=\"scale-down\">Scale-down</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                    <br /><br />\n                    <label for=\"mirotalkBtnsBar\">Buttons bar</label>\n                    <br />\n                    <select id=\"mirotalkBtnsBar\">\n                        <option value=\"vertical\">Vertical</option>\n                        <option value=\"horizontal\">Horizontal</option>\n                    </select>\n                    <br /><br />\n                    <div id=\"pinUnpinGridDiv\">\n                        <label for=\"pinVideoPositionSelect\">Pin grid</label>\n                        <br />\n                        <select id=\"pinVideoPositionSelect\">\n                            <option value=\"vertical\">Vertical</option>\n                            <option value=\"horizontal\">Horizontal</option>\n                            <option value=\"top\">Top</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div id=\"tabLanguages\" class=\"tabcontent\">\n                    <br />\n                    <div id=\"google_translate_element\"></div>\n                </div>\n                <br />\n            </main>\n        </section>\n\n        <!-- End my settings -->\n\n        <!-- Start whiteboard -->\n\n        <section id=\"whiteboard\" class=\"hidden\">\n            <header id=\"whiteboardHeader\" class=\"whiteboard-header\">\n                <div id=\"whiteboardTitle\" class=\"whiteboard-header-title\">\n                    <button id=\"whiteboardCloseBtn\" class=\"fas fa-times\"></button>\n                </div>\n                <div class=\"whiteboard-header-options\">\n                    <button id=\"whiteboardGhostButton\" class=\"fas fa-circle-half-stroke\"></button>\n                    <input id=\"wbBackgroundColorEl\" class=\"whiteboardColorPicker\" type=\"color\" value=\"#000000\" />\n                    <input id=\"wbDrawingColorEl\" class=\"whiteboardColorPicker\" type=\"color\" value=\"#FFFFFF\" />\n                    <button id=\"whiteboardPencilBtn\" class=\"fas fa-pencil-alt\"></button>\n                    <button id=\"whiteboardObjectBtn\" class=\"fas fa-mouse-pointer\"></button>\n                    <button id=\"whiteboardUndoBtn\" class=\"fas fa-undo\"></button>\n                    <button id=\"whiteboardRedoBtn\" class=\"fas fa-redo\"></button>\n                    <button id=\"whiteboardImgFileBtn\" class=\"far fa-image\"></button>\n                    <button id=\"whiteboardImgUrlBtn\" class=\"fas fa-link\"></button>\n                    <button id=\"whiteboardTextBtn\" class=\"fas fa-spell-check\"></button>\n                    <button id=\"whiteboardLineBtn\" class=\"fas fa-slash\"></button>\n                    <button id=\"whiteboardRectBtn\" class=\"far fa-square\"></button>\n                    <button id=\"whiteboardCircleBtn\" class=\"far fa-circle\"></button>\n                    <button id=\"whiteboardSaveBtn\" class=\"fas fa-save\"></button>\n                    <button id=\"whiteboardEraserBtn\" class=\"fas fa-eraser\"></button>\n                    <button id=\"whiteboardCleanBtn\" class=\"fas fa-trash\"></button>\n                </div>\n            </header>\n            <main>\n                <canvas id=\"wbCanvas\"></canvas>\n            </main>\n        </section>\n\n        <!-- End whiteboard -->\n\n        <!-- Start File Send -->\n\n        <div id=\"sendFileDiv\" class=\"center fadein\">\n            <img id=\"imgShareSend\" src=\"../images/share.png\" alt=\"mirotalk-share-send\" class=\"center-img\" /><br />\n            <div id=\"sendFileInfo\"></div>\n            <div id=\"sendFilePercentage\"></div>\n            <progress id=\"sendProgress\" max=\"0\" value=\"0\"></progress>\n            <button id=\"sendAbortBtn\"><i class=\"fas fa-stop-circle\"></i>&nbsp; Abort</button>\n        </div>\n\n        <!-- End File Send -->\n\n        <!-- Start File Receive -->\n\n        <div id=\"receiveFileDiv\" class=\"center fadein\">\n            <img id=\"imgShareReceive\" src=\"../images/share.png\" alt=\"mirotalk-share-receive\" class=\"center-img\" /><br />\n            <div id=\"receiveFileInfo\"></div>\n            <div id=\"receiveFilePercentage\"></div>\n            <progress id=\"receiveProgress\" max=\"0\" value=\"0\"></progress>\n            <button id=\"receiveHideBtn\"><i class=\"fas fa-eye-slash\"></i>&nbsp; Hide</button>\n        </div>\n\n        <!-- Stop File Receive -->\n\n        <!-- Start video URL iframe -->\n\n        <div id=\"videoUrlCont\" class=\"center fadein\">\n            <div id=\"videoUrlHeader\">\n                <button id=\"videoUrlCloseBtn\" class=\"fas fa-times\"></button>\n            </div>\n            <br />\n            <iframe\n                id=\"videoUrlIframe\"\n                title=\"Video Url Player\"\n                src=\"\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n            ></iframe>\n        </div>\n\n        <!-- End Youtube Iframe -->\n\n        <!-- Start Video - Audio player -->\n\n        <div id=\"videoAudioUrlCont\" class=\"center fadein\">\n            <div id=\"videoAudioUrlHeader\">\n                <button id=\"videoAudioCloseBtn\" class=\"fas fa-times\"></button>\n            </div>\n            <br />\n            <video id=\"videoAudioUrlElement\" src=\"\" autoplay controls></video>\n        </div>\n\n        <!-- End Video - Audio player -->\n\n        <!-- Start Video container -->\n\n        <div id=\"videoPinMediaContainer\"></div>\n        <div id=\"videoMediaContainer\">\n            <!-- <div class=\"Camera\"></div> -->\n        </div>\n\n        <!-- End Video container -->\n\n        <!--\n        - JS scripts https://cdn.jsdelivr.net\n        \n        - https://webrtc.github.io/adapter/adapter-latest.js                (https://github.com/webrtcHacks/adapter)\n        - https://github.com/leizongmin/js-xss                              (https://www.npmjs.com/package/xss)\n        - https://www.npmjs.com/package/marked                              (https://github.com/markedjs/marked)\n        - https://www.npmjs.com/package/detectrtc                           (https://github.com/muaz-khan/DetectRTC)\n        - https://www.npmjs.com/package/sweetalert2                         (https://github.com/sweetalert2/sweetalert2)\n        - https://www.npmjs.com/package/fabric                              (https://github.com/fabricjs/fabric.js)\n        - https://www.npmjs.com/package/qrious                              (https://github.com/neocotic/qrious)\n        - https://cdn.jsdelivr.net/npm/emoji-mart@latest/dist/browser.js    (https://github.com/missive/emoji-mart)\n        - https://www.npmjs.com/package/tippy.js                            (https://github.com/atomiks/tippyjs) \n        -->\n        <script defer src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n        <script defer src=\"https://rawgit.com/leizongmin/js-xss/master/dist/xss.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/detectrtc@1.4.1/DetectRTC.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/fabric@5.3.0-browser/dist/fabric.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js\"></script>\n        <script defer src=\"https://cdn.jsdelivr.net/npm/emoji-mart@latest/dist/browser.js\"></script>\n        <script defer src=\"https://unpkg.com/@popperjs/core@2\"></script>\n        <script defer src=\"https://unpkg.com/tippy.js@6\"></script>\n        <script defer src=\"/socket.io/socket.io.js\"></script>\n        <script defer src=\"../js/localStorage.js\"></script>\n        <script defer src=\"../js/client.js\"></script>\n        <script defer src=\"../js/detectSpeaking.js\"></script>\n        <script defer src=\"../js/speechRecognition.js\"></script>\n        <script defer src=\"../js/videoGrid.js\"></script>\n\n        <!-- end of Js scripts -->\n\n        <!-- \n\t\tthe <video> and <audio> tags are all added and removed dynamically\n\t\tin 'onAddStream', 'setupLocalMedia', and 'removePeer'/'disconnect'\n\t\t-->\n\n        <!-- \n            Start Google Translate \n            https://www.w3schools.com/howto/howto_google_translate.asp\n        -->\n\n        <script>\n            function googleTranslateElementInit() {\n                new google.translate.TranslateElement({ pageLanguage: 'en' }, 'google_translate_element');\n            }\n        </script>\n        <script src=\"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\n\n        <!-- End Google Translate -->\n    </body>\n</html>\n"], "filenames": ["public/js/client.js", "public/views/client.html"], "buggy_code_start_loc": [4665, 478], "buggy_code_end_loc": [4989, 487], "fixing_code_start_loc": [4665, 479], "fixing_code_end_loc": [4994, 490], "type": "CWE-79", "message": "A cross-site scripting (XSS) vulnerability in MiroTalk P2P before commit f535b35 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the Name parameter under the settings module.", "other": {"cve": {"id": "CVE-2023-27054", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-22T22:15:12.490", "lastModified": "2023-03-28T19:48:50.830", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A cross-site scripting (XSS) vulnerability in MiroTalk P2P before commit f535b35 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the Name parameter under the settings module."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mirotalk:mirotalk_p2p:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-02-18", "matchCriteriaId": "45DFFCBF-0545-417D-BC59-32824D4F24B9"}]}]}], "references": [{"url": "https://github.com/miroslavpejic85/mirotalk", "source": "cve@mitre.org", "tags": ["Product"]}, {"url": "https://github.com/miroslavpejic85/mirotalk/commit/f535b3515d2d480dc3135b37982f5df93e43c592", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/miroslavpejic85/mirotalk/issues/139", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/miroslavpejic85/mirotalk/commit/f535b3515d2d480dc3135b37982f5df93e43c592"}}