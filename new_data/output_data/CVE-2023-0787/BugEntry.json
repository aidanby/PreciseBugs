{"buggy_code": ["<?php\n\n/**\n * The main FAQ class. Yes, it's very huge.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-20\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Language\\Plurals;\n\n/*\n * SQL constants definitions\n */\ndefine('FAQ_SQL_ACTIVE_YES', 'yes');\ndefine('FAQ_SQL_ACTIVE_NO', 'no');\n\n/*\n * Query type definitions\n */\ndefine('FAQ_QUERY_TYPE_DEFAULT', 'faq_default');\ndefine('FAQ_QUERY_TYPE_APPROVAL', 'faq_approval');\ndefine('FAQ_QUERY_TYPE_EXPORT_PDF', 'faq_export_pdf');\ndefine('FAQ_QUERY_TYPE_EXPORT_XHTML', 'faq_export_xhtml');\ndefine('FAQ_QUERY_TYPE_EXPORT_XML', 'faq_export_xml');\n\n/*\n * Sorting type definitions\n */\ndefine('FAQ_SORTING_TYPE_NONE', 0);\ndefine('FAQ_SORTING_TYPE_CATID_FAQID', 1);\ndefine('FAQ_SORTING_TYPE_FAQTITLE_FAQID', 2);\ndefine('FAQ_SORTING_TYPE_DATE_FAQID', 3);\ndefine('FAQ_SORTING_TYPE_FAQID', 4);\n\n/**\n * Class Faq\n *\n * @package phpMyFAQ\n */\nclass Faq\n{\n    /**\n     * The current FAQ record.\n     *\n     * @var array\n     */\n    public array $faqRecord = [];\n\n    /**\n     * All current FAQ records in an array.\n     *\n     * @var array\n     */\n    public array $faqRecords = [];\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $translation;\n\n    /**\n     * Plural form support.\n     *\n     * @var Plurals\n     */\n    private Plurals $plurals;\n\n    /**\n     * Users.\n     *\n     * @var int\n     */\n    private int $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var int[]\n     */\n    private array $groups = [-1];\n\n    /**\n     * Flag for Group support.\n     *\n     * @var bool\n     */\n    private bool $groupSupport = false;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG, $plr;\n\n        $this->config = $config;\n        $this->translation = $PMF_LANG;\n        $this->plurals = $plr;\n\n        if ($this->config->get('security.permLevel') !== 'basic') {\n            $this->groupSupport = true;\n        }\n    }\n\n    /**\n     * @param int $userId\n     * @return Faq\n     */\n    public function setUser(int $userId = -1): Faq\n    {\n        $this->user = $userId;\n        return $this;\n    }\n\n    /**\n     * @param int[] $groups\n     * @return Faq\n     */\n    public function setGroups(array $groups): Faq\n    {\n        $this->groups = $groups;\n        return $this;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Entity ID\n     * @param string $orderBy    Order by\n     * @param string $sortBy     Sort by\n     *\n     * @return array<int, array<string, mixed>>\n     * @throws Exception\n     */\n    public function getAllRecordsByCategoryId(int $categoryId, string $orderBy = 'id', string $sortBy = 'ASC'): array\n    {\n        global $sids;\n\n        $faqData = [];\n\n        if ($orderBy == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.content AS record_content,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fd.created AS created\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s.%s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $currentTable,\n            $this->config->getDb()->escape($orderBy),\n            $this->config->getDb()->escape($sortBy)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n\n        if ($num > 0) {\n            $faqHelper = new FaqHelper($this->config);\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->thema;\n\n                $faqData[] = [\n                    'record_id' => $row->id,\n                    'record_lang' => $row->lang,\n                    'category_id' => $row->category_id,\n                    'record_title' => $row->thema,\n                    'record_preview' => $faqHelper->renderAnswerPreview($row->record_content, 25),\n                    'record_link' => $oLink->toString(),\n                    'record_updated' => $row->updated,\n                    'visits' => $visits,\n                    'record_created' => $row->created,\n                ];\n            }\n        } else {\n            return $faqData;\n        }\n\n        return $faqData;\n    }\n\n    /**\n     * Returns a part of a query to check permissions.\n     *\n     * @param bool $hasGroupSupport\n     *\n     * @return string\n     */\n    protected function queryPermission(bool $hasGroupSupport = false): string\n    {\n        if ($hasGroupSupport) {\n            if (-1 === $this->user) {\n                return sprintf(\n                    'AND fdg.group_id IN (%s)',\n                    implode(', ', $this->groups)\n                );\n            } else {\n                return sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups)\n                );\n            }\n        }\n\n        if (-1 !== $this->user) {\n            return sprintf(\n                'AND ( fdu.user_id = %d OR fdu.user_id = -1 )',\n                $this->user\n            );\n        } else {\n            return 'AND fdu.user_id = -1';\n        }\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Entity ID\n     * @param string $orderBy    Order by\n     * @param string $sortBy     Sort by\n     *\n     * @return string\n     */\n    public function renderRecordsByCategoryId(int $categoryId, string $orderBy = 'id', string $sortBy = 'ASC'): string\n    {\n        global $sids;\n\n        $numPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $output = '';\n        $title = '';\n\n        if ($orderBy == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        // If random FAQs are activated, we don't need an order\n        if (true === $this->config->get('records.randomSort')) {\n            $order = '';\n        } else {\n            $order = sprintf(\n                'ORDER BY fd.sticky DESC, %s.%s %s',\n                $currentTable,\n                $this->config->getDb()->escape($orderBy),\n                $this->config->getDb()->escape($sortBy)\n            );\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.sticky AS sticky,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            %s\n            %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $order\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n        $pages = (int)ceil($num / $numPerPage);\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = $page * $numPerPage - $numPerPage;\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf(\n                    '<p><strong>%s %s %s</strong></p>',\n                    $this->translation['msgPage'] . $page,\n                    $this->translation['msgVoteFrom'],\n                    $pages . $this->translation['msgPages']\n                );\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n\n            $counter = 0;\n            $displayedCounter = 0;\n            $renderedItems = [];\n            while (($row = $this->config->getDb()->fetchObject($result)) && $displayedCounter < $numPerPage) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $title;\n\n                // If random FAQs are activated, we don't need sticky FAQs\n                if (true === $this->config->get('records.randomSort')) {\n                    $row->sticky = 0;\n                }\n\n                $renderedItems[$row->id] = sprintf(\n                    '<li%s>%s<span id=\"viewsPerRecord\"><small>(%s)</small></span></li>',\n                    ($row->sticky == 1) ? ' class=\"sticky-faqs\"' : '',\n                    $oLink->toHtmlAnchor(),\n                    $this->plurals->getMsg('plmsgViews', $visits)\n                );\n            }\n\n            // If random FAQs are activated, shuffle the FAQs :-)\n            if (true === $this->config->get('records.randomSort')) {\n                shuffle($renderedItems);\n            }\n\n            $output .= implode(\"\\n\", $renderedItems);\n            $output .= '</ul>';\n        } else {\n            return false;\n        }\n\n        if ($pages > 1) {\n            // Set rewrite URL, if needed\n            if ($this->config->get('main.enableRewriteRules')) {\n                $link = new Link($this->config->getDefaultUrl(), $this->config);\n                $useRewrite = true;\n                $rewriteUrl = sprintf(\n                    '%scategory/%d/%%d/%s.html',\n                    $this->config->getDefaultUrl(),\n                    $categoryId,\n                    $link->getSEOItemTitle($title)\n                );\n            } else {\n                $useRewrite = false;\n                $rewriteUrl = '';\n            }\n            $baseUrl = sprintf(\n                '%sindex.php?%saction=show&amp;cat=%d&amp;seite=%d',\n                $this->config->getDefaultUrl(),\n                (empty($sids) ? '' : $sids),\n                $categoryId,\n                $page\n            );\n\n            $options = array(\n                'baseUrl' => $baseUrl,\n                'total' => $num,\n                'perPage' => $this->config->get('records.numberOfRecordsPerPage'),\n                'useRewrite' => $useRewrite,\n                'rewriteUrl' => $rewriteUrl,\n                'pageParamName' => 'seite',\n            );\n\n            $pagination = new Pagination($this->config, $options);\n            $output .= $pagination->render();\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function returns all not expired records from the given record ids.\n     *\n     * @param array  $recordIds Array of record ids\n     * @param string $orderBy   Order by\n     * @param string $sortBy    Sort by\n     *\n     * @return string\n     */\n    public function renderRecordsByFaqIds(array $recordIds, string $orderBy = 'fd.id', string $sortBy = 'ASC'): string\n    {\n        global $sids;\n\n        $records = implode(', ', $recordIds);\n        $page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $taggingId = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\n        $output = '';\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $records,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->config->getDb()->escape($orderBy),\n            $this->config->getDb()->escape($sortBy)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        $num = $this->config->getDb()->numRows($result);\n        $pages = ceil($num / $this->config->get('records.numberOfRecordsPerPage'));\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = ($page * $this->config->get('records.numberOfRecordsPerPage')) -\n                $this->config->get('records.numberOfRecordsPerPage');\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf(\n                    '<p><strong>%s %s %s</strong></p>',\n                    $this->translation['msgPage'] . $page,\n                    $this->translation['msgVoteFrom'],\n                    $pages . $this->translation['msgPages']\n                );\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n            $counter = 0;\n            $displayedCounter = 0;\n\n            $lastFaqId = 0;\n            while (\n                ($row = $this->config->getDb()->fetchObject($result)) &&\n                $displayedCounter < $this->config->get('records.numberOfRecordsPerPage')\n            ) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if ($lastFaqId == $row->id) {\n                    continue; // Don't show multiple FAQs\n                }\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = sprintf(\n                    '<li>%s<br><small>(%s)</small></li>',\n                    $oLink->toHtmlAnchor(),\n                    $this->plurals->GetMsg('plmsgViews', $visits)\n                );\n\n                $output .= $listItem;\n\n                $lastFaqId = $row->id;\n            }\n            $output .= '</ul><span id=\"totFaqRecords\" style=\"display: none;\">' . $num . '</span>';\n        } else {\n            return false;\n        }\n\n        if ($num > $this->config->get('records.numberOfRecordsPerPage')) {\n            $output .= '<p class=\"text-center\"><strong>';\n            if (!isset($page)) {\n                $page = 1;\n            }\n            $vor = $page - 1;\n            $next = $page + 1;\n            if ($vor != 0) {\n                $url = $sids . '&amp;action=search&amp;tagging_id=' . $taggingId . '&amp;seite=' . $vor;\n                $oLink = new Link($this->config->getDefaultUrl() . '?' . $url, $this->config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->translation['msgPrevious'];\n                $oLink->tooltip = $this->translation['msgPrevious'];\n                $output .= '[ ' . $oLink->toHtmlAnchor() . ' ]';\n            }\n            $output .= ' ';\n            if ($next <= $pages) {\n                $url = $sids . '&amp;action=search&amp;tagging_id=' . $taggingId . '&amp;seite=' . $next;\n                $oLink = new Link($this->config->getDefaultUrl() . '?' . $url, $this->config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->translation['msgNext'];\n                $oLink->tooltip = $this->translation['msgNext'];\n                $output .= '[ ' . $oLink->toHtmlAnchor() . ' ]';\n            }\n            $output .= '</strong></p>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int      $faqId FAQ ID\n     * @param int|null $faqRevisionId Revision ID\n     * @param bool     $isAdmin Must be true if it is called by an admin/author context\n     */\n    public function getRecord(int $faqId, int $faqRevisionId = null, bool $isAdmin = false)\n    {\n        global $PMF_LANG;\n\n        $currentLanguage = $this->config->getLanguage()->getLanguage();\n        $defaultLanguage = $this->config->getDefaultLanguage();\n\n        $result = $this->getRecordResult($faqId, $currentLanguage, $faqRevisionId, $isAdmin);\n\n        if (0 === $this->config->getDb()->numRows($result)) {\n            $result = $this->getRecordResult($faqId, $defaultLanguage, $faqRevisionId, $isAdmin);\n        }\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $answer = $row->content;\n            $active = ('yes' === $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$isAdmin) {\n                if (!$active) {\n                    $answer = $this->translation['err_inactiveArticle'];\n                }\n                if ($expired) {\n                    $answer = $this->translation['err_expiredArticle'];\n                }\n            }\n\n            $this->faqRecord = [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $answer,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes,\n                'created' => $row->created,\n            ];\n        } else {\n            $this->faqRecord = [\n                'id' => $faqId,\n                'lang' => $currentLanguage,\n                'solution_id' => 42,\n                'revision_id' => $faqRevisionId,\n                'active' => 'no',\n                'sticky' => 0,\n                'keywords' => '',\n                'title' => '',\n                'content' => $PMF_LANG['msgAccessDenied'],\n                'author' => '',\n                'email' => '',\n                'comment' => '',\n                'date' => Date::createIsoDate(date('YmdHis')),\n                'dateStart' => '',\n                'dateEnd' => '',\n                'linkState' => '',\n                'linkCheckDate' => '',\n                'notes' => '',\n                'created' => date('c'),\n            ];\n        }\n    }\n\n    /**\n     * Executes a query to retrieve a single FAQ.\n     *\n     * @param int    $faqId\n     * @param string $faqLanguage\n     * @param null   $faqRevisionId\n     * @param bool   $isAdmin\n     * @return mixed\n     */\n    public function getRecordResult($faqId, $faqLanguage, $faqRevisionId = null, $isAdmin = false)\n    {\n        $query = sprintf(\n            \"SELECT\n                 id, lang, solution_id, revision_id, active, sticky, keywords,\n                 thema, content, author, email, comment, updated, links_state,\n                 links_check_date, date_start, date_end, created, notes\n            FROM\n                %s%s fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id = %d\n            %s\n            AND\n                fd.lang = '%s'\n                %s\",\n            Database::getTablePrefix(),\n            isset($faqRevisionId) ? 'faqdata_revisions' : 'faqdata',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $faqId,\n            isset($faqRevisionId) ? 'AND revision_id = ' . $faqRevisionId : '',\n            $faqLanguage,\n            ($isAdmin) ? 'AND 1=1' : $this->queryPermission($this->groupSupport)\n        );\n\n        return $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Return records from given IDs\n     *\n     * @param  array $faqIds\n     * @return array\n     * @throws Exception\n     */\n    public function getRecordsByIds(array $faqIds): array\n    {\n        $faqRecords = [];\n\n        $query = sprintf(\n            \"SELECT\n                 fd.id AS id,\n                 fd.lang AS lang,\n                 fd.thema AS question,\n                 fd.content AS answer,\n                 fd.updated AS updated,\n                 fd.created AS created,\n                 fcr.category_id AS category_id,\n                 fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            implode(',', $faqIds),\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        $faqHelper = new FaqHelper($this->config);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            if (empty($row->visits)) {\n                $visits = 0;\n            } else {\n                $visits = $row->visits;\n            }\n\n            $url = sprintf(\n                '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                $this->config->getDefaultUrl(),\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->question;\n\n            $faqRecords[] = [\n                'record_id' => (int)$row->id,\n                'record_lang' => $row->lang,\n                'category_id' => (int)$row->category_id,\n                'record_title' => $row->question,\n                'record_preview' => $faqHelper->renderAnswerPreview($row->answer, 25),\n                'record_link' => $oLink->toString(),\n                'record_updated' => Date::createIsoDate($row->updated) . ':00',\n                'visits' => (int)$visits,\n                'record_created' => $row->created\n            ];\n        }\n\n        return $faqRecords;\n    }\n\n    /**\n     * Adds a new record.\n     *\n     * @param array $data      Array of FAQ data\n     * @param bool  $newRecord Do not create a new ID if false\n     * @deprecated will be removed in v3.2\n     *\n     * @return int\n     */\n    public function addRecord(array $data, bool $newRecord = true): int\n    {\n        if ($newRecord) {\n            $recordId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqdata', 'id');\n        } else {\n            $recordId = $data['id'];\n        }\n\n        // Add new entry\n        $query = sprintf(\n            \"INSERT INTO %sfaqdata VALUES\n            (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getDb()->escape($data['lang']),\n            $this->getNextSolutionId(),\n            0,\n            $data['active'],\n            $data['sticky'],\n            $this->config->getDb()->escape($data['keywords']),\n            $this->config->getDb()->escape($data['thema']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            date('Y-m-d H:i:s'),\n            $data['notes']\n        );\n\n        $this->config->getDb()->query($query);\n\n        return $recordId;\n    }\n\n    /**\n     * Creates a new FAQ.\n     *\n     * @param FaqEntity $faq\n     * @return int\n     */\n    public function create(FaqEntity $faq): int\n    {\n        if (is_null($faq->getId())) {\n            $faq->setId($this->config->getDb()->nextId(Database::getTablePrefix() . 'faqdata', 'id'));\n        }\n\n        $query = sprintf(\n            \"INSERT INTO %sfaqdata VALUES\n            (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $faq->getId(),\n            $this->config->getDb()->escape($faq->getLanguage()),\n            $this->getNextSolutionId(),\n            0,\n            $faq->isActive() ? 'yes' : 'no',\n            $faq->isSticky() ? 1 : 0,\n            $this->config->getDb()->escape($faq->getKeywords()),\n            $this->config->getDb()->escape($faq->getQuestion()),\n            $this->config->getDb()->escape($faq->getAnswer()),\n            $this->config->getDb()->escape($faq->getAuthor()),\n            $faq->getEmail(),\n            $faq->isComment() ? 'y' : 'n',\n            $faq->getUpdatedDate()->format('YmdHis'),\n            $faq->getLinkState(),\n            $faq->getLinksCheckedDate()->format(DATE_ISO8601),\n            '00000000000000',\n            '99991231235959',\n            date('Y-m-d H:i:s'),\n            $faq->getNotes()\n        );\n\n        $this->config->getDb()->query($query);\n\n        return $faq->getId();\n    }\n\n    /**\n     * Gets the latest solution id for a FAQ record.\n     *\n     * @return int\n     */\n    public function getNextSolutionId(): int\n    {\n        $latestId = 0;\n\n        $query = sprintf('SELECT MAX(solution_id) AS solution_id FROM %sfaqdata', Database::getTablePrefix());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result && $row = $this->config->getDb()->fetchObject($result)) {\n            $latestId = $row->solution_id;\n        }\n\n        if ($latestId < PMF_SOLUTION_ID_START_VALUE) {\n            $nextSolutionId = PMF_SOLUTION_ID_START_VALUE;\n        } else {\n            $nextSolutionId = $latestId + PMF_SOLUTION_ID_INCREMENT_VALUE;\n        }\n\n        return $nextSolutionId;\n    }\n\n    /**\n     * Updates a record.\n     *\n     * @param array $data Array of FAQ data\n     *\n     * @return bool\n     */\n    public function updateRecord(array $data)\n    {\n        // Update entry\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqdata\n            SET\n                revision_id = %d,\n                active = '%s',\n                sticky = %d,\n                keywords = '%s',\n                thema = '%s',\n                content = '%s',\n                author = '%s',\n                email = '%s',\n                comment = '%s',\n                updated = '%s',\n                links_state = '%s',\n                links_check_date = %d,\n                date_start = '%s',\n                date_end = '%s',\n                notes = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $data['revision_id'],\n            $data['active'],\n            $data['sticky'],\n            $this->config->getDb()->escape($data['keywords']),\n            $this->config->getDb()->escape($data['thema']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['notes'],\n            $data['id'],\n            $data['lang']\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Deletes a record and all the dependencies.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     * @return bool\n     * @throws Attachment\\AttachmentException\n     * @throws Attachment\\Filesystem\\File\\FileException\n     */\n    public function deleteRecord(int $recordId, string $recordLang): bool\n    {\n        $solutionId = $this->getSolutionIdFromId($recordId, $recordLang);\n\n        $queries = array(\n            sprintf(\n                \"DELETE FROM %sfaqchanges WHERE beitrag = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqcategoryrelations WHERE record_id = %d AND record_lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata_revisions WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqvisits WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_user WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_group WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE %sfaqdata_tags.record_id NOT IN (SELECT %sfaqdata.id FROM %sfaqdata)',\n                Database::getTablePrefix(),\n                Database::getTablePrefix(),\n                Database::getTablePrefix(),\n                Database::getTablePrefix()\n            ),\n            sprintf(\n                'DELETE FROM %sfaqcomments WHERE id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqvoting WHERE artikel = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n        );\n\n        foreach ($queries as $query) {\n            $this->config->getDb()->query($query);\n        }\n\n        // Delete possible attachments\n        $attachments = AttachmentFactory::fetchByRecordId($this->config, $recordId);\n        foreach ($attachments as $attachment) {\n            $currentAttachment = AttachmentFactory::create($attachment->getId());\n            $currentAttachment->delete();\n        }\n\n        // Delete possible Elasticsearch documents\n        if ($this->config->get('search.enableElasticsearch')) {\n            $esInstance = new Elasticsearch($this->config);\n            $esInstance->delete($solutionId);\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the solution ID from a given ID and language\n     *\n     * @param int    $faqId\n     * @param string $faqLang\n     *\n     * @return int\n     */\n    public function getSolutionIdFromId(int $faqId, string $faqLang): int\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                solution_id\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n                AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $faqId,\n            $this->config->getDb()->escape($faqLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return $row->solution_id;\n        }\n\n        return $this->getNextSolutionId();\n    }\n\n    /**\n     * Checks if a record is already translated.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     * @return bool\n     */\n    public function hasTranslation(int $recordId, string $recordLang): bool\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                id, lang\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getDb()->escape($recordLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks, if comments are disabled for the FAQ record.\n     *\n     * @param int    $recordId    Id of FAQ or news entry\n     * @param string $recordLang  Language\n     * @param string $commentType Type of comment: faq or news\n     * @return bool true, if comments are disabled\n     */\n    public function commentDisabled(int $recordId, string $recordLang, string $commentType = 'faq'): bool\n    {\n        if ('news' == $commentType) {\n            $table = 'faqnews';\n        } else {\n            $table = 'faqdata';\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                comment\n            FROM\n                %s%s\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $table,\n            $recordId,\n            $this->config->getDb()->escape($recordLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return !(($row->comment === 'y'));\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int $solutionId Solution ID\n     */\n    public function getRecordBySolutionId(int $solutionId): void\n    {\n        $query = sprintf(\n            'SELECT\n                *\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.solution_id = %d\n                %s',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $solutionId,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->translation['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->translation['err_expiredArticle'];\n            }\n\n            $this->faqRecord = array(\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes\n            );\n        }\n    }\n\n    /**\n     * Gets the record ID from a given solution ID.\n     *\n     * @param int $solutionId Solution ID\n     *\n     * @return array\n     */\n    public function getIdFromSolutionId($solutionId)\n    {\n        $query = sprintf(\n            '\n            SELECT\n                fd.id,\n                fd.lang,\n                fd.thema AS question,\n                fd.content,\n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            WHERE\n                fd.solution_id = %d',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $solutionId\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'question' => $row->question,\n                'content' => $row->content,\n                'category_id' => $row->category_id\n            ];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns an array with all data from all FAQ records.\n     *\n     * @param int    $sortType  Sorting type\n     * @param array  $condition Condition\n     * @param string $sortOrder Sorting order\n     */\n    public function getAllRecords($sortType = FAQ_SORTING_TYPE_CATID_FAQID, array $condition = null, $sortOrder = 'ASC')\n    {\n        $where = '';\n        if (!is_null($condition)) {\n            $num = count($condition);\n            $where = 'WHERE ';\n            foreach ($condition as $field => $data) {\n                --$num;\n                $where .= $field;\n                if (is_array($data)) {\n                    $where .= ' IN (';\n                    $separator = '';\n                    foreach ($data as $value) {\n                        $where .= $separator . \"'\" . $this->config->getDb()->escape($value) . \"'\";\n                        $separator = ', ';\n                    }\n                    $where .= ')';\n                } else {\n                    $where .= \" = '\" . $this->config->getDb()->escape($data) . \"'\";\n                }\n                if ($num > 0) {\n                    $where .= ' AND ';\n                }\n            }\n        }\n\n        switch ($sortType) {\n            case FAQ_SORTING_TYPE_CATID_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.id %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fd.id %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_FAQTITLE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.thema %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_DATE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.updated %s',\n                    $sortOrder\n                );\n                break;\n\n            default:\n                $orderBy = '';\n                break;\n        }\n\n        // prevents multiple display of FAQ in case it is tagged under multiple groups.\n        $groupBy = ' group by fd.id, fcr.category_id,fd.solution_id,fd.revision_id,fd.active,fd.sticky,fd.keywords,' .\n            'fd.thema,fd.content,fd.author,fd.email,fd.comment,fd.updated,fd.links_state,fd.links_check_date,' .\n            'fd.date_start,fd.date_end,fd.sticky,fd.created,fd.notes,fd.lang ';\n        $query = sprintf(\n            '\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.links_state AS links_state,\n                fd.links_check_date AS links_check_date,\n                fd.date_start AS date_start,\n                fd.date_end AS date_end,\n                fd.sticky AS sticky,\n                fd.created AS created,\n                fd.notes AS notes\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            %s\n            %s\n            %s\n            %s',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $where,\n            $this->queryPermission($this->groupSupport),\n            $groupBy,\n            $orderBy\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->translation['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->translation['err_expiredArticle'];\n            }\n\n            $this->faqRecords[] = [\n                'id' => $row->id,\n                'category_id' => $row->category_id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $row->thema,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'updated' => Date::createIsoDate($row->updated, 'Y-m-d H:i:s'),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'created' => $row->created,\n                'notes' => $row->notes\n            ];\n        }\n    }\n\n    /**\n     * Returns the FAQ record title from the ID and language.\n     *\n     * @param int $id Record id\n     * @return string\n     */\n    public function getRecordTitle(int $id): string\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['title'];\n        }\n\n        $question = '';\n\n        $query = sprintf(\n            \"SELECT\n                thema AS question\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getLanguage()->getLanguage()\n        );\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $question = Strings::htmlspecialchars($row->question);\n            }\n        } else {\n            $question = $this->translation['no_cats'];\n        }\n\n        return $question;\n    }\n\n    /**\n     * Returns the keywords of a FAQ record from the ID and language.\n     *\n     * @param int $id record id\n     * @return string\n     */\n    public function getRecordKeywords(int $id): string\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['keywords'];\n        }\n\n        $query = sprintf(\n            \"SELECT\n                keywords\n            FROM\n                %sfaqdata\n            WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $row = $this->config->getDb()->fetchObject($result);\n\n            return Strings::htmlspecialchars($row->keywords, ENT_QUOTES, 'utf-8');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Returns a answer preview of the FAQ record.\n     *\n     * @param int $recordId  FAQ record ID\n     * @param int $wordCount Number of words, default: 12\n     * @return string\n     */\n    public function getRecordPreview(int $recordId, int $wordCount = 12): string\n    {\n        if (isset($this->faqRecord['id']) && ((int)$this->faqRecord['id'] === (int)$recordId)) {\n            $answerPreview = $this->faqRecord['content'];\n\n            return Utils::makeShorterText($answerPreview, $wordCount);\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                content as answer\n            FROM\n                %sfaqdata\n            WHERE \n                id = %d \n            AND \n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $row = $this->config->getDb()->fetchObject($result);\n            $answerPreview = strip_tags($row->answer);\n        } else {\n            $answerPreview = $this->config->get('main.metaDescription');\n        }\n\n        return Utils::makeShorterText($answerPreview, $wordCount);\n    }\n\n    /**\n     * Returns the number of activated and not expired records, optionally\n     * not limited to the current language.\n     *\n     * @param string|null $language Language\n     * @return int\n     */\n    public function getNumberOfRecords(string $language = null): int\n    {\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                id\n            FROM\n                %sfaqdata\n            WHERE\n                active = 'yes'\n            %s\n            AND\n                date_start <= '%s'\n            AND\n                date_end >= '%s'\",\n            Database::getTablePrefix(),\n            null === $language ? '' : \"AND lang = '\" . $this->config->getDb()->escape($language) . \"'\",\n            $now,\n            $now\n        );\n\n        $num = $this->config->getDb()->numRows($this->config->getDb()->query($query));\n\n        if ($num > 0) {\n            return $num;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * This function generates a list with the most voted or most visited records.\n     *\n     * @param string $type Type definition visits/voted\n     * @return array\n     */\n    public function getTopTen(string $type = 'visits'): array\n    {\n        if ('visits' === $type) {\n            $result = $this->getTopTenData(PMF_NUMBER_RECORDS_TOPTEN, 0, $this->config->getLanguage()->getLanguage());\n        } else {\n            $result = $this->getTopVotedData(PMF_NUMBER_RECORDS_TOPTEN, $this->config->getLanguage()->getLanguage());\n        }\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                if ('visits' == $type) {\n                    $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = Strings::htmlentities($row['url']);\n                    $output['visits'][] = $this->plurals->GetMsg('plmsgViews', $row['visits']);\n                } else {\n                    $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = Strings::htmlentities($row['url']);\n                    $output['voted'][] = sprintf(\n                        '%s %s 5 - %s',\n                        round($row['avg'], 2),\n                        $this->translation['msgVoteFrom'],\n                        $this->plurals->GetMsg('plmsgVotes', $row['user'])\n                    );\n                }\n            }\n        } else {\n            $output['error'] = $this->translation['err_noTopTen'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates the Top Ten data with the most viewed records.\n     *\n     * @param int  $count Number of records\n     * @param int  $categoryId Entity ID\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getTopTenData(\n        int $count = PMF_NUMBER_RECORDS_TOPTEN,\n        int $categoryId = 0,\n        string $language = null\n    ): array {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n            'SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS question,\n                fd.content AS answer,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                ' . Database::getTablePrefix() . 'faqvisits fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\'' . $categoryId . '\\'';\n        }\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fv.last_visit,fdg.group_id,fdu.user_id\n            ORDER BY\n                fv.visits DESC';\n\n        $result = $this->config->getDb()->query($query);\n        $topTen = [];\n        $data = [];\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['visits'] = (int)$row->visits;\n                $data['question'] = Filter::filterVar($row->question, FILTER_UNSAFE_RAW);\n                $data['answer'] = $row->answer;\n                $data['date'] = Date::createIsoDate($row->updated, DATE_ISO8601, true);\n                $data['last_visit'] = date('c', $row->last_visit);\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->question;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topTen[$row->id] = $data;\n\n                if (count($topTen) === $count) {\n                    break;\n                }\n            }\n\n            array_multisort($topTen, SORT_DESC);\n        }\n\n        return $topTen;\n    }\n\n    /**\n     * This function generates a data-set with the most voted FAQs.\n     *\n     * @param int    $count    Number of records\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getTopVotedData(int $count = PMF_NUMBER_RECORDS_TOPTEN, string $language = null): array\n    {\n        global $sids;\n\n        $topten = $data = [];\n\n        $now = date('YmdHis');\n        $query =\n            '            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                (fv.vote/fv.usr) AS avg,\n                fv.usr AS user\n            FROM\n                ' . Database::getTablePrefix() . 'faqvoting fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.artikel\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\'' . $categoryId . '\\'';\n        }\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n            ORDER BY\n                avg DESC';\n\n        $result = $this->config->getDb()->query($query);\n\n        $i = 1;\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result)) && $i <= $count) {\n            if ($oldId != $row->id) {\n                $data['avg'] = $row->avg;\n                $data['question'] = $row->thema;\n                $data['date'] = $row->updated;\n                $data['user'] = $row->user;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[] = $data;\n                ++$i;\n            }\n            $oldId = $row->id;\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates the list with the latest published records.\n     *\n     * @return array\n     * @throws Exception\n     */\n    public function getLatest(): array\n    {\n        $date = new Date($this->config);\n        $result = $this->getLatestData(PMF_NUMBER_RECORDS_LATEST, $this->config->getLanguage()->getLanguage());\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['url'][] = Strings::htmlentities($row['url']);\n                $output['title'][] = Strings::htmlentities(Utils::makeShorterText($row['question'], 8));\n                $output['preview'][] = Strings::htmlentities($row['question']);\n                $output['date'][] = $date->format($row['date']);\n            }\n        } else {\n            $output['error'] = $this->translation['err_noArticles'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates an array with a specified number of most recent\n     * published records.\n     *\n     * @param int    $count    Number of records\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getLatestData(int $count = PMF_NUMBER_RECORDS_LATEST, string $language = null): array\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n            '            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.thema AS question,\n                fd.content AS content,\n                fd.updated AS updated,\n                fv.visits AS visits,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                ' . Database::getTablePrefix() . 'faqvisits fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fdg.group_id,fdu.user_id\n            ORDER BY\n                fd.updated DESC';\n\n        $result = $this->config->getDb()->query($query);\n        $latest = [];\n        $data = [];\n\n        if ($result) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, [-1, $this->user]) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, [-1, $this->user])) {\n                        continue;\n                    }\n                }\n\n                $data['date'] = Date::createIsoDate($row->updated, DATE_ISO8601, true);\n                $data['question'] = Filter::filterVar($row->question, FILTER_UNSAFE_RAW);\n                $data['answer'] = $row->content;\n                $data['visits'] = (int)$row->visits;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $title;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $latest[$row->id] = $data;\n\n                if (count($latest) === $count) {\n                    break;\n                }\n            }\n        }\n\n        return $latest;\n    }\n\n    /**\n     * Retrieve faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $nCatid\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     * @return array\n     */\n    public function get(\n        string $queryType = FAQ_QUERY_TYPE_DEFAULT,\n        int $nCatid = 0,\n        bool $bDownwards = true,\n        string $lang = '',\n        string $date = ''\n    ): array {\n        $faqs = [];\n\n        $result = $this->config->getDb()->query($this->getSQLQuery($queryType, $nCatid, $bDownwards, $lang, $date));\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $i = 0;\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $faq = [];\n                $faq['id'] = $row->id;\n                $faq['solution_id'] = $row->solution_id;\n                $faq['revision_id'] = $row->revision_id;\n                $faq['lang'] = $row->lang;\n                $faq['category_id'] = $row->category_id;\n                $faq['active'] = $row->active;\n                $faq['sticky'] = $row->sticky;\n                $faq['keywords'] = $row->keywords;\n                $faq['topic'] = $row->thema;\n                $faq['content'] = $row->content;\n                $faq['author_name'] = $row->author;\n                $faq['author_email'] = $row->email;\n                $faq['comment_enable'] = $row->comment;\n                $faq['lastmodified'] = $row->updated;\n                $faq['hits'] = $row->visits;\n                $faq['hits_last'] = $row->last_visit;\n                $faq['notes'] = $row->notes;\n                $faqs[$i] = $faq;\n                ++$i;\n            }\n        }\n\n        return $faqs;\n    }\n\n    /**\n     * Build the SQL query for retrieving faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $categoryId\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     * @param int    $faqId\n     * @return string\n     */\n    private function getSQLQuery(\n        string $queryType,\n        int $categoryId,\n        bool $bDownwards,\n        string $lang,\n        string $date,\n        int $faqId = 0\n    ): string {\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.notes AS notes,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit\n            FROM\n                %sfaqdata fd,\n                %sfaqvisits fv,\n                %sfaqcategoryrelations fcr\n            WHERE\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            AND\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND \",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now\n        );\n        // faqvisits data selection\n        if (!empty($faqId)) {\n            // Select ONLY the faq with the provided $faqid\n            $query .= \"fd.id = '\" . $faqId . \"' AND \";\n        }\n        $query .= 'fd.id = fv.id\n            AND\n                fd.lang = fv.lang';\n        $needAndOp = true;\n        if ((!empty($categoryId)) && $categoryId > 0) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= ' (fcr.category_id = ' . $categoryId;\n            if ($bDownwards) {\n                $query .= $this->getCatidWhereSequence($categoryId, 'OR');\n            }\n            $query .= ')';\n            $needAndOp = true;\n        }\n        if ((!empty($date)) && Utils::isLikeOnPMFDate($date)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.updated LIKE '\" . $date . \"'\";\n            $needAndOp = true;\n        }\n        if ((!empty($lang)) && Utils::isLanguage($lang)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.lang = '\" . $this->config->getDb()->escape($lang) . \"'\";\n            $needAndOp = true;\n        }\n        switch ($queryType) {\n            case FAQ_QUERY_TYPE_APPROVAL:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_NO . \"'\";\n                break;\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_YES . \"'\";\n                break;\n            default:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_YES . \"'\";\n                break;\n        }\n        // Sort criteria\n        switch ($queryType) {\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n            default:\n                // Normal ordering\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n        }\n\n        return $query;\n    }\n\n    /**\n     * Build a logic sequence, for a WHERE statement, of those category IDs\n     * children of the provided category ID, if any.\n     *\n     * @param int    $nCatid\n     * @param string $logicOp\n     * @param $oCat\n     * @return string\n     */\n    private function getCatidWhereSequence(int $nCatid, string $logicOp = 'OR', $oCat = null): string\n    {\n        $sqlWhereFilter = '';\n\n        if (!isset($oCat)) {\n            $oCat = new Category($this->config);\n        }\n        $aChildren = array_values($oCat->getChildren($nCatid));\n\n        foreach ($aChildren as $catid) {\n            $sqlWhereFilter .= ' ' . $logicOp . ' fcr.category_id = ' . $catid;\n            $sqlWhereFilter .= $this->getCatidWhereSequence($catid, 'OR', $oCat);\n        }\n\n        return $sqlWhereFilter;\n    }\n\n    /**\n     * Returns all records of one category.\n     *\n     * @param int $categoryId\n     *\n     * @return string\n     */\n    public function getRecordsWithoutPagingByCategoryId(int $categoryId): string\n    {\n        global $sids;\n\n        $output = '';\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            GROUP BY\n                fd.id,fd.lang,fd.thema,fcr.category_id,fv.visits\n            ORDER BY\n                %s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->config->get('records.orderby'),\n            $this->config->get('records.sortby')\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            $output = '<ul>';\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = '<li>' . $oLink->toHtmlAnchor() . '</li>';\n\n                $output .= $listItem;\n            }\n            $output .= '</ul>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Prints the open questions as a HTML table.\n     *\n     * @todo   needs to be moved to a QuestionHelper class\n     * @return string\n     * @throws Exception\n     */\n    public function renderOpenQuestions(): string\n    {\n        global $sids, $category;\n\n        $date = new Date($this->config);\n        $mail = new Mail($this->config);\n\n        $query = sprintf(\n            \"\n            SELECT\n                COUNT(id) AS num\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible != 'Y'\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $row = $this->config->getDb()->fetchObject($result);\n        $numOfInvisibles = $row->num;\n\n        if ($numOfInvisibles > 0) {\n            $extraout = sprintf(\n                '<tr><td colspan=\"3\"><small>%s %s</small></td></tr>',\n                $this->translation['msgQuestionsWaiting'],\n                $numOfInvisibles\n            );\n        } else {\n            $extraout = '';\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                *\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible = 'Y'\n            ORDER BY\n                created ASC\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $output = '';\n\n        if ($result && $this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $output .= '<tr class=\"openquestions\">';\n                $output .= sprintf(\n                    '<td><small>%s</small><br><a href=\"mailto:%s\">%s</a></td>',\n                    $date->format(Date::createIsoDate($row->created)),\n                    $mail->safeEmail($row->email),\n                    $row->username\n                );\n                $output .= sprintf(\n                    '<td><strong>%s:</strong><br>%s</td>',\n                    isset($category->categoryName[$row->category_id]['name']) ?\n                        $category->categoryName[$row->category_id]['name'] :\n                        '',\n                    strip_tags($row->question)\n                );\n                if ($this->config->get('records.enableCloseQuestion') && $row->answer_id) {\n                    $output .= sprintf(\n                        '<td><a id=\"PMF_openQuestionAnswered\" href=\"?%saction=faq&amp;cat=%d&amp;id=%d\">%s</a></td>',\n                        $sids,\n                        $row->category_id,\n                        $row->answer_id,\n                        $this->translation['msg2answerFAQ']\n                    );\n                } else {\n                    $output .= sprintf(\n                        '<td class=\"text-right\">' .\n                        '<a class=\"btn btn-primary\" href=\"?%saction=add&amp;question=%d&amp;cat=%d\">%s</a></td>',\n                        $sids,\n                        $row->id,\n                        $row->category_id,\n                        $this->translation['msg2answer']\n                    );\n                }\n                $output .= '</tr>';\n            }\n        } else {\n            $output = sprintf(\n                '<tr><td colspan=\"3\">%s</td></tr>',\n                $this->translation['msgNoQuestionsAvailable']\n            );\n        }\n\n        return $output . $extraout;\n    }\n\n    /**\n     * Set or unset a faq item flag.\n     *\n     * @param int    $id   Record id\n     * @param string $lang language code which is valid with Language::isASupportedLanguage\n     * @param bool   $flag record is set to sticky or not\n     * @param string $type type of the flag to set, use the column name\n     * @return bool\n     */\n    public function updateRecordFlag(int $id, string $lang, bool $flag, string $type): bool\n    {\n        $retval = false;\n\n        switch ($type) {\n            case 'sticky':\n                $flag = ($flag === 'checked' ? 1 : 0);\n                break;\n\n            case 'active':\n                $flag = ($flag === 'checked' ? \"'yes'\" : \"'no'\");\n                break;\n\n            default:\n                // This is because we would run into unknown db column\n                $flag = null;\n                break;\n        }\n\n        if (null !== $flag) {\n            $update = sprintf(\n                \"\n                UPDATE \n                    %sfaqdata \n                SET \n                    %s = %s \n                WHERE \n                    id = %d \n                AND \n                    lang = '%s'\",\n                Database::getTablePrefix(),\n                $type,\n                $flag,\n                $id,\n                $this->config->getDb()->escape($lang)\n            );\n\n            $retval = (bool)$this->config->getDb()->query($update);\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Prepares and returns the sticky records for the frontend.\n     *\n     * @return array\n     */\n    public function getStickyRecords(): array\n    {\n        $result = $this->getStickyRecordsData();\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                $output['preview'][] = $row['question'];\n                $output['url'][] = Strings::htmlentities($row['url']);\n            }\n        } else {\n            $output['error'] = sprintf('<li>%s</li>', $this->translation['err_noTopTen']);\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns the sticky records with URL and Title.\n     *\n     * @return array\n     */\n    public function getStickyRecordsData(): array\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqvisits fv,\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.date_start <= '%s'\n            AND \n                fd.date_end   >= '%s'\n            AND \n                fd.active = 'yes'\n            AND \n                fd.sticky = 1\n            AND\n                fd.id = fv.id\n            AND \n                fd.lang = fv.lang\n            %s\n            GROUP BY\n                fd.id, fd.lang, fd.thema, fcr.category_id, fv.visits\n            ORDER BY\n                fv.visits DESC\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage(),\n            $now,\n            $now,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $sticky = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['question'] = $row->thema;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $sticky[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $sticky;\n    }\n\n    /**\n     * Returns the inactive records with admin URL to edit the FAQ and title.\n     *\n     * @return array\n     */\n    public function getInactiveFaqsData(): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema\n            FROM\n                %sfaqdata fd\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.active = 'no'\n            GROUP BY\n                fd.id, fd.lang, fd.thema\n            ORDER BY\n                fd.id DESC\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $inactive = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['question'] = $row->thema;\n                $data['url'] = sprintf(\n                    '%sadmin/?action=editentry&id=%d&lang=%s',\n                    $this->config->getDefaultUrl(),\n                    $row->id,\n                    $row->lang\n                );\n                $inactive[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $inactive;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The main FAQ class. Yes, it's very huge.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-20\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Entity\\FaqEntity;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Language\\Plurals;\n\n/*\n * SQL constants definitions\n */\ndefine('FAQ_SQL_ACTIVE_YES', 'yes');\ndefine('FAQ_SQL_ACTIVE_NO', 'no');\n\n/*\n * Query type definitions\n */\ndefine('FAQ_QUERY_TYPE_DEFAULT', 'faq_default');\ndefine('FAQ_QUERY_TYPE_APPROVAL', 'faq_approval');\ndefine('FAQ_QUERY_TYPE_EXPORT_PDF', 'faq_export_pdf');\ndefine('FAQ_QUERY_TYPE_EXPORT_XHTML', 'faq_export_xhtml');\ndefine('FAQ_QUERY_TYPE_EXPORT_XML', 'faq_export_xml');\n\n/*\n * Sorting type definitions\n */\ndefine('FAQ_SORTING_TYPE_NONE', 0);\ndefine('FAQ_SORTING_TYPE_CATID_FAQID', 1);\ndefine('FAQ_SORTING_TYPE_FAQTITLE_FAQID', 2);\ndefine('FAQ_SORTING_TYPE_DATE_FAQID', 3);\ndefine('FAQ_SORTING_TYPE_FAQID', 4);\n\n/**\n * Class Faq\n *\n * @package phpMyFAQ\n */\nclass Faq\n{\n    /**\n     * The current FAQ record.\n     *\n     * @var array\n     */\n    public array $faqRecord = [];\n\n    /**\n     * All current FAQ records in an array.\n     *\n     * @var array\n     */\n    public array $faqRecords = [];\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $translation;\n\n    /**\n     * Plural form support.\n     *\n     * @var Plurals\n     */\n    private Plurals $plurals;\n\n    /**\n     * Users.\n     *\n     * @var int\n     */\n    private int $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var int[]\n     */\n    private array $groups = [-1];\n\n    /**\n     * Flag for Group support.\n     *\n     * @var bool\n     */\n    private bool $groupSupport = false;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG, $plr;\n\n        $this->config = $config;\n        $this->translation = $PMF_LANG;\n        $this->plurals = $plr;\n\n        if ($this->config->get('security.permLevel') !== 'basic') {\n            $this->groupSupport = true;\n        }\n    }\n\n    /**\n     * @param int $userId\n     * @return Faq\n     */\n    public function setUser(int $userId = -1): Faq\n    {\n        $this->user = $userId;\n        return $this;\n    }\n\n    /**\n     * @param int[] $groups\n     * @return Faq\n     */\n    public function setGroups(array $groups): Faq\n    {\n        $this->groups = $groups;\n        return $this;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Entity ID\n     * @param string $orderBy    Order by\n     * @param string $sortBy     Sort by\n     *\n     * @return array<int, array<string, mixed>>\n     * @throws Exception\n     */\n    public function getAllRecordsByCategoryId(int $categoryId, string $orderBy = 'id', string $sortBy = 'ASC'): array\n    {\n        global $sids;\n\n        $faqData = [];\n\n        if ($orderBy == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.content AS record_content,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fd.created AS created\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s.%s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $currentTable,\n            $this->config->getDb()->escape($orderBy),\n            $this->config->getDb()->escape($sortBy)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n\n        if ($num > 0) {\n            $faqHelper = new FaqHelper($this->config);\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->thema;\n\n                $faqData[] = [\n                    'record_id' => $row->id,\n                    'record_lang' => $row->lang,\n                    'category_id' => $row->category_id,\n                    'record_title' => $row->thema,\n                    'record_preview' => $faqHelper->renderAnswerPreview($row->record_content, 25),\n                    'record_link' => $oLink->toString(),\n                    'record_updated' => $row->updated,\n                    'visits' => $visits,\n                    'record_created' => $row->created,\n                ];\n            }\n        } else {\n            return $faqData;\n        }\n\n        return $faqData;\n    }\n\n    /**\n     * Returns a part of a query to check permissions.\n     *\n     * @param bool $hasGroupSupport\n     *\n     * @return string\n     */\n    protected function queryPermission(bool $hasGroupSupport = false): string\n    {\n        if ($hasGroupSupport) {\n            if (-1 === $this->user) {\n                return sprintf(\n                    'AND fdg.group_id IN (%s)',\n                    implode(', ', $this->groups)\n                );\n            } else {\n                return sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups)\n                );\n            }\n        }\n\n        if (-1 !== $this->user) {\n            return sprintf(\n                'AND ( fdu.user_id = %d OR fdu.user_id = -1 )',\n                $this->user\n            );\n        } else {\n            return 'AND fdu.user_id = -1';\n        }\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Entity ID\n     * @param string $orderBy    Order by\n     * @param string $sortBy     Sort by\n     *\n     * @return string\n     */\n    public function renderRecordsByCategoryId(int $categoryId, string $orderBy = 'id', string $sortBy = 'ASC'): string\n    {\n        global $sids;\n\n        $numPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $output = '';\n        $title = '';\n\n        if ($orderBy == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        // If random FAQs are activated, we don't need an order\n        if (true === $this->config->get('records.randomSort')) {\n            $order = '';\n        } else {\n            $order = sprintf(\n                'ORDER BY fd.sticky DESC, %s.%s %s',\n                $currentTable,\n                $this->config->getDb()->escape($orderBy),\n                $this->config->getDb()->escape($sortBy)\n            );\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.sticky AS sticky,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            %s\n            %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $order\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n        $pages = (int)ceil($num / $numPerPage);\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = $page * $numPerPage - $numPerPage;\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf(\n                    '<p><strong>%s %s %s</strong></p>',\n                    $this->translation['msgPage'] . $page,\n                    $this->translation['msgVoteFrom'],\n                    $pages . $this->translation['msgPages']\n                );\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n\n            $counter = 0;\n            $displayedCounter = 0;\n            $renderedItems = [];\n            while (($row = $this->config->getDb()->fetchObject($result)) && $displayedCounter < $numPerPage) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $title;\n\n                // If random FAQs are activated, we don't need sticky FAQs\n                if (true === $this->config->get('records.randomSort')) {\n                    $row->sticky = 0;\n                }\n\n                $renderedItems[$row->id] = sprintf(\n                    '<li%s>%s<span id=\"viewsPerRecord\"><small>(%s)</small></span></li>',\n                    ($row->sticky == 1) ? ' class=\"sticky-faqs\"' : '',\n                    $oLink->toHtmlAnchor(),\n                    $this->plurals->getMsg('plmsgViews', $visits)\n                );\n            }\n\n            // If random FAQs are activated, shuffle the FAQs :-)\n            if (true === $this->config->get('records.randomSort')) {\n                shuffle($renderedItems);\n            }\n\n            $output .= implode(\"\\n\", $renderedItems);\n            $output .= '</ul>';\n        } else {\n            return false;\n        }\n\n        if ($pages > 1) {\n            // Set rewrite URL, if needed\n            if ($this->config->get('main.enableRewriteRules')) {\n                $link = new Link($this->config->getDefaultUrl(), $this->config);\n                $useRewrite = true;\n                $rewriteUrl = sprintf(\n                    '%scategory/%d/%%d/%s.html',\n                    $this->config->getDefaultUrl(),\n                    $categoryId,\n                    $link->getSEOItemTitle($title)\n                );\n            } else {\n                $useRewrite = false;\n                $rewriteUrl = '';\n            }\n            $baseUrl = sprintf(\n                '%sindex.php?%saction=show&amp;cat=%d&amp;seite=%d',\n                $this->config->getDefaultUrl(),\n                (empty($sids) ? '' : $sids),\n                $categoryId,\n                $page\n            );\n\n            $options = array(\n                'baseUrl' => $baseUrl,\n                'total' => $num,\n                'perPage' => $this->config->get('records.numberOfRecordsPerPage'),\n                'useRewrite' => $useRewrite,\n                'rewriteUrl' => $rewriteUrl,\n                'pageParamName' => 'seite',\n            );\n\n            $pagination = new Pagination($this->config, $options);\n            $output .= $pagination->render();\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function returns all not expired records from the given record ids.\n     *\n     * @param array  $recordIds Array of record ids\n     * @param string $orderBy   Order by\n     * @param string $sortBy    Sort by\n     *\n     * @return string\n     */\n    public function renderRecordsByFaqIds(array $recordIds, string $orderBy = 'fd.id', string $sortBy = 'ASC'): string\n    {\n        global $sids;\n\n        $records = implode(', ', $recordIds);\n        $page = Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $taggingId = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\n        $output = '';\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $records,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->config->getDb()->escape($orderBy),\n            $this->config->getDb()->escape($sortBy)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        $num = $this->config->getDb()->numRows($result);\n        $pages = ceil($num / $this->config->get('records.numberOfRecordsPerPage'));\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = ($page * $this->config->get('records.numberOfRecordsPerPage')) -\n                $this->config->get('records.numberOfRecordsPerPage');\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf(\n                    '<p><strong>%s %s %s</strong></p>',\n                    $this->translation['msgPage'] . $page,\n                    $this->translation['msgVoteFrom'],\n                    $pages . $this->translation['msgPages']\n                );\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n            $counter = 0;\n            $displayedCounter = 0;\n\n            $lastFaqId = 0;\n            while (\n                ($row = $this->config->getDb()->fetchObject($result)) &&\n                $displayedCounter < $this->config->get('records.numberOfRecordsPerPage')\n            ) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if ($lastFaqId == $row->id) {\n                    continue; // Don't show multiple FAQs\n                }\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = sprintf(\n                    '<li>%s<br><small>(%s)</small></li>',\n                    $oLink->toHtmlAnchor(),\n                    $this->plurals->GetMsg('plmsgViews', $visits)\n                );\n\n                $output .= $listItem;\n\n                $lastFaqId = $row->id;\n            }\n            $output .= '</ul><span id=\"totFaqRecords\" style=\"display: none;\">' . $num . '</span>';\n        } else {\n            return false;\n        }\n\n        if ($num > $this->config->get('records.numberOfRecordsPerPage')) {\n            $output .= '<p class=\"text-center\"><strong>';\n            if (!isset($page)) {\n                $page = 1;\n            }\n            $vor = $page - 1;\n            $next = $page + 1;\n            if ($vor != 0) {\n                $url = $sids . '&amp;action=search&amp;tagging_id=' . $taggingId . '&amp;seite=' . $vor;\n                $oLink = new Link($this->config->getDefaultUrl() . '?' . $url, $this->config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->translation['msgPrevious'];\n                $oLink->tooltip = $this->translation['msgPrevious'];\n                $output .= '[ ' . $oLink->toHtmlAnchor() . ' ]';\n            }\n            $output .= ' ';\n            if ($next <= $pages) {\n                $url = $sids . '&amp;action=search&amp;tagging_id=' . $taggingId . '&amp;seite=' . $next;\n                $oLink = new Link($this->config->getDefaultUrl() . '?' . $url, $this->config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->translation['msgNext'];\n                $oLink->tooltip = $this->translation['msgNext'];\n                $output .= '[ ' . $oLink->toHtmlAnchor() . ' ]';\n            }\n            $output .= '</strong></p>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int      $faqId FAQ ID\n     * @param int|null $faqRevisionId Revision ID\n     * @param bool     $isAdmin Must be true if it is called by an admin/author context\n     */\n    public function getRecord(int $faqId, int $faqRevisionId = null, bool $isAdmin = false)\n    {\n        global $PMF_LANG;\n\n        $currentLanguage = $this->config->getLanguage()->getLanguage();\n        $defaultLanguage = $this->config->getDefaultLanguage();\n\n        $result = $this->getRecordResult($faqId, $currentLanguage, $faqRevisionId, $isAdmin);\n\n        if (0 === $this->config->getDb()->numRows($result)) {\n            $result = $this->getRecordResult($faqId, $defaultLanguage, $faqRevisionId, $isAdmin);\n        }\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $answer = $row->content;\n            $active = ('yes' === $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$isAdmin) {\n                if (!$active) {\n                    $answer = $this->translation['err_inactiveArticle'];\n                }\n                if ($expired) {\n                    $answer = $this->translation['err_expiredArticle'];\n                }\n            }\n\n            $this->faqRecord = [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $answer,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes,\n                'created' => $row->created,\n            ];\n        } else {\n            $this->faqRecord = [\n                'id' => $faqId,\n                'lang' => $currentLanguage,\n                'solution_id' => 42,\n                'revision_id' => $faqRevisionId,\n                'active' => 'no',\n                'sticky' => 0,\n                'keywords' => '',\n                'title' => '',\n                'content' => $PMF_LANG['msgAccessDenied'],\n                'author' => '',\n                'email' => '',\n                'comment' => '',\n                'date' => Date::createIsoDate(date('YmdHis')),\n                'dateStart' => '',\n                'dateEnd' => '',\n                'linkState' => '',\n                'linkCheckDate' => '',\n                'notes' => '',\n                'created' => date('c'),\n            ];\n        }\n    }\n\n    /**\n     * Executes a query to retrieve a single FAQ.\n     *\n     * @param int    $faqId\n     * @param string $faqLanguage\n     * @param null   $faqRevisionId\n     * @param bool   $isAdmin\n     * @return mixed\n     */\n    public function getRecordResult($faqId, $faqLanguage, $faqRevisionId = null, $isAdmin = false)\n    {\n        $query = sprintf(\n            \"SELECT\n                 id, lang, solution_id, revision_id, active, sticky, keywords,\n                 thema, content, author, email, comment, updated, links_state,\n                 links_check_date, date_start, date_end, created, notes\n            FROM\n                %s%s fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id = %d\n            %s\n            AND\n                fd.lang = '%s'\n                %s\",\n            Database::getTablePrefix(),\n            isset($faqRevisionId) ? 'faqdata_revisions' : 'faqdata',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $faqId,\n            isset($faqRevisionId) ? 'AND revision_id = ' . $faqRevisionId : '',\n            $faqLanguage,\n            ($isAdmin) ? 'AND 1=1' : $this->queryPermission($this->groupSupport)\n        );\n\n        return $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Return records from given IDs\n     *\n     * @param  array $faqIds\n     * @return array\n     * @throws Exception\n     */\n    public function getRecordsByIds(array $faqIds): array\n    {\n        $faqRecords = [];\n\n        $query = sprintf(\n            \"SELECT\n                 fd.id AS id,\n                 fd.lang AS lang,\n                 fd.thema AS question,\n                 fd.content AS answer,\n                 fd.updated AS updated,\n                 fd.created AS created,\n                 fcr.category_id AS category_id,\n                 fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            implode(',', $faqIds),\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        $faqHelper = new FaqHelper($this->config);\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            if (empty($row->visits)) {\n                $visits = 0;\n            } else {\n                $visits = $row->visits;\n            }\n\n            $url = sprintf(\n                '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                $this->config->getDefaultUrl(),\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->question;\n\n            $faqRecords[] = [\n                'record_id' => (int)$row->id,\n                'record_lang' => $row->lang,\n                'category_id' => (int)$row->category_id,\n                'record_title' => $row->question,\n                'record_preview' => $faqHelper->renderAnswerPreview($row->answer, 25),\n                'record_link' => $oLink->toString(),\n                'record_updated' => Date::createIsoDate($row->updated) . ':00',\n                'visits' => (int)$visits,\n                'record_created' => $row->created\n            ];\n        }\n\n        return $faqRecords;\n    }\n\n    /**\n     * Adds a new record.\n     *\n     * @param array $data      Array of FAQ data\n     * @param bool  $newRecord Do not create a new ID if false\n     * @deprecated will be removed in v3.2\n     *\n     * @return int\n     */\n    public function addRecord(array $data, bool $newRecord = true): int\n    {\n        if ($newRecord) {\n            $recordId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqdata', 'id');\n        } else {\n            $recordId = $data['id'];\n        }\n\n        // Add new entry\n        $query = sprintf(\n            \"INSERT INTO %sfaqdata VALUES\n            (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getDb()->escape($data['lang']),\n            $this->getNextSolutionId(),\n            0,\n            $data['active'],\n            $data['sticky'],\n            $this->config->getDb()->escape($data['keywords']),\n            $this->config->getDb()->escape($data['thema']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            date('Y-m-d H:i:s'),\n            $data['notes']\n        );\n\n        $this->config->getDb()->query($query);\n\n        return $recordId;\n    }\n\n    /**\n     * Creates a new FAQ.\n     *\n     * @param FaqEntity $faq\n     * @return int\n     */\n    public function create(FaqEntity $faq): int\n    {\n        if (is_null($faq->getId())) {\n            $faq->setId($this->config->getDb()->nextId(Database::getTablePrefix() . 'faqdata', 'id'));\n        }\n\n        $query = sprintf(\n            \"INSERT INTO %sfaqdata VALUES\n            (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $faq->getId(),\n            $this->config->getDb()->escape($faq->getLanguage()),\n            $this->getNextSolutionId(),\n            0,\n            $faq->isActive() ? 'yes' : 'no',\n            $faq->isSticky() ? 1 : 0,\n            $this->config->getDb()->escape($faq->getKeywords()),\n            $this->config->getDb()->escape($faq->getQuestion()),\n            $this->config->getDb()->escape($faq->getAnswer()),\n            $this->config->getDb()->escape($faq->getAuthor()),\n            $faq->getEmail(),\n            $faq->isComment() ? 'y' : 'n',\n            $faq->getUpdatedDate()->format('YmdHis'),\n            $faq->getLinkState(),\n            $faq->getLinksCheckedDate()->format(DATE_ISO8601),\n            '00000000000000',\n            '99991231235959',\n            date('Y-m-d H:i:s'),\n            $faq->getNotes()\n        );\n\n        $this->config->getDb()->query($query);\n\n        return $faq->getId();\n    }\n\n    /**\n     * Gets the latest solution id for a FAQ record.\n     *\n     * @return int\n     */\n    public function getNextSolutionId(): int\n    {\n        $latestId = 0;\n\n        $query = sprintf('SELECT MAX(solution_id) AS solution_id FROM %sfaqdata', Database::getTablePrefix());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result && $row = $this->config->getDb()->fetchObject($result)) {\n            $latestId = $row->solution_id;\n        }\n\n        if ($latestId < PMF_SOLUTION_ID_START_VALUE) {\n            $nextSolutionId = PMF_SOLUTION_ID_START_VALUE;\n        } else {\n            $nextSolutionId = $latestId + PMF_SOLUTION_ID_INCREMENT_VALUE;\n        }\n\n        return $nextSolutionId;\n    }\n\n    /**\n     * Updates a record.\n     *\n     * @param array $data Array of FAQ data\n     *\n     * @return bool\n     */\n    public function updateRecord(array $data)\n    {\n        // Update entry\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqdata\n            SET\n                revision_id = %d,\n                active = '%s',\n                sticky = %d,\n                keywords = '%s',\n                thema = '%s',\n                content = '%s',\n                author = '%s',\n                email = '%s',\n                comment = '%s',\n                updated = '%s',\n                links_state = '%s',\n                links_check_date = %d,\n                date_start = '%s',\n                date_end = '%s',\n                notes = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $data['revision_id'],\n            $data['active'],\n            $data['sticky'],\n            $this->config->getDb()->escape($data['keywords']),\n            $this->config->getDb()->escape($data['thema']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['notes'],\n            $data['id'],\n            $data['lang']\n        );\n\n        $this->config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Deletes a record and all the dependencies.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     * @return bool\n     * @throws Attachment\\AttachmentException\n     * @throws Attachment\\Filesystem\\File\\FileException\n     */\n    public function deleteRecord(int $recordId, string $recordLang): bool\n    {\n        $solutionId = $this->getSolutionIdFromId($recordId, $recordLang);\n\n        $queries = array(\n            sprintf(\n                \"DELETE FROM %sfaqchanges WHERE beitrag = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqcategoryrelations WHERE record_id = %d AND record_lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata_revisions WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqvisits WHERE id = %d AND lang = '%s'\",\n                Database::getTablePrefix(),\n                $recordId,\n                $this->config->getDb()->escape($recordLang)\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_user WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_group WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE %sfaqdata_tags.record_id NOT IN (SELECT %sfaqdata.id FROM %sfaqdata)',\n                Database::getTablePrefix(),\n                Database::getTablePrefix(),\n                Database::getTablePrefix(),\n                Database::getTablePrefix()\n            ),\n            sprintf(\n                'DELETE FROM %sfaqcomments WHERE id = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqvoting WHERE artikel = %d',\n                Database::getTablePrefix(),\n                $recordId\n            ),\n        );\n\n        foreach ($queries as $query) {\n            $this->config->getDb()->query($query);\n        }\n\n        // Delete possible attachments\n        $attachments = AttachmentFactory::fetchByRecordId($this->config, $recordId);\n        foreach ($attachments as $attachment) {\n            $currentAttachment = AttachmentFactory::create($attachment->getId());\n            $currentAttachment->delete();\n        }\n\n        // Delete possible Elasticsearch documents\n        if ($this->config->get('search.enableElasticsearch')) {\n            $esInstance = new Elasticsearch($this->config);\n            $esInstance->delete($solutionId);\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the solution ID from a given ID and language\n     *\n     * @param int    $faqId\n     * @param string $faqLang\n     *\n     * @return int\n     */\n    public function getSolutionIdFromId(int $faqId, string $faqLang): int\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                solution_id\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n                AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $faqId,\n            $this->config->getDb()->escape($faqLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return $row->solution_id;\n        }\n\n        return $this->getNextSolutionId();\n    }\n\n    /**\n     * Checks if a record is already translated.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     * @return bool\n     */\n    public function hasTranslation(int $recordId, string $recordLang): bool\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                id, lang\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getDb()->escape($recordLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks, if comments are disabled for the FAQ record.\n     *\n     * @param int    $recordId    Id of FAQ or news entry\n     * @param string $recordLang  Language\n     * @param string $commentType Type of comment: faq or news\n     * @return bool true, if comments are disabled\n     */\n    public function commentDisabled(int $recordId, string $recordLang, string $commentType = 'faq'): bool\n    {\n        if ('news' == $commentType) {\n            $table = 'faqnews';\n        } else {\n            $table = 'faqdata';\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                comment\n            FROM\n                %s%s\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $table,\n            $recordId,\n            $this->config->getDb()->escape($recordLang)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return !(($row->comment === 'y'));\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int $solutionId Solution ID\n     */\n    public function getRecordBySolutionId(int $solutionId): void\n    {\n        $query = sprintf(\n            'SELECT\n                *\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.solution_id = %d\n                %s',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $solutionId,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->translation['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->translation['err_expiredArticle'];\n            }\n\n            $this->faqRecord = array(\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes\n            );\n        }\n    }\n\n    /**\n     * Gets the record ID from a given solution ID.\n     *\n     * @param int $solutionId Solution ID\n     *\n     * @return array\n     */\n    public function getIdFromSolutionId($solutionId)\n    {\n        $query = sprintf(\n            '\n            SELECT\n                fd.id,\n                fd.lang,\n                fd.thema AS question,\n                fd.content,\n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            WHERE\n                fd.solution_id = %d',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $solutionId\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            return [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'question' => $row->question,\n                'content' => $row->content,\n                'category_id' => $row->category_id\n            ];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns an array with all data from all FAQ records.\n     *\n     * @param int    $sortType  Sorting type\n     * @param array  $condition Condition\n     * @param string $sortOrder Sorting order\n     */\n    public function getAllRecords($sortType = FAQ_SORTING_TYPE_CATID_FAQID, array $condition = null, $sortOrder = 'ASC')\n    {\n        $where = '';\n        if (!is_null($condition)) {\n            $num = count($condition);\n            $where = 'WHERE ';\n            foreach ($condition as $field => $data) {\n                --$num;\n                $where .= $field;\n                if (is_array($data)) {\n                    $where .= ' IN (';\n                    $separator = '';\n                    foreach ($data as $value) {\n                        $where .= $separator . \"'\" . $this->config->getDb()->escape($value) . \"'\";\n                        $separator = ', ';\n                    }\n                    $where .= ')';\n                } else {\n                    $where .= \" = '\" . $this->config->getDb()->escape($data) . \"'\";\n                }\n                if ($num > 0) {\n                    $where .= ' AND ';\n                }\n            }\n        }\n\n        switch ($sortType) {\n            case FAQ_SORTING_TYPE_CATID_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.id %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fd.id %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_FAQTITLE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.thema %s',\n                    $sortOrder\n                );\n                break;\n\n            case FAQ_SORTING_TYPE_DATE_FAQID:\n                $orderBy = sprintf(\n                    '\n            ORDER BY\n                fcr.category_id,\n                fd.updated %s',\n                    $sortOrder\n                );\n                break;\n\n            default:\n                $orderBy = '';\n                break;\n        }\n\n        // prevents multiple display of FAQ in case it is tagged under multiple groups.\n        $groupBy = ' group by fd.id, fcr.category_id,fd.solution_id,fd.revision_id,fd.active,fd.sticky,fd.keywords,' .\n            'fd.thema,fd.content,fd.author,fd.email,fd.comment,fd.updated,fd.links_state,fd.links_check_date,' .\n            'fd.date_start,fd.date_end,fd.sticky,fd.created,fd.notes,fd.lang ';\n        $query = sprintf(\n            '\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.links_state AS links_state,\n                fd.links_check_date AS links_check_date,\n                fd.date_start AS date_start,\n                fd.date_end AS date_end,\n                fd.sticky AS sticky,\n                fd.created AS created,\n                fd.notes AS notes\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            %s\n            %s\n            %s\n            %s',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $where,\n            $this->queryPermission($this->groupSupport),\n            $groupBy,\n            $orderBy\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchObject($result)) {\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->translation['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->translation['err_expiredArticle'];\n            }\n\n            $this->faqRecords[] = [\n                'id' => $row->id,\n                'category_id' => $row->category_id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $row->thema,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'updated' => Date::createIsoDate($row->updated, 'Y-m-d H:i:s'),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'created' => $row->created,\n                'notes' => $row->notes\n            ];\n        }\n    }\n\n    /**\n     * Returns the FAQ record title from the ID and language.\n     *\n     * @param int $id Record id\n     * @return string\n     */\n    public function getRecordTitle(int $id): string\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['title'];\n        }\n\n        $question = '';\n\n        $query = sprintf(\n            \"SELECT\n                thema AS question\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getLanguage()->getLanguage()\n        );\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $question = Strings::htmlspecialchars($row->question);\n            }\n        } else {\n            $question = $this->translation['no_cats'];\n        }\n\n        return $question;\n    }\n\n    /**\n     * Returns the keywords of a FAQ record from the ID and language.\n     *\n     * @param int $id record id\n     * @return string\n     */\n    public function getRecordKeywords(int $id): string\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['keywords'];\n        }\n\n        $query = sprintf(\n            \"SELECT\n                keywords\n            FROM\n                %sfaqdata\n            WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $row = $this->config->getDb()->fetchObject($result);\n\n            return Strings::htmlspecialchars($row->keywords, ENT_QUOTES, 'utf-8');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Returns a answer preview of the FAQ record.\n     *\n     * @param int $recordId  FAQ record ID\n     * @param int $wordCount Number of words, default: 12\n     * @return string\n     */\n    public function getRecordPreview(int $recordId, int $wordCount = 12): string\n    {\n        if (isset($this->faqRecord['id']) && ((int)$this->faqRecord['id'] === (int)$recordId)) {\n            $answerPreview = $this->faqRecord['content'];\n\n            return Utils::makeShorterText($answerPreview, $wordCount);\n        }\n\n        $query = sprintf(\n            \"\n            SELECT\n                content as answer\n            FROM\n                %sfaqdata\n            WHERE \n                id = %d \n            AND \n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $recordId,\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $row = $this->config->getDb()->fetchObject($result);\n            $answerPreview = strip_tags($row->answer);\n        } else {\n            $answerPreview = $this->config->get('main.metaDescription');\n        }\n\n        return Utils::makeShorterText($answerPreview, $wordCount);\n    }\n\n    /**\n     * Returns the number of activated and not expired records, optionally\n     * not limited to the current language.\n     *\n     * @param string|null $language Language\n     * @return int\n     */\n    public function getNumberOfRecords(string $language = null): int\n    {\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                id\n            FROM\n                %sfaqdata\n            WHERE\n                active = 'yes'\n            %s\n            AND\n                date_start <= '%s'\n            AND\n                date_end >= '%s'\",\n            Database::getTablePrefix(),\n            null === $language ? '' : \"AND lang = '\" . $this->config->getDb()->escape($language) . \"'\",\n            $now,\n            $now\n        );\n\n        $num = $this->config->getDb()->numRows($this->config->getDb()->query($query));\n\n        if ($num > 0) {\n            return $num;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * This function generates a list with the most voted or most visited records.\n     *\n     * @param string $type Type definition visits/voted\n     * @return array\n     */\n    public function getTopTen(string $type = 'visits'): array\n    {\n        if ('visits' === $type) {\n            $result = $this->getTopTenData(PMF_NUMBER_RECORDS_TOPTEN, 0, $this->config->getLanguage()->getLanguage());\n        } else {\n            $result = $this->getTopVotedData(PMF_NUMBER_RECORDS_TOPTEN, $this->config->getLanguage()->getLanguage());\n        }\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                if ('visits' == $type) {\n                    $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = Strings::htmlentities($row['url']);\n                    $output['visits'][] = $this->plurals->GetMsg('plmsgViews', $row['visits']);\n                } else {\n                    $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = Strings::htmlentities($row['url']);\n                    $output['voted'][] = sprintf(\n                        '%s %s 5 - %s',\n                        round($row['avg'], 2),\n                        $this->translation['msgVoteFrom'],\n                        $this->plurals->GetMsg('plmsgVotes', $row['user'])\n                    );\n                }\n            }\n        } else {\n            $output['error'] = $this->translation['err_noTopTen'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates the Top Ten data with the most viewed records.\n     *\n     * @param int  $count Number of records\n     * @param int  $categoryId Entity ID\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getTopTenData(\n        int $count = PMF_NUMBER_RECORDS_TOPTEN,\n        int $categoryId = 0,\n        string $language = null\n    ): array {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n            'SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS question,\n                fd.content AS answer,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                ' . Database::getTablePrefix() . 'faqvisits fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\'' . $categoryId . '\\'';\n        }\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fv.last_visit,fdg.group_id,fdu.user_id\n            ORDER BY\n                fv.visits DESC';\n\n        $result = $this->config->getDb()->query($query);\n        $topTen = [];\n        $data = [];\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['visits'] = (int)$row->visits;\n                $data['question'] = Filter::filterVar($row->question, FILTER_UNSAFE_RAW);\n                $data['answer'] = $row->answer;\n                $data['date'] = Date::createIsoDate($row->updated, DATE_ISO8601, true);\n                $data['last_visit'] = date('c', $row->last_visit);\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->question;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topTen[$row->id] = $data;\n\n                if (count($topTen) === $count) {\n                    break;\n                }\n            }\n\n            array_multisort($topTen, SORT_DESC);\n        }\n\n        return $topTen;\n    }\n\n    /**\n     * This function generates a data-set with the most voted FAQs.\n     *\n     * @param int    $count    Number of records\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getTopVotedData(int $count = PMF_NUMBER_RECORDS_TOPTEN, string $language = null): array\n    {\n        global $sids;\n\n        $topten = $data = [];\n\n        $now = date('YmdHis');\n        $query =\n            '            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                (fv.vote/fv.usr) AS avg,\n                fv.usr AS user\n            FROM\n                ' . Database::getTablePrefix() . 'faqvoting fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.artikel\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\'' . $categoryId . '\\'';\n        }\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n            ORDER BY\n                avg DESC';\n\n        $result = $this->config->getDb()->query($query);\n\n        $i = 1;\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result)) && $i <= $count) {\n            if ($oldId != $row->id) {\n                $data['avg'] = $row->avg;\n                $data['question'] = $row->thema;\n                $data['date'] = $row->updated;\n                $data['user'] = $row->user;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[] = $data;\n                ++$i;\n            }\n            $oldId = $row->id;\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates the list with the latest published records.\n     *\n     * @return array\n     * @throws Exception\n     */\n    public function getLatest(): array\n    {\n        $date = new Date($this->config);\n        $result = $this->getLatestData(PMF_NUMBER_RECORDS_LATEST, $this->config->getLanguage()->getLanguage());\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['url'][] = Strings::htmlentities($row['url']);\n                $output['title'][] = Strings::htmlentities(Utils::makeShorterText($row['question'], 8));\n                $output['preview'][] = Strings::htmlentities($row['question']);\n                $output['date'][] = $date->format($row['date']);\n            }\n        } else {\n            $output['error'] = $this->translation['err_noArticles'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates an array with a specified number of most recent\n     * published records.\n     *\n     * @param int    $count    Number of records\n     * @param string|null $language Language\n     * @return array\n     */\n    public function getLatestData(int $count = PMF_NUMBER_RECORDS_LATEST, string $language = null): array\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n            '            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.thema AS question,\n                fd.content AS content,\n                fd.updated AS updated,\n                fv.visits AS visits,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                ' . Database::getTablePrefix() . 'faqvisits fv,\n                ' . Database::getTablePrefix() . 'faqdata fd\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                ' . Database::getTablePrefix() . 'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\'' . $now . '\\'\n                AND fd.date_end   >= \\'' . $now . '\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($language) && Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\'' . $this->config->getDb()->escape($language) . '\\'';\n        }\n        $query .= '\n                ' . $this->queryPermission($this->groupSupport) . '\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fdg.group_id,fdu.user_id\n            ORDER BY\n                fd.updated DESC';\n\n        $result = $this->config->getDb()->query($query);\n        $latest = [];\n        $data = [];\n\n        if ($result) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, [-1, $this->user]) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, [-1, $this->user])) {\n                        continue;\n                    }\n                }\n\n                $data['date'] = Date::createIsoDate($row->updated, DATE_ISO8601, true);\n                $data['question'] = Filter::filterVar($row->question, FILTER_UNSAFE_RAW);\n                $data['answer'] = $row->content;\n                $data['visits'] = (int)$row->visits;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $title;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $latest[$row->id] = $data;\n\n                if (count($latest) === $count) {\n                    break;\n                }\n            }\n        }\n\n        return $latest;\n    }\n\n    /**\n     * Retrieve faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $nCatid\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     * @return array\n     */\n    public function get(\n        string $queryType = FAQ_QUERY_TYPE_DEFAULT,\n        int $nCatid = 0,\n        bool $bDownwards = true,\n        string $lang = '',\n        string $date = ''\n    ): array {\n        $faqs = [];\n\n        $result = $this->config->getDb()->query($this->getSQLQuery($queryType, $nCatid, $bDownwards, $lang, $date));\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            $i = 0;\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $faq = [];\n                $faq['id'] = $row->id;\n                $faq['solution_id'] = $row->solution_id;\n                $faq['revision_id'] = $row->revision_id;\n                $faq['lang'] = $row->lang;\n                $faq['category_id'] = $row->category_id;\n                $faq['active'] = $row->active;\n                $faq['sticky'] = $row->sticky;\n                $faq['keywords'] = $row->keywords;\n                $faq['topic'] = $row->thema;\n                $faq['content'] = $row->content;\n                $faq['author_name'] = $row->author;\n                $faq['author_email'] = $row->email;\n                $faq['comment_enable'] = $row->comment;\n                $faq['lastmodified'] = $row->updated;\n                $faq['hits'] = $row->visits;\n                $faq['hits_last'] = $row->last_visit;\n                $faq['notes'] = $row->notes;\n                $faqs[$i] = $faq;\n                ++$i;\n            }\n        }\n\n        return $faqs;\n    }\n\n    /**\n     * Build the SQL query for retrieving faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $categoryId\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     * @param int    $faqId\n     * @return string\n     */\n    private function getSQLQuery(\n        string $queryType,\n        int $categoryId,\n        bool $bDownwards,\n        string $lang,\n        string $date,\n        int $faqId = 0\n    ): string {\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.notes AS notes,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit\n            FROM\n                %sfaqdata fd,\n                %sfaqvisits fv,\n                %sfaqcategoryrelations fcr\n            WHERE\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            AND\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND \",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now\n        );\n        // faqvisits data selection\n        if (!empty($faqId)) {\n            // Select ONLY the faq with the provided $faqid\n            $query .= \"fd.id = '\" . $faqId . \"' AND \";\n        }\n        $query .= 'fd.id = fv.id\n            AND\n                fd.lang = fv.lang';\n        $needAndOp = true;\n        if ((!empty($categoryId)) && $categoryId > 0) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= ' (fcr.category_id = ' . $categoryId;\n            if ($bDownwards) {\n                $query .= $this->getCatidWhereSequence($categoryId, 'OR');\n            }\n            $query .= ')';\n            $needAndOp = true;\n        }\n        if ((!empty($date)) && Utils::isLikeOnPMFDate($date)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.updated LIKE '\" . $date . \"'\";\n            $needAndOp = true;\n        }\n        if ((!empty($lang)) && Utils::isLanguage($lang)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.lang = '\" . $this->config->getDb()->escape($lang) . \"'\";\n            $needAndOp = true;\n        }\n        switch ($queryType) {\n            case FAQ_QUERY_TYPE_APPROVAL:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_NO . \"'\";\n                break;\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_YES . \"'\";\n                break;\n            default:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\" . FAQ_SQL_ACTIVE_YES . \"'\";\n                break;\n        }\n        // Sort criteria\n        switch ($queryType) {\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n            default:\n                // Normal ordering\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n        }\n\n        return $query;\n    }\n\n    /**\n     * Build a logic sequence, for a WHERE statement, of those category IDs\n     * children of the provided category ID, if any.\n     *\n     * @param int    $nCatid\n     * @param string $logicOp\n     * @param $oCat\n     * @return string\n     */\n    private function getCatidWhereSequence(int $nCatid, string $logicOp = 'OR', $oCat = null): string\n    {\n        $sqlWhereFilter = '';\n\n        if (!isset($oCat)) {\n            $oCat = new Category($this->config);\n        }\n        $aChildren = array_values($oCat->getChildren($nCatid));\n\n        foreach ($aChildren as $catid) {\n            $sqlWhereFilter .= ' ' . $logicOp . ' fcr.category_id = ' . $catid;\n            $sqlWhereFilter .= $this->getCatidWhereSequence($catid, 'OR', $oCat);\n        }\n\n        return $sqlWhereFilter;\n    }\n\n    /**\n     * Returns all records of one category.\n     *\n     * @param int $categoryId\n     *\n     * @return string\n     */\n    public function getRecordsWithoutPagingByCategoryId(int $categoryId): string\n    {\n        global $sids;\n\n        $output = '';\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            GROUP BY\n                fd.id,fd.lang,fd.thema,fcr.category_id,fv.visits\n            ORDER BY\n                %s %s\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->config->get('records.orderby'),\n            $this->config->get('records.sortby')\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            $output = '<ul>';\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = '<li>' . $oLink->toHtmlAnchor() . '</li>';\n\n                $output .= $listItem;\n            }\n            $output .= '</ul>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Prints the open questions as a HTML table.\n     *\n     * @todo   needs to be moved to a QuestionHelper class\n     * @return string\n     * @throws Exception\n     */\n    public function renderOpenQuestions(): string\n    {\n        global $sids, $category;\n\n        $date = new Date($this->config);\n        $mail = new Mail($this->config);\n\n        $query = sprintf(\n            \"SELECT COUNT(id) AS num FROM %sfaqquestions WHERE lang = '%s' AND is_visible != 'Y'\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $row = $this->config->getDb()->fetchObject($result);\n        $numOfInvisibles = $row->num;\n\n        if ($numOfInvisibles > 0) {\n            $extraout = sprintf(\n                '<tr><td colspan=\"3\"><small>%s %s</small></td></tr>',\n                $this->translation['msgQuestionsWaiting'],\n                $numOfInvisibles\n            );\n        } else {\n            $extraout = '';\n        }\n\n        $query = sprintf(\n            \"SELECT * FROM %sfaqquestions WHERE lang = '%s' AND is_visible = 'Y' ORDER BY created ASC\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $output = '';\n\n        if ($result && $this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $output .= '<tr class=\"openquestions\">';\n                $output .= sprintf(\n                    '<td><small>%s</small><br><a href=\"mailto:%s\">%s</a></td>',\n                    $date->format(Date::createIsoDate($row->created)),\n                    $mail->safeEmail($row->email),\n                    Strings::htmlentities($row->username)\n                );\n                $output .= sprintf(\n                    '<td><strong>%s:</strong><br>%s</td>',\n                    isset($category->categoryName[$row->category_id]['name']) ?\n                        $category->categoryName[$row->category_id]['name'] :\n                        '',\n                    Strings::htmlentities($row->question)\n                );\n                if ($this->config->get('records.enableCloseQuestion') && $row->answer_id) {\n                    $output .= sprintf(\n                        '<td><a id=\"PMF_openQuestionAnswered\" href=\"?%saction=faq&amp;cat=%d&amp;id=%d\">%s</a></td>',\n                        $sids,\n                        $row->category_id,\n                        $row->answer_id,\n                        $this->translation['msg2answerFAQ']\n                    );\n                } else {\n                    $output .= sprintf(\n                        '<td class=\"text-right\">' .\n                        '<a class=\"btn btn-primary\" href=\"?%saction=add&amp;question=%d&amp;cat=%d\">%s</a></td>',\n                        $sids,\n                        $row->id,\n                        $row->category_id,\n                        $this->translation['msg2answer']\n                    );\n                }\n                $output .= '</tr>';\n            }\n        } else {\n            $output = sprintf(\n                '<tr><td colspan=\"3\">%s</td></tr>',\n                $this->translation['msgNoQuestionsAvailable']\n            );\n        }\n\n        return $output . $extraout;\n    }\n\n    /**\n     * Set or unset a faq item flag.\n     *\n     * @param int    $id   Record id\n     * @param string $lang language code which is valid with Language::isASupportedLanguage\n     * @param bool   $flag record is set to sticky or not\n     * @param string $type type of the flag to set, use the column name\n     * @return bool\n     */\n    public function updateRecordFlag(int $id, string $lang, bool $flag, string $type): bool\n    {\n        $retval = false;\n\n        switch ($type) {\n            case 'sticky':\n                $flag = ($flag === 'checked' ? 1 : 0);\n                break;\n\n            case 'active':\n                $flag = ($flag === 'checked' ? \"'yes'\" : \"'no'\");\n                break;\n\n            default:\n                // This is because we would run into unknown db column\n                $flag = null;\n                break;\n        }\n\n        if (null !== $flag) {\n            $update = sprintf(\n                \"\n                UPDATE \n                    %sfaqdata \n                SET \n                    %s = %s \n                WHERE \n                    id = %d \n                AND \n                    lang = '%s'\",\n                Database::getTablePrefix(),\n                $type,\n                $flag,\n                $id,\n                $this->config->getDb()->escape($lang)\n            );\n\n            $retval = (bool)$this->config->getDb()->query($update);\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Prepares and returns the sticky records for the frontend.\n     *\n     * @return array\n     */\n    public function getStickyRecords(): array\n    {\n        $result = $this->getStickyRecordsData();\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['title'][] = Utils::makeShorterText($row['question'], 8);\n                $output['preview'][] = $row['question'];\n                $output['url'][] = Strings::htmlentities($row['url']);\n            }\n        } else {\n            $output['error'] = sprintf('<li>%s</li>', $this->translation['err_noTopTen']);\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns the sticky records with URL and Title.\n     *\n     * @return array\n     */\n    public function getStickyRecordsData(): array\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqvisits fv,\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.date_start <= '%s'\n            AND \n                fd.date_end   >= '%s'\n            AND \n                fd.active = 'yes'\n            AND \n                fd.sticky = 1\n            AND\n                fd.id = fv.id\n            AND \n                fd.lang = fv.lang\n            %s\n            GROUP BY\n                fd.id, fd.lang, fd.thema, fcr.category_id, fv.visits\n            ORDER BY\n                fv.visits DESC\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage(),\n            $now,\n            $now,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $sticky = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['question'] = $row->thema;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $sticky[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $sticky;\n    }\n\n    /**\n     * Returns the inactive records with admin URL to edit the FAQ and title.\n     *\n     * @return array\n     */\n    public function getInactiveFaqsData(): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema\n            FROM\n                %sfaqdata fd\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.active = 'no'\n            GROUP BY\n                fd.id, fd.lang, fd.thema\n            ORDER BY\n                fd.id DESC\",\n            Database::getTablePrefix(),\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $inactive = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['question'] = $row->thema;\n                $data['url'] = sprintf(\n                    '%sadmin/?action=editentry&id=%d&lang=%s',\n                    $this->config->getDefaultUrl(),\n                    $row->id,\n                    $row->lang\n                );\n                $inactive[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $inactive;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Faq.php"], "buggy_code_start_loc": [2453], "buggy_code_end_loc": [2514], "fixing_code_start_loc": [2453], "fixing_code_end_loc": [2496], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository thorsten/phpmyfaq prior to 3.1.11.", "other": {"cve": {"id": "CVE-2023-0787", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-12T14:15:11.293", "lastModified": "2023-02-23T05:11:16.850", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository thorsten/phpmyfaq prior to 3.1.11."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.11", "matchCriteriaId": "0CADCF40-01A2-41DD-B454-4F5946570CA9"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/b76d58321a7a595eeaf4f7a30403ca6cd8506612", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/87397c71-7b84-4617-a66e-fa6c73be9024", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/b76d58321a7a595eeaf4f7a30403ca6cd8506612"}}