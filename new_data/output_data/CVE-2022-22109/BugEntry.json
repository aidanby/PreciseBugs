{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Document;\nuse App\\Services\\Storage\\GetStorageProvider;\nuse Gate;\nuse Carbon;\nuse Datatables;\nuse File;\nuse App\\Models\\Task;\nuse App\\Models\\Client;\nuse App\\Models\\User;\nuse App\\Models\\Setting;\nuse App\\Http\\Requests;\nuse App\\Models\\Status;\nuse App\\Models\\Integration;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\Task\\StoreTaskRequest;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Models\\Invoice;\nuse App\\Models\\InvoiceLine;\nuse App\\Models\\Project;\n\nclass TasksController extends Controller\n{\n    const CREATED = 'created';\n    const UPDATED_STATUS = 'updated_status';\n    const UPDATED_TIME = 'updated_time';\n    const UPDATED_ASSIGN = 'updated_assign';\n    const UPDATED_DEADLINE = 'updated_deadline';\n\n    protected $invoices;\n\n    public function __construct()\n    {\n        $this->middleware('filesystem.is.enabled', ['only' => ['upload']]);\n        $this->middleware('task.create', ['only' => ['create']]);\n        $this->middleware('task.update.status', ['only' => ['updateStatus']]);\n        $this->middleware('task.assigned', ['only' => ['updateAssign', 'updateTime']]);\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return Response\n     */\n    public function index()\n    {\n        return view('tasks.index')\n        ->withStatuses(Status::typeOfTask()->get());\n    }\n\n    public function anyData()\n    {\n        $tasks = Task::with(['user', 'status', 'client'])->select(\n            collect(['external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'status_id', 'client_id'])\n                ->map(function ($field) {\n                    return (new Task())->qualifyColumn($field);\n                })\n                ->all()\n        );\n\n        return Datatables::of($tasks)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"tasks.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('client', function ($projects) {\n                return $projects->client->company_name;\n            })\n            ->editColumn('created_at', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('user_assigned_id', function ($tasks) {\n                return $tasks->user->name;\n            })\n            ->editColumn('status_id', function ($tasks) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $tasks->status->color . '\"> ' .\n                    $tasks->status->title . '</span>';\n            })\n            ->addColumn('view', function ($tasks) {\n                return '<a href=\"' . route(\"tasks.show\", $tasks->external_id) . '\" class=\"btn btn-link\">' . __('View') .'</a>'\n                . '<a data-toggle=\"modal\" data-id=\"'. route('tasks.destroy',$tasks->external_id) . '\" data-title=\"'. $tasks->title . '\" data-target=\"#deletion\" class=\"btn btn-link\">' . __('Delete') .'</a>'\n                ;\n            })\n            ->rawColumns(['titlelink','view', 'status_id'])\n            ->make(true);\n    }\n\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return mixed\n     */\n    public function create($client_external_id = null, $project_external_id = null)\n    {\n        $projects = null;\n        $client =  Client::whereExternalId($client_external_id);\n        $project = Project::whereExternalId($project_external_id)->first();\n        if ($client) {\n            $projects = $client->projects()->whereHas('status', function ($q) {\n                return $q->where('title', '!=', 'Closed');\n            })->pluck('title', 'external_id');\n        }\n\n        return view('tasks.create')\n            ->withUsers(User::with(['department'])->get()->pluck('nameAndDepartmentEagerLoading', 'id'))\n            ->withClients(Client::pluck('company_name', 'external_id'))\n            ->withClient($client ?: null)\n            ->withProjects($projects ?: null)\n            ->withProject($project ?: null)\n            ->withStatuses(Status::typeOfTask()->pluck('title', 'id'))\n            ->with('filesystem_integration', Integration::whereApiType('file')->first());\n    }\n\n    /**\n     * @param StoreTaskRequest $request\n     * @return mixed\n     */\n    public function store(StoreTaskRequest $request) // uses __contrust request\n    {\n        $project = null;\n        if ($request->client_external_id) {\n            $client = Client::whereExternalId($request->client_external_id);\n        }\n\n        if ($request->project_external_id) {\n            $project = Project::whereExternalId($request->project_external_id)->first();\n        }\n        $input = array_merge(\n            $request->all(),\n            []\n        );\n\n        $task = Task::create(\n            [\n            'title' => $request->title,\n            'description' => clean($request->description),\n            'user_assigned_id' => $request->user_assigned_id,\n            'deadline' => Carbon::parse($request->deadline),\n            'status_id' => $request->status_id,\n            'user_created_id' => auth()->id(),\n            'external_id' => Uuid::uuid4()->toString(),\n            'client_id' => $client->id,\n            'project_id' => optional($project)->id\n        ]\n        );\n\n        $insertedExternalId = $task->external_id;\n\n        Session()->flash('flash_message', __('Task successfully added'));\n        event(new \\App\\Events\\TaskAction($task, self::CREATED));\n\n        if (!is_null($request->images)) {\n            foreach ($request->file('images') as $image) {\n                $this->upload($image, $task);\n            }\n        }\n        //Hack to make dropzone js work, as it only called with AJAX and not form submit\n        return response()->json(['task_external_id' => $task->external_id, 'project_external_id' => $project ? $project->external_id : null]);\n        return redirect()->route(\"tasks.show\", $insertedExternalId);\n    }\n\n    public function destroy(Task $task, Request $request)\n    {\n        $deleteInvoice = $request->delete_invoice ? true : false;\n\n        if($task->invoice && $deleteInvoice) {\n            $task->invoice()->delete();\n        } elseif ($task->invoice) {\n            $task->invoice->removeReference();\n        }\n        $task->delete();\n        \n        Session()->flash('flash_message', __('Task deleted'));\n        return redirect()->back();\n    }\n\n    private function upload($image, $task)\n    {\n        if (!auth()->user()->can('task-upload-files')) {\n            session()->flash('flash_message_warning', __('You do not have permission to upload images'));\n            return redirect()->route('tasks.show', $task->external_id);\n        }\n        $file = $image;\n        $filename = str_random(8) . '_' . $file->getClientOriginalName();\n        $fileOrginal = $file->getClientOriginalName();\n\n        $size = $file->getClientSize();\n        $mbsize = $size / 1048576;\n        $totaltsize = substr($mbsize, 0, 4);\n\n        if ($totaltsize > 15) {\n            Session::flash('flash_message', __('File Size cannot be bigger than 15MB'));\n            return redirect()->back();\n        }\n\n        $folder = $task->external_id;\n        $fileSystem = GetStorageProvider::getStorage();\n        $fileData = $fileSystem->upload($folder, $filename, $file);\n\n        Document::create([\n            'external_id' => Uuid::uuid4()->toString(),\n            'path' => $fileData['file_path'],\n            'size' => $totaltsize,\n            'original_filename' => $fileOrginal,\n            'source_id' => $task->id,\n            'source_type' => Task::class,\n            'mime' => $file->getClientMimeType(),\n            'integration_id' => isset($fileData['id']) ? $fileData['id'] : null,\n            'integration_type' => get_class($fileSystem)\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     * @param $external_id\n     * @return mixed\n     * @throws \\Exception\n     */\n    public function show(Request $request, $external_id)\n    {\n        $task = $this->findByExternalId($external_id);\n        if (!$task) {\n            abort(404);\n        }\n        return view('tasks.show')\n            ->withTasks($task)\n            ->withUsers(User::with(['department'])->get()->pluck('nameAndDepartmentEagerLoading', 'id'))\n            ->with('company_name', Setting::first()->company)\n            ->withStatuses(Status::typeOfTask()->pluck('title', 'id'))\n            ->withProjects($task->client->projects()->pluck('title', 'external_id'))\n            ->withFiles($task->documents)\n            ->with('filesystem_integration', Integration::whereApiType('file')->first());\n    }\n\n\n    /**\n     * @param $external_id\n     * @param Request $request\n     * @return\n     * @internal param $ [Auth]  $external_id Checks Logged in users id\n     * @internal param $ [Model] $task->user_assigned_id Checks the id of the user assigned to the task\n     * If Auth and user_id allow complete else redirect back if all allowed excute\n     * else stmt\n     */\n    public function updateStatus($external_id, Request $request)\n    {\n        if (!auth()->user()->can('task-update-status')) {\n            session()->flash('flash_message_warning', __('You do not have permission to change task status'));\n            return redirect()->route('tasks.show', $external_id);\n        }\n        $input = $request->all();\n\n        if ($request->ajax() && isset($input[\"statusExternalId\"])) {\n            $input[\"status_id\"] = Status::whereExternalId($input[\"statusExternalId\"])->first()->id;\n        }\n\n        $task = $this->findByExternalId($external_id);\n        $task->fill($input)->save();\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_STATUS));\n        Session()->flash('flash_message', __('Task status is updated'));\n\n        return redirect()->back();\n    }\n\n    public function updateProject($external_id, Request $request)\n    {\n        $task = $this->findByExternalId($external_id);\n        $project_id = null;\n\n        if ($request->project_external_id) {\n            $project_id = Project::whereExternalId($request->project_external_id)->first()->id;\n        }\n\n        $task->fill([\n            'project_id' => $project_id\n        ])->save();\n\n\n        //event(new \\App\\Events\\TaskAction($task, self::UPDATED_STATUS));\n        Session()->flash('flash_message', __('Task project is updated'));\n\n        return redirect()->back();\n    }\n\n    /**\n     * @param $external_id\n     * @param Request $request\n     * @return mixed\n     */\n    public function updateAssign($external_id, Request $request)\n    {\n        $task = Task::with('user')->whereExternalId($external_id)->first();\n\n        $user_assigned_id = $request->user_assigned_id;\n\n        $task->user_assigned_id = $user_assigned_id;\n        $task->save();\n        $task->refresh();\n\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_ASSIGN));\n        Session()->flash('flash_message', __('New user is assigned'));\n        return redirect()->back();\n    }\n\n    /**\n     * Update the follow up date (Deadline)\n     * @param Request $request\n     * @param $external_id\n     * @return mixed\n     */\n    public function updateDeadline(Request $request, $external_id)\n    {\n        if (!auth()->user()->can('task-update-deadline')) {\n            session()->flash('flash_message_warning', __('You do not have permission to change task deadline'));\n            return redirect()->route('tasks.show', $external_id);\n        }\n        $task = $this->findByExternalId($external_id);\n        $task->fill(['deadline' => Carbon::parse($request->deadline_date)])->save();\n\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_DEADLINE));\n        Session()->flash('flash_message', 'New deadline is set');\n        return redirect()->back();\n    }\n\n    /**\n     * @param $id\n     * @return mixed\n     */\n    public function findByExternalId($external_id)\n    {\n        return Task::whereExternalId($external_id)->firstOrFail();\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     * @return mixed\n     * @internal param int $id\n     */\n    public function marked()\n    {\n        Notifynder::readAll(\\Auth::id());\n        return redirect()->back();\n    }\n}\n"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Document;\nuse App\\Services\\Storage\\GetStorageProvider;\nuse Gate;\nuse Carbon;\nuse Datatables;\nuse File;\nuse App\\Models\\Task;\nuse App\\Models\\Client;\nuse App\\Models\\User;\nuse App\\Models\\Setting;\nuse App\\Http\\Requests;\nuse App\\Models\\Status;\nuse App\\Models\\Integration;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\Task\\StoreTaskRequest;\nuse Ramsey\\Uuid\\Uuid;\nuse App\\Models\\Invoice;\nuse App\\Models\\InvoiceLine;\nuse App\\Models\\Project;\n\nclass TasksController extends Controller\n{\n    const CREATED = 'created';\n    const UPDATED_STATUS = 'updated_status';\n    const UPDATED_TIME = 'updated_time';\n    const UPDATED_ASSIGN = 'updated_assign';\n    const UPDATED_DEADLINE = 'updated_deadline';\n\n    protected $invoices;\n\n    public function __construct()\n    {\n        $this->middleware('filesystem.is.enabled', ['only' => ['upload']]);\n        $this->middleware('task.create', ['only' => ['create']]);\n        $this->middleware('task.update.status', ['only' => ['updateStatus']]);\n        $this->middleware('task.assigned', ['only' => ['updateAssign', 'updateTime']]);\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return Response\n     */\n    public function index()\n    {\n        return view('tasks.index')\n        ->withStatuses(Status::typeOfTask()->get());\n    }\n\n    public function anyData()\n    {\n        $tasks = Task::with(['user', 'status', 'client'])->select(\n            collect(['external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'status_id', 'client_id'])\n                ->map(function ($field) {\n                    return (new Task())->qualifyColumn($field);\n                })\n                ->all()\n        );\n\n        return Datatables::of($tasks)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"tasks.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('client', function ($projects) {\n                return $projects->client->company_name;\n            })\n            ->editColumn('created_at', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('user_assigned_id', function ($tasks) {\n                return $tasks->user->name;\n            })\n            ->editColumn('status_id', function ($tasks) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $tasks->status->color . '\"> ' .\n                    $tasks->status->title . '</span>';\n            })\n            ->addColumn('view', function ($tasks) {\n                return '<a href=\"' . route(\"tasks.show\", $tasks->external_id) . '\" class=\"btn btn-link\">' . __('View') .'</a>'\n                . '<a data-toggle=\"modal\" data-id=\"'. route('tasks.destroy',$tasks->external_id) . '\" data-target=\"#deletion\" class=\"btn btn-link\">' . __('Delete') .'</a>'\n                ;\n            })\n            ->rawColumns(['titlelink','view', 'status_id'])\n            ->make(true);\n    }\n\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return mixed\n     */\n    public function create($client_external_id = null, $project_external_id = null)\n    {\n        $projects = null;\n        $client =  Client::whereExternalId($client_external_id);\n        $project = Project::whereExternalId($project_external_id)->first();\n        if ($client) {\n            $projects = $client->projects()->whereHas('status', function ($q) {\n                return $q->where('title', '!=', 'Closed');\n            })->pluck('title', 'external_id');\n        }\n\n        return view('tasks.create')\n            ->withUsers(User::with(['department'])->get()->pluck('nameAndDepartmentEagerLoading', 'id'))\n            ->withClients(Client::pluck('company_name', 'external_id'))\n            ->withClient($client ?: null)\n            ->withProjects($projects ?: null)\n            ->withProject($project ?: null)\n            ->withStatuses(Status::typeOfTask()->pluck('title', 'id'))\n            ->with('filesystem_integration', Integration::whereApiType('file')->first());\n    }\n\n    /**\n     * @param StoreTaskRequest $request\n     * @return mixed\n     */\n    public function store(StoreTaskRequest $request) // uses __contrust request\n    {\n        $project = null;\n        if ($request->client_external_id) {\n            $client = Client::whereExternalId($request->client_external_id);\n        }\n\n        if ($request->project_external_id) {\n            $project = Project::whereExternalId($request->project_external_id)->first();\n        }\n        $input = array_merge(\n            $request->all(),\n            []\n        );\n\n        $task = Task::create(\n            [\n            'title' => $request->title,\n            'description' => clean($request->description),\n            'user_assigned_id' => $request->user_assigned_id,\n            'deadline' => Carbon::parse($request->deadline),\n            'status_id' => $request->status_id,\n            'user_created_id' => auth()->id(),\n            'external_id' => Uuid::uuid4()->toString(),\n            'client_id' => $client->id,\n            'project_id' => optional($project)->id\n        ]\n        );\n\n        $insertedExternalId = $task->external_id;\n\n        Session()->flash('flash_message', __('Task successfully added'));\n        event(new \\App\\Events\\TaskAction($task, self::CREATED));\n\n        if (!is_null($request->images)) {\n            foreach ($request->file('images') as $image) {\n                $this->upload($image, $task);\n            }\n        }\n        //Hack to make dropzone js work, as it only called with AJAX and not form submit\n        return response()->json(['task_external_id' => $task->external_id, 'project_external_id' => $project ? $project->external_id : null]);\n        return redirect()->route(\"tasks.show\", $insertedExternalId);\n    }\n\n    public function destroy(Task $task, Request $request)\n    {\n        $deleteInvoice = $request->delete_invoice ? true : false;\n\n        if($task->invoice && $deleteInvoice) {\n            $task->invoice()->delete();\n        } elseif ($task->invoice) {\n            $task->invoice->removeReference();\n        }\n        $task->delete();\n        \n        Session()->flash('flash_message', __('Task deleted'));\n        return redirect()->back();\n    }\n\n    private function upload($image, $task)\n    {\n        if (!auth()->user()->can('task-upload-files')) {\n            session()->flash('flash_message_warning', __('You do not have permission to upload images'));\n            return redirect()->route('tasks.show', $task->external_id);\n        }\n        $file = $image;\n        $filename = str_random(8) . '_' . $file->getClientOriginalName();\n        $fileOrginal = $file->getClientOriginalName();\n\n        $size = $file->getClientSize();\n        $mbsize = $size / 1048576;\n        $totaltsize = substr($mbsize, 0, 4);\n\n        if ($totaltsize > 15) {\n            Session::flash('flash_message', __('File Size cannot be bigger than 15MB'));\n            return redirect()->back();\n        }\n\n        $folder = $task->external_id;\n        $fileSystem = GetStorageProvider::getStorage();\n        $fileData = $fileSystem->upload($folder, $filename, $file);\n\n        Document::create([\n            'external_id' => Uuid::uuid4()->toString(),\n            'path' => $fileData['file_path'],\n            'size' => $totaltsize,\n            'original_filename' => $fileOrginal,\n            'source_id' => $task->id,\n            'source_type' => Task::class,\n            'mime' => $file->getClientMimeType(),\n            'integration_id' => isset($fileData['id']) ? $fileData['id'] : null,\n            'integration_type' => get_class($fileSystem)\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     * @param $external_id\n     * @return mixed\n     * @throws \\Exception\n     */\n    public function show(Request $request, $external_id)\n    {\n        $task = $this->findByExternalId($external_id);\n        if (!$task) {\n            abort(404);\n        }\n        return view('tasks.show')\n            ->withTasks($task)\n            ->withUsers(User::with(['department'])->get()->pluck('nameAndDepartmentEagerLoading', 'id'))\n            ->with('company_name', Setting::first()->company)\n            ->withStatuses(Status::typeOfTask()->pluck('title', 'id'))\n            ->withProjects($task->client->projects()->pluck('title', 'external_id'))\n            ->withFiles($task->documents)\n            ->with('filesystem_integration', Integration::whereApiType('file')->first());\n    }\n\n\n    /**\n     * @param $external_id\n     * @param Request $request\n     * @return\n     * @internal param $ [Auth]  $external_id Checks Logged in users id\n     * @internal param $ [Model] $task->user_assigned_id Checks the id of the user assigned to the task\n     * If Auth and user_id allow complete else redirect back if all allowed excute\n     * else stmt\n     */\n    public function updateStatus($external_id, Request $request)\n    {\n        if (!auth()->user()->can('task-update-status')) {\n            session()->flash('flash_message_warning', __('You do not have permission to change task status'));\n            return redirect()->route('tasks.show', $external_id);\n        }\n        $input = $request->all();\n\n        if ($request->ajax() && isset($input[\"statusExternalId\"])) {\n            $input[\"status_id\"] = Status::whereExternalId($input[\"statusExternalId\"])->first()->id;\n        }\n\n        $task = $this->findByExternalId($external_id);\n        $task->fill($input)->save();\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_STATUS));\n        Session()->flash('flash_message', __('Task status is updated'));\n\n        return redirect()->back();\n    }\n\n    public function updateProject($external_id, Request $request)\n    {\n        $task = $this->findByExternalId($external_id);\n        $project_id = null;\n\n        if ($request->project_external_id) {\n            $project_id = Project::whereExternalId($request->project_external_id)->first()->id;\n        }\n\n        $task->fill([\n            'project_id' => $project_id\n        ])->save();\n\n\n        //event(new \\App\\Events\\TaskAction($task, self::UPDATED_STATUS));\n        Session()->flash('flash_message', __('Task project is updated'));\n\n        return redirect()->back();\n    }\n\n    /**\n     * @param $external_id\n     * @param Request $request\n     * @return mixed\n     */\n    public function updateAssign($external_id, Request $request)\n    {\n        $task = Task::with('user')->whereExternalId($external_id)->first();\n\n        $user_assigned_id = $request->user_assigned_id;\n\n        $task->user_assigned_id = $user_assigned_id;\n        $task->save();\n        $task->refresh();\n\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_ASSIGN));\n        Session()->flash('flash_message', __('New user is assigned'));\n        return redirect()->back();\n    }\n\n    /**\n     * Update the follow up date (Deadline)\n     * @param Request $request\n     * @param $external_id\n     * @return mixed\n     */\n    public function updateDeadline(Request $request, $external_id)\n    {\n        if (!auth()->user()->can('task-update-deadline')) {\n            session()->flash('flash_message_warning', __('You do not have permission to change task deadline'));\n            return redirect()->route('tasks.show', $external_id);\n        }\n        $task = $this->findByExternalId($external_id);\n        $task->fill(['deadline' => Carbon::parse($request->deadline_date)])->save();\n\n        event(new \\App\\Events\\TaskAction($task, self::UPDATED_DEADLINE));\n        Session()->flash('flash_message', 'New deadline is set');\n        return redirect()->back();\n    }\n\n    /**\n     * @param $id\n     * @return mixed\n     */\n    public function findByExternalId($external_id)\n    {\n        return Task::whereExternalId($external_id)->firstOrFail();\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     * @return mixed\n     * @internal param int $id\n     */\n    public function marked()\n    {\n        Notifynder::readAll(\\Auth::id());\n        return redirect()->back();\n    }\n}\n"], "filenames": ["app/Http/Controllers/TasksController.php"], "buggy_code_start_loc": [85], "buggy_code_end_loc": [86], "fixing_code_start_loc": [85], "fixing_code_end_loc": [86], "type": "CWE-79", "message": "In Daybyday CRM, version 2.2.0 is vulnerable to Stored Cross-Site Scripting (XSS) vulnerability that allows low privileged application users to store malicious scripts in the title field of new tasks. These scripts are executed in a victim\u2019s browser when they open the \u201c/tasks\u201d page to view all the tasks.", "other": {"cve": {"id": "CVE-2022-22109", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-01-05T15:15:07.857", "lastModified": "2022-01-08T02:50:02.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Daybyday CRM, version 2.2.0 is vulnerable to Stored Cross-Site Scripting (XSS) vulnerability that allows low privileged application users to store malicious scripts in the title field of new tasks. These scripts are executed in a victim\u2019s browser when they open the \u201c/tasks\u201d page to view all the tasks."}, {"lang": "es", "value": "En Daybyday CRM, versi\u00f3n 2.2.0 es susceptible a una vulnerabilidad de tipo Cross-Site Scripting (XSS) Almacenado que permite a usuarios con pocos privilegios de la aplicaci\u00f3n almacenar scripts maliciosos en el campo title de las nuevas tareas. Estos scripts son ejecutados en el navegador de la v\u00edctima cuando \u00e9sta abre la p\u00e1gina \"/tasks\" para visualizar todas las tareas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:daybydaycrm:daybyday_crm:2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "B1A83CDA-4210-4151-BAAC-F16FA2DAAB4C"}]}]}], "references": [{"url": "https://github.com/Bottelet/DaybydayCRM/commit/002dc75f400cf307bd00b71a5a93f1e26e52cee2", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2022-22109", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Bottelet/DaybydayCRM/commit/002dc75f400cf307bd00b71a5a93f1e26e52cee2"}}