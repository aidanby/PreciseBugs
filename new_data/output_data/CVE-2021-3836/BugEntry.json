{"buggy_code": ["/*\n * DBeaver - Universal Database Manager\n * Copyright (C) 2010-2021 DBeaver Corp and others\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.jkiss.utils.xml;\n\nimport org.jkiss.code.NotNull;\nimport org.jkiss.code.Nullable;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Common XML utils\n */\npublic class XMLUtils {\n\n    public static Document parseDocument(String fileName)\n        throws XMLException {\n        return parseDocument(new java.io.File(fileName));\n    }\n\n    public static Document parseDocument(java.io.File file) throws XMLException {\n        try (InputStream is = new FileInputStream(file)) {\n            return parseDocument(new InputSource(is));\n        } catch (IOException e) {\n            throw new XMLException(\"Error opening file '\" + file + \"'\", e);\n        }\n    }\n\n    public static Document parseDocument(java.io.InputStream is) throws XMLException {\n        return parseDocument(new InputSource(is));\n    }\n\n    public static Document parseDocument(java.io.Reader is) throws XMLException {\n        return parseDocument(new InputSource(is));\n    }\n\n    public static Document parseDocument(InputSource source) throws XMLException {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder xmlBuilder = dbf.newDocumentBuilder();\n            return xmlBuilder.parse(source);\n        } catch (Exception er) {\n            throw new XMLException(\"Error parsing XML document\", er);\n        }\n    }\n\n    public static Document createDocument()\n        throws XMLException {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder xmlBuilder = dbf.newDocumentBuilder();\n            return xmlBuilder.newDocument();\n        } catch (Exception er) {\n            throw new XMLException(\"Error creating XML document\", er);\n        }\n    }\n\n    public static Element getChildElement(Element element,\n                                          String childName) {\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                ((Element) node).getTagName().equals(childName)) {\n                return (Element) node;\n            }\n        }\n        return null;\n    }\n\n    @Nullable\n    public static String getChildElementBody(Element element,\n                                             String childName) {\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                ((Element) node).getTagName().equals(childName)) {\n                return getElementBody((Element) node);\n            }\n        }\n        return null;\n    }\n\n    @Nullable\n    public static String getElementBody(Element element) {\n        return element.getTextContent();\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static List<Element> getChildElementList(\n        Element parent,\n        String nodeName) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                nodeName.equals(node.getNodeName())) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static Collection<Element> getChildElementListNS(\n        Element parent,\n        String nsURI) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                node.getNamespaceURI().equals(nsURI)) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    public static Collection<Element> getChildElementListNS(\n        Element parent,\n        String nodeName,\n        String nsURI) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                node.getLocalName().equals(nodeName) &&\n                node.getNamespaceURI().equals(nsURI)) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static Collection<Element> getChildElementList(\n        Element parent,\n        String[] nodeNameList) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                for (int i = 0; i < nodeNameList.length; i++) {\n                    if (node.getNodeName().equals(nodeNameList[i])) {\n                        list.add((Element) node);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    // Find one child element with specified name\n    @Nullable\n    public static Element findChildElement(\n        Element parent) {\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                return (Element) node;\n            }\n        }\n        return null;\n    }\n\n    public static Object escapeXml(Object obj) {\n        if (obj == null) {\n            return null;\n        } else if (obj instanceof CharSequence) {\n            return escapeXml((CharSequence) obj);\n        } else {\n            return obj;\n        }\n    }\n\n    public static String escapeXml(CharSequence str) {\n        if (str == null) {\n            return null;\n        }\n        StringBuilder res = null;\n        int strLength = str.length();\n        for (int i = 0; i < strLength; i++) {\n            char c = str.charAt(i);\n            String repl = encodeXMLChar(c);\n            if (repl == null) {\n                if (res != null) {\n                    res.append(c);\n                }\n            } else {\n                if (res == null) {\n                    res = new StringBuilder(str.length() + 5);\n                    for (int k = 0; k < i; k++) {\n                        res.append(str.charAt(k));\n                    }\n                }\n                res.append(repl);\n            }\n        }\n        return res == null ? str.toString() : res.toString();\n    }\n\n    public static boolean isValidXMLChar(char c) {\n        return (c >= 32 || c == '\\n' || c == '\\r' || c == '\\t');\n    }\n\n    /**\n     * Encodes a char to XML-valid form replacing &,',\",<,> with special XML encoding.\n     *\n     * @param ch char to convert\n     * @return XML-encoded text\n     */\n    public static String encodeXMLChar(char ch) {\n        switch (ch) {\n            case '&':\n                return \"&amp;\";\n            case '\\\"':\n                return \"&quot;\";\n            case '\\'':\n                return \"&#39;\";\n            case '<':\n                return \"&lt;\";\n            case '>':\n                return \"&gt;\";\n            default:\n                return null;\n        }\n    }\n\n    public static XMLException adaptSAXException(Exception toCatch) {\n        if (toCatch instanceof XMLException) {\n            return (XMLException) toCatch;\n        } else if (toCatch instanceof org.xml.sax.SAXException) {\n            String message = toCatch.getMessage();\n            Exception embedded = ((org.xml.sax.SAXException) toCatch).getException();\n            if (embedded != null && embedded.getMessage() != null && embedded.getMessage().equals(message)) {\n                // Just SAX wrapper - skip it\n                return adaptSAXException(embedded);\n            } else {\n                return new XMLException(\n                    message,\n                    embedded != null ? adaptSAXException(embedded) : null);\n            }\n        } else {\n            return new XMLException(toCatch.getMessage(), toCatch);\n        }\n    }\n\n    public static Collection<Element> getChildElementList(Element element) {\n        List<Element> children = new ArrayList<>();\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                children.add((Element) node);\n            }\n        }\n        return children;\n    }\n}\n"], "fixing_code": ["/*\n * DBeaver - Universal Database Manager\n * Copyright (C) 2010-2021 DBeaver Corp and others\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.jkiss.utils.xml;\n\nimport javax.xml.XMLConstants;\nimport org.jkiss.code.NotNull;\nimport org.jkiss.code.Nullable;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Common XML utils\n */\npublic class XMLUtils {\n\n    public static Document parseDocument(String fileName)\n        throws XMLException {\n        return parseDocument(new java.io.File(fileName));\n    }\n\n    public static Document parseDocument(java.io.File file) throws XMLException {\n        try (InputStream is = new FileInputStream(file)) {\n            return parseDocument(new InputSource(is));\n        } catch (IOException e) {\n            throw new XMLException(\"Error opening file '\" + file + \"'\", e);\n        }\n    }\n\n    public static Document parseDocument(java.io.InputStream is) throws XMLException {\n        return parseDocument(new InputSource(is));\n    }\n\n    public static Document parseDocument(java.io.Reader is) throws XMLException {\n        return parseDocument(new InputSource(is));\n    }\n\n    public static Document parseDocument(InputSource source) throws XMLException {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder xmlBuilder = dbf.newDocumentBuilder();\n            dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n            return xmlBuilder.parse(source);\n        } catch (Exception er) {\n            throw new XMLException(\"Error parsing XML document\", er);\n        }\n    }\n\n    public static Document createDocument()\n        throws XMLException {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder xmlBuilder = dbf.newDocumentBuilder();\n            return xmlBuilder.newDocument();\n        } catch (Exception er) {\n            throw new XMLException(\"Error creating XML document\", er);\n        }\n    }\n\n    public static Element getChildElement(Element element,\n                                          String childName) {\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                ((Element) node).getTagName().equals(childName)) {\n                return (Element) node;\n            }\n        }\n        return null;\n    }\n\n    @Nullable\n    public static String getChildElementBody(Element element,\n                                             String childName) {\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                ((Element) node).getTagName().equals(childName)) {\n                return getElementBody((Element) node);\n            }\n        }\n        return null;\n    }\n\n    @Nullable\n    public static String getElementBody(Element element) {\n        return element.getTextContent();\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static List<Element> getChildElementList(\n        Element parent,\n        String nodeName) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                nodeName.equals(node.getNodeName())) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static Collection<Element> getChildElementListNS(\n        Element parent,\n        String nsURI) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                node.getNamespaceURI().equals(nsURI)) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    public static Collection<Element> getChildElementListNS(\n        Element parent,\n        String nodeName,\n        String nsURI) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE &&\n                node.getLocalName().equals(nodeName) &&\n                node.getNamespaceURI().equals(nsURI)) {\n                list.add((Element) node);\n            }\n        }\n        return list;\n    }\n\n    // Get list of all child elements of specified node\n    @NotNull\n    public static Collection<Element> getChildElementList(\n        Element parent,\n        String[] nodeNameList) {\n        List<Element> list = new ArrayList<>();\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                for (int i = 0; i < nodeNameList.length; i++) {\n                    if (node.getNodeName().equals(nodeNameList[i])) {\n                        list.add((Element) node);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    // Find one child element with specified name\n    @Nullable\n    public static Element findChildElement(\n        Element parent) {\n        for (org.w3c.dom.Node node = parent.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                return (Element) node;\n            }\n        }\n        return null;\n    }\n\n    public static Object escapeXml(Object obj) {\n        if (obj == null) {\n            return null;\n        } else if (obj instanceof CharSequence) {\n            return escapeXml((CharSequence) obj);\n        } else {\n            return obj;\n        }\n    }\n\n    public static String escapeXml(CharSequence str) {\n        if (str == null) {\n            return null;\n        }\n        StringBuilder res = null;\n        int strLength = str.length();\n        for (int i = 0; i < strLength; i++) {\n            char c = str.charAt(i);\n            String repl = encodeXMLChar(c);\n            if (repl == null) {\n                if (res != null) {\n                    res.append(c);\n                }\n            } else {\n                if (res == null) {\n                    res = new StringBuilder(str.length() + 5);\n                    for (int k = 0; k < i; k++) {\n                        res.append(str.charAt(k));\n                    }\n                }\n                res.append(repl);\n            }\n        }\n        return res == null ? str.toString() : res.toString();\n    }\n\n    public static boolean isValidXMLChar(char c) {\n        return (c >= 32 || c == '\\n' || c == '\\r' || c == '\\t');\n    }\n\n    /**\n     * Encodes a char to XML-valid form replacing &,',\",<,> with special XML encoding.\n     *\n     * @param ch char to convert\n     * @return XML-encoded text\n     */\n    public static String encodeXMLChar(char ch) {\n        switch (ch) {\n            case '&':\n                return \"&amp;\";\n            case '\\\"':\n                return \"&quot;\";\n            case '\\'':\n                return \"&#39;\";\n            case '<':\n                return \"&lt;\";\n            case '>':\n                return \"&gt;\";\n            default:\n                return null;\n        }\n    }\n\n    public static XMLException adaptSAXException(Exception toCatch) {\n        if (toCatch instanceof XMLException) {\n            return (XMLException) toCatch;\n        } else if (toCatch instanceof org.xml.sax.SAXException) {\n            String message = toCatch.getMessage();\n            Exception embedded = ((org.xml.sax.SAXException) toCatch).getException();\n            if (embedded != null && embedded.getMessage() != null && embedded.getMessage().equals(message)) {\n                // Just SAX wrapper - skip it\n                return adaptSAXException(embedded);\n            } else {\n                return new XMLException(\n                    message,\n                    embedded != null ? adaptSAXException(embedded) : null);\n            }\n        } else {\n            return new XMLException(toCatch.getMessage(), toCatch);\n        }\n    }\n\n    public static Collection<Element> getChildElementList(Element element) {\n        List<Element> children = new ArrayList<>();\n        for (org.w3c.dom.Node node = element.getFirstChild(); node != null; node = node.getNextSibling()) {\n            if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                children.add((Element) node);\n            }\n        }\n        return children;\n    }\n}\n"], "filenames": ["bundles/org.jkiss.utils/src/org/jkiss/utils/xml/XMLUtils.java"], "buggy_code_start_loc": [19], "buggy_code_end_loc": [64], "fixing_code_start_loc": [20], "fixing_code_end_loc": [67], "type": "CWE-611", "message": "dbeaver is vulnerable to Improper Restriction of XML External Entity Reference", "other": {"cve": {"id": "CVE-2021-3836", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-14T16:15:08.963", "lastModified": "2021-12-15T22:19:33.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "dbeaver is vulnerable to Improper Restriction of XML External Entity Reference"}, {"lang": "es", "value": "dbeaver es vulnerable a una Restricci\u00f3n Inapropiada de la Referencia a Entidades Externas XML"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dbeaver:dbeaver:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.2.3", "matchCriteriaId": "5F266C2F-A7E6-4FD2-B408-B349D212D5C3"}]}]}], "references": [{"url": "https://github.com/dbeaver/dbeaver/commit/4debf8f25184b7283681ed3fb5e9e887d9d4fe22", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a98264fb-1930-4c7c-b774-af24c0175fd4", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dbeaver/dbeaver/commit/4debf8f25184b7283681ed3fb5e9e887d9d4fe22"}}