{"buggy_code": ["<?php\n/**\n * oEmbed API: Top-level oEmbed functionality\n *\n * @package WordPress\n * @subpackage oEmbed\n * @since 4.4.0\n */\n\n/**\n * Registers an embed handler.\n *\n * Should probably only be used for sites that do not support oEmbed.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string   $id       An internal ID/name for the handler. Needs to be unique.\n * @param string   $regex    The regex that will be used to see if this handler should be used for a URL.\n * @param callable $callback The callback function that will be called if the regex is matched.\n * @param int      $priority Optional. Used to specify the order in which the registered handlers will\n *                           be tested. Default 10.\n */\nfunction wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {\n\tglobal $wp_embed;\n\t$wp_embed->register_handler( $id, $regex, $callback, $priority );\n}\n\n/**\n * Unregisters a previously-registered embed handler.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string $id       The handler ID that should be removed.\n * @param int    $priority Optional. The priority of the handler to be removed. Default 10.\n */\nfunction wp_embed_unregister_handler( $id, $priority = 10 ) {\n\tglobal $wp_embed;\n\t$wp_embed->unregister_handler( $id, $priority );\n}\n\n/**\n * Creates default array of embed parameters.\n *\n * The width defaults to the content width as specified by the theme. If the\n * theme does not specify a content width, then 500px is used.\n *\n * The default height is 1.5 times the width, or 1000px, whichever is smaller.\n *\n * The {@see 'embed_defaults'} filter can be used to adjust either of these values.\n *\n * @since 2.9.0\n *\n * @global int $content_width\n *\n * @param string $url Optional. The URL that should be embedded. Default empty.\n *\n * @return array Default embed parameters.\n */\nfunction wp_embed_defaults( $url = '' ) {\n\tif ( ! empty( $GLOBALS['content_width'] ) )\n\t\t$width = (int) $GLOBALS['content_width'];\n\n\tif ( empty( $width ) )\n\t\t$width = 500;\n\n\t$height = min( ceil( $width * 1.5 ), 1000 );\n\n\t/**\n\t * Filters the default array of embed dimensions.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array  $size An array of embed width and height values\n\t *                     in pixels (in that order).\n\t * @param string $url  The URL that should be embedded.\n\t */\n\treturn apply_filters( 'embed_defaults', compact( 'width', 'height' ), $url );\n}\n\n/**\n * Attempts to fetch the embed HTML for a provided URL using oEmbed.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string $url  The URL that should be embedded.\n * @param array  $args Optional. Additional arguments and parameters for retrieving embed HTML.\n *                     Default empty.\n * @return false|string False on failure or the embed HTML on success.\n */\nfunction wp_oembed_get( $url, $args = '' ) {\n\t$oembed = _wp_oembed_get_object();\n\treturn $oembed->get_html( $url, $args );\n}\n\n/**\n * Returns the initialized WP_oEmbed object.\n *\n * @since 2.9.0\n * @access private\n *\n * @staticvar WP_oEmbed $wp_oembed\n *\n * @return WP_oEmbed object.\n */\nfunction _wp_oembed_get_object() {\n\tstatic $wp_oembed = null;\n\n\tif ( is_null( $wp_oembed ) ) {\n\t\t$wp_oembed = new WP_oEmbed();\n\t}\n\treturn $wp_oembed;\n}\n\n/**\n * Adds a URL format and oEmbed provider URL pair.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string  $format   The format of URL that this provider can handle. You can use asterisks\n *                          as wildcards.\n * @param string  $provider The URL to the oEmbed provider.\n * @param boolean $regex    Optional. Whether the `$format` parameter is in a RegEx format. Default false.\n */\nfunction wp_oembed_add_provider( $format, $provider, $regex = false ) {\n\tif ( did_action( 'plugins_loaded' ) ) {\n\t\t$oembed = _wp_oembed_get_object();\n\t\t$oembed->providers[$format] = array( $provider, $regex );\n\t} else {\n\t\tWP_oEmbed::_add_provider_early( $format, $provider, $regex );\n\t}\n}\n\n/**\n * Removes an oEmbed provider.\n *\n * @since 3.5.0\n *\n * @see WP_oEmbed\n *\n * @param string $format The URL format for the oEmbed provider to remove.\n * @return bool Was the provider removed successfully?\n */\nfunction wp_oembed_remove_provider( $format ) {\n\tif ( did_action( 'plugins_loaded' ) ) {\n\t\t$oembed = _wp_oembed_get_object();\n\n\t\tif ( isset( $oembed->providers[ $format ] ) ) {\n\t\t\tunset( $oembed->providers[ $format ] );\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tWP_oEmbed::_remove_provider_early( $format );\n\t}\n\n\treturn false;\n}\n\n/**\n * Determines if default embed handlers should be loaded.\n *\n * Checks to make sure that the embeds library hasn't already been loaded. If\n * it hasn't, then it will load the embeds library.\n *\n * @since 2.9.0\n *\n * @see wp_embed_register_handler()\n */\nfunction wp_maybe_load_embeds() {\n\t/**\n\t * Filters whether to load the default embed handlers.\n\t *\n\t * Returning a falsey value will prevent loading the default embed handlers.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param bool $maybe_load_embeds Whether to load the embeds library. Default true.\n\t */\n\tif ( ! apply_filters( 'load_default_embeds', true ) ) {\n\t\treturn;\n\t}\n\n\twp_embed_register_handler( 'youtube_embed_url', '#https?://(www.)?youtube\\.com/(?:v|embed)/([^/]+)#i', 'wp_embed_handler_youtube' );\n\n\t/**\n\t * Filters the audio embed handler callback.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param callable $handler Audio embed handler callback function.\n\t */\n\twp_embed_register_handler( 'audio', '#^https?://.+?\\.(' . join( '|', wp_get_audio_extensions() ) . ')$#i', apply_filters( 'wp_audio_embed_handler', 'wp_embed_handler_audio' ), 9999 );\n\n\t/**\n\t * Filters the video embed handler callback.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param callable $handler Video embed handler callback function.\n\t */\n\twp_embed_register_handler( 'video', '#^https?://.+?\\.(' . join( '|', wp_get_video_extensions() ) . ')$#i', apply_filters( 'wp_video_embed_handler', 'wp_embed_handler_video' ), 9999 );\n}\n\n/**\n * YouTube iframe embed handler callback.\n *\n * Catches YouTube iframe embed URLs that are not parsable by oEmbed but can be translated into a URL that is.\n *\n * @since 4.0.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param array  $matches The RegEx matches from the provided regex when calling\n *                        wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_youtube( $matches, $attr, $url, $rawattr ) {\n\tglobal $wp_embed;\n\t$embed = $wp_embed->autoembed( \"https://youtube.com/watch?v={$matches[2]}\" );\n\n\t/**\n\t * Filters the YoutTube embed output.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @see wp_embed_handler_youtube()\n\t *\n\t * @param string $embed   YouTube embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_youtube', $embed, $attr, $url, $rawattr );\n}\n\n/**\n * Audio embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr Embed attributes.\n * @param string $url The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_audio( $matches, $attr, $url, $rawattr ) {\n\t$audio = sprintf( '[audio src=\"%s\" /]', esc_url( $url ) );\n\n\t/**\n\t * Filters the audio embed output.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $audio   Audio embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_audio', $audio, $attr, $url, $rawattr );\n}\n\n/**\n * Video embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_video( $matches, $attr, $url, $rawattr ) {\n\t$dimensions = '';\n\tif ( ! empty( $rawattr['width'] ) && ! empty( $rawattr['height'] ) ) {\n\t\t$dimensions .= sprintf( 'width=\"%d\" ', (int) $rawattr['width'] );\n\t\t$dimensions .= sprintf( 'height=\"%d\" ', (int) $rawattr['height'] );\n\t}\n\t$video = sprintf( '[video %s src=\"%s\" /]', $dimensions, esc_url( $url ) );\n\n\t/**\n\t * Filters the video embed output.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $video   Video embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_video', $video, $attr, $url, $rawattr );\n}\n\n/**\n * Registers the oEmbed REST API route.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_register_route() {\n\t$controller = new WP_oEmbed_Controller();\n\t$controller->register_routes();\n}\n\n/**\n * Adds oEmbed discovery links in the website <head>.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_add_discovery_links() {\n\t$output = '';\n\n\tif ( is_singular() ) {\n\t\t$output .= '<link rel=\"alternate\" type=\"application/json+oembed\" href=\"' . esc_url( get_oembed_endpoint_url( get_permalink() ) ) . '\" />' . \"\\n\";\n\n\t\tif ( class_exists( 'SimpleXMLElement' ) ) {\n\t\t\t$output .= '<link rel=\"alternate\" type=\"text/xml+oembed\" href=\"' . esc_url( get_oembed_endpoint_url( get_permalink(), 'xml' ) ) . '\" />' . \"\\n\";\n\t\t}\n\t}\n\n\t/**\n\t * Filters the oEmbed discovery links HTML.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $output HTML of the discovery links.\n\t */\n\techo apply_filters( 'oembed_discovery_links', $output );\n}\n\n/**\n * Adds the necessary JavaScript to communicate with the embedded iframes.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_add_host_js() {\n\twp_enqueue_script( 'wp-embed' );\n}\n\n/**\n * Retrieves the URL to embed a specific post in an iframe.\n *\n * @since 4.4.0\n *\n * @param int|WP_Post $post Optional. Post ID or object. Defaults to the current post.\n * @return string|false The post embed URL on success, false if the post doesn't exist.\n */\nfunction get_post_embed_url( $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$embed_url     = trailingslashit( get_permalink( $post ) ) . user_trailingslashit( 'embed' );\n\t$path_conflict = get_page_by_path( str_replace( home_url(), '', $embed_url ), OBJECT, get_post_types( array( 'public' => true ) ) );\n\n\tif ( ! get_option( 'permalink_structure' ) || $path_conflict ) {\n\t\t$embed_url = add_query_arg( array( 'embed' => 'true' ), get_permalink( $post ) );\n\t}\n\n\t/**\n\t * Filters the URL to embed a specific post.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $embed_url The post embed URL.\n\t * @param WP_Post $post      The corresponding post object.\n\t */\n\treturn esc_url_raw( apply_filters( 'post_embed_url', $embed_url, $post ) );\n}\n\n/**\n * Retrieves the oEmbed endpoint URL for a given permalink.\n *\n * Pass an empty string as the first argument to get the endpoint base URL.\n *\n * @since 4.4.0\n *\n * @param string $permalink Optional. The permalink used for the `url` query arg. Default empty.\n * @param string $format    Optional. The requested response format. Default 'json'.\n * @return string The oEmbed endpoint URL.\n */\nfunction get_oembed_endpoint_url( $permalink = '', $format = 'json' ) {\n\t$url = rest_url( 'oembed/1.0/embed' );\n\n\tif ( '' !== $permalink ) {\n\t\t$url = add_query_arg( array(\n\t\t\t'url'    => urlencode( $permalink ),\n\t\t\t'format' => ( 'json' !== $format ) ? $format : false,\n\t\t), $url );\n\t}\n\n\t/**\n\t * Filters the oEmbed endpoint URL.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $url       The URL to the oEmbed endpoint.\n\t * @param string $permalink The permalink used for the `url` query arg.\n\t * @param string $format    The requested response format.\n\t */\n\treturn apply_filters( 'oembed_endpoint_url', $url, $permalink, $format );\n}\n\n/**\n * Retrieves the embed code for a specific post.\n *\n * @since 4.4.0\n *\n * @param int         $width  The width for the response.\n * @param int         $height The height for the response.\n * @param int|WP_Post $post   Optional. Post ID or object. Default is global `$post`.\n * @return string|false Embed code on success, false if post doesn't exist.\n */\nfunction get_post_embed_html( $width, $height, $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$embed_url = get_post_embed_url( $post );\n\n\t$output = '<blockquote class=\"wp-embedded-content\"><a href=\"' . esc_url( get_permalink( $post ) ) . '\">' . get_the_title( $post ) . \"</a></blockquote>\\n\";\n\n\t$output .= \"<script type='text/javascript'>\\n\";\n\t$output .= \"<!--//--><![CDATA[//><!--\\n\";\n\tif ( SCRIPT_DEBUG ) {\n\t\t$output .= file_get_contents( ABSPATH . WPINC . '/js/wp-embed.js' );\n\t} else {\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t * include a minified version of wp-embed.js, instead of using the\n\t\t * file_get_contents() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-embed.js directly.\n\t\t */\n\t\t$output .=<<<JS\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\nJS;\n\t}\n\t$output .= \"\\n//--><!]]>\";\n\t$output .= \"\\n</script>\";\n\n\t$output .= sprintf(\n\t\t'<iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"%1$s\" width=\"%2$d\" height=\"%3$d\" title=\"%4$s\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe>',\n\t\tesc_url( $embed_url ),\n\t\tabsint( $width ),\n\t\tabsint( $height ),\n\t\tesc_attr(\n\t\t\tsprintf(\n\t\t\t\t/* translators: 1: post title, 2: site name */\n\t\t\t\t__( '&#8220;%1$s&#8221; &#8212; %2$s' ),\n\t\t\t\tget_the_title( $post ),\n\t\t\t\tget_bloginfo( 'name' )\n\t\t\t)\n\t\t)\n\t);\n\n\t/**\n\t * Filters the embed HTML output for a given post.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $output The default HTML.\n\t * @param WP_Post $post   Current post object.\n\t * @param int     $width  Width of the response.\n\t * @param int     $height Height of the response.\n\t */\n\treturn apply_filters( 'embed_html', $output, $post, $width, $height );\n}\n\n/**\n * Retrieves the oEmbed response data for a given post.\n *\n * @since 4.4.0\n *\n * @param WP_Post|int $post  Post object or ID.\n * @param int         $width The requested width.\n * @return array|false Response data on success, false if post doesn't exist.\n */\nfunction get_oembed_response_data( $post, $width ) {\n\t$post  = get_post( $post );\n\t$width = absint( $width );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( 'publish' !== get_post_status( $post ) ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters the allowed minimum and maximum widths for the oEmbed response.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $min_max_width {\n\t *     Minimum and maximum widths for the oEmbed response.\n\t *\n\t *     @type int $min Minimum width. Default 200.\n\t *     @type int $max Maximum width. Default 600.\n\t * }\n\t */\n\t$min_max_width = apply_filters( 'oembed_min_max_width', array(\n\t\t'min' => 200,\n\t\t'max' => 600\n\t) );\n\n\t$width  = min( max( $min_max_width['min'], $width ), $min_max_width['max'] );\n\t$height = max( ceil( $width / 16 * 9 ), 200 );\n\n\t$data = array(\n\t\t'version'       => '1.0',\n\t\t'provider_name' => get_bloginfo( 'name' ),\n\t\t'provider_url'  => get_home_url(),\n\t\t'author_name'   => get_bloginfo( 'name' ),\n\t\t'author_url'    => get_home_url(),\n\t\t'title'         => $post->post_title,\n\t\t'type'          => 'link',\n\t);\n\n\t$author = get_userdata( $post->post_author );\n\n\tif ( $author ) {\n\t\t$data['author_name'] = $author->display_name;\n\t\t$data['author_url']  = get_author_posts_url( $author->ID );\n\t}\n\n\t/**\n\t * Filters the oEmbed response data.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array   $data   The response data.\n\t * @param WP_Post $post   The post object.\n\t * @param int     $width  The requested width.\n\t * @param int     $height The calculated height.\n\t */\n\treturn apply_filters( 'oembed_response_data', $data, $post, $width, $height );\n}\n\n/**\n * Filters the oEmbed response data to return an iframe embed code.\n *\n * @since 4.4.0\n *\n * @param array   $data   The response data.\n * @param WP_Post $post   The post object.\n * @param int     $width  The requested width.\n * @param int     $height The calculated height.\n * @return array The modified response data.\n */\nfunction get_oembed_response_data_rich( $data, $post, $width, $height ) {\n\t$data['width']  = absint( $width );\n\t$data['height'] = absint( $height );\n\t$data['type']   = 'rich';\n\t$data['html']   = get_post_embed_html( $width, $height, $post );\n\n\t// Add post thumbnail to response if available.\n\t$thumbnail_id = false;\n\n\tif ( has_post_thumbnail( $post->ID ) ) {\n\t\t$thumbnail_id = get_post_thumbnail_id( $post->ID );\n\t}\n\n\tif ( 'attachment' === get_post_type( $post ) ) {\n\t\tif ( wp_attachment_is_image( $post ) ) {\n\t\t\t$thumbnail_id = $post->ID;\n\t\t} else if ( wp_attachment_is( 'video', $post ) ) {\n\t\t\t$thumbnail_id = get_post_thumbnail_id( $post );\n\t\t\t$data['type'] = 'video';\n\t\t}\n\t}\n\n\tif ( $thumbnail_id ) {\n\t\tlist( $thumbnail_url, $thumbnail_width, $thumbnail_height ) = wp_get_attachment_image_src( $thumbnail_id, array( $width, 99999 ) );\n\t\t$data['thumbnail_url']    = $thumbnail_url;\n\t\t$data['thumbnail_width']  = $thumbnail_width;\n\t\t$data['thumbnail_height'] = $thumbnail_height;\n\t}\n\n\treturn $data;\n}\n\n/**\n * Ensures that the specified format is either 'json' or 'xml'.\n *\n * @since 4.4.0\n *\n * @param string $format The oEmbed response format. Accepts 'json' or 'xml'.\n * @return string The format, either 'xml' or 'json'. Default 'json'.\n */\nfunction wp_oembed_ensure_format( $format ) {\n\tif ( ! in_array( $format, array( 'json', 'xml' ), true ) ) {\n\t\treturn 'json';\n\t}\n\n\treturn $format;\n}\n\n/**\n * Hooks into the REST API output to print XML instead of JSON.\n *\n * This is only done for the oEmbed API endpoint,\n * which supports both formats.\n *\n * @access private\n * @since 4.4.0\n *\n * @param bool                      $served  Whether the request has already been served.\n * @param WP_HTTP_ResponseInterface $result  Result to send to the client. Usually a WP_REST_Response.\n * @param WP_REST_Request           $request Request used to generate the response.\n * @param WP_REST_Server            $server  Server instance.\n * @return true\n */\nfunction _oembed_rest_pre_serve_request( $served, $result, $request, $server ) {\n\t$params = $request->get_params();\n\n\tif ( '/oembed/1.0/embed' !== $request->get_route() || 'GET' !== $request->get_method() ) {\n\t\treturn $served;\n\t}\n\n\tif ( ! isset( $params['format'] ) || 'xml' !== $params['format'] ) {\n\t\treturn $served;\n\t}\n\n\t// Embed links inside the request.\n\t$data = $server->response_to_data( $result, false );\n\n\tif ( ! class_exists( 'SimpleXMLElement' ) ) {\n\t\tstatus_header( 501 );\n\t\tdie( get_status_header_desc( 501 ) );\n\t}\n\n\t$result = _oembed_create_xml( $data );\n\n\t// Bail if there's no XML.\n\tif ( ! $result ) {\n\t\tstatus_header( 501 );\n\t\treturn get_status_header_desc( 501 );\n\t}\n\n\tif ( ! headers_sent() ) {\n\t\t$server->send_header( 'Content-Type', 'text/xml; charset=' . get_option( 'blog_charset' ) );\n\t}\n\n\techo $result;\n\n\treturn true;\n}\n\n/**\n * Creates an XML string from a given array.\n *\n * @since 4.4.0\n * @access private\n *\n * @param array            $data The original oEmbed response data.\n * @param SimpleXMLElement $node Optional. XML node to append the result to recursively.\n * @return string|false XML string on success, false on error.\n */\nfunction _oembed_create_xml( $data, $node = null ) {\n\tif ( ! is_array( $data ) || empty( $data ) ) {\n\t\treturn false;\n\t}\n\n\tif ( null === $node ) {\n\t\t$node = new SimpleXMLElement( '<oembed></oembed>' );\n\t}\n\n\tforeach ( $data as $key => $value ) {\n\t\tif ( is_numeric( $key ) ) {\n\t\t\t$key = 'oembed';\n\t\t}\n\n\t\tif ( is_array( $value ) ) {\n\t\t\t$item = $node->addChild( $key );\n\t\t\t_oembed_create_xml( $value, $item );\n\t\t} else {\n\t\t\t$node->addChild( $key, esc_html( $value ) );\n\t\t}\n\t}\n\n\treturn $node->asXML();\n}\n\n/**\n * Filters the given oEmbed HTML.\n *\n * If the `$url` isn't on the trusted providers list,\n * we need to filter the HTML heavily for security.\n *\n * Only filters 'rich' and 'html' response types.\n *\n * @since 4.4.0\n *\n * @param string $result The oEmbed HTML result.\n * @param object $data   A data object result from an oEmbed provider.\n * @param string $url    The URL of the content to be embedded.\n * @return string The filtered and sanitized oEmbed result.\n */\nfunction wp_filter_oembed_result( $result, $data, $url ) {\n\tif ( false === $result || ! in_array( $data->type, array( 'rich', 'video' ) ) ) {\n\t\treturn $result;\n\t}\n\n\t$wp_oembed = _wp_oembed_get_object();\n\n\t// Don't modify the HTML for trusted providers.\n\tif ( false !== $wp_oembed->get_provider( $url, array( 'discover' => false ) ) ) {\n\t\treturn $result;\n\t}\n\n\t$allowed_html = array(\n\t\t'a'          => array(\n\t\t\t'href'         => true,\n\t\t),\n\t\t'blockquote' => array(),\n\t\t'iframe'     => array(\n\t\t\t'src'          => true,\n\t\t\t'width'        => true,\n\t\t\t'height'       => true,\n\t\t\t'frameborder'  => true,\n\t\t\t'marginwidth'  => true,\n\t\t\t'marginheight' => true,\n\t\t\t'scrolling'    => true,\n\t\t\t'title'        => true,\n\t\t),\n\t);\n\n\t$html = wp_kses( $result, $allowed_html );\n\n\tpreg_match( '|(<blockquote>.*?</blockquote>)?.*(<iframe.*?></iframe>)|ms', $html, $content );\n\t// We require at least the iframe to exist.\n\tif ( empty( $content[2] ) ) {\n\t\treturn false;\n\t}\n\t$html = $content[1] . $content[2];\n\n\tif ( ! empty( $content[1] ) ) {\n\t\t// We have a blockquote to fall back on. Hide the iframe by default.\n\t\t$html = str_replace( '<iframe', '<iframe style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\"', $html );\n\t\t$html = str_replace( '<blockquote', '<blockquote class=\"wp-embedded-content\"', $html );\n\t}\n\n\t$html = str_replace( '<iframe', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\"', $html );\n\n\tpreg_match( '/ src=[\\'\"]([^\\'\"]*)[\\'\"]/', $html, $results );\n\n\tif ( ! empty( $results ) ) {\n\t\t$secret = wp_generate_password( 10, false );\n\n\t\t$url = esc_url( \"{$results[1]}#?secret=$secret\" );\n\n\t\t$html = str_replace( $results[0], \" src=\\\"$url\\\" data-secret=\\\"$secret\\\"\", $html );\n\t\t$html = str_replace( '<blockquote', \"<blockquote data-secret=\\\"$secret\\\"\", $html );\n\t}\n\n\treturn $html;\n}\n\n/**\n * Filters the string in the 'more' link displayed after a trimmed excerpt.\n *\n * Replaces '[...]' (appended to automatically generated excerpts) with an\n * ellipsis and a \"Continue reading\" link in the embed template.\n *\n * @since 4.4.0\n *\n * @param string $more_string Default 'more' string.\n * @return string 'Continue reading' link prepended with an ellipsis.\n */\nfunction wp_embed_excerpt_more( $more_string ) {\n\tif ( ! is_embed() ) {\n\t\treturn $more_string;\n\t}\n\n\t$link = sprintf( '<a href=\"%1$s\" class=\"wp-embed-more\" target=\"_top\">%2$s</a>',\n\t\tesc_url( get_permalink() ),\n\t\t/* translators: %s: Name of current post */\n\t\tsprintf( __( 'Continue reading %s' ), '<span class=\"screen-reader-text\">' . get_the_title() . '</span>' )\n\t);\n\treturn ' &hellip; ' . $link;\n}\n\n/**\n * Displays the post excerpt for the embed template.\n *\n * Intended to be used in 'The Loop'.\n *\n * @since 4.4.0\n */\nfunction the_excerpt_embed() {\n\t$output = get_the_excerpt();\n\n\t/**\n\t * Filters the post excerpt for the embed template.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $output The current post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt_embed', $output );\n}\n\n/**\n * Filters the post excerpt for the embed template.\n *\n * Shows players for video and audio attachments.\n *\n * @since 4.4.0\n *\n * @param string $content The current post excerpt.\n * @return string The modified post excerpt.\n */\nfunction wp_embed_excerpt_attachment( $content ) {\n\tif ( is_attachment() ) {\n\t\treturn prepend_attachment( '' );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Enqueue embed iframe default CSS and JS & fire do_action('enqueue_embed_scripts')\n *\n * Enqueue PNG fallback CSS for embed iframe for legacy versions of IE.\n *\n * Allows plugins to queue scripts for the embed iframe end using wp_enqueue_script().\n * Runs first in oembed_head().\n *\n * @since 4.4.0\n */\nfunction enqueue_embed_scripts() {\n\twp_enqueue_style( 'wp-embed-template-ie' );\n\n\t/**\n\t * Fires when scripts and styles are enqueued for the embed iframe.\n\t *\n\t * @since 4.4.0\n\t */\n\tdo_action( 'enqueue_embed_scripts' );\n}\n\n/**\n * Prints the CSS in the embed iframe header.\n *\n * @since 4.4.0\n */\nfunction print_embed_styles() {\n\t?>\n\t<style type=\"text/css\">\n\t<?php\n\t\tif ( SCRIPT_DEBUG ) {\n\t\t\treadfile( ABSPATH . WPINC . \"/css/wp-embed-template.css\" );\n\t\t} else {\n\t\t\t/*\n\t\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t\t * include a minified version of wp-oembed-embed.css, instead of using the\n\t\t\t * readfile() method from above.\n\t\t\t *\n\t\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t\t * minified CSS. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t\t * and edit wp-embed-template.css directly.\n\t\t\t */\n\t\t\t?>\n\t\t\tbody,html{padding:0;margin:0}body{font-family:sans-serif}.wp-embed,.wp-embed-share-input{font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif}.screen-reader-text{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute!important;width:1px}.dashicons{display:inline-block;width:20px;height:20px;background-color:transparent;background-repeat:no-repeat;-webkit-background-size:20px 20px;background-size:20px;background-position:center;-webkit-transition:background .1s ease-in;transition:background .1s ease-in;position:relative;top:5px}.dashicons-no{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M15.55%2013.7l-2.19%202.06-3.42-3.65-3.64%203.43-2.06-2.18%203.64-3.43-3.42-3.64%202.18-2.06%203.43%203.64%203.64-3.42%202.05%202.18-3.64%203.43z%27%20fill%3D%27%23fff%27%2F%3E%3C%2Fsvg%3E\")}.dashicons-admin-comments{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M5%202h9q.82%200%201.41.59T16%204v7q0%20.82-.59%201.41T14%2013h-2l-5%205v-5H5q-.82%200-1.41-.59T3%2011V4q0-.82.59-1.41T5%202z%27%20fill%3D%27%2382878c%27%2F%3E%3C%2Fsvg%3E\")}.wp-embed-comments a:hover .dashicons-admin-comments{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M5%202h9q.82%200%201.41.59T16%204v7q0%20.82-.59%201.41T14%2013h-2l-5%205v-5H5q-.82%200-1.41-.59T3%2011V4q0-.82.59-1.41T5%202z%27%20fill%3D%27%230073aa%27%2F%3E%3C%2Fsvg%3E\")}.dashicons-share{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M14.5%2012q1.24%200%202.12.88T17.5%2015t-.88%202.12-2.12.88-2.12-.88T11.5%2015q0-.34.09-.69l-4.38-2.3Q6.32%2013%205%2013q-1.24%200-2.12-.88T2%2010t.88-2.12T5%207q1.3%200%202.21.99l4.38-2.3q-.09-.35-.09-.69%200-1.24.88-2.12T14.5%202t2.12.88T17.5%205t-.88%202.12T14.5%208q-1.3%200-2.21-.99l-4.38%202.3Q8%209.66%208%2010t-.09.69l4.38%202.3q.89-.99%202.21-.99z%27%20fill%3D%27%2382878c%27%2F%3E%3C%2Fsvg%3E\");display:none}.js .dashicons-share{display:inline-block}.wp-embed-share-dialog-open:hover .dashicons-share{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M14.5%2012q1.24%200%202.12.88T17.5%2015t-.88%202.12-2.12.88-2.12-.88T11.5%2015q0-.34.09-.69l-4.38-2.3Q6.32%2013%205%2013q-1.24%200-2.12-.88T2%2010t.88-2.12T5%207q1.3%200%202.21.99l4.38-2.3q-.09-.35-.09-.69%200-1.24.88-2.12T14.5%202t2.12.88T17.5%205t-.88%202.12T14.5%208q-1.3%200-2.21-.99l-4.38%202.3Q8%209.66%208%2010t-.09.69l4.38%202.3q.89-.99%202.21-.99z%27%20fill%3D%27%230073aa%27%2F%3E%3C%2Fsvg%3E\")}.wp-embed{padding:25px;font-size:14px;font-weight:400;line-height:1.5;color:#82878c;background:#fff;border:1px solid #e5e5e5;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05);overflow:auto;zoom:1}.wp-embed a{color:#82878c;text-decoration:none}.wp-embed a:hover{text-decoration:underline}.wp-embed-featured-image{margin-bottom:20px}.wp-embed-featured-image img{width:100%;height:auto;border:none}.wp-embed-featured-image.square{float:left;max-width:160px;margin-right:20px}.wp-embed p{margin:0}p.wp-embed-heading{margin:0 0 15px;font-weight:600;font-size:22px;line-height:1.3}.wp-embed-heading a{color:#32373c}.wp-embed .wp-embed-more{color:#b4b9be}.wp-embed-footer{display:table;width:100%;margin-top:30px}.wp-embed-site-icon{position:absolute;top:50%;left:0;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);height:25px;width:25px;border:0}.wp-embed-site-title{font-weight:600;line-height:25px}.wp-embed-site-title a{position:relative;display:inline-block;padding-left:35px}.wp-embed-meta,.wp-embed-site-title{display:table-cell}.wp-embed-meta{text-align:right;white-space:nowrap;vertical-align:middle}.wp-embed-comments,.wp-embed-share{display:inline}.wp-embed-comments a,.wp-embed-share-tab-button{display:inline-block}.wp-embed-meta a:hover{text-decoration:none;color:#0073aa}.wp-embed-comments a{line-height:25px}.wp-embed-comments+.wp-embed-share{margin-left:10px}.wp-embed-share-dialog{position:absolute;top:0;left:0;right:0;bottom:0;background-color:#222;background-color:rgba(10,10,10,.9);color:#fff;opacity:1;-webkit-transition:opacity .25s ease-in-out;transition:opacity .25s ease-in-out}.wp-embed-share-dialog.hidden{opacity:0;visibility:hidden}.wp-embed-share-dialog-close,.wp-embed-share-dialog-open{margin:-8px 0 0;padding:0;background:0 0;border:none;cursor:pointer;outline:0}.wp-embed-share-dialog-close .dashicons,.wp-embed-share-dialog-open .dashicons{padding:4px}.wp-embed-share-dialog-open .dashicons{top:8px}.wp-embed-share-dialog-close:focus .dashicons,.wp-embed-share-dialog-open:focus .dashicons{-webkit-box-shadow:0 0 0 1px #5b9dd9,0 0 2px 1px rgba(30,140,190,.8);box-shadow:0 0 0 1px #5b9dd9,0 0 2px 1px rgba(30,140,190,.8);-webkit-border-radius:100%;border-radius:100%}.wp-embed-share-dialog-close{position:absolute;top:20px;right:20px;font-size:22px}.wp-embed-share-dialog-close:hover{text-decoration:none}.wp-embed-share-dialog-close .dashicons{height:24px;width:24px;-webkit-background-size:24px 24px;background-size:24px}.wp-embed-share-dialog-content{height:100%;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;overflow:hidden}.wp-embed-share-dialog-text{margin-top:25px;padding:20px}.wp-embed-share-tabs{margin:0 0 20px;padding:0;list-style:none}.wp-embed-share-tab-button button{margin:0;padding:0;border:none;background:0 0;font-size:16px;line-height:1.3;color:#aaa;cursor:pointer;-webkit-transition:color .1s ease-in;transition:color .1s ease-in}.wp-embed-share-tab-button [aria-selected=true],.wp-embed-share-tab-button button:hover{color:#fff}.wp-embed-share-tab-button+.wp-embed-share-tab-button{margin:0 0 0 10px;padding:0 0 0 11px;border-left:1px solid #aaa}.wp-embed-share-tab[aria-hidden=true]{display:none}p.wp-embed-share-description{margin:0;font-size:14px;line-height:1;font-style:italic;color:#aaa}.wp-embed-share-input{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;width:100%;border:none;height:28px;margin:0 0 10px;padding:0 5px;font-size:14px;font-weight:400;line-height:1.5;resize:none;cursor:text}textarea.wp-embed-share-input{height:72px}html[dir=rtl] .wp-embed-featured-image.square{float:right;margin-right:0;margin-left:20px}html[dir=rtl] .wp-embed-site-title a{padding-left:0;padding-right:35px}html[dir=rtl] .wp-embed-site-icon{margin-right:0;margin-left:10px;left:auto;right:0}html[dir=rtl] .wp-embed-meta{text-align:left}html[dir=rtl] .wp-embed-share{margin-left:0;margin-right:10px}html[dir=rtl] .wp-embed-share-dialog-close{right:auto;left:20px}html[dir=rtl] .wp-embed-share-tab-button+.wp-embed-share-tab-button{margin:0 10px 0 0;padding:0 11px 0 0;border-left:none;border-right:1px solid #aaa}\n\t\t\t<?php\n\t\t}\n\t?>\n\t</style>\n\t<?php\n}\n\n/**\n * Prints the JavaScript in the embed iframe header.\n *\n * @since 4.4.0\n */\nfunction print_embed_scripts() {\n\t?>\n\t<script type=\"text/javascript\">\n\t<?php\n\t\tif ( SCRIPT_DEBUG ) {\n\t\t\treadfile( ABSPATH . WPINC . \"/js/wp-embed-template.js\" );\n\t\t} else {\n\t\t\t/*\n\t\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t\t * include a minified version of wp-embed-template.js, instead of using the\n\t\t\t * readfile() method from above.\n\t\t\t *\n\t\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t\t * and edit wp-embed-template.js directly.\n\t\t\t */\n\t\t\t?>\n\t\t\t!function(a,b){\"use strict\";function c(b,c){a.parent.postMessage({message:b,value:c,secret:g},\"*\")}function d(){function d(){l.className=l.className.replace(\"hidden\",\"\"),b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]').focus()}function e(){l.className+=\" hidden\",b.querySelector(\".wp-embed-share-dialog-open\").focus()}function f(a){var c=b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]');c.setAttribute(\"aria-selected\",\"false\"),b.querySelector(\"#\"+c.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"true\"),a.target.setAttribute(\"aria-selected\",\"true\"),b.querySelector(\"#\"+a.target.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"false\")}function g(a){var c,d,e=a.target,f=e.parentElement.previousElementSibling,g=e.parentElement.nextElementSibling;if(37===a.keyCode)c=f;else{if(39!==a.keyCode)return!1;c=g}\"rtl\"===b.documentElement.getAttribute(\"dir\")&&(c=c===f?g:f),c&&(d=c.firstElementChild,e.setAttribute(\"tabindex\",\"-1\"),e.setAttribute(\"aria-selected\",!1),b.querySelector(\"#\"+e.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"true\"),d.setAttribute(\"tabindex\",\"0\"),d.setAttribute(\"aria-selected\",\"true\"),d.focus(),b.querySelector(\"#\"+d.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"false\"))}function h(a){var c=b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]');n!==a.target||a.shiftKey?c===a.target&&a.shiftKey&&(n.focus(),a.preventDefault()):(c.focus(),a.preventDefault())}function i(a){var b,d=a.target;b=d.hasAttribute(\"href\")?d.getAttribute(\"href\"):d.parentElement.getAttribute(\"href\"),b&&(c(\"link\",b),a.preventDefault())}if(!k){k=!0;var j,l=b.querySelector(\".wp-embed-share-dialog\"),m=b.querySelector(\".wp-embed-share-dialog-open\"),n=b.querySelector(\".wp-embed-share-dialog-close\"),o=b.querySelectorAll(\".wp-embed-share-input\"),p=b.querySelectorAll(\".wp-embed-share-tab-button button\"),q=b.querySelector(\".wp-embed-featured-image img\");if(o)for(j=0;j<o.length;j++)o[j].addEventListener(\"click\",function(a){a.target.select()});if(m&&m.addEventListener(\"click\",function(){d()}),n&&n.addEventListener(\"click\",function(){e()}),p)for(j=0;j<p.length;j++)p[j].addEventListener(\"click\",f),p[j].addEventListener(\"keydown\",g);b.addEventListener(\"keydown\",function(a){27===a.keyCode&&-1===l.className.indexOf(\"hidden\")?e():9===a.keyCode&&h(a)},!1),a.self!==a.top&&(c(\"height\",Math.ceil(b.body.getBoundingClientRect().height)),q&&q.addEventListener(\"load\",function(){c(\"height\",Math.ceil(b.body.getBoundingClientRect().height))}),b.addEventListener(\"click\",i))}}function e(){a.self!==a.top&&(clearTimeout(i),i=setTimeout(function(){c(\"height\",Math.ceil(b.body.getBoundingClientRect().height))},100))}function f(){a.self===a.top||g||(g=a.location.hash.replace(/.*secret=([\\d\\w]{10}).*/,\"$1\"),clearTimeout(h),h=setTimeout(function(){f()},100))}var g,h,i,j=b.querySelector&&a.addEventListener,k=!1;j&&(f(),b.documentElement.className=b.documentElement.className.replace(/\\bno-js\\b/,\"\")+\" js\",b.addEventListener(\"DOMContentLoaded\",d,!1),a.addEventListener(\"load\",d,!1),a.addEventListener(\"resize\",e,!1))}(window,document);\n\t\t\t<?php\n\t\t}\n\t?>\n\t</script>\n\t<?php\n}\n\n/**\n * Prepare the oembed HTML to be displayed in an RSS feed.\n *\n * @since 4.4.0\n * @access private\n *\n * @param string $content The content to filter.\n * @return string The filtered content.\n */\nfunction _oembed_filter_feed_content( $content ) {\n\treturn str_replace( '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\"', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\"', $content );\n}\n\n/**\n * Prints the necessary markup for the embed comments button.\n *\n * @since 4.4.0\n */\nfunction print_embed_comments_button() {\n\tif ( is_404() || ! ( get_comments_number() || comments_open() ) ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-comments\">\n\t\t<a href=\"<?php comments_link(); ?>\" target=\"_top\">\n\t\t\t<span class=\"dashicons dashicons-admin-comments\"></span>\n\t\t\t<?php\n\t\t\tprintf(\n\t\t\t\t_n(\n\t\t\t\t\t'%s <span class=\"screen-reader-text\">Comment</span>',\n\t\t\t\t\t'%s <span class=\"screen-reader-text\">Comments</span>',\n\t\t\t\t\tget_comments_number()\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( get_comments_number() )\n\t\t\t);\n\t\t\t?>\n\t\t</a>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the embed sharing button.\n *\n * @since 4.4.0\n */\nfunction print_embed_sharing_button() {\n\tif ( is_404() ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-share\">\n\t\t<button type=\"button\" class=\"wp-embed-share-dialog-open\" aria-label=\"<?php esc_attr_e( 'Open sharing dialog' ); ?>\">\n\t\t\t<span class=\"dashicons dashicons-share\"></span>\n\t\t</button>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the embed sharing dialog.\n *\n * @since 4.4.0\n */\nfunction print_embed_sharing_dialog() {\n\tif ( is_404() ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-share-dialog hidden\" role=\"dialog\" aria-label=\"<?php esc_attr_e( 'Sharing options' ); ?>\">\n\t\t<div class=\"wp-embed-share-dialog-content\">\n\t\t\t<div class=\"wp-embed-share-dialog-text\">\n\t\t\t\t<ul class=\"wp-embed-share-tabs\" role=\"tablist\">\n\t\t\t\t\t<li class=\"wp-embed-share-tab-button wp-embed-share-tab-button-wordpress\" role=\"presentation\">\n\t\t\t\t\t\t<button type=\"button\" role=\"tab\" aria-controls=\"wp-embed-share-tab-wordpress\" aria-selected=\"true\" tabindex=\"0\"><?php esc_html_e( 'WordPress Embed' ); ?></button>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"wp-embed-share-tab-button wp-embed-share-tab-button-html\" role=\"presentation\">\n\t\t\t\t\t\t<button type=\"button\" role=\"tab\" aria-controls=\"wp-embed-share-tab-html\" aria-selected=\"false\" tabindex=\"-1\"><?php esc_html_e( 'HTML Embed' ); ?></button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<div id=\"wp-embed-share-tab-wordpress\" class=\"wp-embed-share-tab\" role=\"tabpanel\" aria-hidden=\"false\">\n\t\t\t\t\t<input type=\"text\" value=\"<?php the_permalink(); ?>\" class=\"wp-embed-share-input\" aria-describedby=\"wp-embed-share-description-wordpress\" tabindex=\"0\" readonly/>\n\n\t\t\t\t\t<p class=\"wp-embed-share-description\" id=\"wp-embed-share-description-wordpress\">\n\t\t\t\t\t\t<?php _e( 'Copy and paste this URL into your WordPress site to embed' ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"wp-embed-share-tab-html\" class=\"wp-embed-share-tab\" role=\"tabpanel\" aria-hidden=\"true\">\n\t\t\t\t\t<textarea class=\"wp-embed-share-input\" aria-describedby=\"wp-embed-share-description-html\" tabindex=\"0\" readonly><?php echo esc_textarea( get_post_embed_html( 600, 400 ) ); ?></textarea>\n\n\t\t\t\t\t<p class=\"wp-embed-share-description\" id=\"wp-embed-share-description-html\">\n\t\t\t\t\t\t<?php _e( 'Copy and paste this code into your site to embed' ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<button type=\"button\" class=\"wp-embed-share-dialog-close\" aria-label=\"<?php esc_attr_e( 'Close sharing dialog' ); ?>\">\n\t\t\t\t<span class=\"dashicons dashicons-no\"></span>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the site title in an embed template.\n *\n * @since 4.5.0\n */\nfunction the_embed_site_title() {\n\t$site_title = sprintf(\n\t\t'<a href=\"%s\" target=\"_top\"><img src=\"%s\" srcset=\"%s 2x\" width=\"32\" height=\"32\" alt=\"\" class=\"wp-embed-site-icon\"/><span>%s</span></a>',\n\t\tesc_url( home_url() ),\n\t\tesc_url( get_site_icon_url( 32, admin_url( 'images/w-logo-blue.png' ) ) ),\n\t\tesc_url( get_site_icon_url( 64, admin_url( 'images/w-logo-blue.png' ) ) ),\n\t\tesc_html( get_bloginfo( 'name' ) )\n\t);\n\n\t$site_title = '<div class=\"wp-embed-site-title\">' . $site_title . '</div>';\n\n\t/**\n\t * Filters the site title HTML in the embed footer.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $site_title The site title HTML.\n\t */\n\techo apply_filters( 'embed_site_title_html', $site_title );\n}\n\n/**\n * Filters the oEmbed result before any HTTP requests are made.\n *\n * If the URL belongs to the current site, the result is fetched directly instead of\n * going through the oEmbed discovery process.\n *\n * @since 4.5.3\n *\n * @param null|string $result The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.\n * @param string      $url    The URL that should be inspected for discovery `<link>` tags.\n * @param array       $args   oEmbed remote get arguments.\n * @return null|string The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.\n *                     Null if the URL does not belong to the current site.\n */\nfunction wp_filter_pre_oembed_result( $result, $url, $args ) {\n\t$post_id = url_to_postid( $url );\n\n\t/** This filter is documented in wp-includes/class-wp-oembed-controller.php */\n\t$post_id = apply_filters( 'oembed_request_post_id', $post_id, $url );\n\n\tif ( ! $post_id ) {\n\t\treturn $result;\n\t}\n\n\t$width = isset( $args['width'] ) ? $args['width'] : 0;\n\n\t$data = get_oembed_response_data( $post_id, $width );\n\t$data = _wp_oembed_get_object()->data2html( (object) $data, $url );\n\n\tif ( ! $data ) {\n\t\treturn $result;\n\t}\n\n\treturn $data;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40148';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * oEmbed API: Top-level oEmbed functionality\n *\n * @package WordPress\n * @subpackage oEmbed\n * @since 4.4.0\n */\n\n/**\n * Registers an embed handler.\n *\n * Should probably only be used for sites that do not support oEmbed.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string   $id       An internal ID/name for the handler. Needs to be unique.\n * @param string   $regex    The regex that will be used to see if this handler should be used for a URL.\n * @param callable $callback The callback function that will be called if the regex is matched.\n * @param int      $priority Optional. Used to specify the order in which the registered handlers will\n *                           be tested. Default 10.\n */\nfunction wp_embed_register_handler( $id, $regex, $callback, $priority = 10 ) {\n\tglobal $wp_embed;\n\t$wp_embed->register_handler( $id, $regex, $callback, $priority );\n}\n\n/**\n * Unregisters a previously-registered embed handler.\n *\n * @since 2.9.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param string $id       The handler ID that should be removed.\n * @param int    $priority Optional. The priority of the handler to be removed. Default 10.\n */\nfunction wp_embed_unregister_handler( $id, $priority = 10 ) {\n\tglobal $wp_embed;\n\t$wp_embed->unregister_handler( $id, $priority );\n}\n\n/**\n * Creates default array of embed parameters.\n *\n * The width defaults to the content width as specified by the theme. If the\n * theme does not specify a content width, then 500px is used.\n *\n * The default height is 1.5 times the width, or 1000px, whichever is smaller.\n *\n * The {@see 'embed_defaults'} filter can be used to adjust either of these values.\n *\n * @since 2.9.0\n *\n * @global int $content_width\n *\n * @param string $url Optional. The URL that should be embedded. Default empty.\n *\n * @return array Default embed parameters.\n */\nfunction wp_embed_defaults( $url = '' ) {\n\tif ( ! empty( $GLOBALS['content_width'] ) )\n\t\t$width = (int) $GLOBALS['content_width'];\n\n\tif ( empty( $width ) )\n\t\t$width = 500;\n\n\t$height = min( ceil( $width * 1.5 ), 1000 );\n\n\t/**\n\t * Filters the default array of embed dimensions.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array  $size An array of embed width and height values\n\t *                     in pixels (in that order).\n\t * @param string $url  The URL that should be embedded.\n\t */\n\treturn apply_filters( 'embed_defaults', compact( 'width', 'height' ), $url );\n}\n\n/**\n * Attempts to fetch the embed HTML for a provided URL using oEmbed.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string $url  The URL that should be embedded.\n * @param array  $args Optional. Additional arguments and parameters for retrieving embed HTML.\n *                     Default empty.\n * @return false|string False on failure or the embed HTML on success.\n */\nfunction wp_oembed_get( $url, $args = '' ) {\n\t$oembed = _wp_oembed_get_object();\n\treturn $oembed->get_html( $url, $args );\n}\n\n/**\n * Returns the initialized WP_oEmbed object.\n *\n * @since 2.9.0\n * @access private\n *\n * @staticvar WP_oEmbed $wp_oembed\n *\n * @return WP_oEmbed object.\n */\nfunction _wp_oembed_get_object() {\n\tstatic $wp_oembed = null;\n\n\tif ( is_null( $wp_oembed ) ) {\n\t\t$wp_oembed = new WP_oEmbed();\n\t}\n\treturn $wp_oembed;\n}\n\n/**\n * Adds a URL format and oEmbed provider URL pair.\n *\n * @since 2.9.0\n *\n * @see WP_oEmbed\n *\n * @param string  $format   The format of URL that this provider can handle. You can use asterisks\n *                          as wildcards.\n * @param string  $provider The URL to the oEmbed provider.\n * @param boolean $regex    Optional. Whether the `$format` parameter is in a RegEx format. Default false.\n */\nfunction wp_oembed_add_provider( $format, $provider, $regex = false ) {\n\tif ( did_action( 'plugins_loaded' ) ) {\n\t\t$oembed = _wp_oembed_get_object();\n\t\t$oembed->providers[$format] = array( $provider, $regex );\n\t} else {\n\t\tWP_oEmbed::_add_provider_early( $format, $provider, $regex );\n\t}\n}\n\n/**\n * Removes an oEmbed provider.\n *\n * @since 3.5.0\n *\n * @see WP_oEmbed\n *\n * @param string $format The URL format for the oEmbed provider to remove.\n * @return bool Was the provider removed successfully?\n */\nfunction wp_oembed_remove_provider( $format ) {\n\tif ( did_action( 'plugins_loaded' ) ) {\n\t\t$oembed = _wp_oembed_get_object();\n\n\t\tif ( isset( $oembed->providers[ $format ] ) ) {\n\t\t\tunset( $oembed->providers[ $format ] );\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tWP_oEmbed::_remove_provider_early( $format );\n\t}\n\n\treturn false;\n}\n\n/**\n * Determines if default embed handlers should be loaded.\n *\n * Checks to make sure that the embeds library hasn't already been loaded. If\n * it hasn't, then it will load the embeds library.\n *\n * @since 2.9.0\n *\n * @see wp_embed_register_handler()\n */\nfunction wp_maybe_load_embeds() {\n\t/**\n\t * Filters whether to load the default embed handlers.\n\t *\n\t * Returning a falsey value will prevent loading the default embed handlers.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param bool $maybe_load_embeds Whether to load the embeds library. Default true.\n\t */\n\tif ( ! apply_filters( 'load_default_embeds', true ) ) {\n\t\treturn;\n\t}\n\n\twp_embed_register_handler( 'youtube_embed_url', '#https?://(www.)?youtube\\.com/(?:v|embed)/([^/]+)#i', 'wp_embed_handler_youtube' );\n\n\t/**\n\t * Filters the audio embed handler callback.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param callable $handler Audio embed handler callback function.\n\t */\n\twp_embed_register_handler( 'audio', '#^https?://.+?\\.(' . join( '|', wp_get_audio_extensions() ) . ')$#i', apply_filters( 'wp_audio_embed_handler', 'wp_embed_handler_audio' ), 9999 );\n\n\t/**\n\t * Filters the video embed handler callback.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param callable $handler Video embed handler callback function.\n\t */\n\twp_embed_register_handler( 'video', '#^https?://.+?\\.(' . join( '|', wp_get_video_extensions() ) . ')$#i', apply_filters( 'wp_video_embed_handler', 'wp_embed_handler_video' ), 9999 );\n}\n\n/**\n * YouTube iframe embed handler callback.\n *\n * Catches YouTube iframe embed URLs that are not parsable by oEmbed but can be translated into a URL that is.\n *\n * @since 4.0.0\n *\n * @global WP_Embed $wp_embed\n *\n * @param array  $matches The RegEx matches from the provided regex when calling\n *                        wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_youtube( $matches, $attr, $url, $rawattr ) {\n\tglobal $wp_embed;\n\t$embed = $wp_embed->autoembed( sprintf( \"https://youtube.com/watch?v=%s\", urlencode( $matches[2] ) ) );\n\n\t/**\n\t * Filters the YoutTube embed output.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @see wp_embed_handler_youtube()\n\t *\n\t * @param string $embed   YouTube embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_youtube', $embed, $attr, $url, $rawattr );\n}\n\n/**\n * Audio embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr Embed attributes.\n * @param string $url The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_audio( $matches, $attr, $url, $rawattr ) {\n\t$audio = sprintf( '[audio src=\"%s\" /]', esc_url( $url ) );\n\n\t/**\n\t * Filters the audio embed output.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $audio   Audio embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_audio', $audio, $attr, $url, $rawattr );\n}\n\n/**\n * Video embed handler callback.\n *\n * @since 3.6.0\n *\n * @param array  $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().\n * @param array  $attr    Embed attributes.\n * @param string $url     The original URL that was matched by the regex.\n * @param array  $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n */\nfunction wp_embed_handler_video( $matches, $attr, $url, $rawattr ) {\n\t$dimensions = '';\n\tif ( ! empty( $rawattr['width'] ) && ! empty( $rawattr['height'] ) ) {\n\t\t$dimensions .= sprintf( 'width=\"%d\" ', (int) $rawattr['width'] );\n\t\t$dimensions .= sprintf( 'height=\"%d\" ', (int) $rawattr['height'] );\n\t}\n\t$video = sprintf( '[video %s src=\"%s\" /]', $dimensions, esc_url( $url ) );\n\n\t/**\n\t * Filters the video embed output.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param string $video   Video embed output.\n\t * @param array  $attr    An array of embed attributes.\n\t * @param string $url     The original URL that was matched by the regex.\n\t * @param array  $rawattr The original unmodified attributes.\n\t */\n\treturn apply_filters( 'wp_embed_handler_video', $video, $attr, $url, $rawattr );\n}\n\n/**\n * Registers the oEmbed REST API route.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_register_route() {\n\t$controller = new WP_oEmbed_Controller();\n\t$controller->register_routes();\n}\n\n/**\n * Adds oEmbed discovery links in the website <head>.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_add_discovery_links() {\n\t$output = '';\n\n\tif ( is_singular() ) {\n\t\t$output .= '<link rel=\"alternate\" type=\"application/json+oembed\" href=\"' . esc_url( get_oembed_endpoint_url( get_permalink() ) ) . '\" />' . \"\\n\";\n\n\t\tif ( class_exists( 'SimpleXMLElement' ) ) {\n\t\t\t$output .= '<link rel=\"alternate\" type=\"text/xml+oembed\" href=\"' . esc_url( get_oembed_endpoint_url( get_permalink(), 'xml' ) ) . '\" />' . \"\\n\";\n\t\t}\n\t}\n\n\t/**\n\t * Filters the oEmbed discovery links HTML.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $output HTML of the discovery links.\n\t */\n\techo apply_filters( 'oembed_discovery_links', $output );\n}\n\n/**\n * Adds the necessary JavaScript to communicate with the embedded iframes.\n *\n * @since 4.4.0\n */\nfunction wp_oembed_add_host_js() {\n\twp_enqueue_script( 'wp-embed' );\n}\n\n/**\n * Retrieves the URL to embed a specific post in an iframe.\n *\n * @since 4.4.0\n *\n * @param int|WP_Post $post Optional. Post ID or object. Defaults to the current post.\n * @return string|false The post embed URL on success, false if the post doesn't exist.\n */\nfunction get_post_embed_url( $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$embed_url     = trailingslashit( get_permalink( $post ) ) . user_trailingslashit( 'embed' );\n\t$path_conflict = get_page_by_path( str_replace( home_url(), '', $embed_url ), OBJECT, get_post_types( array( 'public' => true ) ) );\n\n\tif ( ! get_option( 'permalink_structure' ) || $path_conflict ) {\n\t\t$embed_url = add_query_arg( array( 'embed' => 'true' ), get_permalink( $post ) );\n\t}\n\n\t/**\n\t * Filters the URL to embed a specific post.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $embed_url The post embed URL.\n\t * @param WP_Post $post      The corresponding post object.\n\t */\n\treturn esc_url_raw( apply_filters( 'post_embed_url', $embed_url, $post ) );\n}\n\n/**\n * Retrieves the oEmbed endpoint URL for a given permalink.\n *\n * Pass an empty string as the first argument to get the endpoint base URL.\n *\n * @since 4.4.0\n *\n * @param string $permalink Optional. The permalink used for the `url` query arg. Default empty.\n * @param string $format    Optional. The requested response format. Default 'json'.\n * @return string The oEmbed endpoint URL.\n */\nfunction get_oembed_endpoint_url( $permalink = '', $format = 'json' ) {\n\t$url = rest_url( 'oembed/1.0/embed' );\n\n\tif ( '' !== $permalink ) {\n\t\t$url = add_query_arg( array(\n\t\t\t'url'    => urlencode( $permalink ),\n\t\t\t'format' => ( 'json' !== $format ) ? $format : false,\n\t\t), $url );\n\t}\n\n\t/**\n\t * Filters the oEmbed endpoint URL.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $url       The URL to the oEmbed endpoint.\n\t * @param string $permalink The permalink used for the `url` query arg.\n\t * @param string $format    The requested response format.\n\t */\n\treturn apply_filters( 'oembed_endpoint_url', $url, $permalink, $format );\n}\n\n/**\n * Retrieves the embed code for a specific post.\n *\n * @since 4.4.0\n *\n * @param int         $width  The width for the response.\n * @param int         $height The height for the response.\n * @param int|WP_Post $post   Optional. Post ID or object. Default is global `$post`.\n * @return string|false Embed code on success, false if post doesn't exist.\n */\nfunction get_post_embed_html( $width, $height, $post = null ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$embed_url = get_post_embed_url( $post );\n\n\t$output = '<blockquote class=\"wp-embedded-content\"><a href=\"' . esc_url( get_permalink( $post ) ) . '\">' . get_the_title( $post ) . \"</a></blockquote>\\n\";\n\n\t$output .= \"<script type='text/javascript'>\\n\";\n\t$output .= \"<!--//--><![CDATA[//><!--\\n\";\n\tif ( SCRIPT_DEBUG ) {\n\t\t$output .= file_get_contents( ABSPATH . WPINC . '/js/wp-embed.js' );\n\t} else {\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t * include a minified version of wp-embed.js, instead of using the\n\t\t * file_get_contents() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-embed.js directly.\n\t\t */\n\t\t$output .=<<<JS\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\nJS;\n\t}\n\t$output .= \"\\n//--><!]]>\";\n\t$output .= \"\\n</script>\";\n\n\t$output .= sprintf(\n\t\t'<iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"%1$s\" width=\"%2$d\" height=\"%3$d\" title=\"%4$s\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe>',\n\t\tesc_url( $embed_url ),\n\t\tabsint( $width ),\n\t\tabsint( $height ),\n\t\tesc_attr(\n\t\t\tsprintf(\n\t\t\t\t/* translators: 1: post title, 2: site name */\n\t\t\t\t__( '&#8220;%1$s&#8221; &#8212; %2$s' ),\n\t\t\t\tget_the_title( $post ),\n\t\t\t\tget_bloginfo( 'name' )\n\t\t\t)\n\t\t)\n\t);\n\n\t/**\n\t * Filters the embed HTML output for a given post.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $output The default HTML.\n\t * @param WP_Post $post   Current post object.\n\t * @param int     $width  Width of the response.\n\t * @param int     $height Height of the response.\n\t */\n\treturn apply_filters( 'embed_html', $output, $post, $width, $height );\n}\n\n/**\n * Retrieves the oEmbed response data for a given post.\n *\n * @since 4.4.0\n *\n * @param WP_Post|int $post  Post object or ID.\n * @param int         $width The requested width.\n * @return array|false Response data on success, false if post doesn't exist.\n */\nfunction get_oembed_response_data( $post, $width ) {\n\t$post  = get_post( $post );\n\t$width = absint( $width );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\tif ( 'publish' !== get_post_status( $post ) ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters the allowed minimum and maximum widths for the oEmbed response.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $min_max_width {\n\t *     Minimum and maximum widths for the oEmbed response.\n\t *\n\t *     @type int $min Minimum width. Default 200.\n\t *     @type int $max Maximum width. Default 600.\n\t * }\n\t */\n\t$min_max_width = apply_filters( 'oembed_min_max_width', array(\n\t\t'min' => 200,\n\t\t'max' => 600\n\t) );\n\n\t$width  = min( max( $min_max_width['min'], $width ), $min_max_width['max'] );\n\t$height = max( ceil( $width / 16 * 9 ), 200 );\n\n\t$data = array(\n\t\t'version'       => '1.0',\n\t\t'provider_name' => get_bloginfo( 'name' ),\n\t\t'provider_url'  => get_home_url(),\n\t\t'author_name'   => get_bloginfo( 'name' ),\n\t\t'author_url'    => get_home_url(),\n\t\t'title'         => $post->post_title,\n\t\t'type'          => 'link',\n\t);\n\n\t$author = get_userdata( $post->post_author );\n\n\tif ( $author ) {\n\t\t$data['author_name'] = $author->display_name;\n\t\t$data['author_url']  = get_author_posts_url( $author->ID );\n\t}\n\n\t/**\n\t * Filters the oEmbed response data.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array   $data   The response data.\n\t * @param WP_Post $post   The post object.\n\t * @param int     $width  The requested width.\n\t * @param int     $height The calculated height.\n\t */\n\treturn apply_filters( 'oembed_response_data', $data, $post, $width, $height );\n}\n\n/**\n * Filters the oEmbed response data to return an iframe embed code.\n *\n * @since 4.4.0\n *\n * @param array   $data   The response data.\n * @param WP_Post $post   The post object.\n * @param int     $width  The requested width.\n * @param int     $height The calculated height.\n * @return array The modified response data.\n */\nfunction get_oembed_response_data_rich( $data, $post, $width, $height ) {\n\t$data['width']  = absint( $width );\n\t$data['height'] = absint( $height );\n\t$data['type']   = 'rich';\n\t$data['html']   = get_post_embed_html( $width, $height, $post );\n\n\t// Add post thumbnail to response if available.\n\t$thumbnail_id = false;\n\n\tif ( has_post_thumbnail( $post->ID ) ) {\n\t\t$thumbnail_id = get_post_thumbnail_id( $post->ID );\n\t}\n\n\tif ( 'attachment' === get_post_type( $post ) ) {\n\t\tif ( wp_attachment_is_image( $post ) ) {\n\t\t\t$thumbnail_id = $post->ID;\n\t\t} else if ( wp_attachment_is( 'video', $post ) ) {\n\t\t\t$thumbnail_id = get_post_thumbnail_id( $post );\n\t\t\t$data['type'] = 'video';\n\t\t}\n\t}\n\n\tif ( $thumbnail_id ) {\n\t\tlist( $thumbnail_url, $thumbnail_width, $thumbnail_height ) = wp_get_attachment_image_src( $thumbnail_id, array( $width, 99999 ) );\n\t\t$data['thumbnail_url']    = $thumbnail_url;\n\t\t$data['thumbnail_width']  = $thumbnail_width;\n\t\t$data['thumbnail_height'] = $thumbnail_height;\n\t}\n\n\treturn $data;\n}\n\n/**\n * Ensures that the specified format is either 'json' or 'xml'.\n *\n * @since 4.4.0\n *\n * @param string $format The oEmbed response format. Accepts 'json' or 'xml'.\n * @return string The format, either 'xml' or 'json'. Default 'json'.\n */\nfunction wp_oembed_ensure_format( $format ) {\n\tif ( ! in_array( $format, array( 'json', 'xml' ), true ) ) {\n\t\treturn 'json';\n\t}\n\n\treturn $format;\n}\n\n/**\n * Hooks into the REST API output to print XML instead of JSON.\n *\n * This is only done for the oEmbed API endpoint,\n * which supports both formats.\n *\n * @access private\n * @since 4.4.0\n *\n * @param bool                      $served  Whether the request has already been served.\n * @param WP_HTTP_ResponseInterface $result  Result to send to the client. Usually a WP_REST_Response.\n * @param WP_REST_Request           $request Request used to generate the response.\n * @param WP_REST_Server            $server  Server instance.\n * @return true\n */\nfunction _oembed_rest_pre_serve_request( $served, $result, $request, $server ) {\n\t$params = $request->get_params();\n\n\tif ( '/oembed/1.0/embed' !== $request->get_route() || 'GET' !== $request->get_method() ) {\n\t\treturn $served;\n\t}\n\n\tif ( ! isset( $params['format'] ) || 'xml' !== $params['format'] ) {\n\t\treturn $served;\n\t}\n\n\t// Embed links inside the request.\n\t$data = $server->response_to_data( $result, false );\n\n\tif ( ! class_exists( 'SimpleXMLElement' ) ) {\n\t\tstatus_header( 501 );\n\t\tdie( get_status_header_desc( 501 ) );\n\t}\n\n\t$result = _oembed_create_xml( $data );\n\n\t// Bail if there's no XML.\n\tif ( ! $result ) {\n\t\tstatus_header( 501 );\n\t\treturn get_status_header_desc( 501 );\n\t}\n\n\tif ( ! headers_sent() ) {\n\t\t$server->send_header( 'Content-Type', 'text/xml; charset=' . get_option( 'blog_charset' ) );\n\t}\n\n\techo $result;\n\n\treturn true;\n}\n\n/**\n * Creates an XML string from a given array.\n *\n * @since 4.4.0\n * @access private\n *\n * @param array            $data The original oEmbed response data.\n * @param SimpleXMLElement $node Optional. XML node to append the result to recursively.\n * @return string|false XML string on success, false on error.\n */\nfunction _oembed_create_xml( $data, $node = null ) {\n\tif ( ! is_array( $data ) || empty( $data ) ) {\n\t\treturn false;\n\t}\n\n\tif ( null === $node ) {\n\t\t$node = new SimpleXMLElement( '<oembed></oembed>' );\n\t}\n\n\tforeach ( $data as $key => $value ) {\n\t\tif ( is_numeric( $key ) ) {\n\t\t\t$key = 'oembed';\n\t\t}\n\n\t\tif ( is_array( $value ) ) {\n\t\t\t$item = $node->addChild( $key );\n\t\t\t_oembed_create_xml( $value, $item );\n\t\t} else {\n\t\t\t$node->addChild( $key, esc_html( $value ) );\n\t\t}\n\t}\n\n\treturn $node->asXML();\n}\n\n/**\n * Filters the given oEmbed HTML.\n *\n * If the `$url` isn't on the trusted providers list,\n * we need to filter the HTML heavily for security.\n *\n * Only filters 'rich' and 'html' response types.\n *\n * @since 4.4.0\n *\n * @param string $result The oEmbed HTML result.\n * @param object $data   A data object result from an oEmbed provider.\n * @param string $url    The URL of the content to be embedded.\n * @return string The filtered and sanitized oEmbed result.\n */\nfunction wp_filter_oembed_result( $result, $data, $url ) {\n\tif ( false === $result || ! in_array( $data->type, array( 'rich', 'video' ) ) ) {\n\t\treturn $result;\n\t}\n\n\t$wp_oembed = _wp_oembed_get_object();\n\n\t// Don't modify the HTML for trusted providers.\n\tif ( false !== $wp_oembed->get_provider( $url, array( 'discover' => false ) ) ) {\n\t\treturn $result;\n\t}\n\n\t$allowed_html = array(\n\t\t'a'          => array(\n\t\t\t'href'         => true,\n\t\t),\n\t\t'blockquote' => array(),\n\t\t'iframe'     => array(\n\t\t\t'src'          => true,\n\t\t\t'width'        => true,\n\t\t\t'height'       => true,\n\t\t\t'frameborder'  => true,\n\t\t\t'marginwidth'  => true,\n\t\t\t'marginheight' => true,\n\t\t\t'scrolling'    => true,\n\t\t\t'title'        => true,\n\t\t),\n\t);\n\n\t$html = wp_kses( $result, $allowed_html );\n\n\tpreg_match( '|(<blockquote>.*?</blockquote>)?.*(<iframe.*?></iframe>)|ms', $html, $content );\n\t// We require at least the iframe to exist.\n\tif ( empty( $content[2] ) ) {\n\t\treturn false;\n\t}\n\t$html = $content[1] . $content[2];\n\n\tif ( ! empty( $content[1] ) ) {\n\t\t// We have a blockquote to fall back on. Hide the iframe by default.\n\t\t$html = str_replace( '<iframe', '<iframe style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\"', $html );\n\t\t$html = str_replace( '<blockquote', '<blockquote class=\"wp-embedded-content\"', $html );\n\t}\n\n\t$html = str_replace( '<iframe', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\"', $html );\n\n\tpreg_match( '/ src=[\\'\"]([^\\'\"]*)[\\'\"]/', $html, $results );\n\n\tif ( ! empty( $results ) ) {\n\t\t$secret = wp_generate_password( 10, false );\n\n\t\t$url = esc_url( \"{$results[1]}#?secret=$secret\" );\n\n\t\t$html = str_replace( $results[0], \" src=\\\"$url\\\" data-secret=\\\"$secret\\\"\", $html );\n\t\t$html = str_replace( '<blockquote', \"<blockquote data-secret=\\\"$secret\\\"\", $html );\n\t}\n\n\treturn $html;\n}\n\n/**\n * Filters the string in the 'more' link displayed after a trimmed excerpt.\n *\n * Replaces '[...]' (appended to automatically generated excerpts) with an\n * ellipsis and a \"Continue reading\" link in the embed template.\n *\n * @since 4.4.0\n *\n * @param string $more_string Default 'more' string.\n * @return string 'Continue reading' link prepended with an ellipsis.\n */\nfunction wp_embed_excerpt_more( $more_string ) {\n\tif ( ! is_embed() ) {\n\t\treturn $more_string;\n\t}\n\n\t$link = sprintf( '<a href=\"%1$s\" class=\"wp-embed-more\" target=\"_top\">%2$s</a>',\n\t\tesc_url( get_permalink() ),\n\t\t/* translators: %s: Name of current post */\n\t\tsprintf( __( 'Continue reading %s' ), '<span class=\"screen-reader-text\">' . get_the_title() . '</span>' )\n\t);\n\treturn ' &hellip; ' . $link;\n}\n\n/**\n * Displays the post excerpt for the embed template.\n *\n * Intended to be used in 'The Loop'.\n *\n * @since 4.4.0\n */\nfunction the_excerpt_embed() {\n\t$output = get_the_excerpt();\n\n\t/**\n\t * Filters the post excerpt for the embed template.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $output The current post excerpt.\n\t */\n\techo apply_filters( 'the_excerpt_embed', $output );\n}\n\n/**\n * Filters the post excerpt for the embed template.\n *\n * Shows players for video and audio attachments.\n *\n * @since 4.4.0\n *\n * @param string $content The current post excerpt.\n * @return string The modified post excerpt.\n */\nfunction wp_embed_excerpt_attachment( $content ) {\n\tif ( is_attachment() ) {\n\t\treturn prepend_attachment( '' );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Enqueue embed iframe default CSS and JS & fire do_action('enqueue_embed_scripts')\n *\n * Enqueue PNG fallback CSS for embed iframe for legacy versions of IE.\n *\n * Allows plugins to queue scripts for the embed iframe end using wp_enqueue_script().\n * Runs first in oembed_head().\n *\n * @since 4.4.0\n */\nfunction enqueue_embed_scripts() {\n\twp_enqueue_style( 'wp-embed-template-ie' );\n\n\t/**\n\t * Fires when scripts and styles are enqueued for the embed iframe.\n\t *\n\t * @since 4.4.0\n\t */\n\tdo_action( 'enqueue_embed_scripts' );\n}\n\n/**\n * Prints the CSS in the embed iframe header.\n *\n * @since 4.4.0\n */\nfunction print_embed_styles() {\n\t?>\n\t<style type=\"text/css\">\n\t<?php\n\t\tif ( SCRIPT_DEBUG ) {\n\t\t\treadfile( ABSPATH . WPINC . \"/css/wp-embed-template.css\" );\n\t\t} else {\n\t\t\t/*\n\t\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t\t * include a minified version of wp-oembed-embed.css, instead of using the\n\t\t\t * readfile() method from above.\n\t\t\t *\n\t\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t\t * minified CSS. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t\t * and edit wp-embed-template.css directly.\n\t\t\t */\n\t\t\t?>\n\t\t\tbody,html{padding:0;margin:0}body{font-family:sans-serif}.wp-embed,.wp-embed-share-input{font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif}.screen-reader-text{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute!important;width:1px}.dashicons{display:inline-block;width:20px;height:20px;background-color:transparent;background-repeat:no-repeat;-webkit-background-size:20px 20px;background-size:20px;background-position:center;-webkit-transition:background .1s ease-in;transition:background .1s ease-in;position:relative;top:5px}.dashicons-no{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M15.55%2013.7l-2.19%202.06-3.42-3.65-3.64%203.43-2.06-2.18%203.64-3.43-3.42-3.64%202.18-2.06%203.43%203.64%203.64-3.42%202.05%202.18-3.64%203.43z%27%20fill%3D%27%23fff%27%2F%3E%3C%2Fsvg%3E\")}.dashicons-admin-comments{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M5%202h9q.82%200%201.41.59T16%204v7q0%20.82-.59%201.41T14%2013h-2l-5%205v-5H5q-.82%200-1.41-.59T3%2011V4q0-.82.59-1.41T5%202z%27%20fill%3D%27%2382878c%27%2F%3E%3C%2Fsvg%3E\")}.wp-embed-comments a:hover .dashicons-admin-comments{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M5%202h9q.82%200%201.41.59T16%204v7q0%20.82-.59%201.41T14%2013h-2l-5%205v-5H5q-.82%200-1.41-.59T3%2011V4q0-.82.59-1.41T5%202z%27%20fill%3D%27%230073aa%27%2F%3E%3C%2Fsvg%3E\")}.dashicons-share{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M14.5%2012q1.24%200%202.12.88T17.5%2015t-.88%202.12-2.12.88-2.12-.88T11.5%2015q0-.34.09-.69l-4.38-2.3Q6.32%2013%205%2013q-1.24%200-2.12-.88T2%2010t.88-2.12T5%207q1.3%200%202.21.99l4.38-2.3q-.09-.35-.09-.69%200-1.24.88-2.12T14.5%202t2.12.88T17.5%205t-.88%202.12T14.5%208q-1.3%200-2.21-.99l-4.38%202.3Q8%209.66%208%2010t-.09.69l4.38%202.3q.89-.99%202.21-.99z%27%20fill%3D%27%2382878c%27%2F%3E%3C%2Fsvg%3E\");display:none}.js .dashicons-share{display:inline-block}.wp-embed-share-dialog-open:hover .dashicons-share{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M14.5%2012q1.24%200%202.12.88T17.5%2015t-.88%202.12-2.12.88-2.12-.88T11.5%2015q0-.34.09-.69l-4.38-2.3Q6.32%2013%205%2013q-1.24%200-2.12-.88T2%2010t.88-2.12T5%207q1.3%200%202.21.99l4.38-2.3q-.09-.35-.09-.69%200-1.24.88-2.12T14.5%202t2.12.88T17.5%205t-.88%202.12T14.5%208q-1.3%200-2.21-.99l-4.38%202.3Q8%209.66%208%2010t-.09.69l4.38%202.3q.89-.99%202.21-.99z%27%20fill%3D%27%230073aa%27%2F%3E%3C%2Fsvg%3E\")}.wp-embed{padding:25px;font-size:14px;font-weight:400;line-height:1.5;color:#82878c;background:#fff;border:1px solid #e5e5e5;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05);overflow:auto;zoom:1}.wp-embed a{color:#82878c;text-decoration:none}.wp-embed a:hover{text-decoration:underline}.wp-embed-featured-image{margin-bottom:20px}.wp-embed-featured-image img{width:100%;height:auto;border:none}.wp-embed-featured-image.square{float:left;max-width:160px;margin-right:20px}.wp-embed p{margin:0}p.wp-embed-heading{margin:0 0 15px;font-weight:600;font-size:22px;line-height:1.3}.wp-embed-heading a{color:#32373c}.wp-embed .wp-embed-more{color:#b4b9be}.wp-embed-footer{display:table;width:100%;margin-top:30px}.wp-embed-site-icon{position:absolute;top:50%;left:0;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);height:25px;width:25px;border:0}.wp-embed-site-title{font-weight:600;line-height:25px}.wp-embed-site-title a{position:relative;display:inline-block;padding-left:35px}.wp-embed-meta,.wp-embed-site-title{display:table-cell}.wp-embed-meta{text-align:right;white-space:nowrap;vertical-align:middle}.wp-embed-comments,.wp-embed-share{display:inline}.wp-embed-comments a,.wp-embed-share-tab-button{display:inline-block}.wp-embed-meta a:hover{text-decoration:none;color:#0073aa}.wp-embed-comments a{line-height:25px}.wp-embed-comments+.wp-embed-share{margin-left:10px}.wp-embed-share-dialog{position:absolute;top:0;left:0;right:0;bottom:0;background-color:#222;background-color:rgba(10,10,10,.9);color:#fff;opacity:1;-webkit-transition:opacity .25s ease-in-out;transition:opacity .25s ease-in-out}.wp-embed-share-dialog.hidden{opacity:0;visibility:hidden}.wp-embed-share-dialog-close,.wp-embed-share-dialog-open{margin:-8px 0 0;padding:0;background:0 0;border:none;cursor:pointer;outline:0}.wp-embed-share-dialog-close .dashicons,.wp-embed-share-dialog-open .dashicons{padding:4px}.wp-embed-share-dialog-open .dashicons{top:8px}.wp-embed-share-dialog-close:focus .dashicons,.wp-embed-share-dialog-open:focus .dashicons{-webkit-box-shadow:0 0 0 1px #5b9dd9,0 0 2px 1px rgba(30,140,190,.8);box-shadow:0 0 0 1px #5b9dd9,0 0 2px 1px rgba(30,140,190,.8);-webkit-border-radius:100%;border-radius:100%}.wp-embed-share-dialog-close{position:absolute;top:20px;right:20px;font-size:22px}.wp-embed-share-dialog-close:hover{text-decoration:none}.wp-embed-share-dialog-close .dashicons{height:24px;width:24px;-webkit-background-size:24px 24px;background-size:24px}.wp-embed-share-dialog-content{height:100%;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;overflow:hidden}.wp-embed-share-dialog-text{margin-top:25px;padding:20px}.wp-embed-share-tabs{margin:0 0 20px;padding:0;list-style:none}.wp-embed-share-tab-button button{margin:0;padding:0;border:none;background:0 0;font-size:16px;line-height:1.3;color:#aaa;cursor:pointer;-webkit-transition:color .1s ease-in;transition:color .1s ease-in}.wp-embed-share-tab-button [aria-selected=true],.wp-embed-share-tab-button button:hover{color:#fff}.wp-embed-share-tab-button+.wp-embed-share-tab-button{margin:0 0 0 10px;padding:0 0 0 11px;border-left:1px solid #aaa}.wp-embed-share-tab[aria-hidden=true]{display:none}p.wp-embed-share-description{margin:0;font-size:14px;line-height:1;font-style:italic;color:#aaa}.wp-embed-share-input{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;width:100%;border:none;height:28px;margin:0 0 10px;padding:0 5px;font-size:14px;font-weight:400;line-height:1.5;resize:none;cursor:text}textarea.wp-embed-share-input{height:72px}html[dir=rtl] .wp-embed-featured-image.square{float:right;margin-right:0;margin-left:20px}html[dir=rtl] .wp-embed-site-title a{padding-left:0;padding-right:35px}html[dir=rtl] .wp-embed-site-icon{margin-right:0;margin-left:10px;left:auto;right:0}html[dir=rtl] .wp-embed-meta{text-align:left}html[dir=rtl] .wp-embed-share{margin-left:0;margin-right:10px}html[dir=rtl] .wp-embed-share-dialog-close{right:auto;left:20px}html[dir=rtl] .wp-embed-share-tab-button+.wp-embed-share-tab-button{margin:0 10px 0 0;padding:0 11px 0 0;border-left:none;border-right:1px solid #aaa}\n\t\t\t<?php\n\t\t}\n\t?>\n\t</style>\n\t<?php\n}\n\n/**\n * Prints the JavaScript in the embed iframe header.\n *\n * @since 4.4.0\n */\nfunction print_embed_scripts() {\n\t?>\n\t<script type=\"text/javascript\">\n\t<?php\n\t\tif ( SCRIPT_DEBUG ) {\n\t\t\treadfile( ABSPATH . WPINC . \"/js/wp-embed-template.js\" );\n\t\t} else {\n\t\t\t/*\n\t\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t\t * include a minified version of wp-embed-template.js, instead of using the\n\t\t\t * readfile() method from above.\n\t\t\t *\n\t\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t\t * and edit wp-embed-template.js directly.\n\t\t\t */\n\t\t\t?>\n\t\t\t!function(a,b){\"use strict\";function c(b,c){a.parent.postMessage({message:b,value:c,secret:g},\"*\")}function d(){function d(){l.className=l.className.replace(\"hidden\",\"\"),b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]').focus()}function e(){l.className+=\" hidden\",b.querySelector(\".wp-embed-share-dialog-open\").focus()}function f(a){var c=b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]');c.setAttribute(\"aria-selected\",\"false\"),b.querySelector(\"#\"+c.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"true\"),a.target.setAttribute(\"aria-selected\",\"true\"),b.querySelector(\"#\"+a.target.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"false\")}function g(a){var c,d,e=a.target,f=e.parentElement.previousElementSibling,g=e.parentElement.nextElementSibling;if(37===a.keyCode)c=f;else{if(39!==a.keyCode)return!1;c=g}\"rtl\"===b.documentElement.getAttribute(\"dir\")&&(c=c===f?g:f),c&&(d=c.firstElementChild,e.setAttribute(\"tabindex\",\"-1\"),e.setAttribute(\"aria-selected\",!1),b.querySelector(\"#\"+e.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"true\"),d.setAttribute(\"tabindex\",\"0\"),d.setAttribute(\"aria-selected\",\"true\"),d.focus(),b.querySelector(\"#\"+d.getAttribute(\"aria-controls\")).setAttribute(\"aria-hidden\",\"false\"))}function h(a){var c=b.querySelector('.wp-embed-share-tab-button [aria-selected=\"true\"]');n!==a.target||a.shiftKey?c===a.target&&a.shiftKey&&(n.focus(),a.preventDefault()):(c.focus(),a.preventDefault())}function i(a){var b,d=a.target;b=d.hasAttribute(\"href\")?d.getAttribute(\"href\"):d.parentElement.getAttribute(\"href\"),b&&(c(\"link\",b),a.preventDefault())}if(!k){k=!0;var j,l=b.querySelector(\".wp-embed-share-dialog\"),m=b.querySelector(\".wp-embed-share-dialog-open\"),n=b.querySelector(\".wp-embed-share-dialog-close\"),o=b.querySelectorAll(\".wp-embed-share-input\"),p=b.querySelectorAll(\".wp-embed-share-tab-button button\"),q=b.querySelector(\".wp-embed-featured-image img\");if(o)for(j=0;j<o.length;j++)o[j].addEventListener(\"click\",function(a){a.target.select()});if(m&&m.addEventListener(\"click\",function(){d()}),n&&n.addEventListener(\"click\",function(){e()}),p)for(j=0;j<p.length;j++)p[j].addEventListener(\"click\",f),p[j].addEventListener(\"keydown\",g);b.addEventListener(\"keydown\",function(a){27===a.keyCode&&-1===l.className.indexOf(\"hidden\")?e():9===a.keyCode&&h(a)},!1),a.self!==a.top&&(c(\"height\",Math.ceil(b.body.getBoundingClientRect().height)),q&&q.addEventListener(\"load\",function(){c(\"height\",Math.ceil(b.body.getBoundingClientRect().height))}),b.addEventListener(\"click\",i))}}function e(){a.self!==a.top&&(clearTimeout(i),i=setTimeout(function(){c(\"height\",Math.ceil(b.body.getBoundingClientRect().height))},100))}function f(){a.self===a.top||g||(g=a.location.hash.replace(/.*secret=([\\d\\w]{10}).*/,\"$1\"),clearTimeout(h),h=setTimeout(function(){f()},100))}var g,h,i,j=b.querySelector&&a.addEventListener,k=!1;j&&(f(),b.documentElement.className=b.documentElement.className.replace(/\\bno-js\\b/,\"\")+\" js\",b.addEventListener(\"DOMContentLoaded\",d,!1),a.addEventListener(\"load\",d,!1),a.addEventListener(\"resize\",e,!1))}(window,document);\n\t\t\t<?php\n\t\t}\n\t?>\n\t</script>\n\t<?php\n}\n\n/**\n * Prepare the oembed HTML to be displayed in an RSS feed.\n *\n * @since 4.4.0\n * @access private\n *\n * @param string $content The content to filter.\n * @return string The filtered content.\n */\nfunction _oembed_filter_feed_content( $content ) {\n\treturn str_replace( '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\"', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\"', $content );\n}\n\n/**\n * Prints the necessary markup for the embed comments button.\n *\n * @since 4.4.0\n */\nfunction print_embed_comments_button() {\n\tif ( is_404() || ! ( get_comments_number() || comments_open() ) ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-comments\">\n\t\t<a href=\"<?php comments_link(); ?>\" target=\"_top\">\n\t\t\t<span class=\"dashicons dashicons-admin-comments\"></span>\n\t\t\t<?php\n\t\t\tprintf(\n\t\t\t\t_n(\n\t\t\t\t\t'%s <span class=\"screen-reader-text\">Comment</span>',\n\t\t\t\t\t'%s <span class=\"screen-reader-text\">Comments</span>',\n\t\t\t\t\tget_comments_number()\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( get_comments_number() )\n\t\t\t);\n\t\t\t?>\n\t\t</a>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the embed sharing button.\n *\n * @since 4.4.0\n */\nfunction print_embed_sharing_button() {\n\tif ( is_404() ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-share\">\n\t\t<button type=\"button\" class=\"wp-embed-share-dialog-open\" aria-label=\"<?php esc_attr_e( 'Open sharing dialog' ); ?>\">\n\t\t\t<span class=\"dashicons dashicons-share\"></span>\n\t\t</button>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the embed sharing dialog.\n *\n * @since 4.4.0\n */\nfunction print_embed_sharing_dialog() {\n\tif ( is_404() ) {\n\t\treturn;\n\t}\n\t?>\n\t<div class=\"wp-embed-share-dialog hidden\" role=\"dialog\" aria-label=\"<?php esc_attr_e( 'Sharing options' ); ?>\">\n\t\t<div class=\"wp-embed-share-dialog-content\">\n\t\t\t<div class=\"wp-embed-share-dialog-text\">\n\t\t\t\t<ul class=\"wp-embed-share-tabs\" role=\"tablist\">\n\t\t\t\t\t<li class=\"wp-embed-share-tab-button wp-embed-share-tab-button-wordpress\" role=\"presentation\">\n\t\t\t\t\t\t<button type=\"button\" role=\"tab\" aria-controls=\"wp-embed-share-tab-wordpress\" aria-selected=\"true\" tabindex=\"0\"><?php esc_html_e( 'WordPress Embed' ); ?></button>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"wp-embed-share-tab-button wp-embed-share-tab-button-html\" role=\"presentation\">\n\t\t\t\t\t\t<button type=\"button\" role=\"tab\" aria-controls=\"wp-embed-share-tab-html\" aria-selected=\"false\" tabindex=\"-1\"><?php esc_html_e( 'HTML Embed' ); ?></button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<div id=\"wp-embed-share-tab-wordpress\" class=\"wp-embed-share-tab\" role=\"tabpanel\" aria-hidden=\"false\">\n\t\t\t\t\t<input type=\"text\" value=\"<?php the_permalink(); ?>\" class=\"wp-embed-share-input\" aria-describedby=\"wp-embed-share-description-wordpress\" tabindex=\"0\" readonly/>\n\n\t\t\t\t\t<p class=\"wp-embed-share-description\" id=\"wp-embed-share-description-wordpress\">\n\t\t\t\t\t\t<?php _e( 'Copy and paste this URL into your WordPress site to embed' ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"wp-embed-share-tab-html\" class=\"wp-embed-share-tab\" role=\"tabpanel\" aria-hidden=\"true\">\n\t\t\t\t\t<textarea class=\"wp-embed-share-input\" aria-describedby=\"wp-embed-share-description-html\" tabindex=\"0\" readonly><?php echo esc_textarea( get_post_embed_html( 600, 400 ) ); ?></textarea>\n\n\t\t\t\t\t<p class=\"wp-embed-share-description\" id=\"wp-embed-share-description-html\">\n\t\t\t\t\t\t<?php _e( 'Copy and paste this code into your site to embed' ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<button type=\"button\" class=\"wp-embed-share-dialog-close\" aria-label=\"<?php esc_attr_e( 'Close sharing dialog' ); ?>\">\n\t\t\t\t<span class=\"dashicons dashicons-no\"></span>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Prints the necessary markup for the site title in an embed template.\n *\n * @since 4.5.0\n */\nfunction the_embed_site_title() {\n\t$site_title = sprintf(\n\t\t'<a href=\"%s\" target=\"_top\"><img src=\"%s\" srcset=\"%s 2x\" width=\"32\" height=\"32\" alt=\"\" class=\"wp-embed-site-icon\"/><span>%s</span></a>',\n\t\tesc_url( home_url() ),\n\t\tesc_url( get_site_icon_url( 32, admin_url( 'images/w-logo-blue.png' ) ) ),\n\t\tesc_url( get_site_icon_url( 64, admin_url( 'images/w-logo-blue.png' ) ) ),\n\t\tesc_html( get_bloginfo( 'name' ) )\n\t);\n\n\t$site_title = '<div class=\"wp-embed-site-title\">' . $site_title . '</div>';\n\n\t/**\n\t * Filters the site title HTML in the embed footer.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $site_title The site title HTML.\n\t */\n\techo apply_filters( 'embed_site_title_html', $site_title );\n}\n\n/**\n * Filters the oEmbed result before any HTTP requests are made.\n *\n * If the URL belongs to the current site, the result is fetched directly instead of\n * going through the oEmbed discovery process.\n *\n * @since 4.5.3\n *\n * @param null|string $result The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.\n * @param string      $url    The URL that should be inspected for discovery `<link>` tags.\n * @param array       $args   oEmbed remote get arguments.\n * @return null|string The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.\n *                     Null if the URL does not belong to the current site.\n */\nfunction wp_filter_pre_oembed_result( $result, $url, $args ) {\n\t$post_id = url_to_postid( $url );\n\n\t/** This filter is documented in wp-includes/class-wp-oembed-controller.php */\n\t$post_id = apply_filters( 'oembed_request_post_id', $post_id, $url );\n\n\tif ( ! $post_id ) {\n\t\treturn $result;\n\t}\n\n\t$width = isset( $args['width'] ) ? $args['width'] : 0;\n\n\t$data = get_oembed_response_data( $post_id, $width );\n\t$data = _wp_oembed_get_object()->data2html( (object) $data, $url );\n\n\tif ( ! $data ) {\n\t\treturn $result;\n\t}\n\n\treturn $data;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40160';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/embed.php", "wp-includes/version.php"], "buggy_code_start_loc": [229, 7], "buggy_code_end_loc": [230, 8], "fixing_code_start_loc": [229, 7], "fixing_code_end_loc": [230, 8], "type": "CWE-79", "message": "In WordPress before 4.7.3 (wp-includes/embed.php), there is authenticated Cross-Site Scripting (XSS) in YouTube URL Embeds.", "other": {"cve": {"id": "CVE-2017-6817", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-12T01:59:00.287", "lastModified": "2019-03-19T12:26:10.683", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.3 (wp-includes/embed.php), there is authenticated Cross-Site Scripting (XSS) in YouTube URL Embeds."}, {"lang": "es", "value": "En WordPress en versiones anteriores a 4.7.3 (wp-includes/embed.php), hay secuencias de comandos en sitios cruzados (XSS) autenticada en URLs incrustadas de YouTube ."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.2", "matchCriteriaId": "5A557EFF-02E2-499A-AA55-15F43DB9D820"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3815", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96601", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037959", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/419c8d97ce8df7d5004ee0b566bc5e095f0a6ca8", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8768", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/419c8d97ce8df7d5004ee0b566bc5e095f0a6ca8"}}