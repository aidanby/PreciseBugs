{"buggy_code": ["package io.onedev.server;\r\n\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.AnnotatedElement;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.ForkJoinTask;\r\nimport java.util.concurrent.Future;\r\nimport java.util.concurrent.RejectedExecutionException;\r\nimport java.util.concurrent.SynchronousQueue;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\n\r\nimport javax.inject.Singleton;\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.EntityManagerFactory;\r\nimport javax.persistence.EntityNotFoundException;\r\nimport javax.persistence.OneToMany;\r\nimport javax.persistence.Transient;\r\nimport javax.persistence.Version;\r\nimport javax.validation.Configuration;\r\nimport javax.validation.Validation;\r\nimport javax.validation.Validator;\r\nimport javax.validation.ValidatorFactory;\r\n\r\nimport org.apache.shiro.authc.credential.PasswordService;\r\nimport org.apache.shiro.authz.UnauthorizedException;\r\nimport org.apache.shiro.guice.aop.ShiroAopModule;\r\nimport org.apache.shiro.mgt.RememberMeManager;\r\nimport org.apache.shiro.realm.Realm;\r\nimport org.apache.shiro.web.filter.mgt.FilterChainManager;\r\nimport org.apache.shiro.web.filter.mgt.FilterChainResolver;\r\nimport org.apache.shiro.web.mgt.WebSecurityManager;\r\nimport org.apache.shiro.web.servlet.ShiroFilter;\r\nimport org.apache.wicket.Application;\r\nimport org.apache.wicket.core.request.mapper.StalePageException;\r\nimport org.apache.wicket.protocol.http.PageExpiredException;\r\nimport org.apache.wicket.protocol.http.WebApplication;\r\nimport org.apache.wicket.protocol.http.WicketFilter;\r\nimport org.apache.wicket.protocol.http.WicketServlet;\r\nimport org.eclipse.jetty.servlet.ServletContextHandler;\r\nimport org.eclipse.jetty.websocket.api.WebSocketPolicy;\r\nimport org.glassfish.jersey.server.ResourceConfig;\r\nimport org.glassfish.jersey.servlet.ServletContainer;\r\nimport org.hibernate.CallbackException;\r\nimport org.hibernate.Interceptor;\r\nimport org.hibernate.ObjectNotFoundException;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.StaleStateException;\r\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategy;\r\nimport org.hibernate.collection.internal.PersistentBag;\r\nimport org.hibernate.exception.ConstraintViolationException;\r\nimport org.hibernate.type.Type;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.collect.Sets;\r\nimport com.google.inject.Provider;\r\nimport com.google.inject.matcher.AbstractMatcher;\r\nimport com.google.inject.matcher.Matchers;\r\nimport com.thoughtworks.xstream.XStream;\r\nimport com.thoughtworks.xstream.annotations.XStreamOmitField;\r\nimport com.thoughtworks.xstream.converters.basic.NullConverter;\r\nimport com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\r\nimport com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\r\nimport com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\r\nimport com.thoughtworks.xstream.core.JVM;\r\nimport com.thoughtworks.xstream.mapper.MapperWrapper;\r\nimport com.vladsch.flexmark.Extension;\r\n\r\nimport io.onedev.commons.launcher.bootstrap.Bootstrap;\r\nimport io.onedev.commons.launcher.loader.AbstractPlugin;\r\nimport io.onedev.commons.launcher.loader.AbstractPluginModule;\r\nimport io.onedev.commons.launcher.loader.ImplementationProvider;\r\nimport io.onedev.commons.utils.ExceptionUtils;\r\nimport io.onedev.commons.utils.StringUtils;\r\nimport io.onedev.server.buildspec.job.DefaultJobManager;\r\nimport io.onedev.server.buildspec.job.JobManager;\r\nimport io.onedev.server.buildspec.job.log.DefaultLogManager;\r\nimport io.onedev.server.buildspec.job.log.LogManager;\r\nimport io.onedev.server.buildspec.job.log.instruction.LogInstruction;\r\nimport io.onedev.server.entitymanager.BuildDependenceManager;\r\nimport io.onedev.server.entitymanager.BuildManager;\r\nimport io.onedev.server.entitymanager.BuildParamManager;\r\nimport io.onedev.server.entitymanager.BuildQuerySettingManager;\r\nimport io.onedev.server.entitymanager.CodeCommentManager;\r\nimport io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\r\nimport io.onedev.server.entitymanager.CodeCommentRelationManager;\r\nimport io.onedev.server.entitymanager.CodeCommentReplyManager;\r\nimport io.onedev.server.entitymanager.CommitQuerySettingManager;\r\nimport io.onedev.server.entitymanager.GroupAuthorizationManager;\r\nimport io.onedev.server.entitymanager.GroupManager;\r\nimport io.onedev.server.entitymanager.IssueChangeManager;\r\nimport io.onedev.server.entitymanager.IssueCommentManager;\r\nimport io.onedev.server.entitymanager.IssueFieldManager;\r\nimport io.onedev.server.entitymanager.IssueManager;\r\nimport io.onedev.server.entitymanager.IssueQuerySettingManager;\r\nimport io.onedev.server.entitymanager.IssueVoteManager;\r\nimport io.onedev.server.entitymanager.IssueWatchManager;\r\nimport io.onedev.server.entitymanager.MembershipManager;\r\nimport io.onedev.server.entitymanager.MilestoneManager;\r\nimport io.onedev.server.entitymanager.ProjectManager;\r\nimport io.onedev.server.entitymanager.PullRequestBuildManager;\r\nimport io.onedev.server.entitymanager.PullRequestChangeManager;\r\nimport io.onedev.server.entitymanager.PullRequestCommentManager;\r\nimport io.onedev.server.entitymanager.PullRequestManager;\r\nimport io.onedev.server.entitymanager.PullRequestQuerySettingManager;\r\nimport io.onedev.server.entitymanager.PullRequestReviewManager;\r\nimport io.onedev.server.entitymanager.PullRequestUpdateManager;\r\nimport io.onedev.server.entitymanager.PullRequestWatchManager;\r\nimport io.onedev.server.entitymanager.RoleManager;\r\nimport io.onedev.server.entitymanager.SettingManager;\r\nimport io.onedev.server.entitymanager.UrlManager;\r\nimport io.onedev.server.entitymanager.UserAuthorizationManager;\r\nimport io.onedev.server.entitymanager.UserManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultGroupManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultMembershipManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultProjectManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultRoleManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultSettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultUserManager;\r\nimport io.onedev.server.git.GitFilter;\r\nimport io.onedev.server.git.GitPostReceiveCallback;\r\nimport io.onedev.server.git.GitPreReceiveCallback;\r\nimport io.onedev.server.git.config.GitConfig;\r\nimport io.onedev.server.infomanager.CodeCommentRelationInfoManager;\r\nimport io.onedev.server.infomanager.CommitInfoManager;\r\nimport io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\r\nimport io.onedev.server.infomanager.DefaultCommitInfoManager;\r\nimport io.onedev.server.infomanager.DefaultUserInfoManager;\r\nimport io.onedev.server.infomanager.UserInfoManager;\r\nimport io.onedev.server.maintenance.ApplyDatabaseConstraints;\r\nimport io.onedev.server.maintenance.BackupDatabase;\r\nimport io.onedev.server.maintenance.CheckDataVersion;\r\nimport io.onedev.server.maintenance.CleanDatabase;\r\nimport io.onedev.server.maintenance.DataManager;\r\nimport io.onedev.server.maintenance.DefaultDataManager;\r\nimport io.onedev.server.maintenance.ResetAdminPassword;\r\nimport io.onedev.server.maintenance.RestoreDatabase;\r\nimport io.onedev.server.maintenance.Upgrade;\r\nimport io.onedev.server.model.support.administration.GroovyScript;\r\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\r\nimport io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\r\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\r\nimport io.onedev.server.notification.BuildNotificationManager;\r\nimport io.onedev.server.notification.CodeCommentNotificationManager;\r\nimport io.onedev.server.notification.CommitNotificationManager;\r\nimport io.onedev.server.notification.DefaultMailManager;\r\nimport io.onedev.server.notification.IssueNotificationManager;\r\nimport io.onedev.server.notification.MailManager;\r\nimport io.onedev.server.notification.PullRequestNotificationManager;\r\nimport io.onedev.server.notification.WebHookManager;\r\nimport io.onedev.server.persistence.DefaultIdManager;\r\nimport io.onedev.server.persistence.DefaultPersistManager;\r\nimport io.onedev.server.persistence.DefaultSessionManager;\r\nimport io.onedev.server.persistence.DefaultTransactionManager;\r\nimport io.onedev.server.persistence.HibernateInterceptor;\r\nimport io.onedev.server.persistence.IdManager;\r\nimport io.onedev.server.persistence.PersistListener;\r\nimport io.onedev.server.persistence.PersistManager;\r\nimport io.onedev.server.persistence.PrefixedNamingStrategy;\r\nimport io.onedev.server.persistence.SessionFactoryProvider;\r\nimport io.onedev.server.persistence.SessionInterceptor;\r\nimport io.onedev.server.persistence.SessionManager;\r\nimport io.onedev.server.persistence.SessionProvider;\r\nimport io.onedev.server.persistence.TransactionInterceptor;\r\nimport io.onedev.server.persistence.TransactionManager;\r\nimport io.onedev.server.persistence.annotation.Sessional;\r\nimport io.onedev.server.persistence.annotation.Transactional;\r\nimport io.onedev.server.persistence.dao.Dao;\r\nimport io.onedev.server.persistence.dao.DefaultDao;\r\nimport io.onedev.server.rest.RestConstants;\r\nimport io.onedev.server.rest.jersey.DefaultServletContainer;\r\nimport io.onedev.server.rest.jersey.JerseyConfigurator;\r\nimport io.onedev.server.rest.jersey.ResourceConfigProvider;\r\nimport io.onedev.server.search.code.DefaultIndexManager;\r\nimport io.onedev.server.search.code.DefaultSearchManager;\r\nimport io.onedev.server.search.code.IndexManager;\r\nimport io.onedev.server.search.code.SearchManager;\r\nimport io.onedev.server.security.BasicAuthenticationFilter;\r\nimport io.onedev.server.security.CodePullAuthorizationSource;\r\nimport io.onedev.server.security.FilterChainConfigurator;\r\nimport io.onedev.server.security.OneAuthorizingRealm;\r\nimport io.onedev.server.security.OneFilterChainResolver;\r\nimport io.onedev.server.security.OnePasswordService;\r\nimport io.onedev.server.security.OneRememberMeManager;\r\nimport io.onedev.server.security.OneWebSecurityManager;\r\nimport io.onedev.server.storage.AttachmentStorageManager;\r\nimport io.onedev.server.storage.DefaultAttachmentStorageManager;\r\nimport io.onedev.server.storage.DefaultStorageManager;\r\nimport io.onedev.server.storage.StorageManager;\r\nimport io.onedev.server.util.SecurityUtils;\r\nimport io.onedev.server.util.jackson.ObjectMapperConfigurator;\r\nimport io.onedev.server.util.jackson.ObjectMapperProvider;\r\nimport io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\r\nimport io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\r\nimport io.onedev.server.util.jetty.DefaultJettyRunner;\r\nimport io.onedev.server.util.jetty.JettyRunner;\r\nimport io.onedev.server.util.markdown.DefaultMarkdownManager;\r\nimport io.onedev.server.util.markdown.EntityReferenceManager;\r\nimport io.onedev.server.util.markdown.MarkdownManager;\r\nimport io.onedev.server.util.markdown.MarkdownProcessor;\r\nimport io.onedev.server.util.schedule.DefaultTaskScheduler;\r\nimport io.onedev.server.util.schedule.TaskScheduler;\r\nimport io.onedev.server.util.script.ScriptContribution;\r\nimport io.onedev.server.util.validation.DefaultEntityValidator;\r\nimport io.onedev.server.util.validation.EntityValidator;\r\nimport io.onedev.server.util.validation.ValidatorProvider;\r\nimport io.onedev.server.util.work.BatchWorkManager;\r\nimport io.onedev.server.util.work.DefaultBatchWorkManager;\r\nimport io.onedev.server.util.work.DefaultWorkExecutor;\r\nimport io.onedev.server.util.work.WorkExecutor;\r\nimport io.onedev.server.util.xstream.CollectionConverter;\r\nimport io.onedev.server.util.xstream.HibernateProxyConverter;\r\nimport io.onedev.server.util.xstream.MapConverter;\r\nimport io.onedev.server.util.xstream.ReflectionConverter;\r\nimport io.onedev.server.util.xstream.StringConverter;\r\nimport io.onedev.server.util.xstream.VersionedDocumentConverter;\r\nimport io.onedev.server.web.DefaultUrlManager;\r\nimport io.onedev.server.web.DefaultWicketFilter;\r\nimport io.onedev.server.web.DefaultWicketServlet;\r\nimport io.onedev.server.web.ExpectedExceptionContribution;\r\nimport io.onedev.server.web.OneWebApplication;\r\nimport io.onedev.server.web.ResourcePackScopeContribution;\r\nimport io.onedev.server.web.WebApplicationConfigurator;\r\nimport io.onedev.server.web.avatar.AvatarManager;\r\nimport io.onedev.server.web.avatar.DefaultAvatarManager;\r\nimport io.onedev.server.web.component.diff.DiffRenderer;\r\nimport io.onedev.server.web.component.markdown.AttachmentUploadServlet;\r\nimport io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\r\nimport io.onedev.server.web.component.markdown.emoji.EmojiExtension;\r\nimport io.onedev.server.web.component.taskbutton.TaskButton;\r\nimport io.onedev.server.web.editable.DefaultEditSupportRegistry;\r\nimport io.onedev.server.web.editable.EditSupport;\r\nimport io.onedev.server.web.editable.EditSupportLocator;\r\nimport io.onedev.server.web.editable.EditSupportRegistry;\r\nimport io.onedev.server.web.mapper.OnePageMapper;\r\nimport io.onedev.server.web.page.DashboardPage;\r\nimport io.onedev.server.web.page.base.BasePage;\r\nimport io.onedev.server.web.page.layout.BuildListTab;\r\nimport io.onedev.server.web.page.layout.IssueListTab;\r\nimport io.onedev.server.web.page.layout.MainTab;\r\nimport io.onedev.server.web.page.layout.ProjectListTab;\r\nimport io.onedev.server.web.page.layout.PullRequestListTab;\r\nimport io.onedev.server.web.page.layout.UICustomization;\r\nimport io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\r\nimport io.onedev.server.web.page.test.TestPage;\r\nimport io.onedev.server.web.websocket.BuildEventBroadcaster;\r\nimport io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\r\nimport io.onedev.server.web.websocket.CommitIndexedBroadcaster;\r\nimport io.onedev.server.web.websocket.DefaultWebSocketManager;\r\nimport io.onedev.server.web.websocket.IssueEventBroadcaster;\r\nimport io.onedev.server.web.websocket.PullRequestEventBroadcaster;\r\nimport io.onedev.server.web.websocket.WebSocketManager;\r\nimport io.onedev.server.web.websocket.WebSocketPolicyProvider;\r\n\r\n/**\r\n * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\r\n *\r\n */\r\npublic class CoreModule extends AbstractPluginModule {\r\n\r\n\t@Override\r\n\tprotected void configure() {\r\n\t\tsuper.configure();\r\n\t\t\r\n\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\r\n\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\r\n\t\t\r\n\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\r\n\t\t\r\n\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ValidatorFactory get() {\r\n\t\t\t\tConfiguration<?> configuration = Validation.byDefaultProvider().configure();\r\n\t\t\t\treturn configuration.buildValidatorFactory();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}).in(Singleton.class);\r\n\t\t\r\n\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\r\n\r\n\t\t// configure markdown\r\n\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\r\n\t\t\r\n\t\tconfigurePersistence();\r\n\t\tconfigureRestServices();\r\n\t\tconfigureWeb();\r\n\t\tconfigureBuild();\r\n\t\t\r\n\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\r\n\r\n\t\t/*\r\n\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\r\n\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \r\n\t\t */\r\n\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\r\n\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\r\n\t\tbind(DataManager.class).to(DefaultDataManager.class);\r\n\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\r\n\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\r\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\r\n\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\r\n\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\r\n\t\tbind(UserManager.class).to(DefaultUserManager.class);\r\n\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\r\n\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\r\n\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\r\n\t\tbind(JobManager.class).to(DefaultJobManager.class);\r\n\t\tbind(LogManager.class).to(DefaultLogManager.class);\r\n\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\r\n\t\tbind(MailManager.class).to(DefaultMailManager.class);\r\n\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\r\n\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\r\n\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\r\n\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\r\n\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\r\n\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\r\n\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\r\n\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\r\n\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\r\n\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\r\n\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\r\n\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\r\n\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\r\n\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\r\n\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\r\n\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\r\n\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\r\n\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\r\n\t\tbind(PullRequestNotificationManager.class);\r\n\t\tbind(CommitNotificationManager.class);\r\n\t\tbind(BuildNotificationManager.class);\r\n\t\tbind(IssueNotificationManager.class);\r\n\t\tbind(EntityReferenceManager.class);\r\n\t\tbind(CodeCommentNotificationManager.class);\r\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\r\n\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\r\n\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\r\n\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\r\n\t\tbind(Session.class).toProvider(SessionProvider.class);\r\n\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\r\n\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\r\n\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\r\n\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\r\n\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\r\n\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\r\n\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\r\n\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\r\n\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\r\n\t\tbind(WebHookManager.class);\r\n\r\n\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\r\n\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\r\n\t    \r\n\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\r\n\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\r\n\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\r\n\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\r\n\t\tbind(BasicAuthenticationFilter.class);\r\n\t\tbind(PasswordService.class).to(OnePasswordService.class);\r\n\t\tbind(ShiroFilter.class);\r\n\t\tinstall(new ShiroAopModule());\r\n        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n\r\n            @Override\r\n            public void configure(FilterChainManager filterChainManager) {\r\n                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\r\n                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\r\n                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\r\n            }\r\n            \r\n        });\r\n        contributeFromPackage(Authenticator.class, Authenticator.class);\r\n        \r\n\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Class<?> getAbstractClass() {\r\n\t\t\t\treturn JobExecutor.class;\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<?>> getImplementations() {\r\n\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\r\n        \r\n\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\r\n\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\r\n\t\t\r\n\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\r\n\t\t\r\n\t\tbind(GitFilter.class);\r\n\t\tbind(GitPreReceiveCallback.class);\r\n\t\tbind(GitPostReceiveCallback.class);\r\n\t\t\r\n\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ExecutorService get() {\r\n\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \r\n\t\t        \t\tnew SynchronousQueue<Runnable>()) {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void execute(Runnable command) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\r\n\t\t\t\t\t\t} catch (RejectedExecutionException e) {\r\n\t\t\t\t\t\t\tif (!isShutdown())\r\n\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t        };\r\n\t\t\t}\r\n\t    \t\r\n\t    }).in(Singleton.class);\r\n\t    \r\n\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void execute(Runnable task) {\r\n\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\r\n\t\t\t\t\tthrows InterruptedException, ExecutionException {\r\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\r\n\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\r\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \r\n\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\r\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\r\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\r\n\t\t\t}\r\n\r\n\t    });\r\n\t}\r\n\t\r\n\tprivate void configureRestServices() {\r\n\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\r\n\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\r\n\t\t\r\n\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(FilterChainManager filterChainManager) {\r\n\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(ResourceConfig resourceConfig) {\r\n\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\r\n\tprivate void configureWeb() {\r\n\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\r\n\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\r\n\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\r\n\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\r\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n\r\n\t\tbind(AttachmentUploadServlet.class);\r\n\t\t\r\n\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\r\n\t\t\r\n\t\tbind(WebApplication.class).to(OneWebApplication.class);\r\n\t\tbind(Application.class).to(OneWebApplication.class);\r\n\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\r\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n\t\t\r\n\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\r\n\t\t\r\n\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(WebApplication application) {\r\n\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tbind(CommitIndexedBroadcaster.class);\r\n\t\t\r\n\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\r\n\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\r\n\r\n\t\tcontribute(Extension.class, new EmojiExtension());\r\n\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\r\n\t\t\r\n\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\r\n\r\n\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\r\n\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\r\n\t\t\t\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\r\n\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \r\n\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \r\n\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\r\n\t\tbind(CodeCommentEventBroadcaster.class);\r\n\t\tbind(PullRequestEventBroadcaster.class);\r\n\t\tbind(IssueEventBroadcaster.class);\r\n\t\tbind(BuildEventBroadcaster.class);\r\n\t\t\r\n\t\tbind(TaskButton.TaskFutureManager.class);\r\n\t\t\r\n\t\tbind(UICustomization.class).toInstance(new UICustomization() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic Class<? extends BasePage> getHomePage() {\r\n\t\t\t\treturn DashboardPage.class;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic List<MainTab> getMainTabs() {\r\n\t\t\t\treturn Lists.newArrayList(\r\n\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \r\n\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\t\r\n\tprivate void configureBuild() {\r\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic GroovyScript getScript() {\r\n\t\t\t\tGroovyScript script = new GroovyScript();\r\n\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\r\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\r\n\t\t\t\treturn script;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic GroovyScript getScript() {\r\n\t\t\t\tGroovyScript script = new GroovyScript();\r\n\t\t\t\tscript.setName(\"get-build-number\");\r\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\r\n\t\t\t\treturn script;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\t\r\n\tprivate void configurePersistence() {\r\n\t\t// Use an optional binding here in case our client does not like to \r\n\t\t// start persist service provided by this plugin\r\n\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\r\n\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\r\n\t\t\r\n\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\r\n\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\r\n\t\tbind(IdManager.class).to(DefaultIdManager.class);\r\n\t\tbind(Dao.class).to(DefaultDao.class);\r\n\t\t\r\n\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\r\n\t    requestInjection(transactionInterceptor);\r\n\t    \r\n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\r\n\t\t\t}\r\n\t    \t\r\n\t    }, transactionInterceptor);\r\n\t    \r\n\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\r\n\t    requestInjection(sessionInterceptor);\r\n\t    \r\n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\r\n\t\t\t}\r\n\t    \t\r\n\t    }, sessionInterceptor);\r\n\t    \r\n\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\r\n\t    \r\n\t    contribute(PersistListener.class, new PersistListener() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\r\n\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t    \r\n\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\r\n\r\n\t\t\t@SuppressWarnings(\"rawtypes\")\r\n\t\t\t@Override\r\n\t\t\tpublic XStream get() {\r\n\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\r\n\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\r\n\t\t\t\t\t\treturn new MapperWrapper(next) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\r\n\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\r\n\t\t\t\t\t\t\t\tif (type == null)\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\r\n\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\r\n\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t};\r\n\t\t\t\tXStream.setupDefaultSecurity(xstream);\r\n\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \r\n\t\t\t\t// containing an entry with value set to null.\r\n\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \r\n\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \r\n\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\r\n\t\t\t\txstream.autodetectAnnotations(true);\r\n\t\t\t\treturn xstream;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}).in(Singleton.class);\r\n\t\t\r\n\t\tif (Bootstrap.command != null) {\r\n\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\r\n\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\r\n\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\r\n\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\r\n\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\r\n\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\r\n\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\r\n\t\t\telse\t\r\n\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\r\n\t\t} else {\r\n\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected Class<? extends AbstractPlugin> getPluginClass() {\r\n\t\treturn OneDev.class;\r\n\t}\r\n\r\n}\r\n"], "fixing_code": ["package io.onedev.server;\r\n\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.AnnotatedElement;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.ForkJoinTask;\r\nimport java.util.concurrent.Future;\r\nimport java.util.concurrent.RejectedExecutionException;\r\nimport java.util.concurrent.SynchronousQueue;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\n\r\nimport javax.inject.Singleton;\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.EntityManagerFactory;\r\nimport javax.persistence.EntityNotFoundException;\r\nimport javax.persistence.OneToMany;\r\nimport javax.persistence.Transient;\r\nimport javax.persistence.Version;\r\nimport javax.validation.Configuration;\r\nimport javax.validation.Validation;\r\nimport javax.validation.Validator;\r\nimport javax.validation.ValidatorFactory;\r\n\r\nimport org.apache.shiro.authc.credential.PasswordService;\r\nimport org.apache.shiro.authz.UnauthorizedException;\r\nimport org.apache.shiro.guice.aop.ShiroAopModule;\r\nimport org.apache.shiro.mgt.RememberMeManager;\r\nimport org.apache.shiro.realm.Realm;\r\nimport org.apache.shiro.web.filter.mgt.FilterChainManager;\r\nimport org.apache.shiro.web.filter.mgt.FilterChainResolver;\r\nimport org.apache.shiro.web.mgt.WebSecurityManager;\r\nimport org.apache.shiro.web.servlet.ShiroFilter;\r\nimport org.apache.wicket.Application;\r\nimport org.apache.wicket.core.request.mapper.StalePageException;\r\nimport org.apache.wicket.protocol.http.PageExpiredException;\r\nimport org.apache.wicket.protocol.http.WebApplication;\r\nimport org.apache.wicket.protocol.http.WicketFilter;\r\nimport org.apache.wicket.protocol.http.WicketServlet;\r\nimport org.eclipse.jetty.servlet.ServletContextHandler;\r\nimport org.eclipse.jetty.websocket.api.WebSocketPolicy;\r\nimport org.glassfish.jersey.server.ResourceConfig;\r\nimport org.glassfish.jersey.servlet.ServletContainer;\r\nimport org.hibernate.CallbackException;\r\nimport org.hibernate.Interceptor;\r\nimport org.hibernate.ObjectNotFoundException;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.StaleStateException;\r\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategy;\r\nimport org.hibernate.collection.internal.PersistentBag;\r\nimport org.hibernate.exception.ConstraintViolationException;\r\nimport org.hibernate.type.Type;\r\nimport org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.collect.Sets;\r\nimport com.google.inject.Provider;\r\nimport com.google.inject.matcher.AbstractMatcher;\r\nimport com.google.inject.matcher.Matchers;\r\nimport com.thoughtworks.xstream.XStream;\r\nimport com.thoughtworks.xstream.annotations.XStreamOmitField;\r\nimport com.thoughtworks.xstream.converters.basic.NullConverter;\r\nimport com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\r\nimport com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\r\nimport com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\r\nimport com.thoughtworks.xstream.core.JVM;\r\nimport com.thoughtworks.xstream.mapper.MapperWrapper;\r\nimport com.vladsch.flexmark.Extension;\r\n\r\nimport io.onedev.commons.launcher.bootstrap.Bootstrap;\r\nimport io.onedev.commons.launcher.loader.AbstractPlugin;\r\nimport io.onedev.commons.launcher.loader.AbstractPluginModule;\r\nimport io.onedev.commons.launcher.loader.ImplementationProvider;\r\nimport io.onedev.commons.utils.ExceptionUtils;\r\nimport io.onedev.commons.utils.StringUtils;\r\nimport io.onedev.server.buildspec.job.DefaultJobManager;\r\nimport io.onedev.server.buildspec.job.JobManager;\r\nimport io.onedev.server.buildspec.job.log.DefaultLogManager;\r\nimport io.onedev.server.buildspec.job.log.LogManager;\r\nimport io.onedev.server.buildspec.job.log.instruction.LogInstruction;\r\nimport io.onedev.server.entitymanager.BuildDependenceManager;\r\nimport io.onedev.server.entitymanager.BuildManager;\r\nimport io.onedev.server.entitymanager.BuildParamManager;\r\nimport io.onedev.server.entitymanager.BuildQuerySettingManager;\r\nimport io.onedev.server.entitymanager.CodeCommentManager;\r\nimport io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\r\nimport io.onedev.server.entitymanager.CodeCommentRelationManager;\r\nimport io.onedev.server.entitymanager.CodeCommentReplyManager;\r\nimport io.onedev.server.entitymanager.CommitQuerySettingManager;\r\nimport io.onedev.server.entitymanager.GroupAuthorizationManager;\r\nimport io.onedev.server.entitymanager.GroupManager;\r\nimport io.onedev.server.entitymanager.IssueChangeManager;\r\nimport io.onedev.server.entitymanager.IssueCommentManager;\r\nimport io.onedev.server.entitymanager.IssueFieldManager;\r\nimport io.onedev.server.entitymanager.IssueManager;\r\nimport io.onedev.server.entitymanager.IssueQuerySettingManager;\r\nimport io.onedev.server.entitymanager.IssueVoteManager;\r\nimport io.onedev.server.entitymanager.IssueWatchManager;\r\nimport io.onedev.server.entitymanager.MembershipManager;\r\nimport io.onedev.server.entitymanager.MilestoneManager;\r\nimport io.onedev.server.entitymanager.ProjectManager;\r\nimport io.onedev.server.entitymanager.PullRequestBuildManager;\r\nimport io.onedev.server.entitymanager.PullRequestChangeManager;\r\nimport io.onedev.server.entitymanager.PullRequestCommentManager;\r\nimport io.onedev.server.entitymanager.PullRequestManager;\r\nimport io.onedev.server.entitymanager.PullRequestQuerySettingManager;\r\nimport io.onedev.server.entitymanager.PullRequestReviewManager;\r\nimport io.onedev.server.entitymanager.PullRequestUpdateManager;\r\nimport io.onedev.server.entitymanager.PullRequestWatchManager;\r\nimport io.onedev.server.entitymanager.RoleManager;\r\nimport io.onedev.server.entitymanager.SettingManager;\r\nimport io.onedev.server.entitymanager.UrlManager;\r\nimport io.onedev.server.entitymanager.UserAuthorizationManager;\r\nimport io.onedev.server.entitymanager.UserManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultGroupManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultMembershipManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultProjectManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultRoleManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultSettingManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\r\nimport io.onedev.server.entitymanager.impl.DefaultUserManager;\r\nimport io.onedev.server.git.GitFilter;\r\nimport io.onedev.server.git.GitPostReceiveCallback;\r\nimport io.onedev.server.git.GitPreReceiveCallback;\r\nimport io.onedev.server.git.config.GitConfig;\r\nimport io.onedev.server.infomanager.CodeCommentRelationInfoManager;\r\nimport io.onedev.server.infomanager.CommitInfoManager;\r\nimport io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\r\nimport io.onedev.server.infomanager.DefaultCommitInfoManager;\r\nimport io.onedev.server.infomanager.DefaultUserInfoManager;\r\nimport io.onedev.server.infomanager.UserInfoManager;\r\nimport io.onedev.server.maintenance.ApplyDatabaseConstraints;\r\nimport io.onedev.server.maintenance.BackupDatabase;\r\nimport io.onedev.server.maintenance.CheckDataVersion;\r\nimport io.onedev.server.maintenance.CleanDatabase;\r\nimport io.onedev.server.maintenance.DataManager;\r\nimport io.onedev.server.maintenance.DefaultDataManager;\r\nimport io.onedev.server.maintenance.ResetAdminPassword;\r\nimport io.onedev.server.maintenance.RestoreDatabase;\r\nimport io.onedev.server.maintenance.Upgrade;\r\nimport io.onedev.server.model.support.administration.GroovyScript;\r\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\r\nimport io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\r\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\r\nimport io.onedev.server.notification.BuildNotificationManager;\r\nimport io.onedev.server.notification.CodeCommentNotificationManager;\r\nimport io.onedev.server.notification.CommitNotificationManager;\r\nimport io.onedev.server.notification.DefaultMailManager;\r\nimport io.onedev.server.notification.IssueNotificationManager;\r\nimport io.onedev.server.notification.MailManager;\r\nimport io.onedev.server.notification.PullRequestNotificationManager;\r\nimport io.onedev.server.notification.WebHookManager;\r\nimport io.onedev.server.persistence.DefaultIdManager;\r\nimport io.onedev.server.persistence.DefaultPersistManager;\r\nimport io.onedev.server.persistence.DefaultSessionManager;\r\nimport io.onedev.server.persistence.DefaultTransactionManager;\r\nimport io.onedev.server.persistence.HibernateInterceptor;\r\nimport io.onedev.server.persistence.IdManager;\r\nimport io.onedev.server.persistence.PersistListener;\r\nimport io.onedev.server.persistence.PersistManager;\r\nimport io.onedev.server.persistence.PrefixedNamingStrategy;\r\nimport io.onedev.server.persistence.SessionFactoryProvider;\r\nimport io.onedev.server.persistence.SessionInterceptor;\r\nimport io.onedev.server.persistence.SessionManager;\r\nimport io.onedev.server.persistence.SessionProvider;\r\nimport io.onedev.server.persistence.TransactionInterceptor;\r\nimport io.onedev.server.persistence.TransactionManager;\r\nimport io.onedev.server.persistence.annotation.Sessional;\r\nimport io.onedev.server.persistence.annotation.Transactional;\r\nimport io.onedev.server.persistence.dao.Dao;\r\nimport io.onedev.server.persistence.dao.DefaultDao;\r\nimport io.onedev.server.rest.RestConstants;\r\nimport io.onedev.server.rest.jersey.DefaultServletContainer;\r\nimport io.onedev.server.rest.jersey.JerseyConfigurator;\r\nimport io.onedev.server.rest.jersey.ResourceConfigProvider;\r\nimport io.onedev.server.search.code.DefaultIndexManager;\r\nimport io.onedev.server.search.code.DefaultSearchManager;\r\nimport io.onedev.server.search.code.IndexManager;\r\nimport io.onedev.server.search.code.SearchManager;\r\nimport io.onedev.server.security.BasicAuthenticationFilter;\r\nimport io.onedev.server.security.CodePullAuthorizationSource;\r\nimport io.onedev.server.security.FilterChainConfigurator;\r\nimport io.onedev.server.security.OneAuthorizingRealm;\r\nimport io.onedev.server.security.OneFilterChainResolver;\r\nimport io.onedev.server.security.OnePasswordService;\r\nimport io.onedev.server.security.OneRememberMeManager;\r\nimport io.onedev.server.security.OneWebSecurityManager;\r\nimport io.onedev.server.storage.AttachmentStorageManager;\r\nimport io.onedev.server.storage.DefaultAttachmentStorageManager;\r\nimport io.onedev.server.storage.DefaultStorageManager;\r\nimport io.onedev.server.storage.StorageManager;\r\nimport io.onedev.server.util.SecurityUtils;\r\nimport io.onedev.server.util.jackson.ObjectMapperConfigurator;\r\nimport io.onedev.server.util.jackson.ObjectMapperProvider;\r\nimport io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\r\nimport io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\r\nimport io.onedev.server.util.jetty.DefaultJettyRunner;\r\nimport io.onedev.server.util.jetty.JettyRunner;\r\nimport io.onedev.server.util.markdown.DefaultMarkdownManager;\r\nimport io.onedev.server.util.markdown.EntityReferenceManager;\r\nimport io.onedev.server.util.markdown.MarkdownManager;\r\nimport io.onedev.server.util.markdown.MarkdownProcessor;\r\nimport io.onedev.server.util.schedule.DefaultTaskScheduler;\r\nimport io.onedev.server.util.schedule.TaskScheduler;\r\nimport io.onedev.server.util.script.ScriptContribution;\r\nimport io.onedev.server.util.validation.DefaultEntityValidator;\r\nimport io.onedev.server.util.validation.EntityValidator;\r\nimport io.onedev.server.util.validation.ValidatorProvider;\r\nimport io.onedev.server.util.work.BatchWorkManager;\r\nimport io.onedev.server.util.work.DefaultBatchWorkManager;\r\nimport io.onedev.server.util.work.DefaultWorkExecutor;\r\nimport io.onedev.server.util.work.WorkExecutor;\r\nimport io.onedev.server.util.xstream.CollectionConverter;\r\nimport io.onedev.server.util.xstream.HibernateProxyConverter;\r\nimport io.onedev.server.util.xstream.MapConverter;\r\nimport io.onedev.server.util.xstream.ReflectionConverter;\r\nimport io.onedev.server.util.xstream.StringConverter;\r\nimport io.onedev.server.util.xstream.VersionedDocumentConverter;\r\nimport io.onedev.server.web.DefaultUrlManager;\r\nimport io.onedev.server.web.DefaultWicketFilter;\r\nimport io.onedev.server.web.DefaultWicketServlet;\r\nimport io.onedev.server.web.ExpectedExceptionContribution;\r\nimport io.onedev.server.web.OneWebApplication;\r\nimport io.onedev.server.web.ResourcePackScopeContribution;\r\nimport io.onedev.server.web.WebApplicationConfigurator;\r\nimport io.onedev.server.web.avatar.AvatarManager;\r\nimport io.onedev.server.web.avatar.DefaultAvatarManager;\r\nimport io.onedev.server.web.component.diff.DiffRenderer;\r\nimport io.onedev.server.web.component.markdown.AttachmentUploadServlet;\r\nimport io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\r\nimport io.onedev.server.web.component.markdown.emoji.EmojiExtension;\r\nimport io.onedev.server.web.component.taskbutton.TaskButton;\r\nimport io.onedev.server.web.editable.DefaultEditSupportRegistry;\r\nimport io.onedev.server.web.editable.EditSupport;\r\nimport io.onedev.server.web.editable.EditSupportLocator;\r\nimport io.onedev.server.web.editable.EditSupportRegistry;\r\nimport io.onedev.server.web.mapper.OnePageMapper;\r\nimport io.onedev.server.web.page.DashboardPage;\r\nimport io.onedev.server.web.page.base.BasePage;\r\nimport io.onedev.server.web.page.layout.BuildListTab;\r\nimport io.onedev.server.web.page.layout.IssueListTab;\r\nimport io.onedev.server.web.page.layout.MainTab;\r\nimport io.onedev.server.web.page.layout.ProjectListTab;\r\nimport io.onedev.server.web.page.layout.PullRequestListTab;\r\nimport io.onedev.server.web.page.layout.UICustomization;\r\nimport io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\r\nimport io.onedev.server.web.page.test.TestPage;\r\nimport io.onedev.server.web.websocket.BuildEventBroadcaster;\r\nimport io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\r\nimport io.onedev.server.web.websocket.CommitIndexedBroadcaster;\r\nimport io.onedev.server.web.websocket.DefaultWebSocketManager;\r\nimport io.onedev.server.web.websocket.IssueEventBroadcaster;\r\nimport io.onedev.server.web.websocket.PullRequestEventBroadcaster;\r\nimport io.onedev.server.web.websocket.WebSocketManager;\r\nimport io.onedev.server.web.websocket.WebSocketPolicyProvider;\r\n\r\n/**\r\n * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\r\n *\r\n */\r\npublic class CoreModule extends AbstractPluginModule {\r\n\r\n\t@Override\r\n\tprotected void configure() {\r\n\t\tsuper.configure();\r\n\t\t\r\n\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\r\n\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\r\n\t\t\r\n\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\r\n\t\t\r\n\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ValidatorFactory get() {\r\n\t\t\t\tConfiguration<?> configuration = Validation\r\n\t\t\t\t\t\t.byDefaultProvider()\r\n\t\t\t\t\t\t.configure()\r\n\t\t\t\t\t\t.messageInterpolator(new ParameterMessageInterpolator());\r\n\t\t\t\treturn configuration.buildValidatorFactory();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}).in(Singleton.class);\r\n\t\t\r\n\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\r\n\r\n\t\t// configure markdown\r\n\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\r\n\t\t\r\n\t\tconfigurePersistence();\r\n\t\tconfigureRestServices();\r\n\t\tconfigureWeb();\r\n\t\tconfigureBuild();\r\n\t\t\r\n\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\r\n\r\n\t\t/*\r\n\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\r\n\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \r\n\t\t */\r\n\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\r\n\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\r\n\t\tbind(DataManager.class).to(DefaultDataManager.class);\r\n\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\r\n\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\r\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\r\n\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\r\n\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\r\n\t\tbind(UserManager.class).to(DefaultUserManager.class);\r\n\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\r\n\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\r\n\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\r\n\t\tbind(JobManager.class).to(DefaultJobManager.class);\r\n\t\tbind(LogManager.class).to(DefaultLogManager.class);\r\n\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\r\n\t\tbind(MailManager.class).to(DefaultMailManager.class);\r\n\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\r\n\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\r\n\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\r\n\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\r\n\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\r\n\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\r\n\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\r\n\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\r\n\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\r\n\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\r\n\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\r\n\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\r\n\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\r\n\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\r\n\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\r\n\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\r\n\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\r\n\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\r\n\t\tbind(PullRequestNotificationManager.class);\r\n\t\tbind(CommitNotificationManager.class);\r\n\t\tbind(BuildNotificationManager.class);\r\n\t\tbind(IssueNotificationManager.class);\r\n\t\tbind(EntityReferenceManager.class);\r\n\t\tbind(CodeCommentNotificationManager.class);\r\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\r\n\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\r\n\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\r\n\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\r\n\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\r\n\t\tbind(Session.class).toProvider(SessionProvider.class);\r\n\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\r\n\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\r\n\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\r\n\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\r\n\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\r\n\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\r\n\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\r\n\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\r\n\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\r\n\t\tbind(WebHookManager.class);\r\n\r\n\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\r\n\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\r\n\t    \r\n\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\r\n\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\r\n\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\r\n\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\r\n\t\tbind(BasicAuthenticationFilter.class);\r\n\t\tbind(PasswordService.class).to(OnePasswordService.class);\r\n\t\tbind(ShiroFilter.class);\r\n\t\tinstall(new ShiroAopModule());\r\n        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n\r\n            @Override\r\n            public void configure(FilterChainManager filterChainManager) {\r\n                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\r\n                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\r\n                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\r\n            }\r\n            \r\n        });\r\n        contributeFromPackage(Authenticator.class, Authenticator.class);\r\n        \r\n\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Class<?> getAbstractClass() {\r\n\t\t\t\treturn JobExecutor.class;\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<?>> getImplementations() {\r\n\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\r\n        \r\n\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\r\n\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\r\n\t\t\r\n\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\r\n\t\t\r\n\t\tbind(GitFilter.class);\r\n\t\tbind(GitPreReceiveCallback.class);\r\n\t\tbind(GitPostReceiveCallback.class);\r\n\t\t\r\n\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ExecutorService get() {\r\n\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \r\n\t\t        \t\tnew SynchronousQueue<Runnable>()) {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void execute(Runnable command) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\r\n\t\t\t\t\t\t} catch (RejectedExecutionException e) {\r\n\t\t\t\t\t\t\tif (!isShutdown())\r\n\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t        };\r\n\t\t\t}\r\n\t    \t\r\n\t    }).in(Singleton.class);\r\n\t    \r\n\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void execute(Runnable task) {\r\n\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\r\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\r\n\t\t\t\t\tthrows InterruptedException, ExecutionException {\r\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\r\n\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\r\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \r\n\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\r\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\r\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\r\n\t\t\t}\r\n\r\n\t    });\r\n\t}\r\n\t\r\n\tprivate void configureRestServices() {\r\n\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\r\n\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\r\n\t\t\r\n\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(FilterChainManager filterChainManager) {\r\n\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(ResourceConfig resourceConfig) {\r\n\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\r\n\tprivate void configureWeb() {\r\n\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\r\n\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\r\n\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\r\n\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\r\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n\r\n\t\tbind(AttachmentUploadServlet.class);\r\n\t\t\r\n\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\r\n\t\t\r\n\t\tbind(WebApplication.class).to(OneWebApplication.class);\r\n\t\tbind(Application.class).to(OneWebApplication.class);\r\n\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\r\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\r\n\t\t\r\n\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\r\n\t\t\r\n\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void configure(WebApplication application) {\r\n\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tbind(CommitIndexedBroadcaster.class);\r\n\t\t\r\n\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\r\n\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\r\n\r\n\t\tcontribute(Extension.class, new EmojiExtension());\r\n\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\r\n\t\t\r\n\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\r\n\r\n\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\r\n\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\r\n\t\t\t\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t@Override\r\n\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\r\n\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \r\n\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \r\n\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\r\n\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\r\n\t\tbind(CodeCommentEventBroadcaster.class);\r\n\t\tbind(PullRequestEventBroadcaster.class);\r\n\t\tbind(IssueEventBroadcaster.class);\r\n\t\tbind(BuildEventBroadcaster.class);\r\n\t\t\r\n\t\tbind(TaskButton.TaskFutureManager.class);\r\n\t\t\r\n\t\tbind(UICustomization.class).toInstance(new UICustomization() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic Class<? extends BasePage> getHomePage() {\r\n\t\t\t\treturn DashboardPage.class;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic List<MainTab> getMainTabs() {\r\n\t\t\t\treturn Lists.newArrayList(\r\n\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \r\n\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\t\r\n\tprivate void configureBuild() {\r\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic GroovyScript getScript() {\r\n\t\t\t\tGroovyScript script = new GroovyScript();\r\n\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\r\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\r\n\t\t\t\treturn script;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic GroovyScript getScript() {\r\n\t\t\t\tGroovyScript script = new GroovyScript();\r\n\t\t\t\tscript.setName(\"get-build-number\");\r\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\r\n\t\t\t\treturn script;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t}\r\n\t\r\n\tprivate void configurePersistence() {\r\n\t\t// Use an optional binding here in case our client does not like to \r\n\t\t// start persist service provided by this plugin\r\n\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\r\n\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\r\n\t\t\r\n\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\r\n\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\r\n\t\tbind(IdManager.class).to(DefaultIdManager.class);\r\n\t\tbind(Dao.class).to(DefaultDao.class);\r\n\t\t\r\n\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\r\n\t    requestInjection(transactionInterceptor);\r\n\t    \r\n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\r\n\t\t\t}\r\n\t    \t\r\n\t    }, transactionInterceptor);\r\n\t    \r\n\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\r\n\t    requestInjection(sessionInterceptor);\r\n\t    \r\n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean matches(AnnotatedElement element) {\r\n\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\r\n\t\t\t}\r\n\t    \t\r\n\t    }, sessionInterceptor);\r\n\t    \r\n\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\r\n\t    \r\n\t    contribute(PersistListener.class, new PersistListener() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\r\n\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\r\n\t\t\t\t\tthrows CallbackException {\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t    \r\n\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\r\n\r\n\t\t\t@SuppressWarnings(\"rawtypes\")\r\n\t\t\t@Override\r\n\t\t\tpublic XStream get() {\r\n\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\r\n\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\r\n\t\t\t\t\t\treturn new MapperWrapper(next) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\r\n\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\r\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\r\n\t\t\t\t\t\t\t\tif (type == null)\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\r\n\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\r\n\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t};\r\n\t\t\t\tXStream.setupDefaultSecurity(xstream);\r\n\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \r\n\t\t\t\t// containing an entry with value set to null.\r\n\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\r\n\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \r\n\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \r\n\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\r\n\t\t\t\txstream.autodetectAnnotations(true);\r\n\t\t\t\treturn xstream;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}).in(Singleton.class);\r\n\t\t\r\n\t\tif (Bootstrap.command != null) {\r\n\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\r\n\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\r\n\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\r\n\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\r\n\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\r\n\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\r\n\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\r\n\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\r\n\t\t\telse\t\r\n\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\r\n\t\t} else {\r\n\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected Class<? extends AbstractPlugin> getPluginClass() {\r\n\t\treturn OneDev.class;\r\n\t}\r\n\r\n}\r\n"], "filenames": ["server-core/src/main/java/io/onedev/server/CoreModule.java"], "buggy_code_start_loc": [62], "buggy_code_end_loc": [313], "fixing_code_start_loc": [63], "fixing_code_end_loc": [317], "type": "CWE-94", "message": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, There is a vulnerability that enabled pre-auth server side template injection via Bean validation message tampering. Full details in the reference GHSA. This issue was fixed in 4.0.3 by disabling validation interpolation completely.", "other": {"cve": {"id": "CVE-2021-21244", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-15T20:15:12.097", "lastModified": "2022-10-19T13:11:40.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, There is a vulnerability that enabled pre-auth server side template injection via Bean validation message tampering. Full details in the reference GHSA. This issue was fixed in 4.0.3 by disabling validation interpolation completely."}, {"lang": "es", "value": "OneDev es una plataforma devops todo en uno.&#xa0;En OneDev versiones anteriores a  4.0.3. Se presenta una vulnerabilidad que habilita una inyecci\u00f3n de plantilla del lado del servidor previa a la autenticaci\u00f3n por medio de la manipulaci\u00f3n del mensaje de comprobaci\u00f3n de Bean.&#xa0;Detalles completos en la referencia GHSA.&#xa0;Este problema se corrigi\u00f3 en la versi\u00f3n 4.0.3 al deshabilitar la interpolaci\u00f3n de comprobaci\u00f3n por completo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.3", "matchCriteriaId": "5287F01C-3A77-4491-AB49-401A50FAA6E9"}]}]}], "references": [{"url": "https://github.com/theonedev/onedev/commit/4f5dc6fb9e50f2c41c4929b0d8c5824b2cca3d65", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-vm26-xg39-cfj4", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/4f5dc6fb9e50f2c41c4929b0d8c5824b2cca3d65"}}