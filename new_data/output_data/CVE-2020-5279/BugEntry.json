{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property CartRule $object\n */\nclass AdminCartRulesControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'cart_rule';\n        $this->className = 'CartRule';\n        $this->lang = true;\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n        $this->_orderWay = 'DESC';\n\n        parent::__construct();\n\n        $this->bulk_actions = array('delete' => array('text' => $this->trans('Delete selected', array(), 'Admin.Actions'), 'icon' => 'icon-trash', 'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning')));\n\n        $this->fields_list = array(\n            'id_cart_rule' => array('title' => $this->trans('ID', array(), 'Admin.Global'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'name' => array('title' => $this->trans('Name', array(), 'Admin.Global')),\n            'priority' => array('title' => $this->trans('Priority', array(), 'Admin.Global'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'code' => array('title' => $this->trans('Code', array(), 'Admin.Global'), 'class' => 'fixed-width-sm'),\n            'quantity' => array('title' => $this->trans('Quantity', array(), 'Admin.Catalog.Feature'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'date_to' => array('title' => $this->trans('Expiration date', array(), 'Admin.Catalog.Feature'), 'type' => 'datetime', 'class' => 'fixed-width-lg'),\n            'active' => array('title' => $this->trans('Status', array(), 'Admin.Global'), 'active' => 'status', 'type' => 'bool', 'align' => 'center', 'class' => 'fixed-width-xs', 'orderby' => false),\n        );\n    }\n\n    public function ajaxProcessLoadCartRules()\n    {\n        $type = $token = $search = '';\n        $limit = $count = $id_cart_rule = 0;\n        if (Tools::getIsset('limit')) {\n            $limit = Tools::getValue('limit');\n        }\n\n        if (Tools::getIsset('type')) {\n            $type = Tools::getValue('type');\n        }\n\n        if (Tools::getIsset('count')) {\n            $count = Tools::getValue('count');\n        }\n\n        if (Tools::getIsset('id_cart_rule')) {\n            $id_cart_rule = Tools::getValue('id_cart_rule');\n        }\n\n        if (Tools::getIsset('search')) {\n            $search = Tools::getValue('search');\n        }\n\n        $page = floor($count / $limit);\n\n        $html = '';\n        $next_link = '';\n\n        if (($page * $limit) + 1 == $count || $count == 0) {\n            if ($count == 0) {\n                $count = 1;\n            }\n\n            /** @var CartRule $current_object */\n            $current_object = $this->loadObject(true);\n            $cart_rules = $current_object->getAssociatedRestrictions('cart_rule', false, true, ($page) * $limit, $limit, $search);\n\n            if ($type == 'selected') {\n                $i = 1;\n                foreach ($cart_rules['selected'] as $cart_rule) {\n                    $html .= '<option value=\"' . (int) $cart_rule['id_cart_rule'] . '\">&nbsp;' . Tools::safeOutput($cart_rule['name']) . '</option>';\n                    if ($i == $limit) {\n                        break;\n                    }\n                    ++$i;\n                }\n                if ($i == $limit) {\n                    $next_link = Context::getContext()->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' . (int) $id_cart_rule . '&action=loadCartRules&limit=' . (int) $limit . '&type=selected&count=' . ($count - 1 + count($cart_rules['selected']) . '&search=' . urlencode($search));\n                }\n            } else {\n                $i = 1;\n                foreach ($cart_rules['unselected'] as $cart_rule) {\n                    $html .= '<option value=\"' . (int) $cart_rule['id_cart_rule'] . '\">&nbsp;' . Tools::safeOutput($cart_rule['name']) . '</option>';\n                    if ($i == $limit) {\n                        break;\n                    }\n                    ++$i;\n                }\n                if ($i == $limit) {\n                    $next_link = Context::getContext()->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' . (int) $id_cart_rule . '&action=loadCartRules&limit=' . (int) $limit . '&type=unselected&count=' . ($count - 1 + count($cart_rules['unselected']) . '&search=' . urlencode($search));\n                }\n            }\n        }\n        echo json_encode(array('html' => $html, 'next_link' => $next_link));\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n        $this->addJqueryPlugin(array('typewatch', 'fancybox', 'autocomplete'));\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_cart_rule'] = array(\n                'href' => self::$currentIndex . '&addcart_rule&token=' . $this->token,\n                'desc' => $this->trans('Add new cart rule', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitAddcart_rule') || Tools::isSubmit('submitAddcart_ruleAndStay')) {\n            // If the reduction is associated to a specific product, then it must be part of the product restrictions\n            if ((int) Tools::getValue('reduction_product') && Tools::getValue('apply_discount_to') == 'specific' && Tools::getValue('apply_discount') != 'off') {\n                $reduction_product = (int) Tools::getValue('reduction_product');\n\n                // First, check if it is not already part of the restrictions\n                $already_restricted = false;\n                if (is_array($rule_group_array = Tools::getValue('product_rule_group')) && count($rule_group_array) && Tools::getValue('product_restriction')) {\n                    foreach ($rule_group_array as $rule_group_id) {\n                        if (is_array($rule_array = Tools::getValue('product_rule_' . $rule_group_id)) && count($rule_array)) {\n                            foreach ($rule_array as $rule_id) {\n                                if (Tools::getValue('product_rule_' . $rule_group_id . '_' . $rule_id . '_type') == 'products'\n                                    && in_array($reduction_product, Tools::getValue('product_rule_select_' . $rule_group_id . '_' . $rule_id))) {\n                                    $already_restricted = true;\n\n                                    break 2;\n                                }\n                            }\n                        }\n                    }\n                }\n                if ($already_restricted == false) {\n                    // Check the product restriction\n                    $_POST['product_restriction'] = 1;\n\n                    // Add a new rule group\n                    $rule_group_id = 1;\n                    if (is_array($rule_group_array)) {\n                        // Empty for (with a ; at the end), that just find the first rule_group_id available in rule_group_array\n                        for ($rule_group_id = 1; in_array($rule_group_id, $rule_group_array); ++$rule_group_id) {\n                            42;\n                        }\n                        $_POST['product_rule_group'][] = $rule_group_id;\n                    } else {\n                        $_POST['product_rule_group'] = array($rule_group_id);\n                    }\n\n                    // Set a quantity of 1 for this new rule group\n                    $_POST['product_rule_group_' . $rule_group_id . '_quantity'] = 1;\n                    // Add one rule to the new rule group\n                    $_POST['product_rule_' . $rule_group_id] = array(1);\n                    // Set a type 'product' for this 1 rule\n                    $_POST['product_rule_' . $rule_group_id . '_1_type'] = 'products';\n                    // Add the product in the selected products\n                    $_POST['product_rule_select_' . $rule_group_id . '_1'] = array($reduction_product);\n                }\n            }\n\n            // These are checkboxes (which aren't sent through POST when they are not check), so they are forced to 0\n            foreach (array('country', 'carrier', 'group', 'cart_rule', 'product', 'shop') as $type) {\n                if (!Tools::getValue($type . '_restriction')) {\n                    $_POST[$type . '_restriction'] = 0;\n                }\n            }\n\n            // Remove the gift if the radio button is set to \"no\"\n            if (!(int) Tools::getValue('free_gift')) {\n                $_POST['gift_product'] = 0;\n            }\n\n            // Retrieve the product attribute id of the gift (if available)\n            if ($id_product = (int) Tools::getValue('gift_product')) {\n                $_POST['gift_product_attribute'] = (int) Tools::getValue('ipa_' . $id_product);\n            }\n\n            // Idiot-proof control\n            if (strtotime(Tools::getValue('date_from')) > strtotime(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The voucher cannot end before it begins.', array(), 'Admin.Catalog.Notification');\n            }\n            if ((int) Tools::getValue('minimum_amount') < 0) {\n                $this->errors[] = $this->trans('The minimum amount cannot be lower than zero.', array(), 'Admin.Catalog.Notification');\n            }\n            if ((float) Tools::getValue('reduction_percent') < 0 || (float) Tools::getValue('reduction_percent') > 100) {\n                $this->errors[] = $this->trans('Reduction percentage must be between 0% and 100%', array(), 'Admin.Catalog.Notification');\n            }\n            if ((int) Tools::getValue('reduction_amount') < 0) {\n                $this->errors[] = $this->trans('Reduction amount cannot be lower than zero.', array(), 'Admin.Catalog.Notification');\n            }\n            if (Tools::getValue('code') && ($same_code = (int) CartRule::getIdByCode(Tools::getValue('code'))) && $same_code != Tools::getValue('id_cart_rule')) {\n                $this->errors[] = $this->trans('This cart rule code is already used (conflict with cart rule %rulename%)', array('%rulename%' => $same_code), 'Admin.Catalog.Notification');\n            }\n            if (Tools::getValue('apply_discount') == 'off' && !Tools::getValue('free_shipping') && !Tools::getValue('free_gift')) {\n                $this->errors[] = $this->trans('An action is required for this cart rule.', array(), 'Admin.Catalog.Notification');\n            }\n        }\n\n        return parent::postProcess();\n    }\n\n    public function processDelete()\n    {\n        $res = parent::processDelete();\n        if (Tools::isSubmit('delete' . $this->table)) {\n            $back = urldecode(Tools::getValue('back', ''));\n            if (!empty($back)) {\n                $this->redirect_after = $back;\n            }\n        }\n\n        return $res;\n    }\n\n    protected function afterUpdate($current_object)\n    {\n        // All the associations are deleted for an update, then recreated when we call the \"afterAdd\" method\n        $id_cart_rule = Tools::getValue('id_cart_rule');\n        foreach (array('country', 'carrier', 'group', 'product_rule_group', 'shop') as $type) {\n            Db::getInstance()->delete('cart_rule_' . $type, '`id_cart_rule` = ' . (int) $id_cart_rule);\n        }\n\n        Db::getInstance()->delete('cart_rule_product_rule', 'NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule_group`\n\t\t\tWHERE `' . _DB_PREFIX_ . 'cart_rule_product_rule`.`id_product_rule_group` = `' . _DB_PREFIX_ . 'cart_rule_product_rule_group`.`id_product_rule_group`)');\n        Db::getInstance()->delete('cart_rule_product_rule_value', 'NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule`\n\t\t\tWHERE `' . _DB_PREFIX_ . 'cart_rule_product_rule_value`.`id_product_rule` = `' . _DB_PREFIX_ . 'cart_rule_product_rule`.`id_product_rule`)');\n        Db::getInstance()->delete('cart_rule_combination', '`id_cart_rule_1` = ' . (int) $id_cart_rule . ' OR `id_cart_rule_2` = ' . (int) $id_cart_rule);\n\n        $this->afterAdd($current_object);\n    }\n\n    public function processAdd()\n    {\n        if ($cart_rule = parent::processAdd()) {\n            $this->context->smarty->assign('new_cart_rule', $cart_rule);\n        }\n        if (Tools::getValue('submitFormAjax')) {\n            $this->redirect_after = false;\n        }\n\n        return $cart_rule;\n    }\n\n    /**\n     * @TODO Move this function into CartRule\n     *\n     * @param ObjectModel $currentObject\n     *\n     * @throws PrestaShopDatabaseException\n     */\n    protected function afterAdd($currentObject)\n    {\n        // Add restrictions for generic entities like country, carrier and group\n        foreach (array('country', 'carrier', 'group', 'shop') as $type) {\n            if (Tools::getValue($type . '_restriction') && is_array($array = Tools::getValue($type . '_select')) && count($array)) {\n                $values = array();\n                foreach ($array as $id) {\n                    $values[] = '(' . (int) $currentObject->id . ',' . (int) $id . ')';\n                }\n                Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_' . $type . '` (`id_cart_rule`, `id_' . $type . '`) VALUES ' . implode(',', $values));\n            }\n        }\n        // Add cart rule restrictions\n        if (Tools::getValue('cart_rule_restriction') && is_array($array = Tools::getValue('cart_rule_select')) && count($array)) {\n            $values = array();\n            foreach ($array as $id) {\n                $values[] = '(' . (int) $currentObject->id . ',' . (int) $id . ')';\n            }\n            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) VALUES ' . implode(',', $values));\n        }\n        // Add product rule restrictions\n        if (Tools::getValue('product_restriction') && is_array($ruleGroupArray = Tools::getValue('product_rule_group')) && count($ruleGroupArray)) {\n            foreach ($ruleGroupArray as $ruleGroupId) {\n                Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule_group` (`id_cart_rule`, `quantity`)\n\t\t\t\tVALUES (' . (int) $currentObject->id . ', ' . (int) Tools::getValue('product_rule_group_' . $ruleGroupId . '_quantity') . ')');\n                $id_product_rule_group = Db::getInstance()->Insert_ID();\n\n                if (is_array($ruleArray = Tools::getValue('product_rule_' . $ruleGroupId)) && count($ruleArray)) {\n                    foreach ($ruleArray as $ruleId) {\n                        Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule` (`id_product_rule_group`, `type`)\n\t\t\t\t\t\tVALUES (' . (int) $id_product_rule_group . ', \"' . pSQL(Tools::getValue('product_rule_' . $ruleGroupId . '_' . $ruleId . '_type')) . '\")');\n                        $id_product_rule = Db::getInstance()->Insert_ID();\n\n                        $values = array();\n                        foreach (Tools::getValue('product_rule_select_' . $ruleGroupId . '_' . $ruleId) as $id) {\n                            $values[] = '(' . (int) $id_product_rule . ',' . (int) $id . ')';\n                        }\n                        $values = array_unique($values);\n                        if (count($values)) {\n                            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule_value` (`id_product_rule`, `id_item`) VALUES ' . implode(',', $values));\n                        }\n                    }\n                }\n            }\n        }\n\n        // If the new rule has no cart rule restriction, then it must be added to the white list of the other cart rules that have restrictions\n        if (!Tools::getValue('cart_rule_restriction')) {\n            Db::getInstance()->execute('\n\t\t\tINSERT INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) (\n\t\t\t\tSELECT id_cart_rule, ' . (int) $currentObject->id . ' FROM `' . _DB_PREFIX_ . 'cart_rule` WHERE cart_rule_restriction = 1\n\t\t\t)');\n        } else {\n            // And if the new cart rule has restrictions, previously unrestricted cart rules may now be restricted (a mug of coffee is strongly advised to understand this sentence)\n            $ruleCombinations = Db::getInstance()->executeS('\n\t\t\tSELECT cr.id_cart_rule\n\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule cr\n\t\t\tWHERE cr.id_cart_rule != ' . (int) $currentObject->id . '\n\t\t\tAND cr.cart_rule_restriction = 0\n\t\t\tAND NOT EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule_combination\n\t\t\t\tWHERE cr.id_cart_rule = ' . _DB_PREFIX_ . 'cart_rule_combination.id_cart_rule_2 AND ' . (int) $currentObject->id . ' = id_cart_rule_1\n\t\t\t)\n\t\t\tAND NOT EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule_combination\n\t\t\t\tWHERE cr.id_cart_rule = ' . _DB_PREFIX_ . 'cart_rule_combination.id_cart_rule_1 AND ' . (int) $currentObject->id . ' = id_cart_rule_2\n\t\t\t)\n\t\t\t');\n            foreach ($ruleCombinations as $incompatibleRule) {\n                Db::getInstance()->execute('UPDATE `' . _DB_PREFIX_ . 'cart_rule` SET cart_rule_restriction = 1 WHERE id_cart_rule = ' . (int) $incompatibleRule['id_cart_rule'] . ' LIMIT 1');\n                Db::getInstance()->execute('\n\t\t\t\tINSERT IGNORE INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) (\n\t\t\t\t\tSELECT id_cart_rule, ' . (int) $incompatibleRule['id_cart_rule'] . ' FROM `' . _DB_PREFIX_ . 'cart_rule`\n\t\t\t\t\tWHERE active = 1\n\t\t\t\t\tAND id_cart_rule != ' . (int) $currentObject->id . '\n\t\t\t\t\tAND id_cart_rule != ' . (int) $incompatibleRule['id_cart_rule'] . '\n\t\t\t\t)');\n            }\n        }\n    }\n\n    /**\n     * Retrieve the cart rule product rule groups in the POST data\n     * if available, and in the database if there is none.\n     *\n     * @param CartRule $cart_rule\n     *\n     * @return array\n     */\n    public function getProductRuleGroupsDisplay($cart_rule)\n    {\n        $productRuleGroupsArray = array();\n        if (Tools::getValue('product_restriction') && is_array($array = Tools::getValue('product_rule_group')) && count($array)) {\n            $i = 1;\n            foreach ($array as $ruleGroupId) {\n                $productRulesArray = array();\n                if (is_array($array = Tools::getValue('product_rule_' . $ruleGroupId)) && count($array)) {\n                    foreach ($array as $ruleId) {\n                        $productRulesArray[] = $this->getProductRuleDisplay(\n                            $ruleGroupId,\n                            $ruleId,\n                            Tools::getValue('product_rule_' . $ruleGroupId . '_' . $ruleId . '_type'),\n                            Tools::getValue('product_rule_select_' . $ruleGroupId . '_' . $ruleId)\n                        );\n                    }\n                }\n\n                $productRuleGroupsArray[] = $this->getProductRuleGroupDisplay(\n                    $i++,\n                    (int) Tools::getValue('product_rule_group_' . $ruleGroupId . '_quantity'),\n                    $productRulesArray\n                );\n            }\n        } else {\n            $i = 1;\n            foreach ($cart_rule->getProductRuleGroups() as $productRuleGroup) {\n                $j = 1;\n                $productRulesDisplay = array();\n                foreach ($productRuleGroup['product_rules'] as $productRule) {\n                    $productRulesDisplay[] = $this->getProductRuleDisplay($i, $j++, $productRule['type'], $productRule['values']);\n                }\n                $productRuleGroupsArray[] = $this->getProductRuleGroupDisplay($i++, $productRuleGroup['quantity'], $productRulesDisplay);\n            }\n        }\n\n        return $productRuleGroupsArray;\n    }\n\n    /* Return the form for a single cart rule group either with or without product_rules set up */\n    public function getProductRuleGroupDisplay($product_rule_group_id, $product_rule_group_quantity = 1, $product_rules = null)\n    {\n        Context::getContext()->smarty->assign('product_rule_group_id', $product_rule_group_id);\n        Context::getContext()->smarty->assign('product_rule_group_quantity', $product_rule_group_quantity);\n        Context::getContext()->smarty->assign('product_rules', $product_rules);\n\n        return $this->createTemplate('product_rule_group.tpl')->fetch();\n    }\n\n    public function getProductRuleDisplay($product_rule_group_id, $product_rule_id, $product_rule_type, $selected = array())\n    {\n        Context::getContext()->smarty->assign(\n            array(\n                'product_rule_group_id' => (int) $product_rule_group_id,\n                'product_rule_id' => (int) $product_rule_id,\n                'product_rule_type' => $product_rule_type,\n            )\n        );\n\n        switch ($product_rule_type) {\n            case 'attributes':\n                $attributes = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT CONCAT(agl.name, \" - \", al.name) as name, a.id_attribute as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'attribute_group_lang agl\n\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attribute a ON a.id_attribute_group = agl.id_attribute_group\n\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attribute_lang al ON (a.id_attribute = al.id_attribute AND al.id_lang = ' . (int) Context::getContext()->language->id . ')\n\t\t\t\tWHERE agl.id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY agl.name, al.name');\n                foreach ($results as $row) {\n                    $attributes[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $attributes);\n                $choose_content = $this->createTemplate('controllers/cart_rules/product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'products':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT DISTINCT name, p.id_product as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'product p\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_lang` pl\n\t\t\t\t\tON (p.`id_product` = pl.`id_product`\n\t\t\t\t\tAND pl.`id_lang` = ' . (int) Context::getContext()->language->id . Shop::addSqlRestrictionOnLang('pl') . ')\n\t\t\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\t\t\tWHERE id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'manufacturers':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT name, id_manufacturer as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'manufacturer\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'suppliers':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT name, id_supplier as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'supplier\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'categories':\n                $categories = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT DISTINCT name, c.id_category as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'category c\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_lang` cl\n\t\t\t\t\tON (c.`id_category` = cl.`id_category`\n\t\t\t\t\tAND cl.`id_lang` = ' . (int) Context::getContext()->language->id . Shop::addSqlRestrictionOnLang('cl') . ')\n\t\t\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\t\t\tWHERE id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $categories[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $categories);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            default:\n                Context::getContext()->smarty->assign('product_rule_itemlist', array('selected' => array(), 'unselected' => array()));\n                Context::getContext()->smarty->assign('product_rule_choose_content', '');\n        }\n\n        return $this->createTemplate('product_rule.tpl')->fetch();\n    }\n\n    public function ajaxProcess()\n    {\n        if (Tools::isSubmit('newProductRule')) {\n            die($this->getProductRuleDisplay(Tools::getValue('product_rule_group_id'), Tools::getValue('product_rule_id'), Tools::getValue('product_rule_type')));\n        }\n        if (Tools::isSubmit('newProductRuleGroup') && $product_rule_group_id = Tools::getValue('product_rule_group_id')) {\n            die($this->getProductRuleGroupDisplay($product_rule_group_id, Tools::getValue('product_rule_group_' . $product_rule_group_id . '_quantity', 1)));\n        }\n\n        if (Tools::isSubmit('customerFilter')) {\n            $search_query = trim(Tools::getValue('q'));\n            $customers = Db::getInstance()->executeS('\n\t\t\tSELECT `id_customer`, `email`, CONCAT(`firstname`, \\' \\', `lastname`) as cname\n\t\t\tFROM `' . _DB_PREFIX_ . 'customer`\n\t\t\tWHERE `deleted` = 0 AND is_guest = 0 AND active = 1\n\t\t\tAND (\n\t\t\t\t`id_customer` = ' . (int) $search_query . '\n\t\t\t\tOR `email` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t\tOR `firstname` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t\tOR `lastname` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t)\n\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_CUSTOMER) . '\n\t\t\tORDER BY `firstname`, `lastname` ASC\n\t\t\tLIMIT 50');\n            die(json_encode($customers));\n        }\n        // Both product filter (free product and product discount) search for products\n        if (Tools::isSubmit('giftProductFilter') || Tools::isSubmit('reductionProductFilter')) {\n            $products = Product::searchByName(Context::getContext()->language->id, trim(Tools::getValue('q')));\n            die(json_encode($products));\n        }\n    }\n\n    protected function searchProducts($search)\n    {\n        if ($products = Product::searchByName((int) $this->context->language->id, $search)) {\n            foreach ($products as &$product) {\n                $combinations = array();\n                $productObj = new Product((int) $product['id_product'], false, (int) $this->context->language->id);\n                $attributes = $productObj->getAttributesGroups((int) $this->context->language->id);\n                $product['formatted_price'] = Tools::displayPrice(Tools::convertPrice($product['price_tax_incl'], $this->context->currency), $this->context->currency);\n\n                foreach ($attributes as $attribute) {\n                    if (!isset($combinations[$attribute['id_product_attribute']]['attributes'])) {\n                        $combinations[$attribute['id_product_attribute']]['attributes'] = '';\n                    }\n                    $combinations[$attribute['id_product_attribute']]['attributes'] .= $attribute['attribute_name'] . ' - ';\n                    $combinations[$attribute['id_product_attribute']]['id_product_attribute'] = $attribute['id_product_attribute'];\n                    $combinations[$attribute['id_product_attribute']]['default_on'] = $attribute['default_on'];\n                    if (!isset($combinations[$attribute['id_product_attribute']]['price'])) {\n                        $price_tax_incl = Product::getPriceStatic((int) $product['id_product'], true, $attribute['id_product_attribute']);\n                        $combinations[$attribute['id_product_attribute']]['formatted_price'] = Tools::displayPrice(Tools::convertPrice($price_tax_incl, $this->context->currency), $this->context->currency);\n                    }\n                }\n\n                foreach ($combinations as &$combination) {\n                    $combination['attributes'] = rtrim($combination['attributes'], ' - ');\n                }\n                $product['combinations'] = $combinations;\n            }\n\n            return array(\n                'products' => $products,\n                'found' => true,\n            );\n        } else {\n            return array('found' => false, 'notfound' => $this->trans('No product has been found.', array(), 'Admin.Catalog.Notification'));\n        }\n    }\n\n    public function ajaxProcessSearchProducts()\n    {\n        $array = $this->searchProducts(Tools::getValue('product_search'));\n        $this->content = trim(json_encode($array));\n    }\n\n    public function renderForm()\n    {\n        $limit = 40;\n        $this->toolbar_btn['save-and-stay'] = array(\n            'href' => '#',\n            'desc' => $this->trans('Save and stay', array(), 'Admin.Actions'),\n        );\n\n        /** @var CartRule $current_object */\n        $current_object = $this->loadObject(true);\n\n        // All the filter are prefilled with the correct information\n        $customer_filter = '';\n        if (Validate::isUnsignedId($current_object->id_customer) &&\n            ($customer = new Customer($current_object->id_customer)) &&\n            Validate::isLoadedObject($customer)) {\n            $customer_filter = $customer->firstname . ' ' . $customer->lastname . ' (' . $customer->email . ')';\n        }\n\n        $gift_product_filter = '';\n        if (Validate::isUnsignedId($current_object->gift_product) &&\n            ($product = new Product($current_object->gift_product, false, $this->context->language->id)) &&\n            Validate::isLoadedObject($product)) {\n            $gift_product_filter = (!empty($product->reference) ? $product->reference : $product->name);\n        }\n\n        $reduction_product_filter = '';\n        if (Validate::isUnsignedId($current_object->reduction_product) &&\n            ($product = new Product($current_object->reduction_product, false, $this->context->language->id)) &&\n            Validate::isLoadedObject($product)) {\n            $reduction_product_filter = (!empty($product->reference) ? $product->reference : $product->name);\n        }\n\n        $product_rule_groups = $this->getProductRuleGroupsDisplay($current_object);\n\n        $attribute_groups = AttributeGroup::getAttributesGroups($this->context->language->id);\n        $currencies = Currency::getCurrencies(false, true, true);\n        $languages = Language::getLanguages();\n        $countries = $current_object->getAssociatedRestrictions('country', true, true);\n        $groups = $current_object->getAssociatedRestrictions('group', false, true);\n        $shops = $current_object->getAssociatedRestrictions('shop', false, false);\n        $cart_rules = $current_object->getAssociatedRestrictions('cart_rule', false, true, 0, $limit);\n        $carriers = $current_object->getAssociatedRestrictions('carrier', true, false);\n        foreach ($carriers as &$carriers2) {\n            foreach ($carriers2 as &$carrier) {\n                foreach ($carrier as $field => &$value) {\n                    if ($field == 'name' && $value == '0') {\n                        $value = Configuration::get('PS_SHOP_NAME');\n                    }\n                }\n            }\n        }\n\n        $gift_product_select = '';\n        $gift_product_attribute_select = '';\n        if ((int) $current_object->gift_product) {\n            $search_products = $this->searchProducts($gift_product_filter);\n            if (isset($search_products['products']) && is_array($search_products['products'])) {\n                foreach ($search_products['products'] as $product) {\n                    $gift_product_select .= '\n\t\t\t\t\t<option value=\"' . $product['id_product'] . '\" ' . ($product['id_product'] == $current_object->gift_product ? 'selected=\"selected\"' : '') . '>\n\t\t\t\t\t\t' . $product['name'] . (count($product['combinations']) == 0 ? ' - ' . $product['formatted_price'] : '') . '\n\t\t\t\t\t</option>';\n\n                    if (count($product['combinations'])) {\n                        $gift_product_attribute_select .= '<select class=\"control-form id_product_attribute\" id=\"ipa_' . $product['id_product'] . '\" name=\"ipa_' . $product['id_product'] . '\">';\n                        foreach ($product['combinations'] as $combination) {\n                            $gift_product_attribute_select .= '\n\t\t\t\t\t\t\t<option ' . ($combination['id_product_attribute'] == $current_object->gift_product_attribute ? 'selected=\"selected\"' : '') . ' value=\"' . $combination['id_product_attribute'] . '\">\n\t\t\t\t\t\t\t\t' . $combination['attributes'] . ' - ' . $combination['formatted_price'] . '\n\t\t\t\t\t\t\t</option>';\n                        }\n                        $gift_product_attribute_select .= '</select>';\n                    }\n                }\n            }\n        }\n\n        $product = new Product($current_object->gift_product);\n        $this->context->smarty->assign(\n            array(\n                'show_toolbar' => true,\n                'toolbar_btn' => $this->toolbar_btn,\n                'toolbar_scroll' => $this->toolbar_scroll,\n                'title' => array($this->trans('Payment: ', array(), 'Admin.Catalog.Feature'), $this->trans('Cart Rules', array(), 'Admin.Catalog.Feature')),\n                'defaultDateFrom' => date('Y-m-d H:00:00'),\n                'defaultDateTo' => date('Y-m-d H:00:00', strtotime('+1 month')),\n                'customerFilter' => $customer_filter,\n                'giftProductFilter' => $gift_product_filter,\n                'gift_product_select' => $gift_product_select,\n                'gift_product_attribute_select' => $gift_product_attribute_select,\n                'reductionProductFilter' => $reduction_product_filter,\n                'defaultCurrency' => Configuration::get('PS_CURRENCY_DEFAULT'),\n                'id_lang_default' => Configuration::get('PS_LANG_DEFAULT'),\n                'languages' => $languages,\n                'currencies' => $currencies,\n                'countries' => $countries,\n                'carriers' => $carriers,\n                'groups' => $groups,\n                'shops' => $shops,\n                'cart_rules' => $cart_rules,\n                'product_rule_groups' => $product_rule_groups,\n                'product_rule_groups_counter' => count($product_rule_groups),\n                'attribute_groups' => $attribute_groups,\n                'currentIndex' => self::$currentIndex,\n                'currentToken' => $this->token,\n                'currentObject' => $current_object,\n                'currentTab' => $this,\n                'hasAttribute' => $product->hasAttributes(),\n            )\n        );\n        Media::addJsDef(array('baseHref' => $this->context->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' .\n                                     (int) Tools::getValue('id_cart_rule') . '&action=loadCartRules&limit=' . (int) $limit . '&count=0', ));\n        $this->content .= $this->createTemplate('form.tpl')->fetch();\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJqueryPlugin(array('jscroll', 'typewatch'));\n\n        return parent::renderForm();\n    }\n\n    public function displayAjaxSearchCartRuleVouchers()\n    {\n        $found = false;\n        if ($vouchers = CartRule::getCartsRuleByCode(Tools::getValue('q'), (int) $this->context->language->id, true)) {\n            $found = true;\n        }\n        echo json_encode(array('found' => $found, 'vouchers' => $vouchers));\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManagerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\Theme;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\ThemeManagerBuilder;\n\nclass AdminStatsControllerCore extends AdminStatsTabController\n{\n    public static function getVisits($unique, $date_from, $date_to, $granularity = false)\n    {\n        $visits = ($granularity == false) ? 0 : array();\n        $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n        $moduleManager = $moduleManagerBuilder->build();\n\n        /** @var Gapi $gapi */\n        $gapi = $moduleManager->isInstalled('gapi') ? Module::getInstanceByName('gapi') : false;\n        if (Validate::isLoadedObject($gapi) && $gapi->isConfigured()) {\n            $metric = $unique ? 'visitors' : 'visits';\n            if ($result = $gapi->requestReportData(\n                $granularity ? 'ga:date' : '',\n                'ga:' . $metric,\n                $date_from,\n                $date_to,\n                null,\n                null,\n                1,\n                5000\n            )\n            ) {\n                foreach ($result as $row) {\n                    if ($granularity == 'day') {\n                        $visits[strtotime(\n                            preg_replace('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', '$1-$2-$3', $row['dimensions']['date'])\n                        )] = $row['metrics'][$metric];\n                    } elseif ($granularity == 'month') {\n                        if (!isset(\n                            $visits[strtotime(\n                                preg_replace(\n                                    '/^([0-9]{4})([0-9]{2})([0-9]{2})$/',\n                                    '$1-$2-01',\n                                    $row['dimensions']['date']\n                                )\n                            )]\n                        )\n                        ) {\n                            $visits[strtotime(\n                                preg_replace(\n                                    '/^([0-9]{4})([0-9]{2})([0-9]{2})$/',\n                                    '$1-$2-01',\n                                    $row['dimensions']['date']\n                                )\n                            )] = 0;\n                        }\n                        $visits[strtotime(\n                            preg_replace('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', '$1-$2-01', $row['dimensions']['date'])\n                        )] += $row['metrics'][$metric];\n                    } else {\n                        $visits = $row['metrics'][$metric];\n                    }\n                }\n            }\n        } else {\n            if ($granularity == 'day') {\n                $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                    '\n\t\t\t\tSELECT date(`date_add`) as date, COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction() . '\n\t\t\t\tGROUP BY date(`date_add`)'\n                );\n                foreach ($result as $row) {\n                    $visits[strtotime($row['date'])] = $row['visits'];\n                }\n            } elseif ($granularity == 'month') {\n                $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                    '\n\t\t\t\tSELECT LEFT(LAST_DAY(`date_add`), 7) as date, COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction() . '\n\t\t\t\tGROUP BY LAST_DAY(`date_add`)'\n                );\n                foreach ($result as $row) {\n                    $visits[strtotime($row['date'] . '-01')] = $row['visits'];\n                }\n            } else {\n                $visits = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n            }\n        }\n\n        return $visits;\n    }\n\n    public static function getAbandonedCarts($date_from, $date_to)\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT id_guest)\n\t\tFROM `' . _DB_PREFIX_ . 'cart`\n\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . '\" AND \"' . pSQL($date_to) . '\"\n\t\tAND NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'orders` WHERE `' . _DB_PREFIX_ . 'orders`.id_cart = `' . _DB_PREFIX_ . 'cart`.id_cart)\n\t\t' . Shop::addSqlRestriction()\n        );\n    }\n\n    public static function getInstalledModules()\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT m.`id_module`)\n\t\tFROM `' . _DB_PREFIX_ . 'module` m\n\t\t' . Shop::addSqlAssociation('module', 'm')\n        );\n    }\n\n    public static function getDisabledModules()\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'module` m\n\t\t' . Shop::addSqlAssociation('module', 'm', false) . '\n\t\tWHERE module_shop.id_module IS NULL OR m.active = 0'\n        );\n    }\n\n    public static function getModulesToUpdate()\n    {\n        $context = Context::getContext();\n        $logged_on_addons = false;\n        if (isset($context->cookie->username_addons, $context->cookie->password_addons)\n            && !empty($context->cookie->username_addons) && !empty($context->cookie->password_addons)\n        ) {\n            $logged_on_addons = true;\n        }\n        $modules = Module::getModulesOnDisk(true, $logged_on_addons, $context->employee->id);\n        $upgrade_available = 0;\n        foreach ($modules as $km => $module) {\n            if ($module->installed && isset($module->version_addons) && $module->version_addons) { // SimpleXMLElement\n                ++$upgrade_available;\n            }\n        }\n\n        return $upgrade_available;\n    }\n\n    public static function getPercentProductStock()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(IFNULL(stock.quantity, 0) > 0, 1, 0)) AS with_stock, COUNT(*) AS products\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Product::sqlStock('p', 'pa') . '\n\t\tWHERE product_shop.active = 1'\n        );\n\n        return round($row['products'] ? 100 * $row['with_stock'] / $row['products'] : 0, 2) . '%';\n    }\n\n    public static function getPercentProductOutOfStock()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(IFNULL(stock.quantity, 0) <= 0, 1, 0)) AS without_stock, COUNT(*) AS products\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Product::sqlStock('p', 'pa') . '\n\t\tWHERE product_shop.active = 1'\n        );\n\n        return round($row['products'] ? 100 * $row['without_stock'] / $row['products'] : 0, 2) . '%';\n    }\n\n    public static function getProductAverageGrossMargin()\n    {\n        $sql = 'SELECT AVG(1 - (IF(IFNULL(product_attribute_shop.wholesale_price, 0) = 0, product_shop.wholesale_price,product_attribute_shop.wholesale_price) / (IFNULL(product_attribute_shop.price, 0) + product_shop.price)))\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Shop::addSqlAssociation('product_attribute', 'pa', false) . '\n\t\tWHERE product_shop.active = 1';\n        $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql);\n\n        return round(100 * $value, 2) . '%';\n    }\n\n    public static function getDisabledCategories()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tWHERE c.active = 0'\n        );\n    }\n\n    public static function getTotalCategories()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c')\n        );\n    }\n\n    public static function getDisabledProducts()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tWHERE product_shop.active = 0'\n        );\n    }\n\n    public static function getTotalProducts()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p')\n        );\n    }\n\n    public static function getTotalSales($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $sales = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 10) AS date, SUM(total_products / o.conversion_rate) AS sales\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $sales[strtotime($row['date'])] = $row['sales'];\n            }\n\n            return $sales;\n        } elseif ($granularity == 'month') {\n            $sales = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 7) AS date, SUM(total_products / o.conversion_rate) AS sales\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 7)'\n            );\n            foreach ($result as $row) {\n                $sales[strtotime($row['date'] . '-01')] = $row['sales'];\n            }\n\n            return $sales;\n        } else {\n            return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT SUM(total_products / o.conversion_rate)\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n    }\n\n    public static function get8020SalesCatalog($date_from, $date_to)\n    {\n        $distinct_products = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT od.product_id)\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction(false, 'o')\n        );\n        if (!$distinct_products) {\n            return '0%';\n        }\n\n        return round(100 * $distinct_products / AdminStatsController::getTotalProducts()) . '%';\n    }\n\n    public static function getOrders($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $orders = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 10) AS date, COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $orders[strtotime($row['date'])] = $row['orders'];\n            }\n\n            return $orders;\n        } elseif ($granularity == 'month') {\n            $orders = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 7) AS date, COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 7)'\n            );\n            foreach ($result as $row) {\n                $orders[strtotime($row['date'] . '-01')] = $row['orders'];\n            }\n\n            return $orders;\n        } else {\n            $orders = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n\n        return $orders;\n    }\n\n    public static function getEmptyCategories()\n    {\n        $total = (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tAND c.`id_category` != ' . (int) Configuration::get('PS_ROOT_CATEGORY')\n        );\n        $used = (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT cp.id_category)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_product` cp ON c.id_category = cp.id_category\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tAND c.`id_category` != ' . (int) Configuration::get('PS_ROOT_CATEGORY')\n        );\n\n        return (int) ($total - $used);\n    }\n\n    public static function getCustomerMainGender()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(g.id_gender IS NOT NULL, 1, 0)) AS total, SUM(IF(type = 0, 1, 0)) AS male, SUM(IF(type = 1, 1, 0)) AS female, SUM(IF(type = 2, 1, 0)) AS neutral\n\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'gender` g ON c.id_gender = g.id_gender\n\t\tWHERE c.active = 1 ' . Shop::addSqlRestriction()\n        );\n\n        if (!$row['total']) {\n            return false;\n        } elseif ($row['male'] > $row['female'] && $row['male'] >= $row['neutral']) {\n            return array('type' => 'male', 'value' => round(100 * $row['male'] / $row['total']));\n        } elseif ($row['female'] >= $row['male'] && $row['female'] >= $row['neutral']) {\n            return array('type' => 'female', 'value' => round(100 * $row['female'] / $row['total']));\n        }\n\n        return array('type' => 'neutral', 'value' => round(100 * $row['neutral'] / $row['total']));\n    }\n\n    public static function getBestCategory($date_from, $date_to)\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT ca.`id_category`\n\t\tFROM `' . _DB_PREFIX_ . 'category` ca\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_product` capr ON ca.`id_category` = capr.`id_category`\n\t\tLEFT JOIN (\n\t\t\tSELECT pr.`id_product`, t.`totalPriceSold`\n\t\t\tFROM `' . _DB_PREFIX_ . 'product` pr\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT pr.`id_product`,\n\t\t\t\t\tIFNULL(SUM(cp.`product_quantity`), 0) AS totalQuantitySold,\n\t\t\t\t\tIFNULL(SUM(cp.`product_price` * cp.`product_quantity`), 0) / o.conversion_rate AS totalPriceSold\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'product` pr\n\t\t\t\tLEFT OUTER JOIN `' . _DB_PREFIX_ . 'order_detail` cp ON pr.`id_product` = cp.`product_id`\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'orders` o ON o.`id_order` = cp.`id_order`\n\t\t\t\tWHERE o.invoice_date BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\tGROUP BY pr.`id_product`\n\t\t\t) t ON t.`id_product` = pr.`id_product`\n\t\t) t\tON t.`id_product` = capr.`id_product`\n\t\tWHERE ca.`level_depth` > 1\n\t\tGROUP BY ca.`id_category`\n\t\tORDER BY SUM(t.`totalPriceSold`) DESC'\n        );\n    }\n\n    public static function getMainCountry($date_from, $date_to)\n    {\n        $total_orders = AdminStatsController::getOrders($date_from, $date_to);\n        if (!$total_orders) {\n            return false;\n        }\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT a.id_country, COUNT(*) AS orders\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'address` a ON o.id_address_delivery = a.id_address\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction()\n        );\n        $row['orders'] = round(100 * $row['orders'] / $total_orders, 1);\n\n        return $row;\n    }\n\n    public static function getAverageCustomerAge()\n    {\n        $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT AVG(DATEDIFF(\"' . date('Y-m-d') . ' 00:00:00\", birthday))\n\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\tWHERE active = 1\n\t\tAND birthday IS NOT NULL AND birthday != \"0000-00-00\" ' . Shop::addSqlRestriction()\n        );\n\n        return round($value / 365);\n    }\n\n    public static function getPendingMessages()\n    {\n        return CustomerThread::getTotalCustomerThreads(\n            'status LIKE \"%pending%\" OR status = \"open\"' . Shop::addSqlRestriction()\n        );\n    }\n\n    public static function getAverageMessageResponseTime($date_from, $date_to)\n    {\n        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n            '\n\t\tSELECT MIN(cm1.date_add) AS question, MIN(cm2.date_add) AS reply\n\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm1\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'customer_message` cm2 ON (cm1.id_customer_thread = cm2.id_customer_thread AND cm1.date_add < cm2.date_add)\n\t\tJOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm1.id_customer_thread = ct.id_customer_thread)\n\t\tWHERE cm1.`date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\tAND cm1.id_employee = 0 AND cm2.id_employee != 0\n\t\t' . Shop::addSqlRestriction() . '\n\t\tGROUP BY cm1.id_customer_thread'\n        );\n        $total_questions = $total_replies = $threads = 0;\n        foreach ($result as $row) {\n            ++$threads;\n            $total_questions += strtotime($row['question']);\n            $total_replies += strtotime($row['reply']);\n        }\n        if (!$threads) {\n            return 0;\n        }\n\n        return round(($total_replies - $total_questions) / $threads / 3600, 1);\n    }\n\n    public static function getMessagesPerThread($date_from, $date_to)\n    {\n        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n            '\n\t\tSELECT COUNT(*) AS messages\n\t\tFROM `' . _DB_PREFIX_ . 'customer_thread` ct\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_message` cm ON (ct.id_customer_thread = cm.id_customer_thread)\n\t\tWHERE ct.`date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction() . '\n\t\tAND STATUS = \"closed\"\n\t\tGROUP BY ct.id_customer_thread'\n        );\n        $threads = $messages = 0;\n        foreach ($result as $row) {\n            ++$threads;\n            $messages += $row['messages'];\n        }\n        if (!$threads) {\n            return 0;\n        }\n\n        return round($messages / $threads, 1);\n    }\n\n    public static function getPurchases($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $purchases = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT\n\t\t\t\tLEFT(`invoice_date`, 10) as date,\n\t\t\t\tSUM(od.`product_quantity` * IF(\n\t\t\t\t\tod.`purchase_supplier_price` > 0,\n\t\t\t\t\tod.`purchase_supplier_price` / `conversion_rate`,\n\t\t\t\t\tod.`original_product_price` * ' . (int) Configuration::get('CONF_AVERAGE_PRODUCT_MARGIN') . ' / 100\n\t\t\t\t)) as total_purchase_price\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $purchases[strtotime($row['date'])] = $row['total_purchase_price'];\n            }\n\n            return $purchases;\n        } else {\n            return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT SUM(od.`product_quantity` * IF(\n\t\t\t\tod.`purchase_supplier_price` > 0,\n\t\t\t\tod.`purchase_supplier_price` / `conversion_rate`,\n\t\t\t\tod.`original_product_price` * ' . (int) Configuration::get('CONF_AVERAGE_PRODUCT_MARGIN') . ' / 100\n\t\t\t)) as total_purchase_price\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n    }\n\n    public static function getExpenses($date_from, $date_to, $granularity = false)\n    {\n        $expenses = ($granularity == 'day' ? array() : 0);\n\n        $orders = Db::getInstance()->executeS(\n            '\n\t\tSELECT\n\t\t\tLEFT(`invoice_date`, 10) AS date,\n\t\t\ttotal_paid_tax_incl / o.conversion_rate AS total_paid_tax_incl,\n\t\t\ttotal_shipping_tax_excl / o.conversion_rate AS total_shipping_tax_excl,\n\t\t\to.module,\n\t\t\ta.id_country,\n\t\t\to.id_currency,\n\t\t\tc.id_reference AS carrier_reference\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'address` a ON o.id_address_delivery = a.id_address\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'carrier` c ON o.id_carrier = c.id_carrier\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t' . Shop::addSqlRestriction(false, 'o')\n        );\n        foreach ($orders as $order) {\n            // Add flat fees for this order\n            $flat_fees = Configuration::get('CONF_ORDER_FIXED') + (\n                $order['id_currency'] == Configuration::get('PS_CURRENCY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['module']) . '_FIXED')\n                    : Configuration::get('CONF_' . strtoupper($order['module']) . '_FIXED_FOREIGN')\n                );\n\n            // Add variable fees for this order\n            $var_fees = $order['total_paid_tax_incl'] * (\n                $order['id_currency'] == Configuration::get('PS_CURRENCY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['module']) . '_VAR')\n                    : Configuration::get('CONF_' . strtoupper($order['module']) . '_VAR_FOREIGN')\n                ) / 100;\n\n            // Add shipping fees for this order\n            $shipping_fees = $order['total_shipping_tax_excl'] * (\n                $order['id_country'] == Configuration::get('PS_COUNTRY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['carrier_reference']) . '_SHIP')\n                    : Configuration::get('CONF_' . strtoupper($order['carrier_reference']) . '_SHIP_OVERSEAS')\n                ) / 100;\n\n            // Tally up these fees\n            if ($granularity == 'day') {\n                if (!isset($expenses[strtotime($order['date'])])) {\n                    $expenses[strtotime($order['date'])] = 0;\n                }\n                $expenses[strtotime($order['date'])] += $flat_fees + $var_fees + $shipping_fees;\n            } else {\n                $expenses += $flat_fees + $var_fees + $shipping_fees;\n            }\n        }\n\n        return $expenses;\n    }\n\n    public function displayAjaxGetKpi()\n    {\n        $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        $tooltip = null;\n        switch (Tools::getValue('kpi')) {\n            case 'conversion_rate':\n                $visitors = AdminStatsController::getVisits(\n                    true,\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day')),\n                    false /*'day'*/\n                );\n                $orders = AdminStatsController::getOrders(\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day')),\n                    false /*'day'*/\n                );\n\n                // $data = array();\n                // $from = strtotime(date('Y-m-d 00:00:00', strtotime('-31 day')));\n                // $to = strtotime(date('Y-m-d 23:59:59', strtotime('-1 day')));\n                // for ($date = $from; $date <= $to; $date = strtotime('+1 day', $date))\n                // if (isset($visitors[$date]) && $visitors[$date])\n                // $data[$date] = round(100 * ((isset($orders[$date]) && $orders[$date]) ? $orders[$date] : 0) / $visitors[$date], 2);\n                // else\n                // $data[$date] = 0;\n\n                $visits_sum = $visitors; //array_sum($visitors);\n                $orders_sum = $orders; //array_sum($orders);\n                if ($visits_sum) {\n                    $value = round(100 * $orders_sum / $visits_sum, 2);\n                } elseif ($orders_sum) {\n                    $value = '&infin;';\n                } else {\n                    $value = 0;\n                }\n                $value .= '%';\n\n                // ConfigurationKPI::updateValue('CONVERSION_RATE_CHART', json_encode($data));\n                ConfigurationKPI::updateValue('CONVERSION_RATE', $value);\n                ConfigurationKPI::updateValue(\n                    'CONVERSION_RATE_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'abandoned_cart':\n                $value = AdminStatsController::getAbandonedCarts(\n                    date('Y-m-d H:i:s', strtotime('-2 day')),\n                    date('Y-m-d H:i:s', strtotime('-1 day'))\n                );\n                ConfigurationKPI::updateValue('ABANDONED_CARTS', $value);\n                ConfigurationKPI::updateValue('ABANDONED_CARTS_EXPIRE', strtotime('+1 hour'));\n\n                break;\n\n            case 'installed_modules':\n                $value = AdminStatsController::getInstalledModules();\n                ConfigurationKPI::updateValue('INSTALLED_MODULES', $value);\n                ConfigurationKPI::updateValue('INSTALLED_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'disabled_modules':\n                $value = AdminStatsController::getDisabledModules();\n                ConfigurationKPI::updateValue('DISABLED_MODULES', $value);\n                ConfigurationKPI::updateValue('DISABLED_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'update_modules':\n                $value = AdminStatsController::getModulesToUpdate();\n                ConfigurationKPI::updateValue('UPDATE_MODULES', $value);\n                ConfigurationKPI::updateValue('UPDATE_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'percent_product_stock':\n                $value = AdminStatsController::getPercentProductStock();\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_STOCK', $value);\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_STOCK_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'percent_product_out_of_stock':\n                $value = AdminStatsController::getPercentProductOutOfStock();\n                $tooltip = $this->trans(\n                    '%value% of your products for sale are out of stock.',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_OUT_OF_STOCK', $value);\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_OUT_OF_STOCK_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'product_avg_gross_margin':\n                $value = AdminStatsController::getProductAverageGrossMargin();\n                $tooltip = $this->trans(\n                    'Gross margin expressed in percentage assesses how cost-effectively you sell your goods. Out of $100, you will retain $%value% to cover profit and expenses.',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('PRODUCT_AVG_GROSS_MARGIN', $value);\n                ConfigurationKPI::updateValue('PRODUCT_AVG_GROSS_MARGIN_EXPIRE', strtotime('+6 hour'));\n\n                break;\n\n            case 'disabled_categories':\n                $value = AdminStatsController::getDisabledCategories();\n                ConfigurationKPI::updateValue('DISABLED_CATEGORIES', $value);\n                ConfigurationKPI::updateValue('DISABLED_CATEGORIES_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case 'disabled_products':\n                $value = round(\n                        100 * AdminStatsController::getDisabledProducts() / AdminStatsController::getTotalProducts(),\n                        2\n                    ) . '%';\n                $tooltip = $this->trans(\n                    '%value% of your products are disabled and not visible to your customers',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('DISABLED_PRODUCTS', $value);\n                ConfigurationKPI::updateValue('DISABLED_PRODUCTS_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case '8020_sales_catalog':\n                $value = AdminStatsController::get8020SalesCatalog(date('Y-m-d', strtotime('-30 days')), date('Y-m-d'));\n                $tooltip = $this->trans(\n                    'Within your catalog, %value% of your products have had sales in the last 30 days',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                $value = $this->trans('%value%% of your Catalog', array('%value%' => $value), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('8020_SALES_CATALOG', $value);\n                ConfigurationKPI::updateValue('8020_SALES_CATALOG_EXPIRE', strtotime('+12 hour'));\n\n                break;\n\n            case 'empty_categories':\n                $value = AdminStatsController::getEmptyCategories();\n                ConfigurationKPI::updateValue('EMPTY_CATEGORIES', $value);\n                ConfigurationKPI::updateValue('EMPTY_CATEGORIES_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case 'customer_main_gender':\n                $value = AdminStatsController::getCustomerMainGender();\n\n                if ($value === false) {\n                    $value = $this->trans('No customers', array(), 'Admin.Stats.Feature');\n                } elseif ($value['type'] == 'female') {\n                    $value = $this->trans('%percentage%% Female Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                } elseif ($value['type'] == 'male') {\n                    $value = $this->trans('%percentage%% Male Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                } else {\n                    $value = $this->trans('%percentage%% Neutral Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                }\n\n                ConfigurationKPI::updateValue('CUSTOMER_MAIN_GENDER', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'CUSTOMER_MAIN_GENDER_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'avg_customer_age':\n                $value = $this->trans('%value% years', array('%value%' => AdminStatsController::getAverageCustomerAge()), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('AVG_CUSTOMER_AGE', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'AVG_CUSTOMER_AGE_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'pending_messages':\n                $value = (int) AdminStatsController::getPendingMessages();\n                ConfigurationKPI::updateValue('PENDING_MESSAGES', $value);\n                ConfigurationKPI::updateValue('PENDING_MESSAGES_EXPIRE', strtotime('+5 min'));\n\n                break;\n\n            case 'avg_msg_response_time':\n                $value = $this->trans('%average% hours', array('%average%' => AdminStatsController::getAverageMessageResponseTime(\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day'))\n                )), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('AVG_MSG_RESPONSE_TIME', $value);\n                ConfigurationKPI::updateValue('AVG_MSG_RESPONSE_TIME_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'messages_per_thread':\n                $value = round(\n                    AdminStatsController::getMessagesPerThread(\n                        date('Y-m-d', strtotime('-31 day')),\n                        date('Y-m-d', strtotime('-1 day'))\n                    ),\n                    1\n                );\n                ConfigurationKPI::updateValue('MESSAGES_PER_THREAD', $value);\n                ConfigurationKPI::updateValue('MESSAGES_PER_THREAD_EXPIRE', strtotime('+12 hour'));\n\n                break;\n\n            case 'newsletter_registrations':\n                $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n                $moduleManager = $moduleManagerBuilder->build();\n\n                $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer`\n\t\t\t\tWHERE newsletter = 1\n\t\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_ORDER)\n                );\n                if ($moduleManager->isInstalled('ps_emailsubscription')) {\n                    $value += Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                        '\n\t\t\t\t\tSELECT COUNT(*)\n\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'emailsubscription`\n\t\t\t\t\tWHERE active = 1\n\t\t\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_ORDER)\n                    );\n                }\n\n                ConfigurationKPI::updateValue('NEWSLETTER_REGISTRATIONS', $value);\n                ConfigurationKPI::updateValue('NEWSLETTER_REGISTRATIONS_EXPIRE', strtotime('+6 hour'));\n\n                break;\n\n            case 'enabled_languages':\n                $value = Language::countActiveLanguages();\n                ConfigurationKPI::updateValue('ENABLED_LANGUAGES', $value);\n                ConfigurationKPI::updateValue('ENABLED_LANGUAGES_EXPIRE', strtotime('+1 min'));\n\n                break;\n\n            case 'frontoffice_translations':\n                $themes = (new ThemeManagerBuilder($this->context, Db::getInstance()))\n                    ->buildRepository()\n                    ->getList();\n                $languages = Language::getLanguages();\n                $total = $translated = 0;\n                foreach ($themes as $theme) {\n                    /* @var Theme $theme */\n                    foreach ($languages as $language) {\n                        $kpi_key = substr(strtoupper($theme->getName() . '_' . $language['iso_code']), 0, 16);\n                        $total += ConfigurationKPI::get('TRANSLATE_TOTAL_' . $kpi_key);\n                        $translated += ConfigurationKPI::get('TRANSLATE_DONE_' . $kpi_key);\n                    }\n                }\n                $value = 0;\n                if ($translated) {\n                    $value = round(100 * $translated / $total, 1);\n                }\n                $value .= '%';\n                ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS', $value);\n                ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'main_country':\n                if (!($row = AdminStatsController::getMainCountry(\n                    date('Y-m-d', strtotime('-30 day')),\n                    date('Y-m-d')\n                ))\n                ) {\n                    $value = $this->trans('No orders', array(), 'Admin.Stats.Feature');\n                } else {\n                    $country = new Country($row['id_country'], $this->context->language->id);\n                    $value = $this->trans(\n                        '%d%% %s',\n                        array('%d%%' => $row['orders'], '%s' => $country->name),\n                        'Admin.Stats.Feature'\n                    );\n                }\n\n                ConfigurationKPI::updateValue('MAIN_COUNTRY', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'MAIN_COUNTRY_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'orders_per_customer':\n                $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tWHERE c.active = 1\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n                if ($value) {\n                    $orders = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                        '\n\t\t\t\t\tSELECT COUNT(*)\n\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\t\t\tWHERE o.valid = 1\n\t\t\t\t\t' . Shop::addSqlRestriction()\n                    );\n                    $value = round($orders / $value, 2);\n                }\n\n                ConfigurationKPI::updateValue('ORDERS_PER_CUSTOMER', $value);\n                ConfigurationKPI::updateValue('ORDERS_PER_CUSTOMER_EXPIRE', strtotime('+1 day'));\n\n                break;\n\n            case 'average_order_value':\n                $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n                    '\n\t\t\t\tSELECT\n\t\t\t\t\tCOUNT(`id_order`) AS orders,\n\t\t\t\t\tSUM(`total_paid_tax_excl` / `conversion_rate`) AS total_paid_tax_excl\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'orders`\n\t\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL(date('Y-m-d', strtotime('-31 day'))) . ' 00:00:00\" AND \"' . pSQL(\n                        date('Y-m-d', strtotime('-1 day'))\n                    ) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n                $value = Tools::displayPrice(\n                    $row['orders'] ? $row['total_paid_tax_excl'] / $row['orders'] : 0,\n                    $currency\n                );\n                ConfigurationKPI::updateValue('AVG_ORDER_VALUE', $value);\n                ConfigurationKPI::updateValue(\n                    'AVG_ORDER_VALUE_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'netprofit_visit':\n                $date_from = date('Y-m-d', strtotime('-31 day'));\n                $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                $total_visitors = AdminStatsController::getVisits(false, $date_from, $date_to);\n                $net_profits = AdminStatsController::getTotalSales($date_from, $date_to);\n                $net_profits -= AdminStatsController::getExpenses($date_from, $date_to);\n                $net_profits -= AdminStatsController::getPurchases($date_from, $date_to);\n\n                if ($total_visitors) {\n                    $value = Tools::displayPrice($net_profits / $total_visitors, $currency);\n                } elseif ($net_profits) {\n                    $value = '&infin;';\n                } else {\n                    $value = Tools::displayPrice(0, $currency);\n                }\n\n                ConfigurationKPI::updateValue('NETPROFIT_VISIT', $value);\n                ConfigurationKPI::updateValue(\n                    'NETPROFIT_VISIT_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'products_per_category':\n                $products = AdminStatsController::getTotalProducts();\n                $categories = AdminStatsController::getTotalCategories();\n                $value = round($products / $categories);\n                ConfigurationKPI::updateValue('PRODUCTS_PER_CATEGORY', $value);\n                ConfigurationKPI::updateValue('PRODUCTS_PER_CATEGORY_EXPIRE', strtotime('+1 hour'));\n\n                break;\n\n            case 'top_category':\n                if (!($id_category = AdminStatsController::getBestCategory(\n                    date('Y-m-d', strtotime('-1 month')),\n                    date('Y-m-d')\n                ))) {\n                    $value = $this->trans('No category', array(), 'Admin.Stats.Feature');\n                } else {\n                    $category = new Category($id_category, $this->context->language->id);\n                    $value = $category->name;\n                }\n\n                ConfigurationKPI::updateValue('TOP_CATEGORY', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'TOP_CATEGORY_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            default:\n                $value = false;\n        }\n        if ($value !== false) {\n            $array = array('value' => $value, 'tooltip' => $tooltip);\n            if (isset($data)) {\n                $array['data'] = $data;\n            }\n            die(json_encode($array));\n        }\n        die(json_encode(array('has_errors' => true)));\n    }\n\n    /**\n     * Display graphs on the stats page from module data.\n     */\n    public function displayAjaxGraphDraw()\n    {\n        $module = Tools::getValue('module');\n        $render = Tools::getValue('render');\n        $type = Tools::getValue('type');\n        $option = Tools::getValue('option');\n        $layers = Tools::getValue('layers');\n        $width = Tools::getValue('width');\n        $height = Tools::getValue('height');\n        $id_employee = Tools::getValue('id_employee');\n        $id_lang = Tools::getValue('id_lang');\n\n        $graph = Module::getInstanceByName($module);\n        if (false === $graph) {\n            $this->ajaxRender(Tools::displayError());\n\n            return;\n        }\n\n        $graph->setEmployee($id_employee);\n        $graph->setLang($id_lang);\n        if ($option) {\n            $graph->setOption($option, $layers);\n        }\n\n        $graph->create($render, $type, $width, $height, $layers);\n        $graph->draw();\n    }\n\n    /**\n     * Display grid with module data on the stats page.\n     */\n    public function displayAjaxGraphGrid()\n    {\n        $module = Tools::getValue('module');\n        $render = Tools::getValue('render');\n        $type = Tools::getValue('type');\n        $option = Tools::getValue('option');\n        $width = (int) (Tools::getValue('width', 600));\n        $height = (int) (Tools::getValue('height', 920));\n        $start = (int) (Tools::getValue('start', 0));\n        $limit = (int) (Tools::getValue('limit', 40));\n        $sort = Tools::getValue('sort', 0); // Should be a String. Default value is an Integer because we don't know what can be the name of the column to sort.\n        $dir = Tools::getValue('dir', 0); // Should be a String : Either ASC or DESC\n        $id_employee = (int) (Tools::getValue('id_employee'));\n        $id_lang = (int) (Tools::getValue('id_lang'));\n\n        $grid = Module::getInstanceByName($module);\n        if (false === $grid) {\n            $this->ajaxRender(Tools::displayError());\n\n            return;\n        }\n\n        $grid->setEmployee($id_employee);\n        $grid->setLang($id_lang);\n        if ($option) {\n            $grid->setOption($option);\n        }\n\n        $grid->create($render, $type, $width, $height, $start, $limit, $sort, $dir);\n        $grid->render();\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property OrderState $object\n */\nclass AdminStatusesControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'order_state';\n        $this->className = 'OrderState';\n        $this->lang = true;\n        $this->deleted = false;\n        $this->colorOnBackground = false;\n        $this->multishop_context = Shop::CONTEXT_ALL;\n        $this->imageType = 'gif';\n        $this->fieldImageSettings = array(\n            'name' => 'icon',\n            'dir' => 'os',\n        );\n\n        parent::__construct();\n\n        $this->bulk_actions = array('delete' => array('text' => $this->trans('Delete selected', array(), 'Admin.Actions'), 'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning')));\n    }\n\n    public function init()\n    {\n        if (Tools::isSubmit('addorder_return_state')) {\n            $this->display = 'add';\n        }\n        if (Tools::isSubmit('updateorder_return_state')) {\n            $this->display = 'edit';\n        }\n\n        return parent::init();\n    }\n\n    /**\n     * init all variables to render the order status list.\n     */\n    protected function initOrderStatutsList()\n    {\n        $this->fields_list = array(\n            'id_order_state' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'width' => 'auto',\n                'color' => 'color',\n            ),\n            'logo' => array(\n                'title' => $this->trans('Icon', array(), 'Admin.Shopparameters.Feature'),\n                'align' => 'text-center',\n                'image' => 'os',\n                'orderby' => false,\n                'search' => false,\n                'class' => 'fixed-width-xs',\n            ),\n            'send_email' => array(\n                'title' => $this->trans('Send email to customer', array(), 'Admin.Shopparameters.Feature'),\n                'align' => 'text-center',\n                'active' => 'sendEmail',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'delivery' => array(\n                'title' => $this->trans('Delivery', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'active' => 'delivery',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'invoice' => array(\n                'title' => $this->trans('Invoice', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'active' => 'invoice',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'template' => array(\n                'title' => $this->trans('Email template', array(), 'Admin.Shopparameters.Feature'),\n            ),\n        );\n    }\n\n    /**\n     * init all variables to render the order return list.\n     */\n    protected function initOrdersReturnsList()\n    {\n        $this->table = 'order_return_state';\n        $this->className = 'OrderReturnState';\n        $this->_defaultOrderBy = $this->identifier = 'id_order_return_state';\n        $this->list_id = 'order_return_state';\n        $this->deleted = false;\n        $this->_orderBy = null;\n\n        $this->fields_list = array(\n            'id_order_return_state' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'align' => 'left',\n                'width' => 'auto',\n                'color' => 'color',\n            ),\n        );\n    }\n\n    protected function initOrderReturnsForm()\n    {\n        $id_order_return_state = (int) Tools::getValue('id_order_return_state');\n\n        // Create Object OrderReturnState\n        $order_return_state = new OrderReturnState($id_order_return_state);\n\n        //init field form variable for order return form\n        $this->fields_form = array();\n\n        //$this->initToolbar();\n        $this->getlanguages();\n        $helper = new HelperForm();\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->table = 'order_return_state';\n        $helper->identifier = 'id_order_return_state';\n        $helper->id = $order_return_state->id;\n        $helper->toolbar_scroll = false;\n        $helper->languages = $this->_languages;\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n\n        if ($order_return_state->id) {\n            $helper->fields_value = array(\n                'name' => $this->getFieldValue($order_return_state, 'name'),\n                'color' => $this->getFieldValue($order_return_state, 'color'),\n            );\n        } else {\n            $helper->fields_value = array(\n                'name' => $this->getFieldValue($order_return_state, 'name'),\n                'color' => '#ffffff',\n            );\n        }\n\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->title = $this->trans('Edit return status', array(), 'Admin.Shopparameters.Feature');\n\n        return $helper;\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_order_state'] = array(\n                'href' => self::$currentIndex . '&addorder_state&token=' . $this->token,\n                'desc' => $this->trans('Add new order status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'process-icon-new',\n            );\n            $this->page_header_toolbar_btn['new_order_return_state'] = array(\n                'href' => self::$currentIndex . '&addorder_return_state&token=' . $this->token,\n                'desc' => $this->trans('Add new order return status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * Function used to render the list to display for this controller.\n     */\n    public function renderList()\n    {\n        //init and render the first list\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n        $this->addRowActionSkipList('delete', $this->getUnremovableStatuses());\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n                'icon' => 'icon-trash',\n            ),\n        );\n        $this->initOrderStatutsList();\n        $lists = parent::renderList();\n\n        //init and render the second list\n        $this->list_skip_actions = array();\n        $this->_filter = false;\n        $this->addRowActionSkipList('delete', array(1, 2, 3, 4, 5));\n        $this->initOrdersReturnsList();\n        $this->checkFilterForOrdersReturnsList();\n\n        // call postProcess() to take care of actions and filters\n        $this->postProcess();\n        $this->toolbar_title = $this->trans('Return statuses', array(), 'Admin.Shopparameters.Feature');\n\n        parent::initToolbar();\n        $lists .= parent::renderList();\n\n        return $lists;\n    }\n\n    protected function getUnremovableStatuses()\n    {\n        return array_map(function ($row) {\n            return (int) $row['id_order_state'];\n        }, Db::getInstance()->executeS('SELECT id_order_state FROM ' . _DB_PREFIX_ . 'order_state WHERE unremovable = 1'));\n    }\n\n    protected function checkFilterForOrdersReturnsList()\n    {\n        // test if a filter is applied for this list\n        if (Tools::isSubmit('submitFilter' . $this->table) || $this->context->cookie->{'submitFilter' . $this->table} !== false) {\n            $this->filter = true;\n        }\n\n        // test if a filter reset request is required for this list\n        if (isset($_POST['submitReset' . $this->table])) {\n            $this->action = 'reset_filters';\n        } else {\n            $this->action = '';\n        }\n    }\n\n    public function renderForm()\n    {\n        $this->fields_form = array(\n            'tinymce' => true,\n            'legend' => array(\n                'title' => $this->trans('Order status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'icon-time',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Status name', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'required' => true,\n                    'hint' => array(\n                        $this->trans('Order status (e.g. \\'Pending\\').', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Invalid characters: numbers and', array(), 'Admin.Shopparameters.Help') . ' !<>,;?=+()@#\"{}_$%:',\n                    ),\n                ),\n                array(\n                    'type' => 'file',\n                    'label' => $this->trans('Icon', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'icon',\n                    'hint' => $this->trans('Upload an icon from your computer (File type: .gif, suggested size: 16x16).', array(), 'Admin.Shopparameters.Help'),\n                ),\n                array(\n                    'type' => 'color',\n                    'label' => $this->trans('Color', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'color',\n                    'hint' => $this->trans('Status will be highlighted in this color. HTML colors only.', array(), 'Admin.Shopparameters.Help') . ' \"lightblue\", \"#CC6600\")',\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'logable',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Consider the associated order as validated.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'invoice',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Allow a customer to download and view PDF versions of his/her invoices.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'hidden',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Hide this status in all customer orders.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'send_email',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Send an email to the customer when his/her order status has changed.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'pdf_invoice',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Attach invoice PDF to email.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'pdf_delivery',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Attach delivery slip PDF to email.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'shipped',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Set the order as shipped.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'paid',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Set the order as paid.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'delivery',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Show delivery PDF.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'select_template',\n                    'label' => $this->trans('Template', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'template',\n                    'lang' => true,\n                    'options' => array(\n                        'query' => $this->getTemplates(),\n                        'id' => 'id',\n                        'name' => 'name',\n                        'folder' => 'folder',\n                    ),\n                    'hint' => array(\n                        $this->trans('Only letters, numbers and underscores (\"_\") are allowed.', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Email template for both .html and .txt.', array(), 'Admin.Shopparameters.Help'),\n                    ),\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n        );\n\n        if (Tools::isSubmit('updateorder_state') || Tools::isSubmit('addorder_state')) {\n            return $this->renderOrderStatusForm();\n        } elseif (Tools::isSubmit('updateorder_return_state') || Tools::isSubmit('addorder_return_state')) {\n            return $this->renderOrderReturnsForm();\n        } else {\n            return parent::renderForm();\n        }\n    }\n\n    protected function renderOrderStatusForm()\n    {\n        if (!($obj = $this->loadObject(true))) {\n            return;\n        }\n\n        $this->fields_value = array(\n            'logable_on' => $this->getFieldValue($obj, 'logable'),\n            'invoice_on' => $this->getFieldValue($obj, 'invoice'),\n            'hidden_on' => $this->getFieldValue($obj, 'hidden'),\n            'send_email_on' => $this->getFieldValue($obj, 'send_email'),\n            'shipped_on' => $this->getFieldValue($obj, 'shipped'),\n            'paid_on' => $this->getFieldValue($obj, 'paid'),\n            'delivery_on' => $this->getFieldValue($obj, 'delivery'),\n            'pdf_delivery_on' => $this->getFieldValue($obj, 'pdf_delivery'),\n            'pdf_invoice_on' => $this->getFieldValue($obj, 'pdf_invoice'),\n        );\n\n        if ($this->getFieldValue($obj, 'color') !== false) {\n            $this->fields_value['color'] = $this->getFieldValue($obj, 'color');\n        } else {\n            $this->fields_value['color'] = '#ffffff';\n        }\n\n        return parent::renderForm();\n    }\n\n    protected function renderOrderReturnsForm()\n    {\n        $helper = $this->initOrderReturnsForm();\n        $helper->show_cancel_button = true;\n\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = self::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            die(Tools::displayError());\n        }\n\n        $helper->back_url = $back;\n\n        $this->fields_form[0]['form'] = array(\n            'tinymce' => true,\n            'legend' => array(\n                'title' => $this->trans('Return status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'icon-time',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Status name', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'required' => true,\n                    'hint' => array(\n                        $this->trans('Order\\'s return status name.', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Invalid characters: numbers and', array(), 'Admin.Shopparameters.Help') . ' !<>,;?=+()@#\"\ufffd{}_$%:',\n                    ),\n                ),\n                array(\n                    'type' => 'color',\n                    'label' => $this->trans('Color', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'color',\n                    'hint' => $this->trans('Status will be highlighted in this color. HTML colors only.', array(), 'Admin.Shopparameters.Help') . ' \"lightblue\", \"#CC6600\")',\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n        );\n\n        return $helper->generateForm($this->fields_form);\n    }\n\n    protected function getTemplates()\n    {\n        $default_path = '../mails/';\n        // Mail templates can also be found in the theme folder\n        $theme_path = '../themes/' . $this->context->shop->theme->getName() . '/mails/';\n\n        $array = array();\n        foreach (Language::getLanguages(false) as $language) {\n            $iso_code = $language['iso_code'];\n\n            // If there is no folder for the given iso_code in /mails or in /themes/[theme_name]/mails, we bypass this language\n            if (!@filemtime(_PS_ADMIN_DIR_ . '/' . $default_path . $iso_code) && !@filemtime(_PS_ADMIN_DIR_ . '/' . $theme_path . $iso_code)) {\n                continue;\n            }\n\n            $theme_templates_dir = _PS_ADMIN_DIR_ . '/' . $theme_path . $iso_code;\n            $theme_templates = is_dir($theme_templates_dir) ? scandir($theme_templates_dir, SCANDIR_SORT_NONE) : array();\n            // We merge all available emails in one array\n            $templates = array_unique(array_merge(scandir(_PS_ADMIN_DIR_ . '/' . $default_path . $iso_code, SCANDIR_SORT_NONE), $theme_templates));\n            foreach ($templates as $key => $template) {\n                if (!strncmp(strrev($template), 'lmth.', 5)) {\n                    $search_result = array_search($template, $theme_templates);\n                    $array[$iso_code][] = array(\n                        'id' => substr($template, 0, -5),\n                        'name' => substr($template, 0, -5),\n                        'folder' => ((!empty($search_result) ? $theme_path : $default_path)),\n                    );\n                }\n            }\n        }\n\n        return $array;\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit($this->table . 'Orderby') || Tools::isSubmit($this->table . 'Orderway')) {\n            $this->filter = true;\n        }\n\n        if (Tools::isSubmit('submitAddorder_return_state')) {\n            $id_order_return_state = Tools::getValue('id_order_return_state');\n\n            // Create Object OrderReturnState\n            $order_return_state = new OrderReturnState((int) $id_order_return_state);\n\n            $order_return_state->color = Tools::getValue('color');\n            $order_return_state->name = array();\n            foreach (Language::getIDs(false) as $id_lang) {\n                $order_return_state->name[$id_lang] = Tools::getValue('name_' . $id_lang);\n            }\n\n            // Update object\n            if (!$order_return_state->save()) {\n                $this->errors[] = $this->trans('An error has occurred: Can\\'t save the current order\\'s return status.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=4&token=' . $this->token);\n            }\n        }\n\n        if (Tools::isSubmit('submitBulkdeleteorder_return_state')) {\n            $this->className = 'OrderReturnState';\n            $this->table = 'order_return_state';\n            $this->boxes = Tools::getValue('order_return_stateBox');\n            parent::processBulkDelete();\n        }\n\n        if (Tools::isSubmit('deleteorder_return_state')) {\n            $id_order_return_state = Tools::getValue('id_order_return_state');\n\n            // Create Object OrderReturnState\n            $order_return_state = new OrderReturnState((int) $id_order_return_state);\n\n            if (!$order_return_state->delete()) {\n                $this->errors[] = $this->trans('An error has occurred: Can\\'t delete the current order\\'s return status.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=1&token=' . $this->token);\n            }\n        }\n\n        if (Tools::isSubmit('submitAdd' . $this->table)) {\n            $this->deleted = false; // Disabling saving historisation\n            $_POST['invoice'] = (int) Tools::getValue('invoice_on');\n            $_POST['logable'] = (int) Tools::getValue('logable_on');\n            $_POST['send_email'] = (int) Tools::getValue('send_email_on');\n            $_POST['hidden'] = (int) Tools::getValue('hidden_on');\n            $_POST['shipped'] = (int) Tools::getValue('shipped_on');\n            $_POST['paid'] = (int) Tools::getValue('paid_on');\n            $_POST['delivery'] = (int) Tools::getValue('delivery_on');\n            $_POST['pdf_delivery'] = (int) Tools::getValue('pdf_delivery_on');\n            $_POST['pdf_invoice'] = (int) Tools::getValue('pdf_invoice_on');\n            if (!$_POST['send_email']) {\n                foreach (Language::getIDs(false) as $id_lang) {\n                    $_POST['template_' . $id_lang] = '';\n                }\n            }\n\n            return parent::postProcess();\n        } elseif (Tools::isSubmit('delete' . $this->table)) {\n            $order_state = new OrderState(Tools::getValue('id_order_state'), $this->context->language->id);\n            if (!$order_state->isRemovable()) {\n                $this->errors[] = $this->trans('For security reasons, you cannot delete default order statuses.', array(), 'Admin.Shopparameters.Notification');\n            } else {\n                return parent::postProcess();\n            }\n        } elseif (Tools::isSubmit('submitBulkdelete' . $this->table)) {\n            foreach (Tools::getValue($this->table . 'Box') as $selection) {\n                $order_state = new OrderState((int) $selection, $this->context->language->id);\n                if (!$order_state->isRemovable()) {\n                    $this->errors[] = $this->trans('For security reasons, you cannot delete default order statuses.', array(), 'Admin.Shopparameters.Notification');\n\n                    break;\n                }\n            }\n\n            if (!count($this->errors)) {\n                return parent::postProcess();\n            }\n        } else {\n            return parent::postProcess();\n        }\n    }\n\n    protected function filterToField($key, $filter)\n    {\n        if ($this->table == 'order_state') {\n            $this->initOrderStatutsList();\n        } elseif ($this->table == 'order_return_state') {\n            $this->initOrdersReturnsList();\n        }\n\n        return parent::filterToField($key, $filter);\n    }\n\n    protected function afterImageUpload()\n    {\n        parent::afterImageUpload();\n\n        if (($id_order_state = (int) Tools::getValue('id_order_state')) &&\n             isset($_FILES) && count($_FILES) && file_exists(_PS_ORDER_STATE_IMG_DIR_ . $id_order_state . '.gif')) {\n            $current_file = _PS_TMP_IMG_DIR_ . 'order_state_mini_' . $id_order_state . '_' . $this->context->shop->id . '.gif';\n\n            if (file_exists($current_file)) {\n                unlink($current_file);\n            }\n        }\n\n        return true;\n    }\n\n    public function ajaxProcessSendEmailOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `send_email`= NOT `send_email` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n\n    public function ajaxProcessDeliveryOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `delivery`= NOT `delivery` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n\n    public function ajaxProcessInvoiceOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `invoice`= NOT `invoice` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Product;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass AttributeController extends FrameworkBundleAdminController\n{\n    /**\n     * get All Attributes as json.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @return JsonResponse\n     */\n    public function getAllAttributesAction()\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $attributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributes($locales[0]['id_lang'], true);\n\n        $dataGroupAttributes = [];\n        $data = [];\n        foreach ($attributes as $attribute) {\n            /* Construct attribute group selector. Ex : Color : All */\n            $dataGroupAttributes[$attribute['id_attribute_group']] = [\n                'value' => 'group-' . $attribute['id_attribute_group'],\n                'label' => $attribute['public_name'] . ' : ' . $this->trans('All', 'Admin.Global'),\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['public_name'],\n                ],\n            ];\n\n            $data[] = [\n                'value' => $attribute['id_attribute'],\n                'label' => $attribute['public_name'] . ' : ' . $attribute['name'],\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['name'],\n                ],\n            ];\n        }\n\n        $data = array_merge($dataGroupAttributes, $data);\n\n        $response->setData($data);\n\n        return $response;\n    }\n\n    /**\n     * Attributes generator.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function attributesGeneratorAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $options = $request->get('options');\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!is_object($product) || empty($product->id) || empty($options) || !is_array($options)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        //store exisiting product combinations\n        $existingCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $product->getAttributeCombinations(1, false));\n\n        //get clean attributes ids\n        $newOptions = [];\n        foreach ($options as $idGroup => $attributes) {\n            foreach ($attributes as $attribute) {\n                //If attribute is a group attribute, replace group data by all attributes group\n                if (false !== strpos($attribute, 'group')) {\n                    $allGroupAttributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributeIdsByGroup((int) $idGroup, true);\n                    foreach ($allGroupAttributes as $groupAttribute) {\n                        $newOptions[$idGroup][$groupAttribute] = $groupAttribute;\n                    }\n                } else {\n                    $newOptions[$idGroup][$attribute] = $attribute;\n                }\n            }\n        }\n\n        //create attributes\n        $this->get('prestashop.adapter.admin.controller.attribute_generator')->processGenerate($product, $newOptions);\n\n        //get all product combinations\n        $allCombinations = $product->getAttributeCombinations(1, false);\n\n        $allCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $allCombinations);\n\n        //get new created combinations Ids\n        $newCombinationIds = array_diff($allCombinationsIds, $existingCombinationsIds);\n\n        $attributes = $product->sortCombinationByAttributePosition($newCombinationIds, $locales[0]['id_lang']);\n        $this->ensureProductHasDefaultCombination($product, $attributes);\n\n        $response = new JsonResponse();\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $result = array(\n            'ids_product_attribute' => array(),\n            'form' => '',\n        );\n\n        foreach ($attributes as $attribute) {\n            foreach ($attribute as $combination) {\n                $form = $this->get('form.factory')\n                    ->createNamed(\n                        'combination_' . $combination['id_product_attribute'],\n                        'PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination',\n                        $combinationDataProvider->getFormCombination($combination['id_product_attribute'])\n                    );\n                $result['form'] .= $this->renderView(\n                    '@Product/ProductPage/Forms/form_combination.html.twig',\n                    array(\n                        'form' => $form->createView(),\n                    )\n                );\n                $result['ids_product_attribute'][] = $combination['id_product_attribute'];\n            }\n        }\n\n        return $response->create($result);\n    }\n\n    /**\n     * @param Product $product\n     * @param array $combinations\n     */\n    public function ensureProductHasDefaultCombination(Product $product, array $combinations)\n    {\n        if (count($combinations)) {\n            $defaultProductAttributeId = $product->getDefaultIdProductAttribute();\n            if (!$defaultProductAttributeId) {\n                /*\n                 * Combinations indexed by position, then attribute id\n                 * ex: $combinations = [\n                 *  3 => [ //4th position attribute\n                 *      45 => [ //product_attribute id\n                 *      ]\n                 *  ]\n                 * ]\n                 */\n                $firstPosition = array_keys($combinations)[0];\n                if (!empty($combinations[$firstPosition])) {\n                    $firstAttributeId = array_keys($combinations[$firstPosition])[0];\n                    $product->setDefaultAttribute($firstAttributeId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a product attribute.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAttributeAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n\n        if (!$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $legacyResponse = false;\n\n        if ($request->request->has('attribute-ids')) {\n            $attributeIds = $request->request->get('attribute-ids');\n            foreach ($attributeIds as $attributeId) {\n                $legacyResponse = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                    ->ajaxProcessDeleteProductAttribute($attributeId, $idProduct);\n            }\n\n            if ($legacyResponse['status'] == 'error') {\n                $response->setStatusCode(400);\n            }\n\n            $response->setData(['message' => $legacyResponse['message']]);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete all product attributes.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAllAttributeAction($idProduct, Request $request)\n    {\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $response = new JsonResponse();\n\n        //get all attribute for a product\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n\n        if (!$combinations || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $res = false;\n\n        foreach ($combinations as $combination) {\n            $res = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                ->ajaxProcessDeleteProductAttribute($combination['id_product_attribute'], $idProduct);\n\n            if ($res['status'] == 'error') {\n                $response->setStatusCode(400);\n\n                break;\n            }\n        }\n\n        $response->setData(['message' => $res['message']]);\n\n        return $response;\n    }\n\n    /**\n     * get the images form for a product combinations.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product id\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function getFormImagesAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get product images\n        $productImages = $productAdapter->getImages($idProduct, $locales[0]['id_lang']);\n\n        if (!$request->isXmlHttpRequest() || !is_object($product) || empty($product->id)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        $data = [];\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n        foreach ($combinations as $combination) {\n            //get combination images\n            $combinationImages = array_map(function ($o) {\n                return $o['id'];\n            }, $attributeAdapter->getImages($combination['id_product_attribute']));\n\n            $newProductImages = $productImages;\n            foreach ($newProductImages as $k => $image) {\n                $newProductImages[$k]['id_image_attr'] = false;\n                if (in_array($image['id'], $combinationImages)) {\n                    $newProductImages[$k]['id_image_attr'] = true;\n                }\n            }\n\n            $data[$combination['id_product_attribute']] = $newProductImages;\n        }\n\n        $response->setData($data);\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\AdvancedParameters;\n\nuse PrestaShop\\PrestaShop\\Core\\Import\\Exception\\NotSupportedImportEntityException;\nuse PrestaShop\\PrestaShop\\Core\\Import\\Exception\\UnavailableImportFileException;\nuse PrestaShop\\PrestaShop\\Core\\Import\\ImportDirectory;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Exception\\FileUploadException;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\n\n/**\n * Responsible of \"Configure > Advanced Parameters > Import\" page display.\n */\nclass ImportController extends FrameworkBundleAdminController\n{\n    /**\n     * Show import form & handle forwarding to legacy controller.\n     *\n     * @param Request $request\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @return array|RedirectResponse|Response\n     */\n    public function importAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $importDir = $this->get('prestashop.core.import.dir');\n\n        if (!$this->checkImportDirectory($importDir)) {\n            return $this->getTemplateParams($request);\n        }\n\n        $formHandler = $this->get('prestashop.admin.import.form_handler');\n        $finder = $this->get('prestashop.core.import.file_finder');\n        $iniConfiguration = $this->get('prestashop.core.configuration.ini_configuration');\n        $importConfigFactory = $this->get('prestashop.core.import.config_factory');\n\n        $importConfig = $importConfigFactory->buildFromRequest($request);\n        $form = $formHandler->getForm($importConfig);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            if (!$this->checkImportFormSubmitPermissions($legacyController)) {\n                return $this->redirectToRoute('admin_import');\n            }\n\n            $data = $form->getData();\n\n            if (!$errors = $formHandler->save($data)) {\n                // WIP import page 2 redirect\n                /*return $this->redirectToRoute(\n                    'admin_import_data_configuration_index',\n                    [],\n                    Response::HTTP_TEMPORARY_REDIRECT\n                );*/\n                return $this->forwardRequestToLegacyResponse($request);\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        $params = [\n            'importForm' => $form->createView(),\n            'importFileUploadUrl' => $this->generateUrl('admin_import_file_upload'),\n            'importFileNames' => $finder->getImportFileNames(),\n            'importDirectory' => $importDir->getDir(),\n            'maxFileUploadSize' => $iniConfiguration->getPostMaxSizeInBytes(),\n        ];\n\n        return $this->render(\n            '@PrestaShop/Admin/Configure/AdvancedParameters/ImportPage/import.html.twig',\n            $this->getTemplateParams($request) + $params\n        );\n    }\n\n    /**\n     * Handle import file upload via AJAX, sending authorization errors in JSON.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        if ($this->isDemoModeEnabled()) {\n            return $this->json([\n                'error' => $this->trans('This functionality has been disabled.', 'Admin.Notifications.Error'),\n            ]);\n        }\n\n        if (!in_array($this->authorizationLevel($legacyController), [\n            PageVoter::LEVEL_CREATE,\n            PageVoter::LEVEL_UPDATE,\n            PageVoter::LEVEL_DELETE,\n        ])) {\n            return $this->json([\n                'error' => $this->trans('You do not have permission to update this.', 'Admin.Notifications.Error'),\n            ]);\n        }\n\n        $uploadedFile = $request->files->get('file');\n        if (!$uploadedFile instanceof UploadedFile) {\n            return $this->json([\n                'error' => $this->trans('No file was uploaded.', 'Admin.Advparameters.Notification'),\n            ]);\n        }\n\n        try {\n            $fileUploader = $this->get('prestashop.core.import.file_uploader');\n            $file = $fileUploader->upload($uploadedFile);\n        } catch (FileUploadException $e) {\n            return $this->json(['error' => $e->getMessage()]);\n        }\n\n        $response['file'] = [\n            'name' => $file->getFilename(),\n            'size' => $file->getSize(),\n        ];\n\n        return $this->json($response);\n    }\n\n    /**\n     * Delete import file.\n     *\n     * @AdminSecurity(\"is_granted('delete', request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $filename = $request->query->get('filename', $request->query->get('csvfilename'));\n        if ($filename) {\n            $fileRemoval = $this->get('prestashop.core.import.file_removal');\n            $fileRemoval->remove($filename);\n        }\n\n        return $this->redirectToRoute('admin_import');\n    }\n\n    /**\n     * Download import file from history.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function downloadAction(Request $request)\n    {\n        if ($filename = $request->query->get('filename')) {\n            $importDirectory = $this->get('prestashop.core.import.dir');\n\n            $response = new BinaryFileResponse($importDirectory . $filename);\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $filename);\n\n            return $response;\n        }\n\n        return $this->redirectToRoute('admin_import');\n    }\n\n    /**\n     * Download import sample file.\n     *\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\", redirectRoute=\"admin_import\")\n     *\n     * @param $sampleName\n     *\n     * @return Response\n     */\n    public function downloadSampleAction($sampleName)\n    {\n        $sampleFileProvider = $this->get('prestashop.core.import.sample.file_provider');\n        $sampleFile = $sampleFileProvider->getFile($sampleName);\n\n        if (null === $sampleFile) {\n            return $this->redirectToRoute('admin_import');\n        }\n\n        $response = new BinaryFileResponse($sampleFile->getPathname());\n        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $sampleFile->getFilename());\n\n        return $response;\n    }\n\n    /**\n     * Get available entity fields.\n     *\n     * @AdminSecurity(\n     *     \"is_granted('read', request.get('_legacy_controller'))\",\n     *     redirectRoute=\"admin_import\"\n     * )\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableEntityFieldsAction(Request $request)\n    {\n        $fieldsProviderFinder = $this->get('prestashop.core.import.fields_provider_finder');\n        try {\n            $fieldsProvider = $fieldsProviderFinder->find($request->get('entity'));\n            $fieldsCollection = $fieldsProvider->getCollection();\n            $entityFields = $fieldsCollection->toArray();\n        } catch (NotSupportedImportEntityException $e) {\n            $entityFields = [];\n        }\n\n        return $this->json($entityFields);\n    }\n\n    /**\n     * Process the import.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function processImportAction(Request $request)\n    {\n        $errors = [];\n        $requestValidator = $this->get('prestashop.core.import.request_validator');\n\n        try {\n            $requestValidator->validate($request);\n        } catch (UnavailableImportFileException $e) {\n            $errors[] = $this->trans('To proceed, please upload a file first.', 'Admin.Advparameters.Notification');\n        }\n\n        if (!empty($errors)) {\n            return $this->json([\n                'errors' => $errors,\n                'isFinished' => true,\n            ]);\n        }\n\n        $importer = $this->get('prestashop.core.import.importer');\n        $importConfigFactory = $this->get('prestashop.core.import.config_factory');\n        $runtimeConfigFactory = $this->get('prestashop.core.import.runtime_config_factory');\n        $importHandlerFinder = $this->get('prestashop.adapter.import.handler_finder');\n\n        $importConfig = $importConfigFactory->buildFromRequest($request);\n        $runtimeConfig = $runtimeConfigFactory->buildFromRequest($request);\n\n        $importer->import(\n            $importConfig,\n            $runtimeConfig,\n            $importHandlerFinder->find($importConfig->getEntityType())\n        );\n\n        return $this->json($runtimeConfig->toArray());\n    }\n\n    /**\n     * Get generic template parameters.\n     *\n     * @param Request $request\n     *\n     * @return array\n     */\n    protected function getTemplateParams(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        return [\n            'layoutHeaderToolbarBtn' => [],\n            'layoutTitle' => $this->get('translator')->trans('Import', [], 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'requireBulkActions' => false,\n            'showContentHeader' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n        ];\n    }\n\n    /**\n     * Checks permissions of import form in step 1.\n     *\n     * @param $legacyController\n     *\n     * @return bool\n     */\n    private function checkImportFormSubmitPermissions($legacyController)\n    {\n        if ($this->isDemoModeEnabled()) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'This functionality has been disabled.',\n                    'Admin.Notifications.Error'\n                )\n            );\n\n            return false;\n        }\n\n        if (!in_array($this->authorizationLevel($legacyController), [\n            PageVoter::LEVEL_CREATE,\n            PageVoter::LEVEL_UPDATE,\n            PageVoter::LEVEL_DELETE,\n        ])) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'You do not have permission to update this.',\n                    'Admin.Notifications.Error'\n                )\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if the import directory exists and is accessible.\n     *\n     * @param ImportDirectory $importDir\n     *\n     * @return array|bool\n     */\n    private function checkImportDirectory(ImportDirectory $importDir)\n    {\n        if (!$importDir->exists()) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'The import directory doesn\\'t exist. Please check your file path.',\n                    'Admin.Advparameters.Notification'\n                )\n            );\n\n            return false;\n        }\n\n        if (!$importDir->isWritable()) {\n            $this->addFlash(\n                'warning',\n                $this->trans(\n                    'The import directory must be writable (CHMOD 755 / 777).',\n                    'Admin.Advparameters.Notification'\n                )\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Forwards submitted form data to legacy import page.\n     * To be removed in 1.7.7 version.\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    private function forwardRequestToLegacyResponse(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n        $legacyContext = $this->get('prestashop.adapter.legacy.context');\n\n        $legacyImportUrl = $legacyContext->getLegacyAdminLink($legacyController);\n\n        return $this->redirect($legacyImportUrl, Response::HTTP_TEMPORARY_REDIRECT);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\AdvancedParameters;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Responsible of \"Configure > Advanced Parameters > Performance\" page display.\n */\nclass PerformanceController extends FrameworkBundleAdminController\n{\n    const CONTROLLER_NAME = 'AdminPerformance';\n\n    /**\n     * Displays the Performance main page.\n     *\n     * @Template(\"@PrestaShop/Admin/Configure/AdvancedParameters/performance.html.twig\")\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param FormInterface $form\n     *\n     * @return array\n     */\n    public function indexAction(FormInterface $form = null)\n    {\n        $toolbarButtons = [\n            'clear_cache' => [\n                'href' => $this->generateUrl('admin_clear_cache'),\n                'desc' => $this->trans('Clear cache', 'Admin.Advparameters.Feature'),\n                'icon' => 'delete',\n            ],\n        ];\n\n        $form = null === $form ? $this->get('prestashop.adapter.performance.form_handler')->getForm() : $form;\n\n        return [\n            'layoutHeaderToolbarBtn' => $toolbarButtons,\n            'layoutTitle' => $this->trans('Performance', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'requireBulkActions' => false,\n            'showContentHeader' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink('AdminPerformance'),\n            'requireFilterStatus' => false,\n            'form' => $form->createView(),\n            'servers' => $this->get('prestashop.adapter.memcache_server.manager')->getServers(),\n        ];\n    }\n\n    /**\n     * Process the Performance configuration form.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\")\n     * @DemoRestricted(redirectRoute=\"admin_performance\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function processFormAction(Request $request)\n    {\n        $this->dispatchHook('actionAdminPerformanceControllerPostProcessBefore', array('controller' => $this));\n        $form = $this->get('prestashop.adapter.performance.form_handler')->getForm();\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $data = $form->getData();\n\n            $saveErrors = $this->get('prestashop.adapter.performance.form_handler')->save($data);\n\n            if (0 === count($saveErrors)) {\n                $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_performance');\n            }\n\n            $this->flashErrors($saveErrors);\n        }\n\n        return $this->redirectToRoute('admin_performance');\n    }\n\n    /**\n     * @AdminSecurity(\"is_granted(['delete'], request.get('_legacy_controller'))\",\n     *     message=\"You do not have permission to update this.\",\n     *     redirectRoute=\"admin_performance\"\n     * )\n     *\n     * @return RedirectResponse\n     */\n    public function clearCacheAction()\n    {\n        $this->get('prestashop.core.cache.clearer.cache_clearer_chain')->clear();\n        $this->addFlash('success', $this->trans('All caches cleared successfully', 'Admin.Advparameters.Notification'));\n\n        return $this->redirectToRoute('admin_performance');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\ShopParameters;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Controller responsible of \"Configure > Shop Parameters > Customer Settings\" page.\n */\nclass CustomerPreferencesController extends FrameworkBundleAdminController\n{\n    /**\n     * Show customer preferences page.\n     *\n     * @Template(\"@PrestaShop/Admin/Configure/ShopParameters/customer_preferences.html.twig\")\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return array Template parameters\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $form = $this->get('prestashop.admin.customer_preferences.form_handler')->getForm();\n\n        return [\n            'layoutTitle' => $this->trans('Customers', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'form' => $form->createView(),\n        ];\n    }\n\n    /**\n     * Process the Customer Preferences configuration form.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_customer_preferences\")\n     * @DemoRestricted(redirectRoute=\"admin_customer_preferences\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function processAction(Request $request)\n    {\n        $formHandler = $this->get('prestashop.admin.customer_preferences.form_handler');\n\n        $form = $formHandler->getForm();\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $data = $form->getData();\n\n            if ($errors = $formHandler->save($data)) {\n                $this->flashErrors($errors);\n\n                return $this->redirectToRoute('admin_customer_preferences');\n            }\n\n            $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n        }\n\n        return $this->redirectToRoute('admin_customer_preferences');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Improve\\International;\n\nuse PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class GeolocationController is responsible for \"Improve > International > Localization > Geolocation\" page.\n */\nclass GeolocationController extends FrameworkBundleAdminController\n{\n    /**\n     * Show geolocation page.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $geolocationForm = $this->getGeolocationFormHandler()->getForm();\n        $geoLiteCityChecker = $this->get('prestashop.core.geolocation.geo_lite_city.checker');\n\n        return $this->render('@PrestaShop/Admin/Improve/International/Geolocation/index.html.twig', [\n            'layoutTitle' => $this->trans('Geolocation', 'Admin.Navigation.Menu'),\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'geolocationForm' => $geolocationForm->createView(),\n            'geolocationDatabaseAvailable' => $geoLiteCityChecker->isAvailable(),\n        ]);\n    }\n\n    /**\n     * Process geolocation configuration form.\n     *\n     * @AdminSecurity(\n     *     \"is_granted(['read', 'update', 'create', 'delete'], request.get('_legacy_controller'))\",\n     *     message=\"You do not have permission to edit this.\",\n     *     redirectRoute=\"admin_geolocation\"\n     * )\n     * @DemoRestricted(redirectRoute=\"admin_geolocation_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function saveOptionsAction(Request $request)\n    {\n        $geolocationFormHandler = $this->getGeolocationFormHandler();\n\n        $geolocationForm = $geolocationFormHandler->getForm();\n        $geolocationForm->handleRequest($request);\n\n        if ($geolocationForm->isSubmitted()) {\n            $errors = $geolocationFormHandler->save($geolocationForm->getData());\n\n            if (empty($errors)) {\n                $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_geolocation_index');\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        return $this->redirectToRoute('admin_geolocation_index');\n    }\n\n    /**\n     * @return FormHandlerInterface\n     */\n    protected function getGeolocationFormHandler()\n    {\n        return $this->get('prestashop.admin.geolocation.form_handler');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Improve\\International;\n\nuse PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Pack\\Import\\LocalizationPackImportConfig;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Form\\Admin\\Improve\\International\\Localization\\ImportLocalizationPackType;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class LocalizationController is responsible for handling \"Improve > International > Localization\" page.\n */\nclass LocalizationController extends FrameworkBundleAdminController\n{\n    /**\n     * Show localization settings page.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        if (!extension_loaded('openssl')) {\n            $this->addFlash('warning', $this->trans('Importing a new language may fail without the OpenSSL module. Please enable \"openssl.so\" on your server configuration.', 'Admin.International.Notification'));\n        }\n\n        $localizationPackImportForm = $this->createForm(ImportLocalizationPackType::class);\n        $localizationForm = $this->getLocalizationFormHandler()->getForm();\n\n        return $this->render('@PrestaShop/Admin/Improve/International/Localization/index.html.twig', [\n            'layoutHeaderToolbarBtn' => [],\n            'layoutTitle' => $this->trans('Localization', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'localizationForm' => $localizationForm->createView(),\n            'localizationPackImportForm' => $localizationPackImportForm->createView(),\n        ]);\n    }\n\n    /**\n     * Save localization settings.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to edit this.\")\n     * @DemoRestricted(redirectRoute=\"admin_localization_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function saveOptionsAction(Request $request)\n    {\n        $localizationFormHandler = $this->getLocalizationFormHandler();\n\n        $localizationForm = $localizationFormHandler->getForm();\n        $localizationForm->handleRequest($request);\n\n        if ($localizationForm->isSubmitted()) {\n            $data = $localizationForm->getData();\n\n            $errors = $localizationFormHandler->save($data);\n            if (empty($errors)) {\n                $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_localization_index');\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        return $this->redirectToRoute('admin_localization_index');\n    }\n\n    /**\n     * Handles localization pack import.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to edit this.\")\n     * @DemoRestricted(redirectRoute=\"admin_localization_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function importPackAction(Request $request)\n    {\n        $localizationPackImportForm = $this->createForm(ImportLocalizationPackType::class);\n        $localizationPackImportForm->handleRequest($request);\n\n        if ($localizationPackImportForm->isSubmitted()) {\n            $data = $localizationPackImportForm->getData();\n\n            $localizationImportConfig = new LocalizationPackImportConfig(\n                $data['iso_localization_pack'],\n                $data['content_to_import'],\n                $data['download_pack_data']\n            );\n\n            $localizationPackImporter = $this->get('prestashop.core.localization.pack.import.importer');\n            $errors = $localizationPackImporter->import($localizationImportConfig);\n\n            if (empty($errors)) {\n                $this->addFlash(\n                    'success',\n                    $this->trans('Localization pack imported successfully.', 'Admin.International.Notification')\n                );\n\n                return $this->redirectToRoute('admin_localization_index');\n            }\n\n            foreach ($errors as $error) {\n                $this->addFlash('error', $error);\n            }\n        }\n\n        return $this->redirectToRoute('admin_localization_index');\n    }\n\n    /**\n     * Returns localization settings form handler.\n     *\n     * @return FormHandlerInterface\n     */\n    private function getLocalizationFormHandler()\n    {\n        return $this->get('prestashop.admin.localization.form_handler');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Category;\nuse Exception;\nuse PrestaShop\\PrestaShop\\Adapter\\Product\\ListParametersUpdater;\nuse PrestaShop\\PrestaShop\\Adapter\\Tax\\TaxRuleDataProvider;\nuse PrestaShop\\PrestaShop\\Adapter\\Warehouse\\WarehouseDataProvider;\nuse PrestaShopBundle\\Component\\CsvResponse;\nuse PrestaShopBundle\\Entity\\AdminFilter;\nuse PrestaShopBundle\\Exception\\UpdateProductException;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCategories;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombinationBulk;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductInformation;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductOptions;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductPrice;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductQuantity;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductSeo;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductShipping;\nuse PrestaShopBundle\\Model\\Product\\AdminModelAdapter;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse PrestaShopBundle\\Service\\DataProvider\\Admin\\ProductInterface as ProductInterfaceProvider;\nuse PrestaShopBundle\\Service\\DataProvider\\StockInterface;\nuse PrestaShopBundle\\Service\\DataUpdater\\Admin\\ProductInterface as ProductInterfaceUpdater;\nuse PrestaShopBundle\\Service\\Hook\\HookFinder;\nuse Product;\nuse Psr\\Log\\LoggerInterface;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType;\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Tools;\n\n/**\n * Admin controller for the Product pages using the Symfony architecture:\n * - categories\n * - product list\n * - product details\n * - product attributes\n * - ...\n *\n * This controller is the first one to be refactored to the new Symfony Architecture.\n * The retro-compatibility is dropped for the corresponding Admin pages.\n * A set of hooks are integrated and an Adapter is made to wrap the new EventDispatcher\n * component to the existing hook system. So existing hooks are always triggered, but from the new\n * code (and so needs to be adapted on the module side ton comply on the new parameters formats,\n * the new UI style, etc...).\n */\nclass ProductController extends FrameworkBundleAdminController\n{\n    /**\n     * Used to validate connected user authorizations.\n     */\n    const PRODUCT_OBJECT = 'ADMINPRODUCTS_';\n\n    /**\n     * Get the Catalog page with KPI banner, product list, bulk actions, filters, search, etc...\n     *\n     * URL example: /product/catalog/40/20/id_product/asc\n     *\n     * @Template(\"@PrestaShop/Admin/Product/CatalogPage/catalog.html.twig\")\n     *\n     * @param Request $request\n     * @param int $limit The size of the listing\n     * @param int $offset The offset of the listing\n     * @param string $orderBy To order product list\n     * @param string $sortOrder To order product list\n     *\n     * @return array|Template|RedirectResponse|Response\n     *\n     * @throws \\Symfony\\Component\\Translation\\Exception\\InvalidArgumentException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\RouteNotFoundException\n     * @throws \\LogicException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\MissingMandatoryParametersException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\InvalidParameterException\n     * @throws \\Symfony\\Component\\Form\\Exception\\LogicException\n     * @throws \\Symfony\\Component\\Form\\Exception\\AlreadySubmittedException\n     */\n    public function catalogAction(\n        Request $request,\n        $limit = 10,\n        $offset = 0,\n        $orderBy = 'id_product',\n        $sortOrder = 'desc'\n    ) {\n        if (!$this->isGranted(array(PageVoter::READ, PageVoter::UPDATE, PageVoter::CREATE), self::PRODUCT_OBJECT)) {\n            return $this->redirect('admin_dashboard');\n        }\n\n        $language = $this->getContext()->language;\n        $request->getSession()->set('_locale', $language->locale);\n        $request = $this->get('prestashop.adapter.product.filter_categories_request_purifier')->purify($request);\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        // Set values from persistence and replace in the request\n        $persistedFilterParameters = $productProvider->getPersistedFilterParameters();\n        /** @var ListParametersUpdater $listParametersUpdater */\n        $listParametersUpdater = $this->get('prestashop.adapter.product.list_parameters_updater');\n        $listParameters = $listParametersUpdater->buildListParameters(\n            $request->query->all(),\n            $persistedFilterParameters,\n            compact('offset', 'limit', 'orderBy', 'sortOrder')\n        );\n        $offset = $listParameters['offset'];\n        $limit = $listParameters['limit'];\n        $orderBy = $listParameters['orderBy'];\n        $sortOrder = $listParameters['sortOrder'];\n\n        //The product provider performs the same merge internally, so we do the same so that the displayed filters are\n        //consistent with the request ones\n        $combinedFilterParameters = array_replace($persistedFilterParameters, $request->request->all());\n\n        $toolbarButtons = $this->getToolbarButtons();\n\n        // Fetch product list (and cache it into view subcall to listAction)\n        $products = $productProvider->getCatalogProductList(\n            $offset,\n            $limit,\n            $orderBy,\n            $sortOrder,\n            $request->request->all()\n        );\n        $lastSql = $productProvider->getLastCompiledSql();\n\n        $hasCategoryFilter = $productProvider->isCategoryFiltered();\n        $hasColumnFilter = $productProvider->isColumnFiltered();\n        $totalFilteredProductCount = (count($products) > 0) ? $products[0]['total'] : 0;\n        // Alternative layout for empty list\n        if ((!$hasCategoryFilter && !$hasColumnFilter && $totalFilteredProductCount === 0)\n            || ($totalProductCount = $productProvider->countAllProducts()) === 0\n        ) {\n            // no filter, total filtered == 0, and then total count == 0 too.\n            $legacyUrlGenerator = $this->get('prestashop.core.admin.url_generator_legacy');\n\n            return $this->render(\n                '@PrestaShop/Admin/Product/CatalogPage/catalog_empty.html.twig',\n                [\n                    'layoutHeaderToolbarBtn' => $toolbarButtons,\n                    'import_url' => $legacyUrlGenerator->generate('AdminImport'),\n                ]\n            );\n        }\n\n        // Pagination\n        $paginationParameters = $request->attributes->all();\n        $paginationParameters['_route'] = 'admin_product_catalog';\n        $categoriesForm = $this->createForm(ProductCategories::class);\n        if (!empty($persistedFilterParameters['filter_category'])) {\n            $categoriesForm->setData(\n                [\n                    'categories' => [\n                        'tree' => [0 => $combinedFilterParameters['filter_category']],\n                    ],\n                ]\n            );\n        }\n\n        $cleanFilterParameters = $listParametersUpdater->cleanFiltersForPositionOrdering(\n            $combinedFilterParameters,\n            $orderBy,\n            $hasCategoryFilter\n        );\n\n        $permissionError = null;\n        if ($this->get('session')->getFlashBag()->has('permission_error')) {\n            $permissionError = $this->get('session')->getFlashBag()->get('permission_error')[0];\n        }\n\n        $categoriesFormView = $categoriesForm->createView();\n        $selectedCategory = !empty($combinedFilterParameters['filter_category']) ? new Category($combinedFilterParameters['filter_category']) : null;\n\n        //Drag and drop is ONLY activated when EXPLICITLY requested by the user\n        //Meaning a category is selected and the user clicks on REORDER button\n        $activateDragAndDrop = 'position_ordering' === $orderBy && $hasCategoryFilter;\n\n        // Template vars injection\n        return array_merge(\n            $cleanFilterParameters,\n            [\n                'limit' => $limit,\n                'offset' => $offset,\n                'orderBy' => $orderBy,\n                'sortOrder' => $sortOrder,\n                'has_filter' => $hasCategoryFilter || $hasColumnFilter,\n                'has_category_filter' => $hasCategoryFilter,\n                'selected_category' => $selectedCategory,\n                'has_column_filter' => $hasColumnFilter,\n                'products' => $products,\n                'last_sql' => $lastSql,\n                'product_count_filtered' => $totalFilteredProductCount,\n                'product_count' => $totalProductCount,\n                'activate_drag_and_drop' => $activateDragAndDrop,\n                'pagination_parameters' => $paginationParameters,\n                'layoutHeaderToolbarBtn' => $toolbarButtons,\n                'categories' => $categoriesFormView,\n                'pagination_limit_choices' => $productProvider->getPaginationLimitChoices(),\n                'import_link' => $this->generateUrl('admin_import', ['import_type' => 'products']),\n                'sql_manager_add_link' => $this->generateUrl('admin_sql_requests_create'),\n                'enableSidebar' => true,\n                'help_link' => $this->generateSidebarLink('AdminProducts'),\n                'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n                'permission_error' => $permissionError,\n                'layoutTitle' => $this->trans('Products', 'Admin.Global'),\n            ]\n        );\n    }\n\n    /**\n     * Get only the list of products to display on the main Admin Product page.\n     * The full page that shows products list will subcall this action (from catalogAction).\n     * URL example: /product/list/html/40/20/id_product/asc.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/CatalogPage/Lists/list.html.twig\")\n     *\n     * @param Request $request\n     * @param int $limit The size of the listing\n     * @param int $offset The offset of the listing\n     * @param string $orderBy To order product list\n     * @param string $sortOrder To order product list\n     * @param string $view full|quicknav To change default template used to render the content\n     *\n     * @return array|Template|Response\n     */\n    public function listAction(\n        Request $request,\n        $limit = 10,\n        $offset = 0,\n        $orderBy = 'id_product',\n        $sortOrder = 'asc',\n        $view = 'full'\n    ) {\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $totalCount = 0;\n\n        $this->get('prestashop.service.product')->cleanupOldTempProducts();\n\n        $products = $request->attributes->get('products', null); // get from action subcall data, if any\n        $lastSql = $request->attributes->get('last_sql', null); // get from action subcall data, if any\n\n        if ($products === null) {\n            // get old values from persistence (before the current update)\n            $persistedFilterParameters = $productProvider->getPersistedFilterParameters();\n            /** @var ListParametersUpdater $listParametersUpdater */\n            $listParametersUpdater = $this->get('prestashop.adapter.product.list_parameters_updater');\n            $listParameters = $listParametersUpdater->buildListParameters(\n                $request->query->all(),\n                $persistedFilterParameters,\n                compact('offset', 'limit', 'orderBy', 'sortOrder')\n            );\n            $offset = $listParameters['offset'];\n            $limit = $listParameters['limit'];\n            $orderBy = $listParameters['orderBy'];\n            $sortOrder = $listParameters['sortOrder'];\n\n            /**\n             * 2 hooks are triggered here:\n             * - actionAdminProductsListingFieldsModifier\n             * - actionAdminProductsListingResultsModifier.\n             */\n            $products = $productProvider->getCatalogProductList($offset, $limit, $orderBy, $sortOrder);\n            $lastSql = $productProvider->getLastCompiledSql();\n        }\n\n        $hasCategoryFilter = $productProvider->isCategoryFiltered();\n\n        // Adds controller info (URLs, etc...) to product list\n        foreach ($products as &$product) {\n            $totalCount = isset($product['total']) ? $product['total'] : $totalCount;\n            $product['url'] = $this->generateUrl(\n                'admin_product_form',\n                ['id' => $product['id_product']]\n            );\n            $product['unit_action_url'] = $this->generateUrl(\n                'admin_product_unit_action',\n                [\n                    'action' => 'duplicate',\n                    'id' => $product['id_product'],\n                ]\n            );\n            $product['preview_url'] = $adminProductWrapper->getPreviewUrlFromId($product['id_product']);\n        }\n\n        //Drag and drop is ONLY activated when EXPLICITLY requested by the user\n        //Meaning a category is selected and the user clicks on REORDER button\n        $activateDragAndDrop = 'position_ordering' === $orderBy && $hasCategoryFilter;\n\n        // Template vars injection\n        $vars = array(\n            'activate_drag_and_drop' => $activateDragAndDrop,\n            'products' => $products,\n            'product_count' => $totalCount,\n            'last_sql_query' => $lastSql,\n            'has_category_filter' => $productProvider->isCategoryFiltered(),\n            'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n        );\n        if ($view !== 'full') {\n            return $this->render(\n                '@Product/CatalogPage/Lists/list_' . $view . '.html.twig',\n                array_merge(\n                    $vars,\n                    [\n                        'limit' => $limit,\n                        'offset' => $offset,\n                        'total' => $totalCount,\n                    ]\n                )\n            );\n        }\n\n        return $vars;\n    }\n\n    /**\n     * Gets the header toolbar buttons.\n     *\n     * @return array\n     */\n    private function getToolbarButtons()\n    {\n        $toolbarButtons = array();\n        $toolbarButtons['add'] = array(\n            'href' => $this->generateUrl('admin_product_new'),\n            'desc' => $this->trans('New product', 'Admin.Actions'),\n            'icon' => 'add_circle_outline',\n            'help' => $this->trans('Create a new product: CTRL+P', 'Admin.Catalog.Help'),\n        );\n\n        return $toolbarButtons;\n    }\n\n    /**\n     * Create a new basic product\n     * Then return to form action.\n     *\n     * @return RedirectResponse\n     *\n     * @throws \\LogicException\n     * @throws \\PrestaShopException\n     */\n    public function newAction()\n    {\n        if (!$this->isGranted(PageVoter::CREATE, self::PRODUCT_OBJECT)) {\n            $errorMessage = $this->trans('You do not have permission to add this.', 'Admin.Notifications.Error');\n            $this->get('session')->getFlashBag()->add('permission_error', $errorMessage);\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n        $languages = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $productShopCategory = $this->getContext()->shop->id_category;\n\n        /** @var Product $product */\n        $product = $productAdapter->getProductInstance();\n        $product->id_category_default = $productShopCategory;\n\n        /** @var TaxRuleDataProvider $taxRuleDataProvider */\n        $taxRuleDataProvider = $this->get('prestashop.adapter.data_provider.tax');\n        $product->id_tax_rules_group = $taxRuleDataProvider->getIdTaxRulesGroupMostUsed();\n        $product->active = $productProvider->isNewProductDefaultActivated() ? 1 : 0;\n        $product->state = Product::STATE_TEMP;\n\n        //set name and link_rewrite in each lang\n        foreach ($languages as $lang) {\n            $product->name[$lang['id_lang']] = '';\n            $product->link_rewrite[$lang['id_lang']] = '';\n        }\n\n        $product->save();\n        $product->addToCategories([$productShopCategory]);\n\n        return $this->redirectToRoute('admin_product_form', ['id' => $product->id]);\n    }\n\n    /**\n     * Product form.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/ProductPage/product.html.twig\")\n     *\n     * @param int $id The product ID\n     * @param Request $request\n     *\n     * @return array|Response Template vars\n     *\n     * @throws \\LogicException\n     */\n    public function formAction($id, Request $request)\n    {\n        gc_disable();\n\n        if (!$this->isGranted(array(PageVoter::READ, PageVoter::UPDATE, PageVoter::CREATE), self::PRODUCT_OBJECT)) {\n            return $this->redirect('admin_dashboard');\n        }\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct($id);\n\n        if (!$product || empty($product->id)) {\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $shopContext = $this->get('prestashop.adapter.shop.context');\n        $legacyContextService = $this->get('prestashop.adapter.legacy.context');\n        $isMultiShopContext = count($shopContext->getContextListShopID()) > 1;\n\n        $modelMapper = $this->get('prestashop.adapter.admin.model.product');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n\n        $form = $this->createProductForm($product, $modelMapper);\n\n        $formBulkCombinations = $this->createForm(\n            ProductCombinationBulk::class,\n            null,\n            [\n                'iso_code' => $this\n                    ->get('prestashop.adapter.legacy.context')\n                    ->getContext()->currency->iso_code,\n                'price_display_precision' => $this->configuration\n                    ->get('_PS_PRICE_DISPLAY_PRECISION_'),\n            ]\n        );\n\n        // Legacy code. To fix when Object model will change. But report Hooks.\n        $postData = $request->request->all();\n        $combinationsList = [];\n        if (!empty($postData)) {\n            foreach ($postData as $postKey => $postValue) {\n                if (preg_match('/^combination_.*/', $postKey)) {\n                    $combinationsList[$postKey] = $postValue;\n                    $postData['form'][$postKey] = $postValue; // need to validate the form\n                }\n            }\n\n            // Duplicate Request to be a valid form (like it was real) with postData modified ..\n            $request = $request->duplicate(\n                $request->query->all(),\n                $postData,\n                $request->attributes->all(),\n                $request->cookies->all(),\n                $request->files->all(),\n                $request->server->all()\n            );\n        }\n\n        /* @var Form $form */\n        $form->handleRequest($request);\n        $formData = $form->getData();\n        $formData['step3']['combinations'] = $combinationsList;\n\n        try {\n            if ($form->isSubmitted()) {\n                if ($this->isDemoModeEnabled() && $request->isXmlHttpRequest()) {\n                    $errorMessage = $this->getDemoModeErrorMessage();\n\n                    return $this->returnErrorJsonResponse(\n                        ['error' => [$errorMessage]],\n                        Response::HTTP_SERVICE_UNAVAILABLE\n                    );\n                }\n\n                if ($form->isValid()) {\n                    //define POST values for keeping legacy adminController skills\n                    $_POST = $modelMapper->getModelData($formData, $isMultiShopContext) + $_POST;\n                    $_POST['form'] = $formData;\n                    $_POST['state'] = Product::STATE_SAVED;\n\n                    $adminProductController = $adminProductWrapper->getInstance();\n                    $adminProductController->setIdObject($formData['id_product']);\n                    $adminProductController->setAction('save');\n\n                    // Hooks: this will trigger legacy AdminProductController, postProcess():\n                    // actionAdminSaveBefore; actionAdminProductsControllerSaveBefore\n                    // actionProductAdd or actionProductUpdate (from processSave() -> processAdd() or processUpdate())\n                    // actionAdminSaveAfter; actionAdminProductsControllerSaveAfter\n                    $productSaveResult = $adminProductController->postCoreProcess();\n\n                    if (false == $productSaveResult) {\n                        return $this->returnErrorJsonResponse(\n                            ['error' => $adminProductController->errors],\n                            Response::HTTP_BAD_REQUEST\n                        );\n                    }\n\n                    $product = $productSaveResult;\n\n                    /* @var Product $product */\n                    $adminProductController->processSuppliers($product->id);\n                    $adminProductController->processFeatures($product->id);\n                    $adminProductController->processSpecificPricePriorities();\n                    foreach ($_POST['combinations'] as $combinationValues) {\n                        $adminProductWrapper->processProductAttribute($product, $combinationValues);\n                        // For now, each attribute set the same value.\n                        $adminProductWrapper->processDependsOnStock(\n                            $product,\n                            ($_POST['depends_on_stock'] == '1'),\n                            $combinationValues['id_product_attribute']\n                        );\n                    }\n                    $adminProductWrapper->processDependsOnStock($product, ($_POST['depends_on_stock'] == '1'));\n\n                    // If there is no combination, then quantity and location are managed for the whole product (as combination ID 0)\n                    // In all cases, legacy hooks are triggered: actionProductUpdate and actionUpdateQuantity\n                    if (count($_POST['combinations']) === 0 && isset($_POST['qty_0'])) {\n                        $adminProductWrapper->processQuantityUpdate($product, $_POST['qty_0']);\n                        $adminProductWrapper->processLocation($product, (string) $_POST['location']);\n                    }\n                    // else quantities are managed from $adminProductWrapper->processProductAttribute() above.\n\n                    $adminProductWrapper->processProductOutOfStock($product, $_POST['out_of_stock']);\n\n                    $customizationFieldsIds = $adminProductWrapper\n                        ->processProductCustomization($product, $_POST['custom_fields']);\n\n                    $adminProductWrapper->processAttachments($product, $_POST['attachments']);\n\n                    $adminProductController->processWarehouses();\n\n                    $response = new JsonResponse();\n                    $response->setData([\n                        'product' => $product,\n                        'customization_fields_ids' => $customizationFieldsIds,\n                    ]);\n\n                    if ($request->isXmlHttpRequest()) {\n                        return $response;\n                    }\n                } elseif ($request->isXmlHttpRequest()) {\n                    return $this->returnErrorJsonResponse(\n                        $this->getFormErrorsForJS($form),\n                        Response::HTTP_BAD_REQUEST\n                    );\n                }\n            }\n        } catch (Exception $e) {\n            // this controller can be called as an AJAX JSON route or a HTML page\n            // so we need to return the right type of response if an exception it thrown\n            if ($request->isXmlHttpRequest()) {\n                return $this->returnErrorJsonResponse(\n                    [],\n                    Response::HTTP_INTERNAL_SERVER_ERROR\n                );\n            }\n\n            throw $e;\n        }\n\n        /** @var $stockManager StockInterface */\n        $stockManager = $this->get('prestashop.core.data_provider.stock_interface');\n\n        /** @var WarehouseDataProvider $warehouseProvider */\n        $warehouseProvider = $this->get('prestashop.adapter.data_provider.warehouse');\n\n        //If context shop is define to a group shop, disable the form\n        if ($shopContext->isShopGroupContext()) {\n            return $this->render('@Product/ProductPage/disabled_form_alert.html.twig', ['showContentHeader' => false]);\n        }\n\n        // languages for switch dropdown\n        $languages = $legacyContextService->getLanguages();\n\n        // generate url preview\n        if ($product->active) {\n            $preview_url = $adminProductWrapper->getPreviewUrl($product);\n            $preview_url_deactive = $adminProductWrapper->getPreviewUrlDeactivate($preview_url);\n        } else {\n            $preview_url_deactive = $adminProductWrapper->getPreviewUrl($product, false);\n            $preview_url = $adminProductWrapper->getPreviewUrlDeactivate($preview_url_deactive);\n        }\n\n        $doctrine = $this->getDoctrine()->getManager();\n        $language = empty($languages[0]) ? ['id_lang' => 1, 'id_shop' => 1] : $languages[0];\n        $attributeGroups = $doctrine->getRepository('PrestaShopBundle:Attribute')->findByLangAndShop((int) $language['id_lang'], (int) $language['id_shop']);\n\n        $drawerModules = (new HookFinder())->setHookName('displayProductPageDrawer')\n            ->setParams(['product' => $product])\n            ->addExpectedInstanceClasses('PrestaShop\\PrestaShop\\Core\\Product\\ProductAdminDrawer')\n            ->present();\n\n        return [\n            'form' => $form->createView(),\n            'formCombinations' => $formBulkCombinations->createView(),\n            'categories' => $this->get('prestashop.adapter.data_provider.category')->getCategoriesWithBreadCrumb(),\n            'id_product' => $id,\n            'ids_product_attribute' => (isset($formData['step3']['id_product_attributes']) ? implode(',', $formData['step3']['id_product_attributes']) : ''),\n            'has_combinations' => (isset($formData['step3']['id_product_attributes']) && count($formData['step3']['id_product_attributes']) > 0),\n            'combinations_count' => isset($formData['step3']['id_product_attributes']) ? count($formData['step3']['id_product_attributes']) : 0,\n            'asm_globally_activated' => $stockManager->isAsmGloballyActivated(),\n            'warehouses' => ($stockManager->isAsmGloballyActivated()) ? $warehouseProvider->getWarehouses() : [],\n            'is_multishop_context' => $isMultiShopContext,\n            'is_combination_active' => $this->get('prestashop.adapter.legacy.configuration')->combinationIsActive(),\n            'showContentHeader' => false,\n            'preview_link' => $preview_url,\n            'preview_link_deactivate' => $preview_url_deactive,\n            'stats_link' => $this->getAdminLink('AdminStats', ['module' => 'statsproduct', 'id_product' => $id]),\n            'help_link' => $this->generateSidebarLink('AdminProducts'),\n            'languages' => $languages,\n            'default_language_iso' => $languages[0]['iso_code'],\n            'attribute_groups' => $attributeGroups,\n            'max_upload_size' => Tools::formatBytes(UploadedFile::getMaxFilesize()),\n            'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n            'editable' => $this->isGranted(PageVoter::UPDATE, self::PRODUCT_OBJECT),\n            'drawerModules' => $drawerModules,\n            'layoutTitle' => $this->trans('Product', 'Admin.Global'),\n        ];\n    }\n\n    /**\n     * Builds the product form.\n     *\n     * @param Product $product\n     * @param AdminModelAdapter $modelMapper\n     *\n     * @return FormInterface\n     *\n     * @throws \\Symfony\\Component\\Process\\Exception\\LogicException\n     */\n    private function createProductForm(Product $product, AdminModelAdapter $modelMapper)\n    {\n        $formBuilder = $this->createFormBuilder(\n            $modelMapper->getFormData($product),\n            ['allow_extra_fields' => true]\n        )\n            ->add('id_product', HiddenType::class)\n            ->add('step1', ProductInformation::class)\n            ->add('step2', ProductPrice::class, ['id_product' => $product->id])\n            ->add('step3', ProductQuantity::class)\n            ->add('step4', ProductShipping::class)\n            ->add('step5', ProductSeo::class, [\n                'mapping_type' => $product->getRedirectType(),\n            ])\n            ->add('step6', ProductOptions::class);\n\n        // Prepare combination form (fake but just to validate the form)\n        $combinations = $product->getAttributesResume(\n            $this->getContext()->language->id\n        );\n\n        if (is_array($combinations)) {\n            $maxInputVars = (int) ini_get('max_input_vars');\n            $combinationsCount = count($combinations) * 25;\n            $combinationsInputs = ceil($combinationsCount / 1000) * 1000;\n\n            if ($combinationsInputs > $maxInputVars) {\n                $this->addFlash(\n                    'error',\n                    $this->trans(\n                        'The value of the PHP.ini setting \"max_input_vars\" must be increased to %value% in order to be able to submit the product form.',\n                        'Admin.Notifications.Error',\n                        array('%value%' => $combinationsInputs)\n                    )\n                );\n            }\n\n            foreach ($combinations as $combination) {\n                $formBuilder->add(\n                    'combination_' . $combination['id_product_attribute'],\n                    ProductCombination::class\n                );\n            }\n        }\n\n        return $formBuilder->getForm();\n    }\n\n    /**\n     * Do bulk action on a list of Products. Used with the 'selection action' dropdown menu on the Catalog page.\n     *\n     * @param Request $request\n     * @param string $action The action to apply on the selected products\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function bulkAction(Request $request, $action)\n    {\n        if (!$this->actionIsAllowed($action, self::PRODUCT_OBJECT, '_all')) {\n            $this->addFlash('permission_error', $this->getForbiddenActionMessage($action));\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productIdList = $request->request->get('bulk_action_selected_products');\n        /** @var $productUpdater ProductInterfaceUpdater */\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        $hookEventParameters = ['product_list_id' => $productIdList];\n        /** @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        try {\n            $hasMessages = $this->get('session')->getFlashBag()->has('success');\n\n            if ($this->isDemoModeEnabled()) {\n                throw new UpdateProductException($this->getDemoModeErrorMessage());\n            }\n\n            switch ($action) {\n                case 'activate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully activated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products activated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'deactivate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList($productIdList, false);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully deactivated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products deactivated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'delete_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->deleteProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully deleted.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products deleted: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'duplicate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->duplicateProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully duplicated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products duplicated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Bulk action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::bulkAction: \"' . $action . '\"',\n                        2001\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate this with an domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        return new Response(json_encode(['result' => 'ok']));\n    }\n\n    /**\n     * Do mass edit action on the current page of products.\n     * Used with the 'grouped action' dropdown menu on the Catalog page.\n     *\n     * @param Request $request\n     * @param string $action The action to apply on the selected products\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function massEditAction(Request $request, $action)\n    {\n        if (!$this->isGranted(PageVoter::UPDATE, self::PRODUCT_OBJECT)) {\n            $errorMessage = $this->trans(\n                'You do not have permission to edit this.',\n                'Admin.Notifications.Error'\n            );\n            $this->get('session')->getFlashBag()->add('permission_error', $errorMessage);\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        /** @var $productUpdater ProductInterfaceUpdater */\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        /* @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        /* Initialize router params variable. */\n        $routerParams = [];\n\n        try {\n            switch ($action) {\n                case 'sort':\n                    /* Change position_ordering to position */\n                    $routerParams['orderBy'] = 'position';\n\n                    $productIdList = $request->request->get('mass_edit_action_sorted_products');\n                    $productPositionList = $request->request->get('mass_edit_action_sorted_positions');\n                    $hookEventParameters = [\n                        'product_list_id' => $productIdList,\n                        'product_list_position' => $productPositionList,\n                    ];\n\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminSortBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerSortBefore',\n                        $hookEventParameters\n                    );\n\n                    // Hooks: managed in ProductUpdater\n                    $persistedFilterParams = $productProvider->getPersistedFilterParameters();\n                    $productList = array_combine($productIdList, $productPositionList);\n                    $productUpdater->sortProductIdList(\n                        $productList,\n                        ['filter_category' => $persistedFilterParams['filter_category']]\n                    );\n\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Products successfully sorted.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info(\n                        'Products sorted: (' . implode(',', $productIdList) .\n                        ') with positions (' . implode(',', $productPositionList) . ').'\n                    );\n                    $hookEventParameters = [\n                        'product_list_id' => $productIdList,\n                        'product_list_position' => $productPositionList,\n                    ];\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminSortAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerSortAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Mass edit action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::massEditAction: \"' . $action . '\"',\n                        2001\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate with domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        $urlGenerator = $this->get('prestashop.core.admin.url_generator');\n\n        return $this->redirect($urlGenerator->generate('admin_product_catalog', $routerParams));\n    }\n\n    /**\n     * Do action on one product at a time. Can be used at many places in the controller's page.\n     *\n     * @param string $action The action to apply on the selected product\n     * @param int $id the product ID to apply the action on\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function unitAction($action, $id)\n    {\n        if (!$this->actionIsAllowed($action, self::PRODUCT_OBJECT)) {\n            $this->addFlash('permission_error', $this->getForbiddenActionMessage($action));\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n        /** @var $productUpdater ProductInterfaceUpdater */\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        $hookEventParameters = ['product_id' => $id];\n        /** @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        try {\n            if ($this->isDemoModeEnabled()) {\n                throw new UpdateProductException($this->getDemoModeErrorMessage());\n            }\n\n            switch ($action) {\n                case 'delete':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->deleteProduct($id);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully deleted.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product deleted: (' . $id . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'duplicate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $duplicateProductId = $productUpdater->duplicateProduct($id);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully duplicated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product duplicated: (from ' . $id . ' to ' . $duplicateProductId . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    // stops here and redirect to the new product's page.\n                    return $this->redirectToRoute('admin_product_form', ['id' => $duplicateProductId]);\n                case 'activate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList([$id]);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully activated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product activated: ' . $id);\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'deactivate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList([$id], false);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully deactivated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product deactivated: ' . $id);\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Unit action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::unitAction: \"' . $action . '\"',\n                        2002\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate with a domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        return $this->redirect($this->get('prestashop.core.admin.url_generator')->generate('admin_product_catalog'));\n    }\n\n    /**\n     * @return CsvResponse\n     *\n     * @throws \\Symfony\\Component\\Translation\\Exception\\InvalidArgumentException\n     */\n    public function exportAction()\n    {\n        return $this->get('prestashop.core.product.csv_exporter')->export();\n    }\n\n    /**\n     * Set the Catalog filters values and redirect to the catalogAction.\n     *\n     * URL example: /product/catalog_filters/42/last/32\n     *\n     * @param int|string $quantity the quantity to set on the catalog filters persistence\n     * @param string $active the activation state to set on the catalog filters persistence\n     *\n     * @return RedirectResponse\n     */\n    public function catalogFiltersAction($quantity = 'none', $active = 'none')\n    {\n        $quantity = urldecode($quantity);\n\n        /** @var ProductInterfaceProvider $productProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        // we merge empty filter set with given values, to reset the other filters!\n        $productProvider->persistFilterParameters(\n            array_merge(\n                AdminFilter::getProductCatalogEmptyFilter(),\n                [\n                    'filter_column_sav_quantity' => ($quantity == 'none') ? '' : $quantity,\n                    'filter_column_active' => ($active == 'none') ? '' : $active,\n                ]\n            )\n        );\n\n        return $this->redirectToRoute('admin_product_catalog');\n    }\n\n    /**\n     * @deprecated since 1.7.5.0, to be removed in 1.8 rely on CommonController::renderFieldAction\n     *\n     * @throws \\OutOfBoundsException\n     * @throws \\LogicException\n     * @throws \\PrestaShopException\n     */\n    public function renderFieldAction($productId, $step, $fieldName)\n    {\n        @trigger_error(\n            'This function is deprecated, use CommonController::renderFieldAction instead.',\n            E_USER_DEPRECATED\n        );\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct($productId);\n        $modelMapper = new AdminModelAdapter(\n            $product,\n            $this->get('prestashop.adapter.legacy.context'),\n            $this->get('prestashop.adapter.admin.wrapper.product'),\n            $this->get('prestashop.adapter.tools'),\n            $productAdapter,\n            $this->get('prestashop.adapter.data_provider.supplier'),\n            $this->get('prestashop.adapter.data_provider.warehouse'),\n            $this->get('prestashop.adapter.data_provider.feature'),\n            $this->get('prestashop.adapter.data_provider.pack'),\n            $this->get('prestashop.adapter.shop.context'),\n            $this->get('prestashop.adapter.data_provider.tax'),\n            $this->get('router')\n        );\n        $form = $this->createFormBuilder($modelMapper->getFormData());\n        switch ($step) {\n            case 'step1':\n                $form->add('step1', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductInformation');\n\n                break;\n            case 'step2':\n                $form->add('step2', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductPrice');\n\n                break;\n            case 'step3':\n                $form->add('step3', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductQuantity');\n\n                break;\n            case 'step4':\n                $form->add('step4', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductShipping');\n\n                break;\n            case 'step5':\n                $form->add('step5', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductSeo');\n\n                break;\n            case 'step6':\n                $form->add('step6', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductOptions');\n\n                break;\n            case 'default':\n        }\n\n        return $this->render('@PrestaShop/Admin/Common/_partials/_form_field.html.twig', [\n            'form' => $form->getForm()->get($step)->get($fieldName)->createView(),\n            'formId' => $step . '_' . $fieldName . '_rendered',\n        ]);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse Exception;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass I18nController extends ApiController\n{\n    /**\n     * Show translation for page-app build with vue-js.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listTranslationAction(Request $request)\n    {\n        try {\n            $page = $request->attributes->get('page');\n\n            try {\n                $translationClass = $this->container->get('prestashop.translation.api.' . $page);\n            } catch (Exception $exception) {\n                throw new BadRequestHttpException($exception->getMessage());\n            }\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return $this->jsonResponse($translationClass->getFormattedTranslations(), $request);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse PrestaShopBundle\\Api\\QueryStockParamsCollection;\nuse PrestaShopBundle\\Api\\Stock\\Movement;\nuse PrestaShopBundle\\Api\\Stock\\MovementsCollection;\nuse PrestaShopBundle\\Component\\CsvResponse;\nuse PrestaShopBundle\\Entity\\ProductIdentity;\nuse PrestaShopBundle\\Entity\\Repository\\StockRepository;\nuse PrestaShopBundle\\Exception\\InvalidPaginationParamsException;\nuse PrestaShopBundle\\Exception\\ProductNotFoundException;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass StockController extends ApiController\n{\n    /**\n     * @var StockRepository\n     */\n    public $stockRepository;\n\n    /**\n     * @var QueryStockParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @var MovementsCollection;\n     */\n    public $movements;\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listProductsAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $stock = array(\n            'info' => array(\n                'edit_bulk_url' => $this->container->get('router')->generate('api_stock_bulk_edit_products'),\n            ),\n            'data' => $this->stockRepository->getData($queryParamsCollection),\n        );\n        $totalPages = $this->stockRepository->countPages($queryParamsCollection);\n\n        return $this->jsonResponse($stock, $request, $queryParamsCollection, 200, array('Total-Pages' => $totalPages));\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function editProductAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::UPDATE], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $this->guardAgainstMissingDeltaParameter($request);\n            $delta = $request->request->getInt('delta');\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        $productIdentity = ProductIdentity::fromArray(array(\n            'product_id' => $request->attributes->get('productId'),\n            'combination_id' => $request->attributes->get('combinationId', 0),\n        ));\n\n        try {\n            $movement = new Movement($productIdentity, $delta);\n            $product = $this->stockRepository->updateStock($movement);\n        } catch (ProductNotFoundException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return new JsonResponse($product);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkEditProductsAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::UPDATE], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $this->guardAgainstInvalidBulkEditionRequest($request);\n            $stockMovementsParams = json_decode($request->getContent(), true);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        $movementsCollection = $this->movements->fromArray($stockMovementsParams);\n\n        try {\n            $products = $this->stockRepository->bulkUpdateStock($movementsCollection);\n        } catch (ProductNotFoundException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return new JsonResponse($products);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return CsvResponse|JsonResponse\n     */\n    public function listProductsExportAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $dataCallback = function ($page, $limit) use ($queryParamsCollection) {\n            return $this->stockRepository->getDataExport($page, $limit, $queryParamsCollection);\n        };\n\n        $translator = $this->container->get('translator');\n\n        // headers columns\n        $headersData = array(\n            'product_id' => 'Product ID',\n            'combination_id' => 'Combination ID',\n            'product_reference' => $translator->trans('Product reference', array(), 'Admin.Advparameters.Feature'),\n            'combination_reference' => $translator->trans('Combination reference', array(), 'Admin.Advparameters.Feature'),\n            'product_name' => $translator->trans('Product name', array(), 'Admin.Catalog.Feature'),\n            'combination_name' => $translator->trans('Combination name', array(), 'Admin.Catalog.Feature'),\n            'supplier_name' => $translator->trans('Supplier', array(), 'Admin.Global'),\n            'active' => $translator->trans('Status', array(), 'Admin.Global'),\n            'product_physical_quantity' => $translator->trans('Physical quantity', array(), 'Admin.Catalog.Feature'),\n            'product_reserved_quantity' => $translator->trans('Reserved quantity', array(), 'Admin.Catalog.Feature'),\n            'product_available_quantity' => $translator->trans('Available quantity', array(), 'Admin.Catalog.Feature'),\n            'product_low_stock_threshold' => $translator->trans('Low stock level', array(), 'Admin.Catalog.Feature'),\n            'product_low_stock_alert' => $translator->trans('Send me an email when the quantity is below or equals this level', array(), 'Admin.Catalog.Feature'),\n        );\n\n        return (new CsvResponse())\n            ->setData($dataCallback)\n            ->setHeadersData($headersData)\n            ->setLimit(10000)\n            ->setFileName('stock_' . date('Y-m-d_His') . '.csv');\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    private function guardAgainstMissingDeltaParameter(Request $request)\n    {\n        $message = 'The \"delta\" parameter is required';\n\n        $content = $request->getContent();\n        if (strlen($content) > 0) {\n            $decodedContent = $this->guardAgainstInvalidRequestContent($content, $message);\n            $request->request->set('delta', $decodedContent['delta']);\n        }\n\n        if (!$request->request->has('delta')) {\n            throw new BadRequestHttpException($message);\n        }\n    }\n\n    /**\n     * @param $content\n     * @param $message\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidRequestContent($content, $message)\n    {\n        $decodedContent = $this->guardAgainstInvalidJsonBody($content);\n\n        if (!array_key_exists('delta', $decodedContent)) {\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        return $decodedContent;\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidBulkEditionRequest(Request $request)\n    {\n        if (strlen($request->getContent()) == 0) {\n            $message = 'The request body should contain a JSON-encoded array of product identifiers and deltas';\n\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        $this->guardAgainstMissingParametersInBulkEditionRequest($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstMissingParametersInBulkEditionRequest(Request $request)\n    {\n        $decodedContent = $this->guardAgainstInvalidJsonBody($request->getContent());\n\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a product id (\"product_id\"), a quantity delta (\"delta\"). ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($decodedContent, function ($item, $index) use ($message) {\n            if (!array_key_exists('product_id', $item) || !array_key_exists('delta', $item) || $item['delta'] == 0) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse PrestaShopBundle\\Api\\QueryStockMovementParamsCollection;\nuse PrestaShopBundle\\Entity\\Repository\\StockMovementRepository;\nuse PrestaShopBundle\\Exception\\InvalidPaginationParamsException;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass StockMovementController extends ApiController\n{\n    /**\n     * @var StockMovementRepository\n     */\n    public $stockMovementRepository;\n\n    /**\n     * @var QueryStockMovementParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $stockMovement = $this->stockMovementRepository->getData($queryParamsCollection);\n        $totalPages = $this->stockMovementRepository->countPages($queryParamsCollection);\n\n        return $this->jsonResponse($stockMovement, $request, $queryParamsCollection, 200, array('Total-Pages' => $totalPages));\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsEmployeesAction(Request $request)\n    {\n        return $this->jsonResponse($this->stockMovementRepository->getEmployees(), $request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsTypesAction(Request $request)\n    {\n        $grouped = (bool) $request->get('grouped');\n\n        return $this->jsonResponse($this->stockMovementRepository->getTypes($grouped), $request);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse Exception;\nuse PrestaShopBundle\\Api\\QueryTranslationParamsCollection;\nuse PrestaShopBundle\\Exception\\InvalidLanguageException;\nuse PrestaShopBundle\\Service\\TranslationService;\nuse PrestaShopBundle\\Translation\\View\\TreeBuilder;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse PrestaShopBundle\\Translation\\Exception\\UnsupportedLocaleException;\n\nclass TranslationController extends ApiController\n{\n    /**\n     * @var QueryTranslationParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @var TranslationService\n     */\n    public $translationService;\n\n    /**\n     * Show translations for 1 domain & 1 locale given & 1 theme given (optional).\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listDomainTranslationAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n            $queryParams = $queryParamsCollection->getQueryParams();\n\n            /** @var TranslationService $translationService */\n            $translationService = $this->container->get('prestashop.service.translation');\n\n            $locale = $request->attributes->get('locale');\n            $domain = $request->attributes->get('domain');\n            $theme = $request->attributes->get('theme');\n            $module = $request->query->get('module');\n            $search = $request->query->get('search');\n\n            try {\n                $this->translationService->findLanguageByLocale($locale);\n            }\n            catch (InvalidLanguageException $e) {\n                // If the locale is invalid, no need to call the translation provider.\n                throw UnsupportedLocaleException::invalidLocale($locale);\n            }\n\n            $catalog = $translationService->listDomainTranslation($locale, $domain, $theme, $search, $module);\n            $info = array(\n                'Total-Pages' => ceil(count($catalog['data']) / $queryParams['page_size']),\n            );\n\n            $catalog['info'] = array_merge(\n                $catalog['info'],\n                [\n                    'locale' => $locale,\n                    'domain' => $domain,\n                    'theme' => $theme,\n                    'total_translations' => count($catalog['data']),\n                    'total_missing_translations' => 0,\n                ]\n            );\n\n            foreach ($catalog['data'] as $message) {\n                if (empty($message['xliff']) && empty($message['database'])) {\n                    ++$catalog['info']['total_missing_translations'];\n                }\n            }\n\n            $catalog['data'] = array_slice(\n                $catalog['data'],\n                ($queryParams['page_index'] - 1) * $queryParams['page_size'],\n                $queryParams['page_size']\n            );\n\n            return $this->jsonResponse($catalog, $request, $queryParamsCollection, 200, $info);\n        } catch (Exception $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n    }\n\n    /**\n     * Show tree for translation page with some params.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listTreeAction(Request $request)\n    {\n        try {\n            // params possibles:\n            // lang : en, fr, etc.\n            // type : themes, modules, mails, back, others\n            // selected : classic, starterTheme, module name, subject (for email).\n\n            $lang = $request->attributes->get('lang');\n            $type = $request->attributes->get('type');\n            $selected = $request->attributes->get('selected');\n\n            $search = $request->query->get('search');\n\n            if (in_array($type, array('modules', 'themes')) && empty($selected)) {\n                throw new Exception('This \\'selected\\' param is not valid.');\n            }\n\n            switch ($type) {\n                case 'themes':\n                    $tree = $this->getNormalTree($lang, $type, $selected, $search);\n                    break;\n\n                case 'modules':\n                    $tree = $this->getModulesTree($lang, $selected, $search);\n                    break;\n\n                case 'mails':\n                    // when emails body will be implemented, it should be a different type\n                    // because domain routes only support \"type\" & \"selected/theme\" as parameters\n                    $tree = $this->getMailsSubjectTree($lang, $search);\n                    break;\n\n                default:\n                    $tree = $this->getNormalTree($lang, $type, null, $search);\n                    break;\n            }\n\n            return $this->jsonResponse($tree, $request);\n        } catch (Exception $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n    }\n\n    /**\n     * Route to edit translation.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function translationEditAction(Request $request)\n    {\n        try {\n            $decodedContent = $this->guardAgainstInvalidTranslationBulkRequest($request);\n\n            $translations = $decodedContent['translations'];\n            $this->guardAgainstInvalidTranslationEditRequest($translations);\n\n            $translationService = $this->container->get('prestashop.service.translation');\n            $response = [];\n            foreach ($translations as $translation) {\n                if (empty($translation['theme'])) {\n                    $translation['theme'] = null;\n                }\n\n                try {\n                    $lang = $translationService->findLanguageByLocale($translation['locale']);\n                } catch (Exception $exception) {\n                    throw new BadRequestHttpException($exception->getMessage());\n                }\n\n                $response[$translation['default']] = $translationService->saveTranslationMessage(\n                    $lang,\n                    $translation['domain'],\n                    $translation['default'],\n                    $translation['edited'],\n                    $translation['theme']\n                );\n            }\n\n            $this->clearCache();\n\n            return new JsonResponse($response, 200);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n    }\n\n    /**\n     * Route to reset translation.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function translationResetAction(Request $request)\n    {\n        try {\n            $decodedContent = $this->guardAgainstInvalidTranslationBulkRequest($request);\n\n            $translations = $decodedContent['translations'];\n            $this->guardAgainstInvalidTranslationResetRequest($translations);\n\n            $translationService = $this->container->get('prestashop.service.translation');\n            $response = [];\n\n            foreach ($translations as $translation) {\n                if (!array_key_exists('theme', $translation)) {\n                    $translation['theme'] = null;\n                }\n\n                try {\n                    $lang = $translationService->findLanguageByLocale($translation['locale']);\n                } catch (Exception $exception) {\n                    throw new BadRequestHttpException($exception->getMessage());\n                }\n\n                $response[$translation['default']] = $translationService->resetTranslationMessage(\n                    $lang->getId(),\n                    $translation['domain'],\n                    $translation['default'],\n                    $translation['theme']\n                );\n            }\n\n            $this->clearCache();\n\n            return new JsonResponse($response, 200);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidTranslationBulkRequest(Request $request)\n    {\n        $content = $request->getContent();\n\n        $decodedContent = $this->guardAgainstInvalidJsonBody($content);\n\n        if (empty($decodedContent) ||\n            !array_key_exists('translations', $decodedContent) ||\n            !is_array($decodedContent['translations'])\n        ) {\n            $message = 'The request body should contain a JSON-encoded array of translations';\n\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        return $decodedContent;\n    }\n\n    /**\n     * @param $content\n     */\n    private function guardAgainstInvalidTranslationEditRequest($content)\n    {\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a \"locale\", a \"domain\", a \"default\" and a \"edited\" values. ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($content, function ($item, $index) use ($message) {\n            if (!array_key_exists('locale', $item) ||\n                !array_key_exists('domain', $item) ||\n                !array_key_exists('default', $item) ||\n                !array_key_exists('edited', $item)\n            ) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n\n    /**\n     * @param $content\n     */\n    protected function guardAgainstInvalidTranslationResetRequest($content)\n    {\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a \"locale\", a \"domain\" and a \"default\" values. ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($content, function ($item, $index) use ($message) {\n            if (!array_key_exists('locale', $item) ||\n                !array_key_exists('domain', $item) ||\n                !array_key_exists('default', $item)\n            ) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n\n    /**\n     * @param $lang\n     * @param $type\n     * @param string $theme Selected theme name\n     * @param null $search\n     *\n     * @return array\n     */\n    private function getNormalTree($lang, $type, $theme, $search = null)\n    {\n        $treeBuilder = new TreeBuilder($this->translationService->langToLocale($lang), $theme);\n        $catalogue = $this->translationService->getTranslationsCatalogue($lang, $type, $theme, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search);\n    }\n\n    /**\n     * @param string $lang Two-letter iso code\n     * @param string $selectedModuleName Selected module name\n     * @param string|null $search\n     *\n     * @return array\n     */\n    private function getModulesTree($lang, $selectedModuleName, $search = null)\n    {\n        $theme = null;\n        $locale = $this->translationService->langToLocale($lang);\n\n        $moduleProvider = $this->container->get('prestashop.translation.external_module_provider');\n        $moduleProvider->setModuleName($selectedModuleName);\n\n        $treeBuilder = new TreeBuilder($locale, $theme);\n        $catalogue = $treeBuilder->makeTranslationArray($moduleProvider, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search, $selectedModuleName);\n    }\n\n    /**\n     * @param string $lang Two-letter iso code\n     * @param null $search\n     *\n     * @return array\n     */\n    private function getMailsSubjectTree($lang, $search = null)\n    {\n        $theme = null;\n\n        $treeBuilder = new TreeBuilder($this->translationService->langToLocale($lang), $theme);\n        $catalogue = $this->translationService->getTranslationsCatalogue($lang, 'mails', $theme, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search);\n    }\n\n    /**\n     * Make final tree.\n     *\n     * @param TreeBuilder $treeBuilder\n     * @param $catalogue\n     * @param string|null $theme\n     * @param string|null $search\n     * @param string|null $module\n     *\n     * @return array\n     */\n    private function getCleanTree(TreeBuilder $treeBuilder, $catalogue, $theme, $search = null, $module = null)\n    {\n        $translationsTree = $treeBuilder->makeTranslationsTree($catalogue);\n        $translationsTree = $treeBuilder->cleanTreeToApi($translationsTree, $this->container->get('router'), $theme, $search, $module);\n\n        return $translationsTree;\n    }\n}\n", "admin_attribute_get_all:\n    path:     /get-all\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:getAllAttributes\n        _format: json\n\nadmin_attribute_generator:\n    path:     /generator\n    methods:  [POST]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:attributesGenerator\n\nadmin_delete_attribute:\n    path:     /{idProduct}\n    methods:  [DELETE]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:deleteAttribute\n\nadmin_delete_all_attributes:\n    path:     /delete-all/{idProduct}\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:deleteAllAttribute\n        idProduct: 0\n    requirements:\n        idProduct: \\d+\n\nadmin_get_form_images_combination:\n    path:     /form-images/{idProduct}\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:getFormImages\n        _format: json\n        idProduct: 0\n    requirements:\n        idProduct: \\d+\n", "api_i18n_translations_list:\n    path: /{page}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.i18n.controller:listTranslationAction\n    requirements:\n        page: \\w+\n", "api_stock_list_movements:\n     path: /\n     methods: [GET]\n     defaults:\n         _controller: prestashop.core.api.stock_movement.controller:listMovementsAction\n\napi_stock_product_list_movements:\n     path: /product/{productId}\n     methods: [GET]\n     defaults:\n         _controller: prestashop.core.api.stock_movement.controller:listMovementsAction\n     requirements:\n         productId: \\d+\n\napi_stock_list_movements_employees:\n     path: /employees\n     methods: [GET]\n     defaults:\n         _controller: prestashop.core.api.stock_movement.controller:listMovementsEmployeesAction\n\n\napi_stock_list_movements_types:\n     path: /types\n     methods: [GET]\n     defaults:\n         _controller: prestashop.core.api.stock_movement.controller:listMovementsTypesAction\n", "api_stock_list_products:\n    path: /\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsAction\n\napi_stock_list_products_export:\n    path: /export\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsExportAction\n\napi_stock_list_product_combinations:\n    path: /{productId}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsAction\n    requirements:\n        productId: \\d+\n\napi_stock_edit_product:\n    path: /product/{productId}\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:editProductAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n\napi_stock_edit_product_combination:\n    path: /product/{productId}/combination/{combinationId}\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:editProductAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n        combinationId: \\d+\n\napi_stock_bulk_edit_products:\n    path: /products\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:bulkEditProductsAction\n        _legacy_controller: AdminStockManagement\n", "api_translation_domains_tree:\n    path: /tree/{lang}/{type}/{selected}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:listTreeAction\n        selected: null\n\napi_translation_domain_catalog:\n    path: /{locale}/{domain}/{theme}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:listDomainTranslationAction\n        theme: null\n        module: null\n\napi_translation_value_edit:\n    path: /edit\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:translationEditAction\n\napi_translation_value_reset:\n    path: /reset\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:translationResetAction\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property CartRule $object\n */\nclass AdminCartRulesControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'cart_rule';\n        $this->className = 'CartRule';\n        $this->lang = true;\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n        $this->_orderWay = 'DESC';\n\n        parent::__construct();\n\n        $this->bulk_actions = array('delete' => array('text' => $this->trans('Delete selected', array(), 'Admin.Actions'), 'icon' => 'icon-trash', 'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning')));\n\n        $this->fields_list = array(\n            'id_cart_rule' => array('title' => $this->trans('ID', array(), 'Admin.Global'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'name' => array('title' => $this->trans('Name', array(), 'Admin.Global')),\n            'priority' => array('title' => $this->trans('Priority', array(), 'Admin.Global'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'code' => array('title' => $this->trans('Code', array(), 'Admin.Global'), 'class' => 'fixed-width-sm'),\n            'quantity' => array('title' => $this->trans('Quantity', array(), 'Admin.Catalog.Feature'), 'align' => 'center', 'class' => 'fixed-width-xs'),\n            'date_to' => array('title' => $this->trans('Expiration date', array(), 'Admin.Catalog.Feature'), 'type' => 'datetime', 'class' => 'fixed-width-lg'),\n            'active' => array('title' => $this->trans('Status', array(), 'Admin.Global'), 'active' => 'status', 'type' => 'bool', 'align' => 'center', 'class' => 'fixed-width-xs', 'orderby' => false),\n        );\n    }\n\n    public function ajaxProcessLoadCartRules()\n    {\n        if (!$this->access('view')) {\n            return die(json_encode(array('error' => 'You do not have the right permission')));\n        }\n\n        $type = $token = $search = '';\n        $limit = $count = $id_cart_rule = 0;\n        if (Tools::getIsset('limit')) {\n            $limit = Tools::getValue('limit');\n        }\n\n        if (Tools::getIsset('type')) {\n            $type = Tools::getValue('type');\n        }\n\n        if (Tools::getIsset('count')) {\n            $count = Tools::getValue('count');\n        }\n\n        if (Tools::getIsset('id_cart_rule')) {\n            $id_cart_rule = Tools::getValue('id_cart_rule');\n        }\n\n        if (Tools::getIsset('search')) {\n            $search = Tools::getValue('search');\n        }\n\n        $page = floor($count / $limit);\n\n        $html = '';\n        $next_link = '';\n\n        if (($page * $limit) + 1 == $count || $count == 0) {\n            if ($count == 0) {\n                $count = 1;\n            }\n\n            /** @var CartRule $current_object */\n            $current_object = $this->loadObject(true);\n            $cart_rules = $current_object->getAssociatedRestrictions('cart_rule', false, true, ($page) * $limit, $limit, $search);\n\n            if ($type == 'selected') {\n                $i = 1;\n                foreach ($cart_rules['selected'] as $cart_rule) {\n                    $html .= '<option value=\"' . (int) $cart_rule['id_cart_rule'] . '\">&nbsp;' . Tools::safeOutput($cart_rule['name']) . '</option>';\n                    if ($i == $limit) {\n                        break;\n                    }\n                    ++$i;\n                }\n                if ($i == $limit) {\n                    $next_link = Context::getContext()->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' . (int) $id_cart_rule . '&action=loadCartRules&limit=' . (int) $limit . '&type=selected&count=' . ($count - 1 + count($cart_rules['selected']) . '&search=' . urlencode($search));\n                }\n            } else {\n                $i = 1;\n                foreach ($cart_rules['unselected'] as $cart_rule) {\n                    $html .= '<option value=\"' . (int) $cart_rule['id_cart_rule'] . '\">&nbsp;' . Tools::safeOutput($cart_rule['name']) . '</option>';\n                    if ($i == $limit) {\n                        break;\n                    }\n                    ++$i;\n                }\n                if ($i == $limit) {\n                    $next_link = Context::getContext()->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' . (int) $id_cart_rule . '&action=loadCartRules&limit=' . (int) $limit . '&type=unselected&count=' . ($count - 1 + count($cart_rules['unselected']) . '&search=' . urlencode($search));\n                }\n            }\n        }\n        echo json_encode(array('html' => $html, 'next_link' => $next_link));\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n        $this->addJqueryPlugin(array('typewatch', 'fancybox', 'autocomplete'));\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_cart_rule'] = array(\n                'href' => self::$currentIndex . '&addcart_rule&token=' . $this->token,\n                'desc' => $this->trans('Add new cart rule', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitAddcart_rule') || Tools::isSubmit('submitAddcart_ruleAndStay')) {\n            // If the reduction is associated to a specific product, then it must be part of the product restrictions\n            if ((int) Tools::getValue('reduction_product') && Tools::getValue('apply_discount_to') == 'specific' && Tools::getValue('apply_discount') != 'off') {\n                $reduction_product = (int) Tools::getValue('reduction_product');\n\n                // First, check if it is not already part of the restrictions\n                $already_restricted = false;\n                if (is_array($rule_group_array = Tools::getValue('product_rule_group')) && count($rule_group_array) && Tools::getValue('product_restriction')) {\n                    foreach ($rule_group_array as $rule_group_id) {\n                        if (is_array($rule_array = Tools::getValue('product_rule_' . $rule_group_id)) && count($rule_array)) {\n                            foreach ($rule_array as $rule_id) {\n                                if (Tools::getValue('product_rule_' . $rule_group_id . '_' . $rule_id . '_type') == 'products'\n                                    && in_array($reduction_product, Tools::getValue('product_rule_select_' . $rule_group_id . '_' . $rule_id))) {\n                                    $already_restricted = true;\n\n                                    break 2;\n                                }\n                            }\n                        }\n                    }\n                }\n                if ($already_restricted == false) {\n                    // Check the product restriction\n                    $_POST['product_restriction'] = 1;\n\n                    // Add a new rule group\n                    $rule_group_id = 1;\n                    if (is_array($rule_group_array)) {\n                        // Empty for (with a ; at the end), that just find the first rule_group_id available in rule_group_array\n                        for ($rule_group_id = 1; in_array($rule_group_id, $rule_group_array); ++$rule_group_id) {\n                            42;\n                        }\n                        $_POST['product_rule_group'][] = $rule_group_id;\n                    } else {\n                        $_POST['product_rule_group'] = array($rule_group_id);\n                    }\n\n                    // Set a quantity of 1 for this new rule group\n                    $_POST['product_rule_group_' . $rule_group_id . '_quantity'] = 1;\n                    // Add one rule to the new rule group\n                    $_POST['product_rule_' . $rule_group_id] = array(1);\n                    // Set a type 'product' for this 1 rule\n                    $_POST['product_rule_' . $rule_group_id . '_1_type'] = 'products';\n                    // Add the product in the selected products\n                    $_POST['product_rule_select_' . $rule_group_id . '_1'] = array($reduction_product);\n                }\n            }\n\n            // These are checkboxes (which aren't sent through POST when they are not check), so they are forced to 0\n            foreach (array('country', 'carrier', 'group', 'cart_rule', 'product', 'shop') as $type) {\n                if (!Tools::getValue($type . '_restriction')) {\n                    $_POST[$type . '_restriction'] = 0;\n                }\n            }\n\n            // Remove the gift if the radio button is set to \"no\"\n            if (!(int) Tools::getValue('free_gift')) {\n                $_POST['gift_product'] = 0;\n            }\n\n            // Retrieve the product attribute id of the gift (if available)\n            if ($id_product = (int) Tools::getValue('gift_product')) {\n                $_POST['gift_product_attribute'] = (int) Tools::getValue('ipa_' . $id_product);\n            }\n\n            // Idiot-proof control\n            if (strtotime(Tools::getValue('date_from')) > strtotime(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The voucher cannot end before it begins.', array(), 'Admin.Catalog.Notification');\n            }\n            if ((int) Tools::getValue('minimum_amount') < 0) {\n                $this->errors[] = $this->trans('The minimum amount cannot be lower than zero.', array(), 'Admin.Catalog.Notification');\n            }\n            if ((float) Tools::getValue('reduction_percent') < 0 || (float) Tools::getValue('reduction_percent') > 100) {\n                $this->errors[] = $this->trans('Reduction percentage must be between 0% and 100%', array(), 'Admin.Catalog.Notification');\n            }\n            if ((int) Tools::getValue('reduction_amount') < 0) {\n                $this->errors[] = $this->trans('Reduction amount cannot be lower than zero.', array(), 'Admin.Catalog.Notification');\n            }\n            if (Tools::getValue('code') && ($same_code = (int) CartRule::getIdByCode(Tools::getValue('code'))) && $same_code != Tools::getValue('id_cart_rule')) {\n                $this->errors[] = $this->trans('This cart rule code is already used (conflict with cart rule %rulename%)', array('%rulename%' => $same_code), 'Admin.Catalog.Notification');\n            }\n            if (Tools::getValue('apply_discount') == 'off' && !Tools::getValue('free_shipping') && !Tools::getValue('free_gift')) {\n                $this->errors[] = $this->trans('An action is required for this cart rule.', array(), 'Admin.Catalog.Notification');\n            }\n        }\n\n        return parent::postProcess();\n    }\n\n    public function processDelete()\n    {\n        $res = parent::processDelete();\n        if (Tools::isSubmit('delete' . $this->table)) {\n            $back = urldecode(Tools::getValue('back', ''));\n            if (!empty($back)) {\n                $this->redirect_after = $back;\n            }\n        }\n\n        return $res;\n    }\n\n    protected function afterUpdate($current_object)\n    {\n        // All the associations are deleted for an update, then recreated when we call the \"afterAdd\" method\n        $id_cart_rule = Tools::getValue('id_cart_rule');\n        foreach (array('country', 'carrier', 'group', 'product_rule_group', 'shop') as $type) {\n            Db::getInstance()->delete('cart_rule_' . $type, '`id_cart_rule` = ' . (int) $id_cart_rule);\n        }\n\n        Db::getInstance()->delete('cart_rule_product_rule', 'NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule_group`\n\t\t\tWHERE `' . _DB_PREFIX_ . 'cart_rule_product_rule`.`id_product_rule_group` = `' . _DB_PREFIX_ . 'cart_rule_product_rule_group`.`id_product_rule_group`)');\n        Db::getInstance()->delete('cart_rule_product_rule_value', 'NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'cart_rule_product_rule`\n\t\t\tWHERE `' . _DB_PREFIX_ . 'cart_rule_product_rule_value`.`id_product_rule` = `' . _DB_PREFIX_ . 'cart_rule_product_rule`.`id_product_rule`)');\n        Db::getInstance()->delete('cart_rule_combination', '`id_cart_rule_1` = ' . (int) $id_cart_rule . ' OR `id_cart_rule_2` = ' . (int) $id_cart_rule);\n\n        $this->afterAdd($current_object);\n    }\n\n    public function processAdd()\n    {\n        if ($cart_rule = parent::processAdd()) {\n            $this->context->smarty->assign('new_cart_rule', $cart_rule);\n        }\n        if (Tools::getValue('submitFormAjax')) {\n            $this->redirect_after = false;\n        }\n\n        return $cart_rule;\n    }\n\n    /**\n     * @TODO Move this function into CartRule\n     *\n     * @param ObjectModel $currentObject\n     *\n     * @throws PrestaShopDatabaseException\n     */\n    protected function afterAdd($currentObject)\n    {\n        // Add restrictions for generic entities like country, carrier and group\n        foreach (array('country', 'carrier', 'group', 'shop') as $type) {\n            if (Tools::getValue($type . '_restriction') && is_array($array = Tools::getValue($type . '_select')) && count($array)) {\n                $values = array();\n                foreach ($array as $id) {\n                    $values[] = '(' . (int) $currentObject->id . ',' . (int) $id . ')';\n                }\n                Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_' . $type . '` (`id_cart_rule`, `id_' . $type . '`) VALUES ' . implode(',', $values));\n            }\n        }\n        // Add cart rule restrictions\n        if (Tools::getValue('cart_rule_restriction') && is_array($array = Tools::getValue('cart_rule_select')) && count($array)) {\n            $values = array();\n            foreach ($array as $id) {\n                $values[] = '(' . (int) $currentObject->id . ',' . (int) $id . ')';\n            }\n            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) VALUES ' . implode(',', $values));\n        }\n        // Add product rule restrictions\n        if (Tools::getValue('product_restriction') && is_array($ruleGroupArray = Tools::getValue('product_rule_group')) && count($ruleGroupArray)) {\n            foreach ($ruleGroupArray as $ruleGroupId) {\n                Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule_group` (`id_cart_rule`, `quantity`)\n\t\t\t\tVALUES (' . (int) $currentObject->id . ', ' . (int) Tools::getValue('product_rule_group_' . $ruleGroupId . '_quantity') . ')');\n                $id_product_rule_group = Db::getInstance()->Insert_ID();\n\n                if (is_array($ruleArray = Tools::getValue('product_rule_' . $ruleGroupId)) && count($ruleArray)) {\n                    foreach ($ruleArray as $ruleId) {\n                        Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule` (`id_product_rule_group`, `type`)\n\t\t\t\t\t\tVALUES (' . (int) $id_product_rule_group . ', \"' . pSQL(Tools::getValue('product_rule_' . $ruleGroupId . '_' . $ruleId . '_type')) . '\")');\n                        $id_product_rule = Db::getInstance()->Insert_ID();\n\n                        $values = array();\n                        foreach (Tools::getValue('product_rule_select_' . $ruleGroupId . '_' . $ruleId) as $id) {\n                            $values[] = '(' . (int) $id_product_rule . ',' . (int) $id . ')';\n                        }\n                        $values = array_unique($values);\n                        if (count($values)) {\n                            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'cart_rule_product_rule_value` (`id_product_rule`, `id_item`) VALUES ' . implode(',', $values));\n                        }\n                    }\n                }\n            }\n        }\n\n        // If the new rule has no cart rule restriction, then it must be added to the white list of the other cart rules that have restrictions\n        if (!Tools::getValue('cart_rule_restriction')) {\n            Db::getInstance()->execute('\n\t\t\tINSERT INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) (\n\t\t\t\tSELECT id_cart_rule, ' . (int) $currentObject->id . ' FROM `' . _DB_PREFIX_ . 'cart_rule` WHERE cart_rule_restriction = 1\n\t\t\t)');\n        } else {\n            // And if the new cart rule has restrictions, previously unrestricted cart rules may now be restricted (a mug of coffee is strongly advised to understand this sentence)\n            $ruleCombinations = Db::getInstance()->executeS('\n\t\t\tSELECT cr.id_cart_rule\n\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule cr\n\t\t\tWHERE cr.id_cart_rule != ' . (int) $currentObject->id . '\n\t\t\tAND cr.cart_rule_restriction = 0\n\t\t\tAND NOT EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule_combination\n\t\t\t\tWHERE cr.id_cart_rule = ' . _DB_PREFIX_ . 'cart_rule_combination.id_cart_rule_2 AND ' . (int) $currentObject->id . ' = id_cart_rule_1\n\t\t\t)\n\t\t\tAND NOT EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'cart_rule_combination\n\t\t\t\tWHERE cr.id_cart_rule = ' . _DB_PREFIX_ . 'cart_rule_combination.id_cart_rule_1 AND ' . (int) $currentObject->id . ' = id_cart_rule_2\n\t\t\t)\n\t\t\t');\n            foreach ($ruleCombinations as $incompatibleRule) {\n                Db::getInstance()->execute('UPDATE `' . _DB_PREFIX_ . 'cart_rule` SET cart_rule_restriction = 1 WHERE id_cart_rule = ' . (int) $incompatibleRule['id_cart_rule'] . ' LIMIT 1');\n                Db::getInstance()->execute('\n\t\t\t\tINSERT IGNORE INTO `' . _DB_PREFIX_ . 'cart_rule_combination` (`id_cart_rule_1`, `id_cart_rule_2`) (\n\t\t\t\t\tSELECT id_cart_rule, ' . (int) $incompatibleRule['id_cart_rule'] . ' FROM `' . _DB_PREFIX_ . 'cart_rule`\n\t\t\t\t\tWHERE active = 1\n\t\t\t\t\tAND id_cart_rule != ' . (int) $currentObject->id . '\n\t\t\t\t\tAND id_cart_rule != ' . (int) $incompatibleRule['id_cart_rule'] . '\n\t\t\t\t)');\n            }\n        }\n    }\n\n    /**\n     * Retrieve the cart rule product rule groups in the POST data\n     * if available, and in the database if there is none.\n     *\n     * @param CartRule $cart_rule\n     *\n     * @return array\n     */\n    public function getProductRuleGroupsDisplay($cart_rule)\n    {\n        $productRuleGroupsArray = array();\n        if (Tools::getValue('product_restriction') && is_array($array = Tools::getValue('product_rule_group')) && count($array)) {\n            $i = 1;\n            foreach ($array as $ruleGroupId) {\n                $productRulesArray = array();\n                if (is_array($array = Tools::getValue('product_rule_' . $ruleGroupId)) && count($array)) {\n                    foreach ($array as $ruleId) {\n                        $productRulesArray[] = $this->getProductRuleDisplay(\n                            $ruleGroupId,\n                            $ruleId,\n                            Tools::getValue('product_rule_' . $ruleGroupId . '_' . $ruleId . '_type'),\n                            Tools::getValue('product_rule_select_' . $ruleGroupId . '_' . $ruleId)\n                        );\n                    }\n                }\n\n                $productRuleGroupsArray[] = $this->getProductRuleGroupDisplay(\n                    $i++,\n                    (int) Tools::getValue('product_rule_group_' . $ruleGroupId . '_quantity'),\n                    $productRulesArray\n                );\n            }\n        } else {\n            $i = 1;\n            foreach ($cart_rule->getProductRuleGroups() as $productRuleGroup) {\n                $j = 1;\n                $productRulesDisplay = array();\n                foreach ($productRuleGroup['product_rules'] as $productRule) {\n                    $productRulesDisplay[] = $this->getProductRuleDisplay($i, $j++, $productRule['type'], $productRule['values']);\n                }\n                $productRuleGroupsArray[] = $this->getProductRuleGroupDisplay($i++, $productRuleGroup['quantity'], $productRulesDisplay);\n            }\n        }\n\n        return $productRuleGroupsArray;\n    }\n\n    /* Return the form for a single cart rule group either with or without product_rules set up */\n    public function getProductRuleGroupDisplay($product_rule_group_id, $product_rule_group_quantity = 1, $product_rules = null)\n    {\n        Context::getContext()->smarty->assign('product_rule_group_id', $product_rule_group_id);\n        Context::getContext()->smarty->assign('product_rule_group_quantity', $product_rule_group_quantity);\n        Context::getContext()->smarty->assign('product_rules', $product_rules);\n\n        return $this->createTemplate('product_rule_group.tpl')->fetch();\n    }\n\n    public function getProductRuleDisplay($product_rule_group_id, $product_rule_id, $product_rule_type, $selected = array())\n    {\n        Context::getContext()->smarty->assign(\n            array(\n                'product_rule_group_id' => (int) $product_rule_group_id,\n                'product_rule_id' => (int) $product_rule_id,\n                'product_rule_type' => $product_rule_type,\n            )\n        );\n\n        switch ($product_rule_type) {\n            case 'attributes':\n                $attributes = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT CONCAT(agl.name, \" - \", al.name) as name, a.id_attribute as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'attribute_group_lang agl\n\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attribute a ON a.id_attribute_group = agl.id_attribute_group\n\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attribute_lang al ON (a.id_attribute = al.id_attribute AND al.id_lang = ' . (int) Context::getContext()->language->id . ')\n\t\t\t\tWHERE agl.id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY agl.name, al.name');\n                foreach ($results as $row) {\n                    $attributes[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $attributes);\n                $choose_content = $this->createTemplate('controllers/cart_rules/product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'products':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT DISTINCT name, p.id_product as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'product p\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_lang` pl\n\t\t\t\t\tON (p.`id_product` = pl.`id_product`\n\t\t\t\t\tAND pl.`id_lang` = ' . (int) Context::getContext()->language->id . Shop::addSqlRestrictionOnLang('pl') . ')\n\t\t\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\t\t\tWHERE id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'manufacturers':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT name, id_manufacturer as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'manufacturer\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'suppliers':\n                $products = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT name, id_supplier as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'supplier\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $products[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $products);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            case 'categories':\n                $categories = array('selected' => array(), 'unselected' => array());\n                $results = Db::getInstance()->executeS('\n\t\t\t\tSELECT DISTINCT name, c.id_category as id\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'category c\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_lang` cl\n\t\t\t\t\tON (c.`id_category` = cl.`id_category`\n\t\t\t\t\tAND cl.`id_lang` = ' . (int) Context::getContext()->language->id . Shop::addSqlRestrictionOnLang('cl') . ')\n\t\t\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\t\t\tWHERE id_lang = ' . (int) Context::getContext()->language->id . '\n\t\t\t\tORDER BY name');\n                foreach ($results as $row) {\n                    $categories[in_array($row['id'], $selected) ? 'selected' : 'unselected'][] = $row;\n                }\n                Context::getContext()->smarty->assign('product_rule_itemlist', $categories);\n                $choose_content = $this->createTemplate('product_rule_itemlist.tpl')->fetch();\n                Context::getContext()->smarty->assign('product_rule_choose_content', $choose_content);\n\n                break;\n            default:\n                Context::getContext()->smarty->assign('product_rule_itemlist', array('selected' => array(), 'unselected' => array()));\n                Context::getContext()->smarty->assign('product_rule_choose_content', '');\n        }\n\n        return $this->createTemplate('product_rule.tpl')->fetch();\n    }\n\n    public function ajaxProcess()\n    {\n        if (Tools::isSubmit('newProductRule')) {\n            die($this->getProductRuleDisplay(Tools::getValue('product_rule_group_id'), Tools::getValue('product_rule_id'), Tools::getValue('product_rule_type')));\n        }\n        if (Tools::isSubmit('newProductRuleGroup') && $product_rule_group_id = Tools::getValue('product_rule_group_id')) {\n            die($this->getProductRuleGroupDisplay($product_rule_group_id, Tools::getValue('product_rule_group_' . $product_rule_group_id . '_quantity', 1)));\n        }\n\n        if (Tools::isSubmit('customerFilter')) {\n            $search_query = trim(Tools::getValue('q'));\n            $customers = Db::getInstance()->executeS('\n\t\t\tSELECT `id_customer`, `email`, CONCAT(`firstname`, \\' \\', `lastname`) as cname\n\t\t\tFROM `' . _DB_PREFIX_ . 'customer`\n\t\t\tWHERE `deleted` = 0 AND is_guest = 0 AND active = 1\n\t\t\tAND (\n\t\t\t\t`id_customer` = ' . (int) $search_query . '\n\t\t\t\tOR `email` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t\tOR `firstname` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t\tOR `lastname` LIKE \"%' . pSQL($search_query) . '%\"\n\t\t\t)\n\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_CUSTOMER) . '\n\t\t\tORDER BY `firstname`, `lastname` ASC\n\t\t\tLIMIT 50');\n            die(json_encode($customers));\n        }\n        // Both product filter (free product and product discount) search for products\n        if (Tools::isSubmit('giftProductFilter') || Tools::isSubmit('reductionProductFilter')) {\n            $products = Product::searchByName(Context::getContext()->language->id, trim(Tools::getValue('q')));\n            die(json_encode($products));\n        }\n    }\n\n    protected function searchProducts($search)\n    {\n        if ($products = Product::searchByName((int) $this->context->language->id, $search)) {\n            foreach ($products as &$product) {\n                $combinations = array();\n                $productObj = new Product((int) $product['id_product'], false, (int) $this->context->language->id);\n                $attributes = $productObj->getAttributesGroups((int) $this->context->language->id);\n                $product['formatted_price'] = Tools::displayPrice(Tools::convertPrice($product['price_tax_incl'], $this->context->currency), $this->context->currency);\n\n                foreach ($attributes as $attribute) {\n                    if (!isset($combinations[$attribute['id_product_attribute']]['attributes'])) {\n                        $combinations[$attribute['id_product_attribute']]['attributes'] = '';\n                    }\n                    $combinations[$attribute['id_product_attribute']]['attributes'] .= $attribute['attribute_name'] . ' - ';\n                    $combinations[$attribute['id_product_attribute']]['id_product_attribute'] = $attribute['id_product_attribute'];\n                    $combinations[$attribute['id_product_attribute']]['default_on'] = $attribute['default_on'];\n                    if (!isset($combinations[$attribute['id_product_attribute']]['price'])) {\n                        $price_tax_incl = Product::getPriceStatic((int) $product['id_product'], true, $attribute['id_product_attribute']);\n                        $combinations[$attribute['id_product_attribute']]['formatted_price'] = Tools::displayPrice(Tools::convertPrice($price_tax_incl, $this->context->currency), $this->context->currency);\n                    }\n                }\n\n                foreach ($combinations as &$combination) {\n                    $combination['attributes'] = rtrim($combination['attributes'], ' - ');\n                }\n                $product['combinations'] = $combinations;\n            }\n\n            return array(\n                'products' => $products,\n                'found' => true,\n            );\n        } else {\n            return array('found' => false, 'notfound' => $this->trans('No product has been found.', array(), 'Admin.Catalog.Notification'));\n        }\n    }\n\n    public function ajaxProcessSearchProducts()\n    {\n        $array = $this->searchProducts(Tools::getValue('product_search'));\n        $this->content = trim(json_encode($array));\n    }\n\n    public function renderForm()\n    {\n        $limit = 40;\n        $this->toolbar_btn['save-and-stay'] = array(\n            'href' => '#',\n            'desc' => $this->trans('Save and stay', array(), 'Admin.Actions'),\n        );\n\n        /** @var CartRule $current_object */\n        $current_object = $this->loadObject(true);\n\n        // All the filter are prefilled with the correct information\n        $customer_filter = '';\n        if (Validate::isUnsignedId($current_object->id_customer) &&\n            ($customer = new Customer($current_object->id_customer)) &&\n            Validate::isLoadedObject($customer)) {\n            $customer_filter = $customer->firstname . ' ' . $customer->lastname . ' (' . $customer->email . ')';\n        }\n\n        $gift_product_filter = '';\n        if (Validate::isUnsignedId($current_object->gift_product) &&\n            ($product = new Product($current_object->gift_product, false, $this->context->language->id)) &&\n            Validate::isLoadedObject($product)) {\n            $gift_product_filter = (!empty($product->reference) ? $product->reference : $product->name);\n        }\n\n        $reduction_product_filter = '';\n        if (Validate::isUnsignedId($current_object->reduction_product) &&\n            ($product = new Product($current_object->reduction_product, false, $this->context->language->id)) &&\n            Validate::isLoadedObject($product)) {\n            $reduction_product_filter = (!empty($product->reference) ? $product->reference : $product->name);\n        }\n\n        $product_rule_groups = $this->getProductRuleGroupsDisplay($current_object);\n\n        $attribute_groups = AttributeGroup::getAttributesGroups($this->context->language->id);\n        $currencies = Currency::getCurrencies(false, true, true);\n        $languages = Language::getLanguages();\n        $countries = $current_object->getAssociatedRestrictions('country', true, true);\n        $groups = $current_object->getAssociatedRestrictions('group', false, true);\n        $shops = $current_object->getAssociatedRestrictions('shop', false, false);\n        $cart_rules = $current_object->getAssociatedRestrictions('cart_rule', false, true, 0, $limit);\n        $carriers = $current_object->getAssociatedRestrictions('carrier', true, false);\n        foreach ($carriers as &$carriers2) {\n            foreach ($carriers2 as &$carrier) {\n                foreach ($carrier as $field => &$value) {\n                    if ($field == 'name' && $value == '0') {\n                        $value = Configuration::get('PS_SHOP_NAME');\n                    }\n                }\n            }\n        }\n\n        $gift_product_select = '';\n        $gift_product_attribute_select = '';\n        if ((int) $current_object->gift_product) {\n            $search_products = $this->searchProducts($gift_product_filter);\n            if (isset($search_products['products']) && is_array($search_products['products'])) {\n                foreach ($search_products['products'] as $product) {\n                    $gift_product_select .= '\n\t\t\t\t\t<option value=\"' . $product['id_product'] . '\" ' . ($product['id_product'] == $current_object->gift_product ? 'selected=\"selected\"' : '') . '>\n\t\t\t\t\t\t' . $product['name'] . (count($product['combinations']) == 0 ? ' - ' . $product['formatted_price'] : '') . '\n\t\t\t\t\t</option>';\n\n                    if (count($product['combinations'])) {\n                        $gift_product_attribute_select .= '<select class=\"control-form id_product_attribute\" id=\"ipa_' . $product['id_product'] . '\" name=\"ipa_' . $product['id_product'] . '\">';\n                        foreach ($product['combinations'] as $combination) {\n                            $gift_product_attribute_select .= '\n\t\t\t\t\t\t\t<option ' . ($combination['id_product_attribute'] == $current_object->gift_product_attribute ? 'selected=\"selected\"' : '') . ' value=\"' . $combination['id_product_attribute'] . '\">\n\t\t\t\t\t\t\t\t' . $combination['attributes'] . ' - ' . $combination['formatted_price'] . '\n\t\t\t\t\t\t\t</option>';\n                        }\n                        $gift_product_attribute_select .= '</select>';\n                    }\n                }\n            }\n        }\n\n        $product = new Product($current_object->gift_product);\n        $this->context->smarty->assign(\n            array(\n                'show_toolbar' => true,\n                'toolbar_btn' => $this->toolbar_btn,\n                'toolbar_scroll' => $this->toolbar_scroll,\n                'title' => array($this->trans('Payment: ', array(), 'Admin.Catalog.Feature'), $this->trans('Cart Rules', array(), 'Admin.Catalog.Feature')),\n                'defaultDateFrom' => date('Y-m-d H:00:00'),\n                'defaultDateTo' => date('Y-m-d H:00:00', strtotime('+1 month')),\n                'customerFilter' => $customer_filter,\n                'giftProductFilter' => $gift_product_filter,\n                'gift_product_select' => $gift_product_select,\n                'gift_product_attribute_select' => $gift_product_attribute_select,\n                'reductionProductFilter' => $reduction_product_filter,\n                'defaultCurrency' => Configuration::get('PS_CURRENCY_DEFAULT'),\n                'id_lang_default' => Configuration::get('PS_LANG_DEFAULT'),\n                'languages' => $languages,\n                'currencies' => $currencies,\n                'countries' => $countries,\n                'carriers' => $carriers,\n                'groups' => $groups,\n                'shops' => $shops,\n                'cart_rules' => $cart_rules,\n                'product_rule_groups' => $product_rule_groups,\n                'product_rule_groups_counter' => count($product_rule_groups),\n                'attribute_groups' => $attribute_groups,\n                'currentIndex' => self::$currentIndex,\n                'currentToken' => $this->token,\n                'currentObject' => $current_object,\n                'currentTab' => $this,\n                'hasAttribute' => $product->hasAttributes(),\n            )\n        );\n        Media::addJsDef(array('baseHref' => $this->context->link->getAdminLink('AdminCartRules') . '&ajaxMode=1&ajax=1&id_cart_rule=' .\n                                     (int) Tools::getValue('id_cart_rule') . '&action=loadCartRules&limit=' . (int) $limit . '&count=0', ));\n        $this->content .= $this->createTemplate('form.tpl')->fetch();\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJqueryPlugin(array('jscroll', 'typewatch'));\n\n        return parent::renderForm();\n    }\n\n    public function displayAjaxSearchCartRuleVouchers()\n    {\n        $found = false;\n        if ($vouchers = CartRule::getCartsRuleByCode(Tools::getValue('q'), (int) $this->context->language->id, true)) {\n            $found = true;\n        }\n        echo json_encode(array('found' => $found, 'vouchers' => $vouchers));\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManagerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\Theme;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\ThemeManagerBuilder;\n\nclass AdminStatsControllerCore extends AdminStatsTabController\n{\n    public static function getVisits($unique, $date_from, $date_to, $granularity = false)\n    {\n        $visits = ($granularity == false) ? 0 : array();\n        $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n        $moduleManager = $moduleManagerBuilder->build();\n\n        /** @var Gapi $gapi */\n        $gapi = $moduleManager->isInstalled('gapi') ? Module::getInstanceByName('gapi') : false;\n        if (Validate::isLoadedObject($gapi) && $gapi->isConfigured()) {\n            $metric = $unique ? 'visitors' : 'visits';\n            if ($result = $gapi->requestReportData(\n                $granularity ? 'ga:date' : '',\n                'ga:' . $metric,\n                $date_from,\n                $date_to,\n                null,\n                null,\n                1,\n                5000\n            )\n            ) {\n                foreach ($result as $row) {\n                    if ($granularity == 'day') {\n                        $visits[strtotime(\n                            preg_replace('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', '$1-$2-$3', $row['dimensions']['date'])\n                        )] = $row['metrics'][$metric];\n                    } elseif ($granularity == 'month') {\n                        if (!isset(\n                            $visits[strtotime(\n                                preg_replace(\n                                    '/^([0-9]{4})([0-9]{2})([0-9]{2})$/',\n                                    '$1-$2-01',\n                                    $row['dimensions']['date']\n                                )\n                            )]\n                        )\n                        ) {\n                            $visits[strtotime(\n                                preg_replace(\n                                    '/^([0-9]{4})([0-9]{2})([0-9]{2})$/',\n                                    '$1-$2-01',\n                                    $row['dimensions']['date']\n                                )\n                            )] = 0;\n                        }\n                        $visits[strtotime(\n                            preg_replace('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', '$1-$2-01', $row['dimensions']['date'])\n                        )] += $row['metrics'][$metric];\n                    } else {\n                        $visits = $row['metrics'][$metric];\n                    }\n                }\n            }\n        } else {\n            if ($granularity == 'day') {\n                $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                    '\n\t\t\t\tSELECT date(`date_add`) as date, COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction() . '\n\t\t\t\tGROUP BY date(`date_add`)'\n                );\n                foreach ($result as $row) {\n                    $visits[strtotime($row['date'])] = $row['visits'];\n                }\n            } elseif ($granularity == 'month') {\n                $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                    '\n\t\t\t\tSELECT LEFT(LAST_DAY(`date_add`), 7) as date, COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction() . '\n\t\t\t\tGROUP BY LAST_DAY(`date_add`)'\n                );\n                foreach ($result as $row) {\n                    $visits[strtotime($row['date'] . '-01')] = $row['visits'];\n                }\n            } else {\n                $visits = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(' . ($unique ? 'DISTINCT id_guest' : '*') . ') as visits\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'connections`\n\t\t\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n            }\n        }\n\n        return $visits;\n    }\n\n    public static function getAbandonedCarts($date_from, $date_to)\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT id_guest)\n\t\tFROM `' . _DB_PREFIX_ . 'cart`\n\t\tWHERE `date_add` BETWEEN \"' . pSQL($date_from) . '\" AND \"' . pSQL($date_to) . '\"\n\t\tAND NOT EXISTS (SELECT 1 FROM `' . _DB_PREFIX_ . 'orders` WHERE `' . _DB_PREFIX_ . 'orders`.id_cart = `' . _DB_PREFIX_ . 'cart`.id_cart)\n\t\t' . Shop::addSqlRestriction()\n        );\n    }\n\n    public static function getInstalledModules()\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT m.`id_module`)\n\t\tFROM `' . _DB_PREFIX_ . 'module` m\n\t\t' . Shop::addSqlAssociation('module', 'm')\n        );\n    }\n\n    public static function getDisabledModules()\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'module` m\n\t\t' . Shop::addSqlAssociation('module', 'm', false) . '\n\t\tWHERE module_shop.id_module IS NULL OR m.active = 0'\n        );\n    }\n\n    public static function getModulesToUpdate()\n    {\n        $context = Context::getContext();\n        $logged_on_addons = false;\n        if (isset($context->cookie->username_addons, $context->cookie->password_addons)\n            && !empty($context->cookie->username_addons) && !empty($context->cookie->password_addons)\n        ) {\n            $logged_on_addons = true;\n        }\n        $modules = Module::getModulesOnDisk(true, $logged_on_addons, $context->employee->id);\n        $upgrade_available = 0;\n        foreach ($modules as $km => $module) {\n            if ($module->installed && isset($module->version_addons) && $module->version_addons) { // SimpleXMLElement\n                ++$upgrade_available;\n            }\n        }\n\n        return $upgrade_available;\n    }\n\n    public static function getPercentProductStock()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(IFNULL(stock.quantity, 0) > 0, 1, 0)) AS with_stock, COUNT(*) AS products\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Product::sqlStock('p', 'pa') . '\n\t\tWHERE product_shop.active = 1'\n        );\n\n        return round($row['products'] ? 100 * $row['with_stock'] / $row['products'] : 0, 2) . '%';\n    }\n\n    public static function getPercentProductOutOfStock()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(IFNULL(stock.quantity, 0) <= 0, 1, 0)) AS without_stock, COUNT(*) AS products\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Product::sqlStock('p', 'pa') . '\n\t\tWHERE product_shop.active = 1'\n        );\n\n        return round($row['products'] ? 100 * $row['without_stock'] / $row['products'] : 0, 2) . '%';\n    }\n\n    public static function getProductAverageGrossMargin()\n    {\n        $sql = 'SELECT AVG(1 - (IF(IFNULL(product_attribute_shop.wholesale_price, 0) = 0, product_shop.wholesale_price,product_attribute_shop.wholesale_price) / (IFNULL(product_attribute_shop.price, 0) + product_shop.price)))\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'product_attribute` pa ON p.id_product = pa.id_product\n\t\t' . Shop::addSqlAssociation('product_attribute', 'pa', false) . '\n\t\tWHERE product_shop.active = 1';\n        $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql);\n\n        return round(100 * $value, 2) . '%';\n    }\n\n    public static function getDisabledCategories()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tWHERE c.active = 0'\n        );\n    }\n\n    public static function getTotalCategories()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c')\n        );\n    }\n\n    public static function getDisabledProducts()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p') . '\n\t\tWHERE product_shop.active = 0'\n        );\n    }\n\n    public static function getTotalProducts()\n    {\n        return (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'product` p\n\t\t' . Shop::addSqlAssociation('product', 'p')\n        );\n    }\n\n    public static function getTotalSales($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $sales = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 10) AS date, SUM(total_products / o.conversion_rate) AS sales\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $sales[strtotime($row['date'])] = $row['sales'];\n            }\n\n            return $sales;\n        } elseif ($granularity == 'month') {\n            $sales = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 7) AS date, SUM(total_products / o.conversion_rate) AS sales\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 7)'\n            );\n            foreach ($result as $row) {\n                $sales[strtotime($row['date'] . '-01')] = $row['sales'];\n            }\n\n            return $sales;\n        } else {\n            return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT SUM(total_products / o.conversion_rate)\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n    }\n\n    public static function get8020SalesCatalog($date_from, $date_to)\n    {\n        $distinct_products = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT od.product_id)\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction(false, 'o')\n        );\n        if (!$distinct_products) {\n            return '0%';\n        }\n\n        return round(100 * $distinct_products / AdminStatsController::getTotalProducts()) . '%';\n    }\n\n    public static function getOrders($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $orders = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 10) AS date, COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $orders[strtotime($row['date'])] = $row['orders'];\n            }\n\n            return $orders;\n        } elseif ($granularity == 'month') {\n            $orders = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT LEFT(`invoice_date`, 7) AS date, COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 7)'\n            );\n            foreach ($result as $row) {\n                $orders[strtotime($row['date'] . '-01')] = $row['orders'];\n            }\n\n            return $orders;\n        } else {\n            $orders = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT COUNT(*) AS orders\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n\n        return $orders;\n    }\n\n    public static function getEmptyCategories()\n    {\n        $total = (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(*)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tAND c.`id_category` != ' . (int) Configuration::get('PS_ROOT_CATEGORY')\n        );\n        $used = (int) Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT COUNT(DISTINCT cp.id_category)\n\t\tFROM `' . _DB_PREFIX_ . 'category` c\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_product` cp ON c.id_category = cp.id_category\n\t\t' . Shop::addSqlAssociation('category', 'c') . '\n\t\tAND c.`id_category` != ' . (int) Configuration::get('PS_ROOT_CATEGORY')\n        );\n\n        return (int) ($total - $used);\n    }\n\n    public static function getCustomerMainGender()\n    {\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT SUM(IF(g.id_gender IS NOT NULL, 1, 0)) AS total, SUM(IF(type = 0, 1, 0)) AS male, SUM(IF(type = 1, 1, 0)) AS female, SUM(IF(type = 2, 1, 0)) AS neutral\n\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'gender` g ON c.id_gender = g.id_gender\n\t\tWHERE c.active = 1 ' . Shop::addSqlRestriction()\n        );\n\n        if (!$row['total']) {\n            return false;\n        } elseif ($row['male'] > $row['female'] && $row['male'] >= $row['neutral']) {\n            return array('type' => 'male', 'value' => round(100 * $row['male'] / $row['total']));\n        } elseif ($row['female'] >= $row['male'] && $row['female'] >= $row['neutral']) {\n            return array('type' => 'female', 'value' => round(100 * $row['female'] / $row['total']));\n        }\n\n        return array('type' => 'neutral', 'value' => round(100 * $row['neutral'] / $row['total']));\n    }\n\n    public static function getBestCategory($date_from, $date_to)\n    {\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT ca.`id_category`\n\t\tFROM `' . _DB_PREFIX_ . 'category` ca\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'category_product` capr ON ca.`id_category` = capr.`id_category`\n\t\tLEFT JOIN (\n\t\t\tSELECT pr.`id_product`, t.`totalPriceSold`\n\t\t\tFROM `' . _DB_PREFIX_ . 'product` pr\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT pr.`id_product`,\n\t\t\t\t\tIFNULL(SUM(cp.`product_quantity`), 0) AS totalQuantitySold,\n\t\t\t\t\tIFNULL(SUM(cp.`product_price` * cp.`product_quantity`), 0) / o.conversion_rate AS totalPriceSold\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'product` pr\n\t\t\t\tLEFT OUTER JOIN `' . _DB_PREFIX_ . 'order_detail` cp ON pr.`id_product` = cp.`product_id`\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'orders` o ON o.`id_order` = cp.`id_order`\n\t\t\t\tWHERE o.invoice_date BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t\t\tGROUP BY pr.`id_product`\n\t\t\t) t ON t.`id_product` = pr.`id_product`\n\t\t) t\tON t.`id_product` = capr.`id_product`\n\t\tWHERE ca.`level_depth` > 1\n\t\tGROUP BY ca.`id_category`\n\t\tORDER BY SUM(t.`totalPriceSold`) DESC'\n        );\n    }\n\n    public static function getMainCountry($date_from, $date_to)\n    {\n        $total_orders = AdminStatsController::getOrders($date_from, $date_to);\n        if (!$total_orders) {\n            return false;\n        }\n        $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n            '\n\t\tSELECT a.id_country, COUNT(*) AS orders\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'address` a ON o.id_address_delivery = a.id_address\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction()\n        );\n        $row['orders'] = round(100 * $row['orders'] / $total_orders, 1);\n\n        return $row;\n    }\n\n    public static function getAverageCustomerAge()\n    {\n        $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n            '\n\t\tSELECT AVG(DATEDIFF(\"' . date('Y-m-d') . ' 00:00:00\", birthday))\n\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\tWHERE active = 1\n\t\tAND birthday IS NOT NULL AND birthday != \"0000-00-00\" ' . Shop::addSqlRestriction()\n        );\n\n        return round($value / 365);\n    }\n\n    public static function getPendingMessages()\n    {\n        return CustomerThread::getTotalCustomerThreads(\n            'status LIKE \"%pending%\" OR status = \"open\"' . Shop::addSqlRestriction()\n        );\n    }\n\n    public static function getAverageMessageResponseTime($date_from, $date_to)\n    {\n        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n            '\n\t\tSELECT MIN(cm1.date_add) AS question, MIN(cm2.date_add) AS reply\n\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm1\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'customer_message` cm2 ON (cm1.id_customer_thread = cm2.id_customer_thread AND cm1.date_add < cm2.date_add)\n\t\tJOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm1.id_customer_thread = ct.id_customer_thread)\n\t\tWHERE cm1.`date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\tAND cm1.id_employee = 0 AND cm2.id_employee != 0\n\t\t' . Shop::addSqlRestriction() . '\n\t\tGROUP BY cm1.id_customer_thread'\n        );\n        $total_questions = $total_replies = $threads = 0;\n        foreach ($result as $row) {\n            ++$threads;\n            $total_questions += strtotime($row['question']);\n            $total_replies += strtotime($row['reply']);\n        }\n        if (!$threads) {\n            return 0;\n        }\n\n        return round(($total_replies - $total_questions) / $threads / 3600, 1);\n    }\n\n    public static function getMessagesPerThread($date_from, $date_to)\n    {\n        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n            '\n\t\tSELECT COUNT(*) AS messages\n\t\tFROM `' . _DB_PREFIX_ . 'customer_thread` ct\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_message` cm ON (ct.id_customer_thread = cm.id_customer_thread)\n\t\tWHERE ct.`date_add` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\"\n\t\t' . Shop::addSqlRestriction() . '\n\t\tAND STATUS = \"closed\"\n\t\tGROUP BY ct.id_customer_thread'\n        );\n        $threads = $messages = 0;\n        foreach ($result as $row) {\n            ++$threads;\n            $messages += $row['messages'];\n        }\n        if (!$threads) {\n            return 0;\n        }\n\n        return round($messages / $threads, 1);\n    }\n\n    public static function getPurchases($date_from, $date_to, $granularity = false)\n    {\n        if ($granularity == 'day') {\n            $purchases = array();\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS(\n                '\n\t\t\tSELECT\n\t\t\t\tLEFT(`invoice_date`, 10) as date,\n\t\t\t\tSUM(od.`product_quantity` * IF(\n\t\t\t\t\tod.`purchase_supplier_price` > 0,\n\t\t\t\t\tod.`purchase_supplier_price` / `conversion_rate`,\n\t\t\t\t\tod.`original_product_price` * ' . (int) Configuration::get('CONF_AVERAGE_PRODUCT_MARGIN') . ' / 100\n\t\t\t\t)) as total_purchase_price\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o') . '\n\t\t\tGROUP BY LEFT(`invoice_date`, 10)'\n            );\n            foreach ($result as $row) {\n                $purchases[strtotime($row['date'])] = $row['total_purchase_price'];\n            }\n\n            return $purchases;\n        } else {\n            return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                '\n\t\t\tSELECT SUM(od.`product_quantity` * IF(\n\t\t\t\tod.`purchase_supplier_price` > 0,\n\t\t\t\tod.`purchase_supplier_price` / `conversion_rate`,\n\t\t\t\tod.`original_product_price` * ' . (int) Configuration::get('CONF_AVERAGE_PRODUCT_MARGIN') . ' / 100\n\t\t\t)) as total_purchase_price\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_detail` od ON o.id_order = od.id_order\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t\t' . Shop::addSqlRestriction(false, 'o')\n            );\n        }\n    }\n\n    public static function getExpenses($date_from, $date_to, $granularity = false)\n    {\n        $expenses = ($granularity == 'day' ? array() : 0);\n\n        $orders = Db::getInstance()->executeS(\n            '\n\t\tSELECT\n\t\t\tLEFT(`invoice_date`, 10) AS date,\n\t\t\ttotal_paid_tax_incl / o.conversion_rate AS total_paid_tax_incl,\n\t\t\ttotal_shipping_tax_excl / o.conversion_rate AS total_shipping_tax_excl,\n\t\t\to.module,\n\t\t\ta.id_country,\n\t\t\to.id_currency,\n\t\t\tc.id_reference AS carrier_reference\n\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'address` a ON o.id_address_delivery = a.id_address\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'carrier` c ON o.id_carrier = c.id_carrier\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON o.current_state = os.id_order_state\n\t\tWHERE `invoice_date` BETWEEN \"' . pSQL($date_from) . ' 00:00:00\" AND \"' . pSQL($date_to) . ' 23:59:59\" AND os.logable = 1\n\t\t' . Shop::addSqlRestriction(false, 'o')\n        );\n        foreach ($orders as $order) {\n            // Add flat fees for this order\n            $flat_fees = Configuration::get('CONF_ORDER_FIXED') + (\n                $order['id_currency'] == Configuration::get('PS_CURRENCY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['module']) . '_FIXED')\n                    : Configuration::get('CONF_' . strtoupper($order['module']) . '_FIXED_FOREIGN')\n                );\n\n            // Add variable fees for this order\n            $var_fees = $order['total_paid_tax_incl'] * (\n                $order['id_currency'] == Configuration::get('PS_CURRENCY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['module']) . '_VAR')\n                    : Configuration::get('CONF_' . strtoupper($order['module']) . '_VAR_FOREIGN')\n                ) / 100;\n\n            // Add shipping fees for this order\n            $shipping_fees = $order['total_shipping_tax_excl'] * (\n                $order['id_country'] == Configuration::get('PS_COUNTRY_DEFAULT')\n                    ? Configuration::get('CONF_' . strtoupper($order['carrier_reference']) . '_SHIP')\n                    : Configuration::get('CONF_' . strtoupper($order['carrier_reference']) . '_SHIP_OVERSEAS')\n                ) / 100;\n\n            // Tally up these fees\n            if ($granularity == 'day') {\n                if (!isset($expenses[strtotime($order['date'])])) {\n                    $expenses[strtotime($order['date'])] = 0;\n                }\n                $expenses[strtotime($order['date'])] += $flat_fees + $var_fees + $shipping_fees;\n            } else {\n                $expenses += $flat_fees + $var_fees + $shipping_fees;\n            }\n        }\n\n        return $expenses;\n    }\n\n    public function displayAjaxGetKpi()\n    {\n        if (!$this->access('view')) {\n            return die(json_encode(array('error' => 'You do not have the right permission')));\n        }\n\n        $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        $tooltip = null;\n        switch (Tools::getValue('kpi')) {\n            case 'conversion_rate':\n                $visitors = AdminStatsController::getVisits(\n                    true,\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day')),\n                    false /*'day'*/\n                );\n                $orders = AdminStatsController::getOrders(\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day')),\n                    false /*'day'*/\n                );\n\n                // $data = array();\n                // $from = strtotime(date('Y-m-d 00:00:00', strtotime('-31 day')));\n                // $to = strtotime(date('Y-m-d 23:59:59', strtotime('-1 day')));\n                // for ($date = $from; $date <= $to; $date = strtotime('+1 day', $date))\n                // if (isset($visitors[$date]) && $visitors[$date])\n                // $data[$date] = round(100 * ((isset($orders[$date]) && $orders[$date]) ? $orders[$date] : 0) / $visitors[$date], 2);\n                // else\n                // $data[$date] = 0;\n\n                $visits_sum = $visitors; //array_sum($visitors);\n                $orders_sum = $orders; //array_sum($orders);\n                if ($visits_sum) {\n                    $value = round(100 * $orders_sum / $visits_sum, 2);\n                } elseif ($orders_sum) {\n                    $value = '&infin;';\n                } else {\n                    $value = 0;\n                }\n                $value .= '%';\n\n                // ConfigurationKPI::updateValue('CONVERSION_RATE_CHART', json_encode($data));\n                ConfigurationKPI::updateValue('CONVERSION_RATE', $value);\n                ConfigurationKPI::updateValue(\n                    'CONVERSION_RATE_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'abandoned_cart':\n                $value = AdminStatsController::getAbandonedCarts(\n                    date('Y-m-d H:i:s', strtotime('-2 day')),\n                    date('Y-m-d H:i:s', strtotime('-1 day'))\n                );\n                ConfigurationKPI::updateValue('ABANDONED_CARTS', $value);\n                ConfigurationKPI::updateValue('ABANDONED_CARTS_EXPIRE', strtotime('+1 hour'));\n\n                break;\n\n            case 'installed_modules':\n                $value = AdminStatsController::getInstalledModules();\n                ConfigurationKPI::updateValue('INSTALLED_MODULES', $value);\n                ConfigurationKPI::updateValue('INSTALLED_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'disabled_modules':\n                $value = AdminStatsController::getDisabledModules();\n                ConfigurationKPI::updateValue('DISABLED_MODULES', $value);\n                ConfigurationKPI::updateValue('DISABLED_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'update_modules':\n                $value = AdminStatsController::getModulesToUpdate();\n                ConfigurationKPI::updateValue('UPDATE_MODULES', $value);\n                ConfigurationKPI::updateValue('UPDATE_MODULES_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'percent_product_stock':\n                $value = AdminStatsController::getPercentProductStock();\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_STOCK', $value);\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_STOCK_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'percent_product_out_of_stock':\n                $value = AdminStatsController::getPercentProductOutOfStock();\n                $tooltip = $this->trans(\n                    '%value% of your products for sale are out of stock.',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_OUT_OF_STOCK', $value);\n                ConfigurationKPI::updateValue('PERCENT_PRODUCT_OUT_OF_STOCK_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'product_avg_gross_margin':\n                $value = AdminStatsController::getProductAverageGrossMargin();\n                $tooltip = $this->trans(\n                    'Gross margin expressed in percentage assesses how cost-effectively you sell your goods. Out of $100, you will retain $%value% to cover profit and expenses.',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('PRODUCT_AVG_GROSS_MARGIN', $value);\n                ConfigurationKPI::updateValue('PRODUCT_AVG_GROSS_MARGIN_EXPIRE', strtotime('+6 hour'));\n\n                break;\n\n            case 'disabled_categories':\n                $value = AdminStatsController::getDisabledCategories();\n                ConfigurationKPI::updateValue('DISABLED_CATEGORIES', $value);\n                ConfigurationKPI::updateValue('DISABLED_CATEGORIES_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case 'disabled_products':\n                $value = round(\n                        100 * AdminStatsController::getDisabledProducts() / AdminStatsController::getTotalProducts(),\n                        2\n                    ) . '%';\n                $tooltip = $this->trans(\n                    '%value% of your products are disabled and not visible to your customers',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                ConfigurationKPI::updateValue('DISABLED_PRODUCTS', $value);\n                ConfigurationKPI::updateValue('DISABLED_PRODUCTS_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case '8020_sales_catalog':\n                $value = AdminStatsController::get8020SalesCatalog(date('Y-m-d', strtotime('-30 days')), date('Y-m-d'));\n                $tooltip = $this->trans(\n                    'Within your catalog, %value% of your products have had sales in the last 30 days',\n                    array('%value%' => $value),\n                    'Admin.Stats.Help'\n                );\n                $value = $this->trans('%value%% of your Catalog', array('%value%' => $value), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('8020_SALES_CATALOG', $value);\n                ConfigurationKPI::updateValue('8020_SALES_CATALOG_EXPIRE', strtotime('+12 hour'));\n\n                break;\n\n            case 'empty_categories':\n                $value = AdminStatsController::getEmptyCategories();\n                ConfigurationKPI::updateValue('EMPTY_CATEGORIES', $value);\n                ConfigurationKPI::updateValue('EMPTY_CATEGORIES_EXPIRE', strtotime('+2 hour'));\n\n                break;\n\n            case 'customer_main_gender':\n                $value = AdminStatsController::getCustomerMainGender();\n\n                if ($value === false) {\n                    $value = $this->trans('No customers', array(), 'Admin.Stats.Feature');\n                } elseif ($value['type'] == 'female') {\n                    $value = $this->trans('%percentage%% Female Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                } elseif ($value['type'] == 'male') {\n                    $value = $this->trans('%percentage%% Male Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                } else {\n                    $value = $this->trans('%percentage%% Neutral Customers', array('%percentage%' => $value['value']), 'Admin.Stats.Feature');\n                }\n\n                ConfigurationKPI::updateValue('CUSTOMER_MAIN_GENDER', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'CUSTOMER_MAIN_GENDER_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'avg_customer_age':\n                $value = $this->trans('%value% years', array('%value%' => AdminStatsController::getAverageCustomerAge()), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('AVG_CUSTOMER_AGE', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'AVG_CUSTOMER_AGE_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'pending_messages':\n                $value = (int) AdminStatsController::getPendingMessages();\n                ConfigurationKPI::updateValue('PENDING_MESSAGES', $value);\n                ConfigurationKPI::updateValue('PENDING_MESSAGES_EXPIRE', strtotime('+5 min'));\n\n                break;\n\n            case 'avg_msg_response_time':\n                $value = $this->trans('%average% hours', array('%average%' => AdminStatsController::getAverageMessageResponseTime(\n                    date('Y-m-d', strtotime('-31 day')),\n                    date('Y-m-d', strtotime('-1 day'))\n                )), 'Admin.Stats.Feature');\n                ConfigurationKPI::updateValue('AVG_MSG_RESPONSE_TIME', $value);\n                ConfigurationKPI::updateValue('AVG_MSG_RESPONSE_TIME_EXPIRE', strtotime('+4 hour'));\n\n                break;\n\n            case 'messages_per_thread':\n                $value = round(\n                    AdminStatsController::getMessagesPerThread(\n                        date('Y-m-d', strtotime('-31 day')),\n                        date('Y-m-d', strtotime('-1 day'))\n                    ),\n                    1\n                );\n                ConfigurationKPI::updateValue('MESSAGES_PER_THREAD', $value);\n                ConfigurationKPI::updateValue('MESSAGES_PER_THREAD_EXPIRE', strtotime('+12 hour'));\n\n                break;\n\n            case 'newsletter_registrations':\n                $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n                $moduleManager = $moduleManagerBuilder->build();\n\n                $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer`\n\t\t\t\tWHERE newsletter = 1\n\t\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_ORDER)\n                );\n                if ($moduleManager->isInstalled('ps_emailsubscription')) {\n                    $value += Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                        '\n\t\t\t\t\tSELECT COUNT(*)\n\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'emailsubscription`\n\t\t\t\t\tWHERE active = 1\n\t\t\t\t\t' . Shop::addSqlRestriction(Shop::SHARE_ORDER)\n                    );\n                }\n\n                ConfigurationKPI::updateValue('NEWSLETTER_REGISTRATIONS', $value);\n                ConfigurationKPI::updateValue('NEWSLETTER_REGISTRATIONS_EXPIRE', strtotime('+6 hour'));\n\n                break;\n\n            case 'enabled_languages':\n                $value = Language::countActiveLanguages();\n                ConfigurationKPI::updateValue('ENABLED_LANGUAGES', $value);\n                ConfigurationKPI::updateValue('ENABLED_LANGUAGES_EXPIRE', strtotime('+1 min'));\n\n                break;\n\n            case 'frontoffice_translations':\n                $themes = (new ThemeManagerBuilder($this->context, Db::getInstance()))\n                    ->buildRepository()\n                    ->getList();\n                $languages = Language::getLanguages();\n                $total = $translated = 0;\n                foreach ($themes as $theme) {\n                    /* @var Theme $theme */\n                    foreach ($languages as $language) {\n                        $kpi_key = substr(strtoupper($theme->getName() . '_' . $language['iso_code']), 0, 16);\n                        $total += ConfigurationKPI::get('TRANSLATE_TOTAL_' . $kpi_key);\n                        $translated += ConfigurationKPI::get('TRANSLATE_DONE_' . $kpi_key);\n                    }\n                }\n                $value = 0;\n                if ($translated) {\n                    $value = round(100 * $translated / $total, 1);\n                }\n                $value .= '%';\n                ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS', $value);\n                ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS_EXPIRE', strtotime('+2 min'));\n\n                break;\n\n            case 'main_country':\n                if (!($row = AdminStatsController::getMainCountry(\n                    date('Y-m-d', strtotime('-30 day')),\n                    date('Y-m-d')\n                ))\n                ) {\n                    $value = $this->trans('No orders', array(), 'Admin.Stats.Feature');\n                } else {\n                    $country = new Country($row['id_country'], $this->context->language->id);\n                    $value = $this->trans(\n                        '%d%% %s',\n                        array('%d%%' => $row['orders'], '%s' => $country->name),\n                        'Admin.Stats.Feature'\n                    );\n                }\n\n                ConfigurationKPI::updateValue('MAIN_COUNTRY', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'MAIN_COUNTRY_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            case 'orders_per_customer':\n                $value = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                    '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tWHERE c.active = 1\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n                if ($value) {\n                    $orders = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue(\n                        '\n\t\t\t\t\tSELECT COUNT(*)\n\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\t\t\tWHERE o.valid = 1\n\t\t\t\t\t' . Shop::addSqlRestriction()\n                    );\n                    $value = round($orders / $value, 2);\n                }\n\n                ConfigurationKPI::updateValue('ORDERS_PER_CUSTOMER', $value);\n                ConfigurationKPI::updateValue('ORDERS_PER_CUSTOMER_EXPIRE', strtotime('+1 day'));\n\n                break;\n\n            case 'average_order_value':\n                $row = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow(\n                    '\n\t\t\t\tSELECT\n\t\t\t\t\tCOUNT(`id_order`) AS orders,\n\t\t\t\t\tSUM(`total_paid_tax_excl` / `conversion_rate`) AS total_paid_tax_excl\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'orders`\n\t\t\t\tWHERE `invoice_date` BETWEEN \"' . pSQL(date('Y-m-d', strtotime('-31 day'))) . ' 00:00:00\" AND \"' . pSQL(\n                        date('Y-m-d', strtotime('-1 day'))\n                    ) . ' 23:59:59\"\n\t\t\t\t' . Shop::addSqlRestriction()\n                );\n                $value = Tools::displayPrice(\n                    $row['orders'] ? $row['total_paid_tax_excl'] / $row['orders'] : 0,\n                    $currency\n                );\n                ConfigurationKPI::updateValue('AVG_ORDER_VALUE', $value);\n                ConfigurationKPI::updateValue(\n                    'AVG_ORDER_VALUE_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'netprofit_visit':\n                $date_from = date('Y-m-d', strtotime('-31 day'));\n                $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                $total_visitors = AdminStatsController::getVisits(false, $date_from, $date_to);\n                $net_profits = AdminStatsController::getTotalSales($date_from, $date_to);\n                $net_profits -= AdminStatsController::getExpenses($date_from, $date_to);\n                $net_profits -= AdminStatsController::getPurchases($date_from, $date_to);\n\n                if ($total_visitors) {\n                    $value = Tools::displayPrice($net_profits / $total_visitors, $currency);\n                } elseif ($net_profits) {\n                    $value = '&infin;';\n                } else {\n                    $value = Tools::displayPrice(0, $currency);\n                }\n\n                ConfigurationKPI::updateValue('NETPROFIT_VISIT', $value);\n                ConfigurationKPI::updateValue(\n                    'NETPROFIT_VISIT_EXPIRE',\n                    strtotime(date('Y-m-d 00:00:00', strtotime('+1 day')))\n                );\n\n                break;\n\n            case 'products_per_category':\n                $products = AdminStatsController::getTotalProducts();\n                $categories = AdminStatsController::getTotalCategories();\n                $value = round($products / $categories);\n                ConfigurationKPI::updateValue('PRODUCTS_PER_CATEGORY', $value);\n                ConfigurationKPI::updateValue('PRODUCTS_PER_CATEGORY_EXPIRE', strtotime('+1 hour'));\n\n                break;\n\n            case 'top_category':\n                if (!($id_category = AdminStatsController::getBestCategory(\n                    date('Y-m-d', strtotime('-1 month')),\n                    date('Y-m-d')\n                ))) {\n                    $value = $this->trans('No category', array(), 'Admin.Stats.Feature');\n                } else {\n                    $category = new Category($id_category, $this->context->language->id);\n                    $value = $category->name;\n                }\n\n                ConfigurationKPI::updateValue('TOP_CATEGORY', array($this->context->language->id => $value));\n                ConfigurationKPI::updateValue(\n                    'TOP_CATEGORY_EXPIRE',\n                    array($this->context->language->id => strtotime('+1 day'))\n                );\n\n                break;\n\n            default:\n                $value = false;\n        }\n        if ($value !== false) {\n            $array = array('value' => $value, 'tooltip' => $tooltip);\n            if (isset($data)) {\n                $array['data'] = $data;\n            }\n            die(json_encode($array));\n        }\n        die(json_encode(array('has_errors' => true)));\n    }\n\n    /**\n     * Display graphs on the stats page from module data.\n     */\n    public function displayAjaxGraphDraw()\n    {\n        if (!$this->access('view')) {\n            return die(json_encode(array('error' => 'You do not have the right permission')));\n        }\n\n        $module = Tools::getValue('module');\n        $render = Tools::getValue('render');\n        $type = Tools::getValue('type');\n        $option = Tools::getValue('option');\n        $layers = Tools::getValue('layers');\n        $width = Tools::getValue('width');\n        $height = Tools::getValue('height');\n        $id_employee = Tools::getValue('id_employee');\n        $id_lang = Tools::getValue('id_lang');\n\n        $graph = Module::getInstanceByName($module);\n        if (false === $graph) {\n            $this->ajaxRender(Tools::displayError());\n\n            return;\n        }\n\n        $graph->setEmployee($id_employee);\n        $graph->setLang($id_lang);\n        if ($option) {\n            $graph->setOption($option, $layers);\n        }\n\n        $graph->create($render, $type, $width, $height, $layers);\n        $graph->draw();\n    }\n\n    /**\n     * Display grid with module data on the stats page.\n     */\n    public function displayAjaxGraphGrid()\n    {\n        if (!$this->access('view')) {\n            return die(json_encode(array('error' => 'You do not have the right permission')));\n        }\n\n        $module = Tools::getValue('module');\n        $render = Tools::getValue('render');\n        $type = Tools::getValue('type');\n        $option = Tools::getValue('option');\n        $width = (int) (Tools::getValue('width', 600));\n        $height = (int) (Tools::getValue('height', 920));\n        $start = (int) (Tools::getValue('start', 0));\n        $limit = (int) (Tools::getValue('limit', 40));\n        $sort = Tools::getValue('sort', 0); // Should be a String. Default value is an Integer because we don't know what can be the name of the column to sort.\n        $dir = Tools::getValue('dir', 0); // Should be a String : Either ASC or DESC\n        $id_employee = (int) (Tools::getValue('id_employee'));\n        $id_lang = (int) (Tools::getValue('id_lang'));\n\n        $grid = Module::getInstanceByName($module);\n        if (false === $grid) {\n            $this->ajaxRender(Tools::displayError());\n\n            return;\n        }\n\n        $grid->setEmployee($id_employee);\n        $grid->setLang($id_lang);\n        if ($option) {\n            $grid->setOption($option);\n        }\n\n        $grid->create($render, $type, $width, $height, $start, $limit, $sort, $dir);\n        $grid->render();\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property OrderState $object\n */\nclass AdminStatusesControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'order_state';\n        $this->className = 'OrderState';\n        $this->lang = true;\n        $this->deleted = false;\n        $this->colorOnBackground = false;\n        $this->multishop_context = Shop::CONTEXT_ALL;\n        $this->imageType = 'gif';\n        $this->fieldImageSettings = array(\n            'name' => 'icon',\n            'dir' => 'os',\n        );\n\n        parent::__construct();\n\n        $this->bulk_actions = array('delete' => array('text' => $this->trans('Delete selected', array(), 'Admin.Actions'), 'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning')));\n    }\n\n    public function init()\n    {\n        if (Tools::isSubmit('addorder_return_state')) {\n            $this->display = 'add';\n        }\n        if (Tools::isSubmit('updateorder_return_state')) {\n            $this->display = 'edit';\n        }\n\n        return parent::init();\n    }\n\n    /**\n     * init all variables to render the order status list.\n     */\n    protected function initOrderStatutsList()\n    {\n        $this->fields_list = array(\n            'id_order_state' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'width' => 'auto',\n                'color' => 'color',\n            ),\n            'logo' => array(\n                'title' => $this->trans('Icon', array(), 'Admin.Shopparameters.Feature'),\n                'align' => 'text-center',\n                'image' => 'os',\n                'orderby' => false,\n                'search' => false,\n                'class' => 'fixed-width-xs',\n            ),\n            'send_email' => array(\n                'title' => $this->trans('Send email to customer', array(), 'Admin.Shopparameters.Feature'),\n                'align' => 'text-center',\n                'active' => 'sendEmail',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'delivery' => array(\n                'title' => $this->trans('Delivery', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'active' => 'delivery',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'invoice' => array(\n                'title' => $this->trans('Invoice', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'active' => 'invoice',\n                'type' => 'bool',\n                'ajax' => true,\n                'orderby' => false,\n                'class' => 'fixed-width-sm',\n            ),\n            'template' => array(\n                'title' => $this->trans('Email template', array(), 'Admin.Shopparameters.Feature'),\n            ),\n        );\n    }\n\n    /**\n     * init all variables to render the order return list.\n     */\n    protected function initOrdersReturnsList()\n    {\n        $this->table = 'order_return_state';\n        $this->className = 'OrderReturnState';\n        $this->_defaultOrderBy = $this->identifier = 'id_order_return_state';\n        $this->list_id = 'order_return_state';\n        $this->deleted = false;\n        $this->_orderBy = null;\n\n        $this->fields_list = array(\n            'id_order_return_state' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'align' => 'left',\n                'width' => 'auto',\n                'color' => 'color',\n            ),\n        );\n    }\n\n    protected function initOrderReturnsForm()\n    {\n        $id_order_return_state = (int) Tools::getValue('id_order_return_state');\n\n        // Create Object OrderReturnState\n        $order_return_state = new OrderReturnState($id_order_return_state);\n\n        //init field form variable for order return form\n        $this->fields_form = array();\n\n        //$this->initToolbar();\n        $this->getlanguages();\n        $helper = new HelperForm();\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->table = 'order_return_state';\n        $helper->identifier = 'id_order_return_state';\n        $helper->id = $order_return_state->id;\n        $helper->toolbar_scroll = false;\n        $helper->languages = $this->_languages;\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n\n        if ($order_return_state->id) {\n            $helper->fields_value = array(\n                'name' => $this->getFieldValue($order_return_state, 'name'),\n                'color' => $this->getFieldValue($order_return_state, 'color'),\n            );\n        } else {\n            $helper->fields_value = array(\n                'name' => $this->getFieldValue($order_return_state, 'name'),\n                'color' => '#ffffff',\n            );\n        }\n\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->title = $this->trans('Edit return status', array(), 'Admin.Shopparameters.Feature');\n\n        return $helper;\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_order_state'] = array(\n                'href' => self::$currentIndex . '&addorder_state&token=' . $this->token,\n                'desc' => $this->trans('Add new order status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'process-icon-new',\n            );\n            $this->page_header_toolbar_btn['new_order_return_state'] = array(\n                'href' => self::$currentIndex . '&addorder_return_state&token=' . $this->token,\n                'desc' => $this->trans('Add new order return status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * Function used to render the list to display for this controller.\n     */\n    public function renderList()\n    {\n        //init and render the first list\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n        $this->addRowActionSkipList('delete', $this->getUnremovableStatuses());\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n                'icon' => 'icon-trash',\n            ),\n        );\n        $this->initOrderStatutsList();\n        $lists = parent::renderList();\n\n        //init and render the second list\n        $this->list_skip_actions = array();\n        $this->_filter = false;\n        $this->addRowActionSkipList('delete', array(1, 2, 3, 4, 5));\n        $this->initOrdersReturnsList();\n        $this->checkFilterForOrdersReturnsList();\n\n        // call postProcess() to take care of actions and filters\n        $this->postProcess();\n        $this->toolbar_title = $this->trans('Return statuses', array(), 'Admin.Shopparameters.Feature');\n\n        parent::initToolbar();\n        $lists .= parent::renderList();\n\n        return $lists;\n    }\n\n    protected function getUnremovableStatuses()\n    {\n        return array_map(function ($row) {\n            return (int) $row['id_order_state'];\n        }, Db::getInstance()->executeS('SELECT id_order_state FROM ' . _DB_PREFIX_ . 'order_state WHERE unremovable = 1'));\n    }\n\n    protected function checkFilterForOrdersReturnsList()\n    {\n        // test if a filter is applied for this list\n        if (Tools::isSubmit('submitFilter' . $this->table) || $this->context->cookie->{'submitFilter' . $this->table} !== false) {\n            $this->filter = true;\n        }\n\n        // test if a filter reset request is required for this list\n        if (isset($_POST['submitReset' . $this->table])) {\n            $this->action = 'reset_filters';\n        } else {\n            $this->action = '';\n        }\n    }\n\n    public function renderForm()\n    {\n        $this->fields_form = array(\n            'tinymce' => true,\n            'legend' => array(\n                'title' => $this->trans('Order status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'icon-time',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Status name', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'required' => true,\n                    'hint' => array(\n                        $this->trans('Order status (e.g. \\'Pending\\').', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Invalid characters: numbers and', array(), 'Admin.Shopparameters.Help') . ' !<>,;?=+()@#\"{}_$%:',\n                    ),\n                ),\n                array(\n                    'type' => 'file',\n                    'label' => $this->trans('Icon', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'icon',\n                    'hint' => $this->trans('Upload an icon from your computer (File type: .gif, suggested size: 16x16).', array(), 'Admin.Shopparameters.Help'),\n                ),\n                array(\n                    'type' => 'color',\n                    'label' => $this->trans('Color', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'color',\n                    'hint' => $this->trans('Status will be highlighted in this color. HTML colors only.', array(), 'Admin.Shopparameters.Help') . ' \"lightblue\", \"#CC6600\")',\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'logable',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Consider the associated order as validated.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'invoice',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Allow a customer to download and view PDF versions of his/her invoices.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'hidden',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Hide this status in all customer orders.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'send_email',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Send an email to the customer when his/her order status has changed.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'pdf_invoice',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Attach invoice PDF to email.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'pdf_delivery',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Attach delivery slip PDF to email.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'shipped',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on',  'name' => $this->trans('Set the order as shipped.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'paid',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Set the order as paid.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'checkbox',\n                    'name' => 'delivery',\n                    'values' => array(\n                        'query' => array(\n                            array('id' => 'on', 'name' => $this->trans('Show delivery PDF.', array(), 'Admin.Shopparameters.Feature'), 'val' => '1'),\n                        ),\n                        'id' => 'id',\n                        'name' => 'name',\n                    ),\n                ),\n                array(\n                    'type' => 'select_template',\n                    'label' => $this->trans('Template', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'template',\n                    'lang' => true,\n                    'options' => array(\n                        'query' => $this->getTemplates(),\n                        'id' => 'id',\n                        'name' => 'name',\n                        'folder' => 'folder',\n                    ),\n                    'hint' => array(\n                        $this->trans('Only letters, numbers and underscores (\"_\") are allowed.', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Email template for both .html and .txt.', array(), 'Admin.Shopparameters.Help'),\n                    ),\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n        );\n\n        if (Tools::isSubmit('updateorder_state') || Tools::isSubmit('addorder_state')) {\n            return $this->renderOrderStatusForm();\n        } elseif (Tools::isSubmit('updateorder_return_state') || Tools::isSubmit('addorder_return_state')) {\n            return $this->renderOrderReturnsForm();\n        } else {\n            return parent::renderForm();\n        }\n    }\n\n    protected function renderOrderStatusForm()\n    {\n        if (!($obj = $this->loadObject(true))) {\n            return;\n        }\n\n        $this->fields_value = array(\n            'logable_on' => $this->getFieldValue($obj, 'logable'),\n            'invoice_on' => $this->getFieldValue($obj, 'invoice'),\n            'hidden_on' => $this->getFieldValue($obj, 'hidden'),\n            'send_email_on' => $this->getFieldValue($obj, 'send_email'),\n            'shipped_on' => $this->getFieldValue($obj, 'shipped'),\n            'paid_on' => $this->getFieldValue($obj, 'paid'),\n            'delivery_on' => $this->getFieldValue($obj, 'delivery'),\n            'pdf_delivery_on' => $this->getFieldValue($obj, 'pdf_delivery'),\n            'pdf_invoice_on' => $this->getFieldValue($obj, 'pdf_invoice'),\n        );\n\n        if ($this->getFieldValue($obj, 'color') !== false) {\n            $this->fields_value['color'] = $this->getFieldValue($obj, 'color');\n        } else {\n            $this->fields_value['color'] = '#ffffff';\n        }\n\n        return parent::renderForm();\n    }\n\n    protected function renderOrderReturnsForm()\n    {\n        $helper = $this->initOrderReturnsForm();\n        $helper->show_cancel_button = true;\n\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = self::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            die(Tools::displayError());\n        }\n\n        $helper->back_url = $back;\n\n        $this->fields_form[0]['form'] = array(\n            'tinymce' => true,\n            'legend' => array(\n                'title' => $this->trans('Return status', array(), 'Admin.Shopparameters.Feature'),\n                'icon' => 'icon-time',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Status name', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'required' => true,\n                    'hint' => array(\n                        $this->trans('Order\\'s return status name.', array(), 'Admin.Shopparameters.Help'),\n                        $this->trans('Invalid characters: numbers and', array(), 'Admin.Shopparameters.Help') . ' !<>,;?=+()@#\"\ufffd{}_$%:',\n                    ),\n                ),\n                array(\n                    'type' => 'color',\n                    'label' => $this->trans('Color', array(), 'Admin.Shopparameters.Feature'),\n                    'name' => 'color',\n                    'hint' => $this->trans('Status will be highlighted in this color. HTML colors only.', array(), 'Admin.Shopparameters.Help') . ' \"lightblue\", \"#CC6600\")',\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n        );\n\n        return $helper->generateForm($this->fields_form);\n    }\n\n    protected function getTemplates()\n    {\n        $default_path = '../mails/';\n        // Mail templates can also be found in the theme folder\n        $theme_path = '../themes/' . $this->context->shop->theme->getName() . '/mails/';\n\n        $array = array();\n        foreach (Language::getLanguages(false) as $language) {\n            $iso_code = $language['iso_code'];\n\n            // If there is no folder for the given iso_code in /mails or in /themes/[theme_name]/mails, we bypass this language\n            if (!@filemtime(_PS_ADMIN_DIR_ . '/' . $default_path . $iso_code) && !@filemtime(_PS_ADMIN_DIR_ . '/' . $theme_path . $iso_code)) {\n                continue;\n            }\n\n            $theme_templates_dir = _PS_ADMIN_DIR_ . '/' . $theme_path . $iso_code;\n            $theme_templates = is_dir($theme_templates_dir) ? scandir($theme_templates_dir, SCANDIR_SORT_NONE) : array();\n            // We merge all available emails in one array\n            $templates = array_unique(array_merge(scandir(_PS_ADMIN_DIR_ . '/' . $default_path . $iso_code, SCANDIR_SORT_NONE), $theme_templates));\n            foreach ($templates as $key => $template) {\n                if (!strncmp(strrev($template), 'lmth.', 5)) {\n                    $search_result = array_search($template, $theme_templates);\n                    $array[$iso_code][] = array(\n                        'id' => substr($template, 0, -5),\n                        'name' => substr($template, 0, -5),\n                        'folder' => ((!empty($search_result) ? $theme_path : $default_path)),\n                    );\n                }\n            }\n        }\n\n        return $array;\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit($this->table . 'Orderby') || Tools::isSubmit($this->table . 'Orderway')) {\n            $this->filter = true;\n        }\n\n        if (Tools::isSubmit('submitAddorder_return_state')) {\n            if (!$this->access('add')) {\n                return;\n            }\n\n            $id_order_return_state = Tools::getValue('id_order_return_state');\n\n            // Create Object OrderReturnState\n            $order_return_state = new OrderReturnState((int) $id_order_return_state);\n\n            $order_return_state->color = Tools::getValue('color');\n            $order_return_state->name = array();\n            foreach (Language::getIDs(false) as $id_lang) {\n                $order_return_state->name[$id_lang] = Tools::getValue('name_' . $id_lang);\n            }\n\n            // Update object\n            if (!$order_return_state->save()) {\n                $this->errors[] = $this->trans('An error has occurred: Can\\'t save the current order\\'s return status.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=4&token=' . $this->token);\n            }\n        }\n\n        if (Tools::isSubmit('submitBulkdeleteorder_return_state')) {\n            if (!$this->access('delete')) {\n                return;\n            }\n\n            $this->className = 'OrderReturnState';\n            $this->table = 'order_return_state';\n            $this->boxes = Tools::getValue('order_return_stateBox');\n            parent::processBulkDelete();\n        }\n\n        if (Tools::isSubmit('deleteorder_return_state')) {\n            if (!$this->access('delete')) {\n                return;\n            }\n\n            $id_order_return_state = Tools::getValue('id_order_return_state');\n\n            // Create Object OrderReturnState\n            $order_return_state = new OrderReturnState((int) $id_order_return_state);\n\n            if (!$order_return_state->delete()) {\n                $this->errors[] = $this->trans('An error has occurred: Can\\'t delete the current order\\'s return status.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=1&token=' . $this->token);\n            }\n        }\n\n        if (Tools::isSubmit('submitAdd' . $this->table)) {\n            if (!$this->access('add')) {\n                return;\n            }\n\n            $this->deleted = false; // Disabling saving historisation\n            $_POST['invoice'] = (int) Tools::getValue('invoice_on');\n            $_POST['logable'] = (int) Tools::getValue('logable_on');\n            $_POST['send_email'] = (int) Tools::getValue('send_email_on');\n            $_POST['hidden'] = (int) Tools::getValue('hidden_on');\n            $_POST['shipped'] = (int) Tools::getValue('shipped_on');\n            $_POST['paid'] = (int) Tools::getValue('paid_on');\n            $_POST['delivery'] = (int) Tools::getValue('delivery_on');\n            $_POST['pdf_delivery'] = (int) Tools::getValue('pdf_delivery_on');\n            $_POST['pdf_invoice'] = (int) Tools::getValue('pdf_invoice_on');\n            if (!$_POST['send_email']) {\n                foreach (Language::getIDs(false) as $id_lang) {\n                    $_POST['template_' . $id_lang] = '';\n                }\n            }\n\n            return parent::postProcess();\n        } elseif (Tools::isSubmit('delete' . $this->table)) {\n            if (!$this->access('delete')) {\n                return;\n            }\n\n            $order_state = new OrderState(Tools::getValue('id_order_state'), $this->context->language->id);\n            if (!$order_state->isRemovable()) {\n                $this->errors[] = $this->trans('For security reasons, you cannot delete default order statuses.', array(), 'Admin.Shopparameters.Notification');\n            } else {\n                return parent::postProcess();\n            }\n        } elseif (Tools::isSubmit('submitBulkdelete' . $this->table)) {\n            if (!$this->access('delete')) {\n                return;\n            }\n\n            foreach (Tools::getValue($this->table . 'Box') as $selection) {\n                $order_state = new OrderState((int) $selection, $this->context->language->id);\n                if (!$order_state->isRemovable()) {\n                    $this->errors[] = $this->trans('For security reasons, you cannot delete default order statuses.', array(), 'Admin.Shopparameters.Notification');\n\n                    break;\n                }\n            }\n\n            if (!count($this->errors)) {\n                return parent::postProcess();\n            }\n        } else {\n            return parent::postProcess();\n        }\n    }\n\n    protected function filterToField($key, $filter)\n    {\n        if ($this->table == 'order_state') {\n            $this->initOrderStatutsList();\n        } elseif ($this->table == 'order_return_state') {\n            $this->initOrdersReturnsList();\n        }\n\n        return parent::filterToField($key, $filter);\n    }\n\n    protected function afterImageUpload()\n    {\n        parent::afterImageUpload();\n\n        if (($id_order_state = (int) Tools::getValue('id_order_state')) &&\n             isset($_FILES) && count($_FILES) && file_exists(_PS_ORDER_STATE_IMG_DIR_ . $id_order_state . '.gif')) {\n            $current_file = _PS_TMP_IMG_DIR_ . 'order_state_mini_' . $id_order_state . '_' . $this->context->shop->id . '.gif';\n\n            if (file_exists($current_file)) {\n                unlink($current_file);\n            }\n        }\n\n        return true;\n    }\n\n    public function ajaxProcessSendEmailOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `send_email`= NOT `send_email` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n\n    public function ajaxProcessDeliveryOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `delivery`= NOT `delivery` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n\n    public function ajaxProcessInvoiceOrderState()\n    {\n        $id_order_state = (int) Tools::getValue('id_order_state');\n\n        $sql = 'UPDATE ' . _DB_PREFIX_ . 'order_state SET `invoice`= NOT `invoice` WHERE id_order_state=' . $id_order_state;\n        $result = Db::getInstance()->execute($sql);\n\n        if ($result) {\n            echo json_encode(array('success' => 1, 'text' => $this->trans('The status has been updated successfully.', array(), 'Admin.Notifications.Success')));\n        } else {\n            echo json_encode(array('success' => 0, 'text' => $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error')));\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Product;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass AttributeController extends FrameworkBundleAdminController\n{\n    /**\n     * get All Attributes as json.\n     *\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\")\n     *\n     * @return JsonResponse\n     */\n    public function getAllAttributesAction()\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $attributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributes($locales[0]['id_lang'], true);\n\n        $dataGroupAttributes = [];\n        $data = [];\n        foreach ($attributes as $attribute) {\n            /* Construct attribute group selector. Ex : Color : All */\n            $dataGroupAttributes[$attribute['id_attribute_group']] = [\n                'value' => 'group-' . $attribute['id_attribute_group'],\n                'label' => $attribute['public_name'] . ' : ' . $this->trans('All', 'Admin.Global'),\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['public_name'],\n                ],\n            ];\n\n            $data[] = [\n                'value' => $attribute['id_attribute'],\n                'label' => $attribute['public_name'] . ' : ' . $attribute['name'],\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['name'],\n                ],\n            ];\n        }\n\n        $data = array_merge($dataGroupAttributes, $data);\n\n        $response->setData($data);\n\n        return $response;\n    }\n\n    /**\n     * Attributes generator.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function attributesGeneratorAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $options = $request->get('options');\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!is_object($product) || empty($product->id) || empty($options) || !is_array($options)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        //store exisiting product combinations\n        $existingCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $product->getAttributeCombinations(1, false));\n\n        //get clean attributes ids\n        $newOptions = [];\n        foreach ($options as $idGroup => $attributes) {\n            foreach ($attributes as $attribute) {\n                //If attribute is a group attribute, replace group data by all attributes group\n                if (false !== strpos($attribute, 'group')) {\n                    $allGroupAttributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributeIdsByGroup((int) $idGroup, true);\n                    foreach ($allGroupAttributes as $groupAttribute) {\n                        $newOptions[$idGroup][$groupAttribute] = $groupAttribute;\n                    }\n                } else {\n                    $newOptions[$idGroup][$attribute] = $attribute;\n                }\n            }\n        }\n\n        //create attributes\n        $this->get('prestashop.adapter.admin.controller.attribute_generator')->processGenerate($product, $newOptions);\n\n        //get all product combinations\n        $allCombinations = $product->getAttributeCombinations(1, false);\n\n        $allCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $allCombinations);\n\n        //get new created combinations Ids\n        $newCombinationIds = array_diff($allCombinationsIds, $existingCombinationsIds);\n\n        $attributes = $product->sortCombinationByAttributePosition($newCombinationIds, $locales[0]['id_lang']);\n        $this->ensureProductHasDefaultCombination($product, $attributes);\n\n        $response = new JsonResponse();\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $result = array(\n            'ids_product_attribute' => array(),\n            'form' => '',\n        );\n\n        foreach ($attributes as $attribute) {\n            foreach ($attribute as $combination) {\n                $form = $this->get('form.factory')\n                    ->createNamed(\n                        'combination_' . $combination['id_product_attribute'],\n                        'PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination',\n                        $combinationDataProvider->getFormCombination($combination['id_product_attribute'])\n                    );\n                $result['form'] .= $this->renderView(\n                    '@Product/ProductPage/Forms/form_combination.html.twig',\n                    array(\n                        'form' => $form->createView(),\n                    )\n                );\n                $result['ids_product_attribute'][] = $combination['id_product_attribute'];\n            }\n        }\n\n        return $response->create($result);\n    }\n\n    /**\n     * @param Product $product\n     * @param array $combinations\n     */\n    public function ensureProductHasDefaultCombination(Product $product, array $combinations)\n    {\n        if (count($combinations)) {\n            $defaultProductAttributeId = $product->getDefaultIdProductAttribute();\n            if (!$defaultProductAttributeId) {\n                /*\n                 * Combinations indexed by position, then attribute id\n                 * ex: $combinations = [\n                 *  3 => [ //4th position attribute\n                 *      45 => [ //product_attribute id\n                 *      ]\n                 *  ]\n                 * ]\n                 */\n                $firstPosition = array_keys($combinations)[0];\n                if (!empty($combinations[$firstPosition])) {\n                    $firstAttributeId = array_keys($combinations[$firstPosition])[0];\n                    $product->setDefaultAttribute($firstAttributeId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a product attribute.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], request.get('_legacy_controller'))\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAttributeAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n\n        if (!$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $legacyResponse = false;\n\n        if ($request->request->has('attribute-ids')) {\n            $attributeIds = $request->request->get('attribute-ids');\n            foreach ($attributeIds as $attributeId) {\n                $legacyResponse = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                    ->ajaxProcessDeleteProductAttribute($attributeId, $idProduct);\n            }\n\n            if ($legacyResponse['status'] == 'error') {\n                $response->setStatusCode(400);\n            }\n\n            $response->setData(['message' => $legacyResponse['message']]);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete all product attributes.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], request.get('_legacy_controller'))\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAllAttributeAction($idProduct, Request $request)\n    {\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $response = new JsonResponse();\n\n        //get all attribute for a product\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n\n        if (!$combinations || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $res = false;\n\n        foreach ($combinations as $combination) {\n            $res = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                ->ajaxProcessDeleteProductAttribute($combination['id_product_attribute'], $idProduct);\n\n            if ($res['status'] == 'error') {\n                $response->setStatusCode(400);\n\n                break;\n            }\n        }\n\n        $response->setData(['message' => $res['message']]);\n\n        return $response;\n    }\n\n    /**\n     * get the images form for a product combinations.\n     *\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\")\n     *\n     * @param int $idProduct The product id\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function getFormImagesAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get product images\n        $productImages = $productAdapter->getImages($idProduct, $locales[0]['id_lang']);\n\n        if (!$request->isXmlHttpRequest() || !is_object($product) || empty($product->id)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        $data = [];\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n        foreach ($combinations as $combination) {\n            //get combination images\n            $combinationImages = array_map(function ($o) {\n                return $o['id'];\n            }, $attributeAdapter->getImages($combination['id_product_attribute']));\n\n            $newProductImages = $productImages;\n            foreach ($newProductImages as $k => $image) {\n                $newProductImages[$k]['id_image_attr'] = false;\n                if (in_array($image['id'], $combinationImages)) {\n                    $newProductImages[$k]['id_image_attr'] = true;\n                }\n            }\n\n            $data[$combination['id_product_attribute']] = $newProductImages;\n        }\n\n        $response->setData($data);\n\n        return $response;\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\AdvancedParameters;\n\nuse PrestaShop\\PrestaShop\\Core\\Import\\Exception\\NotSupportedImportEntityException;\nuse PrestaShop\\PrestaShop\\Core\\Import\\Exception\\UnavailableImportFileException;\nuse PrestaShop\\PrestaShop\\Core\\Import\\ImportDirectory;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Exception\\FileUploadException;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\n\n/**\n * Responsible of \"Configure > Advanced Parameters > Import\" page display.\n */\nclass ImportController extends FrameworkBundleAdminController\n{\n    /**\n     * Show import form & handle forwarding to legacy controller.\n     *\n     * @param Request $request\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @return array|RedirectResponse|Response\n     */\n    public function importAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $importDir = $this->get('prestashop.core.import.dir');\n\n        if (!$this->checkImportDirectory($importDir)) {\n            return $this->getTemplateParams($request);\n        }\n\n        $formHandler = $this->get('prestashop.admin.import.form_handler');\n        $finder = $this->get('prestashop.core.import.file_finder');\n        $iniConfiguration = $this->get('prestashop.core.configuration.ini_configuration');\n        $importConfigFactory = $this->get('prestashop.core.import.config_factory');\n\n        $importConfig = $importConfigFactory->buildFromRequest($request);\n        $form = $formHandler->getForm($importConfig);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            if (!$this->checkImportFormSubmitPermissions($legacyController)) {\n                return $this->redirectToRoute('admin_import');\n            }\n\n            $data = $form->getData();\n\n            if (!$errors = $formHandler->save($data)) {\n                // WIP import page 2 redirect\n                /*return $this->redirectToRoute(\n                    'admin_import_data_configuration_index',\n                    [],\n                    Response::HTTP_TEMPORARY_REDIRECT\n                );*/\n                return $this->forwardRequestToLegacyResponse($request);\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        $params = [\n            'importForm' => $form->createView(),\n            'importFileUploadUrl' => $this->generateUrl('admin_import_file_upload'),\n            'importFileNames' => $finder->getImportFileNames(),\n            'importDirectory' => $importDir->getDir(),\n            'maxFileUploadSize' => $iniConfiguration->getPostMaxSizeInBytes(),\n        ];\n\n        return $this->render(\n            '@PrestaShop/Admin/Configure/AdvancedParameters/ImportPage/import.html.twig',\n            $this->getTemplateParams($request) + $params\n        );\n    }\n\n    /**\n     * Handle import file upload via AJAX, sending authorization errors in JSON.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        if ($this->isDemoModeEnabled()) {\n            return $this->json([\n                'error' => $this->trans('This functionality has been disabled.', 'Admin.Notifications.Error'),\n            ]);\n        }\n\n        if (!in_array($this->authorizationLevel($legacyController), [\n            PageVoter::LEVEL_CREATE,\n            PageVoter::LEVEL_UPDATE,\n            PageVoter::LEVEL_DELETE,\n        ])) {\n            return $this->json([\n                'error' => $this->trans('You do not have permission to update this.', 'Admin.Notifications.Error'),\n            ]);\n        }\n\n        $uploadedFile = $request->files->get('file');\n        if (!$uploadedFile instanceof UploadedFile) {\n            return $this->json([\n                'error' => $this->trans('No file was uploaded.', 'Admin.Advparameters.Notification'),\n            ]);\n        }\n\n        try {\n            $fileUploader = $this->get('prestashop.core.import.file_uploader');\n            $file = $fileUploader->upload($uploadedFile);\n        } catch (FileUploadException $e) {\n            return $this->json(['error' => $e->getMessage()]);\n        }\n\n        $response['file'] = [\n            'name' => $file->getFilename(),\n            'size' => $file->getSize(),\n        ];\n\n        return $this->json($response);\n    }\n\n    /**\n     * Delete import file.\n     *\n     * @AdminSecurity(\"is_granted('delete', request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $filename = $request->query->get('filename', $request->query->get('csvfilename'));\n        if ($filename) {\n            $fileRemoval = $this->get('prestashop.core.import.file_removal');\n            $fileRemoval->remove($filename);\n        }\n\n        return $this->redirectToRoute('admin_import');\n    }\n\n    /**\n     * Download import file from history.\n     *\n     * @AdminSecurity(\"is_granted(['read','update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function downloadAction(Request $request)\n    {\n        if ($filename = $request->query->get('filename')) {\n            $importDirectory = $this->get('prestashop.core.import.dir');\n\n            $response = new BinaryFileResponse($importDirectory . $filename);\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $filename);\n\n            return $response;\n        }\n\n        return $this->redirectToRoute('admin_import');\n    }\n\n    /**\n     * Download import sample file.\n     *\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\", redirectRoute=\"admin_import\")\n     *\n     * @param $sampleName\n     *\n     * @return Response\n     */\n    public function downloadSampleAction($sampleName)\n    {\n        $sampleFileProvider = $this->get('prestashop.core.import.sample.file_provider');\n        $sampleFile = $sampleFileProvider->getFile($sampleName);\n\n        if (null === $sampleFile) {\n            return $this->redirectToRoute('admin_import');\n        }\n\n        $response = new BinaryFileResponse($sampleFile->getPathname());\n        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $sampleFile->getFilename());\n\n        return $response;\n    }\n\n    /**\n     * Get available entity fields.\n     *\n     * @AdminSecurity(\n     *     \"is_granted('read', request.get('_legacy_controller'))\",\n     *     redirectRoute=\"admin_import\"\n     * )\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableEntityFieldsAction(Request $request)\n    {\n        $fieldsProviderFinder = $this->get('prestashop.core.import.fields_provider_finder');\n        try {\n            $fieldsProvider = $fieldsProviderFinder->find($request->get('entity'));\n            $fieldsCollection = $fieldsProvider->getCollection();\n            $entityFields = $fieldsCollection->toArray();\n        } catch (NotSupportedImportEntityException $e) {\n            $entityFields = [];\n        }\n\n        return $this->json($entityFields);\n    }\n\n    /**\n     * Process the import.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create', 'delete'], request.get('_legacy_controller'))\", redirectRoute=\"admin_import\")\n     * @DemoRestricted(redirectRoute=\"admin_import\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function processImportAction(Request $request)\n    {\n        $errors = [];\n        $requestValidator = $this->get('prestashop.core.import.request_validator');\n\n        try {\n            $requestValidator->validate($request);\n        } catch (UnavailableImportFileException $e) {\n            $errors[] = $this->trans('To proceed, please upload a file first.', 'Admin.Advparameters.Notification');\n        }\n\n        if (!empty($errors)) {\n            return $this->json([\n                'errors' => $errors,\n                'isFinished' => true,\n            ]);\n        }\n\n        $importer = $this->get('prestashop.core.import.importer');\n        $importConfigFactory = $this->get('prestashop.core.import.config_factory');\n        $runtimeConfigFactory = $this->get('prestashop.core.import.runtime_config_factory');\n        $importHandlerFinder = $this->get('prestashop.adapter.import.handler_finder');\n\n        $importConfig = $importConfigFactory->buildFromRequest($request);\n        $runtimeConfig = $runtimeConfigFactory->buildFromRequest($request);\n\n        $importer->import(\n            $importConfig,\n            $runtimeConfig,\n            $importHandlerFinder->find($importConfig->getEntityType())\n        );\n\n        return $this->json($runtimeConfig->toArray());\n    }\n\n    /**\n     * Get generic template parameters.\n     *\n     * @param Request $request\n     *\n     * @return array\n     */\n    protected function getTemplateParams(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        return [\n            'layoutHeaderToolbarBtn' => [],\n            'layoutTitle' => $this->get('translator')->trans('Import', [], 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'requireBulkActions' => false,\n            'showContentHeader' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n        ];\n    }\n\n    /**\n     * Checks permissions of import form in step 1.\n     *\n     * @param $legacyController\n     *\n     * @return bool\n     */\n    private function checkImportFormSubmitPermissions($legacyController)\n    {\n        if ($this->isDemoModeEnabled()) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'This functionality has been disabled.',\n                    'Admin.Notifications.Error'\n                )\n            );\n\n            return false;\n        }\n\n        if (!in_array($this->authorizationLevel($legacyController), [\n            PageVoter::LEVEL_CREATE,\n            PageVoter::LEVEL_UPDATE,\n            PageVoter::LEVEL_DELETE,\n        ])) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'You do not have permission to update this.',\n                    'Admin.Notifications.Error'\n                )\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if the import directory exists and is accessible.\n     *\n     * @param ImportDirectory $importDir\n     *\n     * @return array|bool\n     */\n    private function checkImportDirectory(ImportDirectory $importDir)\n    {\n        if (!$importDir->exists()) {\n            $this->addFlash(\n                'error',\n                $this->trans(\n                    'The import directory doesn\\'t exist. Please check your file path.',\n                    'Admin.Advparameters.Notification'\n                )\n            );\n\n            return false;\n        }\n\n        if (!$importDir->isWritable()) {\n            $this->addFlash(\n                'warning',\n                $this->trans(\n                    'The import directory must be writable (CHMOD 755 / 777).',\n                    'Admin.Advparameters.Notification'\n                )\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Forwards submitted form data to legacy import page.\n     * To be removed in 1.7.7 version.\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    private function forwardRequestToLegacyResponse(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n        $legacyContext = $this->get('prestashop.adapter.legacy.context');\n\n        $legacyImportUrl = $legacyContext->getLegacyAdminLink($legacyController);\n\n        return $this->redirect($legacyImportUrl, Response::HTTP_TEMPORARY_REDIRECT);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\AdvancedParameters;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Responsible of \"Configure > Advanced Parameters > Performance\" page display.\n */\nclass PerformanceController extends FrameworkBundleAdminController\n{\n    const CONTROLLER_NAME = 'AdminPerformance';\n\n    /**\n     * Displays the Performance main page.\n     *\n     * @Template(\"@PrestaShop/Admin/Configure/AdvancedParameters/performance.html.twig\")\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param FormInterface $form\n     *\n     * @return array\n     */\n    public function indexAction(FormInterface $form = null)\n    {\n        $toolbarButtons = [\n            'clear_cache' => [\n                'href' => $this->generateUrl('admin_clear_cache'),\n                'desc' => $this->trans('Clear cache', 'Admin.Advparameters.Feature'),\n                'icon' => 'delete',\n            ],\n        ];\n\n        $form = null === $form ? $this->get('prestashop.adapter.performance.form_handler')->getForm() : $form;\n\n        return [\n            'layoutHeaderToolbarBtn' => $toolbarButtons,\n            'layoutTitle' => $this->trans('Performance', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'requireBulkActions' => false,\n            'showContentHeader' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink('AdminPerformance'),\n            'requireFilterStatus' => false,\n            'form' => $form->createView(),\n            'servers' => $this->get('prestashop.adapter.memcache_server.manager')->getServers(),\n        ];\n    }\n\n    /**\n     * Process the Performance configuration form.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create', 'delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\")\n     * @DemoRestricted(redirectRoute=\"admin_performance\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function processFormAction(Request $request)\n    {\n        $this->dispatchHook('actionAdminPerformanceControllerPostProcessBefore', array('controller' => $this));\n        $form = $this->get('prestashop.adapter.performance.form_handler')->getForm();\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $data = $form->getData();\n\n            $saveErrors = $this->get('prestashop.adapter.performance.form_handler')->save($data);\n\n            if (0 === count($saveErrors)) {\n                $this->addFlash('success', $this->trans('Successful update.', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_performance');\n            }\n\n            $this->flashErrors($saveErrors);\n        }\n\n        return $this->redirectToRoute('admin_performance');\n    }\n\n    /**\n     * @AdminSecurity(\"is_granted(['delete'], request.get('_legacy_controller'))\",\n     *     message=\"You do not have permission to update this.\",\n     *     redirectRoute=\"admin_performance\"\n     * )\n     *\n     * @return RedirectResponse\n     */\n    public function clearCacheAction()\n    {\n        $this->get('prestashop.core.cache.clearer.cache_clearer_chain')->clear();\n        $this->addFlash('success', $this->trans('All caches cleared successfully', 'Admin.Advparameters.Notification'));\n\n        return $this->redirectToRoute('admin_performance');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Configure\\ShopParameters;\n\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Controller responsible of \"Configure > Shop Parameters > Customer Settings\" page.\n */\nclass CustomerPreferencesController extends FrameworkBundleAdminController\n{\n    /**\n     * Show customer preferences page.\n     *\n     * @Template(\"@PrestaShop/Admin/Configure/ShopParameters/customer_preferences.html.twig\")\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return array Template parameters\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $form = $this->get('prestashop.admin.customer_preferences.form_handler')->getForm();\n\n        return [\n            'layoutTitle' => $this->trans('Customers', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'form' => $form->createView(),\n        ];\n    }\n\n    /**\n     * Process the Customer Preferences configuration form.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to update this.\", redirectRoute=\"admin_customer_preferences\")\n     * @DemoRestricted(redirectRoute=\"admin_customer_preferences\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function processAction(Request $request)\n    {\n        $formHandler = $this->get('prestashop.admin.customer_preferences.form_handler');\n\n        $form = $formHandler->getForm();\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $data = $form->getData();\n\n            if ($errors = $formHandler->save($data)) {\n                $this->flashErrors($errors);\n\n                return $this->redirectToRoute('admin_customer_preferences');\n            }\n\n            $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n        }\n\n        return $this->redirectToRoute('admin_customer_preferences');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Improve\\International;\n\nuse PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class GeolocationController is responsible for \"Improve > International > Localization > Geolocation\" page.\n */\nclass GeolocationController extends FrameworkBundleAdminController\n{\n    /**\n     * Show geolocation page.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        $geolocationForm = $this->getGeolocationFormHandler()->getForm();\n        $geoLiteCityChecker = $this->get('prestashop.core.geolocation.geo_lite_city.checker');\n\n        return $this->render('@PrestaShop/Admin/Improve/International/Geolocation/index.html.twig', [\n            'layoutTitle' => $this->trans('Geolocation', 'Admin.Navigation.Menu'),\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'geolocationForm' => $geolocationForm->createView(),\n            'geolocationDatabaseAvailable' => $geoLiteCityChecker->isAvailable(),\n        ]);\n    }\n\n    /**\n     * Process geolocation configuration form.\n     *\n     * @AdminSecurity(\n     *     \"is_granted(['update', 'create', 'delete'], request.get('_legacy_controller'))\",\n     *     message=\"You do not have permission to edit this.\",\n     *     redirectRoute=\"admin_geolocation\"\n     * )\n     * @DemoRestricted(redirectRoute=\"admin_geolocation_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function saveOptionsAction(Request $request)\n    {\n        $geolocationFormHandler = $this->getGeolocationFormHandler();\n\n        $geolocationForm = $geolocationFormHandler->getForm();\n        $geolocationForm->handleRequest($request);\n\n        if ($geolocationForm->isSubmitted()) {\n            $errors = $geolocationFormHandler->save($geolocationForm->getData());\n\n            if (empty($errors)) {\n                $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_geolocation_index');\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        return $this->redirectToRoute('admin_geolocation_index');\n    }\n\n    /**\n     * @return FormHandlerInterface\n     */\n    protected function getGeolocationFormHandler()\n    {\n        return $this->get('prestashop.admin.geolocation.form_handler');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin\\Improve\\International;\n\nuse PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Pack\\Import\\LocalizationPackImportConfig;\nuse PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;\nuse PrestaShopBundle\\Form\\Admin\\Improve\\International\\Localization\\ImportLocalizationPackType;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class LocalizationController is responsible for handling \"Improve > International > Localization\" page.\n */\nclass LocalizationController extends FrameworkBundleAdminController\n{\n    /**\n     * Show localization settings page.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\", message=\"Access denied.\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function indexAction(Request $request)\n    {\n        $legacyController = $request->attributes->get('_legacy_controller');\n\n        if (!extension_loaded('openssl')) {\n            $this->addFlash('warning', $this->trans('Importing a new language may fail without the OpenSSL module. Please enable \"openssl.so\" on your server configuration.', 'Admin.International.Notification'));\n        }\n\n        $localizationPackImportForm = $this->createForm(ImportLocalizationPackType::class);\n        $localizationForm = $this->getLocalizationFormHandler()->getForm();\n\n        return $this->render('@PrestaShop/Admin/Improve/International/Localization/index.html.twig', [\n            'layoutHeaderToolbarBtn' => [],\n            'layoutTitle' => $this->trans('Localization', 'Admin.Navigation.Menu'),\n            'requireAddonsSearch' => true,\n            'enableSidebar' => true,\n            'help_link' => $this->generateSidebarLink($legacyController),\n            'localizationForm' => $localizationForm->createView(),\n            'localizationPackImportForm' => $localizationPackImportForm->createView(),\n        ]);\n    }\n\n    /**\n     * Save localization settings.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create', 'delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to edit this.\")\n     * @DemoRestricted(redirectRoute=\"admin_localization_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function saveOptionsAction(Request $request)\n    {\n        $localizationFormHandler = $this->getLocalizationFormHandler();\n\n        $localizationForm = $localizationFormHandler->getForm();\n        $localizationForm->handleRequest($request);\n\n        if ($localizationForm->isSubmitted()) {\n            $data = $localizationForm->getData();\n\n            $errors = $localizationFormHandler->save($data);\n            if (empty($errors)) {\n                $this->addFlash('success', $this->trans('Update successful', 'Admin.Notifications.Success'));\n\n                return $this->redirectToRoute('admin_localization_index');\n            }\n\n            $this->flashErrors($errors);\n        }\n\n        return $this->redirectToRoute('admin_localization_index');\n    }\n\n    /**\n     * Handles localization pack import.\n     *\n     * @AdminSecurity(\"is_granted(['update', 'create','delete'], request.get('_legacy_controller'))\", message=\"You do not have permission to edit this.\")\n     * @DemoRestricted(redirectRoute=\"admin_localization_index\")\n     *\n     * @param Request $request\n     *\n     * @return RedirectResponse\n     */\n    public function importPackAction(Request $request)\n    {\n        $localizationPackImportForm = $this->createForm(ImportLocalizationPackType::class);\n        $localizationPackImportForm->handleRequest($request);\n\n        if ($localizationPackImportForm->isSubmitted()) {\n            $data = $localizationPackImportForm->getData();\n\n            $localizationImportConfig = new LocalizationPackImportConfig(\n                $data['iso_localization_pack'],\n                $data['content_to_import'],\n                $data['download_pack_data']\n            );\n\n            $localizationPackImporter = $this->get('prestashop.core.localization.pack.import.importer');\n            $errors = $localizationPackImporter->import($localizationImportConfig);\n\n            if (empty($errors)) {\n                $this->addFlash(\n                    'success',\n                    $this->trans('Localization pack imported successfully.', 'Admin.International.Notification')\n                );\n\n                return $this->redirectToRoute('admin_localization_index');\n            }\n\n            foreach ($errors as $error) {\n                $this->addFlash('error', $error);\n            }\n        }\n\n        return $this->redirectToRoute('admin_localization_index');\n    }\n\n    /**\n     * Returns localization settings form handler.\n     *\n     * @return FormHandlerInterface\n     */\n    private function getLocalizationFormHandler()\n    {\n        return $this->get('prestashop.admin.localization.form_handler');\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Category;\nuse Exception;\nuse PrestaShop\\PrestaShop\\Adapter\\Product\\ListParametersUpdater;\nuse PrestaShop\\PrestaShop\\Adapter\\Tax\\TaxRuleDataProvider;\nuse PrestaShop\\PrestaShop\\Adapter\\Warehouse\\WarehouseDataProvider;\nuse PrestaShopBundle\\Component\\CsvResponse;\nuse PrestaShopBundle\\Entity\\AdminFilter;\nuse PrestaShopBundle\\Exception\\UpdateProductException;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCategories;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductCombinationBulk;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductInformation;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductOptions;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductPrice;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductQuantity;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductSeo;\nuse PrestaShopBundle\\Form\\Admin\\Product\\ProductShipping;\nuse PrestaShopBundle\\Model\\Product\\AdminModelAdapter;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse PrestaShopBundle\\Service\\DataProvider\\Admin\\ProductInterface as ProductInterfaceProvider;\nuse PrestaShopBundle\\Service\\DataProvider\\StockInterface;\nuse PrestaShopBundle\\Service\\DataUpdater\\Admin\\ProductInterface as ProductInterfaceUpdater;\nuse PrestaShopBundle\\Service\\Hook\\HookFinder;\nuse Product;\nuse Psr\\Log\\LoggerInterface;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType;\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Tools;\n\n/**\n * Admin controller for the Product pages using the Symfony architecture:\n * - categories\n * - product list\n * - product details\n * - product attributes\n * - ...\n *\n * This controller is the first one to be refactored to the new Symfony Architecture.\n * The retro-compatibility is dropped for the corresponding Admin pages.\n * A set of hooks are integrated and an Adapter is made to wrap the new EventDispatcher\n * component to the existing hook system. So existing hooks are always triggered, but from the new\n * code (and so needs to be adapted on the module side ton comply on the new parameters formats,\n * the new UI style, etc...).\n */\nclass ProductController extends FrameworkBundleAdminController\n{\n    /**\n     * Used to validate connected user authorizations.\n     */\n    const PRODUCT_OBJECT = 'ADMINPRODUCTS_';\n\n    /**\n     * Get the Catalog page with KPI banner, product list, bulk actions, filters, search, etc...\n     *\n     * URL example: /product/catalog/40/20/id_product/asc\n     *\n     * @Template(\"@PrestaShop/Admin/Product/CatalogPage/catalog.html.twig\")\n     *\n     * @param Request $request\n     * @param int $limit The size of the listing\n     * @param int $offset The offset of the listing\n     * @param string $orderBy To order product list\n     * @param string $sortOrder To order product list\n     *\n     * @return array|Template|RedirectResponse|Response\n     *\n     * @throws \\Symfony\\Component\\Translation\\Exception\\InvalidArgumentException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\RouteNotFoundException\n     * @throws \\LogicException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\MissingMandatoryParametersException\n     * @throws \\Symfony\\Component\\Routing\\Exception\\InvalidParameterException\n     * @throws \\Symfony\\Component\\Form\\Exception\\LogicException\n     * @throws \\Symfony\\Component\\Form\\Exception\\AlreadySubmittedException\n     */\n    public function catalogAction(\n        Request $request,\n        $limit = 10,\n        $offset = 0,\n        $orderBy = 'id_product',\n        $sortOrder = 'desc'\n    ) {\n        if (!$this->isGranted(array(PageVoter::READ, PageVoter::UPDATE, PageVoter::CREATE), self::PRODUCT_OBJECT)) {\n            return $this->redirect('admin_dashboard');\n        }\n\n        $language = $this->getContext()->language;\n        $request->getSession()->set('_locale', $language->locale);\n        $request = $this->get('prestashop.adapter.product.filter_categories_request_purifier')->purify($request);\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        // Set values from persistence and replace in the request\n        $persistedFilterParameters = $productProvider->getPersistedFilterParameters();\n        /** @var ListParametersUpdater $listParametersUpdater */\n        $listParametersUpdater = $this->get('prestashop.adapter.product.list_parameters_updater');\n        $listParameters = $listParametersUpdater->buildListParameters(\n            $request->query->all(),\n            $persistedFilterParameters,\n            compact('offset', 'limit', 'orderBy', 'sortOrder')\n        );\n        $offset = $listParameters['offset'];\n        $limit = $listParameters['limit'];\n        $orderBy = $listParameters['orderBy'];\n        $sortOrder = $listParameters['sortOrder'];\n\n        //The product provider performs the same merge internally, so we do the same so that the displayed filters are\n        //consistent with the request ones\n        $combinedFilterParameters = array_replace($persistedFilterParameters, $request->request->all());\n\n        $toolbarButtons = $this->getToolbarButtons();\n\n        // Fetch product list (and cache it into view subcall to listAction)\n        $products = $productProvider->getCatalogProductList(\n            $offset,\n            $limit,\n            $orderBy,\n            $sortOrder,\n            $request->request->all()\n        );\n        $lastSql = $productProvider->getLastCompiledSql();\n\n        $hasCategoryFilter = $productProvider->isCategoryFiltered();\n        $hasColumnFilter = $productProvider->isColumnFiltered();\n        $totalFilteredProductCount = (count($products) > 0) ? $products[0]['total'] : 0;\n        // Alternative layout for empty list\n        if ((!$hasCategoryFilter && !$hasColumnFilter && $totalFilteredProductCount === 0)\n            || ($totalProductCount = $productProvider->countAllProducts()) === 0\n        ) {\n            // no filter, total filtered == 0, and then total count == 0 too.\n            $legacyUrlGenerator = $this->get('prestashop.core.admin.url_generator_legacy');\n\n            return $this->render(\n                '@PrestaShop/Admin/Product/CatalogPage/catalog_empty.html.twig',\n                [\n                    'layoutHeaderToolbarBtn' => $toolbarButtons,\n                    'import_url' => $legacyUrlGenerator->generate('AdminImport'),\n                ]\n            );\n        }\n\n        // Pagination\n        $paginationParameters = $request->attributes->all();\n        $paginationParameters['_route'] = 'admin_product_catalog';\n        $categoriesForm = $this->createForm(ProductCategories::class);\n        if (!empty($persistedFilterParameters['filter_category'])) {\n            $categoriesForm->setData(\n                [\n                    'categories' => [\n                        'tree' => [0 => $combinedFilterParameters['filter_category']],\n                    ],\n                ]\n            );\n        }\n\n        $cleanFilterParameters = $listParametersUpdater->cleanFiltersForPositionOrdering(\n            $combinedFilterParameters,\n            $orderBy,\n            $hasCategoryFilter\n        );\n\n        $permissionError = null;\n        if ($this->get('session')->getFlashBag()->has('permission_error')) {\n            $permissionError = $this->get('session')->getFlashBag()->get('permission_error')[0];\n        }\n\n        $categoriesFormView = $categoriesForm->createView();\n        $selectedCategory = !empty($combinedFilterParameters['filter_category']) ? new Category($combinedFilterParameters['filter_category']) : null;\n\n        //Drag and drop is ONLY activated when EXPLICITLY requested by the user\n        //Meaning a category is selected and the user clicks on REORDER button\n        $activateDragAndDrop = 'position_ordering' === $orderBy && $hasCategoryFilter;\n\n        // Template vars injection\n        return array_merge(\n            $cleanFilterParameters,\n            [\n                'limit' => $limit,\n                'offset' => $offset,\n                'orderBy' => $orderBy,\n                'sortOrder' => $sortOrder,\n                'has_filter' => $hasCategoryFilter || $hasColumnFilter,\n                'has_category_filter' => $hasCategoryFilter,\n                'selected_category' => $selectedCategory,\n                'has_column_filter' => $hasColumnFilter,\n                'products' => $products,\n                'last_sql' => $lastSql,\n                'product_count_filtered' => $totalFilteredProductCount,\n                'product_count' => $totalProductCount,\n                'activate_drag_and_drop' => $activateDragAndDrop,\n                'pagination_parameters' => $paginationParameters,\n                'layoutHeaderToolbarBtn' => $toolbarButtons,\n                'categories' => $categoriesFormView,\n                'pagination_limit_choices' => $productProvider->getPaginationLimitChoices(),\n                'import_link' => $this->generateUrl('admin_import', ['import_type' => 'products']),\n                'sql_manager_add_link' => $this->generateUrl('admin_sql_requests_create'),\n                'enableSidebar' => true,\n                'help_link' => $this->generateSidebarLink('AdminProducts'),\n                'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n                'permission_error' => $permissionError,\n                'layoutTitle' => $this->trans('Products', 'Admin.Global'),\n            ]\n        );\n    }\n\n    /**\n     * Get only the list of products to display on the main Admin Product page.\n     * The full page that shows products list will subcall this action (from catalogAction).\n     * URL example: /product/list/html/40/20/id_product/asc.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/CatalogPage/Lists/list.html.twig\")\n     *\n     * @param Request $request\n     * @param int $limit The size of the listing\n     * @param int $offset The offset of the listing\n     * @param string $orderBy To order product list\n     * @param string $sortOrder To order product list\n     * @param string $view full|quicknav To change default template used to render the content\n     *\n     * @return array|Template|Response\n     */\n    public function listAction(\n        Request $request,\n        $limit = 10,\n        $offset = 0,\n        $orderBy = 'id_product',\n        $sortOrder = 'asc',\n        $view = 'full'\n    ) {\n        if (!$this->isGranted(array(PageVoter::READ), self::PRODUCT_OBJECT)) {\n            return $this->redirect('admin_dashboard');\n        }\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n        $totalCount = 0;\n\n        $this->get('prestashop.service.product')->cleanupOldTempProducts();\n\n        $products = $request->attributes->get('products', null); // get from action subcall data, if any\n        $lastSql = $request->attributes->get('last_sql', null); // get from action subcall data, if any\n\n        if ($products === null) {\n            // get old values from persistence (before the current update)\n            $persistedFilterParameters = $productProvider->getPersistedFilterParameters();\n            /** @var ListParametersUpdater $listParametersUpdater */\n            $listParametersUpdater = $this->get('prestashop.adapter.product.list_parameters_updater');\n            $listParameters = $listParametersUpdater->buildListParameters(\n                $request->query->all(),\n                $persistedFilterParameters,\n                compact('offset', 'limit', 'orderBy', 'sortOrder')\n            );\n            $offset = $listParameters['offset'];\n            $limit = $listParameters['limit'];\n            $orderBy = $listParameters['orderBy'];\n            $sortOrder = $listParameters['sortOrder'];\n\n            /**\n             * 2 hooks are triggered here:\n             * - actionAdminProductsListingFieldsModifier\n             * - actionAdminProductsListingResultsModifier.\n             */\n            $products = $productProvider->getCatalogProductList($offset, $limit, $orderBy, $sortOrder);\n            $lastSql = $productProvider->getLastCompiledSql();\n        }\n\n        $hasCategoryFilter = $productProvider->isCategoryFiltered();\n\n        // Adds controller info (URLs, etc...) to product list\n        foreach ($products as &$product) {\n            $totalCount = isset($product['total']) ? $product['total'] : $totalCount;\n            $product['url'] = $this->generateUrl(\n                'admin_product_form',\n                ['id' => $product['id_product']]\n            );\n            $product['unit_action_url'] = $this->generateUrl(\n                'admin_product_unit_action',\n                [\n                    'action' => 'duplicate',\n                    'id' => $product['id_product'],\n                ]\n            );\n            $product['preview_url'] = $adminProductWrapper->getPreviewUrlFromId($product['id_product']);\n        }\n\n        //Drag and drop is ONLY activated when EXPLICITLY requested by the user\n        //Meaning a category is selected and the user clicks on REORDER button\n        $activateDragAndDrop = 'position_ordering' === $orderBy && $hasCategoryFilter;\n\n        // Template vars injection\n        $vars = array(\n            'activate_drag_and_drop' => $activateDragAndDrop,\n            'products' => $products,\n            'product_count' => $totalCount,\n            'last_sql_query' => $lastSql,\n            'has_category_filter' => $productProvider->isCategoryFiltered(),\n            'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n        );\n        if ($view !== 'full') {\n            return $this->render(\n                '@Product/CatalogPage/Lists/list_' . $view . '.html.twig',\n                array_merge(\n                    $vars,\n                    [\n                        'limit' => $limit,\n                        'offset' => $offset,\n                        'total' => $totalCount,\n                    ]\n                )\n            );\n        }\n\n        return $vars;\n    }\n\n    /**\n     * Gets the header toolbar buttons.\n     *\n     * @return array\n     */\n    private function getToolbarButtons()\n    {\n        $toolbarButtons = array();\n        $toolbarButtons['add'] = array(\n            'href' => $this->generateUrl('admin_product_new'),\n            'desc' => $this->trans('New product', 'Admin.Actions'),\n            'icon' => 'add_circle_outline',\n            'help' => $this->trans('Create a new product: CTRL+P', 'Admin.Catalog.Help'),\n        );\n\n        return $toolbarButtons;\n    }\n\n    /**\n     * Create a new basic product\n     * Then return to form action.\n     *\n     * @return RedirectResponse\n     *\n     * @throws \\LogicException\n     * @throws \\PrestaShopException\n     */\n    public function newAction()\n    {\n        if (!$this->isGranted(PageVoter::CREATE, self::PRODUCT_OBJECT)) {\n            $errorMessage = $this->trans('You do not have permission to add this.', 'Admin.Notifications.Error');\n            $this->get('session')->getFlashBag()->add('permission_error', $errorMessage);\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n        $languages = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $productShopCategory = $this->getContext()->shop->id_category;\n\n        /** @var Product $product */\n        $product = $productAdapter->getProductInstance();\n        $product->id_category_default = $productShopCategory;\n\n        /** @var TaxRuleDataProvider $taxRuleDataProvider */\n        $taxRuleDataProvider = $this->get('prestashop.adapter.data_provider.tax');\n        $product->id_tax_rules_group = $taxRuleDataProvider->getIdTaxRulesGroupMostUsed();\n        $product->active = $productProvider->isNewProductDefaultActivated() ? 1 : 0;\n        $product->state = Product::STATE_TEMP;\n\n        //set name and link_rewrite in each lang\n        foreach ($languages as $lang) {\n            $product->name[$lang['id_lang']] = '';\n            $product->link_rewrite[$lang['id_lang']] = '';\n        }\n\n        $product->save();\n        $product->addToCategories([$productShopCategory]);\n\n        return $this->redirectToRoute('admin_product_form', ['id' => $product->id]);\n    }\n\n    /**\n     * Product form.\n     *\n     * @Template(\"@PrestaShop/Admin/Product/ProductPage/product.html.twig\")\n     *\n     * @param int $id The product ID\n     * @param Request $request\n     *\n     * @return array|Response Template vars\n     *\n     * @throws \\LogicException\n     */\n    public function formAction($id, Request $request)\n    {\n        gc_disable();\n\n        if (!$this->isGranted(array(PageVoter::READ, PageVoter::UPDATE, PageVoter::CREATE), self::PRODUCT_OBJECT)) {\n            return $this->redirect('admin_dashboard');\n        }\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct($id);\n\n        if (!$product || empty($product->id)) {\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $shopContext = $this->get('prestashop.adapter.shop.context');\n        $legacyContextService = $this->get('prestashop.adapter.legacy.context');\n        $isMultiShopContext = count($shopContext->getContextListShopID()) > 1;\n\n        $modelMapper = $this->get('prestashop.adapter.admin.model.product');\n        $adminProductWrapper = $this->get('prestashop.adapter.admin.wrapper.product');\n\n        $form = $this->createProductForm($product, $modelMapper);\n\n        $formBulkCombinations = $this->createForm(\n            ProductCombinationBulk::class,\n            null,\n            [\n                'iso_code' => $this\n                    ->get('prestashop.adapter.legacy.context')\n                    ->getContext()->currency->iso_code,\n                'price_display_precision' => $this->configuration\n                    ->get('_PS_PRICE_DISPLAY_PRECISION_'),\n            ]\n        );\n\n        // Legacy code. To fix when Object model will change. But report Hooks.\n        $postData = $request->request->all();\n        $combinationsList = [];\n        if (!empty($postData)) {\n            foreach ($postData as $postKey => $postValue) {\n                if (preg_match('/^combination_.*/', $postKey)) {\n                    $combinationsList[$postKey] = $postValue;\n                    $postData['form'][$postKey] = $postValue; // need to validate the form\n                }\n            }\n\n            // Duplicate Request to be a valid form (like it was real) with postData modified ..\n            $request = $request->duplicate(\n                $request->query->all(),\n                $postData,\n                $request->attributes->all(),\n                $request->cookies->all(),\n                $request->files->all(),\n                $request->server->all()\n            );\n        }\n\n        /* @var Form $form */\n        $form->handleRequest($request);\n        $formData = $form->getData();\n        $formData['step3']['combinations'] = $combinationsList;\n\n        try {\n            if ($form->isSubmitted()) {\n                if ($this->isDemoModeEnabled() && $request->isXmlHttpRequest()) {\n                    $errorMessage = $this->getDemoModeErrorMessage();\n\n                    return $this->returnErrorJsonResponse(\n                        ['error' => [$errorMessage]],\n                        Response::HTTP_SERVICE_UNAVAILABLE\n                    );\n                }\n\n                if ($form->isValid()) {\n                    //define POST values for keeping legacy adminController skills\n                    $_POST = $modelMapper->getModelData($formData, $isMultiShopContext) + $_POST;\n                    $_POST['form'] = $formData;\n                    $_POST['state'] = Product::STATE_SAVED;\n\n                    $adminProductController = $adminProductWrapper->getInstance();\n                    $adminProductController->setIdObject($formData['id_product']);\n                    $adminProductController->setAction('save');\n\n                    // Hooks: this will trigger legacy AdminProductController, postProcess():\n                    // actionAdminSaveBefore; actionAdminProductsControllerSaveBefore\n                    // actionProductAdd or actionProductUpdate (from processSave() -> processAdd() or processUpdate())\n                    // actionAdminSaveAfter; actionAdminProductsControllerSaveAfter\n                    $productSaveResult = $adminProductController->postCoreProcess();\n\n                    if (false == $productSaveResult) {\n                        return $this->returnErrorJsonResponse(\n                            ['error' => $adminProductController->errors],\n                            Response::HTTP_BAD_REQUEST\n                        );\n                    }\n\n                    $product = $productSaveResult;\n\n                    /* @var Product $product */\n                    $adminProductController->processSuppliers($product->id);\n                    $adminProductController->processFeatures($product->id);\n                    $adminProductController->processSpecificPricePriorities();\n                    foreach ($_POST['combinations'] as $combinationValues) {\n                        $adminProductWrapper->processProductAttribute($product, $combinationValues);\n                        // For now, each attribute set the same value.\n                        $adminProductWrapper->processDependsOnStock(\n                            $product,\n                            ($_POST['depends_on_stock'] == '1'),\n                            $combinationValues['id_product_attribute']\n                        );\n                    }\n                    $adminProductWrapper->processDependsOnStock($product, ($_POST['depends_on_stock'] == '1'));\n\n                    // If there is no combination, then quantity and location are managed for the whole product (as combination ID 0)\n                    // In all cases, legacy hooks are triggered: actionProductUpdate and actionUpdateQuantity\n                    if (count($_POST['combinations']) === 0 && isset($_POST['qty_0'])) {\n                        $adminProductWrapper->processQuantityUpdate($product, $_POST['qty_0']);\n                        $adminProductWrapper->processLocation($product, (string) $_POST['location']);\n                    }\n                    // else quantities are managed from $adminProductWrapper->processProductAttribute() above.\n\n                    $adminProductWrapper->processProductOutOfStock($product, $_POST['out_of_stock']);\n\n                    $customizationFieldsIds = $adminProductWrapper\n                        ->processProductCustomization($product, $_POST['custom_fields']);\n\n                    $adminProductWrapper->processAttachments($product, $_POST['attachments']);\n\n                    $adminProductController->processWarehouses();\n\n                    $response = new JsonResponse();\n                    $response->setData([\n                        'product' => $product,\n                        'customization_fields_ids' => $customizationFieldsIds,\n                    ]);\n\n                    if ($request->isXmlHttpRequest()) {\n                        return $response;\n                    }\n                } elseif ($request->isXmlHttpRequest()) {\n                    return $this->returnErrorJsonResponse(\n                        $this->getFormErrorsForJS($form),\n                        Response::HTTP_BAD_REQUEST\n                    );\n                }\n            }\n        } catch (Exception $e) {\n            // this controller can be called as an AJAX JSON route or a HTML page\n            // so we need to return the right type of response if an exception it thrown\n            if ($request->isXmlHttpRequest()) {\n                return $this->returnErrorJsonResponse(\n                    [],\n                    Response::HTTP_INTERNAL_SERVER_ERROR\n                );\n            }\n\n            throw $e;\n        }\n\n        /** @var $stockManager StockInterface */\n        $stockManager = $this->get('prestashop.core.data_provider.stock_interface');\n\n        /** @var WarehouseDataProvider $warehouseProvider */\n        $warehouseProvider = $this->get('prestashop.adapter.data_provider.warehouse');\n\n        //If context shop is define to a group shop, disable the form\n        if ($shopContext->isShopGroupContext()) {\n            return $this->render('@Product/ProductPage/disabled_form_alert.html.twig', ['showContentHeader' => false]);\n        }\n\n        // languages for switch dropdown\n        $languages = $legacyContextService->getLanguages();\n\n        // generate url preview\n        if ($product->active) {\n            $preview_url = $adminProductWrapper->getPreviewUrl($product);\n            $preview_url_deactive = $adminProductWrapper->getPreviewUrlDeactivate($preview_url);\n        } else {\n            $preview_url_deactive = $adminProductWrapper->getPreviewUrl($product, false);\n            $preview_url = $adminProductWrapper->getPreviewUrlDeactivate($preview_url_deactive);\n        }\n\n        $doctrine = $this->getDoctrine()->getManager();\n        $language = empty($languages[0]) ? ['id_lang' => 1, 'id_shop' => 1] : $languages[0];\n        $attributeGroups = $doctrine->getRepository('PrestaShopBundle:Attribute')->findByLangAndShop((int) $language['id_lang'], (int) $language['id_shop']);\n\n        $drawerModules = (new HookFinder())->setHookName('displayProductPageDrawer')\n            ->setParams(['product' => $product])\n            ->addExpectedInstanceClasses('PrestaShop\\PrestaShop\\Core\\Product\\ProductAdminDrawer')\n            ->present();\n\n        return [\n            'form' => $form->createView(),\n            'formCombinations' => $formBulkCombinations->createView(),\n            'categories' => $this->get('prestashop.adapter.data_provider.category')->getCategoriesWithBreadCrumb(),\n            'id_product' => $id,\n            'ids_product_attribute' => (isset($formData['step3']['id_product_attributes']) ? implode(',', $formData['step3']['id_product_attributes']) : ''),\n            'has_combinations' => (isset($formData['step3']['id_product_attributes']) && count($formData['step3']['id_product_attributes']) > 0),\n            'combinations_count' => isset($formData['step3']['id_product_attributes']) ? count($formData['step3']['id_product_attributes']) : 0,\n            'asm_globally_activated' => $stockManager->isAsmGloballyActivated(),\n            'warehouses' => ($stockManager->isAsmGloballyActivated()) ? $warehouseProvider->getWarehouses() : [],\n            'is_multishop_context' => $isMultiShopContext,\n            'is_combination_active' => $this->get('prestashop.adapter.legacy.configuration')->combinationIsActive(),\n            'showContentHeader' => false,\n            'preview_link' => $preview_url,\n            'preview_link_deactivate' => $preview_url_deactive,\n            'stats_link' => $this->getAdminLink('AdminStats', ['module' => 'statsproduct', 'id_product' => $id]),\n            'help_link' => $this->generateSidebarLink('AdminProducts'),\n            'languages' => $languages,\n            'default_language_iso' => $languages[0]['iso_code'],\n            'attribute_groups' => $attributeGroups,\n            'max_upload_size' => Tools::formatBytes(UploadedFile::getMaxFilesize()),\n            'is_shop_context' => $this->get('prestashop.adapter.shop.context')->isShopContext(),\n            'editable' => $this->isGranted(PageVoter::UPDATE, self::PRODUCT_OBJECT),\n            'drawerModules' => $drawerModules,\n            'layoutTitle' => $this->trans('Product', 'Admin.Global'),\n        ];\n    }\n\n    /**\n     * Builds the product form.\n     *\n     * @param Product $product\n     * @param AdminModelAdapter $modelMapper\n     *\n     * @return FormInterface\n     *\n     * @throws \\Symfony\\Component\\Process\\Exception\\LogicException\n     */\n    private function createProductForm(Product $product, AdminModelAdapter $modelMapper)\n    {\n        $formBuilder = $this->createFormBuilder(\n            $modelMapper->getFormData($product),\n            ['allow_extra_fields' => true]\n        )\n            ->add('id_product', HiddenType::class)\n            ->add('step1', ProductInformation::class)\n            ->add('step2', ProductPrice::class, ['id_product' => $product->id])\n            ->add('step3', ProductQuantity::class)\n            ->add('step4', ProductShipping::class)\n            ->add('step5', ProductSeo::class, [\n                'mapping_type' => $product->getRedirectType(),\n            ])\n            ->add('step6', ProductOptions::class);\n\n        // Prepare combination form (fake but just to validate the form)\n        $combinations = $product->getAttributesResume(\n            $this->getContext()->language->id\n        );\n\n        if (is_array($combinations)) {\n            $maxInputVars = (int) ini_get('max_input_vars');\n            $combinationsCount = count($combinations) * 25;\n            $combinationsInputs = ceil($combinationsCount / 1000) * 1000;\n\n            if ($combinationsInputs > $maxInputVars) {\n                $this->addFlash(\n                    'error',\n                    $this->trans(\n                        'The value of the PHP.ini setting \"max_input_vars\" must be increased to %value% in order to be able to submit the product form.',\n                        'Admin.Notifications.Error',\n                        array('%value%' => $combinationsInputs)\n                    )\n                );\n            }\n\n            foreach ($combinations as $combination) {\n                $formBuilder->add(\n                    'combination_' . $combination['id_product_attribute'],\n                    ProductCombination::class\n                );\n            }\n        }\n\n        return $formBuilder->getForm();\n    }\n\n    /**\n     * Do bulk action on a list of Products. Used with the 'selection action' dropdown menu on the Catalog page.\n     *\n     * @param Request $request\n     * @param string $action The action to apply on the selected products\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function bulkAction(Request $request, $action)\n    {\n        if (!$this->actionIsAllowed($action, self::PRODUCT_OBJECT, '_all')) {\n            $this->addFlash('permission_error', $this->getForbiddenActionMessage($action));\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productIdList = $request->request->get('bulk_action_selected_products');\n        /** @var $productUpdater ProductInterfaceUpdater */\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        $hookEventParameters = ['product_list_id' => $productIdList];\n        /** @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        try {\n            $hasMessages = $this->get('session')->getFlashBag()->has('success');\n\n            if ($this->isDemoModeEnabled()) {\n                throw new UpdateProductException($this->getDemoModeErrorMessage());\n            }\n\n            switch ($action) {\n                case 'activate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully activated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products activated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'deactivate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList($productIdList, false);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully deactivated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products deactivated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'delete_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->deleteProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully deleted.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products deleted: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'duplicate_all':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->duplicateProductIdList($productIdList);\n                    if (empty($hasMessages)) {\n                        $this->addFlash(\n                            'success',\n                            $this->trans('Product(s) successfully duplicated.', 'Admin.Catalog.Notification')\n                        );\n                    }\n\n                    $logger->info('Products duplicated: (' . implode(',', $productIdList) . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Bulk action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::bulkAction: \"' . $action . '\"',\n                        2001\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate this with an domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        return new Response(json_encode(['result' => 'ok']));\n    }\n\n    /**\n     * Do mass edit action on the current page of products.\n     * Used with the 'grouped action' dropdown menu on the Catalog page.\n     *\n     * @param Request $request\n     * @param string $action The action to apply on the selected products\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function massEditAction(Request $request, $action)\n    {\n        if (!$this->isGranted(PageVoter::UPDATE, self::PRODUCT_OBJECT)) {\n            $errorMessage = $this->trans(\n                'You do not have permission to edit this.',\n                'Admin.Notifications.Error'\n            );\n            $this->get('session')->getFlashBag()->add('permission_error', $errorMessage);\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        /** @var $productProvider ProductInterfaceProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        /** @var $productUpdater ProductInterfaceUpdater */\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        /* @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        /* Initialize router params variable. */\n        $routerParams = [];\n\n        try {\n            switch ($action) {\n                case 'sort':\n                    /* Change position_ordering to position */\n                    $routerParams['orderBy'] = 'position';\n\n                    $productIdList = $request->request->get('mass_edit_action_sorted_products');\n                    $productPositionList = $request->request->get('mass_edit_action_sorted_positions');\n                    $hookEventParameters = [\n                        'product_list_id' => $productIdList,\n                        'product_list_position' => $productPositionList,\n                    ];\n\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminSortBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerSortBefore',\n                        $hookEventParameters\n                    );\n\n                    // Hooks: managed in ProductUpdater\n                    $persistedFilterParams = $productProvider->getPersistedFilterParameters();\n                    $productList = array_combine($productIdList, $productPositionList);\n                    $productUpdater->sortProductIdList(\n                        $productList,\n                        ['filter_category' => $persistedFilterParams['filter_category']]\n                    );\n\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Products successfully sorted.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info(\n                        'Products sorted: (' . implode(',', $productIdList) .\n                        ') with positions (' . implode(',', $productPositionList) . ').'\n                    );\n                    $hookEventParameters = [\n                        'product_list_id' => $productIdList,\n                        'product_list_position' => $productPositionList,\n                    ];\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminSortAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerSortAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Mass edit action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::massEditAction: \"' . $action . '\"',\n                        2001\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate with domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        $urlGenerator = $this->get('prestashop.core.admin.url_generator');\n\n        return $this->redirect($urlGenerator->generate('admin_product_catalog', $routerParams));\n    }\n\n    /**\n     * Do action on one product at a time. Can be used at many places in the controller's page.\n     *\n     * @param string $action The action to apply on the selected product\n     * @param int $id the product ID to apply the action on\n     *\n     * @throws Exception if action not properly set or unknown\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function unitAction($action, $id)\n    {\n        if (!$this->actionIsAllowed($action, self::PRODUCT_OBJECT)) {\n            $this->addFlash('permission_error', $this->getForbiddenActionMessage($action));\n\n            return $this->redirectToRoute('admin_product_catalog');\n        }\n\n        $productUpdater = $this->get('prestashop.core.admin.data_updater.product_interface');\n        /** @var $productUpdater ProductInterfaceUpdater */\n\n        /** @var $logger LoggerInterface */\n        $logger = $this->get('logger');\n\n        $hookEventParameters = ['product_id' => $id];\n        /** @var HookDispatcher $hookDispatcher */\n        $hookDispatcher = $this->get('prestashop.core.hook.dispatcher');\n\n        try {\n            if ($this->isDemoModeEnabled()) {\n                throw new UpdateProductException($this->getDemoModeErrorMessage());\n            }\n\n            switch ($action) {\n                case 'delete':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->deleteProduct($id);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully deleted.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product deleted: (' . $id . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeleteAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeleteAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'duplicate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $duplicateProductId = $productUpdater->duplicateProduct($id);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully duplicated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product duplicated: (from ' . $id . ' to ' . $duplicateProductId . ').');\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDuplicateAfter',\n                        $hookEventParameters\n                    );\n                    // stops here and redirect to the new product's page.\n                    return $this->redirectToRoute('admin_product_form', ['id' => $duplicateProductId]);\n                case 'activate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList([$id]);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully activated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product activated: ' . $id);\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminActivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerActivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                case 'deactivate':\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateBefore',\n                        $hookEventParameters\n                    );\n                    // Hooks: managed in ProductUpdater\n                    $productUpdater->activateProductIdList([$id], false);\n                    $this->addFlash(\n                        'success',\n                        $this->trans('Product successfully deactivated.', 'Admin.Catalog.Notification')\n                    );\n                    $logger->info('Product deactivated: ' . $id);\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminDeactivateAfter',\n                        $hookEventParameters\n                    );\n                    $hookDispatcher->dispatchWithParameters(\n                        'actionAdminProductsControllerDeactivateAfter',\n                        $hookEventParameters\n                    );\n\n                    break;\n                default:\n                    /*\n                     * should never happens since the route parameters are\n                     * restricted to a set of action values in YML file.\n                     */\n                    $logger->error('Unit action from ProductController received a bad parameter.');\n\n                    throw new Exception(\n                        'Bad action received from call to ProductController::unitAction: \"' . $action . '\"',\n                        2002\n                    );\n            }\n        } catch (UpdateProductException $due) {\n            //TODO : need to translate with a domain name\n            $message = $due->getMessage();\n            $this->addFlash('failure', $message);\n            $logger->warning($message);\n        }\n\n        return $this->redirect($this->get('prestashop.core.admin.url_generator')->generate('admin_product_catalog'));\n    }\n\n    /**\n     * @return CsvResponse\n     *\n     * @throws \\Symfony\\Component\\Translation\\Exception\\InvalidArgumentException\n     */\n    public function exportAction()\n    {\n        return $this->get('prestashop.core.product.csv_exporter')->export();\n    }\n\n    /**\n     * Set the Catalog filters values and redirect to the catalogAction.\n     *\n     * URL example: /product/catalog_filters/42/last/32\n     *\n     * @param int|string $quantity the quantity to set on the catalog filters persistence\n     * @param string $active the activation state to set on the catalog filters persistence\n     *\n     * @return RedirectResponse\n     */\n    public function catalogFiltersAction($quantity = 'none', $active = 'none')\n    {\n        $quantity = urldecode($quantity);\n\n        /** @var ProductInterfaceProvider $productProvider */\n        $productProvider = $this->get('prestashop.core.admin.data_provider.product_interface');\n\n        // we merge empty filter set with given values, to reset the other filters!\n        $productProvider->persistFilterParameters(\n            array_merge(\n                AdminFilter::getProductCatalogEmptyFilter(),\n                [\n                    'filter_column_sav_quantity' => ($quantity == 'none') ? '' : $quantity,\n                    'filter_column_active' => ($active == 'none') ? '' : $active,\n                ]\n            )\n        );\n\n        return $this->redirectToRoute('admin_product_catalog');\n    }\n\n    /**\n     * @deprecated since 1.7.5.0, to be removed in 1.8 rely on CommonController::renderFieldAction\n     *\n     * @throws \\OutOfBoundsException\n     * @throws \\LogicException\n     * @throws \\PrestaShopException\n     */\n    public function renderFieldAction($productId, $step, $fieldName)\n    {\n        @trigger_error(\n            'This function is deprecated, use CommonController::renderFieldAction instead.',\n            E_USER_DEPRECATED\n        );\n\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct($productId);\n        $modelMapper = new AdminModelAdapter(\n            $product,\n            $this->get('prestashop.adapter.legacy.context'),\n            $this->get('prestashop.adapter.admin.wrapper.product'),\n            $this->get('prestashop.adapter.tools'),\n            $productAdapter,\n            $this->get('prestashop.adapter.data_provider.supplier'),\n            $this->get('prestashop.adapter.data_provider.warehouse'),\n            $this->get('prestashop.adapter.data_provider.feature'),\n            $this->get('prestashop.adapter.data_provider.pack'),\n            $this->get('prestashop.adapter.shop.context'),\n            $this->get('prestashop.adapter.data_provider.tax'),\n            $this->get('router')\n        );\n        $form = $this->createFormBuilder($modelMapper->getFormData());\n        switch ($step) {\n            case 'step1':\n                $form->add('step1', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductInformation');\n\n                break;\n            case 'step2':\n                $form->add('step2', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductPrice');\n\n                break;\n            case 'step3':\n                $form->add('step3', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductQuantity');\n\n                break;\n            case 'step4':\n                $form->add('step4', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductShipping');\n\n                break;\n            case 'step5':\n                $form->add('step5', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductSeo');\n\n                break;\n            case 'step6':\n                $form->add('step6', 'PrestaShopBundle\\Form\\Admin\\Product\\ProductOptions');\n\n                break;\n            case 'default':\n        }\n\n        return $this->render('@PrestaShop/Admin/Common/_partials/_form_field.html.twig', [\n            'form' => $form->getForm()->get($step)->get($fieldName)->createView(),\n            'formId' => $step . '_' . $fieldName . '_rendered',\n        ]);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse Exception;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass I18nController extends ApiController\n{\n    /**\n     * Show translation for page-app build with vue-js.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listTranslationAction(Request $request)\n    {\n        try {\n            $page = $request->attributes->get('page');\n\n            try {\n                $translationClass = $this->container->get('prestashop.translation.api.' . $page);\n            } catch (Exception $exception) {\n                throw new BadRequestHttpException($exception->getMessage());\n            }\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return $this->jsonResponse($translationClass->getFormattedTranslations(), $request);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse PrestaShopBundle\\Api\\QueryStockParamsCollection;\nuse PrestaShopBundle\\Api\\Stock\\Movement;\nuse PrestaShopBundle\\Api\\Stock\\MovementsCollection;\nuse PrestaShopBundle\\Component\\CsvResponse;\nuse PrestaShopBundle\\Entity\\ProductIdentity;\nuse PrestaShopBundle\\Entity\\Repository\\StockRepository;\nuse PrestaShopBundle\\Exception\\InvalidPaginationParamsException;\nuse PrestaShopBundle\\Exception\\ProductNotFoundException;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Security\\Voter\\PageVoter;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass StockController extends ApiController\n{\n    /**\n     * @var StockRepository\n     */\n    public $stockRepository;\n\n    /**\n     * @var QueryStockParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @var MovementsCollection;\n     */\n    public $movements;\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listProductsAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::READ], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $stock = array(\n            'info' => array(\n                'edit_bulk_url' => $this->container->get('router')->generate('api_stock_bulk_edit_products'),\n            ),\n            'data' => $this->stockRepository->getData($queryParamsCollection),\n        );\n        $totalPages = $this->stockRepository->countPages($queryParamsCollection);\n\n        return $this->jsonResponse($stock, $request, $queryParamsCollection, 200, array('Total-Pages' => $totalPages));\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function editProductAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::UPDATE], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $this->guardAgainstMissingDeltaParameter($request);\n            $delta = $request->request->getInt('delta');\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        $productIdentity = ProductIdentity::fromArray(array(\n            'product_id' => $request->attributes->get('productId'),\n            'combination_id' => $request->attributes->get('combinationId', 0),\n        ));\n\n        try {\n            $movement = new Movement($productIdentity, $delta);\n            $product = $this->stockRepository->updateStock($movement);\n        } catch (ProductNotFoundException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return new JsonResponse($product);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkEditProductsAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::UPDATE], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $this->guardAgainstInvalidBulkEditionRequest($request);\n            $stockMovementsParams = json_decode($request->getContent(), true);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n\n        $movementsCollection = $this->movements->fromArray($stockMovementsParams);\n\n        try {\n            $products = $this->stockRepository->bulkUpdateStock($movementsCollection);\n        } catch (ProductNotFoundException $exception) {\n            return $this->handleException($exception);\n        }\n\n        return new JsonResponse($products);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return CsvResponse|JsonResponse\n     */\n    public function listProductsExportAction(Request $request)\n    {\n        if (!$this->isGranted([PageVoter::READ], $request->get('_legacy_controller'))) {\n            return new JsonResponse(null, Response::HTTP_FORBIDDEN);\n        }\n\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $dataCallback = function ($page, $limit) use ($queryParamsCollection) {\n            return $this->stockRepository->getDataExport($page, $limit, $queryParamsCollection);\n        };\n\n        $translator = $this->container->get('translator');\n\n        // headers columns\n        $headersData = array(\n            'product_id' => 'Product ID',\n            'combination_id' => 'Combination ID',\n            'product_reference' => $translator->trans('Product reference', array(), 'Admin.Advparameters.Feature'),\n            'combination_reference' => $translator->trans('Combination reference', array(), 'Admin.Advparameters.Feature'),\n            'product_name' => $translator->trans('Product name', array(), 'Admin.Catalog.Feature'),\n            'combination_name' => $translator->trans('Combination name', array(), 'Admin.Catalog.Feature'),\n            'supplier_name' => $translator->trans('Supplier', array(), 'Admin.Global'),\n            'active' => $translator->trans('Status', array(), 'Admin.Global'),\n            'product_physical_quantity' => $translator->trans('Physical quantity', array(), 'Admin.Catalog.Feature'),\n            'product_reserved_quantity' => $translator->trans('Reserved quantity', array(), 'Admin.Catalog.Feature'),\n            'product_available_quantity' => $translator->trans('Available quantity', array(), 'Admin.Catalog.Feature'),\n            'product_low_stock_threshold' => $translator->trans('Low stock level', array(), 'Admin.Catalog.Feature'),\n            'product_low_stock_alert' => $translator->trans('Send me an email when the quantity is below or equals this level', array(), 'Admin.Catalog.Feature'),\n        );\n\n        return (new CsvResponse())\n            ->setData($dataCallback)\n            ->setHeadersData($headersData)\n            ->setLimit(10000)\n            ->setFileName('stock_' . date('Y-m-d_His') . '.csv');\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    private function guardAgainstMissingDeltaParameter(Request $request)\n    {\n        $message = 'The \"delta\" parameter is required';\n\n        $content = $request->getContent();\n        if (strlen($content) > 0) {\n            $decodedContent = $this->guardAgainstInvalidRequestContent($content, $message);\n            $request->request->set('delta', $decodedContent['delta']);\n        }\n\n        if (!$request->request->has('delta')) {\n            throw new BadRequestHttpException($message);\n        }\n    }\n\n    /**\n     * @param $content\n     * @param $message\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidRequestContent($content, $message)\n    {\n        $decodedContent = $this->guardAgainstInvalidJsonBody($content);\n\n        if (!array_key_exists('delta', $decodedContent)) {\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        return $decodedContent;\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidBulkEditionRequest(Request $request)\n    {\n        if (strlen($request->getContent()) == 0) {\n            $message = 'The request body should contain a JSON-encoded array of product identifiers and deltas';\n\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        $this->guardAgainstMissingParametersInBulkEditionRequest($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstMissingParametersInBulkEditionRequest(Request $request)\n    {\n        $decodedContent = $this->guardAgainstInvalidJsonBody($request->getContent());\n\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a product id (\"product_id\"), a quantity delta (\"delta\"). ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($decodedContent, function ($item, $index) use ($message) {\n            if (!array_key_exists('product_id', $item) || !array_key_exists('delta', $item) || $item['delta'] == 0) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse PrestaShopBundle\\Api\\QueryStockMovementParamsCollection;\nuse PrestaShopBundle\\Entity\\Repository\\StockMovementRepository;\nuse PrestaShopBundle\\Exception\\InvalidPaginationParamsException;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n\nclass StockMovementController extends ApiController\n{\n    /**\n     * @var StockMovementRepository\n     */\n    public $stockMovementRepository;\n\n    /**\n     * @var QueryStockMovementParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n        } catch (InvalidPaginationParamsException $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n\n        $stockMovement = $this->stockMovementRepository->getData($queryParamsCollection);\n        $totalPages = $this->stockMovementRepository->countPages($queryParamsCollection);\n\n        return $this->jsonResponse($stockMovement, $request, $queryParamsCollection, 200, array('Total-Pages' => $totalPages));\n    }\n\n    /**\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsEmployeesAction(Request $request)\n    {\n        return $this->jsonResponse($this->stockMovementRepository->getEmployees(), $request);\n    }\n\n    /**\n     * @AdminSecurity(\"is_granted(['read'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listMovementsTypesAction(Request $request)\n    {\n        $grouped = (bool) $request->get('grouped');\n\n        return $this->jsonResponse($this->stockMovementRepository->getTypes($grouped), $request);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Api;\n\nuse Exception;\nuse PrestaShopBundle\\Api\\QueryTranslationParamsCollection;\nuse PrestaShopBundle\\Exception\\InvalidLanguageException;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse PrestaShopBundle\\Service\\TranslationService;\nuse PrestaShopBundle\\Translation\\View\\TreeBuilder;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse PrestaShopBundle\\Translation\\Exception\\UnsupportedLocaleException;\n\nclass TranslationController extends ApiController\n{\n    /**\n     * @var QueryTranslationParamsCollection\n     */\n    public $queryParams;\n\n    /**\n     * @var TranslationService\n     */\n    public $translationService;\n\n    /**\n     * Show translations for 1 domain & 1 locale given & 1 theme given (optional).\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listDomainTranslationAction(Request $request)\n    {\n        try {\n            $queryParamsCollection = $this->queryParams->fromRequest($request);\n            $queryParams = $queryParamsCollection->getQueryParams();\n\n            /** @var TranslationService $translationService */\n            $translationService = $this->container->get('prestashop.service.translation');\n\n            $locale = $request->attributes->get('locale');\n            $domain = $request->attributes->get('domain');\n            $theme = $request->attributes->get('theme');\n            $module = $request->query->get('module');\n            $search = $request->query->get('search');\n\n            try {\n                $this->translationService->findLanguageByLocale($locale);\n            }\n            catch (InvalidLanguageException $e) {\n                // If the locale is invalid, no need to call the translation provider.\n                throw UnsupportedLocaleException::invalidLocale($locale);\n            }\n\n            $catalog = $translationService->listDomainTranslation($locale, $domain, $theme, $search, $module);\n            $info = array(\n                'Total-Pages' => ceil(count($catalog['data']) / $queryParams['page_size']),\n            );\n\n            $catalog['info'] = array_merge(\n                $catalog['info'],\n                [\n                    'locale' => $locale,\n                    'domain' => $domain,\n                    'theme' => $theme,\n                    'total_translations' => count($catalog['data']),\n                    'total_missing_translations' => 0,\n                ]\n            );\n\n            foreach ($catalog['data'] as $message) {\n                if (empty($message['xliff']) && empty($message['database'])) {\n                    ++$catalog['info']['total_missing_translations'];\n                }\n            }\n\n            $catalog['data'] = array_slice(\n                $catalog['data'],\n                ($queryParams['page_index'] - 1) * $queryParams['page_size'],\n                $queryParams['page_size']\n            );\n\n            return $this->jsonResponse($catalog, $request, $queryParamsCollection, 200, $info);\n        } catch (Exception $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n    }\n\n    /**\n     * Show tree for translation page with some params.\n     *\n     * @AdminSecurity(\"is_granted('read', request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listTreeAction(Request $request)\n    {\n        try {\n            // params possibles:\n            // lang : en, fr, etc.\n            // type : themes, modules, mails, back, others\n            // selected : classic, starterTheme, module name, subject (for email).\n\n            $lang = $request->attributes->get('lang');\n            $type = $request->attributes->get('type');\n            $selected = $request->attributes->get('selected');\n\n            $search = $request->query->get('search');\n\n            if (in_array($type, array('modules', 'themes')) && empty($selected)) {\n                throw new Exception('This \\'selected\\' param is not valid.');\n            }\n\n            switch ($type) {\n                case 'themes':\n                    $tree = $this->getNormalTree($lang, $type, $selected, $search);\n                    break;\n\n                case 'modules':\n                    $tree = $this->getModulesTree($lang, $selected, $search);\n                    break;\n\n                case 'mails':\n                    // when emails body will be implemented, it should be a different type\n                    // because domain routes only support \"type\" & \"selected/theme\" as parameters\n                    $tree = $this->getMailsSubjectTree($lang, $search);\n                    break;\n\n                default:\n                    $tree = $this->getNormalTree($lang, $type, null, $search);\n                    break;\n            }\n\n            return $this->jsonResponse($tree, $request);\n        } catch (Exception $exception) {\n            return $this->handleException(new BadRequestHttpException($exception->getMessage(), $exception));\n        }\n    }\n\n    /**\n     * Route to edit translation.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function translationEditAction(Request $request)\n    {\n        try {\n            $decodedContent = $this->guardAgainstInvalidTranslationBulkRequest($request);\n\n            $translations = $decodedContent['translations'];\n            $this->guardAgainstInvalidTranslationEditRequest($translations);\n\n            $translationService = $this->container->get('prestashop.service.translation');\n            $response = [];\n            foreach ($translations as $translation) {\n                if (empty($translation['theme'])) {\n                    $translation['theme'] = null;\n                }\n\n                try {\n                    $lang = $translationService->findLanguageByLocale($translation['locale']);\n                } catch (Exception $exception) {\n                    throw new BadRequestHttpException($exception->getMessage());\n                }\n\n                $response[$translation['default']] = $translationService->saveTranslationMessage(\n                    $lang,\n                    $translation['domain'],\n                    $translation['default'],\n                    $translation['edited'],\n                    $translation['theme']\n                );\n            }\n\n            $this->clearCache();\n\n            return new JsonResponse($response, 200);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n    }\n\n    /**\n     * Route to reset translation.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], request.get('_legacy_controller'))\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function translationResetAction(Request $request)\n    {\n        try {\n            $decodedContent = $this->guardAgainstInvalidTranslationBulkRequest($request);\n\n            $translations = $decodedContent['translations'];\n            $this->guardAgainstInvalidTranslationResetRequest($translations);\n\n            $translationService = $this->container->get('prestashop.service.translation');\n            $response = [];\n\n            foreach ($translations as $translation) {\n                if (!array_key_exists('theme', $translation)) {\n                    $translation['theme'] = null;\n                }\n\n                try {\n                    $lang = $translationService->findLanguageByLocale($translation['locale']);\n                } catch (Exception $exception) {\n                    throw new BadRequestHttpException($exception->getMessage());\n                }\n\n                $response[$translation['default']] = $translationService->resetTranslationMessage(\n                    $lang->getId(),\n                    $translation['domain'],\n                    $translation['default'],\n                    $translation['theme']\n                );\n            }\n\n            $this->clearCache();\n\n            return new JsonResponse($response, 200);\n        } catch (BadRequestHttpException $exception) {\n            return $this->handleException($exception);\n        }\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    private function guardAgainstInvalidTranslationBulkRequest(Request $request)\n    {\n        $content = $request->getContent();\n\n        $decodedContent = $this->guardAgainstInvalidJsonBody($content);\n\n        if (empty($decodedContent) ||\n            !array_key_exists('translations', $decodedContent) ||\n            !is_array($decodedContent['translations'])\n        ) {\n            $message = 'The request body should contain a JSON-encoded array of translations';\n\n            throw new BadRequestHttpException(sprintf('Invalid JSON content (%s)', $message));\n        }\n\n        return $decodedContent;\n    }\n\n    /**\n     * @param $content\n     */\n    private function guardAgainstInvalidTranslationEditRequest($content)\n    {\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a \"locale\", a \"domain\", a \"default\" and a \"edited\" values. ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($content, function ($item, $index) use ($message) {\n            if (!array_key_exists('locale', $item) ||\n                !array_key_exists('domain', $item) ||\n                !array_key_exists('default', $item) ||\n                !array_key_exists('edited', $item)\n            ) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n\n    /**\n     * @param $content\n     */\n    protected function guardAgainstInvalidTranslationResetRequest($content)\n    {\n        $message = 'Each item of JSON-encoded array in the request body should contain ' .\n            'a \"locale\", a \"domain\" and a \"default\" values. ' .\n            'The item of index #%d is invalid.';\n\n        array_walk($content, function ($item, $index) use ($message) {\n            if (!array_key_exists('locale', $item) ||\n                !array_key_exists('domain', $item) ||\n                !array_key_exists('default', $item)\n            ) {\n                throw new BadRequestHttpException(sprintf($message, $index));\n            }\n        });\n    }\n\n    /**\n     * @param $lang\n     * @param $type\n     * @param string $theme Selected theme name\n     * @param null $search\n     *\n     * @return array\n     */\n    private function getNormalTree($lang, $type, $theme, $search = null)\n    {\n        $treeBuilder = new TreeBuilder($this->translationService->langToLocale($lang), $theme);\n        $catalogue = $this->translationService->getTranslationsCatalogue($lang, $type, $theme, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search);\n    }\n\n    /**\n     * @param string $lang Two-letter iso code\n     * @param string $selectedModuleName Selected module name\n     * @param string|null $search\n     *\n     * @return array\n     */\n    private function getModulesTree($lang, $selectedModuleName, $search = null)\n    {\n        $theme = null;\n        $locale = $this->translationService->langToLocale($lang);\n\n        $moduleProvider = $this->container->get('prestashop.translation.external_module_provider');\n        $moduleProvider->setModuleName($selectedModuleName);\n\n        $treeBuilder = new TreeBuilder($locale, $theme);\n        $catalogue = $treeBuilder->makeTranslationArray($moduleProvider, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search, $selectedModuleName);\n    }\n\n    /**\n     * @param string $lang Two-letter iso code\n     * @param null $search\n     *\n     * @return array\n     */\n    private function getMailsSubjectTree($lang, $search = null)\n    {\n        $theme = null;\n\n        $treeBuilder = new TreeBuilder($this->translationService->langToLocale($lang), $theme);\n        $catalogue = $this->translationService->getTranslationsCatalogue($lang, 'mails', $theme, $search);\n\n        return $this->getCleanTree($treeBuilder, $catalogue, $theme, $search);\n    }\n\n    /**\n     * Make final tree.\n     *\n     * @param TreeBuilder $treeBuilder\n     * @param $catalogue\n     * @param string|null $theme\n     * @param string|null $search\n     * @param string|null $module\n     *\n     * @return array\n     */\n    private function getCleanTree(TreeBuilder $treeBuilder, $catalogue, $theme, $search = null, $module = null)\n    {\n        $translationsTree = $treeBuilder->makeTranslationsTree($catalogue);\n        $translationsTree = $treeBuilder->cleanTreeToApi($translationsTree, $this->container->get('router'), $theme, $search, $module);\n\n        return $translationsTree;\n    }\n}\n", "admin_attribute_get_all:\n    path:     /get-all\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:getAllAttributes\n        _format: json\n        _legacy_controller: AdminProducts\n\nadmin_attribute_generator:\n    path:     /generator\n    methods:  [POST]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:attributesGenerator\n        _legacy_controller: AdminProducts\n\nadmin_delete_attribute:\n    path:     /{idProduct}\n    methods:  [DELETE]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:deleteAttribute\n        _legacy_controller: AdminProducts\n\nadmin_delete_all_attributes:\n    path:     /delete-all/{idProduct}\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:deleteAllAttribute\n        _legacy_controller: AdminProducts\n        idProduct: 0\n    requirements:\n        idProduct: \\d+\n\nadmin_get_form_images_combination:\n    path:     /form-images/{idProduct}\n    methods:  [GET]\n    defaults:\n        _controller: PrestaShopBundle:Admin/Attribute:getFormImages\n        _format: json\n        _legacy_controller: AdminProducts\n        idProduct: 0\n    requirements:\n        idProduct: \\d+\n", "api_i18n_translations_list:\n    path: /{page}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.i18n.controller:listTranslationAction\n        _legacy_controller: AdminTranslations\n    requirements:\n        page: \\w+\n", "api_stock_list_movements:\n    path: /\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock_movement.controller:listMovementsAction\n        _legacy_controller: AdminStockManagement\n\napi_stock_product_list_movements:\n    path: /product/{productId}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock_movement.controller:listMovementsAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n\napi_stock_list_movements_employees:\n    path: /employees\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock_movement.controller:listMovementsEmployeesAction\n        _legacy_controller: AdminStockManagement\n\n\napi_stock_list_movements_types:\n    path: /types\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock_movement.controller:listMovementsTypesAction\n        _legacy_controller: AdminStockManagement\n", "api_stock_list_products:\n    path: /\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsAction\n        _legacy_controller: AdminStockManagement\n\napi_stock_list_products_export:\n    path: /export\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsExportAction\n        _legacy_controller: AdminStockManagement\n\napi_stock_list_product_combinations:\n    path: /{productId}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:listProductsAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n\napi_stock_edit_product:\n    path: /product/{productId}\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:editProductAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n\napi_stock_edit_product_combination:\n    path: /product/{productId}/combination/{combinationId}\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:editProductAction\n        _legacy_controller: AdminStockManagement\n    requirements:\n        productId: \\d+\n        combinationId: \\d+\n\napi_stock_bulk_edit_products:\n    path: /products\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.stock.controller:bulkEditProductsAction\n        _legacy_controller: AdminStockManagement\n", "api_translation_domains_tree:\n    path: /tree/{lang}/{type}/{selected}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:listTreeAction\n        _legacy_controller: AdminTranslations\n        selected: null\n\napi_translation_domain_catalog:\n    path: /{locale}/{domain}/{theme}\n    methods: [GET]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:listDomainTranslationAction\n        _legacy_controller: AdminTranslations\n        theme: null\n        module: null\n\napi_translation_value_edit:\n    path: /edit\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:translationEditAction\n        _legacy_controller: AdminTranslations\n\napi_translation_value_reset:\n    path: /reset\n    methods: [POST]\n    defaults:\n        _controller: prestashop.core.api.translation.controller:translationResetAction\n        _legacy_controller: AdminTranslations\n"], "filenames": ["controllers/admin/AdminCartRulesController.php", "controllers/admin/AdminStatsController.php", "controllers/admin/AdminStatusesController.php", "src/PrestaShopBundle/Controller/Admin/AttributeController.php", "src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/ImportController.php", "src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/PerformanceController.php", "src/PrestaShopBundle/Controller/Admin/Configure/ShopParameters/CustomerPreferencesController.php", "src/PrestaShopBundle/Controller/Admin/Improve/International/GeolocationController.php", "src/PrestaShopBundle/Controller/Admin/Improve/International/LocalizationController.php", "src/PrestaShopBundle/Controller/Admin/ProductController.php", "src/PrestaShopBundle/Controller/Api/I18nController.php", "src/PrestaShopBundle/Controller/Api/StockController.php", "src/PrestaShopBundle/Controller/Api/StockMovementController.php", "src/PrestaShopBundle/Controller/Api/TranslationController.php", "src/PrestaShopBundle/Resources/config/routing/admin/sell/catalog/products/attributes.yml", "src/PrestaShopBundle/Resources/config/routing/api/i18n.yml", "src/PrestaShopBundle/Resources/config/routing/api/stock_movements.yml", "src/PrestaShopBundle/Resources/config/routing/api/stocks.yml", "src/PrestaShopBundle/Resources/config/routing/api/translations.yml"], "buggy_code_start_loc": [58, 631, 542, 42, 259, 83, 69, 71, 78, 264, 29, 36, 31, 31, 6, 5, 2, 5, 5], "buggy_code_end_loc": [58, 1073, 607, 281, 260, 84, 70, 72, 79, 264, 37, 152, 77, 213, 34, 5, 27, 17, 26], "fixing_code_start_loc": [59, 632, 543, 42, 259, 83, 69, 71, 78, 265, 30, 37, 32, 32, 7, 6, 2, 6, 6], "fixing_code_end_loc": [63, 1086, 632, 281, 260, 84, 70, 72, 79, 269, 41, 162, 85, 223, 40, 7, 31, 21, 31], "type": "CWE-863", "message": "In PrestaShop between versions 1.5.0.0 and 1.7.6.5, there are improper access control since the the version 1.5.0.0 for legacy controllers. - admin-dev/index.php/configure/shop/customer-preferences/ - admin-dev/index.php/improve/international/translations/ - admin-dev/index.php/improve/international/geolocation/ - admin-dev/index.php/improve/international/localization - admin-dev/index.php/configure/advanced/performance - admin-dev/index.php/sell/orders/delivery-slips/ - admin-dev/index.php?controller=AdminStatuses The problem is fixed in 1.7.6.5", "other": {"cve": {"id": "CVE-2020-5279", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:15.960", "lastModified": "2020-04-29T14:21:11.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.5.0.0 and 1.7.6.5, there are improper access control since the the version 1.5.0.0 for legacy controllers. - admin-dev/index.php/configure/shop/customer-preferences/ - admin-dev/index.php/improve/international/translations/ - admin-dev/index.php/improve/international/geolocation/ - admin-dev/index.php/improve/international/localization - admin-dev/index.php/configure/advanced/performance - admin-dev/index.php/sell/orders/delivery-slips/ - admin-dev/index.php?controller=AdminStatuses The problem is fixed in 1.7.6.5"}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.5.0.0 y 1.7.6.5, hay un control de acceso inapropiado desde la versi\u00f3n 1.5.0.0 para controladores heredados. - admin-dev/index.php/configure/shop/customer-preferences/ - admin-dev/index.php/improve/international/translations/ - admin-dev/index.php/improve/international/geolocation/ - admin-dev/index.php/improve/international/localization - admin-dev/index.php/configure/advanced/performance - admin-dev/index.php/sell/orders/delivery-slips/ - admin-dev/index.php?controller=AdminStatuses. El problema es corregido en la versi\u00f3n 1.7.6.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.5.0.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "EE5CCAB9-DD23-4266-AE2A-284A4376F86C"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/4444fb85761667a2206874a3112ccc77f657d76a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-74vp-ww64-w2gm", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/4444fb85761667a2206874a3112ccc77f657d76a"}}