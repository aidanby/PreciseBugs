{"buggy_code": ["//= require_self\n//= require ./common_validations\n//= require_tree ./models\n//= require ./controllers/apis/nested_form_controller\n//= require ./controllers/apis/sortable_controller\n//= require_tree ./components\n//= require_tree ./controllers\n//= require_tree ./views\n//= require_tree ./helpers\n//= require_tree ./templates\n//= require ./router\n//= require_tree ./routes\n\n//Ember.LOG_BINDINGS = true\n\n// Set Bootbox defaults.\nbootbox.animate(false);\n\n// PNotify Defaults.\n_.merge(PNotify.prototype.options, {\n  styling: 'bootstrap2',\n  width: '400px',\n  icon: false,\n  animate_speed: 'fast',\n  history: {\n    history: false\n  },\n  buttons: {\n    sticker: false\n  }\n});\n\n(function() {\n  var versionParts = Ember.VERSION.split('.');\n  var major = parseInt(versionParts[0], 10);\n  var minor = parseInt(versionParts[1], 10);\n  var patch = parseInt(versionParts[2], 10);\n  if(major > 1 || (major === 1 && (minor > 1 || patch > 2))) {\n    Ember.Logger.warn('WARNING: New Ember version detected. URL hash monkey patch possibly no longer needed or broken. Check for compatibility.');\n  }\n\n  var get = Ember.get, set = Ember.set;\n\n  // Fix URL hash parsing across browsers. Because we're putting query\n  // parameters in the URL, we expect special characters which escape\n  // differently across browsers with location.hash. So this is a monkey patch\n  // to use location.href instead.\n  // https://github.com/emberjs/ember.js/issues/3000\n  // https://github.com/emberjs/ember.js/issues/3263\n  //\n  // All of this should be revisited once query-params lands, since this will\n  // probably clean this up: https://github.com/emberjs/ember.js/pull/3182\n  Ember.HashLocation.reopen({\n    getURL: function() {\n      var href = get(this, 'location').href;\n\n      var hashIndex = href.indexOf('#');\n      if (hashIndex === -1) {\n        return '';\n      } else {\n        return href.substr(hashIndex + 1);\n      }\n    },\n\n    onUpdateURL: function(callback) {\n      var self = this;\n      var guid = Ember.guidFor(this);\n\n      Ember.$(window).on('hashchange.ember-location-'+guid, function() {\n        Ember.run(function() {\n          var path = self.getURL();\n          if (get(self, 'lastSetURL') === path) { return; }\n\n          set(self, 'lastSetURL', null);\n\n          callback(path);\n        });\n      });\n    },\n  });\n})();\n\nwindow.Admin = Ember.Application.create({\n  LOG_TRANSITIONS: true,\n  LOG_TRANSITIONS_INTERNAL: true,\n\n  rootElement: '#content'\n});\n\nfunction eachTranslatedAttribute(object, fn) {\n  var isTranslatedAttribute = /(.+)Translation$/,\n      isTranslatedAttributeMatch;\n\n  for (var key in object) {\n    isTranslatedAttributeMatch = key.match(isTranslatedAttribute);\n    if (isTranslatedAttributeMatch) {\n      var translation = (!object[key]) ? null : polyglot.t(object[key]);\n      fn.call(object, isTranslatedAttributeMatch[1], translation);\n    }\n  }\n}\n\n// Override existing Ember.EasyForm.processOptions to use our polyglot\n// translations instead of Ember.i18n for the special *Translation fields.\n//\n// We could also potentially use subexpressions to call polyglot directly in\n// the templates, but at least as of Ember 1.7, there are bugs with multiple\n// subexpressions: https://github.com/wycats/handlebars.js/issues/748\n// Perhaps revisit when we upgrade Ember.\nEmber.EasyForm.processOptions = function(property, options) {\n  if(options) {\n    if(polyglot) {\n      eachTranslatedAttribute(options.hash, function(attribute, translation) {\n        options.hash[attribute] = translation;\n        delete options.hash[attribute + 'Translation'];\n      });\n    }\n    options.hash.property = property;\n  } else {\n    options = property;\n  }\n\n  return options;\n};\n\nEmber.EasyForm.Tooltip = Ember.EasyForm.BaseView.extend({\n  tagName: 'a',\n  attributeBindings: ['title', 'rel', 'data-tooltip-class'],\n  template: Ember.Handlebars.compile('<i class=\"fa fa-question-circle\"></i>'),\n  rel: 'tooltip',\n});\n\nEmber.Handlebars.registerBoundHelper('formatDate', function(date, format) {\n  if(!format || !_.isString(format)) {\n    format = 'YYYY-MM-DD HH:mm Z';\n  }\n\n  if(date) {\n    return moment(date).format(format);\n  } else {\n    return '';\n  }\n});\n\nEmber.Handlebars.helper('formatNumber', function(number) {\n  return numeral(number).format('0,0');\n});\n\nEmber.Handlebars.helper('inflect', function(word, number) {\n  return inflection.inflect(word, number);\n});\n\n// i18n helper via polyglot library\nEmber.Handlebars.registerHelper('t', function(property, options) {\n  return polyglot.t(property, options.hash);\n});\n\nEmber.Handlebars.registerHelper('tooltip-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.viewName = 'tooltip-field-'+options.data.view.elementId;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Tooltip, options);\n});\n\n// Use a custom template for Easy Form. This adds a tooltip and wraps that in\n// the control-label div with the label.\nEmber.TEMPLATES['easyForm/wrapped_input'] = Ember.Handlebars.compile('<div class=\"control-label\">{{label-field propertyBinding=\"view.property\" textBinding=\"view.label\"}}{{#if view.tooltip}}{{tooltip-field titleBinding=\"view.tooltip\" data-tooltip-classBinding=\"view.tooltipClass\"}}{{/if}}</div><div class=\"{{unbound view.controlsWrapperClass}}\">{{partial \"easyForm/inputControls\"}}</div>');\n\nEmber.EasyForm.Config.registerInputType('ace', Ember.EasyForm.TextArea.extend({\n  attributeBindings: ['data-ace-mode'],\n\n  didInsertElement: function() {\n    this._super();\n\n    var aceId = this.elementId + '_ace';\n    this.$().hide();\n    this.$().before('<div id=\"' + aceId + '\" data-form-property=\"' + this.property + '\" class=\"span12\"></div>');\n\n    this.editor = ace.edit(aceId);\n\n    var editor = this.editor;\n    var session = this.editor.getSession();\n    var element = this.$();\n\n    editor.setTheme('ace/theme/textmate');\n    editor.setShowPrintMargin(false);\n    editor.setHighlightActiveLine(false);\n    session.setUseWorker(false);\n    session.setTabSize(2);\n    session.setMode('ace/mode/' + this.$().data('ace-mode'));\n    session.setValue(this.$().val());\n\n    session.on('change', function() {\n      element.val(session.getValue());\n      element.trigger('change');\n    });\n  },\n}));\n\nEmber.EasyForm.Config.registerWrapper('default', {\n  formClass: '',\n  fieldErrorClass: 'error',\n  errorClass: 'help-block',\n  hintClass: 'help-block',\n  inputClass: 'control-group',\n  wrapControls: true,\n  controlsWrapperClass: 'controls'\n});\n\nAdmin.APIUmbrellaRESTAdapter = Ember.RESTAdapter.extend({\n  ajaxSettings: function(url, method) {\n    return {\n      url: url,\n      type: method,\n      dataType: 'json',\n      headers: {\n        'X-Api-Key': webAdminAjaxApiKey\n      }\n    };\n  }\n});\n\n$.ajaxPrefilter(function(options) {\n  options.headers = options.headers || {};\n  options.headers['X-Api-Key'] = webAdminAjaxApiKey;\n});\n\n// DataTables plugin to programmatically show the processing indidicator.\n// https://datatables.net/plug-ins/api#fnProcessingIndicator\njQuery.fn.dataTableExt.oApi.fnProcessingIndicator = function ( oSettings, onoff )\n{\n  if( typeof(onoff) === 'undefined' )\n  {\n    onoff=true;\n  }\n  this.oApi._fnProcessingDisplay( oSettings, onoff );\n};\n\n\n// Defaults for DataTables.\n_.merge($.fn.DataTable.defaults, {\n  // Don't show the DataTables processing message. We'll handle the processing\n  // message logic in initComplete with blockui.\n  processing: false,\n\n  // Enable global searching.\n  searching: true,\n\n  // Re-arrange how the table and surrounding fields (pagination, search, etc)\n  // are laid out.\n  dom: 'rft<\"row-fluid\"<\"span3 table-info\"i><\"span6 table-pagination\"p><\"span3 table-length\"l>>',\n\n  language: {\n    // Don't have an explicit label for the search field. Use a placeholder\n    // instead.\n    search: '',\n    searchPlaceholder: 'Search...',\n  },\n\n  preDrawCallback: function() {\n    if(!this.customProcessingCallbackSet) {\n      // Use blockui to provide a more obvious processing message the overlays\n      // the entire table (this helps for long tables, where a simple processing\n      // message might appear out of your current view).\n      //\n      // Set this early on during pre-draw so that the processing message shows\n      // up for the first load.\n      $(this).DataTable().on('processing', _.bind(function(event, settings, processing) {\n        if(processing) {\n          this.block({\n            message: '<i class=\"fa fa-spinner fa-spin fa-lg\"></i>',\n          });\n        } else {\n          this.unblock();\n        }\n      }, this));\n\n      this.customProcessingCallbackSet = true;\n    }\n  },\n});\n\nEmber.EasyForm.Input.reopen({\n  // Observe the \"showAllValidationErrors\" property and show all the inline\n  // input validations when this gets set to true. This allows us to show all\n  // the invalid fields on the page without actually visiting each input field\n  // (useful on form submits). This is a bit of a workaround since\n  // ember-easyForm doesn't currently support this:\n  // https://github.com/dockyard/ember-easyForm/issues/146\n  // https://github.com/dockyard/ember-easyForm/pull/143\n  showAllValidationErrorsOnModelChange: function() {\n    if(this.get('context.showAllValidationErrors') === true) {\n      this.set('hasFocusedOut', true);\n      this.set('canShowValidationError', true);\n    } else {\n      this.showValidationError();\n    }\n  }.observes('context.showAllValidationErrors'),\n});\n\nEmber.EasyForm.Form.reopen({\n  submit: function(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if(!this.get('context.model.validate')) {\n      this.get('controller').send(this.get('action'));\n    } else {\n      // Reset the error objects used for error-messages display before each\n      // submit, so the messages reflect the new validations.\n      this.set('context.model.clientErrors', {});\n      this.set('context.model.serverErrors', {});\n\n      this.get('context.model').validate().then(_.bind(function() {\n        this.get('controller').send(this.get('action'));\n      }, this)).catch(_.bind(function() {\n        // On validation failure, set the errors for error-messages display and\n        // scroll to the error messages display.\n        this.set('context.model.clientErrors', this.get('context.model.errors'));\n        $.scrollTo('#error_messages', { offset: -50, duration: 200 });\n\n        // Display all the inline errors for at least the top-level model\n        // (note, this doesn't currently propagate to embedded models/forms).\n        this.set('context.model.showAllValidationErrors', true);\n      }, this));\n    }\n  },\n});\n\n// A mixin that provides the default ajax save behavior for our forms.\nAdmin.Save = Ember.Mixin.create({\n  save: function(options) {\n    var button = $('#save_button');\n    button.button('loading');\n\n    // Force dirty to force save (ember-model's dirty tracking fails to\n    // account for changes in nested, non-association objects:\n    // http://git.io/sbS1mg This is mainly for ApiSettings's errorTemplates\n    // and errorDataYamlStrings, but we've seen enough funkiness elsewhere,\n    // it seems worth disabling for now).\n    this.set('model.isDirty', true);\n\n    this.get('model').save().then(_.bind(function() {\n      button.button('reset');\n      new PNotify({\n        type: 'success',\n        title: 'Saved',\n        text: (_.isFunction(options.message)) ? options.message(this.get('model')) : options.message,\n      });\n\n      this.transitionToRoute(options.transitionToRoute);\n    }, this), _.bind(function(response) {\n      // Set the errors from the server response on a \"serverErrors\" property\n      // for the error-messages component display.\n      try {\n        this.set('model.serverErrors', response.responseJSON.errors);\n      } catch(e) {\n        this.set('model.serverErrors', response.responseText);\n      }\n\n      button.button('reset');\n      $.scrollTo('#error_messages', { offset: -50, duration: 200 });\n    }, this));\n  },\n});\n", "Admin.AdminGroupsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/admin_groups.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/admin_groups/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'api_scope_display_names',\n          title: 'API Scopes',\n          render: function(names, type) {\n            if(type === 'display' && names && names !== '-') {\n              return names.join('<br>');\n            }\n\n            return names;\n          }\n        },\n        {\n          data: 'permission_display_names',\n          title: 'Access',\n          defaultContent: '-',\n          render: function(names, type) {\n            if(type === 'display' && names && names !== '-') {\n              return names.join('<br>');\n            }\n\n            return names;\n          }\n        }\n      ]\n    });\n  },\n});\n", "Admin.AdminsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/admins.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'username',\n          title: 'Username',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var link = '#/admins/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'email',\n          title: 'E-mail',\n          defaultContent: '-',\n        },\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n        },\n        {\n          data: 'group_names',\n          title: 'Groups',\n          render: function(names, type) {\n            if(type === 'display' && names && names !== '-') {\n              return names.join('<br>');\n            }\n\n            return names;\n          }\n        },\n        {\n          data: 'last_sign_in_at',\n          type: 'date',\n          title: 'Last Signed In',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Created',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n\n            return time;\n          },\n        }\n      ]\n    });\n  },\n});\n", "Admin.ApiScopesTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/api_scopes.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/api_scopes/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'host',\n          title: 'Host',\n          defaultContent: '-',\n        },\n        {\n          data: 'path_prefix',\n          title: 'Path Prefix',\n          defaultContent: '-',\n        }\n      ]\n    });\n  },\n});\n", "Admin.ApiUsersTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/users.json',\n      pageLength: 50,\n      order: [[4, 'desc']],\n      columns: [\n        {\n          data: 'email',\n          title: 'E-mail',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var link = '#/api_users/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'first_name',\n          title: 'First Name',\n          defaultContent: '-',\n        },\n        {\n          data: 'last_name',\n          title: 'Last Name',\n          defaultContent: '-',\n        },\n        {\n          data: 'use_description',\n          title: 'Purpose',\n          defaultContent: '-',\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Created',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'registration_source',\n          title: 'Registration Source',\n          defaultContent: '-',\n        },\n        {\n          data: 'api_key_preview',\n          title: 'API Key',\n          defaultContent: '-',\n          orderable: false,\n        },\n      ]\n    });\n  },\n});\n", "Admin.ApisTableView = Ember.View.extend({\n  tagName: 'table',\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  init: function() {\n    this._super();\n\n    // We're observing the controller, which is a computed property on views.\n    // Force fetching it so the observers fire:\n    // http://emberjs.com/guides/object-model/observers/#toc_unconsumed-computed-properties-do-not-trigger-observers\n    this.get('controller');\n  },\n\n  didInsertElement: function() {\n    this.set('table', this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/apis.json',\n      pageLength: 50,\n      rowCallback: function(row, data) {\n        $(row).data('id', data.id);\n        $(row).data('sort-order', data.sort_order);\n      },\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/apis/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'frontend_host',\n          title: 'Host',\n          defaultContent: '-',\n        },\n        {\n          data: 'frontend_prefixes',\n          title: 'Prefixes',\n          defaultContent: '-',\n        },\n        {\n          data: 'sort_order',\n          title: 'Matching Order',\n          defaultContent: '-',\n          width: 130,\n        },\n        {\n          data: null,\n          className: 'reorder-handle',\n          orderable: false,\n          render: function() {\n            return '<i class=\"fa fa-reorder\"></i>';\n          },\n        },\n      ]\n    }));\n\n    this.get('table')\n      .on('search', _.bind(function(event, settings) {\n        // Disable reordering if the user tries to filter the table by anything\n        // (otherwise, our reordering logic won't work, since it relies on the\n        // neighboring rows).\n        if(this.get('controller.reorderActive')) {\n          if(settings.oPreviousSearch && settings.oPreviousSearch.sSearch) {\n            this.set('controller.reorderActive', false);\n          }\n        }\n      }, this))\n      .on('order', _.bind(function(event, settings) {\n        // Disable reordering if the user tries to sort the table by anything\n        // other than the sort order (otherwise, our reordering logic won't\n        // work, since it relies on the neighboring rows).\n        if(this.get('controller.reorderActive')) {\n          if(settings.aaSorting && !_.isEqual(settings.aaSorting, [[3, 'asc']])) {\n            this.set('controller.reorderActive', false);\n          }\n        }\n      }, this));\n\n    this.$().find('tbody').sortable({\n      handle: '.reorder-handle',\n      placeholder: 'reorder-placeholder',\n      helper: function(event, ui) {\n        ui.children().each(function() {\n          $(this).width($(this).width());\n        });\n        return ui;\n      },\n      stop: _.bind(function(event, ui) {\n        var row = $(ui.item);\n        var currentOrder = parseInt(row.data('sort-order'), 10);\n        var previousRow = row.prev('tbody tr');\n        var moveTo = 1;\n        if(previousRow.length > 0) {\n          moveTo = parseInt($(previousRow[0]).data('sort-order'), 10);\n          if(moveTo < currentOrder) {\n            moveTo++;\n          }\n        } else {\n          var data = this.get('table').rows().data();\n          var sortOrders = _.map(_.compact(_.pluck(data, 'sort_order')), function(order) { return parseInt(order, 10); });\n          var minSortOrder = sortOrders.sort()[0];\n          if(minSortOrder && minSortOrder > 1) {\n            moveTo = minSortOrder - 1;\n          }\n        }\n\n        this.saveReorder(row.data('id'), moveTo);\n      }, this),\n    });\n  },\n\n  handleReorderChange: function() {\n    if(this.get('controller.reorderActive')) {\n      this.$().addClass('reorder-active');\n      this.get('table')\n        .order([[3, 'asc']])\n        .search('')\n        .draw();\n    } else {\n      this.$().removeClass('reorder-active');\n    }\n  }.observes('controller.reorderActive'),\n\n  saveReorder: function(id, moveTo) {\n    this.$().dataTable().fnProcessingIndicator(true);\n    $.ajax({\n      url: '/admin/apis/' + id + '/move_to.json',\n      type: 'PUT',\n      data: { move_to: moveTo },\n    }).done(_.bind(function() {\n      this.get('table').draw();\n    }, this)).fail(_.bind(function() {\n      bootbox.alert('An unexpected error occurred. Please try again.');\n      this.get('table').draw();\n    }, this));\n  },\n});\n", "Admin.LogsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      searching: false,\n      serverSide: true,\n      ajax: {\n        url: '/admin/stats/logs.json',\n        data: _.bind(function(data) {\n          var query = this.get('controller.query.params');\n          return _.extend({}, data, query);\n        }, this)\n      },\n      drawCallback: _.bind(function() {\n        this.$().find('td').truncate({\n          width: 400,\n          addtitle: true,\n          addclass: 'truncated'\n        });\n\n        this.$().find('.truncated').qtip({\n          style: {\n            classes: 'qtip-bootstrap qtip-forced-wide',\n          },\n          hide: {\n            fixed: true,\n            delay: 200\n          },\n          position: {\n            viewport: false,\n            my: 'bottom center',\n            at: 'top center'\n          }\n        });\n      }, this),\n      order: [[0, 'desc']],\n      columns: [\n        {\n          data: 'request_at',\n          type: 'date',\n          title: 'Time',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'request_method',\n          title: 'Method',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_host',\n          title: 'Host',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_url',\n          title: 'URL',\n          defaultContent: '-',\n        },\n        {\n          data: 'user_email',\n          title: 'User',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var params = _.clone(this.get('controller.query.params'));\n              params.search = _.compact([params.search, 'user_id:\"' + data.user_id + '\"']).join(' AND ');\n              var link = '#/stats/logs/' + $.param(params);\n\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'request_ip',\n          title: 'IP Address',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_ip_country',\n          title: 'Country',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_ip_region',\n          title: 'State',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_ip_city',\n          title: 'City',\n          defaultContent: '-',\n        },\n        {\n          data: 'response_status',\n          title: 'Status',\n          defaultContent: '-',\n        },\n        {\n          data: 'response_time',\n          title: 'Response Time',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return time + ' ms';\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'response_content_type',\n          title: 'Content Type',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_accept_encoding',\n          title: 'Accept Encoding',\n          defaultContent: '-',\n        },\n        {\n          data: 'request_user_agent',\n          title: 'User Agent',\n          defaultContent: '-',\n        },\n      ]\n    });\n  },\n\n  refreshData: function() {\n    this.$().DataTable().draw();\n  }.observes('controller.query.params.query', 'controller.query.params.search', 'controller.query.params.start_at', 'controller.query.params.end_at'),\n});\n", "Admin.StatsUsersTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      searching: false,\n      serverSide: true,\n      ajax: {\n        url: '/admin/stats/users.json',\n        data: _.bind(function(data) {\n          var query = this.get('controller.query.params');\n          return _.extend({}, data, query);\n        }, this)\n      },\n      order: [[4, 'desc']],\n      columns: [\n        {\n          data: 'email',\n          title: 'Email',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var params = _.clone(this.get('controller.query.params'));\n              params.search = 'user_id:\"' + data.id + '\"';\n              var link = '#/stats/logs/' + $.param(params);\n\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'first_name',\n          title: 'First Name',\n          defaultContent: '-',\n        },\n        {\n          data: 'last_name',\n          title: 'Last Name',\n          defaultContent: '-',\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Signed Up',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n          },\n        },\n        {\n          data: 'hits',\n          title: 'Hits',\n          defaultContent: '-',\n          render: function(number, type) {\n            if(type === 'display' && number && number !== '-') {\n              return numeral(number).format('0,0');\n            }\n\n            return number;\n          },\n        },\n        {\n          data: 'last_request_at',\n          type: 'date',\n          title: 'Last Request',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return moment(time).format('YYYY-MM-DD HH:mm:ss');\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'use_description',\n          title: 'Use Description',\n          defaultContent: '-',\n        },\n      ]\n    });\n  },\n\n  refreshData: function() {\n    this.$().DataTable().draw();\n  }.observes('controller.query.params.query', 'controller.query.params.search', 'controller.query.params.start_at', 'controller.query.params.end_at'),\n});\n", "require \"api_umbrella/elasticsearch_proxy\"\n\nApiUmbrella::Application.routes.draw do\n  # Mount the API at both /api/ and /api-umbrella/ for backwards compatibility.\n  %w(api api-umbrella).each do |path|\n    namespace(:api, :path => path) do\n      resources :api_users, :path => \"api-users\" do\n        member do\n          get \"validate\"\n        end\n      end\n\n      resources :health_checks, :path => \"health-checks\", :only => [] do\n        collection do\n          get :ip\n          get :logging\n        end\n      end\n\n      # /v0 is for unstable APIs we may be experimenting with internally.\n      namespace :v0 do\n        resources :analytics do\n          collection do\n            get \"summary\"\n          end\n        end\n      end\n\n      namespace :v1 do\n        resources :admin_groups\n        resources :admin_permissions, :only => [:index]\n        resources :user_roles, :only => [:index]\n        resources :admins\n        resources :api_scopes\n        resources :apis\n        resources :users\n        resources :website_backends\n        resource :contact, :only => [:create]\n\n        resources :analytics do\n          collection do\n            get \"drilldown\"\n          end\n        end\n\n        namespace :config do\n          get :pending_changes\n          post :publish\n        end\n      end\n    end\n  end\n\n  devise_for :admins, :controllers => { :omniauth_callbacks => \"admin/admins/omniauth_callbacks\" }\n\n  devise_scope :admin do\n    get \"/admin/login\" => \"admin/sessions#new\", :as => :new_admin_session\n    get \"/admin/logout\" => \"admin/sessions#destroy\", :as => :destroy_admin_session\n  end\n\n  match \"/admin\" => \"admin/base#empty\"\n\n  namespace :admin do\n    resources :apis, :only => [] do\n      member do\n        put \"move_to\"\n      end\n    end\n\n    resources :stats, :only => [:index] do\n      collection do\n        get \"search\"\n        get \"logs\"\n        get \"users\"\n        get \"map\"\n      end\n    end\n\n    namespace :config do\n      get \"publish\", :action => \"show\"\n      post \"publish\", :action => \"create\"\n\n      get \"import_export\"\n      get \"export\"\n      post \"import_preview\"\n      post \"import\"\n    end\n\n    resources :api_users do\n      get \"page/:page\", :action => :index, :on => :collection\n    end\n  end\n\n  authenticate :admin, lambda { |admin| admin.superuser? } do\n    mount ApiUmbrella::ElasticsearchProxy.new, :at => ApiUmbrella::ElasticsearchProxy::PREFIX\n  end\nend\n", "FactoryGirl.define do\n  factory :api_user do\n    first_name \"Ambrose\"\n    last_name \"Burnside\"\n    sequence(:email) { |n| \"ambrose.burnside#{n}@example.com\" }\n    if(ApiUser.fields.include?(\"website\"))\n      website \"http://example.com/\"\n    end\n    terms_and_conditions \"1\"\n\n    factory :invalid_api_user do\n      terms_and_conditions \"\"\n    end\n  end\nend\n", "require \"elasticsearch/persistence/model\"\n\nclass LogItem\n  include Elasticsearch::Persistence::Model\n\n  index_name \"api-umbrella-logs-2015-01\"\n\n  attribute :api_key, String\n  attribute :backend_response_time, Float\n  attribute :internal_gatekeeper_time, Float\n  attribute :internal_response_time, Float\n  attribute :proxy_overhead, Float\n  attribute :request_accept, String\n  attribute :request_at, Time\n  attribute :request_hierarchy, Array\n  attribute :request_host, String\n  attribute :request_ip, String\n  attribute :request_method, String\n  attribute :request_path, String\n  attribute :request_query, Hash\n  attribute :request_scheme, String\n  attribute :request_size, Integer\n  attribute :request_url, String\n  attribute :request_user_agent, String\n  attribute :request_user_agent_family, String\n  attribute :request_user_agent_type, String\n  attribute :response_age, Integer\n  attribute :response_content_length, Integer\n  attribute :response_content_type, String\n  attribute :response_server, String\n  attribute :response_size, Integer\n  attribute :response_status, Integer\n  attribute :response_time, Float\n  attribute :user_email, String\n  attribute :user_id, String\n  attribute :user_registration_source, String\n\n  def save!\n    self.save || raise(\"Failed to save log\")\n  end\nend\n\nFactoryGirl.define do\n  factory :log_item do\n    api_key \"UfhkQUBgWQbJ0ZVqnJ4TvA7quGCZHYTFCXwSfOTQ\"\n    backend_response_time 0\n    internal_gatekeeper_time 1.4\n    internal_response_time 1.8\n    proxy_overhead 3\n    request_accept \"*/*\"\n    request_at { Time.now }\n    request_hierarchy [\"0/127.0.0.1/\", \"1/127.0.0.1/hello\"]\n    request_host \"127.0.0.1\"\n    request_ip \"127.0.0.1\"\n    request_method \"GET\"\n    request_path \"/hello/\"\n    request_query({ \"foo\" => \"bar\" })\n    request_scheme \"http\"\n    request_size 140\n    request_url \"http://127.0.0.1/hello/?foo=bar\"\n    request_user_agent \"ApacheBench/2.3\"\n    request_user_agent_family \"AB (Apache Bench)\"\n    request_user_agent_type \"Other\"\n    response_age 0\n    response_content_length 14\n    response_content_type \"text/plain\"\n    response_server \"nginx\"\n    response_size 243\n    response_status 200\n    response_time 3\n    user_email \"test@example.com\"\n    user_id \"4199b260-ae76-463f-8395-d30de09c1540\"\n    user_registration_source \"web_admin\"\n  end\nend\n", "require 'spec_helper'\n\ndescribe \"api users form\", :js => true do\n  login_admin\n\n  describe \"api key in the save notification\" do\n    it \"shows the api key when creating a new account\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.last_name.should eql(\"Doe\")\n      page.should have_content(user.api_key)\n    end\n\n    it \"shows the api key when editing a recently created account\" do\n      user = FactoryGirl.create(:api_user, :created_by => @current_admin.id)\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      fill_in \"Last Name\", :with => \"Updated\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.last_name.should eql(\"Updated\")\n      page.should have_content(user.api_key)\n    end\n\n    it \"hides the api key when editing an old account\" do\n      user = FactoryGirl.create(:api_user, :created_by => @current_admin.id, :created_at => Time.now - 15.minutes)\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      fill_in \"Last Name\", :with => \"Updated2\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.last_name.should eql(\"Updated2\")\n      page.should_not have_content(user.api_key)\n    end\n  end\n\n  describe \"allowed ips input\" do\n    it \"saves an empty input as nil\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_ips.should eql(nil)\n    end\n\n    it \"saves multiple lines (omitting blank lines) as an array\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      fill_in \"Restrict Access to IPs\", :with => \"10.0.0.0/8\\n\\n\\n\\n127.0.0.1\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_ips.should eql([\"10.0.0.0/8\", \"127.0.0.1\"])\n    end\n\n    it \"displays an existing array as multiple lines\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_ips => [\"10.0.0.0/24\", \"10.2.2.2\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to IPs\").value.should eql(\"10.0.0.0/24\\n10.2.2.2\")\n    end\n\n    it \"nullifies an existing array when an empty input is saved\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_ips => [\"10.0.0.0/24\", \"10.2.2.2\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to IPs\").value.should eql(\"10.0.0.0/24\\n10.2.2.2\")\n      fill_in \"Restrict Access to IPs\", :with => \"\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.settings.allowed_ips.should eql(nil)\n    end\n  end\n\n  describe \"allowed referers input\" do\n    it \"saves an empty input as nil\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_referers.should eql(nil)\n    end\n\n    it \"saves multiple lines (omitting blank lines) as an array\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      fill_in \"Restrict Access to HTTP Referers\", :with => \"*.example.com/*\\n\\n\\n\\nhttp://google.com/*\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_referers.should eql([\"*.example.com/*\", \"http://google.com/*\"])\n    end\n\n    it \"displays an existing array as multiple lines\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_referers => [\"*.example.com/*\", \"http://google.com/*\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to HTTP Referers\").value.should eql(\"*.example.com/*\\nhttp://google.com/*\")\n    end\n\n    it \"nullifies an existing array when an empty input is saved\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_referers => [\"*.example.com/*\", \"http://google.com/*\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to HTTP Referers\").value.should eql(\"*.example.com/*\\nhttp://google.com/*\")\n      fill_in \"Restrict Access to HTTP Referers\", :with => \"\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.settings.allowed_referers.should eql(nil)\n    end\n  end\nend\n", "require \"spec_helper\"\nrequire \"addressable/uri\"\n\ndescribe \"apis\", :js => true do\n  login_admin\n\n  before(:each) do\n    begin\n      LogItem.gateway.client.indices.delete :index => LogItem.index_name\n    rescue Elasticsearch::Transport::Transport::Errors::NotFound # rubocop:disable Lint/HandleExceptions\n    end\n  end\n\n  describe \"csv download\" do\n    it \"updates the download link as the query parameters change\" do\n      FactoryGirl.create(:log_item, :request_at => Time.parse(\"2015-01-16T06:06:28.816Z\"))\n      LogItem.gateway.refresh_index!\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"\",\n        \"start_at\" => \"2015-01-12\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n      })\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-13&end_at=2015-01-18&interval=day\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"\",\n        \"start_at\" => \"2015-01-13\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n      })\n\n      find(\"a\", :text => /Filter Results/).click\n      find(\"a\", :text => /Switch to advanced filters/).click\n      fill_in \"search\", :with => \"response_status:200\"\n      click_button \"Filter\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"response_status:200\",\n        \"start_at\" => \"2015-01-13\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n        \"query\" => \"\",\n      })\n    end\n\n    it \"successfully downloads a csv\" do\n      FactoryGirl.create_list(:log_item, 10, :request_at => Time.parse(\"2015-01-16T06:06:28.816Z\"))\n      LogItem.gateway.refresh_index!\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day\"\n      click_link \"Download CSV\"\n      page.status_code.should eql(200)\n      page.response_headers[\"Content-Type\"].should eql(\"text/csv\")\n    end\n  end\nend\n"], "fixing_code": ["//= require_self\n//= require ./common_validations\n//= require_tree ./models\n//= require ./controllers/apis/nested_form_controller\n//= require ./controllers/apis/sortable_controller\n//= require_tree ./components\n//= require_tree ./controllers\n//= require_tree ./views\n//= require_tree ./helpers\n//= require_tree ./templates\n//= require ./router\n//= require_tree ./routes\n\n//Ember.LOG_BINDINGS = true\n\n// Set Bootbox defaults.\nbootbox.animate(false);\n\n// PNotify Defaults.\n_.merge(PNotify.prototype.options, {\n  styling: 'bootstrap2',\n  width: '400px',\n  icon: false,\n  animate_speed: 'fast',\n  history: {\n    history: false\n  },\n  buttons: {\n    sticker: false\n  }\n});\n\n(function() {\n  var versionParts = Ember.VERSION.split('.');\n  var major = parseInt(versionParts[0], 10);\n  var minor = parseInt(versionParts[1], 10);\n  var patch = parseInt(versionParts[2], 10);\n  if(major > 1 || (major === 1 && (minor > 1 || patch > 2))) {\n    Ember.Logger.warn('WARNING: New Ember version detected. URL hash monkey patch possibly no longer needed or broken. Check for compatibility.');\n  }\n\n  var get = Ember.get, set = Ember.set;\n\n  // Fix URL hash parsing across browsers. Because we're putting query\n  // parameters in the URL, we expect special characters which escape\n  // differently across browsers with location.hash. So this is a monkey patch\n  // to use location.href instead.\n  // https://github.com/emberjs/ember.js/issues/3000\n  // https://github.com/emberjs/ember.js/issues/3263\n  //\n  // All of this should be revisited once query-params lands, since this will\n  // probably clean this up: https://github.com/emberjs/ember.js/pull/3182\n  Ember.HashLocation.reopen({\n    getURL: function() {\n      var href = get(this, 'location').href;\n\n      var hashIndex = href.indexOf('#');\n      if (hashIndex === -1) {\n        return '';\n      } else {\n        return href.substr(hashIndex + 1);\n      }\n    },\n\n    onUpdateURL: function(callback) {\n      var self = this;\n      var guid = Ember.guidFor(this);\n\n      Ember.$(window).on('hashchange.ember-location-'+guid, function() {\n        Ember.run(function() {\n          var path = self.getURL();\n          if (get(self, 'lastSetURL') === path) { return; }\n\n          set(self, 'lastSetURL', null);\n\n          callback(path);\n        });\n      });\n    },\n  });\n})();\n\nwindow.Admin = Ember.Application.create({\n  LOG_TRANSITIONS: true,\n  LOG_TRANSITIONS_INTERNAL: true,\n\n  rootElement: '#content'\n});\n\nfunction eachTranslatedAttribute(object, fn) {\n  var isTranslatedAttribute = /(.+)Translation$/,\n      isTranslatedAttributeMatch;\n\n  for (var key in object) {\n    isTranslatedAttributeMatch = key.match(isTranslatedAttribute);\n    if (isTranslatedAttributeMatch) {\n      var translation = (!object[key]) ? null : polyglot.t(object[key]);\n      fn.call(object, isTranslatedAttributeMatch[1], translation);\n    }\n  }\n}\n\n// Override existing Ember.EasyForm.processOptions to use our polyglot\n// translations instead of Ember.i18n for the special *Translation fields.\n//\n// We could also potentially use subexpressions to call polyglot directly in\n// the templates, but at least as of Ember 1.7, there are bugs with multiple\n// subexpressions: https://github.com/wycats/handlebars.js/issues/748\n// Perhaps revisit when we upgrade Ember.\nEmber.EasyForm.processOptions = function(property, options) {\n  if(options) {\n    if(polyglot) {\n      eachTranslatedAttribute(options.hash, function(attribute, translation) {\n        options.hash[attribute] = translation;\n        delete options.hash[attribute + 'Translation'];\n      });\n    }\n    options.hash.property = property;\n  } else {\n    options = property;\n  }\n\n  return options;\n};\n\nEmber.EasyForm.Tooltip = Ember.EasyForm.BaseView.extend({\n  tagName: 'a',\n  attributeBindings: ['title', 'rel', 'data-tooltip-class'],\n  template: Ember.Handlebars.compile('<i class=\"fa fa-question-circle\"></i>'),\n  rel: 'tooltip',\n});\n\nEmber.Handlebars.registerBoundHelper('formatDate', function(date, format) {\n  if(!format || !_.isString(format)) {\n    format = 'YYYY-MM-DD HH:mm Z';\n  }\n\n  if(date) {\n    return moment(date).format(format);\n  } else {\n    return '';\n  }\n});\n\nEmber.Handlebars.helper('formatNumber', function(number) {\n  return numeral(number).format('0,0');\n});\n\nEmber.Handlebars.helper('inflect', function(word, number) {\n  return inflection.inflect(word, number);\n});\n\n// i18n helper via polyglot library\nEmber.Handlebars.registerHelper('t', function(property, options) {\n  return polyglot.t(property, options.hash);\n});\n\nEmber.Handlebars.registerHelper('tooltip-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.viewName = 'tooltip-field-'+options.data.view.elementId;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Tooltip, options);\n});\n\n// Use a custom template for Easy Form. This adds a tooltip and wraps that in\n// the control-label div with the label.\nEmber.TEMPLATES['easyForm/wrapped_input'] = Ember.Handlebars.compile('<div class=\"control-label\">{{label-field propertyBinding=\"view.property\" textBinding=\"view.label\"}}{{#if view.tooltip}}{{tooltip-field titleBinding=\"view.tooltip\" data-tooltip-classBinding=\"view.tooltipClass\"}}{{/if}}</div><div class=\"{{unbound view.controlsWrapperClass}}\">{{partial \"easyForm/inputControls\"}}</div>');\n\nEmber.EasyForm.Config.registerInputType('ace', Ember.EasyForm.TextArea.extend({\n  attributeBindings: ['data-ace-mode'],\n\n  didInsertElement: function() {\n    this._super();\n\n    var aceId = this.elementId + '_ace';\n    this.$().hide();\n    this.$().before('<div id=\"' + aceId + '\" data-form-property=\"' + this.property + '\" class=\"span12\"></div>');\n\n    this.editor = ace.edit(aceId);\n\n    var editor = this.editor;\n    var session = this.editor.getSession();\n    var element = this.$();\n\n    editor.setTheme('ace/theme/textmate');\n    editor.setShowPrintMargin(false);\n    editor.setHighlightActiveLine(false);\n    session.setUseWorker(false);\n    session.setTabSize(2);\n    session.setMode('ace/mode/' + this.$().data('ace-mode'));\n    session.setValue(this.$().val());\n\n    session.on('change', function() {\n      element.val(session.getValue());\n      element.trigger('change');\n    });\n  },\n}));\n\nEmber.EasyForm.Config.registerWrapper('default', {\n  formClass: '',\n  fieldErrorClass: 'error',\n  errorClass: 'help-block',\n  hintClass: 'help-block',\n  inputClass: 'control-group',\n  wrapControls: true,\n  controlsWrapperClass: 'controls'\n});\n\nAdmin.APIUmbrellaRESTAdapter = Ember.RESTAdapter.extend({\n  ajaxSettings: function(url, method) {\n    return {\n      url: url,\n      type: method,\n      dataType: 'json',\n      headers: {\n        'X-Api-Key': webAdminAjaxApiKey\n      }\n    };\n  }\n});\n\n$.ajaxPrefilter(function(options) {\n  options.headers = options.headers || {};\n  options.headers['X-Api-Key'] = webAdminAjaxApiKey;\n});\n\n// DataTables plugin to programmatically show the processing indidicator.\n// https://datatables.net/plug-ins/api#fnProcessingIndicator\njQuery.fn.dataTableExt.oApi.fnProcessingIndicator = function ( oSettings, onoff )\n{\n  if( typeof(onoff) === 'undefined' )\n  {\n    onoff=true;\n  }\n  this.oApi._fnProcessingDisplay( oSettings, onoff );\n};\n\n\n// Defaults for DataTables.\n_.merge($.fn.DataTable.defaults, {\n  // Don't show the DataTables processing message. We'll handle the processing\n  // message logic in initComplete with blockui.\n  processing: false,\n\n  // Enable global searching.\n  searching: true,\n\n  // Re-arrange how the table and surrounding fields (pagination, search, etc)\n  // are laid out.\n  dom: 'rft<\"row-fluid\"<\"span3 table-info\"i><\"span6 table-pagination\"p><\"span3 table-length\"l>>',\n\n  language: {\n    // Don't have an explicit label for the search field. Use a placeholder\n    // instead.\n    search: '',\n    searchPlaceholder: 'Search...',\n  },\n\n  preDrawCallback: function() {\n    if(!this.customProcessingCallbackSet) {\n      // Use blockui to provide a more obvious processing message the overlays\n      // the entire table (this helps for long tables, where a simple processing\n      // message might appear out of your current view).\n      //\n      // Set this early on during pre-draw so that the processing message shows\n      // up for the first load.\n      $(this).DataTable().on('processing', _.bind(function(event, settings, processing) {\n        if(processing) {\n          this.block({\n            message: '<i class=\"fa fa-spinner fa-spin fa-lg\"></i>',\n          });\n        } else {\n          this.unblock();\n        }\n      }, this));\n\n      this.customProcessingCallbackSet = true;\n    }\n  },\n});\n\nEmber.EasyForm.Input.reopen({\n  // Observe the \"showAllValidationErrors\" property and show all the inline\n  // input validations when this gets set to true. This allows us to show all\n  // the invalid fields on the page without actually visiting each input field\n  // (useful on form submits). This is a bit of a workaround since\n  // ember-easyForm doesn't currently support this:\n  // https://github.com/dockyard/ember-easyForm/issues/146\n  // https://github.com/dockyard/ember-easyForm/pull/143\n  showAllValidationErrorsOnModelChange: function() {\n    if(this.get('context.showAllValidationErrors') === true) {\n      this.set('hasFocusedOut', true);\n      this.set('canShowValidationError', true);\n    } else {\n      this.showValidationError();\n    }\n  }.observes('context.showAllValidationErrors'),\n});\n\nEmber.EasyForm.Form.reopen({\n  submit: function(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if(!this.get('context.model.validate')) {\n      this.get('controller').send(this.get('action'));\n    } else {\n      // Reset the error objects used for error-messages display before each\n      // submit, so the messages reflect the new validations.\n      this.set('context.model.clientErrors', {});\n      this.set('context.model.serverErrors', {});\n\n      this.get('context.model').validate().then(_.bind(function() {\n        this.get('controller').send(this.get('action'));\n      }, this)).catch(_.bind(function() {\n        // On validation failure, set the errors for error-messages display and\n        // scroll to the error messages display.\n        this.set('context.model.clientErrors', this.get('context.model.errors'));\n        $.scrollTo('#error_messages', { offset: -50, duration: 200 });\n\n        // Display all the inline errors for at least the top-level model\n        // (note, this doesn't currently propagate to embedded models/forms).\n        this.set('context.model.showAllValidationErrors', true);\n      }, this));\n    }\n  },\n});\n\n// A mixin that provides the default ajax save behavior for our forms.\nAdmin.Save = Ember.Mixin.create({\n  save: function(options) {\n    var button = $('#save_button');\n    button.button('loading');\n\n    // Force dirty to force save (ember-model's dirty tracking fails to\n    // account for changes in nested, non-association objects:\n    // http://git.io/sbS1mg This is mainly for ApiSettings's errorTemplates\n    // and errorDataYamlStrings, but we've seen enough funkiness elsewhere,\n    // it seems worth disabling for now).\n    this.set('model.isDirty', true);\n\n    this.get('model').save().then(_.bind(function() {\n      button.button('reset');\n      new PNotify({\n        type: 'success',\n        title: 'Saved',\n        text: (_.isFunction(options.message)) ? options.message(this.get('model')) : options.message,\n      });\n\n      this.transitionToRoute(options.transitionToRoute);\n    }, this), _.bind(function(response) {\n      // Set the errors from the server response on a \"serverErrors\" property\n      // for the error-messages component display.\n      try {\n        this.set('model.serverErrors', response.responseJSON.errors);\n      } catch(e) {\n        this.set('model.serverErrors', response.responseText);\n      }\n\n      button.button('reset');\n      $.scrollTo('#error_messages', { offset: -50, duration: 200 });\n    }, this));\n  },\n});\n\nAdmin.DataTablesHelpers = {\n  renderEscaped: function(value, type) {\n    if(type === 'display' && value) {\n      return _.escape(value);\n    }\n\n    return value;\n  },\n\n  renderListEscaped: function(value, type) {\n    if(type === 'display' && value) {\n      if(_.isArray(value)) {\n        return _.map(value, function(v) { return _.escape(v); }).join('<br>');\n      } else {\n        return _.escape(value);\n      }\n    }\n\n    return value;\n  },\n\n  renderTime: function(value, type) {\n    if(type === 'display' && value && value !== '-') {\n      return moment(value).format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    return value;\n  },\n};\n", "Admin.AdminGroupsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/admin_groups.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/admin_groups/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'api_scope_display_names',\n          title: 'API Scopes',\n          render: Admin.DataTablesHelpers.renderListEscaped,\n        },\n        {\n          data: 'permission_display_names',\n          title: 'Access',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderListEscaped,\n        }\n      ]\n    });\n  },\n});\n", "Admin.AdminsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/admins.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'username',\n          title: 'Username',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var link = '#/admins/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'email',\n          title: 'E-mail',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'group_names',\n          title: 'Groups',\n          render: Admin.DataTablesHelpers.renderListEscaped,\n        },\n        {\n          data: 'last_sign_in_at',\n          type: 'date',\n          title: 'Last Signed In',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Created',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        }\n      ]\n    });\n  },\n});\n", "Admin.ApiScopesTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/api_scopes.json',\n      pageLength: 50,\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/api_scopes/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'host',\n          title: 'Host',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'path_prefix',\n          title: 'Path Prefix',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        }\n      ]\n    });\n  },\n});\n", "Admin.ApiUsersTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/users.json',\n      pageLength: 50,\n      order: [[4, 'desc']],\n      columns: [\n        {\n          data: 'email',\n          title: 'E-mail',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var link = '#/api_users/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'first_name',\n          title: 'First Name',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'last_name',\n          title: 'Last Name',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'use_description',\n          title: 'Purpose',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Created',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n        {\n          data: 'registration_source',\n          title: 'Registration Source',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'api_key_preview',\n          title: 'API Key',\n          defaultContent: '-',\n          orderable: false,\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n      ]\n    });\n  },\n});\n", "Admin.ApisTableView = Ember.View.extend({\n  tagName: 'table',\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  init: function() {\n    this._super();\n\n    // We're observing the controller, which is a computed property on views.\n    // Force fetching it so the observers fire:\n    // http://emberjs.com/guides/object-model/observers/#toc_unconsumed-computed-properties-do-not-trigger-observers\n    this.get('controller');\n  },\n\n  didInsertElement: function() {\n    this.set('table', this.$().DataTable({\n      serverSide: true,\n      ajax: '/api-umbrella/v1/apis.json',\n      pageLength: 50,\n      rowCallback: function(row, data) {\n        $(row).data('id', data.id);\n        $(row).data('sort-order', data.sort_order);\n      },\n      order: [[0, 'asc']],\n      columns: [\n        {\n          data: 'name',\n          title: 'Name',\n          defaultContent: '-',\n          render: _.bind(function(name, type, data) {\n            if(type === 'display' && name && name !== '-') {\n              var link = '#/apis/' + data.id + '/edit';\n              return '<a href=\"' + link + '\">' + _.escape(name) + '</a>';\n            }\n\n            return name;\n          }, this),\n        },\n        {\n          data: 'frontend_host',\n          title: 'Host',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'frontend_prefixes',\n          title: 'Prefixes',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'sort_order',\n          title: 'Matching Order',\n          defaultContent: '-',\n          width: 130,\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: null,\n          className: 'reorder-handle',\n          orderable: false,\n          render: function() {\n            return '<i class=\"fa fa-reorder\"></i>';\n          },\n        },\n      ]\n    }));\n\n    this.get('table')\n      .on('search', _.bind(function(event, settings) {\n        // Disable reordering if the user tries to filter the table by anything\n        // (otherwise, our reordering logic won't work, since it relies on the\n        // neighboring rows).\n        if(this.get('controller.reorderActive')) {\n          if(settings.oPreviousSearch && settings.oPreviousSearch.sSearch) {\n            this.set('controller.reorderActive', false);\n          }\n        }\n      }, this))\n      .on('order', _.bind(function(event, settings) {\n        // Disable reordering if the user tries to sort the table by anything\n        // other than the sort order (otherwise, our reordering logic won't\n        // work, since it relies on the neighboring rows).\n        if(this.get('controller.reorderActive')) {\n          if(settings.aaSorting && !_.isEqual(settings.aaSorting, [[3, 'asc']])) {\n            this.set('controller.reorderActive', false);\n          }\n        }\n      }, this));\n\n    this.$().find('tbody').sortable({\n      handle: '.reorder-handle',\n      placeholder: 'reorder-placeholder',\n      helper: function(event, ui) {\n        ui.children().each(function() {\n          $(this).width($(this).width());\n        });\n        return ui;\n      },\n      stop: _.bind(function(event, ui) {\n        var row = $(ui.item);\n        var currentOrder = parseInt(row.data('sort-order'), 10);\n        var previousRow = row.prev('tbody tr');\n        var moveTo = 1;\n        if(previousRow.length > 0) {\n          moveTo = parseInt($(previousRow[0]).data('sort-order'), 10);\n          if(moveTo < currentOrder) {\n            moveTo++;\n          }\n        } else {\n          var data = this.get('table').rows().data();\n          var sortOrders = _.map(_.compact(_.pluck(data, 'sort_order')), function(order) { return parseInt(order, 10); });\n          var minSortOrder = sortOrders.sort()[0];\n          if(minSortOrder && minSortOrder > 1) {\n            moveTo = minSortOrder - 1;\n          }\n        }\n\n        this.saveReorder(row.data('id'), moveTo);\n      }, this),\n    });\n  },\n\n  handleReorderChange: function() {\n    if(this.get('controller.reorderActive')) {\n      this.$().addClass('reorder-active');\n      this.get('table')\n        .order([[3, 'asc']])\n        .search('')\n        .draw();\n    } else {\n      this.$().removeClass('reorder-active');\n    }\n  }.observes('controller.reorderActive'),\n\n  saveReorder: function(id, moveTo) {\n    this.$().dataTable().fnProcessingIndicator(true);\n    $.ajax({\n      url: '/admin/apis/' + id + '/move_to.json',\n      type: 'PUT',\n      data: { move_to: moveTo },\n    }).done(_.bind(function() {\n      this.get('table').draw();\n    }, this)).fail(_.bind(function() {\n      bootbox.alert('An unexpected error occurred. Please try again.');\n      this.get('table').draw();\n    }, this));\n  },\n});\n", "Admin.LogsTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      searching: false,\n      serverSide: true,\n      ajax: {\n        url: '/admin/stats/logs.json',\n        // Use POST for this endpoint, since the URLs can be very long and\n        // exceed URL length limits in IE (and apparently Capybara too).\n        type: 'POST',\n        data: _.bind(function(data) {\n          var query = this.get('controller.query.params');\n          return _.extend({}, data, query);\n        }, this)\n      },\n      drawCallback: _.bind(function() {\n        this.$().find('td').truncate({\n          width: 400,\n          addtitle: true,\n          addclass: 'truncated'\n        });\n\n        this.$().find('.truncated').qtip({\n          style: {\n            classes: 'qtip-bootstrap qtip-forced-wide',\n          },\n          hide: {\n            fixed: true,\n            delay: 200\n          },\n          position: {\n            viewport: false,\n            my: 'bottom center',\n            at: 'top center'\n          }\n        });\n      }, this),\n      order: [[0, 'desc']],\n      columns: [\n        {\n          data: 'request_at',\n          type: 'date',\n          title: 'Time',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n        {\n          data: 'request_method',\n          title: 'Method',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_host',\n          title: 'Host',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_url',\n          title: 'URL',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'user_email',\n          title: 'User',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var params = _.clone(this.get('controller.query.params'));\n              params.search = _.compact([params.search, 'user_id:\"' + data.user_id + '\"']).join(' AND ');\n              var link = '#/stats/logs/' + $.param(params);\n\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'request_ip',\n          title: 'IP Address',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_ip_country',\n          title: 'Country',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_ip_region',\n          title: 'State',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_ip_city',\n          title: 'City',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'response_status',\n          title: 'Status',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'response_time',\n          title: 'Response Time',\n          defaultContent: '-',\n          render: function(time, type) {\n            if(type === 'display' && time && time !== '-') {\n              return time + ' ms';\n            }\n\n            return time;\n          },\n        },\n        {\n          data: 'response_content_type',\n          title: 'Content Type',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_accept_encoding',\n          title: 'Accept Encoding',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'request_user_agent',\n          title: 'User Agent',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n      ]\n    });\n  },\n\n  refreshData: function() {\n    this.$().DataTable().draw();\n  }.observes('controller.query.params.query', 'controller.query.params.search', 'controller.query.params.start_at', 'controller.query.params.end_at'),\n});\n", "Admin.StatsUsersTableView = Ember.View.extend({\n  tagName: 'table',\n\n  classNames: ['table', 'table-striped', 'table-bordered', 'table-condensed'],\n\n  didInsertElement: function() {\n    this.$().DataTable({\n      searching: false,\n      serverSide: true,\n      ajax: {\n        url: '/admin/stats/users.json',\n        data: _.bind(function(data) {\n          var query = this.get('controller.query.params');\n          return _.extend({}, data, query);\n        }, this)\n      },\n      order: [[4, 'desc']],\n      columns: [\n        {\n          data: 'email',\n          title: 'Email',\n          defaultContent: '-',\n          render: _.bind(function(email, type, data) {\n            if(type === 'display' && email && email !== '-') {\n              var params = _.clone(this.get('controller.query.params'));\n              params.search = 'user_id:\"' + data.id + '\"';\n              var link = '#/stats/logs/' + $.param(params);\n\n              return '<a href=\"' + link + '\">' + _.escape(email) + '</a>';\n            }\n\n            return email;\n          }, this),\n        },\n        {\n          data: 'first_name',\n          title: 'First Name',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'last_name',\n          title: 'Last Name',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderEscaped,\n        },\n        {\n          data: 'created_at',\n          type: 'date',\n          title: 'Signed Up',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n        {\n          data: 'hits',\n          title: 'Hits',\n          defaultContent: '-',\n          render: function(number, type) {\n            if(type === 'display' && number && number !== '-') {\n              return numeral(number).format('0,0');\n            }\n\n            return number;\n          },\n        },\n        {\n          data: 'last_request_at',\n          type: 'date',\n          title: 'Last Request',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n        {\n          data: 'use_description',\n          title: 'Use Description',\n          defaultContent: '-',\n          render: Admin.DataTablesHelpers.renderTime,\n        },\n      ]\n    });\n  },\n\n  refreshData: function() {\n    this.$().DataTable().draw();\n  }.observes('controller.query.params.query', 'controller.query.params.search', 'controller.query.params.start_at', 'controller.query.params.end_at'),\n});\n", "require \"api_umbrella/elasticsearch_proxy\"\n\nApiUmbrella::Application.routes.draw do\n  # Mount the API at both /api/ and /api-umbrella/ for backwards compatibility.\n  %w(api api-umbrella).each do |path|\n    namespace(:api, :path => path) do\n      resources :api_users, :path => \"api-users\" do\n        member do\n          get \"validate\"\n        end\n      end\n\n      resources :health_checks, :path => \"health-checks\", :only => [] do\n        collection do\n          get :ip\n          get :logging\n        end\n      end\n\n      # /v0 is for unstable APIs we may be experimenting with internally.\n      namespace :v0 do\n        resources :analytics do\n          collection do\n            get \"summary\"\n          end\n        end\n      end\n\n      namespace :v1 do\n        resources :admin_groups\n        resources :admin_permissions, :only => [:index]\n        resources :user_roles, :only => [:index]\n        resources :admins\n        resources :api_scopes\n        resources :apis\n        resources :users\n        resources :website_backends\n        resource :contact, :only => [:create]\n\n        resources :analytics do\n          collection do\n            get \"drilldown\"\n          end\n        end\n\n        namespace :config do\n          get :pending_changes\n          post :publish\n        end\n      end\n    end\n  end\n\n  devise_for :admins, :controllers => { :omniauth_callbacks => \"admin/admins/omniauth_callbacks\" }\n\n  devise_scope :admin do\n    get \"/admin/login\" => \"admin/sessions#new\", :as => :new_admin_session\n    get \"/admin/logout\" => \"admin/sessions#destroy\", :as => :destroy_admin_session\n  end\n\n  match \"/admin\" => \"admin/base#empty\"\n\n  namespace :admin do\n    resources :apis, :only => [] do\n      member do\n        put \"move_to\"\n      end\n    end\n\n    resources :stats, :only => [:index] do\n      collection do\n        get \"search\"\n        get \"logs\"\n        post \"logs\"\n        get \"users\"\n        get \"map\"\n      end\n    end\n\n    namespace :config do\n      get \"publish\", :action => \"show\"\n      post \"publish\", :action => \"create\"\n\n      get \"import_export\"\n      get \"export\"\n      post \"import_preview\"\n      post \"import\"\n    end\n\n    resources :api_users do\n      get \"page/:page\", :action => :index, :on => :collection\n    end\n  end\n\n  authenticate :admin, lambda { |admin| admin.superuser? } do\n    mount ApiUmbrella::ElasticsearchProxy.new, :at => ApiUmbrella::ElasticsearchProxy::PREFIX\n  end\nend\n", "FactoryGirl.define do\n  factory :api_user do\n    first_name \"Ambrose\"\n    last_name \"Burnside\"\n    sequence(:email) { |n| \"ambrose.burnside#{n}@example.com\" }\n    if(ApiUser.fields.include?(\"website\"))\n      website \"http://example.com/\"\n    end\n    terms_and_conditions \"1\"\n\n    factory :invalid_api_user do\n      terms_and_conditions \"\"\n    end\n\n    factory :xss_api_user do\n      first_name '\"><script class=\"xss-test\">alert(\"Hello first_name\");</script>'\n      last_name '\"><script class=\"xss-test\">alert(\"Hello last_name\");</script>'\n      use_description '\"><script class=\"xss-test\">alert(\"Hello use_description\");</script>'\n      registration_source '\"><script class=\"xss-test\">alert(\"Hello registration_source\");</script>'\n    end\n  end\nend\n", "require \"elasticsearch/persistence/model\"\n\nclass LogItem\n  include Elasticsearch::Persistence::Model\n\n  index_name \"api-umbrella-logs-2015-01\"\n\n  attribute :api_key, String\n  attribute :backend_response_time, Float\n  attribute :internal_gatekeeper_time, Float\n  attribute :internal_response_time, Float\n  attribute :proxy_overhead, Float\n  attribute :request_accept_encoding, String\n  attribute :request_at, Time\n  attribute :request_hierarchy, Array\n  attribute :request_host, String\n  attribute :request_ip, String\n  attribute :request_ip_city, String\n  attribute :request_ip_country, String\n  attribute :request_ip_region, String\n  attribute :request_method, String\n  attribute :request_path, String\n  attribute :request_query, Hash\n  attribute :request_scheme, String\n  attribute :request_size, Integer\n  attribute :request_url, String\n  attribute :request_user_agent, String\n  attribute :request_user_agent_family, String\n  attribute :request_user_agent_type, String\n  attribute :response_age, Integer\n  attribute :response_content_length, Integer\n  attribute :response_content_type, String\n  attribute :response_server, String\n  attribute :response_size, Integer\n  attribute :response_status, Integer\n  attribute :response_time, Float\n  attribute :user_email, String\n  attribute :user_id, String\n  attribute :user_registration_source, String\n\n  def save!\n    self.save || raise(\"Failed to save log\")\n  end\nend\n\nFactoryGirl.define do\n  factory :log_item do\n    api_key \"UfhkQUBgWQbJ0ZVqnJ4TvA7quGCZHYTFCXwSfOTQ\"\n    backend_response_time 0\n    internal_gatekeeper_time 1.4\n    internal_response_time 1.8\n    proxy_overhead 3\n    request_accept_encoding \"*/*\"\n    request_at { Time.now }\n    request_hierarchy [\"0/127.0.0.1/\", \"1/127.0.0.1/hello\"]\n    request_host \"127.0.0.1\"\n    request_ip \"127.0.0.1\"\n    request_ip_city \"Golden\"\n    request_ip_country \"US\"\n    request_ip_region \"CO\"\n    request_method \"GET\"\n    request_path \"/hello/\"\n    request_query({ \"foo\" => \"bar\" })\n    request_scheme \"http\"\n    request_size 140\n    request_url \"http://127.0.0.1/hello/?foo=bar\"\n    request_user_agent \"ApacheBench/2.3\"\n    request_user_agent_family \"AB (Apache Bench)\"\n    request_user_agent_type \"Other\"\n    response_age 0\n    response_content_length 14\n    response_content_type \"text/plain\"\n    response_server \"nginx\"\n    response_size 243\n    response_status 200\n    response_time 3\n    user_email \"test@example.com\"\n    user_id \"4199b260-ae76-463f-8395-d30de09c1540\"\n    user_registration_source \"web_admin\"\n\n    factory :xss_log_item do\n      request_accept_encoding '\"><script class=\"xss-test\">alert(\"1\");</script>'\n      request_host '\"><script class=\"xss-test\">alert(\"2\");</script>'\n      request_ip_city '\"><script class=\"xss-test\">alert(\"3\");</script>'\n      request_ip_country '\"><script class=\"xss-test\">alert(\"4\");</script>'\n      request_ip_region '\"><script class=\"xss-test\">alert(\"5\");</script>'\n      request_path '\"><script class=\"xss-test\">alert(\"6\");</script>'\n      request_query({ \"foo\" => '\"><script class=\"xss-test\">alert(\"7\");</script>' })\n      request_url '\"><script class=\"xss-test\">alert(\"8\");</script>'\n      request_user_agent '\"><script class=\"xss-test\">alert(\"9\");</script>'\n      response_content_type '\"><script class=\"xss-test\">alert(\"10\");</script>'\n      response_server '\"><script class=\"xss-test\">alert(\"11\");</script>'\n      user_email '\"><script class=\"xss-test\">alert(\"12\");</script>'\n      user_registration_source '\"><script class=\"xss-test\">alert(\"13\");</script>'\n    end\n  end\nend\n", "require 'spec_helper'\n\ndescribe \"api users form\", :js => true do\n  login_admin\n\n  describe \"xss\" do\n    before(:all) do\n      ApiUser.where(:registration_source.ne => \"seed\").delete_all\n      @user = FactoryGirl.create(:xss_api_user)\n    end\n\n    it \"escapes html entities in the table\" do\n      visit \"/admin/#/api_users\"\n\n      page.should have_content(@user.email)\n      page.should_not have_selector(\".xss-test\", :visible => :all)\n      page.should have_content(@user.first_name)\n      page.should have_content(@user.last_name)\n      page.should have_content(@user.use_description)\n      page.should have_content(@user.registration_source)\n    end\n\n    it \"escapes html entities in the form\" do\n      visit \"/admin/#/api_users/#{@user.id}/edit\"\n\n      find_field(\"E-mail\").value.should eql(@user.email)\n      page.should_not have_selector(\".xss-test\", :visible => :all)\n      find_field(\"First Name\").value.should eql(@user.first_name)\n      find_field(\"Last Name\").value.should eql(@user.last_name)\n      find_field(\"Purpose\").value.should eql(@user.use_description)\n      page.should have_content(@user.registration_source)\n    end\n  end\n\n  describe \"api key in the save notification\" do\n    it \"shows the api key when creating a new account\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.last_name.should eql(\"Doe\")\n      page.should have_content(user.api_key)\n    end\n\n    it \"shows the api key when editing a recently created account\" do\n      user = FactoryGirl.create(:api_user, :created_by => @current_admin.id)\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      fill_in \"Last Name\", :with => \"Updated\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.last_name.should eql(\"Updated\")\n      page.should have_content(user.api_key)\n    end\n\n    it \"hides the api key when editing an old account\" do\n      user = FactoryGirl.create(:api_user, :created_by => @current_admin.id, :created_at => Time.now - 15.minutes)\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      fill_in \"Last Name\", :with => \"Updated2\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.last_name.should eql(\"Updated2\")\n      page.should_not have_content(user.api_key)\n    end\n  end\n\n  describe \"allowed ips input\" do\n    it \"saves an empty input as nil\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_ips.should eql(nil)\n    end\n\n    it \"saves multiple lines (omitting blank lines) as an array\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      fill_in \"Restrict Access to IPs\", :with => \"10.0.0.0/8\\n\\n\\n\\n127.0.0.1\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_ips.should eql([\"10.0.0.0/8\", \"127.0.0.1\"])\n    end\n\n    it \"displays an existing array as multiple lines\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_ips => [\"10.0.0.0/24\", \"10.2.2.2\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to IPs\").value.should eql(\"10.0.0.0/24\\n10.2.2.2\")\n    end\n\n    it \"nullifies an existing array when an empty input is saved\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_ips => [\"10.0.0.0/24\", \"10.2.2.2\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to IPs\").value.should eql(\"10.0.0.0/24\\n10.2.2.2\")\n      fill_in \"Restrict Access to IPs\", :with => \"\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.settings.allowed_ips.should eql(nil)\n    end\n  end\n\n  describe \"allowed referers input\" do\n    it \"saves an empty input as nil\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_referers.should eql(nil)\n    end\n\n    it \"saves multiple lines (omitting blank lines) as an array\" do\n      visit \"/admin/#/api_users/new\"\n\n      fill_in \"E-mail\", :with => \"example@example.com\"\n      fill_in \"First Name\", :with => \"John\"\n      fill_in \"Last Name\", :with => \"Doe\"\n      check \"User agrees to the terms and conditions\"\n      fill_in \"Restrict Access to HTTP Referers\", :with => \"*.example.com/*\\n\\n\\n\\nhttp://google.com/*\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user = ApiUser.order_by(:created_at.asc).last\n      user.settings.allowed_referers.should eql([\"*.example.com/*\", \"http://google.com/*\"])\n    end\n\n    it \"displays an existing array as multiple lines\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_referers => [\"*.example.com/*\", \"http://google.com/*\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to HTTP Referers\").value.should eql(\"*.example.com/*\\nhttp://google.com/*\")\n    end\n\n    it \"nullifies an existing array when an empty input is saved\" do\n      user = FactoryGirl.create(:api_user, :settings => { :allowed_referers => [\"*.example.com/*\", \"http://google.com/*\"] })\n      visit \"/admin/#/api_users/#{user.id}/edit\"\n\n      find_field(\"Restrict Access to HTTP Referers\").value.should eql(\"*.example.com/*\\nhttp://google.com/*\")\n      fill_in \"Restrict Access to HTTP Referers\", :with => \"\"\n      click_button(\"Save\")\n\n      page.should have_content(\"Successfully saved the user\")\n      user.reload\n      user.settings.allowed_referers.should eql(nil)\n    end\n  end\nend\n", "require \"spec_helper\"\nrequire \"addressable/uri\"\n\ndescribe \"apis\", :js => true do\n  login_admin\n\n  before(:each) do\n    begin\n      LogItem.gateway.client.indices.delete :index => LogItem.index_name\n    rescue Elasticsearch::Transport::Transport::Errors::NotFound # rubocop:disable Lint/HandleExceptions\n    end\n  end\n\n  describe \"xss\" do\n    it \"escapes html entities in the table\" do\n      log = FactoryGirl.create(:xss_log_item, :request_at => Time.parse(\"2015-01-16T06:06:28.816Z\"), :request_method => \"OPTIONS\")\n      LogItem.gateway.refresh_index!\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day\"\n\n      page.should have_content(log.request_method)\n      page.should_not have_selector(\".xss-test\", :visible => :all)\n      page.should have_content(log.request_accept_encoding)\n      page.should have_content(log.request_ip_city)\n      page.should have_content(log.request_ip_country)\n      page.should have_content(log.request_ip_region)\n      page.should have_content(log.request_user_agent)\n      page.should have_content(log.response_content_type)\n      page.should have_content(log.user_email)\n    end\n  end\n\n  describe \"csv download\" do\n    it \"updates the download link as the query parameters change\" do\n      FactoryGirl.create(:log_item, :request_at => Time.parse(\"2015-01-16T06:06:28.816Z\"))\n      LogItem.gateway.refresh_index!\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"\",\n        \"start_at\" => \"2015-01-12\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n      })\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-13&end_at=2015-01-18&interval=day\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"\",\n        \"start_at\" => \"2015-01-13\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n      })\n\n      find(\"a\", :text => /Filter Results/).click\n      find(\"a\", :text => /Switch to advanced filters/).click\n      fill_in \"search\", :with => \"response_status:200\"\n      click_button \"Filter\"\n      link = find_link(\"Download CSV\")\n      uri = Addressable::URI.parse(link[:href])\n      uri.path.should eql(\"/admin/stats/logs.csv\")\n      uri.query_values.should eql({\n        \"tz\" => \"America/Denver\",\n        \"search\" => \"response_status:200\",\n        \"start_at\" => \"2015-01-13\",\n        \"end_at\" => \"2015-01-18\",\n        \"interval\" => \"day\",\n        \"query\" => \"\",\n      })\n    end\n\n    it \"successfully downloads a csv\" do\n      FactoryGirl.create_list(:log_item, 10, :request_at => Time.parse(\"2015-01-16T06:06:28.816Z\"))\n      LogItem.gateway.refresh_index!\n\n      visit \"/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day\"\n      click_link \"Download CSV\"\n      page.status_code.should eql(200)\n      page.response_headers[\"Content-Type\"].should eql(\"text/csv\")\n    end\n  end\nend\n"], "filenames": ["app/assets/javascripts/admin/app.js", "app/assets/javascripts/admin/views/admin_groups/table_view.js", "app/assets/javascripts/admin/views/admins/table_view.js", "app/assets/javascripts/admin/views/api_scopes/table_view.js", "app/assets/javascripts/admin/views/api_users/table_view.js", "app/assets/javascripts/admin/views/apis/table_view.js", "app/assets/javascripts/admin/views/stats/logs_table_view.js", "app/assets/javascripts/admin/views/stats/users_table_view.js", "config/routes.rb", "spec/factories/api_users.rb", "spec/factories/log_items.rb", "spec/features/admin/api_users_spec.rb", "spec/features/admin/stats_logs_spec.rb"], "buggy_code_start_loc": [365, 29, 29, 29, 29, 41, 11, 38, 73, 13, 13, 4, 10], "buggy_code_end_loc": [365, 48, 72, 34, 63, 52, 135, 84, 73, 13, 73, 4, 10], "fixing_code_start_loc": [366, 29, 30, 30, 30, 42, 12, 39, 74, 14, 13, 5, 11], "fixing_code_end_loc": [396, 36, 56, 37, 63, 56, 144, 78, 75, 21, 96, 34, 30], "type": "CWE-79", "message": "A vulnerability was found in NREL api-umbrella-web 0.7.1. It has been classified as problematic. This affects an unknown part of the component Admin Data Table Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 0.8.0 is able to address this issue. The name of the patch is f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221487.", "other": {"cve": {"id": "CVE-2015-10080", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-20T10:15:12.217", "lastModified": "2023-02-28T19:53:22.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in NREL api-umbrella-web 0.7.1. It has been classified as problematic. This affects an unknown part of the component Admin Data Table Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 0.8.0 is able to address this issue. The name of the patch is f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-221487."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nrel:api_umbrella:0.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "F5FD364E-BECF-41E1-9FB5-77E77E0DFCE2"}]}]}], "references": [{"url": "https://github.com/NREL/api-umbrella-web/commit/f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/NREL/api-umbrella-web/releases/tag/v0.8.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.221487", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.221487", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/NREL/api-umbrella-web/commit/f53a9fb87e10c457f0f3dd4f2af24d3b2f21b3ca"}}