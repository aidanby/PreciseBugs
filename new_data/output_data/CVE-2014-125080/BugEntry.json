{"buggy_code": ["<?php\n/**********************************************************************\n    Copyright (C) FrontAccounting, LLC.\n\tReleased under the terms of the GNU General Public License, GPL, \n\tas published by the Free Software Foundation, either version 3 \n\tof the License, or (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n    See the License here <http://www.gnu.org/licenses/gpl-3.0.html>.\n***********************************************************************/\n$page_security = 'SA_CREATEMODULES';\n$path_to_root=\"..\";\ninclude_once($path_to_root . \"/includes/session.inc\");\ninclude_once($path_to_root.\"/includes/packages.inc\");\n\nif ($use_popup_windows) {\n\t$js = get_js_open_window(900, 500);\n}\npage(_($help_context = \"Install/Activate extensions\"));\n\ninclude_once($path_to_root . \"/includes/date_functions.inc\");\ninclude_once($path_to_root . \"/admin/db/company_db.inc\");\ninclude_once($path_to_root . \"/admin/db/maintenance_db.inc\");\ninclude_once($path_to_root . \"/includes/ui.inc\");\n\nsimple_page_mode(true);\n\n//---------------------------------------------------------------------------------------------\nfunction local_extension($id)\n{\n\tglobal $next_extension_id, $Ajax, $path_to_root;\n\n\t$exts = get_company_extensions();\n\t$exts[$next_extension_id++] = array(\n\t\t\t'package' => $id,\n\t\t\t'name' => $id,\n\t\t\t'version' => '-',\n\t\t\t'available' => '',\n\t\t\t'type' => 'extension',\n\t\t\t'path' => 'modules/'.$id,\n\t\t\t'active' => false\n\t);\n\n\tif (file_exists($path_to_root.'/modules/'.$id.'/hooks.php')) {\n\t\tinclude_once($path_to_root.'/modules/'.$id.'/hooks.php');\n\t}\n\t$hooks_class = 'hooks_'.$id;\n\tif (class_exists($hooks_class, false)) {\n\t\t$hooks = new $hooks_class;\n\t\t$hooks->install_extension(false);\n\t}\n\t$Ajax->activate('ext_tbl'); // refresh settings display\n\tif (!update_extensions($exts))\n\t\treturn false;\n\treturn true;\n}\n\nfunction handle_delete($id)\n{\n\tglobal $path_to_root;\n\t\n\t$extensions = get_company_extensions();\n\t$ext = $extensions[$id];\n\tif ($ext['version'] != '-') {\n\t\tif (!uninstall_package($ext['package']))\n\t\t\treturn false;\n\t} else {\n\t\t@include_once($path_to_root.'/'.$ext['path'].'/hooks.php');\n\t\t$hooks_class = 'hooks_'.$ext['package'];\n\t\tif (class_exists($hooks_class)) {\n\t\t\t$hooks = new $hooks_class;\n\t\t\t$hooks->uninstall_extension(false);\n\t\t}\n\t}\n\tunset($extensions[$id]);\n\tif (update_extensions($extensions)) {\n\t\tdisplay_notification(_(\"Selected extension has been successfully deleted\"));\n\t}\n\treturn true;\n}\n//\n// Helper for formating menu tabs/entries to be displayed in extension table\n//\nfunction fmt_titles($defs)\n{\n\t\tif (!$defs) return '';\n\t\tforeach($defs as $def) {\n\t\t\t$str[] = access_string($def['title'], true);\n\t\t}\n\t\treturn implode('<br>', array_values($str));\n}\n//---------------------------------------------------------------------------------------------\n//\n// Display list of all extensions - installed and available from repository\n//\nfunction display_extensions()\n{\n\tglobal $installed_extensions;\n\t\n\tdiv_start('ext_tbl');\n\tstart_table(TABLESTYLE);\n\n\t$th = array(_(\"Extension\"),_(\"Modules provided\"), _(\"Options provided\"),\n\t\t _(\"Installed\"), _(\"Available\"),  \"\", \"\");\n\ttable_header($th);\n\n\t$k = 0;\n\t$mods = get_extensions_list('extension');\n\n\tforeach($mods as $pkg_name => $ext)\n\t{\n\t\t$available = @$ext['available'];\n\t\t$installed = @$ext['version'];\n\t\t$id = @$ext['local_id'];\n\n\t\t$entries = fmt_titles(@$ext['entries']);\n\t\t$tabs = fmt_titles(@$ext['tabs']);\n\n\t\talt_table_row_color($k);\n\n\t\tlabel_cell($available ? get_package_view_str($pkg_name, $ext['name']) : $ext['name']);\n\t\tlabel_cell($tabs);\n\t\tlabel_cell($entries);\n\n\t\tlabel_cell($id === null ? _(\"None\") :\n\t\t\t($available && $installed ? $installed : _(\"Unknown\")));\n\t\tlabel_cell($available ? $available : _(\"Unknown\"));\n\n\t\tif (!$available && $ext['type'] == 'extension')\t{// third-party plugin\n\t\t\tif (!$installed)\n\t\t\t\tbutton_cell('Local'.$ext['package'], _(\"Install\"), _('Install third-party extension.'), \n\t\t\t\t\tICON_DOWN);\n\t\t\telse\n\t\t\t\tlabel_cell('');\n\t\t} elseif (check_pkg_upgrade($installed, $available)) // outdated or not installed extension in repo\n\t\t\tbutton_cell('Update'.$pkg_name, $installed ? _(\"Update\") : _(\"Install\"),\n\t\t\t\t_('Upload and install latest extension package'), ICON_DOWN);\n\t\telse\n\t\t\tlabel_cell('');\n\n\t\tif ($id !== null) {\n\t\t\tdelete_button_cell('Delete'.$id, _('Delete'));\n\t\t\tsubmit_js_confirm('Delete'.$id, \n\t\t\t\tsprintf(_(\"You are about to remove package \\'%s\\'.\\nDo you want to continue ?\"), \n\t\t\t\t\t$ext['name']));\n\t\t} else\n\t\t\tlabel_cell('');\n\n\t\tend_row();\n\t}\n\n\tend_table(1);\n\n\tsubmit_center_first('Refresh', _(\"Update\"), '', null);\n\n\tdiv_end();\n}\n//---------------------------------------------------------------------------------\n//\n// Get all installed extensions and display\n// with current status stored in company directory.\n//\nfunction company_extensions($id)\n{\n\tstart_table(TABLESTYLE);\n\t\n\t$th = array(_(\"Extension\"),_(\"Modules provided\"), _(\"Options provided\"), _(\"Active\"));\n\t\n\t$mods = get_company_extensions();\n\t$exts = get_company_extensions($id);\n\tforeach($mods as $key => $ins) {\n\t\tforeach($exts as $ext)\n\t\t\tif ($ext['name'] == $ins['name']) {\n\t\t\t\t$mods[$key]['active'] = @$ext['active'];\n\t\t\t\tcontinue 2;\n\t\t\t}\n\t}\n\t$mods = array_natsort($mods, null, 'name');\n\ttable_header($th);\n\t$k = 0;\n\tforeach($mods as $i => $mod)\n\t{\n\t\tif ($mod['type'] != 'extension') continue;\n   \t\talt_table_row_color($k);\n\t\tlabel_cell($mod['name']);\n\t\t$entries = fmt_titles(@$mod['entries']);\n\t\t$tabs = fmt_titles(@$mod['tabs']);\n\t\tlabel_cell($tabs);\n\t\tlabel_cell($entries);\n\n\t\tcheck_cells(null, 'Active'.$i, @$mod['active'] ? 1:0, \n\t\t\tfalse, false, \"align='center'\");\n\t\tend_row();\n\t}\n\n\tend_table(1);\n\tsubmit_center('Refresh', _('Update'), true, false, 'default');\n}\n\n//---------------------------------------------------------------------------------------------\nif ($Mode == 'Delete')\n{\n\thandle_delete($selected_id);\n\t$Mode = 'RESET';\n}\n\nif (get_post('Refresh')) {\n\t$comp = get_post('extset');\n\t$exts = get_company_extensions($comp);\n\n\t$result = true;\n\tforeach($exts as $i => $ext) {\n\t\tif ($ext['package'] && ($ext['active'] ^ check_value('Active'.$i))) {\n\t\t\tif (!$ext['active'])\n\t\t\t\t$activated = activate_hooks($ext['package'], $comp);\n\t\t\telse\n\t\t\t\t$activated = hook_invoke($ext['package'], check_value('Active'.$i) ?\n\t\t\t\t 'activate_extension':'deactivate_extension', $comp, false);\n\t\t\tif ($activated !== null)\n\t\t\t\t$result &= $activated;\n\t\t\tif ($activated || ($activated === null))\n\t\t\t\t$exts[$i]['active'] = check_value('Active'.$i);\n\t\t}\n\t}\n\twrite_extensions($exts, get_post('extset'));\n\tif (get_post('extset') == user_company())\n\t\t$installed_extensions = $exts;\n\t\n\tif(!$result) {\n\t\tdisplay_error(_('Status change for some extensions failed.'));\n\t\t$Ajax->activate('ext_tbl'); // refresh settings display\n\t}else\n\t\tdisplay_notification(_('Current active extensions set has been saved.'));\n}\n\nif ($id = find_submit('Update', false))\n\tinstall_extension($id);\n\nif ($id = find_submit('Local', false))\n\tlocal_extension($id);\n\nif ($Mode == 'RESET')\n{\n\t$selected_id = -1;\n\tunset($_POST);\n}\n\n//---------------------------------------------------------------------------------------------\nstart_form(true);\nif (list_updated('extset'))\n\t$Ajax->activate('_page_body');\n\n$set = get_post('extset', -1);\n\necho \"<center>\" . _('Extensions:') . \"&nbsp;&nbsp;\";\necho extset_list('extset', null, true);\necho \"</center><br>\";\n\nif ($set == -1) \n\tdisplay_extensions();\nelse \n\tcompany_extensions($set);\n\n//---------------------------------------------------------------------------------------------\nend_form();\n\nend_page();\n?>", "<?php\n/**********************************************************************\n    Copyright (C) FrontAccounting, LLC.\n\tReleased under the terms of the GNU General Public License, GPL, \n\tas published by the Free Software Foundation, either version 3 \n\tof the License, or (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n    See the License here <http://www.gnu.org/licenses/gpl-3.0.html>.\n***********************************************************************/\n//\n// FrontAccounting extension modules integration.\n// This file is included in session.inc even before session is started,\n// and includes hooks.php connector files from all installed extensions.\n// To make hooks active install_hooks() have to be called after interface\n// language is set.\n//\n// To find how various hooks are processed look into respective hook_* functions below.\n//\nclass hooks {\n\tvar $module_name; // extension module name.\n\n\t// \n\t// Helper for updating databases with extension scheme\n\t//\n\t// $comp can be company number, -1 for all, \n\t// $updates - table of filename => array(table, field, property)\n\t// $check_only - don't update database, check table/field/property existence only\n\t//\n\tfunction update_databases($comp, $updates, $check_only=false)\n\t{\n\t\tglobal $db_connections, $path_to_root;\n\t\n\t\tif ($comp == -1) \n\t\t\t$conn = $db_connections;\n\t\telse\n\t\t\t$conn = array( $comp => $db_connections[$comp]);\n\t\t$result = true;\n\n\t\tforeach($conn as $comp => $con) {\n\t\t\tset_global_connection($comp);\n\t\t\tforeach($updates as $file => $update) {\n\t\t\t\t$table = @$update[0];\n\t\t\t\t$field = @$update[1];\n\t\t\t\t$properties = @$update[2];\n\n\t\t\t\t$ok = check_table($con['tbpref'], $table, $field, $properties) == 0;\n\n\t\t\t\tif (!$check_only && !$ok) {\n\t\t\t\t\t$ok = db_import($path_to_root.'/modules/'.$this->module_name.'/sql/'.$file,\n\t\t\t\t\t\t$con);\n\t\t\t\t}\n\t\t\t\t$result &= $ok;\n\t\t\t\tif (!$result)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdb_close();\n\t\t\tif (!$result)\n\t\t\t\tbreak;\n\t\t}\n\t\tset_global_connection(0); // return to siteadmin account\n\n\t\treturn $result;\n\t}\n\t//\n\t//\tInstall additional tabs provided by extension\n\t//\n\tfunction install_tabs($app)\n\t{\n//\t\t$app->add_application(new example_class); // add menu tab defined by example_class\n\t}\n\t//\n\t//\tInstall additonal menu options provided by extension\n\t//\n\tfunction install_options($app)\n\t{\n//\t\tglobal $path_to_root;\n//\n//\t\tswitch($app->id) {\n//\t\t\tcase 'orders':\n//\t\t\t\t$app->add_rapp_function( 0, _(\"&Example option\"), \n//\t\t\t\t\t$path_to_root.'/modules/example/example.php?', 'SA_OPEN');\n//\t\t}\n\t}\n\t\n\tfunction install_access()\n\t{\n//\t\t$security_areas['SA_EXAMPLE'] = array(SS_EXAMPLE|100, _(\"Example security area.\"));\n//\n//\t\t$security_sections = array(SS_EXAMPLE => _(\"Example module implementation\"));\n//\n//\t\treturn array($security_areas, $security_sections);\n\t}\n\n\t//\n\t//\tInvoked for all modules before page header is displayed\n\t//\n\tfunction pre_header($fun_args)\n\t{\n\t}\n\t//\n\t//\tInvoked for all modules before page footer is displayed\n\t//\n\tfunction pre_footer($fun_args)\n\t{\n\t}\n\n\t//\n\t// Price in words. $doc_type is set to document type and can be used to suppress \n\t// price in words printing for selected document types.\n\t// Used instead of built in simple english price_in_words() function.\n\t//\n\t//\tReturns: amount in words as string.\n\n\tfunction price_in_words($amount, $doc_type)\n\t{\n\t}\n\t//\n\t// Exchange rate currency $curr as on date $date.\n\t// Keep in mind FA has internally implemented 3 exrate providers\n\t// If any of them supports your currency, you can simply use function below\n\t// with apprioprate provider set, otherwise implement your own.\n\t// Returns: $curr value in home currency units as a real number.\n\n\tfunction retrieve_exrate($curr, $date)\n\t{\n//\t \t$provider = 'ECB'; // 'ECB', 'YAHOO' or 'GOOGLE'\n//\t\treturn get_extern_rate($curr, $provider, $date);\n\t\treturn null;\n\t}\n\n\t// External authentication\n\t// If used should return true after successfull athentication, false otherwise.\n\tfunction authenticate($login, $password)\n\t{\n\t\treturn null;\n\t}\n\t// Generic function called at the end of Tax Report (report 709)\n\t// Can be used e.g. for special database updates on every report printing\n\t// or to print special tax report footer \n\t//\n\t// Returns: nothing\n\tfunction tax_report_done()\n\t{\n\t}\n\t// Following database transaction hooks akcepts array of parameters:\n\t// 'cart' => transaction data\n\t// 'trans_type' => transaction type\n\n\tfunction db_prewrite(&$cart, $trans_type)\n\t{\n\t\treturn true;\n\t}\n\n\tfunction db_postwrite(&$cart, $trans_type)\n\t{\n\t\treturn true;\n\t}\n\n\tfunction db_prevoid($trans_type, $trans_no)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called after module install.\n\t*/\n\tfunction install_extension($check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called after module uninstall.\n\t*/\n\tfunction uninstall_extension($check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called on extension activation for company.\n\t*/\n\tfunction activate_extension($company, $check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called when extension is deactivated for company.\n\t*/\n\tfunction deactivate_extension($company, $check_only=true)\n\t{\n\t\treturn true;\n\t}\n\n\t/*\n\t * Returns the quantity allowed to be dispatched for a particular item \n\t * and a status (which can be used to style the row).\n\t * This quantity would be the default value on the delivery note.\n\t * The usual use case for this is when a item is in stock,\n\t * but has been reserved by someone else.\n\t * This allows extensions to implements its own priority algorithm.\n\t * This function is by detail_id and not item in case the item is present\n\t * more than one in  the cart.\n\t */\n\t/* Default behavior check if there is enough quantity on hand and change the css\n * class if needed */\n\tstatic function  default_get_dispatchable_quantity($line_item, $location, $date, $qoh) {\n    global $SysPrefs;\n\n\t\tif ($SysPrefs->allow_negative_stock() || ($line_item->qty_dispatched <= $qoh)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn array($qoh, 'stockmankobg');\n\t\treturn array($line_item->qty_dispatched, 'stockmankobg');\n\t}\n\n}\n\n/*\n\tInstalls hooks provided by extension modules\n*/\nfunction install_hooks()\n{\n\tglobal $path_to_root, $Hooks, $installed_extensions;\n\n\t$Hooks = array();\n\t\n\t// include current language related $Hooks object if locale file exists\n\tif (file_exists($path_to_root . \"/lang/\".$_SESSION['language']->code.\"/locale.inc\"))\n\t{\n\t\tinclude_once($path_to_root . \"/lang/\".$_SESSION['language']->code.\"/locale.inc\");\n\t\t$code = $_SESSION['language']->code;\n\t\t$hook_class = 'hooks_'.$code;\n\t\t$Hooks[$code] = new $hook_class;\n\t\tunset($code, $hook_class);\n\t}\n\t// install hooks provided by active extensions\n\tforeach($installed_extensions as $ext) {\n\t\t\t$hook_class = 'hooks_'.$ext['package'];\n\t\t\tif ($ext['active'] && class_exists($hook_class)) {\n\t\t\t\t$Hooks[$ext['package']] = new $hook_class;\n\t\t\t}\n\t}\n}\n/*\n\tNon active hooks are not included in $Hooks array, so we can use special function to \n\tactivate.\n*/\nfunction activate_hooks($ext, $comp)\n{\n\tglobal $Hooks;\n\t\n\t$hooks = @$Hooks[$ext];\n\tif (!$hooks) {\n\t\t$hookclass = 'hooks_'.$ext;\n\t\tif (class_exists($hookclass))\n\t\t\t$hooks = new $hookclass;\n\t\telse\n\t\t\treturn true; // extension does not have hooks file\n\t}\n\tif (!$hooks)\n\t\treturn false;\n\telse\n\t\treturn $hooks->activate_extension($comp, false);\n}\n/*\n\tCalls hook $method defined in extension $ext (if any)\n*/\nfunction hook_invoke($ext, $method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\n\t$ret = null;\n\tif (isset($Hooks[$ext]) && method_exists($Hooks[$ext], $method)) {\n\t\tset_ext_domain('modules/'.$ext);\n\t\t$ret = $Hooks[$ext]->$method($data, $opts);\n\t\tset_ext_domain();\n\t} \n\treturn $ret;\n}\n\n/*\n\tCalls hook $methods defined in all extensions (if any)\n*/\nfunction hook_invoke_all($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\t\n\t$return = array();\n\tif (isset($Hooks))\n\t{\n\t\tforeach($Hooks as $ext => $hook)\n\t\t\tif (method_exists($hook, $method)) {\n\t\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t\t$result = $hook->$method($data, $opts);\n\t\t\t\tif (isset($result) && is_array($result)) {\n\t\t\t\t\t$return = array_merge_recursive($return, $result);\n\t\t\t\t} else if (isset($result)) {\n\t\t\t\t\t$return[] = $result;\n\t\t\t\t\t}\n\t\t\t\tset_ext_domain();\n\t\t\t}\n\t}\n\treturn $return;\n}\n/*\n\tReturns first non-null result returned from hook.\n*/\nfunction hook_invoke_first($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\t\n\t$result = null;\n\tforeach($Hooks as $ext => $hook) {\n\t\tif (method_exists($hook, $method)) {\n\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t$result = $hook->$method($data, $opts);\n\t\t\tset_ext_domain();\n\t\t\tif (isset($result))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n/*\n\tReturns last non-null result returned from modules method. Helps implement hooks overriding by \n\textensions installed later.\n*/\nfunction hook_invoke_last($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\n\t$result = null;\n\t$Reverse = array_reverse($Hooks);\n\tforeach($Reverse as $ext => $hook) {\n\t\tif (method_exists($hook, $method)) {\n\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t$result = $hook->$method($data, $opts);\n\t\t\tset_ext_domain();\n\t\t\tif (isset($result))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n//------------------------------------------------------------------------------------------\n//\tDatabase transaction hooks.\n//\t$type - type of transaction (simplifies cart processing)\n//\t$cart - transaction cart\n//\t$args is optional array of parameters\n//\n// For FA 2.3 prewrite, postwrite and prevoid hooks are implemented for following transaction types:\n//\n// ST_BANKPAYMENT, ST_BANKDEPOSIT, ST_BANKTRANSFER,\n// ST_SALESORDER, ST_SALESQUOTE, ST_SALESINVOICE, ST_CUSTCREDIT, ST_CUSTPAYMENT, ST_CUSTDELIVERY,\n// ST_LOCTRANSFER, ST_INVADJUST, \n// ST_PURCHORDER, ST_SUPPINVOICE, ST_SUPPCREDIT, ST_SUPPAYMENT, ST_SUPPRECEIVE,\n// ST_WORKORDER, ST_MANUISSUE, ST_MANURECEIVE, \n\n/*\n\tInvoked after transaction has been read from database to cart.\n\tNot implemented yet.\n*/\n//function hook_db_postread(&$cart, $type)\n//{\n//\thook_invoke_all('db_postread', $cart, $type);\n//}\n\n/*\n\tInvoked before transaction is written to database.\n*/\nfunction hook_db_prewrite(&$cart, $type)\n{\n\treturn hook_invoke_all('db_prewrite', $cart, $type);\n}\n\n/*\n\tInvoked after transaction has been written to database.\n*/\nfunction hook_db_postwrite(&$cart, $type)\n{\n\treturn hook_invoke_all('db_postwrite', $cart, $type);\n}\n/*\n\tInvoked before transaction is voided\n*/\nfunction hook_db_prevoid($type, $type_no)\n{\n\treturn hook_invoke_all('db_prevoid', $type, $type_no);\n}\n\n//-------------------------------------------------------------------------------------------\n//\n//\tVarious hooks\n//\n//\tAlternative exchange rates feeds.\n//\nfunction hook_retrieve_exrate($currency, $date)\n{\n\treturn hook_invoke_last('retrieve_exrate', $currency, $date);\n}\n//\n// Generic function called at the end of Tax Report (report 709)\n//\nfunction hook_tax_report_done()\n{\n\treturn hook_invoke_all('tax_report_done', $dummy);\n}\n//\n//\tAmount in words displayed on various documents (especially sales invoice)\n//\nfunction hook_price_in_words($amount, $document)\n{\n\treturn hook_invoke_last('price_in_words', $amount, $document);\n}\n//\n//\tSession handling hook. This is special case of hook class which have to be run before session is started.\n//\tIf fa_session_manager class is defined in any installed extension, this class provides session handling\n//\tfor application, otherwise standard php session handling is used.\n//\nfunction hook_session_start($company)\n{\n\tif (class_exists('fa_session_manager')) {\n\t\tglobal $SessionManager;\n\t\t$SessionManager = new fa_session_manager($company);\n\t\treturn $SessionManager->installed;\n\t}\n\treturn false;\n}\n//\n//\tThird party authentication modules.\n//\tReturns true after successfull authentication, false otherwise, null if no login hook is defined.\n//\nfunction hook_authenticate($login, $password)\n{\n\treturn hook_invoke_last('authenticate', $login, $password);\n}\n\n\t/*\n\t * Returns the quantity allowed to be dispatched for a particular item \n\t * and a \"reason\" (css classes).\n\t * This quantity would be the default value on the delivery note.\n\t * The usual use case for this is when a item is in stock,\n\t * but has been reserved by someone else.\n\t * This allows extensions to implements its own priority algorithm.\n\t * This function is by detail_id and not item in case the item is present\n\t * more than one in  the cart.\n\t * If 'skip' is returned, the line will be skipped and not displayed\n\t */\nfunction hook_get_dispatchable_quantity($line_item, $location, $date, $qoh) {\n\t\t$result =  hook_invoke_first('get_dispatchable_quantity', $line_item, array($location, $date, $qoh));\n\t\treturn $result !== null ? $result : hooks::default_get_dispatchable_quantity($line_item, $location, $date, $qoh);\n}\n"], "fixing_code": ["<?php\n/**********************************************************************\n    Copyright (C) FrontAccounting, LLC.\n\tReleased under the terms of the GNU General Public License, GPL, \n\tas published by the Free Software Foundation, either version 3 \n\tof the License, or (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n    See the License here <http://www.gnu.org/licenses/gpl-3.0.html>.\n***********************************************************************/\n$page_security = 'SA_CREATEMODULES';\n$path_to_root=\"..\";\ninclude_once($path_to_root . \"/includes/session.inc\");\ninclude_once($path_to_root.\"/includes/packages.inc\");\n\nif ($use_popup_windows) {\n\t$js = get_js_open_window(900, 500);\n}\npage(_($help_context = \"Install/Activate extensions\"));\n\ninclude_once($path_to_root . \"/includes/date_functions.inc\");\ninclude_once($path_to_root . \"/admin/db/company_db.inc\");\ninclude_once($path_to_root . \"/admin/db/maintenance_db.inc\");\ninclude_once($path_to_root . \"/includes/ui.inc\");\n\nsimple_page_mode(true);\n\n//---------------------------------------------------------------------------------------------\nfunction local_extension($id)\n{\n\tglobal $next_extension_id, $Ajax, $path_to_root;\n\n\t$exts = get_company_extensions();\n\t$exts[$next_extension_id++] = array(\n\t\t\t'package' => $id,\n\t\t\t'name' => $id,\n\t\t\t'version' => '-',\n\t\t\t'available' => '',\n\t\t\t'type' => 'extension',\n\t\t\t'path' => 'modules/'.$id,\n\t\t\t'active' => false\n\t);\n\n\tif (file_exists($path_to_root.'/modules/'.clean_file_name($id).'/hooks.php')) {\n\t\tinclude_once($path_to_root.'/modules/'.clean_file_name($id).'/hooks.php');\n\t}\n\t$hooks_class = 'hooks_'.$id;\n\tif (class_exists($hooks_class, false)) {\n\t\t$hooks = new $hooks_class;\n\t\t$hooks->install_extension(false);\n\t}\n\t$Ajax->activate('ext_tbl'); // refresh settings display\n\tif (!update_extensions($exts))\n\t\treturn false;\n\treturn true;\n}\n\nfunction handle_delete($id)\n{\n\tglobal $path_to_root;\n\t\n\t$extensions = get_company_extensions();\n\t$ext = $extensions[$id];\n\tif ($ext['version'] != '-') {\n\t\tif (!uninstall_package($ext['package']))\n\t\t\treturn false;\n\t} else {\n\t\t@include_once($path_to_root.'/'.$ext['path'].'/hooks.php');\n\t\t$hooks_class = 'hooks_'.$ext['package'];\n\t\tif (class_exists($hooks_class)) {\n\t\t\t$hooks = new $hooks_class;\n\t\t\t$hooks->uninstall_extension(false);\n\t\t}\n\t}\n\tunset($extensions[$id]);\n\tif (update_extensions($extensions)) {\n\t\tdisplay_notification(_(\"Selected extension has been successfully deleted\"));\n\t}\n\treturn true;\n}\n//\n// Helper for formating menu tabs/entries to be displayed in extension table\n//\nfunction fmt_titles($defs)\n{\n\t\tif (!$defs) return '';\n\t\tforeach($defs as $def) {\n\t\t\t$str[] = access_string($def['title'], true);\n\t\t}\n\t\treturn implode('<br>', array_values($str));\n}\n//---------------------------------------------------------------------------------------------\n//\n// Display list of all extensions - installed and available from repository\n//\nfunction display_extensions()\n{\n\tglobal $installed_extensions;\n\t\n\tdiv_start('ext_tbl');\n\tstart_table(TABLESTYLE);\n\n\t$th = array(_(\"Extension\"),_(\"Modules provided\"), _(\"Options provided\"),\n\t\t _(\"Installed\"), _(\"Available\"),  \"\", \"\");\n\ttable_header($th);\n\n\t$k = 0;\n\t$mods = get_extensions_list('extension');\n\n\tforeach($mods as $pkg_name => $ext)\n\t{\n\t\t$available = @$ext['available'];\n\t\t$installed = @$ext['version'];\n\t\t$id = @$ext['local_id'];\n\n\t\t$entries = fmt_titles(@$ext['entries']);\n\t\t$tabs = fmt_titles(@$ext['tabs']);\n\n\t\talt_table_row_color($k);\n\n\t\tlabel_cell($available ? get_package_view_str($pkg_name, $ext['name']) : $ext['name']);\n\t\tlabel_cell($tabs);\n\t\tlabel_cell($entries);\n\n\t\tlabel_cell($id === null ? _(\"None\") :\n\t\t\t($available && $installed ? $installed : _(\"Unknown\")));\n\t\tlabel_cell($available ? $available : _(\"Unknown\"));\n\n\t\tif (!$available && $ext['type'] == 'extension')\t{// third-party plugin\n\t\t\tif (!$installed)\n\t\t\t\tbutton_cell('Local'.$ext['package'], _(\"Install\"), _('Install third-party extension.'), \n\t\t\t\t\tICON_DOWN);\n\t\t\telse\n\t\t\t\tlabel_cell('');\n\t\t} elseif (check_pkg_upgrade($installed, $available)) // outdated or not installed extension in repo\n\t\t\tbutton_cell('Update'.$pkg_name, $installed ? _(\"Update\") : _(\"Install\"),\n\t\t\t\t_('Upload and install latest extension package'), ICON_DOWN);\n\t\telse\n\t\t\tlabel_cell('');\n\n\t\tif ($id !== null) {\n\t\t\tdelete_button_cell('Delete'.$id, _('Delete'));\n\t\t\tsubmit_js_confirm('Delete'.$id, \n\t\t\t\tsprintf(_(\"You are about to remove package \\'%s\\'.\\nDo you want to continue ?\"), \n\t\t\t\t\t$ext['name']));\n\t\t} else\n\t\t\tlabel_cell('');\n\n\t\tend_row();\n\t}\n\n\tend_table(1);\n\n\tsubmit_center_first('Refresh', _(\"Update\"), '', null);\n\n\tdiv_end();\n}\n//---------------------------------------------------------------------------------\n//\n// Get all installed extensions and display\n// with current status stored in company directory.\n//\nfunction company_extensions($id)\n{\n\tstart_table(TABLESTYLE);\n\t\n\t$th = array(_(\"Extension\"),_(\"Modules provided\"), _(\"Options provided\"), _(\"Active\"));\n\t\n\t$mods = get_company_extensions();\n\t$exts = get_company_extensions($id);\n\tforeach($mods as $key => $ins) {\n\t\tforeach($exts as $ext)\n\t\t\tif ($ext['name'] == $ins['name']) {\n\t\t\t\t$mods[$key]['active'] = @$ext['active'];\n\t\t\t\tcontinue 2;\n\t\t\t}\n\t}\n\t$mods = array_natsort($mods, null, 'name');\n\ttable_header($th);\n\t$k = 0;\n\tforeach($mods as $i => $mod)\n\t{\n\t\tif ($mod['type'] != 'extension') continue;\n   \t\talt_table_row_color($k);\n\t\tlabel_cell($mod['name']);\n\t\t$entries = fmt_titles(@$mod['entries']);\n\t\t$tabs = fmt_titles(@$mod['tabs']);\n\t\tlabel_cell($tabs);\n\t\tlabel_cell($entries);\n\n\t\tcheck_cells(null, 'Active'.$i, @$mod['active'] ? 1:0, \n\t\t\tfalse, false, \"align='center'\");\n\t\tend_row();\n\t}\n\n\tend_table(1);\n\tsubmit_center('Refresh', _('Update'), true, false, 'default');\n}\n\n//---------------------------------------------------------------------------------------------\nif ($Mode == 'Delete')\n{\n\thandle_delete($selected_id);\n\t$Mode = 'RESET';\n}\n\nif (get_post('Refresh')) {\n\t$comp = get_post('extset');\n\t$exts = get_company_extensions($comp);\n\n\t$result = true;\n\tforeach($exts as $i => $ext) {\n\t\tif ($ext['package'] && ($ext['active'] ^ check_value('Active'.$i))) {\n\t\t\tif (!$ext['active'])\n\t\t\t\t$activated = activate_hooks($ext['package'], $comp);\n\t\t\telse\n\t\t\t\t$activated = hook_invoke($ext['package'], check_value('Active'.$i) ?\n\t\t\t\t 'activate_extension':'deactivate_extension', $comp, false);\n\t\t\tif ($activated !== null)\n\t\t\t\t$result &= $activated;\n\t\t\tif ($activated || ($activated === null))\n\t\t\t\t$exts[$i]['active'] = check_value('Active'.$i);\n\t\t}\n\t}\n\twrite_extensions($exts, get_post('extset'));\n\tif (get_post('extset') == user_company())\n\t\t$installed_extensions = $exts;\n\t\n\tif(!$result) {\n\t\tdisplay_error(_('Status change for some extensions failed.'));\n\t\t$Ajax->activate('ext_tbl'); // refresh settings display\n\t}else\n\t\tdisplay_notification(_('Current active extensions set has been saved.'));\n}\n\nif ($id = find_submit('Update', false))\n\tinstall_extension($id);\n\nif ($id = find_submit('Local', false))\n\tlocal_extension($id);\n\nif ($Mode == 'RESET')\n{\n\t$selected_id = -1;\n\tunset($_POST);\n}\n\n//---------------------------------------------------------------------------------------------\nstart_form(true);\nif (list_updated('extset'))\n\t$Ajax->activate('_page_body');\n\n$set = get_post('extset', -1);\n\necho \"<center>\" . _('Extensions:') . \"&nbsp;&nbsp;\";\necho extset_list('extset', null, true);\necho \"</center><br>\";\n\nif ($set == -1) \n\tdisplay_extensions();\nelse \n\tcompany_extensions($set);\n\n//---------------------------------------------------------------------------------------------\nend_form();\n\nend_page();\n?>", "<?php\n/**********************************************************************\n    Copyright (C) FrontAccounting, LLC.\n\tReleased under the terms of the GNU General Public License, GPL, \n\tas published by the Free Software Foundation, either version 3 \n\tof the License, or (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n    See the License here <http://www.gnu.org/licenses/gpl-3.0.html>.\n***********************************************************************/\n//\n// FrontAccounting extension modules integration.\n// This file is included in session.inc even before session is started,\n// and includes hooks.php connector files from all installed extensions.\n// To make hooks active install_hooks() have to be called after interface\n// language is set.\n//\n// To find how various hooks are processed look into respective hook_* functions below.\n//\nclass hooks {\n\tvar $module_name; // extension module name.\n\n\t// \n\t// Helper for updating databases with extension scheme\n\t//\n\t// $comp can be company number, -1 for all, \n\t// $updates - table of filename => array(table, field, property)\n\t// $check_only - don't update database, check table/field/property existence only\n\t//\n\tfunction update_databases($comp, $updates, $check_only=false)\n\t{\n\t\tglobal $db_connections, $path_to_root;\n\t\n\t\tif ($comp == -1) \n\t\t\t$conn = $db_connections;\n\t\telse\n\t\t\t$conn = array( $comp => $db_connections[$comp]);\n\t\t$result = true;\n\n\t\tforeach($conn as $comp => $con) {\n\t\t\tset_global_connection($comp);\n\t\t\tforeach($updates as $file => $update) {\n\t\t\t\t$table = @$update[0];\n\t\t\t\t$field = @$update[1];\n\t\t\t\t$properties = @$update[2];\n\n\t\t\t\t$ok = check_table($con['tbpref'], $table, $field, $properties) == 0;\n\n\t\t\t\tif (!$check_only && !$ok) {\n\t\t\t\t\t$ok = db_import($path_to_root.'/modules/'.$this->module_name.'/sql/'.$file,\n\t\t\t\t\t\t$con);\n\t\t\t\t}\n\t\t\t\t$result &= $ok;\n\t\t\t\tif (!$result)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdb_close();\n\t\t\tif (!$result)\n\t\t\t\tbreak;\n\t\t}\n\t\tset_global_connection(0); // return to siteadmin account\n\n\t\treturn $result;\n\t}\n\t//\n\t//\tInstall additional tabs provided by extension\n\t//\n\tfunction install_tabs($app)\n\t{\n//\t\t$app->add_application(new example_class); // add menu tab defined by example_class\n\t}\n\t//\n\t//\tInstall additonal menu options provided by extension\n\t//\n\tfunction install_options($app)\n\t{\n//\t\tglobal $path_to_root;\n//\n//\t\tswitch($app->id) {\n//\t\t\tcase 'orders':\n//\t\t\t\t$app->add_rapp_function( 0, _(\"&Example option\"), \n//\t\t\t\t\t$path_to_root.'/modules/example/example.php?', 'SA_OPEN');\n//\t\t}\n\t}\n\t\n\tfunction install_access()\n\t{\n//\t\t$security_areas['SA_EXAMPLE'] = array(SS_EXAMPLE|100, _(\"Example security area.\"));\n//\n//\t\t$security_sections = array(SS_EXAMPLE => _(\"Example module implementation\"));\n//\n//\t\treturn array($security_areas, $security_sections);\n\t}\n\n\t//\n\t//\tInvoked for all modules before page header is displayed\n\t//\n\tfunction pre_header($fun_args)\n\t{\n\t}\n\t//\n\t//\tInvoked for all modules before page footer is displayed\n\t//\n\tfunction pre_footer($fun_args)\n\t{\n\t}\n\n\t//\n\t// Price in words. $doc_type is set to document type and can be used to suppress \n\t// price in words printing for selected document types.\n\t// Used instead of built in simple english price_in_words() function.\n\t//\n\t//\tReturns: amount in words as string.\n\n\tfunction price_in_words($amount, $doc_type)\n\t{\n\t}\n\t//\n\t// Exchange rate currency $curr as on date $date.\n\t// Keep in mind FA has internally implemented 3 exrate providers\n\t// If any of them supports your currency, you can simply use function below\n\t// with apprioprate provider set, otherwise implement your own.\n\t// Returns: $curr value in home currency units as a real number.\n\n\tfunction retrieve_exrate($curr, $date)\n\t{\n//\t \t$provider = 'ECB'; // 'ECB', 'YAHOO' or 'GOOGLE'\n//\t\treturn get_extern_rate($curr, $provider, $date);\n\t\treturn null;\n\t}\n\n\t// External authentication\n\t// If used should return true after successfull athentication, false otherwise.\n\tfunction authenticate($login, $password)\n\t{\n\t\treturn null;\n\t}\n\t// Generic function called at the end of Tax Report (report 709)\n\t// Can be used e.g. for special database updates on every report printing\n\t// or to print special tax report footer \n\t//\n\t// Returns: nothing\n\tfunction tax_report_done()\n\t{\n\t}\n\t// Following database transaction hooks akcepts array of parameters:\n\t// 'cart' => transaction data\n\t// 'trans_type' => transaction type\n\n\tfunction db_prewrite(&$cart, $trans_type)\n\t{\n\t\treturn true;\n\t}\n\n\tfunction db_postwrite(&$cart, $trans_type)\n\t{\n\t\treturn true;\n\t}\n\n\tfunction db_prevoid($trans_type, $trans_no)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called after module install.\n\t*/\n\tfunction install_extension($check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called after module uninstall.\n\t*/\n\tfunction uninstall_extension($check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called on extension activation for company.\n\t*/\n\tfunction activate_extension($company, $check_only=true)\n\t{\n\t\treturn true;\n\t}\n\t/*\n\t\tThis method is called when extension is deactivated for company.\n\t*/\n\tfunction deactivate_extension($company, $check_only=true)\n\t{\n\t\treturn true;\n\t}\n\n\t/*\n\t * Returns the quantity allowed to be dispatched for a particular item \n\t * and a status (which can be used to style the row).\n\t * This quantity would be the default value on the delivery note.\n\t * The usual use case for this is when a item is in stock,\n\t * but has been reserved by someone else.\n\t * This allows extensions to implements its own priority algorithm.\n\t * This function is by detail_id and not item in case the item is present\n\t * more than one in  the cart.\n\t */\n\t/* Default behavior check if there is enough quantity on hand and change the css\n * class if needed */\n\tstatic function  default_get_dispatchable_quantity($line_item, $location, $date, $qoh) {\n    global $SysPrefs;\n\n\t\tif ($SysPrefs->allow_negative_stock() || ($line_item->qty_dispatched <= $qoh)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn array($qoh, 'stockmankobg');\n\t\treturn array($line_item->qty_dispatched, 'stockmankobg');\n\t}\n\n}\n\n/*\n\tInstalls hooks provided by extension modules\n*/\nfunction install_hooks()\n{\n\tglobal $path_to_root, $Hooks, $installed_extensions;\n\n\t$Hooks = array();\n\t\n\t// include current language related $Hooks object if locale file exists\n\t$lang_code  = clean_file_name($_SESSION['language']->code);\n\tif (file_exists($path_to_root . \"/lang/\" . $lang_code . \"/locale.inc\"))\n\t{\n\t\tinclude_once($path_to_root . \"/lang/\" . $lang_code . \"/locale.inc\");\n\t\t$code = $_SESSION['language']->code;\n\t\t$hook_class = 'hooks_'.$code;\n\t\t$Hooks[$code] = new $hook_class;\n\t\tunset($code, $hook_class);\n\t}\n\t// install hooks provided by active extensions\n\tforeach($installed_extensions as $ext) {\n\t\t\t$hook_class = 'hooks_'.$ext['package'];\n\t\t\tif ($ext['active'] && class_exists($hook_class)) {\n\t\t\t\t$Hooks[$ext['package']] = new $hook_class;\n\t\t\t}\n\t}\n}\n/*\n\tNon active hooks are not included in $Hooks array, so we can use special function to \n\tactivate.\n*/\nfunction activate_hooks($ext, $comp)\n{\n\tglobal $Hooks;\n\t\n\t$hooks = @$Hooks[$ext];\n\tif (!$hooks) {\n\t\t$hookclass = 'hooks_'.$ext;\n\t\tif (class_exists($hookclass))\n\t\t\t$hooks = new $hookclass;\n\t\telse\n\t\t\treturn true; // extension does not have hooks file\n\t}\n\tif (!$hooks)\n\t\treturn false;\n\telse\n\t\treturn $hooks->activate_extension($comp, false);\n}\n/*\n\tCalls hook $method defined in extension $ext (if any)\n*/\nfunction hook_invoke($ext, $method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\n\t$ret = null;\n\tif (isset($Hooks[$ext]) && method_exists($Hooks[$ext], $method)) {\n\t\tset_ext_domain('modules/'.$ext);\n\t\t$ret = $Hooks[$ext]->$method($data, $opts);\n\t\tset_ext_domain();\n\t} \n\treturn $ret;\n}\n\n/*\n\tCalls hook $methods defined in all extensions (if any)\n*/\nfunction hook_invoke_all($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\t\n\t$return = array();\n\tif (isset($Hooks))\n\t{\n\t\tforeach($Hooks as $ext => $hook)\n\t\t\tif (method_exists($hook, $method)) {\n\t\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t\t$result = $hook->$method($data, $opts);\n\t\t\t\tif (isset($result) && is_array($result)) {\n\t\t\t\t\t$return = array_merge_recursive($return, $result);\n\t\t\t\t} else if (isset($result)) {\n\t\t\t\t\t$return[] = $result;\n\t\t\t\t\t}\n\t\t\t\tset_ext_domain();\n\t\t\t}\n\t}\n\treturn $return;\n}\n/*\n\tReturns first non-null result returned from hook.\n*/\nfunction hook_invoke_first($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\t\n\t$result = null;\n\tforeach($Hooks as $ext => $hook) {\n\t\tif (method_exists($hook, $method)) {\n\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t$result = $hook->$method($data, $opts);\n\t\t\tset_ext_domain();\n\t\t\tif (isset($result))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n/*\n\tReturns last non-null result returned from modules method. Helps implement hooks overriding by \n\textensions installed later.\n*/\nfunction hook_invoke_last($method, &$data, $opts=null)\n{\n\n\tglobal $Hooks;\n\n\t$result = null;\n\t$Reverse = array_reverse($Hooks);\n\tforeach($Reverse as $ext => $hook) {\n\t\tif (method_exists($hook, $method)) {\n\t\t\tset_ext_domain('modules/'.$ext);\n\t\t\t$result = $hook->$method($data, $opts);\n\t\t\tset_ext_domain();\n\t\t\tif (isset($result))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n//------------------------------------------------------------------------------------------\n//\tDatabase transaction hooks.\n//\t$type - type of transaction (simplifies cart processing)\n//\t$cart - transaction cart\n//\t$args is optional array of parameters\n//\n// For FA 2.3 prewrite, postwrite and prevoid hooks are implemented for following transaction types:\n//\n// ST_BANKPAYMENT, ST_BANKDEPOSIT, ST_BANKTRANSFER,\n// ST_SALESORDER, ST_SALESQUOTE, ST_SALESINVOICE, ST_CUSTCREDIT, ST_CUSTPAYMENT, ST_CUSTDELIVERY,\n// ST_LOCTRANSFER, ST_INVADJUST, \n// ST_PURCHORDER, ST_SUPPINVOICE, ST_SUPPCREDIT, ST_SUPPAYMENT, ST_SUPPRECEIVE,\n// ST_WORKORDER, ST_MANUISSUE, ST_MANURECEIVE, \n\n/*\n\tInvoked after transaction has been read from database to cart.\n\tNot implemented yet.\n*/\n//function hook_db_postread(&$cart, $type)\n//{\n//\thook_invoke_all('db_postread', $cart, $type);\n//}\n\n/*\n\tInvoked before transaction is written to database.\n*/\nfunction hook_db_prewrite(&$cart, $type)\n{\n\treturn hook_invoke_all('db_prewrite', $cart, $type);\n}\n\n/*\n\tInvoked after transaction has been written to database.\n*/\nfunction hook_db_postwrite(&$cart, $type)\n{\n\treturn hook_invoke_all('db_postwrite', $cart, $type);\n}\n/*\n\tInvoked before transaction is voided\n*/\nfunction hook_db_prevoid($type, $type_no)\n{\n\treturn hook_invoke_all('db_prevoid', $type, $type_no);\n}\n\n//-------------------------------------------------------------------------------------------\n//\n//\tVarious hooks\n//\n//\tAlternative exchange rates feeds.\n//\nfunction hook_retrieve_exrate($currency, $date)\n{\n\treturn hook_invoke_last('retrieve_exrate', $currency, $date);\n}\n//\n// Generic function called at the end of Tax Report (report 709)\n//\nfunction hook_tax_report_done()\n{\n\treturn hook_invoke_all('tax_report_done', $dummy);\n}\n//\n//\tAmount in words displayed on various documents (especially sales invoice)\n//\nfunction hook_price_in_words($amount, $document)\n{\n\treturn hook_invoke_last('price_in_words', $amount, $document);\n}\n//\n//\tSession handling hook. This is special case of hook class which have to be run before session is started.\n//\tIf fa_session_manager class is defined in any installed extension, this class provides session handling\n//\tfor application, otherwise standard php session handling is used.\n//\nfunction hook_session_start($company)\n{\n\tif (class_exists('fa_session_manager')) {\n\t\tglobal $SessionManager;\n\t\t$SessionManager = new fa_session_manager($company);\n\t\treturn $SessionManager->installed;\n\t}\n\treturn false;\n}\n//\n//\tThird party authentication modules.\n//\tReturns true after successfull authentication, false otherwise, null if no login hook is defined.\n//\nfunction hook_authenticate($login, $password)\n{\n\treturn hook_invoke_last('authenticate', $login, $password);\n}\n\n\t/*\n\t * Returns the quantity allowed to be dispatched for a particular item \n\t * and a \"reason\" (css classes).\n\t * This quantity would be the default value on the delivery note.\n\t * The usual use case for this is when a item is in stock,\n\t * but has been reserved by someone else.\n\t * This allows extensions to implements its own priority algorithm.\n\t * This function is by detail_id and not item in case the item is present\n\t * more than one in  the cart.\n\t * If 'skip' is returned, the line will be skipped and not displayed\n\t */\nfunction hook_get_dispatchable_quantity($line_item, $location, $date, $qoh) {\n\t\t$result =  hook_invoke_first('get_dispatchable_quantity', $line_item, array($location, $date, $qoh));\n\t\treturn $result !== null ? $result : hooks::default_get_dispatchable_quantity($line_item, $location, $date, $qoh);\n}\n"], "filenames": ["admin/inst_module.php", "includes/hooks.inc"], "buggy_code_start_loc": [45, 228], "buggy_code_end_loc": [47, 231], "fixing_code_start_loc": [45, 228], "fixing_code_end_loc": [47, 232], "type": "CWE-22", "message": "A vulnerability has been found in frontaccounting faplanet and classified as critical. This vulnerability affects unknown code. The manipulation leads to path traversal. The name of the patch is a5dcd87f46080a624b1a9ad4b0dd035bbd24ac50. It is recommended to apply a patch to fix this issue. VDB-218398 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125080", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T18:15:10.147", "lastModified": "2023-01-24T19:12:56.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in frontaccounting faplanet and classified as critical. This vulnerability affects unknown code. The manipulation leads to path traversal. The name of the patch is a5dcd87f46080a624b1a9ad4b0dd035bbd24ac50. It is recommended to apply a patch to fix this issue. VDB-218398 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:faplanet_project:faplanet:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-05-21", "matchCriteriaId": "3BCC66BE-AF02-4710-AA45-55A48D6DC4BE"}]}]}], "references": [{"url": "https://github.com/frontaccounting/faplanet/commit/a5dcd87f46080a624b1a9ad4b0dd035bbd24ac50", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218398", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218398", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/frontaccounting/faplanet/commit/a5dcd87f46080a624b1a9ad4b0dd035bbd24ac50"}}