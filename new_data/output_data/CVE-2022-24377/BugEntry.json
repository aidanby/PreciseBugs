{"buggy_code": ["import { Extension, ScanResult, ReportVO, PackageJson, FileImportDescription } from \"./type\";\nimport { sync } from \"glob\";\nimport { join as pathJoin, dirname, join, normalize, relative } from \"path\";\nimport { join as arrayJoin, map, isArray, isString, concat, filter, keys } from \"@newdash/newdash\";\nimport { includes } from \"@newdash/newdash/includes\"\nimport { readFileSync, writeFileSync, existsSync } from \"fs\";\nimport { cwd } from \"process\";\nimport { tmpdir, platform } from \"os\";\nimport { exec } from \"child_process\";\n\nrequire.extensions[\".ts\"] = require.extensions[\".js\"]\nrequire.extensions[\".jsx\"] = require.extensions[\".js\"]\nrequire.extensions[\".tsx\"] = require.extensions[\".js\"]\nrequire.extensions[\".mjs\"] = require.extensions[\".js\"]\n\nconst extensions = [\n  \"js\", \"jsx\", \"ts\", \"tsx\", \"mjs\"\n]\n\nconst { resolve } = require\n\nexport const allDependencies = (absPath: string) => {\n  return concatAllDependencies(findProjectPackageJson(absPath))\n}\n\nexport const concatAllDependencies = (json: PackageJson): string[] => {\n  try {\n    const { dependencies, devDependencies, peerDependencies } = json;\n    var rt = [];\n    if (dependencies) {\n      rt = concat(rt, keys(dependencies))\n    }\n    if (devDependencies) {\n      rt = concat(rt, keys(devDependencies))\n    }\n    if (peerDependencies) {\n      rt = concat(rt, keys(peerDependencies))\n    }\n    return rt;\n  } catch (error) {\n    throw new Error(\"please run cycle-import-check in npm project (with project.json)\")\n  }\n\n}\n\nexport const findProjectPackageJson = (absPath: string): PackageJson => {\n  const finder = require(\"find-package-json\")(absPath)\n  return finder.next().value;\n}\n\nexport const filterNodeDependenciesImport = (descriptions: FileImportDescription[], dependencies: string[]) => {\n  // @ts-ignore\n  return filter(descriptions, i => !includes(dependencies, i.importFile))\n}\n\n/**\n * list all acceptable files in a specific directory\n *\n * @param dir\n * @param ext\n */\nexport const listAllFile = (dir: string, ext: Extension[] = []) => {\n  return sync(pathJoin(dir, `./**/*.{${arrayJoin(ext, \",\")}}`), {\n    realpath: true,\n    ignore: [\n      \"**/node_modules/**\"\n    ]\n  })\n}\n\n/**\n * read file content\n *\n * @param absolutePath\n */\nexport const readFile = (absolutePath: string) => {\n  return readFileSync(absolutePath, { encoding: \"utf8\" })\n}\n\n/**\n * will throw error if file not exist\n *\n * @param fromFileAbsolutePath\n * @param importFileRelativePath\n */\nexport const resolveFilePath = (fromFileAbsolutePath: string, importFileRelativePath: string) => {\n  const dir = dirname(fromFileAbsolutePath);\n  const targetPath = join(dir, importFileRelativePath);\n  // to do replace nodejs resolve function\n  try {\n    return normalize(resolve(targetPath));\n  } catch (error) {\n    // can not resolve import file\n    return \"\"\n  }\n}\n\n/**\n * map absolute path to relative path\n *\n * @param paths\n */\nexport const mapAbsPathsToRelPaths = (paths: string | string[]): string | string[] => {\n  if (isString(paths)) {\n    return relative(cwd(), paths)\n  }\n  if (isArray(paths)) {\n    return map(paths, p => relative(cwd(), p))\n  }\n}\n\nexport const mapScanResultToReportVO = (result: ScanResult): ReportVO => {\n  var rt: ReportVO = { nodes: [], links: [] }\n  rt.nodes = map(result.nodes, n => ({ name: (mapAbsPathsToRelPaths(n) as string) }))\n  rt.links = map(result.imports, i => ({\n    source: (mapAbsPathsToRelPaths(i.fromFile) as string),\n    target: (mapAbsPathsToRelPaths(i.importFile) as string),\n    value: i.code,\n  }))\n  return rt;\n}\n\nexport const writeFileToTmpDirAndOpenIt = (filename: string, content: string) => {\n  const path = join(tmpdir(), filename);\n  writeFileSync(path, content);\n  if (platform() === \"win32\") {\n    exec(`start ${path}`)\n  } else {\n    exec(`open ${path}`)\n  }\n}\n", "\n\nexport { scanDirectoryWithResult } from \"./scanner\"\n\nexport { writeFileToTmpDirAndOpenIt } from \"./file\"\n\nexport { calculateCycleImport } from \"./graph\"\n\n"], "fixing_code": ["import { concat, filter, isArray, isString, join as arrayJoin, keys, map } from \"@newdash/newdash\";\nimport { includes } from \"@newdash/newdash/includes\";\nimport { readFileSync } from \"fs\";\nimport { sync } from \"glob\";\nimport { dirname, join, join as pathJoin, normalize, relative } from \"path\";\nimport { cwd } from \"process\";\nimport { Extension, FileImportDescription, PackageJson, ReportVO, ScanResult } from \"./type\";\n\nrequire.extensions[\".ts\"] = require.extensions[\".js\"]\nrequire.extensions[\".jsx\"] = require.extensions[\".js\"]\nrequire.extensions[\".tsx\"] = require.extensions[\".js\"]\nrequire.extensions[\".mjs\"] = require.extensions[\".js\"]\n\nconst { resolve } = require\n\nexport const allDependencies = (absPath: string) => {\n  return concatAllDependencies(findProjectPackageJson(absPath))\n}\n\nexport const concatAllDependencies = (json: PackageJson): string[] => {\n  try {\n    const { dependencies, devDependencies, peerDependencies } = json;\n    var rt = [];\n    if (dependencies) {\n      rt = concat(rt, keys(dependencies))\n    }\n    if (devDependencies) {\n      rt = concat(rt, keys(devDependencies))\n    }\n    if (peerDependencies) {\n      rt = concat(rt, keys(peerDependencies))\n    }\n    return rt;\n  } catch (error) {\n    throw new Error(\"please run cycle-import-check in npm project (with project.json)\")\n  }\n\n}\n\nexport const findProjectPackageJson = (absPath: string): PackageJson => {\n  const finder = require(\"find-package-json\")(absPath)\n  return finder.next().value;\n}\n\nexport const filterNodeDependenciesImport = (descriptions: FileImportDescription[], dependencies: string[]) => {\n  // @ts-ignore\n  return filter(descriptions, i => !includes(dependencies, i.importFile))\n}\n\n/**\n * list all acceptable files in a specific directory\n *\n * @param dir\n * @param ext\n */\nexport const listAllFile = (dir: string, ext: Extension[] = []) => {\n  return sync(pathJoin(dir, `./**/*.{${arrayJoin(ext, \",\")}}`), {\n    realpath: true,\n    ignore: [\n      \"**/node_modules/**\"\n    ]\n  })\n}\n\n/**\n * read file content\n *\n * @param absolutePath\n */\nexport const readFile = (absolutePath: string) => {\n  return readFileSync(absolutePath, { encoding: \"utf8\" })\n}\n\n/**\n * will throw error if file not exist\n *\n * @param fromFileAbsolutePath\n * @param importFileRelativePath\n */\nexport const resolveFilePath = (fromFileAbsolutePath: string, importFileRelativePath: string) => {\n  const dir = dirname(fromFileAbsolutePath);\n  const targetPath = join(dir, importFileRelativePath);\n  // to do replace nodejs resolve function\n  try {\n    return normalize(resolve(targetPath));\n  } catch (error) {\n    // can not resolve import file\n    return \"\"\n  }\n}\n\n/**\n * map absolute path to relative path\n *\n * @param paths\n */\nexport const mapAbsPathsToRelPaths = (paths: string | string[]): string | string[] => {\n  if (isString(paths)) {\n    return relative(cwd(), paths)\n  }\n  if (isArray(paths)) {\n    return map(paths, p => relative(cwd(), p))\n  }\n}\n\nexport const mapScanResultToReportVO = (result: ScanResult): ReportVO => {\n  var rt: ReportVO = { nodes: [], links: [] }\n  rt.nodes = map(result.nodes, n => ({ name: (mapAbsPathsToRelPaths(n) as string) }))\n  rt.links = map(result.imports, i => ({\n    source: (mapAbsPathsToRelPaths(i.fromFile) as string),\n    target: (mapAbsPathsToRelPaths(i.importFile) as string),\n    value: i.code,\n  }))\n  return rt;\n}\n\n", "\n\nexport { scanDirectoryWithResult } from \"./scanner\"\n\nexport { calculateCycleImport } from \"./graph\"\n\n"], "filenames": ["src/file.ts", "src/index.ts"], "buggy_code_start_loc": [1, 5], "buggy_code_end_loc": [132, 7], "fixing_code_start_loc": [1, 4], "fixing_code_end_loc": [116, 4], "type": "CWE-77", "message": "The package cycle-import-check before 1.3.2 are vulnerable to Command Injection via the writeFileToTmpDirAndOpenIt function due to improper user-input sanitization.", "other": {"cve": {"id": "CVE-2022-24377", "sourceIdentifier": "report@snyk.io", "published": "2022-12-14T05:15:11.283", "lastModified": "2022-12-16T17:42:20.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package cycle-import-check before 1.3.2 are vulnerable to Command Injection via the writeFileToTmpDirAndOpenIt function due to improper user-input sanitization."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.4, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cycle-import-check_project:cycle-import-check:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.2", "matchCriteriaId": "EA9DD4AC-A087-4CDA-9A89-C73680BAC5A5"}]}]}], "references": [{"url": "https://github.com/Soontao/cycle-import-check/commit/1ca97b59df7e9c704471fcb4cf042ce76d7c9890", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-CYCLEIMPORTCHECK-3157955", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Soontao/cycle-import-check/commit/1ca97b59df7e9c704471fcb4cf042ce76d7c9890"}}