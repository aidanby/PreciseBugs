{"buggy_code": ["/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n#define TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n\n#include \"tensorflow/core/framework/tensor.h\"\n\nnamespace tensorflow {\n\nclass TensorKey : public Tensor {\n public:\n  using Tensor::Tensor;\n\n  TensorKey(const Tensor& t) : Tensor(t) {}\n\n  // Equality operator. Needed for absl hashing.\n  friend bool operator==(const TensorKey& t1, const TensorKey& t2) {\n    if (t1.dtype() != t2.dtype() || t1.shape() != t2.shape()) {\n      return false;\n    }\n    if (DataTypeCanUseMemcpy(t1.dtype())) {\n      return t1.tensor_data() == t2.tensor_data();\n    }\n    if (t1.dtype() == DT_STRING) {\n      const auto s1 = t1.unaligned_flat<tstring>();\n      const auto s2 = t2.unaligned_flat<tstring>();\n      for (int64_t i = 0, n = t1.NumElements(); i < n; ++i) {\n        if (TF_PREDICT_FALSE(s1(i) != s2(i))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  friend bool operator!=(const TensorKey& t1, const TensorKey& t2) {\n    return !(t1 == t2);\n  }\n\n  // Needed for absl hash function.\n  template <typename H>\n  friend H AbslHashValue(H h, const TensorKey& k) {\n    const uint8* d = static_cast<uint8*>(k.data());\n    size_t s = k.AllocatedBytes();\n    std::vector<uint8> vec;\n    vec.reserve(s);\n    for (int i = 0; i < s; i++) {\n      vec.push_back(d[i]);\n    }\n    return H::combine(std::move(h), s);\n  }\n};\n\n}  // namespace tensorflow\n\n#endif\n", "# Tests of TensorFlow kernels written using the Python API.\n\nload(\"//tensorflow:tensorflow.bzl\", \"cuda_py_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_py_test\")\n\npackage(\n    default_visibility = [\"//tensorflow:internal\"],\n    licenses = [\"notice\"],\n)\n\ntf_py_test(\n    name = \"barrier_ops_test\",\n    size = \"medium\",  # NOTE(ebrevdo): This test is NOT small.\n    srcs = [\"barrier_ops_test.py\"],\n    shard_count = 20,\n    tags = [\n        \"no_mac\",  # TODO(b/129706424): Re-enable this test on Mac.\n        \"nomsan\",  # TODO(b/161902335): Re-enable.\n        \"notsan\",  # TODO(b/161829717): Re-enable.\n    ],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"conditional_accumulator_test\",\n    size = \"small\",\n    srcs = [\"conditional_accumulator_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:state_ops\",\n        \"//tensorflow/python:variables\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"dynamic_partition_op_test\",\n    size = \"medium\",\n    srcs = [\"dynamic_partition_op_test.py\"],\n    tags = [\n        \"multi_and_single_gpu\",\n    ],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_grad\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:gradients\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"dynamic_stitch_op_test\",\n    size = \"small\",\n    srcs = [\"dynamic_stitch_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_grad\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:gradients\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"fifo_queue_test\",\n    size = \"small\",\n    srcs = [\"fifo_queue_test.py\"],\n    tags = [\"no_rocm\"],\n    deps = [\n        \"//tensorflow/core:protos_all_py\",\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:util\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"listdiff_op_test\",\n    size = \"small\",\n    srcs = [\"listdiff_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:util\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"list_ops_test\",\n    size = \"small\",\n    srcs = [\"list_ops_test.py\"],\n    grpc_enabled = True,\n    tags = [\n        \"noasan\",  # TODO(b/155406705): flaky\n    ],\n    deps = [\n        \"//tensorflow/core:protos_all_py\",\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients_impl\",\n        \"//tensorflow/python:list_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:tensor_shape\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n        \"@absl_py//absl/testing:parameterized\",\n    ],\n)\n\ntf_py_test(\n    name = \"lookup_ops_test\",\n    size = \"small\",\n    srcs = [\"lookup_ops_test.py\"],\n    grpc_enabled = True,\n    deps = [\n        \"//tensorflow/python:client\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:lookup_ops\",\n        \"//tensorflow/python:sparse_tensor\",\n        \"//tensorflow/python:tensor_spec\",\n        \"//tensorflow/python:test_ops\",\n        \"//tensorflow/python:training\",\n        \"//tensorflow/python/data/ops:dataset_ops\",\n        \"//tensorflow/python/data/ops:readers\",\n        \"//tensorflow/python/saved_model:load\",\n        \"//tensorflow/python/saved_model:save\",\n    ],\n)\n\n# TODO(kattian): add GPU capability and change to cuda_py_test\ntf_py_test(\n    name = \"map_ops_test\",\n    size = \"small\",\n    srcs = [\"map_ops_test.py\"],\n    grpc_enabled = True,\n    tags = [\n        \"no_windows\",  # TODO(b/192259628)\n        \"noasan\",  # TODO(b/164696004)\n        \"notsan\",  # TODO(b/164696004)\n    ],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients_impl\",\n        \"//tensorflow/python:map_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:tensor_shape\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n        \"@absl_py//absl/testing:parameterized\",\n    ],\n)\n\ncuda_py_test(\n    name = \"map_stage_op_test\",\n    size = \"medium\",\n    srcs = [\"map_stage_op_test.py\"],\n    tags = [\"no_oss\"],  # b/124474135\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:util\",\n    ],\n)\n\ncuda_py_test(\n    name = \"padding_fifo_queue_test\",\n    size = \"small\",\n    srcs = [\"padding_fifo_queue_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"priority_queue_test\",\n    size = \"medium\",\n    srcs = [\"priority_queue_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:nn_grad\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"stack_ops_test\",\n    size = \"small\",\n    srcs = [\"stack_ops_test.py\"],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:control_flow_ops\",\n        \"//tensorflow/python:data_flow_ops_gen\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"stage_op_test\",\n    size = \"medium\",\n    srcs = [\"stage_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:util\",\n    ],\n)\n\ncuda_py_test(\n    name = \"tensor_array_ops_test\",\n    size = \"medium\",\n    srcs = [\"tensor_array_ops_test.py\"],\n    flaky = 1,  # create_local_cluster sometimes times out.\n    shard_count = 10,\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:cond_v2\",\n        \"//tensorflow/python:control_flow_ops\",\n        \"//tensorflow/python:data_flow_ops_gen\",\n        \"//tensorflow/python:distributed_framework_test_lib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients\",\n        \"//tensorflow/python:init_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:nn_grad\",\n        \"//tensorflow/python:tensor_array_grad\",\n        \"//tensorflow/python:tensor_array_ops\",\n        \"//tensorflow/python:tensor_spec\",\n        \"//tensorflow/python:training\",\n        \"//tensorflow/python:variable_scope\",\n        \"//tensorflow/python:variables\",\n        \"//tensorflow/python:while_v2\",\n        \"//tensorflow/python/data/ops:dataset_ops\",\n        \"//tensorflow/python/eager:backprop\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n    ],\n)\n"], "fixing_code": ["/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#ifndef TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n#define TENSORFLOW_CORE_FRAMEWORK_TENSOR_KEY_H_\n\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/types.h\"\n\nnamespace tensorflow {\n\nclass TensorKey : public Tensor {\n public:\n  using Tensor::Tensor;\n\n  TensorKey(const Tensor& t) : Tensor(t) {}\n\n  // Equality operator. Needed for absl hashing.\n  friend bool operator==(const TensorKey& t1, const TensorKey& t2) {\n    if (t1.dtype() != t2.dtype() || t1.shape() != t2.shape()) {\n      return false;\n    }\n    if (DataTypeCanUseMemcpy(t1.dtype())) {\n      return t1.tensor_data() == t2.tensor_data();\n    } else if (t1.dtype() == DT_STRING) {\n      const auto s1 = t1.unaligned_flat<tstring>();\n      const auto s2 = t2.unaligned_flat<tstring>();\n      for (int64_t i = 0, n = t1.NumElements(); i < n; ++i) {\n        if (TF_PREDICT_FALSE(s1(i) != s2(i))) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      DCHECK(false) << \"Unimplemented dtype \" << DataTypeString(t1.dtype())\n                    << std::endl;\n    }\n    return false;\n  }\n\n  friend bool operator!=(const TensorKey& t1, const TensorKey& t2) {\n    return !(t1 == t2);\n  }\n\n  // Needed for absl hash function.\n  template <typename H>\n  friend H AbslHashValue(H h, const TensorKey& k) {\n    if (DataTypeCanUseMemcpy(k.dtype())) {\n      return H::combine(std::move(h), k.tensor_data());\n    } else if (k.dtype() == DT_STRING) {\n      const auto strs = k.unaligned_flat<tstring>();\n      for (int64_t i = 0, n = k.NumElements(); i < n; ++i) {\n        h = H::combine(std::move(h), strs(i));\n      }\n      return h;\n    } else {\n      DCHECK(false) << \"Unimplemented dtype \" << DataTypeString(k.dtype())\n                    << std::endl;\n    }\n    return h;\n  }\n};\n\n}  // namespace tensorflow\n\n#endif\n", "# Tests of TensorFlow kernels written using the Python API.\n\nload(\"//tensorflow:tensorflow.bzl\", \"cuda_py_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_py_test\")\n\npackage(\n    default_visibility = [\"//tensorflow:internal\"],\n    licenses = [\"notice\"],\n)\n\ntf_py_test(\n    name = \"barrier_ops_test\",\n    size = \"medium\",  # NOTE(ebrevdo): This test is NOT small.\n    srcs = [\"barrier_ops_test.py\"],\n    shard_count = 20,\n    tags = [\n        \"no_mac\",  # TODO(b/129706424): Re-enable this test on Mac.\n        \"nomsan\",  # TODO(b/161902335): Re-enable.\n        \"notsan\",  # TODO(b/161829717): Re-enable.\n    ],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"conditional_accumulator_test\",\n    size = \"small\",\n    srcs = [\"conditional_accumulator_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:state_ops\",\n        \"//tensorflow/python:variables\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"dynamic_partition_op_test\",\n    size = \"medium\",\n    srcs = [\"dynamic_partition_op_test.py\"],\n    tags = [\n        \"multi_and_single_gpu\",\n    ],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_grad\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:gradients\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"dynamic_stitch_op_test\",\n    size = \"small\",\n    srcs = [\"dynamic_stitch_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_grad\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:gradients\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"fifo_queue_test\",\n    size = \"small\",\n    srcs = [\"fifo_queue_test.py\"],\n    tags = [\"no_rocm\"],\n    deps = [\n        \"//tensorflow/core:protos_all_py\",\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:util\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"listdiff_op_test\",\n    size = \"small\",\n    srcs = [\"listdiff_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:util\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"list_ops_test\",\n    size = \"small\",\n    srcs = [\"list_ops_test.py\"],\n    grpc_enabled = True,\n    tags = [\n        \"noasan\",  # TODO(b/155406705): flaky\n    ],\n    deps = [\n        \"//tensorflow/core:protos_all_py\",\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients_impl\",\n        \"//tensorflow/python:list_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:tensor_shape\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n        \"@absl_py//absl/testing:parameterized\",\n    ],\n)\n\ntf_py_test(\n    name = \"lookup_ops_test\",\n    size = \"small\",\n    srcs = [\"lookup_ops_test.py\"],\n    grpc_enabled = True,\n    deps = [\n        \"//tensorflow/python:client\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:lookup_ops\",\n        \"//tensorflow/python:sparse_tensor\",\n        \"//tensorflow/python:tensor_spec\",\n        \"//tensorflow/python:test_ops\",\n        \"//tensorflow/python:training\",\n        \"//tensorflow/python/data/ops:dataset_ops\",\n        \"//tensorflow/python/data/ops:readers\",\n        \"//tensorflow/python/saved_model:load\",\n        \"//tensorflow/python/saved_model:save\",\n    ],\n)\n\n# TODO(kattian): add GPU capability and change to cuda_py_test\ntf_py_test(\n    name = \"map_ops_test\",\n    size = \"small\",\n    srcs = [\"map_ops_test.py\"],\n    grpc_enabled = True,\n    tags = [\n        \"no_windows\",  # TODO(b/192259628)\n    ],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients_impl\",\n        \"//tensorflow/python:map_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:tensor_shape\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n        \"@absl_py//absl/testing:parameterized\",\n    ],\n)\n\ncuda_py_test(\n    name = \"map_stage_op_test\",\n    size = \"medium\",\n    srcs = [\"map_stage_op_test.py\"],\n    tags = [\"no_oss\"],  # b/124474135\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:util\",\n    ],\n)\n\ncuda_py_test(\n    name = \"padding_fifo_queue_test\",\n    size = \"small\",\n    srcs = [\"padding_fifo_queue_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ntf_py_test(\n    name = \"priority_queue_test\",\n    size = \"medium\",\n    srcs = [\"priority_queue_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:nn_grad\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"stack_ops_test\",\n    size = \"small\",\n    srcs = [\"stack_ops_test.py\"],\n    deps = [\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:control_flow_ops\",\n        \"//tensorflow/python:data_flow_ops_gen\",\n        \"//tensorflow/python:errors\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//third_party/py/numpy\",\n    ],\n)\n\ncuda_py_test(\n    name = \"stage_op_test\",\n    size = \"medium\",\n    srcs = [\"stage_op_test.py\"],\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:data_flow_ops\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:util\",\n    ],\n)\n\ncuda_py_test(\n    name = \"tensor_array_ops_test\",\n    size = \"medium\",\n    srcs = [\"tensor_array_ops_test.py\"],\n    flaky = 1,  # create_local_cluster sometimes times out.\n    shard_count = 10,\n    deps = [\n        \"//tensorflow/python:array_ops\",\n        \"//tensorflow/python:client_testlib\",\n        \"//tensorflow/python:cond_v2\",\n        \"//tensorflow/python:control_flow_ops\",\n        \"//tensorflow/python:data_flow_ops_gen\",\n        \"//tensorflow/python:distributed_framework_test_lib\",\n        \"//tensorflow/python:framework_for_generated_wrappers\",\n        \"//tensorflow/python:framework_test_lib\",\n        \"//tensorflow/python:gradients\",\n        \"//tensorflow/python:init_ops\",\n        \"//tensorflow/python:math_ops\",\n        \"//tensorflow/python:nn_grad\",\n        \"//tensorflow/python:tensor_array_grad\",\n        \"//tensorflow/python:tensor_array_ops\",\n        \"//tensorflow/python:tensor_spec\",\n        \"//tensorflow/python:training\",\n        \"//tensorflow/python:variable_scope\",\n        \"//tensorflow/python:variables\",\n        \"//tensorflow/python:while_v2\",\n        \"//tensorflow/python/data/ops:dataset_ops\",\n        \"//tensorflow/python/eager:backprop\",\n        \"//tensorflow/python/eager:context\",\n        \"//tensorflow/python/eager:def_function\",\n        \"//third_party/py/numpy\",\n    ],\n)\n"], "filenames": ["tensorflow/core/framework/tensor_key.h", "tensorflow/python/kernel_tests/data_structures/BUILD"], "buggy_code_start_loc": [18, 168], "buggy_code_end_loc": [64, 170], "fixing_code_start_loc": [19, 167], "fixing_code_end_loc": [72, 167], "type": "CWE-120", "message": "TensorFlow is an open source platform for machine learning. In version 2.8.0, the `TensorKey` hash function used total estimated `AllocatedBytes()`, which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. `int32_t`). It also tried to access individual tensor bytes through `tensor.data()` of size `AllocatedBytes()`. This led to ASAN failures because the `AllocatedBytes()` is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the `.data()` buffer. The discoverers could not use this byte vector anyway because types such as `tstring` include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1.", "other": {"cve": {"id": "CVE-2022-29210", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-21T00:15:11.583", "lastModified": "2022-06-03T02:33:09.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. In version 2.8.0, the `TensorKey` hash function used total estimated `AllocatedBytes()`, which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. `int32_t`). It also tried to access individual tensor bytes through `tensor.data()` of size `AllocatedBytes()`. This led to ASAN failures because the `AllocatedBytes()` is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the `.data()` buffer. The discoverers could not use this byte vector anyway because types such as `tstring` include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. En la versi\u00f3n 2.8.0, la funci\u00f3n hash \"TensorKey\" usaba el total estimado de \"AllocatedBytes()\", que (a) es una estimaci\u00f3n por tensor, y (b) es una funci\u00f3n hash muy pobre para constantes (por ejemplo, \"int32_t\"). Tambi\u00e9n intent\u00f3 acceder a bytes individuales del tensor mediante \"tensor.data()\" de tama\u00f1o \"AllocatedBytes()\". Esto conllevaba a fallos de ASAN porque \"AllocatedBytes()\" es una estimaci\u00f3n del total de bytes asignados por un tensor, incluyendo cualquier construcci\u00f3n apuntada (por ejemplo, cadenas), y no es referido a bytes contiguos en el buffer \".data()\". Los detectores no pod\u00edan usar este vector de bytes de todos modos porque tipos como \"tstring\" incluyen punteros, mientras que ellos necesitaban hacer un hash de los valores de las cadenas por s\u00ed mismos. Este problema est\u00e1 parcheado en Tensorflow versiones 2.9.0 y 2.8.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-120"}, {"lang": "en", "value": "CWE-122"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C3684238-B1B8-4134-9FED-8A3733E1F39B"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/framework/tensor_key.h#L53-L64", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/1b85a28d395dc91f4d22b5f9e1e9a22e92ccecd6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hc2f-7r5r-r2hg", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/1b85a28d395dc91f4d22b5f9e1e9a22e92ccecd6"}}