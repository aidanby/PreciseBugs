{"buggy_code": ["<?php\n/**\n * Tests for miscellaneous functions.\n * @package tests\n */\n\n/**\n * SimpleTest config\n */\nrequire_once( dirname(__FILE__).'/../../config.simpletest.php' );\n\nglobal $inc_path;\n\nload_funcs('antispam/model/_antispam.funcs.php');\nload_funcs('_core/_url.funcs.php');\n\n\n/**\n * @package tests\n */\nclass MiscFuncsTestCase extends EvoUnitTestCase\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct( 'Miscellaneous functions test' );\n\t}\n\n\n\tfunction test_make_clickable()\n\t{\n\t\tforeach( array(\n\t\t\t\t'http://b2evolution.net' => '<a href=\"http://b2evolution.net\">http://b2evolution.net</a>',\n\t\t\t\t'http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747' => '<a href=\"http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747\">http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747</a>',\n\t\t\t\t'Please look at http://this.com, and tell me what you think.' => 'Please look at <a href=\"http://this.com\">http://this.com</a>, and tell me what you think.',\n\t\t\t\t'https://paypal.com' => '<a href=\"https://paypal.com\">https://paypal.com</a>',\n\t\t\t\t'www.google.de' => '<a href=\"http://www.google.de\">www.google.de</a>',\n\t\t\t\t'www.google.de, and www.yahoo.com.' => '<a href=\"http://www.google.de\">www.google.de</a>, and <a href=\"http://www.yahoo.com\">www.yahoo.com</a>.',\n\t\t\t\t'See http://www.google.de.' => 'See <a href=\"http://www.google.de\">http://www.google.de</a>.',\n\t\t\t\t'See https://www.google.de, or www.yahoo.com/test?a=b,c=d.' => 'See <a href=\"https://www.google.de\">https://www.google.de</a>, or <a href=\"http://www.yahoo.com/test?a=b,c=d\">www.yahoo.com/test?a=b,c=d</a>.',\n\t\t\t\t'www. ' => 'www. ',\n\t\t\t\t'www.example.org' => '<a href=\"http://www.example.org\">www.example.org</a>',\n\n\t\t\t\t'http://user@somewhere.com' => '<a href=\"http://user@somewhere.com\">http://user@somewhere.com</a>',\n\t\t\t\t'<a href=\"http://setiathome.berkeley.edu\">SETI@Home</a>' => '<a href=\"http://setiathome.berkeley.edu\">SETI@Home</a>',\n\n\t\t\t\t'<a href=\"mailto:test@example.org\">test@example.org</a>' => '<a href=\"mailto:test@example.org\">test@example.org</a>',\n\t\t\t\t'<a href=\"mailto:test@example.org\">test@example.org</a>test2@example.org' => '<a href=\"mailto:test@example.org\">test@example.org</a><a href=\"mailto:test2@example.org\">test2@example.org</a>',\n\t\t\t\t'mailto://postmaster' => '<a href=\"mailto://postmaster\">mailto://postmaster</a>',\n\t\t\t\t// aim:\n\n\t\t\t\t// icq:\n\t\t\t\t'wanna chat? icq:878787.' => 'wanna chat? <a href=\"http://wwp.icq.com/scripts/search.dll?to=878787\">878787</a>.',\n\n\t\t\t\t'<img src=\"http://example.com/\" />' => '<img src=\"http://example.com/\" />',\n\t\t\t\t'<img src=http://example.com/ />' => '<img src=http://example.com/ />',\n\t\t\t\t'<div>http://example.com/</div>' => '<div><a href=\"http://example.com/\">http://example.com/</a></div>',\n\t\t\t) as $lText => $lExpected )\n\t\t{\n\t\t\t$this->assertEqual( make_clickable($lText), $lExpected );\n\t\t}\n\t}\n\n\n\tfunction test_is_email()\n\t{\n\t\t$must_match = array(\n\t\t\t'single' => array(),\n\t\t\t'rfc2822' => array(\n\t\t\t\t'My Name <my.name@example.org>',\n\n\t\t\t\t// taken from http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t\t'name.surname@blah.com',\n\t\t\t\t'Name Surname <name.surname@blah.com>',\n\t\t\t\t'\"b. blah\"@blah.co.nz',\n\t\t\t\t// taken from RFC (http://rfc.net/rfc2822.html#sA.1.2.)\n\t\t\t\t'\"Joe Q. Public\" <john.q.public@example.com>',\n\t\t\t\t'Mary Smith <mary@x.test>',\n\t\t\t\t'jdoe@example.org',\n\t\t\t\t'Who? <one@y.test>',\n\t\t\t\t'<boss@nil.test>',\n\t\t\t\t'\"Giant; \\\"Big\\\" Box\" <sysservices@example.net>',\n\t\t\t\t),\n\t\t\t'all' => array(\n\t\t\t\t'my.name@example.org',\n\t\t\t\t),\n\t\t\t);\n\n\t\t$must_not_match = array(\n\t\t\t'single' => array(\n\t\t\t\t'My Name <my.name@example.org>', // no single address\n\t\t\t\t),\n\t\t\t'rfc2822' => array(\n\t\t\t\t' me@example.org',\n\n\t\t\t\t// taken from http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t\t'name surname@blah.com',\n\t\t\t\t'name.\"surname\"@blah.com',\n\t\t\t\t'name@bla-.com',\n\t\t\t\t),\n\t\t\t'all' => array(\n\t\t\t\t'',\n\t\t\t\t'a@b',\n\t\t\t\t'abc',\n\t\t\t\t'a @ b',\n\t\t\t\t'a @ example.org',\n\t\t\t\t'a@example.org ',\n\t\t\t\t' example.org',\n\t\t\t\t),\n\t\t\t);\n\n\t\t// must match:\n\t\tforeach( $must_match['single'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t}\n\t\tforeach( $must_match['rfc2822'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t\tforeach( $must_match['all'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t\t$this->assertTrue( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\n\t\t// must not match\n\t\tforeach( $must_not_match['single'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t}\n\t\tforeach( $must_not_match['rfc2822'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t\tforeach( $must_not_match['all'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t\t$this->assertFalse( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t}\n\n\n\tfunction test_implode_with_and()\n\t{\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array() ),\n\t\t\t'' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one') ),\n\t\t\t'one' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one', 'two') ),\n\t\t\t'one &amp; two' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one', 'two', 'three') ),\n\t\t\t'one, two &amp; three' );\n\t}\n\n\n\tfunction test_validate_url()\n\t{\n\t\t$this->change_global('evo_charset', 'latin1');\n\n\t\t// valid:\n\t\tforeach( array(\n\t\t\t'http://b2evolution.net',\n\t\t\t'https://demo.b2evolution.net',\n\t\t\t'http://user@example.com/path',\n\t\t\t'http://user:pass@example.com/path',\n\t\t\t'mailto:example@example.org',\n\t\t\t'mailto:example@example.org?subject=TEST',\n\t\t\t'http://l\u9173.de/',\n\t\t\t'http://l\u9173.de/foo bar',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'commenting', false );\n\t\t\t// True means validation ok\n\t\t\t$this->assertFalse( $r, $url.' NOT allowed in comments' );\n\t\t}\n\n\t\tforeach( array(\n\t\t\t'http://b2evolution.net',\n\t\t\t'https://demo.b2evolution.net',\n\t\t\t'http://user@example.com/path',\n\t\t\t'http://user:pass@example.com/path',\n\t\t\t'mailto:example@example.org',\n\t\t\t'mailto:example@example.org?subject=TEST',\n\t\t\t'http://l\u9173.de/',\n\t\t\t'/foobar',\n\t\t\t'/foobar#anchor',\n\t\t\t'#anchor',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'posting', false );\n\t\t\t$this->assertFalse( $r, $url.' NOT allowed in posts' );\n\t\t}\n\n\t\t// invalid:\n\t\tforeach( array(\n\t\t\t'http://',\n\t\t\t'http://&amp;',\n\t\t\t'http://<script>...</script>',\n\t\t\t'mailto:www.example.com',\n\t\t\t'foobar',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'commenting', false );\n\t\t\t// True means validation rejected\n\t\t\t$this->assertTrue( $r, $url.' allowed in comments' );\n\n\t\t\t$r = validate_url( $url, 'posting', false );\n\t\t\t$this->assertTrue( $r, $url.' allowed in posts' );\n\t\t}\n\t}\n\n\n\t/**\n\t * Tests {@link callback_on_non_matching_blocks()}.\n\t */\n\tfunction test_callback_on_non_matching_blocks()\n\t{\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( 'foo bar', '~\\s~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ),\n\t\t\t'[[foo]] [[bar]]' );\n\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( ' foo bar ', '~\\s~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ),\n\t\t\t' [[foo]] [[bar]] ' );\n\n\t\t// Replace anything outside <pre></pre> and <code></code> that's not in a tag (smilies plugin):\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( 'foo <code>FOOBAR</code> bar ',\n\t\t\t\t'~<(code|pre)[^>]*>.*?</\\1>~is',\n\t\t\t\t'callback_on_non_matching_blocks',\n\t\t\t\tarray( '~<[^>]*>~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ) ),\n\t\t\t'[[foo]] <code>FOOBAR</code> [[bar]] ' );\n\t}\n\n\n\t/**\n\t * Helper method for {@link test_callback_on_non_matching_blocks()}.\n\t *\n\t * @return string\n\t */\n\tfunction helper_test_callback_on_non_matching_blocks( $text )\n\t{\n\t\treturn preg_replace( '/(foo|bar)/i', '[[$1]]', $text );\n\t}\n\n\n\t/**\n\t * Test {@link get_base_domain()}\n\t */\n\tfunction test_get_base_domain()\n\t{\n\t\t$this->change_global('evo_charset', 'iso-8859-1');\n\n\t\t$this->assertEqual( get_base_domain(''), '' ); // Example: empty referer\n\t\t$this->assertEqual( get_base_domain('hostname'), 'hostname' );\n\t\t$this->assertEqual( get_base_domain('http://hostname'), 'hostname' );\n\t\t$this->assertEqual( get_base_domain('www.example.com'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('www2.example.com'), 'example.com' );  // We no longer treat www2.ex.com equal to ex.com\n\t\t$this->assertEqual( get_base_domain('subdom.example.com'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('sub2.subdom.example.net'), 'example.net' );\n\t\t$this->assertEqual( get_base_domain('sub3.sub2.subdom.example.org'), 'example.org' );\n\t\t$this->assertEqual( get_base_domain('https://www.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://www.sub1.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://sub1.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.com:8080/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.net:8080/path/1/2/3/page.html?param=hello#location'), 'example.net' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.org:8080/path/1/2/3/page.html?param=hello#location'), 'example.org' );\n\t\t$this->assertEqual( get_base_domain('https://lessons.teachers.city.edu:443/index.php#lesson45'), 'city.edu' );\n\t\t$this->assertEqual( get_base_domain('ftp://projects.roads.gov/region.php#plan'), 'roads.gov' );\n\t\t$this->assertEqual( get_base_domain('http://domain.gouv.fr:8080/index.php#anchor'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://www14.domain.gouv.fr:8080/index.php#anchor'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('https://sub.domain.gouv.fr:8080/page.html'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://www.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://sub2.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('https://www2.sub2.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://b2evo.re:8080/'), 'b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://www6.b2evo.re:8080/'), 'b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://test.b2evo.re:8080/sitemap.xml'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://www2000.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://www0.sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://sub.test.b2evo.re:8080/install/index.htm#step3'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://www1.sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://192.168.1.100:8080/'), '192.168.1.100' );\n\t\t$this->assertEqual( get_base_domain('http://www5.192.168.1.100:8080/'), '168.1.100' );\n\t\t$this->assertEqual( get_base_domain('https://localhost:8080/b2evo/github/site/'), 'localhost' );\n\t\t$this->assertEqual( get_base_domain('http://www.localhost:8080/b2evo/github/site/'), 'localhost' );\n\n\t\t// Anchor after domain name, used by spammers:\n\t\t$this->assertEqual( get_base_domain('http://example.com#anchor'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('http://example.com/#anchor'), 'example.com' );\n\n\t\t// \"-\" is a valid char:\n\t\t$this->assertEqual( get_base_domain('host-name'), 'host-name' );\n\t\t$this->assertEqual( get_base_domain('www-2.host-name.tld'), 'www-2.host-name.tld' );\n\n\t\t// IDN:\n\t\t$this->assertEqual( get_base_domain('k\u9172e'), 'k\u9172e' );\n\t\t$this->assertEqual( get_base_domain('\u95e4.de'), '\u95e4.de' );\n\t\t$this->assertEqual( get_base_domain('www-\u95e4.k\u9172e-\u95e4.de'), 'www-\u95e4.k\u9172e-\u95e4.de' );\n\t\t$this->assertEqual( get_base_domain('sub1.sub2.pr\u942cl.de'), 'sub2.pr\u942cl.de' );\n\n\t\t// Numerical, should be kept:\n\t\t$this->assertIdentical( get_base_domain( '123.123.123.123' ), '123.123.123.123' );\n\t\t$this->assertIdentical( get_base_domain( '123.123.123.123:8080' ), '123.123.123.123' );\n\n\t\t// Invalid, but ok:\n\t\t// fp> This function is called get_base_domain(), not validate_domain() . If we receive a domain starting with a _, then it is not a problem to keep it in the base domain.\n\t\t$this->assertEqual( get_base_domain('_host'), '_host' );\n\n\t\t// The following may not be valid in the future but seem good enough for now:\n\t\t$this->assertEqual( get_base_domain('.de'), 'de' );\n\t\t$this->assertEqual( get_base_domain('.....de'), 'de' );\n\t\t$this->assertIdentical( get_base_domain('...'), '' );\n\t\t$this->assertIdentical( get_base_domain( '1..' ), '' );\n\t\t$this->assertIdentical( get_base_domain( chr(0) ), '' );\n\t}\n\n\n\t/**\n\t * Test {@link get_ban_domain()}\n\t */\n\tfunction test_get_ban_domain()\n\t{\n\t\t$this->assertEqual( get_ban_domain('www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://hostname'), '//hostname' );\n\t\t$this->assertEqual( get_ban_domain('http://hostname.tld'), '//hostname.tld' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com/path/'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com/path/page.html'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/path/?query=1'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/path/page.html?query=1'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/'), '//example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/?query=1'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/page.html'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/page.html?query=1'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com:8080/path/sub/page.html?query=1'), '//example.com:8080/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('https://www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('https://www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub2.sub1.example.com'), '//sub2.sub1.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub3.sub2.sub1.example.com'), '//sub3.sub2.sub1.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub3.sub2.sub1.example.com'), '//sub3.sub2.sub1.example.com' );\n\t\t$this->assertIdentical( get_ban_domain(''), false );\n\n\t\t// Anchor after domain name, used by spammers:\n\t\t$this->assertEqual( get_ban_domain('http://example.com#anchor'), '//example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/#anchor'), '//example.com' );\n\t}\n\n\n\t/**\n\t * Test {@link format_to_output()}\n\t */\n\tfunction test_format_to_output()\n\t{\n\t\t$this->change_global('evo_charset', 'latin1');\n\n\t\t$this->assertEqual( format_to_output('<a href=\"\">link</a>  text', 'text'), 'link text' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'htmlbody'), '<b>&#174;&#181;&#165;&#191;-test</b>' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'xml'), '&#174;&#181;&#165;&#191;-test' );\n\t\t$this->assertEqual( format_to_output( chr(128).'&#128;' ), '&#8364;&#8364;' ); // Euro sign, Windows style\n\n\t\t$this->change_global('evo_charset', 'utf-8');\n\t\t$this->assertEqual( format_to_output('<a href=\"\">link</a>  text', 'text'), 'link text' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'htmlbody'), '<b>\u633e\u6b63-test</b>' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'xml'), '\u633e\u6b63-test' );\n\n\t\t$this->assertEqual( format_to_output('2 > &1', 'htmlbody'), '2 > &amp;1' );\n\t}\n\n\n\t/**\n\t * Tests {@link make_rel_links_abs()}.\n\t */\n\tfunction test_make_rel_links_abs()\n\t{\n\t\t$this->assertEqual(\n\t\t\tmake_rel_links_abs('foo <a href=\"/bar\">bar</a>', 'http://example.com'),\n\t\t\t'foo <a href=\"http://example.com/bar\">bar</a>' );\n\t\t$this->assertEqual(\n\t\t\tmake_rel_links_abs('foo <a href=\"http://test/bar\">bar</a> <img src=\"/bar\" />', 'http://example.com'),\n\t\t\t'foo <a href=\"http://test/bar\">bar</a> <img src=\"http://example.com/bar\" />' );\n\t}\n\n\n\t/**\n\t * Tests {@link test_convert_charset()}.\n\t */\n\tfunction test_convert_charset()\n\t{\n\t\t$this->assertEqual( convert_charset( '\u6fcb\u9cf9', 'utf-8', 'latin1' ), '\u77c7\u7919\u7661\u79b1' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'latin1', 'utf-8' ), '\u6fcb\u9cf9' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'Latin1', 'UTF-8' ), '\u6fcb\u9cf9' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'Latin1', 'Utf8' ), '\u6fcb\u9cf9' );\n\n\t\t// THIS ONE will produce NO conversion because 'latin-1' is not a valid charset name for this func\n\t\t$this->assertEqual( convert_charset( '\u6fcb\u9cf9', 'utf-8', 'latin-1' ), '\u6fcb\u9cf9' );\n\t}\n\n\n\t/**\n\t * Test {@link strmaxlen()}\n\t */\n\tfunction test_strmaxlen()\n\t{\n\t\t$this->assertEqual( strmaxlen('foo', 3), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo', 2), 'f&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo', 2, '.'), 'f.' );\n\t\t$this->assertEqual( strmaxlen('foobar', 6, '...'), 'foobar' );\n\t\t$this->assertEqual( strmaxlen('foobar', 5, '...'), 'fo...' );\n\t\t$this->assertEqual( strmaxlen('foobar', 5, '&amp;&hellip;'), 'foo&amp;&hellip;' );\n\n\t\t$this->assertEqual( strmaxlen('M?', 2), 'M?', 'Do not cut utf8 char in the middle' );\n\n\t\t$this->assertEqual( strmaxlen('1', 1, '&hellip;'), '1' );\n\t\t$this->assertEqual( strmaxlen('1', 1, '...'), '1' );\n\t\t$this->assertEqual( strmaxlen('123', 1, '...'), '...' );\n\t\t$this->assertEqual( strmaxlen('12345', 1, '...'), '...' );\n\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'htmlbody'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'raw'), '1&2' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3), '1&2' );\n\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 10, NULL, 'htmlbody'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 10, NULL, 'formvalue'), '1&amp;amp;2' );\n\n\t\t# special cases, where entities must not get cut in the middle\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 5, NULL, 'htmlbody'), '1&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&amp;22', 7, NULL, 'htmlbody'), '1&amp;&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 3, NULL, 'formvalue'), '1&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&    2', 3, NULL, 'formvalue'), '1&amp;&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'formvalue'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('12345678901234567890&amp;', 21, NULL, 'formvalue'),\n\t\t\t'12345678901234567890&hellip;' );\n\t\t$this->assertEqual( strmaxlen('123456789012345&amp;', 21, NULL, 'formvalue'),\n\t\t\t'123456789012345&amp;amp;' );\n\n\t\t$this->assertEqual( strmaxlen('foo ', 3), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo ', 4), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 3), 'fo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 4), 'foo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5), 'foo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 6), 'foo b&hellip;' );\n\n\t\t// test cut_at_whitespace:\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, ''), 'foo b' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, '', 'raw', true), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, '.', 'raw', true), 'foo.' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 4, '.', 'raw', true), 'foo.' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 2, '', 'raw', true), 'fo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 2, '..', 'raw', true), '..' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 2, '', 'raw', true), 'fo' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 3, '', 'raw', true), 'foo' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 4, '', 'raw', true), 'foo' );\n\t}\n\n\n\t/**\n\t * Test {@link strmaxwords()}\n\t */\n\tfunction test_strmaxwords()\n\t{\n\t\t$this->assertEqual( strmaxwords('foo bar', 2), 'foo bar' );\n\t\t$this->assertEqual( strmaxwords('foo  bar', 2), 'foo  bar' );\n\t\t$this->assertEqual( strmaxwords('foo  bar  ', 2), 'foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  foo  bar  ', 2), '  foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  <img />foo  bar  ', 2), '  <img />foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  <img />foo  bar  ', 1), '  <img />foo  &hellip;' );\n\t}\n\n\n\t/**\n\t * Test {@link evo_version_compare()}\n\t */\n\tfunction test_evo_version_compare()\n\t{\n\t\t$versions = array(\n\t\t\tarray( '4.1.6-2012-11-23',         '4.1.7-2013-04-27',         '<' ),\n\t\t\tarray( '4.1.7-2013-04-27',         '5.0.0-alpha-4-2012-11-29', '<' ),\n\t\t\tarray( '5.0.0-alpha-4-2012-11-29', '5.0.1-alpha-2013-02-21',   '<' ),\n\t\t\tarray( '5.0.1-alpha-2013-02-21',   '5.0.2-alpha-5-2013-03-15', '<' ),\n\t\t\tarray( '5.0.2-alpha-5-2013-03-15', '5.0.3-beta-5-2013-04-28',  '<' ),\n\t\t\tarray( '5.0.3-beta-5-2013-04-28',  '5.0.4-stable-2013-06-28',  '<' ),\n\t\t\tarray( '5.0.4-stable-2013-06-28',  '5.0.5-stable-2013-08-02',  '<' ),\n\t\t\tarray( '5.0.5-stable-2013-08-02',  '5.0.6-stable-2013-09-25',  '<' ),\n\t\t\tarray( '5.0.6-stable-2013-09-25',  '5.1.0-alpha-2014-03-26',   '<' ),\n\t\t\tarray( '5.1.0-alpha-2014-03-26',   '5.1.0-beta-2014-06-11',    '<' ),\n\t\t\tarray( '5.1.0-beta-2014-06-11',    '5.1.0-stable',             '<' ),\n\t\t\tarray( '5.1.0-stable',             '5.1.0-stable-2014-09-10',  '<' ),\n\t\t\tarray( '5.1.0-stable-2014-09-10',  '5.1.0-stable-2014-09-11',  '<' ),\n\t\t\tarray( '5.1.0',                    '5.1.0-beta-2014-06-11',    '>' ),\n\t\t\tarray( '5.1.0',                    '5.1.0-stable',             '=' ),\n\t\t\tarray( '5.1.0-beta',               '5.1.0-stable',             '<' ),\n\t\t);\n\n\t\tforeach( $versions as $func_params )\n\t\t{\n\t\t\t$this->assertTrue( call_user_func_array( 'evo_version_compare', $func_params ),\n\t\t\t\t'FALSE === ( \"'.$func_params[0].'\" '.$func_params[2].' \"'.$func_params[1].'\" )' );\n\t\t}\n\t}\n}\n\n\nif( !isset( $this ) )\n{ // Called directly, run the TestCase alone\n\t$test = new MiscFuncsTestCase();\n\t$test->run_html_or_cli();\n\tunset( $test );\n}\n?>\n", "<?php\n/**\n * This file implements general purpose functions.\n *\n * This file is part of the evoCore framework - {@link http://evocore.net/}\n * See also {@link https://github.com/b2evolution/b2evolution}.\n *\n * @license GNU GPL v2 - {@link http://b2evolution.net/about/gnu-gpl-license}\n *\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n * Parts of this file are copyright (c)2004-2006 by Daniel HAHLER - {@link http://thequod.de/contact}.\n * Parts of this file are copyright (c)2005-2006 by PROGIDISTRI - {@link http://progidistri.com/}.\n *\n * @package evocore\n */\nif( !defined('EVO_MAIN_INIT') ) die( 'Please, do not access this page directly.' );\n\n\n/**\n * Dependencies\n */\nload_funcs('antispam/model/_antispam.funcs.php');\nload_funcs('tools/model/_email.funcs.php');\n\n// @todo sam2kb> Move core functions get_admin_skins, get_filenames, cleardir_r, rmdir_r and some other\n// to a separate file, and split files_Module from _core_Module\nload_funcs('files/model/_file.funcs.php');\n\n// Load utf8 support functions\nload_funcs( '_ext/_portable_utf8.php' );\n\n\n/**\n * Call a method for all modules in a row\n *\n * @param string the name of the method which should be called\n * @param array params\n * @return array[module_name][return value], or NULL if the method doesn't have any return value\n */\nfunction modules_call_method( $method_name, $params = NULL )\n{\n\tglobal $modules;\n\n\t$result = NULL;\n\n\tforeach( $modules as $module )\n\t{\n\t\t$Module = & $GLOBALS[$module.'_Module'];\n\t\tif( $params == NULL )\n\t\t{\n\t\t\t$ret = $Module->{$method_name}();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = $Module->{$method_name}( $params );\n\t\t}\n\t\tif( isset( $ret ) )\n\t\t{\n\t\t\t$result[$module] = $ret;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Loads the b2evo database scheme.\n *\n * This gets updated through {@link db_delta()} which generates the queries needed to get\n * to this scheme.\n *\n * @param boolean set true to load installed plugins table as well, leave it on false otherwise\n *        - currently used only on table normalization\n *\n * Please see {@link db_delta()} for things to take care of.\n */\nfunction load_db_schema( $inlcude_plugins = false )\n{\n\tglobal $schema_queries;\n\tglobal $modules, $inc_path;\n\tglobal $db_storage_charset, $DB;\n\n\tif( empty( $db_storage_charset ) )\n\t{ // If no specific charset has been requested for datstorage, use the one of the current connection (optimize for speed - no conversions)\n\t\t$db_storage_charset = $DB->connection_charset;\n\t}\n\n\t// Load modules:\n\tforeach( $modules as $module )\n\t{\n\t\techo get_install_format_text( 'Loading module: <code>'.$module.'/model/_'.$module.'.install.php</code><br />', 'br' );\n\t\trequire_once $inc_path.$module.'/model/_'.$module.'.install.php';\n\t}\n\n\tif( $inlcude_plugins )\n\t{ // Load all plugins table into the schema queries\n\t\tglobal $Plugins;\n\n\t\tif( empty( $Plugins ) )\n\t\t{\n\t\t\tload_class( 'plugins/model/_plugins.class.php', 'Plugins' );\n\t\t\t$Plugins = new Plugins();\n\t\t}\n\n\t\t$admin_Plugins = & get_Plugins_admin();\n\t\t$admin_Plugins->restart();\n\t\twhile( $loop_Plugin = & $admin_Plugins->get_next() )\n\t\t{ // loop through all installed plugins\n\t\t\t$create_table_queries = $loop_Plugin->GetDbLayout();\n\t\t\tforeach( $create_table_queries as $create_table_query )\n\t\t\t{\n\t\t\t\tif( ! preg_match( '|^\\s*CREATE TABLE\\s+(IF NOT EXISTS\\s+)?([^\\s(]+).*$|is', $create_table_query, $match) )\n\t\t\t\t{ // Could not parse the CREATE TABLE command\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$schema_queries[$match[2]] = array( 'Creating table for plugin', $create_table_query );\n\t\t\t\t$DB->dbaliases[] = '#\\b'.$match[2].'\\b#';\n\t\t\t\t$DB->dbreplaces[] = $match[2];\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @deprecated kept only for plugin backward compatibility (core is being modified to call getters directly)\n * To be removed, maybe in b2evo v5.\n *\n * @return DataObjectCache\n */\nfunction & get_Cache( $objectName )\n{\n\tglobal $Plugins;\n\tglobal $$objectName;\n\n\tif( isset( $$objectName ) )\n\t{\t// Cache already exists:\n\t\treturn $$objectName;\n\t}\n\n\t$func_name = 'get_'.$objectName;\n\n\tif( function_exists($func_name) )\n\t{\n\t\treturn $func_name();\n\t}\n\telse\n\t{\n\t\tdebug_die( 'getCache(): Unknown Cache type get function:'.$func_name.'()' );\n\t}\n}\n\n\n/**\n * Load functions file\n */\nfunction load_funcs( $funcs_path )\n{\n\tglobal $inc_path;\n\trequire_once $inc_path.$funcs_path;\n}\n\n\n/**\n * Shutdown function: save HIT and update session!\n *\n * This is registered in _main.inc.php with register_shutdown_function()\n * This is called by PHP at the end of the script.\n *\n * NOTE: before PHP 4.1 nothing can be echoed here any more, but the minimum PHP requirement for b2evo is PHP 4.3\n */\nfunction shutdown()\n{\n\t/**\n\t * @var Hit\n\t */\n\tglobal $Hit;\n\n\t/**\n\t * @var Session\n\t */\n\tglobal $Session;\n\n\tglobal $Settings;\n\tglobal $Debuglog;\n\n\tglobal $Timer;\n\n\t// Try forking a background process and let the parent return as fast as possbile.\n\tif( is_callable('pcntl_fork') && function_exists('posix_kill') && defined('STDIN') )\n\t{\n\t\tif( $pid = pcntl_fork() )\n\t\t\treturn; // Parent\n\n\t\tfunction shutdown_kill()\n\t\t{\n\t\t\tposix_kill(posix_getpid(), SIGHUP);\n\t\t}\n\n\t\tif ( ob_get_level() )\n\t\t{\t// Discard the output buffer and close\n\t\t\tob_end_clean();\n\t\t}\n\n\t\tfclose(STDIN);  // Close all of the standard\n\t\tfclose(STDOUT); // file descriptors as we\n\t\tfclose(STDERR); // are running as a daemon.\n\n\t\tregister_shutdown_function('shutdown_kill');\n\n\t\tif( posix_setsid() < 0 )\n\t\t\treturn;\n\n\t\tif( $pid = pcntl_fork() )\n\t\t\treturn;     // Parent\n\n\t\t// Now running as a daemon. This process will even survive\n\t\t// an apachectl stop.\n\t}\n\n\t$Timer->resume('shutdown');\n\n\t// echo '*** SHUTDOWN FUNC KICKING IN ***';\n\n\t// fp> do we need special processing if we are in CLI mode?  probably earlier actually\n\t// if( ! $is_cli )\n\n\t// Note: it might be useful at some point to do special processing if the script has been aborted or has timed out\n\t// connection_aborted()\n\t// connection_status()\n\n\t// Save the current HIT, but set delayed since the hit ID will not be required here:\n\t$Hit->log( true );\n\n\t// Update the SESSION:\n\t$Session->dbsave();\n\n\t// Get updates here instead of slowing down normal display of the dashboard\n\tload_funcs( 'dashboard/model/_dashboard.funcs.php' );\n\tb2evonet_get_updates();\n\n\t// Auto pruning of old HITS, old SESSIONS and potentially MORE analytics data:\n\tif( $Settings->get( 'auto_prune_stats_mode' ) == 'page' )\n\t{ // Autopruning is requested\n\t\tload_class( 'sessions/model/_hitlist.class.php', 'Hitlist' );\n\t\tHitlist::dbprune(); // will prune once per day, according to Settings\n\t}\n\n\t// Calling debug_info() here will produce complete data but it will be after </html> hence invalid.\n\t// Then again, it's for debug only, so it shouldn't matter that much.\n\tdebug_info();\n\n\t// Update the SESSION again, at the very end:\n\t// (e.g. \"Debuglogs\" may have been removed in debug_info())\n\t$Session->dbsave();\n\n\t$Timer->pause('shutdown');\n}\n\n\n/***** Formatting functions *****/\n\n/**\n * Format a string/content for being output\n *\n * @author fplanque\n * @todo htmlspecialchars() takes a charset argument, which we could provide ($evo_charset?)\n * @param string raw text\n * @param string format, can be one of the following\n * - raw: do nothing\n * - htmlbody: display in HTML page body: allow full HTML\n * - entityencoded: Special mode for RSS 0.92: allow full HTML but escape it\n * - htmlhead: strips out HTML (mainly for use in Title)\n * - htmlattr: use as an attribute: escapes quotes, strip tags\n * - formvalue: use as a form value: escapes quotes and < > but leaves code alone\n * - text: use as plain-text, e.g. for ascii-mails\n * - xml: use in an XML file: strip HTML tags\n * - xmlattr: use as an attribute: strips tags and escapes quotes\n * @return string formatted text\n */\nfunction format_to_output( $content, $format = 'htmlbody' )\n{\n\tglobal $Plugins, $evo_charset;\n\n\tswitch( $format )\n\t{\n\t\tcase 'raw':\n\t\t\t// do nothing!\n\t\t\tbreak;\n\n\t\tcase 'htmlbody':\n\t\t\t// display in HTML page body: allow full HTML\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\tbreak;\n\n\t\tcase 'urlencoded':\n\t\t\t// Encode string to be passed as part of an URL\n\t\t\t$content = rawurlencode( $content );\n\t\t\tbreak;\n\n\t\tcase 'entityencoded':\n\t\t\t// Special mode for RSS 0.92: apply renders and allow full HTML but escape it\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\tbreak;\n\n\t\tcase 'htmlfeed':\n\t\t\t// For use in RSS <content:encoded><![CDATA[ ... ]]></content:encoded>\n\t\t\t// allow full HTML + absolute URLs...\n\t\t\t$content = make_rel_links_abs($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = str_replace(']]>', ']]&gt;', $content); // encode CDATA closing tag to prevent injection/breaking of the <![CDATA[ ... ]]>\n\t\t\tbreak;\n\n\t\tcase 'htmlhead':\n\t\t\t// Strips out HTML (mainly for use in Title)\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\tbreak;\n\n\t\tcase 'htmlattr':\n\t\t\t// use as an attribute: strips tags and escapes quotes\n\t\t\t// TODO: dh> why not just htmlspecialchars?fp> because an attribute can never contain a tag? dh> well, \"onclick='return 1<2;'\" would get stripped, too. I'm just saying: why mess with it, when we can just use htmlspecialchars.. fp>ok\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = str_replace( array('\"', \"'\"), array('&quot;', '&#039;'), $content );\n\t\t\tbreak;\n\n\t\tcase 'htmlspecialchars':\n\t\tcase 'formvalue':\n\t\t\t// Replace special chars to &amp;, &quot;, &#039;|&apos;, &lt; and &gt; :\n\t\t\tif( version_compare( phpversion(), '5.4', '>=' ) )\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &apos; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES | ENT_HTML5, $evo_charset );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &#039; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'xml':\n\t\t\t// use in an XML file: strip HTML tags\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'xml');\n\t\t\tbreak;\n\n\t\tcase 'xmlattr':\n\t\t\t// use as an attribute: strips tags and escapes quotes\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'xml');\n\t\t\t$content = str_replace( array('\"', \"'\"), array('&quot;', '&#039;'), $content );\n\t\t\tbreak;\n\n\t\tcase 'text':\n\t\t\t// use as plain-text, e.g. for ascii-mails\n\t\t\t$content = strip_tags( $content );\n\t\t\t$trans_tbl = get_html_translation_table( HTML_ENTITIES );\n\t\t\t$trans_tbl = array_flip( $trans_tbl );\n\t\t\t$content = strtr( $content, $trans_tbl );\n\t\t\t$content = preg_replace( '/[ \\t]+/', ' ', $content);\n\t\t\t$content = trim($content);\n\t\t\tbreak;\n\n\t\tcase 'syslog':\n\t\t\t// Replace special chars to &amp;, &quot;, &#039;|&apos;, &lt; and &gt; :\n\t\t\tif( version_compare( phpversion(), '5.4', '>=' ) )\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &apos; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES | ENT_HTML5, $evo_charset );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &#039; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\t}\n\t\t\t$content = preg_replace( \"/\\[\\[(.+?)]]/is\", \"<code>$1</code>\", $content ); // Replaces [[...]] into <code>...</code>\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tdebug_die( 'Output format ['.$format.'] not supported.' );\n\t}\n\n\treturn $content;\n}\n\n\n/*\n * autobrize(-)\n */\nfunction autobrize($content) {\n\t$content = callback_on_non_matching_blocks( $content, '~<code>.+?</code>~is', 'autobrize_callback' );\n\treturn $content;\n}\n\n/**\n * Adds <br>'s to non code blocks\n *\n * @param string $content\n * @return string content with <br>'s added\n */\nfunction autobrize_callback( $content )\n{\n\t$content = preg_replace(\"/<br>\\n/\", \"\\n\", $content);\n\t$content = preg_replace(\"/<br \\/>\\n/\", \"\\n\", $content);\n\t$content = preg_replace(\"/(\\015\\012)|(\\015)|(\\012)/\", \"<br />\\n\", $content);\n\treturn($content);\n}\n\n/*\n * unautobrize(-)\n */\nfunction unautobrize($content)\n{\n\t$content = callback_on_non_matching_blocks( $content, '~<code>.+?</code>~is', 'unautobrize_callback' );\n\treturn $content;\n}\n\n/**\n * Removes <br>'s from non code blocks\n *\n * @param string $content\n * @return string content with <br>'s removed\n */\nfunction unautobrize_callback( $content )\n{\n\t$content = preg_replace(\"/<br>\\n/\", \"\\n\", $content);   //for PHP versions before 4.0.5\n\t$content = preg_replace(\"/<br \\/>\\n/\", \"\\n\", $content);\n\treturn($content);\n}\n\n/**\n * Add leading zeroes to a number when necessary.\n *\n * @param string The original number.\n * @param integer How many digits shall the number have?\n * @return string The padded number.\n */\nfunction zeroise( $number, $threshold )\n{\n\treturn str_pad( $number, $threshold, '0', STR_PAD_LEFT );\n}\n\n\n/**\n * Get a limited text-only excerpt\n *\n * @param string\n * @param int Maximum length\n * @return string\n */\nfunction excerpt( $str, $maxlen = 254, $tail = '&hellip;' )\n{\n\t// Add spaces\n\t$str = str_replace( array( '<p>', '<br' ), array( ' <p>', ' <br' ), $str );\n\n\t// Remove <code>\n\t$str = preg_replace( '#<code>(.+)</code>#is', '', $str );\n\n\t// Strip tags:\n\t$str = strip_tags( $str );\n\n\t// Remove spaces:\n\t$str = preg_replace( '/[ \\t]+/', ' ', $str);\n\t$str = trim( $str );\n\n\t// Ger rid of all new lines and Display the html tags as source text:\n\t$str = trim( preg_replace( '#[\\r\\n\\t\\s]+#', ' ', $str ) );\n\n\t$str = strmaxlen( $str, $maxlen, $tail, 'raw', true );\n\n\treturn $str;\n}\n\n\n/**\n * Crop string to maxlen with &hellip; (default tail) at the end if needed.\n *\n * If $format is not \"raw\", we make sure to not cut in the middle of an\n * HTML entity, so that strmaxlen('1&amp;2', 3, NULL, 'formvalue') will not\n * become/stay '1&amp;&hellip;'.\n *\n * @param string\n * @param int Maximum length\n * @param string Tail to use, when string gets cropped. Its length gets\n *               substracted from the total length (with HTML entities\n *               being decoded). Default is \"&hellip;\" (HTML entity)\n * @param string Format, see {@link format_to_output()}\n * @param boolean Crop at whitespace, if possible?\n *        (any word split at the end will get its head removed)\n * @return string\n */\nfunction strmaxlen( $str, $maxlen = 50, $tail = NULL, $format = 'raw', $cut_at_whitespace = false  )\n{\n\tif( is_null($tail) )\n\t{\n\t\t$tail = '&hellip;';\n\t}\n\n\t$str = utf8_rtrim($str);\n\n\tif( utf8_strlen( $str ) > $maxlen )\n\t{\n\t\t// Replace all HTML entities by a single char. html_entity_decode for example\n\t\t// would not handle &hellip;.\n\t\t$tail_for_length = preg_replace('~&\\w+?;~', '.', $tail);\n\t\t$tail_length = utf8_strlen( html_entity_decode($tail_for_length) );\n\t\t$len = $maxlen-$tail_length;\n\t\tif( $len < 1 )\n\t\t{ // special case; $tail length is >= $maxlen\n\t\t\t$len = 0;\n\t\t}\n\t\t$str_cropped = utf8_substr( $str, 0, $len );\n\t\tif( $format != 'raw' )\n\t\t{ // if the format isn't raw we make sure that we do not cut in the middle of an HTML entity\n\t\t\t$maxlen_entity = 7; # \"&amp;\" is 5, min 3!\n\t\t\t$str_inspect = utf8_substr($str_cropped, 1-$maxlen_entity);\n\t\t\t$pos_amp = utf8_strpos($str_inspect, '&');\n\t\t\tif( $pos_amp !== false )\n\t\t\t{ // there's an ampersand at the end of the cropped string\n\t\t\t\t$look_until = $pos_amp;\n\t\t\t\t$str_cropped_len = utf8_strlen($str_cropped);\n\t\t\t\tif( $str_cropped_len < $maxlen_entity )\n\t\t\t\t{ // we have to look at least for the length of an entity\n\t\t\t\t\t$look_until += $maxlen_entity-$str_cropped_len;\n\t\t\t\t}\n\t\t\t\tif( strpos(utf8_substr($str, $len, $look_until), ';') !== false )\n\t\t\t\t{\n\t\t\t\t\t$str_cropped = utf8_substr( $str, 0, $len-utf8_strlen($str_inspect)+$pos_amp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( $cut_at_whitespace )\n\t\t{\n\t\t\t// Get the first character being cut off. Note: we can't use $str[index] in case of utf8 strings!\n\t\t\t$first_cut_off_char = utf8_substr( $str, utf8_strlen( $str_cropped ), 1 );\n\t\t\tif( ! ctype_space( $first_cut_off_char ) )\n\t\t\t{ // first character being cut off is not whitespace\n\t\t\t\t// Get the chars as an array from the cropped string to be able to get chars by position\n\t\t\t\t$str_cropped_chars = preg_split('//u',$str_cropped, -1, PREG_SPLIT_NO_EMPTY);\n\t\t\t\t$i = utf8_strlen($str_cropped);\n\t\t\t\twhile( $i && isset( $str_cropped_chars[ --$i ] ) && ! ctype_space( $str_cropped_chars[ $i ] ) )\n\t\t\t\t{}\n\t\t\t\tif( $i )\n\t\t\t\t{\n\t\t\t\t\t$str_cropped = utf8_substr($str_cropped, 0, $i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$str = format_to_output(utf8_rtrim($str_cropped), $format);\n\t\t$str .= $tail;\n\n\t\treturn $str;\n\t}\n\telse\n\t{\n\t\treturn format_to_output($str, $format);\n\t}\n}\n\n\n/**\n * Crop string to maxwords preserving tags.\n *\n * @param string\n * @param int Maximum number words\n * @param mixed array Optional parameters\n * @return string\n */\nfunction strmaxwords( $str, $maxwords = 50, $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'continued_link' => '',\n\t\t\t'continued_text' => '&hellip;',\n\t\t\t'always_continue' => false,\n\t\t), $params );\n\t$open = false;\n\t$have_seen_non_whitespace = false;\n\t$end = utf8_strlen( $str );\n\tfor( $i = 0; $i < $end; $i++ )\n\t{\n\t\tswitch( $char = $str[$i] )\n\t\t{\n\t\t\tcase '<' :\t// start of a tag\n\t\t\t\t$open = true;\n\t\t\t\tbreak;\n\t\t\tcase '>' : // end of a tag\n\t\t\t\t$open = false;\n\t\t\t\tbreak;\n\n\t\t\tcase ctype_space($char):\n\t\t\t\tif( ! $open )\n\t\t\t\t{ // it's a word gap\n\t\t\t\t\t// Eat any other whitespace.\n\t\t\t\t\twhile( isset($str[$i+1]) && ctype_space($str[$i+1]) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\tif( isset($str[$i+1]) && $have_seen_non_whitespace )\n\t\t\t\t\t{ // only decrement words, if there's a non-space char left.\n\t\t\t\t\t\t--$maxwords;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$have_seen_non_whitespace = true;\n\t\t\t\tbreak;\n\t\t}\n\t\tif( $maxwords < 1 ) break;\n\t}\n\n\t// restrict content to required number of words and balance the tags out\n\t$str = balance_tags( utf8_substr( $str, 0, $i ) );\n\n\tif( $params['always_continue'] || $maxwords == false )\n\t{ // we want a continued text\n\t\tif( $params['continued_link'] )\n\t\t{ // we have a url\n\t\t\t$str .= ' <a href=\"'.$params['continued_link'].'\">'.$params['continued_text'].'</a>';\n\t\t}\n\t\telse\n\t\t{ // we don't have a url\n\t\t\t$str .= ' '.$params['continued_text'];\n\t\t}\n\t}\n\t// remove empty tags\n\t$str = preg_replace( '~<([\\s]+?)[^>]*?></\\1>~is', '', $str );\n\n\treturn $str;\n}\n\n\n/**\n * Convert all non ASCII chars (except if UTF-8, GB2312 or CP1251) to &#nnnn; unicode references.\n * Also convert entities to &#nnnn; unicode references if output is not HTML (eg XML)\n *\n * Preserves < > and quotes.\n *\n * fplanque: simplified\n * sakichan: pregs instead of loop\n */\nfunction convert_chars( $content, $flag = 'html' )\n{\n\tglobal $b2_htmltrans, $evo_charset;\n\n\t/**\n\t * Translation of invalid Unicode references range to valid range.\n\t * These are Windows CP1252 specific characters.\n\t * They would look weird on non-Windows browsers.\n\t * If you've ever pasted text from MSWord, you'll understand.\n\t *\n\t * You should not have to change this.\n\t */\n\tstatic $b2_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#130;' => '&#8218;',\n\t\t'&#131;' => '&#402;',\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#142;' => '&#382;',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;'\n\t);\n\n\t// Convert highbyte non ASCII/UTF-8 chars to urefs:\n\tif( ! in_array(strtolower($evo_charset), array( 'utf8', 'utf-8', 'gb2312', 'windows-1251') ) )\n\t{ // This is a single byte charset\n\t\t// fp> why do we actually bother doing this:?\n\t\t$content = preg_replace_callback(\n\t\t\t'/[\\x80-\\xff]/',\n\t\t\tcreate_function( '$j', 'return \"&#\".ord($j[0]).\";\";' ),\n\t\t\t$content);\n\t}\n\n\t// Convert Windows CP1252 => Unicode (valid HTML)\n\t// TODO: should this go to input conversions instead (?)\n\t$content = strtr( $content, $b2_htmltranswinuni );\n\n\tif( $flag == 'html' )\n\t{ // we can use entities\n\t\t// Convert & chars that are not used in an entity\n\t\t$content = preg_replace('/&(?![#A-Za-z0-9]{2,20};)/', '&amp;', $content);\n\t}\n\telse\n\t{ // unicode, xml...\n\t\t// Convert & chars that are not used in an entity\n\t\t$content = preg_replace('/&(?![#A-Za-z0-9]{2,20};)/', '&#38;', $content);\n\n\t\t// Convert HTML entities to urefs:\n\t\t$content = strtr($content, $b2_htmltrans);\n\t}\n\n\treturn( $content );\n}\n\n\n/**\n * Get number of bytes in $string. This works around mbstring.func_overload, if\n * activated for strlen/mb_strlen.\n * @param string\n * @return int\n */\nfunction evo_bytes( $string )\n{\n\t$fo = ini_get('mbstring.func_overload');\n\tif( $fo && $fo & 2 && function_exists('mb_strlen') )\n\t{ // overloading of strlen is enabled\n\t\treturn mb_strlen( $string, 'ASCII' );\n\t}\n\treturn strlen($string);\n}\n\n\n/**\n * mbstring wrapper for strtolower function\n *\n * @deprecated by {@link utf8_strtolower()}\n *\n * fp> TODO: instead of those \"when used\" ifs, it would make more sense to redefine\n * mb_strtolower beforehand if it doesn\"t exist (it would then just be a fallback\n * to the strtolower + a Debuglog->add() )\n *\n * @param string\n * @return string\n */\nfunction evo_strtolower( $string )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strtolower') )\n\t{\n\t\treturn mb_strtolower( $string, $current_charset );\n\t}\n\n\treturn strtolower($string);\n}\n\n\n/**\n * mbstring wrapper for strlen function\n *\n * @deprecated by {@link utf8_strlen()}\n *\n * @param string\n * @return string\n */\nfunction evo_strlen( $string )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strlen') )\n\t{\n\t\treturn mb_strlen( $string, $current_charset );\n\t}\n\n\treturn strlen($string);\n}\n\n/**\n * mbstring wrapper for strpos function\n *\n * @deprecated by {@link utf8_strpos()}\n *\n * @param string\n * @param string\n * @return int\n */\nfunction evo_strpos( $string , $needle , $offset = null )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strpos') )\n\t{\n\t\treturn mb_strpos( $string, $needle, $offset ,$current_charset );\n\t}\n\n\treturn strpos( $string , $needle , $offset );\n}\n\n\n/**\n * mbstring wrapper for substr function\n *\n * @deprecated by {@link utf8_substr()}\n *\n * @param string\n * @param int start position\n * @param int string length\n * @return string\n */\nfunction evo_substr( $string, $start = 0, $length = '#' )\n{\n\tglobal $current_charset;\n\n\tif( ! $length )\n\t{ // make mb_substr and substr behave consistently (mb_substr returns string for length=0)\n\t\treturn '';\n\t}\n\tif( $length == '#' )\n\t{\n\t\t$length = utf8_strlen($string);\n\t}\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_substr') )\n\t{\n\t\treturn mb_substr( $string, $start, $length, $current_charset );\n\t}\n\n\treturn substr( $string, $start, $length );\n}\n\n\n/**\n * Split $text into blocks by using $pattern and call $callback on the non-matching blocks.\n *\n * The non-matching block's text is the first param to $callback and additionally $params gets passed.\n *\n * This gets used to make links clickable or replace smilies.\n *\n * E.g., to replace only in non-HTML tags, call it like:\n * <code>callback_on_non_matching_blocks( $text, '~<[^>]*>~s', 'your_callback' );</code>\n *\n * {@internal This function gets tested in misc.funcs.simpletest.php.}}\n *\n * @param string Text to handle\n * @param string Regular expression pattern that defines blocks to exclude.\n * @param callback Function name or object/method array to use as callback.\n *               Each non-matching block gets passed as first param, additional params may be\n *               passed with $params.\n * @param array Of additional (\"static\") params to $callback.\n * @return string\n */\nfunction callback_on_non_matching_blocks( $text, $pattern, $callback, $params = array() )\n{\n\tif( preg_match_all( $pattern, $text, $matches, PREG_OFFSET_CAPTURE | PREG_PATTERN_ORDER ) )\n\t{\t// $pattern matches, call the callback method on full text except of matching blocks\n\n\t\t// Create an unique string in order to replace all matching blocks temporarily\n\t\t$unique_replacement = md5( time() + rand() );\n\n\t\t$matches_search = array();\n\t\t$matches_replace = array();\n\t\tforeach( $matches[0] as $l => $l_matching )\n\t\t{\t// Build arrays with a source code of the matching blocks and with temporary replacement\n\t\t\t$matches_source[] = $l_matching[0];\n\t\t\t$matches_temp[] = '?'.$l.$unique_replacement.$l.'?';\n\t\t}\n\n\t\t// Replace all matching blocks with temporary text like '?X219a33da9c1b8f4e335bffc015df8c96X?'\n\t\t// where X is index of match block in array $matches[0]\n\t\t// It is used to avoid any changes in the matching blocks\n\t\t$text = str_ireplace( $matches_source, $matches_temp, $text );\n\n\t\t// Callback:\n\t\t$callback_params = $params;\n\t\tarray_unshift( $callback_params, $text );\n\t\t$text = call_user_func_array( $callback, $callback_params );\n\n\t\t// Revert a source code of the matching blocks in content\n\t\t$text = str_ireplace( $matches_temp, $matches_source, $text );\n\n\t\treturn $text;\n\t}\n\n\t$callback_params = $params;\n\tarray_unshift( $callback_params, $text );\n\treturn call_user_func_array( $callback, $callback_params );\n}\n\n\n/**\n * Replace content outside blocks <code></code>, <pre></pre> and markdown codeblocks\n *\n * @param array|string Search list\n * @param array|string Replace list or Callback function\n * @param string Source content\n * @param string Callback function name\n * @param string Type of callback function: 'preg' -> preg_replace(), 'str' -> str_replace() (@see replace_content())\n * @return string Replaced content\n */\nfunction replace_content_outcode( $search, $replace, $content, $replace_function_callback = 'replace_content', $replace_function_type = 'preg' )\n{\n\tif( !empty( $search ) )\n\t{\n\t\tif( stristr( $content, '<code' ) !== false || stristr( $content, '<pre' ) !== false || strstr( $content, '`' ) !== false )\n\t\t{ // Call replace_content() on everything outside code/pre and markdown codeblocks:\n\t\t\t$content = callback_on_non_matching_blocks( $content,\n\t\t\t\t'~(`|<(code|pre)[^>]*>).*?(\\1|</\\2>)~is',\n\t\t\t\t$replace_function_callback, array( $search, $replace, $replace_function_type ) );\n\t\t}\n\t\telse\n\t\t{ // No code/pre blocks, replace on the whole thing\n\t\t\t$content = call_user_func( $replace_function_callback, $content, $search, $replace, $replace_function_type );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Replace content, Used for function callback_on_non_matching_blocks(), because there is different order of params\n *\n * @param string Source content\n * @param array|string Search list\n * @param array|string Replace list\n * @param string Type of function: 'preg' -> preg_replace(), 'str' -> str_replace()\n * @param string The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit).\n * @return string Replaced content\n */\nfunction replace_content( $content, $search, $replace, $type = 'preg', $limit = -1 )\n{\n\tif( $limit == 0 )\n\t{\t// Strange request to nothing replace, Return original content:\n\t\treturn $content;\n\t}\n\n\tswitch( $type )\n\t{\n\t\tcase 'str':\n\t\t\tif( $limit == -1 )\n\t\t\t{\t// Unlimited replace:\n\t\t\t\treturn str_replace( $search, $replace, $content );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Limited replace:\n\t\t\t\t$pos = strpos( $content, $search );\n\t\t\t\tif( $pos !== false )\n\t\t\t\t{\t// Do the limited replacements:\n\t\t\t\t\tfor( $p = 0; $p < $limit; $p++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( $pos === false )\n\t\t\t\t\t\t{\t// Stop searching:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$content = substr_replace( $content, $replace, $pos, strlen( $search ) );\n\t\t\t\t\t\t// Go to next searched substring:\n\t\t\t\t\t\t$pos = strpos( $content, $search, $pos + strlen( $replace ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $content;\n\t\t\t}\n\n\t\tdefault: // 'preg'\n\t\t\treturn preg_replace( $search, $replace, $content, $limit );\n\t}\n}\n\n\n/**\n * Replace content by callback, Used for function callback_on_non_matching_blocks(), because there is different order of params\n *\n * @param string Source content\n * @param array|string Search list\n * @param array|string Replace callback\n * @return string Replaced content\n */\nfunction replace_content_callback( $content, $search, $replace_callback )\n{\n\treturn preg_replace_callback( $search, $replace_callback, $content );\n}\n\n\n/**\n * Split a content by separators outside <code> and <pre> blocks\n *\n * @param string|array Separators\n * @param string Content\n * @param boolean TRUE - parenthesized expression of separator will be captured and returned as well\n * @return array The result of explode() function\n */\nfunction split_outcode( $separators, $content, $capture_separator = false )\n{\n\t// Check if the separators exists in content\n\tif( ! is_array( $separators ) )\n\t{ // Convert string to array with one element\n\t\t$separators = array( $separators );\n\t}\n\t$separators_exists = false;\n\tif( is_array( $separators ) )\n\t{ // Find in array\n\t\tforeach( $separators as $separator )\n\t\t{\n\t\t\tif( strpos( $content, $separator ) !== false )\n\t\t\t{ // Separator is found\n\t\t\t\t$separators_exists = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $separators_exists )\n\t{ // There are separators in content, Split the content:\n\n\t\t// Initialize temp values for replace the separators\n\t\tif( $capture_separator )\n\t\t{\n\t\t\t$rplc_separators = array();\n\t\t\tforeach( $separators as $s => $separator )\n\t\t\t{\n\t\t\t\t$rplc_separators[] = '#separator'.$s.'='.md5( rand() ).'#';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$rplc_separators = '#separator='.md5( rand() ).'#';\n\t\t}\n\t\t// Replace the content separators with temp value\n\t\tif( strpos( $content, '<code' ) !== false || strpos( $content, '<pre' ) !== false )\n\t\t{ // Call replace_separators_callback() on everything outside code/pre:\n\t\t\t$content = callback_on_non_matching_blocks( $content,\n\t\t\t\t'~<(code|pre)[^>]*>.*?</\\1>~is',\n\t\t\t\t'replace_content', array( $separators, $rplc_separators, 'str' ) );\n\t\t}\n\t\telse\n\t\t{ // No code/pre blocks, replace on the whole thing\n\t\t\t$content = str_replace( $separators, $rplc_separators, $content );\n\t\t}\n\n\t\tif( $capture_separator )\n\t\t{ // Save the separators\n\t\t\t$split_regexp = '~('.implode( '|', $rplc_separators ).')~s';\n\t\t\t$content_parts = preg_split( $split_regexp, $content, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t\t\tforeach( $content_parts as $c => $content_part )\n\t\t\t{\n\t\t\t\tif( ( $s = array_search( $content_part, $rplc_separators ) ) !== false )\n\t\t\t\t{ // Replace original separator back\n\t\t\t\t\t$content_parts[ $c ] = $separators[ $s ];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $content_parts;\n\t\t}\n\t\telse\n\t\t{ // Return only splitted content(without separators)\n\t\t\treturn explode( $rplc_separators, $content );\n\t\t}\n\t}\n\telse\n\t{ // No separators in content, Return whole content as one element of array\n\t\treturn array( $content );\n\t}\n}\n\n\n/**\n * Remove [image:] and [video:] short tags that are inside <p> blocks and move them before the paragraph\n *\n * @param string Source content\n * @param string Search pattern\n * @param function Optional callback function that accepts search pattern and current paragraph as arguments and returns the new_paragraph\n * @return string Content\n */\nfunction move_short_tags( $content, $pattern = NULL, $callback = NULL )\n{\t// Move [image:] and [video:] tags out of <p> blocks\n\n\t// Get individual paragraphs\n\tpreg_match_all( '/<p[\\s*|>].*?<\\/p>/i', $content, $paragraphs );\n\n\tif( is_null( $pattern ) )\n\t{\n\t\t$pattern = '/\\[(image|video):\\d+:?[^\\[\\]]*\\]/i';\n\t}\n\n\tforeach( $paragraphs[0] as $i => $current_paragraph )\n\t{\n\t\tif( $callback )\n\t\t{\n\t\t\t$new_paragraph = call_user_func( $callback, $pattern, $current_paragraph );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// get short tags in each paragraph\n\t\t\tpreg_match_all( $pattern, $current_paragraph, $matches );\n\t\t\t$new_paragraph = $current_paragraph;\n\n\t\t\tif( $matches[0] )\n\t\t\t{\n\t\t\t\t$new_paragraph = str_replace( $matches[0], '', $current_paragraph );\n\n\t\t\t\t// convert &nbsp; to space\n\t\t\t\t$x = str_replace( \"\\xC2\\xA0\", ' ', $new_paragraph );\n\n\t\t\t\tif( preg_match( '/<p[\\s*|>]\\s*<\\/p>/i', $x ) === 1 )\n\t\t\t\t{ // remove paragraph the if moving out the short tag will result to an empty paragraph\n\t\t\t\t\t$new_paragraph = '';\n\t\t\t\t}\n\n\t\t\t\t$new_paragraph = implode( '', $matches[0] ).$new_paragraph;\n\t\t\t}\n\t\t}\n\t\t$content = str_replace( $current_paragraph, $new_paragraph, $content );\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Make links clickable in a given text.\n *\n * It replaces only text which is not between <a> tags already.\n *\n * @todo dh> this should not replace links in tags! currently fails for something\n *           like '<img src=\" http://example.com/\" />' (not usual though!)\n * fp> I am trying to address this by not replacing anything inside tags\n * fp> This should be replaced by a clean state machine (one single variable for current state)\n *\n * {@internal This function gets tested in misc.funcs.simpletest.php.}}\n *\n * @param string Text\n * @param string Url delimeter\n * @param string Callback function name\n * @param string Additional attributes for tag <a>\n * @param boolean TRUE to exclude links from header tags like h1, h2, etc.\n * @return string\n */\nfunction make_clickable( $text, $moredelim = '&amp;', $callback = 'make_clickable_callback', $additional_attrs = '', $exclude_headers = false )\n{\n\t$r = '';\n\t$inside_tag = false;\n\t$in_a_tag = false;\n\t$in_code_tag = false;\n\t$in_tag_quote = false;\n\t$in_header_tag = false;\n\t$from_pos = 0;\n\t$i = 0;\n\t$n = strlen($text);\n\n\t// Not using callback_on_non_matching_blocks(), because it requires\n\t// wellformed HTML and the implementation below should be\n\t// faster and less memory intensive (tested for some example content)\n\twhile( $i < $n )\n\t{\t// Go through each char in string... (we will fast forward from tag to tag)\n\t\tif( $inside_tag )\n\t\t{\t// State: We're currently inside some tag:\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '>':\n\t\t\t\t\tif( $in_tag_quote )\n\t\t\t\t\t{ // This is in a quoted string so it doesn't really matter...\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// end of tag:\n\t\t\t\t\t$inside_tag = false;\n\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos+1);\n\t\t\t\t\t$from_pos = $i+1;\n\t\t\t\t\t// $r .= '}';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// This is the beginning or the end of a quoted string:\n\t\t\t\t\tif( ! $in_tag_quote )\n\t\t\t\t\t{\n\t\t\t\t\t\t$in_tag_quote = $text[$i];\n\t\t\t\t\t}\n\t\t\t\t\telseif( $in_tag_quote == $text[$i] )\n\t\t\t\t\t{\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_a_tag )\n\t\t{\t// In a link but no longer inside <a>...</a> tag or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower(substr($text, $i+1, 3)) == '/a>' )\n\t\t\t\t\t{\t// Ok, this is the end tag of the link:\n\t\t\t\t\t\t// $r .= substr($text, $from_pos, $i-$from_pos+4);\n\t\t\t\t\t\t// $from_pos = $i+4;\n\t\t\t\t\t\t$i += 4;\n\t\t\t\t\t\t// pre_dump( 'END A TAG: '.substr($text, $from_pos, $i-$from_pos) );\n\t\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos);\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_a_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_code_tag )\n\t\t{\t// In a code but no longer inside <code>...</code> tag or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower(substr($text, $i+1, 5)) == '/code' )\n\t\t\t\t\t{\t// Ok, this is the end tag of the code:\n\t\t\t\t\t\t// $r .= substr($text, $from_pos, $i-$from_pos+4);\n\t\t\t\t\t\t// $from_pos = $i+4;\n\t\t\t\t\t\t$i += 7;\n\t\t\t\t\t\t// pre_dump( 'END A TAG: '.substr($text, $from_pos, $i-$from_pos) );\n\t\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos);\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_code_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_header_tag )\n\t\t{\t// In a code but no longer inside <h#>...</h#> tags or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower( substr( $text, $i+1, 3 ) ) == '/'.$in_header_tag )\n\t\t\t\t\t{\t// Ok, this is the end tag of the header:\n\t\t\t\t\t\t$i += 5;\n\t\t\t\t\t\t$r .= substr( $text, $from_pos, $i - $from_pos );\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_code_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{ // State: we're not currently in any tag:\n\t\t\t// Find next tag opening:\n\t\t\t$i = strpos($text, '<', $i);\n\t\t\tif( $i === false )\n\t\t\t{ // No more opening tags:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$inside_tag = true;\n\t\t\t$in_tag_quote = false;\n\t\t\t// s$r .= '{'.$text[$i+1];\n\n\t\t\tif( ($text[$i+1] == 'a' || $text[$i+1] == 'A') && ctype_space($text[$i+2]) )\n\t\t\t{ // opening \"A\" tag\n\t\t\t\t$in_a_tag = true;\n\t\t\t}\n\n\t\t\tif( ( substr( $text, $i+1, 4 ) == 'code') )\n\t\t\t{ // opening \"code\" tag\n\t\t\t\t$in_code_tag = true;\n\t\t\t}\n\n\t\t\tif( $exclude_headers && preg_match( '/^h[1-6]$/', substr( $text, $i+1, 2 ), $h_match ) )\n\t\t\t{\t// opening \"h1\" - \"h6\" tags:\n\t\t\t\t$in_header_tag = $h_match[0];\n\t\t\t}\n\n\t\t\t// Make the text before the opening < clickable:\n\t\t\t$r .= call_user_func_array( $callback, array( substr( $text, $from_pos, $i-$from_pos ), $moredelim, $additional_attrs ) );\n\t\t\t$from_pos = $i;\n\n\t\t\t// $i += 2;\n\t\t}\n\n\t\t$i++;\n\t}\n\n\t// the remaining part:\n\tif( $in_a_tag )\n\t{ // may happen for invalid html:\n\t\t$r .= substr($text, $from_pos);\n\t}\n\telse\n\t{\t// Make remplacements in the remaining part:\n\t\t$r .= call_user_func_array( $callback, array( substr( $text, $from_pos ), $moredelim, $additional_attrs ) );\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Callback function for {@link make_clickable()}.\n *\n * original function: phpBB, extended here for AIM & ICQ\n * fplanque restricted :// to http:// and mailto://\n * Fixed to not include trailing dot and comma.\n *\n * fp> I'm thinking of moving this into the autolinks plugin (only place where it's used)\n *     and break it up into something more systematic.\n *\n * @param string Text\n * @param string Url delimeter\n * @param string Additional attributes for tag <a>\n * @return string The clickable text.\n */\nfunction make_clickable_callback( $text, $moredelim = '&amp;', $additional_attrs = '' )\n{\n\tif( !empty( $additional_attrs ) )\n\t{\n\t\t$additional_attrs = ' '.trim( $additional_attrs );\n\t}\n\t//return $text;\n\t/*preg_match( '/<code>([.\\r\\n]+?)<\\/code>/i', $text, $matches );\n\tpre_dump( $text, $matches );*/\n\n\t$pattern_domain = '([\\p{L}0-9\\-]+\\.[\\p{L}0-9\\-.\\~]+)'; // a domain name (not very strict)\n\t$text = preg_replace(\n\t\t/* Tblue> I removed the double quotes from the first RegExp because\n\t\t\t\t  it made URLs in tag attributes clickable.\n\t\t\t\t  See http://forums.b2evolution.net/viewtopic.php?p=92073 */\n\t\tarray( '#(^|[\\s>\\(]|\\[url=)(https?|mailto)://([^<>{}\\s]+[^.,:;!\\?<>{}\\s\\]\\)])#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)aim:([^,<\\s\\]\\)]+)#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)icq:(\\d+)#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)www\\.'.$pattern_domain.'([^<>{}\\s]*[^.,:;!\\?\\s\\]\\)])#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)([a-z0-9\\-_.]+?)@'.$pattern_domain.'([^.,:;!\\?<\\s\\]\\)]+)#i', ),\n\t\tarray( '$1<a href=\"$2://$3\"'.$additional_attrs.'>$2://$3</a>',\n\t\t\t'$1<a href=\"aim:goim?screenname=$2$3'.$moredelim.'message='.rawurlencode(T_('Hello')).'\"'.$additional_attrs.'>$2$3</a>',\n\t\t\t'$1<a href=\"http://wwp.icq.com/scripts/search.dll?to=$2\"'.$additional_attrs.'>$2</a>',\n\t\t\t'$1<a href=\"http://www.$2$3$4\"'.$additional_attrs.'>www.$2$3$4</a>',\n\t\t\t'$1<a href=\"mailto:$2@$3$4\"'.$additional_attrs.'>$2@$3$4</a>', ),\n\t\t$text );\n\n\treturn $text;\n}\n\n\n/***** // Formatting functions *****/\n\n/**\n * Convert timestamp to MySQL/ISO format.\n *\n * @param integer UNIX timestamp\n * @return string Date formatted as \"Y-m-d H:i:s\"\n */\nfunction date2mysql( $ts )\n{\n\treturn date( 'Y-m-d H:i:s', $ts );\n}\n\n/**\n * Convert a MYSQL date to a UNIX timestamp.\n *\n * @param string Date formatted as \"Y-m-d H:i:s\"\n * @param boolean true to use GM time\n * @return integer UNIX timestamp\n */\nfunction mysql2timestamp( $m, $useGM = false )\n{\n\t$func = $useGM ? 'gmmktime' : 'mktime';\n\treturn $func(\n\t\tintval( substr( $m, 11, 2 ) ),  // hour\n\t\tintval( substr( $m, 14, 2 ) ),  // minute\n\t\tintval( substr( $m, 17, 2 ) ),  // second\n\t\tintval( substr( $m, 5, 2 ) ),   // month\n\t\tintval( substr( $m, 8, 2 ) ),   // day\n\t\tintval( substr( $m, 0, 4 ) ) ); // year\n}\n\n/**\n * Convert a MYSQL date -- WITHOUT the time -- to a UNIX timestamp\n *\n * @param string Date formatted as \"Y-m-d\"\n * @param boolean true to use GM time\n * @return integer UNIX timestamp\n */\nfunction mysql2datestamp( $m, $useGM = false )\n{\n\t$func = $useGM ? 'gmmktime' : 'mktime';\n\treturn $func( 0, 0, 0, substr($m,5,2), substr($m,8,2), substr($m,0,4) );\n}\n\n/**\n * Format a MYSQL date to current locale date format.\n *\n * @param string MYSQL date YYYY-MM-DD HH:MM:SS\n */\nfunction mysql2localedate( $mysqlstring )\n{\n\treturn mysql2date( locale_datefmt(), $mysqlstring );\n}\n\nfunction mysql2localetime( $mysqlstring )\n{\n\treturn mysql2date( locale_timefmt(), $mysqlstring );\n}\n\nfunction mysql2localedatetime( $mysqlstring )\n{\n\treturn mysql2date( locale_datefmt().' '.locale_timefmt(), $mysqlstring );\n}\n\nfunction mysql2localedatetime_spans( $mysqlstring, $datefmt = NULL, $timefmt = NULL )\n{\n\tif( is_null( $datefmt ) )\n\t{\n\t\t$datefmt = locale_datefmt();\n\t}\n\tif( is_null( $timefmt ) )\n\t{\n\t\t$timefmt = locale_timefmt();\n\t}\n\n\treturn '<span class=\"date\">'\n\t\t\t\t\t.mysql2date( $datefmt, $mysqlstring )\n\t\t\t\t\t.'</span> <span class=\"time\">'\n\t\t\t\t\t.mysql2date( $timefmt, $mysqlstring )\n\t\t\t\t\t.'</span>';\n}\n\n\n/**\n * Format a MYSQL date.\n *\n * @param string enhanced format string\n * @param string MYSQL date YYYY-MM-DD HH:MM:SS\n * @param boolean true to use GM time\n */\nfunction mysql2date( $dateformatstring, $mysqlstring, $useGM = false )\n{\n\t$m = $mysqlstring;\n\tif( empty($m) || ($m == '0000-00-00 00:00:00' ) )\n\t\treturn false;\n\n\t// Get a timestamp:\n\t$unixtimestamp = mysql2timestamp( $m );\n\n\treturn date_i18n( $dateformatstring, $unixtimestamp, $useGM );\n}\n\n\n/**\n * Date internationalization: same as date() formatting but with i18n support.\n *\n * @todo dh> support for MySQL date format instead of $unixtimestamp? This would simplify callees, where currently mktime() is used.\n * @param string enhanced format string\n * @param integer UNIX timestamp\n * @param boolean true to use GM time\n */\nfunction date_i18n( $dateformatstring, $unixtimestamp, $useGM = false )\n{\n\tglobal $month, $month_abbrev, $weekday, $weekday_abbrev, $weekday_letter;\n\tglobal $localtimenow, $time_difference;\n\n\tif( $dateformatstring == 'isoZ' )\n\t{ // full ISO 8601 format\n\t\t$dateformatstring = 'Y-m-d\\TH:i:s\\Z';\n\t}\n\n\tif( $useGM )\n\t{ // We want a Greenwich Meridian time:\n\t\t// TODO: dh> what's the point of the substraction? UNIX timestamp should contain no time_difference in the first place?! Otherwise it should be substracted for !$useGM, too.\n\t\t// TODO: dh> Why does $useGM do not get the special symbols handling?\n\t\t$r = gmdate($dateformatstring, ($unixtimestamp - $time_difference));\n\t}\n\telse\n\t{ // We want default timezone time:\n\n\t\t/*\n\t\tSpecial symbols:\n\t\t\t'b': wether it's today (1) or not (0)\n\t\t\t'l': weekday\n\t\t\t'D': weekday abbrev\n\t\t\t'e': weekday letter\n\t\t\t'F': month\n\t\t\t'M': month abbrev\n\t\t*/\n\n\t\t#echo $dateformatstring, '<br />';\n\n\t\t// protect special symbols, that date() would need proper locale set for\n\t\t$protected_dateformatstring = preg_replace( '/(?<!\\\\\\)([blDeFM])/', '@@@\\\\\\$1@@@', $dateformatstring );\n\n\t\t#echo $protected_dateformatstring, '<br />';\n\n\t\t$r = date( $protected_dateformatstring, $unixtimestamp );\n\n\t\tif( $protected_dateformatstring != $dateformatstring )\n\t\t{ // we had special symbols, replace them\n\n\t\t\t$istoday = ( date('Ymd',$unixtimestamp) == date('Ymd',$localtimenow) ) ? '1' : '0';\n\t\t\t$datemonth = date('m', $unixtimestamp);\n\t\t\t$dateweekday = date('w', $unixtimestamp);\n\n\t\t\t// replace special symbols\n\t\t\t$r = str_replace( array(\n\t\t\t\t\t\t'@@@b@@@',\n\t\t\t\t\t\t'@@@l@@@',\n\t\t\t\t\t\t'@@@D@@@',\n\t\t\t\t\t\t'@@@e@@@',\n\t\t\t\t\t\t'@@@F@@@',\n\t\t\t\t\t\t'@@@M@@@',\n\t\t\t\t\t\t),\n\t\t\t\t\tarray( $istoday,\n\t\t\t\t\t\ttrim(T_($weekday[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($weekday_abbrev[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($weekday_letter[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($month[$datemonth])),\n\t\t\t\t\t\ttrim(T_($month_abbrev[$datemonth])) ),\n\t\t\t\t\t$r );\n\t\t}\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Add given # of days to a timestamp\n *\n * @param integer timestamp\n * @param integer days\n * @return integer timestamp\n */\nfunction date_add_days( $timestamp, $days )\n{\n\treturn mktime( date('H',$timestamp), date('m',$timestamp), date('s',$timestamp),\n\t\t\t\t\t\t\t\tdate('m',$timestamp), date('d',$timestamp)+$days, date('Y',$timestamp)  );\n}\n\n/**\n * Format dates into a string in a way similar to sprintf()\n */\nfunction date_sprintf( $string, $timestamp )\n{\n\tglobal $date_sprintf_timestamp;\n\t$date_sprintf_timestamp = $timestamp;\n\n\treturn preg_replace_callback( '/%\\{(.*?)\\}/', 'date_sprintf_callback', $string );\n}\n\nfunction date_sprintf_callback( $matches )\n{\n\tglobal $date_sprintf_timestamp;\n\n\treturn date_i18n( $matches[1], $date_sprintf_timestamp );\n}\n\n\n/**\n * Get date name when date was happened\n *\n * @param integer Timestamp\n * @return string Name of date (Today, Yesterday, x days ago, x months ago, x years ago)\n */\nfunction date_ago( $timestamp )\n{\n\tglobal $servertimenow;\n\n\t$days = floor( ( $servertimenow - $timestamp ) / 86400 );\n\t$months = ceil( $days / 31 );\n\n\tif( $days < 1 )\n\t{\t// Today\n\t\treturn T_('Today');\n\t}\n\telseif( $days == 1 )\n\t{\t// Yesterday\n\t\treturn T_('Yesterday');\n\t}\n\telseif( $days > 1 && $days <= 31 )\n\t{\t// Days\n\t\treturn sprintf( T_('%s days ago'), $days );\n\t}\n\telseif( $days > 31 && $months <= 12 )\n\t{\t// Months\n\t\treturn sprintf( $months == 1 ? T_('%s month ago') : T_('%s months ago'), $months );\n\t}\n\telse\n\t{\t// Years\n\t\t$years = floor( $months / 12 );\n\t\treturn sprintf( $years == 1 ? T_('%s year ago') : T_('%s years ago'), $years );\n\t}\n}\n\n\n/**\n * Convert seconds to readable period\n *\n * @param integer Seconds\n * @return string Readable time period\n */\nfunction seconds_to_period( $seconds )\n{\n\t$periods = array(\n\t\tarray( 31536000, T_('1 year'),   T_('%s years') ), // 365 days\n\t\tarray( 2592000,  T_('1 month'),  T_('%s months') ), // 30 days\n\t\tarray( 86400,    T_('1 day'),    T_('%s days') ),\n\t\tarray( 3600,     T_('1 hour'),   T_('%s hours') ),\n\t\tarray( 60,       T_('1 minute'), T_('%s minutes') ),\n\t\tarray( 1,        T_('1 second'), T_('%s seconds') ),\n\t);\n\n\tforeach( $periods as $p_info )\n\t{\n\t\t$period_value = intval( $seconds / $p_info[0] * 10 ) /10;\n\t\tif( $period_value >= 1 )\n\t\t{ // Stop on this period\n\t\t\tif( $period_value == 1 )\n\t\t\t{ // One unit of period\n\t\t\t\t$period_text = $p_info[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Two and more units of period\n\t\t\t\t$period_text = sprintf( $p_info[2], $period_value );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !isset( $period_text ) )\n\t{ // 0 seconds\n\t\t$period_text = sprintf( T_('%s seconds'), 0 );\n\t}\n\n\treturn $period_text;\n}\n\n\n/**\n * Converts an ISO 8601 date to MySQL DateTime format.\n *\n * @param string date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}.\n * @return string date and time in MySQL DateTime format Y-m-d H:i:s.\n */\nfunction iso8601_to_datetime( $iso_date )\n{\n\treturn preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $iso_date);\n}\n\n\n/**\n * Converts a MySQL DateTime to ISO 8601 date format.\n *\n * @param string date and time in MySQL DateTime format Y-m-d H:i:s\n * @return string date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}.\n */\nfunction datetime_to_iso8601( $datetime, $useGM = false )\n{\n\t$iso_date = mysql2date('U', $datetime);\n\n\tif( $useGM )\n\t{\n\t\t$iso_date = gmdate('Ymd', $iso_date).'T'.gmdate('H:i:s', $iso_date);\n\t}\n\telse\n\t{\n\t\t$iso_date = date('Ymd', $iso_date).'T'.date('H:i:s', $iso_date);\n\t}\n\n\treturn $iso_date;\n}\n\n\n/**\n *\n * @param integer year\n * @param integer month (0-53)\n * @param integer 0 for sunday, 1 for monday\n */\nfunction get_start_date_for_week( $year, $week, $startofweek )\n{\n\t$new_years_date = mktime( 0, 0, 0, 1, 1, $year );\n\t$weekday = date('w', $new_years_date);\n\t// echo '<br> 1st day is a: '.$weekday;\n\n\t// How many days until start of week:\n\t$days_to_new_week = (7 - $weekday + $startofweek) % 7;\n\t// echo '<br> days to new week: '.$days_to_new_week;\n\n\t// We now add the required number of days to find the 1st sunday/monday in the year:\n\t//$first_week_start_date = $new_years_date + $days_to_new_week * 86400;\n\t//echo '<br> 1st week starts on '.date( 'Y-m-d H:i:s', $first_week_start_date );\n\n\t// We add the number of requested weeks:\n\t// This will fail when passing to Daylight Savings Time: $date = $first_week_start_date + (($week-1) * 604800);\n\t$date = mktime( 0, 0, 0, 1, $days_to_new_week + 1 + ($week-1) * 7, $year );\n\t// echo '<br> week '.$week.' starts on '.date( 'Y-m-d H:i:s', $date );\n\n\treturn $date;\n}\n\n\n\n/**\n * Get start and end day of a week, based on day f the week and start-of-week\n *\n * Used by Calendar\n *\n * @param date\n * @param integer 0 for Sunday, 1 for Monday\n */\nfunction get_weekstartend( $date, $startOfWeek )\n{\n\twhile( date('w', $date) <> $startOfWeek )\n\t{\n\t\t// echo '<br />'.date('Y-m-d H:i:s w', $date).' - '.$startOfWeek;\n\t\t// mktime is needed so calculations work for DST enabling. Example: March 30th 2008, start of week 0 sunday\n\t\t$date = mktime( 0, 0, 0, date('m',$date), date('d',$date)-1, date('Y',$date) );\n\t}\n\t// echo '<br />'.date('Y-m-d H:i:s w', $date).' = '.$startOfWeek;\n\t$week['start'] = $date;\n\t$week['end']   = $date + 604800; // 7 days\n\n\t// pre_dump( 'weekstartend: ', date( 'Y-m-d', $week['start'] ), date( 'Y-m-d', $week['end'] ) );\n\n\treturn( $week );\n}\n\n\n/**\n * Get datetime rounded to lower minute. This is meant to remove seconds and\n * leverage MySQL's query cache by having SELECT queries remain identical for 60 seconds instead of just 1.\n *\n * @param integer UNIX timestamp\n * @param string Format (defaults to \"Y-m-d H:i\"). Use \"U\" for UNIX timestamp.\n */\nfunction remove_seconds($timestamp, $format = 'Y-m-d H:i')\n{\n\treturn date($format, floor($timestamp/60)*60);\n}\n\n\n/**\n * Convert from seconds to months, days, hours, minutes and seconds\n *\n * @param integer duration in seconds\n * @return array of [ years, months, days, hours, minutes, seconds ]\n */\nfunction get_duration_fields( $duration )\n{\n\t$result = array();\n\n\t$year_seconds = 31536000; // 1 year\n\t$years = floor( $duration / $year_seconds );\n\t$duration = $duration - $years * $year_seconds;\n\t$result[ 'years' ] = $years;\n\n\t$month_seconds = 2592000; // 1 month\n\t$months = floor( $duration / $month_seconds );\n\t$duration = $duration - $months * $month_seconds;\n\t$result[ 'months' ] = $months;\n\n\t$day_seconds = 86400; // 1 day\n\t$days = floor( $duration / $day_seconds );\n\t$duration = $duration - $days * $day_seconds;\n\t$result[ 'days' ] = $days;\n\n\t$hour_seconds = 3600; // 1 hour\n\t$hours = floor( $duration / $hour_seconds );\n\t$duration = $duration - $hours * $hour_seconds;\n\t$result[ 'hours' ] = $hours;\n\n\t$minute_seconds = 60; // 1 minute\n\t$minutes = floor( $duration / $minute_seconds );\n\t$duration = $duration - $minutes * $minute_seconds;\n\t$result[ 'minutes' ] = $minutes;\n\n\t$result[ 'seconds' ] = $duration;\n\treturn $result;\n}\n\n\n/**\n * Get a title of duration\n *\n * @param integer Duration in seconds\n * @param array Titles\n * @return string Duration title\n */\nfunction get_duration_title( $duration, $titles = array() )\n{\n\t$titles = array_merge( array(\n\t\t'year'   => T_('Last %d years'),\n\t\t'month'  => T_('Last %d months'),\n\t\t'day'    => T_('Last %d days'),\n\t\t'hour'   => T_('Last %d hours'),\n\t\t'minute' => T_('Last %d minutes'),\n\t\t'second' => T_('Last %d seconds'),\n\t\t), $titles );\n\n\t$delay_fields = get_duration_fields( $duration );\n\n\tif( ! empty( $delay_fields[ 'years' ] ) )\n\t{ // Years\n\t\treturn sprintf( $titles['year'], $delay_fields[ 'years' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'months' ] ) )\n\t{ // Months\n\t\treturn sprintf( $titles['month'], $delay_fields[ 'months' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'days' ] ) )\n\t{ // Days\n\t\treturn sprintf( $titles['day'], $delay_fields[ 'days' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'hours' ] ) )\n\t{ // Hours\n\t\treturn sprintf( $titles['hour'], $delay_fields[ 'hours' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'minutes' ] ) )\n\t{ // Minutes\n\t\treturn sprintf( $titles['minute'], $delay_fields[ 'minutes' ] );\n\t}\n\telse\n\t{ // Seconds\n\t\treturn sprintf( $titles['second'], $delay_fields[ 'seconds' ] );\n\t}\n}\n\nfunction get_lastseen_date( $date, $view = 'exact_date', $cheat = 0 )\n{\n\t$result = mysql2localedate( $date );\n\n\tif( $view == 'blurred_date' )\n\t{\n\t\t$result = (int)( ( ( time() - strtotime( $date ) ) / 86400 ) - $cheat);\n\n\t\tif( $result < 0 )\n\t\t{\n\t\t\t$result = 0;\n\t\t}\n\n\t\tif( $result < 3 )\n\t\t{\n\t\t\t$result = T_('less than 3 days ago');\n\t\t}\n\t\telseif( $result < 7 )\n\t\t{\n\t\t\t$result = T_('less than a week ago');\n\t\t}\n\t\telseif( $result < 30 )\n\t\t{\n\t\t\t$result = T_('less than a month ago');\n\t\t}\n\t\telseif( $result < 90 )\n\t\t{\n\t\t\t$result = T_('less than 3 months ago');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$result = T_('more than 3 months ago');\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Validate variable\n *\n * @param string param name\n * @param string validator function name\n * @param boolean true if variable value can't be empty\n * @param custom error message\n * @return boolean true if OK\n */\nfunction param_validate( $variable, $validator, $required = false, $custom_msg = NULL )\n{\n\t/* Tblue> Note: is_callable() does not check whether a function is\n\t *        disabled (http://www.php.net/manual/en/function.is-callable.php#79151).\n\t */\n\tif( ! is_callable( $validator ) )\n\t{\n\t\tdebug_die( 'Validator function '.$validator.'() is not callable!' );\n\t}\n\n\tif( ! isset( $GLOBALS[$variable] ) )\n\t{\t// Variable not set, we cannot handle this using the validator function...\n\t\tif( $required )\n\t\t{\t// Add error:\n\t\t\tparam_check_not_empty( $variable, $custom_msg );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif( $GLOBALS[$variable] === '' && ! $required )\n\t{\t// Variable is empty or not set. That's fine since it isn't required:\n\t\treturn true;\n\t}\n\n\t$msg = $validator( $GLOBALS[$variable] );\n\n\tif( !empty( $msg ) )\n\t{\n\t\tif( !empty( $custom_msg ) )\n\t\t{\n\t\t\t$msg = $custom_msg;\n\t\t}\n\n\t\tparam_error( $variable, $msg );\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the param is a decimal number\n *\n * @param string decimal to check\n * @return boolean true if OK\n */\nfunction is_decimal( $decimal )\n{\n\treturn preg_match( '#^[0-9]*(\\.[0-9]+)?$#', $decimal );\n}\n\n\n/**\n * Checks if the param is an integer (no float, e.g. 3.14).\n *\n * @param string number to check\n * @return boolean true if OK\n */\nfunction is_number( $number )\n{\n\treturn preg_match( '#^[0-9]+$#', $number );\n}\n\n\n/**\n * Check that email address looks valid.\n *\n * @param string email address to check\n * @param string Format to use ('simple', 'rfc')\n *    'simple':\n *      Single email address.\n *    'rfc':\n *      Full email address, may include name (RFC2822)\n *      - example@example.org\n *      - Me <example@example.org>\n *      - \"Me\" <example@example.org>\n * @param boolean Return the match or boolean\n *\n * @return bool|array Either true/false or the match (see {@link $return_match})\n */\nfunction is_email( $email, $format = 'simple', $return_match = false )\n{\n\t#$chars = \"/^([a-z0-9_]|\\\\-|\\\\.)+@(([a-z0-9_]|\\\\-)+\\\\.)+[a-z]{2,4}\\$/i\";\n\n\tswitch( $format )\n\t{\n\t\tcase 'rfc':\n\t\tcase 'rfc2822':\n\t\t\t/**\n\t\t\t * Regexp pattern converted from: http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t * Extended to allow escaped quotes.\n\t\t\t */\n\t\t\t$pattern_email = '/^\n\t\t\t\t(\n\t\t\t\t\t(?>[a-zA-Z\\d!\\#$%&\\'*+\\-\\/=?^_`{|}~]+\\x20*\n\t\t\t\t\t\t|\"( \\\\\\\" | (?=[\\x01-\\x7f])[^\"\\\\\\] | \\\\[\\x01-\\x7f] )*\"\\x20*)* # Name\n\t\t\t\t\t(<)\n\t\t\t\t)?\n\t\t\t\t(\n\t\t\t\t\t(?!\\.)(?>\\.?[a-zA-Z\\d!\\#$%&\\'*+\\-\\/=?^_`{|}~]+)+\n\t\t\t\t\t|\"( \\\\\\\" | (?=[\\x01-\\x7f])[^\"\\\\\\] | \\\\[\\x01-\\x7f] )* \" # quoted mailbox name\n\t\t\t\t)\n\t\t\t\t@\n\t\t\t\t(\n\t\t\t\t\t((?!-)[a-zA-Z\\d\\-]+(?<!-)\\.)+[a-zA-Z]{2,}\n\t\t\t\t\t|\n\t\t\t\t\t\\[(\n\t\t\t\t\t\t( (?(?<!\\[)\\.)(25[0-5] | 2[0-4]\\d | [01]?\\d?\\d) ){4}\n\t\t\t\t\t\t|\n\t\t\t\t\t\t[a-zA-Z\\d\\-]*[a-zA-Z\\d]:( (?=[\\x01-\\x7f])[^\\\\\\[\\]] | \\\\[\\x01-\\x7f] )+\n\t\t\t\t\t)\\]\n\t\t\t\t)\n\t\t\t\t(?(3)>) # match \">\" if it was there\n\t\t\t\t$/x';\n\t\t\tbreak;\n\n\t\tcase 'simple':\n\t\tdefault:\n\t\t\t// '/^\\S+@[^\\.\\s]\\S*\\.[a-z]{2,}$/i'\n\t\t\t$pattern_email = '~^(([_a-z0-9-]+)(\\.[_a-z0-9-]+)*@([a-z0-9-]+)(\\.[a-z0-9-]+)*(\\.[a-z]{2,}))$~i';\n\t\t\tbreak;\n\t}\n\n\tif( strpos( $email, '@' ) !== false && strpos( $email, '.' ) !== false )\n\t{\n\t\tif( $return_match )\n\t\t{\n\t\t\tpreg_match( $pattern_email, $email, $match );\n\t\t\treturn $match;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (bool)preg_match( $pattern_email, $email );\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $return_match ? array() : false;\n\t}\n}\n\n\n/**\n * Checks if the phone number is valid\n *\n * @param string phone number to check\n * @return boolean true if OK\n */\nfunction is_phone( $phone )\n{\n\treturn preg_match( '|^\\+?[\\-*#/(). 0-9]+$|', $phone );\n}\n\n\n/**\n * Checks if the url is valid\n *\n * @param string url to check\n * @return boolean true if OK\n */\nfunction is_url( $url )\n{\n\tif( validate_url( $url, 'posting', false ) )\n\t{\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the word is valid\n *\n * @param string word to check\n * @return boolean true if OK\n */\nfunction is_word( $word )\n{\n\treturn preg_match( '#^[A-Za-z]+$#', $word );\n}\n\n\n/**\n * Check if the login is valid (in terms of allowed chars)\n *\n * @param string login\n * @return boolean true if OK\n */\nfunction is_valid_login( $login, $force_strict_logins = false )\n{\n\tglobal $Settings;\n\n\t$strict_logins = isset( $Settings ) ? $Settings->get('strict_logins') : 1;\n\n\t// NOTE: in some places usernames are typed in by other users (messaging) or admins.\n\t// Having cryptic logins with hard to type letters is a PITA.\n\n\t// Step 1\n\t// Forbid the following characters in logins\n\tif( preg_match( '~[\\'\"><@&\\s]~', $login ) )\n\t{\t// WARNING: allowing ' or \" or > or < will open security issues!\n\t\t// NOTE: allowing @ will make some \"average\" users use their email address (not good for their spam health)\n\t\t// NOTE: we do not allow whitespace in logins\n\t\treturn false;\n\t}\n\n\t// Step 2\n\tif( ($strict_logins || $force_strict_logins) && ! preg_match( '~^[A-Za-z0-9_.]+$~', $login ) )\n\t{\t// WARNING: allowing special chars like latin 1 accented chars ( \\xDF-\\xF6\\xF8-\\xFF ) will create issues with\n\t\t// user media directory names (tested on Max OS X) -- Do no allow any of this until we have a clean & safe media dir name generator.\n\n\t\t// fp> TODO: check why a dash '-' prevents renaming the fileroot\n\t\treturn false;\n\t}\n\telseif( ! $strict_logins )\n\t{\t// We allow any character that is not explicitly forbidden in Step 1\n\t\t// Enforce additional limitations\n\t\t$login = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $login ); // Kill octets\n\t\t$login = preg_replace( '/&.+?;/', '', $login ); // Kill entities\n\t}\n\n\t// Step 3\n\t// Special case, the login is valid however we forbid it's usage.\n\t// param_check_valid_login() will display a special error message in this case.\n\tif( preg_match( '~^usr_~', $login ) )\n\t{\t// Logins cannot start with 'usr_', this prefix is reserved for system use\n\t\t// We create user media directories for users with non-ASCII logins in format /media/users/usr_55/, where 55 is user ID\n\t\treturn 'usr';\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the color is valid\n *\n * @param string color to check\n * @return boolean true if OK\n */\nfunction is_color( $color )\n{\n\treturn preg_match( '~^(#([a-f0-9]{3}){1,2})?$~i', $color );\n}\n\n\n/**\n * Check if the login is valid (user exists)\n *\n * @param string login\n * @return boolean true if OK\n */\nfunction user_exists( $login )\n{\n\tglobal $DB;\n\n\t$SQL = new SQL();\n\t$SQL->SELECT( 'COUNT(*)' );\n\t$SQL->FROM( 'T_users' );\n\t$SQL->WHERE( 'user_login = \"'.$DB->escape($login).'\"' );\n\n\t$var = $DB->get_var( $SQL->get() );\n\treturn $var > 0 ? true : false; // PHP4 compatibility\n}\n\n\n/**\n * Are we running on a Windows server?\n */\nfunction is_windows()\n{\n\treturn ( strtoupper(substr(PHP_OS,0,3)) == 'WIN' );\n}\n\n\n/**\n * Get all \"a\" tags from the given content\n *\n * @param string content\n * @return array all <a../a> part from the given content\n */\nfunction get_atags( $content )\n{\n\t$tags = array();\n\n\tif( preg_match_all( '#(<a[^>]+>(.*?)</a>|&lt;a.+&gt;(.*?)&lt;/a&gt;)#i', $content, $result ) )\n\t{\n\t\t$tags = $result[0];\n\t}\n\n\treturn $tags;\n}\n\n\n/**\n * Add class to an html tag\n *\n * @param string HTML content\n * @param string Class to add to the tag in the HTML\n * @param integer Number of tags to add the class to\n * @return string HTML content with the added class\n */\nfunction add_tag_class( $content, $class, $limit = 1 )\n{\n\t// Check if there's an opening tag\n\tif( preg_match( '/<.*>/i', $content ) )\n\t{\n\t\t// Check if class attribute is already defined\n\t\tif( preg_match( '/\\sclass\\s*=/i', $content) )\n\t\t{ // Insert class\n\t\t\t$content = preg_replace( '/(<.*)(class\\s*=\\s*\")(.*)\"/i', '$1$2$3 '.$class.'\"', $content, $limit );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$content = preg_replace( '/>/i', ' class=\"'.$class.'\"$1>', $content, $limit );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Get all \"img\" tags from the given content\n *\n * @param string content\n * @return array all <img../img> part from the given content\n */\nfunction get_imgtags( $content )\n{\n\t$tag = 'img';\n\t$regexp = '{<'.$tag.'[^>]*[ (</'.$tag.'>) | (/>) ]}';\n\n\tpreg_match_all( $regexp, $content, $result );\n\treturn $result[0];\n}\n\n\n/**\n * Get all urls from the given content\n *\n * @param string content\n * @return array all url from content\n */\nfunction get_urls( $content )\n{\n\t$regexp = '^(?#Protocol)(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?#Username:Password)(?:\\w+:\\w+@)?(?#Subdomains)(?:(?:[-\\w]+\\.)+(?#TopLevel Domains)(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum|travel|[a-z]{2,4}))(?#Port)(?::[\\d]{1,5})?(?#Directories)(?:(?:(?:\\/(?:[-\\w~!$+|.,;=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?#Query)(?:(?:\\?(?:[-\\w~!$+|.,;*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)(?:&(?:[-\\w~!$+|.,;*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)*)*(?#Anchor)(?:#(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)?^';\n\n\tpreg_match_all( $regexp, $content, $result );\n\treturn $result[0];\n}\n\n\nfunction xmlrpc_getposttitle($content)\n{\n\tglobal $post_default_title;\n\tif (preg_match('/<title>(.+?)<\\/title>/is', $content, $matchtitle))\n\t{\n\t\t$post_title = $matchtitle[1];\n\t}\n\telse\n\t{\n\t\t$post_title = $post_default_title;\n\t}\n\treturn($post_title);\n}\n\n\n/**\n * Also used by post by mail\n *\n * @deprecated by xmlrpc_getpostcategories()\n */\nfunction xmlrpc_getpostcategory($content)\n{\n\tif (preg_match('/<category>([0-9]+?)<\\/category>/is', $content, $matchcat))\n\t{\n\t\treturn $matchcat[1];\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Extract categories out of \"<category>\" tag from $content.\n *\n * NOTE: w.bloggar sends something like \"<category>00000013,00000001,00000004,</category>\" to\n *       blogger.newPost.\n *\n * @return false|array\n */\nfunction xmlrpc_getpostcategories($content)\n{\n\t$cats = array();\n\n\tif( preg_match('~<category>(\\d+\\s*(,\\s*\\d*)*)</category>~i', $content, $match) )\n\t{\n\t\t$cats = preg_split('~\\s*,\\s*~', $match[1], -1, PREG_SPLIT_NO_EMPTY);\n\t\tforeach( $cats as $k => $v )\n\t\t{\n\t\t\t$cats[$k] = (int)$v;\n\t\t}\n\t}\n\n\treturn $cats;\n}\n\n\n/*\n * xmlrpc_removepostdata(-)\n */\nfunction xmlrpc_removepostdata($content)\n{\n\t$content = preg_replace('/<title>(.*?)<\\/title>/si', '', $content);\n\t$content = preg_replace('/<category>(.*?)<\\/category>/si', '', $content);\n\t$content = trim($content);\n\treturn($content);\n}\n\n\n/**\n * Echo the XML-RPC call Result and optionally log into file\n *\n * @param object XMLRPC response object\n * @param boolean true to echo\n * @param mixed File resource or == '' for no file logging.\n */\nfunction xmlrpc_displayresult( $result, $display = true, $log = '' )\n{\n\tif( ! $result )\n\t{ // We got no response:\n\t\tif( $display ) echo T_('No response!').\"<br />\\n\";\n\t\treturn false;\n\t}\n\n\tif( $result->faultCode() )\n\t{ // We got a remote error:\n\t\tif( $display ) echo T_('Remote error'), ': ', $result->faultString(), ' (', $result->faultCode(), \")<br />\\n\";\n\t\tdebug_fwrite($log, $result->faultCode().' -- '.$result->faultString());\n\t\treturn false;\n\t}\n\n\t// We'll display the response:\n\t$val = $result->value();\n\t$value = xmlrpc_decode_recurse($result->value());\n\n\tif( is_array($value) )\n\t{\n\t\t$out = '';\n\t\tforeach($value as $l_value)\n\t\t{\n\t\t\tif( is_array( $l_value ) )\n\t\t\t{\n\t\t\t\t$out .= ' [';\n\t\t\t\tforeach( $l_value as $lv_key => $lv_val )\n\t\t\t\t{\n\t\t\t\t\t$out .= $lv_key.' => '.( is_array( $lv_val ) ? '{'.implode( '; ', $lv_val ).'}' : $lv_val ).'; ';\n\t\t\t\t}\n\t\t\t\t$out .= '] ';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out .= ' ['.$l_value.'] ';\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t$out = $value;\n\t}\n\n\tdebug_fwrite($log, $out);\n\n\tif( $display ) echo T_('Response').': '.$out.\"<br />\\n\";\n\n\treturn $value;\n}\n\n\n/**\n * Log the XML-RPC call Result into LOG object\n *\n * @param object XMLRPC response object\n * @param Log object to add messages to\n * @return boolean true = success, false = error\n */\nfunction xmlrpc_logresult( $result, & $message_Log, $log_payload = true )\n{\n\tif( ! $result )\n\t{ // We got no response:\n\t\t$message_Log->add( T_('No response!'), 'error' );\n\t\treturn false;\n\t}\n\n\tif( $result->faultCode() )\n\t{ // We got a remote error:\n\t\t$message_Log->add( T_('Remote error').': '.$result->faultString().' ('.$result->faultCode().')', 'error' );\n\t\treturn false;\n\t}\n\n\tif( $log_payload )\n\t{\n\t\t// We got a response:\n\t\t$value = xmlrpc_decode_recurse($result->value());\n\n\t\tif( is_array($value) )\n\t\t{\n\t\t\t$out = '';\n\t\t\tforeach($value as $l_value)\n\t\t\t{\n\t\t\t\t$out .= ' ['.var_export($l_value, true).'] ';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$out = $value;\n\t\t}\n\n\t\t$message_Log->add( T_('Response').': '.$out, 'success' );\n\t}\n\n\treturn true;\n}\n\n\n\nfunction debug_fopen($filename, $mode) {\n\tglobal $debug;\n\tif ($debug == 1 && ( !empty($filename) ) )\n\t{\n\t\t$fp = fopen($filename, $mode);\n\t\treturn $fp;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction debug_fwrite($fp, $string)\n{\n\tglobal $debug;\n\tif( $debug && $fp )\n\t{\n\t\tfwrite($fp, $string);\n\t}\n}\n\nfunction debug_fclose($fp)\n{\n\tglobal $debug;\n\tif( $debug && $fp )\n\t{\n\t\tfclose($fp);\n\t}\n}\n\n\n\n/**\n * Wrap pre tag around {@link var_dump()} for better debugging.\n *\n * @param $var__var__var__var__,... mixed variable(s) to dump\n * @return true\n */\nfunction pre_dump( $var__var__var__var__ )\n{\n\tglobal $is_cli;\n\n\t#echo 'pre_dump(): '.debug_get_backtrace(); // see where a pre_dump() comes from\n\n\t$func_num_args = func_num_args();\n\t$count = 0;\n\n\tif( ! empty($is_cli) )\n\t{ // CLI, no encoding of special chars:\n\t\t$count = 0;\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\tvar_dump($lvar);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put newline between arguments\n\t\t\t\techo \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\telseif( function_exists('xdebug_var_dump') )\n\t{ // xdebug already does fancy displaying:\n\n\t\t// no limits:\n\t\t$old_var_display_max_children = @ini_set('xdebug.var_display_max_children', -1); // default: 128\n\t\t$old_var_display_max_data = @ini_set('xdebug.var_display_max_data', -1); // max string length; default: 512\n\t\t$old_var_display_max_depth = @ini_set('xdebug.var_display_max_depth', -1); // default: 3\n\n\t\techo \"\\n<div style=\\\"padding:1ex;border:1px solid #00f;\\\">\\n\";\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\txdebug_var_dump($lvar);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put HR between arguments\n\t\t\t\techo \"<hr />\\n\";\n\t\t\t}\n\t\t}\n\t\techo '</div>';\n\n\t\t// restore xdebug settings:\n\t\t@ini_set('xdebug.var_display_max_children', $old_var_display_max_children);\n\t\t@ini_set('xdebug.var_display_max_data', $old_var_display_max_data);\n\t\t@ini_set('xdebug.var_display_max_depth', $old_var_display_max_depth);\n\t}\n\telse\n\t{\n\t\t$orig_html_errors = @ini_set('html_errors', 0); // e.g. xdebug would use fancy html, if this is on; we catch (and use) xdebug explicitly above, but just in case\n\n\t\techo \"\\n<pre style=\\\"padding:1ex;border:1px solid #00f;overflow:auto\\\">\\n\";\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\tob_start();\n\t\t\tvar_dump($lvar); // includes \"\\n\"; do not use var_export() because it does not detect recursion by design\n\t\t\t$buffer = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\techo htmlspecialchars($buffer);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put HR between arguments\n\t\t\t\techo \"<hr />\\n\";\n\t\t\t}\n\t\t}\n\t\techo \"</pre>\\n\";\n\t\t@ini_set('html_errors', $orig_html_errors);\n\t}\n\tevo_flush();\n\treturn true;\n}\n\n\n/**\n * Get a function trace from {@link debug_backtrace()} as html table.\n *\n * Adopted from {@link http://us2.php.net/manual/de/function.debug-backtrace.php#47644}.\n *\n * @todo dh> Add support for $is_cli = true (e.g. in case of MySQL error)\n *\n * @param integer|NULL Get the last x entries from the stack (after $ignore_from is applied). Anything non-numeric means \"all\".\n * @param array After a key/value pair matches a stack entry, this and the rest is ignored.\n *              For example, array('class' => 'DB') would exclude everything after the stack\n *              \"enters\" class DB and everything that got called afterwards.\n *              You can also give an array of arrays which means that every condition in one of the given array must match.\n * @param integer Number of stack entries to include, after $ignore_from matches.\n * @return string HTML table\n */\nfunction debug_get_backtrace( $limit_to_last = NULL, $ignore_from = array( 'function' => 'debug_get_backtrace' ), $offset_ignore_from = 0 )\n{\n\tif( ! function_exists( 'debug_backtrace' ) ) // PHP 4.3.0\n\t{\n\t\treturn 'Function debug_backtrace() is not available!';\n\t}\n\n\t$r = '';\n\n\t$backtrace = debug_backtrace();\n\t$count_ignored = 0; // remember how many have been ignored\n\t$limited = false;   // remember if we have limited to $limit_to_last\n\n\tif( $ignore_from )\n\t{\t// we want to ignore from a certain point\n\t\t$trace_length = 0;\n\t\t$break_because_of_offset = false;\n\n\t\tfor( $i = count($backtrace); $i > 0; $i-- )\n\t\t{\t// Search the backtrace from behind (first call).\n\t\t\t$l_stack = & $backtrace[$i-1];\n\n\t\t\tif( $break_because_of_offset && $offset_ignore_from < 1 )\n\t\t\t{ // we've respected the offset, but need to break now\n\t\t\t\tbreak; // ignore from here\n\t\t\t}\n\n\t\t\tforeach( $ignore_from as $l_ignore_key => $l_ignore_value )\n\t\t\t{\t// Check if we want to ignore from here\n\t\t\t\tif( is_array($l_ignore_value) )\n\t\t\t\t{\t// It's an array - all must match\n\t\t\t\t\tforeach( $l_ignore_value as $l_ignore_mult_key => $l_ignore_mult_val )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( !isset($l_stack[$l_ignore_mult_key]) /* not set with this stack entry */\n\t\t\t\t\t\t\t|| strcasecmp($l_stack[$l_ignore_mult_key], $l_ignore_mult_val) /* not this value (case-insensitive) */ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue 2; // next ignore setting, because not all match.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif( $offset_ignore_from-- > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$break_because_of_offset = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak 2; // ignore from here\n\t\t\t\t}\n\t\t\t\telseif( isset($l_stack[$l_ignore_key])\n\t\t\t\t\t&& !strcasecmp($l_stack[$l_ignore_key], $l_ignore_value) /* is equal case-insensitive */ )\n\t\t\t\t{\n\t\t\t\t\tif( $offset_ignore_from-- > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$break_because_of_offset = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak 2; // ignore from here\n\t\t\t\t}\n\t\t\t}\n\t\t\t$trace_length++;\n\t\t}\n\n\t\t$count_ignored = count($backtrace) - $trace_length;\n\n\t\t$backtrace = array_slice( $backtrace, 0-$trace_length ); // cut off ignored ones\n\t}\n\n\t$count_backtrace = count($backtrace);\n\tif( is_numeric($limit_to_last) && $limit_to_last < $count_backtrace )\n\t{\t// we want to limit to a maximum number\n\t\t$limited = true;\n\t\t$backtrace = array_slice( $backtrace, 0, $limit_to_last );\n\t\t$count_backtrace = $limit_to_last;\n\t}\n\n\t$r .= '<div style=\"padding:1ex; margin-bottom:1ex; text-align:left; color:#000; background-color:#ddf;\">\n\t\t\t\t\t<h3>Backtrace:</h3>'.\"\\n\";\n\tif( $count_backtrace )\n\t{\n\t\t$r .= '<ol style=\"font-family:monospace;\">';\n\n\t\t$i = 0;\n\t\tforeach( $backtrace as $l_trace )\n\t\t{\n\t\t\tif( ++$i == $count_backtrace )\n\t\t\t{\n\t\t\t\t$r .= '<li style=\"padding:0.5ex 0;\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$r .= '<li style=\"padding:0.5ex 0; border-bottom:1px solid #77d;\">';\n\t\t\t}\n\t\t\t$args = array();\n\t\t\tif( isset($l_trace['args']) && is_array( $l_trace['args'] ) )\n\t\t\t{\t// Prepare args:\n\t\t\t\tforeach( $l_trace['args'] as $l_arg )\n\t\t\t\t{\n\t\t\t\t\t$l_arg_type = gettype($l_arg);\n\t\t\t\t\tswitch( $l_arg_type )\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'double':\n\t\t\t\t\t\t\t$args[] = $l_arg;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\t$args[] = '\"'.strmaxlen(str_replace(\"\\n\", '\\n', $l_arg), 255, NULL, 'htmlspecialchars').'\"';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'array':\n\t\t\t\t\t\t\t$args[] = 'Array('.count($l_arg).')';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\t$args[] = 'Object('.get_class($l_arg).')';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'resource':\n\t\t\t\t\t\t\t$args[] = htmlspecialchars((string)$l_arg);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\t$args[] = $l_arg ? 'true' : 'false';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$args[] = $l_arg_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$call = \"<strong>\\n\";\n\t\t\tif( isset($l_trace['class']) )\n\t\t\t{\n\t\t\t\t$call .= htmlspecialchars($l_trace['class']);\n\t\t\t}\n\t\t\tif( isset($l_trace['type']) )\n\t\t\t{\n\t\t\t\t$call .= htmlspecialchars($l_trace['type']);\n\t\t\t}\n\t\t\t$call .= htmlspecialchars($l_trace['function']).\"( </strong>\\n\";\n\t\t\tif( $args )\n\t\t\t{\n\t\t\t\t$call .= ' '.implode( ', ', $args ).' ';\n\t\t\t}\n\t\t\t$call .='<strong>)</strong>';\n\n\t\t\t$r .= $call.\"<br />\\n\";\n\n\t\t\t$r .= '<strong>';\n\t\t\tif( isset($l_trace['file']) )\n\t\t\t{\n\t\t\t\t$r .= \"File: </strong> \".$l_trace['file'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$r .= '[runtime created function]</strong>';\n\t\t\t}\n\t\t\tif( isset($l_trace['line']) )\n\t\t\t{\n\t\t\t\t$r .= ' on line '.$l_trace['line'];\n\t\t\t}\n\n\t\t\t$r .= \"</li>\\n\";\n\t\t}\n\t\t$r .= '</ol>';\n\t}\n\telse\n\t{\n\t\t$r .= '<p>No backtrace available.</p>';\n\t}\n\n\t// Extra notes, might be to much, but explains why we stopped at some point. Feel free to comment it out or remove it.\n\t$notes = array();\n\tif( $count_ignored )\n\t{\n\t\t$notes[] = 'Ignored last: '.$count_ignored;\n\t}\n\tif( $limited )\n\t{\n\t\t$notes[] = 'Limited to'.( $count_ignored ? ' remaining' : '' ).': '.$limit_to_last;\n\t}\n\tif( $notes )\n\t{\n\t\t$r .= '<p class=\"small\">'.implode( ' - ', $notes ).'</p>';\n\t}\n\n\t$r .= \"</div>\\n\";\n\n\treturn $r;\n}\n\n\n/**\n * Outputs Unexpected Error message. When in debug mode it also prints a backtrace.\n *\n * This should be used instead of die() everywhere.\n * This should NOT be used instead of exit() anywhere.\n * Dying means the application has encontered an unexpected situation,\n * i-e: something that should never occur during normal operation.\n * Examples: database broken, user changed URL by hand...\n *\n * @param string Message to output\n * @param array Additional params\n *        - \"status\" (Default: '500 Internal Server Error')\n *        - \"debug_info\" - Use this info instead of $additional_info when debug is ON\n */\nfunction debug_die( $additional_info = '', $params = array() )\n{\n\tglobal $debug, $baseurl;\n\tglobal $log_app_errors, $app_name, $is_cli, $display_errors_on_production, $is_api_request;\n\n\t$params = array_merge( array(\n\t\t'status'     => '500 Internal Server Error',\n\t\t'debug_info' => '',\n\t\t), $params );\n\n\tif( $debug && ! empty( $params['debug_info'] ) )\n\t{ // Display 'debug_info' when debug is ON\n\t\t$additional_info = $params['debug_info'];\n\t}\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $is_api_request )\n\t{\t// REST API or XMLRPC request:\n\n\t\t// Set JSON content type:\n\t\theaders_content_mightcache( 'application/json', 0, '#', false ); // Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response( $params['status'] );\n\n\t\techo json_encode( array(\n\t\t\t\t'error_status' => $params['status'],\n\t\t\t\t'error_info'   => $additional_info,\n\t\t\t) );\n\n\t\tdie(1); // Error code 1. Note: This will still call the shutdown function.\n\t}\n\telseif( $is_cli )\n\t{ // Command line interface, e.g. in cron_exec.php:\n\t\techo '== '.T_('An unexpected error has occurred!').\" ==\\n\";\n\t\techo T_('If this error persists, please report it to the administrator.').\"\\n\";\n\t\tif( $debug || $display_errors_on_production )\n\t\t{ // Display additional info only in debug mode or when it was explicitly set by display_errors_on_production setting because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\techo T_('Additional information about this error:').\"\\n\";\n\t\t\techo strip_tags( $additional_info ).\"\\n\\n\";\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Attempt to output an error header (will not work if the output buffer has already flushed once):\n\t\t// This should help preventing indexing robots from indexing the error :P\n\t\tif( ! headers_sent() )\n\t\t{\n\t\t\tload_funcs('_core/_template.funcs.php');\n\t\t\theaders_content_mightcache( 'text/html', 0, '#', false );  // Do NOT cache error messages! (Users would not see they fixed them)\n\t\t\t$status_header = $_SERVER['SERVER_PROTOCOL'].' '.$params['status'];\n\t\t\theader($status_header);\n\t\t}\n\n\t\techo '<div style=\"background-color: #fdd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\techo '<h3 style=\"color:#f00;\">'.T_('An unexpected error has occurred!').'</h3>';\n\t\techo '<p>'.T_('If this error persists, please report it to the administrator.').'</p>';\n\t\techo '<p><a href=\"'.$baseurl.'\">'.T_('Go back to home page').'</a></p>';\n\t\techo '</div>';\n\n\t\tif( ! empty( $additional_info ) )\n\t\t{\n\t\t\techo '<div style=\"background-color: #ddd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\t\tif( $debug || $display_errors_on_production )\n\t\t\t{ // Display additional info only in debug mode or when it was explicitly set by display_errors_on_production setting because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\t\techo '<h3>'.T_('Additional information about this error:').'</h3>';\n\t\t\t\techo $additional_info;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo '<p><i>Enable debugging to get additional information about this error.</i></p>' . get_manual_link('debugging','How to enable debug mode?');\n\t\t\t}\n\t\t\techo '</div>';\n\n\t\t\t// Append the error text to AJAX log if it is AJAX request\n\t\t\tglobal $Ajaxlog;\n\t\t\tif( ! empty( $Ajaxlog ) )\n\t\t\t{\n\t\t\t\t$Ajaxlog->add( $additional_info, 'error' );\n\t\t\t\t$Ajaxlog->display( NULL, NULL, true, 'all',\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t'error' => array( 'class' => 'jslog_error', 'divClass' => false ),\n\t\t\t\t\t\t\t\t\t\t'note'  => array( 'class' => 'jslog_note',  'divClass' => false ),\n\t\t\t\t\t\t\t\t\t), 'ul', 'jslog' );\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $log_app_errors > 1 || $debug )\n\t{ // Prepare backtrace\n\t\t$backtrace = debug_get_backtrace();\n\n\t\tif( $log_app_errors > 1 || $is_cli )\n\t\t{\n\t\t\t$backtrace_cli = trim(strip_tags($backtrace));\n\t\t}\n\t}\n\n\tif( $log_app_errors )\n\t{ // Log error through PHP's logging facilities:\n\t\t$log_message = $app_name.' error: ';\n\t\tif( ! empty($additional_info) )\n\t\t{\n\t\t\t$log_message .= trim( strip_tags($additional_info) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$log_message .= 'No info specified in debug_die()';\n\t\t}\n\n\t\t// Get file and line info:\n\t\t$file = 'Unknown';\n\t\t$line = 'Unknown';\n\t\tif( function_exists('debug_backtrace') /* PHP 4.3 */ )\n\t\t{ // get the file and line\n\t\t\tforeach( debug_backtrace() as $v )\n\t\t\t{\n\t\t\t\tif( isset($v['function']) && $v['function'] == 'debug_die' )\n\t\t\t\t{\n\t\t\t\t\t$file = isset($v['file']) ? $v['file'] : 'Unknown';\n\t\t\t\t\t$line = isset($v['line']) ? $v['line'] : 'Unknown';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$log_message .= ' in '.$file.' at line '.$line;\n\n\t\tif( $log_app_errors > 1 )\n\t\t{ // Append backtrace:\n\t\t\t// indent after newlines:\n\t\t\t$backtrace_cli = preg_replace( '~(\\S)(\\n)(\\S)~', '$1  $2$3', $backtrace_cli );\n\t\t\t$log_message .= \"\\nBacktrace:\\n\".$backtrace_cli;\n\t\t}\n\t\t$log_message .= \"\\nREQUEST_URI:  \".( isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '-' );\n\t\t$log_message .= \"\\nHTTP_REFERER: \".( isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '-' );\n\n\t\terror_log( str_replace(\"\\n\", ' / ', $log_message), 0 /* PHP's system logger */ );\n\t}\n\n\n\t// DEBUG OUTPUT:\n\tif( $debug )\n\t{\n\t\tif( $is_cli )\n\t\t\techo $backtrace_cli;\n\t\telse\n\t\t\techo $backtrace;\n\t}\n\n\t// EXIT:\n\tif( ! $is_cli )\n\t{ // Attempt to keep the html valid (but it doesn't really matter anyway)\n\t\techo '</body></html>';\n\t}\n\n\tdie(1);\t// Error code 1. Note: This will still call the shutdown function.\n}\n\n\n/**\n * Outputs Bad request Error message. When in debug mode it also prints a backtrace.\n *\n * This should be used when a bad user input is detected.\n *\n * @param string Message to output (HTML)\n */\nfunction bad_request_die( $additional_info = '' )\n{\n\tglobal $debug, $baseurl, $is_api_request;\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $is_api_request )\n\t{\t// REST API or XMLRPC request:\n\n\t\t// Set JSON content type:\n\t\theaders_content_mightcache( 'application/json', 0, '#', false ); // Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response( '400 Bad Request' );\n\n\t\techo json_encode( array(\n\t\t\t\t'error_status' => '400 Bad Request',\n\t\t\t\t'error_info'   => $additional_info,\n\t\t\t) );\n\n\t\tdie(2); // Error code 2. Note: this will still call the shutdown function.\n\t}\n\n\t// Attempt to output an error header (will not work if the output buffer has already flushed once):\n\t// This should help preventing indexing robots from indexing the error :P\n\tif( ! headers_sent() )\n\t{\n\t\tload_funcs('_core/_template.funcs.php');\n\t\theaders_content_mightcache( 'text/html', 0, '#', false );\t\t// Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response('400 Bad Request');\n\t}\n\n\tif( ! function_exists( 'T_' ) )\n\t{\t// Load locale funcs to initialize function \"T_\" because it is used below:\n\t\tload_funcs( 'locales/_locale.funcs.php' );\n\t}\n\n\techo '<div style=\"background-color: #fdd; padding: 1ex; margin-bottom: 1ex;\">';\n\techo '<h3 style=\"color:#f00;\">'.T_('Bad Request!').'</h3>';\n\techo '<p>'.T_('The parameters of your request are invalid.').'</p>';\n\techo '<p>'.T_('If you have obtained this error by clicking on a link INSIDE of this site, please report the bad link to the administrator.').'</p>';\n\techo '<p><a href=\"'.$baseurl.'\">'.T_('Go back to home page').'</a></p>';\n\techo '</div>';\n\n\tif( !empty( $additional_info ) )\n\t{\n\t\techo '<div style=\"background-color: #ddd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\tif( $debug )\n\t\t{\t// Display additional info only in debug mode because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\techo '<h3>'.T_('Additional information about this error:').'</h3>';\n\t\t\techo $additional_info;\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo '<p><i>Enable debugging to get additional information about this error.</i></p>' . get_manual_link('debugging','How to enable debug mode?');\n\t\t}\n\t\techo '</div>';\n\n\t\t// Append the error text to AJAX log if it is AJAX request\n\t\tglobal $Ajaxlog;\n\t\tif( ! empty( $Ajaxlog ) )\n\t\t{\n\t\t\t$Ajaxlog->add( $additional_info, 'error' );\n\t\t\t$Ajaxlog->display( NULL, NULL, true, 'all',\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'error' => array( 'class' => 'jslog_error', 'divClass' => false ),\n\t\t\t\t\t\t\t\t\t'note'  => array( 'class' => 'jslog_note',  'divClass' => false ),\n\t\t\t\t\t\t\t\t), 'ul', 'jslog' );\n\t\t}\n\t}\n\n\tif( $debug )\n\t{\n\t\techo debug_get_backtrace();\n\t}\n\n\t// Attempt to keep the html valid (but it doesn't really matter anyway)\n\techo '</body></html>';\n\n\tdie(2); // Error code 2. Note: this will still call the shutdown function.\n}\n\n\n/**\n * Outputs debug info, according to {@link $debug} or $force param. This gets called typically at the end of the page.\n *\n * @param boolean true to force output regardless of {@link $debug}\n * @param boolean true to force clean output (without HTML) regardless of {@link $is_cli}\n */\nfunction debug_info( $force = false, $force_clean = false )\n{\n\tglobal $debug, $debug_done, $debug_jslog, $debug_jslog_done, $Debuglog, $DB, $obhandler_debug, $Timer, $ReqHost, $ReqPath, $is_cli;\n\tglobal $cache_imgsize, $cache_File;\n\tglobal $Session;\n\tglobal $db_config, $tableprefix, $http_response_code, $disp, $disp_detail, $robots_index, $robots_follow, $content_type_header;\n\t/**\n\t * @var Hit\n\t */\n\tglobal $Hit;\n\n\t// Detect content-type\n\t$content_type = NULL;\n\tforeach(headers_list() as $header)\n\t{\n\t\tif( stripos($header, 'content-type:') !== false )\n\t\t{ // content type sent\n\t\t\t# \"Content-Type:text/html;charset=utf-8\" => \"text/html\"\n\t\t\t$content_type = explode( ':', $header, 2 );\n\t\t\t$content_type = explode( ';', array_pop( $content_type ) );\n\t\t\t$content_type = trim( array_shift( $content_type ) );\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// ---- Print AJAX Log\n\tif( empty( $debug_jslog_done ) && ( $debug || $debug_jslog ) && $content_type == 'text/html' )\n\t{\t// Display debug jslog once\n\t\tglobal $rsc_url, $app_version_long;\n\n\t\t$relative_to = ( is_admin_page() ? 'rsc_url' : 'blog' );\n\n\t\trequire_js( '#jqueryUI#', $relative_to, false, true );\n\t\trequire_css( '#jqueryUI_css#', $relative_to, NULL, NULL, '#', true );\n\t\trequire_js( 'debug_jslog.js', $relative_to, false, true );\n\t\trequire_js( 'jquery/jquery.cookie.min.js', $relative_to, false, true );\n\n\t\t$jslog_style_cookies = param_cookie( 'jslog_style', 'string' );\n\t\t$jslog_styles = array();\n\t\tif( !empty( $jslog_style_cookies ) )\n\t\t{\t// Get styles only from cookies\n\t\t\t$jslog_style_cookies = explode( ';', $jslog_style_cookies );\n\t\t\tforeach( $jslog_style_cookies as $jsc => $style )\n\t\t\t{\n\t\t\t\tif( strpos( $style, 'height' ) !== false /*|| ( strpos( $style, 'display' ) !== false && !$debug_jslog )*/ )\n\t\t\t\t{\t// Unset the height param from defined styles ( and the display param if jslog is disabled )\n\t\t\t\t\tunset( $jslog_style_cookies[$jsc] );\n\t\t\t\t}\n\t\t\t}\n\t\t\t$jslog_styles[] = implode( ';', $jslog_style_cookies );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( !is_logged_in() )\n\t\t\t{\t// Align top when evobar is hidden\n\t\t\t\t$jslog_styles[] = 'top:0';\n\t\t\t}\n\t\t\tif( $debug_jslog )\n\t\t\t{\t// Display the jslog\n\t\t\t\t$jslog_styles[] = 'display:block';\n\t\t\t}\n\t\t}\n\t\t$jslog_styles = count( $jslog_styles ) > 0 ? ' style=\"'.implode( ';', $jslog_styles ).'\"' : '';\n\n\t\t$close_url = url_add_param( $_SERVER['REQUEST_URI'], 'jslog' );\n\t\techo '<div id=\"debug_ajax_info\" class=\"debug\"'.$jslog_styles.'>';\n\t\techo '<div class=\"jslog_titlebar\">'.\n\t\t\t\t'AJAX Debug log'.get_manual_link('ajax_debug_log').\n\t\t\t\taction_icon( T_('Close'), 'close', $close_url, NULL, NULL, NULL, array( 'class' => 'jslog_switcher' ) ).\n\t\t\t'</div>';\n\t\techo '<div id=\"jslog_container\"></div>';\n\t\techo '<div class=\"jslog_statusbar\">'.\n\t\t\t\t'<a href=\"'.$_SERVER['REQUEST_URI'].'#\" class=\"jslog_clear\">'.T_('Clear').'</a>'.\n\t\t\t'</div>';\n\t\techo '</div>';\n\n\t\t// Make sure debug jslog output only happens once:\n\t\t$debug_jslog_done = true;\n\t}\n\t// ----\n\n\t// clean output:\n\t$clean = $is_cli || $force_clean;\n\n\tif( ! $force )\n\t{\n\t\tif( ! empty( $debug_done ) )\n\t\t{ // Already displayed!\n\t\t\treturn;\n\t\t}\n\n\t\tif( empty( $debug ) || // No debug output desired:\n\t\t    ( $debug < 2 && $content_type != 'text/html' ) ) // Do not display, if no content-type header has been sent or it's != \"text/html\" (debug > 1 skips this)\n\t\t{\n\t\t\tglobal $evo_last_handled_error;\n\t\t\tif( ! empty( $evo_last_handled_error ) )\n\t\t\t{ // If script has been stoppped by some error\n\t\t\t\t// Display a message when debug is OFF and error has occured\n\t\t\t\t$debug_off_title = 'An unexpected error has occured!';\n\t\t\t\t$debug_off_msg1 = 'We apologize for the inconvenience.';\n\t\t\t\t$debug_off_msg2 = 'This error has been automatically reported and we will work to resolve it as fast as possible.';\n\t\t\t\tif( $clean )\n\t\t\t\t{ // CLI mode\n\t\t\t\t\techo '*** '.$debug_off_title.' ***'.\"\\n\\n\"\n\t\t\t\t\t\t.$debug_off_msg1.\"\\n\"\n\t\t\t\t\t\t.$debug_off_msg2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{ // View from browser\n\t\t\t\t\techo '<div style=\"margin:1em auto;padding:10px;background:#FEFFFF;border:2px solid #F00;border-radius:6px;text-align:center;\">'\n\t\t\t\t\t\t\t.'<h2 style=\"margin:0;color:#F00;\">'.$debug_off_title.'</h2>'\n\t\t\t\t\t\t\t.'<p>'.$debug_off_msg1.'</p>'\n\t\t\t\t\t\t\t.'<p style=\"margin-bottom:0\">'.$debug_off_msg2.'</p>'\n\t\t\t\t\t\t.'</div>';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t//Make sure debug output only happens once:\n\t$debug_done = true;\n\n\t$printf_format = '| %-45s | %-5s | %-7s | %-5s |';\n\t$table_headerlen = 73;\n\t/* This calculates the number of dashes to print e. g. on the top and\n\t * bottom of the table and after the header, making the table look\n\t * better (looks like the tables of the mysql command line client).\n\t * Normally, the value won't change, so it's hardcoded above. If you\n\t * change the printf() format above, this might be useful.\n\tpreg_match_all( '#\\d+#', $printf_format, $table_headerlen );\n\t$table_headerlen = array_sum( $table_headerlen[0] ) +\n\t\t\t\t\t\t\t\t\tstrlen( preg_replace( '#[^ \\|]+#', '',\n\t\t\t\t\t\t\t\t\t\t\t\t$printf_format ) ) - 2;\n\t*/\n\n\t$ReqHostPathQuery = $ReqHost.$ReqPath.( empty( $_SERVER['QUERY_STRING'] ) ? '' : '?'.$_SERVER['QUERY_STRING'] );\n\n\techo \"\\n\\n\\n\";\n\techo ( $clean ? '*** Debug info ***'.\"\\n\\n\" : '<div class=\"debug\" id=\"debug_info\"><h2>Debug info</h2>' );\n\n\tif( !$obhandler_debug )\n\t{ // don't display changing items when we want to test obhandler\n\n\t\t// ---------------------------\n\n\t\techo '<div class=\"log_container\"><div>';\n\n\t\techo 'HTTP Response code: '.$http_response_code;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$content_type_header: '.$content_type_header;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$disp: '.$disp.' -- detail: '.$disp_detail;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$robots_index: '.$robots_index;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$robots_follow: '.$robots_follow;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '</div></div>';\n\n\t\t// ================================== DB Summary ================================\n\t\tif( isset($DB) )\n\t\t{\n\t\t\techo '<div class=\"log_container\"><div>';\n\t\t\techo $DB->num_queries.' SQL queries executed in '.$Timer->get_duration( 'SQL QUERIES' ).\" seconds\\n\";\n\t\t\tif( ! $clean )\n\t\t\t{\n\t\t\t\techo ' &nbsp; <a href=\"'.$ReqHostPathQuery.'#evo_debug_queries\">scroll down to details</a><p>';\n\t\t\t}\n\t\t\techo '</div></div>';\n\t\t}\n\n\t\t// ========================== Timer table ================================\n\t\t$time_page = $Timer->get_duration( 'total' );\n\t\t$timer_rows = array();\n\t\tforeach( $Timer->get_categories() as $l_cat )\n\t\t{\n\t\t\tif( $l_cat == 'sql_query' )\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$timer_rows[ $l_cat ] = $Timer->get_duration( $l_cat );\n\t\t}\n\t\t// Don't sort to see orginal order of creation\n\t\t// arsort( $timer_rows );\n\t\t// ksort( $timer_rows );\n\n\t\t// Remove \"total\", it will get output as the last one:\n\t\t$total_time = $timer_rows['total'];\n\t\tunset($timer_rows['total']);\n\n\t\t$percent_total = $time_page > 0 ? number_format( 100/$time_page * $total_time, 2 ) : '0';\n\n\t\tif( $clean )\n\t\t{\n\t\t\techo '== Timers =='.\"\\n\\n\";\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\";\n\t\t\tprintf( $printf_format.\"\\n\", 'Category', 'Time', '%', 'Count' );\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo '<table class=\"debug_timer\"><thead>'\n\t\t\t\t.'<tr><td colspan=\"4\" class=\"center\">Timers</td></tr>' // dh> TODO: should be TH. Workaround so that tablesorter does not pick it up. Feedback from author requested.\n\t\t\t\t.'<tr><th>Category</th><th>Time</th><th>%</th><th>Count</th></tr>'\n\t\t\t\t.'</thead>';\n\n\t\t\t// Output \"total\":\n\t\t\techo \"\\n<tfoot><tr>\"\n\t\t\t\t.'<td>total</td>'\n\t\t\t\t.'<td class=\"right red\">'.$total_time.'</td>'\n\t\t\t\t.'<td class=\"right\">'.$percent_total.'%</td>'\n\t\t\t\t.'<td class=\"right\">'.$Timer->get_count('total').'</td></tr></tfoot>';\n\n\t\t\techo '<tbody>';\n\t\t}\n\n\t\t$table_rows_collapse = array();\n\t\tforeach( $timer_rows as $l_cat => $l_time )\n\t\t{\n\t\t\t$percent_l_cat = $time_page > 0 ? number_format( 100/$time_page * $l_time, 2 ) : '0';\n\n\t\t\tif( $clean )\n\t\t\t{\n\t\t\t\t$row = sprintf( $printf_format, $l_cat, $l_time, $percent_l_cat.'%', $Timer->get_count( $l_cat ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$row = \"\\n<tr>\"\n\t\t\t\t\t.'<td>'.$l_cat.'</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$l_time.'</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$percent_l_cat.'%</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$Timer->get_count( $l_cat ).'</td></tr>';\n\t\t\t}\n\n\t\t\t// Maybe ignore this row later, but not for clean display.\n\t\t\tif( ! $clean && ( $percent_l_cat < 1  ) )\n\t\t\t{\t// Hide everything that tool less tahn 5% of the time\n\t\t\t\t$table_rows_collapse[] = $row;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo $row.\"\\n\";\n\t\t\t}\n\t\t}\n\t\t$count_collapse = count($table_rows_collapse);\n\t\t// Collapse ignored rows, allowing to expand them with Javascript:\n\t\tif( $count_collapse > 5 )\n\t\t{\n\t\t\techo '<tr><td colspan=\"4\" class=\"center\" id=\"evo-debuglog-timer-long-header\">';\n\t\t\techo '<a href=\"\" onclick=\"var e = document.getElementById(\\'evo-debuglog-timer-long\\'); e.style.display = (e.style.display == \\'none\\' ? \\'\\' : \\'none\\'); return false;\">+ '.$count_collapse.' queries &lt; 1%</a> </td></tr>';\n\t\t\techo '</tbody>';\n\t\t\techo '<tbody id=\"evo-debuglog-timer-long\" style=\"display:none;\">';\n\t\t}\n\t\techo implode( \"\\n\", $table_rows_collapse ).\"\\n\";\n\n\t\tif ( $clean )\n\t\t{ // \"total\" (done in tfoot for html above)\n\t\t\techo sprintf( $printf_format, 'total', $total_time, $percent_total.'%', $Timer->get_count('total') );\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo \"\\n</tbody></table>\";\n\n\t\t\t// add jquery.tablesorter to the \"Debug info\" table.\n\t\t\t$relative_to = ( is_admin_page() ? 'rsc_url' : 'blog' );\n\t\t\trequire_js( 'jquery/jquery.tablesorter.min.js', $relative_to, true, true );\n\t\t\techo '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t(function($){\n\t\t\t\tvar clicked_once;\n\t\t\t\tjQuery(\"table.debug_timer th\").click( function(event) {\n\t\t\t\t\tif( clicked_once ) return; else clicked_once = true;\n\t\t\t\t\tjQuery(\"#evo-debuglog-timer-long tr\").appendTo(jQuery(\"table.debug_timer tbody\")[0]);\n\t\t\t\t\tjQuery(\"#evo-debuglog-timer-long-header\").remove();\n\t\t\t\t\t// click for tablesorter:\n\t\t\t\t\tjQuery(\"table.debug_timer\").tablesorter();\n\t\t\t\t\tjQuery(event.currentTarget).click();\n\t\t\t\t});\n\t\t\t})(jQuery);\n\t\t\t</script>';\n\t\t}\n\n\n\t\t// ================================ Opcode caching ================================\n\t\techo '<div class=\"log_container\"><div>';\n\t\techo 'Opcode cache: '.get_active_opcode_cache();\n\t\techo $clean ? \"\\n\" : '<p>';\n\n\t\t// ================================ User caching ================================\n\t\techo 'User cache: '.get_active_user_cache();\n\t\techo $clean ? \"\\n\" : '<p>';\n\t\techo '</div></div>';\n\n\n\t\t// ================================ Memory Usage ================================\n\t\techo '<div class=\"log_container\"><div>';\n\n\t\tforeach( array( // note: 8MB is default for memory_limit and is reported as 8388608 bytes\n\t\t\t'memory_get_usage' => array( 'display' => 'Memory usage', 'high' => 8000000 ),\n\t\t\t'memory_get_peak_usage' /* PHP 5.2 */ => array( 'display' => 'Memory peak usage', 'high' => 8000000 ) ) as $l_func => $l_var )\n\t\t{\n\t\t\tif( function_exists( $l_func ) )\n\t\t\t{\n\t\t\t\t$_usage = $l_func();\n\n\t\t\t\tif( $_usage > $l_var['high'] )\n\t\t\t\t{\n\t\t\t\t\techo $clean ? '[!!] ' : '<span style=\"color:red; font-weight:bold\">';\n\t\t\t\t}\n\n\t\t\t\techo $l_var['display'].': '.bytesreadable( $_usage, ! $clean );\n\n\t\t\t\tif( ! $clean && $_usage > $l_var['high'] )\n\t\t\t\t{\n\t\t\t\t\techo '</span>';\n\t\t\t\t}\n\t\t\t\techo $clean ? \"\\n\" : '<br />';\n\t\t\t}\n\t\t}\n\n\t\techo 'Len of serialized $cache_imgsize: '.strlen(serialize($cache_imgsize));\n\t\techo $clean ? \"\\n\" : '<br />';\n\t\techo 'Len of serialized $cache_File: '.strlen(serialize($cache_File));\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '</div></div>';\n\t}\n\n\n\t// DEBUGLOG(s) FROM PREVIOUS SESSIONS, after REDIRECT(s) (with list of categories at top):\n\tif( isset($Session) && ($sess_Debuglogs = $Session->get('Debuglogs')) && ! empty($sess_Debuglogs) )\n\t{\n\t\t$count_sess_Debuglogs = count($sess_Debuglogs);\n\t\tif( $count_sess_Debuglogs > 1 )\n\t\t{ // Links to those Debuglogs:\n\t\t\tif ( $clean )\n\t\t\t{\t// kind of useless, but anyway...\n\t\t\t\techo \"\\n\".'There are '.$count_sess_Debuglogs.' Debuglogs from redirected pages.'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo '<p>There are '.$count_sess_Debuglogs.' Debuglogs from redirected pages: ';\n\t\t\t\tfor( $i = 1; $i <= $count_sess_Debuglogs; $i++ )\n\t\t\t\t{\n\t\t\t\t\techo '<a href=\"'.$ReqHostPathQuery.'#debug_sess_debuglog_'.$i.'\">#'.$i.'</a> ';\n\t\t\t\t}\n\t\t\t\techo '</p>';\n\t\t\t}\n\t\t}\n\n\t\tforeach( $sess_Debuglogs as $k => $sess_Debuglog )\n\t\t{\n\t\t\t$log_categories = array( 'error', 'note', 'all' ); // Categories to output (in that order)\n\n\t\t\tif( $clean )\n\t\t\t{\n\t\t\t\t$log_container_head = \"\\n\".'== Debug messages from redirected page (#'.($k+1).') =='.\"\\n\"\n\t\t\t\t\t\t\t\t\t .'See below for the Debuglog from the current request.'.\"\\n\";\n\t\t\t\techo format_to_output(\n\t\t\t\t\t$sess_Debuglog->display( array(\n\t\t\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t\t\t'all' => array( 'string' => '= %s ='.\"\\n\\n\", 'template' => false ) ),\n\t\t\t\t\t\t'', false, $log_categories, '', 'raw', false ),\n\t\t\t\t\t'raw' );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$log_container_head = '<h3 id=\"debug_sess_debuglog_'.($k+1).'\" style=\"color:#f00;\">Debug messages from redirected page (#'.($k+1).')</h3>'\n\t\t\t\t\t// link to real Debuglog:\n\t\t\t\t\t.'<p><a href=\"'.$ReqHostPathQuery.'#debug_debuglog\">See below for the Debuglog from the current request.</a></p>';\n\t\t\t\t$log_cats = array_keys($sess_Debuglog->get_messages( $log_categories )); // the real list (with all replaced and only existing ones)\n\t\t\t\t$log_head_links = array();\n\n\t\t\t\tforeach( $log_cats as $l_cat )\n\t\t\t\t{\n\t\t\t\t\t$log_head_links[] .= '<a href=\"'.$ReqHostPathQuery.'#debug_redir_'.($k+1).'_info_cat_'.str_replace( ' ', '_', $l_cat ).'\">'.$l_cat.'</a>';\n\t\t\t\t}\n\t\t\t\t$log_container_head .= implode( ' | ', $log_head_links );\n\n\t\t\t\techo '<div style=\"border:1px solid #F00;background:#aaa\">'.\n\t\t\t\t\tformat_to_output(\n\t\t\t\t\t\t$sess_Debuglog->display( array(\n\t\t\t\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t\t\t\t'all' => array( 'string' => '<h4 id=\"debug_redir_'.($k+1).'_info_cat_%s\">%s:</h4>', 'template' => false ) ),\n\t\t\t\t\t\t\t'', false, $log_categories ),\n\t\t\t\t\t\t'htmlbody' ).\n\t\t\t\t\t'</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Delete logs since they have been displayed...\n\t\t// EXCEPT if we are redirecting, because in this case we won't see these logs in a browser (only in request debug tools)\n\t\t// So in that case we want them to move over to the next page...\n\t\tif( $http_response_code < 300 || $http_response_code >= 400 )\n\t\t{\t// This is NOT a 3xx redirect, assume debuglogs have been seen & delete them:\n\t\t\t$Session->delete( 'Debuglogs' );\n\t\t}\n\t}\n\n\n\t// CURRENT DEBUGLOG (with list of categories at top):\n\t$log_categories = array( 'error', 'note', 'all' ); // Categories to output (in that order)\n\t$log_container_head = $clean ? ( \"\\n\".'== Debug messages =='.\"\\n\" ) : '<h3 id=\"debug_debuglog\">Debug messages</h3>';\n\tif( ! empty($sess_Debuglogs) )\n\t{ // link to first sess_Debuglog:\n\t\tif ( $clean )\n\t\t{\n\t\t\t$log_container_head .= 'See above for the Debuglog(s) from before the redirect.'.\"\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$log_container_head .= '<p><a href=\"'.$ReqHostPathQuery.'#debug_sess_debuglog_1\">See above for the Debuglog(s) from before the redirect.</a></p>';\n\t\t}\n\t}\n\n\tif ( ! $clean )\n\t{\n\t\t$log_cats = array_keys($Debuglog->get_messages( $log_categories )); // the real list (with all replaced and only existing ones)\n\t\t$log_head_links = array();\n\t\tforeach( $log_cats as $l_cat )\n\t\t{\n\t\t\t$log_head_links[] .= '<a href=\"'.$ReqHostPathQuery.'#debug_info_cat_'.str_replace( ' ', '_', $l_cat ).'\">'.$l_cat.'</a>';\n\t\t}\n\t\t$log_container_head .= implode( ' | ', $log_head_links );\n\n\t\techo format_to_output(\n\t\t\t$Debuglog->display( array(\n\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t'all' => array( 'string' => '<h4 id=\"debug_info_cat_%s\">%s:</h4>', 'template' => false ) ),\n\t\t\t\t'', false, $log_categories ),\n\t\t\t'htmlbody' );\n\n\t\techo '<h3 id=\"evo_debug_queries\">DB</h3>';\n\t}\n\telse\n\t{\n\t\techo format_to_output(\n\t\t\t$Debuglog->display( array(\n\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t'all' => array( 'string' => '= %s ='.\"\\n\\n\", 'template' => false ) ),\n\t\t\t\t'', false, $log_categories, '', 'raw', false ),\n\t\t\t'raw' );\n\n\t\techo \"\\n\".'== DB =='.\"\\n\\n\";\n\t}\n\n\tif($db_config)\n\t{\n\t\tif ( ! $clean )\n\t\t{\n\t\t\techo '<pre>';\n\t\t}\n\n\t\techo 'Config DB Username: '.$db_config['user'].\"\\n\".\n\t\t\t'Config DB Database: '.$db_config['name'].\"\\n\".\n\t\t\t 'Config DB Host: '.(isset($db_config['host']) ? $db_config['host'] : 'unset (localhost)').\"\\n\".\n\t\t\t 'Config DB tables prefix: '.$tableprefix.\"\\n\".\n\t\t\t 'Config DB connection charset: '.$db_config['connection_charset'].\"\\n\";\n\n\t\techo $clean ? \"\\n\" : '</pre>';\n\t}\n\n\tif( !isset($DB) )\n\t{\n\t\techo 'No DB object.'.( $clean ? \"\\n\" : '' );\n\t}\n\telse\n\t{\n\t\techo '<pre>Current DB charset: '.$DB->connection_charset.\"</pre>\\n\";\n\n\t\t$DB->dump_queries( ! $clean );\n\t}\n\n\tif ( ! $clean )\n\t{\n\t\techo '</div>';\n\t}\n}\n\n\n/**\n * Exit when request is blocked\n *\n * @param string Block type: 'IP', 'Domain', 'Country'\n * @param string Log message\n * @param string Syslog origin type: 'core', 'plugin'\n * @param integer Syslog origin ID\n */\nfunction exit_blocked_request( $block_type, $log_message, $syslog_origin_type = 'core', $syslog_origin_ID = NULL )\n{\n\tglobal $debug;\n\n\t// Write system log for the request:\n\tsyslog_insert( $log_message, 'warning', NULL, NULL, $syslog_origin_type, $syslog_origin_ID );\n\n\t// Print out this text to inform an user:\n\techo 'Blocked.';\n\n\tif( $debug )\n\t{ // Display additional info on debug mode:\n\t\techo ' ('.$block_type.')';\n\t}\n\n\t// EXIT:\n\texit( 0 );\n}\n\n\n/**\n * Check if the current request exceed the post max size limit.\n * If too much data was sent add an error message and call header redirect.\n */\nfunction check_post_max_size_exceeded()\n{\n\tglobal $Messages;\n\n\tif( ( $_SERVER['REQUEST_METHOD'] == 'POST' ) && empty( $_POST ) && empty( $_FILES ) && ( $_SERVER['CONTENT_LENGTH'] > 0 ) )\n\t{\n\t\t// Check post max size ini setting\n\t\t$post_max_size = ini_get( 'post_max_size' );\n\n\t\t// Convert post_max_size value to bytes\n\t\tswitch ( substr( $post_max_size, -1 ) )\n\t\t{\n\t\t\tcase 'G':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t\tcase 'M':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t\tcase 'K':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t}\n\n\t\t// Add error message and redirect back to the referer url\n\t\t$Messages->add( sprintf( T_('You have sent too much data (too many large files?) for the server to process (%s sent / %s maximum). Please try again by sending less data/files at a time.'), bytesreadable( $_SERVER['CONTENT_LENGTH'] ), bytesreadable( $post_max_size ) ) );\n\t\theader_redirect( $_SERVER['HTTP_REFERER'] );\n\t\texit(0); // Already exited here\n\t}\n}\n\n\n/**\n * Prevent email header injection.\n */\nfunction mail_sanitize_header_string( $header_str, $close_brace = false )\n{\n\t// Prevent injection! (remove everything after (and including) \\n or \\r)\n\t$header_str = preg_replace( '~(\\r|\\n).*$~s', '', trim($header_str) );\n\n\tif( $close_brace && strpos( $header_str, '<' ) !== false && strpos( $header_str, '>' ) === false )\n\t{ // We have probably stripped the '>' at the end!\n\t\t$header_str .= '>';\n\t}\n\n\treturn $header_str;\n}\n\n/**\n * Encode to RFC 1342 \"Representation of Non-ASCII Text in Internet Message Headers\"\n *\n * @param string\n * @param string 'Q' for Quoted printable, 'B' for base64\n */\nfunction mail_encode_header_string( $header_str, $mode = 'Q' )\n{\n\tglobal $evo_charset;\n\n\t/* mbstring way  (did not work for Alex RU)\n\tif( function_exists('mb_encode_mimeheader') )\n\t{ // encode subject\n\t\t$orig = mb_internal_encoding();\n\t\tmb_internal_encoding('utf-8');\n\t\t$r = mb_encode_mimeheader( $header_str, 'utf-8', $mode );\n\t\tmb_internal_encoding($orig);\n\t\treturn $r;\n\t}\n\t*/\n\n\tif( preg_match( '~[^a-z0-9!*+\\-/ ]~i', $header_str ) )\n\t{ // If the string actually needs some encoding\n\t\tif( $mode == 'Q' )\n\t\t{ // Quoted printable is best for reading with old/text terminal mail reading/debugging stuff:\n\t\t\t$header_str = preg_replace_callback( '#[^a-z0-9!*+\\-/ ]#i', 'mail_encode_header_string_callback', $header_str );\n\t\t\t$header_str = str_replace( ' ', '_', $header_str );\n\t\t\t$header_str = '=?'.$evo_charset.'?Q?'.$header_str.'?=';\n\t\t}\n\t\telse\n\t\t{ // Base 64 -- Alex RU way:\n\t\t\t$header_str = '=?'.$evo_charset.'?B?'.base64_encode( $header_str ).'?=';\n\t\t}\n\t}\n\n\treturn $header_str;\n}\n\n\n/**\n * Callback function for mail header encoding\n *\n * @param array Matches\n * @return string\n */\nfunction mail_encode_header_string_callback( $matches )\n{\n\treturn sprintf( '=%02x', ord( stripslashes( $matches[0] ) ) );\n}\n\n\n/**\n * Get setting's value from General or User's settings\n *\n * @param integer User ID\n * @param string Setting ( email | name )\n * @return string Setting's value\n */\nfunction user_get_notification_sender( $user_ID, $setting )\n{\n\tglobal $Settings;\n\n\t$setting_name = 'notification_sender_'.$setting;\n\n\tif( empty( $user_ID ) )\n\t{\t// Get value from general settings\n\t\treturn $Settings->get( $setting_name );\n\t}\n\n\t$UserCache = & get_UserCache();\n\tif( $User = & $UserCache->get_by_ID( $user_ID ) )\n\t{\n\t\tif( $User->check_status( 'is_validated' ) )\n\t\t{\t// User is Activated or Autoactivated\n\t\t\tglobal $UserSettings;\n\t\t\tif( $UserSettings->get( $setting_name, $user_ID ) == '' )\n\t\t\t{\t// The user's setting is not defined yet\n\t\t\t\t// Update the user's setting from general setting\n\t\t\t\t$UserSettings->set( $setting_name, $Settings->get( $setting_name ), $user_ID );\n\t\t\t\t$UserSettings->dbupdate();\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// User has a defined setting; Use this\n\t\t\t\treturn $UserSettings->get( $setting_name, $user_ID );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $Settings->get( $setting_name );\n}\n\n\n/**\n * Sends an email, wrapping PHP's mail() function.\n * ALL emails sent by b2evolution must be sent through this function (for consistency and for logging)\n *\n * {@link $current_locale} will be used to set the charset.\n *\n * Note: we use a single \\n as line ending, though it does not comply to {@link http://www.faqs.org/rfcs/rfc2822 RFC2822}, but seems to be safer,\n * because some mail transfer agents replace \\n by \\r\\n automatically.\n *\n * @todo Unit testing with \"nice addresses\" This gets broken over and over again.\n *\n * @param string Recipient email address.\n * @param string Recipient name.\n * @param string Subject of the mail\n * @param string|array The message text OR Array: 'charset', 'full', 'html', 'text'\n * @param string From address, being added to headers (we'll prevent injections); see {@link http://securephp.damonkohler.com/index.php/Email_Injection}.\n *               Defaults to {@link GeneralSettings::get('notification_sender_email') } if NULL.\n * @param string From name.\n * @param array Additional headers ( headername => value ). Take care of injection!\n * @param integer User ID\n * @return boolean True if mail could be sent (not necessarily delivered!), false if not - (return value of {@link mail()})\n */\nfunction send_mail( $to, $to_name, $subject, $message, $from = NULL, $from_name = NULL, $headers = array(), $user_ID = NULL )\n{\n\tglobal $servertimenow, $email_send_simulate_only;\n\n\t// Stop a request from the blocked IP addresses or Domains\n\tantispam_block_request();\n\n\tglobal $debug, $app_name, $app_version, $current_locale, $current_charset, $evo_charset, $locales, $Debuglog, $Settings, $demo_mode;\n\n\t$message_data = $message;\n\tif( is_array( $message_data ) && isset( $message_data['full'] ) )\n\t{ // If content is multipart\n\t\t$message = $message_data['full'];\n\t}\n\telseif( is_string( $message_data ) )\n\t{ // Convert $message_data to array\n\t\t$message_data = array( 'full' => $message );\n\t}\n\n\t// Replace secret content in the mail logs message body\n\t$message = preg_replace( '~\\$secret_content_start\\$.*\\$secret_content_end\\$~', '***secret-content-removed***', $message );\n\t// Remove secret content marks from the message\n\t$message_data = str_replace( array( '$secret_content_start$', '$secret_content_end$' ), '', $message_data );\n\n\t// Memorize email address\n\t$to_email_address = $to;\n\n\t$NL = \"\\r\\n\";\n\n\tif( $demo_mode )\n\t{ // Debug mode restriction: Sending email in demo mode is not allowed\n\t\treturn false;\n\t}\n\n\tif( !is_array( $headers ) )\n\t{ // Make sure $headers is an array\n\t\t$headers = array( $headers );\n\t}\n\n\tif( empty( $from ) )\n\t{\n\t\t$from = user_get_notification_sender( $user_ID, 'email' );\n\t}\n\n\tif( empty( $from_name ) )\n\t{\n\t\t$from_name = user_get_notification_sender( $user_ID, 'name' );\n\t}\n\n\t// Pass these data for SMTP mailer\n\t$message_data['to_email'] = $to;\n\t$message_data['to_name'] = empty( $to_name ) ? NULL : $to_name;\n\t$message_data['from_email'] = $from;\n\t$message_data['from_name'] = empty( $from_name ) ? NULL : $from_name;\n\n\t$return_path = $Settings->get( 'notification_return_path' );\n\n\t// Add real name into $from...\n\tif( ! is_windows() )\n\t{\t// fplanque: Windows XP, Apache 1.3, PHP 4.4, MS SMTP : will not accept \"nice\" addresses.\n\t\tif( !empty( $to_name ) )\n\t\t{\n\t\t\t$to = '\"'.mail_encode_header_string($to_name).'\" <'.$to.'>';\n\t\t}\n\t\tif( !empty( $from_name ) )\n\t\t{\n\t\t\t$from = '\"'.mail_encode_header_string($from_name).'\" <'.$from.'>';\n\t\t}\n\t}\n\n\t$from = mail_sanitize_header_string( $from, true );\n\t// From has to go into headers\n\t$headers['From'] = $from;\n\tif( !empty( $return_path ) )\n\t{\t// Set a return path\n\t\t$headers['Return-Path'] = $return_path;\n\t}\n\n\t// echo 'sending email to: ['.htmlspecialchars($to).'] from ['.htmlspecialchars($from).']';\n\n\t$clear_subject = $subject;\n\t$subject = mail_encode_header_string($subject);\n\n\t$message = str_replace( array( \"\\r\\n\", \"\\r\" ), $NL, $message );\n\n\t// Convert encoding of message (from internal encoding to the one of the message):\n\t// fp> why do we actually convert to $current_charset?\n\t// dh> I do not remember. Appears to make sense sending it unconverted in $evo_charset.\n\t// asimo> converting the message creates wrong output, no need for conversion, however this needs further investigation\n\t// $message = convert_charset( $message, $current_charset, $evo_charset );\n\n\tif( !isset( $headers['Content-Type'] ) )\n\t{\t// Specify charset and content-type of email\n\t\t$headers['Content-Type'] = 'text/plain; charset='.$current_charset;\n\t}\n\t$headers['MIME-Version'] = '1.0';\n\n\t$headers['Date'] = gmdate( 'r', $servertimenow );\n\n\t// ADDITIONAL HEADERS:\n\t$headers['X-Mailer'] = $app_name.' '.$app_version.' - PHP/'.phpversion();\n\t$ip_list = implode( ',', get_ip_list() );\n\tif( !empty( $ip_list ) )\n\t{ // Add X-Remote_Addr param only if its value is not empty\n\t\t$headers['X-Remote-Addr'] = $ip_list;\n\t}\n\n\t// COMPACT HEADERS:\n\t$headerstring = get_mail_headers( $headers, $NL );\n\n\t// Set an additional parameter for the return path:\n\tswitch( $Settings->get( 'sendmail_params' ) )\n\t{\n\t\tcase 'return':\n\t\t\t$sendmail_params = '-r $return-address$';\n\t\t\tbreak;\n\t\tcase 'from':\n\t\t\t$sendmail_params = '-f $return-address$';\n\t\t\tbreak;\n\t\tcase 'custom':\n\t\t\t$sendmail_params = $Settings->get( 'sendmail_params_custom' );\n\t\t\tbreak;\n\t}\n\tif( ! empty( $sendmail_params ) )\n\t{\n\t\t$additional_parameters = str_replace(\n\t\t\tarray( '$from-address$', '$return-address$' ),\n\t\t\tarray( $message_data['from_email'], ( empty( $return_path ) ? $message_data['from_email'] : $return_path ) ),\n\t\t\t$sendmail_params );\n\t}\n\telse\n\t{\n\t\t$additional_parameters = '';\n\t}\n\n\tif( mail_is_blocked( $to_email_address ) )\n\t{ // Check if the email address is blocked\n\t\t$Debuglog->add( 'Sending mail to &laquo;'.htmlspecialchars( $to_email_address ).'&raquo; FAILED, because this email marked with spam or permanent errors.', 'error' );\n\n\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'blocked' );\n\n\t\treturn false;\n\t}\n\n\tif( $email_send_simulate_only )\n\t{\t// The email sending is turned on simulation mode, Don't send a real message:\n\t\t$send_mail_result = true;\n\t}\n\telse\n\t{\t// Send email message on real mode:\n\t\t$send_mail_result = evo_mail( $to, $subject, $message_data, $headers, $additional_parameters );\n\t}\n\n\tif( ! $send_mail_result )\n\t{\t// The message has not been sent successfully\n\t\tif( $debug > 1 )\n\t\t{ // We agree to die for debugging...\n\t\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'error' );\n\n\t\t\tdebug_die( 'Sending mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo; FAILED.' );\n\t\t}\n\t\telse\n\t\t{ // Soft debugging only....\n\t\t\t$Debuglog->add( 'Sending mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo; FAILED.', 'error' );\n\n\t\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'error' );\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$Debuglog->add( 'Sent mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo;.' );\n\n\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, ( $email_send_simulate_only ? 'simulated' : 'ok' ) );\n\n\treturn true;\n}\n\n\n/**\n * Sends an email to User\n *\n * @param integer Recipient ID.\n * @param string Subject of the mail\n * @param string Email template name\n * @param array Email template params\n * @param boolean Force to send this email even if the user is not activated. By default not activated user won't get emails.\n *                Pasword reset, and account activation emails must be always forced.\n * @param array Additional headers ( headername => value ). Take care of injection!\n * @param string Use this param if you want use different email address instead of $User->email\n * @return boolean True if mail could be sent (not necessarily delivered!), false if not - (return value of {@link mail()})\n */\nfunction send_mail_to_User( $user_ID, $subject, $template_name, $template_params = array(), $force_on_non_activated = false, $headers = array(), $force_email_address = '' )\n{\n\tglobal $UserSettings, $Settings, $current_charset;\n\n\t$UserCache = & get_UserCache();\n\tif( $User = $UserCache->get_by_ID( $user_ID ) )\n\t{\n\t\tif( !$User->check_status( 'can_receive_any_message' ) )\n\t\t{ // user status doesn't allow to receive nor emails nor private messages\n\t\t\treturn false;\n\t\t}\n\n\t\tif( !( $User->check_status( 'is_validated' ) || $force_on_non_activated ) )\n\t\t{ // user is not activated and non activated users should not receive emails, unless force_on_non_activated is turned on\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if a new email to User with the corrensponding email type is allowed\n\t\tswitch( $template_name )\n\t\t{\n\t\t\tcase 'account_activate':\n\t\t\t\tif( $Settings->get( 'validation_process' ) == 'easy' && !$template_params['is_reminder'] )\n\t\t\t\t{ // this is not a notification email\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'private_message_new':\n\t\t\tcase 'private_messages_unread_reminder':\n\t\t\tcase 'post_new':\n\t\t\tcase 'comment_new':\n\t\t\tcase 'account_activated':\n\t\t\tcase 'account_closed':\n\t\t\tcase 'account_reported':\n\t\t\tcase 'account_changed':\n\t\t\t\t// this is a notificaiton email\n\t\t\t\t$email_limit_setting = 'notification_email_limit';\n\t\t\t\t$email_counter_setting = 'last_notification_email';\n\t\t\t\tif( !check_allow_new_email( $email_limit_setting, $email_counter_setting, $User->ID ) )\n\t\t\t\t{ // more notification email is not allowed today\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'newsletter':\n\t\t\t\t// this is a newsletter email\n\t\t\t\t$email_limit_setting = 'newsletter_limit';\n\t\t\t\t$email_counter_setting = 'last_newsletter';\n\t\t\t\tif( !check_allow_new_email( $email_limit_setting, $email_counter_setting, $User->ID ) )\n\t\t\t\t{ // more newsletter email is not allowed today\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'newsletter_test':\n\t\t\t\t// this is a newsletter email, used to send test email by current admin\n\t\t\t\t$template_name = 'newsletter';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update notification sender's info from General settings\n\t\t$User->update_sender();\n\n\t\tswitch( $UserSettings->get( 'email_format', $User->ID ) )\n\t\t{\t// Set Content-Type from user's setting \"Email format\"\n\t\t\tcase 'auto':\n\t\t\t\t$template_params['boundary'] = 'b2evo-'.md5( rand() );\n\t\t\t\t$headers['Content-Type'] = 'multipart/mixed; boundary=\"'.$template_params['boundary'].'\"';\n\t\t\t\tbreak;\n\t\t\tcase 'html':\n\t\t\t\t$headers['Content-Type'] = 'text/html; charset='.$current_charset;\n\t\t\t\tbreak;\n\t\t\tcase 'text':\n\t\t\t\t$headers['Content-Type'] = 'text/plain; charset='.$current_charset;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( ! isset( $template_params['recipient_User'] ) )\n\t\t{ // Set recipient User, it should be defined for each template because of email footer\n\t\t\t$template_params['recipient_User'] = $User;\n\t\t}\n\n\t\t// Get a message text from template file\n\t\t$message = mail_template( $template_name, $UserSettings->get( 'email_format', $User->ID ), $template_params, $User );\n\n\t\t// Autoinsert user's data\n\t\t$subject = mail_autoinsert_user_data( $subject, $User );\n\t\t$message = mail_autoinsert_user_data( $message, $User );\n\n\t\t$to_email = !empty( $force_email_address ) ? $force_email_address : $User->email;\n\n\t\tif( send_mail( $to_email, NULL, $subject, $message, NULL, NULL, $headers, $user_ID ) )\n\t\t{ // email was sent, update last email settings;\n\t\t\tif( isset( $email_limit_setting, $email_counter_setting ) )\n\t\t\t{ // User Settings(email counters) need to be updated\n\t\t\t\tupdate_user_email_counter( $email_limit_setting, $email_counter_setting, $user_ID );\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// No user or email could not be sent\n\treturn false;\n}\n\n\n/**\n * Autoinsert user's data into subject or message of the email\n *\n * @param string Text\n * @param object User\n * @return string Text\n*/\nfunction mail_autoinsert_user_data( $text, $User = NULL )\n{\n\tif( !$User )\n\t{\t// No user\n\t\treturn $text;\n\t}\n\n\t$rpls_from = array( '$login$' , '$email$', '$user_ID$', '$unsubscribe_key$' );\n\t$rpls_to = array( $User->login, $User->email, $User->ID, '$secret_content_start$'.md5( $User->ID.$User->unsubscribe_key ).'$secret_content_end$' );\n\n\treturn str_replace( $rpls_from, $rpls_to, $text );\n}\n\n\n/**\n * Get a mail message text by template name\n *\n * @param string Template name\n * @param string Email format ( auto | html | text )\n * @param array Params\n * @param object User\n * @return string|array Mail message OR Array of the email contents when message is multipart content\n */\nfunction mail_template( $template_name, $format = 'auto', $params = array(), $User = NULL )\n{\n\tglobal $current_charset;\n\n\tif( !empty( $params['locale'] ) )\n\t{ // Switch to locale for current email template\n\t\tlocale_temp_switch( $params['locale'] );\n\t}\n\n\t// Set extension of template\n\t$template_exts = array();\n\tswitch( $format )\n\t{\n\t\tcase 'auto':\n\t\t\t// $template_exts['non-mime'] = '.txt.php'; // The area that is ignored by MIME-compliant clients\n\t\t\t$template_exts['text'] = '.txt.php';\n\t\t\t$template_exts['html'] = '.html.php';\n\t\t\t$boundary = $params['boundary'];\n\t\t\t$boundary_alt = 'b2evo-alt-'.md5( rand() );\n\t\t\t$template_headers = array(\n\t\t\t\t\t'text' => 'Content-Type: text/plain; charset='.$current_charset,\n\t\t\t\t\t'html' => 'Content-Type: text/html; charset='.$current_charset,\n\t\t\t\t);\n\t\t\t// Store all contents in this array for multipart message\n\t\t\t$template_contents = array(\n\t\t\t\t\t'charset' => $current_charset, // Charset for email message\n\t\t\t\t\t'full' => '', // Full content with html and plain\n\t\t\t\t\t'html' => '', // HTML\n\t\t\t\t\t'text' => '', // Plain text\n\t\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'html':\n\t\t\t$template_exts['html'] = '.html.php';\n\t\t\tbreak;\n\n\t\tcase 'text':\n\t\t\t$template_exts['text'] = '.txt.php';\n\t\t\tbreak;\n\t}\n\n\t$template_message = '';\n\n\tif( isset( $boundary, $boundary_alt ) )\n\t{ // Start new boundary content\n\t\t$template_message .= \"\\n\".'--'.$boundary.\"\\n\";\n\t\t$template_message .= 'Content-Type: multipart/alternative; boundary=\"'.$boundary_alt.'\"'.\"\\n\\n\";\n\t}\n\n\tforeach( $template_exts as $format => $ext )\n\t{\n\t\t$formated_message = '';\n\n\t\tif( isset( $boundary, $boundary_alt ) && $format != 'non-mime' )\n\t\t{ // Start new boundary alt content\n\t\t\t$template_message .= \"\\n\".'--'.$boundary_alt.\"\\n\";\n\t\t}\n\n\t\tif( isset( $template_headers[ $format ] ) )\n\t\t{ // Header data for each content\n\t\t\t$template_message .= $template_headers[ $format ].\"\\n\\n\";\n\t\t}\n\n\t\t// Get mail template\n\t\tob_start();\n\t\temailskin_include( $template_name.$ext, $params );\n\t\t$formated_message .= ob_get_clean();\n\n\t\tif( ! empty( $User ) )\n\t\t{ // Replace $login$ with gender colored link + icon in HTML format,\n\t\t  //   and with simple login text in PLAIN TEXT format\n\t\t\tif( $format == 'html' )\n\t\t\t{\n\t\t\t\t$user_login = $User->get_colored_login( array(\n\t\t\t\t\t\t'mask'      => '$avatar$ $login$',\n\t\t\t\t\t\t'use_style' => true,\n\t\t\t\t\t\t'protocol'  => 'http:',\n\t\t\t\t\t) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$user_login = $User->login;\n\t\t\t}\n\t\t\t$formated_message = str_replace( '$login$', $user_login, $formated_message );\n\t\t}\n\n\t\t$template_message .= $formated_message;\n\t\tif( isset( $template_contents ) )\n\t\t{ // Multipart content\n\t\t\t$template_contents[ $format ] = $formated_message;\n\t\t}\n\t}\n\n\tif( isset( $boundary, $boundary_alt ) )\n\t{ // End all boundary contents\n\t\t$template_message .= \"\\n\".'--'.$boundary_alt.'--'.\"\\n\";\n\t\t$template_message .= \"\\n\".'--'.$boundary.'--'.\"\\n\";\n\t}\n\n\tif( !empty( $params['locale'] ) )\n\t{ // Restore previous locale\n\t\tlocale_restore_previous();\n\t}\n\n\tif( isset( $template_contents ) )\n\t{ // Return array for multipart content\n\t\t$template_contents['full'] = $template_message;\n\t\treturn $template_contents;\n\t}\n\telse\n\t{ // Return string if email message contains one content (html or text)\n\t\treturn $template_message;\n\t}\n}\n\n\n/**\n * Include email template from folder /skins_email/custom/ or /skins_email/\n *\n * @param string Template name\n * @param array Params\n */\nfunction emailskin_include( $template_name, $params = array() )\n{\n\tglobal $emailskins_path, $rsc_url;\n\n\t/**\n\t* @var Log\n\t*/\n\tglobal $Debuglog;\n\tglobal $Timer;\n\n\t$timer_name = 'emailskin_include('.$template_name.')';\n\t$Timer->resume( $timer_name );\n\n\t$is_customized = false;\n\n\t// Try to include custom template firstly\n\t$template_path = $emailskins_path.'custom/'.$template_name;\n\tif( file_exists( $template_path ) )\n\t{ // Include custom template file if it exists\n\t\t$Debuglog->add( 'emailskin_include: '.rel_path_to_base( $template_path ), 'skins' );\n\t\trequire $template_path;\n\t\t// This template is customized, Don't include standard template\n\t\t$is_customized = true;\n\t}\n\n\tif( !$is_customized )\n\t{ // Try to include standard template only if custom template doesn't exist\n\t\t$template_path = $emailskins_path.$template_name;\n\t\tif( file_exists( $template_path ) )\n\t\t{ // Include standard template file if it exists\n\t\t\t$Debuglog->add( 'emailskin_include: '.rel_path_to_base( $template_path ), 'skins' );\n\t\t\trequire $template_path;\n\t\t}\n\t}\n\n\t$Timer->pause( $timer_name );\n}\n\n\n/**\n * Get attribute \"style\" by class name for element in email templates\n *\n * @param string Class name\n * @param boolean TRUE to return string as ' style=\"css_properties\"' otherwise only 'css_properties'\n * @return string\n */\nfunction emailskin_style( $class, $set_attr_name = true )\n{\n\tglobal $emailskins_styles;\n\n\tif( ! is_array( $emailskins_styles ) )\n\t{ // Load email styles only first time\n\t\tglobal $emailskins_path;\n\t\trequire_once $emailskins_path.'_email_style.php';\n\n\t\tforeach( $emailskins_styles as $classes => $styles )\n\t\t{\n\t\t\tif( strpos( $classes, ',' ) !== false )\n\t\t\t{ // This style is used for several classes\n\t\t\t\tunset( $emailskins_styles[ $classes ] );\n\t\t\t\t$classes = explode( ',', $classes );\n\t\t\t\tforeach( $classes as $class_name )\n\t\t\t\t{\n\t\t\t\t\t$class_name = trim( $class_name );\n\t\t\t\t\tif( isset( $emailskins_styles[ $class_name ] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$emailskins_styles[ $class_name ] .= $styles;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$emailskins_styles[ $class_name ] = $styles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif( strpos( $class, '+' ) !== false )\n\t{ // Several classes should be applied this\n\t\t$classes = explode( '+', $class );\n\t\t$style = '';\n\t\tforeach( $classes as $c => $class )\n\t\t{\n\t\t\t$style .= emailskin_style( $class, false );\n\t\t}\n\n\t\treturn empty( $style ) ? '' : ( $set_attr_name ? ' style=\"'.$style.'\"' : $style );\n\t}\n\telseif( isset( $emailskins_styles[ $class ] ) )\n\t{ // One class\n\t\t$style = trim( str_replace( array( \"\\r\", \"\\n\", \"\\t\" ), '', $emailskins_styles[ $class ] ) );\n\t\t$style = str_replace( ': ', ':', $style );\n\n\t\treturn $set_attr_name ? ' style=\"'.$style.'\"' : $style;\n\t}\n\n\treturn '';\n}\n\n\n/**\n * If first parameter evaluates to true printf() gets called using the first parameter\n * as args and the second parameter as print-pattern\n *\n * @param mixed variable to test and output if it's true or $disp_none is given\n * @param string printf-pattern to use (%s gets replaced by $var)\n * @param string printf-pattern to use, if $var is numeric and > 1 (%s gets replaced by $var)\n * @param string printf-pattern to use if $var evaluates to false (%s gets replaced by $var)\n */\nfunction disp_cond( $var, $disp_one, $disp_more = NULL, $disp_none = NULL )\n{\n\tif( is_numeric($var) && $var > 1 )\n\t{\n\t\tprintf( ( $disp_more === NULL ? $disp_one : $disp_more ), $var );\n\t\treturn true;\n\t}\n\telseif( $var )\n\t{\n\t\tprintf( $disp_one, $var );\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif( $disp_none !== NULL )\n\t\t{\n\t\t\tprintf( $disp_none, $var );\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n\n/**\n * Create IMG tag for an action icon.\n *\n * @param string TITLE text (IMG and A link)\n * @param string icon code for {@link get_icon()}\n * @param string URL where the icon gets linked to (empty to not wrap the icon in a link)\n * @param string word to be displayed after icon (if no icon gets displayed, $title will be used instead!)\n * @param integer 1-5: weight of the icon. The icon will be displayed only if its weight is >= than the user setting threshold.\n *                     Use 5, if it's a required icon - all others could get disabled by the user. (Default: 4)\n * @param integer 1-5: weight of the word. The word will be displayed only if its weight is >= than the user setting threshold.\n *                     (Default: 1)\n * @param array Additional attributes to the A tag. The values must be properly encoded for html output (e.g. quotes).\n *        It may also contain these params:\n *         - 'use_js_popup': if true, the link gets opened as JS popup. You must also pass an \"id\" attribute for this!\n *         - 'use_js_size': use this to override the default popup size (\"500, 400\")\n *         - 'class': defaults to 'action_icon', if not set; use \"\" to not use it\n * @param array Attributes for the icon\n * @return string The generated action icon link.\n */\nfunction action_icon( $title, $icon, $url, $word = NULL, $icon_weight = NULL, $word_weight = NULL, $link_attribs = array(), $icon_attribs = array() )\n{\n\tglobal $UserSettings;\n\n\t$link_attribs['href'] = $url;\n\t$link_attribs['title'] = $title;\n\n\tif( is_null($icon_weight) )\n\t{\n\t\t$icon_weight = 4;\n\t}\n\tif( is_null($word_weight) )\n\t{\n\t\t$word_weight = 1;\n\t}\n\n\tif( ! isset($link_attribs['class']) )\n\t{\n\t\t$link_attribs['class'] = 'action_icon';\n\t}\n\n\tif( get_icon( $icon, 'rollover' ) )\n\t{\n\t\tif( empty($link_attribs['class']) )\n\t\t{\n\t\t\t$link_attribs['class'] = 'rollover';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link_attribs['class'] .= ' rollover';\n\t\t}\n\n\t\tif( get_icon( $icon, 'sprite' ) )\n\t\t{ // Set class \"rollover_sprite\" If image uses sprite\n\t\t\t$link_attribs['class'] .= '_sprite';\n\t\t}\n\t}\n\t//$link_attribs['class'] .= $icon != '' ? ' '.$icon : ' noicon';\n\n\t// \"use_js_popup\": open link in a JS popup\n\t// TODO: this needs to be rewritten with jQuery instead\n\tif( false && ! empty($link_attribs['use_js_popup']) )\n\t{\n\t\t$popup_js = 'var win = new PopupWindow(); win.setUrl( \\''.$link_attribs['href'].'\\' ); win.setSize(  ); ';\n\n\t\tif( isset($link_attribs['use_js_size']) )\n\t\t{\n\t\t\tif( ! empty($link_attribs['use_js_size']) )\n\t\t\t{\n\t\t\t\t$popup_size = $link_attribs['use_js_size'];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$popup_size = '500, 400';\n\t\t}\n\t\tif( isset($popup_size) )\n\t\t{\n\t\t\t$popup_js .= 'win.setSize( '.$popup_size.' ); ';\n\t\t}\n\t\t$popup_js .= 'win.showPopup(\\''.$link_attribs['id'].'\\'); return false;';\n\n\t\tif( empty( $link_attribs['onclick'] ) )\n\t\t{\n\t\t\t$link_attribs['onclick'] = $popup_js;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link_attribs['onclick'] .= $popup_js;\n\t\t}\n\t\tunset($link_attribs['use_js_popup']);\n\t\tunset($link_attribs['use_js_size']);\n\t}\n\n\t$display_icon = empty( $UserSettings ) ? false : ($icon_weight >= $UserSettings->get('action_icon_threshold'));\n\t$display_word = empty( $UserSettings ) ? false : ($word_weight >= $UserSettings->get('action_word_threshold'));\n\n\t$a_body = '';\n\n\tif( $display_icon || ! $display_word )\n\t{\t// We MUST display an action icon in order to make the user happy:\n\t\t// OR we default to icon because the user doesn't want the word either!!\n\n\t\t$icon_attribs = array_merge( array(\n\t\t\t\t'title' => $title\n\t\t\t), $icon_attribs );\n\n\t\tif( $icon_s = get_icon( $icon, 'imgtag', $icon_attribs, true ) )\n\t\t{\n\t\t\t$a_body .= $icon_s;\n\t\t}\n\t\telse\n\t\t{ // fallback to word\n\t\t\t$display_word = true;\n\t\t}\n\t}\n\n\tif( $display_word )\n\t{\t// We MUST display an action word in order to make the user happy:\n\n\t\tif( $display_icon )\n\t\t{ // We already have an icon, display a SHORT word:\n\t\t\tif( !empty($word) )\n\t\t\t{\t// We have provided a short word:\n\t\t\t\t$a_body .= $word;\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// We fall back to alt:\n\t\t\t\t$a_body .= get_icon( $icon, 'legend' );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t// No icon display, let's display a LONG word/text:\n\t\t\t$a_body .= trim( $title, ' .!' );\n\t\t}\n\n\t\t// Add class \"hoverlink\" for icon with text\n\t\t$link_attribs['class'] .= ' hoverlink';\n\t}\n\n\n\t// NOTE: We do not use format_to_output with get_field_attribs_as_string() here, because it interferes with the Results class (eval() fails on entitied quotes..) (blueyed)\n\treturn '<a'.get_field_attribs_as_string( $link_attribs, false ).'>'.$a_body.'</a>';\n}\n\n\n/**\n * Get properties of an icon.\n *\n * Note: to get a file type icon, use {@link File::get_icon()} instead.\n *\n * @uses get_icon_info()\n * @param string icon for what? (key)\n * @param string what to return for that icon ('imgtag', 'alt', 'legend', 'file', 'url', 'size' {@link imgsize()})\n * @param array additional params\n *   - 'class' => class name when getting 'imgtag',\n *   - 'size' => param for 'size',\n *   - 'title' => title attribute for 'imgtag'\n * @param boolean true to include this icon into the legend at the bottom of the page (works for 'imgtag' only)\n * @return mixed False on failure, string on success.\n */\nfunction get_icon( $iconKey, $what = 'imgtag', $params = NULL, $include_in_legend = false )\n{\n\tglobal $admin_subdir, $Debuglog, $use_strict;\n\tglobal $conf_path;\n\tglobal $rsc_path, $rsc_uri;\n\n\tif( ! function_exists('get_icon_info') )\n\t{\n\t\trequire_once $conf_path.'_icons.php';\n\t}\n\n\t$icon = get_icon_info($iconKey);\n\tif( ! $icon )\n\t{\n\t\t$Debuglog->add('No image defined for '.var_export( $iconKey, true ).'!', 'icons');\n\t\treturn false;\n\t}\n\n\tif( !isset( $icon['file'] ) && $what != 'imgtag' )\n\t{\n\t\t$icon['file'] = 'icons/icons_sprite.png';\n\t}\n\n\tswitch( $what )\n\t{\n\t\tcase 'rollover':\n\t\t\tif( isset( $icon['rollover'] ) )\n\t\t\t{ // Image has rollover available\n\t\t\t\tglobal $b2evo_icons_type;\n\n\t\t\t\tif( isset( $b2evo_icons_type ) && ( ! empty( $icon['glyph'] ) || ! empty( $icon['fa'] ) ) )\n\t\t\t\t{ // Glyph and font-awesome icons don't have rollover effect\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn $icon['rollover'];\n\t\t\t}\n\t\t\treturn false;\n\t\t\t/* BREAK */\n\n\n\t\tcase 'file':\n\t\t\treturn $rsc_path.$icon['file'];\n\t\t\t/* BREAK */\n\n\n\t\tcase 'alt':\n\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t{ // alt tag from $map_iconfiles\n\t\t\t\treturn $icon['alt'];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // fallback to $iconKey as alt-tag\n\t\t\t\treturn $iconKey;\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'legend':\n\t\t\tif( isset( $icon['legend'] ) )\n\t\t\t{ // legend tag from $map_iconfiles\n\t\t\t\treturn $icon['legend'];\n\t\t\t}\n\t\t\telse\n\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t{ // alt tag from $map_iconfiles\n\t\t\t\treturn $icon['alt'];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // fallback to $iconKey as alt-tag\n\t\t\t\treturn $iconKey;\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'class':\n\t\t\tif( isset($icon['class']) )\n\t\t\t{\n\t\t\t\treturn $icon['class'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t/* BREAK */\n\n\t\tcase 'url':\n\t\t\treturn $rsc_uri.$icon['file'];\n\t\t\t/* BREAK */\n\n\t\tcase 'size':\n\t\t\tif( !isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$Debuglog->add( 'No iconsize for ['.$iconKey.']', 'icons' );\n\n\t\t\t\t$icon['size'] = imgsize( $rsc_path.$icon['file'] );\n\t\t\t}\n\n\t\t\tswitch( $params['size'] )\n\t\t\t{\n\t\t\t\tcase 'width':\n\t\t\t\t\treturn $icon['size'][0];\n\n\t\t\t\tcase 'height':\n\t\t\t\t\treturn $icon['size'][1];\n\n\t\t\t\tcase 'widthxheight':\n\t\t\t\t\treturn $icon['size'][0].'x'.$icon['size'][1];\n\n\t\t\t\tcase 'width':\n\t\t\t\t\treturn $icon['size'][0];\n\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\"';\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn $icon['size'];\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'xy':\n\t\t\tif( isset( $icon['xy'] ) )\n\t\t\t{ // Return data for style property \"background-position\"\n\t\t\t\treturn \"-\".$icon['xy'][0].\"px -\".$icon['xy'][1].\"px\";\n\t\t\t}\n\t\t\treturn false;\n\n\n\t\tcase 'sprite':\n\t\t\tif( isset( $icon['xy'] ) )\n\t\t\t{\t// Image uses spite file\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t\t/* BREAK */\n\n\n\t\tcase 'imgtag':\n\t\t\tglobal $b2evo_icons_type;\n\n\t\t\tif( isset( $b2evo_icons_type ) )\n\t\t\t{ // Specific icons type is defined\n\t\t\t\t$current_icons_type = $b2evo_icons_type;\n\t\t\t\tif( $current_icons_type == 'fontawesome-glyphicons' )\n\t\t\t\t{ // Use fontawesome icons as a priority over the glyphicons\n\t\t\t\t\t$current_icons_type = isset( $icon['fa'] ) ? 'fontawesome' : 'glyphicons';\n\t\t\t\t}\n\t\t\t\tswitch( $current_icons_type )\n\t\t\t\t{\n\t\t\t\t\tcase 'glyphicons':\n\t\t\t\t\t\t// Use glyph icons of bootstrap\n\t\t\t\t\t\t$icon_class_prefix = 'glyphicon glyphicon-';\n\t\t\t\t\t\t$icon_param_name = 'glyph';\n\t\t\t\t\t\t$icon_content = '&nbsp;';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'fontawesome':\n\t\t\t\t\t\t// Use the icons from http://fortawesome.github.io/Font-Awesome/icons/\n\t\t\t\t\t\t$icon_class_prefix = 'fa fa-';\n\t\t\t\t\t\t$icon_param_name = 'fa';\n\t\t\t\t\t\t$icon_content = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( isset( $icon_class_prefix ) && ! empty( $icon[ $icon_param_name ] ) )\n\t\t\t{ // Use glyph or fa icon if it is defined in icons config\n\t\t\t\tif( isset( $params['class'] ) )\n\t\t\t\t{ // Get class from params\n\t\t\t\t\t$params['class'] = $icon_class_prefix.$icon[ $icon_param_name ].' '.$params['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{ // Set default class\n\t\t\t\t\t$params['class'] = $icon_class_prefix.$icon[ $icon_param_name ];\n\t\t\t\t}\n\n\t\t\t\t$styles = array();\n\t\t\t\tif( isset( $icon['color-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a color for icon only for current type\n\t\t\t\t\tif( $icon['color-'.$icon_param_name] != 'default' )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = 'color:'.$icon['color-'.$icon_param_name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif( isset( $icon['color'] ) )\n\t\t\t\t{ // Set a color for icon for all types\n\t\t\t\t\tif( $icon['color'] != 'default' )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = 'color:'.$icon['color'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['color-over'] ) )\n\t\t\t\t{ // Set a color for mouse over event\n\t\t\t\t\t$params['data-color'] = $icon['color-over'];\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['toggle-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a color for mouse over event\n\t\t\t\t\t$params['data-toggle'] = $icon['toggle-'.$icon_param_name];\n\t\t\t\t}\n\n\t\t\t\tif( ! isset( $params['title'] ) )\n\t\t\t\t{ // Use 'alt' for 'title'\n\t\t\t\t\tif( isset( $params['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $params['alt'];\n\t\t\t\t\t\tunset( $params['alt'] );\n\t\t\t\t\t}\n\t\t\t\t\telse if( ! isset( $params['alt'] ) && isset( $icon['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $icon['size-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a size for icon only for current type\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][0] ) )\n\t\t\t\t\t{ // Width\n\t\t\t\t\t\t$styles['width'] = 'width:'.$icon['size-'.$icon_param_name][0].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][1] ) )\n\t\t\t\t\t{ // Height\n\t\t\t\t\t\t$styles['width'] = 'height:'.$icon['size-'.$icon_param_name][1].'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['style'] ) )\n\t\t\t\t{ // Keep styles from params\n\t\t\t\t\t$styles[] = $params['style'];\n\t\t\t\t}\n\t\t\t\tif( ! empty( $styles ) )\n\t\t\t\t{ // Init attribute 'style'\n\t\t\t\t\t$params['style'] = implode( ';', $styles );\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$params = get_field_attribs_as_string( $params, false );\n\n\t\t\t\t$r = '<span'.$params.'>'.$icon_content.'</span>';\n\t\t\t}\n\t\t\telseif( ! isset( $icon['file'] ) )\n\t\t\t{ // Use span tag with sprite instead of img\n\t\t\t\t$styles = array();\n\n\t\t\t\tif( isset( $params['xy'] ) )\n\t\t\t\t{ // Get background position from params\n\t\t\t\t\t$styles[] = \"background-position: \".$params['xy'][0].\"px \".$params['xy'][1].\"px\";\n\t\t\t\t\tunset( $params['xy'] );\n\t\t\t\t}\n\t\t\t\telse if( isset( $icon['xy'] ) )\n\t\t\t\t{ // Set background position in the icons_sprite.png\n\t\t\t\t\t$styles[] = \"background-position: -\".$icon['xy'][0].\"px -\".$icon['xy'][1].\"px\";\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['size'] ) )\n\t\t\t\t{ // Get sizes from params\n\t\t\t\t\t$icon['size'] = $params['size'];\n\t\t\t\t\tunset( $params['size'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t{ // Set width & height\n\t\t\t\t\tif( $icon['size'][0] != 16 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = \"width: \".$icon['size'][0].\"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif( $icon['size'][1] != 16 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = \"height: \".$icon['size'][1].\"px; line-height: \".$icon['size'][1].\"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['style'] ) )\n\t\t\t\t{ // Get styles from params\n\t\t\t\t\t$styles[] = $params['style'];\n\t\t\t\t}\n\t\t\t\tif( count( $styles ) > 0 )\n\t\t\t\t{\n\t\t\t\t\t$params['style'] = implode( '; ', $styles);\n\t\t\t\t}\n\n\t\t\t\tif( ! isset( $params['title'] ) )\n\t\t\t\t{\t// Use 'alt' for 'title'\n\t\t\t\t\tif( isset( $params['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $params['alt'];\n\t\t\t\t\t\tunset( $params['alt'] );\n\t\t\t\t\t}\n\t\t\t\t\telse if( ! isset( $params['alt'] ) && isset( $icon['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['class'] ) )\n\t\t\t\t{\t// Get class from params\n\t\t\t\t\t$params['class'] = 'icon '.$params['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Set default class\n\t\t\t\t\t$params['class'] = 'icon';\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$params = get_field_attribs_as_string( $params, false );\n\n\t\t\t\t$r = '<span'.$params.'>&nbsp;</span>';\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Use img tag\n\t\t\t\t$r = '<img src=\"'.$rsc_uri.$icon['file'].'\" ';\n\n\t\t\t\tif( !$use_strict )\n\t\t\t\t{\t// Include non CSS fallbacks - transitional only:\n\t\t\t\t\t$r .= 'border=\"0\" align=\"top\" ';\n\t\t\t\t}\n\n\t\t\t\t// Include class (will default to \"icon\"):\n\t\t\t\tif( ! isset( $params['class'] ) )\n\t\t\t\t{\n\t\t\t\t\tif( isset($icon['class']) )\n\t\t\t\t\t{\t// This icon has a class\n\t\t\t\t\t\t$params['class'] = $icon['class'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['class'] = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Include size (optional):\n\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t{\n\t\t\t\t\t$r .= 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\" ';\n\t\t\t\t}\n\n\t\t\t\t// Include alt (XHTML mandatory):\n\t\t\t\tif( ! isset( $params['alt'] ) )\n\t\t\t\t{\n\t\t\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t\t\t{ // alt-tag from $map_iconfiles\n\t\t\t\t\t\t$params['alt'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ // $iconKey as alt-tag\n\t\t\t\t\t\t$params['alt'] = $iconKey;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$r .= get_field_attribs_as_string( $params, false );\n\n\t\t\t\t// Close tag:\n\t\t\t\t$r .= '/>';\n\n\n\t\t\t\tif( $include_in_legend && ( $IconLegend = & get_IconLegend() ) )\n\t\t\t\t{ // This icon should be included into the legend:\n\t\t\t\t\t$IconLegend->add_icon( $iconKey );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $r;\n\t\t\t/* BREAK */\n\n\t\tcase 'noimg':\n\t\t\tglobal $b2evo_icons_type;\n\n\t\t\tif( isset( $b2evo_icons_type ) )\n\t\t\t{ // Specific icons type is defined\n\t\t\t\t$current_icons_type = $b2evo_icons_type;\n\t\t\t\tif( $current_icons_type == 'fontawesome-glyphicons' )\n\t\t\t\t{ // Use fontawesome icons as a priority over the glyphicons\n\t\t\t\t\t$current_icons_type = isset( $icon['fa'] ) ? 'fontawesome' : 'glyphicons';\n\t\t\t\t}\n\t\t\t\tswitch( $current_icons_type )\n\t\t\t\t{\n\t\t\t\t\tcase 'glyphicons':\n\t\t\t\t\t\t// Use glyph icons of bootstrap\n\t\t\t\t\t\t$icon_param_name = 'glyph';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'fontawesome':\n\t\t\t\t\t\t// Use the icons from http://fortawesome.github.io/Font-Awesome/icons/\n\t\t\t\t\t\t$icon_param_name = 'fa';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$styles = array();\n\t\t\tif( isset( $icon_param_name ) && ! empty( $icon[ $icon_param_name ] ) )\n\t\t\t{ // Use glyph or fa icon if it is defined in icons config\n\t\t\t\tif( isset( $icon['size-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a size for icon only for current type\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][0] ) )\n\t\t\t\t\t{ // Width\n\t\t\t\t\t\t$styles['width'] = 'width:'.$icon['size-'.$icon_param_name][0].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][1] ) )\n\t\t\t\t\t{ // Height\n\t\t\t\t\t\t$styles['width'] = 'height:'.$icon['size-'.$icon_param_name][1].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t\t{ // Unset size for sprite icon\n\t\t\t\t\t\tunset( $icon['size'] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Include size (optional):\n\t\t\tif( isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$params['size'] = $icon['size'];\n\t\t\t}\n\t\t\t$styles[] = 'margin:0 2px';\n\n\t\t\tif( isset( $params['style'] ) )\n\t\t\t{ // Keep styles from params\n\t\t\t\t$styles[] = $params['style'];\n\t\t\t}\n\t\t\tif( ! empty( $styles ) )\n\t\t\t{ // Init attribute 'style'\n\t\t\t\t$params['style'] = implode( ';', $styles );\n\t\t\t}\n\n\t\t\treturn get_icon( 'pixel', 'imgtag', $params );\n\t\t\t/* BREAK */\n\t\t\t/*\n\t\t\t$blank_icon = get_icon_info('pixel');\n\n\t\t\t$r = '<img src=\"'.$rsc_uri.$blank_icon['file'].'\" ';\n\n\t\t\t// TODO: dh> add this only for !$use_strict, like above?\n\t\t\t// Include non CSS fallbacks (needed by bozos... and basic skin):\n\t\t\t$r .= 'border=\"0\" align=\"top\" ';\n\n\t\t\t// Include class (will default to \"noicon\"):\n\t\t\tif( ! isset( $params['class'] ) )\n\t\t\t{\n\t\t\t\tif( isset($icon['class']) )\n\t\t\t\t{\t// This icon has a class\n\t\t\t\t\t$params['class'] = $icon['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$params['class'] = 'no_icon';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Include size (optional):\n\t\t\tif( isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$r .= 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\" ';\n\t\t\t}\n\n\t\t\t// Include alt (XHTML mandatory):\n\t\t\tif( ! isset( $params['alt'] ) )\n\t\t\t{\n\t\t\t\t$params['alt'] = '';\n\t\t\t}\n\n\t\t\t// Add all the attributes:\n\t\t\t$r .= get_field_attribs_as_string( $params, false );\n\n\t\t\t// Close tag:\n\t\t\t$r .= '/>';\n\n\t\t\treturn $r;*/\n\t\t\t/* BREAK */\n\t}\n}\n\n\n/**\n * @param string date (YYYY-MM-DD)\n * @param string time\n */\nfunction form_date( $date, $time = '' )\n{\n\treturn substr( $date.'          ', 0, 10 ).' '.$time;\n}\n\n\n/**\n * Get list of client IP addresses from REMOTE_ADDR and HTTP_X_FORWARDED_FOR,\n * in this order. '' is used when no IP could be found.\n *\n * @param boolean True, to get only the first IP (probably REMOTE_ADDR)\n * @param boolean True, to convert IPv6 to IPv4 format\n * @return array|string Depends on first param.\n */\nfunction get_ip_list( $firstOnly = false, $convert_to_ipv4 = false )\n{\n\t$r = array();\n\n\tif( ! empty( $_SERVER['REMOTE_ADDR'] ) )\n\t{\n\t\tforeach( explode( ',', $_SERVER['REMOTE_ADDR'] ) as $l_ip )\n\t\t{\n\t\t\t$l_ip = trim( $l_ip );\n\t\t\tif( ! empty( $l_ip ) )\n\t\t\t{\n\t\t\t\tif( $convert_to_ipv4 )\n\t\t\t\t{ // Convert IP address to IPv4 format(if it is in IPv6 format)\n\t\t\t\t\t$l_ip = int2ip( ip2int( $l_ip ) );\n\t\t\t\t}\n\t\t\t\t$r[] = $l_ip;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( ! empty( $_SERVER['HTTP_X_FORWARDED_FOR'] ) )\n\t{ // IP(s) behind Proxy - this can be easily forged!\n\t\tforeach( explode( ',', $_SERVER['HTTP_X_FORWARDED_FOR'] ) as $l_ip )\n\t\t{\n\t\t\t$l_ip = trim( $l_ip );\n\t\t\tif( ! empty( $l_ip ) && $l_ip != 'unknown' )\n\t\t\t{\n\t\t\t\tif( $convert_to_ipv4 )\n\t\t\t\t{ // Convert IP address to IPv4 format(if it is in IPv6 format)\n\t\t\t\t\t$l_ip = int2ip( ip2int( $l_ip ) );\n\t\t\t\t}\n\t\t\t\t$r[] = $l_ip;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( ! isset( $r[0] ) )\n\t{ // No IP found.\n\t\t$r[] = '';\n\t}\n\n\t// Remove the duplicates\n\t$r = array_unique( $r );\n\n\treturn $firstOnly ? $r[0] : $r;\n}\n\n\n/**\n * Get list of IP addresses with link to back-office page if User has an access\n *\n * @param object|NULL User\n * @param array|NULL List of IP addresses\n * @param string Text of link, Use '#' to display IP address\n * @return array List of IP addresses\n */\nfunction get_linked_ip_list( $ip_list = NULL, $User = NULL, $link_text = '#' )\n{\n\tif( $User === NULL )\n\t{ // Get current User by default\n\t\tglobal $current_User;\n\t\t$User = & $current_User;\n\t}\n\n\tif( $ip_list === NULL )\n\t{ // Get IP addresses by function get_ip_list()\n\t\t$ip_list = get_ip_list( false, true );\n\t}\n\n\tif( ! empty( $User ) &&\n\t    $User->check_perm( 'admin', 'restricted' ) &&\n\t    $User->check_perm( 'spamblacklist', 'view' ) )\n\t{ // User has an access to backoffice, Display a link for each IP address\n\t\tglobal $admin_url;\n\t\tforeach( $ip_list as $i => $ip_address )\n\t\t{\n\t\t\tif( $link_text == '#' )\n\t\t\t{ // Use IP address aslink text\n\t\t\t\t$link_text = $ip_address;\n\t\t\t}\n\t\t\t$ip_list[ $i ] = '<a href=\"'.$admin_url.'?ctrl=antispam&amp;tab3=ipranges&amp;ip_address='.$ip_address.'\">'.$link_text.'</a>';\n\t\t}\n\t}\n\n\treturn $ip_list;\n}\n\n\n/**\n * Get the base domain (without protocol and any subdomain) of an URL.\n *\n * Gets a max of 3 domain parts (x.y.tld)\n *\n * @param string URL\n * @return string the base domain (may become empty, if found invalid)\n */\nfunction get_base_domain( $url )\n{\n\tglobal $evo_charset;\n\n\t// Chop away the protocol part(http,htpps,ftp) and the path:\n\t$domain = preg_replace( '~^([a-z]+://)?([^:/#]+)(.*)$~i', '\\\\2', $url );\n\n\tif( empty( $domain ) || preg_match( '~^(\\d+\\.)+\\d+$~', $domain ) )\n\t{\t// Empty or All numeric = IP address, don't try to cut it any further:\n\t\treturn $domain;\n\t}\n\n\t// Get the base domain up to 2 or 3 levels (x.y.tld):\n\t// NOTE: \"_\" is not really valid, but for Windows it is..\n\t// NOTE: \\w includes \"_\"\n\n\t// Convert URL to IDN:\n\t$domain = idna_encode( $domain );\n\n\tif( preg_match( '~\\.(com|net|org|int|edu|gov|mil)$~i', $domain ) )\n\t{\t// Use max 2 level domain for very well known TLDs:\n\t\t// (for example: \"sub3.sub2.sub1.domain.com\" will be \"domain.com\")\n\t\t$max_level = 2;\n\t}\n\telse\n\t{\t// Use max 3 level domain for all others:\n\t\t// (for example: \"sub3.sub2.sub1.domain.fr\" will be \"sub1.domain.fr\")\n\t\t$max_level = 3;\n\t}\n\n\t// Limit domain by 2 or 3 level depending on TLD:\n\tif( ! preg_match( '~ ( \\w (\\w|-|_)* \\. ){0,'.( $max_level - 1 ).'}   \\w (\\w|-|_)* $~ix', $domain, $match ) )\n\t{\t// Return an empty if domain doesn't match to proper format:\n\t\treturn '';\n\t}\n\n\t// Convert all symbols of domain name to UTF-8:\n\t$domain = convert_charset( idna_decode( $match[0] ), $evo_charset, 'UTF-8' );\n\n\t// Remove any prefix like \"www.\", \"www2.\", \"www9999.\" and etc.:\n\t$domain = preg_replace( '~^www[0-9]*\\.~i', '', $domain );\n\n\treturn $domain;\n}\n\n\n/**\n * Generate a valid key of size $length.\n *\n * @param integer length of key\n * @param string chars to use in generated key\n * @return string key\n */\nfunction generate_random_key( $length = 32, $keychars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' )\n{\n\t$key = '';\n\t$rnd_max = strlen($keychars) - 1;\n\n\tfor( $i = 0; $i < $length; $i++ )\n\t{\n\t\t$key .= $keychars{mt_rand(0, $rnd_max)}; // get a random character out of $keychars\n\t}\n\n\treturn $key;\n}\n\n\n/**\n * Generate a random password with no ambiguous chars\n *\n * @param integer length of password\n * @return string password\n */\nfunction generate_random_passwd( $length = NULL )\n{\n\t// fp> NOTE: do not include any characters that would make autogenerated passwords ambiguous\n\t// 1 (one) vs l (L) vs I (i)\n\t// O (letter) vs 0 (digit)\n\n\tif( empty($length) )\n\t{\n\t\t$length = rand( 8, 14 );\n\t}\n\n\treturn generate_random_key( $length, 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789' );\n}\n\n\nfunction is_create_action( $action )\n{\n\t$action_parts = explode( '_', $action );\n\n\tswitch( $action_parts[0] )\n\t{\n\t\tcase 'new':\n\t\tcase 'new_switchtab':\n\t\tcase 'copy':\n\t\tcase 'create':\t// we return in this state after a validation error\n\t\tcase 'preview':\n\t\t\treturn true;\n\n\t\tcase 'edit':\n\t\tcase 'edit_switchtab':\n\t\tcase 'update':\t// we return in this state after a validation error\n\t\tcase 'delete':\n\t\t// The following one's a bit far fetched, but can happen if we have no sheet display:\n\t\tcase 'unlink':\n\t\tcase 'view':\n\t\tcase 'extract':\n\t\t\treturn false;\n\n\t\tdefault:\n\t\t\tdebug_die( 'Unhandled action in form: '.strip_tags($action_parts[0]) );\n\t}\n}\n\n\n/**\n * Compact a date in a number keeping only integer value of the string\n *\n * @param string date\n */\nfunction compact_date( $date )\n{\n\treturn preg_replace( '#[^0-9]#', '', $date );\n}\n\n\n/**\n * Decompact a date in a date format ( Y-m-d h:m:s )\n *\n * @param string date\n */\nfunction decompact_date( $date )\n{\n\t$date0 = $date;\n\n\treturn  substr($date0,0,4).'-'.substr($date0,4,2).'-'.substr($date0,6,2).' '\n\t\t\t\t\t\t\t\t.substr($date0,8,2).':'.substr($date0,10,2).':'.substr($date0,12,2);\n}\n\n/**\n * Check the format of the phone number param and\n * format it in a french number if it is.\n *\n * @param string phone number\n */\nfunction format_phone( $phone, $hide_country_dialing_code_if_same_as_locale = true )\n{\n\tglobal $CountryCache;\n\n\t$dialing_code = NULL;\n\n\tif( substr( $phone, 0, 1 ) == '+' )\n\t{\t// We have a dialing code in the phone, so we extract it:\n\t\t$dialing_code = $CountryCache->extract_country_dialing_code( substr( $phone, 1 ) );\n\t}\n\n\tif( !is_null( $dialing_code ) && ( locale_dialing_code() == $dialing_code )\n\t\t\t&& $hide_country_dialing_code_if_same_as_locale )\n\t{\t// The phone dialing code is same as locale and we want to hide it in this case\n\t\tif( ( strlen( $phone ) - strlen( $dialing_code ) ) == 10 )\n\t\t{\t// We can format it like a french phone number ( 0x.xx.xx.xx.xx )\n\t\t\t$phone_formated = format_french_phone( '0'.substr( $phone, strlen( $dialing_code )+1 ) );\n\t\t}\n\t\telse\n\t\t{ // ( 0xxxxxxxxxxxxxx )\n\t\t\t$phone_formated = '0'.substr( $phone, strlen( $dialing_code )+1 );\n\t\t}\n\n\t}\n\telseif( !is_null( $dialing_code ) )\n\t{\t// Phone has a dialing code\n\t\tif( ( strlen( $phone ) - strlen( $dialing_code ) ) == 10 )\n\t\t{ // We can format it like a french phone number with the dialing code ( +dialing x.xx.xx.xx.xx )\n\t\t\t$phone_formated = '+'.$dialing_code.format_french_phone( ' '.substr( $phone, strlen( $dialing_code )+1 ) );\n\t\t}\n\t\telse\n\t\t{ // ( +dialing  xxxxxxxxxxx )\n\t\t\t$phone_formated = '+'.$dialing_code.' '.substr( $phone, strlen( $dialing_code )+1 );\n\t\t}\n\t}\n\telse\n\t{\n\t\tif( strlen( $phone ) == 10 )\n\t\t{ //  We can format it like a french phone number ( xx.xx.xx.xx.xx )\n\t\t\t$phone_formated = format_french_phone( $phone );\n\t\t}\n\t\telse\n\t\t{\t// We don't format phone: TODO generic format phone ( xxxxxxxxxxxxxxxx )\n\t\t\t$phone_formated = $phone;\n\t\t}\n\t}\n\n\treturn $phone_formated;\n}\n\n\n/**\n * Format a string in a french phone number\n *\n * @param string phone number\n */\nfunction format_french_phone( $phone )\n{\n\treturn substr($phone, 0 , 2).'.'.substr($phone, 2, 2).'.'.substr($phone, 4, 2)\n\t\t\t\t\t.'.'.substr($phone, 6, 2).'.'.substr($phone, 8, 2);\n}\n\n\n/**\n * Get the manual url for the given topic\n *\n * @param string topic\n * @return string url to the manual\n */\nfunction get_manual_url( $topic )\n{\n\t// fp> TODO: this below is a temmporary hack while we work on the new manual:\n\treturn 'http://b2evolution.net/man/'.str_replace( '_', '-', strtolower( $topic ) );\n}\n\n\n/**\n * Generate a link to a online help resource.\n * testing the concept of online help (aka webhelp).\n * this function should be relocated somewhere better if it is taken onboard by the project\n *\n * @todo replace [?] with icon,\n * @todo write url suffix dynamically based on topic and language\n *\n * QUESTION: launch new window with javascript maybe?\n * @param string Topic\n *        The topic should be in a format like [\\w]+(/[\\w]+)*, e.g features/online_help.\n * @param string link text, leave it NULL to get link with manual icon\n * @param string a word to be displayed after the manual icon (if no icon gets displayed, $title will be used instead!)\n * @param integer 1-5: weight of the word. The word will be displayed only if its weight is >= than the user setting threshold. (Default: 1)\n * @return string\n */\nfunction get_manual_link( $topic, $link_text = NULL, $action_word = NULL, $word_weight = 1 )\n{\n\tglobal $online_help_links;\n\n\tif( $online_help_links )\n\t{\n\t\t$manual_url = get_manual_url( $topic );\n\n\t\tif( $link_text == NULL )\n\t\t{\n\t\t\tif( $action_word == NULL )\n\t\t\t{\n\t\t\t\t$action_word = T_('Manual');\n\t\t\t}\n\t\t\t$webhelp_link = action_icon( T_('Open relevant page in online manual'), 'manual', $manual_url, $action_word, 5, $word_weight, array( 'target' => '_blank' ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$webhelp_link = '<a href=\"'.$manual_url.'\" target = \"_blank\">'.$link_text.'</a>';\n\t\t}\n\n\t\treturn ' '.$webhelp_link;\n\t}\n\telse\n\t{\n\t\treturn '';\n\t}\n}\n\n\n/**\n * Build a string out of $field_attribs, with each attribute\n * prefixed by a space character.\n *\n * @param array Array of field attributes.\n * @param boolean Use format_to_output() for the attributes?\n * @return string\n */\nfunction get_field_attribs_as_string( $field_attribs, $format_to_output = true )\n{\n\t$r = '';\n\tforeach( $field_attribs as $l_attr => $l_value )\n\t{\n\t\tif( $l_value === NULL )\n\t\t{ // don't generate empty attributes (it may be NULL if we pass 'value' => NULL as field_param for example, because isset() does not match it!)\n\t\t\t// sam2kb> what about alt=\"\" how do we handle this?\n\t\t\t// I've removed the \"=== ''\" check now. Should not do any harm. IIRC NULL is what we want to avoid here.\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $format_to_output )\n\t\t{\n\t\t\t$r .= ' '.$l_attr.'=\"'.format_to_output( $l_value, 'formvalue' ).'\"';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$r .= ' '.$l_attr.'=\"'.$l_value.'\"';\n\t\t}\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Update values of HTML tag attributes\n *\n * @param string HTML tag\n * @param array Attributes\n * @param array Actions for each attribute:\n *              'append'  - Append to existing attribute value (Default for all)\n *              'skip'    - Skip if attribute already exists\n *              'replace' - Replace attribute to new value completely\n * @return string Updated HTML tag\n */\nfunction update_html_tag_attribs( $html_tag, $new_attribs, $attrib_actions = array() )\n{\n\tif( ! preg_match( '#^<([\\S]+)[^>]*>$#i', $html_tag, $tag_match ) )\n\t{\t// Wrong HTML tag format, Return original string:\n\t\treturn $html_tag;\n\t}\n\n\t$html_tag_name = $tag_match[1];\n\n\t$old_attribs = array();\n\tif( preg_match_all( '@(\\S+)=(\"|\\'|)(.*)(\"|\\'|>)@isU', $html_tag, $attr_matches ) )\n\t{\t// Get all existing attributes:\n\t\tforeach( $attr_matches[1] as $o => $old_attr_name )\n\t\t{\n\t\t\t$old_attribs[ $old_attr_name ] = $attr_matches[3][ $o ];\n\t\t}\n\t}\n\n\t$updated_attribs = array();\n\tforeach( $new_attribs as $new_attrib_name => $new_attrib_value )\n\t{\n\t\tif( isset( $old_attribs[ $new_attrib_name ] ) )\n\t\t{\t// If attribute exists in original HTML tag then Update it depending on selected action:\n\t\t\t$attrib_action = isset( $attrib_actions[ $new_attrib_name ] ) ? $attrib_actions[ $new_attrib_name ] : 'append';\n\t\t\tswitch( $attrib_action )\n\t\t\t{\n\t\t\t\tcase 'skip':\n\t\t\t\t\t// Don't update old value:\n\t\t\t\t\t$new_attrib_value = $old_attribs[ $new_attrib_name ];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'append':\n\t\t\t\tdefault:\n\t\t\t\t\t// Append new value to old:\n\t\t\t\t\t$new_attrib_value = $old_attribs[ $new_attrib_name ].' '.$new_attrib_value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// ELSE If attribute doesn't exist in original HTML tag then create new one.\n\n\t\t$updated_attribs[] = $new_attrib_name.'=\"'.format_to_output( $new_attrib_value, 'formvalue' ).'\"';\n\t}\n\n\treturn '<'.$html_tag_name.' '.implode( ' ', $updated_attribs ).'>';\n}\n\n\n/**\n * Is the current page an install page?\n *\n * @return boolean\n */\nfunction is_install_page()\n{\n\tglobal $is_install_page;\n\n\treturn isset( $is_install_page ) && $is_install_page === true; // check for type also, because of register_globals!\n}\n\n\n/**\n * Is the current page an admin/backoffice page?\n *\n * @return boolean\n */\nfunction is_admin_page()\n{\n\tglobal $is_admin_page;\n\n\treturn isset( $is_admin_page ) && $is_admin_page === true; // check for type also, because of register_globals!\n}\n\n\n/**\n * Is the current page a default 'Front' page of a blog?\n *\n * @return boolean\n */\nfunction is_front_page()\n{\n\tglobal $is_front;\n\n\treturn isset( $is_front ) && $is_front === true;\n}\n\n\n/**\n * Does the given url require logged in user\n *\n * @param string url\n * @param boolean set true to also check if url is login screen or not\n * @return boolean\n */\nfunction require_login( $url, $check_login_screen )\n{\n\tglobal $Settings;\n\tif( preg_match( '#/admin.php([&?].*)?$#', $url ) )\n\t{ // admin always require logged in user\n\t\treturn true;\n\t}\n\n\tif( $check_login_screen &&  preg_match( '#/login.php([&?].*)?$#', $url ) )\n\t{\n\t\treturn true;\n\t}\n\n\t$disp_names = 'threads|messages|contacts';\n\tif( !$Settings->get( 'allow_anonymous_user_list' ) )\n\t{\n\t\t$disp_names .= '|users';\n\t}\n\tif( !$Settings->get( 'allow_anonymous_user_profiles' ) )\n\t{\n\t\t$disp_names .= '|user';\n\t}\n\tif( $check_login_screen )\n\t{\n\t\t$disp_names .= '|login';\n\t}\n\tif( preg_match( '#disp=('.$disp_names.')#', $url ) )\n\t{ // $url require logged in user\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Implode array( 'x', 'y', 'z' ) to something like 'x, y and z'. Useful for displaying list to the end user.\n *\n * If there's one element in the table, it is returned.\n * If there are at least two elements, the last one is concatenated using $implode_last, while the ones before are imploded using $implode_by.\n *\n * @todo dh> I don't think using entities/HTML as default for $implode_last is sane!\n *           Use \"&\" instead and make sure that the output for HTML is HTML compliant..\n * @todo Support for locales that have a different kind of enumeration?!\n * @return string\n */\nfunction implode_with_and( $arr, $implode_by = ', ', $implode_last = ' &amp; ' )\n{\n\tswitch( count($arr) )\n\t{\n\t\tcase 0:\n\t\t\treturn '';\n\n\t\tcase 1:\n\t\t\t$r = array_shift($arr);\n\t\t\treturn $r;\n\n\t\tdefault:\n\t\t\t$r = implode( $implode_by, array_slice( $arr, 0, -1 ) )\n\t\t\t    .$implode_last.array_pop( $arr );\n\t\t\treturn $r;\n\t}\n}\n\n\n/**\n * Display an array as a list:\n *\n * @param array\n * @param string\n * @param string\n * @param string\n * @param string\n * @param string\n */\nfunction display_list( $items, $list_start = '<ul>', $list_end = '</ul>', $item_separator = '',\n\t\t\t\t\t\t\t\t\t\t\t\t$item_start = '<li>', $item_end = '</li>', $force_hash = NULL, $max_items = NULL, $link_params = array() )\n{\n\tif( !is_null($max_items) && $max_items < 1 )\n\t{\n\t\treturn;\n\t}\n\n\tif( !empty( $items ) )\n\t{\n\t\techo $list_start;\n\t\t$count = 0;\n\t\t$first = true;\n\n\t\tforeach( $items as $item )\n\t\t{\t// For each list item:\n\n\t\t\t$link = resolve_link_params( $item, $force_hash, $link_params );\n\t\t\tif( empty( $link ) )\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$count++;\n\t\t\tif( $count>1 )\n\t\t\t{\n\t\t\t\techo $item_separator;\n\t\t\t}\n\t\t\techo $item_start.$link.$item_end;\n\n\t\t\tif( !is_null($max_items) && $count >= $max_items )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\techo $list_end;\n\t}\n}\n\n\n/**\n * Credits stuff.\n */\nfunction display_param_link( $params )\n{\n\techo resolve_link_params( $params );\n}\n\n\n/**\n * Resolve a link based on params (credits stuff)\n *\n * @param array\n * @param integer\n * @param array\n * @return string\n */\nfunction resolve_link_params( $item, $force_hash = NULL, $params = array() )\n{\n\tglobal $current_locale;\n\n\t// echo 'resolve link ';\n\n\tif( is_array( $item ) )\n\t{\n\t\tif( isset( $item[0] ) )\n\t\t{\t// Older format, which displays the same thing for all locales:\n\t\t\treturn generate_link_from_params( $item, $params );\n\t\t}\n\t\telse\n\t\t{\t// First get the right locale:\n\t\t\t// echo $current_locale;\n\t\t\tforeach( $item as $l_locale => $loc_item )\n\t\t\t{\n\t\t\t\tif( $l_locale == substr( $current_locale, 0, strlen($l_locale) ) )\n\t\t\t\t{\t// We found a matching locale:\n\t\t\t\t\t//echo \"[$l_locale/$current_locale]\";\n\t\t\t\t\tif( is_array( $loc_item[0] ) )\n\t\t\t\t\t{\t// Randomize:\n\t\t\t\t\t\t$loc_item = hash_link_params( $loc_item, $force_hash );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn generate_link_from_params( $loc_item, $params );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// No match found!\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t// Super old format:\n\treturn $item;\n}\n\n\n/**\n * Get a link line, based url hash combined with probability percentage in first column\n *\n * @param array of arrays\n * @param display for a specific hash key\n */\nfunction hash_link_params( $link_array, $force_hash = NULL )\n{\n\tglobal $ReqHost, $ReqPath, $ReqURI;\n\n\tstatic $hash;\n\n\tif( !is_null($force_hash) )\n\t{\n\t\t$hash = $force_hash;\n\t}\n\telseif( !isset($hash) )\n\t{\n\t\t$key = $ReqHost.$ReqPath;\n\n\t\tglobal $Blog;\n\t\tif( !empty($Blog) && strpos( $Blog->get_setting('single_links'), 'param_' ) === 0 )\n\t\t{\t// We are on a blog that doesn't even have clean URLs for posts\n\t\t\t$key .= $ReqURI;\n\t\t}\n\n\t\t$hash = 0;\n\t\tfor( $i=0; $i<strlen($key); $i++ )\n\t\t{\n\t\t\t$hash += ord($key[$i]);\n\t\t}\n\t\t$hash = $hash % 100 + 1;\n\n\t\t// $hash = rand( 1, 100 );\n\t\tglobal $debug, $Debuglog;\n\t\tif( $debug )\n\t\t{\n\t\t\t$Debuglog->add( 'Hash key: '.$hash, 'request' );\n\t\t}\n\t}\n\t//\techo \"[$hash] \";\n\n\tforeach( $link_array as $link_params )\n\t{\n\t\t// echo '<br>'.$hash.'-'.$link_params[ 0 ];\n\t\tif( $hash <= $link_params[ 0 ] )\n\t\t{\t// select this link!\n\t\t\t// pre_dump( $link_params );\n\t\t\tarray_shift( $link_params );\n\t\t\treturn $link_params;\n\t\t}\n\t}\n\t// somehow no match, return 1st element:\n\t$link_params = $link_array[0];\n\tarray_shift( $link_params );\n\treturn $link_params;\n}\n\n\n/**\n * Generate a link from params (credits stuff)\n *\n * @param array\n * @param array\n */\nfunction generate_link_from_params( $link_params, $params = array() )\n{\n\t$url = $link_params[0];\n\tif( empty( $url ) )\n\t{\n\t\treturn '';\n\t}\n\n\t// Make sure we are not missing any param:\n\t$params = array_merge( array(\n\t\t\t'type'        => 'link',\n\t\t\t'img_url'     => '',\n\t\t\t'img_width'   => '',\n\t\t\t'img_height'  => '',\n\t\t\t'title'       => '',\n\t\t\t'target'      => '_blank',\n\t\t), $params );\n\n\t$text = $link_params[1];\n\tif( is_array($text) )\n\t{\n\t\t$text = hash_link_params( $text );\n\t\t$text = $text[0];\n\t}\n\tif( empty( $text ) )\n\t{\n\t\treturn '';\n\t}\n\n\t$r = '<a href=\"'.$url.'\"';\n\n\tif( !empty($params['target'] ) )\n\t{\n\t\t$r .= ' target=\"'.$params['target'].'\"';\n\t}\n\n\tif( $params['type'] == 'img' )\n\t{\n\t\treturn $r.' title=\"'.$params['title'].'\"><img src=\"'.$params['img_url'].'\" alt=\"'\n\t\t\t\t\t\t.$text.'\" title=\"'.$params['title'].'\" width=\"'.$params['img_width'].'\" height=\"'.$params['img_height']\n\t\t\t\t\t\t.'\" border=\"0\" /></a>';\n\t}\n\n\treturn $r.'>'.$text.'</a>';\n}\n\n\n/**\n * Send a result as javascript\n * automatically includes any Messages ( @see Log::display() )\n * no return from function as it terminates processing\n *\n * @author Yabba\n *\n * @todo dh> Move this out into some more specific (not always included) file.\n *\n * @param array $methods javascript funtions to call with array of parameters\n *\t\tformat : 'function_name' => array( param1, parm2, param3 )\n * @param boolean $send_as_html Wrap the script into an html page with script tag; default is to send as js file\n * @param string $target prepended to function calls : blank or window.parent\n */\nfunction send_javascript_message( $methods = array(), $send_as_html = false, $target = '' )\n{\n\t// lets spit out any messages\n\tglobal $Messages, $param_input_err_messages;\n\tob_start();\n\t$Messages->display();\n\t$output = ob_get_clean();\n\n\t// Initialize JavaScript params to send what field should be marked are error\n\t$js_error_params = array();\n\tif( ! empty( $param_input_err_messages ) && is_array( $param_input_err_messages ) )\n\t{\n\t\tforeach( $param_input_err_messages as $param_name => $param_error )\n\t\t{\n\t\t\t$js_error_params[] = $param_name.': \\''.format_to_js( $param_error ).'\\'';\n\t\t}\n\t}\n\t$js_error_params = '{'.implode( ', ', $js_error_params ).'}';\n\n\t// set target\n\t$target = ( $target ? $target : param( 'js_target', 'string' ) );\n\tif( $target )\n\t{\t// add trailing [dot]\n\t\t$target = trim( $target, '.' ).'.';\n\t}\n\n\t// target should be empty or window.parent.\n\tif( $target && $target != 'window.parent.' )\n\t{\n\t\tdebug_die( 'Unexpected javascript target' );\n\t}\n\n\tif( $output )\n\t{\t// we have some messages\n\t\t$output = $target.'DisplayServerMessages( \\''.format_to_js( $output ).'\\', '.$js_error_params.' );'.\"\\n\";\n\t}\n\n\tif( !empty( $methods ) )\n\t{\t// we have a methods to call\n\t\tforeach( $methods as $method => $param_list )\n\t\t{\t// loop through each requested method\n\t\t\t$params = array();\n\t\t\tif( !is_array( $param_list ) )\n\t\t\t{\t// lets make it an array\n\t\t\t\t$param_list = array( $param_list );\n\t\t\t}\n\t\t\tforeach( $param_list as $param )\n\t\t\t{\t// add each parameter to the output\n\t\t\t\tif( is_array( $param ) )\n\t\t\t\t{\t// This is an array:\n\t\t\t\t\t$param = json_encode( $param );\n\t\t\t\t}\n\t\t\t\telseif( !is_numeric( $param ) )\n\t\t\t\t{\t// this is a string, quote it:\n\t\t\t\t\t$param = '\\''.format_to_js( $param ).'\\'';\n\t\t\t\t}\n\t\t\t\t$params[] = $param;// add param to the list\n\t\t\t}\n\t\t\t// add method and parameters\n\t\t\t$output .= $target.$method.'('.implode( ',', $params ).');'.\"\\n\";\n\t\t}\n\t}\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $send_as_html )\n\t{\t// we want to send as a html document\n\t\tif( ! headers_sent() )\n\t\t{\t// Send headers only when they are not send yet to avoid an error:\n\t\t\theaders_content_mightcache( 'text/html', 0 );\t\t// Do NOT cache interactive communications.\n\t\t}\n\t\techo '<html><head></head><body><script type=\"text/javascript\">'.\"\\n\";\n\t\techo $output;\n\t\techo '</script></body></html>';\n\t}\n\telse\n\t{\t// we want to send as js\n\t\tif( ! headers_sent() )\n\t\t{\t// Send headers only when they are not send yet to avoid an error:\n\t\t\theaders_content_mightcache( 'text/javascript', 0 );\t\t// Do NOT cache interactive communications.\n\t\t}\n\t\techo $output;\n\t}\n\n\texit(0);\n}\n\n\n/**\n * Basic tidy up of strings\n *\n * @author Yabba\n * @author Tblue\n *\n * @param string $unformatted raw data\n * @return string formatted data\n */\nfunction format_to_js( $unformatted )\n{\n\treturn str_replace( array(\n\t\t\t\t\t\t\t'\\'',\n\t\t\t\t\t\t\t'\\n',\n\t\t\t\t\t\t\t'\\r',\n\t\t\t\t\t\t\t'\\t',\n\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\"\\r\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'\\\\\\'',\n\t\t\t\t\t\t\t'\\\\\\\\n',\n\t\t\t\t\t\t\t'\\\\\\\\r',\n\t\t\t\t\t\t\t'\\\\\\\\t',\n\t\t\t\t\t\t\t'\\n',\n\t\t\t\t\t\t\t'\\r',\n\t\t\t\t\t\t), $unformatted );\n}\n\n\n/**\n * Get available cort oprions for items\n *\n * @return array key=>name\n */\nfunction get_available_sort_options()\n{\n\treturn array(\n\t\t'datestart'       => T_('Date issued (Default)'),\n\t\t'order'           => T_('Order (as explicitly specified)'),\n\t\t//'datedeadline' => T_('Deadline'),\n\t\t'title'           => T_('Title'),\n\t\t'datecreated'     => T_('Date created'),\n\t\t'datemodified'    => T_('Date last modified'),\n\t\t'last_touched_ts' => T_('Date last touched'),\n\t\t'urltitle'        => T_('URL \"filename\"'),\n\t\t'priority'        => T_('Priority'),\n\t\t'RAND'            => T_('Random order!'),\n\t);\n}\n\n\n/**\n * Get available cort oprions for blogs\n *\n * @return array key=>name\n */\nfunction get_coll_sort_options()\n{\n\treturn array(\n\t\t'order'        => T_('Order (Default)'),\n\t\t'ID'           => T_('Blog ID'),\n\t\t'name'         => T_('Name'),\n\t\t'shortname'    => T_('Short name'),\n\t\t'tagline'      => T_('Tagline'),\n\t\t'shortdesc'    => T_('Short Description'),\n\t\t'urlname'      => T_('URL \"filename\"'),\n\t\t'RAND'         => T_('Random order!'),\n\t);\n}\n\n\n/**\n * Converts array to form option list\n *\n * @param array of option values and descriptions\n * @param integer|array selected keys\n * @param array provide a choice for \"none_value\" with value ''\n * @return string\n */\nfunction array_to_option_list( $array, $default = '', $allow_none = array() )\n{\n\tif( !is_array( $default ) )\n\t{\n\t\t$default = array( $default );\n\t}\n\n\t$r = '';\n\n\tif( !empty($allow_none) )\n\t{\n\t\t$r .= '<option value=\"'.$allow_none['none_value'].'\"';\n\t\tif( empty($default) ) $r .= ' selected=\"selected\"';\n\t\t$r .= '>'.format_to_output($allow_none['none_text']).'</option>'.\"\\n\";\n\t}\n\n\tforeach( $array as $k=>$v )\n\t{\n\t\t$r .=  '<option value=\"'.format_to_output($k,'formvalue').'\"';\n\t\tif( in_array( $k, $default ) ) $r .= ' selected=\"selected\"';\n\t\t$r .= '>';\n\t\t$r .= format_to_output( $v, 'htmlbody' );\n\t\t$r .=  '</option>'.\"\\n\";\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Get a value from a volatile/lossy cache.\n *\n * @param string key\n * @param boolean success (by reference)\n * @return mixed True in case of success, false in case of failure. NULL, if no backend is available.\n */\nfunction get_from_mem_cache( $key, & $success )\n{\n\tglobal $Timer;\n\n\t$Timer->resume( 'get_from_mem_cache', false );\n\n\tif( function_exists( 'apc_fetch' ) )\n\t{\t// APC\n\t\t$r = apc_fetch( $key, $success );\n\t}\n\telseif( function_exists( 'xcache_get' ) && ini_get( 'xcache.var_size' ) > 0 )\n\t{\t// XCache\n\t\t$r = xcache_get( $key );\n\t}\n\telseif( function_exists( 'apcu_fetch' ) )\n\t{\t// APCu\n\t\t$r = apcu_fetch( $key, $success );\n\t}\n\n\tif( ! isset($success) )\n\t{ // set $success for implementation that do not set it itself (only APC does so)\n\t\t$success = isset($r);\n\t}\n\tif( ! $success )\n\t{\n\t\t$r = NULL;\n\n\t\tglobal $Debuglog;\n\t\t$Debuglog->add( 'No caching backend available for reading \"'.$key.'\".', 'cache' );\n\t}\n\n\t$Timer->pause( 'get_from_mem_cache', false );\n\n\treturn $r;\n}\n\n\n/**\n * Set a value to a volatile/lossy cache.\n *\n * There's no guarantee that the data is still available, since e.g. old\n * values might get purged.\n *\n * @param string key\n * @param mixed Data. Objects would have to be serialized.\n * @param int Time to live (seconds). Default is 0 and means \"forever\".\n * @return mixed\n */\nfunction set_to_mem_cache( $key, $payload, $ttl = 0 )\n{\n\tglobal $Timer;\n\n\t$Timer->resume( 'set_to_mem_cache', false );\n\n\tif( function_exists( 'apc_store' ) )\n\t{\t// APC\n\t\t$r = apc_store( $key, $payload, $ttl );\n\t}\n\telseif( function_exists( 'xcache_set' ) && ini_get( 'xcache.var_size' ) > 0 )\n\t{\t// XCache\n\t\t$r = xcache_set( $key, $payload, $ttl );\n\t}\n\telseif( function_exists( 'apcu_store' ) )\n\t{\t// APCu\n\t\t$r = apcu_store( $key, $payload, $ttl );\n\t}\n\telse\n\t{\t// No available cache module:\n\t\tglobal $Debuglog;\n\t\t$Debuglog->add( 'No caching backend available for writing \"'.$key.'\".', 'cache' );\n\t\t$r = NULL;\n\t}\n\n\t$Timer->pause( 'set_to_mem_cache', false );\n\n\treturn $r;\n}\n\n\n/**\n * Remove a given key from the volatile/lossy cache.\n *\n * @param string key\n * @return boolean True on success, false on failure. NULL if no backend available.\n */\nfunction unset_from_mem_cache( $key )\n{\n\tif( function_exists( 'apc_delete' ) )\n\t{\t// APC\n\t\treturn apc_delete( $key );\n\t}\n\n\tif( function_exists( 'xcache_unset' ) )\n\t{\t// XCache\n\t\treturn xcache_unset( gen_key_for_cache( $key ) );\n\t}\n\n\tif( function_exists( 'apcu_delete' ) )\n\t{\t// APCu\n\t\treturn apcu_delete( $key );\n\t}\n}\n\n\n/**\n * Generate order by clause\n *\n * @param string The order values are separated by space or comma\n * @param string An order direction: ASC, DESC\n * @param string DB prefix\n * @param string ID field name with prefix\n * @param array Names of DB fields(without prefix) that are available\n * @return string The order fields are separated by comma\n */\nfunction gen_order_clause( $order_by, $order_dir, $dbprefix, $dbIDname_disambiguation, $available_fields = NULL )\n{\n\t$order_by = str_replace( ' ', ',', $order_by );\n\t$orderby_array = explode( ',', $order_by );\n\n\t$order_dir = explode( ',', str_replace( ' ', ',', $order_dir ) );\n\n\tif( is_array( $available_fields ) )\n\t{ // Exclude the incorrect fields from order clause\n\t\tforeach( $orderby_array as $i => $orderby_field )\n\t\t{\n\t\t\tif( ! in_array( $orderby_field, $available_fields ) )\n\t\t\t{\n\t\t\t\tunset( $orderby_array[ $i ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Format each order param with default column names:\n\tforeach( $orderby_array as $i => $orderby_value )\n\t{ // If the order_by field contains a '.' character which is a table separator we must not use the prefix ( E.g. temp_table.value )\n\t\t$use_dbprefix = ( strpos( $orderby_value, '.' ) !== false ) ? '' : $dbprefix;\n\t\t$orderby_array[ $i ] = $use_dbprefix.$orderby_value.' '.( isset( $order_dir[ $i ] ) ? $order_dir[ $i ] : $order_dir[0] );\n\t}\n\n\t// Add an ID parameter to make sure there is no ambiguity in ordering on similar items:\n\t$orderby_array[] = $dbIDname_disambiguation.' '.$order_dir[0];\n\n\t$order_by = implode( ', ', $orderby_array );\n\n\t// Special case for RAND:\n\t$order_by = str_replace( $dbprefix.'RAND ', 'RAND() ', $order_by );\n\n\treturn $order_by;\n}\n\n\n/**\n * Get the IconLegend instance.\n *\n * @return IconLegend or false, if the user has not set \"display_icon_legend\"\n */\nfunction & get_IconLegend()\n{\n\tstatic $IconLegend;\n\n\tif( ! isset($IconLegend) )\n\t{\n\t\tglobal $UserSettings;\n\t\tif( $UserSettings->get('display_icon_legend') )\n\t\t{\n\t\t\t/**\n\t\t\t * Icon Legend\n\t\t\t */\n\t\t\tload_class( '_core/ui/_iconlegend.class.php', 'IconLegend' );\n\t\t\t$IconLegend = new IconLegend();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$IconLegend = false;\n\t\t}\n\t}\n\treturn $IconLegend;\n}\n\n\n/**\n * Get name of active opcode cache, or \"none\".\n * {@internal Anyone using something else, please extend.}}\n * @return string\n */\nfunction get_active_opcode_cache()\n{\n\tif( function_exists('apc_cache_info') && ini_get('apc.enabled') ) # disabled for CLI (see apc.enable_cli), however: just use this setting and do not call the function.\n\t{\n\t\t// fp>blueyed? why did you remove the following 2 lines? your comment above is not clear.\n\t\t$apc_info = apc_cache_info( '', true );\n\t\tif( isset( $apc_info['num_slots'] ) && ( $apc_info['num_slots'] ) )\n\t\t{\n\t\t\treturn 'APC';\n\t\t}\n\t}\n\n\t// xcache: xcache.var_size must be > 0. xcache_set is not necessary (might have been disabled).\n\tif( ini_get('xcache.size') > 0 )\n\t{\n\t\treturn 'xcache';\n\t}\n\n\tif( ini_get('eaccelerator.enable') )\n\t{\n\t\t$eac_info = eaccelerator_info();\n\t\tif( $eac_info['cache'] )\n\t\t{\n\t\t\treturn 'eAccelerator';\n\t\t}\n\t}\n\n\tif( ini_get( 'opcache.enable' ) )\n\t{\n\t\treturn 'OPCache';\n\t}\n\n\tif( function_exists( 'apc_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APC';\n\t}\n\n\treturn 'none';\n}\n\n\n/**\n * Get name of active user cache, or \"none\".\n * {@internal Anyone using something else, please extend.}}\n * @return string\n */\nfunction get_active_user_cache()\n{\n\tif( function_exists( 'apcu_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APCu';\n\t}\n\n\tif( function_exists( 'apc_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APC';\n\t}\n\n\t// xcache: xcache.var_size must be > 0. xcache_set is not necessary (might have been disabled).\n\tif( ini_get('xcache.size') > 0 )\n\t{\n\t\treturn 'xcache';\n\t}\n\n\treturn 'none';\n}\n\n\n/**\n * Invalidate all page caches.\n * This function should be processed every time, when some users or global settings was modified,\n * and this modification has an imortant influence for the front office display.\n * Modifications that requires to invalidate all page caches:\n *   - installing/removing/reloading/enabling/disabling plugins\n *   - editing user settings like allow profile pics, new users can register, user settings>display\n */\nfunction invalidate_pagecaches()\n{\n\tglobal $DB, $Settings, $servertimenow;\n\n\t// get current server time\n\t$timestamp = ( empty( $servertimenow ) ? time() : $servertimenow );\n\n\t// get all blog ids\n\tif( $blog_ids = $DB->get_col( 'SELECT blog_ID FROM T_blogs' ) )\n\t{\t// build invalidate query\n\t\t$query = 'REPLACE INTO T_coll_settings ( cset_coll_ID, cset_name, cset_value ) VALUES';\n\t\tforeach( $blog_ids as $blog_id )\n\t\t{\n\t\t\t$query .= ' ('.$blog_id.', \"last_invalidation_timestamp\", '.$timestamp.' ),';\n\t\t}\n\t\t$query = substr( $query, 0, strlen( $query ) - 1 );\n\t\t$DB->query( $query, 'Invalidate blogs\\'s page caches' );\n\t}\n\n\t// Invalidate general cache content also\n\t$Settings->set( 'last_invalidation_timestamp', $timestamp );\n\t$Settings->dbupdate();\n}\n\n\n/**\n* Get $ReqPath, $ReqURI\n*\n* @return array ($ReqPath,$ReqURI);\n*/\nfunction get_ReqURI()\n{\n\tglobal $Debuglog;\n\n\t// Investigation for following code by Isaac - http://isaacschlueter.com/\n\tif( isset($_SERVER['REQUEST_URI']) && !empty($_SERVER['REQUEST_URI']) )\n\t{ // Warning: on some IIS installs it it set but empty!\n\t\t$Debuglog->add( 'vars: vars: Getting ReqURI from REQUEST_URI', 'request' );\n\t\t$ReqURI = $_SERVER['REQUEST_URI'];\n\n\t\t// Build requested Path without query string:\n\t\t$pos = strpos( $ReqURI, '?' );\n\t\tif( false !== $pos )\n\t\t{\n\t\t\t$ReqPath = substr( $ReqURI, 0, $pos  );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ReqPath = $ReqURI;\n\t\t}\n\t}\n\telseif( isset($_SERVER['URL']) )\n\t{ // ISAPI\n\t\t$Debuglog->add( 'vars: Getting ReqPath from URL', 'request' );\n\t\t$ReqPath = $_SERVER['URL'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['PATH_INFO']) )\n\t{ // CGI/FastCGI\n\t\tif( isset($_SERVER['SCRIPT_NAME']) )\n\t\t{\n\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO and SCRIPT_NAME', 'request' );\n\n\t\t\tif ($_SERVER['SCRIPT_NAME'] == $_SERVER['PATH_INFO'] )\n\t\t\t{\t/* both the same so just use one of them\n\t\t\t\t * this happens on a windoze 2003 box\n\t\t\t\t * gotta love microdoft\n\t\t\t\t */\n\t\t\t\t$Debuglog->add( 'vars: PATH_INFO and SCRIPT_NAME are the same', 'request' );\n\t\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO only instead', 'request' );\n\t\t\t\t$ReqPath = $_SERVER['PATH_INFO'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ReqPath = $_SERVER['SCRIPT_NAME'].$_SERVER['PATH_INFO'];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{ // does this happen??\n\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO only!', 'request' );\n\n\t\t\t$ReqPath = $_SERVER['PATH_INFO'];\n\t\t}\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['ORIG_PATH_INFO']) )\n\t{ // Tomcat 5.5.x with Herbelin PHP servlet and PHP 5.1\n\t\t$Debuglog->add( 'vars: Getting ReqPath from ORIG_PATH_INFO', 'request' );\n\t\t$ReqPath = $_SERVER['ORIG_PATH_INFO'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['SCRIPT_NAME']) )\n\t{ // Some Odd Win2k Stuff\n\t\t$Debuglog->add( 'vars: Getting ReqPath from SCRIPT_NAME', 'request' );\n\t\t$ReqPath = $_SERVER['SCRIPT_NAME'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['PHP_SELF']) )\n\t{ // The Old Stand-By\n\t\t$Debuglog->add( 'vars: Getting ReqPath from PHP_SELF', 'request' );\n\t\t$ReqPath = $_SERVER['PHP_SELF'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telse\n\t{\n\t\t$ReqPath = false;\n\t\t$ReqURI = false;\n\t\t?>\n\t\t<p class=\"error\">\n\t\tWarning: $ReqPath could not be set. Probably an odd IIS problem.\n\t\t</p>\n\t\t<p>\n\t\tGo to your <a href=\"<?php echo $baseurl.$install_subdir ?>phpinfo.php\">phpinfo page</a>,\n\t\tlook for occurences of <code><?php\n\t\t// take the baseurlroot out..\n\t\techo preg_replace('#^'.preg_quote( $baseurlroot, '#' ).'#', '', $baseurl.$install_subdir )\n\t\t?>phpinfo.php</code> and copy all lines\n\t\tcontaining this to the <a href=\"http://forums.b2evolution.net\">forum</a>. Also specify what webserver\n\t\tyou're running on.\n\t\t<br />\n\t\t(If you have deleted your install folder &ndash; what is recommended after successful setup &ndash;\n\t\tyou have to upload it again before doing this).\n\t\t</p>\n\t\t<?php\n\t}\n\n\treturn array($ReqPath,$ReqURI);\n}\n\n\n/**\n * Get URL to REST API script depending on current collection base url from front-office or site base url from back-office\n *\n * Note: For back-office or no collection page _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @return string URL to htsrv folder\n */\nfunction get_restapi_url()\n{\n\tglobal $restapi_script;\n\n\treturn get_htsrv_url().$restapi_script;\n}\n\n\n/**\n * Get URL to htsrv folder depending on current collection base url from front-office or site base url from back-office\n *\n * Note: For back-office or no collection page _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @param boolean TRUE to use https URL\n * @return string URL to htsrv folder\n */\nfunction get_htsrv_url( $force_https = false )\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// For back-office or when no collection page:\n\t\treturn get_samedomain_htsrv_url( $force_https );\n\t}\n\telse\n\t{\t// For current collection:\n\t\treturn $Blog->get_htsrv_url( $force_https );\n\t}\n}\n\n\n/**\n * Get htsrv url on the same domain as the http request came from\n *\n * Note: _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @param boolean TRUE to use https URL\n * @return string URL to htsrv folder\n */\nfunction get_samedomain_htsrv_url( $secure = false )\n{\n\tglobal $ReqHost, $ReqPath, $htsrv_url, $htsrv_url_sensitive, $htsrv_subdir, $Blog;\n\n\tif( $secure )\n\t{\n\t\t$req_htsrv_url = $htsrv_url_sensitive;\n\t}\n\telse\n\t{\n\t\t$req_htsrv_url = $htsrv_url;\n\t}\n\n\t// Cut htsrv folder from end of the URL:\n\t$req_htsrv_url = substr( $req_htsrv_url, 0, strlen( $req_htsrv_url ) - strlen( $htsrv_subdir ) );\n\n\tif( strpos( $ReqHost.$ReqPath, $req_htsrv_url ) !== false )\n\t{\t// If current request path contains the required htsrv URL:\n\t\treturn $req_htsrv_url.$htsrv_subdir;\n\t}\n\n\t$req_url_parts = @parse_url( $ReqHost );\n\t$hsrv_url_parts = @parse_url( $req_htsrv_url );\n\tif( ( !isset( $req_url_parts['host'] ) ) || ( !isset( $hsrv_url_parts['host'] ) ) )\n\t{\n\t\tdebug_die( 'Invalid hosts!' );\n\t}\n\n\t$req_domain = $req_url_parts['host'];\n\t$htsrv_domain = $hsrv_url_parts['host'];\n\n\t// Replace domain + path of htsrv URL with current request:\n\t$samedomain_htsrv_url = substr_replace( $req_htsrv_url, $req_domain, strpos( $req_htsrv_url, $htsrv_domain ), strlen( $htsrv_domain ) );\n\n\t// Revert htsrv folder to end of the URL which has been cut above:\n\t$samedomain_htsrv_url .= $htsrv_subdir;\n\n\t// fp> The following check would apply well if we always had 301 redirects.\n\t// But it's possible to turn them off in SEO settings for some page and not others (we don't know which here)\n  // And some kinds of pages do not have 301 redirections implemented yet, e-g: disp=users\n  /*\n\tif( ( !is_admin_page() ) && ( !empty( $Blog ) ) && ( $samedomain_htsrv_url != $Blog->get_htsrv_url( $secure ) ) )\n\t{\n\t\tdebug_die( 'The blog is configured to have /htsrv/ at:<br> '.$Blog->get_htsrv_url( $secure ).'<br>but in order to stay on the current domain, we would need to use:<br>'.$samedomain_htsrv_url.'<br>Maybe we have a missing redirection to the proper blog url?' );\n\t}\n\t*/\n\n\treturn $samedomain_htsrv_url;\n}\n\n\n/**\n * Get secure htsrv url on the same domain as the http request came from\n * It is important on login and register calls\n * _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n */\nfunction get_secure_htsrv_url()\n{\n\treturn get_samedomain_htsrv_url( true );\n}\n\n\n/**\n * Set max execution time\n *\n * @param integer seconds\n * @return string the old value on success, false on failure.\n */\nfunction set_max_execution_time( $seconds )\n{\n\tif( function_exists( 'set_time_limit' ) )\n\t{\n\t\tset_time_limit( $seconds );\n\t}\n\treturn @ini_set( 'max_execution_time', $seconds );\n}\n\n\n/**\n * Sanitize a comma-separated list of numbers (IDs)\n *\n * @param string\n * @param bool Return array if true, string otherwise\n * @param bool Quote each element (for use in SQL queries)\n * @return string\n */\nfunction sanitize_id_list( $str, $return_array = false, $quote = false )\n{\n\tif( is_null($str) )\n\t{\t// Allow NULL values\n\t\t$str = '';\n\t}\n\n\t// Explode and trim\n\t$array = array_map( 'trim', explode(',', $str) );\n\n\t// Convert to integer and remove all empty values\n\t$array = array_filter( array_map('intval', $array) );\n\n\tif( !$return_array && $quote )\n\t{\t// Quote each element and return a string\n\t\tglobal $DB;\n\t\treturn $DB->quote($array);\n\t}\n\treturn ( $return_array ? $array : implode(',', $array) );\n}\n\n\n/**\n * Create json_encode function if it does not exist ( PHP < 5.2.0 )\n *\n * @return string\n */\nif ( !function_exists( 'json_encode' ) )\n{\n\tfunction json_encode( $a = false )\n\t{\n\t\tif( is_null( $a ) )\n\t\t{\n\t\t\treturn 'null';\n\t\t}\n\t\tif( $a === false )\n\t\t{\n\t\t\treturn 'false';\n\t\t}\n\t\tif( $a === true )\n\t\t{\n\t\t\treturn 'true';\n\t\t}\n\t\tif( is_scalar( $a ) )\n\t\t{\n\t\t\tif( is_float( $a ) )\n\t\t\t{ // Always use \".\" for floats.\n\t\t\t\treturn floatval( str_replace( \",\", \".\", strval( $a ) ) );\n\t\t\t}\n\n\t\t\tif( is_string( $a ) )\n\t\t\t{\n\t\t\t\t$jsonReplaces = array( array( \"\\\\\", \"/\", \"\\n\", \"\\t\", \"\\r\", \"\\b\", \"\\f\", '\"' ), array( '\\\\\\\\', '\\\\/', '\\\\n', '\\\\t', '\\\\r', '\\\\b', '\\\\f', '\\\"' ) );\n\t\t\t\treturn '\"'.str_replace( $jsonReplaces[0], $jsonReplaces[1], $a ).'\"';\n\t\t\t}\n\n\t\t\treturn $a;\n\t\t}\n\t\t$isList = true;\n\t\tfor( $i = 0, reset($a); $i < count($a); $i++, next($a) )\n\t\t{\n\t\t\tif( key($a) !== $i )\n\t\t\t{\n\t\t\t\t$isList = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$result = array();\n\t\tif( $isList )\n\t\t{\n\t\t\tforeach( $a as $v )\n\t\t\t{\n\t\t\t\t$result[] = json_encode($v);\n\t\t\t}\n\t\t\treturn '['.join( ',', $result ).']';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach( $a as $k => $v )\n\t\t\t{\n\t\t\t\t$result[] = json_encode($k).':'.json_encode($v);\n\t\t\t}\n\t\t\treturn '{'.join( ',', $result ).'}';\n\t\t}\n\t}\n}\n\n\n/**\n * A wrapper for json_encode function\n * We need to pass valid UTF-8 string to json_encode, otherwise it may return NULL\n *\n * @param mixed\n * @return string\n */\nfunction evo_json_encode( $a = false )\n{\n\tif( is_string( $a ) )\n\t{ // Convert to UTF-8\n\t\t$a = current_charset_to_utf8( $a );\n\t}\n\telseif( is_array( $a ) )\n\t{ // Recursively convert to UTF-8\n\t\tarray_walk_recursive( $a, 'current_charset_to_utf8' );\n\t}\n\n\t$result = json_encode( $a );\n\tif( $result === false )\n\t{ // If json_encode returns FALSE because of some error we should set correct json empty value as '[]' instead of false\n\t\t$result = '[]';\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * A helper function to conditionally convert a string from current charset to UTF-8\n *\n * @param string\n * @return string\n */\nfunction current_charset_to_utf8( & $a )\n{\n\tglobal $current_charset;\n\n\tif( is_string( $a ) && $current_charset != '' && $current_charset != 'utf-8' )\n\t{ // Convert string to utf-8 if it has another charset\n\t\t$a = convert_charset( $a, 'utf-8', $current_charset );\n\t}\n\n\treturn $a;\n}\n\n\nif( !function_exists( 'property_exists' ) )\n{\n\t/**\n\t * Create property_exists function if it does not exist ( PHP < 5.1 )\n\t * @param object\n\t * @param string\n\t *\n\t * @return bool\n\t */\n\tfunction property_exists( $class, $property )\n\t{\n\t\tif( is_object( $class ) )\n\t\t{\n\t\t\t$vars = get_object_vars( $class );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$vars = get_class_vars( $class );\n\t\t}\n\t\treturn array_key_exists( $property, $vars );\n\t}\n}\n\n\n// fp>vitaliy: move to a file that is not included everywhere!\n/**\n * Update global $http_response_code and call function header()\n *\n * NOTICE: When you start to use new code please add it to the hits filter \"HTTP resp\"\n *         in the file \"/inc/sessions/views/_stats_view.funcs.php\",\n *         function filter_hits(), array $resp_codes\n *\n * @param string Header\n * @param integer Header response code\n */\nfunction header_http_response( $string, $code = NULL )\n{\n\tglobal $http_response_code;\n\n\t$string = 'HTTP/1.1 '. $string;\n\n\tif( is_null( $code ) )\n\t{\n\t\tif( preg_match( '/(\\d{3})/', $string, $matches ) )\n\t\t{\n\t\t\t$http_response_code = (int)$matches[0];\n\t\t}\n\t}\n\telse\n\t{\n\t\t$http_response_code = $code;\n\t}\n\n\theader( $string );\n}\n\n\n/**\n * Add a trailing slash, if none present\n *\n * @param string the path/url\n * @return string the path/url with trailing slash\n */\nfunction trailing_slash( $path )\n{\n\tif( empty($path) || utf8_substr( $path, -1 ) == '/' )\n\t{\n\t\treturn $path;\n\t}\n\telse\n\t{\n\t\treturn $path.'/';\n\t}\n}\n\n\n/**\n * Remove trailing slash, if present\n *\n * @param string the path/url\n * @return string the path/url without trailing slash\n */\nfunction no_trailing_slash( $path )\n{\n\tif( utf8_substr( $path, -1 ) == '/' )\n\t{\n\t\treturn utf8_substr( $path, 0, utf8_strlen( $path )-1 );\n\t}\n\telse\n\t{\n\t\treturn $path;\n\t}\n}\n\n\n/**\n * Provide sys_get_temp_dir for older versions of PHP (< 5.2.1)\n *\n * @return string path to system temporary directory\n */\nif( !function_exists( 'sys_get_temp_dir' ) )\n{\n\tfunction sys_get_temp_dir()\n\t{\n\t\t// Try to get from environment variable\n\t\tif( !empty($_ENV['TMP']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TMP'] );\n\t\t}\n\t\telseif( !empty($_ENV['TMPDIR']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TMPDIR'] );\n\t\t}\n\t\telseif( !empty($_ENV['TEMP']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TEMP'] );\n\t\t}\n\t\telse\n\t\t{\t// Detect by creating a temporary file\n\n\t\t\t// Try to use system's temporary directory as random name shouldn't exist\n\t\t\t$temp_file = tempnam( sha1(uniqid(rand()), true), '' );\n\t\t\tif( $temp_file )\n\t\t\t{\n\t\t\t\t$temp_dir = realpath( dirname($temp_file) );\n\t\t\t\tunlink($temp_file);\n\t\t\t\treturn $temp_dir;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Provide inet_pton for older versions of PHP (< 5.1.0 linux & < 5.3.0 windows)\n *\n * Converts a human readable IP address to its packed in_addr representation\n * @param string A human readable IPv4 or IPv6 address\n * @return string The in_addr representation of the given address, or FALSE if a syntactically invalid address is given (for example, an IPv4 address without dots or an IPv6 address without colons\n */\nif( !function_exists( 'inet_pton' ) )\n{\n\tfunction inet_pton( $ip )\n\t{\n\t\tif( strpos( $ip, '.' ) !== FALSE )\n\t\t{\t// IPv4\n\t\t\t$ip = pack( 'N', ip2long( $ip ) );\n\t\t}\n\t\telseif( strpos( $ip, ':' ) !== FALSE )\n\t\t{\t// IPv6\n\t\t\t$ip = explode( ':', $ip );\n\t\t\t$res = str_pad( '', ( 4 * ( 8 - count( $ip ) ) ), '0000', STR_PAD_LEFT );\n\t\t\tforeach( $ip as $seg )\n\t\t\t{\n\t\t\t\t$res .= str_pad( $seg, 4, '0', STR_PAD_LEFT );\n\t\t\t}\n\t\t\t$ip = pack( 'H'.strlen( $res ), $res );\n\t\t}\n\t\telse\n\t\t{\t// Invalid IP address\n\t\t\t$ip = FALSE;\n\t\t}\n\n\t\treturn $ip;\n\t}\n}\n\n\n/**\n * Convert integer to IP address\n *\n * @param integer Number\n * @return string IP address\n */\nfunction int2ip( $int )\n{\n\t$ip = array();\n\t$ip[0] = (int) ( $int / 256 / 256 / 256 );\n\t$ip[1] = (int) ( ( $int - ( $ip[0] * 256 * 256 * 256 ) ) / 256 / 256 );\n\t$ip[2] = (int) ( ( $int - ( $ip[0] * 256 * 256 * 256 ) - ( $ip[1] * 256 * 256 ) ) / 256 );\n\t$ip[3] = $int - ( $ip[0] * 256 * 256 * 256 ) - ( $ip[1] * 256 * 256 ) - ( $ip[2] * 256 );\n\n\treturn $ip[0].'.'.$ip[1].'.'.$ip[2].'.'.$ip[3];\n}\n\n\n/**\n * Check if the given string is a valid IPv4 or IPv6 address value\n *\n * @param string IP\n * @return boolean true if valid, false otherwise\n */\nfunction is_valid_ip_format( $ip )\n{\n\treturn filter_var( $ip, FILTER_VALIDATE_IP ) !== false;\n}\n\n\n\n\n/**\n * Convert IP address to integer (get only 32bits of IPv6 address)\n *\n * @param string IP address\n * @return integer Number\n */\nfunction ip2int( $ip )\n{\n\tif( ! is_valid_ip_format( $ip ) )\n\t{ // IP format is incorrect\n\t\treturn 0;\n\t}\n\n\tif( $ip == '::1' )\n\t{\t// Reserved IP for localhost\n\t\t$ip = '127.0.0.1';\n\t}\n\n\t$parts = unpack( 'N*', inet_pton( $ip ) );\n\t// In case of IPv6 return only a parts of it\n\t$result = ( strpos( $ip, '.' ) !== false ) ? $parts[1] /* IPv4*/ : $parts[4] /* IPv6*/;\n\n\tif( $result < 0 )\n\t{ // convert unsigned int to signed from unpack.\n\t\t// this should be OK as it will be a PHP float not an int\n\t\t$result += 4294967296;\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Check if URL has a domain in IP format\n *\n * @param string URL\n * @return boolean\n */\nfunction is_ip_url_domain( $url )\n{\n\t$url_data = parse_url( $url );\n\n\tif( $url_data === false || ! isset( $url_data['host'] ) )\n\t{\t// Wrong url:\n\t\treturn false;\n\t}\n\n\t// Check if host is IP address:\n\treturn is_valid_ip_format( $url_data['host'] );\n}\n\n\n/**\n * Provide array_combine for older versions of PHP (< 5.0.0)\n *\n * Creates an array by using one array for keys and another for its values\n * @param array Keys\n * @param array Values\n * @return array Combined array, FALSE if the number of elements for each array isn't equal.\n */\nif( !function_exists( 'array_combine' ) )\n{\n\tfunction array_combine( $arr1, $arr2 )\n\t{\n\t\tif( count( $arr1 ) != count( $arr2 ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$out = array();\n\t\tforeach( $arr1 as $key1 => $value1 )\n\t\t{\n\t\t\t$out[$value1] = $arr2[$key1];\n\t\t}\n\t\treturn $out;\n\t}\n}\n\n\n/**\n * Provide array_combine for older versions of PHP (< 5.0.0)\n *\n * List of already/potentially sent HTTP responsee headers(),\n * CANNOT be implemented\n */\nif( !function_exists( 'headers_list' ) )\n{\n\tfunction headers_list()\n\t{\n\t\treturn array();\n\t}\n}\n\n\n/**\n * Provide array_fill_keys for older versions of PHP (< 5.2.0)\n *\n * Fills an array with the value of the value parameter, using the values of the keys array as keys.\n * @param array Keys\n * @param mixed Value\n * @return array Filled array\n */\nif( !function_exists( 'array_fill_keys' ) )\n{\n\tfunction array_fill_keys( $array, $value )\n\t{\n\t\t$filled_array = array();\n\t\tforeach( $array as $key )\n\t\t{\n\t\t\t$filled_array[$key] = $value;\n\t\t}\n\n\t\treturn $filled_array;\n\t}\n}\n\n\n/**\n * Provide htmlspecialchars_decode for older versions of PHP (< 5.1.0)\n *\n * Convert special HTML entities back to characters\n * @param string Text to decode\n * @return string The decoded text\n */\nif( !function_exists( 'htmlspecialchars_decode' ) )\n{\n\tfunction htmlspecialchars_decode( $text )\n\t{\n\t\treturn strtr( $text, array_flip( get_html_translation_table( HTML_SPECIALCHARS ) ) );\n\t}\n}\n\n\n/**\n * Provide array_walk_recursive for older versions of PHP (< 5.1.0)\n *\n * Apply a user function recursively to every member of an array\n * @param array The input array\n * @param string Funcname\n * @param string If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback funcname.\n * @return TRUE on success or FALSE on failure\n */\nif( !function_exists( 'array_walk_recursive' ) )\n{\n\tfunction array_walk_recursive( &$input, $funcname, $userdata = '' )\n\t{\n\t\tif( !is_callable( $funcname ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tif( !is_array( $input ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach( $input AS $key => $value )\n\t\t{\n\t\t\tif( is_array( $input[$key] ) )\n\t\t\t{\n\t\t\t\tarray_walk_recursive( $input[$key], $funcname, $userdata );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$saved_value = $value;\n\t\t\t\tif( !empty( $userdata ) )\n\t\t\t\t{\n\t\t\t\t\t$funcname( $value, $key, $userdata );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$funcname( $value, $key );\n\t\t\t\t}\n\n\t\t\t\tif( $value != $saved_value )\n\t\t\t\t{\n\t\t\t\t\t$input[$key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n\n/**\n * Save text data to file, create target file if it doesn't exist\n *\n * @param string data to be written\n * @param string filename (full path to a file)\n * @param string fopen mode\n */\nfunction save_to_file( $data, $filename, $mode = 'a' )\n{\n\tglobal $Settings;\n\n\tif( ! file_exists($filename) )\n\t{\t// Create target file\n\t\t@touch( $filename );\n\n\t\t// Doesn't work during installation\n\t\tif( !empty($Settings) )\n\t\t{\n\t\t\t$chmod = $Settings->get('fm_default_chmod_dir');\n\t\t\t@chmod( $filename, octdec($chmod) );\n\t\t}\n\t}\n\n\tif( ! is_writable($filename) )\n\t{\n\t\treturn false;\n\t}\n\n\t$f = @fopen( $filename, $mode );\n\t$ok = @fwrite( $f, $data );\n\t@fclose( $f );\n\n\tif( $ok && file_exists($filename) )\n\t{\n\t\treturn $filename;\n\t}\n\treturn false;\n}\n\n\n/**\n * Check if current request is AJAX\n * Used in order to get only content of the requested page\n *\n * @param string Template name\n * @return boolean TRUE/FALSE\n */\nfunction is_ajax_content( $template_name = '' )\n{\n\tglobal $ajax_content_mode;\n\n\t// Template names of content: @see skin_include()\n\t$content_templates = array( '$disp$', '_item_block.inc.php', '_item_content.inc.php' );\n\n\treturn !empty( $ajax_content_mode ) &&\n\t\t$ajax_content_mode === true &&\n\t\t!in_array( $template_name, $content_templates );\n}\n\n\n/**\n * Insert system log into DB\n *\n * @param string Message text\n * @param string Log type: 'info', 'warning', 'error', 'critical_error'\n * @param string Object type: 'comment', 'item', 'user', 'file' or leave default NULL if none of them\n * @param integer Object ID\n * @param string Origin type: 'core', 'plugin'\n * @param integer Origin ID\n * @param integer User ID\n */\nfunction syslog_insert( $message, $log_type, $object_type = NULL, $object_ID = NULL, $origin_type = 'core', $origin_ID = NULL, $user_ID = NULL )\n{\n\tglobal $servertimenow;\n\n\t$Syslog = new Syslog();\n\t$Syslog->set_user( $user_ID );\n\t$Syslog->set( 'type', $log_type );\n\t$Syslog->set_origin( $origin_type, $origin_ID );\n\t$Syslog->set_object( $object_type, $object_ID );\n\t$Syslog->set_message( $message );\n\t$Syslog->set( 'timestamp', date2mysql( $servertimenow ) );\n\t$Syslog->dbinsert();\n}\n\n\n/**\n * Get a param to know where script is calling now, Used for JS functions\n *\n * @return string\n */\nfunction request_from()\n{\n\tglobal $request_from;\n\n\tif( !empty( $request_from ) )\n\t{ // AJAX request\n\t\treturn $request_from;\n\t}\n\n\tif( is_admin_page() )\n\t{ // Backoffice\n\t\tglobal $ctrl;\n\t\treturn !empty( $ctrl ) ? $ctrl : 'admin';\n\t}\n\telse\n\t{ // Frontoffice\n\t\treturn 'front';\n\t}\n}\n\n\n/**\n * Get an error message text about file permissions\n */\nfunction get_file_permissions_message()\n{\n\treturn sprintf( T_( '(Please check UNIX file permissions on the parent folder. %s)' ), get_manual_link( 'file-permissions' ) );\n}\n\n\n/**\n * Flush the output buffer\n */\nfunction evo_flush()\n{\n\tglobal $Timer;\n\n\t$zlib_output_compression = ini_get( 'zlib.output_compression' );\n\tif( empty( $zlib_output_compression ) || $zlib_output_compression == 'Off' )\n\t{ // This function helps to turn off output buffering\n\t\t// But do NOT use it when zlib.output_compression is ON, because it creates the die errors\n\n\t\t// fp/yura TODO: we need to optimize this: We want to flush to screen and continue caching.\n\t\t//               This needs investigation and checking other similar places.\n\t\tglobal $PageCache;\n\t\tif( ! ( isset( $PageCache ) && ! empty( $PageCache->is_collecting ) ) )\n\t\t{ // Only when page cache is not running now because a notice error can appears in function PageCache->end_collect()\n\t\t\t@ob_end_flush();\n\t\t}\n\t}\n\tflush();\n\n\tif( isset( $Timer ) && $Timer->get_state( 'first_flush' ) == 'running' )\n\t{ // The first fulsh() was called, stop the timer\n\t\t$Timer->pause( 'first_flush' );\n\t}\n}\n\n// ---------- APM : Application Performance Monitoring -----------\n\n/**\n * Name the transaction for the APM.\n * This avoids that every request be called 'index.php' or 'admin.php' or 'cron_exec.php'\n *\n * @param mixed $request_transaction_name\n */\nfunction apm_name_transaction( $request_transaction_name )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_name_transaction( $request_transaction_name );\n\t}\n}\n\n/**\n * Log a custom metric\n *\n * @param mixed $name name of the custom metric\n * @param mixed $value assumed to be in milliseconds (ms)\n */\nfunction apm_log_custom_metric( $name, $value )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_custom_metric( 'Custom/'.$name, $value );\n\t}\n}\n\n/**\n * Log a custom param\n *\n * @param mixed $name name of the custom param\n * @param mixed $value of the custom param\n */\nfunction apm_log_custom_param( $name, $value )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_add_custom_parameter( $name, $value );\n\t}\n}\n\n\n/**\n * Get cookie domain depending on current page:\n *     - For back-office the config var $cookie_domain is used\n *     - For front-office it is dynamically generated from collection url\n *\n * @return string Cookie domain\n */\nfunction get_cookie_domain()\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// Use cookie domain of base url from config:\n\t\tglobal $cookie_domain;\n\t\treturn $cookie_domain;\n\t}\n\telse\n\t{\t// Use cookie domain of current collection url:\n\t\treturn $Blog->get_cookie_domain();\n\t}\n}\n\n\n/**\n * Get cookie path depending on current page:\n *     - For back-office the config var $cookie_path is used\n *     - For front-office it is dynamically generated from collection url\n *\n * @return string Cookie path\n */\nfunction get_cookie_path()\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// Use cookie path of base url from config:\n\t\tglobal $cookie_path;\n\t\treturn $cookie_path;\n\t}\n\telse\n\t{\t// Use base path of current collection url:\n\t\treturn $Blog->get_cookie_path();\n\t}\n}\n\n\n/**\n * Set a cookie to send it by evo_sendcookies()\n *\n * @param string The name of the cookie\n * @param string The value of the cookie\n * @param integer The time the cookie expires\n * @param string DEPRECATED: The path on the server in which the cookie will be available on\n * @param string DEPRECATED: The domain that the cookie is available\n * @param boolean Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client\n * @param boolean (Added in PHP 5.2.0) When TRUE the cookie will be made accessible only through the HTTP protocol\n */\nfunction evo_setcookie( $name, $value = '', $expire = 0, $dummy = '', $dummy2 = '', $secure = false, $httponly = false )\n{\n\tglobal $evo_cookies;\n\n\tif( ! is_array( $evo_cookies ) )\n\t{\t// Initialize array for cookies only first time:\n\t\t$evo_cookies = array();\n\t}\n\n\t// Store cookie in global var:\n\t$evo_cookies[ $name ] = array(\n\t\t\t'value'    => $value,\n\t\t\t'expire'   => $expire,\n\t\t\t'secure'   => $secure,\n\t\t\t'httponly' => $httponly,\n\t\t);\n}\n\n\n/**\n * Send the predefined cookies (@see setcookie() for more details)\n */\nfunction evo_sendcookies()\n{\n\tglobal $evo_cookies;\n\n\tif( headers_sent() )\n\t{\t// Exit to avoid errors because headers already were sent:\n\t\treturn;\n\t}\n\n\tif( empty( $evo_cookies ) )\n\t{\t// No cookies:\n\t\treturn;\n\t}\n\n\t$php_version_52 = version_compare( phpversion(), '5.2', '>=' );\n\n\t$current_cookie_domain = get_cookie_domain();\n\t$current_cookie_path = get_cookie_path();\n\n\tforeach( $evo_cookies as $evo_cookie_name => $evo_cookie )\n\t{\n\t\tif( $php_version_52 )\n\t\t{\t// Use HTTP-only setting since PHP 5.2.0:\n\t\t\tsetcookie( $evo_cookie_name, $evo_cookie['value'], $evo_cookie['expire'], $current_cookie_path, $current_cookie_domain, $evo_cookie['secure'], $evo_cookie['httponly'] );\n\t\t}\n\t\telse\n\t\t{\t// PHP < 5.2 doesn't support HTTP-only:\n\t\t\tsetcookie( $evo_cookie_name, $evo_cookie['value'], $evo_cookie['expire'], $current_cookie_path, $current_cookie_domain, $evo_cookie['secure'] );\n\t\t}\n\n\t\t// Unset to don't send cookie twice:\n\t\tunset( $evo_cookies[ $evo_cookie_name ] );\n\t}\n}\n\n\n/**\n * Echo JavaScript to edit values of column in the table list\n *\n * @param array Params\n */\nfunction echo_editable_column_js( $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'column_selector' => '', // jQuery selector of cell\n\t\t\t'ajax_url'        => '', // AJAX url to update a column value\n\t\t\t'options'         => array(), // Key = Value of option, Value = Title of option\n\t\t\t'new_field_name'  => '', // Name of _POST variable that will be send to ajax request with new value\n\t\t\t'ID_value'        => '', // jQuery to get value of ID\n\t\t\t'ID_name'         => '', // ID of field in DB\n\t\t\t'tooltip'         => TS_('Click to edit'),\n\t\t\t'colored_cells'   => false, // Use TRUE when colors are used for background of cell\n\t\t\t'print_init_tags' => true, // Use FALSE to don't print <script> tags if it is already used inside js\n\t\t\t'field_type'      => 'select', // Type of the editable field: 'select', 'text'\n\t\t\t'field_class'     => '', // Class of the editable field\n\t\t\t'null_text'       => '', // Null text of an input field, Use TS_() to translate it\n\t\t), $params );\n\n\t// Set onblur action to 'submit' when type is 'text' in order to don't miss the selected user login from autocomplete list\n\t$onblur_action = $params['field_type'] == 'text' ? 'submit' : 'cancel';\n\n\tif( $params['field_type'] == 'select' )\n\t{\n\t\t$options = '';\n\t\tforeach( $params['options'] as $option_value => $option_title )\n\t\t{\n\t\t\t$options .= '\\''.$option_value.'\\':\\''.$option_title.'\\','.\"\\n\";\n\t\t}\n\t}\n\n\tif( $params['print_init_tags'] )\n\t{\n?>\n<script type=\"text/javascript\">\njQuery( document ).ready( function()\n{\n<?php\n\t}\n?>\n\tjQuery( '<?php echo $params['column_selector']; ?>' ).editable( '<?php echo $params['ajax_url']; ?>',\n\t{\n\t\tdata: function( value, settings )\n\t\t{\n\t\t\tvalue = ajax_debug_clear( value );\n\t\t\t<?php if( $params['field_type'] == 'select' ) { ?>\n\t\t\tvar result = value.match( /rel=\"([^\"]*)\"/ );\n\t\t\treturn { <?php echo $options; ?>'selected' : result[1] }\n\t\t\t<?php } else { ?>\n\t\t\tvar result = value.match( />\\s*([^<]+)\\s*</ );\n\t\t\treturn result[1] == '<?php echo $params['null_text'] ?>' ? '' : result[1];\n\t\t\t<?php } ?>\n\t\t},\n\t\ttype       : '<?php echo $params['field_type']; ?>',\n\t\tclass_name : '<?php echo $params['field_class']; ?>',\n\t\tname       : '<?php echo $params['new_field_name']; ?>',\n\t\ttooltip    : '<?php echo $params['tooltip']; ?>',\n\t\tevent      : 'click',\n\t\tonblur     : '<?php echo $onblur_action; ?>',\n\t\tcallback   : function ( settings, original )\n\t\t{\n\t\t\t<?php\n\t\t\tif( $params['colored_cells'] )\n\t\t\t{ // Use different color for each value\n\t\t\t?>\n\t\t\tjQuery( this ).html( ajax_debug_clear( settings ) );\n\t\t\tvar link = jQuery( this ).find( 'a' );\n\t\t\tjQuery( this ).css( 'background-color', link.attr( 'color' ) == 'none' ? 'transparent' : link.attr( 'color' ) );\n\t\t\tlink.removeAttr( 'color' );\n\t\t\t<?php\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Use simple fade effect\n\t\t\t?>\n\t\t\tif( typeof( evoFadeSuccess ) == 'function' )\n\t\t\t{\n\t\t\t\tevoFadeSuccess( this );\n\t\t\t}\n\t\t\t<?php } ?>\n\t\t},\n\t\tonsubmit: function( settings, original ) {},\n\t\tsubmitdata : function( value, settings )\n\t\t{\n\t\t\treturn { <?php echo $params['ID_name']; ?>: <?php echo $params['ID_value']; ?> }\n\t\t},\n\t\tonerror : function( settings, original, xhr )\n\t\t{\n\t\t\tif( typeof( evoFadeFailure ) == 'function' )\n\t\t\t{\n\t\t\t\tevoFadeFailure( original );\n\t\t\t}\n\t\t\tvar input = jQuery( original ).find( 'input' );\n\t\t\tif( input.length > 0 )\n\t\t\t{\n\t\t\t\tjQuery( original ).find( 'span.field_error' ).remove();\n\t\t\t\tinput.addClass( 'field_error' );\n\t\t\t\tif( typeof( xhr.responseText ) != 'undefined' )\n\t\t\t\t{\n\t\t\t\t\tinput.after( '<span class=\"note field_error\">' + xhr.responseText + '</span>' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n<?php\n\tif( $params['print_init_tags'] )\n\t{\n?>\n} );\n</script>\n<?php\n\t}\n}\n\n\n/**\n * Get a button class name depending on template\n *\n * @param string Type: 'button', 'button_text', 'button_group'\n * @param string TRUE - to get class value for jQuery selector\n * @return string Class name\n */\nfunction button_class( $type = 'button', $jQuery_selector = false )\n{\n\t// Default class names\n\t$classes = array(\n\t\t\t'button'       => 'roundbutton', // Simple button with icon\n\t\t\t'button_red'   => 'roundbutton_red', // Button with red background\n\t\t\t'button_green' => 'roundbutton_green', // Button with green background\n\t\t\t'text'         => 'roundbutton_text', // Button with text\n\t\t\t'text_primary' => 'roundbutton_text', // Button with text with special style color\n\t\t\t'text_success' => 'roundbutton_text', // Button with text with special style color\n\t\t\t'text_danger'  => 'roundbutton_text', // Button with text with special style color\n\t\t\t'group'        => 'roundbutton_group', // Group of the buttons\n\t\t);\n\n\tif( is_admin_page() )\n\t{ // Some admin skins may have special class names\n\t\tglobal $AdminUI;\n\t\tif( ! empty( $AdminUI ) )\n\t\t{\n\t\t\t$template_classes = $AdminUI->get_template( 'button_classes' );\n\t\t}\n\t}\n\telse\n\t{ // Some front end skins may have special class names\n\t\tglobal $Skin;\n\t\tif( ! empty( $Skin ) )\n\t\t{\n\t\t\t$template_classes = $Skin->get_template( 'button_classes' );\n\t\t}\n\t}\n\tif( !empty( $template_classes ) )\n\t{ // Get class names from admin template\n\t\t$classes = array_merge( $classes, $template_classes );\n\t}\n\n\t$class_name = isset( $classes[ $type ] ) ? $classes[ $type ] : '';\n\n\tif( $jQuery_selector && ! empty( $class_name ) )\n\t{ // Convert class name to jQuery selector\n\t\t$class_name = '.'.str_replace( ' ', '.', $class_name );\n\t}\n\n\treturn $class_name;\n}\n\n\n/**\n * Initialize JavaScript to build and open window\n */\nfunction echo_modalwindow_js()\n{\n\tglobal $AdminUI, $Blog, $modal_window_js_initialized;\n\n\tif( ! empty( $modal_window_js_initialized ) )\n\t{ // Don't print out these functions twice\n\t\treturn;\n\t}\n\n\t// TODO: asimo> Should not use AdminUI templates for the openModalWindow function. The style part should be handled by css.\n\tif( is_admin_page() && isset( $AdminUI ) && $AdminUI->get_template( 'modal_window_js_func' ) !== false )\n\t{ // Use the modal functions from back-office skin\n\t\t$skin_modal_window_js_func = $AdminUI->get_template( 'modal_window_js_func' );\n\t}\n\telseif( ! is_admin_page() && ! empty( $Blog ) )\n\t{ // Use the modal functions from front-office skin\n\t\t$blog_skin_ID = $Blog->get_skin_ID();\n\t\t$SkinCache = & get_SkinCache();\n\t\t$Skin = & $SkinCache->get_by_ID( $blog_skin_ID, false, false );\n\t\tif( $Skin && $Skin->get_template( 'modal_window_js_func' ) !== false )\n\t\t{\n\t\t\t$skin_modal_window_js_func = $Skin->get_template( 'modal_window_js_func' );\n\t\t}\n\t}\n\n\tif( ! empty( $skin_modal_window_js_func ) && is_string( $skin_modal_window_js_func ) && function_exists( $skin_modal_window_js_func ) )\n\t{ // Call skin function only if it exists\n\t\tcall_user_func( $skin_modal_window_js_func );\n\t\t$modal_window_js_initialized = true;\n\t\treturn;\n\t}\n\n\t$modal_window_js_initialized = true;\n}\n\n/**\n * Initialize JavaScript to build and open window for bootstrap skins\n */\nfunction echo_modalwindow_js_bootstrap()\n{\n\t// Initialize variables for the file \"bootstrap-evo_modal_window.js\":\n\techo '<script type=\"text/javascript\">\n\t\tvar evo_js_lang_close = \\''.TS_('Close').'\\';\n\t</script>';\n}\n\n\n/**\n * Handle fatal error in order to display info message when debug is OFF\n */\nfunction evo_error_handler()\n{\n\tglobal $evo_last_handled_error;\n\n\t// Get last error\n\t$error = error_get_last();\n\n\tif( ! empty( $error ) && $error['type'] === E_ERROR )\n\t{ // Save only last fatal error\n\t\t$evo_last_handled_error = $error;\n\t}\n\n\t// fp> WTF?!? and what about warnings?\n\t// fp> And where do we die()? why is there not a debug_die() here?\n\t// There should be ONE MILLION COMMENTS in this function to explain what we do!\n\n}\n\n\n/**\n * Get icon to collapse/expand fieldset\n *\n * @param string ID of fieldset\n * @param array Params\n * @return string Icon with hidden input field\n */\nfunction get_fieldset_folding_icon( $id, $params = array() )\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n\t$params = array_merge( array(\n\t\t\t'before'    => '',\n\t\t\t'after'     => ' ',\n\t\t\t'deny_fold' => false, // TRUE to don't allow fold the block and keep it opened always on page loading\n\t\t), $params );\n\n\tif( $params['deny_fold'] )\n\t{ // Deny folding for this case\n\t\t$value = 0;\n\t}\n\telse\n\t{ // Get the fold value from user settings\n\t\tglobal $UserSettings, $Blog;\n\t\tif( empty( $Blog ) )\n\t\t{ // Get user setting value\n\t\t\t$value = intval( $UserSettings->get( 'fold_'.$id ) );\n\t\t}\n\t\telse\n\t\t{ // Get user-collection setting\n\t\t\t$value = intval( $UserSettings->get_collection_setting( 'fold_'.$id, $Blog->ID ) );\n\t\t}\n\t}\n\n\t// Icon\n\tif( $value )\n\t{\n\t\t$icon_current = 'filters_show';\n\t\t$icon_reverse = 'filters_hide';\n\t\t$title_reverse = T_('Collapse');\n\t}\n\telse\n\t{\n\t\t$icon_current = 'filters_hide';\n\t\t$icon_reverse = 'filters_show';\n\t\t$title_reverse = T_('Expand');\n\t}\n\t$icon = get_icon( $icon_current, 'imgtag', array(\n\t\t\t'id'         => 'icon_folding_'.$id,\n\t\t\t'data-xy'    => get_icon( $icon_reverse, 'xy' ),\n\t\t\t'data-title' => format_to_output( $title_reverse, 'htmlattr' ),\n\t\t) );\n\n\t// Hidden input to store current value of the folding status\n\t$hidden_input = '<input type=\"hidden\" name=\"folding_values['.$id.']\" id=\"folding_value_'.$id.'\" value=\"'.$value.'\" />';\n\n\treturn $hidden_input.$params['before'].$icon.$params['after'];\n}\n\n\n/**\n * Output JavaScript code to collapse/expand fieldset\n */\nfunction echo_fieldset_folding_js()\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n?>\n<script type=\"text/javascript\">\njQuery( 'span[id^=icon_folding_], span[id^=title_folding_]' ).click( function()\n{\n\tvar is_icon = jQuery( this ).attr( 'id' ).match( /^icon_folding_/ );\n\tvar wrapper_obj = jQuery( this ).closest( '.fieldset_wrapper' );\n\tvar value_obj = is_icon ? jQuery( this ).prev() : jQuery( this ).prev().prev();\n\n\tif( wrapper_obj.length == 0 || value_obj.length == 0 )\n\t{ // Invalid layout\n\t\treturn false;\n\t}\n\n\tif( value_obj.val() == '1' )\n\t{ // Collapse\n\t\twrapper_obj.removeClass( 'folded' );\n\t\tvalue_obj.val( '0' );\n\t}\n\telse\n\t{ // Expand\n\t\twrapper_obj.addClass( 'folded' );\n\t\tvalue_obj.val( '1' );\n\t}\n\n\t// Change icon image\n\tvar clickimg = is_icon ? jQuery( this ) : jQuery( this ).prev();\n\tif( clickimg.hasClass( 'fa' ) || clickimg.hasClass( 'glyphicon' ) )\n\t{ // Fontawesome icon | Glyph bootstrap icon\n\t\tif( clickimg.data( 'toggle' ) != '' )\n\t\t{ // This icon has a class name to toggle\n\t\t\tvar icon_prefix = ( clickimg.hasClass( 'fa' ) ? 'fa' : 'glyphicon' );\n\t\t\tif( clickimg.data( 'toggle-orig-class' ) == undefined )\n\t\t\t{ // Store original class name in data\n\t\t\t\tclickimg.data( 'toggle-orig-class', clickimg.attr( 'class' ).replace( new RegExp( '^'+icon_prefix+' (.+)$', 'g' ), '$1' ) );\n\t\t\t}\n\t\t\tif( clickimg.hasClass( clickimg.data( 'toggle-orig-class' ) ) )\n\t\t\t{ // Replace original class name with exnpanded\n\t\t\t\tclickimg.removeClass( clickimg.data( 'toggle-orig-class' ) )\n\t\t\t\t\t.addClass( icon_prefix + '-' + clickimg.data( 'toggle' ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Revert back original class\n\t\t\t\tclickimg.removeClass( icon_prefix + '-' + clickimg.data( 'toggle' ) )\n\t\t\t\t\t.addClass( clickimg.data( 'toggle-orig-class' ) );\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{ // Sprite icon\n\t\tvar icon_bg_pos = clickimg.css( 'background-position' );\n\t\tclickimg.css( 'background-position', clickimg.data( 'xy' ) );\n\t\tclickimg.data( 'xy', icon_bg_pos );\n\t}\n\n\t// Toggle title\n\tvar title = clickimg.attr( 'title' );\n\tclickimg.attr( 'title', clickimg.data( 'title' ) );\n\tclickimg.data( 'title', title );\n} );\n\njQuery( 'input[type=hidden][id^=folding_value_]' ).each( function()\n{ // Check each feildset is folded correctly after refresh a page\n\tvar wrapper_obj = jQuery( this ).closest( '.fieldset_wrapper' );\n\tif( jQuery( this ).val() == '1' )\n\t{ // Collapse\n\t\twrapper_obj.addClass( 'folded' );\n\t}\n\telse\n\t{ // Expand\n\t\twrapper_obj.removeClass( 'folded' );\n\t}\n} );\n\n// Expand all fieldsets that have the fields with error\njQuery( '.field_error' ).closest( '.fieldset_wrapper.folded' ).find( 'span[id^=icon_folding_]' ).click();\n</script>\n<?php\n}\n\n\n/**\n * Save the values of fieldset folding into DB\n *\n * @param integer Blog ID is used to save setting per blog, NULL- to don't save per blog\n */\nfunction save_fieldset_folding_values( $blog_ID = NULL )\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n\t$folding_values = param( 'folding_values', 'array:integer' );\n\n\tif( empty( $folding_values ) )\n\t{ // No folding values go from request, Exit here\n\t\treturn;\n\t}\n\n\tglobal $UserSettings;\n\n\tforeach( $folding_values as $key => $value )\n\t{\n\t\t$setting_name = 'fold_'.$key;\n\t\tif( $blog_ID !== NULL )\n\t\t{ // Save setting per blog\n\t\t\t$setting_name .= '_'.$blog_ID;\n\t\t}\n\t\t$UserSettings->set( $setting_name, $value );\n\t}\n\n\t// Update the folding setting for current user\n\t$UserSettings->dbupdate();\n}\n\n\n/**\n * Get html code of bootstrap dropdown element\n *\n * @param array Params\n */\nfunction get_status_dropdown_button( $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'name'             => '',\n\t\t\t'value'            => '',\n\t\t\t'title_format'     => '',\n\t\t\t'options'          => NULL,\n\t\t\t'exclude_statuses' => array( 'trash' ),\n\t\t), $params );\n\n\tif( $params['options'] === NULL )\n\t{\t// Get status options by title format:\n\t\t$status_options = get_visibility_statuses( $params['title_format'], $params['exclude_statuses'] );\n\t}\n\telse\n\t{\t// Use status options from params:\n\t\t$status_options = $params['options'];\n\t}\n\t$status_icon_options = get_visibility_statuses( 'icons', $params['exclude_statuses'] );\n\n\t$r = '<div class=\"btn-group dropdown autoselected\">';\n\t$r .= '<button type=\"button\" class=\"btn btn-status-'.$params['value'].' dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">'\n\t\t\t\t\t.'<span>'.$status_options[ $params['value'] ].'</span>'\n\t\t\t\t.' <span class=\"caret\"></span></button>';\n\t$r .= '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"'.$params['name'].'\">';\n\tforeach( $status_options as $status_key => $status_title )\n\t{\n\t\t$r .= '<li rel=\"'.$status_key.'\" role=\"presentation\"><a href=\"#\" role=\"menuitem\" tabindex=\"-1\">'.$status_icon_options[ $status_key ].' <span>'.$status_title.'</span></a></li>';\n\t}\n\t$r .= '</ul>';\n\t$r .= '</div>';\n\n\treturn $r;\n}\n\n/**\n * Output JavaScript code to work with dropdown bootstrap element\n */\nfunction echo_form_dropdown_js()\n{\n?>\n<script type=\"text/javascript\">\njQuery( '.btn-group.dropdown.autoselected li a' ).click( function()\n{\n\tvar item = jQuery( this ).parent();\n\tvar status = item.attr( 'rel' );\n\tvar button = jQuery( this ).parent().parent().prev();\n\tvar field_name = jQuery( this ).parent().parent().attr( 'aria-labelledby' );\n\n\t// Change status class name to new changed for all buttons:\n\tbutton.attr( 'class', button.attr( 'class' ).replace( /btn-status-[^\\s]+/, 'btn-status-' + status ) );\n\t// Update selector button to status title:\n\tbutton.find( 'span:first' ).html( item.find( 'span:last' ).html() );\n\t// Update hidden field to new status value:\n\tjQuery( 'input[type=hidden][name=' + field_name + ']' ).val( status );\n\t// Hide dropdown menu:\n\titem.parent().parent().removeClass( 'open' );\n\n\treturn false;\n} );\n</script>\n<?php\n}\n\n\n/**\n * Get baseurl depending on current called script\n *\n * @return string URL\n */\nfunction get_script_baseurl()\n{\n\tif( isset( $_SERVER['SERVER_NAME'] ) )\n\t{ // Set baseurl from current server name\n\n\t\t$temp_baseurl = 'http://'.$_SERVER['SERVER_NAME'];\n\n\t\tif( isset( $_SERVER['SERVER_PORT'] ) )\n\t\t{\n\t\t\tif( $_SERVER['SERVER_PORT'] == '443' )\n\t\t\t{\t// Rewrite that as hhtps:\n\t\t\t\t$temp_baseurl = 'https://'.$_SERVER['SERVER_NAME'];\n\t\t\t}\t// Add port name\n\t\t\telseif( $_SERVER['SERVER_PORT'] != '80' )\n\t\t\t{ // Get also a port number\n\t\t\t\t$temp_baseurl .= ':'.$_SERVER['SERVER_PORT'];\n\t\t\t}\n\t\t}\n\n\t\tif( isset( $_SERVER['SCRIPT_NAME'] ) )\n\t\t{ // Get also the subfolders, when script is called e.g. from http://localhost/blogs/b2evolution/\n\t\t\t$temp_baseurl .= preg_replace( '~(.*/)[^/]*$~', '$1', $_SERVER['SCRIPT_NAME'] );\n\t\t}\n\t}\n\telse\n\t{ // Use baseurl from config\n\t\tglobal $baseurl;\n\t\t$temp_baseurl = $baseurl;\n\t}\n\n\treturn $temp_baseurl;\n}\n\n\n/**\n * Get badge to inform the settings are edited only by collection/user admins\n *\n * @param string Type: 'coll', 'user'\n * @param string Manual URL, '#' - default, false - don't set URL\n * @param string Text\n * @param string Title\n * @param string Value\n * @return string\n */\nfunction get_admin_badge( $type = 'coll', $manual_url = '#', $text = '#', $title = '#', $value = NULL )\n{\n\t$badge_class = 'badge badge-warning';\n\n\tswitch( $type )\n\t{\n\t\tcase 'coll':\n\t\t\tif( $text == '#' )\n\t\t\t{\t// Use default text:\n\t\t\t\t$text = T_('Coll. Admin');\n\t\t\t}\n\t\t\tif( $title == '#' )\n\t\t\t{\t// Use default title:\n\t\t\t\t$title = T_('This can only be edited by users with the Collection Admin permission.');\n\t\t\t}\n\t\t\tif( $manual_url == '#' )\n\t\t\t{\t// Use default manual url:\n\t\t\t\t$manual_url = 'collection-admin';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'user':\n\t\t\tif( $text == '#' )\n\t\t\t{\t// Use default text:\n\t\t\t\t$text = T_('User Admin');\n\t\t\t}\n\t\t\tif( $title == '#' )\n\t\t\t{\t// Use default title:\n\t\t\t\t$title = T_('This can only be edited by users with the User Admin permission.');\n\t\t\t}\n\t\t\tif( $manual_url == '#' )\n\t\t\t{\t// Use default manual url:\n\t\t\t\t$manual_url = 'user-admin';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'group':\n\t\t\tif( $value == 'primary' )\n\t\t\t{\t// Use text for primary group:\n\t\t\t\t$text = T_('Primary');\n\t\t\t\t$badge_class = 'label label-primary';\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Use text for secondary group:\n\t\t\t\t$text = T_('Secondary');\n\t\t\t\t$badge_class = 'label label-info';\n\t\t\t}\n\t\t\t$title = '';\n\t\t\t$manual_url = '';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t// Unknown badge type:\n\t\t\treturn '';\n\t}\n\n\tif( empty( $manual_url ) )\n\t{\t// Don't use a link:\n\t\t$r = ' <b';\n\t}\n\telse\n\t{\t// Use link:\n\t\t$r = ' <a href=\"'.get_manual_url( $manual_url ).'\" target=\"_blank\"';\n\t}\n\t$r .= ' class=\"'.$badge_class.'\"';\n\tif( ! empty( $title ) && $title != '#' )\n\t{\t// Use title for tooltip:\n\t\t$r .= ' data-toggle=\"tooltip\" data-placement=\"top\" title=\"'.format_to_output( $title, 'htmlattr' ).'\"';\n\t}\n\t$r .= '>';\n\t$r .= $text;\n\tif( empty( $manual_url ) )\n\t{\t// End of text formatted badge:\n\t\t$r .= '</b>';\n\t}\n\telse\n\t{\t// End of the link:\n\t\t$r .= '</a>';\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Compares two \"PHP-standardized\" version number strings\n *\n * @param string First version number, Use 'current' for global $app_version\n * @param string Second version number\n * @param string If the third optional operator argument is specified, test for a particular relationship.\n *               The possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne respectively.\n *               This parameter is case-sensitive, values should be lowercase.\n * @return integer|boolean -1 if the first version is lower than the second, 0 if they are equal, and 1 if the second is lower.\n *                         When using the optional operator argument, the function will return TRUE if the relationship is the one specified by the operator, FALSE otherwise.\n */\nfunction evo_version_compare( $version1, $version2, $operator = NULL )\n{\n\tif( $version1 === 'current' )\n\t{\t// Use current version of application:\n\t\tglobal $app_version;\n\t\t$version1 = $app_version;\n\t}\n\n\t// Remove \"stable\" suffix to compare such versions as upper than \"alpha\", \"beta\" and etc.:\n\t$version1 = str_replace( '-stable', '', $version1 );\n\t$version2 = str_replace( '-stable', '', $version2 );\n\n\tif( is_null( $operator ) )\n\t{\t// To return integer:\n\t\treturn version_compare( $version1, $version2 );\n\t}\n\telse\n\t{\t// To return boolean:\n\t\treturn version_compare( $version1, $version2, $operator );\n\t}\n}\n\n\n/**\n * Get text for install page depending on param $display == 'cli'\n *\n * @param string Original text\n * @param string Format (Used for CLI mode)\n * @return string Prepared text\n */\nfunction get_install_format_text( $text, $format = 'string' )\n{\n\tglobal $display;\n\n\tif( empty( $display ) || $display != 'cli' )\n\t{\t// Don't touch text for non CLI modes:\n\t\treturn $text;\n\t}\n\n\t// Don't remove these HTML tags on CLI mode:\n\t$allowable_html_tags = '<evo:error><evo:warning><evo:success><evo:note><evo:login><evo:password>';\n\n\t// Remove all new lines because we build them from requested format:\n\t$text = str_replace( array( \"\\n\", \"\\r\" ), '', $text );\n\n\t// Keep all URLs and display them\n\t$text = preg_replace( '/<a[^>]+href=\"([^\"]+)\"[^>]*>(.+)<\\/a>/i', '$2(URL: $1)', $text );\n\n\t// Remove HTML tags from text:\n\t$text = strip_tags( $text, $allowable_html_tags );\n\n\tswitch( $format )\n\t{\n\t\tcase 'h2':\n\t\t\t// Header 2\n\t\t\t$text = \"\\n\\n----- \".$text.\" -----\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'br':\n\t\t\t// Paragraph:\n\t\t\t$text = $text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p':\n\t\t\t// Paragraph:\n\t\t\t$text = \"\\n\".$text.\"\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p-start':\n\t\t\t// Start paragraph:\n\t\t\t$text = \"\\n\".$text;\n\t\t\tbreak;\n\n\t\tcase 'p-start-br':\n\t\t\t// Start paragraph:\n\t\t\t$text = \"\\n\".$text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p-end':\n\t\t\t// End paragraph:\n\t\t\t$text = $text.\"\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'li':\n\t\t\t// List item:\n\t\t\t$text = \"\\n- \".$text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'code':\n\t\t\t// Code:\n\t\t\t$text = \"\\n================\\n\".$text.\"\\n================\\n\";\n\t\t\tbreak;\n\t}\n\n\t// Replace all html entities like \"&nbsp;\", \"&raquo;\", \"&laquo;\" to readable chars:\n\t$text = html_entity_decode( $text );\n\n\treturn $text;\n}\n\n\n/**\n * Check if password should be transmitted in hashed format during Login\n *\n * @return boolean TRUE - hashed password will be transmitted, FALSE - raw password will be transmitted\n */\nfunction can_use_hashed_password()\n{\n\tglobal $transmit_hashed_password;\n\n\tif( isset( $transmit_hashed_password ) )\n\t{\t// Get value from already defined var:\n\t\treturn $transmit_hashed_password;\n\t}\n\n\tglobal $Settings, $Plugins;\n\n\t// Allow to transmit hashed password only when:\n\t// - it is enabled by general setting \"Password hashing during Login\"\n\t// - no plugins that automatically disable this option during Login\n\t$transmit_hashed_password = (bool)$Settings->get( 'js_passwd_hashing' ) && !(bool)$Plugins->trigger_event_first_true( 'LoginAttemptNeedsRawPassword' );\n\n\treturn $transmit_hashed_password;\n}\n?>"], "fixing_code": ["<?php\n/**\n * Tests for miscellaneous functions.\n * @package tests\n */\n\n/**\n * SimpleTest config\n */\nrequire_once( dirname(__FILE__).'/../../config.simpletest.php' );\n\nglobal $inc_path;\n\nload_funcs('antispam/model/_antispam.funcs.php');\nload_funcs('_core/_url.funcs.php');\n\n\n/**\n * @package tests\n */\nclass MiscFuncsTestCase extends EvoUnitTestCase\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct( 'Miscellaneous functions test' );\n\t}\n\n\n\tfunction test_make_clickable()\n\t{\n\t\tforeach( array(\n\t\t\t\t'http://b2evolution.net' => '<a href=\"http://b2evolution.net\">http://b2evolution.net</a>',\n\t\t\t\t'http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747' => '<a href=\"http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747\">http://www.logitech.com/index.cfm/products/detailsharmony/US/EN,CRID=2084,CONTENTID=8747</a>',\n\t\t\t\t'Please look at http://this.com, and tell me what you think.' => 'Please look at <a href=\"http://this.com\">http://this.com</a>, and tell me what you think.',\n\t\t\t\t'https://paypal.com' => '<a href=\"https://paypal.com\">https://paypal.com</a>',\n\t\t\t\t'www.google.de' => '<a href=\"http://www.google.de\">www.google.de</a>',\n\t\t\t\t'www.google.de, and www.yahoo.com.' => '<a href=\"http://www.google.de\">www.google.de</a>, and <a href=\"http://www.yahoo.com\">www.yahoo.com</a>.',\n\t\t\t\t'See http://www.google.de.' => 'See <a href=\"http://www.google.de\">http://www.google.de</a>.',\n\t\t\t\t'See https://www.google.de, or www.yahoo.com/test?a=b,c=d.' => 'See <a href=\"https://www.google.de\">https://www.google.de</a>, or <a href=\"http://www.yahoo.com/test?a=b,c=d\">www.yahoo.com/test?a=b,c=d</a>.',\n\t\t\t\t'www. ' => 'www. ',\n\t\t\t\t'www.example.org' => '<a href=\"http://www.example.org\">www.example.org</a>',\n\n\t\t\t\t'http://user@somewhere.com' => '<a href=\"http://user@somewhere.com\">http://user@somewhere.com</a>',\n\t\t\t\t'<a href=\"http://setiathome.berkeley.edu\">SETI@Home</a>' => '<a href=\"http://setiathome.berkeley.edu\">SETI@Home</a>',\n\n\t\t\t\t'<a href=\"mailto:test@example.org\">test@example.org</a>' => '<a href=\"mailto:test@example.org\">test@example.org</a>',\n\t\t\t\t'<a href=\"mailto:test@example.org\">test@example.org</a>test2@example.org' => '<a href=\"mailto:test@example.org\">test@example.org</a><a href=\"mailto:test2@example.org\">test2@example.org</a>',\n\t\t\t\t'mailto://postmaster' => '<a href=\"mailto://postmaster\">mailto://postmaster</a>',\n\t\t\t\t// aim:\n\n\t\t\t\t// icq:\n\t\t\t\t'wanna chat? icq:878787.' => 'wanna chat? <a href=\"http://wwp.icq.com/scripts/search.dll?to=878787\">878787</a>.',\n\n\t\t\t\t'<img src=\"http://example.com/\" />' => '<img src=\"http://example.com/\" />',\n\t\t\t\t'<img src=http://example.com/ />' => '<img src=http://example.com/ />',\n\t\t\t\t'<div>http://example.com/</div>' => '<div><a href=\"http://example.com/\">http://example.com/</a></div>',\n\n\t\t\t\t// XSS sample:\n\t\t\t\t'text http://test_url.test\"onmouseover=\"alert(1)\"onerror=1 \"text' => 'text <a href=\"http://test_url.test\">http://test_url.test</a>\"onmouseover=\"alert(1)\"onerror=1 \"text',\n\t\t\t) as $lText => $lExpected )\n\t\t{\n\t\t\t$this->assertEqual( make_clickable($lText), $lExpected );\n\t\t}\n\t}\n\n\n\tfunction test_is_email()\n\t{\n\t\t$must_match = array(\n\t\t\t'single' => array(),\n\t\t\t'rfc2822' => array(\n\t\t\t\t'My Name <my.name@example.org>',\n\n\t\t\t\t// taken from http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t\t'name.surname@blah.com',\n\t\t\t\t'Name Surname <name.surname@blah.com>',\n\t\t\t\t'\"b. blah\"@blah.co.nz',\n\t\t\t\t// taken from RFC (http://rfc.net/rfc2822.html#sA.1.2.)\n\t\t\t\t'\"Joe Q. Public\" <john.q.public@example.com>',\n\t\t\t\t'Mary Smith <mary@x.test>',\n\t\t\t\t'jdoe@example.org',\n\t\t\t\t'Who? <one@y.test>',\n\t\t\t\t'<boss@nil.test>',\n\t\t\t\t'\"Giant; \\\"Big\\\" Box\" <sysservices@example.net>',\n\t\t\t\t),\n\t\t\t'all' => array(\n\t\t\t\t'my.name@example.org',\n\t\t\t\t),\n\t\t\t);\n\n\t\t$must_not_match = array(\n\t\t\t'single' => array(\n\t\t\t\t'My Name <my.name@example.org>', // no single address\n\t\t\t\t),\n\t\t\t'rfc2822' => array(\n\t\t\t\t' me@example.org',\n\n\t\t\t\t// taken from http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t\t'name surname@blah.com',\n\t\t\t\t'name.\"surname\"@blah.com',\n\t\t\t\t'name@bla-.com',\n\t\t\t\t),\n\t\t\t'all' => array(\n\t\t\t\t'',\n\t\t\t\t'a@b',\n\t\t\t\t'abc',\n\t\t\t\t'a @ b',\n\t\t\t\t'a @ example.org',\n\t\t\t\t'a@example.org ',\n\t\t\t\t' example.org',\n\t\t\t\t),\n\t\t\t);\n\n\t\t// must match:\n\t\tforeach( $must_match['single'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t}\n\t\tforeach( $must_match['rfc2822'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t\tforeach( $must_match['all'] as $l_email )\n\t\t{\n\t\t\t$this->assertTrue( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t\t$this->assertTrue( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\n\t\t// must not match\n\t\tforeach( $must_not_match['single'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t}\n\t\tforeach( $must_not_match['rfc2822'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t\tforeach( $must_not_match['all'] as $l_email )\n\t\t{\n\t\t\t$this->assertFalse( is_email( $l_email, 'single' ), 'single: '.$l_email );\n\t\t\t$this->assertFalse( is_email( $l_email, 'rfc2822' ), 'rfc2822: '.$l_email );\n\t\t}\n\t}\n\n\n\tfunction test_implode_with_and()\n\t{\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array() ),\n\t\t\t'' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one') ),\n\t\t\t'one' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one', 'two') ),\n\t\t\t'one &amp; two' );\n\n\t\t$this->assertEqual(\n\t\t\timplode_with_and( array('one', 'two', 'three') ),\n\t\t\t'one, two &amp; three' );\n\t}\n\n\n\tfunction test_validate_url()\n\t{\n\t\t$this->change_global('evo_charset', 'latin1');\n\n\t\t// valid:\n\t\tforeach( array(\n\t\t\t'http://b2evolution.net',\n\t\t\t'https://demo.b2evolution.net',\n\t\t\t'http://user@example.com/path',\n\t\t\t'http://user:pass@example.com/path',\n\t\t\t'mailto:example@example.org',\n\t\t\t'mailto:example@example.org?subject=TEST',\n\t\t\t'http://l\u9173.de/',\n\t\t\t'http://l\u9173.de/foo bar',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'commenting', false );\n\t\t\t// True means validation ok\n\t\t\t$this->assertFalse( $r, $url.' NOT allowed in comments' );\n\t\t}\n\n\t\tforeach( array(\n\t\t\t'http://b2evolution.net',\n\t\t\t'https://demo.b2evolution.net',\n\t\t\t'http://user@example.com/path',\n\t\t\t'http://user:pass@example.com/path',\n\t\t\t'mailto:example@example.org',\n\t\t\t'mailto:example@example.org?subject=TEST',\n\t\t\t'http://l\u9173.de/',\n\t\t\t'/foobar',\n\t\t\t'/foobar#anchor',\n\t\t\t'#anchor',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'posting', false );\n\t\t\t$this->assertFalse( $r, $url.' NOT allowed in posts' );\n\t\t}\n\n\t\t// invalid:\n\t\tforeach( array(\n\t\t\t'http://',\n\t\t\t'http://&amp;',\n\t\t\t'http://<script>...</script>',\n\t\t\t'mailto:www.example.com',\n\t\t\t'foobar',\n\t\t\t) as $url )\n\t\t{\n\t\t\t$r = validate_url( $url, 'commenting', false );\n\t\t\t// True means validation rejected\n\t\t\t$this->assertTrue( $r, $url.' allowed in comments' );\n\n\t\t\t$r = validate_url( $url, 'posting', false );\n\t\t\t$this->assertTrue( $r, $url.' allowed in posts' );\n\t\t}\n\t}\n\n\n\t/**\n\t * Tests {@link callback_on_non_matching_blocks()}.\n\t */\n\tfunction test_callback_on_non_matching_blocks()\n\t{\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( 'foo bar', '~\\s~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ),\n\t\t\t'[[foo]] [[bar]]' );\n\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( ' foo bar ', '~\\s~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ),\n\t\t\t' [[foo]] [[bar]] ' );\n\n\t\t// Replace anything outside <pre></pre> and <code></code> that's not in a tag (smilies plugin):\n\t\t$this->assertEqual(\n\t\t\tcallback_on_non_matching_blocks( 'foo <code>FOOBAR</code> bar ',\n\t\t\t\t'~<(code|pre)[^>]*>.*?</\\1>~is',\n\t\t\t\t'callback_on_non_matching_blocks',\n\t\t\t\tarray( '~<[^>]*>~', array(&$this, 'helper_test_callback_on_non_matching_blocks') ) ),\n\t\t\t'[[foo]] <code>FOOBAR</code> [[bar]] ' );\n\t}\n\n\n\t/**\n\t * Helper method for {@link test_callback_on_non_matching_blocks()}.\n\t *\n\t * @return string\n\t */\n\tfunction helper_test_callback_on_non_matching_blocks( $text )\n\t{\n\t\treturn preg_replace( '/(foo|bar)/i', '[[$1]]', $text );\n\t}\n\n\n\t/**\n\t * Test {@link get_base_domain()}\n\t */\n\tfunction test_get_base_domain()\n\t{\n\t\t$this->change_global('evo_charset', 'iso-8859-1');\n\n\t\t$this->assertEqual( get_base_domain(''), '' ); // Example: empty referer\n\t\t$this->assertEqual( get_base_domain('hostname'), 'hostname' );\n\t\t$this->assertEqual( get_base_domain('http://hostname'), 'hostname' );\n\t\t$this->assertEqual( get_base_domain('www.example.com'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('www2.example.com'), 'example.com' );  // We no longer treat www2.ex.com equal to ex.com\n\t\t$this->assertEqual( get_base_domain('subdom.example.com'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('sub2.subdom.example.net'), 'example.net' );\n\t\t$this->assertEqual( get_base_domain('sub3.sub2.subdom.example.org'), 'example.org' );\n\t\t$this->assertEqual( get_base_domain('https://www.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://www.sub1.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://sub1.hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.com/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.com:8080/path/1/2/3/page.html?param=hello#location'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.net:8080/path/1/2/3/page.html?param=hello#location'), 'example.net' );\n\t\t$this->assertEqual( get_base_domain('https://hello.example.org:8080/path/1/2/3/page.html?param=hello#location'), 'example.org' );\n\t\t$this->assertEqual( get_base_domain('https://lessons.teachers.city.edu:443/index.php#lesson45'), 'city.edu' );\n\t\t$this->assertEqual( get_base_domain('ftp://projects.roads.gov/region.php#plan'), 'roads.gov' );\n\t\t$this->assertEqual( get_base_domain('http://domain.gouv.fr:8080/index.php#anchor'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://www14.domain.gouv.fr:8080/index.php#anchor'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('https://sub.domain.gouv.fr:8080/page.html'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://www.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://sub2.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('https://www2.sub2.sub.domain.gouv.fr:8080/'), 'domain.gouv.fr' );\n\t\t$this->assertEqual( get_base_domain('http://b2evo.re:8080/'), 'b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://www6.b2evo.re:8080/'), 'b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://test.b2evo.re:8080/sitemap.xml'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://www2000.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('https://www0.sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://sub.test.b2evo.re:8080/install/index.htm#step3'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://www1.sub.test.b2evo.re:8080/'), 'test.b2evo.re' );\n\t\t$this->assertEqual( get_base_domain('http://192.168.1.100:8080/'), '192.168.1.100' );\n\t\t$this->assertEqual( get_base_domain('http://www5.192.168.1.100:8080/'), '168.1.100' );\n\t\t$this->assertEqual( get_base_domain('https://localhost:8080/b2evo/github/site/'), 'localhost' );\n\t\t$this->assertEqual( get_base_domain('http://www.localhost:8080/b2evo/github/site/'), 'localhost' );\n\n\t\t// Anchor after domain name, used by spammers:\n\t\t$this->assertEqual( get_base_domain('http://example.com#anchor'), 'example.com' );\n\t\t$this->assertEqual( get_base_domain('http://example.com/#anchor'), 'example.com' );\n\n\t\t// \"-\" is a valid char:\n\t\t$this->assertEqual( get_base_domain('host-name'), 'host-name' );\n\t\t$this->assertEqual( get_base_domain('www-2.host-name.tld'), 'www-2.host-name.tld' );\n\n\t\t// IDN:\n\t\t$this->assertEqual( get_base_domain('k\u9172e'), 'k\u9172e' );\n\t\t$this->assertEqual( get_base_domain('\u95e4.de'), '\u95e4.de' );\n\t\t$this->assertEqual( get_base_domain('www-\u95e4.k\u9172e-\u95e4.de'), 'www-\u95e4.k\u9172e-\u95e4.de' );\n\t\t$this->assertEqual( get_base_domain('sub1.sub2.pr\u942cl.de'), 'sub2.pr\u942cl.de' );\n\n\t\t// Numerical, should be kept:\n\t\t$this->assertIdentical( get_base_domain( '123.123.123.123' ), '123.123.123.123' );\n\t\t$this->assertIdentical( get_base_domain( '123.123.123.123:8080' ), '123.123.123.123' );\n\n\t\t// Invalid, but ok:\n\t\t// fp> This function is called get_base_domain(), not validate_domain() . If we receive a domain starting with a _, then it is not a problem to keep it in the base domain.\n\t\t$this->assertEqual( get_base_domain('_host'), '_host' );\n\n\t\t// The following may not be valid in the future but seem good enough for now:\n\t\t$this->assertEqual( get_base_domain('.de'), 'de' );\n\t\t$this->assertEqual( get_base_domain('.....de'), 'de' );\n\t\t$this->assertIdentical( get_base_domain('...'), '' );\n\t\t$this->assertIdentical( get_base_domain( '1..' ), '' );\n\t\t$this->assertIdentical( get_base_domain( chr(0) ), '' );\n\t}\n\n\n\t/**\n\t * Test {@link get_ban_domain()}\n\t */\n\tfunction test_get_ban_domain()\n\t{\n\t\t$this->assertEqual( get_ban_domain('www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://hostname'), '//hostname' );\n\t\t$this->assertEqual( get_ban_domain('http://hostname.tld'), '//hostname.tld' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com/path/'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www.example.com/path/page.html'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/path/?query=1'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://www2.example.com/path/page.html?query=1'), '.example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/'), '//example.com/path/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/?query=1'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/page.html'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/path/sub/page.html?query=1'), '//example.com/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com:8080/path/sub/page.html?query=1'), '//example.com:8080/path/sub/' );\n\t\t$this->assertEqual( get_ban_domain('https://www.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('https://www2.example.com'), '.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub2.sub1.example.com'), '//sub2.sub1.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub3.sub2.sub1.example.com'), '//sub3.sub2.sub1.example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://sub3.sub2.sub1.example.com'), '//sub3.sub2.sub1.example.com' );\n\t\t$this->assertIdentical( get_ban_domain(''), false );\n\n\t\t// Anchor after domain name, used by spammers:\n\t\t$this->assertEqual( get_ban_domain('http://example.com#anchor'), '//example.com' );\n\t\t$this->assertEqual( get_ban_domain('http://example.com/#anchor'), '//example.com' );\n\t}\n\n\n\t/**\n\t * Test {@link format_to_output()}\n\t */\n\tfunction test_format_to_output()\n\t{\n\t\t$this->change_global('evo_charset', 'latin1');\n\n\t\t$this->assertEqual( format_to_output('<a href=\"\">link</a>  text', 'text'), 'link text' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'htmlbody'), '<b>&#174;&#181;&#165;&#191;-test</b>' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'xml'), '&#174;&#181;&#165;&#191;-test' );\n\t\t$this->assertEqual( format_to_output( chr(128).'&#128;' ), '&#8364;&#8364;' ); // Euro sign, Windows style\n\n\t\t$this->change_global('evo_charset', 'utf-8');\n\t\t$this->assertEqual( format_to_output('<a href=\"\">link</a>  text', 'text'), 'link text' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'htmlbody'), '<b>\u633e\u6b63-test</b>' );\n\t\t$this->assertEqual( format_to_output('<b>\u633e\u6b63-test</b>', 'xml'), '\u633e\u6b63-test' );\n\n\t\t$this->assertEqual( format_to_output('2 > &1', 'htmlbody'), '2 > &amp;1' );\n\t}\n\n\n\t/**\n\t * Tests {@link make_rel_links_abs()}.\n\t */\n\tfunction test_make_rel_links_abs()\n\t{\n\t\t$this->assertEqual(\n\t\t\tmake_rel_links_abs('foo <a href=\"/bar\">bar</a>', 'http://example.com'),\n\t\t\t'foo <a href=\"http://example.com/bar\">bar</a>' );\n\t\t$this->assertEqual(\n\t\t\tmake_rel_links_abs('foo <a href=\"http://test/bar\">bar</a> <img src=\"/bar\" />', 'http://example.com'),\n\t\t\t'foo <a href=\"http://test/bar\">bar</a> <img src=\"http://example.com/bar\" />' );\n\t}\n\n\n\t/**\n\t * Tests {@link test_convert_charset()}.\n\t */\n\tfunction test_convert_charset()\n\t{\n\t\t$this->assertEqual( convert_charset( '\u6fcb\u9cf9', 'utf-8', 'latin1' ), '\u77c7\u7919\u7661\u79b1' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'latin1', 'utf-8' ), '\u6fcb\u9cf9' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'Latin1', 'UTF-8' ), '\u6fcb\u9cf9' );\n\t\t$this->assertEqual( convert_charset( '\u77c7\u7919\u7661\u79b1', 'Latin1', 'Utf8' ), '\u6fcb\u9cf9' );\n\n\t\t// THIS ONE will produce NO conversion because 'latin-1' is not a valid charset name for this func\n\t\t$this->assertEqual( convert_charset( '\u6fcb\u9cf9', 'utf-8', 'latin-1' ), '\u6fcb\u9cf9' );\n\t}\n\n\n\t/**\n\t * Test {@link strmaxlen()}\n\t */\n\tfunction test_strmaxlen()\n\t{\n\t\t$this->assertEqual( strmaxlen('foo', 3), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo', 2), 'f&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo', 2, '.'), 'f.' );\n\t\t$this->assertEqual( strmaxlen('foobar', 6, '...'), 'foobar' );\n\t\t$this->assertEqual( strmaxlen('foobar', 5, '...'), 'fo...' );\n\t\t$this->assertEqual( strmaxlen('foobar', 5, '&amp;&hellip;'), 'foo&amp;&hellip;' );\n\n\t\t$this->assertEqual( strmaxlen('M?', 2), 'M?', 'Do not cut utf8 char in the middle' );\n\n\t\t$this->assertEqual( strmaxlen('1', 1, '&hellip;'), '1' );\n\t\t$this->assertEqual( strmaxlen('1', 1, '...'), '1' );\n\t\t$this->assertEqual( strmaxlen('123', 1, '...'), '...' );\n\t\t$this->assertEqual( strmaxlen('12345', 1, '...'), '...' );\n\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'htmlbody'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'raw'), '1&2' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3), '1&2' );\n\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 10, NULL, 'htmlbody'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 10, NULL, 'formvalue'), '1&amp;amp;2' );\n\n\t\t# special cases, where entities must not get cut in the middle\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 5, NULL, 'htmlbody'), '1&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&amp;22', 7, NULL, 'htmlbody'), '1&amp;&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&amp;2', 3, NULL, 'formvalue'), '1&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&    2', 3, NULL, 'formvalue'), '1&amp;&hellip;' );\n\t\t$this->assertEqual( strmaxlen('1&2', 3, NULL, 'formvalue'), '1&amp;2' );\n\t\t$this->assertEqual( strmaxlen('12345678901234567890&amp;', 21, NULL, 'formvalue'),\n\t\t\t'12345678901234567890&hellip;' );\n\t\t$this->assertEqual( strmaxlen('123456789012345&amp;', 21, NULL, 'formvalue'),\n\t\t\t'123456789012345&amp;amp;' );\n\n\t\t$this->assertEqual( strmaxlen('foo ', 3), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo ', 4), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 3), 'fo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 4), 'foo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5), 'foo&hellip;' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 6), 'foo b&hellip;' );\n\n\t\t// test cut_at_whitespace:\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, ''), 'foo b' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, '', 'raw', true), 'foo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 5, '.', 'raw', true), 'foo.' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 4, '.', 'raw', true), 'foo.' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 2, '', 'raw', true), 'fo' );\n\t\t$this->assertEqual( strmaxlen('foo bar', 2, '..', 'raw', true), '..' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 2, '', 'raw', true), 'fo' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 3, '', 'raw', true), 'foo' );\n\t\t$this->assertEqual( strmaxlen(\"foo\\nbar\", 4, '', 'raw', true), 'foo' );\n\t}\n\n\n\t/**\n\t * Test {@link strmaxwords()}\n\t */\n\tfunction test_strmaxwords()\n\t{\n\t\t$this->assertEqual( strmaxwords('foo bar', 2), 'foo bar' );\n\t\t$this->assertEqual( strmaxwords('foo  bar', 2), 'foo  bar' );\n\t\t$this->assertEqual( strmaxwords('foo  bar  ', 2), 'foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  foo  bar  ', 2), '  foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  <img />foo  bar  ', 2), '  <img />foo  bar  ' );\n\t\t$this->assertEqual( strmaxwords('  <img />foo  bar  ', 1), '  <img />foo  &hellip;' );\n\t}\n\n\n\t/**\n\t * Test {@link evo_version_compare()}\n\t */\n\tfunction test_evo_version_compare()\n\t{\n\t\t$versions = array(\n\t\t\tarray( '4.1.6-2012-11-23',         '4.1.7-2013-04-27',         '<' ),\n\t\t\tarray( '4.1.7-2013-04-27',         '5.0.0-alpha-4-2012-11-29', '<' ),\n\t\t\tarray( '5.0.0-alpha-4-2012-11-29', '5.0.1-alpha-2013-02-21',   '<' ),\n\t\t\tarray( '5.0.1-alpha-2013-02-21',   '5.0.2-alpha-5-2013-03-15', '<' ),\n\t\t\tarray( '5.0.2-alpha-5-2013-03-15', '5.0.3-beta-5-2013-04-28',  '<' ),\n\t\t\tarray( '5.0.3-beta-5-2013-04-28',  '5.0.4-stable-2013-06-28',  '<' ),\n\t\t\tarray( '5.0.4-stable-2013-06-28',  '5.0.5-stable-2013-08-02',  '<' ),\n\t\t\tarray( '5.0.5-stable-2013-08-02',  '5.0.6-stable-2013-09-25',  '<' ),\n\t\t\tarray( '5.0.6-stable-2013-09-25',  '5.1.0-alpha-2014-03-26',   '<' ),\n\t\t\tarray( '5.1.0-alpha-2014-03-26',   '5.1.0-beta-2014-06-11',    '<' ),\n\t\t\tarray( '5.1.0-beta-2014-06-11',    '5.1.0-stable',             '<' ),\n\t\t\tarray( '5.1.0-stable',             '5.1.0-stable-2014-09-10',  '<' ),\n\t\t\tarray( '5.1.0-stable-2014-09-10',  '5.1.0-stable-2014-09-11',  '<' ),\n\t\t\tarray( '5.1.0',                    '5.1.0-beta-2014-06-11',    '>' ),\n\t\t\tarray( '5.1.0',                    '5.1.0-stable',             '=' ),\n\t\t\tarray( '5.1.0-beta',               '5.1.0-stable',             '<' ),\n\t\t);\n\n\t\tforeach( $versions as $func_params )\n\t\t{\n\t\t\t$this->assertTrue( call_user_func_array( 'evo_version_compare', $func_params ),\n\t\t\t\t'FALSE === ( \"'.$func_params[0].'\" '.$func_params[2].' \"'.$func_params[1].'\" )' );\n\t\t}\n\t}\n}\n\n\nif( !isset( $this ) )\n{ // Called directly, run the TestCase alone\n\t$test = new MiscFuncsTestCase();\n\t$test->run_html_or_cli();\n\tunset( $test );\n}\n?>\n", "<?php\n/**\n * This file implements general purpose functions.\n *\n * This file is part of the evoCore framework - {@link http://evocore.net/}\n * See also {@link https://github.com/b2evolution/b2evolution}.\n *\n * @license GNU GPL v2 - {@link http://b2evolution.net/about/gnu-gpl-license}\n *\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n * Parts of this file are copyright (c)2004-2006 by Daniel HAHLER - {@link http://thequod.de/contact}.\n * Parts of this file are copyright (c)2005-2006 by PROGIDISTRI - {@link http://progidistri.com/}.\n *\n * @package evocore\n */\nif( !defined('EVO_MAIN_INIT') ) die( 'Please, do not access this page directly.' );\n\n\n/**\n * Dependencies\n */\nload_funcs('antispam/model/_antispam.funcs.php');\nload_funcs('tools/model/_email.funcs.php');\n\n// @todo sam2kb> Move core functions get_admin_skins, get_filenames, cleardir_r, rmdir_r and some other\n// to a separate file, and split files_Module from _core_Module\nload_funcs('files/model/_file.funcs.php');\n\n// Load utf8 support functions\nload_funcs( '_ext/_portable_utf8.php' );\n\n\n/**\n * Call a method for all modules in a row\n *\n * @param string the name of the method which should be called\n * @param array params\n * @return array[module_name][return value], or NULL if the method doesn't have any return value\n */\nfunction modules_call_method( $method_name, $params = NULL )\n{\n\tglobal $modules;\n\n\t$result = NULL;\n\n\tforeach( $modules as $module )\n\t{\n\t\t$Module = & $GLOBALS[$module.'_Module'];\n\t\tif( $params == NULL )\n\t\t{\n\t\t\t$ret = $Module->{$method_name}();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = $Module->{$method_name}( $params );\n\t\t}\n\t\tif( isset( $ret ) )\n\t\t{\n\t\t\t$result[$module] = $ret;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Loads the b2evo database scheme.\n *\n * This gets updated through {@link db_delta()} which generates the queries needed to get\n * to this scheme.\n *\n * @param boolean set true to load installed plugins table as well, leave it on false otherwise\n *        - currently used only on table normalization\n *\n * Please see {@link db_delta()} for things to take care of.\n */\nfunction load_db_schema( $inlcude_plugins = false )\n{\n\tglobal $schema_queries;\n\tglobal $modules, $inc_path;\n\tglobal $db_storage_charset, $DB;\n\n\tif( empty( $db_storage_charset ) )\n\t{ // If no specific charset has been requested for datstorage, use the one of the current connection (optimize for speed - no conversions)\n\t\t$db_storage_charset = $DB->connection_charset;\n\t}\n\n\t// Load modules:\n\tforeach( $modules as $module )\n\t{\n\t\techo get_install_format_text( 'Loading module: <code>'.$module.'/model/_'.$module.'.install.php</code><br />', 'br' );\n\t\trequire_once $inc_path.$module.'/model/_'.$module.'.install.php';\n\t}\n\n\tif( $inlcude_plugins )\n\t{ // Load all plugins table into the schema queries\n\t\tglobal $Plugins;\n\n\t\tif( empty( $Plugins ) )\n\t\t{\n\t\t\tload_class( 'plugins/model/_plugins.class.php', 'Plugins' );\n\t\t\t$Plugins = new Plugins();\n\t\t}\n\n\t\t$admin_Plugins = & get_Plugins_admin();\n\t\t$admin_Plugins->restart();\n\t\twhile( $loop_Plugin = & $admin_Plugins->get_next() )\n\t\t{ // loop through all installed plugins\n\t\t\t$create_table_queries = $loop_Plugin->GetDbLayout();\n\t\t\tforeach( $create_table_queries as $create_table_query )\n\t\t\t{\n\t\t\t\tif( ! preg_match( '|^\\s*CREATE TABLE\\s+(IF NOT EXISTS\\s+)?([^\\s(]+).*$|is', $create_table_query, $match) )\n\t\t\t\t{ // Could not parse the CREATE TABLE command\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$schema_queries[$match[2]] = array( 'Creating table for plugin', $create_table_query );\n\t\t\t\t$DB->dbaliases[] = '#\\b'.$match[2].'\\b#';\n\t\t\t\t$DB->dbreplaces[] = $match[2];\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @deprecated kept only for plugin backward compatibility (core is being modified to call getters directly)\n * To be removed, maybe in b2evo v5.\n *\n * @return DataObjectCache\n */\nfunction & get_Cache( $objectName )\n{\n\tglobal $Plugins;\n\tglobal $$objectName;\n\n\tif( isset( $$objectName ) )\n\t{\t// Cache already exists:\n\t\treturn $$objectName;\n\t}\n\n\t$func_name = 'get_'.$objectName;\n\n\tif( function_exists($func_name) )\n\t{\n\t\treturn $func_name();\n\t}\n\telse\n\t{\n\t\tdebug_die( 'getCache(): Unknown Cache type get function:'.$func_name.'()' );\n\t}\n}\n\n\n/**\n * Load functions file\n */\nfunction load_funcs( $funcs_path )\n{\n\tglobal $inc_path;\n\trequire_once $inc_path.$funcs_path;\n}\n\n\n/**\n * Shutdown function: save HIT and update session!\n *\n * This is registered in _main.inc.php with register_shutdown_function()\n * This is called by PHP at the end of the script.\n *\n * NOTE: before PHP 4.1 nothing can be echoed here any more, but the minimum PHP requirement for b2evo is PHP 4.3\n */\nfunction shutdown()\n{\n\t/**\n\t * @var Hit\n\t */\n\tglobal $Hit;\n\n\t/**\n\t * @var Session\n\t */\n\tglobal $Session;\n\n\tglobal $Settings;\n\tglobal $Debuglog;\n\n\tglobal $Timer;\n\n\t// Try forking a background process and let the parent return as fast as possbile.\n\tif( is_callable('pcntl_fork') && function_exists('posix_kill') && defined('STDIN') )\n\t{\n\t\tif( $pid = pcntl_fork() )\n\t\t\treturn; // Parent\n\n\t\tfunction shutdown_kill()\n\t\t{\n\t\t\tposix_kill(posix_getpid(), SIGHUP);\n\t\t}\n\n\t\tif ( ob_get_level() )\n\t\t{\t// Discard the output buffer and close\n\t\t\tob_end_clean();\n\t\t}\n\n\t\tfclose(STDIN);  // Close all of the standard\n\t\tfclose(STDOUT); // file descriptors as we\n\t\tfclose(STDERR); // are running as a daemon.\n\n\t\tregister_shutdown_function('shutdown_kill');\n\n\t\tif( posix_setsid() < 0 )\n\t\t\treturn;\n\n\t\tif( $pid = pcntl_fork() )\n\t\t\treturn;     // Parent\n\n\t\t// Now running as a daemon. This process will even survive\n\t\t// an apachectl stop.\n\t}\n\n\t$Timer->resume('shutdown');\n\n\t// echo '*** SHUTDOWN FUNC KICKING IN ***';\n\n\t// fp> do we need special processing if we are in CLI mode?  probably earlier actually\n\t// if( ! $is_cli )\n\n\t// Note: it might be useful at some point to do special processing if the script has been aborted or has timed out\n\t// connection_aborted()\n\t// connection_status()\n\n\t// Save the current HIT, but set delayed since the hit ID will not be required here:\n\t$Hit->log( true );\n\n\t// Update the SESSION:\n\t$Session->dbsave();\n\n\t// Get updates here instead of slowing down normal display of the dashboard\n\tload_funcs( 'dashboard/model/_dashboard.funcs.php' );\n\tb2evonet_get_updates();\n\n\t// Auto pruning of old HITS, old SESSIONS and potentially MORE analytics data:\n\tif( $Settings->get( 'auto_prune_stats_mode' ) == 'page' )\n\t{ // Autopruning is requested\n\t\tload_class( 'sessions/model/_hitlist.class.php', 'Hitlist' );\n\t\tHitlist::dbprune(); // will prune once per day, according to Settings\n\t}\n\n\t// Calling debug_info() here will produce complete data but it will be after </html> hence invalid.\n\t// Then again, it's for debug only, so it shouldn't matter that much.\n\tdebug_info();\n\n\t// Update the SESSION again, at the very end:\n\t// (e.g. \"Debuglogs\" may have been removed in debug_info())\n\t$Session->dbsave();\n\n\t$Timer->pause('shutdown');\n}\n\n\n/***** Formatting functions *****/\n\n/**\n * Format a string/content for being output\n *\n * @author fplanque\n * @todo htmlspecialchars() takes a charset argument, which we could provide ($evo_charset?)\n * @param string raw text\n * @param string format, can be one of the following\n * - raw: do nothing\n * - htmlbody: display in HTML page body: allow full HTML\n * - entityencoded: Special mode for RSS 0.92: allow full HTML but escape it\n * - htmlhead: strips out HTML (mainly for use in Title)\n * - htmlattr: use as an attribute: escapes quotes, strip tags\n * - formvalue: use as a form value: escapes quotes and < > but leaves code alone\n * - text: use as plain-text, e.g. for ascii-mails\n * - xml: use in an XML file: strip HTML tags\n * - xmlattr: use as an attribute: strips tags and escapes quotes\n * @return string formatted text\n */\nfunction format_to_output( $content, $format = 'htmlbody' )\n{\n\tglobal $Plugins, $evo_charset;\n\n\tswitch( $format )\n\t{\n\t\tcase 'raw':\n\t\t\t// do nothing!\n\t\t\tbreak;\n\n\t\tcase 'htmlbody':\n\t\t\t// display in HTML page body: allow full HTML\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\tbreak;\n\n\t\tcase 'urlencoded':\n\t\t\t// Encode string to be passed as part of an URL\n\t\t\t$content = rawurlencode( $content );\n\t\t\tbreak;\n\n\t\tcase 'entityencoded':\n\t\t\t// Special mode for RSS 0.92: apply renders and allow full HTML but escape it\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\tbreak;\n\n\t\tcase 'htmlfeed':\n\t\t\t// For use in RSS <content:encoded><![CDATA[ ... ]]></content:encoded>\n\t\t\t// allow full HTML + absolute URLs...\n\t\t\t$content = make_rel_links_abs($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = str_replace(']]>', ']]&gt;', $content); // encode CDATA closing tag to prevent injection/breaking of the <![CDATA[ ... ]]>\n\t\t\tbreak;\n\n\t\tcase 'htmlhead':\n\t\t\t// Strips out HTML (mainly for use in Title)\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\tbreak;\n\n\t\tcase 'htmlattr':\n\t\t\t// use as an attribute: strips tags and escapes quotes\n\t\t\t// TODO: dh> why not just htmlspecialchars?fp> because an attribute can never contain a tag? dh> well, \"onclick='return 1<2;'\" would get stripped, too. I'm just saying: why mess with it, when we can just use htmlspecialchars.. fp>ok\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'html');\n\t\t\t$content = str_replace( array('\"', \"'\"), array('&quot;', '&#039;'), $content );\n\t\t\tbreak;\n\n\t\tcase 'htmlspecialchars':\n\t\tcase 'formvalue':\n\t\t\t// Replace special chars to &amp;, &quot;, &#039;|&apos;, &lt; and &gt; :\n\t\t\tif( version_compare( phpversion(), '5.4', '>=' ) )\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &apos; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES | ENT_HTML5, $evo_charset );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &#039; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'xml':\n\t\t\t// use in an XML file: strip HTML tags\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'xml');\n\t\t\tbreak;\n\n\t\tcase 'xmlattr':\n\t\t\t// use as an attribute: strips tags and escapes quotes\n\t\t\t$content = strip_tags($content);\n\t\t\t$content = convert_chars($content, 'xml');\n\t\t\t$content = str_replace( array('\"', \"'\"), array('&quot;', '&#039;'), $content );\n\t\t\tbreak;\n\n\t\tcase 'text':\n\t\t\t// use as plain-text, e.g. for ascii-mails\n\t\t\t$content = strip_tags( $content );\n\t\t\t$trans_tbl = get_html_translation_table( HTML_ENTITIES );\n\t\t\t$trans_tbl = array_flip( $trans_tbl );\n\t\t\t$content = strtr( $content, $trans_tbl );\n\t\t\t$content = preg_replace( '/[ \\t]+/', ' ', $content);\n\t\t\t$content = trim($content);\n\t\t\tbreak;\n\n\t\tcase 'syslog':\n\t\t\t// Replace special chars to &amp;, &quot;, &#039;|&apos;, &lt; and &gt; :\n\t\t\tif( version_compare( phpversion(), '5.4', '>=' ) )\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &apos; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES | ENT_HTML5, $evo_charset );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Handles & \" ' < > to &amp; &quot; &#039; &lt; &gt;\n\t\t\t\t$content = htmlspecialchars( $content, ENT_QUOTES, $evo_charset );\n\t\t\t}\n\t\t\t$content = preg_replace( \"/\\[\\[(.+?)]]/is\", \"<code>$1</code>\", $content ); // Replaces [[...]] into <code>...</code>\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tdebug_die( 'Output format ['.$format.'] not supported.' );\n\t}\n\n\treturn $content;\n}\n\n\n/*\n * autobrize(-)\n */\nfunction autobrize($content) {\n\t$content = callback_on_non_matching_blocks( $content, '~<code>.+?</code>~is', 'autobrize_callback' );\n\treturn $content;\n}\n\n/**\n * Adds <br>'s to non code blocks\n *\n * @param string $content\n * @return string content with <br>'s added\n */\nfunction autobrize_callback( $content )\n{\n\t$content = preg_replace(\"/<br>\\n/\", \"\\n\", $content);\n\t$content = preg_replace(\"/<br \\/>\\n/\", \"\\n\", $content);\n\t$content = preg_replace(\"/(\\015\\012)|(\\015)|(\\012)/\", \"<br />\\n\", $content);\n\treturn($content);\n}\n\n/*\n * unautobrize(-)\n */\nfunction unautobrize($content)\n{\n\t$content = callback_on_non_matching_blocks( $content, '~<code>.+?</code>~is', 'unautobrize_callback' );\n\treturn $content;\n}\n\n/**\n * Removes <br>'s from non code blocks\n *\n * @param string $content\n * @return string content with <br>'s removed\n */\nfunction unautobrize_callback( $content )\n{\n\t$content = preg_replace(\"/<br>\\n/\", \"\\n\", $content);   //for PHP versions before 4.0.5\n\t$content = preg_replace(\"/<br \\/>\\n/\", \"\\n\", $content);\n\treturn($content);\n}\n\n/**\n * Add leading zeroes to a number when necessary.\n *\n * @param string The original number.\n * @param integer How many digits shall the number have?\n * @return string The padded number.\n */\nfunction zeroise( $number, $threshold )\n{\n\treturn str_pad( $number, $threshold, '0', STR_PAD_LEFT );\n}\n\n\n/**\n * Get a limited text-only excerpt\n *\n * @param string\n * @param int Maximum length\n * @return string\n */\nfunction excerpt( $str, $maxlen = 254, $tail = '&hellip;' )\n{\n\t// Add spaces\n\t$str = str_replace( array( '<p>', '<br' ), array( ' <p>', ' <br' ), $str );\n\n\t// Remove <code>\n\t$str = preg_replace( '#<code>(.+)</code>#is', '', $str );\n\n\t// Strip tags:\n\t$str = strip_tags( $str );\n\n\t// Remove spaces:\n\t$str = preg_replace( '/[ \\t]+/', ' ', $str);\n\t$str = trim( $str );\n\n\t// Ger rid of all new lines and Display the html tags as source text:\n\t$str = trim( preg_replace( '#[\\r\\n\\t\\s]+#', ' ', $str ) );\n\n\t$str = strmaxlen( $str, $maxlen, $tail, 'raw', true );\n\n\treturn $str;\n}\n\n\n/**\n * Crop string to maxlen with &hellip; (default tail) at the end if needed.\n *\n * If $format is not \"raw\", we make sure to not cut in the middle of an\n * HTML entity, so that strmaxlen('1&amp;2', 3, NULL, 'formvalue') will not\n * become/stay '1&amp;&hellip;'.\n *\n * @param string\n * @param int Maximum length\n * @param string Tail to use, when string gets cropped. Its length gets\n *               substracted from the total length (with HTML entities\n *               being decoded). Default is \"&hellip;\" (HTML entity)\n * @param string Format, see {@link format_to_output()}\n * @param boolean Crop at whitespace, if possible?\n *        (any word split at the end will get its head removed)\n * @return string\n */\nfunction strmaxlen( $str, $maxlen = 50, $tail = NULL, $format = 'raw', $cut_at_whitespace = false  )\n{\n\tif( is_null($tail) )\n\t{\n\t\t$tail = '&hellip;';\n\t}\n\n\t$str = utf8_rtrim($str);\n\n\tif( utf8_strlen( $str ) > $maxlen )\n\t{\n\t\t// Replace all HTML entities by a single char. html_entity_decode for example\n\t\t// would not handle &hellip;.\n\t\t$tail_for_length = preg_replace('~&\\w+?;~', '.', $tail);\n\t\t$tail_length = utf8_strlen( html_entity_decode($tail_for_length) );\n\t\t$len = $maxlen-$tail_length;\n\t\tif( $len < 1 )\n\t\t{ // special case; $tail length is >= $maxlen\n\t\t\t$len = 0;\n\t\t}\n\t\t$str_cropped = utf8_substr( $str, 0, $len );\n\t\tif( $format != 'raw' )\n\t\t{ // if the format isn't raw we make sure that we do not cut in the middle of an HTML entity\n\t\t\t$maxlen_entity = 7; # \"&amp;\" is 5, min 3!\n\t\t\t$str_inspect = utf8_substr($str_cropped, 1-$maxlen_entity);\n\t\t\t$pos_amp = utf8_strpos($str_inspect, '&');\n\t\t\tif( $pos_amp !== false )\n\t\t\t{ // there's an ampersand at the end of the cropped string\n\t\t\t\t$look_until = $pos_amp;\n\t\t\t\t$str_cropped_len = utf8_strlen($str_cropped);\n\t\t\t\tif( $str_cropped_len < $maxlen_entity )\n\t\t\t\t{ // we have to look at least for the length of an entity\n\t\t\t\t\t$look_until += $maxlen_entity-$str_cropped_len;\n\t\t\t\t}\n\t\t\t\tif( strpos(utf8_substr($str, $len, $look_until), ';') !== false )\n\t\t\t\t{\n\t\t\t\t\t$str_cropped = utf8_substr( $str, 0, $len-utf8_strlen($str_inspect)+$pos_amp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( $cut_at_whitespace )\n\t\t{\n\t\t\t// Get the first character being cut off. Note: we can't use $str[index] in case of utf8 strings!\n\t\t\t$first_cut_off_char = utf8_substr( $str, utf8_strlen( $str_cropped ), 1 );\n\t\t\tif( ! ctype_space( $first_cut_off_char ) )\n\t\t\t{ // first character being cut off is not whitespace\n\t\t\t\t// Get the chars as an array from the cropped string to be able to get chars by position\n\t\t\t\t$str_cropped_chars = preg_split('//u',$str_cropped, -1, PREG_SPLIT_NO_EMPTY);\n\t\t\t\t$i = utf8_strlen($str_cropped);\n\t\t\t\twhile( $i && isset( $str_cropped_chars[ --$i ] ) && ! ctype_space( $str_cropped_chars[ $i ] ) )\n\t\t\t\t{}\n\t\t\t\tif( $i )\n\t\t\t\t{\n\t\t\t\t\t$str_cropped = utf8_substr($str_cropped, 0, $i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$str = format_to_output(utf8_rtrim($str_cropped), $format);\n\t\t$str .= $tail;\n\n\t\treturn $str;\n\t}\n\telse\n\t{\n\t\treturn format_to_output($str, $format);\n\t}\n}\n\n\n/**\n * Crop string to maxwords preserving tags.\n *\n * @param string\n * @param int Maximum number words\n * @param mixed array Optional parameters\n * @return string\n */\nfunction strmaxwords( $str, $maxwords = 50, $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'continued_link' => '',\n\t\t\t'continued_text' => '&hellip;',\n\t\t\t'always_continue' => false,\n\t\t), $params );\n\t$open = false;\n\t$have_seen_non_whitespace = false;\n\t$end = utf8_strlen( $str );\n\tfor( $i = 0; $i < $end; $i++ )\n\t{\n\t\tswitch( $char = $str[$i] )\n\t\t{\n\t\t\tcase '<' :\t// start of a tag\n\t\t\t\t$open = true;\n\t\t\t\tbreak;\n\t\t\tcase '>' : // end of a tag\n\t\t\t\t$open = false;\n\t\t\t\tbreak;\n\n\t\t\tcase ctype_space($char):\n\t\t\t\tif( ! $open )\n\t\t\t\t{ // it's a word gap\n\t\t\t\t\t// Eat any other whitespace.\n\t\t\t\t\twhile( isset($str[$i+1]) && ctype_space($str[$i+1]) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\tif( isset($str[$i+1]) && $have_seen_non_whitespace )\n\t\t\t\t\t{ // only decrement words, if there's a non-space char left.\n\t\t\t\t\t\t--$maxwords;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$have_seen_non_whitespace = true;\n\t\t\t\tbreak;\n\t\t}\n\t\tif( $maxwords < 1 ) break;\n\t}\n\n\t// restrict content to required number of words and balance the tags out\n\t$str = balance_tags( utf8_substr( $str, 0, $i ) );\n\n\tif( $params['always_continue'] || $maxwords == false )\n\t{ // we want a continued text\n\t\tif( $params['continued_link'] )\n\t\t{ // we have a url\n\t\t\t$str .= ' <a href=\"'.$params['continued_link'].'\">'.$params['continued_text'].'</a>';\n\t\t}\n\t\telse\n\t\t{ // we don't have a url\n\t\t\t$str .= ' '.$params['continued_text'];\n\t\t}\n\t}\n\t// remove empty tags\n\t$str = preg_replace( '~<([\\s]+?)[^>]*?></\\1>~is', '', $str );\n\n\treturn $str;\n}\n\n\n/**\n * Convert all non ASCII chars (except if UTF-8, GB2312 or CP1251) to &#nnnn; unicode references.\n * Also convert entities to &#nnnn; unicode references if output is not HTML (eg XML)\n *\n * Preserves < > and quotes.\n *\n * fplanque: simplified\n * sakichan: pregs instead of loop\n */\nfunction convert_chars( $content, $flag = 'html' )\n{\n\tglobal $b2_htmltrans, $evo_charset;\n\n\t/**\n\t * Translation of invalid Unicode references range to valid range.\n\t * These are Windows CP1252 specific characters.\n\t * They would look weird on non-Windows browsers.\n\t * If you've ever pasted text from MSWord, you'll understand.\n\t *\n\t * You should not have to change this.\n\t */\n\tstatic $b2_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#130;' => '&#8218;',\n\t\t'&#131;' => '&#402;',\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#142;' => '&#382;',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;'\n\t);\n\n\t// Convert highbyte non ASCII/UTF-8 chars to urefs:\n\tif( ! in_array(strtolower($evo_charset), array( 'utf8', 'utf-8', 'gb2312', 'windows-1251') ) )\n\t{ // This is a single byte charset\n\t\t// fp> why do we actually bother doing this:?\n\t\t$content = preg_replace_callback(\n\t\t\t'/[\\x80-\\xff]/',\n\t\t\tcreate_function( '$j', 'return \"&#\".ord($j[0]).\";\";' ),\n\t\t\t$content);\n\t}\n\n\t// Convert Windows CP1252 => Unicode (valid HTML)\n\t// TODO: should this go to input conversions instead (?)\n\t$content = strtr( $content, $b2_htmltranswinuni );\n\n\tif( $flag == 'html' )\n\t{ // we can use entities\n\t\t// Convert & chars that are not used in an entity\n\t\t$content = preg_replace('/&(?![#A-Za-z0-9]{2,20};)/', '&amp;', $content);\n\t}\n\telse\n\t{ // unicode, xml...\n\t\t// Convert & chars that are not used in an entity\n\t\t$content = preg_replace('/&(?![#A-Za-z0-9]{2,20};)/', '&#38;', $content);\n\n\t\t// Convert HTML entities to urefs:\n\t\t$content = strtr($content, $b2_htmltrans);\n\t}\n\n\treturn( $content );\n}\n\n\n/**\n * Get number of bytes in $string. This works around mbstring.func_overload, if\n * activated for strlen/mb_strlen.\n * @param string\n * @return int\n */\nfunction evo_bytes( $string )\n{\n\t$fo = ini_get('mbstring.func_overload');\n\tif( $fo && $fo & 2 && function_exists('mb_strlen') )\n\t{ // overloading of strlen is enabled\n\t\treturn mb_strlen( $string, 'ASCII' );\n\t}\n\treturn strlen($string);\n}\n\n\n/**\n * mbstring wrapper for strtolower function\n *\n * @deprecated by {@link utf8_strtolower()}\n *\n * fp> TODO: instead of those \"when used\" ifs, it would make more sense to redefine\n * mb_strtolower beforehand if it doesn\"t exist (it would then just be a fallback\n * to the strtolower + a Debuglog->add() )\n *\n * @param string\n * @return string\n */\nfunction evo_strtolower( $string )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strtolower') )\n\t{\n\t\treturn mb_strtolower( $string, $current_charset );\n\t}\n\n\treturn strtolower($string);\n}\n\n\n/**\n * mbstring wrapper for strlen function\n *\n * @deprecated by {@link utf8_strlen()}\n *\n * @param string\n * @return string\n */\nfunction evo_strlen( $string )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strlen') )\n\t{\n\t\treturn mb_strlen( $string, $current_charset );\n\t}\n\n\treturn strlen($string);\n}\n\n/**\n * mbstring wrapper for strpos function\n *\n * @deprecated by {@link utf8_strpos()}\n *\n * @param string\n * @param string\n * @return int\n */\nfunction evo_strpos( $string , $needle , $offset = null )\n{\n\tglobal $current_charset;\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_strpos') )\n\t{\n\t\treturn mb_strpos( $string, $needle, $offset ,$current_charset );\n\t}\n\n\treturn strpos( $string , $needle , $offset );\n}\n\n\n/**\n * mbstring wrapper for substr function\n *\n * @deprecated by {@link utf8_substr()}\n *\n * @param string\n * @param int start position\n * @param int string length\n * @return string\n */\nfunction evo_substr( $string, $start = 0, $length = '#' )\n{\n\tglobal $current_charset;\n\n\tif( ! $length )\n\t{ // make mb_substr and substr behave consistently (mb_substr returns string for length=0)\n\t\treturn '';\n\t}\n\tif( $length == '#' )\n\t{\n\t\t$length = utf8_strlen($string);\n\t}\n\n\tif( $current_charset != 'iso-8859-1' && $current_charset != '' && function_exists('mb_substr') )\n\t{\n\t\treturn mb_substr( $string, $start, $length, $current_charset );\n\t}\n\n\treturn substr( $string, $start, $length );\n}\n\n\n/**\n * Split $text into blocks by using $pattern and call $callback on the non-matching blocks.\n *\n * The non-matching block's text is the first param to $callback and additionally $params gets passed.\n *\n * This gets used to make links clickable or replace smilies.\n *\n * E.g., to replace only in non-HTML tags, call it like:\n * <code>callback_on_non_matching_blocks( $text, '~<[^>]*>~s', 'your_callback' );</code>\n *\n * {@internal This function gets tested in misc.funcs.simpletest.php.}}\n *\n * @param string Text to handle\n * @param string Regular expression pattern that defines blocks to exclude.\n * @param callback Function name or object/method array to use as callback.\n *               Each non-matching block gets passed as first param, additional params may be\n *               passed with $params.\n * @param array Of additional (\"static\") params to $callback.\n * @return string\n */\nfunction callback_on_non_matching_blocks( $text, $pattern, $callback, $params = array() )\n{\n\tif( preg_match_all( $pattern, $text, $matches, PREG_OFFSET_CAPTURE | PREG_PATTERN_ORDER ) )\n\t{\t// $pattern matches, call the callback method on full text except of matching blocks\n\n\t\t// Create an unique string in order to replace all matching blocks temporarily\n\t\t$unique_replacement = md5( time() + rand() );\n\n\t\t$matches_search = array();\n\t\t$matches_replace = array();\n\t\tforeach( $matches[0] as $l => $l_matching )\n\t\t{\t// Build arrays with a source code of the matching blocks and with temporary replacement\n\t\t\t$matches_source[] = $l_matching[0];\n\t\t\t$matches_temp[] = '?'.$l.$unique_replacement.$l.'?';\n\t\t}\n\n\t\t// Replace all matching blocks with temporary text like '?X219a33da9c1b8f4e335bffc015df8c96X?'\n\t\t// where X is index of match block in array $matches[0]\n\t\t// It is used to avoid any changes in the matching blocks\n\t\t$text = str_ireplace( $matches_source, $matches_temp, $text );\n\n\t\t// Callback:\n\t\t$callback_params = $params;\n\t\tarray_unshift( $callback_params, $text );\n\t\t$text = call_user_func_array( $callback, $callback_params );\n\n\t\t// Revert a source code of the matching blocks in content\n\t\t$text = str_ireplace( $matches_temp, $matches_source, $text );\n\n\t\treturn $text;\n\t}\n\n\t$callback_params = $params;\n\tarray_unshift( $callback_params, $text );\n\treturn call_user_func_array( $callback, $callback_params );\n}\n\n\n/**\n * Replace content outside blocks <code></code>, <pre></pre> and markdown codeblocks\n *\n * @param array|string Search list\n * @param array|string Replace list or Callback function\n * @param string Source content\n * @param string Callback function name\n * @param string Type of callback function: 'preg' -> preg_replace(), 'str' -> str_replace() (@see replace_content())\n * @return string Replaced content\n */\nfunction replace_content_outcode( $search, $replace, $content, $replace_function_callback = 'replace_content', $replace_function_type = 'preg' )\n{\n\tif( !empty( $search ) )\n\t{\n\t\tif( stristr( $content, '<code' ) !== false || stristr( $content, '<pre' ) !== false || strstr( $content, '`' ) !== false )\n\t\t{ // Call replace_content() on everything outside code/pre and markdown codeblocks:\n\t\t\t$content = callback_on_non_matching_blocks( $content,\n\t\t\t\t'~(`|<(code|pre)[^>]*>).*?(\\1|</\\2>)~is',\n\t\t\t\t$replace_function_callback, array( $search, $replace, $replace_function_type ) );\n\t\t}\n\t\telse\n\t\t{ // No code/pre blocks, replace on the whole thing\n\t\t\t$content = call_user_func( $replace_function_callback, $content, $search, $replace, $replace_function_type );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Replace content, Used for function callback_on_non_matching_blocks(), because there is different order of params\n *\n * @param string Source content\n * @param array|string Search list\n * @param array|string Replace list\n * @param string Type of function: 'preg' -> preg_replace(), 'str' -> str_replace()\n * @param string The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit).\n * @return string Replaced content\n */\nfunction replace_content( $content, $search, $replace, $type = 'preg', $limit = -1 )\n{\n\tif( $limit == 0 )\n\t{\t// Strange request to nothing replace, Return original content:\n\t\treturn $content;\n\t}\n\n\tswitch( $type )\n\t{\n\t\tcase 'str':\n\t\t\tif( $limit == -1 )\n\t\t\t{\t// Unlimited replace:\n\t\t\t\treturn str_replace( $search, $replace, $content );\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Limited replace:\n\t\t\t\t$pos = strpos( $content, $search );\n\t\t\t\tif( $pos !== false )\n\t\t\t\t{\t// Do the limited replacements:\n\t\t\t\t\tfor( $p = 0; $p < $limit; $p++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( $pos === false )\n\t\t\t\t\t\t{\t// Stop searching:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$content = substr_replace( $content, $replace, $pos, strlen( $search ) );\n\t\t\t\t\t\t// Go to next searched substring:\n\t\t\t\t\t\t$pos = strpos( $content, $search, $pos + strlen( $replace ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $content;\n\t\t\t}\n\n\t\tdefault: // 'preg'\n\t\t\treturn preg_replace( $search, $replace, $content, $limit );\n\t}\n}\n\n\n/**\n * Replace content by callback, Used for function callback_on_non_matching_blocks(), because there is different order of params\n *\n * @param string Source content\n * @param array|string Search list\n * @param array|string Replace callback\n * @return string Replaced content\n */\nfunction replace_content_callback( $content, $search, $replace_callback )\n{\n\treturn preg_replace_callback( $search, $replace_callback, $content );\n}\n\n\n/**\n * Split a content by separators outside <code> and <pre> blocks\n *\n * @param string|array Separators\n * @param string Content\n * @param boolean TRUE - parenthesized expression of separator will be captured and returned as well\n * @return array The result of explode() function\n */\nfunction split_outcode( $separators, $content, $capture_separator = false )\n{\n\t// Check if the separators exists in content\n\tif( ! is_array( $separators ) )\n\t{ // Convert string to array with one element\n\t\t$separators = array( $separators );\n\t}\n\t$separators_exists = false;\n\tif( is_array( $separators ) )\n\t{ // Find in array\n\t\tforeach( $separators as $separator )\n\t\t{\n\t\t\tif( strpos( $content, $separator ) !== false )\n\t\t\t{ // Separator is found\n\t\t\t\t$separators_exists = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $separators_exists )\n\t{ // There are separators in content, Split the content:\n\n\t\t// Initialize temp values for replace the separators\n\t\tif( $capture_separator )\n\t\t{\n\t\t\t$rplc_separators = array();\n\t\t\tforeach( $separators as $s => $separator )\n\t\t\t{\n\t\t\t\t$rplc_separators[] = '#separator'.$s.'='.md5( rand() ).'#';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$rplc_separators = '#separator='.md5( rand() ).'#';\n\t\t}\n\t\t// Replace the content separators with temp value\n\t\tif( strpos( $content, '<code' ) !== false || strpos( $content, '<pre' ) !== false )\n\t\t{ // Call replace_separators_callback() on everything outside code/pre:\n\t\t\t$content = callback_on_non_matching_blocks( $content,\n\t\t\t\t'~<(code|pre)[^>]*>.*?</\\1>~is',\n\t\t\t\t'replace_content', array( $separators, $rplc_separators, 'str' ) );\n\t\t}\n\t\telse\n\t\t{ // No code/pre blocks, replace on the whole thing\n\t\t\t$content = str_replace( $separators, $rplc_separators, $content );\n\t\t}\n\n\t\tif( $capture_separator )\n\t\t{ // Save the separators\n\t\t\t$split_regexp = '~('.implode( '|', $rplc_separators ).')~s';\n\t\t\t$content_parts = preg_split( $split_regexp, $content, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t\t\tforeach( $content_parts as $c => $content_part )\n\t\t\t{\n\t\t\t\tif( ( $s = array_search( $content_part, $rplc_separators ) ) !== false )\n\t\t\t\t{ // Replace original separator back\n\t\t\t\t\t$content_parts[ $c ] = $separators[ $s ];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $content_parts;\n\t\t}\n\t\telse\n\t\t{ // Return only splitted content(without separators)\n\t\t\treturn explode( $rplc_separators, $content );\n\t\t}\n\t}\n\telse\n\t{ // No separators in content, Return whole content as one element of array\n\t\treturn array( $content );\n\t}\n}\n\n\n/**\n * Remove [image:] and [video:] short tags that are inside <p> blocks and move them before the paragraph\n *\n * @param string Source content\n * @param string Search pattern\n * @param function Optional callback function that accepts search pattern and current paragraph as arguments and returns the new_paragraph\n * @return string Content\n */\nfunction move_short_tags( $content, $pattern = NULL, $callback = NULL )\n{\t// Move [image:] and [video:] tags out of <p> blocks\n\n\t// Get individual paragraphs\n\tpreg_match_all( '/<p[\\s*|>].*?<\\/p>/i', $content, $paragraphs );\n\n\tif( is_null( $pattern ) )\n\t{\n\t\t$pattern = '/\\[(image|video):\\d+:?[^\\[\\]]*\\]/i';\n\t}\n\n\tforeach( $paragraphs[0] as $i => $current_paragraph )\n\t{\n\t\tif( $callback )\n\t\t{\n\t\t\t$new_paragraph = call_user_func( $callback, $pattern, $current_paragraph );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// get short tags in each paragraph\n\t\t\tpreg_match_all( $pattern, $current_paragraph, $matches );\n\t\t\t$new_paragraph = $current_paragraph;\n\n\t\t\tif( $matches[0] )\n\t\t\t{\n\t\t\t\t$new_paragraph = str_replace( $matches[0], '', $current_paragraph );\n\n\t\t\t\t// convert &nbsp; to space\n\t\t\t\t$x = str_replace( \"\\xC2\\xA0\", ' ', $new_paragraph );\n\n\t\t\t\tif( preg_match( '/<p[\\s*|>]\\s*<\\/p>/i', $x ) === 1 )\n\t\t\t\t{ // remove paragraph the if moving out the short tag will result to an empty paragraph\n\t\t\t\t\t$new_paragraph = '';\n\t\t\t\t}\n\n\t\t\t\t$new_paragraph = implode( '', $matches[0] ).$new_paragraph;\n\t\t\t}\n\t\t}\n\t\t$content = str_replace( $current_paragraph, $new_paragraph, $content );\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Make links clickable in a given text.\n *\n * It replaces only text which is not between <a> tags already.\n *\n * @todo dh> this should not replace links in tags! currently fails for something\n *           like '<img src=\" http://example.com/\" />' (not usual though!)\n * fp> I am trying to address this by not replacing anything inside tags\n * fp> This should be replaced by a clean state machine (one single variable for current state)\n *\n * {@internal This function gets tested in misc.funcs.simpletest.php.}}\n *\n * @param string Text\n * @param string Url delimeter\n * @param string Callback function name\n * @param string Additional attributes for tag <a>\n * @param boolean TRUE to exclude links from header tags like h1, h2, etc.\n * @return string\n */\nfunction make_clickable( $text, $moredelim = '&amp;', $callback = 'make_clickable_callback', $additional_attrs = '', $exclude_headers = false )\n{\n\t$r = '';\n\t$inside_tag = false;\n\t$in_a_tag = false;\n\t$in_code_tag = false;\n\t$in_tag_quote = false;\n\t$in_header_tag = false;\n\t$from_pos = 0;\n\t$i = 0;\n\t$n = strlen($text);\n\n\t// Not using callback_on_non_matching_blocks(), because it requires\n\t// wellformed HTML and the implementation below should be\n\t// faster and less memory intensive (tested for some example content)\n\twhile( $i < $n )\n\t{\t// Go through each char in string... (we will fast forward from tag to tag)\n\t\tif( $inside_tag )\n\t\t{\t// State: We're currently inside some tag:\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '>':\n\t\t\t\t\tif( $in_tag_quote )\n\t\t\t\t\t{ // This is in a quoted string so it doesn't really matter...\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// end of tag:\n\t\t\t\t\t$inside_tag = false;\n\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos+1);\n\t\t\t\t\t$from_pos = $i+1;\n\t\t\t\t\t// $r .= '}';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// This is the beginning or the end of a quoted string:\n\t\t\t\t\tif( ! $in_tag_quote )\n\t\t\t\t\t{\n\t\t\t\t\t\t$in_tag_quote = $text[$i];\n\t\t\t\t\t}\n\t\t\t\t\telseif( $in_tag_quote == $text[$i] )\n\t\t\t\t\t{\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_a_tag )\n\t\t{\t// In a link but no longer inside <a>...</a> tag or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower(substr($text, $i+1, 3)) == '/a>' )\n\t\t\t\t\t{\t// Ok, this is the end tag of the link:\n\t\t\t\t\t\t// $r .= substr($text, $from_pos, $i-$from_pos+4);\n\t\t\t\t\t\t// $from_pos = $i+4;\n\t\t\t\t\t\t$i += 4;\n\t\t\t\t\t\t// pre_dump( 'END A TAG: '.substr($text, $from_pos, $i-$from_pos) );\n\t\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos);\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_a_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_code_tag )\n\t\t{\t// In a code but no longer inside <code>...</code> tag or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower(substr($text, $i+1, 5)) == '/code' )\n\t\t\t\t\t{\t// Ok, this is the end tag of the code:\n\t\t\t\t\t\t// $r .= substr($text, $from_pos, $i-$from_pos+4);\n\t\t\t\t\t\t// $from_pos = $i+4;\n\t\t\t\t\t\t$i += 7;\n\t\t\t\t\t\t// pre_dump( 'END A TAG: '.substr($text, $from_pos, $i-$from_pos) );\n\t\t\t\t\t\t$r .= substr($text, $from_pos, $i-$from_pos);\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_code_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telseif( $in_header_tag )\n\t\t{\t// In a code but no longer inside <h#>...</h#> tags or any other embedded tag like <strong> or whatever\n\t\t\tswitch( $text[$i] )\n\t\t\t{\n\t\t\t\tcase '<':\n\t\t\t\t\tif( strtolower( substr( $text, $i+1, 3 ) ) == '/'.$in_header_tag )\n\t\t\t\t\t{\t// Ok, this is the end tag of the header:\n\t\t\t\t\t\t$i += 5;\n\t\t\t\t\t\t$r .= substr( $text, $from_pos, $i - $from_pos );\n\t\t\t\t\t\t$from_pos = $i;\n\t\t\t\t\t\t$in_code_tag = false;\n\t\t\t\t\t\t$in_tag_quote = false;\n\t\t\t\t\t\t$in_header_tag = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{ // State: we're not currently in any tag:\n\t\t\t// Find next tag opening:\n\t\t\t$i = strpos($text, '<', $i);\n\t\t\tif( $i === false )\n\t\t\t{ // No more opening tags:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$inside_tag = true;\n\t\t\t$in_tag_quote = false;\n\t\t\t// s$r .= '{'.$text[$i+1];\n\n\t\t\tif( ($text[$i+1] == 'a' || $text[$i+1] == 'A') && ctype_space($text[$i+2]) )\n\t\t\t{ // opening \"A\" tag\n\t\t\t\t$in_a_tag = true;\n\t\t\t}\n\n\t\t\tif( ( substr( $text, $i+1, 4 ) == 'code') )\n\t\t\t{ // opening \"code\" tag\n\t\t\t\t$in_code_tag = true;\n\t\t\t}\n\n\t\t\tif( $exclude_headers && preg_match( '/^h[1-6]$/', substr( $text, $i+1, 2 ), $h_match ) )\n\t\t\t{\t// opening \"h1\" - \"h6\" tags:\n\t\t\t\t$in_header_tag = $h_match[0];\n\t\t\t}\n\n\t\t\t// Make the text before the opening < clickable:\n\t\t\t$r .= call_user_func_array( $callback, array( substr( $text, $from_pos, $i-$from_pos ), $moredelim, $additional_attrs ) );\n\t\t\t$from_pos = $i;\n\n\t\t\t// $i += 2;\n\t\t}\n\n\t\t$i++;\n\t}\n\n\t// the remaining part:\n\tif( $in_a_tag )\n\t{ // may happen for invalid html:\n\t\t$r .= substr($text, $from_pos);\n\t}\n\telse\n\t{\t// Make remplacements in the remaining part:\n\t\t$r .= call_user_func_array( $callback, array( substr( $text, $from_pos ), $moredelim, $additional_attrs ) );\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Callback function for {@link make_clickable()}.\n *\n * original function: phpBB, extended here for AIM & ICQ\n * fplanque restricted :// to http:// and mailto://\n * Fixed to not include trailing dot and comma.\n *\n * fp> I'm thinking of moving this into the autolinks plugin (only place where it's used)\n *     and break it up into something more systematic.\n *\n * @param string Text\n * @param string Url delimeter\n * @param string Additional attributes for tag <a>\n * @return string The clickable text.\n */\nfunction make_clickable_callback( $text, $moredelim = '&amp;', $additional_attrs = '' )\n{\n\tif( !empty( $additional_attrs ) )\n\t{\n\t\t$additional_attrs = ' '.trim( $additional_attrs );\n\t}\n\t//return $text;\n\t/*preg_match( '/<code>([.\\r\\n]+?)<\\/code>/i', $text, $matches );\n\tpre_dump( $text, $matches );*/\n\n\t$pattern_domain = '([\\p{L}0-9\\-]+\\.[\\p{L}0-9\\-.\\~]+)'; // a domain name (not very strict)\n\t$text = preg_replace(\n\t\t/* Tblue> I removed the double quotes from the first RegExp because\n\t\t\t\t  it made URLs in tag attributes clickable.\n\t\t\t\t  See http://forums.b2evolution.net/viewtopic.php?p=92073 */\n\t\tarray( '#(^|[\\s>\\(]|\\[url=)(https?|mailto)://([^\"<>{}\\s]+[^\".,:;!\\?<>{}\\s\\]\\)])#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)aim:([^\",<\\s\\]\\)]+)#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)icq:(\\d+)#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)www\\.'.$pattern_domain.'([^\"<>{}\\s]*[^\".,:;!\\?\\s\\]\\)])#i',\n\t\t\t'#(^|[\\s>\\(]|\\[url=)([a-z0-9\\-_.]+?)@'.$pattern_domain.'([^\".,:;!\\?<\\s\\]\\)]+)#i', ),\n\t\tarray( '$1<a href=\"$2://$3\"'.$additional_attrs.'>$2://$3</a>',\n\t\t\t'$1<a href=\"aim:goim?screenname=$2$3'.$moredelim.'message='.rawurlencode(T_('Hello')).'\"'.$additional_attrs.'>$2$3</a>',\n\t\t\t'$1<a href=\"http://wwp.icq.com/scripts/search.dll?to=$2\"'.$additional_attrs.'>$2</a>',\n\t\t\t'$1<a href=\"http://www.$2$3$4\"'.$additional_attrs.'>www.$2$3$4</a>',\n\t\t\t'$1<a href=\"mailto:$2@$3$4\"'.$additional_attrs.'>$2@$3$4</a>', ),\n\t\t$text );\n\n\treturn $text;\n}\n\n\n/***** // Formatting functions *****/\n\n/**\n * Convert timestamp to MySQL/ISO format.\n *\n * @param integer UNIX timestamp\n * @return string Date formatted as \"Y-m-d H:i:s\"\n */\nfunction date2mysql( $ts )\n{\n\treturn date( 'Y-m-d H:i:s', $ts );\n}\n\n/**\n * Convert a MYSQL date to a UNIX timestamp.\n *\n * @param string Date formatted as \"Y-m-d H:i:s\"\n * @param boolean true to use GM time\n * @return integer UNIX timestamp\n */\nfunction mysql2timestamp( $m, $useGM = false )\n{\n\t$func = $useGM ? 'gmmktime' : 'mktime';\n\treturn $func(\n\t\tintval( substr( $m, 11, 2 ) ),  // hour\n\t\tintval( substr( $m, 14, 2 ) ),  // minute\n\t\tintval( substr( $m, 17, 2 ) ),  // second\n\t\tintval( substr( $m, 5, 2 ) ),   // month\n\t\tintval( substr( $m, 8, 2 ) ),   // day\n\t\tintval( substr( $m, 0, 4 ) ) ); // year\n}\n\n/**\n * Convert a MYSQL date -- WITHOUT the time -- to a UNIX timestamp\n *\n * @param string Date formatted as \"Y-m-d\"\n * @param boolean true to use GM time\n * @return integer UNIX timestamp\n */\nfunction mysql2datestamp( $m, $useGM = false )\n{\n\t$func = $useGM ? 'gmmktime' : 'mktime';\n\treturn $func( 0, 0, 0, substr($m,5,2), substr($m,8,2), substr($m,0,4) );\n}\n\n/**\n * Format a MYSQL date to current locale date format.\n *\n * @param string MYSQL date YYYY-MM-DD HH:MM:SS\n */\nfunction mysql2localedate( $mysqlstring )\n{\n\treturn mysql2date( locale_datefmt(), $mysqlstring );\n}\n\nfunction mysql2localetime( $mysqlstring )\n{\n\treturn mysql2date( locale_timefmt(), $mysqlstring );\n}\n\nfunction mysql2localedatetime( $mysqlstring )\n{\n\treturn mysql2date( locale_datefmt().' '.locale_timefmt(), $mysqlstring );\n}\n\nfunction mysql2localedatetime_spans( $mysqlstring, $datefmt = NULL, $timefmt = NULL )\n{\n\tif( is_null( $datefmt ) )\n\t{\n\t\t$datefmt = locale_datefmt();\n\t}\n\tif( is_null( $timefmt ) )\n\t{\n\t\t$timefmt = locale_timefmt();\n\t}\n\n\treturn '<span class=\"date\">'\n\t\t\t\t\t.mysql2date( $datefmt, $mysqlstring )\n\t\t\t\t\t.'</span> <span class=\"time\">'\n\t\t\t\t\t.mysql2date( $timefmt, $mysqlstring )\n\t\t\t\t\t.'</span>';\n}\n\n\n/**\n * Format a MYSQL date.\n *\n * @param string enhanced format string\n * @param string MYSQL date YYYY-MM-DD HH:MM:SS\n * @param boolean true to use GM time\n */\nfunction mysql2date( $dateformatstring, $mysqlstring, $useGM = false )\n{\n\t$m = $mysqlstring;\n\tif( empty($m) || ($m == '0000-00-00 00:00:00' ) )\n\t\treturn false;\n\n\t// Get a timestamp:\n\t$unixtimestamp = mysql2timestamp( $m );\n\n\treturn date_i18n( $dateformatstring, $unixtimestamp, $useGM );\n}\n\n\n/**\n * Date internationalization: same as date() formatting but with i18n support.\n *\n * @todo dh> support for MySQL date format instead of $unixtimestamp? This would simplify callees, where currently mktime() is used.\n * @param string enhanced format string\n * @param integer UNIX timestamp\n * @param boolean true to use GM time\n */\nfunction date_i18n( $dateformatstring, $unixtimestamp, $useGM = false )\n{\n\tglobal $month, $month_abbrev, $weekday, $weekday_abbrev, $weekday_letter;\n\tglobal $localtimenow, $time_difference;\n\n\tif( $dateformatstring == 'isoZ' )\n\t{ // full ISO 8601 format\n\t\t$dateformatstring = 'Y-m-d\\TH:i:s\\Z';\n\t}\n\n\tif( $useGM )\n\t{ // We want a Greenwich Meridian time:\n\t\t// TODO: dh> what's the point of the substraction? UNIX timestamp should contain no time_difference in the first place?! Otherwise it should be substracted for !$useGM, too.\n\t\t// TODO: dh> Why does $useGM do not get the special symbols handling?\n\t\t$r = gmdate($dateformatstring, ($unixtimestamp - $time_difference));\n\t}\n\telse\n\t{ // We want default timezone time:\n\n\t\t/*\n\t\tSpecial symbols:\n\t\t\t'b': wether it's today (1) or not (0)\n\t\t\t'l': weekday\n\t\t\t'D': weekday abbrev\n\t\t\t'e': weekday letter\n\t\t\t'F': month\n\t\t\t'M': month abbrev\n\t\t*/\n\n\t\t#echo $dateformatstring, '<br />';\n\n\t\t// protect special symbols, that date() would need proper locale set for\n\t\t$protected_dateformatstring = preg_replace( '/(?<!\\\\\\)([blDeFM])/', '@@@\\\\\\$1@@@', $dateformatstring );\n\n\t\t#echo $protected_dateformatstring, '<br />';\n\n\t\t$r = date( $protected_dateformatstring, $unixtimestamp );\n\n\t\tif( $protected_dateformatstring != $dateformatstring )\n\t\t{ // we had special symbols, replace them\n\n\t\t\t$istoday = ( date('Ymd',$unixtimestamp) == date('Ymd',$localtimenow) ) ? '1' : '0';\n\t\t\t$datemonth = date('m', $unixtimestamp);\n\t\t\t$dateweekday = date('w', $unixtimestamp);\n\n\t\t\t// replace special symbols\n\t\t\t$r = str_replace( array(\n\t\t\t\t\t\t'@@@b@@@',\n\t\t\t\t\t\t'@@@l@@@',\n\t\t\t\t\t\t'@@@D@@@',\n\t\t\t\t\t\t'@@@e@@@',\n\t\t\t\t\t\t'@@@F@@@',\n\t\t\t\t\t\t'@@@M@@@',\n\t\t\t\t\t\t),\n\t\t\t\t\tarray( $istoday,\n\t\t\t\t\t\ttrim(T_($weekday[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($weekday_abbrev[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($weekday_letter[$dateweekday])),\n\t\t\t\t\t\ttrim(T_($month[$datemonth])),\n\t\t\t\t\t\ttrim(T_($month_abbrev[$datemonth])) ),\n\t\t\t\t\t$r );\n\t\t}\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Add given # of days to a timestamp\n *\n * @param integer timestamp\n * @param integer days\n * @return integer timestamp\n */\nfunction date_add_days( $timestamp, $days )\n{\n\treturn mktime( date('H',$timestamp), date('m',$timestamp), date('s',$timestamp),\n\t\t\t\t\t\t\t\tdate('m',$timestamp), date('d',$timestamp)+$days, date('Y',$timestamp)  );\n}\n\n/**\n * Format dates into a string in a way similar to sprintf()\n */\nfunction date_sprintf( $string, $timestamp )\n{\n\tglobal $date_sprintf_timestamp;\n\t$date_sprintf_timestamp = $timestamp;\n\n\treturn preg_replace_callback( '/%\\{(.*?)\\}/', 'date_sprintf_callback', $string );\n}\n\nfunction date_sprintf_callback( $matches )\n{\n\tglobal $date_sprintf_timestamp;\n\n\treturn date_i18n( $matches[1], $date_sprintf_timestamp );\n}\n\n\n/**\n * Get date name when date was happened\n *\n * @param integer Timestamp\n * @return string Name of date (Today, Yesterday, x days ago, x months ago, x years ago)\n */\nfunction date_ago( $timestamp )\n{\n\tglobal $servertimenow;\n\n\t$days = floor( ( $servertimenow - $timestamp ) / 86400 );\n\t$months = ceil( $days / 31 );\n\n\tif( $days < 1 )\n\t{\t// Today\n\t\treturn T_('Today');\n\t}\n\telseif( $days == 1 )\n\t{\t// Yesterday\n\t\treturn T_('Yesterday');\n\t}\n\telseif( $days > 1 && $days <= 31 )\n\t{\t// Days\n\t\treturn sprintf( T_('%s days ago'), $days );\n\t}\n\telseif( $days > 31 && $months <= 12 )\n\t{\t// Months\n\t\treturn sprintf( $months == 1 ? T_('%s month ago') : T_('%s months ago'), $months );\n\t}\n\telse\n\t{\t// Years\n\t\t$years = floor( $months / 12 );\n\t\treturn sprintf( $years == 1 ? T_('%s year ago') : T_('%s years ago'), $years );\n\t}\n}\n\n\n/**\n * Convert seconds to readable period\n *\n * @param integer Seconds\n * @return string Readable time period\n */\nfunction seconds_to_period( $seconds )\n{\n\t$periods = array(\n\t\tarray( 31536000, T_('1 year'),   T_('%s years') ), // 365 days\n\t\tarray( 2592000,  T_('1 month'),  T_('%s months') ), // 30 days\n\t\tarray( 86400,    T_('1 day'),    T_('%s days') ),\n\t\tarray( 3600,     T_('1 hour'),   T_('%s hours') ),\n\t\tarray( 60,       T_('1 minute'), T_('%s minutes') ),\n\t\tarray( 1,        T_('1 second'), T_('%s seconds') ),\n\t);\n\n\tforeach( $periods as $p_info )\n\t{\n\t\t$period_value = intval( $seconds / $p_info[0] * 10 ) /10;\n\t\tif( $period_value >= 1 )\n\t\t{ // Stop on this period\n\t\t\tif( $period_value == 1 )\n\t\t\t{ // One unit of period\n\t\t\t\t$period_text = $p_info[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Two and more units of period\n\t\t\t\t$period_text = sprintf( $p_info[2], $period_value );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !isset( $period_text ) )\n\t{ // 0 seconds\n\t\t$period_text = sprintf( T_('%s seconds'), 0 );\n\t}\n\n\treturn $period_text;\n}\n\n\n/**\n * Converts an ISO 8601 date to MySQL DateTime format.\n *\n * @param string date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}.\n * @return string date and time in MySQL DateTime format Y-m-d H:i:s.\n */\nfunction iso8601_to_datetime( $iso_date )\n{\n\treturn preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $iso_date);\n}\n\n\n/**\n * Converts a MySQL DateTime to ISO 8601 date format.\n *\n * @param string date and time in MySQL DateTime format Y-m-d H:i:s\n * @return string date and time in ISO 8601 format {@link http://en.wikipedia.org/wiki/ISO_8601}.\n */\nfunction datetime_to_iso8601( $datetime, $useGM = false )\n{\n\t$iso_date = mysql2date('U', $datetime);\n\n\tif( $useGM )\n\t{\n\t\t$iso_date = gmdate('Ymd', $iso_date).'T'.gmdate('H:i:s', $iso_date);\n\t}\n\telse\n\t{\n\t\t$iso_date = date('Ymd', $iso_date).'T'.date('H:i:s', $iso_date);\n\t}\n\n\treturn $iso_date;\n}\n\n\n/**\n *\n * @param integer year\n * @param integer month (0-53)\n * @param integer 0 for sunday, 1 for monday\n */\nfunction get_start_date_for_week( $year, $week, $startofweek )\n{\n\t$new_years_date = mktime( 0, 0, 0, 1, 1, $year );\n\t$weekday = date('w', $new_years_date);\n\t// echo '<br> 1st day is a: '.$weekday;\n\n\t// How many days until start of week:\n\t$days_to_new_week = (7 - $weekday + $startofweek) % 7;\n\t// echo '<br> days to new week: '.$days_to_new_week;\n\n\t// We now add the required number of days to find the 1st sunday/monday in the year:\n\t//$first_week_start_date = $new_years_date + $days_to_new_week * 86400;\n\t//echo '<br> 1st week starts on '.date( 'Y-m-d H:i:s', $first_week_start_date );\n\n\t// We add the number of requested weeks:\n\t// This will fail when passing to Daylight Savings Time: $date = $first_week_start_date + (($week-1) * 604800);\n\t$date = mktime( 0, 0, 0, 1, $days_to_new_week + 1 + ($week-1) * 7, $year );\n\t// echo '<br> week '.$week.' starts on '.date( 'Y-m-d H:i:s', $date );\n\n\treturn $date;\n}\n\n\n\n/**\n * Get start and end day of a week, based on day f the week and start-of-week\n *\n * Used by Calendar\n *\n * @param date\n * @param integer 0 for Sunday, 1 for Monday\n */\nfunction get_weekstartend( $date, $startOfWeek )\n{\n\twhile( date('w', $date) <> $startOfWeek )\n\t{\n\t\t// echo '<br />'.date('Y-m-d H:i:s w', $date).' - '.$startOfWeek;\n\t\t// mktime is needed so calculations work for DST enabling. Example: March 30th 2008, start of week 0 sunday\n\t\t$date = mktime( 0, 0, 0, date('m',$date), date('d',$date)-1, date('Y',$date) );\n\t}\n\t// echo '<br />'.date('Y-m-d H:i:s w', $date).' = '.$startOfWeek;\n\t$week['start'] = $date;\n\t$week['end']   = $date + 604800; // 7 days\n\n\t// pre_dump( 'weekstartend: ', date( 'Y-m-d', $week['start'] ), date( 'Y-m-d', $week['end'] ) );\n\n\treturn( $week );\n}\n\n\n/**\n * Get datetime rounded to lower minute. This is meant to remove seconds and\n * leverage MySQL's query cache by having SELECT queries remain identical for 60 seconds instead of just 1.\n *\n * @param integer UNIX timestamp\n * @param string Format (defaults to \"Y-m-d H:i\"). Use \"U\" for UNIX timestamp.\n */\nfunction remove_seconds($timestamp, $format = 'Y-m-d H:i')\n{\n\treturn date($format, floor($timestamp/60)*60);\n}\n\n\n/**\n * Convert from seconds to months, days, hours, minutes and seconds\n *\n * @param integer duration in seconds\n * @return array of [ years, months, days, hours, minutes, seconds ]\n */\nfunction get_duration_fields( $duration )\n{\n\t$result = array();\n\n\t$year_seconds = 31536000; // 1 year\n\t$years = floor( $duration / $year_seconds );\n\t$duration = $duration - $years * $year_seconds;\n\t$result[ 'years' ] = $years;\n\n\t$month_seconds = 2592000; // 1 month\n\t$months = floor( $duration / $month_seconds );\n\t$duration = $duration - $months * $month_seconds;\n\t$result[ 'months' ] = $months;\n\n\t$day_seconds = 86400; // 1 day\n\t$days = floor( $duration / $day_seconds );\n\t$duration = $duration - $days * $day_seconds;\n\t$result[ 'days' ] = $days;\n\n\t$hour_seconds = 3600; // 1 hour\n\t$hours = floor( $duration / $hour_seconds );\n\t$duration = $duration - $hours * $hour_seconds;\n\t$result[ 'hours' ] = $hours;\n\n\t$minute_seconds = 60; // 1 minute\n\t$minutes = floor( $duration / $minute_seconds );\n\t$duration = $duration - $minutes * $minute_seconds;\n\t$result[ 'minutes' ] = $minutes;\n\n\t$result[ 'seconds' ] = $duration;\n\treturn $result;\n}\n\n\n/**\n * Get a title of duration\n *\n * @param integer Duration in seconds\n * @param array Titles\n * @return string Duration title\n */\nfunction get_duration_title( $duration, $titles = array() )\n{\n\t$titles = array_merge( array(\n\t\t'year'   => T_('Last %d years'),\n\t\t'month'  => T_('Last %d months'),\n\t\t'day'    => T_('Last %d days'),\n\t\t'hour'   => T_('Last %d hours'),\n\t\t'minute' => T_('Last %d minutes'),\n\t\t'second' => T_('Last %d seconds'),\n\t\t), $titles );\n\n\t$delay_fields = get_duration_fields( $duration );\n\n\tif( ! empty( $delay_fields[ 'years' ] ) )\n\t{ // Years\n\t\treturn sprintf( $titles['year'], $delay_fields[ 'years' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'months' ] ) )\n\t{ // Months\n\t\treturn sprintf( $titles['month'], $delay_fields[ 'months' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'days' ] ) )\n\t{ // Days\n\t\treturn sprintf( $titles['day'], $delay_fields[ 'days' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'hours' ] ) )\n\t{ // Hours\n\t\treturn sprintf( $titles['hour'], $delay_fields[ 'hours' ] );\n\t}\n\telseif( ! empty( $delay_fields[ 'minutes' ] ) )\n\t{ // Minutes\n\t\treturn sprintf( $titles['minute'], $delay_fields[ 'minutes' ] );\n\t}\n\telse\n\t{ // Seconds\n\t\treturn sprintf( $titles['second'], $delay_fields[ 'seconds' ] );\n\t}\n}\n\nfunction get_lastseen_date( $date, $view = 'exact_date', $cheat = 0 )\n{\n\t$result = mysql2localedate( $date );\n\n\tif( $view == 'blurred_date' )\n\t{\n\t\t$result = (int)( ( ( time() - strtotime( $date ) ) / 86400 ) - $cheat);\n\n\t\tif( $result < 0 )\n\t\t{\n\t\t\t$result = 0;\n\t\t}\n\n\t\tif( $result < 3 )\n\t\t{\n\t\t\t$result = T_('less than 3 days ago');\n\t\t}\n\t\telseif( $result < 7 )\n\t\t{\n\t\t\t$result = T_('less than a week ago');\n\t\t}\n\t\telseif( $result < 30 )\n\t\t{\n\t\t\t$result = T_('less than a month ago');\n\t\t}\n\t\telseif( $result < 90 )\n\t\t{\n\t\t\t$result = T_('less than 3 months ago');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$result = T_('more than 3 months ago');\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Validate variable\n *\n * @param string param name\n * @param string validator function name\n * @param boolean true if variable value can't be empty\n * @param custom error message\n * @return boolean true if OK\n */\nfunction param_validate( $variable, $validator, $required = false, $custom_msg = NULL )\n{\n\t/* Tblue> Note: is_callable() does not check whether a function is\n\t *        disabled (http://www.php.net/manual/en/function.is-callable.php#79151).\n\t */\n\tif( ! is_callable( $validator ) )\n\t{\n\t\tdebug_die( 'Validator function '.$validator.'() is not callable!' );\n\t}\n\n\tif( ! isset( $GLOBALS[$variable] ) )\n\t{\t// Variable not set, we cannot handle this using the validator function...\n\t\tif( $required )\n\t\t{\t// Add error:\n\t\t\tparam_check_not_empty( $variable, $custom_msg );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif( $GLOBALS[$variable] === '' && ! $required )\n\t{\t// Variable is empty or not set. That's fine since it isn't required:\n\t\treturn true;\n\t}\n\n\t$msg = $validator( $GLOBALS[$variable] );\n\n\tif( !empty( $msg ) )\n\t{\n\t\tif( !empty( $custom_msg ) )\n\t\t{\n\t\t\t$msg = $custom_msg;\n\t\t}\n\n\t\tparam_error( $variable, $msg );\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the param is a decimal number\n *\n * @param string decimal to check\n * @return boolean true if OK\n */\nfunction is_decimal( $decimal )\n{\n\treturn preg_match( '#^[0-9]*(\\.[0-9]+)?$#', $decimal );\n}\n\n\n/**\n * Checks if the param is an integer (no float, e.g. 3.14).\n *\n * @param string number to check\n * @return boolean true if OK\n */\nfunction is_number( $number )\n{\n\treturn preg_match( '#^[0-9]+$#', $number );\n}\n\n\n/**\n * Check that email address looks valid.\n *\n * @param string email address to check\n * @param string Format to use ('simple', 'rfc')\n *    'simple':\n *      Single email address.\n *    'rfc':\n *      Full email address, may include name (RFC2822)\n *      - example@example.org\n *      - Me <example@example.org>\n *      - \"Me\" <example@example.org>\n * @param boolean Return the match or boolean\n *\n * @return bool|array Either true/false or the match (see {@link $return_match})\n */\nfunction is_email( $email, $format = 'simple', $return_match = false )\n{\n\t#$chars = \"/^([a-z0-9_]|\\\\-|\\\\.)+@(([a-z0-9_]|\\\\-)+\\\\.)+[a-z]{2,4}\\$/i\";\n\n\tswitch( $format )\n\t{\n\t\tcase 'rfc':\n\t\tcase 'rfc2822':\n\t\t\t/**\n\t\t\t * Regexp pattern converted from: http://www.regexlib.com/REDetails.aspx?regexp_id=711\n\t\t\t * Extended to allow escaped quotes.\n\t\t\t */\n\t\t\t$pattern_email = '/^\n\t\t\t\t(\n\t\t\t\t\t(?>[a-zA-Z\\d!\\#$%&\\'*+\\-\\/=?^_`{|}~]+\\x20*\n\t\t\t\t\t\t|\"( \\\\\\\" | (?=[\\x01-\\x7f])[^\"\\\\\\] | \\\\[\\x01-\\x7f] )*\"\\x20*)* # Name\n\t\t\t\t\t(<)\n\t\t\t\t)?\n\t\t\t\t(\n\t\t\t\t\t(?!\\.)(?>\\.?[a-zA-Z\\d!\\#$%&\\'*+\\-\\/=?^_`{|}~]+)+\n\t\t\t\t\t|\"( \\\\\\\" | (?=[\\x01-\\x7f])[^\"\\\\\\] | \\\\[\\x01-\\x7f] )* \" # quoted mailbox name\n\t\t\t\t)\n\t\t\t\t@\n\t\t\t\t(\n\t\t\t\t\t((?!-)[a-zA-Z\\d\\-]+(?<!-)\\.)+[a-zA-Z]{2,}\n\t\t\t\t\t|\n\t\t\t\t\t\\[(\n\t\t\t\t\t\t( (?(?<!\\[)\\.)(25[0-5] | 2[0-4]\\d | [01]?\\d?\\d) ){4}\n\t\t\t\t\t\t|\n\t\t\t\t\t\t[a-zA-Z\\d\\-]*[a-zA-Z\\d]:( (?=[\\x01-\\x7f])[^\\\\\\[\\]] | \\\\[\\x01-\\x7f] )+\n\t\t\t\t\t)\\]\n\t\t\t\t)\n\t\t\t\t(?(3)>) # match \">\" if it was there\n\t\t\t\t$/x';\n\t\t\tbreak;\n\n\t\tcase 'simple':\n\t\tdefault:\n\t\t\t// '/^\\S+@[^\\.\\s]\\S*\\.[a-z]{2,}$/i'\n\t\t\t$pattern_email = '~^(([_a-z0-9-]+)(\\.[_a-z0-9-]+)*@([a-z0-9-]+)(\\.[a-z0-9-]+)*(\\.[a-z]{2,}))$~i';\n\t\t\tbreak;\n\t}\n\n\tif( strpos( $email, '@' ) !== false && strpos( $email, '.' ) !== false )\n\t{\n\t\tif( $return_match )\n\t\t{\n\t\t\tpreg_match( $pattern_email, $email, $match );\n\t\t\treturn $match;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (bool)preg_match( $pattern_email, $email );\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $return_match ? array() : false;\n\t}\n}\n\n\n/**\n * Checks if the phone number is valid\n *\n * @param string phone number to check\n * @return boolean true if OK\n */\nfunction is_phone( $phone )\n{\n\treturn preg_match( '|^\\+?[\\-*#/(). 0-9]+$|', $phone );\n}\n\n\n/**\n * Checks if the url is valid\n *\n * @param string url to check\n * @return boolean true if OK\n */\nfunction is_url( $url )\n{\n\tif( validate_url( $url, 'posting', false ) )\n\t{\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the word is valid\n *\n * @param string word to check\n * @return boolean true if OK\n */\nfunction is_word( $word )\n{\n\treturn preg_match( '#^[A-Za-z]+$#', $word );\n}\n\n\n/**\n * Check if the login is valid (in terms of allowed chars)\n *\n * @param string login\n * @return boolean true if OK\n */\nfunction is_valid_login( $login, $force_strict_logins = false )\n{\n\tglobal $Settings;\n\n\t$strict_logins = isset( $Settings ) ? $Settings->get('strict_logins') : 1;\n\n\t// NOTE: in some places usernames are typed in by other users (messaging) or admins.\n\t// Having cryptic logins with hard to type letters is a PITA.\n\n\t// Step 1\n\t// Forbid the following characters in logins\n\tif( preg_match( '~[\\'\"><@&\\s]~', $login ) )\n\t{\t// WARNING: allowing ' or \" or > or < will open security issues!\n\t\t// NOTE: allowing @ will make some \"average\" users use their email address (not good for their spam health)\n\t\t// NOTE: we do not allow whitespace in logins\n\t\treturn false;\n\t}\n\n\t// Step 2\n\tif( ($strict_logins || $force_strict_logins) && ! preg_match( '~^[A-Za-z0-9_.]+$~', $login ) )\n\t{\t// WARNING: allowing special chars like latin 1 accented chars ( \\xDF-\\xF6\\xF8-\\xFF ) will create issues with\n\t\t// user media directory names (tested on Max OS X) -- Do no allow any of this until we have a clean & safe media dir name generator.\n\n\t\t// fp> TODO: check why a dash '-' prevents renaming the fileroot\n\t\treturn false;\n\t}\n\telseif( ! $strict_logins )\n\t{\t// We allow any character that is not explicitly forbidden in Step 1\n\t\t// Enforce additional limitations\n\t\t$login = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $login ); // Kill octets\n\t\t$login = preg_replace( '/&.+?;/', '', $login ); // Kill entities\n\t}\n\n\t// Step 3\n\t// Special case, the login is valid however we forbid it's usage.\n\t// param_check_valid_login() will display a special error message in this case.\n\tif( preg_match( '~^usr_~', $login ) )\n\t{\t// Logins cannot start with 'usr_', this prefix is reserved for system use\n\t\t// We create user media directories for users with non-ASCII logins in format /media/users/usr_55/, where 55 is user ID\n\t\treturn 'usr';\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Checks if the color is valid\n *\n * @param string color to check\n * @return boolean true if OK\n */\nfunction is_color( $color )\n{\n\treturn preg_match( '~^(#([a-f0-9]{3}){1,2})?$~i', $color );\n}\n\n\n/**\n * Check if the login is valid (user exists)\n *\n * @param string login\n * @return boolean true if OK\n */\nfunction user_exists( $login )\n{\n\tglobal $DB;\n\n\t$SQL = new SQL();\n\t$SQL->SELECT( 'COUNT(*)' );\n\t$SQL->FROM( 'T_users' );\n\t$SQL->WHERE( 'user_login = \"'.$DB->escape($login).'\"' );\n\n\t$var = $DB->get_var( $SQL->get() );\n\treturn $var > 0 ? true : false; // PHP4 compatibility\n}\n\n\n/**\n * Are we running on a Windows server?\n */\nfunction is_windows()\n{\n\treturn ( strtoupper(substr(PHP_OS,0,3)) == 'WIN' );\n}\n\n\n/**\n * Get all \"a\" tags from the given content\n *\n * @param string content\n * @return array all <a../a> part from the given content\n */\nfunction get_atags( $content )\n{\n\t$tags = array();\n\n\tif( preg_match_all( '#(<a[^>]+>(.*?)</a>|&lt;a.+&gt;(.*?)&lt;/a&gt;)#i', $content, $result ) )\n\t{\n\t\t$tags = $result[0];\n\t}\n\n\treturn $tags;\n}\n\n\n/**\n * Add class to an html tag\n *\n * @param string HTML content\n * @param string Class to add to the tag in the HTML\n * @param integer Number of tags to add the class to\n * @return string HTML content with the added class\n */\nfunction add_tag_class( $content, $class, $limit = 1 )\n{\n\t// Check if there's an opening tag\n\tif( preg_match( '/<.*>/i', $content ) )\n\t{\n\t\t// Check if class attribute is already defined\n\t\tif( preg_match( '/\\sclass\\s*=/i', $content) )\n\t\t{ // Insert class\n\t\t\t$content = preg_replace( '/(<.*)(class\\s*=\\s*\")(.*)\"/i', '$1$2$3 '.$class.'\"', $content, $limit );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$content = preg_replace( '/>/i', ' class=\"'.$class.'\"$1>', $content, $limit );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n\n/**\n * Get all \"img\" tags from the given content\n *\n * @param string content\n * @return array all <img../img> part from the given content\n */\nfunction get_imgtags( $content )\n{\n\t$tag = 'img';\n\t$regexp = '{<'.$tag.'[^>]*[ (</'.$tag.'>) | (/>) ]}';\n\n\tpreg_match_all( $regexp, $content, $result );\n\treturn $result[0];\n}\n\n\n/**\n * Get all urls from the given content\n *\n * @param string content\n * @return array all url from content\n */\nfunction get_urls( $content )\n{\n\t$regexp = '^(?#Protocol)(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?#Username:Password)(?:\\w+:\\w+@)?(?#Subdomains)(?:(?:[-\\w]+\\.)+(?#TopLevel Domains)(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum|travel|[a-z]{2,4}))(?#Port)(?::[\\d]{1,5})?(?#Directories)(?:(?:(?:\\/(?:[-\\w~!$+|.,;=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?#Query)(?:(?:\\?(?:[-\\w~!$+|.,;*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)(?:&(?:[-\\w~!$+|.,;*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)*)*(?#Anchor)(?:#(?:[-\\w~!$+|.,;*:=]|%[a-f\\d]{2})*)?^';\n\n\tpreg_match_all( $regexp, $content, $result );\n\treturn $result[0];\n}\n\n\nfunction xmlrpc_getposttitle($content)\n{\n\tglobal $post_default_title;\n\tif (preg_match('/<title>(.+?)<\\/title>/is', $content, $matchtitle))\n\t{\n\t\t$post_title = $matchtitle[1];\n\t}\n\telse\n\t{\n\t\t$post_title = $post_default_title;\n\t}\n\treturn($post_title);\n}\n\n\n/**\n * Also used by post by mail\n *\n * @deprecated by xmlrpc_getpostcategories()\n */\nfunction xmlrpc_getpostcategory($content)\n{\n\tif (preg_match('/<category>([0-9]+?)<\\/category>/is', $content, $matchcat))\n\t{\n\t\treturn $matchcat[1];\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Extract categories out of \"<category>\" tag from $content.\n *\n * NOTE: w.bloggar sends something like \"<category>00000013,00000001,00000004,</category>\" to\n *       blogger.newPost.\n *\n * @return false|array\n */\nfunction xmlrpc_getpostcategories($content)\n{\n\t$cats = array();\n\n\tif( preg_match('~<category>(\\d+\\s*(,\\s*\\d*)*)</category>~i', $content, $match) )\n\t{\n\t\t$cats = preg_split('~\\s*,\\s*~', $match[1], -1, PREG_SPLIT_NO_EMPTY);\n\t\tforeach( $cats as $k => $v )\n\t\t{\n\t\t\t$cats[$k] = (int)$v;\n\t\t}\n\t}\n\n\treturn $cats;\n}\n\n\n/*\n * xmlrpc_removepostdata(-)\n */\nfunction xmlrpc_removepostdata($content)\n{\n\t$content = preg_replace('/<title>(.*?)<\\/title>/si', '', $content);\n\t$content = preg_replace('/<category>(.*?)<\\/category>/si', '', $content);\n\t$content = trim($content);\n\treturn($content);\n}\n\n\n/**\n * Echo the XML-RPC call Result and optionally log into file\n *\n * @param object XMLRPC response object\n * @param boolean true to echo\n * @param mixed File resource or == '' for no file logging.\n */\nfunction xmlrpc_displayresult( $result, $display = true, $log = '' )\n{\n\tif( ! $result )\n\t{ // We got no response:\n\t\tif( $display ) echo T_('No response!').\"<br />\\n\";\n\t\treturn false;\n\t}\n\n\tif( $result->faultCode() )\n\t{ // We got a remote error:\n\t\tif( $display ) echo T_('Remote error'), ': ', $result->faultString(), ' (', $result->faultCode(), \")<br />\\n\";\n\t\tdebug_fwrite($log, $result->faultCode().' -- '.$result->faultString());\n\t\treturn false;\n\t}\n\n\t// We'll display the response:\n\t$val = $result->value();\n\t$value = xmlrpc_decode_recurse($result->value());\n\n\tif( is_array($value) )\n\t{\n\t\t$out = '';\n\t\tforeach($value as $l_value)\n\t\t{\n\t\t\tif( is_array( $l_value ) )\n\t\t\t{\n\t\t\t\t$out .= ' [';\n\t\t\t\tforeach( $l_value as $lv_key => $lv_val )\n\t\t\t\t{\n\t\t\t\t\t$out .= $lv_key.' => '.( is_array( $lv_val ) ? '{'.implode( '; ', $lv_val ).'}' : $lv_val ).'; ';\n\t\t\t\t}\n\t\t\t\t$out .= '] ';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out .= ' ['.$l_value.'] ';\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t$out = $value;\n\t}\n\n\tdebug_fwrite($log, $out);\n\n\tif( $display ) echo T_('Response').': '.$out.\"<br />\\n\";\n\n\treturn $value;\n}\n\n\n/**\n * Log the XML-RPC call Result into LOG object\n *\n * @param object XMLRPC response object\n * @param Log object to add messages to\n * @return boolean true = success, false = error\n */\nfunction xmlrpc_logresult( $result, & $message_Log, $log_payload = true )\n{\n\tif( ! $result )\n\t{ // We got no response:\n\t\t$message_Log->add( T_('No response!'), 'error' );\n\t\treturn false;\n\t}\n\n\tif( $result->faultCode() )\n\t{ // We got a remote error:\n\t\t$message_Log->add( T_('Remote error').': '.$result->faultString().' ('.$result->faultCode().')', 'error' );\n\t\treturn false;\n\t}\n\n\tif( $log_payload )\n\t{\n\t\t// We got a response:\n\t\t$value = xmlrpc_decode_recurse($result->value());\n\n\t\tif( is_array($value) )\n\t\t{\n\t\t\t$out = '';\n\t\t\tforeach($value as $l_value)\n\t\t\t{\n\t\t\t\t$out .= ' ['.var_export($l_value, true).'] ';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$out = $value;\n\t\t}\n\n\t\t$message_Log->add( T_('Response').': '.$out, 'success' );\n\t}\n\n\treturn true;\n}\n\n\n\nfunction debug_fopen($filename, $mode) {\n\tglobal $debug;\n\tif ($debug == 1 && ( !empty($filename) ) )\n\t{\n\t\t$fp = fopen($filename, $mode);\n\t\treturn $fp;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction debug_fwrite($fp, $string)\n{\n\tglobal $debug;\n\tif( $debug && $fp )\n\t{\n\t\tfwrite($fp, $string);\n\t}\n}\n\nfunction debug_fclose($fp)\n{\n\tglobal $debug;\n\tif( $debug && $fp )\n\t{\n\t\tfclose($fp);\n\t}\n}\n\n\n\n/**\n * Wrap pre tag around {@link var_dump()} for better debugging.\n *\n * @param $var__var__var__var__,... mixed variable(s) to dump\n * @return true\n */\nfunction pre_dump( $var__var__var__var__ )\n{\n\tglobal $is_cli;\n\n\t#echo 'pre_dump(): '.debug_get_backtrace(); // see where a pre_dump() comes from\n\n\t$func_num_args = func_num_args();\n\t$count = 0;\n\n\tif( ! empty($is_cli) )\n\t{ // CLI, no encoding of special chars:\n\t\t$count = 0;\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\tvar_dump($lvar);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put newline between arguments\n\t\t\t\techo \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\telseif( function_exists('xdebug_var_dump') )\n\t{ // xdebug already does fancy displaying:\n\n\t\t// no limits:\n\t\t$old_var_display_max_children = @ini_set('xdebug.var_display_max_children', -1); // default: 128\n\t\t$old_var_display_max_data = @ini_set('xdebug.var_display_max_data', -1); // max string length; default: 512\n\t\t$old_var_display_max_depth = @ini_set('xdebug.var_display_max_depth', -1); // default: 3\n\n\t\techo \"\\n<div style=\\\"padding:1ex;border:1px solid #00f;\\\">\\n\";\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\txdebug_var_dump($lvar);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put HR between arguments\n\t\t\t\techo \"<hr />\\n\";\n\t\t\t}\n\t\t}\n\t\techo '</div>';\n\n\t\t// restore xdebug settings:\n\t\t@ini_set('xdebug.var_display_max_children', $old_var_display_max_children);\n\t\t@ini_set('xdebug.var_display_max_data', $old_var_display_max_data);\n\t\t@ini_set('xdebug.var_display_max_depth', $old_var_display_max_depth);\n\t}\n\telse\n\t{\n\t\t$orig_html_errors = @ini_set('html_errors', 0); // e.g. xdebug would use fancy html, if this is on; we catch (and use) xdebug explicitly above, but just in case\n\n\t\techo \"\\n<pre style=\\\"padding:1ex;border:1px solid #00f;overflow:auto\\\">\\n\";\n\t\tforeach( func_get_args() as $lvar )\n\t\t{\n\t\t\tob_start();\n\t\t\tvar_dump($lvar); // includes \"\\n\"; do not use var_export() because it does not detect recursion by design\n\t\t\t$buffer = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\techo htmlspecialchars($buffer);\n\n\t\t\t$count++;\n\t\t\tif( $count < $func_num_args )\n\t\t\t{ // Put HR between arguments\n\t\t\t\techo \"<hr />\\n\";\n\t\t\t}\n\t\t}\n\t\techo \"</pre>\\n\";\n\t\t@ini_set('html_errors', $orig_html_errors);\n\t}\n\tevo_flush();\n\treturn true;\n}\n\n\n/**\n * Get a function trace from {@link debug_backtrace()} as html table.\n *\n * Adopted from {@link http://us2.php.net/manual/de/function.debug-backtrace.php#47644}.\n *\n * @todo dh> Add support for $is_cli = true (e.g. in case of MySQL error)\n *\n * @param integer|NULL Get the last x entries from the stack (after $ignore_from is applied). Anything non-numeric means \"all\".\n * @param array After a key/value pair matches a stack entry, this and the rest is ignored.\n *              For example, array('class' => 'DB') would exclude everything after the stack\n *              \"enters\" class DB and everything that got called afterwards.\n *              You can also give an array of arrays which means that every condition in one of the given array must match.\n * @param integer Number of stack entries to include, after $ignore_from matches.\n * @return string HTML table\n */\nfunction debug_get_backtrace( $limit_to_last = NULL, $ignore_from = array( 'function' => 'debug_get_backtrace' ), $offset_ignore_from = 0 )\n{\n\tif( ! function_exists( 'debug_backtrace' ) ) // PHP 4.3.0\n\t{\n\t\treturn 'Function debug_backtrace() is not available!';\n\t}\n\n\t$r = '';\n\n\t$backtrace = debug_backtrace();\n\t$count_ignored = 0; // remember how many have been ignored\n\t$limited = false;   // remember if we have limited to $limit_to_last\n\n\tif( $ignore_from )\n\t{\t// we want to ignore from a certain point\n\t\t$trace_length = 0;\n\t\t$break_because_of_offset = false;\n\n\t\tfor( $i = count($backtrace); $i > 0; $i-- )\n\t\t{\t// Search the backtrace from behind (first call).\n\t\t\t$l_stack = & $backtrace[$i-1];\n\n\t\t\tif( $break_because_of_offset && $offset_ignore_from < 1 )\n\t\t\t{ // we've respected the offset, but need to break now\n\t\t\t\tbreak; // ignore from here\n\t\t\t}\n\n\t\t\tforeach( $ignore_from as $l_ignore_key => $l_ignore_value )\n\t\t\t{\t// Check if we want to ignore from here\n\t\t\t\tif( is_array($l_ignore_value) )\n\t\t\t\t{\t// It's an array - all must match\n\t\t\t\t\tforeach( $l_ignore_value as $l_ignore_mult_key => $l_ignore_mult_val )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( !isset($l_stack[$l_ignore_mult_key]) /* not set with this stack entry */\n\t\t\t\t\t\t\t|| strcasecmp($l_stack[$l_ignore_mult_key], $l_ignore_mult_val) /* not this value (case-insensitive) */ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue 2; // next ignore setting, because not all match.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif( $offset_ignore_from-- > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$break_because_of_offset = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak 2; // ignore from here\n\t\t\t\t}\n\t\t\t\telseif( isset($l_stack[$l_ignore_key])\n\t\t\t\t\t&& !strcasecmp($l_stack[$l_ignore_key], $l_ignore_value) /* is equal case-insensitive */ )\n\t\t\t\t{\n\t\t\t\t\tif( $offset_ignore_from-- > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$break_because_of_offset = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak 2; // ignore from here\n\t\t\t\t}\n\t\t\t}\n\t\t\t$trace_length++;\n\t\t}\n\n\t\t$count_ignored = count($backtrace) - $trace_length;\n\n\t\t$backtrace = array_slice( $backtrace, 0-$trace_length ); // cut off ignored ones\n\t}\n\n\t$count_backtrace = count($backtrace);\n\tif( is_numeric($limit_to_last) && $limit_to_last < $count_backtrace )\n\t{\t// we want to limit to a maximum number\n\t\t$limited = true;\n\t\t$backtrace = array_slice( $backtrace, 0, $limit_to_last );\n\t\t$count_backtrace = $limit_to_last;\n\t}\n\n\t$r .= '<div style=\"padding:1ex; margin-bottom:1ex; text-align:left; color:#000; background-color:#ddf;\">\n\t\t\t\t\t<h3>Backtrace:</h3>'.\"\\n\";\n\tif( $count_backtrace )\n\t{\n\t\t$r .= '<ol style=\"font-family:monospace;\">';\n\n\t\t$i = 0;\n\t\tforeach( $backtrace as $l_trace )\n\t\t{\n\t\t\tif( ++$i == $count_backtrace )\n\t\t\t{\n\t\t\t\t$r .= '<li style=\"padding:0.5ex 0;\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$r .= '<li style=\"padding:0.5ex 0; border-bottom:1px solid #77d;\">';\n\t\t\t}\n\t\t\t$args = array();\n\t\t\tif( isset($l_trace['args']) && is_array( $l_trace['args'] ) )\n\t\t\t{\t// Prepare args:\n\t\t\t\tforeach( $l_trace['args'] as $l_arg )\n\t\t\t\t{\n\t\t\t\t\t$l_arg_type = gettype($l_arg);\n\t\t\t\t\tswitch( $l_arg_type )\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'double':\n\t\t\t\t\t\t\t$args[] = $l_arg;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\t$args[] = '\"'.strmaxlen(str_replace(\"\\n\", '\\n', $l_arg), 255, NULL, 'htmlspecialchars').'\"';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'array':\n\t\t\t\t\t\t\t$args[] = 'Array('.count($l_arg).')';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\t$args[] = 'Object('.get_class($l_arg).')';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'resource':\n\t\t\t\t\t\t\t$args[] = htmlspecialchars((string)$l_arg);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\t$args[] = $l_arg ? 'true' : 'false';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$args[] = $l_arg_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$call = \"<strong>\\n\";\n\t\t\tif( isset($l_trace['class']) )\n\t\t\t{\n\t\t\t\t$call .= htmlspecialchars($l_trace['class']);\n\t\t\t}\n\t\t\tif( isset($l_trace['type']) )\n\t\t\t{\n\t\t\t\t$call .= htmlspecialchars($l_trace['type']);\n\t\t\t}\n\t\t\t$call .= htmlspecialchars($l_trace['function']).\"( </strong>\\n\";\n\t\t\tif( $args )\n\t\t\t{\n\t\t\t\t$call .= ' '.implode( ', ', $args ).' ';\n\t\t\t}\n\t\t\t$call .='<strong>)</strong>';\n\n\t\t\t$r .= $call.\"<br />\\n\";\n\n\t\t\t$r .= '<strong>';\n\t\t\tif( isset($l_trace['file']) )\n\t\t\t{\n\t\t\t\t$r .= \"File: </strong> \".$l_trace['file'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$r .= '[runtime created function]</strong>';\n\t\t\t}\n\t\t\tif( isset($l_trace['line']) )\n\t\t\t{\n\t\t\t\t$r .= ' on line '.$l_trace['line'];\n\t\t\t}\n\n\t\t\t$r .= \"</li>\\n\";\n\t\t}\n\t\t$r .= '</ol>';\n\t}\n\telse\n\t{\n\t\t$r .= '<p>No backtrace available.</p>';\n\t}\n\n\t// Extra notes, might be to much, but explains why we stopped at some point. Feel free to comment it out or remove it.\n\t$notes = array();\n\tif( $count_ignored )\n\t{\n\t\t$notes[] = 'Ignored last: '.$count_ignored;\n\t}\n\tif( $limited )\n\t{\n\t\t$notes[] = 'Limited to'.( $count_ignored ? ' remaining' : '' ).': '.$limit_to_last;\n\t}\n\tif( $notes )\n\t{\n\t\t$r .= '<p class=\"small\">'.implode( ' - ', $notes ).'</p>';\n\t}\n\n\t$r .= \"</div>\\n\";\n\n\treturn $r;\n}\n\n\n/**\n * Outputs Unexpected Error message. When in debug mode it also prints a backtrace.\n *\n * This should be used instead of die() everywhere.\n * This should NOT be used instead of exit() anywhere.\n * Dying means the application has encontered an unexpected situation,\n * i-e: something that should never occur during normal operation.\n * Examples: database broken, user changed URL by hand...\n *\n * @param string Message to output\n * @param array Additional params\n *        - \"status\" (Default: '500 Internal Server Error')\n *        - \"debug_info\" - Use this info instead of $additional_info when debug is ON\n */\nfunction debug_die( $additional_info = '', $params = array() )\n{\n\tglobal $debug, $baseurl;\n\tglobal $log_app_errors, $app_name, $is_cli, $display_errors_on_production, $is_api_request;\n\n\t$params = array_merge( array(\n\t\t'status'     => '500 Internal Server Error',\n\t\t'debug_info' => '',\n\t\t), $params );\n\n\tif( $debug && ! empty( $params['debug_info'] ) )\n\t{ // Display 'debug_info' when debug is ON\n\t\t$additional_info = $params['debug_info'];\n\t}\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $is_api_request )\n\t{\t// REST API or XMLRPC request:\n\n\t\t// Set JSON content type:\n\t\theaders_content_mightcache( 'application/json', 0, '#', false ); // Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response( $params['status'] );\n\n\t\techo json_encode( array(\n\t\t\t\t'error_status' => $params['status'],\n\t\t\t\t'error_info'   => $additional_info,\n\t\t\t) );\n\n\t\tdie(1); // Error code 1. Note: This will still call the shutdown function.\n\t}\n\telseif( $is_cli )\n\t{ // Command line interface, e.g. in cron_exec.php:\n\t\techo '== '.T_('An unexpected error has occurred!').\" ==\\n\";\n\t\techo T_('If this error persists, please report it to the administrator.').\"\\n\";\n\t\tif( $debug || $display_errors_on_production )\n\t\t{ // Display additional info only in debug mode or when it was explicitly set by display_errors_on_production setting because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\techo T_('Additional information about this error:').\"\\n\";\n\t\t\techo strip_tags( $additional_info ).\"\\n\\n\";\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Attempt to output an error header (will not work if the output buffer has already flushed once):\n\t\t// This should help preventing indexing robots from indexing the error :P\n\t\tif( ! headers_sent() )\n\t\t{\n\t\t\tload_funcs('_core/_template.funcs.php');\n\t\t\theaders_content_mightcache( 'text/html', 0, '#', false );  // Do NOT cache error messages! (Users would not see they fixed them)\n\t\t\t$status_header = $_SERVER['SERVER_PROTOCOL'].' '.$params['status'];\n\t\t\theader($status_header);\n\t\t}\n\n\t\techo '<div style=\"background-color: #fdd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\techo '<h3 style=\"color:#f00;\">'.T_('An unexpected error has occurred!').'</h3>';\n\t\techo '<p>'.T_('If this error persists, please report it to the administrator.').'</p>';\n\t\techo '<p><a href=\"'.$baseurl.'\">'.T_('Go back to home page').'</a></p>';\n\t\techo '</div>';\n\n\t\tif( ! empty( $additional_info ) )\n\t\t{\n\t\t\techo '<div style=\"background-color: #ddd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\t\tif( $debug || $display_errors_on_production )\n\t\t\t{ // Display additional info only in debug mode or when it was explicitly set by display_errors_on_production setting because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\t\techo '<h3>'.T_('Additional information about this error:').'</h3>';\n\t\t\t\techo $additional_info;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo '<p><i>Enable debugging to get additional information about this error.</i></p>' . get_manual_link('debugging','How to enable debug mode?');\n\t\t\t}\n\t\t\techo '</div>';\n\n\t\t\t// Append the error text to AJAX log if it is AJAX request\n\t\t\tglobal $Ajaxlog;\n\t\t\tif( ! empty( $Ajaxlog ) )\n\t\t\t{\n\t\t\t\t$Ajaxlog->add( $additional_info, 'error' );\n\t\t\t\t$Ajaxlog->display( NULL, NULL, true, 'all',\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t'error' => array( 'class' => 'jslog_error', 'divClass' => false ),\n\t\t\t\t\t\t\t\t\t\t'note'  => array( 'class' => 'jslog_note',  'divClass' => false ),\n\t\t\t\t\t\t\t\t\t), 'ul', 'jslog' );\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $log_app_errors > 1 || $debug )\n\t{ // Prepare backtrace\n\t\t$backtrace = debug_get_backtrace();\n\n\t\tif( $log_app_errors > 1 || $is_cli )\n\t\t{\n\t\t\t$backtrace_cli = trim(strip_tags($backtrace));\n\t\t}\n\t}\n\n\tif( $log_app_errors )\n\t{ // Log error through PHP's logging facilities:\n\t\t$log_message = $app_name.' error: ';\n\t\tif( ! empty($additional_info) )\n\t\t{\n\t\t\t$log_message .= trim( strip_tags($additional_info) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$log_message .= 'No info specified in debug_die()';\n\t\t}\n\n\t\t// Get file and line info:\n\t\t$file = 'Unknown';\n\t\t$line = 'Unknown';\n\t\tif( function_exists('debug_backtrace') /* PHP 4.3 */ )\n\t\t{ // get the file and line\n\t\t\tforeach( debug_backtrace() as $v )\n\t\t\t{\n\t\t\t\tif( isset($v['function']) && $v['function'] == 'debug_die' )\n\t\t\t\t{\n\t\t\t\t\t$file = isset($v['file']) ? $v['file'] : 'Unknown';\n\t\t\t\t\t$line = isset($v['line']) ? $v['line'] : 'Unknown';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$log_message .= ' in '.$file.' at line '.$line;\n\n\t\tif( $log_app_errors > 1 )\n\t\t{ // Append backtrace:\n\t\t\t// indent after newlines:\n\t\t\t$backtrace_cli = preg_replace( '~(\\S)(\\n)(\\S)~', '$1  $2$3', $backtrace_cli );\n\t\t\t$log_message .= \"\\nBacktrace:\\n\".$backtrace_cli;\n\t\t}\n\t\t$log_message .= \"\\nREQUEST_URI:  \".( isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '-' );\n\t\t$log_message .= \"\\nHTTP_REFERER: \".( isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '-' );\n\n\t\terror_log( str_replace(\"\\n\", ' / ', $log_message), 0 /* PHP's system logger */ );\n\t}\n\n\n\t// DEBUG OUTPUT:\n\tif( $debug )\n\t{\n\t\tif( $is_cli )\n\t\t\techo $backtrace_cli;\n\t\telse\n\t\t\techo $backtrace;\n\t}\n\n\t// EXIT:\n\tif( ! $is_cli )\n\t{ // Attempt to keep the html valid (but it doesn't really matter anyway)\n\t\techo '</body></html>';\n\t}\n\n\tdie(1);\t// Error code 1. Note: This will still call the shutdown function.\n}\n\n\n/**\n * Outputs Bad request Error message. When in debug mode it also prints a backtrace.\n *\n * This should be used when a bad user input is detected.\n *\n * @param string Message to output (HTML)\n */\nfunction bad_request_die( $additional_info = '' )\n{\n\tglobal $debug, $baseurl, $is_api_request;\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $is_api_request )\n\t{\t// REST API or XMLRPC request:\n\n\t\t// Set JSON content type:\n\t\theaders_content_mightcache( 'application/json', 0, '#', false ); // Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response( '400 Bad Request' );\n\n\t\techo json_encode( array(\n\t\t\t\t'error_status' => '400 Bad Request',\n\t\t\t\t'error_info'   => $additional_info,\n\t\t\t) );\n\n\t\tdie(2); // Error code 2. Note: this will still call the shutdown function.\n\t}\n\n\t// Attempt to output an error header (will not work if the output buffer has already flushed once):\n\t// This should help preventing indexing robots from indexing the error :P\n\tif( ! headers_sent() )\n\t{\n\t\tload_funcs('_core/_template.funcs.php');\n\t\theaders_content_mightcache( 'text/html', 0, '#', false );\t\t// Do NOT cache error messages! (Users would not see they fixed them)\n\t\theader_http_response('400 Bad Request');\n\t}\n\n\tif( ! function_exists( 'T_' ) )\n\t{\t// Load locale funcs to initialize function \"T_\" because it is used below:\n\t\tload_funcs( 'locales/_locale.funcs.php' );\n\t}\n\n\techo '<div style=\"background-color: #fdd; padding: 1ex; margin-bottom: 1ex;\">';\n\techo '<h3 style=\"color:#f00;\">'.T_('Bad Request!').'</h3>';\n\techo '<p>'.T_('The parameters of your request are invalid.').'</p>';\n\techo '<p>'.T_('If you have obtained this error by clicking on a link INSIDE of this site, please report the bad link to the administrator.').'</p>';\n\techo '<p><a href=\"'.$baseurl.'\">'.T_('Go back to home page').'</a></p>';\n\techo '</div>';\n\n\tif( !empty( $additional_info ) )\n\t{\n\t\techo '<div style=\"background-color: #ddd; padding: 1ex; margin-bottom: 1ex;\">';\n\t\tif( $debug )\n\t\t{\t// Display additional info only in debug mode because it can reveal system info to hackers and greatly facilitate exploits\n\t\t\techo '<h3>'.T_('Additional information about this error:').'</h3>';\n\t\t\techo $additional_info;\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo '<p><i>Enable debugging to get additional information about this error.</i></p>' . get_manual_link('debugging','How to enable debug mode?');\n\t\t}\n\t\techo '</div>';\n\n\t\t// Append the error text to AJAX log if it is AJAX request\n\t\tglobal $Ajaxlog;\n\t\tif( ! empty( $Ajaxlog ) )\n\t\t{\n\t\t\t$Ajaxlog->add( $additional_info, 'error' );\n\t\t\t$Ajaxlog->display( NULL, NULL, true, 'all',\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'error' => array( 'class' => 'jslog_error', 'divClass' => false ),\n\t\t\t\t\t\t\t\t\t'note'  => array( 'class' => 'jslog_note',  'divClass' => false ),\n\t\t\t\t\t\t\t\t), 'ul', 'jslog' );\n\t\t}\n\t}\n\n\tif( $debug )\n\t{\n\t\techo debug_get_backtrace();\n\t}\n\n\t// Attempt to keep the html valid (but it doesn't really matter anyway)\n\techo '</body></html>';\n\n\tdie(2); // Error code 2. Note: this will still call the shutdown function.\n}\n\n\n/**\n * Outputs debug info, according to {@link $debug} or $force param. This gets called typically at the end of the page.\n *\n * @param boolean true to force output regardless of {@link $debug}\n * @param boolean true to force clean output (without HTML) regardless of {@link $is_cli}\n */\nfunction debug_info( $force = false, $force_clean = false )\n{\n\tglobal $debug, $debug_done, $debug_jslog, $debug_jslog_done, $Debuglog, $DB, $obhandler_debug, $Timer, $ReqHost, $ReqPath, $is_cli;\n\tglobal $cache_imgsize, $cache_File;\n\tglobal $Session;\n\tglobal $db_config, $tableprefix, $http_response_code, $disp, $disp_detail, $robots_index, $robots_follow, $content_type_header;\n\t/**\n\t * @var Hit\n\t */\n\tglobal $Hit;\n\n\t// Detect content-type\n\t$content_type = NULL;\n\tforeach(headers_list() as $header)\n\t{\n\t\tif( stripos($header, 'content-type:') !== false )\n\t\t{ // content type sent\n\t\t\t# \"Content-Type:text/html;charset=utf-8\" => \"text/html\"\n\t\t\t$content_type = explode( ':', $header, 2 );\n\t\t\t$content_type = explode( ';', array_pop( $content_type ) );\n\t\t\t$content_type = trim( array_shift( $content_type ) );\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// ---- Print AJAX Log\n\tif( empty( $debug_jslog_done ) && ( $debug || $debug_jslog ) && $content_type == 'text/html' )\n\t{\t// Display debug jslog once\n\t\tglobal $rsc_url, $app_version_long;\n\n\t\t$relative_to = ( is_admin_page() ? 'rsc_url' : 'blog' );\n\n\t\trequire_js( '#jqueryUI#', $relative_to, false, true );\n\t\trequire_css( '#jqueryUI_css#', $relative_to, NULL, NULL, '#', true );\n\t\trequire_js( 'debug_jslog.js', $relative_to, false, true );\n\t\trequire_js( 'jquery/jquery.cookie.min.js', $relative_to, false, true );\n\n\t\t$jslog_style_cookies = param_cookie( 'jslog_style', 'string' );\n\t\t$jslog_styles = array();\n\t\tif( !empty( $jslog_style_cookies ) )\n\t\t{\t// Get styles only from cookies\n\t\t\t$jslog_style_cookies = explode( ';', $jslog_style_cookies );\n\t\t\tforeach( $jslog_style_cookies as $jsc => $style )\n\t\t\t{\n\t\t\t\tif( strpos( $style, 'height' ) !== false /*|| ( strpos( $style, 'display' ) !== false && !$debug_jslog )*/ )\n\t\t\t\t{\t// Unset the height param from defined styles ( and the display param if jslog is disabled )\n\t\t\t\t\tunset( $jslog_style_cookies[$jsc] );\n\t\t\t\t}\n\t\t\t}\n\t\t\t$jslog_styles[] = implode( ';', $jslog_style_cookies );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( !is_logged_in() )\n\t\t\t{\t// Align top when evobar is hidden\n\t\t\t\t$jslog_styles[] = 'top:0';\n\t\t\t}\n\t\t\tif( $debug_jslog )\n\t\t\t{\t// Display the jslog\n\t\t\t\t$jslog_styles[] = 'display:block';\n\t\t\t}\n\t\t}\n\t\t$jslog_styles = count( $jslog_styles ) > 0 ? ' style=\"'.implode( ';', $jslog_styles ).'\"' : '';\n\n\t\t$close_url = url_add_param( $_SERVER['REQUEST_URI'], 'jslog' );\n\t\techo '<div id=\"debug_ajax_info\" class=\"debug\"'.$jslog_styles.'>';\n\t\techo '<div class=\"jslog_titlebar\">'.\n\t\t\t\t'AJAX Debug log'.get_manual_link('ajax_debug_log').\n\t\t\t\taction_icon( T_('Close'), 'close', $close_url, NULL, NULL, NULL, array( 'class' => 'jslog_switcher' ) ).\n\t\t\t'</div>';\n\t\techo '<div id=\"jslog_container\"></div>';\n\t\techo '<div class=\"jslog_statusbar\">'.\n\t\t\t\t'<a href=\"'.$_SERVER['REQUEST_URI'].'#\" class=\"jslog_clear\">'.T_('Clear').'</a>'.\n\t\t\t'</div>';\n\t\techo '</div>';\n\n\t\t// Make sure debug jslog output only happens once:\n\t\t$debug_jslog_done = true;\n\t}\n\t// ----\n\n\t// clean output:\n\t$clean = $is_cli || $force_clean;\n\n\tif( ! $force )\n\t{\n\t\tif( ! empty( $debug_done ) )\n\t\t{ // Already displayed!\n\t\t\treturn;\n\t\t}\n\n\t\tif( empty( $debug ) || // No debug output desired:\n\t\t    ( $debug < 2 && $content_type != 'text/html' ) ) // Do not display, if no content-type header has been sent or it's != \"text/html\" (debug > 1 skips this)\n\t\t{\n\t\t\tglobal $evo_last_handled_error;\n\t\t\tif( ! empty( $evo_last_handled_error ) )\n\t\t\t{ // If script has been stoppped by some error\n\t\t\t\t// Display a message when debug is OFF and error has occured\n\t\t\t\t$debug_off_title = 'An unexpected error has occured!';\n\t\t\t\t$debug_off_msg1 = 'We apologize for the inconvenience.';\n\t\t\t\t$debug_off_msg2 = 'This error has been automatically reported and we will work to resolve it as fast as possible.';\n\t\t\t\tif( $clean )\n\t\t\t\t{ // CLI mode\n\t\t\t\t\techo '*** '.$debug_off_title.' ***'.\"\\n\\n\"\n\t\t\t\t\t\t.$debug_off_msg1.\"\\n\"\n\t\t\t\t\t\t.$debug_off_msg2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{ // View from browser\n\t\t\t\t\techo '<div style=\"margin:1em auto;padding:10px;background:#FEFFFF;border:2px solid #F00;border-radius:6px;text-align:center;\">'\n\t\t\t\t\t\t\t.'<h2 style=\"margin:0;color:#F00;\">'.$debug_off_title.'</h2>'\n\t\t\t\t\t\t\t.'<p>'.$debug_off_msg1.'</p>'\n\t\t\t\t\t\t\t.'<p style=\"margin-bottom:0\">'.$debug_off_msg2.'</p>'\n\t\t\t\t\t\t.'</div>';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\t//Make sure debug output only happens once:\n\t$debug_done = true;\n\n\t$printf_format = '| %-45s | %-5s | %-7s | %-5s |';\n\t$table_headerlen = 73;\n\t/* This calculates the number of dashes to print e. g. on the top and\n\t * bottom of the table and after the header, making the table look\n\t * better (looks like the tables of the mysql command line client).\n\t * Normally, the value won't change, so it's hardcoded above. If you\n\t * change the printf() format above, this might be useful.\n\tpreg_match_all( '#\\d+#', $printf_format, $table_headerlen );\n\t$table_headerlen = array_sum( $table_headerlen[0] ) +\n\t\t\t\t\t\t\t\t\tstrlen( preg_replace( '#[^ \\|]+#', '',\n\t\t\t\t\t\t\t\t\t\t\t\t$printf_format ) ) - 2;\n\t*/\n\n\t$ReqHostPathQuery = $ReqHost.$ReqPath.( empty( $_SERVER['QUERY_STRING'] ) ? '' : '?'.$_SERVER['QUERY_STRING'] );\n\n\techo \"\\n\\n\\n\";\n\techo ( $clean ? '*** Debug info ***'.\"\\n\\n\" : '<div class=\"debug\" id=\"debug_info\"><h2>Debug info</h2>' );\n\n\tif( !$obhandler_debug )\n\t{ // don't display changing items when we want to test obhandler\n\n\t\t// ---------------------------\n\n\t\techo '<div class=\"log_container\"><div>';\n\n\t\techo 'HTTP Response code: '.$http_response_code;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$content_type_header: '.$content_type_header;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$disp: '.$disp.' -- detail: '.$disp_detail;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$robots_index: '.$robots_index;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '$robots_follow: '.$robots_follow;\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '</div></div>';\n\n\t\t// ================================== DB Summary ================================\n\t\tif( isset($DB) )\n\t\t{\n\t\t\techo '<div class=\"log_container\"><div>';\n\t\t\techo $DB->num_queries.' SQL queries executed in '.$Timer->get_duration( 'SQL QUERIES' ).\" seconds\\n\";\n\t\t\tif( ! $clean )\n\t\t\t{\n\t\t\t\techo ' &nbsp; <a href=\"'.$ReqHostPathQuery.'#evo_debug_queries\">scroll down to details</a><p>';\n\t\t\t}\n\t\t\techo '</div></div>';\n\t\t}\n\n\t\t// ========================== Timer table ================================\n\t\t$time_page = $Timer->get_duration( 'total' );\n\t\t$timer_rows = array();\n\t\tforeach( $Timer->get_categories() as $l_cat )\n\t\t{\n\t\t\tif( $l_cat == 'sql_query' )\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$timer_rows[ $l_cat ] = $Timer->get_duration( $l_cat );\n\t\t}\n\t\t// Don't sort to see orginal order of creation\n\t\t// arsort( $timer_rows );\n\t\t// ksort( $timer_rows );\n\n\t\t// Remove \"total\", it will get output as the last one:\n\t\t$total_time = $timer_rows['total'];\n\t\tunset($timer_rows['total']);\n\n\t\t$percent_total = $time_page > 0 ? number_format( 100/$time_page * $total_time, 2 ) : '0';\n\n\t\tif( $clean )\n\t\t{\n\t\t\techo '== Timers =='.\"\\n\\n\";\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\";\n\t\t\tprintf( $printf_format.\"\\n\", 'Category', 'Time', '%', 'Count' );\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo '<table class=\"debug_timer\"><thead>'\n\t\t\t\t.'<tr><td colspan=\"4\" class=\"center\">Timers</td></tr>' // dh> TODO: should be TH. Workaround so that tablesorter does not pick it up. Feedback from author requested.\n\t\t\t\t.'<tr><th>Category</th><th>Time</th><th>%</th><th>Count</th></tr>'\n\t\t\t\t.'</thead>';\n\n\t\t\t// Output \"total\":\n\t\t\techo \"\\n<tfoot><tr>\"\n\t\t\t\t.'<td>total</td>'\n\t\t\t\t.'<td class=\"right red\">'.$total_time.'</td>'\n\t\t\t\t.'<td class=\"right\">'.$percent_total.'%</td>'\n\t\t\t\t.'<td class=\"right\">'.$Timer->get_count('total').'</td></tr></tfoot>';\n\n\t\t\techo '<tbody>';\n\t\t}\n\n\t\t$table_rows_collapse = array();\n\t\tforeach( $timer_rows as $l_cat => $l_time )\n\t\t{\n\t\t\t$percent_l_cat = $time_page > 0 ? number_format( 100/$time_page * $l_time, 2 ) : '0';\n\n\t\t\tif( $clean )\n\t\t\t{\n\t\t\t\t$row = sprintf( $printf_format, $l_cat, $l_time, $percent_l_cat.'%', $Timer->get_count( $l_cat ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$row = \"\\n<tr>\"\n\t\t\t\t\t.'<td>'.$l_cat.'</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$l_time.'</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$percent_l_cat.'%</td>'\n\t\t\t\t\t.'<td class=\"right\">'.$Timer->get_count( $l_cat ).'</td></tr>';\n\t\t\t}\n\n\t\t\t// Maybe ignore this row later, but not for clean display.\n\t\t\tif( ! $clean && ( $percent_l_cat < 1  ) )\n\t\t\t{\t// Hide everything that tool less tahn 5% of the time\n\t\t\t\t$table_rows_collapse[] = $row;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo $row.\"\\n\";\n\t\t\t}\n\t\t}\n\t\t$count_collapse = count($table_rows_collapse);\n\t\t// Collapse ignored rows, allowing to expand them with Javascript:\n\t\tif( $count_collapse > 5 )\n\t\t{\n\t\t\techo '<tr><td colspan=\"4\" class=\"center\" id=\"evo-debuglog-timer-long-header\">';\n\t\t\techo '<a href=\"\" onclick=\"var e = document.getElementById(\\'evo-debuglog-timer-long\\'); e.style.display = (e.style.display == \\'none\\' ? \\'\\' : \\'none\\'); return false;\">+ '.$count_collapse.' queries &lt; 1%</a> </td></tr>';\n\t\t\techo '</tbody>';\n\t\t\techo '<tbody id=\"evo-debuglog-timer-long\" style=\"display:none;\">';\n\t\t}\n\t\techo implode( \"\\n\", $table_rows_collapse ).\"\\n\";\n\n\t\tif ( $clean )\n\t\t{ // \"total\" (done in tfoot for html above)\n\t\t\techo sprintf( $printf_format, 'total', $total_time, $percent_total.'%', $Timer->get_count('total') );\n\t\t\techo '+'.str_repeat( '-', $table_headerlen ).'+'.\"\\n\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo \"\\n</tbody></table>\";\n\n\t\t\t// add jquery.tablesorter to the \"Debug info\" table.\n\t\t\t$relative_to = ( is_admin_page() ? 'rsc_url' : 'blog' );\n\t\t\trequire_js( 'jquery/jquery.tablesorter.min.js', $relative_to, true, true );\n\t\t\techo '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t(function($){\n\t\t\t\tvar clicked_once;\n\t\t\t\tjQuery(\"table.debug_timer th\").click( function(event) {\n\t\t\t\t\tif( clicked_once ) return; else clicked_once = true;\n\t\t\t\t\tjQuery(\"#evo-debuglog-timer-long tr\").appendTo(jQuery(\"table.debug_timer tbody\")[0]);\n\t\t\t\t\tjQuery(\"#evo-debuglog-timer-long-header\").remove();\n\t\t\t\t\t// click for tablesorter:\n\t\t\t\t\tjQuery(\"table.debug_timer\").tablesorter();\n\t\t\t\t\tjQuery(event.currentTarget).click();\n\t\t\t\t});\n\t\t\t})(jQuery);\n\t\t\t</script>';\n\t\t}\n\n\n\t\t// ================================ Opcode caching ================================\n\t\techo '<div class=\"log_container\"><div>';\n\t\techo 'Opcode cache: '.get_active_opcode_cache();\n\t\techo $clean ? \"\\n\" : '<p>';\n\n\t\t// ================================ User caching ================================\n\t\techo 'User cache: '.get_active_user_cache();\n\t\techo $clean ? \"\\n\" : '<p>';\n\t\techo '</div></div>';\n\n\n\t\t// ================================ Memory Usage ================================\n\t\techo '<div class=\"log_container\"><div>';\n\n\t\tforeach( array( // note: 8MB is default for memory_limit and is reported as 8388608 bytes\n\t\t\t'memory_get_usage' => array( 'display' => 'Memory usage', 'high' => 8000000 ),\n\t\t\t'memory_get_peak_usage' /* PHP 5.2 */ => array( 'display' => 'Memory peak usage', 'high' => 8000000 ) ) as $l_func => $l_var )\n\t\t{\n\t\t\tif( function_exists( $l_func ) )\n\t\t\t{\n\t\t\t\t$_usage = $l_func();\n\n\t\t\t\tif( $_usage > $l_var['high'] )\n\t\t\t\t{\n\t\t\t\t\techo $clean ? '[!!] ' : '<span style=\"color:red; font-weight:bold\">';\n\t\t\t\t}\n\n\t\t\t\techo $l_var['display'].': '.bytesreadable( $_usage, ! $clean );\n\n\t\t\t\tif( ! $clean && $_usage > $l_var['high'] )\n\t\t\t\t{\n\t\t\t\t\techo '</span>';\n\t\t\t\t}\n\t\t\t\techo $clean ? \"\\n\" : '<br />';\n\t\t\t}\n\t\t}\n\n\t\techo 'Len of serialized $cache_imgsize: '.strlen(serialize($cache_imgsize));\n\t\techo $clean ? \"\\n\" : '<br />';\n\t\techo 'Len of serialized $cache_File: '.strlen(serialize($cache_File));\n\t\techo $clean ? \"\\n\" : '<br />';\n\n\t\techo '</div></div>';\n\t}\n\n\n\t// DEBUGLOG(s) FROM PREVIOUS SESSIONS, after REDIRECT(s) (with list of categories at top):\n\tif( isset($Session) && ($sess_Debuglogs = $Session->get('Debuglogs')) && ! empty($sess_Debuglogs) )\n\t{\n\t\t$count_sess_Debuglogs = count($sess_Debuglogs);\n\t\tif( $count_sess_Debuglogs > 1 )\n\t\t{ // Links to those Debuglogs:\n\t\t\tif ( $clean )\n\t\t\t{\t// kind of useless, but anyway...\n\t\t\t\techo \"\\n\".'There are '.$count_sess_Debuglogs.' Debuglogs from redirected pages.'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\techo '<p>There are '.$count_sess_Debuglogs.' Debuglogs from redirected pages: ';\n\t\t\t\tfor( $i = 1; $i <= $count_sess_Debuglogs; $i++ )\n\t\t\t\t{\n\t\t\t\t\techo '<a href=\"'.$ReqHostPathQuery.'#debug_sess_debuglog_'.$i.'\">#'.$i.'</a> ';\n\t\t\t\t}\n\t\t\t\techo '</p>';\n\t\t\t}\n\t\t}\n\n\t\tforeach( $sess_Debuglogs as $k => $sess_Debuglog )\n\t\t{\n\t\t\t$log_categories = array( 'error', 'note', 'all' ); // Categories to output (in that order)\n\n\t\t\tif( $clean )\n\t\t\t{\n\t\t\t\t$log_container_head = \"\\n\".'== Debug messages from redirected page (#'.($k+1).') =='.\"\\n\"\n\t\t\t\t\t\t\t\t\t .'See below for the Debuglog from the current request.'.\"\\n\";\n\t\t\t\techo format_to_output(\n\t\t\t\t\t$sess_Debuglog->display( array(\n\t\t\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t\t\t'all' => array( 'string' => '= %s ='.\"\\n\\n\", 'template' => false ) ),\n\t\t\t\t\t\t'', false, $log_categories, '', 'raw', false ),\n\t\t\t\t\t'raw' );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$log_container_head = '<h3 id=\"debug_sess_debuglog_'.($k+1).'\" style=\"color:#f00;\">Debug messages from redirected page (#'.($k+1).')</h3>'\n\t\t\t\t\t// link to real Debuglog:\n\t\t\t\t\t.'<p><a href=\"'.$ReqHostPathQuery.'#debug_debuglog\">See below for the Debuglog from the current request.</a></p>';\n\t\t\t\t$log_cats = array_keys($sess_Debuglog->get_messages( $log_categories )); // the real list (with all replaced and only existing ones)\n\t\t\t\t$log_head_links = array();\n\n\t\t\t\tforeach( $log_cats as $l_cat )\n\t\t\t\t{\n\t\t\t\t\t$log_head_links[] .= '<a href=\"'.$ReqHostPathQuery.'#debug_redir_'.($k+1).'_info_cat_'.str_replace( ' ', '_', $l_cat ).'\">'.$l_cat.'</a>';\n\t\t\t\t}\n\t\t\t\t$log_container_head .= implode( ' | ', $log_head_links );\n\n\t\t\t\techo '<div style=\"border:1px solid #F00;background:#aaa\">'.\n\t\t\t\t\tformat_to_output(\n\t\t\t\t\t\t$sess_Debuglog->display( array(\n\t\t\t\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t\t\t\t'all' => array( 'string' => '<h4 id=\"debug_redir_'.($k+1).'_info_cat_%s\">%s:</h4>', 'template' => false ) ),\n\t\t\t\t\t\t\t'', false, $log_categories ),\n\t\t\t\t\t\t'htmlbody' ).\n\t\t\t\t\t'</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Delete logs since they have been displayed...\n\t\t// EXCEPT if we are redirecting, because in this case we won't see these logs in a browser (only in request debug tools)\n\t\t// So in that case we want them to move over to the next page...\n\t\tif( $http_response_code < 300 || $http_response_code >= 400 )\n\t\t{\t// This is NOT a 3xx redirect, assume debuglogs have been seen & delete them:\n\t\t\t$Session->delete( 'Debuglogs' );\n\t\t}\n\t}\n\n\n\t// CURRENT DEBUGLOG (with list of categories at top):\n\t$log_categories = array( 'error', 'note', 'all' ); // Categories to output (in that order)\n\t$log_container_head = $clean ? ( \"\\n\".'== Debug messages =='.\"\\n\" ) : '<h3 id=\"debug_debuglog\">Debug messages</h3>';\n\tif( ! empty($sess_Debuglogs) )\n\t{ // link to first sess_Debuglog:\n\t\tif ( $clean )\n\t\t{\n\t\t\t$log_container_head .= 'See above for the Debuglog(s) from before the redirect.'.\"\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$log_container_head .= '<p><a href=\"'.$ReqHostPathQuery.'#debug_sess_debuglog_1\">See above for the Debuglog(s) from before the redirect.</a></p>';\n\t\t}\n\t}\n\n\tif ( ! $clean )\n\t{\n\t\t$log_cats = array_keys($Debuglog->get_messages( $log_categories )); // the real list (with all replaced and only existing ones)\n\t\t$log_head_links = array();\n\t\tforeach( $log_cats as $l_cat )\n\t\t{\n\t\t\t$log_head_links[] .= '<a href=\"'.$ReqHostPathQuery.'#debug_info_cat_'.str_replace( ' ', '_', $l_cat ).'\">'.$l_cat.'</a>';\n\t\t}\n\t\t$log_container_head .= implode( ' | ', $log_head_links );\n\n\t\techo format_to_output(\n\t\t\t$Debuglog->display( array(\n\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t'all' => array( 'string' => '<h4 id=\"debug_info_cat_%s\">%s:</h4>', 'template' => false ) ),\n\t\t\t\t'', false, $log_categories ),\n\t\t\t'htmlbody' );\n\n\t\techo '<h3 id=\"evo_debug_queries\">DB</h3>';\n\t}\n\telse\n\t{\n\t\techo format_to_output(\n\t\t\t$Debuglog->display( array(\n\t\t\t\t\t'container' => array( 'string' => $log_container_head, 'template' => false ),\n\t\t\t\t\t'all' => array( 'string' => '= %s ='.\"\\n\\n\", 'template' => false ) ),\n\t\t\t\t'', false, $log_categories, '', 'raw', false ),\n\t\t\t'raw' );\n\n\t\techo \"\\n\".'== DB =='.\"\\n\\n\";\n\t}\n\n\tif($db_config)\n\t{\n\t\tif ( ! $clean )\n\t\t{\n\t\t\techo '<pre>';\n\t\t}\n\n\t\techo 'Config DB Username: '.$db_config['user'].\"\\n\".\n\t\t\t'Config DB Database: '.$db_config['name'].\"\\n\".\n\t\t\t 'Config DB Host: '.(isset($db_config['host']) ? $db_config['host'] : 'unset (localhost)').\"\\n\".\n\t\t\t 'Config DB tables prefix: '.$tableprefix.\"\\n\".\n\t\t\t 'Config DB connection charset: '.$db_config['connection_charset'].\"\\n\";\n\n\t\techo $clean ? \"\\n\" : '</pre>';\n\t}\n\n\tif( !isset($DB) )\n\t{\n\t\techo 'No DB object.'.( $clean ? \"\\n\" : '' );\n\t}\n\telse\n\t{\n\t\techo '<pre>Current DB charset: '.$DB->connection_charset.\"</pre>\\n\";\n\n\t\t$DB->dump_queries( ! $clean );\n\t}\n\n\tif ( ! $clean )\n\t{\n\t\techo '</div>';\n\t}\n}\n\n\n/**\n * Exit when request is blocked\n *\n * @param string Block type: 'IP', 'Domain', 'Country'\n * @param string Log message\n * @param string Syslog origin type: 'core', 'plugin'\n * @param integer Syslog origin ID\n */\nfunction exit_blocked_request( $block_type, $log_message, $syslog_origin_type = 'core', $syslog_origin_ID = NULL )\n{\n\tglobal $debug;\n\n\t// Write system log for the request:\n\tsyslog_insert( $log_message, 'warning', NULL, NULL, $syslog_origin_type, $syslog_origin_ID );\n\n\t// Print out this text to inform an user:\n\techo 'Blocked.';\n\n\tif( $debug )\n\t{ // Display additional info on debug mode:\n\t\techo ' ('.$block_type.')';\n\t}\n\n\t// EXIT:\n\texit( 0 );\n}\n\n\n/**\n * Check if the current request exceed the post max size limit.\n * If too much data was sent add an error message and call header redirect.\n */\nfunction check_post_max_size_exceeded()\n{\n\tglobal $Messages;\n\n\tif( ( $_SERVER['REQUEST_METHOD'] == 'POST' ) && empty( $_POST ) && empty( $_FILES ) && ( $_SERVER['CONTENT_LENGTH'] > 0 ) )\n\t{\n\t\t// Check post max size ini setting\n\t\t$post_max_size = ini_get( 'post_max_size' );\n\n\t\t// Convert post_max_size value to bytes\n\t\tswitch ( substr( $post_max_size, -1 ) )\n\t\t{\n\t\t\tcase 'G':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t\tcase 'M':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t\tcase 'K':\n\t\t\t\t$post_max_size = $post_max_size * 1024;\n\t\t}\n\n\t\t// Add error message and redirect back to the referer url\n\t\t$Messages->add( sprintf( T_('You have sent too much data (too many large files?) for the server to process (%s sent / %s maximum). Please try again by sending less data/files at a time.'), bytesreadable( $_SERVER['CONTENT_LENGTH'] ), bytesreadable( $post_max_size ) ) );\n\t\theader_redirect( $_SERVER['HTTP_REFERER'] );\n\t\texit(0); // Already exited here\n\t}\n}\n\n\n/**\n * Prevent email header injection.\n */\nfunction mail_sanitize_header_string( $header_str, $close_brace = false )\n{\n\t// Prevent injection! (remove everything after (and including) \\n or \\r)\n\t$header_str = preg_replace( '~(\\r|\\n).*$~s', '', trim($header_str) );\n\n\tif( $close_brace && strpos( $header_str, '<' ) !== false && strpos( $header_str, '>' ) === false )\n\t{ // We have probably stripped the '>' at the end!\n\t\t$header_str .= '>';\n\t}\n\n\treturn $header_str;\n}\n\n/**\n * Encode to RFC 1342 \"Representation of Non-ASCII Text in Internet Message Headers\"\n *\n * @param string\n * @param string 'Q' for Quoted printable, 'B' for base64\n */\nfunction mail_encode_header_string( $header_str, $mode = 'Q' )\n{\n\tglobal $evo_charset;\n\n\t/* mbstring way  (did not work for Alex RU)\n\tif( function_exists('mb_encode_mimeheader') )\n\t{ // encode subject\n\t\t$orig = mb_internal_encoding();\n\t\tmb_internal_encoding('utf-8');\n\t\t$r = mb_encode_mimeheader( $header_str, 'utf-8', $mode );\n\t\tmb_internal_encoding($orig);\n\t\treturn $r;\n\t}\n\t*/\n\n\tif( preg_match( '~[^a-z0-9!*+\\-/ ]~i', $header_str ) )\n\t{ // If the string actually needs some encoding\n\t\tif( $mode == 'Q' )\n\t\t{ // Quoted printable is best for reading with old/text terminal mail reading/debugging stuff:\n\t\t\t$header_str = preg_replace_callback( '#[^a-z0-9!*+\\-/ ]#i', 'mail_encode_header_string_callback', $header_str );\n\t\t\t$header_str = str_replace( ' ', '_', $header_str );\n\t\t\t$header_str = '=?'.$evo_charset.'?Q?'.$header_str.'?=';\n\t\t}\n\t\telse\n\t\t{ // Base 64 -- Alex RU way:\n\t\t\t$header_str = '=?'.$evo_charset.'?B?'.base64_encode( $header_str ).'?=';\n\t\t}\n\t}\n\n\treturn $header_str;\n}\n\n\n/**\n * Callback function for mail header encoding\n *\n * @param array Matches\n * @return string\n */\nfunction mail_encode_header_string_callback( $matches )\n{\n\treturn sprintf( '=%02x', ord( stripslashes( $matches[0] ) ) );\n}\n\n\n/**\n * Get setting's value from General or User's settings\n *\n * @param integer User ID\n * @param string Setting ( email | name )\n * @return string Setting's value\n */\nfunction user_get_notification_sender( $user_ID, $setting )\n{\n\tglobal $Settings;\n\n\t$setting_name = 'notification_sender_'.$setting;\n\n\tif( empty( $user_ID ) )\n\t{\t// Get value from general settings\n\t\treturn $Settings->get( $setting_name );\n\t}\n\n\t$UserCache = & get_UserCache();\n\tif( $User = & $UserCache->get_by_ID( $user_ID ) )\n\t{\n\t\tif( $User->check_status( 'is_validated' ) )\n\t\t{\t// User is Activated or Autoactivated\n\t\t\tglobal $UserSettings;\n\t\t\tif( $UserSettings->get( $setting_name, $user_ID ) == '' )\n\t\t\t{\t// The user's setting is not defined yet\n\t\t\t\t// Update the user's setting from general setting\n\t\t\t\t$UserSettings->set( $setting_name, $Settings->get( $setting_name ), $user_ID );\n\t\t\t\t$UserSettings->dbupdate();\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// User has a defined setting; Use this\n\t\t\t\treturn $UserSettings->get( $setting_name, $user_ID );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $Settings->get( $setting_name );\n}\n\n\n/**\n * Sends an email, wrapping PHP's mail() function.\n * ALL emails sent by b2evolution must be sent through this function (for consistency and for logging)\n *\n * {@link $current_locale} will be used to set the charset.\n *\n * Note: we use a single \\n as line ending, though it does not comply to {@link http://www.faqs.org/rfcs/rfc2822 RFC2822}, but seems to be safer,\n * because some mail transfer agents replace \\n by \\r\\n automatically.\n *\n * @todo Unit testing with \"nice addresses\" This gets broken over and over again.\n *\n * @param string Recipient email address.\n * @param string Recipient name.\n * @param string Subject of the mail\n * @param string|array The message text OR Array: 'charset', 'full', 'html', 'text'\n * @param string From address, being added to headers (we'll prevent injections); see {@link http://securephp.damonkohler.com/index.php/Email_Injection}.\n *               Defaults to {@link GeneralSettings::get('notification_sender_email') } if NULL.\n * @param string From name.\n * @param array Additional headers ( headername => value ). Take care of injection!\n * @param integer User ID\n * @return boolean True if mail could be sent (not necessarily delivered!), false if not - (return value of {@link mail()})\n */\nfunction send_mail( $to, $to_name, $subject, $message, $from = NULL, $from_name = NULL, $headers = array(), $user_ID = NULL )\n{\n\tglobal $servertimenow, $email_send_simulate_only;\n\n\t// Stop a request from the blocked IP addresses or Domains\n\tantispam_block_request();\n\n\tglobal $debug, $app_name, $app_version, $current_locale, $current_charset, $evo_charset, $locales, $Debuglog, $Settings, $demo_mode;\n\n\t$message_data = $message;\n\tif( is_array( $message_data ) && isset( $message_data['full'] ) )\n\t{ // If content is multipart\n\t\t$message = $message_data['full'];\n\t}\n\telseif( is_string( $message_data ) )\n\t{ // Convert $message_data to array\n\t\t$message_data = array( 'full' => $message );\n\t}\n\n\t// Replace secret content in the mail logs message body\n\t$message = preg_replace( '~\\$secret_content_start\\$.*\\$secret_content_end\\$~', '***secret-content-removed***', $message );\n\t// Remove secret content marks from the message\n\t$message_data = str_replace( array( '$secret_content_start$', '$secret_content_end$' ), '', $message_data );\n\n\t// Memorize email address\n\t$to_email_address = $to;\n\n\t$NL = \"\\r\\n\";\n\n\tif( $demo_mode )\n\t{ // Debug mode restriction: Sending email in demo mode is not allowed\n\t\treturn false;\n\t}\n\n\tif( !is_array( $headers ) )\n\t{ // Make sure $headers is an array\n\t\t$headers = array( $headers );\n\t}\n\n\tif( empty( $from ) )\n\t{\n\t\t$from = user_get_notification_sender( $user_ID, 'email' );\n\t}\n\n\tif( empty( $from_name ) )\n\t{\n\t\t$from_name = user_get_notification_sender( $user_ID, 'name' );\n\t}\n\n\t// Pass these data for SMTP mailer\n\t$message_data['to_email'] = $to;\n\t$message_data['to_name'] = empty( $to_name ) ? NULL : $to_name;\n\t$message_data['from_email'] = $from;\n\t$message_data['from_name'] = empty( $from_name ) ? NULL : $from_name;\n\n\t$return_path = $Settings->get( 'notification_return_path' );\n\n\t// Add real name into $from...\n\tif( ! is_windows() )\n\t{\t// fplanque: Windows XP, Apache 1.3, PHP 4.4, MS SMTP : will not accept \"nice\" addresses.\n\t\tif( !empty( $to_name ) )\n\t\t{\n\t\t\t$to = '\"'.mail_encode_header_string($to_name).'\" <'.$to.'>';\n\t\t}\n\t\tif( !empty( $from_name ) )\n\t\t{\n\t\t\t$from = '\"'.mail_encode_header_string($from_name).'\" <'.$from.'>';\n\t\t}\n\t}\n\n\t$from = mail_sanitize_header_string( $from, true );\n\t// From has to go into headers\n\t$headers['From'] = $from;\n\tif( !empty( $return_path ) )\n\t{\t// Set a return path\n\t\t$headers['Return-Path'] = $return_path;\n\t}\n\n\t// echo 'sending email to: ['.htmlspecialchars($to).'] from ['.htmlspecialchars($from).']';\n\n\t$clear_subject = $subject;\n\t$subject = mail_encode_header_string($subject);\n\n\t$message = str_replace( array( \"\\r\\n\", \"\\r\" ), $NL, $message );\n\n\t// Convert encoding of message (from internal encoding to the one of the message):\n\t// fp> why do we actually convert to $current_charset?\n\t// dh> I do not remember. Appears to make sense sending it unconverted in $evo_charset.\n\t// asimo> converting the message creates wrong output, no need for conversion, however this needs further investigation\n\t// $message = convert_charset( $message, $current_charset, $evo_charset );\n\n\tif( !isset( $headers['Content-Type'] ) )\n\t{\t// Specify charset and content-type of email\n\t\t$headers['Content-Type'] = 'text/plain; charset='.$current_charset;\n\t}\n\t$headers['MIME-Version'] = '1.0';\n\n\t$headers['Date'] = gmdate( 'r', $servertimenow );\n\n\t// ADDITIONAL HEADERS:\n\t$headers['X-Mailer'] = $app_name.' '.$app_version.' - PHP/'.phpversion();\n\t$ip_list = implode( ',', get_ip_list() );\n\tif( !empty( $ip_list ) )\n\t{ // Add X-Remote_Addr param only if its value is not empty\n\t\t$headers['X-Remote-Addr'] = $ip_list;\n\t}\n\n\t// COMPACT HEADERS:\n\t$headerstring = get_mail_headers( $headers, $NL );\n\n\t// Set an additional parameter for the return path:\n\tswitch( $Settings->get( 'sendmail_params' ) )\n\t{\n\t\tcase 'return':\n\t\t\t$sendmail_params = '-r $return-address$';\n\t\t\tbreak;\n\t\tcase 'from':\n\t\t\t$sendmail_params = '-f $return-address$';\n\t\t\tbreak;\n\t\tcase 'custom':\n\t\t\t$sendmail_params = $Settings->get( 'sendmail_params_custom' );\n\t\t\tbreak;\n\t}\n\tif( ! empty( $sendmail_params ) )\n\t{\n\t\t$additional_parameters = str_replace(\n\t\t\tarray( '$from-address$', '$return-address$' ),\n\t\t\tarray( $message_data['from_email'], ( empty( $return_path ) ? $message_data['from_email'] : $return_path ) ),\n\t\t\t$sendmail_params );\n\t}\n\telse\n\t{\n\t\t$additional_parameters = '';\n\t}\n\n\tif( mail_is_blocked( $to_email_address ) )\n\t{ // Check if the email address is blocked\n\t\t$Debuglog->add( 'Sending mail to &laquo;'.htmlspecialchars( $to_email_address ).'&raquo; FAILED, because this email marked with spam or permanent errors.', 'error' );\n\n\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'blocked' );\n\n\t\treturn false;\n\t}\n\n\tif( $email_send_simulate_only )\n\t{\t// The email sending is turned on simulation mode, Don't send a real message:\n\t\t$send_mail_result = true;\n\t}\n\telse\n\t{\t// Send email message on real mode:\n\t\t$send_mail_result = evo_mail( $to, $subject, $message_data, $headers, $additional_parameters );\n\t}\n\n\tif( ! $send_mail_result )\n\t{\t// The message has not been sent successfully\n\t\tif( $debug > 1 )\n\t\t{ // We agree to die for debugging...\n\t\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'error' );\n\n\t\t\tdebug_die( 'Sending mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo; FAILED.' );\n\t\t}\n\t\telse\n\t\t{ // Soft debugging only....\n\t\t\t$Debuglog->add( 'Sending mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo; FAILED.', 'error' );\n\n\t\t\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, 'error' );\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$Debuglog->add( 'Sent mail from &laquo;'.htmlspecialchars($from).'&raquo; to &laquo;'.htmlspecialchars($to).'&raquo;, Subject &laquo;'.htmlspecialchars($subject).'&raquo;.' );\n\n\tmail_log( $user_ID, $to_email_address, $clear_subject, $message, $headerstring, ( $email_send_simulate_only ? 'simulated' : 'ok' ) );\n\n\treturn true;\n}\n\n\n/**\n * Sends an email to User\n *\n * @param integer Recipient ID.\n * @param string Subject of the mail\n * @param string Email template name\n * @param array Email template params\n * @param boolean Force to send this email even if the user is not activated. By default not activated user won't get emails.\n *                Pasword reset, and account activation emails must be always forced.\n * @param array Additional headers ( headername => value ). Take care of injection!\n * @param string Use this param if you want use different email address instead of $User->email\n * @return boolean True if mail could be sent (not necessarily delivered!), false if not - (return value of {@link mail()})\n */\nfunction send_mail_to_User( $user_ID, $subject, $template_name, $template_params = array(), $force_on_non_activated = false, $headers = array(), $force_email_address = '' )\n{\n\tglobal $UserSettings, $Settings, $current_charset;\n\n\t$UserCache = & get_UserCache();\n\tif( $User = $UserCache->get_by_ID( $user_ID ) )\n\t{\n\t\tif( !$User->check_status( 'can_receive_any_message' ) )\n\t\t{ // user status doesn't allow to receive nor emails nor private messages\n\t\t\treturn false;\n\t\t}\n\n\t\tif( !( $User->check_status( 'is_validated' ) || $force_on_non_activated ) )\n\t\t{ // user is not activated and non activated users should not receive emails, unless force_on_non_activated is turned on\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if a new email to User with the corrensponding email type is allowed\n\t\tswitch( $template_name )\n\t\t{\n\t\t\tcase 'account_activate':\n\t\t\t\tif( $Settings->get( 'validation_process' ) == 'easy' && !$template_params['is_reminder'] )\n\t\t\t\t{ // this is not a notification email\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'private_message_new':\n\t\t\tcase 'private_messages_unread_reminder':\n\t\t\tcase 'post_new':\n\t\t\tcase 'comment_new':\n\t\t\tcase 'account_activated':\n\t\t\tcase 'account_closed':\n\t\t\tcase 'account_reported':\n\t\t\tcase 'account_changed':\n\t\t\t\t// this is a notificaiton email\n\t\t\t\t$email_limit_setting = 'notification_email_limit';\n\t\t\t\t$email_counter_setting = 'last_notification_email';\n\t\t\t\tif( !check_allow_new_email( $email_limit_setting, $email_counter_setting, $User->ID ) )\n\t\t\t\t{ // more notification email is not allowed today\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'newsletter':\n\t\t\t\t// this is a newsletter email\n\t\t\t\t$email_limit_setting = 'newsletter_limit';\n\t\t\t\t$email_counter_setting = 'last_newsletter';\n\t\t\t\tif( !check_allow_new_email( $email_limit_setting, $email_counter_setting, $User->ID ) )\n\t\t\t\t{ // more newsletter email is not allowed today\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'newsletter_test':\n\t\t\t\t// this is a newsletter email, used to send test email by current admin\n\t\t\t\t$template_name = 'newsletter';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update notification sender's info from General settings\n\t\t$User->update_sender();\n\n\t\tswitch( $UserSettings->get( 'email_format', $User->ID ) )\n\t\t{\t// Set Content-Type from user's setting \"Email format\"\n\t\t\tcase 'auto':\n\t\t\t\t$template_params['boundary'] = 'b2evo-'.md5( rand() );\n\t\t\t\t$headers['Content-Type'] = 'multipart/mixed; boundary=\"'.$template_params['boundary'].'\"';\n\t\t\t\tbreak;\n\t\t\tcase 'html':\n\t\t\t\t$headers['Content-Type'] = 'text/html; charset='.$current_charset;\n\t\t\t\tbreak;\n\t\t\tcase 'text':\n\t\t\t\t$headers['Content-Type'] = 'text/plain; charset='.$current_charset;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( ! isset( $template_params['recipient_User'] ) )\n\t\t{ // Set recipient User, it should be defined for each template because of email footer\n\t\t\t$template_params['recipient_User'] = $User;\n\t\t}\n\n\t\t// Get a message text from template file\n\t\t$message = mail_template( $template_name, $UserSettings->get( 'email_format', $User->ID ), $template_params, $User );\n\n\t\t// Autoinsert user's data\n\t\t$subject = mail_autoinsert_user_data( $subject, $User );\n\t\t$message = mail_autoinsert_user_data( $message, $User );\n\n\t\t$to_email = !empty( $force_email_address ) ? $force_email_address : $User->email;\n\n\t\tif( send_mail( $to_email, NULL, $subject, $message, NULL, NULL, $headers, $user_ID ) )\n\t\t{ // email was sent, update last email settings;\n\t\t\tif( isset( $email_limit_setting, $email_counter_setting ) )\n\t\t\t{ // User Settings(email counters) need to be updated\n\t\t\t\tupdate_user_email_counter( $email_limit_setting, $email_counter_setting, $user_ID );\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// No user or email could not be sent\n\treturn false;\n}\n\n\n/**\n * Autoinsert user's data into subject or message of the email\n *\n * @param string Text\n * @param object User\n * @return string Text\n*/\nfunction mail_autoinsert_user_data( $text, $User = NULL )\n{\n\tif( !$User )\n\t{\t// No user\n\t\treturn $text;\n\t}\n\n\t$rpls_from = array( '$login$' , '$email$', '$user_ID$', '$unsubscribe_key$' );\n\t$rpls_to = array( $User->login, $User->email, $User->ID, '$secret_content_start$'.md5( $User->ID.$User->unsubscribe_key ).'$secret_content_end$' );\n\n\treturn str_replace( $rpls_from, $rpls_to, $text );\n}\n\n\n/**\n * Get a mail message text by template name\n *\n * @param string Template name\n * @param string Email format ( auto | html | text )\n * @param array Params\n * @param object User\n * @return string|array Mail message OR Array of the email contents when message is multipart content\n */\nfunction mail_template( $template_name, $format = 'auto', $params = array(), $User = NULL )\n{\n\tglobal $current_charset;\n\n\tif( !empty( $params['locale'] ) )\n\t{ // Switch to locale for current email template\n\t\tlocale_temp_switch( $params['locale'] );\n\t}\n\n\t// Set extension of template\n\t$template_exts = array();\n\tswitch( $format )\n\t{\n\t\tcase 'auto':\n\t\t\t// $template_exts['non-mime'] = '.txt.php'; // The area that is ignored by MIME-compliant clients\n\t\t\t$template_exts['text'] = '.txt.php';\n\t\t\t$template_exts['html'] = '.html.php';\n\t\t\t$boundary = $params['boundary'];\n\t\t\t$boundary_alt = 'b2evo-alt-'.md5( rand() );\n\t\t\t$template_headers = array(\n\t\t\t\t\t'text' => 'Content-Type: text/plain; charset='.$current_charset,\n\t\t\t\t\t'html' => 'Content-Type: text/html; charset='.$current_charset,\n\t\t\t\t);\n\t\t\t// Store all contents in this array for multipart message\n\t\t\t$template_contents = array(\n\t\t\t\t\t'charset' => $current_charset, // Charset for email message\n\t\t\t\t\t'full' => '', // Full content with html and plain\n\t\t\t\t\t'html' => '', // HTML\n\t\t\t\t\t'text' => '', // Plain text\n\t\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'html':\n\t\t\t$template_exts['html'] = '.html.php';\n\t\t\tbreak;\n\n\t\tcase 'text':\n\t\t\t$template_exts['text'] = '.txt.php';\n\t\t\tbreak;\n\t}\n\n\t$template_message = '';\n\n\tif( isset( $boundary, $boundary_alt ) )\n\t{ // Start new boundary content\n\t\t$template_message .= \"\\n\".'--'.$boundary.\"\\n\";\n\t\t$template_message .= 'Content-Type: multipart/alternative; boundary=\"'.$boundary_alt.'\"'.\"\\n\\n\";\n\t}\n\n\tforeach( $template_exts as $format => $ext )\n\t{\n\t\t$formated_message = '';\n\n\t\tif( isset( $boundary, $boundary_alt ) && $format != 'non-mime' )\n\t\t{ // Start new boundary alt content\n\t\t\t$template_message .= \"\\n\".'--'.$boundary_alt.\"\\n\";\n\t\t}\n\n\t\tif( isset( $template_headers[ $format ] ) )\n\t\t{ // Header data for each content\n\t\t\t$template_message .= $template_headers[ $format ].\"\\n\\n\";\n\t\t}\n\n\t\t// Get mail template\n\t\tob_start();\n\t\temailskin_include( $template_name.$ext, $params );\n\t\t$formated_message .= ob_get_clean();\n\n\t\tif( ! empty( $User ) )\n\t\t{ // Replace $login$ with gender colored link + icon in HTML format,\n\t\t  //   and with simple login text in PLAIN TEXT format\n\t\t\tif( $format == 'html' )\n\t\t\t{\n\t\t\t\t$user_login = $User->get_colored_login( array(\n\t\t\t\t\t\t'mask'      => '$avatar$ $login$',\n\t\t\t\t\t\t'use_style' => true,\n\t\t\t\t\t\t'protocol'  => 'http:',\n\t\t\t\t\t) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$user_login = $User->login;\n\t\t\t}\n\t\t\t$formated_message = str_replace( '$login$', $user_login, $formated_message );\n\t\t}\n\n\t\t$template_message .= $formated_message;\n\t\tif( isset( $template_contents ) )\n\t\t{ // Multipart content\n\t\t\t$template_contents[ $format ] = $formated_message;\n\t\t}\n\t}\n\n\tif( isset( $boundary, $boundary_alt ) )\n\t{ // End all boundary contents\n\t\t$template_message .= \"\\n\".'--'.$boundary_alt.'--'.\"\\n\";\n\t\t$template_message .= \"\\n\".'--'.$boundary.'--'.\"\\n\";\n\t}\n\n\tif( !empty( $params['locale'] ) )\n\t{ // Restore previous locale\n\t\tlocale_restore_previous();\n\t}\n\n\tif( isset( $template_contents ) )\n\t{ // Return array for multipart content\n\t\t$template_contents['full'] = $template_message;\n\t\treturn $template_contents;\n\t}\n\telse\n\t{ // Return string if email message contains one content (html or text)\n\t\treturn $template_message;\n\t}\n}\n\n\n/**\n * Include email template from folder /skins_email/custom/ or /skins_email/\n *\n * @param string Template name\n * @param array Params\n */\nfunction emailskin_include( $template_name, $params = array() )\n{\n\tglobal $emailskins_path, $rsc_url;\n\n\t/**\n\t* @var Log\n\t*/\n\tglobal $Debuglog;\n\tglobal $Timer;\n\n\t$timer_name = 'emailskin_include('.$template_name.')';\n\t$Timer->resume( $timer_name );\n\n\t$is_customized = false;\n\n\t// Try to include custom template firstly\n\t$template_path = $emailskins_path.'custom/'.$template_name;\n\tif( file_exists( $template_path ) )\n\t{ // Include custom template file if it exists\n\t\t$Debuglog->add( 'emailskin_include: '.rel_path_to_base( $template_path ), 'skins' );\n\t\trequire $template_path;\n\t\t// This template is customized, Don't include standard template\n\t\t$is_customized = true;\n\t}\n\n\tif( !$is_customized )\n\t{ // Try to include standard template only if custom template doesn't exist\n\t\t$template_path = $emailskins_path.$template_name;\n\t\tif( file_exists( $template_path ) )\n\t\t{ // Include standard template file if it exists\n\t\t\t$Debuglog->add( 'emailskin_include: '.rel_path_to_base( $template_path ), 'skins' );\n\t\t\trequire $template_path;\n\t\t}\n\t}\n\n\t$Timer->pause( $timer_name );\n}\n\n\n/**\n * Get attribute \"style\" by class name for element in email templates\n *\n * @param string Class name\n * @param boolean TRUE to return string as ' style=\"css_properties\"' otherwise only 'css_properties'\n * @return string\n */\nfunction emailskin_style( $class, $set_attr_name = true )\n{\n\tglobal $emailskins_styles;\n\n\tif( ! is_array( $emailskins_styles ) )\n\t{ // Load email styles only first time\n\t\tglobal $emailskins_path;\n\t\trequire_once $emailskins_path.'_email_style.php';\n\n\t\tforeach( $emailskins_styles as $classes => $styles )\n\t\t{\n\t\t\tif( strpos( $classes, ',' ) !== false )\n\t\t\t{ // This style is used for several classes\n\t\t\t\tunset( $emailskins_styles[ $classes ] );\n\t\t\t\t$classes = explode( ',', $classes );\n\t\t\t\tforeach( $classes as $class_name )\n\t\t\t\t{\n\t\t\t\t\t$class_name = trim( $class_name );\n\t\t\t\t\tif( isset( $emailskins_styles[ $class_name ] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$emailskins_styles[ $class_name ] .= $styles;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$emailskins_styles[ $class_name ] = $styles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif( strpos( $class, '+' ) !== false )\n\t{ // Several classes should be applied this\n\t\t$classes = explode( '+', $class );\n\t\t$style = '';\n\t\tforeach( $classes as $c => $class )\n\t\t{\n\t\t\t$style .= emailskin_style( $class, false );\n\t\t}\n\n\t\treturn empty( $style ) ? '' : ( $set_attr_name ? ' style=\"'.$style.'\"' : $style );\n\t}\n\telseif( isset( $emailskins_styles[ $class ] ) )\n\t{ // One class\n\t\t$style = trim( str_replace( array( \"\\r\", \"\\n\", \"\\t\" ), '', $emailskins_styles[ $class ] ) );\n\t\t$style = str_replace( ': ', ':', $style );\n\n\t\treturn $set_attr_name ? ' style=\"'.$style.'\"' : $style;\n\t}\n\n\treturn '';\n}\n\n\n/**\n * If first parameter evaluates to true printf() gets called using the first parameter\n * as args and the second parameter as print-pattern\n *\n * @param mixed variable to test and output if it's true or $disp_none is given\n * @param string printf-pattern to use (%s gets replaced by $var)\n * @param string printf-pattern to use, if $var is numeric and > 1 (%s gets replaced by $var)\n * @param string printf-pattern to use if $var evaluates to false (%s gets replaced by $var)\n */\nfunction disp_cond( $var, $disp_one, $disp_more = NULL, $disp_none = NULL )\n{\n\tif( is_numeric($var) && $var > 1 )\n\t{\n\t\tprintf( ( $disp_more === NULL ? $disp_one : $disp_more ), $var );\n\t\treturn true;\n\t}\n\telseif( $var )\n\t{\n\t\tprintf( $disp_one, $var );\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif( $disp_none !== NULL )\n\t\t{\n\t\t\tprintf( $disp_none, $var );\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n\n/**\n * Create IMG tag for an action icon.\n *\n * @param string TITLE text (IMG and A link)\n * @param string icon code for {@link get_icon()}\n * @param string URL where the icon gets linked to (empty to not wrap the icon in a link)\n * @param string word to be displayed after icon (if no icon gets displayed, $title will be used instead!)\n * @param integer 1-5: weight of the icon. The icon will be displayed only if its weight is >= than the user setting threshold.\n *                     Use 5, if it's a required icon - all others could get disabled by the user. (Default: 4)\n * @param integer 1-5: weight of the word. The word will be displayed only if its weight is >= than the user setting threshold.\n *                     (Default: 1)\n * @param array Additional attributes to the A tag. The values must be properly encoded for html output (e.g. quotes).\n *        It may also contain these params:\n *         - 'use_js_popup': if true, the link gets opened as JS popup. You must also pass an \"id\" attribute for this!\n *         - 'use_js_size': use this to override the default popup size (\"500, 400\")\n *         - 'class': defaults to 'action_icon', if not set; use \"\" to not use it\n * @param array Attributes for the icon\n * @return string The generated action icon link.\n */\nfunction action_icon( $title, $icon, $url, $word = NULL, $icon_weight = NULL, $word_weight = NULL, $link_attribs = array(), $icon_attribs = array() )\n{\n\tglobal $UserSettings;\n\n\t$link_attribs['href'] = $url;\n\t$link_attribs['title'] = $title;\n\n\tif( is_null($icon_weight) )\n\t{\n\t\t$icon_weight = 4;\n\t}\n\tif( is_null($word_weight) )\n\t{\n\t\t$word_weight = 1;\n\t}\n\n\tif( ! isset($link_attribs['class']) )\n\t{\n\t\t$link_attribs['class'] = 'action_icon';\n\t}\n\n\tif( get_icon( $icon, 'rollover' ) )\n\t{\n\t\tif( empty($link_attribs['class']) )\n\t\t{\n\t\t\t$link_attribs['class'] = 'rollover';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link_attribs['class'] .= ' rollover';\n\t\t}\n\n\t\tif( get_icon( $icon, 'sprite' ) )\n\t\t{ // Set class \"rollover_sprite\" If image uses sprite\n\t\t\t$link_attribs['class'] .= '_sprite';\n\t\t}\n\t}\n\t//$link_attribs['class'] .= $icon != '' ? ' '.$icon : ' noicon';\n\n\t// \"use_js_popup\": open link in a JS popup\n\t// TODO: this needs to be rewritten with jQuery instead\n\tif( false && ! empty($link_attribs['use_js_popup']) )\n\t{\n\t\t$popup_js = 'var win = new PopupWindow(); win.setUrl( \\''.$link_attribs['href'].'\\' ); win.setSize(  ); ';\n\n\t\tif( isset($link_attribs['use_js_size']) )\n\t\t{\n\t\t\tif( ! empty($link_attribs['use_js_size']) )\n\t\t\t{\n\t\t\t\t$popup_size = $link_attribs['use_js_size'];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$popup_size = '500, 400';\n\t\t}\n\t\tif( isset($popup_size) )\n\t\t{\n\t\t\t$popup_js .= 'win.setSize( '.$popup_size.' ); ';\n\t\t}\n\t\t$popup_js .= 'win.showPopup(\\''.$link_attribs['id'].'\\'); return false;';\n\n\t\tif( empty( $link_attribs['onclick'] ) )\n\t\t{\n\t\t\t$link_attribs['onclick'] = $popup_js;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link_attribs['onclick'] .= $popup_js;\n\t\t}\n\t\tunset($link_attribs['use_js_popup']);\n\t\tunset($link_attribs['use_js_size']);\n\t}\n\n\t$display_icon = empty( $UserSettings ) ? false : ($icon_weight >= $UserSettings->get('action_icon_threshold'));\n\t$display_word = empty( $UserSettings ) ? false : ($word_weight >= $UserSettings->get('action_word_threshold'));\n\n\t$a_body = '';\n\n\tif( $display_icon || ! $display_word )\n\t{\t// We MUST display an action icon in order to make the user happy:\n\t\t// OR we default to icon because the user doesn't want the word either!!\n\n\t\t$icon_attribs = array_merge( array(\n\t\t\t\t'title' => $title\n\t\t\t), $icon_attribs );\n\n\t\tif( $icon_s = get_icon( $icon, 'imgtag', $icon_attribs, true ) )\n\t\t{\n\t\t\t$a_body .= $icon_s;\n\t\t}\n\t\telse\n\t\t{ // fallback to word\n\t\t\t$display_word = true;\n\t\t}\n\t}\n\n\tif( $display_word )\n\t{\t// We MUST display an action word in order to make the user happy:\n\n\t\tif( $display_icon )\n\t\t{ // We already have an icon, display a SHORT word:\n\t\t\tif( !empty($word) )\n\t\t\t{\t// We have provided a short word:\n\t\t\t\t$a_body .= $word;\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// We fall back to alt:\n\t\t\t\t$a_body .= get_icon( $icon, 'legend' );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t// No icon display, let's display a LONG word/text:\n\t\t\t$a_body .= trim( $title, ' .!' );\n\t\t}\n\n\t\t// Add class \"hoverlink\" for icon with text\n\t\t$link_attribs['class'] .= ' hoverlink';\n\t}\n\n\n\t// NOTE: We do not use format_to_output with get_field_attribs_as_string() here, because it interferes with the Results class (eval() fails on entitied quotes..) (blueyed)\n\treturn '<a'.get_field_attribs_as_string( $link_attribs, false ).'>'.$a_body.'</a>';\n}\n\n\n/**\n * Get properties of an icon.\n *\n * Note: to get a file type icon, use {@link File::get_icon()} instead.\n *\n * @uses get_icon_info()\n * @param string icon for what? (key)\n * @param string what to return for that icon ('imgtag', 'alt', 'legend', 'file', 'url', 'size' {@link imgsize()})\n * @param array additional params\n *   - 'class' => class name when getting 'imgtag',\n *   - 'size' => param for 'size',\n *   - 'title' => title attribute for 'imgtag'\n * @param boolean true to include this icon into the legend at the bottom of the page (works for 'imgtag' only)\n * @return mixed False on failure, string on success.\n */\nfunction get_icon( $iconKey, $what = 'imgtag', $params = NULL, $include_in_legend = false )\n{\n\tglobal $admin_subdir, $Debuglog, $use_strict;\n\tglobal $conf_path;\n\tglobal $rsc_path, $rsc_uri;\n\n\tif( ! function_exists('get_icon_info') )\n\t{\n\t\trequire_once $conf_path.'_icons.php';\n\t}\n\n\t$icon = get_icon_info($iconKey);\n\tif( ! $icon )\n\t{\n\t\t$Debuglog->add('No image defined for '.var_export( $iconKey, true ).'!', 'icons');\n\t\treturn false;\n\t}\n\n\tif( !isset( $icon['file'] ) && $what != 'imgtag' )\n\t{\n\t\t$icon['file'] = 'icons/icons_sprite.png';\n\t}\n\n\tswitch( $what )\n\t{\n\t\tcase 'rollover':\n\t\t\tif( isset( $icon['rollover'] ) )\n\t\t\t{ // Image has rollover available\n\t\t\t\tglobal $b2evo_icons_type;\n\n\t\t\t\tif( isset( $b2evo_icons_type ) && ( ! empty( $icon['glyph'] ) || ! empty( $icon['fa'] ) ) )\n\t\t\t\t{ // Glyph and font-awesome icons don't have rollover effect\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn $icon['rollover'];\n\t\t\t}\n\t\t\treturn false;\n\t\t\t/* BREAK */\n\n\n\t\tcase 'file':\n\t\t\treturn $rsc_path.$icon['file'];\n\t\t\t/* BREAK */\n\n\n\t\tcase 'alt':\n\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t{ // alt tag from $map_iconfiles\n\t\t\t\treturn $icon['alt'];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // fallback to $iconKey as alt-tag\n\t\t\t\treturn $iconKey;\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'legend':\n\t\t\tif( isset( $icon['legend'] ) )\n\t\t\t{ // legend tag from $map_iconfiles\n\t\t\t\treturn $icon['legend'];\n\t\t\t}\n\t\t\telse\n\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t{ // alt tag from $map_iconfiles\n\t\t\t\treturn $icon['alt'];\n\t\t\t}\n\t\t\telse\n\t\t\t{ // fallback to $iconKey as alt-tag\n\t\t\t\treturn $iconKey;\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'class':\n\t\t\tif( isset($icon['class']) )\n\t\t\t{\n\t\t\t\treturn $icon['class'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t/* BREAK */\n\n\t\tcase 'url':\n\t\t\treturn $rsc_uri.$icon['file'];\n\t\t\t/* BREAK */\n\n\t\tcase 'size':\n\t\t\tif( !isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$Debuglog->add( 'No iconsize for ['.$iconKey.']', 'icons' );\n\n\t\t\t\t$icon['size'] = imgsize( $rsc_path.$icon['file'] );\n\t\t\t}\n\n\t\t\tswitch( $params['size'] )\n\t\t\t{\n\t\t\t\tcase 'width':\n\t\t\t\t\treturn $icon['size'][0];\n\n\t\t\t\tcase 'height':\n\t\t\t\t\treturn $icon['size'][1];\n\n\t\t\t\tcase 'widthxheight':\n\t\t\t\t\treturn $icon['size'][0].'x'.$icon['size'][1];\n\n\t\t\t\tcase 'width':\n\t\t\t\t\treturn $icon['size'][0];\n\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\"';\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn $icon['size'];\n\t\t\t}\n\t\t\t/* BREAK */\n\n\n\t\tcase 'xy':\n\t\t\tif( isset( $icon['xy'] ) )\n\t\t\t{ // Return data for style property \"background-position\"\n\t\t\t\treturn \"-\".$icon['xy'][0].\"px -\".$icon['xy'][1].\"px\";\n\t\t\t}\n\t\t\treturn false;\n\n\n\t\tcase 'sprite':\n\t\t\tif( isset( $icon['xy'] ) )\n\t\t\t{\t// Image uses spite file\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t\t/* BREAK */\n\n\n\t\tcase 'imgtag':\n\t\t\tglobal $b2evo_icons_type;\n\n\t\t\tif( isset( $b2evo_icons_type ) )\n\t\t\t{ // Specific icons type is defined\n\t\t\t\t$current_icons_type = $b2evo_icons_type;\n\t\t\t\tif( $current_icons_type == 'fontawesome-glyphicons' )\n\t\t\t\t{ // Use fontawesome icons as a priority over the glyphicons\n\t\t\t\t\t$current_icons_type = isset( $icon['fa'] ) ? 'fontawesome' : 'glyphicons';\n\t\t\t\t}\n\t\t\t\tswitch( $current_icons_type )\n\t\t\t\t{\n\t\t\t\t\tcase 'glyphicons':\n\t\t\t\t\t\t// Use glyph icons of bootstrap\n\t\t\t\t\t\t$icon_class_prefix = 'glyphicon glyphicon-';\n\t\t\t\t\t\t$icon_param_name = 'glyph';\n\t\t\t\t\t\t$icon_content = '&nbsp;';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'fontawesome':\n\t\t\t\t\t\t// Use the icons from http://fortawesome.github.io/Font-Awesome/icons/\n\t\t\t\t\t\t$icon_class_prefix = 'fa fa-';\n\t\t\t\t\t\t$icon_param_name = 'fa';\n\t\t\t\t\t\t$icon_content = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( isset( $icon_class_prefix ) && ! empty( $icon[ $icon_param_name ] ) )\n\t\t\t{ // Use glyph or fa icon if it is defined in icons config\n\t\t\t\tif( isset( $params['class'] ) )\n\t\t\t\t{ // Get class from params\n\t\t\t\t\t$params['class'] = $icon_class_prefix.$icon[ $icon_param_name ].' '.$params['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{ // Set default class\n\t\t\t\t\t$params['class'] = $icon_class_prefix.$icon[ $icon_param_name ];\n\t\t\t\t}\n\n\t\t\t\t$styles = array();\n\t\t\t\tif( isset( $icon['color-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a color for icon only for current type\n\t\t\t\t\tif( $icon['color-'.$icon_param_name] != 'default' )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = 'color:'.$icon['color-'.$icon_param_name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif( isset( $icon['color'] ) )\n\t\t\t\t{ // Set a color for icon for all types\n\t\t\t\t\tif( $icon['color'] != 'default' )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = 'color:'.$icon['color'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['color-over'] ) )\n\t\t\t\t{ // Set a color for mouse over event\n\t\t\t\t\t$params['data-color'] = $icon['color-over'];\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['toggle-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a color for mouse over event\n\t\t\t\t\t$params['data-toggle'] = $icon['toggle-'.$icon_param_name];\n\t\t\t\t}\n\n\t\t\t\tif( ! isset( $params['title'] ) )\n\t\t\t\t{ // Use 'alt' for 'title'\n\t\t\t\t\tif( isset( $params['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $params['alt'];\n\t\t\t\t\t\tunset( $params['alt'] );\n\t\t\t\t\t}\n\t\t\t\t\telse if( ! isset( $params['alt'] ) && isset( $icon['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $icon['size-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a size for icon only for current type\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][0] ) )\n\t\t\t\t\t{ // Width\n\t\t\t\t\t\t$styles['width'] = 'width:'.$icon['size-'.$icon_param_name][0].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][1] ) )\n\t\t\t\t\t{ // Height\n\t\t\t\t\t\t$styles['width'] = 'height:'.$icon['size-'.$icon_param_name][1].'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['style'] ) )\n\t\t\t\t{ // Keep styles from params\n\t\t\t\t\t$styles[] = $params['style'];\n\t\t\t\t}\n\t\t\t\tif( ! empty( $styles ) )\n\t\t\t\t{ // Init attribute 'style'\n\t\t\t\t\t$params['style'] = implode( ';', $styles );\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$params = get_field_attribs_as_string( $params, false );\n\n\t\t\t\t$r = '<span'.$params.'>'.$icon_content.'</span>';\n\t\t\t}\n\t\t\telseif( ! isset( $icon['file'] ) )\n\t\t\t{ // Use span tag with sprite instead of img\n\t\t\t\t$styles = array();\n\n\t\t\t\tif( isset( $params['xy'] ) )\n\t\t\t\t{ // Get background position from params\n\t\t\t\t\t$styles[] = \"background-position: \".$params['xy'][0].\"px \".$params['xy'][1].\"px\";\n\t\t\t\t\tunset( $params['xy'] );\n\t\t\t\t}\n\t\t\t\telse if( isset( $icon['xy'] ) )\n\t\t\t\t{ // Set background position in the icons_sprite.png\n\t\t\t\t\t$styles[] = \"background-position: -\".$icon['xy'][0].\"px -\".$icon['xy'][1].\"px\";\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['size'] ) )\n\t\t\t\t{ // Get sizes from params\n\t\t\t\t\t$icon['size'] = $params['size'];\n\t\t\t\t\tunset( $params['size'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t{ // Set width & height\n\t\t\t\t\tif( $icon['size'][0] != 16 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = \"width: \".$icon['size'][0].\"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif( $icon['size'][1] != 16 )\n\t\t\t\t\t{\n\t\t\t\t\t\t$styles[] = \"height: \".$icon['size'][1].\"px; line-height: \".$icon['size'][1].\"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['style'] ) )\n\t\t\t\t{ // Get styles from params\n\t\t\t\t\t$styles[] = $params['style'];\n\t\t\t\t}\n\t\t\t\tif( count( $styles ) > 0 )\n\t\t\t\t{\n\t\t\t\t\t$params['style'] = implode( '; ', $styles);\n\t\t\t\t}\n\n\t\t\t\tif( ! isset( $params['title'] ) )\n\t\t\t\t{\t// Use 'alt' for 'title'\n\t\t\t\t\tif( isset( $params['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $params['alt'];\n\t\t\t\t\t\tunset( $params['alt'] );\n\t\t\t\t\t}\n\t\t\t\t\telse if( ! isset( $params['alt'] ) && isset( $icon['alt'] ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['title'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( isset( $params['class'] ) )\n\t\t\t\t{\t// Get class from params\n\t\t\t\t\t$params['class'] = 'icon '.$params['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Set default class\n\t\t\t\t\t$params['class'] = 'icon';\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$params = get_field_attribs_as_string( $params, false );\n\n\t\t\t\t$r = '<span'.$params.'>&nbsp;</span>';\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Use img tag\n\t\t\t\t$r = '<img src=\"'.$rsc_uri.$icon['file'].'\" ';\n\n\t\t\t\tif( !$use_strict )\n\t\t\t\t{\t// Include non CSS fallbacks - transitional only:\n\t\t\t\t\t$r .= 'border=\"0\" align=\"top\" ';\n\t\t\t\t}\n\n\t\t\t\t// Include class (will default to \"icon\"):\n\t\t\t\tif( ! isset( $params['class'] ) )\n\t\t\t\t{\n\t\t\t\t\tif( isset($icon['class']) )\n\t\t\t\t\t{\t// This icon has a class\n\t\t\t\t\t\t$params['class'] = $icon['class'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$params['class'] = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Include size (optional):\n\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t{\n\t\t\t\t\t$r .= 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\" ';\n\t\t\t\t}\n\n\t\t\t\t// Include alt (XHTML mandatory):\n\t\t\t\tif( ! isset( $params['alt'] ) )\n\t\t\t\t{\n\t\t\t\t\tif( isset( $icon['alt'] ) )\n\t\t\t\t\t{ // alt-tag from $map_iconfiles\n\t\t\t\t\t\t$params['alt'] = $icon['alt'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{ // $iconKey as alt-tag\n\t\t\t\t\t\t$params['alt'] = $iconKey;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add all the attributes:\n\t\t\t\t$r .= get_field_attribs_as_string( $params, false );\n\n\t\t\t\t// Close tag:\n\t\t\t\t$r .= '/>';\n\n\n\t\t\t\tif( $include_in_legend && ( $IconLegend = & get_IconLegend() ) )\n\t\t\t\t{ // This icon should be included into the legend:\n\t\t\t\t\t$IconLegend->add_icon( $iconKey );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $r;\n\t\t\t/* BREAK */\n\n\t\tcase 'noimg':\n\t\t\tglobal $b2evo_icons_type;\n\n\t\t\tif( isset( $b2evo_icons_type ) )\n\t\t\t{ // Specific icons type is defined\n\t\t\t\t$current_icons_type = $b2evo_icons_type;\n\t\t\t\tif( $current_icons_type == 'fontawesome-glyphicons' )\n\t\t\t\t{ // Use fontawesome icons as a priority over the glyphicons\n\t\t\t\t\t$current_icons_type = isset( $icon['fa'] ) ? 'fontawesome' : 'glyphicons';\n\t\t\t\t}\n\t\t\t\tswitch( $current_icons_type )\n\t\t\t\t{\n\t\t\t\t\tcase 'glyphicons':\n\t\t\t\t\t\t// Use glyph icons of bootstrap\n\t\t\t\t\t\t$icon_param_name = 'glyph';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'fontawesome':\n\t\t\t\t\t\t// Use the icons from http://fortawesome.github.io/Font-Awesome/icons/\n\t\t\t\t\t\t$icon_param_name = 'fa';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$styles = array();\n\t\t\tif( isset( $icon_param_name ) && ! empty( $icon[ $icon_param_name ] ) )\n\t\t\t{ // Use glyph or fa icon if it is defined in icons config\n\t\t\t\tif( isset( $icon['size-'.$icon_param_name] ) )\n\t\t\t\t{ // Set a size for icon only for current type\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][0] ) )\n\t\t\t\t\t{ // Width\n\t\t\t\t\t\t$styles['width'] = 'width:'.$icon['size-'.$icon_param_name][0].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size-'.$icon_param_name][1] ) )\n\t\t\t\t\t{ // Height\n\t\t\t\t\t\t$styles['width'] = 'height:'.$icon['size-'.$icon_param_name][1].'px';\n\t\t\t\t\t}\n\t\t\t\t\tif( isset( $icon['size'] ) )\n\t\t\t\t\t{ // Unset size for sprite icon\n\t\t\t\t\t\tunset( $icon['size'] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Include size (optional):\n\t\t\tif( isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$params['size'] = $icon['size'];\n\t\t\t}\n\t\t\t$styles[] = 'margin:0 2px';\n\n\t\t\tif( isset( $params['style'] ) )\n\t\t\t{ // Keep styles from params\n\t\t\t\t$styles[] = $params['style'];\n\t\t\t}\n\t\t\tif( ! empty( $styles ) )\n\t\t\t{ // Init attribute 'style'\n\t\t\t\t$params['style'] = implode( ';', $styles );\n\t\t\t}\n\n\t\t\treturn get_icon( 'pixel', 'imgtag', $params );\n\t\t\t/* BREAK */\n\t\t\t/*\n\t\t\t$blank_icon = get_icon_info('pixel');\n\n\t\t\t$r = '<img src=\"'.$rsc_uri.$blank_icon['file'].'\" ';\n\n\t\t\t// TODO: dh> add this only for !$use_strict, like above?\n\t\t\t// Include non CSS fallbacks (needed by bozos... and basic skin):\n\t\t\t$r .= 'border=\"0\" align=\"top\" ';\n\n\t\t\t// Include class (will default to \"noicon\"):\n\t\t\tif( ! isset( $params['class'] ) )\n\t\t\t{\n\t\t\t\tif( isset($icon['class']) )\n\t\t\t\t{\t// This icon has a class\n\t\t\t\t\t$params['class'] = $icon['class'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$params['class'] = 'no_icon';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Include size (optional):\n\t\t\tif( isset( $icon['size'] ) )\n\t\t\t{\n\t\t\t\t$r .= 'width=\"'.$icon['size'][0].'\" height=\"'.$icon['size'][1].'\" ';\n\t\t\t}\n\n\t\t\t// Include alt (XHTML mandatory):\n\t\t\tif( ! isset( $params['alt'] ) )\n\t\t\t{\n\t\t\t\t$params['alt'] = '';\n\t\t\t}\n\n\t\t\t// Add all the attributes:\n\t\t\t$r .= get_field_attribs_as_string( $params, false );\n\n\t\t\t// Close tag:\n\t\t\t$r .= '/>';\n\n\t\t\treturn $r;*/\n\t\t\t/* BREAK */\n\t}\n}\n\n\n/**\n * @param string date (YYYY-MM-DD)\n * @param string time\n */\nfunction form_date( $date, $time = '' )\n{\n\treturn substr( $date.'          ', 0, 10 ).' '.$time;\n}\n\n\n/**\n * Get list of client IP addresses from REMOTE_ADDR and HTTP_X_FORWARDED_FOR,\n * in this order. '' is used when no IP could be found.\n *\n * @param boolean True, to get only the first IP (probably REMOTE_ADDR)\n * @param boolean True, to convert IPv6 to IPv4 format\n * @return array|string Depends on first param.\n */\nfunction get_ip_list( $firstOnly = false, $convert_to_ipv4 = false )\n{\n\t$r = array();\n\n\tif( ! empty( $_SERVER['REMOTE_ADDR'] ) )\n\t{\n\t\tforeach( explode( ',', $_SERVER['REMOTE_ADDR'] ) as $l_ip )\n\t\t{\n\t\t\t$l_ip = trim( $l_ip );\n\t\t\tif( ! empty( $l_ip ) )\n\t\t\t{\n\t\t\t\tif( $convert_to_ipv4 )\n\t\t\t\t{ // Convert IP address to IPv4 format(if it is in IPv6 format)\n\t\t\t\t\t$l_ip = int2ip( ip2int( $l_ip ) );\n\t\t\t\t}\n\t\t\t\t$r[] = $l_ip;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( ! empty( $_SERVER['HTTP_X_FORWARDED_FOR'] ) )\n\t{ // IP(s) behind Proxy - this can be easily forged!\n\t\tforeach( explode( ',', $_SERVER['HTTP_X_FORWARDED_FOR'] ) as $l_ip )\n\t\t{\n\t\t\t$l_ip = trim( $l_ip );\n\t\t\tif( ! empty( $l_ip ) && $l_ip != 'unknown' )\n\t\t\t{\n\t\t\t\tif( $convert_to_ipv4 )\n\t\t\t\t{ // Convert IP address to IPv4 format(if it is in IPv6 format)\n\t\t\t\t\t$l_ip = int2ip( ip2int( $l_ip ) );\n\t\t\t\t}\n\t\t\t\t$r[] = $l_ip;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( ! isset( $r[0] ) )\n\t{ // No IP found.\n\t\t$r[] = '';\n\t}\n\n\t// Remove the duplicates\n\t$r = array_unique( $r );\n\n\treturn $firstOnly ? $r[0] : $r;\n}\n\n\n/**\n * Get list of IP addresses with link to back-office page if User has an access\n *\n * @param object|NULL User\n * @param array|NULL List of IP addresses\n * @param string Text of link, Use '#' to display IP address\n * @return array List of IP addresses\n */\nfunction get_linked_ip_list( $ip_list = NULL, $User = NULL, $link_text = '#' )\n{\n\tif( $User === NULL )\n\t{ // Get current User by default\n\t\tglobal $current_User;\n\t\t$User = & $current_User;\n\t}\n\n\tif( $ip_list === NULL )\n\t{ // Get IP addresses by function get_ip_list()\n\t\t$ip_list = get_ip_list( false, true );\n\t}\n\n\tif( ! empty( $User ) &&\n\t    $User->check_perm( 'admin', 'restricted' ) &&\n\t    $User->check_perm( 'spamblacklist', 'view' ) )\n\t{ // User has an access to backoffice, Display a link for each IP address\n\t\tglobal $admin_url;\n\t\tforeach( $ip_list as $i => $ip_address )\n\t\t{\n\t\t\tif( $link_text == '#' )\n\t\t\t{ // Use IP address aslink text\n\t\t\t\t$link_text = $ip_address;\n\t\t\t}\n\t\t\t$ip_list[ $i ] = '<a href=\"'.$admin_url.'?ctrl=antispam&amp;tab3=ipranges&amp;ip_address='.$ip_address.'\">'.$link_text.'</a>';\n\t\t}\n\t}\n\n\treturn $ip_list;\n}\n\n\n/**\n * Get the base domain (without protocol and any subdomain) of an URL.\n *\n * Gets a max of 3 domain parts (x.y.tld)\n *\n * @param string URL\n * @return string the base domain (may become empty, if found invalid)\n */\nfunction get_base_domain( $url )\n{\n\tglobal $evo_charset;\n\n\t// Chop away the protocol part(http,htpps,ftp) and the path:\n\t$domain = preg_replace( '~^([a-z]+://)?([^:/#]+)(.*)$~i', '\\\\2', $url );\n\n\tif( empty( $domain ) || preg_match( '~^(\\d+\\.)+\\d+$~', $domain ) )\n\t{\t// Empty or All numeric = IP address, don't try to cut it any further:\n\t\treturn $domain;\n\t}\n\n\t// Get the base domain up to 2 or 3 levels (x.y.tld):\n\t// NOTE: \"_\" is not really valid, but for Windows it is..\n\t// NOTE: \\w includes \"_\"\n\n\t// Convert URL to IDN:\n\t$domain = idna_encode( $domain );\n\n\tif( preg_match( '~\\.(com|net|org|int|edu|gov|mil)$~i', $domain ) )\n\t{\t// Use max 2 level domain for very well known TLDs:\n\t\t// (for example: \"sub3.sub2.sub1.domain.com\" will be \"domain.com\")\n\t\t$max_level = 2;\n\t}\n\telse\n\t{\t// Use max 3 level domain for all others:\n\t\t// (for example: \"sub3.sub2.sub1.domain.fr\" will be \"sub1.domain.fr\")\n\t\t$max_level = 3;\n\t}\n\n\t// Limit domain by 2 or 3 level depending on TLD:\n\tif( ! preg_match( '~ ( \\w (\\w|-|_)* \\. ){0,'.( $max_level - 1 ).'}   \\w (\\w|-|_)* $~ix', $domain, $match ) )\n\t{\t// Return an empty if domain doesn't match to proper format:\n\t\treturn '';\n\t}\n\n\t// Convert all symbols of domain name to UTF-8:\n\t$domain = convert_charset( idna_decode( $match[0] ), $evo_charset, 'UTF-8' );\n\n\t// Remove any prefix like \"www.\", \"www2.\", \"www9999.\" and etc.:\n\t$domain = preg_replace( '~^www[0-9]*\\.~i', '', $domain );\n\n\treturn $domain;\n}\n\n\n/**\n * Generate a valid key of size $length.\n *\n * @param integer length of key\n * @param string chars to use in generated key\n * @return string key\n */\nfunction generate_random_key( $length = 32, $keychars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' )\n{\n\t$key = '';\n\t$rnd_max = strlen($keychars) - 1;\n\n\tfor( $i = 0; $i < $length; $i++ )\n\t{\n\t\t$key .= $keychars{mt_rand(0, $rnd_max)}; // get a random character out of $keychars\n\t}\n\n\treturn $key;\n}\n\n\n/**\n * Generate a random password with no ambiguous chars\n *\n * @param integer length of password\n * @return string password\n */\nfunction generate_random_passwd( $length = NULL )\n{\n\t// fp> NOTE: do not include any characters that would make autogenerated passwords ambiguous\n\t// 1 (one) vs l (L) vs I (i)\n\t// O (letter) vs 0 (digit)\n\n\tif( empty($length) )\n\t{\n\t\t$length = rand( 8, 14 );\n\t}\n\n\treturn generate_random_key( $length, 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789' );\n}\n\n\nfunction is_create_action( $action )\n{\n\t$action_parts = explode( '_', $action );\n\n\tswitch( $action_parts[0] )\n\t{\n\t\tcase 'new':\n\t\tcase 'new_switchtab':\n\t\tcase 'copy':\n\t\tcase 'create':\t// we return in this state after a validation error\n\t\tcase 'preview':\n\t\t\treturn true;\n\n\t\tcase 'edit':\n\t\tcase 'edit_switchtab':\n\t\tcase 'update':\t// we return in this state after a validation error\n\t\tcase 'delete':\n\t\t// The following one's a bit far fetched, but can happen if we have no sheet display:\n\t\tcase 'unlink':\n\t\tcase 'view':\n\t\tcase 'extract':\n\t\t\treturn false;\n\n\t\tdefault:\n\t\t\tdebug_die( 'Unhandled action in form: '.strip_tags($action_parts[0]) );\n\t}\n}\n\n\n/**\n * Compact a date in a number keeping only integer value of the string\n *\n * @param string date\n */\nfunction compact_date( $date )\n{\n\treturn preg_replace( '#[^0-9]#', '', $date );\n}\n\n\n/**\n * Decompact a date in a date format ( Y-m-d h:m:s )\n *\n * @param string date\n */\nfunction decompact_date( $date )\n{\n\t$date0 = $date;\n\n\treturn  substr($date0,0,4).'-'.substr($date0,4,2).'-'.substr($date0,6,2).' '\n\t\t\t\t\t\t\t\t.substr($date0,8,2).':'.substr($date0,10,2).':'.substr($date0,12,2);\n}\n\n/**\n * Check the format of the phone number param and\n * format it in a french number if it is.\n *\n * @param string phone number\n */\nfunction format_phone( $phone, $hide_country_dialing_code_if_same_as_locale = true )\n{\n\tglobal $CountryCache;\n\n\t$dialing_code = NULL;\n\n\tif( substr( $phone, 0, 1 ) == '+' )\n\t{\t// We have a dialing code in the phone, so we extract it:\n\t\t$dialing_code = $CountryCache->extract_country_dialing_code( substr( $phone, 1 ) );\n\t}\n\n\tif( !is_null( $dialing_code ) && ( locale_dialing_code() == $dialing_code )\n\t\t\t&& $hide_country_dialing_code_if_same_as_locale )\n\t{\t// The phone dialing code is same as locale and we want to hide it in this case\n\t\tif( ( strlen( $phone ) - strlen( $dialing_code ) ) == 10 )\n\t\t{\t// We can format it like a french phone number ( 0x.xx.xx.xx.xx )\n\t\t\t$phone_formated = format_french_phone( '0'.substr( $phone, strlen( $dialing_code )+1 ) );\n\t\t}\n\t\telse\n\t\t{ // ( 0xxxxxxxxxxxxxx )\n\t\t\t$phone_formated = '0'.substr( $phone, strlen( $dialing_code )+1 );\n\t\t}\n\n\t}\n\telseif( !is_null( $dialing_code ) )\n\t{\t// Phone has a dialing code\n\t\tif( ( strlen( $phone ) - strlen( $dialing_code ) ) == 10 )\n\t\t{ // We can format it like a french phone number with the dialing code ( +dialing x.xx.xx.xx.xx )\n\t\t\t$phone_formated = '+'.$dialing_code.format_french_phone( ' '.substr( $phone, strlen( $dialing_code )+1 ) );\n\t\t}\n\t\telse\n\t\t{ // ( +dialing  xxxxxxxxxxx )\n\t\t\t$phone_formated = '+'.$dialing_code.' '.substr( $phone, strlen( $dialing_code )+1 );\n\t\t}\n\t}\n\telse\n\t{\n\t\tif( strlen( $phone ) == 10 )\n\t\t{ //  We can format it like a french phone number ( xx.xx.xx.xx.xx )\n\t\t\t$phone_formated = format_french_phone( $phone );\n\t\t}\n\t\telse\n\t\t{\t// We don't format phone: TODO generic format phone ( xxxxxxxxxxxxxxxx )\n\t\t\t$phone_formated = $phone;\n\t\t}\n\t}\n\n\treturn $phone_formated;\n}\n\n\n/**\n * Format a string in a french phone number\n *\n * @param string phone number\n */\nfunction format_french_phone( $phone )\n{\n\treturn substr($phone, 0 , 2).'.'.substr($phone, 2, 2).'.'.substr($phone, 4, 2)\n\t\t\t\t\t.'.'.substr($phone, 6, 2).'.'.substr($phone, 8, 2);\n}\n\n\n/**\n * Get the manual url for the given topic\n *\n * @param string topic\n * @return string url to the manual\n */\nfunction get_manual_url( $topic )\n{\n\t// fp> TODO: this below is a temmporary hack while we work on the new manual:\n\treturn 'http://b2evolution.net/man/'.str_replace( '_', '-', strtolower( $topic ) );\n}\n\n\n/**\n * Generate a link to a online help resource.\n * testing the concept of online help (aka webhelp).\n * this function should be relocated somewhere better if it is taken onboard by the project\n *\n * @todo replace [?] with icon,\n * @todo write url suffix dynamically based on topic and language\n *\n * QUESTION: launch new window with javascript maybe?\n * @param string Topic\n *        The topic should be in a format like [\\w]+(/[\\w]+)*, e.g features/online_help.\n * @param string link text, leave it NULL to get link with manual icon\n * @param string a word to be displayed after the manual icon (if no icon gets displayed, $title will be used instead!)\n * @param integer 1-5: weight of the word. The word will be displayed only if its weight is >= than the user setting threshold. (Default: 1)\n * @return string\n */\nfunction get_manual_link( $topic, $link_text = NULL, $action_word = NULL, $word_weight = 1 )\n{\n\tglobal $online_help_links;\n\n\tif( $online_help_links )\n\t{\n\t\t$manual_url = get_manual_url( $topic );\n\n\t\tif( $link_text == NULL )\n\t\t{\n\t\t\tif( $action_word == NULL )\n\t\t\t{\n\t\t\t\t$action_word = T_('Manual');\n\t\t\t}\n\t\t\t$webhelp_link = action_icon( T_('Open relevant page in online manual'), 'manual', $manual_url, $action_word, 5, $word_weight, array( 'target' => '_blank' ) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$webhelp_link = '<a href=\"'.$manual_url.'\" target = \"_blank\">'.$link_text.'</a>';\n\t\t}\n\n\t\treturn ' '.$webhelp_link;\n\t}\n\telse\n\t{\n\t\treturn '';\n\t}\n}\n\n\n/**\n * Build a string out of $field_attribs, with each attribute\n * prefixed by a space character.\n *\n * @param array Array of field attributes.\n * @param boolean Use format_to_output() for the attributes?\n * @return string\n */\nfunction get_field_attribs_as_string( $field_attribs, $format_to_output = true )\n{\n\t$r = '';\n\tforeach( $field_attribs as $l_attr => $l_value )\n\t{\n\t\tif( $l_value === NULL )\n\t\t{ // don't generate empty attributes (it may be NULL if we pass 'value' => NULL as field_param for example, because isset() does not match it!)\n\t\t\t// sam2kb> what about alt=\"\" how do we handle this?\n\t\t\t// I've removed the \"=== ''\" check now. Should not do any harm. IIRC NULL is what we want to avoid here.\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $format_to_output )\n\t\t{\n\t\t\t$r .= ' '.$l_attr.'=\"'.format_to_output( $l_value, 'formvalue' ).'\"';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$r .= ' '.$l_attr.'=\"'.$l_value.'\"';\n\t\t}\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Update values of HTML tag attributes\n *\n * @param string HTML tag\n * @param array Attributes\n * @param array Actions for each attribute:\n *              'append'  - Append to existing attribute value (Default for all)\n *              'skip'    - Skip if attribute already exists\n *              'replace' - Replace attribute to new value completely\n * @return string Updated HTML tag\n */\nfunction update_html_tag_attribs( $html_tag, $new_attribs, $attrib_actions = array() )\n{\n\tif( ! preg_match( '#^<([\\S]+)[^>]*>$#i', $html_tag, $tag_match ) )\n\t{\t// Wrong HTML tag format, Return original string:\n\t\treturn $html_tag;\n\t}\n\n\t$html_tag_name = $tag_match[1];\n\n\t$old_attribs = array();\n\tif( preg_match_all( '@(\\S+)=(\"|\\'|)(.*)(\"|\\'|>)@isU', $html_tag, $attr_matches ) )\n\t{\t// Get all existing attributes:\n\t\tforeach( $attr_matches[1] as $o => $old_attr_name )\n\t\t{\n\t\t\t$old_attribs[ $old_attr_name ] = $attr_matches[3][ $o ];\n\t\t}\n\t}\n\n\t$updated_attribs = array();\n\tforeach( $new_attribs as $new_attrib_name => $new_attrib_value )\n\t{\n\t\tif( isset( $old_attribs[ $new_attrib_name ] ) )\n\t\t{\t// If attribute exists in original HTML tag then Update it depending on selected action:\n\t\t\t$attrib_action = isset( $attrib_actions[ $new_attrib_name ] ) ? $attrib_actions[ $new_attrib_name ] : 'append';\n\t\t\tswitch( $attrib_action )\n\t\t\t{\n\t\t\t\tcase 'skip':\n\t\t\t\t\t// Don't update old value:\n\t\t\t\t\t$new_attrib_value = $old_attribs[ $new_attrib_name ];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'append':\n\t\t\t\tdefault:\n\t\t\t\t\t// Append new value to old:\n\t\t\t\t\t$new_attrib_value = $old_attribs[ $new_attrib_name ].' '.$new_attrib_value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// ELSE If attribute doesn't exist in original HTML tag then create new one.\n\n\t\t$updated_attribs[] = $new_attrib_name.'=\"'.format_to_output( $new_attrib_value, 'formvalue' ).'\"';\n\t}\n\n\treturn '<'.$html_tag_name.' '.implode( ' ', $updated_attribs ).'>';\n}\n\n\n/**\n * Is the current page an install page?\n *\n * @return boolean\n */\nfunction is_install_page()\n{\n\tglobal $is_install_page;\n\n\treturn isset( $is_install_page ) && $is_install_page === true; // check for type also, because of register_globals!\n}\n\n\n/**\n * Is the current page an admin/backoffice page?\n *\n * @return boolean\n */\nfunction is_admin_page()\n{\n\tglobal $is_admin_page;\n\n\treturn isset( $is_admin_page ) && $is_admin_page === true; // check for type also, because of register_globals!\n}\n\n\n/**\n * Is the current page a default 'Front' page of a blog?\n *\n * @return boolean\n */\nfunction is_front_page()\n{\n\tglobal $is_front;\n\n\treturn isset( $is_front ) && $is_front === true;\n}\n\n\n/**\n * Does the given url require logged in user\n *\n * @param string url\n * @param boolean set true to also check if url is login screen or not\n * @return boolean\n */\nfunction require_login( $url, $check_login_screen )\n{\n\tglobal $Settings;\n\tif( preg_match( '#/admin.php([&?].*)?$#', $url ) )\n\t{ // admin always require logged in user\n\t\treturn true;\n\t}\n\n\tif( $check_login_screen &&  preg_match( '#/login.php([&?].*)?$#', $url ) )\n\t{\n\t\treturn true;\n\t}\n\n\t$disp_names = 'threads|messages|contacts';\n\tif( !$Settings->get( 'allow_anonymous_user_list' ) )\n\t{\n\t\t$disp_names .= '|users';\n\t}\n\tif( !$Settings->get( 'allow_anonymous_user_profiles' ) )\n\t{\n\t\t$disp_names .= '|user';\n\t}\n\tif( $check_login_screen )\n\t{\n\t\t$disp_names .= '|login';\n\t}\n\tif( preg_match( '#disp=('.$disp_names.')#', $url ) )\n\t{ // $url require logged in user\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n\n/**\n * Implode array( 'x', 'y', 'z' ) to something like 'x, y and z'. Useful for displaying list to the end user.\n *\n * If there's one element in the table, it is returned.\n * If there are at least two elements, the last one is concatenated using $implode_last, while the ones before are imploded using $implode_by.\n *\n * @todo dh> I don't think using entities/HTML as default for $implode_last is sane!\n *           Use \"&\" instead and make sure that the output for HTML is HTML compliant..\n * @todo Support for locales that have a different kind of enumeration?!\n * @return string\n */\nfunction implode_with_and( $arr, $implode_by = ', ', $implode_last = ' &amp; ' )\n{\n\tswitch( count($arr) )\n\t{\n\t\tcase 0:\n\t\t\treturn '';\n\n\t\tcase 1:\n\t\t\t$r = array_shift($arr);\n\t\t\treturn $r;\n\n\t\tdefault:\n\t\t\t$r = implode( $implode_by, array_slice( $arr, 0, -1 ) )\n\t\t\t    .$implode_last.array_pop( $arr );\n\t\t\treturn $r;\n\t}\n}\n\n\n/**\n * Display an array as a list:\n *\n * @param array\n * @param string\n * @param string\n * @param string\n * @param string\n * @param string\n */\nfunction display_list( $items, $list_start = '<ul>', $list_end = '</ul>', $item_separator = '',\n\t\t\t\t\t\t\t\t\t\t\t\t$item_start = '<li>', $item_end = '</li>', $force_hash = NULL, $max_items = NULL, $link_params = array() )\n{\n\tif( !is_null($max_items) && $max_items < 1 )\n\t{\n\t\treturn;\n\t}\n\n\tif( !empty( $items ) )\n\t{\n\t\techo $list_start;\n\t\t$count = 0;\n\t\t$first = true;\n\n\t\tforeach( $items as $item )\n\t\t{\t// For each list item:\n\n\t\t\t$link = resolve_link_params( $item, $force_hash, $link_params );\n\t\t\tif( empty( $link ) )\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$count++;\n\t\t\tif( $count>1 )\n\t\t\t{\n\t\t\t\techo $item_separator;\n\t\t\t}\n\t\t\techo $item_start.$link.$item_end;\n\n\t\t\tif( !is_null($max_items) && $count >= $max_items )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\techo $list_end;\n\t}\n}\n\n\n/**\n * Credits stuff.\n */\nfunction display_param_link( $params )\n{\n\techo resolve_link_params( $params );\n}\n\n\n/**\n * Resolve a link based on params (credits stuff)\n *\n * @param array\n * @param integer\n * @param array\n * @return string\n */\nfunction resolve_link_params( $item, $force_hash = NULL, $params = array() )\n{\n\tglobal $current_locale;\n\n\t// echo 'resolve link ';\n\n\tif( is_array( $item ) )\n\t{\n\t\tif( isset( $item[0] ) )\n\t\t{\t// Older format, which displays the same thing for all locales:\n\t\t\treturn generate_link_from_params( $item, $params );\n\t\t}\n\t\telse\n\t\t{\t// First get the right locale:\n\t\t\t// echo $current_locale;\n\t\t\tforeach( $item as $l_locale => $loc_item )\n\t\t\t{\n\t\t\t\tif( $l_locale == substr( $current_locale, 0, strlen($l_locale) ) )\n\t\t\t\t{\t// We found a matching locale:\n\t\t\t\t\t//echo \"[$l_locale/$current_locale]\";\n\t\t\t\t\tif( is_array( $loc_item[0] ) )\n\t\t\t\t\t{\t// Randomize:\n\t\t\t\t\t\t$loc_item = hash_link_params( $loc_item, $force_hash );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn generate_link_from_params( $loc_item, $params );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// No match found!\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t// Super old format:\n\treturn $item;\n}\n\n\n/**\n * Get a link line, based url hash combined with probability percentage in first column\n *\n * @param array of arrays\n * @param display for a specific hash key\n */\nfunction hash_link_params( $link_array, $force_hash = NULL )\n{\n\tglobal $ReqHost, $ReqPath, $ReqURI;\n\n\tstatic $hash;\n\n\tif( !is_null($force_hash) )\n\t{\n\t\t$hash = $force_hash;\n\t}\n\telseif( !isset($hash) )\n\t{\n\t\t$key = $ReqHost.$ReqPath;\n\n\t\tglobal $Blog;\n\t\tif( !empty($Blog) && strpos( $Blog->get_setting('single_links'), 'param_' ) === 0 )\n\t\t{\t// We are on a blog that doesn't even have clean URLs for posts\n\t\t\t$key .= $ReqURI;\n\t\t}\n\n\t\t$hash = 0;\n\t\tfor( $i=0; $i<strlen($key); $i++ )\n\t\t{\n\t\t\t$hash += ord($key[$i]);\n\t\t}\n\t\t$hash = $hash % 100 + 1;\n\n\t\t// $hash = rand( 1, 100 );\n\t\tglobal $debug, $Debuglog;\n\t\tif( $debug )\n\t\t{\n\t\t\t$Debuglog->add( 'Hash key: '.$hash, 'request' );\n\t\t}\n\t}\n\t//\techo \"[$hash] \";\n\n\tforeach( $link_array as $link_params )\n\t{\n\t\t// echo '<br>'.$hash.'-'.$link_params[ 0 ];\n\t\tif( $hash <= $link_params[ 0 ] )\n\t\t{\t// select this link!\n\t\t\t// pre_dump( $link_params );\n\t\t\tarray_shift( $link_params );\n\t\t\treturn $link_params;\n\t\t}\n\t}\n\t// somehow no match, return 1st element:\n\t$link_params = $link_array[0];\n\tarray_shift( $link_params );\n\treturn $link_params;\n}\n\n\n/**\n * Generate a link from params (credits stuff)\n *\n * @param array\n * @param array\n */\nfunction generate_link_from_params( $link_params, $params = array() )\n{\n\t$url = $link_params[0];\n\tif( empty( $url ) )\n\t{\n\t\treturn '';\n\t}\n\n\t// Make sure we are not missing any param:\n\t$params = array_merge( array(\n\t\t\t'type'        => 'link',\n\t\t\t'img_url'     => '',\n\t\t\t'img_width'   => '',\n\t\t\t'img_height'  => '',\n\t\t\t'title'       => '',\n\t\t\t'target'      => '_blank',\n\t\t), $params );\n\n\t$text = $link_params[1];\n\tif( is_array($text) )\n\t{\n\t\t$text = hash_link_params( $text );\n\t\t$text = $text[0];\n\t}\n\tif( empty( $text ) )\n\t{\n\t\treturn '';\n\t}\n\n\t$r = '<a href=\"'.$url.'\"';\n\n\tif( !empty($params['target'] ) )\n\t{\n\t\t$r .= ' target=\"'.$params['target'].'\"';\n\t}\n\n\tif( $params['type'] == 'img' )\n\t{\n\t\treturn $r.' title=\"'.$params['title'].'\"><img src=\"'.$params['img_url'].'\" alt=\"'\n\t\t\t\t\t\t.$text.'\" title=\"'.$params['title'].'\" width=\"'.$params['img_width'].'\" height=\"'.$params['img_height']\n\t\t\t\t\t\t.'\" border=\"0\" /></a>';\n\t}\n\n\treturn $r.'>'.$text.'</a>';\n}\n\n\n/**\n * Send a result as javascript\n * automatically includes any Messages ( @see Log::display() )\n * no return from function as it terminates processing\n *\n * @author Yabba\n *\n * @todo dh> Move this out into some more specific (not always included) file.\n *\n * @param array $methods javascript funtions to call with array of parameters\n *\t\tformat : 'function_name' => array( param1, parm2, param3 )\n * @param boolean $send_as_html Wrap the script into an html page with script tag; default is to send as js file\n * @param string $target prepended to function calls : blank or window.parent\n */\nfunction send_javascript_message( $methods = array(), $send_as_html = false, $target = '' )\n{\n\t// lets spit out any messages\n\tglobal $Messages, $param_input_err_messages;\n\tob_start();\n\t$Messages->display();\n\t$output = ob_get_clean();\n\n\t// Initialize JavaScript params to send what field should be marked are error\n\t$js_error_params = array();\n\tif( ! empty( $param_input_err_messages ) && is_array( $param_input_err_messages ) )\n\t{\n\t\tforeach( $param_input_err_messages as $param_name => $param_error )\n\t\t{\n\t\t\t$js_error_params[] = $param_name.': \\''.format_to_js( $param_error ).'\\'';\n\t\t}\n\t}\n\t$js_error_params = '{'.implode( ', ', $js_error_params ).'}';\n\n\t// set target\n\t$target = ( $target ? $target : param( 'js_target', 'string' ) );\n\tif( $target )\n\t{\t// add trailing [dot]\n\t\t$target = trim( $target, '.' ).'.';\n\t}\n\n\t// target should be empty or window.parent.\n\tif( $target && $target != 'window.parent.' )\n\t{\n\t\tdebug_die( 'Unexpected javascript target' );\n\t}\n\n\tif( $output )\n\t{\t// we have some messages\n\t\t$output = $target.'DisplayServerMessages( \\''.format_to_js( $output ).'\\', '.$js_error_params.' );'.\"\\n\";\n\t}\n\n\tif( !empty( $methods ) )\n\t{\t// we have a methods to call\n\t\tforeach( $methods as $method => $param_list )\n\t\t{\t// loop through each requested method\n\t\t\t$params = array();\n\t\t\tif( !is_array( $param_list ) )\n\t\t\t{\t// lets make it an array\n\t\t\t\t$param_list = array( $param_list );\n\t\t\t}\n\t\t\tforeach( $param_list as $param )\n\t\t\t{\t// add each parameter to the output\n\t\t\t\tif( is_array( $param ) )\n\t\t\t\t{\t// This is an array:\n\t\t\t\t\t$param = json_encode( $param );\n\t\t\t\t}\n\t\t\t\telseif( !is_numeric( $param ) )\n\t\t\t\t{\t// this is a string, quote it:\n\t\t\t\t\t$param = '\\''.format_to_js( $param ).'\\'';\n\t\t\t\t}\n\t\t\t\t$params[] = $param;// add param to the list\n\t\t\t}\n\t\t\t// add method and parameters\n\t\t\t$output .= $target.$method.'('.implode( ',', $params ).');'.\"\\n\";\n\t\t}\n\t}\n\n\t// Send the predefined cookies:\n\tevo_sendcookies();\n\n\tif( $send_as_html )\n\t{\t// we want to send as a html document\n\t\tif( ! headers_sent() )\n\t\t{\t// Send headers only when they are not send yet to avoid an error:\n\t\t\theaders_content_mightcache( 'text/html', 0 );\t\t// Do NOT cache interactive communications.\n\t\t}\n\t\techo '<html><head></head><body><script type=\"text/javascript\">'.\"\\n\";\n\t\techo $output;\n\t\techo '</script></body></html>';\n\t}\n\telse\n\t{\t// we want to send as js\n\t\tif( ! headers_sent() )\n\t\t{\t// Send headers only when they are not send yet to avoid an error:\n\t\t\theaders_content_mightcache( 'text/javascript', 0 );\t\t// Do NOT cache interactive communications.\n\t\t}\n\t\techo $output;\n\t}\n\n\texit(0);\n}\n\n\n/**\n * Basic tidy up of strings\n *\n * @author Yabba\n * @author Tblue\n *\n * @param string $unformatted raw data\n * @return string formatted data\n */\nfunction format_to_js( $unformatted )\n{\n\treturn str_replace( array(\n\t\t\t\t\t\t\t'\\'',\n\t\t\t\t\t\t\t'\\n',\n\t\t\t\t\t\t\t'\\r',\n\t\t\t\t\t\t\t'\\t',\n\t\t\t\t\t\t\t\"\\n\",\n\t\t\t\t\t\t\t\"\\r\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'\\\\\\'',\n\t\t\t\t\t\t\t'\\\\\\\\n',\n\t\t\t\t\t\t\t'\\\\\\\\r',\n\t\t\t\t\t\t\t'\\\\\\\\t',\n\t\t\t\t\t\t\t'\\n',\n\t\t\t\t\t\t\t'\\r',\n\t\t\t\t\t\t), $unformatted );\n}\n\n\n/**\n * Get available cort oprions for items\n *\n * @return array key=>name\n */\nfunction get_available_sort_options()\n{\n\treturn array(\n\t\t'datestart'       => T_('Date issued (Default)'),\n\t\t'order'           => T_('Order (as explicitly specified)'),\n\t\t//'datedeadline' => T_('Deadline'),\n\t\t'title'           => T_('Title'),\n\t\t'datecreated'     => T_('Date created'),\n\t\t'datemodified'    => T_('Date last modified'),\n\t\t'last_touched_ts' => T_('Date last touched'),\n\t\t'urltitle'        => T_('URL \"filename\"'),\n\t\t'priority'        => T_('Priority'),\n\t\t'RAND'            => T_('Random order!'),\n\t);\n}\n\n\n/**\n * Get available cort oprions for blogs\n *\n * @return array key=>name\n */\nfunction get_coll_sort_options()\n{\n\treturn array(\n\t\t'order'        => T_('Order (Default)'),\n\t\t'ID'           => T_('Blog ID'),\n\t\t'name'         => T_('Name'),\n\t\t'shortname'    => T_('Short name'),\n\t\t'tagline'      => T_('Tagline'),\n\t\t'shortdesc'    => T_('Short Description'),\n\t\t'urlname'      => T_('URL \"filename\"'),\n\t\t'RAND'         => T_('Random order!'),\n\t);\n}\n\n\n/**\n * Converts array to form option list\n *\n * @param array of option values and descriptions\n * @param integer|array selected keys\n * @param array provide a choice for \"none_value\" with value ''\n * @return string\n */\nfunction array_to_option_list( $array, $default = '', $allow_none = array() )\n{\n\tif( !is_array( $default ) )\n\t{\n\t\t$default = array( $default );\n\t}\n\n\t$r = '';\n\n\tif( !empty($allow_none) )\n\t{\n\t\t$r .= '<option value=\"'.$allow_none['none_value'].'\"';\n\t\tif( empty($default) ) $r .= ' selected=\"selected\"';\n\t\t$r .= '>'.format_to_output($allow_none['none_text']).'</option>'.\"\\n\";\n\t}\n\n\tforeach( $array as $k=>$v )\n\t{\n\t\t$r .=  '<option value=\"'.format_to_output($k,'formvalue').'\"';\n\t\tif( in_array( $k, $default ) ) $r .= ' selected=\"selected\"';\n\t\t$r .= '>';\n\t\t$r .= format_to_output( $v, 'htmlbody' );\n\t\t$r .=  '</option>'.\"\\n\";\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Get a value from a volatile/lossy cache.\n *\n * @param string key\n * @param boolean success (by reference)\n * @return mixed True in case of success, false in case of failure. NULL, if no backend is available.\n */\nfunction get_from_mem_cache( $key, & $success )\n{\n\tglobal $Timer;\n\n\t$Timer->resume( 'get_from_mem_cache', false );\n\n\tif( function_exists( 'apc_fetch' ) )\n\t{\t// APC\n\t\t$r = apc_fetch( $key, $success );\n\t}\n\telseif( function_exists( 'xcache_get' ) && ini_get( 'xcache.var_size' ) > 0 )\n\t{\t// XCache\n\t\t$r = xcache_get( $key );\n\t}\n\telseif( function_exists( 'apcu_fetch' ) )\n\t{\t// APCu\n\t\t$r = apcu_fetch( $key, $success );\n\t}\n\n\tif( ! isset($success) )\n\t{ // set $success for implementation that do not set it itself (only APC does so)\n\t\t$success = isset($r);\n\t}\n\tif( ! $success )\n\t{\n\t\t$r = NULL;\n\n\t\tglobal $Debuglog;\n\t\t$Debuglog->add( 'No caching backend available for reading \"'.$key.'\".', 'cache' );\n\t}\n\n\t$Timer->pause( 'get_from_mem_cache', false );\n\n\treturn $r;\n}\n\n\n/**\n * Set a value to a volatile/lossy cache.\n *\n * There's no guarantee that the data is still available, since e.g. old\n * values might get purged.\n *\n * @param string key\n * @param mixed Data. Objects would have to be serialized.\n * @param int Time to live (seconds). Default is 0 and means \"forever\".\n * @return mixed\n */\nfunction set_to_mem_cache( $key, $payload, $ttl = 0 )\n{\n\tglobal $Timer;\n\n\t$Timer->resume( 'set_to_mem_cache', false );\n\n\tif( function_exists( 'apc_store' ) )\n\t{\t// APC\n\t\t$r = apc_store( $key, $payload, $ttl );\n\t}\n\telseif( function_exists( 'xcache_set' ) && ini_get( 'xcache.var_size' ) > 0 )\n\t{\t// XCache\n\t\t$r = xcache_set( $key, $payload, $ttl );\n\t}\n\telseif( function_exists( 'apcu_store' ) )\n\t{\t// APCu\n\t\t$r = apcu_store( $key, $payload, $ttl );\n\t}\n\telse\n\t{\t// No available cache module:\n\t\tglobal $Debuglog;\n\t\t$Debuglog->add( 'No caching backend available for writing \"'.$key.'\".', 'cache' );\n\t\t$r = NULL;\n\t}\n\n\t$Timer->pause( 'set_to_mem_cache', false );\n\n\treturn $r;\n}\n\n\n/**\n * Remove a given key from the volatile/lossy cache.\n *\n * @param string key\n * @return boolean True on success, false on failure. NULL if no backend available.\n */\nfunction unset_from_mem_cache( $key )\n{\n\tif( function_exists( 'apc_delete' ) )\n\t{\t// APC\n\t\treturn apc_delete( $key );\n\t}\n\n\tif( function_exists( 'xcache_unset' ) )\n\t{\t// XCache\n\t\treturn xcache_unset( gen_key_for_cache( $key ) );\n\t}\n\n\tif( function_exists( 'apcu_delete' ) )\n\t{\t// APCu\n\t\treturn apcu_delete( $key );\n\t}\n}\n\n\n/**\n * Generate order by clause\n *\n * @param string The order values are separated by space or comma\n * @param string An order direction: ASC, DESC\n * @param string DB prefix\n * @param string ID field name with prefix\n * @param array Names of DB fields(without prefix) that are available\n * @return string The order fields are separated by comma\n */\nfunction gen_order_clause( $order_by, $order_dir, $dbprefix, $dbIDname_disambiguation, $available_fields = NULL )\n{\n\t$order_by = str_replace( ' ', ',', $order_by );\n\t$orderby_array = explode( ',', $order_by );\n\n\t$order_dir = explode( ',', str_replace( ' ', ',', $order_dir ) );\n\n\tif( is_array( $available_fields ) )\n\t{ // Exclude the incorrect fields from order clause\n\t\tforeach( $orderby_array as $i => $orderby_field )\n\t\t{\n\t\t\tif( ! in_array( $orderby_field, $available_fields ) )\n\t\t\t{\n\t\t\t\tunset( $orderby_array[ $i ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Format each order param with default column names:\n\tforeach( $orderby_array as $i => $orderby_value )\n\t{ // If the order_by field contains a '.' character which is a table separator we must not use the prefix ( E.g. temp_table.value )\n\t\t$use_dbprefix = ( strpos( $orderby_value, '.' ) !== false ) ? '' : $dbprefix;\n\t\t$orderby_array[ $i ] = $use_dbprefix.$orderby_value.' '.( isset( $order_dir[ $i ] ) ? $order_dir[ $i ] : $order_dir[0] );\n\t}\n\n\t// Add an ID parameter to make sure there is no ambiguity in ordering on similar items:\n\t$orderby_array[] = $dbIDname_disambiguation.' '.$order_dir[0];\n\n\t$order_by = implode( ', ', $orderby_array );\n\n\t// Special case for RAND:\n\t$order_by = str_replace( $dbprefix.'RAND ', 'RAND() ', $order_by );\n\n\treturn $order_by;\n}\n\n\n/**\n * Get the IconLegend instance.\n *\n * @return IconLegend or false, if the user has not set \"display_icon_legend\"\n */\nfunction & get_IconLegend()\n{\n\tstatic $IconLegend;\n\n\tif( ! isset($IconLegend) )\n\t{\n\t\tglobal $UserSettings;\n\t\tif( $UserSettings->get('display_icon_legend') )\n\t\t{\n\t\t\t/**\n\t\t\t * Icon Legend\n\t\t\t */\n\t\t\tload_class( '_core/ui/_iconlegend.class.php', 'IconLegend' );\n\t\t\t$IconLegend = new IconLegend();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$IconLegend = false;\n\t\t}\n\t}\n\treturn $IconLegend;\n}\n\n\n/**\n * Get name of active opcode cache, or \"none\".\n * {@internal Anyone using something else, please extend.}}\n * @return string\n */\nfunction get_active_opcode_cache()\n{\n\tif( function_exists('apc_cache_info') && ini_get('apc.enabled') ) # disabled for CLI (see apc.enable_cli), however: just use this setting and do not call the function.\n\t{\n\t\t// fp>blueyed? why did you remove the following 2 lines? your comment above is not clear.\n\t\t$apc_info = apc_cache_info( '', true );\n\t\tif( isset( $apc_info['num_slots'] ) && ( $apc_info['num_slots'] ) )\n\t\t{\n\t\t\treturn 'APC';\n\t\t}\n\t}\n\n\t// xcache: xcache.var_size must be > 0. xcache_set is not necessary (might have been disabled).\n\tif( ini_get('xcache.size') > 0 )\n\t{\n\t\treturn 'xcache';\n\t}\n\n\tif( ini_get('eaccelerator.enable') )\n\t{\n\t\t$eac_info = eaccelerator_info();\n\t\tif( $eac_info['cache'] )\n\t\t{\n\t\t\treturn 'eAccelerator';\n\t\t}\n\t}\n\n\tif( ini_get( 'opcache.enable' ) )\n\t{\n\t\treturn 'OPCache';\n\t}\n\n\tif( function_exists( 'apc_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APC';\n\t}\n\n\treturn 'none';\n}\n\n\n/**\n * Get name of active user cache, or \"none\".\n * {@internal Anyone using something else, please extend.}}\n * @return string\n */\nfunction get_active_user_cache()\n{\n\tif( function_exists( 'apcu_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APCu';\n\t}\n\n\tif( function_exists( 'apc_cache_info' ) && ini_get( 'apc.enabled' ) )\n\t{\n\t\treturn 'APC';\n\t}\n\n\t// xcache: xcache.var_size must be > 0. xcache_set is not necessary (might have been disabled).\n\tif( ini_get('xcache.size') > 0 )\n\t{\n\t\treturn 'xcache';\n\t}\n\n\treturn 'none';\n}\n\n\n/**\n * Invalidate all page caches.\n * This function should be processed every time, when some users or global settings was modified,\n * and this modification has an imortant influence for the front office display.\n * Modifications that requires to invalidate all page caches:\n *   - installing/removing/reloading/enabling/disabling plugins\n *   - editing user settings like allow profile pics, new users can register, user settings>display\n */\nfunction invalidate_pagecaches()\n{\n\tglobal $DB, $Settings, $servertimenow;\n\n\t// get current server time\n\t$timestamp = ( empty( $servertimenow ) ? time() : $servertimenow );\n\n\t// get all blog ids\n\tif( $blog_ids = $DB->get_col( 'SELECT blog_ID FROM T_blogs' ) )\n\t{\t// build invalidate query\n\t\t$query = 'REPLACE INTO T_coll_settings ( cset_coll_ID, cset_name, cset_value ) VALUES';\n\t\tforeach( $blog_ids as $blog_id )\n\t\t{\n\t\t\t$query .= ' ('.$blog_id.', \"last_invalidation_timestamp\", '.$timestamp.' ),';\n\t\t}\n\t\t$query = substr( $query, 0, strlen( $query ) - 1 );\n\t\t$DB->query( $query, 'Invalidate blogs\\'s page caches' );\n\t}\n\n\t// Invalidate general cache content also\n\t$Settings->set( 'last_invalidation_timestamp', $timestamp );\n\t$Settings->dbupdate();\n}\n\n\n/**\n* Get $ReqPath, $ReqURI\n*\n* @return array ($ReqPath,$ReqURI);\n*/\nfunction get_ReqURI()\n{\n\tglobal $Debuglog;\n\n\t// Investigation for following code by Isaac - http://isaacschlueter.com/\n\tif( isset($_SERVER['REQUEST_URI']) && !empty($_SERVER['REQUEST_URI']) )\n\t{ // Warning: on some IIS installs it it set but empty!\n\t\t$Debuglog->add( 'vars: vars: Getting ReqURI from REQUEST_URI', 'request' );\n\t\t$ReqURI = $_SERVER['REQUEST_URI'];\n\n\t\t// Build requested Path without query string:\n\t\t$pos = strpos( $ReqURI, '?' );\n\t\tif( false !== $pos )\n\t\t{\n\t\t\t$ReqPath = substr( $ReqURI, 0, $pos  );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ReqPath = $ReqURI;\n\t\t}\n\t}\n\telseif( isset($_SERVER['URL']) )\n\t{ // ISAPI\n\t\t$Debuglog->add( 'vars: Getting ReqPath from URL', 'request' );\n\t\t$ReqPath = $_SERVER['URL'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['PATH_INFO']) )\n\t{ // CGI/FastCGI\n\t\tif( isset($_SERVER['SCRIPT_NAME']) )\n\t\t{\n\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO and SCRIPT_NAME', 'request' );\n\n\t\t\tif ($_SERVER['SCRIPT_NAME'] == $_SERVER['PATH_INFO'] )\n\t\t\t{\t/* both the same so just use one of them\n\t\t\t\t * this happens on a windoze 2003 box\n\t\t\t\t * gotta love microdoft\n\t\t\t\t */\n\t\t\t\t$Debuglog->add( 'vars: PATH_INFO and SCRIPT_NAME are the same', 'request' );\n\t\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO only instead', 'request' );\n\t\t\t\t$ReqPath = $_SERVER['PATH_INFO'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ReqPath = $_SERVER['SCRIPT_NAME'].$_SERVER['PATH_INFO'];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{ // does this happen??\n\t\t\t$Debuglog->add( 'vars: Getting ReqPath from PATH_INFO only!', 'request' );\n\n\t\t\t$ReqPath = $_SERVER['PATH_INFO'];\n\t\t}\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['ORIG_PATH_INFO']) )\n\t{ // Tomcat 5.5.x with Herbelin PHP servlet and PHP 5.1\n\t\t$Debuglog->add( 'vars: Getting ReqPath from ORIG_PATH_INFO', 'request' );\n\t\t$ReqPath = $_SERVER['ORIG_PATH_INFO'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['SCRIPT_NAME']) )\n\t{ // Some Odd Win2k Stuff\n\t\t$Debuglog->add( 'vars: Getting ReqPath from SCRIPT_NAME', 'request' );\n\t\t$ReqPath = $_SERVER['SCRIPT_NAME'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telseif( isset($_SERVER['PHP_SELF']) )\n\t{ // The Old Stand-By\n\t\t$Debuglog->add( 'vars: Getting ReqPath from PHP_SELF', 'request' );\n\t\t$ReqPath = $_SERVER['PHP_SELF'];\n\t\t$ReqURI = isset($_SERVER['QUERY_STRING']) && !empty( $_SERVER['QUERY_STRING'] ) ? ($ReqPath.'?'.$_SERVER['QUERY_STRING']) : $ReqPath;\n\t}\n\telse\n\t{\n\t\t$ReqPath = false;\n\t\t$ReqURI = false;\n\t\t?>\n\t\t<p class=\"error\">\n\t\tWarning: $ReqPath could not be set. Probably an odd IIS problem.\n\t\t</p>\n\t\t<p>\n\t\tGo to your <a href=\"<?php echo $baseurl.$install_subdir ?>phpinfo.php\">phpinfo page</a>,\n\t\tlook for occurences of <code><?php\n\t\t// take the baseurlroot out..\n\t\techo preg_replace('#^'.preg_quote( $baseurlroot, '#' ).'#', '', $baseurl.$install_subdir )\n\t\t?>phpinfo.php</code> and copy all lines\n\t\tcontaining this to the <a href=\"http://forums.b2evolution.net\">forum</a>. Also specify what webserver\n\t\tyou're running on.\n\t\t<br />\n\t\t(If you have deleted your install folder &ndash; what is recommended after successful setup &ndash;\n\t\tyou have to upload it again before doing this).\n\t\t</p>\n\t\t<?php\n\t}\n\n\treturn array($ReqPath,$ReqURI);\n}\n\n\n/**\n * Get URL to REST API script depending on current collection base url from front-office or site base url from back-office\n *\n * Note: For back-office or no collection page _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @return string URL to htsrv folder\n */\nfunction get_restapi_url()\n{\n\tglobal $restapi_script;\n\n\treturn get_htsrv_url().$restapi_script;\n}\n\n\n/**\n * Get URL to htsrv folder depending on current collection base url from front-office or site base url from back-office\n *\n * Note: For back-office or no collection page _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @param boolean TRUE to use https URL\n * @return string URL to htsrv folder\n */\nfunction get_htsrv_url( $force_https = false )\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// For back-office or when no collection page:\n\t\treturn get_samedomain_htsrv_url( $force_https );\n\t}\n\telse\n\t{\t// For current collection:\n\t\treturn $Blog->get_htsrv_url( $force_https );\n\t}\n}\n\n\n/**\n * Get htsrv url on the same domain as the http request came from\n *\n * Note: _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n *\n * @param boolean TRUE to use https URL\n * @return string URL to htsrv folder\n */\nfunction get_samedomain_htsrv_url( $secure = false )\n{\n\tglobal $ReqHost, $ReqPath, $htsrv_url, $htsrv_url_sensitive, $htsrv_subdir, $Blog;\n\n\tif( $secure )\n\t{\n\t\t$req_htsrv_url = $htsrv_url_sensitive;\n\t}\n\telse\n\t{\n\t\t$req_htsrv_url = $htsrv_url;\n\t}\n\n\t// Cut htsrv folder from end of the URL:\n\t$req_htsrv_url = substr( $req_htsrv_url, 0, strlen( $req_htsrv_url ) - strlen( $htsrv_subdir ) );\n\n\tif( strpos( $ReqHost.$ReqPath, $req_htsrv_url ) !== false )\n\t{\t// If current request path contains the required htsrv URL:\n\t\treturn $req_htsrv_url.$htsrv_subdir;\n\t}\n\n\t$req_url_parts = @parse_url( $ReqHost );\n\t$hsrv_url_parts = @parse_url( $req_htsrv_url );\n\tif( ( !isset( $req_url_parts['host'] ) ) || ( !isset( $hsrv_url_parts['host'] ) ) )\n\t{\n\t\tdebug_die( 'Invalid hosts!' );\n\t}\n\n\t$req_domain = $req_url_parts['host'];\n\t$htsrv_domain = $hsrv_url_parts['host'];\n\n\t// Replace domain + path of htsrv URL with current request:\n\t$samedomain_htsrv_url = substr_replace( $req_htsrv_url, $req_domain, strpos( $req_htsrv_url, $htsrv_domain ), strlen( $htsrv_domain ) );\n\n\t// Revert htsrv folder to end of the URL which has been cut above:\n\t$samedomain_htsrv_url .= $htsrv_subdir;\n\n\t// fp> The following check would apply well if we always had 301 redirects.\n\t// But it's possible to turn them off in SEO settings for some page and not others (we don't know which here)\n  // And some kinds of pages do not have 301 redirections implemented yet, e-g: disp=users\n  /*\n\tif( ( !is_admin_page() ) && ( !empty( $Blog ) ) && ( $samedomain_htsrv_url != $Blog->get_htsrv_url( $secure ) ) )\n\t{\n\t\tdebug_die( 'The blog is configured to have /htsrv/ at:<br> '.$Blog->get_htsrv_url( $secure ).'<br>but in order to stay on the current domain, we would need to use:<br>'.$samedomain_htsrv_url.'<br>Maybe we have a missing redirection to the proper blog url?' );\n\t}\n\t*/\n\n\treturn $samedomain_htsrv_url;\n}\n\n\n/**\n * Get secure htsrv url on the same domain as the http request came from\n * It is important on login and register calls\n * _init_hit.inc.php should be called before this call, because ReqHost and ReqPath must be initialized\n */\nfunction get_secure_htsrv_url()\n{\n\treturn get_samedomain_htsrv_url( true );\n}\n\n\n/**\n * Set max execution time\n *\n * @param integer seconds\n * @return string the old value on success, false on failure.\n */\nfunction set_max_execution_time( $seconds )\n{\n\tif( function_exists( 'set_time_limit' ) )\n\t{\n\t\tset_time_limit( $seconds );\n\t}\n\treturn @ini_set( 'max_execution_time', $seconds );\n}\n\n\n/**\n * Sanitize a comma-separated list of numbers (IDs)\n *\n * @param string\n * @param bool Return array if true, string otherwise\n * @param bool Quote each element (for use in SQL queries)\n * @return string\n */\nfunction sanitize_id_list( $str, $return_array = false, $quote = false )\n{\n\tif( is_null($str) )\n\t{\t// Allow NULL values\n\t\t$str = '';\n\t}\n\n\t// Explode and trim\n\t$array = array_map( 'trim', explode(',', $str) );\n\n\t// Convert to integer and remove all empty values\n\t$array = array_filter( array_map('intval', $array) );\n\n\tif( !$return_array && $quote )\n\t{\t// Quote each element and return a string\n\t\tglobal $DB;\n\t\treturn $DB->quote($array);\n\t}\n\treturn ( $return_array ? $array : implode(',', $array) );\n}\n\n\n/**\n * Create json_encode function if it does not exist ( PHP < 5.2.0 )\n *\n * @return string\n */\nif ( !function_exists( 'json_encode' ) )\n{\n\tfunction json_encode( $a = false )\n\t{\n\t\tif( is_null( $a ) )\n\t\t{\n\t\t\treturn 'null';\n\t\t}\n\t\tif( $a === false )\n\t\t{\n\t\t\treturn 'false';\n\t\t}\n\t\tif( $a === true )\n\t\t{\n\t\t\treturn 'true';\n\t\t}\n\t\tif( is_scalar( $a ) )\n\t\t{\n\t\t\tif( is_float( $a ) )\n\t\t\t{ // Always use \".\" for floats.\n\t\t\t\treturn floatval( str_replace( \",\", \".\", strval( $a ) ) );\n\t\t\t}\n\n\t\t\tif( is_string( $a ) )\n\t\t\t{\n\t\t\t\t$jsonReplaces = array( array( \"\\\\\", \"/\", \"\\n\", \"\\t\", \"\\r\", \"\\b\", \"\\f\", '\"' ), array( '\\\\\\\\', '\\\\/', '\\\\n', '\\\\t', '\\\\r', '\\\\b', '\\\\f', '\\\"' ) );\n\t\t\t\treturn '\"'.str_replace( $jsonReplaces[0], $jsonReplaces[1], $a ).'\"';\n\t\t\t}\n\n\t\t\treturn $a;\n\t\t}\n\t\t$isList = true;\n\t\tfor( $i = 0, reset($a); $i < count($a); $i++, next($a) )\n\t\t{\n\t\t\tif( key($a) !== $i )\n\t\t\t{\n\t\t\t\t$isList = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$result = array();\n\t\tif( $isList )\n\t\t{\n\t\t\tforeach( $a as $v )\n\t\t\t{\n\t\t\t\t$result[] = json_encode($v);\n\t\t\t}\n\t\t\treturn '['.join( ',', $result ).']';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach( $a as $k => $v )\n\t\t\t{\n\t\t\t\t$result[] = json_encode($k).':'.json_encode($v);\n\t\t\t}\n\t\t\treturn '{'.join( ',', $result ).'}';\n\t\t}\n\t}\n}\n\n\n/**\n * A wrapper for json_encode function\n * We need to pass valid UTF-8 string to json_encode, otherwise it may return NULL\n *\n * @param mixed\n * @return string\n */\nfunction evo_json_encode( $a = false )\n{\n\tif( is_string( $a ) )\n\t{ // Convert to UTF-8\n\t\t$a = current_charset_to_utf8( $a );\n\t}\n\telseif( is_array( $a ) )\n\t{ // Recursively convert to UTF-8\n\t\tarray_walk_recursive( $a, 'current_charset_to_utf8' );\n\t}\n\n\t$result = json_encode( $a );\n\tif( $result === false )\n\t{ // If json_encode returns FALSE because of some error we should set correct json empty value as '[]' instead of false\n\t\t$result = '[]';\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * A helper function to conditionally convert a string from current charset to UTF-8\n *\n * @param string\n * @return string\n */\nfunction current_charset_to_utf8( & $a )\n{\n\tglobal $current_charset;\n\n\tif( is_string( $a ) && $current_charset != '' && $current_charset != 'utf-8' )\n\t{ // Convert string to utf-8 if it has another charset\n\t\t$a = convert_charset( $a, 'utf-8', $current_charset );\n\t}\n\n\treturn $a;\n}\n\n\nif( !function_exists( 'property_exists' ) )\n{\n\t/**\n\t * Create property_exists function if it does not exist ( PHP < 5.1 )\n\t * @param object\n\t * @param string\n\t *\n\t * @return bool\n\t */\n\tfunction property_exists( $class, $property )\n\t{\n\t\tif( is_object( $class ) )\n\t\t{\n\t\t\t$vars = get_object_vars( $class );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$vars = get_class_vars( $class );\n\t\t}\n\t\treturn array_key_exists( $property, $vars );\n\t}\n}\n\n\n// fp>vitaliy: move to a file that is not included everywhere!\n/**\n * Update global $http_response_code and call function header()\n *\n * NOTICE: When you start to use new code please add it to the hits filter \"HTTP resp\"\n *         in the file \"/inc/sessions/views/_stats_view.funcs.php\",\n *         function filter_hits(), array $resp_codes\n *\n * @param string Header\n * @param integer Header response code\n */\nfunction header_http_response( $string, $code = NULL )\n{\n\tglobal $http_response_code;\n\n\t$string = 'HTTP/1.1 '. $string;\n\n\tif( is_null( $code ) )\n\t{\n\t\tif( preg_match( '/(\\d{3})/', $string, $matches ) )\n\t\t{\n\t\t\t$http_response_code = (int)$matches[0];\n\t\t}\n\t}\n\telse\n\t{\n\t\t$http_response_code = $code;\n\t}\n\n\theader( $string );\n}\n\n\n/**\n * Add a trailing slash, if none present\n *\n * @param string the path/url\n * @return string the path/url with trailing slash\n */\nfunction trailing_slash( $path )\n{\n\tif( empty($path) || utf8_substr( $path, -1 ) == '/' )\n\t{\n\t\treturn $path;\n\t}\n\telse\n\t{\n\t\treturn $path.'/';\n\t}\n}\n\n\n/**\n * Remove trailing slash, if present\n *\n * @param string the path/url\n * @return string the path/url without trailing slash\n */\nfunction no_trailing_slash( $path )\n{\n\tif( utf8_substr( $path, -1 ) == '/' )\n\t{\n\t\treturn utf8_substr( $path, 0, utf8_strlen( $path )-1 );\n\t}\n\telse\n\t{\n\t\treturn $path;\n\t}\n}\n\n\n/**\n * Provide sys_get_temp_dir for older versions of PHP (< 5.2.1)\n *\n * @return string path to system temporary directory\n */\nif( !function_exists( 'sys_get_temp_dir' ) )\n{\n\tfunction sys_get_temp_dir()\n\t{\n\t\t// Try to get from environment variable\n\t\tif( !empty($_ENV['TMP']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TMP'] );\n\t\t}\n\t\telseif( !empty($_ENV['TMPDIR']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TMPDIR'] );\n\t\t}\n\t\telseif( !empty($_ENV['TEMP']) )\n\t\t{\n\t\t\treturn realpath( $_ENV['TEMP'] );\n\t\t}\n\t\telse\n\t\t{\t// Detect by creating a temporary file\n\n\t\t\t// Try to use system's temporary directory as random name shouldn't exist\n\t\t\t$temp_file = tempnam( sha1(uniqid(rand()), true), '' );\n\t\t\tif( $temp_file )\n\t\t\t{\n\t\t\t\t$temp_dir = realpath( dirname($temp_file) );\n\t\t\t\tunlink($temp_file);\n\t\t\t\treturn $temp_dir;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Provide inet_pton for older versions of PHP (< 5.1.0 linux & < 5.3.0 windows)\n *\n * Converts a human readable IP address to its packed in_addr representation\n * @param string A human readable IPv4 or IPv6 address\n * @return string The in_addr representation of the given address, or FALSE if a syntactically invalid address is given (for example, an IPv4 address without dots or an IPv6 address without colons\n */\nif( !function_exists( 'inet_pton' ) )\n{\n\tfunction inet_pton( $ip )\n\t{\n\t\tif( strpos( $ip, '.' ) !== FALSE )\n\t\t{\t// IPv4\n\t\t\t$ip = pack( 'N', ip2long( $ip ) );\n\t\t}\n\t\telseif( strpos( $ip, ':' ) !== FALSE )\n\t\t{\t// IPv6\n\t\t\t$ip = explode( ':', $ip );\n\t\t\t$res = str_pad( '', ( 4 * ( 8 - count( $ip ) ) ), '0000', STR_PAD_LEFT );\n\t\t\tforeach( $ip as $seg )\n\t\t\t{\n\t\t\t\t$res .= str_pad( $seg, 4, '0', STR_PAD_LEFT );\n\t\t\t}\n\t\t\t$ip = pack( 'H'.strlen( $res ), $res );\n\t\t}\n\t\telse\n\t\t{\t// Invalid IP address\n\t\t\t$ip = FALSE;\n\t\t}\n\n\t\treturn $ip;\n\t}\n}\n\n\n/**\n * Convert integer to IP address\n *\n * @param integer Number\n * @return string IP address\n */\nfunction int2ip( $int )\n{\n\t$ip = array();\n\t$ip[0] = (int) ( $int / 256 / 256 / 256 );\n\t$ip[1] = (int) ( ( $int - ( $ip[0] * 256 * 256 * 256 ) ) / 256 / 256 );\n\t$ip[2] = (int) ( ( $int - ( $ip[0] * 256 * 256 * 256 ) - ( $ip[1] * 256 * 256 ) ) / 256 );\n\t$ip[3] = $int - ( $ip[0] * 256 * 256 * 256 ) - ( $ip[1] * 256 * 256 ) - ( $ip[2] * 256 );\n\n\treturn $ip[0].'.'.$ip[1].'.'.$ip[2].'.'.$ip[3];\n}\n\n\n/**\n * Check if the given string is a valid IPv4 or IPv6 address value\n *\n * @param string IP\n * @return boolean true if valid, false otherwise\n */\nfunction is_valid_ip_format( $ip )\n{\n\treturn filter_var( $ip, FILTER_VALIDATE_IP ) !== false;\n}\n\n\n\n\n/**\n * Convert IP address to integer (get only 32bits of IPv6 address)\n *\n * @param string IP address\n * @return integer Number\n */\nfunction ip2int( $ip )\n{\n\tif( ! is_valid_ip_format( $ip ) )\n\t{ // IP format is incorrect\n\t\treturn 0;\n\t}\n\n\tif( $ip == '::1' )\n\t{\t// Reserved IP for localhost\n\t\t$ip = '127.0.0.1';\n\t}\n\n\t$parts = unpack( 'N*', inet_pton( $ip ) );\n\t// In case of IPv6 return only a parts of it\n\t$result = ( strpos( $ip, '.' ) !== false ) ? $parts[1] /* IPv4*/ : $parts[4] /* IPv6*/;\n\n\tif( $result < 0 )\n\t{ // convert unsigned int to signed from unpack.\n\t\t// this should be OK as it will be a PHP float not an int\n\t\t$result += 4294967296;\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Check if URL has a domain in IP format\n *\n * @param string URL\n * @return boolean\n */\nfunction is_ip_url_domain( $url )\n{\n\t$url_data = parse_url( $url );\n\n\tif( $url_data === false || ! isset( $url_data['host'] ) )\n\t{\t// Wrong url:\n\t\treturn false;\n\t}\n\n\t// Check if host is IP address:\n\treturn is_valid_ip_format( $url_data['host'] );\n}\n\n\n/**\n * Provide array_combine for older versions of PHP (< 5.0.0)\n *\n * Creates an array by using one array for keys and another for its values\n * @param array Keys\n * @param array Values\n * @return array Combined array, FALSE if the number of elements for each array isn't equal.\n */\nif( !function_exists( 'array_combine' ) )\n{\n\tfunction array_combine( $arr1, $arr2 )\n\t{\n\t\tif( count( $arr1 ) != count( $arr2 ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$out = array();\n\t\tforeach( $arr1 as $key1 => $value1 )\n\t\t{\n\t\t\t$out[$value1] = $arr2[$key1];\n\t\t}\n\t\treturn $out;\n\t}\n}\n\n\n/**\n * Provide array_combine for older versions of PHP (< 5.0.0)\n *\n * List of already/potentially sent HTTP responsee headers(),\n * CANNOT be implemented\n */\nif( !function_exists( 'headers_list' ) )\n{\n\tfunction headers_list()\n\t{\n\t\treturn array();\n\t}\n}\n\n\n/**\n * Provide array_fill_keys for older versions of PHP (< 5.2.0)\n *\n * Fills an array with the value of the value parameter, using the values of the keys array as keys.\n * @param array Keys\n * @param mixed Value\n * @return array Filled array\n */\nif( !function_exists( 'array_fill_keys' ) )\n{\n\tfunction array_fill_keys( $array, $value )\n\t{\n\t\t$filled_array = array();\n\t\tforeach( $array as $key )\n\t\t{\n\t\t\t$filled_array[$key] = $value;\n\t\t}\n\n\t\treturn $filled_array;\n\t}\n}\n\n\n/**\n * Provide htmlspecialchars_decode for older versions of PHP (< 5.1.0)\n *\n * Convert special HTML entities back to characters\n * @param string Text to decode\n * @return string The decoded text\n */\nif( !function_exists( 'htmlspecialchars_decode' ) )\n{\n\tfunction htmlspecialchars_decode( $text )\n\t{\n\t\treturn strtr( $text, array_flip( get_html_translation_table( HTML_SPECIALCHARS ) ) );\n\t}\n}\n\n\n/**\n * Provide array_walk_recursive for older versions of PHP (< 5.1.0)\n *\n * Apply a user function recursively to every member of an array\n * @param array The input array\n * @param string Funcname\n * @param string If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback funcname.\n * @return TRUE on success or FALSE on failure\n */\nif( !function_exists( 'array_walk_recursive' ) )\n{\n\tfunction array_walk_recursive( &$input, $funcname, $userdata = '' )\n\t{\n\t\tif( !is_callable( $funcname ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tif( !is_array( $input ) )\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach( $input AS $key => $value )\n\t\t{\n\t\t\tif( is_array( $input[$key] ) )\n\t\t\t{\n\t\t\t\tarray_walk_recursive( $input[$key], $funcname, $userdata );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$saved_value = $value;\n\t\t\t\tif( !empty( $userdata ) )\n\t\t\t\t{\n\t\t\t\t\t$funcname( $value, $key, $userdata );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$funcname( $value, $key );\n\t\t\t\t}\n\n\t\t\t\tif( $value != $saved_value )\n\t\t\t\t{\n\t\t\t\t\t$input[$key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n\n/**\n * Save text data to file, create target file if it doesn't exist\n *\n * @param string data to be written\n * @param string filename (full path to a file)\n * @param string fopen mode\n */\nfunction save_to_file( $data, $filename, $mode = 'a' )\n{\n\tglobal $Settings;\n\n\tif( ! file_exists($filename) )\n\t{\t// Create target file\n\t\t@touch( $filename );\n\n\t\t// Doesn't work during installation\n\t\tif( !empty($Settings) )\n\t\t{\n\t\t\t$chmod = $Settings->get('fm_default_chmod_dir');\n\t\t\t@chmod( $filename, octdec($chmod) );\n\t\t}\n\t}\n\n\tif( ! is_writable($filename) )\n\t{\n\t\treturn false;\n\t}\n\n\t$f = @fopen( $filename, $mode );\n\t$ok = @fwrite( $f, $data );\n\t@fclose( $f );\n\n\tif( $ok && file_exists($filename) )\n\t{\n\t\treturn $filename;\n\t}\n\treturn false;\n}\n\n\n/**\n * Check if current request is AJAX\n * Used in order to get only content of the requested page\n *\n * @param string Template name\n * @return boolean TRUE/FALSE\n */\nfunction is_ajax_content( $template_name = '' )\n{\n\tglobal $ajax_content_mode;\n\n\t// Template names of content: @see skin_include()\n\t$content_templates = array( '$disp$', '_item_block.inc.php', '_item_content.inc.php' );\n\n\treturn !empty( $ajax_content_mode ) &&\n\t\t$ajax_content_mode === true &&\n\t\t!in_array( $template_name, $content_templates );\n}\n\n\n/**\n * Insert system log into DB\n *\n * @param string Message text\n * @param string Log type: 'info', 'warning', 'error', 'critical_error'\n * @param string Object type: 'comment', 'item', 'user', 'file' or leave default NULL if none of them\n * @param integer Object ID\n * @param string Origin type: 'core', 'plugin'\n * @param integer Origin ID\n * @param integer User ID\n */\nfunction syslog_insert( $message, $log_type, $object_type = NULL, $object_ID = NULL, $origin_type = 'core', $origin_ID = NULL, $user_ID = NULL )\n{\n\tglobal $servertimenow;\n\n\t$Syslog = new Syslog();\n\t$Syslog->set_user( $user_ID );\n\t$Syslog->set( 'type', $log_type );\n\t$Syslog->set_origin( $origin_type, $origin_ID );\n\t$Syslog->set_object( $object_type, $object_ID );\n\t$Syslog->set_message( $message );\n\t$Syslog->set( 'timestamp', date2mysql( $servertimenow ) );\n\t$Syslog->dbinsert();\n}\n\n\n/**\n * Get a param to know where script is calling now, Used for JS functions\n *\n * @return string\n */\nfunction request_from()\n{\n\tglobal $request_from;\n\n\tif( !empty( $request_from ) )\n\t{ // AJAX request\n\t\treturn $request_from;\n\t}\n\n\tif( is_admin_page() )\n\t{ // Backoffice\n\t\tglobal $ctrl;\n\t\treturn !empty( $ctrl ) ? $ctrl : 'admin';\n\t}\n\telse\n\t{ // Frontoffice\n\t\treturn 'front';\n\t}\n}\n\n\n/**\n * Get an error message text about file permissions\n */\nfunction get_file_permissions_message()\n{\n\treturn sprintf( T_( '(Please check UNIX file permissions on the parent folder. %s)' ), get_manual_link( 'file-permissions' ) );\n}\n\n\n/**\n * Flush the output buffer\n */\nfunction evo_flush()\n{\n\tglobal $Timer;\n\n\t$zlib_output_compression = ini_get( 'zlib.output_compression' );\n\tif( empty( $zlib_output_compression ) || $zlib_output_compression == 'Off' )\n\t{ // This function helps to turn off output buffering\n\t\t// But do NOT use it when zlib.output_compression is ON, because it creates the die errors\n\n\t\t// fp/yura TODO: we need to optimize this: We want to flush to screen and continue caching.\n\t\t//               This needs investigation and checking other similar places.\n\t\tglobal $PageCache;\n\t\tif( ! ( isset( $PageCache ) && ! empty( $PageCache->is_collecting ) ) )\n\t\t{ // Only when page cache is not running now because a notice error can appears in function PageCache->end_collect()\n\t\t\t@ob_end_flush();\n\t\t}\n\t}\n\tflush();\n\n\tif( isset( $Timer ) && $Timer->get_state( 'first_flush' ) == 'running' )\n\t{ // The first fulsh() was called, stop the timer\n\t\t$Timer->pause( 'first_flush' );\n\t}\n}\n\n// ---------- APM : Application Performance Monitoring -----------\n\n/**\n * Name the transaction for the APM.\n * This avoids that every request be called 'index.php' or 'admin.php' or 'cron_exec.php'\n *\n * @param mixed $request_transaction_name\n */\nfunction apm_name_transaction( $request_transaction_name )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_name_transaction( $request_transaction_name );\n\t}\n}\n\n/**\n * Log a custom metric\n *\n * @param mixed $name name of the custom metric\n * @param mixed $value assumed to be in milliseconds (ms)\n */\nfunction apm_log_custom_metric( $name, $value )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_custom_metric( 'Custom/'.$name, $value );\n\t}\n}\n\n/**\n * Log a custom param\n *\n * @param mixed $name name of the custom param\n * @param mixed $value of the custom param\n */\nfunction apm_log_custom_param( $name, $value )\n{\n\tif(extension_loaded('newrelic'))\n\t{\t// New Relic is installed on the server for monitoring.\n\t\tnewrelic_add_custom_parameter( $name, $value );\n\t}\n}\n\n\n/**\n * Get cookie domain depending on current page:\n *     - For back-office the config var $cookie_domain is used\n *     - For front-office it is dynamically generated from collection url\n *\n * @return string Cookie domain\n */\nfunction get_cookie_domain()\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// Use cookie domain of base url from config:\n\t\tglobal $cookie_domain;\n\t\treturn $cookie_domain;\n\t}\n\telse\n\t{\t// Use cookie domain of current collection url:\n\t\treturn $Blog->get_cookie_domain();\n\t}\n}\n\n\n/**\n * Get cookie path depending on current page:\n *     - For back-office the config var $cookie_path is used\n *     - For front-office it is dynamically generated from collection url\n *\n * @return string Cookie path\n */\nfunction get_cookie_path()\n{\n\tglobal $Blog;\n\n\tif( is_admin_page() || empty( $Blog ) )\n\t{\t// Use cookie path of base url from config:\n\t\tglobal $cookie_path;\n\t\treturn $cookie_path;\n\t}\n\telse\n\t{\t// Use base path of current collection url:\n\t\treturn $Blog->get_cookie_path();\n\t}\n}\n\n\n/**\n * Set a cookie to send it by evo_sendcookies()\n *\n * @param string The name of the cookie\n * @param string The value of the cookie\n * @param integer The time the cookie expires\n * @param string DEPRECATED: The path on the server in which the cookie will be available on\n * @param string DEPRECATED: The domain that the cookie is available\n * @param boolean Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client\n * @param boolean (Added in PHP 5.2.0) When TRUE the cookie will be made accessible only through the HTTP protocol\n */\nfunction evo_setcookie( $name, $value = '', $expire = 0, $dummy = '', $dummy2 = '', $secure = false, $httponly = false )\n{\n\tglobal $evo_cookies;\n\n\tif( ! is_array( $evo_cookies ) )\n\t{\t// Initialize array for cookies only first time:\n\t\t$evo_cookies = array();\n\t}\n\n\t// Store cookie in global var:\n\t$evo_cookies[ $name ] = array(\n\t\t\t'value'    => $value,\n\t\t\t'expire'   => $expire,\n\t\t\t'secure'   => $secure,\n\t\t\t'httponly' => $httponly,\n\t\t);\n}\n\n\n/**\n * Send the predefined cookies (@see setcookie() for more details)\n */\nfunction evo_sendcookies()\n{\n\tglobal $evo_cookies;\n\n\tif( headers_sent() )\n\t{\t// Exit to avoid errors because headers already were sent:\n\t\treturn;\n\t}\n\n\tif( empty( $evo_cookies ) )\n\t{\t// No cookies:\n\t\treturn;\n\t}\n\n\t$php_version_52 = version_compare( phpversion(), '5.2', '>=' );\n\n\t$current_cookie_domain = get_cookie_domain();\n\t$current_cookie_path = get_cookie_path();\n\n\tforeach( $evo_cookies as $evo_cookie_name => $evo_cookie )\n\t{\n\t\tif( $php_version_52 )\n\t\t{\t// Use HTTP-only setting since PHP 5.2.0:\n\t\t\tsetcookie( $evo_cookie_name, $evo_cookie['value'], $evo_cookie['expire'], $current_cookie_path, $current_cookie_domain, $evo_cookie['secure'], $evo_cookie['httponly'] );\n\t\t}\n\t\telse\n\t\t{\t// PHP < 5.2 doesn't support HTTP-only:\n\t\t\tsetcookie( $evo_cookie_name, $evo_cookie['value'], $evo_cookie['expire'], $current_cookie_path, $current_cookie_domain, $evo_cookie['secure'] );\n\t\t}\n\n\t\t// Unset to don't send cookie twice:\n\t\tunset( $evo_cookies[ $evo_cookie_name ] );\n\t}\n}\n\n\n/**\n * Echo JavaScript to edit values of column in the table list\n *\n * @param array Params\n */\nfunction echo_editable_column_js( $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'column_selector' => '', // jQuery selector of cell\n\t\t\t'ajax_url'        => '', // AJAX url to update a column value\n\t\t\t'options'         => array(), // Key = Value of option, Value = Title of option\n\t\t\t'new_field_name'  => '', // Name of _POST variable that will be send to ajax request with new value\n\t\t\t'ID_value'        => '', // jQuery to get value of ID\n\t\t\t'ID_name'         => '', // ID of field in DB\n\t\t\t'tooltip'         => TS_('Click to edit'),\n\t\t\t'colored_cells'   => false, // Use TRUE when colors are used for background of cell\n\t\t\t'print_init_tags' => true, // Use FALSE to don't print <script> tags if it is already used inside js\n\t\t\t'field_type'      => 'select', // Type of the editable field: 'select', 'text'\n\t\t\t'field_class'     => '', // Class of the editable field\n\t\t\t'null_text'       => '', // Null text of an input field, Use TS_() to translate it\n\t\t), $params );\n\n\t// Set onblur action to 'submit' when type is 'text' in order to don't miss the selected user login from autocomplete list\n\t$onblur_action = $params['field_type'] == 'text' ? 'submit' : 'cancel';\n\n\tif( $params['field_type'] == 'select' )\n\t{\n\t\t$options = '';\n\t\tforeach( $params['options'] as $option_value => $option_title )\n\t\t{\n\t\t\t$options .= '\\''.$option_value.'\\':\\''.$option_title.'\\','.\"\\n\";\n\t\t}\n\t}\n\n\tif( $params['print_init_tags'] )\n\t{\n?>\n<script type=\"text/javascript\">\njQuery( document ).ready( function()\n{\n<?php\n\t}\n?>\n\tjQuery( '<?php echo $params['column_selector']; ?>' ).editable( '<?php echo $params['ajax_url']; ?>',\n\t{\n\t\tdata: function( value, settings )\n\t\t{\n\t\t\tvalue = ajax_debug_clear( value );\n\t\t\t<?php if( $params['field_type'] == 'select' ) { ?>\n\t\t\tvar result = value.match( /rel=\"([^\"]*)\"/ );\n\t\t\treturn { <?php echo $options; ?>'selected' : result[1] }\n\t\t\t<?php } else { ?>\n\t\t\tvar result = value.match( />\\s*([^<]+)\\s*</ );\n\t\t\treturn result[1] == '<?php echo $params['null_text'] ?>' ? '' : result[1];\n\t\t\t<?php } ?>\n\t\t},\n\t\ttype       : '<?php echo $params['field_type']; ?>',\n\t\tclass_name : '<?php echo $params['field_class']; ?>',\n\t\tname       : '<?php echo $params['new_field_name']; ?>',\n\t\ttooltip    : '<?php echo $params['tooltip']; ?>',\n\t\tevent      : 'click',\n\t\tonblur     : '<?php echo $onblur_action; ?>',\n\t\tcallback   : function ( settings, original )\n\t\t{\n\t\t\t<?php\n\t\t\tif( $params['colored_cells'] )\n\t\t\t{ // Use different color for each value\n\t\t\t?>\n\t\t\tjQuery( this ).html( ajax_debug_clear( settings ) );\n\t\t\tvar link = jQuery( this ).find( 'a' );\n\t\t\tjQuery( this ).css( 'background-color', link.attr( 'color' ) == 'none' ? 'transparent' : link.attr( 'color' ) );\n\t\t\tlink.removeAttr( 'color' );\n\t\t\t<?php\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Use simple fade effect\n\t\t\t?>\n\t\t\tif( typeof( evoFadeSuccess ) == 'function' )\n\t\t\t{\n\t\t\t\tevoFadeSuccess( this );\n\t\t\t}\n\t\t\t<?php } ?>\n\t\t},\n\t\tonsubmit: function( settings, original ) {},\n\t\tsubmitdata : function( value, settings )\n\t\t{\n\t\t\treturn { <?php echo $params['ID_name']; ?>: <?php echo $params['ID_value']; ?> }\n\t\t},\n\t\tonerror : function( settings, original, xhr )\n\t\t{\n\t\t\tif( typeof( evoFadeFailure ) == 'function' )\n\t\t\t{\n\t\t\t\tevoFadeFailure( original );\n\t\t\t}\n\t\t\tvar input = jQuery( original ).find( 'input' );\n\t\t\tif( input.length > 0 )\n\t\t\t{\n\t\t\t\tjQuery( original ).find( 'span.field_error' ).remove();\n\t\t\t\tinput.addClass( 'field_error' );\n\t\t\t\tif( typeof( xhr.responseText ) != 'undefined' )\n\t\t\t\t{\n\t\t\t\t\tinput.after( '<span class=\"note field_error\">' + xhr.responseText + '</span>' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n<?php\n\tif( $params['print_init_tags'] )\n\t{\n?>\n} );\n</script>\n<?php\n\t}\n}\n\n\n/**\n * Get a button class name depending on template\n *\n * @param string Type: 'button', 'button_text', 'button_group'\n * @param string TRUE - to get class value for jQuery selector\n * @return string Class name\n */\nfunction button_class( $type = 'button', $jQuery_selector = false )\n{\n\t// Default class names\n\t$classes = array(\n\t\t\t'button'       => 'roundbutton', // Simple button with icon\n\t\t\t'button_red'   => 'roundbutton_red', // Button with red background\n\t\t\t'button_green' => 'roundbutton_green', // Button with green background\n\t\t\t'text'         => 'roundbutton_text', // Button with text\n\t\t\t'text_primary' => 'roundbutton_text', // Button with text with special style color\n\t\t\t'text_success' => 'roundbutton_text', // Button with text with special style color\n\t\t\t'text_danger'  => 'roundbutton_text', // Button with text with special style color\n\t\t\t'group'        => 'roundbutton_group', // Group of the buttons\n\t\t);\n\n\tif( is_admin_page() )\n\t{ // Some admin skins may have special class names\n\t\tglobal $AdminUI;\n\t\tif( ! empty( $AdminUI ) )\n\t\t{\n\t\t\t$template_classes = $AdminUI->get_template( 'button_classes' );\n\t\t}\n\t}\n\telse\n\t{ // Some front end skins may have special class names\n\t\tglobal $Skin;\n\t\tif( ! empty( $Skin ) )\n\t\t{\n\t\t\t$template_classes = $Skin->get_template( 'button_classes' );\n\t\t}\n\t}\n\tif( !empty( $template_classes ) )\n\t{ // Get class names from admin template\n\t\t$classes = array_merge( $classes, $template_classes );\n\t}\n\n\t$class_name = isset( $classes[ $type ] ) ? $classes[ $type ] : '';\n\n\tif( $jQuery_selector && ! empty( $class_name ) )\n\t{ // Convert class name to jQuery selector\n\t\t$class_name = '.'.str_replace( ' ', '.', $class_name );\n\t}\n\n\treturn $class_name;\n}\n\n\n/**\n * Initialize JavaScript to build and open window\n */\nfunction echo_modalwindow_js()\n{\n\tglobal $AdminUI, $Blog, $modal_window_js_initialized;\n\n\tif( ! empty( $modal_window_js_initialized ) )\n\t{ // Don't print out these functions twice\n\t\treturn;\n\t}\n\n\t// TODO: asimo> Should not use AdminUI templates for the openModalWindow function. The style part should be handled by css.\n\tif( is_admin_page() && isset( $AdminUI ) && $AdminUI->get_template( 'modal_window_js_func' ) !== false )\n\t{ // Use the modal functions from back-office skin\n\t\t$skin_modal_window_js_func = $AdminUI->get_template( 'modal_window_js_func' );\n\t}\n\telseif( ! is_admin_page() && ! empty( $Blog ) )\n\t{ // Use the modal functions from front-office skin\n\t\t$blog_skin_ID = $Blog->get_skin_ID();\n\t\t$SkinCache = & get_SkinCache();\n\t\t$Skin = & $SkinCache->get_by_ID( $blog_skin_ID, false, false );\n\t\tif( $Skin && $Skin->get_template( 'modal_window_js_func' ) !== false )\n\t\t{\n\t\t\t$skin_modal_window_js_func = $Skin->get_template( 'modal_window_js_func' );\n\t\t}\n\t}\n\n\tif( ! empty( $skin_modal_window_js_func ) && is_string( $skin_modal_window_js_func ) && function_exists( $skin_modal_window_js_func ) )\n\t{ // Call skin function only if it exists\n\t\tcall_user_func( $skin_modal_window_js_func );\n\t\t$modal_window_js_initialized = true;\n\t\treturn;\n\t}\n\n\t$modal_window_js_initialized = true;\n}\n\n/**\n * Initialize JavaScript to build and open window for bootstrap skins\n */\nfunction echo_modalwindow_js_bootstrap()\n{\n\t// Initialize variables for the file \"bootstrap-evo_modal_window.js\":\n\techo '<script type=\"text/javascript\">\n\t\tvar evo_js_lang_close = \\''.TS_('Close').'\\';\n\t</script>';\n}\n\n\n/**\n * Handle fatal error in order to display info message when debug is OFF\n */\nfunction evo_error_handler()\n{\n\tglobal $evo_last_handled_error;\n\n\t// Get last error\n\t$error = error_get_last();\n\n\tif( ! empty( $error ) && $error['type'] === E_ERROR )\n\t{ // Save only last fatal error\n\t\t$evo_last_handled_error = $error;\n\t}\n\n\t// fp> WTF?!? and what about warnings?\n\t// fp> And where do we die()? why is there not a debug_die() here?\n\t// There should be ONE MILLION COMMENTS in this function to explain what we do!\n\n}\n\n\n/**\n * Get icon to collapse/expand fieldset\n *\n * @param string ID of fieldset\n * @param array Params\n * @return string Icon with hidden input field\n */\nfunction get_fieldset_folding_icon( $id, $params = array() )\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n\t$params = array_merge( array(\n\t\t\t'before'    => '',\n\t\t\t'after'     => ' ',\n\t\t\t'deny_fold' => false, // TRUE to don't allow fold the block and keep it opened always on page loading\n\t\t), $params );\n\n\tif( $params['deny_fold'] )\n\t{ // Deny folding for this case\n\t\t$value = 0;\n\t}\n\telse\n\t{ // Get the fold value from user settings\n\t\tglobal $UserSettings, $Blog;\n\t\tif( empty( $Blog ) )\n\t\t{ // Get user setting value\n\t\t\t$value = intval( $UserSettings->get( 'fold_'.$id ) );\n\t\t}\n\t\telse\n\t\t{ // Get user-collection setting\n\t\t\t$value = intval( $UserSettings->get_collection_setting( 'fold_'.$id, $Blog->ID ) );\n\t\t}\n\t}\n\n\t// Icon\n\tif( $value )\n\t{\n\t\t$icon_current = 'filters_show';\n\t\t$icon_reverse = 'filters_hide';\n\t\t$title_reverse = T_('Collapse');\n\t}\n\telse\n\t{\n\t\t$icon_current = 'filters_hide';\n\t\t$icon_reverse = 'filters_show';\n\t\t$title_reverse = T_('Expand');\n\t}\n\t$icon = get_icon( $icon_current, 'imgtag', array(\n\t\t\t'id'         => 'icon_folding_'.$id,\n\t\t\t'data-xy'    => get_icon( $icon_reverse, 'xy' ),\n\t\t\t'data-title' => format_to_output( $title_reverse, 'htmlattr' ),\n\t\t) );\n\n\t// Hidden input to store current value of the folding status\n\t$hidden_input = '<input type=\"hidden\" name=\"folding_values['.$id.']\" id=\"folding_value_'.$id.'\" value=\"'.$value.'\" />';\n\n\treturn $hidden_input.$params['before'].$icon.$params['after'];\n}\n\n\n/**\n * Output JavaScript code to collapse/expand fieldset\n */\nfunction echo_fieldset_folding_js()\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n?>\n<script type=\"text/javascript\">\njQuery( 'span[id^=icon_folding_], span[id^=title_folding_]' ).click( function()\n{\n\tvar is_icon = jQuery( this ).attr( 'id' ).match( /^icon_folding_/ );\n\tvar wrapper_obj = jQuery( this ).closest( '.fieldset_wrapper' );\n\tvar value_obj = is_icon ? jQuery( this ).prev() : jQuery( this ).prev().prev();\n\n\tif( wrapper_obj.length == 0 || value_obj.length == 0 )\n\t{ // Invalid layout\n\t\treturn false;\n\t}\n\n\tif( value_obj.val() == '1' )\n\t{ // Collapse\n\t\twrapper_obj.removeClass( 'folded' );\n\t\tvalue_obj.val( '0' );\n\t}\n\telse\n\t{ // Expand\n\t\twrapper_obj.addClass( 'folded' );\n\t\tvalue_obj.val( '1' );\n\t}\n\n\t// Change icon image\n\tvar clickimg = is_icon ? jQuery( this ) : jQuery( this ).prev();\n\tif( clickimg.hasClass( 'fa' ) || clickimg.hasClass( 'glyphicon' ) )\n\t{ // Fontawesome icon | Glyph bootstrap icon\n\t\tif( clickimg.data( 'toggle' ) != '' )\n\t\t{ // This icon has a class name to toggle\n\t\t\tvar icon_prefix = ( clickimg.hasClass( 'fa' ) ? 'fa' : 'glyphicon' );\n\t\t\tif( clickimg.data( 'toggle-orig-class' ) == undefined )\n\t\t\t{ // Store original class name in data\n\t\t\t\tclickimg.data( 'toggle-orig-class', clickimg.attr( 'class' ).replace( new RegExp( '^'+icon_prefix+' (.+)$', 'g' ), '$1' ) );\n\t\t\t}\n\t\t\tif( clickimg.hasClass( clickimg.data( 'toggle-orig-class' ) ) )\n\t\t\t{ // Replace original class name with exnpanded\n\t\t\t\tclickimg.removeClass( clickimg.data( 'toggle-orig-class' ) )\n\t\t\t\t\t.addClass( icon_prefix + '-' + clickimg.data( 'toggle' ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{ // Revert back original class\n\t\t\t\tclickimg.removeClass( icon_prefix + '-' + clickimg.data( 'toggle' ) )\n\t\t\t\t\t.addClass( clickimg.data( 'toggle-orig-class' ) );\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{ // Sprite icon\n\t\tvar icon_bg_pos = clickimg.css( 'background-position' );\n\t\tclickimg.css( 'background-position', clickimg.data( 'xy' ) );\n\t\tclickimg.data( 'xy', icon_bg_pos );\n\t}\n\n\t// Toggle title\n\tvar title = clickimg.attr( 'title' );\n\tclickimg.attr( 'title', clickimg.data( 'title' ) );\n\tclickimg.data( 'title', title );\n} );\n\njQuery( 'input[type=hidden][id^=folding_value_]' ).each( function()\n{ // Check each feildset is folded correctly after refresh a page\n\tvar wrapper_obj = jQuery( this ).closest( '.fieldset_wrapper' );\n\tif( jQuery( this ).val() == '1' )\n\t{ // Collapse\n\t\twrapper_obj.addClass( 'folded' );\n\t}\n\telse\n\t{ // Expand\n\t\twrapper_obj.removeClass( 'folded' );\n\t}\n} );\n\n// Expand all fieldsets that have the fields with error\njQuery( '.field_error' ).closest( '.fieldset_wrapper.folded' ).find( 'span[id^=icon_folding_]' ).click();\n</script>\n<?php\n}\n\n\n/**\n * Save the values of fieldset folding into DB\n *\n * @param integer Blog ID is used to save setting per blog, NULL- to don't save per blog\n */\nfunction save_fieldset_folding_values( $blog_ID = NULL )\n{\n\tif( ! is_logged_in() )\n\t{ // Only loggedin users can fold fieldset\n\t\treturn;\n\t}\n\n\t$folding_values = param( 'folding_values', 'array:integer' );\n\n\tif( empty( $folding_values ) )\n\t{ // No folding values go from request, Exit here\n\t\treturn;\n\t}\n\n\tglobal $UserSettings;\n\n\tforeach( $folding_values as $key => $value )\n\t{\n\t\t$setting_name = 'fold_'.$key;\n\t\tif( $blog_ID !== NULL )\n\t\t{ // Save setting per blog\n\t\t\t$setting_name .= '_'.$blog_ID;\n\t\t}\n\t\t$UserSettings->set( $setting_name, $value );\n\t}\n\n\t// Update the folding setting for current user\n\t$UserSettings->dbupdate();\n}\n\n\n/**\n * Get html code of bootstrap dropdown element\n *\n * @param array Params\n */\nfunction get_status_dropdown_button( $params = array() )\n{\n\t$params = array_merge( array(\n\t\t\t'name'             => '',\n\t\t\t'value'            => '',\n\t\t\t'title_format'     => '',\n\t\t\t'options'          => NULL,\n\t\t\t'exclude_statuses' => array( 'trash' ),\n\t\t), $params );\n\n\tif( $params['options'] === NULL )\n\t{\t// Get status options by title format:\n\t\t$status_options = get_visibility_statuses( $params['title_format'], $params['exclude_statuses'] );\n\t}\n\telse\n\t{\t// Use status options from params:\n\t\t$status_options = $params['options'];\n\t}\n\t$status_icon_options = get_visibility_statuses( 'icons', $params['exclude_statuses'] );\n\n\t$r = '<div class=\"btn-group dropdown autoselected\">';\n\t$r .= '<button type=\"button\" class=\"btn btn-status-'.$params['value'].' dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">'\n\t\t\t\t\t.'<span>'.$status_options[ $params['value'] ].'</span>'\n\t\t\t\t.' <span class=\"caret\"></span></button>';\n\t$r .= '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"'.$params['name'].'\">';\n\tforeach( $status_options as $status_key => $status_title )\n\t{\n\t\t$r .= '<li rel=\"'.$status_key.'\" role=\"presentation\"><a href=\"#\" role=\"menuitem\" tabindex=\"-1\">'.$status_icon_options[ $status_key ].' <span>'.$status_title.'</span></a></li>';\n\t}\n\t$r .= '</ul>';\n\t$r .= '</div>';\n\n\treturn $r;\n}\n\n/**\n * Output JavaScript code to work with dropdown bootstrap element\n */\nfunction echo_form_dropdown_js()\n{\n?>\n<script type=\"text/javascript\">\njQuery( '.btn-group.dropdown.autoselected li a' ).click( function()\n{\n\tvar item = jQuery( this ).parent();\n\tvar status = item.attr( 'rel' );\n\tvar button = jQuery( this ).parent().parent().prev();\n\tvar field_name = jQuery( this ).parent().parent().attr( 'aria-labelledby' );\n\n\t// Change status class name to new changed for all buttons:\n\tbutton.attr( 'class', button.attr( 'class' ).replace( /btn-status-[^\\s]+/, 'btn-status-' + status ) );\n\t// Update selector button to status title:\n\tbutton.find( 'span:first' ).html( item.find( 'span:last' ).html() );\n\t// Update hidden field to new status value:\n\tjQuery( 'input[type=hidden][name=' + field_name + ']' ).val( status );\n\t// Hide dropdown menu:\n\titem.parent().parent().removeClass( 'open' );\n\n\treturn false;\n} );\n</script>\n<?php\n}\n\n\n/**\n * Get baseurl depending on current called script\n *\n * @return string URL\n */\nfunction get_script_baseurl()\n{\n\tif( isset( $_SERVER['SERVER_NAME'] ) )\n\t{ // Set baseurl from current server name\n\n\t\t$temp_baseurl = 'http://'.$_SERVER['SERVER_NAME'];\n\n\t\tif( isset( $_SERVER['SERVER_PORT'] ) )\n\t\t{\n\t\t\tif( $_SERVER['SERVER_PORT'] == '443' )\n\t\t\t{\t// Rewrite that as hhtps:\n\t\t\t\t$temp_baseurl = 'https://'.$_SERVER['SERVER_NAME'];\n\t\t\t}\t// Add port name\n\t\t\telseif( $_SERVER['SERVER_PORT'] != '80' )\n\t\t\t{ // Get also a port number\n\t\t\t\t$temp_baseurl .= ':'.$_SERVER['SERVER_PORT'];\n\t\t\t}\n\t\t}\n\n\t\tif( isset( $_SERVER['SCRIPT_NAME'] ) )\n\t\t{ // Get also the subfolders, when script is called e.g. from http://localhost/blogs/b2evolution/\n\t\t\t$temp_baseurl .= preg_replace( '~(.*/)[^/]*$~', '$1', $_SERVER['SCRIPT_NAME'] );\n\t\t}\n\t}\n\telse\n\t{ // Use baseurl from config\n\t\tglobal $baseurl;\n\t\t$temp_baseurl = $baseurl;\n\t}\n\n\treturn $temp_baseurl;\n}\n\n\n/**\n * Get badge to inform the settings are edited only by collection/user admins\n *\n * @param string Type: 'coll', 'user'\n * @param string Manual URL, '#' - default, false - don't set URL\n * @param string Text\n * @param string Title\n * @param string Value\n * @return string\n */\nfunction get_admin_badge( $type = 'coll', $manual_url = '#', $text = '#', $title = '#', $value = NULL )\n{\n\t$badge_class = 'badge badge-warning';\n\n\tswitch( $type )\n\t{\n\t\tcase 'coll':\n\t\t\tif( $text == '#' )\n\t\t\t{\t// Use default text:\n\t\t\t\t$text = T_('Coll. Admin');\n\t\t\t}\n\t\t\tif( $title == '#' )\n\t\t\t{\t// Use default title:\n\t\t\t\t$title = T_('This can only be edited by users with the Collection Admin permission.');\n\t\t\t}\n\t\t\tif( $manual_url == '#' )\n\t\t\t{\t// Use default manual url:\n\t\t\t\t$manual_url = 'collection-admin';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'user':\n\t\t\tif( $text == '#' )\n\t\t\t{\t// Use default text:\n\t\t\t\t$text = T_('User Admin');\n\t\t\t}\n\t\t\tif( $title == '#' )\n\t\t\t{\t// Use default title:\n\t\t\t\t$title = T_('This can only be edited by users with the User Admin permission.');\n\t\t\t}\n\t\t\tif( $manual_url == '#' )\n\t\t\t{\t// Use default manual url:\n\t\t\t\t$manual_url = 'user-admin';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'group':\n\t\t\tif( $value == 'primary' )\n\t\t\t{\t// Use text for primary group:\n\t\t\t\t$text = T_('Primary');\n\t\t\t\t$badge_class = 'label label-primary';\n\t\t\t}\n\t\t\telse\n\t\t\t{\t// Use text for secondary group:\n\t\t\t\t$text = T_('Secondary');\n\t\t\t\t$badge_class = 'label label-info';\n\t\t\t}\n\t\t\t$title = '';\n\t\t\t$manual_url = '';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t// Unknown badge type:\n\t\t\treturn '';\n\t}\n\n\tif( empty( $manual_url ) )\n\t{\t// Don't use a link:\n\t\t$r = ' <b';\n\t}\n\telse\n\t{\t// Use link:\n\t\t$r = ' <a href=\"'.get_manual_url( $manual_url ).'\" target=\"_blank\"';\n\t}\n\t$r .= ' class=\"'.$badge_class.'\"';\n\tif( ! empty( $title ) && $title != '#' )\n\t{\t// Use title for tooltip:\n\t\t$r .= ' data-toggle=\"tooltip\" data-placement=\"top\" title=\"'.format_to_output( $title, 'htmlattr' ).'\"';\n\t}\n\t$r .= '>';\n\t$r .= $text;\n\tif( empty( $manual_url ) )\n\t{\t// End of text formatted badge:\n\t\t$r .= '</b>';\n\t}\n\telse\n\t{\t// End of the link:\n\t\t$r .= '</a>';\n\t}\n\n\treturn $r;\n}\n\n\n/**\n * Compares two \"PHP-standardized\" version number strings\n *\n * @param string First version number, Use 'current' for global $app_version\n * @param string Second version number\n * @param string If the third optional operator argument is specified, test for a particular relationship.\n *               The possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne respectively.\n *               This parameter is case-sensitive, values should be lowercase.\n * @return integer|boolean -1 if the first version is lower than the second, 0 if they are equal, and 1 if the second is lower.\n *                         When using the optional operator argument, the function will return TRUE if the relationship is the one specified by the operator, FALSE otherwise.\n */\nfunction evo_version_compare( $version1, $version2, $operator = NULL )\n{\n\tif( $version1 === 'current' )\n\t{\t// Use current version of application:\n\t\tglobal $app_version;\n\t\t$version1 = $app_version;\n\t}\n\n\t// Remove \"stable\" suffix to compare such versions as upper than \"alpha\", \"beta\" and etc.:\n\t$version1 = str_replace( '-stable', '', $version1 );\n\t$version2 = str_replace( '-stable', '', $version2 );\n\n\tif( is_null( $operator ) )\n\t{\t// To return integer:\n\t\treturn version_compare( $version1, $version2 );\n\t}\n\telse\n\t{\t// To return boolean:\n\t\treturn version_compare( $version1, $version2, $operator );\n\t}\n}\n\n\n/**\n * Get text for install page depending on param $display == 'cli'\n *\n * @param string Original text\n * @param string Format (Used for CLI mode)\n * @return string Prepared text\n */\nfunction get_install_format_text( $text, $format = 'string' )\n{\n\tglobal $display;\n\n\tif( empty( $display ) || $display != 'cli' )\n\t{\t// Don't touch text for non CLI modes:\n\t\treturn $text;\n\t}\n\n\t// Don't remove these HTML tags on CLI mode:\n\t$allowable_html_tags = '<evo:error><evo:warning><evo:success><evo:note><evo:login><evo:password>';\n\n\t// Remove all new lines because we build them from requested format:\n\t$text = str_replace( array( \"\\n\", \"\\r\" ), '', $text );\n\n\t// Keep all URLs and display them\n\t$text = preg_replace( '/<a[^>]+href=\"([^\"]+)\"[^>]*>(.+)<\\/a>/i', '$2(URL: $1)', $text );\n\n\t// Remove HTML tags from text:\n\t$text = strip_tags( $text, $allowable_html_tags );\n\n\tswitch( $format )\n\t{\n\t\tcase 'h2':\n\t\t\t// Header 2\n\t\t\t$text = \"\\n\\n----- \".$text.\" -----\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'br':\n\t\t\t// Paragraph:\n\t\t\t$text = $text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p':\n\t\t\t// Paragraph:\n\t\t\t$text = \"\\n\".$text.\"\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p-start':\n\t\t\t// Start paragraph:\n\t\t\t$text = \"\\n\".$text;\n\t\t\tbreak;\n\n\t\tcase 'p-start-br':\n\t\t\t// Start paragraph:\n\t\t\t$text = \"\\n\".$text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'p-end':\n\t\t\t// End paragraph:\n\t\t\t$text = $text.\"\\n\\n\";\n\t\t\tbreak;\n\n\t\tcase 'li':\n\t\t\t// List item:\n\t\t\t$text = \"\\n- \".$text.\"\\n\";\n\t\t\tbreak;\n\n\t\tcase 'code':\n\t\t\t// Code:\n\t\t\t$text = \"\\n================\\n\".$text.\"\\n================\\n\";\n\t\t\tbreak;\n\t}\n\n\t// Replace all html entities like \"&nbsp;\", \"&raquo;\", \"&laquo;\" to readable chars:\n\t$text = html_entity_decode( $text );\n\n\treturn $text;\n}\n\n\n/**\n * Check if password should be transmitted in hashed format during Login\n *\n * @return boolean TRUE - hashed password will be transmitted, FALSE - raw password will be transmitted\n */\nfunction can_use_hashed_password()\n{\n\tglobal $transmit_hashed_password;\n\n\tif( isset( $transmit_hashed_password ) )\n\t{\t// Get value from already defined var:\n\t\treturn $transmit_hashed_password;\n\t}\n\n\tglobal $Settings, $Plugins;\n\n\t// Allow to transmit hashed password only when:\n\t// - it is enabled by general setting \"Password hashing during Login\"\n\t// - no plugins that automatically disable this option during Login\n\t$transmit_hashed_password = (bool)$Settings->get( 'js_passwd_hashing' ) && !(bool)$Plugins->trigger_event_first_true( 'LoginAttemptNeedsRawPassword' );\n\n\treturn $transmit_hashed_password;\n}\n?>"], "filenames": ["_tests/blogs/evocore/misc.funcs.simpletest.php", "inc/_core/_misc.funcs.php"], "buggy_code_start_loc": [56, 1324], "buggy_code_end_loc": [56, 1329], "fixing_code_start_loc": [57, 1324], "fixing_code_end_loc": [60, 1329], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in b2evolution 6.7.5 and earlier allows remote attackers to inject arbitrary web script or HTML via vectors related to the autolink function.", "other": {"cve": {"id": "CVE-2016-7149", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-18T17:59:00.590", "lastModified": "2017-01-23T19:53:08.580", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in b2evolution 6.7.5 and earlier allows remote attackers to inject arbitrary web script or HTML via vectors related to the autolink function."}, {"lang": "es", "value": "Vulnerabilidad de XSS en b2evolution 6.7.5 y versiones anteriores permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de vectores relacionados con la funci\u00f3n autolink."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:b2evolution:b2evolution:*:*:*:*:*:*:*:*", "versionEndIncluding": "6.7.5", "matchCriteriaId": "F7C58506-ACD4-4D6E-A5A5-D4E3AEBE684A"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/09/12/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2016/09/15/4", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/92967", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/b2evolution/b2evolution/commit/9a4ab85439d1b838ee7b8eeebbf59174bb787811", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/b2evolution/b2evolution/commit/9a4ab85439d1b838ee7b8eeebbf59174bb787811"}}