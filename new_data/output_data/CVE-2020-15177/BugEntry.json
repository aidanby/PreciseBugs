{"buggy_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\ndefine('GLPI_ROOT', realpath('..'));\n\ninclude_once (GLPI_ROOT . \"/inc/based_config.php\");\ninclude_once (GLPI_ROOT . \"/inc/db.function.php\");\n\n$GLPI = new GLPI();\n$GLPI->initLogger();\n$GLPI->initErrorHandler();\n\nConfig::detectRootDoc();\n\n//Print a correct  Html header for application\nfunction header_html($etape) {\n   global $CFG_GLPI;\n\n   // Send UTF8 Headers\n   header(\"Content-Type: text/html; charset=UTF-8\");\n\n   echo \"<!DOCTYPE html'>\";\n   echo \"<html lang='fr'>\";\n    echo \"<head>\";\n    echo \"<meta charset='utf-8'>\";\n   echo \"<meta http-equiv='Content-Script-Type' content='text/javascript'> \";\n    echo \"<meta http-equiv='Content-Style-Type' content='text/css'> \";\n   echo \"<title>Setup GLPI</title>\";\n\n   // CFG\n   echo Html::getCoreVariablesForJavascript();\n\n    // LIBS\n   echo Html::script(\"public/lib/base.js\");\n   echo Html::script(\"public/lib/fuzzy.js\");\n   echo Html::script(\"js/common.js\");\n\n    // CSS\n   echo Html::css('public/lib/base.css');\n   echo Html::css(\"css/style_install.css\");\n   echo \"</head>\";\n   echo \"<body>\";\n   echo \"<div id='principal'>\";\n   echo \"<div id='bloc'>\";\n   echo \"<div id='logo_bloc'></div>\";\n   echo \"<h2>GLPI SETUP</h2>\";\n   echo \"<br><h3>\". $etape .\"</h3>\";\n}\n\n\n//Display a great footer.\nfunction footer_html() {\n   echo \"</div></div></body></html>\";\n}\n\n\n// choose language\nfunction choose_language() {\n   global $CFG_GLPI;\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<p class='center'>\";\n\n   // fix missing param for js drodpown\n   $CFG_GLPI['ajax_limit_count'] = 15;\n\n   Dropdown::showLanguages(\"language\", ['value' => \"en_GB\"]);\n   echo \"</p>\";\n   echo \"\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='lang_select'>\";\n   echo \"<input type='submit' name='submit' class='submit' value='OK'></p>\";\n   Html::closeForm();\n}\n\n\nfunction acceptLicense() {\n\n   echo \"<div class='center'>\";\n   echo \"<textarea id='license' cols='85' rows='10' readonly='readonly'>\";\n   readfile(\"../COPYING.txt\");\n   echo \"</textarea>\";\n\n   echo \"<br><a target='_blank' href='http://www.gnu.org/licenses/old-licenses/gpl-2.0-translations.html'>\".\n         __('Unofficial translations are also available').\"</a>\";\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<p id='license'>\";\n\n   echo \"<label for='agree' class='radio'>\";\n   echo \"<input type='radio' name='install' id='agree' value='License'>\";\n   echo \"<span class='outer'><span class='inner'></span></span>\";\n   echo __('I have read and ACCEPT the terms of the license written above.');\n   echo \" </label>\";\n\n   echo \"<label for='disagree' class='radio'>\";\n   echo \"<input type='radio' name='install' value='lang_select' id='disagree' checked='checked'>\";\n   echo \"<span class='outer'><span class='inner'></span></span>\";\n   echo __('I have read and DO NOT ACCEPT the terms of the license written above');\n   echo \" </label>\";\n\n   echo \"<p><input type='submit' name='submit' class='submit' value=\\\"\".__s('Continue').\"\\\"></p>\";\n   Html::closeForm();\n   echo \"</div>\";\n}\n\n\n//confirm install form\nfunction step0() {\n\n   echo \"<h3>\".__('Installation or update of GLPI').\"</h3>\";\n   echo \"<p>\".__s(\"Choose 'Install' for a completely new installation of GLPI.\").\"</p>\";\n   echo \"<p> \".__s(\"Select 'Upgrade' to update your version of GLPI from an earlier version\").\"</p>\";\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='no'>\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n   echo \"<input type='submit' name='submit' class='submit' value=\\\"\"._sx('button', 'Install').\"\\\"></p>\";\n   Html::closeForm();\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='yes'>\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n   echo \"<input type='submit' name='submit' class='submit' value=\\\"\"._sx('button', 'Upgrade').\"\\\"></p>\";\n   Html::closeForm();\n}\n\n\n//Step 1 checking some compatibility issue and some write tests.\nfunction step1($update) {\n   echo \"<h3>\".__s('Checking of the compatibility of your environment with the execution of GLPI').\n        \"</h3>\";\n   echo \"<table class='tab_check'>\";\n\n   $error = Toolbox::commonCheckForUseGLPI(true);\n\n   echo \"</table>\";\n   switch ($error) {\n      case 0 :\n         echo \"<form action='install.php' method='post'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<p class='submit'><input type='hidden' name='install' value='Etape_1'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n         echo \"</p>\";\n         Html::closeForm();\n         break;\n\n      case 1 :\n         echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n         echo \"<div class='submit'><form action='install.php' method='post' class='inline'>\";\n         echo \"<input type='hidden' name='install' value='Etape_1'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n         Html::closeForm();\n         echo \"&nbsp;&nbsp;\";\n\n         echo \"<form action='install.php' method='post' class='inline'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<input type='hidden' name='install' value='Etape_0'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Try again').\"\\\">\";\n         Html::closeForm();\n         echo \"</div>\";\n         break;\n\n      case 2 :\n         echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n         echo \"<form action='install.php' method='post'>\";\n         echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n         echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Try again').\"\\\">\";\n         echo \"</p>\";\n         Html::closeForm();\n         break;\n   }\n\n}\n\n\n//step 2 import mysql settings.\nfunction step2($update) {\n\n   echo \"<h3>\".__('Database connection setup').\"</h3>\";\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n   echo \"<fieldset><legend>\".__('Database connection parameters').\"</legend>\";\n   echo \"<p><label class='block'>\".__('SQL server (MariaDB or MySQL)') .\" </label>\";\n   echo \"<input type='text' name='db_host'><p>\";\n   echo \"<p><label class='block'>\".__('SQL user') .\" </label>\";\n   echo \"<input type='text' name='db_user'></p>\";\n   echo \"<p><label class='block'>\".__('SQL password').\" </label>\";\n   echo \"<input type='password' name='db_pass'></p></fieldset>\";\n   echo \"<input type='hidden' name='install' value='Etape_2'>\";\n   echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n         __('Continue').\"'></p>\";\n   Html::closeForm();\n}\n\n\n//step 3 test mysql settings and select database.\nfunction step3($host, $user, $password, $update) {\n\n   error_reporting(16);\n   echo \"<h3>\".__('Test of the connection at the database').\"</h3>\";\n\n   //Check if the port is in url\n   $hostport = explode(\":\", $host);\n   if (count($hostport) < 2) {\n      $link = new mysqli($hostport[0], $user, $password);\n   } else {\n      $link = new mysqli($hostport[0], $user, $password, '', $hostport[1]);\n   }\n\n   if ($link->connect_error\n       || empty($host)\n       || empty($user)) {\n      echo \"<p>\".__(\"Can't connect to the database\").\"\\n <br>\".\n           sprintf(__('The server answered: %s'), $link->connect_error).\"</p>\";\n\n      if (empty($host)\n          || empty($user)) {\n         echo \"<p>\".__('The server or/and user field is empty').\"</p>\";\n      }\n\n      echo \"<form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n      echo \"<input type='hidden' name='install' value='Etape_1'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __s('Back').\"'></p>\";\n      Html::closeForm();\n\n   } else {\n      $_SESSION['db_access'] = ['host'     => $host,\n                                     'user'     => $user,\n                                     'password' => $password];\n      echo  \"<h3>\".__('Database connection successful').\"</h3>\";\n\n      //get database raw version\n      $DB_ver = $link->query(\"SELECT version()\");\n      $row = $DB_ver->fetch_array();\n      echo \"<p class='center'>\";\n      $checkdb = Config::displayCheckDbEngine(true, $row[0]);\n      echo \"</p>\";\n      if ($checkdb > 0) {\n         return;\n      }\n\n      if ($update == \"no\") {\n         echo \"<p>\".__('Please select a database:').\"</p>\";\n         echo \"<form action='install.php' method='post'>\";\n\n         if ($DB_list = $link->query(\"SHOW DATABASES\")) {\n            while ($row = $DB_list->fetch_array()) {\n               if (!in_array($row['Database'], [\"information_schema\",\n                                                     \"mysql\",\n                                                     \"performance_schema\"] )) {\n                  echo \"<p>\";\n                  echo \"<label class='radio'>\";\n                  echo \"<input type='radio' name='databasename' value='\". $row['Database'].\"'>\";\n\n                  echo \"<span class='outer'><span class='inner'></span></span>\";\n                  echo $row['Database'];\n                  echo \" </label>\";\n                  echo \" </p>\";\n               }\n            }\n         }\n\n         echo \"<p>\";\n         echo \"<label class='radio'>\";\n         echo \"<input type='radio' name='databasename' value='0'>\";\n         echo __('Create a new database or use an existing one:');\n         echo \"<span class='outer'><span class='inner'></span></span>\";\n         echo \"&nbsp;<input type='text' name='newdatabasename'>\";\n         echo \" </label>\";\n         echo \"</p>\";\n         echo \"<input type='hidden' name='install' value='Etape_3'>\";\n         echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n               __('Continue').\"'></p>\";\n         $link->close();\n         Html::closeForm();\n\n      } else if ($update == \"yes\") {\n         echo \"<p>\".__('Please select the database to update:').\"</p>\";\n         echo \"<form action='install.php' method='post'>\";\n\n         $DB_list = $link->query(\"SHOW DATABASES\");\n         while ($row = $DB_list->fetch_array()) {\n            echo \"<p>\";\n            echo \"<label class='radio'>\";\n            echo \"<input type='radio' name='databasename' value='\". $row['Database'].\"'>\";\n            echo \"<span class='outer'><span class='inner'></span></span>\";\n            echo $row['Database'];\n            echo \" </label>\";\n            echo \"</p>\";\n         }\n\n         echo \"<input type='hidden' name='install' value='update_1'>\";\n         echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n                __('Continue').\"'></p>\";\n         $link->close();\n         Html::closeForm();\n      }\n\n   }\n}\n\n\n//Step 4 Create and fill database.\nfunction step4 ($databasename, $newdatabasename) {\n\n   $host     = $_SESSION['db_access']['host'];\n   $user     = $_SESSION['db_access']['user'];\n   $password = $_SESSION['db_access']['password'];\n\n   //display the form to return to the previous step.\n   echo \"<h3>\".__('Initialization of the database').\"</h3>\";\n\n   function prev_form($host, $user, $password) {\n\n      echo \"<br><form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='db_host' value='\". $host .\"'>\";\n      echo \"<input type='hidden' name='db_user' value='\". $user .\"'>\";\n      echo \" <input type='hidden' name='db_pass' value='\". rawurlencode($password) .\"'>\";\n      echo \"<input type='hidden' name='update' value='no'>\";\n      echo \"<input type='hidden' name='install' value='Etape_2'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __s('Back').\"'></p>\";\n      Html::closeForm();\n   }\n\n   //Display the form to go to the next page\n   function next_form() {\n\n      echo \"<br><form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='install' value='Etape_4'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n             __('Continue').\"'></p>\";\n      Html::closeForm();\n   }\n\n   //create security key\n   $glpikey = new GLPIKey();\n   $secured = $glpikey->keyExists();\n   if (!$secured) {\n      $secured = $glpikey->generate();\n   }\n\n   if (!$secured) {\n      echo \"<p><strong>\".__('Security key cannot be generated!').\"</strong></p>\";\n      prev_form($host, $user, $password);\n      return;\n   }\n\n   //Check if the port is in url\n   $hostport = explode(\":\", $host);\n   if (count($hostport) < 2) {\n      $link = new mysqli($hostport[0], $user, $password);\n   } else {\n      $link = new mysqli($hostport[0], $user, $password, '', $hostport[1]);\n   }\n\n   $databasename    = $link->real_escape_string($databasename);\n   $newdatabasename = $link->real_escape_string($newdatabasename);\n\n   if (!empty($databasename)) { // use db already created\n      $DB_selected = $link->select_db($databasename);\n\n      if (!$DB_selected) {\n         echo __('Impossible to use the database:');\n         echo \"<br>\".sprintf(__('The server answered: %s'), $link->error);\n         prev_form($host, $user, $password);\n\n      } else {\n         if (DBConnection::createMainConfig($host, $user, $password, $databasename)) {\n            Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n            echo \"<p>\".__('OK - database was initialized').\"</p>\";\n\n            next_form();\n\n         } else { // can't create config_db file\n            echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n            prev_form($host, $user, $password);\n         }\n      }\n\n   } else if (!empty($newdatabasename)) { // create new db\n      // Try to connect\n      if ($link->select_db($newdatabasename)) {\n         echo \"<p>\".__('Database created').\"</p>\";\n\n         if (DBConnection::createMainConfig($host, $user, $password, $newdatabasename)) {\n            Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n            echo \"<p>\".__('OK - database was initialized').\"</p>\";\n            next_form();\n\n         } else { // can't create config_db file\n            echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n            prev_form($host, $user, $password);\n         }\n\n      } else { // try to create the DB\n         if ($link->query(\"CREATE DATABASE IF NOT EXISTS `\".$newdatabasename.\"`\")) {\n            echo \"<p>\".__('Database created').\"</p>\";\n\n            if ($link->select_db($newdatabasename)\n                && DBConnection::createMainConfig($host, $user, $password, $newdatabasename)) {\n\n               Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n               echo \"<p>\".__('OK - database was initialized').\"</p>\";\n               next_form();\n\n            } else { // can't create config_db file\n               echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n               prev_form($host, $user, $password);\n            }\n\n         } else { // can't create database\n            echo __('Error in creating database!');\n            echo \"<br>\".sprintf(__('The server answered: %s'), $link->error);\n            prev_form($host, $user, $password);\n         }\n      }\n\n   } else { // no db selected\n      echo \"<p>\".__(\"You didn't select a database!\"). \"</p>\";\n      //prev_form();\n      prev_form($host, $user, $password);\n   }\n\n   $link->close();\n\n}\n\n//send telemetry informations\nfunction step6() {\n   global $DB;\n   echo \"<h3>\".__('Collect data').\"</h3>\";\n\n   include_once(GLPI_ROOT . \"/inc/dbmysql.class.php\");\n   include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n   $DB = new DB();\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='install' value='Etape_5'>\";\n\n   echo Telemetry::showTelemetry();\n   echo Telemetry::showReference();\n\n   echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __('Continue').\"'></p>\";\n   Html::closeForm();\n}\n\nfunction step7() {\n   echo \"<h3>\".__('One last thing before starting').\"</h3>\";\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='install' value='Etape_6'>\";\n\n   echo GLPINetwork::showInstallMessage();\n\n   echo \"<p class='submit'>\";\n   echo \"<a href='\".GLPI_NETWORK_SERVICES.\"' target='_blank' class='vsubmit'>\".\n            __('Donate').\"</a>&nbsp;\";\n   echo \"<input type='submit' name='submit' class='submit' value='\".\n            __('Continue').\"'>\";\n   echo \"</p>\";\n   Html::closeForm();\n}\n\n// finish installation\nfunction step8() {\n   include_once(GLPI_ROOT . \"/inc/dbmysql.class.php\");\n   include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n   $DB = new DB();\n\n   if (isset($_POST['send_stats'])) {\n      //user has accepted to send telemetry infos; activate cronjob\n      $DB->update(\n         'glpi_crontasks',\n         ['state' => 1],\n         ['name' => 'telemetry']\n      );\n   }\n\n   $url_base = str_replace(\"/install/install.php\", \"\", $_SERVER['HTTP_REFERER']);\n   $DB->update(\n      'glpi_configs',\n      ['value' => $DB->escape($url_base)], [\n         'context'   => 'core',\n         'name'      => 'url_base'\n      ]\n   );\n\n   $url_base_api = \"$url_base/apirest.php/\";\n   $DB->update(\n      'glpi_configs',\n      ['value' => $DB->escape($url_base_api)], [\n         'context'   => 'core',\n         'name'      => 'url_base_api'\n      ]\n   );\n\n   Session::destroy(); // Remove session data (debug mode for instance) set by web installation\n\n   echo \"<h2>\".__('The installation is finished').\"</h2>\";\n\n   echo \"<p>\".__('Default logins / passwords are:').\"</p>\";\n   echo \"<p><ul><li> \".__('glpi/glpi for the administrator account').\"</li>\";\n   echo \"<li>\".__('tech/tech for the technician account').\"</li>\";\n   echo \"<li>\".__('normal/normal for the normal account').\"</li>\";\n   echo \"<li>\".__('post-only/postonly for the postonly account').\"</li></ul></p>\";\n   echo \"<p>\".__('You can delete or modify these accounts as well as the initial data.').\"</p>\";\n   echo \"<p class='center'><a class='vsubmit' href='../index.php'>\".__('Use GLPI');\n   echo \"</a></p>\";\n}\n\n\nfunction update1($DBname) {\n\n   $host     = $_SESSION['db_access']['host'];\n   $user     = $_SESSION['db_access']['user'];\n   $password = $_SESSION['db_access']['password'];\n\n   if (DBConnection::createMainConfig($host, $user, $password, $DBname) && !empty($DBname)) {\n      $from_install = true;\n      include_once(GLPI_ROOT .\"/install/update.php\");\n\n   } else { // can't create config_db file\n      echo __(\"Can't create the database connection file, please verify file permissions.\");\n      echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n      echo \"<form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='update' value='yes'>\";\n      echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n      echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n      echo \"</p>\";\n      Html::closeForm();\n   }\n}\n\n\n\n//------------Start of install script---------------------------\n\n\n// Use default session dir if not writable\nif (is_writable(GLPI_SESSION_DIR)) {\n   Session::setPath();\n}\n\nSession::start();\nerror_reporting(0); // we want to check system before affraid the user.\n\nif (isset($_POST[\"language\"])) {\n   $_SESSION[\"glpilanguage\"] = $_POST[\"language\"];\n}\n\nSession::loadLanguage('', false);\n\n/**\n * @since 0.84.2\n**/\nfunction checkConfigFile() {\n\n   if (file_exists(GLPI_CONFIG_DIR . \"/config_db.php\")) {\n      Html::redirect($CFG_GLPI['root_doc'] .\"/index.php\");\n      die();\n   }\n}\n\nif (!isset($_POST[\"install\"])) {\n   $_SESSION = [];\n\n   checkConfigFile();\n   header_html(\"Select your language\");\n   choose_language();\n\n} else {\n   // Check valid Referer :\n   Toolbox::checkValidReferer();\n   // Check CSRF: ensure nobody strap first page that checks if config file exists ...\n   Session::checkCSRF($_POST);\n\n   // DB clean\n   if (isset($_POST[\"db_pass\"])) {\n      $_POST[\"db_pass\"] = stripslashes($_POST[\"db_pass\"]);\n      $_POST[\"db_pass\"] = rawurldecode($_POST[\"db_pass\"]);\n      $_POST[\"db_pass\"] = stripslashes($_POST[\"db_pass\"]);\n   }\n\n   switch ($_POST[\"install\"]) {\n      case \"lang_select\" : // lang ok, go accept licence\n         checkConfigFile();\n         header_html(SoftwareLicense::getTypeName(1));\n         acceptLicense();\n         break;\n\n      case \"License\" : // licence  ok, go choose installation or Update\n         checkConfigFile();\n         header_html(__('Beginning of the installation'));\n         step0();\n         break;\n\n      case \"Etape_0\" : // choice ok , go check system\n         checkConfigFile();\n         //TRANS %s is step number\n         header_html(sprintf(__('Step %d'), 0));\n         $_SESSION[\"Test_session_GLPI\"] = 1;\n         step1($_POST[\"update\"]);\n         break;\n\n      case \"Etape_1\" : // check ok, go import mysql settings.\n         checkConfigFile();\n         // check system ok, we can use specific parameters for debug\n         Toolbox::setDebugMode(Session::DEBUG_MODE, 0, 0, 1);\n\n         header_html(sprintf(__('Step %d'), 1));\n         step2($_POST[\"update\"]);\n         break;\n\n      case \"Etape_2\" : // mysql settings ok, go test mysql settings and select database.\n         checkConfigFile();\n         header_html(sprintf(__('Step %d'), 2));\n         step3($_POST[\"db_host\"], $_POST[\"db_user\"], $_POST[\"db_pass\"], $_POST[\"update\"]);\n         break;\n\n      case \"Etape_3\" : // Create and fill database\n         checkConfigFile();\n         header_html(sprintf(__('Step %d'), 3));\n         if (empty($_POST[\"databasename\"])) {\n            $_POST[\"databasename\"] = \"\";\n         }\n         if (empty($_POST[\"newdatabasename\"])) {\n            $_POST[\"newdatabasename\"] = \"\";\n         }\n         step4($_POST[\"databasename\"],\n               $_POST[\"newdatabasename\"]);\n         break;\n\n      case \"Etape_4\" : // send telemetry informations\n         header_html(sprintf(__('Step %d'), 4));\n         step6();\n         break;\n\n      case \"Etape_5\" : // finish installation\n         header_html(sprintf(__('Step %d'), 5));\n         step7();\n         break;\n\n      case \"Etape_6\" : // finish installation\n         header_html(sprintf(__('Step %d'), 6));\n         step8();\n         break;\n\n      case \"update_1\" :\n         checkConfigFile();\n         if (empty($_POST[\"databasename\"])) {\n            $_POST[\"databasename\"] = \"\";\n         }\n         update1($_POST[\"databasename\"]);\n         break;\n   }\n}\nfooter_html();\n"], "fixing_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\ndefine('GLPI_ROOT', realpath('..'));\n\ninclude_once (GLPI_ROOT . \"/inc/based_config.php\");\ninclude_once (GLPI_ROOT . \"/inc/db.function.php\");\n\n$GLPI = new GLPI();\n$GLPI->initLogger();\n$GLPI->initErrorHandler();\n\nConfig::detectRootDoc();\n\n//Print a correct  Html header for application\nfunction header_html($etape) {\n   global $CFG_GLPI;\n\n   // Send UTF8 Headers\n   header(\"Content-Type: text/html; charset=UTF-8\");\n\n   echo \"<!DOCTYPE html'>\";\n   echo \"<html lang='fr'>\";\n    echo \"<head>\";\n    echo \"<meta charset='utf-8'>\";\n   echo \"<meta http-equiv='Content-Script-Type' content='text/javascript'> \";\n    echo \"<meta http-equiv='Content-Style-Type' content='text/css'> \";\n   echo \"<title>Setup GLPI</title>\";\n\n   // CFG\n   echo Html::getCoreVariablesForJavascript();\n\n    // LIBS\n   echo Html::script(\"public/lib/base.js\");\n   echo Html::script(\"public/lib/fuzzy.js\");\n   echo Html::script(\"js/common.js\");\n\n    // CSS\n   echo Html::css('public/lib/base.css');\n   echo Html::css(\"css/style_install.css\");\n   echo \"</head>\";\n   echo \"<body>\";\n   echo \"<div id='principal'>\";\n   echo \"<div id='bloc'>\";\n   echo \"<div id='logo_bloc'></div>\";\n   echo \"<h2>GLPI SETUP</h2>\";\n   echo \"<br><h3>\". $etape .\"</h3>\";\n}\n\n\n//Display a great footer.\nfunction footer_html() {\n   echo \"</div></div></body></html>\";\n}\n\n\n// choose language\nfunction choose_language() {\n   global $CFG_GLPI;\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<p class='center'>\";\n\n   // fix missing param for js drodpown\n   $CFG_GLPI['ajax_limit_count'] = 15;\n\n   Dropdown::showLanguages(\"language\", ['value' => \"en_GB\"]);\n   echo \"</p>\";\n   echo \"\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='lang_select'>\";\n   echo \"<input type='submit' name='submit' class='submit' value='OK'></p>\";\n   Html::closeForm();\n}\n\n\nfunction acceptLicense() {\n\n   echo \"<div class='center'>\";\n   echo \"<textarea id='license' cols='85' rows='10' readonly='readonly'>\";\n   readfile(\"../COPYING.txt\");\n   echo \"</textarea>\";\n\n   echo \"<br><a target='_blank' href='http://www.gnu.org/licenses/old-licenses/gpl-2.0-translations.html'>\".\n         __('Unofficial translations are also available').\"</a>\";\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<p id='license'>\";\n\n   echo \"<label for='agree' class='radio'>\";\n   echo \"<input type='radio' name='install' id='agree' value='License'>\";\n   echo \"<span class='outer'><span class='inner'></span></span>\";\n   echo __('I have read and ACCEPT the terms of the license written above.');\n   echo \" </label>\";\n\n   echo \"<label for='disagree' class='radio'>\";\n   echo \"<input type='radio' name='install' value='lang_select' id='disagree' checked='checked'>\";\n   echo \"<span class='outer'><span class='inner'></span></span>\";\n   echo __('I have read and DO NOT ACCEPT the terms of the license written above');\n   echo \" </label>\";\n\n   echo \"<p><input type='submit' name='submit' class='submit' value=\\\"\".__s('Continue').\"\\\"></p>\";\n   Html::closeForm();\n   echo \"</div>\";\n}\n\n\n//confirm install form\nfunction step0() {\n\n   echo \"<h3>\".__('Installation or update of GLPI').\"</h3>\";\n   echo \"<p>\".__s(\"Choose 'Install' for a completely new installation of GLPI.\").\"</p>\";\n   echo \"<p> \".__s(\"Select 'Upgrade' to update your version of GLPI from an earlier version\").\"</p>\";\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='no'>\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n   echo \"<input type='submit' name='submit' class='submit' value=\\\"\"._sx('button', 'Install').\"\\\"></p>\";\n   Html::closeForm();\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='yes'>\";\n   echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n   echo \"<input type='submit' name='submit' class='submit' value=\\\"\"._sx('button', 'Upgrade').\"\\\"></p>\";\n   Html::closeForm();\n}\n\n\n//Step 1 checking some compatibility issue and some write tests.\nfunction step1($update) {\n   echo \"<h3>\".__s('Checking of the compatibility of your environment with the execution of GLPI').\n        \"</h3>\";\n   echo \"<table class='tab_check'>\";\n\n   $error = Toolbox::commonCheckForUseGLPI(true);\n\n   echo \"</table>\";\n   switch ($error) {\n      case 0 :\n         echo \"<form action='install.php' method='post'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<p class='submit'><input type='hidden' name='install' value='Etape_1'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n         echo \"</p>\";\n         Html::closeForm();\n         break;\n\n      case 1 :\n         echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n         echo \"<div class='submit'><form action='install.php' method='post' class='inline'>\";\n         echo \"<input type='hidden' name='install' value='Etape_1'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n         Html::closeForm();\n         echo \"&nbsp;&nbsp;\";\n\n         echo \"<form action='install.php' method='post' class='inline'>\";\n         echo \"<input type='hidden' name='update' value='\". $update.\"'>\";\n         echo \"<input type='hidden' name='language' value='\". $_SESSION['glpilanguage'].\"'>\";\n         echo \"<input type='hidden' name='install' value='Etape_0'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Try again').\"\\\">\";\n         Html::closeForm();\n         echo \"</div>\";\n         break;\n\n      case 2 :\n         echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n         echo \"<form action='install.php' method='post'>\";\n         echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n         echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n         echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Try again').\"\\\">\";\n         echo \"</p>\";\n         Html::closeForm();\n         break;\n   }\n\n}\n\n\n//step 2 import mysql settings.\nfunction step2($update) {\n\n   echo \"<h3>\".__('Database connection setup').\"</h3>\";\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n   echo \"<fieldset><legend>\".__('Database connection parameters').\"</legend>\";\n   echo \"<p><label class='block'>\".__('SQL server (MariaDB or MySQL)') .\" </label>\";\n   echo \"<input type='text' name='db_host'><p>\";\n   echo \"<p><label class='block'>\".__('SQL user') .\" </label>\";\n   echo \"<input type='text' name='db_user'></p>\";\n   echo \"<p><label class='block'>\".__('SQL password').\" </label>\";\n   echo \"<input type='password' name='db_pass'></p></fieldset>\";\n   echo \"<input type='hidden' name='install' value='Etape_2'>\";\n   echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n         __('Continue').\"'></p>\";\n   Html::closeForm();\n}\n\n\n//step 3 test mysql settings and select database.\nfunction step3($host, $user, $password, $update) {\n\n   error_reporting(16);\n   echo \"<h3>\".__('Test of the connection at the database').\"</h3>\";\n\n   //Check if the port is in url\n   $hostport = explode(\":\", $host);\n   if (count($hostport) < 2) {\n      $link = new mysqli($hostport[0], $user, $password);\n   } else {\n      $link = new mysqli($hostport[0], $user, $password, '', $hostport[1]);\n   }\n\n   if ($link->connect_error\n       || empty($host)\n       || empty($user)) {\n      echo \"<p>\".__(\"Can't connect to the database\").\"\\n <br>\".\n           sprintf(__('The server answered: %s'), $link->connect_error).\"</p>\";\n\n      if (empty($host)\n          || empty($user)) {\n         echo \"<p>\".__('The server or/and user field is empty').\"</p>\";\n      }\n\n      echo \"<form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='update' value='\".$update.\"'>\";\n      echo \"<input type='hidden' name='install' value='Etape_1'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __s('Back').\"'></p>\";\n      Html::closeForm();\n\n   } else {\n      $_SESSION['db_access'] = ['host'     => $host,\n                                     'user'     => $user,\n                                     'password' => $password];\n      echo  \"<h3>\".__('Database connection successful').\"</h3>\";\n\n      //get database raw version\n      $DB_ver = $link->query(\"SELECT version()\");\n      $row = $DB_ver->fetch_array();\n      echo \"<p class='center'>\";\n      $checkdb = Config::displayCheckDbEngine(true, $row[0]);\n      echo \"</p>\";\n      if ($checkdb > 0) {\n         return;\n      }\n\n      if ($update == \"no\") {\n         echo \"<p>\".__('Please select a database:').\"</p>\";\n         echo \"<form action='install.php' method='post'>\";\n\n         if ($DB_list = $link->query(\"SHOW DATABASES\")) {\n            while ($row = $DB_list->fetch_array()) {\n               if (!in_array($row['Database'], [\"information_schema\",\n                                                     \"mysql\",\n                                                     \"performance_schema\"] )) {\n                  echo \"<p>\";\n                  echo \"<label class='radio'>\";\n                  echo \"<input type='radio' name='databasename' value='\". $row['Database'].\"'>\";\n\n                  echo \"<span class='outer'><span class='inner'></span></span>\";\n                  echo $row['Database'];\n                  echo \" </label>\";\n                  echo \" </p>\";\n               }\n            }\n         }\n\n         echo \"<p>\";\n         echo \"<label class='radio'>\";\n         echo \"<input type='radio' name='databasename' value='0'>\";\n         echo __('Create a new database or use an existing one:');\n         echo \"<span class='outer'><span class='inner'></span></span>\";\n         echo \"&nbsp;<input type='text' name='newdatabasename'>\";\n         echo \" </label>\";\n         echo \"</p>\";\n         echo \"<input type='hidden' name='install' value='Etape_3'>\";\n         echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n               __('Continue').\"'></p>\";\n         $link->close();\n         Html::closeForm();\n\n      } else if ($update == \"yes\") {\n         echo \"<p>\".__('Please select the database to update:').\"</p>\";\n         echo \"<form action='install.php' method='post'>\";\n\n         $DB_list = $link->query(\"SHOW DATABASES\");\n         while ($row = $DB_list->fetch_array()) {\n            echo \"<p>\";\n            echo \"<label class='radio'>\";\n            echo \"<input type='radio' name='databasename' value='\". $row['Database'].\"'>\";\n            echo \"<span class='outer'><span class='inner'></span></span>\";\n            echo $row['Database'];\n            echo \" </label>\";\n            echo \"</p>\";\n         }\n\n         echo \"<input type='hidden' name='install' value='update_1'>\";\n         echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n                __('Continue').\"'></p>\";\n         $link->close();\n         Html::closeForm();\n      }\n\n   }\n}\n\n\n//Step 4 Create and fill database.\nfunction step4 ($databasename, $newdatabasename) {\n\n   $host     = $_SESSION['db_access']['host'];\n   $user     = $_SESSION['db_access']['user'];\n   $password = $_SESSION['db_access']['password'];\n\n   //display the form to return to the previous step.\n   echo \"<h3>\".__('Initialization of the database').\"</h3>\";\n\n   function prev_form($host, $user, $password) {\n\n      echo \"<br><form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='db_host' value='\". $host .\"'>\";\n      echo \"<input type='hidden' name='db_user' value='\". $user .\"'>\";\n      echo \" <input type='hidden' name='db_pass' value='\". rawurlencode($password) .\"'>\";\n      echo \"<input type='hidden' name='update' value='no'>\";\n      echo \"<input type='hidden' name='install' value='Etape_2'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __s('Back').\"'></p>\";\n      Html::closeForm();\n   }\n\n   //Display the form to go to the next page\n   function next_form() {\n\n      echo \"<br><form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='install' value='Etape_4'>\";\n      echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n             __('Continue').\"'></p>\";\n      Html::closeForm();\n   }\n\n   //create security key\n   $glpikey = new GLPIKey();\n   $secured = $glpikey->keyExists();\n   if (!$secured) {\n      $secured = $glpikey->generate();\n   }\n\n   if (!$secured) {\n      echo \"<p><strong>\".__('Security key cannot be generated!').\"</strong></p>\";\n      prev_form($host, $user, $password);\n      return;\n   }\n\n   //Check if the port is in url\n   $hostport = explode(\":\", $host);\n   if (count($hostport) < 2) {\n      $link = new mysqli($hostport[0], $user, $password);\n   } else {\n      $link = new mysqli($hostport[0], $user, $password, '', $hostport[1]);\n   }\n\n   $databasename    = $link->real_escape_string($databasename);\n   $newdatabasename = $link->real_escape_string($newdatabasename);\n\n   if (!empty($databasename)) { // use db already created\n      $DB_selected = $link->select_db($databasename);\n\n      if (!$DB_selected) {\n         echo __('Impossible to use the database:');\n         echo \"<br>\".sprintf(__('The server answered: %s'), $link->error);\n         prev_form($host, $user, $password);\n\n      } else {\n         if (DBConnection::createMainConfig($host, $user, $password, $databasename)) {\n            Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n            echo \"<p>\".__('OK - database was initialized').\"</p>\";\n\n            next_form();\n\n         } else { // can't create config_db file\n            echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n            prev_form($host, $user, $password);\n         }\n      }\n\n   } else if (!empty($newdatabasename)) { // create new db\n      // Try to connect\n      if ($link->select_db($newdatabasename)) {\n         echo \"<p>\".__('Database created').\"</p>\";\n\n         if (DBConnection::createMainConfig($host, $user, $password, $newdatabasename)) {\n            Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n            echo \"<p>\".__('OK - database was initialized').\"</p>\";\n            next_form();\n\n         } else { // can't create config_db file\n            echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n            prev_form($host, $user, $password);\n         }\n\n      } else { // try to create the DB\n         if ($link->query(\"CREATE DATABASE IF NOT EXISTS `\".$newdatabasename.\"`\")) {\n            echo \"<p>\".__('Database created').\"</p>\";\n\n            if ($link->select_db($newdatabasename)\n                && DBConnection::createMainConfig($host, $user, $password, $newdatabasename)) {\n\n               Toolbox::createSchema($_SESSION[\"glpilanguage\"]);\n               echo \"<p>\".__('OK - database was initialized').\"</p>\";\n               next_form();\n\n            } else { // can't create config_db file\n               echo \"<p>\".__('Impossible to write the database setup file').\"</p>\";\n               prev_form($host, $user, $password);\n            }\n\n         } else { // can't create database\n            echo __('Error in creating database!');\n            echo \"<br>\".sprintf(__('The server answered: %s'), $link->error);\n            prev_form($host, $user, $password);\n         }\n      }\n\n   } else { // no db selected\n      echo \"<p>\".__(\"You didn't select a database!\"). \"</p>\";\n      //prev_form();\n      prev_form($host, $user, $password);\n   }\n\n   $link->close();\n\n}\n\n//send telemetry informations\nfunction step6() {\n   global $DB;\n   echo \"<h3>\".__('Collect data').\"</h3>\";\n\n   include_once(GLPI_ROOT . \"/inc/dbmysql.class.php\");\n   include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n   $DB = new DB();\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='install' value='Etape_5'>\";\n\n   echo Telemetry::showTelemetry();\n   echo Telemetry::showReference();\n\n   echo \"<p class='submit'><input type='submit' name='submit' class='submit' value='\".\n            __('Continue').\"'></p>\";\n   Html::closeForm();\n}\n\nfunction step7() {\n   echo \"<h3>\".__('One last thing before starting').\"</h3>\";\n\n   echo \"<form action='install.php' method='post'>\";\n   echo \"<input type='hidden' name='install' value='Etape_6'>\";\n\n   echo GLPINetwork::showInstallMessage();\n\n   echo \"<p class='submit'>\";\n   echo \"<a href='\".GLPI_NETWORK_SERVICES.\"' target='_blank' class='vsubmit'>\".\n            __('Donate').\"</a>&nbsp;\";\n   echo \"<input type='submit' name='submit' class='submit' value='\".\n            __('Continue').\"'>\";\n   echo \"</p>\";\n   Html::closeForm();\n}\n\n// finish installation\nfunction step8() {\n   include_once(GLPI_ROOT . \"/inc/dbmysql.class.php\");\n   include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n   $DB = new DB();\n\n   if (isset($_POST['send_stats'])) {\n      //user has accepted to send telemetry infos; activate cronjob\n      $DB->update(\n         'glpi_crontasks',\n         ['state' => 1],\n         ['name' => 'telemetry']\n      );\n   }\n\n   $url_base = str_replace(\"/install/install.php\", \"\", $_SERVER['HTTP_REFERER']);\n   $DB->update(\n      'glpi_configs',\n      ['value' => $DB->escape($url_base)], [\n         'context'   => 'core',\n         'name'      => 'url_base'\n      ]\n   );\n\n   $url_base_api = \"$url_base/apirest.php/\";\n   $DB->update(\n      'glpi_configs',\n      ['value' => $DB->escape($url_base_api)], [\n         'context'   => 'core',\n         'name'      => 'url_base_api'\n      ]\n   );\n\n   Session::destroy(); // Remove session data (debug mode for instance) set by web installation\n\n   echo \"<h2>\".__('The installation is finished').\"</h2>\";\n\n   echo \"<p>\".__('Default logins / passwords are:').\"</p>\";\n   echo \"<p><ul><li> \".__('glpi/glpi for the administrator account').\"</li>\";\n   echo \"<li>\".__('tech/tech for the technician account').\"</li>\";\n   echo \"<li>\".__('normal/normal for the normal account').\"</li>\";\n   echo \"<li>\".__('post-only/postonly for the postonly account').\"</li></ul></p>\";\n   echo \"<p>\".__('You can delete or modify these accounts as well as the initial data.').\"</p>\";\n   echo \"<p class='center'><a class='vsubmit' href='../index.php'>\".__('Use GLPI');\n   echo \"</a></p>\";\n}\n\n\nfunction update1($DBname) {\n\n   $host     = $_SESSION['db_access']['host'];\n   $user     = $_SESSION['db_access']['user'];\n   $password = $_SESSION['db_access']['password'];\n\n   if (DBConnection::createMainConfig($host, $user, $password, $DBname) && !empty($DBname)) {\n      $from_install = true;\n      include_once(GLPI_ROOT .\"/install/update.php\");\n\n   } else { // can't create config_db file\n      echo __(\"Can't create the database connection file, please verify file permissions.\");\n      echo \"<h3>\".__('Do you want to continue?').\"</h3>\";\n      echo \"<form action='install.php' method='post'>\";\n      echo \"<input type='hidden' name='update' value='yes'>\";\n      echo \"<p class='submit'><input type='hidden' name='install' value='Etape_0'>\";\n      echo \"<input type='submit' name='submit' class='submit' value=\\\"\".__('Continue').\"\\\">\";\n      echo \"</p>\";\n      Html::closeForm();\n   }\n}\n\n\n\n//------------Start of install script---------------------------\n\n\n// Use default session dir if not writable\nif (is_writable(GLPI_SESSION_DIR)) {\n   Session::setPath();\n}\n\nSession::start();\nerror_reporting(0); // we want to check system before affraid the user.\n\nif (isset($_POST[\"language\"])) {\n   $_SESSION[\"glpilanguage\"] = $_POST[\"language\"];\n}\n\nSession::loadLanguage('', false);\n\n/**\n * @since 0.84.2\n**/\nfunction checkConfigFile() {\n\n   if (file_exists(GLPI_CONFIG_DIR . \"/config_db.php\")) {\n      Html::redirect($CFG_GLPI['root_doc'] .\"/index.php\");\n      die();\n   }\n}\n\nif (!isset($_SESSION['can_process_install']) || !isset($_POST[\"install\"])) {\n   $_SESSION = [];\n\n   checkConfigFile();\n\n   // Add a flag that will be used to validate that installation can be processed.\n   // This flag is put here just after checking that DB config file does not exist yet.\n   // It is mandatory to validate that `Etape_4` to `Etape_6` are not used outside installation process\n   // to change GLPI base URL without even being authenticated.\n   $_SESSION['can_process_install'] = true;\n\n   header_html(\"Select your language\");\n   choose_language();\n\n} else {\n   // Check valid Referer :\n   Toolbox::checkValidReferer();\n   // Check CSRF: ensure nobody strap first page that checks if config file exists ...\n   Session::checkCSRF($_POST);\n\n   // DB clean\n   if (isset($_POST[\"db_pass\"])) {\n      $_POST[\"db_pass\"] = stripslashes($_POST[\"db_pass\"]);\n      $_POST[\"db_pass\"] = rawurldecode($_POST[\"db_pass\"]);\n      $_POST[\"db_pass\"] = stripslashes($_POST[\"db_pass\"]);\n   }\n\n   switch ($_POST[\"install\"]) {\n      case \"lang_select\" : // lang ok, go accept licence\n         checkConfigFile();\n         header_html(SoftwareLicense::getTypeName(1));\n         acceptLicense();\n         break;\n\n      case \"License\" : // licence  ok, go choose installation or Update\n         checkConfigFile();\n         header_html(__('Beginning of the installation'));\n         step0();\n         break;\n\n      case \"Etape_0\" : // choice ok , go check system\n         checkConfigFile();\n         //TRANS %s is step number\n         header_html(sprintf(__('Step %d'), 0));\n         $_SESSION[\"Test_session_GLPI\"] = 1;\n         step1($_POST[\"update\"]);\n         break;\n\n      case \"Etape_1\" : // check ok, go import mysql settings.\n         checkConfigFile();\n         // check system ok, we can use specific parameters for debug\n         Toolbox::setDebugMode(Session::DEBUG_MODE, 0, 0, 1);\n\n         header_html(sprintf(__('Step %d'), 1));\n         step2($_POST[\"update\"]);\n         break;\n\n      case \"Etape_2\" : // mysql settings ok, go test mysql settings and select database.\n         checkConfigFile();\n         header_html(sprintf(__('Step %d'), 2));\n         step3($_POST[\"db_host\"], $_POST[\"db_user\"], $_POST[\"db_pass\"], $_POST[\"update\"]);\n         break;\n\n      case \"Etape_3\" : // Create and fill database\n         checkConfigFile();\n         header_html(sprintf(__('Step %d'), 3));\n         if (empty($_POST[\"databasename\"])) {\n            $_POST[\"databasename\"] = \"\";\n         }\n         if (empty($_POST[\"newdatabasename\"])) {\n            $_POST[\"newdatabasename\"] = \"\";\n         }\n         step4($_POST[\"databasename\"],\n               $_POST[\"newdatabasename\"]);\n         break;\n\n      case \"Etape_4\" : // send telemetry informations\n         header_html(sprintf(__('Step %d'), 4));\n         step6();\n         break;\n\n      case \"Etape_5\" : // finish installation\n         header_html(sprintf(__('Step %d'), 5));\n         step7();\n         break;\n\n      case \"Etape_6\" : // finish installation\n         header_html(sprintf(__('Step %d'), 6));\n         step8();\n         break;\n\n      case \"update_1\" :\n         checkConfigFile();\n         if (empty($_POST[\"databasename\"])) {\n            $_POST[\"databasename\"] = \"\";\n         }\n         update1($_POST[\"databasename\"]);\n         break;\n   }\n}\nfooter_html();\n"], "filenames": ["install/install.php"], "buggy_code_start_loc": [601], "buggy_code_end_loc": [604], "fixing_code_start_loc": [601], "fixing_code_end_loc": [612], "type": "CWE-79", "message": "In GLPI before version 9.5.2, the `install/install.php` endpoint insecurely stores user input into the database as `url_base` and `url_base_api`. These settings are referenced throughout the application and allow for vulnerabilities like Cross-Site Scripting and Insecure Redirection Since authentication is not required to perform these changes,anyone could point these fields at malicious websites or form input in a way to trigger XSS. Leveraging JavaScript it's possible to steal cookies, perform actions as the user, etc. The issue is patched in version 9.5.2.", "other": {"cve": {"id": "CVE-2020-15177", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-07T19:15:12.797", "lastModified": "2020-10-16T15:39:52.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In GLPI before version 9.5.2, the `install/install.php` endpoint insecurely stores user input into the database as `url_base` and `url_base_api`. These settings are referenced throughout the application and allow for vulnerabilities like Cross-Site Scripting and Insecure Redirection Since authentication is not required to perform these changes,anyone could point these fields at malicious websites or form input in a way to trigger XSS. Leveraging JavaScript it's possible to steal cookies, perform actions as the user, etc. The issue is patched in version 9.5.2."}, {"lang": "es", "value": "En GLPI versiones anteriores a 9.5.2, el endpoint \"install/install.php\" almacena de forma no segura la entrada del usuario en la base de datos como \"url_base\" y \"url_base_api\".&#xa0;Se hace referencia a estas configuraciones en toda la aplicaci\u00f3n y permiten vulnerabilidades como Cross-Site Scripting y Redireccionamiento No Seguro. Dado que no se requiere autenticaci\u00f3n para realizar estos cambios, cualquiera podr\u00eda apuntar estos campos a sitios web maliciosos o ingresar datos de formulario para desencadenar un XSS.&#xa0;Aprovechando JavaScript es posible robar cookies, realizar acciones como el usuario, etc. El problema est\u00e1 parcheado en la versi\u00f3n 9.5.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.5.2", "matchCriteriaId": "4FDDC1DB-791A-495C-84D1-110B95394022"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/a8109d4ee970a222faf48cf48fae2d2f06465796", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-prvh-9m4h-4m79", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/a8109d4ee970a222faf48cf48fae2d2f06465796"}}