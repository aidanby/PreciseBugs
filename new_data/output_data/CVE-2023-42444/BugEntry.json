{"buggy_code": ["// Copyright (C) 2017 1aim GmbH\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nuse nom::{self, IResult, AsChar, error::{make_error, ErrorKind}, character::complete::*, bytes::complete::*, combinator::*, multi::*};\nuse fnv::FnvHashMap;\n\nuse crate::parser::helper::*;\n\npub fn phone_number(i: &str) -> IResult<&str, Number> {\n\tparse! { i =>\n\t\topt(tag_no_case(\"Tel:\"));\n\t\tlet prefix = opt(prefix);\n\t\tlet national = take_while1(number);\n\t\tcheck;\n\t\tlet params = opt(parameters);\n\t};\n\n\tOk((i, Number {\n\t\tnational: (*national).into(),\n\n\t\tprefix: prefix.or_else(||\n\t\t\tparams.as_ref()\n\t\t\t\t.and_then(|m| m.get(\"phone-context\"))\n\t\t\t\t.map(|&s| if s.as_bytes()[0] == b'+' { &s[1 ..] } else { &s }))\n\t\t\t.map(|cs| cs.into()),\n\n\t\textension: params.as_ref()\n\t\t\t.and_then(|m| m.get(\"ext\"))\n\t\t\t.map(|&cs| cs.into()),\n\n\t\t.. Default::default()\n\t}))\n}\n\nfn prefix(i: &str) -> IResult<&str, &str> {\n\tparse! { i =>\n\t\tchar('+');\n\t\ttake_till1(separator)\n\t}\n}\n\nfn parameters(i: &str) -> IResult<&str, FnvHashMap<&str, &str>> {\n\tparse! { i =>\n\t\tlet params = many1(parameter);\n\t};\n\n\tOk((i, params.into_iter().collect()))\n}\n\nfn parameter(i: &str) -> IResult<&str, (&str, &str)> {\n\tparse! { i =>\n\t\tchar(';');\n\t\tlet key = take_while(pname);\n\t\tchar('=');\n\t\tlet value = take_while(pchar);\n\t};\n\n\tOk((i, (key, value)))\n}\n\nfn check(i: &str) -> IResult<&str, ()> {\n\tif i.is_empty() || i.as_bytes()[0] == b';' {\n\t\tOk((i, ()))\n\t}\n\telse {\n\t\tErr(nom::Err::Error(make_error(i, ErrorKind::Tag)))\n\t}\n}\n\nfn pname(c: char) -> bool {\n\tc.is_alphanum() || c == '-'\n}\n\nfn pchar(c: char) -> bool {\n\tparameter_unreserved(c) || unreserved(c)\n}\n\nfn number(c: char) -> bool {\n\tdigit(c) || separator(c)\n}\n\nfn digit(c: char) -> bool {\n\tc.is_wide_digit() || c.is_hex_digit()\n}\n\nfn separator(c: char) -> bool {\n\tc == '-' || c == '.' || c == '(' || c == ')'\n}\n\nfn unreserved(c: char) -> bool {\n\tc.is_alphanum() || mark(c)\n}\n\nfn parameter_unreserved(c: char) -> bool {\n\tc == '[' || c == ']' || c == '/' || c == ':' || c == '&' || c == '+' || c == '$'\n}\n\nfn mark(c: char) -> bool {\n\tc == '-' ||  c == '_' || c == '.' || c == '!' || c == '~' || c == '*' || c == '\\'' || c == '(' || c == ')'\n}\n\n#[cfg(test)]\nmod test {\n\tuse crate::parser::rfc3966;\n\tuse crate::parser::helper::*;\n\n\t#[test]\n\tfn phone_number() {\n\t\tassert_eq!(rfc3966::phone_number(\"tel:2034567890;ext=456;phone-context=+44\").unwrap().1,\n\t\t\tNumber {\n\t\t\t\tnational:  \"2034567890\".into(),\n\t\t\t\tprefix:    Some(\"44\".into()),\n\t\t\t\textension: Some(\"456\".into()),\n\n\t\t\t\t.. Default::default()\n\t\t\t});\n\n\t\tassert_eq!(rfc3966::phone_number(\"tel:+64-3-331-6005;ext=1235\").unwrap().1,\n\t\t\tNumber {\n\t\t\t\tnational:  \"-3-331-6005\".into(),\n\t\t\t\tprefix:    Some(\"64\".into()),\n\t\t\t\textension: Some(\"1235\".into()),\n\n\t\t\t\t.. Default::default()\n\t\t\t});\n\t}\n}\n"], "fixing_code": ["// Copyright (C) 2017 1aim GmbH\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nuse nom::{self, IResult, AsChar, error::{make_error, ErrorKind}, character::complete::*, bytes::complete::*, combinator::*, multi::*};\nuse fnv::FnvHashMap;\n\nuse crate::parser::helper::*;\n\npub fn phone_number(i: &str) -> IResult<&str, Number> {\n\tparse! { i =>\n\t\topt(tag_no_case(\"Tel:\"));\n\t\tlet prefix = opt(prefix);\n\t\tlet national = take_while1(number);\n\t\tcheck;\n\t\tlet params = opt(parameters);\n\t};\n\n\tOk((i, Number {\n\t\tnational: (*national).into(),\n\n\t\tprefix: prefix.or_else(||\n\t\t\tparams.as_ref()\n\t\t\t\t.and_then(|m| m.get(\"phone-context\"))\n\t\t\t\t.map(|&s| s.strip_prefix('+').unwrap_or(s)))\n\t\t\t.map(|cs| cs.into()),\n\n\t\textension: params.as_ref()\n\t\t\t.and_then(|m| m.get(\"ext\"))\n\t\t\t.map(|&cs| cs.into()),\n\n\t\t.. Default::default()\n\t}))\n}\n\nfn prefix(i: &str) -> IResult<&str, &str> {\n\tparse! { i =>\n\t\tchar('+');\n\t\ttake_till1(separator)\n\t}\n}\n\nfn parameters(i: &str) -> IResult<&str, FnvHashMap<&str, &str>> {\n\tparse! { i =>\n\t\tlet params = many1(parameter);\n\t};\n\n\tOk((i, params.into_iter().collect()))\n}\n\nfn parameter(i: &str) -> IResult<&str, (&str, &str)> {\n\tparse! { i =>\n\t\tchar(';');\n\t\tlet key = take_while(pname);\n\t\tchar('=');\n\t\tlet value = take_while(pchar);\n\t};\n\n\tOk((i, (key, value)))\n}\n\nfn check(i: &str) -> IResult<&str, ()> {\n\tif i.is_empty() || i.as_bytes()[0] == b';' {\n\t\tOk((i, ()))\n\t}\n\telse {\n\t\tErr(nom::Err::Error(make_error(i, ErrorKind::Tag)))\n\t}\n}\n\nfn pname(c: char) -> bool {\n\tc.is_alphanum() || c == '-'\n}\n\nfn pchar(c: char) -> bool {\n\tparameter_unreserved(c) || unreserved(c)\n}\n\nfn number(c: char) -> bool {\n\tdigit(c) || separator(c)\n}\n\nfn digit(c: char) -> bool {\n\tc.is_wide_digit() || c.is_hex_digit()\n}\n\nfn separator(c: char) -> bool {\n\tc == '-' || c == '.' || c == '(' || c == ')'\n}\n\nfn unreserved(c: char) -> bool {\n\tc.is_alphanum() || mark(c)\n}\n\nfn parameter_unreserved(c: char) -> bool {\n\tc == '[' || c == ']' || c == '/' || c == ':' || c == '&' || c == '+' || c == '$'\n}\n\nfn mark(c: char) -> bool {\n\tc == '-' ||  c == '_' || c == '.' || c == '!' || c == '~' || c == '*' || c == '\\'' || c == '(' || c == ')'\n}\n\n#[cfg(test)]\nmod test {\n\tuse crate::parser::rfc3966;\n\tuse crate::parser::helper::*;\n\n\t#[test]\n\tfn phone_number() {\n\t\tassert_eq!(rfc3966::phone_number(\"tel:2034567890;ext=456;phone-context=+44\").unwrap().1,\n\t\t\tNumber {\n\t\t\t\tnational:  \"2034567890\".into(),\n\t\t\t\tprefix:    Some(\"44\".into()),\n\t\t\t\textension: Some(\"456\".into()),\n\n\t\t\t\t.. Default::default()\n\t\t\t});\n\n\t\tassert_eq!(rfc3966::phone_number(\"tel:+64-3-331-6005;ext=1235\").unwrap().1,\n\t\t\tNumber {\n\t\t\t\tnational:  \"-3-331-6005\".into(),\n\t\t\t\tprefix:    Some(\"64\".into()),\n\t\t\t\textension: Some(\"1235\".into()),\n\n\t\t\t\t.. Default::default()\n\t\t\t});\n\t}\n}\n"], "filenames": ["src/parser/rfc3966.rs"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [36], "fixing_code_start_loc": [35], "fixing_code_end_loc": [36], "type": "CWE-1284", "message": "phonenumber is a library for parsing, formatting and validating international phone numbers. Prior to versions `0.3.3+8.13.9` and `0.2.5+8.11.3`, the phonenumber parsing code may panic due to a panic-guarded out-of-bounds access on the phonenumber string. In a typical deployment of `rust-phonenumber`, this may get triggered by feeding a maliciously crafted phonenumber over the network, specifically the string `.;phone-context=`. Versions `0.3.3+8.13.9` and `0.2.5+8.11.3` contain a patch for this issue. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-42444", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-19T15:15:56.660", "lastModified": "2023-09-22T19:22:42.097", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phonenumber is a library for parsing, formatting and validating international phone numbers. Prior to versions `0.3.3+8.13.9` and `0.2.5+8.11.3`, the phonenumber parsing code may panic due to a panic-guarded out-of-bounds access on the phonenumber string. In a typical deployment of `rust-phonenumber`, this may get triggered by feeding a maliciously crafted phonenumber over the network, specifically the string `.;phone-context=`. Versions `0.3.3+8.13.9` and `0.2.5+8.11.3` contain a patch for this issue. There are no known workarounds."}, {"lang": "es", "value": "Phonenumber es una librer\u00eda para analizar, formatear y validar n\u00fameros de tel\u00e9fono internacionales. Antes de las versiones `0.3.3+8.13.9` y `0.2.5+8.11.3`, el c\u00f3digo parseado de phonenumber pod\u00eda entrar en p\u00e1nico debido a un acceso fuera de los l\u00edmites protegido contra el p\u00e1nico en la cadena phonenumber. En una implementaci\u00f3n t\u00edpica de `rust-phonenumber`, esto puede desencadenarse al introducir un phonenumber creado con fines malintencionados a trav\u00e9s de la red, espec\u00edficamente la cadena `.;phone-context=`. Las versiones `0.3.3+8.13.9` y `0.2.5+8.11.3` contienen un parche para este problema. No se conocen workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1284"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1284"}, {"lang": "en", "value": "CWE-248"}, {"lang": "en", "value": "CWE-392"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:whisperfish:phonenumber:*:*:*:*:*:rust:*:*", "versionEndExcluding": "0.2.5\\+8.11.3", "matchCriteriaId": "43C3C6E2-A892-4A2B-BABF-1792410DA003"}, {"vulnerable": true, "criteria": "cpe:2.3:a:whisperfish:phonenumber:*:*:*:*:*:rust:*:*", "versionStartIncluding": "0.3.0\\+8.12.9", "versionEndExcluding": "0.3.3\\+8.13.9", "matchCriteriaId": "2472D45E-43EB-480B-B550-66DC11713F8F"}]}]}], "references": [{"url": "https://github.com/whisperfish/rust-phonenumber/commit/2dd44be94539c051b4dee55d1d9d349bd7bedde6", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/whisperfish/rust-phonenumber/commit/bea8e732b9cada617ede5cf51663dba183747f71", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/whisperfish/rust-phonenumber/security/advisories/GHSA-whhr-7f2w-qqj2", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/whisperfish/rust-phonenumber/commit/2dd44be94539c051b4dee55d1d9d349bd7bedde6"}}