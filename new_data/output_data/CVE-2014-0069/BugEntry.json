{"buggy_code": ["/*\n *   fs/cifs/file.c\n *\n *   vfs operations that deal with files\n *\n *   Copyright (C) International Business Machines  Corp., 2002,2010\n *   Author(s): Steve French (sfrench@us.ibm.com)\n *              Jeremy Allison (jra@samba.org)\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as published\n *   by the Free Software Foundation; either version 2.1 of the License, or\n *   (at your option) any later version.\n *\n *   This library is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n *   the GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public License\n *   along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\n#include <linux/fs.h>\n#include <linux/backing-dev.h>\n#include <linux/stat.h>\n#include <linux/fcntl.h>\n#include <linux/pagemap.h>\n#include <linux/pagevec.h>\n#include <linux/writeback.h>\n#include <linux/task_io_accounting_ops.h>\n#include <linux/delay.h>\n#include <linux/mount.h>\n#include <linux/slab.h>\n#include <linux/swap.h>\n#include <asm/div64.h>\n#include \"cifsfs.h\"\n#include \"cifspdu.h\"\n#include \"cifsglob.h\"\n#include \"cifsproto.h\"\n#include \"cifs_unicode.h\"\n#include \"cifs_debug.h\"\n#include \"cifs_fs_sb.h\"\n#include \"fscache.h\"\n\n\nstatic inline int cifs_convert_flags(unsigned int flags)\n{\n\tif ((flags & O_ACCMODE) == O_RDONLY)\n\t\treturn GENERIC_READ;\n\telse if ((flags & O_ACCMODE) == O_WRONLY)\n\t\treturn GENERIC_WRITE;\n\telse if ((flags & O_ACCMODE) == O_RDWR) {\n\t\t/* GENERIC_ALL is too much permission to request\n\t\t   can cause unnecessary access denied on create */\n\t\t/* return GENERIC_ALL; */\n\t\treturn (GENERIC_READ | GENERIC_WRITE);\n\t}\n\n\treturn (READ_CONTROL | FILE_WRITE_ATTRIBUTES | FILE_READ_ATTRIBUTES |\n\t\tFILE_WRITE_EA | FILE_APPEND_DATA | FILE_WRITE_DATA |\n\t\tFILE_READ_DATA);\n}\n\nstatic u32 cifs_posix_convert_flags(unsigned int flags)\n{\n\tu32 posix_flags = 0;\n\n\tif ((flags & O_ACCMODE) == O_RDONLY)\n\t\tposix_flags = SMB_O_RDONLY;\n\telse if ((flags & O_ACCMODE) == O_WRONLY)\n\t\tposix_flags = SMB_O_WRONLY;\n\telse if ((flags & O_ACCMODE) == O_RDWR)\n\t\tposix_flags = SMB_O_RDWR;\n\n\tif (flags & O_CREAT) {\n\t\tposix_flags |= SMB_O_CREAT;\n\t\tif (flags & O_EXCL)\n\t\t\tposix_flags |= SMB_O_EXCL;\n\t} else if (flags & O_EXCL)\n\t\tcifs_dbg(FYI, \"Application %s pid %d has incorrectly set O_EXCL flag but not O_CREAT on file open. Ignoring O_EXCL\\n\",\n\t\t\t current->comm, current->tgid);\n\n\tif (flags & O_TRUNC)\n\t\tposix_flags |= SMB_O_TRUNC;\n\t/* be safe and imply O_SYNC for O_DSYNC */\n\tif (flags & O_DSYNC)\n\t\tposix_flags |= SMB_O_SYNC;\n\tif (flags & O_DIRECTORY)\n\t\tposix_flags |= SMB_O_DIRECTORY;\n\tif (flags & O_NOFOLLOW)\n\t\tposix_flags |= SMB_O_NOFOLLOW;\n\tif (flags & O_DIRECT)\n\t\tposix_flags |= SMB_O_DIRECT;\n\n\treturn posix_flags;\n}\n\nstatic inline int cifs_get_disposition(unsigned int flags)\n{\n\tif ((flags & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL))\n\t\treturn FILE_CREATE;\n\telse if ((flags & (O_CREAT | O_TRUNC)) == (O_CREAT | O_TRUNC))\n\t\treturn FILE_OVERWRITE_IF;\n\telse if ((flags & O_CREAT) == O_CREAT)\n\t\treturn FILE_OPEN_IF;\n\telse if ((flags & O_TRUNC) == O_TRUNC)\n\t\treturn FILE_OVERWRITE;\n\telse\n\t\treturn FILE_OPEN;\n}\n\nint cifs_posix_open(char *full_path, struct inode **pinode,\n\t\t\tstruct super_block *sb, int mode, unsigned int f_flags,\n\t\t\t__u32 *poplock, __u16 *pnetfid, unsigned int xid)\n{\n\tint rc;\n\tFILE_UNIX_BASIC_INFO *presp_data;\n\t__u32 posix_flags = 0;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(sb);\n\tstruct cifs_fattr fattr;\n\tstruct tcon_link *tlink;\n\tstruct cifs_tcon *tcon;\n\n\tcifs_dbg(FYI, \"posix open %s\\n\", full_path);\n\n\tpresp_data = kzalloc(sizeof(FILE_UNIX_BASIC_INFO), GFP_KERNEL);\n\tif (presp_data == NULL)\n\t\treturn -ENOMEM;\n\n\ttlink = cifs_sb_tlink(cifs_sb);\n\tif (IS_ERR(tlink)) {\n\t\trc = PTR_ERR(tlink);\n\t\tgoto posix_open_ret;\n\t}\n\n\ttcon = tlink_tcon(tlink);\n\tmode &= ~current_umask();\n\n\tposix_flags = cifs_posix_convert_flags(f_flags);\n\trc = CIFSPOSIXCreate(xid, tcon, posix_flags, mode, pnetfid, presp_data,\n\t\t\t     poplock, full_path, cifs_sb->local_nls,\n\t\t\t     cifs_sb->mnt_cifs_flags &\n\t\t\t\t\tCIFS_MOUNT_MAP_SPECIAL_CHR);\n\tcifs_put_tlink(tlink);\n\n\tif (rc)\n\t\tgoto posix_open_ret;\n\n\tif (presp_data->Type == cpu_to_le32(-1))\n\t\tgoto posix_open_ret; /* open ok, caller does qpathinfo */\n\n\tif (!pinode)\n\t\tgoto posix_open_ret; /* caller does not need info */\n\n\tcifs_unix_basic_to_fattr(&fattr, presp_data, cifs_sb);\n\n\t/* get new inode and set it up */\n\tif (*pinode == NULL) {\n\t\tcifs_fill_uniqueid(sb, &fattr);\n\t\t*pinode = cifs_iget(sb, &fattr);\n\t\tif (!*pinode) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto posix_open_ret;\n\t\t}\n\t} else {\n\t\tcifs_fattr_to_inode(*pinode, &fattr);\n\t}\n\nposix_open_ret:\n\tkfree(presp_data);\n\treturn rc;\n}\n\nstatic int\ncifs_nt_open(char *full_path, struct inode *inode, struct cifs_sb_info *cifs_sb,\n\t     struct cifs_tcon *tcon, unsigned int f_flags, __u32 *oplock,\n\t     struct cifs_fid *fid, unsigned int xid)\n{\n\tint rc;\n\tint desired_access;\n\tint disposition;\n\tint create_options = CREATE_NOT_DIR;\n\tFILE_ALL_INFO *buf;\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct cifs_open_parms oparms;\n\n\tif (!server->ops->open)\n\t\treturn -ENOSYS;\n\n\tdesired_access = cifs_convert_flags(f_flags);\n\n/*********************************************************************\n *  open flag mapping table:\n *\n *\tPOSIX Flag            CIFS Disposition\n *\t----------            ----------------\n *\tO_CREAT               FILE_OPEN_IF\n *\tO_CREAT | O_EXCL      FILE_CREATE\n *\tO_CREAT | O_TRUNC     FILE_OVERWRITE_IF\n *\tO_TRUNC               FILE_OVERWRITE\n *\tnone of the above     FILE_OPEN\n *\n *\tNote that there is not a direct match between disposition\n *\tFILE_SUPERSEDE (ie create whether or not file exists although\n *\tO_CREAT | O_TRUNC is similar but truncates the existing\n *\tfile rather than creating a new file as FILE_SUPERSEDE does\n *\t(which uses the attributes / metadata passed in on open call)\n *?\n *?  O_SYNC is a reasonable match to CIFS writethrough flag\n *?  and the read write flags match reasonably.  O_LARGEFILE\n *?  is irrelevant because largefile support is always used\n *?  by this client. Flags O_APPEND, O_DIRECT, O_DIRECTORY,\n *\t O_FASYNC, O_NOFOLLOW, O_NONBLOCK need further investigation\n *********************************************************************/\n\n\tdisposition = cifs_get_disposition(f_flags);\n\n\t/* BB pass O_SYNC flag through on file attributes .. BB */\n\n\tbuf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\tif (backup_cred(cifs_sb))\n\t\tcreate_options |= CREATE_OPEN_BACKUP_INTENT;\n\n\toparms.tcon = tcon;\n\toparms.cifs_sb = cifs_sb;\n\toparms.desired_access = desired_access;\n\toparms.create_options = create_options;\n\toparms.disposition = disposition;\n\toparms.path = full_path;\n\toparms.fid = fid;\n\toparms.reconnect = false;\n\n\trc = server->ops->open(xid, &oparms, oplock, buf);\n\n\tif (rc)\n\t\tgoto out;\n\n\tif (tcon->unix_ext)\n\t\trc = cifs_get_inode_info_unix(&inode, full_path, inode->i_sb,\n\t\t\t\t\t      xid);\n\telse\n\t\trc = cifs_get_inode_info(&inode, full_path, buf, inode->i_sb,\n\t\t\t\t\t xid, fid);\n\nout:\n\tkfree(buf);\n\treturn rc;\n}\n\nstatic bool\ncifs_has_mand_locks(struct cifsInodeInfo *cinode)\n{\n\tstruct cifs_fid_locks *cur;\n\tbool has_locks = false;\n\n\tdown_read(&cinode->lock_sem);\n\tlist_for_each_entry(cur, &cinode->llist, llist) {\n\t\tif (!list_empty(&cur->locks)) {\n\t\t\thas_locks = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tup_read(&cinode->lock_sem);\n\treturn has_locks;\n}\n\nstruct cifsFileInfo *\ncifs_new_fileinfo(struct cifs_fid *fid, struct file *file,\n\t\t  struct tcon_link *tlink, __u32 oplock)\n{\n\tstruct dentry *dentry = file->f_path.dentry;\n\tstruct inode *inode = dentry->d_inode;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifsFileInfo *cfile;\n\tstruct cifs_fid_locks *fdlocks;\n\tstruct cifs_tcon *tcon = tlink_tcon(tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\n\tcfile = kzalloc(sizeof(struct cifsFileInfo), GFP_KERNEL);\n\tif (cfile == NULL)\n\t\treturn cfile;\n\n\tfdlocks = kzalloc(sizeof(struct cifs_fid_locks), GFP_KERNEL);\n\tif (!fdlocks) {\n\t\tkfree(cfile);\n\t\treturn NULL;\n\t}\n\n\tINIT_LIST_HEAD(&fdlocks->locks);\n\tfdlocks->cfile = cfile;\n\tcfile->llist = fdlocks;\n\tdown_write(&cinode->lock_sem);\n\tlist_add(&fdlocks->llist, &cinode->llist);\n\tup_write(&cinode->lock_sem);\n\n\tcfile->count = 1;\n\tcfile->pid = current->tgid;\n\tcfile->uid = current_fsuid();\n\tcfile->dentry = dget(dentry);\n\tcfile->f_flags = file->f_flags;\n\tcfile->invalidHandle = false;\n\tcfile->tlink = cifs_get_tlink(tlink);\n\tINIT_WORK(&cfile->oplock_break, cifs_oplock_break);\n\tmutex_init(&cfile->fh_mutex);\n\n\tcifs_sb_active(inode->i_sb);\n\n\t/*\n\t * If the server returned a read oplock and we have mandatory brlocks,\n\t * set oplock level to None.\n\t */\n\tif (server->ops->is_read_op(oplock) && cifs_has_mand_locks(cinode)) {\n\t\tcifs_dbg(FYI, \"Reset oplock val from read to None due to mand locks\\n\");\n\t\toplock = 0;\n\t}\n\n\tspin_lock(&cifs_file_list_lock);\n\tif (fid->pending_open->oplock != CIFS_OPLOCK_NO_CHANGE && oplock)\n\t\toplock = fid->pending_open->oplock;\n\tlist_del(&fid->pending_open->olist);\n\n\tfid->purge_cache = false;\n\tserver->ops->set_fid(cfile, fid, oplock);\n\n\tlist_add(&cfile->tlist, &tcon->openFileList);\n\t/* if readable file instance put first in list*/\n\tif (file->f_mode & FMODE_READ)\n\t\tlist_add(&cfile->flist, &cinode->openFileList);\n\telse\n\t\tlist_add_tail(&cfile->flist, &cinode->openFileList);\n\tspin_unlock(&cifs_file_list_lock);\n\n\tif (fid->purge_cache)\n\t\tcifs_invalidate_mapping(inode);\n\n\tfile->private_data = cfile;\n\treturn cfile;\n}\n\nstruct cifsFileInfo *\ncifsFileInfo_get(struct cifsFileInfo *cifs_file)\n{\n\tspin_lock(&cifs_file_list_lock);\n\tcifsFileInfo_get_locked(cifs_file);\n\tspin_unlock(&cifs_file_list_lock);\n\treturn cifs_file;\n}\n\n/*\n * Release a reference on the file private data. This may involve closing\n * the filehandle out on the server. Must be called without holding\n * cifs_file_list_lock.\n */\nvoid cifsFileInfo_put(struct cifsFileInfo *cifs_file)\n{\n\tstruct inode *inode = cifs_file->dentry->d_inode;\n\tstruct cifs_tcon *tcon = tlink_tcon(cifs_file->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(inode);\n\tstruct super_block *sb = inode->i_sb;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(sb);\n\tstruct cifsLockInfo *li, *tmp;\n\tstruct cifs_fid fid;\n\tstruct cifs_pending_open open;\n\n\tspin_lock(&cifs_file_list_lock);\n\tif (--cifs_file->count > 0) {\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\treturn;\n\t}\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &fid);\n\n\t/* store open in pending opens to make sure we don't miss lease break */\n\tcifs_add_pending_open_locked(&fid, cifs_file->tlink, &open);\n\n\t/* remove it from the lists */\n\tlist_del(&cifs_file->flist);\n\tlist_del(&cifs_file->tlist);\n\n\tif (list_empty(&cifsi->openFileList)) {\n\t\tcifs_dbg(FYI, \"closing last open instance for inode %p\\n\",\n\t\t\t cifs_file->dentry->d_inode);\n\t\t/*\n\t\t * In strict cache mode we need invalidate mapping on the last\n\t\t * close  because it may cause a error when we open this file\n\t\t * again and get at least level II oplock.\n\t\t */\n\t\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_STRICT_IO)\n\t\t\tCIFS_I(inode)->invalid_mapping = true;\n\t\tcifs_set_oplock_level(cifsi, 0);\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\n\tcancel_work_sync(&cifs_file->oplock_break);\n\n\tif (!tcon->need_reconnect && !cifs_file->invalidHandle) {\n\t\tstruct TCP_Server_Info *server = tcon->ses->server;\n\t\tunsigned int xid;\n\n\t\txid = get_xid();\n\t\tif (server->ops->close)\n\t\t\tserver->ops->close(xid, tcon, &cifs_file->fid);\n\t\t_free_xid(xid);\n\t}\n\n\tcifs_del_pending_open(&open);\n\n\t/*\n\t * Delete any outstanding lock records. We'll lose them when the file\n\t * is closed anyway.\n\t */\n\tdown_write(&cifsi->lock_sem);\n\tlist_for_each_entry_safe(li, tmp, &cifs_file->llist->locks, llist) {\n\t\tlist_del(&li->llist);\n\t\tcifs_del_lock_waiters(li);\n\t\tkfree(li);\n\t}\n\tlist_del(&cifs_file->llist->llist);\n\tkfree(cifs_file->llist);\n\tup_write(&cifsi->lock_sem);\n\n\tcifs_put_tlink(cifs_file->tlink);\n\tdput(cifs_file->dentry);\n\tcifs_sb_deactive(sb);\n\tkfree(cifs_file);\n}\n\nint cifs_open(struct inode *inode, struct file *file)\n\n{\n\tint rc = -EACCES;\n\tunsigned int xid;\n\t__u32 oplock;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_tcon *tcon;\n\tstruct tcon_link *tlink;\n\tstruct cifsFileInfo *cfile = NULL;\n\tchar *full_path = NULL;\n\tbool posix_open_ok = false;\n\tstruct cifs_fid fid;\n\tstruct cifs_pending_open open;\n\n\txid = get_xid();\n\n\tcifs_sb = CIFS_SB(inode->i_sb);\n\ttlink = cifs_sb_tlink(cifs_sb);\n\tif (IS_ERR(tlink)) {\n\t\tfree_xid(xid);\n\t\treturn PTR_ERR(tlink);\n\t}\n\ttcon = tlink_tcon(tlink);\n\tserver = tcon->ses->server;\n\n\tfull_path = build_path_from_dentry(file->f_path.dentry);\n\tif (full_path == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tcifs_dbg(FYI, \"inode = 0x%p file flags are 0x%x for %s\\n\",\n\t\t inode, file->f_flags, full_path);\n\n\tif (server->oplocks)\n\t\toplock = REQ_OPLOCK;\n\telse\n\t\toplock = 0;\n\n\tif (!tcon->broken_posix_open && tcon->unix_ext &&\n\t    cap_unix(tcon->ses) && (CIFS_UNIX_POSIX_PATH_OPS_CAP &\n\t\t\t\tle64_to_cpu(tcon->fsUnixInfo.Capability))) {\n\t\t/* can not refresh inode info since size could be stale */\n\t\trc = cifs_posix_open(full_path, &inode, inode->i_sb,\n\t\t\t\tcifs_sb->mnt_file_mode /* ignored */,\n\t\t\t\tfile->f_flags, &oplock, &fid.netfid, xid);\n\t\tif (rc == 0) {\n\t\t\tcifs_dbg(FYI, \"posix open succeeded\\n\");\n\t\t\tposix_open_ok = true;\n\t\t} else if ((rc == -EINVAL) || (rc == -EOPNOTSUPP)) {\n\t\t\tif (tcon->ses->serverNOS)\n\t\t\t\tcifs_dbg(VFS, \"server %s of type %s returned unexpected error on SMB posix open, disabling posix open support. Check if server update available.\\n\",\n\t\t\t\t\t tcon->ses->serverName,\n\t\t\t\t\t tcon->ses->serverNOS);\n\t\t\ttcon->broken_posix_open = true;\n\t\t} else if ((rc != -EIO) && (rc != -EREMOTE) &&\n\t\t\t (rc != -EOPNOTSUPP)) /* path not found or net err */\n\t\t\tgoto out;\n\t\t/*\n\t\t * Else fallthrough to retry open the old way on network i/o\n\t\t * or DFS errors.\n\t\t */\n\t}\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &fid);\n\n\tcifs_add_pending_open(&fid, tlink, &open);\n\n\tif (!posix_open_ok) {\n\t\tif (server->ops->get_lease_key)\n\t\t\tserver->ops->get_lease_key(inode, &fid);\n\n\t\trc = cifs_nt_open(full_path, inode, cifs_sb, tcon,\n\t\t\t\t  file->f_flags, &oplock, &fid, xid);\n\t\tif (rc) {\n\t\t\tcifs_del_pending_open(&open);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tcfile = cifs_new_fileinfo(&fid, file, tlink, oplock);\n\tif (cfile == NULL) {\n\t\tif (server->ops->close)\n\t\t\tserver->ops->close(xid, tcon, &fid);\n\t\tcifs_del_pending_open(&open);\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tcifs_fscache_set_inode_cookie(inode, file);\n\n\tif ((oplock & CIFS_CREATE_ACTION) && !posix_open_ok && tcon->unix_ext) {\n\t\t/*\n\t\t * Time to set mode which we can not set earlier due to\n\t\t * problems creating new read-only files.\n\t\t */\n\t\tstruct cifs_unix_set_info_args args = {\n\t\t\t.mode\t= inode->i_mode,\n\t\t\t.uid\t= INVALID_UID, /* no change */\n\t\t\t.gid\t= INVALID_GID, /* no change */\n\t\t\t.ctime\t= NO_CHANGE_64,\n\t\t\t.atime\t= NO_CHANGE_64,\n\t\t\t.mtime\t= NO_CHANGE_64,\n\t\t\t.device\t= 0,\n\t\t};\n\t\tCIFSSMBUnixSetFileInfo(xid, tcon, &args, fid.netfid,\n\t\t\t\t       cfile->pid);\n\t}\n\nout:\n\tkfree(full_path);\n\tfree_xid(xid);\n\tcifs_put_tlink(tlink);\n\treturn rc;\n}\n\nstatic int cifs_push_posix_locks(struct cifsFileInfo *cfile);\n\n/*\n * Try to reacquire byte range locks that were released when session\n * to server was lost.\n */\nstatic int\ncifs_relock_file(struct cifsFileInfo *cfile)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\tdown_read(&cinode->lock_sem);\n\tif (cinode->can_cache_brlcks) {\n\t\t/* can cache locks - no need to relock */\n\t\tup_read(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\trc = cifs_push_posix_locks(cfile);\n\telse\n\t\trc = tcon->ses->server->ops->push_mand_locks(cfile);\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic int\ncifs_reopen_file(struct cifsFileInfo *cfile, bool can_flush)\n{\n\tint rc = -EACCES;\n\tunsigned int xid;\n\t__u32 oplock;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsInodeInfo *cinode;\n\tstruct inode *inode;\n\tchar *full_path = NULL;\n\tint desired_access;\n\tint disposition = FILE_OPEN;\n\tint create_options = CREATE_NOT_DIR;\n\tstruct cifs_open_parms oparms;\n\n\txid = get_xid();\n\tmutex_lock(&cfile->fh_mutex);\n\tif (!cfile->invalidHandle) {\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\trc = 0;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tinode = cfile->dentry->d_inode;\n\tcifs_sb = CIFS_SB(inode->i_sb);\n\ttcon = tlink_tcon(cfile->tlink);\n\tserver = tcon->ses->server;\n\n\t/*\n\t * Can not grab rename sem here because various ops, including those\n\t * that already have the rename sem can end up causing writepage to get\n\t * called and if the server was down that means we end up here, and we\n\t * can never tell if the caller already has the rename_sem.\n\t */\n\tfull_path = build_path_from_dentry(cfile->dentry);\n\tif (full_path == NULL) {\n\t\trc = -ENOMEM;\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tcifs_dbg(FYI, \"inode = 0x%p file flags 0x%x for %s\\n\",\n\t\t inode, cfile->f_flags, full_path);\n\n\tif (tcon->ses->server->oplocks)\n\t\toplock = REQ_OPLOCK;\n\telse\n\t\toplock = 0;\n\n\tif (tcon->unix_ext && cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_POSIX_PATH_OPS_CAP &\n\t\t\t\tle64_to_cpu(tcon->fsUnixInfo.Capability))) {\n\t\t/*\n\t\t * O_CREAT, O_EXCL and O_TRUNC already had their effect on the\n\t\t * original open. Must mask them off for a reopen.\n\t\t */\n\t\tunsigned int oflags = cfile->f_flags &\n\t\t\t\t\t\t~(O_CREAT | O_EXCL | O_TRUNC);\n\n\t\trc = cifs_posix_open(full_path, NULL, inode->i_sb,\n\t\t\t\t     cifs_sb->mnt_file_mode /* ignored */,\n\t\t\t\t     oflags, &oplock, &cfile->fid.netfid, xid);\n\t\tif (rc == 0) {\n\t\t\tcifs_dbg(FYI, \"posix reopen succeeded\\n\");\n\t\t\toparms.reconnect = true;\n\t\t\tgoto reopen_success;\n\t\t}\n\t\t/*\n\t\t * fallthrough to retry open the old way on errors, especially\n\t\t * in the reconnect path it is important to retry hard\n\t\t */\n\t}\n\n\tdesired_access = cifs_convert_flags(cfile->f_flags);\n\n\tif (backup_cred(cifs_sb))\n\t\tcreate_options |= CREATE_OPEN_BACKUP_INTENT;\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &cfile->fid);\n\n\toparms.tcon = tcon;\n\toparms.cifs_sb = cifs_sb;\n\toparms.desired_access = desired_access;\n\toparms.create_options = create_options;\n\toparms.disposition = disposition;\n\toparms.path = full_path;\n\toparms.fid = &cfile->fid;\n\toparms.reconnect = true;\n\n\t/*\n\t * Can not refresh inode by passing in file_info buf to be returned by\n\t * ops->open and then calling get_inode_info with returned buf since\n\t * file might have write behind data that needs to be flushed and server\n\t * version of file size can be stale. If we knew for sure that inode was\n\t * not dirty locally we could do this.\n\t */\n\trc = server->ops->open(xid, &oparms, &oplock, NULL);\n\tif (rc == -ENOENT && oparms.reconnect == false) {\n\t\t/* durable handle timeout is expired - open the file again */\n\t\trc = server->ops->open(xid, &oparms, &oplock, NULL);\n\t\t/* indicate that we need to relock the file */\n\t\toparms.reconnect = true;\n\t}\n\n\tif (rc) {\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\tcifs_dbg(FYI, \"cifs_reopen returned 0x%x\\n\", rc);\n\t\tcifs_dbg(FYI, \"oplock: %d\\n\", oplock);\n\t\tgoto reopen_error_exit;\n\t}\n\nreopen_success:\n\tcfile->invalidHandle = false;\n\tmutex_unlock(&cfile->fh_mutex);\n\tcinode = CIFS_I(inode);\n\n\tif (can_flush) {\n\t\trc = filemap_write_and_wait(inode->i_mapping);\n\t\tmapping_set_error(inode->i_mapping, rc);\n\n\t\tif (tcon->unix_ext)\n\t\t\trc = cifs_get_inode_info_unix(&inode, full_path,\n\t\t\t\t\t\t      inode->i_sb, xid);\n\t\telse\n\t\t\trc = cifs_get_inode_info(&inode, full_path, NULL,\n\t\t\t\t\t\t inode->i_sb, xid, NULL);\n\t}\n\t/*\n\t * Else we are writing out data to server already and could deadlock if\n\t * we tried to flush data, and since we do not know if we have data that\n\t * would invalidate the current end of file on the server we can not go\n\t * to the server to get the new inode info.\n\t */\n\n\tserver->ops->set_fid(cfile, &cfile->fid, oplock);\n\tif (oparms.reconnect)\n\t\tcifs_relock_file(cfile);\n\nreopen_error_exit:\n\tkfree(full_path);\n\tfree_xid(xid);\n\treturn rc;\n}\n\nint cifs_close(struct inode *inode, struct file *file)\n{\n\tif (file->private_data != NULL) {\n\t\tcifsFileInfo_put(file->private_data);\n\t\tfile->private_data = NULL;\n\t}\n\n\t/* return code from the ->release op is always ignored */\n\treturn 0;\n}\n\nint cifs_closedir(struct inode *inode, struct file *file)\n{\n\tint rc = 0;\n\tunsigned int xid;\n\tstruct cifsFileInfo *cfile = file->private_data;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tchar *buf;\n\n\tcifs_dbg(FYI, \"Closedir inode = 0x%p\\n\", inode);\n\n\tif (cfile == NULL)\n\t\treturn rc;\n\n\txid = get_xid();\n\ttcon = tlink_tcon(cfile->tlink);\n\tserver = tcon->ses->server;\n\n\tcifs_dbg(FYI, \"Freeing private data in close dir\\n\");\n\tspin_lock(&cifs_file_list_lock);\n\tif (!cfile->srch_inf.endOfSearch && !cfile->invalidHandle) {\n\t\tcfile->invalidHandle = true;\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\tif (server->ops->close_dir)\n\t\t\trc = server->ops->close_dir(xid, tcon, &cfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t\tcifs_dbg(FYI, \"Closing uncompleted readdir with rc %d\\n\", rc);\n\t\t/* not much we can do if it fails anyway, ignore rc */\n\t\trc = 0;\n\t} else\n\t\tspin_unlock(&cifs_file_list_lock);\n\n\tbuf = cfile->srch_inf.ntwrk_buf_start;\n\tif (buf) {\n\t\tcifs_dbg(FYI, \"closedir free smb buf in srch struct\\n\");\n\t\tcfile->srch_inf.ntwrk_buf_start = NULL;\n\t\tif (cfile->srch_inf.smallBuf)\n\t\t\tcifs_small_buf_release(buf);\n\t\telse\n\t\t\tcifs_buf_release(buf);\n\t}\n\n\tcifs_put_tlink(cfile->tlink);\n\tkfree(file->private_data);\n\tfile->private_data = NULL;\n\t/* BB can we lock the filestruct while this is going on? */\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic struct cifsLockInfo *\ncifs_lock_init(__u64 offset, __u64 length, __u8 type)\n{\n\tstruct cifsLockInfo *lock =\n\t\tkmalloc(sizeof(struct cifsLockInfo), GFP_KERNEL);\n\tif (!lock)\n\t\treturn lock;\n\tlock->offset = offset;\n\tlock->length = length;\n\tlock->type = type;\n\tlock->pid = current->tgid;\n\tINIT_LIST_HEAD(&lock->blist);\n\tinit_waitqueue_head(&lock->block_q);\n\treturn lock;\n}\n\nvoid\ncifs_del_lock_waiters(struct cifsLockInfo *lock)\n{\n\tstruct cifsLockInfo *li, *tmp;\n\tlist_for_each_entry_safe(li, tmp, &lock->blist, blist) {\n\t\tlist_del_init(&li->blist);\n\t\twake_up(&li->block_q);\n\t}\n}\n\n#define CIFS_LOCK_OP\t0\n#define CIFS_READ_OP\t1\n#define CIFS_WRITE_OP\t2\n\n/* @rw_check : 0 - no op, 1 - read, 2 - write */\nstatic bool\ncifs_find_fid_lock_conflict(struct cifs_fid_locks *fdlocks, __u64 offset,\n\t\t\t    __u64 length, __u8 type, struct cifsFileInfo *cfile,\n\t\t\t    struct cifsLockInfo **conf_lock, int rw_check)\n{\n\tstruct cifsLockInfo *li;\n\tstruct cifsFileInfo *cur_cfile = fdlocks->cfile;\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\n\tlist_for_each_entry(li, &fdlocks->locks, llist) {\n\t\tif (offset + length <= li->offset ||\n\t\t    offset >= li->offset + li->length)\n\t\t\tcontinue;\n\t\tif (rw_check != CIFS_LOCK_OP && current->tgid == li->pid &&\n\t\t    server->ops->compare_fids(cfile, cur_cfile)) {\n\t\t\t/* shared lock prevents write op through the same fid */\n\t\t\tif (!(li->type & server->vals->shared_lock_type) ||\n\t\t\t    rw_check != CIFS_WRITE_OP)\n\t\t\t\tcontinue;\n\t\t}\n\t\tif ((type & server->vals->shared_lock_type) &&\n\t\t    ((server->ops->compare_fids(cfile, cur_cfile) &&\n\t\t     current->tgid == li->pid) || type == li->type))\n\t\t\tcontinue;\n\t\tif (conf_lock)\n\t\t\t*conf_lock = li;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool\ncifs_find_lock_conflict(struct cifsFileInfo *cfile, __u64 offset, __u64 length,\n\t\t\t__u8 type, struct cifsLockInfo **conf_lock,\n\t\t\tint rw_check)\n{\n\tbool rc = false;\n\tstruct cifs_fid_locks *cur;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\n\tlist_for_each_entry(cur, &cinode->llist, llist) {\n\t\trc = cifs_find_fid_lock_conflict(cur, offset, length, type,\n\t\t\t\t\t\t cfile, conf_lock, rw_check);\n\t\tif (rc)\n\t\t\tbreak;\n\t}\n\n\treturn rc;\n}\n\n/*\n * Check if there is another lock that prevents us to set the lock (mandatory\n * style). If such a lock exists, update the flock structure with its\n * properties. Otherwise, set the flock type to F_UNLCK if we can cache brlocks\n * or leave it the same if we can't. Returns 0 if we don't need to request to\n * the server or 1 otherwise.\n */\nstatic int\ncifs_lock_test(struct cifsFileInfo *cfile, __u64 offset, __u64 length,\n\t       __u8 type, struct file_lock *flock)\n{\n\tint rc = 0;\n\tstruct cifsLockInfo *conf_lock;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\tbool exist;\n\n\tdown_read(&cinode->lock_sem);\n\n\texist = cifs_find_lock_conflict(cfile, offset, length, type,\n\t\t\t\t\t&conf_lock, CIFS_LOCK_OP);\n\tif (exist) {\n\t\tflock->fl_start = conf_lock->offset;\n\t\tflock->fl_end = conf_lock->offset + conf_lock->length - 1;\n\t\tflock->fl_pid = conf_lock->pid;\n\t\tif (conf_lock->type & server->vals->shared_lock_type)\n\t\t\tflock->fl_type = F_RDLCK;\n\t\telse\n\t\t\tflock->fl_type = F_WRLCK;\n\t} else if (!cinode->can_cache_brlcks)\n\t\trc = 1;\n\telse\n\t\tflock->fl_type = F_UNLCK;\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic void\ncifs_lock_add(struct cifsFileInfo *cfile, struct cifsLockInfo *lock)\n{\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tdown_write(&cinode->lock_sem);\n\tlist_add_tail(&lock->llist, &cfile->llist->locks);\n\tup_write(&cinode->lock_sem);\n}\n\n/*\n * Set the byte-range lock (mandatory style). Returns:\n * 1) 0, if we set the lock and don't need to request to the server;\n * 2) 1, if no locks prevent us but we need to request to the server;\n * 3) -EACCESS, if there is a lock that prevents us and wait is false.\n */\nstatic int\ncifs_lock_add_if(struct cifsFileInfo *cfile, struct cifsLockInfo *lock,\n\t\t bool wait)\n{\n\tstruct cifsLockInfo *conf_lock;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tbool exist;\n\tint rc = 0;\n\ntry_again:\n\texist = false;\n\tdown_write(&cinode->lock_sem);\n\n\texist = cifs_find_lock_conflict(cfile, lock->offset, lock->length,\n\t\t\t\t\tlock->type, &conf_lock, CIFS_LOCK_OP);\n\tif (!exist && cinode->can_cache_brlcks) {\n\t\tlist_add_tail(&lock->llist, &cfile->llist->locks);\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (!exist)\n\t\trc = 1;\n\telse if (!wait)\n\t\trc = -EACCES;\n\telse {\n\t\tlist_add_tail(&lock->blist, &conf_lock->blist);\n\t\tup_write(&cinode->lock_sem);\n\t\trc = wait_event_interruptible(lock->block_q,\n\t\t\t\t\t(lock->blist.prev == &lock->blist) &&\n\t\t\t\t\t(lock->blist.next == &lock->blist));\n\t\tif (!rc)\n\t\t\tgoto try_again;\n\t\tdown_write(&cinode->lock_sem);\n\t\tlist_del_init(&lock->blist);\n\t}\n\n\tup_write(&cinode->lock_sem);\n\treturn rc;\n}\n\n/*\n * Check if there is another lock that prevents us to set the lock (posix\n * style). If such a lock exists, update the flock structure with its\n * properties. Otherwise, set the flock type to F_UNLCK if we can cache brlocks\n * or leave it the same if we can't. Returns 0 if we don't need to request to\n * the server or 1 otherwise.\n */\nstatic int\ncifs_posix_lock_test(struct file *file, struct file_lock *flock)\n{\n\tint rc = 0;\n\tstruct cifsInodeInfo *cinode = CIFS_I(file_inode(file));\n\tunsigned char saved_type = flock->fl_type;\n\n\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\treturn 1;\n\n\tdown_read(&cinode->lock_sem);\n\tposix_test_lock(file, flock);\n\n\tif (flock->fl_type == F_UNLCK && !cinode->can_cache_brlcks) {\n\t\tflock->fl_type = saved_type;\n\t\trc = 1;\n\t}\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\n/*\n * Set the byte-range lock (posix style). Returns:\n * 1) 0, if we set the lock and don't need to request to the server;\n * 2) 1, if we need to request to the server;\n * 3) <0, if the error occurs while setting the lock.\n */\nstatic int\ncifs_posix_lock_set(struct file *file, struct file_lock *flock)\n{\n\tstruct cifsInodeInfo *cinode = CIFS_I(file_inode(file));\n\tint rc = 1;\n\n\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\treturn rc;\n\ntry_again:\n\tdown_write(&cinode->lock_sem);\n\tif (!cinode->can_cache_brlcks) {\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\trc = posix_lock_file(file, flock, NULL);\n\tup_write(&cinode->lock_sem);\n\tif (rc == FILE_LOCK_DEFERRED) {\n\t\trc = wait_event_interruptible(flock->fl_wait, !flock->fl_next);\n\t\tif (!rc)\n\t\t\tgoto try_again;\n\t\tposix_unblock_lock(flock);\n\t}\n\treturn rc;\n}\n\nint\ncifs_push_mandatory_locks(struct cifsFileInfo *cfile)\n{\n\tunsigned int xid;\n\tint rc = 0, stored_rc;\n\tstruct cifsLockInfo *li, *tmp;\n\tstruct cifs_tcon *tcon;\n\tunsigned int num, max_num, max_buf;\n\tLOCKING_ANDX_RANGE *buf, *cur;\n\tint types[] = {LOCKING_ANDX_LARGE_FILES,\n\t\t       LOCKING_ANDX_SHARED_LOCK | LOCKING_ANDX_LARGE_FILES};\n\tint i;\n\n\txid = get_xid();\n\ttcon = tlink_tcon(cfile->tlink);\n\n\t/*\n\t * Accessing maxBuf is racy with cifs_reconnect - need to store value\n\t * and check it for zero before using.\n\t */\n\tmax_buf = tcon->ses->server->maxBuf;\n\tif (!max_buf) {\n\t\tfree_xid(xid);\n\t\treturn -EINVAL;\n\t}\n\n\tmax_num = (max_buf - sizeof(struct smb_hdr)) /\n\t\t\t\t\t\tsizeof(LOCKING_ANDX_RANGE);\n\tbuf = kzalloc(max_num * sizeof(LOCKING_ANDX_RANGE), GFP_KERNEL);\n\tif (!buf) {\n\t\tfree_xid(xid);\n\t\treturn -ENOMEM;\n\t}\n\n\tfor (i = 0; i < 2; i++) {\n\t\tcur = buf;\n\t\tnum = 0;\n\t\tlist_for_each_entry_safe(li, tmp, &cfile->llist->locks, llist) {\n\t\t\tif (li->type != types[i])\n\t\t\t\tcontinue;\n\t\t\tcur->Pid = cpu_to_le16(li->pid);\n\t\t\tcur->LengthLow = cpu_to_le32((u32)li->length);\n\t\t\tcur->LengthHigh = cpu_to_le32((u32)(li->length>>32));\n\t\t\tcur->OffsetLow = cpu_to_le32((u32)li->offset);\n\t\t\tcur->OffsetHigh = cpu_to_le32((u32)(li->offset>>32));\n\t\t\tif (++num == max_num) {\n\t\t\t\tstored_rc = cifs_lockv(xid, tcon,\n\t\t\t\t\t\t       cfile->fid.netfid,\n\t\t\t\t\t\t       (__u8)li->type, 0, num,\n\t\t\t\t\t\t       buf);\n\t\t\t\tif (stored_rc)\n\t\t\t\t\trc = stored_rc;\n\t\t\t\tcur = buf;\n\t\t\t\tnum = 0;\n\t\t\t} else\n\t\t\t\tcur++;\n\t\t}\n\n\t\tif (num) {\n\t\t\tstored_rc = cifs_lockv(xid, tcon, cfile->fid.netfid,\n\t\t\t\t\t       (__u8)types[i], 0, num, buf);\n\t\t\tif (stored_rc)\n\t\t\t\trc = stored_rc;\n\t\t}\n\t}\n\n\tkfree(buf);\n\tfree_xid(xid);\n\treturn rc;\n}\n\n/* copied from fs/locks.c with a name change */\n#define cifs_for_each_lock(inode, lockp) \\\n\tfor (lockp = &inode->i_flock; *lockp != NULL; \\\n\t     lockp = &(*lockp)->fl_next)\n\nstruct lock_to_push {\n\tstruct list_head llist;\n\t__u64 offset;\n\t__u64 length;\n\t__u32 pid;\n\t__u16 netfid;\n\t__u8 type;\n};\n\nstatic int\ncifs_push_posix_locks(struct cifsFileInfo *cfile)\n{\n\tstruct inode *inode = cfile->dentry->d_inode;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct file_lock *flock, **before;\n\tunsigned int count = 0, i = 0;\n\tint rc = 0, xid, type;\n\tstruct list_head locks_to_send, *el;\n\tstruct lock_to_push *lck, *tmp;\n\t__u64 length;\n\n\txid = get_xid();\n\n\tspin_lock(&inode->i_lock);\n\tcifs_for_each_lock(inode, before) {\n\t\tif ((*before)->fl_flags & FL_POSIX)\n\t\t\tcount++;\n\t}\n\tspin_unlock(&inode->i_lock);\n\n\tINIT_LIST_HEAD(&locks_to_send);\n\n\t/*\n\t * Allocating count locks is enough because no FL_POSIX locks can be\n\t * added to the list while we are holding cinode->lock_sem that\n\t * protects locking operations of this inode.\n\t */\n\tfor (; i < count; i++) {\n\t\tlck = kmalloc(sizeof(struct lock_to_push), GFP_KERNEL);\n\t\tif (!lck) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto err_out;\n\t\t}\n\t\tlist_add_tail(&lck->llist, &locks_to_send);\n\t}\n\n\tel = locks_to_send.next;\n\tspin_lock(&inode->i_lock);\n\tcifs_for_each_lock(inode, before) {\n\t\tflock = *before;\n\t\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\t\tcontinue;\n\t\tif (el == &locks_to_send) {\n\t\t\t/*\n\t\t\t * The list ended. We don't have enough allocated\n\t\t\t * structures - something is really wrong.\n\t\t\t */\n\t\t\tcifs_dbg(VFS, \"Can't push all brlocks!\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tlength = 1 + flock->fl_end - flock->fl_start;\n\t\tif (flock->fl_type == F_RDLCK || flock->fl_type == F_SHLCK)\n\t\t\ttype = CIFS_RDLCK;\n\t\telse\n\t\t\ttype = CIFS_WRLCK;\n\t\tlck = list_entry(el, struct lock_to_push, llist);\n\t\tlck->pid = flock->fl_pid;\n\t\tlck->netfid = cfile->fid.netfid;\n\t\tlck->length = length;\n\t\tlck->type = type;\n\t\tlck->offset = flock->fl_start;\n\t\tel = el->next;\n\t}\n\tspin_unlock(&inode->i_lock);\n\n\tlist_for_each_entry_safe(lck, tmp, &locks_to_send, llist) {\n\t\tint stored_rc;\n\n\t\tstored_rc = CIFSSMBPosixLock(xid, tcon, lck->netfid, lck->pid,\n\t\t\t\t\t     lck->offset, lck->length, NULL,\n\t\t\t\t\t     lck->type, 0);\n\t\tif (stored_rc)\n\t\t\trc = stored_rc;\n\t\tlist_del(&lck->llist);\n\t\tkfree(lck);\n\t}\n\nout:\n\tfree_xid(xid);\n\treturn rc;\nerr_out:\n\tlist_for_each_entry_safe(lck, tmp, &locks_to_send, llist) {\n\t\tlist_del(&lck->llist);\n\t\tkfree(lck);\n\t}\n\tgoto out;\n}\n\nstatic int\ncifs_push_locks(struct cifsFileInfo *cfile)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\t/* we are going to update can_cache_brlcks here - need a write access */\n\tdown_write(&cinode->lock_sem);\n\tif (!cinode->can_cache_brlcks) {\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\trc = cifs_push_posix_locks(cfile);\n\telse\n\t\trc = tcon->ses->server->ops->push_mand_locks(cfile);\n\n\tcinode->can_cache_brlcks = false;\n\tup_write(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic void\ncifs_read_flock(struct file_lock *flock, __u32 *type, int *lock, int *unlock,\n\t\tbool *wait_flag, struct TCP_Server_Info *server)\n{\n\tif (flock->fl_flags & FL_POSIX)\n\t\tcifs_dbg(FYI, \"Posix\\n\");\n\tif (flock->fl_flags & FL_FLOCK)\n\t\tcifs_dbg(FYI, \"Flock\\n\");\n\tif (flock->fl_flags & FL_SLEEP) {\n\t\tcifs_dbg(FYI, \"Blocking lock\\n\");\n\t\t*wait_flag = true;\n\t}\n\tif (flock->fl_flags & FL_ACCESS)\n\t\tcifs_dbg(FYI, \"Process suspended by mandatory locking - not implemented yet\\n\");\n\tif (flock->fl_flags & FL_LEASE)\n\t\tcifs_dbg(FYI, \"Lease on file - not implemented yet\\n\");\n\tif (flock->fl_flags &\n\t    (~(FL_POSIX | FL_FLOCK | FL_SLEEP |\n\t       FL_ACCESS | FL_LEASE | FL_CLOSE)))\n\t\tcifs_dbg(FYI, \"Unknown lock flags 0x%x\\n\", flock->fl_flags);\n\n\t*type = server->vals->large_lock_type;\n\tif (flock->fl_type == F_WRLCK) {\n\t\tcifs_dbg(FYI, \"F_WRLCK\\n\");\n\t\t*type |= server->vals->exclusive_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_UNLCK) {\n\t\tcifs_dbg(FYI, \"F_UNLCK\\n\");\n\t\t*type |= server->vals->unlock_lock_type;\n\t\t*unlock = 1;\n\t\t/* Check if unlock includes more than one lock range */\n\t} else if (flock->fl_type == F_RDLCK) {\n\t\tcifs_dbg(FYI, \"F_RDLCK\\n\");\n\t\t*type |= server->vals->shared_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_EXLCK) {\n\t\tcifs_dbg(FYI, \"F_EXLCK\\n\");\n\t\t*type |= server->vals->exclusive_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_SHLCK) {\n\t\tcifs_dbg(FYI, \"F_SHLCK\\n\");\n\t\t*type |= server->vals->shared_lock_type;\n\t\t*lock = 1;\n\t} else\n\t\tcifs_dbg(FYI, \"Unknown type of lock\\n\");\n}\n\nstatic int\ncifs_getlk(struct file *file, struct file_lock *flock, __u32 type,\n\t   bool wait_flag, bool posix_lck, unsigned int xid)\n{\n\tint rc = 0;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\t__u16 netfid = cfile->fid.netfid;\n\n\tif (posix_lck) {\n\t\tint posix_lock_type;\n\n\t\trc = cifs_posix_lock_test(file, flock);\n\t\tif (!rc)\n\t\t\treturn rc;\n\n\t\tif (type & server->vals->shared_lock_type)\n\t\t\tposix_lock_type = CIFS_RDLCK;\n\t\telse\n\t\t\tposix_lock_type = CIFS_WRLCK;\n\t\trc = CIFSSMBPosixLock(xid, tcon, netfid, current->tgid,\n\t\t\t\t      flock->fl_start, length, flock,\n\t\t\t\t      posix_lock_type, wait_flag);\n\t\treturn rc;\n\t}\n\n\trc = cifs_lock_test(cfile, flock->fl_start, length, type, flock);\n\tif (!rc)\n\t\treturn rc;\n\n\t/* BB we could chain these into one lock request BB */\n\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length, type,\n\t\t\t\t    1, 0, false);\n\tif (rc == 0) {\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t\t    type, 0, 1, false);\n\t\tflock->fl_type = F_UNLCK;\n\t\tif (rc != 0)\n\t\t\tcifs_dbg(VFS, \"Error unlocking previously locked range %d during test of lock\\n\",\n\t\t\t\t rc);\n\t\treturn 0;\n\t}\n\n\tif (type & server->vals->shared_lock_type) {\n\t\tflock->fl_type = F_WRLCK;\n\t\treturn 0;\n\t}\n\n\ttype &= ~server->vals->exclusive_lock_type;\n\n\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t    type | server->vals->shared_lock_type,\n\t\t\t\t    1, 0, false);\n\tif (rc == 0) {\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\ttype | server->vals->shared_lock_type, 0, 1, false);\n\t\tflock->fl_type = F_RDLCK;\n\t\tif (rc != 0)\n\t\t\tcifs_dbg(VFS, \"Error unlocking previously locked range %d during test of lock\\n\",\n\t\t\t\t rc);\n\t} else\n\t\tflock->fl_type = F_WRLCK;\n\n\treturn 0;\n}\n\nvoid\ncifs_move_llist(struct list_head *source, struct list_head *dest)\n{\n\tstruct list_head *li, *tmp;\n\tlist_for_each_safe(li, tmp, source)\n\t\tlist_move(li, dest);\n}\n\nvoid\ncifs_free_llist(struct list_head *llist)\n{\n\tstruct cifsLockInfo *li, *tmp;\n\tlist_for_each_entry_safe(li, tmp, llist, llist) {\n\t\tcifs_del_lock_waiters(li);\n\t\tlist_del(&li->llist);\n\t\tkfree(li);\n\t}\n}\n\nint\ncifs_unlock_range(struct cifsFileInfo *cfile, struct file_lock *flock,\n\t\t  unsigned int xid)\n{\n\tint rc = 0, stored_rc;\n\tint types[] = {LOCKING_ANDX_LARGE_FILES,\n\t\t       LOCKING_ANDX_SHARED_LOCK | LOCKING_ANDX_LARGE_FILES};\n\tunsigned int i;\n\tunsigned int max_num, num, max_buf;\n\tLOCKING_ANDX_RANGE *buf, *cur;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifsLockInfo *li, *tmp;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct list_head tmp_llist;\n\n\tINIT_LIST_HEAD(&tmp_llist);\n\n\t/*\n\t * Accessing maxBuf is racy with cifs_reconnect - need to store value\n\t * and check it for zero before using.\n\t */\n\tmax_buf = tcon->ses->server->maxBuf;\n\tif (!max_buf)\n\t\treturn -EINVAL;\n\n\tmax_num = (max_buf - sizeof(struct smb_hdr)) /\n\t\t\t\t\t\tsizeof(LOCKING_ANDX_RANGE);\n\tbuf = kzalloc(max_num * sizeof(LOCKING_ANDX_RANGE), GFP_KERNEL);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\tdown_write(&cinode->lock_sem);\n\tfor (i = 0; i < 2; i++) {\n\t\tcur = buf;\n\t\tnum = 0;\n\t\tlist_for_each_entry_safe(li, tmp, &cfile->llist->locks, llist) {\n\t\t\tif (flock->fl_start > li->offset ||\n\t\t\t    (flock->fl_start + length) <\n\t\t\t    (li->offset + li->length))\n\t\t\t\tcontinue;\n\t\t\tif (current->tgid != li->pid)\n\t\t\t\tcontinue;\n\t\t\tif (types[i] != li->type)\n\t\t\t\tcontinue;\n\t\t\tif (cinode->can_cache_brlcks) {\n\t\t\t\t/*\n\t\t\t\t * We can cache brlock requests - simply remove\n\t\t\t\t * a lock from the file's list.\n\t\t\t\t */\n\t\t\t\tlist_del(&li->llist);\n\t\t\t\tcifs_del_lock_waiters(li);\n\t\t\t\tkfree(li);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcur->Pid = cpu_to_le16(li->pid);\n\t\t\tcur->LengthLow = cpu_to_le32((u32)li->length);\n\t\t\tcur->LengthHigh = cpu_to_le32((u32)(li->length>>32));\n\t\t\tcur->OffsetLow = cpu_to_le32((u32)li->offset);\n\t\t\tcur->OffsetHigh = cpu_to_le32((u32)(li->offset>>32));\n\t\t\t/*\n\t\t\t * We need to save a lock here to let us add it again to\n\t\t\t * the file's list if the unlock range request fails on\n\t\t\t * the server.\n\t\t\t */\n\t\t\tlist_move(&li->llist, &tmp_llist);\n\t\t\tif (++num == max_num) {\n\t\t\t\tstored_rc = cifs_lockv(xid, tcon,\n\t\t\t\t\t\t       cfile->fid.netfid,\n\t\t\t\t\t\t       li->type, num, 0, buf);\n\t\t\t\tif (stored_rc) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We failed on the unlock range\n\t\t\t\t\t * request - add all locks from the tmp\n\t\t\t\t\t * list to the head of the file's list.\n\t\t\t\t\t */\n\t\t\t\t\tcifs_move_llist(&tmp_llist,\n\t\t\t\t\t\t\t&cfile->llist->locks);\n\t\t\t\t\trc = stored_rc;\n\t\t\t\t} else\n\t\t\t\t\t/*\n\t\t\t\t\t * The unlock range request succeed -\n\t\t\t\t\t * free the tmp list.\n\t\t\t\t\t */\n\t\t\t\t\tcifs_free_llist(&tmp_llist);\n\t\t\t\tcur = buf;\n\t\t\t\tnum = 0;\n\t\t\t} else\n\t\t\t\tcur++;\n\t\t}\n\t\tif (num) {\n\t\t\tstored_rc = cifs_lockv(xid, tcon, cfile->fid.netfid,\n\t\t\t\t\t       types[i], num, 0, buf);\n\t\t\tif (stored_rc) {\n\t\t\t\tcifs_move_llist(&tmp_llist,\n\t\t\t\t\t\t&cfile->llist->locks);\n\t\t\t\trc = stored_rc;\n\t\t\t} else\n\t\t\t\tcifs_free_llist(&tmp_llist);\n\t\t}\n\t}\n\n\tup_write(&cinode->lock_sem);\n\tkfree(buf);\n\treturn rc;\n}\n\nstatic int\ncifs_setlk(struct file *file, struct file_lock *flock, __u32 type,\n\t   bool wait_flag, bool posix_lck, int lock, int unlock,\n\t   unsigned int xid)\n{\n\tint rc = 0;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct inode *inode = cfile->dentry->d_inode;\n\n\tif (posix_lck) {\n\t\tint posix_lock_type;\n\n\t\trc = cifs_posix_lock_set(file, flock);\n\t\tif (!rc || rc < 0)\n\t\t\treturn rc;\n\n\t\tif (type & server->vals->shared_lock_type)\n\t\t\tposix_lock_type = CIFS_RDLCK;\n\t\telse\n\t\t\tposix_lock_type = CIFS_WRLCK;\n\n\t\tif (unlock == 1)\n\t\t\tposix_lock_type = CIFS_UNLCK;\n\n\t\trc = CIFSSMBPosixLock(xid, tcon, cfile->fid.netfid,\n\t\t\t\t      current->tgid, flock->fl_start, length,\n\t\t\t\t      NULL, posix_lock_type, wait_flag);\n\t\tgoto out;\n\t}\n\n\tif (lock) {\n\t\tstruct cifsLockInfo *lock;\n\n\t\tlock = cifs_lock_init(flock->fl_start, length, type);\n\t\tif (!lock)\n\t\t\treturn -ENOMEM;\n\n\t\trc = cifs_lock_add_if(cfile, lock, wait_flag);\n\t\tif (rc < 0) {\n\t\t\tkfree(lock);\n\t\t\treturn rc;\n\t\t}\n\t\tif (!rc)\n\t\t\tgoto out;\n\n\t\t/*\n\t\t * Windows 7 server can delay breaking lease from read to None\n\t\t * if we set a byte-range lock on a file - break it explicitly\n\t\t * before sending the lock to the server to be sure the next\n\t\t * read won't conflict with non-overlapted locks due to\n\t\t * pagereading.\n\t\t */\n\t\tif (!CIFS_CACHE_WRITE(CIFS_I(inode)) &&\n\t\t\t\t\tCIFS_CACHE_READ(CIFS_I(inode))) {\n\t\t\tcifs_invalidate_mapping(inode);\n\t\t\tcifs_dbg(FYI, \"Set no oplock for inode=%p due to mand locks\\n\",\n\t\t\t\t inode);\n\t\t\tCIFS_I(inode)->oplock = 0;\n\t\t}\n\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t\t    type, 1, 0, wait_flag);\n\t\tif (rc) {\n\t\t\tkfree(lock);\n\t\t\treturn rc;\n\t\t}\n\n\t\tcifs_lock_add(cfile, lock);\n\t} else if (unlock)\n\t\trc = server->ops->mand_unlock_range(cfile, flock, xid);\n\nout:\n\tif (flock->fl_flags & FL_POSIX)\n\t\tposix_lock_file_wait(file, flock);\n\treturn rc;\n}\n\nint cifs_lock(struct file *file, int cmd, struct file_lock *flock)\n{\n\tint rc, xid;\n\tint lock = 0, unlock = 0;\n\tbool wait_flag = false;\n\tbool posix_lck = false;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct cifsInodeInfo *cinode;\n\tstruct cifsFileInfo *cfile;\n\t__u16 netfid;\n\t__u32 type;\n\n\trc = -EACCES;\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Lock parm: 0x%x flockflags: 0x%x flocktype: 0x%x start: %lld end: %lld\\n\",\n\t\t cmd, flock->fl_flags, flock->fl_type,\n\t\t flock->fl_start, flock->fl_end);\n\n\tcfile = (struct cifsFileInfo *)file->private_data;\n\ttcon = tlink_tcon(cfile->tlink);\n\n\tcifs_read_flock(flock, &type, &lock, &unlock, &wait_flag,\n\t\t\ttcon->ses->server);\n\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tnetfid = cfile->fid.netfid;\n\tcinode = CIFS_I(file_inode(file));\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\tposix_lck = true;\n\t/*\n\t * BB add code here to normalize offset and length to account for\n\t * negative length which we can not accept over the wire.\n\t */\n\tif (IS_GETLK(cmd)) {\n\t\trc = cifs_getlk(file, flock, type, wait_flag, posix_lck, xid);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tif (!lock && !unlock) {\n\t\t/*\n\t\t * if no lock or unlock then nothing to do since we do not\n\t\t * know what it is\n\t\t */\n\t\tfree_xid(xid);\n\t\treturn -EOPNOTSUPP;\n\t}\n\n\trc = cifs_setlk(file, flock, type, wait_flag, posix_lck, lock, unlock,\n\t\t\txid);\n\tfree_xid(xid);\n\treturn rc;\n}\n\n/*\n * update the file size (if needed) after a write. Should be called with\n * the inode->i_lock held\n */\nvoid\ncifs_update_eof(struct cifsInodeInfo *cifsi, loff_t offset,\n\t\t      unsigned int bytes_written)\n{\n\tloff_t end_of_write = offset + bytes_written;\n\n\tif (end_of_write > cifsi->server_eof)\n\t\tcifsi->server_eof = end_of_write;\n}\n\nstatic ssize_t\ncifs_write(struct cifsFileInfo *open_file, __u32 pid, const char *write_data,\n\t   size_t write_size, loff_t *offset)\n{\n\tint rc = 0;\n\tunsigned int bytes_written = 0;\n\tunsigned int total_written;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tunsigned int xid;\n\tstruct dentry *dentry = open_file->dentry;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(dentry->d_inode);\n\tstruct cifs_io_parms io_parms;\n\n\tcifs_sb = CIFS_SB(dentry->d_sb);\n\n\tcifs_dbg(FYI, \"write %zd bytes to offset %lld of %s\\n\",\n\t\t write_size, *offset, dentry->d_name.name);\n\n\ttcon = tlink_tcon(open_file->tlink);\n\tserver = tcon->ses->server;\n\n\tif (!server->ops->sync_write)\n\t\treturn -ENOSYS;\n\n\txid = get_xid();\n\n\tfor (total_written = 0; write_size > total_written;\n\t     total_written += bytes_written) {\n\t\trc = -EAGAIN;\n\t\twhile (rc == -EAGAIN) {\n\t\t\tstruct kvec iov[2];\n\t\t\tunsigned int len;\n\n\t\t\tif (open_file->invalidHandle) {\n\t\t\t\t/* we could deadlock if we called\n\t\t\t\t   filemap_fdatawait from here so tell\n\t\t\t\t   reopen_file not to flush data to\n\t\t\t\t   server now */\n\t\t\t\trc = cifs_reopen_file(open_file, false);\n\t\t\t\tif (rc != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlen = min((size_t)cifs_sb->wsize,\n\t\t\t\t  write_size - total_written);\n\t\t\t/* iov[0] is reserved for smb header */\n\t\t\tiov[1].iov_base = (char *)write_data + total_written;\n\t\t\tiov[1].iov_len = len;\n\t\t\tio_parms.pid = pid;\n\t\t\tio_parms.tcon = tcon;\n\t\t\tio_parms.offset = *offset;\n\t\t\tio_parms.length = len;\n\t\t\trc = server->ops->sync_write(xid, open_file, &io_parms,\n\t\t\t\t\t\t     &bytes_written, iov, 1);\n\t\t}\n\t\tif (rc || (bytes_written == 0)) {\n\t\t\tif (total_written)\n\t\t\t\tbreak;\n\t\t\telse {\n\t\t\t\tfree_xid(xid);\n\t\t\t\treturn rc;\n\t\t\t}\n\t\t} else {\n\t\t\tspin_lock(&dentry->d_inode->i_lock);\n\t\t\tcifs_update_eof(cifsi, *offset, bytes_written);\n\t\t\tspin_unlock(&dentry->d_inode->i_lock);\n\t\t\t*offset += bytes_written;\n\t\t}\n\t}\n\n\tcifs_stats_bytes_written(tcon, total_written);\n\n\tif (total_written > 0) {\n\t\tspin_lock(&dentry->d_inode->i_lock);\n\t\tif (*offset > dentry->d_inode->i_size)\n\t\t\ti_size_write(dentry->d_inode, *offset);\n\t\tspin_unlock(&dentry->d_inode->i_lock);\n\t}\n\tmark_inode_dirty_sync(dentry->d_inode);\n\tfree_xid(xid);\n\treturn total_written;\n}\n\nstruct cifsFileInfo *find_readable_file(struct cifsInodeInfo *cifs_inode,\n\t\t\t\t\tbool fsuid_only)\n{\n\tstruct cifsFileInfo *open_file = NULL;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cifs_inode->vfs_inode.i_sb);\n\n\t/* only filter by fsuid on multiuser mounts */\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_MULTIUSER))\n\t\tfsuid_only = false;\n\n\tspin_lock(&cifs_file_list_lock);\n\t/* we could simply get the first_list_entry since write-only entries\n\t   are always at the end of the list but since the first entry might\n\t   have a close pending, we go through the whole list */\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (fsuid_only && !uid_eq(open_file->uid, current_fsuid()))\n\t\t\tcontinue;\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_READ) {\n\t\t\tif (!open_file->invalidHandle) {\n\t\t\t\t/* found a good file */\n\t\t\t\t/* lock it so it will not be closed on us */\n\t\t\t\tcifsFileInfo_get_locked(open_file);\n\t\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\t\treturn open_file;\n\t\t\t} /* else might as well continue, and look for\n\t\t\t     another, or simply have the caller reopen it\n\t\t\t     again rather than trying to fix this handle */\n\t\t} else /* write only file */\n\t\t\tbreak; /* write only files are last so must be done */\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\treturn NULL;\n}\n\nstruct cifsFileInfo *find_writable_file(struct cifsInodeInfo *cifs_inode,\n\t\t\t\t\tbool fsuid_only)\n{\n\tstruct cifsFileInfo *open_file, *inv_file = NULL;\n\tstruct cifs_sb_info *cifs_sb;\n\tbool any_available = false;\n\tint rc;\n\tunsigned int refind = 0;\n\n\t/* Having a null inode here (because mapping->host was set to zero by\n\tthe VFS or MM) should not happen but we had reports of on oops (due to\n\tit being zero) during stress testcases so we need to check for it */\n\n\tif (cifs_inode == NULL) {\n\t\tcifs_dbg(VFS, \"Null inode passed to cifs_writeable_file\\n\");\n\t\tdump_stack();\n\t\treturn NULL;\n\t}\n\n\tcifs_sb = CIFS_SB(cifs_inode->vfs_inode.i_sb);\n\n\t/* only filter by fsuid on multiuser mounts */\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_MULTIUSER))\n\t\tfsuid_only = false;\n\n\tspin_lock(&cifs_file_list_lock);\nrefind_writable:\n\tif (refind > MAX_REOPEN_ATT) {\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\treturn NULL;\n\t}\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (!any_available && open_file->pid != current->tgid)\n\t\t\tcontinue;\n\t\tif (fsuid_only && !uid_eq(open_file->uid, current_fsuid()))\n\t\t\tcontinue;\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_WRITE) {\n\t\t\tif (!open_file->invalidHandle) {\n\t\t\t\t/* found a good writable file */\n\t\t\t\tcifsFileInfo_get_locked(open_file);\n\t\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\t\treturn open_file;\n\t\t\t} else {\n\t\t\t\tif (!inv_file)\n\t\t\t\t\tinv_file = open_file;\n\t\t\t}\n\t\t}\n\t}\n\t/* couldn't find useable FH with same pid, try any available */\n\tif (!any_available) {\n\t\tany_available = true;\n\t\tgoto refind_writable;\n\t}\n\n\tif (inv_file) {\n\t\tany_available = false;\n\t\tcifsFileInfo_get_locked(inv_file);\n\t}\n\n\tspin_unlock(&cifs_file_list_lock);\n\n\tif (inv_file) {\n\t\trc = cifs_reopen_file(inv_file, false);\n\t\tif (!rc)\n\t\t\treturn inv_file;\n\t\telse {\n\t\t\tspin_lock(&cifs_file_list_lock);\n\t\t\tlist_move_tail(&inv_file->flist,\n\t\t\t\t\t&cifs_inode->openFileList);\n\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\tcifsFileInfo_put(inv_file);\n\t\t\tspin_lock(&cifs_file_list_lock);\n\t\t\t++refind;\n\t\t\tgoto refind_writable;\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\nstatic int cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)\n{\n\tstruct address_space *mapping = page->mapping;\n\tloff_t offset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\tchar *write_data;\n\tint rc = -EFAULT;\n\tint bytes_written = 0;\n\tstruct inode *inode;\n\tstruct cifsFileInfo *open_file;\n\n\tif (!mapping || !mapping->host)\n\t\treturn -EFAULT;\n\n\tinode = page->mapping->host;\n\n\toffset += (loff_t)from;\n\twrite_data = kmap(page);\n\twrite_data += from;\n\n\tif ((to > PAGE_CACHE_SIZE) || (from > to)) {\n\t\tkunmap(page);\n\t\treturn -EIO;\n\t}\n\n\t/* racing with truncate? */\n\tif (offset > mapping->host->i_size) {\n\t\tkunmap(page);\n\t\treturn 0; /* don't care */\n\t}\n\n\t/* check to make sure that we are not extending the file */\n\tif (mapping->host->i_size - offset < (loff_t)to)\n\t\tto = (unsigned)(mapping->host->i_size - offset);\n\n\topen_file = find_writable_file(CIFS_I(mapping->host), false);\n\tif (open_file) {\n\t\tbytes_written = cifs_write(open_file, open_file->pid,\n\t\t\t\t\t   write_data, to - from, &offset);\n\t\tcifsFileInfo_put(open_file);\n\t\t/* Does mm or vfs already set times? */\n\t\tinode->i_atime = inode->i_mtime = current_fs_time(inode->i_sb);\n\t\tif ((bytes_written > 0) && (offset))\n\t\t\trc = 0;\n\t\telse if (bytes_written < 0)\n\t\t\trc = bytes_written;\n\t} else {\n\t\tcifs_dbg(FYI, \"No writeable filehandles for inode\\n\");\n\t\trc = -EIO;\n\t}\n\n\tkunmap(page);\n\treturn rc;\n}\n\nstatic int cifs_writepages(struct address_space *mapping,\n\t\t\t   struct writeback_control *wbc)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(mapping->host->i_sb);\n\tbool done = false, scanned = false, range_whole = false;\n\tpgoff_t end, index;\n\tstruct cifs_writedata *wdata;\n\tstruct TCP_Server_Info *server;\n\tstruct page *page;\n\tint rc = 0;\n\n\t/*\n\t * If wsize is smaller than the page cache size, default to writing\n\t * one page at a time via cifs_writepage\n\t */\n\tif (cifs_sb->wsize < PAGE_CACHE_SIZE)\n\t\treturn generic_writepages(mapping, wbc);\n\n\tif (wbc->range_cyclic) {\n\t\tindex = mapping->writeback_index; /* Start from prev offset */\n\t\tend = -1;\n\t} else {\n\t\tindex = wbc->range_start >> PAGE_CACHE_SHIFT;\n\t\tend = wbc->range_end >> PAGE_CACHE_SHIFT;\n\t\tif (wbc->range_start == 0 && wbc->range_end == LLONG_MAX)\n\t\t\trange_whole = true;\n\t\tscanned = true;\n\t}\nretry:\n\twhile (!done && index <= end) {\n\t\tunsigned int i, nr_pages, found_pages;\n\t\tpgoff_t next = 0, tofind;\n\t\tstruct page **pages;\n\n\t\ttofind = min((cifs_sb->wsize / PAGE_CACHE_SIZE) - 1,\n\t\t\t\tend - index) + 1;\n\n\t\twdata = cifs_writedata_alloc((unsigned int)tofind,\n\t\t\t\t\t     cifs_writev_complete);\n\t\tif (!wdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\t/*\n\t\t * find_get_pages_tag seems to return a max of 256 on each\n\t\t * iteration, so we must call it several times in order to\n\t\t * fill the array or the wsize is effectively limited to\n\t\t * 256 * PAGE_CACHE_SIZE.\n\t\t */\n\t\tfound_pages = 0;\n\t\tpages = wdata->pages;\n\t\tdo {\n\t\t\tnr_pages = find_get_pages_tag(mapping, &index,\n\t\t\t\t\t\t\tPAGECACHE_TAG_DIRTY,\n\t\t\t\t\t\t\ttofind, pages);\n\t\t\tfound_pages += nr_pages;\n\t\t\ttofind -= nr_pages;\n\t\t\tpages += nr_pages;\n\t\t} while (nr_pages && tofind && index <= end);\n\n\t\tif (found_pages == 0) {\n\t\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tnr_pages = 0;\n\t\tfor (i = 0; i < found_pages; i++) {\n\t\t\tpage = wdata->pages[i];\n\t\t\t/*\n\t\t\t * At this point we hold neither mapping->tree_lock nor\n\t\t\t * lock on the page itself: the page may be truncated or\n\t\t\t * invalidated (changing page->mapping to NULL), or even\n\t\t\t * swizzled back from swapper_space to tmpfs file\n\t\t\t * mapping\n\t\t\t */\n\n\t\t\tif (nr_pages == 0)\n\t\t\t\tlock_page(page);\n\t\t\telse if (!trylock_page(page))\n\t\t\t\tbreak;\n\n\t\t\tif (unlikely(page->mapping != mapping)) {\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!wbc->range_cyclic && page->index > end) {\n\t\t\t\tdone = true;\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (next && (page->index != next)) {\n\t\t\t\t/* Not next consecutive page */\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (wbc->sync_mode != WB_SYNC_NONE)\n\t\t\t\twait_on_page_writeback(page);\n\n\t\t\tif (PageWriteback(page) ||\n\t\t\t\t\t!clear_page_dirty_for_io(page)) {\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * This actually clears the dirty bit in the radix tree.\n\t\t\t * See cifs_writepage() for more commentary.\n\t\t\t */\n\t\t\tset_page_writeback(page);\n\n\t\t\tif (page_offset(page) >= i_size_read(mapping->host)) {\n\t\t\t\tdone = true;\n\t\t\t\tunlock_page(page);\n\t\t\t\tend_page_writeback(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\twdata->pages[i] = page;\n\t\t\tnext = page->index + 1;\n\t\t\t++nr_pages;\n\t\t}\n\n\t\t/* reset index to refind any pages skipped */\n\t\tif (nr_pages == 0)\n\t\t\tindex = wdata->pages[0]->index + 1;\n\n\t\t/* put any pages we aren't going to use */\n\t\tfor (i = nr_pages; i < found_pages; i++) {\n\t\t\tpage_cache_release(wdata->pages[i]);\n\t\t\twdata->pages[i] = NULL;\n\t\t}\n\n\t\t/* nothing to write? */\n\t\tif (nr_pages == 0) {\n\t\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\t\t\tcontinue;\n\t\t}\n\n\t\twdata->sync_mode = wbc->sync_mode;\n\t\twdata->nr_pages = nr_pages;\n\t\twdata->offset = page_offset(wdata->pages[0]);\n\t\twdata->pagesz = PAGE_CACHE_SIZE;\n\t\twdata->tailsz =\n\t\t\tmin(i_size_read(mapping->host) -\n\t\t\t    page_offset(wdata->pages[nr_pages - 1]),\n\t\t\t    (loff_t)PAGE_CACHE_SIZE);\n\t\twdata->bytes = ((nr_pages - 1) * PAGE_CACHE_SIZE) +\n\t\t\t\t\twdata->tailsz;\n\n\t\tdo {\n\t\t\tif (wdata->cfile != NULL)\n\t\t\t\tcifsFileInfo_put(wdata->cfile);\n\t\t\twdata->cfile = find_writable_file(CIFS_I(mapping->host),\n\t\t\t\t\t\t\t  false);\n\t\t\tif (!wdata->cfile) {\n\t\t\t\tcifs_dbg(VFS, \"No writable handles for inode\\n\");\n\t\t\t\trc = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\twdata->pid = wdata->cfile->pid;\n\t\t\tserver = tlink_tcon(wdata->cfile->tlink)->ses->server;\n\t\t\trc = server->ops->async_writev(wdata,\n\t\t\t\t\t\t\tcifs_writedata_release);\n\t\t} while (wbc->sync_mode == WB_SYNC_ALL && rc == -EAGAIN);\n\n\t\tfor (i = 0; i < nr_pages; ++i)\n\t\t\tunlock_page(wdata->pages[i]);\n\n\t\t/* send failure -- clean up the mess */\n\t\tif (rc != 0) {\n\t\t\tfor (i = 0; i < nr_pages; ++i) {\n\t\t\t\tif (rc == -EAGAIN)\n\t\t\t\t\tredirty_page_for_writepage(wbc,\n\t\t\t\t\t\t\t   wdata->pages[i]);\n\t\t\t\telse\n\t\t\t\t\tSetPageError(wdata->pages[i]);\n\t\t\t\tend_page_writeback(wdata->pages[i]);\n\t\t\t\tpage_cache_release(wdata->pages[i]);\n\t\t\t}\n\t\t\tif (rc != -EAGAIN)\n\t\t\t\tmapping_set_error(mapping, rc);\n\t\t}\n\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\n\t\twbc->nr_to_write -= nr_pages;\n\t\tif (wbc->nr_to_write <= 0)\n\t\t\tdone = true;\n\n\t\tindex = next;\n\t}\n\n\tif (!scanned && !done) {\n\t\t/*\n\t\t * We hit the last page and there is more work to be done: wrap\n\t\t * back to the start of the file\n\t\t */\n\t\tscanned = true;\n\t\tindex = 0;\n\t\tgoto retry;\n\t}\n\n\tif (wbc->range_cyclic || (range_whole && wbc->nr_to_write > 0))\n\t\tmapping->writeback_index = index;\n\n\treturn rc;\n}\n\nstatic int\ncifs_writepage_locked(struct page *page, struct writeback_control *wbc)\n{\n\tint rc;\n\tunsigned int xid;\n\n\txid = get_xid();\n/* BB add check for wbc flags */\n\tpage_cache_get(page);\n\tif (!PageUptodate(page))\n\t\tcifs_dbg(FYI, \"ppw - page not up to date\\n\");\n\n\t/*\n\t * Set the \"writeback\" flag, and clear \"dirty\" in the radix tree.\n\t *\n\t * A writepage() implementation always needs to do either this,\n\t * or re-dirty the page with \"redirty_page_for_writepage()\" in\n\t * the case of a failure.\n\t *\n\t * Just unlocking the page will cause the radix tree tag-bits\n\t * to fail to update with the state of the page correctly.\n\t */\n\tset_page_writeback(page);\nretry_write:\n\trc = cifs_partialpagewrite(page, 0, PAGE_CACHE_SIZE);\n\tif (rc == -EAGAIN && wbc->sync_mode == WB_SYNC_ALL)\n\t\tgoto retry_write;\n\telse if (rc == -EAGAIN)\n\t\tredirty_page_for_writepage(wbc, page);\n\telse if (rc != 0)\n\t\tSetPageError(page);\n\telse\n\t\tSetPageUptodate(page);\n\tend_page_writeback(page);\n\tpage_cache_release(page);\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic int cifs_writepage(struct page *page, struct writeback_control *wbc)\n{\n\tint rc = cifs_writepage_locked(page, wbc);\n\tunlock_page(page);\n\treturn rc;\n}\n\nstatic int cifs_write_end(struct file *file, struct address_space *mapping,\n\t\t\tloff_t pos, unsigned len, unsigned copied,\n\t\t\tstruct page *page, void *fsdata)\n{\n\tint rc;\n\tstruct inode *inode = mapping->host;\n\tstruct cifsFileInfo *cfile = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\t__u32 pid;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = cfile->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tcifs_dbg(FYI, \"write_end for page %p from pos %lld with %d bytes\\n\",\n\t\t page, pos, copied);\n\n\tif (PageChecked(page)) {\n\t\tif (copied == len)\n\t\t\tSetPageUptodate(page);\n\t\tClearPageChecked(page);\n\t} else if (!PageUptodate(page) && copied == PAGE_CACHE_SIZE)\n\t\tSetPageUptodate(page);\n\n\tif (!PageUptodate(page)) {\n\t\tchar *page_data;\n\t\tunsigned offset = pos & (PAGE_CACHE_SIZE - 1);\n\t\tunsigned int xid;\n\n\t\txid = get_xid();\n\t\t/* this is probably better than directly calling\n\t\t   partialpage_write since in this function the file handle is\n\t\t   known which we might as well\tleverage */\n\t\t/* BB check if anything else missing out of ppw\n\t\t   such as updating last write time */\n\t\tpage_data = kmap(page);\n\t\trc = cifs_write(cfile, pid, page_data + offset, copied, &pos);\n\t\t/* if (rc < 0) should we set writebehind rc? */\n\t\tkunmap(page);\n\n\t\tfree_xid(xid);\n\t} else {\n\t\trc = copied;\n\t\tpos += copied;\n\t\tset_page_dirty(page);\n\t}\n\n\tif (rc > 0) {\n\t\tspin_lock(&inode->i_lock);\n\t\tif (pos > inode->i_size)\n\t\t\ti_size_write(inode, pos);\n\t\tspin_unlock(&inode->i_lock);\n\t}\n\n\tunlock_page(page);\n\tpage_cache_release(page);\n\n\treturn rc;\n}\n\nint cifs_strict_fsync(struct file *file, loff_t start, loff_t end,\n\t\t      int datasync)\n{\n\tunsigned int xid;\n\tint rc = 0;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsFileInfo *smbfile = file->private_data;\n\tstruct inode *inode = file_inode(file);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\n\trc = filemap_write_and_wait_range(inode->i_mapping, start, end);\n\tif (rc)\n\t\treturn rc;\n\tmutex_lock(&inode->i_mutex);\n\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Sync file - name: %s datasync: 0x%x\\n\",\n\t\t file->f_path.dentry->d_name.name, datasync);\n\n\tif (!CIFS_CACHE_READ(CIFS_I(inode))) {\n\t\trc = cifs_invalidate_mapping(inode);\n\t\tif (rc) {\n\t\t\tcifs_dbg(FYI, \"rc: %d during invalidate phase\\n\", rc);\n\t\t\trc = 0; /* don't care about it in fsync */\n\t\t}\n\t}\n\n\ttcon = tlink_tcon(smbfile->tlink);\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOSSYNC)) {\n\t\tserver = tcon->ses->server;\n\t\tif (server->ops->flush)\n\t\t\trc = server->ops->flush(xid, tcon, &smbfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t}\n\n\tfree_xid(xid);\n\tmutex_unlock(&inode->i_mutex);\n\treturn rc;\n}\n\nint cifs_fsync(struct file *file, loff_t start, loff_t end, int datasync)\n{\n\tunsigned int xid;\n\tint rc = 0;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsFileInfo *smbfile = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tstruct inode *inode = file->f_mapping->host;\n\n\trc = filemap_write_and_wait_range(inode->i_mapping, start, end);\n\tif (rc)\n\t\treturn rc;\n\tmutex_lock(&inode->i_mutex);\n\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Sync file - name: %s datasync: 0x%x\\n\",\n\t\t file->f_path.dentry->d_name.name, datasync);\n\n\ttcon = tlink_tcon(smbfile->tlink);\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOSSYNC)) {\n\t\tserver = tcon->ses->server;\n\t\tif (server->ops->flush)\n\t\t\trc = server->ops->flush(xid, tcon, &smbfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t}\n\n\tfree_xid(xid);\n\tmutex_unlock(&inode->i_mutex);\n\treturn rc;\n}\n\n/*\n * As file closes, flush all cached write data for this inode checking\n * for write behind errors.\n */\nint cifs_flush(struct file *file, fl_owner_t id)\n{\n\tstruct inode *inode = file_inode(file);\n\tint rc = 0;\n\n\tif (file->f_mode & FMODE_WRITE)\n\t\trc = filemap_write_and_wait(inode->i_mapping);\n\n\tcifs_dbg(FYI, \"Flush inode %p file %p rc %d\\n\", inode, file, rc);\n\n\treturn rc;\n}\n\nstatic int\ncifs_write_allocate_pages(struct page **pages, unsigned long num_pages)\n{\n\tint rc = 0;\n\tunsigned long i;\n\n\tfor (i = 0; i < num_pages; i++) {\n\t\tpages[i] = alloc_page(GFP_KERNEL|__GFP_HIGHMEM);\n\t\tif (!pages[i]) {\n\t\t\t/*\n\t\t\t * save number of pages we have already allocated and\n\t\t\t * return with ENOMEM error\n\t\t\t */\n\t\t\tnum_pages = i;\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rc) {\n\t\tfor (i = 0; i < num_pages; i++)\n\t\t\tput_page(pages[i]);\n\t}\n\treturn rc;\n}\n\nstatic inline\nsize_t get_numpages(const size_t wsize, const size_t len, size_t *cur_len)\n{\n\tsize_t num_pages;\n\tsize_t clen;\n\n\tclen = min_t(const size_t, len, wsize);\n\tnum_pages = DIV_ROUND_UP(clen, PAGE_SIZE);\n\n\tif (cur_len)\n\t\t*cur_len = clen;\n\n\treturn num_pages;\n}\n\nstatic void\ncifs_uncached_writedata_release(struct kref *refcount)\n{\n\tint i;\n\tstruct cifs_writedata *wdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_writedata, refcount);\n\n\tfor (i = 0; i < wdata->nr_pages; i++)\n\t\tput_page(wdata->pages[i]);\n\tcifs_writedata_release(refcount);\n}\n\nstatic void\ncifs_uncached_writev_complete(struct work_struct *work)\n{\n\tstruct cifs_writedata *wdata = container_of(work,\n\t\t\t\t\tstruct cifs_writedata, work);\n\tstruct inode *inode = wdata->cfile->dentry->d_inode;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(inode);\n\n\tspin_lock(&inode->i_lock);\n\tcifs_update_eof(cifsi, wdata->offset, wdata->bytes);\n\tif (cifsi->server_eof > inode->i_size)\n\t\ti_size_write(inode, cifsi->server_eof);\n\tspin_unlock(&inode->i_lock);\n\n\tcomplete(&wdata->done);\n\n\tkref_put(&wdata->refcount, cifs_uncached_writedata_release);\n}\n\n/* attempt to send write to server, retry on any -EAGAIN errors */\nstatic int\ncifs_uncached_retry_writev(struct cifs_writedata *wdata)\n{\n\tint rc;\n\tstruct TCP_Server_Info *server;\n\n\tserver = tlink_tcon(wdata->cfile->tlink)->ses->server;\n\n\tdo {\n\t\tif (wdata->cfile->invalidHandle) {\n\t\t\trc = cifs_reopen_file(wdata->cfile, false);\n\t\t\tif (rc != 0)\n\t\t\t\tcontinue;\n\t\t}\n\t\trc = server->ops->async_writev(wdata,\n\t\t\t\t\t       cifs_uncached_writedata_release);\n\t} while (rc == -EAGAIN);\n\n\treturn rc;\n}\n\nstatic ssize_t\ncifs_iovec_write(struct file *file, const struct iovec *iov,\n\t\t unsigned long nr_segs, loff_t *poffset)\n{\n\tunsigned long nr_pages, i;\n\tsize_t copied, len, cur_len;\n\tssize_t total_written = 0;\n\tloff_t offset;\n\tstruct iov_iter it;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_tcon *tcon;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_writedata *wdata, *tmp;\n\tstruct list_head wdata_list;\n\tint rc;\n\tpid_t pid;\n\n\tlen = iov_length(iov, nr_segs);\n\tif (!len)\n\t\treturn 0;\n\n\trc = generic_write_checks(file, poffset, &len, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tINIT_LIST_HEAD(&wdata_list);\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\n\tif (!tcon->ses->server->ops->async_writev)\n\t\treturn -ENOSYS;\n\n\toffset = *poffset;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tiov_iter_init(&it, iov, nr_segs, len, 0);\n\tdo {\n\t\tsize_t save_len;\n\n\t\tnr_pages = get_numpages(cifs_sb->wsize, len, &cur_len);\n\t\twdata = cifs_writedata_alloc(nr_pages,\n\t\t\t\t\t     cifs_uncached_writev_complete);\n\t\tif (!wdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\trc = cifs_write_allocate_pages(wdata->pages, nr_pages);\n\t\tif (rc) {\n\t\t\tkfree(wdata);\n\t\t\tbreak;\n\t\t}\n\n\t\tsave_len = cur_len;\n\t\tfor (i = 0; i < nr_pages; i++) {\n\t\t\tcopied = min_t(const size_t, cur_len, PAGE_SIZE);\n\t\t\tcopied = iov_iter_copy_from_user(wdata->pages[i], &it,\n\t\t\t\t\t\t\t 0, copied);\n\t\t\tcur_len -= copied;\n\t\t\tiov_iter_advance(&it, copied);\n\t\t}\n\t\tcur_len = save_len - cur_len;\n\n\t\twdata->sync_mode = WB_SYNC_ALL;\n\t\twdata->nr_pages = nr_pages;\n\t\twdata->offset = (__u64)offset;\n\t\twdata->cfile = cifsFileInfo_get(open_file);\n\t\twdata->pid = pid;\n\t\twdata->bytes = cur_len;\n\t\twdata->pagesz = PAGE_SIZE;\n\t\twdata->tailsz = cur_len - ((nr_pages - 1) * PAGE_SIZE);\n\t\trc = cifs_uncached_retry_writev(wdata);\n\t\tif (rc) {\n\t\t\tkref_put(&wdata->refcount,\n\t\t\t\t cifs_uncached_writedata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tlist_add_tail(&wdata->list, &wdata_list);\n\t\toffset += cur_len;\n\t\tlen -= cur_len;\n\t} while (len > 0);\n\n\t/*\n\t * If at least one write was successfully sent, then discard any rc\n\t * value from the later writes. If the other write succeeds, then\n\t * we'll end up returning whatever was written. If it fails, then\n\t * we'll get a new rc value from that.\n\t */\n\tif (!list_empty(&wdata_list))\n\t\trc = 0;\n\n\t/*\n\t * Wait for and collect replies for any successful sends in order of\n\t * increasing offset. Once an error is hit or we get a fatal signal\n\t * while waiting, then return without waiting for any more replies.\n\t */\nrestart_loop:\n\tlist_for_each_entry_safe(wdata, tmp, &wdata_list, list) {\n\t\tif (!rc) {\n\t\t\t/* FIXME: freezable too? */\n\t\t\trc = wait_for_completion_killable(&wdata->done);\n\t\t\tif (rc)\n\t\t\t\trc = -EINTR;\n\t\t\telse if (wdata->result)\n\t\t\t\trc = wdata->result;\n\t\t\telse\n\t\t\t\ttotal_written += wdata->bytes;\n\n\t\t\t/* resend call if it's a retryable error */\n\t\t\tif (rc == -EAGAIN) {\n\t\t\t\trc = cifs_uncached_retry_writev(wdata);\n\t\t\t\tgoto restart_loop;\n\t\t\t}\n\t\t}\n\t\tlist_del_init(&wdata->list);\n\t\tkref_put(&wdata->refcount, cifs_uncached_writedata_release);\n\t}\n\n\tif (total_written > 0)\n\t\t*poffset += total_written;\n\n\tcifs_stats_bytes_written(tcon, total_written);\n\treturn total_written ? total_written : (ssize_t)rc;\n}\n\nssize_t cifs_user_writev(struct kiocb *iocb, const struct iovec *iov,\n\t\t\t\tunsigned long nr_segs, loff_t pos)\n{\n\tssize_t written;\n\tstruct inode *inode;\n\n\tinode = file_inode(iocb->ki_filp);\n\n\t/*\n\t * BB - optimize the way when signing is disabled. We can drop this\n\t * extra memory-to-memory copying and use iovec buffers for constructing\n\t * write request.\n\t */\n\n\twritten = cifs_iovec_write(iocb->ki_filp, iov, nr_segs, &pos);\n\tif (written > 0) {\n\t\tCIFS_I(inode)->invalid_mapping = true;\n\t\tiocb->ki_pos = pos;\n\t}\n\n\treturn written;\n}\n\nstatic ssize_t\ncifs_writev(struct kiocb *iocb, const struct iovec *iov,\n\t    unsigned long nr_segs, loff_t pos)\n{\n\tstruct file *file = iocb->ki_filp;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct inode *inode = file->f_mapping->host;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\tssize_t rc = -EACCES;\n\n\tBUG_ON(iocb->ki_pos != pos);\n\n\t/*\n\t * We need to hold the sem to be sure nobody modifies lock list\n\t * with a brlock that prevents writing.\n\t */\n\tdown_read(&cinode->lock_sem);\n\tif (!cifs_find_lock_conflict(cfile, pos, iov_length(iov, nr_segs),\n\t\t\t\t     server->vals->exclusive_lock_type, NULL,\n\t\t\t\t     CIFS_WRITE_OP)) {\n\t\tmutex_lock(&inode->i_mutex);\n\t\trc = __generic_file_aio_write(iocb, iov, nr_segs,\n\t\t\t\t\t       &iocb->ki_pos);\n\t\tmutex_unlock(&inode->i_mutex);\n\t}\n\n\tif (rc > 0) {\n\t\tssize_t err;\n\n\t\terr = generic_write_sync(file, pos, rc);\n\t\tif (err < 0 && rc > 0)\n\t\t\trc = err;\n\t}\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nssize_t\ncifs_strict_writev(struct kiocb *iocb, const struct iovec *iov,\n\t\t   unsigned long nr_segs, loff_t pos)\n{\n\tstruct inode *inode = file_inode(iocb->ki_filp);\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)\n\t\t\t\t\t\tiocb->ki_filp->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tssize_t written;\n\n\tif (CIFS_CACHE_WRITE(cinode)) {\n\t\tif (cap_unix(tcon->ses) &&\n\t\t(CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability))\n\t\t    && ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\t\treturn generic_file_aio_write(iocb, iov, nr_segs, pos);\n\t\treturn cifs_writev(iocb, iov, nr_segs, pos);\n\t}\n\t/*\n\t * For non-oplocked files in strict cache mode we need to write the data\n\t * to the server exactly from the pos to pos+len-1 rather than flush all\n\t * affected pages because it may cause a error with mandatory locks on\n\t * these pages but not on the region from pos to ppos+len-1.\n\t */\n\twritten = cifs_user_writev(iocb, iov, nr_segs, pos);\n\tif (written > 0 && CIFS_CACHE_READ(cinode)) {\n\t\t/*\n\t\t * Windows 7 server can delay breaking level2 oplock if a write\n\t\t * request comes - break it on the client to prevent reading\n\t\t * an old data.\n\t\t */\n\t\tcifs_invalidate_mapping(inode);\n\t\tcifs_dbg(FYI, \"Set no oplock for inode=%p after a write operation\\n\",\n\t\t\t inode);\n\t\tcinode->oplock = 0;\n\t}\n\treturn written;\n}\n\nstatic struct cifs_readdata *\ncifs_readdata_alloc(unsigned int nr_pages, work_func_t complete)\n{\n\tstruct cifs_readdata *rdata;\n\n\trdata = kzalloc(sizeof(*rdata) + (sizeof(struct page *) * nr_pages),\n\t\t\tGFP_KERNEL);\n\tif (rdata != NULL) {\n\t\tkref_init(&rdata->refcount);\n\t\tINIT_LIST_HEAD(&rdata->list);\n\t\tinit_completion(&rdata->done);\n\t\tINIT_WORK(&rdata->work, complete);\n\t}\n\n\treturn rdata;\n}\n\nvoid\ncifs_readdata_release(struct kref *refcount)\n{\n\tstruct cifs_readdata *rdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_readdata, refcount);\n\n\tif (rdata->cfile)\n\t\tcifsFileInfo_put(rdata->cfile);\n\n\tkfree(rdata);\n}\n\nstatic int\ncifs_read_allocate_pages(struct cifs_readdata *rdata, unsigned int nr_pages)\n{\n\tint rc = 0;\n\tstruct page *page;\n\tunsigned int i;\n\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tpage = alloc_page(GFP_KERNEL|__GFP_HIGHMEM);\n\t\tif (!page) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t\trdata->pages[i] = page;\n\t}\n\n\tif (rc) {\n\t\tfor (i = 0; i < nr_pages; i++) {\n\t\t\tput_page(rdata->pages[i]);\n\t\t\trdata->pages[i] = NULL;\n\t\t}\n\t}\n\treturn rc;\n}\n\nstatic void\ncifs_uncached_readdata_release(struct kref *refcount)\n{\n\tstruct cifs_readdata *rdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_readdata, refcount);\n\tunsigned int i;\n\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tput_page(rdata->pages[i]);\n\t\trdata->pages[i] = NULL;\n\t}\n\tcifs_readdata_release(refcount);\n}\n\nstatic int\ncifs_retry_async_readv(struct cifs_readdata *rdata)\n{\n\tint rc;\n\tstruct TCP_Server_Info *server;\n\n\tserver = tlink_tcon(rdata->cfile->tlink)->ses->server;\n\n\tdo {\n\t\tif (rdata->cfile->invalidHandle) {\n\t\t\trc = cifs_reopen_file(rdata->cfile, true);\n\t\t\tif (rc != 0)\n\t\t\t\tcontinue;\n\t\t}\n\t\trc = server->ops->async_readv(rdata);\n\t} while (rc == -EAGAIN);\n\n\treturn rc;\n}\n\n/**\n * cifs_readdata_to_iov - copy data from pages in response to an iovec\n * @rdata:\tthe readdata response with list of pages holding data\n * @iov:\tvector in which we should copy the data\n * @nr_segs:\tnumber of segments in vector\n * @offset:\toffset into file of the first iovec\n * @copied:\tused to return the amount of data copied to the iov\n *\n * This function copies data from a list of pages in a readdata response into\n * an array of iovecs. It will first calculate where the data should go\n * based on the info in the readdata and then copy the data into that spot.\n */\nstatic ssize_t\ncifs_readdata_to_iov(struct cifs_readdata *rdata, const struct iovec *iov,\n\t\t\tunsigned long nr_segs, loff_t offset, ssize_t *copied)\n{\n\tint rc = 0;\n\tstruct iov_iter ii;\n\tsize_t pos = rdata->offset - offset;\n\tssize_t remaining = rdata->bytes;\n\tunsigned char *pdata;\n\tunsigned int i;\n\n\t/* set up iov_iter and advance to the correct offset */\n\tiov_iter_init(&ii, iov, nr_segs, iov_length(iov, nr_segs), 0);\n\tiov_iter_advance(&ii, pos);\n\n\t*copied = 0;\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tssize_t copy;\n\t\tstruct page *page = rdata->pages[i];\n\n\t\t/* copy a whole page or whatever's left */\n\t\tcopy = min_t(ssize_t, remaining, PAGE_SIZE);\n\n\t\t/* ...but limit it to whatever space is left in the iov */\n\t\tcopy = min_t(ssize_t, copy, iov_iter_count(&ii));\n\n\t\t/* go while there's data to be copied and no errors */\n\t\tif (copy && !rc) {\n\t\t\tpdata = kmap(page);\n\t\t\trc = memcpy_toiovecend(ii.iov, pdata, ii.iov_offset,\n\t\t\t\t\t\t(int)copy);\n\t\t\tkunmap(page);\n\t\t\tif (!rc) {\n\t\t\t\t*copied += copy;\n\t\t\t\tremaining -= copy;\n\t\t\t\tiov_iter_advance(&ii, copy);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn rc;\n}\n\nstatic void\ncifs_uncached_readv_complete(struct work_struct *work)\n{\n\tstruct cifs_readdata *rdata = container_of(work,\n\t\t\t\t\t\tstruct cifs_readdata, work);\n\n\tcomplete(&rdata->done);\n\tkref_put(&rdata->refcount, cifs_uncached_readdata_release);\n}\n\nstatic int\ncifs_uncached_read_into_pages(struct TCP_Server_Info *server,\n\t\t\tstruct cifs_readdata *rdata, unsigned int len)\n{\n\tint total_read = 0, result = 0;\n\tunsigned int i;\n\tunsigned int nr_pages = rdata->nr_pages;\n\tstruct kvec iov;\n\n\trdata->tailsz = PAGE_SIZE;\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tif (len >= PAGE_SIZE) {\n\t\t\t/* enough data to fill the page */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = PAGE_SIZE;\n\t\t\tcifs_dbg(FYI, \"%u: iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, iov.iov_base, iov.iov_len);\n\t\t\tlen -= PAGE_SIZE;\n\t\t} else if (len > 0) {\n\t\t\t/* enough for partial page, fill and zero the rest */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = len;\n\t\t\tcifs_dbg(FYI, \"%u: iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, iov.iov_base, iov.iov_len);\n\t\t\tmemset(iov.iov_base + len, '\\0', PAGE_SIZE - len);\n\t\t\trdata->tailsz = len;\n\t\t\tlen = 0;\n\t\t} else {\n\t\t\t/* no need to hold page hostage */\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tput_page(page);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = cifs_readv_from_socket(server, &iov, 1, iov.iov_len);\n\t\tkunmap(page);\n\t\tif (result < 0)\n\t\t\tbreak;\n\n\t\ttotal_read += result;\n\t}\n\n\treturn total_read > 0 ? total_read : result;\n}\n\nstatic ssize_t\ncifs_iovec_read(struct file *file, const struct iovec *iov,\n\t\t unsigned long nr_segs, loff_t *poffset)\n{\n\tssize_t rc;\n\tsize_t len, cur_len;\n\tssize_t total_read = 0;\n\tloff_t offset = *poffset;\n\tunsigned int npages;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_readdata *rdata, *tmp;\n\tstruct list_head rdata_list;\n\tpid_t pid;\n\n\tif (!nr_segs)\n\t\treturn 0;\n\n\tlen = iov_length(iov, nr_segs);\n\tif (!len)\n\t\treturn 0;\n\n\tINIT_LIST_HEAD(&rdata_list);\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\n\tif (!tcon->ses->server->ops->async_readv)\n\t\treturn -ENOSYS;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tif ((file->f_flags & O_ACCMODE) == O_WRONLY)\n\t\tcifs_dbg(FYI, \"attempting read on write only file instance\\n\");\n\n\tdo {\n\t\tcur_len = min_t(const size_t, len - total_read, cifs_sb->rsize);\n\t\tnpages = DIV_ROUND_UP(cur_len, PAGE_SIZE);\n\n\t\t/* allocate a readdata struct */\n\t\trdata = cifs_readdata_alloc(npages,\n\t\t\t\t\t    cifs_uncached_readv_complete);\n\t\tif (!rdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto error;\n\t\t}\n\n\t\trc = cifs_read_allocate_pages(rdata, npages);\n\t\tif (rc)\n\t\t\tgoto error;\n\n\t\trdata->cfile = cifsFileInfo_get(open_file);\n\t\trdata->nr_pages = npages;\n\t\trdata->offset = offset;\n\t\trdata->bytes = cur_len;\n\t\trdata->pid = pid;\n\t\trdata->pagesz = PAGE_SIZE;\n\t\trdata->read_into_pages = cifs_uncached_read_into_pages;\n\n\t\trc = cifs_retry_async_readv(rdata);\nerror:\n\t\tif (rc) {\n\t\t\tkref_put(&rdata->refcount,\n\t\t\t\t cifs_uncached_readdata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tlist_add_tail(&rdata->list, &rdata_list);\n\t\toffset += cur_len;\n\t\tlen -= cur_len;\n\t} while (len > 0);\n\n\t/* if at least one read request send succeeded, then reset rc */\n\tif (!list_empty(&rdata_list))\n\t\trc = 0;\n\n\t/* the loop below should proceed in the order of increasing offsets */\nrestart_loop:\n\tlist_for_each_entry_safe(rdata, tmp, &rdata_list, list) {\n\t\tif (!rc) {\n\t\t\tssize_t copied;\n\n\t\t\t/* FIXME: freezable sleep too? */\n\t\t\trc = wait_for_completion_killable(&rdata->done);\n\t\t\tif (rc)\n\t\t\t\trc = -EINTR;\n\t\t\telse if (rdata->result)\n\t\t\t\trc = rdata->result;\n\t\t\telse {\n\t\t\t\trc = cifs_readdata_to_iov(rdata, iov,\n\t\t\t\t\t\t\tnr_segs, *poffset,\n\t\t\t\t\t\t\t&copied);\n\t\t\t\ttotal_read += copied;\n\t\t\t}\n\n\t\t\t/* resend call if it's a retryable error */\n\t\t\tif (rc == -EAGAIN) {\n\t\t\t\trc = cifs_retry_async_readv(rdata);\n\t\t\t\tgoto restart_loop;\n\t\t\t}\n\t\t}\n\t\tlist_del_init(&rdata->list);\n\t\tkref_put(&rdata->refcount, cifs_uncached_readdata_release);\n\t}\n\n\tcifs_stats_bytes_read(tcon, total_read);\n\t*poffset += total_read;\n\n\t/* mask nodata case */\n\tif (rc == -ENODATA)\n\t\trc = 0;\n\n\treturn total_read ? total_read : rc;\n}\n\nssize_t cifs_user_readv(struct kiocb *iocb, const struct iovec *iov,\n\t\t\t       unsigned long nr_segs, loff_t pos)\n{\n\tssize_t read;\n\n\tread = cifs_iovec_read(iocb->ki_filp, iov, nr_segs, &pos);\n\tif (read > 0)\n\t\tiocb->ki_pos = pos;\n\n\treturn read;\n}\n\nssize_t\ncifs_strict_readv(struct kiocb *iocb, const struct iovec *iov,\n\t\t  unsigned long nr_segs, loff_t pos)\n{\n\tstruct inode *inode = file_inode(iocb->ki_filp);\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)\n\t\t\t\t\t\tiocb->ki_filp->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = -EACCES;\n\n\t/*\n\t * In strict cache mode we need to read from the server all the time\n\t * if we don't have level II oplock because the server can delay mtime\n\t * change - so we can't make a decision about inode invalidating.\n\t * And we can also fail with pagereading if there are mandatory locks\n\t * on pages affected by this read but not on the region from pos to\n\t * pos+len-1.\n\t */\n\tif (!CIFS_CACHE_READ(cinode))\n\t\treturn cifs_user_readv(iocb, iov, nr_segs, pos);\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\treturn generic_file_aio_read(iocb, iov, nr_segs, pos);\n\n\t/*\n\t * We need to hold the sem to be sure nobody modifies lock list\n\t * with a brlock that prevents reading.\n\t */\n\tdown_read(&cinode->lock_sem);\n\tif (!cifs_find_lock_conflict(cfile, pos, iov_length(iov, nr_segs),\n\t\t\t\t     tcon->ses->server->vals->shared_lock_type,\n\t\t\t\t     NULL, CIFS_READ_OP))\n\t\trc = generic_file_aio_read(iocb, iov, nr_segs, pos);\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic ssize_t\ncifs_read(struct file *file, char *read_data, size_t read_size, loff_t *offset)\n{\n\tint rc = -EACCES;\n\tunsigned int bytes_read = 0;\n\tunsigned int total_read;\n\tunsigned int current_read_size;\n\tunsigned int rsize;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tunsigned int xid;\n\tchar *cur_offset;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_io_parms io_parms;\n\tint buf_type = CIFS_NO_BUFFER;\n\t__u32 pid;\n\n\txid = get_xid();\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\n\t/* FIXME: set up handlers for larger reads and/or convert to async */\n\trsize = min_t(unsigned int, cifs_sb->rsize, CIFSMaxBufSize);\n\n\tif (file->private_data == NULL) {\n\t\trc = -EBADF;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\tserver = tcon->ses->server;\n\n\tif (!server->ops->sync_read) {\n\t\tfree_xid(xid);\n\t\treturn -ENOSYS;\n\t}\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tif ((file->f_flags & O_ACCMODE) == O_WRONLY)\n\t\tcifs_dbg(FYI, \"attempting read on write only file instance\\n\");\n\n\tfor (total_read = 0, cur_offset = read_data; read_size > total_read;\n\t     total_read += bytes_read, cur_offset += bytes_read) {\n\t\tcurrent_read_size = min_t(uint, read_size - total_read, rsize);\n\t\t/*\n\t\t * For windows me and 9x we do not want to request more than it\n\t\t * negotiated since it will refuse the read then.\n\t\t */\n\t\tif ((tcon->ses) && !(tcon->ses->capabilities &\n\t\t\t\ttcon->ses->server->vals->cap_large_files)) {\n\t\t\tcurrent_read_size = min_t(uint, current_read_size,\n\t\t\t\t\tCIFSMaxBufSize);\n\t\t}\n\t\trc = -EAGAIN;\n\t\twhile (rc == -EAGAIN) {\n\t\t\tif (open_file->invalidHandle) {\n\t\t\t\trc = cifs_reopen_file(open_file, true);\n\t\t\t\tif (rc != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tio_parms.pid = pid;\n\t\t\tio_parms.tcon = tcon;\n\t\t\tio_parms.offset = *offset;\n\t\t\tio_parms.length = current_read_size;\n\t\t\trc = server->ops->sync_read(xid, open_file, &io_parms,\n\t\t\t\t\t\t    &bytes_read, &cur_offset,\n\t\t\t\t\t\t    &buf_type);\n\t\t}\n\t\tif (rc || (bytes_read == 0)) {\n\t\t\tif (total_read) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tfree_xid(xid);\n\t\t\t\treturn rc;\n\t\t\t}\n\t\t} else {\n\t\t\tcifs_stats_bytes_read(tcon, total_read);\n\t\t\t*offset += bytes_read;\n\t\t}\n\t}\n\tfree_xid(xid);\n\treturn total_read;\n}\n\n/*\n * If the page is mmap'ed into a process' page tables, then we need to make\n * sure that it doesn't change while being written back.\n */\nstatic int\ncifs_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf)\n{\n\tstruct page *page = vmf->page;\n\n\tlock_page(page);\n\treturn VM_FAULT_LOCKED;\n}\n\nstatic struct vm_operations_struct cifs_file_vm_ops = {\n\t.fault = filemap_fault,\n\t.page_mkwrite = cifs_page_mkwrite,\n\t.remap_pages = generic_file_remap_pages,\n};\n\nint cifs_file_strict_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tint rc, xid;\n\tstruct inode *inode = file_inode(file);\n\n\txid = get_xid();\n\n\tif (!CIFS_CACHE_READ(CIFS_I(inode))) {\n\t\trc = cifs_invalidate_mapping(inode);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\trc = generic_file_mmap(file, vma);\n\tif (rc == 0)\n\t\tvma->vm_ops = &cifs_file_vm_ops;\n\tfree_xid(xid);\n\treturn rc;\n}\n\nint cifs_file_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tint rc, xid;\n\n\txid = get_xid();\n\trc = cifs_revalidate_file(file);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"Validation prior to mmap failed, error=%d\\n\",\n\t\t\t rc);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\trc = generic_file_mmap(file, vma);\n\tif (rc == 0)\n\t\tvma->vm_ops = &cifs_file_vm_ops;\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic void\ncifs_readv_complete(struct work_struct *work)\n{\n\tunsigned int i;\n\tstruct cifs_readdata *rdata = container_of(work,\n\t\t\t\t\t\tstruct cifs_readdata, work);\n\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tlru_cache_add_file(page);\n\n\t\tif (rdata->result == 0) {\n\t\t\tflush_dcache_page(page);\n\t\t\tSetPageUptodate(page);\n\t\t}\n\n\t\tunlock_page(page);\n\n\t\tif (rdata->result == 0)\n\t\t\tcifs_readpage_to_fscache(rdata->mapping->host, page);\n\n\t\tpage_cache_release(page);\n\t\trdata->pages[i] = NULL;\n\t}\n\tkref_put(&rdata->refcount, cifs_readdata_release);\n}\n\nstatic int\ncifs_readpages_read_into_pages(struct TCP_Server_Info *server,\n\t\t\tstruct cifs_readdata *rdata, unsigned int len)\n{\n\tint total_read = 0, result = 0;\n\tunsigned int i;\n\tu64 eof;\n\tpgoff_t eof_index;\n\tunsigned int nr_pages = rdata->nr_pages;\n\tstruct kvec iov;\n\n\t/* determine the eof that the server (probably) has */\n\teof = CIFS_I(rdata->mapping->host)->server_eof;\n\teof_index = eof ? (eof - 1) >> PAGE_CACHE_SHIFT : 0;\n\tcifs_dbg(FYI, \"eof=%llu eof_index=%lu\\n\", eof, eof_index);\n\n\trdata->tailsz = PAGE_CACHE_SIZE;\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tif (len >= PAGE_CACHE_SIZE) {\n\t\t\t/* enough data to fill the page */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = PAGE_CACHE_SIZE;\n\t\t\tcifs_dbg(FYI, \"%u: idx=%lu iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, page->index, iov.iov_base, iov.iov_len);\n\t\t\tlen -= PAGE_CACHE_SIZE;\n\t\t} else if (len > 0) {\n\t\t\t/* enough for partial page, fill and zero the rest */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = len;\n\t\t\tcifs_dbg(FYI, \"%u: idx=%lu iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, page->index, iov.iov_base, iov.iov_len);\n\t\t\tmemset(iov.iov_base + len,\n\t\t\t\t'\\0', PAGE_CACHE_SIZE - len);\n\t\t\trdata->tailsz = len;\n\t\t\tlen = 0;\n\t\t} else if (page->index > eof_index) {\n\t\t\t/*\n\t\t\t * The VFS will not try to do readahead past the\n\t\t\t * i_size, but it's possible that we have outstanding\n\t\t\t * writes with gaps in the middle and the i_size hasn't\n\t\t\t * caught up yet. Populate those with zeroed out pages\n\t\t\t * to prevent the VFS from repeatedly attempting to\n\t\t\t * fill them until the writes are flushed.\n\t\t\t */\n\t\t\tzero_user(page, 0, PAGE_CACHE_SIZE);\n\t\t\tlru_cache_add_file(page);\n\t\t\tflush_dcache_page(page);\n\t\t\tSetPageUptodate(page);\n\t\t\tunlock_page(page);\n\t\t\tpage_cache_release(page);\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* no need to hold page hostage */\n\t\t\tlru_cache_add_file(page);\n\t\t\tunlock_page(page);\n\t\t\tpage_cache_release(page);\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = cifs_readv_from_socket(server, &iov, 1, iov.iov_len);\n\t\tkunmap(page);\n\t\tif (result < 0)\n\t\t\tbreak;\n\n\t\ttotal_read += result;\n\t}\n\n\treturn total_read > 0 ? total_read : result;\n}\n\nstatic int cifs_readpages(struct file *file, struct address_space *mapping,\n\tstruct list_head *page_list, unsigned num_pages)\n{\n\tint rc;\n\tstruct list_head tmplist;\n\tstruct cifsFileInfo *open_file = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tunsigned int rsize = cifs_sb->rsize;\n\tpid_t pid;\n\n\t/*\n\t * Give up immediately if rsize is too small to read an entire page.\n\t * The VFS will fall back to readpage. We should never reach this\n\t * point however since we set ra_pages to 0 when the rsize is smaller\n\t * than a cache page.\n\t */\n\tif (unlikely(rsize < PAGE_CACHE_SIZE))\n\t\treturn 0;\n\n\t/*\n\t * Reads as many pages as possible from fscache. Returns -ENOBUFS\n\t * immediately if the cookie is negative\n\t *\n\t * After this point, every page in the list might have PG_fscache set,\n\t * so we will need to clean that up off of every page we don't use.\n\t */\n\trc = cifs_readpages_from_fscache(mapping->host, mapping, page_list,\n\t\t\t\t\t &num_pages);\n\tif (rc == 0)\n\t\treturn rc;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\trc = 0;\n\tINIT_LIST_HEAD(&tmplist);\n\n\tcifs_dbg(FYI, \"%s: file=%p mapping=%p num_pages=%u\\n\",\n\t\t __func__, file, mapping, num_pages);\n\n\t/*\n\t * Start with the page at end of list and move it to private\n\t * list. Do the same with any following pages until we hit\n\t * the rsize limit, hit an index discontinuity, or run out of\n\t * pages. Issue the async read and then start the loop again\n\t * until the list is empty.\n\t *\n\t * Note that list order is important. The page_list is in\n\t * the order of declining indexes. When we put the pages in\n\t * the rdata->pages, then we want them in increasing order.\n\t */\n\twhile (!list_empty(page_list)) {\n\t\tunsigned int i;\n\t\tunsigned int bytes = PAGE_CACHE_SIZE;\n\t\tunsigned int expected_index;\n\t\tunsigned int nr_pages = 1;\n\t\tloff_t offset;\n\t\tstruct page *page, *tpage;\n\t\tstruct cifs_readdata *rdata;\n\n\t\tpage = list_entry(page_list->prev, struct page, lru);\n\n\t\t/*\n\t\t * Lock the page and put it in the cache. Since no one else\n\t\t * should have access to this page, we're safe to simply set\n\t\t * PG_locked without checking it first.\n\t\t */\n\t\t__set_page_locked(page);\n\t\trc = add_to_page_cache_locked(page, mapping,\n\t\t\t\t\t      page->index, GFP_KERNEL);\n\n\t\t/* give up if we can't stick it in the cache */\n\t\tif (rc) {\n\t\t\t__clear_page_locked(page);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* move first page to the tmplist */\n\t\toffset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\t\tlist_move_tail(&page->lru, &tmplist);\n\n\t\t/* now try and add more pages onto the request */\n\t\texpected_index = page->index + 1;\n\t\tlist_for_each_entry_safe_reverse(page, tpage, page_list, lru) {\n\t\t\t/* discontinuity ? */\n\t\t\tif (page->index != expected_index)\n\t\t\t\tbreak;\n\n\t\t\t/* would this page push the read over the rsize? */\n\t\t\tif (bytes + PAGE_CACHE_SIZE > rsize)\n\t\t\t\tbreak;\n\n\t\t\t__set_page_locked(page);\n\t\t\tif (add_to_page_cache_locked(page, mapping,\n\t\t\t\t\t\tpage->index, GFP_KERNEL)) {\n\t\t\t\t__clear_page_locked(page);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist_move_tail(&page->lru, &tmplist);\n\t\t\tbytes += PAGE_CACHE_SIZE;\n\t\t\texpected_index++;\n\t\t\tnr_pages++;\n\t\t}\n\n\t\trdata = cifs_readdata_alloc(nr_pages, cifs_readv_complete);\n\t\tif (!rdata) {\n\t\t\t/* best to give up if we're out of mem */\n\t\t\tlist_for_each_entry_safe(page, tpage, &tmplist, lru) {\n\t\t\t\tlist_del(&page->lru);\n\t\t\t\tlru_cache_add_file(page);\n\t\t\t\tunlock_page(page);\n\t\t\t\tpage_cache_release(page);\n\t\t\t}\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\trdata->cfile = cifsFileInfo_get(open_file);\n\t\trdata->mapping = mapping;\n\t\trdata->offset = offset;\n\t\trdata->bytes = bytes;\n\t\trdata->pid = pid;\n\t\trdata->pagesz = PAGE_CACHE_SIZE;\n\t\trdata->read_into_pages = cifs_readpages_read_into_pages;\n\n\t\tlist_for_each_entry_safe(page, tpage, &tmplist, lru) {\n\t\t\tlist_del(&page->lru);\n\t\t\trdata->pages[rdata->nr_pages++] = page;\n\t\t}\n\n\t\trc = cifs_retry_async_readv(rdata);\n\t\tif (rc != 0) {\n\t\t\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\t\t\tpage = rdata->pages[i];\n\t\t\t\tlru_cache_add_file(page);\n\t\t\t\tunlock_page(page);\n\t\t\t\tpage_cache_release(page);\n\t\t\t}\n\t\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t}\n\n\t/* Any pages that have been shown to fscache but didn't get added to\n\t * the pagecache must be uncached before they get returned to the\n\t * allocator.\n\t */\n\tcifs_fscache_readpages_cancel(mapping->host, page_list);\n\treturn rc;\n}\n\n/*\n * cifs_readpage_worker must be called with the page pinned\n */\nstatic int cifs_readpage_worker(struct file *file, struct page *page,\n\tloff_t *poffset)\n{\n\tchar *read_data;\n\tint rc;\n\n\t/* Is the page cached? */\n\trc = cifs_readpage_from_fscache(file_inode(file), page);\n\tif (rc == 0)\n\t\tgoto read_complete;\n\n\tread_data = kmap(page);\n\t/* for reads over a certain size could initiate async read ahead */\n\n\trc = cifs_read(file, read_data, PAGE_CACHE_SIZE, poffset);\n\n\tif (rc < 0)\n\t\tgoto io_error;\n\telse\n\t\tcifs_dbg(FYI, \"Bytes read %d\\n\", rc);\n\n\tfile_inode(file)->i_atime =\n\t\tcurrent_fs_time(file_inode(file)->i_sb);\n\n\tif (PAGE_CACHE_SIZE > rc)\n\t\tmemset(read_data + rc, 0, PAGE_CACHE_SIZE - rc);\n\n\tflush_dcache_page(page);\n\tSetPageUptodate(page);\n\n\t/* send this page to the cache */\n\tcifs_readpage_to_fscache(file_inode(file), page);\n\n\trc = 0;\n\nio_error:\n\tkunmap(page);\n\tunlock_page(page);\n\nread_complete:\n\treturn rc;\n}\n\nstatic int cifs_readpage(struct file *file, struct page *page)\n{\n\tloff_t offset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\tint rc = -EACCES;\n\tunsigned int xid;\n\n\txid = get_xid();\n\n\tif (file->private_data == NULL) {\n\t\trc = -EBADF;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tcifs_dbg(FYI, \"readpage %p at offset %d 0x%x\\n\",\n\t\t page, (int)offset, (int)offset);\n\n\trc = cifs_readpage_worker(file, page, &offset);\n\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic int is_inode_writable(struct cifsInodeInfo *cifs_inode)\n{\n\tstruct cifsFileInfo *open_file;\n\n\tspin_lock(&cifs_file_list_lock);\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_WRITE) {\n\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\treturn 1;\n\t\t}\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\treturn 0;\n}\n\n/* We do not want to update the file size from server for inodes\n   open for write - to avoid races with writepage extending\n   the file - in the future we could consider allowing\n   refreshing the inode only on increases in the file size\n   but this is tricky to do without racing with writebehind\n   page caching in the current Linux kernel design */\nbool is_size_safe_to_change(struct cifsInodeInfo *cifsInode, __u64 end_of_file)\n{\n\tif (!cifsInode)\n\t\treturn true;\n\n\tif (is_inode_writable(cifsInode)) {\n\t\t/* This inode is open for write at least once */\n\t\tstruct cifs_sb_info *cifs_sb;\n\n\t\tcifs_sb = CIFS_SB(cifsInode->vfs_inode.i_sb);\n\t\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_DIRECT_IO) {\n\t\t\t/* since no page cache to corrupt on directio\n\t\t\twe can change size safely */\n\t\t\treturn true;\n\t\t}\n\n\t\tif (i_size_read(&cifsInode->vfs_inode) < end_of_file)\n\t\t\treturn true;\n\n\t\treturn false;\n\t} else\n\t\treturn true;\n}\n\nstatic int cifs_write_begin(struct file *file, struct address_space *mapping,\n\t\t\tloff_t pos, unsigned len, unsigned flags,\n\t\t\tstruct page **pagep, void **fsdata)\n{\n\tint oncethru = 0;\n\tpgoff_t index = pos >> PAGE_CACHE_SHIFT;\n\tloff_t offset = pos & (PAGE_CACHE_SIZE - 1);\n\tloff_t page_start = pos & PAGE_MASK;\n\tloff_t i_size;\n\tstruct page *page;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"write_begin from %lld len %d\\n\", (long long)pos, len);\n\nstart:\n\tpage = grab_cache_page_write_begin(mapping, index, flags);\n\tif (!page) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tif (PageUptodate(page))\n\t\tgoto out;\n\n\t/*\n\t * If we write a full page it will be up to date, no need to read from\n\t * the server. If the write is short, we'll end up doing a sync write\n\t * instead.\n\t */\n\tif (len == PAGE_CACHE_SIZE)\n\t\tgoto out;\n\n\t/*\n\t * optimize away the read when we have an oplock, and we're not\n\t * expecting to use any of the data we'd be reading in. That\n\t * is, when the page lies beyond the EOF, or straddles the EOF\n\t * and the write will cover all of the existing data.\n\t */\n\tif (CIFS_CACHE_READ(CIFS_I(mapping->host))) {\n\t\ti_size = i_size_read(mapping->host);\n\t\tif (page_start >= i_size ||\n\t\t    (offset == 0 && (pos + len) >= i_size)) {\n\t\t\tzero_user_segments(page, 0, offset,\n\t\t\t\t\t   offset + len,\n\t\t\t\t\t   PAGE_CACHE_SIZE);\n\t\t\t/*\n\t\t\t * PageChecked means that the parts of the page\n\t\t\t * to which we're not writing are considered up\n\t\t\t * to date. Once the data is copied to the\n\t\t\t * page, it can be set uptodate.\n\t\t\t */\n\t\t\tSetPageChecked(page);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tif ((file->f_flags & O_ACCMODE) != O_WRONLY && !oncethru) {\n\t\t/*\n\t\t * might as well read a page, it is fast enough. If we get\n\t\t * an error, we don't need to return it. cifs_write_end will\n\t\t * do a sync write instead since PG_uptodate isn't set.\n\t\t */\n\t\tcifs_readpage_worker(file, page, &page_start);\n\t\tpage_cache_release(page);\n\t\toncethru = 1;\n\t\tgoto start;\n\t} else {\n\t\t/* we could try using another file handle if there is one -\n\t\t   but how would we lock it to prevent close of that handle\n\t\t   racing with this read? In any case\n\t\t   this will be written out by write_end so is fine */\n\t}\nout:\n\t*pagep = page;\n\treturn rc;\n}\n\nstatic int cifs_release_page(struct page *page, gfp_t gfp)\n{\n\tif (PagePrivate(page))\n\t\treturn 0;\n\n\treturn cifs_fscache_release_page(page, gfp);\n}\n\nstatic void cifs_invalidate_page(struct page *page, unsigned int offset,\n\t\t\t\t unsigned int length)\n{\n\tstruct cifsInodeInfo *cifsi = CIFS_I(page->mapping->host);\n\n\tif (offset == 0 && length == PAGE_CACHE_SIZE)\n\t\tcifs_fscache_invalidate_page(page, &cifsi->vfs_inode);\n}\n\nstatic int cifs_launder_page(struct page *page)\n{\n\tint rc = 0;\n\tloff_t range_start = page_offset(page);\n\tloff_t range_end = range_start + (loff_t)(PAGE_CACHE_SIZE - 1);\n\tstruct writeback_control wbc = {\n\t\t.sync_mode = WB_SYNC_ALL,\n\t\t.nr_to_write = 0,\n\t\t.range_start = range_start,\n\t\t.range_end = range_end,\n\t};\n\n\tcifs_dbg(FYI, \"Launder page: %p\\n\", page);\n\n\tif (clear_page_dirty_for_io(page))\n\t\trc = cifs_writepage_locked(page, &wbc);\n\n\tcifs_fscache_invalidate_page(page, page->mapping->host);\n\treturn rc;\n}\n\nvoid cifs_oplock_break(struct work_struct *work)\n{\n\tstruct cifsFileInfo *cfile = container_of(work, struct cifsFileInfo,\n\t\t\t\t\t\t  oplock_break);\n\tstruct inode *inode = cfile->dentry->d_inode;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\tif (!CIFS_CACHE_WRITE(cinode) && CIFS_CACHE_READ(cinode) &&\n\t\t\t\t\t\tcifs_has_mand_locks(cinode)) {\n\t\tcifs_dbg(FYI, \"Reset oplock to None for inode=%p due to mand locks\\n\",\n\t\t\t inode);\n\t\tcinode->oplock = 0;\n\t}\n\n\tif (inode && S_ISREG(inode->i_mode)) {\n\t\tif (CIFS_CACHE_READ(cinode))\n\t\t\tbreak_lease(inode, O_RDONLY);\n\t\telse\n\t\t\tbreak_lease(inode, O_WRONLY);\n\t\trc = filemap_fdatawrite(inode->i_mapping);\n\t\tif (!CIFS_CACHE_READ(cinode)) {\n\t\t\trc = filemap_fdatawait(inode->i_mapping);\n\t\t\tmapping_set_error(inode->i_mapping, rc);\n\t\t\tcifs_invalidate_mapping(inode);\n\t\t}\n\t\tcifs_dbg(FYI, \"Oplock flush inode %p rc %d\\n\", inode, rc);\n\t}\n\n\trc = cifs_push_locks(cfile);\n\tif (rc)\n\t\tcifs_dbg(VFS, \"Push locks rc = %d\\n\", rc);\n\n\t/*\n\t * releasing stale oplock after recent reconnect of smb session using\n\t * a now incorrect file handle is not a data integrity issue but do\n\t * not bother sending an oplock release if session to server still is\n\t * disconnected since oplock already released by the server\n\t */\n\tif (!cfile->oplock_break_cancelled) {\n\t\trc = tcon->ses->server->ops->oplock_response(tcon, &cfile->fid,\n\t\t\t\t\t\t\t     cinode);\n\t\tcifs_dbg(FYI, \"Oplock release rc = %d\\n\", rc);\n\t}\n}\n\n/*\n * The presence of cifs_direct_io() in the address space ops vector\n * allowes open() O_DIRECT flags which would have failed otherwise.\n *\n * In the non-cached mode (mount with cache=none), we shunt off direct read and write requests\n * so this method should never be called.\n *\n * Direct IO is not yet supported in the cached mode. \n */\nstatic ssize_t\ncifs_direct_io(int rw, struct kiocb *iocb, const struct iovec *iov,\n               loff_t pos, unsigned long nr_segs)\n{\n        /*\n         * FIXME\n         * Eventually need to support direct IO for non forcedirectio mounts\n         */\n        return -EINVAL;\n}\n\n\nconst struct address_space_operations cifs_addr_ops = {\n\t.readpage = cifs_readpage,\n\t.readpages = cifs_readpages,\n\t.writepage = cifs_writepage,\n\t.writepages = cifs_writepages,\n\t.write_begin = cifs_write_begin,\n\t.write_end = cifs_write_end,\n\t.set_page_dirty = __set_page_dirty_nobuffers,\n\t.releasepage = cifs_release_page,\n\t.direct_IO = cifs_direct_io,\n\t.invalidatepage = cifs_invalidate_page,\n\t.launder_page = cifs_launder_page,\n};\n\n/*\n * cifs_readpages requires the server to support a buffer large enough to\n * contain the header plus one complete page of data.  Otherwise, we need\n * to leave cifs_readpages out of the address space operations.\n */\nconst struct address_space_operations cifs_addr_ops_smallbuf = {\n\t.readpage = cifs_readpage,\n\t.writepage = cifs_writepage,\n\t.writepages = cifs_writepages,\n\t.write_begin = cifs_write_begin,\n\t.write_end = cifs_write_end,\n\t.set_page_dirty = __set_page_dirty_nobuffers,\n\t.releasepage = cifs_release_page,\n\t.invalidatepage = cifs_invalidate_page,\n\t.launder_page = cifs_launder_page,\n};\n"], "fixing_code": ["/*\n *   fs/cifs/file.c\n *\n *   vfs operations that deal with files\n *\n *   Copyright (C) International Business Machines  Corp., 2002,2010\n *   Author(s): Steve French (sfrench@us.ibm.com)\n *              Jeremy Allison (jra@samba.org)\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as published\n *   by the Free Software Foundation; either version 2.1 of the License, or\n *   (at your option) any later version.\n *\n *   This library is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n *   the GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public License\n *   along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\n#include <linux/fs.h>\n#include <linux/backing-dev.h>\n#include <linux/stat.h>\n#include <linux/fcntl.h>\n#include <linux/pagemap.h>\n#include <linux/pagevec.h>\n#include <linux/writeback.h>\n#include <linux/task_io_accounting_ops.h>\n#include <linux/delay.h>\n#include <linux/mount.h>\n#include <linux/slab.h>\n#include <linux/swap.h>\n#include <asm/div64.h>\n#include \"cifsfs.h\"\n#include \"cifspdu.h\"\n#include \"cifsglob.h\"\n#include \"cifsproto.h\"\n#include \"cifs_unicode.h\"\n#include \"cifs_debug.h\"\n#include \"cifs_fs_sb.h\"\n#include \"fscache.h\"\n\n\nstatic inline int cifs_convert_flags(unsigned int flags)\n{\n\tif ((flags & O_ACCMODE) == O_RDONLY)\n\t\treturn GENERIC_READ;\n\telse if ((flags & O_ACCMODE) == O_WRONLY)\n\t\treturn GENERIC_WRITE;\n\telse if ((flags & O_ACCMODE) == O_RDWR) {\n\t\t/* GENERIC_ALL is too much permission to request\n\t\t   can cause unnecessary access denied on create */\n\t\t/* return GENERIC_ALL; */\n\t\treturn (GENERIC_READ | GENERIC_WRITE);\n\t}\n\n\treturn (READ_CONTROL | FILE_WRITE_ATTRIBUTES | FILE_READ_ATTRIBUTES |\n\t\tFILE_WRITE_EA | FILE_APPEND_DATA | FILE_WRITE_DATA |\n\t\tFILE_READ_DATA);\n}\n\nstatic u32 cifs_posix_convert_flags(unsigned int flags)\n{\n\tu32 posix_flags = 0;\n\n\tif ((flags & O_ACCMODE) == O_RDONLY)\n\t\tposix_flags = SMB_O_RDONLY;\n\telse if ((flags & O_ACCMODE) == O_WRONLY)\n\t\tposix_flags = SMB_O_WRONLY;\n\telse if ((flags & O_ACCMODE) == O_RDWR)\n\t\tposix_flags = SMB_O_RDWR;\n\n\tif (flags & O_CREAT) {\n\t\tposix_flags |= SMB_O_CREAT;\n\t\tif (flags & O_EXCL)\n\t\t\tposix_flags |= SMB_O_EXCL;\n\t} else if (flags & O_EXCL)\n\t\tcifs_dbg(FYI, \"Application %s pid %d has incorrectly set O_EXCL flag but not O_CREAT on file open. Ignoring O_EXCL\\n\",\n\t\t\t current->comm, current->tgid);\n\n\tif (flags & O_TRUNC)\n\t\tposix_flags |= SMB_O_TRUNC;\n\t/* be safe and imply O_SYNC for O_DSYNC */\n\tif (flags & O_DSYNC)\n\t\tposix_flags |= SMB_O_SYNC;\n\tif (flags & O_DIRECTORY)\n\t\tposix_flags |= SMB_O_DIRECTORY;\n\tif (flags & O_NOFOLLOW)\n\t\tposix_flags |= SMB_O_NOFOLLOW;\n\tif (flags & O_DIRECT)\n\t\tposix_flags |= SMB_O_DIRECT;\n\n\treturn posix_flags;\n}\n\nstatic inline int cifs_get_disposition(unsigned int flags)\n{\n\tif ((flags & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL))\n\t\treturn FILE_CREATE;\n\telse if ((flags & (O_CREAT | O_TRUNC)) == (O_CREAT | O_TRUNC))\n\t\treturn FILE_OVERWRITE_IF;\n\telse if ((flags & O_CREAT) == O_CREAT)\n\t\treturn FILE_OPEN_IF;\n\telse if ((flags & O_TRUNC) == O_TRUNC)\n\t\treturn FILE_OVERWRITE;\n\telse\n\t\treturn FILE_OPEN;\n}\n\nint cifs_posix_open(char *full_path, struct inode **pinode,\n\t\t\tstruct super_block *sb, int mode, unsigned int f_flags,\n\t\t\t__u32 *poplock, __u16 *pnetfid, unsigned int xid)\n{\n\tint rc;\n\tFILE_UNIX_BASIC_INFO *presp_data;\n\t__u32 posix_flags = 0;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(sb);\n\tstruct cifs_fattr fattr;\n\tstruct tcon_link *tlink;\n\tstruct cifs_tcon *tcon;\n\n\tcifs_dbg(FYI, \"posix open %s\\n\", full_path);\n\n\tpresp_data = kzalloc(sizeof(FILE_UNIX_BASIC_INFO), GFP_KERNEL);\n\tif (presp_data == NULL)\n\t\treturn -ENOMEM;\n\n\ttlink = cifs_sb_tlink(cifs_sb);\n\tif (IS_ERR(tlink)) {\n\t\trc = PTR_ERR(tlink);\n\t\tgoto posix_open_ret;\n\t}\n\n\ttcon = tlink_tcon(tlink);\n\tmode &= ~current_umask();\n\n\tposix_flags = cifs_posix_convert_flags(f_flags);\n\trc = CIFSPOSIXCreate(xid, tcon, posix_flags, mode, pnetfid, presp_data,\n\t\t\t     poplock, full_path, cifs_sb->local_nls,\n\t\t\t     cifs_sb->mnt_cifs_flags &\n\t\t\t\t\tCIFS_MOUNT_MAP_SPECIAL_CHR);\n\tcifs_put_tlink(tlink);\n\n\tif (rc)\n\t\tgoto posix_open_ret;\n\n\tif (presp_data->Type == cpu_to_le32(-1))\n\t\tgoto posix_open_ret; /* open ok, caller does qpathinfo */\n\n\tif (!pinode)\n\t\tgoto posix_open_ret; /* caller does not need info */\n\n\tcifs_unix_basic_to_fattr(&fattr, presp_data, cifs_sb);\n\n\t/* get new inode and set it up */\n\tif (*pinode == NULL) {\n\t\tcifs_fill_uniqueid(sb, &fattr);\n\t\t*pinode = cifs_iget(sb, &fattr);\n\t\tif (!*pinode) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto posix_open_ret;\n\t\t}\n\t} else {\n\t\tcifs_fattr_to_inode(*pinode, &fattr);\n\t}\n\nposix_open_ret:\n\tkfree(presp_data);\n\treturn rc;\n}\n\nstatic int\ncifs_nt_open(char *full_path, struct inode *inode, struct cifs_sb_info *cifs_sb,\n\t     struct cifs_tcon *tcon, unsigned int f_flags, __u32 *oplock,\n\t     struct cifs_fid *fid, unsigned int xid)\n{\n\tint rc;\n\tint desired_access;\n\tint disposition;\n\tint create_options = CREATE_NOT_DIR;\n\tFILE_ALL_INFO *buf;\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct cifs_open_parms oparms;\n\n\tif (!server->ops->open)\n\t\treturn -ENOSYS;\n\n\tdesired_access = cifs_convert_flags(f_flags);\n\n/*********************************************************************\n *  open flag mapping table:\n *\n *\tPOSIX Flag            CIFS Disposition\n *\t----------            ----------------\n *\tO_CREAT               FILE_OPEN_IF\n *\tO_CREAT | O_EXCL      FILE_CREATE\n *\tO_CREAT | O_TRUNC     FILE_OVERWRITE_IF\n *\tO_TRUNC               FILE_OVERWRITE\n *\tnone of the above     FILE_OPEN\n *\n *\tNote that there is not a direct match between disposition\n *\tFILE_SUPERSEDE (ie create whether or not file exists although\n *\tO_CREAT | O_TRUNC is similar but truncates the existing\n *\tfile rather than creating a new file as FILE_SUPERSEDE does\n *\t(which uses the attributes / metadata passed in on open call)\n *?\n *?  O_SYNC is a reasonable match to CIFS writethrough flag\n *?  and the read write flags match reasonably.  O_LARGEFILE\n *?  is irrelevant because largefile support is always used\n *?  by this client. Flags O_APPEND, O_DIRECT, O_DIRECTORY,\n *\t O_FASYNC, O_NOFOLLOW, O_NONBLOCK need further investigation\n *********************************************************************/\n\n\tdisposition = cifs_get_disposition(f_flags);\n\n\t/* BB pass O_SYNC flag through on file attributes .. BB */\n\n\tbuf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\tif (backup_cred(cifs_sb))\n\t\tcreate_options |= CREATE_OPEN_BACKUP_INTENT;\n\n\toparms.tcon = tcon;\n\toparms.cifs_sb = cifs_sb;\n\toparms.desired_access = desired_access;\n\toparms.create_options = create_options;\n\toparms.disposition = disposition;\n\toparms.path = full_path;\n\toparms.fid = fid;\n\toparms.reconnect = false;\n\n\trc = server->ops->open(xid, &oparms, oplock, buf);\n\n\tif (rc)\n\t\tgoto out;\n\n\tif (tcon->unix_ext)\n\t\trc = cifs_get_inode_info_unix(&inode, full_path, inode->i_sb,\n\t\t\t\t\t      xid);\n\telse\n\t\trc = cifs_get_inode_info(&inode, full_path, buf, inode->i_sb,\n\t\t\t\t\t xid, fid);\n\nout:\n\tkfree(buf);\n\treturn rc;\n}\n\nstatic bool\ncifs_has_mand_locks(struct cifsInodeInfo *cinode)\n{\n\tstruct cifs_fid_locks *cur;\n\tbool has_locks = false;\n\n\tdown_read(&cinode->lock_sem);\n\tlist_for_each_entry(cur, &cinode->llist, llist) {\n\t\tif (!list_empty(&cur->locks)) {\n\t\t\thas_locks = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tup_read(&cinode->lock_sem);\n\treturn has_locks;\n}\n\nstruct cifsFileInfo *\ncifs_new_fileinfo(struct cifs_fid *fid, struct file *file,\n\t\t  struct tcon_link *tlink, __u32 oplock)\n{\n\tstruct dentry *dentry = file->f_path.dentry;\n\tstruct inode *inode = dentry->d_inode;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifsFileInfo *cfile;\n\tstruct cifs_fid_locks *fdlocks;\n\tstruct cifs_tcon *tcon = tlink_tcon(tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\n\tcfile = kzalloc(sizeof(struct cifsFileInfo), GFP_KERNEL);\n\tif (cfile == NULL)\n\t\treturn cfile;\n\n\tfdlocks = kzalloc(sizeof(struct cifs_fid_locks), GFP_KERNEL);\n\tif (!fdlocks) {\n\t\tkfree(cfile);\n\t\treturn NULL;\n\t}\n\n\tINIT_LIST_HEAD(&fdlocks->locks);\n\tfdlocks->cfile = cfile;\n\tcfile->llist = fdlocks;\n\tdown_write(&cinode->lock_sem);\n\tlist_add(&fdlocks->llist, &cinode->llist);\n\tup_write(&cinode->lock_sem);\n\n\tcfile->count = 1;\n\tcfile->pid = current->tgid;\n\tcfile->uid = current_fsuid();\n\tcfile->dentry = dget(dentry);\n\tcfile->f_flags = file->f_flags;\n\tcfile->invalidHandle = false;\n\tcfile->tlink = cifs_get_tlink(tlink);\n\tINIT_WORK(&cfile->oplock_break, cifs_oplock_break);\n\tmutex_init(&cfile->fh_mutex);\n\n\tcifs_sb_active(inode->i_sb);\n\n\t/*\n\t * If the server returned a read oplock and we have mandatory brlocks,\n\t * set oplock level to None.\n\t */\n\tif (server->ops->is_read_op(oplock) && cifs_has_mand_locks(cinode)) {\n\t\tcifs_dbg(FYI, \"Reset oplock val from read to None due to mand locks\\n\");\n\t\toplock = 0;\n\t}\n\n\tspin_lock(&cifs_file_list_lock);\n\tif (fid->pending_open->oplock != CIFS_OPLOCK_NO_CHANGE && oplock)\n\t\toplock = fid->pending_open->oplock;\n\tlist_del(&fid->pending_open->olist);\n\n\tfid->purge_cache = false;\n\tserver->ops->set_fid(cfile, fid, oplock);\n\n\tlist_add(&cfile->tlist, &tcon->openFileList);\n\t/* if readable file instance put first in list*/\n\tif (file->f_mode & FMODE_READ)\n\t\tlist_add(&cfile->flist, &cinode->openFileList);\n\telse\n\t\tlist_add_tail(&cfile->flist, &cinode->openFileList);\n\tspin_unlock(&cifs_file_list_lock);\n\n\tif (fid->purge_cache)\n\t\tcifs_invalidate_mapping(inode);\n\n\tfile->private_data = cfile;\n\treturn cfile;\n}\n\nstruct cifsFileInfo *\ncifsFileInfo_get(struct cifsFileInfo *cifs_file)\n{\n\tspin_lock(&cifs_file_list_lock);\n\tcifsFileInfo_get_locked(cifs_file);\n\tspin_unlock(&cifs_file_list_lock);\n\treturn cifs_file;\n}\n\n/*\n * Release a reference on the file private data. This may involve closing\n * the filehandle out on the server. Must be called without holding\n * cifs_file_list_lock.\n */\nvoid cifsFileInfo_put(struct cifsFileInfo *cifs_file)\n{\n\tstruct inode *inode = cifs_file->dentry->d_inode;\n\tstruct cifs_tcon *tcon = tlink_tcon(cifs_file->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(inode);\n\tstruct super_block *sb = inode->i_sb;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(sb);\n\tstruct cifsLockInfo *li, *tmp;\n\tstruct cifs_fid fid;\n\tstruct cifs_pending_open open;\n\n\tspin_lock(&cifs_file_list_lock);\n\tif (--cifs_file->count > 0) {\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\treturn;\n\t}\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &fid);\n\n\t/* store open in pending opens to make sure we don't miss lease break */\n\tcifs_add_pending_open_locked(&fid, cifs_file->tlink, &open);\n\n\t/* remove it from the lists */\n\tlist_del(&cifs_file->flist);\n\tlist_del(&cifs_file->tlist);\n\n\tif (list_empty(&cifsi->openFileList)) {\n\t\tcifs_dbg(FYI, \"closing last open instance for inode %p\\n\",\n\t\t\t cifs_file->dentry->d_inode);\n\t\t/*\n\t\t * In strict cache mode we need invalidate mapping on the last\n\t\t * close  because it may cause a error when we open this file\n\t\t * again and get at least level II oplock.\n\t\t */\n\t\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_STRICT_IO)\n\t\t\tCIFS_I(inode)->invalid_mapping = true;\n\t\tcifs_set_oplock_level(cifsi, 0);\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\n\tcancel_work_sync(&cifs_file->oplock_break);\n\n\tif (!tcon->need_reconnect && !cifs_file->invalidHandle) {\n\t\tstruct TCP_Server_Info *server = tcon->ses->server;\n\t\tunsigned int xid;\n\n\t\txid = get_xid();\n\t\tif (server->ops->close)\n\t\t\tserver->ops->close(xid, tcon, &cifs_file->fid);\n\t\t_free_xid(xid);\n\t}\n\n\tcifs_del_pending_open(&open);\n\n\t/*\n\t * Delete any outstanding lock records. We'll lose them when the file\n\t * is closed anyway.\n\t */\n\tdown_write(&cifsi->lock_sem);\n\tlist_for_each_entry_safe(li, tmp, &cifs_file->llist->locks, llist) {\n\t\tlist_del(&li->llist);\n\t\tcifs_del_lock_waiters(li);\n\t\tkfree(li);\n\t}\n\tlist_del(&cifs_file->llist->llist);\n\tkfree(cifs_file->llist);\n\tup_write(&cifsi->lock_sem);\n\n\tcifs_put_tlink(cifs_file->tlink);\n\tdput(cifs_file->dentry);\n\tcifs_sb_deactive(sb);\n\tkfree(cifs_file);\n}\n\nint cifs_open(struct inode *inode, struct file *file)\n\n{\n\tint rc = -EACCES;\n\tunsigned int xid;\n\t__u32 oplock;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_tcon *tcon;\n\tstruct tcon_link *tlink;\n\tstruct cifsFileInfo *cfile = NULL;\n\tchar *full_path = NULL;\n\tbool posix_open_ok = false;\n\tstruct cifs_fid fid;\n\tstruct cifs_pending_open open;\n\n\txid = get_xid();\n\n\tcifs_sb = CIFS_SB(inode->i_sb);\n\ttlink = cifs_sb_tlink(cifs_sb);\n\tif (IS_ERR(tlink)) {\n\t\tfree_xid(xid);\n\t\treturn PTR_ERR(tlink);\n\t}\n\ttcon = tlink_tcon(tlink);\n\tserver = tcon->ses->server;\n\n\tfull_path = build_path_from_dentry(file->f_path.dentry);\n\tif (full_path == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tcifs_dbg(FYI, \"inode = 0x%p file flags are 0x%x for %s\\n\",\n\t\t inode, file->f_flags, full_path);\n\n\tif (server->oplocks)\n\t\toplock = REQ_OPLOCK;\n\telse\n\t\toplock = 0;\n\n\tif (!tcon->broken_posix_open && tcon->unix_ext &&\n\t    cap_unix(tcon->ses) && (CIFS_UNIX_POSIX_PATH_OPS_CAP &\n\t\t\t\tle64_to_cpu(tcon->fsUnixInfo.Capability))) {\n\t\t/* can not refresh inode info since size could be stale */\n\t\trc = cifs_posix_open(full_path, &inode, inode->i_sb,\n\t\t\t\tcifs_sb->mnt_file_mode /* ignored */,\n\t\t\t\tfile->f_flags, &oplock, &fid.netfid, xid);\n\t\tif (rc == 0) {\n\t\t\tcifs_dbg(FYI, \"posix open succeeded\\n\");\n\t\t\tposix_open_ok = true;\n\t\t} else if ((rc == -EINVAL) || (rc == -EOPNOTSUPP)) {\n\t\t\tif (tcon->ses->serverNOS)\n\t\t\t\tcifs_dbg(VFS, \"server %s of type %s returned unexpected error on SMB posix open, disabling posix open support. Check if server update available.\\n\",\n\t\t\t\t\t tcon->ses->serverName,\n\t\t\t\t\t tcon->ses->serverNOS);\n\t\t\ttcon->broken_posix_open = true;\n\t\t} else if ((rc != -EIO) && (rc != -EREMOTE) &&\n\t\t\t (rc != -EOPNOTSUPP)) /* path not found or net err */\n\t\t\tgoto out;\n\t\t/*\n\t\t * Else fallthrough to retry open the old way on network i/o\n\t\t * or DFS errors.\n\t\t */\n\t}\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &fid);\n\n\tcifs_add_pending_open(&fid, tlink, &open);\n\n\tif (!posix_open_ok) {\n\t\tif (server->ops->get_lease_key)\n\t\t\tserver->ops->get_lease_key(inode, &fid);\n\n\t\trc = cifs_nt_open(full_path, inode, cifs_sb, tcon,\n\t\t\t\t  file->f_flags, &oplock, &fid, xid);\n\t\tif (rc) {\n\t\t\tcifs_del_pending_open(&open);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tcfile = cifs_new_fileinfo(&fid, file, tlink, oplock);\n\tif (cfile == NULL) {\n\t\tif (server->ops->close)\n\t\t\tserver->ops->close(xid, tcon, &fid);\n\t\tcifs_del_pending_open(&open);\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tcifs_fscache_set_inode_cookie(inode, file);\n\n\tif ((oplock & CIFS_CREATE_ACTION) && !posix_open_ok && tcon->unix_ext) {\n\t\t/*\n\t\t * Time to set mode which we can not set earlier due to\n\t\t * problems creating new read-only files.\n\t\t */\n\t\tstruct cifs_unix_set_info_args args = {\n\t\t\t.mode\t= inode->i_mode,\n\t\t\t.uid\t= INVALID_UID, /* no change */\n\t\t\t.gid\t= INVALID_GID, /* no change */\n\t\t\t.ctime\t= NO_CHANGE_64,\n\t\t\t.atime\t= NO_CHANGE_64,\n\t\t\t.mtime\t= NO_CHANGE_64,\n\t\t\t.device\t= 0,\n\t\t};\n\t\tCIFSSMBUnixSetFileInfo(xid, tcon, &args, fid.netfid,\n\t\t\t\t       cfile->pid);\n\t}\n\nout:\n\tkfree(full_path);\n\tfree_xid(xid);\n\tcifs_put_tlink(tlink);\n\treturn rc;\n}\n\nstatic int cifs_push_posix_locks(struct cifsFileInfo *cfile);\n\n/*\n * Try to reacquire byte range locks that were released when session\n * to server was lost.\n */\nstatic int\ncifs_relock_file(struct cifsFileInfo *cfile)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\tdown_read(&cinode->lock_sem);\n\tif (cinode->can_cache_brlcks) {\n\t\t/* can cache locks - no need to relock */\n\t\tup_read(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\trc = cifs_push_posix_locks(cfile);\n\telse\n\t\trc = tcon->ses->server->ops->push_mand_locks(cfile);\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic int\ncifs_reopen_file(struct cifsFileInfo *cfile, bool can_flush)\n{\n\tint rc = -EACCES;\n\tunsigned int xid;\n\t__u32 oplock;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsInodeInfo *cinode;\n\tstruct inode *inode;\n\tchar *full_path = NULL;\n\tint desired_access;\n\tint disposition = FILE_OPEN;\n\tint create_options = CREATE_NOT_DIR;\n\tstruct cifs_open_parms oparms;\n\n\txid = get_xid();\n\tmutex_lock(&cfile->fh_mutex);\n\tif (!cfile->invalidHandle) {\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\trc = 0;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tinode = cfile->dentry->d_inode;\n\tcifs_sb = CIFS_SB(inode->i_sb);\n\ttcon = tlink_tcon(cfile->tlink);\n\tserver = tcon->ses->server;\n\n\t/*\n\t * Can not grab rename sem here because various ops, including those\n\t * that already have the rename sem can end up causing writepage to get\n\t * called and if the server was down that means we end up here, and we\n\t * can never tell if the caller already has the rename_sem.\n\t */\n\tfull_path = build_path_from_dentry(cfile->dentry);\n\tif (full_path == NULL) {\n\t\trc = -ENOMEM;\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tcifs_dbg(FYI, \"inode = 0x%p file flags 0x%x for %s\\n\",\n\t\t inode, cfile->f_flags, full_path);\n\n\tif (tcon->ses->server->oplocks)\n\t\toplock = REQ_OPLOCK;\n\telse\n\t\toplock = 0;\n\n\tif (tcon->unix_ext && cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_POSIX_PATH_OPS_CAP &\n\t\t\t\tle64_to_cpu(tcon->fsUnixInfo.Capability))) {\n\t\t/*\n\t\t * O_CREAT, O_EXCL and O_TRUNC already had their effect on the\n\t\t * original open. Must mask them off for a reopen.\n\t\t */\n\t\tunsigned int oflags = cfile->f_flags &\n\t\t\t\t\t\t~(O_CREAT | O_EXCL | O_TRUNC);\n\n\t\trc = cifs_posix_open(full_path, NULL, inode->i_sb,\n\t\t\t\t     cifs_sb->mnt_file_mode /* ignored */,\n\t\t\t\t     oflags, &oplock, &cfile->fid.netfid, xid);\n\t\tif (rc == 0) {\n\t\t\tcifs_dbg(FYI, \"posix reopen succeeded\\n\");\n\t\t\toparms.reconnect = true;\n\t\t\tgoto reopen_success;\n\t\t}\n\t\t/*\n\t\t * fallthrough to retry open the old way on errors, especially\n\t\t * in the reconnect path it is important to retry hard\n\t\t */\n\t}\n\n\tdesired_access = cifs_convert_flags(cfile->f_flags);\n\n\tif (backup_cred(cifs_sb))\n\t\tcreate_options |= CREATE_OPEN_BACKUP_INTENT;\n\n\tif (server->ops->get_lease_key)\n\t\tserver->ops->get_lease_key(inode, &cfile->fid);\n\n\toparms.tcon = tcon;\n\toparms.cifs_sb = cifs_sb;\n\toparms.desired_access = desired_access;\n\toparms.create_options = create_options;\n\toparms.disposition = disposition;\n\toparms.path = full_path;\n\toparms.fid = &cfile->fid;\n\toparms.reconnect = true;\n\n\t/*\n\t * Can not refresh inode by passing in file_info buf to be returned by\n\t * ops->open and then calling get_inode_info with returned buf since\n\t * file might have write behind data that needs to be flushed and server\n\t * version of file size can be stale. If we knew for sure that inode was\n\t * not dirty locally we could do this.\n\t */\n\trc = server->ops->open(xid, &oparms, &oplock, NULL);\n\tif (rc == -ENOENT && oparms.reconnect == false) {\n\t\t/* durable handle timeout is expired - open the file again */\n\t\trc = server->ops->open(xid, &oparms, &oplock, NULL);\n\t\t/* indicate that we need to relock the file */\n\t\toparms.reconnect = true;\n\t}\n\n\tif (rc) {\n\t\tmutex_unlock(&cfile->fh_mutex);\n\t\tcifs_dbg(FYI, \"cifs_reopen returned 0x%x\\n\", rc);\n\t\tcifs_dbg(FYI, \"oplock: %d\\n\", oplock);\n\t\tgoto reopen_error_exit;\n\t}\n\nreopen_success:\n\tcfile->invalidHandle = false;\n\tmutex_unlock(&cfile->fh_mutex);\n\tcinode = CIFS_I(inode);\n\n\tif (can_flush) {\n\t\trc = filemap_write_and_wait(inode->i_mapping);\n\t\tmapping_set_error(inode->i_mapping, rc);\n\n\t\tif (tcon->unix_ext)\n\t\t\trc = cifs_get_inode_info_unix(&inode, full_path,\n\t\t\t\t\t\t      inode->i_sb, xid);\n\t\telse\n\t\t\trc = cifs_get_inode_info(&inode, full_path, NULL,\n\t\t\t\t\t\t inode->i_sb, xid, NULL);\n\t}\n\t/*\n\t * Else we are writing out data to server already and could deadlock if\n\t * we tried to flush data, and since we do not know if we have data that\n\t * would invalidate the current end of file on the server we can not go\n\t * to the server to get the new inode info.\n\t */\n\n\tserver->ops->set_fid(cfile, &cfile->fid, oplock);\n\tif (oparms.reconnect)\n\t\tcifs_relock_file(cfile);\n\nreopen_error_exit:\n\tkfree(full_path);\n\tfree_xid(xid);\n\treturn rc;\n}\n\nint cifs_close(struct inode *inode, struct file *file)\n{\n\tif (file->private_data != NULL) {\n\t\tcifsFileInfo_put(file->private_data);\n\t\tfile->private_data = NULL;\n\t}\n\n\t/* return code from the ->release op is always ignored */\n\treturn 0;\n}\n\nint cifs_closedir(struct inode *inode, struct file *file)\n{\n\tint rc = 0;\n\tunsigned int xid;\n\tstruct cifsFileInfo *cfile = file->private_data;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tchar *buf;\n\n\tcifs_dbg(FYI, \"Closedir inode = 0x%p\\n\", inode);\n\n\tif (cfile == NULL)\n\t\treturn rc;\n\n\txid = get_xid();\n\ttcon = tlink_tcon(cfile->tlink);\n\tserver = tcon->ses->server;\n\n\tcifs_dbg(FYI, \"Freeing private data in close dir\\n\");\n\tspin_lock(&cifs_file_list_lock);\n\tif (!cfile->srch_inf.endOfSearch && !cfile->invalidHandle) {\n\t\tcfile->invalidHandle = true;\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\tif (server->ops->close_dir)\n\t\t\trc = server->ops->close_dir(xid, tcon, &cfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t\tcifs_dbg(FYI, \"Closing uncompleted readdir with rc %d\\n\", rc);\n\t\t/* not much we can do if it fails anyway, ignore rc */\n\t\trc = 0;\n\t} else\n\t\tspin_unlock(&cifs_file_list_lock);\n\n\tbuf = cfile->srch_inf.ntwrk_buf_start;\n\tif (buf) {\n\t\tcifs_dbg(FYI, \"closedir free smb buf in srch struct\\n\");\n\t\tcfile->srch_inf.ntwrk_buf_start = NULL;\n\t\tif (cfile->srch_inf.smallBuf)\n\t\t\tcifs_small_buf_release(buf);\n\t\telse\n\t\t\tcifs_buf_release(buf);\n\t}\n\n\tcifs_put_tlink(cfile->tlink);\n\tkfree(file->private_data);\n\tfile->private_data = NULL;\n\t/* BB can we lock the filestruct while this is going on? */\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic struct cifsLockInfo *\ncifs_lock_init(__u64 offset, __u64 length, __u8 type)\n{\n\tstruct cifsLockInfo *lock =\n\t\tkmalloc(sizeof(struct cifsLockInfo), GFP_KERNEL);\n\tif (!lock)\n\t\treturn lock;\n\tlock->offset = offset;\n\tlock->length = length;\n\tlock->type = type;\n\tlock->pid = current->tgid;\n\tINIT_LIST_HEAD(&lock->blist);\n\tinit_waitqueue_head(&lock->block_q);\n\treturn lock;\n}\n\nvoid\ncifs_del_lock_waiters(struct cifsLockInfo *lock)\n{\n\tstruct cifsLockInfo *li, *tmp;\n\tlist_for_each_entry_safe(li, tmp, &lock->blist, blist) {\n\t\tlist_del_init(&li->blist);\n\t\twake_up(&li->block_q);\n\t}\n}\n\n#define CIFS_LOCK_OP\t0\n#define CIFS_READ_OP\t1\n#define CIFS_WRITE_OP\t2\n\n/* @rw_check : 0 - no op, 1 - read, 2 - write */\nstatic bool\ncifs_find_fid_lock_conflict(struct cifs_fid_locks *fdlocks, __u64 offset,\n\t\t\t    __u64 length, __u8 type, struct cifsFileInfo *cfile,\n\t\t\t    struct cifsLockInfo **conf_lock, int rw_check)\n{\n\tstruct cifsLockInfo *li;\n\tstruct cifsFileInfo *cur_cfile = fdlocks->cfile;\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\n\tlist_for_each_entry(li, &fdlocks->locks, llist) {\n\t\tif (offset + length <= li->offset ||\n\t\t    offset >= li->offset + li->length)\n\t\t\tcontinue;\n\t\tif (rw_check != CIFS_LOCK_OP && current->tgid == li->pid &&\n\t\t    server->ops->compare_fids(cfile, cur_cfile)) {\n\t\t\t/* shared lock prevents write op through the same fid */\n\t\t\tif (!(li->type & server->vals->shared_lock_type) ||\n\t\t\t    rw_check != CIFS_WRITE_OP)\n\t\t\t\tcontinue;\n\t\t}\n\t\tif ((type & server->vals->shared_lock_type) &&\n\t\t    ((server->ops->compare_fids(cfile, cur_cfile) &&\n\t\t     current->tgid == li->pid) || type == li->type))\n\t\t\tcontinue;\n\t\tif (conf_lock)\n\t\t\t*conf_lock = li;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool\ncifs_find_lock_conflict(struct cifsFileInfo *cfile, __u64 offset, __u64 length,\n\t\t\t__u8 type, struct cifsLockInfo **conf_lock,\n\t\t\tint rw_check)\n{\n\tbool rc = false;\n\tstruct cifs_fid_locks *cur;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\n\tlist_for_each_entry(cur, &cinode->llist, llist) {\n\t\trc = cifs_find_fid_lock_conflict(cur, offset, length, type,\n\t\t\t\t\t\t cfile, conf_lock, rw_check);\n\t\tif (rc)\n\t\t\tbreak;\n\t}\n\n\treturn rc;\n}\n\n/*\n * Check if there is another lock that prevents us to set the lock (mandatory\n * style). If such a lock exists, update the flock structure with its\n * properties. Otherwise, set the flock type to F_UNLCK if we can cache brlocks\n * or leave it the same if we can't. Returns 0 if we don't need to request to\n * the server or 1 otherwise.\n */\nstatic int\ncifs_lock_test(struct cifsFileInfo *cfile, __u64 offset, __u64 length,\n\t       __u8 type, struct file_lock *flock)\n{\n\tint rc = 0;\n\tstruct cifsLockInfo *conf_lock;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\tbool exist;\n\n\tdown_read(&cinode->lock_sem);\n\n\texist = cifs_find_lock_conflict(cfile, offset, length, type,\n\t\t\t\t\t&conf_lock, CIFS_LOCK_OP);\n\tif (exist) {\n\t\tflock->fl_start = conf_lock->offset;\n\t\tflock->fl_end = conf_lock->offset + conf_lock->length - 1;\n\t\tflock->fl_pid = conf_lock->pid;\n\t\tif (conf_lock->type & server->vals->shared_lock_type)\n\t\t\tflock->fl_type = F_RDLCK;\n\t\telse\n\t\t\tflock->fl_type = F_WRLCK;\n\t} else if (!cinode->can_cache_brlcks)\n\t\trc = 1;\n\telse\n\t\tflock->fl_type = F_UNLCK;\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic void\ncifs_lock_add(struct cifsFileInfo *cfile, struct cifsLockInfo *lock)\n{\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tdown_write(&cinode->lock_sem);\n\tlist_add_tail(&lock->llist, &cfile->llist->locks);\n\tup_write(&cinode->lock_sem);\n}\n\n/*\n * Set the byte-range lock (mandatory style). Returns:\n * 1) 0, if we set the lock and don't need to request to the server;\n * 2) 1, if no locks prevent us but we need to request to the server;\n * 3) -EACCESS, if there is a lock that prevents us and wait is false.\n */\nstatic int\ncifs_lock_add_if(struct cifsFileInfo *cfile, struct cifsLockInfo *lock,\n\t\t bool wait)\n{\n\tstruct cifsLockInfo *conf_lock;\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tbool exist;\n\tint rc = 0;\n\ntry_again:\n\texist = false;\n\tdown_write(&cinode->lock_sem);\n\n\texist = cifs_find_lock_conflict(cfile, lock->offset, lock->length,\n\t\t\t\t\tlock->type, &conf_lock, CIFS_LOCK_OP);\n\tif (!exist && cinode->can_cache_brlcks) {\n\t\tlist_add_tail(&lock->llist, &cfile->llist->locks);\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (!exist)\n\t\trc = 1;\n\telse if (!wait)\n\t\trc = -EACCES;\n\telse {\n\t\tlist_add_tail(&lock->blist, &conf_lock->blist);\n\t\tup_write(&cinode->lock_sem);\n\t\trc = wait_event_interruptible(lock->block_q,\n\t\t\t\t\t(lock->blist.prev == &lock->blist) &&\n\t\t\t\t\t(lock->blist.next == &lock->blist));\n\t\tif (!rc)\n\t\t\tgoto try_again;\n\t\tdown_write(&cinode->lock_sem);\n\t\tlist_del_init(&lock->blist);\n\t}\n\n\tup_write(&cinode->lock_sem);\n\treturn rc;\n}\n\n/*\n * Check if there is another lock that prevents us to set the lock (posix\n * style). If such a lock exists, update the flock structure with its\n * properties. Otherwise, set the flock type to F_UNLCK if we can cache brlocks\n * or leave it the same if we can't. Returns 0 if we don't need to request to\n * the server or 1 otherwise.\n */\nstatic int\ncifs_posix_lock_test(struct file *file, struct file_lock *flock)\n{\n\tint rc = 0;\n\tstruct cifsInodeInfo *cinode = CIFS_I(file_inode(file));\n\tunsigned char saved_type = flock->fl_type;\n\n\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\treturn 1;\n\n\tdown_read(&cinode->lock_sem);\n\tposix_test_lock(file, flock);\n\n\tif (flock->fl_type == F_UNLCK && !cinode->can_cache_brlcks) {\n\t\tflock->fl_type = saved_type;\n\t\trc = 1;\n\t}\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\n/*\n * Set the byte-range lock (posix style). Returns:\n * 1) 0, if we set the lock and don't need to request to the server;\n * 2) 1, if we need to request to the server;\n * 3) <0, if the error occurs while setting the lock.\n */\nstatic int\ncifs_posix_lock_set(struct file *file, struct file_lock *flock)\n{\n\tstruct cifsInodeInfo *cinode = CIFS_I(file_inode(file));\n\tint rc = 1;\n\n\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\treturn rc;\n\ntry_again:\n\tdown_write(&cinode->lock_sem);\n\tif (!cinode->can_cache_brlcks) {\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\trc = posix_lock_file(file, flock, NULL);\n\tup_write(&cinode->lock_sem);\n\tif (rc == FILE_LOCK_DEFERRED) {\n\t\trc = wait_event_interruptible(flock->fl_wait, !flock->fl_next);\n\t\tif (!rc)\n\t\t\tgoto try_again;\n\t\tposix_unblock_lock(flock);\n\t}\n\treturn rc;\n}\n\nint\ncifs_push_mandatory_locks(struct cifsFileInfo *cfile)\n{\n\tunsigned int xid;\n\tint rc = 0, stored_rc;\n\tstruct cifsLockInfo *li, *tmp;\n\tstruct cifs_tcon *tcon;\n\tunsigned int num, max_num, max_buf;\n\tLOCKING_ANDX_RANGE *buf, *cur;\n\tint types[] = {LOCKING_ANDX_LARGE_FILES,\n\t\t       LOCKING_ANDX_SHARED_LOCK | LOCKING_ANDX_LARGE_FILES};\n\tint i;\n\n\txid = get_xid();\n\ttcon = tlink_tcon(cfile->tlink);\n\n\t/*\n\t * Accessing maxBuf is racy with cifs_reconnect - need to store value\n\t * and check it for zero before using.\n\t */\n\tmax_buf = tcon->ses->server->maxBuf;\n\tif (!max_buf) {\n\t\tfree_xid(xid);\n\t\treturn -EINVAL;\n\t}\n\n\tmax_num = (max_buf - sizeof(struct smb_hdr)) /\n\t\t\t\t\t\tsizeof(LOCKING_ANDX_RANGE);\n\tbuf = kzalloc(max_num * sizeof(LOCKING_ANDX_RANGE), GFP_KERNEL);\n\tif (!buf) {\n\t\tfree_xid(xid);\n\t\treturn -ENOMEM;\n\t}\n\n\tfor (i = 0; i < 2; i++) {\n\t\tcur = buf;\n\t\tnum = 0;\n\t\tlist_for_each_entry_safe(li, tmp, &cfile->llist->locks, llist) {\n\t\t\tif (li->type != types[i])\n\t\t\t\tcontinue;\n\t\t\tcur->Pid = cpu_to_le16(li->pid);\n\t\t\tcur->LengthLow = cpu_to_le32((u32)li->length);\n\t\t\tcur->LengthHigh = cpu_to_le32((u32)(li->length>>32));\n\t\t\tcur->OffsetLow = cpu_to_le32((u32)li->offset);\n\t\t\tcur->OffsetHigh = cpu_to_le32((u32)(li->offset>>32));\n\t\t\tif (++num == max_num) {\n\t\t\t\tstored_rc = cifs_lockv(xid, tcon,\n\t\t\t\t\t\t       cfile->fid.netfid,\n\t\t\t\t\t\t       (__u8)li->type, 0, num,\n\t\t\t\t\t\t       buf);\n\t\t\t\tif (stored_rc)\n\t\t\t\t\trc = stored_rc;\n\t\t\t\tcur = buf;\n\t\t\t\tnum = 0;\n\t\t\t} else\n\t\t\t\tcur++;\n\t\t}\n\n\t\tif (num) {\n\t\t\tstored_rc = cifs_lockv(xid, tcon, cfile->fid.netfid,\n\t\t\t\t\t       (__u8)types[i], 0, num, buf);\n\t\t\tif (stored_rc)\n\t\t\t\trc = stored_rc;\n\t\t}\n\t}\n\n\tkfree(buf);\n\tfree_xid(xid);\n\treturn rc;\n}\n\n/* copied from fs/locks.c with a name change */\n#define cifs_for_each_lock(inode, lockp) \\\n\tfor (lockp = &inode->i_flock; *lockp != NULL; \\\n\t     lockp = &(*lockp)->fl_next)\n\nstruct lock_to_push {\n\tstruct list_head llist;\n\t__u64 offset;\n\t__u64 length;\n\t__u32 pid;\n\t__u16 netfid;\n\t__u8 type;\n};\n\nstatic int\ncifs_push_posix_locks(struct cifsFileInfo *cfile)\n{\n\tstruct inode *inode = cfile->dentry->d_inode;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct file_lock *flock, **before;\n\tunsigned int count = 0, i = 0;\n\tint rc = 0, xid, type;\n\tstruct list_head locks_to_send, *el;\n\tstruct lock_to_push *lck, *tmp;\n\t__u64 length;\n\n\txid = get_xid();\n\n\tspin_lock(&inode->i_lock);\n\tcifs_for_each_lock(inode, before) {\n\t\tif ((*before)->fl_flags & FL_POSIX)\n\t\t\tcount++;\n\t}\n\tspin_unlock(&inode->i_lock);\n\n\tINIT_LIST_HEAD(&locks_to_send);\n\n\t/*\n\t * Allocating count locks is enough because no FL_POSIX locks can be\n\t * added to the list while we are holding cinode->lock_sem that\n\t * protects locking operations of this inode.\n\t */\n\tfor (; i < count; i++) {\n\t\tlck = kmalloc(sizeof(struct lock_to_push), GFP_KERNEL);\n\t\tif (!lck) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto err_out;\n\t\t}\n\t\tlist_add_tail(&lck->llist, &locks_to_send);\n\t}\n\n\tel = locks_to_send.next;\n\tspin_lock(&inode->i_lock);\n\tcifs_for_each_lock(inode, before) {\n\t\tflock = *before;\n\t\tif ((flock->fl_flags & FL_POSIX) == 0)\n\t\t\tcontinue;\n\t\tif (el == &locks_to_send) {\n\t\t\t/*\n\t\t\t * The list ended. We don't have enough allocated\n\t\t\t * structures - something is really wrong.\n\t\t\t */\n\t\t\tcifs_dbg(VFS, \"Can't push all brlocks!\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tlength = 1 + flock->fl_end - flock->fl_start;\n\t\tif (flock->fl_type == F_RDLCK || flock->fl_type == F_SHLCK)\n\t\t\ttype = CIFS_RDLCK;\n\t\telse\n\t\t\ttype = CIFS_WRLCK;\n\t\tlck = list_entry(el, struct lock_to_push, llist);\n\t\tlck->pid = flock->fl_pid;\n\t\tlck->netfid = cfile->fid.netfid;\n\t\tlck->length = length;\n\t\tlck->type = type;\n\t\tlck->offset = flock->fl_start;\n\t\tel = el->next;\n\t}\n\tspin_unlock(&inode->i_lock);\n\n\tlist_for_each_entry_safe(lck, tmp, &locks_to_send, llist) {\n\t\tint stored_rc;\n\n\t\tstored_rc = CIFSSMBPosixLock(xid, tcon, lck->netfid, lck->pid,\n\t\t\t\t\t     lck->offset, lck->length, NULL,\n\t\t\t\t\t     lck->type, 0);\n\t\tif (stored_rc)\n\t\t\trc = stored_rc;\n\t\tlist_del(&lck->llist);\n\t\tkfree(lck);\n\t}\n\nout:\n\tfree_xid(xid);\n\treturn rc;\nerr_out:\n\tlist_for_each_entry_safe(lck, tmp, &locks_to_send, llist) {\n\t\tlist_del(&lck->llist);\n\t\tkfree(lck);\n\t}\n\tgoto out;\n}\n\nstatic int\ncifs_push_locks(struct cifsFileInfo *cfile)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\t/* we are going to update can_cache_brlcks here - need a write access */\n\tdown_write(&cinode->lock_sem);\n\tif (!cinode->can_cache_brlcks) {\n\t\tup_write(&cinode->lock_sem);\n\t\treturn rc;\n\t}\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\trc = cifs_push_posix_locks(cfile);\n\telse\n\t\trc = tcon->ses->server->ops->push_mand_locks(cfile);\n\n\tcinode->can_cache_brlcks = false;\n\tup_write(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic void\ncifs_read_flock(struct file_lock *flock, __u32 *type, int *lock, int *unlock,\n\t\tbool *wait_flag, struct TCP_Server_Info *server)\n{\n\tif (flock->fl_flags & FL_POSIX)\n\t\tcifs_dbg(FYI, \"Posix\\n\");\n\tif (flock->fl_flags & FL_FLOCK)\n\t\tcifs_dbg(FYI, \"Flock\\n\");\n\tif (flock->fl_flags & FL_SLEEP) {\n\t\tcifs_dbg(FYI, \"Blocking lock\\n\");\n\t\t*wait_flag = true;\n\t}\n\tif (flock->fl_flags & FL_ACCESS)\n\t\tcifs_dbg(FYI, \"Process suspended by mandatory locking - not implemented yet\\n\");\n\tif (flock->fl_flags & FL_LEASE)\n\t\tcifs_dbg(FYI, \"Lease on file - not implemented yet\\n\");\n\tif (flock->fl_flags &\n\t    (~(FL_POSIX | FL_FLOCK | FL_SLEEP |\n\t       FL_ACCESS | FL_LEASE | FL_CLOSE)))\n\t\tcifs_dbg(FYI, \"Unknown lock flags 0x%x\\n\", flock->fl_flags);\n\n\t*type = server->vals->large_lock_type;\n\tif (flock->fl_type == F_WRLCK) {\n\t\tcifs_dbg(FYI, \"F_WRLCK\\n\");\n\t\t*type |= server->vals->exclusive_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_UNLCK) {\n\t\tcifs_dbg(FYI, \"F_UNLCK\\n\");\n\t\t*type |= server->vals->unlock_lock_type;\n\t\t*unlock = 1;\n\t\t/* Check if unlock includes more than one lock range */\n\t} else if (flock->fl_type == F_RDLCK) {\n\t\tcifs_dbg(FYI, \"F_RDLCK\\n\");\n\t\t*type |= server->vals->shared_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_EXLCK) {\n\t\tcifs_dbg(FYI, \"F_EXLCK\\n\");\n\t\t*type |= server->vals->exclusive_lock_type;\n\t\t*lock = 1;\n\t} else if (flock->fl_type == F_SHLCK) {\n\t\tcifs_dbg(FYI, \"F_SHLCK\\n\");\n\t\t*type |= server->vals->shared_lock_type;\n\t\t*lock = 1;\n\t} else\n\t\tcifs_dbg(FYI, \"Unknown type of lock\\n\");\n}\n\nstatic int\ncifs_getlk(struct file *file, struct file_lock *flock, __u32 type,\n\t   bool wait_flag, bool posix_lck, unsigned int xid)\n{\n\tint rc = 0;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\t__u16 netfid = cfile->fid.netfid;\n\n\tif (posix_lck) {\n\t\tint posix_lock_type;\n\n\t\trc = cifs_posix_lock_test(file, flock);\n\t\tif (!rc)\n\t\t\treturn rc;\n\n\t\tif (type & server->vals->shared_lock_type)\n\t\t\tposix_lock_type = CIFS_RDLCK;\n\t\telse\n\t\t\tposix_lock_type = CIFS_WRLCK;\n\t\trc = CIFSSMBPosixLock(xid, tcon, netfid, current->tgid,\n\t\t\t\t      flock->fl_start, length, flock,\n\t\t\t\t      posix_lock_type, wait_flag);\n\t\treturn rc;\n\t}\n\n\trc = cifs_lock_test(cfile, flock->fl_start, length, type, flock);\n\tif (!rc)\n\t\treturn rc;\n\n\t/* BB we could chain these into one lock request BB */\n\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length, type,\n\t\t\t\t    1, 0, false);\n\tif (rc == 0) {\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t\t    type, 0, 1, false);\n\t\tflock->fl_type = F_UNLCK;\n\t\tif (rc != 0)\n\t\t\tcifs_dbg(VFS, \"Error unlocking previously locked range %d during test of lock\\n\",\n\t\t\t\t rc);\n\t\treturn 0;\n\t}\n\n\tif (type & server->vals->shared_lock_type) {\n\t\tflock->fl_type = F_WRLCK;\n\t\treturn 0;\n\t}\n\n\ttype &= ~server->vals->exclusive_lock_type;\n\n\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t    type | server->vals->shared_lock_type,\n\t\t\t\t    1, 0, false);\n\tif (rc == 0) {\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\ttype | server->vals->shared_lock_type, 0, 1, false);\n\t\tflock->fl_type = F_RDLCK;\n\t\tif (rc != 0)\n\t\t\tcifs_dbg(VFS, \"Error unlocking previously locked range %d during test of lock\\n\",\n\t\t\t\t rc);\n\t} else\n\t\tflock->fl_type = F_WRLCK;\n\n\treturn 0;\n}\n\nvoid\ncifs_move_llist(struct list_head *source, struct list_head *dest)\n{\n\tstruct list_head *li, *tmp;\n\tlist_for_each_safe(li, tmp, source)\n\t\tlist_move(li, dest);\n}\n\nvoid\ncifs_free_llist(struct list_head *llist)\n{\n\tstruct cifsLockInfo *li, *tmp;\n\tlist_for_each_entry_safe(li, tmp, llist, llist) {\n\t\tcifs_del_lock_waiters(li);\n\t\tlist_del(&li->llist);\n\t\tkfree(li);\n\t}\n}\n\nint\ncifs_unlock_range(struct cifsFileInfo *cfile, struct file_lock *flock,\n\t\t  unsigned int xid)\n{\n\tint rc = 0, stored_rc;\n\tint types[] = {LOCKING_ANDX_LARGE_FILES,\n\t\t       LOCKING_ANDX_SHARED_LOCK | LOCKING_ANDX_LARGE_FILES};\n\tunsigned int i;\n\tunsigned int max_num, num, max_buf;\n\tLOCKING_ANDX_RANGE *buf, *cur;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct cifsInodeInfo *cinode = CIFS_I(cfile->dentry->d_inode);\n\tstruct cifsLockInfo *li, *tmp;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct list_head tmp_llist;\n\n\tINIT_LIST_HEAD(&tmp_llist);\n\n\t/*\n\t * Accessing maxBuf is racy with cifs_reconnect - need to store value\n\t * and check it for zero before using.\n\t */\n\tmax_buf = tcon->ses->server->maxBuf;\n\tif (!max_buf)\n\t\treturn -EINVAL;\n\n\tmax_num = (max_buf - sizeof(struct smb_hdr)) /\n\t\t\t\t\t\tsizeof(LOCKING_ANDX_RANGE);\n\tbuf = kzalloc(max_num * sizeof(LOCKING_ANDX_RANGE), GFP_KERNEL);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\tdown_write(&cinode->lock_sem);\n\tfor (i = 0; i < 2; i++) {\n\t\tcur = buf;\n\t\tnum = 0;\n\t\tlist_for_each_entry_safe(li, tmp, &cfile->llist->locks, llist) {\n\t\t\tif (flock->fl_start > li->offset ||\n\t\t\t    (flock->fl_start + length) <\n\t\t\t    (li->offset + li->length))\n\t\t\t\tcontinue;\n\t\t\tif (current->tgid != li->pid)\n\t\t\t\tcontinue;\n\t\t\tif (types[i] != li->type)\n\t\t\t\tcontinue;\n\t\t\tif (cinode->can_cache_brlcks) {\n\t\t\t\t/*\n\t\t\t\t * We can cache brlock requests - simply remove\n\t\t\t\t * a lock from the file's list.\n\t\t\t\t */\n\t\t\t\tlist_del(&li->llist);\n\t\t\t\tcifs_del_lock_waiters(li);\n\t\t\t\tkfree(li);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcur->Pid = cpu_to_le16(li->pid);\n\t\t\tcur->LengthLow = cpu_to_le32((u32)li->length);\n\t\t\tcur->LengthHigh = cpu_to_le32((u32)(li->length>>32));\n\t\t\tcur->OffsetLow = cpu_to_le32((u32)li->offset);\n\t\t\tcur->OffsetHigh = cpu_to_le32((u32)(li->offset>>32));\n\t\t\t/*\n\t\t\t * We need to save a lock here to let us add it again to\n\t\t\t * the file's list if the unlock range request fails on\n\t\t\t * the server.\n\t\t\t */\n\t\t\tlist_move(&li->llist, &tmp_llist);\n\t\t\tif (++num == max_num) {\n\t\t\t\tstored_rc = cifs_lockv(xid, tcon,\n\t\t\t\t\t\t       cfile->fid.netfid,\n\t\t\t\t\t\t       li->type, num, 0, buf);\n\t\t\t\tif (stored_rc) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We failed on the unlock range\n\t\t\t\t\t * request - add all locks from the tmp\n\t\t\t\t\t * list to the head of the file's list.\n\t\t\t\t\t */\n\t\t\t\t\tcifs_move_llist(&tmp_llist,\n\t\t\t\t\t\t\t&cfile->llist->locks);\n\t\t\t\t\trc = stored_rc;\n\t\t\t\t} else\n\t\t\t\t\t/*\n\t\t\t\t\t * The unlock range request succeed -\n\t\t\t\t\t * free the tmp list.\n\t\t\t\t\t */\n\t\t\t\t\tcifs_free_llist(&tmp_llist);\n\t\t\t\tcur = buf;\n\t\t\t\tnum = 0;\n\t\t\t} else\n\t\t\t\tcur++;\n\t\t}\n\t\tif (num) {\n\t\t\tstored_rc = cifs_lockv(xid, tcon, cfile->fid.netfid,\n\t\t\t\t\t       types[i], num, 0, buf);\n\t\t\tif (stored_rc) {\n\t\t\t\tcifs_move_llist(&tmp_llist,\n\t\t\t\t\t\t&cfile->llist->locks);\n\t\t\t\trc = stored_rc;\n\t\t\t} else\n\t\t\t\tcifs_free_llist(&tmp_llist);\n\t\t}\n\t}\n\n\tup_write(&cinode->lock_sem);\n\tkfree(buf);\n\treturn rc;\n}\n\nstatic int\ncifs_setlk(struct file *file, struct file_lock *flock, __u32 type,\n\t   bool wait_flag, bool posix_lck, int lock, int unlock,\n\t   unsigned int xid)\n{\n\tint rc = 0;\n\t__u64 length = 1 + flock->fl_end - flock->fl_start;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct inode *inode = cfile->dentry->d_inode;\n\n\tif (posix_lck) {\n\t\tint posix_lock_type;\n\n\t\trc = cifs_posix_lock_set(file, flock);\n\t\tif (!rc || rc < 0)\n\t\t\treturn rc;\n\n\t\tif (type & server->vals->shared_lock_type)\n\t\t\tposix_lock_type = CIFS_RDLCK;\n\t\telse\n\t\t\tposix_lock_type = CIFS_WRLCK;\n\n\t\tif (unlock == 1)\n\t\t\tposix_lock_type = CIFS_UNLCK;\n\n\t\trc = CIFSSMBPosixLock(xid, tcon, cfile->fid.netfid,\n\t\t\t\t      current->tgid, flock->fl_start, length,\n\t\t\t\t      NULL, posix_lock_type, wait_flag);\n\t\tgoto out;\n\t}\n\n\tif (lock) {\n\t\tstruct cifsLockInfo *lock;\n\n\t\tlock = cifs_lock_init(flock->fl_start, length, type);\n\t\tif (!lock)\n\t\t\treturn -ENOMEM;\n\n\t\trc = cifs_lock_add_if(cfile, lock, wait_flag);\n\t\tif (rc < 0) {\n\t\t\tkfree(lock);\n\t\t\treturn rc;\n\t\t}\n\t\tif (!rc)\n\t\t\tgoto out;\n\n\t\t/*\n\t\t * Windows 7 server can delay breaking lease from read to None\n\t\t * if we set a byte-range lock on a file - break it explicitly\n\t\t * before sending the lock to the server to be sure the next\n\t\t * read won't conflict with non-overlapted locks due to\n\t\t * pagereading.\n\t\t */\n\t\tif (!CIFS_CACHE_WRITE(CIFS_I(inode)) &&\n\t\t\t\t\tCIFS_CACHE_READ(CIFS_I(inode))) {\n\t\t\tcifs_invalidate_mapping(inode);\n\t\t\tcifs_dbg(FYI, \"Set no oplock for inode=%p due to mand locks\\n\",\n\t\t\t\t inode);\n\t\t\tCIFS_I(inode)->oplock = 0;\n\t\t}\n\n\t\trc = server->ops->mand_lock(xid, cfile, flock->fl_start, length,\n\t\t\t\t\t    type, 1, 0, wait_flag);\n\t\tif (rc) {\n\t\t\tkfree(lock);\n\t\t\treturn rc;\n\t\t}\n\n\t\tcifs_lock_add(cfile, lock);\n\t} else if (unlock)\n\t\trc = server->ops->mand_unlock_range(cfile, flock, xid);\n\nout:\n\tif (flock->fl_flags & FL_POSIX)\n\t\tposix_lock_file_wait(file, flock);\n\treturn rc;\n}\n\nint cifs_lock(struct file *file, int cmd, struct file_lock *flock)\n{\n\tint rc, xid;\n\tint lock = 0, unlock = 0;\n\tbool wait_flag = false;\n\tbool posix_lck = false;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct cifsInodeInfo *cinode;\n\tstruct cifsFileInfo *cfile;\n\t__u16 netfid;\n\t__u32 type;\n\n\trc = -EACCES;\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Lock parm: 0x%x flockflags: 0x%x flocktype: 0x%x start: %lld end: %lld\\n\",\n\t\t cmd, flock->fl_flags, flock->fl_type,\n\t\t flock->fl_start, flock->fl_end);\n\n\tcfile = (struct cifsFileInfo *)file->private_data;\n\ttcon = tlink_tcon(cfile->tlink);\n\n\tcifs_read_flock(flock, &type, &lock, &unlock, &wait_flag,\n\t\t\ttcon->ses->server);\n\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tnetfid = cfile->fid.netfid;\n\tcinode = CIFS_I(file_inode(file));\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\tposix_lck = true;\n\t/*\n\t * BB add code here to normalize offset and length to account for\n\t * negative length which we can not accept over the wire.\n\t */\n\tif (IS_GETLK(cmd)) {\n\t\trc = cifs_getlk(file, flock, type, wait_flag, posix_lck, xid);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tif (!lock && !unlock) {\n\t\t/*\n\t\t * if no lock or unlock then nothing to do since we do not\n\t\t * know what it is\n\t\t */\n\t\tfree_xid(xid);\n\t\treturn -EOPNOTSUPP;\n\t}\n\n\trc = cifs_setlk(file, flock, type, wait_flag, posix_lck, lock, unlock,\n\t\t\txid);\n\tfree_xid(xid);\n\treturn rc;\n}\n\n/*\n * update the file size (if needed) after a write. Should be called with\n * the inode->i_lock held\n */\nvoid\ncifs_update_eof(struct cifsInodeInfo *cifsi, loff_t offset,\n\t\t      unsigned int bytes_written)\n{\n\tloff_t end_of_write = offset + bytes_written;\n\n\tif (end_of_write > cifsi->server_eof)\n\t\tcifsi->server_eof = end_of_write;\n}\n\nstatic ssize_t\ncifs_write(struct cifsFileInfo *open_file, __u32 pid, const char *write_data,\n\t   size_t write_size, loff_t *offset)\n{\n\tint rc = 0;\n\tunsigned int bytes_written = 0;\n\tunsigned int total_written;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tunsigned int xid;\n\tstruct dentry *dentry = open_file->dentry;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(dentry->d_inode);\n\tstruct cifs_io_parms io_parms;\n\n\tcifs_sb = CIFS_SB(dentry->d_sb);\n\n\tcifs_dbg(FYI, \"write %zd bytes to offset %lld of %s\\n\",\n\t\t write_size, *offset, dentry->d_name.name);\n\n\ttcon = tlink_tcon(open_file->tlink);\n\tserver = tcon->ses->server;\n\n\tif (!server->ops->sync_write)\n\t\treturn -ENOSYS;\n\n\txid = get_xid();\n\n\tfor (total_written = 0; write_size > total_written;\n\t     total_written += bytes_written) {\n\t\trc = -EAGAIN;\n\t\twhile (rc == -EAGAIN) {\n\t\t\tstruct kvec iov[2];\n\t\t\tunsigned int len;\n\n\t\t\tif (open_file->invalidHandle) {\n\t\t\t\t/* we could deadlock if we called\n\t\t\t\t   filemap_fdatawait from here so tell\n\t\t\t\t   reopen_file not to flush data to\n\t\t\t\t   server now */\n\t\t\t\trc = cifs_reopen_file(open_file, false);\n\t\t\t\tif (rc != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlen = min((size_t)cifs_sb->wsize,\n\t\t\t\t  write_size - total_written);\n\t\t\t/* iov[0] is reserved for smb header */\n\t\t\tiov[1].iov_base = (char *)write_data + total_written;\n\t\t\tiov[1].iov_len = len;\n\t\t\tio_parms.pid = pid;\n\t\t\tio_parms.tcon = tcon;\n\t\t\tio_parms.offset = *offset;\n\t\t\tio_parms.length = len;\n\t\t\trc = server->ops->sync_write(xid, open_file, &io_parms,\n\t\t\t\t\t\t     &bytes_written, iov, 1);\n\t\t}\n\t\tif (rc || (bytes_written == 0)) {\n\t\t\tif (total_written)\n\t\t\t\tbreak;\n\t\t\telse {\n\t\t\t\tfree_xid(xid);\n\t\t\t\treturn rc;\n\t\t\t}\n\t\t} else {\n\t\t\tspin_lock(&dentry->d_inode->i_lock);\n\t\t\tcifs_update_eof(cifsi, *offset, bytes_written);\n\t\t\tspin_unlock(&dentry->d_inode->i_lock);\n\t\t\t*offset += bytes_written;\n\t\t}\n\t}\n\n\tcifs_stats_bytes_written(tcon, total_written);\n\n\tif (total_written > 0) {\n\t\tspin_lock(&dentry->d_inode->i_lock);\n\t\tif (*offset > dentry->d_inode->i_size)\n\t\t\ti_size_write(dentry->d_inode, *offset);\n\t\tspin_unlock(&dentry->d_inode->i_lock);\n\t}\n\tmark_inode_dirty_sync(dentry->d_inode);\n\tfree_xid(xid);\n\treturn total_written;\n}\n\nstruct cifsFileInfo *find_readable_file(struct cifsInodeInfo *cifs_inode,\n\t\t\t\t\tbool fsuid_only)\n{\n\tstruct cifsFileInfo *open_file = NULL;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cifs_inode->vfs_inode.i_sb);\n\n\t/* only filter by fsuid on multiuser mounts */\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_MULTIUSER))\n\t\tfsuid_only = false;\n\n\tspin_lock(&cifs_file_list_lock);\n\t/* we could simply get the first_list_entry since write-only entries\n\t   are always at the end of the list but since the first entry might\n\t   have a close pending, we go through the whole list */\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (fsuid_only && !uid_eq(open_file->uid, current_fsuid()))\n\t\t\tcontinue;\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_READ) {\n\t\t\tif (!open_file->invalidHandle) {\n\t\t\t\t/* found a good file */\n\t\t\t\t/* lock it so it will not be closed on us */\n\t\t\t\tcifsFileInfo_get_locked(open_file);\n\t\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\t\treturn open_file;\n\t\t\t} /* else might as well continue, and look for\n\t\t\t     another, or simply have the caller reopen it\n\t\t\t     again rather than trying to fix this handle */\n\t\t} else /* write only file */\n\t\t\tbreak; /* write only files are last so must be done */\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\treturn NULL;\n}\n\nstruct cifsFileInfo *find_writable_file(struct cifsInodeInfo *cifs_inode,\n\t\t\t\t\tbool fsuid_only)\n{\n\tstruct cifsFileInfo *open_file, *inv_file = NULL;\n\tstruct cifs_sb_info *cifs_sb;\n\tbool any_available = false;\n\tint rc;\n\tunsigned int refind = 0;\n\n\t/* Having a null inode here (because mapping->host was set to zero by\n\tthe VFS or MM) should not happen but we had reports of on oops (due to\n\tit being zero) during stress testcases so we need to check for it */\n\n\tif (cifs_inode == NULL) {\n\t\tcifs_dbg(VFS, \"Null inode passed to cifs_writeable_file\\n\");\n\t\tdump_stack();\n\t\treturn NULL;\n\t}\n\n\tcifs_sb = CIFS_SB(cifs_inode->vfs_inode.i_sb);\n\n\t/* only filter by fsuid on multiuser mounts */\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_MULTIUSER))\n\t\tfsuid_only = false;\n\n\tspin_lock(&cifs_file_list_lock);\nrefind_writable:\n\tif (refind > MAX_REOPEN_ATT) {\n\t\tspin_unlock(&cifs_file_list_lock);\n\t\treturn NULL;\n\t}\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (!any_available && open_file->pid != current->tgid)\n\t\t\tcontinue;\n\t\tif (fsuid_only && !uid_eq(open_file->uid, current_fsuid()))\n\t\t\tcontinue;\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_WRITE) {\n\t\t\tif (!open_file->invalidHandle) {\n\t\t\t\t/* found a good writable file */\n\t\t\t\tcifsFileInfo_get_locked(open_file);\n\t\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\t\treturn open_file;\n\t\t\t} else {\n\t\t\t\tif (!inv_file)\n\t\t\t\t\tinv_file = open_file;\n\t\t\t}\n\t\t}\n\t}\n\t/* couldn't find useable FH with same pid, try any available */\n\tif (!any_available) {\n\t\tany_available = true;\n\t\tgoto refind_writable;\n\t}\n\n\tif (inv_file) {\n\t\tany_available = false;\n\t\tcifsFileInfo_get_locked(inv_file);\n\t}\n\n\tspin_unlock(&cifs_file_list_lock);\n\n\tif (inv_file) {\n\t\trc = cifs_reopen_file(inv_file, false);\n\t\tif (!rc)\n\t\t\treturn inv_file;\n\t\telse {\n\t\t\tspin_lock(&cifs_file_list_lock);\n\t\t\tlist_move_tail(&inv_file->flist,\n\t\t\t\t\t&cifs_inode->openFileList);\n\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\tcifsFileInfo_put(inv_file);\n\t\t\tspin_lock(&cifs_file_list_lock);\n\t\t\t++refind;\n\t\t\tgoto refind_writable;\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\nstatic int cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)\n{\n\tstruct address_space *mapping = page->mapping;\n\tloff_t offset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\tchar *write_data;\n\tint rc = -EFAULT;\n\tint bytes_written = 0;\n\tstruct inode *inode;\n\tstruct cifsFileInfo *open_file;\n\n\tif (!mapping || !mapping->host)\n\t\treturn -EFAULT;\n\n\tinode = page->mapping->host;\n\n\toffset += (loff_t)from;\n\twrite_data = kmap(page);\n\twrite_data += from;\n\n\tif ((to > PAGE_CACHE_SIZE) || (from > to)) {\n\t\tkunmap(page);\n\t\treturn -EIO;\n\t}\n\n\t/* racing with truncate? */\n\tif (offset > mapping->host->i_size) {\n\t\tkunmap(page);\n\t\treturn 0; /* don't care */\n\t}\n\n\t/* check to make sure that we are not extending the file */\n\tif (mapping->host->i_size - offset < (loff_t)to)\n\t\tto = (unsigned)(mapping->host->i_size - offset);\n\n\topen_file = find_writable_file(CIFS_I(mapping->host), false);\n\tif (open_file) {\n\t\tbytes_written = cifs_write(open_file, open_file->pid,\n\t\t\t\t\t   write_data, to - from, &offset);\n\t\tcifsFileInfo_put(open_file);\n\t\t/* Does mm or vfs already set times? */\n\t\tinode->i_atime = inode->i_mtime = current_fs_time(inode->i_sb);\n\t\tif ((bytes_written > 0) && (offset))\n\t\t\trc = 0;\n\t\telse if (bytes_written < 0)\n\t\t\trc = bytes_written;\n\t} else {\n\t\tcifs_dbg(FYI, \"No writeable filehandles for inode\\n\");\n\t\trc = -EIO;\n\t}\n\n\tkunmap(page);\n\treturn rc;\n}\n\nstatic int cifs_writepages(struct address_space *mapping,\n\t\t\t   struct writeback_control *wbc)\n{\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(mapping->host->i_sb);\n\tbool done = false, scanned = false, range_whole = false;\n\tpgoff_t end, index;\n\tstruct cifs_writedata *wdata;\n\tstruct TCP_Server_Info *server;\n\tstruct page *page;\n\tint rc = 0;\n\n\t/*\n\t * If wsize is smaller than the page cache size, default to writing\n\t * one page at a time via cifs_writepage\n\t */\n\tif (cifs_sb->wsize < PAGE_CACHE_SIZE)\n\t\treturn generic_writepages(mapping, wbc);\n\n\tif (wbc->range_cyclic) {\n\t\tindex = mapping->writeback_index; /* Start from prev offset */\n\t\tend = -1;\n\t} else {\n\t\tindex = wbc->range_start >> PAGE_CACHE_SHIFT;\n\t\tend = wbc->range_end >> PAGE_CACHE_SHIFT;\n\t\tif (wbc->range_start == 0 && wbc->range_end == LLONG_MAX)\n\t\t\trange_whole = true;\n\t\tscanned = true;\n\t}\nretry:\n\twhile (!done && index <= end) {\n\t\tunsigned int i, nr_pages, found_pages;\n\t\tpgoff_t next = 0, tofind;\n\t\tstruct page **pages;\n\n\t\ttofind = min((cifs_sb->wsize / PAGE_CACHE_SIZE) - 1,\n\t\t\t\tend - index) + 1;\n\n\t\twdata = cifs_writedata_alloc((unsigned int)tofind,\n\t\t\t\t\t     cifs_writev_complete);\n\t\tif (!wdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\t/*\n\t\t * find_get_pages_tag seems to return a max of 256 on each\n\t\t * iteration, so we must call it several times in order to\n\t\t * fill the array or the wsize is effectively limited to\n\t\t * 256 * PAGE_CACHE_SIZE.\n\t\t */\n\t\tfound_pages = 0;\n\t\tpages = wdata->pages;\n\t\tdo {\n\t\t\tnr_pages = find_get_pages_tag(mapping, &index,\n\t\t\t\t\t\t\tPAGECACHE_TAG_DIRTY,\n\t\t\t\t\t\t\ttofind, pages);\n\t\t\tfound_pages += nr_pages;\n\t\t\ttofind -= nr_pages;\n\t\t\tpages += nr_pages;\n\t\t} while (nr_pages && tofind && index <= end);\n\n\t\tif (found_pages == 0) {\n\t\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tnr_pages = 0;\n\t\tfor (i = 0; i < found_pages; i++) {\n\t\t\tpage = wdata->pages[i];\n\t\t\t/*\n\t\t\t * At this point we hold neither mapping->tree_lock nor\n\t\t\t * lock on the page itself: the page may be truncated or\n\t\t\t * invalidated (changing page->mapping to NULL), or even\n\t\t\t * swizzled back from swapper_space to tmpfs file\n\t\t\t * mapping\n\t\t\t */\n\n\t\t\tif (nr_pages == 0)\n\t\t\t\tlock_page(page);\n\t\t\telse if (!trylock_page(page))\n\t\t\t\tbreak;\n\n\t\t\tif (unlikely(page->mapping != mapping)) {\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!wbc->range_cyclic && page->index > end) {\n\t\t\t\tdone = true;\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (next && (page->index != next)) {\n\t\t\t\t/* Not next consecutive page */\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (wbc->sync_mode != WB_SYNC_NONE)\n\t\t\t\twait_on_page_writeback(page);\n\n\t\t\tif (PageWriteback(page) ||\n\t\t\t\t\t!clear_page_dirty_for_io(page)) {\n\t\t\t\tunlock_page(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * This actually clears the dirty bit in the radix tree.\n\t\t\t * See cifs_writepage() for more commentary.\n\t\t\t */\n\t\t\tset_page_writeback(page);\n\n\t\t\tif (page_offset(page) >= i_size_read(mapping->host)) {\n\t\t\t\tdone = true;\n\t\t\t\tunlock_page(page);\n\t\t\t\tend_page_writeback(page);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\twdata->pages[i] = page;\n\t\t\tnext = page->index + 1;\n\t\t\t++nr_pages;\n\t\t}\n\n\t\t/* reset index to refind any pages skipped */\n\t\tif (nr_pages == 0)\n\t\t\tindex = wdata->pages[0]->index + 1;\n\n\t\t/* put any pages we aren't going to use */\n\t\tfor (i = nr_pages; i < found_pages; i++) {\n\t\t\tpage_cache_release(wdata->pages[i]);\n\t\t\twdata->pages[i] = NULL;\n\t\t}\n\n\t\t/* nothing to write? */\n\t\tif (nr_pages == 0) {\n\t\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\t\t\tcontinue;\n\t\t}\n\n\t\twdata->sync_mode = wbc->sync_mode;\n\t\twdata->nr_pages = nr_pages;\n\t\twdata->offset = page_offset(wdata->pages[0]);\n\t\twdata->pagesz = PAGE_CACHE_SIZE;\n\t\twdata->tailsz =\n\t\t\tmin(i_size_read(mapping->host) -\n\t\t\t    page_offset(wdata->pages[nr_pages - 1]),\n\t\t\t    (loff_t)PAGE_CACHE_SIZE);\n\t\twdata->bytes = ((nr_pages - 1) * PAGE_CACHE_SIZE) +\n\t\t\t\t\twdata->tailsz;\n\n\t\tdo {\n\t\t\tif (wdata->cfile != NULL)\n\t\t\t\tcifsFileInfo_put(wdata->cfile);\n\t\t\twdata->cfile = find_writable_file(CIFS_I(mapping->host),\n\t\t\t\t\t\t\t  false);\n\t\t\tif (!wdata->cfile) {\n\t\t\t\tcifs_dbg(VFS, \"No writable handles for inode\\n\");\n\t\t\t\trc = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\twdata->pid = wdata->cfile->pid;\n\t\t\tserver = tlink_tcon(wdata->cfile->tlink)->ses->server;\n\t\t\trc = server->ops->async_writev(wdata,\n\t\t\t\t\t\t\tcifs_writedata_release);\n\t\t} while (wbc->sync_mode == WB_SYNC_ALL && rc == -EAGAIN);\n\n\t\tfor (i = 0; i < nr_pages; ++i)\n\t\t\tunlock_page(wdata->pages[i]);\n\n\t\t/* send failure -- clean up the mess */\n\t\tif (rc != 0) {\n\t\t\tfor (i = 0; i < nr_pages; ++i) {\n\t\t\t\tif (rc == -EAGAIN)\n\t\t\t\t\tredirty_page_for_writepage(wbc,\n\t\t\t\t\t\t\t   wdata->pages[i]);\n\t\t\t\telse\n\t\t\t\t\tSetPageError(wdata->pages[i]);\n\t\t\t\tend_page_writeback(wdata->pages[i]);\n\t\t\t\tpage_cache_release(wdata->pages[i]);\n\t\t\t}\n\t\t\tif (rc != -EAGAIN)\n\t\t\t\tmapping_set_error(mapping, rc);\n\t\t}\n\t\tkref_put(&wdata->refcount, cifs_writedata_release);\n\n\t\twbc->nr_to_write -= nr_pages;\n\t\tif (wbc->nr_to_write <= 0)\n\t\t\tdone = true;\n\n\t\tindex = next;\n\t}\n\n\tif (!scanned && !done) {\n\t\t/*\n\t\t * We hit the last page and there is more work to be done: wrap\n\t\t * back to the start of the file\n\t\t */\n\t\tscanned = true;\n\t\tindex = 0;\n\t\tgoto retry;\n\t}\n\n\tif (wbc->range_cyclic || (range_whole && wbc->nr_to_write > 0))\n\t\tmapping->writeback_index = index;\n\n\treturn rc;\n}\n\nstatic int\ncifs_writepage_locked(struct page *page, struct writeback_control *wbc)\n{\n\tint rc;\n\tunsigned int xid;\n\n\txid = get_xid();\n/* BB add check for wbc flags */\n\tpage_cache_get(page);\n\tif (!PageUptodate(page))\n\t\tcifs_dbg(FYI, \"ppw - page not up to date\\n\");\n\n\t/*\n\t * Set the \"writeback\" flag, and clear \"dirty\" in the radix tree.\n\t *\n\t * A writepage() implementation always needs to do either this,\n\t * or re-dirty the page with \"redirty_page_for_writepage()\" in\n\t * the case of a failure.\n\t *\n\t * Just unlocking the page will cause the radix tree tag-bits\n\t * to fail to update with the state of the page correctly.\n\t */\n\tset_page_writeback(page);\nretry_write:\n\trc = cifs_partialpagewrite(page, 0, PAGE_CACHE_SIZE);\n\tif (rc == -EAGAIN && wbc->sync_mode == WB_SYNC_ALL)\n\t\tgoto retry_write;\n\telse if (rc == -EAGAIN)\n\t\tredirty_page_for_writepage(wbc, page);\n\telse if (rc != 0)\n\t\tSetPageError(page);\n\telse\n\t\tSetPageUptodate(page);\n\tend_page_writeback(page);\n\tpage_cache_release(page);\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic int cifs_writepage(struct page *page, struct writeback_control *wbc)\n{\n\tint rc = cifs_writepage_locked(page, wbc);\n\tunlock_page(page);\n\treturn rc;\n}\n\nstatic int cifs_write_end(struct file *file, struct address_space *mapping,\n\t\t\tloff_t pos, unsigned len, unsigned copied,\n\t\t\tstruct page *page, void *fsdata)\n{\n\tint rc;\n\tstruct inode *inode = mapping->host;\n\tstruct cifsFileInfo *cfile = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(cfile->dentry->d_sb);\n\t__u32 pid;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = cfile->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tcifs_dbg(FYI, \"write_end for page %p from pos %lld with %d bytes\\n\",\n\t\t page, pos, copied);\n\n\tif (PageChecked(page)) {\n\t\tif (copied == len)\n\t\t\tSetPageUptodate(page);\n\t\tClearPageChecked(page);\n\t} else if (!PageUptodate(page) && copied == PAGE_CACHE_SIZE)\n\t\tSetPageUptodate(page);\n\n\tif (!PageUptodate(page)) {\n\t\tchar *page_data;\n\t\tunsigned offset = pos & (PAGE_CACHE_SIZE - 1);\n\t\tunsigned int xid;\n\n\t\txid = get_xid();\n\t\t/* this is probably better than directly calling\n\t\t   partialpage_write since in this function the file handle is\n\t\t   known which we might as well\tleverage */\n\t\t/* BB check if anything else missing out of ppw\n\t\t   such as updating last write time */\n\t\tpage_data = kmap(page);\n\t\trc = cifs_write(cfile, pid, page_data + offset, copied, &pos);\n\t\t/* if (rc < 0) should we set writebehind rc? */\n\t\tkunmap(page);\n\n\t\tfree_xid(xid);\n\t} else {\n\t\trc = copied;\n\t\tpos += copied;\n\t\tset_page_dirty(page);\n\t}\n\n\tif (rc > 0) {\n\t\tspin_lock(&inode->i_lock);\n\t\tif (pos > inode->i_size)\n\t\t\ti_size_write(inode, pos);\n\t\tspin_unlock(&inode->i_lock);\n\t}\n\n\tunlock_page(page);\n\tpage_cache_release(page);\n\n\treturn rc;\n}\n\nint cifs_strict_fsync(struct file *file, loff_t start, loff_t end,\n\t\t      int datasync)\n{\n\tunsigned int xid;\n\tint rc = 0;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsFileInfo *smbfile = file->private_data;\n\tstruct inode *inode = file_inode(file);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\n\trc = filemap_write_and_wait_range(inode->i_mapping, start, end);\n\tif (rc)\n\t\treturn rc;\n\tmutex_lock(&inode->i_mutex);\n\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Sync file - name: %s datasync: 0x%x\\n\",\n\t\t file->f_path.dentry->d_name.name, datasync);\n\n\tif (!CIFS_CACHE_READ(CIFS_I(inode))) {\n\t\trc = cifs_invalidate_mapping(inode);\n\t\tif (rc) {\n\t\t\tcifs_dbg(FYI, \"rc: %d during invalidate phase\\n\", rc);\n\t\t\trc = 0; /* don't care about it in fsync */\n\t\t}\n\t}\n\n\ttcon = tlink_tcon(smbfile->tlink);\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOSSYNC)) {\n\t\tserver = tcon->ses->server;\n\t\tif (server->ops->flush)\n\t\t\trc = server->ops->flush(xid, tcon, &smbfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t}\n\n\tfree_xid(xid);\n\tmutex_unlock(&inode->i_mutex);\n\treturn rc;\n}\n\nint cifs_fsync(struct file *file, loff_t start, loff_t end, int datasync)\n{\n\tunsigned int xid;\n\tint rc = 0;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tstruct cifsFileInfo *smbfile = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tstruct inode *inode = file->f_mapping->host;\n\n\trc = filemap_write_and_wait_range(inode->i_mapping, start, end);\n\tif (rc)\n\t\treturn rc;\n\tmutex_lock(&inode->i_mutex);\n\n\txid = get_xid();\n\n\tcifs_dbg(FYI, \"Sync file - name: %s datasync: 0x%x\\n\",\n\t\t file->f_path.dentry->d_name.name, datasync);\n\n\ttcon = tlink_tcon(smbfile->tlink);\n\tif (!(cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOSSYNC)) {\n\t\tserver = tcon->ses->server;\n\t\tif (server->ops->flush)\n\t\t\trc = server->ops->flush(xid, tcon, &smbfile->fid);\n\t\telse\n\t\t\trc = -ENOSYS;\n\t}\n\n\tfree_xid(xid);\n\tmutex_unlock(&inode->i_mutex);\n\treturn rc;\n}\n\n/*\n * As file closes, flush all cached write data for this inode checking\n * for write behind errors.\n */\nint cifs_flush(struct file *file, fl_owner_t id)\n{\n\tstruct inode *inode = file_inode(file);\n\tint rc = 0;\n\n\tif (file->f_mode & FMODE_WRITE)\n\t\trc = filemap_write_and_wait(inode->i_mapping);\n\n\tcifs_dbg(FYI, \"Flush inode %p file %p rc %d\\n\", inode, file, rc);\n\n\treturn rc;\n}\n\nstatic int\ncifs_write_allocate_pages(struct page **pages, unsigned long num_pages)\n{\n\tint rc = 0;\n\tunsigned long i;\n\n\tfor (i = 0; i < num_pages; i++) {\n\t\tpages[i] = alloc_page(GFP_KERNEL|__GFP_HIGHMEM);\n\t\tif (!pages[i]) {\n\t\t\t/*\n\t\t\t * save number of pages we have already allocated and\n\t\t\t * return with ENOMEM error\n\t\t\t */\n\t\t\tnum_pages = i;\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rc) {\n\t\tfor (i = 0; i < num_pages; i++)\n\t\t\tput_page(pages[i]);\n\t}\n\treturn rc;\n}\n\nstatic inline\nsize_t get_numpages(const size_t wsize, const size_t len, size_t *cur_len)\n{\n\tsize_t num_pages;\n\tsize_t clen;\n\n\tclen = min_t(const size_t, len, wsize);\n\tnum_pages = DIV_ROUND_UP(clen, PAGE_SIZE);\n\n\tif (cur_len)\n\t\t*cur_len = clen;\n\n\treturn num_pages;\n}\n\nstatic void\ncifs_uncached_writedata_release(struct kref *refcount)\n{\n\tint i;\n\tstruct cifs_writedata *wdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_writedata, refcount);\n\n\tfor (i = 0; i < wdata->nr_pages; i++)\n\t\tput_page(wdata->pages[i]);\n\tcifs_writedata_release(refcount);\n}\n\nstatic void\ncifs_uncached_writev_complete(struct work_struct *work)\n{\n\tstruct cifs_writedata *wdata = container_of(work,\n\t\t\t\t\tstruct cifs_writedata, work);\n\tstruct inode *inode = wdata->cfile->dentry->d_inode;\n\tstruct cifsInodeInfo *cifsi = CIFS_I(inode);\n\n\tspin_lock(&inode->i_lock);\n\tcifs_update_eof(cifsi, wdata->offset, wdata->bytes);\n\tif (cifsi->server_eof > inode->i_size)\n\t\ti_size_write(inode, cifsi->server_eof);\n\tspin_unlock(&inode->i_lock);\n\n\tcomplete(&wdata->done);\n\n\tkref_put(&wdata->refcount, cifs_uncached_writedata_release);\n}\n\n/* attempt to send write to server, retry on any -EAGAIN errors */\nstatic int\ncifs_uncached_retry_writev(struct cifs_writedata *wdata)\n{\n\tint rc;\n\tstruct TCP_Server_Info *server;\n\n\tserver = tlink_tcon(wdata->cfile->tlink)->ses->server;\n\n\tdo {\n\t\tif (wdata->cfile->invalidHandle) {\n\t\t\trc = cifs_reopen_file(wdata->cfile, false);\n\t\t\tif (rc != 0)\n\t\t\t\tcontinue;\n\t\t}\n\t\trc = server->ops->async_writev(wdata,\n\t\t\t\t\t       cifs_uncached_writedata_release);\n\t} while (rc == -EAGAIN);\n\n\treturn rc;\n}\n\nstatic ssize_t\ncifs_iovec_write(struct file *file, const struct iovec *iov,\n\t\t unsigned long nr_segs, loff_t *poffset)\n{\n\tunsigned long nr_pages, i;\n\tsize_t bytes, copied, len, cur_len;\n\tssize_t total_written = 0;\n\tloff_t offset;\n\tstruct iov_iter it;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_tcon *tcon;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_writedata *wdata, *tmp;\n\tstruct list_head wdata_list;\n\tint rc;\n\tpid_t pid;\n\n\tlen = iov_length(iov, nr_segs);\n\tif (!len)\n\t\treturn 0;\n\n\trc = generic_write_checks(file, poffset, &len, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tINIT_LIST_HEAD(&wdata_list);\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\n\tif (!tcon->ses->server->ops->async_writev)\n\t\treturn -ENOSYS;\n\n\toffset = *poffset;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tiov_iter_init(&it, iov, nr_segs, len, 0);\n\tdo {\n\t\tsize_t save_len;\n\n\t\tnr_pages = get_numpages(cifs_sb->wsize, len, &cur_len);\n\t\twdata = cifs_writedata_alloc(nr_pages,\n\t\t\t\t\t     cifs_uncached_writev_complete);\n\t\tif (!wdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\trc = cifs_write_allocate_pages(wdata->pages, nr_pages);\n\t\tif (rc) {\n\t\t\tkfree(wdata);\n\t\t\tbreak;\n\t\t}\n\n\t\tsave_len = cur_len;\n\t\tfor (i = 0; i < nr_pages; i++) {\n\t\t\tbytes = min_t(const size_t, cur_len, PAGE_SIZE);\n\t\t\tcopied = iov_iter_copy_from_user(wdata->pages[i], &it,\n\t\t\t\t\t\t\t 0, bytes);\n\t\t\tcur_len -= copied;\n\t\t\tiov_iter_advance(&it, copied);\n\t\t\t/*\n\t\t\t * If we didn't copy as much as we expected, then that\n\t\t\t * may mean we trod into an unmapped area. Stop copying\n\t\t\t * at that point. On the next pass through the big\n\t\t\t * loop, we'll likely end up getting a zero-length\n\t\t\t * write and bailing out of it.\n\t\t\t */\n\t\t\tif (copied < bytes)\n\t\t\t\tbreak;\n\t\t}\n\t\tcur_len = save_len - cur_len;\n\n\t\t/*\n\t\t * If we have no data to send, then that probably means that\n\t\t * the copy above failed altogether. That's most likely because\n\t\t * the address in the iovec was bogus. Set the rc to -EFAULT,\n\t\t * free anything we allocated and bail out.\n\t\t */\n\t\tif (!cur_len) {\n\t\t\tfor (i = 0; i < nr_pages; i++)\n\t\t\t\tput_page(wdata->pages[i]);\n\t\t\tkfree(wdata);\n\t\t\trc = -EFAULT;\n\t\t\tbreak;\n\t\t}\n\n\t\t/*\n\t\t * i + 1 now represents the number of pages we actually used in\n\t\t * the copy phase above. Bring nr_pages down to that, and free\n\t\t * any pages that we didn't use.\n\t\t */\n\t\tfor ( ; nr_pages > i + 1; nr_pages--)\n\t\t\tput_page(wdata->pages[nr_pages - 1]);\n\n\t\twdata->sync_mode = WB_SYNC_ALL;\n\t\twdata->nr_pages = nr_pages;\n\t\twdata->offset = (__u64)offset;\n\t\twdata->cfile = cifsFileInfo_get(open_file);\n\t\twdata->pid = pid;\n\t\twdata->bytes = cur_len;\n\t\twdata->pagesz = PAGE_SIZE;\n\t\twdata->tailsz = cur_len - ((nr_pages - 1) * PAGE_SIZE);\n\t\trc = cifs_uncached_retry_writev(wdata);\n\t\tif (rc) {\n\t\t\tkref_put(&wdata->refcount,\n\t\t\t\t cifs_uncached_writedata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tlist_add_tail(&wdata->list, &wdata_list);\n\t\toffset += cur_len;\n\t\tlen -= cur_len;\n\t} while (len > 0);\n\n\t/*\n\t * If at least one write was successfully sent, then discard any rc\n\t * value from the later writes. If the other write succeeds, then\n\t * we'll end up returning whatever was written. If it fails, then\n\t * we'll get a new rc value from that.\n\t */\n\tif (!list_empty(&wdata_list))\n\t\trc = 0;\n\n\t/*\n\t * Wait for and collect replies for any successful sends in order of\n\t * increasing offset. Once an error is hit or we get a fatal signal\n\t * while waiting, then return without waiting for any more replies.\n\t */\nrestart_loop:\n\tlist_for_each_entry_safe(wdata, tmp, &wdata_list, list) {\n\t\tif (!rc) {\n\t\t\t/* FIXME: freezable too? */\n\t\t\trc = wait_for_completion_killable(&wdata->done);\n\t\t\tif (rc)\n\t\t\t\trc = -EINTR;\n\t\t\telse if (wdata->result)\n\t\t\t\trc = wdata->result;\n\t\t\telse\n\t\t\t\ttotal_written += wdata->bytes;\n\n\t\t\t/* resend call if it's a retryable error */\n\t\t\tif (rc == -EAGAIN) {\n\t\t\t\trc = cifs_uncached_retry_writev(wdata);\n\t\t\t\tgoto restart_loop;\n\t\t\t}\n\t\t}\n\t\tlist_del_init(&wdata->list);\n\t\tkref_put(&wdata->refcount, cifs_uncached_writedata_release);\n\t}\n\n\tif (total_written > 0)\n\t\t*poffset += total_written;\n\n\tcifs_stats_bytes_written(tcon, total_written);\n\treturn total_written ? total_written : (ssize_t)rc;\n}\n\nssize_t cifs_user_writev(struct kiocb *iocb, const struct iovec *iov,\n\t\t\t\tunsigned long nr_segs, loff_t pos)\n{\n\tssize_t written;\n\tstruct inode *inode;\n\n\tinode = file_inode(iocb->ki_filp);\n\n\t/*\n\t * BB - optimize the way when signing is disabled. We can drop this\n\t * extra memory-to-memory copying and use iovec buffers for constructing\n\t * write request.\n\t */\n\n\twritten = cifs_iovec_write(iocb->ki_filp, iov, nr_segs, &pos);\n\tif (written > 0) {\n\t\tCIFS_I(inode)->invalid_mapping = true;\n\t\tiocb->ki_pos = pos;\n\t}\n\n\treturn written;\n}\n\nstatic ssize_t\ncifs_writev(struct kiocb *iocb, const struct iovec *iov,\n\t    unsigned long nr_segs, loff_t pos)\n{\n\tstruct file *file = iocb->ki_filp;\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)file->private_data;\n\tstruct inode *inode = file->f_mapping->host;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct TCP_Server_Info *server = tlink_tcon(cfile->tlink)->ses->server;\n\tssize_t rc = -EACCES;\n\n\tBUG_ON(iocb->ki_pos != pos);\n\n\t/*\n\t * We need to hold the sem to be sure nobody modifies lock list\n\t * with a brlock that prevents writing.\n\t */\n\tdown_read(&cinode->lock_sem);\n\tif (!cifs_find_lock_conflict(cfile, pos, iov_length(iov, nr_segs),\n\t\t\t\t     server->vals->exclusive_lock_type, NULL,\n\t\t\t\t     CIFS_WRITE_OP)) {\n\t\tmutex_lock(&inode->i_mutex);\n\t\trc = __generic_file_aio_write(iocb, iov, nr_segs,\n\t\t\t\t\t       &iocb->ki_pos);\n\t\tmutex_unlock(&inode->i_mutex);\n\t}\n\n\tif (rc > 0) {\n\t\tssize_t err;\n\n\t\terr = generic_write_sync(file, pos, rc);\n\t\tif (err < 0 && rc > 0)\n\t\t\trc = err;\n\t}\n\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nssize_t\ncifs_strict_writev(struct kiocb *iocb, const struct iovec *iov,\n\t\t   unsigned long nr_segs, loff_t pos)\n{\n\tstruct inode *inode = file_inode(iocb->ki_filp);\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)\n\t\t\t\t\t\tiocb->ki_filp->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tssize_t written;\n\n\tif (CIFS_CACHE_WRITE(cinode)) {\n\t\tif (cap_unix(tcon->ses) &&\n\t\t(CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability))\n\t\t    && ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\t\treturn generic_file_aio_write(iocb, iov, nr_segs, pos);\n\t\treturn cifs_writev(iocb, iov, nr_segs, pos);\n\t}\n\t/*\n\t * For non-oplocked files in strict cache mode we need to write the data\n\t * to the server exactly from the pos to pos+len-1 rather than flush all\n\t * affected pages because it may cause a error with mandatory locks on\n\t * these pages but not on the region from pos to ppos+len-1.\n\t */\n\twritten = cifs_user_writev(iocb, iov, nr_segs, pos);\n\tif (written > 0 && CIFS_CACHE_READ(cinode)) {\n\t\t/*\n\t\t * Windows 7 server can delay breaking level2 oplock if a write\n\t\t * request comes - break it on the client to prevent reading\n\t\t * an old data.\n\t\t */\n\t\tcifs_invalidate_mapping(inode);\n\t\tcifs_dbg(FYI, \"Set no oplock for inode=%p after a write operation\\n\",\n\t\t\t inode);\n\t\tcinode->oplock = 0;\n\t}\n\treturn written;\n}\n\nstatic struct cifs_readdata *\ncifs_readdata_alloc(unsigned int nr_pages, work_func_t complete)\n{\n\tstruct cifs_readdata *rdata;\n\n\trdata = kzalloc(sizeof(*rdata) + (sizeof(struct page *) * nr_pages),\n\t\t\tGFP_KERNEL);\n\tif (rdata != NULL) {\n\t\tkref_init(&rdata->refcount);\n\t\tINIT_LIST_HEAD(&rdata->list);\n\t\tinit_completion(&rdata->done);\n\t\tINIT_WORK(&rdata->work, complete);\n\t}\n\n\treturn rdata;\n}\n\nvoid\ncifs_readdata_release(struct kref *refcount)\n{\n\tstruct cifs_readdata *rdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_readdata, refcount);\n\n\tif (rdata->cfile)\n\t\tcifsFileInfo_put(rdata->cfile);\n\n\tkfree(rdata);\n}\n\nstatic int\ncifs_read_allocate_pages(struct cifs_readdata *rdata, unsigned int nr_pages)\n{\n\tint rc = 0;\n\tstruct page *page;\n\tunsigned int i;\n\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tpage = alloc_page(GFP_KERNEL|__GFP_HIGHMEM);\n\t\tif (!page) {\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\t\trdata->pages[i] = page;\n\t}\n\n\tif (rc) {\n\t\tfor (i = 0; i < nr_pages; i++) {\n\t\t\tput_page(rdata->pages[i]);\n\t\t\trdata->pages[i] = NULL;\n\t\t}\n\t}\n\treturn rc;\n}\n\nstatic void\ncifs_uncached_readdata_release(struct kref *refcount)\n{\n\tstruct cifs_readdata *rdata = container_of(refcount,\n\t\t\t\t\tstruct cifs_readdata, refcount);\n\tunsigned int i;\n\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tput_page(rdata->pages[i]);\n\t\trdata->pages[i] = NULL;\n\t}\n\tcifs_readdata_release(refcount);\n}\n\nstatic int\ncifs_retry_async_readv(struct cifs_readdata *rdata)\n{\n\tint rc;\n\tstruct TCP_Server_Info *server;\n\n\tserver = tlink_tcon(rdata->cfile->tlink)->ses->server;\n\n\tdo {\n\t\tif (rdata->cfile->invalidHandle) {\n\t\t\trc = cifs_reopen_file(rdata->cfile, true);\n\t\t\tif (rc != 0)\n\t\t\t\tcontinue;\n\t\t}\n\t\trc = server->ops->async_readv(rdata);\n\t} while (rc == -EAGAIN);\n\n\treturn rc;\n}\n\n/**\n * cifs_readdata_to_iov - copy data from pages in response to an iovec\n * @rdata:\tthe readdata response with list of pages holding data\n * @iov:\tvector in which we should copy the data\n * @nr_segs:\tnumber of segments in vector\n * @offset:\toffset into file of the first iovec\n * @copied:\tused to return the amount of data copied to the iov\n *\n * This function copies data from a list of pages in a readdata response into\n * an array of iovecs. It will first calculate where the data should go\n * based on the info in the readdata and then copy the data into that spot.\n */\nstatic ssize_t\ncifs_readdata_to_iov(struct cifs_readdata *rdata, const struct iovec *iov,\n\t\t\tunsigned long nr_segs, loff_t offset, ssize_t *copied)\n{\n\tint rc = 0;\n\tstruct iov_iter ii;\n\tsize_t pos = rdata->offset - offset;\n\tssize_t remaining = rdata->bytes;\n\tunsigned char *pdata;\n\tunsigned int i;\n\n\t/* set up iov_iter and advance to the correct offset */\n\tiov_iter_init(&ii, iov, nr_segs, iov_length(iov, nr_segs), 0);\n\tiov_iter_advance(&ii, pos);\n\n\t*copied = 0;\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tssize_t copy;\n\t\tstruct page *page = rdata->pages[i];\n\n\t\t/* copy a whole page or whatever's left */\n\t\tcopy = min_t(ssize_t, remaining, PAGE_SIZE);\n\n\t\t/* ...but limit it to whatever space is left in the iov */\n\t\tcopy = min_t(ssize_t, copy, iov_iter_count(&ii));\n\n\t\t/* go while there's data to be copied and no errors */\n\t\tif (copy && !rc) {\n\t\t\tpdata = kmap(page);\n\t\t\trc = memcpy_toiovecend(ii.iov, pdata, ii.iov_offset,\n\t\t\t\t\t\t(int)copy);\n\t\t\tkunmap(page);\n\t\t\tif (!rc) {\n\t\t\t\t*copied += copy;\n\t\t\t\tremaining -= copy;\n\t\t\t\tiov_iter_advance(&ii, copy);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn rc;\n}\n\nstatic void\ncifs_uncached_readv_complete(struct work_struct *work)\n{\n\tstruct cifs_readdata *rdata = container_of(work,\n\t\t\t\t\t\tstruct cifs_readdata, work);\n\n\tcomplete(&rdata->done);\n\tkref_put(&rdata->refcount, cifs_uncached_readdata_release);\n}\n\nstatic int\ncifs_uncached_read_into_pages(struct TCP_Server_Info *server,\n\t\t\tstruct cifs_readdata *rdata, unsigned int len)\n{\n\tint total_read = 0, result = 0;\n\tunsigned int i;\n\tunsigned int nr_pages = rdata->nr_pages;\n\tstruct kvec iov;\n\n\trdata->tailsz = PAGE_SIZE;\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tif (len >= PAGE_SIZE) {\n\t\t\t/* enough data to fill the page */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = PAGE_SIZE;\n\t\t\tcifs_dbg(FYI, \"%u: iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, iov.iov_base, iov.iov_len);\n\t\t\tlen -= PAGE_SIZE;\n\t\t} else if (len > 0) {\n\t\t\t/* enough for partial page, fill and zero the rest */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = len;\n\t\t\tcifs_dbg(FYI, \"%u: iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, iov.iov_base, iov.iov_len);\n\t\t\tmemset(iov.iov_base + len, '\\0', PAGE_SIZE - len);\n\t\t\trdata->tailsz = len;\n\t\t\tlen = 0;\n\t\t} else {\n\t\t\t/* no need to hold page hostage */\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tput_page(page);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = cifs_readv_from_socket(server, &iov, 1, iov.iov_len);\n\t\tkunmap(page);\n\t\tif (result < 0)\n\t\t\tbreak;\n\n\t\ttotal_read += result;\n\t}\n\n\treturn total_read > 0 ? total_read : result;\n}\n\nstatic ssize_t\ncifs_iovec_read(struct file *file, const struct iovec *iov,\n\t\t unsigned long nr_segs, loff_t *poffset)\n{\n\tssize_t rc;\n\tsize_t len, cur_len;\n\tssize_t total_read = 0;\n\tloff_t offset = *poffset;\n\tunsigned int npages;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_readdata *rdata, *tmp;\n\tstruct list_head rdata_list;\n\tpid_t pid;\n\n\tif (!nr_segs)\n\t\treturn 0;\n\n\tlen = iov_length(iov, nr_segs);\n\tif (!len)\n\t\treturn 0;\n\n\tINIT_LIST_HEAD(&rdata_list);\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\n\tif (!tcon->ses->server->ops->async_readv)\n\t\treturn -ENOSYS;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tif ((file->f_flags & O_ACCMODE) == O_WRONLY)\n\t\tcifs_dbg(FYI, \"attempting read on write only file instance\\n\");\n\n\tdo {\n\t\tcur_len = min_t(const size_t, len - total_read, cifs_sb->rsize);\n\t\tnpages = DIV_ROUND_UP(cur_len, PAGE_SIZE);\n\n\t\t/* allocate a readdata struct */\n\t\trdata = cifs_readdata_alloc(npages,\n\t\t\t\t\t    cifs_uncached_readv_complete);\n\t\tif (!rdata) {\n\t\t\trc = -ENOMEM;\n\t\t\tgoto error;\n\t\t}\n\n\t\trc = cifs_read_allocate_pages(rdata, npages);\n\t\tif (rc)\n\t\t\tgoto error;\n\n\t\trdata->cfile = cifsFileInfo_get(open_file);\n\t\trdata->nr_pages = npages;\n\t\trdata->offset = offset;\n\t\trdata->bytes = cur_len;\n\t\trdata->pid = pid;\n\t\trdata->pagesz = PAGE_SIZE;\n\t\trdata->read_into_pages = cifs_uncached_read_into_pages;\n\n\t\trc = cifs_retry_async_readv(rdata);\nerror:\n\t\tif (rc) {\n\t\t\tkref_put(&rdata->refcount,\n\t\t\t\t cifs_uncached_readdata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tlist_add_tail(&rdata->list, &rdata_list);\n\t\toffset += cur_len;\n\t\tlen -= cur_len;\n\t} while (len > 0);\n\n\t/* if at least one read request send succeeded, then reset rc */\n\tif (!list_empty(&rdata_list))\n\t\trc = 0;\n\n\t/* the loop below should proceed in the order of increasing offsets */\nrestart_loop:\n\tlist_for_each_entry_safe(rdata, tmp, &rdata_list, list) {\n\t\tif (!rc) {\n\t\t\tssize_t copied;\n\n\t\t\t/* FIXME: freezable sleep too? */\n\t\t\trc = wait_for_completion_killable(&rdata->done);\n\t\t\tif (rc)\n\t\t\t\trc = -EINTR;\n\t\t\telse if (rdata->result)\n\t\t\t\trc = rdata->result;\n\t\t\telse {\n\t\t\t\trc = cifs_readdata_to_iov(rdata, iov,\n\t\t\t\t\t\t\tnr_segs, *poffset,\n\t\t\t\t\t\t\t&copied);\n\t\t\t\ttotal_read += copied;\n\t\t\t}\n\n\t\t\t/* resend call if it's a retryable error */\n\t\t\tif (rc == -EAGAIN) {\n\t\t\t\trc = cifs_retry_async_readv(rdata);\n\t\t\t\tgoto restart_loop;\n\t\t\t}\n\t\t}\n\t\tlist_del_init(&rdata->list);\n\t\tkref_put(&rdata->refcount, cifs_uncached_readdata_release);\n\t}\n\n\tcifs_stats_bytes_read(tcon, total_read);\n\t*poffset += total_read;\n\n\t/* mask nodata case */\n\tif (rc == -ENODATA)\n\t\trc = 0;\n\n\treturn total_read ? total_read : rc;\n}\n\nssize_t cifs_user_readv(struct kiocb *iocb, const struct iovec *iov,\n\t\t\t       unsigned long nr_segs, loff_t pos)\n{\n\tssize_t read;\n\n\tread = cifs_iovec_read(iocb->ki_filp, iov, nr_segs, &pos);\n\tif (read > 0)\n\t\tiocb->ki_pos = pos;\n\n\treturn read;\n}\n\nssize_t\ncifs_strict_readv(struct kiocb *iocb, const struct iovec *iov,\n\t\t  unsigned long nr_segs, loff_t pos)\n{\n\tstruct inode *inode = file_inode(iocb->ki_filp);\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);\n\tstruct cifsFileInfo *cfile = (struct cifsFileInfo *)\n\t\t\t\t\t\tiocb->ki_filp->private_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = -EACCES;\n\n\t/*\n\t * In strict cache mode we need to read from the server all the time\n\t * if we don't have level II oplock because the server can delay mtime\n\t * change - so we can't make a decision about inode invalidating.\n\t * And we can also fail with pagereading if there are mandatory locks\n\t * on pages affected by this read but not on the region from pos to\n\t * pos+len-1.\n\t */\n\tif (!CIFS_CACHE_READ(cinode))\n\t\treturn cifs_user_readv(iocb, iov, nr_segs, pos);\n\n\tif (cap_unix(tcon->ses) &&\n\t    (CIFS_UNIX_FCNTL_CAP & le64_to_cpu(tcon->fsUnixInfo.Capability)) &&\n\t    ((cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NOPOSIXBRL) == 0))\n\t\treturn generic_file_aio_read(iocb, iov, nr_segs, pos);\n\n\t/*\n\t * We need to hold the sem to be sure nobody modifies lock list\n\t * with a brlock that prevents reading.\n\t */\n\tdown_read(&cinode->lock_sem);\n\tif (!cifs_find_lock_conflict(cfile, pos, iov_length(iov, nr_segs),\n\t\t\t\t     tcon->ses->server->vals->shared_lock_type,\n\t\t\t\t     NULL, CIFS_READ_OP))\n\t\trc = generic_file_aio_read(iocb, iov, nr_segs, pos);\n\tup_read(&cinode->lock_sem);\n\treturn rc;\n}\n\nstatic ssize_t\ncifs_read(struct file *file, char *read_data, size_t read_size, loff_t *offset)\n{\n\tint rc = -EACCES;\n\tunsigned int bytes_read = 0;\n\tunsigned int total_read;\n\tunsigned int current_read_size;\n\tunsigned int rsize;\n\tstruct cifs_sb_info *cifs_sb;\n\tstruct cifs_tcon *tcon;\n\tstruct TCP_Server_Info *server;\n\tunsigned int xid;\n\tchar *cur_offset;\n\tstruct cifsFileInfo *open_file;\n\tstruct cifs_io_parms io_parms;\n\tint buf_type = CIFS_NO_BUFFER;\n\t__u32 pid;\n\n\txid = get_xid();\n\tcifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\n\t/* FIXME: set up handlers for larger reads and/or convert to async */\n\trsize = min_t(unsigned int, cifs_sb->rsize, CIFSMaxBufSize);\n\n\tif (file->private_data == NULL) {\n\t\trc = -EBADF;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\topen_file = file->private_data;\n\ttcon = tlink_tcon(open_file->tlink);\n\tserver = tcon->ses->server;\n\n\tif (!server->ops->sync_read) {\n\t\tfree_xid(xid);\n\t\treturn -ENOSYS;\n\t}\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\tif ((file->f_flags & O_ACCMODE) == O_WRONLY)\n\t\tcifs_dbg(FYI, \"attempting read on write only file instance\\n\");\n\n\tfor (total_read = 0, cur_offset = read_data; read_size > total_read;\n\t     total_read += bytes_read, cur_offset += bytes_read) {\n\t\tcurrent_read_size = min_t(uint, read_size - total_read, rsize);\n\t\t/*\n\t\t * For windows me and 9x we do not want to request more than it\n\t\t * negotiated since it will refuse the read then.\n\t\t */\n\t\tif ((tcon->ses) && !(tcon->ses->capabilities &\n\t\t\t\ttcon->ses->server->vals->cap_large_files)) {\n\t\t\tcurrent_read_size = min_t(uint, current_read_size,\n\t\t\t\t\tCIFSMaxBufSize);\n\t\t}\n\t\trc = -EAGAIN;\n\t\twhile (rc == -EAGAIN) {\n\t\t\tif (open_file->invalidHandle) {\n\t\t\t\trc = cifs_reopen_file(open_file, true);\n\t\t\t\tif (rc != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tio_parms.pid = pid;\n\t\t\tio_parms.tcon = tcon;\n\t\t\tio_parms.offset = *offset;\n\t\t\tio_parms.length = current_read_size;\n\t\t\trc = server->ops->sync_read(xid, open_file, &io_parms,\n\t\t\t\t\t\t    &bytes_read, &cur_offset,\n\t\t\t\t\t\t    &buf_type);\n\t\t}\n\t\tif (rc || (bytes_read == 0)) {\n\t\t\tif (total_read) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tfree_xid(xid);\n\t\t\t\treturn rc;\n\t\t\t}\n\t\t} else {\n\t\t\tcifs_stats_bytes_read(tcon, total_read);\n\t\t\t*offset += bytes_read;\n\t\t}\n\t}\n\tfree_xid(xid);\n\treturn total_read;\n}\n\n/*\n * If the page is mmap'ed into a process' page tables, then we need to make\n * sure that it doesn't change while being written back.\n */\nstatic int\ncifs_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf)\n{\n\tstruct page *page = vmf->page;\n\n\tlock_page(page);\n\treturn VM_FAULT_LOCKED;\n}\n\nstatic struct vm_operations_struct cifs_file_vm_ops = {\n\t.fault = filemap_fault,\n\t.page_mkwrite = cifs_page_mkwrite,\n\t.remap_pages = generic_file_remap_pages,\n};\n\nint cifs_file_strict_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tint rc, xid;\n\tstruct inode *inode = file_inode(file);\n\n\txid = get_xid();\n\n\tif (!CIFS_CACHE_READ(CIFS_I(inode))) {\n\t\trc = cifs_invalidate_mapping(inode);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\trc = generic_file_mmap(file, vma);\n\tif (rc == 0)\n\t\tvma->vm_ops = &cifs_file_vm_ops;\n\tfree_xid(xid);\n\treturn rc;\n}\n\nint cifs_file_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tint rc, xid;\n\n\txid = get_xid();\n\trc = cifs_revalidate_file(file);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"Validation prior to mmap failed, error=%d\\n\",\n\t\t\t rc);\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\trc = generic_file_mmap(file, vma);\n\tif (rc == 0)\n\t\tvma->vm_ops = &cifs_file_vm_ops;\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic void\ncifs_readv_complete(struct work_struct *work)\n{\n\tunsigned int i;\n\tstruct cifs_readdata *rdata = container_of(work,\n\t\t\t\t\t\tstruct cifs_readdata, work);\n\n\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tlru_cache_add_file(page);\n\n\t\tif (rdata->result == 0) {\n\t\t\tflush_dcache_page(page);\n\t\t\tSetPageUptodate(page);\n\t\t}\n\n\t\tunlock_page(page);\n\n\t\tif (rdata->result == 0)\n\t\t\tcifs_readpage_to_fscache(rdata->mapping->host, page);\n\n\t\tpage_cache_release(page);\n\t\trdata->pages[i] = NULL;\n\t}\n\tkref_put(&rdata->refcount, cifs_readdata_release);\n}\n\nstatic int\ncifs_readpages_read_into_pages(struct TCP_Server_Info *server,\n\t\t\tstruct cifs_readdata *rdata, unsigned int len)\n{\n\tint total_read = 0, result = 0;\n\tunsigned int i;\n\tu64 eof;\n\tpgoff_t eof_index;\n\tunsigned int nr_pages = rdata->nr_pages;\n\tstruct kvec iov;\n\n\t/* determine the eof that the server (probably) has */\n\teof = CIFS_I(rdata->mapping->host)->server_eof;\n\teof_index = eof ? (eof - 1) >> PAGE_CACHE_SHIFT : 0;\n\tcifs_dbg(FYI, \"eof=%llu eof_index=%lu\\n\", eof, eof_index);\n\n\trdata->tailsz = PAGE_CACHE_SIZE;\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tstruct page *page = rdata->pages[i];\n\n\t\tif (len >= PAGE_CACHE_SIZE) {\n\t\t\t/* enough data to fill the page */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = PAGE_CACHE_SIZE;\n\t\t\tcifs_dbg(FYI, \"%u: idx=%lu iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, page->index, iov.iov_base, iov.iov_len);\n\t\t\tlen -= PAGE_CACHE_SIZE;\n\t\t} else if (len > 0) {\n\t\t\t/* enough for partial page, fill and zero the rest */\n\t\t\tiov.iov_base = kmap(page);\n\t\t\tiov.iov_len = len;\n\t\t\tcifs_dbg(FYI, \"%u: idx=%lu iov_base=%p iov_len=%zu\\n\",\n\t\t\t\t i, page->index, iov.iov_base, iov.iov_len);\n\t\t\tmemset(iov.iov_base + len,\n\t\t\t\t'\\0', PAGE_CACHE_SIZE - len);\n\t\t\trdata->tailsz = len;\n\t\t\tlen = 0;\n\t\t} else if (page->index > eof_index) {\n\t\t\t/*\n\t\t\t * The VFS will not try to do readahead past the\n\t\t\t * i_size, but it's possible that we have outstanding\n\t\t\t * writes with gaps in the middle and the i_size hasn't\n\t\t\t * caught up yet. Populate those with zeroed out pages\n\t\t\t * to prevent the VFS from repeatedly attempting to\n\t\t\t * fill them until the writes are flushed.\n\t\t\t */\n\t\t\tzero_user(page, 0, PAGE_CACHE_SIZE);\n\t\t\tlru_cache_add_file(page);\n\t\t\tflush_dcache_page(page);\n\t\t\tSetPageUptodate(page);\n\t\t\tunlock_page(page);\n\t\t\tpage_cache_release(page);\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* no need to hold page hostage */\n\t\t\tlru_cache_add_file(page);\n\t\t\tunlock_page(page);\n\t\t\tpage_cache_release(page);\n\t\t\trdata->pages[i] = NULL;\n\t\t\trdata->nr_pages--;\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = cifs_readv_from_socket(server, &iov, 1, iov.iov_len);\n\t\tkunmap(page);\n\t\tif (result < 0)\n\t\t\tbreak;\n\n\t\ttotal_read += result;\n\t}\n\n\treturn total_read > 0 ? total_read : result;\n}\n\nstatic int cifs_readpages(struct file *file, struct address_space *mapping,\n\tstruct list_head *page_list, unsigned num_pages)\n{\n\tint rc;\n\tstruct list_head tmplist;\n\tstruct cifsFileInfo *open_file = file->private_data;\n\tstruct cifs_sb_info *cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);\n\tunsigned int rsize = cifs_sb->rsize;\n\tpid_t pid;\n\n\t/*\n\t * Give up immediately if rsize is too small to read an entire page.\n\t * The VFS will fall back to readpage. We should never reach this\n\t * point however since we set ra_pages to 0 when the rsize is smaller\n\t * than a cache page.\n\t */\n\tif (unlikely(rsize < PAGE_CACHE_SIZE))\n\t\treturn 0;\n\n\t/*\n\t * Reads as many pages as possible from fscache. Returns -ENOBUFS\n\t * immediately if the cookie is negative\n\t *\n\t * After this point, every page in the list might have PG_fscache set,\n\t * so we will need to clean that up off of every page we don't use.\n\t */\n\trc = cifs_readpages_from_fscache(mapping->host, mapping, page_list,\n\t\t\t\t\t &num_pages);\n\tif (rc == 0)\n\t\treturn rc;\n\n\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD)\n\t\tpid = open_file->pid;\n\telse\n\t\tpid = current->tgid;\n\n\trc = 0;\n\tINIT_LIST_HEAD(&tmplist);\n\n\tcifs_dbg(FYI, \"%s: file=%p mapping=%p num_pages=%u\\n\",\n\t\t __func__, file, mapping, num_pages);\n\n\t/*\n\t * Start with the page at end of list and move it to private\n\t * list. Do the same with any following pages until we hit\n\t * the rsize limit, hit an index discontinuity, or run out of\n\t * pages. Issue the async read and then start the loop again\n\t * until the list is empty.\n\t *\n\t * Note that list order is important. The page_list is in\n\t * the order of declining indexes. When we put the pages in\n\t * the rdata->pages, then we want them in increasing order.\n\t */\n\twhile (!list_empty(page_list)) {\n\t\tunsigned int i;\n\t\tunsigned int bytes = PAGE_CACHE_SIZE;\n\t\tunsigned int expected_index;\n\t\tunsigned int nr_pages = 1;\n\t\tloff_t offset;\n\t\tstruct page *page, *tpage;\n\t\tstruct cifs_readdata *rdata;\n\n\t\tpage = list_entry(page_list->prev, struct page, lru);\n\n\t\t/*\n\t\t * Lock the page and put it in the cache. Since no one else\n\t\t * should have access to this page, we're safe to simply set\n\t\t * PG_locked without checking it first.\n\t\t */\n\t\t__set_page_locked(page);\n\t\trc = add_to_page_cache_locked(page, mapping,\n\t\t\t\t\t      page->index, GFP_KERNEL);\n\n\t\t/* give up if we can't stick it in the cache */\n\t\tif (rc) {\n\t\t\t__clear_page_locked(page);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* move first page to the tmplist */\n\t\toffset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\t\tlist_move_tail(&page->lru, &tmplist);\n\n\t\t/* now try and add more pages onto the request */\n\t\texpected_index = page->index + 1;\n\t\tlist_for_each_entry_safe_reverse(page, tpage, page_list, lru) {\n\t\t\t/* discontinuity ? */\n\t\t\tif (page->index != expected_index)\n\t\t\t\tbreak;\n\n\t\t\t/* would this page push the read over the rsize? */\n\t\t\tif (bytes + PAGE_CACHE_SIZE > rsize)\n\t\t\t\tbreak;\n\n\t\t\t__set_page_locked(page);\n\t\t\tif (add_to_page_cache_locked(page, mapping,\n\t\t\t\t\t\tpage->index, GFP_KERNEL)) {\n\t\t\t\t__clear_page_locked(page);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist_move_tail(&page->lru, &tmplist);\n\t\t\tbytes += PAGE_CACHE_SIZE;\n\t\t\texpected_index++;\n\t\t\tnr_pages++;\n\t\t}\n\n\t\trdata = cifs_readdata_alloc(nr_pages, cifs_readv_complete);\n\t\tif (!rdata) {\n\t\t\t/* best to give up if we're out of mem */\n\t\t\tlist_for_each_entry_safe(page, tpage, &tmplist, lru) {\n\t\t\t\tlist_del(&page->lru);\n\t\t\t\tlru_cache_add_file(page);\n\t\t\t\tunlock_page(page);\n\t\t\t\tpage_cache_release(page);\n\t\t\t}\n\t\t\trc = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\trdata->cfile = cifsFileInfo_get(open_file);\n\t\trdata->mapping = mapping;\n\t\trdata->offset = offset;\n\t\trdata->bytes = bytes;\n\t\trdata->pid = pid;\n\t\trdata->pagesz = PAGE_CACHE_SIZE;\n\t\trdata->read_into_pages = cifs_readpages_read_into_pages;\n\n\t\tlist_for_each_entry_safe(page, tpage, &tmplist, lru) {\n\t\t\tlist_del(&page->lru);\n\t\t\trdata->pages[rdata->nr_pages++] = page;\n\t\t}\n\n\t\trc = cifs_retry_async_readv(rdata);\n\t\tif (rc != 0) {\n\t\t\tfor (i = 0; i < rdata->nr_pages; i++) {\n\t\t\t\tpage = rdata->pages[i];\n\t\t\t\tlru_cache_add_file(page);\n\t\t\t\tunlock_page(page);\n\t\t\t\tpage_cache_release(page);\n\t\t\t}\n\t\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t\t\tbreak;\n\t\t}\n\n\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t}\n\n\t/* Any pages that have been shown to fscache but didn't get added to\n\t * the pagecache must be uncached before they get returned to the\n\t * allocator.\n\t */\n\tcifs_fscache_readpages_cancel(mapping->host, page_list);\n\treturn rc;\n}\n\n/*\n * cifs_readpage_worker must be called with the page pinned\n */\nstatic int cifs_readpage_worker(struct file *file, struct page *page,\n\tloff_t *poffset)\n{\n\tchar *read_data;\n\tint rc;\n\n\t/* Is the page cached? */\n\trc = cifs_readpage_from_fscache(file_inode(file), page);\n\tif (rc == 0)\n\t\tgoto read_complete;\n\n\tread_data = kmap(page);\n\t/* for reads over a certain size could initiate async read ahead */\n\n\trc = cifs_read(file, read_data, PAGE_CACHE_SIZE, poffset);\n\n\tif (rc < 0)\n\t\tgoto io_error;\n\telse\n\t\tcifs_dbg(FYI, \"Bytes read %d\\n\", rc);\n\n\tfile_inode(file)->i_atime =\n\t\tcurrent_fs_time(file_inode(file)->i_sb);\n\n\tif (PAGE_CACHE_SIZE > rc)\n\t\tmemset(read_data + rc, 0, PAGE_CACHE_SIZE - rc);\n\n\tflush_dcache_page(page);\n\tSetPageUptodate(page);\n\n\t/* send this page to the cache */\n\tcifs_readpage_to_fscache(file_inode(file), page);\n\n\trc = 0;\n\nio_error:\n\tkunmap(page);\n\tunlock_page(page);\n\nread_complete:\n\treturn rc;\n}\n\nstatic int cifs_readpage(struct file *file, struct page *page)\n{\n\tloff_t offset = (loff_t)page->index << PAGE_CACHE_SHIFT;\n\tint rc = -EACCES;\n\tunsigned int xid;\n\n\txid = get_xid();\n\n\tif (file->private_data == NULL) {\n\t\trc = -EBADF;\n\t\tfree_xid(xid);\n\t\treturn rc;\n\t}\n\n\tcifs_dbg(FYI, \"readpage %p at offset %d 0x%x\\n\",\n\t\t page, (int)offset, (int)offset);\n\n\trc = cifs_readpage_worker(file, page, &offset);\n\n\tfree_xid(xid);\n\treturn rc;\n}\n\nstatic int is_inode_writable(struct cifsInodeInfo *cifs_inode)\n{\n\tstruct cifsFileInfo *open_file;\n\n\tspin_lock(&cifs_file_list_lock);\n\tlist_for_each_entry(open_file, &cifs_inode->openFileList, flist) {\n\t\tif (OPEN_FMODE(open_file->f_flags) & FMODE_WRITE) {\n\t\t\tspin_unlock(&cifs_file_list_lock);\n\t\t\treturn 1;\n\t\t}\n\t}\n\tspin_unlock(&cifs_file_list_lock);\n\treturn 0;\n}\n\n/* We do not want to update the file size from server for inodes\n   open for write - to avoid races with writepage extending\n   the file - in the future we could consider allowing\n   refreshing the inode only on increases in the file size\n   but this is tricky to do without racing with writebehind\n   page caching in the current Linux kernel design */\nbool is_size_safe_to_change(struct cifsInodeInfo *cifsInode, __u64 end_of_file)\n{\n\tif (!cifsInode)\n\t\treturn true;\n\n\tif (is_inode_writable(cifsInode)) {\n\t\t/* This inode is open for write at least once */\n\t\tstruct cifs_sb_info *cifs_sb;\n\n\t\tcifs_sb = CIFS_SB(cifsInode->vfs_inode.i_sb);\n\t\tif (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_DIRECT_IO) {\n\t\t\t/* since no page cache to corrupt on directio\n\t\t\twe can change size safely */\n\t\t\treturn true;\n\t\t}\n\n\t\tif (i_size_read(&cifsInode->vfs_inode) < end_of_file)\n\t\t\treturn true;\n\n\t\treturn false;\n\t} else\n\t\treturn true;\n}\n\nstatic int cifs_write_begin(struct file *file, struct address_space *mapping,\n\t\t\tloff_t pos, unsigned len, unsigned flags,\n\t\t\tstruct page **pagep, void **fsdata)\n{\n\tint oncethru = 0;\n\tpgoff_t index = pos >> PAGE_CACHE_SHIFT;\n\tloff_t offset = pos & (PAGE_CACHE_SIZE - 1);\n\tloff_t page_start = pos & PAGE_MASK;\n\tloff_t i_size;\n\tstruct page *page;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"write_begin from %lld len %d\\n\", (long long)pos, len);\n\nstart:\n\tpage = grab_cache_page_write_begin(mapping, index, flags);\n\tif (!page) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tif (PageUptodate(page))\n\t\tgoto out;\n\n\t/*\n\t * If we write a full page it will be up to date, no need to read from\n\t * the server. If the write is short, we'll end up doing a sync write\n\t * instead.\n\t */\n\tif (len == PAGE_CACHE_SIZE)\n\t\tgoto out;\n\n\t/*\n\t * optimize away the read when we have an oplock, and we're not\n\t * expecting to use any of the data we'd be reading in. That\n\t * is, when the page lies beyond the EOF, or straddles the EOF\n\t * and the write will cover all of the existing data.\n\t */\n\tif (CIFS_CACHE_READ(CIFS_I(mapping->host))) {\n\t\ti_size = i_size_read(mapping->host);\n\t\tif (page_start >= i_size ||\n\t\t    (offset == 0 && (pos + len) >= i_size)) {\n\t\t\tzero_user_segments(page, 0, offset,\n\t\t\t\t\t   offset + len,\n\t\t\t\t\t   PAGE_CACHE_SIZE);\n\t\t\t/*\n\t\t\t * PageChecked means that the parts of the page\n\t\t\t * to which we're not writing are considered up\n\t\t\t * to date. Once the data is copied to the\n\t\t\t * page, it can be set uptodate.\n\t\t\t */\n\t\t\tSetPageChecked(page);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tif ((file->f_flags & O_ACCMODE) != O_WRONLY && !oncethru) {\n\t\t/*\n\t\t * might as well read a page, it is fast enough. If we get\n\t\t * an error, we don't need to return it. cifs_write_end will\n\t\t * do a sync write instead since PG_uptodate isn't set.\n\t\t */\n\t\tcifs_readpage_worker(file, page, &page_start);\n\t\tpage_cache_release(page);\n\t\toncethru = 1;\n\t\tgoto start;\n\t} else {\n\t\t/* we could try using another file handle if there is one -\n\t\t   but how would we lock it to prevent close of that handle\n\t\t   racing with this read? In any case\n\t\t   this will be written out by write_end so is fine */\n\t}\nout:\n\t*pagep = page;\n\treturn rc;\n}\n\nstatic int cifs_release_page(struct page *page, gfp_t gfp)\n{\n\tif (PagePrivate(page))\n\t\treturn 0;\n\n\treturn cifs_fscache_release_page(page, gfp);\n}\n\nstatic void cifs_invalidate_page(struct page *page, unsigned int offset,\n\t\t\t\t unsigned int length)\n{\n\tstruct cifsInodeInfo *cifsi = CIFS_I(page->mapping->host);\n\n\tif (offset == 0 && length == PAGE_CACHE_SIZE)\n\t\tcifs_fscache_invalidate_page(page, &cifsi->vfs_inode);\n}\n\nstatic int cifs_launder_page(struct page *page)\n{\n\tint rc = 0;\n\tloff_t range_start = page_offset(page);\n\tloff_t range_end = range_start + (loff_t)(PAGE_CACHE_SIZE - 1);\n\tstruct writeback_control wbc = {\n\t\t.sync_mode = WB_SYNC_ALL,\n\t\t.nr_to_write = 0,\n\t\t.range_start = range_start,\n\t\t.range_end = range_end,\n\t};\n\n\tcifs_dbg(FYI, \"Launder page: %p\\n\", page);\n\n\tif (clear_page_dirty_for_io(page))\n\t\trc = cifs_writepage_locked(page, &wbc);\n\n\tcifs_fscache_invalidate_page(page, page->mapping->host);\n\treturn rc;\n}\n\nvoid cifs_oplock_break(struct work_struct *work)\n{\n\tstruct cifsFileInfo *cfile = container_of(work, struct cifsFileInfo,\n\t\t\t\t\t\t  oplock_break);\n\tstruct inode *inode = cfile->dentry->d_inode;\n\tstruct cifsInodeInfo *cinode = CIFS_I(inode);\n\tstruct cifs_tcon *tcon = tlink_tcon(cfile->tlink);\n\tint rc = 0;\n\n\tif (!CIFS_CACHE_WRITE(cinode) && CIFS_CACHE_READ(cinode) &&\n\t\t\t\t\t\tcifs_has_mand_locks(cinode)) {\n\t\tcifs_dbg(FYI, \"Reset oplock to None for inode=%p due to mand locks\\n\",\n\t\t\t inode);\n\t\tcinode->oplock = 0;\n\t}\n\n\tif (inode && S_ISREG(inode->i_mode)) {\n\t\tif (CIFS_CACHE_READ(cinode))\n\t\t\tbreak_lease(inode, O_RDONLY);\n\t\telse\n\t\t\tbreak_lease(inode, O_WRONLY);\n\t\trc = filemap_fdatawrite(inode->i_mapping);\n\t\tif (!CIFS_CACHE_READ(cinode)) {\n\t\t\trc = filemap_fdatawait(inode->i_mapping);\n\t\t\tmapping_set_error(inode->i_mapping, rc);\n\t\t\tcifs_invalidate_mapping(inode);\n\t\t}\n\t\tcifs_dbg(FYI, \"Oplock flush inode %p rc %d\\n\", inode, rc);\n\t}\n\n\trc = cifs_push_locks(cfile);\n\tif (rc)\n\t\tcifs_dbg(VFS, \"Push locks rc = %d\\n\", rc);\n\n\t/*\n\t * releasing stale oplock after recent reconnect of smb session using\n\t * a now incorrect file handle is not a data integrity issue but do\n\t * not bother sending an oplock release if session to server still is\n\t * disconnected since oplock already released by the server\n\t */\n\tif (!cfile->oplock_break_cancelled) {\n\t\trc = tcon->ses->server->ops->oplock_response(tcon, &cfile->fid,\n\t\t\t\t\t\t\t     cinode);\n\t\tcifs_dbg(FYI, \"Oplock release rc = %d\\n\", rc);\n\t}\n}\n\n/*\n * The presence of cifs_direct_io() in the address space ops vector\n * allowes open() O_DIRECT flags which would have failed otherwise.\n *\n * In the non-cached mode (mount with cache=none), we shunt off direct read and write requests\n * so this method should never be called.\n *\n * Direct IO is not yet supported in the cached mode. \n */\nstatic ssize_t\ncifs_direct_io(int rw, struct kiocb *iocb, const struct iovec *iov,\n               loff_t pos, unsigned long nr_segs)\n{\n        /*\n         * FIXME\n         * Eventually need to support direct IO for non forcedirectio mounts\n         */\n        return -EINVAL;\n}\n\n\nconst struct address_space_operations cifs_addr_ops = {\n\t.readpage = cifs_readpage,\n\t.readpages = cifs_readpages,\n\t.writepage = cifs_writepage,\n\t.writepages = cifs_writepages,\n\t.write_begin = cifs_write_begin,\n\t.write_end = cifs_write_end,\n\t.set_page_dirty = __set_page_dirty_nobuffers,\n\t.releasepage = cifs_release_page,\n\t.direct_IO = cifs_direct_io,\n\t.invalidatepage = cifs_invalidate_page,\n\t.launder_page = cifs_launder_page,\n};\n\n/*\n * cifs_readpages requires the server to support a buffer large enough to\n * contain the header plus one complete page of data.  Otherwise, we need\n * to leave cifs_readpages out of the address space operations.\n */\nconst struct address_space_operations cifs_addr_ops_smallbuf = {\n\t.readpage = cifs_readpage,\n\t.writepage = cifs_writepage,\n\t.writepages = cifs_writepages,\n\t.write_begin = cifs_write_begin,\n\t.write_end = cifs_write_end,\n\t.set_page_dirty = __set_page_dirty_nobuffers,\n\t.releasepage = cifs_release_page,\n\t.invalidatepage = cifs_invalidate_page,\n\t.launder_page = cifs_launder_page,\n};\n"], "filenames": ["fs/cifs/file.c"], "buggy_code_start_loc": [2392], "buggy_code_end_loc": [2453], "fixing_code_start_loc": [2392], "fixing_code_end_loc": [2485], "type": "CWE-119", "message": "The cifs_iovec_write function in fs/cifs/file.c in the Linux kernel through 3.13.5 does not properly handle uncached write operations that copy fewer than the requested number of bytes, which allows local users to obtain sensitive information from kernel memory, cause a denial of service (memory corruption and system crash), or possibly gain privileges via a writev system call with a crafted pointer.", "other": {"cve": {"id": "CVE-2014-0069", "sourceIdentifier": "secalert@redhat.com", "published": "2014-02-28T06:18:54.010", "lastModified": "2023-02-13T00:31:06.883", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The cifs_iovec_write function in fs/cifs/file.c in the Linux kernel through 3.13.5 does not properly handle uncached write operations that copy fewer than the requested number of bytes, which allows local users to obtain sensitive information from kernel memory, cause a denial of service (memory corruption and system crash), or possibly gain privileges via a writev system call with a crafted pointer."}, {"lang": "es", "value": "La funci\u00f3n cifs_iovec_write en fs/cifs/file.c en el kernel de Linux hasta 3.13.5 no maneja debidamente operaciones de escritura no en cach\u00e9 que copian menos bytes de los solicitados, lo que permite a usuarios locales obtener informaci\u00f3n sensible de la memoria del kernel, causar una denegaci\u00f3n de servicio (corrupci\u00f3n de memoria y ca\u00edda del sistema) o posiblemente ganar privilegios a trav\u00e9s de una llamada al sistema writev con un puntero manipulado."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.13.5", "matchCriteriaId": "DBA2348F-3FA5-450F-BA4A-CB9A016037FA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_desktop:11:sp3:*:*:*:*:*:*", "matchCriteriaId": "3ED68ADD-BBDA-4485-BC76-58F011D72311"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:-:*:*:*:*:*:*", "matchCriteriaId": "F13F07CC-739B-465C-9184-0E9D708BD4C7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:sp3:*:*:*:-:*:*", "matchCriteriaId": "E534C201-BCC5-473C-AAA7-AAB97CEB5437"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:sp3:*:*:*:vmware:*:*", "matchCriteriaId": "2470C6E8-2024-4CF5-9982-CFF50E88EAE9"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EE249E1B-A1FD-4E08-AA71-A0E1F10FFE97"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "569964DA-31BE-4520-A66D-C3B09D557AB8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "9BBCD86A-E6C7-4444-9D74-F861084090F0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "1F3BEFDB-5156-4E1C-80BB-8BE9FEAA7623"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "835AE071-CEAE-49E5-8F0C-E5F50FB85EFC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "E5ED5807-55B7-47C5-97A6-03233F4FBC3A"}]}]}], "references": [{"url": "http://article.gmane.org/gmane.linux.kernel.cifs/9401", "source": "secalert@redhat.com", "tags": ["Broken Link"]}, {"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=5d81de8e8667da7135d3a32a964087c0faf5483f", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2014-03/msg00026.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2014-0328.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2014/02/17/4", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/65588", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1064253", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/5d81de8e8667da7135d3a32a964087c0faf5483f", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/5d81de8e8667da7135d3a32a964087c0faf5483f"}}