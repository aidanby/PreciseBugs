{"buggy_code": ["'use strict';\nvar execSync = require('child_process').execSync;\nvar sizeOf = require('image-size');\nvar mkdirp = require('mkdirp-promise');\nvar rimraf = require('rimraf-then');\nvar fs = require('fs');\nvar path = require('path');\n\nfunction tileLevel(inPath, outPath, zoom, tileSize, pattern, quality) {\n    var dotExtension = pattern.replace(/.*(\\.[^.]+)$/, '$1');\n    var patternedFilename = pattern.replace(/\\{z\\}/, '' + zoom)\n        .replace(/\\{x\\}/, '%[fx:page.x/' + tileSize + ']')\n        .replace(/\\{y\\}/, '%[fx:page.y/' + tileSize + ']')\n        .replace(/\\.[^.]+$/, '');\n    var patternedFilenameWithoutTheFilename = '';\n    if (pattern.indexOf(path.sep) > 0) {\n        patternedFilenameWithoutTheFilename = pattern.replace(new RegExp(path.sep+'[^'+path.sep+']*$'), '')\n        .replace(/\\{z\\}/, '' + zoom);\n    }\n    return mkdirp(outPath + path.sep + patternedFilenameWithoutTheFilename)\n    .then(()=>{\n        var command = 'convert ' + inPath +\n            ' -crop ' + tileSize + 'x' + tileSize +\n            ' -set filename:tile \"' + patternedFilename + '\"' +\n            ' -quality ' + quality + ' +repage +adjoin' +\n            ' \"' + outPath + '/%[filename:tile]' + dotExtension + '\"' ;\n        execSync(command);\n    });\n}\n\nfunction imageBiggerThanTile(path, tileSize) {\n    var size = sizeOf(path);\n    return size.height > tileSize || size.width > tileSize;\n}\n\nfunction tileRec(inPath, outPath, zoom, tileSize, tempDir, pattern, zoomToDisplay, invertZoom, quality) {\n    var inPathMpc = tempDir + '/temp_level_' + zoom + '.mpc';\n    var inPathCache = tempDir + '/temp_level_' + zoom + '.cache';\n    execSync('convert ' + inPath + ' ' + inPathMpc);\n    return tileLevel(inPathMpc, outPath, zoomToDisplay, tileSize, pattern, quality)\n        .then(function () {\n            if (imageBiggerThanTile(inPath, tileSize)) {\n                var newZoom = zoom + 1;\n                var newZoomToDisplay = zoomToDisplay + 1;\n                if (!invertZoom) {\n                    newZoomToDisplay = zoomToDisplay - 1;\n                }\n                var newInPath = tempDir + '/temp_level_' + zoom + '.png';\n                execSync('convert ' + inPathMpc + ' -resize 50% -quality ' + quality + ' ' + newInPath);\n                fs.unlinkSync(inPathMpc);\n                fs.unlinkSync(inPathCache);\n                return tileRec(newInPath, outPath, newZoom, tileSize, tempDir, pattern, newZoomToDisplay, invertZoom, quality);\n            } else {\n                fs.unlinkSync(inPathMpc);\n                fs.unlinkSync(inPathCache);\n            }\n        });\n}\n\nmodule.exports.tile = function (inPath, outPath, pattern, options) {\n    options = options || {};\n    var tileSize = options.tileSize || 256;\n    var tmpDir = options.tmpDir || process.env.TMPDIR || '/tmp';\n    var tempDir = tmpDir + '/image-tiler_' + process.pid;\n    var zoom = 0;\n    var zoomToDisplay = 0;\n    var quality = options.quality || 100;\n    if (!options.invertZoom) {\n        var size = sizeOf(inPath);\n        var halvingsWidth = Math.ceil(Math.log2(Math.ceil(size.width / tileSize)));\n        var halvingsheight = Math.ceil(Math.log2(Math.ceil(size.height / tileSize)));\n        zoomToDisplay = Math.max(halvingsWidth, halvingsheight);\n    }\n    return mkdirp(tempDir)\n        .then(()=>tileRec(inPath, outPath, zoom, tileSize, tempDir, pattern, zoomToDisplay, options.invertZoom, quality))\n        .then(()=>rimraf(tempDir));\n};\n", "/*global jasmine*/\nvar fs = require('fs');\nvar execSync = require('child_process').execSync;\nvar rimraf = require('rimraf');\nvar expectImagesToBeTheSame = require('./expectImagesToBeTheSame.helper.js').expectImagesToBeTheSame;\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;\nvar tmpDir = process.env.TMPDIR || '/tmp';\nvar tempDir = tmpDir + '/imagetiler_spec_' + process.pid;\n\ndescribe('image-tiler cli', function () {\n    beforeEach(function () {\n        fs.mkdirSync(tempDir);\n    });\n    describe('When used on an image smaller than the tile size', function () {\n        it('should output the same image', function (done) {\n            execSync('node bin/image-tiler spec/small.png ' + tempDir + ' small_test_result_{z}_{x}_{y}.png');\n            expectImagesToBeTheSame(tempDir + '/small_test_result_0_0_0.png', 'spec/expected/small-test.png')\n            .then(done)\n            .catch(done.fail);\n        });\n    });\n\n    afterEach(function () {\n        rimraf.sync(tempDir);\n    });\n\n});\n\n\n"], "fixing_code": ["'use strict';\nvar execFileSync = require('child_process').execFileSync;\nvar sizeOf = require('image-size');\nvar mkdirp = require('mkdirp-promise');\nvar rimraf = require('rimraf-then');\nvar fs = require('fs');\nvar path = require('path');\n\nfunction tileLevel(inPath, outPath, zoom, tileSize, pattern, quality) {\n    var dotExtension = pattern.replace(/.*(\\.[^.]+)$/, '$1');\n    var patternedFilename = pattern.replace(/\\{z\\}/, '' + zoom)\n        .replace(/\\{x\\}/, '%[fx:page.x/' + tileSize + ']')\n        .replace(/\\{y\\}/, '%[fx:page.y/' + tileSize + ']')\n        .replace(/\\.[^.]+$/, '');\n    var patternedFilenameWithoutTheFilename = '';\n    if (pattern.indexOf(path.sep) > 0) {\n        patternedFilenameWithoutTheFilename = pattern.replace(new RegExp(path.sep + '[^' + path.sep + ']*$'), '')\n            .replace(/\\{z\\}/, '' + zoom);\n    }\n    return mkdirp(outPath + path.sep + patternedFilenameWithoutTheFilename)\n        .then(() => {\n            var args = [inPath,\n                '-crop', tileSize + 'x' + tileSize,\n                '-set', 'filename:tile', patternedFilename,\n                '-quality', quality, '+repage', '+adjoin',\n                outPath + '/%[filename:tile]' + dotExtension];\n            execFileSync('convert', args);\n        });\n}\n\nfunction imageBiggerThanTile(path, tileSize) {\n    var size = sizeOf(path);\n    return size.height > tileSize || size.width > tileSize;\n}\n\nfunction tileRec(inPath, outPath, zoom, tileSize, tempDir, pattern, zoomToDisplay, invertZoom, quality) {\n    var inPathMpc = tempDir + '/temp_level_' + zoom + '.mpc';\n    var inPathCache = tempDir + '/temp_level_' + zoom + '.cache';\n    execFileSync('convert', [inPath, inPathMpc]);\n    return tileLevel(inPathMpc, outPath, zoomToDisplay, tileSize, pattern, quality)\n        .then(function () {\n            if (imageBiggerThanTile(inPath, tileSize)) {\n                var newZoom = zoom + 1;\n                var newZoomToDisplay = zoomToDisplay + 1;\n                if (!invertZoom) {\n                    newZoomToDisplay = zoomToDisplay - 1;\n                }\n                var newInPath = tempDir + '/temp_level_' + zoom + '.png';\n                execFileSync('convert', [inPathMpc, '-resize', '50%', '-quality', quality, newInPath]);\n                fs.unlinkSync(inPathMpc);\n                fs.unlinkSync(inPathCache);\n                return tileRec(newInPath, outPath, newZoom, tileSize, tempDir, pattern, newZoomToDisplay, invertZoom, quality);\n            } else {\n                fs.unlinkSync(inPathMpc);\n                fs.unlinkSync(inPathCache);\n            }\n        });\n}\n\nmodule.exports.tile = function (inPath, outPath, pattern, options) {\n    options = options || {};\n    var tileSize = options.tileSize || 256;\n    var tmpDir = options.tmpDir || process.env.TMPDIR || '/tmp';\n    var tempDir = tmpDir + '/image-tiler_' + process.pid;\n    var zoom = 0;\n    var zoomToDisplay = 0;\n    var quality = options.quality || 100;\n    if (!options.invertZoom) {\n        var size = sizeOf(inPath);\n        var halvingsWidth = Math.ceil(Math.log2(Math.ceil(size.width / tileSize)));\n        var halvingsheight = Math.ceil(Math.log2(Math.ceil(size.height / tileSize)));\n        zoomToDisplay = Math.max(halvingsWidth, halvingsheight);\n    }\n    return mkdirp(tempDir)\n        .then(() => tileRec(inPath, outPath, zoom, tileSize, tempDir, pattern, zoomToDisplay, options.invertZoom, quality))\n        .then(() => rimraf(tempDir));\n};\n", "/*global jasmine*/\nvar fs = require('fs');\nvar execFileSync = require('child_process').execFileSync;\nvar rimraf = require('rimraf');\nvar expectImagesToBeTheSame = require('./expectImagesToBeTheSame.helper.js').expectImagesToBeTheSame;\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;\nvar tmpDir = process.env.TMPDIR || '/tmp';\nvar tempDir = tmpDir + '/imagetiler_spec_' + process.pid;\n\ndescribe('image-tiler cli', function () {\n    beforeEach(function () {\n        fs.mkdirSync(tempDir);\n    });\n    describe('When used on an image smaller than the tile size', function () {\n        it('should output the same image', function (done) {\n            execFileSync('node', ['bin/image-tiler', 'spec/small.png', tempDir, 'small_test_result_{z}_{x}_{y}.png']);\n            expectImagesToBeTheSame(tempDir + '/small_test_result_0_0_0.png', 'spec/expected/small-test.png')\n                .then(done)\n                .catch(done.fail);\n        });\n    });\n\n    afterEach(function () {\n        rimraf.sync(tempDir);\n    });\n\n});\n\n\n"], "filenames": ["index.js", "spec/image-tiler.spec.js"], "buggy_code_start_loc": [2, 3], "buggy_code_end_loc": [77, 21], "fixing_code_start_loc": [2, 3], "fixing_code_end_loc": [77, 21], "type": "CWE-77", "message": "This affects the package image-tiler before 2.0.2.", "other": {"cve": {"id": "CVE-2020-28451", "sourceIdentifier": "report@snyk.io", "published": "2022-08-02T14:15:09.827", "lastModified": "2022-08-06T02:43:59.923", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package image-tiler before 2.0.2."}, {"lang": "es", "value": "Esto afecta al paquete image-tiler versiones anteriores a 2.0.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:image-tiler_project:image-tiler:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2.0.2", "matchCriteriaId": "BD10DADA-7384-47E1-83E9-76EA19B77420"}]}]}], "references": [{"url": "https://github.com/MrP/image-tiler/commit/f4a0b13a4bf43655fc4013e04bbceaf77aecbeb8", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-IMAGETILER-1051029", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MrP/image-tiler/commit/f4a0b13a4bf43655fc4013e04bbceaf77aecbeb8"}}