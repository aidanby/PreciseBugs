{"buggy_code": ["// An internal HTML tag and emoji shorthand should not escape\nconst preventEscapeRegex =\n  /(<.*?>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b'\\u1100-\\u11ff\\u2e80-\\u2fd5\\u3005\\u3041-\\u3096\\u30a0-\\u30ff\\u3130-\\u318f\\u3400-\\u4db5\\u4e00-\\u9fcb\\ua960-\\ua97f\\uac00-\\ud7ff\\uff10-\\uff19\\uff41-\\uff5a\\uff61-\\uff9f]+:)/\n\nconst generateReplacerForEscape = (fallback: string) => (matched: string) =>\n  `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}</span>`\n\nexport const escapeReplacers = {\n  blockquote: (partial: string) =>\n    partial\n      .replace(/^((?:<.*?>)*)(.{4})/gm, (matched, leading, character) =>\n        character === '&gt;' ? `${leading}\\u00ad&gt;` : matched\n      )\n      .replace(\n        /^((?:<.*?>)*)(\uff1e)/gm,\n        (_, leading, character) =>\n          `${leading}${generateReplacerForEscape('\\u00ad\uff1e')(character)}`\n      ),\n  bold: (partial: string) =>\n    partial\n      .replace(/\\*+/g, generateReplacerForEscape('\\u2217'))\n      .replace(/\uff0a+/g, generateReplacerForEscape('\\ufe61')),\n  italic: (partial: string) =>\n    partial\n      .replace(/_+/g, generateReplacerForEscape('\\u02cd'))\n      .replace(/\uff3f+/g, generateReplacerForEscape('\\u2e0f')),\n  code: (partial: string) =>\n    partial\n      .replace(/`+/g, generateReplacerForEscape('\\u02cb'))\n      .replace(/\uff40+/g, generateReplacerForEscape('\\u02cb')),\n  strikethrough: (partial: string) =>\n    partial.replace(/~+/g, generateReplacerForEscape('\\u223c')),\n} as const\n\nconst escapeCharsDefaultReplacer = (partial: string) =>\n  Object.values(escapeReplacers).reduce((p, fn) => fn(p), partial)\n\nexport const escapeChars = (\n  mrkdwn: string,\n  replacer: (partial: string) => string = escapeCharsDefaultReplacer\n) =>\n  mrkdwn\n    .split(preventEscapeRegex)\n    .reduce(\n      (acc, str, i) => [...acc, i % 2 ? str : replacer(str)],\n      [] as string[]\n    )\n    .join('')\n\nexport const escapeEntity = (str: string) =>\n  str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\nconst replaceUnmatchedString = (\n  str: string,\n  capturedMatcher: RegExp,\n  replacer: (fragment: string) => string | ConcatArray<string>\n) =>\n  str\n    .split(capturedMatcher)\n    .reduce((acc, s, i) => acc.concat(i % 2 ? s : replacer(s)), [] as string[])\n    .join('')\n\nexport const escapeEverythingContents = (str: string) =>\n  replaceUnmatchedString(str, /(<[\\s\\S]*?>)/, (s) =>\n    replaceUnmatchedString(s, /(&\\w+;)/, (ss) =>\n      [...ss].map((x) => `&#${x.codePointAt(0)};`)\n    )\n  )\n\nexport const decodeEntity = (obj: any) => {\n  if (typeof obj === 'string')\n    return obj.replace(/&(amp|gt|lt|quot|#\\d+);/g, (_, entity) => {\n      if (entity.startsWith('#'))\n        return String.fromCodePoint(Number.parseInt(entity.slice(1), 10))\n\n      return { amp: '&', gt: '>', lt: '<', quot: '\"' }[entity]\n    })\n\n  return obj\n}\n"], "fixing_code": ["// An internal HTML tag and emoji shorthand should not escape\nconst preventEscapeRegex =\n  /(<[^>]*>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b'\\u1100-\\u11ff\\u2e80-\\u2fd5\\u3005\\u3041-\\u3096\\u30a0-\\u30ff\\u3130-\\u318f\\u3400-\\u4db5\\u4e00-\\u9fcb\\ua960-\\ua97f\\uac00-\\ud7ff\\uff10-\\uff19\\uff41-\\uff5a\\uff61-\\uff9f]+:)/\n\nconst generateReplacerForEscape = (fallback: string) => (matched: string) =>\n  `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}</span>`\n\nexport const escapeReplacers = {\n  blockquote: (partial: string) =>\n    partial\n      .replace(\n        /^((?:<(?:[^>]|>(?=<))*>)?)(&gt;)/gm,\n        (_, leadingTags, character) => `${leadingTags}\\u00ad${character}`\n      )\n      .replace(\n        /^((?:<(?:[^>]|>(?=<))*>)?)(\uff1e)/gm,\n        (_, leadingTags, character) =>\n          `${leadingTags}${generateReplacerForEscape('\\u00ad\uff1e')(character)}`\n      ),\n  bold: (partial: string) =>\n    partial\n      .replace(/\\*+/g, generateReplacerForEscape('\\u2217'))\n      .replace(/\uff0a+/g, generateReplacerForEscape('\\ufe61')),\n  italic: (partial: string) =>\n    partial\n      .replace(/_+/g, generateReplacerForEscape('\\u02cd'))\n      .replace(/\uff3f+/g, generateReplacerForEscape('\\u2e0f')),\n  code: (partial: string) =>\n    partial\n      .replace(/`+/g, generateReplacerForEscape('\\u02cb'))\n      .replace(/\uff40+/g, generateReplacerForEscape('\\u02cb')),\n  strikethrough: (partial: string) =>\n    partial.replace(/~+/g, generateReplacerForEscape('\\u223c')),\n} as const\n\nconst escapeCharsDefaultReplacer = (partial: string) =>\n  Object.values(escapeReplacers).reduce((p, fn) => fn(p), partial)\n\nexport const escapeChars = (\n  mrkdwn: string,\n  replacer: (partial: string) => string = escapeCharsDefaultReplacer\n) =>\n  mrkdwn\n    .split(preventEscapeRegex)\n    .reduce(\n      (acc, str, i) => [...acc, i % 2 ? str : replacer(str)],\n      [] as string[]\n    )\n    .join('')\n\nexport const escapeEntity = (str: string) =>\n  str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\nconst replaceUnmatchedString = (\n  str: string,\n  capturedMatcher: RegExp,\n  replacer: (fragment: string) => string | ConcatArray<string>\n) =>\n  str\n    .split(capturedMatcher)\n    .reduce((acc, s, i) => acc.concat(i % 2 ? s : replacer(s)), [] as string[])\n    .join('')\n\nexport const escapeEverythingContents = (str: string) =>\n  replaceUnmatchedString(str, /(<[\\s\\S]*?>)/, (s) =>\n    replaceUnmatchedString(s, /(&\\w+;)/, (ss) =>\n      [...ss].map((x) => `&#${x.codePointAt(0)};`)\n    )\n  )\n\nexport const decodeEntity = (obj: any) => {\n  if (typeof obj === 'string')\n    return obj.replace(/&(amp|gt|lt|quot|#\\d+);/g, (_, entity) => {\n      if (entity.startsWith('#'))\n        return String.fromCodePoint(Number.parseInt(entity.slice(1), 10))\n\n      return { amp: '&', gt: '>', lt: '<', quot: '\"' }[entity]\n    })\n\n  return obj\n}\n"], "filenames": ["src/mrkdwn/escape.ts"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [18], "fixing_code_start_loc": [3], "fixing_code_end_loc": [19], "type": "NVD-CWE-Other", "message": "jsx-slack is a package for building JSON objects for Slack block kit surfaces from JSX. The maintainers found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient tfor protection from a Regular Expression Denial of Service (ReDoS) attack. If an attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources. v4.5.1 passes the test against ASCII characters but misses the case of multibyte characters. jsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.", "other": {"cve": {"id": "CVE-2021-43843", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-20T22:15:07.817", "lastModified": "2022-08-09T13:27:45.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "jsx-slack is a package for building JSON objects for Slack block kit surfaces from JSX. The maintainers found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient tfor protection from a Regular Expression Denial of Service (ReDoS) attack. If an attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources. v4.5.1 passes the test against ASCII characters but misses the case of multibyte characters. jsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters."}, {"lang": "es", "value": "jsx-slack es un paquete para construir objetos JSON para las superficies del kit de bloques Slack desde JSX. Los mantenedores encontraron que el parche para CVE-2021-43838 en jsx-slack versi\u00f3n v4.5.1, es insuficiente para la protecci\u00f3n contra un ataque de denegaci\u00f3n de servicio por expresi\u00f3n regular (ReDoS). Si un atacante puede poner muchos elementos JSX en la etiqueta \"(blockquote)\" con inclusi\u00f3n de caracteres multibyte_, una expresi\u00f3n regular interna para el escape de caracteres puede consumir una cantidad excesiva de recursos inform\u00e1ticos. jsx-slack versi\u00f3n v4.5.1, pasa la prueba contra caracteres ASCII pero falla en el caso de los caracteres multibyte. jsx-slack versi\u00f3n v4.5.2, ha actualizado las expresiones regulares para el escape de caracteres blockquote con el fin de evitar el retroceso catastr\u00f3fico. Tambi\u00e9n incluye un caso de prueba actualizado para confirmar la representaci\u00f3n de m\u00faltiples etiquetas en \"(blockquote)\" con caracteres multibyte"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1333"}, {"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jsx-slack_project:jsx-slack:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.5.2", "matchCriteriaId": "7E7A11E3-74FF-4031-892F-552C8FB985A1"}]}]}], "references": [{"url": "https://github.com/yhatt/jsx-slack/commit/46bc88391d89d5fda4ce689e18ca080bcdd29ecc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/yhatt/jsx-slack/releases/tag/v4.5.2", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/yhatt/jsx-slack/security/advisories/GHSA-55xv-f85c-248q", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/yhatt/jsx-slack/security/advisories/GHSA-hp68-xhvj-x6j6", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yhatt/jsx-slack/commit/46bc88391d89d5fda4ce689e18ca080bcdd29ecc"}}