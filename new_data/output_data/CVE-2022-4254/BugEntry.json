{"buggy_code": ["extra_distcheck_flags =\nif HAVE_DEVSHM\n    extra_distcheck_flags += --with-test-dir=/dev/shm\nendif\n\nif WITH_JOURNALD\n    extra_distcheck_flags += --with-syslog=journald\nendif\n\nDISTCHECK_CONFIGURE_FLAGS = --with-ldb-lib-dir=\"$$dc_install_base\"/lib/ldb \\\n                            --disable-dbus-tests \\\n                            --enable-all-experimental-features \\\n                            $(extra_distcheck_flags) \\\n                            $(AUX_DISTCHECK_CONFIGURE_FLAGS)\nCLEANFILES = $(NULL)\nBUILT_SOURCES = $(NULL)\n\nSUBDIRS = po\n\nif HAVE_MANPAGES\nSUBDIRS += src/man\nendif\n\nSUBDIRS += . src/tests/cwrap src/tests/intg src/tests/test_CA \\\n             src/tests/test_ECC_CA\n\n# Some old versions of automake don't define builddir\nbuilddir ?= .\n\nDOXYGEN = @DOXYGEN@\n\nDISTSETUPOPTS =\nif HAVE_DEBIAN\nDISTSETUPOPTS += --install-layout=deb\nendif\n\nsssdlibexecdir = $(libexecdir)/sssd\nsssdlibdir = $(libdir)/sssd\nsssddefaultconfdir = $(sssdlibdir)/conf\nldblibdir = @ldblibdir@\nif BUILD_KRB5_LOCATOR_PLUGIN\nkrb5plugindir = @krb5pluginpath@\nendif\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nkrb5localauth_plugindir = @appmodpath@\nendif\nif BUILD_PAC_RESPONDER\nkrb5authdata_plugindir = @krb5authdatapluginpath@\nendif\nif BUILD_CIFS_IDMAP_PLUGIN\ncifsplugindir = @cifspluginpath@\nendif\nif BUILD_SAMBA\nwinbindplugindir = @winbindpluginpath@\nendif\nif BUILD_LIBWBCLIENT\nlibwbclientdir = @appmodpath@\nendif\nsssdconfdir = $(sysconfdir)/sssd\nsssddatadir = $(datadir)/sssd\nsssdapiplugindir = $(sssddatadir)/sssd.api.d\nsssdtapscriptdir = $(sssddatadir)/systemtap\ndbuspolicydir = $(sysconfdir)/dbus-1/system.d\ndbusservicedir = $(datadir)/dbus-1/system-services\nsss_statedir = $(localstatedir)/lib/sss\nrunstatedir = @runstatedir@\nlocaledir = @localedir@\nnsslibdir = @nsslibdir@\npamlibdir = @pammoddir@\nautofslibdir = @appmodpath@\nnfslibdir = @nfsidmaplibdir@\n\ndbpath = @dbpath@\npluginpath = @pluginpath@\npidpath = @pidpath@\npipepath = @pipepath@\nmcpath = @mcpath@\ninitdir = @initdir@\nsystemdunitdir = @systemdunitdir@\nsystemdconfdir = @systemdconfdir@\nlogpath = @logpath@\npubconfpath = @pubconfpath@\ngpocachepath = @gpocachepath@\nkeytabdir = $(sss_statedir)/keytabs\npkgconfigdir = $(libdir)/pkgconfig\nkrb5rcachedir = @krb5rcachedir@\nsudolibdir = @sudolibpath@\npolkitdir = @polkitdir@\npamconfdir = $(sysconfdir)/pam.d\nsystemtap_tapdir = @tapset_dir@\nsssdkcmdatadir = $(datadir)/sssd-kcm\ndeskprofilepath = $(sss_statedir)/deskprofile\n\nif HAVE_SYSTEMD_UNIT\nifp_exec_cmd = $(sssdlibexecdir)/sssd_ifp --uid 0 --gid 0 --dbus-activated\nifp_systemdservice = SystemdService=sssd-ifp.service\nifp_restart = Restart=on-failure\nelse\nifp_exec_cmd = $(sssdlibexecdir)/sss_signal\nifp_systemdservice =\nifp_restart =\nendif\n\nsecdbpath = @secdbpath@\n\nUNICODE_LIBS=@UNICODE_LIBS@\n\nMKDIR_P = @MKDIR_P@\nINSTALL = @INSTALL@\n\nSSSD_USER = @SSSD_USER@\n\n\nAM_CFLAGS =\nif WANT_AUX_INFO\n    AM_CFLAGS += -aux-info $@.X\nendif\nif HAVE_GCC\n    AM_CFLAGS += -Wall -Wshadow -Wstrict-prototypes -Wpointer-arith \\\n                 -Wcast-qual -Wcast-align -Wwrite-strings -Wundef \\\n                 -Werror-implicit-function-declaration -Winit-self \\\n                 -Wmissing-include-dirs \\\n                 -fno-strict-aliasing \\\n                 -std=gnu99\nendif\n\npkgconfig_DATA =\n\nACLOCAL_AMFLAGS = -I m4 -I .\n\nif BUILD_SSH\nbin_PROGRAMS = \\\n    sss_ssh_authorizedkeys \\\n    sss_ssh_knownhostsproxy\nendif\n\nsbin_PROGRAMS = \\\n    sssd \\\n    sss_cache \\\n    sss_override \\\n    sss_seed \\\n    sssctl \\\n    $(NULL)\n\nif BUILD_LOCAL_PROVIDER\nsbin_PROGRAMS += \\\n    sss_useradd \\\n    sss_userdel \\\n    sss_usermod \\\n    sss_groupadd \\\n    sss_groupdel \\\n    sss_groupmod \\\n    sss_groupshow \\\n    $(NULL)\nendif\n\nsssdlibexec_PROGRAMS = \\\n    sssd_nss \\\n    sssd_pam \\\n    sssd_be \\\n    krb5_child \\\n    ldap_child \\\n    proxy_child \\\n    sss_signal \\\n    $(NULL)\nif BUILD_SUDO\nsssdlibexec_PROGRAMS += sssd_sudo\nendif\nif BUILD_AUTOFS\nsssdlibexec_PROGRAMS += sssd_autofs\nendif\nif BUILD_SSH\nsssdlibexec_PROGRAMS += sssd_ssh\nendif\nif BUILD_IFP\nsssdlibexec_PROGRAMS += sssd_ifp\nendif\nif BUILD_SAMBA\nsssdlibexec_PROGRAMS += gpo_child\nendif\nif BUILD_SEMANAGE\nsssdlibexec_PROGRAMS += selinux_child\nendif\nsssdlibexec_PROGRAMS += p11_child\nif SSSD_USER\nif HAVE_POLKIT_RULES_D\npolkit_rulesdir = $(polkitdir)\ndist_polkit_rules_DATA = contrib/sssd-pcsc.rules\nendif\nendif\nif BUILD_SECRETS\nsssdlibexec_PROGRAMS += sssd_secrets\nendif\nif BUILD_KCM\nsssdlibexec_PROGRAMS += sssd_kcm\ndist_sssdkcmdata_DATA = contrib/kcm_default_ccache\nendif\n\n\nif BUILD_PAC_RESPONDER\n    sssdlibexec_PROGRAMS += sssd_pac\nendif\nif HAVE_SYSTEMD_UNIT\nsssdlibexec_PROGRAMS += sssd_check_socket_activated_responders\nendif\n\nif HAVE_CHECK\n    non_interactive_check_based_tests = \\\n        dlopen-tests \\\n        sysdb-tests \\\n        strtonum-tests \\\n        resolv-tests \\\n        krb5-utils-tests \\\n        check_and_open-tests \\\n        files-tests \\\n        refcount-tests \\\n        fail_over-tests \\\n        find_uid-tests \\\n        auth-tests \\\n        ipa_ldap_opt-tests \\\n        ad_ldap_opt-tests \\\n        crypto-tests \\\n        util-tests \\\n        debug-tests \\\n        ipa_hbac-tests \\\n        sss_idmap-tests \\\n        responder_socket_access-tests \\\n        safe-format-tests\n\nif BUILD_SSH\n    non_interactive_check_based_tests += sysdb_ssh-tests\nendif\n\nendif # HAVE_CHECK\n\nif HAVE_CMOCKA\n    non_interactive_cmocka_based_tests = \\\n        nss-srv-tests \\\n        test-find-uid \\\n        test-io \\\n        test-negcache \\\n        test-authtok \\\n        test_prompt_config \\\n        sss_nss_idmap-tests \\\n        deskprofile_utils-tests \\\n        dyndns-tests \\\n        domain_resolution_order-tests \\\n        fqnames-tests \\\n        nestedgroups-tests \\\n        test_sss_idmap \\\n        test_ipa_idmap \\\n        test_utils \\\n        dp_opt_tests \\\n        responder-get-domains-tests \\\n        config_check-tests \\\n        sss_sifp-tests \\\n        test_search_bases \\\n        test_ldap_auth \\\n        test_sdap_access \\\n        test_sdap_certmap \\\n        sdap-tests \\\n        test_sysdb_ts_cache \\\n        test_sysdb_views \\\n        test_sysdb_subdomains \\\n        test_sysdb_certmap \\\n        test_sysdb_sudo \\\n        test_sysdb_utils \\\n        test_sysdb_domain_resolution_order \\\n        test_wbc_calls \\\n        test_be_ptask \\\n        test_copy_ccache \\\n        test_copy_keytab \\\n        test_child_common \\\n        responder_cache_req-tests \\\n        test_sbus_message \\\n        test_sbus_opath \\\n        test_fo_srv \\\n        pam-srv-tests \\\n        ssh-srv-tests \\\n        test_ipa_subdom_util \\\n        test_tools_colondb \\\n        test_krb5_wait_queue \\\n        test_cert_utils \\\n        test_ldap_id_cleanup \\\n        test_data_provider_be \\\n        test_dp_request \\\n        test_dp_builtin \\\n        test_ipa_dn \\\n        simple-access-tests \\\n        krb5_common_test \\\n        test_iobuf \\\n        sss_certmap_test \\\n        test_sssd_krb5_locator_plugin \\\n        test_confdb \\\n        $(NULL)\n\n\nif HAVE_LIBRESOLV\nnon_interactive_cmocka_based_tests += test_resolv_fake\nendif   # HAVE_LIBRESOLV\n\nif BUILD_IFP\nnon_interactive_cmocka_based_tests += ifp_tests\nendif   # BUILD_IFP\n\nif HAVE_INOTIFY\nnon_interactive_cmocka_based_tests += test_inotify\nendif   # HAVE_INOTIFY\n\nif BUILD_KCM\nnon_interactive_cmocka_based_tests += \\\n\ttest_kcm_json \\\n\ttest_kcm_queue \\\n        $(NULL)\nendif   # BUILD_KCM\n\nif BUILD_SAMBA\nnon_interactive_cmocka_based_tests += \\\n    ad_access_filter_tests \\\n    ad_gpo_tests \\\n    ad_common_tests \\\n    test_sdap_initgr \\\n    test_ad_subdom \\\n    test_ipa_subdom_server \\\n    $(NULL)\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nnon_interactive_cmocka_based_tests += test_sssd_krb5_localauth_plugin\nendif # BUILD_KRB5_LOCALAUTH_PLUGIN\n\nendif   # HAVE_CMOCKA\n\ncheck_PROGRAMS = \\\n    stress-tests \\\n    krb5-child-test \\\n    test_ssh_client \\\n    $(non_interactive_cmocka_based_tests) \\\n    $(non_interactive_check_based_tests)\n\nif HAVE_CMOCKA\ncheck_PROGRAMS += dummy-child\nendif # HAVE_CMOCKA\n\nPYTHON_TESTS =\n\nif BUILD_PYTHON2_BINDINGS\nPYTHON_TESTS += src/config/SSSDConfigTest.py2.sh \\\n                src/tests/pyhbac-test.py2.sh \\\n                src/tests/pysss-test.py2.sh \\\n                src/tests/pysss_murmur-test.py2.sh \\\n                $(NULL)\nendif\nif BUILD_PYTHON3_BINDINGS\nPYTHON_TESTS += src/config/SSSDConfigTest.py3.sh \\\n                src/tests/pyhbac-test.py3.sh \\\n                src/tests/pysss-test.py3.sh \\\n                src/tests/pysss_murmur-test.py3.sh \\\n                $(NULL)\nendif\n\nTEST_EXTENSIONS = .sh\nTESTS = \\\n    $(PYTHON_TESTS) \\\n    $(non_interactive_cmocka_based_tests) \\\n    $(non_interactive_check_based_tests) \\\n    src/tests/whitespace_test \\\n    src/tests/double_semicolon_test \\\n    $(NULL)\n\nsssdlib_LTLIBRARIES = \\\n    libsss_ldap.la \\\n    libsss_krb5.la \\\n    libsss_proxy.la \\\n    libsss_simple.la \\\n    $(NULL)\n\nif BUILD_SAMBA\nsssdlib_LTLIBRARIES += \\\n    libsss_ipa.la \\\n    libsss_ad.la\nendif\n\nif HAVE_INOTIFY\nsssdlib_LTLIBRARIES += \\\n    libsss_files.la \\\n    $(NULL)\nendif # HAVE_INOTIFY\n\nldblib_LTLIBRARIES = \\\n    memberof.la\n\nif BUILD_KRB5_LOCATOR_PLUGIN\nkrb5plugin_LTLIBRARIES = \\\n    sssd_krb5_locator_plugin.la\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nkrb5localauth_plugin_LTLIBRARIES = \\\n    sssd_krb5_localauth_plugin.la\nendif\n\nif BUILD_PAC_RESPONDER\nkrb5authdata_plugin_LTLIBRARIES = \\\n    sssd_pac_plugin.la\nendif\n\nif BUILD_CIFS_IDMAP_PLUGIN\ncifsplugin_LTLIBRARIES = \\\n    cifs_idmap_sss.la\nendif\n\nif BUILD_SAMBA\nwinbindplugin_LTLIBRARIES = \\\n    winbind_idmap_sss.la \\\n    $(NULL)\nendif\n\nnoinst_LTLIBRARIES =\n\npkglib_LTLIBRARIES =\n\nif BUILD_PYTHON2_BINDINGS\npy2exec_LTLIBRARIES = \\\n    _py2sss.la \\\n    _py2hbac.la \\\n    _py2sss_murmur.la \\\n    _py2sss_nss_idmap.la \\\n    $(NULL)\nendif\n\nif BUILD_PYTHON3_BINDINGS\npy3exec_LTLIBRARIES = \\\n    _py3sss.la \\\n    _py3hbac.la \\\n    _py3sss_murmur.la \\\n    _py3sss_nss_idmap.la \\\n    $(NULL)\nendif\n\nsbin_SCRIPTS = \\\n\tsrc/tools/wrappers/sss_debuglevel \\\n\t$(NULL)\n\ndist_noinst_SCRIPTS = \\\n    $(EXTRA_SCRIPTS) \\\n    src/config/setup.py \\\n    src/config/SSSDConfig/ipachangeconf.py \\\n    src/config/SSSDConfig/sssdoptions.py \\\n    src/config/SSSDConfig/__init__.py \\\n    src/config/SSSDConfigTest.py \\\n    src/config/SSSDConfigTest.py2.sh \\\n    src/config/SSSDConfigTest.py3.sh \\\n    contrib/fedora/bashrc_sssd \\\n    contrib/fedora/make_srpm.sh \\\n    contrib/ci/clean \\\n    contrib/ci/rpm-spec-builddeps \\\n    contrib/ci/run \\\n    contrib/ci/valgrind-condense \\\n    src/tests/pyhbac-test.py \\\n    src/tests/pyhbac-test.py2.sh \\\n    src/tests/pyhbac-test.py3.sh \\\n    src/tests/pysss-test.py \\\n    src/tests/pysss-test.py2.sh \\\n    src/tests/pysss-test.py3.sh \\\n    src/tests/pysss_murmur-test.py \\\n    src/tests/pysss_murmur-test.py2.sh \\\n    src/tests/pysss_murmur-test.py3.sh \\\n    src/tests/python-test.py \\\n    src/tests/whitespace_test \\\n    src/tests/double_semicolon_test \\\n    src/tests/krb5_proxy_check_test_data.conf \\\n    $(NULL)\n\ndist_noinst_DATA = \\\n    src/config/testconfigs/sssd-valid.conf \\\n    src/config/testconfigs/noparse.api.conf \\\n    src/config/testconfigs/sssd-noversion.conf \\\n    src/config/testconfigs/sssd-badversion.conf \\\n    src/config/testconfigs/sssd-invalid.conf \\\n    src/config/testconfigs/sssd-invalid-badbool.conf \\\n    src/config/testconfigs/sssd-nonexisting-services-domains.conf \\\n    src/config/testconfigs/sssd-test-parse.conf \\\n    src/config/testconfigs/sssd-enabled-option.conf \\\n    src/config/etc/sssd.api.d/crash_test_dummy \\\n    contrib/ci/README.md \\\n    contrib/ci/configure.sh \\\n    contrib/ci/deps.sh \\\n    contrib/ci/distro.sh \\\n    contrib/ci/misc.sh \\\n    contrib/ci/sssd.supp \\\n    $(SYSTEMTAP_PROBES) \\\n    $(NULL)\n\n###############################\n# Global compilation settings #\n###############################\n\nAM_CPPFLAGS = \\\n    -Wall \\\n    -I.. \\\n    -I$(srcdir)/src/sss_client \\\n    -I$(srcdir)/src \\\n    -I. \\\n    $(POPT_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TDB_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(LDB_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(PCRE_CFLAGS) \\\n    $(INI_CONFIG_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(LIBNL_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(GLIB2_CFLAGS) \\\n    $(JOURNALD_CFLAGS) \\\n    -DLIBDIR=\\\"$(libdir)\\\" \\\n    -DVARDIR=\\\"$(localstatedir)\\\" \\\n    -DSSS_STATEDIR=\\\"$(sss_statedir)\\\" \\\n    -DSYSCONFDIR=\\\"$(sysconfdir)\\\" \\\n    -DSHLIBEXT=\\\"$(SHLIBEXT)\\\" \\\n    -DSSSDDATADIR=\\\"$(sssddatadir)\\\" \\\n    -DSSSD_LIBEXEC_PATH=\\\"$(sssdlibexecdir)\\\" \\\n    -DSSSD_CONF_DIR=\\\"$(sssdconfdir)\\\" \\\n    -DSSS_NSS_MCACHE_DIR=\\\"$(mcpath)\\\" \\\n    -DSSS_NSS_SOCKET_NAME=\\\"$(pipepath)/nss\\\" \\\n    -DSSS_PAM_SOCKET_NAME=\\\"$(pipepath)/pam\\\" \\\n    -DSSS_PAC_SOCKET_NAME=\\\"$(pipepath)/pac\\\" \\\n    -DSSS_PAM_PRIV_SOCKET_NAME=\\\"$(pipepath)/private/pam\\\" \\\n    -DSSS_SEC_SOCKET_NAME=\\\"$(runstatedir)/secrets.socket\\\" \\\n    -DSSS_SUDO_SOCKET_NAME=\\\"$(pipepath)/sudo\\\" \\\n    -DSSS_AUTOFS_SOCKET_NAME=\\\"$(pipepath)/autofs\\\" \\\n    -DSSS_SSH_SOCKET_NAME=\\\"$(pipepath)/ssh\\\" \\\n    -DLOCALEDIR=\\\"$(localedir)\\\" \\\n    -DBASE_FILE_STEM=\\\"$(*F)\\\" \\\n    $(NULL)\n\nEXTRA_DIST =\n\nSSSD_CACHE_REQ_OBJ = \\\n\tsrc/responder/common/cache_req/cache_req.c \\\n\tsrc/responder/common/cache_req/cache_req_result.c \\\n\tsrc/responder/common/cache_req/cache_req_search.c \\\n\tsrc/responder/common/cache_req/cache_req_data.c \\\n\tsrc/responder/common/cache_req/cache_req_domain.c \\\n\tsrc/responder/common/cache_req/cache_req_sr_overlay.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_common.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_users.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_groups.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_svc.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_ip_hosts.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_ip_networks.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_upn.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_filter.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_cert.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_filter.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_initgroups_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_initgroups_by_upn.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_sid.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_svc_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_svc_by_port.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_netgroup_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ssh_host_id_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_map_entries.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_map_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_entry_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_host_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_host_by_addr.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_network_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_network_by_addr.c \\\n\t$(NULL)\n\nSSSD_RESPONDER_IFACE_OBJ = \\\n    src/responder/common/responder_iface.c \\\n    $(NULL)\n\nSSSD_RESPONDER_OBJ = \\\n    src/responder/common/negcache_files.c \\\n    src/responder/common/negcache.c \\\n    src/util/nss_dl_load.c \\\n    src/responder/common/responder_cmd.c \\\n    src/responder/common/responder_common.c \\\n    src/responder/common/responder_dp.c \\\n    src/responder/common/responder_packet.c \\\n    src/responder/common/responder_get_domains.c \\\n    src/responder/common/responder_utils.c \\\n    src/providers/data_provider_req.c \\\n    src/util/session_recording.c \\\n    $(SSSD_RESPONDER_IFACE_OBJ) \\\n    $(SSSD_CACHE_REQ_OBJ) \\\n    $(NULL)\n\nSSSD_TOOLS_OBJ = \\\n    src/tools/sss_sync_ops.c \\\n    src/tools/tools_util.c \\\n    src/tools/common/sss_tools.c \\\n    src/tools/common/sss_process.c \\\n    src/confdb/confdb_setup.c \\\n    src/util/nscd.c \\\n    $(NULL)\n\nSSSD_LCL_TOOLS_OBJ = \\\n    src/sss_client/common.c \\\n    src/tools/tools_mc_util.c \\\n    $(SSSD_TOOLS_OBJ)\n\nSSSD_RESOLV_OBJ = \\\n    src/resolv/async_resolv.c \\\n    src/resolv/async_resolv_utils.c\n\nSSSD_FAILOVER_OBJ = \\\n    src/providers/fail_over.c \\\n    src/providers/fail_over_srv.c \\\n    $(SSSD_RESOLV_OBJ)\n\nSSSD_LIBS = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(TDB_LIBS)\n\nPYTHON_BINDINGS_LIBS = \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(NULL)\n\nTOOLS_LIBS = \\\n    $(LTLIBINTL) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TDB_LIBS)\n\nif BUILD_SELINUX\n    PYTHON_BINDINGS_LIBS += $(SELINUX_LIBS)\n    TOOLS_LIBS += $(SELINUX_LIBS)\nendif\n\ndist_noinst_HEADERS = \\\n    src/monitor/monitor.h \\\n    src/sss_iface/sbus_sss_arguments.h \\\n    src/sss_iface/sbus_sss_client_async.h \\\n    src/sss_iface/sbus_sss_client_properties.h \\\n    src/sss_iface/sbus_sss_client_sync.h \\\n    src/sss_iface/sbus_sss_interface.h \\\n    src/sss_iface/sbus_sss_invokers.h \\\n    src/sss_iface/sbus_sss_keygens.h \\\n    src/sss_iface/sbus_sss_server.h \\\n    src/sss_iface/sbus_sss_symbols.h \\\n    src/sss_iface/sss_iface_types.h \\\n    src/sss_iface/sss_iface_async.h \\\n    src/sss_iface/sss_iface_sync.h \\\n    src/sss_iface/sss_iface.h \\\n    src/util/crypto/sss_crypto.h \\\n    src/util/crypto/libcrypto/sss_openssl.h \\\n    src/util/cert.h \\\n    src/util/dlinklist.h \\\n    src/util/debug.h \\\n    src/util/util.h \\\n    src/util/util_errors.h \\\n    src/util/safe-format-string.h \\\n    src/util/session_recording.h \\\n    src/util/strtonum.h \\\n    src/util/sss_cli_cmd.h \\\n    src/util/sss_ptr_hash.h \\\n    src/util/sss_ptr_list.h \\\n    src/util/sss_endian.h \\\n    src/util/sss_nss.h \\\n    src/util/sss_ldap.h \\\n    src/util/sss_python.h \\\n    src/util/sss_regexp.h \\\n    src/util/sss_krb5.h \\\n    src/util/sss_selinux.h \\\n    src/util/sss_sockets.h \\\n    src/util/sss_utf8.h \\\n    src/util/sss_ssh.h \\\n    src/util/sss_ini.h \\\n    src/util/sss_format.h \\\n    src/util/sss_pam_data.h \\\n    src/util/refcount.h \\\n    src/util/find_uid.h \\\n    src/util/user_info_msg.h \\\n    src/util/mmap_cache.h \\\n    src/util/atomic_io.h \\\n    src/util/auth_utils.h \\\n    src/util/authtok.h \\\n    src/util/authtok-utils.h \\\n    src/util/util_sss_idmap.h \\\n    src/util/util_creds.h \\\n    src/util/inotify.h \\\n    src/util/sss_iobuf.h \\\n    src/util/tev_curl.h \\\n    src/util/secrets/secrets.h \\\n    src/util/secrets/sec_pvt.h \\\n    src/util/nss_dl_load.h \\\n    src/monitor/monitor.h \\\n    src/responder/common/responder.h \\\n    src/responder/common/responder_packet.h \\\n    src/responder/common/responder_sbus.h \\\n    src/responder/common/cache_req/cache_req.h \\\n    src/responder/common/cache_req/cache_req_domain.h \\\n    src/responder/common/cache_req/cache_req_plugin.h \\\n    src/responder/common/cache_req/cache_req_private.h \\\n    src/responder/pam/pamsrv.h \\\n    src/responder/pam/pam_helpers.h \\\n    src/responder/nss/nss_private.h \\\n    src/responder/nss/nss_protocol.h \\\n    src/responder/nss/nss_iface.h \\\n    src/responder/nss/nsssrv_mmap_cache.h \\\n    src/responder/pac/pacsrv.h \\\n    src/responder/common/negcache_files.h \\\n    src/responder/common/negcache.h \\\n    src/responder/sudo/sudosrv_private.h \\\n    src/responder/autofs/autofs_private.h \\\n    src/responder/ssh/ssh_private.h \\\n    src/responder/ifp/ifp_private.h \\\n    src/responder/ifp/ifp_domains.h \\\n    src/responder/ifp/ifp_components.h \\\n    src/responder/ifp/ifp_users.h \\\n    src/responder/ifp/ifp_groups.h \\\n    src/responder/ifp/ifp_cache.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_async.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_properties.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_sync.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_interface.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_invokers.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_server.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.h \\\n    src/responder/ifp/ifp_iface/ifp_iface.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_async.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_sync.h \\\n    src/responder/secrets/secsrv.h \\\n    src/responder/secrets/secsrv_private.h \\\n    src/responder/secrets/secsrv_local.h \\\n    src/responder/secrets/secsrv_proxy.h \\\n    src/responder/kcm/kcm.h \\\n    src/responder/kcm/kcmsrv_pvt.h \\\n    src/responder/kcm/kcmsrv_ccache.h \\\n    src/responder/kcm/kcmsrv_ccache_pvt.h \\\n    src/responder/kcm/kcmsrv_ccache_be.h \\\n    src/responder/kcm/kcmsrv_ops.h \\\n    src/sbus/sbus_annotations.h \\\n    src/sbus/sbus_declarations.h \\\n    src/sbus/sbus_errors.h \\\n    src/sbus/sbus.h \\\n    src/sbus/sbus_interface_declarations.h \\\n    src/sbus/sbus_interface.h \\\n    src/sbus/sbus_message.h \\\n    src/sbus/sbus_opath.h \\\n    src/sbus/sbus_private.h \\\n    src/sbus/sbus_request.h \\\n    src/sbus/sbus_sync.h \\\n    src/sbus/sbus_sync_private.h \\\n    src/sbus/sbus_typeof.h \\\n    src/sbus/connection/sbus_dbus_private.h \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_async.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_sync.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_properties.h \\\n    src/sbus/interface_dbus/sbus_dbus_interface.h \\\n    src/sbus/interface_dbus/sbus_dbus_invokers.h \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.h \\\n    src/sbus/interface_dbus/sbus_dbus_server.h \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.h \\\n    src/sbus/interface/sbus_iterator_readers.h \\\n    src/sbus/interface/sbus_iterator_writers.h \\\n    src/db/sysdb.h \\\n    src/db/sysdb_sudo.h \\\n    src/db/sysdb_autofs.h \\\n    src/db/sysdb_selinux.h \\\n    src/db/sysdb_private.h \\\n    src/db/sysdb_services.h \\\n    src/db/sysdb_ssh.h \\\n    src/db/sysdb_domain_resolution_order.h \\\n    src/db/sysdb_computer.h \\\n    src/db/sysdb_iphosts.h \\\n    src/db/sysdb_ipnetworks.h \\\n    src/confdb/confdb.h \\\n    src/confdb/confdb_private.h \\\n    src/confdb/confdb_setup.h \\\n    src/providers/data_provider.h \\\n    src/providers/data_provider_req.h \\\n    src/providers/data_provider/dp.h \\\n    src/providers/data_provider/dp_flags.h \\\n    src/providers/data_provider/dp_private.h \\\n    src/providers/data_provider/dp_request.h \\\n    src/providers/data_provider/dp_custom_data.h \\\n    src/providers/data_provider/dp_builtin.h \\\n    src/providers/data_provider/dp_iface.h \\\n    src/providers/backend.h \\\n    src/providers/be_dyndns.h \\\n    src/providers/be_ptask_private.h \\\n    src/providers/be_ptask.h \\\n    src/providers/be_refresh.h \\\n    src/providers/fail_over.h \\\n    src/providers/fail_over_srv.h \\\n    src/util/child_common.h \\\n    src/providers/simple/simple_access.h \\\n    src/providers/simple/simple_access_pvt.h \\\n    src/providers/krb5/krb5_auth.h \\\n    src/providers/krb5/krb5_common.h \\\n    src/providers/krb5/krb5_utils.h \\\n    src/providers/krb5/krb5_init_shared.h \\\n    src/providers/krb5/krb5_opts.h \\\n    src/providers/krb5/krb5_ccache.h \\\n    src/providers/ldap/ldap_common.h \\\n    src/providers/ldap/sdap.h \\\n    src/providers/ldap/sdap_access.h \\\n    src/providers/ldap/sdap_async.h \\\n    src/providers/ldap/sdap_async_ad.h \\\n    src/providers/ldap/sdap_async_private.h \\\n    src/providers/ldap/sdap_sudo.h \\\n    src/providers/ldap/sdap_sudo_shared.h \\\n    src/providers/ldap/sdap_autofs.h \\\n    src/providers/ldap/sdap_id_op.h \\\n    src/providers/ldap/ldap_opts.h \\\n    src/providers/ldap/ldap_auth.h \\\n    src/providers/ldap/sdap_range.h \\\n    src/providers/ldap/sdap_users.h \\\n    src/providers/ldap/sdap_dyndns.h \\\n    src/providers/ldap/sdap_async_enum.h \\\n    src/providers/ldap/sdap_async_resolver_enum.h \\\n    src/providers/ldap/sdap_ops.h \\\n    src/providers/ldap/ldap_resolver_enum.h \\\n    src/providers/ipa/ipa_common.h \\\n    src/providers/ipa/ipa_config.h \\\n    src/providers/ipa/ipa_access.h \\\n    src/providers/ipa/ipa_selinux.h \\\n    src/providers/ipa/ipa_hosts.h \\\n    src/providers/ipa/ipa_selinux_maps.h \\\n    src/providers/ipa/ipa_auth.h \\\n    src/providers/ipa/ipa_dyndns.h \\\n    src/providers/ipa/ipa_subdomains.h \\\n    src/providers/ipa/ipa_id.h \\\n    src/providers/ipa/ipa_opts.h \\\n    src/providers/ipa/ipa_srv.h \\\n    src/providers/ipa/ipa_dn.h \\\n    src/providers/ipa/ipa_sudo.h \\\n    src/providers/ipa/ipa_session.h \\\n    src/providers/ad/ad_srv.h \\\n    src/providers/ad/ad_common.h \\\n    src/providers/ad/ad_pac.h \\\n    src/providers/ad/ad_id.h \\\n    src/providers/ad/ad_access.h \\\n    src/providers/ad/ad_gpo.h \\\n    src/providers/ad/ad_opts.h \\\n    src/providers/ad/ad_domain_info.h \\\n    src/providers/ad/ad_subdomains.h \\\n    src/providers/ad/ad_resolver.h \\\n    src/providers/proxy/proxy.h \\\n    src/providers/files/files_private.h \\\n    src/tools/tools_util.h \\\n    src/tools/sss_sync_ops.h \\\n    src/resolv/async_resolv.h \\\n    src/tests/common.h \\\n    src/tests/common_check.h \\\n    src/tests/cmocka/common_mock.h \\\n    src/tests/cmocka/common_mock_resp.h \\\n    src/tests/cmocka/common_mock_sdap.h \\\n    src/tests/cmocka/common_mock_sysdb_objects.h \\\n    src/tests/cmocka/common_mock_krb5.h \\\n    src/tests/cmocka/common_mock_be.h \\\n    src/tests/cmocka/test_expire_common.h \\\n    src/tests/cmocka/test_sdap_access.h \\\n    src/tests/cmocka/data_provider/mock_dp.h \\\n    src/sss_client/pam_message.h \\\n    src/sss_client/ssh/sss_ssh_client.h \\\n    src/sss_client/sudo/sss_sudo.h \\\n    src/sss_client/libwbclient/libwbclient.h \\\n    src/sss_client/libwbclient/wbc_err_internal.h \\\n    src/sss_client/libwbclient/wbclient_internal.h \\\n    src/sss_client/libwbclient/wbc_sssd_internal.h \\\n    src/sss_client/nfs/nfsidmap_internal.h \\\n    src/lib/idmap/sss_idmap_private.h \\\n    src/lib/sifp/sss_sifp_private.h \\\n    src/lib/winbind_idmap_sss/winbind_idmap_sss.h \\\n    src/tests/cmocka/test_utils.h \\\n    src/tools/common/sss_tools.h \\\n    src/tools/common/sss_process.h \\\n    src/tools/common/sss_colondb.h \\\n    src/tools/sssctl/sssctl.h \\\n    src/util/probes.h \\\n    src/shared/io.h \\\n    src/shared/murmurhash3.h \\\n    src/shared/safealign.h \\\n    src/p11_child/p11_child.h \\\n    $(NULL)\n\n\nif HAVE_NSS\n    dist_noinst_HEADERS += src/util/crypto/nss/nss_util.h \\\n                           src/util/crypto/nss/nss_crypto.h\nendif\n\nSSSD_DOCS = \\\n    doc \\\n    hbac_doc \\\n    idmap_doc \\\n    nss_idmap_doc\n\nif BUILD_IFP\n    SSSD_DOCS += sss_simpleifp_doc\nendif\n\nCLIENT_LIBS = $(LTLIBINTL)\n\nif WITH_JOURNALD\nSYSLOG_LIBS = $(JOURNALD_LIBS)\nendif\n\n#####################\n# Utility libraries #\n#####################\npkglib_LTLIBRARIES += libsss_debug.la\nlibsss_debug_la_SOURCES = \\\n    src/util/debug.c \\\n    src/util/sss_log.c \\\n    src/util/sss_cli_cmd.c \\\n    $(NULL)\nlibsss_debug_la_LIBADD = \\\n    $(SYSLOG_LIBS)\nlibsss_debug_la_LDFLAGS = \\\n    -avoid-version\n\npkglib_LTLIBRARIES += libsss_child.la\nlibsss_child_la_SOURCES = src/util/child_common.c\nlibsss_child_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DHASH_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nlibsss_child_la_LDFLAGS = -avoid-version\n\npkglib_LTLIBRARIES += libsss_crypt.la\n\n# NOTE:\n# Please try to avoid using SSS_CRYPT_{CFLAGS,LIBS} directly for compiling and\n# linking programs or libraries. This is purpose of wrapper library\n# libsss_crypt.so to hide internals. SSS_CRYPT_{CFLAGS,LIBS} might be used\n# in unit tests if you directly uses functions from underlining crypto libraries\nif HAVE_NSS\n    SSS_CRYPT_SOURCES = src/util/crypto/nss/nss_base64.c \\\n                        src/util/crypto/nss/nss_hmac_sha1.c \\\n                        src/util/crypto/nss/nss_sha512crypt.c \\\n                        src/util/crypto/nss/nss_obfuscate.c \\\n                        src/util/crypto/nss/nss_nite.c \\\n                        src/util/crypto/nss/nss_util.c \\\n                        src/util/crypto/nss/nss_prng.c \\\n                        src/util/atomic_io.c \\\n                        src/util/memory.c \\\n                        $(NULL)\n    SSS_CRYPT_CFLAGS = $(NSS_CFLAGS)\n    SSS_CRYPT_LIBS = $(NSS_LIBS)\n\n    SSS_CERT_SOURCES = \\\n        src/util/cert/cert_common.c \\\n        src/util/cert/cert_common_p11_child.c \\\n        src/util/cert/nss/cert.c \\\n        $(NULL)\n    SSS_CERT_CFLAGS = \\\n        $(NSS_CFLAGS) \\\n        $(NULL)\n    SSS_CERT_LIBS = \\\n        $(NSS_LIBS) \\\n        $(NULL)\nelse\n    SSS_CRYPT_SOURCES = src/util/crypto/libcrypto/crypto_base64.c \\\n                        src/util/crypto/libcrypto/crypto_hmac_sha1.c \\\n                        src/util/crypto/libcrypto/crypto_sha512crypt.c \\\n                        src/util/crypto/libcrypto/crypto_obfuscate.c \\\n                        src/util/crypto/libcrypto/crypto_nite.c \\\n                        src/util/crypto/libcrypto/crypto_prng.c \\\n                        src/util/atomic_io.c \\\n                        src/util/memory.c \\\n                        $(NULL)\n    SSS_CRYPT_CFLAGS = $(CRYPTO_CFLAGS)\n    SSS_CRYPT_LIBS = $(CRYPTO_LIBS)\n\n    SSS_CERT_SOURCES = \\\n        src/util/cert/cert_common.c \\\n        src/util/cert/cert_common_p11_child.c \\\n        src/util/cert/libcrypto/cert.c \\\n        $(NULL)\n    SSS_CERT_CFLAGS = \\\n        $(CRYPTO_CFLAGS) \\\n        $(NULL)\n    SSS_CERT_LIBS = \\\n        $(CRYPTO_LIBS) \\\n        $(NULL)\nendif\n\nlibsss_crypt_la_SOURCES = \\\n    $(SSS_CRYPT_SOURCES)\nlibsss_crypt_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SSS_CRYPT_CFLAGS) \\\n    $(DHASH_CFLAGS)\nlibsss_crypt_la_LIBADD = \\\n    $(SSS_CRYPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nlibsss_crypt_la_LDFLAGS = \\\n    -avoid-version\n\npkglib_LTLIBRARIES += libsss_cert.la\n\nlibsss_cert_la_SOURCES = \\\n    $(SSS_CERT_SOURCES) \\\n    $(NULL)\nlibsss_cert_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SSS_CERT_CFLAGS) \\\n    $(NULL)\n# NOTE:\n# There is a dependency between libsss_cert and libsss_child which should\n# always be declared explicitly and if missing might cause issue in some\n# environments (e.g. Gentoo or OpenSUSE build service), even if it is\n# resolved otherwise while linking the binaries.\nlibsss_cert_la_LIBADD = \\\n    $(SSS_CERT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    libsss_crypt.la \\\n    libsss_child.la \\\n    libsss_debug.la \\\n    libsss_certmap.la \\\n    $(NULL)\nlibsss_cert_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\ngenerate-sbus-code:\n\t$(builddir)/sbus_generate.sh $(abs_srcdir)\n\n.PHONY: generate-sbus-code\n\nBUILT_SOURCES += generate-sbus-code\n\nEXTRA_DIST += \\\n    sbus_generate.sh.in \\\n    src/sbus/codegen/dbus.xml \\\n    src/sbus/codegen/sbus_CodeGen.py \\\n    src/sbus/codegen/sbus_DataType.py \\\n    src/sbus/codegen/sbus_Generator.py \\\n    src/sbus/codegen/sbus_Introspection.py \\\n    src/sbus/codegen/sbus_Invoker.py \\\n    src/sbus/codegen/sbus_Template.py \\\n    src/sbus/codegen/templates/arguments.c.tpl \\\n    src/sbus/codegen/templates/arguments.h.tpl \\\n    src/sbus/codegen/templates/client_async.c.tpl \\\n    src/sbus/codegen/templates/client_async.h.tpl \\\n    src/sbus/codegen/templates/client_properties.h.tpl \\\n    src/sbus/codegen/templates/client_sync.c.tpl \\\n    src/sbus/codegen/templates/client_sync.h.tpl \\\n    src/sbus/codegen/templates/interface.h.tpl \\\n    src/sbus/codegen/templates/invokers.c.tpl \\\n    src/sbus/codegen/templates/invokers.h.tpl \\\n    src/sbus/codegen/templates/keygens.c.tpl \\\n    src/sbus/codegen/templates/keygens.h.tpl \\\n    src/sbus/codegen/templates/server.h.tpl \\\n    src/sbus/codegen/templates/symbols.c.tpl \\\n    src/sbus/codegen/templates/symbols.h.tpl \\\n    src/sss_iface/sss_iface.xml \\\n    src/sss_iface/external_iface.xml \\\n    src/responder/ifp/ifp_iface/ifp_iface.xml \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_sbus.la\nlibsss_sbus_la_SOURCES = \\\n    src/util/check_and_open.c \\\n    src/util/debug.c \\\n    src/util/sss_ptr_hash.c \\\n    src/util/sss_ptr_list.c \\\n    src/util/sss_utf8.c \\\n    src/util/util.c \\\n    src/util/util_errors.c \\\n    src/util/util_ext.c \\\n    src/util/strtonum.c \\\n    src/sbus/sbus_errors.c \\\n    src/sbus/sbus_opath.c \\\n    src/sbus/connection/sbus_connection.c \\\n    src/sbus/connection/sbus_connection_connect.c \\\n    src/sbus/connection/sbus_dbus.c \\\n    src/sbus/connection/sbus_dispatcher.c \\\n    src/sbus/connection/sbus_reconnect.c \\\n    src/sbus/connection/sbus_send.c \\\n    src/sbus/connection/sbus_watch.c \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.c \\\n    src/sbus/interface_dbus/sbus_dbus_client_async.c \\\n    src/sbus/interface_dbus/sbus_dbus_invokers.c \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.c \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.c \\\n    src/sbus/interface/sbus_interface.c \\\n    src/sbus/interface/sbus_introspection.c \\\n    src/sbus/interface/sbus_iterator_readers.c \\\n    src/sbus/interface/sbus_iterator_writers.c \\\n    src/sbus/interface/sbus_properties.c \\\n    src/sbus/interface/sbus_properties_parser.c \\\n    src/sbus/interface/sbus_std_signals.c \\\n    src/sbus/request/sbus_message.c \\\n    src/sbus/request/sbus_request.c \\\n    src/sbus/request/sbus_request_call.c \\\n    src/sbus/request/sbus_request_hash.c \\\n    src/sbus/request/sbus_request_sender.c \\\n    src/sbus/request/sbus_request_util.c \\\n    src/sbus/router/sbus_router.c \\\n    src/sbus/router/sbus_router_handler.c \\\n    src/sbus/router/sbus_router_hash.c \\\n    src/sbus/server/sbus_server_handler.c \\\n    src/sbus/server/sbus_server_interface.c \\\n    src/sbus/server/sbus_server_match.c \\\n    src/sbus/server/sbus_server.c \\\n    $(NULL)\nlibsss_sbus_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(UNICODE_LIBS) \\\n    $(NULL)\nlibsss_sbus_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_sbus_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_sbus_sync.la\nlibsss_sbus_sync_la_SOURCES = \\\n    src/util/debug.c \\\n    src/util/sss_utf8.c \\\n    src/util/util.c \\\n    src/util/util_errors.c \\\n    src/util/strtonum.c \\\n    src/sbus/sbus_errors.c \\\n    src/sbus/sbus_opath.c \\\n    src/sbus/connection/sbus_dbus.c \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.c \\\n    src/sbus/interface_dbus/sbus_dbus_client_sync.c \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.c \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.c \\\n    src/sbus/interface/sbus_iterator_readers.c \\\n    src/sbus/interface/sbus_iterator_writers.c \\\n    src/sbus/interface/sbus_properties_parser.c \\\n    src/sbus/request/sbus_message.c \\\n    src/sbus/sync/sbus_sync.c \\\n    src/sbus/sync/sbus_sync_call.c \\\n    $(NULL)\nlibsss_sbus_sync_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(NULL)\nlibsss_sbus_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(UNICODE_LIBS) \\\n    $(NULL)\nlibsss_sbus_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_iface.la\nlibsss_iface_la_SOURCES = \\\n    src/sss_iface/sbus_sss_arguments.c \\\n    src/sss_iface/sbus_sss_client_async.c \\\n    src/sss_iface/sbus_sss_invokers.c \\\n    src/sss_iface/sbus_sss_keygens.c \\\n    src/sss_iface/sbus_sss_symbols.c \\\n    src/sss_iface/sss_iface_types.c \\\n    src/sss_iface/sss_iface.c \\\n    src/util/domain_info_utils.c \\\n    src/util/sss_pam_data.c \\\n    $(NULL)\nlibsss_iface_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus.la \\\n    $(NULL)\nlibsss_iface_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_iface_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_iface_sync.la\nlibsss_iface_sync_la_SOURCES = \\\n    src/sss_iface/sbus_sss_arguments.c \\\n    src/sss_iface/sbus_sss_client_sync.c \\\n    src/sss_iface/sbus_sss_keygens.c \\\n    src/sss_iface/sbus_sss_symbols.c \\\n    src/sss_iface/sss_iface_types.c \\\n    src/util/domain_info_utils.c \\\n    src/util/sss_pam_data.c \\\n    $(NULL)\nlibsss_iface_sync_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nlibsss_iface_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_iface_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_util.la\nlibsss_util_la_SOURCES = \\\n    src/confdb/confdb.c \\\n    src/db/sysdb.c \\\n    src/db/sysdb_ops.c \\\n    src/db/sysdb_search.c \\\n    src/db/sysdb_selinux.c \\\n    src/db/sysdb_upgrade.c \\\n    src/db/sysdb_init.c \\\n    src/db/sysdb_services.c \\\n    src/db/sysdb_autofs.c \\\n    src/db/sysdb_subdomains.c \\\n    src/db/sysdb_views.c \\\n    src/db/sysdb_ranges.c \\\n    src/db/sysdb_idmap.c \\\n    src/db/sysdb_gpo.c \\\n    src/db/sysdb_certmap.c \\\n    src/db/sysdb_domain_resolution_order.c \\\n    src/db/sysdb_iphosts.c \\\n    src/db/sysdb_ipnetworks.c \\\n    src/util/sss_pam_data.c \\\n    src/db/sysdb_computer.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/util_preauth.c \\\n    src/util/memory.c \\\n    src/util/safe-format-string.c \\\n    src/util/server.c \\\n    src/util/signal.c \\\n    src/util/usertools.c \\\n    src/util/backup_file.c \\\n    src/util/strtonum.c \\\n    src/util/check_and_open.c \\\n    src/util/refcount.c \\\n    src/util/sss_nss.c \\\n    src/util/sss_utf8.c \\\n    src/util/sss_tc_utf8.c \\\n    src/util/murmurhash3.c \\\n    src/util/atomic_io.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/sss_selinux.c \\\n    src/util/domain_info_utils.c \\\n    src/util/util_lock.c \\\n    src/util/util_errors.c \\\n    src/util/find_uid.c \\\n    src/util/sss_ini.c \\\n    src/util/io.c \\\n    src/util/util_sss_idmap.c \\\n    src/util/well_known_sids.c \\\n    src/util/string_utils.c \\\n    src/util/become_user.c \\\n    src/util/util_watchdog.c \\\n    src/util/sss_ptr_hash.c \\\n    src/util/files.c \\\n    src/util/selinux.c \\\n    src/util/sss_regexp.c \\\n    $(NULL)\nlibsss_util_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS) \\\n    $(NULL)\nlibsss_util_la_LIBADD = \\\n    $(LIBADD_TIMER) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    $(UNICODE_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    libsss_debug.la \\\n    libsss_child.la \\\n    libsss_crypt.la \\\n    libsss_cert.la \\\n    $(NULL)\nif BUILD_SUDO\n    libsss_util_la_SOURCES += src/db/sysdb_sudo.c\nendif\nif BUILD_SSH\nlibsss_util_la_SOURCES += \\\n    src/db/sysdb_ssh.c \\\n    src/util/sss_ssh.c\nendif\nif BUILD_SYSTEMTAP\nlibsss_util_la_LIBADD += stap_generated_probes.lo\nendif\nlibsss_util_la_LDFLAGS = -avoid-version\n\nif BUILD_WITH_LIBSECRET\npkglib_LTLIBRARIES += libsss_secrets.la\nlibsss_secrets_la_SOURCES = \\\n    src/util/secrets/secrets.c \\\n    src/util/secrets/config.c \\\n    $(NULL)\nlibsss_secrets_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nlibsss_secrets_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_util.la \\\n    $(NULL)\nlibsss_secrets_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\nendif\n\npkglib_LTLIBRARIES += libsss_semanage.la\nlibsss_semanage_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(NULL)\nlibsss_semanage_la_SOURCES = \\\n    src/util/sss_semanage.c \\\n    $(NULL)\nlibsss_semanage_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nif BUILD_SEMANAGE\nlibsss_semanage_la_LIBADD += $(SEMANAGE_LIBS)\nendif\n\nlibsss_semanage_la_LDFLAGS = \\\n    -avoid-version\n\nSSSD_INTERNAL_LTLIBS = \\\n    libsss_util.la \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_child.la \\\n    $(NULL)\n\nlib_LTLIBRARIES = libipa_hbac.la \\\n                  libsss_idmap.la \\\n                  libsss_nss_idmap.la \\\n                  libsss_certmap.la \\\n                  $(NULL)\n\npkgconfig_DATA += src/lib/ipa_hbac/ipa_hbac.pc\nlibipa_hbac_la_DEPENDENCIES = src/lib/ipa_hbac/ipa_hbac.exports\nlibipa_hbac_la_SOURCES = \\\n    src/lib/ipa_hbac/hbac_evaluator.c \\\n    src/util/sss_utf8.c\n# libipa_hbac is also used by external projects such as pam_hbac which\n# support platforms that do not have a C99 compiler. We add -std=c89\n# explicitly here to make sure we don't accidentally add a C99 feature\n# to the libipa_hbac code\nlibipa_hbac_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/util \\\n    -std=c89 \\\n    $(NULL)\nlibipa_hbac_la_LIBADD = \\\n    $(UNICODE_LIBS)\nlibipa_hbac_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/ipa_hbac/ipa_hbac.exports \\\n    -version-info 1:0:1\n\ndist_noinst_DATA += src/lib/ipa_hbac/ipa_hbac.exports\n\npkgconfig_DATA += src/lib/idmap/sss_idmap.pc\nlibsss_idmap_la_DEPENDENCIES = src/lib/idmap/sss_idmap.exports\nlibsss_idmap_la_SOURCES = \\\n    src/lib/idmap/sss_idmap.c \\\n    src/lib/idmap/sss_idmap_conv.c \\\n    src/util/murmurhash3.c\nlibsss_idmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/idmap/sss_idmap.exports \\\n    -version-info 5:1:5\n\ndist_noinst_DATA += src/lib/idmap/sss_idmap.exports\n\npkgconfig_DATA += src/sss_client/idmap/sss_nss_idmap.pc\nlibsss_nss_idmap_la_DEPENDENCIES = src/sss_client/idmap/sss_nss_idmap.exports\nlibsss_nss_idmap_la_SOURCES = \\\n    src/sss_client/idmap/sss_nss_idmap.c \\\n    src/sss_client/idmap/sss_nss_ex.c \\\n    src/sss_client/idmap/sss_nss_idmap_private.h \\\n    src/sss_client/common.c \\\n    src/sss_client/idmap/common_ex.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nss_group.c \\\n    src/sss_client/nss_mc_initgr.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/strtonum.c \\\n    src/util/murmurhash3.c \\\n    src/util/io.c \\\n    $(NULL)\nlibsss_nss_idmap_la_LIBADD = \\\n    $(LIBCLOCK_GETTIME) \\\n    $(CLIENT_LIBS) \\\n    -lpthread \\\n    $(NULL)\nlibsss_nss_idmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/idmap/sss_nss_idmap.exports \\\n    -version-info 5:0:5\n\ndist_noinst_DATA += src/sss_client/idmap/sss_nss_idmap.exports\n\ninclude_HEADERS = \\\n    src/lib/ipa_hbac/ipa_hbac.h \\\n    src/lib/idmap/sss_idmap.h \\\n    src/sss_client/idmap/sss_nss_idmap.h \\\n    src/lib/certmap/sss_certmap.h \\\n    $(NULL)\n\nif BUILD_LIBWBCLIENT\nlibwbclient_LTLIBRARIES = libwbclient.la\npkgconfig_DATA += src/sss_client/libwbclient/wbclient_sssd.pc\n\nEXTRA_libwbclient_la_DEPENDENCIES = \\\n    src/sss_client/libwbclient/wbclient.exports \\\n    $(NULL)\n\nlibwbclient_la_SOURCES = \\\n    src/sss_client/libwbclient/wbc_guid.c \\\n    src/sss_client/libwbclient/wbc_idmap_common.c \\\n    src/sss_client/libwbclient/wbc_idmap_sssd.c \\\n    src/sss_client/libwbclient/wbclient_common.c \\\n    src/sss_client/libwbclient/wbclient_sssd.c \\\n    src/sss_client/libwbclient/wbc_pam_sssd.c \\\n    src/sss_client/libwbclient/wbc_pwd_sssd.c \\\n    src/sss_client/libwbclient/wbc_sid_common.c \\\n    src/sss_client/libwbclient/wbc_sid_sssd.c \\\n    src/sss_client/libwbclient/wbc_sssd_internal.h \\\n    src/sss_client/libwbclient/wbc_util_common.c \\\n    src/sss_client/libwbclient/wbc_util_sssd.c \\\n    src/sss_client/libwbclient/wbc_ctx_sssd.c \\\n    $(NULL)\nlibwbclient_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    libsss_nss_idmap.la \\\n    $(CLIENT_LIBS) \\\n    $(NULL)\n\nlibwbclient_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/libwbclient/wbclient.exports \\\n    -version-info @libwbclient_version_info@ \\\n    $(NULL)\n\ndist_noinst_DATA += src/sss_client/libwbclient/wbclient.exports \\\n    $(NULL)\n\ninclude_HEADERS += src/sss_client/libwbclient/wbclient_sssd.h\nendif #BUILD_LIBWBCLIENT\n\nif BUILD_IFP\nlib_LTLIBRARIES += libsss_simpleifp.la\npkgconfig_DATA += src/lib/sifp/sss_simpleifp.pc\n\nlibsss_simpleifp_la_SOURCES = \\\n    src/lib/sifp/sss_sifp.c \\\n    src/lib/sifp/sss_sifp_dbus.c \\\n    src/lib/sifp/sss_sifp_attrs.c \\\n    src/lib/sifp/sss_sifp_common.c \\\n    src/lib/sifp/sss_sifp_parser.c \\\n    src/lib/sifp/sss_sifp_utils.c\nlibsss_simpleifp_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/lib/sifp\nlibsss_simpleifp_la_LIBADD = \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS)\nlibsss_simpleifp_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/sifp/sss_simpleifp.exports \\\n    -version-info 1:1:1\n\ndist_noinst_DATA += src/lib/sifp/sss_simpleifp.exports\n\ninclude_HEADERS += \\\n    src/lib/sifp/sss_sifp.h \\\n    src/lib/sifp/sss_sifp_dbus.h\nendif\n\n#########################\n# Systemtap tracing     #\n#########################\n\nif BUILD_SYSTEMTAP\nSYSTEMTAP_PROBES = \\\n    $(srcdir)/src/systemtap/sssd_probes.d \\\n    $(NULL)\n\nsystemtap_tap_DATA = $(builddir)/src/systemtap/sssd.stp\n\ndist_systemtap_tap_DATA = \\\n    $(builddir)/src/systemtap/sssd_functions.stp \\\n    $(NULL)\n\ndist_sssdtapscript_DATA = \\\n    contrib/systemtap/id_perf.stp \\\n    contrib/systemtap/nested_group_perf.stp \\\n    contrib/systemtap/dp_request.stp \\\n    contrib/systemtap/ldap_perf.stp \\\n    $(NULL)\n\nstap_generated_probes.h: $(srcdir)/src/systemtap/sssd_probes.d\n\t$(AM_V_GEN)$(DTRACE) -C -h -s $< -o $@\n\nstap_generated_probes.o: $(srcdir)/src/systemtap/sssd_probes.d stap_generated_probes.h\n\t$(AM_V_GEN)$(DTRACE) -C -G -s $< -o $@\n\nstap_generated_probes.lo: stap_generated_probes.o\n\t$(AM_V_GEN)printf %s\\\\n \\\n\t'# $@ - a libtool object file' \\\n\t'# Generated by libtool (GNU libtool) 2.4' \\\n\t'# Actually generated by Makefile.am, in order to shut up libtool' \\\n\t\"pic_object='$<'\" \\\n\t\"non_pic_object='$<'\" \\\n\t> $@\n\nBUILT_SOURCES += stap_generated_probes.h\n\nCLEANFILES += stap_generated_probes.h \\\n\t      stap_generated_probes.o \\\n\t      stap_generated_probes.lo \\\n\t      $(NULL)\nendif\n\n####################\n# Program Binaries #\n####################\nsssd_SOURCES = \\\n    src/monitor/monitor.c \\\n    src/monitor/monitor_netlink.c \\\n    src/confdb/confdb_setup.c \\\n    src/util/nscd.c \\\n    src/util/inotify.c \\\n    $(NULL)\nsssd_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(INOTIFY_LIBS) \\\n    $(LIBNL_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsssd_nss_SOURCES = \\\n    src/responder/nss/nsssrv.c \\\n    src/responder/nss/nss_cmd.c \\\n    src/responder/nss/nss_enum.c \\\n    src/responder/nss/nss_get_object.c \\\n    src/responder/nss/nss_protocol.c \\\n    src/responder/nss/nss_protocol_pwent.c \\\n    src/responder/nss/nss_protocol_grent.c \\\n    src/responder/nss/nss_protocol_netgr.c \\\n    src/responder/nss/nss_protocol_svcent.c \\\n    src/responder/nss/nss_protocol_hostent.c \\\n    src/responder/nss/nss_protocol_netent.c \\\n    src/responder/nss/nss_protocol_sid.c \\\n    src/responder/nss/nss_utils.c \\\n    src/responder/nss/nss_iface.c \\\n    src/responder/nss/nsssrv_mmap_cache.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_nss_LDADD = \\\n    $(LIBADD_DL) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    libsss_idmap.la \\\n    libsss_cert.la \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsssd_pam_SOURCES = \\\n    src/responder/pam/pam_LOCAL_domain.c \\\n    src/responder/pam/pamsrv.c \\\n    src/responder/pam/pamsrv_cmd.c \\\n    src/responder/pam/pamsrv_p11.c \\\n    src/responder/pam/pamsrv_dp.c \\\n    src/responder/pam/pam_prompting_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    src/responder/pam/pam_helpers.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_pam_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_pam_LDADD = \\\n    $(LIBADD_DL) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_certmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif BUILD_SUDO\nsssd_sudo_SOURCES = \\\n    src/responder/sudo/sudosrv.c \\\n    src/responder/sudo/sudosrv_cmd.c \\\n    src/responder/sudo/sudosrv_get_sudorules.c \\\n    src/responder/sudo/sudosrv_query.c \\\n    src/responder/sudo/sudosrv_dp.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_sudo_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nif BUILD_AUTOFS\nsssd_autofs_SOURCES = \\\n    src/responder/autofs/autofssrv.c \\\n    src/responder/autofs/autofssrv_cmd.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_autofs_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nif BUILD_SSH\nsssd_ssh_SOURCES = \\\n    src/responder/ssh/sshsrv.c \\\n    src/responder/ssh/ssh_cmd.c \\\n    src/responder/ssh/ssh_known_hosts.c \\\n    src/responder/ssh/ssh_protocol.c \\\n    src/responder/ssh/ssh_reply.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_ssh_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_cert.la \\\n    libsss_certmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nsssd_pac_SOURCES = \\\n    src/responder/pac/pacsrv.c \\\n    src/responder/pac/pacsrv_cmd.c \\\n    src/providers/ad/ad_pac_common.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_pac_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS)\nsssd_pac_LDADD = \\\n    $(LIBADD_DL) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif BUILD_IFP\npkglib_LTLIBRARIES += libifp_iface.la\nlibifp_iface_la_SOURCES = \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_async.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_invokers.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.c \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.c \\\n    src/responder/ifp/ifp_iface/ifp_iface.c \\\n    $(NULL)\nlibifp_iface_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus.la \\\n    $(NULL)\nlibifp_iface_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibifp_iface_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libifp_iface_sync.la\nlibifp_iface_sync_la_SOURCES = \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_sync.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.c \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.c \\\n    $(NULL)\nlibifp_iface_sync_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nlibifp_iface_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibifp_iface_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\nsssd_ifp_SOURCES = \\\n    src/responder/ifp/ifpsrv.c \\\n    src/responder/ifp/ifpsrv_cmd.c \\\n    src/responder/ifp/ifp_iface_nodes.c \\\n    src/responder/ifp/ifpsrv_util.c \\\n    src/responder/ifp/ifp_domains.c \\\n    src/responder/ifp/ifp_components.c \\\n    src/responder/ifp/ifp_users.c \\\n    src/responder/ifp/ifp_groups.c \\\n    src/responder/ifp/ifp_cache.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_ifp_CFLAGS = \\\n    $(AM_CFLAGS)\nsssd_ifp_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_cert.la \\\n    libifp_iface.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ndist_dbuspolicy_DATA = \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.conf\ndist_dbusservice_DATA = \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.service\n\nEXTRA_DIST += \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.service.in \\\n    $(NULL)\n\nifp_edit_cmd = $(edit_cmd) \\\n        -e 's|@ifp_exec_cmd[@]|$(ifp_exec_cmd)|g' \\\n        -e 's|@ifp_systemdservice[@]|$(ifp_systemdservice)|g' \\\n        -e 's|@ifp_restart[@]|$(ifp_restart)|g'\n\nifp_replace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(ifp_edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nsrc/responder/ifp/org.freedesktop.sssd.infopipe.service: src/responder/ifp/org.freedesktop.sssd.infopipe.service.in Makefile\n\t$(ifp_replace_script)\n\nendif\n\nif BUILD_SECRETS\nsssd_secrets_SOURCES = \\\n    src/responder/secrets/secsrv.c \\\n    src/responder/secrets/secsrv_cmd.c \\\n    src/responder/secrets/providers.c \\\n    src/responder/secrets/local.c \\\n    src/responder/secrets/proxy.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_iobuf.c \\\n    src/util/tev_curl.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_secrets_LDADD = \\\n    $(LIBADD_DL) \\\n    $(HTTP_PARSER_LIBS) \\\n    $(JANSSON_LIBS) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CURL_LIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_secrets.la \\\n    $(NULL)\nendif\n\nif BUILD_KCM\nsssd_kcm_SOURCES = \\\n    src/responder/kcm/kcm.c \\\n    src/responder/kcm/kcmsrv_cmd.c \\\n    src/responder/kcm/kcmsrv_ccache.c \\\n    src/responder/kcm/kcmsrv_ccache_mem.c \\\n    src/responder/kcm/kcmsrv_ccache_json.c \\\n    src/responder/kcm/kcmsrv_ccache_secdb.c \\\n    src/responder/kcm/kcmsrv_ops.c \\\n    src/responder/kcm/kcmsrv_op_queue.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_kcm_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(UUID_CFLAGS) \\\n    $(CURL_CFLAGS) \\\n    $(JANSSON_CFLAGS) \\\n    $(NULL)\nsssd_kcm_LDADD = \\\n    $(LIBADD_DL) \\\n    $(KRB5_LIBS) \\\n    $(JANSSON_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(UUID_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_secrets.la \\\n    $(NULL)\n\nif BUILD_SECRETS\nsssd_kcm_SOURCES += \\\n    src/responder/kcm/kcmsrv_ccache_secrets.c \\\n    src/util/tev_curl.c \\\n    $(NULL)\nsssd_kcm_LDADD += \\\n    $(CURL_LIBS) \\\n    $(NULL)\nendif\n\nendif\n\nsssd_be_SOURCES = \\\n    src/providers/data_provider_be.c \\\n    src/providers/data_provider_req.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/providers/be_dyndns.c \\\n    src/providers/be_ptask.c \\\n    src/providers/be_refresh.c \\\n    src/providers/data_provider/dp.c \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/providers/data_provider/dp_iface_backend.c \\\n    src/providers/data_provider/dp_iface_failover.c \\\n    src/providers/data_provider/dp_client.c \\\n    src/providers/data_provider/dp_resp_client.c \\\n    src/providers/data_provider/dp_request.c \\\n    src/providers/data_provider/dp_reply_std.c \\\n    src/providers/data_provider/dp_target_sudo.c \\\n    src/providers/data_provider/dp_target_hostid.c \\\n    src/providers/data_provider/dp_target_autofs.c \\\n    src/providers/data_provider/dp_target_subdomains.c \\\n    src/providers/data_provider/dp_target_id.c \\\n    src/providers/data_provider/dp_target_auth.c \\\n    src/providers/data_provider/dp_target_resolver.c \\\n    src/util/session_recording.c \\\n    $(SSSD_FAILOVER_OBJ)\nsssd_be_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nsssd_be_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/providers/sssd_be.exports \\\n    -export-dynamic\nif BUILD_SYSTEMTAP\nsssd_be_LDADD += stap_generated_probes.lo\nendif\n\nif BUILD_PYTHON_BINDINGS\nsss_obfuscate_pythondir = $(sbindir)\ndist_sss_obfuscate_python_SCRIPTS = \\\n    src/tools/sss_obfuscate\nendif\n\n\n\ndist_noinst_DATA += \\\n    src/examples/sssd-example.conf \\\n    src/examples/sssdproxytest \\\n    src/examples/sudo \\\n    src/examples/logrotate \\\n    src/providers/sssd_be.exports \\\n    src/sss_client/COPYING \\\n    src/sss_client/COPYING.LESSER \\\n    src/m4\n\ndist_sssddefaultconf_DATA = \\\n    src/examples/sssd.conf\n\ndist_pamconf_DATA = \\\n    src/examples/sssd-shadowutils\n\n######################\n# Command-line Tools #\n######################\nsss_useradd_SOURCES = \\\n    src/tools/sss_useradd.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_useradd_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\n\nsss_userdel_SOURCES = \\\n    src/tools/sss_userdel.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_userdel_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\nsss_userdel_CFLAGS = \\\n    $(AM_CFLAGS)\n\nsss_groupadd_SOURCES = \\\n    src/tools/sss_groupadd.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_groupadd_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_groupdel_SOURCES = \\\n    src/tools/sss_groupdel.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_groupdel_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_groupdel_CFLAGS = $(AM_CFLAGS)\n\nsss_usermod_SOURCES = \\\n    src/tools/sss_usermod.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_usermod_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\nsss_usermod_CFLAGS = $(AM_CFLAGS)\n\nsss_groupmod_SOURCES = \\\n    src/tools/sss_groupmod.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_groupmod_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_groupmod_CFLAGS = $(AM_CFLAGS)\n\nsss_groupshow_SOURCES = \\\n    src/tools/sss_groupshow.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_groupshow_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_cache_SOURCES = \\\n    src/tools/sss_cache.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_cache_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_cache_CFLAGS = $(AM_CFLAGS)\n\nsss_seed_SOURCES = \\\n    src/tools/sss_seed.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_seed_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_signal_SOURCES = \\\n    src/tools/sss_signal.c \\\n    src/tools/common/sss_process.c\n    $(NULL)\nsss_signal_LDADD = \\\n    libsss_debug.la \\\n    $(NULL)\n\nsss_override_SOURCES = \\\n    src/tools/sss_override.c \\\n    src/tools/common/sss_colondb.c \\\n    $(SSSD_TOOLS_OBJ) \\\n    $(NULL)\nsss_override_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nsss_override_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\n\nsssctl_SOURCES = \\\n    src/tools/sssctl/sssctl.c \\\n    src/tools/sssctl/sssctl_systemd.c \\\n    src/tools/sssctl/sssctl_cache.c \\\n    src/tools/sssctl/sssctl_data.c \\\n    src/tools/sssctl/sssctl_logs.c \\\n    src/tools/sssctl/sssctl_domains.c \\\n    src/tools/sssctl/sssctl_config.c \\\n    src/tools/sssctl/sssctl_user_checks.c \\\n    src/tools/sssctl/sssctl_access_report.c \\\n    src/tools/sssctl/sssctl_cert.c \\\n    $(SSSD_TOOLS_OBJ) \\\n    $(NULL)\nsssctl_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PAM_LIBS) \\\n    $(PAM_MISC_LIBS) \\\n    $(LIBADD_DL) \\\n    libsss_certmap.la \\\n    libifp_iface_sync.la \\\n    libsss_iface_sync.la \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nsssctl_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\n\nif BUILD_SUDO\nsss_sudo_cli_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sudo/sss_sudo.c \\\n    src/sss_client/sudo/sss_sudo_response.c \\\n    src/sss_client/sudo_testcli/sudo_testcli.c\nsss_sudo_cli_CFLAGS = $(AM_CFLAGS)\nsss_sudo_cli_LDADD = $(CLIENT_LIBS)\nendif\n\nif BUILD_SSH\nsss_ssh_authorizedkeys_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/ssh/sss_ssh_client.c \\\n    src/sss_client/ssh/sss_ssh_authorizedkeys.c\nsss_ssh_authorizedkeys_CFLAGS = $(AM_CFLAGS)\nsss_ssh_authorizedkeys_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) $(TALLOC_LIBS) $(POPT_LIBS)\n\nsss_ssh_knownhostsproxy_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/ssh/sss_ssh_client.c \\\n    src/sss_client/ssh/sss_ssh_knownhostsproxy.c\nsss_ssh_knownhostsproxy_CFLAGS = $(AM_CFLAGS)\nsss_ssh_knownhostsproxy_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) $(TALLOC_LIBS) $(POPT_LIBS)\nendif\n\nif HAVE_SYSTEMD_UNIT\nsssd_check_socket_activated_responders_SOURCES = \\\n    src/tools/sssd_check_socket_activated_responders.c \\\n    $(NULL)\nsssd_check_socket_activated_responders_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_check_socket_activated_responders_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LTLIBINTL) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(NULL)\nendif\n\npkgconfig_DATA += src/lib/certmap/sss_certmap.pc\nlibsss_certmap_la_DEPENDENCIES = src/lib/certmap/sss_certmap.exports\nlibsss_certmap_la_SOURCES = \\\n    src/lib/certmap/sss_certmap.c \\\n    src/lib/certmap/sss_certmap_attr_names.c \\\n    src/lib/certmap/sss_certmap_krb5_match.c \\\n    src/lib/certmap/sss_certmap_ldap_mapping.c \\\n    src/lib/certmap/sss_cert_content_common.c \\\n    src/util/util_ext.c \\\n    src/util/cert/cert_common.c \\\n    $(NULL)\nlibsss_certmap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(NULL)\nlibsss_certmap_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\nlibsss_certmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/certmap/sss_certmap.exports \\\n    -version-info 1:0:1\n\nif HAVE_NSS\nlibsss_certmap_la_SOURCES += \\\n    src/lib/certmap/sss_cert_content_nss.c \\\n    src/util/crypto/nss/nss_base64.c \\\n    src/util/cert/nss/cert.c \\\n    src/util/crypto/nss/nss_util.c \\\n    $(NULL)\nlibsss_certmap_la_CFLAGS += $(NSS_CFLAGS)\nlibsss_certmap_la_LIBADD += $(NSS_LIBS)\nelse\nlibsss_certmap_la_SOURCES += \\\n    src/lib/certmap/sss_cert_content_crypto.c \\\n    src/util/crypto/libcrypto/crypto_base64.c \\\n    src/util/cert/libcrypto/cert.c \\\n    $(NULL)\n\nlibsss_certmap_la_CFLAGS += $(CRYPTO_CFLAGS)\nlibsss_certmap_la_LIBADD += $(CRYPTO_LIBS)\nendif\n\ndist_noinst_DATA += src/lib/certmap/sss_certmap.exports\ndist_noinst_HEADERS += src/lib/certmap/sss_certmap_int.h\n\n#################\n# Feature Tests #\n#################\nTESTS_ENVIRONMENT = LDB_MODULES_PATH=$(abs_top_builddir)/ldb_mod_test_dir \\\n                    SSS_TEST_DIR=$(TEST_DIR) \\\n                    ABS_TOP_SRCDIR=$(abs_top_srcdir) \\\n                    $(AUX_TESTS_ENVIRONMENT)\n\nif VALGRIND_ENABLED\n@VALGRIND_CHECK_RULES@\nVALGRIND_SUPPRESSIONS_FILES = $(abs_top_srcdir)/contrib/ci/sssd.supp\nendif\n\nldb_mod_test_dir: memberof.la\n\t$(MKDIR_P) $(builddir)/ldb_mod_test_dir\n\tcp $(builddir)/.libs/memberof.so $(builddir)/ldb_mod_test_dir\n\ncheck_LTLIBRARIES = \\\n    libsss_test_common.la\n\nlibsss_test_common_la_SOURCES = \\\n    src/tests/common_tev.c \\\n    src/tests/common_dom.c \\\n    src/tests/leak_check.c \\\n    src/tests/common.c\nlibsss_test_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibsss_test_common_la_LIBADD += stap_generated_probes.lo\nendif\n\nif HAVE_CHECK\nlibsss_test_common_la_SOURCES += \\\n    src/tests/common_check.c\n\ncheck_LTLIBRARIES += \\\n    libdlopen_test_providers.la \\\n    libsss_nss_idmap_tests.la \\\n    $(NULL)\n\nif BUILD_SAMBA\ncheck_LTLIBRARIES += \\\n    libsss_ad_tests.la \\\n    libdlopen_test_winbind_idmap.la \\\n    $(NULL)\nendif\n\n# libdlopen_test_providers is a helper library to provide missing symbols for\n# dlopen_tests. It is mainly used for the backend modules but is used as well\n# to provide __wrap_sss_nss_make_request_timeout needed make make dlopen_tests\n# pass for libsss_nss_idmap_tests.\nlibdlopen_test_providers_la_SOURCES = \\\n    $(sssd_be_SOURCES) \\\n    src/tests/cmocka/wrap_sss_nss_make_request_timeout.c \\\n    $(NULL)\nlibdlopen_test_providers_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    -DUNIT_TESTING\nlibdlopen_test_providers_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibdlopen_test_providers_la_LIBADD += stap_generated_probes.lo\nendif\nlibdlopen_test_providers_la_LDFLAGS = \\\n    -shared \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/providers/sssd_be.exports \\\n    -rpath $(abs_top_builddir) \\\n    -export-dynamic\n\nlibsss_nss_idmap_tests_la_SOURCES = $(libsss_nss_idmap_la_SOURCES)\nlibsss_nss_idmap_tests_la_LIBADD = $(libsss_nss_idmap_la_LIBADD)\nlibsss_nss_idmap_tests_la_LDFLAGS = \\\n    $(libsss_nss_idmap_la_LDFLAGS) \\\n    -shared \\\n    -rpath $(libdir) \\\n    -Wl,-wrap,sss_nss_make_request_timeout \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/idmap/sss_nss_idmap.unit_tests\n\ndist_noinst_DATA += src/sss_client/idmap/sss_nss_idmap.unit_tests\n\nlibsss_ad_tests_la_SOURCES = $(libsss_ad_la_SOURCES)\nlibsss_ad_tests_la_CFLAGS = $(libsss_ad_la_CFLAGS)\nlibsss_ad_tests_la_LIBADD = \\\n    $(libsss_ad_la_LIBADD) \\\n    libdlopen_test_providers.la \\\n    $(NULL)\nlibsss_ad_tests_la_LDFLAGS = \\\n    -shared \\\n    -rpath $(abs_top_builddir) \\\n    $(NULL)\n\ndlopen_tests_SOURCES = \\\n    src/tests/dlopen-tests.c\ndlopen_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ndlopen_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CHECK_LIBS)\n\nEXTRA_sysdb_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsysdb_tests_SOURCES = \\\n    src/tests/sysdb-tests.c\nsysdb_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsysdb_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nEXTRA_sysdb_ssh_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsysdb_ssh_tests_SOURCES = \\\n    src/tests/sysdb_ssh-tests.c\nsysdb_ssh_tests_CFLAGS = \\\n    $(AM_CFLAGS)\\\n    $(CHECK_CFLAGS)\nsysdb_ssh_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nstrtonum_tests_SOURCES = \\\n    src/tests/strtonum-tests.c \\\n    src/util/strtonum.c\nstrtonum_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nstrtonum_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nkrb5_utils_tests_SOURCES = \\\n    src/tests/krb5_utils-tests.c \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/util/become_user.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nkrb5_utils_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(CHECK_CFLAGS)\nkrb5_utils_tests_LDADD = \\\n    $(SSSD_LIBS)\\\n    $(CARES_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\n\ncheck_and_open_tests_SOURCES = \\\n    src/tests/check_and_open-tests.c \\\n    src/util/check_and_open.c\ncheck_and_open_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ncheck_and_open_tests_LDADD = \\\n    libsss_debug.la \\\n    $(CHECK_LIBS) \\\n    libsss_test_common.la\n\nFILES_TESTS_LIBS = \\\n    $(CHECK_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la\nif BUILD_SELINUX\n    FILES_TESTS_LIBS += $(SELINUX_LIBS)\nendif\nif BUILD_SEMANAGE\n    FILES_TESTS_LIBS += $(SEMANAGE_LIBS)\nendif\n\nif HAVE_INOTIFY\nfiles_tests_SOURCES = \\\n    src/tests/files-tests.c \\\n    src/util/check_and_open.c \\\n    src/util/atomic_io.c \\\n    src/util/selinux.c \\\n    src/util/files.c\nfiles_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nfiles_tests_LDADD = \\\n    $(FILES_TESTS_LIBS) \\\n    libsss_test_common.la \\\n    $(SSSD_INTERNAL_LTLIBS)\nendif   # HAVE_INOTIFY\n\nSSSD_RESOLV_TESTS_OBJ = \\\n    $(SSSD_RESOLV_OBJ)\n\nresolv_tests_SOURCES = \\\n    src/tests/resolv-tests.c \\\n    src/tests/common.c \\\n    $(SSSD_RESOLV_TESTS_OBJ)\nresolv_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    -DBUILD_TXT\nresolv_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(CARES_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nrefcount_tests_SOURCES = \\\n    src/tests/refcount-tests.c \\\n    $(NULL)\nrefcount_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nrefcount_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nfail_over_tests_SOURCES = \\\n    src/tests/fail_over-tests.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nfail_over_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nfail_over_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(CARES_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nfind_uid_tests_SOURCES = \\\n    src/tests/find_uid-tests.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/strtonum.c\nfind_uid_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS)\nfind_uid_tests_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    libsss_test_common.la\n\nauth_tests_SOURCES = \\\n    src/tests/auth-tests.c\nauth_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nauth_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nipa_ldap_opt_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    src/tests/ipa_ldap_opt-tests.c\nipa_ldap_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nipa_ldap_opt_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(OPENLDAP_LIBS) \\\n    libsss_test_common.la\n\nad_ldap_opt_tests_SOURCES = \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/tests/ad_ldap_opt-tests.c\nad_ldap_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nad_ldap_opt_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la\n\nutil_tests_SOURCES = \\\n    src/tests/util-tests.c \\\n    $(NULL)\nutil_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    $(NULL)\nutil_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nsafe_format_tests_SOURCES = \\\n    src/tests/safe-format-tests.c\nsafe_format_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsafe_format_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ndebug_tests_SOURCES = \\\n    src/tests/debug-tests.c \\\n    src/tests/common.c\ndebug_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ndebug_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_debug.la\n\ncrypto_tests_SOURCES = \\\n    src/tests/crypto-tests.c\ncrypto_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ncrypto_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nipa_hbac_tests_SOURCES = \\\n    src/tests/ipa_hbac-tests.c\nipa_hbac_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nipa_hbac_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_test_common.la \\\n    libipa_hbac.la\n\nsss_idmap_tests_SOURCES = \\\n    src/tests/sss_idmap-tests.c\nsss_idmap_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsss_idmap_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la\n\nresponder_socket_access_tests_SOURCES = \\\n    src/tests/responder_socket_access-tests.c \\\n    src/responder/common/negcache_files.c \\\n    src/responder/common/negcache.c \\\n    src/util/nss_dl_load.c \\\n    src/responder/common/responder_common.c \\\n    src/responder/common/responder_packet.c \\\n    src/responder/common/responder_cmd.c \\\n    src/responder/common/cache_req/cache_req_domain.c \\\n    src/util/session_recording.c \\\n    $(SSSD_RESPONDER_IFACE_OBJ) \\\n    $(NULL)\nresponder_socket_access_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nresponder_socket_access_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nstress_tests_SOURCES = \\\n    src/tests/stress-tests.c\nstress_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    libsss_test_common.la\n\nkrb5_child_test_SOURCES = \\\n    src/tests/krb5_child-test.c \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_child_handler.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/util/become_user.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nkrb5_child_test_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DKRB5_CHILD_DIR=\\\"$(builddir)\\\" \\\n    $(KRB5_CFLAGS) \\\n    $(CHECK_CFLAGS)\nkrb5_child_test_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_ssh_client_SOURCES = \\\n    src/tests/test_ssh_client.c \\\n    $(NULL)\ntest_ssh_client_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DSSH_CLIENT_DIR=\\\"$(abs_top_builddir)\\\" \\\n    $(NULL)\ntest_ssh_client_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SSSD_LIBS) \\\n    $(NULL)\n\ntest_sbus_message_SOURCES = \\\n    src/tests/cmocka/sbus/test_sbus_message.c \\\n    $(NULL)\ntest_sbus_message_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sbus_message_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sbus_opath_SOURCES = \\\n    src/tests/cmocka/sbus/test_sbus_opath.c \\\n    $(NULL)\ntest_sbus_opath_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sbus_opath_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif HAVE_CMOCKA\n\nTEST_MOCK_RESP_OBJ = \\\n     src/tests/cmocka/common_mock_resp.c \\\n     src/tests/cmocka/common_mock_resp_dp.c \\\n     src/responder/common/responder_packet.c \\\n     src/responder/common/responder_cmd.c \\\n     src/responder/common/negcache_files.c \\\n     src/responder/common/negcache.c \\\n     src/util/nss_dl_load.c \\\n     src/responder/common/responder_common.c \\\n     src/responder/common/responder_utils.c \\\n     src/util/session_recording.c \\\n     $(SSSD_CACHE_REQ_OBJ) \\\n     $(SSSD_RESPONDER_IFACE_OBJ) \\\n     $(NULL)\n\nTEST_MOCK_PROVIDER_OBJ = \\\n     src/util/sss_sockets.c \\\n     src/util/sss_ldap.c \\\n     src/providers/data_provider_opts.c \\\n     src/providers/ldap/ldap_opts.c \\\n     src/providers/ldap/ldap_options.c \\\n     src/providers/ldap/sdap_domain.c \\\n     src/providers/ldap/sdap.c \\\n     src/providers/ldap/sdap_utils.c \\\n     src/providers/ldap/sdap_range.c \\\n     src/tests/cmocka/common_mock_sdap.c \\\n     src/tests/cmocka/common_mock_sysdb_objects.c\n\nEXTRA_nss_srv_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\nnss_srv_tests_SOURCES = \\\n     $(TEST_MOCK_RESP_OBJ) \\\n     src/tests/cmocka/test_nss_srv.c \\\n     src/responder/nss/nss_cmd.c \\\n     src/responder/nss/nss_enum.c \\\n     src/responder/nss/nss_get_object.c \\\n     src/responder/nss/nss_protocol.c \\\n     src/responder/nss/nss_protocol_pwent.c \\\n     src/responder/nss/nss_protocol_grent.c \\\n     src/responder/nss/nss_protocol_netgr.c \\\n     src/responder/nss/nss_protocol_svcent.c \\\n     src/responder/nss/nss_protocol_hostent.c \\\n     src/responder/nss/nss_protocol_netent.c \\\n     src/responder/nss/nss_protocol_sid.c \\\n     src/responder/nss/nss_utils.c \\\n     src/responder/nss/nsssrv_mmap_cache.c\nnss_srv_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nnss_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_ncache_check_user \\\n    -Wl,-wrap,sss_ncache_check_upn \\\n    -Wl,-wrap,sss_ncache_check_uid \\\n    -Wl,-wrap,sss_ncache_check_sid \\\n    -Wl,-wrap,sss_ncache_check_cert \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done\nnss_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_cert.la \\\n    libsss_idmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_pam_srv_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES) \\\n    $(NULL)\nEXTRA_pam_srv_tests_DEPENDENCIES += p11_child\npam_srv_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_pam_srv.c \\\n    src/sss_client/pam_message.c \\\n    src/responder/pam/pamsrv_cmd.c \\\n    src/responder/pam/pamsrv_p11.c \\\n    src/responder/pam/pam_helpers.c \\\n    src/responder/pam/pamsrv_dp.c \\\n    src/responder/pam/pam_LOCAL_domain.c \\\n    src/responder/pam/pam_prompting_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    $(NULL)\npam_srv_tests_CFLAGS = \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(AM_CFLAGS) \\\n    $(NULL)\npam_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done \\\n    -Wl,-wrap,pam_dp_send_req \\\n    $(NULL)\npam_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la \\\n    libsss_certmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_ssh_srv_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES) \\\n    $(NULL)\nEXTRA_ssh_srv_tests_DEPENDENCIES += p11_child\nssh_srv_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_ssh_srv.c \\\n    src/responder/ssh/ssh_cmd.c \\\n    src/responder/ssh/ssh_known_hosts.c \\\n    src/responder/ssh/ssh_protocol.c \\\n    src/responder/ssh/ssh_reply.c \\\n    src/util/cert/cert_common_p11_child.c \\\n    $(NULL)\nssh_srv_tests_CFLAGS = \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nssh_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done \\\n    -Wl,-wrap,ssh_dp_send_req \\\n    $(NULL)\nssh_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_responder_get_domains_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\nresponder_get_domains_tests_SOURCES = \\\n     $(SSSD_RESPONDER_OBJ) \\\n     src/tests/cmocka/test_responder_common.c \\\n     src/tests/cmocka/common_mock_resp.c\nresponder_get_domains_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nresponder_get_domains_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_parse_name_for_domains \\\n    -Wl,-wrap,sss_ncache_reset_repopulate_permanent\nresponder_get_domains_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nconfig_check_tests_SOURCES = \\\n    src/tests/cmocka/test_config_check.c \\\n    $(NULL)\nconfig_check_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nconfig_check_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_find_uid_SOURCES = \\\n    src/tests/cmocka/test_find_uid.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/strtonum.c\ntest_find_uid_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS)\ntest_find_uid_LDADD = \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    libsss_debug.la\n\ntest_io_SOURCES = \\\n    src/tests/cmocka/test_io.c \\\n    src/util/io.c \\\n    src/tests/common.c\ntest_io_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_io_LDADD = \\\n    $(CMOCKA_LIBS)\n\nEXTRA_test_negcache_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\ntest_negcache_SOURCES = \\\n    $(SSSD_RESPONDER_OBJ) \\\n    src/tests/cmocka/common_mock_resp.c \\\n    src/tests/cmocka/test_negcache.c \\\n    src/tests/cmocka/test_negcache_2.c\ntest_negcache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS)\ntest_negcache_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_authtok_SOURCES = \\\n    src/tests/cmocka/test_authtok.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\ntest_authtok_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(NULL)\ntest_authtok_LDADD = \\\n    $(TALLOC_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_test_common.la \\\n    libsss_debug.la \\\n    $(NULL)\n\ntest_prompt_config_SOURCES = \\\n    src/tests/cmocka/test_prompt_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    $(NULL)\ntest_prompt_config_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\ntest_prompt_config_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\n\nsss_nss_idmap_tests_SOURCES = \\\n    src/tests/cmocka/sss_nss_idmap-tests.c\nsss_nss_idmap_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nsss_nss_idmap_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    libsss_nss_idmap_tests.la \\\n    $(NULL)\n\ndeskprofile_utils_tests_SOURCES = \\\n    src/tests/cmocka/test_deskprofile_utils.c \\\n    src/providers/ipa/ipa_deskprofile_rules_util.c \\\n    src/providers/ipa/ipa_rules_common.c\ndeskprofile_utils_tests_CFLAGS = \\\n    $(AM_CFLAGS)\ndeskprofile_utils_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nEXTRA_dyndns_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\ndyndns_tests_SOURCES = \\\n     $(SSSD_RESOLV_OBJ) \\\n     src/tests/cmocka/common_mock_be.c \\\n     src/tests/cmocka/test_dyndns.c \\\n     src/providers/data_provider_opts.c\ndyndns_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DDYNDNS_TIMEOUT=2\ndyndns_tests_LDFLAGS = \\\n    -Wl,-wrap,execv \\\n    -Wl,-wrap,getifaddrs \\\n    -Wl,-wrap,freeifaddrs\ndyndns_tests_LDADD = \\\n    $(CARES_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ndomain_resolution_order_tests_SOURCES = \\\n\tsrc/tests/cmocka/test_domain_resolution_order.c \\\n\tsrc/responder/common/cache_req/cache_req_domain.c\ndomain_resolution_order_tests_CFLAGS = \\\n\t$(AM_CFLAGS)\ndomain_resolution_order_tests_LDADD = \\\n\t$(CMOCKA_LIBS) \\\n\t$(SSSD_INTERNAL_LTLIBS) \\\n\tlibsss_test_common.la\n\nfqnames_tests_SOURCES = \\\n    src/tests/cmocka/test_fqnames.c\nfqnames_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nfqnames_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nnestedgroups_tests_SOURCES = \\\n    $(TEST_MOCK_PROVIDER_OBJ) \\\n    src/providers/ldap/sdap_idmap.c \\\n    src/tests/cmocka/test_nested_groups.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/providers/ldap/sdap_async_nested_groups.c \\\n    src/providers/ldap/sdap_ad_groups.c \\\n    src/providers/ipa/ipa_dn.c \\\n    $(NULL)\nnestedgroups_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DEXTERNAL_MEMBERS_CHUNK=1 \\\n    $(NULL)\nnestedgroups_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_idmap.la \\\n    libsss_test_common.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nnestedgroups_tests_LDADD += stap_generated_probes.lo\nendif\n\ntest_sss_idmap_SOURCES = \\\n    src/tests/cmocka/test_sss_idmap.c\ntest_sss_idmap_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sss_idmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_ipa_idmap_SOURCES = \\\n    src/tests/cmocka/test_ipa_idmap.c \\\n    src/providers/ipa/ipa_idmap.c\ntest_ipa_idmap_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_ipa_idmap_LDFLAGS = \\\n    -Wl,-wrap,sysdb_get_ranges\ntest_ipa_idmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_utils_SOURCES = \\\n    src/tests/cmocka/test_utils.c \\\n    src/tests/cmocka/test_string_utils.c \\\n    src/tests/cmocka/test_sss_ptr_hash.c \\\n    src/p11_child/p11_child_common_utils.c \\\n    $(NULL)\nif BUILD_SSH\ntest_utils_SOURCES += src/tests/cmocka/test_sss_ssh.c\nendif\ntest_utils_CFLAGS = \\\n    $(AM_CFLAGS)\nif HAVE_NSS\ntest_utils_CFLAGS += \\\n    $(NSS_CFLAGS) \\\n    $(NULL)\nelse\ntest_utils_CFLAGS += \\\n    $(P11_KIT_CFLAGS) \\\n    $(NULL)\nendif\ntest_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_search_bases_SOURCES = \\\n    src/tests/cmocka/test_search_bases.c\ntest_search_bases_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ldap_auth_SOURCES = \\\n    src/tests/cmocka/test_ldap_auth.c \\\n    src/tests/cmocka/test_expire_common.c \\\n    $(NULL)\ntest_ldap_auth_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ldap_id_cleanup_SOURCES = \\\n    src/tests/cmocka/test_ldap_id_cleanup.c \\\n    $(NULL)\ntest_ldap_id_cleanup_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sdap_access_SOURCES = \\\n    src/tests/cmocka/test_sdap_access.c \\\n    src/tests/cmocka/test_expire_common.c \\\n    $(NULL)\ntest_sdap_access_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sdap_certmap_SOURCES = \\\n    src/tests/cmocka/test_sdap_certmap.c \\\n    src/providers/ldap/sdap_certmap.c \\\n    $(NULL)\ntest_sdap_certmap_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\ntest_sdap_certmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_certmap.la \\\n    $(NULL)\n\nad_access_filter_tests_SOURCES = \\\n    src/tests/cmocka/test_ad_access_filter.c\nad_access_filter_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nad_gpo_tests_SOURCES = \\\n    src/tests/cmocka/test_ad_gpo.c\nad_gpo_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\nad_gpo_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NDR_NBT_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_idmap.la \\\n    libsss_krb5_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nad_common_tests_SOURCES = \\\n    $(libsss_krb5_common_la_SOURCES) \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_ad_common.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_domain_info.c \\\n    src/providers/ldap/sdap_async_initgroups_ad.c \\\n    $(NULL)\nad_common_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nad_common_tests_LDFLAGS = \\\n    -Wl,-wrap,sdap_set_sasl_options \\\n    -Wl,-wrap,krb5_kt_default \\\n    $(NULL)\nad_common_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_idmap.la \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ndp_opt_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/tests/cmocka/test_dp_opts.c\ndp_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS)\ndp_opt_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nsdap_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    src/tests/cmocka/test_sdap.c \\\n    $(NULL)\nsdap_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsdap_tests_LDFLAGS = \\\n    -Wl,-wrap,ldap_set_option \\\n    -Wl,-wrap,ldap_get_dn \\\n    -Wl,-wrap,ldap_memfree \\\n    -Wl,-wrap,ldap_get_values_len \\\n    -Wl,-wrap,ldap_value_free_len \\\n    -Wl,-wrap,ldap_first_attribute \\\n    -Wl,-wrap,ldap_next_attribute \\\n    $(NULL)\nsdap_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(OPENLDAP_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nif BUILD_IFP\nifp_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_ifp.c \\\n    src/responder/ifp/ifpsrv_cmd.c \\\n    src/responder/ifp/ifpsrv_util.c \\\n    $(NULL)\nifp_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nifp_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsss_sifp_tests_SOURCES = \\\n    src/tests/cmocka/test_sss_sifp.c \\\n    src/lib/sifp/sss_sifp_attrs.c \\\n    src/lib/sifp/sss_sifp_common.c \\\n    src/lib/sifp/sss_sifp_parser.c \\\n    src/lib/sifp/sss_sifp_utils.c \\\n    src/lib/sifp/sss_sifp_dbus.c \\\n    src/lib/sifp/sss_sifp.c\nsss_sifp_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/lib/sifp\nsss_sifp_tests_LDFLAGS = \\\n    -Wl,-wrap,dbus_bus_get \\\n    -Wl,-wrap,dbus_connection_send_with_reply_and_block\nsss_sifp_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\nendif # BUILD_IFP\n\ntest_sysdb_views_SOURCES = \\\n    src/tests/cmocka/test_sysdb_views.c \\\n    src/providers/ipa/ipa_utils.c \\\n    $(NULL)\ntest_sysdb_views_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_views_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_ts_cache_SOURCES = \\\n    src/tests/cmocka/test_sysdb_ts_cache.c \\\n    src/providers/ipa/ipa_utils.c \\\n    $(NULL)\ntest_sysdb_ts_cache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_ts_cache_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_subdomains_SOURCES = \\\n    src/tests/cmocka/test_sysdb_subdomains.c \\\n    $(NULL)\ntest_sysdb_subdomains_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_subdomains_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_certmap_SOURCES = \\\n    src/tests/cmocka/test_sysdb_certmap.c \\\n    $(NULL)\ntest_sysdb_certmap_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_certmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_sudo_SOURCES = \\\n    src/tests/cmocka/test_sysdb_sudo.c \\\n    $(NULL)\ntest_sysdb_sudo_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_sudo_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_utils_SOURCES = \\\n    src/tests/cmocka/test_sysdb_utils.c \\\n    $(NULL)\ntest_sysdb_utils_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_domain_resolution_order_SOURCES = \\\n    src/tests/cmocka/test_sysdb_domain_resolution_order.c \\\n    $(NULL)\ntest_sysdb_domain_resolution_order_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_domain_resolution_order_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_wbc_calls_SOURCES = \\\n    src/tests/cmocka/test_wbc_calls.c \\\n    src/sss_client/libwbclient/wbc_sid_sssd.c \\\n    src/sss_client/libwbclient/wbclient_common.c \\\n    src/sss_client/libwbclient/wbc_sid_common.c \\\n    src/sss_client/common.c \\\n    $(NULL)\ntest_wbc_calls_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_wbc_calls_LDFLAGS = \\\n    -Wl,-wrap,sss_nss_getnamebysid \\\n    $(NULL)\ntest_wbc_calls_LDADD = \\\n    $(CLIENT_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_nss_idmap.la \\\n    $(NULL)\n\ntest_be_ptask_SOURCES = \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/test_be_ptask.c \\\n    src/providers/be_ptask.c \\\n    $(NULL)\ntest_be_ptask_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_be_ptask_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_copy_ccache_SOURCES = \\\n    src/tests/cmocka/test_copy_ccache.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_copy_ccache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_copy_ccache_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_copy_keytab_SOURCES = \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_copy_keytab.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_copy_keytab_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_copy_keytab_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ndummy_child_SOURCES = \\\n    src/tests/cmocka/dummy_child.c \\\n    $(NULL)\ndummy_child_LDADD = \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\n\ntest_child_common_SOURCES = \\\n    src/tests/cmocka/test_child_common.c \\\n    src/util/child_common.c \\\n    src/util/signal.c \\\n    src/util/atomic_io.c \\\n    src/util/util_errors.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\ntest_child_common_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DCHILD_DIR=\\\"$(builddir)\\\" \\\n    $(NULL)\ntest_child_common_LDFLAGS = \\\n    -Wl,-wrap,child_io_destructor \\\n    $(NULL)\ntest_child_common_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    $(NULL)\n\nresponder_cache_req_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_responder_cache_req.c \\\n    $(NULL)\nresponder_cache_req_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nresponder_cache_req_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_dp_get_account_send \\\n    $(NULL)\nresponder_cache_req_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif HAVE_LIBRESOLV\ntest_resolv_fake_SOURCES = \\\n    src/tests/cmocka/test_resolv_fake.c \\\n    src/resolv/async_resolv.c \\\n    $(NULL)\ntest_resolv_fake_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_resolv_fake_LDFLAGS = \\\n    -Wl,-wrap,ares_query \\\n    $(NULL)\ntest_resolv_fake_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CARES_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(RESOLV_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    $(NULL)\nendif # HAVE_LIBRESOLV\n\ntest_fo_srv_SOURCES = \\\n    src/tests/cmocka/test_fo_srv.c \\\n    src/providers/fail_over.c \\\n    src/providers/fail_over_srv.c \\\n    $(NULL)\ntest_fo_srv_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_fo_srv_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CARES_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sdap_initgr_SOURCES = \\\n    src/tests/cmocka/common_mock_sdap.c \\\n    src/tests/cmocka/common_mock_sysdb_objects.c \\\n    src/tests/cmocka/test_sdap_initgr.c \\\n    $(NULL)\ntest_sdap_initgr_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\ntest_sdap_initgr_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ad_subdom_SOURCES = \\\n    src/tests/cmocka/test_ad_subdomains.c \\\n    $(NULL)\ntest_ad_subdom_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\ntest_ad_subdom_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_idmap.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_krb5_common.la \\\n    $(NULL)\n\ntest_ipa_subdom_util_SOURCES = \\\n    src/tests/cmocka/test_ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    $(NULL)\ntest_ipa_subdom_util_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_ipa_subdom_util_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_ipa_subdom_server_SOURCES = \\\n    $(libsss_krb5_common_la_SOURCES) \\\n    src/tests/cmocka/common_mock_sdap.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_opts.c \\\n    $(NULL)\ntest_ipa_subdom_server_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DIPA_TRUST_KEYTAB_DIR=TEST_DIR\\\"/tp_test_ipa_subdom_server-test_ipa_subdomains_server\\\" \\\n    $(NULL)\ntest_ipa_subdom_server_LDFLAGS = \\\n    -Wl,-wrap,krb5_kt_default \\\n    -Wl,-wrap,execle \\\n    -Wl,-wrap,execve \\\n    -Wl,-wrap,rename \\\n    -Wl,-wrap,sss_unique_filename \\\n    $(NULL)\ntest_ipa_subdom_server_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_tools_colondb_SOURCES = \\\n    src/tests/cmocka/test_tools_colondb.c \\\n    src/tools/common/sss_colondb.c \\\n    $(NULL)\ntest_tools_colondb_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_tools_colondb_LDFLAGS = \\\n    $(NULL)\ntest_tools_colondb_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(POPT_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_krb5_wait_queue_SOURCES = \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/test_krb5_wait_queue.c \\\n    src/providers/krb5/krb5_wait_queue.c \\\n    $(NULL)\ntest_krb5_wait_queue_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_krb5_wait_queue_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_cert_utils_SOURCES = \\\n    src/tests/cmocka/test_cert_utils.c \\\n    src/util/cert/cert_common_p11_child.c \\\n    $(NULL)\ntest_cert_utils_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(CRYPTO_CFLAGS) \\\n    $(NULL)\ntest_cert_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CRYPTO_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_cert.la \\\n    libsss_crypt.la \\\n    $(NULL)\n\ntest_data_provider_be_SOURCES = \\\n    src/providers/data_provider_be.c \\\n    src/tests/cmocka/test_data_provider_be.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_data_provider_be_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_data_provider_be_LDFLAGS = \\\n    -Wl,-wrap,_tevent_add_timer \\\n    $(NULL)\ntest_data_provider_be_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_dp_request_SOURCES = \\\n    src/providers/data_provider/dp_request.c \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/tests/cmocka/data_provider/mock_dp.c \\\n    src/tests/cmocka/data_provider/test_dp_request.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_dp_request_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_dp_request_LDFLAGS = \\\n    -Wl,-wrap,be_is_offline \\\n    $(NULL)\ntest_dp_request_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\ntest_dp_request_LDADD += stap_generated_probes.lo\nendif\n\ntest_dp_builtin_SOURCES = \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/tests/cmocka/data_provider/mock_dp.c \\\n    src/tests/cmocka/data_provider/test_dp_builtin.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_dp_builtin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_dp_builtin_LDFLAGS = \\\n    $(NULL)\ntest_dp_builtin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_ipa_dn_SOURCES = \\\n    src/providers/ipa/ipa_dn.c \\\n    src/tests/cmocka/test_ipa_dn.c \\\n    $(NULL)\ntest_ipa_dn_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_iobuf_SOURCES = \\\n    src/util/sss_iobuf.c \\\n    src/tests/cmocka/test_iobuf.c \\\n    $(NULL)\ntest_iobuf_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_iobuf_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(NULL)\n\ntest_confdb_SOURCES = \\\n    src/tests/cmocka/confdb/test_confdb.c \\\n    $(NULL)\ntest_confdb_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_confdb_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nEXTRA_simple_access_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsimple_access_tests_SOURCES = \\\n    src/tests/cmocka/test_simple_access.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/providers/simple/simple_access.c \\\n    src/providers/simple/simple_access_check.c \\\n    $(NULL)\nsimple_access_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsimple_access_tests_LDFLAGS = \\\n    $(NULL)\nsimple_access_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nkrb5_common_test_SOURCES = \\\n    src/tests/cmocka/test_krb5_common.c \\\n    $(NULL)\nkrb5_common_test_CFLAGS = \\\n    $(KRB5_CFLAGS) \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nkrb5_common_test_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_krb5_common.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_inotify_SOURCES = \\\n    src/util/inotify.c \\\n    src/tests/cmocka/test_inotify.c \\\n    $(NULL)\ntest_inotify_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_inotify_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nsss_certmap_test_SOURCES = \\\n    src/tests/cmocka/test_certmap.c \\\n    src/lib/certmap/sss_certmap_attr_names.c \\\n    $(NULL)\nsss_certmap_test_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NSS_CFLAGS) \\\n    -I$(abs_builddir)/src \\\n    $(NULL)\nsss_certmap_test_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(NSS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_certmap.la \\\n    $(NULL)\n\ntest_sssd_krb5_locator_plugin_SOURCES = \\\n    src/tests/cmocka/test_sssd_krb5_locator_plugin.c \\\n    src/krb5_plugin/sssd_krb5_locator_plugin.c \\\n    $(NULL)\ntest_sssd_krb5_locator_plugin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    -DTEST_PUBCONF_PATH=\\\"$(abs_builddir)/src/tests/cmocka/pubconf\\\" \\\n    $(NULL)\ntest_sssd_krb5_locator_plugin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nif BUILD_KCM\ntest_kcm_json_SOURCES = \\\n    src/tests/cmocka/test_kcm_json_marshalling.c \\\n    src/responder/kcm/kcmsrv_ccache_json.c \\\n    src/responder/kcm/kcmsrv_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_kcm_json_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(UUID_CFLAGS) \\\n    $(NULL)\ntest_kcm_json_LDADD = \\\n    $(JANSSON_LIBS) \\\n    $(UUID_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_kcm_queue_SOURCES = \\\n    src/tests/cmocka/test_kcm_queue.c \\\n    src/responder/kcm/kcmsrv_op_queue.c \\\n    $(NULL)\ntest_kcm_queue_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_kcm_queue_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nendif # BUILD_KCM\n\nendif # HAVE_CMOCKA\n\nnoinst_PROGRAMS =\nif BUILD_SUDO\nnoinst_PROGRAMS += sss_sudo_cli\nendif\nif BUILD_AUTOFS\nnoinst_PROGRAMS += autofs_test_client\nendif\nif BUILD_WITH_LIBCURL\nnoinst_PROGRAMS += tcurl-test-tool\nendif\nif BUILD_PAC_RESPONDER\n    noinst_PROGRAMS += sssd_pac_test_client\nendif\n\nif BUILD_AUTOFS\nautofs_test_client_SOURCES = \\\n    src/sss_client/autofs/autofs_test_client.c \\\n    src/sss_client/autofs/sss_autofs.c \\\n    src/sss_client/common.c\nautofs_test_client_CFLAGS = $(AM_CFLAGS)\nautofs_test_client_LDADD = -lpopt $(CLIENT_LIBS)\nendif\n\nif BUILD_WITH_LIBCURL\ntcurl_test_tool_SOURCES = \\\n    src/tests/tcurl_test_tool.c \\\n    src/util/tev_curl.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntcurl_test_tool_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CURL_CFLAGS) \\\n    $(NULL)\ntcurl_test_tool_LDADD = \\\n    $(CURL_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\ntest_sssd_krb5_localauth_plugin_SOURCES = \\\n    src/tests/cmocka/test_sssd_krb5_localauth_plugin.c \\\n    src/krb5_plugin/sssd_krb5_localauth_plugin.c \\\n    $(NULL)\ntest_sssd_krb5_localauth_plugin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sssd_krb5_localauth_plugin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(NULL)\nendif\n\n#####################\n# Integration tests #\n#####################\n\nintgcheck-prepare:\n\tset -e; \\\n\trm -Rf intg; \\\n\t$(MKDIR_P) intg/bld; \\\n\t: Use /hopefully/ short prefix to keep D-Bus socket path short; \\\n\tprefix=`mktemp --tmpdir --directory sssd-intg.XXXXXXXX`; \\\n\t$(LN_S) \"$$prefix\" intg/pfx; \\\n\tcd intg/bld; \\\n\t$(abs_top_srcdir)/configure \\\n\t    --prefix=\"$$prefix\" \\\n\t    --with-ldb-lib-dir=\"$$prefix\"/lib/ldb \\\n\t    --enable-intgcheck-reqs \\\n\t    --without-semanage \\\n\t    --with-secrets \\\n\t    --with-session-recording-shell=/bin/false \\\n\t    --enable-local-provider \\\n\t    --enable-files-domain \\\n\t    $(INTGCHECK_CONFIGURE_FLAGS) \\\n\t    CFLAGS=\"-O2 -g $$CFLAGS\"; \\\n\t$(MAKE) $(AM_MAKEFLAGS) ; \\\n\t$(MAKE) $(AM_MAKEFLAGS) test_ssh_client; \\\n\t: Force single-thread install to workaround concurrency issues; \\\n\t$(MAKE) $(AM_MAKEFLAGS) -j1 install; \\\n\t: Remove .la files from LDB module directory to avoid loader warnings; \\\n\trm \"$$prefix\"/lib/ldb/*.la; \\\n\tcd ../..\n\nintgcheck-run:\n\tset -e; \\\n\tif [ ! -d intg/pfx ]; then $(MAKE) intgcheck-prepare; fi; \\\n\tcd intg/bld; \\\n\t$(MAKE) $(AM_MAKEFLAGS) -C src/tests/intg intgcheck-installed; \\\n\tcd ../..\n\nintgcheck-clean:\n\tset -e; \\\n\tprefix=`readlink -e intg/pfx`; \\\n\trm -Rf \"$$prefix\" intg\n\nintgcheck:\n\t$(MAKE) intgcheck-prepare\n\t$(MAKE) intgcheck-run\n\t$(MAKE) intgcheck-clean\n\n####################\n# Client Libraries #\n####################\n\nnsslib_LTLIBRARIES = libnss_sss.la\nlibnss_sss_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_passwd.c \\\n    src/sss_client/nss_group.c \\\n    src/sss_client/nss_netgroup.c \\\n    src/sss_client/nss_services.c \\\n    src/sss_client/nss_hosts.c \\\n    src/sss_client/nss_ipnetworks.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/nss_compat.h \\\n    src/sss_client/nss_common.h \\\n    src/sss_client/common_private.h \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/io.c \\\n    src/util/murmurhash3.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nss_mc_initgr.c \\\n    src/sss_client/nss_mc.h\nlibnss_sss_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibnss_sss_la_LDFLAGS = \\\n    -module \\\n    -version-info 2:0:0 \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_nss.exports\n\nif BUILD_NFS_IDMAP\nnfslib_LTLIBRARIES = sss.la\nsss_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/io.c \\\n    src/util/murmurhash3.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nfs/sss_nfs_client.c \\\n    $(NULL)\nsss_la_CFLAGS = $(AM_CFLAGS)\nsss_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(NFSIDMAP_LIBS) \\\n    $(NULL)\nsss_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    $(NULL)\nendif\n\npamlib_LTLIBRARIES = pam_sss.la\npam_sss_la_SOURCES = \\\n    src/sss_client/pam_sss.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    src/sss_client/pam_message.c \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/util/atomic_io.c \\\n    src/util/authtok-utils.c \\\n    src/sss_client/sss_pam_macros.h \\\n    src/sss_client/sss_pam_compat.h\n\npam_sss_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(PAM_LIBS)\npam_sss_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_pam.exports\n\nif BUILD_SUDO\n\nlibsss_sudo_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/sudo/sss_sudo_response.c \\\n    src/sss_client/sudo/sss_sudo.c \\\n    src/sss_client/sudo/sss_sudo.h \\\n    src/sss_client/sudo/sss_sudo_private.h\nlibsss_sudo_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibsss_sudo_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_sudo.exports \\\n    -module \\\n    -avoid-version\n\nsudolib_LTLIBRARIES = libsss_sudo.la\n\nendif\n\nif BUILD_AUTOFS\nautofslib_LTLIBRARIES = libsss_autofs.la\nlibsss_autofs_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/autofs/sss_autofs.c \\\n    src/sss_client/autofs/sss_autofs_private.h\n\nlibsss_autofs_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibsss_autofs_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/autofs/sss_autofs.exports\nendif\n\ndist_noinst_DATA += \\\n    src/sss_client/sss_nss.exports \\\n    src/sss_client/sss_pam.exports\nif BUILD_SUDO\ndist_noinst_DATA += src/sss_client/sss_sudo.exports\nendif\n\nif BUILD_AUTOFS\ndist_noinst_DATA += src/sss_client/autofs/sss_autofs.exports\nendif\n\n####################\n# Plugin Libraries #\n####################\n\n# libsss_krb5_common must be installed before libsss_ldap_common\n# because libtool tries to relink libsss_ldap_common when installing\n# libsss_ldap_common and therefore make distcheck fails\npkglib_LTLIBRARIES += libsss_krb5_common.la\npkglib_LTLIBRARIES += libsss_ldap_common.la\nlibsss_ldap_common_la_SOURCES = \\\n    src/providers/ldap/ldap_id.c \\\n    src/providers/ldap/ldap_id_enum.c \\\n    src/providers/ldap/ldap_resolver_enum.c \\\n    src/providers/ldap/ldap_resolver_cleanup.c \\\n    src/providers/ldap/sdap_async_enum.c \\\n    src/providers/ldap/sdap_async_resolver_enum.c \\\n    src/providers/ldap/ldap_id_cleanup.c \\\n    src/providers/ldap/ldap_id_netgroup.c \\\n    src/providers/ldap/ldap_id_services.c \\\n    src/providers/ldap/ldap_auth.c \\\n    src/providers/ldap/ldap_common.c \\\n    src/providers/ldap/ldap_options.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ldap/sdap_access.c \\\n    src/providers/ldap/sdap_iphost.c \\\n    src/providers/ldap/sdap_ipnetwork.c \\\n    src/providers/ldap/sdap_async.c \\\n    src/providers/ldap/sdap_async_users.c \\\n    src/providers/ldap/sdap_async_groups.c \\\n    src/providers/ldap/sdap_async_nested_groups.c \\\n    src/providers/ldap/sdap_async_groups_ad.c \\\n    src/providers/ldap/sdap_async_initgroups.c \\\n    src/providers/ldap/sdap_async_initgroups_ad.c \\\n    src/providers/ldap/sdap_async_connection.c \\\n    src/providers/ldap/sdap_async_netgroups.c \\\n    src/providers/ldap/sdap_async_hosts.c \\\n    src/providers/ldap/sdap_async_services.c \\\n    src/providers/ldap/sdap_async_iphost.c \\\n    src/providers/ldap/sdap_async_ipnetwork.c \\\n    src/providers/ldap/sdap_online_check.c \\\n    src/providers/ldap/sdap_ad_groups.c \\\n    src/providers/ldap/sdap_child_helpers.c \\\n    src/providers/ldap/sdap_fd_events.c \\\n    src/providers/ldap/sdap_hostid.h \\\n    src/providers/ldap/sdap_id_op.c \\\n    src/providers/ldap/sdap_certmap.c \\\n    src/providers/ldap/sdap_idmap.c \\\n    src/providers/ldap/sdap_idmap.h \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/sdap_reinit.c \\\n    src/providers/ldap/sdap_dyndns.c \\\n    src/providers/ldap/sdap_refresh.c \\\n    src/providers/ldap/sdap_utils.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/sdap_ops.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ipa/ipa_dn.c \\\n    src/util/user_info_msg.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    $(NULL)\nlibsss_ldap_common_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(NULL)\nlibsss_ldap_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    libsss_krb5_common.la \\\n    libsss_idmap.la \\\n    libsss_certmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_ldap_common_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibsss_ldap_common_la_LIBADD += stap_generated_probes.lo\nendif\n\nif BUILD_SSH\nlibsss_ldap_common_la_SOURCES += src/providers/ldap/sdap_hostid.c\nendif\n\nif BUILD_SUDO\nlibsss_ldap_common_la_SOURCES += \\\n    src/providers/ldap/sdap_async_sudo.c \\\n    src/providers/ldap/sdap_async_sudo_hostinfo.c \\\n    src/providers/ldap/sdap_sudo_refresh.c \\\n    src/providers/ldap/sdap_sudo_shared.c \\\n    src/providers/ldap/sdap_sudo.c\nendif\n\nif BUILD_AUTOFS\nlibsss_ldap_common_la_SOURCES += \\\n    src/providers/ldap/sdap_autofs.c \\\n    src/providers/ldap/sdap_async_autofs.c\nendif\n\nlibsss_krb5_common_la_SOURCES = \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_delayed_online_authentication.c \\\n    src/providers/krb5/krb5_renew_tgt.c \\\n    src/providers/krb5/krb5_wait_queue.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/providers/krb5/krb5_auth.c \\\n    src/providers/krb5/krb5_access.c \\\n    src/providers/krb5/krb5_child_handler.c \\\n    src/providers/krb5/krb5_init_shared.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/become_user.c \\\n    $(NULL)\nlibsss_krb5_common_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_krb5_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_krb5_common_la_LDFLAGS = \\\n    -avoid-version\n\nlibsss_ldap_la_SOURCES = \\\n    src/providers/ldap/ldap_init.c \\\n    src/providers/ldap/ldap_access.c\nlibsss_ldap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS)\nlibsss_ldap_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la\nlibsss_ldap_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n\nlibsss_proxy_la_SOURCES = \\\n    src/providers/proxy/proxy_init.c \\\n    src/providers/proxy/proxy_client.c \\\n    src/providers/proxy/proxy_id.c \\\n    src/providers/proxy/proxy_netgroup.c \\\n    src/providers/proxy/proxy_services.c \\\n    src/providers/proxy/proxy_hosts.c \\\n    src/providers/proxy/proxy_ipnetworks.c \\\n    src/providers/proxy/proxy_auth.c \\\n    src//util/nss_dl_load.c \\\n    $(NULL)\nlibsss_proxy_la_CFLAGS = \\\n    $(AM_CFLAGS)\nlibsss_proxy_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(PAM_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nlibsss_proxy_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_files_la_SOURCES = \\\n    src/providers/files/files_init.c \\\n    src/providers/files/files_id.c \\\n    src/providers/files/files_auth.c \\\n    src/providers/files/files_certmap.c \\\n    src/providers/files/files_ops.c \\\n    src/util/inotify.c \\\n    $(NULL)\nlibsss_files_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nlibsss_files_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_files_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nlibsss_simple_la_SOURCES = \\\n    src/providers/simple/simple_access_check.c \\\n    src/providers/simple/simple_access.c\nlibsss_simple_la_CFLAGS = \\\n    $(AM_CFLAGS)\nlibsss_simple_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_simple_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_krb5_la_SOURCES = \\\n    src/providers/krb5/krb5_init.c\nlibsss_krb5_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_krb5_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_krb5_common.la\nlibsss_krb5_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_ipa_la_SOURCES = \\\n    src/providers/ipa/ipa_init.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/providers/ipa/ipa_common.c \\\n    src/providers/ipa/ipa_config.c \\\n    src/providers/ipa/ipa_id.c \\\n    src/providers/ipa/ipa_netgroups.c \\\n    src/providers/ipa/ipa_auth.c \\\n    src/providers/ipa/ipa_access.c \\\n    src/providers/ipa/ipa_dyndns.c \\\n    src/providers/ipa/ipa_hosts.c \\\n    src/providers/ipa/ipa_subdomains.c \\\n    src/providers/ipa/ipa_subdomains_id.c \\\n    src/providers/ipa/ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_subdomains_ext_groups.c \\\n    src/providers/ipa/ipa_views.c \\\n    src/providers/ipa/ipa_utils.c \\\n    src/providers/ipa/ipa_s2n_exop.c \\\n    src/providers/ipa/ipa_hbac_hosts.c \\\n    src/providers/ipa/ipa_hbac_private.h \\\n    src/providers/ipa/ipa_hbac_rules.c \\\n    src/providers/ipa/ipa_hbac_rules.h \\\n    src/providers/ipa/ipa_hbac_services.c \\\n    src/providers/ipa/ipa_hbac_users.c \\\n    src/providers/ipa/ipa_hbac_common.c \\\n    src/providers/ipa/ipa_rules_common.c \\\n    src/providers/ipa/ipa_rules_common.h \\\n    src/providers/ipa/ipa_session.c \\\n    src/providers/ipa/ipa_deskprofile_private.h \\\n    src/providers/ipa/ipa_deskprofile_config.c \\\n    src/providers/ipa/ipa_deskprofile_config.h \\\n    src/providers/ipa/ipa_deskprofile_rules.c \\\n    src/providers/ipa/ipa_deskprofile_rules.h \\\n    src/providers/ipa/ipa_deskprofile_rules_util.c \\\n    src/providers/ipa/ipa_deskprofile_rules_util.h \\\n    src/providers/ipa/ipa_srv.c \\\n    src/providers/ipa/ipa_idmap.c \\\n    src/providers/ipa/ipa_dn.c \\\n    src/providers/ipa/ipa_refresh.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_common.c \\\n    src/providers/ad/ad_dyndns.c \\\n    src/providers/ad/ad_id.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_srv.c \\\n    src/providers/ad/ad_domain_info.c\nlibsss_ipa_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_ipa_la_LIBADD = \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la \\\n    libipa_hbac.la \\\n    libsss_idmap.la \\\n    libsss_semanage.la \\\n    $(NULL)\nlibsss_ipa_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nif BUILD_AUTOFS\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_autofs.c\nendif\n\nif BUILD_SUDO\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_sudo.c \\\n    src/providers/ipa/ipa_sudo_refresh.c \\\n    src/providers/ipa/ipa_sudo_conversion.c \\\n    src/providers/ipa/ipa_sudo_async.c\nendif\n\nif BUILD_SEMANAGE\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_selinux.c \\\n    src/providers/ipa/ipa_selinux_maps.c\nendif\n\nif BUILD_SSH\nlibsss_ipa_la_SOURCES += src/providers/ipa/ipa_hostid.c\nendif\n\n\nlibsss_ad_la_SOURCES = \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_common.c \\\n    src/providers/ad/ad_init.c \\\n    src/providers/ad/ad_dyndns.c \\\n    src/providers/ad/ad_machine_pw_renewal.c \\\n    src/providers/ad/ad_id.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_access.c \\\n    src/providers/ad/ad_gpo.c \\\n    src/providers/ad/ad_gpo_ndr.c \\\n    src/providers/ad/ad_srv.c \\\n    src/providers/ad/ad_subdomains.c \\\n    src/providers/ad/ad_domain_info.c \\\n    src/providers/ad/ad_refresh.c \\\n    src/providers/ad/ad_resolver.c \\\n    $(NULL)\n\n\nif BUILD_SUDO\nlibsss_ad_la_SOURCES += \\\n    src/providers/ad/ad_sudo.c\nendif\n\nif BUILD_AUTOFS\nlibsss_ad_la_SOURCES += \\\n    src/providers/ad/ad_autofs.c\nendif\n\nlibsss_ad_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(SASL_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nlibsss_ad_la_LIBADD = \\\n    $(LDB_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SASL_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la \\\n    libsss_idmap.la \\\n    $(NULL)\nlibsss_ad_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nkrb5_child_SOURCES = \\\n    src/providers/krb5/krb5_child.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_pam_data.c \\\n    src/util/user_info_msg.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/memory.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c \\\n    src/util/strtonum.c \\\n    src/util/become_user.c \\\n    src/util/util_errors.c \\\n    src/sss_client/common.c \\\n    $(NULL)\nkrb5_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS) \\\n    $(NULL)\nkrb5_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CLIENT_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    $(NULL)\n\nldap_child_SOURCES = \\\n    src/providers/ldap/ldap_child.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/atomic_io.c \\\n    src/util/memory.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c \\\n    src/util/become_user.c \\\n    src/util/util_errors.c \\\n    $(NULL)\nldap_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS)\nldap_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS)\n\nif BUILD_SEMANAGE\nselinux_child_SOURCES = \\\n    src/providers/ipa/selinux_child.c \\\n    src/util/sss_semanage.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/util_errors.c\n    $(NULL)\nselinux_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\nselinux_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SEMANAGE_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(NULL)\nendif\n\ngpo_child_SOURCES = \\\n    src/providers/ad/ad_gpo_child.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c\ngpo_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(INI_CONFIG_CFLAGS) \\\n    $(SMBCLIENT_CFLAGS)\ngpo_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(SMBCLIENT_LIBS)\n\nproxy_child_SOURCES = \\\n    src/providers/proxy/proxy_child.c \\\n    $(NULL)\nproxy_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS)\nproxy_child_LDADD = \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\np11_child_SOURCES = \\\n    src/p11_child/p11_child_common.c \\\n    src/p11_child/p11_child_common_utils.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\nif HAVE_NSS\np11_child_SOURCES += src/p11_child/p11_child_nss.c\nelse\np11_child_SOURCES += src/p11_child/p11_child_openssl.c\nendif\n\np11_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\nif HAVE_NSS\np11_child_CFLAGS += \\\n    $(NSS_CFLAGS) \\\n    $(NULL)\nelse\np11_child_CFLAGS += \\\n    $(P11_KIT_CFLAGS) \\\n    $(CRYPTO_CFLAGS) \\\n    $(SSL_CFLAGS) \\\n    $(NULL)\nendif\n\np11_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_crypt.la \\\n    $(NULL)\nif HAVE_NSS\np11_child_LDADD += \\\n    $(NSS_LIBS) \\\n    $(NULL)\nelse\np11_child_LDADD += \\\n    $(P11_KIT_LIBS) \\\n    $(CRYPTO_LIBS) \\\n    $(SSL_LIBS) \\\n    $(NULL)\nendif\n\nmemberof_la_SOURCES = \\\n    src/ldb_modules/memberof.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\nmemberof_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nmemberof_la_LIBADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(NULL)\nmemberof_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nif BUILD_KRB5_LOCATOR_PLUGIN\nsssd_krb5_locator_plugin_la_SOURCES = \\\n    src/krb5_plugin/sssd_krb5_locator_plugin.c \\\n    src/util/atomic_io.c\nsssd_krb5_locator_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_krb5_locator_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nsssd_krb5_localauth_plugin_la_SOURCES = \\\n    src/krb5_plugin/sssd_krb5_localauth_plugin.c \\\n    src/util/murmurhash3.c \\\n    src/util/io.c \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_passwd.c\nsssd_krb5_localauth_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_krb5_localauth_plugin_la_LIBADD = \\\n    $(KRB5_LIBS)\nsssd_krb5_localauth_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nsssd_pac_plugin_la_SOURCES = \\\n    src/sss_client/sssd_pac.c \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/krb5_authdata_int.h\nsssd_pac_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_pac_plugin_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(KRB5_LIBS)\nsssd_pac_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nsssd_pac_test_client_SOURCES = \\\n    src/sss_client/sss_pac_responder_client.c \\\n    src/sss_client/common.c \\\n    src/util/strtonum.c \\\n    $(NULL)\nsssd_pac_test_client_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_pac_test_client_LDADD = \\\n    $(CLIENT_LIBS) \\\n    -lpthread \\\n    $(NULL)\n\n# python[23] bindings\npysss_la_SOURCES = \\\n    $(SSSD_TOOLS_OBJ) \\\n    src/python/pysss.c\npysss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_la_SOURCES = $(pysss_la_SOURCES)\n_py2sss_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_la_LIBADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PYTHON_BINDINGS_LIBS) \\\n    $(PYTHON2_LIBS)\n_py2sss_la_LDFLAGS = $(pysss_la_LDFLAGS)\n\n_py3sss_la_SOURCES = $(pysss_la_SOURCES)\n_py3sss_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_la_LIBADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PYTHON_BINDINGS_LIBS) \\\n    $(PYTHON3_LIBS)\n_py3sss_la_LDFLAGS = $(pysss_la_LDFLAGS)\n\n\npyhbac_la_SOURCES = \\\n    src/python/pyhbac.c \\\n    src/util/sss_python.c\npyhbac_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2hbac_la_SOURCES = $(pyhbac_la_SOURCES)\n_py2hbac_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2hbac_la_LIBADD = \\\n    $(PYTHON2_LIBS) \\\n    libipa_hbac.la\n_py2hbac_la_LDFLAGS = $(pyhbac_la_LDFLAGS)\n\n_py3hbac_la_SOURCES = $(pyhbac_la_SOURCES)\n_py3hbac_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3hbac_la_LIBADD = \\\n    $(PYTHON3_LIBS) \\\n    libipa_hbac.la\n_py3hbac_la_LDFLAGS = $(pyhbac_la_LDFLAGS)\n\n\npysss_murmur_la_SOURCES = \\\n    src/python/pysss_murmur.c \\\n    src/util/murmurhash3.c\npysss_murmur_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_murmur_la_SOURCES = $(pysss_murmur_la_SOURCES)\n_py2sss_murmur_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_murmur_la_LIBADD = \\\n    $(PYTHON2_LIBS)\n_py2sss_murmur_la_LDFLAGS = $(pysss_murmur_la_LDFLAGS)\n\n_py3sss_murmur_la_SOURCES = $(pysss_murmur_la_SOURCES)\n_py3sss_murmur_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_murmur_la_LIBADD = \\\n    $(PYTHON3_LIBS)\n_py3sss_murmur_la_LDFLAGS = $(pysss_murmur_la_LDFLAGS)\n\n\npysss_nss_idmap_la_SOURCES = \\\n    src/python/pysss_nss_idmap.c\npysss_nss_idmap_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_nss_idmap_la_SOURCES = $(pysss_nss_idmap_la_SOURCES)\n_py2sss_nss_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_nss_idmap_la_LIBADD = \\\n    $(PYTHON2_LIBS) \\\n    libsss_nss_idmap.la\n_py2sss_nss_idmap_la_LDFLAGS = $(pysss_nss_idmap_la_LDFLAGS)\n\n_py3sss_nss_idmap_la_SOURCES = $(pysss_nss_idmap_la_SOURCES)\n_py3sss_nss_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_nss_idmap_la_LIBADD = \\\n    $(PYTHON3_LIBS) \\\n    libsss_nss_idmap.la\n_py3sss_nss_idmap_la_LDFLAGS = $(pysss_nss_idmap_la_LDFLAGS)\n# end of python[23] bindings\n\nif BUILD_CIFS_IDMAP_PLUGIN\ncifs_idmap_sss_la_SOURCES = \\\n    src/lib/cifs_idmap_sss/cifs_idmap_sss.c\ncifs_idmap_sss_la_LIBADD = \\\n    libsss_idmap.la \\\n    libsss_nss_idmap.la\ncifs_idmap_sss_la_CFLAGS = \\\n    $(AM_CFLAGS)\ncifs_idmap_sss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nif BUILD_SAMBA\nwinbind_idmap_sss_la_SOURCES = \\\n    src/lib/winbind_idmap_sss/winbind_idmap_sss.c \\\n    src/util/util_sss_idmap.c \\\n    $(NULL)\nwinbind_idmap_sss_la_LIBADD = \\\n    libsss_idmap.la \\\n    libsss_nss_idmap.la \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\nwinbind_idmap_sss_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nwinbind_idmap_sss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nlibdlopen_test_winbind_idmap_la_SOURCES = \\\n    src/lib/winbind_idmap_sss/libdlopen-test-winbind-idmap.c \\\n    $(NULL)\nlibdlopen_test_winbind_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nlibdlopen_test_winbind_idmap_la_LDFLAGS = \\\n    -shared \\\n    -avoid-version \\\n    -rpath $(abs_top_builddir) \\\n    -export-dynamic\n    $(NULL)\nendif\n\n################\n# TRANSLATIONS #\n################\nupdate-po:\nif HAVE_MANPAGES\n\t$(MAKE) -C src/man update-po\nendif\n\t$(MAKE) -C po update-po\n\n#######################\n# Installation Extras #\n#######################\n\ninit_SCRIPTS =\nsystemdunit_DATA =\nsystemdconf_DATA =\nif HAVE_SYSTEMD_UNIT\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd.service \\\n        src/sysv/systemd/sssd-nss.socket \\\n        src/sysv/systemd/sssd-nss.service \\\n        src/sysv/systemd/sssd-pam.socket \\\n        src/sysv/systemd/sssd-pam-priv.socket \\\n        src/sysv/systemd/sssd-pam.service \\\n        $(NULL)\nif BUILD_AUTOFS\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-autofs.socket \\\n        src/sysv/systemd/sssd-autofs.service \\\n        $(NULL)\nendif\nif BUILD_IFP\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-ifp.service \\\n        $(NULL)\nendif\nif BUILD_PAC_RESPONDER\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-pac.socket \\\n        src/sysv/systemd/sssd-pac.service \\\n        $(NULL)\nendif\nif BUILD_SECRETS\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-secrets.socket \\\n        src/sysv/systemd/sssd-secrets.service \\\n        $(NULL)\nendif\nif BUILD_SSH\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-ssh.socket \\\n        src/sysv/systemd/sssd-ssh.service \\\n        $(NULL)\nendif\nif BUILD_SUDO\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-sudo.socket \\\n        src/sysv/systemd/sssd-sudo.service \\\n        $(NULL)\nendif\nif BUILD_KCM\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-kcm.socket \\\n        src/sysv/systemd/sssd-kcm.service \\\n        $(NULL)\nendif\nelse\nif HAVE_SUSE\n    init_SCRIPTS += \\\n        src/sysv/SUSE/sssd\nelse\nif HAVE_GENTOO\n    init_SCRIPTS += \\\n        src/sysv/gentoo/sssd\nelse\n    init_SCRIPTS += \\\n        src/sysv/sssd\nendif\nendif\nendif\n\n\ndist_sssddata_DATA = \\\n    src/config/etc/sssd.api.conf \\\n    src/config/cfg_rules.ini \\\n    $(NULL)\ndist_sssdapiplugin_DATA = \\\n    src/config/etc/sssd.api.d/sssd-ipa.conf \\\n    src/config/etc/sssd.api.d/sssd-ad.conf \\\n    src/config/etc/sssd.api.d/sssd-krb5.conf \\\n    src/config/etc/sssd.api.d/sssd-ldap.conf \\\n    src/config/etc/sssd.api.d/sssd-local.conf \\\n    src/config/etc/sssd.api.d/sssd-proxy.conf \\\n    src/config/etc/sssd.api.d/sssd-simple.conf \\\n    src/config/etc/sssd.api.d/sssd-files.conf\n\nedit_cmd = $(SED) \\\n        -e 's|@sbindir[@]|$(sbindir)|g' \\\n        -e 's|@environment_file[@]|$(environment_file)|g' \\\n        -e 's|@localstatedir[@]|$(localstatedir)|g' \\\n        -e 's|@runstatedir[@]|$(runstatedir)|g' \\\n        -e 's|@pidpath[@]|$(pidpath)|g' \\\n        -e 's|@logpath[@]|$(logpath)|g' \\\n        -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n        -e 's|@pipepath[@]|$(pipepath)|g' \\\n        -e 's|@prefix[@]|$(prefix)|g' \\\n        -e 's|@SSSD_USER[@]|$(SSSD_USER)|g'\n\nreplace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nEXTRA_DIST += \\\n    src/sysv/systemd/sssd.service.in \\\n    src/sysv/systemd/sssd-nss.socket.in \\\n    src/sysv/systemd/sssd-nss.service.in \\\n    src/sysv/systemd/sssd-pam.socket.in \\\n    src/sysv/systemd/sssd-pam-priv.socket.in \\\n    src/sysv/systemd/sssd-pam.service.in \\\n    src/sysv/systemd/sssd-secrets.socket.in \\\n    src/sysv/systemd/sssd-secrets.service.in \\\n    src/sysv/systemd/sssd-autofs.socket.in \\\n    src/sysv/systemd/sssd-autofs.service.in \\\n    src/sysv/systemd/sssd-ifp.service.in \\\n    src/sysv/systemd/sssd-pac.socket.in \\\n    src/sysv/systemd/sssd-pac.service.in \\\n    src/sysv/systemd/sssd-ssh.socket.in \\\n    src/sysv/systemd/sssd-ssh.service.in \\\n    src/sysv/systemd/sssd-sudo.socket.in \\\n    src/sysv/systemd/sssd-sudo.service.in \\\n    src/sysv/systemd/sssd-kcm.socket.in \\\n    src/sysv/systemd/sssd-kcm.service.in \\\n    $(NULL)\n\nsrc/sysv/systemd/sssd.service: src/sysv/systemd/sssd.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-nss.socket: src/sysv/systemd/sssd-nss.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-nss.service: src/sysv/systemd/sssd-nss.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam.socket: src/sysv/systemd/sssd-pam.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam-priv.socket: src/sysv/systemd/sssd-pam-priv.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam.service: src/sysv/systemd/sssd-pam.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nif BUILD_SECRETS\nsrc/sysv/systemd/sssd-secrets.socket: src/sysv/systemd/sssd-secrets.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-secrets.service: src/sysv/systemd/sssd-secrets.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_AUTOFS\nsrc/sysv/systemd/sssd-autofs.socket: src/sysv/systemd/sssd-autofs.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-autofs.service: src/sysv/systemd/sssd-autofs.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_IFP\nsrc/sysv/systemd/sssd-ifp.service: src/sysv/systemd/sssd-ifp.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(ifp_replace_script)\nendif\n\nif BUILD_PAC_RESPONDER\nsrc/sysv/systemd/sssd-pac.socket: src/sysv/systemd/sssd-pac.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pac.service: src/sysv/systemd/sssd-pac.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_SSH\nsrc/sysv/systemd/sssd-ssh.socket: src/sysv/systemd/sssd-ssh.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-ssh.service: src/sysv/systemd/sssd-ssh.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_SUDO\nsrc/sysv/systemd/sssd-sudo.socket: src/sysv/systemd/sssd-sudo.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-sudo.service: src/sysv/systemd/sssd-sudo.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_KCM\nif BUILD_SECRETS\nkcm_socket_requires = Requires=sssd-secrets.socket\nelse\nkcm_socket_requires =\nendif\n\nkcm_edit_cmd = $(edit_cmd) \\\n        -e 's|@kcm_socket_requires[@]|$(kcm_socket_requires)|g'\n\nkcm_replace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(kcm_edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nsrc/sysv/systemd/sssd-kcm.socket: src/sysv/systemd/sssd-kcm.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(kcm_replace_script)\n\nsrc/sysv/systemd/sssd-kcm.service: src/sysv/systemd/sssd-kcm.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nEXTRA_DIST += \\\n    src/tools/wrappers/sss_debuglevel.in \\\n    $(NULL)\n\nsrc/tools/wrappers/sss_debuglevel: src/tools/wrappers/sss_debuglevel.in Makefile\n\t@$(MKDIR_P) src/tools/wrappers/\n\t$(replace_script)\n\nSSSD_USER_DIRS = \\\n    $(DESTDIR)$(dbpath) \\\n    $(DESTDIR)$(keytabdir) \\\n    $(DESTDIR)$(mcpath) \\\n    $(DESTDIR)$(pipepath) \\\n    $(DESTDIR)$(pubconfpath) \\\n    $(DESTDIR)$(pubconfpath)/krb5.include.d \\\n    $(DESTDIR)$(gpocachepath) \\\n    $(DESTDIR)$(sssdconfdir) \\\n    $(DESTDIR)$(sssdconfdir)/conf.d \\\n    $(DESTDIR)$(sssdconfdir)/pki \\\n    $(DESTDIR)$(sssddefaultconfdir) \\\n    $(DESTDIR)$(logpath) \\\n    $(DESTDIR)$(deskprofilepath) \\\n    $(NULL)\n\ninstallsssddirs::\n\t$(MKDIR_P) \\\n    $(DESTDIR)$(includedir) \\\n    $(DESTDIR)$(libdir) \\\n    $(DESTDIR)$(bindir) \\\n    $(DESTDIR)$(sbindir) \\\n    $(DESTDIR)$(mandir) \\\n    $(DESTDIR)$(pidpath) \\\n    $(DESTDIR)$(pluginpath) \\\n    $(DESTDIR)$(libdir)/ldb \\\n    $(DESTDIR)$(dbuspolicydir) \\\n    $(DESTDIR)$(dbusservicedir) \\\n    $(DESTDIR)$(sssdlibdir) \\\n    $(DESTDIR)$(pkglibdir) \\\n    $(DESTDIR)$(sssddatadir) \\\n    $(DESTDIR)$(sudolibdir) \\\n    $(DESTDIR)$(autofslibdir) \\\n    $(DESTDIR)$(pipepath)/private \\\n    $(SSSD_USER_DIRS) \\\n    $(NULL);\nif SSSD_USER\n\t-chown $(SSSD_USER):$(SSSD_USER) $(SSSD_USER_DIRS)\n\t-chown $(SSSD_USER) $(DESTDIR)$(pipepath)/private\nendif\n\t$(INSTALL) -d -m 0700 $(DESTDIR)$(dbpath) $(DESTDIR)$(logpath) \\\n\t    $(DESTDIR)$(keytabdir) \\\n\t    $(NULL)\n\t$(INSTALL) -d -m 0750 $(DESTDIR)$(pipepath)/private\n\t$(INSTALL) -d -m 0755 $(DESTDIR)$(mcpath) $(DESTDIR)$(pipepath) \\\n            $(DESTDIR)$(pubconfpath) \\\n            $(DESTDIR)$(pubconfpath)/krb5.include.d $(DESTDIR)$(gpocachepath)\n\t$(INSTALL) -d -m 0711 $(DESTDIR)$(sssdconfdir) \\\n                          $(DESTDIR)$(sssdconfdir)/conf.d \\\n                          $(DESTDIR)$(sssdconfdir)/pki\nif BUILD_WITH_LIBSECRET\n\t$(MKDIR_P) $(DESTDIR)$(secdbpath)\nendif\n\nif HAVE_DOXYGEN\ndocs:\n\t$(DOXYGEN) src/doxy.config\n\t$(DOXYGEN) src/lib/ipa_hbac/ipa_hbac.doxy\n\t$(DOXYGEN) src/lib/idmap/sss_idmap.doxy\n\t$(DOXYGEN) src/sss_client/idmap/sss_nss_idmap.doxy\n\t$(DOXYGEN) src/lib/certmap/sss_certmap.doxy\nif BUILD_IFP\n\t$(DOXYGEN) src/lib/sifp/sss_simpleifp.doxy\nendif\nelse !HAVE_DOXYGEN\ndocs:\n\t@echo \"Doxygen not installed, cannot generate documentation\"\n\t@exit 1\nendif !HAVE_DOXYGEN\n\nif BUILD_PYTHON_BINDINGS\n$(abs_builddir)/src/config/SSSDConfig/ipachangeconf.py:\n\t-cp $(srcdir)/src/config/SSSDConfig/ipachangeconf.py $(builddir)/src/config/SSSDConfig/\n\n$(abs_builddir)/src/config/SSSDConfig/sssdoptions.py:\n\t-cp $(srcdir)/src/config/SSSDConfig/sssdoptions.py $(builddir)/src/config/SSSDConfig/\n\nSSSDCONFIG_MODULES = \\\n    $(abs_builddir)/src/config/SSSDConfig/ipachangeconf.py \\\n    $(abs_builddir)/src/config/SSSDConfig/sssdoptions.py\nelse\nSSSSCONFIG_MODULES =\nendif\n\nall-local: ldb_mod_test_dir $(SSSDCONFIG_MODULES)\nif BUILD_PYTHON2_BINDINGS\n\tcd $(builddir)/src/config; \\\n\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config\nendif\nif BUILD_PYTHON3_BINDINGS\n\tcd $(builddir)/src/config; \\\n\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config\nendif\n\ninstall-exec-hook: installsssddirs\nif BUILD_PYTHON2_BINDINGS\n\tif [ \"$(DESTDIR)\" = \"\" ]; then \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON2_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files2; \\\n\telse \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON2_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files2 --root=$(DESTDIR); \\\n\tfi\n\tcd $(DESTDIR)$(py2execdir) && \\\n\t\tmv -f _py2sss.so pysss.so ; \\\n\t\tmv -f _py2hbac.so pyhbac.so ; \\\n\t\tmv -f _py2sss_murmur.so pysss_murmur.so ; \\\n\t\tmv -f _py2sss_nss_idmap.so pysss_nss_idmap.so\nendif\nif BUILD_PYTHON3_BINDINGS\n\tif [ \"$(DESTDIR)\" = \"\" ]; then \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON3_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files3; \\\n\telse \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON3_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files3 --root=$(DESTDIR); \\\n\tfi\n\tcd $(DESTDIR)$(py3execdir) && \\\n\t\tmv -f _py3sss.so pysss.so ; \\\n\t\tmv -f _py3hbac.so pyhbac.so ; \\\n\t\tmv -f _py3sss_murmur.so pysss_murmur.so ; \\\n\t\tmv -f _py3sss_nss_idmap.so pysss_nss_idmap.so\nendif\n\tfor doc in $(SSSD_DOCS); do \\\n\t\t$(MKDIR_P) $$doc $(DESTDIR)/$(docdir); \\\n\t\tcp -a $$doc $(DESTDIR)/$(docdir)/; \\\n\tdone;\n\nif HAVE_SYSTEMD_UNIT\n\t$(MKDIR_P) $(DESTDIR)$(systemdunitdir)\n\t$(MKDIR_P) $(DESTDIR)$(systemdconfdir)\nelse\n\t$(MKDIR_P) $(DESTDIR)$(initdir)\nendif\n\nif SSSD_USER\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/ldap_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/ldap_child\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/krb5_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/krb5_child\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/proxy_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/proxy_child\nif BUILD_SEMANAGE\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/selinux_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/selinux_child\nendif\nendif\n\ninstall-data-hook:\n\trm $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2 \\\n       $(DESTDIR)/$(nsslibdir)/libnss_sss.so\n\tmv $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2.0.0 $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2\n\tif [ ! $(krb5rcachedir) = \"__LIBKRB5_DEFAULTS__\" ]; then \\\n        $(MKDIR_P) $(DESTDIR)/$(krb5rcachedir) ; \\\n\tfi\nif BUILD_SAMBA\n\tmv $(DESTDIR)/$(winbindplugindir)/winbind_idmap_sss.so $(DESTDIR)/$(winbindplugindir)/sss.so\nendif\nif BUILD_KCM\n\t$(MKDIR_P) $(DESTDIR)/$(sssdkcmdatadir)\nendif\n\nuninstall-hook:\n\tif [ -f $(abs_builddir)/src/config/.files2 ]; then \\\n\t    cat $(abs_builddir)/src/config/.files2 | xargs -iq rm -f $(DESTDIR)/q; \\\n\t    rm $(abs_builddir)/src/config/.files2 ; \\\n\tfi\n\tif [ -f $(abs_builddir)/src/config/.files3 ]; then \\\n\t    cat $(abs_builddir)/src/config/.files3 | xargs -iq rm -f $(DESTDIR)/q; \\\n\t    rm $(abs_builddir)/src/config/.files3 ; \\\n\tfi\n\tfor doc in $(SSSD_DOCS); do \\\n\t\trm -Rf $(DESTDIR)/$(docdir)/$$doc; \\\n\tdone;\nif BUILD_PYTHON2_BINDINGS\n\tcd $(DESTDIR)$(py2execdir) && \\\n\t\trm -f pysss.so pyhbac.so pysss_murmur.so pysss_nss_idmap.so\nendif\nif BUILD_PYTHON3_BINDINGS\n\tcd $(DESTDIR)$(py3execdir) && \\\n\t\trm -f pysss.so pyhbac.so pysss_murmur.so pysss_nss_idmap.so\nendif\nif BUILD_SAMBA\n\trm $(DESTDIR)/$(winbindplugindir)/sss.so\nendif\n\nclean-local:\nif BUILD_PYTHON2_BINDINGS\n\tif [ ! $(srcdir)/src/config/SSSDConfig/ipachangeconf.py -ef $(builddir)/src/config/SSSDConfig/ipachangeconf.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/ipachangeconf.py ; \\\n\tfi\n\n\tif [ ! $(srcdir)/src/config/SSSDConfig/sssdoptions.py -ef $(builddir)/src/config/SSSDConfig/sssdoptions.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/sssdoptions.py ; \\\n\tfi\n\n\trm -f $(builddir)/src/config/SSSDConfig/*.pyc\n\n\tcd $(builddir)/src/config; $(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config clean --all\nendif\nif BUILD_PYTHON3_BINDINGS\n\tif [ ! $(srcdir)/src/config/SSSDConfig/ipachangeconf.py -ef $(builddir)/src/config/SSSDConfig/ipachangeconf.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/ipachangeconf.py ; \\\n\tfi\n\n\tif [ ! $(srcdir)/src/config/SSSDConfig/sssdoptions.py -ef $(builddir)/src/config/SSSDConfig/sssdoptions.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/sssdoptions.py ; \\\n\tfi\n\n\trm -f $(builddir)/src/config/SSSDConfig/__pycache__/*.pyc\n\n\tcd $(builddir)/src/config; $(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config clean --all\nendif\n\tfor doc in $(SSSD_DOCS); do \\\n\t\trm -Rf $$doc; \\\n\tdone;\n\trm -Rf ldb_mod_test_dir\n\trm -f $(builddir)/src/responder/ifp/org.freedesktop.sssd.infopipe.service\n\trm -f $(builddir)/src/sysv/systemd/sssd.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-autofs.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-autofs.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-ifp.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-nss.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-nss.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-pac.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pac.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam-priv.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-ssh.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-ssh.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-sudo.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-sudo.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-secrets.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-secrets.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-kcm.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-kcm.service\n\trm -f $(builddir)/src/tools/wrappers/sss_debuglevel\n\nCLEANFILES += *.X */*.X */*/*.X\n\ntest_CA: test_CA.stamp\n\ntest_CA.stamp: $(srcdir)/src/tests/test_CA/* $(srcdir)/src/tests/test_ECC_CA/*\n\t$(MAKE) -C src/tests/test_CA ca_all\n\t$(MAKE) -C src/tests/test_ECC_CA ca_all\n\ttouch $@\n\nif BUILD_TEST_CA\nBUILT_SOURCES += test_CA\nendif\nCLEANFILES += test_CA.stamp\n\ntests: all $(check_PROGRAMS)\n\t(cd src/tests/cwrap && $(MAKE) $(AM_MAKEFLAGS) $@) || exit 1;\n\n\n# RPM-related tasks\n\nRPMBUILD ?= $(PWD)/rpmbuild\n\ndist_noinst_DATA += \\\n    m4 \\\n    contrib/sssd.spec.in \\\n    BUILD.txt \\\n    COPYING \\\n    src/tests/multihost/basic/conftest.py \\\n    src/tests/multihost/basic/mhc.yaml \\\n    src/tests/multihost/basic/README.md \\\n    src/tests/multihost/basic/test_basic.py \\\n    src/tests/multihost/basic/test_config.py \\\n    src/tests/multihost/basic/test_files.py \\\n    src/tests/multihost/basic/test_ifp.py \\\n    src/tests/multihost/basic/test_kcm.py \\\n    src/tests/multihost/basic/test_sssctl_config_check.py \\\n    src/tests/multihost/basic/test_sudo.py \\\n    src/tests/multihost/basic/utils_config.py \\\n    $(NULL)\n\nrpmroot:\n\t$(MKDIR_P) $(RPMBUILD)/BUILD\n\t$(MKDIR_P) $(RPMBUILD)/RPMS\n\t$(MKDIR_P) $(RPMBUILD)/SOURCES\n\t$(MKDIR_P) $(RPMBUILD)/SPECS\n\t$(MKDIR_P) $(RPMBUILD)/SRPMS\n\n# pre-release related vars\n\nPR_VERSION_DATE := $(shell date +%Y%m%d.%H%M)\nPR_VERSION_COMMIT_HASH := $(shell git log -1 --pretty=format:%h)\nPR_VERSION_NUMBER = $(PR_VERSION_DATE).git$(PR_VERSION_COMMIT_HASH)\nPR_VERSION_REGEX = m4_define(\\[PRERELEASE_VERSION_NUMBER\\], \\[.*\\])\nPR_VERSION_REPL = m4_define(\\[PRERELEASE_VERSION_NUMBER\\], \\[.$(PR_VERSION_NUMBER)\\])\n\nrpmbrprep: dist-gzip rpmroot\nif GIT_CHECKOUT\n# When we're building RPMs from a git checkout,\n# we don't want to be bothered with translation\n# updates\n\tgit checkout $(srcdir)/po $(srcdir)/src/man/po\nendif\n\tcp $(builddir)/contrib/sssd.spec $(RPMBUILD)/SPECS\n\tcp $(distdir).tar.gz $(RPMBUILD)/SOURCES\n\nrpms: rpmbrprep\n\tcd $(RPMBUILD); \\\n\trpmbuild --define \"_topdir $(RPMBUILD)\" -ba SPECS/sssd.spec\n\nif GIT_CHECKOUT\nprerelease-rpms:\n\tcp $(srcdir)/version.m4 $(srcdir)/version.m4.orig\n\tsed -e \"s/$(PR_VERSION_REGEX)/$(PR_VERSION_REPL)/\" \\\n\t\t< $(srcdir)/version.m4.orig > $(srcdir)/version.m4\n\t$(MAKE) rpms\n\tmv $(srcdir)/version.m4.orig $(srcdir)/version.m4\nendif\n\n# make srpms will use the old digest algorithm to be compatible\n# with RHEL5\nsrpm: rpmbrprep\n\tcd $(RPMBUILD); \\\n\trpmbuild --define \"_topdir $(RPMBUILD)\" \\\n\t         -bs SPECS/sssd.spec\n\nif GIT_CHECKOUT\nprerelease-srpm:\n\tcp $(srcdir)/version.m4 $(srcdir)/version.m4.orig\n\tsed -e \"s/$(PR_VERSION_REGEX)/$(PR_VERSION_REPL)/\" \\\n\t\t< $(srcdir)/version.m4.orig > $(srcdir)/version.m4\n\t$(MAKE) srpm\n\tmv $(srcdir)/version.m4.orig $(srcdir)/version.m4\nendif\n", "/*\n    SSSD\n\n    Library for rule based certificate to user mapping\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"config.h\"\n\n#include <ctype.h>\n\n#include \"util/util.h\"\n#include \"util/cert.h\"\n#include \"util/crypto/sss_crypto.h\"\n#include \"lib/certmap/sss_certmap.h\"\n#include \"lib/certmap/sss_certmap_int.h\"\n\nint debug_level;\nvoid sss_debug_fn(const char *file,\n                  long line,\n                  const char *function,\n                  int level,\n                  const char *format, ...)\n{\n    return;\n}\n\nstatic int get_type_prefix(TALLOC_CTX *mem_ctx, const char *match_rule,\n                           char **type, const char **rule_start)\n{\n    const char *c;\n    char *delim;\n\n    *type = NULL;\n    *rule_start = match_rule;\n\n    delim = strchr(match_rule, ':');\n    if (delim == NULL) {\n        /* no type prefix found */\n        return 0;\n    }\n\n    /* rule starts with ':', empty type */\n    if (delim == match_rule) {\n        *rule_start = delim + 1;\n        return EOK;\n    }\n\n    for (c = match_rule; c < delim; c++) {\n        /* type prefix may only contain digits and upper-case ASCII characters */\n        if (!(isascii(*c) && (isdigit(*c) || isupper(*c)))) {\n            /* no type prefix found */\n            return 0;\n        }\n    }\n\n    *rule_start = delim + 1;\n    *type = talloc_strndup(mem_ctx, match_rule, (delim - match_rule));\n    if (*type == NULL) {\n        return ENOMEM;\n    }\n\n    return 0;\n}\n\nstatic int parse_match_rule(struct sss_certmap_ctx *ctx, const char *match_rule,\n                            struct krb5_match_rule **parsed_match_rule)\n{\n    int ret;\n    char *type;\n    const char *rule_start;\n\n    ret = get_type_prefix(ctx, match_rule, &type, &rule_start);\n    if (ret != EOK) {\n        CM_DEBUG(ctx, \"Failed to read rule type.\");\n        goto done;\n    }\n\n    if (type == NULL || strcmp(type, \"KRB5\") == 0) {\n        ret = parse_krb5_match_rule(ctx, rule_start, parsed_match_rule);\n        if (ret != EOK) {\n            CM_DEBUG(ctx, \"Failed to parse KRB5 matching rule.\");\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported matching rule type.\");\n        ret = ESRCH;\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    talloc_free(type);\n\n    return ret;\n}\n\nstatic int parse_mapping_rule(struct sss_certmap_ctx *ctx,\n                              const char *mapping_rule,\n                              struct ldap_mapping_rule **parsed_mapping_rule)\n{\n    int ret;\n    char *type;\n    const char *rule_start;\n\n    ret = get_type_prefix(ctx, mapping_rule, &type, &rule_start);\n    if (ret != EOK) {\n        CM_DEBUG(ctx, \"Failed to read rule type.\");\n        goto done;\n    }\n\n    if (type == NULL || strcmp(type, \"LDAP\") == 0) {\n        ret = parse_ldap_mapping_rule(ctx, rule_start, parsed_mapping_rule);\n        if (ret != EOK) {\n            CM_DEBUG(ctx, \"Failed to parse LDAP mapping rule.\");\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported mapping rule type.\");\n        ret = ESRCH;\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    talloc_free(type);\n\n    return ret;\n}\n\nint sss_certmap_add_rule(struct sss_certmap_ctx *ctx,\n                         uint32_t priority, const char *match_rule,\n                         const char *map_rule, const char **domains)\n{\n    size_t c;\n    int ret;\n    struct match_map_rule *rule;\n    struct TALLOC_CTX *tmp_ctx;\n    struct priority_list *p;\n    struct priority_list *p_new;\n    struct krb5_match_rule *parsed_match_rule;\n    struct ldap_mapping_rule *parsed_mapping_rule;\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    rule = talloc_zero(tmp_ctx, struct match_map_rule);\n    if (rule == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    rule->priority = priority;\n\n    if (match_rule == NULL) {\n        match_rule = DEFAULT_MATCH_RULE;\n    }\n    ret = parse_match_rule(ctx, match_rule, &parsed_match_rule);\n    if (ret == 0) {\n        rule->parsed_match_rule = talloc_steal(rule, parsed_match_rule);\n        rule->match_rule = talloc_strdup(rule, match_rule);\n        if (rule->match_rule == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    } else if (ret == ESRCH) {\n        /* report unsupported rules */\n        goto done;\n    } else {\n        goto done;\n    }\n\n    if (map_rule == NULL) {\n        map_rule = DEFAULT_MAP_RULE;\n    }\n    ret = parse_mapping_rule(ctx, map_rule, &parsed_mapping_rule);\n    if (ret == 0) {\n        rule->parsed_mapping_rule = talloc_steal(rule, parsed_mapping_rule);\n        rule->map_rule = talloc_strdup(rule, map_rule);\n        if (rule->map_rule == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    } else if (ret == ESRCH) {\n        /* report unsupported rules */\n        goto done;\n    } else {\n        goto done;\n    }\n\n    if (domains != NULL && *domains != NULL) {\n        for (c = 0; domains[c] != NULL; c++);\n        rule->domains = talloc_zero_array(rule, char *, c + 1);\n        if (rule->domains == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        for (c = 0; domains[c] != NULL; c++) {\n            rule->domains[c] = talloc_strdup(rule->domains, domains[c]);\n            if (rule->domains[c] == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n    }\n\n    if (ctx->prio_list == NULL) {\n        ctx->prio_list = talloc_zero(ctx, struct priority_list);\n        if (ctx->prio_list == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n\n        ctx->prio_list->priority = rule->priority;\n        ctx->prio_list->rule_list = rule;\n    } else {\n        for (p = ctx->prio_list; p != NULL && p->priority < rule->priority;\n                                                                   p = p->next);\n        if (p != NULL && p->priority == priority) {\n            DLIST_ADD(p->rule_list, rule);\n        } else {\n            p_new = talloc_zero(ctx, struct priority_list);\n            if (p_new == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n\n            p_new->priority = rule->priority;\n            p_new->rule_list = rule;\n\n            if (p == NULL) {\n                DLIST_ADD_END(ctx->prio_list, p_new, struct priority_list *);\n            } else if (p->prev == NULL) {\n                DLIST_ADD(ctx->prio_list, p_new);\n            } else {\n                DLIST_ADD_AFTER(ctx->prio_list, p_new, p->prev);\n            }\n        }\n    }\n\n    talloc_steal(ctx, rule);\n\n    ret = EOK;\n\ndone:\n    talloc_free(tmp_ctx);\n\n    return ret;\n}\n\nstatic int expand_cert(struct sss_certmap_ctx *ctx,\n                       struct parsed_template *parsed_template,\n                       struct sss_cert_content *cert_content,\n                       char **expanded)\n{\n    int ret;\n    char *tmp_str = NULL;\n\n    if (parsed_template->conversion == NULL\n            || strcmp(parsed_template->conversion, \"bin\") == 0) {\n        ret = bin_to_ldap_filter_value(ctx, cert_content->cert_der,\n                                       cert_content->cert_der_size, &tmp_str);\n        if (ret != 0) {\n            CM_DEBUG(ctx, \"bin conversion failed.\");\n            goto done;\n        }\n    } else if (strcmp(parsed_template->conversion, \"base64\") == 0) {\n        tmp_str = sss_base64_encode(ctx, cert_content->cert_der,\n                                    cert_content->cert_der_size);\n        if (tmp_str == NULL) {\n            CM_DEBUG(ctx, \"base64 conversion failed.\");\n            ret = ENOMEM;\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported conversion.\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    ret = 0;\n\ndone:\n    if (ret == 0) {\n        *expanded = tmp_str;\n    } else {\n        talloc_free(tmp_str);\n    }\n\n    return ret;\n}\n\nstatic int expand_san_blob(struct sss_certmap_ctx *ctx, enum san_opt san_opt,\n                           struct san_list *san_list, char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n    int ret;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            ret = bin_to_ldap_filter_value(ctx, item->bin_val,\n                                           item->bin_val_len, &exp);\n            if (ret != 0) {\n                CM_DEBUG(ctx, \"bin conversion failed.\");\n                return ret;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\nstatic int expand_san_string(struct sss_certmap_ctx *ctx, enum san_opt san_opt,\n                             struct san_list *san_list, const char *attr_name,\n                             char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            if (attr_name == NULL) {\n                exp = talloc_strdup(ctx, item->val);\n            } else if (strcasecmp(attr_name, \"short_name\") == 0) {\n                exp = talloc_strdup(ctx, item->short_name);\n            } else {\n                CM_DEBUG(ctx, \"Unsupported attribute name [%s].\", attr_name);\n                return EINVAL;\n            }\n\n            if (exp == NULL) {\n                return ENOMEM;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\nstatic int expand_san_rdn_list(struct sss_certmap_ctx *ctx,\n                               enum san_opt san_opt,\n                               struct san_list *san_list,\n                               const char *conversion,\n                               char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n    int ret;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            ret = rdn_list_2_dn_str(ctx, conversion, item->rdn_list, &exp);\n            if (ret != 0) {\n                return ret;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\n\nstatic int expand_san(struct sss_certmap_ctx *ctx,\n                        struct parsed_template *parsed_template,\n                        struct san_list *san_list,\n                        char **expanded)\n{\n    int ret;\n\n    if (strcmp(\"subject_rfc822_name\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_RFC822_NAME, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_dns_name\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_DNS_NAME, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_x400_address\", parsed_template->name) == 0) {\n        ret = expand_san_blob(ctx, SAN_X400_ADDRESS, san_list, expanded);\n    } else if (strcmp(\"subject_directory_name\", parsed_template->name) == 0) {\n        ret = expand_san_rdn_list(ctx, SAN_DIRECTORY_NAME, san_list,\n                                  parsed_template->conversion, expanded);\n    } else if (strcmp(\"subject_ediparty_name\", parsed_template->name) == 0) {\n        ret = expand_san_blob(ctx, SAN_EDIPART_NAME, san_list, expanded);\n    } else if (strcmp(\"subject_uri\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_URI, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_ip_address\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_IP_ADDRESS, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_registered_id\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_REGISTERED_ID, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_pkinit_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_PKINIT, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_nt_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_NT, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_PRINCIPAL, san_list,\n                                parsed_template->attr_name, expanded);\n    } else {\n        CM_DEBUG(ctx, \"Unsupported template name [%s].n\",\n                      parsed_template->name);\n        ret = EINVAL;\n    }\n\n    return ret;\n}\n\nstatic int expand_template(struct sss_certmap_ctx *ctx,\n                           struct parsed_template *parsed_template,\n                           struct sss_cert_content *cert_content,\n                           char **expanded)\n{\n    int ret;\n    char *exp = NULL;\n\n    if (strcmp(\"issuer_dn\", parsed_template->name) == 0) {\n        ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,\n                                cert_content->issuer_rdn_list, &exp);\n    } else if (strcmp(\"subject_dn\", parsed_template->name) == 0) {\n        ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,\n                                cert_content->subject_rdn_list, &exp);\n    } else if (strncmp(\"subject_\", parsed_template->name, 8) == 0) {\n        ret = expand_san(ctx, parsed_template, cert_content->san_list, &exp);\n    } else if (strcmp(\"cert\", parsed_template->name) == 0) {\n        ret = expand_cert(ctx, parsed_template, cert_content, &exp);\n    } else {\n        CM_DEBUG(ctx, \"Unsupported template name.\");\n        ret = EINVAL;\n        goto done;\n    }\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to expand [%s] template.\", parsed_template->name);\n        goto done;\n    }\n\n    if (exp == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    ret = 0;\n\ndone:\n    if (ret == 0) {\n        *expanded = exp;\n    } else {\n        talloc_free(exp);\n    }\n\n    return ret;\n}\n\nstatic int get_filter(struct sss_certmap_ctx *ctx,\n                      struct ldap_mapping_rule *parsed_mapping_rule,\n                      struct sss_cert_content *cert_content,\n                      char **filter)\n{\n    struct ldap_mapping_rule_comp *comp;\n    char *result = NULL;\n    char *expanded = NULL;\n    int ret;\n\n    result = talloc_strdup(ctx, \"\");\n    if (result == NULL) {\n        return ENOMEM;\n    }\n\n    for (comp = parsed_mapping_rule->list; comp != NULL; comp = comp->next) {\n        if (comp->type == comp_string) {\n            result = talloc_strdup_append(result, comp->val);\n        } else if (comp->type == comp_template) {\n            ret = expand_template(ctx, comp->parsed_template, cert_content,\n                                  &expanded);\n            if (ret != 0) {\n                CM_DEBUG(ctx, \"Failed to expanded template.\");\n                goto done;\n            }\n\n            result = talloc_strdup_append(result, expanded);\n            talloc_free(expanded);\n            expanded = NULL;\n            if (result == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        } else {\n            ret = EINVAL;\n            CM_DEBUG(ctx, \"Unsupported component type.\");\n            goto done;\n        }\n    }\n\n    ret = 0;\ndone:\n    talloc_free(expanded);\n    if (ret == 0) {\n        *filter = result;\n    } else {\n        talloc_free(result);\n    }\n\n    return ret;\n}\n\nstatic bool check_san_regexp(struct sss_certmap_ctx *ctx,\n                             enum san_opt san_opt, regex_t regexp,\n                             struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n    int ret;\n    char *tmp_str = NULL;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            if (item->san_opt == SAN_DIRECTORY_NAME) {\n                /* use LDAP order for matching */\n                ret = rdn_list_2_dn_str(ctx, NULL, item->rdn_list, &tmp_str);\n                if (ret != 0 || tmp_str == NULL) {\n                    return false;\n                }\n                match = (regexec(&regexp, tmp_str, 0, NULL, 0) == 0);\n                talloc_free(tmp_str);\n            } else {\n                match = (item->val != NULL\n                            && regexec(&regexp, item->val, 0, NULL, 0) == 0);\n            }\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool check_san_blob(enum san_opt san_opt,\n                           uint8_t *bin_val, size_t bin_val_len,\n                           struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n\n    if (bin_val == NULL || bin_val_len == 0) {\n        return false;\n    }\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            match = (item->bin_val != NULL && item->bin_val_len != 0\n                        && memmem(item->bin_val, item->bin_val_len,\n                                  bin_val, bin_val_len) != NULL);\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool check_san_str_other_name(enum san_opt san_opt,\n                                     const char *str_other_name_oid,\n                                     regex_t regexp,\n                                     struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n    char *tmp_str;\n\n    if (str_other_name_oid == NULL) {\n        return false;\n    }\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt\n                && strcmp(item->other_name_oid, str_other_name_oid) == 0) {\n            match = false;\n            if (item->bin_val != NULL && item->bin_val_len != 0) {\n                tmp_str = talloc_strndup(item, (char *) item->bin_val,\n                                         item->bin_val_len);\n                if (tmp_str != NULL) {\n                    match = (regexec(&regexp, tmp_str, 0, NULL, 0) == 0);\n                }\n                talloc_free(tmp_str);\n            }\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool do_san_match(struct sss_certmap_ctx *ctx,\n                         struct component_list *comp,\n                         struct san_list *san_list)\n{\n    switch (comp->san_opt) {\n    case SAN_OTHER_NAME:\n        return check_san_blob(SAN_STRING_OTHER_NAME,\n                              comp->bin_val, comp->bin_val_len,\n                              san_list);\n        break;\n    case SAN_X400_ADDRESS:\n    case SAN_EDIPART_NAME:\n        return check_san_blob(comp->san_opt, comp->bin_val, comp->bin_val_len,\n                              san_list);\n        break;\n    case SAN_RFC822_NAME:\n    case SAN_DNS_NAME:\n    case SAN_DIRECTORY_NAME:\n    case SAN_URI:\n    case SAN_IP_ADDRESS:\n    case SAN_REGISTERED_ID:\n    case SAN_PKINIT:\n    case SAN_NT:\n    case SAN_PRINCIPAL:\n        return check_san_regexp(ctx, comp->san_opt, comp->regexp, san_list);\n        break;\n    case SAN_STRING_OTHER_NAME:\n        return check_san_str_other_name(comp->san_opt, comp->str_other_name_oid,\n                                        comp->regexp, san_list);\n        break;\n    default:\n        CM_DEBUG(ctx, \"Unsupported SAN option [%d].\", comp->san_opt);\n        return false;\n    }\n}\n\nstatic int do_match(struct sss_certmap_ctx *ctx,\n                    struct krb5_match_rule *parsed_match_rule,\n                    struct sss_cert_content *cert_content)\n{\n    struct component_list *comp;\n    bool match = false;\n    size_t c;\n\n    if (parsed_match_rule == NULL || cert_content == NULL) {\n        return EINVAL;\n    }\n\n    /* Issuer */\n    for (comp = parsed_match_rule->issuer; comp != NULL; comp = comp->next) {\n        match = (cert_content->issuer_str != NULL\n                    && regexec(&(comp->regexp), cert_content->issuer_str,\n                               0, NULL, 0) == 0);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n\n    }\n\n    /* Subject */\n    for (comp = parsed_match_rule->subject; comp != NULL; comp = comp->next) {\n        match = (cert_content->subject_str != NULL\n                    && regexec(&(comp->regexp), cert_content->subject_str,\n                               0, NULL, 0) == 0);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n\n    }\n\n    /* Key Usage */\n    for (comp = parsed_match_rule->ku; comp != NULL; comp = comp->next) {\n        match = ((cert_content->key_usage & comp->ku) == comp->ku);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n    }\n\n    /* Extended Key Usage */\n    for (comp = parsed_match_rule->eku; comp != NULL; comp = comp->next) {\n        for (c = 0; comp->eku_oid_list[c] != NULL; c++) {\n            match = string_in_list(comp->eku_oid_list[c],\n                                   discard_const(\n                                         cert_content->extended_key_usage_oids),\n                                   true);\n            if (match && parsed_match_rule->r == relation_or) {\n                /* match */\n                return 0;\n            } else if (!match && parsed_match_rule->r == relation_and) {\n                /* no match */\n                return ENOENT;\n            }\n        }\n    }\n\n    /* SAN */\n    for (comp = parsed_match_rule->san; comp != NULL; comp = comp->next) {\n        match = do_san_match(ctx, comp, cert_content->san_list);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n    }\n\n    if (match) {\n        /* match */\n        return 0;\n    }\n\n    /* no match */\n    return ENOENT;\n}\n\nint sss_certmap_match_cert(struct sss_certmap_ctx *ctx,\n                           const uint8_t *der_cert, size_t der_size)\n{\n    int ret;\n    struct match_map_rule *r;\n    struct priority_list *p;\n    struct sss_cert_content *cert_content = NULL;\n\n    ret = sss_cert_get_content(ctx, der_cert, der_size, &cert_content);\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to get certificate content.\");\n        return ret;\n    }\n\n    if (ctx->prio_list == NULL) {\n        /* Match all certificates if there are no rules applied */\n        ret = 0;\n        goto done;\n    }\n\n    for (p = ctx->prio_list; p != NULL; p = p->next) {\n        for (r = p->rule_list; r != NULL; r = r->next) {\n            ret = do_match(ctx, r->parsed_match_rule, cert_content);\n            if (ret == 0) {\n                /* match */\n                goto done;\n            }\n        }\n    }\n\n    ret = ENOENT;\ndone:\n    talloc_free(cert_content);\n\n    return ret;\n}\n\nint sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,\n                                  const uint8_t *der_cert, size_t der_size,\n                                  char **_filter, char ***_domains)\n{\n    int ret;\n    struct match_map_rule *r;\n    struct priority_list *p;\n    struct sss_cert_content *cert_content = NULL;\n    char *filter = NULL;\n    char **domains = NULL;\n    size_t c;\n\n    if (_filter == NULL || _domains == NULL) {\n        return EINVAL;\n    }\n\n    ret = sss_cert_get_content(ctx, der_cert, der_size, &cert_content);\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to get certificate content [%d].\", ret);\n        return ret;\n    }\n\n    if (ctx->prio_list == NULL) {\n        if (ctx->default_mapping_rule == NULL) {\n            CM_DEBUG(ctx, \"No matching or mapping rules available.\");\n            return EINVAL;\n        }\n\n        ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, &filter);\n        goto done;\n    }\n\n    for (p = ctx->prio_list; p != NULL; p = p->next) {\n        for (r = p->rule_list; r != NULL; r = r->next) {\n            ret = do_match(ctx, r->parsed_match_rule, cert_content);\n            if (ret == 0) {\n                /* match */\n                ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,\n                                 &filter);\n                if (ret != 0) {\n                    CM_DEBUG(ctx, \"Failed to get filter\");\n                    goto done;\n                }\n\n                if (r->domains != NULL) {\n                    for (c = 0; r->domains[c] != NULL; c++);\n                    domains = talloc_zero_array(ctx, char *, c + 1);\n                    if (domains == NULL) {\n                        ret = ENOMEM;\n                        goto done;\n                    }\n\n                    for (c = 0; r->domains[c] != NULL; c++) {\n                        domains[c] = talloc_strdup(domains, r->domains[c]);\n                        if (domains[c] == NULL) {\n                            ret = ENOMEM;\n                            goto done;\n                        }\n                    }\n                }\n\n                ret = 0;\n                goto done;\n            }\n        }\n    }\n\n    ret = ENOENT;\n\ndone:\n    talloc_free(cert_content);\n    if (ret == 0) {\n        *_filter = filter;\n        *_domains = domains;\n    } else {\n        talloc_free(filter);\n        talloc_free(domains);\n    }\n\n    return ret;\n}\n\nint sss_certmap_init(TALLOC_CTX *mem_ctx,\n                     sss_certmap_ext_debug *debug, void *debug_priv,\n                     struct sss_certmap_ctx **ctx)\n{\n    int ret;\n\n    if (ctx == NULL) {\n        return EINVAL;\n    }\n\n    *ctx = talloc_zero(mem_ctx, struct sss_certmap_ctx);\n    if (*ctx == NULL) {\n        return ENOMEM;\n    }\n\n    (*ctx)->debug = debug;\n    (*ctx)->debug_priv = debug_priv;\n\n    ret  = parse_mapping_rule(*ctx, DEFAULT_MAP_RULE,\n                              &((*ctx)->default_mapping_rule));\n    if (ret != 0) {\n        CM_DEBUG((*ctx), \"Failed to parse default mapping rule.\");\n        talloc_free(*ctx);\n        *ctx = NULL;\n        return ret;\n    }\n\n    CM_DEBUG((*ctx), \"sss_certmap initialized.\");\n    return EOK;\n}\n\nvoid sss_certmap_free_ctx(struct sss_certmap_ctx *ctx)\n{\n    talloc_free(ctx);\n}\n\nvoid sss_certmap_free_filter_and_domains(char *filter, char **domains)\n{\n    talloc_free(filter);\n    talloc_free(domains);\n}\n\nstatic const char *sss_eku_oid2name(const char *oid)\n{\n    size_t c;\n\n    for (c = 0; sss_ext_key_usage[c].name != NULL; c++) {\n        if (strcmp(sss_ext_key_usage[c].oid, oid) == 0) {\n            return sss_ext_key_usage[c].name;\n        }\n    }\n\n    return NULL;\n}\n\nstruct parsed_template san_parsed_template[] = {\n    { NULL, NULL, NULL }, /* SAN_OTHER_NAME handled separately */\n    { \"subject_rfc822_name\", NULL, NULL},\n    { \"subject_dns_name\", NULL, NULL},\n    { \"subject_x400_address\", NULL, NULL},\n    { \"subject_directory_name\", NULL, NULL},\n    { \"subject_ediparty_name\", NULL, NULL},\n    { \"subject_uri\", NULL, NULL},\n    { \"subject_ip_address\", NULL, NULL},\n    { \"subject_registered_id\", NULL, NULL},\n    { \"subject_pkinit_principal\", NULL, NULL},\n    { \"subject_nt_principal\", NULL, NULL},\n    { \"subject_principal\", NULL, NULL},\n    { NULL, NULL, NULL }, /* SAN_STRING_OTHER_NAME handled separately */\n    { NULL, NULL, NULL }  /* SAN_END */\n};\n\nstatic int sss_cert_dump_content(TALLOC_CTX *mem_ctx,\n                                 struct sss_cert_content *c,\n                                 char **content_str)\n{\n    char *out = NULL;\n    size_t o;\n    struct san_list *s;\n    struct sss_certmap_ctx *ctx = NULL;\n    char *expanded = NULL;\n    int ret;\n    char *b64 = NULL;\n    const char *eku_str = NULL;\n    TALLOC_CTX *tmp_ctx = NULL;\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    ret = sss_certmap_init(tmp_ctx, NULL, NULL, &ctx);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    ret = ENOMEM; /* default error code for upcoming memory allocation issues */\n    out = talloc_strdup(tmp_ctx, \"sss cert content (format might change):\\n\");\n    if (out == NULL) goto done;\n\n    out = talloc_asprintf_append(out, \"Issuer: %s\\n\", c->issuer_str != NULL\n                                                         ? c->issuer_str\n                                                         : \"- not available -\");\n    if (out == NULL) goto done;\n    out = talloc_asprintf_append(out, \"Subject: %s\\n\", c->subject_str != NULL\n                                                         ? c->subject_str\n                                                         : \"- not available -\");\n    if (out == NULL) goto done;\n\n    out = talloc_asprintf_append(out, \"Key Usage: %u(0x%04x)\", c->key_usage,\n                                                               c->key_usage);\n    if (out == NULL) goto done;\n\n    if (c->key_usage != 0) {\n        out = talloc_asprintf_append(out, \" (\");\n        if (out == NULL) goto done;\n        for (o = 0; sss_key_usage[o].name != NULL; o++) {\n            if ((c->key_usage & sss_key_usage[o].flag) != 0) {\n                out = talloc_asprintf_append(out, \"%s%s\",\n                                             o == 0 ? \"\" : \",\",\n                                             sss_key_usage[o].name);\n                if (out == NULL) goto done;\n            }\n        }\n        out = talloc_asprintf_append(out, \")\");\n        if (out == NULL) goto done;\n    }\n    out = talloc_asprintf_append(out, \"\\n\");\n    if (out == NULL) goto done;\n\n    for (o = 0; c->extended_key_usage_oids[o] != NULL; o++) {\n        eku_str = sss_eku_oid2name(c->extended_key_usage_oids[o]);\n        out = talloc_asprintf_append(out, \"Extended Key Usage #%zu: %s%s%s%s\\n\",\n                                          o, c->extended_key_usage_oids[o],\n                                          eku_str == NULL ? \"\" : \" (\",\n                                          eku_str == NULL ? \"\" : eku_str,\n                                          eku_str == NULL ? \"\" : \")\");\n        if (out == NULL) goto done;\n    }\n\n    DLIST_FOR_EACH(s, c->san_list) {\n        out = talloc_asprintf_append(out, \"SAN type: %s\\n\",\n                                     s->san_opt < SAN_END\n                                                ? sss_san_names[s->san_opt].name\n                                                : \"- unsupported -\");\n        if (out == NULL) goto done;\n\n        if (san_parsed_template[s->san_opt].name != NULL) {\n            ret = expand_san(ctx, &san_parsed_template[s->san_opt], c->san_list,\n                             &expanded);\n            if (ret != EOK) {\n                goto done;\n            }\n            out = talloc_asprintf_append(out, \" %s=%s\\n\\n\",\n                                         san_parsed_template[s->san_opt].name,\n                                         expanded);\n            talloc_free(expanded);\n            if (out == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        } else if (s->san_opt == SAN_STRING_OTHER_NAME) {\n            b64 = sss_base64_encode(tmp_ctx, s->bin_val, s->bin_val_len);\n            out = talloc_asprintf_append(out, \" %s=%s\\n\\n\", s->other_name_oid,\n                                              b64 != NULL ? b64\n                                                          : \"- cannot encode -\");\n            talloc_free(b64);\n            if (out == NULL) goto done;\n        }\n    }\n\n    *content_str = talloc_steal(mem_ctx, out);\n\n    ret = EOK;\n\ndone:\n\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nint sss_certmap_display_cert_content(TALLOC_CTX *mem_cxt,\n                                     const uint8_t *der_cert, size_t der_size,\n                                     char **desc)\n{\n    int ret;\n    struct sss_cert_content *content = NULL;\n\n    ret = sss_cert_get_content(mem_cxt, der_cert, der_size, &content);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    ret = sss_cert_dump_content(mem_cxt, content, desc);\n    talloc_free(content);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    return 0;\n}\n", "SSS_CERTMAP_0.0 {\n    global:\n        sss_certmap_init;\n        sss_certmap_free_ctx;\n        sss_certmap_err_msg;\n        sss_certmap_add_rule;\n        sss_certmap_match_cert;\n        sss_certmap_get_search_filter;\n        sss_cert_get_content;\n        sss_certmap_free_filter_and_domains;\n    local:\n        *;\n};\n\nSSS_CERTMAP_0.1 {\n    global:\n        sss_certmap_display_cert_content;\n} SSS_CERTMAP_0.0;\n", "/*\n    SSSD\n\n    Library for rule based certificate to user mapping\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _SSS_CERTMAP_H_\n#define _SSS_CERTMAP_H_\n\n#include <stdlib.h>\n#include <stdint.h>\n#include <talloc.h>\n\n/**\n * @defgroup sss_certmap Allow rule-based mapping of certificates to users\n * Libsss_certmap provides a mechanism to map X509 certificate to users based\n * on rules.\n * @{\n */\n\n/**\n * Opaque type for the idmap context\n */\nstruct sss_certmap_ctx;\n\n/**\n * Lowest priority of a rule\n */\n#define SSS_CERTMAP_MIN_PRIO UINT32_MAX\n\n/**\n * Typedef for external debug callback\n */\ntypedef void (sss_certmap_ext_debug)(void *pvt,\n                                     const char *file, long line,\n                                     const char *function,\n                                     const char *format, ...);\n/**\n * @brief Initialize certmap context\n *\n * @param[in] mem_ctx    Talloc memory context, may be NULL\n * @param[in] debug      Callback to handle debug output, may be NULL\n * @param[in] debug_priv Private data for debugging callback, may be NULL\n * @param[out] ctx       New certmap context\n *\n * @return\n *  - 0:      success\n *  - ENOMEM: failed to allocate internal Talloc context\n *  - EINVAL: ctx is NULL\n */\nint sss_certmap_init(TALLOC_CTX *mem_ctx,\n                     sss_certmap_ext_debug *debug, void *debug_priv,\n                     struct sss_certmap_ctx **ctx);\n\n/**\n * @brief Free certmap context\n *\n * @param[in] ctx certmap context previously initialized with\n *            @ref sss_certmap_init, may be NULL\n */\nvoid sss_certmap_free_ctx(struct sss_certmap_ctx *ctx);\n\n/**\n * @brief Add a rule to the certmap context\n *\n * @param[in] ctx        certmap context previously initialized with\n *                       @ref sss_certmap_init\n * @param[in] priority   priority of the rule, 0 is the hightest priority, the\n *                       lowest is SSS_CERTMAP_MIN_PRIO\n * @param[in] match_rule String with the matching rule\n * @param[in] map_rule   String with the mapping rule\n * @param[in] domains    NULL-terminated string array with a list of domains\n *                       the rule should be valid for, i.e. only this domains\n *                       should be searched for matching users\n *\n * @return\n *  - 0:      success\n */\nint sss_certmap_add_rule(struct sss_certmap_ctx *ctx,\n                         uint32_t priority, const char *match_rule,\n                         const char *map_rule, const char **domains);\n\n/**\n * @brief Check if a certificate matches any of the applied rules\n *\n * @param[in] ctx      certmap context previously initialized with\n *                     @ref sss_certmap_init\n * @param[in] der_cert binary blog with the DER encoded certificate\n * @param[in] der_size size of the certificate blob\n *\n * @return\n *  - 0:      certificate matches a rule\n *  - ENOENT: certificate does not match\n *  - EINVAL: internal error\n */\nint sss_certmap_match_cert(struct sss_certmap_ctx *ctx,\n                           const uint8_t *der_cert, size_t der_size);\n\n/**\n * @brief Get the LDAP filter string for a certificate\n *\n * @param[in] ctx      certmap context previously initialized with\n *                     @ref sss_certmap_init\n * @param[in] der_cert binary blog with the DER encoded certificate\n * @param[in] der_size size of the certificate blob\n * @param[out] filter  LDAP filter string, caller should free the data by\n *                     calling sss_certmap_free_filter_and_domains\n * @param[out] domains NULL-terminated array of strings with the domains the\n *                     rule applies, caller should free the data by calling\n *                     sss_certmap_free_filter_and_domains\n *\n * @return\n *  - 0:      certificate matches a rule\n *  - ENOENT: certificate does not match\n *  - EINVAL: internal error\n */\nint sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,\n                                  const uint8_t *der_cert, size_t der_size,\n                                  char **filter, char ***domains);\n\n/**\n * @brief Free data returned by @ref sss_certmap_get_search_filter\n *\n * @param[in] filter  LDAP filter strings returned by\n *                    sss_certmap_get_search_filter\n * @param[in] domains string array of domains returned by\n *                     sss_certmap_get_search_filter\n */\nvoid sss_certmap_free_filter_and_domains(char *filter, char **domains);\n\n/**\n * @brief Get a string with the content of the certificate used by the library\n *\n * @param[in]  mem_ctx    Talloc memory context, may be NULL\n * @param[in]  der_cert   binary blog with the DER encoded certificate\n * @param[in]  der_size   size of the certificate blob\n * @param[out] desc       Multiline string showing the certificate content\n *                        which is used by libsss_certmap\n *\n * @return\n *  - 0:      success\n *  - EINVAL: certificate cannot be parsed\n *  - ENOMEM: memory allocation failure\n */\nint sss_certmap_display_cert_content(TALLOC_CTX *mem_cxt,\n                                     const uint8_t *der_cert, size_t der_size,\n                                     char **desc);\n\n/**\n * @}\n */\n#endif /* _SSS_CERTMAP_H_ */\n", "/*\n   SSSD\n\n   PAM Responder - certificate related requests\n\n   Copyright (C) Sumit Bose <sbose@redhat.com> 2015\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <time.h>\n\n#include \"util/util.h\"\n#include \"providers/data_provider.h\"\n#include \"util/child_common.h\"\n#include \"util/strtonum.h\"\n#include \"responder/pam/pamsrv.h\"\n#include \"responder/pam/pam_helpers.h\"\n#include \"lib/certmap/sss_certmap.h\"\n#include \"util/crypto/sss_crypto.h\"\n#include \"db/sysdb.h\"\n\n\nstruct cert_auth_info {\n    char *cert;\n    char *token_name;\n    char *module_name;\n    char *key_id;\n    char *label;\n    struct ldb_result *cert_user_objs;\n    struct cert_auth_info *prev;\n    struct cert_auth_info *next;\n};\n\nconst char *sss_cai_get_cert(struct cert_auth_info *i)\n{\n    return i != NULL ? i->cert : NULL;\n}\n\nconst char *sss_cai_get_token_name(struct cert_auth_info *i)\n{\n    return i != NULL ? i->token_name : NULL;\n}\n\nconst char *sss_cai_get_module_name(struct cert_auth_info *i)\n{\n    return i != NULL ? i->module_name : NULL;\n}\n\nconst char *sss_cai_get_key_id(struct cert_auth_info *i)\n{\n    return i != NULL ? i->key_id : NULL;\n}\n\nconst char *sss_cai_get_label(struct cert_auth_info *i)\n{\n    return i != NULL ? i->label : NULL;\n}\n\nstruct cert_auth_info *sss_cai_get_next(struct cert_auth_info *i)\n{\n    return i != NULL ? i->next : NULL;\n}\n\nstruct ldb_result *sss_cai_get_cert_user_objs(struct cert_auth_info *i)\n{\n    return i != NULL ? i->cert_user_objs : NULL;\n}\n\nvoid sss_cai_set_cert_user_objs(struct cert_auth_info *i,\n                                struct ldb_result *cert_user_objs)\n{\n    if (i->cert_user_objs != NULL) {\n        talloc_free(i->cert_user_objs);\n    }\n    i->cert_user_objs = talloc_steal(i, cert_user_objs);\n}\n\nvoid sss_cai_check_users(struct cert_auth_info **list, size_t *_cert_count,\n                         size_t *_cert_user_count)\n{\n    struct cert_auth_info *c;\n    struct cert_auth_info *tmp;\n    size_t cert_count = 0;\n    size_t cert_user_count = 0;\n    struct ldb_result *user_objs;\n\n    DLIST_FOR_EACH_SAFE(c, tmp, *list) {\n        user_objs = sss_cai_get_cert_user_objs(c);\n        if (user_objs != NULL) {\n            cert_count++;\n            cert_user_count += user_objs->count;\n        } else {\n            DLIST_REMOVE(*list, c);\n        }\n    }\n\n    if (_cert_count != NULL) {\n        *_cert_count = cert_count;\n    }\n\n    if (_cert_user_count != NULL) {\n        *_cert_user_count = cert_user_count;\n    }\n\n    return;\n}\n\nstruct priv_sss_debug {\n    int level;\n};\n\nstatic void ext_debug(void *private, const char *file, long line,\n                      const char *function, const char *format, ...)\n{\n    va_list ap;\n    struct priv_sss_debug *data = private;\n    int level = SSSDBG_OP_FAILURE;\n\n    if (data != NULL) {\n        level = data->level;\n    }\n\n    if (DEBUG_IS_SET(level)) {\n        va_start(ap, format);\n        sss_vdebug_fn(file, line, function, level, APPEND_LINE_FEED,\n                      format, ap);\n        va_end(ap);\n    }\n}\n\nerrno_t p11_refresh_certmap_ctx(struct pam_ctx *pctx,\n                                struct sss_domain_info *domains)\n{\n    int ret;\n    struct sss_certmap_ctx *sss_certmap_ctx = NULL;\n    size_t c;\n    struct sss_domain_info *dom;\n    bool certmap_found = false;\n    struct certmap_info **certmap_list;\n\n    ret = sss_certmap_init(pctx, ext_debug, NULL, &sss_certmap_ctx);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_init failed.\\n\");\n        goto done;\n    }\n\n    DLIST_FOR_EACH(dom, domains) {\n        certmap_list = dom->certmaps;\n        if (certmap_list != NULL && *certmap_list != NULL) {\n            certmap_found = true;\n            break;\n        }\n    }\n\n    if (!certmap_found) {\n        /* Try to add default matching rule */\n        ret = sss_certmap_add_rule(sss_certmap_ctx, SSS_CERTMAP_MIN_PRIO,\n                                   CERT_AUTH_DEFAULT_MATCHING_RULE, NULL, NULL);\n        if (ret != 0) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Failed to add default matching rule.\\n\");\n        }\n\n        goto done;\n    }\n\n    DLIST_FOR_EACH(dom, domains) {\n        certmap_list = dom->certmaps;\n        if (certmap_list == NULL || *certmap_list == NULL) {\n            continue;\n        }\n\n        for (c = 0; certmap_list[c] != NULL; c++) {\n            DEBUG(SSSDBG_TRACE_ALL,\n                  \"Trying to add rule [%s][%d][%s][%s].\\n\",\n                  certmap_list[c]->name, certmap_list[c]->priority,\n                  certmap_list[c]->match_rule, certmap_list[c]->map_rule);\n\n            ret = sss_certmap_add_rule(sss_certmap_ctx,\n                                       certmap_list[c]->priority,\n                                       certmap_list[c]->match_rule,\n                                       certmap_list[c]->map_rule,\n                                       certmap_list[c]->domains);\n            if (ret != 0) {\n                DEBUG(SSSDBG_CRIT_FAILURE,\n                      \"sss_certmap_add_rule failed for rule [%s] \"\n                      \"with error [%d][%s], skipping. \"\n                      \"Please check for typos and if rule syntax is supported.\\n\",\n                      certmap_list[c]->name, ret, sss_strerror(ret));\n                continue;\n            }\n        }\n    }\n\n    ret = EOK;\n\ndone:\n    if (ret == EOK) {\n        sss_certmap_free_ctx(pctx->sss_certmap_ctx);\n        pctx->sss_certmap_ctx = sss_certmap_ctx;\n    } else {\n        sss_certmap_free_ctx(sss_certmap_ctx);\n    }\n\n    return ret;\n}\n\nerrno_t p11_child_init(struct pam_ctx *pctx)\n{\n    int ret;\n    struct certmap_info **certmaps;\n    bool user_name_hint;\n    struct sss_domain_info *dom;\n\n    DLIST_FOR_EACH(dom, pctx->rctx->domains) {\n        ret = sysdb_get_certmap(dom, dom->sysdb, &certmaps, &user_name_hint);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sysdb_get_certmap failed.\\n\");\n            return ret;\n        }\n\n        dom->user_name_hint = user_name_hint;\n        talloc_free(dom->certmaps);\n        dom->certmaps = certmaps;\n    }\n\n    ret = p11_refresh_certmap_ctx(pctx, pctx->rctx->domains);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"p11_refresh_certmap_ctx failed.\\n\");\n        return ret;\n    }\n\n    return EOK;\n}\n\nstatic inline bool\nservice_in_list(char **list, size_t nlist, const char *str)\n{\n    size_t i;\n\n    for (i = 0; i < nlist; i++) {\n        if (strcasecmp(list[i], str) == 0) {\n            break;\n        }\n    }\n\n    return (i < nlist) ? true : false;\n}\n\nstatic errno_t get_sc_services(TALLOC_CTX *mem_ctx, struct pam_ctx *pctx,\n                               char ***_sc_list)\n{\n    TALLOC_CTX *tmp_ctx;\n    errno_t ret;\n    char *conf_str;\n    char **conf_list;\n    int conf_list_size;\n    char **add_list;\n    char **remove_list;\n    int ai = 0;\n    int ri = 0;\n    int j = 0;\n    char **sc_list;\n    int expected_sc_list_size;\n\n    const char *default_sc_services[] = {\n        \"login\", \"su\", \"su-l\", \"gdm-smartcard\", \"gdm-password\", \"kdm\", \"sudo\",\n        \"sudo-i\", \"gnome-screensaver\", \"polkit-1\", NULL,\n    };\n    const int default_sc_services_size =\n        sizeof(default_sc_services) / sizeof(default_sc_services[0]);\n\n    tmp_ctx = talloc_new(mem_ctx);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    ret = confdb_get_string(pctx->rctx->cdb, tmp_ctx, CONFDB_PAM_CONF_ENTRY,\n                            CONFDB_PAM_P11_ALLOWED_SERVICES, NULL,\n                            &conf_str);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"confdb_get_string failed %d [%s]\\n\", ret, sss_strerror(ret));\n        goto done;\n    }\n\n    if (conf_str != NULL) {\n        ret = split_on_separator(tmp_ctx, conf_str, ',', true, true,\n                                 &conf_list, &conf_list_size);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Cannot parse list of service names '%s': %d [%s]\\n\",\n                  conf_str, ret, sss_strerror(ret));\n            goto done;\n        }\n    } else {\n        conf_list = talloc_zero_array(tmp_ctx, char *, 1);\n        conf_list_size = 0;\n    }\n\n    add_list = talloc_zero_array(tmp_ctx, char *, conf_list_size + 1);\n    remove_list = talloc_zero_array(tmp_ctx, char *, conf_list_size + 1);\n\n    if (add_list == NULL || remove_list == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    for (int i = 0; conf_list[i] != NULL; ++i) {\n        switch (conf_list[i][0]) {\n        case '+':\n            add_list[ai] = conf_list[i] + 1;\n            ++ai;\n            break;\n        case '-':\n            remove_list[ri] = conf_list[i] + 1;\n            ++ri;\n            break;\n        default:\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"The option \"CONFDB_PAM_P11_ALLOWED_SERVICES\" must start\"\n                  \"with either '+' (for adding service) or '-' (for \"\n                  \"removing service) got '%s'\\n\", conf_list[i]);\n            ret = EINVAL;\n            goto done;\n        }\n    }\n\n    expected_sc_list_size = default_sc_services_size + ai + 1;\n\n    sc_list = talloc_zero_array(tmp_ctx, char *, expected_sc_list_size);\n    if (sc_list == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    for (int i = 0; add_list[i] != NULL; ++i) {\n        if (service_in_list(remove_list, ri, add_list[i])) {\n            continue;\n        }\n\n        sc_list[j] = talloc_strdup(sc_list, add_list[i]);\n        if (sc_list[j] == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        ++j;\n    }\n\n    for (int i = 0; default_sc_services[i] != NULL; ++i) {\n        if (service_in_list(remove_list, ri, default_sc_services[i])) {\n            continue;\n        }\n\n        sc_list[j] = talloc_strdup(sc_list, default_sc_services[i]);\n        if (sc_list[j] == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        ++j;\n    }\n\n    if (_sc_list != NULL) {\n        *_sc_list = talloc_steal(mem_ctx, sc_list);\n    }\n\ndone:\n    talloc_zfree(tmp_ctx);\n\n    return ret;\n}\n\nbool may_do_cert_auth(struct pam_ctx *pctx, struct pam_data *pd)\n{\n    size_t c;\n    errno_t ret;\n\n    if (!pctx->cert_auth) {\n        return false;\n    }\n\n    if (pd->cmd != SSS_PAM_PREAUTH && pd->cmd != SSS_PAM_AUTHENTICATE) {\n        return false;\n    }\n\n    if (pd->cmd == SSS_PAM_AUTHENTICATE\n           && sss_authtok_get_type(pd->authtok) != SSS_AUTHTOK_TYPE_SC_PIN\n           && sss_authtok_get_type(pd->authtok) != SSS_AUTHTOK_TYPE_SC_KEYPAD) {\n        return false;\n    }\n\n    if (pd->service == NULL || *pd->service == '\\0') {\n        return false;\n    }\n\n    /* Initialize smartcard allowed services just once */\n    if (pctx->smartcard_services == NULL) {\n        ret = get_sc_services(pctx, pctx, &pctx->smartcard_services);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Failed to get p11 allowed services %d[%s]\",\n                  ret, sss_strerror(ret));\n            sss_log(SSS_LOG_ERR,\n                    \"Failed to evaluate pam_p11_allowed_services option, \"\n                    \"please check for typos in the SSSD configuration\");\n            return false;\n        }\n    }\n\n    for (c = 0; pctx->smartcard_services[c] != NULL; c++) {\n        if (strcmp(pd->service, pctx->smartcard_services[c]) == 0) {\n            break;\n        }\n    }\n    if (pctx->smartcard_services[c] == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"Smartcard authentication for service [%s] not supported.\\n\",\n              pd->service);\n        return false;\n    }\n\n    return true;\n}\n\nstatic errno_t get_p11_child_write_buffer(TALLOC_CTX *mem_ctx,\n                                          struct pam_data *pd,\n                                          uint8_t **_buf, size_t *_len)\n{\n    int ret;\n    uint8_t *buf;\n    size_t len;\n    const char *pin = NULL;\n\n    if (pd == NULL || pd->authtok == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing authtok.\\n\");\n        return EINVAL;\n    }\n\n    switch (sss_authtok_get_type(pd->authtok)) {\n    case SSS_AUTHTOK_TYPE_SC_PIN:\n        ret = sss_authtok_get_sc_pin(pd->authtok, &pin, &len);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_authtok_get_sc_pin failed.\\n\");\n            return ret;\n        }\n        if (pin == NULL || len == 0) {\n            DEBUG(SSSDBG_CRIT_FAILURE, \"Missing PIN.\\n\");\n            return EINVAL;\n        }\n\n        buf = talloc_size(mem_ctx, len);\n        if (buf == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_size failed.\\n\");\n            return ENOMEM;\n        }\n\n        safealign_memcpy(buf, pin, len, NULL);\n\n        break;\n    case SSS_AUTHTOK_TYPE_SC_KEYPAD:\n        /* Nothing to send */\n        len = 0;\n        buf = NULL;\n        break;\n    default:\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Unsupported authtok type [%d].\\n\",\n                                   sss_authtok_get_type(pd->authtok));\n        return EINVAL;\n    }\n\n    *_len = len;\n    *_buf = buf;\n\n    return EOK;\n}\n\nstatic errno_t parse_p11_child_response(TALLOC_CTX *mem_ctx, uint8_t *buf,\n                                        ssize_t buf_len,\n                                        struct sss_certmap_ctx *sss_certmap_ctx,\n                                        struct cert_auth_info **_cert_list)\n{\n    int ret;\n    TALLOC_CTX *tmp_ctx = NULL;\n    uint8_t *p;\n    uint8_t *pn;\n    struct cert_auth_info *cert_list = NULL;\n    struct cert_auth_info *cert_auth_info;\n    unsigned char *der = NULL;\n    size_t der_size;\n\n    if (buf_len < 0) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"Error occurred while reading data from p11_child.\\n\");\n        return EIO;\n    }\n\n    if (buf_len == 0) {\n        DEBUG(SSSDBG_TRACE_LIBS, \"No certificate found.\\n\");\n        ret = EOK;\n        goto done;\n    }\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_new failed.\\n\");\n        return ENOMEM;\n    }\n\n    p = buf;\n\n    do {\n        cert_auth_info = talloc_zero(tmp_ctx, struct cert_auth_info);\n        if (cert_auth_info == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_zero failed.\\n\");\n            return ENOMEM;\n        }\n\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            return EINVAL;\n        }\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing counter in p11_child response.\\n\");\n            return EINVAL;\n        }\n\n        cert_auth_info->token_name = talloc_strndup(cert_auth_info, (char *)p,\n                                                    (pn - p));\n        if (cert_auth_info->token_name == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found token name [%s].\\n\",\n              cert_auth_info->token_name);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing module name in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->module_name = talloc_strndup(cert_auth_info, (char *)p,\n                                                     (pn - p));\n        if (cert_auth_info->module_name == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found module name [%s].\\n\",\n              cert_auth_info->module_name);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing key id in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->key_id = talloc_strndup(cert_auth_info, (char *)p,\n                                                (pn - p));\n        if (cert_auth_info->key_id == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found key id [%s].\\n\", cert_auth_info->key_id);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing label in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->label = talloc_strndup(cert_auth_info, (char *) p,\n                                               (pn - p));\n        if (cert_auth_info->label == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found label [%s].\\n\", cert_auth_info->label);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE, \"Missing cert in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->cert = talloc_strndup(cert_auth_info, (char *)p,\n                                              (pn - p));\n        if (cert_auth_info->cert == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found cert [%s].\\n\", cert_auth_info->cert);\n\n        der = sss_base64_decode(tmp_ctx, cert_auth_info->cert, &der_size);\n        if (der == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_base64_decode failed.\\n\");\n            ret = EIO;\n            goto done;\n        }\n\n        ret = sss_certmap_match_cert(sss_certmap_ctx, der, der_size);\n        if (ret == 0) {\n            DLIST_ADD(cert_list, cert_auth_info);\n        } else {\n            DEBUG(SSSDBG_TRACE_LIBS,\n                  \"Cert [%s] does not match matching rules and is ignored.\\n\",\n                  cert_auth_info->cert);\n            talloc_free(cert_auth_info);\n        }\n\n        p = ++pn;\n    } while ((pn - buf) < buf_len);\n\n    ret = EOK;\n\ndone:\n    if (ret == EOK) {\n        DLIST_FOR_EACH(cert_auth_info, cert_list) {\n            talloc_steal(mem_ctx, cert_auth_info);\n        }\n\n        *_cert_list = cert_list;\n    }\n\n    talloc_free(tmp_ctx);\n\n    return ret;\n}\n\nstruct pam_check_cert_state {\n    int child_status;\n    struct sss_child_ctx_old *child_ctx;\n    struct tevent_timer *timeout_handler;\n    struct tevent_context *ev;\n    struct sss_certmap_ctx *sss_certmap_ctx;\n\n    struct child_io_fds *io;\n\n    struct cert_auth_info *cert_list;\n};\n\nstatic void p11_child_write_done(struct tevent_req *subreq);\nstatic void p11_child_done(struct tevent_req *subreq);\nstatic void p11_child_timeout(struct tevent_context *ev,\n                              struct tevent_timer *te,\n                              struct timeval tv, void *pvt);\n\nstruct tevent_req *pam_check_cert_send(TALLOC_CTX *mem_ctx,\n                                       struct tevent_context *ev,\n                                       const char *nss_db,\n                                       time_t timeout,\n                                       const char *verify_opts,\n                                       struct sss_certmap_ctx *sss_certmap_ctx,\n                                       const char *uri,\n                                       struct pam_data *pd)\n{\n    errno_t ret;\n    struct tevent_req *req;\n    struct tevent_req *subreq;\n    struct pam_check_cert_state *state;\n    pid_t child_pid;\n    struct timeval tv;\n    int pipefd_to_child[2] = PIPE_INIT;\n    int pipefd_from_child[2] = PIPE_INIT;\n    const char *extra_args[16] = { NULL };\n    uint8_t *write_buf = NULL;\n    size_t write_buf_len = 0;\n    size_t arg_c;\n    const char *module_name = NULL;\n    const char *token_name = NULL;\n    const char *key_id = NULL;\n\n    req = tevent_req_create(mem_ctx, &state, struct pam_check_cert_state);\n    if (req == NULL) {\n        return NULL;\n    }\n\n    if (nss_db == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing NSS DB.\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    if (sss_certmap_ctx == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing certificate matching context.\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    /* extra_args are added in revers order */\n    arg_c = 0;\n    if (uri != NULL) {\n        DEBUG(SSSDBG_TRACE_ALL, \"Adding PKCS#11 URI [%s].\\n\", uri);\n        extra_args[arg_c++] = uri;\n        extra_args[arg_c++] = \"--uri\";\n    }\n\n    if ((pd->cli_flags & PAM_CLI_FLAGS_REQUIRE_CERT_AUTH) && pd->priv == 1) {\n        extra_args[arg_c++] = \"--wait_for_card\";\n    }\n    extra_args[arg_c++] = nss_db;\n    extra_args[arg_c++] = \"--nssdb\";\n    if (verify_opts != NULL) {\n        extra_args[arg_c++] = verify_opts;\n        extra_args[arg_c++] = \"--verify\";\n    }\n\n    if (sss_authtok_get_type(pd->authtok) == SSS_AUTHTOK_TYPE_SC_PIN\n            || sss_authtok_get_type(pd->authtok) == SSS_AUTHTOK_TYPE_SC_KEYPAD) {\n        ret = sss_authtok_get_sc(pd->authtok, NULL, NULL, &token_name, NULL,\n                                 &module_name, NULL, &key_id, NULL);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_authtok_get_sc failed.\\n\");\n            goto done;\n        }\n\n        if (module_name != NULL && *module_name != '\\0') {\n            extra_args[arg_c++] = module_name;\n            extra_args[arg_c++] = \"--module_name\";\n        }\n        if (token_name != NULL && *token_name != '\\0') {\n            extra_args[arg_c++] = token_name;\n            extra_args[arg_c++] = \"--token_name\";\n        }\n        if (key_id != NULL && *key_id != '\\0') {\n            extra_args[arg_c++] = key_id;\n            extra_args[arg_c++] = \"--key_id\";\n        }\n    }\n\n    if (pd->cmd == SSS_PAM_AUTHENTICATE) {\n        extra_args[arg_c++] = \"--auth\";\n        switch (sss_authtok_get_type(pd->authtok)) {\n        case SSS_AUTHTOK_TYPE_SC_PIN:\n            extra_args[arg_c++] = \"--pin\";\n            break;\n        case SSS_AUTHTOK_TYPE_SC_KEYPAD:\n            extra_args[arg_c++] = \"--keypad\";\n            break;\n        default:\n            DEBUG(SSSDBG_OP_FAILURE, \"Unsupported authtok type.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n    } else if (pd->cmd == SSS_PAM_PREAUTH) {\n        extra_args[arg_c++] = \"--pre\";\n    } else {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Unexpected PAM command [%d}.\\n\", pd->cmd);\n        ret = EINVAL;\n        goto done;\n    }\n\n    state->ev = ev;\n    state->sss_certmap_ctx = sss_certmap_ctx;\n    state->child_status = EFAULT;\n    state->io = talloc(state, struct child_io_fds);\n    if (state->io == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"talloc failed.\\n\");\n        ret = ENOMEM;\n        goto done;\n    }\n    state->io->write_to_child_fd = -1;\n    state->io->read_from_child_fd = -1;\n    talloc_set_destructor((void *) state->io, child_io_destructor);\n\n    ret = pipe(pipefd_from_child);\n    if (ret == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"pipe failed [%d][%s].\\n\", ret, strerror(ret));\n        goto done;\n    }\n    ret = pipe(pipefd_to_child);\n    if (ret == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"pipe failed [%d][%s].\\n\", ret, strerror(ret));\n        goto done;\n    }\n\n    child_pid = fork();\n    if (child_pid == 0) { /* child */\n        exec_child_ex(state, pipefd_to_child, pipefd_from_child,\n                      P11_CHILD_PATH, P11_CHILD_LOG_FILE, extra_args, false,\n                      STDIN_FILENO, STDOUT_FILENO);\n\n        /* We should never get here */\n        DEBUG(SSSDBG_CRIT_FAILURE, \"BUG: Could not exec p11 child\\n\");\n    } else if (child_pid > 0) { /* parent */\n\n        state->io->read_from_child_fd = pipefd_from_child[0];\n        PIPE_FD_CLOSE(pipefd_from_child[1]);\n        sss_fd_nonblocking(state->io->read_from_child_fd);\n\n        state->io->write_to_child_fd = pipefd_to_child[1];\n        PIPE_FD_CLOSE(pipefd_to_child[0]);\n        sss_fd_nonblocking(state->io->write_to_child_fd);\n\n        /* Set up SIGCHLD handler */\n        ret = child_handler_setup(ev, child_pid, NULL, NULL, &state->child_ctx);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"Could not set up child handlers [%d]: %s\\n\",\n                ret, sss_strerror(ret));\n            ret = ERR_P11_CHILD;\n            goto done;\n        }\n\n        /* Set up timeout handler */\n        tv = tevent_timeval_current_ofs(timeout, 0);\n        state->timeout_handler = tevent_add_timer(ev, req, tv,\n                                                  p11_child_timeout, req);\n        if(state->timeout_handler == NULL) {\n            ret = ERR_P11_CHILD;\n            goto done;\n        }\n\n        if (pd->cmd == SSS_PAM_AUTHENTICATE) {\n            ret = get_p11_child_write_buffer(state, pd, &write_buf,\n                                             &write_buf_len);\n            if (ret != EOK) {\n                DEBUG(SSSDBG_OP_FAILURE,\n                      \"get_p11_child_write_buffer failed.\\n\");\n                goto done;\n            }\n        }\n\n        if (write_buf_len != 0) {\n            subreq = write_pipe_send(state, ev, write_buf, write_buf_len,\n                                     state->io->write_to_child_fd);\n            if (subreq == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"write_pipe_send failed.\\n\");\n                ret = ERR_P11_CHILD;\n                goto done;\n            }\n            tevent_req_set_callback(subreq, p11_child_write_done, req);\n        } else {\n            subreq = read_pipe_send(state, ev, state->io->read_from_child_fd);\n            if (subreq == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"read_pipe_send failed.\\n\");\n                ret = ERR_P11_CHILD;\n                goto done;\n            }\n            tevent_req_set_callback(subreq, p11_child_done, req);\n        }\n\n        /* Now either wait for the timeout to fire or the child\n         * to finish\n         */\n    } else { /* error */\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE, \"fork failed [%d][%s].\\n\",\n                                   ret, sss_strerror(ret));\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    if (ret != EOK) {\n        PIPE_CLOSE(pipefd_from_child);\n        PIPE_CLOSE(pipefd_to_child);\n        tevent_req_error(req, ret);\n        tevent_req_post(req, ev);\n    }\n    return req;\n}\n\nstatic void p11_child_write_done(struct tevent_req *subreq)\n{\n    struct tevent_req *req = tevent_req_callback_data(subreq,\n                                                      struct tevent_req);\n    struct pam_check_cert_state *state = tevent_req_data(req,\n                                                   struct pam_check_cert_state);\n    int ret;\n\n    ret = write_pipe_recv(subreq);\n    talloc_zfree(subreq);\n    if (ret != EOK) {\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    PIPE_FD_CLOSE(state->io->write_to_child_fd);\n\n    subreq = read_pipe_send(state, state->ev, state->io->read_from_child_fd);\n    if (subreq == NULL) {\n        tevent_req_error(req, ENOMEM);\n        return;\n    }\n    tevent_req_set_callback(subreq, p11_child_done, req);\n}\n\nstatic void p11_child_done(struct tevent_req *subreq)\n{\n    uint8_t *buf;\n    ssize_t buf_len;\n    struct tevent_req *req = tevent_req_callback_data(subreq,\n                                                      struct tevent_req);\n    struct pam_check_cert_state *state = tevent_req_data(req,\n                                                   struct pam_check_cert_state);\n    int ret;\n\n    talloc_zfree(state->timeout_handler);\n\n    ret = read_pipe_recv(subreq, state, &buf, &buf_len);\n    talloc_zfree(subreq);\n    if (ret != EOK) {\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    PIPE_FD_CLOSE(state->io->read_from_child_fd);\n\n    ret = parse_p11_child_response(state, buf, buf_len, state->sss_certmap_ctx,\n                                   &state->cert_list);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"parse_p11_child_response failed.\\n\");\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    tevent_req_done(req);\n    return;\n}\n\nstatic void p11_child_timeout(struct tevent_context *ev,\n                              struct tevent_timer *te,\n                              struct timeval tv, void *pvt)\n{\n    struct tevent_req *req = talloc_get_type(pvt, struct tevent_req);\n    struct pam_check_cert_state *state =\n                              tevent_req_data(req, struct pam_check_cert_state);\n\n    DEBUG(SSSDBG_CRIT_FAILURE,\n          \"Timeout reached for p11_child, \"\n          \"consider increasing p11_child_timeout.\\n\");\n    child_handler_destroy(state->child_ctx);\n    state->child_ctx = NULL;\n    state->child_status = ETIMEDOUT;\n    tevent_req_error(req, ERR_P11_CHILD_TIMEOUT);\n}\n\nerrno_t pam_check_cert_recv(struct tevent_req *req, TALLOC_CTX *mem_ctx,\n                            struct cert_auth_info **cert_list)\n{\n    struct cert_auth_info *tmp_cert_auth_info;\n    struct pam_check_cert_state *state =\n                              tevent_req_data(req, struct pam_check_cert_state);\n\n    TEVENT_REQ_RETURN_ON_ERROR(req);\n\n    if (cert_list != NULL) {\n        DLIST_FOR_EACH(tmp_cert_auth_info, state->cert_list) {\n            talloc_steal(mem_ctx, tmp_cert_auth_info);\n        }\n\n        *cert_list = state->cert_list;\n    }\n\n    return EOK;\n}\n\nstatic char *get_cert_prompt(TALLOC_CTX *mem_ctx,\n                             struct cert_auth_info *cert_info)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx = NULL;\n    unsigned char *der = NULL;\n    size_t der_size;\n    char *prompt = NULL;\n    char *filter = NULL;\n    char **domains = NULL;\n\n    ret = sss_certmap_init(mem_ctx, NULL, NULL, &ctx);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_init failed.\\n\");\n        return NULL;\n    }\n\n    ret = sss_certmap_add_rule(ctx, 10, \"KRB5:<ISSUER>.*\",\n                               \"LDAP:{subject_dn!nss}\", NULL);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_add_rule failed.\\n\");\n        goto done;\n    }\n\n    der = sss_base64_decode(mem_ctx, sss_cai_get_cert(cert_info), &der_size);\n    if (der == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_base64_decode failed.\\n\");\n        goto done;\n    }\n\n    ret = sss_certmap_get_search_filter(ctx, der, der_size, &filter, &domains);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_get_search_filter failed.\\n\");\n        goto done;\n    }\n\n    prompt = talloc_asprintf(mem_ctx, \"%s\\n%s\", sss_cai_get_label(cert_info),\n                                                filter);\n    if (prompt == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n    }\n\ndone:\n    sss_certmap_free_filter_and_domains(filter, domains);\n    sss_certmap_free_ctx(ctx);\n    talloc_free(der);\n\n    return prompt;\n}\n\nstatic errno_t pack_cert_data(TALLOC_CTX *mem_ctx, const char *sysdb_username,\n                              struct cert_auth_info *cert_info,\n                              const char *nss_name,\n                              uint8_t **_msg, size_t *_msg_len)\n{\n    uint8_t *msg = NULL;\n    size_t msg_len;\n    const char *token_name;\n    const char *module_name;\n    const char *key_id;\n    char *prompt;\n    size_t user_len;\n    size_t token_len;\n    size_t module_len;\n    size_t key_id_len;\n    size_t prompt_len;\n    size_t nss_name_len;\n    const char *username = \"\";\n    const char *nss_username = \"\";\n\n    if (sysdb_username != NULL) {\n        username = sysdb_username;\n    }\n\n    if (nss_name != NULL) {\n        nss_username = nss_name;\n    }\n\n    prompt = get_cert_prompt(mem_ctx, cert_info);\n    if (prompt == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"get_cert_prompt failed.\\n\");\n        return EIO;\n    }\n\n    token_name = sss_cai_get_token_name(cert_info);\n    module_name = sss_cai_get_module_name(cert_info);\n    key_id = sss_cai_get_key_id(cert_info);\n\n    user_len = strlen(username) + 1;\n    token_len = strlen(token_name) + 1;\n    module_len = strlen(module_name) + 1;\n    key_id_len = strlen(key_id) + 1;\n    prompt_len = strlen(prompt) + 1;\n    nss_name_len = strlen(nss_username) +1;\n\n    msg_len = user_len + token_len + module_len + key_id_len + prompt_len\n                       + nss_name_len;\n\n    msg = talloc_zero_size(mem_ctx, msg_len);\n    if (msg == NULL) {\n        talloc_free(prompt);\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_zero_size failed.\\n\");\n        return ENOMEM;\n    }\n\n    memcpy(msg, username, user_len);\n    memcpy(msg + user_len, token_name, token_len);\n    memcpy(msg + user_len + token_len, module_name, module_len);\n    memcpy(msg + user_len + token_len + module_len, key_id, key_id_len);\n    memcpy(msg + user_len + token_len + module_len + key_id_len,\n           prompt, prompt_len);\n    memcpy(msg + user_len + token_len + module_len + key_id_len + prompt_len,\n           nss_username, nss_name_len);\n    talloc_free(prompt);\n\n    if (_msg != NULL) {\n        *_msg = msg;\n    }\n\n    if (_msg_len != NULL) {\n        *_msg_len = msg_len;\n    }\n\n    return EOK;\n}\n\n/* The PKCS11_LOGIN_TOKEN_NAME environment variable is e.g. used by the Gnome\n * Settings Daemon to determine the name of the token used for login but it\n * should be only set if SSSD is called by gdm-smartcard. Otherwise desktop\n * components might assume that gdm-smartcard PAM stack is configured\n * correctly which might not be the case e.g. if Smartcard authentication was\n * used when running gdm-password. */\n#define PKCS11_LOGIN_TOKEN_ENV_NAME \"PKCS11_LOGIN_TOKEN_NAME\"\n\nerrno_t add_pam_cert_response(struct pam_data *pd, struct sss_domain_info *dom,\n                              const char *sysdb_username,\n                              struct cert_auth_info *cert_info,\n                              enum response_type type)\n{\n    uint8_t *msg = NULL;\n    char *env = NULL;\n    size_t msg_len;\n    int ret;\n    char *short_name = NULL;\n    char *domain_name = NULL;\n    const char *cert_info_name = sysdb_username;\n    struct sss_domain_info *user_dom;\n    char *nss_name = NULL;\n\n\n    if (type != SSS_PAM_CERT_INFO && type != SSS_PAM_CERT_INFO_WITH_HINT) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Invalid response type [%d].\\n\", type);\n        return EINVAL;\n    }\n\n    if ((type == SSS_PAM_CERT_INFO && sysdb_username == NULL)\n            || cert_info == NULL\n            || sss_cai_get_token_name(cert_info) == NULL\n            || sss_cai_get_module_name(cert_info) == NULL\n            || sss_cai_get_key_id(cert_info) == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing mandatory user or slot name.\\n\");\n        return EINVAL;\n    }\n\n    /* sysdb_username is a fully-qualified name which is used by pam_sss when\n     * prompting the user for the PIN and as login name if it wasn't set by\n     * the PAM caller but has to be determined based on the inserted\n     * Smartcard. If this type of name is irritating at the PIN prompt or the\n     * re_expression config option was set in a way that user@domain cannot be\n     * handled anymore some more logic has to be added here. But for the time\n     * being I think using sysdb_username is fine.\n     * As special case is the files provider which handles local users which\n     * by definition only have a short name. To avoid confusion by other\n     * modules on the PAM stack the short name is returned in this case. */\n\n    if (sysdb_username != NULL) {\n        ret = sss_parse_internal_fqname(pd, sysdb_username,\n                                        &short_name, &domain_name);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE, \"Unable to parse name '%s' [%d]: %s, \"\n                                       \"using full name.\\n\",\n                                        sysdb_username, ret, sss_strerror(ret));\n        } else {\n            if (domain_name != NULL) {\n                user_dom = find_domain_by_name(dom, domain_name, false);\n\n                if (user_dom != NULL) {\n                    ret = sss_output_fqname(short_name, user_dom,\n                                            sysdb_username, false, &nss_name);\n                    if (ret != EOK) {\n                        nss_name = NULL;\n                    }\n                }\n            }\n\n        }\n    }\n\n    ret = pack_cert_data(pd, cert_info_name, cert_info,\n                         nss_name != NULL ? nss_name : sysdb_username,\n                         &msg, &msg_len);\n    talloc_free(short_name);\n    talloc_free(domain_name);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"pack_cert_data failed.\\n\");\n        return ret;\n    }\n\n    ret = pam_add_response(pd, type, msg_len, msg);\n    talloc_free(msg);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"pam_add_response failed to add certificate info.\\n\");\n        return ret;\n    }\n\n    if (strcmp(pd->service, \"gdm-smartcard\") == 0) {\n        env = talloc_asprintf(pd, \"%s=%s\", PKCS11_LOGIN_TOKEN_ENV_NAME,\n                              sss_cai_get_token_name(cert_info));\n        if (env == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_asprintf failed.\\n\");\n            return ENOMEM;\n        }\n\n        ret = pam_add_response(pd, SSS_PAM_ENV_ITEM, strlen(env) + 1,\n                               (uint8_t *)env);\n        talloc_free(env);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"pam_add_response failed to add environment variable.\\n\");\n            return ret;\n        }\n    }\n\n    return ret;\n}\n", "/*\n    SSSD\n\n    certmap - Tests for SSSD's certificate mapping library\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\n#include <popt.h>\n\n#include \"lib/certmap/sss_certmap.h\"\n#include \"lib/certmap/sss_certmap_int.h\"\n\n#include \"util/crypto/sss_crypto.h\"\n\n#include \"tests/cmocka/common_mock.h\"\n#include \"tests/common.h\"\n\n#ifdef HAVE_NSS\n#include \"util/crypto/nss/nss_util.h\"\n#endif\n\n#ifdef HAVE_LIBCRYPTO\n#include <openssl/crypto.h>\n#endif\n\n#ifdef HAVE_TEST_CA\n#include \"tests/test_CA/SSSD_test_cert_x509_0003.h\"\n#include \"tests/test_CA/SSSD_test_cert_x509_0004.h\"\n#else\n#define SSSD_TEST_CERT_0003 \"\"\n#define SSSD_TEST_CERT_0004 \"\"\n#endif\n\nstruct priv_sss_debug {\n    int level;\n};\n\nvoid ext_debug(void *private, const char *file, long line, const char *function,\n               const char *format, ...)\n{\n    va_list ap;\n    struct priv_sss_debug *data = private;\n    int level = SSSDBG_OP_FAILURE;\n\n    if (data != NULL) {\n        level = data->level;\n    }\n\n    if (DEBUG_IS_SET(level)) {\n        va_start(ap, format);\n        sss_vdebug_fn(file, line, function, level, APPEND_LINE_FEED,\n                      format, ap);\n        va_end(ap);\n    }\n}\n\nstatic void test_sss_certmap_init(void **state)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n\n    sss_certmap_free_ctx(ctx);\n}\n\nstatic struct sss_certmap_ctx *setup_prio(const int *l)\n{\n    int ret;\n    size_t c;\n    struct sss_certmap_ctx *ctx;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n\n    for (c = 0; c < 10; c++) {\n        ret = sss_certmap_add_rule(ctx, l[c], NULL, NULL, NULL);\n        assert_int_equal(ret, EOK);\n    }\n\n    return ctx;\n}\n\nstatic void test_sss_certmap_add_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int i;\n    struct priority_list *p;\n    struct priority_list *last;\n    size_t c;\n\n    const int tests_a[][10] = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n                               {9, 8, 7, 6, 5, 4, 3, 2, 1, 0},\n                               {1, 3, 5 ,7, 9, 0, 2, 4, 6, 8},\n                               {0, 2, 4, 6, 8, 1, 3, 5, 7, 9},\n                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n\n    const int tests_b[][10] = {{0, 0, 0, 0, 1, 1, 1, 2, 2, 2},\n                               {2, 2, 2, 1, 1, 1, 0, 0, 0, 0},\n                               {0, 1, 2, 0, 1, 2, 0, 1, 2, 0},\n                               {0, 2, 1, 0, 2, 1, 0, 2, 1, 0},\n                               {0, 1, 2, 0, 2, 1, 0, 0, 1, 2},\n                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n\n    for (c = 0; tests_a[c][0] != 0 || tests_a[c][9] != 0; c++) {\n        ctx = setup_prio(tests_a[0]);\n        assert_non_null(ctx);\n        i = 0;\n        for (p = ctx->prio_list; p != NULL; p = p->next) {\n            assert_int_equal(i, p->priority);\n            assert_non_null(p->rule_list);\n            assert_int_equal(i, p->rule_list->priority);\n            assert_null(p->rule_list->prev);\n            assert_null(p->rule_list->next);\n            i++;\n        }\n\n        i = 9;\n        for (last = ctx->prio_list; last->next != NULL; last = last->next);\n        for (p = last; p != NULL; p = p->prev) {\n            assert_int_equal(i, p->priority);\n            assert_int_equal(i, p->rule_list->priority);\n            i--;\n        }\n\n        sss_certmap_free_ctx(ctx);\n    }\n    for (c = 0; tests_b[c][0] != 0 || tests_b[c][9] != 0; c++) {\n        ctx = setup_prio(tests_b[0]);\n        assert_non_null(ctx);\n        i = 0;\n        for (p = ctx->prio_list; p != NULL; p = p->next) {\n            assert_int_equal(i, p->priority);\n            assert_non_null(p->rule_list);\n            assert_int_equal(i, p->rule_list->priority);\n            assert_null(p->rule_list->prev);\n            assert_non_null(p->rule_list->next);\n            assert_ptr_equal(p->rule_list, p->rule_list->next->prev);\n            assert_non_null(p->rule_list->next->next);\n            assert_ptr_equal(p->rule_list->next,\n                             p->rule_list->next->next->prev);\n            if (i == 0) {\n                assert_non_null(p->rule_list->next->next->next);\n                assert_ptr_equal(p->rule_list->next->next,\n                                 p->rule_list->next->next->next->prev);\n                assert_null(p->rule_list->next->next->next->next);\n            } else {\n                assert_null(p->rule_list->next->next->next);\n            }\n            i++;\n        }\n        sss_certmap_free_ctx(ctx);\n    }\n}\n\nstatic void test_sss_certmap_add_matching_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"fsdf\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"FDSF:fsdf\", NULL, NULL);\n    assert_int_equal(ret, ESRCH);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<rgerge>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<rgerge>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<ISSUER>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SUBJECT>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>ddqwdq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>digitalSignature,dddq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>dwqwqw\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>.\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>.1.2.3\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>1.2.3.\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>1.a.3\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:fwfwef>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:rfc822Name\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    /* invalid base64 input */\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:ediPartyName>...\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    /* invalid OID input */\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:.>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:.1>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:1.>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:11>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"&&<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:||<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_or);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<ISSUER>a<SUBJECT>b\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"b\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1000,\n                               \"KRB5:<ISSUER>a<SUBJECT>b<ISSUER>c<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n\n    ret = sss_certmap_add_rule(ctx, 99,\n                               \"KRB5:<ISSUER>a<SUBJECT>b\"\n                               \"<KU>dataEncipherment,cRLSign<ISSUER>c\"\n                               \"<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->ku);\n    assert_int_equal(SSS_KU_CRL_SIGN|SSS_KU_DATA_ENCIPHERMENT,\n               ctx->prio_list->rule_list->parsed_match_rule->ku->ku);\n\n    ret = sss_certmap_add_rule(ctx, 98,\n                               \"KRB5:<ISSUER>a<SUBJECT>b\"\n                               \"<KU>dataEncipherment,cRLSign<ISSUER>c\"\n                               \"<EKU>clientAuth,emailProtection\"\n                               \"<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->ku);\n    assert_int_equal(SSS_KU_CRL_SIGN|SSS_KU_DATA_ENCIPHERMENT,\n               ctx->prio_list->rule_list->parsed_match_rule->ku->ku);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[2]);\n\n    ret = sss_certmap_add_rule(ctx, 97,\n                               \"KRB5:<EKU>clientAuth,1.2.3,emailProtection\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.2.3\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[3]);\n\n    ret = sss_certmap_add_rule(ctx, 96,\n                               \"KRB5:<EKU>1.2.3\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.2.3\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[1]);\n\n    /* SAN tests */\n    ret = sss_certmap_add_rule(ctx, 89, \"KRB5:<SAN>abc\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_PRINCIPAL);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"abc\");\n\n    ret = sss_certmap_add_rule(ctx, 88, \"KRB5:<SAN:dnsName>def\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_DNS_NAME);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"def\");\n\n    ret = sss_certmap_add_rule(ctx, 87, \"KRB5:<SAN:x400Address>aGlq\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_X400_ADDRESS);\n    assert_int_equal(\n                 ctx->prio_list->rule_list->parsed_match_rule->san->bin_val_len,\n                 3);\n    assert_memory_equal(\n                     ctx->prio_list->rule_list->parsed_match_rule->san->bin_val,\n                     \"hij\", 3);\n\n    ret = sss_certmap_add_rule(ctx, 86, \"KRB5:<SAN:1.2.3.4>klm\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_STRING_OTHER_NAME);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"klm\");\n    assert_string_equal(\"1.2.3.4\",\n         ctx->prio_list->rule_list->parsed_match_rule->san->str_other_name_oid);\n\n    talloc_free(ctx);\n}\n\nstatic void test_check_ad_attr_name(void **state)\n{\n    char *res;\n\n    res = check_ad_attr_name(NULL, NULL);\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"dsddqwdas\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"dsddq=wdas\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"CN=abc\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"O=xyz\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"ST=def\");\n    assert_non_null(res);\n    assert_string_equal(res, \"S=def\");\n    talloc_free(res);\n}\n\nconst uint8_t test_cert_der[] = {\n0x30, 0x82, 0x04, 0x09, 0x30, 0x82, 0x02, 0xf1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x09,\n0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,\n0x34, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x09, 0x49, 0x50, 0x41, 0x2e,\n0x44, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x15,\n0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68,\n0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x35, 0x30, 0x34, 0x32, 0x38, 0x31,\n0x30, 0x32, 0x31, 0x31, 0x31, 0x5a, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x34, 0x32, 0x38, 0x31, 0x30,\n0x32, 0x31, 0x31, 0x31, 0x5a, 0x30, 0x32, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a,\n0x0c, 0x09, 0x49, 0x50, 0x41, 0x2e, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x1c, 0x30, 0x1a, 0x06,\n0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x69, 0x70, 0x61, 0x2d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2e,\n0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06,\n0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f,\n0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb2, 0x32, 0x92, 0xab, 0x47, 0xb8,\n0x0c, 0x13, 0x54, 0x4a, 0x1f, 0x1e, 0x29, 0x06, 0xff, 0xd0, 0x50, 0xcb, 0xf7, 0x5f, 0x79, 0x91,\n0x65, 0xb1, 0x39, 0x01, 0x83, 0x6a, 0xad, 0x9e, 0x77, 0x3b, 0xf3, 0x0d, 0xd7, 0xb9, 0xf6, 0xdc,\n0x9e, 0x4a, 0x49, 0xa7, 0xd0, 0x66, 0x72, 0xcc, 0xbf, 0x77, 0xd6, 0xde, 0xa9, 0xfe, 0x67, 0x96,\n0xcc, 0x49, 0xf1, 0x37, 0x23, 0x2e, 0xc4, 0x50, 0xf4, 0xeb, 0xba, 0x62, 0xd4, 0x23, 0x4d, 0xf3,\n0x37, 0x38, 0x82, 0xee, 0x3b, 0x3f, 0x2c, 0xd0, 0x80, 0x9b, 0x17, 0xaa, 0x9b, 0xeb, 0xa6, 0xdd,\n0xf6, 0x15, 0xff, 0x06, 0xb2, 0xce, 0xff, 0xdf, 0x8a, 0x9e, 0x95, 0x85, 0x49, 0x1f, 0x84, 0xfd,\n0x81, 0x26, 0xce, 0x06, 0x32, 0x0d, 0x36, 0xca, 0x7c, 0x15, 0x81, 0x68, 0x6b, 0x8f, 0x3e, 0xb3,\n0xa2, 0xfc, 0xae, 0xaf, 0xc2, 0x44, 0x58, 0x15, 0x95, 0x40, 0xfc, 0x56, 0x19, 0x91, 0x80, 0xed,\n0x42, 0x11, 0x66, 0x04, 0xef, 0x3c, 0xe0, 0x76, 0x33, 0x4b, 0x83, 0xfa, 0x7e, 0xb4, 0x47, 0xdc,\n0xfb, 0xed, 0x46, 0xa5, 0x8d, 0x0a, 0x66, 0x87, 0xa5, 0xef, 0x7b, 0x74, 0x62, 0xac, 0xbe, 0x73,\n0x36, 0xc9, 0xb4, 0xfe, 0x20, 0xc4, 0x81, 0xf3, 0xfe, 0x78, 0x19, 0xa8, 0xd0, 0xaf, 0x7f, 0x81,\n0x72, 0x24, 0x61, 0xd9, 0x76, 0x93, 0xe3, 0x0b, 0xd2, 0x4f, 0x19, 0x17, 0x33, 0x57, 0xd4, 0x82,\n0xb0, 0xf1, 0xa8, 0x03, 0xf6, 0x01, 0x99, 0xa9, 0xb8, 0x8c, 0x83, 0xc9, 0xba, 0x19, 0x87, 0xea,\n0xd6, 0x3b, 0x06, 0xeb, 0x4c, 0xf7, 0xf1, 0xe5, 0x28, 0xa9, 0x10, 0xb6, 0x46, 0xde, 0xe1, 0xe1,\n0x3f, 0xc1, 0xcc, 0x72, 0xbe, 0x2a, 0x43, 0xc6, 0xf6, 0xd0, 0xb5, 0xa0, 0xc4, 0x24, 0x6e, 0x4f,\n0xbd, 0xec, 0x22, 0x8a, 0x07, 0x11, 0x3d, 0xf9, 0xd3, 0x15, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3,\n0x82, 0x01, 0x26, 0x30, 0x82, 0x01, 0x22, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,\n0x30, 0x16, 0x80, 0x14, 0xf2, 0x9d, 0x42, 0x4e, 0x0f, 0xc4, 0x48, 0x25, 0x58, 0x2f, 0x1c, 0xce,\n0x0f, 0xa1, 0x3f, 0x22, 0xc8, 0x55, 0xc8, 0x91, 0x30, 0x3b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x01, 0x01, 0x04, 0x2f, 0x30, 0x2d, 0x30, 0x2b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x30, 0x01, 0x86, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x70, 0x61,\n0x2d, 0x63, 0x61, 0x2e, 0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x61,\n0x2f, 0x6f, 0x63, 0x73, 0x70, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04,\n0x04, 0x03, 0x02, 0x04, 0xf0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14,\n0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x03, 0x02, 0x30, 0x74, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x6d, 0x30, 0x6b, 0x30,\n0x69, 0xa0, 0x31, 0xa0, 0x2f, 0x86, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x70,\n0x61, 0x2d, 0x63, 0x61, 0x2e, 0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x69,\n0x70, 0x61, 0x2f, 0x63, 0x72, 0x6c, 0x2f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x52, 0x4c,\n0x2e, 0x62, 0x69, 0x6e, 0xa2, 0x34, 0xa4, 0x32, 0x30, 0x30, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03,\n0x55, 0x04, 0x0a, 0x0c, 0x05, 0x69, 0x70, 0x61, 0x63, 0x61, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03,\n0x55, 0x04, 0x03, 0x0c, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,\n0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\n0x0e, 0x04, 0x16, 0x04, 0x14, 0x2d, 0x2b, 0x3f, 0xcb, 0xf5, 0xb2, 0xff, 0x32, 0x2c, 0xa8, 0xc2,\n0x1c, 0xdd, 0xbd, 0x8c, 0x80, 0x1e, 0xdd, 0x31, 0x82, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,\n0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x9a, 0x47, 0x2e,\n0x50, 0xa7, 0x4d, 0x1d, 0x53, 0x0f, 0xc9, 0x71, 0x42, 0x0c, 0xe5, 0xda, 0x7d, 0x49, 0x64, 0xe7,\n0xab, 0xc8, 0xdf, 0xdf, 0x02, 0xc1, 0x87, 0xd1, 0x5b, 0xde, 0xda, 0x6f, 0x2b, 0xe4, 0xf0, 0xbe,\n0xba, 0x09, 0xdf, 0x02, 0x85, 0x0b, 0x8a, 0xe6, 0x9b, 0x06, 0x7d, 0x69, 0x38, 0x6c, 0x72, 0xff,\n0x4c, 0x7b, 0x2a, 0x0d, 0x3f, 0x23, 0x2f, 0x16, 0x46, 0xff, 0x05, 0x93, 0xb0, 0xea, 0x24, 0x28,\n0xd7, 0x12, 0xa1, 0x57, 0xb8, 0x59, 0x19, 0x25, 0xf3, 0x43, 0x0a, 0xd3, 0xfd, 0x0f, 0x37, 0x8d,\n0xb8, 0xca, 0x15, 0xe7, 0x48, 0x8a, 0xa0, 0xc7, 0xc7, 0x4b, 0x7f, 0x01, 0x3c, 0x58, 0xd7, 0x37,\n0xe5, 0xff, 0x7d, 0x2b, 0x01, 0xac, 0x0d, 0x9f, 0x51, 0x6a, 0xe5, 0x40, 0x24, 0xe6, 0x5e, 0x55,\n0x0d, 0xf7, 0xb8, 0x2f, 0x42, 0xac, 0x6d, 0xe5, 0x29, 0x6b, 0xc6, 0x0b, 0xa4, 0xbf, 0x19, 0xbd,\n0x39, 0x27, 0xee, 0xfe, 0xc5, 0xb3, 0xdb, 0x62, 0xd4, 0xbe, 0xd2, 0x47, 0xba, 0x96, 0x30, 0x5a,\n0xfd, 0x62, 0x00, 0xb8, 0x27, 0x5d, 0x2f, 0x3a, 0x94, 0x0b, 0x95, 0x35, 0x85, 0x40, 0x2c, 0xbc,\n0x67, 0xdf, 0x8a, 0xf9, 0xf1, 0x7b, 0x19, 0x96, 0x3e, 0x42, 0x48, 0x13, 0x23, 0x04, 0x95, 0xa9,\n0x6b, 0x11, 0x33, 0x81, 0x47, 0x5a, 0x83, 0x72, 0xf6, 0x20, 0xfa, 0x8e, 0x41, 0x7b, 0x8f, 0x77,\n0x47, 0x7c, 0xc7, 0x5d, 0x46, 0xf4, 0x4f, 0xfd, 0x81, 0x0a, 0xae, 0x39, 0x27, 0xb6, 0x6a, 0x26,\n0x63, 0xb1, 0xd3, 0xbf, 0x55, 0x83, 0x82, 0x9b, 0x36, 0x6c, 0x33, 0x64, 0x0f, 0x50, 0xc0, 0x55,\n0x94, 0x13, 0xc3, 0x85, 0xf4, 0xd5, 0x71, 0x65, 0xd0, 0xc0, 0xdd, 0xfc, 0xe6, 0xec, 0x9c, 0x5b,\n0xf0, 0x11, 0xb5, 0x2c, 0xf3, 0x48, 0xc1, 0x36, 0x8c, 0xa2, 0x96, 0x48, 0x84};\n\nconst uint8_t test_cert2_der[] = {\n0x30, 0x82, 0x06, 0x98, 0x30, 0x82, 0x05, 0x80, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0a, 0x61,\n0x22, 0x88, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa6, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,\n0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x45, 0x31, 0x15, 0x30, 0x13, 0x06, 0x0a,\n0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x05, 0x64, 0x65, 0x76, 0x65,\n0x6c, 0x31, 0x12, 0x30, 0x10, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01,\n0x19, 0x16, 0x02, 0x61, 0x64, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0f,\n0x61, 0x64, 0x2d, 0x41, 0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2d, 0x43, 0x41, 0x30,\n0x1e, 0x17, 0x0d, 0x31, 0x36, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x35, 0x31, 0x31, 0x31, 0x5a,\n0x17, 0x0d, 0x31, 0x37, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x35, 0x31, 0x31, 0x31, 0x5a, 0x30,\n0x70, 0x31, 0x15, 0x30, 0x13, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01,\n0x19, 0x16, 0x05, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x30, 0x10, 0x06, 0x0a, 0x09, 0x92,\n0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x02, 0x61, 0x64, 0x31, 0x0e, 0x30, 0x0c,\n0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x31, 0x0c, 0x30, 0x0a,\n0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x74, 0x20, 0x75, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09,\n0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x74, 0x65, 0x73, 0x74, 0x2e,\n0x75, 0x73, 0x65, 0x72, 0x40, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,\n0x6e, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,\n0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01,\n0x01, 0x00, 0x9c, 0xcf, 0x36, 0x99, 0xde, 0x63, 0x74, 0x2b, 0x77, 0x25, 0x9e, 0x24, 0xd9, 0x77,\n0x4b, 0x5f, 0x98, 0xc0, 0x8c, 0xd7, 0x20, 0x91, 0xc0, 0x1c, 0xe8, 0x37, 0x45, 0xbf, 0x3c, 0xd9,\n0x33, 0xbd, 0xe9, 0xde, 0xc9, 0x5d, 0xd4, 0xcd, 0x06, 0x0a, 0x0d, 0xd4, 0xf1, 0x7c, 0x74, 0x5b,\n0x29, 0xd5, 0x66, 0x9c, 0x2c, 0x9f, 0x6b, 0x1a, 0x0f, 0x0d, 0xe6, 0x6c, 0x62, 0xa5, 0x41, 0x4f,\n0xc3, 0xa4, 0x88, 0x27, 0x11, 0x5d, 0xb7, 0xb1, 0xfb, 0xf8, 0x8d, 0xee, 0x43, 0x8d, 0x93, 0xb5,\n0x8c, 0xb4, 0x34, 0x06, 0xf5, 0xe9, 0x2f, 0x5a, 0x26, 0x68, 0xd7, 0x43, 0x60, 0x82, 0x5e, 0x22,\n0xa7, 0xc6, 0x34, 0x40, 0x19, 0xa5, 0x8e, 0xf0, 0x58, 0x9f, 0x16, 0x2d, 0x43, 0x3f, 0x0c, 0xda,\n0xe2, 0x23, 0xf6, 0x09, 0x2a, 0x5e, 0xbd, 0x84, 0x27, 0xc8, 0xab, 0xd5, 0x70, 0xf8, 0x3d, 0x9c,\n0x14, 0xc2, 0xc2, 0xa2, 0x77, 0xe8, 0x44, 0x73, 0x10, 0x01, 0x34, 0x40, 0x1f, 0xc6, 0x2f, 0xa0,\n0x70, 0xee, 0x2f, 0xd5, 0x4b, 0xbe, 0x4c, 0xc7, 0x45, 0xf7, 0xac, 0x9c, 0xc3, 0x68, 0x5b, 0x1d,\n0x5a, 0x4b, 0x77, 0x65, 0x76, 0xe4, 0xb3, 0x92, 0xf4, 0x84, 0x0a, 0x9e, 0x6a, 0x9c, 0xc9, 0x53,\n0x42, 0x9f, 0x6d, 0xfe, 0xf9, 0xf5, 0xf2, 0x9a, 0x15, 0x50, 0x47, 0xef, 0xf4, 0x06, 0x59, 0xc8,\n0x50, 0x48, 0x4b, 0x46, 0x95, 0x68, 0x25, 0xc5, 0xbd, 0x4f, 0x65, 0x34, 0x00, 0xfc, 0x31, 0x69,\n0xf8, 0x3e, 0xe0, 0x20, 0x83, 0x41, 0x27, 0x0b, 0x5c, 0x46, 0x98, 0x14, 0xf0, 0x07, 0xde, 0x02,\n0x17, 0xb1, 0xd2, 0x9c, 0xbe, 0x1c, 0x0d, 0x56, 0x22, 0x1b, 0x02, 0xfe, 0xda, 0x69, 0xb9, 0xef,\n0x91, 0x37, 0x39, 0x7f, 0x24, 0xda, 0xc4, 0x81, 0x5e, 0x82, 0x31, 0x2f, 0x98, 0x1d, 0xf7, 0x73,\n0x5b, 0x23, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x03, 0x5d, 0x30, 0x82, 0x03, 0x59, 0x30,\n0x3d, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x07, 0x04, 0x30, 0x30, 0x2e,\n0x06, 0x26, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x08, 0x87, 0x85, 0xa1, 0x23, 0x84,\n0xc8, 0xb2, 0x26, 0x83, 0x9d, 0x9d, 0x21, 0x82, 0xd4, 0xa6, 0x1b, 0x86, 0xa3, 0xba, 0x37, 0x81,\n0x10, 0x85, 0x89, 0xd5, 0x02, 0xd6, 0x8f, 0x24, 0x02, 0x01, 0x64, 0x02, 0x01, 0x02, 0x30, 0x29,\n0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x22, 0x30, 0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,\n0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x04, 0x06, 0x0a, 0x2b,\n0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x0a, 0x03, 0x04, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f,\n0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x35, 0x06, 0x09, 0x2b, 0x06, 0x01,\n0x04, 0x01, 0x82, 0x37, 0x15, 0x0a, 0x04, 0x28, 0x30, 0x26, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06,\n0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,\n0x03, 0x04, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x0a, 0x03, 0x04,\n0x30, 0x81, 0x94, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x0f, 0x04, 0x81,\n0x86, 0x30, 0x81, 0x83, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01,\n0x2a, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x2d, 0x30, 0x0b,\n0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x16, 0x30, 0x0b, 0x06, 0x09, 0x60,\n0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x19, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,\n0x65, 0x03, 0x04, 0x01, 0x02, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,\n0x01, 0x05, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x03, 0x07, 0x30, 0x07,\n0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x07, 0x30, 0x0e, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7,\n0x0d, 0x03, 0x02, 0x02, 0x02, 0x00, 0x80, 0x30, 0x0e, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7,\n0x0d, 0x03, 0x04, 0x02, 0x02, 0x02, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,\n0x04, 0x14, 0x49, 0xac, 0xad, 0xe0, 0x65, 0x30, 0xc4, 0xce, 0xa0, 0x09, 0x03, 0x5b, 0xad, 0x4a,\n0x7b, 0x49, 0x5e, 0xc9, 0x6c, 0xb4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,\n0x16, 0x80, 0x14, 0x62, 0x50, 0xb6, 0x8d, 0xa1, 0xe6, 0x2d, 0x91, 0xbf, 0xb0, 0x54, 0x4d, 0x8f,\n0xa8, 0xca, 0x10, 0xae, 0xb8, 0xdd, 0x54, 0x30, 0x81, 0xcc, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04,\n0x81, 0xc4, 0x30, 0x81, 0xc1, 0x30, 0x81, 0xbe, 0xa0, 0x81, 0xbb, 0xa0, 0x81, 0xb8, 0x86, 0x81,\n0xb5, 0x6c, 0x64, 0x61, 0x70, 0x3a, 0x2f, 0x2f, 0x2f, 0x43, 0x4e, 0x3d, 0x61, 0x64, 0x2d, 0x41,\n0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2d, 0x43, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x61,\n0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x44, 0x50, 0x2c,\n0x43, 0x4e, 0x3d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x25, 0x32, 0x30, 0x4b, 0x65, 0x79, 0x25,\n0x32, 0x30, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x53, 0x65,\n0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,\n0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x44, 0x43, 0x3d, 0x61, 0x64, 0x2c, 0x44, 0x43,\n0x3d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x3f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,\n0x3f, 0x62, 0x61, 0x73, 0x65, 0x3f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,\n0x73, 0x3d, 0x63, 0x52, 0x4c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,\n0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x30, 0x81, 0xbe, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,\n0x07, 0x01, 0x01, 0x04, 0x81, 0xb1, 0x30, 0x81, 0xae, 0x30, 0x81, 0xab, 0x06, 0x08, 0x2b, 0x06,\n0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x81, 0x9e, 0x6c, 0x64, 0x61, 0x70, 0x3a, 0x2f, 0x2f,\n0x2f, 0x43, 0x4e, 0x3d, 0x61, 0x64, 0x2d, 0x41, 0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,\n0x2d, 0x43, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x41, 0x49, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x50, 0x75,\n0x62, 0x6c, 0x69, 0x63, 0x25, 0x32, 0x30, 0x4b, 0x65, 0x79, 0x25, 0x32, 0x30, 0x53, 0x65, 0x72,\n0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,\n0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,\n0x6f, 0x6e, 0x2c, 0x44, 0x43, 0x3d, 0x61, 0x64, 0x2c, 0x44, 0x43, 0x3d, 0x64, 0x65, 0x76, 0x65,\n0x6c, 0x3f, 0x63, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3f,\n0x62, 0x61, 0x73, 0x65, 0x3f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,\n0x3d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,\n0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x3f, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x38,\n0x30, 0x36, 0xa0, 0x1c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x14, 0x02, 0x03,\n0xa0, 0x0e, 0x0c, 0x0c, 0x74, 0x75, 0x31, 0x40, 0x61, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c,\n0x81, 0x16, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x40, 0x65, 0x6d, 0x61, 0x69,\n0x6c, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,\n0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x41, 0x45, 0x0a, 0x6d,\n0xbb, 0x7f, 0x5c, 0x07, 0x0c, 0xc9, 0xb0, 0x39, 0x55, 0x6d, 0x7c, 0xb5, 0x02, 0xcd, 0xe8, 0xb2,\n0xe5, 0x02, 0x94, 0x77, 0x60, 0xdb, 0xd1, 0xaf, 0x1d, 0xdb, 0x44, 0x5f, 0xce, 0x83, 0xdb, 0x80,\n0x2e, 0xe2, 0xb2, 0x08, 0x25, 0x82, 0x14, 0xcb, 0x48, 0x95, 0x20, 0x13, 0x6c, 0xa9, 0xaa, 0xf8,\n0x31, 0x56, 0xed, 0xc0, 0x3b, 0xd4, 0xae, 0x2e, 0xe3, 0x8f, 0x05, 0xfc, 0xab, 0x5f, 0x2a, 0x69,\n0x23, 0xbc, 0xb8, 0x8c, 0xec, 0x2d, 0xa9, 0x0b, 0x86, 0x95, 0x73, 0x73, 0xdb, 0x17, 0xce, 0xc6,\n0xae, 0xc5, 0xb4, 0xc1, 0x25, 0x87, 0x3b, 0x67, 0x43, 0x9e, 0x87, 0x5a, 0xe6, 0xb9, 0xa0, 0x28,\n0x12, 0x3d, 0xa8, 0x2e, 0xd7, 0x5e, 0xef, 0x65, 0x2d, 0xe6, 0xa5, 0x67, 0x84, 0xac, 0xfd, 0x31,\n0xc1, 0x78, 0xd8, 0x72, 0x51, 0xa2, 0x88, 0x55, 0x0f, 0x97, 0x47, 0x93, 0x07, 0xea, 0x8a, 0x53,\n0x27, 0x4e, 0x34, 0x54, 0x34, 0x1f, 0xa0, 0x6a, 0x03, 0x44, 0xfb, 0x23, 0x61, 0x8e, 0x87, 0x8e,\n0x3c, 0xd0, 0x8f, 0xae, 0xe4, 0xcf, 0xee, 0x65, 0xa8, 0xba, 0x96, 0x68, 0x08, 0x1c, 0x60, 0xe2,\n0x4e, 0x11, 0xa3, 0x74, 0xb8, 0xa5, 0x4e, 0xea, 0x6a, 0x82, 0x4c, 0xc2, 0x4d, 0x63, 0x8e, 0x9f,\n0x7c, 0x2f, 0xa8, 0xc0, 0x62, 0xf8, 0xf7, 0xd9, 0x25, 0xc4, 0x91, 0xab, 0x4d, 0x6a, 0x44, 0xaf,\n0x75, 0x93, 0x53, 0x03, 0xa4, 0x99, 0xc8, 0xcd, 0x91, 0x89, 0x60, 0x75, 0x30, 0x99, 0x76, 0x05,\n0x5a, 0xa0, 0x03, 0xa7, 0xa1, 0x2c, 0x03, 0x04, 0x8f, 0xd4, 0x5a, 0x31, 0x52, 0x28, 0x5a, 0xe6,\n0xa2, 0xd3, 0x43, 0x21, 0x5b, 0xdc, 0xa2, 0x1d, 0x55, 0xa9, 0x48, 0xc5, 0xc4, 0xaa, 0xf3, 0x8b,\n0xe6, 0x3e, 0x75, 0x96, 0xe4, 0x3e, 0x64, 0xaf, 0xe8, 0xa7, 0x6a, 0xb6};\n\n/* used to test SAN principal encoding according to RFC4556 */\nconst uint8_t test_cert3_der[] = {\n0x30, 0x82, 0x03, 0x70, 0x30, 0x82, 0x02, 0x58, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00,\n0xe5, 0x8f, 0x16, 0xfe, 0x23, 0x4d, 0xc5, 0xd6, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,\n0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55,\n0x04, 0x03, 0x0c, 0x0f, 0x6b, 0x72, 0x62, 0x35, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x5f, 0x74,\n0x65, 0x73, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x37, 0x31, 0x32, 0x30, 0x39, 0x32,\n0x34, 0x31, 0x38, 0x5a, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x34, 0x30, 0x37, 0x30, 0x39, 0x32, 0x34,\n0x31, 0x38, 0x5a, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f,\n0x6b, 0x72, 0x62, 0x35, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x30,\n0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,\n0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,\n0xbf, 0x84, 0x34, 0x46, 0x37, 0x50, 0xb1, 0xca, 0x14, 0x4c, 0x6b, 0x0d, 0xe4, 0xab, 0xc1, 0xce,\n0xf4, 0xd1, 0xde, 0xca, 0xf5, 0x50, 0x46, 0x3c, 0x63, 0x0f, 0x8e, 0xb8, 0xe9, 0xf9, 0x3e, 0xc4,\n0xf3, 0x24, 0xc1, 0xe4, 0x78, 0xf6, 0xa4, 0x39, 0x6f, 0xc1, 0xd8, 0x9c, 0x1c, 0xa7, 0x47, 0xe4,\n0xc8, 0x71, 0x32, 0x9a, 0x1d, 0x1d, 0xfb, 0x30, 0x0f, 0xf9, 0x85, 0x48, 0xf8, 0x1f, 0xa7, 0xbd,\n0xda, 0x39, 0xd4, 0xc7, 0x27, 0x4f, 0xf5, 0x34, 0xee, 0x4a, 0x59, 0x0c, 0x7a, 0xec, 0x2b, 0xaf,\n0x81, 0x8e, 0x41, 0x54, 0x6f, 0xcc, 0x91, 0x61, 0x4c, 0x61, 0x80, 0xca, 0x37, 0xab, 0x2c, 0x63,\n0x8d, 0xce, 0x07, 0xcd, 0x61, 0x11, 0x10, 0xa0, 0xe4, 0x08, 0x7d, 0x1d, 0x10, 0x85, 0xb1, 0x64,\n0x33, 0x6b, 0x4d, 0x8d, 0xd2, 0x9d, 0xd7, 0x0b, 0x21, 0xbc, 0x15, 0xcd, 0xed, 0xaa, 0xc0, 0x01,\n0x67, 0xe1, 0x7c, 0xd4, 0xf7, 0xdd, 0xf8, 0x28, 0x92, 0xce, 0x8b, 0x7f, 0x08, 0x29, 0x76, 0x6e,\n0xa5, 0xe6, 0xcd, 0xeb, 0x9c, 0x13, 0x78, 0xa3, 0x08, 0xb5, 0xdc, 0x7f, 0xc2, 0x60, 0xc3, 0xac,\n0x68, 0x30, 0x37, 0xe1, 0x54, 0x6a, 0xa9, 0x34, 0x3e, 0x43, 0x8d, 0x6f, 0x9b, 0xe5, 0x8a, 0xf9,\n0xa4, 0x22, 0xab, 0x33, 0x01, 0x32, 0xaf, 0xc4, 0x9f, 0xb1, 0x27, 0xba, 0xae, 0x20, 0x60, 0xd7,\n0x16, 0x48, 0x66, 0x2b, 0x36, 0x9c, 0x54, 0xd0, 0x6e, 0x45, 0xd3, 0x23, 0x3f, 0x17, 0x2e, 0xee,\n0xd4, 0x55, 0xa7, 0x75, 0x2f, 0x28, 0xa9, 0x40, 0x3b, 0xbc, 0x79, 0x69, 0xea, 0x58, 0xc2, 0x3c,\n0x4c, 0x70, 0x4b, 0x93, 0xd8, 0xa4, 0xb6, 0x59, 0x24, 0x77, 0x10, 0xb3, 0xc7, 0x34, 0x99, 0x6b,\n0x28, 0xbd, 0x03, 0xdb, 0xda, 0xea, 0x23, 0x19, 0x10, 0x56, 0x7e, 0xa4, 0x28, 0x04, 0x5a, 0x53,\n0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xb8, 0x30, 0x81, 0xb5, 0x30, 0x09, 0x06, 0x03, 0x55,\n0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\n0x02, 0x03, 0xa8, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x0b, 0x30, 0x09, 0x06, 0x07,\n0x2b, 0x06, 0x01, 0x05, 0x02, 0x03, 0x04, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,\n0x04, 0x14, 0xea, 0xd4, 0x30, 0xd7, 0x7d, 0x3b, 0xc7, 0xb4, 0x83, 0x53, 0x2c, 0xa5, 0xb9, 0xd8,\n0x1a, 0x47, 0x6b, 0xb5, 0xe5, 0x9d, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,\n0x16, 0x80, 0x14, 0xea, 0xd4, 0x30, 0xd7, 0x7d, 0x3b, 0xc7, 0xb4, 0x83, 0x53, 0x2c, 0xa5, 0xb9,\n0xd8, 0x1a, 0x47, 0x6b, 0xb5, 0xe5, 0x9d, 0x30, 0x47, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x40,\n0x30, 0x3e, 0xa0, 0x3c, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05, 0x02, 0x02, 0xa0, 0x32, 0x30, 0x30,\n0xa0, 0x0b, 0x1b, 0x09, 0x53, 0x53, 0x53, 0x44, 0x2e, 0x54, 0x45, 0x53, 0x54, 0xa1, 0x21, 0x30,\n0x1f, 0xa0, 0x03, 0x02, 0x01, 0x01, 0xa1, 0x18, 0x30, 0x16, 0x1b, 0x04, 0x74, 0x65, 0x73, 0x74,\n0x1b, 0x05, 0x63, 0x6f, 0x6d, 0x70, 0x32, 0x1b, 0x07, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,\n0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,\n0x82, 0x01, 0x01, 0x00, 0x08, 0x64, 0x63, 0x89, 0x6d, 0x3d, 0x66, 0x77, 0xe3, 0xb6, 0x40, 0x54,\n0xd7, 0xe2, 0xc5, 0x99, 0xac, 0x98, 0x6e, 0xf8, 0xcd, 0x62, 0xa4, 0xf8, 0xd9, 0xaf, 0xdb, 0xef,\n0xb7, 0x10, 0x8e, 0x45, 0x42, 0x53, 0x5c, 0x3f, 0x6a, 0x8d, 0xa8, 0x8a, 0x6d, 0x76, 0x51, 0x1a,\n0xf4, 0x71, 0x54, 0x27, 0x27, 0xe2, 0x45, 0xe8, 0xa8, 0xd2, 0xa9, 0xcd, 0x62, 0x0d, 0xfc, 0x0d,\n0x28, 0x46, 0x9e, 0x4e, 0x5a, 0x57, 0x72, 0xb4, 0xf2, 0x35, 0x91, 0x57, 0x11, 0xae, 0x2b, 0x9c,\n0x6a, 0x80, 0x21, 0x8e, 0x4c, 0x19, 0x4a, 0x2d, 0xe0, 0xd2, 0xdf, 0x83, 0x9d, 0x65, 0x49, 0xd1,\n0x34, 0x34, 0x14, 0xa0, 0xbb, 0x1c, 0xa8, 0x12, 0xb0, 0xe3, 0x5e, 0x82, 0x36, 0x41, 0x4c, 0x87,\n0xd1, 0x1e, 0x1a, 0xe9, 0xff, 0x55, 0xef, 0xb5, 0x2d, 0x20, 0xc5, 0xa7, 0xe5, 0x5a, 0xf2, 0xfc,\n0xf7, 0xd2, 0x21, 0xc5, 0x32, 0xb4, 0x07, 0x8f, 0xc4, 0x94, 0x56, 0xa6, 0x21, 0x6a, 0xb6, 0x26,\n0x05, 0x48, 0x90, 0xe0, 0x6b, 0x22, 0x35, 0x00, 0x51, 0x2e, 0xd7, 0xe8, 0x3a, 0x56, 0xa8, 0x70,\n0x7d, 0x0f, 0x9a, 0x97, 0x5a, 0xb8, 0x7f, 0x33, 0xc1, 0xe0, 0x92, 0x0f, 0xb3, 0xfe, 0x36, 0xe6,\n0x8b, 0x97, 0x58, 0x42, 0x49, 0xcb, 0x74, 0xde, 0x19, 0x59, 0x90, 0xb6, 0x36, 0x38, 0x07, 0x48,\n0x5d, 0x5b, 0xab, 0x08, 0xf0, 0x69, 0x22, 0x42, 0x08, 0x29, 0xfe, 0x43, 0xab, 0x83, 0x73, 0x74,\n0x5a, 0x3f, 0x3b, 0x5d, 0x8e, 0xca, 0x6f, 0x2d, 0xad, 0xa1, 0x6e, 0x80, 0x80, 0xd2, 0xc8, 0x16,\n0xb7, 0x67, 0x1a, 0x2d, 0x37, 0x8c, 0x20, 0x3b, 0x15, 0xef, 0xb2, 0x94, 0x86, 0x5c, 0xaf, 0xa2,\n0x61, 0x8b, 0xc7, 0xc1, 0xe4, 0xbe, 0x60, 0x5a, 0x86, 0x5c, 0x86, 0xba, 0x59, 0x97, 0x83, 0x1b,\n0x79, 0x1c, 0x7c, 0x26};\n\nvoid test_sss_cert_get_content(void **state)\n{\n    int ret;\n    struct sss_cert_content *content;\n\n    ret = sss_cert_get_content(NULL, test_cert_der, sizeof(test_cert_der),\n                               &content);\n    assert_int_equal(ret , 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str, \"CN=Certificate Authority,O=IPA.DEVEL\");\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str, \"CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_NON_REPUDIATION\n                                            |SSS_KU_KEY_ENCIPHERMENT\n                                            |SSS_KU_DATA_ENCIPHERMENT);\n    assert_non_null(content->extended_key_usage_oids);\n    assert_non_null(content->extended_key_usage_oids[0]);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.1\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_null(content->extended_key_usage_oids[2]);\n    assert_int_equal(content->cert_der_size, sizeof(test_cert_der));\n    assert_memory_equal(content->cert_der, test_cert_der, sizeof(test_cert_der));\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=IPA.DEVEL\");\n    assert_string_equal(content->issuer_rdn_list[1], \"CN=Certificate Authority\");\n    assert_null(content->issuer_rdn_list[2]);\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->subject_rdn_list[0], \"O=IPA.DEVEL\");\n    assert_string_equal(content->subject_rdn_list[1], \"CN=ipa-devel.ipa.devel\");\n    assert_null(content->subject_rdn_list[2]);\n\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_2(void **state)\n{\n    int ret;\n    struct sss_cert_content *content;\n    struct san_list *i;\n\n    ret = sss_cert_get_content(NULL, test_cert2_der, sizeof(test_cert2_der),\n                               &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=ad-AD-SERVER-CA,DC=ad,DC=devel\");\n    assert_non_null(content->subject_str);\n#if 0\nFIXME:\n    assert_string_equal(content->subject_str,\n      \"E=test.user@email.domain,CN=t u,CN=Users,DC=ad,DC=devel,DC=ad,DC=devel\");\n      //\"CN=t u/emailAddress=test.user@email.domain,DC=ad,DC=devel\");\n#endif\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_KEY_ENCIPHERMENT);\n    assert_non_null(content->extended_key_usage_oids);\n    assert_non_null(content->extended_key_usage_oids[0]);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n                discard_const(content->extended_key_usage_oids), true));\n    /* Can use Microsoft Encrypted File System OID */\n    assert_true(string_in_list(\"1.3.6.1.4.1.311.10.3.4\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_null(content->extended_key_usage_oids[3]);\n    assert_int_equal(content->cert_der_size, sizeof(test_cert2_der));\n    assert_memory_equal(content->cert_der, test_cert2_der,\n                        sizeof(test_cert2_der));\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"DC=devel\");\n    assert_string_equal(content->issuer_rdn_list[1], \"DC=ad\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=ad-AD-SERVER-CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->subject_rdn_list[0], \"DC=devel\");\n    assert_string_equal(content->subject_rdn_list[1], \"DC=ad\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=Users\");\n    assert_string_equal(content->subject_rdn_list[3], \"CN=t u\");\n    assert_string_equal(content->subject_rdn_list[4],\n                                                    \"E=test.user@email.domain\");\n    assert_null(content->subject_rdn_list[5]);\n\n    assert_non_null(content->san_list);\n\n    DLIST_FOR_EACH(i, content->san_list) {\n        switch (i->san_opt) {\n        case SAN_RFC822_NAME:\n            assert_string_equal(i->val, \"test.user@email.domain\");\n            assert_string_equal(i->short_name, \"test.user\");\n            break;\n        case SAN_STRING_OTHER_NAME:\n            assert_string_equal(i->other_name_oid, \"1.3.6.1.4.1.311.20.2.3\");\n            assert_int_equal(i->bin_val_len, 14);\n            assert_memory_equal(i->bin_val, \"\\f\\ftu1@ad.devel\", 14);\n            break;\n        case SAN_NT:\n        case SAN_PRINCIPAL:\n            assert_string_equal(i->val, \"tu1@ad.devel\");\n            assert_string_equal(i->short_name, \"tu1\");\n            break;\n        default:\n            assert_true(false);\n        }\n    }\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_test_cert_0003(void **state)\n{\n    int ret;\n    uint8_t *der;\n    size_t der_size;\n    struct sss_cert_content *content;\n\n    der = sss_base64_decode(NULL, SSSD_TEST_CERT_0003, &der_size);\n    assert_non_null(der);\n\n    ret = sss_cert_get_content(NULL, der, der_size, &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=SSSD test CA,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=SSSD test CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str,\n                        \"CN=SSSD test cert 0003,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=SSSD test cert 0003\");\n    assert_null(content->subject_rdn_list[3]);\n\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_KEY_ENCIPHERMENT);\n\n    assert_non_null(content->extended_key_usage_oids);\n    assert_null(content->extended_key_usage_oids[0]);\n\n    assert_null(content->san_list);\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_test_cert_0004(void **state)\n{\n    int ret;\n    uint8_t *der;\n    size_t der_size;\n    struct sss_cert_content *content;\n\n    der = sss_base64_decode(NULL, SSSD_TEST_CERT_0004, &der_size);\n    assert_non_null(der);\n\n    ret = sss_cert_get_content(NULL, der, der_size, &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=SSSD test CA,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=SSSD test CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str,\n                        \"CN=SSSD test cert 0004,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=SSSD test cert 0004\");\n    assert_null(content->subject_rdn_list[3]);\n\n    assert_int_equal(content->key_usage, UINT32_MAX);\n\n    assert_non_null(content->extended_key_usage_oids);\n    assert_null(content->extended_key_usage_oids[0]);\n\n    assert_null(content->san_list);\n\n    talloc_free(content);\n}\n\nstatic void test_sss_certmap_match_cert(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n    size_t c;\n\n    struct match_tests {\n        const char *rule;\n        int result;\n    } match_tests[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>digitalSignature,nonRepudiation\", 0},\n        {\"KRB5:<KU>digitalSignature,cRLSign\", ENOENT},\n        {\"KRB5:<EKU>clientAuth\", 0},\n        {\"KRB5:<EKU>clientAuth,OCSPSigning\", ENOENT},\n        {\"KRB5:<EKU>clientAuth,serverAuth\", 0},\n        {NULL, 0}\n    };\n\n    struct match_tests match_tests_2[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>keyEncipherment\", 0},\n        {\"KRB5:<KU>digitalSignature,keyEncipherment\", 0},\n        {\"KRB5:<KU>digitalSignature,keyEncipherment,cRLSign\", ENOENT},\n        {\"KRB5:<EKU>clientAuth\", 0},\n        {\"KRB5:<EKU>clientAuth,1.3.6.1.4.1.311.10.3.4\", 0},\n        {\"KRB5:<EKU>clientAuth,1.3.6.1.4.1.311.10.3.41\", ENOENT},\n        {\"KRB5:<SAN>tu1\", 0},\n        {\"KRB5:<SAN:Principal>tu1\", 0},\n        {\"KRB5:<SAN:ntPrincipalName>tu1\", 0},\n        {\"KRB5:<SAN:pkinitSAN>tu1\", ENOENT},\n        {\"KRB5:<SAN:Principal>^tu1@ad.devel$\", 0},\n        {\"KRB5:<SAN:rfc822Name>tu\", ENOENT},\n        {\"KRB5:<SAN:rfc822Name>test.user\", 0},\n        {\"KRB5:<SAN:rfc822Name>test.user<SAN>tu1\", 0},\n        {\"KRB5:||<SAN:rfc822Name>test.user<SAN>tu1\", 0},\n        {\"KRB5:&&<SAN:rfc822Name>tu1<SAN>tu1\", ENOENT},\n        {\"KRB5:||<SAN:rfc822Name>tu1<SAN>tu1\", 0},\n        {\"KRB5:<SAN:otherName>MTIz\", ENOENT}, /* 123 */\n        {\"KRB5:<SAN:otherName>DAx0dTFAYWQuZGV2ZWw=\", 0}, /* \"\\f\\ftu1@ad.devel\" */\n        {\"KRB5:<SAN:otherName>DAx0dTFAYWQuZGV2ZWx4\", ENOENT}, /* \"\\f\\ftu1@ad.develx\" */\n        {\"KRB5:<SAN:otherName>dHUxQGFkLmRldmVs\", 0}, /* \"tu1@ad.devel\" */\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>test\", ENOENT},\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>tu1@ad\", 0},\n        /* Fails because the NT principal SAN starts with binary values */\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>^tu1@ad.devel$\", ENOENT},\n        {NULL, 0}\n    };\n\n    struct match_tests match_tests_3[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>keyEncipherment\", 0},\n        {\"KRB5:<KU>keyAgreement\", 0},\n        {\"KRB5:<KU>digitalSignature,keyAgreement,keyEncipherment\", 0},\n        {\"KRB5:<SAN:Principal>test\", 0},\n        {\"KRB5:<SAN:ntPrincipal>test\", ENOENT},\n        {\"KRB5:<SAN:Principal>comp2\", 0},\n        {\"KRB5:<SAN:Principal>another\", 0},\n        {\"KRB5:<SAN:Principal>test/comp2/another@SSSD.TEST\", 0},\n        {\"KRB5:<SAN:Principal>^test/comp2/another@SSSD.TEST$\", 0},\n        {\"KRB5:<SAN:pkinitSAN>^test/comp2/another@SSSD.TEST$\", 0},\n        {NULL, 0}\n    };\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<ISSUER>xyz<SUBJECT>xyz\",\n                               NULL, NULL);\n    assert_int_equal(ret, EOK);\n\n    ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                 sizeof(test_cert_der));\n    assert_int_equal(ret, ENOENT);\n\n    ret = sss_certmap_add_rule(ctx, 1,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            NULL, NULL);\n    assert_int_equal(ret, EOK);\n\n    ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                 sizeof(test_cert_der));\n    assert_int_equal(ret, 0);\n\n    sss_certmap_free_ctx(ctx);\n\n    for (c = 0; match_tests[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                     sizeof(test_cert_der));\n        assert_int_equal(ret, match_tests[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n\n    for (c = 0; match_tests_2[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        print_error(\"Checking matching rule [%s]\\n\", match_tests_2[c].rule);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests_2[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert2_der),\n                                     sizeof(test_cert2_der));\n        assert_int_equal(ret, match_tests_2[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n\n    for (c = 0; match_tests_3[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        print_error(\"Checking matching rule [%s]\\n\", match_tests_3[c].rule);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests_3[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert3_der),\n                                     sizeof(test_cert3_der));\n        assert_int_equal(ret, match_tests_3[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n}\n\nstatic void test_sss_certmap_add_mapping_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"FWEAWEF:fwefwe\", NULL);\n    assert_int_equal(ret, ESRCH);\n\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:abc\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_string,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"abc\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:abc{issuer_dn}\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_string,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"abc\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_template,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"issuer_dn\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"{issuer_dn}a:b{{c}}\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_template,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"issuer_dn\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_string,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"a:b{c}\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:{issuer_dn}{subject_dn}\",\n                               NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_template,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"issuer_dn\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_template,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"subject_dn\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n}\n\n#define TEST_CERT_BIN \\\n            \"\\\\30\\\\82\\\\04\\\\09\\\\30\\\\82\\\\02\\\\f1\\\\a0\\\\03\\\\02\\\\01\\\\02\\\\02\\\\01\\\\09\" \\\n            \"\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\0b\\\\05\\\\00\\\\30\" \\\n            \"\\\\34\\\\31\\\\12\\\\30\\\\10\\\\06\\\\03\\\\55\\\\04\\\\0a\\\\0c\\\\09\\\\49\\\\50\\\\41\\\\2e\" \\\n            \"\\\\44\\\\45\\\\56\\\\45\\\\4c\\\\31\\\\1e\\\\30\\\\1c\\\\06\\\\03\\\\55\\\\04\\\\03\\\\0c\\\\15\" \\\n            \"\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\\\\20\\\\41\\\\75\\\\74\\\\68\" \\\n            \"\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\1e\\\\17\\\\0d\\\\31\\\\35\\\\30\\\\34\\\\32\\\\38\\\\31\" \\\n            \"\\\\30\\\\32\\\\31\\\\31\\\\31\\\\5a\\\\17\\\\0d\\\\31\\\\37\\\\30\\\\34\\\\32\\\\38\\\\31\\\\30\" \\\n            \"\\\\32\\\\31\\\\31\\\\31\\\\5a\\\\30\\\\32\\\\31\\\\12\\\\30\\\\10\\\\06\\\\03\\\\55\\\\04\\\\0a\" \\\n            \"\\\\0c\\\\09\\\\49\\\\50\\\\41\\\\2e\\\\44\\\\45\\\\56\\\\45\\\\4c\\\\31\\\\1c\\\\30\\\\1a\\\\06\" \\\n            \"\\\\03\\\\55\\\\04\\\\03\\\\0c\\\\13\\\\69\\\\70\\\\61\\\\2d\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2e\" \\\n            \"\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\30\\\\82\\\\01\\\\22\\\\30\\\\0d\\\\06\" \\\n            \"\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\01\\\\05\\\\00\\\\03\\\\82\\\\01\\\\0f\" \\\n            \"\\\\00\\\\30\\\\82\\\\01\\\\0a\\\\02\\\\82\\\\01\\\\01\\\\00\\\\b2\\\\32\\\\92\\\\ab\\\\47\\\\b8\" \\\n            \"\\\\0c\\\\13\\\\54\\\\4a\\\\1f\\\\1e\\\\29\\\\06\\\\ff\\\\d0\\\\50\\\\cb\\\\f7\\\\5f\\\\79\\\\91\" \\\n            \"\\\\65\\\\b1\\\\39\\\\01\\\\83\\\\6a\\\\ad\\\\9e\\\\77\\\\3b\\\\f3\\\\0d\\\\d7\\\\b9\\\\f6\\\\dc\" \\\n            \"\\\\9e\\\\4a\\\\49\\\\a7\\\\d0\\\\66\\\\72\\\\cc\\\\bf\\\\77\\\\d6\\\\de\\\\a9\\\\fe\\\\67\\\\96\" \\\n            \"\\\\cc\\\\49\\\\f1\\\\37\\\\23\\\\2e\\\\c4\\\\50\\\\f4\\\\eb\\\\ba\\\\62\\\\d4\\\\23\\\\4d\\\\f3\" \\\n            \"\\\\37\\\\38\\\\82\\\\ee\\\\3b\\\\3f\\\\2c\\\\d0\\\\80\\\\9b\\\\17\\\\aa\\\\9b\\\\eb\\\\a6\\\\dd\" \\\n            \"\\\\f6\\\\15\\\\ff\\\\06\\\\b2\\\\ce\\\\ff\\\\df\\\\8a\\\\9e\\\\95\\\\85\\\\49\\\\1f\\\\84\\\\fd\" \\\n            \"\\\\81\\\\26\\\\ce\\\\06\\\\32\\\\0d\\\\36\\\\ca\\\\7c\\\\15\\\\81\\\\68\\\\6b\\\\8f\\\\3e\\\\b3\" \\\n            \"\\\\a2\\\\fc\\\\ae\\\\af\\\\c2\\\\44\\\\58\\\\15\\\\95\\\\40\\\\fc\\\\56\\\\19\\\\91\\\\80\\\\ed\" \\\n            \"\\\\42\\\\11\\\\66\\\\04\\\\ef\\\\3c\\\\e0\\\\76\\\\33\\\\4b\\\\83\\\\fa\\\\7e\\\\b4\\\\47\\\\dc\" \\\n            \"\\\\fb\\\\ed\\\\46\\\\a5\\\\8d\\\\0a\\\\66\\\\87\\\\a5\\\\ef\\\\7b\\\\74\\\\62\\\\ac\\\\be\\\\73\" \\\n            \"\\\\36\\\\c9\\\\b4\\\\fe\\\\20\\\\c4\\\\81\\\\f3\\\\fe\\\\78\\\\19\\\\a8\\\\d0\\\\af\\\\7f\\\\81\" \\\n            \"\\\\72\\\\24\\\\61\\\\d9\\\\76\\\\93\\\\e3\\\\0b\\\\d2\\\\4f\\\\19\\\\17\\\\33\\\\57\\\\d4\\\\82\" \\\n            \"\\\\b0\\\\f1\\\\a8\\\\03\\\\f6\\\\01\\\\99\\\\a9\\\\b8\\\\8c\\\\83\\\\c9\\\\ba\\\\19\\\\87\\\\ea\" \\\n            \"\\\\d6\\\\3b\\\\06\\\\eb\\\\4c\\\\f7\\\\f1\\\\e5\\\\28\\\\a9\\\\10\\\\b6\\\\46\\\\de\\\\e1\\\\e1\" \\\n            \"\\\\3f\\\\c1\\\\cc\\\\72\\\\be\\\\2a\\\\43\\\\c6\\\\f6\\\\d0\\\\b5\\\\a0\\\\c4\\\\24\\\\6e\\\\4f\" \\\n            \"\\\\bd\\\\ec\\\\22\\\\8a\\\\07\\\\11\\\\3d\\\\f9\\\\d3\\\\15\\\\02\\\\03\\\\01\\\\00\\\\01\\\\a3\" \\\n            \"\\\\82\\\\01\\\\26\\\\30\\\\82\\\\01\\\\22\\\\30\\\\1f\\\\06\\\\03\\\\55\\\\1d\\\\23\\\\04\\\\18\" \\\n            \"\\\\30\\\\16\\\\80\\\\14\\\\f2\\\\9d\\\\42\\\\4e\\\\0f\\\\c4\\\\48\\\\25\\\\58\\\\2f\\\\1c\\\\ce\" \\\n            \"\\\\0f\\\\a1\\\\3f\\\\22\\\\c8\\\\55\\\\c8\\\\91\\\\30\\\\3b\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\01\\\\01\\\\04\\\\2f\\\\30\\\\2d\\\\30\\\\2b\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\30\\\\01\\\\86\\\\1f\\\\68\\\\74\\\\74\\\\70\\\\3a\\\\2f\\\\2f\\\\69\\\\70\\\\61\" \\\n            \"\\\\2d\\\\63\\\\61\\\\2e\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2f\\\\63\\\\61\" \\\n            \"\\\\2f\\\\6f\\\\63\\\\73\\\\70\\\\30\\\\0e\\\\06\\\\03\\\\55\\\\1d\\\\0f\\\\01\\\\01\\\\ff\\\\04\" \\\n            \"\\\\04\\\\03\\\\02\\\\04\\\\f0\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\\\\25\\\\04\\\\16\\\\30\\\\14\" \\\n            \"\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\\\\03\\\\01\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\03\\\\02\\\\30\\\\74\\\\06\\\\03\\\\55\\\\1d\\\\1f\\\\04\\\\6d\\\\30\\\\6b\\\\30\" \\\n            \"\\\\69\\\\a0\\\\31\\\\a0\\\\2f\\\\86\\\\2d\\\\68\\\\74\\\\74\\\\70\\\\3a\\\\2f\\\\2f\\\\69\\\\70\" \\\n            \"\\\\61\\\\2d\\\\63\\\\61\\\\2e\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2f\\\\69\" \\\n            \"\\\\70\\\\61\\\\2f\\\\63\\\\72\\\\6c\\\\2f\\\\4d\\\\61\\\\73\\\\74\\\\65\\\\72\\\\43\\\\52\\\\4c\" \\\n            \"\\\\2e\\\\62\\\\69\\\\6e\\\\a2\\\\34\\\\a4\\\\32\\\\30\\\\30\\\\31\\\\0e\\\\30\\\\0c\\\\06\\\\03\" \\\n            \"\\\\55\\\\04\\\\0a\\\\0c\\\\05\\\\69\\\\70\\\\61\\\\63\\\\61\\\\31\\\\1e\\\\30\\\\1c\\\\06\\\\03\" \\\n            \"\\\\55\\\\04\\\\03\\\\0c\\\\15\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\" \\\n            \"\\\\20\\\\41\\\\75\\\\74\\\\68\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\" \\\n            \"\\\\0e\\\\04\\\\16\\\\04\\\\14\\\\2d\\\\2b\\\\3f\\\\cb\\\\f5\\\\b2\\\\ff\\\\32\\\\2c\\\\a8\\\\c2\" \\\n            \"\\\\1c\\\\dd\\\\bd\\\\8c\\\\80\\\\1e\\\\dd\\\\31\\\\82\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\" \\\n            \"\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\0b\\\\05\\\\00\\\\03\\\\82\\\\01\\\\01\\\\00\\\\9a\\\\47\\\\2e\" \\\n            \"\\\\50\\\\a7\\\\4d\\\\1d\\\\53\\\\0f\\\\c9\\\\71\\\\42\\\\0c\\\\e5\\\\da\\\\7d\\\\49\\\\64\\\\e7\" \\\n            \"\\\\ab\\\\c8\\\\df\\\\df\\\\02\\\\c1\\\\87\\\\d1\\\\5b\\\\de\\\\da\\\\6f\\\\2b\\\\e4\\\\f0\\\\be\" \\\n            \"\\\\ba\\\\09\\\\df\\\\02\\\\85\\\\0b\\\\8a\\\\e6\\\\9b\\\\06\\\\7d\\\\69\\\\38\\\\6c\\\\72\\\\ff\" \\\n            \"\\\\4c\\\\7b\\\\2a\\\\0d\\\\3f\\\\23\\\\2f\\\\16\\\\46\\\\ff\\\\05\\\\93\\\\b0\\\\ea\\\\24\\\\28\" \\\n            \"\\\\d7\\\\12\\\\a1\\\\57\\\\b8\\\\59\\\\19\\\\25\\\\f3\\\\43\\\\0a\\\\d3\\\\fd\\\\0f\\\\37\\\\8d\" \\\n            \"\\\\b8\\\\ca\\\\15\\\\e7\\\\48\\\\8a\\\\a0\\\\c7\\\\c7\\\\4b\\\\7f\\\\01\\\\3c\\\\58\\\\d7\\\\37\" \\\n            \"\\\\e5\\\\ff\\\\7d\\\\2b\\\\01\\\\ac\\\\0d\\\\9f\\\\51\\\\6a\\\\e5\\\\40\\\\24\\\\e6\\\\5e\\\\55\" \\\n            \"\\\\0d\\\\f7\\\\b8\\\\2f\\\\42\\\\ac\\\\6d\\\\e5\\\\29\\\\6b\\\\c6\\\\0b\\\\a4\\\\bf\\\\19\\\\bd\" \\\n            \"\\\\39\\\\27\\\\ee\\\\fe\\\\c5\\\\b3\\\\db\\\\62\\\\d4\\\\be\\\\d2\\\\47\\\\ba\\\\96\\\\30\\\\5a\" \\\n            \"\\\\fd\\\\62\\\\00\\\\b8\\\\27\\\\5d\\\\2f\\\\3a\\\\94\\\\0b\\\\95\\\\35\\\\85\\\\40\\\\2c\\\\bc\" \\\n            \"\\\\67\\\\df\\\\8a\\\\f9\\\\f1\\\\7b\\\\19\\\\96\\\\3e\\\\42\\\\48\\\\13\\\\23\\\\04\\\\95\\\\a9\" \\\n            \"\\\\6b\\\\11\\\\33\\\\81\\\\47\\\\5a\\\\83\\\\72\\\\f6\\\\20\\\\fa\\\\8e\\\\41\\\\7b\\\\8f\\\\77\" \\\n            \"\\\\47\\\\7c\\\\c7\\\\5d\\\\46\\\\f4\\\\4f\\\\fd\\\\81\\\\0a\\\\ae\\\\39\\\\27\\\\b6\\\\6a\\\\26\" \\\n            \"\\\\63\\\\b1\\\\d3\\\\bf\\\\55\\\\83\\\\82\\\\9b\\\\36\\\\6c\\\\33\\\\64\\\\0f\\\\50\\\\c0\\\\55\" \\\n            \"\\\\94\\\\13\\\\c3\\\\85\\\\f4\\\\d5\\\\71\\\\65\\\\d0\\\\c0\\\\dd\\\\fc\\\\e6\\\\ec\\\\9c\\\\5b\" \\\n            \"\\\\f0\\\\11\\\\b5\\\\2c\\\\f3\\\\48\\\\c1\\\\36\\\\8c\\\\a2\\\\96\\\\48\\\\84\"\n\n#define TEST_CERT2_BIN \\\n            \"\\\\30\\\\82\\\\06\\\\98\\\\30\\\\82\\\\05\\\\80\\\\a0\\\\03\\\\02\\\\01\\\\02\\\\02\\\\0a\\\\61\" \\\n            \"\\\\22\\\\88\\\\c2\\\\00\\\\00\\\\00\\\\00\\\\02\\\\a6\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\" \\\n            \"\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\05\\\\05\\\\00\\\\30\\\\45\\\\31\\\\15\\\\30\\\\13\\\\06\\\\0a\" \\\n            \"\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\\\\19\\\\16\\\\05\\\\64\\\\65\\\\76\\\\65\" \\\n            \"\\\\6c\\\\31\\\\12\\\\30\\\\10\\\\06\\\\0a\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\" \\\n            \"\\\\19\\\\16\\\\02\\\\61\\\\64\\\\31\\\\18\\\\30\\\\16\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\0f\" \\\n            \"\\\\61\\\\64\\\\2d\\\\41\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\\\\2d\\\\43\\\\41\\\\30\" \\\n            \"\\\\1e\\\\17\\\\0d\\\\31\\\\36\\\\31\\\\31\\\\31\\\\31\\\\31\\\\33\\\\35\\\\31\\\\31\\\\31\\\\5a\" \\\n            \"\\\\17\\\\0d\\\\31\\\\37\\\\31\\\\31\\\\31\\\\31\\\\31\\\\33\\\\35\\\\31\\\\31\\\\31\\\\5a\\\\30\" \\\n            \"\\\\70\\\\31\\\\15\\\\30\\\\13\\\\06\\\\0a\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\" \\\n            \"\\\\19\\\\16\\\\05\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\31\\\\12\\\\30\\\\10\\\\06\\\\0a\\\\09\\\\92\" \\\n            \"\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\\\\19\\\\16\\\\02\\\\61\\\\64\\\\31\\\\0e\\\\30\\\\0c\" \\\n            \"\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\05\\\\55\\\\73\\\\65\\\\72\\\\73\\\\31\\\\0c\\\\30\\\\0a\" \\\n            \"\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\03\\\\74\\\\20\\\\75\\\\31\\\\25\\\\30\\\\23\\\\06\\\\09\" \\\n            \"\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\09\\\\01\\\\16\\\\16\\\\74\\\\65\\\\73\\\\74\\\\2e\" \\\n            \"\\\\75\\\\73\\\\65\\\\72\\\\40\\\\65\\\\6d\\\\61\\\\69\\\\6c\\\\2e\\\\64\\\\6f\\\\6d\\\\61\\\\69\" \\\n            \"\\\\6e\\\\30\\\\82\\\\01\\\\22\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\" \\\n            \"\\\\01\\\\01\\\\05\\\\00\\\\03\\\\82\\\\01\\\\0f\\\\00\\\\30\\\\82\\\\01\\\\0a\\\\02\\\\82\\\\01\" \\\n            \"\\\\01\\\\00\\\\9c\\\\cf\\\\36\\\\99\\\\de\\\\63\\\\74\\\\2b\\\\77\\\\25\\\\9e\\\\24\\\\d9\\\\77\" \\\n            \"\\\\4b\\\\5f\\\\98\\\\c0\\\\8c\\\\d7\\\\20\\\\91\\\\c0\\\\1c\\\\e8\\\\37\\\\45\\\\bf\\\\3c\\\\d9\" \\\n            \"\\\\33\\\\bd\\\\e9\\\\de\\\\c9\\\\5d\\\\d4\\\\cd\\\\06\\\\0a\\\\0d\\\\d4\\\\f1\\\\7c\\\\74\\\\5b\" \\\n            \"\\\\29\\\\d5\\\\66\\\\9c\\\\2c\\\\9f\\\\6b\\\\1a\\\\0f\\\\0d\\\\e6\\\\6c\\\\62\\\\a5\\\\41\\\\4f\" \\\n            \"\\\\c3\\\\a4\\\\88\\\\27\\\\11\\\\5d\\\\b7\\\\b1\\\\fb\\\\f8\\\\8d\\\\ee\\\\43\\\\8d\\\\93\\\\b5\" \\\n            \"\\\\8c\\\\b4\\\\34\\\\06\\\\f5\\\\e9\\\\2f\\\\5a\\\\26\\\\68\\\\d7\\\\43\\\\60\\\\82\\\\5e\\\\22\" \\\n            \"\\\\a7\\\\c6\\\\34\\\\40\\\\19\\\\a5\\\\8e\\\\f0\\\\58\\\\9f\\\\16\\\\2d\\\\43\\\\3f\\\\0c\\\\da\" \\\n            \"\\\\e2\\\\23\\\\f6\\\\09\\\\2a\\\\5e\\\\bd\\\\84\\\\27\\\\c8\\\\ab\\\\d5\\\\70\\\\f8\\\\3d\\\\9c\" \\\n            \"\\\\14\\\\c2\\\\c2\\\\a2\\\\77\\\\e8\\\\44\\\\73\\\\10\\\\01\\\\34\\\\40\\\\1f\\\\c6\\\\2f\\\\a0\" \\\n            \"\\\\70\\\\ee\\\\2f\\\\d5\\\\4b\\\\be\\\\4c\\\\c7\\\\45\\\\f7\\\\ac\\\\9c\\\\c3\\\\68\\\\5b\\\\1d\" \\\n            \"\\\\5a\\\\4b\\\\77\\\\65\\\\76\\\\e4\\\\b3\\\\92\\\\f4\\\\84\\\\0a\\\\9e\\\\6a\\\\9c\\\\c9\\\\53\" \\\n            \"\\\\42\\\\9f\\\\6d\\\\fe\\\\f9\\\\f5\\\\f2\\\\9a\\\\15\\\\50\\\\47\\\\ef\\\\f4\\\\06\\\\59\\\\c8\" \\\n            \"\\\\50\\\\48\\\\4b\\\\46\\\\95\\\\68\\\\25\\\\c5\\\\bd\\\\4f\\\\65\\\\34\\\\00\\\\fc\\\\31\\\\69\" \\\n            \"\\\\f8\\\\3e\\\\e0\\\\20\\\\83\\\\41\\\\27\\\\0b\\\\5c\\\\46\\\\98\\\\14\\\\f0\\\\07\\\\de\\\\02\" \\\n            \"\\\\17\\\\b1\\\\d2\\\\9c\\\\be\\\\1c\\\\0d\\\\56\\\\22\\\\1b\\\\02\\\\fe\\\\da\\\\69\\\\b9\\\\ef\" \\\n            \"\\\\91\\\\37\\\\39\\\\7f\\\\24\\\\da\\\\c4\\\\81\\\\5e\\\\82\\\\31\\\\2f\\\\98\\\\1d\\\\f7\\\\73\" \\\n            \"\\\\5b\\\\23\\\\02\\\\03\\\\01\\\\00\\\\01\\\\a3\\\\82\\\\03\\\\5d\\\\30\\\\82\\\\03\\\\59\\\\30\" \\\n            \"\\\\3d\\\\06\\\\09\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\15\\\\07\\\\04\\\\30\\\\30\\\\2e\" \\\n            \"\\\\06\\\\26\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\15\\\\08\\\\87\\\\85\\\\a1\\\\23\\\\84\" \\\n            \"\\\\c8\\\\b2\\\\26\\\\83\\\\9d\\\\9d\\\\21\\\\82\\\\d4\\\\a6\\\\1b\\\\86\\\\a3\\\\ba\\\\37\\\\81\" \\\n            \"\\\\10\\\\85\\\\89\\\\d5\\\\02\\\\d6\\\\8f\\\\24\\\\02\\\\01\\\\64\\\\02\\\\01\\\\02\\\\30\\\\29\" \\\n            \"\\\\06\\\\03\\\\55\\\\1d\\\\25\\\\04\\\\22\\\\30\\\\20\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\" \\\n            \"\\\\07\\\\03\\\\02\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\\\\03\\\\04\\\\06\\\\0a\\\\2b\" \\\n            \"\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\0a\\\\03\\\\04\\\\30\\\\0e\\\\06\\\\03\\\\55\\\\1d\\\\0f\" \\\n            \"\\\\01\\\\01\\\\ff\\\\04\\\\04\\\\03\\\\02\\\\05\\\\a0\\\\30\\\\35\\\\06\\\\09\\\\2b\\\\06\\\\01\" \\\n            \"\\\\04\\\\01\\\\82\\\\37\\\\15\\\\0a\\\\04\\\\28\\\\30\\\\26\\\\30\\\\0a\\\\06\\\\08\\\\2b\\\\06\" \\\n            \"\\\\01\\\\05\\\\05\\\\07\\\\03\\\\02\\\\30\\\\0a\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\" \\\n            \"\\\\03\\\\04\\\\30\\\\0c\\\\06\\\\0a\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\0a\\\\03\\\\04\" \\\n            \"\\\\30\\\\81\\\\94\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\09\\\\0f\\\\04\\\\81\" \\\n            \"\\\\86\\\\30\\\\81\\\\83\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\" \\\n            \"\\\\2a\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\2d\\\\30\\\\0b\" \\\n            \"\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\16\\\\30\\\\0b\\\\06\\\\09\\\\60\" \\\n            \"\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\19\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\" \\\n            \"\\\\65\\\\03\\\\04\\\\01\\\\02\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\" \\\n            \"\\\\01\\\\05\\\\30\\\\0a\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\03\\\\07\\\\30\\\\07\" \\\n            \"\\\\06\\\\05\\\\2b\\\\0e\\\\03\\\\02\\\\07\\\\30\\\\0e\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\" \\\n            \"\\\\0d\\\\03\\\\02\\\\02\\\\02\\\\00\\\\80\\\\30\\\\0e\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\" \\\n            \"\\\\0d\\\\03\\\\04\\\\02\\\\02\\\\02\\\\00\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\\\\0e\\\\04\\\\16\" \\\n            \"\\\\04\\\\14\\\\49\\\\ac\\\\ad\\\\e0\\\\65\\\\30\\\\c4\\\\ce\\\\a0\\\\09\\\\03\\\\5b\\\\ad\\\\4a\" \\\n            \"\\\\7b\\\\49\\\\5e\\\\c9\\\\6c\\\\b4\\\\30\\\\1f\\\\06\\\\03\\\\55\\\\1d\\\\23\\\\04\\\\18\\\\30\" \\\n            \"\\\\16\\\\80\\\\14\\\\62\\\\50\\\\b6\\\\8d\\\\a1\\\\e6\\\\2d\\\\91\\\\bf\\\\b0\\\\54\\\\4d\\\\8f\" \\\n            \"\\\\a8\\\\ca\\\\10\\\\ae\\\\b8\\\\dd\\\\54\\\\30\\\\81\\\\cc\\\\06\\\\03\\\\55\\\\1d\\\\1f\\\\04\" \\\n            \"\\\\81\\\\c4\\\\30\\\\81\\\\c1\\\\30\\\\81\\\\be\\\\a0\\\\81\\\\bb\\\\a0\\\\81\\\\b8\\\\86\\\\81\" \\\n            \"\\\\b5\\\\6c\\\\64\\\\61\\\\70\\\\3a\\\\2f\\\\2f\\\\2f\\\\43\\\\4e\\\\3d\\\\61\\\\64\\\\2d\\\\41\" \\\n            \"\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\\\\2d\\\\43\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\61\" \\\n            \"\\\\64\\\\2d\\\\73\\\\65\\\\72\\\\76\\\\65\\\\72\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\44\\\\50\\\\2c\" \\\n            \"\\\\43\\\\4e\\\\3d\\\\50\\\\75\\\\62\\\\6c\\\\69\\\\63\\\\25\\\\32\\\\30\\\\4b\\\\65\\\\79\\\\25\" \\\n            \"\\\\32\\\\30\\\\53\\\\65\\\\72\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\53\\\\65\" \\\n            \"\\\\72\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\6f\\\\6e\\\\66\\\\69\\\\67\" \\\n            \"\\\\75\\\\72\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\2c\\\\44\\\\43\\\\3d\\\\61\\\\64\\\\2c\\\\44\\\\43\" \\\n            \"\\\\3d\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\3f\\\\63\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\" \\\n            \"\\\\74\\\\65\\\\52\\\\65\\\\76\\\\6f\\\\63\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\4c\\\\69\\\\73\\\\74\" \\\n            \"\\\\3f\\\\62\\\\61\\\\73\\\\65\\\\3f\\\\6f\\\\62\\\\6a\\\\65\\\\63\\\\74\\\\43\\\\6c\\\\61\\\\73\" \\\n            \"\\\\73\\\\3d\\\\63\\\\52\\\\4c\\\\44\\\\69\\\\73\\\\74\\\\72\\\\69\\\\62\\\\75\\\\74\\\\69\\\\6f\" \\\n            \"\\\\6e\\\\50\\\\6f\\\\69\\\\6e\\\\74\\\\30\\\\81\\\\be\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\" \\\n            \"\\\\07\\\\01\\\\01\\\\04\\\\81\\\\b1\\\\30\\\\81\\\\ae\\\\30\\\\81\\\\ab\\\\06\\\\08\\\\2b\\\\06\" \\\n            \"\\\\01\\\\05\\\\05\\\\07\\\\30\\\\02\\\\86\\\\81\\\\9e\\\\6c\\\\64\\\\61\\\\70\\\\3a\\\\2f\\\\2f\" \\\n            \"\\\\2f\\\\43\\\\4e\\\\3d\\\\61\\\\64\\\\2d\\\\41\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\" \\\n            \"\\\\2d\\\\43\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\41\\\\49\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\50\\\\75\" \\\n            \"\\\\62\\\\6c\\\\69\\\\63\\\\25\\\\32\\\\30\\\\4b\\\\65\\\\79\\\\25\\\\32\\\\30\\\\53\\\\65\\\\72\" \\\n            \"\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\53\\\\65\\\\72\\\\76\\\\69\\\\63\\\\65\" \\\n            \"\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\6f\\\\6e\\\\66\\\\69\\\\67\\\\75\\\\72\\\\61\\\\74\\\\69\" \\\n            \"\\\\6f\\\\6e\\\\2c\\\\44\\\\43\\\\3d\\\\61\\\\64\\\\2c\\\\44\\\\43\\\\3d\\\\64\\\\65\\\\76\\\\65\" \\\n            \"\\\\6c\\\\3f\\\\63\\\\41\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\\\\3f\" \\\n            \"\\\\62\\\\61\\\\73\\\\65\\\\3f\\\\6f\\\\62\\\\6a\\\\65\\\\63\\\\74\\\\43\\\\6c\\\\61\\\\73\\\\73\" \\\n            \"\\\\3d\\\\63\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\41\\\\75\" \\\n            \"\\\\74\\\\68\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\3f\\\\06\\\\03\\\\55\\\\1d\\\\11\\\\04\\\\38\" \\\n            \"\\\\30\\\\36\\\\a0\\\\1c\\\\06\\\\0a\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\14\\\\02\\\\03\" \\\n            \"\\\\a0\\\\0e\\\\0c\\\\0c\\\\74\\\\75\\\\31\\\\40\\\\61\\\\64\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\" \\\n            \"\\\\81\\\\16\\\\74\\\\65\\\\73\\\\74\\\\2e\\\\75\\\\73\\\\65\\\\72\\\\40\\\\65\\\\6d\\\\61\\\\69\" \\\n            \"\\\\6c\\\\2e\\\\64\\\\6f\\\\6d\\\\61\\\\69\\\\6e\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\" \\\n            \"\\\\f7\\\\0d\\\\01\\\\01\\\\05\\\\05\\\\00\\\\03\\\\82\\\\01\\\\01\\\\00\\\\41\\\\45\\\\0a\\\\6d\" \\\n            \"\\\\bb\\\\7f\\\\5c\\\\07\\\\0c\\\\c9\\\\b0\\\\39\\\\55\\\\6d\\\\7c\\\\b5\\\\02\\\\cd\\\\e8\\\\b2\" \\\n            \"\\\\e5\\\\02\\\\94\\\\77\\\\60\\\\db\\\\d1\\\\af\\\\1d\\\\db\\\\44\\\\5f\\\\ce\\\\83\\\\db\\\\80\" \\\n            \"\\\\2e\\\\e2\\\\b2\\\\08\\\\25\\\\82\\\\14\\\\cb\\\\48\\\\95\\\\20\\\\13\\\\6c\\\\a9\\\\aa\\\\f8\" \\\n            \"\\\\31\\\\56\\\\ed\\\\c0\\\\3b\\\\d4\\\\ae\\\\2e\\\\e3\\\\8f\\\\05\\\\fc\\\\ab\\\\5f\\\\2a\\\\69\" \\\n            \"\\\\23\\\\bc\\\\b8\\\\8c\\\\ec\\\\2d\\\\a9\\\\0b\\\\86\\\\95\\\\73\\\\73\\\\db\\\\17\\\\ce\\\\c6\" \\\n            \"\\\\ae\\\\c5\\\\b4\\\\c1\\\\25\\\\87\\\\3b\\\\67\\\\43\\\\9e\\\\87\\\\5a\\\\e6\\\\b9\\\\a0\\\\28\" \\\n            \"\\\\12\\\\3d\\\\a8\\\\2e\\\\d7\\\\5e\\\\ef\\\\65\\\\2d\\\\e6\\\\a5\\\\67\\\\84\\\\ac\\\\fd\\\\31\" \\\n            \"\\\\c1\\\\78\\\\d8\\\\72\\\\51\\\\a2\\\\88\\\\55\\\\0f\\\\97\\\\47\\\\93\\\\07\\\\ea\\\\8a\\\\53\" \\\n            \"\\\\27\\\\4e\\\\34\\\\54\\\\34\\\\1f\\\\a0\\\\6a\\\\03\\\\44\\\\fb\\\\23\\\\61\\\\8e\\\\87\\\\8e\" \\\n            \"\\\\3c\\\\d0\\\\8f\\\\ae\\\\e4\\\\cf\\\\ee\\\\65\\\\a8\\\\ba\\\\96\\\\68\\\\08\\\\1c\\\\60\\\\e2\" \\\n            \"\\\\4e\\\\11\\\\a3\\\\74\\\\b8\\\\a5\\\\4e\\\\ea\\\\6a\\\\82\\\\4c\\\\c2\\\\4d\\\\63\\\\8e\\\\9f\" \\\n            \"\\\\7c\\\\2f\\\\a8\\\\c0\\\\62\\\\f8\\\\f7\\\\d9\\\\25\\\\c4\\\\91\\\\ab\\\\4d\\\\6a\\\\44\\\\af\" \\\n            \"\\\\75\\\\93\\\\53\\\\03\\\\a4\\\\99\\\\c8\\\\cd\\\\91\\\\89\\\\60\\\\75\\\\30\\\\99\\\\76\\\\05\" \\\n            \"\\\\5a\\\\a0\\\\03\\\\a7\\\\a1\\\\2c\\\\03\\\\04\\\\8f\\\\d4\\\\5a\\\\31\\\\52\\\\28\\\\5a\\\\e6\" \\\n            \"\\\\a2\\\\d3\\\\43\\\\21\\\\5b\\\\dc\\\\a2\\\\1d\\\\55\\\\a9\\\\48\\\\c5\\\\c4\\\\aa\\\\f3\\\\8b\" \\\n            \"\\\\e6\\\\3e\\\\75\\\\96\\\\e4\\\\3e\\\\64\\\\af\\\\e8\\\\a7\\\\6a\\\\b6\"\n\nstatic void test_sss_certmap_get_search_filter(void **state)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx;\n    char *filter;\n    char **domains;\n    const char *dom_list[] = {\"test.dom\", NULL};\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 100,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule100=<I>{issuer_dn}<S>{subject_dn}\", NULL);\n    assert_int_equal(ret, 0);\n\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule100=<I>CN=Certificate Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 99,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule99=<I>{issuer_dn}<S>{subject_dn}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule99=<I>CN=Certificate Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 98,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule98=userCertificate;binary={cert!bin}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule98=userCertificate;binary=\" TEST_CERT_BIN);\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 97,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule97=<I>{issuer_dn!nss_x500}<S>{subject_dn}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 96,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule96=<I>{issuer_dn!nss_x500}<S>{subject_dn!nss_x500}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 95,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            NULL, NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 94,\n                      \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                      \"LDAP:rule94=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n\n    ret = sss_certmap_add_rule(ctx, 89, NULL,\n                            \"(rule89={subject_nt_principal})\",\n                            NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 88, NULL,\n                            \"(rule88={subject_nt_principal.short_name})\",\n                            NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(rule88=tu1)\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 87, NULL,\n                          \"LDAP:rule87=<I>{issuer_dn!nss_x500}<S>{subject_dn!nss_x500}\",\n                          NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 86, NULL,\n                      \"LDAP:rule86=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",\n                      NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");\n    assert_null(domains);\n\n\n    sss_certmap_free_ctx(ctx);\n\n    /* check defaults when no rules are added yet */\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT2_BIN\")\");\n    assert_null(domains);\n\n    sss_certmap_free_ctx(ctx);\n}\n\nint main(int argc, const char *argv[])\n{\n    int rv;\n    poptContext pc;\n    int opt;\n    struct poptOption long_options[] = {\n        POPT_AUTOHELP\n        SSSD_DEBUG_OPTS\n        POPT_TABLEEND\n    };\n\n    const struct CMUnitTest tests[] = {\n        cmocka_unit_test(test_sss_certmap_init),\n        cmocka_unit_test(test_sss_certmap_add_rule),\n        cmocka_unit_test(test_sss_certmap_add_matching_rule),\n        cmocka_unit_test(test_check_ad_attr_name),\n        cmocka_unit_test(test_sss_cert_get_content),\n        cmocka_unit_test(test_sss_cert_get_content_2),\n#ifdef HAVE_TEST_CA\n        cmocka_unit_test(test_sss_cert_get_content_test_cert_0003),\n        cmocka_unit_test(test_sss_cert_get_content_test_cert_0004),\n#endif\n        cmocka_unit_test(test_sss_certmap_match_cert),\n        cmocka_unit_test(test_sss_certmap_add_mapping_rule),\n        cmocka_unit_test(test_sss_certmap_get_search_filter),\n    };\n\n    /* Set debug level to invalid value so we can decide if -d 0 was used. */\n    debug_level = SSSDBG_INVALID;\n\n    pc = poptGetContext(argv[0], argc, argv, long_options, 0);\n    while((opt = poptGetNextOpt(pc)) != -1) {\n        switch(opt) {\n        default:\n            fprintf(stderr, \"\\nInvalid option %s: %s\\n\\n\",\n                    poptBadOption(pc, 0), poptStrerror(opt));\n            poptPrintUsage(pc, stderr, 0);\n            return 1;\n        }\n    }\n    poptFreeContext(pc);\n\n    DEBUG_CLI_INIT(debug_level);\n\n#ifdef HAVE_NSS\n    nspr_nss_init();\n#endif\n\n    tests_set_cwd();\n    rv = cmocka_run_group_tests(tests, NULL, NULL);\n\n#ifdef HAVE_NSS\n    /* Cleanup NSS and NSPR to make Valgrind happy. */\n    nspr_nss_cleanup();\n#endif\n\n#ifdef HAVE_LIBCRYPTO\n    CRYPTO_cleanup_all_ex_data(); /* to make Valgrind happy */\n#endif\n\n    return rv;\n}\n", "/*\n    Authors:\n        Simo Sorce <ssorce@redhat.com>\n\n    Copyright (C) 2009 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"config.h\"\n#include <ctype.h>\n#include <netdb.h>\n#include <poll.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <talloc.h>\n#include <dhash.h>\n#include <time.h>\n\n#include \"util/util.h\"\n#include \"util/sss_utf8.h\"\n\nint socket_activated = 0;\nint dbus_activated = 0;\n\nstatic void free_args(char **args)\n{\n    int i;\n\n    if (args) {\n        for (i = 0; args[i]; i++) free(args[i]);\n        free(args);\n    }\n}\n\n/* parse a string into arguments.\n * arguments are separated by a space\n * '\\' is an escape character and can be used only to escape\n * itself or the white space.\n */\nchar **parse_args(const char *str)\n{\n    const char *p;\n    char **ret, **r;\n    char *tmp;\n    int num;\n    int i;\n    bool e, w;\n\n    tmp = malloc(strlen(str) + 1);\n    if (!tmp) return NULL;\n\n    ret = NULL;\n    num = 0;\n    i = 0;\n    e = false;\n    /* skip leading whitespaces */\n    w = true;\n    p = str;\n    while (*p) {\n        if (*p == '\\\\') {\n            w = false;\n            if (e) {\n                /* if we were already escaping, add a '\\' literal */\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            } else {\n                /* otherwise just start escaping */\n                e = true;\n            }\n        } else if (isspace(*p)) {\n            if (e) {\n                /* Add escaped whitespace literally */\n                tmp[i] = *p;\n                i++;\n                e = false;\n            } else if (w == false) {\n                /* If previous character was non-whitespace, arg break */\n                tmp[i] = '\\0';\n                i++;\n                w = true;\n            }\n            /* previous char was whitespace as well, skip it */\n        } else {\n            w = false;\n            if (e) {\n                /* Prepend escaped chars with a literal \\ */\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            }\n            /* Copy character from the source string */\n            tmp[i] = *p;\n            i++;\n        }\n\n        p++;\n\n        /* check if this was the last char */\n        if (*p == '\\0') {\n            if (e) {\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            }\n            tmp[i] = '\\0';\n            i++;\n        }\n\n        /* save token to result array */\n        if (i > 1 && tmp[i-1] == '\\0') {\n            r = realloc(ret, (num + 2) * sizeof(char *));\n            if (!r) goto fail;\n            ret = r;\n            ret[num+1] = NULL;\n            ret[num] = strdup(tmp);\n            if (!ret[num]) goto fail;\n            num++;\n            i = 0;\n        }\n    }\n\n    free(tmp);\n    return ret;\n\nfail:\n    free(tmp);\n    free_args(ret);\n    return NULL;\n}\n\nconst char **dup_string_list(TALLOC_CTX *memctx, const char **str_list)\n{\n    int i = 0;\n    int j = 0;\n    const char **dup_list;\n\n    if (!str_list) {\n        return NULL;\n    }\n\n    /* Find the size of the list */\n    while (str_list[i]) i++;\n\n    dup_list = talloc_array(memctx, const char *, i+1);\n    if (!dup_list) {\n        return NULL;\n    }\n\n    /* Copy the elements */\n    for (j = 0; j < i; j++) {\n        dup_list[j] = talloc_strdup(dup_list, str_list[j]);\n        if (!dup_list[j]) {\n            talloc_free(dup_list);\n            return NULL;\n        }\n    }\n\n    /* NULL-terminate the list */\n    dup_list[i] = NULL;\n\n    return dup_list;\n}\n\n/* Take two string lists (terminated on a NULL char*)\n * and return up to three arrays of strings based on\n * shared ownership.\n *\n * Pass NULL to any return type you don't care about\n */\nerrno_t diff_string_lists(TALLOC_CTX *memctx,\n                          char **_list1,\n                          char **_list2,\n                          char ***_list1_only,\n                          char ***_list2_only,\n                          char ***_both_lists)\n{\n    int error;\n    errno_t ret;\n    int i;\n    int i2 = 0;\n    int i12 = 0;\n    hash_table_t *table;\n    hash_key_t key;\n    hash_value_t value;\n    char **list1 = NULL;\n    char **list2 = NULL;\n    char **list1_only = NULL;\n    char **list2_only = NULL;\n    char **both_lists = NULL;\n    unsigned long count;\n    hash_key_t *keys;\n\n    TALLOC_CTX *tmp_ctx = talloc_new(memctx);\n    if (!tmp_ctx) {\n        return ENOMEM;\n    }\n\n    if (!_list1) {\n        list1 = talloc_array(tmp_ctx, char *, 1);\n        if (!list1) {\n            talloc_free(tmp_ctx);\n            return ENOMEM;\n        }\n        list1[0] = NULL;\n    }\n    else {\n        list1 = _list1;\n    }\n\n    if (!_list2) {\n        list2 = talloc_array(tmp_ctx, char *, 1);\n        if (!list2) {\n            talloc_free(tmp_ctx);\n            return ENOMEM;\n        }\n        list2[0] = NULL;\n    }\n    else {\n        list2 = _list2;\n    }\n\n    error = hash_create(10, &table, NULL, NULL);\n    if (error != HASH_SUCCESS) {\n        talloc_free(tmp_ctx);\n        return EIO;\n    }\n\n    key.type = HASH_KEY_STRING;\n    value.type = HASH_VALUE_UNDEF;\n\n    /* Add all entries from list 1 into a hash table */\n    i = 0;\n    while (list1[i]) {\n        key.str = talloc_strdup(tmp_ctx, list1[i]);\n        error = hash_enter(table, &key, &value);\n        if (error != HASH_SUCCESS) {\n            ret = EIO;\n            goto done;\n        }\n        i++;\n    }\n\n    /* Iterate through list 2 and remove matching items */\n    i = 0;\n    while (list2[i]) {\n        key.str = talloc_strdup(tmp_ctx, list2[i]);\n        error = hash_delete(table, &key);\n        if (error == HASH_SUCCESS) {\n            if (_both_lists) {\n                /* String was present in both lists */\n                i12++;\n                both_lists = talloc_realloc(tmp_ctx, both_lists, char *, i12+1);\n                if (!both_lists) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n                both_lists[i12-1] = talloc_strdup(both_lists, list2[i]);\n                if (!both_lists[i12-1]) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n\n                both_lists[i12] = NULL;\n            }\n        }\n        else if (error == HASH_ERROR_KEY_NOT_FOUND) {\n            if (_list2_only) {\n                /* String was present only in list2 */\n                i2++;\n                list2_only = talloc_realloc(tmp_ctx, list2_only,\n                                            char *, i2+1);\n                if (!list2_only) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n                list2_only[i2-1] = talloc_strdup(list2_only, list2[i]);\n                if (!list2_only[i2-1]) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n\n                list2_only[i2] = NULL;\n            }\n        }\n        else {\n            /* An error occurred */\n            ret = EIO;\n            goto done;\n        }\n        i++;\n    }\n\n    /* Get the leftover entries in the hash table */\n    if (_list1_only) {\n        error = hash_keys(table, &count, &keys);\n        if (error != HASH_SUCCESS) {\n            ret = EIO;\n            goto done;\n        }\n\n        list1_only = talloc_array(tmp_ctx, char *, count+1);\n        if (!list1_only) {\n            ret = ENOMEM;\n            goto done;\n        }\n\n        for (i = 0; i < count; i++) {\n            list1_only[i] = talloc_strdup(list1_only, keys[i].str);\n            if (!list1_only[i]) {\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n        list1_only[count] = NULL;\n\n        free(keys);\n\n        *_list1_only = talloc_steal(memctx, list1_only);\n    }\n\n    if (_list2_only) {\n        if (list2_only) {\n            *_list2_only = talloc_steal(memctx, list2_only);\n        }\n        else {\n            *_list2_only = talloc_array(memctx, char *, 1);\n            if (!(*_list2_only)) {\n                ret = ENOMEM;\n                goto done;\n            }\n            *_list2_only[0] = NULL;\n        }\n    }\n\n    if (_both_lists) {\n        if (both_lists) {\n            *_both_lists = talloc_steal(memctx, both_lists);\n        }\n        else {\n            *_both_lists = talloc_array(memctx, char *, 1);\n            if (!(*_both_lists)) {\n                ret = ENOMEM;\n                goto done;\n            }\n            *_both_lists[0] = NULL;\n        }\n    }\n\n    ret = EOK;\n\ndone:\n    hash_destroy(table);\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nstatic void *hash_talloc(const size_t size, void *pvt)\n{\n    return talloc_size(pvt, size);\n}\n\nstatic void hash_talloc_free(void *ptr, void *pvt)\n{\n    talloc_free(ptr);\n}\n\nerrno_t sss_hash_create_ex(TALLOC_CTX *mem_ctx,\n                           unsigned long count,\n                           hash_table_t **tbl,\n                           unsigned int directory_bits,\n                           unsigned int segment_bits,\n                           unsigned long min_load_factor,\n                           unsigned long max_load_factor,\n                           hash_delete_callback *delete_callback,\n                           void *delete_private_data)\n{\n    errno_t ret;\n    hash_table_t *table;\n    int hret;\n\n    TALLOC_CTX *internal_ctx;\n    internal_ctx = talloc_new(NULL);\n    if (!internal_ctx) {\n        return ENOMEM;\n    }\n\n    hret = hash_create_ex(count, &table, directory_bits, segment_bits,\n                          min_load_factor, max_load_factor,\n                          hash_talloc, hash_talloc_free, internal_ctx,\n                          delete_callback, delete_private_data);\n    switch (hret) {\n    case HASH_SUCCESS:\n        /* Steal the table pointer onto the mem_ctx,\n         * then make the internal_ctx a child of\n         * table.\n         *\n         * This way, we can clean up the values when\n         * we talloc_free() the table\n         */\n        *tbl = talloc_steal(mem_ctx, table);\n        talloc_steal(table, internal_ctx);\n        return EOK;\n\n    case HASH_ERROR_NO_MEMORY:\n        ret = ENOMEM;\n        break;\n    default:\n        ret = EIO;\n    }\n\n    DEBUG(SSSDBG_FATAL_FAILURE, \"Could not create hash table: [%d][%s]\\n\",\n              hret, hash_error_string(hret));\n\n    talloc_free(internal_ctx);\n    return ret;\n}\n\nerrno_t sss_hash_create(TALLOC_CTX *mem_ctx, unsigned long count,\n                        hash_table_t **tbl)\n{\n    return sss_hash_create_ex(mem_ctx, count, tbl, 0, 0, 0, 0, NULL, NULL);\n}\n\nerrno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,\n                               const char *input,\n                               char **sanitized,\n                               const char *ignore)\n{\n    char *output;\n    size_t i = 0;\n    size_t j = 0;\n    char *allowed;\n\n    /* Assume the worst-case. We'll resize it later, once */\n    output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);\n    if (!output) {\n        return ENOMEM;\n    }\n\n    while (input[i]) {\n        /* Even though this character might have a special meaning, if it's\n         * explicitly allowed, just copy it and move on\n         */\n        if (ignore == NULL) {\n            allowed = NULL;\n        } else {\n            allowed = strchr(ignore, input[i]);\n        }\n        if (allowed) {\n            output[j++] = input[i++];\n            continue;\n        }\n\n        switch(input[i]) {\n        case '\\t':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = '9';\n            break;\n        case ' ':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '0';\n            break;\n        case '*':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = 'a';\n            break;\n        case '(':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '8';\n            break;\n        case ')':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '9';\n            break;\n        case '\\\\':\n            output[j++] = '\\\\';\n            output[j++] = '5';\n            output[j++] = 'c';\n            break;\n        case '\\r':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = 'd';\n            break;\n        case '\\n':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = 'a';\n            break;\n        default:\n            output[j++] = input[i];\n        }\n\n        i++;\n    }\n    output[j] = '\\0';\n    *sanitized = talloc_realloc(mem_ctx, output, char, j+1);\n    if (!*sanitized) {\n        talloc_free(output);\n        return ENOMEM;\n    }\n\n    return EOK;\n}\n\nerrno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,\n                            const char *input,\n                            char **sanitized)\n{\n    return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);\n}\n\nchar *\nsss_escape_ip_address(TALLOC_CTX *mem_ctx, int family, const char *addr)\n{\n    return family == AF_INET6 ? talloc_asprintf(mem_ctx, \"[%s]\", addr) :\n                                talloc_strdup(mem_ctx, addr);\n}\n\n/* out->len includes terminating '\\0' */\nvoid to_sized_string(struct sized_string *out, const char *in)\n{\n    out->str = in;\n    if (out->str) {\n        out->len = strlen(out->str) + 1;\n    } else {\n        out->len = 0;\n    }\n}\n\n/* This function only removes first and last\n * character if the first character was '['.\n *\n * NOTE: This means, that ipv6addr must NOT be followed\n * by port number.\n */\nerrno_t\nremove_ipv6_brackets(char *ipv6addr)\n{\n    size_t len;\n\n    if (ipv6addr && ipv6addr[0] == '[') {\n        len = strlen(ipv6addr);\n        if (len < 3) {\n            return EINVAL;\n        }\n\n        memmove(ipv6addr, &ipv6addr[1], len - 2);\n        ipv6addr[len -2] = '\\0';\n    }\n\n    return EOK;\n}\n\nerrno_t add_string_to_list(TALLOC_CTX *mem_ctx, const char *string,\n                           char ***list_p)\n{\n    size_t c;\n    char **old_list = NULL;\n    char **new_list = NULL;\n\n    if (string == NULL || list_p == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Missing string or list.\\n\");\n        return EINVAL;\n    }\n\n    old_list = *list_p;\n\n    if (old_list == NULL) {\n        /* If the input is a NULL list a new one is created with the new\n         * string and the terminating NULL element. */\n        c = 0;\n        new_list = talloc_array(mem_ctx, char *, 2);\n    } else {\n        for (c = 0; old_list[c] != NULL; c++);\n        /* Allocate one extra space for the new service and one for\n         * the terminating NULL\n         */\n        new_list = talloc_realloc(mem_ctx, old_list, char *, c + 2);\n    }\n\n    if (new_list == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_array/talloc_realloc failed.\\n\");\n        return ENOMEM;\n    }\n\n    new_list[c] = talloc_strdup(new_list, string);\n    if (new_list[c] == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n        talloc_free(new_list);\n        return ENOMEM;\n    }\n\n    new_list[c + 1] = NULL;\n\n    *list_p = new_list;\n\n    return EOK;\n}\n\nerrno_t del_string_from_list(const char *string,\n                             char ***list_p, bool case_sensitive)\n{\n    char **list;\n    int(*compare)(const char *s1, const char *s2);\n\n    if (string == NULL || list_p == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Missing string or list.\\n\");\n        return EINVAL;\n    }\n\n    if (!string_in_list(string, *list_p, case_sensitive)) {\n        return ENOENT;\n    }\n\n    compare = case_sensitive ? strcmp : strcasecmp;\n    list = *list_p;\n    int matches = 0;\n    int index = 0;\n    while (list[index]) {\n        if (compare(string, list[index]) == 0) {\n            matches++;\n            TALLOC_FREE(list[index]);\n        } else if (matches) {\n            list[index - matches] = list[index];\n            list[index] = NULL;\n        }\n        index++;\n    }\n\n    return EOK;\n}\n\nint domain_to_basedn(TALLOC_CTX *memctx, const char *domain, char **basedn)\n{\n    const char *s;\n    char *dn;\n    char *p;\n    int l;\n\n    if (!domain || !basedn) {\n        return EINVAL;\n    }\n\n    s = domain;\n    dn = talloc_strdup(memctx, \"dc=\");\n\n    while ((p = strchr(s, '.'))) {\n        l = p - s;\n        dn = talloc_asprintf_append_buffer(dn, \"%.*s,dc=\", l, s);\n        if (!dn) {\n            return ENOMEM;\n        }\n        s = p + 1;\n    }\n    dn = talloc_strdup_append_buffer(dn, s);\n    if (!dn) {\n        return ENOMEM;\n    }\n\n    for (p=dn; *p; ++p) {\n        *p = tolower(*p);\n    }\n\n    *basedn = dn;\n    return EOK;\n}\n\nbool is_host_in_domain(const char *host, const char *domain)\n{\n    int diff = strlen(host) - strlen(domain);\n\n    if (diff == 0 && strcmp(host, domain) == 0) {\n        return true;\n    }\n\n    if (diff > 0 && strcmp(host + diff, domain) == 0 && host[diff - 1] == '.') {\n        return true;\n    }\n\n    return false;\n}\n\n/* addr is in network order for both IPv4 and IPv6 versions */\nbool check_ipv4_addr(struct in_addr *addr, uint8_t flags)\n{\n    char straddr[INET_ADDRSTRLEN];\n\n    if (inet_ntop(AF_INET, addr, straddr, INET_ADDRSTRLEN) == NULL) {\n        DEBUG(SSSDBG_MINOR_FAILURE,\n              \"inet_ntop failed, won't log IP addresses\\n\");\n        snprintf(straddr, INET_ADDRSTRLEN, \"unknown\");\n    }\n\n    if ((flags & SSS_NO_MULTICAST) && IN_MULTICAST(ntohl(addr->s_addr))) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Multicast IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LOOPBACK)\n               && inet_netof(*addr) == IN_LOOPBACKNET) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Loopback IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LINKLOCAL)\n               && (addr->s_addr & htonl(0xffff0000)) == htonl(0xa9fe0000)) {\n        /* 169.254.0.0/16 */\n        DEBUG(SSSDBG_FUNC_DATA, \"Link-local IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_BROADCAST)\n               && addr->s_addr == htonl(INADDR_BROADCAST)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Broadcast IPv4 address %s\\n\", straddr);\n        return false;\n    }\n\n    return true;\n}\n\nbool check_ipv6_addr(struct in6_addr *addr, uint8_t flags)\n{\n    char straddr[INET6_ADDRSTRLEN];\n\n    if (inet_ntop(AF_INET6, addr, straddr, INET6_ADDRSTRLEN) == NULL) {\n        DEBUG(SSSDBG_MINOR_FAILURE,\n              \"inet_ntop failed, won't log IP addresses\\n\");\n        snprintf(straddr, INET6_ADDRSTRLEN, \"unknown\");\n    }\n\n    if ((flags & SSS_NO_LINKLOCAL) && IN6_IS_ADDR_LINKLOCAL(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Link local IPv6 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LOOPBACK) && IN6_IS_ADDR_LOOPBACK(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Loopback IPv6 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_MULTICAST) && IN6_IS_ADDR_MULTICAST(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Multicast IPv6 address %s\\n\", straddr);\n        return false;\n    }\n\n    return true;\n}\n\nconst char * const * get_known_services(void)\n{\n    static const char *svc[] = {\"nss\", \"pam\", \"sudo\", \"autofs\",\n                                \"ssh\", \"pac\", \"ifp\", NULL };\n\n    return svc;\n}\n\nerrno_t add_strings_lists(TALLOC_CTX *mem_ctx, const char **l1, const char **l2,\n                          bool copy_strings, char ***_new_list)\n{\n    size_t c;\n    size_t l1_count = 0;\n    size_t l2_count = 0;\n    size_t new_count = 0;\n    char **new;\n    int ret;\n\n    if (l1 != NULL) {\n        for (l1_count = 0; l1[l1_count] != NULL; l1_count++);\n    }\n\n    if (l2 != NULL) {\n        for (l2_count = 0; l2[l2_count] != NULL; l2_count++);\n    }\n\n    new_count = l1_count + l2_count;\n\n    new = talloc_array(mem_ctx, char *, new_count + 1);\n    if (new == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_array failed.\\n\");\n        return ENOMEM;\n    }\n    new [new_count] = NULL;\n\n    if (copy_strings) {\n        for(c = 0; c < l1_count; c++) {\n            new[c] = talloc_strdup(new, l1[c]);\n            if (new[c] == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n        for(c = 0; c < l2_count; c++) {\n            new[l1_count + c] = talloc_strdup(new, l2[c]);\n            if (new[l1_count + c] == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n    } else {\n        if (l1 != NULL) {\n            memcpy(new, l1, sizeof(char *) * l1_count);\n        }\n\n        if (l2 != NULL) {\n            memcpy(&new[l1_count], l2, sizeof(char *) * l2_count);\n        }\n    }\n\n    *_new_list = new;\n    ret = EOK;\n\ndone:\n    if (ret != EOK) {\n        talloc_free(new);\n    }\n\n    return ret;\n}\n\n/* Set the nonblocking flag to the fd */\nerrno_t sss_fd_nonblocking(int fd)\n{\n    int flags;\n    int ret;\n\n    flags = fcntl(fd, F_GETFL, 0);\n    if (flags == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"F_GETFL failed [%d][%s].\\n\", ret, strerror(ret));\n        return ret;\n    }\n\n    if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"F_SETFL failed [%d][%s].\\n\", ret, strerror(ret));\n        return ret;\n    }\n\n    return EOK;\n}\n\n/* Convert GeneralizedTime (http://en.wikipedia.org/wiki/GeneralizedTime)\n * to unix time (seconds since epoch). Use UTC time zone.\n */\nerrno_t sss_utc_to_time_t(const char *str, const char *format, time_t *_unix_time)\n{\n    char *end;\n    struct tm tm;\n    size_t len;\n    time_t ut;\n\n    if (str == NULL) {\n        return EINVAL;\n    }\n\n    len = strlen(str);\n    if (str[len-1] != 'Z') {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"%s does not seem to be in UTZ time zone.\\n\", str);\n        return ERR_TIMESPEC_NOT_SUPPORTED;\n    }\n\n    memset(&tm, 0, sizeof(tm));\n\n    end = strptime(str, format, &tm);\n    /* not all characters from format were matched */\n    if (end == NULL) {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"String [%s] failed to match format [%s].\\n\", str, format);\n        return EINVAL;\n    }\n\n    /* str is 'longer' than format */\n    if (*end != '\\0') {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"String [%s] is longer than format [%s].\\n\", str, format);\n        return EINVAL;\n    }\n\n    ut = mktime(&tm);\n    if (ut == -1) {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"mktime failed to convert [%s].\\n\", str);\n        return EINVAL;\n    }\n\n    tzset();\n    ut -= timezone;\n    *_unix_time = ut;\n    return EOK;\n}\n\nstruct tmpfile_watch {\n    const char *filename;\n};\n\nstatic int unlink_dbg(const char *filename)\n{\n    errno_t ret;\n\n    ret = unlink(filename);\n    if (ret != 0) {\n        ret = errno;\n        if (ret == ENOENT) {\n            DEBUG(SSSDBG_TRACE_INTERNAL,\n                  \"File already removed: [%s]\\n\", filename);\n            return 0;\n        } else {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Cannot remove temporary file [%s] %d [%s]\\n\",\n                  filename, ret, strerror(ret));\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nstatic int unique_filename_destructor(void *memptr)\n{\n    struct tmpfile_watch *tw = talloc_get_type(memptr, struct tmpfile_watch);\n\n    if (tw == NULL || tw->filename == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"BUG: Wrong private pointer\\n\");\n        return -1;\n    }\n\n    DEBUG(SSSDBG_TRACE_INTERNAL, \"Unlinking [%s]\\n\", tw->filename);\n\n    return unlink_dbg(tw->filename);\n}\n\nstatic struct tmpfile_watch *tmpfile_watch_set(TALLOC_CTX *owner,\n                                               const char *filename)\n{\n    struct tmpfile_watch *tw = NULL;\n\n    tw = talloc_zero(owner, struct tmpfile_watch);\n    if (tw == NULL) {\n        return NULL;\n    }\n\n    tw->filename = talloc_strdup(tw, filename);\n    if (tw->filename == NULL) {\n        talloc_free(tw);\n        return NULL;\n    }\n\n    talloc_set_destructor((TALLOC_CTX *) tw,\n                          unique_filename_destructor);\n    return tw;\n}\n\nint sss_unique_file_ex(TALLOC_CTX *owner,\n                       char *path_tmpl,\n                       mode_t file_umask,\n                       errno_t *_err)\n{\n    size_t tmpl_len;\n    errno_t ret;\n    int fd = -1;\n    mode_t old_umask;\n    struct tmpfile_watch *tw = NULL;\n\n    tmpl_len = strlen(path_tmpl);\n    if (tmpl_len < 6 || strcmp(path_tmpl + (tmpl_len - 6), \"XXXXXX\") != 0) {\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"Template too short or doesn't end with XXXXXX!\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    old_umask = umask(file_umask);\n    fd = mkstemp(path_tmpl);\n    umask(old_umask);\n    if (fd == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"mkstemp(\\\"%s\\\") failed [%d]: %s!\\n\",\n              path_tmpl, ret, strerror(ret));\n        goto done;\n    }\n\n    if (owner != NULL) {\n        tw = tmpfile_watch_set(owner, path_tmpl);\n        if (tw == NULL) {\n            unlink_dbg(path_tmpl);\n            ret = ENOMEM;\n            goto done;\n        }\n    }\n\n    ret = EOK;\ndone:\n    if (_err) {\n        *_err = ret;\n    }\n    return fd;\n}\n\nint sss_unique_file(TALLOC_CTX *owner,\n                    char *path_tmpl,\n                    errno_t *_err)\n{\n    return sss_unique_file_ex(owner, path_tmpl, SSS_DFL_UMASK, _err);\n}\n\nerrno_t sss_unique_filename(TALLOC_CTX *owner, char *path_tmpl)\n{\n    int fd;\n    errno_t ret;\n\n    fd = sss_unique_file(owner, path_tmpl, &ret);\n    /* We only care about a unique file name */\n    if (fd >= 0) {\n        close(fd);\n    }\n\n    return ret;\n}\n\nbool is_user_or_group_name(const char *sudo_user_value)\n{\n    if (sudo_user_value == NULL) {\n        return false;\n    }\n\n    /* See man sudoers.ldap for explanation */\n    if (strcmp(sudo_user_value, \"ALL\") == 0) {\n        return false;\n    }\n\n    switch (sudo_user_value[0]) {\n    case '#':           /* user id */\n    case '+':           /* netgroup */\n    case '\\0':          /* empty value */\n        return false;\n    }\n\n    if (sudo_user_value[0] == '%') {\n        switch (sudo_user_value[1]) {\n        case '#':           /* POSIX group ID */\n        case ':':           /* non-POSIX group */\n        case '\\0':          /* empty value */\n            return false;\n        }\n    }\n\n    /* Now it's either a username or a groupname */\n    return true;\n}\n\nbool is_socket_activated(void)\n{\n#ifdef HAVE_SYSTEMD\n    return !!socket_activated;\n#else\n    return false;\n#endif\n}\n\nbool is_dbus_activated(void)\n{\n#ifdef HAVE_SYSTEMD\n    return !!dbus_activated;\n#else\n    return false;\n#endif\n}\n\nbool local_provider_is_built(void)\n{\n#ifdef BUILD_LOCAL_PROVIDER\n    return true;\n#else\n    return false;\n#endif\n}\n\nint sss_rand(void)\n{\n    static bool srand_done = false;\n\n    /* Coverity might complain here: \"DC.WEAK_CRYPTO (CWE-327)\"\n     * It is safe to ignore as this helper function is *NOT* intended\n     * to be used in security relevant context.\n     */\n    if (!srand_done) {\n        srand(time(NULL) * getpid());\n        srand_done = true;\n    }\n    return rand();\n}\n\nerrno_t sss_canonicalize_ip_address(TALLOC_CTX *mem_ctx,\n                                    const char *address,\n                                    char **canonical_address)\n{\n    struct addrinfo hints;\n    struct addrinfo *result = NULL;\n    char buf[INET6_ADDRSTRLEN + 1];\n    int ret;\n\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_flags = AI_NUMERICHOST;\n\n    ret = getaddrinfo(address, NULL, &hints, &result);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Failed to canonicalize address [%s]: %s\",\n              address, gai_strerror(ret));\n        return EINVAL;\n    }\n\n    ret = getnameinfo(result->ai_addr, result->ai_addrlen, buf, sizeof(buf),\n                      NULL, 0, NI_NUMERICHOST);\n    freeaddrinfo(result);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Failed to canonicalize address [%s]: %s\",\n              address, gai_strerror(ret));\n        return EINVAL;\n    }\n\n    *canonical_address = talloc_strdup(mem_ctx, buf);\n    if (*canonical_address == NULL) {\n        return ENOMEM;\n    }\n\n    return EOK;\n}\n", "/*\n   SSSD helper calls - can be used by libraries for external use as well\n\n    Authors:\n        Simo Sorce <ssorce@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <talloc.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <ctype.h>\n#include <string.h>\n#include <strings.h>\n\n#define EOK 0\n\nint split_on_separator(TALLOC_CTX *mem_ctx, const char *str,\n                       const char sep, bool trim, bool skip_empty,\n                       char ***_list, int *size)\n{\n    int ret;\n    const char *substr_end = str;\n    const char *substr_begin = str;\n    const char *sep_pos = NULL;\n    size_t substr_len;\n    char **list = NULL;\n    int num_strings = 0;\n    TALLOC_CTX *tmp_ctx = NULL;\n\n    if (str == NULL || *str == '\\0' || _list == NULL) {\n        return EINVAL;\n    }\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    do {\n        substr_len = 0;\n\n        /* If this is not the first substring, then move from the separator. */\n        if (sep_pos != NULL) {\n            substr_end = sep_pos + 1;\n            substr_begin = sep_pos + 1;\n        }\n\n        /* Find end of the first substring */\n        while (*substr_end != sep && *substr_end != '\\0') {\n            substr_end++;\n            substr_len++;\n        }\n\n        sep_pos = substr_end;\n\n        if (trim) {\n            /* Trim leading whitespace */\n            while (isspace(*substr_begin) && substr_begin < substr_end) {\n                substr_begin++;\n                substr_len--;\n            }\n\n            /* Trim trailing whitespace */\n            while (substr_end - 1 > substr_begin && isspace(*(substr_end-1))) {\n                substr_end--;\n                substr_len--;\n            }\n        }\n\n        /* Copy the substring to the output list of strings */\n        if (skip_empty == false || substr_len > 0) {\n            list = talloc_realloc(tmp_ctx, list, char*, num_strings + 2);\n            if (list == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n\n            /* empty string is stored for substr_len == 0 */\n            list[num_strings] = talloc_strndup(list, substr_begin, substr_len);\n            if (list[num_strings] == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n            num_strings++;\n        }\n\n    } while (*sep_pos != '\\0');\n\n    if (list == NULL) {\n        /* No allocations were done, make space for the NULL */\n        list = talloc(tmp_ctx, char *);\n        if (list == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    }\n    list[num_strings] = NULL;\n\n    if (size) {\n        *size = num_strings;\n    }\n\n    *_list = talloc_steal(mem_ctx, list);\n    ret = EOK;\ndone:\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nbool string_in_list(const char *string, char **list, bool case_sensitive)\n{\n    size_t c;\n    int(*compare)(const char *s1, const char *s2);\n\n    if (string == NULL || list == NULL || *list == NULL) {\n        return false;\n    }\n\n    compare = case_sensitive ? strcmp : strcasecmp;\n\n    for (c = 0; list[c] != NULL; c++) {\n        if (compare(string, list[c]) == 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n"], "fixing_code": ["extra_distcheck_flags =\nif HAVE_DEVSHM\n    extra_distcheck_flags += --with-test-dir=/dev/shm\nendif\n\nif WITH_JOURNALD\n    extra_distcheck_flags += --with-syslog=journald\nendif\n\nDISTCHECK_CONFIGURE_FLAGS = --with-ldb-lib-dir=\"$$dc_install_base\"/lib/ldb \\\n                            --disable-dbus-tests \\\n                            --enable-all-experimental-features \\\n                            $(extra_distcheck_flags) \\\n                            $(AUX_DISTCHECK_CONFIGURE_FLAGS)\nCLEANFILES = $(NULL)\nBUILT_SOURCES = $(NULL)\n\nSUBDIRS = po\n\nif HAVE_MANPAGES\nSUBDIRS += src/man\nendif\n\nSUBDIRS += . src/tests/cwrap src/tests/intg src/tests/test_CA \\\n             src/tests/test_ECC_CA\n\n# Some old versions of automake don't define builddir\nbuilddir ?= .\n\nDOXYGEN = @DOXYGEN@\n\nDISTSETUPOPTS =\nif HAVE_DEBIAN\nDISTSETUPOPTS += --install-layout=deb\nendif\n\nsssdlibexecdir = $(libexecdir)/sssd\nsssdlibdir = $(libdir)/sssd\nsssddefaultconfdir = $(sssdlibdir)/conf\nldblibdir = @ldblibdir@\nif BUILD_KRB5_LOCATOR_PLUGIN\nkrb5plugindir = @krb5pluginpath@\nendif\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nkrb5localauth_plugindir = @appmodpath@\nendif\nif BUILD_PAC_RESPONDER\nkrb5authdata_plugindir = @krb5authdatapluginpath@\nendif\nif BUILD_CIFS_IDMAP_PLUGIN\ncifsplugindir = @cifspluginpath@\nendif\nif BUILD_SAMBA\nwinbindplugindir = @winbindpluginpath@\nendif\nif BUILD_LIBWBCLIENT\nlibwbclientdir = @appmodpath@\nendif\nsssdconfdir = $(sysconfdir)/sssd\nsssddatadir = $(datadir)/sssd\nsssdapiplugindir = $(sssddatadir)/sssd.api.d\nsssdtapscriptdir = $(sssddatadir)/systemtap\ndbuspolicydir = $(sysconfdir)/dbus-1/system.d\ndbusservicedir = $(datadir)/dbus-1/system-services\nsss_statedir = $(localstatedir)/lib/sss\nrunstatedir = @runstatedir@\nlocaledir = @localedir@\nnsslibdir = @nsslibdir@\npamlibdir = @pammoddir@\nautofslibdir = @appmodpath@\nnfslibdir = @nfsidmaplibdir@\n\ndbpath = @dbpath@\npluginpath = @pluginpath@\npidpath = @pidpath@\npipepath = @pipepath@\nmcpath = @mcpath@\ninitdir = @initdir@\nsystemdunitdir = @systemdunitdir@\nsystemdconfdir = @systemdconfdir@\nlogpath = @logpath@\npubconfpath = @pubconfpath@\ngpocachepath = @gpocachepath@\nkeytabdir = $(sss_statedir)/keytabs\npkgconfigdir = $(libdir)/pkgconfig\nkrb5rcachedir = @krb5rcachedir@\nsudolibdir = @sudolibpath@\npolkitdir = @polkitdir@\npamconfdir = $(sysconfdir)/pam.d\nsystemtap_tapdir = @tapset_dir@\nsssdkcmdatadir = $(datadir)/sssd-kcm\ndeskprofilepath = $(sss_statedir)/deskprofile\n\nif HAVE_SYSTEMD_UNIT\nifp_exec_cmd = $(sssdlibexecdir)/sssd_ifp --uid 0 --gid 0 --dbus-activated\nifp_systemdservice = SystemdService=sssd-ifp.service\nifp_restart = Restart=on-failure\nelse\nifp_exec_cmd = $(sssdlibexecdir)/sss_signal\nifp_systemdservice =\nifp_restart =\nendif\n\nsecdbpath = @secdbpath@\n\nUNICODE_LIBS=@UNICODE_LIBS@\n\nMKDIR_P = @MKDIR_P@\nINSTALL = @INSTALL@\n\nSSSD_USER = @SSSD_USER@\n\n\nAM_CFLAGS =\nif WANT_AUX_INFO\n    AM_CFLAGS += -aux-info $@.X\nendif\nif HAVE_GCC\n    AM_CFLAGS += -Wall -Wshadow -Wstrict-prototypes -Wpointer-arith \\\n                 -Wcast-qual -Wcast-align -Wwrite-strings -Wundef \\\n                 -Werror-implicit-function-declaration -Winit-self \\\n                 -Wmissing-include-dirs \\\n                 -fno-strict-aliasing \\\n                 -std=gnu99\nendif\n\npkgconfig_DATA =\n\nACLOCAL_AMFLAGS = -I m4 -I .\n\nif BUILD_SSH\nbin_PROGRAMS = \\\n    sss_ssh_authorizedkeys \\\n    sss_ssh_knownhostsproxy\nendif\n\nsbin_PROGRAMS = \\\n    sssd \\\n    sss_cache \\\n    sss_override \\\n    sss_seed \\\n    sssctl \\\n    $(NULL)\n\nif BUILD_LOCAL_PROVIDER\nsbin_PROGRAMS += \\\n    sss_useradd \\\n    sss_userdel \\\n    sss_usermod \\\n    sss_groupadd \\\n    sss_groupdel \\\n    sss_groupmod \\\n    sss_groupshow \\\n    $(NULL)\nendif\n\nsssdlibexec_PROGRAMS = \\\n    sssd_nss \\\n    sssd_pam \\\n    sssd_be \\\n    krb5_child \\\n    ldap_child \\\n    proxy_child \\\n    sss_signal \\\n    $(NULL)\nif BUILD_SUDO\nsssdlibexec_PROGRAMS += sssd_sudo\nendif\nif BUILD_AUTOFS\nsssdlibexec_PROGRAMS += sssd_autofs\nendif\nif BUILD_SSH\nsssdlibexec_PROGRAMS += sssd_ssh\nendif\nif BUILD_IFP\nsssdlibexec_PROGRAMS += sssd_ifp\nendif\nif BUILD_SAMBA\nsssdlibexec_PROGRAMS += gpo_child\nendif\nif BUILD_SEMANAGE\nsssdlibexec_PROGRAMS += selinux_child\nendif\nsssdlibexec_PROGRAMS += p11_child\nif SSSD_USER\nif HAVE_POLKIT_RULES_D\npolkit_rulesdir = $(polkitdir)\ndist_polkit_rules_DATA = contrib/sssd-pcsc.rules\nendif\nendif\nif BUILD_SECRETS\nsssdlibexec_PROGRAMS += sssd_secrets\nendif\nif BUILD_KCM\nsssdlibexec_PROGRAMS += sssd_kcm\ndist_sssdkcmdata_DATA = contrib/kcm_default_ccache\nendif\n\n\nif BUILD_PAC_RESPONDER\n    sssdlibexec_PROGRAMS += sssd_pac\nendif\nif HAVE_SYSTEMD_UNIT\nsssdlibexec_PROGRAMS += sssd_check_socket_activated_responders\nendif\n\nif HAVE_CHECK\n    non_interactive_check_based_tests = \\\n        dlopen-tests \\\n        sysdb-tests \\\n        strtonum-tests \\\n        resolv-tests \\\n        krb5-utils-tests \\\n        check_and_open-tests \\\n        files-tests \\\n        refcount-tests \\\n        fail_over-tests \\\n        find_uid-tests \\\n        auth-tests \\\n        ipa_ldap_opt-tests \\\n        ad_ldap_opt-tests \\\n        crypto-tests \\\n        util-tests \\\n        debug-tests \\\n        ipa_hbac-tests \\\n        sss_idmap-tests \\\n        responder_socket_access-tests \\\n        safe-format-tests\n\nif BUILD_SSH\n    non_interactive_check_based_tests += sysdb_ssh-tests\nendif\n\nendif # HAVE_CHECK\n\nif HAVE_CMOCKA\n    non_interactive_cmocka_based_tests = \\\n        nss-srv-tests \\\n        test-find-uid \\\n        test-io \\\n        test-negcache \\\n        test-authtok \\\n        test_prompt_config \\\n        sss_nss_idmap-tests \\\n        deskprofile_utils-tests \\\n        dyndns-tests \\\n        domain_resolution_order-tests \\\n        fqnames-tests \\\n        nestedgroups-tests \\\n        test_sss_idmap \\\n        test_ipa_idmap \\\n        test_utils \\\n        dp_opt_tests \\\n        responder-get-domains-tests \\\n        config_check-tests \\\n        sss_sifp-tests \\\n        test_search_bases \\\n        test_ldap_auth \\\n        test_sdap_access \\\n        test_sdap_certmap \\\n        sdap-tests \\\n        test_sysdb_ts_cache \\\n        test_sysdb_views \\\n        test_sysdb_subdomains \\\n        test_sysdb_certmap \\\n        test_sysdb_sudo \\\n        test_sysdb_utils \\\n        test_sysdb_domain_resolution_order \\\n        test_wbc_calls \\\n        test_be_ptask \\\n        test_copy_ccache \\\n        test_copy_keytab \\\n        test_child_common \\\n        responder_cache_req-tests \\\n        test_sbus_message \\\n        test_sbus_opath \\\n        test_fo_srv \\\n        pam-srv-tests \\\n        ssh-srv-tests \\\n        test_ipa_subdom_util \\\n        test_tools_colondb \\\n        test_krb5_wait_queue \\\n        test_cert_utils \\\n        test_ldap_id_cleanup \\\n        test_data_provider_be \\\n        test_dp_request \\\n        test_dp_builtin \\\n        test_ipa_dn \\\n        simple-access-tests \\\n        krb5_common_test \\\n        test_iobuf \\\n        sss_certmap_test \\\n        test_sssd_krb5_locator_plugin \\\n        test_confdb \\\n        $(NULL)\n\n\nif HAVE_LIBRESOLV\nnon_interactive_cmocka_based_tests += test_resolv_fake\nendif   # HAVE_LIBRESOLV\n\nif BUILD_IFP\nnon_interactive_cmocka_based_tests += ifp_tests\nendif   # BUILD_IFP\n\nif HAVE_INOTIFY\nnon_interactive_cmocka_based_tests += test_inotify\nendif   # HAVE_INOTIFY\n\nif BUILD_KCM\nnon_interactive_cmocka_based_tests += \\\n\ttest_kcm_json \\\n\ttest_kcm_queue \\\n        $(NULL)\nendif   # BUILD_KCM\n\nif BUILD_SAMBA\nnon_interactive_cmocka_based_tests += \\\n    ad_access_filter_tests \\\n    ad_gpo_tests \\\n    ad_common_tests \\\n    test_sdap_initgr \\\n    test_ad_subdom \\\n    test_ipa_subdom_server \\\n    $(NULL)\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nnon_interactive_cmocka_based_tests += test_sssd_krb5_localauth_plugin\nendif # BUILD_KRB5_LOCALAUTH_PLUGIN\n\nendif   # HAVE_CMOCKA\n\ncheck_PROGRAMS = \\\n    stress-tests \\\n    krb5-child-test \\\n    test_ssh_client \\\n    $(non_interactive_cmocka_based_tests) \\\n    $(non_interactive_check_based_tests)\n\nif HAVE_CMOCKA\ncheck_PROGRAMS += dummy-child\nendif # HAVE_CMOCKA\n\nPYTHON_TESTS =\n\nif BUILD_PYTHON2_BINDINGS\nPYTHON_TESTS += src/config/SSSDConfigTest.py2.sh \\\n                src/tests/pyhbac-test.py2.sh \\\n                src/tests/pysss-test.py2.sh \\\n                src/tests/pysss_murmur-test.py2.sh \\\n                $(NULL)\nendif\nif BUILD_PYTHON3_BINDINGS\nPYTHON_TESTS += src/config/SSSDConfigTest.py3.sh \\\n                src/tests/pyhbac-test.py3.sh \\\n                src/tests/pysss-test.py3.sh \\\n                src/tests/pysss_murmur-test.py3.sh \\\n                $(NULL)\nendif\n\nTEST_EXTENSIONS = .sh\nTESTS = \\\n    $(PYTHON_TESTS) \\\n    $(non_interactive_cmocka_based_tests) \\\n    $(non_interactive_check_based_tests) \\\n    src/tests/whitespace_test \\\n    src/tests/double_semicolon_test \\\n    $(NULL)\n\nsssdlib_LTLIBRARIES = \\\n    libsss_ldap.la \\\n    libsss_krb5.la \\\n    libsss_proxy.la \\\n    libsss_simple.la \\\n    $(NULL)\n\nif BUILD_SAMBA\nsssdlib_LTLIBRARIES += \\\n    libsss_ipa.la \\\n    libsss_ad.la\nendif\n\nif HAVE_INOTIFY\nsssdlib_LTLIBRARIES += \\\n    libsss_files.la \\\n    $(NULL)\nendif # HAVE_INOTIFY\n\nldblib_LTLIBRARIES = \\\n    memberof.la\n\nif BUILD_KRB5_LOCATOR_PLUGIN\nkrb5plugin_LTLIBRARIES = \\\n    sssd_krb5_locator_plugin.la\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nkrb5localauth_plugin_LTLIBRARIES = \\\n    sssd_krb5_localauth_plugin.la\nendif\n\nif BUILD_PAC_RESPONDER\nkrb5authdata_plugin_LTLIBRARIES = \\\n    sssd_pac_plugin.la\nendif\n\nif BUILD_CIFS_IDMAP_PLUGIN\ncifsplugin_LTLIBRARIES = \\\n    cifs_idmap_sss.la\nendif\n\nif BUILD_SAMBA\nwinbindplugin_LTLIBRARIES = \\\n    winbind_idmap_sss.la \\\n    $(NULL)\nendif\n\nnoinst_LTLIBRARIES =\n\npkglib_LTLIBRARIES =\n\nif BUILD_PYTHON2_BINDINGS\npy2exec_LTLIBRARIES = \\\n    _py2sss.la \\\n    _py2hbac.la \\\n    _py2sss_murmur.la \\\n    _py2sss_nss_idmap.la \\\n    $(NULL)\nendif\n\nif BUILD_PYTHON3_BINDINGS\npy3exec_LTLIBRARIES = \\\n    _py3sss.la \\\n    _py3hbac.la \\\n    _py3sss_murmur.la \\\n    _py3sss_nss_idmap.la \\\n    $(NULL)\nendif\n\nsbin_SCRIPTS = \\\n\tsrc/tools/wrappers/sss_debuglevel \\\n\t$(NULL)\n\ndist_noinst_SCRIPTS = \\\n    $(EXTRA_SCRIPTS) \\\n    src/config/setup.py \\\n    src/config/SSSDConfig/ipachangeconf.py \\\n    src/config/SSSDConfig/sssdoptions.py \\\n    src/config/SSSDConfig/__init__.py \\\n    src/config/SSSDConfigTest.py \\\n    src/config/SSSDConfigTest.py2.sh \\\n    src/config/SSSDConfigTest.py3.sh \\\n    contrib/fedora/bashrc_sssd \\\n    contrib/fedora/make_srpm.sh \\\n    contrib/ci/clean \\\n    contrib/ci/rpm-spec-builddeps \\\n    contrib/ci/run \\\n    contrib/ci/valgrind-condense \\\n    src/tests/pyhbac-test.py \\\n    src/tests/pyhbac-test.py2.sh \\\n    src/tests/pyhbac-test.py3.sh \\\n    src/tests/pysss-test.py \\\n    src/tests/pysss-test.py2.sh \\\n    src/tests/pysss-test.py3.sh \\\n    src/tests/pysss_murmur-test.py \\\n    src/tests/pysss_murmur-test.py2.sh \\\n    src/tests/pysss_murmur-test.py3.sh \\\n    src/tests/python-test.py \\\n    src/tests/whitespace_test \\\n    src/tests/double_semicolon_test \\\n    src/tests/krb5_proxy_check_test_data.conf \\\n    $(NULL)\n\ndist_noinst_DATA = \\\n    src/config/testconfigs/sssd-valid.conf \\\n    src/config/testconfigs/noparse.api.conf \\\n    src/config/testconfigs/sssd-noversion.conf \\\n    src/config/testconfigs/sssd-badversion.conf \\\n    src/config/testconfigs/sssd-invalid.conf \\\n    src/config/testconfigs/sssd-invalid-badbool.conf \\\n    src/config/testconfigs/sssd-nonexisting-services-domains.conf \\\n    src/config/testconfigs/sssd-test-parse.conf \\\n    src/config/testconfigs/sssd-enabled-option.conf \\\n    src/config/etc/sssd.api.d/crash_test_dummy \\\n    contrib/ci/README.md \\\n    contrib/ci/configure.sh \\\n    contrib/ci/deps.sh \\\n    contrib/ci/distro.sh \\\n    contrib/ci/misc.sh \\\n    contrib/ci/sssd.supp \\\n    $(SYSTEMTAP_PROBES) \\\n    $(NULL)\n\n###############################\n# Global compilation settings #\n###############################\n\nAM_CPPFLAGS = \\\n    -Wall \\\n    -I.. \\\n    -I$(srcdir)/src/sss_client \\\n    -I$(srcdir)/src \\\n    -I. \\\n    $(POPT_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TDB_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(LDB_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(PCRE_CFLAGS) \\\n    $(INI_CONFIG_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(LIBNL_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(GLIB2_CFLAGS) \\\n    $(JOURNALD_CFLAGS) \\\n    -DLIBDIR=\\\"$(libdir)\\\" \\\n    -DVARDIR=\\\"$(localstatedir)\\\" \\\n    -DSSS_STATEDIR=\\\"$(sss_statedir)\\\" \\\n    -DSYSCONFDIR=\\\"$(sysconfdir)\\\" \\\n    -DSHLIBEXT=\\\"$(SHLIBEXT)\\\" \\\n    -DSSSDDATADIR=\\\"$(sssddatadir)\\\" \\\n    -DSSSD_LIBEXEC_PATH=\\\"$(sssdlibexecdir)\\\" \\\n    -DSSSD_CONF_DIR=\\\"$(sssdconfdir)\\\" \\\n    -DSSS_NSS_MCACHE_DIR=\\\"$(mcpath)\\\" \\\n    -DSSS_NSS_SOCKET_NAME=\\\"$(pipepath)/nss\\\" \\\n    -DSSS_PAM_SOCKET_NAME=\\\"$(pipepath)/pam\\\" \\\n    -DSSS_PAC_SOCKET_NAME=\\\"$(pipepath)/pac\\\" \\\n    -DSSS_PAM_PRIV_SOCKET_NAME=\\\"$(pipepath)/private/pam\\\" \\\n    -DSSS_SEC_SOCKET_NAME=\\\"$(runstatedir)/secrets.socket\\\" \\\n    -DSSS_SUDO_SOCKET_NAME=\\\"$(pipepath)/sudo\\\" \\\n    -DSSS_AUTOFS_SOCKET_NAME=\\\"$(pipepath)/autofs\\\" \\\n    -DSSS_SSH_SOCKET_NAME=\\\"$(pipepath)/ssh\\\" \\\n    -DLOCALEDIR=\\\"$(localedir)\\\" \\\n    -DBASE_FILE_STEM=\\\"$(*F)\\\" \\\n    $(NULL)\n\nEXTRA_DIST =\n\nSSSD_CACHE_REQ_OBJ = \\\n\tsrc/responder/common/cache_req/cache_req.c \\\n\tsrc/responder/common/cache_req/cache_req_result.c \\\n\tsrc/responder/common/cache_req/cache_req_search.c \\\n\tsrc/responder/common/cache_req/cache_req_data.c \\\n\tsrc/responder/common/cache_req/cache_req_domain.c \\\n\tsrc/responder/common/cache_req/cache_req_sr_overlay.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_common.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_users.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_groups.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_svc.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_ip_hosts.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_enum_ip_networks.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_upn.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_filter.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_user_by_cert.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_group_by_filter.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_initgroups_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_initgroups_by_upn.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_sid.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_object_by_id.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_svc_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_svc_by_port.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_netgroup_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ssh_host_id_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_map_entries.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_map_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_autofs_entry_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_host_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_host_by_addr.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_network_by_name.c \\\n\tsrc/responder/common/cache_req/plugins/cache_req_ip_network_by_addr.c \\\n\t$(NULL)\n\nSSSD_RESPONDER_IFACE_OBJ = \\\n    src/responder/common/responder_iface.c \\\n    $(NULL)\n\nSSSD_RESPONDER_OBJ = \\\n    src/responder/common/negcache_files.c \\\n    src/responder/common/negcache.c \\\n    src/util/nss_dl_load.c \\\n    src/responder/common/responder_cmd.c \\\n    src/responder/common/responder_common.c \\\n    src/responder/common/responder_dp.c \\\n    src/responder/common/responder_packet.c \\\n    src/responder/common/responder_get_domains.c \\\n    src/responder/common/responder_utils.c \\\n    src/providers/data_provider_req.c \\\n    src/util/session_recording.c \\\n    $(SSSD_RESPONDER_IFACE_OBJ) \\\n    $(SSSD_CACHE_REQ_OBJ) \\\n    $(NULL)\n\nSSSD_TOOLS_OBJ = \\\n    src/tools/sss_sync_ops.c \\\n    src/tools/tools_util.c \\\n    src/tools/common/sss_tools.c \\\n    src/tools/common/sss_process.c \\\n    src/confdb/confdb_setup.c \\\n    src/util/nscd.c \\\n    $(NULL)\n\nSSSD_LCL_TOOLS_OBJ = \\\n    src/sss_client/common.c \\\n    src/tools/tools_mc_util.c \\\n    $(SSSD_TOOLS_OBJ)\n\nSSSD_RESOLV_OBJ = \\\n    src/resolv/async_resolv.c \\\n    src/resolv/async_resolv_utils.c\n\nSSSD_FAILOVER_OBJ = \\\n    src/providers/fail_over.c \\\n    src/providers/fail_over_srv.c \\\n    $(SSSD_RESOLV_OBJ)\n\nSSSD_LIBS = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(TDB_LIBS)\n\nPYTHON_BINDINGS_LIBS = \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(NULL)\n\nTOOLS_LIBS = \\\n    $(LTLIBINTL) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TDB_LIBS)\n\nif BUILD_SELINUX\n    PYTHON_BINDINGS_LIBS += $(SELINUX_LIBS)\n    TOOLS_LIBS += $(SELINUX_LIBS)\nendif\n\ndist_noinst_HEADERS = \\\n    src/monitor/monitor.h \\\n    src/sss_iface/sbus_sss_arguments.h \\\n    src/sss_iface/sbus_sss_client_async.h \\\n    src/sss_iface/sbus_sss_client_properties.h \\\n    src/sss_iface/sbus_sss_client_sync.h \\\n    src/sss_iface/sbus_sss_interface.h \\\n    src/sss_iface/sbus_sss_invokers.h \\\n    src/sss_iface/sbus_sss_keygens.h \\\n    src/sss_iface/sbus_sss_server.h \\\n    src/sss_iface/sbus_sss_symbols.h \\\n    src/sss_iface/sss_iface_types.h \\\n    src/sss_iface/sss_iface_async.h \\\n    src/sss_iface/sss_iface_sync.h \\\n    src/sss_iface/sss_iface.h \\\n    src/util/crypto/sss_crypto.h \\\n    src/util/crypto/libcrypto/sss_openssl.h \\\n    src/util/cert.h \\\n    src/util/dlinklist.h \\\n    src/util/debug.h \\\n    src/util/util.h \\\n    src/util/util_errors.h \\\n    src/util/safe-format-string.h \\\n    src/util/session_recording.h \\\n    src/util/strtonum.h \\\n    src/util/sss_cli_cmd.h \\\n    src/util/sss_ptr_hash.h \\\n    src/util/sss_ptr_list.h \\\n    src/util/sss_endian.h \\\n    src/util/sss_nss.h \\\n    src/util/sss_ldap.h \\\n    src/util/sss_python.h \\\n    src/util/sss_regexp.h \\\n    src/util/sss_krb5.h \\\n    src/util/sss_selinux.h \\\n    src/util/sss_sockets.h \\\n    src/util/sss_utf8.h \\\n    src/util/sss_ssh.h \\\n    src/util/sss_ini.h \\\n    src/util/sss_format.h \\\n    src/util/sss_pam_data.h \\\n    src/util/refcount.h \\\n    src/util/find_uid.h \\\n    src/util/user_info_msg.h \\\n    src/util/mmap_cache.h \\\n    src/util/atomic_io.h \\\n    src/util/auth_utils.h \\\n    src/util/authtok.h \\\n    src/util/authtok-utils.h \\\n    src/util/util_sss_idmap.h \\\n    src/util/util_creds.h \\\n    src/util/inotify.h \\\n    src/util/sss_iobuf.h \\\n    src/util/tev_curl.h \\\n    src/util/secrets/secrets.h \\\n    src/util/secrets/sec_pvt.h \\\n    src/util/nss_dl_load.h \\\n    src/monitor/monitor.h \\\n    src/responder/common/responder.h \\\n    src/responder/common/responder_packet.h \\\n    src/responder/common/responder_sbus.h \\\n    src/responder/common/cache_req/cache_req.h \\\n    src/responder/common/cache_req/cache_req_domain.h \\\n    src/responder/common/cache_req/cache_req_plugin.h \\\n    src/responder/common/cache_req/cache_req_private.h \\\n    src/responder/pam/pamsrv.h \\\n    src/responder/pam/pam_helpers.h \\\n    src/responder/nss/nss_private.h \\\n    src/responder/nss/nss_protocol.h \\\n    src/responder/nss/nss_iface.h \\\n    src/responder/nss/nsssrv_mmap_cache.h \\\n    src/responder/pac/pacsrv.h \\\n    src/responder/common/negcache_files.h \\\n    src/responder/common/negcache.h \\\n    src/responder/sudo/sudosrv_private.h \\\n    src/responder/autofs/autofs_private.h \\\n    src/responder/ssh/ssh_private.h \\\n    src/responder/ifp/ifp_private.h \\\n    src/responder/ifp/ifp_domains.h \\\n    src/responder/ifp/ifp_components.h \\\n    src/responder/ifp/ifp_users.h \\\n    src/responder/ifp/ifp_groups.h \\\n    src/responder/ifp/ifp_cache.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_async.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_properties.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_sync.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_interface.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_invokers.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_server.h \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.h \\\n    src/responder/ifp/ifp_iface/ifp_iface.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_async.h \\\n    src/responder/ifp/ifp_iface/ifp_iface_sync.h \\\n    src/responder/secrets/secsrv.h \\\n    src/responder/secrets/secsrv_private.h \\\n    src/responder/secrets/secsrv_local.h \\\n    src/responder/secrets/secsrv_proxy.h \\\n    src/responder/kcm/kcm.h \\\n    src/responder/kcm/kcmsrv_pvt.h \\\n    src/responder/kcm/kcmsrv_ccache.h \\\n    src/responder/kcm/kcmsrv_ccache_pvt.h \\\n    src/responder/kcm/kcmsrv_ccache_be.h \\\n    src/responder/kcm/kcmsrv_ops.h \\\n    src/sbus/sbus_annotations.h \\\n    src/sbus/sbus_declarations.h \\\n    src/sbus/sbus_errors.h \\\n    src/sbus/sbus.h \\\n    src/sbus/sbus_interface_declarations.h \\\n    src/sbus/sbus_interface.h \\\n    src/sbus/sbus_message.h \\\n    src/sbus/sbus_opath.h \\\n    src/sbus/sbus_private.h \\\n    src/sbus/sbus_request.h \\\n    src/sbus/sbus_sync.h \\\n    src/sbus/sbus_sync_private.h \\\n    src/sbus/sbus_typeof.h \\\n    src/sbus/connection/sbus_dbus_private.h \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_async.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_sync.h \\\n    src/sbus/interface_dbus/sbus_dbus_client_properties.h \\\n    src/sbus/interface_dbus/sbus_dbus_interface.h \\\n    src/sbus/interface_dbus/sbus_dbus_invokers.h \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.h \\\n    src/sbus/interface_dbus/sbus_dbus_server.h \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.h \\\n    src/sbus/interface/sbus_iterator_readers.h \\\n    src/sbus/interface/sbus_iterator_writers.h \\\n    src/db/sysdb.h \\\n    src/db/sysdb_sudo.h \\\n    src/db/sysdb_autofs.h \\\n    src/db/sysdb_selinux.h \\\n    src/db/sysdb_private.h \\\n    src/db/sysdb_services.h \\\n    src/db/sysdb_ssh.h \\\n    src/db/sysdb_domain_resolution_order.h \\\n    src/db/sysdb_computer.h \\\n    src/db/sysdb_iphosts.h \\\n    src/db/sysdb_ipnetworks.h \\\n    src/confdb/confdb.h \\\n    src/confdb/confdb_private.h \\\n    src/confdb/confdb_setup.h \\\n    src/providers/data_provider.h \\\n    src/providers/data_provider_req.h \\\n    src/providers/data_provider/dp.h \\\n    src/providers/data_provider/dp_flags.h \\\n    src/providers/data_provider/dp_private.h \\\n    src/providers/data_provider/dp_request.h \\\n    src/providers/data_provider/dp_custom_data.h \\\n    src/providers/data_provider/dp_builtin.h \\\n    src/providers/data_provider/dp_iface.h \\\n    src/providers/backend.h \\\n    src/providers/be_dyndns.h \\\n    src/providers/be_ptask_private.h \\\n    src/providers/be_ptask.h \\\n    src/providers/be_refresh.h \\\n    src/providers/fail_over.h \\\n    src/providers/fail_over_srv.h \\\n    src/util/child_common.h \\\n    src/providers/simple/simple_access.h \\\n    src/providers/simple/simple_access_pvt.h \\\n    src/providers/krb5/krb5_auth.h \\\n    src/providers/krb5/krb5_common.h \\\n    src/providers/krb5/krb5_utils.h \\\n    src/providers/krb5/krb5_init_shared.h \\\n    src/providers/krb5/krb5_opts.h \\\n    src/providers/krb5/krb5_ccache.h \\\n    src/providers/ldap/ldap_common.h \\\n    src/providers/ldap/sdap.h \\\n    src/providers/ldap/sdap_access.h \\\n    src/providers/ldap/sdap_async.h \\\n    src/providers/ldap/sdap_async_ad.h \\\n    src/providers/ldap/sdap_async_private.h \\\n    src/providers/ldap/sdap_sudo.h \\\n    src/providers/ldap/sdap_sudo_shared.h \\\n    src/providers/ldap/sdap_autofs.h \\\n    src/providers/ldap/sdap_id_op.h \\\n    src/providers/ldap/ldap_opts.h \\\n    src/providers/ldap/ldap_auth.h \\\n    src/providers/ldap/sdap_range.h \\\n    src/providers/ldap/sdap_users.h \\\n    src/providers/ldap/sdap_dyndns.h \\\n    src/providers/ldap/sdap_async_enum.h \\\n    src/providers/ldap/sdap_async_resolver_enum.h \\\n    src/providers/ldap/sdap_ops.h \\\n    src/providers/ldap/ldap_resolver_enum.h \\\n    src/providers/ipa/ipa_common.h \\\n    src/providers/ipa/ipa_config.h \\\n    src/providers/ipa/ipa_access.h \\\n    src/providers/ipa/ipa_selinux.h \\\n    src/providers/ipa/ipa_hosts.h \\\n    src/providers/ipa/ipa_selinux_maps.h \\\n    src/providers/ipa/ipa_auth.h \\\n    src/providers/ipa/ipa_dyndns.h \\\n    src/providers/ipa/ipa_subdomains.h \\\n    src/providers/ipa/ipa_id.h \\\n    src/providers/ipa/ipa_opts.h \\\n    src/providers/ipa/ipa_srv.h \\\n    src/providers/ipa/ipa_dn.h \\\n    src/providers/ipa/ipa_sudo.h \\\n    src/providers/ipa/ipa_session.h \\\n    src/providers/ad/ad_srv.h \\\n    src/providers/ad/ad_common.h \\\n    src/providers/ad/ad_pac.h \\\n    src/providers/ad/ad_id.h \\\n    src/providers/ad/ad_access.h \\\n    src/providers/ad/ad_gpo.h \\\n    src/providers/ad/ad_opts.h \\\n    src/providers/ad/ad_domain_info.h \\\n    src/providers/ad/ad_subdomains.h \\\n    src/providers/ad/ad_resolver.h \\\n    src/providers/proxy/proxy.h \\\n    src/providers/files/files_private.h \\\n    src/tools/tools_util.h \\\n    src/tools/sss_sync_ops.h \\\n    src/resolv/async_resolv.h \\\n    src/tests/common.h \\\n    src/tests/common_check.h \\\n    src/tests/cmocka/common_mock.h \\\n    src/tests/cmocka/common_mock_resp.h \\\n    src/tests/cmocka/common_mock_sdap.h \\\n    src/tests/cmocka/common_mock_sysdb_objects.h \\\n    src/tests/cmocka/common_mock_krb5.h \\\n    src/tests/cmocka/common_mock_be.h \\\n    src/tests/cmocka/test_expire_common.h \\\n    src/tests/cmocka/test_sdap_access.h \\\n    src/tests/cmocka/data_provider/mock_dp.h \\\n    src/sss_client/pam_message.h \\\n    src/sss_client/ssh/sss_ssh_client.h \\\n    src/sss_client/sudo/sss_sudo.h \\\n    src/sss_client/libwbclient/libwbclient.h \\\n    src/sss_client/libwbclient/wbc_err_internal.h \\\n    src/sss_client/libwbclient/wbclient_internal.h \\\n    src/sss_client/libwbclient/wbc_sssd_internal.h \\\n    src/sss_client/nfs/nfsidmap_internal.h \\\n    src/lib/idmap/sss_idmap_private.h \\\n    src/lib/sifp/sss_sifp_private.h \\\n    src/lib/winbind_idmap_sss/winbind_idmap_sss.h \\\n    src/tests/cmocka/test_utils.h \\\n    src/tools/common/sss_tools.h \\\n    src/tools/common/sss_process.h \\\n    src/tools/common/sss_colondb.h \\\n    src/tools/sssctl/sssctl.h \\\n    src/util/probes.h \\\n    src/shared/io.h \\\n    src/shared/murmurhash3.h \\\n    src/shared/safealign.h \\\n    src/p11_child/p11_child.h \\\n    $(NULL)\n\n\nif HAVE_NSS\n    dist_noinst_HEADERS += src/util/crypto/nss/nss_util.h \\\n                           src/util/crypto/nss/nss_crypto.h\nendif\n\nSSSD_DOCS = \\\n    doc \\\n    hbac_doc \\\n    idmap_doc \\\n    nss_idmap_doc\n\nif BUILD_IFP\n    SSSD_DOCS += sss_simpleifp_doc\nendif\n\nCLIENT_LIBS = $(LTLIBINTL)\n\nif WITH_JOURNALD\nSYSLOG_LIBS = $(JOURNALD_LIBS)\nendif\n\n#####################\n# Utility libraries #\n#####################\npkglib_LTLIBRARIES += libsss_debug.la\nlibsss_debug_la_SOURCES = \\\n    src/util/debug.c \\\n    src/util/sss_log.c \\\n    src/util/sss_cli_cmd.c \\\n    $(NULL)\nlibsss_debug_la_LIBADD = \\\n    $(SYSLOG_LIBS)\nlibsss_debug_la_LDFLAGS = \\\n    -avoid-version\n\npkglib_LTLIBRARIES += libsss_child.la\nlibsss_child_la_SOURCES = src/util/child_common.c\nlibsss_child_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DHASH_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nlibsss_child_la_LDFLAGS = -avoid-version\n\npkglib_LTLIBRARIES += libsss_crypt.la\n\n# NOTE:\n# Please try to avoid using SSS_CRYPT_{CFLAGS,LIBS} directly for compiling and\n# linking programs or libraries. This is purpose of wrapper library\n# libsss_crypt.so to hide internals. SSS_CRYPT_{CFLAGS,LIBS} might be used\n# in unit tests if you directly uses functions from underlining crypto libraries\nif HAVE_NSS\n    SSS_CRYPT_SOURCES = src/util/crypto/nss/nss_base64.c \\\n                        src/util/crypto/nss/nss_hmac_sha1.c \\\n                        src/util/crypto/nss/nss_sha512crypt.c \\\n                        src/util/crypto/nss/nss_obfuscate.c \\\n                        src/util/crypto/nss/nss_nite.c \\\n                        src/util/crypto/nss/nss_util.c \\\n                        src/util/crypto/nss/nss_prng.c \\\n                        src/util/atomic_io.c \\\n                        src/util/memory.c \\\n                        $(NULL)\n    SSS_CRYPT_CFLAGS = $(NSS_CFLAGS)\n    SSS_CRYPT_LIBS = $(NSS_LIBS)\n\n    SSS_CERT_SOURCES = \\\n        src/util/cert/cert_common.c \\\n        src/util/cert/cert_common_p11_child.c \\\n        src/util/cert/nss/cert.c \\\n        $(NULL)\n    SSS_CERT_CFLAGS = \\\n        $(NSS_CFLAGS) \\\n        $(NULL)\n    SSS_CERT_LIBS = \\\n        $(NSS_LIBS) \\\n        $(NULL)\nelse\n    SSS_CRYPT_SOURCES = src/util/crypto/libcrypto/crypto_base64.c \\\n                        src/util/crypto/libcrypto/crypto_hmac_sha1.c \\\n                        src/util/crypto/libcrypto/crypto_sha512crypt.c \\\n                        src/util/crypto/libcrypto/crypto_obfuscate.c \\\n                        src/util/crypto/libcrypto/crypto_nite.c \\\n                        src/util/crypto/libcrypto/crypto_prng.c \\\n                        src/util/atomic_io.c \\\n                        src/util/memory.c \\\n                        $(NULL)\n    SSS_CRYPT_CFLAGS = $(CRYPTO_CFLAGS)\n    SSS_CRYPT_LIBS = $(CRYPTO_LIBS)\n\n    SSS_CERT_SOURCES = \\\n        src/util/cert/cert_common.c \\\n        src/util/cert/cert_common_p11_child.c \\\n        src/util/cert/libcrypto/cert.c \\\n        $(NULL)\n    SSS_CERT_CFLAGS = \\\n        $(CRYPTO_CFLAGS) \\\n        $(NULL)\n    SSS_CERT_LIBS = \\\n        $(CRYPTO_LIBS) \\\n        $(NULL)\nendif\n\nlibsss_crypt_la_SOURCES = \\\n    $(SSS_CRYPT_SOURCES)\nlibsss_crypt_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SSS_CRYPT_CFLAGS) \\\n    $(DHASH_CFLAGS)\nlibsss_crypt_la_LIBADD = \\\n    $(SSS_CRYPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nlibsss_crypt_la_LDFLAGS = \\\n    -avoid-version\n\npkglib_LTLIBRARIES += libsss_cert.la\n\nlibsss_cert_la_SOURCES = \\\n    $(SSS_CERT_SOURCES) \\\n    $(NULL)\nlibsss_cert_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SSS_CERT_CFLAGS) \\\n    $(NULL)\n# NOTE:\n# There is a dependency between libsss_cert and libsss_child which should\n# always be declared explicitly and if missing might cause issue in some\n# environments (e.g. Gentoo or OpenSUSE build service), even if it is\n# resolved otherwise while linking the binaries.\nlibsss_cert_la_LIBADD = \\\n    $(SSS_CERT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    libsss_crypt.la \\\n    libsss_child.la \\\n    libsss_debug.la \\\n    libsss_certmap.la \\\n    $(NULL)\nlibsss_cert_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\ngenerate-sbus-code:\n\t$(builddir)/sbus_generate.sh $(abs_srcdir)\n\n.PHONY: generate-sbus-code\n\nBUILT_SOURCES += generate-sbus-code\n\nEXTRA_DIST += \\\n    sbus_generate.sh.in \\\n    src/sbus/codegen/dbus.xml \\\n    src/sbus/codegen/sbus_CodeGen.py \\\n    src/sbus/codegen/sbus_DataType.py \\\n    src/sbus/codegen/sbus_Generator.py \\\n    src/sbus/codegen/sbus_Introspection.py \\\n    src/sbus/codegen/sbus_Invoker.py \\\n    src/sbus/codegen/sbus_Template.py \\\n    src/sbus/codegen/templates/arguments.c.tpl \\\n    src/sbus/codegen/templates/arguments.h.tpl \\\n    src/sbus/codegen/templates/client_async.c.tpl \\\n    src/sbus/codegen/templates/client_async.h.tpl \\\n    src/sbus/codegen/templates/client_properties.h.tpl \\\n    src/sbus/codegen/templates/client_sync.c.tpl \\\n    src/sbus/codegen/templates/client_sync.h.tpl \\\n    src/sbus/codegen/templates/interface.h.tpl \\\n    src/sbus/codegen/templates/invokers.c.tpl \\\n    src/sbus/codegen/templates/invokers.h.tpl \\\n    src/sbus/codegen/templates/keygens.c.tpl \\\n    src/sbus/codegen/templates/keygens.h.tpl \\\n    src/sbus/codegen/templates/server.h.tpl \\\n    src/sbus/codegen/templates/symbols.c.tpl \\\n    src/sbus/codegen/templates/symbols.h.tpl \\\n    src/sss_iface/sss_iface.xml \\\n    src/sss_iface/external_iface.xml \\\n    src/responder/ifp/ifp_iface/ifp_iface.xml \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_sbus.la\nlibsss_sbus_la_SOURCES = \\\n    src/util/check_and_open.c \\\n    src/util/debug.c \\\n    src/util/sss_ptr_hash.c \\\n    src/util/sss_ptr_list.c \\\n    src/util/sss_utf8.c \\\n    src/util/util.c \\\n    src/util/util_errors.c \\\n    src/util/util_ext.c \\\n    src/util/strtonum.c \\\n    src/sbus/sbus_errors.c \\\n    src/sbus/sbus_opath.c \\\n    src/sbus/connection/sbus_connection.c \\\n    src/sbus/connection/sbus_connection_connect.c \\\n    src/sbus/connection/sbus_dbus.c \\\n    src/sbus/connection/sbus_dispatcher.c \\\n    src/sbus/connection/sbus_reconnect.c \\\n    src/sbus/connection/sbus_send.c \\\n    src/sbus/connection/sbus_watch.c \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.c \\\n    src/sbus/interface_dbus/sbus_dbus_client_async.c \\\n    src/sbus/interface_dbus/sbus_dbus_invokers.c \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.c \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.c \\\n    src/sbus/interface/sbus_interface.c \\\n    src/sbus/interface/sbus_introspection.c \\\n    src/sbus/interface/sbus_iterator_readers.c \\\n    src/sbus/interface/sbus_iterator_writers.c \\\n    src/sbus/interface/sbus_properties.c \\\n    src/sbus/interface/sbus_properties_parser.c \\\n    src/sbus/interface/sbus_std_signals.c \\\n    src/sbus/request/sbus_message.c \\\n    src/sbus/request/sbus_request.c \\\n    src/sbus/request/sbus_request_call.c \\\n    src/sbus/request/sbus_request_hash.c \\\n    src/sbus/request/sbus_request_sender.c \\\n    src/sbus/request/sbus_request_util.c \\\n    src/sbus/router/sbus_router.c \\\n    src/sbus/router/sbus_router_handler.c \\\n    src/sbus/router/sbus_router_hash.c \\\n    src/sbus/server/sbus_server_handler.c \\\n    src/sbus/server/sbus_server_interface.c \\\n    src/sbus/server/sbus_server_match.c \\\n    src/sbus/server/sbus_server.c \\\n    $(NULL)\nlibsss_sbus_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(UNICODE_LIBS) \\\n    $(NULL)\nlibsss_sbus_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_sbus_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_sbus_sync.la\nlibsss_sbus_sync_la_SOURCES = \\\n    src/util/debug.c \\\n    src/util/sss_utf8.c \\\n    src/util/util.c \\\n    src/util/util_errors.c \\\n    src/util/strtonum.c \\\n    src/sbus/sbus_errors.c \\\n    src/sbus/sbus_opath.c \\\n    src/sbus/connection/sbus_dbus.c \\\n    src/sbus/interface_dbus/sbus_dbus_arguments.c \\\n    src/sbus/interface_dbus/sbus_dbus_client_sync.c \\\n    src/sbus/interface_dbus/sbus_dbus_keygens.c \\\n    src/sbus/interface_dbus/sbus_dbus_symbols.c \\\n    src/sbus/interface/sbus_iterator_readers.c \\\n    src/sbus/interface/sbus_iterator_writers.c \\\n    src/sbus/interface/sbus_properties_parser.c \\\n    src/sbus/request/sbus_message.c \\\n    src/sbus/sync/sbus_sync.c \\\n    src/sbus/sync/sbus_sync_call.c \\\n    $(NULL)\nlibsss_sbus_sync_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(NULL)\nlibsss_sbus_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(UNICODE_LIBS) \\\n    $(NULL)\nlibsss_sbus_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_iface.la\nlibsss_iface_la_SOURCES = \\\n    src/sss_iface/sbus_sss_arguments.c \\\n    src/sss_iface/sbus_sss_client_async.c \\\n    src/sss_iface/sbus_sss_invokers.c \\\n    src/sss_iface/sbus_sss_keygens.c \\\n    src/sss_iface/sbus_sss_symbols.c \\\n    src/sss_iface/sss_iface_types.c \\\n    src/sss_iface/sss_iface.c \\\n    src/util/domain_info_utils.c \\\n    src/util/sss_pam_data.c \\\n    $(NULL)\nlibsss_iface_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus.la \\\n    $(NULL)\nlibsss_iface_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_iface_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_iface_sync.la\nlibsss_iface_sync_la_SOURCES = \\\n    src/sss_iface/sbus_sss_arguments.c \\\n    src/sss_iface/sbus_sss_client_sync.c \\\n    src/sss_iface/sbus_sss_keygens.c \\\n    src/sss_iface/sbus_sss_symbols.c \\\n    src/sss_iface/sss_iface_types.c \\\n    src/util/domain_info_utils.c \\\n    src/util/sss_pam_data.c \\\n    $(NULL)\nlibsss_iface_sync_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nlibsss_iface_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibsss_iface_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libsss_util.la\nlibsss_util_la_SOURCES = \\\n    src/confdb/confdb.c \\\n    src/db/sysdb.c \\\n    src/db/sysdb_ops.c \\\n    src/db/sysdb_search.c \\\n    src/db/sysdb_selinux.c \\\n    src/db/sysdb_upgrade.c \\\n    src/db/sysdb_init.c \\\n    src/db/sysdb_services.c \\\n    src/db/sysdb_autofs.c \\\n    src/db/sysdb_subdomains.c \\\n    src/db/sysdb_views.c \\\n    src/db/sysdb_ranges.c \\\n    src/db/sysdb_idmap.c \\\n    src/db/sysdb_gpo.c \\\n    src/db/sysdb_certmap.c \\\n    src/db/sysdb_domain_resolution_order.c \\\n    src/db/sysdb_iphosts.c \\\n    src/db/sysdb_ipnetworks.c \\\n    src/util/sss_pam_data.c \\\n    src/db/sysdb_computer.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/util_preauth.c \\\n    src/util/memory.c \\\n    src/util/safe-format-string.c \\\n    src/util/server.c \\\n    src/util/signal.c \\\n    src/util/usertools.c \\\n    src/util/backup_file.c \\\n    src/util/strtonum.c \\\n    src/util/check_and_open.c \\\n    src/util/refcount.c \\\n    src/util/sss_nss.c \\\n    src/util/sss_utf8.c \\\n    src/util/sss_tc_utf8.c \\\n    src/util/murmurhash3.c \\\n    src/util/atomic_io.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/sss_selinux.c \\\n    src/util/domain_info_utils.c \\\n    src/util/util_lock.c \\\n    src/util/util_errors.c \\\n    src/util/find_uid.c \\\n    src/util/sss_ini.c \\\n    src/util/io.c \\\n    src/util/util_sss_idmap.c \\\n    src/util/well_known_sids.c \\\n    src/util/string_utils.c \\\n    src/util/become_user.c \\\n    src/util/util_watchdog.c \\\n    src/util/sss_ptr_hash.c \\\n    src/util/files.c \\\n    src/util/selinux.c \\\n    src/util/sss_regexp.c \\\n    $(NULL)\nlibsss_util_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS) \\\n    $(NULL)\nlibsss_util_la_LIBADD = \\\n    $(LIBADD_TIMER) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    $(UNICODE_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    libsss_debug.la \\\n    libsss_child.la \\\n    libsss_crypt.la \\\n    libsss_cert.la \\\n    $(NULL)\nif BUILD_SUDO\n    libsss_util_la_SOURCES += src/db/sysdb_sudo.c\nendif\nif BUILD_SSH\nlibsss_util_la_SOURCES += \\\n    src/db/sysdb_ssh.c \\\n    src/util/sss_ssh.c\nendif\nif BUILD_SYSTEMTAP\nlibsss_util_la_LIBADD += stap_generated_probes.lo\nendif\nlibsss_util_la_LDFLAGS = -avoid-version\n\nif BUILD_WITH_LIBSECRET\npkglib_LTLIBRARIES += libsss_secrets.la\nlibsss_secrets_la_SOURCES = \\\n    src/util/secrets/secrets.c \\\n    src/util/secrets/config.c \\\n    $(NULL)\nlibsss_secrets_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nlibsss_secrets_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_util.la \\\n    $(NULL)\nlibsss_secrets_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\nendif\n\npkglib_LTLIBRARIES += libsss_semanage.la\nlibsss_semanage_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(NULL)\nlibsss_semanage_la_SOURCES = \\\n    src/util/sss_semanage.c \\\n    $(NULL)\nlibsss_semanage_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    libsss_debug.la \\\n    $(NULL)\nif BUILD_SEMANAGE\nlibsss_semanage_la_LIBADD += $(SEMANAGE_LIBS)\nendif\n\nlibsss_semanage_la_LDFLAGS = \\\n    -avoid-version\n\nSSSD_INTERNAL_LTLIBS = \\\n    libsss_util.la \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_child.la \\\n    $(NULL)\n\nlib_LTLIBRARIES = libipa_hbac.la \\\n                  libsss_idmap.la \\\n                  libsss_nss_idmap.la \\\n                  libsss_certmap.la \\\n                  $(NULL)\n\npkgconfig_DATA += src/lib/ipa_hbac/ipa_hbac.pc\nlibipa_hbac_la_DEPENDENCIES = src/lib/ipa_hbac/ipa_hbac.exports\nlibipa_hbac_la_SOURCES = \\\n    src/lib/ipa_hbac/hbac_evaluator.c \\\n    src/util/sss_utf8.c\n# libipa_hbac is also used by external projects such as pam_hbac which\n# support platforms that do not have a C99 compiler. We add -std=c89\n# explicitly here to make sure we don't accidentally add a C99 feature\n# to the libipa_hbac code\nlibipa_hbac_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/util \\\n    -std=c89 \\\n    $(NULL)\nlibipa_hbac_la_LIBADD = \\\n    $(UNICODE_LIBS)\nlibipa_hbac_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/ipa_hbac/ipa_hbac.exports \\\n    -version-info 1:0:1\n\ndist_noinst_DATA += src/lib/ipa_hbac/ipa_hbac.exports\n\npkgconfig_DATA += src/lib/idmap/sss_idmap.pc\nlibsss_idmap_la_DEPENDENCIES = src/lib/idmap/sss_idmap.exports\nlibsss_idmap_la_SOURCES = \\\n    src/lib/idmap/sss_idmap.c \\\n    src/lib/idmap/sss_idmap_conv.c \\\n    src/util/murmurhash3.c\nlibsss_idmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/idmap/sss_idmap.exports \\\n    -version-info 5:1:5\n\ndist_noinst_DATA += src/lib/idmap/sss_idmap.exports\n\npkgconfig_DATA += src/sss_client/idmap/sss_nss_idmap.pc\nlibsss_nss_idmap_la_DEPENDENCIES = src/sss_client/idmap/sss_nss_idmap.exports\nlibsss_nss_idmap_la_SOURCES = \\\n    src/sss_client/idmap/sss_nss_idmap.c \\\n    src/sss_client/idmap/sss_nss_ex.c \\\n    src/sss_client/idmap/sss_nss_idmap_private.h \\\n    src/sss_client/common.c \\\n    src/sss_client/idmap/common_ex.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nss_group.c \\\n    src/sss_client/nss_mc_initgr.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/strtonum.c \\\n    src/util/murmurhash3.c \\\n    src/util/io.c \\\n    $(NULL)\nlibsss_nss_idmap_la_LIBADD = \\\n    $(LIBCLOCK_GETTIME) \\\n    $(CLIENT_LIBS) \\\n    -lpthread \\\n    $(NULL)\nlibsss_nss_idmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/idmap/sss_nss_idmap.exports \\\n    -version-info 5:0:5\n\ndist_noinst_DATA += src/sss_client/idmap/sss_nss_idmap.exports\n\ninclude_HEADERS = \\\n    src/lib/ipa_hbac/ipa_hbac.h \\\n    src/lib/idmap/sss_idmap.h \\\n    src/sss_client/idmap/sss_nss_idmap.h \\\n    src/lib/certmap/sss_certmap.h \\\n    $(NULL)\n\nif BUILD_LIBWBCLIENT\nlibwbclient_LTLIBRARIES = libwbclient.la\npkgconfig_DATA += src/sss_client/libwbclient/wbclient_sssd.pc\n\nEXTRA_libwbclient_la_DEPENDENCIES = \\\n    src/sss_client/libwbclient/wbclient.exports \\\n    $(NULL)\n\nlibwbclient_la_SOURCES = \\\n    src/sss_client/libwbclient/wbc_guid.c \\\n    src/sss_client/libwbclient/wbc_idmap_common.c \\\n    src/sss_client/libwbclient/wbc_idmap_sssd.c \\\n    src/sss_client/libwbclient/wbclient_common.c \\\n    src/sss_client/libwbclient/wbclient_sssd.c \\\n    src/sss_client/libwbclient/wbc_pam_sssd.c \\\n    src/sss_client/libwbclient/wbc_pwd_sssd.c \\\n    src/sss_client/libwbclient/wbc_sid_common.c \\\n    src/sss_client/libwbclient/wbc_sid_sssd.c \\\n    src/sss_client/libwbclient/wbc_sssd_internal.h \\\n    src/sss_client/libwbclient/wbc_util_common.c \\\n    src/sss_client/libwbclient/wbc_util_sssd.c \\\n    src/sss_client/libwbclient/wbc_ctx_sssd.c \\\n    $(NULL)\nlibwbclient_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    libsss_nss_idmap.la \\\n    $(CLIENT_LIBS) \\\n    $(NULL)\n\nlibwbclient_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/libwbclient/wbclient.exports \\\n    -version-info @libwbclient_version_info@ \\\n    $(NULL)\n\ndist_noinst_DATA += src/sss_client/libwbclient/wbclient.exports \\\n    $(NULL)\n\ninclude_HEADERS += src/sss_client/libwbclient/wbclient_sssd.h\nendif #BUILD_LIBWBCLIENT\n\nif BUILD_IFP\nlib_LTLIBRARIES += libsss_simpleifp.la\npkgconfig_DATA += src/lib/sifp/sss_simpleifp.pc\n\nlibsss_simpleifp_la_SOURCES = \\\n    src/lib/sifp/sss_sifp.c \\\n    src/lib/sifp/sss_sifp_dbus.c \\\n    src/lib/sifp/sss_sifp_attrs.c \\\n    src/lib/sifp/sss_sifp_common.c \\\n    src/lib/sifp/sss_sifp_parser.c \\\n    src/lib/sifp/sss_sifp_utils.c\nlibsss_simpleifp_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/lib/sifp\nlibsss_simpleifp_la_LIBADD = \\\n    $(DBUS_LIBS) \\\n    $(DHASH_LIBS)\nlibsss_simpleifp_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/sifp/sss_simpleifp.exports \\\n    -version-info 1:1:1\n\ndist_noinst_DATA += src/lib/sifp/sss_simpleifp.exports\n\ninclude_HEADERS += \\\n    src/lib/sifp/sss_sifp.h \\\n    src/lib/sifp/sss_sifp_dbus.h\nendif\n\n#########################\n# Systemtap tracing     #\n#########################\n\nif BUILD_SYSTEMTAP\nSYSTEMTAP_PROBES = \\\n    $(srcdir)/src/systemtap/sssd_probes.d \\\n    $(NULL)\n\nsystemtap_tap_DATA = $(builddir)/src/systemtap/sssd.stp\n\ndist_systemtap_tap_DATA = \\\n    $(builddir)/src/systemtap/sssd_functions.stp \\\n    $(NULL)\n\ndist_sssdtapscript_DATA = \\\n    contrib/systemtap/id_perf.stp \\\n    contrib/systemtap/nested_group_perf.stp \\\n    contrib/systemtap/dp_request.stp \\\n    contrib/systemtap/ldap_perf.stp \\\n    $(NULL)\n\nstap_generated_probes.h: $(srcdir)/src/systemtap/sssd_probes.d\n\t$(AM_V_GEN)$(DTRACE) -C -h -s $< -o $@\n\nstap_generated_probes.o: $(srcdir)/src/systemtap/sssd_probes.d stap_generated_probes.h\n\t$(AM_V_GEN)$(DTRACE) -C -G -s $< -o $@\n\nstap_generated_probes.lo: stap_generated_probes.o\n\t$(AM_V_GEN)printf %s\\\\n \\\n\t'# $@ - a libtool object file' \\\n\t'# Generated by libtool (GNU libtool) 2.4' \\\n\t'# Actually generated by Makefile.am, in order to shut up libtool' \\\n\t\"pic_object='$<'\" \\\n\t\"non_pic_object='$<'\" \\\n\t> $@\n\nBUILT_SOURCES += stap_generated_probes.h\n\nCLEANFILES += stap_generated_probes.h \\\n\t      stap_generated_probes.o \\\n\t      stap_generated_probes.lo \\\n\t      $(NULL)\nendif\n\n####################\n# Program Binaries #\n####################\nsssd_SOURCES = \\\n    src/monitor/monitor.c \\\n    src/monitor/monitor_netlink.c \\\n    src/confdb/confdb_setup.c \\\n    src/util/nscd.c \\\n    src/util/inotify.c \\\n    $(NULL)\nsssd_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(INOTIFY_LIBS) \\\n    $(LIBNL_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsssd_nss_SOURCES = \\\n    src/responder/nss/nsssrv.c \\\n    src/responder/nss/nss_cmd.c \\\n    src/responder/nss/nss_enum.c \\\n    src/responder/nss/nss_get_object.c \\\n    src/responder/nss/nss_protocol.c \\\n    src/responder/nss/nss_protocol_pwent.c \\\n    src/responder/nss/nss_protocol_grent.c \\\n    src/responder/nss/nss_protocol_netgr.c \\\n    src/responder/nss/nss_protocol_svcent.c \\\n    src/responder/nss/nss_protocol_hostent.c \\\n    src/responder/nss/nss_protocol_netent.c \\\n    src/responder/nss/nss_protocol_sid.c \\\n    src/responder/nss/nss_utils.c \\\n    src/responder/nss/nss_iface.c \\\n    src/responder/nss/nsssrv_mmap_cache.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_nss_LDADD = \\\n    $(LIBADD_DL) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    libsss_idmap.la \\\n    libsss_cert.la \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsssd_pam_SOURCES = \\\n    src/responder/pam/pam_LOCAL_domain.c \\\n    src/responder/pam/pamsrv.c \\\n    src/responder/pam/pamsrv_cmd.c \\\n    src/responder/pam/pamsrv_p11.c \\\n    src/responder/pam/pamsrv_dp.c \\\n    src/responder/pam/pam_prompting_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    src/responder/pam/pam_helpers.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_pam_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_pam_LDADD = \\\n    $(LIBADD_DL) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_certmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif BUILD_SUDO\nsssd_sudo_SOURCES = \\\n    src/responder/sudo/sudosrv.c \\\n    src/responder/sudo/sudosrv_cmd.c \\\n    src/responder/sudo/sudosrv_get_sudorules.c \\\n    src/responder/sudo/sudosrv_query.c \\\n    src/responder/sudo/sudosrv_dp.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_sudo_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nif BUILD_AUTOFS\nsssd_autofs_SOURCES = \\\n    src/responder/autofs/autofssrv.c \\\n    src/responder/autofs/autofssrv_cmd.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_autofs_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nif BUILD_SSH\nsssd_ssh_SOURCES = \\\n    src/responder/ssh/sshsrv.c \\\n    src/responder/ssh/ssh_cmd.c \\\n    src/responder/ssh/ssh_known_hosts.c \\\n    src/responder/ssh/ssh_protocol.c \\\n    src/responder/ssh/ssh_reply.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_ssh_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_cert.la \\\n    libsss_certmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nsssd_pac_SOURCES = \\\n    src/responder/pac/pacsrv.c \\\n    src/responder/pac/pacsrv_cmd.c \\\n    src/providers/ad/ad_pac_common.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_pac_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS)\nsssd_pac_LDADD = \\\n    $(LIBADD_DL) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif BUILD_IFP\npkglib_LTLIBRARIES += libifp_iface.la\nlibifp_iface_la_SOURCES = \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_async.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_invokers.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.c \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.c \\\n    src/responder/ifp/ifp_iface/ifp_iface.c \\\n    $(NULL)\nlibifp_iface_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus.la \\\n    $(NULL)\nlibifp_iface_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibifp_iface_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\npkglib_LTLIBRARIES += libifp_iface_sync.la\nlibifp_iface_sync_la_SOURCES = \\\n    src/responder/ifp/ifp_iface/sbus_ifp_arguments.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_client_sync.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_keygens.c \\\n    src/responder/ifp/ifp_iface/sbus_ifp_symbols.c \\\n    src/responder/ifp/ifp_iface/ifp_iface_types.c \\\n    $(NULL)\nlibifp_iface_sync_la_LIBADD = \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(DBUS_LIBS) \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nlibifp_iface_sync_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n\t$(DHASH_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(TEVENT_CFLAGS) \\\n    $(DBUS_CFLAGS) \\\n    $(NULL)\nlibifp_iface_sync_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\n\nsssd_ifp_SOURCES = \\\n    src/responder/ifp/ifpsrv.c \\\n    src/responder/ifp/ifpsrv_cmd.c \\\n    src/responder/ifp/ifp_iface_nodes.c \\\n    src/responder/ifp/ifpsrv_util.c \\\n    src/responder/ifp/ifp_domains.c \\\n    src/responder/ifp/ifp_components.c \\\n    src/responder/ifp/ifp_users.c \\\n    src/responder/ifp/ifp_groups.c \\\n    src/responder/ifp/ifp_cache.c \\\n    $(SSSD_RESPONDER_OBJ)\nsssd_ifp_CFLAGS = \\\n    $(AM_CFLAGS)\nsssd_ifp_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_cert.la \\\n    libifp_iface.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ndist_dbuspolicy_DATA = \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.conf\ndist_dbusservice_DATA = \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.service\n\nEXTRA_DIST += \\\n    src/responder/ifp/org.freedesktop.sssd.infopipe.service.in \\\n    $(NULL)\n\nifp_edit_cmd = $(edit_cmd) \\\n        -e 's|@ifp_exec_cmd[@]|$(ifp_exec_cmd)|g' \\\n        -e 's|@ifp_systemdservice[@]|$(ifp_systemdservice)|g' \\\n        -e 's|@ifp_restart[@]|$(ifp_restart)|g'\n\nifp_replace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(ifp_edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nsrc/responder/ifp/org.freedesktop.sssd.infopipe.service: src/responder/ifp/org.freedesktop.sssd.infopipe.service.in Makefile\n\t$(ifp_replace_script)\n\nendif\n\nif BUILD_SECRETS\nsssd_secrets_SOURCES = \\\n    src/responder/secrets/secsrv.c \\\n    src/responder/secrets/secsrv_cmd.c \\\n    src/responder/secrets/providers.c \\\n    src/responder/secrets/local.c \\\n    src/responder/secrets/proxy.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_iobuf.c \\\n    src/util/tev_curl.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_secrets_LDADD = \\\n    $(LIBADD_DL) \\\n    $(HTTP_PARSER_LIBS) \\\n    $(JANSSON_LIBS) \\\n    $(TDB_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CURL_LIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_secrets.la \\\n    $(NULL)\nendif\n\nif BUILD_KCM\nsssd_kcm_SOURCES = \\\n    src/responder/kcm/kcm.c \\\n    src/responder/kcm/kcmsrv_cmd.c \\\n    src/responder/kcm/kcmsrv_ccache.c \\\n    src/responder/kcm/kcmsrv_ccache_mem.c \\\n    src/responder/kcm/kcmsrv_ccache_json.c \\\n    src/responder/kcm/kcmsrv_ccache_secdb.c \\\n    src/responder/kcm/kcmsrv_ops.c \\\n    src/responder/kcm/kcmsrv_op_queue.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(SSSD_RESPONDER_OBJ) \\\n    $(NULL)\nsssd_kcm_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(UUID_CFLAGS) \\\n    $(CURL_CFLAGS) \\\n    $(JANSSON_CFLAGS) \\\n    $(NULL)\nsssd_kcm_LDADD = \\\n    $(LIBADD_DL) \\\n    $(KRB5_LIBS) \\\n    $(JANSSON_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(UUID_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_secrets.la \\\n    $(NULL)\n\nif BUILD_SECRETS\nsssd_kcm_SOURCES += \\\n    src/responder/kcm/kcmsrv_ccache_secrets.c \\\n    src/util/tev_curl.c \\\n    $(NULL)\nsssd_kcm_LDADD += \\\n    $(CURL_LIBS) \\\n    $(NULL)\nendif\n\nendif\n\nsssd_be_SOURCES = \\\n    src/providers/data_provider_be.c \\\n    src/providers/data_provider_req.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/providers/be_dyndns.c \\\n    src/providers/be_ptask.c \\\n    src/providers/be_refresh.c \\\n    src/providers/data_provider/dp.c \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/providers/data_provider/dp_iface_backend.c \\\n    src/providers/data_provider/dp_iface_failover.c \\\n    src/providers/data_provider/dp_client.c \\\n    src/providers/data_provider/dp_resp_client.c \\\n    src/providers/data_provider/dp_request.c \\\n    src/providers/data_provider/dp_reply_std.c \\\n    src/providers/data_provider/dp_target_sudo.c \\\n    src/providers/data_provider/dp_target_hostid.c \\\n    src/providers/data_provider/dp_target_autofs.c \\\n    src/providers/data_provider/dp_target_subdomains.c \\\n    src/providers/data_provider/dp_target_id.c \\\n    src/providers/data_provider/dp_target_auth.c \\\n    src/providers/data_provider/dp_target_resolver.c \\\n    src/util/session_recording.c \\\n    $(SSSD_FAILOVER_OBJ)\nsssd_be_LDADD = \\\n    $(LIBADD_DL) \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nsssd_be_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/providers/sssd_be.exports \\\n    -export-dynamic\nif BUILD_SYSTEMTAP\nsssd_be_LDADD += stap_generated_probes.lo\nendif\n\nif BUILD_PYTHON_BINDINGS\nsss_obfuscate_pythondir = $(sbindir)\ndist_sss_obfuscate_python_SCRIPTS = \\\n    src/tools/sss_obfuscate\nendif\n\n\n\ndist_noinst_DATA += \\\n    src/examples/sssd-example.conf \\\n    src/examples/sssdproxytest \\\n    src/examples/sudo \\\n    src/examples/logrotate \\\n    src/providers/sssd_be.exports \\\n    src/sss_client/COPYING \\\n    src/sss_client/COPYING.LESSER \\\n    src/m4\n\ndist_sssddefaultconf_DATA = \\\n    src/examples/sssd.conf\n\ndist_pamconf_DATA = \\\n    src/examples/sssd-shadowutils\n\n######################\n# Command-line Tools #\n######################\nsss_useradd_SOURCES = \\\n    src/tools/sss_useradd.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_useradd_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\n\nsss_userdel_SOURCES = \\\n    src/tools/sss_userdel.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_userdel_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\nsss_userdel_CFLAGS = \\\n    $(AM_CFLAGS)\n\nsss_groupadd_SOURCES = \\\n    src/tools/sss_groupadd.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_groupadd_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_groupdel_SOURCES = \\\n    src/tools/sss_groupdel.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_groupdel_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_groupdel_CFLAGS = $(AM_CFLAGS)\n\nsss_usermod_SOURCES = \\\n    src/tools/sss_usermod.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_usermod_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) \\\n    libsss_semanage.la \\\n    $(NULL)\nsss_usermod_CFLAGS = $(AM_CFLAGS)\n\nsss_groupmod_SOURCES = \\\n    src/tools/sss_groupmod.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_groupmod_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_groupmod_CFLAGS = $(AM_CFLAGS)\n\nsss_groupshow_SOURCES = \\\n    src/tools/sss_groupshow.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_groupshow_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_cache_SOURCES = \\\n    src/tools/sss_cache.c \\\n    $(SSSD_LCL_TOOLS_OBJ)\nsss_cache_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS)\nsss_cache_CFLAGS = $(AM_CFLAGS)\n\nsss_seed_SOURCES = \\\n    src/tools/sss_seed.c \\\n    $(SSSD_TOOLS_OBJ)\nsss_seed_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\n\nsss_signal_SOURCES = \\\n    src/tools/sss_signal.c \\\n    src/tools/common/sss_process.c\n    $(NULL)\nsss_signal_LDADD = \\\n    libsss_debug.la \\\n    $(NULL)\n\nsss_override_SOURCES = \\\n    src/tools/sss_override.c \\\n    src/tools/common/sss_colondb.c \\\n    $(SSSD_TOOLS_OBJ) \\\n    $(NULL)\nsss_override_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nsss_override_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\n\nsssctl_SOURCES = \\\n    src/tools/sssctl/sssctl.c \\\n    src/tools/sssctl/sssctl_systemd.c \\\n    src/tools/sssctl/sssctl_cache.c \\\n    src/tools/sssctl/sssctl_data.c \\\n    src/tools/sssctl/sssctl_logs.c \\\n    src/tools/sssctl/sssctl_domains.c \\\n    src/tools/sssctl/sssctl_config.c \\\n    src/tools/sssctl/sssctl_user_checks.c \\\n    src/tools/sssctl/sssctl_access_report.c \\\n    src/tools/sssctl/sssctl_cert.c \\\n    $(SSSD_TOOLS_OBJ) \\\n    $(NULL)\nsssctl_LDADD = \\\n    $(TOOLS_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PAM_LIBS) \\\n    $(PAM_MISC_LIBS) \\\n    $(LIBADD_DL) \\\n    libsss_certmap.la \\\n    libifp_iface_sync.la \\\n    libsss_iface_sync.la \\\n    libsss_sbus_sync.la \\\n    $(NULL)\nsssctl_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\n\nif BUILD_SUDO\nsss_sudo_cli_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sudo/sss_sudo.c \\\n    src/sss_client/sudo/sss_sudo_response.c \\\n    src/sss_client/sudo_testcli/sudo_testcli.c\nsss_sudo_cli_CFLAGS = $(AM_CFLAGS)\nsss_sudo_cli_LDADD = $(CLIENT_LIBS)\nendif\n\nif BUILD_SSH\nsss_ssh_authorizedkeys_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/ssh/sss_ssh_client.c \\\n    src/sss_client/ssh/sss_ssh_authorizedkeys.c\nsss_ssh_authorizedkeys_CFLAGS = $(AM_CFLAGS)\nsss_ssh_authorizedkeys_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) $(TALLOC_LIBS) $(POPT_LIBS)\n\nsss_ssh_knownhostsproxy_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/ssh/sss_ssh_client.c \\\n    src/sss_client/ssh/sss_ssh_knownhostsproxy.c\nsss_ssh_knownhostsproxy_CFLAGS = $(AM_CFLAGS)\nsss_ssh_knownhostsproxy_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(CLIENT_LIBS) $(TALLOC_LIBS) $(POPT_LIBS)\nendif\n\nif HAVE_SYSTEMD_UNIT\nsssd_check_socket_activated_responders_SOURCES = \\\n    src/tools/sssd_check_socket_activated_responders.c \\\n    $(NULL)\nsssd_check_socket_activated_responders_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_check_socket_activated_responders_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LTLIBINTL) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(NULL)\nendif\n\npkgconfig_DATA += src/lib/certmap/sss_certmap.pc\nlibsss_certmap_la_DEPENDENCIES = src/lib/certmap/sss_certmap.exports\nlibsss_certmap_la_SOURCES = \\\n    src/lib/certmap/sss_certmap.c \\\n    src/lib/certmap/sss_certmap_attr_names.c \\\n    src/lib/certmap/sss_certmap_krb5_match.c \\\n    src/lib/certmap/sss_certmap_ldap_mapping.c \\\n    src/lib/certmap/sss_cert_content_common.c \\\n    src/util/util_ext.c \\\n    src/util/cert/cert_common.c \\\n    $(NULL)\nlibsss_certmap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(NULL)\nlibsss_certmap_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\nlibsss_certmap_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/lib/certmap/sss_certmap.exports \\\n    -version-info 2:0:2\n\nif HAVE_NSS\nlibsss_certmap_la_SOURCES += \\\n    src/lib/certmap/sss_cert_content_nss.c \\\n    src/util/crypto/nss/nss_base64.c \\\n    src/util/cert/nss/cert.c \\\n    src/util/crypto/nss/nss_util.c \\\n    $(NULL)\nlibsss_certmap_la_CFLAGS += $(NSS_CFLAGS)\nlibsss_certmap_la_LIBADD += $(NSS_LIBS)\nelse\nlibsss_certmap_la_SOURCES += \\\n    src/lib/certmap/sss_cert_content_crypto.c \\\n    src/util/crypto/libcrypto/crypto_base64.c \\\n    src/util/cert/libcrypto/cert.c \\\n    $(NULL)\n\nlibsss_certmap_la_CFLAGS += $(CRYPTO_CFLAGS)\nlibsss_certmap_la_LIBADD += $(CRYPTO_LIBS)\nendif\n\ndist_noinst_DATA += src/lib/certmap/sss_certmap.exports\ndist_noinst_HEADERS += src/lib/certmap/sss_certmap_int.h\n\n#################\n# Feature Tests #\n#################\nTESTS_ENVIRONMENT = LDB_MODULES_PATH=$(abs_top_builddir)/ldb_mod_test_dir \\\n                    SSS_TEST_DIR=$(TEST_DIR) \\\n                    ABS_TOP_SRCDIR=$(abs_top_srcdir) \\\n                    $(AUX_TESTS_ENVIRONMENT)\n\nif VALGRIND_ENABLED\n@VALGRIND_CHECK_RULES@\nVALGRIND_SUPPRESSIONS_FILES = $(abs_top_srcdir)/contrib/ci/sssd.supp\nendif\n\nldb_mod_test_dir: memberof.la\n\t$(MKDIR_P) $(builddir)/ldb_mod_test_dir\n\tcp $(builddir)/.libs/memberof.so $(builddir)/ldb_mod_test_dir\n\ncheck_LTLIBRARIES = \\\n    libsss_test_common.la\n\nlibsss_test_common_la_SOURCES = \\\n    src/tests/common_tev.c \\\n    src/tests/common_dom.c \\\n    src/tests/leak_check.c \\\n    src/tests/common.c\nlibsss_test_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibsss_test_common_la_LIBADD += stap_generated_probes.lo\nendif\n\nif HAVE_CHECK\nlibsss_test_common_la_SOURCES += \\\n    src/tests/common_check.c\n\ncheck_LTLIBRARIES += \\\n    libdlopen_test_providers.la \\\n    libsss_nss_idmap_tests.la \\\n    $(NULL)\n\nif BUILD_SAMBA\ncheck_LTLIBRARIES += \\\n    libsss_ad_tests.la \\\n    libdlopen_test_winbind_idmap.la \\\n    $(NULL)\nendif\n\n# libdlopen_test_providers is a helper library to provide missing symbols for\n# dlopen_tests. It is mainly used for the backend modules but is used as well\n# to provide __wrap_sss_nss_make_request_timeout needed make make dlopen_tests\n# pass for libsss_nss_idmap_tests.\nlibdlopen_test_providers_la_SOURCES = \\\n    $(sssd_be_SOURCES) \\\n    src/tests/cmocka/wrap_sss_nss_make_request_timeout.c \\\n    $(NULL)\nlibdlopen_test_providers_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    -DUNIT_TESTING\nlibdlopen_test_providers_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibdlopen_test_providers_la_LIBADD += stap_generated_probes.lo\nendif\nlibdlopen_test_providers_la_LDFLAGS = \\\n    -shared \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/providers/sssd_be.exports \\\n    -rpath $(abs_top_builddir) \\\n    -export-dynamic\n\nlibsss_nss_idmap_tests_la_SOURCES = $(libsss_nss_idmap_la_SOURCES)\nlibsss_nss_idmap_tests_la_LIBADD = $(libsss_nss_idmap_la_LIBADD)\nlibsss_nss_idmap_tests_la_LDFLAGS = \\\n    $(libsss_nss_idmap_la_LDFLAGS) \\\n    -shared \\\n    -rpath $(libdir) \\\n    -Wl,-wrap,sss_nss_make_request_timeout \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/idmap/sss_nss_idmap.unit_tests\n\ndist_noinst_DATA += src/sss_client/idmap/sss_nss_idmap.unit_tests\n\nlibsss_ad_tests_la_SOURCES = $(libsss_ad_la_SOURCES)\nlibsss_ad_tests_la_CFLAGS = $(libsss_ad_la_CFLAGS)\nlibsss_ad_tests_la_LIBADD = \\\n    $(libsss_ad_la_LIBADD) \\\n    libdlopen_test_providers.la \\\n    $(NULL)\nlibsss_ad_tests_la_LDFLAGS = \\\n    -shared \\\n    -rpath $(abs_top_builddir) \\\n    $(NULL)\n\ndlopen_tests_SOURCES = \\\n    src/tests/dlopen-tests.c\ndlopen_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ndlopen_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CHECK_LIBS)\n\nEXTRA_sysdb_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsysdb_tests_SOURCES = \\\n    src/tests/sysdb-tests.c\nsysdb_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsysdb_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nEXTRA_sysdb_ssh_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsysdb_ssh_tests_SOURCES = \\\n    src/tests/sysdb_ssh-tests.c\nsysdb_ssh_tests_CFLAGS = \\\n    $(AM_CFLAGS)\\\n    $(CHECK_CFLAGS)\nsysdb_ssh_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nstrtonum_tests_SOURCES = \\\n    src/tests/strtonum-tests.c \\\n    src/util/strtonum.c\nstrtonum_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nstrtonum_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nkrb5_utils_tests_SOURCES = \\\n    src/tests/krb5_utils-tests.c \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/util/become_user.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nkrb5_utils_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(CHECK_CFLAGS)\nkrb5_utils_tests_LDADD = \\\n    $(SSSD_LIBS)\\\n    $(CARES_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\n\ncheck_and_open_tests_SOURCES = \\\n    src/tests/check_and_open-tests.c \\\n    src/util/check_and_open.c\ncheck_and_open_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ncheck_and_open_tests_LDADD = \\\n    libsss_debug.la \\\n    $(CHECK_LIBS) \\\n    libsss_test_common.la\n\nFILES_TESTS_LIBS = \\\n    $(CHECK_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la\nif BUILD_SELINUX\n    FILES_TESTS_LIBS += $(SELINUX_LIBS)\nendif\nif BUILD_SEMANAGE\n    FILES_TESTS_LIBS += $(SEMANAGE_LIBS)\nendif\n\nif HAVE_INOTIFY\nfiles_tests_SOURCES = \\\n    src/tests/files-tests.c \\\n    src/util/check_and_open.c \\\n    src/util/atomic_io.c \\\n    src/util/selinux.c \\\n    src/util/files.c\nfiles_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nfiles_tests_LDADD = \\\n    $(FILES_TESTS_LIBS) \\\n    libsss_test_common.la \\\n    $(SSSD_INTERNAL_LTLIBS)\nendif   # HAVE_INOTIFY\n\nSSSD_RESOLV_TESTS_OBJ = \\\n    $(SSSD_RESOLV_OBJ)\n\nresolv_tests_SOURCES = \\\n    src/tests/resolv-tests.c \\\n    src/tests/common.c \\\n    $(SSSD_RESOLV_TESTS_OBJ)\nresolv_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    -DBUILD_TXT\nresolv_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(CARES_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nrefcount_tests_SOURCES = \\\n    src/tests/refcount-tests.c \\\n    $(NULL)\nrefcount_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nrefcount_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nfail_over_tests_SOURCES = \\\n    src/tests/fail_over-tests.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nfail_over_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nfail_over_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(CARES_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nfind_uid_tests_SOURCES = \\\n    src/tests/find_uid-tests.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/strtonum.c\nfind_uid_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS)\nfind_uid_tests_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    libsss_test_common.la\n\nauth_tests_SOURCES = \\\n    src/tests/auth-tests.c\nauth_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nauth_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nipa_ldap_opt_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    src/tests/ipa_ldap_opt-tests.c\nipa_ldap_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nipa_ldap_opt_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(OPENLDAP_LIBS) \\\n    libsss_test_common.la\n\nad_ldap_opt_tests_SOURCES = \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/tests/ad_ldap_opt-tests.c\nad_ldap_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nad_ldap_opt_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la\n\nutil_tests_SOURCES = \\\n    src/tests/util-tests.c \\\n    $(NULL)\nutil_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS) \\\n    $(NULL)\nutil_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nsafe_format_tests_SOURCES = \\\n    src/tests/safe-format-tests.c\nsafe_format_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsafe_format_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ndebug_tests_SOURCES = \\\n    src/tests/debug-tests.c \\\n    src/tests/common.c\ndebug_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ndebug_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_debug.la\n\ncrypto_tests_SOURCES = \\\n    src/tests/crypto-tests.c\ncrypto_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\ncrypto_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_crypt.la \\\n    libsss_debug.la \\\n    libsss_test_common.la\n\nipa_hbac_tests_SOURCES = \\\n    src/tests/ipa_hbac-tests.c\nipa_hbac_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nipa_hbac_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CHECK_LIBS) \\\n    libsss_test_common.la \\\n    libipa_hbac.la\n\nsss_idmap_tests_SOURCES = \\\n    src/tests/sss_idmap-tests.c\nsss_idmap_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nsss_idmap_tests_LDADD = \\\n    $(CHECK_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la\n\nresponder_socket_access_tests_SOURCES = \\\n    src/tests/responder_socket_access-tests.c \\\n    src/responder/common/negcache_files.c \\\n    src/responder/common/negcache.c \\\n    src/util/nss_dl_load.c \\\n    src/responder/common/responder_common.c \\\n    src/responder/common/responder_packet.c \\\n    src/responder/common/responder_cmd.c \\\n    src/responder/common/cache_req/cache_req_domain.c \\\n    src/util/session_recording.c \\\n    $(SSSD_RESPONDER_IFACE_OBJ) \\\n    $(NULL)\nresponder_socket_access_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CHECK_CFLAGS)\nresponder_socket_access_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CHECK_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nendif\n\nstress_tests_SOURCES = \\\n    src/tests/stress-tests.c\nstress_tests_LDADD = \\\n    $(SSSD_LIBS) \\\n    libsss_test_common.la\n\nkrb5_child_test_SOURCES = \\\n    src/tests/krb5_child-test.c \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_child_handler.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/providers/data_provider_fo.c \\\n    src/providers/data_provider_opts.c \\\n    src/providers/data_provider_callbacks.c \\\n    src/util/become_user.c \\\n    $(SSSD_FAILOVER_OBJ) \\\n    $(NULL)\nkrb5_child_test_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DKRB5_CHILD_DIR=\\\"$(builddir)\\\" \\\n    $(KRB5_CFLAGS) \\\n    $(CHECK_CFLAGS)\nkrb5_child_test_LDADD = \\\n    $(SSSD_LIBS) \\\n    $(CARES_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CHECK_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_ssh_client_SOURCES = \\\n    src/tests/test_ssh_client.c \\\n    $(NULL)\ntest_ssh_client_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DSSH_CLIENT_DIR=\\\"$(abs_top_builddir)\\\" \\\n    $(NULL)\ntest_ssh_client_LDADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SSSD_LIBS) \\\n    $(NULL)\n\ntest_sbus_message_SOURCES = \\\n    src/tests/cmocka/sbus/test_sbus_message.c \\\n    $(NULL)\ntest_sbus_message_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sbus_message_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sbus_opath_SOURCES = \\\n    src/tests/cmocka/sbus/test_sbus_opath.c \\\n    $(NULL)\ntest_sbus_opath_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sbus_opath_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif HAVE_CMOCKA\n\nTEST_MOCK_RESP_OBJ = \\\n     src/tests/cmocka/common_mock_resp.c \\\n     src/tests/cmocka/common_mock_resp_dp.c \\\n     src/responder/common/responder_packet.c \\\n     src/responder/common/responder_cmd.c \\\n     src/responder/common/negcache_files.c \\\n     src/responder/common/negcache.c \\\n     src/util/nss_dl_load.c \\\n     src/responder/common/responder_common.c \\\n     src/responder/common/responder_utils.c \\\n     src/util/session_recording.c \\\n     $(SSSD_CACHE_REQ_OBJ) \\\n     $(SSSD_RESPONDER_IFACE_OBJ) \\\n     $(NULL)\n\nTEST_MOCK_PROVIDER_OBJ = \\\n     src/util/sss_sockets.c \\\n     src/util/sss_ldap.c \\\n     src/providers/data_provider_opts.c \\\n     src/providers/ldap/ldap_opts.c \\\n     src/providers/ldap/ldap_options.c \\\n     src/providers/ldap/sdap_domain.c \\\n     src/providers/ldap/sdap.c \\\n     src/providers/ldap/sdap_utils.c \\\n     src/providers/ldap/sdap_range.c \\\n     src/tests/cmocka/common_mock_sdap.c \\\n     src/tests/cmocka/common_mock_sysdb_objects.c\n\nEXTRA_nss_srv_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\nnss_srv_tests_SOURCES = \\\n     $(TEST_MOCK_RESP_OBJ) \\\n     src/tests/cmocka/test_nss_srv.c \\\n     src/responder/nss/nss_cmd.c \\\n     src/responder/nss/nss_enum.c \\\n     src/responder/nss/nss_get_object.c \\\n     src/responder/nss/nss_protocol.c \\\n     src/responder/nss/nss_protocol_pwent.c \\\n     src/responder/nss/nss_protocol_grent.c \\\n     src/responder/nss/nss_protocol_netgr.c \\\n     src/responder/nss/nss_protocol_svcent.c \\\n     src/responder/nss/nss_protocol_hostent.c \\\n     src/responder/nss/nss_protocol_netent.c \\\n     src/responder/nss/nss_protocol_sid.c \\\n     src/responder/nss/nss_utils.c \\\n     src/responder/nss/nsssrv_mmap_cache.c\nnss_srv_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nnss_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_ncache_check_user \\\n    -Wl,-wrap,sss_ncache_check_upn \\\n    -Wl,-wrap,sss_ncache_check_uid \\\n    -Wl,-wrap,sss_ncache_check_sid \\\n    -Wl,-wrap,sss_ncache_check_cert \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done\nnss_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_cert.la \\\n    libsss_idmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_pam_srv_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES) \\\n    $(NULL)\nEXTRA_pam_srv_tests_DEPENDENCIES += p11_child\npam_srv_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_pam_srv.c \\\n    src/sss_client/pam_message.c \\\n    src/responder/pam/pamsrv_cmd.c \\\n    src/responder/pam/pamsrv_p11.c \\\n    src/responder/pam/pam_helpers.c \\\n    src/responder/pam/pamsrv_dp.c \\\n    src/responder/pam/pam_LOCAL_domain.c \\\n    src/responder/pam/pam_prompting_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    $(NULL)\npam_srv_tests_CFLAGS = \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(AM_CFLAGS) \\\n    $(NULL)\npam_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done \\\n    -Wl,-wrap,pam_dp_send_req \\\n    $(NULL)\npam_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la \\\n    libsss_certmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_ssh_srv_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES) \\\n    $(NULL)\nEXTRA_ssh_srv_tests_DEPENDENCIES += p11_child\nssh_srv_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_ssh_srv.c \\\n    src/responder/ssh/ssh_cmd.c \\\n    src/responder/ssh/ssh_known_hosts.c \\\n    src/responder/ssh/ssh_protocol.c \\\n    src/responder/ssh/ssh_reply.c \\\n    src/util/cert/cert_common_p11_child.c \\\n    $(NULL)\nssh_srv_tests_CFLAGS = \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nssh_srv_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_packet_get_body \\\n    -Wl,-wrap,sss_packet_get_cmd \\\n    -Wl,-wrap,sss_cmd_send_empty \\\n    -Wl,-wrap,sss_cmd_done \\\n    -Wl,-wrap,ssh_dp_send_req \\\n    $(NULL)\nssh_srv_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nEXTRA_responder_get_domains_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\nresponder_get_domains_tests_SOURCES = \\\n     $(SSSD_RESPONDER_OBJ) \\\n     src/tests/cmocka/test_responder_common.c \\\n     src/tests/cmocka/common_mock_resp.c\nresponder_get_domains_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nresponder_get_domains_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_parse_name_for_domains \\\n    -Wl,-wrap,sss_ncache_reset_repopulate_permanent\nresponder_get_domains_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nconfig_check_tests_SOURCES = \\\n    src/tests/cmocka/test_config_check.c \\\n    $(NULL)\nconfig_check_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nconfig_check_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_find_uid_SOURCES = \\\n    src/tests/cmocka/test_find_uid.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/strtonum.c\ntest_find_uid_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS)\ntest_find_uid_LDADD = \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    libsss_debug.la\n\ntest_io_SOURCES = \\\n    src/tests/cmocka/test_io.c \\\n    src/util/io.c \\\n    src/tests/common.c\ntest_io_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_io_LDADD = \\\n    $(CMOCKA_LIBS)\n\nEXTRA_test_negcache_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\ntest_negcache_SOURCES = \\\n    $(SSSD_RESPONDER_OBJ) \\\n    src/tests/cmocka/common_mock_resp.c \\\n    src/tests/cmocka/test_negcache.c \\\n    src/tests/cmocka/test_negcache_2.c\ntest_negcache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(DHASH_CFLAGS)\ntest_negcache_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_idmap.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_authtok_SOURCES = \\\n    src/tests/cmocka/test_authtok.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\ntest_authtok_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(NULL)\ntest_authtok_LDADD = \\\n    $(TALLOC_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_test_common.la \\\n    libsss_debug.la \\\n    $(NULL)\n\ntest_prompt_config_SOURCES = \\\n    src/tests/cmocka/test_prompt_config.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    $(NULL)\ntest_prompt_config_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\ntest_prompt_config_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\n\nsss_nss_idmap_tests_SOURCES = \\\n    src/tests/cmocka/sss_nss_idmap-tests.c\nsss_nss_idmap_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nsss_nss_idmap_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    libsss_nss_idmap_tests.la \\\n    $(NULL)\n\ndeskprofile_utils_tests_SOURCES = \\\n    src/tests/cmocka/test_deskprofile_utils.c \\\n    src/providers/ipa/ipa_deskprofile_rules_util.c \\\n    src/providers/ipa/ipa_rules_common.c\ndeskprofile_utils_tests_CFLAGS = \\\n    $(AM_CFLAGS)\ndeskprofile_utils_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nEXTRA_dyndns_tests_DEPENDENCIES = \\\n     $(ldblib_LTLIBRARIES)\ndyndns_tests_SOURCES = \\\n     $(SSSD_RESOLV_OBJ) \\\n     src/tests/cmocka/common_mock_be.c \\\n     src/tests/cmocka/test_dyndns.c \\\n     src/providers/data_provider_opts.c\ndyndns_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DDYNDNS_TIMEOUT=2\ndyndns_tests_LDFLAGS = \\\n    -Wl,-wrap,execv \\\n    -Wl,-wrap,getifaddrs \\\n    -Wl,-wrap,freeifaddrs\ndyndns_tests_LDADD = \\\n    $(CARES_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ndomain_resolution_order_tests_SOURCES = \\\n\tsrc/tests/cmocka/test_domain_resolution_order.c \\\n\tsrc/responder/common/cache_req/cache_req_domain.c\ndomain_resolution_order_tests_CFLAGS = \\\n\t$(AM_CFLAGS)\ndomain_resolution_order_tests_LDADD = \\\n\t$(CMOCKA_LIBS) \\\n\t$(SSSD_INTERNAL_LTLIBS) \\\n\tlibsss_test_common.la\n\nfqnames_tests_SOURCES = \\\n    src/tests/cmocka/test_fqnames.c\nfqnames_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nfqnames_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nnestedgroups_tests_SOURCES = \\\n    $(TEST_MOCK_PROVIDER_OBJ) \\\n    src/providers/ldap/sdap_idmap.c \\\n    src/tests/cmocka/test_nested_groups.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/providers/ldap/sdap_async_nested_groups.c \\\n    src/providers/ldap/sdap_ad_groups.c \\\n    src/providers/ipa/ipa_dn.c \\\n    $(NULL)\nnestedgroups_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DEXTERNAL_MEMBERS_CHUNK=1 \\\n    $(NULL)\nnestedgroups_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_idmap.la \\\n    libsss_test_common.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nnestedgroups_tests_LDADD += stap_generated_probes.lo\nendif\n\ntest_sss_idmap_SOURCES = \\\n    src/tests/cmocka/test_sss_idmap.c\ntest_sss_idmap_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_sss_idmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_ipa_idmap_SOURCES = \\\n    src/tests/cmocka/test_ipa_idmap.c \\\n    src/providers/ipa/ipa_idmap.c\ntest_ipa_idmap_CFLAGS = \\\n    $(AM_CFLAGS)\ntest_ipa_idmap_LDFLAGS = \\\n    -Wl,-wrap,sysdb_get_ranges\ntest_ipa_idmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_idmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_utils_SOURCES = \\\n    src/tests/cmocka/test_utils.c \\\n    src/tests/cmocka/test_string_utils.c \\\n    src/tests/cmocka/test_sss_ptr_hash.c \\\n    src/p11_child/p11_child_common_utils.c \\\n    $(NULL)\nif BUILD_SSH\ntest_utils_SOURCES += src/tests/cmocka/test_sss_ssh.c\nendif\ntest_utils_CFLAGS = \\\n    $(AM_CFLAGS)\nif HAVE_NSS\ntest_utils_CFLAGS += \\\n    $(NSS_CFLAGS) \\\n    $(NULL)\nelse\ntest_utils_CFLAGS += \\\n    $(P11_KIT_CFLAGS) \\\n    $(NULL)\nendif\ntest_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\ntest_search_bases_SOURCES = \\\n    src/tests/cmocka/test_search_bases.c\ntest_search_bases_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ldap_auth_SOURCES = \\\n    src/tests/cmocka/test_ldap_auth.c \\\n    src/tests/cmocka/test_expire_common.c \\\n    $(NULL)\ntest_ldap_auth_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ldap_id_cleanup_SOURCES = \\\n    src/tests/cmocka/test_ldap_id_cleanup.c \\\n    $(NULL)\ntest_ldap_id_cleanup_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sdap_access_SOURCES = \\\n    src/tests/cmocka/test_sdap_access.c \\\n    src/tests/cmocka/test_expire_common.c \\\n    $(NULL)\ntest_sdap_access_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_sdap_certmap_SOURCES = \\\n    src/tests/cmocka/test_sdap_certmap.c \\\n    src/providers/ldap/sdap_certmap.c \\\n    $(NULL)\ntest_sdap_certmap_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\ntest_sdap_certmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_certmap.la \\\n    $(NULL)\n\nad_access_filter_tests_SOURCES = \\\n    src/tests/cmocka/test_ad_access_filter.c\nad_access_filter_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nad_gpo_tests_SOURCES = \\\n    src/tests/cmocka/test_ad_gpo.c\nad_gpo_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\nad_gpo_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NDR_NBT_LIBS) \\\n    libsss_ldap_common.la \\\n    libsss_idmap.la \\\n    libsss_krb5_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nad_common_tests_SOURCES = \\\n    $(libsss_krb5_common_la_SOURCES) \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_ad_common.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_domain_info.c \\\n    src/providers/ldap/sdap_async_initgroups_ad.c \\\n    $(NULL)\nad_common_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nad_common_tests_LDFLAGS = \\\n    -Wl,-wrap,sdap_set_sasl_options \\\n    -Wl,-wrap,krb5_kt_default \\\n    $(NULL)\nad_common_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_idmap.la \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ndp_opt_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/tests/cmocka/test_dp_opts.c\ndp_opt_tests_CFLAGS = \\\n    $(AM_CFLAGS)\ndp_opt_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la\n\nsdap_tests_SOURCES = \\\n    src/providers/data_provider_opts.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    src/tests/cmocka/test_sdap.c \\\n    $(NULL)\nsdap_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsdap_tests_LDFLAGS = \\\n    -Wl,-wrap,ldap_set_option \\\n    -Wl,-wrap,ldap_get_dn \\\n    -Wl,-wrap,ldap_memfree \\\n    -Wl,-wrap,ldap_get_values_len \\\n    -Wl,-wrap,ldap_value_free_len \\\n    -Wl,-wrap,ldap_first_attribute \\\n    -Wl,-wrap,ldap_next_attribute \\\n    $(NULL)\nsdap_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(OPENLDAP_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nif BUILD_IFP\nifp_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_ifp.c \\\n    src/responder/ifp/ifpsrv_cmd.c \\\n    src/responder/ifp/ifpsrv_util.c \\\n    $(NULL)\nifp_tests_CFLAGS = \\\n    $(AM_CFLAGS)\nifp_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nsss_sifp_tests_SOURCES = \\\n    src/tests/cmocka/test_sss_sifp.c \\\n    src/lib/sifp/sss_sifp_attrs.c \\\n    src/lib/sifp/sss_sifp_common.c \\\n    src/lib/sifp/sss_sifp_parser.c \\\n    src/lib/sifp/sss_sifp_utils.c \\\n    src/lib/sifp/sss_sifp_dbus.c \\\n    src/lib/sifp/sss_sifp.c\nsss_sifp_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -I$(top_srcdir)/src/lib/sifp\nsss_sifp_tests_LDFLAGS = \\\n    -Wl,-wrap,dbus_bus_get \\\n    -Wl,-wrap,dbus_connection_send_with_reply_and_block\nsss_sifp_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS)\nendif # BUILD_IFP\n\ntest_sysdb_views_SOURCES = \\\n    src/tests/cmocka/test_sysdb_views.c \\\n    src/providers/ipa/ipa_utils.c \\\n    $(NULL)\ntest_sysdb_views_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_views_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_ts_cache_SOURCES = \\\n    src/tests/cmocka/test_sysdb_ts_cache.c \\\n    src/providers/ipa/ipa_utils.c \\\n    $(NULL)\ntest_sysdb_ts_cache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_ts_cache_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_subdomains_SOURCES = \\\n    src/tests/cmocka/test_sysdb_subdomains.c \\\n    $(NULL)\ntest_sysdb_subdomains_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_subdomains_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_certmap_SOURCES = \\\n    src/tests/cmocka/test_sysdb_certmap.c \\\n    $(NULL)\ntest_sysdb_certmap_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_certmap_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_sudo_SOURCES = \\\n    src/tests/cmocka/test_sysdb_sudo.c \\\n    $(NULL)\ntest_sysdb_sudo_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_sudo_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_utils_SOURCES = \\\n    src/tests/cmocka/test_sysdb_utils.c \\\n    $(NULL)\ntest_sysdb_utils_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sysdb_domain_resolution_order_SOURCES = \\\n    src/tests/cmocka/test_sysdb_domain_resolution_order.c \\\n    $(NULL)\ntest_sysdb_domain_resolution_order_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sysdb_domain_resolution_order_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_wbc_calls_SOURCES = \\\n    src/tests/cmocka/test_wbc_calls.c \\\n    src/sss_client/libwbclient/wbc_sid_sssd.c \\\n    src/sss_client/libwbclient/wbclient_common.c \\\n    src/sss_client/libwbclient/wbc_sid_common.c \\\n    src/sss_client/common.c \\\n    $(NULL)\ntest_wbc_calls_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_wbc_calls_LDFLAGS = \\\n    -Wl,-wrap,sss_nss_getnamebysid \\\n    $(NULL)\ntest_wbc_calls_LDADD = \\\n    $(CLIENT_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_nss_idmap.la \\\n    $(NULL)\n\ntest_be_ptask_SOURCES = \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/test_be_ptask.c \\\n    src/providers/be_ptask.c \\\n    $(NULL)\ntest_be_ptask_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_be_ptask_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_copy_ccache_SOURCES = \\\n    src/tests/cmocka/test_copy_ccache.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_copy_ccache_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_copy_ccache_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_copy_keytab_SOURCES = \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_copy_keytab.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_copy_keytab_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_copy_keytab_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ndummy_child_SOURCES = \\\n    src/tests/cmocka/dummy_child.c \\\n    $(NULL)\ndummy_child_LDADD = \\\n    $(POPT_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\n\ntest_child_common_SOURCES = \\\n    src/tests/cmocka/test_child_common.c \\\n    src/util/child_common.c \\\n    src/util/signal.c \\\n    src/util/atomic_io.c \\\n    src/util/util_errors.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\ntest_child_common_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DCHILD_DIR=\\\"$(builddir)\\\" \\\n    $(NULL)\ntest_child_common_LDFLAGS = \\\n    -Wl,-wrap,child_io_destructor \\\n    $(NULL)\ntest_child_common_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    $(NULL)\n\nresponder_cache_req_tests_SOURCES = \\\n    $(TEST_MOCK_RESP_OBJ) \\\n    src/tests/cmocka/test_responder_cache_req.c \\\n    $(NULL)\nresponder_cache_req_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nresponder_cache_req_tests_LDFLAGS = \\\n    -Wl,-wrap,sss_dp_get_account_send \\\n    $(NULL)\nresponder_cache_req_tests_LDADD = \\\n    $(LIBADD_DL) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(SYSTEMD_DAEMON_LIBS) \\\n    libsss_test_common.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nif HAVE_LIBRESOLV\ntest_resolv_fake_SOURCES = \\\n    src/tests/cmocka/test_resolv_fake.c \\\n    src/resolv/async_resolv.c \\\n    $(NULL)\ntest_resolv_fake_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_resolv_fake_LDFLAGS = \\\n    -Wl,-wrap,ares_query \\\n    $(NULL)\ntest_resolv_fake_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CARES_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(RESOLV_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    $(NULL)\nendif # HAVE_LIBRESOLV\n\ntest_fo_srv_SOURCES = \\\n    src/tests/cmocka/test_fo_srv.c \\\n    src/providers/fail_over.c \\\n    src/providers/fail_over_srv.c \\\n    $(NULL)\ntest_fo_srv_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_fo_srv_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CARES_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_sdap_initgr_SOURCES = \\\n    src/tests/cmocka/common_mock_sdap.c \\\n    src/tests/cmocka/common_mock_sysdb_objects.c \\\n    src/tests/cmocka/test_sdap_initgr.c \\\n    $(NULL)\ntest_sdap_initgr_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\ntest_sdap_initgr_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_ad_subdom_SOURCES = \\\n    src/tests/cmocka/test_ad_subdomains.c \\\n    $(NULL)\ntest_ad_subdom_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NULL)\ntest_ad_subdom_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_idmap.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    libsss_krb5_common.la \\\n    $(NULL)\n\ntest_ipa_subdom_util_SOURCES = \\\n    src/tests/cmocka/test_ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    $(NULL)\ntest_ipa_subdom_util_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_ipa_subdom_util_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_ipa_subdom_server_SOURCES = \\\n    $(libsss_krb5_common_la_SOURCES) \\\n    src/tests/cmocka/common_mock_sdap.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/common_mock_krb5.c \\\n    src/tests/cmocka/test_ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_opts.c \\\n    $(NULL)\ntest_ipa_subdom_server_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DIPA_TRUST_KEYTAB_DIR=TEST_DIR\\\"/tp_test_ipa_subdom_server-test_ipa_subdomains_server\\\" \\\n    $(NULL)\ntest_ipa_subdom_server_LDFLAGS = \\\n    -Wl,-wrap,krb5_kt_default \\\n    -Wl,-wrap,execle \\\n    -Wl,-wrap,execve \\\n    -Wl,-wrap,rename \\\n    -Wl,-wrap,sss_unique_filename \\\n    $(NULL)\ntest_ipa_subdom_server_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_ad_tests.la \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_tools_colondb_SOURCES = \\\n    src/tests/cmocka/test_tools_colondb.c \\\n    src/tools/common/sss_colondb.c \\\n    $(NULL)\ntest_tools_colondb_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_tools_colondb_LDFLAGS = \\\n    $(NULL)\ntest_tools_colondb_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(POPT_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_krb5_wait_queue_SOURCES = \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/tests/cmocka/test_krb5_wait_queue.c \\\n    src/providers/krb5/krb5_wait_queue.c \\\n    $(NULL)\ntest_krb5_wait_queue_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_krb5_wait_queue_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_cert_utils_SOURCES = \\\n    src/tests/cmocka/test_cert_utils.c \\\n    src/util/cert/cert_common_p11_child.c \\\n    $(NULL)\ntest_cert_utils_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -U SSSD_LIBEXEC_PATH -DSSSD_LIBEXEC_PATH=\\\"$(abs_builddir)\\\" \\\n    -I$(abs_builddir)/src \\\n    $(CRYPTO_CFLAGS) \\\n    $(NULL)\ntest_cert_utils_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(CRYPTO_LIBS) \\\n    libsss_debug.la \\\n    libsss_test_common.la \\\n    libsss_cert.la \\\n    libsss_crypt.la \\\n    $(NULL)\n\ntest_data_provider_be_SOURCES = \\\n    src/providers/data_provider_be.c \\\n    src/tests/cmocka/test_data_provider_be.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_data_provider_be_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_data_provider_be_LDFLAGS = \\\n    -Wl,-wrap,_tevent_add_timer \\\n    $(NULL)\ntest_data_provider_be_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_dp_request_SOURCES = \\\n    src/providers/data_provider/dp_request.c \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/tests/cmocka/data_provider/mock_dp.c \\\n    src/tests/cmocka/data_provider/test_dp_request.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_dp_request_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_dp_request_LDFLAGS = \\\n    -Wl,-wrap,be_is_offline \\\n    $(NULL)\ntest_dp_request_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\nif BUILD_SYSTEMTAP\ntest_dp_request_LDADD += stap_generated_probes.lo\nendif\n\ntest_dp_builtin_SOURCES = \\\n    src/providers/data_provider/dp_modules.c \\\n    src/providers/data_provider/dp_targets.c \\\n    src/providers/data_provider/dp_methods.c \\\n    src/providers/data_provider/dp_builtin.c \\\n    src/tests/cmocka/data_provider/mock_dp.c \\\n    src/tests/cmocka/data_provider/test_dp_builtin.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    $(NULL)\ntest_dp_builtin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    -DUNIT_TESTING \\\n    $(NULL)\ntest_dp_builtin_LDFLAGS = \\\n    $(NULL)\ntest_dp_builtin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_ipa_dn_SOURCES = \\\n    src/providers/ipa/ipa_dn.c \\\n    src/tests/cmocka/test_ipa_dn.c \\\n    $(NULL)\ntest_ipa_dn_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_iobuf_SOURCES = \\\n    src/util/sss_iobuf.c \\\n    src/tests/cmocka/test_iobuf.c \\\n    $(NULL)\ntest_iobuf_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_iobuf_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(NULL)\n\ntest_confdb_SOURCES = \\\n    src/tests/cmocka/confdb/test_confdb.c \\\n    $(NULL)\ntest_confdb_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_confdb_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(LDB_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nEXTRA_simple_access_tests_DEPENDENCIES = \\\n    $(ldblib_LTLIBRARIES)\nsimple_access_tests_SOURCES = \\\n    src/tests/cmocka/test_simple_access.c \\\n    src/tests/cmocka/common_mock_be.c \\\n    src/providers/simple/simple_access.c \\\n    src/providers/simple/simple_access_check.c \\\n    $(NULL)\nsimple_access_tests_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsimple_access_tests_LDFLAGS = \\\n    $(NULL)\nsimple_access_tests_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\nkrb5_common_test_SOURCES = \\\n    src/tests/cmocka/test_krb5_common.c \\\n    $(NULL)\nkrb5_common_test_CFLAGS = \\\n    $(KRB5_CFLAGS) \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nkrb5_common_test_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    libsss_krb5_common.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libdlopen_test_providers.la \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\ntest_inotify_SOURCES = \\\n    src/util/inotify.c \\\n    src/tests/cmocka/test_inotify.c \\\n    $(NULL)\ntest_inotify_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_inotify_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(LIBADD_DL) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nsss_certmap_test_SOURCES = \\\n    src/tests/cmocka/test_certmap.c \\\n    src/lib/certmap/sss_certmap_attr_names.c \\\n    $(NULL)\nsss_certmap_test_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NSS_CFLAGS) \\\n    -I$(abs_builddir)/src \\\n    $(NULL)\nsss_certmap_test_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(NSS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    libsss_certmap.la \\\n    $(NULL)\n\ntest_sssd_krb5_locator_plugin_SOURCES = \\\n    src/tests/cmocka/test_sssd_krb5_locator_plugin.c \\\n    src/krb5_plugin/sssd_krb5_locator_plugin.c \\\n    $(NULL)\ntest_sssd_krb5_locator_plugin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(TALLOC_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    -DTEST_PUBCONF_PATH=\\\"$(abs_builddir)/src/tests/cmocka/pubconf\\\" \\\n    $(NULL)\ntest_sssd_krb5_locator_plugin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(POPT_LIBS) \\\n    $(TALLOC_LIBS) \\\n    $(KRB5_LIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nif BUILD_KCM\ntest_kcm_json_SOURCES = \\\n    src/tests/cmocka/test_kcm_json_marshalling.c \\\n    src/responder/kcm/kcmsrv_ccache_json.c \\\n    src/responder/kcm/kcmsrv_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntest_kcm_json_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(UUID_CFLAGS) \\\n    $(NULL)\ntest_kcm_json_LDADD = \\\n    $(JANSSON_LIBS) \\\n    $(UUID_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\ntest_kcm_queue_SOURCES = \\\n    src/tests/cmocka/test_kcm_queue.c \\\n    src/responder/kcm/kcmsrv_op_queue.c \\\n    $(NULL)\ntest_kcm_queue_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_kcm_queue_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_test_common.la \\\n    $(NULL)\n\nendif # BUILD_KCM\n\nendif # HAVE_CMOCKA\n\nnoinst_PROGRAMS =\nif BUILD_SUDO\nnoinst_PROGRAMS += sss_sudo_cli\nendif\nif BUILD_AUTOFS\nnoinst_PROGRAMS += autofs_test_client\nendif\nif BUILD_WITH_LIBCURL\nnoinst_PROGRAMS += tcurl-test-tool\nendif\nif BUILD_PAC_RESPONDER\n    noinst_PROGRAMS += sssd_pac_test_client\nendif\n\nif BUILD_AUTOFS\nautofs_test_client_SOURCES = \\\n    src/sss_client/autofs/autofs_test_client.c \\\n    src/sss_client/autofs/sss_autofs.c \\\n    src/sss_client/common.c\nautofs_test_client_CFLAGS = $(AM_CFLAGS)\nautofs_test_client_LDADD = -lpopt $(CLIENT_LIBS)\nendif\n\nif BUILD_WITH_LIBCURL\ntcurl_test_tool_SOURCES = \\\n    src/tests/tcurl_test_tool.c \\\n    src/util/tev_curl.c \\\n    src/util/sss_iobuf.c \\\n    $(NULL)\ntcurl_test_tool_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(CURL_CFLAGS) \\\n    $(NULL)\ntcurl_test_tool_LDADD = \\\n    $(CURL_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\ntest_sssd_krb5_localauth_plugin_SOURCES = \\\n    src/tests/cmocka/test_sssd_krb5_localauth_plugin.c \\\n    src/krb5_plugin/sssd_krb5_localauth_plugin.c \\\n    $(NULL)\ntest_sssd_krb5_localauth_plugin_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\ntest_sssd_krb5_localauth_plugin_LDADD = \\\n    $(CMOCKA_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(NULL)\nendif\n\n#####################\n# Integration tests #\n#####################\n\nintgcheck-prepare:\n\tset -e; \\\n\trm -Rf intg; \\\n\t$(MKDIR_P) intg/bld; \\\n\t: Use /hopefully/ short prefix to keep D-Bus socket path short; \\\n\tprefix=`mktemp --tmpdir --directory sssd-intg.XXXXXXXX`; \\\n\t$(LN_S) \"$$prefix\" intg/pfx; \\\n\tcd intg/bld; \\\n\t$(abs_top_srcdir)/configure \\\n\t    --prefix=\"$$prefix\" \\\n\t    --with-ldb-lib-dir=\"$$prefix\"/lib/ldb \\\n\t    --enable-intgcheck-reqs \\\n\t    --without-semanage \\\n\t    --with-secrets \\\n\t    --with-session-recording-shell=/bin/false \\\n\t    --enable-local-provider \\\n\t    --enable-files-domain \\\n\t    $(INTGCHECK_CONFIGURE_FLAGS) \\\n\t    CFLAGS=\"-O2 -g $$CFLAGS\"; \\\n\t$(MAKE) $(AM_MAKEFLAGS) ; \\\n\t$(MAKE) $(AM_MAKEFLAGS) test_ssh_client; \\\n\t: Force single-thread install to workaround concurrency issues; \\\n\t$(MAKE) $(AM_MAKEFLAGS) -j1 install; \\\n\t: Remove .la files from LDB module directory to avoid loader warnings; \\\n\trm \"$$prefix\"/lib/ldb/*.la; \\\n\tcd ../..\n\nintgcheck-run:\n\tset -e; \\\n\tif [ ! -d intg/pfx ]; then $(MAKE) intgcheck-prepare; fi; \\\n\tcd intg/bld; \\\n\t$(MAKE) $(AM_MAKEFLAGS) -C src/tests/intg intgcheck-installed; \\\n\tcd ../..\n\nintgcheck-clean:\n\tset -e; \\\n\tprefix=`readlink -e intg/pfx`; \\\n\trm -Rf \"$$prefix\" intg\n\nintgcheck:\n\t$(MAKE) intgcheck-prepare\n\t$(MAKE) intgcheck-run\n\t$(MAKE) intgcheck-clean\n\n####################\n# Client Libraries #\n####################\n\nnsslib_LTLIBRARIES = libnss_sss.la\nlibnss_sss_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_passwd.c \\\n    src/sss_client/nss_group.c \\\n    src/sss_client/nss_netgroup.c \\\n    src/sss_client/nss_services.c \\\n    src/sss_client/nss_hosts.c \\\n    src/sss_client/nss_ipnetworks.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/nss_compat.h \\\n    src/sss_client/nss_common.h \\\n    src/sss_client/common_private.h \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/io.c \\\n    src/util/murmurhash3.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nss_mc_initgr.c \\\n    src/sss_client/nss_mc.h\nlibnss_sss_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibnss_sss_la_LDFLAGS = \\\n    -module \\\n    -version-info 2:0:0 \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_nss.exports\n\nif BUILD_NFS_IDMAP\nnfslib_LTLIBRARIES = sss.la\nsss_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/util/io.c \\\n    src/util/murmurhash3.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_mc_group.c \\\n    src/sss_client/nfs/sss_nfs_client.c \\\n    $(NULL)\nsss_la_CFLAGS = $(AM_CFLAGS)\nsss_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(NFSIDMAP_LIBS) \\\n    $(NULL)\nsss_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    $(NULL)\nendif\n\npamlib_LTLIBRARIES = pam_sss.la\npam_sss_la_SOURCES = \\\n    src/sss_client/pam_sss.c \\\n    src/sss_client/pam_sss_prompt_config.c \\\n    src/sss_client/pam_message.c \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/util/atomic_io.c \\\n    src/util/authtok-utils.c \\\n    src/sss_client/sss_pam_macros.h \\\n    src/sss_client/sss_pam_compat.h\n\npam_sss_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(PAM_LIBS)\npam_sss_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_pam.exports\n\nif BUILD_SUDO\n\nlibsss_sudo_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/sudo/sss_sudo_response.c \\\n    src/sss_client/sudo/sss_sudo.c \\\n    src/sss_client/sudo/sss_sudo.h \\\n    src/sss_client/sudo/sss_sudo_private.h\nlibsss_sudo_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibsss_sudo_la_LDFLAGS = \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/sss_sudo.exports \\\n    -module \\\n    -avoid-version\n\nsudolib_LTLIBRARIES = libsss_sudo.la\n\nendif\n\nif BUILD_AUTOFS\nautofslib_LTLIBRARIES = libsss_autofs.la\nlibsss_autofs_la_SOURCES = \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/autofs/sss_autofs.c \\\n    src/sss_client/autofs/sss_autofs_private.h\n\nlibsss_autofs_la_LIBADD = \\\n    $(CLIENT_LIBS)\nlibsss_autofs_la_LDFLAGS = \\\n    -module \\\n    -avoid-version \\\n    -Wl,--version-script,$(srcdir)/src/sss_client/autofs/sss_autofs.exports\nendif\n\ndist_noinst_DATA += \\\n    src/sss_client/sss_nss.exports \\\n    src/sss_client/sss_pam.exports\nif BUILD_SUDO\ndist_noinst_DATA += src/sss_client/sss_sudo.exports\nendif\n\nif BUILD_AUTOFS\ndist_noinst_DATA += src/sss_client/autofs/sss_autofs.exports\nendif\n\n####################\n# Plugin Libraries #\n####################\n\n# libsss_krb5_common must be installed before libsss_ldap_common\n# because libtool tries to relink libsss_ldap_common when installing\n# libsss_ldap_common and therefore make distcheck fails\npkglib_LTLIBRARIES += libsss_krb5_common.la\npkglib_LTLIBRARIES += libsss_ldap_common.la\nlibsss_ldap_common_la_SOURCES = \\\n    src/providers/ldap/ldap_id.c \\\n    src/providers/ldap/ldap_id_enum.c \\\n    src/providers/ldap/ldap_resolver_enum.c \\\n    src/providers/ldap/ldap_resolver_cleanup.c \\\n    src/providers/ldap/sdap_async_enum.c \\\n    src/providers/ldap/sdap_async_resolver_enum.c \\\n    src/providers/ldap/ldap_id_cleanup.c \\\n    src/providers/ldap/ldap_id_netgroup.c \\\n    src/providers/ldap/ldap_id_services.c \\\n    src/providers/ldap/ldap_auth.c \\\n    src/providers/ldap/ldap_common.c \\\n    src/providers/ldap/ldap_options.c \\\n    src/providers/ldap/ldap_opts.c \\\n    src/providers/ldap/sdap_access.c \\\n    src/providers/ldap/sdap_iphost.c \\\n    src/providers/ldap/sdap_ipnetwork.c \\\n    src/providers/ldap/sdap_async.c \\\n    src/providers/ldap/sdap_async_users.c \\\n    src/providers/ldap/sdap_async_groups.c \\\n    src/providers/ldap/sdap_async_nested_groups.c \\\n    src/providers/ldap/sdap_async_groups_ad.c \\\n    src/providers/ldap/sdap_async_initgroups.c \\\n    src/providers/ldap/sdap_async_initgroups_ad.c \\\n    src/providers/ldap/sdap_async_connection.c \\\n    src/providers/ldap/sdap_async_netgroups.c \\\n    src/providers/ldap/sdap_async_hosts.c \\\n    src/providers/ldap/sdap_async_services.c \\\n    src/providers/ldap/sdap_async_iphost.c \\\n    src/providers/ldap/sdap_async_ipnetwork.c \\\n    src/providers/ldap/sdap_online_check.c \\\n    src/providers/ldap/sdap_ad_groups.c \\\n    src/providers/ldap/sdap_child_helpers.c \\\n    src/providers/ldap/sdap_fd_events.c \\\n    src/providers/ldap/sdap_hostid.h \\\n    src/providers/ldap/sdap_id_op.c \\\n    src/providers/ldap/sdap_certmap.c \\\n    src/providers/ldap/sdap_idmap.c \\\n    src/providers/ldap/sdap_idmap.h \\\n    src/providers/ldap/sdap_range.c \\\n    src/providers/ldap/sdap_reinit.c \\\n    src/providers/ldap/sdap_dyndns.c \\\n    src/providers/ldap/sdap_refresh.c \\\n    src/providers/ldap/sdap_utils.c \\\n    src/providers/ldap/sdap_domain.c \\\n    src/providers/ldap/sdap_ops.c \\\n    src/providers/ldap/sdap.c \\\n    src/providers/ipa/ipa_dn.c \\\n    src/util/user_info_msg.c \\\n    src/util/sss_sockets.c \\\n    src/util/sss_ldap.c \\\n    $(NULL)\nlibsss_ldap_common_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(NULL)\nlibsss_ldap_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    libsss_krb5_common.la \\\n    libsss_idmap.la \\\n    libsss_certmap.la \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_ldap_common_la_LDFLAGS = \\\n    -avoid-version \\\n    $(NULL)\nif BUILD_SYSTEMTAP\nlibsss_ldap_common_la_LIBADD += stap_generated_probes.lo\nendif\n\nif BUILD_SSH\nlibsss_ldap_common_la_SOURCES += src/providers/ldap/sdap_hostid.c\nendif\n\nif BUILD_SUDO\nlibsss_ldap_common_la_SOURCES += \\\n    src/providers/ldap/sdap_async_sudo.c \\\n    src/providers/ldap/sdap_async_sudo_hostinfo.c \\\n    src/providers/ldap/sdap_sudo_refresh.c \\\n    src/providers/ldap/sdap_sudo_shared.c \\\n    src/providers/ldap/sdap_sudo.c\nendif\n\nif BUILD_AUTOFS\nlibsss_ldap_common_la_SOURCES += \\\n    src/providers/ldap/sdap_autofs.c \\\n    src/providers/ldap/sdap_async_autofs.c\nendif\n\nlibsss_krb5_common_la_SOURCES = \\\n    src/providers/krb5/krb5_utils.c \\\n    src/providers/krb5/krb5_delayed_online_authentication.c \\\n    src/providers/krb5/krb5_renew_tgt.c \\\n    src/providers/krb5/krb5_wait_queue.c \\\n    src/providers/krb5/krb5_common.c \\\n    src/providers/krb5/krb5_opts.c \\\n    src/providers/krb5/krb5_auth.c \\\n    src/providers/krb5/krb5_access.c \\\n    src/providers/krb5/krb5_child_handler.c \\\n    src/providers/krb5/krb5_init_shared.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/become_user.c \\\n    $(NULL)\nlibsss_krb5_common_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_krb5_common_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(KEYUTILS_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_krb5_common_la_LDFLAGS = \\\n    -avoid-version\n\nlibsss_ldap_la_SOURCES = \\\n    src/providers/ldap/ldap_init.c \\\n    src/providers/ldap/ldap_access.c\nlibsss_ldap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS)\nlibsss_ldap_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la\nlibsss_ldap_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n\nlibsss_proxy_la_SOURCES = \\\n    src/providers/proxy/proxy_init.c \\\n    src/providers/proxy/proxy_client.c \\\n    src/providers/proxy/proxy_id.c \\\n    src/providers/proxy/proxy_netgroup.c \\\n    src/providers/proxy/proxy_services.c \\\n    src/providers/proxy/proxy_hosts.c \\\n    src/providers/proxy/proxy_ipnetworks.c \\\n    src/providers/proxy/proxy_auth.c \\\n    src//util/nss_dl_load.c \\\n    $(NULL)\nlibsss_proxy_la_CFLAGS = \\\n    $(AM_CFLAGS)\nlibsss_proxy_la_LIBADD = \\\n    $(LIBADD_DL) \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(PAM_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\nlibsss_proxy_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_files_la_SOURCES = \\\n    src/providers/files/files_init.c \\\n    src/providers/files/files_id.c \\\n    src/providers/files/files_auth.c \\\n    src/providers/files/files_certmap.c \\\n    src/providers/files/files_ops.c \\\n    src/util/inotify.c \\\n    $(NULL)\nlibsss_files_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nlibsss_files_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(PAM_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_files_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nlibsss_simple_la_SOURCES = \\\n    src/providers/simple/simple_access_check.c \\\n    src/providers/simple/simple_access.c\nlibsss_simple_la_CFLAGS = \\\n    $(AM_CFLAGS)\nlibsss_simple_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(TEVENT_LIBS) \\\n    $(LDB_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(NULL)\nlibsss_simple_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_krb5_la_SOURCES = \\\n    src/providers/krb5/krb5_init.c\nlibsss_krb5_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_krb5_la_LIBADD = \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(PCRE_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_krb5_common.la\nlibsss_krb5_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nlibsss_ipa_la_SOURCES = \\\n    src/providers/ipa/ipa_init.c \\\n    src/providers/ipa/ipa_opts.c \\\n    src/providers/ipa/ipa_common.c \\\n    src/providers/ipa/ipa_config.c \\\n    src/providers/ipa/ipa_id.c \\\n    src/providers/ipa/ipa_netgroups.c \\\n    src/providers/ipa/ipa_auth.c \\\n    src/providers/ipa/ipa_access.c \\\n    src/providers/ipa/ipa_dyndns.c \\\n    src/providers/ipa/ipa_hosts.c \\\n    src/providers/ipa/ipa_subdomains.c \\\n    src/providers/ipa/ipa_subdomains_id.c \\\n    src/providers/ipa/ipa_subdomains_server.c \\\n    src/providers/ipa/ipa_subdomains_utils.c \\\n    src/providers/ipa/ipa_subdomains_ext_groups.c \\\n    src/providers/ipa/ipa_views.c \\\n    src/providers/ipa/ipa_utils.c \\\n    src/providers/ipa/ipa_s2n_exop.c \\\n    src/providers/ipa/ipa_hbac_hosts.c \\\n    src/providers/ipa/ipa_hbac_private.h \\\n    src/providers/ipa/ipa_hbac_rules.c \\\n    src/providers/ipa/ipa_hbac_rules.h \\\n    src/providers/ipa/ipa_hbac_services.c \\\n    src/providers/ipa/ipa_hbac_users.c \\\n    src/providers/ipa/ipa_hbac_common.c \\\n    src/providers/ipa/ipa_rules_common.c \\\n    src/providers/ipa/ipa_rules_common.h \\\n    src/providers/ipa/ipa_session.c \\\n    src/providers/ipa/ipa_deskprofile_private.h \\\n    src/providers/ipa/ipa_deskprofile_config.c \\\n    src/providers/ipa/ipa_deskprofile_config.h \\\n    src/providers/ipa/ipa_deskprofile_rules.c \\\n    src/providers/ipa/ipa_deskprofile_rules.h \\\n    src/providers/ipa/ipa_deskprofile_rules_util.c \\\n    src/providers/ipa/ipa_deskprofile_rules_util.h \\\n    src/providers/ipa/ipa_srv.c \\\n    src/providers/ipa/ipa_idmap.c \\\n    src/providers/ipa/ipa_dn.c \\\n    src/providers/ipa/ipa_refresh.c \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_common.c \\\n    src/providers/ad/ad_dyndns.c \\\n    src/providers/ad/ad_id.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_srv.c \\\n    src/providers/ad/ad_domain_info.c\nlibsss_ipa_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(KRB5_CFLAGS)\nlibsss_ipa_la_LIBADD = \\\n    $(LDB_LIBS) \\\n    $(DBUS_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la \\\n    libipa_hbac.la \\\n    libsss_idmap.la \\\n    libsss_semanage.la \\\n    $(NULL)\nlibsss_ipa_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nif BUILD_AUTOFS\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_autofs.c\nendif\n\nif BUILD_SUDO\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_sudo.c \\\n    src/providers/ipa/ipa_sudo_refresh.c \\\n    src/providers/ipa/ipa_sudo_conversion.c \\\n    src/providers/ipa/ipa_sudo_async.c\nendif\n\nif BUILD_SEMANAGE\nlibsss_ipa_la_SOURCES += \\\n    src/providers/ipa/ipa_selinux.c \\\n    src/providers/ipa/ipa_selinux_maps.c\nendif\n\nif BUILD_SSH\nlibsss_ipa_la_SOURCES += src/providers/ipa/ipa_hostid.c\nendif\n\n\nlibsss_ad_la_SOURCES = \\\n    src/providers/ad/ad_opts.c \\\n    src/providers/ad/ad_common.c \\\n    src/providers/ad/ad_init.c \\\n    src/providers/ad/ad_dyndns.c \\\n    src/providers/ad/ad_machine_pw_renewal.c \\\n    src/providers/ad/ad_id.c \\\n    src/providers/ad/ad_pac.c \\\n    src/providers/ad/ad_pac_common.c \\\n    src/providers/ad/ad_access.c \\\n    src/providers/ad/ad_gpo.c \\\n    src/providers/ad/ad_gpo_ndr.c \\\n    src/providers/ad/ad_srv.c \\\n    src/providers/ad/ad_subdomains.c \\\n    src/providers/ad/ad_domain_info.c \\\n    src/providers/ad/ad_refresh.c \\\n    src/providers/ad/ad_resolver.c \\\n    $(NULL)\n\n\nif BUILD_SUDO\nlibsss_ad_la_SOURCES += \\\n    src/providers/ad/ad_sudo.c\nendif\n\nif BUILD_AUTOFS\nlibsss_ad_la_SOURCES += \\\n    src/providers/ad/ad_autofs.c\nendif\n\nlibsss_ad_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(OPENLDAP_CFLAGS) \\\n    $(SASL_CFLAGS) \\\n    $(DHASH_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(NDR_NBT_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nlibsss_ad_la_LIBADD = \\\n    $(LDB_LIBS) \\\n    $(OPENLDAP_LIBS) \\\n    $(SASL_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(NDR_NBT_LIBS) \\\n    $(NDR_KRB5PAC_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_ldap_common.la \\\n    libsss_krb5_common.la \\\n    libsss_idmap.la \\\n    $(NULL)\nlibsss_ad_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nkrb5_child_SOURCES = \\\n    src/providers/krb5/krb5_child.c \\\n    src/providers/krb5/krb5_ccache.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_pam_data.c \\\n    src/util/user_info_msg.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/find_uid.c \\\n    src/util/atomic_io.c \\\n    src/util/memory.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c \\\n    src/util/strtonum.c \\\n    src/util/become_user.c \\\n    src/util/util_errors.c \\\n    src/sss_client/common.c \\\n    $(NULL)\nkrb5_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(SYSTEMD_LOGIN_CFLAGS) \\\n    $(NULL)\nkrb5_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS) \\\n    $(CLIENT_LIBS) \\\n    $(SYSTEMD_LOGIN_LIBS) \\\n    $(NULL)\n\nldap_child_SOURCES = \\\n    src/providers/ldap/ldap_child.c \\\n    src/providers/krb5/krb5_keytab.c \\\n    src/util/sss_krb5.c \\\n    src/util/sss_iobuf.c \\\n    src/util/atomic_io.c \\\n    src/util/memory.c \\\n    src/util/authtok.c \\\n    src/util/authtok-utils.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c \\\n    src/util/become_user.c \\\n    src/util/util_errors.c \\\n    $(NULL)\nldap_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS)\nldap_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(KRB5_LIBS)\n\nif BUILD_SEMANAGE\nselinux_child_SOURCES = \\\n    src/providers/ipa/selinux_child.c \\\n    src/util/sss_semanage.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/util_errors.c\n    $(NULL)\nselinux_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\nselinux_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(SEMANAGE_LIBS) \\\n    $(SELINUX_LIBS) \\\n    $(NULL)\nendif\n\ngpo_child_SOURCES = \\\n    src/providers/ad/ad_gpo_child.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    src/util/signal.c\ngpo_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(KRB5_CFLAGS) \\\n    $(INI_CONFIG_CFLAGS) \\\n    $(SMBCLIENT_CFLAGS)\ngpo_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(POPT_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(INI_CONFIG_LIBS) \\\n    $(SMBCLIENT_LIBS)\n\nproxy_child_SOURCES = \\\n    src/providers/proxy/proxy_child.c \\\n    $(NULL)\nproxy_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS)\nproxy_child_LDADD = \\\n    $(PAM_LIBS) \\\n    $(SSSD_LIBS) \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    libsss_iface.la \\\n    libsss_sbus.la \\\n    $(NULL)\n\np11_child_SOURCES = \\\n    src/p11_child/p11_child_common.c \\\n    src/p11_child/p11_child_common_utils.c \\\n    src/util/atomic_io.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\nif HAVE_NSS\np11_child_SOURCES += src/p11_child/p11_child_nss.c\nelse\np11_child_SOURCES += src/p11_child/p11_child_openssl.c\nendif\n\np11_child_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(POPT_CFLAGS) \\\n    $(NULL)\nif HAVE_NSS\np11_child_CFLAGS += \\\n    $(NSS_CFLAGS) \\\n    $(NULL)\nelse\np11_child_CFLAGS += \\\n    $(P11_KIT_CFLAGS) \\\n    $(CRYPTO_CFLAGS) \\\n    $(SSL_CFLAGS) \\\n    $(NULL)\nendif\n\np11_child_LDADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(POPT_LIBS) \\\n    libsss_crypt.la \\\n    $(NULL)\nif HAVE_NSS\np11_child_LDADD += \\\n    $(NSS_LIBS) \\\n    $(NULL)\nelse\np11_child_LDADD += \\\n    $(P11_KIT_LIBS) \\\n    $(CRYPTO_LIBS) \\\n    $(SSL_LIBS) \\\n    $(NULL)\nendif\n\nmemberof_la_SOURCES = \\\n    src/ldb_modules/memberof.c \\\n    src/util/util.c \\\n    src/util/util_ext.c \\\n    $(NULL)\nmemberof_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nmemberof_la_LIBADD = \\\n    libsss_debug.la \\\n    $(TALLOC_LIBS) \\\n    $(LDB_LIBS) \\\n    $(DHASH_LIBS) \\\n    $(NULL)\nmemberof_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nif BUILD_KRB5_LOCATOR_PLUGIN\nsssd_krb5_locator_plugin_la_SOURCES = \\\n    src/krb5_plugin/sssd_krb5_locator_plugin.c \\\n    src/util/atomic_io.c\nsssd_krb5_locator_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_krb5_locator_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nif BUILD_KRB5_LOCALAUTH_PLUGIN\nsssd_krb5_localauth_plugin_la_SOURCES = \\\n    src/krb5_plugin/sssd_krb5_localauth_plugin.c \\\n    src/util/murmurhash3.c \\\n    src/util/io.c \\\n    src/sss_client/common.c \\\n    src/sss_client/nss_mc_common.c \\\n    src/sss_client/nss_mc_passwd.c \\\n    src/sss_client/nss_passwd.c\nsssd_krb5_localauth_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_krb5_localauth_plugin_la_LIBADD = \\\n    $(KRB5_LIBS)\nsssd_krb5_localauth_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nsssd_pac_plugin_la_SOURCES = \\\n    src/sss_client/sssd_pac.c \\\n    src/sss_client/common.c \\\n    src/sss_client/sss_cli.h \\\n    src/sss_client/krb5_authdata_int.h\nsssd_pac_plugin_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(KRB5_CFLAGS)\nsssd_pac_plugin_la_LIBADD = \\\n    $(CLIENT_LIBS) \\\n    $(KRB5_LIBS)\nsssd_pac_plugin_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\nsssd_pac_test_client_SOURCES = \\\n    src/sss_client/sss_pac_responder_client.c \\\n    src/sss_client/common.c \\\n    src/util/strtonum.c \\\n    $(NULL)\nsssd_pac_test_client_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NULL)\nsssd_pac_test_client_LDADD = \\\n    $(CLIENT_LIBS) \\\n    -lpthread \\\n    $(NULL)\n\n# python[23] bindings\npysss_la_SOURCES = \\\n    $(SSSD_TOOLS_OBJ) \\\n    src/python/pysss.c\npysss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_la_SOURCES = $(pysss_la_SOURCES)\n_py2sss_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_la_LIBADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PYTHON_BINDINGS_LIBS) \\\n    $(PYTHON2_LIBS)\n_py2sss_la_LDFLAGS = $(pysss_la_LDFLAGS)\n\n_py3sss_la_SOURCES = $(pysss_la_SOURCES)\n_py3sss_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_la_LIBADD = \\\n    $(SSSD_INTERNAL_LTLIBS) \\\n    $(PYTHON_BINDINGS_LIBS) \\\n    $(PYTHON3_LIBS)\n_py3sss_la_LDFLAGS = $(pysss_la_LDFLAGS)\n\n\npyhbac_la_SOURCES = \\\n    src/python/pyhbac.c \\\n    src/util/sss_python.c\npyhbac_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2hbac_la_SOURCES = $(pyhbac_la_SOURCES)\n_py2hbac_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2hbac_la_LIBADD = \\\n    $(PYTHON2_LIBS) \\\n    libipa_hbac.la\n_py2hbac_la_LDFLAGS = $(pyhbac_la_LDFLAGS)\n\n_py3hbac_la_SOURCES = $(pyhbac_la_SOURCES)\n_py3hbac_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3hbac_la_LIBADD = \\\n    $(PYTHON3_LIBS) \\\n    libipa_hbac.la\n_py3hbac_la_LDFLAGS = $(pyhbac_la_LDFLAGS)\n\n\npysss_murmur_la_SOURCES = \\\n    src/python/pysss_murmur.c \\\n    src/util/murmurhash3.c\npysss_murmur_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_murmur_la_SOURCES = $(pysss_murmur_la_SOURCES)\n_py2sss_murmur_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_murmur_la_LIBADD = \\\n    $(PYTHON2_LIBS)\n_py2sss_murmur_la_LDFLAGS = $(pysss_murmur_la_LDFLAGS)\n\n_py3sss_murmur_la_SOURCES = $(pysss_murmur_la_SOURCES)\n_py3sss_murmur_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_murmur_la_LIBADD = \\\n    $(PYTHON3_LIBS)\n_py3sss_murmur_la_LDFLAGS = $(pysss_murmur_la_LDFLAGS)\n\n\npysss_nss_idmap_la_SOURCES = \\\n    src/python/pysss_nss_idmap.c\npysss_nss_idmap_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\n\n_py2sss_nss_idmap_la_SOURCES = $(pysss_nss_idmap_la_SOURCES)\n_py2sss_nss_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON2_CFLAGS)\n_py2sss_nss_idmap_la_LIBADD = \\\n    $(PYTHON2_LIBS) \\\n    libsss_nss_idmap.la\n_py2sss_nss_idmap_la_LDFLAGS = $(pysss_nss_idmap_la_LDFLAGS)\n\n_py3sss_nss_idmap_la_SOURCES = $(pysss_nss_idmap_la_SOURCES)\n_py3sss_nss_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS)  \\\n    $(PYTHON3_CFLAGS)\n_py3sss_nss_idmap_la_LIBADD = \\\n    $(PYTHON3_LIBS) \\\n    libsss_nss_idmap.la\n_py3sss_nss_idmap_la_LDFLAGS = $(pysss_nss_idmap_la_LDFLAGS)\n# end of python[23] bindings\n\nif BUILD_CIFS_IDMAP_PLUGIN\ncifs_idmap_sss_la_SOURCES = \\\n    src/lib/cifs_idmap_sss/cifs_idmap_sss.c\ncifs_idmap_sss_la_LIBADD = \\\n    libsss_idmap.la \\\n    libsss_nss_idmap.la\ncifs_idmap_sss_la_CFLAGS = \\\n    $(AM_CFLAGS)\ncifs_idmap_sss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module\nendif\n\nif BUILD_SAMBA\nwinbind_idmap_sss_la_SOURCES = \\\n    src/lib/winbind_idmap_sss/winbind_idmap_sss.c \\\n    src/util/util_sss_idmap.c \\\n    $(NULL)\nwinbind_idmap_sss_la_LIBADD = \\\n    libsss_idmap.la \\\n    libsss_nss_idmap.la \\\n    $(TALLOC_LIBS) \\\n    $(NULL)\nwinbind_idmap_sss_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nwinbind_idmap_sss_la_LDFLAGS = \\\n    -avoid-version \\\n    -module \\\n    $(NULL)\n\nlibdlopen_test_winbind_idmap_la_SOURCES = \\\n    src/lib/winbind_idmap_sss/libdlopen-test-winbind-idmap.c \\\n    $(NULL)\nlibdlopen_test_winbind_idmap_la_CFLAGS = \\\n    $(AM_CFLAGS) \\\n    $(NDR_KRB5PAC_CFLAGS) \\\n    $(NULL)\nlibdlopen_test_winbind_idmap_la_LDFLAGS = \\\n    -shared \\\n    -avoid-version \\\n    -rpath $(abs_top_builddir) \\\n    -export-dynamic\n    $(NULL)\nendif\n\n################\n# TRANSLATIONS #\n################\nupdate-po:\nif HAVE_MANPAGES\n\t$(MAKE) -C src/man update-po\nendif\n\t$(MAKE) -C po update-po\n\n#######################\n# Installation Extras #\n#######################\n\ninit_SCRIPTS =\nsystemdunit_DATA =\nsystemdconf_DATA =\nif HAVE_SYSTEMD_UNIT\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd.service \\\n        src/sysv/systemd/sssd-nss.socket \\\n        src/sysv/systemd/sssd-nss.service \\\n        src/sysv/systemd/sssd-pam.socket \\\n        src/sysv/systemd/sssd-pam-priv.socket \\\n        src/sysv/systemd/sssd-pam.service \\\n        $(NULL)\nif BUILD_AUTOFS\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-autofs.socket \\\n        src/sysv/systemd/sssd-autofs.service \\\n        $(NULL)\nendif\nif BUILD_IFP\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-ifp.service \\\n        $(NULL)\nendif\nif BUILD_PAC_RESPONDER\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-pac.socket \\\n        src/sysv/systemd/sssd-pac.service \\\n        $(NULL)\nendif\nif BUILD_SECRETS\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-secrets.socket \\\n        src/sysv/systemd/sssd-secrets.service \\\n        $(NULL)\nendif\nif BUILD_SSH\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-ssh.socket \\\n        src/sysv/systemd/sssd-ssh.service \\\n        $(NULL)\nendif\nif BUILD_SUDO\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-sudo.socket \\\n        src/sysv/systemd/sssd-sudo.service \\\n        $(NULL)\nendif\nif BUILD_KCM\n    systemdunit_DATA += \\\n        src/sysv/systemd/sssd-kcm.socket \\\n        src/sysv/systemd/sssd-kcm.service \\\n        $(NULL)\nendif\nelse\nif HAVE_SUSE\n    init_SCRIPTS += \\\n        src/sysv/SUSE/sssd\nelse\nif HAVE_GENTOO\n    init_SCRIPTS += \\\n        src/sysv/gentoo/sssd\nelse\n    init_SCRIPTS += \\\n        src/sysv/sssd\nendif\nendif\nendif\n\n\ndist_sssddata_DATA = \\\n    src/config/etc/sssd.api.conf \\\n    src/config/cfg_rules.ini \\\n    $(NULL)\ndist_sssdapiplugin_DATA = \\\n    src/config/etc/sssd.api.d/sssd-ipa.conf \\\n    src/config/etc/sssd.api.d/sssd-ad.conf \\\n    src/config/etc/sssd.api.d/sssd-krb5.conf \\\n    src/config/etc/sssd.api.d/sssd-ldap.conf \\\n    src/config/etc/sssd.api.d/sssd-local.conf \\\n    src/config/etc/sssd.api.d/sssd-proxy.conf \\\n    src/config/etc/sssd.api.d/sssd-simple.conf \\\n    src/config/etc/sssd.api.d/sssd-files.conf\n\nedit_cmd = $(SED) \\\n        -e 's|@sbindir[@]|$(sbindir)|g' \\\n        -e 's|@environment_file[@]|$(environment_file)|g' \\\n        -e 's|@localstatedir[@]|$(localstatedir)|g' \\\n        -e 's|@runstatedir[@]|$(runstatedir)|g' \\\n        -e 's|@pidpath[@]|$(pidpath)|g' \\\n        -e 's|@logpath[@]|$(logpath)|g' \\\n        -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n        -e 's|@pipepath[@]|$(pipepath)|g' \\\n        -e 's|@prefix[@]|$(prefix)|g' \\\n        -e 's|@SSSD_USER[@]|$(SSSD_USER)|g'\n\nreplace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nEXTRA_DIST += \\\n    src/sysv/systemd/sssd.service.in \\\n    src/sysv/systemd/sssd-nss.socket.in \\\n    src/sysv/systemd/sssd-nss.service.in \\\n    src/sysv/systemd/sssd-pam.socket.in \\\n    src/sysv/systemd/sssd-pam-priv.socket.in \\\n    src/sysv/systemd/sssd-pam.service.in \\\n    src/sysv/systemd/sssd-secrets.socket.in \\\n    src/sysv/systemd/sssd-secrets.service.in \\\n    src/sysv/systemd/sssd-autofs.socket.in \\\n    src/sysv/systemd/sssd-autofs.service.in \\\n    src/sysv/systemd/sssd-ifp.service.in \\\n    src/sysv/systemd/sssd-pac.socket.in \\\n    src/sysv/systemd/sssd-pac.service.in \\\n    src/sysv/systemd/sssd-ssh.socket.in \\\n    src/sysv/systemd/sssd-ssh.service.in \\\n    src/sysv/systemd/sssd-sudo.socket.in \\\n    src/sysv/systemd/sssd-sudo.service.in \\\n    src/sysv/systemd/sssd-kcm.socket.in \\\n    src/sysv/systemd/sssd-kcm.service.in \\\n    $(NULL)\n\nsrc/sysv/systemd/sssd.service: src/sysv/systemd/sssd.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-nss.socket: src/sysv/systemd/sssd-nss.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-nss.service: src/sysv/systemd/sssd-nss.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam.socket: src/sysv/systemd/sssd-pam.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam-priv.socket: src/sysv/systemd/sssd-pam-priv.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pam.service: src/sysv/systemd/sssd-pam.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nif BUILD_SECRETS\nsrc/sysv/systemd/sssd-secrets.socket: src/sysv/systemd/sssd-secrets.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-secrets.service: src/sysv/systemd/sssd-secrets.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_AUTOFS\nsrc/sysv/systemd/sssd-autofs.socket: src/sysv/systemd/sssd-autofs.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-autofs.service: src/sysv/systemd/sssd-autofs.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_IFP\nsrc/sysv/systemd/sssd-ifp.service: src/sysv/systemd/sssd-ifp.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(ifp_replace_script)\nendif\n\nif BUILD_PAC_RESPONDER\nsrc/sysv/systemd/sssd-pac.socket: src/sysv/systemd/sssd-pac.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-pac.service: src/sysv/systemd/sssd-pac.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_SSH\nsrc/sysv/systemd/sssd-ssh.socket: src/sysv/systemd/sssd-ssh.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-ssh.service: src/sysv/systemd/sssd-ssh.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_SUDO\nsrc/sysv/systemd/sssd-sudo.socket: src/sysv/systemd/sssd-sudo.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\n\nsrc/sysv/systemd/sssd-sudo.service: src/sysv/systemd/sssd-sudo.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nif BUILD_KCM\nif BUILD_SECRETS\nkcm_socket_requires = Requires=sssd-secrets.socket\nelse\nkcm_socket_requires =\nendif\n\nkcm_edit_cmd = $(edit_cmd) \\\n        -e 's|@kcm_socket_requires[@]|$(kcm_socket_requires)|g'\n\nkcm_replace_script = \\\n    @rm -f $@ $@.tmp; \\\n    srcdir=''; \\\n        test -f ./$@.in || srcdir=$(srcdir)/; \\\n        $(kcm_edit_cmd) $${srcdir}$@.in >$@.tmp; \\\n    mv $@.tmp $@\n\nsrc/sysv/systemd/sssd-kcm.socket: src/sysv/systemd/sssd-kcm.socket.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(kcm_replace_script)\n\nsrc/sysv/systemd/sssd-kcm.service: src/sysv/systemd/sssd-kcm.service.in Makefile\n\t@$(MKDIR_P) src/sysv/systemd/\n\t$(replace_script)\nendif\n\nEXTRA_DIST += \\\n    src/tools/wrappers/sss_debuglevel.in \\\n    $(NULL)\n\nsrc/tools/wrappers/sss_debuglevel: src/tools/wrappers/sss_debuglevel.in Makefile\n\t@$(MKDIR_P) src/tools/wrappers/\n\t$(replace_script)\n\nSSSD_USER_DIRS = \\\n    $(DESTDIR)$(dbpath) \\\n    $(DESTDIR)$(keytabdir) \\\n    $(DESTDIR)$(mcpath) \\\n    $(DESTDIR)$(pipepath) \\\n    $(DESTDIR)$(pubconfpath) \\\n    $(DESTDIR)$(pubconfpath)/krb5.include.d \\\n    $(DESTDIR)$(gpocachepath) \\\n    $(DESTDIR)$(sssdconfdir) \\\n    $(DESTDIR)$(sssdconfdir)/conf.d \\\n    $(DESTDIR)$(sssdconfdir)/pki \\\n    $(DESTDIR)$(sssddefaultconfdir) \\\n    $(DESTDIR)$(logpath) \\\n    $(DESTDIR)$(deskprofilepath) \\\n    $(NULL)\n\ninstallsssddirs::\n\t$(MKDIR_P) \\\n    $(DESTDIR)$(includedir) \\\n    $(DESTDIR)$(libdir) \\\n    $(DESTDIR)$(bindir) \\\n    $(DESTDIR)$(sbindir) \\\n    $(DESTDIR)$(mandir) \\\n    $(DESTDIR)$(pidpath) \\\n    $(DESTDIR)$(pluginpath) \\\n    $(DESTDIR)$(libdir)/ldb \\\n    $(DESTDIR)$(dbuspolicydir) \\\n    $(DESTDIR)$(dbusservicedir) \\\n    $(DESTDIR)$(sssdlibdir) \\\n    $(DESTDIR)$(pkglibdir) \\\n    $(DESTDIR)$(sssddatadir) \\\n    $(DESTDIR)$(sudolibdir) \\\n    $(DESTDIR)$(autofslibdir) \\\n    $(DESTDIR)$(pipepath)/private \\\n    $(SSSD_USER_DIRS) \\\n    $(NULL);\nif SSSD_USER\n\t-chown $(SSSD_USER):$(SSSD_USER) $(SSSD_USER_DIRS)\n\t-chown $(SSSD_USER) $(DESTDIR)$(pipepath)/private\nendif\n\t$(INSTALL) -d -m 0700 $(DESTDIR)$(dbpath) $(DESTDIR)$(logpath) \\\n\t    $(DESTDIR)$(keytabdir) \\\n\t    $(NULL)\n\t$(INSTALL) -d -m 0750 $(DESTDIR)$(pipepath)/private\n\t$(INSTALL) -d -m 0755 $(DESTDIR)$(mcpath) $(DESTDIR)$(pipepath) \\\n            $(DESTDIR)$(pubconfpath) \\\n            $(DESTDIR)$(pubconfpath)/krb5.include.d $(DESTDIR)$(gpocachepath)\n\t$(INSTALL) -d -m 0711 $(DESTDIR)$(sssdconfdir) \\\n                          $(DESTDIR)$(sssdconfdir)/conf.d \\\n                          $(DESTDIR)$(sssdconfdir)/pki\nif BUILD_WITH_LIBSECRET\n\t$(MKDIR_P) $(DESTDIR)$(secdbpath)\nendif\n\nif HAVE_DOXYGEN\ndocs:\n\t$(DOXYGEN) src/doxy.config\n\t$(DOXYGEN) src/lib/ipa_hbac/ipa_hbac.doxy\n\t$(DOXYGEN) src/lib/idmap/sss_idmap.doxy\n\t$(DOXYGEN) src/sss_client/idmap/sss_nss_idmap.doxy\n\t$(DOXYGEN) src/lib/certmap/sss_certmap.doxy\nif BUILD_IFP\n\t$(DOXYGEN) src/lib/sifp/sss_simpleifp.doxy\nendif\nelse !HAVE_DOXYGEN\ndocs:\n\t@echo \"Doxygen not installed, cannot generate documentation\"\n\t@exit 1\nendif !HAVE_DOXYGEN\n\nif BUILD_PYTHON_BINDINGS\n$(abs_builddir)/src/config/SSSDConfig/ipachangeconf.py:\n\t-cp $(srcdir)/src/config/SSSDConfig/ipachangeconf.py $(builddir)/src/config/SSSDConfig/\n\n$(abs_builddir)/src/config/SSSDConfig/sssdoptions.py:\n\t-cp $(srcdir)/src/config/SSSDConfig/sssdoptions.py $(builddir)/src/config/SSSDConfig/\n\nSSSDCONFIG_MODULES = \\\n    $(abs_builddir)/src/config/SSSDConfig/ipachangeconf.py \\\n    $(abs_builddir)/src/config/SSSDConfig/sssdoptions.py\nelse\nSSSSCONFIG_MODULES =\nendif\n\nall-local: ldb_mod_test_dir $(SSSDCONFIG_MODULES)\nif BUILD_PYTHON2_BINDINGS\n\tcd $(builddir)/src/config; \\\n\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config\nendif\nif BUILD_PYTHON3_BINDINGS\n\tcd $(builddir)/src/config; \\\n\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config\nendif\n\ninstall-exec-hook: installsssddirs\nif BUILD_PYTHON2_BINDINGS\n\tif [ \"$(DESTDIR)\" = \"\" ]; then \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON2_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files2; \\\n\telse \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON2_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files2 --root=$(DESTDIR); \\\n\tfi\n\tcd $(DESTDIR)$(py2execdir) && \\\n\t\tmv -f _py2sss.so pysss.so ; \\\n\t\tmv -f _py2hbac.so pyhbac.so ; \\\n\t\tmv -f _py2sss_murmur.so pysss_murmur.so ; \\\n\t\tmv -f _py2sss_nss_idmap.so pysss_nss_idmap.so\nendif\nif BUILD_PYTHON3_BINDINGS\n\tif [ \"$(DESTDIR)\" = \"\" ]; then \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON3_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files3; \\\n\telse \\\n\t\tcd $(builddir)/src/config; \\\n\t\t$(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config \\\n\t\t\tinstall $(DISTSETUPOPTS) --prefix=$(PYTHON3_PREFIX) \\\n\t\t\t--record=$(abs_builddir)/src/config/.files3 --root=$(DESTDIR); \\\n\tfi\n\tcd $(DESTDIR)$(py3execdir) && \\\n\t\tmv -f _py3sss.so pysss.so ; \\\n\t\tmv -f _py3hbac.so pyhbac.so ; \\\n\t\tmv -f _py3sss_murmur.so pysss_murmur.so ; \\\n\t\tmv -f _py3sss_nss_idmap.so pysss_nss_idmap.so\nendif\n\tfor doc in $(SSSD_DOCS); do \\\n\t\t$(MKDIR_P) $$doc $(DESTDIR)/$(docdir); \\\n\t\tcp -a $$doc $(DESTDIR)/$(docdir)/; \\\n\tdone;\n\nif HAVE_SYSTEMD_UNIT\n\t$(MKDIR_P) $(DESTDIR)$(systemdunitdir)\n\t$(MKDIR_P) $(DESTDIR)$(systemdconfdir)\nelse\n\t$(MKDIR_P) $(DESTDIR)$(initdir)\nendif\n\nif SSSD_USER\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/ldap_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/ldap_child\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/krb5_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/krb5_child\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/proxy_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/proxy_child\nif BUILD_SEMANAGE\n\t-chgrp $(SSSD_USER) $(DESTDIR)$(sssdlibexecdir)/selinux_child\n\tchmod 4750 $(DESTDIR)$(sssdlibexecdir)/selinux_child\nendif\nendif\n\ninstall-data-hook:\n\trm $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2 \\\n       $(DESTDIR)/$(nsslibdir)/libnss_sss.so\n\tmv $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2.0.0 $(DESTDIR)/$(nsslibdir)/libnss_sss.so.2\n\tif [ ! $(krb5rcachedir) = \"__LIBKRB5_DEFAULTS__\" ]; then \\\n        $(MKDIR_P) $(DESTDIR)/$(krb5rcachedir) ; \\\n\tfi\nif BUILD_SAMBA\n\tmv $(DESTDIR)/$(winbindplugindir)/winbind_idmap_sss.so $(DESTDIR)/$(winbindplugindir)/sss.so\nendif\nif BUILD_KCM\n\t$(MKDIR_P) $(DESTDIR)/$(sssdkcmdatadir)\nendif\n\nuninstall-hook:\n\tif [ -f $(abs_builddir)/src/config/.files2 ]; then \\\n\t    cat $(abs_builddir)/src/config/.files2 | xargs -iq rm -f $(DESTDIR)/q; \\\n\t    rm $(abs_builddir)/src/config/.files2 ; \\\n\tfi\n\tif [ -f $(abs_builddir)/src/config/.files3 ]; then \\\n\t    cat $(abs_builddir)/src/config/.files3 | xargs -iq rm -f $(DESTDIR)/q; \\\n\t    rm $(abs_builddir)/src/config/.files3 ; \\\n\tfi\n\tfor doc in $(SSSD_DOCS); do \\\n\t\trm -Rf $(DESTDIR)/$(docdir)/$$doc; \\\n\tdone;\nif BUILD_PYTHON2_BINDINGS\n\tcd $(DESTDIR)$(py2execdir) && \\\n\t\trm -f pysss.so pyhbac.so pysss_murmur.so pysss_nss_idmap.so\nendif\nif BUILD_PYTHON3_BINDINGS\n\tcd $(DESTDIR)$(py3execdir) && \\\n\t\trm -f pysss.so pyhbac.so pysss_murmur.so pysss_nss_idmap.so\nendif\nif BUILD_SAMBA\n\trm $(DESTDIR)/$(winbindplugindir)/sss.so\nendif\n\nclean-local:\nif BUILD_PYTHON2_BINDINGS\n\tif [ ! $(srcdir)/src/config/SSSDConfig/ipachangeconf.py -ef $(builddir)/src/config/SSSDConfig/ipachangeconf.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/ipachangeconf.py ; \\\n\tfi\n\n\tif [ ! $(srcdir)/src/config/SSSDConfig/sssdoptions.py -ef $(builddir)/src/config/SSSDConfig/sssdoptions.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/sssdoptions.py ; \\\n\tfi\n\n\trm -f $(builddir)/src/config/SSSDConfig/*.pyc\n\n\tcd $(builddir)/src/config; $(PYTHON2) setup.py build --build-base $(abs_builddir)/src/config clean --all\nendif\nif BUILD_PYTHON3_BINDINGS\n\tif [ ! $(srcdir)/src/config/SSSDConfig/ipachangeconf.py -ef $(builddir)/src/config/SSSDConfig/ipachangeconf.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/ipachangeconf.py ; \\\n\tfi\n\n\tif [ ! $(srcdir)/src/config/SSSDConfig/sssdoptions.py -ef $(builddir)/src/config/SSSDConfig/sssdoptions.py ]; then \\\n\t\trm -f $(builddir)/src/config/SSSDConfig/sssdoptions.py ; \\\n\tfi\n\n\trm -f $(builddir)/src/config/SSSDConfig/__pycache__/*.pyc\n\n\tcd $(builddir)/src/config; $(PYTHON3) setup.py build --build-base $(abs_builddir)/src/config clean --all\nendif\n\tfor doc in $(SSSD_DOCS); do \\\n\t\trm -Rf $$doc; \\\n\tdone;\n\trm -Rf ldb_mod_test_dir\n\trm -f $(builddir)/src/responder/ifp/org.freedesktop.sssd.infopipe.service\n\trm -f $(builddir)/src/sysv/systemd/sssd.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-autofs.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-autofs.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-ifp.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-nss.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-nss.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-pac.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pac.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam-priv.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-pam.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-ssh.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-ssh.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-sudo.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-sudo.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-secrets.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-secrets.service\n\trm -f $(builddir)/src/sysv/systemd/sssd-kcm.socket\n\trm -f $(builddir)/src/sysv/systemd/sssd-kcm.service\n\trm -f $(builddir)/src/tools/wrappers/sss_debuglevel\n\nCLEANFILES += *.X */*.X */*/*.X\n\ntest_CA: test_CA.stamp\n\ntest_CA.stamp: $(srcdir)/src/tests/test_CA/* $(srcdir)/src/tests/test_ECC_CA/*\n\t$(MAKE) -C src/tests/test_CA ca_all\n\t$(MAKE) -C src/tests/test_ECC_CA ca_all\n\ttouch $@\n\nif BUILD_TEST_CA\nBUILT_SOURCES += test_CA\nendif\nCLEANFILES += test_CA.stamp\n\ntests: all $(check_PROGRAMS)\n\t(cd src/tests/cwrap && $(MAKE) $(AM_MAKEFLAGS) $@) || exit 1;\n\n\n# RPM-related tasks\n\nRPMBUILD ?= $(PWD)/rpmbuild\n\ndist_noinst_DATA += \\\n    m4 \\\n    contrib/sssd.spec.in \\\n    BUILD.txt \\\n    COPYING \\\n    src/tests/multihost/basic/conftest.py \\\n    src/tests/multihost/basic/mhc.yaml \\\n    src/tests/multihost/basic/README.md \\\n    src/tests/multihost/basic/test_basic.py \\\n    src/tests/multihost/basic/test_config.py \\\n    src/tests/multihost/basic/test_files.py \\\n    src/tests/multihost/basic/test_ifp.py \\\n    src/tests/multihost/basic/test_kcm.py \\\n    src/tests/multihost/basic/test_sssctl_config_check.py \\\n    src/tests/multihost/basic/test_sudo.py \\\n    src/tests/multihost/basic/utils_config.py \\\n    $(NULL)\n\nrpmroot:\n\t$(MKDIR_P) $(RPMBUILD)/BUILD\n\t$(MKDIR_P) $(RPMBUILD)/RPMS\n\t$(MKDIR_P) $(RPMBUILD)/SOURCES\n\t$(MKDIR_P) $(RPMBUILD)/SPECS\n\t$(MKDIR_P) $(RPMBUILD)/SRPMS\n\n# pre-release related vars\n\nPR_VERSION_DATE := $(shell date +%Y%m%d.%H%M)\nPR_VERSION_COMMIT_HASH := $(shell git log -1 --pretty=format:%h)\nPR_VERSION_NUMBER = $(PR_VERSION_DATE).git$(PR_VERSION_COMMIT_HASH)\nPR_VERSION_REGEX = m4_define(\\[PRERELEASE_VERSION_NUMBER\\], \\[.*\\])\nPR_VERSION_REPL = m4_define(\\[PRERELEASE_VERSION_NUMBER\\], \\[.$(PR_VERSION_NUMBER)\\])\n\nrpmbrprep: dist-gzip rpmroot\nif GIT_CHECKOUT\n# When we're building RPMs from a git checkout,\n# we don't want to be bothered with translation\n# updates\n\tgit checkout $(srcdir)/po $(srcdir)/src/man/po\nendif\n\tcp $(builddir)/contrib/sssd.spec $(RPMBUILD)/SPECS\n\tcp $(distdir).tar.gz $(RPMBUILD)/SOURCES\n\nrpms: rpmbrprep\n\tcd $(RPMBUILD); \\\n\trpmbuild --define \"_topdir $(RPMBUILD)\" -ba SPECS/sssd.spec\n\nif GIT_CHECKOUT\nprerelease-rpms:\n\tcp $(srcdir)/version.m4 $(srcdir)/version.m4.orig\n\tsed -e \"s/$(PR_VERSION_REGEX)/$(PR_VERSION_REPL)/\" \\\n\t\t< $(srcdir)/version.m4.orig > $(srcdir)/version.m4\n\t$(MAKE) rpms\n\tmv $(srcdir)/version.m4.orig $(srcdir)/version.m4\nendif\n\n# make srpms will use the old digest algorithm to be compatible\n# with RHEL5\nsrpm: rpmbrprep\n\tcd $(RPMBUILD); \\\n\trpmbuild --define \"_topdir $(RPMBUILD)\" \\\n\t         -bs SPECS/sssd.spec\n\nif GIT_CHECKOUT\nprerelease-srpm:\n\tcp $(srcdir)/version.m4 $(srcdir)/version.m4.orig\n\tsed -e \"s/$(PR_VERSION_REGEX)/$(PR_VERSION_REPL)/\" \\\n\t\t< $(srcdir)/version.m4.orig > $(srcdir)/version.m4\n\t$(MAKE) srpm\n\tmv $(srcdir)/version.m4.orig $(srcdir)/version.m4\nendif\n", "/*\n    SSSD\n\n    Library for rule based certificate to user mapping\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"config.h\"\n\n#include <ctype.h>\n\n#include \"util/util.h\"\n#include \"util/cert.h\"\n#include \"util/crypto/sss_crypto.h\"\n#include \"lib/certmap/sss_certmap.h\"\n#include \"lib/certmap/sss_certmap_int.h\"\n\nint debug_level;\nvoid sss_debug_fn(const char *file,\n                  long line,\n                  const char *function,\n                  int level,\n                  const char *format, ...)\n{\n    return;\n}\n\nstatic int get_type_prefix(TALLOC_CTX *mem_ctx, const char *match_rule,\n                           char **type, const char **rule_start)\n{\n    const char *c;\n    char *delim;\n\n    *type = NULL;\n    *rule_start = match_rule;\n\n    delim = strchr(match_rule, ':');\n    if (delim == NULL) {\n        /* no type prefix found */\n        return 0;\n    }\n\n    /* rule starts with ':', empty type */\n    if (delim == match_rule) {\n        *rule_start = delim + 1;\n        return EOK;\n    }\n\n    for (c = match_rule; c < delim; c++) {\n        /* type prefix may only contain digits and upper-case ASCII characters */\n        if (!(isascii(*c) && (isdigit(*c) || isupper(*c)))) {\n            /* no type prefix found */\n            return 0;\n        }\n    }\n\n    *rule_start = delim + 1;\n    *type = talloc_strndup(mem_ctx, match_rule, (delim - match_rule));\n    if (*type == NULL) {\n        return ENOMEM;\n    }\n\n    return 0;\n}\n\nstatic int parse_match_rule(struct sss_certmap_ctx *ctx, const char *match_rule,\n                            struct krb5_match_rule **parsed_match_rule)\n{\n    int ret;\n    char *type;\n    const char *rule_start;\n\n    ret = get_type_prefix(ctx, match_rule, &type, &rule_start);\n    if (ret != EOK) {\n        CM_DEBUG(ctx, \"Failed to read rule type.\");\n        goto done;\n    }\n\n    if (type == NULL || strcmp(type, \"KRB5\") == 0) {\n        ret = parse_krb5_match_rule(ctx, rule_start, parsed_match_rule);\n        if (ret != EOK) {\n            CM_DEBUG(ctx, \"Failed to parse KRB5 matching rule.\");\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported matching rule type.\");\n        ret = ESRCH;\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    talloc_free(type);\n\n    return ret;\n}\n\nstatic int parse_mapping_rule(struct sss_certmap_ctx *ctx,\n                              const char *mapping_rule,\n                              struct ldap_mapping_rule **parsed_mapping_rule)\n{\n    int ret;\n    char *type;\n    const char *rule_start;\n\n    ret = get_type_prefix(ctx, mapping_rule, &type, &rule_start);\n    if (ret != EOK) {\n        CM_DEBUG(ctx, \"Failed to read rule type.\");\n        goto done;\n    }\n\n    if (type == NULL || strcmp(type, \"LDAP\") == 0) {\n        ret = parse_ldap_mapping_rule(ctx, rule_start, parsed_mapping_rule);\n        if (ret != EOK) {\n            CM_DEBUG(ctx, \"Failed to parse LDAP mapping rule.\");\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported mapping rule type.\");\n        ret = ESRCH;\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    talloc_free(type);\n\n    return ret;\n}\n\nint sss_certmap_add_rule(struct sss_certmap_ctx *ctx,\n                         uint32_t priority, const char *match_rule,\n                         const char *map_rule, const char **domains)\n{\n    size_t c;\n    int ret;\n    struct match_map_rule *rule;\n    struct TALLOC_CTX *tmp_ctx;\n    struct priority_list *p;\n    struct priority_list *p_new;\n    struct krb5_match_rule *parsed_match_rule;\n    struct ldap_mapping_rule *parsed_mapping_rule;\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    rule = talloc_zero(tmp_ctx, struct match_map_rule);\n    if (rule == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    rule->priority = priority;\n\n    if (match_rule == NULL) {\n        match_rule = DEFAULT_MATCH_RULE;\n    }\n    ret = parse_match_rule(ctx, match_rule, &parsed_match_rule);\n    if (ret == 0) {\n        rule->parsed_match_rule = talloc_steal(rule, parsed_match_rule);\n        rule->match_rule = talloc_strdup(rule, match_rule);\n        if (rule->match_rule == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    } else if (ret == ESRCH) {\n        /* report unsupported rules */\n        goto done;\n    } else {\n        goto done;\n    }\n\n    if (map_rule == NULL) {\n        map_rule = DEFAULT_MAP_RULE;\n    }\n    ret = parse_mapping_rule(ctx, map_rule, &parsed_mapping_rule);\n    if (ret == 0) {\n        rule->parsed_mapping_rule = talloc_steal(rule, parsed_mapping_rule);\n        rule->map_rule = talloc_strdup(rule, map_rule);\n        if (rule->map_rule == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    } else if (ret == ESRCH) {\n        /* report unsupported rules */\n        goto done;\n    } else {\n        goto done;\n    }\n\n    if (domains != NULL && *domains != NULL) {\n        for (c = 0; domains[c] != NULL; c++);\n        rule->domains = talloc_zero_array(rule, char *, c + 1);\n        if (rule->domains == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        for (c = 0; domains[c] != NULL; c++) {\n            rule->domains[c] = talloc_strdup(rule->domains, domains[c]);\n            if (rule->domains[c] == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n    }\n\n    if (ctx->prio_list == NULL) {\n        ctx->prio_list = talloc_zero(ctx, struct priority_list);\n        if (ctx->prio_list == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n\n        ctx->prio_list->priority = rule->priority;\n        ctx->prio_list->rule_list = rule;\n    } else {\n        for (p = ctx->prio_list; p != NULL && p->priority < rule->priority;\n                                                                   p = p->next);\n        if (p != NULL && p->priority == priority) {\n            DLIST_ADD(p->rule_list, rule);\n        } else {\n            p_new = talloc_zero(ctx, struct priority_list);\n            if (p_new == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n\n            p_new->priority = rule->priority;\n            p_new->rule_list = rule;\n\n            if (p == NULL) {\n                DLIST_ADD_END(ctx->prio_list, p_new, struct priority_list *);\n            } else if (p->prev == NULL) {\n                DLIST_ADD(ctx->prio_list, p_new);\n            } else {\n                DLIST_ADD_AFTER(ctx->prio_list, p_new, p->prev);\n            }\n        }\n    }\n\n    talloc_steal(ctx, rule);\n\n    ret = EOK;\n\ndone:\n    talloc_free(tmp_ctx);\n\n    return ret;\n}\n\nstatic int expand_cert(struct sss_certmap_ctx *ctx,\n                       struct parsed_template *parsed_template,\n                       struct sss_cert_content *cert_content,\n                       char **expanded)\n{\n    int ret;\n    char *tmp_str = NULL;\n\n    if (parsed_template->conversion == NULL\n            || strcmp(parsed_template->conversion, \"bin\") == 0) {\n        ret = bin_to_ldap_filter_value(ctx, cert_content->cert_der,\n                                       cert_content->cert_der_size, &tmp_str);\n        if (ret != 0) {\n            CM_DEBUG(ctx, \"bin conversion failed.\");\n            goto done;\n        }\n    } else if (strcmp(parsed_template->conversion, \"base64\") == 0) {\n        tmp_str = sss_base64_encode(ctx, cert_content->cert_der,\n                                    cert_content->cert_der_size);\n        if (tmp_str == NULL) {\n            CM_DEBUG(ctx, \"base64 conversion failed.\");\n            ret = ENOMEM;\n            goto done;\n        }\n    } else {\n        CM_DEBUG(ctx, \"Unsupported conversion.\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    ret = 0;\n\ndone:\n    if (ret == 0) {\n        *expanded = tmp_str;\n    } else {\n        talloc_free(tmp_str);\n    }\n\n    return ret;\n}\n\nstatic int expand_san_blob(struct sss_certmap_ctx *ctx, enum san_opt san_opt,\n                           struct san_list *san_list, char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n    int ret;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            ret = bin_to_ldap_filter_value(ctx, item->bin_val,\n                                           item->bin_val_len, &exp);\n            if (ret != 0) {\n                CM_DEBUG(ctx, \"bin conversion failed.\");\n                return ret;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\nstatic int expand_san_string(struct sss_certmap_ctx *ctx, enum san_opt san_opt,\n                             struct san_list *san_list, const char *attr_name,\n                             char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            if (attr_name == NULL) {\n                exp = talloc_strdup(ctx, item->val);\n            } else if (strcasecmp(attr_name, \"short_name\") == 0) {\n                exp = talloc_strdup(ctx, item->short_name);\n            } else {\n                CM_DEBUG(ctx, \"Unsupported attribute name [%s].\", attr_name);\n                return EINVAL;\n            }\n\n            if (exp == NULL) {\n                return ENOMEM;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\nstatic int expand_san_rdn_list(struct sss_certmap_ctx *ctx,\n                               enum san_opt san_opt,\n                               struct san_list *san_list,\n                               const char *conversion,\n                               char **expanded)\n{\n    struct san_list *item;\n    char *exp;\n    int ret;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            ret = rdn_list_2_dn_str(ctx, conversion, item->rdn_list, &exp);\n            if (ret != 0) {\n                return ret;\n            }\n\n            *expanded = exp;\n            return 0;\n        }\n    }\n\n    return ENOENT;\n}\n\n\nstatic int expand_san(struct sss_certmap_ctx *ctx,\n                        struct parsed_template *parsed_template,\n                        struct san_list *san_list,\n                        char **expanded)\n{\n    int ret;\n\n    if (strcmp(\"subject_rfc822_name\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_RFC822_NAME, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_dns_name\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_DNS_NAME, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_x400_address\", parsed_template->name) == 0) {\n        ret = expand_san_blob(ctx, SAN_X400_ADDRESS, san_list, expanded);\n    } else if (strcmp(\"subject_directory_name\", parsed_template->name) == 0) {\n        ret = expand_san_rdn_list(ctx, SAN_DIRECTORY_NAME, san_list,\n                                  parsed_template->conversion, expanded);\n    } else if (strcmp(\"subject_ediparty_name\", parsed_template->name) == 0) {\n        ret = expand_san_blob(ctx, SAN_EDIPART_NAME, san_list, expanded);\n    } else if (strcmp(\"subject_uri\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_URI, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_ip_address\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_IP_ADDRESS, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_registered_id\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_REGISTERED_ID, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_pkinit_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_PKINIT, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_nt_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_NT, san_list,\n                                parsed_template->attr_name, expanded);\n    } else if (strcmp(\"subject_principal\", parsed_template->name) == 0) {\n        ret = expand_san_string(ctx, SAN_PRINCIPAL, san_list,\n                                parsed_template->attr_name, expanded);\n    } else {\n        CM_DEBUG(ctx, \"Unsupported template name [%s].n\",\n                      parsed_template->name);\n        ret = EINVAL;\n    }\n\n    return ret;\n}\n\nstatic int expand_template(struct sss_certmap_ctx *ctx,\n                           struct parsed_template *parsed_template,\n                           struct sss_cert_content *cert_content,\n                           bool sanitize,\n                           char **expanded)\n{\n    int ret;\n    char *exp = NULL;\n    char *exp_sanitized = NULL;\n\n    if (strcmp(\"issuer_dn\", parsed_template->name) == 0) {\n        ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,\n                                cert_content->issuer_rdn_list, &exp);\n    } else if (strcmp(\"subject_dn\", parsed_template->name) == 0) {\n        ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,\n                                cert_content->subject_rdn_list, &exp);\n    } else if (strncmp(\"subject_\", parsed_template->name, 8) == 0) {\n        ret = expand_san(ctx, parsed_template, cert_content->san_list, &exp);\n    } else if (strcmp(\"cert\", parsed_template->name) == 0) {\n        /* cert blob is already sanitized */\n        sanitize = false;\n        ret = expand_cert(ctx, parsed_template, cert_content, &exp);\n    } else {\n        CM_DEBUG(ctx, \"Unsupported template name.\");\n        ret = EINVAL;\n        goto done;\n    }\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to expand [%s] template.\", parsed_template->name);\n        goto done;\n    }\n\n    if (exp == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    if (sanitize) {\n        ret = sss_filter_sanitize(ctx, exp, &exp_sanitized);\n        if (ret != EOK) {\n            CM_DEBUG(ctx, \"Failed to sanitize expanded template.\");\n            goto done;\n        }\n        talloc_free(exp);\n        exp = exp_sanitized;\n    }\n\n    ret = 0;\n\ndone:\n    if (ret == 0) {\n        *expanded = exp;\n    } else {\n        talloc_free(exp);\n    }\n\n    return ret;\n}\n\nstatic int get_filter(struct sss_certmap_ctx *ctx,\n                      struct ldap_mapping_rule *parsed_mapping_rule,\n                      struct sss_cert_content *cert_content, bool sanitize,\n                      char **filter)\n{\n    struct ldap_mapping_rule_comp *comp;\n    char *result = NULL;\n    char *expanded = NULL;\n    int ret;\n\n    result = talloc_strdup(ctx, \"\");\n    if (result == NULL) {\n        return ENOMEM;\n    }\n\n    for (comp = parsed_mapping_rule->list; comp != NULL; comp = comp->next) {\n        if (comp->type == comp_string) {\n            result = talloc_strdup_append(result, comp->val);\n        } else if (comp->type == comp_template) {\n            ret = expand_template(ctx, comp->parsed_template, cert_content,\n                                  sanitize, &expanded);\n            if (ret != 0) {\n                CM_DEBUG(ctx, \"Failed to expanded template.\");\n                goto done;\n            }\n\n            result = talloc_strdup_append(result, expanded);\n            talloc_free(expanded);\n            expanded = NULL;\n            if (result == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        } else {\n            ret = EINVAL;\n            CM_DEBUG(ctx, \"Unsupported component type.\");\n            goto done;\n        }\n    }\n\n    ret = 0;\ndone:\n    talloc_free(expanded);\n    if (ret == 0) {\n        *filter = result;\n    } else {\n        talloc_free(result);\n    }\n\n    return ret;\n}\n\nstatic bool check_san_regexp(struct sss_certmap_ctx *ctx,\n                             enum san_opt san_opt, regex_t regexp,\n                             struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n    int ret;\n    char *tmp_str = NULL;\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            if (item->san_opt == SAN_DIRECTORY_NAME) {\n                /* use LDAP order for matching */\n                ret = rdn_list_2_dn_str(ctx, NULL, item->rdn_list, &tmp_str);\n                if (ret != 0 || tmp_str == NULL) {\n                    return false;\n                }\n                match = (regexec(&regexp, tmp_str, 0, NULL, 0) == 0);\n                talloc_free(tmp_str);\n            } else {\n                match = (item->val != NULL\n                            && regexec(&regexp, item->val, 0, NULL, 0) == 0);\n            }\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool check_san_blob(enum san_opt san_opt,\n                           uint8_t *bin_val, size_t bin_val_len,\n                           struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n\n    if (bin_val == NULL || bin_val_len == 0) {\n        return false;\n    }\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt) {\n            match = (item->bin_val != NULL && item->bin_val_len != 0\n                        && memmem(item->bin_val, item->bin_val_len,\n                                  bin_val, bin_val_len) != NULL);\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool check_san_str_other_name(enum san_opt san_opt,\n                                     const char *str_other_name_oid,\n                                     regex_t regexp,\n                                     struct san_list *san_list)\n{\n    struct san_list *item;\n    bool match = false;\n    char *tmp_str;\n\n    if (str_other_name_oid == NULL) {\n        return false;\n    }\n\n    DLIST_FOR_EACH(item, san_list) {\n        if (item->san_opt == san_opt\n                && strcmp(item->other_name_oid, str_other_name_oid) == 0) {\n            match = false;\n            if (item->bin_val != NULL && item->bin_val_len != 0) {\n                tmp_str = talloc_strndup(item, (char *) item->bin_val,\n                                         item->bin_val_len);\n                if (tmp_str != NULL) {\n                    match = (regexec(&regexp, tmp_str, 0, NULL, 0) == 0);\n                }\n                talloc_free(tmp_str);\n            }\n            if (!match) {\n                return false;\n            }\n        }\n    }\n\n    return match;\n}\n\nstatic bool do_san_match(struct sss_certmap_ctx *ctx,\n                         struct component_list *comp,\n                         struct san_list *san_list)\n{\n    switch (comp->san_opt) {\n    case SAN_OTHER_NAME:\n        return check_san_blob(SAN_STRING_OTHER_NAME,\n                              comp->bin_val, comp->bin_val_len,\n                              san_list);\n        break;\n    case SAN_X400_ADDRESS:\n    case SAN_EDIPART_NAME:\n        return check_san_blob(comp->san_opt, comp->bin_val, comp->bin_val_len,\n                              san_list);\n        break;\n    case SAN_RFC822_NAME:\n    case SAN_DNS_NAME:\n    case SAN_DIRECTORY_NAME:\n    case SAN_URI:\n    case SAN_IP_ADDRESS:\n    case SAN_REGISTERED_ID:\n    case SAN_PKINIT:\n    case SAN_NT:\n    case SAN_PRINCIPAL:\n        return check_san_regexp(ctx, comp->san_opt, comp->regexp, san_list);\n        break;\n    case SAN_STRING_OTHER_NAME:\n        return check_san_str_other_name(comp->san_opt, comp->str_other_name_oid,\n                                        comp->regexp, san_list);\n        break;\n    default:\n        CM_DEBUG(ctx, \"Unsupported SAN option [%d].\", comp->san_opt);\n        return false;\n    }\n}\n\nstatic int do_match(struct sss_certmap_ctx *ctx,\n                    struct krb5_match_rule *parsed_match_rule,\n                    struct sss_cert_content *cert_content)\n{\n    struct component_list *comp;\n    bool match = false;\n    size_t c;\n\n    if (parsed_match_rule == NULL || cert_content == NULL) {\n        return EINVAL;\n    }\n\n    /* Issuer */\n    for (comp = parsed_match_rule->issuer; comp != NULL; comp = comp->next) {\n        match = (cert_content->issuer_str != NULL\n                    && regexec(&(comp->regexp), cert_content->issuer_str,\n                               0, NULL, 0) == 0);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n\n    }\n\n    /* Subject */\n    for (comp = parsed_match_rule->subject; comp != NULL; comp = comp->next) {\n        match = (cert_content->subject_str != NULL\n                    && regexec(&(comp->regexp), cert_content->subject_str,\n                               0, NULL, 0) == 0);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n\n    }\n\n    /* Key Usage */\n    for (comp = parsed_match_rule->ku; comp != NULL; comp = comp->next) {\n        match = ((cert_content->key_usage & comp->ku) == comp->ku);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n    }\n\n    /* Extended Key Usage */\n    for (comp = parsed_match_rule->eku; comp != NULL; comp = comp->next) {\n        for (c = 0; comp->eku_oid_list[c] != NULL; c++) {\n            match = string_in_list(comp->eku_oid_list[c],\n                                   discard_const(\n                                         cert_content->extended_key_usage_oids),\n                                   true);\n            if (match && parsed_match_rule->r == relation_or) {\n                /* match */\n                return 0;\n            } else if (!match && parsed_match_rule->r == relation_and) {\n                /* no match */\n                return ENOENT;\n            }\n        }\n    }\n\n    /* SAN */\n    for (comp = parsed_match_rule->san; comp != NULL; comp = comp->next) {\n        match = do_san_match(ctx, comp, cert_content->san_list);\n        if (match && parsed_match_rule->r == relation_or) {\n            /* match */\n            return 0;\n        } else if (!match && parsed_match_rule->r == relation_and) {\n            /* no match */\n            return ENOENT;\n        }\n    }\n\n    if (match) {\n        /* match */\n        return 0;\n    }\n\n    /* no match */\n    return ENOENT;\n}\n\nint sss_certmap_match_cert(struct sss_certmap_ctx *ctx,\n                           const uint8_t *der_cert, size_t der_size)\n{\n    int ret;\n    struct match_map_rule *r;\n    struct priority_list *p;\n    struct sss_cert_content *cert_content = NULL;\n\n    ret = sss_cert_get_content(ctx, der_cert, der_size, &cert_content);\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to get certificate content.\");\n        return ret;\n    }\n\n    if (ctx->prio_list == NULL) {\n        /* Match all certificates if there are no rules applied */\n        ret = 0;\n        goto done;\n    }\n\n    for (p = ctx->prio_list; p != NULL; p = p->next) {\n        for (r = p->rule_list; r != NULL; r = r->next) {\n            ret = do_match(ctx, r->parsed_match_rule, cert_content);\n            if (ret == 0) {\n                /* match */\n                goto done;\n            }\n        }\n    }\n\n    ret = ENOENT;\ndone:\n    talloc_free(cert_content);\n\n    return ret;\n}\n\nstatic int expand_mapping_rule_ex(struct sss_certmap_ctx *ctx,\n                                  const uint8_t *der_cert, size_t der_size,\n                                  bool sanitize,\n                                  char **_filter, char ***_domains)\n{\n    int ret;\n    struct match_map_rule *r;\n    struct priority_list *p;\n    struct sss_cert_content *cert_content = NULL;\n    char *filter = NULL;\n    char **domains = NULL;\n    size_t c;\n\n    if (_filter == NULL || _domains == NULL) {\n        return EINVAL;\n    }\n\n    ret = sss_cert_get_content(ctx, der_cert, der_size, &cert_content);\n    if (ret != 0) {\n        CM_DEBUG(ctx, \"Failed to get certificate content [%d].\", ret);\n        return ret;\n    }\n\n    if (ctx->prio_list == NULL) {\n        if (ctx->default_mapping_rule == NULL) {\n            CM_DEBUG(ctx, \"No matching or mapping rules available.\");\n            return EINVAL;\n        }\n\n        ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, sanitize,\n                         &filter);\n        goto done;\n    }\n\n    for (p = ctx->prio_list; p != NULL; p = p->next) {\n        for (r = p->rule_list; r != NULL; r = r->next) {\n            ret = do_match(ctx, r->parsed_match_rule, cert_content);\n            if (ret == 0) {\n                /* match */\n                ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,\n                                 sanitize, &filter);\n                if (ret != 0) {\n                    CM_DEBUG(ctx, \"Failed to get filter\");\n                    goto done;\n                }\n\n                if (r->domains != NULL) {\n                    for (c = 0; r->domains[c] != NULL; c++);\n                    domains = talloc_zero_array(ctx, char *, c + 1);\n                    if (domains == NULL) {\n                        ret = ENOMEM;\n                        goto done;\n                    }\n\n                    for (c = 0; r->domains[c] != NULL; c++) {\n                        domains[c] = talloc_strdup(domains, r->domains[c]);\n                        if (domains[c] == NULL) {\n                            ret = ENOMEM;\n                            goto done;\n                        }\n                    }\n                }\n\n                ret = 0;\n                goto done;\n            }\n        }\n    }\n\n    ret = ENOENT;\n\ndone:\n    talloc_free(cert_content);\n    if (ret == 0) {\n        *_filter = filter;\n        *_domains = domains;\n    } else {\n        talloc_free(filter);\n        talloc_free(domains);\n    }\n\n    return ret;\n}\n\nint sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,\n                                  const uint8_t *der_cert, size_t der_size,\n                                  char **_filter, char ***_domains)\n{\n    return expand_mapping_rule_ex(ctx, der_cert, der_size, true,\n                                  _filter, _domains);\n}\n\nint sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,\n                                    const uint8_t *der_cert, size_t der_size,\n                                    char **_expanded, char ***_domains)\n{\n    return expand_mapping_rule_ex(ctx, der_cert, der_size, false,\n                                  _expanded, _domains);\n}\n\nint sss_certmap_init(TALLOC_CTX *mem_ctx,\n                     sss_certmap_ext_debug *debug, void *debug_priv,\n                     struct sss_certmap_ctx **ctx)\n{\n    int ret;\n\n    if (ctx == NULL) {\n        return EINVAL;\n    }\n\n    *ctx = talloc_zero(mem_ctx, struct sss_certmap_ctx);\n    if (*ctx == NULL) {\n        return ENOMEM;\n    }\n\n    (*ctx)->debug = debug;\n    (*ctx)->debug_priv = debug_priv;\n\n    ret  = parse_mapping_rule(*ctx, DEFAULT_MAP_RULE,\n                              &((*ctx)->default_mapping_rule));\n    if (ret != 0) {\n        CM_DEBUG((*ctx), \"Failed to parse default mapping rule.\");\n        talloc_free(*ctx);\n        *ctx = NULL;\n        return ret;\n    }\n\n    CM_DEBUG((*ctx), \"sss_certmap initialized.\");\n    return EOK;\n}\n\nvoid sss_certmap_free_ctx(struct sss_certmap_ctx *ctx)\n{\n    talloc_free(ctx);\n}\n\nvoid sss_certmap_free_filter_and_domains(char *filter, char **domains)\n{\n    talloc_free(filter);\n    talloc_free(domains);\n}\n\nstatic const char *sss_eku_oid2name(const char *oid)\n{\n    size_t c;\n\n    for (c = 0; sss_ext_key_usage[c].name != NULL; c++) {\n        if (strcmp(sss_ext_key_usage[c].oid, oid) == 0) {\n            return sss_ext_key_usage[c].name;\n        }\n    }\n\n    return NULL;\n}\n\nstruct parsed_template san_parsed_template[] = {\n    { NULL, NULL, NULL }, /* SAN_OTHER_NAME handled separately */\n    { \"subject_rfc822_name\", NULL, NULL},\n    { \"subject_dns_name\", NULL, NULL},\n    { \"subject_x400_address\", NULL, NULL},\n    { \"subject_directory_name\", NULL, NULL},\n    { \"subject_ediparty_name\", NULL, NULL},\n    { \"subject_uri\", NULL, NULL},\n    { \"subject_ip_address\", NULL, NULL},\n    { \"subject_registered_id\", NULL, NULL},\n    { \"subject_pkinit_principal\", NULL, NULL},\n    { \"subject_nt_principal\", NULL, NULL},\n    { \"subject_principal\", NULL, NULL},\n    { NULL, NULL, NULL }, /* SAN_STRING_OTHER_NAME handled separately */\n    { NULL, NULL, NULL }  /* SAN_END */\n};\n\nstatic int sss_cert_dump_content(TALLOC_CTX *mem_ctx,\n                                 struct sss_cert_content *c,\n                                 char **content_str)\n{\n    char *out = NULL;\n    size_t o;\n    struct san_list *s;\n    struct sss_certmap_ctx *ctx = NULL;\n    char *expanded = NULL;\n    int ret;\n    char *b64 = NULL;\n    const char *eku_str = NULL;\n    TALLOC_CTX *tmp_ctx = NULL;\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    ret = sss_certmap_init(tmp_ctx, NULL, NULL, &ctx);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    ret = ENOMEM; /* default error code for upcoming memory allocation issues */\n    out = talloc_strdup(tmp_ctx, \"sss cert content (format might change):\\n\");\n    if (out == NULL) goto done;\n\n    out = talloc_asprintf_append(out, \"Issuer: %s\\n\", c->issuer_str != NULL\n                                                         ? c->issuer_str\n                                                         : \"- not available -\");\n    if (out == NULL) goto done;\n    out = talloc_asprintf_append(out, \"Subject: %s\\n\", c->subject_str != NULL\n                                                         ? c->subject_str\n                                                         : \"- not available -\");\n    if (out == NULL) goto done;\n\n    out = talloc_asprintf_append(out, \"Key Usage: %u(0x%04x)\", c->key_usage,\n                                                               c->key_usage);\n    if (out == NULL) goto done;\n\n    if (c->key_usage != 0) {\n        out = talloc_asprintf_append(out, \" (\");\n        if (out == NULL) goto done;\n        for (o = 0; sss_key_usage[o].name != NULL; o++) {\n            if ((c->key_usage & sss_key_usage[o].flag) != 0) {\n                out = talloc_asprintf_append(out, \"%s%s\",\n                                             o == 0 ? \"\" : \",\",\n                                             sss_key_usage[o].name);\n                if (out == NULL) goto done;\n            }\n        }\n        out = talloc_asprintf_append(out, \")\");\n        if (out == NULL) goto done;\n    }\n    out = talloc_asprintf_append(out, \"\\n\");\n    if (out == NULL) goto done;\n\n    for (o = 0; c->extended_key_usage_oids[o] != NULL; o++) {\n        eku_str = sss_eku_oid2name(c->extended_key_usage_oids[o]);\n        out = talloc_asprintf_append(out, \"Extended Key Usage #%zu: %s%s%s%s\\n\",\n                                          o, c->extended_key_usage_oids[o],\n                                          eku_str == NULL ? \"\" : \" (\",\n                                          eku_str == NULL ? \"\" : eku_str,\n                                          eku_str == NULL ? \"\" : \")\");\n        if (out == NULL) goto done;\n    }\n\n    DLIST_FOR_EACH(s, c->san_list) {\n        out = talloc_asprintf_append(out, \"SAN type: %s\\n\",\n                                     s->san_opt < SAN_END\n                                                ? sss_san_names[s->san_opt].name\n                                                : \"- unsupported -\");\n        if (out == NULL) goto done;\n\n        if (san_parsed_template[s->san_opt].name != NULL) {\n            ret = expand_san(ctx, &san_parsed_template[s->san_opt], c->san_list,\n                             &expanded);\n            if (ret != EOK) {\n                goto done;\n            }\n            out = talloc_asprintf_append(out, \" %s=%s\\n\\n\",\n                                         san_parsed_template[s->san_opt].name,\n                                         expanded);\n            talloc_free(expanded);\n            if (out == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n        } else if (s->san_opt == SAN_STRING_OTHER_NAME) {\n            b64 = sss_base64_encode(tmp_ctx, s->bin_val, s->bin_val_len);\n            out = talloc_asprintf_append(out, \" %s=%s\\n\\n\", s->other_name_oid,\n                                              b64 != NULL ? b64\n                                                          : \"- cannot encode -\");\n            talloc_free(b64);\n            if (out == NULL) goto done;\n        }\n    }\n\n    *content_str = talloc_steal(mem_ctx, out);\n\n    ret = EOK;\n\ndone:\n\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nint sss_certmap_display_cert_content(TALLOC_CTX *mem_cxt,\n                                     const uint8_t *der_cert, size_t der_size,\n                                     char **desc)\n{\n    int ret;\n    struct sss_cert_content *content = NULL;\n\n    ret = sss_cert_get_content(mem_cxt, der_cert, der_size, &content);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    ret = sss_cert_dump_content(mem_cxt, content, desc);\n    talloc_free(content);\n    if (ret != EOK) {\n        return ret;\n    }\n\n    return 0;\n}\n", "SSS_CERTMAP_0.0 {\n    global:\n        sss_certmap_init;\n        sss_certmap_free_ctx;\n        sss_certmap_err_msg;\n        sss_certmap_add_rule;\n        sss_certmap_match_cert;\n        sss_certmap_get_search_filter;\n        sss_cert_get_content;\n        sss_certmap_free_filter_and_domains;\n    local:\n        *;\n};\n\nSSS_CERTMAP_0.1 {\n    global:\n        sss_certmap_display_cert_content;\n} SSS_CERTMAP_0.0;\n\nSSS_CERTMAP_0.2 {\n    global:\n        sss_certmap_expand_mapping_rule;\n} SSS_CERTMAP_0.1;\n", "/*\n    SSSD\n\n    Library for rule based certificate to user mapping\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _SSS_CERTMAP_H_\n#define _SSS_CERTMAP_H_\n\n#include <stdlib.h>\n#include <stdint.h>\n#include <talloc.h>\n\n/**\n * @defgroup sss_certmap Allow rule-based mapping of certificates to users\n * Libsss_certmap provides a mechanism to map X509 certificate to users based\n * on rules.\n * @{\n */\n\n/**\n * Opaque type for the idmap context\n */\nstruct sss_certmap_ctx;\n\n/**\n * Lowest priority of a rule\n */\n#define SSS_CERTMAP_MIN_PRIO UINT32_MAX\n\n/**\n * Typedef for external debug callback\n */\ntypedef void (sss_certmap_ext_debug)(void *pvt,\n                                     const char *file, long line,\n                                     const char *function,\n                                     const char *format, ...);\n/**\n * @brief Initialize certmap context\n *\n * @param[in] mem_ctx    Talloc memory context, may be NULL\n * @param[in] debug      Callback to handle debug output, may be NULL\n * @param[in] debug_priv Private data for debugging callback, may be NULL\n * @param[out] ctx       New certmap context\n *\n * @return\n *  - 0:      success\n *  - ENOMEM: failed to allocate internal Talloc context\n *  - EINVAL: ctx is NULL\n */\nint sss_certmap_init(TALLOC_CTX *mem_ctx,\n                     sss_certmap_ext_debug *debug, void *debug_priv,\n                     struct sss_certmap_ctx **ctx);\n\n/**\n * @brief Free certmap context\n *\n * @param[in] ctx certmap context previously initialized with\n *            @ref sss_certmap_init, may be NULL\n */\nvoid sss_certmap_free_ctx(struct sss_certmap_ctx *ctx);\n\n/**\n * @brief Add a rule to the certmap context\n *\n * @param[in] ctx        certmap context previously initialized with\n *                       @ref sss_certmap_init\n * @param[in] priority   priority of the rule, 0 is the hightest priority, the\n *                       lowest is SSS_CERTMAP_MIN_PRIO\n * @param[in] match_rule String with the matching rule\n * @param[in] map_rule   String with the mapping rule\n * @param[in] domains    NULL-terminated string array with a list of domains\n *                       the rule should be valid for, i.e. only this domains\n *                       should be searched for matching users\n *\n * @return\n *  - 0:      success\n */\nint sss_certmap_add_rule(struct sss_certmap_ctx *ctx,\n                         uint32_t priority, const char *match_rule,\n                         const char *map_rule, const char **domains);\n\n/**\n * @brief Check if a certificate matches any of the applied rules\n *\n * @param[in] ctx      certmap context previously initialized with\n *                     @ref sss_certmap_init\n * @param[in] der_cert binary blob with the DER encoded certificate\n * @param[in] der_size size of the certificate blob\n *\n * @return\n *  - 0:      certificate matches a rule\n *  - ENOENT: certificate does not match\n *  - EINVAL: internal error\n */\nint sss_certmap_match_cert(struct sss_certmap_ctx *ctx,\n                           const uint8_t *der_cert, size_t der_size);\n\n/**\n * @brief Get the LDAP filter string for a certificate\n *\n * @param[in] ctx      certmap context previously initialized with\n *                     @ref sss_certmap_init\n * @param[in] der_cert binary blob with the DER encoded certificate\n * @param[in] der_size size of the certificate blob\n * @param[out] filter  LDAP filter string, expanded templates are sanitized,\n *                     caller should free the data by calling\n *                     sss_certmap_free_filter_and_domains\n * @param[out] domains NULL-terminated array of strings with the domains the\n *                     rule applies, caller should free the data by calling\n *                     sss_certmap_free_filter_and_domains\n *\n * @return\n *  - 0:      certificate matches a rule\n *  - ENOENT: certificate does not match\n *  - EINVAL: internal error\n */\nint sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,\n                                  const uint8_t *der_cert, size_t der_size,\n                                  char **filter, char ***domains);\n\n/**\n * @brief Expand the mapping rule by replacing the templates\n *\n * @param[in] ctx        certmap context previously initialized with\n *                       @ref sss_certmap_init\n * @param[in] der_cert   binary blob with the DER encoded certificate\n * @param[in] der_size   size of the certificate blob\n * @param[out] expanded  expanded mapping rule, templates are filled in\n *                       verbatim in contrast to sss_certmap_get_search_filter,\n *                       caller should free the data by\n *                       calling sss_certmap_free_filter_and_domains\n * @param[out] domains   NULL-terminated array of strings with the domains the\n *                       rule applies, caller should free the data by calling\n *                       sss_certmap_free_filter_and_domains\n *\n * @return\n *  - 0:      certificate matches a rule\n *  - ENOENT: certificate does not match\n *  - EINVAL: internal error\n */\nint sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,\n                                    const uint8_t *der_cert, size_t der_size,\n                                    char **_expanded, char ***_domains);\n/**\n * @brief Free data returned by @ref sss_certmap_get_search_filter\n *        and @ref sss_certmap_expand_mapping_rule\n *\n * @param[in] filter  LDAP filter strings returned by\n *                    sss_certmap_get_search_filter\n * @param[in] domains string array of domains returned by\n *                     sss_certmap_get_search_filter\n */\nvoid sss_certmap_free_filter_and_domains(char *filter, char **domains);\n\n/**\n * @brief Get a string with the content of the certificate used by the library\n *\n * @param[in]  mem_ctx    Talloc memory context, may be NULL\n * @param[in]  der_cert   binary blob with the DER encoded certificate\n * @param[in]  der_size   size of the certificate blob\n * @param[out] desc       Multiline string showing the certificate content\n *                        which is used by libsss_certmap\n *\n * @return\n *  - 0:      success\n *  - EINVAL: certificate cannot be parsed\n *  - ENOMEM: memory allocation failure\n */\nint sss_certmap_display_cert_content(TALLOC_CTX *mem_cxt,\n                                     const uint8_t *der_cert, size_t der_size,\n                                     char **desc);\n\n/**\n * @}\n */\n#endif /* _SSS_CERTMAP_H_ */\n", "/*\n   SSSD\n\n   PAM Responder - certificate related requests\n\n   Copyright (C) Sumit Bose <sbose@redhat.com> 2015\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <time.h>\n\n#include \"util/util.h\"\n#include \"providers/data_provider.h\"\n#include \"util/child_common.h\"\n#include \"util/strtonum.h\"\n#include \"responder/pam/pamsrv.h\"\n#include \"responder/pam/pam_helpers.h\"\n#include \"lib/certmap/sss_certmap.h\"\n#include \"util/crypto/sss_crypto.h\"\n#include \"db/sysdb.h\"\n\n\nstruct cert_auth_info {\n    char *cert;\n    char *token_name;\n    char *module_name;\n    char *key_id;\n    char *label;\n    struct ldb_result *cert_user_objs;\n    struct cert_auth_info *prev;\n    struct cert_auth_info *next;\n};\n\nconst char *sss_cai_get_cert(struct cert_auth_info *i)\n{\n    return i != NULL ? i->cert : NULL;\n}\n\nconst char *sss_cai_get_token_name(struct cert_auth_info *i)\n{\n    return i != NULL ? i->token_name : NULL;\n}\n\nconst char *sss_cai_get_module_name(struct cert_auth_info *i)\n{\n    return i != NULL ? i->module_name : NULL;\n}\n\nconst char *sss_cai_get_key_id(struct cert_auth_info *i)\n{\n    return i != NULL ? i->key_id : NULL;\n}\n\nconst char *sss_cai_get_label(struct cert_auth_info *i)\n{\n    return i != NULL ? i->label : NULL;\n}\n\nstruct cert_auth_info *sss_cai_get_next(struct cert_auth_info *i)\n{\n    return i != NULL ? i->next : NULL;\n}\n\nstruct ldb_result *sss_cai_get_cert_user_objs(struct cert_auth_info *i)\n{\n    return i != NULL ? i->cert_user_objs : NULL;\n}\n\nvoid sss_cai_set_cert_user_objs(struct cert_auth_info *i,\n                                struct ldb_result *cert_user_objs)\n{\n    if (i->cert_user_objs != NULL) {\n        talloc_free(i->cert_user_objs);\n    }\n    i->cert_user_objs = talloc_steal(i, cert_user_objs);\n}\n\nvoid sss_cai_check_users(struct cert_auth_info **list, size_t *_cert_count,\n                         size_t *_cert_user_count)\n{\n    struct cert_auth_info *c;\n    struct cert_auth_info *tmp;\n    size_t cert_count = 0;\n    size_t cert_user_count = 0;\n    struct ldb_result *user_objs;\n\n    DLIST_FOR_EACH_SAFE(c, tmp, *list) {\n        user_objs = sss_cai_get_cert_user_objs(c);\n        if (user_objs != NULL) {\n            cert_count++;\n            cert_user_count += user_objs->count;\n        } else {\n            DLIST_REMOVE(*list, c);\n        }\n    }\n\n    if (_cert_count != NULL) {\n        *_cert_count = cert_count;\n    }\n\n    if (_cert_user_count != NULL) {\n        *_cert_user_count = cert_user_count;\n    }\n\n    return;\n}\n\nstruct priv_sss_debug {\n    int level;\n};\n\nstatic void ext_debug(void *private, const char *file, long line,\n                      const char *function, const char *format, ...)\n{\n    va_list ap;\n    struct priv_sss_debug *data = private;\n    int level = SSSDBG_OP_FAILURE;\n\n    if (data != NULL) {\n        level = data->level;\n    }\n\n    if (DEBUG_IS_SET(level)) {\n        va_start(ap, format);\n        sss_vdebug_fn(file, line, function, level, APPEND_LINE_FEED,\n                      format, ap);\n        va_end(ap);\n    }\n}\n\nerrno_t p11_refresh_certmap_ctx(struct pam_ctx *pctx,\n                                struct sss_domain_info *domains)\n{\n    int ret;\n    struct sss_certmap_ctx *sss_certmap_ctx = NULL;\n    size_t c;\n    struct sss_domain_info *dom;\n    bool certmap_found = false;\n    struct certmap_info **certmap_list;\n\n    ret = sss_certmap_init(pctx, ext_debug, NULL, &sss_certmap_ctx);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_init failed.\\n\");\n        goto done;\n    }\n\n    DLIST_FOR_EACH(dom, domains) {\n        certmap_list = dom->certmaps;\n        if (certmap_list != NULL && *certmap_list != NULL) {\n            certmap_found = true;\n            break;\n        }\n    }\n\n    if (!certmap_found) {\n        /* Try to add default matching rule */\n        ret = sss_certmap_add_rule(sss_certmap_ctx, SSS_CERTMAP_MIN_PRIO,\n                                   CERT_AUTH_DEFAULT_MATCHING_RULE, NULL, NULL);\n        if (ret != 0) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Failed to add default matching rule.\\n\");\n        }\n\n        goto done;\n    }\n\n    DLIST_FOR_EACH(dom, domains) {\n        certmap_list = dom->certmaps;\n        if (certmap_list == NULL || *certmap_list == NULL) {\n            continue;\n        }\n\n        for (c = 0; certmap_list[c] != NULL; c++) {\n            DEBUG(SSSDBG_TRACE_ALL,\n                  \"Trying to add rule [%s][%d][%s][%s].\\n\",\n                  certmap_list[c]->name, certmap_list[c]->priority,\n                  certmap_list[c]->match_rule, certmap_list[c]->map_rule);\n\n            ret = sss_certmap_add_rule(sss_certmap_ctx,\n                                       certmap_list[c]->priority,\n                                       certmap_list[c]->match_rule,\n                                       certmap_list[c]->map_rule,\n                                       certmap_list[c]->domains);\n            if (ret != 0) {\n                DEBUG(SSSDBG_CRIT_FAILURE,\n                      \"sss_certmap_add_rule failed for rule [%s] \"\n                      \"with error [%d][%s], skipping. \"\n                      \"Please check for typos and if rule syntax is supported.\\n\",\n                      certmap_list[c]->name, ret, sss_strerror(ret));\n                continue;\n            }\n        }\n    }\n\n    ret = EOK;\n\ndone:\n    if (ret == EOK) {\n        sss_certmap_free_ctx(pctx->sss_certmap_ctx);\n        pctx->sss_certmap_ctx = sss_certmap_ctx;\n    } else {\n        sss_certmap_free_ctx(sss_certmap_ctx);\n    }\n\n    return ret;\n}\n\nerrno_t p11_child_init(struct pam_ctx *pctx)\n{\n    int ret;\n    struct certmap_info **certmaps;\n    bool user_name_hint;\n    struct sss_domain_info *dom;\n\n    DLIST_FOR_EACH(dom, pctx->rctx->domains) {\n        ret = sysdb_get_certmap(dom, dom->sysdb, &certmaps, &user_name_hint);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sysdb_get_certmap failed.\\n\");\n            return ret;\n        }\n\n        dom->user_name_hint = user_name_hint;\n        talloc_free(dom->certmaps);\n        dom->certmaps = certmaps;\n    }\n\n    ret = p11_refresh_certmap_ctx(pctx, pctx->rctx->domains);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"p11_refresh_certmap_ctx failed.\\n\");\n        return ret;\n    }\n\n    return EOK;\n}\n\nstatic inline bool\nservice_in_list(char **list, size_t nlist, const char *str)\n{\n    size_t i;\n\n    for (i = 0; i < nlist; i++) {\n        if (strcasecmp(list[i], str) == 0) {\n            break;\n        }\n    }\n\n    return (i < nlist) ? true : false;\n}\n\nstatic errno_t get_sc_services(TALLOC_CTX *mem_ctx, struct pam_ctx *pctx,\n                               char ***_sc_list)\n{\n    TALLOC_CTX *tmp_ctx;\n    errno_t ret;\n    char *conf_str;\n    char **conf_list;\n    int conf_list_size;\n    char **add_list;\n    char **remove_list;\n    int ai = 0;\n    int ri = 0;\n    int j = 0;\n    char **sc_list;\n    int expected_sc_list_size;\n\n    const char *default_sc_services[] = {\n        \"login\", \"su\", \"su-l\", \"gdm-smartcard\", \"gdm-password\", \"kdm\", \"sudo\",\n        \"sudo-i\", \"gnome-screensaver\", \"polkit-1\", NULL,\n    };\n    const int default_sc_services_size =\n        sizeof(default_sc_services) / sizeof(default_sc_services[0]);\n\n    tmp_ctx = talloc_new(mem_ctx);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    ret = confdb_get_string(pctx->rctx->cdb, tmp_ctx, CONFDB_PAM_CONF_ENTRY,\n                            CONFDB_PAM_P11_ALLOWED_SERVICES, NULL,\n                            &conf_str);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"confdb_get_string failed %d [%s]\\n\", ret, sss_strerror(ret));\n        goto done;\n    }\n\n    if (conf_str != NULL) {\n        ret = split_on_separator(tmp_ctx, conf_str, ',', true, true,\n                                 &conf_list, &conf_list_size);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Cannot parse list of service names '%s': %d [%s]\\n\",\n                  conf_str, ret, sss_strerror(ret));\n            goto done;\n        }\n    } else {\n        conf_list = talloc_zero_array(tmp_ctx, char *, 1);\n        conf_list_size = 0;\n    }\n\n    add_list = talloc_zero_array(tmp_ctx, char *, conf_list_size + 1);\n    remove_list = talloc_zero_array(tmp_ctx, char *, conf_list_size + 1);\n\n    if (add_list == NULL || remove_list == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    for (int i = 0; conf_list[i] != NULL; ++i) {\n        switch (conf_list[i][0]) {\n        case '+':\n            add_list[ai] = conf_list[i] + 1;\n            ++ai;\n            break;\n        case '-':\n            remove_list[ri] = conf_list[i] + 1;\n            ++ri;\n            break;\n        default:\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"The option \"CONFDB_PAM_P11_ALLOWED_SERVICES\" must start\"\n                  \"with either '+' (for adding service) or '-' (for \"\n                  \"removing service) got '%s'\\n\", conf_list[i]);\n            ret = EINVAL;\n            goto done;\n        }\n    }\n\n    expected_sc_list_size = default_sc_services_size + ai + 1;\n\n    sc_list = talloc_zero_array(tmp_ctx, char *, expected_sc_list_size);\n    if (sc_list == NULL) {\n        ret = ENOMEM;\n        goto done;\n    }\n\n    for (int i = 0; add_list[i] != NULL; ++i) {\n        if (service_in_list(remove_list, ri, add_list[i])) {\n            continue;\n        }\n\n        sc_list[j] = talloc_strdup(sc_list, add_list[i]);\n        if (sc_list[j] == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        ++j;\n    }\n\n    for (int i = 0; default_sc_services[i] != NULL; ++i) {\n        if (service_in_list(remove_list, ri, default_sc_services[i])) {\n            continue;\n        }\n\n        sc_list[j] = talloc_strdup(sc_list, default_sc_services[i]);\n        if (sc_list[j] == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n        ++j;\n    }\n\n    if (_sc_list != NULL) {\n        *_sc_list = talloc_steal(mem_ctx, sc_list);\n    }\n\ndone:\n    talloc_zfree(tmp_ctx);\n\n    return ret;\n}\n\nbool may_do_cert_auth(struct pam_ctx *pctx, struct pam_data *pd)\n{\n    size_t c;\n    errno_t ret;\n\n    if (!pctx->cert_auth) {\n        return false;\n    }\n\n    if (pd->cmd != SSS_PAM_PREAUTH && pd->cmd != SSS_PAM_AUTHENTICATE) {\n        return false;\n    }\n\n    if (pd->cmd == SSS_PAM_AUTHENTICATE\n           && sss_authtok_get_type(pd->authtok) != SSS_AUTHTOK_TYPE_SC_PIN\n           && sss_authtok_get_type(pd->authtok) != SSS_AUTHTOK_TYPE_SC_KEYPAD) {\n        return false;\n    }\n\n    if (pd->service == NULL || *pd->service == '\\0') {\n        return false;\n    }\n\n    /* Initialize smartcard allowed services just once */\n    if (pctx->smartcard_services == NULL) {\n        ret = get_sc_services(pctx, pctx, &pctx->smartcard_services);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Failed to get p11 allowed services %d[%s]\",\n                  ret, sss_strerror(ret));\n            sss_log(SSS_LOG_ERR,\n                    \"Failed to evaluate pam_p11_allowed_services option, \"\n                    \"please check for typos in the SSSD configuration\");\n            return false;\n        }\n    }\n\n    for (c = 0; pctx->smartcard_services[c] != NULL; c++) {\n        if (strcmp(pd->service, pctx->smartcard_services[c]) == 0) {\n            break;\n        }\n    }\n    if (pctx->smartcard_services[c] == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"Smartcard authentication for service [%s] not supported.\\n\",\n              pd->service);\n        return false;\n    }\n\n    return true;\n}\n\nstatic errno_t get_p11_child_write_buffer(TALLOC_CTX *mem_ctx,\n                                          struct pam_data *pd,\n                                          uint8_t **_buf, size_t *_len)\n{\n    int ret;\n    uint8_t *buf;\n    size_t len;\n    const char *pin = NULL;\n\n    if (pd == NULL || pd->authtok == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing authtok.\\n\");\n        return EINVAL;\n    }\n\n    switch (sss_authtok_get_type(pd->authtok)) {\n    case SSS_AUTHTOK_TYPE_SC_PIN:\n        ret = sss_authtok_get_sc_pin(pd->authtok, &pin, &len);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_authtok_get_sc_pin failed.\\n\");\n            return ret;\n        }\n        if (pin == NULL || len == 0) {\n            DEBUG(SSSDBG_CRIT_FAILURE, \"Missing PIN.\\n\");\n            return EINVAL;\n        }\n\n        buf = talloc_size(mem_ctx, len);\n        if (buf == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_size failed.\\n\");\n            return ENOMEM;\n        }\n\n        safealign_memcpy(buf, pin, len, NULL);\n\n        break;\n    case SSS_AUTHTOK_TYPE_SC_KEYPAD:\n        /* Nothing to send */\n        len = 0;\n        buf = NULL;\n        break;\n    default:\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Unsupported authtok type [%d].\\n\",\n                                   sss_authtok_get_type(pd->authtok));\n        return EINVAL;\n    }\n\n    *_len = len;\n    *_buf = buf;\n\n    return EOK;\n}\n\nstatic errno_t parse_p11_child_response(TALLOC_CTX *mem_ctx, uint8_t *buf,\n                                        ssize_t buf_len,\n                                        struct sss_certmap_ctx *sss_certmap_ctx,\n                                        struct cert_auth_info **_cert_list)\n{\n    int ret;\n    TALLOC_CTX *tmp_ctx = NULL;\n    uint8_t *p;\n    uint8_t *pn;\n    struct cert_auth_info *cert_list = NULL;\n    struct cert_auth_info *cert_auth_info;\n    unsigned char *der = NULL;\n    size_t der_size;\n\n    if (buf_len < 0) {\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"Error occurred while reading data from p11_child.\\n\");\n        return EIO;\n    }\n\n    if (buf_len == 0) {\n        DEBUG(SSSDBG_TRACE_LIBS, \"No certificate found.\\n\");\n        ret = EOK;\n        goto done;\n    }\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_new failed.\\n\");\n        return ENOMEM;\n    }\n\n    p = buf;\n\n    do {\n        cert_auth_info = talloc_zero(tmp_ctx, struct cert_auth_info);\n        if (cert_auth_info == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_zero failed.\\n\");\n            return ENOMEM;\n        }\n\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            return EINVAL;\n        }\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing counter in p11_child response.\\n\");\n            return EINVAL;\n        }\n\n        cert_auth_info->token_name = talloc_strndup(cert_auth_info, (char *)p,\n                                                    (pn - p));\n        if (cert_auth_info->token_name == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found token name [%s].\\n\",\n              cert_auth_info->token_name);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing module name in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->module_name = talloc_strndup(cert_auth_info, (char *)p,\n                                                     (pn - p));\n        if (cert_auth_info->module_name == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found module name [%s].\\n\",\n              cert_auth_info->module_name);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing key id in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->key_id = talloc_strndup(cert_auth_info, (char *)p,\n                                                (pn - p));\n        if (cert_auth_info->key_id == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found key id [%s].\\n\", cert_auth_info->key_id);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing label in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->label = talloc_strndup(cert_auth_info, (char *) p,\n                                               (pn - p));\n        if (cert_auth_info->label == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found label [%s].\\n\", cert_auth_info->label);\n\n        p = ++pn;\n        pn = memchr(p, '\\n', buf_len - (p - buf));\n        if (pn == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"Missing new-line in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        if (pn == p) {\n            DEBUG(SSSDBG_OP_FAILURE, \"Missing cert in p11_child response.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n        cert_auth_info->cert = talloc_strndup(cert_auth_info, (char *)p,\n                                              (pn - p));\n        if (cert_auth_info->cert == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_strndup failed.\\n\");\n            ret = ENOMEM;\n            goto done;\n        }\n        DEBUG(SSSDBG_TRACE_ALL, \"Found cert [%s].\\n\", cert_auth_info->cert);\n\n        der = sss_base64_decode(tmp_ctx, cert_auth_info->cert, &der_size);\n        if (der == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_base64_decode failed.\\n\");\n            ret = EIO;\n            goto done;\n        }\n\n        ret = sss_certmap_match_cert(sss_certmap_ctx, der, der_size);\n        if (ret == 0) {\n            DLIST_ADD(cert_list, cert_auth_info);\n        } else {\n            DEBUG(SSSDBG_TRACE_LIBS,\n                  \"Cert [%s] does not match matching rules and is ignored.\\n\",\n                  cert_auth_info->cert);\n            talloc_free(cert_auth_info);\n        }\n\n        p = ++pn;\n    } while ((pn - buf) < buf_len);\n\n    ret = EOK;\n\ndone:\n    if (ret == EOK) {\n        DLIST_FOR_EACH(cert_auth_info, cert_list) {\n            talloc_steal(mem_ctx, cert_auth_info);\n        }\n\n        *_cert_list = cert_list;\n    }\n\n    talloc_free(tmp_ctx);\n\n    return ret;\n}\n\nstruct pam_check_cert_state {\n    int child_status;\n    struct sss_child_ctx_old *child_ctx;\n    struct tevent_timer *timeout_handler;\n    struct tevent_context *ev;\n    struct sss_certmap_ctx *sss_certmap_ctx;\n\n    struct child_io_fds *io;\n\n    struct cert_auth_info *cert_list;\n};\n\nstatic void p11_child_write_done(struct tevent_req *subreq);\nstatic void p11_child_done(struct tevent_req *subreq);\nstatic void p11_child_timeout(struct tevent_context *ev,\n                              struct tevent_timer *te,\n                              struct timeval tv, void *pvt);\n\nstruct tevent_req *pam_check_cert_send(TALLOC_CTX *mem_ctx,\n                                       struct tevent_context *ev,\n                                       const char *nss_db,\n                                       time_t timeout,\n                                       const char *verify_opts,\n                                       struct sss_certmap_ctx *sss_certmap_ctx,\n                                       const char *uri,\n                                       struct pam_data *pd)\n{\n    errno_t ret;\n    struct tevent_req *req;\n    struct tevent_req *subreq;\n    struct pam_check_cert_state *state;\n    pid_t child_pid;\n    struct timeval tv;\n    int pipefd_to_child[2] = PIPE_INIT;\n    int pipefd_from_child[2] = PIPE_INIT;\n    const char *extra_args[16] = { NULL };\n    uint8_t *write_buf = NULL;\n    size_t write_buf_len = 0;\n    size_t arg_c;\n    const char *module_name = NULL;\n    const char *token_name = NULL;\n    const char *key_id = NULL;\n\n    req = tevent_req_create(mem_ctx, &state, struct pam_check_cert_state);\n    if (req == NULL) {\n        return NULL;\n    }\n\n    if (nss_db == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing NSS DB.\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    if (sss_certmap_ctx == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing certificate matching context.\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    /* extra_args are added in revers order */\n    arg_c = 0;\n    if (uri != NULL) {\n        DEBUG(SSSDBG_TRACE_ALL, \"Adding PKCS#11 URI [%s].\\n\", uri);\n        extra_args[arg_c++] = uri;\n        extra_args[arg_c++] = \"--uri\";\n    }\n\n    if ((pd->cli_flags & PAM_CLI_FLAGS_REQUIRE_CERT_AUTH) && pd->priv == 1) {\n        extra_args[arg_c++] = \"--wait_for_card\";\n    }\n    extra_args[arg_c++] = nss_db;\n    extra_args[arg_c++] = \"--nssdb\";\n    if (verify_opts != NULL) {\n        extra_args[arg_c++] = verify_opts;\n        extra_args[arg_c++] = \"--verify\";\n    }\n\n    if (sss_authtok_get_type(pd->authtok) == SSS_AUTHTOK_TYPE_SC_PIN\n            || sss_authtok_get_type(pd->authtok) == SSS_AUTHTOK_TYPE_SC_KEYPAD) {\n        ret = sss_authtok_get_sc(pd->authtok, NULL, NULL, &token_name, NULL,\n                                 &module_name, NULL, &key_id, NULL);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"sss_authtok_get_sc failed.\\n\");\n            goto done;\n        }\n\n        if (module_name != NULL && *module_name != '\\0') {\n            extra_args[arg_c++] = module_name;\n            extra_args[arg_c++] = \"--module_name\";\n        }\n        if (token_name != NULL && *token_name != '\\0') {\n            extra_args[arg_c++] = token_name;\n            extra_args[arg_c++] = \"--token_name\";\n        }\n        if (key_id != NULL && *key_id != '\\0') {\n            extra_args[arg_c++] = key_id;\n            extra_args[arg_c++] = \"--key_id\";\n        }\n    }\n\n    if (pd->cmd == SSS_PAM_AUTHENTICATE) {\n        extra_args[arg_c++] = \"--auth\";\n        switch (sss_authtok_get_type(pd->authtok)) {\n        case SSS_AUTHTOK_TYPE_SC_PIN:\n            extra_args[arg_c++] = \"--pin\";\n            break;\n        case SSS_AUTHTOK_TYPE_SC_KEYPAD:\n            extra_args[arg_c++] = \"--keypad\";\n            break;\n        default:\n            DEBUG(SSSDBG_OP_FAILURE, \"Unsupported authtok type.\\n\");\n            ret = EINVAL;\n            goto done;\n        }\n\n    } else if (pd->cmd == SSS_PAM_PREAUTH) {\n        extra_args[arg_c++] = \"--pre\";\n    } else {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Unexpected PAM command [%d}.\\n\", pd->cmd);\n        ret = EINVAL;\n        goto done;\n    }\n\n    state->ev = ev;\n    state->sss_certmap_ctx = sss_certmap_ctx;\n    state->child_status = EFAULT;\n    state->io = talloc(state, struct child_io_fds);\n    if (state->io == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"talloc failed.\\n\");\n        ret = ENOMEM;\n        goto done;\n    }\n    state->io->write_to_child_fd = -1;\n    state->io->read_from_child_fd = -1;\n    talloc_set_destructor((void *) state->io, child_io_destructor);\n\n    ret = pipe(pipefd_from_child);\n    if (ret == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"pipe failed [%d][%s].\\n\", ret, strerror(ret));\n        goto done;\n    }\n    ret = pipe(pipefd_to_child);\n    if (ret == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"pipe failed [%d][%s].\\n\", ret, strerror(ret));\n        goto done;\n    }\n\n    child_pid = fork();\n    if (child_pid == 0) { /* child */\n        exec_child_ex(state, pipefd_to_child, pipefd_from_child,\n                      P11_CHILD_PATH, P11_CHILD_LOG_FILE, extra_args, false,\n                      STDIN_FILENO, STDOUT_FILENO);\n\n        /* We should never get here */\n        DEBUG(SSSDBG_CRIT_FAILURE, \"BUG: Could not exec p11 child\\n\");\n    } else if (child_pid > 0) { /* parent */\n\n        state->io->read_from_child_fd = pipefd_from_child[0];\n        PIPE_FD_CLOSE(pipefd_from_child[1]);\n        sss_fd_nonblocking(state->io->read_from_child_fd);\n\n        state->io->write_to_child_fd = pipefd_to_child[1];\n        PIPE_FD_CLOSE(pipefd_to_child[0]);\n        sss_fd_nonblocking(state->io->write_to_child_fd);\n\n        /* Set up SIGCHLD handler */\n        ret = child_handler_setup(ev, child_pid, NULL, NULL, &state->child_ctx);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE, \"Could not set up child handlers [%d]: %s\\n\",\n                ret, sss_strerror(ret));\n            ret = ERR_P11_CHILD;\n            goto done;\n        }\n\n        /* Set up timeout handler */\n        tv = tevent_timeval_current_ofs(timeout, 0);\n        state->timeout_handler = tevent_add_timer(ev, req, tv,\n                                                  p11_child_timeout, req);\n        if(state->timeout_handler == NULL) {\n            ret = ERR_P11_CHILD;\n            goto done;\n        }\n\n        if (pd->cmd == SSS_PAM_AUTHENTICATE) {\n            ret = get_p11_child_write_buffer(state, pd, &write_buf,\n                                             &write_buf_len);\n            if (ret != EOK) {\n                DEBUG(SSSDBG_OP_FAILURE,\n                      \"get_p11_child_write_buffer failed.\\n\");\n                goto done;\n            }\n        }\n\n        if (write_buf_len != 0) {\n            subreq = write_pipe_send(state, ev, write_buf, write_buf_len,\n                                     state->io->write_to_child_fd);\n            if (subreq == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"write_pipe_send failed.\\n\");\n                ret = ERR_P11_CHILD;\n                goto done;\n            }\n            tevent_req_set_callback(subreq, p11_child_write_done, req);\n        } else {\n            subreq = read_pipe_send(state, ev, state->io->read_from_child_fd);\n            if (subreq == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"read_pipe_send failed.\\n\");\n                ret = ERR_P11_CHILD;\n                goto done;\n            }\n            tevent_req_set_callback(subreq, p11_child_done, req);\n        }\n\n        /* Now either wait for the timeout to fire or the child\n         * to finish\n         */\n    } else { /* error */\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE, \"fork failed [%d][%s].\\n\",\n                                   ret, sss_strerror(ret));\n        goto done;\n    }\n\n    ret = EOK;\n\ndone:\n    if (ret != EOK) {\n        PIPE_CLOSE(pipefd_from_child);\n        PIPE_CLOSE(pipefd_to_child);\n        tevent_req_error(req, ret);\n        tevent_req_post(req, ev);\n    }\n    return req;\n}\n\nstatic void p11_child_write_done(struct tevent_req *subreq)\n{\n    struct tevent_req *req = tevent_req_callback_data(subreq,\n                                                      struct tevent_req);\n    struct pam_check_cert_state *state = tevent_req_data(req,\n                                                   struct pam_check_cert_state);\n    int ret;\n\n    ret = write_pipe_recv(subreq);\n    talloc_zfree(subreq);\n    if (ret != EOK) {\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    PIPE_FD_CLOSE(state->io->write_to_child_fd);\n\n    subreq = read_pipe_send(state, state->ev, state->io->read_from_child_fd);\n    if (subreq == NULL) {\n        tevent_req_error(req, ENOMEM);\n        return;\n    }\n    tevent_req_set_callback(subreq, p11_child_done, req);\n}\n\nstatic void p11_child_done(struct tevent_req *subreq)\n{\n    uint8_t *buf;\n    ssize_t buf_len;\n    struct tevent_req *req = tevent_req_callback_data(subreq,\n                                                      struct tevent_req);\n    struct pam_check_cert_state *state = tevent_req_data(req,\n                                                   struct pam_check_cert_state);\n    int ret;\n\n    talloc_zfree(state->timeout_handler);\n\n    ret = read_pipe_recv(subreq, state, &buf, &buf_len);\n    talloc_zfree(subreq);\n    if (ret != EOK) {\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    PIPE_FD_CLOSE(state->io->read_from_child_fd);\n\n    ret = parse_p11_child_response(state, buf, buf_len, state->sss_certmap_ctx,\n                                   &state->cert_list);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"parse_p11_child_response failed.\\n\");\n        tevent_req_error(req, ret);\n        return;\n    }\n\n    tevent_req_done(req);\n    return;\n}\n\nstatic void p11_child_timeout(struct tevent_context *ev,\n                              struct tevent_timer *te,\n                              struct timeval tv, void *pvt)\n{\n    struct tevent_req *req = talloc_get_type(pvt, struct tevent_req);\n    struct pam_check_cert_state *state =\n                              tevent_req_data(req, struct pam_check_cert_state);\n\n    DEBUG(SSSDBG_CRIT_FAILURE,\n          \"Timeout reached for p11_child, \"\n          \"consider increasing p11_child_timeout.\\n\");\n    child_handler_destroy(state->child_ctx);\n    state->child_ctx = NULL;\n    state->child_status = ETIMEDOUT;\n    tevent_req_error(req, ERR_P11_CHILD_TIMEOUT);\n}\n\nerrno_t pam_check_cert_recv(struct tevent_req *req, TALLOC_CTX *mem_ctx,\n                            struct cert_auth_info **cert_list)\n{\n    struct cert_auth_info *tmp_cert_auth_info;\n    struct pam_check_cert_state *state =\n                              tevent_req_data(req, struct pam_check_cert_state);\n\n    TEVENT_REQ_RETURN_ON_ERROR(req);\n\n    if (cert_list != NULL) {\n        DLIST_FOR_EACH(tmp_cert_auth_info, state->cert_list) {\n            talloc_steal(mem_ctx, tmp_cert_auth_info);\n        }\n\n        *cert_list = state->cert_list;\n    }\n\n    return EOK;\n}\n\nstatic char *get_cert_prompt(TALLOC_CTX *mem_ctx,\n                             struct cert_auth_info *cert_info)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx = NULL;\n    unsigned char *der = NULL;\n    size_t der_size;\n    char *prompt = NULL;\n    char *filter = NULL;\n    char **domains = NULL;\n\n    ret = sss_certmap_init(mem_ctx, NULL, NULL, &ctx);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_init failed.\\n\");\n        return NULL;\n    }\n\n    ret = sss_certmap_add_rule(ctx, 10, \"KRB5:<ISSUER>.*\",\n                               \"LDAP:{subject_dn!nss}\", NULL);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_add_rule failed.\\n\");\n        goto done;\n    }\n\n    der = sss_base64_decode(mem_ctx, sss_cai_get_cert(cert_info), &der_size);\n    if (der == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_base64_decode failed.\\n\");\n        goto done;\n    }\n\n    ret = sss_certmap_expand_mapping_rule(ctx, der, der_size,\n                                          &filter, &domains);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_expand_mapping_rule failed.\\n\");\n        goto done;\n    }\n\n    prompt = talloc_asprintf(mem_ctx, \"%s\\n%s\", sss_cai_get_label(cert_info),\n                                                filter);\n    if (prompt == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n    }\n\ndone:\n    sss_certmap_free_filter_and_domains(filter, domains);\n    sss_certmap_free_ctx(ctx);\n    talloc_free(der);\n\n    return prompt;\n}\n\nstatic errno_t pack_cert_data(TALLOC_CTX *mem_ctx, const char *sysdb_username,\n                              struct cert_auth_info *cert_info,\n                              const char *nss_name,\n                              uint8_t **_msg, size_t *_msg_len)\n{\n    uint8_t *msg = NULL;\n    size_t msg_len;\n    const char *token_name;\n    const char *module_name;\n    const char *key_id;\n    char *prompt;\n    size_t user_len;\n    size_t token_len;\n    size_t module_len;\n    size_t key_id_len;\n    size_t prompt_len;\n    size_t nss_name_len;\n    const char *username = \"\";\n    const char *nss_username = \"\";\n\n    if (sysdb_username != NULL) {\n        username = sysdb_username;\n    }\n\n    if (nss_name != NULL) {\n        nss_username = nss_name;\n    }\n\n    prompt = get_cert_prompt(mem_ctx, cert_info);\n    if (prompt == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"get_cert_prompt failed.\\n\");\n        return EIO;\n    }\n\n    token_name = sss_cai_get_token_name(cert_info);\n    module_name = sss_cai_get_module_name(cert_info);\n    key_id = sss_cai_get_key_id(cert_info);\n\n    user_len = strlen(username) + 1;\n    token_len = strlen(token_name) + 1;\n    module_len = strlen(module_name) + 1;\n    key_id_len = strlen(key_id) + 1;\n    prompt_len = strlen(prompt) + 1;\n    nss_name_len = strlen(nss_username) +1;\n\n    msg_len = user_len + token_len + module_len + key_id_len + prompt_len\n                       + nss_name_len;\n\n    msg = talloc_zero_size(mem_ctx, msg_len);\n    if (msg == NULL) {\n        talloc_free(prompt);\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_zero_size failed.\\n\");\n        return ENOMEM;\n    }\n\n    memcpy(msg, username, user_len);\n    memcpy(msg + user_len, token_name, token_len);\n    memcpy(msg + user_len + token_len, module_name, module_len);\n    memcpy(msg + user_len + token_len + module_len, key_id, key_id_len);\n    memcpy(msg + user_len + token_len + module_len + key_id_len,\n           prompt, prompt_len);\n    memcpy(msg + user_len + token_len + module_len + key_id_len + prompt_len,\n           nss_username, nss_name_len);\n    talloc_free(prompt);\n\n    if (_msg != NULL) {\n        *_msg = msg;\n    }\n\n    if (_msg_len != NULL) {\n        *_msg_len = msg_len;\n    }\n\n    return EOK;\n}\n\n/* The PKCS11_LOGIN_TOKEN_NAME environment variable is e.g. used by the Gnome\n * Settings Daemon to determine the name of the token used for login but it\n * should be only set if SSSD is called by gdm-smartcard. Otherwise desktop\n * components might assume that gdm-smartcard PAM stack is configured\n * correctly which might not be the case e.g. if Smartcard authentication was\n * used when running gdm-password. */\n#define PKCS11_LOGIN_TOKEN_ENV_NAME \"PKCS11_LOGIN_TOKEN_NAME\"\n\nerrno_t add_pam_cert_response(struct pam_data *pd, struct sss_domain_info *dom,\n                              const char *sysdb_username,\n                              struct cert_auth_info *cert_info,\n                              enum response_type type)\n{\n    uint8_t *msg = NULL;\n    char *env = NULL;\n    size_t msg_len;\n    int ret;\n    char *short_name = NULL;\n    char *domain_name = NULL;\n    const char *cert_info_name = sysdb_username;\n    struct sss_domain_info *user_dom;\n    char *nss_name = NULL;\n\n\n    if (type != SSS_PAM_CERT_INFO && type != SSS_PAM_CERT_INFO_WITH_HINT) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Invalid response type [%d].\\n\", type);\n        return EINVAL;\n    }\n\n    if ((type == SSS_PAM_CERT_INFO && sysdb_username == NULL)\n            || cert_info == NULL\n            || sss_cai_get_token_name(cert_info) == NULL\n            || sss_cai_get_module_name(cert_info) == NULL\n            || sss_cai_get_key_id(cert_info) == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"Missing mandatory user or slot name.\\n\");\n        return EINVAL;\n    }\n\n    /* sysdb_username is a fully-qualified name which is used by pam_sss when\n     * prompting the user for the PIN and as login name if it wasn't set by\n     * the PAM caller but has to be determined based on the inserted\n     * Smartcard. If this type of name is irritating at the PIN prompt or the\n     * re_expression config option was set in a way that user@domain cannot be\n     * handled anymore some more logic has to be added here. But for the time\n     * being I think using sysdb_username is fine.\n     * As special case is the files provider which handles local users which\n     * by definition only have a short name. To avoid confusion by other\n     * modules on the PAM stack the short name is returned in this case. */\n\n    if (sysdb_username != NULL) {\n        ret = sss_parse_internal_fqname(pd, sysdb_username,\n                                        &short_name, &domain_name);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_CRIT_FAILURE, \"Unable to parse name '%s' [%d]: %s, \"\n                                       \"using full name.\\n\",\n                                        sysdb_username, ret, sss_strerror(ret));\n        } else {\n            if (domain_name != NULL) {\n                user_dom = find_domain_by_name(dom, domain_name, false);\n\n                if (user_dom != NULL) {\n                    ret = sss_output_fqname(short_name, user_dom,\n                                            sysdb_username, false, &nss_name);\n                    if (ret != EOK) {\n                        nss_name = NULL;\n                    }\n                }\n            }\n\n        }\n    }\n\n    ret = pack_cert_data(pd, cert_info_name, cert_info,\n                         nss_name != NULL ? nss_name : sysdb_username,\n                         &msg, &msg_len);\n    talloc_free(short_name);\n    talloc_free(domain_name);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE, \"pack_cert_data failed.\\n\");\n        return ret;\n    }\n\n    ret = pam_add_response(pd, type, msg_len, msg);\n    talloc_free(msg);\n    if (ret != EOK) {\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"pam_add_response failed to add certificate info.\\n\");\n        return ret;\n    }\n\n    if (strcmp(pd->service, \"gdm-smartcard\") == 0) {\n        env = talloc_asprintf(pd, \"%s=%s\", PKCS11_LOGIN_TOKEN_ENV_NAME,\n                              sss_cai_get_token_name(cert_info));\n        if (env == NULL) {\n            DEBUG(SSSDBG_OP_FAILURE, \"talloc_asprintf failed.\\n\");\n            return ENOMEM;\n        }\n\n        ret = pam_add_response(pd, SSS_PAM_ENV_ITEM, strlen(env) + 1,\n                               (uint8_t *)env);\n        talloc_free(env);\n        if (ret != EOK) {\n            DEBUG(SSSDBG_OP_FAILURE,\n                  \"pam_add_response failed to add environment variable.\\n\");\n            return ret;\n        }\n    }\n\n    return ret;\n}\n", "/*\n    SSSD\n\n    certmap - Tests for SSSD's certificate mapping library\n\n    Authors:\n        Sumit Bose <sbose@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <stdarg.h>\n#include <stddef.h>\n#include <setjmp.h>\n#include <cmocka.h>\n#include <popt.h>\n\n#include \"lib/certmap/sss_certmap.h\"\n#include \"lib/certmap/sss_certmap_int.h\"\n\n#include \"util/crypto/sss_crypto.h\"\n\n#include \"tests/cmocka/common_mock.h\"\n#include \"tests/common.h\"\n\n#ifdef HAVE_NSS\n#include \"util/crypto/nss/nss_util.h\"\n#endif\n\n#ifdef HAVE_LIBCRYPTO\n#include <openssl/crypto.h>\n#endif\n\n#ifdef HAVE_TEST_CA\n#include \"tests/test_CA/SSSD_test_cert_x509_0003.h\"\n#include \"tests/test_CA/SSSD_test_cert_x509_0004.h\"\n#else\n#define SSSD_TEST_CERT_0003 \"\"\n#define SSSD_TEST_CERT_0004 \"\"\n#endif\n\nstruct priv_sss_debug {\n    int level;\n};\n\nvoid ext_debug(void *private, const char *file, long line, const char *function,\n               const char *format, ...)\n{\n    va_list ap;\n    struct priv_sss_debug *data = private;\n    int level = SSSDBG_OP_FAILURE;\n\n    if (data != NULL) {\n        level = data->level;\n    }\n\n    if (DEBUG_IS_SET(level)) {\n        va_start(ap, format);\n        sss_vdebug_fn(file, line, function, level, APPEND_LINE_FEED,\n                      format, ap);\n        va_end(ap);\n    }\n}\n\nstatic void test_sss_certmap_init(void **state)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n\n    sss_certmap_free_ctx(ctx);\n}\n\nstatic struct sss_certmap_ctx *setup_prio(const int *l)\n{\n    int ret;\n    size_t c;\n    struct sss_certmap_ctx *ctx;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n\n    for (c = 0; c < 10; c++) {\n        ret = sss_certmap_add_rule(ctx, l[c], NULL, NULL, NULL);\n        assert_int_equal(ret, EOK);\n    }\n\n    return ctx;\n}\n\nstatic void test_sss_certmap_add_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int i;\n    struct priority_list *p;\n    struct priority_list *last;\n    size_t c;\n\n    const int tests_a[][10] = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n                               {9, 8, 7, 6, 5, 4, 3, 2, 1, 0},\n                               {1, 3, 5 ,7, 9, 0, 2, 4, 6, 8},\n                               {0, 2, 4, 6, 8, 1, 3, 5, 7, 9},\n                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n\n    const int tests_b[][10] = {{0, 0, 0, 0, 1, 1, 1, 2, 2, 2},\n                               {2, 2, 2, 1, 1, 1, 0, 0, 0, 0},\n                               {0, 1, 2, 0, 1, 2, 0, 1, 2, 0},\n                               {0, 2, 1, 0, 2, 1, 0, 2, 1, 0},\n                               {0, 1, 2, 0, 2, 1, 0, 0, 1, 2},\n                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n\n    for (c = 0; tests_a[c][0] != 0 || tests_a[c][9] != 0; c++) {\n        ctx = setup_prio(tests_a[0]);\n        assert_non_null(ctx);\n        i = 0;\n        for (p = ctx->prio_list; p != NULL; p = p->next) {\n            assert_int_equal(i, p->priority);\n            assert_non_null(p->rule_list);\n            assert_int_equal(i, p->rule_list->priority);\n            assert_null(p->rule_list->prev);\n            assert_null(p->rule_list->next);\n            i++;\n        }\n\n        i = 9;\n        for (last = ctx->prio_list; last->next != NULL; last = last->next);\n        for (p = last; p != NULL; p = p->prev) {\n            assert_int_equal(i, p->priority);\n            assert_int_equal(i, p->rule_list->priority);\n            i--;\n        }\n\n        sss_certmap_free_ctx(ctx);\n    }\n    for (c = 0; tests_b[c][0] != 0 || tests_b[c][9] != 0; c++) {\n        ctx = setup_prio(tests_b[0]);\n        assert_non_null(ctx);\n        i = 0;\n        for (p = ctx->prio_list; p != NULL; p = p->next) {\n            assert_int_equal(i, p->priority);\n            assert_non_null(p->rule_list);\n            assert_int_equal(i, p->rule_list->priority);\n            assert_null(p->rule_list->prev);\n            assert_non_null(p->rule_list->next);\n            assert_ptr_equal(p->rule_list, p->rule_list->next->prev);\n            assert_non_null(p->rule_list->next->next);\n            assert_ptr_equal(p->rule_list->next,\n                             p->rule_list->next->next->prev);\n            if (i == 0) {\n                assert_non_null(p->rule_list->next->next->next);\n                assert_ptr_equal(p->rule_list->next->next,\n                                 p->rule_list->next->next->next->prev);\n                assert_null(p->rule_list->next->next->next->next);\n            } else {\n                assert_null(p->rule_list->next->next->next);\n            }\n            i++;\n        }\n        sss_certmap_free_ctx(ctx);\n    }\n}\n\nstatic void test_sss_certmap_add_matching_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"fsdf\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"FDSF:fsdf\", NULL, NULL);\n    assert_int_equal(ret, ESRCH);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<rgerge>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<rgerge>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<ISSUER>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SUBJECT>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>ddqwdq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<KU>digitalSignature,dddq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>dwqwqw\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>.\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>.1.2.3\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>1.2.3.\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<EKU>1.a.3\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:fwfwef>\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:rfc822Name\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    /* invalid base64 input */\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:ediPartyName>...\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    /* invalid OID input */\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:.>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:.1>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:1.>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<SAN:11>dqq\", NULL, NULL);\n    assert_int_equal(ret, EINVAL);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"&&<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:||<ISSUER>a\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_or);\n    assert_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<ISSUER>a<SUBJECT>b\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"b\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"a\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1000,\n                               \"KRB5:<ISSUER>a<SUBJECT>b<ISSUER>c<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n\n    ret = sss_certmap_add_rule(ctx, 99,\n                               \"KRB5:<ISSUER>a<SUBJECT>b\"\n                               \"<KU>dataEncipherment,cRLSign<ISSUER>c\"\n                               \"<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->ku);\n    assert_int_equal(SSS_KU_CRL_SIGN|SSS_KU_DATA_ENCIPHERMENT,\n               ctx->prio_list->rule_list->parsed_match_rule->ku->ku);\n\n    ret = sss_certmap_add_rule(ctx, 98,\n                               \"KRB5:<ISSUER>a<SUBJECT>b\"\n                               \"<KU>dataEncipherment,cRLSign<ISSUER>c\"\n                               \"<EKU>clientAuth,emailProtection\"\n                               \"<SUBJECT>d\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->subject);\n    assert_string_equal(\"d\",\n                    ctx->prio_list->rule_list->parsed_match_rule->subject->val);\n    assert_string_equal(\"b\",\n              ctx->prio_list->rule_list->parsed_match_rule->subject->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->issuer);\n    assert_string_equal(\"c\",\n                     ctx->prio_list->rule_list->parsed_match_rule->issuer->val);\n    assert_string_equal(\"a\",\n               ctx->prio_list->rule_list->parsed_match_rule->issuer->next->val);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->ku);\n    assert_int_equal(SSS_KU_CRL_SIGN|SSS_KU_DATA_ENCIPHERMENT,\n               ctx->prio_list->rule_list->parsed_match_rule->ku->ku);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[2]);\n\n    ret = sss_certmap_add_rule(ctx, 97,\n                               \"KRB5:<EKU>clientAuth,1.2.3,emailProtection\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_true(string_in_list(\"1.2.3\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[3]);\n\n    ret = sss_certmap_add_rule(ctx, 96,\n                               \"KRB5:<EKU>1.2.3\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->eku);\n    assert_true(string_in_list(\"1.2.3\",\n              discard_const(\n               ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list),\n              true));\n    assert_null(\n            ctx->prio_list->rule_list->parsed_match_rule->eku->eku_oid_list[1]);\n\n    /* SAN tests */\n    ret = sss_certmap_add_rule(ctx, 89, \"KRB5:<SAN>abc\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_PRINCIPAL);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"abc\");\n\n    ret = sss_certmap_add_rule(ctx, 88, \"KRB5:<SAN:dnsName>def\", NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_DNS_NAME);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"def\");\n\n    ret = sss_certmap_add_rule(ctx, 87, \"KRB5:<SAN:x400Address>aGlq\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_X400_ADDRESS);\n    assert_int_equal(\n                 ctx->prio_list->rule_list->parsed_match_rule->san->bin_val_len,\n                 3);\n    assert_memory_equal(\n                     ctx->prio_list->rule_list->parsed_match_rule->san->bin_val,\n                     \"hij\", 3);\n\n    ret = sss_certmap_add_rule(ctx, 86, \"KRB5:<SAN:1.2.3.4>klm\",\n                               NULL, NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->r,\n                     relation_and);\n    assert_non_null(ctx->prio_list->rule_list->parsed_match_rule->san);\n    assert_int_equal(ctx->prio_list->rule_list->parsed_match_rule->san->san_opt,\n                     SAN_STRING_OTHER_NAME);\n    assert_string_equal(ctx->prio_list->rule_list->parsed_match_rule->san->val,\n                        \"klm\");\n    assert_string_equal(\"1.2.3.4\",\n         ctx->prio_list->rule_list->parsed_match_rule->san->str_other_name_oid);\n\n    talloc_free(ctx);\n}\n\nstatic void test_check_ad_attr_name(void **state)\n{\n    char *res;\n\n    res = check_ad_attr_name(NULL, NULL);\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"dsddqwdas\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"dsddq=wdas\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"CN=abc\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"O=xyz\");\n    assert_null(res);\n\n    res = check_ad_attr_name(NULL, \"ST=def\");\n    assert_non_null(res);\n    assert_string_equal(res, \"S=def\");\n    talloc_free(res);\n}\n\nconst uint8_t test_cert_der[] = {\n0x30, 0x82, 0x04, 0x09, 0x30, 0x82, 0x02, 0xf1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x09,\n0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,\n0x34, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x09, 0x49, 0x50, 0x41, 0x2e,\n0x44, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x15,\n0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68,\n0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x35, 0x30, 0x34, 0x32, 0x38, 0x31,\n0x30, 0x32, 0x31, 0x31, 0x31, 0x5a, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x34, 0x32, 0x38, 0x31, 0x30,\n0x32, 0x31, 0x31, 0x31, 0x5a, 0x30, 0x32, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a,\n0x0c, 0x09, 0x49, 0x50, 0x41, 0x2e, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x1c, 0x30, 0x1a, 0x06,\n0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x69, 0x70, 0x61, 0x2d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2e,\n0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06,\n0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f,\n0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb2, 0x32, 0x92, 0xab, 0x47, 0xb8,\n0x0c, 0x13, 0x54, 0x4a, 0x1f, 0x1e, 0x29, 0x06, 0xff, 0xd0, 0x50, 0xcb, 0xf7, 0x5f, 0x79, 0x91,\n0x65, 0xb1, 0x39, 0x01, 0x83, 0x6a, 0xad, 0x9e, 0x77, 0x3b, 0xf3, 0x0d, 0xd7, 0xb9, 0xf6, 0xdc,\n0x9e, 0x4a, 0x49, 0xa7, 0xd0, 0x66, 0x72, 0xcc, 0xbf, 0x77, 0xd6, 0xde, 0xa9, 0xfe, 0x67, 0x96,\n0xcc, 0x49, 0xf1, 0x37, 0x23, 0x2e, 0xc4, 0x50, 0xf4, 0xeb, 0xba, 0x62, 0xd4, 0x23, 0x4d, 0xf3,\n0x37, 0x38, 0x82, 0xee, 0x3b, 0x3f, 0x2c, 0xd0, 0x80, 0x9b, 0x17, 0xaa, 0x9b, 0xeb, 0xa6, 0xdd,\n0xf6, 0x15, 0xff, 0x06, 0xb2, 0xce, 0xff, 0xdf, 0x8a, 0x9e, 0x95, 0x85, 0x49, 0x1f, 0x84, 0xfd,\n0x81, 0x26, 0xce, 0x06, 0x32, 0x0d, 0x36, 0xca, 0x7c, 0x15, 0x81, 0x68, 0x6b, 0x8f, 0x3e, 0xb3,\n0xa2, 0xfc, 0xae, 0xaf, 0xc2, 0x44, 0x58, 0x15, 0x95, 0x40, 0xfc, 0x56, 0x19, 0x91, 0x80, 0xed,\n0x42, 0x11, 0x66, 0x04, 0xef, 0x3c, 0xe0, 0x76, 0x33, 0x4b, 0x83, 0xfa, 0x7e, 0xb4, 0x47, 0xdc,\n0xfb, 0xed, 0x46, 0xa5, 0x8d, 0x0a, 0x66, 0x87, 0xa5, 0xef, 0x7b, 0x74, 0x62, 0xac, 0xbe, 0x73,\n0x36, 0xc9, 0xb4, 0xfe, 0x20, 0xc4, 0x81, 0xf3, 0xfe, 0x78, 0x19, 0xa8, 0xd0, 0xaf, 0x7f, 0x81,\n0x72, 0x24, 0x61, 0xd9, 0x76, 0x93, 0xe3, 0x0b, 0xd2, 0x4f, 0x19, 0x17, 0x33, 0x57, 0xd4, 0x82,\n0xb0, 0xf1, 0xa8, 0x03, 0xf6, 0x01, 0x99, 0xa9, 0xb8, 0x8c, 0x83, 0xc9, 0xba, 0x19, 0x87, 0xea,\n0xd6, 0x3b, 0x06, 0xeb, 0x4c, 0xf7, 0xf1, 0xe5, 0x28, 0xa9, 0x10, 0xb6, 0x46, 0xde, 0xe1, 0xe1,\n0x3f, 0xc1, 0xcc, 0x72, 0xbe, 0x2a, 0x43, 0xc6, 0xf6, 0xd0, 0xb5, 0xa0, 0xc4, 0x24, 0x6e, 0x4f,\n0xbd, 0xec, 0x22, 0x8a, 0x07, 0x11, 0x3d, 0xf9, 0xd3, 0x15, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3,\n0x82, 0x01, 0x26, 0x30, 0x82, 0x01, 0x22, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,\n0x30, 0x16, 0x80, 0x14, 0xf2, 0x9d, 0x42, 0x4e, 0x0f, 0xc4, 0x48, 0x25, 0x58, 0x2f, 0x1c, 0xce,\n0x0f, 0xa1, 0x3f, 0x22, 0xc8, 0x55, 0xc8, 0x91, 0x30, 0x3b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x01, 0x01, 0x04, 0x2f, 0x30, 0x2d, 0x30, 0x2b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x30, 0x01, 0x86, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x70, 0x61,\n0x2d, 0x63, 0x61, 0x2e, 0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x61,\n0x2f, 0x6f, 0x63, 0x73, 0x70, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04,\n0x04, 0x03, 0x02, 0x04, 0xf0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14,\n0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,\n0x05, 0x07, 0x03, 0x02, 0x30, 0x74, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x6d, 0x30, 0x6b, 0x30,\n0x69, 0xa0, 0x31, 0xa0, 0x2f, 0x86, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x70,\n0x61, 0x2d, 0x63, 0x61, 0x2e, 0x69, 0x70, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x69,\n0x70, 0x61, 0x2f, 0x63, 0x72, 0x6c, 0x2f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x52, 0x4c,\n0x2e, 0x62, 0x69, 0x6e, 0xa2, 0x34, 0xa4, 0x32, 0x30, 0x30, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03,\n0x55, 0x04, 0x0a, 0x0c, 0x05, 0x69, 0x70, 0x61, 0x63, 0x61, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03,\n0x55, 0x04, 0x03, 0x0c, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,\n0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\n0x0e, 0x04, 0x16, 0x04, 0x14, 0x2d, 0x2b, 0x3f, 0xcb, 0xf5, 0xb2, 0xff, 0x32, 0x2c, 0xa8, 0xc2,\n0x1c, 0xdd, 0xbd, 0x8c, 0x80, 0x1e, 0xdd, 0x31, 0x82, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,\n0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x9a, 0x47, 0x2e,\n0x50, 0xa7, 0x4d, 0x1d, 0x53, 0x0f, 0xc9, 0x71, 0x42, 0x0c, 0xe5, 0xda, 0x7d, 0x49, 0x64, 0xe7,\n0xab, 0xc8, 0xdf, 0xdf, 0x02, 0xc1, 0x87, 0xd1, 0x5b, 0xde, 0xda, 0x6f, 0x2b, 0xe4, 0xf0, 0xbe,\n0xba, 0x09, 0xdf, 0x02, 0x85, 0x0b, 0x8a, 0xe6, 0x9b, 0x06, 0x7d, 0x69, 0x38, 0x6c, 0x72, 0xff,\n0x4c, 0x7b, 0x2a, 0x0d, 0x3f, 0x23, 0x2f, 0x16, 0x46, 0xff, 0x05, 0x93, 0xb0, 0xea, 0x24, 0x28,\n0xd7, 0x12, 0xa1, 0x57, 0xb8, 0x59, 0x19, 0x25, 0xf3, 0x43, 0x0a, 0xd3, 0xfd, 0x0f, 0x37, 0x8d,\n0xb8, 0xca, 0x15, 0xe7, 0x48, 0x8a, 0xa0, 0xc7, 0xc7, 0x4b, 0x7f, 0x01, 0x3c, 0x58, 0xd7, 0x37,\n0xe5, 0xff, 0x7d, 0x2b, 0x01, 0xac, 0x0d, 0x9f, 0x51, 0x6a, 0xe5, 0x40, 0x24, 0xe6, 0x5e, 0x55,\n0x0d, 0xf7, 0xb8, 0x2f, 0x42, 0xac, 0x6d, 0xe5, 0x29, 0x6b, 0xc6, 0x0b, 0xa4, 0xbf, 0x19, 0xbd,\n0x39, 0x27, 0xee, 0xfe, 0xc5, 0xb3, 0xdb, 0x62, 0xd4, 0xbe, 0xd2, 0x47, 0xba, 0x96, 0x30, 0x5a,\n0xfd, 0x62, 0x00, 0xb8, 0x27, 0x5d, 0x2f, 0x3a, 0x94, 0x0b, 0x95, 0x35, 0x85, 0x40, 0x2c, 0xbc,\n0x67, 0xdf, 0x8a, 0xf9, 0xf1, 0x7b, 0x19, 0x96, 0x3e, 0x42, 0x48, 0x13, 0x23, 0x04, 0x95, 0xa9,\n0x6b, 0x11, 0x33, 0x81, 0x47, 0x5a, 0x83, 0x72, 0xf6, 0x20, 0xfa, 0x8e, 0x41, 0x7b, 0x8f, 0x77,\n0x47, 0x7c, 0xc7, 0x5d, 0x46, 0xf4, 0x4f, 0xfd, 0x81, 0x0a, 0xae, 0x39, 0x27, 0xb6, 0x6a, 0x26,\n0x63, 0xb1, 0xd3, 0xbf, 0x55, 0x83, 0x82, 0x9b, 0x36, 0x6c, 0x33, 0x64, 0x0f, 0x50, 0xc0, 0x55,\n0x94, 0x13, 0xc3, 0x85, 0xf4, 0xd5, 0x71, 0x65, 0xd0, 0xc0, 0xdd, 0xfc, 0xe6, 0xec, 0x9c, 0x5b,\n0xf0, 0x11, 0xb5, 0x2c, 0xf3, 0x48, 0xc1, 0x36, 0x8c, 0xa2, 0x96, 0x48, 0x84};\n\nconst uint8_t test_cert2_der[] = {\n0x30, 0x82, 0x06, 0x98, 0x30, 0x82, 0x05, 0x80, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0a, 0x61,\n0x22, 0x88, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa6, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,\n0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x45, 0x31, 0x15, 0x30, 0x13, 0x06, 0x0a,\n0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x05, 0x64, 0x65, 0x76, 0x65,\n0x6c, 0x31, 0x12, 0x30, 0x10, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01,\n0x19, 0x16, 0x02, 0x61, 0x64, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0f,\n0x61, 0x64, 0x2d, 0x41, 0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2d, 0x43, 0x41, 0x30,\n0x1e, 0x17, 0x0d, 0x31, 0x36, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x35, 0x31, 0x31, 0x31, 0x5a,\n0x17, 0x0d, 0x31, 0x37, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x35, 0x31, 0x31, 0x31, 0x5a, 0x30,\n0x70, 0x31, 0x15, 0x30, 0x13, 0x06, 0x0a, 0x09, 0x92, 0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01,\n0x19, 0x16, 0x05, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x30, 0x10, 0x06, 0x0a, 0x09, 0x92,\n0x26, 0x89, 0x93, 0xf2, 0x2c, 0x64, 0x01, 0x19, 0x16, 0x02, 0x61, 0x64, 0x31, 0x0e, 0x30, 0x0c,\n0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x31, 0x0c, 0x30, 0x0a,\n0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x74, 0x20, 0x75, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09,\n0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x16, 0x74, 0x65, 0x73, 0x74, 0x2e,\n0x75, 0x73, 0x65, 0x72, 0x40, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,\n0x6e, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,\n0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01,\n0x01, 0x00, 0x9c, 0xcf, 0x36, 0x99, 0xde, 0x63, 0x74, 0x2b, 0x77, 0x25, 0x9e, 0x24, 0xd9, 0x77,\n0x4b, 0x5f, 0x98, 0xc0, 0x8c, 0xd7, 0x20, 0x91, 0xc0, 0x1c, 0xe8, 0x37, 0x45, 0xbf, 0x3c, 0xd9,\n0x33, 0xbd, 0xe9, 0xde, 0xc9, 0x5d, 0xd4, 0xcd, 0x06, 0x0a, 0x0d, 0xd4, 0xf1, 0x7c, 0x74, 0x5b,\n0x29, 0xd5, 0x66, 0x9c, 0x2c, 0x9f, 0x6b, 0x1a, 0x0f, 0x0d, 0xe6, 0x6c, 0x62, 0xa5, 0x41, 0x4f,\n0xc3, 0xa4, 0x88, 0x27, 0x11, 0x5d, 0xb7, 0xb1, 0xfb, 0xf8, 0x8d, 0xee, 0x43, 0x8d, 0x93, 0xb5,\n0x8c, 0xb4, 0x34, 0x06, 0xf5, 0xe9, 0x2f, 0x5a, 0x26, 0x68, 0xd7, 0x43, 0x60, 0x82, 0x5e, 0x22,\n0xa7, 0xc6, 0x34, 0x40, 0x19, 0xa5, 0x8e, 0xf0, 0x58, 0x9f, 0x16, 0x2d, 0x43, 0x3f, 0x0c, 0xda,\n0xe2, 0x23, 0xf6, 0x09, 0x2a, 0x5e, 0xbd, 0x84, 0x27, 0xc8, 0xab, 0xd5, 0x70, 0xf8, 0x3d, 0x9c,\n0x14, 0xc2, 0xc2, 0xa2, 0x77, 0xe8, 0x44, 0x73, 0x10, 0x01, 0x34, 0x40, 0x1f, 0xc6, 0x2f, 0xa0,\n0x70, 0xee, 0x2f, 0xd5, 0x4b, 0xbe, 0x4c, 0xc7, 0x45, 0xf7, 0xac, 0x9c, 0xc3, 0x68, 0x5b, 0x1d,\n0x5a, 0x4b, 0x77, 0x65, 0x76, 0xe4, 0xb3, 0x92, 0xf4, 0x84, 0x0a, 0x9e, 0x6a, 0x9c, 0xc9, 0x53,\n0x42, 0x9f, 0x6d, 0xfe, 0xf9, 0xf5, 0xf2, 0x9a, 0x15, 0x50, 0x47, 0xef, 0xf4, 0x06, 0x59, 0xc8,\n0x50, 0x48, 0x4b, 0x46, 0x95, 0x68, 0x25, 0xc5, 0xbd, 0x4f, 0x65, 0x34, 0x00, 0xfc, 0x31, 0x69,\n0xf8, 0x3e, 0xe0, 0x20, 0x83, 0x41, 0x27, 0x0b, 0x5c, 0x46, 0x98, 0x14, 0xf0, 0x07, 0xde, 0x02,\n0x17, 0xb1, 0xd2, 0x9c, 0xbe, 0x1c, 0x0d, 0x56, 0x22, 0x1b, 0x02, 0xfe, 0xda, 0x69, 0xb9, 0xef,\n0x91, 0x37, 0x39, 0x7f, 0x24, 0xda, 0xc4, 0x81, 0x5e, 0x82, 0x31, 0x2f, 0x98, 0x1d, 0xf7, 0x73,\n0x5b, 0x23, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x03, 0x5d, 0x30, 0x82, 0x03, 0x59, 0x30,\n0x3d, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x07, 0x04, 0x30, 0x30, 0x2e,\n0x06, 0x26, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x08, 0x87, 0x85, 0xa1, 0x23, 0x84,\n0xc8, 0xb2, 0x26, 0x83, 0x9d, 0x9d, 0x21, 0x82, 0xd4, 0xa6, 0x1b, 0x86, 0xa3, 0xba, 0x37, 0x81,\n0x10, 0x85, 0x89, 0xd5, 0x02, 0xd6, 0x8f, 0x24, 0x02, 0x01, 0x64, 0x02, 0x01, 0x02, 0x30, 0x29,\n0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x22, 0x30, 0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,\n0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x04, 0x06, 0x0a, 0x2b,\n0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x0a, 0x03, 0x04, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f,\n0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x35, 0x06, 0x09, 0x2b, 0x06, 0x01,\n0x04, 0x01, 0x82, 0x37, 0x15, 0x0a, 0x04, 0x28, 0x30, 0x26, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06,\n0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,\n0x03, 0x04, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x0a, 0x03, 0x04,\n0x30, 0x81, 0x94, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x0f, 0x04, 0x81,\n0x86, 0x30, 0x81, 0x83, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01,\n0x2a, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x2d, 0x30, 0x0b,\n0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x16, 0x30, 0x0b, 0x06, 0x09, 0x60,\n0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x01, 0x19, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,\n0x65, 0x03, 0x04, 0x01, 0x02, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,\n0x01, 0x05, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x03, 0x07, 0x30, 0x07,\n0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x07, 0x30, 0x0e, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7,\n0x0d, 0x03, 0x02, 0x02, 0x02, 0x00, 0x80, 0x30, 0x0e, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7,\n0x0d, 0x03, 0x04, 0x02, 0x02, 0x02, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,\n0x04, 0x14, 0x49, 0xac, 0xad, 0xe0, 0x65, 0x30, 0xc4, 0xce, 0xa0, 0x09, 0x03, 0x5b, 0xad, 0x4a,\n0x7b, 0x49, 0x5e, 0xc9, 0x6c, 0xb4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,\n0x16, 0x80, 0x14, 0x62, 0x50, 0xb6, 0x8d, 0xa1, 0xe6, 0x2d, 0x91, 0xbf, 0xb0, 0x54, 0x4d, 0x8f,\n0xa8, 0xca, 0x10, 0xae, 0xb8, 0xdd, 0x54, 0x30, 0x81, 0xcc, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04,\n0x81, 0xc4, 0x30, 0x81, 0xc1, 0x30, 0x81, 0xbe, 0xa0, 0x81, 0xbb, 0xa0, 0x81, 0xb8, 0x86, 0x81,\n0xb5, 0x6c, 0x64, 0x61, 0x70, 0x3a, 0x2f, 0x2f, 0x2f, 0x43, 0x4e, 0x3d, 0x61, 0x64, 0x2d, 0x41,\n0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x2d, 0x43, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x61,\n0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x44, 0x50, 0x2c,\n0x43, 0x4e, 0x3d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x25, 0x32, 0x30, 0x4b, 0x65, 0x79, 0x25,\n0x32, 0x30, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x53, 0x65,\n0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,\n0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x44, 0x43, 0x3d, 0x61, 0x64, 0x2c, 0x44, 0x43,\n0x3d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x3f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,\n0x3f, 0x62, 0x61, 0x73, 0x65, 0x3f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,\n0x73, 0x3d, 0x63, 0x52, 0x4c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,\n0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x30, 0x81, 0xbe, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,\n0x07, 0x01, 0x01, 0x04, 0x81, 0xb1, 0x30, 0x81, 0xae, 0x30, 0x81, 0xab, 0x06, 0x08, 0x2b, 0x06,\n0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x81, 0x9e, 0x6c, 0x64, 0x61, 0x70, 0x3a, 0x2f, 0x2f,\n0x2f, 0x43, 0x4e, 0x3d, 0x61, 0x64, 0x2d, 0x41, 0x44, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,\n0x2d, 0x43, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x41, 0x49, 0x41, 0x2c, 0x43, 0x4e, 0x3d, 0x50, 0x75,\n0x62, 0x6c, 0x69, 0x63, 0x25, 0x32, 0x30, 0x4b, 0x65, 0x79, 0x25, 0x32, 0x30, 0x53, 0x65, 0x72,\n0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,\n0x73, 0x2c, 0x43, 0x4e, 0x3d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,\n0x6f, 0x6e, 0x2c, 0x44, 0x43, 0x3d, 0x61, 0x64, 0x2c, 0x44, 0x43, 0x3d, 0x64, 0x65, 0x76, 0x65,\n0x6c, 0x3f, 0x63, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3f,\n0x62, 0x61, 0x73, 0x65, 0x3f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,\n0x3d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,\n0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x3f, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x38,\n0x30, 0x36, 0xa0, 0x1c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x14, 0x02, 0x03,\n0xa0, 0x0e, 0x0c, 0x0c, 0x74, 0x75, 0x31, 0x40, 0x61, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c,\n0x81, 0x16, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x40, 0x65, 0x6d, 0x61, 0x69,\n0x6c, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,\n0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x41, 0x45, 0x0a, 0x6d,\n0xbb, 0x7f, 0x5c, 0x07, 0x0c, 0xc9, 0xb0, 0x39, 0x55, 0x6d, 0x7c, 0xb5, 0x02, 0xcd, 0xe8, 0xb2,\n0xe5, 0x02, 0x94, 0x77, 0x60, 0xdb, 0xd1, 0xaf, 0x1d, 0xdb, 0x44, 0x5f, 0xce, 0x83, 0xdb, 0x80,\n0x2e, 0xe2, 0xb2, 0x08, 0x25, 0x82, 0x14, 0xcb, 0x48, 0x95, 0x20, 0x13, 0x6c, 0xa9, 0xaa, 0xf8,\n0x31, 0x56, 0xed, 0xc0, 0x3b, 0xd4, 0xae, 0x2e, 0xe3, 0x8f, 0x05, 0xfc, 0xab, 0x5f, 0x2a, 0x69,\n0x23, 0xbc, 0xb8, 0x8c, 0xec, 0x2d, 0xa9, 0x0b, 0x86, 0x95, 0x73, 0x73, 0xdb, 0x17, 0xce, 0xc6,\n0xae, 0xc5, 0xb4, 0xc1, 0x25, 0x87, 0x3b, 0x67, 0x43, 0x9e, 0x87, 0x5a, 0xe6, 0xb9, 0xa0, 0x28,\n0x12, 0x3d, 0xa8, 0x2e, 0xd7, 0x5e, 0xef, 0x65, 0x2d, 0xe6, 0xa5, 0x67, 0x84, 0xac, 0xfd, 0x31,\n0xc1, 0x78, 0xd8, 0x72, 0x51, 0xa2, 0x88, 0x55, 0x0f, 0x97, 0x47, 0x93, 0x07, 0xea, 0x8a, 0x53,\n0x27, 0x4e, 0x34, 0x54, 0x34, 0x1f, 0xa0, 0x6a, 0x03, 0x44, 0xfb, 0x23, 0x61, 0x8e, 0x87, 0x8e,\n0x3c, 0xd0, 0x8f, 0xae, 0xe4, 0xcf, 0xee, 0x65, 0xa8, 0xba, 0x96, 0x68, 0x08, 0x1c, 0x60, 0xe2,\n0x4e, 0x11, 0xa3, 0x74, 0xb8, 0xa5, 0x4e, 0xea, 0x6a, 0x82, 0x4c, 0xc2, 0x4d, 0x63, 0x8e, 0x9f,\n0x7c, 0x2f, 0xa8, 0xc0, 0x62, 0xf8, 0xf7, 0xd9, 0x25, 0xc4, 0x91, 0xab, 0x4d, 0x6a, 0x44, 0xaf,\n0x75, 0x93, 0x53, 0x03, 0xa4, 0x99, 0xc8, 0xcd, 0x91, 0x89, 0x60, 0x75, 0x30, 0x99, 0x76, 0x05,\n0x5a, 0xa0, 0x03, 0xa7, 0xa1, 0x2c, 0x03, 0x04, 0x8f, 0xd4, 0x5a, 0x31, 0x52, 0x28, 0x5a, 0xe6,\n0xa2, 0xd3, 0x43, 0x21, 0x5b, 0xdc, 0xa2, 0x1d, 0x55, 0xa9, 0x48, 0xc5, 0xc4, 0xaa, 0xf3, 0x8b,\n0xe6, 0x3e, 0x75, 0x96, 0xe4, 0x3e, 0x64, 0xaf, 0xe8, 0xa7, 0x6a, 0xb6};\n\n/* used to test SAN principal encoding according to RFC4556 */\nconst uint8_t test_cert3_der[] = {\n0x30, 0x82, 0x03, 0x70, 0x30, 0x82, 0x02, 0x58, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00,\n0xe5, 0x8f, 0x16, 0xfe, 0x23, 0x4d, 0xc5, 0xd6, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,\n0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55,\n0x04, 0x03, 0x0c, 0x0f, 0x6b, 0x72, 0x62, 0x35, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x5f, 0x74,\n0x65, 0x73, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x37, 0x31, 0x32, 0x30, 0x39, 0x32,\n0x34, 0x31, 0x38, 0x5a, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x34, 0x30, 0x37, 0x30, 0x39, 0x32, 0x34,\n0x31, 0x38, 0x5a, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f,\n0x6b, 0x72, 0x62, 0x35, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x30,\n0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,\n0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,\n0xbf, 0x84, 0x34, 0x46, 0x37, 0x50, 0xb1, 0xca, 0x14, 0x4c, 0x6b, 0x0d, 0xe4, 0xab, 0xc1, 0xce,\n0xf4, 0xd1, 0xde, 0xca, 0xf5, 0x50, 0x46, 0x3c, 0x63, 0x0f, 0x8e, 0xb8, 0xe9, 0xf9, 0x3e, 0xc4,\n0xf3, 0x24, 0xc1, 0xe4, 0x78, 0xf6, 0xa4, 0x39, 0x6f, 0xc1, 0xd8, 0x9c, 0x1c, 0xa7, 0x47, 0xe4,\n0xc8, 0x71, 0x32, 0x9a, 0x1d, 0x1d, 0xfb, 0x30, 0x0f, 0xf9, 0x85, 0x48, 0xf8, 0x1f, 0xa7, 0xbd,\n0xda, 0x39, 0xd4, 0xc7, 0x27, 0x4f, 0xf5, 0x34, 0xee, 0x4a, 0x59, 0x0c, 0x7a, 0xec, 0x2b, 0xaf,\n0x81, 0x8e, 0x41, 0x54, 0x6f, 0xcc, 0x91, 0x61, 0x4c, 0x61, 0x80, 0xca, 0x37, 0xab, 0x2c, 0x63,\n0x8d, 0xce, 0x07, 0xcd, 0x61, 0x11, 0x10, 0xa0, 0xe4, 0x08, 0x7d, 0x1d, 0x10, 0x85, 0xb1, 0x64,\n0x33, 0x6b, 0x4d, 0x8d, 0xd2, 0x9d, 0xd7, 0x0b, 0x21, 0xbc, 0x15, 0xcd, 0xed, 0xaa, 0xc0, 0x01,\n0x67, 0xe1, 0x7c, 0xd4, 0xf7, 0xdd, 0xf8, 0x28, 0x92, 0xce, 0x8b, 0x7f, 0x08, 0x29, 0x76, 0x6e,\n0xa5, 0xe6, 0xcd, 0xeb, 0x9c, 0x13, 0x78, 0xa3, 0x08, 0xb5, 0xdc, 0x7f, 0xc2, 0x60, 0xc3, 0xac,\n0x68, 0x30, 0x37, 0xe1, 0x54, 0x6a, 0xa9, 0x34, 0x3e, 0x43, 0x8d, 0x6f, 0x9b, 0xe5, 0x8a, 0xf9,\n0xa4, 0x22, 0xab, 0x33, 0x01, 0x32, 0xaf, 0xc4, 0x9f, 0xb1, 0x27, 0xba, 0xae, 0x20, 0x60, 0xd7,\n0x16, 0x48, 0x66, 0x2b, 0x36, 0x9c, 0x54, 0xd0, 0x6e, 0x45, 0xd3, 0x23, 0x3f, 0x17, 0x2e, 0xee,\n0xd4, 0x55, 0xa7, 0x75, 0x2f, 0x28, 0xa9, 0x40, 0x3b, 0xbc, 0x79, 0x69, 0xea, 0x58, 0xc2, 0x3c,\n0x4c, 0x70, 0x4b, 0x93, 0xd8, 0xa4, 0xb6, 0x59, 0x24, 0x77, 0x10, 0xb3, 0xc7, 0x34, 0x99, 0x6b,\n0x28, 0xbd, 0x03, 0xdb, 0xda, 0xea, 0x23, 0x19, 0x10, 0x56, 0x7e, 0xa4, 0x28, 0x04, 0x5a, 0x53,\n0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xb8, 0x30, 0x81, 0xb5, 0x30, 0x09, 0x06, 0x03, 0x55,\n0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\n0x02, 0x03, 0xa8, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x0b, 0x30, 0x09, 0x06, 0x07,\n0x2b, 0x06, 0x01, 0x05, 0x02, 0x03, 0x04, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,\n0x04, 0x14, 0xea, 0xd4, 0x30, 0xd7, 0x7d, 0x3b, 0xc7, 0xb4, 0x83, 0x53, 0x2c, 0xa5, 0xb9, 0xd8,\n0x1a, 0x47, 0x6b, 0xb5, 0xe5, 0x9d, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,\n0x16, 0x80, 0x14, 0xea, 0xd4, 0x30, 0xd7, 0x7d, 0x3b, 0xc7, 0xb4, 0x83, 0x53, 0x2c, 0xa5, 0xb9,\n0xd8, 0x1a, 0x47, 0x6b, 0xb5, 0xe5, 0x9d, 0x30, 0x47, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x40,\n0x30, 0x3e, 0xa0, 0x3c, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05, 0x02, 0x02, 0xa0, 0x32, 0x30, 0x30,\n0xa0, 0x0b, 0x1b, 0x09, 0x53, 0x53, 0x53, 0x44, 0x2e, 0x54, 0x45, 0x53, 0x54, 0xa1, 0x21, 0x30,\n0x1f, 0xa0, 0x03, 0x02, 0x01, 0x01, 0xa1, 0x18, 0x30, 0x16, 0x1b, 0x04, 0x74, 0x65, 0x73, 0x74,\n0x1b, 0x05, 0x63, 0x6f, 0x6d, 0x70, 0x32, 0x1b, 0x07, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,\n0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,\n0x82, 0x01, 0x01, 0x00, 0x08, 0x64, 0x63, 0x89, 0x6d, 0x3d, 0x66, 0x77, 0xe3, 0xb6, 0x40, 0x54,\n0xd7, 0xe2, 0xc5, 0x99, 0xac, 0x98, 0x6e, 0xf8, 0xcd, 0x62, 0xa4, 0xf8, 0xd9, 0xaf, 0xdb, 0xef,\n0xb7, 0x10, 0x8e, 0x45, 0x42, 0x53, 0x5c, 0x3f, 0x6a, 0x8d, 0xa8, 0x8a, 0x6d, 0x76, 0x51, 0x1a,\n0xf4, 0x71, 0x54, 0x27, 0x27, 0xe2, 0x45, 0xe8, 0xa8, 0xd2, 0xa9, 0xcd, 0x62, 0x0d, 0xfc, 0x0d,\n0x28, 0x46, 0x9e, 0x4e, 0x5a, 0x57, 0x72, 0xb4, 0xf2, 0x35, 0x91, 0x57, 0x11, 0xae, 0x2b, 0x9c,\n0x6a, 0x80, 0x21, 0x8e, 0x4c, 0x19, 0x4a, 0x2d, 0xe0, 0xd2, 0xdf, 0x83, 0x9d, 0x65, 0x49, 0xd1,\n0x34, 0x34, 0x14, 0xa0, 0xbb, 0x1c, 0xa8, 0x12, 0xb0, 0xe3, 0x5e, 0x82, 0x36, 0x41, 0x4c, 0x87,\n0xd1, 0x1e, 0x1a, 0xe9, 0xff, 0x55, 0xef, 0xb5, 0x2d, 0x20, 0xc5, 0xa7, 0xe5, 0x5a, 0xf2, 0xfc,\n0xf7, 0xd2, 0x21, 0xc5, 0x32, 0xb4, 0x07, 0x8f, 0xc4, 0x94, 0x56, 0xa6, 0x21, 0x6a, 0xb6, 0x26,\n0x05, 0x48, 0x90, 0xe0, 0x6b, 0x22, 0x35, 0x00, 0x51, 0x2e, 0xd7, 0xe8, 0x3a, 0x56, 0xa8, 0x70,\n0x7d, 0x0f, 0x9a, 0x97, 0x5a, 0xb8, 0x7f, 0x33, 0xc1, 0xe0, 0x92, 0x0f, 0xb3, 0xfe, 0x36, 0xe6,\n0x8b, 0x97, 0x58, 0x42, 0x49, 0xcb, 0x74, 0xde, 0x19, 0x59, 0x90, 0xb6, 0x36, 0x38, 0x07, 0x48,\n0x5d, 0x5b, 0xab, 0x08, 0xf0, 0x69, 0x22, 0x42, 0x08, 0x29, 0xfe, 0x43, 0xab, 0x83, 0x73, 0x74,\n0x5a, 0x3f, 0x3b, 0x5d, 0x8e, 0xca, 0x6f, 0x2d, 0xad, 0xa1, 0x6e, 0x80, 0x80, 0xd2, 0xc8, 0x16,\n0xb7, 0x67, 0x1a, 0x2d, 0x37, 0x8c, 0x20, 0x3b, 0x15, 0xef, 0xb2, 0x94, 0x86, 0x5c, 0xaf, 0xa2,\n0x61, 0x8b, 0xc7, 0xc1, 0xe4, 0xbe, 0x60, 0x5a, 0x86, 0x5c, 0x86, 0xba, 0x59, 0x97, 0x83, 0x1b,\n0x79, 0x1c, 0x7c, 0x26};\n\nvoid test_sss_cert_get_content(void **state)\n{\n    int ret;\n    struct sss_cert_content *content;\n\n    ret = sss_cert_get_content(NULL, test_cert_der, sizeof(test_cert_der),\n                               &content);\n    assert_int_equal(ret , 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str, \"CN=Certificate Authority,O=IPA.DEVEL\");\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str, \"CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_NON_REPUDIATION\n                                            |SSS_KU_KEY_ENCIPHERMENT\n                                            |SSS_KU_DATA_ENCIPHERMENT);\n    assert_non_null(content->extended_key_usage_oids);\n    assert_non_null(content->extended_key_usage_oids[0]);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.1\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_null(content->extended_key_usage_oids[2]);\n    assert_int_equal(content->cert_der_size, sizeof(test_cert_der));\n    assert_memory_equal(content->cert_der, test_cert_der, sizeof(test_cert_der));\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=IPA.DEVEL\");\n    assert_string_equal(content->issuer_rdn_list[1], \"CN=Certificate Authority\");\n    assert_null(content->issuer_rdn_list[2]);\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->subject_rdn_list[0], \"O=IPA.DEVEL\");\n    assert_string_equal(content->subject_rdn_list[1], \"CN=ipa-devel.ipa.devel\");\n    assert_null(content->subject_rdn_list[2]);\n\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_2(void **state)\n{\n    int ret;\n    struct sss_cert_content *content;\n    struct san_list *i;\n\n    ret = sss_cert_get_content(NULL, test_cert2_der, sizeof(test_cert2_der),\n                               &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=ad-AD-SERVER-CA,DC=ad,DC=devel\");\n    assert_non_null(content->subject_str);\n#if 0\nFIXME:\n    assert_string_equal(content->subject_str,\n      \"E=test.user@email.domain,CN=t u,CN=Users,DC=ad,DC=devel,DC=ad,DC=devel\");\n      //\"CN=t u/emailAddress=test.user@email.domain,DC=ad,DC=devel\");\n#endif\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_KEY_ENCIPHERMENT);\n    assert_non_null(content->extended_key_usage_oids);\n    assert_non_null(content->extended_key_usage_oids[0]);\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.2\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_true(string_in_list(\"1.3.6.1.5.5.7.3.4\",\n                discard_const(content->extended_key_usage_oids), true));\n    /* Can use Microsoft Encrypted File System OID */\n    assert_true(string_in_list(\"1.3.6.1.4.1.311.10.3.4\",\n                discard_const(content->extended_key_usage_oids), true));\n    assert_null(content->extended_key_usage_oids[3]);\n    assert_int_equal(content->cert_der_size, sizeof(test_cert2_der));\n    assert_memory_equal(content->cert_der, test_cert2_der,\n                        sizeof(test_cert2_der));\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"DC=devel\");\n    assert_string_equal(content->issuer_rdn_list[1], \"DC=ad\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=ad-AD-SERVER-CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->subject_rdn_list[0], \"DC=devel\");\n    assert_string_equal(content->subject_rdn_list[1], \"DC=ad\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=Users\");\n    assert_string_equal(content->subject_rdn_list[3], \"CN=t u\");\n    assert_string_equal(content->subject_rdn_list[4],\n                                                    \"E=test.user@email.domain\");\n    assert_null(content->subject_rdn_list[5]);\n\n    assert_non_null(content->san_list);\n\n    DLIST_FOR_EACH(i, content->san_list) {\n        switch (i->san_opt) {\n        case SAN_RFC822_NAME:\n            assert_string_equal(i->val, \"test.user@email.domain\");\n            assert_string_equal(i->short_name, \"test.user\");\n            break;\n        case SAN_STRING_OTHER_NAME:\n            assert_string_equal(i->other_name_oid, \"1.3.6.1.4.1.311.20.2.3\");\n            assert_int_equal(i->bin_val_len, 14);\n            assert_memory_equal(i->bin_val, \"\\f\\ftu1@ad.devel\", 14);\n            break;\n        case SAN_NT:\n        case SAN_PRINCIPAL:\n            assert_string_equal(i->val, \"tu1@ad.devel\");\n            assert_string_equal(i->short_name, \"tu1\");\n            break;\n        default:\n            assert_true(false);\n        }\n    }\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_test_cert_0003(void **state)\n{\n    int ret;\n    uint8_t *der;\n    size_t der_size;\n    struct sss_cert_content *content;\n\n    der = sss_base64_decode(NULL, SSSD_TEST_CERT_0003, &der_size);\n    assert_non_null(der);\n\n    ret = sss_cert_get_content(NULL, der, der_size, &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=SSSD test CA,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=SSSD test CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str,\n                        \"CN=SSSD test cert 0003,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=SSSD test cert 0003\");\n    assert_null(content->subject_rdn_list[3]);\n\n    assert_int_equal(content->key_usage, SSS_KU_DIGITAL_SIGNATURE\n                                            |SSS_KU_KEY_ENCIPHERMENT);\n\n    assert_non_null(content->extended_key_usage_oids);\n    assert_null(content->extended_key_usage_oids[0]);\n\n    assert_null(content->san_list);\n\n    talloc_free(content);\n}\n\nvoid test_sss_cert_get_content_test_cert_0004(void **state)\n{\n    int ret;\n    uint8_t *der;\n    size_t der_size;\n    struct sss_cert_content *content;\n\n    der = sss_base64_decode(NULL, SSSD_TEST_CERT_0004, &der_size);\n    assert_non_null(der);\n\n    ret = sss_cert_get_content(NULL, der, der_size, &content);\n    assert_int_equal(ret, 0);\n    assert_non_null(content);\n    assert_non_null(content->issuer_str);\n    assert_string_equal(content->issuer_str,\n                        \"CN=SSSD test CA,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->issuer_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->issuer_rdn_list[2], \"CN=SSSD test CA\");\n    assert_null(content->issuer_rdn_list[3]);\n\n    assert_non_null(content->subject_str);\n    assert_string_equal(content->subject_str,\n                        \"CN=SSSD test cert 0004,OU=SSSD test,O=SSSD\");\n\n    assert_non_null(content->subject_rdn_list);\n    assert_string_equal(content->issuer_rdn_list[0], \"O=SSSD\");\n    assert_string_equal(content->issuer_rdn_list[1], \"OU=SSSD test\");\n    assert_string_equal(content->subject_rdn_list[2], \"CN=SSSD test cert 0004\");\n    assert_null(content->subject_rdn_list[3]);\n\n    assert_int_equal(content->key_usage, UINT32_MAX);\n\n    assert_non_null(content->extended_key_usage_oids);\n    assert_null(content->extended_key_usage_oids[0]);\n\n    assert_null(content->san_list);\n\n    talloc_free(content);\n}\n\nstatic void test_sss_certmap_match_cert(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n    size_t c;\n\n    struct match_tests {\n        const char *rule;\n        int result;\n    } match_tests[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>digitalSignature,nonRepudiation\", 0},\n        {\"KRB5:<KU>digitalSignature,cRLSign\", ENOENT},\n        {\"KRB5:<EKU>clientAuth\", 0},\n        {\"KRB5:<EKU>clientAuth,OCSPSigning\", ENOENT},\n        {\"KRB5:<EKU>clientAuth,serverAuth\", 0},\n        {NULL, 0}\n    };\n\n    struct match_tests match_tests_2[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>keyEncipherment\", 0},\n        {\"KRB5:<KU>digitalSignature,keyEncipherment\", 0},\n        {\"KRB5:<KU>digitalSignature,keyEncipherment,cRLSign\", ENOENT},\n        {\"KRB5:<EKU>clientAuth\", 0},\n        {\"KRB5:<EKU>clientAuth,1.3.6.1.4.1.311.10.3.4\", 0},\n        {\"KRB5:<EKU>clientAuth,1.3.6.1.4.1.311.10.3.41\", ENOENT},\n        {\"KRB5:<SAN>tu1\", 0},\n        {\"KRB5:<SAN:Principal>tu1\", 0},\n        {\"KRB5:<SAN:ntPrincipalName>tu1\", 0},\n        {\"KRB5:<SAN:pkinitSAN>tu1\", ENOENT},\n        {\"KRB5:<SAN:Principal>^tu1@ad.devel$\", 0},\n        {\"KRB5:<SAN:rfc822Name>tu\", ENOENT},\n        {\"KRB5:<SAN:rfc822Name>test.user\", 0},\n        {\"KRB5:<SAN:rfc822Name>test.user<SAN>tu1\", 0},\n        {\"KRB5:||<SAN:rfc822Name>test.user<SAN>tu1\", 0},\n        {\"KRB5:&&<SAN:rfc822Name>tu1<SAN>tu1\", ENOENT},\n        {\"KRB5:||<SAN:rfc822Name>tu1<SAN>tu1\", 0},\n        {\"KRB5:<SAN:otherName>MTIz\", ENOENT}, /* 123 */\n        {\"KRB5:<SAN:otherName>DAx0dTFAYWQuZGV2ZWw=\", 0}, /* \"\\f\\ftu1@ad.devel\" */\n        {\"KRB5:<SAN:otherName>DAx0dTFAYWQuZGV2ZWx4\", ENOENT}, /* \"\\f\\ftu1@ad.develx\" */\n        {\"KRB5:<SAN:otherName>dHUxQGFkLmRldmVs\", 0}, /* \"tu1@ad.devel\" */\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>test\", ENOENT},\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>tu1@ad\", 0},\n        /* Fails because the NT principal SAN starts with binary values */\n        {\"KRB5:<SAN:1.3.6.1.4.1.311.20.2.3>^tu1@ad.devel$\", ENOENT},\n        {NULL, 0}\n    };\n\n    struct match_tests match_tests_3[] = {\n        {\"KRB5:<KU>digitalSignature\", 0},\n        {\"KRB5:<KU>keyEncipherment\", 0},\n        {\"KRB5:<KU>keyAgreement\", 0},\n        {\"KRB5:<KU>digitalSignature,keyAgreement,keyEncipherment\", 0},\n        {\"KRB5:<SAN:Principal>test\", 0},\n        {\"KRB5:<SAN:ntPrincipal>test\", ENOENT},\n        {\"KRB5:<SAN:Principal>comp2\", 0},\n        {\"KRB5:<SAN:Principal>another\", 0},\n        {\"KRB5:<SAN:Principal>test/comp2/another@SSSD.TEST\", 0},\n        {\"KRB5:<SAN:Principal>^test/comp2/another@SSSD.TEST$\", 0},\n        {\"KRB5:<SAN:pkinitSAN>^test/comp2/another@SSSD.TEST$\", 0},\n        {NULL, 0}\n    };\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, \"KRB5:<ISSUER>xyz<SUBJECT>xyz\",\n                               NULL, NULL);\n    assert_int_equal(ret, EOK);\n\n    ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                 sizeof(test_cert_der));\n    assert_int_equal(ret, ENOENT);\n\n    ret = sss_certmap_add_rule(ctx, 1,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            NULL, NULL);\n    assert_int_equal(ret, EOK);\n\n    ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                 sizeof(test_cert_der));\n    assert_int_equal(ret, 0);\n\n    sss_certmap_free_ctx(ctx);\n\n    for (c = 0; match_tests[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert_der),\n                                     sizeof(test_cert_der));\n        assert_int_equal(ret, match_tests[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n\n    for (c = 0; match_tests_2[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        print_error(\"Checking matching rule [%s]\\n\", match_tests_2[c].rule);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests_2[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert2_der),\n                                     sizeof(test_cert2_der));\n        assert_int_equal(ret, match_tests_2[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n\n    for (c = 0; match_tests_3[c].rule != NULL; c++) {\n        ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n        assert_int_equal(ret, EOK);\n        assert_non_null(ctx);\n        assert_null(ctx->prio_list);\n\n        print_error(\"Checking matching rule [%s]\\n\", match_tests_3[c].rule);\n\n        ret = sss_certmap_add_rule(ctx, 1, match_tests_3[c].rule, NULL, NULL);\n        assert_int_equal(ret, EOK);\n\n        ret = sss_certmap_match_cert(ctx, discard_const(test_cert3_der),\n                                     sizeof(test_cert3_der));\n        assert_int_equal(ret, match_tests_3[c].result);\n\n        sss_certmap_free_ctx(ctx);\n    }\n}\n\nstatic void test_sss_certmap_add_mapping_rule(void **state)\n{\n    struct sss_certmap_ctx *ctx;\n    int ret;\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"FWEAWEF:fwefwe\", NULL);\n    assert_int_equal(ret, ESRCH);\n\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:abc\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_string,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"abc\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:abc{issuer_dn}\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_string,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"abc\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_template,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"issuer_dn\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"{issuer_dn}a:b{{c}}\", NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_template,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"issuer_dn\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_string,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"a:b{c}\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_add_rule(ctx, 1, NULL, \"LDAP:{issuer_dn}{subject_dn}\",\n                               NULL);\n    assert_int_equal(ret, 0);\n    assert_non_null(ctx->prio_list);\n    assert_non_null(ctx->prio_list->rule_list);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule);\n    assert_non_null(ctx->prio_list->rule_list->parsed_mapping_rule->list);\n    assert_int_equal(comp_template,\n                    ctx->prio_list->rule_list->parsed_mapping_rule->list->type);\n    assert_string_equal(\"issuer_dn\",\n                     ctx->prio_list->rule_list->parsed_mapping_rule->list->val);\n    assert_int_equal(comp_template,\n              ctx->prio_list->rule_list->parsed_mapping_rule->list->next->type);\n    assert_string_equal(\"subject_dn\",\n               ctx->prio_list->rule_list->parsed_mapping_rule->list->next->val);\n    talloc_free(ctx);\n}\n\n#define TEST_CERT_BIN \\\n            \"\\\\30\\\\82\\\\04\\\\09\\\\30\\\\82\\\\02\\\\f1\\\\a0\\\\03\\\\02\\\\01\\\\02\\\\02\\\\01\\\\09\" \\\n            \"\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\0b\\\\05\\\\00\\\\30\" \\\n            \"\\\\34\\\\31\\\\12\\\\30\\\\10\\\\06\\\\03\\\\55\\\\04\\\\0a\\\\0c\\\\09\\\\49\\\\50\\\\41\\\\2e\" \\\n            \"\\\\44\\\\45\\\\56\\\\45\\\\4c\\\\31\\\\1e\\\\30\\\\1c\\\\06\\\\03\\\\55\\\\04\\\\03\\\\0c\\\\15\" \\\n            \"\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\\\\20\\\\41\\\\75\\\\74\\\\68\" \\\n            \"\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\1e\\\\17\\\\0d\\\\31\\\\35\\\\30\\\\34\\\\32\\\\38\\\\31\" \\\n            \"\\\\30\\\\32\\\\31\\\\31\\\\31\\\\5a\\\\17\\\\0d\\\\31\\\\37\\\\30\\\\34\\\\32\\\\38\\\\31\\\\30\" \\\n            \"\\\\32\\\\31\\\\31\\\\31\\\\5a\\\\30\\\\32\\\\31\\\\12\\\\30\\\\10\\\\06\\\\03\\\\55\\\\04\\\\0a\" \\\n            \"\\\\0c\\\\09\\\\49\\\\50\\\\41\\\\2e\\\\44\\\\45\\\\56\\\\45\\\\4c\\\\31\\\\1c\\\\30\\\\1a\\\\06\" \\\n            \"\\\\03\\\\55\\\\04\\\\03\\\\0c\\\\13\\\\69\\\\70\\\\61\\\\2d\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2e\" \\\n            \"\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\30\\\\82\\\\01\\\\22\\\\30\\\\0d\\\\06\" \\\n            \"\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\01\\\\05\\\\00\\\\03\\\\82\\\\01\\\\0f\" \\\n            \"\\\\00\\\\30\\\\82\\\\01\\\\0a\\\\02\\\\82\\\\01\\\\01\\\\00\\\\b2\\\\32\\\\92\\\\ab\\\\47\\\\b8\" \\\n            \"\\\\0c\\\\13\\\\54\\\\4a\\\\1f\\\\1e\\\\29\\\\06\\\\ff\\\\d0\\\\50\\\\cb\\\\f7\\\\5f\\\\79\\\\91\" \\\n            \"\\\\65\\\\b1\\\\39\\\\01\\\\83\\\\6a\\\\ad\\\\9e\\\\77\\\\3b\\\\f3\\\\0d\\\\d7\\\\b9\\\\f6\\\\dc\" \\\n            \"\\\\9e\\\\4a\\\\49\\\\a7\\\\d0\\\\66\\\\72\\\\cc\\\\bf\\\\77\\\\d6\\\\de\\\\a9\\\\fe\\\\67\\\\96\" \\\n            \"\\\\cc\\\\49\\\\f1\\\\37\\\\23\\\\2e\\\\c4\\\\50\\\\f4\\\\eb\\\\ba\\\\62\\\\d4\\\\23\\\\4d\\\\f3\" \\\n            \"\\\\37\\\\38\\\\82\\\\ee\\\\3b\\\\3f\\\\2c\\\\d0\\\\80\\\\9b\\\\17\\\\aa\\\\9b\\\\eb\\\\a6\\\\dd\" \\\n            \"\\\\f6\\\\15\\\\ff\\\\06\\\\b2\\\\ce\\\\ff\\\\df\\\\8a\\\\9e\\\\95\\\\85\\\\49\\\\1f\\\\84\\\\fd\" \\\n            \"\\\\81\\\\26\\\\ce\\\\06\\\\32\\\\0d\\\\36\\\\ca\\\\7c\\\\15\\\\81\\\\68\\\\6b\\\\8f\\\\3e\\\\b3\" \\\n            \"\\\\a2\\\\fc\\\\ae\\\\af\\\\c2\\\\44\\\\58\\\\15\\\\95\\\\40\\\\fc\\\\56\\\\19\\\\91\\\\80\\\\ed\" \\\n            \"\\\\42\\\\11\\\\66\\\\04\\\\ef\\\\3c\\\\e0\\\\76\\\\33\\\\4b\\\\83\\\\fa\\\\7e\\\\b4\\\\47\\\\dc\" \\\n            \"\\\\fb\\\\ed\\\\46\\\\a5\\\\8d\\\\0a\\\\66\\\\87\\\\a5\\\\ef\\\\7b\\\\74\\\\62\\\\ac\\\\be\\\\73\" \\\n            \"\\\\36\\\\c9\\\\b4\\\\fe\\\\20\\\\c4\\\\81\\\\f3\\\\fe\\\\78\\\\19\\\\a8\\\\d0\\\\af\\\\7f\\\\81\" \\\n            \"\\\\72\\\\24\\\\61\\\\d9\\\\76\\\\93\\\\e3\\\\0b\\\\d2\\\\4f\\\\19\\\\17\\\\33\\\\57\\\\d4\\\\82\" \\\n            \"\\\\b0\\\\f1\\\\a8\\\\03\\\\f6\\\\01\\\\99\\\\a9\\\\b8\\\\8c\\\\83\\\\c9\\\\ba\\\\19\\\\87\\\\ea\" \\\n            \"\\\\d6\\\\3b\\\\06\\\\eb\\\\4c\\\\f7\\\\f1\\\\e5\\\\28\\\\a9\\\\10\\\\b6\\\\46\\\\de\\\\e1\\\\e1\" \\\n            \"\\\\3f\\\\c1\\\\cc\\\\72\\\\be\\\\2a\\\\43\\\\c6\\\\f6\\\\d0\\\\b5\\\\a0\\\\c4\\\\24\\\\6e\\\\4f\" \\\n            \"\\\\bd\\\\ec\\\\22\\\\8a\\\\07\\\\11\\\\3d\\\\f9\\\\d3\\\\15\\\\02\\\\03\\\\01\\\\00\\\\01\\\\a3\" \\\n            \"\\\\82\\\\01\\\\26\\\\30\\\\82\\\\01\\\\22\\\\30\\\\1f\\\\06\\\\03\\\\55\\\\1d\\\\23\\\\04\\\\18\" \\\n            \"\\\\30\\\\16\\\\80\\\\14\\\\f2\\\\9d\\\\42\\\\4e\\\\0f\\\\c4\\\\48\\\\25\\\\58\\\\2f\\\\1c\\\\ce\" \\\n            \"\\\\0f\\\\a1\\\\3f\\\\22\\\\c8\\\\55\\\\c8\\\\91\\\\30\\\\3b\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\01\\\\01\\\\04\\\\2f\\\\30\\\\2d\\\\30\\\\2b\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\30\\\\01\\\\86\\\\1f\\\\68\\\\74\\\\74\\\\70\\\\3a\\\\2f\\\\2f\\\\69\\\\70\\\\61\" \\\n            \"\\\\2d\\\\63\\\\61\\\\2e\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2f\\\\63\\\\61\" \\\n            \"\\\\2f\\\\6f\\\\63\\\\73\\\\70\\\\30\\\\0e\\\\06\\\\03\\\\55\\\\1d\\\\0f\\\\01\\\\01\\\\ff\\\\04\" \\\n            \"\\\\04\\\\03\\\\02\\\\04\\\\f0\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\\\\25\\\\04\\\\16\\\\30\\\\14\" \\\n            \"\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\\\\03\\\\01\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\" \\\n            \"\\\\05\\\\07\\\\03\\\\02\\\\30\\\\74\\\\06\\\\03\\\\55\\\\1d\\\\1f\\\\04\\\\6d\\\\30\\\\6b\\\\30\" \\\n            \"\\\\69\\\\a0\\\\31\\\\a0\\\\2f\\\\86\\\\2d\\\\68\\\\74\\\\74\\\\70\\\\3a\\\\2f\\\\2f\\\\69\\\\70\" \\\n            \"\\\\61\\\\2d\\\\63\\\\61\\\\2e\\\\69\\\\70\\\\61\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\2f\\\\69\" \\\n            \"\\\\70\\\\61\\\\2f\\\\63\\\\72\\\\6c\\\\2f\\\\4d\\\\61\\\\73\\\\74\\\\65\\\\72\\\\43\\\\52\\\\4c\" \\\n            \"\\\\2e\\\\62\\\\69\\\\6e\\\\a2\\\\34\\\\a4\\\\32\\\\30\\\\30\\\\31\\\\0e\\\\30\\\\0c\\\\06\\\\03\" \\\n            \"\\\\55\\\\04\\\\0a\\\\0c\\\\05\\\\69\\\\70\\\\61\\\\63\\\\61\\\\31\\\\1e\\\\30\\\\1c\\\\06\\\\03\" \\\n            \"\\\\55\\\\04\\\\03\\\\0c\\\\15\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\" \\\n            \"\\\\20\\\\41\\\\75\\\\74\\\\68\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\" \\\n            \"\\\\0e\\\\04\\\\16\\\\04\\\\14\\\\2d\\\\2b\\\\3f\\\\cb\\\\f5\\\\b2\\\\ff\\\\32\\\\2c\\\\a8\\\\c2\" \\\n            \"\\\\1c\\\\dd\\\\bd\\\\8c\\\\80\\\\1e\\\\dd\\\\31\\\\82\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\" \\\n            \"\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\0b\\\\05\\\\00\\\\03\\\\82\\\\01\\\\01\\\\00\\\\9a\\\\47\\\\2e\" \\\n            \"\\\\50\\\\a7\\\\4d\\\\1d\\\\53\\\\0f\\\\c9\\\\71\\\\42\\\\0c\\\\e5\\\\da\\\\7d\\\\49\\\\64\\\\e7\" \\\n            \"\\\\ab\\\\c8\\\\df\\\\df\\\\02\\\\c1\\\\87\\\\d1\\\\5b\\\\de\\\\da\\\\6f\\\\2b\\\\e4\\\\f0\\\\be\" \\\n            \"\\\\ba\\\\09\\\\df\\\\02\\\\85\\\\0b\\\\8a\\\\e6\\\\9b\\\\06\\\\7d\\\\69\\\\38\\\\6c\\\\72\\\\ff\" \\\n            \"\\\\4c\\\\7b\\\\2a\\\\0d\\\\3f\\\\23\\\\2f\\\\16\\\\46\\\\ff\\\\05\\\\93\\\\b0\\\\ea\\\\24\\\\28\" \\\n            \"\\\\d7\\\\12\\\\a1\\\\57\\\\b8\\\\59\\\\19\\\\25\\\\f3\\\\43\\\\0a\\\\d3\\\\fd\\\\0f\\\\37\\\\8d\" \\\n            \"\\\\b8\\\\ca\\\\15\\\\e7\\\\48\\\\8a\\\\a0\\\\c7\\\\c7\\\\4b\\\\7f\\\\01\\\\3c\\\\58\\\\d7\\\\37\" \\\n            \"\\\\e5\\\\ff\\\\7d\\\\2b\\\\01\\\\ac\\\\0d\\\\9f\\\\51\\\\6a\\\\e5\\\\40\\\\24\\\\e6\\\\5e\\\\55\" \\\n            \"\\\\0d\\\\f7\\\\b8\\\\2f\\\\42\\\\ac\\\\6d\\\\e5\\\\29\\\\6b\\\\c6\\\\0b\\\\a4\\\\bf\\\\19\\\\bd\" \\\n            \"\\\\39\\\\27\\\\ee\\\\fe\\\\c5\\\\b3\\\\db\\\\62\\\\d4\\\\be\\\\d2\\\\47\\\\ba\\\\96\\\\30\\\\5a\" \\\n            \"\\\\fd\\\\62\\\\00\\\\b8\\\\27\\\\5d\\\\2f\\\\3a\\\\94\\\\0b\\\\95\\\\35\\\\85\\\\40\\\\2c\\\\bc\" \\\n            \"\\\\67\\\\df\\\\8a\\\\f9\\\\f1\\\\7b\\\\19\\\\96\\\\3e\\\\42\\\\48\\\\13\\\\23\\\\04\\\\95\\\\a9\" \\\n            \"\\\\6b\\\\11\\\\33\\\\81\\\\47\\\\5a\\\\83\\\\72\\\\f6\\\\20\\\\fa\\\\8e\\\\41\\\\7b\\\\8f\\\\77\" \\\n            \"\\\\47\\\\7c\\\\c7\\\\5d\\\\46\\\\f4\\\\4f\\\\fd\\\\81\\\\0a\\\\ae\\\\39\\\\27\\\\b6\\\\6a\\\\26\" \\\n            \"\\\\63\\\\b1\\\\d3\\\\bf\\\\55\\\\83\\\\82\\\\9b\\\\36\\\\6c\\\\33\\\\64\\\\0f\\\\50\\\\c0\\\\55\" \\\n            \"\\\\94\\\\13\\\\c3\\\\85\\\\f4\\\\d5\\\\71\\\\65\\\\d0\\\\c0\\\\dd\\\\fc\\\\e6\\\\ec\\\\9c\\\\5b\" \\\n            \"\\\\f0\\\\11\\\\b5\\\\2c\\\\f3\\\\48\\\\c1\\\\36\\\\8c\\\\a2\\\\96\\\\48\\\\84\"\n\n#define TEST_CERT2_BIN \\\n            \"\\\\30\\\\82\\\\06\\\\98\\\\30\\\\82\\\\05\\\\80\\\\a0\\\\03\\\\02\\\\01\\\\02\\\\02\\\\0a\\\\61\" \\\n            \"\\\\22\\\\88\\\\c2\\\\00\\\\00\\\\00\\\\00\\\\02\\\\a6\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\" \\\n            \"\\\\86\\\\f7\\\\0d\\\\01\\\\01\\\\05\\\\05\\\\00\\\\30\\\\45\\\\31\\\\15\\\\30\\\\13\\\\06\\\\0a\" \\\n            \"\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\\\\19\\\\16\\\\05\\\\64\\\\65\\\\76\\\\65\" \\\n            \"\\\\6c\\\\31\\\\12\\\\30\\\\10\\\\06\\\\0a\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\" \\\n            \"\\\\19\\\\16\\\\02\\\\61\\\\64\\\\31\\\\18\\\\30\\\\16\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\0f\" \\\n            \"\\\\61\\\\64\\\\2d\\\\41\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\\\\2d\\\\43\\\\41\\\\30\" \\\n            \"\\\\1e\\\\17\\\\0d\\\\31\\\\36\\\\31\\\\31\\\\31\\\\31\\\\31\\\\33\\\\35\\\\31\\\\31\\\\31\\\\5a\" \\\n            \"\\\\17\\\\0d\\\\31\\\\37\\\\31\\\\31\\\\31\\\\31\\\\31\\\\33\\\\35\\\\31\\\\31\\\\31\\\\5a\\\\30\" \\\n            \"\\\\70\\\\31\\\\15\\\\30\\\\13\\\\06\\\\0a\\\\09\\\\92\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\" \\\n            \"\\\\19\\\\16\\\\05\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\31\\\\12\\\\30\\\\10\\\\06\\\\0a\\\\09\\\\92\" \\\n            \"\\\\26\\\\89\\\\93\\\\f2\\\\2c\\\\64\\\\01\\\\19\\\\16\\\\02\\\\61\\\\64\\\\31\\\\0e\\\\30\\\\0c\" \\\n            \"\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\05\\\\55\\\\73\\\\65\\\\72\\\\73\\\\31\\\\0c\\\\30\\\\0a\" \\\n            \"\\\\06\\\\03\\\\55\\\\04\\\\03\\\\13\\\\03\\\\74\\\\20\\\\75\\\\31\\\\25\\\\30\\\\23\\\\06\\\\09\" \\\n            \"\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\09\\\\01\\\\16\\\\16\\\\74\\\\65\\\\73\\\\74\\\\2e\" \\\n            \"\\\\75\\\\73\\\\65\\\\72\\\\40\\\\65\\\\6d\\\\61\\\\69\\\\6c\\\\2e\\\\64\\\\6f\\\\6d\\\\61\\\\69\" \\\n            \"\\\\6e\\\\30\\\\82\\\\01\\\\22\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\" \\\n            \"\\\\01\\\\01\\\\05\\\\00\\\\03\\\\82\\\\01\\\\0f\\\\00\\\\30\\\\82\\\\01\\\\0a\\\\02\\\\82\\\\01\" \\\n            \"\\\\01\\\\00\\\\9c\\\\cf\\\\36\\\\99\\\\de\\\\63\\\\74\\\\2b\\\\77\\\\25\\\\9e\\\\24\\\\d9\\\\77\" \\\n            \"\\\\4b\\\\5f\\\\98\\\\c0\\\\8c\\\\d7\\\\20\\\\91\\\\c0\\\\1c\\\\e8\\\\37\\\\45\\\\bf\\\\3c\\\\d9\" \\\n            \"\\\\33\\\\bd\\\\e9\\\\de\\\\c9\\\\5d\\\\d4\\\\cd\\\\06\\\\0a\\\\0d\\\\d4\\\\f1\\\\7c\\\\74\\\\5b\" \\\n            \"\\\\29\\\\d5\\\\66\\\\9c\\\\2c\\\\9f\\\\6b\\\\1a\\\\0f\\\\0d\\\\e6\\\\6c\\\\62\\\\a5\\\\41\\\\4f\" \\\n            \"\\\\c3\\\\a4\\\\88\\\\27\\\\11\\\\5d\\\\b7\\\\b1\\\\fb\\\\f8\\\\8d\\\\ee\\\\43\\\\8d\\\\93\\\\b5\" \\\n            \"\\\\8c\\\\b4\\\\34\\\\06\\\\f5\\\\e9\\\\2f\\\\5a\\\\26\\\\68\\\\d7\\\\43\\\\60\\\\82\\\\5e\\\\22\" \\\n            \"\\\\a7\\\\c6\\\\34\\\\40\\\\19\\\\a5\\\\8e\\\\f0\\\\58\\\\9f\\\\16\\\\2d\\\\43\\\\3f\\\\0c\\\\da\" \\\n            \"\\\\e2\\\\23\\\\f6\\\\09\\\\2a\\\\5e\\\\bd\\\\84\\\\27\\\\c8\\\\ab\\\\d5\\\\70\\\\f8\\\\3d\\\\9c\" \\\n            \"\\\\14\\\\c2\\\\c2\\\\a2\\\\77\\\\e8\\\\44\\\\73\\\\10\\\\01\\\\34\\\\40\\\\1f\\\\c6\\\\2f\\\\a0\" \\\n            \"\\\\70\\\\ee\\\\2f\\\\d5\\\\4b\\\\be\\\\4c\\\\c7\\\\45\\\\f7\\\\ac\\\\9c\\\\c3\\\\68\\\\5b\\\\1d\" \\\n            \"\\\\5a\\\\4b\\\\77\\\\65\\\\76\\\\e4\\\\b3\\\\92\\\\f4\\\\84\\\\0a\\\\9e\\\\6a\\\\9c\\\\c9\\\\53\" \\\n            \"\\\\42\\\\9f\\\\6d\\\\fe\\\\f9\\\\f5\\\\f2\\\\9a\\\\15\\\\50\\\\47\\\\ef\\\\f4\\\\06\\\\59\\\\c8\" \\\n            \"\\\\50\\\\48\\\\4b\\\\46\\\\95\\\\68\\\\25\\\\c5\\\\bd\\\\4f\\\\65\\\\34\\\\00\\\\fc\\\\31\\\\69\" \\\n            \"\\\\f8\\\\3e\\\\e0\\\\20\\\\83\\\\41\\\\27\\\\0b\\\\5c\\\\46\\\\98\\\\14\\\\f0\\\\07\\\\de\\\\02\" \\\n            \"\\\\17\\\\b1\\\\d2\\\\9c\\\\be\\\\1c\\\\0d\\\\56\\\\22\\\\1b\\\\02\\\\fe\\\\da\\\\69\\\\b9\\\\ef\" \\\n            \"\\\\91\\\\37\\\\39\\\\7f\\\\24\\\\da\\\\c4\\\\81\\\\5e\\\\82\\\\31\\\\2f\\\\98\\\\1d\\\\f7\\\\73\" \\\n            \"\\\\5b\\\\23\\\\02\\\\03\\\\01\\\\00\\\\01\\\\a3\\\\82\\\\03\\\\5d\\\\30\\\\82\\\\03\\\\59\\\\30\" \\\n            \"\\\\3d\\\\06\\\\09\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\15\\\\07\\\\04\\\\30\\\\30\\\\2e\" \\\n            \"\\\\06\\\\26\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\15\\\\08\\\\87\\\\85\\\\a1\\\\23\\\\84\" \\\n            \"\\\\c8\\\\b2\\\\26\\\\83\\\\9d\\\\9d\\\\21\\\\82\\\\d4\\\\a6\\\\1b\\\\86\\\\a3\\\\ba\\\\37\\\\81\" \\\n            \"\\\\10\\\\85\\\\89\\\\d5\\\\02\\\\d6\\\\8f\\\\24\\\\02\\\\01\\\\64\\\\02\\\\01\\\\02\\\\30\\\\29\" \\\n            \"\\\\06\\\\03\\\\55\\\\1d\\\\25\\\\04\\\\22\\\\30\\\\20\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\" \\\n            \"\\\\07\\\\03\\\\02\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\\\\03\\\\04\\\\06\\\\0a\\\\2b\" \\\n            \"\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\0a\\\\03\\\\04\\\\30\\\\0e\\\\06\\\\03\\\\55\\\\1d\\\\0f\" \\\n            \"\\\\01\\\\01\\\\ff\\\\04\\\\04\\\\03\\\\02\\\\05\\\\a0\\\\30\\\\35\\\\06\\\\09\\\\2b\\\\06\\\\01\" \\\n            \"\\\\04\\\\01\\\\82\\\\37\\\\15\\\\0a\\\\04\\\\28\\\\30\\\\26\\\\30\\\\0a\\\\06\\\\08\\\\2b\\\\06\" \\\n            \"\\\\01\\\\05\\\\05\\\\07\\\\03\\\\02\\\\30\\\\0a\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\\\\07\" \\\n            \"\\\\03\\\\04\\\\30\\\\0c\\\\06\\\\0a\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\0a\\\\03\\\\04\" \\\n            \"\\\\30\\\\81\\\\94\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\01\\\\09\\\\0f\\\\04\\\\81\" \\\n            \"\\\\86\\\\30\\\\81\\\\83\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\" \\\n            \"\\\\2a\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\2d\\\\30\\\\0b\" \\\n            \"\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\16\\\\30\\\\0b\\\\06\\\\09\\\\60\" \\\n            \"\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\\\\01\\\\19\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\" \\\n            \"\\\\65\\\\03\\\\04\\\\01\\\\02\\\\30\\\\0b\\\\06\\\\09\\\\60\\\\86\\\\48\\\\01\\\\65\\\\03\\\\04\" \\\n            \"\\\\01\\\\05\\\\30\\\\0a\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\\\\0d\\\\03\\\\07\\\\30\\\\07\" \\\n            \"\\\\06\\\\05\\\\2b\\\\0e\\\\03\\\\02\\\\07\\\\30\\\\0e\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\" \\\n            \"\\\\0d\\\\03\\\\02\\\\02\\\\02\\\\00\\\\80\\\\30\\\\0e\\\\06\\\\08\\\\2a\\\\86\\\\48\\\\86\\\\f7\" \\\n            \"\\\\0d\\\\03\\\\04\\\\02\\\\02\\\\02\\\\00\\\\30\\\\1d\\\\06\\\\03\\\\55\\\\1d\\\\0e\\\\04\\\\16\" \\\n            \"\\\\04\\\\14\\\\49\\\\ac\\\\ad\\\\e0\\\\65\\\\30\\\\c4\\\\ce\\\\a0\\\\09\\\\03\\\\5b\\\\ad\\\\4a\" \\\n            \"\\\\7b\\\\49\\\\5e\\\\c9\\\\6c\\\\b4\\\\30\\\\1f\\\\06\\\\03\\\\55\\\\1d\\\\23\\\\04\\\\18\\\\30\" \\\n            \"\\\\16\\\\80\\\\14\\\\62\\\\50\\\\b6\\\\8d\\\\a1\\\\e6\\\\2d\\\\91\\\\bf\\\\b0\\\\54\\\\4d\\\\8f\" \\\n            \"\\\\a8\\\\ca\\\\10\\\\ae\\\\b8\\\\dd\\\\54\\\\30\\\\81\\\\cc\\\\06\\\\03\\\\55\\\\1d\\\\1f\\\\04\" \\\n            \"\\\\81\\\\c4\\\\30\\\\81\\\\c1\\\\30\\\\81\\\\be\\\\a0\\\\81\\\\bb\\\\a0\\\\81\\\\b8\\\\86\\\\81\" \\\n            \"\\\\b5\\\\6c\\\\64\\\\61\\\\70\\\\3a\\\\2f\\\\2f\\\\2f\\\\43\\\\4e\\\\3d\\\\61\\\\64\\\\2d\\\\41\" \\\n            \"\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\\\\2d\\\\43\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\61\" \\\n            \"\\\\64\\\\2d\\\\73\\\\65\\\\72\\\\76\\\\65\\\\72\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\44\\\\50\\\\2c\" \\\n            \"\\\\43\\\\4e\\\\3d\\\\50\\\\75\\\\62\\\\6c\\\\69\\\\63\\\\25\\\\32\\\\30\\\\4b\\\\65\\\\79\\\\25\" \\\n            \"\\\\32\\\\30\\\\53\\\\65\\\\72\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\53\\\\65\" \\\n            \"\\\\72\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\6f\\\\6e\\\\66\\\\69\\\\67\" \\\n            \"\\\\75\\\\72\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\2c\\\\44\\\\43\\\\3d\\\\61\\\\64\\\\2c\\\\44\\\\43\" \\\n            \"\\\\3d\\\\64\\\\65\\\\76\\\\65\\\\6c\\\\3f\\\\63\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\" \\\n            \"\\\\74\\\\65\\\\52\\\\65\\\\76\\\\6f\\\\63\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\4c\\\\69\\\\73\\\\74\" \\\n            \"\\\\3f\\\\62\\\\61\\\\73\\\\65\\\\3f\\\\6f\\\\62\\\\6a\\\\65\\\\63\\\\74\\\\43\\\\6c\\\\61\\\\73\" \\\n            \"\\\\73\\\\3d\\\\63\\\\52\\\\4c\\\\44\\\\69\\\\73\\\\74\\\\72\\\\69\\\\62\\\\75\\\\74\\\\69\\\\6f\" \\\n            \"\\\\6e\\\\50\\\\6f\\\\69\\\\6e\\\\74\\\\30\\\\81\\\\be\\\\06\\\\08\\\\2b\\\\06\\\\01\\\\05\\\\05\" \\\n            \"\\\\07\\\\01\\\\01\\\\04\\\\81\\\\b1\\\\30\\\\81\\\\ae\\\\30\\\\81\\\\ab\\\\06\\\\08\\\\2b\\\\06\" \\\n            \"\\\\01\\\\05\\\\05\\\\07\\\\30\\\\02\\\\86\\\\81\\\\9e\\\\6c\\\\64\\\\61\\\\70\\\\3a\\\\2f\\\\2f\" \\\n            \"\\\\2f\\\\43\\\\4e\\\\3d\\\\61\\\\64\\\\2d\\\\41\\\\44\\\\2d\\\\53\\\\45\\\\52\\\\56\\\\45\\\\52\" \\\n            \"\\\\2d\\\\43\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\41\\\\49\\\\41\\\\2c\\\\43\\\\4e\\\\3d\\\\50\\\\75\" \\\n            \"\\\\62\\\\6c\\\\69\\\\63\\\\25\\\\32\\\\30\\\\4b\\\\65\\\\79\\\\25\\\\32\\\\30\\\\53\\\\65\\\\72\" \\\n            \"\\\\76\\\\69\\\\63\\\\65\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\53\\\\65\\\\72\\\\76\\\\69\\\\63\\\\65\" \\\n            \"\\\\73\\\\2c\\\\43\\\\4e\\\\3d\\\\43\\\\6f\\\\6e\\\\66\\\\69\\\\67\\\\75\\\\72\\\\61\\\\74\\\\69\" \\\n            \"\\\\6f\\\\6e\\\\2c\\\\44\\\\43\\\\3d\\\\61\\\\64\\\\2c\\\\44\\\\43\\\\3d\\\\64\\\\65\\\\76\\\\65\" \\\n            \"\\\\6c\\\\3f\\\\63\\\\41\\\\43\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\65\\\\3f\" \\\n            \"\\\\62\\\\61\\\\73\\\\65\\\\3f\\\\6f\\\\62\\\\6a\\\\65\\\\63\\\\74\\\\43\\\\6c\\\\61\\\\73\\\\73\" \\\n            \"\\\\3d\\\\63\\\\65\\\\72\\\\74\\\\69\\\\66\\\\69\\\\63\\\\61\\\\74\\\\69\\\\6f\\\\6e\\\\41\\\\75\" \\\n            \"\\\\74\\\\68\\\\6f\\\\72\\\\69\\\\74\\\\79\\\\30\\\\3f\\\\06\\\\03\\\\55\\\\1d\\\\11\\\\04\\\\38\" \\\n            \"\\\\30\\\\36\\\\a0\\\\1c\\\\06\\\\0a\\\\2b\\\\06\\\\01\\\\04\\\\01\\\\82\\\\37\\\\14\\\\02\\\\03\" \\\n            \"\\\\a0\\\\0e\\\\0c\\\\0c\\\\74\\\\75\\\\31\\\\40\\\\61\\\\64\\\\2e\\\\64\\\\65\\\\76\\\\65\\\\6c\" \\\n            \"\\\\81\\\\16\\\\74\\\\65\\\\73\\\\74\\\\2e\\\\75\\\\73\\\\65\\\\72\\\\40\\\\65\\\\6d\\\\61\\\\69\" \\\n            \"\\\\6c\\\\2e\\\\64\\\\6f\\\\6d\\\\61\\\\69\\\\6e\\\\30\\\\0d\\\\06\\\\09\\\\2a\\\\86\\\\48\\\\86\" \\\n            \"\\\\f7\\\\0d\\\\01\\\\01\\\\05\\\\05\\\\00\\\\03\\\\82\\\\01\\\\01\\\\00\\\\41\\\\45\\\\0a\\\\6d\" \\\n            \"\\\\bb\\\\7f\\\\5c\\\\07\\\\0c\\\\c9\\\\b0\\\\39\\\\55\\\\6d\\\\7c\\\\b5\\\\02\\\\cd\\\\e8\\\\b2\" \\\n            \"\\\\e5\\\\02\\\\94\\\\77\\\\60\\\\db\\\\d1\\\\af\\\\1d\\\\db\\\\44\\\\5f\\\\ce\\\\83\\\\db\\\\80\" \\\n            \"\\\\2e\\\\e2\\\\b2\\\\08\\\\25\\\\82\\\\14\\\\cb\\\\48\\\\95\\\\20\\\\13\\\\6c\\\\a9\\\\aa\\\\f8\" \\\n            \"\\\\31\\\\56\\\\ed\\\\c0\\\\3b\\\\d4\\\\ae\\\\2e\\\\e3\\\\8f\\\\05\\\\fc\\\\ab\\\\5f\\\\2a\\\\69\" \\\n            \"\\\\23\\\\bc\\\\b8\\\\8c\\\\ec\\\\2d\\\\a9\\\\0b\\\\86\\\\95\\\\73\\\\73\\\\db\\\\17\\\\ce\\\\c6\" \\\n            \"\\\\ae\\\\c5\\\\b4\\\\c1\\\\25\\\\87\\\\3b\\\\67\\\\43\\\\9e\\\\87\\\\5a\\\\e6\\\\b9\\\\a0\\\\28\" \\\n            \"\\\\12\\\\3d\\\\a8\\\\2e\\\\d7\\\\5e\\\\ef\\\\65\\\\2d\\\\e6\\\\a5\\\\67\\\\84\\\\ac\\\\fd\\\\31\" \\\n            \"\\\\c1\\\\78\\\\d8\\\\72\\\\51\\\\a2\\\\88\\\\55\\\\0f\\\\97\\\\47\\\\93\\\\07\\\\ea\\\\8a\\\\53\" \\\n            \"\\\\27\\\\4e\\\\34\\\\54\\\\34\\\\1f\\\\a0\\\\6a\\\\03\\\\44\\\\fb\\\\23\\\\61\\\\8e\\\\87\\\\8e\" \\\n            \"\\\\3c\\\\d0\\\\8f\\\\ae\\\\e4\\\\cf\\\\ee\\\\65\\\\a8\\\\ba\\\\96\\\\68\\\\08\\\\1c\\\\60\\\\e2\" \\\n            \"\\\\4e\\\\11\\\\a3\\\\74\\\\b8\\\\a5\\\\4e\\\\ea\\\\6a\\\\82\\\\4c\\\\c2\\\\4d\\\\63\\\\8e\\\\9f\" \\\n            \"\\\\7c\\\\2f\\\\a8\\\\c0\\\\62\\\\f8\\\\f7\\\\d9\\\\25\\\\c4\\\\91\\\\ab\\\\4d\\\\6a\\\\44\\\\af\" \\\n            \"\\\\75\\\\93\\\\53\\\\03\\\\a4\\\\99\\\\c8\\\\cd\\\\91\\\\89\\\\60\\\\75\\\\30\\\\99\\\\76\\\\05\" \\\n            \"\\\\5a\\\\a0\\\\03\\\\a7\\\\a1\\\\2c\\\\03\\\\04\\\\8f\\\\d4\\\\5a\\\\31\\\\52\\\\28\\\\5a\\\\e6\" \\\n            \"\\\\a2\\\\d3\\\\43\\\\21\\\\5b\\\\dc\\\\a2\\\\1d\\\\55\\\\a9\\\\48\\\\c5\\\\c4\\\\aa\\\\f3\\\\8b\" \\\n            \"\\\\e6\\\\3e\\\\75\\\\96\\\\e4\\\\3e\\\\64\\\\af\\\\e8\\\\a7\\\\6a\\\\b6\"\n\nstatic void test_sss_certmap_get_search_filter(void **state)\n{\n    int ret;\n    struct sss_certmap_ctx *ctx;\n    char *filter;\n    char **domains;\n    const char *dom_list[] = {\"test.dom\", NULL};\n\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n\n    ret = sss_certmap_add_rule(ctx, 100,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule100=<I>{issuer_dn}<S>{subject_dn}\", NULL);\n    assert_int_equal(ret, 0);\n\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule100=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_null(domains);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule100=<I>CN=Certificate Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 99,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule99=<I>{issuer_dn}<S>{subject_dn}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule99=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule99=<I>CN=Certificate Authority,O=IPA.DEVEL\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 98,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule98=userCertificate;binary={cert!bin}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule98=userCertificate;binary=\" TEST_CERT_BIN);\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule98=userCertificate;binary=\" TEST_CERT_BIN);\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 97,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule97=<I>{issuer_dn!nss_x500}<S>{subject_dn}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 96,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            \"LDAP:rule96=<I>{issuer_dn!nss_x500}<S>{subject_dn!nss_x500}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 95,\n                            \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                            NULL, NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");\n    assert_null(domains);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 94,\n                      \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",\n                      \"LDAP:rule94=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",\n                            dom_list);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert_der),\n                                        sizeof(test_cert_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),\n                                          sizeof(test_cert_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"\n                                \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");\n    assert_non_null(domains);\n    assert_string_equal(domains[0], \"test.dom\");\n    assert_null(domains[1]);\n\n    ret = sss_certmap_add_rule(ctx, 89, NULL,\n                            \"(rule89={subject_nt_principal})\",\n                            NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");\n    assert_null(domains);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),\n                                          sizeof(test_cert2_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 88, NULL,\n                            \"(rule88={subject_nt_principal.short_name})\",\n                            NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(rule88=tu1)\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 87, NULL,\n                          \"LDAP:rule87=<I>{issuer_dn!nss_x500}<S>{subject_dn!nss_x500}\",\n                          NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");\n    assert_null(domains);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),\n                                          sizeof(test_cert2_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");\n    assert_null(domains);\n\n    ret = sss_certmap_add_rule(ctx, 86, NULL,\n                      \"LDAP:rule86=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",\n                      NULL);\n    assert_int_equal(ret, 0);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");\n    assert_null(domains);\n\n    ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),\n                                          sizeof(test_cert2_der),\n                                          &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"\n                  \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");\n    assert_null(domains);\n\n\n    sss_certmap_free_ctx(ctx);\n\n    /* check defaults when no rules are added yet */\n    ret = sss_certmap_init(NULL, ext_debug, NULL, &ctx);\n    assert_int_equal(ret, EOK);\n    assert_non_null(ctx);\n    assert_null(ctx->prio_list);\n    ret = sss_certmap_get_search_filter(ctx, discard_const(test_cert2_der),\n                                        sizeof(test_cert2_der),\n                                        &filter, &domains);\n    assert_int_equal(ret, 0);\n    assert_non_null(filter);\n    assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT2_BIN\")\");\n    assert_null(domains);\n\n    sss_certmap_free_ctx(ctx);\n}\n\nint main(int argc, const char *argv[])\n{\n    int rv;\n    poptContext pc;\n    int opt;\n    struct poptOption long_options[] = {\n        POPT_AUTOHELP\n        SSSD_DEBUG_OPTS\n        POPT_TABLEEND\n    };\n\n    const struct CMUnitTest tests[] = {\n        cmocka_unit_test(test_sss_certmap_init),\n        cmocka_unit_test(test_sss_certmap_add_rule),\n        cmocka_unit_test(test_sss_certmap_add_matching_rule),\n        cmocka_unit_test(test_check_ad_attr_name),\n        cmocka_unit_test(test_sss_cert_get_content),\n        cmocka_unit_test(test_sss_cert_get_content_2),\n#ifdef HAVE_TEST_CA\n        cmocka_unit_test(test_sss_cert_get_content_test_cert_0003),\n        cmocka_unit_test(test_sss_cert_get_content_test_cert_0004),\n#endif\n        cmocka_unit_test(test_sss_certmap_match_cert),\n        cmocka_unit_test(test_sss_certmap_add_mapping_rule),\n        cmocka_unit_test(test_sss_certmap_get_search_filter),\n    };\n\n    /* Set debug level to invalid value so we can decide if -d 0 was used. */\n    debug_level = SSSDBG_INVALID;\n\n    pc = poptGetContext(argv[0], argc, argv, long_options, 0);\n    while((opt = poptGetNextOpt(pc)) != -1) {\n        switch(opt) {\n        default:\n            fprintf(stderr, \"\\nInvalid option %s: %s\\n\\n\",\n                    poptBadOption(pc, 0), poptStrerror(opt));\n            poptPrintUsage(pc, stderr, 0);\n            return 1;\n        }\n    }\n    poptFreeContext(pc);\n\n    DEBUG_CLI_INIT(debug_level);\n\n#ifdef HAVE_NSS\n    nspr_nss_init();\n#endif\n\n    tests_set_cwd();\n    rv = cmocka_run_group_tests(tests, NULL, NULL);\n\n#ifdef HAVE_NSS\n    /* Cleanup NSS and NSPR to make Valgrind happy. */\n    nspr_nss_cleanup();\n#endif\n\n#ifdef HAVE_LIBCRYPTO\n    CRYPTO_cleanup_all_ex_data(); /* to make Valgrind happy */\n#endif\n\n    return rv;\n}\n", "/*\n    Authors:\n        Simo Sorce <ssorce@redhat.com>\n\n    Copyright (C) 2009 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"config.h\"\n#include <ctype.h>\n#include <netdb.h>\n#include <poll.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <talloc.h>\n#include <dhash.h>\n#include <time.h>\n\n#include \"util/util.h\"\n#include \"util/sss_utf8.h\"\n\nint socket_activated = 0;\nint dbus_activated = 0;\n\nstatic void free_args(char **args)\n{\n    int i;\n\n    if (args) {\n        for (i = 0; args[i]; i++) free(args[i]);\n        free(args);\n    }\n}\n\n/* parse a string into arguments.\n * arguments are separated by a space\n * '\\' is an escape character and can be used only to escape\n * itself or the white space.\n */\nchar **parse_args(const char *str)\n{\n    const char *p;\n    char **ret, **r;\n    char *tmp;\n    int num;\n    int i;\n    bool e, w;\n\n    tmp = malloc(strlen(str) + 1);\n    if (!tmp) return NULL;\n\n    ret = NULL;\n    num = 0;\n    i = 0;\n    e = false;\n    /* skip leading whitespaces */\n    w = true;\n    p = str;\n    while (*p) {\n        if (*p == '\\\\') {\n            w = false;\n            if (e) {\n                /* if we were already escaping, add a '\\' literal */\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            } else {\n                /* otherwise just start escaping */\n                e = true;\n            }\n        } else if (isspace(*p)) {\n            if (e) {\n                /* Add escaped whitespace literally */\n                tmp[i] = *p;\n                i++;\n                e = false;\n            } else if (w == false) {\n                /* If previous character was non-whitespace, arg break */\n                tmp[i] = '\\0';\n                i++;\n                w = true;\n            }\n            /* previous char was whitespace as well, skip it */\n        } else {\n            w = false;\n            if (e) {\n                /* Prepend escaped chars with a literal \\ */\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            }\n            /* Copy character from the source string */\n            tmp[i] = *p;\n            i++;\n        }\n\n        p++;\n\n        /* check if this was the last char */\n        if (*p == '\\0') {\n            if (e) {\n                tmp[i] = '\\\\';\n                i++;\n                e = false;\n            }\n            tmp[i] = '\\0';\n            i++;\n        }\n\n        /* save token to result array */\n        if (i > 1 && tmp[i-1] == '\\0') {\n            r = realloc(ret, (num + 2) * sizeof(char *));\n            if (!r) goto fail;\n            ret = r;\n            ret[num+1] = NULL;\n            ret[num] = strdup(tmp);\n            if (!ret[num]) goto fail;\n            num++;\n            i = 0;\n        }\n    }\n\n    free(tmp);\n    return ret;\n\nfail:\n    free(tmp);\n    free_args(ret);\n    return NULL;\n}\n\nconst char **dup_string_list(TALLOC_CTX *memctx, const char **str_list)\n{\n    int i = 0;\n    int j = 0;\n    const char **dup_list;\n\n    if (!str_list) {\n        return NULL;\n    }\n\n    /* Find the size of the list */\n    while (str_list[i]) i++;\n\n    dup_list = talloc_array(memctx, const char *, i+1);\n    if (!dup_list) {\n        return NULL;\n    }\n\n    /* Copy the elements */\n    for (j = 0; j < i; j++) {\n        dup_list[j] = talloc_strdup(dup_list, str_list[j]);\n        if (!dup_list[j]) {\n            talloc_free(dup_list);\n            return NULL;\n        }\n    }\n\n    /* NULL-terminate the list */\n    dup_list[i] = NULL;\n\n    return dup_list;\n}\n\n/* Take two string lists (terminated on a NULL char*)\n * and return up to three arrays of strings based on\n * shared ownership.\n *\n * Pass NULL to any return type you don't care about\n */\nerrno_t diff_string_lists(TALLOC_CTX *memctx,\n                          char **_list1,\n                          char **_list2,\n                          char ***_list1_only,\n                          char ***_list2_only,\n                          char ***_both_lists)\n{\n    int error;\n    errno_t ret;\n    int i;\n    int i2 = 0;\n    int i12 = 0;\n    hash_table_t *table;\n    hash_key_t key;\n    hash_value_t value;\n    char **list1 = NULL;\n    char **list2 = NULL;\n    char **list1_only = NULL;\n    char **list2_only = NULL;\n    char **both_lists = NULL;\n    unsigned long count;\n    hash_key_t *keys;\n\n    TALLOC_CTX *tmp_ctx = talloc_new(memctx);\n    if (!tmp_ctx) {\n        return ENOMEM;\n    }\n\n    if (!_list1) {\n        list1 = talloc_array(tmp_ctx, char *, 1);\n        if (!list1) {\n            talloc_free(tmp_ctx);\n            return ENOMEM;\n        }\n        list1[0] = NULL;\n    }\n    else {\n        list1 = _list1;\n    }\n\n    if (!_list2) {\n        list2 = talloc_array(tmp_ctx, char *, 1);\n        if (!list2) {\n            talloc_free(tmp_ctx);\n            return ENOMEM;\n        }\n        list2[0] = NULL;\n    }\n    else {\n        list2 = _list2;\n    }\n\n    error = hash_create(10, &table, NULL, NULL);\n    if (error != HASH_SUCCESS) {\n        talloc_free(tmp_ctx);\n        return EIO;\n    }\n\n    key.type = HASH_KEY_STRING;\n    value.type = HASH_VALUE_UNDEF;\n\n    /* Add all entries from list 1 into a hash table */\n    i = 0;\n    while (list1[i]) {\n        key.str = talloc_strdup(tmp_ctx, list1[i]);\n        error = hash_enter(table, &key, &value);\n        if (error != HASH_SUCCESS) {\n            ret = EIO;\n            goto done;\n        }\n        i++;\n    }\n\n    /* Iterate through list 2 and remove matching items */\n    i = 0;\n    while (list2[i]) {\n        key.str = talloc_strdup(tmp_ctx, list2[i]);\n        error = hash_delete(table, &key);\n        if (error == HASH_SUCCESS) {\n            if (_both_lists) {\n                /* String was present in both lists */\n                i12++;\n                both_lists = talloc_realloc(tmp_ctx, both_lists, char *, i12+1);\n                if (!both_lists) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n                both_lists[i12-1] = talloc_strdup(both_lists, list2[i]);\n                if (!both_lists[i12-1]) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n\n                both_lists[i12] = NULL;\n            }\n        }\n        else if (error == HASH_ERROR_KEY_NOT_FOUND) {\n            if (_list2_only) {\n                /* String was present only in list2 */\n                i2++;\n                list2_only = talloc_realloc(tmp_ctx, list2_only,\n                                            char *, i2+1);\n                if (!list2_only) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n                list2_only[i2-1] = talloc_strdup(list2_only, list2[i]);\n                if (!list2_only[i2-1]) {\n                    ret = ENOMEM;\n                    goto done;\n                }\n\n                list2_only[i2] = NULL;\n            }\n        }\n        else {\n            /* An error occurred */\n            ret = EIO;\n            goto done;\n        }\n        i++;\n    }\n\n    /* Get the leftover entries in the hash table */\n    if (_list1_only) {\n        error = hash_keys(table, &count, &keys);\n        if (error != HASH_SUCCESS) {\n            ret = EIO;\n            goto done;\n        }\n\n        list1_only = talloc_array(tmp_ctx, char *, count+1);\n        if (!list1_only) {\n            ret = ENOMEM;\n            goto done;\n        }\n\n        for (i = 0; i < count; i++) {\n            list1_only[i] = talloc_strdup(list1_only, keys[i].str);\n            if (!list1_only[i]) {\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n        list1_only[count] = NULL;\n\n        free(keys);\n\n        *_list1_only = talloc_steal(memctx, list1_only);\n    }\n\n    if (_list2_only) {\n        if (list2_only) {\n            *_list2_only = talloc_steal(memctx, list2_only);\n        }\n        else {\n            *_list2_only = talloc_array(memctx, char *, 1);\n            if (!(*_list2_only)) {\n                ret = ENOMEM;\n                goto done;\n            }\n            *_list2_only[0] = NULL;\n        }\n    }\n\n    if (_both_lists) {\n        if (both_lists) {\n            *_both_lists = talloc_steal(memctx, both_lists);\n        }\n        else {\n            *_both_lists = talloc_array(memctx, char *, 1);\n            if (!(*_both_lists)) {\n                ret = ENOMEM;\n                goto done;\n            }\n            *_both_lists[0] = NULL;\n        }\n    }\n\n    ret = EOK;\n\ndone:\n    hash_destroy(table);\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nstatic void *hash_talloc(const size_t size, void *pvt)\n{\n    return talloc_size(pvt, size);\n}\n\nstatic void hash_talloc_free(void *ptr, void *pvt)\n{\n    talloc_free(ptr);\n}\n\nerrno_t sss_hash_create_ex(TALLOC_CTX *mem_ctx,\n                           unsigned long count,\n                           hash_table_t **tbl,\n                           unsigned int directory_bits,\n                           unsigned int segment_bits,\n                           unsigned long min_load_factor,\n                           unsigned long max_load_factor,\n                           hash_delete_callback *delete_callback,\n                           void *delete_private_data)\n{\n    errno_t ret;\n    hash_table_t *table;\n    int hret;\n\n    TALLOC_CTX *internal_ctx;\n    internal_ctx = talloc_new(NULL);\n    if (!internal_ctx) {\n        return ENOMEM;\n    }\n\n    hret = hash_create_ex(count, &table, directory_bits, segment_bits,\n                          min_load_factor, max_load_factor,\n                          hash_talloc, hash_talloc_free, internal_ctx,\n                          delete_callback, delete_private_data);\n    switch (hret) {\n    case HASH_SUCCESS:\n        /* Steal the table pointer onto the mem_ctx,\n         * then make the internal_ctx a child of\n         * table.\n         *\n         * This way, we can clean up the values when\n         * we talloc_free() the table\n         */\n        *tbl = talloc_steal(mem_ctx, table);\n        talloc_steal(table, internal_ctx);\n        return EOK;\n\n    case HASH_ERROR_NO_MEMORY:\n        ret = ENOMEM;\n        break;\n    default:\n        ret = EIO;\n    }\n\n    DEBUG(SSSDBG_FATAL_FAILURE, \"Could not create hash table: [%d][%s]\\n\",\n              hret, hash_error_string(hret));\n\n    talloc_free(internal_ctx);\n    return ret;\n}\n\nerrno_t sss_hash_create(TALLOC_CTX *mem_ctx, unsigned long count,\n                        hash_table_t **tbl)\n{\n    return sss_hash_create_ex(mem_ctx, count, tbl, 0, 0, 0, 0, NULL, NULL);\n}\n\nchar *\nsss_escape_ip_address(TALLOC_CTX *mem_ctx, int family, const char *addr)\n{\n    return family == AF_INET6 ? talloc_asprintf(mem_ctx, \"[%s]\", addr) :\n                                talloc_strdup(mem_ctx, addr);\n}\n\n/* out->len includes terminating '\\0' */\nvoid to_sized_string(struct sized_string *out, const char *in)\n{\n    out->str = in;\n    if (out->str) {\n        out->len = strlen(out->str) + 1;\n    } else {\n        out->len = 0;\n    }\n}\n\n/* This function only removes first and last\n * character if the first character was '['.\n *\n * NOTE: This means, that ipv6addr must NOT be followed\n * by port number.\n */\nerrno_t\nremove_ipv6_brackets(char *ipv6addr)\n{\n    size_t len;\n\n    if (ipv6addr && ipv6addr[0] == '[') {\n        len = strlen(ipv6addr);\n        if (len < 3) {\n            return EINVAL;\n        }\n\n        memmove(ipv6addr, &ipv6addr[1], len - 2);\n        ipv6addr[len -2] = '\\0';\n    }\n\n    return EOK;\n}\n\nerrno_t add_string_to_list(TALLOC_CTX *mem_ctx, const char *string,\n                           char ***list_p)\n{\n    size_t c;\n    char **old_list = NULL;\n    char **new_list = NULL;\n\n    if (string == NULL || list_p == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Missing string or list.\\n\");\n        return EINVAL;\n    }\n\n    old_list = *list_p;\n\n    if (old_list == NULL) {\n        /* If the input is a NULL list a new one is created with the new\n         * string and the terminating NULL element. */\n        c = 0;\n        new_list = talloc_array(mem_ctx, char *, 2);\n    } else {\n        for (c = 0; old_list[c] != NULL; c++);\n        /* Allocate one extra space for the new service and one for\n         * the terminating NULL\n         */\n        new_list = talloc_realloc(mem_ctx, old_list, char *, c + 2);\n    }\n\n    if (new_list == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_array/talloc_realloc failed.\\n\");\n        return ENOMEM;\n    }\n\n    new_list[c] = talloc_strdup(new_list, string);\n    if (new_list[c] == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n        talloc_free(new_list);\n        return ENOMEM;\n    }\n\n    new_list[c + 1] = NULL;\n\n    *list_p = new_list;\n\n    return EOK;\n}\n\nerrno_t del_string_from_list(const char *string,\n                             char ***list_p, bool case_sensitive)\n{\n    char **list;\n    int(*compare)(const char *s1, const char *s2);\n\n    if (string == NULL || list_p == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Missing string or list.\\n\");\n        return EINVAL;\n    }\n\n    if (!string_in_list(string, *list_p, case_sensitive)) {\n        return ENOENT;\n    }\n\n    compare = case_sensitive ? strcmp : strcasecmp;\n    list = *list_p;\n    int matches = 0;\n    int index = 0;\n    while (list[index]) {\n        if (compare(string, list[index]) == 0) {\n            matches++;\n            TALLOC_FREE(list[index]);\n        } else if (matches) {\n            list[index - matches] = list[index];\n            list[index] = NULL;\n        }\n        index++;\n    }\n\n    return EOK;\n}\n\nint domain_to_basedn(TALLOC_CTX *memctx, const char *domain, char **basedn)\n{\n    const char *s;\n    char *dn;\n    char *p;\n    int l;\n\n    if (!domain || !basedn) {\n        return EINVAL;\n    }\n\n    s = domain;\n    dn = talloc_strdup(memctx, \"dc=\");\n\n    while ((p = strchr(s, '.'))) {\n        l = p - s;\n        dn = talloc_asprintf_append_buffer(dn, \"%.*s,dc=\", l, s);\n        if (!dn) {\n            return ENOMEM;\n        }\n        s = p + 1;\n    }\n    dn = talloc_strdup_append_buffer(dn, s);\n    if (!dn) {\n        return ENOMEM;\n    }\n\n    for (p=dn; *p; ++p) {\n        *p = tolower(*p);\n    }\n\n    *basedn = dn;\n    return EOK;\n}\n\nbool is_host_in_domain(const char *host, const char *domain)\n{\n    int diff = strlen(host) - strlen(domain);\n\n    if (diff == 0 && strcmp(host, domain) == 0) {\n        return true;\n    }\n\n    if (diff > 0 && strcmp(host + diff, domain) == 0 && host[diff - 1] == '.') {\n        return true;\n    }\n\n    return false;\n}\n\n/* addr is in network order for both IPv4 and IPv6 versions */\nbool check_ipv4_addr(struct in_addr *addr, uint8_t flags)\n{\n    char straddr[INET_ADDRSTRLEN];\n\n    if (inet_ntop(AF_INET, addr, straddr, INET_ADDRSTRLEN) == NULL) {\n        DEBUG(SSSDBG_MINOR_FAILURE,\n              \"inet_ntop failed, won't log IP addresses\\n\");\n        snprintf(straddr, INET_ADDRSTRLEN, \"unknown\");\n    }\n\n    if ((flags & SSS_NO_MULTICAST) && IN_MULTICAST(ntohl(addr->s_addr))) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Multicast IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LOOPBACK)\n               && inet_netof(*addr) == IN_LOOPBACKNET) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Loopback IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LINKLOCAL)\n               && (addr->s_addr & htonl(0xffff0000)) == htonl(0xa9fe0000)) {\n        /* 169.254.0.0/16 */\n        DEBUG(SSSDBG_FUNC_DATA, \"Link-local IPv4 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_BROADCAST)\n               && addr->s_addr == htonl(INADDR_BROADCAST)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Broadcast IPv4 address %s\\n\", straddr);\n        return false;\n    }\n\n    return true;\n}\n\nbool check_ipv6_addr(struct in6_addr *addr, uint8_t flags)\n{\n    char straddr[INET6_ADDRSTRLEN];\n\n    if (inet_ntop(AF_INET6, addr, straddr, INET6_ADDRSTRLEN) == NULL) {\n        DEBUG(SSSDBG_MINOR_FAILURE,\n              \"inet_ntop failed, won't log IP addresses\\n\");\n        snprintf(straddr, INET6_ADDRSTRLEN, \"unknown\");\n    }\n\n    if ((flags & SSS_NO_LINKLOCAL) && IN6_IS_ADDR_LINKLOCAL(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Link local IPv6 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_LOOPBACK) && IN6_IS_ADDR_LOOPBACK(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Loopback IPv6 address %s\\n\", straddr);\n        return false;\n    } else if ((flags & SSS_NO_MULTICAST) && IN6_IS_ADDR_MULTICAST(addr)) {\n        DEBUG(SSSDBG_FUNC_DATA, \"Multicast IPv6 address %s\\n\", straddr);\n        return false;\n    }\n\n    return true;\n}\n\nconst char * const * get_known_services(void)\n{\n    static const char *svc[] = {\"nss\", \"pam\", \"sudo\", \"autofs\",\n                                \"ssh\", \"pac\", \"ifp\", NULL };\n\n    return svc;\n}\n\nerrno_t add_strings_lists(TALLOC_CTX *mem_ctx, const char **l1, const char **l2,\n                          bool copy_strings, char ***_new_list)\n{\n    size_t c;\n    size_t l1_count = 0;\n    size_t l2_count = 0;\n    size_t new_count = 0;\n    char **new;\n    int ret;\n\n    if (l1 != NULL) {\n        for (l1_count = 0; l1[l1_count] != NULL; l1_count++);\n    }\n\n    if (l2 != NULL) {\n        for (l2_count = 0; l2[l2_count] != NULL; l2_count++);\n    }\n\n    new_count = l1_count + l2_count;\n\n    new = talloc_array(mem_ctx, char *, new_count + 1);\n    if (new == NULL) {\n        DEBUG(SSSDBG_OP_FAILURE, \"talloc_array failed.\\n\");\n        return ENOMEM;\n    }\n    new [new_count] = NULL;\n\n    if (copy_strings) {\n        for(c = 0; c < l1_count; c++) {\n            new[c] = talloc_strdup(new, l1[c]);\n            if (new[c] == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n        for(c = 0; c < l2_count; c++) {\n            new[l1_count + c] = talloc_strdup(new, l2[c]);\n            if (new[l1_count + c] == NULL) {\n                DEBUG(SSSDBG_OP_FAILURE, \"talloc_strdup failed.\\n\");\n                ret = ENOMEM;\n                goto done;\n            }\n        }\n    } else {\n        if (l1 != NULL) {\n            memcpy(new, l1, sizeof(char *) * l1_count);\n        }\n\n        if (l2 != NULL) {\n            memcpy(&new[l1_count], l2, sizeof(char *) * l2_count);\n        }\n    }\n\n    *_new_list = new;\n    ret = EOK;\n\ndone:\n    if (ret != EOK) {\n        talloc_free(new);\n    }\n\n    return ret;\n}\n\n/* Set the nonblocking flag to the fd */\nerrno_t sss_fd_nonblocking(int fd)\n{\n    int flags;\n    int ret;\n\n    flags = fcntl(fd, F_GETFL, 0);\n    if (flags == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"F_GETFL failed [%d][%s].\\n\", ret, strerror(ret));\n        return ret;\n    }\n\n    if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_CRIT_FAILURE,\n              \"F_SETFL failed [%d][%s].\\n\", ret, strerror(ret));\n        return ret;\n    }\n\n    return EOK;\n}\n\n/* Convert GeneralizedTime (http://en.wikipedia.org/wiki/GeneralizedTime)\n * to unix time (seconds since epoch). Use UTC time zone.\n */\nerrno_t sss_utc_to_time_t(const char *str, const char *format, time_t *_unix_time)\n{\n    char *end;\n    struct tm tm;\n    size_t len;\n    time_t ut;\n\n    if (str == NULL) {\n        return EINVAL;\n    }\n\n    len = strlen(str);\n    if (str[len-1] != 'Z') {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"%s does not seem to be in UTZ time zone.\\n\", str);\n        return ERR_TIMESPEC_NOT_SUPPORTED;\n    }\n\n    memset(&tm, 0, sizeof(tm));\n\n    end = strptime(str, format, &tm);\n    /* not all characters from format were matched */\n    if (end == NULL) {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"String [%s] failed to match format [%s].\\n\", str, format);\n        return EINVAL;\n    }\n\n    /* str is 'longer' than format */\n    if (*end != '\\0') {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"String [%s] is longer than format [%s].\\n\", str, format);\n        return EINVAL;\n    }\n\n    ut = mktime(&tm);\n    if (ut == -1) {\n        DEBUG(SSSDBG_TRACE_INTERNAL,\n              \"mktime failed to convert [%s].\\n\", str);\n        return EINVAL;\n    }\n\n    tzset();\n    ut -= timezone;\n    *_unix_time = ut;\n    return EOK;\n}\n\nstruct tmpfile_watch {\n    const char *filename;\n};\n\nstatic int unlink_dbg(const char *filename)\n{\n    errno_t ret;\n\n    ret = unlink(filename);\n    if (ret != 0) {\n        ret = errno;\n        if (ret == ENOENT) {\n            DEBUG(SSSDBG_TRACE_INTERNAL,\n                  \"File already removed: [%s]\\n\", filename);\n            return 0;\n        } else {\n            DEBUG(SSSDBG_CRIT_FAILURE,\n                  \"Cannot remove temporary file [%s] %d [%s]\\n\",\n                  filename, ret, strerror(ret));\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nstatic int unique_filename_destructor(void *memptr)\n{\n    struct tmpfile_watch *tw = talloc_get_type(memptr, struct tmpfile_watch);\n\n    if (tw == NULL || tw->filename == NULL) {\n        DEBUG(SSSDBG_CRIT_FAILURE, \"BUG: Wrong private pointer\\n\");\n        return -1;\n    }\n\n    DEBUG(SSSDBG_TRACE_INTERNAL, \"Unlinking [%s]\\n\", tw->filename);\n\n    return unlink_dbg(tw->filename);\n}\n\nstatic struct tmpfile_watch *tmpfile_watch_set(TALLOC_CTX *owner,\n                                               const char *filename)\n{\n    struct tmpfile_watch *tw = NULL;\n\n    tw = talloc_zero(owner, struct tmpfile_watch);\n    if (tw == NULL) {\n        return NULL;\n    }\n\n    tw->filename = talloc_strdup(tw, filename);\n    if (tw->filename == NULL) {\n        talloc_free(tw);\n        return NULL;\n    }\n\n    talloc_set_destructor((TALLOC_CTX *) tw,\n                          unique_filename_destructor);\n    return tw;\n}\n\nint sss_unique_file_ex(TALLOC_CTX *owner,\n                       char *path_tmpl,\n                       mode_t file_umask,\n                       errno_t *_err)\n{\n    size_t tmpl_len;\n    errno_t ret;\n    int fd = -1;\n    mode_t old_umask;\n    struct tmpfile_watch *tw = NULL;\n\n    tmpl_len = strlen(path_tmpl);\n    if (tmpl_len < 6 || strcmp(path_tmpl + (tmpl_len - 6), \"XXXXXX\") != 0) {\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"Template too short or doesn't end with XXXXXX!\\n\");\n        ret = EINVAL;\n        goto done;\n    }\n\n    old_umask = umask(file_umask);\n    fd = mkstemp(path_tmpl);\n    umask(old_umask);\n    if (fd == -1) {\n        ret = errno;\n        DEBUG(SSSDBG_OP_FAILURE,\n              \"mkstemp(\\\"%s\\\") failed [%d]: %s!\\n\",\n              path_tmpl, ret, strerror(ret));\n        goto done;\n    }\n\n    if (owner != NULL) {\n        tw = tmpfile_watch_set(owner, path_tmpl);\n        if (tw == NULL) {\n            unlink_dbg(path_tmpl);\n            ret = ENOMEM;\n            goto done;\n        }\n    }\n\n    ret = EOK;\ndone:\n    if (_err) {\n        *_err = ret;\n    }\n    return fd;\n}\n\nint sss_unique_file(TALLOC_CTX *owner,\n                    char *path_tmpl,\n                    errno_t *_err)\n{\n    return sss_unique_file_ex(owner, path_tmpl, SSS_DFL_UMASK, _err);\n}\n\nerrno_t sss_unique_filename(TALLOC_CTX *owner, char *path_tmpl)\n{\n    int fd;\n    errno_t ret;\n\n    fd = sss_unique_file(owner, path_tmpl, &ret);\n    /* We only care about a unique file name */\n    if (fd >= 0) {\n        close(fd);\n    }\n\n    return ret;\n}\n\nbool is_user_or_group_name(const char *sudo_user_value)\n{\n    if (sudo_user_value == NULL) {\n        return false;\n    }\n\n    /* See man sudoers.ldap for explanation */\n    if (strcmp(sudo_user_value, \"ALL\") == 0) {\n        return false;\n    }\n\n    switch (sudo_user_value[0]) {\n    case '#':           /* user id */\n    case '+':           /* netgroup */\n    case '\\0':          /* empty value */\n        return false;\n    }\n\n    if (sudo_user_value[0] == '%') {\n        switch (sudo_user_value[1]) {\n        case '#':           /* POSIX group ID */\n        case ':':           /* non-POSIX group */\n        case '\\0':          /* empty value */\n            return false;\n        }\n    }\n\n    /* Now it's either a username or a groupname */\n    return true;\n}\n\nbool is_socket_activated(void)\n{\n#ifdef HAVE_SYSTEMD\n    return !!socket_activated;\n#else\n    return false;\n#endif\n}\n\nbool is_dbus_activated(void)\n{\n#ifdef HAVE_SYSTEMD\n    return !!dbus_activated;\n#else\n    return false;\n#endif\n}\n\nbool local_provider_is_built(void)\n{\n#ifdef BUILD_LOCAL_PROVIDER\n    return true;\n#else\n    return false;\n#endif\n}\n\nint sss_rand(void)\n{\n    static bool srand_done = false;\n\n    /* Coverity might complain here: \"DC.WEAK_CRYPTO (CWE-327)\"\n     * It is safe to ignore as this helper function is *NOT* intended\n     * to be used in security relevant context.\n     */\n    if (!srand_done) {\n        srand(time(NULL) * getpid());\n        srand_done = true;\n    }\n    return rand();\n}\n\nerrno_t sss_canonicalize_ip_address(TALLOC_CTX *mem_ctx,\n                                    const char *address,\n                                    char **canonical_address)\n{\n    struct addrinfo hints;\n    struct addrinfo *result = NULL;\n    char buf[INET6_ADDRSTRLEN + 1];\n    int ret;\n\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_flags = AI_NUMERICHOST;\n\n    ret = getaddrinfo(address, NULL, &hints, &result);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Failed to canonicalize address [%s]: %s\",\n              address, gai_strerror(ret));\n        return EINVAL;\n    }\n\n    ret = getnameinfo(result->ai_addr, result->ai_addrlen, buf, sizeof(buf),\n                      NULL, 0, NI_NUMERICHOST);\n    freeaddrinfo(result);\n    if (ret != 0) {\n        DEBUG(SSSDBG_OP_FAILURE, \"Failed to canonicalize address [%s]: %s\",\n              address, gai_strerror(ret));\n        return EINVAL;\n    }\n\n    *canonical_address = talloc_strdup(mem_ctx, buf);\n    if (*canonical_address == NULL) {\n        return ENOMEM;\n    }\n\n    return EOK;\n}\n", "/*\n   SSSD helper calls - can be used by libraries for external use as well\n\n    Authors:\n        Simo Sorce <ssorce@redhat.com>\n\n    Copyright (C) 2017 Red Hat\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <talloc.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <ctype.h>\n#include <string.h>\n#include <strings.h>\n\n#define EOK 0\n\n#ifndef HAVE_ERRNO_T\n#define HAVE_ERRNO_T\ntypedef int errno_t;\n#endif\n\nint split_on_separator(TALLOC_CTX *mem_ctx, const char *str,\n                       const char sep, bool trim, bool skip_empty,\n                       char ***_list, int *size)\n{\n    int ret;\n    const char *substr_end = str;\n    const char *substr_begin = str;\n    const char *sep_pos = NULL;\n    size_t substr_len;\n    char **list = NULL;\n    int num_strings = 0;\n    TALLOC_CTX *tmp_ctx = NULL;\n\n    if (str == NULL || *str == '\\0' || _list == NULL) {\n        return EINVAL;\n    }\n\n    tmp_ctx = talloc_new(NULL);\n    if (tmp_ctx == NULL) {\n        return ENOMEM;\n    }\n\n    do {\n        substr_len = 0;\n\n        /* If this is not the first substring, then move from the separator. */\n        if (sep_pos != NULL) {\n            substr_end = sep_pos + 1;\n            substr_begin = sep_pos + 1;\n        }\n\n        /* Find end of the first substring */\n        while (*substr_end != sep && *substr_end != '\\0') {\n            substr_end++;\n            substr_len++;\n        }\n\n        sep_pos = substr_end;\n\n        if (trim) {\n            /* Trim leading whitespace */\n            while (isspace(*substr_begin) && substr_begin < substr_end) {\n                substr_begin++;\n                substr_len--;\n            }\n\n            /* Trim trailing whitespace */\n            while (substr_end - 1 > substr_begin && isspace(*(substr_end-1))) {\n                substr_end--;\n                substr_len--;\n            }\n        }\n\n        /* Copy the substring to the output list of strings */\n        if (skip_empty == false || substr_len > 0) {\n            list = talloc_realloc(tmp_ctx, list, char*, num_strings + 2);\n            if (list == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n\n            /* empty string is stored for substr_len == 0 */\n            list[num_strings] = talloc_strndup(list, substr_begin, substr_len);\n            if (list[num_strings] == NULL) {\n                ret = ENOMEM;\n                goto done;\n            }\n            num_strings++;\n        }\n\n    } while (*sep_pos != '\\0');\n\n    if (list == NULL) {\n        /* No allocations were done, make space for the NULL */\n        list = talloc(tmp_ctx, char *);\n        if (list == NULL) {\n            ret = ENOMEM;\n            goto done;\n        }\n    }\n    list[num_strings] = NULL;\n\n    if (size) {\n        *size = num_strings;\n    }\n\n    *_list = talloc_steal(mem_ctx, list);\n    ret = EOK;\ndone:\n    talloc_free(tmp_ctx);\n    return ret;\n}\n\nbool string_in_list(const char *string, char **list, bool case_sensitive)\n{\n    size_t c;\n    int(*compare)(const char *s1, const char *s2);\n\n    if (string == NULL || list == NULL || *list == NULL) {\n        return false;\n    }\n\n    compare = case_sensitive ? strcmp : strcasecmp;\n\n    for (c = 0; list[c] != NULL; c++) {\n        if (compare(string, list[c]) == 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nerrno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,\n                               const char *input,\n                               char **sanitized,\n                               const char *ignore)\n{\n    char *output;\n    size_t i = 0;\n    size_t j = 0;\n    char *allowed;\n\n    /* Assume the worst-case. We'll resize it later, once */\n    output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);\n    if (!output) {\n        return ENOMEM;\n    }\n\n    while (input[i]) {\n        /* Even though this character might have a special meaning, if it's\n         * explicitly allowed, just copy it and move on\n         */\n        if (ignore == NULL) {\n            allowed = NULL;\n        } else {\n            allowed = strchr(ignore, input[i]);\n        }\n        if (allowed) {\n            output[j++] = input[i++];\n            continue;\n        }\n\n        switch(input[i]) {\n        case '\\t':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = '9';\n            break;\n        case ' ':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '0';\n            break;\n        case '*':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = 'a';\n            break;\n        case '(':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '8';\n            break;\n        case ')':\n            output[j++] = '\\\\';\n            output[j++] = '2';\n            output[j++] = '9';\n            break;\n        case '\\\\':\n            output[j++] = '\\\\';\n            output[j++] = '5';\n            output[j++] = 'c';\n            break;\n        case '\\r':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = 'd';\n            break;\n        case '\\n':\n            output[j++] = '\\\\';\n            output[j++] = '0';\n            output[j++] = 'a';\n            break;\n        default:\n            output[j++] = input[i];\n        }\n\n        i++;\n    }\n    output[j] = '\\0';\n    *sanitized = talloc_realloc(mem_ctx, output, char, j+1);\n    if (!*sanitized) {\n        talloc_free(output);\n        return ENOMEM;\n    }\n\n    return EOK;\n}\n\nerrno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,\n                            const char *input,\n                            char **sanitized)\n{\n    return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);\n}\n"], "filenames": ["Makefile.am", "src/lib/certmap/sss_certmap.c", "src/lib/certmap/sss_certmap.exports", "src/lib/certmap/sss_certmap.h", "src/responder/pam/pamsrv_p11.c", "src/tests/cmocka/test_certmap.c", "src/util/util.c", "src/util/util_ext.c"], "buggy_code_start_loc": [2166, 443, 18, 106, 1052, 1433, 439, 30], "buggy_code_end_loc": [2167, 873, 18, 154, 1055, 1573, 533, 143], "fixing_code_start_loc": [2166, 444, 19, 106, 1052, 1434, 438, 31], "fixing_code_end_loc": [2167, 906, 24, 179, 1056, 1670, 438, 243], "type": "CWE-90", "message": "sssd: libsss_certmap fails to sanitise certificate data used in LDAP filters", "other": {"cve": {"id": "CVE-2022-4254", "sourceIdentifier": "secalert@redhat.com", "published": "2023-02-01T17:15:09.680", "lastModified": "2023-05-29T17:15:09.910", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "sssd: libsss_certmap fails to sanitise certificate data used in LDAP filters"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "secalert@redhat.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-90"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fedoraproject:sssd:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.15.3", "versionEndExcluding": "2.3.1", "matchCriteriaId": "690E7363-ED75-400D-9F2F-5E87BEF9C238"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "F4CFF558-3C47-480D-A2F0-BABF26042943"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C068A4-3780-4EAB-A937-6082DF847564"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_ibm_z_systems:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "566507B6-AC95-47F7-A3FB-C6F414E45F51"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_power_big_endian:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "1CDCFF34-6F1D-45A1-BE37-6A0E17B04801"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_power_little_endian:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "B4A684C7-88FD-43C4-9BDB-AE337FCBD0AB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_scientific_computing:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "37CE1DC7-72C5-483C-8921-0B462C8284D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:8.2:*:*:*:*:*:*:*", "matchCriteriaId": "6897676D-53F9-45B3-B27F-7FF9A4C58D33"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_for_power_little_endian_update_services_for_sap_solutions:8.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DF2B9A2-8CA6-4EDF-9975-07265E363ED2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_for_power_little_endian_update_services_for_sap_solutions:8.2:*:*:*:*:*:*:*", "matchCriteriaId": "7DA6A5AF-2EBE-4ED9-B312-DCD9D150D031"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:8.2:*:*:*:*:*:*:*", "matchCriteriaId": "B09ACF2D-D83F-4A86-8185-9569605D8EE1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_update_services_for_sap_solutions:8.1:*:*:*:*:*:*:*", "matchCriteriaId": "48C2E003-A71C-4D06-B8B3-F93160568182"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "825ECE2D-E232-46E0-A047-074B34DB1E97"}]}]}], "references": [{"url": "https://access.redhat.com/security/cve/CVE-2022-4254", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2149894", "source": "secalert@redhat.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/SSSD/sssd/commit/a2b9a84460429181f2a4fa7e2bb5ab49fd561274", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/SSSD/sssd/issues/5135", "source": "secalert@redhat.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/05/msg00028.html", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/SSSD/sssd/commit/a2b9a84460429181f2a4fa7e2bb5ab49fd561274"}}