{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Listing;\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\AbstractModel;\nuse Pimcore\\Model\\Listing\\Dao\\AbstractDao;\n\n/**\n * @method AbstractDao getDao()\n * @method QueryBuilder getQueryBuilder()\n */\nabstract class AbstractListing extends AbstractModel implements \\Iterator, \\Countable\n{\n    /**\n     * @var array\n     */\n    protected $order = [];\n\n    /**\n     * @var array\n     */\n    protected $orderKey = [];\n\n    /**\n     * @var int\n     */\n    protected $limit;\n\n    /**\n     * @var int\n     */\n    protected $offset;\n\n    /**\n     * @var string\n     */\n    protected $condition;\n\n    /**\n     * @var array\n     */\n    protected $conditionVariables = [];\n\n    /**\n     * @var array\n     */\n    protected $conditionVariablesFromSetCondition;\n\n    /**\n     * @var string\n     */\n    protected $groupBy;\n\n    /**\n     * @var array\n     */\n    protected $validOrders = [\n        'ASC',\n        'DESC',\n    ];\n\n    /**\n     * @var array\n     */\n    protected $conditionParams = [];\n\n    /**\n     * @var array\n     */\n    protected $conditionVariableTypes = [];\n\n    /**\n     * @var array|null\n     */\n    protected $data;\n\n    /**\n     * @return array\n     */\n    public function getConditionVariableTypes(): array\n    {\n        if (!$this->conditionVariables) {\n            $this->getCondition();\n        }\n\n        return $this->conditionVariableTypes;\n    }\n\n    /**\n     * @param array $conditionVariableTypes\n     */\n    public function setConditionVariableTypes(array $conditionVariableTypes): void\n    {\n        $this->conditionVariableTypes = $conditionVariableTypes;\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return bool\n     */\n    public function isValidOrderKey($key)\n    {\n        return true;\n    }\n\n    /**\n     * @return int\n     */\n    public function getLimit()\n    {\n        return $this->limit;\n    }\n\n    /**\n     * @return int\n     */\n    public function getOffset()\n    {\n        return $this->offset;\n    }\n\n    /**\n     * @return array\n     */\n    public function getOrder()\n    {\n        return $this->order;\n    }\n\n    /**\n     * @param int $limit\n     *\n     * @return $this\n     */\n    public function setLimit($limit)\n    {\n        $this->setData(null);\n\n        if ((int)$limit > 0) {\n            $this->limit = (int)$limit;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param int $offset\n     *\n     * @return $this\n     */\n    public function setOffset($offset)\n    {\n        $this->setData(null);\n\n        if ((int)$offset >= 0) {\n            $this->offset = (int)$offset;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param array|string $order\n     *\n     * @return $this\n     */\n    public function setOrder($order)\n    {\n        $this->setData(null);\n\n        $this->order = [];\n\n        if (!empty($order)) {\n            if (is_string($order)) {\n                $order = strtoupper($order);\n                if (in_array($order, $this->validOrders)) {\n                    $this->order[] = $order;\n                }\n            } elseif (is_array($order)) {\n                foreach ($order as $o) {\n                    $o = strtoupper($o);\n                    if (in_array($o, $this->validOrders)) {\n                        $this->order[] = $o;\n                    }\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getOrderKey()\n    {\n        return $this->orderKey;\n    }\n\n    /**\n     * @param string|array $orderKey\n     * @param bool $quote\n     *\n     * @return $this\n     */\n    public function setOrderKey($orderKey, $quote = true)\n    {\n        $this->setData(null);\n\n        $this->orderKey = [];\n\n        if (is_string($orderKey) && !empty($orderKey)) {\n            $orderKey = [$orderKey];\n        }\n\n        if (is_array($orderKey)) {\n            foreach ($orderKey as $o) {\n                if ($quote === false) {\n                    $this->orderKey[] = $o;\n                } elseif ($this->isValidOrderKey($o)) {\n                    $this->orderKey[] = '`' . $o . '`';\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param string $condition\n     * @param mixed $value\n     * @param string $concatenator\n     *\n     * @return $this\n     */\n    public function addConditionParam($condition, $value = null, $concatenator = 'AND')\n    {\n        $this->setData(null);\n\n        $condition = '('.$condition.')';\n        $ignoreParameter = true;\n\n        $conditionWithoutQuotedStrings = preg_replace('/[\"\\'][^\"\\']*?[\"\\']/', '', $condition);\n        if (str_contains($conditionWithoutQuotedStrings, '?') || str_contains($conditionWithoutQuotedStrings, ':')) {\n            $ignoreParameter = false;\n        }\n        $this->conditionParams[$condition] = [\n            'value' => $value,\n            'concatenator' => $concatenator,\n            'ignore-value' => $ignoreParameter, // If there is not a placeholder, ignore value!\n        ];\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionParams()\n    {\n        return $this->conditionParams;\n    }\n\n    /**\n     * @return $this\n     */\n    public function resetConditionParams()\n    {\n        $this->setData(null);\n\n        $this->conditionParams = [];\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getCondition()\n    {\n        $conditionString = '';\n        $conditionVariableTypes = [];\n        $conditionParams = $this->getConditionParams();\n        $db = \\Pimcore\\Db::get();\n\n        $params = [];\n        if (!empty($conditionParams)) {\n            $i = 0;\n            foreach ($conditionParams as $key => $value) {\n                if (!$this->condition && $i == 0) {\n                    $conditionString .= $key . ' ';\n                } else {\n                    $conditionString .= ' ' . $value['concatenator'] . ' ' . $key . ' ';\n                }\n\n                // If there is not a placeholder, ignore value!\n                if (!$value['ignore-value']) {\n                    if (is_array($value['value'])) {\n                        foreach ($value['value'] as $k => $v) {\n                            if (is_int($k)) {\n                                $params[] = $v;\n                            } else {\n                                $params[$k] = $v;\n                            }\n                        }\n                    } else {\n                        $params[] = $value['value'];\n                    }\n                }\n                $i++;\n            }\n        }\n        $params = array_merge((array) $this->getConditionVariablesFromSetCondition(), $params);\n\n        $this->setConditionVariables($params);\n\n        foreach ($params as $pkey => $param) {\n            if (is_array($param)) {\n                if (isset($param[0]) && is_string($param[0])) {\n                    $conditionVariableTypes[$pkey] = Connection::PARAM_STR_ARRAY;\n                } else {\n                    $conditionVariableTypes[$pkey] = Connection::PARAM_INT_ARRAY;\n                }\n            } else {\n                if (is_bool($param)) {\n                    $type = \\PDO::PARAM_BOOL;\n                } elseif (is_int($param)) {\n                    $type = \\PDO::PARAM_INT;\n                } elseif (is_null($param)) {\n                    $type = \\PDO::PARAM_NULL;\n                } else {\n                    $type = \\PDO::PARAM_STR;\n                }\n\n                $conditionVariableTypes[$pkey] = $type;\n            }\n        }\n\n        $this->setConditionVariableTypes($conditionVariableTypes);\n\n        $condition = $this->condition . $conditionString;\n\n        return $condition;\n    }\n\n    /**\n     * @param string $condition\n     * @param array|scalar $conditionVariables\n     *\n     * @return $this\n     */\n    public function setCondition($condition, $conditionVariables = null)\n    {\n        $this->setData(null);\n\n        $this->condition = $condition;\n\n        // statement variables\n        if (is_array($conditionVariables)) {\n            $this->setConditionVariablesFromSetCondition($conditionVariables);\n        } elseif ($conditionVariables !== null) {\n            $this->setConditionVariablesFromSetCondition([$conditionVariables]);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGroupBy()\n    {\n        return $this->groupBy;\n    }\n\n    /**\n     * @return array\n     */\n    public function getValidOrders()\n    {\n        return $this->validOrders;\n    }\n\n    /**\n     * @param string $groupBy\n     * @param bool $qoute\n     *\n     * @return $this\n     */\n    public function setGroupBy($groupBy, $qoute = true)\n    {\n        $this->setData(null);\n\n        if ($groupBy) {\n            $this->groupBy = $groupBy;\n\n            if ($qoute && strpos($groupBy, '`') !== 0) {\n                $this->groupBy = '`' . $this->groupBy . '`';\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param array $validOrders\n     *\n     * @return $this\n     */\n    public function setValidOrders($validOrders)\n    {\n        $this->validOrders = $validOrders;\n\n        return $this;\n    }\n\n    /**\n     * @param mixed $value\n     * @param int|null $type\n     *\n     * @return string\n     */\n    public function quote($value, $type = null)\n    {\n        $db = Db::get();\n\n        return $db->quote($value, $type);\n    }\n\n    /**\n     * @param string $value\n     *\n     * @return string\n     */\n    public function escapeLike(string $value): string\n    {\n        $db = Db::get();\n\n        return $db->escapeLike($value);\n    }\n\n    /**\n     * @param array $conditionVariables\n     *\n     * @return $this\n     */\n    public function setConditionVariables($conditionVariables)\n    {\n        $this->conditionVariables = $conditionVariables;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionVariables()\n    {\n        if (!$this->conditionVariables) {\n            $this->getCondition();\n        }\n\n        return $this->conditionVariables;\n    }\n\n    /**\n     * @param array $conditionVariables\n     *\n     * @return $this\n     */\n    public function setConditionVariablesFromSetCondition($conditionVariables)\n    {\n        $this->setData(null);\n\n        $this->conditionVariablesFromSetCondition = $conditionVariables;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionVariablesFromSetCondition()\n    {\n        return $this->conditionVariablesFromSetCondition;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isLoaded()\n    {\n        return $this->data !== null;\n    }\n\n    /**\n     * @return array\n     */\n    public function getData()\n    {\n        if ($this->data === null) {\n            $this->getDao()->load();\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param array|null $data\n     *\n     * @return static\n     */\n    public function setData(?array $data): self\n    {\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    #[\\ReturnTypeWillChange]\n    public function current()// : mixed\n    {\n        $this->getData();\n\n        return current($this->data);\n    }\n\n    /**\n     * @return int|string|null\n     */\n    #[\\ReturnTypeWillChange]\n    public function key()// : mixed\n    {\n        $this->getData();\n\n        return key($this->data);\n    }\n\n    /**\n     * @return void\n     */\n    #[\\ReturnTypeWillChange]\n    public function next()// : void\n    {\n        $this->getData();\n        next($this->data);\n    }\n\n    /**\n     * @return bool\n     */\n    #[\\ReturnTypeWillChange]\n    public function valid()// : bool\n    {\n        $this->getData();\n\n        return $this->current() !== false;\n    }\n\n    /**\n     * @return void\n     */\n    #[\\ReturnTypeWillChange]\n    public function rewind()// : void\n    {\n        $this->getData();\n        reset($this->data);\n    }\n\n    /**\n     * @return int\n     */\n    #[\\ReturnTypeWillChange]\n    public function count()// : int\n    {\n        return $this->getDao()->getTotalCount();\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Listing;\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\AbstractModel;\nuse Pimcore\\Model\\Listing\\Dao\\AbstractDao;\n\n/**\n * @method AbstractDao getDao()\n * @method QueryBuilder getQueryBuilder()\n */\nabstract class AbstractListing extends AbstractModel implements \\Iterator, \\Countable\n{\n    /**\n     * @var array\n     */\n    protected $order = [];\n\n    /**\n     * @var array\n     */\n    protected $orderKey = [];\n\n    /**\n     * @var int\n     */\n    protected $limit;\n\n    /**\n     * @var int\n     */\n    protected $offset;\n\n    /**\n     * @var string\n     */\n    protected $condition;\n\n    /**\n     * @var array\n     */\n    protected $conditionVariables = [];\n\n    /**\n     * @var array\n     */\n    protected $conditionVariablesFromSetCondition;\n\n    /**\n     * @var string\n     */\n    protected $groupBy;\n\n    /**\n     * @var array\n     */\n    protected $validOrders = [\n        'ASC',\n        'DESC',\n    ];\n\n    /**\n     * @var array\n     */\n    protected $conditionParams = [];\n\n    /**\n     * @var array\n     */\n    protected $conditionVariableTypes = [];\n\n    /**\n     * @var array|null\n     */\n    protected $data;\n\n    /**\n     * @return array\n     */\n    public function getConditionVariableTypes(): array\n    {\n        if (!$this->conditionVariables) {\n            $this->getCondition();\n        }\n\n        return $this->conditionVariableTypes;\n    }\n\n    /**\n     * @param array $conditionVariableTypes\n     */\n    public function setConditionVariableTypes(array $conditionVariableTypes): void\n    {\n        $this->conditionVariableTypes = $conditionVariableTypes;\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return bool\n     */\n    public function isValidOrderKey($key)\n    {\n        return true;\n    }\n\n    /**\n     * @return int\n     */\n    public function getLimit()\n    {\n        return $this->limit;\n    }\n\n    /**\n     * @return int\n     */\n    public function getOffset()\n    {\n        return $this->offset;\n    }\n\n    /**\n     * @return array\n     */\n    public function getOrder()\n    {\n        return $this->order;\n    }\n\n    /**\n     * @param int $limit\n     *\n     * @return $this\n     */\n    public function setLimit($limit)\n    {\n        $this->setData(null);\n\n        if ((int)$limit > 0) {\n            $this->limit = (int)$limit;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param int $offset\n     *\n     * @return $this\n     */\n    public function setOffset($offset)\n    {\n        $this->setData(null);\n\n        if ((int)$offset >= 0) {\n            $this->offset = (int)$offset;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param array|string $order\n     *\n     * @return $this\n     */\n    public function setOrder($order)\n    {\n        $this->setData(null);\n\n        $this->order = [];\n\n        if (!empty($order)) {\n            if (is_string($order)) {\n                $order = strtoupper($order);\n                if (in_array($order, $this->validOrders)) {\n                    $this->order[] = $order;\n                }\n            } elseif (is_array($order)) {\n                foreach ($order as $o) {\n                    $o = strtoupper($o);\n                    if (in_array($o, $this->validOrders)) {\n                        $this->order[] = $o;\n                    }\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getOrderKey()\n    {\n        return $this->orderKey;\n    }\n\n    /**\n     * @param string|array $orderKey\n     * @param bool $quote\n     *\n     * @return $this\n     */\n    public function setOrderKey($orderKey, $quote = true)\n    {\n        $this->setData(null);\n\n        $this->orderKey = [];\n\n        if (is_string($orderKey) && !empty($orderKey)) {\n            $orderKey = [$orderKey];\n        }\n\n        if (is_array($orderKey)) {\n            foreach ($orderKey as $o) {\n                if ($quote === false) {\n                    $this->orderKey[] = $o;\n                } elseif ($this->isValidOrderKey($o)) {\n                    $this->orderKey[] = $this->quoteIdentifier($o);\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param string $condition\n     * @param mixed $value\n     * @param string $concatenator\n     *\n     * @return $this\n     */\n    public function addConditionParam($condition, $value = null, $concatenator = 'AND')\n    {\n        $this->setData(null);\n\n        $condition = '('.$condition.')';\n        $ignoreParameter = true;\n\n        $conditionWithoutQuotedStrings = preg_replace('/[\"\\'][^\"\\']*?[\"\\']/', '', $condition);\n        if (str_contains($conditionWithoutQuotedStrings, '?') || str_contains($conditionWithoutQuotedStrings, ':')) {\n            $ignoreParameter = false;\n        }\n        $this->conditionParams[$condition] = [\n            'value' => $value,\n            'concatenator' => $concatenator,\n            'ignore-value' => $ignoreParameter, // If there is not a placeholder, ignore value!\n        ];\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionParams()\n    {\n        return $this->conditionParams;\n    }\n\n    /**\n     * @return $this\n     */\n    public function resetConditionParams()\n    {\n        $this->setData(null);\n\n        $this->conditionParams = [];\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getCondition()\n    {\n        $conditionString = '';\n        $conditionVariableTypes = [];\n        $conditionParams = $this->getConditionParams();\n        $db = \\Pimcore\\Db::get();\n\n        $params = [];\n        if (!empty($conditionParams)) {\n            $i = 0;\n            foreach ($conditionParams as $key => $value) {\n                if (!$this->condition && $i == 0) {\n                    $conditionString .= $key . ' ';\n                } else {\n                    $conditionString .= ' ' . $value['concatenator'] . ' ' . $key . ' ';\n                }\n\n                // If there is not a placeholder, ignore value!\n                if (!$value['ignore-value']) {\n                    if (is_array($value['value'])) {\n                        foreach ($value['value'] as $k => $v) {\n                            if (is_int($k)) {\n                                $params[] = $v;\n                            } else {\n                                $params[$k] = $v;\n                            }\n                        }\n                    } else {\n                        $params[] = $value['value'];\n                    }\n                }\n                $i++;\n            }\n        }\n        $params = array_merge((array) $this->getConditionVariablesFromSetCondition(), $params);\n\n        $this->setConditionVariables($params);\n\n        foreach ($params as $pkey => $param) {\n            if (is_array($param)) {\n                if (isset($param[0]) && is_string($param[0])) {\n                    $conditionVariableTypes[$pkey] = Connection::PARAM_STR_ARRAY;\n                } else {\n                    $conditionVariableTypes[$pkey] = Connection::PARAM_INT_ARRAY;\n                }\n            } else {\n                if (is_bool($param)) {\n                    $type = \\PDO::PARAM_BOOL;\n                } elseif (is_int($param)) {\n                    $type = \\PDO::PARAM_INT;\n                } elseif (is_null($param)) {\n                    $type = \\PDO::PARAM_NULL;\n                } else {\n                    $type = \\PDO::PARAM_STR;\n                }\n\n                $conditionVariableTypes[$pkey] = $type;\n            }\n        }\n\n        $this->setConditionVariableTypes($conditionVariableTypes);\n\n        $condition = $this->condition . $conditionString;\n\n        return $condition;\n    }\n\n    /**\n     * @param string $condition\n     * @param array|scalar $conditionVariables\n     *\n     * @return $this\n     */\n    public function setCondition($condition, $conditionVariables = null)\n    {\n        $this->setData(null);\n\n        $this->condition = $condition;\n\n        // statement variables\n        if (is_array($conditionVariables)) {\n            $this->setConditionVariablesFromSetCondition($conditionVariables);\n        } elseif ($conditionVariables !== null) {\n            $this->setConditionVariablesFromSetCondition([$conditionVariables]);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGroupBy()\n    {\n        return $this->groupBy;\n    }\n\n    /**\n     * @return array\n     */\n    public function getValidOrders()\n    {\n        return $this->validOrders;\n    }\n\n    /**\n     * @param string $groupBy\n     * @param bool $qoute\n     *\n     * @return $this\n     */\n    public function setGroupBy($groupBy, $qoute = true)\n    {\n        $this->setData(null);\n\n        if ($groupBy) {\n            $this->groupBy = $groupBy;\n\n          if ($qoute) {\n                $quotedParts = [];\n                $parts = explode(\",\", trim($groupBy, '`'));\n                foreach($parts as $part) {\n                    $quotedParts[] = $this->quoteIdentifier(trim($part));\n                }\n\n                $this->groupBy = implode(\", \", $quotedParts);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param array $validOrders\n     *\n     * @return $this\n     */\n    public function setValidOrders($validOrders)\n    {\n        $this->validOrders = $validOrders;\n\n        return $this;\n    }\n\n    public function quoteIdentifier(string $value): string\n    {\n        $db = Db::get();\n\n        return $db->quoteIdentifier($value);\n    }\n\n    /**\n     * @param mixed $value\n     * @param int|null $type\n     *\n     * @return string\n     */\n    public function quote($value, $type = null)\n    {\n        $db = Db::get();\n\n        return $db->quote($value, $type);\n    }\n\n    /**\n     * @param string $value\n     *\n     * @return string\n     */\n    public function escapeLike(string $value): string\n    {\n        $db = Db::get();\n\n        return $db->escapeLike($value);\n    }\n\n    /**\n     * @param array $conditionVariables\n     *\n     * @return $this\n     */\n    public function setConditionVariables($conditionVariables)\n    {\n        $this->conditionVariables = $conditionVariables;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionVariables()\n    {\n        if (!$this->conditionVariables) {\n            $this->getCondition();\n        }\n\n        return $this->conditionVariables;\n    }\n\n    /**\n     * @param array $conditionVariables\n     *\n     * @return $this\n     */\n    public function setConditionVariablesFromSetCondition($conditionVariables)\n    {\n        $this->setData(null);\n\n        $this->conditionVariablesFromSetCondition = $conditionVariables;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConditionVariablesFromSetCondition()\n    {\n        return $this->conditionVariablesFromSetCondition;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isLoaded()\n    {\n        return $this->data !== null;\n    }\n\n    /**\n     * @return array\n     */\n    public function getData()\n    {\n        if ($this->data === null) {\n            $this->getDao()->load();\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param array|null $data\n     *\n     * @return static\n     */\n    public function setData(?array $data): self\n    {\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    #[\\ReturnTypeWillChange]\n    public function current()// : mixed\n    {\n        $this->getData();\n\n        return current($this->data);\n    }\n\n    /**\n     * @return int|string|null\n     */\n    #[\\ReturnTypeWillChange]\n    public function key()// : mixed\n    {\n        $this->getData();\n\n        return key($this->data);\n    }\n\n    /**\n     * @return void\n     */\n    #[\\ReturnTypeWillChange]\n    public function next()// : void\n    {\n        $this->getData();\n        next($this->data);\n    }\n\n    /**\n     * @return bool\n     */\n    #[\\ReturnTypeWillChange]\n    public function valid()// : bool\n    {\n        $this->getData();\n\n        return $this->current() !== false;\n    }\n\n    /**\n     * @return void\n     */\n    #[\\ReturnTypeWillChange]\n    public function rewind()// : void\n    {\n        $this->getData();\n        reset($this->data);\n    }\n\n    /**\n     * @return int\n     */\n    #[\\ReturnTypeWillChange]\n    public function count()// : int\n    {\n        return $this->getDao()->getTotalCount();\n    }\n}\n"], "filenames": ["lib/Model/Listing/AbstractListing.php"], "buggy_code_start_loc": [238], "buggy_code_end_loc": [431], "fixing_code_start_loc": [238], "fixing_code_end_loc": [445], "type": "CWE-89", "message": "Pimcore is an Open Source Data & Experience Management Platform. Pimcore offers developers listing classes to make querying data easier. This listing classes also allow to order or group the results based on one or more columns which should be quoted by default. The actual issue is that quoting is not done properly in both cases, so there's the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and so relies on the auto-quoting being done by the listing classes. This issue has been resolved in version 10.4.4. Users are advised to upgrade or to apple the patch manually. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-31092", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-27T22:15:08.987", "lastModified": "2022-07-08T18:49:24.203", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore is an Open Source Data & Experience Management Platform. Pimcore offers developers listing classes to make querying data easier. This listing classes also allow to order or group the results based on one or more columns which should be quoted by default. The actual issue is that quoting is not done properly in both cases, so there's the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and so relies on the auto-quoting being done by the listing classes. This issue has been resolved in version 10.4.4. Users are advised to upgrade or to apple the patch manually. There are no known workarounds for this issue."}, {"lang": "es", "value": "Pimcore es una plataforma de administraci\u00f3n de datos y experiencias de c\u00f3digo abierto. Pimcore ofrece a desarrolladores clases de listado para facilitar la consulta de datos. Estas clases de listado tambi\u00e9n permiten ordenar o agrupar los resultados en base a una o m\u00e1s columnas que deber\u00edan ser citadas por defecto. El problema actual es que el entrecomillado no es realizado apropiadamente en ambos casos, por lo que se presenta la posibilidad te\u00f3rica de inyectar SQL personalizado si el desarrollador usa estos m\u00e9todos con datos de entrada y no realiza una comprobaci\u00f3n de entrada apropiada de antemano, por lo que conf\u00eda en el autocitado que realizan las clases de listado. Este problema ha sido resuelto en versi\u00f3n 10.4.4. Es recomendado a usuarios actualizar o aplicar el parche manualmente. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.4.4", "matchCriteriaId": "BD0CD377-E7E0-479B-88C4-ECDD6250876F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/pull/12444", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/security/advisories/GHSA-gvmf-wcx6-p974", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549"}}