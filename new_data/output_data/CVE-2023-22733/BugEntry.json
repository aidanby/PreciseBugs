{"buggy_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Flow\\Dispatching\\Action;\n\nuse Doctrine\\DBAL\\Connection;\nuse Psr\\Log\\LoggerInterface;\nuse Shopware\\Core\\Checkout\\Document\\DocumentCollection;\nuse Shopware\\Core\\Checkout\\Document\\DocumentService;\nuse Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator;\nuse Shopware\\Core\\Content\\ContactForm\\Event\\ContactFormEvent;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\DelayableAction;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\StorableFlow;\nuse Shopware\\Core\\Content\\Flow\\Events\\FlowSendMailActionEvent;\nuse Shopware\\Core\\Content\\Mail\\Service\\AbstractMailService;\nuse Shopware\\Core\\Content\\MailTemplate\\Exception\\MailEventConfigurationException;\nuse Shopware\\Core\\Content\\MailTemplate\\Exception\\SalesChannelNotFoundException;\nuse Shopware\\Core\\Content\\MailTemplate\\MailTemplateActions;\nuse Shopware\\Core\\Content\\MailTemplate\\MailTemplateEntity;\nuse Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriberConfig;\nuse Shopware\\Core\\Content\\Media\\MediaCollection;\nuse Shopware\\Core\\Content\\Media\\MediaEntity;\nuse Shopware\\Core\\Content\\Media\\MediaService;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Adapter\\Translation\\Translator;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Doctrine\\FetchModeHelper;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InconsistentCriteriaIdsException;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\Event\\FlowEvent;\nuse Shopware\\Core\\Framework\\Event\\MailAware;\nuse Shopware\\Core\\Framework\\Event\\OrderAware;\nuse Shopware\\Core\\Framework\\Feature;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\DataBag;\nuse Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @package business-ops\n *\n * @deprecated tag:v6.5.0 - reason:remove-subscriber - FlowActions won't be executed over the event system anymore,\n * therefore the actions won't implement the EventSubscriberInterface anymore.\n */\nclass SendMailAction extends FlowAction implements DelayableAction\n{\n    public const ACTION_NAME = MailTemplateActions::MAIL_TEMPLATE_MAIL_SEND_ACTION;\n    public const MAIL_CONFIG_EXTENSION = 'mail-attachments';\n    private const RECIPIENT_CONFIG_ADMIN = 'admin';\n    private const RECIPIENT_CONFIG_CUSTOM = 'custom';\n    private const RECIPIENT_CONFIG_CONTACT_FORM_MAIL = 'contactFormMail';\n\n    private EntityRepositoryInterface $mailTemplateRepository;\n\n    private MediaService $mediaService;\n\n    private EntityRepositoryInterface $mediaRepository;\n\n    private EntityRepositoryInterface $documentRepository;\n\n    private LoggerInterface $logger;\n\n    private AbstractMailService $emailService;\n\n    private EventDispatcherInterface $eventDispatcher;\n\n    private EntityRepositoryInterface $mailTemplateTypeRepository;\n\n    private Translator $translator;\n\n    private Connection $connection;\n\n    private LanguageLocaleCodeProvider $languageLocaleProvider;\n\n    private bool $updateMailTemplate;\n\n    private DocumentGenerator $documentGenerator;\n\n    private DocumentService $documentService;\n\n    /**\n     * @internal\n     */\n    public function __construct(\n        AbstractMailService $emailService,\n        EntityRepositoryInterface $mailTemplateRepository,\n        MediaService $mediaService,\n        EntityRepositoryInterface $mediaRepository,\n        EntityRepositoryInterface $documentRepository,\n        DocumentService $documentService,\n        DocumentGenerator $documentGenerator,\n        LoggerInterface $logger,\n        EventDispatcherInterface $eventDispatcher,\n        EntityRepositoryInterface $mailTemplateTypeRepository,\n        Translator $translator,\n        Connection $connection,\n        LanguageLocaleCodeProvider $languageLocaleProvider,\n        bool $updateMailTemplate\n    ) {\n        $this->mailTemplateRepository = $mailTemplateRepository;\n        $this->mediaService = $mediaService;\n        $this->mediaRepository = $mediaRepository;\n        $this->documentRepository = $documentRepository;\n        $this->logger = $logger;\n        $this->emailService = $emailService;\n        $this->eventDispatcher = $eventDispatcher;\n        $this->mailTemplateTypeRepository = $mailTemplateTypeRepository;\n        $this->translator = $translator;\n        $this->connection = $connection;\n        $this->languageLocaleProvider = $languageLocaleProvider;\n        $this->updateMailTemplate = $updateMailTemplate;\n        $this->documentGenerator = $documentGenerator;\n        $this->documentService = $documentService;\n    }\n\n    public static function getName(): string\n    {\n        return 'action.mail.send';\n    }\n\n    /**\n     * @deprecated tag:v6.5.0 - reason:remove-subscriber - Will be removed\n     */\n    public static function getSubscribedEvents(): array\n    {\n        if (Feature::isActive('v6.5.0.0')) {\n            return [];\n        }\n\n        return [\n            self::getName() => 'handle',\n        ];\n    }\n\n    /**\n     * @return array<string>\n     */\n    public function requirements(): array\n    {\n        return [MailAware::class];\n    }\n\n    /**\n     * @deprecated tag:v6.5.0 Will be removed, implement handleFlow instead\n     *\n     * @throws MailEventConfigurationException\n     * @throws SalesChannelNotFoundException\n     * @throws InconsistentCriteriaIdsException\n     */\n    public function handle(Event $event): void\n    {\n        Feature::triggerDeprecationOrThrow(\n            'v6.5.0.0',\n            Feature::deprecatedMethodMessage(__CLASS__, __METHOD__, 'v6.5.0.0')\n        );\n\n        if (!$event instanceof FlowEvent) {\n            return;\n        }\n\n        $mailEvent = $event->getEvent();\n\n        $extension = $event->getContext()->getExtension(self::MAIL_CONFIG_EXTENSION);\n        if (!$extension instanceof MailSendSubscriberConfig) {\n            $extension = new MailSendSubscriberConfig(false, [], []);\n        }\n\n        if ($extension->skip()) {\n            return;\n        }\n\n        if (!$mailEvent instanceof MailAware) {\n            throw new MailEventConfigurationException('Not an instance of MailAware', \\get_class($mailEvent));\n        }\n\n        $eventConfig = $event->getConfig();\n\n        if (empty($eventConfig['recipient'])) {\n            throw new MailEventConfigurationException('The recipient value in the flow action configuration is missing.', \\get_class($mailEvent));\n        }\n\n        if (!isset($eventConfig['mailTemplateId'])) {\n            return;\n        }\n\n        $mailTemplate = $this->getMailTemplate($eventConfig['mailTemplateId'], $event->getContext());\n\n        if ($mailTemplate === null) {\n            return;\n        }\n\n        $injectedTranslator = $this->injectTranslator($mailEvent->getContext(), $mailEvent->getSalesChannelId());\n\n        $data = new DataBag();\n\n        $contactFormData = [];\n        if ($mailEvent instanceof ContactFormEvent) {\n            $contactFormData = $mailEvent->getContactFormData();\n        }\n\n        $recipients = $this->getRecipients($eventConfig['recipient'], $mailEvent->getMailStruct()->getRecipients(), $contactFormData);\n\n        if (empty($recipients)) {\n            return;\n        }\n\n        $data->set('recipients', $recipients);\n        $data->set('senderName', $mailTemplate->getTranslation('senderName'));\n        $data->set('salesChannelId', $mailEvent->getSalesChannelId());\n\n        $data->set('templateId', $mailTemplate->getId());\n        $data->set('customFields', $mailTemplate->getCustomFields());\n        $data->set('contentHtml', $mailTemplate->getTranslation('contentHtml'));\n        $data->set('contentPlain', $mailTemplate->getTranslation('contentPlain'));\n        $data->set('subject', $mailTemplate->getTranslation('subject'));\n        $data->set('mediaIds', []);\n\n        $attachments = array_unique($this->buildAttachments(\n            $event->getContext(),\n            $mailTemplate,\n            $extension,\n            $eventConfig,\n            $mailEvent instanceof OrderAware ? $mailEvent->getOrderId() : null\n        ), \\SORT_REGULAR);\n\n        if (!empty($attachments)) {\n            $data->set('binAttachments', $attachments);\n        }\n\n        $this->eventDispatcher->dispatch(new FlowSendMailActionEvent($data, $mailTemplate, $event));\n\n        if ($data->has('templateId')) {\n            $this->updateMailTemplateType(\n                $event->getContext(),\n                $event,\n                $this->getTemplateData($mailEvent),\n                $mailTemplate\n            );\n        }\n\n        $this->send($data, $event->getContext(), $this->getTemplateData($mailEvent), $attachments, $extension, $injectedTranslator);\n    }\n\n    /**\n     * @throws MailEventConfigurationException\n     * @throws SalesChannelNotFoundException\n     * @throws InconsistentCriteriaIdsException\n     */\n    public function handleFlow(StorableFlow $flow): void\n    {\n        $extension = $flow->getContext()->getExtension(self::MAIL_CONFIG_EXTENSION);\n        if (!$extension instanceof MailSendSubscriberConfig) {\n            $extension = new MailSendSubscriberConfig(false, [], []);\n        }\n\n        if ($extension->skip()) {\n            return;\n        }\n\n        if (!$flow->hasStore(MailAware::MAIL_STRUCT) || !$flow->hasStore(MailAware::SALES_CHANNEL_ID)) {\n            throw new MailEventConfigurationException('Not have data from MailAware', \\get_class($flow));\n        }\n\n        $eventConfig = $flow->getConfig();\n        if (empty($eventConfig['recipient'])) {\n            throw new MailEventConfigurationException('The recipient value in the flow action configuration is missing.', \\get_class($flow));\n        }\n\n        if (!isset($eventConfig['mailTemplateId'])) {\n            return;\n        }\n\n        $mailTemplate = $this->getMailTemplate($eventConfig['mailTemplateId'], $flow->getContext());\n\n        if ($mailTemplate === null) {\n            return;\n        }\n\n        $injectedTranslator = $this->injectTranslator($flow->getContext(), $flow->getStore(MailAware::SALES_CHANNEL_ID));\n\n        $data = new DataBag();\n\n        $recipients = $this->getRecipients(\n            $eventConfig['recipient'],\n            $flow->getStore(MailAware::MAIL_STRUCT)['recipients'],\n            $flow->getStore('contactFormData', []),\n        );\n\n        if (empty($recipients)) {\n            return;\n        }\n\n        $data->set('recipients', $recipients);\n        $data->set('senderName', $mailTemplate->getTranslation('senderName'));\n        $data->set('salesChannelId', $flow->getStore(MailAware::SALES_CHANNEL_ID));\n\n        $data->set('templateId', $mailTemplate->getId());\n        $data->set('customFields', $mailTemplate->getCustomFields());\n        $data->set('contentHtml', $mailTemplate->getTranslation('contentHtml'));\n        $data->set('contentPlain', $mailTemplate->getTranslation('contentPlain'));\n        $data->set('subject', $mailTemplate->getTranslation('subject'));\n        $data->set('mediaIds', []);\n\n        $attachments = array_unique($this->buildAttachments(\n            $flow->getContext(),\n            $mailTemplate,\n            $extension,\n            $eventConfig,\n            $flow->getStore(OrderAware::ORDER_ID),\n        ), \\SORT_REGULAR);\n\n        if (!empty($attachments)) {\n            $data->set('binAttachments', $attachments);\n        }\n\n        $this->eventDispatcher->dispatch(new FlowSendMailActionEvent($data, $mailTemplate, $flow));\n\n        if ($data->has('templateId')) {\n            $this->updateMailTemplateType(\n                $flow->getContext(),\n                $flow,\n                $flow->data(),\n                $mailTemplate\n            );\n        }\n\n        $templateData = array_merge([\n            'eventName' => $flow->getName(),\n        ], $flow->data());\n\n        $this->send($data, $flow->getContext(), $templateData, $attachments, $extension, $injectedTranslator);\n    }\n\n    /**\n     * @param array<string, mixed> $templateData\n     * @param array<mixed, mixed> $attachments\n     */\n    private function send(DataBag $data, Context $context, array $templateData, array $attachments, MailSendSubscriberConfig $extension, bool $injectedTranslator): void\n    {\n        try {\n            $this->emailService->send(\n                $data->all(),\n                $context,\n                $templateData\n            );\n\n            $documentAttachments = array_filter($attachments, function (array $attachment) use ($extension) {\n                return \\array_key_exists('id', $attachment) && \\in_array($attachment['id'], $extension->getDocumentIds(), true);\n            });\n\n            $documentAttachments = array_column($documentAttachments, 'id');\n\n            if (!empty($documentAttachments)) {\n                $this->connection->executeStatement(\n                    'UPDATE `document` SET `updated_at` = :now, `sent` = 1 WHERE `id` IN (:ids)',\n                    ['ids' => Uuid::fromHexToBytesList($documentAttachments), 'now' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)],\n                    ['ids' => Connection::PARAM_STR_ARRAY]\n                );\n            }\n        } catch (\\Exception $e) {\n            $this->logger->error(\n                \"Could not send mail:\\n\"\n                . $e->getMessage() . \"\\n\"\n                . 'Error Code:' . $e->getCode() . \"\\n\"\n                . \"Template data: \\n\"\n                . json_encode($data->all()) . \"\\n\"\n            );\n        }\n\n        if ($injectedTranslator) {\n            $this->translator->resetInjection();\n        }\n    }\n\n    /**\n     * @param FlowEvent|StorableFlow $event\n     * @param array<string, mixed> $templateData\n     */\n    private function updateMailTemplateType(\n        Context $context,\n        $event,\n        array $templateData,\n        MailTemplateEntity $mailTemplate\n    ): void {\n        if (!$mailTemplate->getMailTemplateTypeId()) {\n            return;\n        }\n\n        if (!$this->updateMailTemplate) {\n            return;\n        }\n\n        $mailTemplateTypeTranslation = $this->connection->fetchOne(\n            'SELECT 1 FROM mail_template_type_translation WHERE language_id = :languageId AND mail_template_type_id =:mailTemplateTypeId',\n            [\n                'languageId' => Uuid::fromHexToBytes($context->getLanguageId()),\n                'mailTemplateTypeId' => Uuid::fromHexToBytes($mailTemplate->getMailTemplateTypeId()),\n            ]\n        );\n\n        if (!$mailTemplateTypeTranslation) {\n            // Don't throw errors if this fails // Fix with NEXT-15475\n            $this->logger->error(\n                \"Could not update mail template type, because translation for this language does not exits:\\n\"\n                . 'Flow id: ' . $event->getFlowState()->flowId . \"\\n\"\n                . 'Sequence id: ' . $event->getFlowState()->getSequenceId()\n            );\n\n            return;\n        }\n\n        $this->mailTemplateTypeRepository->update([[\n            'id' => $mailTemplate->getMailTemplateTypeId(),\n            'templateData' => $templateData,\n        ]], $context);\n    }\n\n    private function getMailTemplate(string $id, Context $context): ?MailTemplateEntity\n    {\n        $criteria = new Criteria([$id]);\n        $criteria->setTitle('send-mail::load-mail-template');\n        $criteria->addAssociation('media.media');\n        $criteria->setLimit(1);\n\n        return $this->mailTemplateRepository\n            ->search($criteria, $context)\n            ->first();\n    }\n\n    /**\n     * @throws MailEventConfigurationException\n     *\n     * @return array<string, mixed>\n     */\n    private function getTemplateData(MailAware $event): array\n    {\n        $data = [];\n\n        foreach (array_keys($event::getAvailableData()->toArray()) as $key) {\n            $getter = 'get' . ucfirst($key);\n            if (!method_exists($event, $getter)) {\n                throw new MailEventConfigurationException('Data for ' . $key . ' not available.', \\get_class($event));\n            }\n            $data[$key] = $event->$getter();\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param array<string, mixed> $eventConfig\n     *\n     * @return array<mixed, mixed>\n     */\n    private function buildAttachments(\n        Context $context,\n        MailTemplateEntity $mailTemplate,\n        MailSendSubscriberConfig $extensions,\n        array $eventConfig,\n        ?string $orderId\n    ): array {\n        $attachments = [];\n\n        if ($mailTemplate->getMedia() !== null) {\n            foreach ($mailTemplate->getMedia() as $mailTemplateMedia) {\n                if ($mailTemplateMedia->getMedia() === null) {\n                    continue;\n                }\n                if ($mailTemplateMedia->getLanguageId() !== null && $mailTemplateMedia->getLanguageId() !== $context->getLanguageId()) {\n                    continue;\n                }\n\n                $attachments[] = $this->mediaService->getAttachment(\n                    $mailTemplateMedia->getMedia(),\n                    $context\n                );\n            }\n        }\n\n        if (!empty($extensions->getMediaIds())) {\n            $criteria = new Criteria($extensions->getMediaIds());\n            $criteria->setTitle('send-mail::load-media');\n\n            /** @var MediaCollection<MediaEntity> $entities */\n            $entities = $this->mediaRepository->search($criteria, $context);\n\n            foreach ($entities as $media) {\n                $attachments[] = $this->mediaService->getAttachment($media, $context);\n            }\n        }\n\n        $documentIds = $extensions->getDocumentIds();\n\n        if (!empty($eventConfig['documentTypeIds']) && \\is_array($eventConfig['documentTypeIds']) && $orderId) {\n            $latestDocuments = $this->getLatestDocumentsOfTypes($orderId, $eventConfig['documentTypeIds']);\n\n            $documentIds = array_unique(array_merge($documentIds, $latestDocuments));\n        }\n\n        if (!empty($documentIds)) {\n            $extensions->setDocumentIds($documentIds);\n            if (Feature::isActive('v6.5.0.0')) {\n                $attachments = $this->mappingAttachments($documentIds, $attachments, $context);\n            } else {\n                $attachments = $this->buildOrderAttachments($documentIds, $attachments, $context);\n            }\n        }\n\n        return $attachments;\n    }\n\n    private function injectTranslator(Context $context, ?string $salesChannelId): bool\n    {\n        if ($salesChannelId === null) {\n            return false;\n        }\n\n        if ($this->translator->getSnippetSetId() !== null) {\n            return false;\n        }\n\n        $this->translator->injectSettings(\n            $salesChannelId,\n            $context->getLanguageId(),\n            $this->languageLocaleProvider->getLocaleForLanguageId($context->getLanguageId()),\n            $context\n        );\n\n        return true;\n    }\n\n    /**\n     * @param array<string, mixed> $recipients\n     * @param array<string, mixed> $mailStructRecipients\n     * @param array<int|string, mixed> $contactFormData\n     *\n     * @return array<int|string, string>\n     */\n    private function getRecipients(array $recipients, array $mailStructRecipients, array $contactFormData): array\n    {\n        switch ($recipients['type']) {\n            case self::RECIPIENT_CONFIG_CUSTOM:\n                return $recipients['data'];\n            case self::RECIPIENT_CONFIG_ADMIN:\n                $admins = $this->connection->fetchAllAssociative(\n                    'SELECT first_name, last_name, email FROM user WHERE admin = true'\n                );\n                $emails = [];\n                foreach ($admins as $admin) {\n                    $emails[$admin['email']] = $admin['first_name'] . ' ' . $admin['last_name'];\n                }\n\n                return $emails;\n            case self::RECIPIENT_CONFIG_CONTACT_FORM_MAIL:\n                if (empty($contactFormData)) {\n                    return [];\n                }\n\n                if (!\\array_key_exists('email', $contactFormData)) {\n                    return [];\n                }\n\n                return [$contactFormData['email'] => ($contactFormData['firstName'] ?? '') . ' ' . ($contactFormData['lastName'] ?? '')];\n            default:\n                return $mailStructRecipients;\n        }\n    }\n\n    /**\n     * @param array<string> $documentIds\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function buildOrderAttachments(array $documentIds, array $attachments, Context $context): array\n    {\n        $criteria = new Criteria($documentIds);\n        $criteria->setTitle('send-mail::load-attachments');\n        $criteria->addAssociation('documentMediaFile');\n        $criteria->addAssociation('documentType');\n\n        /** @var DocumentCollection $documents */\n        $documents = $this->documentRepository->search($criteria, $context)->getEntities();\n\n        return $this->mappingAttachmentsInfo($documents, $attachments, $context);\n    }\n\n    /**\n     * @param array<string> $documentTypeIds\n     *\n     * @return array<string>\n     */\n    private function getLatestDocumentsOfTypes(string $orderId, array $documentTypeIds): array\n    {\n        $documents = $this->connection->fetchAllAssociative(\n            'SELECT\n                LOWER(hex(`document`.`document_type_id`)) as doc_type,\n                LOWER(hex(`document`.`id`)) as doc_id,\n                `document`.`created_at` as newest_date\n            FROM\n                `document`\n            WHERE\n                HEX(`document`.`order_id`) = :orderId\n                AND HEX(`document`.`document_type_id`) IN (:documentTypeIds)\n            ORDER BY `document`.`created_at` DESC',\n            [\n                'orderId' => $orderId,\n                'documentTypeIds' => $documentTypeIds,\n            ],\n            [\n                'documentTypeIds' => Connection::PARAM_STR_ARRAY,\n            ]\n        );\n\n        $documentsGroupByType = FetchModeHelper::group($documents);\n\n        $documentIds = [];\n\n        foreach ($documentsGroupByType as $document) {\n            $documentIds[] = array_shift($document)['doc_id'];\n        }\n\n        return $documentIds;\n    }\n\n    /**\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function mappingAttachmentsInfo(DocumentCollection $documents, array $attachments, Context $context): array\n    {\n        foreach ($documents as $document) {\n            $documentId = $document->getId();\n            $document = $this->documentService->getDocument($document, $context);\n\n            $attachments[] = [\n                'id' => $documentId,\n                'content' => $document->getFileBlob(),\n                'fileName' => $document->getFilename(),\n                'mimeType' => $document->getContentType(),\n            ];\n        }\n\n        return $attachments;\n    }\n\n    /**\n     * @param array<string> $documentIds\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function mappingAttachments(array $documentIds, array $attachments, Context $context): array\n    {\n        foreach ($documentIds as $documentId) {\n            $document = $this->documentGenerator->readDocument($documentId, $context);\n\n            if ($document === null) {\n                continue;\n            }\n\n            $attachments[] = [\n                'id' => $documentId,\n                'content' => $document->getContent(),\n                'fileName' => $document->getName(),\n                'mimeType' => $document->getContentType(),\n            ];\n        }\n\n        return $attachments;\n    }\n}\n"], "fixing_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Flow\\Dispatching\\Action;\n\nuse Doctrine\\DBAL\\Connection;\nuse Psr\\Log\\LoggerInterface;\nuse Shopware\\Core\\Checkout\\Document\\DocumentCollection;\nuse Shopware\\Core\\Checkout\\Document\\DocumentService;\nuse Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator;\nuse Shopware\\Core\\Content\\ContactForm\\Event\\ContactFormEvent;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\DelayableAction;\nuse Shopware\\Core\\Content\\Flow\\Dispatching\\StorableFlow;\nuse Shopware\\Core\\Content\\Flow\\Events\\FlowSendMailActionEvent;\nuse Shopware\\Core\\Content\\Mail\\Service\\AbstractMailService;\nuse Shopware\\Core\\Content\\MailTemplate\\Exception\\MailEventConfigurationException;\nuse Shopware\\Core\\Content\\MailTemplate\\Exception\\SalesChannelNotFoundException;\nuse Shopware\\Core\\Content\\MailTemplate\\MailTemplateActions;\nuse Shopware\\Core\\Content\\MailTemplate\\MailTemplateEntity;\nuse Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriberConfig;\nuse Shopware\\Core\\Content\\Media\\MediaCollection;\nuse Shopware\\Core\\Content\\Media\\MediaEntity;\nuse Shopware\\Core\\Content\\Media\\MediaService;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Adapter\\Translation\\Translator;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Doctrine\\FetchModeHelper;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InconsistentCriteriaIdsException;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\Event\\FlowEvent;\nuse Shopware\\Core\\Framework\\Event\\MailAware;\nuse Shopware\\Core\\Framework\\Event\\OrderAware;\nuse Shopware\\Core\\Framework\\Feature;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\DataBag;\nuse Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @package business-ops\n *\n * @deprecated tag:v6.5.0 - reason:remove-subscriber - FlowActions won't be executed over the event system anymore,\n * therefore the actions won't implement the EventSubscriberInterface anymore.\n */\nclass SendMailAction extends FlowAction implements DelayableAction\n{\n    public const ACTION_NAME = MailTemplateActions::MAIL_TEMPLATE_MAIL_SEND_ACTION;\n    public const MAIL_CONFIG_EXTENSION = 'mail-attachments';\n    private const RECIPIENT_CONFIG_ADMIN = 'admin';\n    private const RECIPIENT_CONFIG_CUSTOM = 'custom';\n    private const RECIPIENT_CONFIG_CONTACT_FORM_MAIL = 'contactFormMail';\n\n    private EntityRepositoryInterface $mailTemplateRepository;\n\n    private MediaService $mediaService;\n\n    private EntityRepositoryInterface $mediaRepository;\n\n    private EntityRepositoryInterface $documentRepository;\n\n    private LoggerInterface $logger;\n\n    private AbstractMailService $emailService;\n\n    private EventDispatcherInterface $eventDispatcher;\n\n    private EntityRepositoryInterface $mailTemplateTypeRepository;\n\n    private Translator $translator;\n\n    private Connection $connection;\n\n    private LanguageLocaleCodeProvider $languageLocaleProvider;\n\n    private bool $updateMailTemplate;\n\n    private DocumentGenerator $documentGenerator;\n\n    private DocumentService $documentService;\n\n    /**\n     * @internal\n     */\n    public function __construct(\n        AbstractMailService $emailService,\n        EntityRepositoryInterface $mailTemplateRepository,\n        MediaService $mediaService,\n        EntityRepositoryInterface $mediaRepository,\n        EntityRepositoryInterface $documentRepository,\n        DocumentService $documentService,\n        DocumentGenerator $documentGenerator,\n        LoggerInterface $logger,\n        EventDispatcherInterface $eventDispatcher,\n        EntityRepositoryInterface $mailTemplateTypeRepository,\n        Translator $translator,\n        Connection $connection,\n        LanguageLocaleCodeProvider $languageLocaleProvider,\n        bool $updateMailTemplate\n    ) {\n        $this->mailTemplateRepository = $mailTemplateRepository;\n        $this->mediaService = $mediaService;\n        $this->mediaRepository = $mediaRepository;\n        $this->documentRepository = $documentRepository;\n        $this->logger = $logger;\n        $this->emailService = $emailService;\n        $this->eventDispatcher = $eventDispatcher;\n        $this->mailTemplateTypeRepository = $mailTemplateTypeRepository;\n        $this->translator = $translator;\n        $this->connection = $connection;\n        $this->languageLocaleProvider = $languageLocaleProvider;\n        $this->updateMailTemplate = $updateMailTemplate;\n        $this->documentGenerator = $documentGenerator;\n        $this->documentService = $documentService;\n    }\n\n    public static function getName(): string\n    {\n        return 'action.mail.send';\n    }\n\n    /**\n     * @deprecated tag:v6.5.0 - reason:remove-subscriber - Will be removed\n     */\n    public static function getSubscribedEvents(): array\n    {\n        if (Feature::isActive('v6.5.0.0')) {\n            return [];\n        }\n\n        return [\n            self::getName() => 'handle',\n        ];\n    }\n\n    /**\n     * @return array<string>\n     */\n    public function requirements(): array\n    {\n        return [MailAware::class];\n    }\n\n    /**\n     * @deprecated tag:v6.5.0 Will be removed, implement handleFlow instead\n     *\n     * @throws MailEventConfigurationException\n     * @throws SalesChannelNotFoundException\n     * @throws InconsistentCriteriaIdsException\n     */\n    public function handle(Event $event): void\n    {\n        Feature::triggerDeprecationOrThrow(\n            'v6.5.0.0',\n            Feature::deprecatedMethodMessage(__CLASS__, __METHOD__, 'v6.5.0.0')\n        );\n\n        if (!$event instanceof FlowEvent) {\n            return;\n        }\n\n        $mailEvent = $event->getEvent();\n\n        $extension = $event->getContext()->getExtension(self::MAIL_CONFIG_EXTENSION);\n        if (!$extension instanceof MailSendSubscriberConfig) {\n            $extension = new MailSendSubscriberConfig(false, [], []);\n        }\n\n        if ($extension->skip()) {\n            return;\n        }\n\n        if (!$mailEvent instanceof MailAware) {\n            throw new MailEventConfigurationException('Not an instance of MailAware', \\get_class($mailEvent));\n        }\n\n        $eventConfig = $event->getConfig();\n\n        if (empty($eventConfig['recipient'])) {\n            throw new MailEventConfigurationException('The recipient value in the flow action configuration is missing.', \\get_class($mailEvent));\n        }\n\n        if (!isset($eventConfig['mailTemplateId'])) {\n            return;\n        }\n\n        $mailTemplate = $this->getMailTemplate($eventConfig['mailTemplateId'], $event->getContext());\n\n        if ($mailTemplate === null) {\n            return;\n        }\n\n        $injectedTranslator = $this->injectTranslator($mailEvent->getContext(), $mailEvent->getSalesChannelId());\n\n        $data = new DataBag();\n\n        $contactFormData = [];\n        if ($mailEvent instanceof ContactFormEvent) {\n            $contactFormData = $mailEvent->getContactFormData();\n        }\n\n        $recipients = $this->getRecipients($eventConfig['recipient'], $mailEvent->getMailStruct()->getRecipients(), $contactFormData);\n\n        if (empty($recipients)) {\n            return;\n        }\n\n        $data->set('recipients', $recipients);\n        $data->set('senderName', $mailTemplate->getTranslation('senderName'));\n        $data->set('salesChannelId', $mailEvent->getSalesChannelId());\n\n        $data->set('templateId', $mailTemplate->getId());\n        $data->set('customFields', $mailTemplate->getCustomFields());\n        $data->set('contentHtml', $mailTemplate->getTranslation('contentHtml'));\n        $data->set('contentPlain', $mailTemplate->getTranslation('contentPlain'));\n        $data->set('subject', $mailTemplate->getTranslation('subject'));\n        $data->set('mediaIds', []);\n\n        $attachments = array_unique($this->buildAttachments(\n            $event->getContext(),\n            $mailTemplate,\n            $extension,\n            $eventConfig,\n            $mailEvent instanceof OrderAware ? $mailEvent->getOrderId() : null\n        ), \\SORT_REGULAR);\n\n        if (!empty($attachments)) {\n            $data->set('binAttachments', $attachments);\n        }\n\n        $this->eventDispatcher->dispatch(new FlowSendMailActionEvent($data, $mailTemplate, $event));\n\n        if ($data->has('templateId')) {\n            $this->updateMailTemplateType(\n                $event->getContext(),\n                $event,\n                $this->getTemplateData($mailEvent),\n                $mailTemplate\n            );\n        }\n\n        $templateData = array_merge([\n            'eventName' => $mailEvent->getName(),\n        ], $this->getTemplateData($mailEvent));\n\n        $this->send($data, $event->getContext(), $templateData, $attachments, $extension, $injectedTranslator);\n    }\n\n    /**\n     * @throws MailEventConfigurationException\n     * @throws SalesChannelNotFoundException\n     * @throws InconsistentCriteriaIdsException\n     */\n    public function handleFlow(StorableFlow $flow): void\n    {\n        $extension = $flow->getContext()->getExtension(self::MAIL_CONFIG_EXTENSION);\n        if (!$extension instanceof MailSendSubscriberConfig) {\n            $extension = new MailSendSubscriberConfig(false, [], []);\n        }\n\n        if ($extension->skip()) {\n            return;\n        }\n\n        if (!$flow->hasStore(MailAware::MAIL_STRUCT) || !$flow->hasStore(MailAware::SALES_CHANNEL_ID)) {\n            throw new MailEventConfigurationException('Not have data from MailAware', \\get_class($flow));\n        }\n\n        $eventConfig = $flow->getConfig();\n        if (empty($eventConfig['recipient'])) {\n            throw new MailEventConfigurationException('The recipient value in the flow action configuration is missing.', \\get_class($flow));\n        }\n\n        if (!isset($eventConfig['mailTemplateId'])) {\n            return;\n        }\n\n        $mailTemplate = $this->getMailTemplate($eventConfig['mailTemplateId'], $flow->getContext());\n\n        if ($mailTemplate === null) {\n            return;\n        }\n\n        $injectedTranslator = $this->injectTranslator($flow->getContext(), $flow->getStore(MailAware::SALES_CHANNEL_ID));\n\n        $data = new DataBag();\n\n        $recipients = $this->getRecipients(\n            $eventConfig['recipient'],\n            $flow->getStore(MailAware::MAIL_STRUCT)['recipients'],\n            $flow->getStore('contactFormData', []),\n        );\n\n        if (empty($recipients)) {\n            return;\n        }\n\n        $data->set('recipients', $recipients);\n        $data->set('senderName', $mailTemplate->getTranslation('senderName'));\n        $data->set('salesChannelId', $flow->getStore(MailAware::SALES_CHANNEL_ID));\n\n        $data->set('templateId', $mailTemplate->getId());\n        $data->set('customFields', $mailTemplate->getCustomFields());\n        $data->set('contentHtml', $mailTemplate->getTranslation('contentHtml'));\n        $data->set('contentPlain', $mailTemplate->getTranslation('contentPlain'));\n        $data->set('subject', $mailTemplate->getTranslation('subject'));\n        $data->set('mediaIds', []);\n\n        $attachments = array_unique($this->buildAttachments(\n            $flow->getContext(),\n            $mailTemplate,\n            $extension,\n            $eventConfig,\n            $flow->getStore(OrderAware::ORDER_ID),\n        ), \\SORT_REGULAR);\n\n        if (!empty($attachments)) {\n            $data->set('binAttachments', $attachments);\n        }\n\n        $this->eventDispatcher->dispatch(new FlowSendMailActionEvent($data, $mailTemplate, $flow));\n\n        if ($data->has('templateId')) {\n            $this->updateMailTemplateType(\n                $flow->getContext(),\n                $flow,\n                $flow->data(),\n                $mailTemplate\n            );\n        }\n\n        $templateData = array_merge([\n            'eventName' => $flow->getName(),\n        ], $flow->data());\n\n        $this->send($data, $flow->getContext(), $templateData, $attachments, $extension, $injectedTranslator);\n    }\n\n    /**\n     * @param array<string, mixed> $templateData\n     * @param array<mixed, mixed> $attachments\n     */\n    private function send(DataBag $data, Context $context, array $templateData, array $attachments, MailSendSubscriberConfig $extension, bool $injectedTranslator): void\n    {\n        try {\n            $this->emailService->send(\n                $data->all(),\n                $context,\n                $templateData\n            );\n\n            $documentAttachments = array_filter($attachments, function (array $attachment) use ($extension) {\n                return \\array_key_exists('id', $attachment) && \\in_array($attachment['id'], $extension->getDocumentIds(), true);\n            });\n\n            $documentAttachments = array_column($documentAttachments, 'id');\n\n            if (!empty($documentAttachments)) {\n                $this->connection->executeStatement(\n                    'UPDATE `document` SET `updated_at` = :now, `sent` = 1 WHERE `id` IN (:ids)',\n                    ['ids' => Uuid::fromHexToBytesList($documentAttachments), 'now' => (new \\DateTime())->format(Defaults::STORAGE_DATE_TIME_FORMAT)],\n                    ['ids' => Connection::PARAM_STR_ARRAY]\n                );\n            }\n        } catch (\\Exception $e) {\n            $this->logger->error(\n                \"Could not send mail:\\n\"\n                . $e->getMessage() . \"\\n\"\n                . 'Error Code:' . $e->getCode() . \"\\n\"\n                . \"Template data: \\n\"\n                . json_encode($data->all()) . \"\\n\"\n            );\n        }\n\n        if ($injectedTranslator) {\n            $this->translator->resetInjection();\n        }\n    }\n\n    /**\n     * @param FlowEvent|StorableFlow $event\n     * @param array<string, mixed> $templateData\n     */\n    private function updateMailTemplateType(\n        Context $context,\n        $event,\n        array $templateData,\n        MailTemplateEntity $mailTemplate\n    ): void {\n        if (!$mailTemplate->getMailTemplateTypeId()) {\n            return;\n        }\n\n        if (!$this->updateMailTemplate) {\n            return;\n        }\n\n        $mailTemplateTypeTranslation = $this->connection->fetchOne(\n            'SELECT 1 FROM mail_template_type_translation WHERE language_id = :languageId AND mail_template_type_id =:mailTemplateTypeId',\n            [\n                'languageId' => Uuid::fromHexToBytes($context->getLanguageId()),\n                'mailTemplateTypeId' => Uuid::fromHexToBytes($mailTemplate->getMailTemplateTypeId()),\n            ]\n        );\n\n        if (!$mailTemplateTypeTranslation) {\n            // Don't throw errors if this fails // Fix with NEXT-15475\n            $this->logger->error(\n                \"Could not update mail template type, because translation for this language does not exits:\\n\"\n                . 'Flow id: ' . $event->getFlowState()->flowId . \"\\n\"\n                . 'Sequence id: ' . $event->getFlowState()->getSequenceId()\n            );\n\n            return;\n        }\n\n        $this->mailTemplateTypeRepository->update([[\n            'id' => $mailTemplate->getMailTemplateTypeId(),\n            'templateData' => $templateData,\n        ]], $context);\n    }\n\n    private function getMailTemplate(string $id, Context $context): ?MailTemplateEntity\n    {\n        $criteria = new Criteria([$id]);\n        $criteria->setTitle('send-mail::load-mail-template');\n        $criteria->addAssociation('media.media');\n        $criteria->setLimit(1);\n\n        return $this->mailTemplateRepository\n            ->search($criteria, $context)\n            ->first();\n    }\n\n    /**\n     * @throws MailEventConfigurationException\n     *\n     * @return array<string, mixed>\n     */\n    private function getTemplateData(MailAware $event): array\n    {\n        $data = [];\n\n        foreach (array_keys($event::getAvailableData()->toArray()) as $key) {\n            $getter = 'get' . ucfirst($key);\n            if (!method_exists($event, $getter)) {\n                throw new MailEventConfigurationException('Data for ' . $key . ' not available.', \\get_class($event));\n            }\n            $data[$key] = $event->$getter();\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param array<string, mixed> $eventConfig\n     *\n     * @return array<mixed, mixed>\n     */\n    private function buildAttachments(\n        Context $context,\n        MailTemplateEntity $mailTemplate,\n        MailSendSubscriberConfig $extensions,\n        array $eventConfig,\n        ?string $orderId\n    ): array {\n        $attachments = [];\n\n        if ($mailTemplate->getMedia() !== null) {\n            foreach ($mailTemplate->getMedia() as $mailTemplateMedia) {\n                if ($mailTemplateMedia->getMedia() === null) {\n                    continue;\n                }\n                if ($mailTemplateMedia->getLanguageId() !== null && $mailTemplateMedia->getLanguageId() !== $context->getLanguageId()) {\n                    continue;\n                }\n\n                $attachments[] = $this->mediaService->getAttachment(\n                    $mailTemplateMedia->getMedia(),\n                    $context\n                );\n            }\n        }\n\n        if (!empty($extensions->getMediaIds())) {\n            $criteria = new Criteria($extensions->getMediaIds());\n            $criteria->setTitle('send-mail::load-media');\n\n            /** @var MediaCollection<MediaEntity> $entities */\n            $entities = $this->mediaRepository->search($criteria, $context);\n\n            foreach ($entities as $media) {\n                $attachments[] = $this->mediaService->getAttachment($media, $context);\n            }\n        }\n\n        $documentIds = $extensions->getDocumentIds();\n\n        if (!empty($eventConfig['documentTypeIds']) && \\is_array($eventConfig['documentTypeIds']) && $orderId) {\n            $latestDocuments = $this->getLatestDocumentsOfTypes($orderId, $eventConfig['documentTypeIds']);\n\n            $documentIds = array_unique(array_merge($documentIds, $latestDocuments));\n        }\n\n        if (!empty($documentIds)) {\n            $extensions->setDocumentIds($documentIds);\n            if (Feature::isActive('v6.5.0.0')) {\n                $attachments = $this->mappingAttachments($documentIds, $attachments, $context);\n            } else {\n                $attachments = $this->buildOrderAttachments($documentIds, $attachments, $context);\n            }\n        }\n\n        return $attachments;\n    }\n\n    private function injectTranslator(Context $context, ?string $salesChannelId): bool\n    {\n        if ($salesChannelId === null) {\n            return false;\n        }\n\n        if ($this->translator->getSnippetSetId() !== null) {\n            return false;\n        }\n\n        $this->translator->injectSettings(\n            $salesChannelId,\n            $context->getLanguageId(),\n            $this->languageLocaleProvider->getLocaleForLanguageId($context->getLanguageId()),\n            $context\n        );\n\n        return true;\n    }\n\n    /**\n     * @param array<string, mixed> $recipients\n     * @param array<string, mixed> $mailStructRecipients\n     * @param array<int|string, mixed> $contactFormData\n     *\n     * @return array<int|string, string>\n     */\n    private function getRecipients(array $recipients, array $mailStructRecipients, array $contactFormData): array\n    {\n        switch ($recipients['type']) {\n            case self::RECIPIENT_CONFIG_CUSTOM:\n                return $recipients['data'];\n            case self::RECIPIENT_CONFIG_ADMIN:\n                $admins = $this->connection->fetchAllAssociative(\n                    'SELECT first_name, last_name, email FROM user WHERE admin = true'\n                );\n                $emails = [];\n                foreach ($admins as $admin) {\n                    $emails[$admin['email']] = $admin['first_name'] . ' ' . $admin['last_name'];\n                }\n\n                return $emails;\n            case self::RECIPIENT_CONFIG_CONTACT_FORM_MAIL:\n                if (empty($contactFormData)) {\n                    return [];\n                }\n\n                if (!\\array_key_exists('email', $contactFormData)) {\n                    return [];\n                }\n\n                return [$contactFormData['email'] => ($contactFormData['firstName'] ?? '') . ' ' . ($contactFormData['lastName'] ?? '')];\n            default:\n                return $mailStructRecipients;\n        }\n    }\n\n    /**\n     * @param array<string> $documentIds\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function buildOrderAttachments(array $documentIds, array $attachments, Context $context): array\n    {\n        $criteria = new Criteria($documentIds);\n        $criteria->setTitle('send-mail::load-attachments');\n        $criteria->addAssociation('documentMediaFile');\n        $criteria->addAssociation('documentType');\n\n        /** @var DocumentCollection $documents */\n        $documents = $this->documentRepository->search($criteria, $context)->getEntities();\n\n        return $this->mappingAttachmentsInfo($documents, $attachments, $context);\n    }\n\n    /**\n     * @param array<string> $documentTypeIds\n     *\n     * @return array<string>\n     */\n    private function getLatestDocumentsOfTypes(string $orderId, array $documentTypeIds): array\n    {\n        $documents = $this->connection->fetchAllAssociative(\n            'SELECT\n                LOWER(hex(`document`.`document_type_id`)) as doc_type,\n                LOWER(hex(`document`.`id`)) as doc_id,\n                `document`.`created_at` as newest_date\n            FROM\n                `document`\n            WHERE\n                HEX(`document`.`order_id`) = :orderId\n                AND HEX(`document`.`document_type_id`) IN (:documentTypeIds)\n            ORDER BY `document`.`created_at` DESC',\n            [\n                'orderId' => $orderId,\n                'documentTypeIds' => $documentTypeIds,\n            ],\n            [\n                'documentTypeIds' => Connection::PARAM_STR_ARRAY,\n            ]\n        );\n\n        $documentsGroupByType = FetchModeHelper::group($documents);\n\n        $documentIds = [];\n\n        foreach ($documentsGroupByType as $document) {\n            $documentIds[] = array_shift($document)['doc_id'];\n        }\n\n        return $documentIds;\n    }\n\n    /**\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function mappingAttachmentsInfo(DocumentCollection $documents, array $attachments, Context $context): array\n    {\n        foreach ($documents as $document) {\n            $documentId = $document->getId();\n            $document = $this->documentService->getDocument($document, $context);\n\n            $attachments[] = [\n                'id' => $documentId,\n                'content' => $document->getFileBlob(),\n                'fileName' => $document->getFilename(),\n                'mimeType' => $document->getContentType(),\n            ];\n        }\n\n        return $attachments;\n    }\n\n    /**\n     * @param array<string> $documentIds\n     * @param array<mixed, mixed> $attachments\n     *\n     * @return array<mixed, mixed>\n     */\n    private function mappingAttachments(array $documentIds, array $attachments, Context $context): array\n    {\n        foreach ($documentIds as $documentId) {\n            $document = $this->documentGenerator->readDocument($documentId, $context);\n\n            if ($document === null) {\n                continue;\n            }\n\n            $attachments[] = [\n                'id' => $documentId,\n                'content' => $document->getContent(),\n                'fileName' => $document->getName(),\n                'mimeType' => $document->getContentType(),\n            ];\n        }\n\n        return $attachments;\n    }\n}\n"], "filenames": ["src/Core/Content/Flow/Dispatching/Action/SendMailAction.php"], "buggy_code_start_loc": [242], "buggy_code_end_loc": [243], "fixing_code_start_loc": [242], "fixing_code_end_loc": [247], "type": "CWE-532", "message": "Shopware is an open source commerce platform based on Symfony Framework and Vue js. In affected versions the log module would write out all kind of sent mails. An attacker with access to either the local system logs or a centralized logging store may have access to other users accounts. This issue has been addressed in version 6.4.18.1. For older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version. Users unable to upgrade may remove from all users the log module ACL rights or disable logging.", "other": {"cve": {"id": "CVE-2023-22733", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-17T22:15:11.227", "lastModified": "2023-01-25T14:16:42.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source commerce platform based on Symfony Framework and Vue js. In affected versions the log module would write out all kind of sent mails. An attacker with access to either the local system logs or a centralized logging store may have access to other users accounts. This issue has been addressed in version 6.4.18.1. For older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version. Users unable to upgrade may remove from all users the log module ACL rights or disable logging."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-532"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.4.18.1", "matchCriteriaId": "1BE11635-1060-43A5-B8E6-6A9335AECCDE"}]}]}], "references": [{"url": "https://developer.shopware.com/docs/guides/hosting/performance/performance-tweaks#logging", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-01-2023?category=security-updates", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/shopware/platform/commit/407a83063d7141c1a626441799c3ebef79498c07", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/platform/security/advisories/GHSA-7cp7-jfp6-jh4f", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/platform/commit/407a83063d7141c1a626441799c3ebef79498c07"}}