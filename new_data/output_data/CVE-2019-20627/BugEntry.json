{"buggy_code": ["using System;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Globalization;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Cache;\r\nusing System.Reflection;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Windows.Forms;\r\nusing System.Xml;\r\nusing AutoUpdaterDotNET.Properties;\r\nusing Microsoft.Win32;\r\n\r\nnamespace AutoUpdaterDotNET\r\n{\r\n    /// <summary>\r\n    ///     Enum representing the remind later time span.\r\n    /// </summary>\r\n    public enum RemindLaterFormat\r\n    {\r\n        /// <summary>\r\n        ///     Represents the time span in minutes.\r\n        /// </summary>\r\n        Minutes,\r\n\r\n        /// <summary>\r\n        ///     Represents the time span in hours.\r\n        /// </summary>\r\n        Hours,\r\n\r\n        /// <summary>\r\n        ///     Represents the time span in days.\r\n        /// </summary>\r\n        Days\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Enum representing the effect of Mandatory flag.\r\n    /// </summary>\r\n    public enum Mode\r\n    {\r\n        /// <summary>\r\n        /// In this mode, it ignores Remind Later and Skip values set previously and hide both buttons.\r\n        /// </summary>\r\n        Normal,\r\n\r\n        /// <summary>\r\n        /// In this mode, it won't show close button in addition to Normal mode behaviour.\r\n        /// </summary>\r\n        Forced,\r\n\r\n        /// <summary>\r\n        /// In this mode, it will start downloading and applying update without showing standarad update dialog in addition to Forced mode behaviour.\r\n        /// </summary>\r\n        ForcedDownload\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Main class that lets you auto update applications by setting some static fields and executing its Start method.\r\n    /// </summary>\r\n    public static class AutoUpdater\r\n    {\r\n        private static System.Timers.Timer _remindLaterTimer;\r\n\r\n        internal static String ChangelogURL;\r\n\r\n        internal static String DownloadURL;\r\n\r\n        internal static String InstallerArgs;\r\n\r\n        internal static String RegistryLocation;\r\n\r\n        internal static String Checksum;\r\n\r\n        internal static String HashingAlgorithm;\r\n\r\n        internal static Version CurrentVersion;\r\n\r\n        internal static Version InstalledVersion;\r\n\r\n        internal static bool IsWinFormsApplication;\r\n\r\n        internal static bool Running;\r\n\r\n        /// <summary>\r\n        ///     Set it to folder path where you want to download the update file. If not provided then it defaults to Temp folder.\r\n        /// </summary>\r\n        public static String DownloadPath;\r\n\r\n        /// <summary>\r\n        ///     Set the Application Title shown in Update dialog. Although AutoUpdater.NET will get it automatically, you can set this property if you like to give custom Title.\r\n        /// </summary>\r\n        public static String AppTitle;\r\n\r\n        /// <summary>\r\n        ///     URL of the xml file that contains information about latest version of the application.\r\n        /// </summary>\r\n        public static String AppCastURL;\r\n\r\n        /// <summary>\r\n        /// Login/password/domain for FTP-request\r\n        /// </summary>\r\n        public static NetworkCredential FtpCredentials;\r\n\r\n        /// <summary>\r\n        ///     Opens the download URL in default browser if true. Very usefull if you have portable application.\r\n        /// </summary>\r\n        public static bool OpenDownloadPage;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials required to download the file.\r\n        /// </summary>\r\n        public static IAuthentication BasicAuthDownload;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials required to download the XML file.\r\n        /// </summary>\r\n        public static IAuthentication BasicAuthXML;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials to navigate to the change log URL. \r\n        /// </summary>\r\n        public static IAuthentication BasicAuthChangeLog;\r\n\r\n        /// <summary>\r\n        ///     Set the User-Agent string to be used for HTTP web requests.\r\n        /// </summary>\r\n        public static string HttpUserAgent;\r\n        \r\n        /// <summary>\r\n        ///     If this is true users can see the skip button.\r\n        /// </summary>\r\n        public static Boolean ShowSkipButton = true;\r\n\r\n        /// <summary>\r\n        ///     If this is true users can see the Remind Later button.\r\n        /// </summary>\r\n        public static Boolean ShowRemindLaterButton = true;\r\n\r\n        /// <summary>\r\n        ///     If this is true users see dialog where they can set remind later interval otherwise it will take the interval from\r\n        ///     RemindLaterAt and RemindLaterTimeSpan fields.\r\n        /// </summary>\r\n        public static Boolean LetUserSelectRemindLater = true;\r\n\r\n        /// <summary>\r\n        ///     Remind Later interval after user should be reminded of update.\r\n        /// </summary>\r\n        public static int RemindLaterAt = 2;\r\n\r\n        ///<summary>\r\n        ///     AutoUpdater.NET will report errors if this is true.\r\n        /// </summary>\r\n        public static bool ReportErrors = false;\r\n\r\n        /// <summary>\r\n        ///     Set this to false if your application doesn't need administrator privileges to replace the old version.\r\n        /// </summary>\r\n        public static bool RunUpdateAsAdmin = true;\r\n\r\n        ///<summary>\r\n        ///     Set this to true if you want to ignore previously assigned Remind Later and Skip settings. It will also hide Remind Later and Skip buttons.\r\n        /// </summary>\r\n        public static bool Mandatory;\r\n\r\n        /// <summary>\r\n        ///     Set this to any of the available modes to change behaviour of the Mandatory flag.\r\n        /// </summary>\r\n        public static Mode UpdateMode;\r\n\r\n        /// <summary>\r\n        ///     Set Proxy server to use for all the web requests in AutoUpdater.NET.\r\n        /// </summary>\r\n        public static IWebProxy Proxy;\r\n\r\n        /// <summary>\r\n        ///     Set if RemindLaterAt interval should be in Minutes, Hours or Days.\r\n        /// </summary>\r\n        public static RemindLaterFormat RemindLaterTimeSpan = RemindLaterFormat.Days;\r\n\r\n        /// <summary>\r\n        ///     A delegate type to handle how to exit the application after update is downloaded.\r\n        /// </summary>\r\n        public delegate void ApplicationExitEventHandler();\r\n\r\n        /// <summary>\r\n        ///     An event that developers can use to exit the application gracefully.\r\n        /// </summary>\r\n        public static event ApplicationExitEventHandler ApplicationExitEvent;\r\n\r\n        /// <summary>\r\n        ///     A delegate type for hooking up update notifications.\r\n        /// </summary>\r\n        /// <param name=\"args\">An object containing all the parameters recieved from AppCast XML file. If there will be an error while looking for the XML file then this object will be null.</param>\r\n        public delegate void CheckForUpdateEventHandler(UpdateInfoEventArgs args);\r\n\r\n        /// <summary>\r\n        ///     An event that clients can use to be notified whenever the update is checked.\r\n        /// </summary>\r\n        public static event CheckForUpdateEventHandler CheckForUpdateEvent;\r\n\r\n        /// <summary>\r\n        ///     A delegate type for hooking up parsing logic.\r\n        /// </summary>\r\n        /// <param name=\"args\">An object containing the AppCast file received from server.</param>\r\n        public delegate void ParseUpdateInfoHandler(ParseUpdateInfoEventArgs args);\r\n\r\n        /// <summary>\r\n        ///     An event that clients can use to be notified whenever the AppCast file needs parsing.\r\n        /// </summary>\r\n        public static event ParseUpdateInfoHandler ParseUpdateInfoEvent;\r\n\r\n        /// <summary>\r\n        ///     Set if you want the default update form to have a different size.\r\n        /// </summary>\r\n        public static Size? UpdateFormSize = null;\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(Assembly myAssembly = null)\r\n        {\r\n            Start(AppCastURL, myAssembly);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application via FTP and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"appCast\">FTP URL of the xml file that contains information about latest version of the application.</param>\r\n        /// <param name=\"ftpCredentials\">Credentials required to connect to FTP server.</param>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(String appCast, NetworkCredential ftpCredentials, Assembly myAssembly = null)\r\n        {\r\n            FtpCredentials = ftpCredentials;\r\n            Start(appCast, myAssembly);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"appCast\">URL of the xml file that contains information about latest version of the application.</param>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(String appCast, Assembly myAssembly = null)\r\n        {\r\n            try\r\n            {\r\n                ServicePointManager.SecurityProtocol |= (SecurityProtocolType) 192 |\r\n                                                        (SecurityProtocolType) 768 | (SecurityProtocolType) 3072;\r\n            }\r\n            catch (NotSupportedException) {}\r\n\r\n            if (Mandatory && _remindLaterTimer != null)\r\n            {\r\n                _remindLaterTimer.Stop();\r\n                _remindLaterTimer.Close();\r\n                _remindLaterTimer = null;\r\n            }\r\n\r\n            if (!Running && _remindLaterTimer == null)\r\n            {\r\n                Running = true;\r\n\r\n                AppCastURL = appCast;\r\n\r\n                IsWinFormsApplication = Application.MessageLoop;\r\n\r\n                var backgroundWorker = new BackgroundWorker();\r\n\r\n                backgroundWorker.DoWork += BackgroundWorkerDoWork;\r\n\r\n                backgroundWorker.RunWorkerCompleted += BackgroundWorkerOnRunWorkerCompleted;\r\n\r\n                backgroundWorker.RunWorkerAsync(myAssembly ?? Assembly.GetEntryAssembly());\r\n            }\r\n        }\r\n\r\n        private static void BackgroundWorkerOnRunWorkerCompleted(object sender,\r\n            RunWorkerCompletedEventArgs runWorkerCompletedEventArgs)\r\n        {\r\n            if (!runWorkerCompletedEventArgs.Cancelled)\r\n            {\r\n                if (runWorkerCompletedEventArgs.Result is DateTime)\r\n                {\r\n                    SetTimer((DateTime) runWorkerCompletedEventArgs.Result);\r\n                }\r\n                else\r\n                {\r\n                    var args = runWorkerCompletedEventArgs.Result as UpdateInfoEventArgs;\r\n                    if (CheckForUpdateEvent != null)\r\n                    {\r\n                        CheckForUpdateEvent(args);\r\n                    }\r\n                    else\r\n                    {\r\n                        if (args != null)\r\n                        {\r\n                            if (args.IsUpdateAvailable)\r\n                            {\r\n                                if (!IsWinFormsApplication)\r\n                                {\r\n                                    Application.EnableVisualStyles();\r\n                                }\r\n\r\n                                if (Mandatory && UpdateMode == Mode.ForcedDownload)\r\n                                {\r\n                                    DownloadUpdate();\r\n                                    Exit();\r\n                                }\r\n                                else\r\n                                {\r\n                                    if (Thread.CurrentThread.GetApartmentState().Equals(ApartmentState.STA))\r\n                                    {\r\n                                        ShowUpdateForm();\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Thread thread = new Thread(ShowUpdateForm);\r\n                                        thread.CurrentCulture = thread.CurrentUICulture = CultureInfo.CurrentCulture;\r\n                                        thread.SetApartmentState(ApartmentState.STA);\r\n                                        thread.Start();\r\n                                        thread.Join();\r\n                                    }\r\n                                }\r\n\r\n                                return;\r\n                            }\r\n                            else\r\n                            {\r\n                                if (ReportErrors)\r\n                                {\r\n                                    MessageBox.Show(Resources.UpdateUnavailableMessage,\r\n                                        Resources.UpdateUnavailableCaption,\r\n                                        MessageBoxButtons.OK, MessageBoxIcon.Information);\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (ReportErrors)\r\n                            {\r\n                                MessageBox.Show(\r\n                                    Resources.UpdateCheckFailedMessage,\r\n                                    Resources.UpdateCheckFailedCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Running = false;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Shows standard update dialog.\r\n        /// </summary>\r\n        public static void ShowUpdateForm()\r\n        {\r\n            var updateForm = new UpdateForm();\r\n            if (UpdateFormSize.HasValue)\r\n            {\r\n                updateForm.Size = UpdateFormSize.Value;\r\n            }\r\n\r\n            if (updateForm.ShowDialog().Equals(DialogResult.OK))\r\n            {\r\n                Exit();\r\n            }\r\n        }\r\n\r\n        private static void BackgroundWorkerDoWork(object sender, DoWorkEventArgs e)\r\n        {\r\n            e.Cancel = true;\r\n            Assembly mainAssembly = e.Argument as Assembly;\r\n\r\n            var companyAttribute =\r\n                (AssemblyCompanyAttribute) GetAttribute(mainAssembly, typeof(AssemblyCompanyAttribute));\r\n            if (string.IsNullOrEmpty(AppTitle))\r\n            {\r\n                var titleAttribute =\r\n                    (AssemblyTitleAttribute) GetAttribute(mainAssembly, typeof(AssemblyTitleAttribute));\r\n                AppTitle = titleAttribute != null ? titleAttribute.Title : mainAssembly.GetName().Name;\r\n            }\r\n\r\n            string appCompany = companyAttribute != null ? companyAttribute.Company : \"\";\r\n\r\n            RegistryLocation = !string.IsNullOrEmpty(appCompany)\r\n                ? $@\"Software\\{appCompany}\\{AppTitle}\\AutoUpdater\"\r\n                : $@\"Software\\{AppTitle}\\AutoUpdater\";\r\n\r\n            InstalledVersion = mainAssembly.GetName().Version;\r\n\r\n            WebRequest webRequest = WebRequest.Create(AppCastURL);\r\n\r\n            webRequest.CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);\r\n\r\n            if (Proxy != null)\r\n            {\r\n                webRequest.Proxy = Proxy;\r\n            }\r\n\r\n            var uri = new Uri(AppCastURL);\r\n\r\n            WebResponse webResponse;\r\n\r\n            try\r\n            {\r\n                if (uri.Scheme.Equals(Uri.UriSchemeFtp))\r\n                {\r\n                    var ftpWebRequest = (FtpWebRequest) webRequest;\r\n                    ftpWebRequest.Credentials = FtpCredentials;\r\n                    ftpWebRequest.UseBinary = true;\r\n                    ftpWebRequest.UsePassive = true;\r\n                    ftpWebRequest.KeepAlive = true;\r\n                    ftpWebRequest.Method = WebRequestMethods.Ftp.DownloadFile;\r\n\r\n                    webResponse = ftpWebRequest.GetResponse();\r\n                }\r\n                else if(uri.Scheme.Equals(Uri.UriSchemeHttp) || uri.Scheme.Equals(Uri.UriSchemeHttps))\r\n                {\r\n                    HttpWebRequest httpWebRequest = (HttpWebRequest) webRequest;\r\n\r\n                    httpWebRequest.UserAgent = GetUserAgent();\r\n\r\n                    if (BasicAuthXML != null)\r\n                    {\r\n                        httpWebRequest.Headers[HttpRequestHeader.Authorization] = BasicAuthXML.ToString();\r\n                    }\r\n\r\n                    webResponse = httpWebRequest.GetResponse();\r\n                }\r\n                else\r\n                {\r\n                    webResponse = webRequest.GetResponse(); \r\n                }\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                Debug.WriteLine(exception);\r\n                e.Cancel = false;\r\n                return;\r\n            }\r\n\r\n            UpdateInfoEventArgs args;\r\n\r\n            using (Stream appCastStream = webResponse.GetResponseStream())\r\n            {\r\n                if (appCastStream != null)\r\n                {\r\n                    if (ParseUpdateInfoEvent != null)\r\n                    {\r\n                        using (StreamReader streamReader = new StreamReader(appCastStream))\r\n                        {\r\n                            string data = streamReader.ReadToEnd();\r\n                            ParseUpdateInfoEventArgs parseArgs = new ParseUpdateInfoEventArgs(data);\r\n                            ParseUpdateInfoEvent(parseArgs);\r\n                            args = parseArgs.UpdateInfo;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        XmlDocument receivedAppCastDocument = new XmlDocument();\r\n\r\n                        try\r\n                        {\r\n                            receivedAppCastDocument.Load(appCastStream);\r\n\r\n                            XmlNodeList appCastItems = receivedAppCastDocument.SelectNodes(\"item\");\r\n\r\n                            args = new UpdateInfoEventArgs();\r\n\r\n                            if (appCastItems != null)\r\n                            {\r\n                                foreach (XmlNode item in appCastItems)\r\n                                {\r\n                                    XmlNode appCastVersion = item.SelectSingleNode(\"version\");\r\n\r\n                                    try\r\n                                    {\r\n                                        CurrentVersion = new Version(appCastVersion?.InnerText);\r\n                                    }\r\n                                    catch (Exception)\r\n                                    {\r\n                                        CurrentVersion = null;\r\n                                    }\r\n\r\n                                    args.CurrentVersion = CurrentVersion;\r\n\r\n                                    XmlNode appCastChangeLog = item.SelectSingleNode(\"changelog\");\r\n\r\n                                    args.ChangelogURL = appCastChangeLog?.InnerText;\r\n\r\n                                    XmlNode appCastUrl = item.SelectSingleNode(\"url\");\r\n\r\n                                    args.DownloadURL = appCastUrl?.InnerText;\r\n\r\n                                    if (Mandatory.Equals(false))\r\n                                    {\r\n                                        XmlNode mandatory = item.SelectSingleNode(\"mandatory\");\r\n\r\n                                        Boolean.TryParse(mandatory?.InnerText, out Mandatory);\r\n\r\n                                        string mode = mandatory?.Attributes[\"mode\"]?.InnerText;\r\n\r\n                                        if (!string.IsNullOrEmpty(mode))\r\n                                        {\r\n                                            UpdateMode = (Mode) Enum.Parse(typeof(Mode), mode);\r\n                                            if (ReportErrors && !Enum.IsDefined(typeof(Mode), UpdateMode))\r\n                                            {\r\n                                                throw new InvalidDataException(\r\n                                                    $\"{UpdateMode} is not an underlying value of the Mode enumeration.\");\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    args.Mandatory = Mandatory;\r\n                                    args.UpdateMode = UpdateMode;\r\n\r\n                                    XmlNode appArgs = item.SelectSingleNode(\"args\");\r\n\r\n                                    args.InstallerArgs = appArgs?.InnerText;\r\n\r\n                                    XmlNode checksum = item.SelectSingleNode(\"checksum\");\r\n\r\n                                    args.HashingAlgorithm = checksum?.Attributes[\"algorithm\"]?.InnerText;\r\n\r\n                                    args.Checksum = checksum?.InnerText;\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (Exception)\r\n                        {\r\n                            e.Cancel = false;\r\n                            webResponse.Close();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    e.Cancel = false;\r\n                    webResponse.Close();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.CurrentVersion == null || string.IsNullOrEmpty(args.DownloadURL))\r\n            {\r\n                webResponse.Close();\r\n                if (ReportErrors)\r\n                {\r\n                    throw new InvalidDataException();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            CurrentVersion = args.CurrentVersion;\r\n            ChangelogURL = args.ChangelogURL = GetURL(webResponse.ResponseUri, args.ChangelogURL);\r\n            DownloadURL = args.DownloadURL = GetURL(webResponse.ResponseUri, args.DownloadURL);\r\n            InstallerArgs = args.InstallerArgs ?? String.Empty;\r\n            HashingAlgorithm = args.HashingAlgorithm ?? \"MD5\";\r\n            Checksum = args.Checksum ?? String.Empty;\r\n\r\n            webResponse.Close();\r\n\r\n            if (Mandatory)\r\n            {\r\n                ShowRemindLaterButton = false;\r\n                ShowSkipButton = false;\r\n            }\r\n            else\r\n            {\r\n                using (RegistryKey updateKey = Registry.CurrentUser.OpenSubKey(RegistryLocation))\r\n                {\r\n                    if (updateKey != null)\r\n                    {\r\n                        object skip = updateKey.GetValue(\"skip\");\r\n                        object applicationVersion = updateKey.GetValue(\"version\");\r\n                        if (skip != null && applicationVersion != null)\r\n                        {\r\n                            string skipValue = skip.ToString();\r\n                            var skipVersion = new Version(applicationVersion.ToString());\r\n                            if (skipValue.Equals(\"1\") && CurrentVersion <= skipVersion)\r\n                                return;\r\n                            if (CurrentVersion > skipVersion)\r\n                            {\r\n                                using (RegistryKey updateKeyWrite = Registry.CurrentUser.CreateSubKey(RegistryLocation))\r\n                                {\r\n                                    if (updateKeyWrite != null)\r\n                                    {\r\n                                        updateKeyWrite.SetValue(\"version\", CurrentVersion.ToString());\r\n                                        updateKeyWrite.SetValue(\"skip\", 0);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        object remindLaterTime = updateKey.GetValue(\"remindlater\");\r\n\r\n                        if (remindLaterTime != null)\r\n                        {\r\n                            DateTime remindLater = Convert.ToDateTime(remindLaterTime.ToString(),\r\n                                CultureInfo.CreateSpecificCulture(\"en-US\").DateTimeFormat);\r\n\r\n                            int compareResult = DateTime.Compare(DateTime.Now, remindLater);\r\n\r\n                            if (compareResult < 0)\r\n                            {\r\n                                e.Cancel = false;\r\n                                e.Result = remindLater;\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            args.IsUpdateAvailable = CurrentVersion > InstalledVersion;\r\n            args.InstalledVersion = InstalledVersion;\r\n\r\n            e.Cancel = false;\r\n            e.Result = args;\r\n        }\r\n\r\n        private static string GetURL(Uri baseUri, String url)\r\n        {\r\n            if (!string.IsNullOrEmpty(url) && Uri.IsWellFormedUriString(url, UriKind.Relative))\r\n            {\r\n                Uri uri = new Uri(baseUri, url);\r\n\r\n                if (uri.IsAbsoluteUri)\r\n                {\r\n                    url = uri.AbsoluteUri;\r\n                }\r\n            }\r\n\r\n            return url;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Detects and exits all instances of running assembly, including current.\r\n        /// </summary>\r\n        private static void Exit()\r\n        {\r\n            if (ApplicationExitEvent != null)\r\n            {\r\n                ApplicationExitEvent();\r\n            }\r\n            else\r\n            {\r\n                var currentProcess = Process.GetCurrentProcess();\r\n                foreach (var process in Process.GetProcessesByName(currentProcess.ProcessName))\r\n                {\r\n                    string processPath;\r\n                    try\r\n                    {\r\n                        processPath = process.MainModule.FileName;\r\n                    }\r\n                    catch (Win32Exception)\r\n                    {\r\n                        // Current process should be same as processes created by other instances of the application so it should be able to access modules of other instances. \r\n                        // This means this is not the process we are looking for so we can safely skip this.\r\n                        continue;\r\n                    }\r\n\r\n                    if (process.Id != currentProcess.Id &&\r\n                        currentProcess.MainModule.FileName == processPath\r\n                    ) //get all instances of assembly except current\r\n                    {\r\n                        if (process.CloseMainWindow())\r\n                        {\r\n                            process.WaitForExit((int) TimeSpan.FromSeconds(10)\r\n                                .TotalMilliseconds); //give some time to process message\r\n                        }\r\n\r\n                        if (!process.HasExited)\r\n                        {\r\n                            process.Kill(); //TODO show UI message asking user to close program himself instead of silently killing it\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (IsWinFormsApplication)\r\n                {\r\n                    MethodInvoker methodInvoker = Application.Exit;\r\n                    methodInvoker.Invoke();\r\n                }\r\n#if NETWPF\r\n                else if (System.Windows.Application.Current != null)\r\n                {\r\n                    System.Windows.Application.Current.Dispatcher.BeginInvoke(new Action(() =>\r\n                        System.Windows.Application.Current.Shutdown()));\r\n                }\r\n#endif\r\n                else\r\n                {\r\n                    Environment.Exit(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        private static Attribute GetAttribute(Assembly assembly, Type attributeType)\r\n        {\r\n            object[] attributes = assembly.GetCustomAttributes(attributeType, false);\r\n            if (attributes.Length == 0)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return (Attribute) attributes[0];\r\n        }\r\n\r\n        internal static string GetUserAgent()\r\n        {\r\n            return string.IsNullOrEmpty(HttpUserAgent) ? $\"AutoUpdater.NET\" : HttpUserAgent;\r\n        }\r\n\r\n        internal static void SetTimer(DateTime remindLater)\r\n        {\r\n            TimeSpan timeSpan = remindLater - DateTime.Now;\r\n\r\n            var context = SynchronizationContext.Current;\r\n\r\n            _remindLaterTimer = new System.Timers.Timer\r\n            {\r\n                Interval = (int) timeSpan.TotalMilliseconds,\r\n                AutoReset = false\r\n            };\r\n\r\n            _remindLaterTimer.Elapsed += delegate\r\n            {\r\n                _remindLaterTimer = null;\r\n                if (context != null)\r\n                {\r\n                    try\r\n                    {\r\n                        context.Send(state => Start(), null);\r\n                    }\r\n                    catch (InvalidAsynchronousStateException)\r\n                    {\r\n                        Start();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Start();\r\n                }\r\n            };\r\n\r\n            _remindLaterTimer.Start();\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Opens the Download window that download the update and execute the installer when download completes.\r\n        /// </summary>\r\n        public static bool DownloadUpdate()\r\n        {\r\n            var downloadDialog = new DownloadUpdateDialog(DownloadURL);\r\n\r\n            try\r\n            {\r\n                return downloadDialog.ShowDialog().Equals(DialogResult.OK);\r\n            }\r\n            catch (TargetInvocationException)\r\n            {\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Object of this class gives you all the details about the update useful in handling the update logic yourself.\r\n    /// </summary>\r\n    public class UpdateInfoEventArgs : EventArgs\r\n    {\r\n        /// <summary>\r\n        ///     If new update is available then returns true otherwise false.\r\n        /// </summary>\r\n        public bool IsUpdateAvailable { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Download URL of the update file.\r\n        /// </summary>\r\n        public string DownloadURL { get; set; }\r\n\r\n        /// <summary>\r\n        ///     URL of the webpage specifying changes in the new update.\r\n        /// </summary>\r\n        public string ChangelogURL { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Returns newest version of the application available to download.\r\n        /// </summary>\r\n        public Version CurrentVersion { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Returns version of the application currently installed on the user's PC.\r\n        /// </summary>\r\n        public Version InstalledVersion { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Shows if the update is required or optional.\r\n        /// </summary>\r\n        public bool Mandatory { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Defines how the Mandatory flag should work.\r\n        /// </summary>\r\n        public Mode UpdateMode { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Command line arguments used by Installer.\r\n        /// </summary>\r\n        public string InstallerArgs { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Checksum of the update file.\r\n        /// </summary>\r\n        public string Checksum { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Hash algorithm that generated the checksum provided in the XML file.\r\n        /// </summary>\r\n        public string HashingAlgorithm { get; set; }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     An object of this class contains the AppCast file received from server.\r\n    /// </summary>\r\n    public class ParseUpdateInfoEventArgs : EventArgs\r\n    {\r\n        /// <summary>\r\n        ///     Remote data received from the AppCast file.\r\n        /// </summary>\r\n        public string RemoteData { get; }\r\n\r\n        /// <summary>\r\n        ///      Set this object with values received from the AppCast file.\r\n        /// </summary>\r\n        public UpdateInfoEventArgs UpdateInfo { get; set; }\r\n\r\n        /// <summary>\r\n        ///     An object containing the AppCast file received from server.\r\n        /// </summary>\r\n        /// <param name=\"remoteData\">A string containing remote data received from the AppCast file.</param>\r\n        public ParseUpdateInfoEventArgs(string remoteData)\r\n        {\r\n            RemoteData = remoteData;\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    ///     Interface for authentication\r\n    /// </summary>\r\n    public interface IAuthentication\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Provides Basic Authentication header for web request.\r\n    /// </summary>\r\n    public class BasicAuthentication : IAuthentication\r\n    {\r\n        private string Username { get; }\r\n\r\n        private string Password { get; }\r\n\r\n        /// <summary>\r\n        /// Initializes credentials for Basic Authentication.\r\n        /// </summary>\r\n        /// <param name=\"username\">Username to use for Basic Authentication</param>\r\n        /// <param name=\"password\">Password to use for Basic Authentication</param>\r\n        public BasicAuthentication(string username, string password)\r\n        {\r\n            Username = username;\r\n            Password = password;\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public override string ToString()\r\n        {\r\n            var token = Convert.ToBase64String(Encoding.ASCII.GetBytes($\"{Username}:{Password}\"));\r\n            return $\"Basic {token}\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Provides Custom Authentication header for web request.\r\n    /// </summary>\r\n    public class CustomAuthentication : IAuthentication\r\n    {\r\n        private string HttpRequestHeaderAuthorizationValue { get; }\r\n\r\n        /// <summary>\r\n        /// Initializes authorization header value for Custom Authentication\r\n        /// </summary>\r\n        /// <param name=\"httpRequestHeaderAuthorizationValue\">Value to use as http request header authorization value</param>\r\n        public CustomAuthentication(string httpRequestHeaderAuthorizationValue)\r\n        {\r\n            HttpRequestHeaderAuthorizationValue = httpRequestHeaderAuthorizationValue;\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public override string ToString()\r\n        {\r\n            return HttpRequestHeaderAuthorizationValue;\r\n        }\r\n    }\r\n}", "using System.Reflection;\r\nusing System.Runtime.InteropServices;\r\nusing System.Resources;\r\n\r\n// General Information about an assembly is controlled through the following \r\n// set of attributes. Change these attribute values to modify the information\r\n// associated with an assembly.\r\n[assembly: AssemblyTitle(\"AutoUpdater.NET\")]\r\n[assembly: AssemblyDescription(\"AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.\")]\r\n[assembly: AssemblyConfiguration(\"\")]\r\n[assembly: AssemblyCompany(\"RBSoft\")]\r\n[assembly: AssemblyProduct(\"AutoUpdater.NET\")]\r\n[assembly: AssemblyCopyright(\"Copyright \u00a9 2012-2019 RBSoft\")]\r\n[assembly: AssemblyTrademark(\"\")]\r\n[assembly: AssemblyCulture(\"\")]\r\n\r\n// Setting ComVisible to false makes the types in this assembly not visible \r\n// to COM components.  If you need to access a type in this assembly from \r\n// COM, set the ComVisible attribute to true on that type.\r\n[assembly: ComVisible(false)]\r\n\r\n// The following GUID is for the ID of the typelib if this project is exposed to COM\r\n[assembly: Guid(\"a4037a6f-fdf7-46c8-a303-c3c4fcddb015\")]\r\n\r\n// Version information for an assembly consists of the following four values:\r\n//\r\n//      Major Version\r\n//      Minor Version \r\n//      Build Number\r\n//      Revision\r\n//\r\n// You can specify all the values or you can default the Build and Revision Numbers \r\n// by using the '*' as shown below:\r\n// [assembly: AssemblyVersion(\"1.0.*\")]\r\n[assembly: AssemblyVersion(\"1.5.7.0\")]\r\n[assembly: AssemblyFileVersion(\"1.5.7.0\")]\r\n[assembly: NeutralResourcesLanguageAttribute(\"en\")]\r\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n    <metadata>\n        <id>Autoupdater.NET.Official</id>\n        <version>1.5.7</version>\n        <title>AutoUpdater.NET</title>\n        <authors>RBSoft</authors>\n        <owners>RBSoft</owners>\n        <license type=\"expression\">MIT</license>\n        <projectUrl>https://github.com/ravibpatel/AutoUpdater.NET</projectUrl>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n        <description>AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.</description>\n        <summary>Add auto update functionality to .NET applications.</summary>\n        <releaseNotes>https://github.com/ravibpatel/AutoUpdater.NET/releases</releaseNotes>\n        <copyright>RBSoft</copyright>\n        <language>en-US</language>\n        <tags>autoupdate updater c# vb wpf winforms</tags>\n    </metadata>\n</package>", "version: 1.5.7.{build}\nenvironment:\n  my_version: 1.5.7\n  my_secret:\n    secure: vbPRaZLQYpGPr4BrZZ4p6TofpSZMud+FKtlpqjgO8aA=\nskip_branch_with_pr: true\nimage: Visual Studio 2017\nclone_folder: c:\\projects\\AutoUpdater.NET\nbuild: off\ninstall:\n- nuget install secure-file -ExcludeVersion\n- cmd: nuget restore\n- secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.snk.enc\" -secret %my_secret%\n- secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.snk.enc\" -secret %my_secret%\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release-NET35 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release-NET35 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release-NET40 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release-NET40 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- nuget pack \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\Autoupdater.NET.Official.nuspec\"\n- cmd: 7z a AutoUpdater.NET-%my_version%.zip %APPVEYOR_BUILD_FOLDER%\\AutoUpdater.NET\\build\\lib\\*\n\nartifacts:\n- path: AutoUpdater.NET-%my_version%.zip\n- path: Autoupdater.NET.Official.%my_version%.nupkg\n\ndeploy:\n- provider: GitHub\n  release: $(APPVEYOR_REPO_TAG_NAME)\n  description: '// TODO: Write Release Notes'\n  artifact: AutoUpdater.NET-%my_version%.zip\n  auth_token:\n    secure: WHW27Nvc8zNhfyhxIYdl/NwbrkFzvSX0vE4/CS8iByPXM6rcztWhUrDXJ7eejLBY\n  draft: false\n  prerelease: false\n  on:\n    branch: master                 # release from master branch only\n    appveyor_repo_tag: true        # deploy on tag push only\n\n- provider: NuGet\n  api_key:\n    secure: LzLwDiKGUZvNI6CmSFpyjba1mpKYeb6o8SDBejNO0EHY1SgC8xNTuh2nzBWkY7EV\n  skip_symbols: false\n  artifact: Autoupdater.NET.Official.%my_version%.nupkg\n  on:\n    branch: master                 # release from master branch only\n    appveyor_repo_tag: true        # deploy on tag push only"], "fixing_code": ["using System;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Globalization;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Cache;\r\nusing System.Reflection;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Windows.Forms;\r\nusing System.Xml;\r\nusing AutoUpdaterDotNET.Properties;\r\nusing Microsoft.Win32;\r\n\r\nnamespace AutoUpdaterDotNET\r\n{\r\n    /// <summary>\r\n    ///     Enum representing the remind later time span.\r\n    /// </summary>\r\n    public enum RemindLaterFormat\r\n    {\r\n        /// <summary>\r\n        ///     Represents the time span in minutes.\r\n        /// </summary>\r\n        Minutes,\r\n\r\n        /// <summary>\r\n        ///     Represents the time span in hours.\r\n        /// </summary>\r\n        Hours,\r\n\r\n        /// <summary>\r\n        ///     Represents the time span in days.\r\n        /// </summary>\r\n        Days\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Enum representing the effect of Mandatory flag.\r\n    /// </summary>\r\n    public enum Mode\r\n    {\r\n        /// <summary>\r\n        /// In this mode, it ignores Remind Later and Skip values set previously and hide both buttons.\r\n        /// </summary>\r\n        Normal,\r\n\r\n        /// <summary>\r\n        /// In this mode, it won't show close button in addition to Normal mode behaviour.\r\n        /// </summary>\r\n        Forced,\r\n\r\n        /// <summary>\r\n        /// In this mode, it will start downloading and applying update without showing standarad update dialog in addition to Forced mode behaviour.\r\n        /// </summary>\r\n        ForcedDownload\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Main class that lets you auto update applications by setting some static fields and executing its Start method.\r\n    /// </summary>\r\n    public static class AutoUpdater\r\n    {\r\n        private static System.Timers.Timer _remindLaterTimer;\r\n\r\n        internal static String ChangelogURL;\r\n\r\n        internal static String DownloadURL;\r\n\r\n        internal static String InstallerArgs;\r\n\r\n        internal static String RegistryLocation;\r\n\r\n        internal static String Checksum;\r\n\r\n        internal static String HashingAlgorithm;\r\n\r\n        internal static Version CurrentVersion;\r\n\r\n        internal static Version InstalledVersion;\r\n\r\n        internal static bool IsWinFormsApplication;\r\n\r\n        internal static bool Running;\r\n\r\n        /// <summary>\r\n        ///     Set it to folder path where you want to download the update file. If not provided then it defaults to Temp folder.\r\n        /// </summary>\r\n        public static String DownloadPath;\r\n\r\n        /// <summary>\r\n        ///     Set the Application Title shown in Update dialog. Although AutoUpdater.NET will get it automatically, you can set this property if you like to give custom Title.\r\n        /// </summary>\r\n        public static String AppTitle;\r\n\r\n        /// <summary>\r\n        ///     URL of the xml file that contains information about latest version of the application.\r\n        /// </summary>\r\n        public static String AppCastURL;\r\n\r\n        /// <summary>\r\n        /// Login/password/domain for FTP-request\r\n        /// </summary>\r\n        public static NetworkCredential FtpCredentials;\r\n\r\n        /// <summary>\r\n        ///     Opens the download URL in default browser if true. Very usefull if you have portable application.\r\n        /// </summary>\r\n        public static bool OpenDownloadPage;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials required to download the file.\r\n        /// </summary>\r\n        public static IAuthentication BasicAuthDownload;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials required to download the XML file.\r\n        /// </summary>\r\n        public static IAuthentication BasicAuthXML;\r\n\r\n        /// <summary>\r\n        ///     Set Basic Authentication credentials to navigate to the change log URL. \r\n        /// </summary>\r\n        public static IAuthentication BasicAuthChangeLog;\r\n\r\n        /// <summary>\r\n        ///     Set the User-Agent string to be used for HTTP web requests.\r\n        /// </summary>\r\n        public static string HttpUserAgent;\r\n        \r\n        /// <summary>\r\n        ///     If this is true users can see the skip button.\r\n        /// </summary>\r\n        public static Boolean ShowSkipButton = true;\r\n\r\n        /// <summary>\r\n        ///     If this is true users can see the Remind Later button.\r\n        /// </summary>\r\n        public static Boolean ShowRemindLaterButton = true;\r\n\r\n        /// <summary>\r\n        ///     If this is true users see dialog where they can set remind later interval otherwise it will take the interval from\r\n        ///     RemindLaterAt and RemindLaterTimeSpan fields.\r\n        /// </summary>\r\n        public static Boolean LetUserSelectRemindLater = true;\r\n\r\n        /// <summary>\r\n        ///     Remind Later interval after user should be reminded of update.\r\n        /// </summary>\r\n        public static int RemindLaterAt = 2;\r\n\r\n        ///<summary>\r\n        ///     AutoUpdater.NET will report errors if this is true.\r\n        /// </summary>\r\n        public static bool ReportErrors = false;\r\n\r\n        /// <summary>\r\n        ///     Set this to false if your application doesn't need administrator privileges to replace the old version.\r\n        /// </summary>\r\n        public static bool RunUpdateAsAdmin = true;\r\n\r\n        ///<summary>\r\n        ///     Set this to true if you want to ignore previously assigned Remind Later and Skip settings. It will also hide Remind Later and Skip buttons.\r\n        /// </summary>\r\n        public static bool Mandatory;\r\n\r\n        /// <summary>\r\n        ///     Set this to any of the available modes to change behaviour of the Mandatory flag.\r\n        /// </summary>\r\n        public static Mode UpdateMode;\r\n\r\n        /// <summary>\r\n        ///     Set Proxy server to use for all the web requests in AutoUpdater.NET.\r\n        /// </summary>\r\n        public static IWebProxy Proxy;\r\n\r\n        /// <summary>\r\n        ///     Set if RemindLaterAt interval should be in Minutes, Hours or Days.\r\n        /// </summary>\r\n        public static RemindLaterFormat RemindLaterTimeSpan = RemindLaterFormat.Days;\r\n\r\n        /// <summary>\r\n        ///     A delegate type to handle how to exit the application after update is downloaded.\r\n        /// </summary>\r\n        public delegate void ApplicationExitEventHandler();\r\n\r\n        /// <summary>\r\n        ///     An event that developers can use to exit the application gracefully.\r\n        /// </summary>\r\n        public static event ApplicationExitEventHandler ApplicationExitEvent;\r\n\r\n        /// <summary>\r\n        ///     A delegate type for hooking up update notifications.\r\n        /// </summary>\r\n        /// <param name=\"args\">An object containing all the parameters recieved from AppCast XML file. If there will be an error while looking for the XML file then this object will be null.</param>\r\n        public delegate void CheckForUpdateEventHandler(UpdateInfoEventArgs args);\r\n\r\n        /// <summary>\r\n        ///     An event that clients can use to be notified whenever the update is checked.\r\n        /// </summary>\r\n        public static event CheckForUpdateEventHandler CheckForUpdateEvent;\r\n\r\n        /// <summary>\r\n        ///     A delegate type for hooking up parsing logic.\r\n        /// </summary>\r\n        /// <param name=\"args\">An object containing the AppCast file received from server.</param>\r\n        public delegate void ParseUpdateInfoHandler(ParseUpdateInfoEventArgs args);\r\n\r\n        /// <summary>\r\n        ///     An event that clients can use to be notified whenever the AppCast file needs parsing.\r\n        /// </summary>\r\n        public static event ParseUpdateInfoHandler ParseUpdateInfoEvent;\r\n\r\n        /// <summary>\r\n        ///     Set if you want the default update form to have a different size.\r\n        /// </summary>\r\n        public static Size? UpdateFormSize = null;\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(Assembly myAssembly = null)\r\n        {\r\n            Start(AppCastURL, myAssembly);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application via FTP and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"appCast\">FTP URL of the xml file that contains information about latest version of the application.</param>\r\n        /// <param name=\"ftpCredentials\">Credentials required to connect to FTP server.</param>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(String appCast, NetworkCredential ftpCredentials, Assembly myAssembly = null)\r\n        {\r\n            FtpCredentials = ftpCredentials;\r\n            Start(appCast, myAssembly);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Start checking for new version of application and display dialog to the user if update is available.\r\n        /// </summary>\r\n        /// <param name=\"appCast\">URL of the xml file that contains information about latest version of the application.</param>\r\n        /// <param name=\"myAssembly\">Assembly to use for version checking.</param>\r\n        public static void Start(String appCast, Assembly myAssembly = null)\r\n        {\r\n            try\r\n            {\r\n                ServicePointManager.SecurityProtocol |= (SecurityProtocolType) 192 |\r\n                                                        (SecurityProtocolType) 768 | (SecurityProtocolType) 3072;\r\n            }\r\n            catch (NotSupportedException) {}\r\n\r\n            if (Mandatory && _remindLaterTimer != null)\r\n            {\r\n                _remindLaterTimer.Stop();\r\n                _remindLaterTimer.Close();\r\n                _remindLaterTimer = null;\r\n            }\r\n\r\n            if (!Running && _remindLaterTimer == null)\r\n            {\r\n                Running = true;\r\n\r\n                AppCastURL = appCast;\r\n\r\n                IsWinFormsApplication = Application.MessageLoop;\r\n\r\n                var backgroundWorker = new BackgroundWorker();\r\n\r\n                backgroundWorker.DoWork += BackgroundWorkerDoWork;\r\n\r\n                backgroundWorker.RunWorkerCompleted += BackgroundWorkerOnRunWorkerCompleted;\r\n\r\n                backgroundWorker.RunWorkerAsync(myAssembly ?? Assembly.GetEntryAssembly());\r\n            }\r\n        }\r\n\r\n        private static void BackgroundWorkerOnRunWorkerCompleted(object sender,\r\n            RunWorkerCompletedEventArgs runWorkerCompletedEventArgs)\r\n        {\r\n            if (!runWorkerCompletedEventArgs.Cancelled)\r\n            {\r\n                if (runWorkerCompletedEventArgs.Result is DateTime)\r\n                {\r\n                    SetTimer((DateTime) runWorkerCompletedEventArgs.Result);\r\n                }\r\n                else\r\n                {\r\n                    var args = runWorkerCompletedEventArgs.Result as UpdateInfoEventArgs;\r\n                    if (CheckForUpdateEvent != null)\r\n                    {\r\n                        CheckForUpdateEvent(args);\r\n                    }\r\n                    else\r\n                    {\r\n                        if (args != null)\r\n                        {\r\n                            if (args.IsUpdateAvailable)\r\n                            {\r\n                                if (!IsWinFormsApplication)\r\n                                {\r\n                                    Application.EnableVisualStyles();\r\n                                }\r\n\r\n                                if (Mandatory && UpdateMode == Mode.ForcedDownload)\r\n                                {\r\n                                    DownloadUpdate();\r\n                                    Exit();\r\n                                }\r\n                                else\r\n                                {\r\n                                    if (Thread.CurrentThread.GetApartmentState().Equals(ApartmentState.STA))\r\n                                    {\r\n                                        ShowUpdateForm();\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Thread thread = new Thread(ShowUpdateForm);\r\n                                        thread.CurrentCulture = thread.CurrentUICulture = CultureInfo.CurrentCulture;\r\n                                        thread.SetApartmentState(ApartmentState.STA);\r\n                                        thread.Start();\r\n                                        thread.Join();\r\n                                    }\r\n                                }\r\n\r\n                                return;\r\n                            }\r\n                            else\r\n                            {\r\n                                if (ReportErrors)\r\n                                {\r\n                                    MessageBox.Show(Resources.UpdateUnavailableMessage,\r\n                                        Resources.UpdateUnavailableCaption,\r\n                                        MessageBoxButtons.OK, MessageBoxIcon.Information);\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (ReportErrors)\r\n                            {\r\n                                MessageBox.Show(\r\n                                    Resources.UpdateCheckFailedMessage,\r\n                                    Resources.UpdateCheckFailedCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Running = false;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Shows standard update dialog.\r\n        /// </summary>\r\n        public static void ShowUpdateForm()\r\n        {\r\n            var updateForm = new UpdateForm();\r\n            if (UpdateFormSize.HasValue)\r\n            {\r\n                updateForm.Size = UpdateFormSize.Value;\r\n            }\r\n\r\n            if (updateForm.ShowDialog().Equals(DialogResult.OK))\r\n            {\r\n                Exit();\r\n            }\r\n        }\r\n\r\n        private static void BackgroundWorkerDoWork(object sender, DoWorkEventArgs e)\r\n        {\r\n            e.Cancel = true;\r\n            Assembly mainAssembly = e.Argument as Assembly;\r\n\r\n            var companyAttribute =\r\n                (AssemblyCompanyAttribute) GetAttribute(mainAssembly, typeof(AssemblyCompanyAttribute));\r\n            if (string.IsNullOrEmpty(AppTitle))\r\n            {\r\n                var titleAttribute =\r\n                    (AssemblyTitleAttribute) GetAttribute(mainAssembly, typeof(AssemblyTitleAttribute));\r\n                AppTitle = titleAttribute != null ? titleAttribute.Title : mainAssembly.GetName().Name;\r\n            }\r\n\r\n            string appCompany = companyAttribute != null ? companyAttribute.Company : \"\";\r\n\r\n            RegistryLocation = !string.IsNullOrEmpty(appCompany)\r\n                ? $@\"Software\\{appCompany}\\{AppTitle}\\AutoUpdater\"\r\n                : $@\"Software\\{AppTitle}\\AutoUpdater\";\r\n\r\n            InstalledVersion = mainAssembly.GetName().Version;\r\n\r\n            WebRequest webRequest = WebRequest.Create(AppCastURL);\r\n\r\n            webRequest.CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);\r\n\r\n            if (Proxy != null)\r\n            {\r\n                webRequest.Proxy = Proxy;\r\n            }\r\n\r\n            var uri = new Uri(AppCastURL);\r\n\r\n            WebResponse webResponse;\r\n\r\n            try\r\n            {\r\n                if (uri.Scheme.Equals(Uri.UriSchemeFtp))\r\n                {\r\n                    var ftpWebRequest = (FtpWebRequest) webRequest;\r\n                    ftpWebRequest.Credentials = FtpCredentials;\r\n                    ftpWebRequest.UseBinary = true;\r\n                    ftpWebRequest.UsePassive = true;\r\n                    ftpWebRequest.KeepAlive = true;\r\n                    ftpWebRequest.Method = WebRequestMethods.Ftp.DownloadFile;\r\n\r\n                    webResponse = ftpWebRequest.GetResponse();\r\n                }\r\n                else if(uri.Scheme.Equals(Uri.UriSchemeHttp) || uri.Scheme.Equals(Uri.UriSchemeHttps))\r\n                {\r\n                    HttpWebRequest httpWebRequest = (HttpWebRequest) webRequest;\r\n\r\n                    httpWebRequest.UserAgent = GetUserAgent();\r\n\r\n                    if (BasicAuthXML != null)\r\n                    {\r\n                        httpWebRequest.Headers[HttpRequestHeader.Authorization] = BasicAuthXML.ToString();\r\n                    }\r\n\r\n                    webResponse = httpWebRequest.GetResponse();\r\n                }\r\n                else\r\n                {\r\n                    webResponse = webRequest.GetResponse(); \r\n                }\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                Debug.WriteLine(exception);\r\n                e.Cancel = false;\r\n                return;\r\n            }\r\n\r\n            UpdateInfoEventArgs args;\r\n\r\n            using (Stream appCastStream = webResponse.GetResponseStream())\r\n            {\r\n                if (appCastStream != null)\r\n                {\r\n                    if (ParseUpdateInfoEvent != null)\r\n                    {\r\n                        using (StreamReader streamReader = new StreamReader(appCastStream))\r\n                        {\r\n                            string data = streamReader.ReadToEnd();\r\n                            ParseUpdateInfoEventArgs parseArgs = new ParseUpdateInfoEventArgs(data);\r\n                            ParseUpdateInfoEvent(parseArgs);\r\n                            args = parseArgs.UpdateInfo;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        XmlDocument receivedAppCastDocument = new XmlDocument {XmlResolver = null};\r\n                        try\r\n                        {\r\n                            receivedAppCastDocument.Load(appCastStream);\r\n\r\n                            XmlNodeList appCastItems = receivedAppCastDocument.SelectNodes(\"item\");\r\n\r\n                            args = new UpdateInfoEventArgs();\r\n\r\n                            if (appCastItems != null)\r\n                            {\r\n                                foreach (XmlNode item in appCastItems)\r\n                                {\r\n                                    XmlNode appCastVersion = item.SelectSingleNode(\"version\");\r\n\r\n                                    try\r\n                                    {\r\n                                        CurrentVersion = new Version(appCastVersion?.InnerText);\r\n                                    }\r\n                                    catch (Exception)\r\n                                    {\r\n                                        CurrentVersion = null;\r\n                                    }\r\n\r\n                                    args.CurrentVersion = CurrentVersion;\r\n\r\n                                    XmlNode appCastChangeLog = item.SelectSingleNode(\"changelog\");\r\n\r\n                                    args.ChangelogURL = appCastChangeLog?.InnerText;\r\n\r\n                                    XmlNode appCastUrl = item.SelectSingleNode(\"url\");\r\n\r\n                                    args.DownloadURL = appCastUrl?.InnerText;\r\n\r\n                                    if (Mandatory.Equals(false))\r\n                                    {\r\n                                        XmlNode mandatory = item.SelectSingleNode(\"mandatory\");\r\n\r\n                                        Boolean.TryParse(mandatory?.InnerText, out Mandatory);\r\n\r\n                                        string mode = mandatory?.Attributes[\"mode\"]?.InnerText;\r\n\r\n                                        if (!string.IsNullOrEmpty(mode))\r\n                                        {\r\n                                            UpdateMode = (Mode) Enum.Parse(typeof(Mode), mode);\r\n                                            if (ReportErrors && !Enum.IsDefined(typeof(Mode), UpdateMode))\r\n                                            {\r\n                                                throw new InvalidDataException(\r\n                                                    $\"{UpdateMode} is not an underlying value of the Mode enumeration.\");\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    args.Mandatory = Mandatory;\r\n                                    args.UpdateMode = UpdateMode;\r\n\r\n                                    XmlNode appArgs = item.SelectSingleNode(\"args\");\r\n\r\n                                    args.InstallerArgs = appArgs?.InnerText;\r\n\r\n                                    XmlNode checksum = item.SelectSingleNode(\"checksum\");\r\n\r\n                                    args.HashingAlgorithm = checksum?.Attributes[\"algorithm\"]?.InnerText;\r\n\r\n                                    args.Checksum = checksum?.InnerText;\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (Exception)\r\n                        {\r\n                            e.Cancel = false;\r\n                            webResponse.Close();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    e.Cancel = false;\r\n                    webResponse.Close();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.CurrentVersion == null || string.IsNullOrEmpty(args.DownloadURL))\r\n            {\r\n                webResponse.Close();\r\n                if (ReportErrors)\r\n                {\r\n                    throw new InvalidDataException();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            CurrentVersion = args.CurrentVersion;\r\n            ChangelogURL = args.ChangelogURL = GetURL(webResponse.ResponseUri, args.ChangelogURL);\r\n            DownloadURL = args.DownloadURL = GetURL(webResponse.ResponseUri, args.DownloadURL);\r\n            InstallerArgs = args.InstallerArgs ?? String.Empty;\r\n            HashingAlgorithm = args.HashingAlgorithm ?? \"MD5\";\r\n            Checksum = args.Checksum ?? String.Empty;\r\n\r\n            webResponse.Close();\r\n\r\n            if (Mandatory)\r\n            {\r\n                ShowRemindLaterButton = false;\r\n                ShowSkipButton = false;\r\n            }\r\n            else\r\n            {\r\n                using (RegistryKey updateKey = Registry.CurrentUser.OpenSubKey(RegistryLocation))\r\n                {\r\n                    if (updateKey != null)\r\n                    {\r\n                        object skip = updateKey.GetValue(\"skip\");\r\n                        object applicationVersion = updateKey.GetValue(\"version\");\r\n                        if (skip != null && applicationVersion != null)\r\n                        {\r\n                            string skipValue = skip.ToString();\r\n                            var skipVersion = new Version(applicationVersion.ToString());\r\n                            if (skipValue.Equals(\"1\") && CurrentVersion <= skipVersion)\r\n                                return;\r\n                            if (CurrentVersion > skipVersion)\r\n                            {\r\n                                using (RegistryKey updateKeyWrite = Registry.CurrentUser.CreateSubKey(RegistryLocation))\r\n                                {\r\n                                    if (updateKeyWrite != null)\r\n                                    {\r\n                                        updateKeyWrite.SetValue(\"version\", CurrentVersion.ToString());\r\n                                        updateKeyWrite.SetValue(\"skip\", 0);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        object remindLaterTime = updateKey.GetValue(\"remindlater\");\r\n\r\n                        if (remindLaterTime != null)\r\n                        {\r\n                            DateTime remindLater = Convert.ToDateTime(remindLaterTime.ToString(),\r\n                                CultureInfo.CreateSpecificCulture(\"en-US\").DateTimeFormat);\r\n\r\n                            int compareResult = DateTime.Compare(DateTime.Now, remindLater);\r\n\r\n                            if (compareResult < 0)\r\n                            {\r\n                                e.Cancel = false;\r\n                                e.Result = remindLater;\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            args.IsUpdateAvailable = CurrentVersion > InstalledVersion;\r\n            args.InstalledVersion = InstalledVersion;\r\n\r\n            e.Cancel = false;\r\n            e.Result = args;\r\n        }\r\n\r\n        private static string GetURL(Uri baseUri, String url)\r\n        {\r\n            if (!string.IsNullOrEmpty(url) && Uri.IsWellFormedUriString(url, UriKind.Relative))\r\n            {\r\n                Uri uri = new Uri(baseUri, url);\r\n\r\n                if (uri.IsAbsoluteUri)\r\n                {\r\n                    url = uri.AbsoluteUri;\r\n                }\r\n            }\r\n\r\n            return url;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Detects and exits all instances of running assembly, including current.\r\n        /// </summary>\r\n        private static void Exit()\r\n        {\r\n            if (ApplicationExitEvent != null)\r\n            {\r\n                ApplicationExitEvent();\r\n            }\r\n            else\r\n            {\r\n                var currentProcess = Process.GetCurrentProcess();\r\n                foreach (var process in Process.GetProcessesByName(currentProcess.ProcessName))\r\n                {\r\n                    string processPath;\r\n                    try\r\n                    {\r\n                        processPath = process.MainModule.FileName;\r\n                    }\r\n                    catch (Win32Exception)\r\n                    {\r\n                        // Current process should be same as processes created by other instances of the application so it should be able to access modules of other instances. \r\n                        // This means this is not the process we are looking for so we can safely skip this.\r\n                        continue;\r\n                    }\r\n\r\n                    if (process.Id != currentProcess.Id &&\r\n                        currentProcess.MainModule.FileName == processPath\r\n                    ) //get all instances of assembly except current\r\n                    {\r\n                        if (process.CloseMainWindow())\r\n                        {\r\n                            process.WaitForExit((int) TimeSpan.FromSeconds(10)\r\n                                .TotalMilliseconds); //give some time to process message\r\n                        }\r\n\r\n                        if (!process.HasExited)\r\n                        {\r\n                            process.Kill(); //TODO show UI message asking user to close program himself instead of silently killing it\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (IsWinFormsApplication)\r\n                {\r\n                    MethodInvoker methodInvoker = Application.Exit;\r\n                    methodInvoker.Invoke();\r\n                }\r\n#if NETWPF\r\n                else if (System.Windows.Application.Current != null)\r\n                {\r\n                    System.Windows.Application.Current.Dispatcher.BeginInvoke(new Action(() =>\r\n                        System.Windows.Application.Current.Shutdown()));\r\n                }\r\n#endif\r\n                else\r\n                {\r\n                    Environment.Exit(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        private static Attribute GetAttribute(Assembly assembly, Type attributeType)\r\n        {\r\n            object[] attributes = assembly.GetCustomAttributes(attributeType, false);\r\n            if (attributes.Length == 0)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return (Attribute) attributes[0];\r\n        }\r\n\r\n        internal static string GetUserAgent()\r\n        {\r\n            return string.IsNullOrEmpty(HttpUserAgent) ? $\"AutoUpdater.NET\" : HttpUserAgent;\r\n        }\r\n\r\n        internal static void SetTimer(DateTime remindLater)\r\n        {\r\n            TimeSpan timeSpan = remindLater - DateTime.Now;\r\n\r\n            var context = SynchronizationContext.Current;\r\n\r\n            _remindLaterTimer = new System.Timers.Timer\r\n            {\r\n                Interval = (int) timeSpan.TotalMilliseconds,\r\n                AutoReset = false\r\n            };\r\n\r\n            _remindLaterTimer.Elapsed += delegate\r\n            {\r\n                _remindLaterTimer = null;\r\n                if (context != null)\r\n                {\r\n                    try\r\n                    {\r\n                        context.Send(state => Start(), null);\r\n                    }\r\n                    catch (InvalidAsynchronousStateException)\r\n                    {\r\n                        Start();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Start();\r\n                }\r\n            };\r\n\r\n            _remindLaterTimer.Start();\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Opens the Download window that download the update and execute the installer when download completes.\r\n        /// </summary>\r\n        public static bool DownloadUpdate()\r\n        {\r\n            var downloadDialog = new DownloadUpdateDialog(DownloadURL);\r\n\r\n            try\r\n            {\r\n                return downloadDialog.ShowDialog().Equals(DialogResult.OK);\r\n            }\r\n            catch (TargetInvocationException)\r\n            {\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Object of this class gives you all the details about the update useful in handling the update logic yourself.\r\n    /// </summary>\r\n    public class UpdateInfoEventArgs : EventArgs\r\n    {\r\n        /// <summary>\r\n        ///     If new update is available then returns true otherwise false.\r\n        /// </summary>\r\n        public bool IsUpdateAvailable { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Download URL of the update file.\r\n        /// </summary>\r\n        public string DownloadURL { get; set; }\r\n\r\n        /// <summary>\r\n        ///     URL of the webpage specifying changes in the new update.\r\n        /// </summary>\r\n        public string ChangelogURL { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Returns newest version of the application available to download.\r\n        /// </summary>\r\n        public Version CurrentVersion { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Returns version of the application currently installed on the user's PC.\r\n        /// </summary>\r\n        public Version InstalledVersion { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Shows if the update is required or optional.\r\n        /// </summary>\r\n        public bool Mandatory { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Defines how the Mandatory flag should work.\r\n        /// </summary>\r\n        public Mode UpdateMode { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Command line arguments used by Installer.\r\n        /// </summary>\r\n        public string InstallerArgs { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Checksum of the update file.\r\n        /// </summary>\r\n        public string Checksum { get; set; }\r\n\r\n        /// <summary>\r\n        ///     Hash algorithm that generated the checksum provided in the XML file.\r\n        /// </summary>\r\n        public string HashingAlgorithm { get; set; }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     An object of this class contains the AppCast file received from server.\r\n    /// </summary>\r\n    public class ParseUpdateInfoEventArgs : EventArgs\r\n    {\r\n        /// <summary>\r\n        ///     Remote data received from the AppCast file.\r\n        /// </summary>\r\n        public string RemoteData { get; }\r\n\r\n        /// <summary>\r\n        ///      Set this object with values received from the AppCast file.\r\n        /// </summary>\r\n        public UpdateInfoEventArgs UpdateInfo { get; set; }\r\n\r\n        /// <summary>\r\n        ///     An object containing the AppCast file received from server.\r\n        /// </summary>\r\n        /// <param name=\"remoteData\">A string containing remote data received from the AppCast file.</param>\r\n        public ParseUpdateInfoEventArgs(string remoteData)\r\n        {\r\n            RemoteData = remoteData;\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    ///     Interface for authentication\r\n    /// </summary>\r\n    public interface IAuthentication\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Provides Basic Authentication header for web request.\r\n    /// </summary>\r\n    public class BasicAuthentication : IAuthentication\r\n    {\r\n        private string Username { get; }\r\n\r\n        private string Password { get; }\r\n\r\n        /// <summary>\r\n        /// Initializes credentials for Basic Authentication.\r\n        /// </summary>\r\n        /// <param name=\"username\">Username to use for Basic Authentication</param>\r\n        /// <param name=\"password\">Password to use for Basic Authentication</param>\r\n        public BasicAuthentication(string username, string password)\r\n        {\r\n            Username = username;\r\n            Password = password;\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public override string ToString()\r\n        {\r\n            var token = Convert.ToBase64String(Encoding.ASCII.GetBytes($\"{Username}:{Password}\"));\r\n            return $\"Basic {token}\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Provides Custom Authentication header for web request.\r\n    /// </summary>\r\n    public class CustomAuthentication : IAuthentication\r\n    {\r\n        private string HttpRequestHeaderAuthorizationValue { get; }\r\n\r\n        /// <summary>\r\n        /// Initializes authorization header value for Custom Authentication\r\n        /// </summary>\r\n        /// <param name=\"httpRequestHeaderAuthorizationValue\">Value to use as http request header authorization value</param>\r\n        public CustomAuthentication(string httpRequestHeaderAuthorizationValue)\r\n        {\r\n            HttpRequestHeaderAuthorizationValue = httpRequestHeaderAuthorizationValue;\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        public override string ToString()\r\n        {\r\n            return HttpRequestHeaderAuthorizationValue;\r\n        }\r\n    }\r\n}", "using System.Reflection;\r\nusing System.Runtime.InteropServices;\r\nusing System.Resources;\r\n\r\n// General Information about an assembly is controlled through the following \r\n// set of attributes. Change these attribute values to modify the information\r\n// associated with an assembly.\r\n[assembly: AssemblyTitle(\"AutoUpdater.NET\")]\r\n[assembly: AssemblyDescription(\"AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.\")]\r\n[assembly: AssemblyConfiguration(\"\")]\r\n[assembly: AssemblyCompany(\"RBSoft\")]\r\n[assembly: AssemblyProduct(\"AutoUpdater.NET\")]\r\n[assembly: AssemblyCopyright(\"Copyright \u00a9 2012-2019 RBSoft\")]\r\n[assembly: AssemblyTrademark(\"\")]\r\n[assembly: AssemblyCulture(\"\")]\r\n\r\n// Setting ComVisible to false makes the types in this assembly not visible \r\n// to COM components.  If you need to access a type in this assembly from \r\n// COM, set the ComVisible attribute to true on that type.\r\n[assembly: ComVisible(false)]\r\n\r\n// The following GUID is for the ID of the typelib if this project is exposed to COM\r\n[assembly: Guid(\"a4037a6f-fdf7-46c8-a303-c3c4fcddb015\")]\r\n\r\n// Version information for an assembly consists of the following four values:\r\n//\r\n//      Major Version\r\n//      Minor Version \r\n//      Build Number\r\n//      Revision\r\n//\r\n// You can specify all the values or you can default the Build and Revision Numbers \r\n// by using the '*' as shown below:\r\n// [assembly: AssemblyVersion(\"1.0.*\")]\r\n[assembly: AssemblyVersion(\"1.5.8.0\")]\r\n[assembly: AssemblyFileVersion(\"1.5.8.0\")]\r\n[assembly: NeutralResourcesLanguageAttribute(\"en\")]\r\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n    <metadata>\n        <id>Autoupdater.NET.Official</id>\n        <version>1.5.8</version>\n        <title>AutoUpdater.NET</title>\n        <authors>RBSoft</authors>\n        <owners>RBSoft</owners>\n        <license type=\"expression\">MIT</license>\n        <projectUrl>https://github.com/ravibpatel/AutoUpdater.NET</projectUrl>\n        <requireLicenseAcceptance>false</requireLicenseAcceptance>\n        <description>AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.</description>\n        <summary>Add auto update functionality to .NET applications.</summary>\n        <releaseNotes>https://github.com/ravibpatel/AutoUpdater.NET/releases</releaseNotes>\n        <copyright>RBSoft</copyright>\n        <language>en-US</language>\n        <tags>autoupdate updater c# vb wpf winforms</tags>\n    </metadata>\n</package>", "version: 1.5.8.{build}\nenvironment:\n  my_version: 1.5.8\n  my_secret:\n    secure: vbPRaZLQYpGPr4BrZZ4p6TofpSZMud+FKtlpqjgO8aA=\nskip_branch_with_pr: true\nimage: Visual Studio 2017\nclone_folder: c:\\projects\\AutoUpdater.NET\nbuild: off\ninstall:\n- nuget install secure-file -ExcludeVersion\n- cmd: nuget restore\n- secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.snk.enc\" -secret %my_secret%\n- secure-file\\tools\\secure-file -decrypt \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.snk.enc\" -secret %my_secret%\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release-NET35 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release-NET35 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\ZipExtractor\\ZipExtractor.csproj\" /p:Configuration=Release-NET40 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- msbuild \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\AutoUpdater.NET.csproj\" /p:Configuration=Release-NET40 /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- nuget pack \"c:\\projects\\AutoUpdater.NET\\AutoUpdater.NET\\build\\Autoupdater.NET.Official.nuspec\"\n- cmd: 7z a AutoUpdater.NET-%my_version%.zip %APPVEYOR_BUILD_FOLDER%\\AutoUpdater.NET\\build\\lib\\*\n\nartifacts:\n- path: AutoUpdater.NET-%my_version%.zip\n- path: Autoupdater.NET.Official.%my_version%.nupkg\n\ndeploy:\n- provider: GitHub\n  release: $(APPVEYOR_REPO_TAG_NAME)\n  description: '// TODO: Write Release Notes'\n  artifact: AutoUpdater.NET-%my_version%.zip\n  auth_token:\n    secure: WHW27Nvc8zNhfyhxIYdl/NwbrkFzvSX0vE4/CS8iByPXM6rcztWhUrDXJ7eejLBY\n  draft: false\n  prerelease: false\n  on:\n    branch: master                 # release from master branch only\n    appveyor_repo_tag: true        # deploy on tag push only\n\n- provider: NuGet\n  api_key:\n    secure: LzLwDiKGUZvNI6CmSFpyjba1mpKYeb6o8SDBejNO0EHY1SgC8xNTuh2nzBWkY7EV\n  skip_symbols: false\n  artifact: Autoupdater.NET.Official.%my_version%.nupkg\n  on:\n    branch: master                 # release from master branch only\n    appveyor_repo_tag: true        # deploy on tag push only"], "filenames": ["AutoUpdater.NET/AutoUpdater.cs", "AutoUpdater.NET/Properties/AssemblyInfo.cs", "AutoUpdater.NET/build/Autoupdater.NET.Official.nuspec", "appveyor.yml"], "buggy_code_start_loc": [465, 35, 5, 1], "buggy_code_end_loc": [467, 37, 6, 4], "fixing_code_start_loc": [465, 35, 5, 1], "fixing_code_end_loc": [466, 37, 6, 4], "type": "CWE-611", "message": "AutoUpdater.cs in AutoUpdater.NET before 1.5.8 allows XXE.", "other": {"cve": {"id": "CVE-2019-20627", "sourceIdentifier": "cve@mitre.org", "published": "2020-03-23T17:15:15.300", "lastModified": "2023-02-03T19:42:45.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "AutoUpdater.cs in AutoUpdater.NET before 1.5.8 allows XXE."}, {"lang": "es", "value": "El archivo AutoUpdater.cs en AutoUpdater.NET versiones anteriores a 1.5.8, permite un ataque de tipo XXE."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rbsoft:autoupdater.net:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.8", "matchCriteriaId": "6F657DEF-D649-464D-BACE-9B06AD7F302E"}]}]}], "references": [{"url": "https://github.com/ravibpatel/AutoUpdater.NET/commit/1dc25f2bea6ea522dbac1512b5563c4746d539c3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ravibpatel/AutoUpdater.NET/releases/tag/v1.5.8", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.doyler.net/security-not-included/autoupdater-net-vulnerability", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ravibpatel/AutoUpdater.NET/commit/1dc25f2bea6ea522dbac1512b5563c4746d539c3"}}