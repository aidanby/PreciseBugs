{"buggy_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Cart;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function getSearchQuery($data)\n    {\n        $sql = '\n            SELECT cart.id FROM cart\n            LEFT JOIN currency ON cart.currency_id = currency.id\n            LEFT JOIN promo ON cart.promo_id = promo.id';\n\n        return [$sql, []];\n    }\n\n    /**\n     * @return \\Model_Cart\n     */\n    public function getSessionCart()\n    {\n        $sqlBindings = [':session_id' => $this->di['session']->getId()];\n        $cart = $this->di['db']->findOne('Cart', 'session_id = :session_id', $sqlBindings);\n\n        if ($cart instanceof \\Model_Cart) {\n            return $cart;\n        }\n\n        $cc = $this->di['mod_service']('currency');\n\n        if ($this->di['session']->get('client_id')) {\n            $client_id = $this->di['session']->get('client_id');\n            $currency = $cc->getCurrencyByClientId($client_id);\n        } else {\n            $currency = $cc->getDefault();\n        }\n\n        $cart = $this->di['db']->dispense('Cart');\n        $cart->session_id = $this->di['session']->getId();\n        $cart->currency_id = $currency->id;\n        $cart->created_at = date('Y-m-d H:i:s');\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        return $cart;\n    }\n\n    public function addItem(\\Model_Cart $cart, \\Model_Product $product, array $data)\n    {\n        $event_params = array_merge($data, ['cart_id' => $cart->id, 'product_id' => $product->id]);\n        $this->di['events_manager']->fire(['event' => 'onBeforeProductAddedToCart', 'params' => $event_params]);\n\n        $productService = $product->getService();\n\n        if ($this->isRecurrentPricing($product)) {\n            $required = [\n                'period' => 'Period parameter not passed',\n            ];\n            $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n            if (!$this->isPeriodEnabledForProduct($product, $data['period'])) {\n                throw new \\Box_Exception('Selected billing period is not valid');\n            }\n        }\n\n        $qty = $data['quantity'] ?? 1;\n        // check stock\n        if (!$this->isStockAvailable($product, $qty)) {\n            throw new \\Box_Exception(\"This item is currently out of stock\");\n        }\n\n        $addons = $data['addons'] ?? [];\n        unset($data['id']);\n        unset($data['addons']);\n\n        $list = [];\n        $list[] = [\n            'product' => $product,\n            'config' => $data,\n        ];\n\n        // check for required domain product\n        if (method_exists($productService, 'getDomainProductFromConfig')) {\n            $dc = $productService->getDomainProductFromConfig($product, $data);\n            if (isset($dc['config']) && $dc['product'] && $dc['product'] instanceof \\Model_Product) {\n                $list[] = $dc;\n            }\n        }\n\n        $productService = $this->di['mod_service']('Product');\n        foreach ($addons as $id => $ac) {\n            if (isset($ac['selected']) && (bool) $ac['selected']) {\n                $addon = $productService->getAddonById($id);\n                if ($addon instanceof \\Model_Product) {\n                    if ($this->isRecurrentPricing($addon)) {\n                        $required = [\n                            'period' => 'Addon period parameter not passed',\n                        ];\n                        $this->di['validator']->checkRequiredParamsForArray($required, $ac);\n\n                        if (!$this->isPeriodEnabledForProduct($addon, $ac['period'])) {\n                            throw new \\Box_Exception('Selected billing period is not valid for the selected addon');\n                        }\n                    }\n                    $ac['parent_id'] = $product->id;\n\n                    $list[] = [\n                        'product' => $addon,\n                        'config' => $ac,\n                    ];\n                } else {\n                    error_log('Addon not found by id ' . $id);\n                }\n            }\n        }\n\n        foreach ($list as $c) {\n            $productFromList = $c['product'];\n            $productFromListConfig = $c['config'];\n\n            $productServiceFromList = $productFromList->getService();\n\n            // @deprecated logic\n            if (method_exists($productServiceFromList, 'prependOrderConfig')) {\n                $productFromListConfig = $productServiceFromList->prependOrderConfig($productFromList, $productFromListConfig);\n            }\n\n            if (method_exists($productServiceFromList, 'attachOrderConfig')) {\n                $model = $this->di['db']->load('Product', $productFromList->id);\n                $productFromListConfig = $productServiceFromList->attachOrderConfig($model, $productFromListConfig);\n            }\n            if (method_exists($productServiceFromList, 'validateOrderData')) {\n                $productServiceFromList->validateOrderData($productFromListConfig);\n            }\n            if (method_exists($productServiceFromList, 'validateCustomForm')) {\n                $productServiceFromList->validateCustomForm($productFromListConfig, $this->di['db']->toArray($productFromList));\n            }\n            $this->addProduct($cart, $productFromList, $productFromListConfig);\n        }\n\n        $this->di['logger']->info('Added \"%s\" to shopping cart', $product->title);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterProductAddedToCart', 'params' => $event_params]);\n\n        return true;\n    }\n\n    public function isStockAvailable(\\Model_Product $product, $qty)\n    {\n        if ($product->stock_control) {\n            return $product->quantity_in_stock >= $qty;\n        }\n\n        return true;\n    }\n\n    public function isRecurrentPricing(\\Model_Product $model)\n    {\n        $productTable = $model->getTable();\n        $pricing = $productTable->getPricingArray($model);\n\n        return isset($pricing['type']) && \\Model_ProductPayment::RECURRENT == $pricing['type'];\n    }\n\n    public function isPeriodEnabledForProduct(\\Model_Product $model, $period)\n    {\n        $productTable = $model->getTable();\n        $pricing = $productTable->getPricingArray($model);\n        if (\\Model_ProductPayment::RECURRENT == $pricing['type']) {\n            return (bool) $pricing['recurrent'][$period]['enabled'];\n        }\n\n        return true;\n    }\n\n    protected function addProduct(\\Model_Cart $cart, \\Model_Product $product, array $data)\n    {\n        $item = $this->di['db']->dispense('CartProduct');\n        $item->cart_id = $cart->id;\n        $item->product_id = $product->id;\n        $item->config = json_encode($data);\n        $this->di['db']->store($item);\n\n        return true;\n    }\n\n    public function removeProduct(\\Model_Cart $cart, $id, $removeAddons = true)\n    {\n        $bindings = [\n            ':cart_id' => $cart->id,\n            ':id' => $id,\n        ];\n\n        $cartProduct = $this->di['db']->findOne('CartProduct', 'id = :id AND cart_id = :cart_id', $bindings);\n        if (!$cartProduct instanceof \\Model_CartProduct) {\n            throw new \\Box_Exception('Product not found');\n        }\n\n        if ($removeAddons) {\n            $allCartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n            foreach ((array) $allCartProducts as $cProduct) {\n                $config = json_decode($cProduct->config, true);\n                if (isset($config['parent_id']) && $config['parent_id'] == $cartProduct->product_id) {\n                    $this->di['db']->trash($cProduct);\n                    $this->di['logger']->info('Removed product addon from shopping cart');\n                }\n            }\n        }\n\n        $this->di['db']->trash($cartProduct);\n\n        $this->di['logger']->info('Removed product from shopping cart');\n\n        return true;\n    }\n\n    public function changeCartCurrency(\\Model_Cart $cart, \\Model_Currency $currency)\n    {\n        $cart->currency_id = $currency->id;\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Changed shopping cart #%s currency to %s', $cart->id, $currency->title);\n\n        return true;\n    }\n\n    public function resetCart(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n        foreach ($cartProducts as $cartProduct) {\n            $this->di['db']->trash($cartProduct);\n        }\n        $cart->promo_id = null;\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        return true;\n    }\n\n    public function removePromo(\\Model_Cart $cart)\n    {\n        $cart->promo_id = null;\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Removed promo code from shopping cart #%s', $cart->id);\n\n        return true;\n    }\n\n    public function applyPromo(\\Model_Cart $cart, \\Model_Promo $promo)\n    {\n        if ($cart->promo_id == $promo->id) {\n            return true;\n        }\n\n        if ($this->isEmptyCart($cart)) {\n            throw new \\Box_Exception('Add products to cart before applying promo code');\n        }\n\n        $cart->promo_id = $promo->id;\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Applied promo code %s to shopping cart', $promo->code);\n\n        return true;\n    }\n\n    protected function isEmptyCart(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n\n        return 0 == count($cartProducts);\n    }\n\n    public function rm(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n\n        foreach ($cartProducts as $cartProduct) {\n            $this->di['db']->trash($cartProduct);\n        }\n\n        $this->di['db']->trash($cart);\n\n        return true;\n    }\n\n    public function toApiArray(\\Model_Cart $model, $deep = false, $identity = null)\n    {\n        $products = $this->getCartProducts($model);\n\n        $currency = $this->di['db']->getExistingModelById('Currency', $model->currency_id);\n\n        $items = [];\n        $total = 0;\n        $cart_discount = 0;\n        $items_discount = 0;\n        foreach ($products as $product) {\n            $p = $this->cartProductToApiArray($product);\n            $total += $p['total'] + $p['setup_price'];\n            $items_discount += $p['discount'];\n            $items[] = $p;\n        }\n\n        if ($model->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $model->promo_id, 'Promo not found');\n            $promocode = $promo->code;\n        } else {\n            $promocode = null;\n        }\n\n        $currencyService = $this->di['mod_service']('currency');\n        $result = [\n            'promocode' => $promocode,\n            'discount' => $items_discount,\n            'subtotal' => $total,\n            'total' => $total - $items_discount,\n            'items' => $items,\n            'currency' => $currencyService->toApiArray($currency),\n        ];\n\n        return $result;\n    }\n\n    public function isClientAbleToUsePromo(\\Model_Client $client, \\Model_Promo $promo)\n    {\n        if (!$this->promoCanBeApplied($promo)) {\n            return false;\n        }\n\n        if (!$promo->once_per_client) {\n            return true;\n        }\n\n        return !$this->clientHadUsedPromo($client, $promo);\n    }\n\n    public function promoCanBeApplied(\\Model_Promo $promo)\n    {\n        if (!$promo->active) {\n            return false;\n        }\n\n        if ($promo->maxuses && $promo->maxuses <= $promo->used) {\n            return false;\n        }\n\n        if ($promo->start_at && (strtotime($promo->start_at) - time() > 0)) {\n            return false;\n        }\n\n        if ($promo->end_at && (strtotime($promo->end_at) - time() < 0)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function isPromoAvailableForClientGroup(\\Model_Promo $promo)\n    {\n        $clientGroups = $this->di['tools']->decodeJ($promo->client_groups);\n\n        if (empty($clientGroups)) {\n            return true;\n        }\n\n        try {\n            $client = $this->di['loggedin_client'];\n        } catch (\\Exception) {\n            $client = null;\n        }\n\n        if (is_null($client)) {\n            return false;\n        }\n\n        if (!$client->client_group_id) {\n            return false;\n        }\n\n        return in_array($client->client_group_id, $clientGroups);\n    }\n\n    protected function clientHadUsedPromo(\\Model_Client $client, \\Model_Promo $promo)\n    {\n        $sql = 'SELECT id FROM client_order WHERE promo_id = :promo AND client_id = :cid LIMIT 1';\n        $promoId = $this->di['db']->getCell($sql, [':promo' => $promo->id, ':cid' => $client->id]);\n\n        return null !== $promoId;\n    }\n\n    public function getCartProducts(\\Model_Cart $model)\n    {\n        return $this->di['db']->find('CartProduct', 'cart_id = :cart_id ORDER BY id ASC', [':cart_id' => $model->id]);\n    }\n\n    public function checkoutCart(\\Model_Cart $cart, \\Model_Client $client, $gateway_id = null)\n    {\n        if ($cart->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found');\n            if (!$this->isClientAbleToUsePromo($client, $promo)) {\n                throw new \\Box_Exception('You have already used this promo code. Please remove promo code and checkout again.', null, 9874);\n            }\n        }\n\n        $this->di['events_manager']->fire(\n            [\n                'event' => 'onBeforeClientCheckout',\n                'params' => [\n                    'ip' => $this->di['request']->getClientAddress(),\n                    'client_id' => $client->id,\n                    'cart_id' => $cart->id,\n                ],\n            ]\n        );\n\n        [$order, $invoice, $orders] = $this->createFromCart($client, $gateway_id);\n\n        $this->rm($cart);\n\n        $this->di['logger']->info('Checked out shopping cart');\n\n        $this->di['events_manager']->fire(\n            [\n                'event' => 'onAfterClientOrderCreate',\n                'params' => [\n                    'ip' => $this->di['request']->getClientAddress(),\n                    'client_id' => $client->id,\n                    'id' => $order->id,\n                ],\n            ]\n        );\n\n        $result = [\n            'gateway_id' => $gateway_id,\n            'invoice_hash' => null,\n            'order_id' => $order->id,\n            'orders' => $orders,\n        ];\n\n        // invoice may not be created if total is 0\n        if ($invoice instanceof \\Model_Invoice && \\Model_Invoice::STATUS_UNPAID == $invoice->status) {\n            $result['invoice_hash'] = $invoice->hash;\n        }\n\n        return $result;\n    }\n\n    public function createFromCart(\\Model_Client $client, $gateway_id = null)\n    {\n        $cart = $this->getSessionCart();\n        $ca = $this->toApiArray($cart);\n        if (0 == count($ca['items'])) {\n            throw new \\Box_Exception('Can not checkout empty cart.');\n        }\n\n        $currency = $this->di['db']->getExistingModelById('Currency', $cart->currency_id, 'Currency not found.');\n\n        // set default client currency\n        if (!$client->currency) {\n            $client->currency = $currency->code;\n            $this->di['db']->store($client);\n        }\n\n        if ($client->currency != $currency->code) {\n            throw new \\Box_Exception('Selected currency :selected does not match your profile currency :code. Please change cart currency to continue.', [':selected' => $currency->code, ':code' => $client->currency]);\n        }\n\n        $clientService = $this->di['mod_service']('client');\n        $taxed = $clientService->isClientTaxable($client);\n\n        $orders = [];\n        $invoice_items = [];\n        $master_order = null;\n        $i = 0;\n\n        foreach ($this->getCartProducts($cart) as $p) {\n            $item = $this->cartProductToApiArray($p);\n\n            /*\n             * Convert the domain name to lowercase letters.\n             * Using a capital letter in a domain name still points to the same name, so this isn't going to break anything\n             * It will, however, avoid instances like this when a domain name is entered with a capital letter:\n             * https://github.com/boxbilling/boxbilling/discussions/1022#discussioncomment-1311819\n             */\n            $item['register_sld'] = (isset($item['register_sld'])) ? strtolower($item['register_sld']) : null;\n            $item['transfer_sld'] = (isset($item['transfer_sld'])) ? strtolower($item['transfer_sld']) : null;\n            $item['sld'] = (isset($item['sld'])) ? strtolower($item['sld']) : null;\n            $item['domain']['owndomain_sld'] = (isset($item['domain']['owndomain_sld'])) ? strtolower($item['domain']['owndomain_sld']) : null;\n            $item['domain']['register_sld'] = (isset($item['domain']['register_sld'])) ? strtolower($item['domain']['register_sld']) : null;\n            $item['domain']['transfer_sld'] = (isset($item['domain']['transfer_sld'])) ? strtolower($item['domain']['transfer_sld']) : null;\n\n            // Domain TLD must begin with a period - add if not present for owndomain.\n            $item['domain']['owndomain_tld'] = (isset( $item['domain']['owndomain_tld'])) ? (str_contains($item['domain']['owndomain_tld'], '.') ? $item['domain']['owndomain_tld'] : '.' . $item['domain']['owndomain_tld']) : null;\n\n            $order = $this->di['db']->dispense('ClientOrder');\n            $order->client_id = $client->id;\n            $order->promo_id = $cart->promo_id;\n            $order->product_id = $item['product_id'];\n            $order->form_id = $item['form_id'];\n\n            $order->group_id = $cart->id;\n            $order->group_master = (0 == $i);\n            $order->invoice_option = 'issue-invoice';\n            $order->title = $item['title'];\n            $order->currency = $currency->code;\n            $order->service_type = $item['type'];\n            $order->unit = $item['unit'] ?? null;\n            $order->period = $item['period'] ?? null;\n            $order->quantity = $item['quantity'] ?? null;\n            $order->price = $item['price'] * $currency->conversion_rate;\n            $order->discount = $item['discount_price'] * $currency->conversion_rate;\n            $order->status = \\Model_ClientOrder::STATUS_PENDING_SETUP;\n            $order->notes = $item['notes'] ?? null;\n            $order->config = json_encode($item);\n            $order->created_at = date('Y-m-d H:i:s');\n            $order->updated_at = date('Y-m-d H:i:s');\n            $this->di['db']->store($order);\n\n            $orders[] = $order;\n\n            // mark promo as used\n            if ($cart->promo_id) {\n                $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found.');\n                $this->usePromo($promo);\n\n                // set promo info for later use\n                $order->promo_recurring = $promo->recurring;\n                $order->promo_used = 1;\n                $this->di['db']->store($order);\n            }\n\n            $orderService = $this->di['mod_service']('order');\n            $orderService->saveStatusChange($order, 'Order created');\n\n            $invoice_items[] = [\n                'title' => $order->title,\n                'price' => $order->price,\n                'quantity' => $order->quantity,\n                'unit' => $order->unit,\n                'period' => $order->period,\n                'taxed' => $taxed,\n                'type' => \\Model_InvoiceItem::TYPE_ORDER,\n                'rel_id' => $order->id,\n                'task' => \\Model_InvoiceItem::TASK_ACTIVATE,\n            ];\n\n            if ($order->discount > 0) {\n                $invoice_items[] = [\n                    'title' => __trans('Discount: :product', [':product' => $order->title]),\n                    'price' => $order->discount * -1,\n                    'quantity' => 1,\n                    'unit' => 'discount',\n                    'rel_id' => $order->id,\n                    'taxed' => $taxed,\n                ];\n            }\n\n            if ($item['setup_price'] > 0) {\n                $setup_price = ($item['setup_price'] * $currency->conversion_rate) - ($item['discount_setup'] * $currency->conversion_rate);\n                $invoice_items[] = [\n                    'title' => __trans(':product setup', [':product' => $order->title]),\n                    'price' => $setup_price,\n                    'quantity' => 1,\n                    'unit' => 'service',\n                    'taxed' => $taxed,\n                ];\n            }\n\n            // define master order to be returned\n            if (null === $master_order) {\n                $master_order = $order;\n            }\n\n            ++$i;\n        }\n\n        if ($ca['total'] > 0) { // crete invoice if order total > 0\n            $invoiceService = $this->di['mod_service']('Invoice');\n            $invoiceModel = $invoiceService->prepareInvoice($client, ['client_id' => $client->id, 'items' => $invoice_items, 'gateway_id' => $gateway_id]);\n\n            $clientBalanceService = $this->di['mod_service']('Client', 'Balance');\n            $balanceAmount = $clientBalanceService->getClientBalance($client);\n            $useCredits = $balanceAmount >= $ca['total'];\n\n            $invoiceService->approveInvoice($invoiceModel, ['id' => $invoiceModel->id, 'use_credits' => $useCredits]);\n\n            if (\\Model_Invoice::STATUS_UNPAID == $invoiceModel->status) {\n                foreach ($orders as $order) {\n                    $order->unpaid_invoice_id = $invoiceModel->id;\n                    $this->di['db']->store($order);\n                }\n            }\n        }\n\n        // activate orders if product is setup to be activated after order place or order total is $0\n        $orderService = $this->di['mod_service']('Order');\n        $ids = [];\n        foreach ($orders as $order) {\n            $ids[] = $order->id;\n            $oa = $orderService->toApiArray($order, false, $client);\n            $product = $this->di['db']->getExistingModelById('Product', $oa['product_id']);\n            try {\n                if (\\Model_ProductTable::SETUP_AFTER_ORDER == $product->setup) {\n                    $orderService->activateOrder($order);\n                }\n\n                if ($ca['total'] <= 0 && \\Model_ProductTable::SETUP_AFTER_PAYMENT == $product->setup && $oa['total'] - $oa['discount'] <= 0) {\n                    $orderService->activateOrder($order);\n                }\n\n                if ($ca['total'] > 0 && \\Model_ProductTable::SETUP_AFTER_PAYMENT == $product->setup && \\Model_Invoice::STATUS_PAID == $invoiceModel->status) {\n                    $orderService->activateOrder($order);\n                }\n            } catch (\\Exception $e) {\n                error_log($e->getMessage());\n                $status = 'error';\n                $notes = 'Order could not be activated after checkout due to error: ' . $e->getMessage();\n                $orderService->orderStatusAdd($order, $status, $notes);\n            }\n        }\n\n        return [\n            $master_order,\n            $invoiceModel ?? null,\n            $ids,\n        ];\n    }\n\n    public function usePromo(\\Model_Promo $promo)\n    {\n        ++$promo->used;\n        $promo->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($promo);\n    }\n\n    public function findActivePromoByCode($code)\n    {\n        return $this->di['db']->findOne('Promo', 'code = :code AND active = 1 ORDER BY id ASC', [':code' => $code]);\n    }\n\n    private function getItemPrice(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $repo = $product->getTable();\n\n        return $repo->getProductPrice($product, $config);\n    }\n\n    private function getItemSetupPrice(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $repo = $product->getTable();\n\n        return $repo->getProductSetupPrice($product, $config);\n    }\n\n    /**\n     * Function checks if product is related to other products in cart\n     * If relation exists then count discount for this.\n     *\n     * @return number\n     */\n    protected function getRelatedItemsDiscount(\\Model_Cart $cart, \\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $product->getTable();\n        $config = $this->getItemConfig($model);\n\n        $discount = 0;\n        if (method_exists($repo, 'getRelatedDiscount')) {\n            $list = [];\n            $products = $this->getCartProducts($cart);\n            foreach ($products as $p) {\n                $item = $this->di['db']->toArray($p);\n                $item['config'] = $this->getItemConfig($p);\n                $list[] = $item;\n            }\n            $discount = $repo->getRelatedDiscount($list, $product, $config);\n        }\n\n        return $discount;\n    }\n\n    private function getItemTitle(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $service = $product->getService();\n        if (method_exists($service, 'getCartProductTitle')) {\n            return $service->getCartProductTitle($product, $config);\n        } else {\n            return $product->title;\n        }\n    }\n\n    protected function getItemPromoDiscount(\\Model_CartProduct $model, \\Model_Promo $promo)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $this->di['mod_service']('product');\n        $config = $this->getItemConfig($model);\n\n        return $repo->getProductDiscount($product, $promo, $config);\n    }\n\n    public function getItemConfig(\\Model_CartProduct $model)\n    {\n        return $this->di['tools']->decodeJ($model->config);\n    }\n\n    public function cartProductToApiArray(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $product->getTable();\n        $config = $this->getItemConfig($model);\n        $setup = $repo->getProductSetupPrice($product, $config);\n        $price = $repo->getProductPrice($product, $config);\n        $qty = $config['quantity'] ?? 1;\n\n        [$discount_price, $discount_setup] = $this->getProductDiscount($model, $setup);\n\n        $discount_total = $discount_price + $discount_setup;\n\n        $subtotal = ($price * $qty);\n        if (abs($discount_total) > ($subtotal + $setup)) {\n            $discount_total = $subtotal;\n            $discount_price = $subtotal;\n        }\n\n        $data = array_merge($config, [\n            'id' => $model->id,\n            'product_id' => $product->id,\n            'form_id' => $product->form_id,\n            'title' => $this->getItemTitle($model),\n            'type' => $product->type,\n            'quantity' => $qty,\n            'unit' => $repo->getUnit($product),\n            'price' => $price,\n            'setup_price' => $setup,\n            'discount' => $discount_total,\n            'discount_price' => $discount_price,\n            'discount_setup' => $discount_setup,\n            'total' => $subtotal,\n        ]);\n\n        return $data;\n    }\n\n    public function getProductDiscount(\\Model_CartProduct $cartProduct, $setup)\n    {\n        $cart = $this->di['db']->load('Cart', $cartProduct->cart_id);\n        $discount_price = $this->getRelatedItemsDiscount($cart, $cartProduct);\n        $discount_setup = 0; // discount for setup price\n        if ($cart->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found');\n            // Promo discount should override related item discount\n            $discount_price = $this->getItemPromoDiscount($cartProduct, $promo);\n\n            if ($promo->freesetup) {\n                $discount_setup = $setup;\n            }\n        }\n\n        return [$discount_price, $discount_setup];\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Cart;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function getSearchQuery($data)\n    {\n        $sql = '\n            SELECT cart.id FROM cart\n            LEFT JOIN currency ON cart.currency_id = currency.id\n            LEFT JOIN promo ON cart.promo_id = promo.id';\n\n        return [$sql, []];\n    }\n\n    /**\n     * @return \\Model_Cart\n     */\n    public function getSessionCart()\n    {\n        $sqlBindings = [':session_id' => $this->di['session']->getId()];\n        $cart = $this->di['db']->findOne('Cart', 'session_id = :session_id', $sqlBindings);\n\n        if ($cart instanceof \\Model_Cart) {\n            return $cart;\n        }\n\n        $cc = $this->di['mod_service']('currency');\n\n        if ($this->di['session']->get('client_id')) {\n            $client_id = $this->di['session']->get('client_id');\n            $currency = $cc->getCurrencyByClientId($client_id);\n        } else {\n            $currency = $cc->getDefault();\n        }\n\n        $cart = $this->di['db']->dispense('Cart');\n        $cart->session_id = $this->di['session']->getId();\n        $cart->currency_id = $currency->id;\n        $cart->created_at = date('Y-m-d H:i:s');\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        return $cart;\n    }\n\n    public function addItem(\\Model_Cart $cart, \\Model_Product $product, array $data)\n    {\n        $event_params = array_merge($data, ['cart_id' => $cart->id, 'product_id' => $product->id]);\n        $this->di['events_manager']->fire(['event' => 'onBeforeProductAddedToCart', 'params' => $event_params]);\n\n        $productService = $product->getService();\n\n        if ($this->isRecurrentPricing($product)) {\n            $required = [\n                'period' => 'Period parameter not passed',\n            ];\n            $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n            if (!$this->isPeriodEnabledForProduct($product, $data['period'])) {\n                throw new \\Box_Exception('Selected billing period is not valid');\n            }\n        }\n\n        $qty = $data['quantity'] ?? 1;\n        // check stock\n        if (!$this->isStockAvailable($product, $qty)) {\n            throw new \\Box_Exception(\"This item is currently out of stock\");\n        }\n\n        $addons = $data['addons'] ?? [];\n        unset($data['id']);\n        unset($data['addons']);\n\n        $list = [];\n        $list[] = [\n            'product' => $product,\n            'config' => $data,\n        ];\n\n        // check for required domain product\n        if (method_exists($productService, 'getDomainProductFromConfig')) {\n            $dc = $productService->getDomainProductFromConfig($product, $data);\n            if (isset($dc['config']) && $dc['product'] && $dc['product'] instanceof \\Model_Product) {\n                $list[] = $dc;\n            }\n        }\n\n        $productService = $this->di['mod_service']('Product');\n        foreach ($addons as $id => $ac) {\n            if (isset($ac['selected']) && (bool) $ac['selected']) {\n                $addon = $productService->getAddonById($id);\n                if ($addon instanceof \\Model_Product) {\n                    if ($this->isRecurrentPricing($addon)) {\n                        $required = [\n                            'period' => 'Addon period parameter not passed',\n                        ];\n                        $this->di['validator']->checkRequiredParamsForArray($required, $ac);\n\n                        if (!$this->isPeriodEnabledForProduct($addon, $ac['period'])) {\n                            throw new \\Box_Exception('Selected billing period is not valid for the selected addon');\n                        }\n                    }\n                    $ac['parent_id'] = $product->id;\n\n                    $list[] = [\n                        'product' => $addon,\n                        'config' => $ac,\n                    ];\n                } else {\n                    error_log('Addon not found by id ' . $id);\n                }\n            }\n        }\n\n        foreach ($list as $c) {\n            $productFromList = $c['product'];\n            $productFromListConfig = $c['config'];\n\n            $productServiceFromList = $productFromList->getService();\n\n            // @deprecated logic\n            if (method_exists($productServiceFromList, 'prependOrderConfig')) {\n                $productFromListConfig = $productServiceFromList->prependOrderConfig($productFromList, $productFromListConfig);\n            }\n\n            if (method_exists($productServiceFromList, 'attachOrderConfig')) {\n                $model = $this->di['db']->load('Product', $productFromList->id);\n                $productFromListConfig = $productServiceFromList->attachOrderConfig($model, $productFromListConfig);\n            }\n            if (method_exists($productServiceFromList, 'validateOrderData')) {\n                $productServiceFromList->validateOrderData($productFromListConfig);\n            }\n            if (method_exists($productServiceFromList, 'validateCustomForm')) {\n                $productServiceFromList->validateCustomForm($productFromListConfig, $this->di['db']->toArray($productFromList));\n            }\n            $this->addProduct($cart, $productFromList, $productFromListConfig);\n        }\n\n        $this->di['logger']->info('Added \"%s\" to shopping cart', $product->title);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterProductAddedToCart', 'params' => $event_params]);\n\n        return true;\n    }\n\n    public function isStockAvailable(\\Model_Product $product, $qty)\n    {\n        if ($product->stock_control) {\n            return $product->quantity_in_stock >= $qty;\n        }\n\n        return true;\n    }\n\n    public function isRecurrentPricing(\\Model_Product $model)\n    {\n        $productTable = $model->getTable();\n        $pricing = $productTable->getPricingArray($model);\n\n        return isset($pricing['type']) && \\Model_ProductPayment::RECURRENT == $pricing['type'];\n    }\n\n    public function isPeriodEnabledForProduct(\\Model_Product $model, $period)\n    {\n        $productTable = $model->getTable();\n        $pricing = $productTable->getPricingArray($model);\n        if (\\Model_ProductPayment::RECURRENT == $pricing['type']) {\n            return (bool) $pricing['recurrent'][$period]['enabled'];\n        }\n\n        return true;\n    }\n\n    protected function addProduct(\\Model_Cart $cart, \\Model_Product $product, array $data)\n    {\n        $item = $this->di['db']->dispense('CartProduct');\n        $item->cart_id = $cart->id;\n        $item->product_id = $product->id;\n        $item->config = json_encode($data);\n        $this->di['db']->store($item);\n\n        return true;\n    }\n\n    public function removeProduct(\\Model_Cart $cart, $id, $removeAddons = true)\n    {\n        $bindings = [\n            ':cart_id' => $cart->id,\n            ':id' => $id,\n        ];\n\n        $cartProduct = $this->di['db']->findOne('CartProduct', 'id = :id AND cart_id = :cart_id', $bindings);\n        if (!$cartProduct instanceof \\Model_CartProduct) {\n            throw new \\Box_Exception('Product not found');\n        }\n\n        if ($removeAddons) {\n            $allCartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n            foreach ((array) $allCartProducts as $cProduct) {\n                $config = json_decode($cProduct->config, true);\n                if (isset($config['parent_id']) && $config['parent_id'] == $cartProduct->product_id) {\n                    $this->di['db']->trash($cProduct);\n                    $this->di['logger']->info('Removed product addon from shopping cart');\n                }\n            }\n        }\n\n        $this->di['db']->trash($cartProduct);\n\n        $this->di['logger']->info('Removed product from shopping cart');\n\n        return true;\n    }\n\n    public function changeCartCurrency(\\Model_Cart $cart, \\Model_Currency $currency)\n    {\n        $cart->currency_id = $currency->id;\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Changed shopping cart #%s currency to %s', $cart->id, $currency->title);\n\n        return true;\n    }\n\n    public function resetCart(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n        foreach ($cartProducts as $cartProduct) {\n            $this->di['db']->trash($cartProduct);\n        }\n        $cart->promo_id = null;\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        return true;\n    }\n\n    public function removePromo(\\Model_Cart $cart)\n    {\n        $cart->promo_id = null;\n        $cart->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Removed promo code from shopping cart #%s', $cart->id);\n\n        return true;\n    }\n\n    public function applyPromo(\\Model_Cart $cart, \\Model_Promo $promo)\n    {\n        if ($cart->promo_id == $promo->id) {\n            return true;\n        }\n\n        if ($this->isEmptyCart($cart)) {\n            throw new \\Box_Exception('Add products to cart before applying promo code');\n        }\n\n        $cart->promo_id = $promo->id;\n        $this->di['db']->store($cart);\n\n        $this->di['logger']->info('Applied promo code %s to shopping cart', $promo->code);\n\n        return true;\n    }\n\n    protected function isEmptyCart(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n\n        return 0 == count($cartProducts);\n    }\n\n    public function rm(\\Model_Cart $cart)\n    {\n        $cartProducts = $this->di['db']->find('CartProduct', 'cart_id = :cart_id', [':cart_id' => $cart->id]);\n\n        foreach ($cartProducts as $cartProduct) {\n            $this->di['db']->trash($cartProduct);\n        }\n\n        $this->di['db']->trash($cart);\n\n        return true;\n    }\n\n    public function toApiArray(\\Model_Cart $model, $deep = false, $identity = null)\n    {\n        $products = $this->getCartProducts($model);\n\n        $currency = $this->di['db']->getExistingModelById('Currency', $model->currency_id);\n\n        $items = [];\n        $total = 0;\n        $cart_discount = 0;\n        $items_discount = 0;\n        foreach ($products as $product) {\n            $p = $this->cartProductToApiArray($product);\n            $total += $p['total'] + $p['setup_price'];\n            $items_discount += $p['discount'];\n            $items[] = $p;\n        }\n\n        if ($model->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $model->promo_id, 'Promo not found');\n            $promocode = $promo->code;\n        } else {\n            $promocode = null;\n        }\n\n        $currencyService = $this->di['mod_service']('currency');\n        $result = [\n            'promocode' => $promocode,\n            'discount' => $items_discount,\n            'subtotal' => $total,\n            'total' => $total - $items_discount,\n            'items' => $items,\n            'currency' => $currencyService->toApiArray($currency),\n        ];\n\n        return $result;\n    }\n\n    public function isClientAbleToUsePromo(\\Model_Client $client, \\Model_Promo $promo)\n    {\n        if (!$this->promoCanBeApplied($promo)) {\n            return false;\n        }\n\n        if (!$promo->once_per_client) {\n            return true;\n        }\n\n        return !$this->clientHadUsedPromo($client, $promo);\n    }\n\n    public function promoCanBeApplied(\\Model_Promo $promo)\n    {\n        if (!$promo->active) {\n            return false;\n        }\n\n        if ($promo->maxuses && $promo->maxuses <= $promo->used) {\n            return false;\n        }\n\n        if ($promo->start_at && (strtotime($promo->start_at) - time() > 0)) {\n            return false;\n        }\n\n        if ($promo->end_at && (strtotime($promo->end_at) - time() < 0)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function isPromoAvailableForClientGroup(\\Model_Promo $promo)\n    {\n        $clientGroups = $this->di['tools']->decodeJ($promo->client_groups);\n\n        if (empty($clientGroups)) {\n            return true;\n        }\n\n        try {\n            $client = $this->di['loggedin_client'];\n        } catch (\\Exception) {\n            $client = null;\n        }\n\n        if (is_null($client)) {\n            return false;\n        }\n\n        if (!$client->client_group_id) {\n            return false;\n        }\n\n        return in_array($client->client_group_id, $clientGroups);\n    }\n\n    protected function clientHadUsedPromo(\\Model_Client $client, \\Model_Promo $promo)\n    {\n        $sql = 'SELECT id FROM client_order WHERE promo_id = :promo AND client_id = :cid LIMIT 1';\n        $promoId = $this->di['db']->getCell($sql, [':promo' => $promo->id, ':cid' => $client->id]);\n\n        return null !== $promoId;\n    }\n\n    public function getCartProducts(\\Model_Cart $model)\n    {\n        return $this->di['db']->find('CartProduct', 'cart_id = :cart_id ORDER BY id ASC', [':cart_id' => $model->id]);\n    }\n\n    public function checkoutCart(\\Model_Cart $cart, \\Model_Client $client, $gateway_id = null)\n    {\n        if ($cart->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found');\n            if (!$this->isClientAbleToUsePromo($client, $promo)) {\n                throw new \\Box_Exception('You have already used this promo code. Please remove promo code and checkout again.', null, 9874);\n            }\n        }\n\n        $this->di['events_manager']->fire(\n            [\n                'event' => 'onBeforeClientCheckout',\n                'params' => [\n                    'ip' => $this->di['request']->getClientAddress(),\n                    'client_id' => $client->id,\n                    'cart_id' => $cart->id,\n                ],\n            ]\n        );\n\n        [$order, $invoice, $orders] = $this->createFromCart($client, $gateway_id);\n\n        $this->rm($cart);\n\n        $this->di['logger']->info('Checked out shopping cart');\n\n        $this->di['events_manager']->fire(\n            [\n                'event' => 'onAfterClientOrderCreate',\n                'params' => [\n                    'ip' => $this->di['request']->getClientAddress(),\n                    'client_id' => $client->id,\n                    'id' => $order->id,\n                ],\n            ]\n        );\n\n        $result = [\n            'gateway_id' => $gateway_id,\n            'invoice_hash' => null,\n            'order_id' => $order->id,\n            'orders' => $orders,\n        ];\n\n        // invoice may not be created if total is 0\n        if ($invoice instanceof \\Model_Invoice && \\Model_Invoice::STATUS_UNPAID == $invoice->status) {\n            $result['invoice_hash'] = $invoice->hash;\n        }\n\n        return $result;\n    }\n\n    public function createFromCart(\\Model_Client $client, $gateway_id = null)\n    {\n        $cart = $this->getSessionCart();\n        $ca = $this->toApiArray($cart);\n        if (0 == count($ca['items'])) {\n            throw new \\Box_Exception('Can not checkout empty cart.');\n        }\n\n        $currency = $this->di['db']->getExistingModelById('Currency', $cart->currency_id, 'Currency not found.');\n\n        // set default client currency\n        if (!$client->currency) {\n            $client->currency = $currency->code;\n            $this->di['db']->store($client);\n        }\n\n        if ($client->currency != $currency->code) {\n            throw new \\Box_Exception('Selected currency :selected does not match your profile currency :code. Please change cart currency to continue.', [':selected' => $currency->code, ':code' => $client->currency]);\n        }\n\n        $clientService = $this->di['mod_service']('client');\n        $taxed = $clientService->isClientTaxable($client);\n\n        $orders = [];\n        $invoice_items = [];\n        $master_order = null;\n        $i = 0;\n\n        foreach ($this->getCartProducts($cart) as $p) {\n            $item = $this->cartProductToApiArray($p);\n\n            $product = $this->di['db']->getExistingModelById('Product', $item['product_id']);\n            if (is_null($product) || $product->status !== 'enabled') {\n                throw new \\Box_Exception(\"Unable to complete order. One or more of the selected products are invalid.\");\n            }\n\n            /*\n             * Convert the domain name to lowercase letters.\n             * Using a capital letter in a domain name still points to the same name, so this isn't going to break anything\n             * It will, however, avoid instances like this when a domain name is entered with a capital letter:\n             * https://github.com/boxbilling/boxbilling/discussions/1022#discussioncomment-1311819\n             */\n            $item['register_sld'] = (isset($item['register_sld'])) ? strtolower($item['register_sld']) : null;\n            $item['transfer_sld'] = (isset($item['transfer_sld'])) ? strtolower($item['transfer_sld']) : null;\n            $item['sld'] = (isset($item['sld'])) ? strtolower($item['sld']) : null;\n            $item['domain']['owndomain_sld'] = (isset($item['domain']['owndomain_sld'])) ? strtolower($item['domain']['owndomain_sld']) : null;\n            $item['domain']['register_sld'] = (isset($item['domain']['register_sld'])) ? strtolower($item['domain']['register_sld']) : null;\n            $item['domain']['transfer_sld'] = (isset($item['domain']['transfer_sld'])) ? strtolower($item['domain']['transfer_sld']) : null;\n\n            // Domain TLD must begin with a period - add if not present for owndomain.\n            $item['domain']['owndomain_tld'] = (isset($item['domain']['owndomain_tld'])) ? (str_contains($item['domain']['owndomain_tld'], '.') ? $item['domain']['owndomain_tld'] : '.' . $item['domain']['owndomain_tld']) : null;\n\n            $order = $this->di['db']->dispense('ClientOrder');\n            $order->client_id = $client->id;\n            $order->promo_id = $cart->promo_id;\n            $order->product_id = $item['product_id'];\n            $order->form_id = $item['form_id'];\n\n            $order->group_id = $cart->id;\n            $order->group_master = (0 == $i);\n            $order->invoice_option = 'issue-invoice';\n            $order->title = $item['title'];\n            $order->currency = $currency->code;\n            $order->service_type = $item['type'];\n            $order->unit = $item['unit'] ?? null;\n            $order->period = $item['period'] ?? null;\n            $order->quantity = $item['quantity'] ?? null;\n            $order->price = $item['price'] * $currency->conversion_rate;\n            $order->discount = $item['discount_price'] * $currency->conversion_rate;\n            $order->status = \\Model_ClientOrder::STATUS_PENDING_SETUP;\n            $order->notes = $item['notes'] ?? null;\n            $order->config = json_encode($item);\n            $order->created_at = date('Y-m-d H:i:s');\n            $order->updated_at = date('Y-m-d H:i:s');\n            $this->di['db']->store($order);\n\n            $orders[] = $order;\n\n            // mark promo as used\n            if ($cart->promo_id) {\n                $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found.');\n                $this->usePromo($promo);\n\n                // set promo info for later use\n                $order->promo_recurring = $promo->recurring;\n                $order->promo_used = 1;\n                $this->di['db']->store($order);\n            }\n\n            $orderService = $this->di['mod_service']('order');\n            $orderService->saveStatusChange($order, 'Order created');\n\n            $invoice_items[] = [\n                'title' => $order->title,\n                'price' => $order->price,\n                'quantity' => $order->quantity,\n                'unit' => $order->unit,\n                'period' => $order->period,\n                'taxed' => $taxed,\n                'type' => \\Model_InvoiceItem::TYPE_ORDER,\n                'rel_id' => $order->id,\n                'task' => \\Model_InvoiceItem::TASK_ACTIVATE,\n            ];\n\n            if ($order->discount > 0) {\n                $invoice_items[] = [\n                    'title' => __trans('Discount: :product', [':product' => $order->title]),\n                    'price' => $order->discount * -1,\n                    'quantity' => 1,\n                    'unit' => 'discount',\n                    'rel_id' => $order->id,\n                    'taxed' => $taxed,\n                ];\n            }\n\n            if ($item['setup_price'] > 0) {\n                $setup_price = ($item['setup_price'] * $currency->conversion_rate) - ($item['discount_setup'] * $currency->conversion_rate);\n                $invoice_items[] = [\n                    'title' => __trans(':product setup', [':product' => $order->title]),\n                    'price' => $setup_price,\n                    'quantity' => 1,\n                    'unit' => 'service',\n                    'taxed' => $taxed,\n                ];\n            }\n\n            // define master order to be returned\n            if (null === $master_order) {\n                $master_order = $order;\n            }\n\n            ++$i;\n        }\n\n        if ($ca['total'] > 0) { // crete invoice if order total > 0\n            $invoiceService = $this->di['mod_service']('Invoice');\n            $invoiceModel = $invoiceService->prepareInvoice($client, ['client_id' => $client->id, 'items' => $invoice_items, 'gateway_id' => $gateway_id]);\n\n            $clientBalanceService = $this->di['mod_service']('Client', 'Balance');\n            $balanceAmount = $clientBalanceService->getClientBalance($client);\n            $useCredits = $balanceAmount >= $ca['total'];\n\n            $invoiceService->approveInvoice($invoiceModel, ['id' => $invoiceModel->id, 'use_credits' => $useCredits]);\n\n            if (\\Model_Invoice::STATUS_UNPAID == $invoiceModel->status) {\n                foreach ($orders as $order) {\n                    $order->unpaid_invoice_id = $invoiceModel->id;\n                    $this->di['db']->store($order);\n                }\n            }\n        }\n\n        // activate orders if product is setup to be activated after order place or order total is $0\n        $orderService = $this->di['mod_service']('Order');\n        $ids = [];\n        foreach ($orders as $order) {\n            $ids[] = $order->id;\n            $oa = $orderService->toApiArray($order, false, $client);\n            $product = $this->di['db']->getExistingModelById('Product', $oa['product_id']);\n            try {\n                if (\\Model_ProductTable::SETUP_AFTER_ORDER == $product->setup) {\n                    $orderService->activateOrder($order);\n                }\n\n                if ($ca['total'] <= 0 && \\Model_ProductTable::SETUP_AFTER_PAYMENT == $product->setup && $oa['total'] - $oa['discount'] <= 0) {\n                    $orderService->activateOrder($order);\n                }\n\n                if ($ca['total'] > 0 && \\Model_ProductTable::SETUP_AFTER_PAYMENT == $product->setup && \\Model_Invoice::STATUS_PAID == $invoiceModel->status) {\n                    $orderService->activateOrder($order);\n                }\n            } catch (\\Exception $e) {\n                error_log($e->getMessage());\n                $status = 'error';\n                $notes = 'Order could not be activated after checkout due to error: ' . $e->getMessage();\n                $orderService->orderStatusAdd($order, $status, $notes);\n            }\n        }\n\n        return [\n            $master_order,\n            $invoiceModel ?? null,\n            $ids,\n        ];\n    }\n\n    public function usePromo(\\Model_Promo $promo)\n    {\n        ++$promo->used;\n        $promo->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($promo);\n    }\n\n    public function findActivePromoByCode($code)\n    {\n        return $this->di['db']->findOne('Promo', 'code = :code AND active = 1 ORDER BY id ASC', [':code' => $code]);\n    }\n\n    private function getItemPrice(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $repo = $product->getTable();\n\n        return $repo->getProductPrice($product, $config);\n    }\n\n    private function getItemSetupPrice(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $repo = $product->getTable();\n\n        return $repo->getProductSetupPrice($product, $config);\n    }\n\n    /**\n     * Function checks if product is related to other products in cart\n     * If relation exists then count discount for this.\n     *\n     * @return number\n     */\n    protected function getRelatedItemsDiscount(\\Model_Cart $cart, \\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $product->getTable();\n        $config = $this->getItemConfig($model);\n\n        $discount = 0;\n        if (method_exists($repo, 'getRelatedDiscount')) {\n            $list = [];\n            $products = $this->getCartProducts($cart);\n            foreach ($products as $p) {\n                $item = $this->di['db']->toArray($p);\n                $item['config'] = $this->getItemConfig($p);\n                $list[] = $item;\n            }\n            $discount = $repo->getRelatedDiscount($list, $product, $config);\n        }\n\n        return $discount;\n    }\n\n    private function getItemTitle(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $config = $this->getItemConfig($model);\n        $service = $product->getService();\n        if (method_exists($service, 'getCartProductTitle')) {\n            return $service->getCartProductTitle($product, $config);\n        } else {\n            return $product->title;\n        }\n    }\n\n    protected function getItemPromoDiscount(\\Model_CartProduct $model, \\Model_Promo $promo)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $this->di['mod_service']('product');\n        $config = $this->getItemConfig($model);\n\n        return $repo->getProductDiscount($product, $promo, $config);\n    }\n\n    public function getItemConfig(\\Model_CartProduct $model)\n    {\n        return $this->di['tools']->decodeJ($model->config);\n    }\n\n    public function cartProductToApiArray(\\Model_CartProduct $model)\n    {\n        $product = $this->di['db']->load('Product', $model->product_id);\n        $repo = $product->getTable();\n        $config = $this->getItemConfig($model);\n        $setup = $repo->getProductSetupPrice($product, $config);\n        $price = $repo->getProductPrice($product, $config);\n        $qty = $config['quantity'] ?? 1;\n\n        [$discount_price, $discount_setup] = $this->getProductDiscount($model, $setup);\n\n        $discount_total = $discount_price + $discount_setup;\n\n        $subtotal = ($price * $qty);\n        if (abs($discount_total) > ($subtotal + $setup)) {\n            $discount_total = $subtotal;\n            $discount_price = $subtotal;\n        }\n\n        $data = array_merge($config, [\n            'id' => $model->id,\n            'product_id' => $product->id,\n            'form_id' => $product->form_id,\n            'title' => $this->getItemTitle($model),\n            'type' => $product->type,\n            'quantity' => $qty,\n            'unit' => $repo->getUnit($product),\n            'price' => $price,\n            'setup_price' => $setup,\n            'discount' => $discount_total,\n            'discount_price' => $discount_price,\n            'discount_setup' => $discount_setup,\n            'total' => $subtotal,\n        ]);\n\n        return $data;\n    }\n\n    public function getProductDiscount(\\Model_CartProduct $cartProduct, $setup)\n    {\n        $cart = $this->di['db']->load('Cart', $cartProduct->cart_id);\n        $discount_price = $this->getRelatedItemsDiscount($cart, $cartProduct);\n        $discount_setup = 0; // discount for setup price\n        if ($cart->promo_id) {\n            $promo = $this->di['db']->getExistingModelById('Promo', $cart->promo_id, 'Promo not found');\n            // Promo discount should override related item discount\n            $discount_price = $this->getItemPromoDiscount($cartProduct, $promo);\n\n            if ($promo->freesetup) {\n                $discount_setup = $setup;\n            }\n        }\n\n        return [$discount_price, $discount_setup];\n    }\n}\n"], "filenames": ["src/modules/Cart/Service.php"], "buggy_code_start_loc": [501], "buggy_code_end_loc": [518], "fixing_code_start_loc": [502], "fixing_code_end_loc": [523], "type": "CWE-840", "message": "Business Logic Errors in GitHub repository fossbilling/fossbilling prior to 0.5.0.", "other": {"cve": {"id": "CVE-2023-3229", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-14T06:15:08.877", "lastModified": "2023-06-17T01:42:13.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository fossbilling/fossbilling prior to 0.5.0."}, {"lang": "es", "value": "Errores de l\u00f3gica empresarial en el repositorio de GitHub fossbilling/fossbilling anterior a 0.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.0", "matchCriteriaId": "EFD5D230-F0DE-4BCE-99B7-4074CD4799AA"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/56a64fefddf6a0b06304bdd443fdb0bb55423533", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/31f48ca1-e5e8-436f-b779-cad597759170", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/56a64fefddf6a0b06304bdd443fdb0bb55423533"}}