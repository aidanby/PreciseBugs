{"buggy_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK IT ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006-2014 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\n\nnamespace Think\\Db;\n\nuse PDO;\nuse Think\\Config;\nuse Think\\Debug;\n\nabstract class Driver\n{\n    // PDO\u64cd\u4f5c\u5b9e\u4f8b\n    protected $PDOStatement = null;\n    // \u5f53\u524d\u64cd\u4f5c\u6240\u5c5e\u7684\u6a21\u578b\u540d\n    protected $model = '_think_';\n    // \u5f53\u524dSQL\u6307\u4ee4\n    protected $queryStr = '';\n    protected $modelSql = array();\n    // \u6700\u540e\u63d2\u5165ID\n    protected $lastInsID = null;\n    // \u8fd4\u56de\u6216\u8005\u5f71\u54cd\u8bb0\u5f55\u6570\n    protected $numRows = 0;\n    // \u4e8b\u7269\u64cd\u4f5cPDO\u5b9e\u4f8b\n    protected $transPDO = null;\n    // \u4e8b\u52a1\u6307\u4ee4\u6570\n    protected $transTimes = 0;\n    // \u9519\u8bef\u4fe1\u606f\n    protected $error = '';\n    // \u6570\u636e\u5e93\u8fde\u63a5ID \u652f\u6301\u591a\u4e2a\u8fde\u63a5\n    protected $linkID = array();\n    // \u5f53\u524d\u8fde\u63a5ID\n    protected $_linkID = null;\n    // \u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u914d\u7f6e\n    protected $config = array(\n        'type'           => '', // \u6570\u636e\u5e93\u7c7b\u578b\n        'hostname'       => '127.0.0.1', // \u670d\u52a1\u5668\u5730\u5740\n        'database'       => '', // \u6570\u636e\u5e93\u540d\n        'username'       => '', // \u7528\u6237\u540d\n        'password'       => '', // \u5bc6\u7801\n        'hostport'       => '', // \u7aef\u53e3\n        'dsn'            => '', //\n        'params'         => array(), // \u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\n        'charset'        => 'utf8', // \u6570\u636e\u5e93\u7f16\u7801\u9ed8\u8ba4\u91c7\u7528utf8\n        'prefix'         => '', // \u6570\u636e\u5e93\u8868\u524d\u7f00\n        'debug'          => false, // \u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n        'deploy'         => 0, // \u6570\u636e\u5e93\u90e8\u7f72\u65b9\u5f0f:0 \u96c6\u4e2d\u5f0f(\u5355\u4e00\u670d\u52a1\u5668),1 \u5206\u5e03\u5f0f(\u4e3b\u4ece\u670d\u52a1\u5668)\n        'rw_separate'    => false, // \u6570\u636e\u5e93\u8bfb\u5199\u662f\u5426\u5206\u79bb \u4e3b\u4ece\u5f0f\u6709\u6548\n        'master_num'     => 1, // \u8bfb\u5199\u5206\u79bb\u540e \u4e3b\u670d\u52a1\u5668\u6570\u91cf\n        'slave_no'       => '', // \u6307\u5b9a\u4ece\u670d\u52a1\u5668\u5e8f\u53f7\n        'db_like_fields' => '',\n    );\n    // \u6570\u636e\u5e93\u8868\u8fbe\u5f0f\n    protected $exp = array('eq' => '=', 'neq' => '<>', 'gt' => '>', 'egt' => '>=', 'lt' => '<', 'elt' => '<=', 'notlike' => 'NOT LIKE', 'like' => 'LIKE', 'in' => 'IN', 'notin' => 'NOT IN', 'not in' => 'NOT IN', 'between' => 'BETWEEN', 'not between' => 'NOT BETWEEN', 'notbetween' => 'NOT BETWEEN');\n    // \u67e5\u8be2\u8868\u8fbe\u5f0f\n    protected $selectSql = 'SELECT%DISTINCT% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT% %UNION%%LOCK%%COMMENT%';\n    // \u67e5\u8be2\u6b21\u6570\n    protected $queryTimes = 0;\n    // \u6267\u884c\u6b21\u6570\n    protected $executeTimes = 0;\n    // PDO\u8fde\u63a5\u53c2\u6570\n    protected $options = array(\n        PDO::ATTR_CASE              => PDO::CASE_LOWER,\n        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,\n        PDO::ATTR_ORACLE_NULLS      => PDO::NULL_NATURAL,\n        PDO::ATTR_STRINGIFY_FETCHES => false,\n    );\n    protected $bind = array(); // \u53c2\u6570\u7ed1\u5b9a\n\n    /**\n     * \u67b6\u6784\u51fd\u6570 \u8bfb\u53d6\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f\n     * @access public\n     * @param array $config \u6570\u636e\u5e93\u914d\u7f6e\u6570\u7ec4\n     */\n    public function __construct($config = '')\n    {\n        if (!empty($config)) {\n            $this->config = array_merge($this->config, $config);\n            if (is_array($this->config['params'])) {\n                $this->options = $this->config['params'] + $this->options;\n            }\n        }\n    }\n\n    /**\n     * \u8fde\u63a5\u6570\u636e\u5e93\u65b9\u6cd5\n     * @access public\n     */\n    public function connect($config = '', $linkNum = 0, $autoConnection = false)\n    {\n        if (!isset($this->linkID[$linkNum])) {\n            if (empty($config)) {\n                $config = $this->config;\n            }\n\n            try {\n                if (empty($config['dsn'])) {\n                    $config['dsn'] = $this->parseDsn($config);\n                }\n                if (version_compare(PHP_VERSION, '5.3.6', '<=')) {\n                    // \u7981\u7528\u6a21\u62df\u9884\u5904\u7406\u8bed\u53e5\n                    $this->options[PDO::ATTR_EMULATE_PREPARES] = false;\n                }\n                $this->linkID[$linkNum] = new PDO($config['dsn'], $config['username'], $config['password'], $this->options);\n            } catch (\\PDOException $e) {\n                if ($autoConnection) {\n                    trace($e->getMessage(), '', 'ERR');\n                    return $this->connect($autoConnection, $linkNum);\n                } elseif ($config['debug']) {\n                    E($e->getMessage());\n                }\n            }\n        }\n        return $this->linkID[$linkNum];\n    }\n\n    /**\n     * \u89e3\u6790pdo\u8fde\u63a5\u7684dsn\u4fe1\u606f\n     * @access public\n     * @param array $config \u8fde\u63a5\u4fe1\u606f\n     * @return string\n     */\n    protected function parseDsn($config)\n    {}\n\n    /**\n     * \u91ca\u653e\u67e5\u8be2\u7ed3\u679c\n     * @access public\n     */\n    public function free()\n    {\n        $this->PDOStatement = null;\n    }\n\n    /**\n     * \u6267\u884c\u67e5\u8be2 \u8fd4\u56de\u6570\u636e\u96c6\n     * @access public\n     * @param string $str  sql\u6307\u4ee4\n     * @param boolean $fetchSql  \u4e0d\u6267\u884c\u53ea\u662f\u83b7\u53d6SQL\n     * @param boolean $master  \u662f\u5426\u5728\u4e3b\u670d\u52a1\u5668\u8bfb\u64cd\u4f5c\n     * @return mixed\n     */\n    public function query($str, $fetchSql = false, $master = false)\n    {\n        $this->initConnect($master);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        $this->queryStr = $str;\n        if (!empty($this->bind)) {\n            $that           = $this;\n            $this->queryStr = strtr($this->queryStr, array_map(function ($val) use ($that) {return '\\'' . $that->escapeString($val) . '\\'';}, $this->bind));\n        }\n        if ($fetchSql) {\n            return $this->queryStr;\n        }\n        //\u91ca\u653e\u524d\u6b21\u7684\u67e5\u8be2\u7ed3\u679c\n        if (!empty($this->PDOStatement)) {\n            $this->free();\n        }\n\n        $this->queryTimes++;\n        N('db_query', 1); // \u517c\u5bb9\u4ee3\u7801\n        // \u8c03\u8bd5\u5f00\u59cb\n        $this->debug(true);\n        $this->PDOStatement = $this->_linkID->prepare($str);\n        if (false === $this->PDOStatement) {\n            $this->error();\n            return false;\n        }\n        foreach ($this->bind as $key => $val) {\n            if (is_array($val)) {\n                $this->PDOStatement->bindValue($key, $val[0], $val[1]);\n            } else {\n                $this->PDOStatement->bindValue($key, $val);\n            }\n        }\n        $this->bind = array();\n        try {\n            $result = $this->PDOStatement->execute();\n            // \u8c03\u8bd5\u7ed3\u675f\n            $this->debug(false);\n            if (false === $result) {\n                $this->error();\n                return false;\n            } else {\n                return $this->getResult();\n            }\n        } catch (\\PDOException $e) {\n            $this->error();\n            return false;\n        }\n    }\n\n    /**\n     * \u6267\u884c\u8bed\u53e5\n     * @access public\n     * @param string $str  sql\u6307\u4ee4\n     * @param boolean $fetchSql  \u4e0d\u6267\u884c\u53ea\u662f\u83b7\u53d6SQL\n     * @return mixed\n     */\n    public function execute($str, $fetchSql = false)\n    {\n        $this->initConnect(true);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        $this->queryStr = $str;\n        if (!empty($this->bind)) {\n            $that           = $this;\n            $this->queryStr = strtr($this->queryStr, array_map(function ($val) use ($that) {return '\\'' . $that->escapeString($val) . '\\'';}, $this->bind));\n        }\n        if ($fetchSql) {\n            return $this->queryStr;\n        }\n        //\u91ca\u653e\u524d\u6b21\u7684\u67e5\u8be2\u7ed3\u679c\n        if (!empty($this->PDOStatement)) {\n            $this->free();\n        }\n\n        $this->executeTimes++;\n        N('db_write', 1); // \u517c\u5bb9\u4ee3\u7801\n        // \u8bb0\u5f55\u5f00\u59cb\u6267\u884c\u65f6\u95f4\n        $this->debug(true);\n        $this->PDOStatement = $this->_linkID->prepare($str);\n        if (false === $this->PDOStatement) {\n            $this->error();\n            return false;\n        }\n        foreach ($this->bind as $key => $val) {\n            if (is_array($val)) {\n                $this->PDOStatement->bindValue($key, $val[0], $val[1]);\n            } else {\n                $this->PDOStatement->bindValue($key, $val);\n            }\n        }\n        $this->bind = array();\n        try {\n            $result = $this->PDOStatement->execute();\n            // \u8c03\u8bd5\u7ed3\u675f\n            $this->debug(false);\n            if (false === $result) {\n                $this->error();\n                return false;\n            } else {\n                $this->numRows = $this->PDOStatement->rowCount();\n                if (preg_match(\"/^\\s*(INSERT\\s+INTO|REPLACE\\s+INTO)\\s+/i\", $str)) {\n                    $this->lastInsID = $this->_linkID->lastInsertId();\n                }\n                return $this->numRows;\n            }\n        } catch (\\PDOException $e) {\n            $this->error();\n            return false;\n        }\n    }\n\n    /**\n     * \u542f\u52a8\u4e8b\u52a1\n     * @access public\n     * @return void\n     */\n    public function startTrans()\n    {\n        $this->initConnect(true);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        //\u6570\u636erollback \u652f\u6301\n        if (0 == $this->transTimes) {\n            // \u8bb0\u5f55\u5f53\u524d\u64cd\u4f5cPDO\n            $this->transPdo = $this->_linkID;\n            $this->_linkID->beginTransaction();\n        }\n        $this->transTimes++;\n        return;\n    }\n\n    /**\n     * \u7528\u4e8e\u975e\u81ea\u52a8\u63d0\u4ea4\u72b6\u6001\u4e0b\u9762\u7684\u67e5\u8be2\u63d0\u4ea4\n     * @access public\n     * @return boolean\n     */\n    public function commit()\n    {\n        if (1 == $this->transTimes) {\n            // \u7531\u5d4c\u5957\u4e8b\u7269\u7684\u6700\u5916\u5c42\u8fdb\u884c\u63d0\u4ea4\n            $result           = $this->_linkID->commit();\n            $this->transTimes = 0;\n            $this->transPdo   = null;\n            if (!$result) {\n                $this->error();\n                return false;\n            }\n        } else {\n            $this->transTimes = $this->transTimes <= 0 ? 0 : $this->transTimes - 1;\n        }\n        return true;\n    }\n\n    /**\n     * \u4e8b\u52a1\u56de\u6eda\n     * @access public\n     * @return boolean\n     */\n    public function rollback()\n    {\n        if ($this->transTimes > 0) {\n            $result           = $this->_linkID->rollback();\n            $this->transTimes = 0;\n            $this->transPdo   = null;\n            if (!$result) {\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * \u83b7\u5f97\u6240\u6709\u7684\u67e5\u8be2\u6570\u636e\n     * @access private\n     * @return array\n     */\n    private function getResult()\n    {\n        //\u8fd4\u56de\u6570\u636e\u96c6\n        $result        = $this->PDOStatement->fetchAll(PDO::FETCH_ASSOC);\n        $this->numRows = count($result);\n        return $result;\n    }\n\n    /**\n     * \u83b7\u5f97\u67e5\u8be2\u6b21\u6570\n     * @access public\n     * @param boolean $execute \u662f\u5426\u5305\u542b\u6240\u6709\u67e5\u8be2\n     * @return integer\n     */\n    public function getQueryTimes($execute = false)\n    {\n        return $execute ? $this->queryTimes + $this->executeTimes : $this->queryTimes;\n    }\n\n    /**\n     * \u83b7\u5f97\u6267\u884c\u6b21\u6570\n     * @access public\n     * @return integer\n     */\n    public function getExecuteTimes()\n    {\n        return $this->executeTimes;\n    }\n\n    /**\n     * \u5173\u95ed\u6570\u636e\u5e93\n     * @access public\n     */\n    public function close()\n    {\n        $this->_linkID = null;\n    }\n\n    /**\n     * \u6570\u636e\u5e93\u9519\u8bef\u4fe1\u606f\n     * \u5e76\u663e\u793a\u5f53\u524d\u7684SQL\u8bed\u53e5\n     * @access public\n     * @return string\n     */\n    public function error()\n    {\n        if ($this->PDOStatement) {\n            $error       = $this->PDOStatement->errorInfo();\n            $this->error = $error[1] . ':' . $error[2];\n        } else {\n            $this->error = '';\n        }\n        if ('' != $this->queryStr) {\n            $this->error .= \"\\n [ SQL\u8bed\u53e5 ] : \" . $this->queryStr;\n        }\n        // \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n        trace($this->error, '', 'ERR');\n        if ($this->config['debug']) {\n            // \u5f00\u542f\u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n            E($this->error);\n        } else {\n            return $this->error;\n        }\n    }\n\n    /**\n     * \u8bbe\u7f6e\u9501\u673a\u5236\n     * @access protected\n     * @return string\n     */\n    protected function parseLock($lock = false)\n    {\n        return $lock ? ' FOR UPDATE ' : '';\n    }\n\n    /**\n     * set\u5206\u6790\n     * @access protected\n     * @param array $data\n     * @return string\n     */\n    protected function parseSet($data)\n    {\n        foreach ($data as $key => $val) {\n            if (isset($val[0]) && 'exp' == $val[0]) {\n                $set[] = $this->parseKey($key) . '=' . $val[1];\n            } elseif (is_null($val)) {\n                $set[] = $this->parseKey($key) . '=NULL';\n            } elseif (is_scalar($val)) {\n                // \u8fc7\u6ee4\u975e\u6807\u91cf\u6570\u636e\n                if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                    $set[] = $this->parseKey($key) . '=' . $val;\n                } else {\n                    $name  = count($this->bind);\n                    $set[] = $this->parseKey($key) . '=:' . $key . '_' . $name;\n                    $this->bindParam($key . '_' . $name, $val);\n                }\n            }\n        }\n        return ' SET ' . implode(',', $set);\n    }\n\n    /**\n     * \u53c2\u6570\u7ed1\u5b9a\n     * @access protected\n     * @param string $name \u7ed1\u5b9a\u53c2\u6570\u540d\n     * @param mixed $value \u7ed1\u5b9a\u503c\n     * @return void\n     */\n    protected function bindParam($name, $value)\n    {\n        $this->bind[':' . $name] = $value;\n    }\n\n    /**\n     * \u5b57\u6bb5\u548c\u8868\u540d\u5904\u7406\n     * @access protected\n     * @param string $key\n     * @param bool   $strict\n     * @return string\n     */\n    protected function parseKey($key, $strict = false)\n    {\n        return $key;\n    }\n\n    /**\n     * value\u5206\u6790\n     * @access protected\n     * @param mixed $value\n     * @return string\n     */\n    protected function parseValue($value)\n    {\n        if (is_string($value)) {\n            $value = strpos($value, ':') === 0 && in_array($value, array_keys($this->bind)) ? $this->escapeString($value) : '\\'' . $this->escapeString($value) . '\\'';\n        } elseif (isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp') {\n            $value = $this->escapeString($value[1]);\n        } elseif (is_array($value)) {\n            $value = array_map(array($this, 'parseValue'), $value);\n        } elseif (is_bool($value)) {\n            $value = $value ? '1' : '0';\n        } elseif (is_null($value)) {\n            $value = 'null';\n        }\n        return $value;\n    }\n\n    /**\n     * field\u5206\u6790\n     * @access protected\n     * @param mixed $fields\n     * @return string\n     */\n    protected function parseField($fields)\n    {\n        if (is_string($fields) && '' !== $fields) {\n            $fields = explode(',', $fields);\n        }\n        if (is_array($fields)) {\n            // \u5b8c\u5584\u6570\u7ec4\u65b9\u5f0f\u4f20\u5b57\u6bb5\u540d\u7684\u652f\u6301\n            // \u652f\u6301 'field1'=>'field2' \u8fd9\u6837\u7684\u5b57\u6bb5\u522b\u540d\u5b9a\u4e49\n            $array = array();\n            foreach ($fields as $key => $field) {\n                if (!is_numeric($key)) {\n                    $array[] = $this->parseKey($key) . ' AS ' . $this->parseKey($field);\n                } else {\n                    $array[] = $this->parseKey($field);\n                }\n\n            }\n            $fieldsStr = implode(',', $array);\n        } else {\n            $fieldsStr = '*';\n        }\n        //TODO \u5982\u679c\u662f\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\uff0c\u5e76\u4e14\u662fjoin\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u5c31\u628a\u8981\u67e5\u7684\u8868\u52a0\u4e2a\u522b\u540d\uff0c\u4ee5\u514d\u5b57\u6bb5\u88ab\u8986\u76d6\n        return $fieldsStr;\n    }\n\n    /**\n     * table\u5206\u6790\n     * @access protected\n     * @param mixed $table\n     * @return string\n     */\n    protected function parseTable($tables)\n    {\n        if (is_array($tables)) {\n            // \u652f\u6301\u522b\u540d\u5b9a\u4e49\n            $array = array();\n            foreach ($tables as $table => $alias) {\n                if (!is_numeric($table)) {\n                    $array[] = $this->parseKey($table) . ' ' . $this->parseKey($alias);\n                } else {\n                    $array[] = $this->parseKey($alias);\n                }\n\n            }\n            $tables = $array;\n        } elseif (is_string($tables)) {\n            $tables = array_map(array($this, 'parseKey'), explode(',', $tables));\n        }\n        return implode(',', $tables);\n    }\n\n    /**\n     * where\u5206\u6790\n     * @access protected\n     * @param mixed $where\n     * @return string\n     */\n    protected function parseWhere($where)\n    {\n        $whereStr = '';\n        if (is_string($where)) {\n            // \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u6761\u4ef6\n            $whereStr = $where;\n        } else {\n            // \u4f7f\u7528\u6570\u7ec4\u8868\u8fbe\u5f0f\n            $operate = isset($where['_logic']) ? strtoupper($where['_logic']) : '';\n            if (in_array($operate, array('AND', 'OR', 'XOR'))) {\n                // \u5b9a\u4e49\u903b\u8f91\u8fd0\u7b97\u89c4\u5219 \u4f8b\u5982 OR XOR AND NOT\n                $operate = ' ' . $operate . ' ';\n                unset($where['_logic']);\n            } else {\n                // \u9ed8\u8ba4\u8fdb\u884c AND \u8fd0\u7b97\n                $operate = ' AND ';\n            }\n            foreach ($where as $key => $val) {\n                if (is_numeric($key)) {\n                    $key = '_complex';\n                }\n                if (0 === strpos($key, '_')) {\n                    // \u89e3\u6790\u7279\u6b8a\u6761\u4ef6\u8868\u8fbe\u5f0f\n                    $whereStr .= $this->parseThinkWhere($key, $val);\n                } else {\n                    // \u67e5\u8be2\u5b57\u6bb5\u7684\u5b89\u5168\u8fc7\u6ee4\n                    // if(!preg_match('/^[A-Z_\\|\\&\\-.a-z0-9\\(\\)\\,]+$/',trim($key))){\n                    //     E(L('_EXPRESS_ERROR_').':'.$key);\n                    // }\n                    // \u591a\u6761\u4ef6\u652f\u6301\n                    $multi = is_array($val) && isset($val['_multi']);\n                    $key   = trim($key);\n                    if (strpos($key, '|')) {\n                        // \u652f\u6301 name|title|nickname \u65b9\u5f0f\u5b9a\u4e49\u67e5\u8be2\u5b57\u6bb5\n                        $array = explode('|', $key);\n                        $str   = array();\n                        foreach ($array as $m => $k) {\n                            $v     = $multi ? $val[$m] : $val;\n                            $str[] = $this->parseWhereItem($this->parseKey($k), $v);\n                        }\n                        $whereStr .= '( ' . implode(' OR ', $str) . ' )';\n                    } elseif (strpos($key, '&')) {\n                        $array = explode('&', $key);\n                        $str   = array();\n                        foreach ($array as $m => $k) {\n                            $v     = $multi ? $val[$m] : $val;\n                            $str[] = '(' . $this->parseWhereItem($this->parseKey($k), $v) . ')';\n                        }\n                        $whereStr .= '( ' . implode(' AND ', $str) . ' )';\n                    } else {\n                        $whereStr .= $this->parseWhereItem($this->parseKey($key), $val);\n                    }\n                }\n                $whereStr .= $operate;\n            }\n            $whereStr = substr($whereStr, 0, -strlen($operate));\n        }\n        return empty($whereStr) ? '' : ' WHERE ' . $whereStr;\n    }\n\n    // where\u5b50\u5355\u5143\u5206\u6790\n    protected function parseWhereItem($key, $val)\n    {\n        $whereStr = '';\n        if (is_array($val)) {\n            if (is_string($val[0])) {\n                $exp = strtolower($val[0]);\n                if (preg_match('/^(eq|neq|gt|egt|lt|elt)$/', $exp)) {\n                    // \u6bd4\u8f83\u8fd0\u7b97\n                    $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($val[1]);\n                } elseif (preg_match('/^(notlike|like)$/', $exp)) {\n                    // \u6a21\u7cca\u67e5\u627e\n                    if (is_array($val[1])) {\n                        $likeLogic = isset($val[2]) ? strtoupper($val[2]) : 'OR';\n                        if (in_array($likeLogic, array('AND', 'OR', 'XOR'))) {\n                            $like = array();\n                            foreach ($val[1] as $item) {\n                                $like[] = $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($item);\n                            }\n                            $whereStr .= '(' . implode(' ' . $likeLogic . ' ', $like) . ')';\n                        }\n                    } else {\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($val[1]);\n                    }\n                } elseif ('bind' == $exp) {\n                    // \u4f7f\u7528\u8868\u8fbe\u5f0f\n                    $whereStr .= $key . ' = :' . $val[1];\n                } elseif ('exp' == $exp) {\n                    // \u4f7f\u7528\u8868\u8fbe\u5f0f\n                    $whereStr .= $key . ' ' . $val[1];\n                } elseif (preg_match('/^(notin|not in|in)$/', $exp)) {\n                    // IN \u8fd0\u7b97\n                    if (isset($val[2]) && 'exp' == $val[2]) {\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $val[1];\n                    } else {\n                        if (is_string($val[1])) {\n                            $val[1] = explode(',', $val[1]);\n                        }\n                        $zone = implode(',', $this->parseValue($val[1]));\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' (' . $zone . ')';\n                    }\n                } elseif (preg_match('/^(notbetween|not between|between)$/', $exp)) {\n                    // BETWEEN\u8fd0\u7b97\n                    $data = is_string($val[1]) ? explode(',', $val[1]) : $val[1];\n                    $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($data[0]) . ' AND ' . $this->parseValue($data[1]);\n                } else {\n                    E(L('_EXPRESS_ERROR_') . ':' . $val[0]);\n                }\n            } else {\n                $count = count($val);\n                $rule  = isset($val[$count - 1]) ? (is_array($val[$count - 1]) ? strtoupper($val[$count - 1][0]) : strtoupper($val[$count - 1])) : '';\n                if (in_array($rule, array('AND', 'OR', 'XOR'))) {\n                    $count = $count - 1;\n                } else {\n                    $rule = 'AND';\n                }\n                for ($i = 0; $i < $count; $i++) {\n                    $data = is_array($val[$i]) ? $val[$i][1] : $val[$i];\n                    if ('exp' == strtolower($val[$i][0])) {\n                        $whereStr .= $key . ' ' . $data . ' ' . $rule . ' ';\n                    } else {\n                        $whereStr .= $this->parseWhereItem($key, $val[$i]) . ' ' . $rule . ' ';\n                    }\n                }\n                $whereStr = '( ' . substr($whereStr, 0, -4) . ' )';\n            }\n        } else {\n            //\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u5b57\u6bb5\u91c7\u7528\u6a21\u7cca\u5339\u914d\n            $likeFields = $this->config['db_like_fields'];\n            if ($likeFields && preg_match('/^(' . $likeFields . ')$/i', $key)) {\n                $whereStr .= $key . ' LIKE ' . $this->parseValue('%' . $val . '%');\n            } else {\n                $whereStr .= $key . ' = ' . $this->parseValue($val);\n            }\n        }\n        return $whereStr;\n    }\n\n    /**\n     * \u7279\u6b8a\u6761\u4ef6\u5206\u6790\n     * @access protected\n     * @param string $key\n     * @param mixed $val\n     * @return string\n     */\n    protected function parseThinkWhere($key, $val)\n    {\n        $whereStr = '';\n        switch ($key) {\n            case '_string':\n                // \u5b57\u7b26\u4e32\u6a21\u5f0f\u67e5\u8be2\u6761\u4ef6\n                $whereStr = $val;\n                break;\n            case '_complex':\n                // \u590d\u5408\u67e5\u8be2\u6761\u4ef6\n                $whereStr = substr($this->parseWhere($val), 6);\n                break;\n            case '_query':\n                // \u5b57\u7b26\u4e32\u6a21\u5f0f\u67e5\u8be2\u6761\u4ef6\n                parse_str($val, $where);\n                if (isset($where['_logic'])) {\n                    $op = ' ' . strtoupper($where['_logic']) . ' ';\n                    unset($where['_logic']);\n                } else {\n                    $op = ' AND ';\n                }\n                $array = array();\n                foreach ($where as $field => $data) {\n                    $array[] = $this->parseKey($field) . ' = ' . $this->parseValue($data);\n                }\n\n                $whereStr = implode($op, $array);\n                break;\n        }\n        return '( ' . $whereStr . ' )';\n    }\n\n    /**\n     * limit\u5206\u6790\n     * @access protected\n     * @param mixed $lmit\n     * @return string\n     */\n    protected function parseLimit($limit)\n    {\n        return (!empty($limit) && false === strpos($limit, '(')) ? ' LIMIT ' . $limit . ' ' : '';\n    }\n\n    /**\n     * join\u5206\u6790\n     * @access protected\n     * @param mixed $join\n     * @return string\n     */\n    protected function parseJoin($join)\n    {\n        $joinStr = '';\n        if (!empty($join)) {\n            $joinStr = ' ' . implode(' ', $join) . ' ';\n        }\n        return $joinStr;\n    }\n\n    /**\n     * order\u5206\u6790\n     * @access protected\n     * @param mixed $order\n     * @return string\n     */\n    protected function parseOrder($order)\n    {\n        if (empty($order)) {\n            return '';\n        }\n        $array = array();\n        if (is_array($order)) {\n            foreach ($order as $key => $val) {\n                if (is_numeric($key)) {\n                    if (false === strpos($val, '(') && false === strpos($val, ';')) {\n                        $array[] = $this->parseKey($val);\n                    }\n                } elseif (false === strpos($key, ')') && false === strpos($key, '#')) {\n                    $sort    = in_array(strtolower($val), array('asc', 'desc')) ? ' ' . $val : '';\n                    $array[] = $this->parseKey($key, true) . $sort;\n                }\n            }\n        } elseif ('[RAND]' == $order) {\n            // \u968f\u673a\u6392\u5e8f\n            $array[] = $this->parseRand();\n        } else {\n            foreach (explode(',', $order) as $val) {\n                if (preg_match('/\\s+(ASC|DESC)$/i', rtrim($val), $match, PREG_OFFSET_CAPTURE)) {\n                    $array[] = $this->parseKey(ltrim(substr($val, 0, $match[0][1]))) . ' ' . $match[1][0];\n                } elseif (false === strpos($val, '(') && false === strpos($val, ';')) {\n                    $array[] = $this->parseKey($val);\n                }\n            }\n        }\n        $order = implode(',', $array);\n        return !empty($order) ? ' ORDER BY ' . $order : '';\n    }\n\n    /**\n     * group\u5206\u6790\n     * @access protected\n     * @param mixed $group\n     * @return string\n     */\n    protected function parseGroup($group)\n    {\n        return !empty($group) ? ' GROUP BY ' . $group : '';\n    }\n\n    /**\n     * having\u5206\u6790\n     * @access protected\n     * @param string $having\n     * @return string\n     */\n    protected function parseHaving($having)\n    {\n        return !empty($having) ? ' HAVING ' . $having : '';\n    }\n\n    /**\n     * comment\u5206\u6790\n     * @access protected\n     * @param string $comment\n     * @return string\n     */\n    protected function parseComment($comment)\n    {\n        return !empty($comment) ? ' /* ' . $comment . ' */' : '';\n    }\n\n    /**\n     * distinct\u5206\u6790\n     * @access protected\n     * @param mixed $distinct\n     * @return string\n     */\n    protected function parseDistinct($distinct)\n    {\n        return !empty($distinct) ? ' DISTINCT ' : '';\n    }\n\n    /**\n     * union\u5206\u6790\n     * @access protected\n     * @param mixed $union\n     * @return string\n     */\n    protected function parseUnion($union)\n    {\n        if (empty($union)) {\n            return '';\n        }\n\n        if (isset($union['_all'])) {\n            $str = 'UNION ALL ';\n            unset($union['_all']);\n        } else {\n            $str = 'UNION ';\n        }\n        foreach ($union as $u) {\n            $sql[] = $str . (is_array($u) ? $this->buildSelectSql($u) : $u);\n        }\n        return implode(' ', $sql);\n    }\n\n    /**\n     * \u53c2\u6570\u7ed1\u5b9a\u5206\u6790\n     * @access protected\n     * @param array $bind\n     * @return array\n     */\n    protected function parseBind($bind)\n    {\n        $this->bind = array_merge($this->bind, $bind);\n    }\n\n    /**\n     * index\u5206\u6790\uff0c\u53ef\u5728\u64cd\u4f5c\u94fe\u4e2d\u6307\u5b9a\u9700\u8981\u5f3a\u5236\u4f7f\u7528\u7684\u7d22\u5f15\n     * @access protected\n     * @param mixed $index\n     * @return string\n     */\n    protected function parseForce($index)\n    {\n        if (empty($index)) {\n            return '';\n        }\n\n        if (is_array($index)) {\n            $index = join(\",\", $index);\n        }\n\n        return sprintf(\" FORCE INDEX ( %s ) \", $index);\n    }\n\n    /**\n     * ON DUPLICATE KEY UPDATE \u5206\u6790\n     * @access protected\n     * @param mixed $duplicate\n     * @return string\n     */\n    protected function parseDuplicate($duplicate)\n    {\n        return '';\n    }\n\n    /**\n     * \u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param mixed $data \u6570\u636e\n     * @param array $options \u53c2\u6570\u8868\u8fbe\u5f0f\n     * @param boolean $replace \u662f\u5426replace\n     * @return false | integer\n     */\n    public function insert($data, $options = array(), $replace = false)\n    {\n        $values      = $fields      = array();\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        foreach ($data as $key => $val) {\n            if (isset($val[0]) && 'exp' == $val[0]) {\n                $fields[] = $this->parseKey($key);\n                $values[] = $val[1];\n            } elseif (is_null($val)) {\n                $fields[] = $this->parseKey($key);\n                $values[] = 'NULL';\n            } elseif (is_scalar($val)) {\n                // \u8fc7\u6ee4\u975e\u6807\u91cf\u6570\u636e\n                $fields[] = $this->parseKey($key);\n                if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                    $values[] = $val;\n                } else {\n                    $name     = count($this->bind);\n                    $values[] = ':' . $key . '_' . $name;\n                    $this->bindParam($key . '_' . $name, $val);\n                }\n            }\n        }\n        // \u517c\u5bb9\u6570\u5b57\u4f20\u5165\u65b9\u5f0f\n        $replace = (is_numeric($replace) && $replace > 0) ? true : $replace;\n        $sql     = (true === $replace ? 'REPLACE' : 'INSERT') . ' INTO ' . $this->parseTable($options['table']) . ' (' . implode(',', $fields) . ') VALUES (' . implode(',', $values) . ')' . $this->parseDuplicate($replace);\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u6279\u91cf\u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param mixed $dataSet \u6570\u636e\u96c6\n     * @param array $options \u53c2\u6570\u8868\u8fbe\u5f0f\n     * @param boolean $replace \u662f\u5426replace\n     * @return false | integer\n     */\n    public function insertAll($dataSet, $options = array(), $replace = false)\n    {\n        $values      = array();\n        $this->model = $options['model'];\n        if (!is_array($dataSet[0])) {\n            return false;\n        }\n\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $fields = array_map(array($this, 'parseKey'), array_keys($dataSet[0]));\n        foreach ($dataSet as $data) {\n            $value = array();\n            foreach ($data as $key => $val) {\n                if (is_array($val) && 'exp' == $val[0]) {\n                    $value[] = $val[1];\n                } elseif (is_null($val)) {\n                    $value[] = 'NULL';\n                } elseif (is_scalar($val)) {\n                    if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                        $value[] = $val;\n                    } else {\n                        $name    = count($this->bind);\n                        $value[] = ':' . $key . '_' . $name;\n                        $this->bindParam($key . '_' . $name, $val);\n                    }\n                }\n            }\n            $values[] = 'SELECT ' . implode(',', $value);\n        }\n        $sql = 'INSERT INTO ' . $this->parseTable($options['table']) . ' (' . implode(',', $fields) . ') ' . implode(' UNION ALL ', $values);\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u901a\u8fc7Select\u65b9\u5f0f\u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param string $fields \u8981\u63d2\u5165\u7684\u6570\u636e\u8868\u5b57\u6bb5\u540d\n     * @param string $table \u8981\u63d2\u5165\u7684\u6570\u636e\u8868\u540d\n     * @param array $option  \u67e5\u8be2\u6570\u636e\u53c2\u6570\n     * @return false | integer\n     */\n    public function selectInsert($fields, $table, $options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        if (is_string($fields)) {\n            $fields = explode(',', $fields);\n        }\n\n        $fields = array_map(array($this, 'parseKey'), $fields);\n        $sql    = 'INSERT INTO ' . $this->parseTable($table) . ' (' . implode(',', $fields) . ') ';\n        $sql .= $this->buildSelectSql($options);\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u66f4\u65b0\u8bb0\u5f55\n     * @access public\n     * @param mixed $data \u6570\u636e\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return false | integer\n     */\n    public function update($data, $options)\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $table = $this->parseTable($options['table']);\n        $sql   = 'UPDATE ' . $table . $this->parseSet($data);\n        if (strpos($table, ',')) {\n            // \u591a\u8868\u66f4\u65b0\u652f\u6301JOIN\u64cd\u4f5c\n            $sql .= $this->parseJoin(!empty($options['join']) ? $options['join'] : '');\n        }\n        $sql .= $this->parseWhere(!empty($options['where']) ? $options['where'] : '');\n        if (!strpos($table, ',')) {\n            //  \u5355\u8868\u66f4\u65b0\u652f\u6301order\u548clmit\n            $sql .= $this->parseOrder(!empty($options['order']) ? $options['order'] : '')\n            . $this->parseLimit(!empty($options['limit']) ? $options['limit'] : '');\n        }\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u5220\u9664\u8bb0\u5f55\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return false | integer\n     */\n    public function delete($options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $table = $this->parseTable($options['table']);\n        $sql   = 'DELETE FROM ' . $table;\n        if (strpos($table, ',')) {\n            // \u591a\u8868\u5220\u9664\u652f\u6301USING\u548cJOIN\u64cd\u4f5c\n            if (!empty($options['using'])) {\n                $sql .= ' USING ' . $this->parseTable($options['using']) . ' ';\n            }\n            $sql .= $this->parseJoin(!empty($options['join']) ? $options['join'] : '');\n        }\n        $sql .= $this->parseWhere(!empty($options['where']) ? $options['where'] : '');\n        if (!strpos($table, ',')) {\n            // \u5355\u8868\u5220\u9664\u652f\u6301order\u548climit\n            $sql .= $this->parseOrder(!empty($options['order']) ? $options['order'] : '')\n            . $this->parseLimit(!empty($options['limit']) ? $options['limit'] : '');\n        }\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u67e5\u627e\u8bb0\u5f55\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return mixed\n     */\n    public function select($options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $sql    = $this->buildSelectSql($options);\n        $result = $this->query($sql, !empty($options['fetch_sql']) ? true : false, !empty($options['master']) ? true : false);\n        return $result;\n    }\n\n    /**\n     * \u751f\u6210\u67e5\u8be2SQL\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return string\n     */\n    public function buildSelectSql($options = array())\n    {\n        if (isset($options['page'])) {\n            // \u6839\u636e\u9875\u6570\u8ba1\u7b97limit\n            list($page, $listRows) = $options['page'];\n            $page                  = $page > 0 ? $page : 1;\n            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);\n            $offset                = $listRows * ($page - 1);\n            $options['limit']      = $offset . ',' . $listRows;\n        }\n        $sql = $this->parseSql($this->selectSql, $options);\n        return $sql;\n    }\n\n    /**\n     * \u66ff\u6362SQL\u8bed\u53e5\u4e2d\u8868\u8fbe\u5f0f\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return string\n     */\n    public function parseSql($sql, $options = array())\n    {\n        $sql = str_replace(\n            array('%TABLE%', '%DISTINCT%', '%FIELD%', '%JOIN%', '%WHERE%', '%GROUP%', '%HAVING%', '%ORDER%', '%LIMIT%', '%UNION%', '%LOCK%', '%COMMENT%', '%FORCE%'),\n            array(\n                $this->parseTable($options['table']),\n                $this->parseDistinct(isset($options['distinct']) ? $options['distinct'] : false),\n                $this->parseField(!empty($options['field']) ? $options['field'] : '*'),\n                $this->parseJoin(!empty($options['join']) ? $options['join'] : ''),\n                $this->parseWhere(!empty($options['where']) ? $options['where'] : ''),\n                $this->parseGroup(!empty($options['group']) ? $options['group'] : ''),\n                $this->parseHaving(!empty($options['having']) ? $options['having'] : ''),\n                $this->parseOrder(!empty($options['order']) ? $options['order'] : ''),\n                $this->parseLimit(!empty($options['limit']) ? $options['limit'] : ''),\n                $this->parseUnion(!empty($options['union']) ? $options['union'] : ''),\n                $this->parseLock(isset($options['lock']) ? $options['lock'] : false),\n                $this->parseComment(!empty($options['comment']) ? $options['comment'] : ''),\n                $this->parseForce(!empty($options['force']) ? $options['force'] : ''),\n            ), $sql);\n        return $sql;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u4e00\u6b21\u67e5\u8be2\u7684sql\u8bed\u53e5\n     * @param string $model  \u6a21\u578b\u540d\n     * @access public\n     * @return string\n     */\n    public function getLastSql($model = '')\n    {\n        return $model ? $this->modelSql[$model] : $this->queryStr;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u63d2\u5165\u7684ID\n     * @access public\n     * @return string\n     */\n    public function getLastInsID()\n    {\n        return $this->lastInsID;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u7684\u9519\u8bef\u4fe1\u606f\n     * @access public\n     * @return string\n     */\n    public function getError()\n    {\n        return $this->error;\n    }\n\n    /**\n     * SQL\u6307\u4ee4\u5b89\u5168\u8fc7\u6ee4\n     * @access public\n     * @param string $str  SQL\u5b57\u7b26\u4e32\n     * @return string\n     */\n    public function escapeString($str)\n    {\n        return addslashes($str);\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u64cd\u4f5c\u6a21\u578b\n     * @access public\n     * @param string $model  \u6a21\u578b\u540d\n     * @return void\n     */\n    public function setModel($model)\n    {\n        $this->model = $model;\n    }\n\n    /**\n     * \u6570\u636e\u5e93\u8c03\u8bd5 \u8bb0\u5f55\u5f53\u524dSQL\n     * @access protected\n     * @param boolean $start  \u8c03\u8bd5\u5f00\u59cb\u6807\u8bb0 true \u5f00\u59cb false \u7ed3\u675f\n     */\n    protected function debug($start)\n    {\n        if ($this->config['debug']) {\n            // \u5f00\u542f\u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n            if ($start) {\n                G('queryStartTime');\n            } else {\n                $this->modelSql[$this->model] = $this->queryStr;\n                //$this->model  =   '_think_';\n                // \u8bb0\u5f55\u64cd\u4f5c\u7ed3\u675f\u65f6\u95f4\n                G('queryEndTime');\n                trace($this->queryStr . ' [ RunTime:' . G('queryStartTime', 'queryEndTime') . 's ]', '', 'SQL');\n            }\n        }\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n     * @access protected\n     * @param boolean $master \u4e3b\u670d\u52a1\u5668\n     * @return void\n     */\n    protected function initConnect($master = true)\n    {\n        // \u5f00\u542f\u4e8b\u7269\u65f6\u7528\u540c\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884c\u64cd\u4f5c\n        if ($this->transPDO) {\n            return $this->transPDO;\n        }\n\n        if (!empty($this->config['deploy']))\n        // \u91c7\u7528\u5206\u5e03\u5f0f\u6570\u636e\u5e93\n        {\n            $this->_linkID = $this->multiConnect($master);\n        } else\n        // \u9ed8\u8ba4\u5355\u6570\u636e\u5e93\n        if (!$this->_linkID) {\n            $this->_linkID = $this->connect();\n        }\n\n    }\n\n    /**\n     * \u8fde\u63a5\u5206\u5e03\u5f0f\u670d\u52a1\u5668\n     * @access protected\n     * @param boolean $master \u4e3b\u670d\u52a1\u5668\n     * @return void\n     */\n    protected function multiConnect($master = false)\n    {\n        // \u5206\u5e03\u5f0f\u6570\u636e\u5e93\u914d\u7f6e\u89e3\u6790\n        $_config['username'] = explode(',', $this->config['username']);\n        $_config['password'] = explode(',', $this->config['password']);\n        $_config['hostname'] = explode(',', $this->config['hostname']);\n        $_config['hostport'] = explode(',', $this->config['hostport']);\n        $_config['database'] = explode(',', $this->config['database']);\n        $_config['dsn']      = explode(',', $this->config['dsn']);\n        $_config['charset']  = explode(',', $this->config['charset']);\n\n        $m = floor(mt_rand(0, $this->config['master_num'] - 1));\n        // \u6570\u636e\u5e93\u8bfb\u5199\u662f\u5426\u5206\u79bb\n        if ($this->config['rw_separate']) {\n            // \u4e3b\u4ece\u5f0f\u91c7\u7528\u8bfb\u5199\u5206\u79bb\n            if ($master)\n            // \u4e3b\u670d\u52a1\u5668\u5199\u5165\n            {\n                $r = $m;\n            } else {\n                if (is_numeric($this->config['slave_no'])) {\n                    // \u6307\u5b9a\u670d\u52a1\u5668\u8bfb\n                    $r = $this->config['slave_no'];\n                } else {\n                    // \u8bfb\u64cd\u4f5c\u8fde\u63a5\u4ece\u670d\u52a1\u5668\n                    $r = floor(mt_rand($this->config['master_num'], count($_config['hostname']) - 1)); // \u6bcf\u6b21\u968f\u673a\u8fde\u63a5\u7684\u6570\u636e\u5e93\n                }\n            }\n        } else {\n            // \u8bfb\u5199\u64cd\u4f5c\u4e0d\u533a\u5206\u670d\u52a1\u5668\n            $r = floor(mt_rand(0, count($_config['hostname']) - 1)); // \u6bcf\u6b21\u968f\u673a\u8fde\u63a5\u7684\u6570\u636e\u5e93\n        }\n\n        if ($m != $r) {\n            $db_master = array(\n                'username' => isset($_config['username'][$m]) ? $_config['username'][$m] : $_config['username'][0],\n                'password' => isset($_config['password'][$m]) ? $_config['password'][$m] : $_config['password'][0],\n                'hostname' => isset($_config['hostname'][$m]) ? $_config['hostname'][$m] : $_config['hostname'][0],\n                'hostport' => isset($_config['hostport'][$m]) ? $_config['hostport'][$m] : $_config['hostport'][0],\n                'database' => isset($_config['database'][$m]) ? $_config['database'][$m] : $_config['database'][0],\n                'dsn'      => isset($_config['dsn'][$m]) ? $_config['dsn'][$m] : $_config['dsn'][0],\n                'charset'  => isset($_config['charset'][$m]) ? $_config['charset'][$m] : $_config['charset'][0],\n            );\n        }\n        $db_config = array(\n            'username' => isset($_config['username'][$r]) ? $_config['username'][$r] : $_config['username'][0],\n            'password' => isset($_config['password'][$r]) ? $_config['password'][$r] : $_config['password'][0],\n            'hostname' => isset($_config['hostname'][$r]) ? $_config['hostname'][$r] : $_config['hostname'][0],\n            'hostport' => isset($_config['hostport'][$r]) ? $_config['hostport'][$r] : $_config['hostport'][0],\n            'database' => isset($_config['database'][$r]) ? $_config['database'][$r] : $_config['database'][0],\n            'dsn'      => isset($_config['dsn'][$r]) ? $_config['dsn'][$r] : $_config['dsn'][0],\n            'charset'  => isset($_config['charset'][$r]) ? $_config['charset'][$r] : $_config['charset'][0],\n        );\n        return $this->connect($db_config, $r, $r == $m ? false : $db_master);\n    }\n\n    /**\n     * \u6790\u6784\u65b9\u6cd5\n     * @access public\n     */\n    public function __destruct()\n    {\n        // \u91ca\u653e\u67e5\u8be2\n        if ($this->PDOStatement) {\n            $this->free();\n        }\n        // \u5173\u95ed\u8fde\u63a5\n        $this->close();\n    }\n}\n"], "fixing_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK IT ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006-2014 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\n\nnamespace Think\\Db;\n\nuse PDO;\nuse Think\\Config;\nuse Think\\Debug;\n\nabstract class Driver\n{\n    // PDO\u64cd\u4f5c\u5b9e\u4f8b\n    protected $PDOStatement = null;\n    // \u5f53\u524d\u64cd\u4f5c\u6240\u5c5e\u7684\u6a21\u578b\u540d\n    protected $model = '_think_';\n    // \u5f53\u524dSQL\u6307\u4ee4\n    protected $queryStr = '';\n    protected $modelSql = array();\n    // \u6700\u540e\u63d2\u5165ID\n    protected $lastInsID = null;\n    // \u8fd4\u56de\u6216\u8005\u5f71\u54cd\u8bb0\u5f55\u6570\n    protected $numRows = 0;\n    // \u4e8b\u7269\u64cd\u4f5cPDO\u5b9e\u4f8b\n    protected $transPDO = null;\n    // \u4e8b\u52a1\u6307\u4ee4\u6570\n    protected $transTimes = 0;\n    // \u9519\u8bef\u4fe1\u606f\n    protected $error = '';\n    // \u6570\u636e\u5e93\u8fde\u63a5ID \u652f\u6301\u591a\u4e2a\u8fde\u63a5\n    protected $linkID = array();\n    // \u5f53\u524d\u8fde\u63a5ID\n    protected $_linkID = null;\n    // \u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u914d\u7f6e\n    protected $config = array(\n        'type'           => '', // \u6570\u636e\u5e93\u7c7b\u578b\n        'hostname'       => '127.0.0.1', // \u670d\u52a1\u5668\u5730\u5740\n        'database'       => '', // \u6570\u636e\u5e93\u540d\n        'username'       => '', // \u7528\u6237\u540d\n        'password'       => '', // \u5bc6\u7801\n        'hostport'       => '', // \u7aef\u53e3\n        'dsn'            => '', //\n        'params'         => array(), // \u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\n        'charset'        => 'utf8', // \u6570\u636e\u5e93\u7f16\u7801\u9ed8\u8ba4\u91c7\u7528utf8\n        'prefix'         => '', // \u6570\u636e\u5e93\u8868\u524d\u7f00\n        'debug'          => false, // \u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n        'deploy'         => 0, // \u6570\u636e\u5e93\u90e8\u7f72\u65b9\u5f0f:0 \u96c6\u4e2d\u5f0f(\u5355\u4e00\u670d\u52a1\u5668),1 \u5206\u5e03\u5f0f(\u4e3b\u4ece\u670d\u52a1\u5668)\n        'rw_separate'    => false, // \u6570\u636e\u5e93\u8bfb\u5199\u662f\u5426\u5206\u79bb \u4e3b\u4ece\u5f0f\u6709\u6548\n        'master_num'     => 1, // \u8bfb\u5199\u5206\u79bb\u540e \u4e3b\u670d\u52a1\u5668\u6570\u91cf\n        'slave_no'       => '', // \u6307\u5b9a\u4ece\u670d\u52a1\u5668\u5e8f\u53f7\n        'db_like_fields' => '',\n    );\n    // \u6570\u636e\u5e93\u8868\u8fbe\u5f0f\n    protected $exp = array('eq' => '=', 'neq' => '<>', 'gt' => '>', 'egt' => '>=', 'lt' => '<', 'elt' => '<=', 'notlike' => 'NOT LIKE', 'like' => 'LIKE', 'in' => 'IN', 'notin' => 'NOT IN', 'not in' => 'NOT IN', 'between' => 'BETWEEN', 'not between' => 'NOT BETWEEN', 'notbetween' => 'NOT BETWEEN');\n    // \u67e5\u8be2\u8868\u8fbe\u5f0f\n    protected $selectSql = 'SELECT%DISTINCT% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT% %UNION%%LOCK%%COMMENT%';\n    // \u67e5\u8be2\u6b21\u6570\n    protected $queryTimes = 0;\n    // \u6267\u884c\u6b21\u6570\n    protected $executeTimes = 0;\n    // PDO\u8fde\u63a5\u53c2\u6570\n    protected $options = array(\n        PDO::ATTR_CASE              => PDO::CASE_LOWER,\n        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,\n        PDO::ATTR_ORACLE_NULLS      => PDO::NULL_NATURAL,\n        PDO::ATTR_STRINGIFY_FETCHES => false,\n    );\n    protected $bind = array(); // \u53c2\u6570\u7ed1\u5b9a\n\n    /**\n     * \u67b6\u6784\u51fd\u6570 \u8bfb\u53d6\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f\n     * @access public\n     * @param array $config \u6570\u636e\u5e93\u914d\u7f6e\u6570\u7ec4\n     */\n    public function __construct($config = '')\n    {\n        if (!empty($config)) {\n            $this->config = array_merge($this->config, $config);\n            if (is_array($this->config['params'])) {\n                $this->options = $this->config['params'] + $this->options;\n            }\n        }\n    }\n\n    /**\n     * \u8fde\u63a5\u6570\u636e\u5e93\u65b9\u6cd5\n     * @access public\n     */\n    public function connect($config = '', $linkNum = 0, $autoConnection = false)\n    {\n        if (!isset($this->linkID[$linkNum])) {\n            if (empty($config)) {\n                $config = $this->config;\n            }\n\n            try {\n                if (empty($config['dsn'])) {\n                    $config['dsn'] = $this->parseDsn($config);\n                }\n                if (version_compare(PHP_VERSION, '5.3.6', '<=')) {\n                    // \u7981\u7528\u6a21\u62df\u9884\u5904\u7406\u8bed\u53e5\n                    $this->options[PDO::ATTR_EMULATE_PREPARES] = false;\n                }\n                $this->linkID[$linkNum] = new PDO($config['dsn'], $config['username'], $config['password'], $this->options);\n            } catch (\\PDOException $e) {\n                if ($autoConnection) {\n                    trace($e->getMessage(), '', 'ERR');\n                    return $this->connect($autoConnection, $linkNum);\n                } elseif ($config['debug']) {\n                    E($e->getMessage());\n                }\n            }\n        }\n        return $this->linkID[$linkNum];\n    }\n\n    /**\n     * \u89e3\u6790pdo\u8fde\u63a5\u7684dsn\u4fe1\u606f\n     * @access public\n     * @param array $config \u8fde\u63a5\u4fe1\u606f\n     * @return string\n     */\n    protected function parseDsn($config)\n    {}\n\n    /**\n     * \u91ca\u653e\u67e5\u8be2\u7ed3\u679c\n     * @access public\n     */\n    public function free()\n    {\n        $this->PDOStatement = null;\n    }\n\n    /**\n     * \u6267\u884c\u67e5\u8be2 \u8fd4\u56de\u6570\u636e\u96c6\n     * @access public\n     * @param string $str  sql\u6307\u4ee4\n     * @param boolean $fetchSql  \u4e0d\u6267\u884c\u53ea\u662f\u83b7\u53d6SQL\n     * @param boolean $master  \u662f\u5426\u5728\u4e3b\u670d\u52a1\u5668\u8bfb\u64cd\u4f5c\n     * @return mixed\n     */\n    public function query($str, $fetchSql = false, $master = false)\n    {\n        $this->initConnect($master);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        $this->queryStr = $str;\n        if (!empty($this->bind)) {\n            $that           = $this;\n            $this->queryStr = strtr($this->queryStr, array_map(function ($val) use ($that) {return '\\'' . $that->escapeString($val) . '\\'';}, $this->bind));\n        }\n        if ($fetchSql) {\n            return $this->queryStr;\n        }\n        //\u91ca\u653e\u524d\u6b21\u7684\u67e5\u8be2\u7ed3\u679c\n        if (!empty($this->PDOStatement)) {\n            $this->free();\n        }\n\n        $this->queryTimes++;\n        N('db_query', 1); // \u517c\u5bb9\u4ee3\u7801\n        // \u8c03\u8bd5\u5f00\u59cb\n        $this->debug(true);\n        $this->PDOStatement = $this->_linkID->prepare($str);\n        if (false === $this->PDOStatement) {\n            $this->error();\n            return false;\n        }\n        foreach ($this->bind as $key => $val) {\n            if (is_array($val)) {\n                $this->PDOStatement->bindValue($key, $val[0], $val[1]);\n            } else {\n                $this->PDOStatement->bindValue($key, $val);\n            }\n        }\n        $this->bind = array();\n        try {\n            $result = $this->PDOStatement->execute();\n            // \u8c03\u8bd5\u7ed3\u675f\n            $this->debug(false);\n            if (false === $result) {\n                $this->error();\n                return false;\n            } else {\n                return $this->getResult();\n            }\n        } catch (\\PDOException $e) {\n            $this->error();\n            return false;\n        }\n    }\n\n    /**\n     * \u6267\u884c\u8bed\u53e5\n     * @access public\n     * @param string $str  sql\u6307\u4ee4\n     * @param boolean $fetchSql  \u4e0d\u6267\u884c\u53ea\u662f\u83b7\u53d6SQL\n     * @return mixed\n     */\n    public function execute($str, $fetchSql = false)\n    {\n        $this->initConnect(true);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        $this->queryStr = $str;\n        if (!empty($this->bind)) {\n            $that           = $this;\n            $this->queryStr = strtr($this->queryStr, array_map(function ($val) use ($that) {return '\\'' . $that->escapeString($val) . '\\'';}, $this->bind));\n        }\n        if ($fetchSql) {\n            return $this->queryStr;\n        }\n        //\u91ca\u653e\u524d\u6b21\u7684\u67e5\u8be2\u7ed3\u679c\n        if (!empty($this->PDOStatement)) {\n            $this->free();\n        }\n\n        $this->executeTimes++;\n        N('db_write', 1); // \u517c\u5bb9\u4ee3\u7801\n        // \u8bb0\u5f55\u5f00\u59cb\u6267\u884c\u65f6\u95f4\n        $this->debug(true);\n        $this->PDOStatement = $this->_linkID->prepare($str);\n        if (false === $this->PDOStatement) {\n            $this->error();\n            return false;\n        }\n        foreach ($this->bind as $key => $val) {\n            if (is_array($val)) {\n                $this->PDOStatement->bindValue($key, $val[0], $val[1]);\n            } else {\n                $this->PDOStatement->bindValue($key, $val);\n            }\n        }\n        $this->bind = array();\n        try {\n            $result = $this->PDOStatement->execute();\n            // \u8c03\u8bd5\u7ed3\u675f\n            $this->debug(false);\n            if (false === $result) {\n                $this->error();\n                return false;\n            } else {\n                $this->numRows = $this->PDOStatement->rowCount();\n                if (preg_match(\"/^\\s*(INSERT\\s+INTO|REPLACE\\s+INTO)\\s+/i\", $str)) {\n                    $this->lastInsID = $this->_linkID->lastInsertId();\n                }\n                return $this->numRows;\n            }\n        } catch (\\PDOException $e) {\n            $this->error();\n            return false;\n        }\n    }\n\n    /**\n     * \u542f\u52a8\u4e8b\u52a1\n     * @access public\n     * @return void\n     */\n    public function startTrans()\n    {\n        $this->initConnect(true);\n        if (!$this->_linkID) {\n            return false;\n        }\n\n        //\u6570\u636erollback \u652f\u6301\n        if (0 == $this->transTimes) {\n            // \u8bb0\u5f55\u5f53\u524d\u64cd\u4f5cPDO\n            $this->transPdo = $this->_linkID;\n            $this->_linkID->beginTransaction();\n        }\n        $this->transTimes++;\n        return;\n    }\n\n    /**\n     * \u7528\u4e8e\u975e\u81ea\u52a8\u63d0\u4ea4\u72b6\u6001\u4e0b\u9762\u7684\u67e5\u8be2\u63d0\u4ea4\n     * @access public\n     * @return boolean\n     */\n    public function commit()\n    {\n        if (1 == $this->transTimes) {\n            // \u7531\u5d4c\u5957\u4e8b\u7269\u7684\u6700\u5916\u5c42\u8fdb\u884c\u63d0\u4ea4\n            $result           = $this->_linkID->commit();\n            $this->transTimes = 0;\n            $this->transPdo   = null;\n            if (!$result) {\n                $this->error();\n                return false;\n            }\n        } else {\n            $this->transTimes = $this->transTimes <= 0 ? 0 : $this->transTimes - 1;\n        }\n        return true;\n    }\n\n    /**\n     * \u4e8b\u52a1\u56de\u6eda\n     * @access public\n     * @return boolean\n     */\n    public function rollback()\n    {\n        if ($this->transTimes > 0) {\n            $result           = $this->_linkID->rollback();\n            $this->transTimes = 0;\n            $this->transPdo   = null;\n            if (!$result) {\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * \u83b7\u5f97\u6240\u6709\u7684\u67e5\u8be2\u6570\u636e\n     * @access private\n     * @return array\n     */\n    private function getResult()\n    {\n        //\u8fd4\u56de\u6570\u636e\u96c6\n        $result        = $this->PDOStatement->fetchAll(PDO::FETCH_ASSOC);\n        $this->numRows = count($result);\n        return $result;\n    }\n\n    /**\n     * \u83b7\u5f97\u67e5\u8be2\u6b21\u6570\n     * @access public\n     * @param boolean $execute \u662f\u5426\u5305\u542b\u6240\u6709\u67e5\u8be2\n     * @return integer\n     */\n    public function getQueryTimes($execute = false)\n    {\n        return $execute ? $this->queryTimes + $this->executeTimes : $this->queryTimes;\n    }\n\n    /**\n     * \u83b7\u5f97\u6267\u884c\u6b21\u6570\n     * @access public\n     * @return integer\n     */\n    public function getExecuteTimes()\n    {\n        return $this->executeTimes;\n    }\n\n    /**\n     * \u5173\u95ed\u6570\u636e\u5e93\n     * @access public\n     */\n    public function close()\n    {\n        $this->_linkID = null;\n    }\n\n    /**\n     * \u6570\u636e\u5e93\u9519\u8bef\u4fe1\u606f\n     * \u5e76\u663e\u793a\u5f53\u524d\u7684SQL\u8bed\u53e5\n     * @access public\n     * @return string\n     */\n    public function error()\n    {\n        if ($this->PDOStatement) {\n            $error       = $this->PDOStatement->errorInfo();\n            $this->error = $error[1] . ':' . $error[2];\n        } else {\n            $this->error = '';\n        }\n        if ('' != $this->queryStr) {\n            $this->error .= \"\\n [ SQL\u8bed\u53e5 ] : \" . $this->queryStr;\n        }\n        // \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n        trace($this->error, '', 'ERR');\n        if ($this->config['debug']) {\n            // \u5f00\u542f\u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n            E($this->error);\n        } else {\n            return $this->error;\n        }\n    }\n\n    /**\n     * \u8bbe\u7f6e\u9501\u673a\u5236\n     * @access protected\n     * @return string\n     */\n    protected function parseLock($lock = false)\n    {\n        return $lock ? ' FOR UPDATE ' : '';\n    }\n\n    /**\n     * set\u5206\u6790\n     * @access protected\n     * @param array $data\n     * @return string\n     */\n    protected function parseSet($data)\n    {\n        foreach ($data as $key => $val) {\n            if (isset($val[0]) && 'exp' == $val[0]) {\n                $set[] = $this->parseKey($key) . '=' . $val[1];\n            } elseif (is_null($val)) {\n                $set[] = $this->parseKey($key) . '=NULL';\n            } elseif (is_scalar($val)) {\n                // \u8fc7\u6ee4\u975e\u6807\u91cf\u6570\u636e\n                if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                    $set[] = $this->parseKey($key) . '=' . $val;\n                } else {\n                    $name  = count($this->bind);\n                    $set[] = $this->parseKey($key) . '=:' . $key . '_' . $name;\n                    $this->bindParam($key . '_' . $name, $val);\n                }\n            }\n        }\n        return ' SET ' . implode(',', $set);\n    }\n\n    /**\n     * \u53c2\u6570\u7ed1\u5b9a\n     * @access protected\n     * @param string $name \u7ed1\u5b9a\u53c2\u6570\u540d\n     * @param mixed $value \u7ed1\u5b9a\u503c\n     * @return void\n     */\n    protected function bindParam($name, $value)\n    {\n        $this->bind[':' . $name] = $value;\n    }\n\n    /**\n     * \u5b57\u6bb5\u548c\u8868\u540d\u5904\u7406\n     * @access protected\n     * @param string $key\n     * @param bool   $strict\n     * @return string\n     */\n    protected function parseKey($key, $strict = false)\n    {\n        return $key;\n    }\n\n    /**\n     * value\u5206\u6790\n     * @access protected\n     * @param mixed $value\n     * @return string\n     */\n    protected function parseValue($value)\n    {\n        if (is_string($value)) {\n            $value = strpos($value, ':') === 0 && in_array($value, array_keys($this->bind)) ? $this->escapeString($value) : '\\'' . $this->escapeString($value) . '\\'';\n        } elseif (isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp') {\n            $value = $this->escapeString($value[1]);\n        } elseif (is_array($value)) {\n            $value = array_map(array($this, 'parseValue'), $value);\n        } elseif (is_bool($value)) {\n            $value = $value ? '1' : '0';\n        } elseif (is_null($value)) {\n            $value = 'null';\n        }\n        return $value;\n    }\n\n    /**\n     * field\u5206\u6790\n     * @access protected\n     * @param mixed $fields\n     * @return string\n     */\n    protected function parseField($fields)\n    {\n        if (is_string($fields) && '' !== $fields) {\n            $fields = explode(',', $fields);\n        }\n        if (is_array($fields)) {\n            // \u5b8c\u5584\u6570\u7ec4\u65b9\u5f0f\u4f20\u5b57\u6bb5\u540d\u7684\u652f\u6301\n            // \u652f\u6301 'field1'=>'field2' \u8fd9\u6837\u7684\u5b57\u6bb5\u522b\u540d\u5b9a\u4e49\n            $array = array();\n            foreach ($fields as $key => $field) {\n                if (!is_numeric($key)) {\n                    $array[] = $this->parseKey($key) . ' AS ' . $this->parseKey($field);\n                } else {\n                    $array[] = $this->parseKey($field);\n                }\n\n            }\n            $fieldsStr = implode(',', $array);\n        } else {\n            $fieldsStr = '*';\n        }\n        //TODO \u5982\u679c\u662f\u67e5\u8be2\u5168\u90e8\u5b57\u6bb5\uff0c\u5e76\u4e14\u662fjoin\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u5c31\u628a\u8981\u67e5\u7684\u8868\u52a0\u4e2a\u522b\u540d\uff0c\u4ee5\u514d\u5b57\u6bb5\u88ab\u8986\u76d6\n        return $fieldsStr;\n    }\n\n    /**\n     * table\u5206\u6790\n     * @access protected\n     * @param mixed $table\n     * @return string\n     */\n    protected function parseTable($tables)\n    {\n        if (is_array($tables)) {\n            // \u652f\u6301\u522b\u540d\u5b9a\u4e49\n            $array = array();\n            foreach ($tables as $table => $alias) {\n                if (!is_numeric($table)) {\n                    $array[] = $this->parseKey($table) . ' ' . $this->parseKey($alias);\n                } else {\n                    $array[] = $this->parseKey($alias);\n                }\n\n            }\n            $tables = $array;\n        } elseif (is_string($tables)) {\n            $tables = array_map(array($this, 'parseKey'), explode(',', $tables));\n        }\n        return implode(',', $tables);\n    }\n\n    /**\n     * where\u5206\u6790\n     * @access protected\n     * @param mixed $where\n     * @return string\n     */\n    protected function parseWhere($where)\n    {\n        $whereStr = '';\n        if (is_string($where)) {\n            // \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u6761\u4ef6\n            $whereStr = $where;\n        } else {\n            // \u4f7f\u7528\u6570\u7ec4\u8868\u8fbe\u5f0f\n            $operate = isset($where['_logic']) ? strtoupper($where['_logic']) : '';\n            if (in_array($operate, array('AND', 'OR', 'XOR'))) {\n                // \u5b9a\u4e49\u903b\u8f91\u8fd0\u7b97\u89c4\u5219 \u4f8b\u5982 OR XOR AND NOT\n                $operate = ' ' . $operate . ' ';\n                unset($where['_logic']);\n            } else {\n                // \u9ed8\u8ba4\u8fdb\u884c AND \u8fd0\u7b97\n                $operate = ' AND ';\n            }\n            foreach ($where as $key => $val) {\n                if (is_numeric($key)) {\n                    $key = '_complex';\n                }\n                if (0 === strpos($key, '_')) {\n                    // \u89e3\u6790\u7279\u6b8a\u6761\u4ef6\u8868\u8fbe\u5f0f\n                    $whereStr .= $this->parseThinkWhere($key, $val);\n                } else {\n                    // \u67e5\u8be2\u5b57\u6bb5\u7684\u5b89\u5168\u8fc7\u6ee4\n                    // if(!preg_match('/^[A-Z_\\|\\&\\-.a-z0-9\\(\\)\\,]+$/',trim($key))){\n                    //     E(L('_EXPRESS_ERROR_').':'.$key);\n                    // }\n                    // \u591a\u6761\u4ef6\u652f\u6301\n                    $multi = is_array($val) && isset($val['_multi']);\n                    $key   = trim($key);\n                    if (strpos($key, '|')) {\n                        // \u652f\u6301 name|title|nickname \u65b9\u5f0f\u5b9a\u4e49\u67e5\u8be2\u5b57\u6bb5\n                        $array = explode('|', $key);\n                        $str   = array();\n                        foreach ($array as $m => $k) {\n                            $v     = $multi ? $val[$m] : $val;\n                            $str[] = $this->parseWhereItem($this->parseKey($k), $v);\n                        }\n                        $whereStr .= '( ' . implode(' OR ', $str) . ' )';\n                    } elseif (strpos($key, '&')) {\n                        $array = explode('&', $key);\n                        $str   = array();\n                        foreach ($array as $m => $k) {\n                            $v     = $multi ? $val[$m] : $val;\n                            $str[] = '(' . $this->parseWhereItem($this->parseKey($k), $v) . ')';\n                        }\n                        $whereStr .= '( ' . implode(' AND ', $str) . ' )';\n                    } else {\n                        $whereStr .= $this->parseWhereItem($this->parseKey($key), $val);\n                    }\n                }\n                $whereStr .= $operate;\n            }\n            $whereStr = substr($whereStr, 0, -strlen($operate));\n        }\n        return empty($whereStr) ? '' : ' WHERE ' . $whereStr;\n    }\n\n    // where\u5b50\u5355\u5143\u5206\u6790\n    protected function parseWhereItem($key, $val)\n    {\n        $whereStr = '';\n        if (is_array($val)) {\n            if (is_string($val[0])) {\n                $exp = strtolower($val[0]);\n                if (preg_match('/^(eq|neq|gt|egt|lt|elt)$/', $exp)) {\n                    // \u6bd4\u8f83\u8fd0\u7b97\n                    $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($val[1]);\n                } elseif (preg_match('/^(notlike|like)$/', $exp)) {\n                    // \u6a21\u7cca\u67e5\u627e\n                    if (is_array($val[1])) {\n                        $likeLogic = isset($val[2]) ? strtoupper($val[2]) : 'OR';\n                        if (in_array($likeLogic, array('AND', 'OR', 'XOR'))) {\n                            $like = array();\n                            foreach ($val[1] as $item) {\n                                $like[] = $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($item);\n                            }\n                            $whereStr .= '(' . implode(' ' . $likeLogic . ' ', $like) . ')';\n                        }\n                    } else {\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($val[1]);\n                    }\n                } elseif ('bind' == $exp) {\n                    // \u4f7f\u7528\u8868\u8fbe\u5f0f\n                    $whereStr .= $key . ' = :' . $val[1];\n                } elseif ('exp' == $exp) {\n                    // \u4f7f\u7528\u8868\u8fbe\u5f0f\n                    $whereStr .= $key . ' ' . $val[1];\n                } elseif (preg_match('/^(notin|not in|in)$/', $exp)) {\n                    // IN \u8fd0\u7b97\n                    if (isset($val[2]) && 'exp' == $val[2]) {\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $val[1];\n                    } else {\n                        if (is_string($val[1])) {\n                            $val[1] = explode(',', $val[1]);\n                        }\n                        $zone = implode(',', $this->parseValue($val[1]));\n                        $whereStr .= $key . ' ' . $this->exp[$exp] . ' (' . $zone . ')';\n                    }\n                } elseif (preg_match('/^(notbetween|not between|between)$/', $exp)) {\n                    // BETWEEN\u8fd0\u7b97\n                    $data = is_string($val[1]) ? explode(',', $val[1]) : $val[1];\n                    $whereStr .= $key . ' ' . $this->exp[$exp] . ' ' . $this->parseValue($data[0]) . ' AND ' . $this->parseValue($data[1]);\n                } else {\n                    E(L('_EXPRESS_ERROR_') . ':' . $val[0]);\n                }\n            } else {\n                $count = count($val);\n                $rule  = isset($val[$count - 1]) ? (is_array($val[$count - 1]) ? strtoupper($val[$count - 1][0]) : strtoupper($val[$count - 1])) : '';\n                if (in_array($rule, array('AND', 'OR', 'XOR'))) {\n                    $count = $count - 1;\n                } else {\n                    $rule = 'AND';\n                }\n                for ($i = 0; $i < $count; $i++) {\n                    $data = is_array($val[$i]) ? $val[$i][1] : $val[$i];\n                    if ('exp' == strtolower($val[$i][0])) {\n                        $whereStr .= $key . ' ' . $data . ' ' . $rule . ' ';\n                    } else {\n                        $whereStr .= $this->parseWhereItem($key, $val[$i]) . ' ' . $rule . ' ';\n                    }\n                }\n                $whereStr = '( ' . substr($whereStr, 0, -4) . ' )';\n            }\n        } else {\n            //\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u5b57\u6bb5\u91c7\u7528\u6a21\u7cca\u5339\u914d\n            $likeFields = $this->config['db_like_fields'];\n            if ($likeFields && preg_match('/^(' . $likeFields . ')$/i', $key)) {\n                $whereStr .= $key . ' LIKE ' . $this->parseValue('%' . $val . '%');\n            } else {\n                $whereStr .= $key . ' = ' . $this->parseValue($val);\n            }\n        }\n        return $whereStr;\n    }\n\n    /**\n     * \u7279\u6b8a\u6761\u4ef6\u5206\u6790\n     * @access protected\n     * @param string $key\n     * @param mixed $val\n     * @return string\n     */\n    protected function parseThinkWhere($key, $val)\n    {\n        $whereStr = '';\n        switch ($key) {\n            case '_string':\n                // \u5b57\u7b26\u4e32\u6a21\u5f0f\u67e5\u8be2\u6761\u4ef6\n                $whereStr = $val;\n                break;\n            case '_complex':\n                // \u590d\u5408\u67e5\u8be2\u6761\u4ef6\n                $whereStr = substr($this->parseWhere($val), 6);\n                break;\n            case '_query':\n                // \u5b57\u7b26\u4e32\u6a21\u5f0f\u67e5\u8be2\u6761\u4ef6\n                parse_str($val, $where);\n                if (isset($where['_logic'])) {\n                    $op = ' ' . strtoupper($where['_logic']) . ' ';\n                    unset($where['_logic']);\n                } else {\n                    $op = ' AND ';\n                }\n                $array = array();\n                foreach ($where as $field => $data) {\n                    $array[] = $this->parseKey($field) . ' = ' . $this->parseValue($data);\n                }\n\n                $whereStr = implode($op, $array);\n                break;\n        }\n        return '( ' . $whereStr . ' )';\n    }\n\n    /**\n     * limit\u5206\u6790\n     * @access protected\n     * @param mixed $lmit\n     * @return string\n     */\n    protected function parseLimit($limit)\n    {\n        return (!empty($limit) && false === strpos($limit, '(')) ? ' LIMIT ' . $limit . ' ' : '';\n    }\n\n    /**\n     * join\u5206\u6790\n     * @access protected\n     * @param mixed $join\n     * @return string\n     */\n    protected function parseJoin($join)\n    {\n        $joinStr = '';\n        if (!empty($join)) {\n            $joinStr = ' ' . implode(' ', $join) . ' ';\n        }\n        return $joinStr;\n    }\n\n    /**\n     * order\u5206\u6790\n     * @access protected\n     * @param mixed $order\n     * @return string\n     */\n    protected function parseOrder($order)\n    {\n        if (empty($order)) {\n            return '';\n        }\n        $array = array();\n        if (is_string($order) && '[RAND]' != $order) {\n            $order = explode(',', $order);\n        }\n\n        if (is_array($order)) {\n            foreach ($order as $key => $val) {\n                if (is_numeric($key)) {\n                    list($key, $sort) = explode(' ', strpos($val, ' ') ? $val : $val . ' ');\n                } else {\n                    $sort = $val;\n                }\n\n                if (preg_match('/^[\\w]+$/', $key)) {\n                    $sort    = strtoupper($sort);\n                    $sort    = in_array($sort, ['ASC', 'DESC'], true) ? ' ' . $sort : '';\n                    $array[] = $this->parseKey($key, true) . $sort;\n                }\n            }\n        } elseif ('[RAND]' == $order) {\n            // \u968f\u673a\u6392\u5e8f\n            $array[] = $this->parseRand();\n        }\n\n        $order = implode(',', $array);\n        return !empty($order) ? ' ORDER BY ' . $order : '';\n    }\n\n    /**\n     * group\u5206\u6790\n     * @access protected\n     * @param mixed $group\n     * @return string\n     */\n    protected function parseGroup($group)\n    {\n        return !empty($group) ? ' GROUP BY ' . $group : '';\n    }\n\n    /**\n     * having\u5206\u6790\n     * @access protected\n     * @param string $having\n     * @return string\n     */\n    protected function parseHaving($having)\n    {\n        return !empty($having) ? ' HAVING ' . $having : '';\n    }\n\n    /**\n     * comment\u5206\u6790\n     * @access protected\n     * @param string $comment\n     * @return string\n     */\n    protected function parseComment($comment)\n    {\n        return !empty($comment) ? ' /* ' . $comment . ' */' : '';\n    }\n\n    /**\n     * distinct\u5206\u6790\n     * @access protected\n     * @param mixed $distinct\n     * @return string\n     */\n    protected function parseDistinct($distinct)\n    {\n        return !empty($distinct) ? ' DISTINCT ' : '';\n    }\n\n    /**\n     * union\u5206\u6790\n     * @access protected\n     * @param mixed $union\n     * @return string\n     */\n    protected function parseUnion($union)\n    {\n        if (empty($union)) {\n            return '';\n        }\n\n        if (isset($union['_all'])) {\n            $str = 'UNION ALL ';\n            unset($union['_all']);\n        } else {\n            $str = 'UNION ';\n        }\n        foreach ($union as $u) {\n            $sql[] = $str . (is_array($u) ? $this->buildSelectSql($u) : $u);\n        }\n        return implode(' ', $sql);\n    }\n\n    /**\n     * \u53c2\u6570\u7ed1\u5b9a\u5206\u6790\n     * @access protected\n     * @param array $bind\n     * @return array\n     */\n    protected function parseBind($bind)\n    {\n        $this->bind = array_merge($this->bind, $bind);\n    }\n\n    /**\n     * index\u5206\u6790\uff0c\u53ef\u5728\u64cd\u4f5c\u94fe\u4e2d\u6307\u5b9a\u9700\u8981\u5f3a\u5236\u4f7f\u7528\u7684\u7d22\u5f15\n     * @access protected\n     * @param mixed $index\n     * @return string\n     */\n    protected function parseForce($index)\n    {\n        if (empty($index)) {\n            return '';\n        }\n\n        if (is_array($index)) {\n            $index = join(\",\", $index);\n        }\n\n        return sprintf(\" FORCE INDEX ( %s ) \", $index);\n    }\n\n    /**\n     * ON DUPLICATE KEY UPDATE \u5206\u6790\n     * @access protected\n     * @param mixed $duplicate\n     * @return string\n     */\n    protected function parseDuplicate($duplicate)\n    {\n        return '';\n    }\n\n    /**\n     * \u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param mixed $data \u6570\u636e\n     * @param array $options \u53c2\u6570\u8868\u8fbe\u5f0f\n     * @param boolean $replace \u662f\u5426replace\n     * @return false | integer\n     */\n    public function insert($data, $options = array(), $replace = false)\n    {\n        $values      = $fields      = array();\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        foreach ($data as $key => $val) {\n            if (isset($val[0]) && 'exp' == $val[0]) {\n                $fields[] = $this->parseKey($key);\n                $values[] = $val[1];\n            } elseif (is_null($val)) {\n                $fields[] = $this->parseKey($key);\n                $values[] = 'NULL';\n            } elseif (is_scalar($val)) {\n                // \u8fc7\u6ee4\u975e\u6807\u91cf\u6570\u636e\n                $fields[] = $this->parseKey($key);\n                if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                    $values[] = $val;\n                } else {\n                    $name     = count($this->bind);\n                    $values[] = ':' . $key . '_' . $name;\n                    $this->bindParam($key . '_' . $name, $val);\n                }\n            }\n        }\n        // \u517c\u5bb9\u6570\u5b57\u4f20\u5165\u65b9\u5f0f\n        $replace = (is_numeric($replace) && $replace > 0) ? true : $replace;\n        $sql     = (true === $replace ? 'REPLACE' : 'INSERT') . ' INTO ' . $this->parseTable($options['table']) . ' (' . implode(',', $fields) . ') VALUES (' . implode(',', $values) . ')' . $this->parseDuplicate($replace);\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u6279\u91cf\u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param mixed $dataSet \u6570\u636e\u96c6\n     * @param array $options \u53c2\u6570\u8868\u8fbe\u5f0f\n     * @param boolean $replace \u662f\u5426replace\n     * @return false | integer\n     */\n    public function insertAll($dataSet, $options = array(), $replace = false)\n    {\n        $values      = array();\n        $this->model = $options['model'];\n        if (!is_array($dataSet[0])) {\n            return false;\n        }\n\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $fields = array_map(array($this, 'parseKey'), array_keys($dataSet[0]));\n        foreach ($dataSet as $data) {\n            $value = array();\n            foreach ($data as $key => $val) {\n                if (is_array($val) && 'exp' == $val[0]) {\n                    $value[] = $val[1];\n                } elseif (is_null($val)) {\n                    $value[] = 'NULL';\n                } elseif (is_scalar($val)) {\n                    if (0 === strpos($val, ':') && in_array($val, array_keys($this->bind))) {\n                        $value[] = $val;\n                    } else {\n                        $name    = count($this->bind);\n                        $value[] = ':' . $key . '_' . $name;\n                        $this->bindParam($key . '_' . $name, $val);\n                    }\n                }\n            }\n            $values[] = 'SELECT ' . implode(',', $value);\n        }\n        $sql = 'INSERT INTO ' . $this->parseTable($options['table']) . ' (' . implode(',', $fields) . ') ' . implode(' UNION ALL ', $values);\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u901a\u8fc7Select\u65b9\u5f0f\u63d2\u5165\u8bb0\u5f55\n     * @access public\n     * @param string $fields \u8981\u63d2\u5165\u7684\u6570\u636e\u8868\u5b57\u6bb5\u540d\n     * @param string $table \u8981\u63d2\u5165\u7684\u6570\u636e\u8868\u540d\n     * @param array $option  \u67e5\u8be2\u6570\u636e\u53c2\u6570\n     * @return false | integer\n     */\n    public function selectInsert($fields, $table, $options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        if (is_string($fields)) {\n            $fields = explode(',', $fields);\n        }\n\n        $fields = array_map(array($this, 'parseKey'), $fields);\n        $sql    = 'INSERT INTO ' . $this->parseTable($table) . ' (' . implode(',', $fields) . ') ';\n        $sql .= $this->buildSelectSql($options);\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u66f4\u65b0\u8bb0\u5f55\n     * @access public\n     * @param mixed $data \u6570\u636e\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return false | integer\n     */\n    public function update($data, $options)\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $table = $this->parseTable($options['table']);\n        $sql   = 'UPDATE ' . $table . $this->parseSet($data);\n        if (strpos($table, ',')) {\n            // \u591a\u8868\u66f4\u65b0\u652f\u6301JOIN\u64cd\u4f5c\n            $sql .= $this->parseJoin(!empty($options['join']) ? $options['join'] : '');\n        }\n        $sql .= $this->parseWhere(!empty($options['where']) ? $options['where'] : '');\n        if (!strpos($table, ',')) {\n            //  \u5355\u8868\u66f4\u65b0\u652f\u6301order\u548clmit\n            $sql .= $this->parseOrder(!empty($options['order']) ? $options['order'] : '')\n            . $this->parseLimit(!empty($options['limit']) ? $options['limit'] : '');\n        }\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u5220\u9664\u8bb0\u5f55\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return false | integer\n     */\n    public function delete($options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $table = $this->parseTable($options['table']);\n        $sql   = 'DELETE FROM ' . $table;\n        if (strpos($table, ',')) {\n            // \u591a\u8868\u5220\u9664\u652f\u6301USING\u548cJOIN\u64cd\u4f5c\n            if (!empty($options['using'])) {\n                $sql .= ' USING ' . $this->parseTable($options['using']) . ' ';\n            }\n            $sql .= $this->parseJoin(!empty($options['join']) ? $options['join'] : '');\n        }\n        $sql .= $this->parseWhere(!empty($options['where']) ? $options['where'] : '');\n        if (!strpos($table, ',')) {\n            // \u5355\u8868\u5220\u9664\u652f\u6301order\u548climit\n            $sql .= $this->parseOrder(!empty($options['order']) ? $options['order'] : '')\n            . $this->parseLimit(!empty($options['limit']) ? $options['limit'] : '');\n        }\n        $sql .= $this->parseComment(!empty($options['comment']) ? $options['comment'] : '');\n        return $this->execute($sql, !empty($options['fetch_sql']) ? true : false);\n    }\n\n    /**\n     * \u67e5\u627e\u8bb0\u5f55\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return mixed\n     */\n    public function select($options = array())\n    {\n        $this->model = $options['model'];\n        $this->parseBind(!empty($options['bind']) ? $options['bind'] : array());\n        $sql    = $this->buildSelectSql($options);\n        $result = $this->query($sql, !empty($options['fetch_sql']) ? true : false, !empty($options['master']) ? true : false);\n        return $result;\n    }\n\n    /**\n     * \u751f\u6210\u67e5\u8be2SQL\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return string\n     */\n    public function buildSelectSql($options = array())\n    {\n        if (isset($options['page'])) {\n            // \u6839\u636e\u9875\u6570\u8ba1\u7b97limit\n            list($page, $listRows) = $options['page'];\n            $page                  = $page > 0 ? $page : 1;\n            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);\n            $offset                = $listRows * ($page - 1);\n            $options['limit']      = $offset . ',' . $listRows;\n        }\n        $sql = $this->parseSql($this->selectSql, $options);\n        return $sql;\n    }\n\n    /**\n     * \u66ff\u6362SQL\u8bed\u53e5\u4e2d\u8868\u8fbe\u5f0f\n     * @access public\n     * @param array $options \u8868\u8fbe\u5f0f\n     * @return string\n     */\n    public function parseSql($sql, $options = array())\n    {\n        $sql = str_replace(\n            array('%TABLE%', '%DISTINCT%', '%FIELD%', '%JOIN%', '%WHERE%', '%GROUP%', '%HAVING%', '%ORDER%', '%LIMIT%', '%UNION%', '%LOCK%', '%COMMENT%', '%FORCE%'),\n            array(\n                $this->parseTable($options['table']),\n                $this->parseDistinct(isset($options['distinct']) ? $options['distinct'] : false),\n                $this->parseField(!empty($options['field']) ? $options['field'] : '*'),\n                $this->parseJoin(!empty($options['join']) ? $options['join'] : ''),\n                $this->parseWhere(!empty($options['where']) ? $options['where'] : ''),\n                $this->parseGroup(!empty($options['group']) ? $options['group'] : ''),\n                $this->parseHaving(!empty($options['having']) ? $options['having'] : ''),\n                $this->parseOrder(!empty($options['order']) ? $options['order'] : ''),\n                $this->parseLimit(!empty($options['limit']) ? $options['limit'] : ''),\n                $this->parseUnion(!empty($options['union']) ? $options['union'] : ''),\n                $this->parseLock(isset($options['lock']) ? $options['lock'] : false),\n                $this->parseComment(!empty($options['comment']) ? $options['comment'] : ''),\n                $this->parseForce(!empty($options['force']) ? $options['force'] : ''),\n            ), $sql);\n        return $sql;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u4e00\u6b21\u67e5\u8be2\u7684sql\u8bed\u53e5\n     * @param string $model  \u6a21\u578b\u540d\n     * @access public\n     * @return string\n     */\n    public function getLastSql($model = '')\n    {\n        return $model ? $this->modelSql[$model] : $this->queryStr;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u63d2\u5165\u7684ID\n     * @access public\n     * @return string\n     */\n    public function getLastInsID()\n    {\n        return $this->lastInsID;\n    }\n\n    /**\n     * \u83b7\u53d6\u6700\u8fd1\u7684\u9519\u8bef\u4fe1\u606f\n     * @access public\n     * @return string\n     */\n    public function getError()\n    {\n        return $this->error;\n    }\n\n    /**\n     * SQL\u6307\u4ee4\u5b89\u5168\u8fc7\u6ee4\n     * @access public\n     * @param string $str  SQL\u5b57\u7b26\u4e32\n     * @return string\n     */\n    public function escapeString($str)\n    {\n        return addslashes($str);\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u64cd\u4f5c\u6a21\u578b\n     * @access public\n     * @param string $model  \u6a21\u578b\u540d\n     * @return void\n     */\n    public function setModel($model)\n    {\n        $this->model = $model;\n    }\n\n    /**\n     * \u6570\u636e\u5e93\u8c03\u8bd5 \u8bb0\u5f55\u5f53\u524dSQL\n     * @access protected\n     * @param boolean $start  \u8c03\u8bd5\u5f00\u59cb\u6807\u8bb0 true \u5f00\u59cb false \u7ed3\u675f\n     */\n    protected function debug($start)\n    {\n        if ($this->config['debug']) {\n            // \u5f00\u542f\u6570\u636e\u5e93\u8c03\u8bd5\u6a21\u5f0f\n            if ($start) {\n                G('queryStartTime');\n            } else {\n                $this->modelSql[$this->model] = $this->queryStr;\n                //$this->model  =   '_think_';\n                // \u8bb0\u5f55\u64cd\u4f5c\u7ed3\u675f\u65f6\u95f4\n                G('queryEndTime');\n                trace($this->queryStr . ' [ RunTime:' . G('queryStartTime', 'queryEndTime') . 's ]', '', 'SQL');\n            }\n        }\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n     * @access protected\n     * @param boolean $master \u4e3b\u670d\u52a1\u5668\n     * @return void\n     */\n    protected function initConnect($master = true)\n    {\n        // \u5f00\u542f\u4e8b\u7269\u65f6\u7528\u540c\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884c\u64cd\u4f5c\n        if ($this->transPDO) {\n            return $this->transPDO;\n        }\n\n        if (!empty($this->config['deploy']))\n        // \u91c7\u7528\u5206\u5e03\u5f0f\u6570\u636e\u5e93\n        {\n            $this->_linkID = $this->multiConnect($master);\n        } else\n        // \u9ed8\u8ba4\u5355\u6570\u636e\u5e93\n        if (!$this->_linkID) {\n            $this->_linkID = $this->connect();\n        }\n\n    }\n\n    /**\n     * \u8fde\u63a5\u5206\u5e03\u5f0f\u670d\u52a1\u5668\n     * @access protected\n     * @param boolean $master \u4e3b\u670d\u52a1\u5668\n     * @return void\n     */\n    protected function multiConnect($master = false)\n    {\n        // \u5206\u5e03\u5f0f\u6570\u636e\u5e93\u914d\u7f6e\u89e3\u6790\n        $_config['username'] = explode(',', $this->config['username']);\n        $_config['password'] = explode(',', $this->config['password']);\n        $_config['hostname'] = explode(',', $this->config['hostname']);\n        $_config['hostport'] = explode(',', $this->config['hostport']);\n        $_config['database'] = explode(',', $this->config['database']);\n        $_config['dsn']      = explode(',', $this->config['dsn']);\n        $_config['charset']  = explode(',', $this->config['charset']);\n\n        $m = floor(mt_rand(0, $this->config['master_num'] - 1));\n        // \u6570\u636e\u5e93\u8bfb\u5199\u662f\u5426\u5206\u79bb\n        if ($this->config['rw_separate']) {\n            // \u4e3b\u4ece\u5f0f\u91c7\u7528\u8bfb\u5199\u5206\u79bb\n            if ($master)\n            // \u4e3b\u670d\u52a1\u5668\u5199\u5165\n            {\n                $r = $m;\n            } else {\n                if (is_numeric($this->config['slave_no'])) {\n                    // \u6307\u5b9a\u670d\u52a1\u5668\u8bfb\n                    $r = $this->config['slave_no'];\n                } else {\n                    // \u8bfb\u64cd\u4f5c\u8fde\u63a5\u4ece\u670d\u52a1\u5668\n                    $r = floor(mt_rand($this->config['master_num'], count($_config['hostname']) - 1)); // \u6bcf\u6b21\u968f\u673a\u8fde\u63a5\u7684\u6570\u636e\u5e93\n                }\n            }\n        } else {\n            // \u8bfb\u5199\u64cd\u4f5c\u4e0d\u533a\u5206\u670d\u52a1\u5668\n            $r = floor(mt_rand(0, count($_config['hostname']) - 1)); // \u6bcf\u6b21\u968f\u673a\u8fde\u63a5\u7684\u6570\u636e\u5e93\n        }\n\n        if ($m != $r) {\n            $db_master = array(\n                'username' => isset($_config['username'][$m]) ? $_config['username'][$m] : $_config['username'][0],\n                'password' => isset($_config['password'][$m]) ? $_config['password'][$m] : $_config['password'][0],\n                'hostname' => isset($_config['hostname'][$m]) ? $_config['hostname'][$m] : $_config['hostname'][0],\n                'hostport' => isset($_config['hostport'][$m]) ? $_config['hostport'][$m] : $_config['hostport'][0],\n                'database' => isset($_config['database'][$m]) ? $_config['database'][$m] : $_config['database'][0],\n                'dsn'      => isset($_config['dsn'][$m]) ? $_config['dsn'][$m] : $_config['dsn'][0],\n                'charset'  => isset($_config['charset'][$m]) ? $_config['charset'][$m] : $_config['charset'][0],\n            );\n        }\n        $db_config = array(\n            'username' => isset($_config['username'][$r]) ? $_config['username'][$r] : $_config['username'][0],\n            'password' => isset($_config['password'][$r]) ? $_config['password'][$r] : $_config['password'][0],\n            'hostname' => isset($_config['hostname'][$r]) ? $_config['hostname'][$r] : $_config['hostname'][0],\n            'hostport' => isset($_config['hostport'][$r]) ? $_config['hostport'][$r] : $_config['hostport'][0],\n            'database' => isset($_config['database'][$r]) ? $_config['database'][$r] : $_config['database'][0],\n            'dsn'      => isset($_config['dsn'][$r]) ? $_config['dsn'][$r] : $_config['dsn'][0],\n            'charset'  => isset($_config['charset'][$r]) ? $_config['charset'][$r] : $_config['charset'][0],\n        );\n        return $this->connect($db_config, $r, $r == $m ? false : $db_master);\n    }\n\n    /**\n     * \u6790\u6784\u65b9\u6cd5\n     * @access public\n     */\n    public function __destruct()\n    {\n        // \u91ca\u653e\u67e5\u8be2\n        if ($this->PDOStatement) {\n            $this->free();\n        }\n        // \u5173\u95ed\u8fde\u63a5\n        $this->close();\n    }\n}\n"], "filenames": ["ThinkPHP/Library/Think/Db/Driver.class.php"], "buggy_code_start_loc": [760], "buggy_code_end_loc": [784], "fixing_code_start_loc": [761], "fixing_code_end_loc": [784], "type": "CWE-89", "message": "ThinkPHP 3.2.4 has SQL Injection via the order parameter because the Library/Think/Db/Driver.class.php parseOrder function mishandles the key variable.", "other": {"cve": {"id": "CVE-2018-18546", "sourceIdentifier": "cve@mitre.org", "published": "2018-10-21T01:29:00.433", "lastModified": "2018-12-04T19:08:26.280", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ThinkPHP 3.2.4 has SQL Injection via the order parameter because the Library/Think/Db/Driver.class.php parseOrder function mishandles the key variable."}, {"lang": "es", "value": "ThinkPHP 3.2.4 tiene una inyecci\u00f3n SQL mediante el par\u00e1metro order debido a que la funci\u00f3n parseOrder en Library/Think/Db/Driver.class.php gestiona de manera incorrecta la variable key."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thinkphp:thinkphp:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "FBEB1CAA-71EC-4792-8FD3-E092F5A064D2"}]}]}], "references": [{"url": "https://98587329.github.io/2018/10/09/thinkphp%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/top-think/thinkphp/commit/9748cb80d2f24c89218f358ca2f5ab88ee33396f", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/top-think/thinkphp/commit/9748cb80d2f24c89218f358ca2f5ab88ee33396f"}}