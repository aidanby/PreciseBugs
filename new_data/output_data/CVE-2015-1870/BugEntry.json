{"buggy_code": ["# copy-pasted from libreport\n# ABRT_PARSE_WITH(PACKAGE)\n# -----------------------\n# For use in AC_ARG_WITH action-if-found, for packages default ON.\n# * Set NO_PACKAGE=YesPlease for --without-PACKAGE\n# * Unset NO_PACKAGE for --with-PACKAGE without ARG\nAC_DEFUN([ABRT_PARSE_WITH],\n    [m4_pushdef([ABRT_UC_PACKAGE], m4_toupper([$1]))dnl\n    if test \"$withval\" = \"no\"; then\n        NO_[]ABRT_UC_PACKAGE=YesPlease\n    elif test \"$withval\" = \"yes\"; then\n        NO_[]ABRT_UC_PACKAGE=\n    else\n        NO_[]ABRT_UC_PACKAGE=\n    fi\n    m4_popdef([ABRT_UC_PACKAGE])])\n\nAC_INIT([abrt],\n\tm4_esyscmd([cat ./abrt-version]),\n\t[crash-catcher@fedorahosted.org])\n\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([-Wall foreign tar-ustar])\n# Support silent build rules. Disable by either passing --disable-silent-rules\n# to ./configure or passing V=1 to make\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])\n# The 'yes' argument is undocumented but it is common knowledge that it works.\nAM_SILENT_RULES([yes])\n\n\nAC_DISABLE_STATIC\nAC_PROG_LIBTOOL\nAC_PROG_CC\nAC_PROG_LN_S\n\nAC_SYS_LARGEFILE\nCFLAGS=\"$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE \\\n          -D_FILE_OFFSET_BITS=64 -fno-strict-aliasing -std=gnu99 -Wall -Wwrite-strings\"\n\nAC_ARG_ENABLE(debug,\n              [AC_HELP_STRING([--enable-debug],\n                             [Enable debug information])],\n              [CFLAGS=\"$CFLAGS -DDEBUG -ggdb -g -O0\"])\n\ndnl ****** INTERNATIONALIZATION **********************\nGETTEXT_PACKAGE=abrt\nAC_SUBST(GETTEXT_PACKAGE)\nAC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, \"$GETTEXT_PACKAGE\", [Package name for gettext])\n\nAM_GNU_GETTEXT([external])\nAM_GNU_GETTEXT_VERSION([0.17])\n\nIT_PROG_INTLTOOL([0.35.0])\n\ndnl ****** END ****************************************\n\nAM_PATH_PYTHON\nif test -z \"$PYTHON\"; then\n    echo \"*** Essential program python not found\" 1>&2\n    exit 1\nfi\n\nAC_PATH_PROG([ASCIIDOC], [asciidoc], [no])\n[if test \"$ASCIIDOC\" = \"no\"]\n[then]\n    [echo \"The asciidoc program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_PATH_PROG([XMLTO], [xmlto], [no])\n[if test \"$XMLTO\" = \"no\"]\n[then]\n    [echo \"The xmlto program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_PATH_PROG([PYTHON_CONFIG], [python-config], [no])\n[if test \"$PYTHON_CONFIG\" = \"no\"]\n[then]\n    [echo \"The python-config program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build libreport.\"]\n    [exit 1]\n[fi]\n\nPYTHON_CFLAGS=`python-config --cflags 2> /dev/null`\nPYTHON_LIBS=`python-config --libs 2> /dev/null`\nAC_SUBST(PYTHON_CFLAGS)\nAC_SUBST(PYTHON_LIBS)\n\nPKG_CHECK_MODULES([XICE], [ice])\nPKG_CHECK_MODULES([XSMP], [sm])\nPKG_CHECK_MODULES([GTK], [gtk+-3.0])\nPKG_CHECK_MODULES([GLIB], [glib-2.0 >= 2.21])\nPKG_CHECK_MODULES([DBUS], [dbus-1])\nPKG_CHECK_MODULES([LIBXML], [libxml-2.0])\nPKG_CHECK_MODULES([RPM], [rpm])\nPKG_CHECK_MODULES([LIBNOTIFY], [libnotify])\nPKG_CHECK_MODULES([NSS], [nss])\nPKG_CHECK_MODULES([LIBREPORT], [libreport])\nPKG_CHECK_MODULES([LIBREPORT_GTK], [libreport-gtk])\nPKG_CHECK_MODULES([POLKIT], [polkit-gobject-1])\nPKG_CHECK_MODULES([GIO], [gio-2.0])\nPKG_CHECK_MODULES([SATYR], [satyr])\nPKG_CHECK_MODULES([LIBSELINUX], [libselinux])\n\nPKG_PROG_PKG_CONFIG\nAC_ARG_WITH([systemdsystemunitdir],\n        AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files]),\n        [], [with_systemdsystemunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)])\nAC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])\nAM_CONDITIONAL(HAVE_SYSTEMD, [test -n \"$with_systemdsystemunitdir\"])\n\nAC_ARG_WITH([dbusinterfacedir],\n        AS_HELP_STRING([--with-dbusinterfacedir=DIR], [Directory for dbus interface files]),\n        [], [with_dbusinterfacedir=${datadir}/dbus-1/interfaces])\nAC_SUBST([dbusinterfacedir], [$with_dbusinterfacedir])\n\nAC_ARG_WITH(largedatatmpdir,\n            [AS_HELP_STRING([--with-largedatatmpdir=DIR],\n                           [Directory where potentially large data are created (default: /var/tmp)])],\n            [], [with_largedatatmpdir=\"/var/tmp\"])\nAC_SUBST([LARGE_DATA_TMP_DIR], [$with_largedatatmpdir])\n\nAC_CHECK_HEADER([sys/inotify.h], [],\n   [AC_MSG_ERROR([sys/inotify.h is needed to build abrt])])\n\nAC_CHECK_HEADERS([locale.h])\n\nCONF_DIR='${sysconfdir}/${PACKAGE_NAME}'\nDEFAULT_CONF_DIR='${datadir}/${PACKAGE_NAME}/conf.d'\nVAR_RUN='${localstatedir}/run'\nPLUGINS_CONF_DIR='${sysconfdir}/${PACKAGE_NAME}/plugins'\nDEFAULT_PLUGINS_CONF_DIR='${datadir}/${PACKAGE_NAME}/conf.d/plugins'\nEVENTS_DIR='${datadir}/libreport/events'\nEVENTS_CONF_DIR='${sysconfdir}/libreport/events.d'\nWORKFLOWS_DIR='${datadir}/libreport/workflows'\nENABLE_SOCKET_OR_DBUS='-DENABLE_DBUS=1'\nDEFAULT_DUMP_DIR_MODE=$($PKG_CONFIG --variable=dd_mode libreport)\nLIBREPORT_PLUGINS_CONF_DIR=$($PKG_CONFIG --variable=plugins_conf_dir libreport)\nPROBLEMS_CONFIG_INTERFACES_DIR=${dbusinterfacedir}\n\nAC_ARG_WITH([defaultdumplocation],\n            AS_HELP_STRING([--with-defaultdumplocation=DIR],\n                           [Default dump location ('LOCALSTATEDIR/tmp/abrt')]),\n            [], [with_defaultdumplocation=${localstatedir}/tmp/abrt])\nAC_SUBST([DEFAULT_DUMP_LOCATION], [$with_defaultdumplocation])\n\nAC_ARG_WITH(augeaslenslibdir,\n                    [AS_HELP_STRING([--with-augeaslenslibdir=DIR],\n                                                   [Directory for librepor lens (default: /usr/share/augeas/lenses)])],\n                                [], [with_augeaslenslibdir=\"/usr/share/augeas/lenses\"])\nAC_SUBST([AUGEAS_LENS_LIB_DIR], [$with_augeaslenslibdir])\n\nAC_PATH_PROG(AUGPARSE, augparse, no)\n[if test \"$ARGPARSE\" = \"no\"]\n[then]\n    [echo \"The argparse program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_ARG_ENABLE(doxygen-docs,\n    AS_HELP_STRING([--enable-doxygen-docs],\n\t[build DOXYGEN documentation (requires Doxygen)]),\n    [enable_doxygen_docs=$enableval],\n    [enable_doxygen_docs=no]\n)\n\n# Doxygen Documentation\n\nAC_PATH_PROG(DOXYGEN, doxygen, no)\n\nAC_MSG_CHECKING([whether to build Doxygen documentation])\n\nif test \"$DOXYGEN\" = \"no\" ; then\n    have_doxygen=no\nelse\n    have_doxygen=yes\nfi\n\nif test \"$enable_doxygen_docs\" = \"yes\" ; then\n    if test \"$have_doxygen\" = \"no\"; then\n        AC_MSG_ERROR([Building Doxygen docs explicitly required, but Doxygen not found])\n    fi\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\nfi\n\nAM_CONDITIONAL(DBUS_DOXYGEN_DOCS_ENABLED, test \"$enable_doxygen_docs\" = \"yes\")\n\n\n# Autoreporting advertisement\n\nAC_ARG_ENABLE(suggest-autoreporting,\n    AS_HELP_STRING([--enable-suggest-autoreporting],\n    [print messages encouraging users to enable autoreporting]),\n    [enable_suggest_autoreporting=$enableval],\n    [enable_suggest_autoreporting=no]\n)\n\nAM_CONDITIONAL(SUGGEST_AUTOREPORTING, test \"$enable_suggest_autoreporting\" = \"yes\")\n\n# Make satyr use GDB or elfutils/libunwind for unwinding?\n\nAC_ARG_ENABLE([native-unwinder],\n    AS_HELP_STRING([--enable-native-unwinder],\n        [use native unwinder (libunwind or elfutils) instead of GDB (default is no)]),\n    [], [enable_native_unwinder=no])\n\n[if test \"$enable_native_unwinder\" = \"yes\"]\n[then]\n    AC_DEFINE([ENABLE_NATIVE_UNWINDER], [1], [Use elfutils/libunwind for unwinding instead of GDB.])\n[fi]\n\n\nAC_SUBST(CONF_DIR)\nAC_SUBST(DEFAULT_CONF_DIR)\nAC_SUBST(VAR_RUN)\nAC_SUBST(PLUGINS_CONF_DIR)\nAC_SUBST(DEFAULT_PLUGINS_CONF_DIR)\nAC_SUBST(EVENTS_CONF_DIR)\nAC_SUBST(WORKFLOWS_DIR)\nAC_SUBST(EVENTS_DIR)\nAC_SUBST(DEFAULT_DUMP_LOCATION)\nAC_SUBST(DEFAULT_DUMP_DIR_MODE)\nAC_SUBST(LIBREPORT_PLUGINS_CONF_DIR)\nAC_SUBST(PROBLEMS_CONFIG_INTERFACES_DIR)\n\nAC_ARG_WITH(bodhi,\nAS_HELP_STRING([--with-bodhi],[use Bodhi plugin (default is YES)]),\nABRT_PARSE_WITH([bodhi]))\n\nif test -z \"$NO_BODHI\"\nthen\nPKG_CHECK_MODULES([JSON_C], [json-c])\nPKG_CHECK_MODULES([LIBREPORT_WEB], [libreport-web])\nAM_CONDITIONAL(BUILD_BODHI, true)\nelse\nAM_CONDITIONAL(BUILD_BODHI, false)\nfi dnl end NO_BODHI\n\n# Initialize the test suite.\nAC_CONFIG_TESTDIR(tests)\nAC_CONFIG_FILES([tests/Makefile tests/atlocal])\nAM_MISSING_PROG([AUTOM4TE], [autom4te])\n# Needed by tests/atlocal.in.\nAC_SUBST([O0CFLAGS], [`echo $CFLAGS   | sed 's/-O[[0-9]] *//' | sed 's/-Werror//'`])\n\nAC_CONFIG_HEADERS([config.h])\n\nAC_CHECK_PROGS([VALGRIND], [valgrind])\n\nAC_CONFIG_FILES([\n\tMakefile\n\tabrt.pc\n\tapidoc/Makefile\n\tapidoc/Doxyfile\n\tapidoc/html/Makefile\n\tdoc/Makefile\n\tdoc/problems-service/Makefile\n\tdoc/dbus-configuration/Makefile\n\tsrc/include/Makefile\n\tsrc/lib/Makefile\n\tsrc/plugins/Makefile\n\tsrc/Makefile\n\tsrc/daemon/Makefile\n\tsrc/daemon/abrt-handle-upload\n\tsrc/hooks/Makefile\n\tsrc/applet/Makefile\n\tsrc/cli/Makefile\n\tsrc/configuration-gui/Makefile\n\tsrc/configuration-gui/abrt_gui.pc\n\tsrc/dbus/Makefile\n\tsrc/plugins/abrt-action-install-debuginfo\n\tsrc/plugins/abrt-action-analyze-vmcore\n\tsrc/plugins/abrt-action-check-oops-for-hw-error\n\tsrc/python-problem/Makefile\n\tsrc/python-problem/doc/Makefile\n\tsrc/python-problem/tests/Makefile\n\tsrc/python-problem/problem/Makefile\n\tsrc/python-problem/examples/Makefile\n\tpo/Makefile.in\n\ticons/Makefile\n])\n\nAC_OUTPUT\n", "# Enable this if you want abrtd to auto-unpack crashdump tarballs which appear\n# in this directory (for example, uploaded via ftp, scp etc).\n# Note: you must ensure that whatever directory you specify here exists\n# and is writable for abrtd. abrtd will not create it automatically.\n#\n#WatchCrashdumpArchiveDir = /var/spool/abrt-upload\n\n# Max size for crash storage [MiB] or 0 for unlimited\n#\nMaxCrashReportsSize = 1000\n\n# Specify where you want to store coredumps and all files which are needed for\n# reporting. (default:/var/tmp/abrt)\n#\n# Changing dump location could cause problems with SELinux. See man abrt_selinux(8).\n#\n#DumpLocation = /var/tmp/abrt\n\n# If you want to automatically clean the upload directory you have to tweak the\n# selinux policy.\n#\nDeleteUploaded = no\n\n# A name of event which is run automatically after problem's detection. The\n# event should perform some fast analysis and exit with 70 if the\n# problem is known.\n#\n# In order to run this event automatically after detection, the\n# AutoreportingEnabled option must be configured to 'yes'\n#\n# Default value: report_uReport\n#\nAutoreportingEvent = report_uReport\n\n# Enables automatic running of the event configured in AutoreportingEvent option.\n#\nAutoreportingEnabled = no\n\n# Enables shortened GUI reporting where the reporting is interrupted after\n# AutoreportingEvent is done.\n#\n# Default value: Yes but only if application is running in GNOME desktop\n#                session; otherwise No.\n#\n# ShortenedReporting = yes\n\n# Disable this if you want to regular users to own the problem data colleted by\n# abrt.\n#\nPrivateReports = yes\n"], "fixing_code": ["# copy-pasted from libreport\n# ABRT_PARSE_WITH(PACKAGE)\n# -----------------------\n# For use in AC_ARG_WITH action-if-found, for packages default ON.\n# * Set NO_PACKAGE=YesPlease for --without-PACKAGE\n# * Unset NO_PACKAGE for --with-PACKAGE without ARG\nAC_DEFUN([ABRT_PARSE_WITH],\n    [m4_pushdef([ABRT_UC_PACKAGE], m4_toupper([$1]))dnl\n    if test \"$withval\" = \"no\"; then\n        NO_[]ABRT_UC_PACKAGE=YesPlease\n    elif test \"$withval\" = \"yes\"; then\n        NO_[]ABRT_UC_PACKAGE=\n    else\n        NO_[]ABRT_UC_PACKAGE=\n    fi\n    m4_popdef([ABRT_UC_PACKAGE])])\n\nAC_INIT([abrt],\n\tm4_esyscmd([cat ./abrt-version]),\n\t[crash-catcher@fedorahosted.org])\n\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([-Wall foreign tar-ustar])\n# Support silent build rules. Disable by either passing --disable-silent-rules\n# to ./configure or passing V=1 to make\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])\n# The 'yes' argument is undocumented but it is common knowledge that it works.\nAM_SILENT_RULES([yes])\n\n\nAC_DISABLE_STATIC\nAC_PROG_LIBTOOL\nAC_PROG_CC\nAC_PROG_LN_S\n\nAC_SYS_LARGEFILE\nCFLAGS=\"$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE \\\n          -D_FILE_OFFSET_BITS=64 -fno-strict-aliasing -std=gnu99 -Wall -Wwrite-strings\"\n\nAC_ARG_ENABLE(debug,\n              [AC_HELP_STRING([--enable-debug],\n                             [Enable debug information])],\n              [CFLAGS=\"$CFLAGS -DDEBUG -ggdb -g -O0\"])\n\ndnl ****** INTERNATIONALIZATION **********************\nGETTEXT_PACKAGE=abrt\nAC_SUBST(GETTEXT_PACKAGE)\nAC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, \"$GETTEXT_PACKAGE\", [Package name for gettext])\n\nAM_GNU_GETTEXT([external])\nAM_GNU_GETTEXT_VERSION([0.17])\n\nIT_PROG_INTLTOOL([0.35.0])\n\ndnl ****** END ****************************************\n\nAM_PATH_PYTHON\nif test -z \"$PYTHON\"; then\n    echo \"*** Essential program python not found\" 1>&2\n    exit 1\nfi\n\nAC_PATH_PROG([ASCIIDOC], [asciidoc], [no])\n[if test \"$ASCIIDOC\" = \"no\"]\n[then]\n    [echo \"The asciidoc program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_PATH_PROG([XMLTO], [xmlto], [no])\n[if test \"$XMLTO\" = \"no\"]\n[then]\n    [echo \"The xmlto program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_PATH_PROG([PYTHON_CONFIG], [python-config], [no])\n[if test \"$PYTHON_CONFIG\" = \"no\"]\n[then]\n    [echo \"The python-config program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build libreport.\"]\n    [exit 1]\n[fi]\n\nPYTHON_CFLAGS=`python-config --cflags 2> /dev/null`\nPYTHON_LIBS=`python-config --libs 2> /dev/null`\nAC_SUBST(PYTHON_CFLAGS)\nAC_SUBST(PYTHON_LIBS)\n\nPKG_CHECK_MODULES([XICE], [ice])\nPKG_CHECK_MODULES([XSMP], [sm])\nPKG_CHECK_MODULES([GTK], [gtk+-3.0])\nPKG_CHECK_MODULES([GLIB], [glib-2.0 >= 2.21])\nPKG_CHECK_MODULES([DBUS], [dbus-1])\nPKG_CHECK_MODULES([LIBXML], [libxml-2.0])\nPKG_CHECK_MODULES([RPM], [rpm])\nPKG_CHECK_MODULES([LIBNOTIFY], [libnotify])\nPKG_CHECK_MODULES([NSS], [nss])\nPKG_CHECK_MODULES([LIBREPORT], [libreport])\nPKG_CHECK_MODULES([LIBREPORT_GTK], [libreport-gtk])\nPKG_CHECK_MODULES([POLKIT], [polkit-gobject-1])\nPKG_CHECK_MODULES([GIO], [gio-2.0])\nPKG_CHECK_MODULES([SATYR], [satyr])\nPKG_CHECK_MODULES([LIBSELINUX], [libselinux])\n\nPKG_PROG_PKG_CONFIG\nAC_ARG_WITH([systemdsystemunitdir],\n        AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files]),\n        [], [with_systemdsystemunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)])\nAC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])\nAM_CONDITIONAL(HAVE_SYSTEMD, [test -n \"$with_systemdsystemunitdir\"])\n\nAC_ARG_WITH([dbusinterfacedir],\n        AS_HELP_STRING([--with-dbusinterfacedir=DIR], [Directory for dbus interface files]),\n        [], [with_dbusinterfacedir=${datadir}/dbus-1/interfaces])\nAC_SUBST([dbusinterfacedir], [$with_dbusinterfacedir])\n\nAC_ARG_WITH(largedatatmpdir,\n            [AS_HELP_STRING([--with-largedatatmpdir=DIR],\n                           [Directory where potentially large data are created (default: /var/tmp)])],\n            [], [with_largedatatmpdir=\"/var/tmp\"])\nAC_SUBST([LARGE_DATA_TMP_DIR], [$with_largedatatmpdir])\n\nAC_CHECK_HEADER([sys/inotify.h], [],\n   [AC_MSG_ERROR([sys/inotify.h is needed to build abrt])])\n\nAC_CHECK_HEADERS([locale.h])\n\nCONF_DIR='${sysconfdir}/${PACKAGE_NAME}'\nDEFAULT_CONF_DIR='${datadir}/${PACKAGE_NAME}/conf.d'\nVAR_RUN='${localstatedir}/run'\nPLUGINS_CONF_DIR='${sysconfdir}/${PACKAGE_NAME}/plugins'\nDEFAULT_PLUGINS_CONF_DIR='${datadir}/${PACKAGE_NAME}/conf.d/plugins'\nEVENTS_DIR='${datadir}/libreport/events'\nEVENTS_CONF_DIR='${sysconfdir}/libreport/events.d'\nWORKFLOWS_DIR='${datadir}/libreport/workflows'\nENABLE_SOCKET_OR_DBUS='-DENABLE_DBUS=1'\nDEFAULT_DUMP_DIR_MODE=$($PKG_CONFIG --variable=dd_mode libreport)\nLIBREPORT_PLUGINS_CONF_DIR=$($PKG_CONFIG --variable=plugins_conf_dir libreport)\nPROBLEMS_CONFIG_INTERFACES_DIR=${dbusinterfacedir}\n\nAC_ARG_WITH([defaultdumplocation],\n            AS_HELP_STRING([--with-defaultdumplocation=DIR],\n                           [Default dump location ('LOCALSTATEDIR/spool/abrt')]),\n            [], [with_defaultdumplocation=${localstatedir}/spool/abrt])\nAC_SUBST([DEFAULT_DUMP_LOCATION], [$with_defaultdumplocation])\n\nAC_ARG_WITH(augeaslenslibdir,\n                    [AS_HELP_STRING([--with-augeaslenslibdir=DIR],\n                                                   [Directory for librepor lens (default: /usr/share/augeas/lenses)])],\n                                [], [with_augeaslenslibdir=\"/usr/share/augeas/lenses\"])\nAC_SUBST([AUGEAS_LENS_LIB_DIR], [$with_augeaslenslibdir])\n\nAC_PATH_PROG(AUGPARSE, augparse, no)\n[if test \"$ARGPARSE\" = \"no\"]\n[then]\n    [echo \"The argparse program was not found in the search path. Please ensure\"]\n    [echo \"that it is installed and its directory is included in the search path.\"]\n    [echo \"Then run configure again before attempting to build ABRT.\"]\n    [exit 1]\n[fi]\n\nAC_ARG_ENABLE(doxygen-docs,\n    AS_HELP_STRING([--enable-doxygen-docs],\n\t[build DOXYGEN documentation (requires Doxygen)]),\n    [enable_doxygen_docs=$enableval],\n    [enable_doxygen_docs=no]\n)\n\n# Doxygen Documentation\n\nAC_PATH_PROG(DOXYGEN, doxygen, no)\n\nAC_MSG_CHECKING([whether to build Doxygen documentation])\n\nif test \"$DOXYGEN\" = \"no\" ; then\n    have_doxygen=no\nelse\n    have_doxygen=yes\nfi\n\nif test \"$enable_doxygen_docs\" = \"yes\" ; then\n    if test \"$have_doxygen\" = \"no\"; then\n        AC_MSG_ERROR([Building Doxygen docs explicitly required, but Doxygen not found])\n    fi\n    AC_MSG_RESULT(yes)\nelse\n    AC_MSG_RESULT(no)\nfi\n\nAM_CONDITIONAL(DBUS_DOXYGEN_DOCS_ENABLED, test \"$enable_doxygen_docs\" = \"yes\")\n\n\n# Autoreporting advertisement\n\nAC_ARG_ENABLE(suggest-autoreporting,\n    AS_HELP_STRING([--enable-suggest-autoreporting],\n    [print messages encouraging users to enable autoreporting]),\n    [enable_suggest_autoreporting=$enableval],\n    [enable_suggest_autoreporting=no]\n)\n\nAM_CONDITIONAL(SUGGEST_AUTOREPORTING, test \"$enable_suggest_autoreporting\" = \"yes\")\n\n# Make satyr use GDB or elfutils/libunwind for unwinding?\n\nAC_ARG_ENABLE([native-unwinder],\n    AS_HELP_STRING([--enable-native-unwinder],\n        [use native unwinder (libunwind or elfutils) instead of GDB (default is no)]),\n    [], [enable_native_unwinder=no])\n\n[if test \"$enable_native_unwinder\" = \"yes\"]\n[then]\n    AC_DEFINE([ENABLE_NATIVE_UNWINDER], [1], [Use elfutils/libunwind for unwinding instead of GDB.])\n[fi]\n\n\nAC_SUBST(CONF_DIR)\nAC_SUBST(DEFAULT_CONF_DIR)\nAC_SUBST(VAR_RUN)\nAC_SUBST(PLUGINS_CONF_DIR)\nAC_SUBST(DEFAULT_PLUGINS_CONF_DIR)\nAC_SUBST(EVENTS_CONF_DIR)\nAC_SUBST(WORKFLOWS_DIR)\nAC_SUBST(EVENTS_DIR)\nAC_SUBST(DEFAULT_DUMP_LOCATION)\nAC_SUBST(DEFAULT_DUMP_DIR_MODE)\nAC_SUBST(LIBREPORT_PLUGINS_CONF_DIR)\nAC_SUBST(PROBLEMS_CONFIG_INTERFACES_DIR)\n\nAC_ARG_WITH(bodhi,\nAS_HELP_STRING([--with-bodhi],[use Bodhi plugin (default is YES)]),\nABRT_PARSE_WITH([bodhi]))\n\nif test -z \"$NO_BODHI\"\nthen\nPKG_CHECK_MODULES([JSON_C], [json-c])\nPKG_CHECK_MODULES([LIBREPORT_WEB], [libreport-web])\nAM_CONDITIONAL(BUILD_BODHI, true)\nelse\nAM_CONDITIONAL(BUILD_BODHI, false)\nfi dnl end NO_BODHI\n\n# Initialize the test suite.\nAC_CONFIG_TESTDIR(tests)\nAC_CONFIG_FILES([tests/Makefile tests/atlocal])\nAM_MISSING_PROG([AUTOM4TE], [autom4te])\n# Needed by tests/atlocal.in.\nAC_SUBST([O0CFLAGS], [`echo $CFLAGS   | sed 's/-O[[0-9]] *//' | sed 's/-Werror//'`])\n\nAC_CONFIG_HEADERS([config.h])\n\nAC_CHECK_PROGS([VALGRIND], [valgrind])\n\nAC_CONFIG_FILES([\n\tMakefile\n\tabrt.pc\n\tapidoc/Makefile\n\tapidoc/Doxyfile\n\tapidoc/html/Makefile\n\tdoc/Makefile\n\tdoc/problems-service/Makefile\n\tdoc/dbus-configuration/Makefile\n\tsrc/include/Makefile\n\tsrc/lib/Makefile\n\tsrc/plugins/Makefile\n\tsrc/Makefile\n\tsrc/daemon/Makefile\n\tsrc/daemon/abrt-handle-upload\n\tsrc/hooks/Makefile\n\tsrc/applet/Makefile\n\tsrc/cli/Makefile\n\tsrc/configuration-gui/Makefile\n\tsrc/configuration-gui/abrt_gui.pc\n\tsrc/dbus/Makefile\n\tsrc/plugins/abrt-action-install-debuginfo\n\tsrc/plugins/abrt-action-analyze-vmcore\n\tsrc/plugins/abrt-action-check-oops-for-hw-error\n\tsrc/python-problem/Makefile\n\tsrc/python-problem/doc/Makefile\n\tsrc/python-problem/tests/Makefile\n\tsrc/python-problem/problem/Makefile\n\tsrc/python-problem/examples/Makefile\n\tpo/Makefile.in\n\ticons/Makefile\n])\n\nAC_OUTPUT\n", "# Enable this if you want abrtd to auto-unpack crashdump tarballs which appear\n# in this directory (for example, uploaded via ftp, scp etc).\n# Note: you must ensure that whatever directory you specify here exists\n# and is writable for abrtd. abrtd will not create it automatically.\n#\n#WatchCrashdumpArchiveDir = /var/spool/abrt-upload\n\n# Max size for crash storage [MiB] or 0 for unlimited\n#\nMaxCrashReportsSize = 1000\n\n# Specify where you want to store coredumps and all files which are needed for\n# reporting. (default:/var/spool/abrt)\n#\n# Changing dump location could cause problems with SELinux. See man abrt_selinux(8).\n#\n#DumpLocation = /var/spool/abrt\n\n# If you want to automatically clean the upload directory you have to tweak the\n# selinux policy.\n#\nDeleteUploaded = no\n\n# A name of event which is run automatically after problem's detection. The\n# event should perform some fast analysis and exit with 70 if the\n# problem is known.\n#\n# In order to run this event automatically after detection, the\n# AutoreportingEnabled option must be configured to 'yes'\n#\n# Default value: report_uReport\n#\nAutoreportingEvent = report_uReport\n\n# Enables automatic running of the event configured in AutoreportingEvent option.\n#\nAutoreportingEnabled = no\n\n# Enables shortened GUI reporting where the reporting is interrupted after\n# AutoreportingEvent is done.\n#\n# Default value: Yes but only if application is running in GNOME desktop\n#                session; otherwise No.\n#\n# ShortenedReporting = yes\n\n# Disable this if you want to regular users to own the problem data colleted by\n# abrt.\n#\nPrivateReports = yes\n"], "filenames": ["configure.ac", "src/daemon/abrt.conf"], "buggy_code_start_loc": [149, 13], "buggy_code_end_loc": [151, 18], "fixing_code_start_loc": [149, 13], "fixing_code_end_loc": [151, 18], "type": "CWE-200", "message": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors.", "other": {"cve": {"id": "CVE-2015-1870", "sourceIdentifier": "secalert@redhat.com", "published": "2017-06-26T15:29:00.300", "lastModified": "2023-02-13T00:47:32.113", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The event scripts in Automatic Bug Reporting Tool (ABRT) uses world-readable permission on a copy of sosreport file in problem directories, which allows local users to obtain sensitive information from /var/log/messages via unspecified vectors."}, {"lang": "es", "value": "Los scripts de eventos en Automatic Bug Reporting Tool (ABRT) usan permisos de lectura en una copia del archivo sosreport en directorios problem\u00e1ticos, los cuales permiten a los usuarios locales obtener informaci\u00f3n sensible de /var/log/messages mediante vectores sin especificar."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:automatic_bug_reporting_tool:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.1.11", "matchCriteriaId": "98B35710-71C7-424B-949A-5656E3013EFE"}]}]}], "references": [{"url": "http://rhn.redhat.com/errata/RHSA-2015-1083.html", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2015-1210.html", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/75119", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1212868", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://github.com/abrt/abrt/commit/7d023c32a565e83306cddf34c894477b7aaf33d1", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/abrt/abrt/commit/8939398b82006ba1fec4ed491339fc075f43fc7c", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/abrt/libreport/commit/c962918bc70a61a8cc647898ee8b1ff1c14a87c5", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/abrt/abrt/commit/7d023c32a565e83306cddf34c894477b7aaf33d1"}}