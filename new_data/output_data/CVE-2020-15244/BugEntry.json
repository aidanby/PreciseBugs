{"buggy_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Catalog product attribute api\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Catalog_Model_Product_Attribute_Api extends Mage_Catalog_Model_Api_Resource\n{\n    /**\n     * Product entity type id\n     *\n     * @var int\n     */\n    protected $_entityTypeId;\n\n    /**\n     * Constructor. Initializes default values.\n     */\n    public function __construct()\n    {\n        $this->_storeIdSessionField = 'product_store_id';\n        $this->_ignoredAttributeCodes[] = 'type_id';\n        $this->_ignoredAttributeTypes[] = 'gallery';\n        $this->_ignoredAttributeTypes[] = 'media_image';\n        $this->_entityTypeId = Mage::getModel('eav/entity')->setType('catalog_product')->getTypeId();\n    }\n\n    /**\n     * Retrieve attributes from specified attribute set\n     *\n     * @param int $setId\n     * @return array\n     */\n    public function items($setId)\n    {\n        $attributes = Mage::getModel('catalog/product')->getResource()\n                ->loadAllAttributes()\n                ->getSortedAttributes($setId);\n        $result = array();\n\n        foreach ($attributes as $attribute) {\n            /* @var Mage_Catalog_Model_Resource_Eav_Attribute $attribute */\n            if ((!$attribute->getId() || $attribute->isInSet($setId))\n                    && $this->_isAllowedAttribute($attribute)) {\n                if (!$attribute->getId() || $attribute->isScopeGlobal()) {\n                    $scope = 'global';\n                } elseif ($attribute->isScopeWebsite()) {\n                    $scope = 'website';\n                } else {\n                    $scope = 'store';\n                }\n\n                $result[] = array(\n                    'attribute_id' => $attribute->getId(),\n                    'code' => $attribute->getAttributeCode(),\n                    'type' => $attribute->getFrontendInput(),\n                    'required' => $attribute->getIsRequired(),\n                    'scope' => $scope\n                );\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Retrieve attribute options\n     *\n     * @param int $attributeId\n     * @param string|int $store\n     * @return array\n     */\n    public function options($attributeId, $store = null)\n    {\n        $storeId = $this->_getStoreId($store);\n        $attribute = Mage::getModel('catalog/product')\n                ->setStoreId($storeId)\n                ->getResource()\n                ->getAttribute($attributeId);\n\n        /* @var Mage_Catalog_Model_Entity_Attribute $attribute */\n        if (!$attribute) {\n            $this->_fault('not_exists');\n        }\n        $options = array();\n        if ($attribute->usesSource()) {\n            foreach ($attribute->getSource()->getAllOptions() as $optionId => $optionValue) {\n                if (is_array($optionValue)) {\n                    $options[] = $optionValue;\n                } else {\n                    $options[] = array(\n                        'value' => $optionId,\n                        'label' => $optionValue\n                    );\n                }\n            }\n        }\n\n        return $options;\n    }\n\n    /**\n     * Retrieve list of possible attribute types\n     *\n     * @return array\n     */\n    public function types()\n    {\n        return Mage::getModel('catalog/product_attribute_source_inputtype')->toOptionArray();\n    }\n\n    /**\n     * Create new product attribute\n     *\n     * @param array $data input data\n     * @return integer\n     */\n    public function create($data)\n    {\n        /** @var Mage_Catalog_Model_Resource_Eav_Attribute $model */\n        $model = Mage::getModel('catalog/resource_eav_attribute');\n        /** @var Mage_Catalog_Helper_Product $helper */\n        $helper = Mage::helper('catalog/product');\n\n        if (empty($data['attribute_code']) || (isset($data['frontend_label']) && !is_array($data['frontend_label']))) {\n            $this->_fault('invalid_parameters');\n        }\n\n        //validate attribute_code\n        if (!preg_match('/^[a-z][a-z_0-9]{0,254}$/', $data['attribute_code'])) {\n            $this->_fault('invalid_code');\n        }\n\n        //validate frontend_input\n        $allowedTypes = array();\n        foreach ($this->types() as $type) {\n            $allowedTypes[] = $type['value'];\n        }\n        if (!in_array($data['frontend_input'], $allowedTypes)) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        $data['source_model'] = $helper->getAttributeSourceModelByInputType($data['frontend_input']);\n        $data['backend_model'] = $helper->getAttributeBackendModelByInputType($data['frontend_input']);\n        if (is_null($model->getIsUserDefined()) || $model->getIsUserDefined() != 0) {\n            $data['backend_type'] = $model->getBackendTypeByInput($data['frontend_input']);\n        }\n\n        $this->_prepareDataForSave($data);\n\n        $model->addData($data);\n        $model->setEntityTypeId($this->_entityTypeId);\n        $model->setIsUserDefined(1);\n\n        try {\n            $model->save();\n            // clear translation cache because attribute labels are stored in translation\n            Mage::app()->cleanCache(array(Mage_Core_Model_Translate::CACHE_TAG));\n        } catch (Exception $e) {\n            $this->_fault('unable_to_save', $e->getMessage());\n        }\n\n        return (int) $model->getId();\n    }\n\n    /**\n     * Update product attribute\n     *\n     * @param string|integer $attribute attribute code or ID\n     * @param array $data\n     * @return boolean\n     */\n    public function update($attribute, $data)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->getEntityTypeId() != $this->_entityTypeId) {\n            $this->_fault('can_not_edit');\n        }\n\n        $data['attribute_code'] = $model->getAttributeCode();\n        $data['is_user_defined'] = $model->getIsUserDefined();\n        $data['frontend_input'] = $model->getFrontendInput();\n\n        $this->_prepareDataForSave($data);\n\n        $model->addData($data);\n        try {\n            $model->save();\n            // clear translation cache because attribute labels are stored in translation\n            Mage::app()->cleanCache(array(Mage_Core_Model_Translate::CACHE_TAG));\n            return true;\n        } catch (Exception $e) {\n            $this->_fault('unable_to_save', $e->getMessage());\n        }\n    }\n\n    /**\n     * Remove attribute\n     *\n     * @param integer|string $attribute attribute ID or code\n     * @return boolean\n     */\n    public function remove($attribute)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->getEntityTypeId() != $this->_entityTypeId) {\n            $this->_fault('can_not_delete');\n        }\n\n        try {\n            $model->delete();\n            return true;\n        } catch (Exception $e) {\n            $this->_fault('can_not_delete', $e->getMessage());\n        }\n    }\n\n    /**\n     * Get full information about attribute with list of options\n     *\n     * @param integer|string $attribute attribute ID or code\n     * @return array\n     */\n    public function info($attribute)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->isScopeGlobal()) {\n            $scope = 'global';\n        } elseif ($model->isScopeWebsite()) {\n            $scope = 'website';\n        } else {\n            $scope = 'store';\n        }\n\n        $frontendLabels = array(\n            array(\n                'store_id' => 0,\n                'label' => $model->getFrontendLabel()\n            )\n        );\n        foreach ($model->getStoreLabels() as $store_id => $label) {\n            $frontendLabels[] = array(\n                'store_id' => $store_id,\n                'label' => $label\n            );\n        }\n\n        $result = array(\n            'attribute_id' => $model->getId(),\n            'attribute_code' => $model->getAttributeCode(),\n            'frontend_input' => $model->getFrontendInput(),\n            'default_value' => $model->getDefaultValue(),\n            'is_unique' => $model->getIsUnique(),\n            'is_required' => $model->getIsRequired(),\n            'apply_to' => $model->getApplyTo(),\n            'is_configurable' => $model->getIsConfigurable(),\n            'is_searchable' => $model->getIsSearchable(),\n            'is_visible_in_advanced_search' => $model->getIsVisibleInAdvancedSearch(),\n            'is_comparable' => $model->getIsComparable(),\n            'is_used_for_promo_rules' => $model->getIsUsedForPromoRules(),\n            'is_visible_on_front' => $model->getIsVisibleOnFront(),\n            'used_in_product_listing' => $model->getUsedInProductListing(),\n            'frontend_label' => $frontendLabels\n        );\n        if ($model->getFrontendInput() != 'price') {\n            $result['scope'] = $scope;\n        }\n\n        // set additional fields to different types\n        switch ($model->getFrontendInput()) {\n            case 'text':\n                    $result['additional_fields'] = array(\n                        'frontend_class' => $model->getFrontendClass(),\n                        'is_html_allowed_on_front' => $model->getIsHtmlAllowedOnFront(),\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            case 'textarea':\n                    $result['additional_fields'] = array(\n                        'is_wysiwyg_enabled' => $model->getIsWysiwygEnabled(),\n                        'is_html_allowed_on_front' => $model->getIsHtmlAllowedOnFront(),\n                    );\n                break;\n            case 'date':\n            case 'boolean':\n                    $result['additional_fields'] = array(\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            case 'multiselect':\n                    $result['additional_fields'] = array(\n                        'is_filterable' => $model->getIsFilterable(),\n                        'is_filterable_in_search' => $model->getIsFilterableInSearch(),\n                        'position' => $model->getPosition()\n                    );\n                break;\n            case 'select':\n            case 'price':\n                    $result['additional_fields'] = array(\n                        'is_filterable' => $model->getIsFilterable(),\n                        'is_filterable_in_search' => $model->getIsFilterableInSearch(),\n                        'position' => $model->getPosition(),\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            default:\n                    $result['additional_fields'] = array();\n                break;\n        }\n\n        // set options\n        $options = $this->options($model->getId());\n        // remove empty first element\n        if ($model->getFrontendInput() != 'boolean') {\n            array_shift($options);\n        }\n\n        if (count($options) > 0) {\n            $result['options'] = $options;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Add option to select or multiselect attribute\n     *\n     * @param  integer|string $attribute attribute ID or code\n     * @param  array $data\n     * @return bool\n     */\n    public function addOption($attribute, $data)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if (!$model->usesSource()) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        /** @var Mage_Catalog_Helper_Data $helperCatalog */\n        $helperCatalog = Mage::helper('catalog');\n\n        $optionLabels = array();\n        foreach ($data['label'] as $label) {\n            $storeId = $label['store_id'];\n            $labelText = $helperCatalog->stripTags($label['value']);\n            if (is_array($storeId)) {\n                foreach ($storeId as $multiStoreId) {\n                    $optionLabels[$multiStoreId] = $labelText;\n                }\n            } else {\n                $optionLabels[$storeId] = $labelText;\n            }\n        }\n        // data in the following format is accepted by the model\n        // it simulates parameters of the request made to\n        // Mage_Adminhtml_Catalog_Product_AttributeController::saveAction()\n        $modelData = array(\n            'option' => array(\n                'value' => array(\n                    'option_1' => $optionLabels\n                ),\n                'order' => array(\n                    'option_1' => (int) $data['order']\n                )\n            )\n        );\n        if ($data['is_default']) {\n            $modelData['default'][] = 'option_1';\n        }\n\n        $model->addData($modelData);\n        try {\n            $model->save();\n        } catch (Exception $e) {\n            $this->_fault('unable_to_add_option', $e->getMessage());\n        }\n\n        return true;\n    }\n\n    /**\n     * Remove option from select or multiselect attribute\n     *\n     * @param  integer|string $attribute attribute ID or code\n     * @param  integer $optionId option to remove ID\n     * @return bool\n     */\n    public function removeOption($attribute, $optionId)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if (!$model->usesSource()) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        // data in the following format is accepted by the model\n        // it simulates parameters of the request made to\n        // Mage_Adminhtml_Catalog_Product_AttributeController::saveAction()\n        $modelData = array(\n            'option' => array(\n                'value' => array(\n                    $optionId => array()\n                ),\n                'delete' => array(\n                    $optionId => '1'\n                )\n            )\n        );\n        $model->addData($modelData);\n        try {\n            $model->save();\n        } catch (Exception $e) {\n            $this->_fault('unable_to_remove_option', $e->getMessage());\n        }\n\n        return true;\n    }\n\n    /**\n     * Prepare request input data for saving\n     *\n     * @param array $data input data\n     * @return void\n     */\n    protected function _prepareDataForSave(&$data)\n    {\n        /** @var Mage_Catalog_Helper_Data $helperCatalog */\n        $helperCatalog = Mage::helper('catalog');\n\n        if ($data['scope'] == 'global') {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_GLOBAL;\n        } elseif ($data['scope'] == 'website') {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_WEBSITE;\n        } else {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_STORE;\n        }\n        if (!isset($data['is_configurable'])) {\n            $data['is_configurable'] = 0;\n        }\n        if (!isset($data['is_filterable'])) {\n            $data['is_filterable'] = 0;\n        }\n        if (!isset($data['is_filterable_in_search'])) {\n            $data['is_filterable_in_search'] = 0;\n        }\n        if (!isset($data['apply_to'])) {\n            $data['apply_to'] = array();\n        }\n        // set frontend labels array with store_id as keys\n        if (isset($data['frontend_label']) && is_array($data['frontend_label'])) {\n            $labels = array();\n            foreach ($data['frontend_label'] as $label) {\n                $storeId = $label['store_id'];\n                $labelText = $helperCatalog->stripTags($label['label']);\n                $labels[$storeId] = $labelText;\n            }\n            $data['frontend_label'] = $labels;\n        }\n        // set additional fields\n        if (isset($data['additional_fields']) && is_array($data['additional_fields'])) {\n            $data = array_merge($data, $data['additional_fields']);\n            unset($data['additional_fields']);\n        }\n        //default value\n        if (!empty($data['default_value'])) {\n            $data['default_value'] = $helperCatalog->stripTags($data['default_value']);\n        }\n    }\n\n    /**\n     * Load model by attribute ID or code\n     *\n     * @param integer|string $attribute\n     * @return Mage_Catalog_Model_Resource_Eav_Attribute\n     */\n    protected function _getAttribute($attribute)\n    {\n        $model = Mage::getResourceModel('catalog/eav_attribute')\n            ->setEntityTypeId($this->_entityTypeId);\n\n        if (is_numeric($attribute)) {\n            $model->load(intval($attribute));\n        } else {\n            $model->load($attribute, 'attribute_code');\n        }\n\n        if (!$model->getId()) {\n            $this->_fault('not_exists');\n        }\n\n        return $model;\n    }\n} // Class Mage_Catalog_Model_Product_Attribute_Api End\n", "<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n\n/**\n * Product collection\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @author      Magento Core Team <core@magentocommerce.com>\n *\n * @method Mage_Catalog_Model_Product getItemById(int|string $value)\n * @method Mage_Catalog_Model_Product[] getItems()\n */\nclass Mage_Catalog_Model_Resource_Product_Collection extends Mage_Catalog_Model_Resource_Collection_Abstract\n{\n    /**\n     * Alias for index table\n     */\n    const INDEX_TABLE_ALIAS = 'price_index';\n\n    /**\n     * Alias for main table\n     */\n    const MAIN_TABLE_ALIAS = 'e';\n\n    /**\n     * Catalog Product Flat is enabled cache per store\n     *\n     * @var array\n     */\n    protected $_flatEnabled                  = array();\n\n    /**\n     * Product websites table name\n     *\n     * @var string\n     */\n    protected $_productWebsiteTable;\n\n    /**\n     * Product categories table name\n     *\n     * @var string\n     */\n    protected $_productCategoryTable;\n\n    /**\n     * Is add URL rewrites to collection flag\n     *\n     * @var bool\n     */\n    protected $_addUrlRewrite                = false;\n\n    /**\n     * Add URL rewrite for category\n     *\n     * @var int\n     */\n    protected $_urlRewriteCategory           = '';\n\n    /**\n     * Is add minimal price to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addMinimalPrice              = false;\n\n    /**\n     * Is add final price to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addFinalPrice                = false;\n\n    /**\n     * Cache for all ids\n     *\n     * @var array\n     */\n    protected $_allIdsCache                  = null;\n\n    /**\n     * Is add tax percents to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addTaxPercents               = false;\n\n    /**\n     * Product limitation filters\n     * Allowed filters\n     *  store_id                int;\n     *  category_id             int;\n     *  category_is_anchor      int;\n     *  visibility              array|int;\n     *  website_ids             array|int;\n     *  store_table             string;\n     *  use_price_index         bool;   join price index table flag\n     *  customer_group_id       int;    required for price; customer group limitation for price\n     *  website_id              int;    required for price; website limitation for price\n     *\n     * @var array\n     */\n    protected $_productLimitationFilters     = array();\n\n    /**\n     * Category product count select\n     *\n     * @var Zend_Db_Select\n     */\n    protected $_productCountSelect           = null;\n\n    /**\n     * Enter description here ...\n     *\n     * @var bool\n     */\n    protected $_isWebsiteFilter              = false;\n\n    /**\n     * Additional field filters, applied in _productLimitationJoinPrice()\n     *\n     * @var array\n     */\n    protected $_priceDataFieldFilters = array();\n\n    /**\n     * Map of price fields\n     *\n     * @var array\n     */\n    protected $_map = array('fields' => array(\n        'price'         => 'price_index.price',\n        'final_price'   => 'price_index.final_price',\n        'min_price'     => 'price_index.min_price',\n        'max_price'     => 'price_index.max_price',\n        'tier_price'    => 'price_index.tier_price',\n        'special_price' => 'price_index.special_price',\n    ));\n\n    /**\n     * Price expression sql\n     *\n     * @var string|null\n     */\n    protected $_priceExpression;\n\n    /**\n     * Additional price expression sql part\n     *\n     * @var string|null\n     */\n    protected $_additionalPriceExpression;\n\n    /**\n     * Max prise (statistics data)\n     *\n     * @var float\n     */\n    protected $_maxPrice;\n\n    /**\n     * Min prise (statistics data)\n     *\n     * @var float\n     */\n    protected $_minPrice;\n\n    /**\n     * Prise standard deviation (statistics data)\n     *\n     * @var float\n     */\n    protected $_priceStandardDeviation;\n\n    /**\n     * Prises count (statistics data)\n     *\n     * @var int\n     */\n    protected $_pricesCount = null;\n\n    /**\n     * Cloned Select after dispatching 'catalog_prepare_price_select' event\n     *\n     * @var Varien_Db_Select\n     */\n    protected $_catalogPreparePriceSelect = null;\n\n    /**\n     * Catalog factory instance\n     *\n     * @var Mage_Catalog_Model_Factory\n     */\n    protected $_factory;\n\n    /**\n     * Initialize factory\n     *\n     * @param Mage_Core_Model_Resource_Abstract $resource\n     * @param array $args\n     */\n    public function __construct($resource = null, array $args = array())\n    {\n        parent::__construct($resource);\n        $this->_factory = !empty($args['factory']) ? $args['factory'] : Mage::getSingleton('catalog/factory');\n    }\n\n    /**\n     * Get cloned Select after dispatching 'catalog_prepare_price_select' event\n     *\n     * @return Varien_Db_Select\n     */\n    public function getCatalogPreparedSelect()\n    {\n        return $this->_catalogPreparePriceSelect;\n    }\n\n    /**\n     * Prepare additional price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return $this\n     */\n    protected function _preparePriceExpressionParameters($select)\n    {\n        // prepare response object for event\n        $response = new Varien_Object();\n        $response->setAdditionalCalculations(array());\n        $tableAliases = array_keys($select->getPart(Zend_Db_Select::FROM));\n        if (in_array(self::INDEX_TABLE_ALIAS, $tableAliases)) {\n            $table = self::INDEX_TABLE_ALIAS;\n        } else {\n            $table = reset($tableAliases);\n        }\n\n        // prepare event arguments\n        $eventArgs = array(\n            'select'          => $select,\n            'table'           => $table,\n            'store_id'        => $this->getStoreId(),\n            'response_object' => $response\n        );\n\n        Mage::dispatchEvent('catalog_prepare_price_select', $eventArgs);\n\n        $additional   = join('', $response->getAdditionalCalculations());\n        $this->_priceExpression = $table . '.min_price';\n        $this->_additionalPriceExpression = $additional;\n        $this->_catalogPreparePriceSelect = clone $select;\n\n        return $this;\n    }\n\n    /**\n     * Get price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return string\n     */\n    public function getPriceExpression($select)\n    {\n        if (is_null($this->_priceExpression)) {\n            $this->_preparePriceExpressionParameters($select);\n        }\n        return $this->_priceExpression;\n    }\n\n    /**\n     * Get additional price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return string\n     */\n    public function getAdditionalPriceExpression($select)\n    {\n        if (is_null($this->_additionalPriceExpression)) {\n            $this->_preparePriceExpressionParameters($select);\n        }\n        return $this->_additionalPriceExpression;\n    }\n\n    /**\n     * Get currency rate\n     *\n     * @return float\n     */\n    public function getCurrencyRate()\n    {\n        return Mage::app()->getStore($this->getStoreId())->getCurrentCurrencyRate();\n    }\n\n    /**\n     * Retrieve Catalog Product Flat Helper object\n     *\n     * @return Mage_Catalog_Helper_Product_Flat\n     */\n    public function getFlatHelper()\n    {\n        return Mage::helper('catalog/product_flat');\n    }\n\n    /**\n     * Retrieve is flat enabled flag\n     * Return always false if magento run admin\n     *\n     * @return bool\n     */\n    public function isEnabledFlat()\n    {\n        // Flat Data can be used only on frontend\n        if (Mage::app()->getStore()->isAdmin() || $this->getFlatHelper()->isFlatCollectionDisabled()) {\n            return false;\n        }\n        $storeId = $this->getStoreId();\n        if (!isset($this->_flatEnabled[$storeId])) {\n            $flatHelper = $this->getFlatHelper();\n            $this->_flatEnabled[$storeId] = $flatHelper->isAvailable() && $flatHelper->isBuilt($storeId);\n        }\n        return $this->_flatEnabled[$storeId];\n    }\n\n    /**\n     * Initialize resources\n     *\n     */\n    protected function _construct()\n    {\n        if ($this->isEnabledFlat()) {\n            $this->_init('catalog/product', 'catalog/product_flat');\n        } else {\n            $this->_init('catalog/product');\n        }\n        $this->_initTables();\n    }\n\n    /**\n     * Define product website and category product tables\n     *\n     */\n    protected function _initTables()\n    {\n        $this->_productWebsiteTable = $this->getResource()->getTable('catalog/product_website');\n        $this->_productCategoryTable= $this->getResource()->getTable('catalog/category_product');\n    }\n\n    /**\n     * Standard resource collection initalization\n     *\n     * @inheritDoc\n     */\n    protected function _init($model, $entityModel = null)\n    {\n        if ($this->isEnabledFlat()) {\n            $entityModel = 'catalog/product_flat';\n        }\n\n        return parent::_init($model, $entityModel);\n    }\n\n    /**\n     * Prepare static entity fields\n     *\n     * @inheritDoc\n     */\n    protected function _prepareStaticFields()\n    {\n        if ($this->isEnabledFlat()) {\n            return $this;\n        }\n        return parent::_prepareStaticFields();\n    }\n\n    /**\n     * Retrieve collection empty item\n     * Redeclared for specifying id field name without getting resource model inside model\n     *\n     * @return Varien_Object\n     */\n    public function getNewEmptyItem()\n    {\n        $object = parent::getNewEmptyItem();\n        if ($this->isEnabledFlat()) {\n            $object->setIdFieldName($this->getEntity()->getIdFieldName());\n        }\n        return $object;\n    }\n\n    /**\n     * Set entity to use for attributes\n     *\n     * @inheritDoc\n     */\n    public function setEntity($entity)\n    {\n        if ($this->isEnabledFlat() && ($entity instanceof Mage_Core_Model_Resource_Db_Abstract)) {\n            $this->_entity = $entity;\n            return $this;\n        }\n        return parent::setEntity($entity);\n    }\n\n    /**\n     * Set Store scope for collection\n     *\n     * @param mixed $store\n     * @return $this\n     */\n    public function setStore($store)\n    {\n        parent::setStore($store);\n        if ($this->isEnabledFlat()) {\n            $this->getEntity()->setStoreId($this->getStoreId());\n        }\n        return $this;\n    }\n\n    /**\n     * Initialize collection select\n     * Redeclared for remove entity_type_id condition\n     * in catalog_product_entity we store just products\n     *\n     * @return $this\n     */\n    protected function _initSelect()\n    {\n        if ($this->isEnabledFlat()) {\n            $this->getSelect()\n                ->from(array(self::MAIN_TABLE_ALIAS => $this->getEntity()->getFlatTableName()), null)\n                ->where('e.status = ?', new Zend_Db_Expr(Mage_Catalog_Model_Product_Status::STATUS_ENABLED));\n            $this->addAttributeToSelect(array('entity_id', 'type_id', 'attribute_set_id'));\n            if ($this->getFlatHelper()->isAddChildData()) {\n                $this->getSelect()\n                    ->where('e.is_child = ?', 0);\n                $this->addAttributeToSelect(array('child_id', 'is_child'));\n            }\n        } else {\n            $this->getSelect()->from(array(self::MAIN_TABLE_ALIAS => $this->getEntity()->getEntityTable()));\n        }\n        return $this;\n    }\n\n    /**\n     * Load attributes into loaded entities\n     *\n     * @inheritDoc\n     */\n    public function _loadAttributes($printQuery = false, $logQuery = false)\n    {\n        if ($this->isEnabledFlat()) {\n            return $this;\n        }\n        return parent::_loadAttributes($printQuery, $logQuery);\n    }\n\n    /**\n     * Add attribute to entities in collection\n     * If $attribute=='*' select all attributes\n     *\n     * @inheritDoc\n     */\n    public function addAttributeToSelect($attribute, $joinType = false)\n    {\n        if ($this->isEnabledFlat()) {\n            if (!is_array($attribute)) {\n                $attribute = array($attribute);\n            }\n            foreach ($attribute as $attributeCode) {\n                if ($attributeCode == '*') {\n                    foreach ($this->getEntity()->getAllTableColumns() as $column) {\n                        $this->getSelect()->columns('e.' . $column);\n                        $this->_selectAttributes[$column] = $column;\n                        $this->_staticFields[$column]     = $column;\n                    }\n                } else {\n                    $columns = $this->getEntity()->getAttributeForSelect($attributeCode);\n                    if ($columns) {\n                        foreach ($columns as $alias => $column) {\n                            $this->getSelect()->columns(array($alias => 'e.' . $column));\n                            $this->_selectAttributes[$column] = $column;\n                            $this->_staticFields[$column]     = $column;\n                        }\n                    }\n                }\n            }\n            return $this;\n        }\n        return parent::addAttributeToSelect($attribute, $joinType);\n    }\n\n    /**\n     * Add tax class id attribute to select and join price rules data if needed\n     *\n     * @inheritDoc\n     */\n    protected function _beforeLoad()\n    {\n        Mage::dispatchEvent('catalog_product_collection_load_before', array('collection' => $this));\n\n        return parent::_beforeLoad();\n    }\n\n    /**\n     * Processing collection items after loading\n     * Adding url rewrites, minimal prices, final prices, tax percents\n     *\n     * @return $this\n     */\n    protected function _afterLoad()\n    {\n        if ($this->_addUrlRewrite) {\n            $this->_addUrlRewrite($this->_urlRewriteCategory);\n        }\n\n        if (count($this) > 0) {\n            Mage::dispatchEvent('catalog_product_collection_load_after', array('collection' => $this));\n        }\n\n        foreach ($this as $product) {\n            if ($product->isRecurring() && $profile = $product->getRecurringProfile()) {\n                $product->setRecurringProfile(unserialize($profile));\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Prepare Url Data object\n     *\n     * @return $this\n     * @deprecated after 1.7.0.2\n     */\n    protected function _prepareUrlDataObject()\n    {\n        $objects = array();\n        /** @var Mage_Catalog_Model_Product $item */\n        foreach ($this->_items as $item) {\n            if ($this->getFlag('do_not_use_category_id')) {\n                $item->setDoNotUseCategoryId(true);\n            }\n            if (!$item->isVisibleInSiteVisibility() && $item->getItemStoreId()) {\n                $objects[$item->getEntityId()] = $item->getItemStoreId();\n            }\n        }\n\n        if ($objects && $this->hasFlag('url_data_object')) {\n            $objects = Mage::getResourceSingleton('catalog/url')\n                ->getRewriteByProductStore($objects);\n            foreach ($this->_items as $item) {\n                if (isset($objects[$item->getEntityId()])) {\n                    $object = new Varien_Object($objects[$item->getEntityId()]);\n                    $item->setUrlDataObject($object);\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add collection filters by identifiers\n     *\n     * @param mixed $productId\n     * @param boolean $exclude\n     * @return $this\n     */\n    public function addIdFilter($productId, $exclude = false)\n    {\n        if (empty($productId)) {\n            $this->_setIsLoaded(true);\n            return $this;\n        }\n        if (is_array($productId)) {\n            if (!empty($productId)) {\n                if ($exclude) {\n                    $condition = array('nin' => $productId);\n                } else {\n                    $condition = array('in' => $productId);\n                }\n            } else {\n                $condition = '';\n            }\n        } else {\n            if ($exclude) {\n                $condition = array('neq' => $productId);\n            } else {\n                $condition = $productId;\n            }\n        }\n        $this->addFieldToFilter('entity_id', $condition);\n        return $this;\n    }\n\n    /**\n     * Adding product website names to result collection\n     * Add for each product websites information\n     *\n     * @return $this\n     */\n    public function addWebsiteNamesToResult()\n    {\n        $productWebsites = array();\n        foreach ($this as $product) {\n            $productWebsites[$product->getId()] = array();\n        }\n\n        if (!empty($productWebsites)) {\n            $select = $this->getConnection()->select()\n                ->from(array('product_website' => $this->_productWebsiteTable))\n                ->join(\n                    array('website' => $this->getResource()->getTable('core/website')),\n                    'website.website_id = product_website.website_id',\n                    array('name')\n                )\n                ->where('product_website.product_id IN (?)', array_keys($productWebsites))\n                ->where('website.website_id > ?', 0);\n\n            $data = $this->getConnection()->fetchAll($select);\n            foreach ($data as $row) {\n                $productWebsites[$row['product_id']][] = $row['website_id'];\n            }\n        }\n\n        foreach ($this as $product) {\n            if (isset($productWebsites[$product->getId()])) {\n                $product->setData('websites', $productWebsites[$product->getId()]);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Add store availability filter. Include availability product\n     * for store website\n     *\n     * @param mixed $store\n     * @return $this\n     */\n    public function addStoreFilter($store = null)\n    {\n        if ($store === null) {\n            $store = $this->getStoreId();\n        }\n        $store = Mage::app()->getStore($store);\n\n        if (!$store->isAdmin()) {\n            $this->_productLimitationFilters['store_id'] = $store->getId();\n            $this->_applyProductLimitations();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add website filter to collection\n     *\n     * @param array|string|int $websites\n     * @return $this\n     */\n    public function addWebsiteFilter($websites = null)\n    {\n        if (!is_array($websites)) {\n            $websites = array(Mage::app()->getWebsite($websites)->getId());\n        }\n\n        $this->_productLimitationFilters['website_ids'] = $websites;\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Get filters applied to collection\n     *\n     * @return array\n     */\n    public function getLimitationFilters()\n    {\n        return $this->_productLimitationFilters;\n    }\n\n    /**\n     * Specify category filter for product collection\n     *\n     * @param Mage_Catalog_Model_Category $category\n     * @return $this\n     */\n    public function addCategoryFilter(Mage_Catalog_Model_Category $category)\n    {\n        $this->_productLimitationFilters['category_id'] = $category->getId();\n        if ($category->getIsAnchor()) {\n            unset($this->_productLimitationFilters['category_is_anchor']);\n        } else {\n            $this->_productLimitationFilters['category_is_anchor'] = 1;\n        }\n\n        if ($this->getStoreId() == Mage_Catalog_Model_Abstract::DEFAULT_STORE_ID) {\n            $this->_applyZeroStoreProductLimitations();\n        } else {\n            $this->_applyProductLimitations();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join minimal price attribute to result\n     *\n     * @return $this\n     */\n    public function joinMinimalPrice()\n    {\n        $this->addAttributeToSelect('price')\n             ->addAttributeToSelect('minimal_price');\n        return $this;\n    }\n\n    /**\n     * Retrieve max value by attribute\n     *\n     * @param string $attribute\n     * @return mixed\n     */\n    public function getMaxAttributeValue($attribute)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_max_value';\n        $fieldAlias    = 'max_' . $attributeCode;\n        $condition  = 'e.entity_id = ' . $tableAlias . '.entity_id\n            AND '.$this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array($fieldAlias => new Zend_Db_Expr('MAX('.$tableAlias.'.value)'))\n        )\n            ->group('e.entity_type_id');\n\n        $data = $this->getConnection()->fetchRow($select);\n        if (isset($data[$fieldAlias])) {\n            return $data[$fieldAlias];\n        }\n\n        return null;\n    }\n\n    /**\n     * Retrieve ranging product count for arrtibute range\n     *\n     * @param string $attribute\n     * @param int $range\n     * @return array\n     */\n    public function getAttributeValueCountByRange($attribute, $range)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_range_count_value';\n\n        $condition  = 'e.entity_id = ' . $tableAlias . '.entity_id\n            AND ' . $this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->reset(Zend_Db_Select::GROUP);\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array(\n                    'count_' . $attributeCode => new Zend_Db_Expr('COUNT(DISTINCT e.entity_id)'),\n                    'range_' . $attributeCode => new Zend_Db_Expr(\n                        'CEIL((' . $tableAlias . '.value+0.01)/' . $range . ')'\n                    )\n                 )\n        )\n            ->group('range_' . $attributeCode);\n\n        $data   = $this->getConnection()->fetchAll($select);\n        $res    = array();\n\n        foreach ($data as $row) {\n            $res[$row['range_' . $attributeCode]] = $row['count_' . $attributeCode];\n        }\n        return $res;\n    }\n\n    /**\n     * Retrieve product count by some value of attribute\n     *\n     * @param string $attribute\n     * @return array($value=>$count)\n     */\n    public function getAttributeValueCount($attribute)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_value_count';\n\n        $select->reset(Zend_Db_Select::GROUP);\n        $condition  = 'e.entity_id=' . $tableAlias . '.entity_id\n            AND '.$this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array(\n                    'count_' . $attributeCode => new Zend_Db_Expr('COUNT(DISTINCT e.entity_id)'),\n                    'value_' . $attributeCode => new Zend_Db_Expr($tableAlias . '.value')\n                 )\n        )\n            ->group('value_' . $attributeCode);\n\n        $data   = $this->getConnection()->fetchAll($select);\n        $res    = array();\n\n        foreach ($data as $row) {\n            $res[$row['value_' . $attributeCode]] = $row['count_' . $attributeCode];\n        }\n        return $res;\n    }\n\n    /**\n     * Return all attribute values as array in form:\n     * array(\n     *   [entity_id_1] => array(\n     *          [store_id_1] => store_value_1,\n     *          [store_id_2] => store_value_2,\n     *          ...\n     *          [store_id_n] => store_value_n\n     *   ),\n     *   ...\n     * )\n     *\n     * @param string $attribute attribute code\n     * @return array\n     */\n    public function getAllAttributeValues($attribute)\n    {\n        /** @var Varien_Db_Select $select */\n        $select    = clone $this->getSelect();\n        $attribute = $this->getEntity()->getAttribute($attribute);\n\n        $select->reset()\n            ->from($attribute->getBackend()->getTable(), array('entity_id', 'store_id', 'value'))\n            ->where('attribute_id = ?', (int)$attribute->getId());\n\n        $data = $this->getConnection()->fetchAll($select);\n        $res  = array();\n\n        foreach ($data as $row) {\n            $res[$row['entity_id']][$row['store_id']] = $row['value'];\n        }\n\n        return $res;\n    }\n\n    /**\n     * Get SQL for get record count without left JOINs\n     *\n     * @return Varien_Db_Select\n     */\n    public function getSelectCountSql()\n    {\n        return $this->_getSelectCountSql();\n    }\n\n    /**\n     * Get SQL for get record count\n     *\n     * @param null $select\n     * @param bool $resetLeftJoins\n     * @return Varien_Db_Select\n     */\n    protected function _getSelectCountSql($select = null, $resetLeftJoins = true)\n    {\n        $this->_renderFilters();\n        $countSelect = (is_null($select)) ?\n            $this->_getClearSelect() :\n            $this->_buildClearSelect($select);\n        // Clear GROUP condition for count method\n        $countSelect->reset(Zend_Db_Select::GROUP);\n        $countSelect->columns('COUNT(DISTINCT e.entity_id)');\n        if ($resetLeftJoins) {\n            $countSelect->resetJoinLeft();\n        }\n        return $countSelect;\n    }\n\n    /**\n     * Prepare statistics data\n     *\n     * @return $this\n     */\n    protected function _prepareStatisticsData()\n    {\n        $select = clone $this->getSelect();\n        $priceExpression = $this->getPriceExpression($select) . ' ' . $this->getAdditionalPriceExpression($select);\n        $sqlEndPart = ') * ' . $this->getCurrencyRate() . ', 2)';\n        $select = $this->_getSelectCountSql($select, false);\n        $select->columns(array(\n            'max' => 'ROUND(MAX(' . $priceExpression . $sqlEndPart,\n            'min' => 'ROUND(MIN(' . $priceExpression . $sqlEndPart,\n            'std' => $this->getConnection()->getStandardDeviationSql('ROUND((' . $priceExpression . $sqlEndPart)\n        ));\n        $select->where($this->getPriceExpression($select) . ' IS NOT NULL');\n        $row = $this->getConnection()->fetchRow($select, $this->_bindParams, Zend_Db::FETCH_NUM);\n        $this->_pricesCount = (int)$row[0];\n        $this->_maxPrice = (float)$row[1];\n        $this->_minPrice = (float)$row[2];\n        $this->_priceStandardDeviation = (float)$row[3];\n\n        return $this;\n    }\n\n    /**\n     * Retreive clear select\n     *\n     * @return Varien_Db_Select\n     */\n    protected function _getClearSelect()\n    {\n        return $this->_buildClearSelect();\n    }\n\n    /**\n     * Build clear select\n     *\n     * @param Varien_Db_Select $select\n     * @return Varien_Db_Select\n     */\n    protected function _buildClearSelect($select = null)\n    {\n        if (is_null($select)) {\n            $select = clone $this->getSelect();\n        }\n        $select->reset(Zend_Db_Select::ORDER);\n        $select->reset(Zend_Db_Select::LIMIT_COUNT);\n        $select->reset(Zend_Db_Select::LIMIT_OFFSET);\n        $select->reset(Zend_Db_Select::COLUMNS);\n\n        return $select;\n    }\n\n    /**\n     * Retrive all ids for collection\n     *\n     * @inheritDoc\n     */\n    public function getAllIds($limit = null, $offset = null)\n    {\n        $idsSelect = $this->_getClearSelect();\n        $idsSelect->columns('e.' . $this->getEntity()->getIdFieldName());\n        $idsSelect->limit($limit, $offset);\n        $idsSelect->resetJoinLeft();\n\n        return $this->getConnection()->fetchCol($idsSelect, $this->_bindParams);\n    }\n\n    /**\n     * Retreive product count select for categories\n     *\n     * @return Varien_Db_Select\n     */\n    public function getProductCountSelect()\n    {\n        if ($this->_productCountSelect === null) {\n            $this->_productCountSelect = clone $this->getSelect();\n            $this->_productCountSelect->reset(Zend_Db_Select::COLUMNS)\n                ->reset(Zend_Db_Select::GROUP)\n                ->reset(Zend_Db_Select::ORDER)\n                ->distinct(false)\n                ->join(\n                    array('count_table' => $this->getTable('catalog/category_product_index')),\n                    'count_table.product_id = e.entity_id',\n                    array(\n                        'count_table.category_id',\n                        'product_count' => new Zend_Db_Expr('COUNT(DISTINCT count_table.product_id)')\n                    )\n                )\n                ->where('count_table.store_id = ?', $this->getStoreId())\n                ->group('count_table.category_id');\n        }\n\n        return $this->_productCountSelect;\n    }\n\n    /**\n     * Destruct product count select\n     *\n     * @return $this\n     */\n    public function unsProductCountSelect()\n    {\n        $this->_productCountSelect = null;\n        return $this;\n    }\n\n    /**\n     * Adding product count to categories collection\n     *\n     * @param Mage_Eav_Model_Entity_Collection_Abstract $categoryCollection\n     * @return $this\n     */\n    public function addCountToCategories($categoryCollection)\n    {\n        $isAnchor    = array();\n        $isNotAnchor = array();\n        foreach ($categoryCollection as $category) {\n            if ($category->getIsAnchor()) {\n                $isAnchor[]    = $category->getId();\n            } else {\n                $isNotAnchor[] = $category->getId();\n            }\n        }\n        $productCounts = array();\n        if ($isAnchor || $isNotAnchor) {\n            $select = $this->getProductCountSelect();\n\n            Mage::dispatchEvent(\n                'catalog_product_collection_before_add_count_to_categories',\n                array('collection' => $this)\n            );\n\n            if ($isAnchor) {\n                $anchorStmt = clone $select;\n                $anchorStmt->limit(); //reset limits\n                $anchorStmt->where('count_table.category_id IN (?)', $isAnchor);\n                $productCounts += $this->getConnection()->fetchPairs($anchorStmt);\n                $anchorStmt = null;\n            }\n            if ($isNotAnchor) {\n                $notAnchorStmt = clone $select;\n                $notAnchorStmt->limit(); //reset limits\n                $notAnchorStmt->where('count_table.category_id IN (?)', $isNotAnchor);\n                $notAnchorStmt->where('count_table.is_parent = 1');\n                $productCounts += $this->getConnection()->fetchPairs($notAnchorStmt);\n                $notAnchorStmt = null;\n            }\n            $select = null;\n            $this->unsProductCountSelect();\n        }\n\n        foreach ($categoryCollection as $category) {\n            $_count = 0;\n            if (isset($productCounts[$category->getId()])) {\n                $_count = $productCounts[$category->getId()];\n            }\n            $category->setProductCount($_count);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retrieve unique attribute set ids in collection\n     *\n     * @return array\n     */\n    public function getSetIds()\n    {\n        $select = clone $this->getSelect();\n        /** @var Varien_Db_Select $select */\n        $select->reset(Zend_Db_Select::COLUMNS);\n        $select->distinct(true);\n        $select->columns('attribute_set_id');\n        return $this->getConnection()->fetchCol($select);\n    }\n\n    /**\n     * Return array of unique product type ids in collection\n     *\n     * @return array\n     */\n    public function getProductTypeIds()\n    {\n        $select = clone $this->getSelect();\n        /** @var Varien_Db_Select $select */\n        $select->reset(Zend_Db_Select::COLUMNS);\n        $select->distinct(true);\n        $select->columns('type_id');\n        return $this->getConnection()->fetchCol($select);\n    }\n\n    /**\n     * Joins url rewrite rules to collection\n     *\n     * @deprecated after 1.7.0.2. Method is not used anywhere in the code.\n     * @return $this\n     */\n    public function joinUrlRewrite()\n    {\n        $this->joinTable(\n            'core/url_rewrite',\n            'entity_id=entity_id',\n            array('request_path'),\n            '{{table}}.type = ' . Mage_Core_Model_Url_Rewrite::TYPE_PRODUCT,\n            'left'\n        );\n\n        return $this;\n    }\n\n    /**\n     * Add URL rewrites data to product\n     * If collection loadded - run processing else set flag\n     *\n     * @param int|string $categoryId\n     * @return $this\n     */\n    public function addUrlRewrite($categoryId = '')\n    {\n        $this->_addUrlRewrite = true;\n        if (Mage::getStoreConfig(Mage_Catalog_Helper_Product::XML_PATH_PRODUCT_URL_USE_CATEGORY, $this->getStoreId())) {\n            $this->_urlRewriteCategory = $categoryId;\n        } else {\n            $this->_urlRewriteCategory = 0;\n        }\n\n        if ($this->isLoaded()) {\n            $this->_addUrlRewrite();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add URL rewrites to collection\n     *\n     */\n    protected function _addUrlRewrite()\n    {\n        $urlRewrites = null;\n        if ($this->_cacheConf) {\n            if (!($urlRewrites = Mage::app()->loadCache($this->_cacheConf['prefix'] . 'urlrewrite'))) {\n                $urlRewrites = null;\n            } else {\n                $urlRewrites = unserialize($urlRewrites);\n            }\n        }\n\n        if (!$urlRewrites) {\n            $productIds = array();\n            foreach ($this->getItems() as $item) {\n                $productIds[] = $item->getEntityId();\n            }\n            if (!count($productIds)) {\n                return;\n            }\n\n            $select = $this->_factory->getProductUrlRewriteHelper()\n                ->getTableSelect($productIds, $this->_urlRewriteCategory, Mage::app()->getStore($this->getStoreId())->getId());\n\n            $urlRewrites = array();\n            foreach ($this->getConnection()->fetchAll($select) as $row) {\n                if (!isset($urlRewrites[$row['product_id']])) {\n                    $urlRewrites[$row['product_id']] = $row['request_path'];\n                }\n            }\n\n            if ($this->_cacheConf) {\n                Mage::app()->saveCache(\n                    serialize($urlRewrites),\n                    $this->_cacheConf['prefix'] . 'urlrewrite',\n                    array_merge($this->_cacheConf['tags'], array(Mage_Catalog_Model_Product_Url::CACHE_TAG)),\n                    $this->_cacheLifetime\n                );\n            }\n        }\n\n        foreach ($this->getItems() as $item) {\n            if (empty($this->_urlRewriteCategory)) {\n                $item->setDoNotUseCategoryId(true);\n            }\n            if (isset($urlRewrites[$item->getEntityId()])) {\n                $item->setData('request_path', $urlRewrites[$item->getEntityId()]);\n            } else {\n                $item->setData('request_path', false);\n            }\n        }\n    }\n\n    /**\n     * Add minimal price data to result\n     *\n     * @deprecated use addPriceData\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    public function addMinimalPrice()\n    {\n        return $this->addPriceData();\n    }\n\n    /**\n     * Add minimal price to product collection\n     *\n     * @deprecated sinse 1.3.2.2\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    protected function _addMinimalPrice()\n    {\n        return $this;\n    }\n\n    /**\n     * Add price data for calculate final price\n     *\n     * @deprecated use addPriceData\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    public function addFinalPrice()\n    {\n        return $this->addPriceData();\n    }\n\n    /**\n     * Join prices from price rules to products collection\n     *\n     * @return $this\n     */\n    protected function _joinPriceRules()\n    {\n        if ($this->isEnabledFlat()) {\n            $customerGroup = Mage::getSingleton('customer/session')->getCustomerGroupId();\n            $priceColumn   = 'e.display_price_group_' . $customerGroup;\n            $this->getSelect()->columns(array('_rule_price' => $priceColumn));\n\n            return $this;\n        }\n        if (!Mage::helper('catalog')->isModuleEnabled('Mage_CatalogRule')) {\n            return $this;\n        }\n        $wId = Mage::app()->getWebsite()->getId();\n        $gId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n\n        $storeDate = Mage::app()->getLocale()->storeTimeStamp($this->getStoreId());\n        $conditions  = 'price_rule.product_id = e.entity_id AND ';\n        $conditions .= \"price_rule.rule_date = '\".$this->getResource()->formatDate($storeDate, false).\"' AND \";\n        $conditions .= $this->getConnection()->quoteInto('price_rule.website_id = ? AND', $wId);\n        $conditions .= $this->getConnection()->quoteInto('price_rule.customer_group_id = ?', $gId);\n\n        $this->getSelect()->joinLeft(\n            array('price_rule' => $this->getTable('catalogrule/rule_product_price')),\n            $conditions,\n            array('rule_price' => 'rule_price')\n        );\n        return $this;\n    }\n\n    /**\n     * Add final price to the product\n     *\n     * @return $this\n     */\n    protected function _addFinalPrice()\n    {\n        foreach ($this->_items as $product) {\n            $basePrice = $product->getPrice();\n            $specialPrice = $product->getSpecialPrice();\n            $specialPriceFrom = $product->getSpecialFromDate();\n            $specialPriceTo = $product->getSpecialToDate();\n            if ($this->isEnabledFlat()) {\n                $rulePrice = null;\n                if ($product->getData('_rule_price') != $basePrice) {\n                    $rulePrice = $product->getData('_rule_price');\n                }\n            } else {\n                $rulePrice = $product->getData('_rule_price');\n            }\n\n            $finalPrice = $product->getPriceModel()->calculatePrice(\n                $basePrice,\n                $specialPrice,\n                $specialPriceFrom,\n                $specialPriceTo,\n                $rulePrice,\n                null,\n                null,\n                $product->getId()\n            );\n\n            $product->setCalculatedFinalPrice($finalPrice);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retreive all ids\n     *\n     * @param boolean $resetCache\n     * @return array\n     */\n    public function getAllIdsCache($resetCache = false)\n    {\n        $ids = null;\n        if (!$resetCache) {\n            $ids = $this->_allIdsCache;\n        }\n\n        if (is_null($ids)) {\n            $ids = $this->getAllIds();\n            $this->setAllIdsCache($ids);\n        }\n\n        return $ids;\n    }\n\n    /**\n     * Set all ids\n     *\n     * @param array $value\n     * @return $this\n     */\n    public function setAllIdsCache($value)\n    {\n        $this->_allIdsCache = $value;\n        return $this;\n    }\n\n    /**\n     * Add Price Data to result\n     *\n     * @param int $customerGroupId\n     * @param int $websiteId\n     * @return $this\n     */\n    public function addPriceData($customerGroupId = null, $websiteId = null)\n    {\n        $this->_productLimitationFilters['use_price_index'] = true;\n\n        if (!isset($this->_productLimitationFilters['customer_group_id']) && is_null($customerGroupId)) {\n            $customerGroupId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n        }\n        if (!isset($this->_productLimitationFilters['website_id']) && is_null($websiteId)) {\n            $websiteId       = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n        }\n\n        if (!is_null($customerGroupId)) {\n            $this->_productLimitationFilters['customer_group_id'] = $customerGroupId;\n        }\n        if (!is_null($websiteId)) {\n            $this->_productLimitationFilters['website_id'] = $websiteId;\n        }\n\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Add attribute to filter\n     *\n     * @param Mage_Eav_Model_Entity_Attribute_Abstract|string $attribute\n     * @param array $condition\n     * @inheritDoc\n     */\n    public function addAttributeToFilter($attribute, $condition = null, $joinType = 'inner')\n    {\n        if ($this->isEnabledFlat()) {\n            if ($attribute instanceof Mage_Eav_Model_Entity_Attribute_Abstract) {\n                $attribute = $attribute->getAttributeCode();\n            }\n\n            if (is_array($attribute)) {\n                $sqlArr = array();\n                foreach ($attribute as $condition) {\n                    $sqlArr[] = $this->_getAttributeConditionSql($condition['attribute'], $condition, $joinType);\n                }\n                $conditionSql = '('.join(') OR (', $sqlArr).')';\n                $this->getSelect()->where($conditionSql);\n                return $this;\n            }\n\n            if (!isset($this->_selectAttributes[$attribute])) {\n                $this->addAttributeToSelect($attribute);\n            }\n\n            if (isset($this->_selectAttributes[$attribute])) {\n                $this->getSelect()->where($this->_getConditionSql('e.' . $attribute, $condition));\n            }\n\n            return $this;\n        }\n\n        $this->_allIdsCache = null;\n\n        if (is_string($attribute) && $attribute == 'is_saleable') {\n            $columns = $this->getSelect()->getPart(Zend_Db_Select::COLUMNS);\n            foreach ($columns as $columnEntry) {\n                list($correlationName, $column, $alias) = $columnEntry;\n                if ($alias == 'is_saleable') {\n                    if ($column instanceof Zend_Db_Expr) {\n                        $field = $column;\n                    } else {\n                        $adapter = $this->getSelect()->getAdapter();\n                        if (empty($correlationName)) {\n                            $field = $adapter->quoteColumnAs($column, $alias, true);\n                        } else {\n                            $field = $adapter->quoteColumnAs(array($correlationName, $column), $alias, true);\n                        }\n                    }\n                    $this->getSelect()->where(\"{$field} = ?\", $condition);\n                    break;\n                }\n            }\n\n            return $this;\n        } else {\n            return parent::addAttributeToFilter($attribute, $condition, $joinType);\n        }\n    }\n\n    /**\n     * Add requere tax percent flag for product collection\n     *\n     * @return $this\n     */\n    public function addTaxPercents()\n    {\n        $this->_addTaxPercents = true;\n        return $this;\n    }\n\n    /**\n     * Get require tax percent flag value\n     *\n     * @return bool\n     */\n    public function requireTaxPercent()\n    {\n        return $this->_addTaxPercents;\n    }\n\n    /**\n     * Enter description here ...\n     *\n     * @deprecated from 1.3.0\n     *\n     */\n    protected function _addTaxPercents()\n    {\n        $classToRate = array();\n        $request = Mage::getSingleton('tax/calculation')->getRateRequest();\n        foreach ($this as &$item) {\n            if (null === $item->getTaxClassId()) {\n                $item->setTaxClassId($item->getMinimalTaxClassId());\n            }\n            if (!isset($classToRate[$item->getTaxClassId()])) {\n                $request->setProductClassId($item->getTaxClassId());\n                $classToRate[$item->getTaxClassId()] = Mage::getSingleton('tax/calculation')->getRate($request);\n            }\n            $item->setTaxPercent($classToRate[$item->getTaxClassId()]);\n        }\n    }\n\n    /**\n     * Adding product custom options to result collection\n     *\n     * @return $this\n     */\n    public function addOptionsToResult()\n    {\n        $productIds = array();\n        foreach ($this as $product) {\n            $productIds[] = $product->getId();\n        }\n        if (!empty($productIds)) {\n            $options = Mage::getModel('catalog/product_option')\n                ->getCollection()\n                ->addTitleToResult(Mage::app()->getStore()->getId())\n                ->addPriceToResult(Mage::app()->getStore()->getId())\n                ->addProductToFilter($productIds)\n                ->addValuesToResult();\n\n            foreach ($options as $option) {\n                if ($this->getItemById($option->getProductId())) {\n                    $this->getItemById($option->getProductId())->addOption($option);\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Filter products with required options\n     *\n     * @return $this\n     */\n    public function addFilterByRequiredOptions()\n    {\n        $this->addAttributeToFilter('required_options', array(array('neq' => '1'), array('null' => true)), 'left');\n        return $this;\n    }\n\n    /**\n     * Set product visibility filter for enabled products\n     *\n     * @param array $visibility\n     * @return $this\n     */\n    public function setVisibility($visibility)\n    {\n        $this->_productLimitationFilters['visibility'] = $visibility;\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Add attribute to sort order\n     *\n     * @inheritDoc\n     */\n    public function addAttributeToSort($attribute, $dir = self::SORT_ORDER_ASC)\n    {\n        if ($attribute == 'position') {\n            if (isset($this->_joinFields[$attribute])) {\n                $this->getSelect()->order($this->_getAttributeFieldName($attribute) . ' ' . $dir);\n                return $this;\n            }\n            if ($this->isEnabledFlat()) {\n                $this->getSelect()->order(\"cat_index_position {$dir}\");\n            }\n            // optimize if using cat index\n            $filters = $this->_productLimitationFilters;\n            if (isset($filters['category_id']) || isset($filters['visibility'])) {\n                $this->getSelect()->order('cat_index.position ' . $dir);\n            } else {\n                $this->getSelect()->order('e.entity_id ' . $dir);\n            }\n\n            return $this;\n        } elseif ($attribute == 'is_saleable') {\n            $this->getSelect()->order(\"is_saleable \" . $dir);\n            return $this;\n        }\n\n        $storeId = $this->getStoreId();\n        if ($attribute == 'price' && $storeId != 0) {\n            $this->addPriceData();\n            $this->getSelect()->order(\"price_index.min_price {$dir}\");\n\n            return $this;\n        }\n\n        if ($this->isEnabledFlat()) {\n            $column = $this->getEntity()->getAttributeSortColumn($attribute);\n\n            if ($column) {\n                $this->getSelect()->order(\"e.{$column} {$dir}\");\n            } elseif (isset($this->_joinFields[$attribute])) {\n                $this->getSelect()->order($this->_getAttributeFieldName($attribute) . ' ' . $dir);\n            }\n\n            return $this;\n        } else {\n            $attrInstance = $this->getEntity()->getAttribute($attribute);\n            if ($attrInstance && $attrInstance->usesSource()) {\n                $attrInstance->getSource()\n                    ->addValueSortToCollection($this, $dir);\n                return $this;\n            }\n        }\n\n        return parent::addAttributeToSort($attribute, $dir);\n    }\n\n    /**\n     * Prepare limitation filters\n     *\n     * @return $this\n     */\n    protected function _prepareProductLimitationFilters()\n    {\n        if (isset($this->_productLimitationFilters['visibility'])\n            && !isset($this->_productLimitationFilters['store_id'])\n        ) {\n            $this->_productLimitationFilters['store_id'] = $this->getStoreId();\n        }\n        if (isset($this->_productLimitationFilters['category_id'])\n            && !isset($this->_productLimitationFilters['store_id'])\n        ) {\n            $this->_productLimitationFilters['store_id'] = $this->getStoreId();\n        }\n        if (isset($this->_productLimitationFilters['store_id'])\n            && isset($this->_productLimitationFilters['visibility'])\n            && !isset($this->_productLimitationFilters['category_id'])\n        ) {\n            $this->_productLimitationFilters['category_id'] = Mage::app()\n                ->getStore($this->_productLimitationFilters['store_id'])\n                ->getRootCategoryId();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join website product limitation\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinWebsite()\n    {\n        $joinWebsite = false;\n        $filters     = $this->_productLimitationFilters;\n        $conditions  = array('product_website.product_id = e.entity_id');\n\n        if (isset($filters['website_ids'])) {\n            $joinWebsite = true;\n            if (count($filters['website_ids']) > 1) {\n                $this->getSelect()->distinct(true);\n            }\n            $conditions[] = $this->getConnection()\n                ->quoteInto('product_website.website_id IN(?)', $filters['website_ids']);\n        } elseif (isset($filters['store_id'])\n            && (!isset($filters['visibility']) && !isset($filters['category_id']))\n            && !$this->isEnabledFlat()\n        ) {\n            $joinWebsite = true;\n            $websiteId = Mage::app()->getStore($filters['store_id'])->getWebsiteId();\n            $conditions[] = $this->getConnection()\n                ->quoteInto('product_website.website_id = ?', $websiteId);\n        }\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['product_website'])) {\n            if (!$joinWebsite) {\n                unset($fromPart['product_website']);\n            } else {\n                $fromPart['product_website']['joinCondition'] = join(' AND ', $conditions);\n            }\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } elseif ($joinWebsite) {\n            $this->getSelect()->join(\n                array('product_website' => $this->getTable('catalog/product_website')),\n                join(' AND ', $conditions),\n                array()\n            );\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join additional (alternative) store visibility filter\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinStore()\n    {\n        $filters = $this->_productLimitationFilters;\n        if (!isset($filters['store_table'])) {\n            return $this;\n        }\n\n        $hasColumn = false;\n        foreach ($this->getSelect()->getPart(Zend_Db_Select::COLUMNS) as $columnEntry) {\n            list(,,$alias) = $columnEntry;\n            if ($alias == 'visibility') {\n                $hasColumn = true;\n            }\n        }\n        if (!$hasColumn) {\n            $this->getSelect()->columns('visibility', 'cat_index');\n        }\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (!isset($fromPart['store_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_index' => $this->getTable('core/store')),\n                'store_index.store_id = ' . $filters['store_table'] . '.store_id',\n                array()\n            );\n        }\n        if (!isset($fromPart['store_group_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_group_index' => $this->getTable('core/store_group')),\n                'store_index.group_id = store_group_index.group_id',\n                array()\n            );\n        }\n        if (!isset($fromPart['store_cat_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_cat_index' => $this->getTable('catalog/category_product_index')),\n                join(' AND ', array(\n                    'store_cat_index.product_id = e.entity_id',\n                    'store_cat_index.store_id = ' . $filters['store_table'] . '.store_id',\n                    'store_cat_index.category_id=store_group_index.root_category_id'\n                )),\n                array('store_visibility' => 'visibility')\n            );\n        }\n        // Avoid column duplication problems\n        Mage::getResourceHelper('core')->prepareColumnsList($this->getSelect());\n\n        $whereCond = join(' OR ', array(\n            $this->getConnection()->quoteInto('cat_index.visibility IN(?)', $filters['visibility']),\n            $this->getConnection()->quoteInto('store_cat_index.visibility IN(?)', $filters['visibility'])\n        ));\n\n        $wherePart = $this->getSelect()->getPart(Zend_Db_Select::WHERE);\n        $hasCond   = false;\n        foreach ($wherePart as $cond) {\n            if ($cond == '(' . $whereCond . ')') {\n                $hasCond = true;\n            }\n        }\n\n        if (!$hasCond) {\n            $this->getSelect()->where($whereCond);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join Product Price Table\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinPrice()\n    {\n        return $this->_productLimitationPrice();\n    }\n\n    /**\n     * Join Product Price Table with left-join possibility\n     *\n     * @param bool $joinLeft\n     * @return $this\n     * @throws Zend_Db_Exception\n     * @throws Zend_Db_Select_Exception\n     * @see Mage_Catalog_Model_Resource_Product_Collection::_productLimitationJoinPrice()\n     */\n    protected function _productLimitationPrice($joinLeft = false)\n    {\n        $filters = $this->_productLimitationFilters;\n        if (empty($filters['use_price_index'])) {\n            return $this;\n        }\n\n        $helper     = Mage::getResourceHelper('core');\n        $connection = $this->getConnection();\n        $select     = $this->getSelect();\n        $joinCond   = join(' AND ', array(\n            'price_index.entity_id = e.entity_id',\n            $connection->quoteInto('price_index.website_id = ?', $filters['website_id']),\n            $connection->quoteInto('price_index.customer_group_id = ?', $filters['customer_group_id'])\n        ));\n\n        $fromPart = $select->getPart(Zend_Db_Select::FROM);\n        if (!isset($fromPart['price_index'])) {\n            $least       = $connection->getLeastSql(array('price_index.min_price', 'price_index.tier_price'));\n            $minimalExpr = $connection->getCheckSql(\n                'price_index.tier_price IS NOT NULL',\n                $least,\n                'price_index.min_price'\n            );\n            $colls       = array('price', 'tax_class_id', 'final_price',\n                'minimal_price' => $minimalExpr , 'min_price', 'max_price', 'tier_price');\n            $tableName = array('price_index' => $this->getTable('catalog/product_index_price'));\n            if ($joinLeft) {\n                $select->joinLeft($tableName, $joinCond, $colls);\n            } else {\n                $select->join($tableName, $joinCond, $colls);\n            }\n            // Set additional field filters\n            foreach ($this->_priceDataFieldFilters as $filterData) {\n                $select->where(call_user_func_array('sprintf', $filterData));\n            }\n        } else {\n            $fromPart['price_index']['joinCondition'] = $joinCond;\n            $select->setPart(Zend_Db_Select::FROM, $fromPart);\n        }\n        //Clean duplicated fields\n        $helper->prepareColumnsList($select);\n\n\n        return $this;\n    }\n\n    /**\n     * Apply front-end price limitation filters to the collection\n     *\n     * @return $this\n     */\n    public function applyFrontendPriceLimitations()\n    {\n        $this->_productLimitationFilters['use_price_index'] = true;\n        if (!isset($this->_productLimitationFilters['customer_group_id'])) {\n            $customerGroupId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n            $this->_productLimitationFilters['customer_group_id'] = $customerGroupId;\n        }\n        if (!isset($this->_productLimitationFilters['website_id'])) {\n            $websiteId = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n            $this->_productLimitationFilters['website_id'] = $websiteId;\n        }\n        $this->_applyProductLimitations();\n        return $this;\n    }\n\n    /**\n     * Apply limitation filters to collection\n     * Method allows using one time category product index table (or product website table)\n     * for different combinations of store_id/category_id/visibility filter states\n     * Method supports multiple changes in one collection object for this parameters\n     *\n     * @return $this\n     */\n    protected function _applyProductLimitations()\n    {\n        Mage::dispatchEvent('catalog_product_collection_apply_limitations_before', array(\n            'collection'  => $this,\n            'category_id' => isset($this->_productLimitationFilters['category_id'])\n                ? $this->_productLimitationFilters['category_id']\n                : null,\n        ));\n        $this->_prepareProductLimitationFilters();\n        $this->_productLimitationJoinWebsite();\n        $this->_productLimitationJoinPrice();\n        $filters = $this->_productLimitationFilters;\n\n        if (!isset($filters['category_id']) && !isset($filters['visibility'])) {\n            return $this;\n        }\n\n        $conditions = array(\n            'cat_index.product_id=e.entity_id',\n            $this->getConnection()->quoteInto('cat_index.store_id=?', $filters['store_id'])\n        );\n        if (isset($filters['visibility']) && !isset($filters['store_table'])) {\n            $conditions[] = $this->getConnection()\n                ->quoteInto('cat_index.visibility IN(?)', $filters['visibility']);\n        }\n\n        if (!$this->getFlag('disable_root_category_filter')) {\n            $conditions[] = $this->getConnection()->quoteInto('cat_index.category_id = ?', $filters['category_id']);\n        }\n\n        if (isset($filters['category_is_anchor'])) {\n            $conditions[] = $this->getConnection()\n                ->quoteInto('cat_index.is_parent=?', $filters['category_is_anchor']);\n        }\n\n        $joinCond = join(' AND ', $conditions);\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['cat_index'])) {\n            $fromPart['cat_index']['joinCondition'] = $joinCond;\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } else {\n            $this->getSelect()->join(\n                array('cat_index' => $this->getTable('catalog/category_product_index')),\n                $joinCond,\n                array('cat_index_position' => 'position')\n            );\n        }\n\n        $this->_productLimitationJoinStore();\n\n        Mage::dispatchEvent('catalog_product_collection_apply_limitations_after', array(\n            'collection' => $this\n        ));\n\n        return $this;\n    }\n\n    /**\n     * Apply limitation filters to collection base on API\n     * Method allows using one time category product table\n     * for combinations of category_id filter states\n     *\n     * @return $this\n     */\n    protected function _applyZeroStoreProductLimitations()\n    {\n        $filters = $this->_productLimitationFilters;\n\n        $conditions = array(\n            'cat_pro.product_id=e.entity_id',\n            $this->getConnection()->quoteInto('cat_pro.category_id=?', $filters['category_id'])\n        );\n        $joinCond = join(' AND ', $conditions);\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['cat_pro'])) {\n            $fromPart['cat_pro']['joinCondition'] = $joinCond;\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } else {\n            $this->getSelect()->join(\n                array('cat_pro' => $this->getTable('catalog/category_product')),\n                $joinCond,\n                array('cat_index_position' => 'position')\n            );\n        }\n        $this->_joinFields['position'] = array(\n            'table' => 'cat_pro',\n            'field' => 'position',\n        );\n\n        return $this;\n    }\n\n    /**\n     * Add category ids to loaded items\n     *\n     * @return $this\n     */\n    public function addCategoryIds()\n    {\n        if ($this->getFlag('category_ids_added')) {\n            return $this;\n        }\n        $ids = array_keys($this->_items);\n        if (empty($ids)) {\n            return $this;\n        }\n\n        $select = $this->getConnection()->select();\n\n        $select->from($this->_productCategoryTable, array('product_id', 'category_id'));\n        $select->where('product_id IN (?)', $ids);\n\n        $data = $this->getConnection()->fetchAll($select);\n\n        $categoryIds = array();\n        foreach ($data as $info) {\n            if (isset($categoryIds[$info['product_id']])) {\n                $categoryIds[$info['product_id']][] = $info['category_id'];\n            } else {\n                $categoryIds[$info['product_id']] = array($info['category_id']);\n            }\n        }\n\n\n        foreach ($this->getItems() as $item) {\n            $productId = $item->getId();\n            if (isset($categoryIds[$productId])) {\n                $item->setCategoryIds($categoryIds[$productId]);\n            } else {\n                $item->setCategoryIds(array());\n            }\n        }\n\n        $this->setFlag('category_ids_added', true);\n        return $this;\n    }\n\n    /**\n     * Add tier price data to loaded items\n     *\n     * @return $this\n     */\n    public function addTierPriceData()\n    {\n        if ($this->getFlag('tier_price_added')) {\n            return $this;\n        }\n\n        $tierPrices = array();\n        $productIds = array();\n        foreach ($this->getItems() as $item) {\n            $productIds[] = $item->getId();\n            $tierPrices[$item->getId()] = array();\n        }\n        if (!$productIds) {\n            return $this;\n        }\n\n        /** @var Mage_Catalog_Model_Resource_Eav_Attribute $attribute */\n        $attribute = $this->getAttribute('tier_price');\n        if ($attribute->isScopeGlobal()) {\n            $websiteId = 0;\n        } elseif ($this->getStoreId()) {\n            $websiteId = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n        }\n\n        $adapter   = $this->getConnection();\n        $columns   = array(\n            'price_id'      => 'value_id',\n            'website_id'    => 'website_id',\n            'all_groups'    => 'all_groups',\n            'cust_group'    => 'customer_group_id',\n            'price_qty'     => 'qty',\n            'price'         => 'value',\n            'product_id'    => 'entity_id'\n        );\n        $select  = $adapter->select()\n            ->from($this->getTable('catalog/product_attribute_tier_price'), $columns)\n            ->where('entity_id IN(?)', $productIds)\n            ->order(array('entity_id','qty'));\n\n        if ($websiteId == '0') {\n            $select->where('website_id = ?', $websiteId);\n        } else {\n            $select->where('website_id IN(?)', array('0', $websiteId));\n        }\n\n        foreach ($adapter->fetchAll($select) as $row) {\n            $tierPrices[$row['product_id']][] = array(\n                'website_id'    => $row['website_id'],\n                'cust_group'    => $row['all_groups'] ? Mage_Customer_Model_Group::CUST_GROUP_ALL : $row['cust_group'],\n                'price_qty'     => $row['price_qty'],\n                'price'         => $row['price'],\n                'website_price' => $row['price'],\n\n            );\n        }\n\n        /* @var Mage_Catalog_Model_Product_Attribute_Backend_Tierprice $backend */\n        $backend = $attribute->getBackend();\n\n        foreach ($this->getItems() as $item) {\n            $data = $tierPrices[$item->getId()];\n            if (!empty($data) && $websiteId) {\n                $data = $backend->preparePriceData($data, $item->getTypeId(), $websiteId);\n            }\n            $item->setData('tier_price', $data);\n        }\n\n        $this->setFlag('tier_price_added', true);\n        return $this;\n    }\n\n    /**\n     * Add field comparison expression\n     *\n     * @param string $comparisonFormat - expression for sprintf()\n     * @param array $fields - list of fields\n     * @return $this\n     * @throws Exception\n     */\n    public function addPriceDataFieldFilter($comparisonFormat, $fields)\n    {\n        if (!preg_match('/^%s( (<|>|=|<=|>=|<>) %s)*$/', $comparisonFormat)) {\n            throw new Exception('Invalid comparison format.');\n        }\n\n        if (!is_array($fields)) {\n            $fields = array($fields);\n        }\n        foreach ($fields as $key => $field) {\n            $fields[$key] = $this->_getMappedField($field);\n        }\n\n        $this->_priceDataFieldFilters[] = array_merge(array($comparisonFormat), $fields);\n        return $this;\n    }\n\n    /**\n     * Clear collection\n     *\n     * @inheritDoc\n     */\n    public function clear()\n    {\n        foreach ($this->_items as $i => $item) {\n            if ($item->hasStockItem()) {\n                $item->unsStockItem();\n            }\n            $item = $this->_items[$i] = null;\n        }\n\n        foreach ($this->_itemsById as $i => $item) {\n            $item = $this->_itemsById[$i] = null;\n        }\n\n        unset($this->_items, $this->_data, $this->_itemsById);\n        $this->_data = array();\n        $this->_itemsById = array();\n        return parent::clear();\n    }\n\n    /**\n     * Set Order field\n     *\n     * @param string $attribute\n     * @param string $dir\n     * @return $this\n     */\n    public function setOrder($attribute, $dir = 'desc')\n    {\n        if ($attribute == 'price') {\n            $this->addAttributeToSort($attribute, $dir);\n        } else {\n            parent::setOrder($attribute, $dir);\n        }\n        return $this;\n    }\n\n    /**\n     * Get products max price\n     *\n     * @return float\n     */\n    public function getMaxPrice()\n    {\n        if (is_null($this->_maxPrice)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_maxPrice;\n    }\n\n    /**\n     * Get products min price\n     *\n     * @return float\n     */\n    public function getMinPrice()\n    {\n        if (is_null($this->_minPrice)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_minPrice;\n    }\n\n    /**\n     * Get standard deviation of products price\n     *\n     * @return float\n     */\n    public function getPriceStandardDeviation()\n    {\n        if (is_null($this->_priceStandardDeviation)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_priceStandardDeviation;\n    }\n\n\n    /**\n     * Get count of product prices\n     *\n     * @return int\n     */\n    public function getPricesCount()\n    {\n        if (is_null($this->_pricesCount)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_pricesCount;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Catalog product attribute api\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Catalog_Model_Product_Attribute_Api extends Mage_Catalog_Model_Api_Resource\n{\n    /**\n     * Product entity type id\n     *\n     * @var int\n     */\n    protected $_entityTypeId;\n\n    /**\n     * Constructor. Initializes default values.\n     */\n    public function __construct()\n    {\n        $this->_storeIdSessionField = 'product_store_id';\n        $this->_ignoredAttributeCodes[] = 'type_id';\n        $this->_ignoredAttributeTypes[] = 'gallery';\n        $this->_ignoredAttributeTypes[] = 'media_image';\n        $this->_entityTypeId = Mage::getModel('eav/entity')->setType('catalog_product')->getTypeId();\n    }\n\n    /**\n     * Retrieve attributes from specified attribute set\n     *\n     * @param int $setId\n     * @return array\n     */\n    public function items($setId)\n    {\n        $attributes = Mage::getModel('catalog/product')->getResource()\n                ->loadAllAttributes()\n                ->getSortedAttributes($setId);\n        $result = array();\n\n        foreach ($attributes as $attribute) {\n            /* @var Mage_Catalog_Model_Resource_Eav_Attribute $attribute */\n            if ((!$attribute->getId() || $attribute->isInSet($setId))\n                    && $this->_isAllowedAttribute($attribute)) {\n                if (!$attribute->getId() || $attribute->isScopeGlobal()) {\n                    $scope = 'global';\n                } elseif ($attribute->isScopeWebsite()) {\n                    $scope = 'website';\n                } else {\n                    $scope = 'store';\n                }\n\n                $result[] = array(\n                    'attribute_id' => $attribute->getId(),\n                    'code' => $attribute->getAttributeCode(),\n                    'type' => $attribute->getFrontendInput(),\n                    'required' => $attribute->getIsRequired(),\n                    'scope' => $scope\n                );\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Retrieve attribute options\n     *\n     * @param int $attributeId\n     * @param string|int $store\n     * @return array\n     */\n    public function options($attributeId, $store = null)\n    {\n        $storeId = $this->_getStoreId($store);\n        $attribute = Mage::getModel('catalog/product')\n                ->setStoreId($storeId)\n                ->getResource()\n                ->getAttribute($attributeId);\n\n        /* @var Mage_Catalog_Model_Entity_Attribute $attribute */\n        if (!$attribute) {\n            $this->_fault('not_exists');\n        }\n        $options = array();\n        if ($attribute->usesSource()) {\n            foreach ($attribute->getSource()->getAllOptions() as $optionId => $optionValue) {\n                if (is_array($optionValue)) {\n                    $options[] = $optionValue;\n                } else {\n                    $options[] = array(\n                        'value' => $optionId,\n                        'label' => $optionValue\n                    );\n                }\n            }\n        }\n\n        return $options;\n    }\n\n    /**\n     * Retrieve list of possible attribute types\n     *\n     * @return array\n     */\n    public function types()\n    {\n        return Mage::getModel('catalog/product_attribute_source_inputtype')->toOptionArray();\n    }\n\n    /**\n     * Create new product attribute\n     *\n     * @param array $data input data\n     * @return integer\n     */\n    public function create($data)\n    {\n        /** @var Mage_Catalog_Model_Resource_Eav_Attribute $model */\n        $model = Mage::getModel('catalog/resource_eav_attribute');\n        /** @var Mage_Catalog_Helper_Product $helper */\n        $helper = Mage::helper('catalog/product');\n\n        if (empty($data['attribute_code']) || (isset($data['frontend_label']) && !is_array($data['frontend_label']))) {\n            $this->_fault('invalid_parameters');\n        }\n\n        //validate attribute_code\n        if (!preg_match('/^[a-z][a-z_0-9]{0,254}$/', $data['attribute_code'])) {\n            $this->_fault('invalid_code');\n        }\n\n        //validate frontend_input\n        $allowedTypes = array();\n        foreach ($this->types() as $type) {\n            $allowedTypes[] = $type['value'];\n        }\n        if (!in_array($data['frontend_input'], $allowedTypes)) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        $data['source_model'] = $helper->getAttributeSourceModelByInputType($data['frontend_input']);\n        $data['backend_model'] = $helper->getAttributeBackendModelByInputType($data['frontend_input']);\n        if (is_null($model->getIsUserDefined()) || $model->getIsUserDefined() != 0) {\n            $data['backend_type'] = $model->getBackendTypeByInput($data['frontend_input']);\n        }\n\n        $this->_prepareDataForSave($data);\n\n        $model->addData($data);\n        $model->setEntityTypeId($this->_entityTypeId);\n        $model->setIsUserDefined(1);\n\n        try {\n            $model->save();\n            // clear translation cache because attribute labels are stored in translation\n            Mage::app()->cleanCache(array(Mage_Core_Model_Translate::CACHE_TAG));\n        } catch (Exception $e) {\n            $this->_fault('unable_to_save', $e->getMessage());\n        }\n\n        return (int) $model->getId();\n    }\n\n    /**\n     * Update product attribute\n     *\n     * @param string|integer $attribute attribute code or ID\n     * @param array $data\n     * @return boolean\n     */\n    public function update($attribute, $data)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->getEntityTypeId() != $this->_entityTypeId) {\n            $this->_fault('can_not_edit');\n        }\n\n        $data['attribute_code'] = $model->getAttributeCode();\n        $data['is_user_defined'] = $model->getIsUserDefined();\n        $data['frontend_input'] = $model->getFrontendInput();\n\n        $this->_prepareDataForSave($data);\n\n        $model->addData($data);\n        try {\n            $model->save();\n            // clear translation cache because attribute labels are stored in translation\n            Mage::app()->cleanCache(array(Mage_Core_Model_Translate::CACHE_TAG));\n            return true;\n        } catch (Exception $e) {\n            $this->_fault('unable_to_save', $e->getMessage());\n        }\n    }\n\n    /**\n     * Remove attribute\n     *\n     * @param integer|string $attribute attribute ID or code\n     * @return boolean\n     */\n    public function remove($attribute)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->getEntityTypeId() != $this->_entityTypeId) {\n            $this->_fault('can_not_delete');\n        }\n\n        if (!$model->getIsUserDefined()) {\n            $this->_fault('can_not_delete');\n        }\n\n        try {\n            $model->delete();\n            return true;\n        } catch (Exception $e) {\n            $this->_fault('can_not_delete', $e->getMessage());\n        }\n    }\n\n    /**\n     * Get full information about attribute with list of options\n     *\n     * @param integer|string $attribute attribute ID or code\n     * @return array\n     */\n    public function info($attribute)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if ($model->isScopeGlobal()) {\n            $scope = 'global';\n        } elseif ($model->isScopeWebsite()) {\n            $scope = 'website';\n        } else {\n            $scope = 'store';\n        }\n\n        $frontendLabels = array(\n            array(\n                'store_id' => 0,\n                'label' => $model->getFrontendLabel()\n            )\n        );\n        foreach ($model->getStoreLabels() as $store_id => $label) {\n            $frontendLabels[] = array(\n                'store_id' => $store_id,\n                'label' => $label\n            );\n        }\n\n        $result = array(\n            'attribute_id' => $model->getId(),\n            'attribute_code' => $model->getAttributeCode(),\n            'frontend_input' => $model->getFrontendInput(),\n            'default_value' => $model->getDefaultValue(),\n            'is_unique' => $model->getIsUnique(),\n            'is_required' => $model->getIsRequired(),\n            'apply_to' => $model->getApplyTo(),\n            'is_configurable' => $model->getIsConfigurable(),\n            'is_searchable' => $model->getIsSearchable(),\n            'is_visible_in_advanced_search' => $model->getIsVisibleInAdvancedSearch(),\n            'is_comparable' => $model->getIsComparable(),\n            'is_used_for_promo_rules' => $model->getIsUsedForPromoRules(),\n            'is_visible_on_front' => $model->getIsVisibleOnFront(),\n            'used_in_product_listing' => $model->getUsedInProductListing(),\n            'frontend_label' => $frontendLabels\n        );\n        if ($model->getFrontendInput() != 'price') {\n            $result['scope'] = $scope;\n        }\n\n        // set additional fields to different types\n        switch ($model->getFrontendInput()) {\n            case 'text':\n                    $result['additional_fields'] = array(\n                        'frontend_class' => $model->getFrontendClass(),\n                        'is_html_allowed_on_front' => $model->getIsHtmlAllowedOnFront(),\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            case 'textarea':\n                    $result['additional_fields'] = array(\n                        'is_wysiwyg_enabled' => $model->getIsWysiwygEnabled(),\n                        'is_html_allowed_on_front' => $model->getIsHtmlAllowedOnFront(),\n                    );\n                break;\n            case 'date':\n            case 'boolean':\n                    $result['additional_fields'] = array(\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            case 'multiselect':\n                    $result['additional_fields'] = array(\n                        'is_filterable' => $model->getIsFilterable(),\n                        'is_filterable_in_search' => $model->getIsFilterableInSearch(),\n                        'position' => $model->getPosition()\n                    );\n                break;\n            case 'select':\n            case 'price':\n                    $result['additional_fields'] = array(\n                        'is_filterable' => $model->getIsFilterable(),\n                        'is_filterable_in_search' => $model->getIsFilterableInSearch(),\n                        'position' => $model->getPosition(),\n                        'used_for_sort_by' => $model->getUsedForSortBy()\n                    );\n                break;\n            default:\n                    $result['additional_fields'] = array();\n                break;\n        }\n\n        // set options\n        $options = $this->options($model->getId());\n        // remove empty first element\n        if ($model->getFrontendInput() != 'boolean') {\n            array_shift($options);\n        }\n\n        if (count($options) > 0) {\n            $result['options'] = $options;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Add option to select or multiselect attribute\n     *\n     * @param  integer|string $attribute attribute ID or code\n     * @param  array $data\n     * @return bool\n     */\n    public function addOption($attribute, $data)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if (!$model->usesSource()) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        /** @var Mage_Catalog_Helper_Data $helperCatalog */\n        $helperCatalog = Mage::helper('catalog');\n\n        $optionLabels = array();\n        foreach ($data['label'] as $label) {\n            $storeId = $label['store_id'];\n            $labelText = $helperCatalog->stripTags($label['value']);\n            if (is_array($storeId)) {\n                foreach ($storeId as $multiStoreId) {\n                    $optionLabels[$multiStoreId] = $labelText;\n                }\n            } else {\n                $optionLabels[$storeId] = $labelText;\n            }\n        }\n        // data in the following format is accepted by the model\n        // it simulates parameters of the request made to\n        // Mage_Adminhtml_Catalog_Product_AttributeController::saveAction()\n        $modelData = array(\n            'option' => array(\n                'value' => array(\n                    'option_1' => $optionLabels\n                ),\n                'order' => array(\n                    'option_1' => (int) $data['order']\n                )\n            )\n        );\n        if ($data['is_default']) {\n            $modelData['default'][] = 'option_1';\n        }\n\n        $model->addData($modelData);\n        try {\n            $model->save();\n        } catch (Exception $e) {\n            $this->_fault('unable_to_add_option', $e->getMessage());\n        }\n\n        return true;\n    }\n\n    /**\n     * Remove option from select or multiselect attribute\n     *\n     * @param  integer|string $attribute attribute ID or code\n     * @param  integer $optionId option to remove ID\n     * @return bool\n     */\n    public function removeOption($attribute, $optionId)\n    {\n        $model = $this->_getAttribute($attribute);\n\n        if (!$model->usesSource()) {\n            $this->_fault('invalid_frontend_input');\n        }\n\n        // data in the following format is accepted by the model\n        // it simulates parameters of the request made to\n        // Mage_Adminhtml_Catalog_Product_AttributeController::saveAction()\n        $modelData = array(\n            'option' => array(\n                'value' => array(\n                    $optionId => array()\n                ),\n                'delete' => array(\n                    $optionId => '1'\n                )\n            )\n        );\n        $model->addData($modelData);\n        try {\n            $model->save();\n        } catch (Exception $e) {\n            $this->_fault('unable_to_remove_option', $e->getMessage());\n        }\n\n        return true;\n    }\n\n    /**\n     * Prepare request input data for saving\n     *\n     * @param array $data input data\n     * @return void\n     */\n    protected function _prepareDataForSave(&$data)\n    {\n        /** @var Mage_Catalog_Helper_Data $helperCatalog */\n        $helperCatalog = Mage::helper('catalog');\n\n        if ($data['scope'] == 'global') {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_GLOBAL;\n        } elseif ($data['scope'] == 'website') {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_WEBSITE;\n        } else {\n            $data['is_global'] = Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_STORE;\n        }\n        if (!isset($data['is_configurable'])) {\n            $data['is_configurable'] = 0;\n        }\n        if (!isset($data['is_filterable'])) {\n            $data['is_filterable'] = 0;\n        }\n        if (!isset($data['is_filterable_in_search'])) {\n            $data['is_filterable_in_search'] = 0;\n        }\n        if (!isset($data['apply_to'])) {\n            $data['apply_to'] = array();\n        }\n        // set frontend labels array with store_id as keys\n        if (isset($data['frontend_label']) && is_array($data['frontend_label'])) {\n            $labels = array();\n            foreach ($data['frontend_label'] as $label) {\n                $storeId = $label['store_id'];\n                $labelText = $helperCatalog->stripTags($label['label']);\n                $labels[$storeId] = $labelText;\n            }\n            $data['frontend_label'] = $labels;\n        }\n        // set additional fields\n        if (isset($data['additional_fields']) && is_array($data['additional_fields'])) {\n            $data = array_merge($data, $data['additional_fields']);\n            unset($data['additional_fields']);\n        }\n        //default value\n        if (!empty($data['default_value'])) {\n            $data['default_value'] = $helperCatalog->stripTags($data['default_value']);\n        }\n    }\n\n    /**\n     * Load model by attribute ID or code\n     *\n     * @param integer|string $attribute\n     * @return Mage_Catalog_Model_Resource_Eav_Attribute\n     */\n    protected function _getAttribute($attribute)\n    {\n        $model = Mage::getResourceModel('catalog/eav_attribute')\n            ->setEntityTypeId($this->_entityTypeId);\n\n        if (is_numeric($attribute)) {\n            $model->load(intval($attribute));\n        } else {\n            $model->load($attribute, 'attribute_code');\n        }\n\n        if (!$model->getId()) {\n            $this->_fault('not_exists');\n        }\n\n        return $model;\n    }\n} // Class Mage_Catalog_Model_Product_Attribute_Api End\n", "<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n\n/**\n * Product collection\n *\n * @category    Mage\n * @package     Mage_Catalog\n * @author      Magento Core Team <core@magentocommerce.com>\n *\n * @method Mage_Catalog_Model_Product getItemById(int|string $value)\n * @method Mage_Catalog_Model_Product[] getItems()\n */\nclass Mage_Catalog_Model_Resource_Product_Collection extends Mage_Catalog_Model_Resource_Collection_Abstract\n{\n    /**\n     * Alias for index table\n     */\n    const INDEX_TABLE_ALIAS = 'price_index';\n\n    /**\n     * Alias for main table\n     */\n    const MAIN_TABLE_ALIAS = 'e';\n\n    /**\n     * Catalog Product Flat is enabled cache per store\n     *\n     * @var array\n     */\n    protected $_flatEnabled                  = array();\n\n    /**\n     * Product websites table name\n     *\n     * @var string\n     */\n    protected $_productWebsiteTable;\n\n    /**\n     * Product categories table name\n     *\n     * @var string\n     */\n    protected $_productCategoryTable;\n\n    /**\n     * Is add URL rewrites to collection flag\n     *\n     * @var bool\n     */\n    protected $_addUrlRewrite                = false;\n\n    /**\n     * Add URL rewrite for category\n     *\n     * @var int\n     */\n    protected $_urlRewriteCategory           = '';\n\n    /**\n     * Is add minimal price to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addMinimalPrice              = false;\n\n    /**\n     * Is add final price to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addFinalPrice                = false;\n\n    /**\n     * Cache for all ids\n     *\n     * @var array\n     */\n    protected $_allIdsCache                  = null;\n\n    /**\n     * Is add tax percents to product collection flag\n     *\n     * @var bool\n     */\n    protected $_addTaxPercents               = false;\n\n    /**\n     * Product limitation filters\n     * Allowed filters\n     *  store_id                int;\n     *  category_id             int;\n     *  category_is_anchor      int;\n     *  visibility              array|int;\n     *  website_ids             array|int;\n     *  store_table             string;\n     *  use_price_index         bool;   join price index table flag\n     *  customer_group_id       int;    required for price; customer group limitation for price\n     *  website_id              int;    required for price; website limitation for price\n     *\n     * @var array\n     */\n    protected $_productLimitationFilters     = array();\n\n    /**\n     * Category product count select\n     *\n     * @var Zend_Db_Select\n     */\n    protected $_productCountSelect           = null;\n\n    /**\n     * Enter description here ...\n     *\n     * @var bool\n     */\n    protected $_isWebsiteFilter              = false;\n\n    /**\n     * Additional field filters, applied in _productLimitationJoinPrice()\n     *\n     * @var array\n     */\n    protected $_priceDataFieldFilters = array();\n\n    /**\n     * Map of price fields\n     *\n     * @var array\n     */\n    protected $_map = array('fields' => array(\n        'price'         => 'price_index.price',\n        'final_price'   => 'price_index.final_price',\n        'min_price'     => 'price_index.min_price',\n        'max_price'     => 'price_index.max_price',\n        'tier_price'    => 'price_index.tier_price',\n        'special_price' => 'price_index.special_price',\n    ));\n\n    /**\n     * Price expression sql\n     *\n     * @var string|null\n     */\n    protected $_priceExpression;\n\n    /**\n     * Additional price expression sql part\n     *\n     * @var string|null\n     */\n    protected $_additionalPriceExpression;\n\n    /**\n     * Max prise (statistics data)\n     *\n     * @var float\n     */\n    protected $_maxPrice;\n\n    /**\n     * Min prise (statistics data)\n     *\n     * @var float\n     */\n    protected $_minPrice;\n\n    /**\n     * Prise standard deviation (statistics data)\n     *\n     * @var float\n     */\n    protected $_priceStandardDeviation;\n\n    /**\n     * Prises count (statistics data)\n     *\n     * @var int\n     */\n    protected $_pricesCount = null;\n\n    /**\n     * Cloned Select after dispatching 'catalog_prepare_price_select' event\n     *\n     * @var Varien_Db_Select\n     */\n    protected $_catalogPreparePriceSelect = null;\n\n    /**\n     * Catalog factory instance\n     *\n     * @var Mage_Catalog_Model_Factory\n     */\n    protected $_factory;\n\n    /**\n     * Initialize factory\n     *\n     * @param Mage_Core_Model_Resource_Abstract $resource\n     * @param array $args\n     */\n    public function __construct($resource = null, array $args = array())\n    {\n        parent::__construct($resource);\n        $this->_factory = !empty($args['factory']) ? $args['factory'] : Mage::getSingleton('catalog/factory');\n    }\n\n    /**\n     * Get cloned Select after dispatching 'catalog_prepare_price_select' event\n     *\n     * @return Varien_Db_Select\n     */\n    public function getCatalogPreparedSelect()\n    {\n        return $this->_catalogPreparePriceSelect;\n    }\n\n    /**\n     * Prepare additional price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return $this\n     */\n    protected function _preparePriceExpressionParameters($select)\n    {\n        // prepare response object for event\n        $response = new Varien_Object();\n        $response->setAdditionalCalculations(array());\n        $tableAliases = array_keys($select->getPart(Zend_Db_Select::FROM));\n        if (in_array(self::INDEX_TABLE_ALIAS, $tableAliases)) {\n            $table = self::INDEX_TABLE_ALIAS;\n        } else {\n            $table = reset($tableAliases);\n        }\n\n        // prepare event arguments\n        $eventArgs = array(\n            'select'          => $select,\n            'table'           => $table,\n            'store_id'        => $this->getStoreId(),\n            'response_object' => $response\n        );\n\n        Mage::dispatchEvent('catalog_prepare_price_select', $eventArgs);\n\n        $additional   = join('', $response->getAdditionalCalculations());\n        $this->_priceExpression = $table . '.min_price';\n        $this->_additionalPriceExpression = $additional;\n        $this->_catalogPreparePriceSelect = clone $select;\n\n        return $this;\n    }\n\n    /**\n     * Get price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return string\n     */\n    public function getPriceExpression($select)\n    {\n        if (is_null($this->_priceExpression)) {\n            $this->_preparePriceExpressionParameters($select);\n        }\n        return $this->_priceExpression;\n    }\n\n    /**\n     * Get additional price expression sql part\n     *\n     * @param Varien_Db_Select $select\n     * @return string\n     */\n    public function getAdditionalPriceExpression($select)\n    {\n        if (is_null($this->_additionalPriceExpression)) {\n            $this->_preparePriceExpressionParameters($select);\n        }\n        return $this->_additionalPriceExpression;\n    }\n\n    /**\n     * Get currency rate\n     *\n     * @return float\n     */\n    public function getCurrencyRate()\n    {\n        return Mage::app()->getStore($this->getStoreId())->getCurrentCurrencyRate();\n    }\n\n    /**\n     * Retrieve Catalog Product Flat Helper object\n     *\n     * @return Mage_Catalog_Helper_Product_Flat\n     */\n    public function getFlatHelper()\n    {\n        return Mage::helper('catalog/product_flat');\n    }\n\n    /**\n     * Retrieve is flat enabled flag\n     * Return always false if magento run admin\n     *\n     * @return bool\n     */\n    public function isEnabledFlat()\n    {\n        // Flat Data can be used only on frontend\n        if (Mage::app()->getStore()->isAdmin() || $this->getFlatHelper()->isFlatCollectionDisabled()) {\n            return false;\n        }\n        $storeId = $this->getStoreId();\n        if (!isset($this->_flatEnabled[$storeId])) {\n            $flatHelper = $this->getFlatHelper();\n            $this->_flatEnabled[$storeId] = $flatHelper->isAvailable() && $flatHelper->isBuilt($storeId);\n        }\n        return $this->_flatEnabled[$storeId];\n    }\n\n    /**\n     * Initialize resources\n     *\n     */\n    protected function _construct()\n    {\n        if ($this->isEnabledFlat()) {\n            $this->_init('catalog/product', 'catalog/product_flat');\n        } else {\n            $this->_init('catalog/product');\n        }\n        $this->_initTables();\n    }\n\n    /**\n     * Define product website and category product tables\n     *\n     */\n    protected function _initTables()\n    {\n        $this->_productWebsiteTable = $this->getResource()->getTable('catalog/product_website');\n        $this->_productCategoryTable= $this->getResource()->getTable('catalog/category_product');\n    }\n\n    /**\n     * Standard resource collection initalization\n     *\n     * @inheritDoc\n     */\n    protected function _init($model, $entityModel = null)\n    {\n        if ($this->isEnabledFlat()) {\n            $entityModel = 'catalog/product_flat';\n        }\n\n        return parent::_init($model, $entityModel);\n    }\n\n    /**\n     * Prepare static entity fields\n     *\n     * @inheritDoc\n     */\n    protected function _prepareStaticFields()\n    {\n        if ($this->isEnabledFlat()) {\n            return $this;\n        }\n        return parent::_prepareStaticFields();\n    }\n\n    /**\n     * Retrieve collection empty item\n     * Redeclared for specifying id field name without getting resource model inside model\n     *\n     * @return Varien_Object\n     */\n    public function getNewEmptyItem()\n    {\n        $object = parent::getNewEmptyItem();\n        if ($this->isEnabledFlat()) {\n            $object->setIdFieldName($this->getEntity()->getIdFieldName());\n        }\n        return $object;\n    }\n\n    /**\n     * Set entity to use for attributes\n     *\n     * @inheritDoc\n     */\n    public function setEntity($entity)\n    {\n        if ($this->isEnabledFlat() && ($entity instanceof Mage_Core_Model_Resource_Db_Abstract)) {\n            $this->_entity = $entity;\n            return $this;\n        }\n        return parent::setEntity($entity);\n    }\n\n    /**\n     * Set Store scope for collection\n     *\n     * @param mixed $store\n     * @return $this\n     */\n    public function setStore($store)\n    {\n        parent::setStore($store);\n        if ($this->isEnabledFlat()) {\n            $this->getEntity()->setStoreId($this->getStoreId());\n        }\n        return $this;\n    }\n\n    /**\n     * Initialize collection select\n     * Redeclared for remove entity_type_id condition\n     * in catalog_product_entity we store just products\n     *\n     * @return $this\n     */\n    protected function _initSelect()\n    {\n        if ($this->isEnabledFlat()) {\n            $this->getSelect()\n                ->from(array(self::MAIN_TABLE_ALIAS => $this->getEntity()->getFlatTableName()), null)\n                ->where('e.status = ?', new Zend_Db_Expr(Mage_Catalog_Model_Product_Status::STATUS_ENABLED));\n            $this->addAttributeToSelect(array('entity_id', 'type_id', 'attribute_set_id'));\n            if ($this->getFlatHelper()->isAddChildData()) {\n                $this->getSelect()\n                    ->where('e.is_child = ?', 0);\n                $this->addAttributeToSelect(array('child_id', 'is_child'));\n            }\n        } else {\n            $this->getSelect()->from(array(self::MAIN_TABLE_ALIAS => $this->getEntity()->getEntityTable()));\n        }\n        return $this;\n    }\n\n    /**\n     * Load attributes into loaded entities\n     *\n     * @inheritDoc\n     */\n    public function _loadAttributes($printQuery = false, $logQuery = false)\n    {\n        if ($this->isEnabledFlat()) {\n            return $this;\n        }\n        return parent::_loadAttributes($printQuery, $logQuery);\n    }\n\n    /**\n     * Add attribute to entities in collection\n     * If $attribute=='*' select all attributes\n     *\n     * @inheritDoc\n     */\n    public function addAttributeToSelect($attribute, $joinType = false)\n    {\n        if ($this->isEnabledFlat()) {\n            if (!is_array($attribute)) {\n                $attribute = array($attribute);\n            }\n            foreach ($attribute as $attributeCode) {\n                if ($attributeCode == '*') {\n                    foreach ($this->getEntity()->getAllTableColumns() as $column) {\n                        $this->getSelect()->columns('e.' . $column);\n                        $this->_selectAttributes[$column] = $column;\n                        $this->_staticFields[$column]     = $column;\n                    }\n                } else {\n                    $columns = $this->getEntity()->getAttributeForSelect($attributeCode);\n                    if ($columns) {\n                        foreach ($columns as $alias => $column) {\n                            $this->getSelect()->columns(array($alias => 'e.' . $column));\n                            $this->_selectAttributes[$column] = $column;\n                            $this->_staticFields[$column]     = $column;\n                        }\n                    }\n                }\n            }\n            return $this;\n        }\n        return parent::addAttributeToSelect($attribute, $joinType);\n    }\n\n    /**\n     * Add tax class id attribute to select and join price rules data if needed\n     *\n     * @inheritDoc\n     */\n    protected function _beforeLoad()\n    {\n        Mage::dispatchEvent('catalog_product_collection_load_before', array('collection' => $this));\n\n        return parent::_beforeLoad();\n    }\n\n    /**\n     * Processing collection items after loading\n     * Adding url rewrites, minimal prices, final prices, tax percents\n     *\n     * @return $this\n     */\n    protected function _afterLoad()\n    {\n        if ($this->_addUrlRewrite) {\n            $this->_addUrlRewrite($this->_urlRewriteCategory);\n        }\n\n        if (count($this) > 0) {\n            Mage::dispatchEvent('catalog_product_collection_load_after', array('collection' => $this));\n        }\n\n        foreach ($this as $product) {\n            if ($product->isRecurring() && $profile = $product->getRecurringProfile()) {\n                $product->setRecurringProfile(Mage::helper('core/unserializeArray')->unserialize($profile));\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Prepare Url Data object\n     *\n     * @return $this\n     * @deprecated after 1.7.0.2\n     */\n    protected function _prepareUrlDataObject()\n    {\n        $objects = array();\n        /** @var Mage_Catalog_Model_Product $item */\n        foreach ($this->_items as $item) {\n            if ($this->getFlag('do_not_use_category_id')) {\n                $item->setDoNotUseCategoryId(true);\n            }\n            if (!$item->isVisibleInSiteVisibility() && $item->getItemStoreId()) {\n                $objects[$item->getEntityId()] = $item->getItemStoreId();\n            }\n        }\n\n        if ($objects && $this->hasFlag('url_data_object')) {\n            $objects = Mage::getResourceSingleton('catalog/url')\n                ->getRewriteByProductStore($objects);\n            foreach ($this->_items as $item) {\n                if (isset($objects[$item->getEntityId()])) {\n                    $object = new Varien_Object($objects[$item->getEntityId()]);\n                    $item->setUrlDataObject($object);\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add collection filters by identifiers\n     *\n     * @param mixed $productId\n     * @param boolean $exclude\n     * @return $this\n     */\n    public function addIdFilter($productId, $exclude = false)\n    {\n        if (empty($productId)) {\n            $this->_setIsLoaded(true);\n            return $this;\n        }\n        if (is_array($productId)) {\n            if (!empty($productId)) {\n                if ($exclude) {\n                    $condition = array('nin' => $productId);\n                } else {\n                    $condition = array('in' => $productId);\n                }\n            } else {\n                $condition = '';\n            }\n        } else {\n            if ($exclude) {\n                $condition = array('neq' => $productId);\n            } else {\n                $condition = $productId;\n            }\n        }\n        $this->addFieldToFilter('entity_id', $condition);\n        return $this;\n    }\n\n    /**\n     * Adding product website names to result collection\n     * Add for each product websites information\n     *\n     * @return $this\n     */\n    public function addWebsiteNamesToResult()\n    {\n        $productWebsites = array();\n        foreach ($this as $product) {\n            $productWebsites[$product->getId()] = array();\n        }\n\n        if (!empty($productWebsites)) {\n            $select = $this->getConnection()->select()\n                ->from(array('product_website' => $this->_productWebsiteTable))\n                ->join(\n                    array('website' => $this->getResource()->getTable('core/website')),\n                    'website.website_id = product_website.website_id',\n                    array('name')\n                )\n                ->where('product_website.product_id IN (?)', array_keys($productWebsites))\n                ->where('website.website_id > ?', 0);\n\n            $data = $this->getConnection()->fetchAll($select);\n            foreach ($data as $row) {\n                $productWebsites[$row['product_id']][] = $row['website_id'];\n            }\n        }\n\n        foreach ($this as $product) {\n            if (isset($productWebsites[$product->getId()])) {\n                $product->setData('websites', $productWebsites[$product->getId()]);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Add store availability filter. Include availability product\n     * for store website\n     *\n     * @param mixed $store\n     * @return $this\n     */\n    public function addStoreFilter($store = null)\n    {\n        if ($store === null) {\n            $store = $this->getStoreId();\n        }\n        $store = Mage::app()->getStore($store);\n\n        if (!$store->isAdmin()) {\n            $this->_productLimitationFilters['store_id'] = $store->getId();\n            $this->_applyProductLimitations();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add website filter to collection\n     *\n     * @param array|string|int $websites\n     * @return $this\n     */\n    public function addWebsiteFilter($websites = null)\n    {\n        if (!is_array($websites)) {\n            $websites = array(Mage::app()->getWebsite($websites)->getId());\n        }\n\n        $this->_productLimitationFilters['website_ids'] = $websites;\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Get filters applied to collection\n     *\n     * @return array\n     */\n    public function getLimitationFilters()\n    {\n        return $this->_productLimitationFilters;\n    }\n\n    /**\n     * Specify category filter for product collection\n     *\n     * @param Mage_Catalog_Model_Category $category\n     * @return $this\n     */\n    public function addCategoryFilter(Mage_Catalog_Model_Category $category)\n    {\n        $this->_productLimitationFilters['category_id'] = $category->getId();\n        if ($category->getIsAnchor()) {\n            unset($this->_productLimitationFilters['category_is_anchor']);\n        } else {\n            $this->_productLimitationFilters['category_is_anchor'] = 1;\n        }\n\n        if ($this->getStoreId() == Mage_Catalog_Model_Abstract::DEFAULT_STORE_ID) {\n            $this->_applyZeroStoreProductLimitations();\n        } else {\n            $this->_applyProductLimitations();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join minimal price attribute to result\n     *\n     * @return $this\n     */\n    public function joinMinimalPrice()\n    {\n        $this->addAttributeToSelect('price')\n             ->addAttributeToSelect('minimal_price');\n        return $this;\n    }\n\n    /**\n     * Retrieve max value by attribute\n     *\n     * @param string $attribute\n     * @return mixed\n     */\n    public function getMaxAttributeValue($attribute)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_max_value';\n        $fieldAlias    = 'max_' . $attributeCode;\n        $condition  = 'e.entity_id = ' . $tableAlias . '.entity_id\n            AND '.$this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array($fieldAlias => new Zend_Db_Expr('MAX('.$tableAlias.'.value)'))\n        )\n            ->group('e.entity_type_id');\n\n        $data = $this->getConnection()->fetchRow($select);\n        if (isset($data[$fieldAlias])) {\n            return $data[$fieldAlias];\n        }\n\n        return null;\n    }\n\n    /**\n     * Retrieve ranging product count for arrtibute range\n     *\n     * @param string $attribute\n     * @param int $range\n     * @return array\n     */\n    public function getAttributeValueCountByRange($attribute, $range)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_range_count_value';\n\n        $condition  = 'e.entity_id = ' . $tableAlias . '.entity_id\n            AND ' . $this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->reset(Zend_Db_Select::GROUP);\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array(\n                    'count_' . $attributeCode => new Zend_Db_Expr('COUNT(DISTINCT e.entity_id)'),\n                    'range_' . $attributeCode => new Zend_Db_Expr(\n                        'CEIL((' . $tableAlias . '.value+0.01)/' . $range . ')'\n                    )\n                 )\n        )\n            ->group('range_' . $attributeCode);\n\n        $data   = $this->getConnection()->fetchAll($select);\n        $res    = array();\n\n        foreach ($data as $row) {\n            $res[$row['range_' . $attributeCode]] = $row['count_' . $attributeCode];\n        }\n        return $res;\n    }\n\n    /**\n     * Retrieve product count by some value of attribute\n     *\n     * @param string $attribute\n     * @return array($value=>$count)\n     */\n    public function getAttributeValueCount($attribute)\n    {\n        $select        = clone $this->getSelect();\n        $attribute     = $this->getEntity()->getAttribute($attribute);\n        $attributeCode = $attribute->getAttributeCode();\n        $tableAlias    = $attributeCode . '_value_count';\n\n        $select->reset(Zend_Db_Select::GROUP);\n        $condition  = 'e.entity_id=' . $tableAlias . '.entity_id\n            AND '.$this->_getConditionSql($tableAlias . '.attribute_id', $attribute->getId());\n\n        $select->join(\n            array($tableAlias => $attribute->getBackend()->getTable()),\n            $condition,\n            array(\n                    'count_' . $attributeCode => new Zend_Db_Expr('COUNT(DISTINCT e.entity_id)'),\n                    'value_' . $attributeCode => new Zend_Db_Expr($tableAlias . '.value')\n                 )\n        )\n            ->group('value_' . $attributeCode);\n\n        $data   = $this->getConnection()->fetchAll($select);\n        $res    = array();\n\n        foreach ($data as $row) {\n            $res[$row['value_' . $attributeCode]] = $row['count_' . $attributeCode];\n        }\n        return $res;\n    }\n\n    /**\n     * Return all attribute values as array in form:\n     * array(\n     *   [entity_id_1] => array(\n     *          [store_id_1] => store_value_1,\n     *          [store_id_2] => store_value_2,\n     *          ...\n     *          [store_id_n] => store_value_n\n     *   ),\n     *   ...\n     * )\n     *\n     * @param string $attribute attribute code\n     * @return array\n     */\n    public function getAllAttributeValues($attribute)\n    {\n        /** @var Varien_Db_Select $select */\n        $select    = clone $this->getSelect();\n        $attribute = $this->getEntity()->getAttribute($attribute);\n\n        $select->reset()\n            ->from($attribute->getBackend()->getTable(), array('entity_id', 'store_id', 'value'))\n            ->where('attribute_id = ?', (int)$attribute->getId());\n\n        $data = $this->getConnection()->fetchAll($select);\n        $res  = array();\n\n        foreach ($data as $row) {\n            $res[$row['entity_id']][$row['store_id']] = $row['value'];\n        }\n\n        return $res;\n    }\n\n    /**\n     * Get SQL for get record count without left JOINs\n     *\n     * @return Varien_Db_Select\n     */\n    public function getSelectCountSql()\n    {\n        return $this->_getSelectCountSql();\n    }\n\n    /**\n     * Get SQL for get record count\n     *\n     * @param null $select\n     * @param bool $resetLeftJoins\n     * @return Varien_Db_Select\n     */\n    protected function _getSelectCountSql($select = null, $resetLeftJoins = true)\n    {\n        $this->_renderFilters();\n        $countSelect = (is_null($select)) ?\n            $this->_getClearSelect() :\n            $this->_buildClearSelect($select);\n        // Clear GROUP condition for count method\n        $countSelect->reset(Zend_Db_Select::GROUP);\n        $countSelect->columns('COUNT(DISTINCT e.entity_id)');\n        if ($resetLeftJoins) {\n            $countSelect->resetJoinLeft();\n        }\n        return $countSelect;\n    }\n\n    /**\n     * Prepare statistics data\n     *\n     * @return $this\n     */\n    protected function _prepareStatisticsData()\n    {\n        $select = clone $this->getSelect();\n        $priceExpression = $this->getPriceExpression($select) . ' ' . $this->getAdditionalPriceExpression($select);\n        $sqlEndPart = ') * ' . $this->getCurrencyRate() . ', 2)';\n        $select = $this->_getSelectCountSql($select, false);\n        $select->columns(array(\n            'max' => 'ROUND(MAX(' . $priceExpression . $sqlEndPart,\n            'min' => 'ROUND(MIN(' . $priceExpression . $sqlEndPart,\n            'std' => $this->getConnection()->getStandardDeviationSql('ROUND((' . $priceExpression . $sqlEndPart)\n        ));\n        $select->where($this->getPriceExpression($select) . ' IS NOT NULL');\n        $row = $this->getConnection()->fetchRow($select, $this->_bindParams, Zend_Db::FETCH_NUM);\n        $this->_pricesCount = (int)$row[0];\n        $this->_maxPrice = (float)$row[1];\n        $this->_minPrice = (float)$row[2];\n        $this->_priceStandardDeviation = (float)$row[3];\n\n        return $this;\n    }\n\n    /**\n     * Retreive clear select\n     *\n     * @return Varien_Db_Select\n     */\n    protected function _getClearSelect()\n    {\n        return $this->_buildClearSelect();\n    }\n\n    /**\n     * Build clear select\n     *\n     * @param Varien_Db_Select $select\n     * @return Varien_Db_Select\n     */\n    protected function _buildClearSelect($select = null)\n    {\n        if (is_null($select)) {\n            $select = clone $this->getSelect();\n        }\n        $select->reset(Zend_Db_Select::ORDER);\n        $select->reset(Zend_Db_Select::LIMIT_COUNT);\n        $select->reset(Zend_Db_Select::LIMIT_OFFSET);\n        $select->reset(Zend_Db_Select::COLUMNS);\n\n        return $select;\n    }\n\n    /**\n     * Retrive all ids for collection\n     *\n     * @inheritDoc\n     */\n    public function getAllIds($limit = null, $offset = null)\n    {\n        $idsSelect = $this->_getClearSelect();\n        $idsSelect->columns('e.' . $this->getEntity()->getIdFieldName());\n        $idsSelect->limit($limit, $offset);\n        $idsSelect->resetJoinLeft();\n\n        return $this->getConnection()->fetchCol($idsSelect, $this->_bindParams);\n    }\n\n    /**\n     * Retreive product count select for categories\n     *\n     * @return Varien_Db_Select\n     */\n    public function getProductCountSelect()\n    {\n        if ($this->_productCountSelect === null) {\n            $this->_productCountSelect = clone $this->getSelect();\n            $this->_productCountSelect->reset(Zend_Db_Select::COLUMNS)\n                ->reset(Zend_Db_Select::GROUP)\n                ->reset(Zend_Db_Select::ORDER)\n                ->distinct(false)\n                ->join(\n                    array('count_table' => $this->getTable('catalog/category_product_index')),\n                    'count_table.product_id = e.entity_id',\n                    array(\n                        'count_table.category_id',\n                        'product_count' => new Zend_Db_Expr('COUNT(DISTINCT count_table.product_id)')\n                    )\n                )\n                ->where('count_table.store_id = ?', $this->getStoreId())\n                ->group('count_table.category_id');\n        }\n\n        return $this->_productCountSelect;\n    }\n\n    /**\n     * Destruct product count select\n     *\n     * @return $this\n     */\n    public function unsProductCountSelect()\n    {\n        $this->_productCountSelect = null;\n        return $this;\n    }\n\n    /**\n     * Adding product count to categories collection\n     *\n     * @param Mage_Eav_Model_Entity_Collection_Abstract $categoryCollection\n     * @return $this\n     */\n    public function addCountToCategories($categoryCollection)\n    {\n        $isAnchor    = array();\n        $isNotAnchor = array();\n        foreach ($categoryCollection as $category) {\n            if ($category->getIsAnchor()) {\n                $isAnchor[]    = $category->getId();\n            } else {\n                $isNotAnchor[] = $category->getId();\n            }\n        }\n        $productCounts = array();\n        if ($isAnchor || $isNotAnchor) {\n            $select = $this->getProductCountSelect();\n\n            Mage::dispatchEvent(\n                'catalog_product_collection_before_add_count_to_categories',\n                array('collection' => $this)\n            );\n\n            if ($isAnchor) {\n                $anchorStmt = clone $select;\n                $anchorStmt->limit(); //reset limits\n                $anchorStmt->where('count_table.category_id IN (?)', $isAnchor);\n                $productCounts += $this->getConnection()->fetchPairs($anchorStmt);\n                $anchorStmt = null;\n            }\n            if ($isNotAnchor) {\n                $notAnchorStmt = clone $select;\n                $notAnchorStmt->limit(); //reset limits\n                $notAnchorStmt->where('count_table.category_id IN (?)', $isNotAnchor);\n                $notAnchorStmt->where('count_table.is_parent = 1');\n                $productCounts += $this->getConnection()->fetchPairs($notAnchorStmt);\n                $notAnchorStmt = null;\n            }\n            $select = null;\n            $this->unsProductCountSelect();\n        }\n\n        foreach ($categoryCollection as $category) {\n            $_count = 0;\n            if (isset($productCounts[$category->getId()])) {\n                $_count = $productCounts[$category->getId()];\n            }\n            $category->setProductCount($_count);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retrieve unique attribute set ids in collection\n     *\n     * @return array\n     */\n    public function getSetIds()\n    {\n        $select = clone $this->getSelect();\n        /** @var Varien_Db_Select $select */\n        $select->reset(Zend_Db_Select::COLUMNS);\n        $select->distinct(true);\n        $select->columns('attribute_set_id');\n        return $this->getConnection()->fetchCol($select);\n    }\n\n    /**\n     * Return array of unique product type ids in collection\n     *\n     * @return array\n     */\n    public function getProductTypeIds()\n    {\n        $select = clone $this->getSelect();\n        /** @var Varien_Db_Select $select */\n        $select->reset(Zend_Db_Select::COLUMNS);\n        $select->distinct(true);\n        $select->columns('type_id');\n        return $this->getConnection()->fetchCol($select);\n    }\n\n    /**\n     * Joins url rewrite rules to collection\n     *\n     * @deprecated after 1.7.0.2. Method is not used anywhere in the code.\n     * @return $this\n     */\n    public function joinUrlRewrite()\n    {\n        $this->joinTable(\n            'core/url_rewrite',\n            'entity_id=entity_id',\n            array('request_path'),\n            '{{table}}.type = ' . Mage_Core_Model_Url_Rewrite::TYPE_PRODUCT,\n            'left'\n        );\n\n        return $this;\n    }\n\n    /**\n     * Add URL rewrites data to product\n     * If collection loadded - run processing else set flag\n     *\n     * @param int|string $categoryId\n     * @return $this\n     */\n    public function addUrlRewrite($categoryId = '')\n    {\n        $this->_addUrlRewrite = true;\n        if (Mage::getStoreConfig(Mage_Catalog_Helper_Product::XML_PATH_PRODUCT_URL_USE_CATEGORY, $this->getStoreId())) {\n            $this->_urlRewriteCategory = $categoryId;\n        } else {\n            $this->_urlRewriteCategory = 0;\n        }\n\n        if ($this->isLoaded()) {\n            $this->_addUrlRewrite();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add URL rewrites to collection\n     *\n     */\n    protected function _addUrlRewrite()\n    {\n        $urlRewrites = null;\n        if ($this->_cacheConf) {\n            if (!($urlRewrites = Mage::app()->loadCache($this->_cacheConf['prefix'] . 'urlrewrite'))) {\n                $urlRewrites = null;\n            } else {\n                $urlRewrites = unserialize($urlRewrites);\n            }\n        }\n\n        if (!$urlRewrites) {\n            $productIds = array();\n            foreach ($this->getItems() as $item) {\n                $productIds[] = $item->getEntityId();\n            }\n            if (!count($productIds)) {\n                return;\n            }\n\n            $select = $this->_factory->getProductUrlRewriteHelper()\n                ->getTableSelect($productIds, $this->_urlRewriteCategory, Mage::app()->getStore($this->getStoreId())->getId());\n\n            $urlRewrites = array();\n            foreach ($this->getConnection()->fetchAll($select) as $row) {\n                if (!isset($urlRewrites[$row['product_id']])) {\n                    $urlRewrites[$row['product_id']] = $row['request_path'];\n                }\n            }\n\n            if ($this->_cacheConf) {\n                Mage::app()->saveCache(\n                    serialize($urlRewrites),\n                    $this->_cacheConf['prefix'] . 'urlrewrite',\n                    array_merge($this->_cacheConf['tags'], array(Mage_Catalog_Model_Product_Url::CACHE_TAG)),\n                    $this->_cacheLifetime\n                );\n            }\n        }\n\n        foreach ($this->getItems() as $item) {\n            if (empty($this->_urlRewriteCategory)) {\n                $item->setDoNotUseCategoryId(true);\n            }\n            if (isset($urlRewrites[$item->getEntityId()])) {\n                $item->setData('request_path', $urlRewrites[$item->getEntityId()]);\n            } else {\n                $item->setData('request_path', false);\n            }\n        }\n    }\n\n    /**\n     * Add minimal price data to result\n     *\n     * @deprecated use addPriceData\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    public function addMinimalPrice()\n    {\n        return $this->addPriceData();\n    }\n\n    /**\n     * Add minimal price to product collection\n     *\n     * @deprecated sinse 1.3.2.2\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    protected function _addMinimalPrice()\n    {\n        return $this;\n    }\n\n    /**\n     * Add price data for calculate final price\n     *\n     * @deprecated use addPriceData\n     * @see Mage_Catalog_Model_Resource_Product_Collection::addPriceData\n     *\n     * @return $this\n     */\n    public function addFinalPrice()\n    {\n        return $this->addPriceData();\n    }\n\n    /**\n     * Join prices from price rules to products collection\n     *\n     * @return $this\n     */\n    protected function _joinPriceRules()\n    {\n        if ($this->isEnabledFlat()) {\n            $customerGroup = Mage::getSingleton('customer/session')->getCustomerGroupId();\n            $priceColumn   = 'e.display_price_group_' . $customerGroup;\n            $this->getSelect()->columns(array('_rule_price' => $priceColumn));\n\n            return $this;\n        }\n        if (!Mage::helper('catalog')->isModuleEnabled('Mage_CatalogRule')) {\n            return $this;\n        }\n        $wId = Mage::app()->getWebsite()->getId();\n        $gId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n\n        $storeDate = Mage::app()->getLocale()->storeTimeStamp($this->getStoreId());\n        $conditions  = 'price_rule.product_id = e.entity_id AND ';\n        $conditions .= \"price_rule.rule_date = '\".$this->getResource()->formatDate($storeDate, false).\"' AND \";\n        $conditions .= $this->getConnection()->quoteInto('price_rule.website_id = ? AND', $wId);\n        $conditions .= $this->getConnection()->quoteInto('price_rule.customer_group_id = ?', $gId);\n\n        $this->getSelect()->joinLeft(\n            array('price_rule' => $this->getTable('catalogrule/rule_product_price')),\n            $conditions,\n            array('rule_price' => 'rule_price')\n        );\n        return $this;\n    }\n\n    /**\n     * Add final price to the product\n     *\n     * @return $this\n     */\n    protected function _addFinalPrice()\n    {\n        foreach ($this->_items as $product) {\n            $basePrice = $product->getPrice();\n            $specialPrice = $product->getSpecialPrice();\n            $specialPriceFrom = $product->getSpecialFromDate();\n            $specialPriceTo = $product->getSpecialToDate();\n            if ($this->isEnabledFlat()) {\n                $rulePrice = null;\n                if ($product->getData('_rule_price') != $basePrice) {\n                    $rulePrice = $product->getData('_rule_price');\n                }\n            } else {\n                $rulePrice = $product->getData('_rule_price');\n            }\n\n            $finalPrice = $product->getPriceModel()->calculatePrice(\n                $basePrice,\n                $specialPrice,\n                $specialPriceFrom,\n                $specialPriceTo,\n                $rulePrice,\n                null,\n                null,\n                $product->getId()\n            );\n\n            $product->setCalculatedFinalPrice($finalPrice);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retreive all ids\n     *\n     * @param boolean $resetCache\n     * @return array\n     */\n    public function getAllIdsCache($resetCache = false)\n    {\n        $ids = null;\n        if (!$resetCache) {\n            $ids = $this->_allIdsCache;\n        }\n\n        if (is_null($ids)) {\n            $ids = $this->getAllIds();\n            $this->setAllIdsCache($ids);\n        }\n\n        return $ids;\n    }\n\n    /**\n     * Set all ids\n     *\n     * @param array $value\n     * @return $this\n     */\n    public function setAllIdsCache($value)\n    {\n        $this->_allIdsCache = $value;\n        return $this;\n    }\n\n    /**\n     * Add Price Data to result\n     *\n     * @param int $customerGroupId\n     * @param int $websiteId\n     * @return $this\n     */\n    public function addPriceData($customerGroupId = null, $websiteId = null)\n    {\n        $this->_productLimitationFilters['use_price_index'] = true;\n\n        if (!isset($this->_productLimitationFilters['customer_group_id']) && is_null($customerGroupId)) {\n            $customerGroupId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n        }\n        if (!isset($this->_productLimitationFilters['website_id']) && is_null($websiteId)) {\n            $websiteId       = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n        }\n\n        if (!is_null($customerGroupId)) {\n            $this->_productLimitationFilters['customer_group_id'] = $customerGroupId;\n        }\n        if (!is_null($websiteId)) {\n            $this->_productLimitationFilters['website_id'] = $websiteId;\n        }\n\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Add attribute to filter\n     *\n     * @param Mage_Eav_Model_Entity_Attribute_Abstract|string $attribute\n     * @param array $condition\n     * @inheritDoc\n     */\n    public function addAttributeToFilter($attribute, $condition = null, $joinType = 'inner')\n    {\n        if ($this->isEnabledFlat()) {\n            if ($attribute instanceof Mage_Eav_Model_Entity_Attribute_Abstract) {\n                $attribute = $attribute->getAttributeCode();\n            }\n\n            if (is_array($attribute)) {\n                $sqlArr = array();\n                foreach ($attribute as $condition) {\n                    $sqlArr[] = $this->_getAttributeConditionSql($condition['attribute'], $condition, $joinType);\n                }\n                $conditionSql = '('.join(') OR (', $sqlArr).')';\n                $this->getSelect()->where($conditionSql);\n                return $this;\n            }\n\n            if (!isset($this->_selectAttributes[$attribute])) {\n                $this->addAttributeToSelect($attribute);\n            }\n\n            if (isset($this->_selectAttributes[$attribute])) {\n                $this->getSelect()->where($this->_getConditionSql('e.' . $attribute, $condition));\n            }\n\n            return $this;\n        }\n\n        $this->_allIdsCache = null;\n\n        if (is_string($attribute) && $attribute == 'is_saleable') {\n            $columns = $this->getSelect()->getPart(Zend_Db_Select::COLUMNS);\n            foreach ($columns as $columnEntry) {\n                list($correlationName, $column, $alias) = $columnEntry;\n                if ($alias == 'is_saleable') {\n                    if ($column instanceof Zend_Db_Expr) {\n                        $field = $column;\n                    } else {\n                        $adapter = $this->getSelect()->getAdapter();\n                        if (empty($correlationName)) {\n                            $field = $adapter->quoteColumnAs($column, $alias, true);\n                        } else {\n                            $field = $adapter->quoteColumnAs(array($correlationName, $column), $alias, true);\n                        }\n                    }\n                    $this->getSelect()->where(\"{$field} = ?\", $condition);\n                    break;\n                }\n            }\n\n            return $this;\n        } else {\n            return parent::addAttributeToFilter($attribute, $condition, $joinType);\n        }\n    }\n\n    /**\n     * Add requere tax percent flag for product collection\n     *\n     * @return $this\n     */\n    public function addTaxPercents()\n    {\n        $this->_addTaxPercents = true;\n        return $this;\n    }\n\n    /**\n     * Get require tax percent flag value\n     *\n     * @return bool\n     */\n    public function requireTaxPercent()\n    {\n        return $this->_addTaxPercents;\n    }\n\n    /**\n     * Enter description here ...\n     *\n     * @deprecated from 1.3.0\n     *\n     */\n    protected function _addTaxPercents()\n    {\n        $classToRate = array();\n        $request = Mage::getSingleton('tax/calculation')->getRateRequest();\n        foreach ($this as &$item) {\n            if (null === $item->getTaxClassId()) {\n                $item->setTaxClassId($item->getMinimalTaxClassId());\n            }\n            if (!isset($classToRate[$item->getTaxClassId()])) {\n                $request->setProductClassId($item->getTaxClassId());\n                $classToRate[$item->getTaxClassId()] = Mage::getSingleton('tax/calculation')->getRate($request);\n            }\n            $item->setTaxPercent($classToRate[$item->getTaxClassId()]);\n        }\n    }\n\n    /**\n     * Adding product custom options to result collection\n     *\n     * @return $this\n     */\n    public function addOptionsToResult()\n    {\n        $productIds = array();\n        foreach ($this as $product) {\n            $productIds[] = $product->getId();\n        }\n        if (!empty($productIds)) {\n            $options = Mage::getModel('catalog/product_option')\n                ->getCollection()\n                ->addTitleToResult(Mage::app()->getStore()->getId())\n                ->addPriceToResult(Mage::app()->getStore()->getId())\n                ->addProductToFilter($productIds)\n                ->addValuesToResult();\n\n            foreach ($options as $option) {\n                if ($this->getItemById($option->getProductId())) {\n                    $this->getItemById($option->getProductId())->addOption($option);\n                }\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Filter products with required options\n     *\n     * @return $this\n     */\n    public function addFilterByRequiredOptions()\n    {\n        $this->addAttributeToFilter('required_options', array(array('neq' => '1'), array('null' => true)), 'left');\n        return $this;\n    }\n\n    /**\n     * Set product visibility filter for enabled products\n     *\n     * @param array $visibility\n     * @return $this\n     */\n    public function setVisibility($visibility)\n    {\n        $this->_productLimitationFilters['visibility'] = $visibility;\n        $this->_applyProductLimitations();\n\n        return $this;\n    }\n\n    /**\n     * Add attribute to sort order\n     *\n     * @inheritDoc\n     */\n    public function addAttributeToSort($attribute, $dir = self::SORT_ORDER_ASC)\n    {\n        if ($attribute == 'position') {\n            if (isset($this->_joinFields[$attribute])) {\n                $this->getSelect()->order($this->_getAttributeFieldName($attribute) . ' ' . $dir);\n                return $this;\n            }\n            if ($this->isEnabledFlat()) {\n                $this->getSelect()->order(\"cat_index_position {$dir}\");\n            }\n            // optimize if using cat index\n            $filters = $this->_productLimitationFilters;\n            if (isset($filters['category_id']) || isset($filters['visibility'])) {\n                $this->getSelect()->order('cat_index.position ' . $dir);\n            } else {\n                $this->getSelect()->order('e.entity_id ' . $dir);\n            }\n\n            return $this;\n        } elseif ($attribute == 'is_saleable') {\n            $this->getSelect()->order(\"is_saleable \" . $dir);\n            return $this;\n        }\n\n        $storeId = $this->getStoreId();\n        if ($attribute == 'price' && $storeId != 0) {\n            $this->addPriceData();\n            $this->getSelect()->order(\"price_index.min_price {$dir}\");\n\n            return $this;\n        }\n\n        if ($this->isEnabledFlat()) {\n            $column = $this->getEntity()->getAttributeSortColumn($attribute);\n\n            if ($column) {\n                $this->getSelect()->order(\"e.{$column} {$dir}\");\n            } elseif (isset($this->_joinFields[$attribute])) {\n                $this->getSelect()->order($this->_getAttributeFieldName($attribute) . ' ' . $dir);\n            }\n\n            return $this;\n        } else {\n            $attrInstance = $this->getEntity()->getAttribute($attribute);\n            if ($attrInstance && $attrInstance->usesSource()) {\n                $attrInstance->getSource()\n                    ->addValueSortToCollection($this, $dir);\n                return $this;\n            }\n        }\n\n        return parent::addAttributeToSort($attribute, $dir);\n    }\n\n    /**\n     * Prepare limitation filters\n     *\n     * @return $this\n     */\n    protected function _prepareProductLimitationFilters()\n    {\n        if (isset($this->_productLimitationFilters['visibility'])\n            && !isset($this->_productLimitationFilters['store_id'])\n        ) {\n            $this->_productLimitationFilters['store_id'] = $this->getStoreId();\n        }\n        if (isset($this->_productLimitationFilters['category_id'])\n            && !isset($this->_productLimitationFilters['store_id'])\n        ) {\n            $this->_productLimitationFilters['store_id'] = $this->getStoreId();\n        }\n        if (isset($this->_productLimitationFilters['store_id'])\n            && isset($this->_productLimitationFilters['visibility'])\n            && !isset($this->_productLimitationFilters['category_id'])\n        ) {\n            $this->_productLimitationFilters['category_id'] = Mage::app()\n                ->getStore($this->_productLimitationFilters['store_id'])\n                ->getRootCategoryId();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join website product limitation\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinWebsite()\n    {\n        $joinWebsite = false;\n        $filters     = $this->_productLimitationFilters;\n        $conditions  = array('product_website.product_id = e.entity_id');\n\n        if (isset($filters['website_ids'])) {\n            $joinWebsite = true;\n            if (count($filters['website_ids']) > 1) {\n                $this->getSelect()->distinct(true);\n            }\n            $conditions[] = $this->getConnection()\n                ->quoteInto('product_website.website_id IN(?)', $filters['website_ids']);\n        } elseif (isset($filters['store_id'])\n            && (!isset($filters['visibility']) && !isset($filters['category_id']))\n            && !$this->isEnabledFlat()\n        ) {\n            $joinWebsite = true;\n            $websiteId = Mage::app()->getStore($filters['store_id'])->getWebsiteId();\n            $conditions[] = $this->getConnection()\n                ->quoteInto('product_website.website_id = ?', $websiteId);\n        }\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['product_website'])) {\n            if (!$joinWebsite) {\n                unset($fromPart['product_website']);\n            } else {\n                $fromPart['product_website']['joinCondition'] = join(' AND ', $conditions);\n            }\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } elseif ($joinWebsite) {\n            $this->getSelect()->join(\n                array('product_website' => $this->getTable('catalog/product_website')),\n                join(' AND ', $conditions),\n                array()\n            );\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join additional (alternative) store visibility filter\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinStore()\n    {\n        $filters = $this->_productLimitationFilters;\n        if (!isset($filters['store_table'])) {\n            return $this;\n        }\n\n        $hasColumn = false;\n        foreach ($this->getSelect()->getPart(Zend_Db_Select::COLUMNS) as $columnEntry) {\n            list(,,$alias) = $columnEntry;\n            if ($alias == 'visibility') {\n                $hasColumn = true;\n            }\n        }\n        if (!$hasColumn) {\n            $this->getSelect()->columns('visibility', 'cat_index');\n        }\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (!isset($fromPart['store_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_index' => $this->getTable('core/store')),\n                'store_index.store_id = ' . $filters['store_table'] . '.store_id',\n                array()\n            );\n        }\n        if (!isset($fromPart['store_group_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_group_index' => $this->getTable('core/store_group')),\n                'store_index.group_id = store_group_index.group_id',\n                array()\n            );\n        }\n        if (!isset($fromPart['store_cat_index'])) {\n            $this->getSelect()->joinLeft(\n                array('store_cat_index' => $this->getTable('catalog/category_product_index')),\n                join(' AND ', array(\n                    'store_cat_index.product_id = e.entity_id',\n                    'store_cat_index.store_id = ' . $filters['store_table'] . '.store_id',\n                    'store_cat_index.category_id=store_group_index.root_category_id'\n                )),\n                array('store_visibility' => 'visibility')\n            );\n        }\n        // Avoid column duplication problems\n        Mage::getResourceHelper('core')->prepareColumnsList($this->getSelect());\n\n        $whereCond = join(' OR ', array(\n            $this->getConnection()->quoteInto('cat_index.visibility IN(?)', $filters['visibility']),\n            $this->getConnection()->quoteInto('store_cat_index.visibility IN(?)', $filters['visibility'])\n        ));\n\n        $wherePart = $this->getSelect()->getPart(Zend_Db_Select::WHERE);\n        $hasCond   = false;\n        foreach ($wherePart as $cond) {\n            if ($cond == '(' . $whereCond . ')') {\n                $hasCond = true;\n            }\n        }\n\n        if (!$hasCond) {\n            $this->getSelect()->where($whereCond);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Join Product Price Table\n     *\n     * @return $this\n     */\n    protected function _productLimitationJoinPrice()\n    {\n        return $this->_productLimitationPrice();\n    }\n\n    /**\n     * Join Product Price Table with left-join possibility\n     *\n     * @param bool $joinLeft\n     * @return $this\n     * @throws Zend_Db_Exception\n     * @throws Zend_Db_Select_Exception\n     * @see Mage_Catalog_Model_Resource_Product_Collection::_productLimitationJoinPrice()\n     */\n    protected function _productLimitationPrice($joinLeft = false)\n    {\n        $filters = $this->_productLimitationFilters;\n        if (empty($filters['use_price_index'])) {\n            return $this;\n        }\n\n        $helper     = Mage::getResourceHelper('core');\n        $connection = $this->getConnection();\n        $select     = $this->getSelect();\n        $joinCond   = join(' AND ', array(\n            'price_index.entity_id = e.entity_id',\n            $connection->quoteInto('price_index.website_id = ?', $filters['website_id']),\n            $connection->quoteInto('price_index.customer_group_id = ?', $filters['customer_group_id'])\n        ));\n\n        $fromPart = $select->getPart(Zend_Db_Select::FROM);\n        if (!isset($fromPart['price_index'])) {\n            $least       = $connection->getLeastSql(array('price_index.min_price', 'price_index.tier_price'));\n            $minimalExpr = $connection->getCheckSql(\n                'price_index.tier_price IS NOT NULL',\n                $least,\n                'price_index.min_price'\n            );\n            $colls       = array('price', 'tax_class_id', 'final_price',\n                'minimal_price' => $minimalExpr , 'min_price', 'max_price', 'tier_price');\n            $tableName = array('price_index' => $this->getTable('catalog/product_index_price'));\n            if ($joinLeft) {\n                $select->joinLeft($tableName, $joinCond, $colls);\n            } else {\n                $select->join($tableName, $joinCond, $colls);\n            }\n            // Set additional field filters\n            foreach ($this->_priceDataFieldFilters as $filterData) {\n                $select->where(call_user_func_array('sprintf', $filterData));\n            }\n        } else {\n            $fromPart['price_index']['joinCondition'] = $joinCond;\n            $select->setPart(Zend_Db_Select::FROM, $fromPart);\n        }\n        //Clean duplicated fields\n        $helper->prepareColumnsList($select);\n\n\n        return $this;\n    }\n\n    /**\n     * Apply front-end price limitation filters to the collection\n     *\n     * @return $this\n     */\n    public function applyFrontendPriceLimitations()\n    {\n        $this->_productLimitationFilters['use_price_index'] = true;\n        if (!isset($this->_productLimitationFilters['customer_group_id'])) {\n            $customerGroupId = Mage::getSingleton('customer/session')->getCustomerGroupId();\n            $this->_productLimitationFilters['customer_group_id'] = $customerGroupId;\n        }\n        if (!isset($this->_productLimitationFilters['website_id'])) {\n            $websiteId = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n            $this->_productLimitationFilters['website_id'] = $websiteId;\n        }\n        $this->_applyProductLimitations();\n        return $this;\n    }\n\n    /**\n     * Apply limitation filters to collection\n     * Method allows using one time category product index table (or product website table)\n     * for different combinations of store_id/category_id/visibility filter states\n     * Method supports multiple changes in one collection object for this parameters\n     *\n     * @return $this\n     */\n    protected function _applyProductLimitations()\n    {\n        Mage::dispatchEvent('catalog_product_collection_apply_limitations_before', array(\n            'collection'  => $this,\n            'category_id' => isset($this->_productLimitationFilters['category_id'])\n                ? $this->_productLimitationFilters['category_id']\n                : null,\n        ));\n        $this->_prepareProductLimitationFilters();\n        $this->_productLimitationJoinWebsite();\n        $this->_productLimitationJoinPrice();\n        $filters = $this->_productLimitationFilters;\n\n        if (!isset($filters['category_id']) && !isset($filters['visibility'])) {\n            return $this;\n        }\n\n        $conditions = array(\n            'cat_index.product_id=e.entity_id',\n            $this->getConnection()->quoteInto('cat_index.store_id=?', $filters['store_id'])\n        );\n        if (isset($filters['visibility']) && !isset($filters['store_table'])) {\n            $conditions[] = $this->getConnection()\n                ->quoteInto('cat_index.visibility IN(?)', $filters['visibility']);\n        }\n\n        if (!$this->getFlag('disable_root_category_filter')) {\n            $conditions[] = $this->getConnection()->quoteInto('cat_index.category_id = ?', $filters['category_id']);\n        }\n\n        if (isset($filters['category_is_anchor'])) {\n            $conditions[] = $this->getConnection()\n                ->quoteInto('cat_index.is_parent=?', $filters['category_is_anchor']);\n        }\n\n        $joinCond = join(' AND ', $conditions);\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['cat_index'])) {\n            $fromPart['cat_index']['joinCondition'] = $joinCond;\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } else {\n            $this->getSelect()->join(\n                array('cat_index' => $this->getTable('catalog/category_product_index')),\n                $joinCond,\n                array('cat_index_position' => 'position')\n            );\n        }\n\n        $this->_productLimitationJoinStore();\n\n        Mage::dispatchEvent('catalog_product_collection_apply_limitations_after', array(\n            'collection' => $this\n        ));\n\n        return $this;\n    }\n\n    /**\n     * Apply limitation filters to collection base on API\n     * Method allows using one time category product table\n     * for combinations of category_id filter states\n     *\n     * @return $this\n     */\n    protected function _applyZeroStoreProductLimitations()\n    {\n        $filters = $this->_productLimitationFilters;\n\n        $conditions = array(\n            'cat_pro.product_id=e.entity_id',\n            $this->getConnection()->quoteInto('cat_pro.category_id=?', $filters['category_id'])\n        );\n        $joinCond = join(' AND ', $conditions);\n\n        $fromPart = $this->getSelect()->getPart(Zend_Db_Select::FROM);\n        if (isset($fromPart['cat_pro'])) {\n            $fromPart['cat_pro']['joinCondition'] = $joinCond;\n            $this->getSelect()->setPart(Zend_Db_Select::FROM, $fromPart);\n        } else {\n            $this->getSelect()->join(\n                array('cat_pro' => $this->getTable('catalog/category_product')),\n                $joinCond,\n                array('cat_index_position' => 'position')\n            );\n        }\n        $this->_joinFields['position'] = array(\n            'table' => 'cat_pro',\n            'field' => 'position',\n        );\n\n        return $this;\n    }\n\n    /**\n     * Add category ids to loaded items\n     *\n     * @return $this\n     */\n    public function addCategoryIds()\n    {\n        if ($this->getFlag('category_ids_added')) {\n            return $this;\n        }\n        $ids = array_keys($this->_items);\n        if (empty($ids)) {\n            return $this;\n        }\n\n        $select = $this->getConnection()->select();\n\n        $select->from($this->_productCategoryTable, array('product_id', 'category_id'));\n        $select->where('product_id IN (?)', $ids);\n\n        $data = $this->getConnection()->fetchAll($select);\n\n        $categoryIds = array();\n        foreach ($data as $info) {\n            if (isset($categoryIds[$info['product_id']])) {\n                $categoryIds[$info['product_id']][] = $info['category_id'];\n            } else {\n                $categoryIds[$info['product_id']] = array($info['category_id']);\n            }\n        }\n\n\n        foreach ($this->getItems() as $item) {\n            $productId = $item->getId();\n            if (isset($categoryIds[$productId])) {\n                $item->setCategoryIds($categoryIds[$productId]);\n            } else {\n                $item->setCategoryIds(array());\n            }\n        }\n\n        $this->setFlag('category_ids_added', true);\n        return $this;\n    }\n\n    /**\n     * Add tier price data to loaded items\n     *\n     * @return $this\n     */\n    public function addTierPriceData()\n    {\n        if ($this->getFlag('tier_price_added')) {\n            return $this;\n        }\n\n        $tierPrices = array();\n        $productIds = array();\n        foreach ($this->getItems() as $item) {\n            $productIds[] = $item->getId();\n            $tierPrices[$item->getId()] = array();\n        }\n        if (!$productIds) {\n            return $this;\n        }\n\n        /** @var Mage_Catalog_Model_Resource_Eav_Attribute $attribute */\n        $attribute = $this->getAttribute('tier_price');\n        if ($attribute->isScopeGlobal()) {\n            $websiteId = 0;\n        } elseif ($this->getStoreId()) {\n            $websiteId = Mage::app()->getStore($this->getStoreId())->getWebsiteId();\n        }\n\n        $adapter   = $this->getConnection();\n        $columns   = array(\n            'price_id'      => 'value_id',\n            'website_id'    => 'website_id',\n            'all_groups'    => 'all_groups',\n            'cust_group'    => 'customer_group_id',\n            'price_qty'     => 'qty',\n            'price'         => 'value',\n            'product_id'    => 'entity_id'\n        );\n        $select  = $adapter->select()\n            ->from($this->getTable('catalog/product_attribute_tier_price'), $columns)\n            ->where('entity_id IN(?)', $productIds)\n            ->order(array('entity_id','qty'));\n\n        if ($websiteId == '0') {\n            $select->where('website_id = ?', $websiteId);\n        } else {\n            $select->where('website_id IN(?)', array('0', $websiteId));\n        }\n\n        foreach ($adapter->fetchAll($select) as $row) {\n            $tierPrices[$row['product_id']][] = array(\n                'website_id'    => $row['website_id'],\n                'cust_group'    => $row['all_groups'] ? Mage_Customer_Model_Group::CUST_GROUP_ALL : $row['cust_group'],\n                'price_qty'     => $row['price_qty'],\n                'price'         => $row['price'],\n                'website_price' => $row['price'],\n\n            );\n        }\n\n        /* @var Mage_Catalog_Model_Product_Attribute_Backend_Tierprice $backend */\n        $backend = $attribute->getBackend();\n\n        foreach ($this->getItems() as $item) {\n            $data = $tierPrices[$item->getId()];\n            if (!empty($data) && $websiteId) {\n                $data = $backend->preparePriceData($data, $item->getTypeId(), $websiteId);\n            }\n            $item->setData('tier_price', $data);\n        }\n\n        $this->setFlag('tier_price_added', true);\n        return $this;\n    }\n\n    /**\n     * Add field comparison expression\n     *\n     * @param string $comparisonFormat - expression for sprintf()\n     * @param array $fields - list of fields\n     * @return $this\n     * @throws Exception\n     */\n    public function addPriceDataFieldFilter($comparisonFormat, $fields)\n    {\n        if (!preg_match('/^%s( (<|>|=|<=|>=|<>) %s)*$/', $comparisonFormat)) {\n            throw new Exception('Invalid comparison format.');\n        }\n\n        if (!is_array($fields)) {\n            $fields = array($fields);\n        }\n        foreach ($fields as $key => $field) {\n            $fields[$key] = $this->_getMappedField($field);\n        }\n\n        $this->_priceDataFieldFilters[] = array_merge(array($comparisonFormat), $fields);\n        return $this;\n    }\n\n    /**\n     * Clear collection\n     *\n     * @inheritDoc\n     */\n    public function clear()\n    {\n        foreach ($this->_items as $i => $item) {\n            if ($item->hasStockItem()) {\n                $item->unsStockItem();\n            }\n            $item = $this->_items[$i] = null;\n        }\n\n        foreach ($this->_itemsById as $i => $item) {\n            $item = $this->_itemsById[$i] = null;\n        }\n\n        unset($this->_items, $this->_data, $this->_itemsById);\n        $this->_data = array();\n        $this->_itemsById = array();\n        return parent::clear();\n    }\n\n    /**\n     * Set Order field\n     *\n     * @param string $attribute\n     * @param string $dir\n     * @return $this\n     */\n    public function setOrder($attribute, $dir = 'desc')\n    {\n        if ($attribute == 'price') {\n            $this->addAttributeToSort($attribute, $dir);\n        } else {\n            parent::setOrder($attribute, $dir);\n        }\n        return $this;\n    }\n\n    /**\n     * Get products max price\n     *\n     * @return float\n     */\n    public function getMaxPrice()\n    {\n        if (is_null($this->_maxPrice)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_maxPrice;\n    }\n\n    /**\n     * Get products min price\n     *\n     * @return float\n     */\n    public function getMinPrice()\n    {\n        if (is_null($this->_minPrice)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_minPrice;\n    }\n\n    /**\n     * Get standard deviation of products price\n     *\n     * @return float\n     */\n    public function getPriceStandardDeviation()\n    {\n        if (is_null($this->_priceStandardDeviation)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_priceStandardDeviation;\n    }\n\n\n    /**\n     * Get count of product prices\n     *\n     * @return int\n     */\n    public function getPricesCount()\n    {\n        if (is_null($this->_pricesCount)) {\n            $this->_prepareStatisticsData();\n        }\n\n        return $this->_pricesCount;\n    }\n}\n"], "filenames": ["app/code/core/Mage/Catalog/Model/Product/Attribute/Api.php", "app/code/core/Mage/Catalog/Model/Resource/Product/Collection.php"], "buggy_code_start_loc": [235, 545], "buggy_code_end_loc": [235, 546], "fixing_code_start_loc": [236, 545], "fixing_code_end_loc": [240, 546], "type": "CWE-502", "message": "In Magento (rubygems openmage/magento-lts package) before versions 19.4.8 and 20.0.4, an admin user can generate soap credentials that can be used to trigger RCE via PHP Object Injection through product attributes and a product. The issue is patched in versions 19.4.8 and 20.0.4.", "other": {"cve": {"id": "CVE-2020-15244", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-21T20:15:13.443", "lastModified": "2021-11-18T16:21:59.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Magento (rubygems openmage/magento-lts package) before versions 19.4.8 and 20.0.4, an admin user can generate soap credentials that can be used to trigger RCE via PHP Object Injection through product attributes and a product. The issue is patched in versions 19.4.8 and 20.0.4."}, {"lang": "es", "value": "En Magento (paquete rubygems openmage/magento-lts) versiones anteriores a 19.4.8 y 20.0.4, un usuario administrador puede generar credenciales soap que pueden ser usadas para activar una RCE por medio de la inyecci\u00f3n de objetos PHP mediante atributos de producto y un producto.&#xa0;El problema est\u00e1 parcheado en las versiones 19.4.8 y 20.0.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-502"}, {"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionEndIncluding": "19.4.8", "matchCriteriaId": "1E9C46F6-A8E6-4007-8100-4B03FD5C2BB8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.4", "matchCriteriaId": "B47620C2-89F6-4061-ACA8-2CCF37FC0449"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts", "source": "nvd@nist.gov", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/commit/26433d15b57978fcb7701b5f99efe8332ca8630b", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-jrgf-vfw2-hj26", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/26433d15b57978fcb7701b5f99efe8332ca8630b"}}