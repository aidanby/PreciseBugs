{"buggy_code": ["name: Release workflow for tagged versions\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v0.2.19, v0.2.14a\n\nenv:\n  GO_VERSION: 1.15\n\njobs:\n  release-ubuntu:\n    strategy:\n      matrix:\n        os: [ ubuntu-18.04, ubuntu-20.04 ]\n        db: [ pg, mysql, sqlserver, redis, mongo, fdb ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ env.GO_VERSION }}\n        id: go\n\n      - name: Install deps\n        run: sudo apt-get install liblzo2-dev brotli libsodium-dev\n\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Get dependencies\n        run: |\n          go get -v -t -d ./...\n          if [ -f Gopkg.toml ]; then\n           curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n           dep ensure\n          fi\n\n      - name: Make deps\n        run: make deps\n\n      - name: Fix LZO (ubuntu-18.04)\n        if: matrix.os == 'ubuntu-18.04'\n        run: echo \"CGO_LDFLAGS=-no-pie\" >> $GITHUB_ENV\n\n      - name: Build WAL-G\n        run: make ${{ matrix.db }}_build\n\n      - name: Rename WAL-G binary\n        run: mv main/${{ matrix.db }}/wal-g wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n\n      - name: Compress WAL-G binary\n        run: tar --owner=0 --group=0 -zcvf wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64.tar.gz wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n\n      - name: Upload WAL-G binary\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n            wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64.tar.gz\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    env:\n      USE_LZO: 1\n", "name: Unit tests\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  GO_VERSION: 1.15\n\njobs:\n  unittest:\n    name: all_unittests\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install deps\n        run: sudo apt-get install liblzo2-dev\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ env.GO_VERSION }}\n        id: go\n\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v2\n\n      - name: Get dependencies\n        run: |\n          go get -v -t -d ./...\n          if [ -f Gopkg.toml ]; then\n           curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n           dep ensure\n          fi\n\n      - name: Test\n        run: make all_unittests\n        env:\n          USE_LIBSODIUM: 1\n          USE_LZO: 1\n          TEST_MODIFIER: -race\n\n", "// +build !libsodium\n\npackage internal\n\n// This file contains functions that should return `nil`,\n// in order to be able to build wal-g without specific implementations of the crypter.\n// And the configure_crypter_<crypter>.go files must have a real implementation of the function.\n//\n// Thus, if the tag is missing, the condition:\n// if crypter := configure<crypter>Crypter(); crypter != nil {\n//     return crypter\n// }\n// will never be met.\n// If there is a tag, we can configure the correct implementation of crypter.\n\nimport (\n\t\"github.com/wal-g/wal-g/internal/crypto\"\n)\n\nfunc configureLibsodiumCrypter() crypto.Crypter {\n\treturn nil\n}\n"], "fixing_code": ["name: Release workflow for tagged versions\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v0.2.19, v0.2.14a\n\nenv:\n  GO_VERSION: 1.15\n  USE_LIBSODIUM: 1\n\njobs:\n  release-ubuntu:\n    strategy:\n      matrix:\n        os: [ ubuntu-18.04, ubuntu-20.04 ]\n        db: [ pg, mysql, sqlserver, redis, mongo, fdb ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ env.GO_VERSION }}\n        id: go\n\n      - name: Install deps\n        run: sudo apt-get install liblzo2-dev brotli libsodium-dev\n\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Get dependencies\n        run: |\n          go get -v -t -d ./...\n          if [ -f Gopkg.toml ]; then\n           curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n           dep ensure\n          fi\n\n      - name: Make deps\n        run: make deps\n\n      - name: Fix LZO (ubuntu-18.04)\n        if: matrix.os == 'ubuntu-18.04'\n        run: echo \"CGO_LDFLAGS=-no-pie\" >> $GITHUB_ENV\n\n      - name: Build WAL-G\n        run: make ${{ matrix.db }}_build\n\n      - name: Rename WAL-G binary\n        run: mv main/${{ matrix.db }}/wal-g wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n\n      - name: Compress WAL-G binary\n        run: tar --owner=0 --group=0 -zcvf wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64.tar.gz wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n\n      - name: Upload WAL-G binary\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64\n            wal-g-${{ matrix.db }}-${{ matrix.os }}-amd64.tar.gz\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    env:\n      USE_LZO: 1\n", "name: Unit tests\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  GO_VERSION: 1.15\n\njobs:\n  unittest:\n    name: all_unittests\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install deps\n        run: sudo apt-get install liblzo2-dev\n\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ env.GO_VERSION }}\n        id: go\n\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v2\n\n      - name: Get dependencies\n        run: |\n          go get -v -t -d ./...\n          if [ -f Gopkg.toml ]; then\n           curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n           dep ensure\n          fi\n\n      - name: Test\n        run: make all_unittests\n        env:\n          USE_LIBSODIUM: 1\n          USE_LZO: 1\n          TEST_MODIFIER: -race\n\n", "// +build !libsodium\n\npackage internal\n\n// This file contains functions that should return `nil`,\n// in order to be able to build wal-g without specific implementations of the crypter.\n// And the configure_crypter_<crypter>.go files must have a real implementation of the function.\n//\n// Thus, if the tag is missing, the condition:\n// if crypter := configure<crypter>Crypter(); crypter != nil {\n//     return crypter\n// }\n// will never be met.\n// If there is a tag, we can configure the correct implementation of crypter.\n\nimport (\n\t\"github.com/spf13/viper\"\n\t\"github.com/wal-g/tracelog\"\n\t\"github.com/wal-g/wal-g/internal/crypto\"\n)\n\nfunc configureLibsodiumCrypter() crypto.Crypter {\n\tif viper.IsSet(LibsodiumKeySetting) {\n\t\ttracelog.ErrorLogger.Fatalf(\"non-empty WALG_LIBSODIUM_KEY but wal-g was not compiled with libsodium\")\n\t}\n\n\tif viper.IsSet(LibsodiumKeyPathSetting) {\n\t\ttracelog.ErrorLogger.Fatalf(\"non-empty WALG_LIBSODIUM_KEY_PATH but wal-g was not compiled with libsodium\")\n\t}\n\n\treturn nil\n}\n"], "filenames": [".github/workflows/release.yml", ".github/workflows/unittests.yml", "internal/configure_crypter.go"], "buggy_code_start_loc": [9, 3, 16], "buggy_code_end_loc": [9, 3, 20], "fixing_code_start_loc": [10, 4, 17], "fixing_code_end_loc": [11, 5, 31], "type": "CWE-754", "message": "WAL-G before 1.1, when a non-libsodium build (e.g., one of the official binary releases published as GitHub Releases) is used, silently ignores the libsodium encryption key and uploads cleartext backups. This is arguably a Principle of Least Surprise violation because \"the user likely wanted to encrypt all file activity.\"", "other": {"cve": {"id": "CVE-2021-38599", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-12T16:15:10.533", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "WAL-G before 1.1, when a non-libsodium build (e.g., one of the official binary releases published as GitHub Releases) is used, silently ignores the libsodium encryption key and uploads cleartext backups. This is arguably a Principle of Least Surprise violation because \"the user likely wanted to encrypt all file activity.\""}, {"lang": "es", "value": "WAL-G versiones anteriores a 1.1, cuando se usa una build que no es de libsodium (por ejemplo, una de las versiones binarias oficiales publicadas como GitHub Releases), ignora silenciosamente la clave de cifrado de libsodium y carga copias de seguridad en texto sin cifrar. Esto es discutiblemente una violaci\u00f3n del Principio de la Menor Sorpresa porque \"the user likely wanted to encrypt all file activity\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-754"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wal-g_project:wal-g:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1", "matchCriteriaId": "2ECC3381-AC53-4767-8B98-ED02A7F923B9"}]}]}], "references": [{"url": "https://github.com/wal-g/wal-g/commit/cadf598e1c2a345915a21a44518c5a4d5401e2e3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wal-g/wal-g/pull/1062", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wal-g/wal-g/commit/cadf598e1c2a345915a21a44518c5a4d5401e2e3"}}