{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die (\"Hacking attempt!\");\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_ADMINISTRATOR);\n\n// +-----------------------------------------------------------------------+\n// |                       modification registration                       |\n// +-----------------------------------------------------------------------+\n\n// print '<pre>';\n// print_r($_POST);\n// print '</pre>';\nif (isset($_POST['falsify'])\n    and isset($_POST['cat_true'])\n    and count($_POST['cat_true']) > 0)\n{\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'false\\'\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_true'], 'false');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_true'], 'private');\n      break;\n    }\n    case 'representative' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET representative_picture_id = NULL\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n  }\n}\nelse if (isset($_POST['trueify'])\n         and isset($_POST['cat_false'])\n         and count($_POST['cat_false']) > 0)\n{\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'true\\'\n  WHERE id IN ('.implode(',', $_POST['cat_false']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_false'], 'true');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_false'], 'public');\n      break;\n    }\n    case 'representative' :\n    {\n      // theoretically, all categories in $_POST['cat_false'] contain at\n      // least one element, so Piwigo can find a representant.\n      set_random_representant($_POST['cat_false']);\n      break;\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                             template init                             |\n// +-----------------------------------------------------------------------+\n\n$template->set_filenames(\n  array(\n    'cat_options' => 'cat_options.tpl',\n    'double_select' => 'double_select.tpl'\n    )\n  );\n\n$page['section'] = isset($_GET['section']) ? $_GET['section'] : 'status';\n$base_url = PHPWG_ROOT_PATH.'admin.php?page=cat_options&amp;section=';\n\n$template->assign(\n  array(\n    'U_HELP' => get_root_url().'admin/popuphelp.php?page=cat_options',\n    'F_ACTION'=>$base_url.$page['section']\n   )\n );\n\n// TabSheet\n$tabsheet = new tabsheet();\n$tabsheet->set_id('cat_options');\n$tabsheet->select($page['section']);\n$tabsheet->assign();\n\n// +-----------------------------------------------------------------------+\n// |                              form display                             |\n// +-----------------------------------------------------------------------+\n\n// for each section, categories in the multiselect field can be :\n//\n// - true : commentable for comment section\n// - false : un-commentable for comment section\n// - NA : (not applicable) for virtual categories\n//\n// for true and false status, we associates an array of category ids,\n// function display_select_categories will use the given CSS class for each\n// option\n$cats_true = array();\n$cats_false = array();\nswitch ($page['section'])\n{\n  case 'comments' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Authorize users to add comments on selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Authorized'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Forbidden'),\n        )\n      );\n    break;\n  }\n  case 'visible' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Lock albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Unlocked'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Locked'),\n        )\n      );\n    break;\n  }\n  case 'status' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'public\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'private\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Manage authorizations for selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Public'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Private'),\n        )\n      );\n    break;\n  }\n  case 'representative' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE representative_picture_id IS NOT NULL\n;';\n    $query_false = '\nSELECT DISTINCT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.' INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON id=category_id\n  WHERE representative_picture_id IS NULL\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Representative'),\n        'L_CAT_OPTIONS_TRUE' => l10n('singly represented'),\n        'L_CAT_OPTIONS_FALSE' => l10n('randomly represented')\n        )\n      );\n    break;\n  }\n}\ndisplay_select_cat_wrapper($query_true,array(),'category_option_true');\ndisplay_select_cat_wrapper($query_false,array(),'category_option_false');\n\n// +-----------------------------------------------------------------------+\n// |                           sending html code                           |\n// +-----------------------------------------------------------------------+\n\n$template->assign_var_from_handle('DOUBLE_SELECT', 'double_select');\n$template->assign_var_from_handle('ADMIN_CONTENT', 'cat_options');\n?>", "<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nfunction parse_sort_variables(\n    $sortable_by, $default_field,\n    $get_param, $get_rejects,\n    $template_var,\n    $anchor = '' )\n{\n  global $template;\n\n  $url_components = parse_url( $_SERVER['REQUEST_URI'] );\n\n  $base_url = $url_components['path'];\n\n  parse_str($url_components['query'], $vars);\n  $is_first = true;\n  foreach ($vars as $key => $value)\n  {\n    if (!in_array($key, $get_rejects) and $key!=$get_param)\n    {\n      $base_url .= $is_first ? '?' : '&amp;';\n      $is_first = false;\n      $base_url .= $key.'='.urlencode($value);\n    }\n  }\n\n  $ret = array();\n  foreach( $sortable_by as $field)\n  {\n    $url = $base_url;\n    $disp = '\u2193'; // TODO: an small image is better\n\n    if ( $field !== @$_GET[$get_param] )\n    {\n      if ( !isset($default_field) or $default_field!=$field )\n      { // the first should be the default\n        $url = add_url_params($url, array($get_param=>$field) );\n      }\n      elseif (isset($default_field) and !isset($_GET[$get_param]) )\n      {\n        $ret[] = $field;\n        $disp = '<em>'.$disp.'</em>';\n      }\n    }\n    else\n    {\n      $ret[] = $field;\n      $disp = '<em>'.$disp.'</em>';\n    }\n    if ( isset($template_var) )\n    {\n      $template->assign( $template_var.strtoupper($field),\n            '<a href=\"'.$url.$anchor.'\" title=\"'.l10n('Sort order').'\">'.$disp.'</a>'\n         );\n    }\n  }\n  return $ret;\n}\n\nif (!defined('PHPWG_ROOT_PATH')) die('Hacking attempt!');\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_permalinks.php');\n\n$selected_cat = array();\nif ( isset($_POST['set_permalink']) and $_POST['cat_id']>0 )\n{\n  $permalink = $_POST['permalink'];\n  if ( empty($permalink) )\n    delete_cat_permalink($_POST['cat_id'], isset($_POST['save']) );\n  else\n    set_cat_permalink($_POST['cat_id'], $permalink, isset($_POST['save']) );\n  $selected_cat = array( $_POST['cat_id'] );\n}\nelseif ( isset($_GET['delete_permanent']) )\n{\n  $query = '\nDELETE FROM '.OLD_PERMALINKS_TABLE.'\n  WHERE permalink=\\''.$_GET['delete_permanent'].'\\'\n  LIMIT 1';\n  $result = pwg_query($query);\n  if (pwg_db_changes($result)==0)\n  {\n    $page['errors'][] = l10n('Cannot delete the old permalink !');\n  }\n}\n\n\n$template->set_filename('permalinks', 'permalinks.tpl' );\n\n// +-----------------------------------------------------------------------+\n// | tabs                                                                  |\n// +-----------------------------------------------------------------------+\n\n$page['tab'] = 'permalinks';\ninclude(PHPWG_ROOT_PATH.'admin/include/albums_tab.inc.php');\n\n\n$query = '\nSELECT\n  id, permalink,\n  CONCAT(id, \" - \", name, IF(permalink IS NULL, \"\", \" &radic;\") ) AS name,\n  uppercats, global_rank\nFROM '.CATEGORIES_TABLE;\n\ndisplay_select_cat_wrapper( $query, $selected_cat, 'categories', false );\n\n\n// --- generate display of active permalinks -----------------------------------\n$sort_by = parse_sort_variables(\n    array('id', 'name', 'permalink'), 'name',\n    'psf',\n    array('delete_permanent'),\n    'SORT_' );\n\n$query = '\nSELECT id, permalink, uppercats, global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE permalink IS NOT NULL\n';\nif ( $sort_by[0]=='id' or $sort_by[0]=='permalink' )\n{\n  $query .= ' ORDER BY '.$sort_by[0];\n}\n$categories=array();\n$result=pwg_query($query);\nwhile ( $row = pwg_db_fetch_assoc($result) )\n{\n  $row['name'] = get_cat_display_name_cache( $row['uppercats'] );\n  $categories[] = $row;\n}\n\nif ( $sort_by[0]=='name')\n{\n  usort($categories, 'global_rank_compare');\n}\n$template->assign( 'permalinks', $categories );\n\n// --- generate display of old permalinks --------------------------------------\n\n$sort_by = parse_sort_variables(\n    array('cat_id','permalink','date_deleted','last_hit','hit'), null,\n    'dpsf',\n    array('delete_permanent'),\n    'SORT_OLD_', '#old_permalinks' );\n\n$url_del_base = get_root_url().'admin.php?page=permalinks';\n$query = 'SELECT * FROM '.OLD_PERMALINKS_TABLE;\nif ( count($sort_by) )\n{\n  $query .= ' ORDER BY '.$sort_by[0];\n}\n$result = pwg_query($query);\n$deleted_permalinks=array();\nwhile ( $row = pwg_db_fetch_assoc($result) )\n{\n  $row['name'] = get_cat_display_name_cache($row['cat_id']);\n  $row['U_DELETE'] =\n      add_url_params(\n        $url_del_base,\n        array( 'delete_permanent'=> $row['permalink'] )\n      );\n  $deleted_permalinks[] = $row;\n}\n$template->assign('deleted_permalinks', $deleted_permalinks);\n$template->assign('U_HELP', get_root_url().'admin/popuphelp.php?page=permalinks');\n\n$template->assign_var_from_handle('ADMIN_CONTENT', 'permalinks');\n?>\n", "<div class=\"titrePage\">\n  <h2>{'Properties'|@translate} {$TABSHEET_TITLE}</h2>\n</div>\n\n<form method=\"post\" action=\"{$F_ACTION}\" id=\"cat_options\">\n  <fieldset>\n    <legend>{$L_SECTION}</legend>\n    {$DOUBLE_SELECT}\n  </fieldset>\n</form>\n\n", "{footer_script require='jquery.ui.sortable'}{literal}\njQuery(document).ready(function(){\n  jQuery(\"#addPermalinkOpen\").click(function(){\n    jQuery(\"#addPermalink\").show();\n    jQuery(\"#showAddPermalink\").hide();\n  });\n\n  jQuery(\"#addPermalinkClose\").click(function(){\n    jQuery(\"#addPermalink\").hide();\n    jQuery(\"#showAddPermalink\").show();\n  });\n});\n{/literal}{/footer_script}\n\n{literal}\n<style>\n#showAddPermalink {text-align:left;margin-left:1em;margin-top:0;}\nform fieldset p {margin:0 0 1em 0;}\nform fieldset p.actionButtons {margin-bottom:0}\n</style>\n{/literal}\n\n{html_style}\n[name=\"permalink\"] {\n  width : 100%;\n  max-width : 600px;\n}\n{/html_style}\n\n<div class=\"titrePage\">\n  <h2>{'Permalinks'|@translate}</h2>\n</div>\n\n<p id=\"showAddPermalink\"><a href=\"#\" id=\"addPermalinkOpen\">{'Add/delete a permalink'|@translate}</a></p>\n\n<form method=\"post\" action=\"\" id=\"addPermalink\" style=\"display:none\">\n<fieldset>\n  <legend>{'Add/delete a permalink'|@translate}</legend>\n  <p>\n    <strong>{'Album'|@translate}</strong>\n    <br>\n    <select name=\"cat_id\">\n      <option value=\"0\">------</option>\n      {html_options options=$categories selected=$categories_selected}\n    </select>\n  </p>\n\n  <p>\n    <strong>{'Permalink'|@translate}</strong>\n    <br><input name=\"permalink\">\n  </p>\n\n  <p>\n    <label><input type=\"checkbox\" name=\"save\" checked=\"checked\"> <strong>{'Save to permalink history'|@translate}</strong></label>\n  </p>\n\n  <p class=\"actionButtons\">\n    <input type=\"submit\" class=\"submit\" name=\"set_permalink\" value=\"{'Submit'|@translate}\">\n    <a href=\"#\" id=\"addPermalinkClose\">{'Cancel'|@translate}</a>\n  </p>\n</fieldset>\n</form>\n\n<fieldset>\n  <legend>{'Permalinks'|@translate}</legend>\n<table class=\"table2\" style=\"margin:0\">\n\t<tr class=\"throw\">\n\t\t<td>Id {$SORT_ID}</td>\n\t\t<td>{'Album'|@translate} {$SORT_NAME}</td>\n\t\t<td>{'Permalink'|@translate} {$SORT_PERMALINK}</td>\n\t</tr>\n{foreach from=$permalinks item=permalink name=\"permalink_loop\"}\n\t<tr class=\"{if $smarty.foreach.permalink_loop.index is odd}row1{else}row2{/if}\" style=\"line-height:1.5em;\">\n\t\t<td style=\"text-align:center;\">{$permalink.id}</td>\n\t\t<td>{$permalink.name}</td>\n\t\t<td>{$permalink.permalink}</td>\n\t</tr>\n{/foreach}\n</table>\n</fieldset>\n\n<fieldset>\n  <legend>{'Permalink history'|@translate} <a name=\"old_permalinks\"></a></legend>\n<table class=\"table2\" style=\"margin:0\">\n\t<tr class=\"throw\">\n\t\t<td>Id {$SORT_OLD_CAT_ID}</td>\n\t\t<td>{'Album'|@translate}</td>\n\t\t<td>{'Permalink'|@translate} {$SORT_OLD_PERMALINK}</td>\n\t\t<td>{'Deleted on'|@translate} {$SORT_OLD_DATE_DELETED}</td>\n\t\t<td>{'Last hit'|@translate} {$SORT_OLD_LAST_HIT}</td>\n\t\t<td>{'Hit'|@translate} {$SORT_OLD_HIT}</td>\n\t\t<td style=\"width:5px;\"></td>\n\t</tr>\n{foreach from=$deleted_permalinks item=permalink}\n\t<tr style=\"line-height:1.5em;\">\n\t\t<td style=\"text-align:center;\">{$permalink.cat_id}</td>\n\t\t<td>{$permalink.name}</td>\n\t\t<td>{$permalink.permalink}</td>\n\t\t<td>{$permalink.date_deleted}</td>\n\t\t<td>{$permalink.last_hit}</td>\n\t\t<td>{$permalink.hit}</td>\n\t\t<td><a href=\"{$permalink.U_DELETE}\"><img src=\"{$ROOT_URL}{$themeconf.admin_icon_dir}/delete.png\" alt=\"[{'Delete'|@translate}]\"></a></td>\n\t</tr>\n{/foreach}\n</table>\n</fieldset>\n"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die (\"Hacking attempt!\");\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_ADMINISTRATOR);\n\n// +-----------------------------------------------------------------------+\n// |                       modification registration                       |\n// +-----------------------------------------------------------------------+\n\n\nif (isset($_POST['falsify'])\n    and isset($_POST['cat_true'])\n    and count($_POST['cat_true']) > 0)\n{\n  check_pwg_token();\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'false\\'\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_true'], 'false');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_true'], 'private');\n      break;\n    }\n    case 'representative' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET representative_picture_id = NULL\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n  }\n}\nelse if (isset($_POST['trueify'])\n         and isset($_POST['cat_false'])\n         and count($_POST['cat_false']) > 0)\n{\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'true\\'\n  WHERE id IN ('.implode(',', $_POST['cat_false']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_false'], 'true');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_false'], 'public');\n      break;\n    }\n    case 'representative' :\n    {\n      // theoretically, all categories in $_POST['cat_false'] contain at\n      // least one element, so Piwigo can find a representant.\n      set_random_representant($_POST['cat_false']);\n      break;\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                             template init                             |\n// +-----------------------------------------------------------------------+\n\n$template->set_filenames(\n  array(\n    'cat_options' => 'cat_options.tpl',\n    'double_select' => 'double_select.tpl'\n    )\n  );\n\n$page['section'] = isset($_GET['section']) ? $_GET['section'] : 'status';\n$base_url = PHPWG_ROOT_PATH.'admin.php?page=cat_options&amp;section=';\n\n$template->assign(\n  array(\n    'U_HELP' => get_root_url().'admin/popuphelp.php?page=cat_options',\n    'F_ACTION'=>$base_url.$page['section']\n   )\n );\n\n// TabSheet\n$tabsheet = new tabsheet();\n$tabsheet->set_id('cat_options');\n$tabsheet->select($page['section']);\n$tabsheet->assign();\n\n// +-----------------------------------------------------------------------+\n// |                              form display                             |\n// +-----------------------------------------------------------------------+\n\n// for each section, categories in the multiselect field can be :\n//\n// - true : commentable for comment section\n// - false : un-commentable for comment section\n// - NA : (not applicable) for virtual categories\n//\n// for true and false status, we associates an array of category ids,\n// function display_select_categories will use the given CSS class for each\n// option\n$cats_true = array();\n$cats_false = array();\nswitch ($page['section'])\n{\n  case 'comments' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Authorize users to add comments on selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Authorized'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Forbidden'),\n        )\n      );\n    break;\n  }\n  case 'visible' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Lock albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Unlocked'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Locked'),\n        )\n      );\n    break;\n  }\n  case 'status' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'public\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'private\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Manage authorizations for selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Public'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Private'),\n        )\n      );\n    break;\n  }\n  case 'representative' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE representative_picture_id IS NOT NULL\n;';\n    $query_false = '\nSELECT DISTINCT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.' INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON id=category_id\n  WHERE representative_picture_id IS NULL\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Representative'),\n        'L_CAT_OPTIONS_TRUE' => l10n('singly represented'),\n        'L_CAT_OPTIONS_FALSE' => l10n('randomly represented')\n        )\n      );\n    break;\n  }\n}\ndisplay_select_cat_wrapper($query_true,array(),'category_option_true');\ndisplay_select_cat_wrapper($query_false,array(),'category_option_false');\n$template->assign('PWG_TOKEN',get_pwg_token());\n\n// +-----------------------------------------------------------------------+\n// |                           sending html code                           |\n// +-----------------------------------------------------------------------+\n\n$template->assign_var_from_handle('DOUBLE_SELECT', 'double_select');\n$template->assign_var_from_handle('ADMIN_CONTENT', 'cat_options');\n?>", "<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nfunction parse_sort_variables(\n    $sortable_by, $default_field,\n    $get_param, $get_rejects,\n    $template_var,\n    $anchor = '' )\n{\n  global $template;\n\n  $url_components = parse_url( $_SERVER['REQUEST_URI'] );\n\n  $base_url = $url_components['path'];\n\n  parse_str($url_components['query'], $vars);\n  $is_first = true;\n  foreach ($vars as $key => $value)\n  {\n    if (!in_array($key, $get_rejects) and $key!=$get_param)\n    {\n      $base_url .= $is_first ? '?' : '&amp;';\n      $is_first = false;\n      $base_url .= $key.'='.urlencode($value);\n    }\n  }\n\n  $ret = array();\n  foreach( $sortable_by as $field)\n  {\n    $url = $base_url;\n    $disp = '\u2193'; // TODO: an small image is better\n\n    if ( $field !== @$_GET[$get_param] )\n    {\n      if ( !isset($default_field) or $default_field!=$field )\n      { // the first should be the default\n        $url = add_url_params($url, array($get_param=>$field) );\n      }\n      elseif (isset($default_field) and !isset($_GET[$get_param]) )\n      {\n        $ret[] = $field;\n        $disp = '<em>'.$disp.'</em>';\n      }\n    }\n    else\n    {\n      $ret[] = $field;\n      $disp = '<em>'.$disp.'</em>';\n    }\n    if ( isset($template_var) )\n    {\n      $template->assign( $template_var.strtoupper($field),\n            '<a href=\"'.$url.$anchor.'\" title=\"'.l10n('Sort order').'\">'.$disp.'</a>'\n         );\n    }\n  }\n  return $ret;\n}\n\nif (!defined('PHPWG_ROOT_PATH')) die('Hacking attempt!');\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_permalinks.php');\n\n$selected_cat = array();\nif ( isset($_POST['set_permalink']) and $_POST['cat_id']>0 )\n{\n  check_pwg_token();\n  $permalink = $_POST['permalink'];\n  if ( empty($permalink) )\n    delete_cat_permalink($_POST['cat_id'], isset($_POST['save']) );\n  else\n    set_cat_permalink($_POST['cat_id'], $permalink, isset($_POST['save']) );\n  $selected_cat = array( $_POST['cat_id'] );\n}\nelseif ( isset($_GET['delete_permanent']) )\n{\n  check_pwg_token();\n  $query = '\nDELETE FROM '.OLD_PERMALINKS_TABLE.'\n  WHERE permalink=\\''.$_GET['delete_permanent'].'\\'\n  LIMIT 1';\n  $result = pwg_query($query);\n  if (pwg_db_changes($result)==0)\n  {\n    $page['errors'][] = l10n('Cannot delete the old permalink !');\n  }\n}\n\n\n$template->set_filename('permalinks', 'permalinks.tpl' );\n\n// +-----------------------------------------------------------------------+\n// | tabs                                                                  |\n// +-----------------------------------------------------------------------+\n\n$page['tab'] = 'permalinks';\ninclude(PHPWG_ROOT_PATH.'admin/include/albums_tab.inc.php');\n\n\n$query = '\nSELECT\n  id, permalink,\n  CONCAT(id, \" - \", name, IF(permalink IS NULL, \"\", \" &radic;\") ) AS name,\n  uppercats, global_rank\nFROM '.CATEGORIES_TABLE;\n\ndisplay_select_cat_wrapper( $query, $selected_cat, 'categories', false );\n\n$pwg_token = get_pwg_token();\n\n// --- generate display of active permalinks -----------------------------------\n$sort_by = parse_sort_variables(\n    array('id', 'name', 'permalink'), 'name',\n    'psf',\n    array('delete_permanent'),\n    'SORT_' );\n\n$query = '\nSELECT id, permalink, uppercats, global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE permalink IS NOT NULL\n';\nif ( $sort_by[0]=='id' or $sort_by[0]=='permalink' )\n{\n  $query .= ' ORDER BY '.$sort_by[0];\n}\n$categories=array();\n$result=pwg_query($query);\nwhile ( $row = pwg_db_fetch_assoc($result) )\n{\n  $row['name'] = get_cat_display_name_cache( $row['uppercats'] );\n  $categories[] = $row;\n}\n\nif ( $sort_by[0]=='name')\n{\n  usort($categories, 'global_rank_compare');\n}\n$template->assign( 'permalinks', $categories );\n\n// --- generate display of old permalinks --------------------------------------\n\n$sort_by = parse_sort_variables(\n    array('cat_id','permalink','date_deleted','last_hit','hit'), null,\n    'dpsf',\n    array('delete_permanent'),\n    'SORT_OLD_', '#old_permalinks' );\n\n$url_del_base = get_root_url().'admin.php?page=permalinks';\n$query = 'SELECT * FROM '.OLD_PERMALINKS_TABLE;\nif ( count($sort_by) )\n{\n  $query .= ' ORDER BY '.$sort_by[0];\n}\n$result = pwg_query($query);\n$deleted_permalinks=array();\nwhile ( $row = pwg_db_fetch_assoc($result) )\n{\n  $row['name'] = get_cat_display_name_cache($row['cat_id']);\n  $row['U_DELETE'] =\n      add_url_params(\n        $url_del_base,\n        array('delete_permanent'=> $row['permalink'],'pwg_token'=>$pwg_token)\n      );\n  $deleted_permalinks[] = $row;\n}\n\n$template->assign(array(\n  'PWG_TOKEN' => $pwg_token,\n  'U_HELP' => get_root_url().'admin/popuphelp.php?page=permalinks',\n  'deleted_permalinks' => $deleted_permalinks,\n  ));\n\n$template->assign_var_from_handle('ADMIN_CONTENT', 'permalinks');\n?>\n", "<div class=\"titrePage\">\n  <h2>{'Properties'|@translate} {$TABSHEET_TITLE}</h2>\n</div>\n\n<form method=\"post\" action=\"{$F_ACTION}\" id=\"cat_options\">\n  <fieldset>\n    <legend>{$L_SECTION}</legend>\n    {$DOUBLE_SELECT}\n  </fieldset>\n<input type=\"hidden\" name=\"pwg_token\" value=\"{$PWG_TOKEN}\">\n</form>\n\n", "{footer_script require='jquery.ui.sortable'}{literal}\njQuery(document).ready(function(){\n  jQuery(\"#addPermalinkOpen\").click(function(){\n    jQuery(\"#addPermalink\").show();\n    jQuery(\"#showAddPermalink\").hide();\n  });\n\n  jQuery(\"#addPermalinkClose\").click(function(){\n    jQuery(\"#addPermalink\").hide();\n    jQuery(\"#showAddPermalink\").show();\n  });\n});\n{/literal}{/footer_script}\n\n{literal}\n<style>\n#showAddPermalink {text-align:left;margin-left:1em;margin-top:0;}\nform fieldset p {margin:0 0 1em 0;}\nform fieldset p.actionButtons {margin-bottom:0}\n</style>\n{/literal}\n\n{html_style}\n[name=\"permalink\"] {\n  width : 100%;\n  max-width : 600px;\n}\n{/html_style}\n\n<div class=\"titrePage\">\n  <h2>{'Permalinks'|@translate}</h2>\n</div>\n\n<p id=\"showAddPermalink\"><a href=\"#\" id=\"addPermalinkOpen\">{'Add/delete a permalink'|@translate}</a></p>\n\n<form method=\"post\" action=\"\" id=\"addPermalink\" style=\"display:none\">\n<fieldset>\n  <legend>{'Add/delete a permalink'|@translate}</legend>\n  <p>\n    <strong>{'Album'|@translate}</strong>\n    <br>\n    <select name=\"cat_id\">\n      <option value=\"0\">------</option>\n      {html_options options=$categories selected=$categories_selected}\n    </select>\n  </p>\n\n  <p>\n    <strong>{'Permalink'|@translate}</strong>\n    <br><input name=\"permalink\">\n  </p>\n\n  <p>\n    <label><input type=\"checkbox\" name=\"save\" checked=\"checked\"> <strong>{'Save to permalink history'|@translate}</strong></label>\n  </p>\n\n  <p class=\"actionButtons\">\n    <input type=\"submit\" class=\"submit\" name=\"set_permalink\" value=\"{'Submit'|@translate}\">\n    <a href=\"#\" id=\"addPermalinkClose\">{'Cancel'|@translate}</a>\n  </p>\n</fieldset>\n<input type=\"hidden\" name=\"pwg_token\" value=\"{$PWG_TOKEN}\">\n</form>\n\n<fieldset>\n  <legend>{'Permalinks'|@translate}</legend>\n<table class=\"table2\" style=\"margin:0\">\n\t<tr class=\"throw\">\n\t\t<td>Id {$SORT_ID}</td>\n\t\t<td>{'Album'|@translate} {$SORT_NAME}</td>\n\t\t<td>{'Permalink'|@translate} {$SORT_PERMALINK}</td>\n\t</tr>\n{foreach from=$permalinks item=permalink name=\"permalink_loop\"}\n\t<tr class=\"{if $smarty.foreach.permalink_loop.index is odd}row1{else}row2{/if}\" style=\"line-height:1.5em;\">\n\t\t<td style=\"text-align:center;\">{$permalink.id}</td>\n\t\t<td>{$permalink.name}</td>\n\t\t<td>{$permalink.permalink}</td>\n\t</tr>\n{/foreach}\n</table>\n</fieldset>\n\n<fieldset>\n  <legend>{'Permalink history'|@translate} <a name=\"old_permalinks\"></a></legend>\n<table class=\"table2\" style=\"margin:0\">\n\t<tr class=\"throw\">\n\t\t<td>Id {$SORT_OLD_CAT_ID}</td>\n\t\t<td>{'Album'|@translate}</td>\n\t\t<td>{'Permalink'|@translate} {$SORT_OLD_PERMALINK}</td>\n\t\t<td>{'Deleted on'|@translate} {$SORT_OLD_DATE_DELETED}</td>\n\t\t<td>{'Last hit'|@translate} {$SORT_OLD_LAST_HIT}</td>\n\t\t<td>{'Hit'|@translate} {$SORT_OLD_HIT}</td>\n\t\t<td style=\"width:5px;\"></td>\n\t</tr>\n{foreach from=$deleted_permalinks item=permalink}\n\t<tr style=\"line-height:1.5em;\">\n\t\t<td style=\"text-align:center;\">{$permalink.cat_id}</td>\n\t\t<td>{$permalink.name}</td>\n\t\t<td>{$permalink.permalink}</td>\n\t\t<td>{$permalink.date_deleted}</td>\n\t\t<td>{$permalink.last_hit}</td>\n\t\t<td>{$permalink.hit}</td>\n\t\t<td><a href=\"{$permalink.U_DELETE}\"><img src=\"{$ROOT_URL}{$themeconf.admin_icon_dir}/delete.png\" alt=\"[{'Delete'|@translate}]\"></a></td>\n\t</tr>\n{/foreach}\n</table>\n</fieldset>\n"], "filenames": ["admin/cat_options.php", "admin/permalinks.php", "admin/themes/default/template/cat_options.tpl", "admin/themes/default/template/permalinks.tpl"], "buggy_code_start_loc": [41, 87, 9, 61], "buggy_code_end_loc": [248, 187, 9, 61], "fixing_code_start_loc": [41, 88, 10, 62], "fixing_code_end_loc": [249, 194, 11, 63], "type": "CWE-352", "message": "Cross-site request forgery (CSRF) vulnerability in Piwigo through 2.9.1 allows remote attackers to hijack the authentication of users for requests to unlock albums via a crafted request.", "other": {"cve": {"id": "CVE-2017-10681", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-29T21:29:00.297", "lastModified": "2017-07-05T01:29:00.207", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site request forgery (CSRF) vulnerability in Piwigo through 2.9.1 allows remote attackers to hijack the authentication of users for requests to unlock albums via a crafted request."}, {"lang": "es", "value": "Vulnerabilidad de Cross-Site Request Forgery (CSRF) en Piwigo hasta la versi\u00f3n 2.9.1 permite que atacantes remotos secuestren la autenticaci\u00f3n de usuarios para peticiones que desbloquean \u00e1lbumes mediante una petici\u00f3n manipulada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.9.1", "matchCriteriaId": "5D356328-15B0-4402-94E6-8C16E09EB088"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/99362", "source": "cve@mitre.org"}, {"url": "https://github.com/Piwigo/Piwigo/commit/03a8329b89c0d196ecdb54227a8113f24555ffc0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Piwigo/Piwigo/issues/721", "source": "cve@mitre.org", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/03a8329b89c0d196ecdb54227a8113f24555ffc0"}}