{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\Controller;\n\nuse Exception;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Factory;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Rule;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Class ConfigController\n *\n * @Route(\"/pricing\")\n *\n * @internal\n */\nclass PricingController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        // permission check\n        $access = $this->getAdminUser()->isAllowed('bundle_ecommerce_pricing_rules');\n        if (!$access) {\n            throw new \\Exception('this function requires \"bundle_ecommerce_pricing_rules\" permission!');\n        }\n    }\n\n    /**\n     * @Route(\"/list\", name=\"pimcore_ecommerceframework_pricing_list\", methods={\"GET\"})\n     */\n    public function listAction()\n    {\n        $rules = new Rule\\Listing();\n        $rules->setOrderKey('prio');\n        $rules->setOrder('ASC');\n\n        $json = [];\n        foreach ($rules->load() as $rule) {\n            if ($rule->getActive()) {\n                $icon = 'bundle_ecommerce_pricing_icon_rule_' . $rule->getBehavior();\n                $title = 'Verhalten: ' . $rule->getBehavior();\n            } else {\n                $icon = 'bundle_ecommerce_pricing_icon_rule_disabled';\n                $title = 'Deaktiviert';\n            }\n\n            $json[] = [\n                'iconCls' => $icon,\n                'id' => $rule->getId(),\n                'text' => $rule->getName(),\n                'qtipCfg' => [\n                    'xtype' => 'quicktip',\n                    'title' => $rule->getLabel(),\n                    'text' => $title,\n                ],\n            ];\n        }\n\n        return $this->adminJson($json);\n    }\n\n    /**\n     * get priceing rule details as json\n     *\n     * @Route(\"/get\", name=\"pimcore_ecommerceframework_pricing_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws NotFoundHttpException\n     */\n    public function getAction(Request $request)\n    {\n        $rule = Rule::getById((int) $request->get('id'));\n        if ($rule) {\n            // get data\n            $condition = $rule->getCondition();\n            $localizedLabel = [];\n            $localizedDescription = [];\n\n            foreach (\\Pimcore\\Tool::getValidLanguages() as $lang) {\n                $localizedLabel[$lang] = $rule->getLabel($lang);\n                $localizedDescription[$lang] = $rule->getDescription($lang);\n            }\n\n            // create json config\n            $json = [\n                'id' => $rule->getId(),\n                'name' => $rule->getName(),\n                'label' => $localizedLabel,\n                'description' => $localizedDescription,\n                'behavior' => $rule->getBehavior(),\n                'active' => $rule->getActive(),\n                'condition' => $condition ? json_decode($condition->toJSON()) : '',\n                'actions' => [],\n            ];\n\n            foreach ($rule->getActions() as $action) {\n                $json['actions'][] = json_decode($action->toJSON());\n            }\n\n            return $this->adminJson($json);\n        }\n\n        throw $this->createNotFoundException('Rule not found');\n    }\n\n    /**\n     * add new rule\n     *\n     * @Route(\"/add\", name=\"pimcore_ecommerceframework_pricing_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save rule\n        try {\n            $rule = new Rule();\n            $rule->setName($request->get('name'));\n            $rule->save();\n\n            $return['success'] = true;\n            $return['id'] = $rule->getId();\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * delete exiting rule\n     *\n     * @Route(\"/delete\", name=\"pimcore_ecommerceframework_pricing_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // delete rule\n        try {\n            $rule = Rule::getById((int) $request->get('id'));\n            $rule->delete();\n            $return['success'] = true;\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/copy\", name=\"pimcore_ecommerceframework_pricing_copy\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     * copy existing rule\n     */\n    public function copyAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // copy rule\n        try {\n            /** @var Rule $ruleSource */\n            $ruleSource = Rule::getById((int) $request->get('id'));\n            $rules = (new Rule\\Listing())->load();\n\n            $name = $ruleSource->getName() . '_copy';\n\n            // Get new unique name.\n            do {\n                $uniqueName = true;\n\n                foreach ($rules as $rule) {\n                    if ($rule->getName() == $name) {\n                        $uniqueName = false;\n                        $name .= '_copy';\n\n                        break;\n                    }\n                }\n            } while (!$uniqueName);\n\n            // Clone and save new rule.\n            $newRule = clone $ruleSource;\n            $newRule->setId(null);\n            $newRule->setName($name);\n            $newRule->save();\n\n            $return['success'] = true;\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/rename\", name=\"pimcore_ecommerceframework_pricing_rename\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     * rename exiting rule\n     */\n    public function renameAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        $ruleId = $request->get('id');\n        $ruleNewName = $request->get('name');\n\n        try {\n            if ($ruleId && $ruleNewName) {\n                $renameRule = Rule::getById($ruleId);\n\n                if ($renameRule->getName() != $ruleNewName) {\n                    $rules = (new Rule\\Listing())->load();\n\n                    // Check if rulename is available.\n                    foreach ($rules as $rule) {\n                        if ($rule->getName() == $ruleNewName) {\n                            throw new Exception('Rulename already exists.');\n                        }\n                    }\n\n                    $renameRule->setName($ruleNewName);\n                    $renameRule->save();\n                }\n\n                $return['success'] = true;\n            }\n        } catch (Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * save rule config\n     *\n     * @Route(\"/save\", name=\"pimcore_ecommerceframework_pricing_save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save rule config\n        try {\n            $data = json_decode($request->get('data'));\n            $rule = Rule::getById((int) $request->get('id'));\n\n            // apply basic settings\n            $rule->setBehavior($data->settings->behavior)\n                ->setActive((bool)$data->settings->active);\n\n            // apply lang fields\n            foreach (\\Pimcore\\Tool::getValidLanguages() as $lang) {\n                $rule->setLabel($data->settings->{'label.' . $lang}, $lang);\n                $rule->setDescription($data->settings->{'description.' . $lang}, $lang);\n            }\n\n            // create root condition\n            $rootContainer = new \\stdClass();\n            $rootContainer->parent = null;\n            $rootContainer->operator = null;\n            $rootContainer->type = 'Bracket';\n            $rootContainer->conditions = [];\n\n            // create a tree from the flat structure\n            $currentContainer = $rootContainer;\n            foreach ($data->conditions as $settings) {\n                // handle brackets\n                if ($settings->bracketLeft == true) {\n                    $newContainer = new \\stdClass();\n                    $newContainer->parent = $currentContainer;\n                    $newContainer->type = 'Bracket';\n                    $newContainer->conditions = [];\n\n                    // move condition from current item to bracket item\n                    $newContainer->operator = $settings->operator;\n                    $settings->operator = null;\n\n                    $currentContainer->conditions[] = $newContainer;\n                    $currentContainer = $newContainer;\n                }\n\n                $currentContainer->conditions[] = $settings;\n\n                if ($settings->bracketRight == true) {\n                    $old = $currentContainer;\n                    $currentContainer = $currentContainer->parent;\n                    unset($old->parent);\n                }\n            }\n\n            // create rule condition\n            $condition = Factory::getInstance()->getPricingManager()->getCondition($rootContainer->type);\n            $condition->fromJSON(json_encode($rootContainer));\n            $rule->setCondition($condition);\n\n            // save action\n            $arrActions = [];\n            foreach ($data->actions as $setting) {\n                $action = Factory::getInstance()->getPricingManager()->getAction($setting->type);\n                $action->fromJSON(json_encode($setting));\n                $arrActions[] = $action;\n            }\n            $rule->setActions($arrActions);\n\n            // save rule\n            $rule->save();\n\n            // finish\n            $return['success'] = true;\n            $return['id'] = $rule->getId();\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/save-order\", name=\"pimcore_ecommerceframework_pricing_save-order\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveOrderAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save order\n        $rules = json_decode($request->get('rules'));\n        foreach ($rules as $id => $prio) {\n            $rule = Rule::getById((int)$id);\n            if ($rule) {\n                $rule->setPrio((int)$prio)->save();\n            }\n        }\n        $return['success'] = true;\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/get-config\", name=\"pimcore_ecommerceframework_pricing_get-config\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function getConfigAction()\n    {\n        $pricingManager = Factory::getInstance()->getPricingManager();\n\n        return $this->adminJson([\n            'condition' => array_keys($pricingManager->getConditionMapping()),\n            'action' => array_keys($pricingManager->getActionMapping()),\n        ]);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.panel\");\n\npimcore.bundle.EcommerceFramework.pricing.config.panel = Class.create({\n\n    /**\n     * @var string\n     */\n    layoutId: \"\",\n\n    /**\n     * @var array\n     */\n    condition: [],\n\n    /**\n     * @var array\n     */\n    action: [],\n\n    /**\n     * panels of open pricing rules\n     */\n    panels: {},\n\n\n    /**\n     * constructor\n     * @param layoutId\n     */\n    initialize: function(layoutId) {\n        this.layoutId = layoutId;\n\n        // load defined conditions & actions\n        var _this = this;\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_get-config'),\n            method: \"GET\",\n            success: function(result){\n                var config = Ext.decode(result.responseText);\n                _this.condition = config.condition;\n                _this.action = config.action;\n            }\n        });\n\n        // create layout\n        this.getLayout();\n    },\n\n\n    /**\n     * activate panel\n     */\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem( this.layoutId );\n    },\n\n\n    /**\n     * create tab panel\n     * @returns Ext.Panel\n     */\n    getLayout: function () {\n\n        if (!this.layout) {\n\n            // create new panel\n            this.layout = new Ext.Panel({\n                id: this.layoutId,\n                title: t(\"bundle_ecommerce_pricing_rules\"),\n                iconCls: \"bundle_ecommerce_pricing_rules\",\n                border: false,\n                layout: \"border\",\n                closable: true,\n\n                // layout...\n                items: [\n                    this.getTree(),         // item tree, left side\n                    this.getTabPanel()    // edit page, right side\n                ]\n            });\n\n            // add event listener\n            var layoutId = this.layoutId;\n            this.layout.on(\"destroy\", function () {\n                pimcore.globalmanager.remove( layoutId );\n            }.bind(this));\n\n            // add panel to pimcore panel tabs\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add( this.layout );\n            tabPanel.setActiveItem( this.layoutId );\n\n            // update layout\n            pimcore.layout.refresh();\n        }\n\n        return this.layout;\n    },\n\n\n    /**\n     * return treelist\n     * @returns {*}\n     */\n    getTree: function () {\n        if (!this.tree) {\n            this.saveButton = new Ext.Button({\n                // save button\n                hidden: true,\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_save\",\n                handler: function() {\n                    // this\n                    var button = this;\n\n                    // get current order\n                    var prio = 0;\n                    var rules = {};\n\n                    this.ownerCt.ownerCt.getRootNode().eachChild(function (rule){\n                        prio++;\n                        rules[ rule.id ] = prio;\n                    });\n\n                    // save order\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_ecommerceframework_pricing_save-order'),\n                        params: {\n                            rules: Ext.encode(rules)\n                        },\n                        method: \"PUT\",\n                        success: function(){\n                            button.hide();\n                        }\n                    });\n\n                }\n            });\n\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_list'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                useArrows:true,\n                autoScroll:true,\n                animate:true,\n                containerScroll: true,\n                width: 200,\n                split: true,\n                rootVisible: false,\n                viewConfig: {\n                    plugins: {\n                        ptype: 'treeviewdragdrop'\n                    }\n                },\n                listeners: {\n                    itemclick: this.openRule.bind(this),\n                    itemcontextmenu: function (tree, record, item, index, e, eOpts ) {\n                        tree.select();\n\n                        var menu = new Ext.menu.Menu();\n                        menu.add(new Ext.menu.Item({\n                            text: t('delete'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: this.deleteRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('copy'),\n                            iconCls: \"pimcore_icon_copy\",\n                            handler: this.copyRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('rename'),\n                            iconCls: \"pimcore_icon_key pimcore_icon_overlay_go\",\n                            handler: this.renameRule.bind(this, tree, record)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.pageX, e.pageY);\n                    }.bind(this),\n                    'beforeitemappend': function (thisNode, newChildNode, index, eOpts) {\n                        newChildNode.data.leaf = true;\n                    },\n                    itemmove: function(tree, oldParent, newParent, index, eOpts ) {\n                        this.saveButton.show();\n                    }.bind(this)\n                },\n                tbar: {\n                    items: [\n                        {\n                            // add button\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addRule.bind(this)\n                        }, {\n                            // spacer\n                            xtype: 'tbfill'\n                        }, this.saveButton\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n\n    /**\n     * add item popup\n     */\n    addRule: function () {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item'),\n            this.addRuleComplete.bind(this), null, null, \"\");\n    },\n\n\n    /**\n     * save added item\n     * @param button\n     * @param value\n     * @param object\n     * @todo ...\n     */\n    addRuleComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_add'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    documentId: (this.page ? this.page.id : null)\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.refresh(this.tree.getRootNode());\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t('add_target'), t('problem_creating_new_target'));\n                    } else {\n                        this.openRule(null, intval(data.id));\n                    }\n                }.bind(this)\n            });\n        } else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t('add_target'), t('problem_creating_new_target'));\n        }\n    },\n\n    refresh: function (record) {\n        var ownerTree = record.getOwnerTree();\n        record.data.expanded = true;\n        ownerTree.getStore().load({\n            node: record\n        });\n    },\n    /**\n     * delete existing rule\n     */\n    deleteRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_delete'),\n            method: 'DELETE',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * copy pricing rule\n     * @param tree\n     * @param record\n     */\n    copyRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_copy'),\n            method: 'POST',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * rename pricing rule popup\n     * @param tree\n     * @param record\n     */\n    renameRule: function (tree, record) {\n\n        let options = {\n            tree: tree,\n            id: record.id,\n        };\n\n        Ext.MessageBox.prompt(t('rename'), t('enter_the_name_of_the_new_item'),\n            this.renameRuleComplete.bind(this, options), null, null, record.data.text);\n    },\n\n    /**\n     * rename pricing rule\n     * @param button\n     * @param value\n     * @param object\n     */\n    renameRuleComplete: function (options, button, value, object) {\n\n        if (button == 'ok') {\n\n            let tree = options.tree;\n\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_rename'),\n                method: 'PUT',\n                params: {\n                    id: options.id,\n                    name: value\n                },\n                success: function (response, opts) {\n\n                    let responseData = Ext.decode(response.responseText);\n\n                    if (responseData.success) {\n                        this.refresh(this.tree.getRootNode());\n                    } else {\n                        Ext.MessageBox.alert(t('rename'), t('name_already_in_use'));\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * open pricing rule\n     * @param node\n     */\n    openRule: function (tree, record, item, index, e, eOpts ) {\n\n        if(!is_numeric(record)) {\n            record = record.id;\n        }\n\n        //try {\n            var pricingRuleKey = \"pricingrule_\" + record;\n            if (this.panels[pricingRuleKey]) {\n                this.panels[pricingRuleKey].activate();\n            } else {\n                // load defined rules\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_get'),\n                    params: {\n                        id: record\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        var item = new pimcore.bundle.EcommerceFramework.pricing.config.item(this, res);\n                        this.panels[pricingRuleKey] = item;\n                    }.bind(this)\n                });\n            }\n        //} catch (e) {\n        //    console.log(e);\n        //}\n\n\n\n    },\n\n\n    /**\n     * @returns Ext.TabPanel\n     */\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.TabPanel({\n                region: \"center\",\n                border: false\n            });\n        }\n\n        return this.panel;\n    }\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\Controller;\n\nuse Exception;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Factory;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Rule;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Class ConfigController\n *\n * @Route(\"/pricing\")\n *\n * @internal\n */\nclass PricingController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        // permission check\n        $access = $this->getAdminUser()->isAllowed('bundle_ecommerce_pricing_rules');\n        if (!$access) {\n            throw new \\Exception('this function requires \"bundle_ecommerce_pricing_rules\" permission!');\n        }\n    }\n\n    /**\n     * @Route(\"/list\", name=\"pimcore_ecommerceframework_pricing_list\", methods={\"GET\"})\n     */\n    public function listAction()\n    {\n        $rules = new Rule\\Listing();\n        $rules->setOrderKey('prio');\n        $rules->setOrder('ASC');\n\n        $json = [];\n        foreach ($rules->load() as $rule) {\n            if ($rule->getActive()) {\n                $icon = 'bundle_ecommerce_pricing_icon_rule_' . $rule->getBehavior();\n                $title = 'Verhalten: ' . $rule->getBehavior();\n            } else {\n                $icon = 'bundle_ecommerce_pricing_icon_rule_disabled';\n                $title = 'Deaktiviert';\n            }\n\n            $json[] = [\n                'iconCls' => $icon,\n                'id' => $rule->getId(),\n                'text' => $rule->getName(),\n                'qtipCfg' => [\n                    'xtype' => 'quicktip',\n                    'title' => $rule->getLabel(),\n                    'text' => $title,\n                ],\n            ];\n        }\n\n        return $this->adminJson($json);\n    }\n\n    /**\n     * get priceing rule details as json\n     *\n     * @Route(\"/get\", name=\"pimcore_ecommerceframework_pricing_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws NotFoundHttpException\n     */\n    public function getAction(Request $request)\n    {\n        $rule = Rule::getById((int) $request->get('id'));\n        if ($rule) {\n            // get data\n            $condition = $rule->getCondition();\n            $localizedLabel = [];\n            $localizedDescription = [];\n\n            foreach (\\Pimcore\\Tool::getValidLanguages() as $lang) {\n                $localizedLabel[$lang] = $rule->getLabel($lang);\n                $localizedDescription[$lang] = $rule->getDescription($lang);\n            }\n\n            // create json config\n            $json = [\n                'id' => $rule->getId(),\n                'name' => $rule->getName(),\n                'label' => $localizedLabel,\n                'description' => $localizedDescription,\n                'behavior' => $rule->getBehavior(),\n                'active' => $rule->getActive(),\n                'condition' => $condition ? json_decode($condition->toJSON()) : '',\n                'actions' => [],\n            ];\n\n            foreach ($rule->getActions() as $action) {\n                $json['actions'][] = json_decode($action->toJSON());\n            }\n\n            return $this->adminJson($json);\n        }\n\n        throw $this->createNotFoundException('Rule not found');\n    }\n\n    /**\n     * add new rule\n     *\n     * @Route(\"/add\", name=\"pimcore_ecommerceframework_pricing_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save rule\n        try {\n            $rule = new Rule();\n            $rule->setName($request->get('name'));\n            $rule->save();\n\n            $return['success'] = true;\n            $return['id'] = $rule->getId();\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * delete exiting rule\n     *\n     * @Route(\"/delete\", name=\"pimcore_ecommerceframework_pricing_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // delete rule\n        try {\n            $rule = Rule::getById((int) $request->get('id'));\n            $rule->delete();\n            $return['success'] = true;\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/copy\", name=\"pimcore_ecommerceframework_pricing_copy\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     * copy existing rule\n     */\n    public function copyAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // copy rule\n        try {\n            /** @var Rule $ruleSource */\n            $ruleSource = Rule::getById((int) $request->get('id'));\n            $rules = (new Rule\\Listing())->load();\n\n            $name = $ruleSource->getName() . '_copy';\n\n            // Get new unique name.\n            do {\n                $uniqueName = true;\n\n                foreach ($rules as $rule) {\n                    if ($rule->getName() == $name) {\n                        $uniqueName = false;\n                        $name .= '_copy';\n\n                        break;\n                    }\n                }\n            } while (!$uniqueName);\n\n            // Clone and save new rule.\n            $newRule = clone $ruleSource;\n            $newRule->setId(null);\n            $newRule->setName($name);\n            $newRule->save();\n\n            $return['success'] = true;\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/rename\", name=\"pimcore_ecommerceframework_pricing_rename\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     * rename exiting rule\n     */\n    public function renameAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        $ruleId = $request->get('id');\n        $ruleNewName = $request->get('name');\n\n        try {\n            if ($ruleId && $ruleNewName && preg_match('/^[a-zA-Z0-9_\\-]+$/', $ruleNewName)) {\n                $renameRule = Rule::getById($ruleId);\n\n                if ($renameRule->getName() != $ruleNewName) {\n                    $rules = (new Rule\\Listing())->load();\n\n                    // Check if rulename is available.\n                    foreach ($rules as $rule) {\n                        if ($rule->getName() == $ruleNewName) {\n                            throw new Exception('Rulename already exists.');\n                        }\n                    }\n\n                    $renameRule->setName($ruleNewName);\n                    $renameRule->save();\n                }\n\n                $return['success'] = true;\n            }\n        } catch (Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * save rule config\n     *\n     * @Route(\"/save\", name=\"pimcore_ecommerceframework_pricing_save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save rule config\n        try {\n            $data = json_decode($request->get('data'));\n            $rule = Rule::getById((int) $request->get('id'));\n\n            // apply basic settings\n            $rule->setBehavior($data->settings->behavior)\n                ->setActive((bool)$data->settings->active);\n\n            // apply lang fields\n            foreach (\\Pimcore\\Tool::getValidLanguages() as $lang) {\n                $rule->setLabel($data->settings->{'label.' . $lang}, $lang);\n                $rule->setDescription($data->settings->{'description.' . $lang}, $lang);\n            }\n\n            // create root condition\n            $rootContainer = new \\stdClass();\n            $rootContainer->parent = null;\n            $rootContainer->operator = null;\n            $rootContainer->type = 'Bracket';\n            $rootContainer->conditions = [];\n\n            // create a tree from the flat structure\n            $currentContainer = $rootContainer;\n            foreach ($data->conditions as $settings) {\n                // handle brackets\n                if ($settings->bracketLeft == true) {\n                    $newContainer = new \\stdClass();\n                    $newContainer->parent = $currentContainer;\n                    $newContainer->type = 'Bracket';\n                    $newContainer->conditions = [];\n\n                    // move condition from current item to bracket item\n                    $newContainer->operator = $settings->operator;\n                    $settings->operator = null;\n\n                    $currentContainer->conditions[] = $newContainer;\n                    $currentContainer = $newContainer;\n                }\n\n                $currentContainer->conditions[] = $settings;\n\n                if ($settings->bracketRight == true) {\n                    $old = $currentContainer;\n                    $currentContainer = $currentContainer->parent;\n                    unset($old->parent);\n                }\n            }\n\n            // create rule condition\n            $condition = Factory::getInstance()->getPricingManager()->getCondition($rootContainer->type);\n            $condition->fromJSON(json_encode($rootContainer));\n            $rule->setCondition($condition);\n\n            // save action\n            $arrActions = [];\n            foreach ($data->actions as $setting) {\n                $action = Factory::getInstance()->getPricingManager()->getAction($setting->type);\n                $action->fromJSON(json_encode($setting));\n                $arrActions[] = $action;\n            }\n            $rule->setActions($arrActions);\n\n            // save rule\n            $rule->save();\n\n            // finish\n            $return['success'] = true;\n            $return['id'] = $rule->getId();\n        } catch (\\Exception $e) {\n            $return['message'] = $e->getMessage();\n        }\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/save-order\", name=\"pimcore_ecommerceframework_pricing_save-order\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveOrderAction(Request $request)\n    {\n        // send json respone\n        $return = [\n            'success' => false,\n            'message' => '',\n        ];\n\n        // save order\n        $rules = json_decode($request->get('rules'));\n        foreach ($rules as $id => $prio) {\n            $rule = Rule::getById((int)$id);\n            if ($rule) {\n                $rule->setPrio((int)$prio)->save();\n            }\n        }\n        $return['success'] = true;\n\n        // send respone\n        return $this->adminJson($return);\n    }\n\n    /**\n     * @Route(\"/get-config\", name=\"pimcore_ecommerceframework_pricing_get-config\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function getConfigAction()\n    {\n        $pricingManager = Factory::getInstance()->getPricingManager();\n\n        return $this->adminJson([\n            'condition' => array_keys($pricingManager->getConditionMapping()),\n            'action' => array_keys($pricingManager->getActionMapping()),\n        ]);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.panel\");\n\npimcore.bundle.EcommerceFramework.pricing.config.panel = Class.create({\n\n    /**\n     * @var string\n     */\n    layoutId: \"\",\n\n    /**\n     * @var array\n     */\n    condition: [],\n\n    /**\n     * @var array\n     */\n    action: [],\n\n    /**\n     * panels of open pricing rules\n     */\n    panels: {},\n\n\n    /**\n     * constructor\n     * @param layoutId\n     */\n    initialize: function(layoutId) {\n        this.layoutId = layoutId;\n\n        // load defined conditions & actions\n        var _this = this;\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_get-config'),\n            method: \"GET\",\n            success: function(result){\n                var config = Ext.decode(result.responseText);\n                _this.condition = config.condition;\n                _this.action = config.action;\n            }\n        });\n\n        // create layout\n        this.getLayout();\n    },\n\n\n    /**\n     * activate panel\n     */\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem( this.layoutId );\n    },\n\n\n    /**\n     * create tab panel\n     * @returns Ext.Panel\n     */\n    getLayout: function () {\n\n        if (!this.layout) {\n\n            // create new panel\n            this.layout = new Ext.Panel({\n                id: this.layoutId,\n                title: t(\"bundle_ecommerce_pricing_rules\"),\n                iconCls: \"bundle_ecommerce_pricing_rules\",\n                border: false,\n                layout: \"border\",\n                closable: true,\n\n                // layout...\n                items: [\n                    this.getTree(),         // item tree, left side\n                    this.getTabPanel()    // edit page, right side\n                ]\n            });\n\n            // add event listener\n            var layoutId = this.layoutId;\n            this.layout.on(\"destroy\", function () {\n                pimcore.globalmanager.remove( layoutId );\n            }.bind(this));\n\n            // add panel to pimcore panel tabs\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add( this.layout );\n            tabPanel.setActiveItem( this.layoutId );\n\n            // update layout\n            pimcore.layout.refresh();\n        }\n\n        return this.layout;\n    },\n\n\n    /**\n     * return treelist\n     * @returns {*}\n     */\n    getTree: function () {\n        if (!this.tree) {\n            this.saveButton = new Ext.Button({\n                // save button\n                hidden: true,\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_save\",\n                handler: function() {\n                    // this\n                    var button = this;\n\n                    // get current order\n                    var prio = 0;\n                    var rules = {};\n\n                    this.ownerCt.ownerCt.getRootNode().eachChild(function (rule){\n                        prio++;\n                        rules[ rule.id ] = prio;\n                    });\n\n                    // save order\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_ecommerceframework_pricing_save-order'),\n                        params: {\n                            rules: Ext.encode(rules)\n                        },\n                        method: \"PUT\",\n                        success: function(){\n                            button.hide();\n                        }\n                    });\n\n                }\n            });\n\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_list'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                useArrows:true,\n                autoScroll:true,\n                animate:true,\n                containerScroll: true,\n                width: 200,\n                split: true,\n                rootVisible: false,\n                viewConfig: {\n                    plugins: {\n                        ptype: 'treeviewdragdrop'\n                    }\n                },\n                listeners: {\n                    itemclick: this.openRule.bind(this),\n                    itemcontextmenu: function (tree, record, item, index, e, eOpts ) {\n                        tree.select();\n\n                        var menu = new Ext.menu.Menu();\n                        menu.add(new Ext.menu.Item({\n                            text: t('delete'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: this.deleteRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('copy'),\n                            iconCls: \"pimcore_icon_copy\",\n                            handler: this.copyRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('rename'),\n                            iconCls: \"pimcore_icon_key pimcore_icon_overlay_go\",\n                            handler: this.renameRule.bind(this, tree, record)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.pageX, e.pageY);\n                    }.bind(this),\n                    'beforeitemappend': function (thisNode, newChildNode, index, eOpts) {\n                        newChildNode.data.leaf = true;\n                    },\n                    itemmove: function(tree, oldParent, newParent, index, eOpts ) {\n                        this.saveButton.show();\n                    }.bind(this)\n                },\n                tbar: {\n                    items: [\n                        {\n                            // add button\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addRule.bind(this)\n                        }, {\n                            // spacer\n                            xtype: 'tbfill'\n                        }, this.saveButton\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n\n    /**\n     * add item popup\n     */\n    addRule: function () {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item'),\n            this.addRuleComplete.bind(this), null, null, \"\");\n    },\n\n\n    /**\n     * save added item\n     * @param button\n     * @param value\n     * @param object\n     * @todo ...\n     */\n    addRuleComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_add'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    documentId: (this.page ? this.page.id : null)\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.refresh(this.tree.getRootNode());\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t('add_target'), t('problem_creating_new_target'));\n                    } else {\n                        this.openRule(null, intval(data.id));\n                    }\n                }.bind(this)\n            });\n        } else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t('add_target'), t('problem_creating_new_target'));\n        }\n    },\n\n    refresh: function (record) {\n        var ownerTree = record.getOwnerTree();\n        record.data.expanded = true;\n        ownerTree.getStore().load({\n            node: record\n        });\n    },\n    /**\n     * delete existing rule\n     */\n    deleteRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_delete'),\n            method: 'DELETE',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * copy pricing rule\n     * @param tree\n     * @param record\n     */\n    copyRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_copy'),\n            method: 'POST',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * rename pricing rule popup\n     * @param tree\n     * @param record\n     */\n    renameRule: function (tree, record) {\n\n        let options = {\n            tree: tree,\n            id: record.id,\n        };\n\n        Ext.MessageBox.prompt(t('rename'), t('enter_the_name_of_the_new_item'),\n            this.renameRuleComplete.bind(this, options), null, null, record.data.text);\n    },\n\n    /**\n     * rename pricing rule\n     * @param button\n     * @param value\n     * @param object\n     */\n    renameRuleComplete: function (options, button, value, object) {\n\n        if (button == 'ok') {\n\n            if(value.match(/^[a-zA-Z0-9_\\-]+$/)) {\n                let tree = options.tree;\n\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_rename'),\n                    method: 'PUT',\n                    params: {\n                        id: options.id,\n                        name: value\n                    },\n                    success: function (response, opts) {\n\n                        let responseData = Ext.decode(response.responseText);\n\n                        if (responseData.success) {\n                            this.refresh(this.tree.getRootNode());\n                        } else {\n                            Ext.MessageBox.alert(t('rename'), t('name_already_in_use'));\n                        }\n                    }.bind(this)\n                });\n            } else {\n                Ext.Msg.alert(t('add_target'), t('problem_creating_new_target'));\n            }\n        }\n    },\n\n    /**\n     * open pricing rule\n     * @param node\n     */\n    openRule: function (tree, record, item, index, e, eOpts ) {\n\n        if(!is_numeric(record)) {\n            record = record.id;\n        }\n\n        //try {\n            var pricingRuleKey = \"pricingrule_\" + record;\n            if (this.panels[pricingRuleKey]) {\n                this.panels[pricingRuleKey].activate();\n            } else {\n                // load defined rules\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_get'),\n                    params: {\n                        id: record\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        var item = new pimcore.bundle.EcommerceFramework.pricing.config.item(this, res);\n                        this.panels[pricingRuleKey] = item;\n                    }.bind(this)\n                });\n            }\n        //} catch (e) {\n        //    console.log(e);\n        //}\n\n\n\n    },\n\n\n    /**\n     * @returns Ext.TabPanel\n     */\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.TabPanel({\n                region: \"center\",\n                border: false\n            });\n        }\n\n        return this.panel;\n    }\n});\n"], "filenames": ["bundles/EcommerceFrameworkBundle/Controller/PricingController.php", "bundles/EcommerceFrameworkBundle/Resources/public/js/pricing/config/panel.js"], "buggy_code_start_loc": [267, 354], "buggy_code_end_loc": [268, 374], "fixing_code_start_loc": [267, 354], "fixing_code_end_loc": [268, 378], "type": "CWE-79", "message": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2022-0257", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-17T16:15:07.650", "lastModified": "2022-01-24T20:21:56.173", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.8", "matchCriteriaId": "5AC8F67B-4157-4F41-B0C7-EBD7FA95553F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/dfaf78b26fb77990267c0cc05b9fcb9f8de7b66d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/bad2073c-bbd5-4425-b3e9-c336b73ddda6", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/dfaf78b26fb77990267c0cc05b9fcb9f8de7b66d"}}