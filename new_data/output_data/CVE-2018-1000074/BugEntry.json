{"buggy_code": ["# frozen_string_literal: true\nrequire 'rubygems/command'\nrequire 'rubygems/local_remote_options'\nrequire 'rubygems/gemcutter_utilities'\n\nclass Gem::Commands::OwnerCommand < Gem::Command\n  include Gem::LocalRemoteOptions\n  include Gem::GemcutterUtilities\n\n  def description # :nodoc:\n    <<-EOF\nThe owner command lets you add and remove owners of a gem on a push\nserver (the default is https://rubygems.org).\n\nThe owner of a gem has the permission to push new versions, yank existing\nversions or edit the HTML page of the gem.  Be careful of who you give push\npermission to.\n    EOF\n  end\n\n  def arguments # :nodoc:\n    \"GEM       gem to manage owners for\"\n  end\n\n  def usage # :nodoc:\n    \"#{program_name} GEM\"\n  end\n\n  def initialize\n    super 'owner', 'Manage gem owners of a gem on the push server'\n    add_proxy_option\n    add_key_option\n    defaults.merge! :add => [], :remove => []\n\n    add_option '-a', '--add EMAIL', 'Add an owner' do |value, options|\n      options[:add] << value\n    end\n\n    add_option '-r', '--remove EMAIL', 'Remove an owner' do |value, options|\n      options[:remove] << value\n    end\n\n    add_option '-h', '--host HOST',\n               'Use another gemcutter-compatible host',\n               '  (e.g. https://rubygems.org)' do |value, options|\n      options[:host] = value\n    end\n  end\n\n  def execute\n    @host = options[:host]\n\n    sign_in\n    name = get_one_gem_name\n\n    add_owners    name, options[:add]\n    remove_owners name, options[:remove]\n    show_owners   name\n  end\n\n  def show_owners name\n    response = rubygems_api_request :get, \"api/v1/gems/#{name}/owners.yaml\" do |request|\n      request.add_field \"Authorization\", api_key\n    end\n\n    with_response response do |resp|\n      owners = YAML.load resp.body\n\n      say \"Owners for gem: #{name}\"\n      owners.each do |owner|\n        say \"- #{owner['email'] || owner['handle'] || owner['id']}\"\n      end\n    end\n  end\n\n  def add_owners name, owners\n    manage_owners :post, name, owners\n  end\n\n  def remove_owners name, owners\n    manage_owners :delete, name, owners\n  end\n\n  def manage_owners method, name, owners\n    owners.each do |owner|\n      begin\n        response = rubygems_api_request method, \"api/v1/gems/#{name}/owners\" do |request|\n          request.set_form_data 'email' => owner\n          request.add_field \"Authorization\", api_key\n        end\n\n        action = method == :delete ? \"Removing\" : \"Adding\"\n\n        with_response response, \"#{action} #{owner}\"\n      rescue\n        # ignore\n      end\n    end\n  end\n\nend\n", "# frozen_string_literal: true\nrequire 'rubygems/test_case'\nrequire 'rubygems/commands/owner_command'\n\nclass TestGemCommandsOwnerCommand < Gem::TestCase\n\n  def setup\n    super\n\n    ENV[\"RUBYGEMS_HOST\"] = nil\n    @fetcher = Gem::FakeFetcher.new\n    Gem::RemoteFetcher.fetcher = @fetcher\n    Gem.configuration.rubygems_api_key = \"ed244fbf2b1a52e012da8616c512fa47f9aa5250\"\n\n    @cmd = Gem::Commands::OwnerCommand.new\n  end\n\n  def test_show_owners\n    response = <<EOF\n---\n- email: user1@example.com\n  id: 1\n  handle: user1\n- email: user2@example.com\n- id: 3\n  handle: user3\n- id: 4\nEOF\n\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_equal Net::HTTP::Get, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n    assert_match %r{- user2@example.com}, @ui.output\n    assert_match %r{- user3}, @ui.output\n    assert_match %r{- 4}, @ui.output\n  end\n\n  def test_show_owners_setting_up_host_through_env_var\n    response = \"- email: user1@example.com\\n\"\n    host = \"http://rubygems.example\"\n    ENV[\"RUBYGEMS_HOST\"] = host\n\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_show_owners_setting_up_host\n    response = \"- email: user1@example.com\\n\"\n    host = \"http://rubygems.example\"\n    @cmd.host = host\n\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_show_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 403, 'Forbidden']\n\n    assert_raises Gem::MockGemUi::TermError do\n      use_ui @ui do\n        @cmd.show_owners(\"freewill\")\n      end\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_show_owners_key\n    response = \"- email: user1@example.com\\n\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.show_owners('freewill')\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_add_owners\n    response = \"Owner added successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.add_owners(\"freewill\", [\"user-new1@example.com\"])\n    end\n\n    assert_equal Net::HTTP::Post, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n    assert_equal \"email=user-new1%40example.com\", @fetcher.last_request.body\n\n    assert_match response, @ui.output\n  end\n\n  def test_add_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 403, 'Forbidden']\n\n    use_ui @ui do\n      @cmd.add_owners(\"freewill\", [\"user-new1@example.com\"])\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_add_owner_with_host_option_through_execute\n    host = \"http://rubygems.example\"\n    add_owner_response = \"Owner added successfully.\"\n    show_owners_response = \"- email: user1@example.com\\n\"\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners\"] = [add_owner_response, 200, 'OK']\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [show_owners_response, 200, 'OK']\n\n    @cmd.handle_options %W[--host #{host} --add user-new1@example.com freewill]\n\n    use_ui @ui do\n      @cmd.execute\n    end\n\n    assert_match add_owner_response, @ui.output\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_add_owners_key\n    response = \"Owner added successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.add_owners('freewill', ['user-new1@example.com'])\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_remove_owners\n    response = \"Owner removed successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"user-remove1@example.com\"])\n    end\n\n    assert_equal Net::HTTP::Delete, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n    assert_equal \"email=user-remove1%40example.com\", @fetcher.last_request.body\n\n    assert_match response, @ui.output\n  end\n\n  def test_remove_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 403, 'Forbidden']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"user-remove1@example.com\"])\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_remove_owners_key\n    response = \"Owner removed successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.remove_owners('freewill', ['user-remove1@example.com'])\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_remove_owners_missing\n    response = 'Owner could not be found.'\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 404, 'Not Found']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"missing@example\"])\n    end\n\n    assert_equal \"Removing missing@example: #{response}\\n\", @ui.output\n  end\n\nend\n"], "fixing_code": ["# frozen_string_literal: true\nrequire 'rubygems/command'\nrequire 'rubygems/local_remote_options'\nrequire 'rubygems/gemcutter_utilities'\n\nclass Gem::Commands::OwnerCommand < Gem::Command\n  include Gem::LocalRemoteOptions\n  include Gem::GemcutterUtilities\n\n  def description # :nodoc:\n    <<-EOF\nThe owner command lets you add and remove owners of a gem on a push\nserver (the default is https://rubygems.org).\n\nThe owner of a gem has the permission to push new versions, yank existing\nversions or edit the HTML page of the gem.  Be careful of who you give push\npermission to.\n    EOF\n  end\n\n  def arguments # :nodoc:\n    \"GEM       gem to manage owners for\"\n  end\n\n  def usage # :nodoc:\n    \"#{program_name} GEM\"\n  end\n\n  def initialize\n    super 'owner', 'Manage gem owners of a gem on the push server'\n    add_proxy_option\n    add_key_option\n    defaults.merge! :add => [], :remove => []\n\n    add_option '-a', '--add EMAIL', 'Add an owner' do |value, options|\n      options[:add] << value\n    end\n\n    add_option '-r', '--remove EMAIL', 'Remove an owner' do |value, options|\n      options[:remove] << value\n    end\n\n    add_option '-h', '--host HOST',\n               'Use another gemcutter-compatible host',\n               '  (e.g. https://rubygems.org)' do |value, options|\n      options[:host] = value\n    end\n  end\n\n  def execute\n    @host = options[:host]\n\n    sign_in\n    name = get_one_gem_name\n\n    add_owners    name, options[:add]\n    remove_owners name, options[:remove]\n    show_owners   name\n  end\n\n  def show_owners name\n    response = rubygems_api_request :get, \"api/v1/gems/#{name}/owners.yaml\" do |request|\n      request.add_field \"Authorization\", api_key\n    end\n\n    with_response response do |resp|\n      owners = Gem::SafeYAML.load resp.body\n\n      say \"Owners for gem: #{name}\"\n      owners.each do |owner|\n        say \"- #{owner['email'] || owner['handle'] || owner['id']}\"\n      end\n    end\n  end\n\n  def add_owners name, owners\n    manage_owners :post, name, owners\n  end\n\n  def remove_owners name, owners\n    manage_owners :delete, name, owners\n  end\n\n  def manage_owners method, name, owners\n    owners.each do |owner|\n      begin\n        response = rubygems_api_request method, \"api/v1/gems/#{name}/owners\" do |request|\n          request.set_form_data 'email' => owner\n          request.add_field \"Authorization\", api_key\n        end\n\n        action = method == :delete ? \"Removing\" : \"Adding\"\n\n        with_response response, \"#{action} #{owner}\"\n      rescue\n        # ignore\n      end\n    end\n  end\n\nend\n", "# frozen_string_literal: true\nrequire 'rubygems/test_case'\nrequire 'rubygems/commands/owner_command'\n\nclass Foo\nend\n\nclass TestGemCommandsOwnerCommand < Gem::TestCase\n\n  def setup\n    super\n\n    ENV[\"RUBYGEMS_HOST\"] = nil\n    @fetcher = Gem::FakeFetcher.new\n    Gem::RemoteFetcher.fetcher = @fetcher\n    Gem.configuration.rubygems_api_key = \"ed244fbf2b1a52e012da8616c512fa47f9aa5250\"\n\n    @cmd = Gem::Commands::OwnerCommand.new\n  end\n\n  def test_show_owners\n    response = <<EOF\n---\n- email: user1@example.com\n  id: 1\n  handle: user1\n- email: user2@example.com\n- id: 3\n  handle: user3\n- id: 4\nEOF\n\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_equal Net::HTTP::Get, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n    assert_match %r{- user2@example.com}, @ui.output\n    assert_match %r{- user3}, @ui.output\n    assert_match %r{- 4}, @ui.output\n  end\n\n  def test_show_owners_dont_load_objects\n    skip \"testing a psych-only API\" unless defined?(::Psych::DisallowedClass)\n\n    response = <<EOF\n---\n- email: !ruby/object:Foo {}\n  id: 1\n  handle: user1\n- email: user2@example.com\n- id: 3\n  handle: user3\n- id: 4\nEOF\n\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    assert_raises Psych::DisallowedClass do\n      use_ui @ui do\n        @cmd.show_owners(\"freewill\")\n      end\n    end\n\n  end\n\n\n  def test_show_owners_setting_up_host_through_env_var\n    response = \"- email: user1@example.com\\n\"\n    host = \"http://rubygems.example\"\n    ENV[\"RUBYGEMS_HOST\"] = host\n\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_show_owners_setting_up_host\n    response = \"- email: user1@example.com\\n\"\n    host = \"http://rubygems.example\"\n    @cmd.host = host\n\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.show_owners(\"freewill\")\n    end\n\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_show_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 403, 'Forbidden']\n\n    assert_raises Gem::MockGemUi::TermError do\n      use_ui @ui do\n        @cmd.show_owners(\"freewill\")\n      end\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_show_owners_key\n    response = \"- email: user1@example.com\\n\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners.yaml\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.show_owners('freewill')\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_add_owners\n    response = \"Owner added successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.add_owners(\"freewill\", [\"user-new1@example.com\"])\n    end\n\n    assert_equal Net::HTTP::Post, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n    assert_equal \"email=user-new1%40example.com\", @fetcher.last_request.body\n\n    assert_match response, @ui.output\n  end\n\n  def test_add_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 403, 'Forbidden']\n\n    use_ui @ui do\n      @cmd.add_owners(\"freewill\", [\"user-new1@example.com\"])\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_add_owner_with_host_option_through_execute\n    host = \"http://rubygems.example\"\n    add_owner_response = \"Owner added successfully.\"\n    show_owners_response = \"- email: user1@example.com\\n\"\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners\"] = [add_owner_response, 200, 'OK']\n    @fetcher.data[\"#{host}/api/v1/gems/freewill/owners.yaml\"] = [show_owners_response, 200, 'OK']\n\n    @cmd.handle_options %W[--host #{host} --add user-new1@example.com freewill]\n\n    use_ui @ui do\n      @cmd.execute\n    end\n\n    assert_match add_owner_response, @ui.output\n    assert_match %r{Owners for gem: freewill}, @ui.output\n    assert_match %r{- user1@example.com}, @ui.output\n  end\n\n  def test_add_owners_key\n    response = \"Owner added successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.add_owners('freewill', ['user-new1@example.com'])\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_remove_owners\n    response = \"Owner removed successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"user-remove1@example.com\"])\n    end\n\n    assert_equal Net::HTTP::Delete, @fetcher.last_request.class\n    assert_equal Gem.configuration.rubygems_api_key, @fetcher.last_request[\"Authorization\"]\n    assert_equal \"email=user-remove1%40example.com\", @fetcher.last_request.body\n\n    assert_match response, @ui.output\n  end\n\n  def test_remove_owners_denied\n    response = \"You don't have permission to push to this gem\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 403, 'Forbidden']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"user-remove1@example.com\"])\n    end\n\n    assert_match response, @ui.output\n  end\n\n  def test_remove_owners_key\n    response = \"Owner removed successfully.\"\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 200, 'OK']\n    File.open Gem.configuration.credentials_path, 'a' do |f|\n      f.write ':other: 701229f217cdf23b1344c7b4b54ca97'\n    end\n    Gem.configuration.load_api_keys\n\n    @cmd.handle_options %w(-k other)\n    @cmd.remove_owners('freewill', ['user-remove1@example.com'])\n\n    assert_equal '701229f217cdf23b1344c7b4b54ca97', @fetcher.last_request['Authorization']\n  end\n\n  def test_remove_owners_missing\n    response = 'Owner could not be found.'\n    @fetcher.data[\"#{Gem.host}/api/v1/gems/freewill/owners\"] = [response, 404, 'Not Found']\n\n    use_ui @ui do\n      @cmd.remove_owners(\"freewill\", [\"missing@example\"])\n    end\n\n    assert_equal \"Removing missing@example: #{response}\\n\", @ui.output\n  end\n\nend\n"], "filenames": ["lib/rubygems/commands/owner_command.rb", "test/rubygems/test_gem_commands_owner_command.rb"], "buggy_code_start_loc": [67, 3], "buggy_code_end_loc": [68, 45], "fixing_code_start_loc": [67, 4], "fixing_code_end_loc": [68, 74], "type": "CWE-502", "message": "RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6.", "other": {"cve": {"id": "CVE-2018-1000074", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-13T15:29:00.487", "lastModified": "2019-05-20T13:29:00.290", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack appear to be exploitable via victim must run the `gem owner` command on a gem with a specially crafted YAML file. This vulnerability appears to have been fixed in 2.7.6."}, {"lang": "es", "value": "Las versiones de RubyGems de la serie Ruby 2.2: 2.2.9 y anteriores, de la serie Ruby 2.3: 2.3.6 y anteriores, de la serie Ruby 2.4: 2.4.3 y anteriores, y de la serie Ruby 2.5: versiones 2.5.0 y anteriores, anteriores a la revisi\u00f3n del trunk 62422 contiene una vulnerabilidad de deserializaci\u00f3n de datos no fiables en el comando owner que puede resultar en la ejecuci\u00f3n de c\u00f3digo. Este ataque parece ser explotable si la v\u00edctima ejecuta el comando \"gem owner\" con un archivo YAML especialmente manipulado. La vulnerabilidad parece haber sido solucionada en la versi\u00f3n 2.7.6."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.2.9", "matchCriteriaId": "BEE89FF0-0079-4DF5-ACFC-E1B5415E54F4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.6", "matchCriteriaId": "8080FB82-5445-4A17-9ECB-806991906E80"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4.3", "matchCriteriaId": "CCBC38C5-781E-4998-877D-42265F1DBD05"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.0", "matchCriteriaId": "6ACE6376-2E27-4F56-9315-03367963DB09"}]}]}], "references": [{"url": "http://blog.rubygems.org/2018/02/15/2.7.6-released.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00036.html", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3729", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3730", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3731", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2019:2028", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0542", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0591", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0663", "source": "cve@mitre.org"}, {"url": "https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00017.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2018/08/msg00028.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2019/05/msg00028.html", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/3621-1/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/3621-2/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/3685-1/", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2018/dsa-4219", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2018/dsa-4259", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d"}}