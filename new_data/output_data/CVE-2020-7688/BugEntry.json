{"buggy_code": ["var contra = require(\"contra\"),\n  path = require(\"path\"),\n  fUtils = require(\"./files\"),\n  cp = require(\"child_process\");\n\nvar gitApp = \"git\",\n  gitExtra = { env: process.env };\n\nvar escapeQuotes = function (str) {\n  if (typeof str === \"string\") {\n    return '\"' + str.replace(/([\"'$`\\\\])/g, \"\\\\$1\") + '\"';\n  } else {\n    return str;\n  }\n};\n\nmodule.exports.isRepositoryClean = function (callback) {\n  cp.exec(gitApp + \" \" + [\"ls-files\", \"-m\"].join(\" \"), gitExtra, function (\n    er,\n    stdout,\n    stderr\n  ) {\n    // makeCommit parly inspired and taken from NPM version module\n    var lines = stdout\n      .trim()\n      .split(\"\\n\")\n      .filter(function (line) {\n        var file = path.basename(line.replace(/.{1,2}\\s+/, \"\"));\n        return (\n          line.trim() && !line.match(/^\\?\\? /) && !fUtils.isPackageFile(line)\n        );\n      })\n      .map(function (line) {\n        return line.trim();\n      });\n\n    if (lines.length) {\n      return callback(\n        new Error(\"Git working directory not clean.\\n\" + lines.join(\"\\n\"))\n      );\n    }\n    return callback();\n  });\n};\n\nmodule.exports.checkout = function (callback) {\n  cp.exec(gitApp + \" checkout -- .\", gitExtra, callback);\n};\n\nmodule.exports.commit = function (files, message, newVer, tagName, callback) {\n  message = escapeQuotes(message.replace(\"%s\", newVer));\n  files = files.map(escapeQuotes).join(\" \");\n  var functionSeries = [\n    function (done) {\n      cp.exec(gitApp + \" add \" + files, gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec(\n        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),\n        gitExtra,\n        done\n      );\n    },\n  ];\n  contra.series(functionSeries, callback);\n};\n"], "fixing_code": ["var contra = require(\"contra\"),\n  path = require(\"path\"),\n  fUtils = require(\"./files\"),\n  cp = require(\"child_process\");\n\nvar gitApp = \"git\",\n  gitExtra = { env: process.env };\n\nvar escapeQuotes = function (str) {\n  if (typeof str === \"string\") {\n    return '\"' + str.replace(/([\"'$`\\\\])/g, \"\\\\$1\") + '\"';\n  } else {\n    return str;\n  }\n};\n\nmodule.exports.isRepositoryClean = function (callback) {\n  cp.exec(gitApp + \" \" + [\"ls-files\", \"-m\"].join(\" \"), gitExtra, function (\n    er,\n    stdout,\n    stderr\n  ) {\n    // makeCommit parly inspired and taken from NPM version module\n    var lines = stdout\n      .trim()\n      .split(\"\\n\")\n      .filter(function (line) {\n        var file = path.basename(line.replace(/.{1,2}\\s+/, \"\"));\n        return (\n          line.trim() && !line.match(/^\\?\\? /) && !fUtils.isPackageFile(line)\n        );\n      })\n      .map(function (line) {\n        return line.trim();\n      });\n\n    if (lines.length) {\n      return callback(\n        new Error(\"Git working directory not clean.\\n\" + lines.join(\"\\n\"))\n      );\n    }\n    return callback();\n  });\n};\n\nmodule.exports.checkout = function (callback) {\n  cp.exec(gitApp + \" checkout -- .\", gitExtra, callback);\n};\n\nmodule.exports.commit = function (files, message, newVer, tagName, callback) {\n  message = escapeQuotes(message.replace(\"%s\", newVer));\n  files = files.map(escapeQuotes).join(\" \");\n  var functionSeries = [\n    function (done) {\n      cp.exec(gitApp + \" add \" + files, gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec([gitApp, \"commit\", \"-m\", message].join(\" \"), gitExtra, done);\n    },\n\n    function (done) {\n      cp.exec(\n        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),\n        gitExtra,\n        done\n      );\n    },\n  ];\n  contra.series(functionSeries, callback);\n};\n"], "filenames": ["lib/git.js"], "buggy_code_start_loc": [64], "buggy_code_end_loc": [65], "fixing_code_start_loc": [64], "fixing_code_end_loc": [65], "type": "CWE-78", "message": "The issue occurs because tagName user input is formatted inside the exec function is executed without any checks.", "other": {"cve": {"id": "CVE-2020-7688", "sourceIdentifier": "report@snyk.io", "published": "2020-07-01T17:15:14.250", "lastModified": "2020-07-14T15:37:32.897", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The issue occurs because tagName user input is formatted inside the exec function is executed without any checks."}, {"lang": "es", "value": "El problema se presenta porque la entrada del usuario tagName est\u00e1 formateada dentro de la funci\u00f3n exec que se ejecuta sin ninguna verificaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.5, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mversion_project:mversion:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.1", "matchCriteriaId": "F9AC1A4F-39AD-4908-A94E-784BC0AE1387"}]}]}], "references": [{"url": "https://github.com/418sec/huntr/pull/102", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/mikaelbr/mversion/commit/b7a8b32600e60759a7ad3921ec4a2750bf173482", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-MVERSION-573174", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mikaelbr/mversion/commit/b7a8b32600e60759a7ad3921ec4a2750bf173482"}}