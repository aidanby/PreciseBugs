{"buggy_code": ["<?php\n\nnamespace Kanboard\\Api\\Procedure;\n\nuse Kanboard\\Api\\Authorization\\TaskAuthorization;\nuse Kanboard\\Api\\Authorization\\TaskLinkAuthorization;\n\n/**\n * TaskLink API controller\n *\n * @package  Kanboard\\Api\\Procedure\n * @author   Frederic Guillot\n */\nclass TaskLinkProcedure extends BaseProcedure\n{\n    /**\n     * Get a task link\n     *\n     * @access public\n     * @param  integer   $task_link_id   Task link id\n     * @return array\n     */\n    public function getTaskLinkById($task_link_id)\n    {\n        TaskLinkAuthorization::getInstance($this->container)->check($this->getClassName(), 'getTaskLinkById', $task_link_id);\n        return $this->taskLinkModel->getById($task_link_id);\n    }\n\n    /**\n     * Get all links attached to a task\n     *\n     * @access public\n     * @param  integer   $task_id   Task id\n     * @return array\n     */\n    public function getAllTaskLinks($task_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'getAllTaskLinks', $task_id);\n        return $this->taskLinkModel->getAll($task_id);\n    }\n\n    /**\n     * Create a new link\n     *\n     * @access public\n     * @param  integer   $task_id            Task id\n     * @param  integer   $opposite_task_id   Opposite task id\n     * @param  integer   $link_id            Link id\n     * @return integer                       Task link id\n     */\n    public function createTaskLink($task_id, $opposite_task_id, $link_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'createTaskLink', $task_id);\n        return $this->taskLinkModel->create($task_id, $opposite_task_id, $link_id);\n    }\n\n    /**\n     * Update a task link\n     *\n     * @access public\n     * @param  integer   $task_link_id          Task link id\n     * @param  integer   $task_id               Task id\n     * @param  integer   $opposite_task_id      Opposite task id\n     * @param  integer   $link_id               Link id\n     * @return boolean\n     */\n    public function updateTaskLink($task_link_id, $task_id, $opposite_task_id, $link_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'updateTaskLink', $task_id);\n        return $this->taskLinkModel->update($task_link_id, $task_id, $opposite_task_id, $link_id);\n    }\n\n    /**\n     * Remove a link between two tasks\n     *\n     * @access public\n     * @param  integer   $task_link_id\n     * @return boolean\n     */\n    public function removeTaskLink($task_link_id)\n    {\n        TaskLinkAuthorization::getInstance($this->container)->check($this->getClassName(), 'removeTaskLink', $task_link_id);\n        return $this->taskLinkModel->remove($task_link_id);\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * TaskInternalLink Controller\n *\n * @package  Kanboard\\Controller\n * @author   Olivier Maridat\n * @author   Frederic Guillot\n */\nclass TaskInternalLinkController extends BaseController\n{\n    /**\n     * Creation form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws PageNotFoundException\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $task = $this->getTask();\n\n        if (empty($values)) {\n          $values['another_tasklink'] = $this->request->getIntegerParam('another_tasklink', 0);\n          $values = $this->hook->merge('controller:tasklink:form:default', $values, array('default_values' => $values));\n        }\n\n        $this->response->html($this->template->render('task_internal_link/create', array(\n            'values' => $values,\n            'errors' => $errors,\n            'task' => $task,\n            'labels' => $this->linkModel->getList(0, false),\n        )));\n    }\n\n    /**\n     * Validation and creation\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $task = $this->getTask();\n        $values = $this->request->getValues();\n        $values['task_id'] = $task['id'];\n\n        list($valid, $errors) = $this->taskLinkValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->taskLinkModel->create($values['task_id'], $values['opposite_task_id'], $values['link_id']) !== false) {\n                $this->flash->success(t('Link added successfully.'));\n\n                if (isset($values['another_tasklink']) && $values['another_tasklink'] == 1) {\n                    return $this->create(array(\n                        'project_id' => $task['project_id'],\n                        'task_id' => $task['id'],\n                        'link_id' => $values['link_id'],\n                        'another_tasklink' => 1\n                    ));\n                }\n\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])), true);\n            }\n\n            $errors = array('title' => array(t('The exact same link already exists')));\n            $this->flash->failure(t('Unable to create your link.'));\n        }\n\n        return $this->create($values, $errors);\n    }\n\n    /**\n     * Edit form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws PageNotFoundException\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $task = $this->getTask();\n        $task_link = $this->getInternalTaskLink($task);\n\n        if (empty($values)) {\n            $opposite_task = $this->taskFinderModel->getById($task_link['opposite_task_id']);\n            $values = $task_link;\n            $values['title'] = '#'.$opposite_task['id'].' - '.$opposite_task['title'];\n        }\n\n        $this->response->html($this->template->render('task_internal_link/edit', array(\n            'values' => $values,\n            'errors' => $errors,\n            'task_link' => $task_link,\n            'task' => $task,\n            'labels' => $this->linkModel->getList(0, false)\n        )));\n    }\n\n    /**\n     * Validation and update\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $task = $this->getTask();\n        $task_link = $this->getInternalTaskLink($task);\n\n        $values = $this->request->getValues();\n        $values['task_id'] = $task['id'];\n        $values['id'] = $task_link['id'];\n\n        list($valid, $errors) = $this->taskLinkValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->taskLinkModel->update($values['id'], $values['task_id'], $values['opposite_task_id'], $values['link_id'])) {\n                $this->flash->success(t('Link updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])).'#links');\n            }\n\n            $this->flash->failure(t('Unable to update your link.'));\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a link\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $task = $this->getTask();\n        $link = $this->getInternalTaskLink($task);\n\n        $this->response->html($this->template->render('task_internal_link/remove', array(\n            'link' => $link,\n            'task' => $task,\n        )));\n    }\n\n    /**\n     * Remove a link\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $task = $this->getTask();\n        $link = $this->getInternalTaskLink($task);\n\n        if ($this->taskLinkModel->remove($link['id'])) {\n            $this->flash->success(t('Link removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this link.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])));\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Api\\Procedure;\n\nuse Kanboard\\Api\\Authorization\\TaskAuthorization;\nuse Kanboard\\Api\\Authorization\\TaskLinkAuthorization;\n\n/**\n * TaskLink API controller\n *\n * @package  Kanboard\\Api\\Procedure\n * @author   Frederic Guillot\n */\nclass TaskLinkProcedure extends BaseProcedure\n{\n    /**\n     * Get a task link\n     *\n     * @access public\n     * @param  integer   $task_link_id   Task link id\n     * @return array\n     */\n    public function getTaskLinkById($task_link_id)\n    {\n        TaskLinkAuthorization::getInstance($this->container)->check($this->getClassName(), 'getTaskLinkById', $task_link_id);\n        return $this->taskLinkModel->getById($task_link_id);\n    }\n\n    /**\n     * Get all links attached to a task\n     *\n     * @access public\n     * @param  integer   $task_id   Task id\n     * @return array\n     */\n    public function getAllTaskLinks($task_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'getAllTaskLinks', $task_id);\n        return $this->taskLinkModel->getAll($task_id);\n    }\n\n    /**\n     * Create a new link\n     *\n     * @access public\n     * @param  integer   $task_id            Task id\n     * @param  integer   $opposite_task_id   Opposite task id\n     * @param  integer   $link_id            Link id\n     * @return integer                       Task link id\n     */\n    public function createTaskLink($task_id, $opposite_task_id, $link_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'createTaskLink', $task_id);\n\n        if ($this->userSession->isLogged()) {\n            $opposite_task = $this->taskFinderModel->getById($opposite_task_id);\n\n            if (! $this->projectPermissionModel->isUserAllowed($opposite_task['project_id'], $this->userSession->getId())) {\n                return false;\n            }\n        }\n\n        return $this->taskLinkModel->create($task_id, $opposite_task_id, $link_id);\n    }\n\n    /**\n     * Update a task link\n     *\n     * @access public\n     * @param  integer   $task_link_id          Task link id\n     * @param  integer   $task_id               Task id\n     * @param  integer   $opposite_task_id      Opposite task id\n     * @param  integer   $link_id               Link id\n     * @return boolean\n     */\n    public function updateTaskLink($task_link_id, $task_id, $opposite_task_id, $link_id)\n    {\n        TaskAuthorization::getInstance($this->container)->check($this->getClassName(), 'updateTaskLink', $task_id);\n\n        if ($this->userSession->isLogged()) {\n            $opposite_task = $this->taskFinderModel->getById($opposite_task_id);\n\n            if (! $this->projectPermissionModel->isUserAllowed($opposite_task['project_id'], $this->userSession->getId())) {\n                return false;\n            }\n        }\n\n        return $this->taskLinkModel->update($task_link_id, $task_id, $opposite_task_id, $link_id);\n    }\n\n    /**\n     * Remove a link between two tasks\n     *\n     * @access public\n     * @param  integer   $task_link_id\n     * @return boolean\n     */\n    public function removeTaskLink($task_link_id)\n    {\n        TaskLinkAuthorization::getInstance($this->container)->check($this->getClassName(), 'removeTaskLink', $task_link_id);\n        return $this->taskLinkModel->remove($task_link_id);\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * TaskInternalLink Controller\n *\n * @package  Kanboard\\Controller\n * @author   Olivier Maridat\n * @author   Frederic Guillot\n */\nclass TaskInternalLinkController extends BaseController\n{\n    /**\n     * Creation form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws PageNotFoundException\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $task = $this->getTask();\n\n        if (empty($values)) {\n          $values['another_tasklink'] = $this->request->getIntegerParam('another_tasklink', 0);\n          $values = $this->hook->merge('controller:tasklink:form:default', $values, array('default_values' => $values));\n        }\n\n        $this->response->html($this->template->render('task_internal_link/create', array(\n            'values' => $values,\n            'errors' => $errors,\n            'task' => $task,\n            'labels' => $this->linkModel->getList(0, false),\n        )));\n    }\n\n    /**\n     * Validation and creation\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $task = $this->getTask();\n        $values = $this->request->getValues();\n        $values['task_id'] = $task['id'];\n\n        list($valid, $errors) = $this->taskLinkValidator->validateCreation($values);\n\n        if ($valid) {\n            $opposite_task = $this->taskFinderModel->getById($values['opposite_task_id']);\n\n            if (! $this->projectPermissionModel->isUserAllowed($opposite_task['project_id'], $this->userSession->getId())) {\n                throw new AccessForbiddenException();\n            }\n\n            if ($this->taskLinkModel->create($values['task_id'], $values['opposite_task_id'], $values['link_id']) !== false) {\n                $this->flash->success(t('Link added successfully.'));\n\n                if (isset($values['another_tasklink']) && $values['another_tasklink'] == 1) {\n                    return $this->create(array(\n                        'project_id' => $task['project_id'],\n                        'task_id' => $task['id'],\n                        'link_id' => $values['link_id'],\n                        'another_tasklink' => 1\n                    ));\n                }\n\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])), true);\n            }\n\n            $errors = array('title' => array(t('The exact same link already exists')));\n            $this->flash->failure(t('Unable to create your link.'));\n        }\n\n        return $this->create($values, $errors);\n    }\n\n    /**\n     * Edit form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws PageNotFoundException\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $task = $this->getTask();\n        $task_link = $this->getInternalTaskLink($task);\n\n        if (empty($values)) {\n            $opposite_task = $this->taskFinderModel->getById($task_link['opposite_task_id']);\n            $values = $task_link;\n            $values['title'] = '#'.$opposite_task['id'].' - '.$opposite_task['title'];\n        }\n\n        $this->response->html($this->template->render('task_internal_link/edit', array(\n            'values' => $values,\n            'errors' => $errors,\n            'task_link' => $task_link,\n            'task' => $task,\n            'labels' => $this->linkModel->getList(0, false)\n        )));\n    }\n\n    /**\n     * Validation and update\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $task = $this->getTask();\n        $task_link = $this->getInternalTaskLink($task);\n\n        $values = $this->request->getValues();\n        $values['task_id'] = $task['id'];\n        $values['id'] = $task_link['id'];\n\n        list($valid, $errors) = $this->taskLinkValidator->validateModification($values);\n\n        if ($valid) {\n            $opposite_task = $this->taskFinderModel->getById($values['opposite_task_id']);\n\n            if (! $this->projectPermissionModel->isUserAllowed($opposite_task['project_id'], $this->userSession->getId())) {\n                throw new AccessForbiddenException();\n            }\n\n            if ($this->taskLinkModel->update($values['id'], $values['task_id'], $values['opposite_task_id'], $values['link_id'])) {\n                $this->flash->success(t('Link updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])).'#links');\n            }\n\n            $this->flash->failure(t('Unable to update your link.'));\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a link\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $task = $this->getTask();\n        $link = $this->getInternalTaskLink($task);\n\n        $this->response->html($this->template->render('task_internal_link/remove', array(\n            'link' => $link,\n            'task' => $task,\n        )));\n    }\n\n    /**\n     * Remove a link\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $task = $this->getTask();\n        $link = $this->getInternalTaskLink($task);\n\n        if ($this->taskLinkModel->remove($link['id'])) {\n            $this->flash->success(t('Link removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this link.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])));\n    }\n}\n"], "filenames": ["app/Api/Procedure/TaskLinkProcedure.php", "app/Controller/TaskInternalLinkController.php"], "buggy_code_start_loc": [53, 4], "buggy_code_end_loc": [69, 123], "fixing_code_start_loc": [54, 5], "fixing_code_end_loc": [88, 137], "type": "CWE-862", "message": "Kanboard is open source project management software that focuses on the Kanban methodology. A vulnerability related to a `missing access control` was found, which allows a User with the lowest privileges to leak all the tasks and projects titles within the software, even if they are not invited or it's a personal project. This could also lead to private/critical information being leaked if such information is in the title. This issue has been addressed in version 1.2.30. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n", "other": {"cve": {"id": "CVE-2023-33970", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-05T20:15:09.980", "lastModified": "2023-06-12T18:16:44.043", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Kanboard is open source project management software that focuses on the Kanban methodology. A vulnerability related to a `missing access control` was found, which allows a User with the lowest privileges to leak all the tasks and projects titles within the software, even if they are not invited or it's a personal project. This could also lead to private/critical information being leaked if such information is in the title. This issue has been addressed in version 1.2.30. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.30", "matchCriteriaId": "082DAE98-80F0-4423-8581-AB8D0051EAA1"}]}]}], "references": [{"url": "https://github.com/kanboard/kanboard/commit/b501ef44bc28ee9cf603a4fa446ee121d66f652f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/kanboard/kanboard/security/advisories/GHSA-wfch-8rhv-v286", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/b501ef44bc28ee9cf603a4fa446ee121d66f652f"}}