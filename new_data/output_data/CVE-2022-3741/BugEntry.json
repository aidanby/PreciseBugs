{"buggy_code": ["class Rack::Attack\n  ### Configure Cache ###\n\n  # If you don't want to use Rails.cache (Rack::Attack's default), then\n  # configure it here.\n  #\n  # Note: The store is only used for throttling (not blocklisting and\n  # safelisting). It must implement .increment and .write like\n  # ActiveSupport::Cache::Store\n\n  # Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new\n\n  # https://github.com/rack/rack-attack/issues/102\n  Rack::Attack.cache.store = Rack::Attack::StoreProxy::RedisProxy.new($velma)\n\n  class Request < ::Rack::Request\n    # You many need to specify a method to fetch the correct remote IP address\n    # if the web server is behind a load balancer.\n    def remote_ip\n      @remote_ip ||= (env['action_dispatch.remote_ip'] || ip).to_s\n    end\n\n    def allowed_ip?\n      allowed_ips = ['127.0.0.1', '::1']\n      allowed_ips.include?(remote_ip)\n    end\n  end\n\n  ### Throttle Spammy Clients ###\n\n  # If any single client IP is making tons of requests, then they're\n  # probably malicious or a poorly-configured scraper. Either way, they\n  # don't deserve to hog all of the app server's CPU. Cut them off!\n  #\n  # Note: If you're serving assets through rack, those requests may be\n  # counted by rack-attack and this throttle may be activated too\n  # quickly. If so, enable the condition to exclude them from tracking.\n\n  # Throttle all requests by IP (60rpm)\n  #\n  # Key: \"rack::attack:#{Time.now.to_i/:period}:req/ip:#{req.ip}\"\n\n  throttle('req/ip', limit: 300, period: 1.minute, &:ip)\n\n  ### Prevent Brute-Force Login Attacks ###\n  throttle('login/ip', limit: 5, period: 20.seconds) do |req|\n    req.ip if req.path == '/auth/sign_in' && req.post?\n  end\n\n  ## Prevent Brute-Force Signup Attacks ###\n  throttle('accounts/ip', limit: 5, period: 5.minutes) do |req|\n    req.ip if req.path == '/api/v1/accounts' && req.post?\n  end\n\n  ## Prevent Conversation Bombing on Widget APIs ###\n  throttle('api/v1/widget/conversations', limit: 6, period: 12.hours) do |req|\n    req.ip if req.path == '/api/v1/widget/conversations' && req.post?\n  end\n\n  ## Prevent Contact update Bombing in Widget API ###\n  throttle('api/v1/widget/contacts', limit: 60, period: 1.hour) do |req|\n    req.ip if req.path == '/api/v1/widget/contacts' && (req.patch? || req.put?)\n  end\n\n  # ref: https://github.com/rack/rack-attack/issues/399\n  throttle('login/email', limit: 20, period: 5.minutes) do |req|\n    if req.path == '/auth/sign_in' && req.post?\n      # NOTE: This line used to throw ArgumentError /rails/action_mailbox/sendgrid/inbound_emails : invalid byte sequence in UTF-8\n      # Hence placed in the if block\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\n\n  throttle('super_admin_login/email', limit: 20, period: 5.minutes) do |req|\n    if req.path == '/super_admin/sign_in' && req.post?\n      # NOTE: This line used to throw ArgumentError /rails/action_mailbox/sendgrid/inbound_emails : invalid byte sequence in UTF-8\n      # Hence placed in the if block\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\n\n  throttle('reset_password/email', limit: 5, period: 1.hour) do |req|\n    if req.path == '/auth/password' && req.post?\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\nend\n\n# Log blocked events\nActiveSupport::Notifications.subscribe('throttle.rack_attack') do |_name, _start, _finish, _request_id, payload|\n  Rails.logger.warn \"[Rack::Attack][Blocked] remote_ip: \\\"#{payload[:request].remote_ip}\\\", path: \\\"#{payload[:request].path}\\\"\"\nend\n\nRack::Attack.enabled = Rails.env.production? ? ActiveModel::Type::Boolean.new.cast(ENV.fetch('ENABLE_RACK_ATTACK', true)) : false\n"], "fixing_code": ["class Rack::Attack\n  ### Configure Cache ###\n\n  # If you don't want to use Rails.cache (Rack::Attack's default), then\n  # configure it here.\n  #\n  # Note: The store is only used for throttling (not blocklisting and\n  # safelisting). It must implement .increment and .write like\n  # ActiveSupport::Cache::Store\n\n  # Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new\n\n  # https://github.com/rack/rack-attack/issues/102\n  Rack::Attack.cache.store = Rack::Attack::StoreProxy::RedisProxy.new($velma)\n\n  class Request < ::Rack::Request\n    # You many need to specify a method to fetch the correct remote IP address\n    # if the web server is behind a load balancer.\n    def remote_ip\n      @remote_ip ||= (env['action_dispatch.remote_ip'] || ip).to_s\n    end\n\n    def allowed_ip?\n      allowed_ips = ['127.0.0.1', '::1']\n      allowed_ips.include?(remote_ip)\n    end\n\n    # Rails would allow requests to paths with extentions, so lets compare against the path with extention stripped\n    # example /auth & /auth.json would both work\n    def path_without_extentions\n      path[/^[^.]+/]\n    end\n  end\n\n  ### Throttle Spammy Clients ###\n\n  # If any single client IP is making tons of requests, then they're\n  # probably malicious or a poorly-configured scraper. Either way, they\n  # don't deserve to hog all of the app server's CPU. Cut them off!\n  #\n  # Note: If you're serving assets through rack, those requests may be\n  # counted by rack-attack and this throttle may be activated too\n  # quickly. If so, enable the condition to exclude them from tracking.\n\n  # Throttle all requests by IP (60rpm)\n  #\n  # Key: \"rack::attack:#{Time.now.to_i/:period}:req/ip:#{req.ip}\"\n\n  throttle('req/ip', limit: 300, period: 1.minute, &:ip)\n\n  ### Prevent Brute-Force Super Admin Login Attacks ###\n  throttle('super_admin_login/ip', limit: 5, period: 5.minutes) do |req|\n    req.ip if req.path_without_extentions == '/super_admin/sign_in' && req.post?\n  end\n\n  throttle('super_admin_login/email', limit: 5, period: 15.minutes) do |req|\n    if req.path_without_extentions == '/super_admin/sign_in' && req.post?\n      # NOTE: This line used to throw ArgumentError /rails/action_mailbox/sendgrid/inbound_emails : invalid byte sequence in UTF-8\n      # Hence placed in the if block\n      # ref: https://github.com/rack/rack-attack/issues/399\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\n\n  # ### Prevent Brute-Force Login Attacks ###\n  throttle('login/ip', limit: 5, period: 5.minutes) do |req|\n    req.ip if req.path_without_extentions == '/auth/sign_in' && req.post?\n  end\n\n  throttle('login/email', limit: 10, period: 15.minutes) do |req|\n    if req.path_without_extentions == '/auth/sign_in' && req.post?\n      # ref: https://github.com/rack/rack-attack/issues/399\n      # NOTE: This line used to throw ArgumentError /rails/action_mailbox/sendgrid/inbound_emails : invalid byte sequence in UTF-8\n      # Hence placed in the if block\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\n\n  ## Reset password throttling\n  throttle('reset_password/ip', limit: 5, period: 30.minutes) do |req|\n    req.ip if req.path_without_extentions == '/auth/password' && req.post?\n  end\n\n  throttle('reset_password/email', limit: 5, period: 1.hour) do |req|\n    if req.path_without_extentions == '/auth/password' && req.post?\n      email = req.params['email'].presence || ActionDispatch::Request.new(req.env).params['email'].presence\n      email.to_s.downcase.gsub(/\\s+/, '')\n    end\n  end\n\n  ## Prevent Brute-Force Signup Attacks ###\n  throttle('accounts/ip', limit: 5, period: 30.minutes) do |req|\n    req.ip if req.path_without_extentions == '/api/v1/accounts' && req.post?\n  end\n\n  ## Prevent Conversation Bombing on Widget APIs ###\n  throttle('api/v1/widget/conversations', limit: 6, period: 12.hours) do |req|\n    req.ip if req.path_without_extentions == '/api/v1/widget/conversations' && req.post?\n  end\n\n  ## Prevent Contact update Bombing in Widget API ###\n  throttle('api/v1/widget/contacts', limit: 60, period: 1.hour) do |req|\n    req.ip if req.path_without_extentions == '/api/v1/widget/contacts' && (req.patch? || req.put?)\n  end\nend\n\n# Log blocked events\nActiveSupport::Notifications.subscribe('throttle.rack_attack') do |_name, _start, _finish, _request_id, payload|\n  Rails.logger.warn \"[Rack::Attack][Blocked] remote_ip: \\\"#{payload[:request].remote_ip}\\\", path: \\\"#{payload[:request].path}\\\"\"\nend\n\nRack::Attack.enabled = Rails.env.production? ? ActiveModel::Type::Boolean.new.cast(ENV.fetch('ENABLE_RACK_ATTACK', true)) : false\n"], "filenames": ["config/initializers/rack_attack.rb"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [89], "fixing_code_start_loc": [27], "fixing_code_end_loc": [106], "type": "CWE-307", "message": "Impact varies for each individual vulnerability in the application. For generation of accounts, it may be possible, depending on the amount of system resources available, to create a DoS event in the server. These accounts still need to be activated; however, it is possible to identify the output Status Code to separate accounts that are generated and waiting for email verification. \\n\\nFor the sign in directories, it is possible to brute force login attempts to either login portal, which could lead to account compromise.", "other": {"cve": {"id": "CVE-2022-3741", "sourceIdentifier": "security@huntr.dev", "published": "2022-10-28T13:15:16.870", "lastModified": "2022-11-01T18:45:08.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Impact varies for each individual vulnerability in the application. For generation of accounts, it may be possible, depending on the amount of system resources available, to create a DoS event in the server. These accounts still need to be activated; however, it is possible to identify the output Status Code to separate accounts that are generated and waiting for email verification. \\n\\nFor the sign in directories, it is possible to brute force login attempts to either login portal, which could lead to account compromise."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 9.4, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-307"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-307"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chatwoot:chatwoot:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.10.0", "matchCriteriaId": "303D2C83-2AFF-4220-BE6F-C0FAE4DA577E"}]}]}], "references": [{"url": "https://github.com/chatwoot/chatwoot/commit/9525d4f0346a2fdac13a0253f9180d20104a72d3", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/46f6e07e-f438-4540-938a-510047f987d0", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chatwoot/chatwoot/commit/9525d4f0346a2fdac13a0253f9180d20104a72d3"}}