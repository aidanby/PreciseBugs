{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse ChamiloSession as Session;\n\n/**\n * This class provides methods for the notebook management.\n * Include/require it in your code to use its features.\n *\n * @author Carlos Vargas <litox84@gmail.com>, move code of main/notebook up here\n */\nclass NotebookManager\n{\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * a little bit of javascript to display a prettier warning when deleting a note.\n     *\n     * @return string\n     *\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function javascript_notebook()\n    {\n        return \"<script>\n\t\t\t\tfunction confirmation (name)\n\t\t\t\t{\n\t\t\t\t\tif (confirm(\\\" \".get_lang(\"NoteConfirmDelete\").\" \\\"+ name + \\\" ?\\\"))\n\t\t\t\t\t\t{return true;}\n\t\t\t\t\telse\n\t\t\t\t\t\t{return false;}\n\t\t\t\t}\n\t\t\t\t</script>\";\n    }\n\n    /**\n     * This functions stores the note in the database.\n     *\n     * @param array $values\n     * @param int   $userId    Optional. The user ID\n     * @param int   $courseId  Optional. The course ID\n     * @param int   $sessionId Optional. The session ID\n     *\n     * @return bool\n     *\n     * @author Christian Fasanando <christian.fasanando@dokeos.com>\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function save_note($values, $userId = 0, $courseId = 0, $sessionId = 0)\n    {\n        if (!is_array($values) || empty($values['note_title'])) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $userId = $userId ?: api_get_user_id();\n        $courseId = $courseId ?: api_get_course_int_id();\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $courseCode = $courseInfo['code'];\n        $sessionId = $sessionId ?: api_get_session_id();\n        $now = api_get_utc_datetime();\n        $params = [\n            'notebook_id' => 0,\n            'c_id' => $courseId,\n            'user_id' => $userId,\n            'course' => $courseCode,\n            'session_id' => $sessionId,\n            'title' => $values['note_title'],\n            'description' => $values['note_comment'],\n            'creation_date' => $now,\n            'update_date' => $now,\n            'status' => 0,\n        ];\n        $id = Database::insert($table, $params);\n\n        if ($id > 0) {\n            $sql = \"UPDATE $table SET notebook_id = $id WHERE iid = $id\";\n            Database::query($sql);\n\n            //insert into item_property\n            api_item_property_update(\n                $courseInfo,\n                TOOL_NOTEBOOK,\n                $id,\n                'NotebookAdded',\n                $userId\n            );\n\n            return $id;\n        }\n    }\n\n    /**\n     * @param int $notebook_id\n     *\n     * @return array\n     */\n    public static function get_note_information($notebook_id)\n    {\n        if (empty($notebook_id)) {\n            return [];\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $course_id = api_get_course_int_id();\n        $notebook_id = (int) $notebook_id;\n\n        $sql = \"SELECT\n                user_id,\n                notebook_id \t\tAS notebook_id,\n                title\t\t\t\tAS note_title,\n                description \t\tAS note_comment,\n                session_id\t\t\tAS session_id\n                FROM $table\n                WHERE c_id = $course_id AND notebook_id = '\".$notebook_id.\"' \";\n        $result = Database::query($sql);\n        if (Database::num_rows($result) != 1) {\n            return [];\n        }\n\n        return Database::fetch_array($result);\n    }\n\n    /**\n     * This functions updates the note in the database.\n     *\n     * @param array $values\n     *\n     * @author Christian Fasanando <christian.fasanando@dokeos.com>\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @return bool\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function update_note($values)\n    {\n        if (!is_array($values) || empty($values['note_title'])) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n\n        $course_id = api_get_course_int_id();\n        $sessionId = api_get_session_id();\n\n        $params = [\n            'user_id' => api_get_user_id(),\n            'course' => api_get_course_id(),\n            'session_id' => $sessionId,\n            'title' => $values['note_title'],\n            'description' => $values['note_comment'],\n            'update_date' => api_get_utc_datetime(),\n        ];\n\n        Database::update(\n            $table,\n            $params,\n            [\n                'c_id = ? AND notebook_id = ?' => [\n                    $course_id,\n                    $values['notebook_id'],\n                ],\n            ]\n        );\n\n        // update item_property (update)\n        api_item_property_update(\n            api_get_course_info(),\n            TOOL_NOTEBOOK,\n            $values['notebook_id'],\n            'NotebookUpdated',\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int $notebook_id\n     *\n     * @return bool\n     */\n    public static function delete_note($notebook_id)\n    {\n        $notebook_id = (int) $notebook_id;\n\n        if (empty($notebook_id)) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $course_id = api_get_course_int_id();\n\n        $sql = \"DELETE FROM $table\n                WHERE\n                    c_id = $course_id AND\n                    notebook_id='\".$notebook_id.\"' AND\n                    user_id = '\".api_get_user_id().\"'\";\n        $result = Database::query($sql);\n        $affected_rows = Database::affected_rows($result);\n\n        if ($affected_rows != 1) {\n            return false;\n        }\n\n        // Update item_property (delete)\n        api_item_property_update(\n            api_get_course_info(),\n            TOOL_NOTEBOOK,\n            $notebook_id,\n            'delete',\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * Display notes.\n     */\n    public static function display_notes()\n    {\n        $sessionId = api_get_session_id();\n        $_user = api_get_user_info();\n        if (!isset($_GET['direction'])) {\n            $sort_direction = 'ASC';\n            $link_sort_direction = 'DESC';\n        } elseif ($_GET['direction'] == 'ASC') {\n            $sort_direction = 'ASC';\n            $link_sort_direction = 'DESC';\n        } else {\n            $sort_direction = 'DESC';\n            $link_sort_direction = 'ASC';\n        }\n\n        // action links\n        echo '<div class=\"actions\">';\n        if (!api_is_anonymous()) {\n            if ($sessionId == 0 || api_is_allowed_to_session_edit(false, true)) {\n                echo '<a href=\"index.php?'.api_get_cidreq().'&action=addnote\">'.\n                    Display::return_icon('new_note.png', get_lang('NoteAddNew'), '', '32').'</a>';\n            }\n        }\n\n        echo '<a href=\"index.php?'.api_get_cidreq().'&action=changeview&view=creation_date&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_date_new.png', get_lang('OrderByCreationDate'), '', '32').'</a>';\n        echo '<a href=\"index.php?'.api_get_cidreq().'&action=changeview&view=update_date&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_date_mod.png', get_lang('OrderByModificationDate'), '', '32').'</a>';\n        echo '<a href=\"index.php?'.api_get_cidreq().'&action=changeview&view=title&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_title.png', get_lang('OrderByTitle'), '', '32').'</a>';\n        echo '</div>';\n\n        $notebookView = Session::read('notebook_view');\n        if (empty($notebookView)) {\n            $notebookView = 'creation_date';\n        }\n\n        if (!in_array($notebookView, ['creation_date', 'update_date', 'title'])) {\n            Session::write('notebook_view', 'creation_date');\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $order_by = \" ORDER BY `$notebookView` $sort_direction \";\n\n        // Condition for the session\n        $condition_session = api_get_session_condition($sessionId);\n\n        $cond_extra = $notebookView === 'update_date' ? \" AND update_date <> ''\" : ' ';\n        $course_id = api_get_course_int_id();\n\n        $sql = \"SELECT * FROM $table\n                WHERE\n                    c_id = $course_id AND\n                    user_id = '\".api_get_user_id().\"'\n                    $condition_session\n                    $cond_extra $order_by\n                \";\n        $result = Database::query($sql);\n        while ($row = Database::fetch_array($result)) {\n            // Validation when belongs to a session\n            $session_img = api_get_session_image($row['session_id'], $_user['status']);\n            $updateValue = '';\n            if ($row['update_date'] != $row['creation_date']) {\n                $updateValue = ', '.get_lang('UpdateDate').': '.Display::dateToStringAgoAndLongDate($row['update_date']);\n            }\n\n            $actions = '<a href=\"'.api_get_self().'?action=editnote&notebook_id='.$row['notebook_id'].'\">'.\n                Display::return_icon('edit.png', get_lang('Edit'), '', ICON_SIZE_SMALL).'</a>';\n            $actions .= '<a href=\"'.api_get_self().'?action=deletenote&notebook_id='.$row['notebook_id'].'\" onclick=\"return confirmation(\\''.$row['title'].'\\');\">'.\n                Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n\n            echo Display::panel(\n                Security::remove_XSS($row['description']),\n                Security::remove_XSS($row['title']).$session_img.\n                ' <div class=\"pull-right\">'.$actions.'</div>',\n                get_lang('CreationDate').': '.Display::dateToStringAgoAndLongDate($row['creation_date']).\n                $updateValue\n            );\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse ChamiloSession as Session;\n\n/**\n * This class provides methods for the notebook management.\n * Include/require it in your code to use its features.\n *\n * @author Carlos Vargas <litox84@gmail.com>, move code of main/notebook up here\n */\nclass NotebookManager\n{\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * a little bit of javascript to display a prettier warning when deleting a note.\n     *\n     * @return string\n     *\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function javascript_notebook()\n    {\n        return \"<script>\n\t\t\t\tfunction confirmation (name)\n\t\t\t\t{\n\t\t\t\t\tif (confirm(\\\" \".get_lang(\"NoteConfirmDelete\").\" \\\"+ name + \\\" ?\\\"))\n\t\t\t\t\t\t{return true;}\n\t\t\t\t\telse\n\t\t\t\t\t\t{return false;}\n\t\t\t\t}\n\t\t\t\t</script>\";\n    }\n\n    /**\n     * This functions stores the note in the database.\n     *\n     * @param array $values\n     * @param int   $userId    Optional. The user ID\n     * @param int   $courseId  Optional. The course ID\n     * @param int   $sessionId Optional. The session ID\n     *\n     * @return bool\n     *\n     * @author Christian Fasanando <christian.fasanando@dokeos.com>\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function save_note($values, $userId = 0, $courseId = 0, $sessionId = 0)\n    {\n        if (!is_array($values) || empty($values['note_title'])) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $userId = $userId ?: api_get_user_id();\n        $courseId = $courseId ?: api_get_course_int_id();\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $courseCode = $courseInfo['code'];\n        $sessionId = $sessionId ?: api_get_session_id();\n        $now = api_get_utc_datetime();\n        $params = [\n            'notebook_id' => 0,\n            'c_id' => $courseId,\n            'user_id' => $userId,\n            'course' => $courseCode,\n            'session_id' => $sessionId,\n            'title' => $values['note_title'],\n            'description' => $values['note_comment'],\n            'creation_date' => $now,\n            'update_date' => $now,\n            'status' => 0,\n        ];\n        $id = Database::insert($table, $params);\n\n        if ($id > 0) {\n            $sql = \"UPDATE $table SET notebook_id = $id WHERE iid = $id\";\n            Database::query($sql);\n\n            //insert into item_property\n            api_item_property_update(\n                $courseInfo,\n                TOOL_NOTEBOOK,\n                $id,\n                'NotebookAdded',\n                $userId\n            );\n\n            return $id;\n        }\n    }\n\n    /**\n     * @param int $notebook_id\n     *\n     * @return array\n     */\n    public static function get_note_information($notebook_id)\n    {\n        if (empty($notebook_id)) {\n            return [];\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $course_id = api_get_course_int_id();\n        $notebook_id = (int) $notebook_id;\n\n        $sql = \"SELECT\n                user_id,\n                notebook_id \t\tAS notebook_id,\n                title\t\t\t\tAS note_title,\n                description \t\tAS note_comment,\n                session_id\t\t\tAS session_id\n                FROM $table\n                WHERE c_id = $course_id AND notebook_id = '\".$notebook_id.\"' \";\n        $result = Database::query($sql);\n        if (Database::num_rows($result) != 1) {\n            return [];\n        }\n\n        return Database::fetch_array($result);\n    }\n\n    /**\n     * This functions updates the note in the database.\n     *\n     * @param array $values\n     *\n     * @author Christian Fasanando <christian.fasanando@dokeos.com>\n     * @author Patrick Cool <patrick.cool@ugent.be>, Ghent University, Belgium\n     *\n     * @return bool\n     *\n     * @version januari 2009, dokeos 1.8.6\n     */\n    public static function update_note($values)\n    {\n        if (!is_array($values) || empty($values['note_title'])) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n\n        $course_id = api_get_course_int_id();\n        $sessionId = api_get_session_id();\n\n        $params = [\n            'user_id' => api_get_user_id(),\n            'course' => api_get_course_id(),\n            'session_id' => $sessionId,\n            'title' => $values['note_title'],\n            'description' => $values['note_comment'],\n            'update_date' => api_get_utc_datetime(),\n        ];\n\n        Database::update(\n            $table,\n            $params,\n            [\n                'c_id = ? AND notebook_id = ?' => [\n                    $course_id,\n                    $values['notebook_id'],\n                ],\n            ]\n        );\n\n        // update item_property (update)\n        api_item_property_update(\n            api_get_course_info(),\n            TOOL_NOTEBOOK,\n            $values['notebook_id'],\n            'NotebookUpdated',\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int $notebook_id\n     *\n     * @return bool\n     */\n    public static function delete_note($notebook_id)\n    {\n        $notebook_id = (int) $notebook_id;\n\n        if (empty($notebook_id)) {\n            return false;\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $course_id = api_get_course_int_id();\n\n        $sql = \"DELETE FROM $table\n                WHERE\n                    c_id = $course_id AND\n                    notebook_id='\".$notebook_id.\"' AND\n                    user_id = '\".api_get_user_id().\"'\";\n        $result = Database::query($sql);\n        $affected_rows = Database::affected_rows($result);\n\n        if ($affected_rows != 1) {\n            return false;\n        }\n\n        // Update item_property (delete)\n        api_item_property_update(\n            api_get_course_info(),\n            TOOL_NOTEBOOK,\n            $notebook_id,\n            'delete',\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * Display notes.\n     */\n    public static function display_notes()\n    {\n        $cidReq = api_get_cidreq();\n        $sessionId = api_get_session_id();\n        $_user = api_get_user_info();\n        if (!isset($_GET['direction'])) {\n            $sort_direction = 'ASC';\n            $link_sort_direction = 'DESC';\n        } elseif ($_GET['direction'] == 'ASC') {\n            $sort_direction = 'ASC';\n            $link_sort_direction = 'DESC';\n        } else {\n            $sort_direction = 'DESC';\n            $link_sort_direction = 'ASC';\n        }\n\n        // action links\n        echo '<div class=\"actions\">';\n        if (!api_is_anonymous()) {\n            if ($sessionId == 0 || api_is_allowed_to_session_edit(false, true)) {\n                echo '<a href=\"index.php?'.$cidReq.'&action=addnote\">'.\n                    Display::return_icon('new_note.png', get_lang('NoteAddNew'), '', '32').'</a>';\n            }\n        }\n\n        echo '<a href=\"index.php?'.$cidReq.'&action=changeview&view=creation_date&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_date_new.png', get_lang('OrderByCreationDate'), '', '32').'</a>';\n        echo '<a href=\"index.php?'.$cidReq.'&action=changeview&view=update_date&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_date_mod.png', get_lang('OrderByModificationDate'), '', '32').'</a>';\n        echo '<a href=\"index.php?'.$cidReq.'&action=changeview&view=title&direction='.$link_sort_direction.'\">'.\n            Display::return_icon('notes_order_by_title.png', get_lang('OrderByTitle'), '', '32').'</a>';\n        echo '</div>';\n\n        $notebookView = Session::read('notebook_view');\n        if (empty($notebookView)) {\n            $notebookView = 'creation_date';\n        }\n\n        if (!in_array($notebookView, ['creation_date', 'update_date', 'title'])) {\n            Session::write('notebook_view', 'creation_date');\n        }\n\n        // Database table definition\n        $table = Database::get_course_table(TABLE_NOTEBOOK);\n        $order_by = \" ORDER BY `$notebookView` $sort_direction \";\n\n        // Condition for the session\n        $condition_session = api_get_session_condition($sessionId);\n\n        $cond_extra = $notebookView === 'update_date' ? \" AND update_date <> ''\" : ' ';\n        $course_id = api_get_course_int_id();\n\n        $sql = \"SELECT * FROM $table\n                WHERE\n                    c_id = $course_id AND\n                    user_id = '\".api_get_user_id().\"'\n                    $condition_session\n                    $cond_extra $order_by\n                \";\n        $result = Database::query($sql);\n        $iconEdit = Display::return_icon('edit.png', get_lang('Edit'));\n        $iconDelete = Display::return_icon('delete.png', get_lang('Delete'));\n        while ($row = Database::fetch_array($result)) {\n            // Validation when belongs to a session\n            $session_img = api_get_session_image($row['session_id'], $_user['status']);\n            $updateValue = '';\n            if ($row['update_date'] != $row['creation_date']) {\n                $updateValue = ', '.get_lang('UpdateDate').': '.Display::dateToStringAgoAndLongDate($row['update_date']);\n            }\n\n            $actions = Display::url(\n                $iconEdit,\n                api_get_self().'?action=editnote&notebook_id='.$row['notebook_id'].'&'.$cidReq\n            );\n            $actions .= Display::url(\n                $iconDelete,\n                api_get_self().'?action=deletenote&notebook_id='.$row['notebook_id'].'&'.$cidReq,\n                ['onclick' => 'return confirmation(\\''.$row['title'].'\\');']\n            );\n\n            echo Display::panel(\n                Security::remove_XSS($row['description']),\n                Security::remove_XSS($row['title']).$session_img.\n                ' <div class=\"pull-right\">'.$actions.'</div>',\n                get_lang('CreationDate').': '.Display::dateToStringAgoAndLongDate($row['creation_date']).\n                $updateValue\n            );\n        }\n    }\n}\n"], "filenames": ["main/inc/lib/notebook.lib.php"], "buggy_code_start_loc": [236], "buggy_code_end_loc": [306], "fixing_code_start_loc": [237], "fixing_code_end_loc": [314], "type": "NVD-CWE-Other", "message": "Incorrect access control in Chamilo v1.11.x up to v1.11.18 allows a student to arbitrarily access and modify another student's personal notes.", "other": {"cve": {"id": "CVE-2023-34962", "sourceIdentifier": "cve@mitre.org", "published": "2023-06-08T19:15:10.163", "lastModified": "2023-06-15T18:59:24.027", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Incorrect access control in Chamilo v1.11.x up to v1.11.18 allows a student to arbitrarily access and modify another student's personal notes."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.18", "matchCriteriaId": "2633146D-0E64-40CC-97EF-DF2774900717"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/19af444d2da9e5a60f02b4ebe7755cdff36709cd", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/f9a17bfaf05994383bca5f4b65eb6897acc60d41", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-106-2023-04-15-Moderate-impact-Moderate-risk-A-student-can-access-and-modify-another-students-personal-notes", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/19af444d2da9e5a60f02b4ebe7755cdff36709cd"}}