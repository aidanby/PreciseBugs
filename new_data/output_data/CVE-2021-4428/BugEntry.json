{"buggy_code": ["\n# Created by https://www.toptal.com/developers/gitignore/api/wordpress,phpstorm,visualstudiocode\n# Edit at https://www.toptal.com/developers/gitignore?templates=wordpress,phpstorm,visualstudiocode\n\n### PhpStorm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### PhpStorm Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n\n# Markdown Navigator plugin\n# https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced\n.idea/**/markdown-navigator.xml\n.idea/**/markdown-navigator-enh.xml\n.idea/**/markdown-navigator/\n\n# Cache file creation bug\n# See https://youtrack.jetbrains.com/issue/JBR-2257\n.idea/$CACHE_FILE$\n\n# CodeStream plugin\n# https://plugins.jetbrains.com/plugin/12206-codestream\n.idea/codestream.xml\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n### WordPress ###\n# Core\n#\n# Note: if you want to stage/commit WP core files\n# you can delete this whole section/until Configuration.\n/wp-admin/\n/wp-content/index.php\n/wp-content/languages\n/wp-content/plugins/index.php\n/wp-content/themes/index.php\n/wp-includes/\n/index.php\n/license.txt\n/readme.html\n/wp-*.php\n/xmlrpc.php\n\n# Configuration\nwp-config.php\n\n# Example themes\n/wp-content/themes/twenty*/\n\n# Example plugin\n/wp-content/plugins/hello.php\n\n# Uploads\n/wp-content/uploads/\n\n# Log files\n*.log\n\n# htaccess\n/.htaccess\n\n# All plugins\n# Note: If you wish to whitelist plugins,\n# uncomment the next line\n#/wp-content/plugins\n\n# All themes\n# Note: If you wish to whitelist themes,\n# uncomment the next line\n#/wp-content/themes\n# End of https://www.toptal.com/developers/gitignore/api/wordpress,phpstorm,visualstudiocode\n\n\n\n\n# Numerous always-ignore extensions\n*.diff\n*.err\n*.orig\n*.log\n*.rej\n*.swo\n*.swp\n*.vi\n*~\n*.sass-cache\n\n# OS or Editor folders\n.DS_Store\nThumbs.db\n.cache\n.project\n.settings\n.tmproj\n*.esproj\nnbproject\n*.sublime-project\n*.sublime-workspace\n\n# Dreamweaver added files\n_notes\ndwsync.xml\n\n# Komodo\n*.komodoproject\n.komodotools\n\n# Folders to ignore\n.hg\n.svn\n.CVS\nintermediate\n.idea\ncache\ntest/database/data/*\nnode_modules\nautosuggest\nvideos\nscreenshots\n*.zip\n*.env", "= 4.0.0 =\n* Released 2021.07.20\n* Upgraded to use V4 of the what3words AutoSuggest Component with improved styling and functionality.\n* Updated admin section interface.\n* Addition of advanced clipping options to restrict suggestions displayed to a user.\n* Addition of options to store latitude and longitude coordinates and nearest place against a record.\n* Added ability to change the field label.\n\n= 3.0.11 =\n* Released 2021.06.30\n* Fixes non-fatal debugging log output for PHP \"Variable assignment\" error\n\n= 3.0.10 =\n* Released 2021.03.09\n* Fixes passing API key to autosuggest for requests.\n\n= 3.0.9 =\n* Released 2021.02.03\n* Updated screenshots\n* Send key version numbers to what3words API via `X-W3W-Plugin` request header.\n\n= 3.0.8 =\n* Released 2020.12.11\n* Improved interoperability, errors in 3rd party scripts will be less likely to prevent the plugin operating.\n* Bumped to latest WordPress release, 5.6\n\n= 3.0.7 =\n* Released 2020.06.17\n* Addresses an error that prevented the plugin loading on Internet Explorer.\n* Minor styling improvements.\n\n= 3.0.6 =\n* Released 2020.06.02\n* Further improvements to match theme styling\n* Clarified the purpose of the `Input Selector(s)` field\n* Updated readme\n\n= 3.0.5 =\n* Released 2020.06.01\n* Apply missing `font-size` property.\n\n= 3.0.4 =\n* Released 2020.06.01\n* Hotfix missing `font-size` property.\n\n= 3.0.3 =\n* Released 2020.06.01\n* Plugin tweaked to take up less vertical height on themes with slimmer text inputs.\n\n= 3.0.2 =\n* Released 2020.06.01\n* The plugin now inherits styles from the current wordpress theme for more seamless integration.\n* The following css properties are automatically applied to the upgraded input: `background-color`, `border`, `border-radius`, `color`, `font`, `height`.\n\n= 3.0.1 =\n* Released 2020.05.27\n* Fixes an issue where country clipping would not work when shipping and billing addresses were in different countries.\n* Updated screenshots\n\n= 3.0.0 =\n* Released 2020.05.26\n* Updated the plugin to use new web component and V3 of the what3words API. Note that this release simplifies the plugin setup and removes some settings.\n* Updated links to what3words documentation and developer site\n* Settings available are now: \n* API key\n* CSS selector to specify which inputs should be upgraded to the auto suggest component\n* Placeholder text shown on inputs\n* Turn on/off the WooCommerce integration, to automatically add what3words address fields to your checkout forms\n\n= 2.0.4 =\n* Released 2019.01.16\n* Added new function to allow a country field to be specified for country clipping\n\n= 2.0.3 =\n* Released 2018.04.05\n* bug fixes\n\n= 2.0.2 =\n* Released 2018.03.16\n* bug fixes\n\n= 2.0.1 =\n* Released 2018.01.09\n* bug fixes\n\n= 2.0.0 =\n* Released 2018.01.08\n* Reworked and redesigned plugin code base\n\n= 1.1.0 =\n* uses what3words autosuggest jQuery plugin 1.2.0\n\n= 1.0.1 =\n* General fixes\n\n= 1.0.0 =\n* Initial release", "=== what3words Address Field ===\nContributors: what3words\nTags: what3words, 3 word address, three word address, searchbox, search, address, validation, autosuggest, w3w\nRequires at least: 4.7\nTested up to: 5.8\nStable tag: 4.0.0\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nOfficial plugin to allow customers to enter and validate a what3words address on your checkout for accurate deliveries.\n\n== Description ==\n\nThe what3words Address Field plugin helps you capture what3words addresses at checkout, using an address validation field.  By giving a what3words address, your customers can accurately pinpoint their desired delivery destination.\n\nwhat3words is a global addressing system that provides the simplest way to communicate location. It has divided the world into 3 metre squares and assigned each one a unique address made of just 3 words. It is more accurate than traditional street addressing, and even allows location information to be captured for places without addresses, such as parks or beaches.\n\n= How does this help your business? =\n\nIt\u2019s quick and easy to implement the what3words Address Field plugin. what3words addresses can be converted to GPS coordinates, which can then be passed onto delivery drivers. With a what3words address, deliveries can then arrive precisely in the right place and on time, giving a more reliable delivery experience for your customers.\n\n= And for your customers? =\n\nYour customers will have the option of providing the what3words address for their delivery location at the checkout. This gives them a way of providing a delivery location without the need to add complicated delivery instructions, and helps give them peace of mind that their delivery will be made to the right place, helping them to trust your business.\n\n= How does it work? =\n\nThis plugin allows your customers to easily enter and validate a what3words address in a form on your WordPress powered site, most likely your checkout page if using WooCommerce.\n\nPowered by our AutoSuggest feature, the what3words address field returns suggestions based on full or partial what3words addresses,  helping users with the following types of input error:\n\n* typing errors\n* spelling errors\n* misremembered words (e.g. singular vs. plural) or words in the wrong order\n\nWe recommend using the plugin when you want to capture a precise location from a user, such as a customer\u2019s front door or specific entrance of a larger building.\n\n\n== Installation ==\n\n= WordPress Installation (recommended) =\n\nYou can install the what3words Address Field plugin through the WordPress plugins page in your WordPress admin panel. \n\n1. Navigate to the _Plugins > Add New_ page\n2. Search for \"what3words\" \n3. Click the _Install Now_ button.\n4. Once installed, you can activate the plugin on the _Plugins_ page.\n\n= Manual Installation =\n\nYou can download the what3words Address Field plugin from the [WordPress Plugins site](https://wordpress.org/plugins/3-word-address-validation-field/#installation).\n\n1. Download the what3words Address Field plugin from the WordPress Plugins site\n2. Once you have downloaded the zipped plugin, you can upload it to your WordPress installation by navigating to _Plugins > Add New_, click the _Upload Plugin_ button\n3. Select the zipped plugin file and click _Install Now_\n4. Once installed, you can activate the plugin on the _Plugins_ page.\n\n= Configuration =\n\n== API Key ==\n\nYou will need a what3words API key to use this plugin, as it authenticates and interacts with the [what3words API](https://developer.what3words.com/public-api). If you don't have a what3words API key yet, you can quickly and easily [sign up and register](https://accounts.what3words.com/create-api-key) for one.\n\nOnce you have a what3words API key:\n\n1. Click the _what3words_ menu item on your wp-admin page.\n2. Enter your API Key into the API key field.\n3. Click _Save_\n\n== General Settings ==\n\n=== WooCommerce ===\n\nThe general settings allow you to customise how the what3words Address Field is configured on your site.\n\nFor WooCommerce users the plugin can automatically add an address field for both billing and shipping information, allowing your customer to specify a three word address for both billing and/or shipping address to help you locate your customers with ease. By default this option is selected and if you have configured your WooCommerce plugin it will automatically add these fields for you on your checkout page. Or you can select the _Add what3words Address Field to my checkout page for me_ option.\n\n=== Custom Fields ===\n\nAlternatively you can customise which field(s) to convert to a what3words Address Field by selecting _Convert an existing field to a what3words Address Field_ option and providing selectors for the inputs to convert. You can use any DOM compliant query selector(s) here to specify a single or multiple fields that you wish to convert.\n\n__N.B. When using input selectors you should ensure each input field has a unique name attribute to ensure clashes do not occur if multiple what3words Address Fields appear on a single page.__\n\nIf you want to add a new custom field to extend as a what3words Address Field you should first create an input field on the page you wish to add this functionality to and provide with a `name`, `id` and/or  that can then use in the input selector to specify it. (Be careful when using classes as it can apply this behaviour to multiple fields.)\n\nIf you want to capture the selected what3words address you should wrap this field in a form with a submit button and this will then be submitted as specified by your form.\n\n=== Save coordinates ===\n\nIf you need to capture the coordinates for a three word address to help with delivery information, for example, you should check the _Save coordinates_ checkbox with will also retrieve the coordinates for the captured three word address.\n\nIf you have added the what3words Address Field to your WooCommerce checkout and you select _Save coordinates_ the coordinates for the billing and shipping address fields will added to your order and visible in your Orders page on WooCommerce.\n\nIf you are using custom field(s) for the address then you the component will automatically attach hidden fields for both the latitude and longitude of the coordinates for the adddress prefixed with the name you supplied to the input field.\n\n=== Accessibility ===\n\nFor improved accessibility it is recommended that you add a label to your what3words Address Field. By checking this option and supplying some text for the label you can easily associate a label to each of your address field(s).\n\nFor WooCommerce customers this option allows you to override the default label associated to the address field(s), while for custom field users this option tells the plugin to create a label field for you.\n\n== Advanced Features ==\n\n=== Custom placeholder ===\n\nYou can override the default placeholder for the address field(s) by selecting this option and specifying the placeholder text. We recommed you use the default placeholder value as it provides your customers with an example of how to use the what3words Address Field.\n\n=== Clippings ===\n\nWe provide a number of options for clipping the autosuggest results. You can clip suggestions to a number of countries by providing comma separated 2 digit ISO codes for each country you wish to clip to. This will ensure suggestions provided are clipped within the countries specified. You can also clip within a circle, a bounding box or a polygon.\n\n__N.B. - When providing multiple clippings the intersection of each is what forms the suggestions provided when using the what3words Address Field.__\n\nFor WooCommerce checkouts we recommend skipping these options as the clip to country is automatically set when a user selects a country for their billing and/or shipping information as they select a country from the dropdown menu options in the checkout form.\n\n\n== Frequently Asked Questions ==\n\n= I have a question that's not answered here; what do I do? =\n\nHave a read of the [what3words Knowledge Base](https://support.what3words.com), which contains many more frequently asked questions and their answers.\n\n= More about what3words =\n\nwhat3words is available in 45+ languages, with pre-assigned, standardised 3 word addresses that are much easier to remember than lat/lng coordinates.\n\nFind our full developer documentation here:\n[https://developer.what3words.com](https://developer.what3words.com/)\n\nYou can learn more about our privacy policy here:\n[https://what3words.com/privacy](https://what3words.com/privacy)\n\n= Get in touch with us =\n\nHave any questions? Want to learn more about how the what3words Address Field plugin works? Get in touch with us at [support@what3words.com](mailto:support@what3words.com).\n\n\n== Screenshots ==\n\n1. Accept what3words addresses on your checkout page, or in a custom field.\n2. Display autosuggest results with geolocations to reduce user error\n3. Customize the autosuggest results with advanced features\n\n\n== Changelog ==\n\n= 4.0.0 =\n* Released 2021.07.20\n* Upgraded to use V4 of the what3words AutoSuggest Component with improved styling and functionality.\n* Updated admin section interface.\n* Addition of advanced clipping options to restrict suggestions displayed to a user.\n* Addition of options to store latitude and longitude coordinates and nearest place against a record.\n* Added ability to change the field label.\n\n\n== Upgrade Notice ==\n\n= 4.0 =\nUpgrade the what3words address field plugin to use the latest version of the what3words AutoSuggest Component and new plugin features.\n\n= 3.0 =\nThis is the 9th version of the plugin\n\n= 2.0 =\nThis is the 4th version of the plugin\n\n= 1.0 =\nThis is the first version of the plugin\n", "<?php\n\n/**\n * The public-facing functionality of the plugin.\n *\n * @link       https://developer.what3words.com/tutorial/installing-the-wordpress-plugin\n * @since      4.0.0\n *\n * @package    W3W_Autosuggest\n * @subpackage W3W_Autosuggest/public\n */\n\n/**\n * The public-facing functionality of the plugin.\n *\n * Defines the plugin name, version, and two examples hooks for how to\n * enqueue the public-facing stylesheet and JavaScript.\n *\n * @package    W3W_Autosuggest\n * @subpackage W3W_Autosuggest/public\n * @author     what3words\n */\nclass W3W_Autosuggest_Public {\n\n\t/**\n\t * The ID of this plugin.\n\t *\n\t * @since    4.0.0\n\t * @access   private\n\t * @var      string    $plugin_name    The ID of this plugin.\n\t */\n\tprivate $plugin_name;\n\n\t/**\n\t * The version of this plugin.\n\t *\n\t * @since    4.0.0\n\t * @access   private\n\t * @var      string    $version    The current version of this plugin.\n\t */\n\tprivate $version;\n\n  /**\n   * This modular javascript components distribution\n   * \n   * @since    4.0.0\n   * @access   private\n   * @var      string    $js_comp_esm_lib  The handle for the modular JS script\n   */\n  private $js_comp_esm_lib;\n\n  /**\n   * This webpack-compiled javascript components distribution\n   * \n   * @since    4.0.0\n   * @access   private\n   * @var      string    $js_comp_webpack_lib  The handle for the webpack JS script\n   */\n  private $js_comp_webpack_lib;\n\n  private $settings_name;\n\n  private $js_lib_cdn_url;\n\n\t/**\n\t * Initialize the class and set its properties.\n\t *\n\t * @since    4.0.0\n\t * @param      string    $plugin_name       The name of the plugin.\n\t * @param      string    $version    The version of this plugin.\n\t */\n\tpublic function __construct( $plugin_name, $version, $settings_name, $js_lib_cdn_url ) {\n\n\t\t$this->plugin_name = $plugin_name;\n\t\t$this->version = $version;\n    $this->js_comp_esm_lib = $this->plugin_name . '-autosuggest-esm-js';\n    $this->js_comp_webpack_lib = $this->plugin_name . '-autosuggest-webpack-js';\n    $this->settings_name = $settings_name;\n    $this->js_lib_cdn_url = $js_lib_cdn_url;\n\n\t}\n\n\t/**\n\t * Register the stylesheets for the public-facing side of the site.\n\t *\n\t * @since    4.0.0\n\t */\n\tpublic function enqueue_styles() {\n\n\t\twp_enqueue_style(\n      $this->plugin_name,\n      plugin_dir_url( __FILE__ ) . 'css/w3w-autosuggest-public.css',\n      array(),\n      $this->version,\n      'all'\n    );\n\n\t}\n\n\t/**\n\t * Register the JavaScript for the public-facing side of the site.\n\t *\n\t * @since    4.0.0\n\t */\n\tpublic function enqueue_scripts() {\n    global $wp_version;\n    global $woocommerce;\n\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $settings['wp_version'] = $wp_version;\n    $settings['wc_version'] = isset( $woocommerce ) ? $woocommerce->version : 'N/A';\n    $settings['php_version'] = phpversion();\n    $data = 'const W3W_AUTOSUGGEST_SETTINGS = ' . json_encode( $settings ) . ';';\n\n    /**\n     * Add modular JS component script tag\n     */\n    wp_enqueue_script(\n      $this->js_comp_esm_lib,\n      $this->js_lib_cdn_url . '/what3words.esm.js',\n      array(),\n      $this->version,\n      false\n    );\n    \n    /**\n     * Add webpack-compiled JS components script tag as a fallback for older browsers that don't support modular.\n     */\n    wp_enqueue_script(\n      $this->js_comp_webpack_lib,\n      $this->js_lib_cdn_url . '/what3words.js',\n      array(),\n      $this->version,\n      false\n    );\n\n    /**\n     * Add the WordPress plugin JS file in /public/js directory\n     * \n     * N.B - dependencies are supplied \n     */\n    $dependencies = array( 'jquery', $this->js_comp_esm_lib, $this->js_comp_webpack_lib );\n\t\twp_enqueue_script(\n      $this->plugin_name,\n      plugin_dir_url( __FILE__ ) . 'js/w3w-autosuggest-public.js',\n      $dependencies,\n      $this->version,\n      true\n    );\n\n    /**\n     * Expose settings stored in get_options() to the JS files\n     * https://developer.wordpress.org/reference/functions/wp_add_inline_script/\n     * \n     * N.B - The data is injected 'before' the JS scripts so that it is available when they load\n     */\n    wp_add_inline_script(\n      $this->plugin_name,\n      $data,\n      'before'\n    );\n\n\t}\n\n  /**\n\t * Add module and nomodule attributes to javascript-components script tags using the script_loader_tag filter\n   * https://developer.wordpress.org/reference/hooks/script_loader_tag/\n\t *\n\t * @since    4.0.0\n\t */\n  public function add_attribute( $tag, $handle, $src ) {\n\n    if ( $handle === $this->js_comp_esm_lib ) {\n      return '<script type=\"module\" src=\"' . esc_url( $src ) . '\"></script>';\n    }\n\n    if ( $handle === $this->js_comp_webpack_lib ) {\n      return '<script nomodule src=\"' . esc_url( $src ) . '\"></script>';\n    }\n\n    return $tag;\n\n  }\n\n  /**\n\t * Adds inputs 'billing_w3w' and 'shipping_w3w' to a WooCommerce checkout page using the woocommerce_checkout_fields\n   * filter\n   * https://docs.woocommerce.com/document/tutorial-customising-checkout-fields-using-actions-and-filters/\n\t *\n\t * @since    4.0.0\n\t */\n  public function add_fields_to_checkout_form( $fields ) {\n\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $label = $settings['enable_label'] ? $settings['label'] : 'what3words address';\n    $placeholder = $settings['enable_placeholder'] ? $settings['placeholder'] : '';\n\n    if ( $settings['woocommerce_enabled'] ) {\n\n      $fields['billing']['billing_w3w'] = [\n        'id' => 'w3w-billing',\n        'label' => __( $label, 'what3words' ),\n        'placeholder' => __( $placeholder, 'what3words' ),\n        'required' => false,\n        'class' => ['form-row-wide'],\n        'clear' => true\n      ];\n      $fields['shipping']['shipping_w3w'] = [\n        'id' => 'w3w-shipping',\n        'label' => __( $label, 'what3words' ),\n        'placeholder' => __( $placeholder, 'what3words' ),\n        'required' => false,\n        'class' => ['form-row-wide'],\n        'clear' => true\n      ];\n\n      if ( $settings['save_nearest_place'] ) {\n\n        $fields['billing']['billing_nearest_place'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => true,\n          'class' => ['hidden', 'form-row-wide'],\n        ];\n        $fields['shipping']['shipping_nearest_place'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => true,\n          'class' => ['hidden', 'form-row-wide'],\n        ];\n\n      }\n\n      if ( $settings['return_coordinates'] ) {\n\n        $fields['billing']['billing_w3w_lat'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['billing']['billing_w3w_lng'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['shipping']['shipping_w3w_lat'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['shipping']['shipping_w3w_lng'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n\n      }\n\n    }\n\n    return $fields;\n\n  }\n\n  public function checkout_page( $order ) {\n\n    $order_id = $order->get_id();\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $billing_words = get_post_meta( $order_id, '_billing_w3w', true );\n    $billing_nearest_place = get_post_meta( $order_id, '_billing_nearest_place', true );\n    $shipping_words = get_post_meta( $order_id, '_shipping_w3w', true );\n    $shipping_nearest_place = get_post_meta( $order_id, '_shipping_nearest_place', true );\n    $label = $settings['enable_label'] ? $settings['label'] : 'w3w Address';\n\n    require_once plugin_dir_path( __FILE__ ) . 'partials/w3w-autosuggest-checkout-page.php';\n\n  }\n\n}\n", "\n(function( $ ) {\n  'use strict';\n\n\t/**\n\t * All of the code for your public-facing JavaScript source\n\t * should reside in this file.\n\t *\n\t * Note: It has been assumed you will write jQuery code here, so the\n\t * $ function reference has been prepared for usage within the scope\n\t * of this function.\n\t *\n\t * This enables you to define handlers, for when the DOM is ready:\n\t *\n\t * $(function() {\n\t *\n\t * });\n\t *\n\t * When the window is loaded:\n\t *\n\t * $( window ).load(function() {\n\t *\n\t * });\n\t *\n\t * ...and/or other possibilities.\n\t *\n\t * Ideally, it is not considered best practise to attach more than a\n\t * single DOM-ready or window-load handler for a particular page.\n\t * Although scripts in the WordPress core, Plugins and Themes may be\n\t * practising this, we should strive to set a better example in our own work.\n\t */\n\n  function createAutosuggestComponent(target, targetParent, targetSibling) {\n    const w3wComponent = document.createElement('what3words-autosuggest')\n\n    w3wComponent.setAttribute('variant', 'inherit')\n    w3wComponent.setAttribute('headers', JSON.stringify({\n      'X-W3W-Plugin':\n        `what3words-Wordpress/${W3W_AUTOSUGGEST_SETTINGS.version} (` + [\n          `PHP/${W3W_AUTOSUGGEST_SETTINGS.php_version}`,\n          `WordPress/${W3W_AUTOSUGGEST_SETTINGS.wp_version}`,\n          `WooCommerce/${W3W_AUTOSUGGEST_SETTINGS.wc_version}`\n        ].join(' ') + ')'\n    }))\n    w3wComponent.setAttribute('api_key', W3W_AUTOSUGGEST_SETTINGS.api_key)\n    w3wComponent.setAttribute('return_coordinates', true)\n    \n    if (!W3W_AUTOSUGGEST_SETTINGS.woocommerce_enabled) {\n      if (W3W_AUTOSUGGEST_SETTINGS.enable_placeholder){\n        target.setAttribute('placeholder', W3W_AUTOSUGGEST_SETTINGS.placeholder)\n      }\n      if (W3W_AUTOSUGGEST_SETTINGS.enable_label) {\n        const label = document.createElement('label')\n        label.setAttribute('for', target.id || 'w3w_autosuggest_field')\n        label.innerHTML = W3W_AUTOSUGGEST_SETTINGS.label\n        targetParent.insertBefore(label, targetSibling)\n      }\n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        const nearestPlaceInput = document.createElement('input')\n        nearestPlaceInput.setAttribute('type', 'hidden')\n        nearestPlaceInput.setAttribute('name', `${target.name || 'what3words_3wa'}_nearest_place`)\n        targetParent.insertBefore(nearestPlaceInput, targetSibling)\n        w3wComponent.addEventListener('selected_suggestion', function (e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          nearestPlaceInput.value = nearestPlace\n        })\n      }\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country) {\n      w3wComponent.setAttribute('clip_to_country', W3W_AUTOSUGGEST_SETTINGS.clip_to_country)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon) {\n      const polygon = W3W_AUTOSUGGEST_SETTINGS.clip_to_polygon.trim()\n        .split('],')\n        .map(coords => {\n          const [lng, lat] = coords.trim()\n            .replace('[', '')\n            .replace(']', '')\n            .replace(/\\s/g, '')\n            .split(',')\n          return `${lat.trim()},${lng.trim()}`\n        })\n        .join(',')\n      w3wComponent.setAttribute('clip_to_polygon', polygon)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box) {\n      const bounding_box = [\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_ne_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_ne_lng,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_sw_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_sw_lng,\n      ].join(',')\n      w3wComponent.setAttribute('clip_to_bounding_box', bounding_box)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle) {\n      const circle = [\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_lng,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_radius,\n      ].join(',')\n      w3wComponent.setAttribute('clip_to_circle', circle)\n    }\n\n    return w3wComponent\n  }\n\n  if (W3W_AUTOSUGGEST_SETTINGS.woocommerce_enabled) {\n    const billingCountry = $('#billing_country')\n    const shippingCountry = $('#shipping_country')\n    const billingTarget = document.querySelector('#w3w-billing')\n    const shippingTarget = document.querySelector('#w3w-shipping')\n\n    if (billingCountry && billingTarget) {\n      const billingTargetSibling = billingTarget.nextSibling\n      const billingTargetParent = billingTarget.parentElement\n      const billingW3wComponent = createAutosuggestComponent(billingTarget, billingTargetParent, billingTargetSibling)\n      billingW3wComponent.setAttribute('name', 'billing_w3w')\n      \n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        billingW3wComponent.addEventListener('selected_suggestion', function(e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          $('#billing_nearest_place').attr('value', nearestPlace)\n        })\n      }\n\n      if (W3W_AUTOSUGGEST_SETTINGS.return_coordinates) {\n        billingW3wComponent.addEventListener('coordinates_changed', function(e) {\n          const coordinates = e.detail.coordinates\n          $('#billing_w3w_lat').attr('value', coordinates.lat)\n          $('#billing_w3w_lng').attr('value', coordinates.lng)\n        })\n      }\n      \n      billingW3wComponent.appendChild(billingTarget)\n      billingTargetParent.insertBefore(billingW3wComponent, billingTargetSibling)\n\n      if (\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon\n      ) {\n        console.log('inside')\n        billingCountry.on('change', function(e) {\n          $('#w3w-billing').closest('what3words-autosuggest').attr('clip_to_country', e.target.value)\n        })\n        billingCountry.trigger('change')\n      }\n    }\n\n    if (shippingCountry && shippingTarget) {\n      const shippingTargetSibling = shippingTarget.nextSibling\n      const shippingTargetParent = shippingTarget.parentElement\n      const shippingW3wComponent = createAutosuggestComponent(\n        shippingTarget,\n        shippingTargetParent,\n        shippingTargetSibling,\n      )\n      shippingW3wComponent.setAttribute('name', 'shipping_w3w')\n  \n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        shippingW3wComponent.addEventListener('selected_suggestion', function(e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          $('#shipping_nearest_place').attr('value', nearestPlace)\n        })\n      }\n\n      if (W3W_AUTOSUGGEST_SETTINGS.return_coordinates) {\n        shippingW3wComponent.addEventListener('coordinates_changed', function(e) {\n          const coordinates = e.detail.coordinates\n          $('#shipping_w3w_lat').attr('value', coordinates.lat)\n          $('#shipping_w3w_lng').attr('value', coordinates.lng)\n        })\n      }\n      \n      shippingW3wComponent.appendChild(shippingTarget)\n      shippingTargetParent.insertBefore(shippingW3wComponent, shippingTargetSibling)\n\n      if (\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon\n      ) {\n        console.log('inside')\n        shippingCountry.on('change', function(e) {\n          $('#w3w-shipping').closest('what3words-autosuggest').attr('clip_to_country', e.target.value)\n        })\n        shippingCountry.trigger('change')\n      }\n    }\n  } else {\n    const targets = document.querySelectorAll(W3W_AUTOSUGGEST_SETTINGS.selector)\n   \n    for (let i = 0; i < targets.length; i++) {\n      const target = targets[i]\n      const targetSibling = target.nextSibling\n      const targetParent = target.parentElement\n      const w3wComponent = createAutosuggestComponent(target, targetParent, targetSibling)\n  \n      w3wComponent.appendChild(target)\n      targetParent.insertBefore(w3wComponent, targetSibling)\n    }\n  }\n\n})( jQuery );\n\n", "<?php\n\n/**\n * The plugin bootstrap file\n *\n * This file is read by WordPress to generate the plugin information in the plugin\n * admin area. This file also includes all of the dependencies used by the plugin,\n * registers the activation and deactivation functions, and defines a function\n * that starts the plugin.\n *\n * @link              https://developer.what3words.com/tutorial/installing-the-wordpress-plugin\n * @since             4.0.0\n * @package           w3w-autosuggest\n *\n * @wordpress-plugin\n * Plugin Name:       what3words Address Field\n * Plugin URI:        https://github.com/what3words/wordpress-autosuggest-plugin\n * Description:       Official plugin to allow customers to enter and validate a what3words address on your checkout for accurate deliveries\n * Version:           4.0.0\n * Author:            what3words\n * Author URI:        https://what3words.com\n * License:           GPL-2.0+\n * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt\n * Text Domain:       what3words-searchbox\n * Domain Path:       /languages\n */\n\n/*\nwhat3words Address Field is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\nany later version.\n\nwhat3words Address Field is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with what3words Address Field. If not, see https://what3words.com.\n*/\n\n// If this file is called directly, abort.\nif ( ! defined( 'WPINC' ) ) {\n\tdie;\n}\n\n/**\n * Plugin base name\n */\nif ( !defined( 'W3W_AUTOSUGGEST_PLUGIN_BASENAME' ) ) {\n  define( 'W3W_AUTOSUGGEST_PLUGIN_BASENAME', plugin_basename( __FILE__ ) );\n}\n/**\n * Current plugin version.\n */\nif ( !defined( 'W3W_PLUGIN_VERSION' ) ) {\n  define( 'W3W_PLUGIN_VERSION', '4.0.0' );\n}\n/**\n * Plugin settings name\n */\nif ( !defined( 'W3W_SETTINGS_NAME' ) ) {\n  define( 'W3W_SETTINGS_NAME', 'w3w_autosuggest_settings' );\n}\n\n/**\n * Defines the JS-library to point to (includes the version of the JS-library)\n */\nif ( !defined( 'W3W_JS_LIB_CDN_URL' ) ) {\n  define ( 'W3W_JS_LIB_CDN_URL', 'https://cdn.what3words.com/javascript-components@4.0.0/dist/what3words' );\n}\n\n/**\n * Defines the internationalisation domain\n */\nif ( !defined( 'W3W_I18N_DOMAIN' ) ) {\n  define ( 'W3W_I18N_DOMAIN', 'what3words' );\n}\n\n/**\n * The URL to the settings page for the w3w_autosuggest\n */\nif ( !defined('W3W_SETTINGS_URL' ) ) {\n  DEFINE( 'W3W_SETTINGS_URL', esc_html( admin_url( 'admin.php?page=what3words' ) ) );\n}\n\n/**\n * The code that runs during plugin activation.\n * This action is documented in includes/class-w3w-autosuggest-activator.php\n */\nif ( !function_exists( 'activate_w3w_autosuggest' ) ) {\n  function activate_w3w_autosuggest() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest-activator.php';\n    W3W_Autosuggest_Activator::activate( W3W_PLUGIN_VERSION, W3W_SETTINGS_NAME );\n  }\n  register_activation_hook( __FILE__, 'activate_w3w_autosuggest' );\n}\n\n/**\n * The code that runs during plugin deactivation.\n * This action is documented in includes/class-w3w-autosuggest-deactivator.php\n */\nif ( !function_exists( 'deactivate_w3w_autosuggest' ) ) {\n  function deactivate_w3w_autosuggest() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest-deactivator.php';\n    W3W_Autosuggest_Deactivator::deactivate();\n  }\n  register_deactivation_hook( __FILE__, 'deactivate_w3w_autosuggest' );\n}\n\n/**\n * The core plugin class that is used to define internationalization,\n * admin-specific hooks, and public-facing site hooks.\n */\nrequire plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest.php';\n\n/**\n * Begins execution of the plugin.\n *\n * Since everything within the plugin is registered via hooks,\n * then kicking off the plugin from this point in the file does\n * not affect the page life cycle.\n *\n * @since    4.0.0\n */\nfunction run_w3w_autosuggest() {\n\n  $plugin_name = 'w3w-autosuggest';\n\n\t$plugin = new W3W_Autosuggest(\n    $plugin_name,\n    W3W_PLUGIN_VERSION,\n    W3W_AUTOSUGGEST_PLUGIN_BASENAME,\n    W3W_SETTINGS_NAME,\n    W3W_JS_LIB_CDN_URL,\n    W3W_I18N_DOMAIN,\n    W3W_SETTINGS_URL\n  );\n\t$plugin->run();\n\n}\nrun_w3w_autosuggest();\n"], "fixing_code": ["\n# Created by https://www.toptal.com/developers/gitignore/api/wordpress,phpstorm,visualstudiocode\n# Edit at https://www.toptal.com/developers/gitignore?templates=wordpress,phpstorm,visualstudiocode\n\n### PhpStorm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### PhpStorm Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n\n# Markdown Navigator plugin\n# https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced\n.idea/**/markdown-navigator.xml\n.idea/**/markdown-navigator-enh.xml\n.idea/**/markdown-navigator/\n\n# Cache file creation bug\n# See https://youtrack.jetbrains.com/issue/JBR-2257\n.idea/$CACHE_FILE$\n\n# CodeStream plugin\n# https://plugins.jetbrains.com/plugin/12206-codestream\n.idea/codestream.xml\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n### WordPress ###\n# Core\n#\n# Note: if you want to stage/commit WP core files\n# you can delete this whole section/until Configuration.\n/wp-admin/\n/wp-content/index.php\n/wp-content/languages\n/wp-content/plugins/index.php\n/wp-content/themes/index.php\n/wp-includes/\n/index.php\n/license.txt\n/readme.html\n/wp-*.php\n/xmlrpc.php\n\n# Configuration\nwp-config.php\n\n# Example themes\n/wp-content/themes/twenty*/\n\n# Example plugin\n/wp-content/plugins/hello.php\n\n# Uploads\n/wp-content/uploads/\n\n# Log files\n*.log\n\n# htaccess\n/.htaccess\n\n# All plugins\n# Note: If you wish to whitelist plugins,\n# uncomment the next line\n#/wp-content/plugins\n\n# All themes\n# Note: If you wish to whitelist themes,\n# uncomment the next line\n#/wp-content/themes\n# End of https://www.toptal.com/developers/gitignore/api/wordpress,phpstorm,visualstudiocode\n\n\n\n\n# Numerous always-ignore extensions\n*.diff\n*.err\n*.orig\n*.log\n*.rej\n*.swo\n*.swp\n*.vi\n*~\n*.sass-cache\n\n# OS or Editor folders\n.DS_Store\nThumbs.db\n.cache\n.project\n.settings\n.tmproj\n*.esproj\nnbproject\n*.sublime-project\n*.sublime-workspace\n\n# Dreamweaver added files\n_notes\ndwsync.xml\n\n# Komodo\n*.komodoproject\n.komodotools\n\n# Folders to ignore\n.hg\n.svn\n.CVS\nintermediate\n.idea\ncache\ntest/database/data/*\nnode_modules\nautosuggest\nvideos\nscreenshots\n*.zip\n*.env\n3-word-address-validation-field", "= 4.0.1 =\n* Released 2021.11.xx\n* Security vulnerability fixed for `get_option` exposing sensitive information.\n* Loading the w3w autosuggest script asynchronously\n\n= 4.0.0 =\n* Released 2021.07.20\n* Upgraded to use V4 of the what3words AutoSuggest Component with improved styling and functionality.\n* Updated admin section interface.\n* Addition of advanced clipping options to restrict suggestions displayed to a user.\n* Addition of options to store latitude and longitude coordinates and nearest place against a record.\n* Added ability to change the field label.\n\n= 3.0.11 =\n* Released 2021.06.30\n* Fixes non-fatal debugging log output for PHP \"Variable assignment\" error\n\n= 3.0.10 =\n* Released 2021.03.09\n* Fixes passing API key to autosuggest for requests.\n\n= 3.0.9 =\n* Released 2021.02.03\n* Updated screenshots\n* Send key version numbers to what3words API via `X-W3W-Plugin` request header.\n\n= 3.0.8 =\n* Released 2020.12.11\n* Improved interoperability, errors in 3rd party scripts will be less likely to prevent the plugin operating.\n* Bumped to latest WordPress release, 5.6\n\n= 3.0.7 =\n* Released 2020.06.17\n* Addresses an error that prevented the plugin loading on Internet Explorer.\n* Minor styling improvements.\n\n= 3.0.6 =\n* Released 2020.06.02\n* Further improvements to match theme styling\n* Clarified the purpose of the `Input Selector(s)` field\n* Updated readme\n\n= 3.0.5 =\n* Released 2020.06.01\n* Apply missing `font-size` property.\n\n= 3.0.4 =\n* Released 2020.06.01\n* Hotfix missing `font-size` property.\n\n= 3.0.3 =\n* Released 2020.06.01\n* Plugin tweaked to take up less vertical height on themes with slimmer text inputs.\n\n= 3.0.2 =\n* Released 2020.06.01\n* The plugin now inherits styles from the current wordpress theme for more seamless integration.\n* The following css properties are automatically applied to the upgraded input: `background-color`, `border`, `border-radius`, `color`, `font`, `height`.\n\n= 3.0.1 =\n* Released 2020.05.27\n* Fixes an issue where country clipping would not work when shipping and billing addresses were in different countries.\n* Updated screenshots\n\n= 3.0.0 =\n* Released 2020.05.26\n* Updated the plugin to use new web component and V3 of the what3words API. Note that this release simplifies the plugin setup and removes some settings.\n* Updated links to what3words documentation and developer site\n* Settings available are now: \n* API key\n* CSS selector to specify which inputs should be upgraded to the auto suggest component\n* Placeholder text shown on inputs\n* Turn on/off the WooCommerce integration, to automatically add what3words address fields to your checkout forms\n\n= 2.0.4 =\n* Released 2019.01.16\n* Added new function to allow a country field to be specified for country clipping\n\n= 2.0.3 =\n* Released 2018.04.05\n* bug fixes\n\n= 2.0.2 =\n* Released 2018.03.16\n* bug fixes\n\n= 2.0.1 =\n* Released 2018.01.09\n* bug fixes\n\n= 2.0.0 =\n* Released 2018.01.08\n* Reworked and redesigned plugin code base\n\n= 1.1.0 =\n* uses what3words autosuggest jQuery plugin 1.2.0\n\n= 1.0.1 =\n* General fixes\n\n= 1.0.0 =\n* Initial release", "=== what3words Address Field ===\nContributors: what3words\nTags: what3words, 3 word address, three word address, searchbox, search, address, validation, autosuggest, w3w\nRequires at least: 4.7\nTested up to: 5.8\nStable tag: 4.0.1\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nOfficial plugin to allow customers to enter and validate a what3words address on your checkout for accurate deliveries.\n\n== Description ==\n\nThe what3words Address Field plugin helps you capture what3words addresses at checkout, using an address validation field.  By giving a what3words address, your customers can accurately pinpoint their desired delivery destination.\n\nwhat3words is a global addressing system that provides the simplest way to communicate location. It has divided the world into 3 metre squares and assigned each one a unique address made of just 3 words. It is more accurate than traditional street addressing, and even allows location information to be captured for places without addresses, such as parks or beaches.\n\n= How does this help your business? =\n\nIt\u2019s quick and easy to implement the what3words Address Field plugin. what3words addresses can be converted to GPS coordinates, which can then be passed onto delivery drivers. With a what3words address, deliveries can then arrive precisely in the right place and on time, giving a more reliable delivery experience for your customers.\n\n= And for your customers? =\n\nYour customers will have the option of providing the what3words address for their delivery location at the checkout. This gives them a way of providing a delivery location without the need to add complicated delivery instructions, and helps give them peace of mind that their delivery will be made to the right place, helping them to trust your business.\n\n= How does it work? =\n\nThis plugin allows your customers to easily enter and validate a what3words address in a form on your WordPress powered site, most likely your checkout page if using WooCommerce.\n\nPowered by our AutoSuggest feature, the what3words address field returns suggestions based on full or partial what3words addresses,  helping users with the following types of input error:\n\n* typing errors\n* spelling errors\n* misremembered words (e.g. singular vs. plural) or words in the wrong order\n\nWe recommend using the plugin when you want to capture a precise location from a user, such as a customer\u2019s front door or specific entrance of a larger building.\n\n\n== Installation ==\n\n= WordPress Installation (recommended) =\n\nYou can install the what3words Address Field plugin through the WordPress plugins page in your WordPress admin panel. \n\n1. Navigate to the _Plugins > Add New_ page\n2. Search for \"what3words\" \n3. Click the _Install Now_ button.\n4. Once installed, you can activate the plugin on the _Plugins_ page.\n\n= Manual Installation =\n\nYou can download the what3words Address Field plugin from the [WordPress Plugins site](https://wordpress.org/plugins/3-word-address-validation-field/#installation).\n\n1. Download the what3words Address Field plugin from the WordPress Plugins site\n2. Once you have downloaded the zipped plugin, you can upload it to your WordPress installation by navigating to _Plugins > Add New_, click the _Upload Plugin_ button\n3. Select the zipped plugin file and click _Install Now_\n4. Once installed, you can activate the plugin on the _Plugins_ page.\n\n= Configuration =\n\n== API Key ==\n\nYou will need a what3words API key to use this plugin, as it authenticates and interacts with the [what3words API](https://developer.what3words.com/public-api). If you don't have a what3words API key yet, you can quickly and easily [sign up and register](https://accounts.what3words.com/create-api-key) for one.\n\nOnce you have a what3words API key:\n\n1. Click the _what3words_ menu item on your wp-admin page.\n2. Enter your API Key into the API key field.\n3. Click _Save_\n\n== General Settings ==\n\n=== WooCommerce ===\n\nThe general settings allow you to customise how the what3words Address Field is configured on your site.\n\nFor WooCommerce users the plugin can automatically add an address field for both billing and shipping information, allowing your customer to specify a three word address for both billing and/or shipping address to help you locate your customers with ease. By default this option is selected and if you have configured your WooCommerce plugin it will automatically add these fields for you on your checkout page. Or you can select the _Add what3words Address Field to my checkout page for me_ option.\n\n=== Custom Fields ===\n\nAlternatively you can customise which field(s) to convert to a what3words Address Field by selecting _Convert an existing field to a what3words Address Field_ option and providing selectors for the inputs to convert. You can use any DOM compliant query selector(s) here to specify a single or multiple fields that you wish to convert.\n\n__N.B. When using input selectors you should ensure each input field has a unique name attribute to ensure clashes do not occur if multiple what3words Address Fields appear on a single page.__\n\nIf you want to add a new custom field to extend as a what3words Address Field you should first create an input field on the page you wish to add this functionality to and provide with a `name`, `id` and/or  that can then use in the input selector to specify it. (Be careful when using classes as it can apply this behaviour to multiple fields.)\n\nIf you want to capture the selected what3words address you should wrap this field in a form with a submit button and this will then be submitted as specified by your form.\n\n=== Save coordinates ===\n\nIf you need to capture the coordinates for a three word address to help with delivery information, for example, you should check the _Save coordinates_ checkbox with will also retrieve the coordinates for the captured three word address.\n\nIf you have added the what3words Address Field to your WooCommerce checkout and you select _Save coordinates_ the coordinates for the billing and shipping address fields will added to your order and visible in your Orders page on WooCommerce.\n\nIf you are using custom field(s) for the address then you the component will automatically attach hidden fields for both the latitude and longitude of the coordinates for the adddress prefixed with the name you supplied to the input field.\n\n=== Accessibility ===\n\nFor improved accessibility it is recommended that you add a label to your what3words Address Field. By checking this option and supplying some text for the label you can easily associate a label to each of your address field(s).\n\nFor WooCommerce customers this option allows you to override the default label associated to the address field(s), while for custom field users this option tells the plugin to create a label field for you.\n\n== Advanced Features ==\n\n=== Custom placeholder ===\n\nYou can override the default placeholder for the address field(s) by selecting this option and specifying the placeholder text. We recommed you use the default placeholder value as it provides your customers with an example of how to use the what3words Address Field.\n\n=== Clippings ===\n\nWe provide a number of options for clipping the autosuggest results. You can clip suggestions to a number of countries by providing comma separated 2 digit ISO codes for each country you wish to clip to. This will ensure suggestions provided are clipped within the countries specified. You can also clip within a circle, a bounding box or a polygon.\n\n__N.B. - When providing multiple clippings the intersection of each is what forms the suggestions provided when using the what3words Address Field.__\n\nFor WooCommerce checkouts we recommend skipping these options as the clip to country is automatically set when a user selects a country for their billing and/or shipping information as they select a country from the dropdown menu options in the checkout form.\n\n\n== Frequently Asked Questions ==\n\n= I have a question that's not answered here; what do I do? =\n\nHave a read of the [what3words Knowledge Base](https://support.what3words.com), which contains many more frequently asked questions and their answers.\n\n= More about what3words =\n\nwhat3words is available in 45+ languages, with pre-assigned, standardised 3 word addresses that are much easier to remember than lat/lng coordinates.\n\nFind our full developer documentation here:\n[https://developer.what3words.com](https://developer.what3words.com/)\n\nYou can learn more about our privacy policy here:\n[https://what3words.com/privacy](https://what3words.com/privacy)\n\n= Get in touch with us =\n\nHave any questions? Want to learn more about how the what3words Address Field plugin works? Get in touch with us at [support@what3words.com](mailto:support@what3words.com).\n\n\n== Screenshots ==\n\n1. Accept what3words addresses on your checkout page, or in a custom field.\n2. Display autosuggest results with geolocations to reduce user error\n3. Customize the autosuggest results with advanced features\n\n\n== Changelog ==\n\n= 4.0.1 =\n* Released 2021.11.xx\n* Security vulnerability fixed for `get_option` exposing sensitive information.\n* Loading the w3w autosuggest script asynchronously\n\n= 4.0.0 =\n* Released 2021.07.20\n* Upgraded to use V4 of the what3words AutoSuggest Component with improved styling and functionality.\n* Updated admin section interface.\n* Addition of advanced clipping options to restrict suggestions displayed to a user.\n* Addition of options to store latitude and longitude coordinates and nearest place against a record.\n* Added ability to change the field label.\n\n= 3.0.11 =\n* Released 2021.06.30\n* Fixes non-fatal debugging log output for PHP \"Variable assignment\" error\n\n= 3.0.10 =\n* Released 2021.03.09\n* Fixes passing API key to autosuggest for requests.\n\n= 3.0.9 =\n* Released 2021.02.03\n* Updated screenshots\n* Send key version numbers to what3words API via `X-W3W-Plugin` request header.\n\n= 3.0.8 =\n* Released 2020.12.11\n* Improved interoperability, errors in 3rd party scripts will be less likely to prevent the plugin operating.\n* Bumped to latest WordPress release, 5.6\n\n= 3.0.7 =\n* Released 2020.06.17\n* Addresses an error that prevented the plugin loading on Internet Explorer.\n* Minor styling improvements.\n\n= 3.0.6 =\n* Released 2020.06.02\n* Further improvements to match theme styling\n* Clarified the purpose of the `Input Selector(s)` field\n* Updated readme\n\n= 3.0.5 =\n* Released 2020.06.01\n* Apply missing `font-size` property.\n\n= 3.0.4 =\n* Released 2020.06.01\n* Hotfix missing `font-size` property.\n\n= 3.0.3 =\n* Released 2020.06.01\n* Plugin tweaked to take up less vertical height on themes with slimmer text inputs.\n\n= 3.0.2 =\n* Released 2020.06.01\n* The plugin now inherits styles from the current wordpress theme for more seamless integration.\n* The following css properties are automatically applied to the upgraded input: `background-color`, `border`, `border-radius`, `color`, `font`, `height`.\n\n= 3.0.1 =\n* Released 2020.05.27\n* Fixes an issue where country clipping would not work when shipping and billing addresses were in different countries.\n* Updated screenshots\n\n= 3.0.0 =\n* Released 2020.05.26\n* Updated the plugin to use new web component and V3 of the what3words API. Note that this release simplifies the plugin setup and removes some settings.\n* Updated links to what3words documentation and developer site\n* Settings available are now: \n* API key\n* CSS selector to specify which inputs should be upgraded to the auto suggest component\n* Placeholder text shown on inputs\n* Turn on/off the WooCommerce integration, to automatically add what3words address fields to your checkout forms\n\n= 2.0.4 =\n* Released 2019.01.16\n* Added new function to allow a country field to be specified for country clipping\n\n= 2.0.3 =\n* Released 2018.04.05\n* bug fixes\n\n= 2.0.2 =\n* Released 2018.03.16\n* bug fixes\n\n= 2.0.1 =\n* Released 2018.01.09\n* bug fixes\n\n= 2.0.0 =\n* Released 2018.01.08\n* Reworked and redesigned plugin code base\n\n= 1.1.0 =\n* uses what3words autosuggest jQuery plugin 1.2.0\n\n= 1.0.1 =\n* General fixes\n\n= 1.0.0 =\n* Initial release\n\n== Upgrade Notice ==\n\n= 4.0.1 =\nPerformance improvements and security vulnerability patch\n\n= 4.0 =\nUpgrade the what3words address field plugin to use the latest version of the what3words AutoSuggest Component and new plugin features.\n\n= 3.0 =\nThis is the 9th version of the plugin\n\n= 2.0 =\nThis is the 4th version of the plugin\n\n= 1.0 =\nThis is the first version of the plugin\n", "<?php\n\n/**\n * The public-facing functionality of the plugin.\n *\n * @link       https://developer.what3words.com/tutorial/installing-the-wordpress-plugin\n * @since      4.0.0\n *\n * @package    W3W_Autosuggest\n * @subpackage W3W_Autosuggest/public\n */\n\n/**\n * The public-facing functionality of the plugin.\n *\n * Defines the plugin name, version, and two examples hooks for how to\n * enqueue the public-facing stylesheet and JavaScript.\n *\n * @package    W3W_Autosuggest\n * @subpackage W3W_Autosuggest/public\n * @author     what3words\n */\nclass W3W_Autosuggest_Public {\n\n\t/**\n\t * The ID of this plugin.\n\t *\n\t * @since    4.0.0\n\t * @access   private\n\t * @var      string    $plugin_name    The ID of this plugin.\n\t */\n\tprivate $plugin_name;\n\n\t/**\n\t * The version of this plugin.\n\t *\n\t * @since    4.0.0\n\t * @access   private\n\t * @var      string    $version    The current version of this plugin.\n\t */\n\tprivate $version;\n\n  /**\n   * This modular javascript components distribution\n   * \n   * @since    4.0.0\n   * @access   private\n   * @var      string    $js_comp_esm_lib  The handle for the modular JS script\n   */\n  private $js_comp_esm_lib;\n\n  /**\n   * This webpack-compiled javascript components distribution\n   * \n   * @since    4.0.0\n   * @access   private\n   * @var      string    $js_comp_webpack_lib  The handle for the webpack JS script\n   */\n  private $js_comp_webpack_lib;\n\n  private $settings_name;\n\n  private $js_lib_cdn_url;\n\n\t/**\n\t * Initialize the class and set its properties.\n\t *\n\t * @since    4.0.0\n\t * @param      string    $plugin_name       The name of the plugin.\n\t * @param      string    $version    The version of this plugin.\n\t */\n\tpublic function __construct( $plugin_name, $version, $settings_name, $js_lib_cdn_url ) {\n\n\t\t$this->plugin_name = $plugin_name;\n\t\t$this->version = $version;\n    $this->js_comp_esm_lib = $this->plugin_name . '-autosuggest-esm-js';\n    $this->js_comp_webpack_lib = $this->plugin_name . '-autosuggest-webpack-js';\n    $this->settings_name = $settings_name;\n    $this->js_lib_cdn_url = $js_lib_cdn_url;\n\n\t}\n\n\t/**\n\t * Register the stylesheets for the public-facing side of the site.\n\t *\n\t * @since    4.0.0\n\t */\n\tpublic function enqueue_styles() {\n\n\t\twp_enqueue_style(\n      $this->plugin_name,\n      plugin_dir_url( __FILE__ ) . 'css/w3w-autosuggest-public.css',\n      array(),\n      $this->version,\n      'all'\n    );\n\n\t}\n\n\t/**\n\t * Register the JavaScript for the public-facing side of the site.\n\t *\n\t * @since    4.0.0\n\t */\n\tpublic function enqueue_scripts() {\n    global $wp_version;\n    global $woocommerce;\n\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $exposed_settings['version'] = $settings['version'];\n    $exposed_settings['php_version'] = phpversion();\n    $exposed_settings['wp_version'] = $wp_version;\n    $exposed_settings['wc_version'] = isset( $woocommerce ) ? $woocommerce->version : 'N/A';\n    $exposed_settings['api_key'] = $settings['api_key'];\n    if ( isset( $settings['woocommerce_enabled'] ) )\n      $exposed_settings['woocommerce_enabled'] = $settings['woocommerce_enabled'];\n    if ( isset( $settings['enable_placeholder'] ) )\n      $exposed_settings['enable_placeholder'] = $settings['enable_placeholder'];\n    if ( isset( $settings['placeholder'] ) && !empty( $settings['placeholder'] ) )\n      $exposed_settings['placeholder'] = $settings['placeholder'];\n    if ( isset( $settings['enable_label'] ) )\n      $exposed_settings['enable_label'] = $settings['enable_label'];\n    if ( isset( $settings['label'] ) && !empty( $settings['label'] ) )\n      $exposed_settings['label'] = $settings['label'];\n    if ( isset( $settings['save_nearest_place'] ) && !empty( $settings['save_nearest_place'] ) )\n      $exposed_settings['save_nearest_place'] = $settings['save_nearest_place'];\n    if ( isset( $settings['enable_clip_to_country'] ) )\n      $exposed_settings['enable_clip_to_country'] = $settings['enable_clip_to_country'];\n    if ( isset( $settings['clip_to_country'] ) && !empty( $settings['clip_to_country'] ) )\n      $exposed_settings['clip_to_country'] = $settings['clip_to_country'];\n    if ( isset( $settings['enable_clip_to_bounding_box'] ) )\n      $exposed_settings['enable_clip_to_bounding_box'] = $settings['enable_clip_to_bounding_box'];\n    if ( isset( $settings['clip_to_bounding_box_ne_lat'] ) && !empty( $settings['clip_to_bounding_box_ne_lat'] ) )\n      $exposed_settings['clip_to_bounding_box_ne_lat'] = $settings['clip_to_bounding_box_ne_lat'];\n    if ( isset( $settings['clip_to_bounding_box_ne_lng'] ) && !empty( $settings['clip_to_bounding_box_ne_lng'] ) )\n      $exposed_settings['clip_to_bounding_box_ne_lng'] = $settings['clip_to_bounding_box_ne_lng'];\n    if ( isset( $settings['clip_to_bounding_box_sw_lat'] ) && !empty( $settings['clip_to_bounding_box_sw_lat'] ) )\n      $exposed_settings['clip_to_bounding_box_sw_lat'] = $settings['clip_to_bounding_box_sw_lat'];\n    if ( isset( $settings['clip_to_bounding_box_sw_lng'] ) && !empty( $settings['clip_to_bounding_box_sw_lng'] ) )\n      $exposed_settings['clip_to_bounding_box_sw_lng'] = $settings['clip_to_bounding_box_sw_lng'];\n    if ( isset( $settings['enable_clip_to_circle'] ) )\n      $exposed_settings['enable_clip_to_circle'] = $settings['enable_clip_to_circle'];\n    if ( isset( $settings['clip_to_circle_lat'] ) && !empty( $settings['clip_to_circle_lat'] ) )\n      $exposed_settings['clip_to_circle_lat'] = $settings['clip_to_circle_lat'];\n    if ( isset( $settings['clip_to_circle_lng'] ) && !empty( $settings['clip_to_circle_lng'] ) )\n      $exposed_settings['clip_to_circle_lng'] = $settings['clip_to_circle_lng'];\n    if ( isset( $settings['clip_to_circle_radius'] ) && !empty( $settings['clip_to_circle_radius'] ) )\n      $exposed_settings['clip_to_circle_radius'] = $settings['clip_to_circle_radius'];\n    if ( isset( $settings['return_coordinates'] ) )\n      $exposed_settings['return_coordinates'] = $settings['return_coordinates'];\n    if ( isset( $settings['selector'] ) && !empty( $settings['selector'] ) )\n      $exposed_settings['selector'] = $settings['selector'];\n    $data = 'const W3W_AUTOSUGGEST_SETTINGS = ' . json_encode( $exposed_settings ) . ';';\n\n    /**\n     * Add modular JS component script tag\n     */\n    wp_enqueue_script(\n      $this->js_comp_esm_lib,\n      $this->js_lib_cdn_url . '/what3words.esm.js',\n      array(),\n      $this->version,\n      false\n    );\n    \n    /**\n     * Add webpack-compiled JS components script tag as a fallback for older browsers that don't support modular.\n     */\n    wp_enqueue_script(\n      $this->js_comp_webpack_lib,\n      $this->js_lib_cdn_url . '/what3words.js',\n      array(),\n      $this->version,\n      false\n    );\n\n    /**\n     * Add the WordPress plugin JS file in /public/js directory\n     * \n     * N.B - dependencies are supplied \n     */\n    $dependencies = array( 'jquery', $this->js_comp_esm_lib, $this->js_comp_webpack_lib );\n\t\twp_enqueue_script(\n      $this->plugin_name,\n      plugin_dir_url( __FILE__ ) . 'js/w3w-autosuggest-public.js',\n      $dependencies,\n      $this->version,\n      true\n    );\n\n    /**\n     * Expose settings stored in get_options() to the JS files\n     * https://developer.wordpress.org/reference/functions/wp_add_inline_script/\n     * \n     * N.B - The data is injected 'before' the JS scripts so that it is available when they load\n     */\n    wp_add_inline_script(\n      $this->plugin_name,\n      $data,\n      'before'\n    );\n\n\t}\n\n  /**\n\t * Add module and nomodule attributes to javascript-components script tags using the script_loader_tag filter\n   * https://developer.wordpress.org/reference/hooks/script_loader_tag/\n\t *\n\t * @since    4.0.0\n\t */\n  public function add_attribute( $tag, $handle, $src ) {\n\n    if ( $handle === $this->js_comp_esm_lib ) {\n      return '<script type=\"module\" src=\"' . esc_url( $src ) . '\" async></script>';\n    }\n\n    if ( $handle === $this->js_comp_webpack_lib ) {\n      return '<script nomodule src=\"' . esc_url( $src ) . '\" async></script>';\n    }\n\n    return $tag;\n\n  }\n\n  /**\n\t * Adds inputs 'billing_w3w' and 'shipping_w3w' to a WooCommerce checkout page using the woocommerce_checkout_fields\n   * filter\n   * https://docs.woocommerce.com/document/tutorial-customising-checkout-fields-using-actions-and-filters/\n\t *\n\t * @since    4.0.0\n\t */\n  public function add_fields_to_checkout_form( $fields ) {\n\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $label = $settings['enable_label'] ? $settings['label'] : 'what3words address';\n    $placeholder = $settings['enable_placeholder'] ? $settings['placeholder'] : '';\n\n    if ( $settings['woocommerce_enabled'] ) {\n\n      $fields['billing']['billing_w3w'] = [\n        'id' => 'w3w-billing',\n        'label' => __( $label, 'what3words' ),\n        'placeholder' => __( $placeholder, 'what3words' ),\n        'required' => false,\n        'class' => ['form-row-wide'],\n        'clear' => true\n      ];\n      $fields['shipping']['shipping_w3w'] = [\n        'id' => 'w3w-shipping',\n        'label' => __( $label, 'what3words' ),\n        'placeholder' => __( $placeholder, 'what3words' ),\n        'required' => false,\n        'class' => ['form-row-wide'],\n        'clear' => true\n      ];\n\n      if ( $settings['save_nearest_place'] ) {\n\n        $fields['billing']['billing_nearest_place'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => true,\n          'class' => ['hidden', 'form-row-wide'],\n        ];\n        $fields['shipping']['shipping_nearest_place'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => true,\n          'class' => ['hidden', 'form-row-wide'],\n        ];\n\n      }\n\n      if ( $settings['return_coordinates'] ) {\n\n        $fields['billing']['billing_w3w_lat'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['billing']['billing_w3w_lng'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['shipping']['shipping_w3w_lat'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n        $fields['shipping']['shipping_w3w_lng'] = [\n          'type' => 'hidden',\n          'required' => false,\n          'clear' => false,\n          'class' => ['hidden', 'form-row-wide']\n        ];\n\n      }\n\n    }\n\n    return $fields;\n\n  }\n\n  public function checkout_page( $order ) {\n\n    $order_id = $order->get_id();\n    $settings = get_option( W3W_SETTINGS_NAME );\n    $billing_words = get_post_meta( $order_id, '_billing_w3w', true );\n    $billing_nearest_place = get_post_meta( $order_id, '_billing_nearest_place', true );\n    $shipping_words = get_post_meta( $order_id, '_shipping_w3w', true );\n    $shipping_nearest_place = get_post_meta( $order_id, '_shipping_nearest_place', true );\n    $label = $settings['enable_label'] ? $settings['label'] : 'w3w Address';\n\n    require_once plugin_dir_path( __FILE__ ) . 'partials/w3w-autosuggest-checkout-page.php';\n\n  }\n\n}\n", "\n(function( $ ) {\n  'use strict';\n\n\t/**\n\t * All of the code for your public-facing JavaScript source\n\t * should reside in this file.\n\t *\n\t * Note: It has been assumed you will write jQuery code here, so the\n\t * $ function reference has been prepared for usage within the scope\n\t * of this function.\n\t *\n\t * This enables you to define handlers, for when the DOM is ready:\n\t *\n\t * $(function() {\n\t *\n\t * });\n\t *\n\t * When the window is loaded:\n\t *\n\t * $( window ).load(function() {\n\t *\n\t * });\n\t *\n\t * ...and/or other possibilities.\n\t *\n\t * Ideally, it is not considered best practise to attach more than a\n\t * single DOM-ready or window-load handler for a particular page.\n\t * Although scripts in the WordPress core, Plugins and Themes may be\n\t * practising this, we should strive to set a better example in our own work.\n\t */\n\n  function createAutosuggestComponent(target, targetParent, targetSibling) {\n    const w3wComponent = document.createElement('what3words-autosuggest')\n\n    w3wComponent.setAttribute('variant', 'inherit')\n    w3wComponent.setAttribute('headers', JSON.stringify({\n      'X-W3W-Plugin':\n        `what3words-Wordpress/${W3W_AUTOSUGGEST_SETTINGS.version} (` + [\n          `PHP/${W3W_AUTOSUGGEST_SETTINGS.php_version}`,\n          `WordPress/${W3W_AUTOSUGGEST_SETTINGS.wp_version}`,\n          `WooCommerce/${W3W_AUTOSUGGEST_SETTINGS.wc_version}`\n        ].join(' ') + ')'\n    }))\n    w3wComponent.setAttribute('api_key', W3W_AUTOSUGGEST_SETTINGS.api_key)\n    w3wComponent.setAttribute('return_coordinates', true)\n    \n    if (!W3W_AUTOSUGGEST_SETTINGS.woocommerce_enabled) {\n      if (W3W_AUTOSUGGEST_SETTINGS.enable_placeholder){\n        target.setAttribute('placeholder', W3W_AUTOSUGGEST_SETTINGS.placeholder)\n      }\n      if (W3W_AUTOSUGGEST_SETTINGS.enable_label) {\n        const label = document.createElement('label')\n        label.setAttribute('for', target.id || 'w3w_autosuggest_field')\n        label.innerHTML = W3W_AUTOSUGGEST_SETTINGS.label\n        targetParent.insertBefore(label, targetSibling)\n      }\n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        const nearestPlaceInput = document.createElement('input')\n        nearestPlaceInput.setAttribute('type', 'hidden')\n        nearestPlaceInput.setAttribute('name', `${target.name || 'what3words_3wa'}_nearest_place`)\n        targetParent.insertBefore(nearestPlaceInput, targetSibling)\n        w3wComponent.addEventListener('selected_suggestion', function (e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          nearestPlaceInput.value = nearestPlace\n        })\n      }\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country) {\n      w3wComponent.setAttribute('clip_to_country', W3W_AUTOSUGGEST_SETTINGS.clip_to_country)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon) {\n      const polygon = W3W_AUTOSUGGEST_SETTINGS.clip_to_polygon.trim()\n        .split('],')\n        .map(coords => {\n          const [lng, lat] = coords.trim()\n            .replace('[', '')\n            .replace(']', '')\n            .replace(/\\s/g, '')\n            .split(',')\n          return `${lat.trim()},${lng.trim()}`\n        })\n        .join(',')\n      w3wComponent.setAttribute('clip_to_polygon', polygon)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box) {\n      const bounding_box = [\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_ne_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_ne_lng,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_sw_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_bounding_box_sw_lng,\n      ].join(',')\n      w3wComponent.setAttribute('clip_to_bounding_box', bounding_box)\n    }\n    if (W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle) {\n      const circle = [\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_lat,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_lng,\n        W3W_AUTOSUGGEST_SETTINGS.clip_to_circle_radius,\n      ].join(',')\n      w3wComponent.setAttribute('clip_to_circle', circle)\n    }\n\n    return w3wComponent\n  }\n\n  if (W3W_AUTOSUGGEST_SETTINGS.woocommerce_enabled) {\n    const billingCountry = $('#billing_country')\n    const shippingCountry = $('#shipping_country')\n    const billingTarget = document.querySelector('#w3w-billing')\n    const shippingTarget = document.querySelector('#w3w-shipping')\n\n    if (billingCountry && billingTarget) {\n      const billingTargetSibling = billingTarget.nextSibling\n      const billingTargetParent = billingTarget.parentElement\n      const billingW3wComponent = createAutosuggestComponent(billingTarget, billingTargetParent, billingTargetSibling)\n      billingW3wComponent.setAttribute('name', 'billing_w3w')\n      \n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        billingW3wComponent.addEventListener('selected_suggestion', function(e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          $('#billing_nearest_place').attr('value', nearestPlace)\n        })\n      }\n\n      if (W3W_AUTOSUGGEST_SETTINGS.return_coordinates) {\n        billingW3wComponent.addEventListener('coordinates_changed', function(e) {\n          const coordinates = e.detail.coordinates\n          $('#billing_w3w_lat').attr('value', coordinates.lat)\n          $('#billing_w3w_lng').attr('value', coordinates.lng)\n        })\n      }\n      \n      billingW3wComponent.appendChild(billingTarget)\n      billingTargetParent.insertBefore(billingW3wComponent, billingTargetSibling)\n\n      if (\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon\n      ) {\n        billingCountry.on('change', function(e) {\n          $('#w3w-billing').closest('what3words-autosuggest').attr('clip_to_country', e.target.value)\n        })\n        billingCountry.trigger('change')\n      }\n    }\n\n    if (shippingCountry && shippingTarget) {\n      const shippingTargetSibling = shippingTarget.nextSibling\n      const shippingTargetParent = shippingTarget.parentElement\n      const shippingW3wComponent = createAutosuggestComponent(\n        shippingTarget,\n        shippingTargetParent,\n        shippingTargetSibling,\n      )\n      shippingW3wComponent.setAttribute('name', 'shipping_w3w')\n  \n      if (W3W_AUTOSUGGEST_SETTINGS.save_nearest_place) {\n        shippingW3wComponent.addEventListener('selected_suggestion', function(e) {\n          const nearestPlace = e.detail.suggestion.nearestPlace\n          $('#shipping_nearest_place').attr('value', nearestPlace)\n        })\n      }\n\n      if (W3W_AUTOSUGGEST_SETTINGS.return_coordinates) {\n        shippingW3wComponent.addEventListener('coordinates_changed', function(e) {\n          const coordinates = e.detail.coordinates\n          $('#shipping_w3w_lat').attr('value', coordinates.lat)\n          $('#shipping_w3w_lng').attr('value', coordinates.lng)\n        })\n      }\n      \n      shippingW3wComponent.appendChild(shippingTarget)\n      shippingTargetParent.insertBefore(shippingW3wComponent, shippingTargetSibling)\n\n      if (\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_country &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_circle &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_bounding_box &&\n        !W3W_AUTOSUGGEST_SETTINGS.enable_clip_to_polygon\n      ) {\n        shippingCountry.on('change', function(e) {\n          $('#w3w-shipping').closest('what3words-autosuggest').attr('clip_to_country', e.target.value)\n        })\n        shippingCountry.trigger('change')\n      }\n    }\n  } else {\n    const targets = document.querySelectorAll(W3W_AUTOSUGGEST_SETTINGS.selector)\n   \n    for (let i = 0; i < targets.length; i++) {\n      const target = targets[i]\n      const targetSibling = target.nextSibling\n      const targetParent = target.parentElement\n      const w3wComponent = createAutosuggestComponent(target, targetParent, targetSibling)\n  \n      w3wComponent.appendChild(target)\n      targetParent.insertBefore(w3wComponent, targetSibling)\n    }\n  }\n\n})( jQuery );\n\n", "<?php\n\n/**\n * The plugin bootstrap file\n *\n * This file is read by WordPress to generate the plugin information in the plugin\n * admin area. This file also includes all of the dependencies used by the plugin,\n * registers the activation and deactivation functions, and defines a function\n * that starts the plugin.\n *\n * @link              https://developer.what3words.com/tutorial/installing-the-wordpress-plugin\n * @since             4.0.0\n * @package           w3w-autosuggest\n *\n * @wordpress-plugin\n * Plugin Name:       what3words Address Field\n * Plugin URI:        https://github.com/what3words/wordpress-autosuggest-plugin\n * Description:       Official plugin to allow customers to enter and validate a what3words address on your checkout for accurate deliveries\n * Version:           4.0.1\n * Author:            what3words\n * Author URI:        https://what3words.com\n * License:           GPL-2.0+\n * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt\n * Text Domain:       what3words-searchbox\n * Domain Path:       /languages\n */\n\n/*\nwhat3words Address Field is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\nany later version.\n\nwhat3words Address Field is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with what3words Address Field. If not, see https://what3words.com.\n*/\n\n// If this file is called directly, abort.\nif ( ! defined( 'WPINC' ) ) {\n\tdie;\n}\n\n/**\n * Plugin base name\n */\nif ( !defined( 'W3W_AUTOSUGGEST_PLUGIN_BASENAME' ) ) {\n  define( 'W3W_AUTOSUGGEST_PLUGIN_BASENAME', plugin_basename( __FILE__ ) );\n}\n/**\n * Current plugin version.\n */\nif ( !defined( 'W3W_PLUGIN_VERSION' ) ) {\n  define( 'W3W_PLUGIN_VERSION', '4.0.1' );\n}\n/**\n * Plugin settings name\n */\nif ( !defined( 'W3W_SETTINGS_NAME' ) ) {\n  define( 'W3W_SETTINGS_NAME', 'w3w_autosuggest_settings' );\n}\n\n/**\n * Defines the JS-library to point to (includes the version of the JS-library)\n */\nif ( !defined( 'W3W_JS_LIB_CDN_URL' ) ) {\n  define ( 'W3W_JS_LIB_CDN_URL', 'https://cdn.what3words.com/javascript-components@4.0.3/dist/what3words' );\n}\n\n/**\n * Defines the internationalisation domain\n */\nif ( !defined( 'W3W_I18N_DOMAIN' ) ) {\n  define ( 'W3W_I18N_DOMAIN', 'what3words' );\n}\n\n/**\n * The URL to the settings page for the w3w_autosuggest\n */\nif ( !defined('W3W_SETTINGS_URL' ) ) {\n  DEFINE( 'W3W_SETTINGS_URL', esc_html( admin_url( 'admin.php?page=what3words' ) ) );\n}\n\n/**\n * The code that runs during plugin activation.\n * This action is documented in includes/class-w3w-autosuggest-activator.php\n */\nif ( !function_exists( 'activate_w3w_autosuggest' ) ) {\n  function activate_w3w_autosuggest() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest-activator.php';\n    W3W_Autosuggest_Activator::activate( W3W_PLUGIN_VERSION, W3W_SETTINGS_NAME );\n  }\n  register_activation_hook( __FILE__, 'activate_w3w_autosuggest' );\n}\n\n/**\n * The code that runs during plugin deactivation.\n * This action is documented in includes/class-w3w-autosuggest-deactivator.php\n */\nif ( !function_exists( 'deactivate_w3w_autosuggest' ) ) {\n  function deactivate_w3w_autosuggest() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest-deactivator.php';\n    W3W_Autosuggest_Deactivator::deactivate();\n  }\n  register_deactivation_hook( __FILE__, 'deactivate_w3w_autosuggest' );\n}\n\n/**\n * The core plugin class that is used to define internationalization,\n * admin-specific hooks, and public-facing site hooks.\n */\nrequire plugin_dir_path( __FILE__ ) . 'includes/class-w3w-autosuggest.php';\n\n/**\n * Begins execution of the plugin.\n *\n * Since everything within the plugin is registered via hooks,\n * then kicking off the plugin from this point in the file does\n * not affect the page life cycle.\n *\n * @since    4.0.0\n */\nfunction run_w3w_autosuggest() {\n\n  $plugin_name = 'w3w-autosuggest';\n\n\t$plugin = new W3W_Autosuggest(\n    $plugin_name,\n    W3W_PLUGIN_VERSION,\n    W3W_AUTOSUGGEST_PLUGIN_BASENAME,\n    W3W_SETTINGS_NAME,\n    W3W_JS_LIB_CDN_URL,\n    W3W_I18N_DOMAIN,\n    W3W_SETTINGS_URL\n  );\n\t$plugin->run();\n\n}\nrun_w3w_autosuggest();\n"], "filenames": [".gitignore", "w3w-autosuggest/CHANGELOG.txt", "w3w-autosuggest/README.txt", "w3w-autosuggest/public/class-w3w-autosuggest-public.php", "w3w-autosuggest/public/js/w3w-autosuggest-public.js", "w3w-autosuggest/w3w-autosuggest.php"], "buggy_code_start_loc": [215, 0, 6, 110, 143, 19], "buggy_code_end_loc": [216, 0, 157, 179, 186, 72], "fixing_code_start_loc": [215, 1, 6, 110, 142, 19], "fixing_code_end_loc": [217, 6, 255, 219, 183, 72], "type": "CWE-200", "message": "A vulnerability has been found in what3words Autosuggest Plugin up to 4.0.0 on WordPress and classified as problematic. Affected by this vulnerability is the function enqueue_scripts of the file w3w-autosuggest/public/class-w3w-autosuggest-public.php of the component Setting Handler. The manipulation leads to information disclosure. The attack can be launched remotely. Upgrading to version 4.0.1 is able to address this issue. The patch is named dd59cbac5f86057d6a73b87007c08b8bfa0c32ac. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-234247.", "other": {"cve": {"id": "CVE-2021-4428", "sourceIdentifier": "cna@vuldb.com", "published": "2023-07-18T17:15:11.140", "lastModified": "2024-02-29T01:33:11.360", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in what3words Autosuggest Plugin up to 4.0.0 on WordPress and classified as problematic. Affected by this vulnerability is the function enqueue_scripts of the file w3w-autosuggest/public/class-w3w-autosuggest-public.php of the component Setting Handler. The manipulation leads to information disclosure. The attack can be launched remotely. Upgrading to version 4.0.1 is able to address this issue. The patch is named dd59cbac5f86057d6a73b87007c08b8bfa0c32ac. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-234247."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:M/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "MULTIPLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.3}, "baseSeverity": "LOW", "exploitabilityScore": 6.4, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:what3words:autosuggest:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "4.0.1", "matchCriteriaId": "C9E99C24-45B5-40D0-AC7B-5DA7A99A5D31"}]}]}], "references": [{"url": "https://github.com/what3words/wordpress-autosuggest-plugin/commit/dd59cbac5f86057d6a73b87007c08b8bfa0c32ac", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/what3words/wordpress-autosuggest-plugin/pull/20", "source": "cna@vuldb.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/what3words/wordpress-autosuggest-plugin/releases/tag/v4.0.1", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.234247", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.234247", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/what3words/wordpress-autosuggest-plugin/commit/dd59cbac5f86057d6a73b87007c08b8bfa0c32ac"}}