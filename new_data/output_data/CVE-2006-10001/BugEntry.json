{"buggy_code": ["<?php\r\n/*\r\nPlugin Name: Subscribe To Comments\r\nVersion: 2.0.7\r\nPlugin URI: http://txfx.net/code/wordpress/subscribe-to-comments/\r\nDescription: Allows readers to recieve notifications of new comments that are posted to an entry.  Based on version 1 from <a href=\"http://scriptygoddess.com/\">Scriptygoddess</a>\r\nAuthor: Mark Jaquith\r\nAuthor URI: http://txfx.net/\r\n*/\r\n\r\n\r\n\r\n/* ================= */\r\n/* Display Functions */\r\n/* ================= */\r\n\r\n/* -------------------------\r\nWhat follows are the functions that display things in your comments form.\r\nFeel free to customize them to your needs\r\n------------------------- */\r\n\r\n/* -------------------------\r\nThis is the code that is inserted into your comment form.  You may modify it, if you wish.\r\n------------------------- */\r\nfunction show_subscription_checkbox ($id='0') {\r\n\tglobal $sg_subscribe;\r\n\tsg_subscribe_start();\r\n\r\n\tif ( $sg_subscribe->checkbox_shown ) return $id;\r\n\tif ( !$email = $sg_subscribe->current_viewer_subscription_status() ) : ?>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n        <input type=\"checkbox\" name=\"subscribe\" id=\"subscribe\" value=\"subscribe\" style=\"width: auto;\" <?php if ($sg_subscribe->default_subscribed) echo 'checked=\"checked\" '; ?>/>\r\n        <label for=\"subscribe\"><?php echo $sg_subscribe->not_subscribed_text; ?></label>\r\n\t</p>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n<?php elseif ( $email == 'admin' && current_user_can('manage_options') ) : ?>\r\n\r\n<?php /* ------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for the author of the post */ ?>\r\n<?php /* ------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n\t<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->author_text); ?>\r\n\t</p>\r\n\r\n<?php else : ?>\r\n\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who ARE subscribed */ ?>\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n\t<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->subscribed_text); ?>\r\n\t</p>\r\n\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n\r\n<?php endif;\r\n\r\n$sg_subscribe->checkbox_shown = true;\r\nreturn $id;\r\n}\r\n\r\n\r\n\r\n/* -------------------------------------------------------------------- */\r\n/* This function outputs a \"subscribe without commenting\" form.         */\r\n/* Place this somewhere within \"the loop\", but NOT within another form  */\r\n/* This is NOT inserted automaticallly... you must place it yourself    */\r\n/* -------------------------------------------------------------------- */\r\nfunction show_manual_subscription_form () {\r\n\tglobal $id, $sg_subscribe, $user_email;\r\n\tsg_subscribe_start();\r\n\t$sg_subscribe->show_errors('solo_subscribe', '<div class=\"solo-subscribe-errors\">', '</div>', __('<strong>Error: </strong>', 'subscribe-to-comments'), '<br />');\r\n\r\nif ( !$sg_subscribe->current_viewer_subscription_status() ) :\r\n\tget_currentuserinfo(); ?>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n\t<form action=\"http://<?php echo $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] ?>\" method=\"post\">\r\n\t<input type=\"hidden\" name=\"solo-comment-subscribe\" value=\"solo-comment-subscribe\" />\r\n\t<input type=\"hidden\" name=\"postid\" value=\"<?php echo $id; ?>\" />\r\n\t<input type=\"hidden\" name=\"ref\" value=\"<?php echo 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; ?>\" />\r\n\r\n\t<p class=\"solo-subscribe-to-comments\">\r\n\t<?php _e('Subscribe without commenting', 'subscribe-to-comments'); ?>\r\n\t<br />\r\n\t<label for=\"solo-subscribe-email\"><?php _e('E-Mail:', 'subscribe-to-comments'); ?>\r\n\t<input type=\"text\" name=\"email\" id=\"solo-subscribe-email\" size=\"22\" value=\"<?php echo $user_email; ?>\" /></label>\r\n\t<input type=\"submit\" name=\"submit\" value=\"<?php _e('Subscribe', 'subscribe-to-comments'); ?>\" />\r\n\t</p>\r\n\t</form>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n<?php endif;\r\n}\r\n\r\n\r\n\r\n/* -------------------------\r\nUse this function on your comments display - to show whether a user is subscribed to comments on the post or not.\r\nNote: this must be used within the comments loop!  It will not work properly outside of it.\r\n------------------------- */\r\nfunction comment_subscription_status() {\r\nglobal $comment;\r\nif ($comment->comment_subscribe == 'Y') {\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ============================= */\r\n/* DO NOT MODIFY BELOW THIS LINE */\r\n/* ============================= */\r\n\r\nclass sg_subscribe_settings\r\n{\r\n\tfunction options_page_contents()\r\n\t{\r\n\t\t/** Commit changed options if posted **/\r\n\t\tif($_SERVER['REQUEST_METHOD'] == 'POST')\r\n\t\t{\r\n\t\t\tupdate_option('sg_subscribe_settings', $_POST['sg_subscribe_settings']);\r\n\t\t}\r\n\t\techo '<h2>Subscribe to Comments Options</h2>';\r\n\t\techo '<ul>';\r\n\r\n\t\techo '<li><label for=\"name\">' . __('\"From\" name for notifications:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"name\" name=\"sg_subscribe_settings[name]\" value=\"' . sg_subscribe_settings::form_setting('name') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"email\">' . __('\"From\" e-mail addresss for notifications:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"email\" name=\"sg_subscribe_settings[email]\" value=\"' . sg_subscribe_settings::form_setting('email') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"default_subscribed\"><input type=\"checkbox\" id=\"default_subscribed\" name=\"sg_subscribe_settings[default_subscribed]\" value=\"default_subscribed\"' . sg_subscribe_settings::checkflag('default_subscribed') . ' /> ' . __('\"Subscribe\" box should be checked by default', 'subscribe-to-comments') . '</label></li>';\r\n\t\techo '<li><label for=\"clear_both\"><input type=\"checkbox\" id=\"clear_both\" name=\"sg_subscribe_settings[clear_both]\" value=\"clear_both\"' . sg_subscribe_settings::checkflag('clear_both') . ' /> ' . __('Do a CSS \"clear\" on the subscription checkbox/message (uncheck this if the checkbox/message appears in a strange location in your theme)', 'subscribe-to-comments') . '</label></li>';\r\n\t\techo '</ul>';\r\n\r\n\t\techo '<fieldset><legend>' . __('Comment Form Text', 'subscribe-to-comments') . '</legend>';\r\n\r\n\t\techo '<p>' . __('Customize the messages shown to different people.  Use <code>[manager_link]</code> to insert the URI to the Subscription Manager.', 'subscribe-to-comments') . '</p>';\r\n\r\n\t\techo '<ul>';\r\n\r\n\t\techo '<li><label for=\"not_subscribed_text\">' . __('Not subscribed', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"not_subscribed_text\" name=\"sg_subscribe_settings[not_subscribed_text]\">' . sg_subscribe_settings::textarea_setting('not_subscribed_text') . '</textarea></li>';\r\n\r\n\t\techo '<li><label for=\"subscribed_text\">' . __('Subscribed', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"subscribed_text\" name=\"sg_subscribe_settings[subscribed_text]\">' . sg_subscribe_settings::textarea_setting('subscribed_text') . '</textarea></li>';\r\n\r\n\t\techo '<li><label for=\"author_text\">' . __('Entry Author', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"author_text\" name=\"sg_subscribe_settings[author_text]\">' . sg_subscribe_settings::textarea_setting('author_text') . '</textarea></li>';\r\n\r\n\t\techo '</ul></fieldset>';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\techo '<fieldset>';\r\n\t\techo '<legend><input type=\"checkbox\" id=\"use_custom_style\" name=\"sg_subscribe_settings[use_custom_style]\" value=\"use_custom_style\"' . sg_subscribe_settings::checkflag('use_custom_style') . ' /> <label for=\"use_custom_style\">' . __('Use custom style for Subscription Manager', 'subscribe-to-comments') . '</label></legend>';\r\n\r\n\t\techo '<p>' . __('These settings only matter if you are using a custom style.  <code>[theme_path]</code> will be replaced with the path to your current theme.', 'subscribe-to-comments') . '</p>';\r\n\r\n\t\techo '<ul>';\r\n\t\techo '<li><label for=\"sg_sub_header\">' . __('Path to header:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_header\" name=\"sg_subscribe_settings[header]\" value=\"' . sg_subscribe_settings::form_setting('header') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"sg_sub_sidebar\">' . __('Path to sidebar:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_sidebar\" name=\"sg_subscribe_settings[sidebar]\" value=\"' . sg_subscribe_settings::form_setting('sidebar') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"sg_sub_footer\">' . __('Path to footer:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_footer\" name=\"sg_subscribe_settings[footer]\" value=\"' . sg_subscribe_settings::form_setting('footer') . '\" /></label></li>';\r\n\r\n\r\n\t\techo '<li><label for=\"before_manager\">' . __('HTML for before the subscription manager:', 'subscribe-to-comments') . ' </label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"before_manager\" name=\"sg_subscribe_settings[before_manager]\">' . sg_subscribe_settings::textarea_setting('before_manager') . '</textarea></li>';\r\n\t\techo '<li><label for=\"after_manager\">' . __('HTML for after the subscription manager:', 'subscribe-to-comments') . ' </label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"after_manager\" name=\"sg_subscribe_settings[after_manager]\">' . sg_subscribe_settings::textarea_setting('after_manager') . '</textarea></li>';\r\n\t\techo '</ul>';\r\n\t\techo '</fieldset>';\r\n\t}\r\n\r\n\tfunction checkflag($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\tif ( $options[$optname] != $optname )\r\n\t\t\treturn;\r\n\t\treturn ' checked=\"checked\"';\r\n\t}\r\n\r\n\tfunction form_setting($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\treturn htmlspecialchars(stripslashes($options[$optname]), ENT_QUOTES);\r\n\t}\r\n\r\n\tfunction textarea_setting($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\treturn htmlspecialchars(stripslashes($options[$optname]));\r\n\t}\r\n\r\n\tfunction options_page() {\r\n\t\t/** Display \"saved\" notification on post **/\r\n\t\tif ( isset($_POST['sg_subscribe_settings_submit']) )\r\n\t\t\techo '<div class=\"updated\"><p><strong>' . __('Options saved.', 'SmallOptions') . '</strong></p></div>';\r\n\r\n\t\techo '<form method=\"post\"><div class=\"wrap\">';\r\n\r\n\t\tsg_subscribe_settings::options_page_contents();\r\n\r\n\t  echo '<p class=\"submit\"><input type=\"submit\" name=\"sg_subscribe_settings_submit\" value=\"';\r\n\t  _e('Update Options &raquo;', 'subscribe-to-comments');\r\n\t  echo '\" /></p></div>';\r\n\t\techo '</form>';\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass sg_subscribe {\r\n\tvar $errors;\r\n\tvar $messages;\r\n\tvar $post_subscriptions;\r\n\tvar $email_subscriptions;\r\n\tvar $subscriber_email;\r\n\tvar $site_email;\r\n\tvar $site_name;\r\n\tvar $standalone;\r\n\tvar $form_action;\r\n\tvar $checkbox_shown;\r\n\tvar $use_wp_style;\r\n\tvar $header;\r\n\tvar $sidebar;\r\n\tvar $footer;\r\n\tvar $clear_both;\r\n\tvar $before_manager;\r\n\tvar $after_manager;\r\n\tvar $email;\r\n\tvar $new_email;\r\n\tvar $ref;\r\n\tvar $key;\r\n\tvar $key_type;\r\n\tvar $action;\r\n\tvar $default_subscribed;\r\n\tvar $not_subscribed_text;\r\n\tvar $subscribed_text;\r\n\tvar $author_text;\r\n\tvar $salt;\r\n\tvar $settings;\r\n\r\n\r\n\tfunction sg_subscribe() {\r\n\t\tglobal $wpdb;\r\n\t\t$this->db_upgrade_check();\r\n\r\n\t\t$this->settings = get_settings('sg_subscribe_settings');\r\n\r\n\t\t$this->salt = $this->settings['salt'];\r\n\t\t$this->site_email = ( is_email($this->settings['email']) && $this->settings['email'] != 'email@example.com' ) ? $this->settings['email'] : get_bloginfo('admin_email');\r\n\t\t$this->site_name = ( $this->settings['name'] != 'YOUR NAME' && !empty($this->settings['name']) ) ? stripslashes($this->settings['name']) : get_bloginfo('name');\r\n\t\t$this->default_subscribed = ($this->settings['default_subscribed']) ? true : false;\r\n\r\n\t\t$this->not_subscribed_text = stripslashes($this->settings['not_subscribed_text']);\r\n\t\t$this->subscribed_text = stripslashes($this->settings['subscribed_text']);\r\n\t\t$this->author_text = stripslashes($this->settings['author_text']);\r\n\t\t$this->clear_both = $this->settings['clear_both'];\r\n\r\n\t\t$this->errors = '';\r\n\t\t$this->post_subscriptions = '';\r\n\t\t$this->email_subscriptions = '';\r\n\t}\r\n\r\n\r\n\tfunction manager_init() {\r\n\t\t$this->messages = '';\r\n\t\t$this->use_wp_style = ( $this->settings['use_custom_style'] == 'use_custom_style' ) ? false : true;\r\n\t\tif ( !$this->use_wp_style ) {\r\n\t\t\t$this->header = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['header']));\r\n\t\t\t$this->sidebar = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['sidebar']));\r\n\t\t\t$this->footer = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['footer']));\r\n\t\t\t$this->before_manager = stripslashes($this->settings['before_manager']);\r\n\t\t\t$this->after_manager = stripslashes($this->settings['after_manager']);\r\n\t\t}\r\n\r\n\t\tforeach (array('email', 'key', 'ref', 'new_email') as $var) {\r\n\t\t\tif ( isset($_REQUEST[$var]) && !empty($_REQUEST[$var]) )\r\n\t\t\t\t$this->{$var} = trim($_REQUEST[$var]);\r\n\t\t}\r\n\t\tif ( !$this->key )\r\n\t\t\t$this->key = 'unset';\r\n\t}\r\n\r\n\r\n\tfunction add_error($text='generic error', $type='manager') {\r\n\t\t$this->errors[$type][] = $text;\r\n\t}\r\n\r\n\r\n\tfunction show_errors($type='manager', $before_all='<div class=\"updated updated-error\">', $after_all='</div>', $before_each='<p>', $after_each='</p>'){\r\n\t\tif ( is_array($this->errors[$type]) ) {\r\n\t\t\techo $before_all;\r\n\t\t\tforeach ($this->errors[$type] as $error)\r\n\t\t\t\techo $before_each . $error . $after_each;\r\n\t\t\techo $after_all;\r\n\t\t}\r\n\t\tunset($this->errors);\r\n\t}\r\n\r\n\r\n\tfunction add_message($text) {\r\n\t\t$this->messages[] = $text;\r\n\t}\r\n\r\n\r\n\tfunction show_messages($before_all='', $after_all='', $before_each='<div class=\"updated\"><p>', $after_each='</p></div>'){\r\n\t\tif ( is_array($this->messages) ) {\r\n\t\t\techo $before_all;\r\n\t\t\tforeach ($this->messages as $message)\r\n\t\t\t\techo $before_each . $message . $after_each;\r\n\t\t\techo $after_all;\r\n\t\t}\r\n\t\tunset($this->messages);\r\n\t}\r\n\r\n\r\n\tfunction subscriptions_from_post($postid) {\r\n\t\tif ( is_array($this->post_subscriptions) ) return $this->post_subscriptions;\r\n\t\tglobal $wpdb;\r\n\t\t$postid = (int) $postid;\r\n\t\t$this->post_subscriptions = $wpdb->get_results(\"SELECT comment_author_email FROM $wpdb->comments WHERE comment_post_ID = '$postid' AND comment_subscribe='Y' AND comment_author_email != '' AND comment_approved = '1' GROUP BY LCASE(comment_author_email)\");\r\n\t\t$subscribed_without_comment = get_post_meta($postid, '_sg_subscribe-to-comments');\r\n\t\tif ( is_array($subscribed_without_comment) ) {\r\n\t\t\tforeach ( $subscribed_without_comment as $email )\r\n\t\t\t\t$this->post_subscriptions[]->comment_author_email = $email;\r\n\t\t}\r\n\t\treturn $this->post_subscriptions;\r\n\t}\r\n\r\n\r\n\tfunction subscriptions_from_email($email='') {\r\n\t\tif ( is_array($this->email_subscriptions) )\r\n\t\t\treturn $this->email_subscriptions;\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = $wpdb->escape(strtolower($email));\r\n\t\t$i = 0;\r\n\t\t$subscriptions = $wpdb->get_results(\"SELECT comment_post_ID FROM $wpdb->comments WHERE LCASE(comment_author_email) = '$email' AND comment_subscribe='Y' AND comment_approved = '1' GROUP BY comment_post_ID\");\r\n\t\tif ( is_array($subscriptions) ) {\r\n\t\t\tforeach ( $subscriptions as $subscription ) {\r\n\t\t\t\t$this->email_subscriptions[$i] = $subscription->comment_post_ID;\r\n\t\t\t\t$i++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$subscriptions = $wpdb->get_results(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_sg_subscribe-to-comments' AND LCASE(meta_value) = '$email' GROUP BY post_id\");\r\n\t\tif ( is_array($subscriptions) ) {\r\n\t\tforeach ($subscriptions as $subscription) {\r\n\t\t\t$this->email_subscriptions[$i] = $subscription->post_id;\r\n\t\t\t$i++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $i > 0 ) {\r\n\t\t\tsort($this->email_subscriptions, SORT_NUMERIC);\r\n\t\t\treturn $this->email_subscriptions;\r\n\t\t}\r\n\t\t// no subscriptions\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction solo_subscribe ($email, $postid) {\r\n\t\tglobal $wpdb, $cache_userdata, $user_email;\r\n\t\t$postid = (int) $postid;\r\n\t\t$email = strtolower($email);\r\n\t\tif ( !is_email($email) ) {\r\n\t\t\tget_currentuserinfo();\r\n\t\t\tif ( is_email($user_email) )\r\n\t\t\t\t$email = strtolower($user_email);\r\n\t\t\telse\r\n\t\t\t\t$this->add_error(__('Please provide a valid e-mail address.', 'subscribe-to-comments'),'solo_subscribe');\r\n\t\t}\r\n\r\n\t\tif ( ( $email == $this->site_email && is_email($this->site_email) ) || ( $email == get_settings('admin_email') && is_email(get_settings('admin_email')) ) )\r\n\t\t\t$this->add_error(__('This e-mail address may not be subscribed', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( is_array($this->subscriptions_from_email($email)) )\r\n\t\t\tif (in_array($postid, $this->subscriptions_from_email($email))) {\r\n\t\t\t\t// already subscribed\r\n\t\t\t\tsetcookie('comment_author_email_' . COOKIEHASH, stripslashes($email), time() + 30000000, COOKIEPATH);\r\n\t\t\t\t$this->add_error(__('You appear to be already subscribed to this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\t\t\t\t}\r\n\t\t$email = $wpdb->escape($email);\r\n\t\t$post = $wpdb->get_row(\"SELECT * FROM $wpdb->posts WHERE ID = '$postid' AND comment_status <> 'closed' AND ( post_status = 'static' OR post_status = 'publish')  LIMIT 1\");\r\n\r\n\t\tif ( !$post )\r\n\t\t\t$this->add_error(__('Comments are not allowed on this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( empty($cache_userdata[$post->post_author]) && $post->post_author != 0) {\r\n\t\t\t$cache_userdata[$post->post_author] = $wpdb->get_row(\"SELECT * FROM $wpdb->users WHERE ID = $post->post_author\");\r\n\t\t\t$cache_userdata[$cache_userdata[$post->post_author]->user_login] =& $cache_userdata[$post->post_author];\r\n\t\t}\r\n\r\n\t\t$post_author = $cache_userdata[$post->post_author];\r\n\r\n\t\tif ( strtolower($post_author->user_email) == stripslashes($email) )\r\n\t\t\t$this->add_error(__('You appear to be already subscribed to this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( !is_array($this->errors['solo_subscribe']) ) {\r\n\t\t\tadd_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email));\r\n\t\t\tsetcookie('comment_author_email_' . COOKIEHASH, stripslashes($email), time() + 30000000, COOKIEPATH);\r\n\t\t\t$location = $this->manage_link(stripslashes($email), false, false) . '&subscribeid=' . $postid;\r\n\t\t\theader(\"Location: $location\");\r\n\t\t\texit();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction add_subscriber($cid) {\r\n\t\tglobal $wpdb;\r\n\t\t$id = (int) $id;\r\n    \t$email = $wpdb->escape(strtolower($wpdb->get_var(\"SELECT comment_author_email FROM $wpdb->comments WHERE comment_ID = '$cid'\")));\r\n\t\t$postid = $wpdb->get_var(\"SELECT comment_post_ID from $wpdb->comments WHERE comment_ID = '$cid'\");\r\n\r\n\t\t$previously_subscribed = ( $wpdb->get_var(\"SELECT comment_subscribe from $wpdb->comments WHERE comment_post_ID = '$postid' AND LCASE(comment_author_email) = '$email' AND comment_subscribe = 'Y' LIMIT 1\") || in_array(stripslashes($email), get_post_meta($postid, '_sg_subscribe-to-comments')) ) ? true : false;\r\n\r\n\t\t// If user wants to be notified or has previously subscribed, set the flag on this current comment\r\n\t\tif (($_POST['subscribe'] == 'subscribe' && is_email($email)) || $previously_subscribed) {\r\n\t\t\tdelete_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email));\r\n\t\t\t$wpdb->query(\"UPDATE $wpdb->comments SET comment_subscribe = 'Y' where comment_post_ID = '$postid' AND LCASE(comment_author_email) = '$email'\");\r\n\t\t}\r\n\t\treturn $cid;\r\n\t}\r\n\r\n\r\n\tfunction is_blocked($email='') {\r\n\t\tglobal $wpdb;\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tif ( empty($email) )\r\n\t\t\treturn false;\r\n\t\t$email = strtolower($email);\r\n\t\t// add the option if it doesn't exist\r\n\t\tadd_option('do_not_mail', '');\r\n\t\t$blocked = explode (' ', get_settings('do_not_mail'));\r\n\t\tif ( in_array($email, $blocked) )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction add_block($email='') {\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = strtolower($email);\r\n\r\n\t\t// add the option if it doesn't exist\r\n\t\tadd_option('do_not_mail', '');\r\n\r\n\t\t// check to make sure this email isn't already in there\r\n\t\tif ( !$this->is_blocked($email) ) {\r\n\t\t\t// email hasn't already been added - so add it\r\n\t\t\t$blocked = get_settings('do_not_mail') . ' ' . $email;\r\n\t\t\tupdate_option('do_not_mail', $blocked);\r\n\t\t\treturn true;\r\n\t\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction remove_block($email='') {\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = strtolower($email);\r\n\r\n\t\tif ( $this->is_blocked($email) ) {\r\n\t\t\t// e-mail is in the list - so remove it\r\n\t\t\t$blocked = str_replace (' ' . $email, '', explode (' ', get_settings('do_not_mail')));\r\n\t\t\tupdate_option('do_not_mail', $blocked);\r\n\t\t\treturn true;\r\n\t\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction has_subscribers() {\r\n\t\tif ( count($this->get_unique_subscribers()) > 0 )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction get_unique_subscribers() {\r\n\t\tglobal $comments, $comment, $sg_subscribers;\r\n\t\tif ( isset($sg_subscribers) )\r\n\t\t\treturn $sg_subscribers;\r\n\r\n\t\t$sg_subscribers = array();\r\n\t\t$subscriber_emails = array();\r\n\r\n\t\t// We run the comment loop, and put each unique subscriber into a new array\r\n\t\tforeach ( $comments as $comment ) {\r\n\t\t\tif ( comment_subscription_status() && !in_array($comment->comment_author_email, $subscriber_emails) ) {\r\n\t\t\t\t$sg_subscribers[] = $comment;\r\n\t\t\t\t$subscriber_emails[] = $comment->comment_author_email;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $sg_subscribers;\r\n\t}\r\n\r\n\r\n\tfunction hidden_form_fields() { ?>\r\n\t\t<input type=\"hidden\" name=\"ref\" value=\"<?php echo $this->ref; ?>\" />\r\n\t\t<input type=\"hidden\" name=\"key\" value=\"<?php echo $this->key; ?>\" />\r\n\t\t<input type=\"hidden\" name=\"email\" value=\"<?php echo $this->email; ?>\" />\r\n\t<?php\r\n\t}\r\n\r\n\r\n\tfunction generate_key($data='') {\r\n\t\tif ( '' == $data )\r\n\t\t\treturn false;\r\n\t\tif ( !$this->settings['salt'] )\r\n\t\t\tdie('fatal error: corrupted salt');\r\n\t\treturn md5(md5($this->settings['salt'] . $data));\r\n\t}\r\n\r\n\r\n\tfunction validate_key() {\r\n\t\tif ( $this->key == $this->generate_key($this->email) )\r\n\t\t\t$this->key_type = 'normal';\r\n\t\telseif ( $this->key == $this->generate_key($this->email . $this->new_email) )\r\n\t\t\t$this->key_type = 'change_email';\r\n\t\telseif ( $this->key == $this->generate_key($this->email . 'blockrequest') )\r\n\t\t\t$this->key_type = 'block';\r\n\t\telseif ( current_user_can('manage_options') )\r\n\t\t\t$this->key_type = 'admin';\r\n\t\telse\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction determine_action() {\r\n\t\t// rather than check it a bunch of times\r\n\t\t$is_email = is_email($this->email);\r\n\r\n\t\tif ( is_email($this->new_email) && $is_email && $this->key_type == 'change_email' )\r\n\t\t\t$this->action = 'change_email';\r\n\t\telseif ( isset($_POST['removesubscrips']) && $is_email )\r\n\t\t\t$this->action = 'remove_subscriptions';\r\n\t\telseif ( isset($_POST['removeBlock']) && $is_email && current_user_can('manage_options') )\r\n\t\t\t$this->action = 'remove_block';\r\n\t\telseif ( isset($_POST['changeemailrequest']) && $is_email && is_email($this->new_email) )\r\n\t\t\t$this->action = 'email_change_request';\r\n\t\telseif ( $is_email && isset($_POST['blockemail']) )\r\n\t\t\t$this->action = 'block_request';\r\n\t\telseif ( isset($_GET['subscribeid']) )\r\n\t\t\t$this->action = 'solo_subscribe';\r\n\t\telseif ( $is_email && isset($_GET['blockemailconfirm']) && $this->key == $this->generate_key($this->email . 'blockrequest') )\r\n\t\t\t$this->action = 'block';\r\n\t\telse\r\n\t\t\t$this->action = 'none';\r\n\t}\r\n\r\n\r\n\tfunction remove_subscriber($email, $postid) {\r\n\t\tglobal $wpdb;\r\n\t\t$postid = (int) $postid;\r\n\t\t$email = $wpdb->escape(strtolower($email));\r\n\r\n\t\tif ( delete_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email)) || $wpdb->query(\"UPDATE $wpdb->comments SET comment_subscribe = 'N' WHERE comment_post_ID  = '$postid' AND LCASE(comment_author_email) ='$email'\") )\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\tfunction remove_subscriptions ($postids) {\r\n\t\tglobal $wpdb;\r\n\t\t$removed = 0;\r\n\t\tfor ($i = 0; $i < count($postids); $i++) {\r\n\t\t\tif ( $this->remove_subscriber($this->email, $postids[$i]) )\r\n\t\t\t\t$removed++;\r\n\t\t}\r\n\t\treturn $removed;\r\n\t}\r\n\r\n\r\n\tfunction send_notifications($cid) {\r\n\t\tglobal $wpdb;\r\n\t\t$cid = (int) $cid;\r\n\t\t$comment = $wpdb->get_row(\"SELECT * FROM $wpdb->comments WHERE comment_ID='$cid' LIMIT 1\");\r\n\t\t$post = $wpdb->get_row(\"SELECT * FROM $wpdb->posts WHERE ID='$comment->comment_post_ID' LIMIT 1\");\r\n\r\n\t\tif ( $comment->comment_approved == '1' && $comment->comment_type == '' ) {\r\n\t\t\t// Comment has been approved and isn't a trackback or a pingback, so we should send out notifications\r\n\r\n\t\t\t$message  = sprintf(__(\"There is a new comment on the post \\\"%s\\\"\", 'subscribe-to-comments') . \". \\n%s\\n\\n\", stripslashes($post->post_title), get_permalink($comment->comment_post_ID));\r\n\t\t\t$message .= sprintf(__(\"Author: %s\\n\", 'subscribe-to-comments'), $comment->comment_author);\r\n\t\t\t$message .= __(\"Comment:\\n\", 'subscribe-to-comments') . stripslashes($comment->comment_content) . \"\\n\\n\";\r\n\t\t\t$message .= __(\"See all comments on this post here:\\n\", 'subscribe-to-comments');\r\n\t\t\t$message .= get_permalink($comment->comment_post_ID) . \"#comments\\n\\n\";\r\n\t\t\t//add link to manage comment notifications\r\n\t\t\t$message .= __(\"To manage your subscriptions or to block all notifications from this site, click the link below:\\n\", 'subscribe-to-comments');\r\n\t\t\t$message .= get_settings('siteurl').\"/wp-subscription-manager.php?email=[email]&key=[key]\";\r\n\r\n\t\t\t$subject = sprintf(__('New Comment On: %s', 'subscribe-to-comments'), stripslashes($post->post_title));\r\n\r\n\t\t\t$subscriptions = $this->subscriptions_from_post($comment->comment_post_ID);\r\n\t\t\tif ( is_array($subscriptions) ) {\r\n\t\t\t\tforeach ( $subscriptions as $email ) {\r\n\t\t\t\t\tif ( !$this->is_blocked($email->comment_author_email) && $email->comment_author_email != $comment->comment_author_email && is_email($email->comment_author_email) ) {\r\n\t\t\t\t\t        $message_final = str_replace('[email]', urlencode($email->comment_author_email), $message);\r\n\t\t\t\t\t        $message_final = str_replace('[key]', $this->generate_key($email->comment_author_email), $message_final);\r\n\t\t\t\t\t\t$this->send_mail($email->comment_author_email, $subject, $message_final);\r\n\t\t\t\t\t}\r\n\t\t\t\t} // foreach subscription\r\n\t\t\t} // if subscriptions\r\n\t\t} // end if comment approved\r\n\t\treturn $cid;\r\n\t}\r\n\r\n\r\n\tfunction change_email_request() {\r\n\t\tif ( $this->is_blocked() )\r\n\t\t\treturn false;\r\n\r\n\t\t$subject = __('E-mail change confirmation', 'subscribe-to-comments');\r\n\t\t$message = sprintf(__(\"You are receiving this message to confirm a change of e-mail address for your subscriptions at \\\"%s\\\"\\n\\n\", 'subscribe-to-comments'), get_bloginfo('blogname'));\r\n\t\t$message .= sprintf(__(\"To change your e-mail address to %s, click this link:\\n\\n\", 'subscribe-to-comments'), $this->new_email);\r\n\t\t$message .= get_bloginfo('wpurl') . \"/wp-subscription-manager.php?email=\" . $this->email . \"&new_email=\" . $this->new_email . \"&key=\" . $this->generate_key($this->email . $this->new_email) . \".\\n\\n\";\r\n\t\t$message .= __('If you did not request this action, please disregard this message.', 'subscribe-to-comments');\r\n\t\treturn $this->send_mail($this->email, $subject, $message);\r\n\t}\r\n\r\n\r\n\tfunction block_email_request($email) {\r\n\t\tif ( $this->is_blocked($email) )\r\n\t\t\treturn false;\r\n\t\t$subject = __('E-mail block confirmation', 'subscribe-to-comments');\r\n\t\t$message = sprintf(__(\"You are receiving this message to confirm that you no longer wish to receive e-mail comment notifications from \\\"%s\\\"\\n\\n\", 'subscribe-to-comments'), get_bloginfo('name'));\r\n\t\t$message .= __(\"To cancel all future notifications for this address, click this link:\\n\\n\", 'subscribe-to-comments');\r\n\t\t$message .= get_bloginfo('wpurl') . \"/wp-subscription-manager.php?email=\" . $email . \"&key=\" . $this->generate_key($email . 'blockrequest') . \"&blockemailconfirm=true\" . \".\\n\\n\";\r\n\t\t$message .= __(\"If you did not request this action, please disregard this message.\", 'subscribe-to-comments');\r\n\t\treturn $this->send_mail($email, $subject, $message);\r\n\t}\r\n\r\n\r\n\tfunction send_mail($to, $subject, $message) {\r\n\t\t$subject = '[' . get_bloginfo('name') . '] ' . $subject;\r\n\t\t$headers  = \"From: \".$this->site_name.\" <\".$this->site_email.\">\\n\";\r\n\t\t$headers .= \"MIME-Version: 1.0\\n\" . \"Content-Type: text/plain; charset=\\\"\" . get_settings('blog_charset') . \"\\\"\\n\";\r\n\t\treturn wp_mail($to, $subject, $message, $headers);\r\n\t}\r\n\r\n\r\n\tfunction change_email() {\r\n\t\tglobal $wpdb;\r\n\t\t$new_email = $wpdb->escape(strtolower($this->new_email));\r\n\t\t$email = $wpdb->escape(strtolower($this->email));\r\n\t\tif ( $wpdb->query(\"UPDATE $wpdb->comments SET comment_author_email = '$new_email' WHERE comment_author_email = '$email'\") )\r\n\t\t\t$return = true;\r\n\t\tif ( $wpdb->query(\"UPDATE $wpdb->postmeta SET meta_value = '$new_email' WHERE meta_value = '$email' AND meta_key = '_sg_subscribe-to-comments'\") )\r\n\t\t\t$return = true;\r\n\r\n\t\treturn $return;\r\n\t}\r\n\r\n\r\n\tfunction entry_link($postid, $uri='') {\r\n\t\tif ( empty($uri) )\r\n\t\t\t$uri = get_permalink($postid);\r\n\t\t$postid = (int) $postid;\r\n\t\t$title = get_the_title($postid);\r\n\t\tif ( empty($title) )\r\n\t\t\t$title = __('click here', 'subscribe-to-comments');\r\n\t\t$output = '<a href=\"'.$uri.'\">'.$title.'</a>';\r\n\t\treturn $output;\r\n\t}\r\n\r\n\r\n\tfunction sg_wp_head() { ?>\r\n\t\t<style type=\"text/css\" media=\"screen\">\r\n\t\t.updated-error {\r\n\t\t\tbackground-color: #FF8080;\r\n\t\t\tborder: 1px solid #F00;\r\n\t\t}\r\n\t\t</style>\r\n\t\t<?php\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction db_upgrade_check () {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t// add the options\r\n\t\tadd_option('sg_subscribe_settings', array('use_custom_style' => '', 'email' => get_bloginfo('admin_email'), 'name' => get_bloginfo('name'), 'header' => '[theme_path]/header.php', 'sidebar' => '', 'footer' => '[theme_path]/footer.php', 'before_manager' => '<div id=\"content\" class=\"widecolumn subscription-manager\">', 'after_manager' => '</div>', 'default_subscribed' => '', 'not_subscribed_text' => __('Notify me of followup comments via e-mail', 'subscribe-to-comments'), 'subscribed_text' => __('You are subscribed to this entry.  <a href=\"[manager_link]\">Manage your subscriptions</a>.', 'subscribe-to-comments'), 'author_text' => __('You are the author of this entry.  <a href=\"[manager_link]\">Manage subscriptions</a>.', 'subscribe-to-comments')));\r\n\r\n\t\t$settings = get_option('sg_subscribe_settings');\r\n\r\n\t\tif ( !$settings['salt'] ) {\r\n\t\t\t$settings['salt'] = md5(md5(uniqid(rand() . rand() . rand() . rand() . rand(), true))); // random MD5 hash\r\n\t\t\t$update = true;\r\n\t\t}\r\n\r\n\t\tif ( !$settings['clear_both'] ) {\r\n\t\t\t$settings['clear_both'] = 'clear_both';\r\n\t\t\t$update = true;\r\n\t\t}\r\n\r\n\t\tif ( $update )\r\n\t\t\tupdate_option('sg_subscribe_settings', $settings);\r\n\r\n\t\t$column_name = 'comment_subscribe';\r\n\t\tforeach ($wpdb->get_col(\"DESC $wpdb->comments\", 0) as $column )\r\n\t\t\tif ($column == $column_name)\r\n\t\t\t\treturn true;\r\n\r\n\t\t// didn't find it... create it\r\n\t\t$wpdb->query(\"ALTER TABLE $wpdb->comments ADD COLUMN comment_subscribe enum('Y','N') NOT NULL default 'N'\");\r\n\t}\r\n\r\n\r\n\tfunction current_viewer_subscription_status(){\r\n\t\tglobal $wpdb, $post, $user_email;\r\n\r\n\t\t$comment_author_email = ( isset($_COOKIE['comment_author_email_'. COOKIEHASH]) ) ? trim($_COOKIE['comment_author_email_'. COOKIEHASH]) : '';\r\n\t\tget_currentuserinfo();\r\n\r\n\t\tif ( is_email($user_email) ) {\r\n\t\t\t$email = strtolower($user_email);\r\n\t\t\t$loggedin = true;\r\n\t\t} elseif ( is_email($comment_author_email) ) {\r\n\t\t\t$email = strtolower($comment_author_email);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$post_author = get_userdata($post->post_author);\r\n\t\tif ( strtolower($post_author->user_email) == $email && $loggedin )\r\n\t\t\treturn 'admin';\r\n\r\n\r\n\t\tif ( is_array($this->subscriptions_from_email($email)) )\r\n\t\t\tif ( in_array($post->ID, $this->email_subscriptions) ) return $email;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction manage_link($email='', $html=true, $echo=true) {\r\n\t\t$link  = get_bloginfo('wpurl') . '/wp-subscription-manager.php';\r\n\t\tif ( $email != 'admin' ) {\r\n\t\t\t$link = add_query_arg('email', urlencode($email), $link);\r\n\t\t\t$link = add_query_arg('key', $this->generate_key($email), $link);\r\n\t\t}\r\n\t\t$link = add_query_arg('ref', urlencode('http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']), $link);\r\n\t\tif ( $html )\r\n\t\t\t$link = htmlentities($link);\r\n\t\tif ( !$echo )\r\n\t\t\treturn $link;\r\n\t\techo $link;\r\n\t}\r\n\r\n\r\n\tfunction add_admin_menu() {\r\n\t\tadd_management_page(__('Comment Subscription Manager', 'subscribe-to-comments'), __('Subscriptions', 'subscribe-to-comments'), 8, __FILE__, 'sg_subscribe_admin');\r\n\r\n\t\tif ( class_exists('SmallOptions') )\r\n\t\t\tadd_action('small_options_page', array('sg_subscribe_settings', 'options_page_contents'));\r\n\t\telse\r\n\t\t\tadd_options_page(__('Subscribe to Comments', 'subscribe-to-comments'), __('Subscribe to Comments', 'subscribe-to-comments'), 5, basename(__FILE__), array('sg_subscribe_settings', 'options_page'));\r\n\t}\r\n\r\n\r\n} // class sg_subscribe\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction sg_subscribe_start() {\r\n\tglobal $sg_subscribe;\r\n\r\n\tif ( !$sg_subscribe ) {\r\n\t\tload_plugin_textdomain('subscribe-to-comments');\r\n\t\t$sg_subscribe = new sg_subscribe();\r\n\t}\r\n}\r\n\r\nfunction sg_subscribe_admin() {\r\n\tinclude (ABSPATH . 'wp-subscription-manager.php');\r\n}\r\n\r\n\r\n// This will be overridden if the user manually places the function\r\n// in the comments form before the comment_form do_action() call\r\nadd_action('comment_form', 'show_subscription_checkbox');\r\n\r\n// priority is very low (50) because we want to let anti-spam plugins have their way first.\r\nadd_action('comment_post', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->send_notifications($a);'), 50);\r\nadd_action('comment_post', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->add_subscriber($a);'));\r\n\r\nadd_action('wp_set_comment_status', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->send_notifications($a);'));\r\nadd_action('admin_menu', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); $sg_subscribe->add_admin_menu();'));\r\nadd_action('admin_head', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); $sg_subscribe->sg_wp_head();'));\r\n\r\n\r\n\r\n// detect \"subscribe without commenting\" attempts\r\nadd_action('init', create_function('$a','global $sg_subscribe; if ( $_POST[\\'solo-comment-subscribe\\'] == \\'solo-comment-subscribe\\' && is_numeric($_POST[\\'postid\\']) ) {\r\n\tsg_subscribe_start();\r\n\t$sg_subscribe->solo_subscribe($_POST[\\'email\\'], $_POST[\\'postid\\']);\r\n}')\r\n);\r\n?>"], "fixing_code": ["<?php\r\n/*\r\nPlugin Name: Subscribe To Comments\r\nVersion: 2.0.8\r\nPlugin URI: http://txfx.net/code/wordpress/subscribe-to-comments/\r\nDescription: Allows readers to recieve notifications of new comments that are posted to an entry.  Based on version 1 from <a href=\"http://scriptygoddess.com/\">Scriptygoddess</a>\r\nAuthor: Mark Jaquith\r\nAuthor URI: http://txfx.net/\r\n*/\r\n\r\n\r\n\r\n/* ================= */\r\n/* Display Functions */\r\n/* ================= */\r\n\r\n/* -------------------------\r\nWhat follows are the functions that display things in your comments form.\r\nFeel free to customize them to your needs\r\n------------------------- */\r\n\r\n/* -------------------------\r\nThis is the code that is inserted into your comment form.  You may modify it, if you wish.\r\n------------------------- */\r\nfunction show_subscription_checkbox ($id='0') {\r\n\tglobal $sg_subscribe;\r\n\tsg_subscribe_start();\r\n\r\n\tif ( $sg_subscribe->checkbox_shown ) return $id;\r\n\tif ( !$email = $sg_subscribe->current_viewer_subscription_status() ) : ?>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n        <input type=\"checkbox\" name=\"subscribe\" id=\"subscribe\" value=\"subscribe\" style=\"width: auto;\" <?php if ($sg_subscribe->default_subscribed) echo 'checked=\"checked\" '; ?>/>\r\n        <label for=\"subscribe\"><?php echo $sg_subscribe->not_subscribed_text; ?></label>\r\n\t</p>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n<?php elseif ( $email == 'admin' && current_user_can('manage_options') ) : ?>\r\n\r\n<?php /* ------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for the author of the post */ ?>\r\n<?php /* ------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n\t<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->author_text); ?>\r\n\t</p>\r\n\r\n<?php else : ?>\r\n\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who ARE subscribed */ ?>\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n\r\n\t<p <?php if ($sg_subscribe->clear_both) echo 'style=\"clear: both;\" '; ?>class=\"subscribe-to-comments\">\r\n\t<?php echo str_replace('[manager_link]', $sg_subscribe->manage_link($email, true, false), $sg_subscribe->subscribed_text); ?>\r\n\t</p>\r\n\r\n<?php /* --------------------------------------------------------------- */ ?>\r\n\r\n<?php endif;\r\n\r\n$sg_subscribe->checkbox_shown = true;\r\nreturn $id;\r\n}\r\n\r\n\r\n\r\n/* -------------------------------------------------------------------- */\r\n/* This function outputs a \"subscribe without commenting\" form.         */\r\n/* Place this somewhere within \"the loop\", but NOT within another form  */\r\n/* This is NOT inserted automaticallly... you must place it yourself    */\r\n/* -------------------------------------------------------------------- */\r\nfunction show_manual_subscription_form () {\r\n\tglobal $id, $sg_subscribe, $user_email;\r\n\tsg_subscribe_start();\r\n\t$sg_subscribe->show_errors('solo_subscribe', '<div class=\"solo-subscribe-errors\">', '</div>', __('<strong>Error: </strong>', 'subscribe-to-comments'), '<br />');\r\n\r\nif ( !$sg_subscribe->current_viewer_subscription_status() ) :\r\n\tget_currentuserinfo(); ?>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n<?php /* This is the text that is displayed for users who are NOT subscribed */ ?>\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n\t<form action=\"http://<?php echo $_SERVER['HTTP_HOST'] . wp_specialchars($_SERVER['REQUEST_URI']); ?>\" method=\"post\">\r\n\t<input type=\"hidden\" name=\"solo-comment-subscribe\" value=\"solo-comment-subscribe\" />\r\n\t<input type=\"hidden\" name=\"postid\" value=\"<?php echo $id; ?>\" />\r\n\t<input type=\"hidden\" name=\"ref\" value=\"<?php echo urlencode('http://' . $_SERVER['HTTP_HOST'] . wp_specialchars($_SERVER['REQUEST_URI'])); ?>\" />\r\n\r\n\t<p class=\"solo-subscribe-to-comments\">\r\n\t<?php _e('Subscribe without commenting', 'subscribe-to-comments'); ?>\r\n\t<br />\r\n\t<label for=\"solo-subscribe-email\"><?php _e('E-Mail:', 'subscribe-to-comments'); ?>\r\n\t<input type=\"text\" name=\"email\" id=\"solo-subscribe-email\" size=\"22\" value=\"<?php echo $user_email; ?>\" /></label>\r\n\t<input type=\"submit\" name=\"submit\" value=\"<?php _e('Subscribe', 'subscribe-to-comments'); ?>\" />\r\n\t</p>\r\n\t</form>\r\n\r\n<?php /* ------------------------------------------------------------------- */ ?>\r\n\r\n<?php endif;\r\n}\r\n\r\n\r\n\r\n/* -------------------------\r\nUse this function on your comments display - to show whether a user is subscribed to comments on the post or not.\r\nNote: this must be used within the comments loop!  It will not work properly outside of it.\r\n------------------------- */\r\nfunction comment_subscription_status() {\r\nglobal $comment;\r\nif ($comment->comment_subscribe == 'Y') {\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ============================= */\r\n/* DO NOT MODIFY BELOW THIS LINE */\r\n/* ============================= */\r\n\r\nclass sg_subscribe_settings\r\n{\r\n\tfunction options_page_contents()\r\n\t{\r\n\t\t/** Commit changed options if posted **/\r\n\t\tif($_SERVER['REQUEST_METHOD'] == 'POST')\r\n\t\t{\r\n\t\t\tupdate_option('sg_subscribe_settings', $_POST['sg_subscribe_settings']);\r\n\t\t}\r\n\t\techo '<h2>Subscribe to Comments Options</h2>';\r\n\t\techo '<ul>';\r\n\r\n\t\techo '<li><label for=\"name\">' . __('\"From\" name for notifications:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"name\" name=\"sg_subscribe_settings[name]\" value=\"' . sg_subscribe_settings::form_setting('name') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"email\">' . __('\"From\" e-mail addresss for notifications:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"email\" name=\"sg_subscribe_settings[email]\" value=\"' . sg_subscribe_settings::form_setting('email') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"default_subscribed\"><input type=\"checkbox\" id=\"default_subscribed\" name=\"sg_subscribe_settings[default_subscribed]\" value=\"default_subscribed\"' . sg_subscribe_settings::checkflag('default_subscribed') . ' /> ' . __('\"Subscribe\" box should be checked by default', 'subscribe-to-comments') . '</label></li>';\r\n\t\techo '<li><label for=\"clear_both\"><input type=\"checkbox\" id=\"clear_both\" name=\"sg_subscribe_settings[clear_both]\" value=\"clear_both\"' . sg_subscribe_settings::checkflag('clear_both') . ' /> ' . __('Do a CSS \"clear\" on the subscription checkbox/message (uncheck this if the checkbox/message appears in a strange location in your theme)', 'subscribe-to-comments') . '</label></li>';\r\n\t\techo '</ul>';\r\n\r\n\t\techo '<fieldset><legend>' . __('Comment Form Text', 'subscribe-to-comments') . '</legend>';\r\n\r\n\t\techo '<p>' . __('Customize the messages shown to different people.  Use <code>[manager_link]</code> to insert the URI to the Subscription Manager.', 'subscribe-to-comments') . '</p>';\r\n\r\n\t\techo '<ul>';\r\n\r\n\t\techo '<li><label for=\"not_subscribed_text\">' . __('Not subscribed', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"not_subscribed_text\" name=\"sg_subscribe_settings[not_subscribed_text]\">' . sg_subscribe_settings::textarea_setting('not_subscribed_text') . '</textarea></li>';\r\n\r\n\t\techo '<li><label for=\"subscribed_text\">' . __('Subscribed', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"subscribed_text\" name=\"sg_subscribe_settings[subscribed_text]\">' . sg_subscribe_settings::textarea_setting('subscribed_text') . '</textarea></li>';\r\n\r\n\t\techo '<li><label for=\"author_text\">' . __('Entry Author', 'subscribe-to-comments') . '</label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"author_text\" name=\"sg_subscribe_settings[author_text]\">' . sg_subscribe_settings::textarea_setting('author_text') . '</textarea></li>';\r\n\r\n\t\techo '</ul></fieldset>';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\techo '<fieldset>';\r\n\t\techo '<legend><input type=\"checkbox\" id=\"use_custom_style\" name=\"sg_subscribe_settings[use_custom_style]\" value=\"use_custom_style\"' . sg_subscribe_settings::checkflag('use_custom_style') . ' /> <label for=\"use_custom_style\">' . __('Use custom style for Subscription Manager', 'subscribe-to-comments') . '</label></legend>';\r\n\r\n\t\techo '<p>' . __('These settings only matter if you are using a custom style.  <code>[theme_path]</code> will be replaced with the path to your current theme.', 'subscribe-to-comments') . '</p>';\r\n\r\n\t\techo '<ul>';\r\n\t\techo '<li><label for=\"sg_sub_header\">' . __('Path to header:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_header\" name=\"sg_subscribe_settings[header]\" value=\"' . sg_subscribe_settings::form_setting('header') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"sg_sub_sidebar\">' . __('Path to sidebar:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_sidebar\" name=\"sg_subscribe_settings[sidebar]\" value=\"' . sg_subscribe_settings::form_setting('sidebar') . '\" /></label></li>';\r\n\t\techo '<li><label for=\"sg_sub_footer\">' . __('Path to footer:', 'subscribe-to-comments') . ' <input type=\"text\" size=\"40\" id=\"sg_sub_footer\" name=\"sg_subscribe_settings[footer]\" value=\"' . sg_subscribe_settings::form_setting('footer') . '\" /></label></li>';\r\n\r\n\r\n\t\techo '<li><label for=\"before_manager\">' . __('HTML for before the subscription manager:', 'subscribe-to-comments') . ' </label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"before_manager\" name=\"sg_subscribe_settings[before_manager]\">' . sg_subscribe_settings::textarea_setting('before_manager') . '</textarea></li>';\r\n\t\techo '<li><label for=\"after_manager\">' . __('HTML for after the subscription manager:', 'subscribe-to-comments') . ' </label><br /><textarea style=\"width: 98%; font-size: 12px;\" rows=\"2\" cols=\"60\" id=\"after_manager\" name=\"sg_subscribe_settings[after_manager]\">' . sg_subscribe_settings::textarea_setting('after_manager') . '</textarea></li>';\r\n\t\techo '</ul>';\r\n\t\techo '</fieldset>';\r\n\t}\r\n\r\n\tfunction checkflag($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\tif ( $options[$optname] != $optname )\r\n\t\t\treturn;\r\n\t\treturn ' checked=\"checked\"';\r\n\t}\r\n\r\n\tfunction form_setting($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\treturn htmlspecialchars(stripslashes($options[$optname]), ENT_QUOTES);\r\n\t}\r\n\r\n\tfunction textarea_setting($optname) {\r\n\t\t$options = get_settings('sg_subscribe_settings');\r\n\t\treturn htmlspecialchars(stripslashes($options[$optname]));\r\n\t}\r\n\r\n\tfunction options_page() {\r\n\t\t/** Display \"saved\" notification on post **/\r\n\t\tif ( isset($_POST['sg_subscribe_settings_submit']) )\r\n\t\t\techo '<div class=\"updated\"><p><strong>' . __('Options saved.', 'SmallOptions') . '</strong></p></div>';\r\n\r\n\t\techo '<form method=\"post\"><div class=\"wrap\">';\r\n\r\n\t\tsg_subscribe_settings::options_page_contents();\r\n\r\n\t  echo '<p class=\"submit\"><input type=\"submit\" name=\"sg_subscribe_settings_submit\" value=\"';\r\n\t  _e('Update Options &raquo;', 'subscribe-to-comments');\r\n\t  echo '\" /></p></div>';\r\n\t\techo '</form>';\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass sg_subscribe {\r\n\tvar $errors;\r\n\tvar $messages;\r\n\tvar $post_subscriptions;\r\n\tvar $email_subscriptions;\r\n\tvar $subscriber_email;\r\n\tvar $site_email;\r\n\tvar $site_name;\r\n\tvar $standalone;\r\n\tvar $form_action;\r\n\tvar $checkbox_shown;\r\n\tvar $use_wp_style;\r\n\tvar $header;\r\n\tvar $sidebar;\r\n\tvar $footer;\r\n\tvar $clear_both;\r\n\tvar $before_manager;\r\n\tvar $after_manager;\r\n\tvar $email;\r\n\tvar $new_email;\r\n\tvar $ref;\r\n\tvar $key;\r\n\tvar $key_type;\r\n\tvar $action;\r\n\tvar $default_subscribed;\r\n\tvar $not_subscribed_text;\r\n\tvar $subscribed_text;\r\n\tvar $author_text;\r\n\tvar $salt;\r\n\tvar $settings;\r\n\r\n\r\n\tfunction sg_subscribe() {\r\n\t\tglobal $wpdb;\r\n\t\t$this->db_upgrade_check();\r\n\r\n\t\t$this->settings = get_settings('sg_subscribe_settings');\r\n\r\n\t\t$this->salt = $this->settings['salt'];\r\n\t\t$this->site_email = ( is_email($this->settings['email']) && $this->settings['email'] != 'email@example.com' ) ? $this->settings['email'] : get_bloginfo('admin_email');\r\n\t\t$this->site_name = ( $this->settings['name'] != 'YOUR NAME' && !empty($this->settings['name']) ) ? stripslashes($this->settings['name']) : get_bloginfo('name');\r\n\t\t$this->default_subscribed = ($this->settings['default_subscribed']) ? true : false;\r\n\r\n\t\t$this->not_subscribed_text = stripslashes($this->settings['not_subscribed_text']);\r\n\t\t$this->subscribed_text = stripslashes($this->settings['subscribed_text']);\r\n\t\t$this->author_text = stripslashes($this->settings['author_text']);\r\n\t\t$this->clear_both = $this->settings['clear_both'];\r\n\r\n\t\t$this->errors = '';\r\n\t\t$this->post_subscriptions = '';\r\n\t\t$this->email_subscriptions = '';\r\n\t}\r\n\r\n\r\n\tfunction manager_init() {\r\n\t\t$this->messages = '';\r\n\t\t$this->use_wp_style = ( $this->settings['use_custom_style'] == 'use_custom_style' ) ? false : true;\r\n\t\tif ( !$this->use_wp_style ) {\r\n\t\t\t$this->header = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['header']));\r\n\t\t\t$this->sidebar = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['sidebar']));\r\n\t\t\t$this->footer = str_replace('[theme_path]', get_template_directory(), stripslashes($this->settings['footer']));\r\n\t\t\t$this->before_manager = stripslashes($this->settings['before_manager']);\r\n\t\t\t$this->after_manager = stripslashes($this->settings['after_manager']);\r\n\t\t}\r\n\r\n\t\t// version 2.0.8 -- allow plugin file to be renamed or placed in a subdirectory\r\n\t\tif ( 'edit.php?page=subscribe-to-comments.php' == $this->form_action )\r\n\t\t\t$this->form_action = 'edit.php?page=' . STC_PLUGIN_BASENAME;\r\n\r\n\r\n\t\tforeach (array('email', 'key', 'ref', 'new_email') as $var) {\r\n\t\t\tif ( isset($_REQUEST[$var]) && !empty($_REQUEST[$var]) )\r\n\t\t\t\t$this->{$var} = wp_specialchars(trim($_REQUEST[$var]));\r\n\t\t}\r\n\t\tif ( !$this->key )\r\n\t\t\t$this->key = 'unset';\r\n\t}\r\n\r\n\r\n\tfunction add_error($text='generic error', $type='manager') {\r\n\t\t$this->errors[$type][] = $text;\r\n\t}\r\n\r\n\r\n\tfunction show_errors($type='manager', $before_all='<div class=\"updated updated-error\">', $after_all='</div>', $before_each='<p>', $after_each='</p>'){\r\n\t\tif ( is_array($this->errors[$type]) ) {\r\n\t\t\techo $before_all;\r\n\t\t\tforeach ($this->errors[$type] as $error)\r\n\t\t\t\techo $before_each . $error . $after_each;\r\n\t\t\techo $after_all;\r\n\t\t}\r\n\t\tunset($this->errors);\r\n\t}\r\n\r\n\r\n\tfunction add_message($text) {\r\n\t\t$this->messages[] = $text;\r\n\t}\r\n\r\n\r\n\tfunction show_messages($before_all='', $after_all='', $before_each='<div class=\"updated\"><p>', $after_each='</p></div>'){\r\n\t\tif ( is_array($this->messages) ) {\r\n\t\t\techo $before_all;\r\n\t\t\tforeach ($this->messages as $message)\r\n\t\t\t\techo $before_each . $message . $after_each;\r\n\t\t\techo $after_all;\r\n\t\t}\r\n\t\tunset($this->messages);\r\n\t}\r\n\r\n\r\n\tfunction subscriptions_from_post($postid) {\r\n\t\tif ( is_array($this->post_subscriptions) ) return $this->post_subscriptions;\r\n\t\tglobal $wpdb;\r\n\t\t$postid = (int) $postid;\r\n\t\t$this->post_subscriptions = $wpdb->get_results(\"SELECT comment_author_email FROM $wpdb->comments WHERE comment_post_ID = '$postid' AND comment_subscribe='Y' AND comment_author_email != '' AND comment_approved = '1' GROUP BY LCASE(comment_author_email)\");\r\n\t\t$subscribed_without_comment = get_post_meta($postid, '_sg_subscribe-to-comments');\r\n\t\tif ( is_array($subscribed_without_comment) ) {\r\n\t\t\tforeach ( $subscribed_without_comment as $email )\r\n\t\t\t\t$this->post_subscriptions[]->comment_author_email = $email;\r\n\t\t}\r\n\t\treturn $this->post_subscriptions;\r\n\t}\r\n\r\n\r\n\tfunction subscriptions_from_email($email='') {\r\n\t\tif ( is_array($this->email_subscriptions) )\r\n\t\t\treturn $this->email_subscriptions;\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = $wpdb->escape(strtolower($email));\r\n\t\t$i = 0;\r\n\t\t$subscriptions = $wpdb->get_results(\"SELECT comment_post_ID FROM $wpdb->comments WHERE LCASE(comment_author_email) = '$email' AND comment_subscribe='Y' AND comment_approved = '1' GROUP BY comment_post_ID\");\r\n\t\tif ( is_array($subscriptions) ) {\r\n\t\t\tforeach ( $subscriptions as $subscription ) {\r\n\t\t\t\t$this->email_subscriptions[$i] = $subscription->comment_post_ID;\r\n\t\t\t\t$i++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$subscriptions = $wpdb->get_results(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_sg_subscribe-to-comments' AND LCASE(meta_value) = '$email' GROUP BY post_id\");\r\n\t\tif ( is_array($subscriptions) ) {\r\n\t\tforeach ($subscriptions as $subscription) {\r\n\t\t\t$this->email_subscriptions[$i] = $subscription->post_id;\r\n\t\t\t$i++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( $i > 0 ) {\r\n\t\t\tsort($this->email_subscriptions, SORT_NUMERIC);\r\n\t\t\treturn $this->email_subscriptions;\r\n\t\t}\r\n\t\t// no subscriptions\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction solo_subscribe ($email, $postid) {\r\n\t\tglobal $wpdb, $cache_userdata, $user_email;\r\n\t\t$postid = (int) $postid;\r\n\t\t$email = strtolower($email);\r\n\t\tif ( !is_email($email) ) {\r\n\t\t\tget_currentuserinfo();\r\n\t\t\tif ( is_email($user_email) )\r\n\t\t\t\t$email = strtolower($user_email);\r\n\t\t\telse\r\n\t\t\t\t$this->add_error(__('Please provide a valid e-mail address.', 'subscribe-to-comments'),'solo_subscribe');\r\n\t\t}\r\n\r\n\t\tif ( ( $email == $this->site_email && is_email($this->site_email) ) || ( $email == get_settings('admin_email') && is_email(get_settings('admin_email')) ) )\r\n\t\t\t$this->add_error(__('This e-mail address may not be subscribed', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( is_array($this->subscriptions_from_email($email)) )\r\n\t\t\tif (in_array($postid, $this->subscriptions_from_email($email))) {\r\n\t\t\t\t// already subscribed\r\n\t\t\t\tsetcookie('comment_author_email_' . COOKIEHASH, stripslashes($email), time() + 30000000, COOKIEPATH);\r\n\t\t\t\t$this->add_error(__('You appear to be already subscribed to this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\t\t\t\t}\r\n\t\t$email = $wpdb->escape($email);\r\n\t\t$post = $wpdb->get_row(\"SELECT * FROM $wpdb->posts WHERE ID = '$postid' AND comment_status <> 'closed' AND ( post_status = 'static' OR post_status = 'publish')  LIMIT 1\");\r\n\r\n\t\tif ( !$post )\r\n\t\t\t$this->add_error(__('Comments are not allowed on this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( empty($cache_userdata[$post->post_author]) && $post->post_author != 0) {\r\n\t\t\t$cache_userdata[$post->post_author] = $wpdb->get_row(\"SELECT * FROM $wpdb->users WHERE ID = $post->post_author\");\r\n\t\t\t$cache_userdata[$cache_userdata[$post->post_author]->user_login] =& $cache_userdata[$post->post_author];\r\n\t\t}\r\n\r\n\t\t$post_author = $cache_userdata[$post->post_author];\r\n\r\n\t\tif ( strtolower($post_author->user_email) == stripslashes($email) )\r\n\t\t\t$this->add_error(__('You appear to be already subscribed to this entry.', 'subscribe-to-comments'),'solo_subscribe');\r\n\r\n\t\tif ( !is_array($this->errors['solo_subscribe']) ) {\r\n\t\t\tadd_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email));\r\n\t\t\tsetcookie('comment_author_email_' . COOKIEHASH, stripslashes($email), time() + 30000000, COOKIEPATH);\r\n\t\t\t$location = $this->manage_link(stripslashes($email), false, false) . '&subscribeid=' . $postid;\r\n\t\t\theader(\"Location: $location\");\r\n\t\t\texit();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction add_subscriber($cid) {\r\n\t\tglobal $wpdb;\r\n\t\t$id = (int) $id;\r\n    \t$email = $wpdb->escape(strtolower($wpdb->get_var(\"SELECT comment_author_email FROM $wpdb->comments WHERE comment_ID = '$cid'\")));\r\n\t\t$postid = $wpdb->get_var(\"SELECT comment_post_ID from $wpdb->comments WHERE comment_ID = '$cid'\");\r\n\r\n\t\t$previously_subscribed = ( $wpdb->get_var(\"SELECT comment_subscribe from $wpdb->comments WHERE comment_post_ID = '$postid' AND LCASE(comment_author_email) = '$email' AND comment_subscribe = 'Y' LIMIT 1\") || in_array(stripslashes($email), get_post_meta($postid, '_sg_subscribe-to-comments')) ) ? true : false;\r\n\r\n\t\t// If user wants to be notified or has previously subscribed, set the flag on this current comment\r\n\t\tif (($_POST['subscribe'] == 'subscribe' && is_email($email)) || $previously_subscribed) {\r\n\t\t\tdelete_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email));\r\n\t\t\t$wpdb->query(\"UPDATE $wpdb->comments SET comment_subscribe = 'Y' where comment_post_ID = '$postid' AND LCASE(comment_author_email) = '$email'\");\r\n\t\t}\r\n\t\treturn $cid;\r\n\t}\r\n\r\n\r\n\tfunction is_blocked($email='') {\r\n\t\tglobal $wpdb;\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tif ( empty($email) )\r\n\t\t\treturn false;\r\n\t\t$email = strtolower($email);\r\n\t\t// add the option if it doesn't exist\r\n\t\tadd_option('do_not_mail', '');\r\n\t\t$blocked = explode (' ', get_settings('do_not_mail'));\r\n\t\tif ( in_array($email, $blocked) )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction add_block($email='') {\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = strtolower($email);\r\n\r\n\t\t// add the option if it doesn't exist\r\n\t\tadd_option('do_not_mail', '');\r\n\r\n\t\t// check to make sure this email isn't already in there\r\n\t\tif ( !$this->is_blocked($email) ) {\r\n\t\t\t// email hasn't already been added - so add it\r\n\t\t\t$blocked = get_settings('do_not_mail') . ' ' . $email;\r\n\t\t\tupdate_option('do_not_mail', $blocked);\r\n\t\t\treturn true;\r\n\t\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction remove_block($email='') {\r\n\t\tif ( !is_email($email) )\r\n\t\t\t$email = $this->email;\r\n\t\tglobal $wpdb;\r\n\t\t$email = strtolower($email);\r\n\r\n\t\tif ( $this->is_blocked($email) ) {\r\n\t\t\t// e-mail is in the list - so remove it\r\n\t\t\t$blocked = str_replace (' ' . $email, '', explode (' ', get_settings('do_not_mail')));\r\n\t\t\tupdate_option('do_not_mail', $blocked);\r\n\t\t\treturn true;\r\n\t\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction has_subscribers() {\r\n\t\tif ( count($this->get_unique_subscribers()) > 0 )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction get_unique_subscribers() {\r\n\t\tglobal $comments, $comment, $sg_subscribers;\r\n\t\tif ( isset($sg_subscribers) )\r\n\t\t\treturn $sg_subscribers;\r\n\r\n\t\t$sg_subscribers = array();\r\n\t\t$subscriber_emails = array();\r\n\r\n\t\t// We run the comment loop, and put each unique subscriber into a new array\r\n\t\tforeach ( $comments as $comment ) {\r\n\t\t\tif ( comment_subscription_status() && !in_array($comment->comment_author_email, $subscriber_emails) ) {\r\n\t\t\t\t$sg_subscribers[] = $comment;\r\n\t\t\t\t$subscriber_emails[] = $comment->comment_author_email;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn $sg_subscribers;\r\n\t}\r\n\r\n\r\n\tfunction hidden_form_fields() { ?>\r\n\t\t<input type=\"hidden\" name=\"ref\" value=\"<?php echo $this->ref; ?>\" />\r\n\t\t<input type=\"hidden\" name=\"key\" value=\"<?php echo $this->key; ?>\" />\r\n\t\t<input type=\"hidden\" name=\"email\" value=\"<?php echo $this->email; ?>\" />\r\n\t<?php\r\n\t}\r\n\r\n\r\n\tfunction generate_key($data='') {\r\n\t\tif ( '' == $data )\r\n\t\t\treturn false;\r\n\t\tif ( !$this->settings['salt'] )\r\n\t\t\tdie('fatal error: corrupted salt');\r\n\t\treturn md5(md5($this->settings['salt'] . $data));\r\n\t}\r\n\r\n\r\n\tfunction validate_key() {\r\n\t\tif ( $this->key == $this->generate_key($this->email) )\r\n\t\t\t$this->key_type = 'normal';\r\n\t\telseif ( $this->key == $this->generate_key($this->email . $this->new_email) )\r\n\t\t\t$this->key_type = 'change_email';\r\n\t\telseif ( $this->key == $this->generate_key($this->email . 'blockrequest') )\r\n\t\t\t$this->key_type = 'block';\r\n\t\telseif ( current_user_can('manage_options') )\r\n\t\t\t$this->key_type = 'admin';\r\n\t\telse\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction determine_action() {\r\n\t\t// rather than check it a bunch of times\r\n\t\t$is_email = is_email($this->email);\r\n\r\n\t\tif ( is_email($this->new_email) && $is_email && $this->key_type == 'change_email' )\r\n\t\t\t$this->action = 'change_email';\r\n\t\telseif ( isset($_POST['removesubscrips']) && $is_email )\r\n\t\t\t$this->action = 'remove_subscriptions';\r\n\t\telseif ( isset($_POST['removeBlock']) && $is_email && current_user_can('manage_options') )\r\n\t\t\t$this->action = 'remove_block';\r\n\t\telseif ( isset($_POST['changeemailrequest']) && $is_email && is_email($this->new_email) )\r\n\t\t\t$this->action = 'email_change_request';\r\n\t\telseif ( $is_email && isset($_POST['blockemail']) )\r\n\t\t\t$this->action = 'block_request';\r\n\t\telseif ( isset($_GET['subscribeid']) )\r\n\t\t\t$this->action = 'solo_subscribe';\r\n\t\telseif ( $is_email && isset($_GET['blockemailconfirm']) && $this->key == $this->generate_key($this->email . 'blockrequest') )\r\n\t\t\t$this->action = 'block';\r\n\t\telse\r\n\t\t\t$this->action = 'none';\r\n\t}\r\n\r\n\r\n\tfunction remove_subscriber($email, $postid) {\r\n\t\tglobal $wpdb;\r\n\t\t$postid = (int) $postid;\r\n\t\t$email = $wpdb->escape(strtolower($email));\r\n\r\n\t\tif ( delete_post_meta($postid, '_sg_subscribe-to-comments', stripslashes($email)) || $wpdb->query(\"UPDATE $wpdb->comments SET comment_subscribe = 'N' WHERE comment_post_ID  = '$postid' AND LCASE(comment_author_email) ='$email'\") )\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\tfunction remove_subscriptions ($postids) {\r\n\t\tglobal $wpdb;\r\n\t\t$removed = 0;\r\n\t\tfor ($i = 0; $i < count($postids); $i++) {\r\n\t\t\tif ( $this->remove_subscriber($this->email, $postids[$i]) )\r\n\t\t\t\t$removed++;\r\n\t\t}\r\n\t\treturn $removed;\r\n\t}\r\n\r\n\r\n\tfunction send_notifications($cid) {\r\n\t\tglobal $wpdb;\r\n\t\t$cid = (int) $cid;\r\n\t\t$comment = $wpdb->get_row(\"SELECT * FROM $wpdb->comments WHERE comment_ID='$cid' LIMIT 1\");\r\n\t\t$post = $wpdb->get_row(\"SELECT * FROM $wpdb->posts WHERE ID='$comment->comment_post_ID' LIMIT 1\");\r\n\r\n\t\tif ( $comment->comment_approved == '1' && $comment->comment_type == '' ) {\r\n\t\t\t// Comment has been approved and isn't a trackback or a pingback, so we should send out notifications\r\n\r\n\t\t\t$message  = sprintf(__(\"There is a new comment on the post \\\"%s\\\"\", 'subscribe-to-comments') . \". \\n%s\\n\\n\", stripslashes($post->post_title), get_permalink($comment->comment_post_ID));\r\n\t\t\t$message .= sprintf(__(\"Author: %s\\n\", 'subscribe-to-comments'), $comment->comment_author);\r\n\t\t\t$message .= __(\"Comment:\\n\", 'subscribe-to-comments') . stripslashes($comment->comment_content) . \"\\n\\n\";\r\n\t\t\t$message .= __(\"See all comments on this post here:\\n\", 'subscribe-to-comments');\r\n\t\t\t$message .= get_permalink($comment->comment_post_ID) . \"#comments\\n\\n\";\r\n\t\t\t//add link to manage comment notifications\r\n\t\t\t$message .= __(\"To manage your subscriptions or to block all notifications from this site, click the link below:\\n\", 'subscribe-to-comments');\r\n\t\t\t$message .= get_settings('siteurl').\"/wp-subscription-manager.php?email=[email]&key=[key]\";\r\n\r\n\t\t\t$subject = sprintf(__('New Comment On: %s', 'subscribe-to-comments'), stripslashes($post->post_title));\r\n\r\n\t\t\t$subscriptions = $this->subscriptions_from_post($comment->comment_post_ID);\r\n\t\t\tif ( is_array($subscriptions) ) {\r\n\t\t\t\tforeach ( $subscriptions as $email ) {\r\n\t\t\t\t\tif ( !$this->is_blocked($email->comment_author_email) && $email->comment_author_email != $comment->comment_author_email && is_email($email->comment_author_email) ) {\r\n\t\t\t\t\t        $message_final = str_replace('[email]', urlencode($email->comment_author_email), $message);\r\n\t\t\t\t\t        $message_final = str_replace('[key]', $this->generate_key($email->comment_author_email), $message_final);\r\n\t\t\t\t\t\t$this->send_mail($email->comment_author_email, $subject, $message_final);\r\n\t\t\t\t\t}\r\n\t\t\t\t} // foreach subscription\r\n\t\t\t} // if subscriptions\r\n\t\t} // end if comment approved\r\n\t\treturn $cid;\r\n\t}\r\n\r\n\r\n\tfunction change_email_request() {\r\n\t\tif ( $this->is_blocked() )\r\n\t\t\treturn false;\r\n\r\n\t\t$subject = __('E-mail change confirmation', 'subscribe-to-comments');\r\n\t\t$message = sprintf(__(\"You are receiving this message to confirm a change of e-mail address for your subscriptions at \\\"%s\\\"\\n\\n\", 'subscribe-to-comments'), get_bloginfo('blogname'));\r\n\t\t$message .= sprintf(__(\"To change your e-mail address to %s, click this link:\\n\\n\", 'subscribe-to-comments'), $this->new_email);\r\n\t\t$message .= get_bloginfo('wpurl') . \"/wp-subscription-manager.php?email=\" . urlencode($this->email) . \"&new_email=\" . urlencode($this->new_email) . \"&key=\" . $this->generate_key($this->email . $this->new_email) . \".\\n\\n\";\r\n\t\t$message .= __('If you did not request this action, please disregard this message.', 'subscribe-to-comments');\r\n\t\treturn $this->send_mail($this->email, $subject, $message);\r\n\t}\r\n\r\n\r\n\tfunction block_email_request($email) {\r\n\t\tif ( $this->is_blocked($email) )\r\n\t\t\treturn false;\r\n\t\t$subject = __('E-mail block confirmation', 'subscribe-to-comments');\r\n\t\t$message = sprintf(__(\"You are receiving this message to confirm that you no longer wish to receive e-mail comment notifications from \\\"%s\\\"\\n\\n\", 'subscribe-to-comments'), get_bloginfo('name'));\r\n\t\t$message .= __(\"To cancel all future notifications for this address, click this link:\\n\\n\", 'subscribe-to-comments');\r\n\t\t$message .= get_bloginfo('wpurl') . \"/wp-subscription-manager.php?email=\" . urlencode($email) . \"&key=\" . $this->generate_key($email . 'blockrequest') . \"&blockemailconfirm=true\" . \".\\n\\n\";\r\n\t\t$message .= __(\"If you did not request this action, please disregard this message.\", 'subscribe-to-comments');\r\n\t\treturn $this->send_mail($email, $subject, $message);\r\n\t}\r\n\r\n\r\n\tfunction send_mail($to, $subject, $message) {\r\n\t\t$subject = '[' . get_bloginfo('name') . '] ' . $subject;\r\n\t\t$headers  = \"From: \".$this->site_name.\" <\".$this->site_email.\">\\n\";\r\n\t\t$headers .= \"MIME-Version: 1.0\\n\" . \"Content-Type: text/plain; charset=\\\"\" . get_settings('blog_charset') . \"\\\"\\n\";\r\n\t\treturn wp_mail($to, $subject, $message, $headers);\r\n\t}\r\n\r\n\r\n\tfunction change_email() {\r\n\t\tglobal $wpdb;\r\n\t\t$new_email = $wpdb->escape(strtolower($this->new_email));\r\n\t\t$email = $wpdb->escape(strtolower($this->email));\r\n\t\tif ( $wpdb->query(\"UPDATE $wpdb->comments SET comment_author_email = '$new_email' WHERE comment_author_email = '$email'\") )\r\n\t\t\t$return = true;\r\n\t\tif ( $wpdb->query(\"UPDATE $wpdb->postmeta SET meta_value = '$new_email' WHERE meta_value = '$email' AND meta_key = '_sg_subscribe-to-comments'\") )\r\n\t\t\t$return = true;\r\n\r\n\t\treturn $return;\r\n\t}\r\n\r\n\r\n\tfunction entry_link($postid, $uri='') {\r\n\t\tif ( empty($uri) )\r\n\t\t\t$uri = get_permalink($postid);\r\n\t\t$postid = (int) $postid;\r\n\t\t$title = get_the_title($postid);\r\n\t\tif ( empty($title) )\r\n\t\t\t$title = __('click here', 'subscribe-to-comments');\r\n\t\t$output = '<a href=\"'.$uri.'\">'.$title.'</a>';\r\n\t\treturn $output;\r\n\t}\r\n\r\n\r\n\tfunction sg_wp_head() { ?>\r\n\t\t<style type=\"text/css\" media=\"screen\">\r\n\t\t.updated-error {\r\n\t\t\tbackground-color: #FF8080;\r\n\t\t\tborder: 1px solid #F00;\r\n\t\t}\r\n\t\t</style>\r\n\t\t<?php\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction db_upgrade_check () {\r\n\t\tglobal $wpdb;\r\n\r\n\t\t// add the options\r\n\t\tadd_option('sg_subscribe_settings', array('use_custom_style' => '', 'email' => get_bloginfo('admin_email'), 'name' => get_bloginfo('name'), 'header' => '[theme_path]/header.php', 'sidebar' => '', 'footer' => '[theme_path]/footer.php', 'before_manager' => '<div id=\"content\" class=\"widecolumn subscription-manager\">', 'after_manager' => '</div>', 'default_subscribed' => '', 'not_subscribed_text' => __('Notify me of followup comments via e-mail', 'subscribe-to-comments'), 'subscribed_text' => __('You are subscribed to this entry.  <a href=\"[manager_link]\">Manage your subscriptions</a>.', 'subscribe-to-comments'), 'author_text' => __('You are the author of this entry.  <a href=\"[manager_link]\">Manage subscriptions</a>.', 'subscribe-to-comments')));\r\n\r\n\t\t$settings = get_option('sg_subscribe_settings');\r\n\r\n\t\tif ( !$settings['salt'] ) {\r\n\t\t\t$settings['salt'] = md5(md5(uniqid(rand() . rand() . rand() . rand() . rand(), true))); // random MD5 hash\r\n\t\t\t$update = true;\r\n\t\t}\r\n\r\n\t\tif ( !$settings['clear_both'] ) {\r\n\t\t\t$settings['clear_both'] = 'clear_both';\r\n\t\t\t$update = true;\r\n\t\t}\r\n\r\n\t\tif ( $update )\r\n\t\t\tupdate_option('sg_subscribe_settings', $settings);\r\n\r\n\t\t$column_name = 'comment_subscribe';\r\n\t\tforeach ($wpdb->get_col(\"DESC $wpdb->comments\", 0) as $column )\r\n\t\t\tif ($column == $column_name)\r\n\t\t\t\treturn true;\r\n\r\n\t\t// didn't find it... create it\r\n\t\t$wpdb->query(\"ALTER TABLE $wpdb->comments ADD COLUMN comment_subscribe enum('Y','N') NOT NULL default 'N'\");\r\n\t}\r\n\r\n\r\n\tfunction current_viewer_subscription_status(){\r\n\t\tglobal $wpdb, $post, $user_email;\r\n\r\n\t\t$comment_author_email = ( isset($_COOKIE['comment_author_email_'. COOKIEHASH]) ) ? trim($_COOKIE['comment_author_email_'. COOKIEHASH]) : '';\r\n\t\tget_currentuserinfo();\r\n\r\n\t\tif ( is_email($user_email) ) {\r\n\t\t\t$email = strtolower($user_email);\r\n\t\t\t$loggedin = true;\r\n\t\t} elseif ( is_email($comment_author_email) ) {\r\n\t\t\t$email = strtolower($comment_author_email);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t$post_author = get_userdata($post->post_author);\r\n\t\tif ( strtolower($post_author->user_email) == $email && $loggedin )\r\n\t\t\treturn 'admin';\r\n\r\n\t\tif ( is_array($this->subscriptions_from_email($email)) )\r\n\t\t\tif ( in_array($post->ID, $this->email_subscriptions) ) return $email;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tfunction manage_link($email='', $html=true, $echo=true) {\r\n\t\t$link  = get_bloginfo('wpurl') . '/wp-subscription-manager.php';\r\n\t\tif ( $email != 'admin' ) {\r\n\t\t\t$link = add_query_arg('email', urlencode(urlencode($email)), $link);\r\n\t\t\t$link = add_query_arg('key', $this->generate_key($email), $link);\r\n\t\t}\r\n\t\t$link = add_query_arg('ref', urlencode('http://' . $_SERVER['HTTP_HOST'] . wp_specialchars($_SERVER['REQUEST_URI'])), $link);\r\n\t\t$link = str_replace('+', '%2B', $link);\r\n\t\tif ( $html )\r\n\t\t\t$link = htmlentities($link);\r\n\t\tif ( !$echo )\r\n\t\t\treturn $link;\r\n\t\techo $link;\r\n\t}\r\n\r\n\r\n\tfunction add_admin_menu() {\r\n\t\tadd_management_page(__('Comment Subscription Manager', 'subscribe-to-comments'), __('Subscriptions', 'subscribe-to-comments'), 8, __FILE__, 'sg_subscribe_admin');\r\n\r\n\t\tif ( class_exists('SmallOptions') )\r\n\t\t\tadd_action('small_options_page', array('sg_subscribe_settings', 'options_page_contents'));\r\n\t\telse\r\n\t\t\tadd_options_page(__('Subscribe to Comments', 'subscribe-to-comments'), __('Subscribe to Comments', 'subscribe-to-comments'), 5, basename(__FILE__), array('sg_subscribe_settings', 'options_page'));\r\n\t}\r\n\r\n\r\n} // class sg_subscribe\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction sg_subscribe_start() {\r\n\tglobal $sg_subscribe;\r\n\r\n\tif ( !$sg_subscribe ) {\r\n\t\tload_plugin_textdomain('subscribe-to-comments');\r\n\t\t$sg_subscribe = new sg_subscribe();\r\n\t}\r\n}\r\n\r\nfunction sg_subscribe_admin() {\r\n\tinclude (ABSPATH . 'wp-subscription-manager.php');\r\n}\r\n\r\n\r\n// This will be overridden if the user manually places the function\r\n// in the comments form before the comment_form do_action() call\r\nadd_action('comment_form', 'show_subscription_checkbox');\r\n\r\n// priority is very low (50) because we want to let anti-spam plugins have their way first.\r\nadd_action('comment_post', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->send_notifications($a);'), 50);\r\nadd_action('comment_post', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->add_subscriber($a);'));\r\n\r\nadd_action('wp_set_comment_status', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); return $sg_subscribe->send_notifications($a);'));\r\nadd_action('admin_menu', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); $sg_subscribe->add_admin_menu();'));\r\nadd_action('admin_head', create_function('$a', 'global $sg_subscribe; sg_subscribe_start(); $sg_subscribe->sg_wp_head();'));\r\n\r\n\r\n\r\n// detect \"subscribe without commenting\" attempts\r\nadd_action('init', create_function('$a','global $sg_subscribe; if ( $_POST[\\'solo-comment-subscribe\\'] == \\'solo-comment-subscribe\\' && is_numeric($_POST[\\'postid\\']) ) {\r\n\tsg_subscribe_start();\r\n\t$sg_subscribe->solo_subscribe($_POST[\\'email\\'], $_POST[\\'postid\\']);\r\n}')\r\n);\r\n\r\ndefine('STC_PLUGIN_BASENAME', plugin_basename(__FILE__));\r\n\r\n?>"], "filenames": ["subscribe-to-comments.php"], "buggy_code_start_loc": [4], "buggy_code_end_loc": [831], "fixing_code_start_loc": [4], "fixing_code_end_loc": [840], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in Subscribe to Comments Plugin up to 2.0.7. This affects an unknown part of the file subscribe-to-comments.php. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.8 is able to address this issue. The name of the patch is 9683bdf462fcac2f32b33be98f0b96497fbd1bb6. It is recommended to upgrade the affected component. The identifier VDB-222321 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2006-10001", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-05T21:15:09.693", "lastModified": "2023-03-13T16:43:39.733", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in Subscribe to Comments Plugin up to 2.0.7. This affects an unknown part of the file subscribe-to-comments.php. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.8 is able to address this issue. The name of the patch is 9683bdf462fcac2f32b33be98f0b96497fbd1bb6. It is recommended to upgrade the affected component. The identifier VDB-222321 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pluginmirror:subscribe_to_comments:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "2.0.8", "matchCriteriaId": "F9526C08-063B-4211-868E-25358D53FFD5"}]}]}], "references": [{"url": "https://github.com/wp-plugins/subscribe-to-comments/commit/9683bdf462fcac2f32b33be98f0b96497fbd1bb6", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-plugins/subscribe-to-comments/releases/tag/2.0.8", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.222321", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.222321", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/subscribe-to-comments/commit/9683bdf462fcac2f32b33be98f0b96497fbd1bb6"}}