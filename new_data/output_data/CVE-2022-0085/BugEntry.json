{"buggy_code": ["<?php\nnamespace Dompdf;\n\nclass Options\n{\n    /**\n     * The root of your DOMPDF installation\n     *\n     * @var string\n     */\n    private $rootDir;\n\n    /**\n     * The location of a temporary directory.\n     *\n     * The directory specified must be writable by the webserver process.\n     * The temporary directory is required to download remote images and when\n     * using the PFDLib back end.\n     *\n     * @var string\n     */\n    private $tempDir;\n\n    /**\n     * The location of the DOMPDF font directory\n     *\n     * The location of the directory where DOMPDF will store fonts and font metrics\n     * Note: This directory must exist and be writable by the webserver process.\n     *\n     * @var string\n     */\n    private $fontDir;\n\n    /**\n     * The location of the DOMPDF font cache directory\n     *\n     * This directory contains the cached font metrics for the fonts used by DOMPDF.\n     * This directory can be the same as $fontDir\n     *\n     * Note: This directory must exist and be writable by the webserver process.\n     *\n     * @var string\n     */\n    private $fontCache;\n\n    /**\n     * dompdf's \"chroot\"\n     *\n     * Prevents dompdf from accessing system files or other files on the webserver.\n     * All local files opened by dompdf must be in a subdirectory of this directory\n     * or array of directories.\n     * DO NOT set it to '/' since this could allow an attacker to use dompdf to\n     * read any files on the server.  This should be an absolute path.\n     *\n     * ==== IMPORTANT ====\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var array\n     */\n    private $chroot;\n\n    /**\n     * @var string\n     */\n    private $logOutputFile;\n\n    /**\n     * html target media view which should be rendered into pdf.\n     * List of types and parsing rules for future extensions:\n     * http://www.w3.org/TR/REC-html40/types.html\n     *   screen, tty, tv, projection, handheld, print, braille, aural, all\n     * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.\n     * Note, even though the generated pdf file is intended for print output,\n     * the desired content might be different (e.g. screen or projection view of html file).\n     * Therefore allow specification of content here.\n     *\n     * @var string\n     */\n    private $defaultMediaType = \"screen\";\n\n    /**\n     * The default paper size.\n     *\n     * North America standard is \"letter\"; other countries generally \"a4\"\n     * @see \\Dompdf\\Adapter\\CPDF::PAPER_SIZES for valid sizes\n     *\n     * @var string\n     */\n    private $defaultPaperSize = \"letter\";\n\n    /**\n     * The default paper orientation.\n     *\n     * The orientation of the page (portrait or landscape).\n     *\n     * @var string\n     */\n    private $defaultPaperOrientation = \"portrait\";\n\n    /**\n     * The default font family\n     *\n     * Used if no suitable fonts can be found. This must exist in the font folder.\n     *\n     * @var string\n     */\n    private $defaultFont = \"serif\";\n\n    /**\n     * Image DPI setting\n     *\n     * This setting determines the default DPI setting for images and fonts.  The\n     * DPI may be overridden for inline images by explicitly setting the\n     * image's width & height style attributes (i.e. if the image's native\n     * width is 600 pixels and you specify the image's width as 72 points,\n     * the image will have a DPI of 600 in the rendered PDF.  The DPI of\n     * background images can not be overridden and is controlled entirely\n     * via this parameter.\n     *\n     * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).\n     * If a size in html is given as px (or without unit as image size),\n     * this tells the corresponding size in pt at 72 DPI.\n     * This adjusts the relative sizes to be similar to the rendering of the\n     * html page in a reference browser.\n     *\n     * In pdf, always 1 pt = 1/72 inch\n     *\n     * @var int\n     */\n    private $dpi = 96;\n\n    /**\n     * A ratio applied to the fonts height to be more like browsers' line height\n     *\n     * @var float\n     */\n    private $fontHeightRatio = 1.1;\n\n    /**\n     * Enable embedded PHP\n     *\n     * If this setting is set to true then DOMPDF will automatically evaluate\n     * embedded PHP contained within <script type=\"text/php\"> ... </script> tags.\n     *\n     * ==== IMPORTANT ====\n     * Enabling this for documents you do not trust (e.g. arbitrary remote html\n     * pages) is a security risk. Embedded scripts are run with the same level of\n     * system access available to dompdf. Set this option to false (recommended)\n     * if you wish to process untrusted documents.\n     *\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var bool\n     */\n    private $isPhpEnabled = false;\n\n    /**\n     * Enable remote file access\n     *\n     * If this setting is set to true, DOMPDF will access remote sites for\n     * images and CSS files as required.\n     *\n     * ==== IMPORTANT ====\n     * This can be a security risk, in particular in combination with isPhpEnabled and\n     * allowing remote html code to be passed to $dompdf = new DOMPDF(); $dompdf->load_html(...);\n     * This allows anonymous users to download legally doubtful internet content which on\n     * tracing back appears to being downloaded by your server, or allows malicious php code\n     * in remote html pages to be executed by your server with your account privileges.\n     *\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var bool\n     */\n    private $isRemoteEnabled = false;\n\n    /**\n     * Enable inline Javascript\n     *\n     * If this setting is set to true then DOMPDF will automatically insert\n     * JavaScript code contained within <script type=\"text/javascript\"> ... </script> tags.\n     *\n     * @var bool\n     */\n    private $isJavascriptEnabled = true;\n\n    /**\n     * Use the HTML5 Lib parser\n     *\n     * @deprecated\n     * @var bool\n     */\n    private $isHtml5ParserEnabled = true;\n\n    /**\n     * Whether to enable font subsetting or not.\n     *\n     * @var bool\n     */\n    private $isFontSubsettingEnabled = true;\n\n    /**\n     * @var bool\n     */\n    private $debugPng = false;\n\n    /**\n     * @var bool\n     */\n    private $debugKeepTemp = false;\n\n    /**\n     * @var bool\n     */\n    private $debugCss = false;\n\n    /**\n     * @var bool\n     */\n    private $debugLayout = false;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutLines = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutBlocks = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutInline = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutPaddingBox = true;\n\n    /**\n     * The PDF rendering backend to use\n     *\n     * Valid settings are 'PDFLib', 'CPDF', 'GD', and 'auto'. 'auto' will\n     * look for PDFLib and use it if found, or if not it will fall back on\n     * CPDF. 'GD' renders PDFs to graphic files. {@link Dompdf\\CanvasFactory}\n     * ultimately determines which rendering class to instantiate\n     * based on this setting.\n     *\n     * @var string\n     */\n    private $pdfBackend = \"CPDF\";\n\n    /**\n     * PDFlib license key\n     *\n     * If you are using a licensed, commercial version of PDFlib, specify\n     * your license key here.  If you are using PDFlib-Lite or are evaluating\n     * the commercial version of PDFlib, comment out this setting.\n     *\n     * @link http://www.pdflib.com\n     *\n     * If pdflib present in web server and auto or selected explicitly above,\n     * a real license code must exist!\n     *\n     * @var string\n     */\n    private $pdflibLicense = \"\";\n\n    /**\n     * HTTP context created with stream_context_create()\n     * Will be used for file_get_contents\n     *\n     * @link https://www.php.net/manual/context.php\n     *\n     * @var resource\n     */\n    private $httpContext;\n\n    /**\n     * @param array $attributes\n     */\n    public function __construct(array $attributes = null)\n    {\n        $rootDir = realpath(__DIR__ . \"/../\");\n        $this->setChroot(array($rootDir));\n        $this->setRootDir($rootDir);\n        $this->setTempDir(sys_get_temp_dir());\n        $this->setFontDir($rootDir . \"/lib/fonts\");\n        $this->setFontCache($this->getFontDir());\n\n        if (null !== $attributes) {\n            $this->set($attributes);\n        }\n    }\n\n    /**\n     * @param array|string $attributes\n     * @param null|mixed $value\n     * @return $this\n     */\n    public function set($attributes, $value = null)\n    {\n        if (!is_array($attributes)) {\n            $attributes = [$attributes => $value];\n        }\n        foreach ($attributes as $key => $value) {\n            if ($key === 'tempDir' || $key === 'temp_dir') {\n                $this->setTempDir($value);\n            } elseif ($key === 'fontDir' || $key === 'font_dir') {\n                $this->setFontDir($value);\n            } elseif ($key === 'fontCache' || $key === 'font_cache') {\n                $this->setFontCache($value);\n            } elseif ($key === 'chroot') {\n                $this->setChroot($value);\n            } elseif ($key === 'logOutputFile' || $key === 'log_output_file') {\n                $this->setLogOutputFile($value);\n            } elseif ($key === 'defaultMediaType' || $key === 'default_media_type') {\n                $this->setDefaultMediaType($value);\n            } elseif ($key === 'defaultPaperSize' || $key === 'default_paper_size') {\n                $this->setDefaultPaperSize($value);\n            } elseif ($key === 'defaultPaperOrientation' || $key === 'default_paper_orientation') {\n                $this->setDefaultPaperOrientation($value);\n            } elseif ($key === 'defaultFont' || $key === 'default_font') {\n                $this->setDefaultFont($value);\n            } elseif ($key === 'dpi') {\n                $this->setDpi($value);\n            } elseif ($key === 'fontHeightRatio' || $key === 'font_height_ratio') {\n                $this->setFontHeightRatio($value);\n            } elseif ($key === 'isPhpEnabled' || $key === 'is_php_enabled' || $key === 'enable_php') {\n                $this->setIsPhpEnabled($value);\n            } elseif ($key === 'isRemoteEnabled' || $key === 'is_remote_enabled' || $key === 'enable_remote') {\n                $this->setIsRemoteEnabled($value);\n            } elseif ($key === 'isJavascriptEnabled' || $key === 'is_javascript_enabled' || $key === 'enable_javascript') {\n                $this->setIsJavascriptEnabled($value);\n            } elseif ($key === 'isHtml5ParserEnabled' || $key === 'is_html5_parser_enabled' || $key === 'enable_html5_parser') {\n                $this->setIsHtml5ParserEnabled($value);\n            } elseif ($key === 'isFontSubsettingEnabled' || $key === 'is_font_subsetting_enabled' || $key === 'enable_font_subsetting') {\n                $this->setIsFontSubsettingEnabled($value);\n            } elseif ($key === 'debugPng' || $key === 'debug_png') {\n                $this->setDebugPng($value);\n            } elseif ($key === 'debugKeepTemp' || $key === 'debug_keep_temp') {\n                $this->setDebugKeepTemp($value);\n            } elseif ($key === 'debugCss' || $key === 'debug_css') {\n                $this->setDebugCss($value);\n            } elseif ($key === 'debugLayout' || $key === 'debug_layout') {\n                $this->setDebugLayout($value);\n            } elseif ($key === 'debugLayoutLines' || $key === 'debug_layout_lines') {\n                $this->setDebugLayoutLines($value);\n            } elseif ($key === 'debugLayoutBlocks' || $key === 'debug_layout_blocks') {\n                $this->setDebugLayoutBlocks($value);\n            } elseif ($key === 'debugLayoutInline' || $key === 'debug_layout_inline') {\n                $this->setDebugLayoutInline($value);\n            } elseif ($key === 'debugLayoutPaddingBox' || $key === 'debug_layout_padding_box') {\n                $this->setDebugLayoutPaddingBox($value);\n            } elseif ($key === 'pdfBackend' || $key === 'pdf_backend') {\n                $this->setPdfBackend($value);\n            } elseif ($key === 'pdflibLicense' || $key === 'pdflib_license') {\n                $this->setPdflibLicense($value);\n            } elseif ($key === 'httpContext' || $key === 'http_context') {\n                $this->setHttpContext($value);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @return mixed\n     */\n    public function get($key)\n    {\n        if ($key === 'tempDir' || $key === 'temp_dir') {\n            return $this->getTempDir();\n        } elseif ($key === 'fontDir' || $key === 'font_dir') {\n            return $this->getFontDir();\n        } elseif ($key === 'fontCache' || $key === 'font_cache') {\n            return $this->getFontCache();\n        } elseif ($key === 'chroot') {\n            return $this->getChroot();\n        } elseif ($key === 'logOutputFile' || $key === 'log_output_file') {\n            return $this->getLogOutputFile();\n        } elseif ($key === 'defaultMediaType' || $key === 'default_media_type') {\n            return $this->getDefaultMediaType();\n        } elseif ($key === 'defaultPaperSize' || $key === 'default_paper_size') {\n            return $this->getDefaultPaperSize();\n        } elseif ($key === 'defaultPaperOrientation' || $key === 'default_paper_orientation') {\n            return $this->getDefaultPaperOrientation();\n        } elseif ($key === 'defaultFont' || $key === 'default_font') {\n            return $this->getDefaultFont();\n        } elseif ($key === 'dpi') {\n            return $this->getDpi();\n        } elseif ($key === 'fontHeightRatio' || $key === 'font_height_ratio') {\n            return $this->getFontHeightRatio();\n        } elseif ($key === 'isPhpEnabled' || $key === 'is_php_enabled' || $key === 'enable_php') {\n            return $this->getIsPhpEnabled();\n        } elseif ($key === 'isRemoteEnabled' || $key === 'is_remote_enabled' || $key === 'enable_remote') {\n            return $this->getIsRemoteEnabled();\n        } elseif ($key === 'isJavascriptEnabled' || $key === 'is_javascript_enabled' || $key === 'enable_javascript') {\n            return $this->getIsJavascriptEnabled();\n        } elseif ($key === 'isHtml5ParserEnabled' || $key === 'is_html5_parser_enabled' || $key === 'enable_html5_parser') {\n            return $this->getIsHtml5ParserEnabled();\n        } elseif ($key === 'isFontSubsettingEnabled' || $key === 'is_font_subsetting_enabled' || $key === 'enable_font_subsetting') {\n            return $this->getIsFontSubsettingEnabled();\n        } elseif ($key === 'debugPng' || $key === 'debug_png') {\n            return $this->getDebugPng();\n        } elseif ($key === 'debugKeepTemp' || $key === 'debug_keep_temp') {\n            return $this->getDebugKeepTemp();\n        } elseif ($key === 'debugCss' || $key === 'debug_css') {\n            return $this->getDebugCss();\n        } elseif ($key === 'debugLayout' || $key === 'debug_layout') {\n            return $this->getDebugLayout();\n        } elseif ($key === 'debugLayoutLines' || $key === 'debug_layout_lines') {\n            return $this->getDebugLayoutLines();\n        } elseif ($key === 'debugLayoutBlocks' || $key === 'debug_layout_blocks') {\n            return $this->getDebugLayoutBlocks();\n        } elseif ($key === 'debugLayoutInline' || $key === 'debug_layout_inline') {\n            return $this->getDebugLayoutInline();\n        } elseif ($key === 'debugLayoutPaddingBox' || $key === 'debug_layout_padding_box') {\n            return $this->getDebugLayoutPaddingBox();\n        } elseif ($key === 'pdfBackend' || $key === 'pdf_backend') {\n            return $this->getPdfBackend();\n        } elseif ($key === 'pdflibLicense' || $key === 'pdflib_license') {\n            return $this->getPdflibLicense();\n        } elseif ($key === 'httpContext' || $key === 'http_context') {\n            return $this->getHttpContext();\n        }\n        return null;\n    }\n\n    /**\n     * @param string $pdfBackend\n     * @return $this\n     */\n    public function setPdfBackend($pdfBackend)\n    {\n        $this->pdfBackend = $pdfBackend;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getPdfBackend()\n    {\n        return $this->pdfBackend;\n    }\n\n    /**\n     * @param string $pdflibLicense\n     * @return $this\n     */\n    public function setPdflibLicense($pdflibLicense)\n    {\n        $this->pdflibLicense = $pdflibLicense;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getPdflibLicense()\n    {\n        return $this->pdflibLicense;\n    }\n\n    /**\n     * @param array|string $chroot\n     * @return $this\n     */\n    public function setChroot($chroot, $delimiter = ',')\n    {\n        if (is_string($chroot)) {\n            $this->chroot = explode($delimiter, $chroot);\n        } elseif (is_array($chroot)) {\n            $this->chroot = $chroot;\n        }\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getChroot()\n    {\n        $chroot = [];\n        if (is_array($this->chroot)) {\n            $chroot = $this->chroot;\n        }\n        return $chroot;\n    }\n\n    /**\n     * @param boolean $debugCss\n     * @return $this\n     */\n    public function setDebugCss($debugCss)\n    {\n        $this->debugCss = $debugCss;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugCss()\n    {\n        return $this->debugCss;\n    }\n\n    /**\n     * @param boolean $debugKeepTemp\n     * @return $this\n     */\n    public function setDebugKeepTemp($debugKeepTemp)\n    {\n        $this->debugKeepTemp = $debugKeepTemp;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugKeepTemp()\n    {\n        return $this->debugKeepTemp;\n    }\n\n    /**\n     * @param boolean $debugLayout\n     * @return $this\n     */\n    public function setDebugLayout($debugLayout)\n    {\n        $this->debugLayout = $debugLayout;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayout()\n    {\n        return $this->debugLayout;\n    }\n\n    /**\n     * @param boolean $debugLayoutBlocks\n     * @return $this\n     */\n    public function setDebugLayoutBlocks($debugLayoutBlocks)\n    {\n        $this->debugLayoutBlocks = $debugLayoutBlocks;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutBlocks()\n    {\n        return $this->debugLayoutBlocks;\n    }\n\n    /**\n     * @param boolean $debugLayoutInline\n     * @return $this\n     */\n    public function setDebugLayoutInline($debugLayoutInline)\n    {\n        $this->debugLayoutInline = $debugLayoutInline;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutInline()\n    {\n        return $this->debugLayoutInline;\n    }\n\n    /**\n     * @param boolean $debugLayoutLines\n     * @return $this\n     */\n    public function setDebugLayoutLines($debugLayoutLines)\n    {\n        $this->debugLayoutLines = $debugLayoutLines;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutLines()\n    {\n        return $this->debugLayoutLines;\n    }\n\n    /**\n     * @param boolean $debugLayoutPaddingBox\n     * @return $this\n     */\n    public function setDebugLayoutPaddingBox($debugLayoutPaddingBox)\n    {\n        $this->debugLayoutPaddingBox = $debugLayoutPaddingBox;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutPaddingBox()\n    {\n        return $this->debugLayoutPaddingBox;\n    }\n\n    /**\n     * @param boolean $debugPng\n     * @return $this\n     */\n    public function setDebugPng($debugPng)\n    {\n        $this->debugPng = $debugPng;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugPng()\n    {\n        return $this->debugPng;\n    }\n\n    /**\n     * @param string $defaultFont\n     * @return $this\n     */\n    public function setDefaultFont($defaultFont)\n    {\n        if (!($defaultFont === null || trim($defaultFont) === \"\")) {\n            $this->defaultFont = $defaultFont;\n        } else {\n            $this->defaultFont = \"serif\";\n        }\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultFont()\n    {\n        return $this->defaultFont;\n    }\n\n    /**\n     * @param string $defaultMediaType\n     * @return $this\n     */\n    public function setDefaultMediaType($defaultMediaType)\n    {\n        $this->defaultMediaType = $defaultMediaType;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultMediaType()\n    {\n        return $this->defaultMediaType;\n    }\n\n    /**\n     * @param string $defaultPaperSize\n     * @return $this\n     */\n    public function setDefaultPaperSize($defaultPaperSize)\n    {\n        $this->defaultPaperSize = $defaultPaperSize;\n        return $this;\n    }\n\n    /**\n     * @param string $defaultPaperOrientation\n     * @return $this\n     */\n    public function setDefaultPaperOrientation($defaultPaperOrientation)\n    {\n        $this->defaultPaperOrientation = $defaultPaperOrientation;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultPaperSize()\n    {\n        return $this->defaultPaperSize;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultPaperOrientation()\n    {\n        return $this->defaultPaperOrientation;\n    }\n\n    /**\n     * @param int $dpi\n     * @return $this\n     */\n    public function setDpi($dpi)\n    {\n        $this->dpi = $dpi;\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getDpi()\n    {\n        return $this->dpi;\n    }\n\n    /**\n     * @param string $fontCache\n     * @return $this\n     */\n    public function setFontCache($fontCache)\n    {\n        $this->fontCache = $fontCache;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFontCache()\n    {\n        return $this->fontCache;\n    }\n\n    /**\n     * @param string $fontDir\n     * @return $this\n     */\n    public function setFontDir($fontDir)\n    {\n        $this->fontDir = $fontDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFontDir()\n    {\n        return $this->fontDir;\n    }\n\n    /**\n     * @param float $fontHeightRatio\n     * @return $this\n     */\n    public function setFontHeightRatio($fontHeightRatio)\n    {\n        $this->fontHeightRatio = $fontHeightRatio;\n        return $this;\n    }\n\n    /**\n     * @return float\n     */\n    public function getFontHeightRatio()\n    {\n        return $this->fontHeightRatio;\n    }\n\n    /**\n     * @param boolean $isFontSubsettingEnabled\n     * @return $this\n     */\n    public function setIsFontSubsettingEnabled($isFontSubsettingEnabled)\n    {\n        $this->isFontSubsettingEnabled = $isFontSubsettingEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsFontSubsettingEnabled()\n    {\n        return $this->isFontSubsettingEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isFontSubsettingEnabled()\n    {\n        return $this->getIsFontSubsettingEnabled();\n    }\n\n    /**\n     * @deprecated\n     * @param boolean $isHtml5ParserEnabled\n     * @return $this\n     */\n    public function setIsHtml5ParserEnabled($isHtml5ParserEnabled)\n    {\n        $this->isHtml5ParserEnabled = $isHtml5ParserEnabled;\n        return $this;\n    }\n\n    /**\n     * @deprecated\n     * @return boolean\n     */\n    public function getIsHtml5ParserEnabled()\n    {\n        return $this->isHtml5ParserEnabled;\n    }\n\n    /**\n     * @deprecated\n     * @return boolean\n     */\n    public function isHtml5ParserEnabled()\n    {\n        return $this->getIsHtml5ParserEnabled();\n    }\n\n    /**\n     * @param boolean $isJavascriptEnabled\n     * @return $this\n     */\n    public function setIsJavascriptEnabled($isJavascriptEnabled)\n    {\n        $this->isJavascriptEnabled = $isJavascriptEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsJavascriptEnabled()\n    {\n        return $this->isJavascriptEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isJavascriptEnabled()\n    {\n        return $this->getIsJavascriptEnabled();\n    }\n\n    /**\n     * @param boolean $isPhpEnabled\n     * @return $this\n     */\n    public function setIsPhpEnabled($isPhpEnabled)\n    {\n        $this->isPhpEnabled = $isPhpEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsPhpEnabled()\n    {\n        return $this->isPhpEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isPhpEnabled()\n    {\n        return $this->getIsPhpEnabled();\n    }\n\n    /**\n     * @param boolean $isRemoteEnabled\n     * @return $this\n     */\n    public function setIsRemoteEnabled($isRemoteEnabled)\n    {\n        $this->isRemoteEnabled = $isRemoteEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsRemoteEnabled()\n    {\n        return $this->isRemoteEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isRemoteEnabled()\n    {\n        return $this->getIsRemoteEnabled();\n    }\n\n    /**\n     * @param string $logOutputFile\n     * @return $this\n     */\n    public function setLogOutputFile($logOutputFile)\n    {\n        $this->logOutputFile = $logOutputFile;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLogOutputFile()\n    {\n        return $this->logOutputFile;\n    }\n\n    /**\n     * @param string $tempDir\n     * @return $this\n     */\n    public function setTempDir($tempDir)\n    {\n        $this->tempDir = $tempDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTempDir()\n    {\n        return $this->tempDir;\n    }\n\n    /**\n     * @param string $rootDir\n     * @return $this\n     */\n    public function setRootDir($rootDir)\n    {\n        $this->rootDir = $rootDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getRootDir()\n    {\n        return $this->rootDir;\n    }\n\n    /**\n     * Sets the HTTP context\n     *\n     * @param resource|array $httpContext\n     * @return $this\n     */\n    public function setHttpContext($httpContext)\n    {\n        $this->httpContext = is_array($httpContext) ? stream_context_create($httpContext) : $httpContext;\n        return $this;\n    }\n\n    /**\n     * Returns the HTTP context\n     *\n     * @return resource\n     */\n    public function getHttpContext()\n    {\n        return $this->httpContext;\n    }\n}\n", "<?php\nnamespace Dompdf\\Tests;\n\nuse DOMDocument;\nuse Dompdf\\Adapter\\CPDF;\nuse Dompdf\\Css\\Stylesheet;\nuse Dompdf\\Dompdf;\nuse Dompdf\\Frame\\FrameTree;\nuse Dompdf\\Options;\nuse Dompdf\\Tests\\TestCase;\n\nclass DompdfTest extends TestCase\n{\n    public function testConstructor()\n    {\n        $dompdf = new Dompdf();\n        $this->assertInstanceOf(CPDF::class, $dompdf->getCanvas());\n        $this->assertSame(\"\", $dompdf->getProtocol());\n        $this->assertSame(\"\", $dompdf->getBaseHost());\n        $this->assertSame(\"\", $dompdf->getBasePath());\n        $this->assertIsArray($dompdf->getCallbacks());\n        $this->assertInstanceOf(Stylesheet::class, $dompdf->getCss());\n        $this->assertNull($dompdf->getDom());\n        $this->assertNull($dompdf->getHttpContext());\n        $this->assertInstanceOf(Options::class, $dompdf->getOptions());\n        $this->assertFalse($dompdf->getQuirksmode());\n        $this->assertNull($dompdf->getTree());\n    }\n\n    public function testSetters()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->setBaseHost('test1');\n        $dompdf->setBasePath('test2');\n        $dompdf->setCallbacks(['test' => ['event' => 'test', 'f' => function() {}]]);\n        $dompdf->setCss(new Stylesheet($dompdf));\n        $dompdf->setDom(new DOMDocument());\n        $dompdf->setHttpContext(fopen(__DIR__ . \"/_files/jamaica.jpg\", 'r'));\n        $dompdf->setOptions(new Options());\n        $dompdf->setProtocol('test3');\n        $dompdf->setTree(new FrameTree($dompdf->getDom()));\n\n        $this->assertEquals('test1', $dompdf->getBaseHost());\n        $this->assertEquals('test2', $dompdf->getBasePath());\n        $this->assertCount(1, $dompdf->getCallbacks());\n        $this->assertInstanceOf(Stylesheet::class, $dompdf->getCss());\n        $this->assertInstanceOf(DOMDocument::class, $dompdf->getDom());\n        $this->assertIsResource($dompdf->getHttpContext());\n        $this->assertInstanceOf(Options::class, $dompdf->getOptions());\n        $this->assertEquals('test3', $dompdf->getProtocol());\n        $this->assertInstanceOf(FrameTree::class, $dompdf->getTree());\n\n        $dompdf = new Dompdf();\n        $dompdf->setHttpContext(['ssl' => ['verify_peer' => false]]);\n        $this->assertIsResource($dompdf->getHttpContext());\n    }\n\n    public function testLoadHtml()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->loadHtml('<html><body><strong>Hello</strong></body></html>');\n        $this->assertEquals('Hello', $dompdf->getDom()->textContent);\n\n        //Test when encoding parameter is used\n        $dompdf->loadHtml(mb_convert_encoding('<html><body><strong>Hello</strong></body></html>', 'windows-1252'), 'windows-1252');\n        $this->assertEquals('Hello', $dompdf->getDom()->textContent);\n    }\n\n    public function testRender()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->loadHtml('<html><body><strong>Hello</strong></body></html>');\n        $dompdf->render();\n\n        $this->assertEquals('', $dompdf->getDom()->textContent);\n    }\n\n    public function callbacksProvider(): array\n    {\n        return [\n            [\"begin_page_reflow\", 1],\n            [\"begin_frame\", 3],\n            [\"end_frame\", 3],\n            [\"begin_page_render\", 1],\n            [\"end_page_render\", 1]\n        ];\n    }\n\n    /**\n     * @dataProvider callbacksProvider\n     */\n    public function testCallbacks(string $event, int $numCalls): void\n    {\n        $called = 0;\n\n        $dompdf = new Dompdf();\n        $dompdf->setCallbacks([\n            [\n                \"event\" => $event,\n                \"f\" => function ($infos) use (&$called) {\n                    $this->assertIsArray($infos);\n                    $this->assertCount(4, $infos);\n                    $called++;\n                }\n            ]\n        ]);\n\n        $dompdf->loadHtml(\"<html><body><p>Some text</p></body></html>\");\n        $dompdf->render();\n\n        $this->assertSame($numCalls, $called);\n    }\n\n    public function customCanvasProvider(): array\n    {\n        return [\n            [\"A4\", \"portrait\", true, \"auto\"],\n            [\"A5\", \"landscape\", true, \"A5 landscape\"],\n            [\"A5\", \"landscape\", false, \"A5 landscape\"],\n            [[0, 0, 300, 400], \"portrait\", true, \"300pt 400pt\"]\n        ];\n    }\n\n    /**\n     * Test that a custom canvas is not replaced on render if its size matches\n     * the desired paper size.\n     *\n     * @dataProvider customCanvasProvider\n     */\n    public function testCustomCanvas(\n        $size,\n        string $orientation,\n        bool $setPaper,\n        string $cssSize\n    ): void {\n        $options = new Options();\n        $options->setDefaultPaperSize(\"Letter\");\n\n        $dompdf = new Dompdf($options);\n\n        if ($setPaper) {\n            $dompdf->setPaper($size, $orientation);\n        }\n\n        $c1 = new CPDF($size, $orientation, $dompdf);\n        $dompdf->setCanvas($c1);\n        $dompdf->loadHtml(\"<html><head><style>@page { size: $cssSize; }</style></head><body></body></html>\");\n        $dompdf->render();\n        $c2 = $dompdf->getCanvas();\n\n        $this->assertSame($c1, $c2);\n    }\n\n    public function testSpaceAtStartOfSecondInlineTag()\n    {\n        $text_frame_contents = [];\n\n        $dompdf = new Dompdf();\n\n        // Use a callback to inspect the frame tree; otherwise FrameReflower\\Page::reflow()\n        // will dispose of it before dompdf->render finishes\n        $dompdf->setCallbacks(['test' => [\n            'event' => 'end_page_render',\n            'f' => function($params) use (&$text_frame_contents) {\n                $frame = $params[\"frame\"];\n                foreach ($frame->get_children() as $child) {\n                    foreach ($child->get_children() as $grandchild) {\n                        $text_frame_contents[] = $grandchild->get_text();\n                    }\n                }\n            }\n        ]]);\n\n        $dompdf->loadHtml('<html><body><span>one</span><span> - two</span></body></html>');\n        $dompdf->render();\n\n        $this->assertEquals(\"one\", $text_frame_contents[0]);\n        $this->assertEquals(\" - two\", $text_frame_contents[1]);\n    }\n}\n"], "fixing_code": ["<?php\nnamespace Dompdf;\n\nclass Options\n{\n    /**\n     * The root of your DOMPDF installation\n     *\n     * @var string\n     */\n    private $rootDir;\n\n    /**\n     * The location of a temporary directory.\n     *\n     * The directory specified must be writable by the webserver process.\n     * The temporary directory is required to download remote images and when\n     * using the PFDLib back end.\n     *\n     * @var string\n     */\n    private $tempDir;\n\n    /**\n     * The location of the DOMPDF font directory\n     *\n     * The location of the directory where DOMPDF will store fonts and font metrics\n     * Note: This directory must exist and be writable by the webserver process.\n     *\n     * @var string\n     */\n    private $fontDir;\n\n    /**\n     * The location of the DOMPDF font cache directory\n     *\n     * This directory contains the cached font metrics for the fonts used by DOMPDF.\n     * This directory can be the same as $fontDir\n     *\n     * Note: This directory must exist and be writable by the webserver process.\n     *\n     * @var string\n     */\n    private $fontCache;\n\n    /**\n     * dompdf's \"chroot\"\n     *\n     * Prevents dompdf from accessing system files or other files on the webserver.\n     * All local files opened by dompdf must be in a subdirectory of this directory\n     * or array of directories.\n     * DO NOT set it to '/' since this could allow an attacker to use dompdf to\n     * read any files on the server.  This should be an absolute path.\n     *\n     * ==== IMPORTANT ====\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var array\n     */\n    private $chroot;\n\n    /**\n     * @var string\n     */\n    private $logOutputFile;\n\n    /**\n     * html target media view which should be rendered into pdf.\n     * List of types and parsing rules for future extensions:\n     * http://www.w3.org/TR/REC-html40/types.html\n     *   screen, tty, tv, projection, handheld, print, braille, aural, all\n     * Note: aural is deprecated in CSS 2.1 because it is replaced by speech in CSS 3.\n     * Note, even though the generated pdf file is intended for print output,\n     * the desired content might be different (e.g. screen or projection view of html file).\n     * Therefore allow specification of content here.\n     *\n     * @var string\n     */\n    private $defaultMediaType = \"screen\";\n\n    /**\n     * The default paper size.\n     *\n     * North America standard is \"letter\"; other countries generally \"a4\"\n     * @see \\Dompdf\\Adapter\\CPDF::PAPER_SIZES for valid sizes\n     *\n     * @var string\n     */\n    private $defaultPaperSize = \"letter\";\n\n    /**\n     * The default paper orientation.\n     *\n     * The orientation of the page (portrait or landscape).\n     *\n     * @var string\n     */\n    private $defaultPaperOrientation = \"portrait\";\n\n    /**\n     * The default font family\n     *\n     * Used if no suitable fonts can be found. This must exist in the font folder.\n     *\n     * @var string\n     */\n    private $defaultFont = \"serif\";\n\n    /**\n     * Image DPI setting\n     *\n     * This setting determines the default DPI setting for images and fonts.  The\n     * DPI may be overridden for inline images by explicitly setting the\n     * image's width & height style attributes (i.e. if the image's native\n     * width is 600 pixels and you specify the image's width as 72 points,\n     * the image will have a DPI of 600 in the rendered PDF.  The DPI of\n     * background images can not be overridden and is controlled entirely\n     * via this parameter.\n     *\n     * For the purposes of DOMPDF, pixels per inch (PPI) = dots per inch (DPI).\n     * If a size in html is given as px (or without unit as image size),\n     * this tells the corresponding size in pt at 72 DPI.\n     * This adjusts the relative sizes to be similar to the rendering of the\n     * html page in a reference browser.\n     *\n     * In pdf, always 1 pt = 1/72 inch\n     *\n     * @var int\n     */\n    private $dpi = 96;\n\n    /**\n     * A ratio applied to the fonts height to be more like browsers' line height\n     *\n     * @var float\n     */\n    private $fontHeightRatio = 1.1;\n\n    /**\n     * Enable embedded PHP\n     *\n     * If this setting is set to true then DOMPDF will automatically evaluate\n     * embedded PHP contained within <script type=\"text/php\"> ... </script> tags.\n     *\n     * ==== IMPORTANT ====\n     * Enabling this for documents you do not trust (e.g. arbitrary remote html\n     * pages) is a security risk. Embedded scripts are run with the same level of\n     * system access available to dompdf. Set this option to false (recommended)\n     * if you wish to process untrusted documents.\n     *\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var bool\n     */\n    private $isPhpEnabled = false;\n\n    /**\n     * Enable remote file access\n     *\n     * If this setting is set to true, DOMPDF will access remote sites for\n     * images and CSS files as required.\n     *\n     * ==== IMPORTANT ====\n     * This can be a security risk, in particular in combination with isPhpEnabled and\n     * allowing remote html code to be passed to $dompdf = new DOMPDF(); $dompdf->load_html(...);\n     * This allows anonymous users to download legally doubtful internet content which on\n     * tracing back appears to being downloaded by your server, or allows malicious php code\n     * in remote html pages to be executed by your server with your account privileges.\n     *\n     * This setting may increase the risk of system exploit. Do not change\n     * this settings without understanding the consequences. Additional\n     * documentation is available on the dompdf wiki at:\n     * https://github.com/dompdf/dompdf/wiki\n     *\n     * @var bool\n     */\n    private $isRemoteEnabled = false;\n\n    /**\n     * Enable inline Javascript\n     *\n     * If this setting is set to true then DOMPDF will automatically insert\n     * JavaScript code contained within <script type=\"text/javascript\"> ... </script> tags.\n     *\n     * @var bool\n     */\n    private $isJavascriptEnabled = true;\n\n    /**\n     * Use the HTML5 Lib parser\n     *\n     * @deprecated\n     * @var bool\n     */\n    private $isHtml5ParserEnabled = true;\n\n    /**\n     * Whether to enable font subsetting or not.\n     *\n     * @var bool\n     */\n    private $isFontSubsettingEnabled = true;\n\n    /**\n     * @var bool\n     */\n    private $debugPng = false;\n\n    /**\n     * @var bool\n     */\n    private $debugKeepTemp = false;\n\n    /**\n     * @var bool\n     */\n    private $debugCss = false;\n\n    /**\n     * @var bool\n     */\n    private $debugLayout = false;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutLines = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutBlocks = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutInline = true;\n\n    /**\n     * @var bool\n     */\n    private $debugLayoutPaddingBox = true;\n\n    /**\n     * The PDF rendering backend to use\n     *\n     * Valid settings are 'PDFLib', 'CPDF', 'GD', and 'auto'. 'auto' will\n     * look for PDFLib and use it if found, or if not it will fall back on\n     * CPDF. 'GD' renders PDFs to graphic files. {@link Dompdf\\CanvasFactory}\n     * ultimately determines which rendering class to instantiate\n     * based on this setting.\n     *\n     * @var string\n     */\n    private $pdfBackend = \"CPDF\";\n\n    /**\n     * PDFlib license key\n     *\n     * If you are using a licensed, commercial version of PDFlib, specify\n     * your license key here.  If you are using PDFlib-Lite or are evaluating\n     * the commercial version of PDFlib, comment out this setting.\n     *\n     * @link http://www.pdflib.com\n     *\n     * If pdflib present in web server and auto or selected explicitly above,\n     * a real license code must exist!\n     *\n     * @var string\n     */\n    private $pdflibLicense = \"\";\n\n    /**\n     * HTTP context created with stream_context_create()\n     * Will be used for file_get_contents\n     *\n     * @link https://www.php.net/manual/context.php\n     *\n     * @var resource\n     */\n    private $httpContext;\n\n    /**\n     * @param array $attributes\n     */\n    public function __construct(array $attributes = null)\n    {\n        $rootDir = realpath(__DIR__ . \"/../\");\n        $this->setChroot(array($rootDir));\n        $this->setRootDir($rootDir);\n        $this->setTempDir(sys_get_temp_dir());\n        $this->setFontDir($rootDir . \"/lib/fonts\");\n        $this->setFontCache($this->getFontDir());\n\n        $ver = \"\";\n        $versionFile = realpath(__DIR__ . \"/../VERSION\");\n        if (file_exists($versionFile) && ($version = trim(file_get_contents($versionFile))) !== false && $version !== '$Format:<%h>$') {\n            $ver = \"/$version\";\n        }\n        $this->setHttpContext([\n            \"http\" => [\n                \"follow_location\" => false,\n                \"user_agent\" => \"Dompdf$ver https://github.com/dompdf/dompdf\"\n            ]\n        ]);\n\n        if (null !== $attributes) {\n            $this->set($attributes);\n        }\n    }\n\n    /**\n     * @param array|string $attributes\n     * @param null|mixed $value\n     * @return $this\n     */\n    public function set($attributes, $value = null)\n    {\n        if (!is_array($attributes)) {\n            $attributes = [$attributes => $value];\n        }\n        foreach ($attributes as $key => $value) {\n            if ($key === 'tempDir' || $key === 'temp_dir') {\n                $this->setTempDir($value);\n            } elseif ($key === 'fontDir' || $key === 'font_dir') {\n                $this->setFontDir($value);\n            } elseif ($key === 'fontCache' || $key === 'font_cache') {\n                $this->setFontCache($value);\n            } elseif ($key === 'chroot') {\n                $this->setChroot($value);\n            } elseif ($key === 'logOutputFile' || $key === 'log_output_file') {\n                $this->setLogOutputFile($value);\n            } elseif ($key === 'defaultMediaType' || $key === 'default_media_type') {\n                $this->setDefaultMediaType($value);\n            } elseif ($key === 'defaultPaperSize' || $key === 'default_paper_size') {\n                $this->setDefaultPaperSize($value);\n            } elseif ($key === 'defaultPaperOrientation' || $key === 'default_paper_orientation') {\n                $this->setDefaultPaperOrientation($value);\n            } elseif ($key === 'defaultFont' || $key === 'default_font') {\n                $this->setDefaultFont($value);\n            } elseif ($key === 'dpi') {\n                $this->setDpi($value);\n            } elseif ($key === 'fontHeightRatio' || $key === 'font_height_ratio') {\n                $this->setFontHeightRatio($value);\n            } elseif ($key === 'isPhpEnabled' || $key === 'is_php_enabled' || $key === 'enable_php') {\n                $this->setIsPhpEnabled($value);\n            } elseif ($key === 'isRemoteEnabled' || $key === 'is_remote_enabled' || $key === 'enable_remote') {\n                $this->setIsRemoteEnabled($value);\n            } elseif ($key === 'isJavascriptEnabled' || $key === 'is_javascript_enabled' || $key === 'enable_javascript') {\n                $this->setIsJavascriptEnabled($value);\n            } elseif ($key === 'isHtml5ParserEnabled' || $key === 'is_html5_parser_enabled' || $key === 'enable_html5_parser') {\n                $this->setIsHtml5ParserEnabled($value);\n            } elseif ($key === 'isFontSubsettingEnabled' || $key === 'is_font_subsetting_enabled' || $key === 'enable_font_subsetting') {\n                $this->setIsFontSubsettingEnabled($value);\n            } elseif ($key === 'debugPng' || $key === 'debug_png') {\n                $this->setDebugPng($value);\n            } elseif ($key === 'debugKeepTemp' || $key === 'debug_keep_temp') {\n                $this->setDebugKeepTemp($value);\n            } elseif ($key === 'debugCss' || $key === 'debug_css') {\n                $this->setDebugCss($value);\n            } elseif ($key === 'debugLayout' || $key === 'debug_layout') {\n                $this->setDebugLayout($value);\n            } elseif ($key === 'debugLayoutLines' || $key === 'debug_layout_lines') {\n                $this->setDebugLayoutLines($value);\n            } elseif ($key === 'debugLayoutBlocks' || $key === 'debug_layout_blocks') {\n                $this->setDebugLayoutBlocks($value);\n            } elseif ($key === 'debugLayoutInline' || $key === 'debug_layout_inline') {\n                $this->setDebugLayoutInline($value);\n            } elseif ($key === 'debugLayoutPaddingBox' || $key === 'debug_layout_padding_box') {\n                $this->setDebugLayoutPaddingBox($value);\n            } elseif ($key === 'pdfBackend' || $key === 'pdf_backend') {\n                $this->setPdfBackend($value);\n            } elseif ($key === 'pdflibLicense' || $key === 'pdflib_license') {\n                $this->setPdflibLicense($value);\n            } elseif ($key === 'httpContext' || $key === 'http_context') {\n                $this->setHttpContext($value);\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @return mixed\n     */\n    public function get($key)\n    {\n        if ($key === 'tempDir' || $key === 'temp_dir') {\n            return $this->getTempDir();\n        } elseif ($key === 'fontDir' || $key === 'font_dir') {\n            return $this->getFontDir();\n        } elseif ($key === 'fontCache' || $key === 'font_cache') {\n            return $this->getFontCache();\n        } elseif ($key === 'chroot') {\n            return $this->getChroot();\n        } elseif ($key === 'logOutputFile' || $key === 'log_output_file') {\n            return $this->getLogOutputFile();\n        } elseif ($key === 'defaultMediaType' || $key === 'default_media_type') {\n            return $this->getDefaultMediaType();\n        } elseif ($key === 'defaultPaperSize' || $key === 'default_paper_size') {\n            return $this->getDefaultPaperSize();\n        } elseif ($key === 'defaultPaperOrientation' || $key === 'default_paper_orientation') {\n            return $this->getDefaultPaperOrientation();\n        } elseif ($key === 'defaultFont' || $key === 'default_font') {\n            return $this->getDefaultFont();\n        } elseif ($key === 'dpi') {\n            return $this->getDpi();\n        } elseif ($key === 'fontHeightRatio' || $key === 'font_height_ratio') {\n            return $this->getFontHeightRatio();\n        } elseif ($key === 'isPhpEnabled' || $key === 'is_php_enabled' || $key === 'enable_php') {\n            return $this->getIsPhpEnabled();\n        } elseif ($key === 'isRemoteEnabled' || $key === 'is_remote_enabled' || $key === 'enable_remote') {\n            return $this->getIsRemoteEnabled();\n        } elseif ($key === 'isJavascriptEnabled' || $key === 'is_javascript_enabled' || $key === 'enable_javascript') {\n            return $this->getIsJavascriptEnabled();\n        } elseif ($key === 'isHtml5ParserEnabled' || $key === 'is_html5_parser_enabled' || $key === 'enable_html5_parser') {\n            return $this->getIsHtml5ParserEnabled();\n        } elseif ($key === 'isFontSubsettingEnabled' || $key === 'is_font_subsetting_enabled' || $key === 'enable_font_subsetting') {\n            return $this->getIsFontSubsettingEnabled();\n        } elseif ($key === 'debugPng' || $key === 'debug_png') {\n            return $this->getDebugPng();\n        } elseif ($key === 'debugKeepTemp' || $key === 'debug_keep_temp') {\n            return $this->getDebugKeepTemp();\n        } elseif ($key === 'debugCss' || $key === 'debug_css') {\n            return $this->getDebugCss();\n        } elseif ($key === 'debugLayout' || $key === 'debug_layout') {\n            return $this->getDebugLayout();\n        } elseif ($key === 'debugLayoutLines' || $key === 'debug_layout_lines') {\n            return $this->getDebugLayoutLines();\n        } elseif ($key === 'debugLayoutBlocks' || $key === 'debug_layout_blocks') {\n            return $this->getDebugLayoutBlocks();\n        } elseif ($key === 'debugLayoutInline' || $key === 'debug_layout_inline') {\n            return $this->getDebugLayoutInline();\n        } elseif ($key === 'debugLayoutPaddingBox' || $key === 'debug_layout_padding_box') {\n            return $this->getDebugLayoutPaddingBox();\n        } elseif ($key === 'pdfBackend' || $key === 'pdf_backend') {\n            return $this->getPdfBackend();\n        } elseif ($key === 'pdflibLicense' || $key === 'pdflib_license') {\n            return $this->getPdflibLicense();\n        } elseif ($key === 'httpContext' || $key === 'http_context') {\n            return $this->getHttpContext();\n        }\n        return null;\n    }\n\n    /**\n     * @param string $pdfBackend\n     * @return $this\n     */\n    public function setPdfBackend($pdfBackend)\n    {\n        $this->pdfBackend = $pdfBackend;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getPdfBackend()\n    {\n        return $this->pdfBackend;\n    }\n\n    /**\n     * @param string $pdflibLicense\n     * @return $this\n     */\n    public function setPdflibLicense($pdflibLicense)\n    {\n        $this->pdflibLicense = $pdflibLicense;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getPdflibLicense()\n    {\n        return $this->pdflibLicense;\n    }\n\n    /**\n     * @param array|string $chroot\n     * @return $this\n     */\n    public function setChroot($chroot, $delimiter = ',')\n    {\n        if (is_string($chroot)) {\n            $this->chroot = explode($delimiter, $chroot);\n        } elseif (is_array($chroot)) {\n            $this->chroot = $chroot;\n        }\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getChroot()\n    {\n        $chroot = [];\n        if (is_array($this->chroot)) {\n            $chroot = $this->chroot;\n        }\n        return $chroot;\n    }\n\n    /**\n     * @param boolean $debugCss\n     * @return $this\n     */\n    public function setDebugCss($debugCss)\n    {\n        $this->debugCss = $debugCss;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugCss()\n    {\n        return $this->debugCss;\n    }\n\n    /**\n     * @param boolean $debugKeepTemp\n     * @return $this\n     */\n    public function setDebugKeepTemp($debugKeepTemp)\n    {\n        $this->debugKeepTemp = $debugKeepTemp;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugKeepTemp()\n    {\n        return $this->debugKeepTemp;\n    }\n\n    /**\n     * @param boolean $debugLayout\n     * @return $this\n     */\n    public function setDebugLayout($debugLayout)\n    {\n        $this->debugLayout = $debugLayout;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayout()\n    {\n        return $this->debugLayout;\n    }\n\n    /**\n     * @param boolean $debugLayoutBlocks\n     * @return $this\n     */\n    public function setDebugLayoutBlocks($debugLayoutBlocks)\n    {\n        $this->debugLayoutBlocks = $debugLayoutBlocks;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutBlocks()\n    {\n        return $this->debugLayoutBlocks;\n    }\n\n    /**\n     * @param boolean $debugLayoutInline\n     * @return $this\n     */\n    public function setDebugLayoutInline($debugLayoutInline)\n    {\n        $this->debugLayoutInline = $debugLayoutInline;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutInline()\n    {\n        return $this->debugLayoutInline;\n    }\n\n    /**\n     * @param boolean $debugLayoutLines\n     * @return $this\n     */\n    public function setDebugLayoutLines($debugLayoutLines)\n    {\n        $this->debugLayoutLines = $debugLayoutLines;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutLines()\n    {\n        return $this->debugLayoutLines;\n    }\n\n    /**\n     * @param boolean $debugLayoutPaddingBox\n     * @return $this\n     */\n    public function setDebugLayoutPaddingBox($debugLayoutPaddingBox)\n    {\n        $this->debugLayoutPaddingBox = $debugLayoutPaddingBox;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugLayoutPaddingBox()\n    {\n        return $this->debugLayoutPaddingBox;\n    }\n\n    /**\n     * @param boolean $debugPng\n     * @return $this\n     */\n    public function setDebugPng($debugPng)\n    {\n        $this->debugPng = $debugPng;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getDebugPng()\n    {\n        return $this->debugPng;\n    }\n\n    /**\n     * @param string $defaultFont\n     * @return $this\n     */\n    public function setDefaultFont($defaultFont)\n    {\n        if (!($defaultFont === null || trim($defaultFont) === \"\")) {\n            $this->defaultFont = $defaultFont;\n        } else {\n            $this->defaultFont = \"serif\";\n        }\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultFont()\n    {\n        return $this->defaultFont;\n    }\n\n    /**\n     * @param string $defaultMediaType\n     * @return $this\n     */\n    public function setDefaultMediaType($defaultMediaType)\n    {\n        $this->defaultMediaType = $defaultMediaType;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultMediaType()\n    {\n        return $this->defaultMediaType;\n    }\n\n    /**\n     * @param string $defaultPaperSize\n     * @return $this\n     */\n    public function setDefaultPaperSize($defaultPaperSize)\n    {\n        $this->defaultPaperSize = $defaultPaperSize;\n        return $this;\n    }\n\n    /**\n     * @param string $defaultPaperOrientation\n     * @return $this\n     */\n    public function setDefaultPaperOrientation($defaultPaperOrientation)\n    {\n        $this->defaultPaperOrientation = $defaultPaperOrientation;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultPaperSize()\n    {\n        return $this->defaultPaperSize;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDefaultPaperOrientation()\n    {\n        return $this->defaultPaperOrientation;\n    }\n\n    /**\n     * @param int $dpi\n     * @return $this\n     */\n    public function setDpi($dpi)\n    {\n        $this->dpi = $dpi;\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getDpi()\n    {\n        return $this->dpi;\n    }\n\n    /**\n     * @param string $fontCache\n     * @return $this\n     */\n    public function setFontCache($fontCache)\n    {\n        $this->fontCache = $fontCache;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFontCache()\n    {\n        return $this->fontCache;\n    }\n\n    /**\n     * @param string $fontDir\n     * @return $this\n     */\n    public function setFontDir($fontDir)\n    {\n        $this->fontDir = $fontDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFontDir()\n    {\n        return $this->fontDir;\n    }\n\n    /**\n     * @param float $fontHeightRatio\n     * @return $this\n     */\n    public function setFontHeightRatio($fontHeightRatio)\n    {\n        $this->fontHeightRatio = $fontHeightRatio;\n        return $this;\n    }\n\n    /**\n     * @return float\n     */\n    public function getFontHeightRatio()\n    {\n        return $this->fontHeightRatio;\n    }\n\n    /**\n     * @param boolean $isFontSubsettingEnabled\n     * @return $this\n     */\n    public function setIsFontSubsettingEnabled($isFontSubsettingEnabled)\n    {\n        $this->isFontSubsettingEnabled = $isFontSubsettingEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsFontSubsettingEnabled()\n    {\n        return $this->isFontSubsettingEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isFontSubsettingEnabled()\n    {\n        return $this->getIsFontSubsettingEnabled();\n    }\n\n    /**\n     * @deprecated\n     * @param boolean $isHtml5ParserEnabled\n     * @return $this\n     */\n    public function setIsHtml5ParserEnabled($isHtml5ParserEnabled)\n    {\n        $this->isHtml5ParserEnabled = $isHtml5ParserEnabled;\n        return $this;\n    }\n\n    /**\n     * @deprecated\n     * @return boolean\n     */\n    public function getIsHtml5ParserEnabled()\n    {\n        return $this->isHtml5ParserEnabled;\n    }\n\n    /**\n     * @deprecated\n     * @return boolean\n     */\n    public function isHtml5ParserEnabled()\n    {\n        return $this->getIsHtml5ParserEnabled();\n    }\n\n    /**\n     * @param boolean $isJavascriptEnabled\n     * @return $this\n     */\n    public function setIsJavascriptEnabled($isJavascriptEnabled)\n    {\n        $this->isJavascriptEnabled = $isJavascriptEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsJavascriptEnabled()\n    {\n        return $this->isJavascriptEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isJavascriptEnabled()\n    {\n        return $this->getIsJavascriptEnabled();\n    }\n\n    /**\n     * @param boolean $isPhpEnabled\n     * @return $this\n     */\n    public function setIsPhpEnabled($isPhpEnabled)\n    {\n        $this->isPhpEnabled = $isPhpEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsPhpEnabled()\n    {\n        return $this->isPhpEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isPhpEnabled()\n    {\n        return $this->getIsPhpEnabled();\n    }\n\n    /**\n     * @param boolean $isRemoteEnabled\n     * @return $this\n     */\n    public function setIsRemoteEnabled($isRemoteEnabled)\n    {\n        $this->isRemoteEnabled = $isRemoteEnabled;\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getIsRemoteEnabled()\n    {\n        return $this->isRemoteEnabled;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function isRemoteEnabled()\n    {\n        return $this->getIsRemoteEnabled();\n    }\n\n    /**\n     * @param string $logOutputFile\n     * @return $this\n     */\n    public function setLogOutputFile($logOutputFile)\n    {\n        $this->logOutputFile = $logOutputFile;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLogOutputFile()\n    {\n        return $this->logOutputFile;\n    }\n\n    /**\n     * @param string $tempDir\n     * @return $this\n     */\n    public function setTempDir($tempDir)\n    {\n        $this->tempDir = $tempDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTempDir()\n    {\n        return $this->tempDir;\n    }\n\n    /**\n     * @param string $rootDir\n     * @return $this\n     */\n    public function setRootDir($rootDir)\n    {\n        $this->rootDir = $rootDir;\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getRootDir()\n    {\n        return $this->rootDir;\n    }\n\n    /**\n     * Sets the HTTP context\n     *\n     * @param resource|array $httpContext\n     * @return $this\n     */\n    public function setHttpContext($httpContext)\n    {\n        $this->httpContext = is_array($httpContext) ? stream_context_create($httpContext) : $httpContext;\n        return $this;\n    }\n\n    /**\n     * Returns the HTTP context\n     *\n     * @return resource\n     */\n    public function getHttpContext()\n    {\n        return $this->httpContext;\n    }\n}\n", "<?php\nnamespace Dompdf\\Tests;\n\nuse DOMDocument;\nuse Dompdf\\Adapter\\CPDF;\nuse Dompdf\\Css\\Stylesheet;\nuse Dompdf\\Dompdf;\nuse Dompdf\\Frame\\FrameTree;\nuse Dompdf\\Options;\nuse Dompdf\\Tests\\TestCase;\n\nclass DompdfTest extends TestCase\n{\n    public function testConstructor()\n    {\n        $dompdf = new Dompdf();\n        $this->assertInstanceOf(CPDF::class, $dompdf->getCanvas());\n        $this->assertSame(\"\", $dompdf->getProtocol());\n        $this->assertSame(\"\", $dompdf->getBaseHost());\n        $this->assertSame(\"\", $dompdf->getBasePath());\n        $this->assertIsArray($dompdf->getCallbacks());\n        $this->assertInstanceOf(Stylesheet::class, $dompdf->getCss());\n        $this->assertNull($dompdf->getDom());\n        $this->assertInstanceOf(Options::class, $dompdf->getOptions());\n        $this->assertFalse($dompdf->getQuirksmode());\n        $this->assertNull($dompdf->getTree());\n    }\n\n    public function testSetters()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->setBaseHost('test1');\n        $dompdf->setBasePath('test2');\n        $dompdf->setCallbacks(['test' => ['event' => 'test', 'f' => function() {}]]);\n        $dompdf->setCss(new Stylesheet($dompdf));\n        $dompdf->setDom(new DOMDocument());\n        $dompdf->setHttpContext(fopen(__DIR__ . \"/_files/jamaica.jpg\", 'r'));\n        $dompdf->setOptions(new Options());\n        $dompdf->setProtocol('test3');\n        $dompdf->setTree(new FrameTree($dompdf->getDom()));\n\n        $this->assertEquals('test1', $dompdf->getBaseHost());\n        $this->assertEquals('test2', $dompdf->getBasePath());\n        $this->assertCount(1, $dompdf->getCallbacks());\n        $this->assertInstanceOf(Stylesheet::class, $dompdf->getCss());\n        $this->assertInstanceOf(DOMDocument::class, $dompdf->getDom());\n        $this->assertIsResource($dompdf->getHttpContext());\n        $this->assertInstanceOf(Options::class, $dompdf->getOptions());\n        $this->assertEquals('test3', $dompdf->getProtocol());\n        $this->assertInstanceOf(FrameTree::class, $dompdf->getTree());\n\n        $dompdf = new Dompdf();\n        $dompdf->setHttpContext(['ssl' => ['verify_peer' => false]]);\n        $this->assertIsResource($dompdf->getHttpContext());\n    }\n\n    public function testLoadHtml()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->loadHtml('<html><body><strong>Hello</strong></body></html>');\n        $this->assertEquals('Hello', $dompdf->getDom()->textContent);\n\n        //Test when encoding parameter is used\n        $dompdf->loadHtml(mb_convert_encoding('<html><body><strong>Hello</strong></body></html>', 'windows-1252'), 'windows-1252');\n        $this->assertEquals('Hello', $dompdf->getDom()->textContent);\n    }\n\n    public function testRender()\n    {\n        $dompdf = new Dompdf();\n        $dompdf->loadHtml('<html><body><strong>Hello</strong></body></html>');\n        $dompdf->render();\n\n        $this->assertEquals('', $dompdf->getDom()->textContent);\n    }\n\n    public function callbacksProvider(): array\n    {\n        return [\n            [\"begin_page_reflow\", 1],\n            [\"begin_frame\", 3],\n            [\"end_frame\", 3],\n            [\"begin_page_render\", 1],\n            [\"end_page_render\", 1]\n        ];\n    }\n\n    /**\n     * @dataProvider callbacksProvider\n     */\n    public function testCallbacks(string $event, int $numCalls): void\n    {\n        $called = 0;\n\n        $dompdf = new Dompdf();\n        $dompdf->setCallbacks([\n            [\n                \"event\" => $event,\n                \"f\" => function ($infos) use (&$called) {\n                    $this->assertIsArray($infos);\n                    $this->assertCount(4, $infos);\n                    $called++;\n                }\n            ]\n        ]);\n\n        $dompdf->loadHtml(\"<html><body><p>Some text</p></body></html>\");\n        $dompdf->render();\n\n        $this->assertSame($numCalls, $called);\n    }\n\n    public function customCanvasProvider(): array\n    {\n        return [\n            [\"A4\", \"portrait\", true, \"auto\"],\n            [\"A5\", \"landscape\", true, \"A5 landscape\"],\n            [\"A5\", \"landscape\", false, \"A5 landscape\"],\n            [[0, 0, 300, 400], \"portrait\", true, \"300pt 400pt\"]\n        ];\n    }\n\n    /**\n     * Test that a custom canvas is not replaced on render if its size matches\n     * the desired paper size.\n     *\n     * @dataProvider customCanvasProvider\n     */\n    public function testCustomCanvas(\n        $size,\n        string $orientation,\n        bool $setPaper,\n        string $cssSize\n    ): void {\n        $options = new Options();\n        $options->setDefaultPaperSize(\"Letter\");\n\n        $dompdf = new Dompdf($options);\n\n        if ($setPaper) {\n            $dompdf->setPaper($size, $orientation);\n        }\n\n        $c1 = new CPDF($size, $orientation, $dompdf);\n        $dompdf->setCanvas($c1);\n        $dompdf->loadHtml(\"<html><head><style>@page { size: $cssSize; }</style></head><body></body></html>\");\n        $dompdf->render();\n        $c2 = $dompdf->getCanvas();\n\n        $this->assertSame($c1, $c2);\n    }\n\n    public function testSpaceAtStartOfSecondInlineTag()\n    {\n        $text_frame_contents = [];\n\n        $dompdf = new Dompdf();\n\n        // Use a callback to inspect the frame tree; otherwise FrameReflower\\Page::reflow()\n        // will dispose of it before dompdf->render finishes\n        $dompdf->setCallbacks(['test' => [\n            'event' => 'end_page_render',\n            'f' => function($params) use (&$text_frame_contents) {\n                $frame = $params[\"frame\"];\n                foreach ($frame->get_children() as $child) {\n                    foreach ($child->get_children() as $grandchild) {\n                        $text_frame_contents[] = $grandchild->get_text();\n                    }\n                }\n            }\n        ]]);\n\n        $dompdf->loadHtml('<html><body><span>one</span><span> - two</span></body></html>');\n        $dompdf->render();\n\n        $this->assertEquals(\"one\", $text_frame_contents[0]);\n        $this->assertEquals(\" - two\", $text_frame_contents[1]);\n    }\n}\n"], "filenames": ["src/Options.php", "tests/DompdfTest.php"], "buggy_code_start_loc": [299, 24], "buggy_code_end_loc": [299, 25], "fixing_code_start_loc": [300, 23], "fixing_code_end_loc": [312, 23], "type": "CWE-918", "message": "Server-Side Request Forgery (SSRF) in GitHub repository dompdf/dompdf prior to 2.0.0.", "other": {"cve": {"id": "CVE-2022-0085", "sourceIdentifier": "security@huntr.dev", "published": "2022-06-28T15:15:08.090", "lastModified": "2022-07-07T17:48:20.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Server-Side Request Forgery (SSRF) in GitHub repository dompdf/dompdf prior to 2.0.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Server-Side Request Forgery (SSRF) en el repositorio de GitHub dompdf/dompdf versiones anteriores a 2.0.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 2.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dompdf_project:dompdf:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "CF3441FB-3B15-4935-8A8F-964D7DDFBCAD"}]}]}], "references": [{"url": "https://github.com/dompdf/dompdf/commit/bb1ef65011a14730b7cfbe73506b4bb8a03704bd", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/73dbcc78-5ba9-492f-9133-13bbc9f31236", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dompdf/dompdf/commit/bb1ef65011a14730b7cfbe73506b4bb8a03704bd"}}