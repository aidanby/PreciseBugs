{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/data_flow_ops.cc.\n\n#include <limits.h>\n\n#include <vector>\n\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/device_base.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/map_util.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/thread_annotations.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nclass GetSessionHandleOp : public OpKernel {\n public:\n  explicit GetSessionHandleOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& val = ctx->input(0);\n    auto session_state = ctx->session_state();\n    OP_REQUIRES(ctx, session_state != nullptr,\n                errors::FailedPrecondition(\n                    \"GetSessionHandle called on null session state\"));\n    int64 id = session_state->GetNewId();\n    TensorStore::TensorAndKey tk{val, id, requested_device()};\n    OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));\n\n    Tensor* handle = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &handle));\n    if (ctx->expected_output_dtype(0) == DT_RESOURCE) {\n      ResourceHandle resource_handle = MakeResourceHandle<Tensor>(\n          ctx, SessionState::kTensorHandleResourceTypeName,\n          tk.GetHandle(name()));\n      resource_handle.set_maybe_type_name(\n          SessionState::kTensorHandleResourceTypeName);\n      handle->scalar<ResourceHandle>()() = resource_handle;\n    } else {\n      // Legacy behavior in V1.\n      handle->flat<tstring>().setConstant(tk.GetHandle(name()));\n    }\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionHandleOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionHandle\").Device(DEVICE_CPU),\n                        GetSessionHandleOp);\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionHandleV2\").Device(DEVICE_CPU),\n                        GetSessionHandleOp);\n\n#define REGISTER_GPU_KERNEL(type)                         \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionHandle\")        \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"handle\")       \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          GetSessionHandleOp)             \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionHandleV2\")      \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"handle\")       \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          GetSessionHandleOp)\n\nTF_CALL_NUMBER_TYPES(REGISTER_GPU_KERNEL);\nREGISTER_GPU_KERNEL(bool);\n#undef REGISTER_GPU_KERNEL\n\n\nclass GetSessionTensorOp : public OpKernel {\n public:\n  explicit GetSessionTensorOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n    Tensor val;\n    OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));\n    ctx->set_output(0, val);\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionTensorOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionTensor\").Device(DEVICE_CPU),\n                        GetSessionTensorOp);\n\n#define REGISTER_GPU_KERNEL(type)                             \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionTensor\")            \\\n                              .Device(DEVICE_GPU)             \\\n                              .HostMemory(\"handle\")           \\\n                              .TypeConstraint<type>(\"dtype\"), \\\n                          GetSessionTensorOp)\n\nTF_CALL_NUMBER_TYPES(REGISTER_GPU_KERNEL);\nREGISTER_GPU_KERNEL(bool);\n#undef REGISTER_GPU_KERNEL\n\n\nclass DeleteSessionTensorOp : public OpKernel {\n public:\n  explicit DeleteSessionTensorOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n    OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"DeleteSessionTensor\").Device(DEVICE_CPU),\n                        DeleteSessionTensorOp);\nREGISTER_KERNEL_BUILDER(\n    Name(\"DeleteSessionTensor\").Device(DEVICE_GPU).HostMemory(\"handle\"),\n    DeleteSessionTensorOp);\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/data_flow_ops.cc.\n\n#include <limits.h>\n\n#include <vector>\n\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/device_base.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/map_util.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/thread_annotations.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nclass GetSessionHandleOp : public OpKernel {\n public:\n  explicit GetSessionHandleOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& val = ctx->input(0);\n    auto session_state = ctx->session_state();\n    OP_REQUIRES(ctx, session_state != nullptr,\n                errors::FailedPrecondition(\n                    \"GetSessionHandle called on null session state\"));\n    int64 id = session_state->GetNewId();\n    TensorStore::TensorAndKey tk{val, id, requested_device()};\n    OP_REQUIRES_OK(ctx, ctx->tensor_store()->AddTensor(name(), tk));\n\n    Tensor* handle = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &handle));\n    if (ctx->expected_output_dtype(0) == DT_RESOURCE) {\n      ResourceHandle resource_handle = MakeResourceHandle<Tensor>(\n          ctx, SessionState::kTensorHandleResourceTypeName,\n          tk.GetHandle(name()));\n      resource_handle.set_maybe_type_name(\n          SessionState::kTensorHandleResourceTypeName);\n      handle->scalar<ResourceHandle>()() = resource_handle;\n    } else {\n      // Legacy behavior in V1.\n      handle->flat<tstring>().setConstant(tk.GetHandle(name()));\n    }\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionHandleOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionHandle\").Device(DEVICE_CPU),\n                        GetSessionHandleOp);\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionHandleV2\").Device(DEVICE_CPU),\n                        GetSessionHandleOp);\n\n#define REGISTER_GPU_KERNEL(type)                         \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionHandle\")        \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"handle\")       \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          GetSessionHandleOp)             \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionHandleV2\")      \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"handle\")       \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          GetSessionHandleOp)\n\nTF_CALL_NUMBER_TYPES(REGISTER_GPU_KERNEL);\nREGISTER_GPU_KERNEL(bool);\n#undef REGISTER_GPU_KERNEL\n\nclass GetSessionTensorOp : public OpKernel {\n public:\n  explicit GetSessionTensorOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n    Tensor val;\n    auto session_state = ctx->session_state();\n    OP_REQUIRES(ctx, session_state != nullptr,\n                errors::FailedPrecondition(\n                    \"GetSessionTensor called on null session state\"));\n    OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));\n    ctx->set_output(0, val);\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(GetSessionTensorOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"GetSessionTensor\").Device(DEVICE_CPU),\n                        GetSessionTensorOp);\n\n#define REGISTER_GPU_KERNEL(type)                             \\\n  REGISTER_KERNEL_BUILDER(Name(\"GetSessionTensor\")            \\\n                              .Device(DEVICE_GPU)             \\\n                              .HostMemory(\"handle\")           \\\n                              .TypeConstraint<type>(\"dtype\"), \\\n                          GetSessionTensorOp)\n\nTF_CALL_NUMBER_TYPES(REGISTER_GPU_KERNEL);\nREGISTER_GPU_KERNEL(bool);\n#undef REGISTER_GPU_KERNEL\n\nclass DeleteSessionTensorOp : public OpKernel {\n public:\n  explicit DeleteSessionTensorOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n    auto session_state = ctx->session_state();\n    OP_REQUIRES(ctx, session_state != nullptr,\n                errors::FailedPrecondition(\n                    \"DeleteSessionTensor called on null session state\"));\n    OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));\n  }\n\n  TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"DeleteSessionTensor\").Device(DEVICE_CPU),\n                        DeleteSessionTensorOp);\nREGISTER_KERNEL_BUILDER(\n    Name(\"DeleteSessionTensor\").Device(DEVICE_GPU).HostMemory(\"handle\"),\n    DeleteSessionTensorOp);\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/session_ops.cc"], "buggy_code_start_loc": [94], "buggy_code_end_loc": [135], "fixing_code_start_loc": [93], "fixing_code_end_loc": [141], "type": "CWE-476", "message": "TensorFlow is an end-to-end open source platform for machine learning. In eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference. The implementation(https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid. Thus, in eager mode, `ctx->session_state()` is nullptr and the call of the member function is undefined behavior. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29518", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:11.437", "lastModified": "2021-05-20T16:01:07.103", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. In eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference. The implementation(https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid. Thus, in eager mode, `ctx->session_state()` is nullptr and the call of the member function is undefined behavior. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;En el modo eager (predeterminado en TF versiones 2.0 y posteriores), las operaciones de sesi\u00f3n no son v\u00e1lidas.&#xa0;Sin embargo, los usuarios a\u00fan pueden llamar a las operaciones sin procesar asociadas con ellos y activar una desreferencia de puntero null.&#xa0;La implementaci\u00f3n (https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) elimina las referencias al puntero de estado de la sesi\u00f3n sin comprobar si es v\u00e1lido.&#xa0;Por lo tanto, en modo eager, \"ctx-)session_state()\" es nullptr y la llamada de la funci\u00f3n miembro es un comportamiento indefinido.&#xa0;La correcci\u00f3n ser\u00e1 inclu\u00edda en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-62gx-355r-9fhg", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba"}}