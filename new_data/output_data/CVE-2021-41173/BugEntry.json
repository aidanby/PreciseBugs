{"buggy_code": ["[\n  {\n    \"name\": \"CorruptedDAG\",\n    \"uid\": \"GETH-2020-01\",\n    \"summary\": \"Mining nodes will generate erroneous PoW on epochs > `385`.\",\n    \"description\": \"A mining flaw could cause miners to erroneously calculate PoW, due to an index overflow, if DAG size is exceeding the maximum 32 bit unsigned value.\\n\\nThis occurred on the ETC chain on 2020-11-06. This is likely to trigger for ETH mainnet around block `11550000`/epoch `385`, slated to occur early January 2021.\\n\\nThis issue is relevant only for miners, non-mining nodes are unaffected, since non-mining nodes use a smaller verification cache instead of a full DAG.\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/pull/21793\",\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/commit/567d41d9363706b4b13ce0903804e8acf214af49\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-v592-xf75-856p\"\n    ],\n    \"introduced\": \"v1.6.0\",\n    \"fixed\": \"v1.9.24\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Medium\",\n    \"CVE\": \"CVE-2020-26240\",\n    \"check\": \"Geth\\\\/v1\\\\.(6|7|8)\\\\..*|Geth\\\\/v1\\\\.9\\\\.\\\\d-.*|Geth\\\\/v1\\\\.9\\\\.1.*|Geth\\\\/v1\\\\.9\\\\.2(0|1|2|3)-.*\"\n  },\n  {\n    \"name\": \"Denial of service due to Go CVE-2020-28362\",\n    \"uid\": \"GETH-2020-02\",\n    \"summary\": \"A denial-of-service issue can be used to crash Geth nodes during block processing, due to an underlying bug in Go (CVE-2020-28362) versions < `1.15.5`, or `<1.14.12`\",\n    \"description\": \"The DoS issue can be used to crash all Geth nodes during block processing, the effects of which would be that a major part of the Ethereum network went offline.\\n\\nOutside of Go-Ethereum, the issue is most likely relevant for all forks of Geth (such as TurboGeth or ETC\u2019s core-geth) which is built with versions of Go which contains the vulnerability.\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM\",\n      \"https://github.com/golang/go/issues/42552\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-m6gx-rhvj-fh52\"\n    ],\n    \"introduced\": \"v0.0.0\",\n    \"fixed\": \"v1.9.24\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-28362\",\n    \"check\": \"Geth.*\\\\/go1\\\\.(11(.*)|12(.*)|13(.*)|14|14\\\\.(\\\\d|10|11|)|15|15\\\\.[0-4])$\"\n  },\n  {\n    \"name\": \"ShallowCopy\",\n    \"uid\": \"GETH-2020-03\",\n    \"summary\": \"A consensus flaw in Geth, related to `datacopy` precompile\",\n    \"description\": \"Geth erroneously performed a 'shallow' copy when the precompiled `datacopy` (at `0x00...04`) was invoked. An attacker could deploy a contract that uses the shallow copy to corrupt the contents of the `RETURNDATA`, thus causing a consensus failure.\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-69v6-xc2j-r2jf\"\n    ],\n    \"introduced\": \"v1.9.7\",\n    \"fixed\": \"v1.9.17\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-26241\",\n    \"check\": \"Geth\\\\/v1\\\\.9\\\\.(7|8|9|10|11|12|13|14|15|16).*$\"\n  },\n  {\n    \"name\": \"Geth DoS via MULMOD\",\n    \"uid\": \"GETH-2020-04\",\n    \"summary\": \"A denial-of-service issue can be used to crash Geth nodes during block processing\",\n    \"description\": \"Affected versions suffer from a vulnerability which can be exploited through the `MULMOD` operation, by specifying a modulo of `0`: `mulmod(a,b,0)`, causing a `panic` in the underlying library. \\nThe crash was in the `uint256` library, where a buffer [underflowed](https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L442).\\n\\n\\tif `d == 0`, `dLen` remains `0`\\n\\nand https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L451 will try to access index `[-1]`.\\n\\nThe `uint256` library was first merged in this [commit](https://github.com/ethereum/go-ethereum/commit/cf6674539c589f80031f3371a71c6a80addbe454), on 2020-06-08. \\nExploiting this vulnerabilty would cause all vulnerable nodes to drop off the network. \\n\\nThe issue was brought to our attention through a [bug report](https://github.com/ethereum/go-ethereum/issues/21367), showing a `panic` occurring on sync from genesis on the Ropsten network.\\n \\nIt was estimated that the least obvious way to fix this would be to merge the fix into `uint256`, make a new release of that library and then update the geth-dependency.\\n\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-jm5c-rv3w-w83m\",\n      \"https://github.com/holiman/uint256/releases/tag/v1.1.1\",\n      \"https://github.com/holiman/uint256/pull/80\",\n      \"https://github.com/ethereum/go-ethereum/pull/21368\"\n    ],\n    \"introduced\": \"v1.9.16\",\n    \"fixed\": \"v1.9.18\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-26242\",\n    \"check\": \"Geth\\\\/v1\\\\.9.(16|17).*$\"\n  },\n  {\n    \"name\": \"LES Server DoS via GetProofsV2\",\n    \"uid\": \"GETH-2020-05\",\n    \"summary\": \"A DoS vulnerability can make a LES server crash.\",\n    \"description\": \"A DoS vulnerability can make a LES server crash via malicious GetProofsV2 request from a connected LES client.\\n\\nThe vulnerability was patched in #21896.\\n\\nThis vulnerability only concern users explicitly running geth as a light server\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-r33q-22hv-j29q\",\n      \"https://github.com/ethereum/go-ethereum/pull/21896\"\n    ],\n    \"introduced\": \"v1.8.0\",\n    \"fixed\": \"v1.9.25\",\n    \"published\": \"2020-12-10\",\n    \"severity\": \"Medium\",\n    \"CVE\": \"CVE-2020-26264\",\n    \"check\": \"(Geth\\\\/v1\\\\.8\\\\.*)|(Geth\\\\/v1\\\\.9\\\\.\\\\d-.*)|(Geth\\\\/v1\\\\.9\\\\.1\\\\d-.*)|(Geth\\\\/v1\\\\.9\\\\.(20|21|22|23|24)-.*)$\"\n  },\n  {\n    \"name\": \"SELFDESTRUCT-recreate consensus flaw\",\n    \"uid\": \"GETH-2020-06\",\n    \"introduced\": \"v1.9.4\",\n    \"fixed\": \"v1.9.20\",\n    \"summary\": \"A consensus-vulnerability in Geth could cause a chain split, where vulnerable versions refuse to accept the canonical chain.\",\n    \"description\": \"A flaw was repoted at 2020-08-11 by John Youngseok Yang (Software Platform Lab), where a particular sequence of transactions could cause a consensus failure.\\n\\n- Tx 1:\\n - `sender` invokes `caller`.\\n - `caller` invokes `0xaa`. `0xaa` has 3 wei, does a self-destruct-to-self\\n - `caller` does a  `1 wei` -call to `0xaa`, who thereby has 1 wei (the code in `0xaa` still executed, since the tx is still ongoing, but doesn't redo the selfdestruct, it takes a different path if callvalue is non-zero)\\n\\n-Tx 2:\\n - `sender` does a 5-wei call to 0xaa. No exec (since no code). \\n\\nIn geth, the result would be that `0xaa` had `6 wei`, whereas OE reported (correctly) `5` wei. Furthermore, in geth, if the second tx was not executed, the `0xaa` would be destructed, resulting in `0 wei`. Thus obviously wrong. \\n\\nIt was determined that the root cause was this [commit](https://github.com/ethereum/go-ethereum/commit/223b950944f494a5b4e0957fd9f92c48b09037ad) from [this PR](https://github.com/ethereum/go-ethereum/pull/19953). The semantics of `createObject` was subtly changd, into returning a non-nil object (with `deleted=true`) where it previously did not if the account had been destructed. This return value caused the new object to inherit the old `balance`.\\n\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-xw37-57qp-9mm4\"\n    ],\n    \"published\": \"2020-12-10\",\n    \"severity\": \"High\",\n    \"CVE\": \"CVE-2020-26265\",\n    \"check\": \"(Geth\\\\/v1\\\\.9\\\\.(4|5|6|7|8|9)-.*)|(Geth\\\\/v1\\\\.9\\\\.1\\\\d-.*)$\"\n  },\n  {\n    \"name\": \"Not ready for London upgrade\",\n    \"uid\": \"GETH-2021-01\",\n    \"summary\": \"The client is not ready for the 'London' technical upgrade, and will deviate from the canonical chain when the London upgrade occurs (at block '12965000' around August 4, 2021.\",\n    \"description\": \"At (or around) August 4, Ethereum will undergo a technical upgrade called 'London'. Clients not upgraded will fail to progress on the canonical chain.\",\n    \"links\": [\n      \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n      \"https://notes.ethereum.org/@timbeiko/ropsten-postmortem\"\n    ],\n    \"introduced\": \"v1.10.1\",\n    \"fixed\": \"v1.10.6\",\n    \"published\": \"2021-07-22\",\n    \"severity\": \"High\",\n    \"check\": \"(Geth\\\\/v1\\\\.10\\\\.(1|2|3|4|5)-.*)$\"\n  },\n  {\n    \"name\": \"RETURNDATA corruption via datacopy\",\n    \"uid\": \"GETH-2021-02\",\n    \"summary\": \"A consensus-flaw in the Geth EVM could cause a node to deviate from the canonical chain.\",\n    \"description\": \"A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different `stateRoot` when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split: mainnet splitting in two forks.\\n\\nAll Geth versions supporting the London hard fork are vulnerable (the bug is older than London), so all users should update.\\n\\nThis bug was exploited on Mainnet at block 13107518.\\n\\nCredits for the discovery go to @guidovranken (working for Sentnl during an audit of the Telos EVM) and reported via bounty@ethereum.org.\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/blob/master/docs/postmortems/2021-08-22-split-postmortem.md\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-9856-9gg9-qcmq\",\n      \"https://github.com/ethereum/go-ethereum/releases/tag/v1.10.8\"\n    ],\n    \"introduced\": \"v1.10.0\",\n    \"fixed\": \"v1.10.8\",\n    \"published\": \"2021-08-24\",\n    \"severity\": \"High\",\n    \"CVE\": \"CVE-2021-39137\",\n    \"check\": \"(Geth\\\\/v1\\\\.10\\\\.(0|1|2|3|4|5|6|7)-.*)$\"\n  }\n]\n", "untrusted comment: signature from minisign secret key\nRWQk7Lo5TQgd+66wU0ZNQlDYTsqSFA2o1aeaPo1ccQMJK/EMFyirawrl8Rq4NJI9md6x1xUthAT0Lr3HeTIQhYBGRtYcG5su0A0=\ntrusted comment: timestamp:1630999630\tfile:vulnerabilities.json\nezWYr/g7o55e/Yb+rdnp5fZoER4zVBxsm7g0yNt0/hPUhLa86uM1hRTE1Boeg1HxajcVe+iNEmsB/rIokBq3Bg==\n"], "fixing_code": ["[\n  {\n    \"name\": \"CorruptedDAG\",\n    \"uid\": \"GETH-2020-01\",\n    \"summary\": \"Mining nodes will generate erroneous PoW on epochs > `385`.\",\n    \"description\": \"A mining flaw could cause miners to erroneously calculate PoW, due to an index overflow, if DAG size is exceeding the maximum 32 bit unsigned value.\\n\\nThis occurred on the ETC chain on 2020-11-06. This is likely to trigger for ETH mainnet around block `11550000`/epoch `385`, slated to occur early January 2021.\\n\\nThis issue is relevant only for miners, non-mining nodes are unaffected, since non-mining nodes use a smaller verification cache instead of a full DAG.\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/pull/21793\",\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/commit/567d41d9363706b4b13ce0903804e8acf214af49\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-v592-xf75-856p\"\n    ],\n    \"introduced\": \"v1.6.0\",\n    \"fixed\": \"v1.9.24\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Medium\",\n    \"CVE\": \"CVE-2020-26240\",\n    \"check\": \"Geth\\\\/v1\\\\.(6|7|8)\\\\..*|Geth\\\\/v1\\\\.9\\\\.\\\\d-.*|Geth\\\\/v1\\\\.9\\\\.1.*|Geth\\\\/v1\\\\.9\\\\.2(0|1|2|3)-.*\"\n  },\n  {\n    \"name\": \"Denial of service due to Go CVE-2020-28362\",\n    \"uid\": \"GETH-2020-02\",\n    \"summary\": \"A denial-of-service issue can be used to crash Geth nodes during block processing, due to an underlying bug in Go (CVE-2020-28362) versions < `1.15.5`, or `<1.14.12`\",\n    \"description\": \"The DoS issue can be used to crash all Geth nodes during block processing, the effects of which would be that a major part of the Ethereum network went offline.\\n\\nOutside of Go-Ethereum, the issue is most likely relevant for all forks of Geth (such as TurboGeth or ETC\u2019s core-geth) which is built with versions of Go which contains the vulnerability.\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM\",\n      \"https://github.com/golang/go/issues/42552\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-m6gx-rhvj-fh52\"\n    ],\n    \"introduced\": \"v0.0.0\",\n    \"fixed\": \"v1.9.24\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-28362\",\n    \"check\": \"Geth.*\\\\/go1\\\\.(11(.*)|12(.*)|13(.*)|14|14\\\\.(\\\\d|10|11|)|15|15\\\\.[0-4])$\"\n  },\n  {\n    \"name\": \"ShallowCopy\",\n    \"uid\": \"GETH-2020-03\",\n    \"summary\": \"A consensus flaw in Geth, related to `datacopy` precompile\",\n    \"description\": \"Geth erroneously performed a 'shallow' copy when the precompiled `datacopy` (at `0x00...04`) was invoked. An attacker could deploy a contract that uses the shallow copy to corrupt the contents of the `RETURNDATA`, thus causing a consensus failure.\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-69v6-xc2j-r2jf\"\n    ],\n    \"introduced\": \"v1.9.7\",\n    \"fixed\": \"v1.9.17\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-26241\",\n    \"check\": \"Geth\\\\/v1\\\\.9\\\\.(7|8|9|10|11|12|13|14|15|16).*$\"\n  },\n  {\n    \"name\": \"Geth DoS via MULMOD\",\n    \"uid\": \"GETH-2020-04\",\n    \"summary\": \"A denial-of-service issue can be used to crash Geth nodes during block processing\",\n    \"description\": \"Affected versions suffer from a vulnerability which can be exploited through the `MULMOD` operation, by specifying a modulo of `0`: `mulmod(a,b,0)`, causing a `panic` in the underlying library. \\nThe crash was in the `uint256` library, where a buffer [underflowed](https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L442).\\n\\n\\tif `d == 0`, `dLen` remains `0`\\n\\nand https://github.com/holiman/uint256/blob/4ce82e695c10ddad57215bdbeafb68b8c5df2c30/uint256.go#L451 will try to access index `[-1]`.\\n\\nThe `uint256` library was first merged in this [commit](https://github.com/ethereum/go-ethereum/commit/cf6674539c589f80031f3371a71c6a80addbe454), on 2020-06-08. \\nExploiting this vulnerabilty would cause all vulnerable nodes to drop off the network. \\n\\nThe issue was brought to our attention through a [bug report](https://github.com/ethereum/go-ethereum/issues/21367), showing a `panic` occurring on sync from genesis on the Ropsten network.\\n \\nIt was estimated that the least obvious way to fix this would be to merge the fix into `uint256`, make a new release of that library and then update the geth-dependency.\\n\",\n    \"links\": [\n      \"https://blog.ethereum.org/2020/11/12/geth_security_release/\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-jm5c-rv3w-w83m\",\n      \"https://github.com/holiman/uint256/releases/tag/v1.1.1\",\n      \"https://github.com/holiman/uint256/pull/80\",\n      \"https://github.com/ethereum/go-ethereum/pull/21368\"\n    ],\n    \"introduced\": \"v1.9.16\",\n    \"fixed\": \"v1.9.18\",\n    \"published\": \"2020-11-12\",\n    \"severity\": \"Critical\",\n    \"CVE\": \"CVE-2020-26242\",\n    \"check\": \"Geth\\\\/v1\\\\.9.(16|17).*$\"\n  },\n  {\n    \"name\": \"LES Server DoS via GetProofsV2\",\n    \"uid\": \"GETH-2020-05\",\n    \"summary\": \"A DoS vulnerability can make a LES server crash.\",\n    \"description\": \"A DoS vulnerability can make a LES server crash via malicious GetProofsV2 request from a connected LES client.\\n\\nThe vulnerability was patched in #21896.\\n\\nThis vulnerability only concern users explicitly running geth as a light server\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-r33q-22hv-j29q\",\n      \"https://github.com/ethereum/go-ethereum/pull/21896\"\n    ],\n    \"introduced\": \"v1.8.0\",\n    \"fixed\": \"v1.9.25\",\n    \"published\": \"2020-12-10\",\n    \"severity\": \"Medium\",\n    \"CVE\": \"CVE-2020-26264\",\n    \"check\": \"(Geth\\\\/v1\\\\.8\\\\.*)|(Geth\\\\/v1\\\\.9\\\\.\\\\d-.*)|(Geth\\\\/v1\\\\.9\\\\.1\\\\d-.*)|(Geth\\\\/v1\\\\.9\\\\.(20|21|22|23|24)-.*)$\"\n  },\n  {\n    \"name\": \"SELFDESTRUCT-recreate consensus flaw\",\n    \"uid\": \"GETH-2020-06\",\n    \"introduced\": \"v1.9.4\",\n    \"fixed\": \"v1.9.20\",\n    \"summary\": \"A consensus-vulnerability in Geth could cause a chain split, where vulnerable versions refuse to accept the canonical chain.\",\n    \"description\": \"A flaw was repoted at 2020-08-11 by John Youngseok Yang (Software Platform Lab), where a particular sequence of transactions could cause a consensus failure.\\n\\n- Tx 1:\\n - `sender` invokes `caller`.\\n - `caller` invokes `0xaa`. `0xaa` has 3 wei, does a self-destruct-to-self\\n - `caller` does a  `1 wei` -call to `0xaa`, who thereby has 1 wei (the code in `0xaa` still executed, since the tx is still ongoing, but doesn't redo the selfdestruct, it takes a different path if callvalue is non-zero)\\n\\n-Tx 2:\\n - `sender` does a 5-wei call to 0xaa. No exec (since no code). \\n\\nIn geth, the result would be that `0xaa` had `6 wei`, whereas OE reported (correctly) `5` wei. Furthermore, in geth, if the second tx was not executed, the `0xaa` would be destructed, resulting in `0 wei`. Thus obviously wrong. \\n\\nIt was determined that the root cause was this [commit](https://github.com/ethereum/go-ethereum/commit/223b950944f494a5b4e0957fd9f92c48b09037ad) from [this PR](https://github.com/ethereum/go-ethereum/pull/19953). The semantics of `createObject` was subtly changd, into returning a non-nil object (with `deleted=true`) where it previously did not if the account had been destructed. This return value caused the new object to inherit the old `balance`.\\n\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-xw37-57qp-9mm4\"\n    ],\n    \"published\": \"2020-12-10\",\n    \"severity\": \"High\",\n    \"CVE\": \"CVE-2020-26265\",\n    \"check\": \"(Geth\\\\/v1\\\\.9\\\\.(4|5|6|7|8|9)-.*)|(Geth\\\\/v1\\\\.9\\\\.1\\\\d-.*)$\"\n  },\n  {\n    \"name\": \"Not ready for London upgrade\",\n    \"uid\": \"GETH-2021-01\",\n    \"summary\": \"The client is not ready for the 'London' technical upgrade, and will deviate from the canonical chain when the London upgrade occurs (at block '12965000' around August 4, 2021.\",\n    \"description\": \"At (or around) August 4, Ethereum will undergo a technical upgrade called 'London'. Clients not upgraded will fail to progress on the canonical chain.\",\n    \"links\": [\n      \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n      \"https://notes.ethereum.org/@timbeiko/ropsten-postmortem\"\n    ],\n    \"introduced\": \"v1.10.1\",\n    \"fixed\": \"v1.10.6\",\n    \"published\": \"2021-07-22\",\n    \"severity\": \"High\",\n    \"check\": \"(Geth\\\\/v1\\\\.10\\\\.(1|2|3|4|5)-.*)$\"\n  },\n  {\n    \"name\": \"RETURNDATA corruption via datacopy\",\n    \"uid\": \"GETH-2021-02\",\n    \"summary\": \"A consensus-flaw in the Geth EVM could cause a node to deviate from the canonical chain.\",\n    \"description\": \"A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different `stateRoot` when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split: mainnet splitting in two forks.\\n\\nAll Geth versions supporting the London hard fork are vulnerable (the bug is older than London), so all users should update.\\n\\nThis bug was exploited on Mainnet at block 13107518.\\n\\nCredits for the discovery go to @guidovranken (working for Sentnl during an audit of the Telos EVM) and reported via bounty@ethereum.org.\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/blob/master/docs/postmortems/2021-08-22-split-postmortem.md\",\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-9856-9gg9-qcmq\",\n      \"https://github.com/ethereum/go-ethereum/releases/tag/v1.10.8\"\n    ],\n    \"introduced\": \"v1.10.0\",\n    \"fixed\": \"v1.10.8\",\n    \"published\": \"2021-08-24\",\n    \"severity\": \"High\",\n    \"CVE\": \"CVE-2021-39137\",\n    \"check\": \"(Geth\\\\/v1\\\\.10\\\\.(0|1|2|3|4|5|6|7)-.*)$\"\n  },\n  {\n    \"name\": \"DoS via maliciously crafted p2p message\",\n    \"uid\": \"GETH-2021-03\",\n    \"summary\": \"A vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer.\",\n    \"description\": \"A vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer.\\nFurther details will be released at a later point in time, in accordance with our official disclosure policy.\",\n    \"links\": [\n      \"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-59hh-656j-3p7v\",\n      \"https://geth.ethereum.org/docs/vulnerabilities/vulnerabilities\"\n    ],\n    \"introduced\": \"v1.10.0\",\n    \"fixed\": \"v1.10.9\",\n    \"published\": \"2021-10-24\",\n    \"severity\": \"Medium\",\n    \"CVE\": \"CVE-2021-41173\",\n    \"check\": \"(Geth\\\\/v1\\\\.10\\\\.(0|1|2|3|4|5|6|7|8)-.*)$\"\n  }\n]\n", "untrusted comment: signature from minisign secret key\nRWQk7Lo5TQgd+8l5duLP0gUKWHwGDmqe1FDRgmbZ0OE0D4dnw8W2MJhhq6ckZKhGnD7zW1Htw63mbnHuy7TDo0Oz99qwFfzv1w8=\ntrusted comment: timestamp:1635075909\tfile:vulnerabilities.json\n827bn9OQI+f9gdKa1JSPYmnCpDGSKEWI2C9Ywz7Mlnvzi6Z9Ec+h+R5t/v9x7CLwXK8l5TMXgm6sv5JBduv8Dw==\n"], "filenames": ["docs/_vulnerabilities/vulnerabilities.json", "docs/_vulnerabilities/vulnerabilities.json.minisig"], "buggy_code_start_loc": [134, 2], "buggy_code_end_loc": [134, 5], "fixing_code_start_loc": [135, 2], "fixing_code_end_loc": [151, 5], "type": "NVD-CWE-noinfo", "message": "Go Ethereum is the official Golang implementation of the Ethereum protocol. Prior to version 1.10.9, a vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer. Version v1.10.9 contains patches to the vulnerability. There are no known workarounds aside from upgrading.", "other": {"cve": {"id": "CVE-2021-41173", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-26T14:15:08.130", "lastModified": "2021-10-28T20:55:43.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Go Ethereum is the official Golang implementation of the Ethereum protocol. Prior to version 1.10.9, a vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer. Version v1.10.9 contains patches to the vulnerability. There are no known workarounds aside from upgrading."}, {"lang": "es", "value": "Go Ethereum es la implementaci\u00f3n oficial en Golang del protocolo Ethereum. En versiones anteriores a 1.10.9, un nodo vulnerable es susceptible de bloquearse cuando procesa un mensaje maliciosamente dise\u00f1ado de un compa\u00f1ero. La versi\u00f3n v1.10.9 contiene parches para la vulnerabilidad. No se conocen soluciones aparte de la actualizaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ethereum:go_ethereum:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10.9", "matchCriteriaId": "DA383AD6-A083-453C-BED8-C2C8BCCDEEDE"}]}]}], "references": [{"url": "https://github.com/ethereum/go-ethereum/commit/e40b37718326b8b4873b3b00a0db2e6c6d9ea738", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ethereum/go-ethereum/pull/23801", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ethereum/go-ethereum/releases/tag/v1.10.9", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/ethereum/go-ethereum/security/advisories/GHSA-59hh-656j-3p7v", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ethereum/go-ethereum/commit/e40b37718326b8b4873b3b00a0db2e6c6d9ea738"}}