{"buggy_code": ["/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Sun Rasterfile Library\n *\n * $Id$\n */\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include <assert.h>\n#include <stdlib.h>\n\n#include \"jasper/jas_stream.h\"\n#include \"jasper/jas_image.h\"\n#include \"jasper/jas_debug.h\"\n\n#include \"ras_cod.h\"\n\n/******************************************************************************\\\n* Prototypes.\n\\******************************************************************************/\n\nstatic int ras_gethdr(jas_stream_t *in, ras_hdr_t *hdr);\nstatic int ras_getint(jas_stream_t *in, int_fast32_t *val);\n\nstatic int ras_getdata(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image);\nstatic int ras_getdatastd(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image);\nstatic int ras_getcmap(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap);\n\n/******************************************************************************\\\n* Code.\n\\******************************************************************************/\n\njas_image_t *ras_decode(jas_stream_t *in, char *optstr)\n{\n\tras_hdr_t hdr;\n\tras_cmap_t cmap;\n\tjas_image_t *image;\n\tjas_image_cmptparm_t cmptparms[3];\n\tjas_image_cmptparm_t *cmptparm;\n\tint clrspc;\n\tint numcmpts;\n\tint i;\n\n\tif (optstr) {\n\t\tjas_eprintf(\"warning: ignoring RAS decoder options\\n\");\n\t}\n\n\t/* Read the header. */\n\tif (ras_gethdr(in, &hdr)) {\n\t\treturn 0;\n\t}\n\n\t/* Does the header information look reasonably sane? */\n\tif (hdr.magic != RAS_MAGIC || hdr.width <= 0 || hdr.height <= 0 ||\n\t  hdr.depth <= 0 || hdr.depth > 32) {\n\t\treturn 0;\n\t}\n\n\t/* In the case of the old format, do not rely on the length field\n\tbeing properly specified.  Calculate the quantity from scratch. */\n\tif (hdr.type == RAS_TYPE_OLD) {\n\t\thdr.length = RAS_ROWSIZE(&hdr) * hdr.height;\n\t}\n\n\t/* Calculate some quantities needed for creation of the image\n\tobject. */\n\tif (RAS_ISRGB(&hdr)) {\n\t\tclrspc = JAS_CLRSPC_SRGB;\n\t\tnumcmpts = 3;\n\t} else {\n\t\tclrspc = JAS_CLRSPC_SGRAY;\n\t\tnumcmpts = 1;\n\t}\n\tfor (i = 0, cmptparm = cmptparms; i < numcmpts; ++i, ++cmptparm) {\n\t\tcmptparm->tlx = 0;\n\t\tcmptparm->tly = 0;\n\t\tcmptparm->hstep = 1;\n\t\tcmptparm->vstep = 1;\n\t\tcmptparm->width = hdr.width;\n\t\tcmptparm->height = hdr.height;\n\t\tcmptparm->prec = RAS_ISRGB(&hdr) ? 8 : hdr.depth;\n\t\tcmptparm->sgnd = false;\n\t}\n\t/* Create the image object. */\n\tif (!(image = jas_image_create(numcmpts, cmptparms, JAS_CLRSPC_UNKNOWN))) {\n\t\treturn 0;\n\t}\n\n\t/* Read the color map (if there is one). */\n\tif (ras_getcmap(in, &hdr, &cmap)) {\n\t\tjas_image_destroy(image);\n\t\treturn 0;\n\t}\n\n\t/* Read the pixel data. */\n\tif (ras_getdata(in, &hdr, &cmap, image)) {\n\t\tjas_image_destroy(image);\n\t\treturn 0;\n\t}\n\n\tjas_image_setclrspc(image, clrspc);\n\tif (clrspc == JAS_CLRSPC_SRGB) {\n\t\tjas_image_setcmpttype(image, 0,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));\n\t\tjas_image_setcmpttype(image, 1,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));\n\t\tjas_image_setcmpttype(image, 2,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));\n\t} else {\n\t\tjas_image_setcmpttype(image, 0,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));\n\t}\n\n\treturn image;\n}\n\nint ras_validate(jas_stream_t *in)\n{\n\tuchar buf[RAS_MAGICLEN];\n\tint i;\n\tint n;\n\tuint_fast32_t magic;\n\n\tassert(JAS_STREAM_MAXPUTBACK >= RAS_MAGICLEN);\n\n\t/* Read the validation data (i.e., the data used for detecting\n\t  the format). */\n\tif ((n = jas_stream_read(in, buf, RAS_MAGICLEN)) < 0) {\n\t\treturn -1;\n\t}\n\n\t/* Put the validation data back onto the stream, so that the\n\t  stream position will not be changed. */\n\tfor (i = n - 1; i >= 0; --i) {\n\t\tif (jas_stream_ungetc(in, buf[i]) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/* Did we read enough data? */\n\tif (n < RAS_MAGICLEN) {\n\t\treturn -1;\n\t}\n\n\tmagic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |\n\t  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |\n\t  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |\n\t  buf[3];\n\n\t/* Is the signature correct for the Sun Rasterfile format? */\n\tif (magic != RAS_MAGIC) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\nstatic int ras_getdata(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image)\n{\n\tint ret;\n\n\tswitch (hdr->type) {\n\tcase RAS_TYPE_OLD:\n\tcase RAS_TYPE_STD:\n\t\tret = ras_getdatastd(in, hdr, cmap, image);\n\t\tbreak;\n\tcase RAS_TYPE_RLE:\n\t\tjas_eprintf(\"error: RLE encoding method not supported\\n\");\n\t\tret = -1;\n\t\tbreak;\n\tdefault:\n\t\tjas_eprintf(\"error: encoding method not supported\\n\");\n\t\tret = -1;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nstatic int ras_getdatastd(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image)\n{\n\tint pad;\n\tint nz;\n\tint z;\n\tint c;\n\tint y;\n\tint x;\n\tint v;\n\tint i;\n\tjas_matrix_t *data[3];\n\n/* Note: This function does not properly handle images with a colormap. */\n\t/* Avoid compiler warnings about unused parameters. */\n\tcmap = 0;\n\n\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\tdata[i] = jas_matrix_create(1, jas_image_width(image));\n\t\tassert(data[i]);\n\t}\n\n\tpad = RAS_ROWSIZE(hdr) - (hdr->width * hdr->depth + 7) / 8;\n\n\tfor (y = 0; y < hdr->height; y++) {\n\t\tnz = 0;\n\t\tz = 0;\n\t\tfor (x = 0; x < hdr->width; x++) {\n\t\t\twhile (nz < hdr->depth) {\n\t\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tz = (z << 8) | c;\n\t\t\t\tnz += 8;\n\t\t\t}\n\n\t\t\tv = (z >> (nz - hdr->depth)) & RAS_ONES(hdr->depth);\n\t\t\tz &= RAS_ONES(nz - hdr->depth);\n\t\t\tnz -= hdr->depth;\n\n\t\t\tif (jas_image_numcmpts(image) == 3) {\n\t\t\t\tjas_matrix_setv(data[0], x, (RAS_GETRED(v)));\n\t\t\t\tjas_matrix_setv(data[1], x, (RAS_GETGREEN(v)));\n\t\t\t\tjas_matrix_setv(data[2], x, (RAS_GETBLUE(v)));\n\t\t\t} else {\n\t\t\t\tjas_matrix_setv(data[0], x, (v));\n\t\t\t}\n\t\t}\n\t\tif (pad) {\n\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\t\tif (jas_image_writecmpt(image, i, 0, y, hdr->width, 1,\n\t\t\t  data[i])) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\tjas_matrix_destroy(data[i]);\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_getcmap(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap)\n{\n\tint i;\n\tint j;\n\tint x;\n\tint c;\n\tint numcolors;\n\tint actualnumcolors;\n\n\tswitch (hdr->maptype) {\n\tcase RAS_MT_NONE:\n\t\tbreak;\n\tcase RAS_MT_EQUALRGB:\n\t\t{\n\t\tjas_eprintf(\"warning: palettized images not fully supported\\n\");\n\t\tnumcolors = 1 << hdr->depth;\n\t\tassert(numcolors <= RAS_CMAP_MAXSIZ);\n\t\tactualnumcolors = hdr->maplength / 3;\n\t\tfor (i = 0; i < numcolors; i++) {\n\t\t\tcmap->data[i] = 0;\n\t\t}\n\t\tif ((hdr->maplength % 3) || hdr->maplength < 0 ||\n\t\t  hdr->maplength > 3 * numcolors) {\n\t\t\treturn -1;\n\t\t}\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tfor (j = 0; j < actualnumcolors; j++) {\n\t\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tx = 0;\n\t\t\t\tswitch (i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tx = RAS_RED(c);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tx = RAS_GREEN(c);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tx = RAS_BLUE(c);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcmap->data[j] |= x;\n\t\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_gethdr(jas_stream_t *in, ras_hdr_t *hdr)\n{\n\tif (ras_getint(in, &hdr->magic) || ras_getint(in, &hdr->width) ||\n\t  ras_getint(in, &hdr->height) || ras_getint(in, &hdr->depth) ||\n\t  ras_getint(in, &hdr->length) || ras_getint(in, &hdr->type) ||\n\t  ras_getint(in, &hdr->maptype) || ras_getint(in, &hdr->maplength)) {\n\t\treturn -1;\n\t}\n\n\tif (hdr->magic != RAS_MAGIC) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_getint(jas_stream_t *in, int_fast32_t *val)\n{\n\tint x;\n\tint c;\n\tint i;\n\n\tx = 0;\n\tfor (i = 0; i < 4; i++) {\n\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\tx = (x << 8) | (c & 0xff);\n\t}\n\n\t*val = x;\n\treturn 0;\n}\n", "/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Sun Rasterfile Library\n *\n * $Id$\n */\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include <assert.h>\n#include <stdlib.h>\n\n#include \"jasper/jas_image.h\"\n#include \"jasper/jas_stream.h\"\n#include \"jasper/jas_debug.h\"\n\n#include \"ras_cod.h\"\n#include \"ras_enc.h\"\n\n/******************************************************************************\\\n* Prototypes.\n\\******************************************************************************/\n\nstatic int ras_puthdr(jas_stream_t *out, ras_hdr_t *hdr);\nstatic int ras_putint(jas_stream_t *out, int val);\n\nstatic int ras_putdata(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts);\nstatic int ras_putdatastd(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts);\n\n/******************************************************************************\\\n* Code.\n\\******************************************************************************/\n\nint ras_encode(jas_image_t *image, jas_stream_t *out, char *optstr)\n{\n\tint_fast32_t width;\n\tint_fast32_t height;\n\tint_fast32_t depth;\n\tint cmptno;\n#if 0\n\tuint_fast16_t numcmpts;\n#endif\n\tint i;\n\tras_hdr_t hdr;\n\tint rowsize;\n\tras_enc_t encbuf;\n\tras_enc_t *enc = &encbuf;\n\n\tif (optstr) {\n\t\tjas_eprintf(\"warning: ignoring RAS encoder options\\n\");\n\t}\n\n\tswitch (jas_clrspc_fam(jas_image_clrspc(image))) {\n\tcase JAS_CLRSPC_FAM_RGB:\n\t\tif (jas_image_clrspc(image) != JAS_CLRSPC_SRGB)\n\t\t\tjas_eprintf(\"warning: inaccurate color\\n\");\n\t\tenc->numcmpts = 3;\n\t\tif ((enc->cmpts[0] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R))) < 0 ||\n\t\t  (enc->cmpts[1] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G))) < 0 ||\n\t\t  (enc->cmpts[2] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))) < 0) {\n\t\t\tjas_eprintf(\"error: missing color component\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tbreak;\n\tcase JAS_CLRSPC_FAM_GRAY:\n\t\tif (jas_image_clrspc(image) != JAS_CLRSPC_SGRAY)\n\t\t\tjas_eprintf(\"warning: inaccurate color\\n\");\n\t\tenc->numcmpts = 1;\n\t\tif ((enc->cmpts[0] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y))) < 0) {\n\t\t\tjas_eprintf(\"error: missing color component\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tjas_eprintf(\"error: unsupported color space\\n\");\n\t\treturn -1;\n\t\tbreak;\n\t}\n\n\twidth = jas_image_cmptwidth(image, enc->cmpts[0]);\n\theight = jas_image_cmptheight(image, enc->cmpts[0]);\n\tdepth = jas_image_cmptprec(image, enc->cmpts[0]);\n\n\tfor (cmptno = 0; cmptno < enc->numcmpts; ++cmptno) {\n\t\tif (jas_image_cmptwidth(image, enc->cmpts[cmptno]) != width ||\n\t\t  jas_image_cmptheight(image, enc->cmpts[cmptno]) != height ||\n\t\t  jas_image_cmptprec(image, enc->cmpts[cmptno]) != depth ||\n\t\t  jas_image_cmptsgnd(image, enc->cmpts[cmptno]) != false ||\n\t\t  jas_image_cmpttlx(image, enc->cmpts[cmptno]) != 0 ||\n\t\t  jas_image_cmpttly(image, enc->cmpts[cmptno]) != 0) {\n\t\t\tjas_eprintf(\"The RAS format cannot be used to represent an image with this geometry.\\n\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/* Ensure that the image can be encoded in the desired format. */\n\tif (enc->numcmpts == 3) {\n\n\t\t/* All three components must have the same subsampling\n\t\t  factor and have a precision of eight bits. */\n\t\tif (enc->numcmpts > 1) {\n\t\t\tfor (i = 0; i < enc->numcmpts; ++i) {\n\t\t\t\tif (jas_image_cmptprec(image, enc->cmpts[i]) != 8) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (enc->numcmpts == 1) {\n\t\t/* NOP */\n\t} else {\n\t\treturn -1;\n\t}\n\n\thdr.magic = RAS_MAGIC;\n\thdr.width = width;\n\thdr.height = height;\n\thdr.depth = (enc->numcmpts == 3) ? 24 : depth;\n\n\trowsize = RAS_ROWSIZE(&hdr);\n\thdr.length = rowsize * hdr.height;\n\thdr.type = RAS_TYPE_STD;\n\n\thdr.maptype = RAS_MT_NONE;\n\thdr.maplength = 0;\n\n\tif (ras_puthdr(out, &hdr)) {\n\t\treturn -1;\n\t}\n\n\tif (ras_putdata(out, &hdr, image, enc->numcmpts, enc->cmpts)) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_putdata(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts)\n{\n\tint ret;\n\n\tswitch (hdr->type) {\n\tcase RAS_TYPE_STD:\n\t\tret = ras_putdatastd(out, hdr, image, numcmpts, cmpts);\n\t\tbreak;\n\tdefault:\n\t\tret = -1;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nstatic int ras_putdatastd(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image,  int numcmpts, int *cmpts)\n{\n\tint rowsize;\n\tint pad;\n\tunsigned int z;\n\tint nz;\n\tint c;\n\tint x;\n\tint y;\n\tint v;\n\tjas_matrix_t *data[3];\n\tint i;\n\n\tfor (i = 0; i < numcmpts; ++i) {\n\t\tdata[i] = jas_matrix_create(jas_image_height(image), jas_image_width(image));\n\t\tassert(data[i]);\n\t}\n\n\trowsize = RAS_ROWSIZE(hdr);\n\tpad = rowsize - (hdr->width * hdr->depth + 7) / 8;\n\n\thdr->length = hdr->height * rowsize;\n\n\tfor (y = 0; y < hdr->height; y++) {\n\t\tfor (i = 0; i < numcmpts; ++i) {\n\t\t\tif (jas_image_readcmpt(image, cmpts[i], 0, y,\n\t\t\t\t\tjas_image_width(image), 1, data[i])) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tz = 0;\n\t\tnz = 0;\n\t\tfor (x = 0; x < hdr->width; x++) {\n\t\t\tz <<= hdr->depth;\n\t\t\tif (RAS_ISRGB(hdr)) {\n\t\t\t\tv = RAS_RED((jas_matrix_getv(data[0], x))) |\n\t\t\t\t  RAS_GREEN((jas_matrix_getv(data[1], x))) |\n\t\t\t\t  RAS_BLUE((jas_matrix_getv(data[2], x)));\n\t\t\t} else {\n\t\t\t\tv = (jas_matrix_getv(data[0], x));\n\t\t\t}\n\t\t\tz |= v & RAS_ONES(hdr->depth);\n\t\t\tnz += hdr->depth;\n\t\t\twhile (nz >= 8) {\n\t\t\t\tc = (z >> (nz - 8)) & 0xff;\n\t\t\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tnz -= 8;\n\t\t\t\tz &= RAS_ONES(nz);\n\t\t\t}\n\t\t}\n\t\tif (nz > 0) {\n\t\t\tc = (z >> (8 - nz)) & RAS_ONES(nz);\n\t\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tif (pad % 2) {\n\t\t\tif (jas_stream_putc(out, 0) == EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < numcmpts; ++i) {\n\t\tjas_matrix_destroy(data[i]);\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_puthdr(jas_stream_t *out, ras_hdr_t *hdr)\n{\n\tif (ras_putint(out, RAS_MAGIC) || ras_putint(out, hdr->width) ||\n\t  ras_putint(out, hdr->height) || ras_putint(out, hdr->depth) ||\n\t  ras_putint(out, hdr->length) || ras_putint(out, hdr->type) ||\n\t  ras_putint(out, hdr->maptype) || ras_putint(out, hdr->maplength)) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_putint(jas_stream_t *out, int val)\n{\n\tint x;\n\tint i;\n\tint c;\n\n\tx = val;\n\tfor (i = 0; i < 4; i++) {\n\t\tc = (x >> 24) & 0xff;\n\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\tx <<= 8;\n\t}\n\n\treturn 0;\n}\n"], "fixing_code": ["/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Sun Rasterfile Library\n *\n * $Id$\n */\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include <assert.h>\n#include <stdlib.h>\n\n#include \"jasper/jas_stream.h\"\n#include \"jasper/jas_image.h\"\n#include \"jasper/jas_debug.h\"\n\n#include \"ras_cod.h\"\n\n/******************************************************************************\\\n* Prototypes.\n\\******************************************************************************/\n\nstatic int ras_gethdr(jas_stream_t *in, ras_hdr_t *hdr);\nstatic int ras_getint(jas_stream_t *in, int_fast32_t *val);\n\nstatic int ras_getdata(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image);\nstatic int ras_getdatastd(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image);\nstatic int ras_getcmap(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap);\n\n/******************************************************************************\\\n* Code.\n\\******************************************************************************/\n\njas_image_t *ras_decode(jas_stream_t *in, char *optstr)\n{\n\tras_hdr_t hdr;\n\tras_cmap_t cmap;\n\tjas_image_t *image;\n\tjas_image_cmptparm_t cmptparms[3];\n\tjas_image_cmptparm_t *cmptparm;\n\tint clrspc;\n\tint numcmpts;\n\tint i;\n\n\tif (optstr) {\n\t\tjas_eprintf(\"warning: ignoring RAS decoder options\\n\");\n\t}\n\n\t/* Read the header. */\n\tif (ras_gethdr(in, &hdr)) {\n\t\treturn 0;\n\t}\n\n\t/* Does the header information look reasonably sane? */\n\tif (hdr.magic != RAS_MAGIC || hdr.width <= 0 || hdr.height <= 0 ||\n\t  hdr.depth <= 0 || hdr.depth > 32) {\n\t\treturn 0;\n\t}\n\n\t/* In the case of the old format, do not rely on the length field\n\tbeing properly specified.  Calculate the quantity from scratch. */\n\tif (hdr.type == RAS_TYPE_OLD) {\n\t\thdr.length = RAS_ROWSIZE(&hdr) * hdr.height;\n\t}\n\n\t/* Calculate some quantities needed for creation of the image\n\tobject. */\n\tif (RAS_ISRGB(&hdr)) {\n\t\tclrspc = JAS_CLRSPC_SRGB;\n\t\tnumcmpts = 3;\n\t} else {\n\t\tclrspc = JAS_CLRSPC_SGRAY;\n\t\tnumcmpts = 1;\n\t}\n\tfor (i = 0, cmptparm = cmptparms; i < numcmpts; ++i, ++cmptparm) {\n\t\tcmptparm->tlx = 0;\n\t\tcmptparm->tly = 0;\n\t\tcmptparm->hstep = 1;\n\t\tcmptparm->vstep = 1;\n\t\tcmptparm->width = hdr.width;\n\t\tcmptparm->height = hdr.height;\n\t\tcmptparm->prec = RAS_ISRGB(&hdr) ? 8 : hdr.depth;\n\t\tcmptparm->sgnd = false;\n\t}\n\t/* Create the image object. */\n\tif (!(image = jas_image_create(numcmpts, cmptparms, JAS_CLRSPC_UNKNOWN))) {\n\t\treturn 0;\n\t}\n\n\t/* Read the color map (if there is one). */\n\tif (ras_getcmap(in, &hdr, &cmap)) {\n\t\tjas_image_destroy(image);\n\t\treturn 0;\n\t}\n\n\t/* Read the pixel data. */\n\tif (ras_getdata(in, &hdr, &cmap, image)) {\n\t\tjas_image_destroy(image);\n\t\treturn 0;\n\t}\n\n\tjas_image_setclrspc(image, clrspc);\n\tif (clrspc == JAS_CLRSPC_SRGB) {\n\t\tjas_image_setcmpttype(image, 0,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));\n\t\tjas_image_setcmpttype(image, 1,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));\n\t\tjas_image_setcmpttype(image, 2,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));\n\t} else {\n\t\tjas_image_setcmpttype(image, 0,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));\n\t}\n\n\treturn image;\n}\n\nint ras_validate(jas_stream_t *in)\n{\n\tuchar buf[RAS_MAGICLEN];\n\tint i;\n\tint n;\n\tuint_fast32_t magic;\n\n\tassert(JAS_STREAM_MAXPUTBACK >= RAS_MAGICLEN);\n\n\t/* Read the validation data (i.e., the data used for detecting\n\t  the format). */\n\tif ((n = jas_stream_read(in, buf, RAS_MAGICLEN)) < 0) {\n\t\treturn -1;\n\t}\n\n\t/* Put the validation data back onto the stream, so that the\n\t  stream position will not be changed. */\n\tfor (i = n - 1; i >= 0; --i) {\n\t\tif (jas_stream_ungetc(in, buf[i]) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/* Did we read enough data? */\n\tif (n < RAS_MAGICLEN) {\n\t\treturn -1;\n\t}\n\n\tmagic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |\n\t  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |\n\t  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |\n\t  buf[3];\n\n\t/* Is the signature correct for the Sun Rasterfile format? */\n\tif (magic != RAS_MAGIC) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\nstatic int ras_getdata(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image)\n{\n\tint ret;\n\n\tswitch (hdr->type) {\n\tcase RAS_TYPE_OLD:\n\tcase RAS_TYPE_STD:\n\t\tret = ras_getdatastd(in, hdr, cmap, image);\n\t\tbreak;\n\tcase RAS_TYPE_RLE:\n\t\tjas_eprintf(\"error: RLE encoding method not supported\\n\");\n\t\tret = -1;\n\t\tbreak;\n\tdefault:\n\t\tjas_eprintf(\"error: encoding method not supported\\n\");\n\t\tret = -1;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nstatic int ras_getdatastd(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap,\n  jas_image_t *image)\n{\n\tint pad;\n\tint nz;\n\tint z;\n\tint c;\n\tint y;\n\tint x;\n\tint v;\n\tint i;\n\tjas_matrix_t *data[3];\n\n/* Note: This function does not properly handle images with a colormap. */\n\t/* Avoid compiler warnings about unused parameters. */\n\tcmap = 0;\n\n\tassert(jas_image_numcmpts(image) <= 3);\n\n\tfor (i = 0; i < 3; ++i) {\n\t\tdata[i] = 0;\n\t}\n\n\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\tif (!(data[i] = jas_matrix_create(1, jas_image_width(image)))) {\n\t\t\tgoto error;\n\t\t}\n\t}\n\n\tpad = RAS_ROWSIZE(hdr) - (hdr->width * hdr->depth + 7) / 8;\n\n\tfor (y = 0; y < hdr->height; y++) {\n\t\tnz = 0;\n\t\tz = 0;\n\t\tfor (x = 0; x < hdr->width; x++) {\n\t\t\twhile (nz < hdr->depth) {\n\t\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\t\tgoto error;\n\t\t\t\t}\n\t\t\t\tz = (z << 8) | c;\n\t\t\t\tnz += 8;\n\t\t\t}\n\n\t\t\tv = (z >> (nz - hdr->depth)) & RAS_ONES(hdr->depth);\n\t\t\tz &= RAS_ONES(nz - hdr->depth);\n\t\t\tnz -= hdr->depth;\n\n\t\t\tif (jas_image_numcmpts(image) == 3) {\n\t\t\t\tjas_matrix_setv(data[0], x, (RAS_GETRED(v)));\n\t\t\t\tjas_matrix_setv(data[1], x, (RAS_GETGREEN(v)));\n\t\t\t\tjas_matrix_setv(data[2], x, (RAS_GETBLUE(v)));\n\t\t\t} else {\n\t\t\t\tjas_matrix_setv(data[0], x, (v));\n\t\t\t}\n\t\t}\n\t\tif (pad) {\n\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\t\tif (jas_image_writecmpt(image, i, 0, y, hdr->width, 1,\n\t\t\t  data[i])) {\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < jas_image_numcmpts(image); ++i) {\n\t\tjas_matrix_destroy(data[i]);\n\t\tdata[i] = 0;\n\t}\n\n\treturn 0;\n\nerror:\n\tfor (i = 0; i < 3; ++i) {\n\t\tif (data[i]) {\n\t\t\tjas_matrix_destroy(data[i]);\n\t\t}\n\t}\n\treturn -1;\n}\n\nstatic int ras_getcmap(jas_stream_t *in, ras_hdr_t *hdr, ras_cmap_t *cmap)\n{\n\tint i;\n\tint j;\n\tint x;\n\tint c;\n\tint numcolors;\n\tint actualnumcolors;\n\n\tswitch (hdr->maptype) {\n\tcase RAS_MT_NONE:\n\t\tbreak;\n\tcase RAS_MT_EQUALRGB:\n\t\t{\n\t\tjas_eprintf(\"warning: palettized images not fully supported\\n\");\n\t\tnumcolors = 1 << hdr->depth;\n\t\tif (numcolors > RAS_CMAP_MAXSIZ) {\n\t\t\treturn -1;\n\t\t}\n\t\tactualnumcolors = hdr->maplength / 3;\n\t\tfor (i = 0; i < numcolors; i++) {\n\t\t\tcmap->data[i] = 0;\n\t\t}\n\t\tif ((hdr->maplength % 3) || hdr->maplength < 0 ||\n\t\t  hdr->maplength > 3 * numcolors) {\n\t\t\treturn -1;\n\t\t}\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tfor (j = 0; j < actualnumcolors; j++) {\n\t\t\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tx = 0;\n\t\t\t\tswitch (i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tx = RAS_RED(c);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tx = RAS_GREEN(c);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tx = RAS_BLUE(c);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcmap->data[j] |= x;\n\t\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_gethdr(jas_stream_t *in, ras_hdr_t *hdr)\n{\n\tif (ras_getint(in, &hdr->magic) || ras_getint(in, &hdr->width) ||\n\t  ras_getint(in, &hdr->height) || ras_getint(in, &hdr->depth) ||\n\t  ras_getint(in, &hdr->length) || ras_getint(in, &hdr->type) ||\n\t  ras_getint(in, &hdr->maptype) || ras_getint(in, &hdr->maplength)) {\n\t\treturn -1;\n\t}\n\n\tif (hdr->magic != RAS_MAGIC) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_getint(jas_stream_t *in, int_fast32_t *val)\n{\n\tint x;\n\tint c;\n\tint i;\n\n\tx = 0;\n\tfor (i = 0; i < 4; i++) {\n\t\tif ((c = jas_stream_getc(in)) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\tx = (x << 8) | (c & 0xff);\n\t}\n\n\t*val = x;\n\treturn 0;\n}\n", "/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Sun Rasterfile Library\n *\n * $Id$\n */\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include <assert.h>\n#include <stdlib.h>\n\n#include \"jasper/jas_image.h\"\n#include \"jasper/jas_stream.h\"\n#include \"jasper/jas_debug.h\"\n\n#include \"ras_cod.h\"\n#include \"ras_enc.h\"\n\n/******************************************************************************\\\n* Prototypes.\n\\******************************************************************************/\n\nstatic int ras_puthdr(jas_stream_t *out, ras_hdr_t *hdr);\nstatic int ras_putint(jas_stream_t *out, int val);\n\nstatic int ras_putdata(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts);\nstatic int ras_putdatastd(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts);\n\n/******************************************************************************\\\n* Code.\n\\******************************************************************************/\n\nint ras_encode(jas_image_t *image, jas_stream_t *out, char *optstr)\n{\n\tint_fast32_t width;\n\tint_fast32_t height;\n\tint_fast32_t depth;\n\tint cmptno;\n#if 0\n\tuint_fast16_t numcmpts;\n#endif\n\tint i;\n\tras_hdr_t hdr;\n\tint rowsize;\n\tras_enc_t encbuf;\n\tras_enc_t *enc = &encbuf;\n\n\tif (optstr) {\n\t\tjas_eprintf(\"warning: ignoring RAS encoder options\\n\");\n\t}\n\n\tswitch (jas_clrspc_fam(jas_image_clrspc(image))) {\n\tcase JAS_CLRSPC_FAM_RGB:\n\t\tif (jas_image_clrspc(image) != JAS_CLRSPC_SRGB)\n\t\t\tjas_eprintf(\"warning: inaccurate color\\n\");\n\t\tenc->numcmpts = 3;\n\t\tif ((enc->cmpts[0] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R))) < 0 ||\n\t\t  (enc->cmpts[1] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G))) < 0 ||\n\t\t  (enc->cmpts[2] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))) < 0) {\n\t\t\tjas_eprintf(\"error: missing color component\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tbreak;\n\tcase JAS_CLRSPC_FAM_GRAY:\n\t\tif (jas_image_clrspc(image) != JAS_CLRSPC_SGRAY)\n\t\t\tjas_eprintf(\"warning: inaccurate color\\n\");\n\t\tenc->numcmpts = 1;\n\t\tif ((enc->cmpts[0] = jas_image_getcmptbytype(image,\n\t\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y))) < 0) {\n\t\t\tjas_eprintf(\"error: missing color component\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tjas_eprintf(\"error: unsupported color space\\n\");\n\t\treturn -1;\n\t\tbreak;\n\t}\n\n\twidth = jas_image_cmptwidth(image, enc->cmpts[0]);\n\theight = jas_image_cmptheight(image, enc->cmpts[0]);\n\tdepth = jas_image_cmptprec(image, enc->cmpts[0]);\n\n\tfor (cmptno = 0; cmptno < enc->numcmpts; ++cmptno) {\n\t\tif (jas_image_cmptwidth(image, enc->cmpts[cmptno]) != width ||\n\t\t  jas_image_cmptheight(image, enc->cmpts[cmptno]) != height ||\n\t\t  jas_image_cmptprec(image, enc->cmpts[cmptno]) != depth ||\n\t\t  jas_image_cmptsgnd(image, enc->cmpts[cmptno]) != false ||\n\t\t  jas_image_cmpttlx(image, enc->cmpts[cmptno]) != 0 ||\n\t\t  jas_image_cmpttly(image, enc->cmpts[cmptno]) != 0) {\n\t\t\tjas_eprintf(\"The RAS format cannot be used to represent an image with this geometry.\\n\");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/* Ensure that the image can be encoded in the desired format. */\n\tif (enc->numcmpts == 3) {\n\n\t\t/* All three components must have the same subsampling\n\t\t  factor and have a precision of eight bits. */\n\t\tif (enc->numcmpts > 1) {\n\t\t\tfor (i = 0; i < enc->numcmpts; ++i) {\n\t\t\t\tif (jas_image_cmptprec(image, enc->cmpts[i]) != 8) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (enc->numcmpts == 1) {\n\t\t/* NOP */\n\t} else {\n\t\treturn -1;\n\t}\n\n\thdr.magic = RAS_MAGIC;\n\thdr.width = width;\n\thdr.height = height;\n\thdr.depth = (enc->numcmpts == 3) ? 24 : depth;\n\n\trowsize = RAS_ROWSIZE(&hdr);\n\thdr.length = rowsize * hdr.height;\n\thdr.type = RAS_TYPE_STD;\n\n\thdr.maptype = RAS_MT_NONE;\n\thdr.maplength = 0;\n\n\tif (ras_puthdr(out, &hdr)) {\n\t\treturn -1;\n\t}\n\n\tif (ras_putdata(out, &hdr, image, enc->numcmpts, enc->cmpts)) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_putdata(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image, int numcmpts, int *cmpts)\n{\n\tint ret;\n\n\tswitch (hdr->type) {\n\tcase RAS_TYPE_STD:\n\t\tret = ras_putdatastd(out, hdr, image, numcmpts, cmpts);\n\t\tbreak;\n\tdefault:\n\t\tret = -1;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nstatic int ras_putdatastd(jas_stream_t *out, ras_hdr_t *hdr, jas_image_t *image,  int numcmpts, int *cmpts)\n{\n\tint rowsize;\n\tint pad;\n\tunsigned int z;\n\tint nz;\n\tint c;\n\tint x;\n\tint y;\n\tint v;\n\tjas_matrix_t *data[3];\n\tint i;\n\n\tassert(numcmpts <= 3);\n\n\tfor (i = 0; i < 3; ++i) {\n\t\tdata[i] = 0;\n\t}\n\n\tfor (i = 0; i < numcmpts; ++i) {\n\t\tif (!(data[i] = jas_matrix_create(jas_image_height(image),\n\t\t  jas_image_width(image)))) {\n\t\t\tgoto error;\n\t\t}\n\t}\n\n\trowsize = RAS_ROWSIZE(hdr);\n\tpad = rowsize - (hdr->width * hdr->depth + 7) / 8;\n\n\thdr->length = hdr->height * rowsize;\n\n\tfor (y = 0; y < hdr->height; y++) {\n\t\tfor (i = 0; i < numcmpts; ++i) {\n\t\t\tif (jas_image_readcmpt(image, cmpts[i], 0, y,\n\t\t\t\t\tjas_image_width(image), 1, data[i])) {\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t}\n\t\tz = 0;\n\t\tnz = 0;\n\t\tfor (x = 0; x < hdr->width; x++) {\n\t\t\tz <<= hdr->depth;\n\t\t\tif (RAS_ISRGB(hdr)) {\n\t\t\t\tv = RAS_RED((jas_matrix_getv(data[0], x))) |\n\t\t\t\t  RAS_GREEN((jas_matrix_getv(data[1], x))) |\n\t\t\t\t  RAS_BLUE((jas_matrix_getv(data[2], x)));\n\t\t\t} else {\n\t\t\t\tv = (jas_matrix_getv(data[0], x));\n\t\t\t}\n\t\t\tz |= v & RAS_ONES(hdr->depth);\n\t\t\tnz += hdr->depth;\n\t\t\twhile (nz >= 8) {\n\t\t\t\tc = (z >> (nz - 8)) & 0xff;\n\t\t\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\t\t\tgoto error;\n\t\t\t\t}\n\t\t\t\tnz -= 8;\n\t\t\t\tz &= RAS_ONES(nz);\n\t\t\t}\n\t\t}\n\t\tif (nz > 0) {\n\t\t\tc = (z >> (8 - nz)) & RAS_ONES(nz);\n\t\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t}\n\t\tif (pad % 2) {\n\t\t\tif (jas_stream_putc(out, 0) == EOF) {\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < numcmpts; ++i) {\n\t\tjas_matrix_destroy(data[i]);\n\t\tdata[i] = 0;\n\t}\n\n\treturn 0;\n\nerror:\n\tfor (i = 0; i < numcmpts; ++i) {\n\t\tif (data[i]) {\n\t\t\tjas_matrix_destroy(data[i]);\n\t\t}\n\t}\n\treturn -1;\n}\n\nstatic int ras_puthdr(jas_stream_t *out, ras_hdr_t *hdr)\n{\n\tif (ras_putint(out, RAS_MAGIC) || ras_putint(out, hdr->width) ||\n\t  ras_putint(out, hdr->height) || ras_putint(out, hdr->depth) ||\n\t  ras_putint(out, hdr->length) || ras_putint(out, hdr->type) ||\n\t  ras_putint(out, hdr->maptype) || ras_putint(out, hdr->maplength)) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int ras_putint(jas_stream_t *out, int val)\n{\n\tint x;\n\tint i;\n\tint c;\n\n\tx = val;\n\tfor (i = 0; i < 4; i++) {\n\t\tc = (x >> 24) & 0xff;\n\t\tif (jas_stream_putc(out, c) == EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\tx <<= 8;\n\t}\n\n\treturn 0;\n}\n"], "filenames": ["src/libjasper/ras/ras_dec.c", "src/libjasper/ras/ras_enc.c"], "buggy_code_start_loc": [262, 232], "buggy_code_end_loc": [331, 289], "fixing_code_start_loc": [263, 233], "fixing_code_end_loc": [349, 307], "type": "NVD-CWE-Other", "message": "The ras_getcmap function in ras_dec.c in JasPer before 1.900.14 allows remote attackers to cause a denial of service (assertion failure) via a crafted image file.", "other": {"cve": {"id": "CVE-2016-9388", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-23T18:59:00.617", "lastModified": "2018-06-29T01:29:01.567", "vulnStatus": "Modified", "evaluatorComment": "<a href=\"http://cwe.mitre.org/data/definitions/617.html\">CWE-617: Reachable Assertion</a>", "descriptions": [{"lang": "en", "value": "The ras_getcmap function in ras_dec.c in JasPer before 1.900.14 allows remote attackers to cause a denial of service (assertion failure) via a crafted image file."}, {"lang": "es", "value": "La funci\u00f3n ras_getcmap de ras_dec.c en JasPer en versiones anteriores a 1.900.14 permite a atacantes remotos provocar una denegaci\u00f3n de servicio (fallo de aserci\u00f3n) a trav\u00e9s de un archivo de imagen manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jasper_project:jasper:1.900.14:*:*:*:*:*:*:*", "matchCriteriaId": "685A05E4-E0D1-4EB5-8B5D-B7338F15ECC4"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/11/17/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/94371", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1208", "source": "cve@mitre.org"}, {"url": "https://blogs.gentoo.org/ago/2016/11/16/jasper-multiple-assertion-failure", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1396962", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/mdadams/jasper/commit/411a4068f8c464e883358bf403a3e25158863823", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3693-1/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/mdadams/jasper/commit/411a4068f8c464e883358bf403a3e25158863823"}}