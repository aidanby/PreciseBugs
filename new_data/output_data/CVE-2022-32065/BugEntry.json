{"buggy_code": ["package com.ruoyi.web.controller.system;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport com.ruoyi.common.annotation.Log;\r\nimport com.ruoyi.common.config.RuoYiConfig;\r\nimport com.ruoyi.common.constant.UserConstants;\r\nimport com.ruoyi.common.core.controller.BaseController;\r\nimport com.ruoyi.common.core.domain.AjaxResult;\r\nimport com.ruoyi.common.core.domain.entity.SysUser;\r\nimport com.ruoyi.common.enums.BusinessType;\r\nimport com.ruoyi.common.utils.DateUtils;\r\nimport com.ruoyi.common.utils.ShiroUtils;\r\nimport com.ruoyi.common.utils.StringUtils;\r\nimport com.ruoyi.common.utils.file.FileUploadUtils;\r\nimport com.ruoyi.framework.shiro.service.SysPasswordService;\r\nimport com.ruoyi.system.service.ISysUserService;\r\n\r\n/**\r\n * \u4e2a\u4eba\u4fe1\u606f \u4e1a\u52a1\u5904\u7406\r\n * \r\n * @author ruoyi\r\n */\r\n@Controller\r\n@RequestMapping(\"/system/user/profile\")\r\npublic class SysProfileController extends BaseController\r\n{\r\n    private static final Logger log = LoggerFactory.getLogger(SysProfileController.class);\r\n\r\n    private String prefix = \"system/user/profile\";\r\n\r\n    @Autowired\r\n    private ISysUserService userService;\r\n    \r\n    @Autowired\r\n    private SysPasswordService passwordService;\r\n\r\n    /**\r\n     * \u4e2a\u4eba\u4fe1\u606f\r\n     */\r\n    @GetMapping()\r\n    public String profile(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", user);\r\n        mmap.put(\"roleGroup\", userService.selectUserRoleGroup(user.getUserId()));\r\n        mmap.put(\"postGroup\", userService.selectUserPostGroup(user.getUserId()));\r\n        return prefix + \"/profile\";\r\n    }\r\n\r\n    @GetMapping(\"/checkPassword\")\r\n    @ResponseBody\r\n    public boolean checkPassword(String password)\r\n    {\r\n        SysUser user = getSysUser();\r\n        if (passwordService.matches(user, password))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @GetMapping(\"/resetPwd\")\r\n    public String resetPwd(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/resetPwd\";\r\n    }\r\n\r\n    @Log(title = \"\u91cd\u7f6e\u5bc6\u7801\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/resetPwd\")\r\n    @ResponseBody\r\n    public AjaxResult resetPwd(String oldPassword, String newPassword)\r\n    {\r\n        SysUser user = getSysUser();\r\n        if (!passwordService.matches(user, oldPassword))\r\n        {\r\n            return error(\"\u4fee\u6539\u5bc6\u7801\u5931\u8d25\uff0c\u65e7\u5bc6\u7801\u9519\u8bef\");\r\n        }\r\n        if (passwordService.matches(user, newPassword))\r\n        {\r\n            return error(\"\u65b0\u5bc6\u7801\u4e0d\u80fd\u4e0e\u65e7\u5bc6\u7801\u76f8\u540c\");\r\n        }\r\n        user.setSalt(ShiroUtils.randomSalt());\r\n        user.setPassword(passwordService.encryptPassword(user.getLoginName(), newPassword, user.getSalt()));\r\n        user.setPwdUpdateDate(DateUtils.getNowDate());\r\n        if (userService.resetUserPwd(user) > 0)\r\n        {\r\n            setSysUser(userService.selectUserById(user.getUserId()));\r\n            return success();\r\n        }\r\n        return error(\"\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u7528\u6237\r\n     */\r\n    @GetMapping(\"/edit\")\r\n    public String edit(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/edit\";\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u5934\u50cf\r\n     */\r\n    @GetMapping(\"/avatar\")\r\n    public String avatar(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/avatar\";\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u7528\u6237\r\n     */\r\n    @Log(title = \"\u4e2a\u4eba\u4fe1\u606f\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/update\")\r\n    @ResponseBody\r\n    public AjaxResult update(SysUser user)\r\n    {\r\n        SysUser currentUser = getSysUser();\r\n        currentUser.setUserName(user.getUserName());\r\n        currentUser.setEmail(user.getEmail());\r\n        currentUser.setPhonenumber(user.getPhonenumber());\r\n        currentUser.setSex(user.getSex());\r\n        if (StringUtils.isNotEmpty(user.getPhonenumber())\r\n                && UserConstants.USER_PHONE_NOT_UNIQUE.equals(userService.checkPhoneUnique(currentUser)))\r\n        {\r\n            return error(\"\u4fee\u6539\u7528\u6237'\" + currentUser.getLoginName() + \"'\u5931\u8d25\uff0c\u624b\u673a\u53f7\u7801\u5df2\u5b58\u5728\");\r\n        }\r\n        else if (StringUtils.isNotEmpty(user.getEmail())\r\n                && UserConstants.USER_EMAIL_NOT_UNIQUE.equals(userService.checkEmailUnique(currentUser)))\r\n        {\r\n            return error(\"\u4fee\u6539\u7528\u6237'\" + currentUser.getLoginName() + \"'\u5931\u8d25\uff0c\u90ae\u7bb1\u8d26\u53f7\u5df2\u5b58\u5728\");\r\n        }\r\n        if (userService.updateUserInfo(currentUser) > 0)\r\n        {\r\n            setSysUser(userService.selectUserById(currentUser.getUserId()));\r\n            return success();\r\n        }\r\n        return error();\r\n    }\r\n\r\n    /**\r\n     * \u4fdd\u5b58\u5934\u50cf\r\n     */\r\n    @Log(title = \"\u4e2a\u4eba\u4fe1\u606f\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/updateAvatar\")\r\n    @ResponseBody\r\n    public AjaxResult updateAvatar(@RequestParam(\"avatarfile\") MultipartFile file)\r\n    {\r\n        SysUser currentUser = getSysUser();\r\n        try\r\n        {\r\n            if (!file.isEmpty())\r\n            {\r\n                String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file);\r\n                currentUser.setAvatar(avatar);\r\n                if (userService.updateUserInfo(currentUser) > 0)\r\n                {\r\n                    setSysUser(userService.selectUserById(currentUser.getUserId()));\r\n                    return success();\r\n                }\r\n            }\r\n            return error();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            log.error(\"\u4fee\u6539\u5934\u50cf\u5931\u8d25\uff01\", e);\r\n            return error(e.getMessage());\r\n        }\r\n    }\r\n}\r\n", "package com.ruoyi.common.exception.file;\r\n\r\nimport java.util.Arrays;\r\nimport org.apache.commons.fileupload.FileUploadException;\r\n\r\n/**\r\n * \u6587\u4ef6\u4e0a\u4f20 \u8bef\u5f02\u5e38\u7c7b\r\n * \r\n * @author ruoyi\r\n */\r\npublic class InvalidExtensionException extends FileUploadException\r\n{\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    private String[] allowedExtension;\r\n    private String extension;\r\n    private String filename;\r\n\r\n    public InvalidExtensionException(String[] allowedExtension, String extension, String filename)\r\n    {\r\n        super(\"filename : [\" + filename + \"], extension : [\" + extension + \"], allowed extension : [\" + Arrays.toString(allowedExtension) + \"]\");\r\n        this.allowedExtension = allowedExtension;\r\n        this.extension = extension;\r\n        this.filename = filename;\r\n    }\r\n\r\n    public String[] getAllowedExtension()\r\n    {\r\n        return allowedExtension;\r\n    }\r\n\r\n    public String getExtension()\r\n    {\r\n        return extension;\r\n    }\r\n\r\n    public String getFilename()\r\n    {\r\n        return filename;\r\n    }\r\n\r\n    public static class InvalidImageExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidImageExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n\r\n    public static class InvalidFlashExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidFlashExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n\r\n    public static class InvalidMediaExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidMediaExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n    \r\n    public static class InvalidVideoExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidVideoExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n}\r\n"], "fixing_code": ["package com.ruoyi.web.controller.system;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport com.ruoyi.common.annotation.Log;\r\nimport com.ruoyi.common.config.RuoYiConfig;\r\nimport com.ruoyi.common.constant.UserConstants;\r\nimport com.ruoyi.common.core.controller.BaseController;\r\nimport com.ruoyi.common.core.domain.AjaxResult;\r\nimport com.ruoyi.common.core.domain.entity.SysUser;\r\nimport com.ruoyi.common.enums.BusinessType;\r\nimport com.ruoyi.common.utils.DateUtils;\r\nimport com.ruoyi.common.utils.ShiroUtils;\r\nimport com.ruoyi.common.utils.StringUtils;\r\nimport com.ruoyi.common.utils.file.FileUploadUtils;\r\nimport com.ruoyi.common.utils.file.MimeTypeUtils;\r\nimport com.ruoyi.framework.shiro.service.SysPasswordService;\r\nimport com.ruoyi.system.service.ISysUserService;\r\n\r\n/**\r\n * \u4e2a\u4eba\u4fe1\u606f \u4e1a\u52a1\u5904\u7406\r\n * \r\n * @author ruoyi\r\n */\r\n@Controller\r\n@RequestMapping(\"/system/user/profile\")\r\npublic class SysProfileController extends BaseController\r\n{\r\n    private static final Logger log = LoggerFactory.getLogger(SysProfileController.class);\r\n\r\n    private String prefix = \"system/user/profile\";\r\n\r\n    @Autowired\r\n    private ISysUserService userService;\r\n    \r\n    @Autowired\r\n    private SysPasswordService passwordService;\r\n\r\n    /**\r\n     * \u4e2a\u4eba\u4fe1\u606f\r\n     */\r\n    @GetMapping()\r\n    public String profile(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", user);\r\n        mmap.put(\"roleGroup\", userService.selectUserRoleGroup(user.getUserId()));\r\n        mmap.put(\"postGroup\", userService.selectUserPostGroup(user.getUserId()));\r\n        return prefix + \"/profile\";\r\n    }\r\n\r\n    @GetMapping(\"/checkPassword\")\r\n    @ResponseBody\r\n    public boolean checkPassword(String password)\r\n    {\r\n        SysUser user = getSysUser();\r\n        if (passwordService.matches(user, password))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @GetMapping(\"/resetPwd\")\r\n    public String resetPwd(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/resetPwd\";\r\n    }\r\n\r\n    @Log(title = \"\u91cd\u7f6e\u5bc6\u7801\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/resetPwd\")\r\n    @ResponseBody\r\n    public AjaxResult resetPwd(String oldPassword, String newPassword)\r\n    {\r\n        SysUser user = getSysUser();\r\n        if (!passwordService.matches(user, oldPassword))\r\n        {\r\n            return error(\"\u4fee\u6539\u5bc6\u7801\u5931\u8d25\uff0c\u65e7\u5bc6\u7801\u9519\u8bef\");\r\n        }\r\n        if (passwordService.matches(user, newPassword))\r\n        {\r\n            return error(\"\u65b0\u5bc6\u7801\u4e0d\u80fd\u4e0e\u65e7\u5bc6\u7801\u76f8\u540c\");\r\n        }\r\n        user.setSalt(ShiroUtils.randomSalt());\r\n        user.setPassword(passwordService.encryptPassword(user.getLoginName(), newPassword, user.getSalt()));\r\n        user.setPwdUpdateDate(DateUtils.getNowDate());\r\n        if (userService.resetUserPwd(user) > 0)\r\n        {\r\n            setSysUser(userService.selectUserById(user.getUserId()));\r\n            return success();\r\n        }\r\n        return error(\"\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u7528\u6237\r\n     */\r\n    @GetMapping(\"/edit\")\r\n    public String edit(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/edit\";\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u5934\u50cf\r\n     */\r\n    @GetMapping(\"/avatar\")\r\n    public String avatar(ModelMap mmap)\r\n    {\r\n        SysUser user = getSysUser();\r\n        mmap.put(\"user\", userService.selectUserById(user.getUserId()));\r\n        return prefix + \"/avatar\";\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u7528\u6237\r\n     */\r\n    @Log(title = \"\u4e2a\u4eba\u4fe1\u606f\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/update\")\r\n    @ResponseBody\r\n    public AjaxResult update(SysUser user)\r\n    {\r\n        SysUser currentUser = getSysUser();\r\n        currentUser.setUserName(user.getUserName());\r\n        currentUser.setEmail(user.getEmail());\r\n        currentUser.setPhonenumber(user.getPhonenumber());\r\n        currentUser.setSex(user.getSex());\r\n        if (StringUtils.isNotEmpty(user.getPhonenumber())\r\n                && UserConstants.USER_PHONE_NOT_UNIQUE.equals(userService.checkPhoneUnique(currentUser)))\r\n        {\r\n            return error(\"\u4fee\u6539\u7528\u6237'\" + currentUser.getLoginName() + \"'\u5931\u8d25\uff0c\u624b\u673a\u53f7\u7801\u5df2\u5b58\u5728\");\r\n        }\r\n        else if (StringUtils.isNotEmpty(user.getEmail())\r\n                && UserConstants.USER_EMAIL_NOT_UNIQUE.equals(userService.checkEmailUnique(currentUser)))\r\n        {\r\n            return error(\"\u4fee\u6539\u7528\u6237'\" + currentUser.getLoginName() + \"'\u5931\u8d25\uff0c\u90ae\u7bb1\u8d26\u53f7\u5df2\u5b58\u5728\");\r\n        }\r\n        if (userService.updateUserInfo(currentUser) > 0)\r\n        {\r\n            setSysUser(userService.selectUserById(currentUser.getUserId()));\r\n            return success();\r\n        }\r\n        return error();\r\n    }\r\n\r\n    /**\r\n     * \u4fdd\u5b58\u5934\u50cf\r\n     */\r\n    @Log(title = \"\u4e2a\u4eba\u4fe1\u606f\", businessType = BusinessType.UPDATE)\r\n    @PostMapping(\"/updateAvatar\")\r\n    @ResponseBody\r\n    public AjaxResult updateAvatar(@RequestParam(\"avatarfile\") MultipartFile file)\r\n    {\r\n        SysUser currentUser = getSysUser();\r\n        try\r\n        {\r\n            if (!file.isEmpty())\r\n            {\r\n                String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file, MimeTypeUtils.IMAGE_EXTENSION);\r\n                currentUser.setAvatar(avatar);\r\n                if (userService.updateUserInfo(currentUser) > 0)\r\n                {\r\n                    setSysUser(userService.selectUserById(currentUser.getUserId()));\r\n                    return success();\r\n                }\r\n            }\r\n            return error();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            log.error(\"\u4fee\u6539\u5934\u50cf\u5931\u8d25\uff01\", e);\r\n            return error(e.getMessage());\r\n        }\r\n    }\r\n}\r\n", "package com.ruoyi.common.exception.file;\r\n\r\nimport java.util.Arrays;\r\nimport org.apache.commons.fileupload.FileUploadException;\r\n\r\n/**\r\n * \u6587\u4ef6\u4e0a\u4f20 \u8bef\u5f02\u5e38\u7c7b\r\n * \r\n * @author ruoyi\r\n */\r\npublic class InvalidExtensionException extends FileUploadException\r\n{\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    private String[] allowedExtension;\r\n    private String extension;\r\n    private String filename;\r\n\r\n    public InvalidExtensionException(String[] allowedExtension, String extension, String filename)\r\n    {\r\n        super(\"\u6587\u4ef6[\" + filename + \"]\u540e\u7f00[\" + extension + \"]\u4e0d\u6b63\u786e\uff0c\u8bf7\u4e0a\u4f20 [\" + Arrays.toString(allowedExtension) + \"]\u683c\u5f0f\u6587\u4ef6\");\r\n        this.allowedExtension = allowedExtension;\r\n        this.extension = extension;\r\n        this.filename = filename;\r\n    }\r\n\r\n    public String[] getAllowedExtension()\r\n    {\r\n        return allowedExtension;\r\n    }\r\n\r\n    public String getExtension()\r\n    {\r\n        return extension;\r\n    }\r\n\r\n    public String getFilename()\r\n    {\r\n        return filename;\r\n    }\r\n\r\n    public static class InvalidImageExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidImageExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n\r\n    public static class InvalidFlashExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidFlashExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n\r\n    public static class InvalidMediaExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidMediaExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n    \r\n    public static class InvalidVideoExtensionException extends InvalidExtensionException\r\n    {\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        public InvalidVideoExtensionException(String[] allowedExtension, String extension, String filename)\r\n        {\r\n            super(allowedExtension, extension, filename);\r\n        }\r\n    }\r\n}\r\n"], "filenames": ["ruoyi-admin/src/main/java/com/ruoyi/web/controller/system/SysProfileController.java", "ruoyi-common/src/main/java/com/ruoyi/common/exception/file/InvalidExtensionException.java"], "buggy_code_start_loc": [24, 21], "buggy_code_end_loc": [172, 22], "fixing_code_start_loc": [25, 21], "fixing_code_end_loc": [173, 22], "type": "CWE-79", "message": "An arbitrary file upload vulnerability in the background management module of RuoYi v4.7.3 and below allows attackers to execute arbitrary code via a crafted HTML file.", "other": {"cve": {"id": "CVE-2022-32065", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-13T15:15:10.707", "lastModified": "2022-07-26T10:38:21.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An arbitrary file upload vulnerability in the background management module of RuoYi v4.7.3 and below allows attackers to execute arbitrary code via a crafted HTML file."}, {"lang": "es", "value": "Una vulnerabilidad de carga de archivos arbitraria en el m\u00f3dulo de administraci\u00f3n de fondo de RuoYi versiones v4.7.3 y anteriores permite a atacantes ejecutar c\u00f3digo arbitrario por medio de un archivo HTML dise\u00f1ado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ruoyi:ruoyi:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.3", "matchCriteriaId": "1501E3A5-4A4F-4D50-B99A-D553D98C20B2"}]}]}], "references": [{"url": "https://gitee.com/y_project/RuoYi/commit/d8b2a9a905fb750fa60e2400238cf4750a77c5e6", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://gitee.com/y_project/RuoYi/issues/I57IME", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/yangzongzhuan/RuoYi/commit/d8b2a9a905fb750fa60e2400238cf4750a77c5e6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/yangzongzhuan/RuoYi/issues/118", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yangzongzhuan/RuoYi/commit/d8b2a9a905fb750fa60e2400238cf4750a77c5e6"}}