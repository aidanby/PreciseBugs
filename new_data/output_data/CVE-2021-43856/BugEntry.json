{"buggy_code": ["<template lang='pug'>\n  v-container(fluid, grid-list-lg)\n    v-layout(row wrap)\n      v-flex(xs12)\n        .admin-header\n          img.animated.fadeInUp(src='/_assets/svg/icon-private.svg', alt='Security', style='width: 80px;')\n          .admin-header-title\n            .headline.primary--text.animated.fadeInLeft {{ $t('admin:security.title') }}\n            .subtitle-1.grey--text.animated.fadeInLeft {{ $t('admin:security.subtitle') }}\n          v-spacer\n          v-btn.animated.fadeInDown(color='success', depressed, @click='save', large)\n            v-icon(left) mdi-check\n            span {{$t('common:actions.apply')}}\n        v-form.pt-3\n          v-layout(row wrap)\n            v-flex(lg6 xs12)\n              v-card.animated.fadeInUp\n                v-toolbar(color='red darken-2', dark, dense, flat)\n                  v-toolbar-title.subtitle-1 Security\n                v-card-info(color='red')\n                  span Make sure to understand the implications before turning on / off a security feature.\n                v-card-text\n                  v-switch(\n                    inset\n                    label='Block Open Redirect'\n                    color='red darken-2'\n                    v-model='config.securityOpenRedirect'\n                    persistent-hint\n                    hint='Prevents user controlled URLs from directing to websites outside of your wiki. This provides Open Redirect protection.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch.mt-3(\n                    inset\n                    label='Block IFrame Embedding'\n                    color='red darken-2'\n                    v-model='config.securityIframe'\n                    persistent-hint\n                    hint='Prevents other websites from embedding your wiki in an iframe. This provides clickjacking protection.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Same Origin Referrer Policy'\n                    color='red darken-2'\n                    v-model='config.securityReferrerPolicy'\n                    persistent-hint\n                    hint='Limits the referrer header to same origin.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Trust X-Forwarded-* Proxy Headers'\n                    color='red darken-2'\n                    v-model='config.securityTrustProxy'\n                    persistent-hint\n                    hint='Should be enabled when using a reverse-proxy like nginx, apache, CloudFlare, etc in front of Wiki.js. Turn off otherwise.'\n                    )\n\n                  //- v-divider.mt-3\n                  //- v-switch(\n                  //-   inset\n                  //-   label='Subresource Integrity (SRI)'\n                  //-   color='red darken-2'\n                  //-   v-model='config.securitySRI'\n                  //-   persistent-hint\n                  //-   hint='This ensure that resources such as CSS and JS files are not altered during delivery.'\n                  //-   disabled\n                  //-   )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Enforce HSTS'\n                    color='red darken-2'\n                    v-model='config.securityHSTS'\n                    persistent-hint\n                    hint='This ensures the connection cannot be established through an insecure HTTP connection.'\n                    )\n                  v-select.mt-5(\n                    outlined\n                    label='HSTS Max Age'\n                    :items='hstsDurations'\n                    v-model='config.securityHSTSDuration'\n                    prepend-icon='mdi-subdirectory-arrow-right'\n                    :disabled='!config.securityHSTS'\n                    hide-details\n                    style='max-width: 450px;'\n                    )\n                  .pl-11.mt-3\n                    .caption Defines the duration for which the server should only deliver content through HTTPS.\n                    .caption It's a good idea to start with small values and make sure that nothing breaks on your wiki before moving to longer values.\n\n                  //- v-divider.mt-3\n                  //- v-switch(\n                  //-   inset\n                  //-   label='Enforce CSP'\n                  //-   color='red darken-2'\n                  //-   v-model='config.securityCSP'\n                  //-   persistent-hint\n                  //-   hint='Restricts scripts to pre-approved content sources.'\n                  //-   disabled\n                  //-   )\n                  //- v-textarea.mt-5(\n                  //-   label='CSP Directives'\n                  //-   outlined\n                  //-   v-model='config.securityCSPDirectives'\n                  //-   prepend-icon='mdi-subdirectory-arrow-right'\n                  //-   persistent-hint\n                  //-   hint='One directive per line.'\n                  //-   disabled\n                  //- )\n\n            v-flex(lg6 xs12)\n              v-card.animated.fadeInUp.wait-p2s\n                v-toolbar(color='primary', dark, dense, flat)\n                  v-toolbar-title.subtitle-1 {{ $t('admin:security.uploads') }}\n                v-card-info(color='blue')\n                  span {{$t('admin:security.uploadsInfo')}}\n                v-card-text\n                  v-text-field.mt-3(\n                    outlined\n                    :label='$t(`admin:security.maxUploadSize`)'\n                    required\n                    v-model='config.uploadMaxFileSize'\n                    prepend-icon='mdi-progress-upload'\n                    :hint='$t(`admin:security.maxUploadSizeHint`)'\n                    persistent-hint\n                    :suffix='$t(`admin:security.maxUploadSizeSuffix`)'\n                    style='max-width: 450px;'\n                    )\n                  v-text-field.mt-3(\n                    outlined\n                    :label='$t(`admin:security.maxUploadBatch`)'\n                    required\n                    v-model='config.uploadMaxFiles'\n                    prepend-icon='mdi-upload-lock'\n                    :hint='$t(`admin:security.maxUploadBatchHint`)'\n                    persistent-hint\n                    :suffix='$t(`admin:security.maxUploadBatchSuffix`)'\n                    style='max-width: 450px;'\n                    )\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Scan and Sanitize SVG Uploads'\n                    color='primary'\n                    v-model='config.uploadScanSVG'\n                    persistent-hint\n                    hint='Should SVG uploads be scanned for vulnerabilities and stripped of any potentially unsafe content.'\n                    )\n\n              v-card.mt-3.animated.fadeInUp.wait-p2s\n                v-toolbar(flat, color='primary', dark, dense)\n                  .subtitle-1 {{$t('admin:security.login')}}\n                //- v-card-info(color='blue')\n                //-   span {{$t('admin:security.loginInfo')}}\n                .overline.grey--text.pa-4 {{$t('admin:security.loginScreen')}}\n                .px-4.pb-3\n                  v-text-field(\n                    outlined\n                    :label='$t(`admin:security.loginBgUrl`)'\n                    v-model='config.authLoginBgUrl'\n                    :hint='$t(`admin:security.loginBgUrlHint`)'\n                    persistent-hint\n                    prepend-icon='mdi-image-area'\n                    append-icon='mdi-folder-image'\n                    @click:append='browseLoginBg'\n                  )\n                  v-switch(\n                    inset\n                    :label='$t(`admin:security.bypassLogin`)'\n                    color='primary'\n                    v-model='config.authAutoLogin'\n                    prepend-icon='mdi-fast-forward'\n                    persistent-hint\n                    :hint='$t(`admin:security.bypassLoginHint`)'\n                    )\n                  v-switch(\n                    inset\n                    :label='$t(`admin:security.hideLocalLogin`)'\n                    color='primary'\n                    v-model='config.authHideLocal'\n                    prepend-icon='mdi-eye-off-outline'\n                    persistent-hint\n                    :hint='$t(`admin:security.hideLocalLoginHint`)'\n                    )\n                v-divider.mt-3\n                .overline.grey--text.pa-4 {{$t('admin:security.loginSecurity')}}\n                .px-4.pb-3\n                  v-switch.mt-0(\n                    inset\n                    :label='$t(`admin:security.enforce2fa`)'\n                    color='primary'\n                    v-model='config.authEnforce2FA'\n                    prepend-icon='mdi-two-factor-authentication'\n                    :hint='$t(`admin:security.enforce2faHint`)'\n                    persistent-hint\n                  )\n                v-divider.mt-3\n                .overline.grey--text.pa-4 {{$t('admin:security.jwt')}}\n                .px-4.pb-3\n                  v-text-field(\n                    v-model='config.authJwtAudience'\n                    outlined\n                    prepend-icon='mdi-account-group-outline'\n                    :label='$t(`admin:auth.jwtAudience`)'\n                    :hint='$t(`admin:auth.jwtAudienceHint`)'\n                    persistent-hint\n                  )\n                  v-text-field.mt-3(\n                    v-model='config.authJwtExpiration'\n                    outlined\n                    prepend-icon='mdi-clock-outline'\n                    :label='$t(`admin:auth.tokenExpiration`)'\n                    :hint='$t(`admin:auth.tokenExpirationHint`)'\n                    persistent-hint\n                  )\n                  v-text-field.mt-3(\n                    v-model='config.authJwtRenewablePeriod'\n                    outlined\n                    prepend-icon='mdi-update'\n                    :label='$t(`admin:auth.tokenRenewalPeriod`)'\n                    :hint='$t(`admin:auth.tokenRenewalPeriodHint`)'\n                    persistent-hint\n                  )\n\n    component(:is='activeModal')\n</template>\n\n<script>\nimport _ from 'lodash'\nimport { sync } from 'vuex-pathify'\nimport gql from 'graphql-tag'\n\nimport editorStore from '../../store/editor'\n\n/* global WIKI */\n\nWIKI.$store.registerModule('editor', editorStore)\n\nexport default {\n  i18nOptions: { namespaces: 'editor' },\n  components: {\n    editorModalMedia: () => import(/* webpackChunkName: \"editor\", webpackMode: \"lazy\" */ '../editor/editor-modal-media.vue')\n  },\n  data() {\n    return {\n      config: {\n        uploadMaxFileSize: 0,\n        uploadMaxFiles: 0,\n        uploadScanSVG: true,\n        securityOpenRedirect: true,\n        securityIframe: true,\n        securityReferrerPolicy: true,\n        securityTrustProxy: true,\n        securitySRI: true,\n        securityHSTS: false,\n        securityHSTSDuration: 0,\n        securityCSP: false,\n        securityCSPDirectives: '',\n        authAutoLogin: false,\n        authHideLocal: false,\n        authLoginBgUrl: '',\n        authJwtAudience: 'urn:wiki.js',\n        authJwtExpiration: '30m',\n        authJwtRenewablePeriod: '14d'\n      },\n      hstsDurations: [\n        { value: 300, text: '5 minutes' },\n        { value: 86400, text: '1 day' },\n        { value: 604800, text: '1 week' },\n        { value: 2592000, text: '1 month' },\n        { value: 31536000, text: '1 year' },\n        { value: 63072000, text: '2 years' }\n      ]\n    }\n  },\n  computed: {\n    activeModal: sync('editor/activeModal')\n  },\n  methods: {\n    async save () {\n      try {\n        await this.$apollo.mutate({\n          mutation: gql`\n            mutation (\n              $authAutoLogin: Boolean\n              $authEnforce2FA: Boolean\n              $authHideLocal: Boolean\n              $authLoginBgUrl: String\n              $authJwtAudience: String\n              $authJwtExpiration: String\n              $authJwtRenewablePeriod: String\n              $uploadMaxFileSize: Int\n              $uploadMaxFiles: Int\n              $uploadScanSVG: Boolean\n              $securityOpenRedirect: Boolean\n              $securityIframe: Boolean\n              $securityReferrerPolicy: Boolean\n              $securityTrustProxy: Boolean\n              $securitySRI: Boolean\n              $securityHSTS: Boolean\n              $securityHSTSDuration: Int\n              $securityCSP: Boolean\n              $securityCSPDirectives: String\n            ) {\n              site {\n                updateConfig(\n                  authAutoLogin: $authAutoLogin,\n                  authEnforce2FA: $authEnforce2FA,\n                  authHideLocal: $authHideLocal,\n                  authLoginBgUrl: $authLoginBgUrl,\n                  authJwtAudience: $authJwtAudience,\n                  authJwtExpiration: $authJwtExpiration,\n                  authJwtRenewablePeriod: $authJwtRenewablePeriod,\n                  uploadMaxFileSize: $uploadMaxFileSize,\n                  uploadMaxFiles: $uploadMaxFiles,\n                  uploadScanSVG: $uploadScanSVG\n                  securityOpenRedirect: $securityOpenRedirect,\n                  securityIframe: $securityIframe,\n                  securityReferrerPolicy: $securityReferrerPolicy,\n                  securityTrustProxy: $securityTrustProxy,\n                  securitySRI: $securitySRI,\n                  securityHSTS: $securityHSTS,\n                  securityHSTSDuration: $securityHSTSDuration,\n                  securityCSP: $securityCSP,\n                  securityCSPDirectives: $securityCSPDirectives\n                ) {\n                  responseResult {\n                    succeeded\n                    errorCode\n                    slug\n                    message\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            authAutoLogin: _.get(this.config, 'authAutoLogin', false),\n            authEnforce2FA: _.get(this.config, 'authEnforce2FA', false),\n            authHideLocal: _.get(this.config, 'authHideLocal', false),\n            authLoginBgUrl: _.get(this.config, 'authLoginBgUrl', ''),\n            authJwtAudience: _.get(this.config, 'authJwtAudience', ''),\n            authJwtExpiration: _.get(this.config, 'authJwtExpiration', ''),\n            authJwtRenewablePeriod: _.get(this.config, 'authJwtRenewablePeriod', ''),\n            uploadMaxFileSize: _.toSafeInteger(_.get(this.config, 'uploadMaxFileSize', 0)),\n            uploadMaxFiles: _.toSafeInteger(_.get(this.config, 'uploadMaxFiles', 0)),\n            uploadScanSVG: _.get(this.config, 'uploadScanSVG', false),\n            securityOpenRedirect: _.get(this.config, 'securityOpenRedirect', false),\n            securityIframe: _.get(this.config, 'securityIframe', false),\n            securityReferrerPolicy: _.get(this.config, 'securityReferrerPolicy', false),\n            securityTrustProxy: _.get(this.config, 'securityTrustProxy', false),\n            securitySRI: _.get(this.config, 'securitySRI', false),\n            securityHSTS: _.get(this.config, 'securityHSTS', false),\n            securityHSTSDuration: _.get(this.config, 'securityHSTSDuration', 0),\n            securityCSP: _.get(this.config, 'securityCSP', false),\n            securityCSPDirectives: _.get(this.config, 'securityCSPDirectives', '')\n          },\n          watchLoading (isLoading) {\n            this.$store.commit(`loading${isLoading ? 'Start' : 'Stop'}`, 'admin-site-update')\n          }\n        })\n        this.$store.commit('showNotification', {\n          style: 'success',\n          message: 'Configuration saved successfully.',\n          icon: 'check'\n        })\n      } catch (err) {\n        this.$store.commit('pushGraphError', err)\n      }\n    },\n    browseLoginBg () {\n      this.$store.set('editor/editorKey', 'common')\n      this.activeModal = 'editorModalMedia'\n    }\n  },\n  mounted () {\n    this.$root.$on('editorInsert', opts => {\n      this.config.authLoginBgUrl = opts.path\n    })\n  },\n  beforeDestroy() {\n    this.$root.$off('editorInsert')\n  },\n  apollo: {\n    config: {\n      query: gql`\n        {\n          site {\n            config {\n              authAutoLogin\n              authEnforce2FA\n              authHideLocal\n              authLoginBgUrl\n              authJwtAudience\n              authJwtExpiration\n              authJwtRenewablePeriod\n              uploadMaxFileSize\n              uploadMaxFiles\n              uploadScanSVG\n              securityOpenRedirect\n              securityIframe\n              securityReferrerPolicy\n              securityTrustProxy\n              securitySRI\n              securityHSTS\n              securityHSTSDuration\n              securityCSP\n              securityCSPDirectives\n            }\n          }\n        }\n      `,\n      fetchPolicy: 'network-only',\n      update: (data) => _.cloneDeep(data.site.config),\n      watchLoading (isLoading) {\n        this.$store.commit(`loading${isLoading ? 'Start' : 'Stop'}`, 'admin-security-refresh')\n      }\n    }\n  }\n}\n</script>\n\n<style lang='scss'>\n\n</style>\n", "# ---------------------------------\n# DO NOT EDIT THIS FILE!\n# This is reserved for system use!\n# ---------------------------------\nname: Wiki.js\ndefaults:\n  config:\n    # File defaults\n    port: 80\n    db:\n      type: postgres\n      host: localhost\n      port: 5432\n      user: wikijs\n      pass: wikijsrocks\n      db: wiki\n      ssl: false\n      storage: ./db.sqlite\n      sslOptions:\n        auto: true\n    ssl:\n      enabled: false\n    pool:\n      min: 1\n    bindIP: 0.0.0.0\n    logLevel: info\n    offline: false\n    ha: false\n    # DB defaults\n    api:\n      isEnabled: false\n    graphEndpoint: 'https://graph.requarks.io'\n    lang:\n      code: en\n      autoUpdate: true\n      namespaces: []\n      namespacing: false\n      rtl: false\n    telemetry:\n      clientId: ''\n      isEnabled: false\n    title: Wiki.js\n    company: ''\n    contentLicense: ''\n    logoUrl: https://static.requarks.io/logo/wikijs-butterfly.svg\n    mail:\n      host: ''\n      secure: true\n      verifySSL: true\n    nav:\n      mode: 'MIXED'\n    theming:\n      theme: 'default'\n      iconset: 'md'\n      darkMode: false\n    auth:\n      autoLogin: false\n      enforce2FA: false\n      hideLocal: false\n      loginBgUrl: ''\n      audience: 'urn:wiki.js'\n      tokenExpiration: '30m'\n      tokenRenewal: '14d'\n    features:\n      featurePageRatings: true\n      featurePageComments: true\n      featurePersonalWikis: true\n    security:\n      securityOpenRedirect: true\n      securityIframe: true\n      securityReferrerPolicy: true\n      securityTrustProxy: true\n      securitySRI: true\n      securityHSTS: false\n      securityHSTSDuration: 300\n      securityCSP: false\n      securityCSPDirectives: ''\n    server:\n      sslRedir: false\n    uploads:\n      maxFileSize: 5242880\n      maxFiles: 10\n      scanSVG: true\n    flags:\n      ldapdebug: false\n      sqllog: false\n    # System defaults\n    channel: STABLE\n    setup: false\n    dataPath: ./data\n    cors:\n      credentials: true\n      maxAge: 600\n      methods: 'GET,POST'\n      origin: true\n    search:\n      maxHits: 100\n    maintainerEmail: security@requarks.io\nlocaleNamespaces:\n  - admin\n  - auth\n  - common\njobs:\n  purgeUploads:\n    onInit: true\n    schedule: PT15M\n    offlineSkip: false\n    repeat: true\n  syncGraphLocales:\n    onInit: true\n    schedule: P1D\n    offlineSkip: true\n    repeat: true\n  syncGraphUpdates:\n    onInit: true\n    schedule: P1D\n    offlineSkip: true\n    repeat: true\n  rebuildTree:\n    onInit: true\n    offlineSkip: false\n    repeat: false\n    immediate: true\n    worker: true\ngroups:\n  defaultPermissions:\n    - 'read:pages'\n    - 'read:assets'\n    - 'read:comments'\n    - 'write:comments'\n  defaultPageRules:\n    - id: default\n      deny: false\n      match: START\n      roles:\n        - 'read:pages'\n        - 'read:assets'\n        - 'read:comments'\n        - 'write:comments'\n      path: ''\n      locales: []\nreservedPaths:\n  - login\n  - logout\n  - register\n  - verify\n  - favicons\n  - fonts\n  - img\n  - js\n  - svg\npageExtensions:\n  - md\n  - html\n  - txt\n# ---------------------------------\n", "const graphHelper = require('../../helpers/graph')\nconst _ = require('lodash')\n\n/* global WIKI */\n\nmodule.exports = {\n  Query: {\n    async site() { return {} }\n  },\n  Mutation: {\n    async site() { return {} }\n  },\n  SiteQuery: {\n    async config(obj, args, context, info) {\n      return {\n        host: WIKI.config.host,\n        title: WIKI.config.title,\n        company: WIKI.config.company,\n        contentLicense: WIKI.config.contentLicense,\n        logoUrl: WIKI.config.logoUrl,\n        ...WIKI.config.seo,\n        ...WIKI.config.features,\n        ...WIKI.config.security,\n        authAutoLogin: WIKI.config.auth.autoLogin,\n        authEnforce2FA: WIKI.config.auth.enforce2FA,\n        authHideLocal: WIKI.config.auth.hideLocal,\n        authLoginBgUrl: WIKI.config.auth.loginBgUrl,\n        authJwtAudience: WIKI.config.auth.audience,\n        authJwtExpiration: WIKI.config.auth.tokenExpiration,\n        authJwtRenewablePeriod: WIKI.config.auth.tokenRenewal,\n        uploadMaxFileSize: WIKI.config.uploads.maxFileSize,\n        uploadMaxFiles: WIKI.config.uploads.maxFiles,\n        uploadScanSVG: WIKI.config.uploads.scanSVG\n      }\n    }\n  },\n  SiteMutation: {\n    async updateConfig(obj, args, context) {\n      try {\n        if (args.host) {\n          let siteHost = _.trim(args.host)\n          if (siteHost.endsWith('/')) {\n            siteHost = siteHost.slice(0, -1)\n          }\n          WIKI.config.host = siteHost\n        }\n\n        if (args.title) {\n          WIKI.config.title = _.trim(args.title)\n        }\n\n        if (args.company) {\n          WIKI.config.company = _.trim(args.company)\n        }\n\n        if (args.contentLicense) {\n          WIKI.config.contentLicense = args.contentLicense\n        }\n\n        if (args.logoUrl) {\n          WIKI.config.logoUrl = _.trim(args.logoUrl)\n        }\n\n        WIKI.config.seo = {\n          description: _.get(args, 'description', WIKI.config.seo.description),\n          robots: _.get(args, 'robots', WIKI.config.seo.robots),\n          analyticsService: _.get(args, 'analyticsService', WIKI.config.seo.analyticsService),\n          analyticsId: _.get(args, 'analyticsId', WIKI.config.seo.analyticsId)\n        }\n\n        WIKI.config.auth = {\n          autoLogin: _.get(args, 'authAutoLogin', WIKI.config.auth.autoLogin),\n          enforce2FA: _.get(args, 'authEnforce2FA', WIKI.config.auth.enforce2FA),\n          hideLocal: _.get(args, 'authHideLocal', WIKI.config.auth.hideLocal),\n          loginBgUrl: _.get(args, 'authLoginBgUrl', WIKI.config.auth.loginBgUrl),\n          audience: _.get(args, 'authJwtAudience', WIKI.config.auth.audience),\n          tokenExpiration: _.get(args, 'authJwtExpiration', WIKI.config.auth.tokenExpiration),\n          tokenRenewal: _.get(args, 'authJwtRenewablePeriod', WIKI.config.auth.tokenRenewal)\n        }\n\n        WIKI.config.features = {\n          featurePageRatings: _.get(args, 'featurePageRatings', WIKI.config.features.featurePageRatings),\n          featurePageComments: _.get(args, 'featurePageComments', WIKI.config.features.featurePageComments),\n          featurePersonalWikis: _.get(args, 'featurePersonalWikis', WIKI.config.features.featurePersonalWikis)\n        }\n\n        WIKI.config.security = {\n          securityOpenRedirect: _.get(args, 'securityOpenRedirect', WIKI.config.security.securityOpenRedirect),\n          securityIframe: _.get(args, 'securityIframe', WIKI.config.security.securityIframe),\n          securityReferrerPolicy: _.get(args, 'securityReferrerPolicy', WIKI.config.security.securityReferrerPolicy),\n          securityTrustProxy: _.get(args, 'securityTrustProxy', WIKI.config.security.securityTrustProxy),\n          securitySRI: _.get(args, 'securitySRI', WIKI.config.security.securitySRI),\n          securityHSTS: _.get(args, 'securityHSTS', WIKI.config.security.securityHSTS),\n          securityHSTSDuration: _.get(args, 'securityHSTSDuration', WIKI.config.security.securityHSTSDuration),\n          securityCSP: _.get(args, 'securityCSP', WIKI.config.security.securityCSP),\n          securityCSPDirectives: _.get(args, 'securityCSPDirectives', WIKI.config.security.securityCSPDirectives)\n        }\n\n        WIKI.config.uploads = {\n          maxFileSize: _.get(args, 'uploadMaxFileSize', WIKI.config.uploads.maxFileSize),\n          maxFiles: _.get(args, 'uploadMaxFiles', WIKI.config.uploads.maxFiles),\n          scanSVG: _.get(args, 'uploadScanSVG', WIKI.config.uploads.scanSVG)\n        }\n\n        await WIKI.configSvc.saveToDb(['host', 'title', 'company', 'contentLicense', 'seo', 'logoUrl', 'auth', 'features', 'security', 'uploads'])\n\n        if (WIKI.config.security.securityTrustProxy) {\n          WIKI.app.enable('trust proxy')\n        } else {\n          WIKI.app.disable('trust proxy')\n        }\n\n        return {\n          responseResult: graphHelper.generateSuccess('Site configuration updated successfully')\n        }\n      } catch (err) {\n        return graphHelper.generateError(err)\n      }\n    }\n  }\n}\n", "# ===============================================\n# SITE\n# ===============================================\n\nextend type Query {\n  site: SiteQuery\n}\n\nextend type Mutation {\n  site: SiteMutation\n}\n\n# -----------------------------------------------\n# QUERIES\n# -----------------------------------------------\n\ntype SiteQuery {\n  config: SiteConfig @auth(requires: [\"manage:system\"])\n}\n\n# -----------------------------------------------\n# MUTATIONS\n# -----------------------------------------------\n\ntype SiteMutation {\n  updateConfig(\n    host: String\n    title: String\n    description: String\n    robots: [String]\n    analyticsService: String\n    analyticsId: String\n    company: String\n    contentLicense: String\n    logoUrl: String\n    authAutoLogin: Boolean\n    authEnforce2FA: Boolean\n    authHideLocal: Boolean\n    authLoginBgUrl: String\n    authJwtAudience: String\n    authJwtExpiration: String\n    authJwtRenewablePeriod: String\n    featurePageRatings: Boolean\n    featurePageComments: Boolean\n    featurePersonalWikis: Boolean\n    securityOpenRedirect: Boolean\n    securityIframe: Boolean\n    securityReferrerPolicy: Boolean\n    securityTrustProxy: Boolean\n    securitySRI: Boolean\n    securityHSTS: Boolean\n    securityHSTSDuration: Int\n    securityCSP: Boolean\n    securityCSPDirectives: String\n    uploadMaxFileSize: Int\n    uploadMaxFiles: Int\n    uploadScanSVG: Boolean\n\n  ): DefaultResponse @auth(requires: [\"manage:system\"])\n}\n\n# -----------------------------------------------\n# TYPES\n# -----------------------------------------------\n\ntype SiteConfig {\n  host: String\n  title: String\n  description: String\n  robots: [String]\n  analyticsService: String\n  analyticsId: String\n  company: String\n  contentLicense: String\n  logoUrl: String\n  authAutoLogin: Boolean\n  authEnforce2FA: Boolean\n  authHideLocal: Boolean\n  authLoginBgUrl: String\n  authJwtAudience: String\n  authJwtExpiration: String\n  authJwtRenewablePeriod: String\n  featurePageRatings: Boolean\n  featurePageComments: Boolean\n  featurePersonalWikis: Boolean\n  securityOpenRedirect: Boolean\n  securityIframe: Boolean\n  securityReferrerPolicy: Boolean\n  securityTrustProxy: Boolean\n  securitySRI: Boolean\n  securityHSTS: Boolean\n  securityHSTSDuration: Int\n  securityCSP: Boolean\n  securityCSPDirectives: String\n  uploadMaxFileSize: Int\n  uploadMaxFiles: Int\n  uploadScanSVG: Boolean\n}\n", "const crypto = require('crypto')\n\nmodule.exports = {\n  /**\n   * Generate unique hash from page\n   */\n  generateHash(assetPath) {\n    return crypto.createHash('sha1').update(assetPath).digest('hex')\n  }\n}\n", "/* global WIKI */\n\nconst Model = require('objection').Model\nconst moment = require('moment')\nconst path = require('path')\nconst fs = require('fs-extra')\nconst _ = require('lodash')\nconst assetHelper = require('../helpers/asset')\nconst Promise = require('bluebird')\n\n/**\n * Users model\n */\nmodule.exports = class Asset extends Model {\n  static get tableName() { return 'assets' }\n\n  static get jsonSchema () {\n    return {\n      type: 'object',\n\n      properties: {\n        id: {type: 'integer'},\n        filename: {type: 'string'},\n        hash: {type: 'string'},\n        ext: {type: 'string'},\n        kind: {type: 'string'},\n        mime: {type: 'string'},\n        fileSize: {type: 'integer'},\n        metadata: {type: 'object'},\n        createdAt: {type: 'string'},\n        updatedAt: {type: 'string'}\n      }\n    }\n  }\n\n  static get relationMappings() {\n    return {\n      author: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./users'),\n        join: {\n          from: 'assets.authorId',\n          to: 'users.id'\n        }\n      },\n      folder: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./assetFolders'),\n        join: {\n          from: 'assets.folderId',\n          to: 'assetFolders.id'\n        }\n      }\n    }\n  }\n\n  async $beforeUpdate(opt, context) {\n    await super.$beforeUpdate(opt, context)\n\n    this.updatedAt = moment.utc().toISOString()\n  }\n  async $beforeInsert(context) {\n    await super.$beforeInsert(context)\n\n    this.createdAt = moment.utc().toISOString()\n    this.updatedAt = moment.utc().toISOString()\n  }\n\n  async getAssetPath() {\n    let hierarchy = []\n    if (this.folderId) {\n      hierarchy = await WIKI.models.assetFolders.getHierarchy(this.folderId)\n    }\n    return (this.folderId) ? hierarchy.map(h => h.slug).join('/') + `/${this.filename}` : this.filename\n  }\n\n  async deleteAssetCache() {\n    await fs.remove(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${this.hash}.dat`))\n  }\n\n  static async upload(opts) {\n    const fileInfo = path.parse(opts.originalname)\n    const fileHash = assetHelper.generateHash(opts.assetPath)\n\n    // Check for existing asset\n    let asset = await WIKI.models.assets.query().where({\n      hash: fileHash,\n      folderId: opts.folderId\n    }).first()\n\n    // Build Object\n    let assetRow = {\n      filename: opts.originalname,\n      hash: fileHash,\n      ext: fileInfo.ext,\n      kind: _.startsWith(opts.mimetype, 'image/') ? 'image' : 'binary',\n      mime: opts.mimetype,\n      fileSize: opts.size,\n      folderId: opts.folderId\n    }\n\n    // Sanitize SVG contents\n    if (\n      WIKI.config.uploads.scanSVG &&\n      (\n        opts.mimetype.toLowerCase().startsWith('image/svg') ||\n        opts.ext.toLowerCase() === 'svg'\n      )\n    ) {\n      const svgSanitizeJob = await WIKI.scheduler.registerJob({\n        name: 'sanitize-svg',\n        immediate: true,\n        worker: true\n      }, opts.path)\n      await svgSanitizeJob.finished\n    }\n\n    // Save asset data\n    try {\n      const fileBuffer = await fs.readFile(opts.path)\n\n      if (asset) {\n        // Patch existing asset\n        if (opts.mode === 'upload') {\n          assetRow.authorId = opts.user.id\n        }\n        await WIKI.models.assets.query().patch(assetRow).findById(asset.id)\n        await WIKI.models.knex('assetData').where({\n          id: asset.id\n        }).update({\n          data: fileBuffer\n        })\n      } else {\n        // Create asset entry\n        assetRow.authorId = opts.user.id\n        asset = await WIKI.models.assets.query().insert(assetRow)\n        await WIKI.models.knex('assetData').insert({\n          id: asset.id,\n          data: fileBuffer\n        })\n      }\n\n      // Move temp upload to cache\n      if (opts.mode === 'upload') {\n        await fs.move(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      } else {\n        await fs.copy(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      }\n\n      // Add to Storage\n      if (!opts.skipStorage) {\n        await WIKI.models.storage.assetEvent({\n          event: 'uploaded',\n          asset: {\n            ...asset,\n            path: await asset.getAssetPath(),\n            data: fileBuffer,\n            authorId: opts.user.id,\n            authorName: opts.user.name,\n            authorEmail: opts.user.email\n          }\n        })\n      }\n    } catch (err) {\n      WIKI.logger.warn(err)\n    }\n  }\n\n  static async getAsset(assetPath, res) {\n    try {\n      const fileHash = assetHelper.generateHash(assetPath)\n      const cachePath = path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`)\n      if (await WIKI.models.assets.getAssetFromCache(assetPath, cachePath, res)) {\n        return\n      }\n      if (await WIKI.models.assets.getAssetFromStorage(assetPath, res)) {\n        return\n      }\n      await WIKI.models.assets.getAssetFromDb(assetPath, fileHash, cachePath, res)\n    } catch (err) {\n      if (err.code === `ECONNABORTED` || err.code === `EPIPE`) {\n        return\n      }\n      WIKI.logger.error(err)\n      res.sendStatus(500)\n    }\n  }\n\n  static async getAssetFromCache(assetPath, cachePath, res) {\n    try {\n      await fs.access(cachePath, fs.constants.R_OK)\n    } catch (err) {\n      return false\n    }\n    const sendFile = Promise.promisify(res.sendFile, {context: res})\n    res.type(path.extname(assetPath))\n    await sendFile(cachePath, { dotfiles: 'deny' })\n    return true\n  }\n\n  static async getAssetFromStorage(assetPath, res) {\n    const localLocations = await WIKI.models.storage.getLocalLocations({\n      asset: {\n        path: assetPath\n      }\n    })\n    for (let location of _.filter(localLocations, location => Boolean(location.path))) {\n      const assetExists = await WIKI.models.assets.getAssetFromCache(assetPath, location.path, res)\n      if (assetExists) {\n        return true\n      }\n    }\n    return false\n  }\n\n  static async getAssetFromDb(assetPath, fileHash, cachePath, res) {\n    const asset = await WIKI.models.assets.query().where('hash', fileHash).first()\n    if (asset) {\n      const assetData = await WIKI.models.knex('assetData').where('id', asset.id).first()\n      res.type(asset.ext)\n      res.send(assetData.data)\n      await fs.outputFile(cachePath, assetData.data)\n    } else {\n      res.sendStatus(404)\n    }\n  }\n\n  static async flushTempUploads() {\n    return fs.emptyDir(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `uploads`))\n  }\n}\n"], "fixing_code": ["<template lang='pug'>\n  v-container(fluid, grid-list-lg)\n    v-layout(row wrap)\n      v-flex(xs12)\n        .admin-header\n          img.animated.fadeInUp(src='/_assets/svg/icon-private.svg', alt='Security', style='width: 80px;')\n          .admin-header-title\n            .headline.primary--text.animated.fadeInLeft {{ $t('admin:security.title') }}\n            .subtitle-1.grey--text.animated.fadeInLeft {{ $t('admin:security.subtitle') }}\n          v-spacer\n          v-btn.animated.fadeInDown(color='success', depressed, @click='save', large)\n            v-icon(left) mdi-check\n            span {{$t('common:actions.apply')}}\n        v-form.pt-3\n          v-layout(row wrap)\n            v-flex(lg6 xs12)\n              v-card.animated.fadeInUp\n                v-toolbar(color='red darken-2', dark, dense, flat)\n                  v-toolbar-title.subtitle-1 Security\n                v-card-info(color='red')\n                  span Make sure to understand the implications before turning on / off a security feature.\n                v-card-text\n                  v-switch(\n                    inset\n                    label='Block Open Redirect'\n                    color='red darken-2'\n                    v-model='config.securityOpenRedirect'\n                    persistent-hint\n                    hint='Prevents user controlled URLs from directing to websites outside of your wiki. This provides Open Redirect protection.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch.mt-3(\n                    inset\n                    label='Block IFrame Embedding'\n                    color='red darken-2'\n                    v-model='config.securityIframe'\n                    persistent-hint\n                    hint='Prevents other websites from embedding your wiki in an iframe. This provides clickjacking protection.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Same Origin Referrer Policy'\n                    color='red darken-2'\n                    v-model='config.securityReferrerPolicy'\n                    persistent-hint\n                    hint='Limits the referrer header to same origin.'\n                    )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Trust X-Forwarded-* Proxy Headers'\n                    color='red darken-2'\n                    v-model='config.securityTrustProxy'\n                    persistent-hint\n                    hint='Should be enabled when using a reverse-proxy like nginx, apache, CloudFlare, etc in front of Wiki.js. Turn off otherwise.'\n                    )\n\n                  //- v-divider.mt-3\n                  //- v-switch(\n                  //-   inset\n                  //-   label='Subresource Integrity (SRI)'\n                  //-   color='red darken-2'\n                  //-   v-model='config.securitySRI'\n                  //-   persistent-hint\n                  //-   hint='This ensure that resources such as CSS and JS files are not altered during delivery.'\n                  //-   disabled\n                  //-   )\n\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Enforce HSTS'\n                    color='red darken-2'\n                    v-model='config.securityHSTS'\n                    persistent-hint\n                    hint='This ensures the connection cannot be established through an insecure HTTP connection.'\n                    )\n                  v-select.mt-5(\n                    outlined\n                    label='HSTS Max Age'\n                    :items='hstsDurations'\n                    v-model='config.securityHSTSDuration'\n                    prepend-icon='mdi-subdirectory-arrow-right'\n                    :disabled='!config.securityHSTS'\n                    hide-details\n                    style='max-width: 450px;'\n                    )\n                  .pl-11.mt-3\n                    .caption Defines the duration for which the server should only deliver content through HTTPS.\n                    .caption It's a good idea to start with small values and make sure that nothing breaks on your wiki before moving to longer values.\n\n                  //- v-divider.mt-3\n                  //- v-switch(\n                  //-   inset\n                  //-   label='Enforce CSP'\n                  //-   color='red darken-2'\n                  //-   v-model='config.securityCSP'\n                  //-   persistent-hint\n                  //-   hint='Restricts scripts to pre-approved content sources.'\n                  //-   disabled\n                  //-   )\n                  //- v-textarea.mt-5(\n                  //-   label='CSP Directives'\n                  //-   outlined\n                  //-   v-model='config.securityCSPDirectives'\n                  //-   prepend-icon='mdi-subdirectory-arrow-right'\n                  //-   persistent-hint\n                  //-   hint='One directive per line.'\n                  //-   disabled\n                  //- )\n\n            v-flex(lg6 xs12)\n              v-card.animated.fadeInUp.wait-p2s\n                v-toolbar(color='primary', dark, dense, flat)\n                  v-toolbar-title.subtitle-1 {{ $t('admin:security.uploads') }}\n                v-card-info(color='blue')\n                  span {{$t('admin:security.uploadsInfo')}}\n                v-card-text\n                  v-text-field.mt-3(\n                    outlined\n                    :label='$t(`admin:security.maxUploadSize`)'\n                    required\n                    v-model='config.uploadMaxFileSize'\n                    prepend-icon='mdi-progress-upload'\n                    :hint='$t(`admin:security.maxUploadSizeHint`)'\n                    persistent-hint\n                    :suffix='$t(`admin:security.maxUploadSizeSuffix`)'\n                    style='max-width: 450px;'\n                    )\n                  v-text-field.mt-3(\n                    outlined\n                    :label='$t(`admin:security.maxUploadBatch`)'\n                    required\n                    v-model='config.uploadMaxFiles'\n                    prepend-icon='mdi-upload-lock'\n                    :hint='$t(`admin:security.maxUploadBatchHint`)'\n                    persistent-hint\n                    :suffix='$t(`admin:security.maxUploadBatchSuffix`)'\n                    style='max-width: 450px;'\n                    )\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Scan and Sanitize SVG Uploads'\n                    color='primary'\n                    v-model='config.uploadScanSVG'\n                    persistent-hint\n                    hint='Should SVG uploads be scanned for vulnerabilities and stripped of any potentially unsafe content.'\n                    )\n                  v-divider.mt-3\n                  v-switch(\n                    inset\n                    label='Force Download of Unsafe Extensions'\n                    color='primary'\n                    v-model='config.uploadForceDownload'\n                    persistent-hint\n                    hint='Should non-image files be forced as downloads when accessed directly. This prevents potential XSS attacks via unsafe file extensions uploads.'\n                    )\n\n              v-card.mt-3.animated.fadeInUp.wait-p2s\n                v-toolbar(flat, color='primary', dark, dense)\n                  .subtitle-1 {{$t('admin:security.login')}}\n                //- v-card-info(color='blue')\n                //-   span {{$t('admin:security.loginInfo')}}\n                .overline.grey--text.pa-4 {{$t('admin:security.loginScreen')}}\n                .px-4.pb-3\n                  v-text-field(\n                    outlined\n                    :label='$t(`admin:security.loginBgUrl`)'\n                    v-model='config.authLoginBgUrl'\n                    :hint='$t(`admin:security.loginBgUrlHint`)'\n                    persistent-hint\n                    prepend-icon='mdi-image-area'\n                    append-icon='mdi-folder-image'\n                    @click:append='browseLoginBg'\n                  )\n                  v-switch(\n                    inset\n                    :label='$t(`admin:security.bypassLogin`)'\n                    color='primary'\n                    v-model='config.authAutoLogin'\n                    prepend-icon='mdi-fast-forward'\n                    persistent-hint\n                    :hint='$t(`admin:security.bypassLoginHint`)'\n                    )\n                  v-switch(\n                    inset\n                    :label='$t(`admin:security.hideLocalLogin`)'\n                    color='primary'\n                    v-model='config.authHideLocal'\n                    prepend-icon='mdi-eye-off-outline'\n                    persistent-hint\n                    :hint='$t(`admin:security.hideLocalLoginHint`)'\n                    )\n                v-divider.mt-3\n                .overline.grey--text.pa-4 {{$t('admin:security.loginSecurity')}}\n                .px-4.pb-3\n                  v-switch.mt-0(\n                    inset\n                    :label='$t(`admin:security.enforce2fa`)'\n                    color='primary'\n                    v-model='config.authEnforce2FA'\n                    prepend-icon='mdi-two-factor-authentication'\n                    :hint='$t(`admin:security.enforce2faHint`)'\n                    persistent-hint\n                  )\n                v-divider.mt-3\n                .overline.grey--text.pa-4 {{$t('admin:security.jwt')}}\n                .px-4.pb-3\n                  v-text-field(\n                    v-model='config.authJwtAudience'\n                    outlined\n                    prepend-icon='mdi-account-group-outline'\n                    :label='$t(`admin:auth.jwtAudience`)'\n                    :hint='$t(`admin:auth.jwtAudienceHint`)'\n                    persistent-hint\n                  )\n                  v-text-field.mt-3(\n                    v-model='config.authJwtExpiration'\n                    outlined\n                    prepend-icon='mdi-clock-outline'\n                    :label='$t(`admin:auth.tokenExpiration`)'\n                    :hint='$t(`admin:auth.tokenExpirationHint`)'\n                    persistent-hint\n                  )\n                  v-text-field.mt-3(\n                    v-model='config.authJwtRenewablePeriod'\n                    outlined\n                    prepend-icon='mdi-update'\n                    :label='$t(`admin:auth.tokenRenewalPeriod`)'\n                    :hint='$t(`admin:auth.tokenRenewalPeriodHint`)'\n                    persistent-hint\n                  )\n\n    component(:is='activeModal')\n</template>\n\n<script>\nimport _ from 'lodash'\nimport { sync } from 'vuex-pathify'\nimport gql from 'graphql-tag'\n\nimport editorStore from '../../store/editor'\n\n/* global WIKI */\n\nWIKI.$store.registerModule('editor', editorStore)\n\nexport default {\n  i18nOptions: { namespaces: 'editor' },\n  components: {\n    editorModalMedia: () => import(/* webpackChunkName: \"editor\", webpackMode: \"lazy\" */ '../editor/editor-modal-media.vue')\n  },\n  data() {\n    return {\n      config: {\n        uploadMaxFileSize: 0,\n        uploadMaxFiles: 0,\n        uploadScanSVG: true,\n        uploadForceDownload: true,\n        securityOpenRedirect: true,\n        securityIframe: true,\n        securityReferrerPolicy: true,\n        securityTrustProxy: true,\n        securitySRI: true,\n        securityHSTS: false,\n        securityHSTSDuration: 0,\n        securityCSP: false,\n        securityCSPDirectives: '',\n        authAutoLogin: false,\n        authHideLocal: false,\n        authLoginBgUrl: '',\n        authJwtAudience: 'urn:wiki.js',\n        authJwtExpiration: '30m',\n        authJwtRenewablePeriod: '14d'\n      },\n      hstsDurations: [\n        { value: 300, text: '5 minutes' },\n        { value: 86400, text: '1 day' },\n        { value: 604800, text: '1 week' },\n        { value: 2592000, text: '1 month' },\n        { value: 31536000, text: '1 year' },\n        { value: 63072000, text: '2 years' }\n      ]\n    }\n  },\n  computed: {\n    activeModal: sync('editor/activeModal')\n  },\n  methods: {\n    async save () {\n      try {\n        await this.$apollo.mutate({\n          mutation: gql`\n            mutation (\n              $authAutoLogin: Boolean\n              $authEnforce2FA: Boolean\n              $authHideLocal: Boolean\n              $authLoginBgUrl: String\n              $authJwtAudience: String\n              $authJwtExpiration: String\n              $authJwtRenewablePeriod: String\n              $uploadMaxFileSize: Int\n              $uploadMaxFiles: Int\n              $uploadScanSVG: Boolean\n              $uploadForceDownload: Boolean\n              $securityOpenRedirect: Boolean\n              $securityIframe: Boolean\n              $securityReferrerPolicy: Boolean\n              $securityTrustProxy: Boolean\n              $securitySRI: Boolean\n              $securityHSTS: Boolean\n              $securityHSTSDuration: Int\n              $securityCSP: Boolean\n              $securityCSPDirectives: String\n            ) {\n              site {\n                updateConfig(\n                  authAutoLogin: $authAutoLogin,\n                  authEnforce2FA: $authEnforce2FA,\n                  authHideLocal: $authHideLocal,\n                  authLoginBgUrl: $authLoginBgUrl,\n                  authJwtAudience: $authJwtAudience,\n                  authJwtExpiration: $authJwtExpiration,\n                  authJwtRenewablePeriod: $authJwtRenewablePeriod,\n                  uploadMaxFileSize: $uploadMaxFileSize,\n                  uploadMaxFiles: $uploadMaxFiles,\n                  uploadScanSVG: $uploadScanSVG\n                  uploadForceDownload: $uploadForceDownload,\n                  securityOpenRedirect: $securityOpenRedirect,\n                  securityIframe: $securityIframe,\n                  securityReferrerPolicy: $securityReferrerPolicy,\n                  securityTrustProxy: $securityTrustProxy,\n                  securitySRI: $securitySRI,\n                  securityHSTS: $securityHSTS,\n                  securityHSTSDuration: $securityHSTSDuration,\n                  securityCSP: $securityCSP,\n                  securityCSPDirectives: $securityCSPDirectives\n                ) {\n                  responseResult {\n                    succeeded\n                    errorCode\n                    slug\n                    message\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            authAutoLogin: _.get(this.config, 'authAutoLogin', false),\n            authEnforce2FA: _.get(this.config, 'authEnforce2FA', false),\n            authHideLocal: _.get(this.config, 'authHideLocal', false),\n            authLoginBgUrl: _.get(this.config, 'authLoginBgUrl', ''),\n            authJwtAudience: _.get(this.config, 'authJwtAudience', ''),\n            authJwtExpiration: _.get(this.config, 'authJwtExpiration', ''),\n            authJwtRenewablePeriod: _.get(this.config, 'authJwtRenewablePeriod', ''),\n            uploadMaxFileSize: _.toSafeInteger(_.get(this.config, 'uploadMaxFileSize', 0)),\n            uploadMaxFiles: _.toSafeInteger(_.get(this.config, 'uploadMaxFiles', 0)),\n            uploadScanSVG: _.get(this.config, 'uploadScanSVG', false),\n            uploadForceDownload: _.get(this.config, 'uploadForceDownload', false),\n            securityOpenRedirect: _.get(this.config, 'securityOpenRedirect', false),\n            securityIframe: _.get(this.config, 'securityIframe', false),\n            securityReferrerPolicy: _.get(this.config, 'securityReferrerPolicy', false),\n            securityTrustProxy: _.get(this.config, 'securityTrustProxy', false),\n            securitySRI: _.get(this.config, 'securitySRI', false),\n            securityHSTS: _.get(this.config, 'securityHSTS', false),\n            securityHSTSDuration: _.get(this.config, 'securityHSTSDuration', 0),\n            securityCSP: _.get(this.config, 'securityCSP', false),\n            securityCSPDirectives: _.get(this.config, 'securityCSPDirectives', '')\n          },\n          watchLoading (isLoading) {\n            this.$store.commit(`loading${isLoading ? 'Start' : 'Stop'}`, 'admin-site-update')\n          }\n        })\n        this.$store.commit('showNotification', {\n          style: 'success',\n          message: 'Configuration saved successfully.',\n          icon: 'check'\n        })\n      } catch (err) {\n        this.$store.commit('pushGraphError', err)\n      }\n    },\n    browseLoginBg () {\n      this.$store.set('editor/editorKey', 'common')\n      this.activeModal = 'editorModalMedia'\n    }\n  },\n  mounted () {\n    this.$root.$on('editorInsert', opts => {\n      this.config.authLoginBgUrl = opts.path\n    })\n  },\n  beforeDestroy() {\n    this.$root.$off('editorInsert')\n  },\n  apollo: {\n    config: {\n      query: gql`\n        {\n          site {\n            config {\n              authAutoLogin\n              authEnforce2FA\n              authHideLocal\n              authLoginBgUrl\n              authJwtAudience\n              authJwtExpiration\n              authJwtRenewablePeriod\n              uploadMaxFileSize\n              uploadMaxFiles\n              uploadScanSVG\n              uploadForceDownload\n              securityOpenRedirect\n              securityIframe\n              securityReferrerPolicy\n              securityTrustProxy\n              securitySRI\n              securityHSTS\n              securityHSTSDuration\n              securityCSP\n              securityCSPDirectives\n            }\n          }\n        }\n      `,\n      fetchPolicy: 'network-only',\n      update: (data) => _.cloneDeep(data.site.config),\n      watchLoading (isLoading) {\n        this.$store.commit(`loading${isLoading ? 'Start' : 'Stop'}`, 'admin-security-refresh')\n      }\n    }\n  }\n}\n</script>\n\n<style lang='scss'>\n\n</style>\n", "# ---------------------------------\n# DO NOT EDIT THIS FILE!\n# This is reserved for system use!\n# ---------------------------------\nname: Wiki.js\ndefaults:\n  config:\n    # File defaults\n    port: 80\n    db:\n      type: postgres\n      host: localhost\n      port: 5432\n      user: wikijs\n      pass: wikijsrocks\n      db: wiki\n      ssl: false\n      storage: ./db.sqlite\n      sslOptions:\n        auto: true\n    ssl:\n      enabled: false\n    pool:\n      min: 1\n    bindIP: 0.0.0.0\n    logLevel: info\n    offline: false\n    ha: false\n    # DB defaults\n    api:\n      isEnabled: false\n    graphEndpoint: 'https://graph.requarks.io'\n    lang:\n      code: en\n      autoUpdate: true\n      namespaces: []\n      namespacing: false\n      rtl: false\n    telemetry:\n      clientId: ''\n      isEnabled: false\n    title: Wiki.js\n    company: ''\n    contentLicense: ''\n    logoUrl: https://static.requarks.io/logo/wikijs-butterfly.svg\n    mail:\n      host: ''\n      secure: true\n      verifySSL: true\n    nav:\n      mode: 'MIXED'\n    theming:\n      theme: 'default'\n      iconset: 'md'\n      darkMode: false\n    auth:\n      autoLogin: false\n      enforce2FA: false\n      hideLocal: false\n      loginBgUrl: ''\n      audience: 'urn:wiki.js'\n      tokenExpiration: '30m'\n      tokenRenewal: '14d'\n    features:\n      featurePageRatings: true\n      featurePageComments: true\n      featurePersonalWikis: true\n    security:\n      securityOpenRedirect: true\n      securityIframe: true\n      securityReferrerPolicy: true\n      securityTrustProxy: true\n      securitySRI: true\n      securityHSTS: false\n      securityHSTSDuration: 300\n      securityCSP: false\n      securityCSPDirectives: ''\n    server:\n      sslRedir: false\n    uploads:\n      maxFileSize: 5242880\n      maxFiles: 10\n      scanSVG: true\n      forceDownload: true\n    flags:\n      ldapdebug: false\n      sqllog: false\n    # System defaults\n    channel: STABLE\n    setup: false\n    dataPath: ./data\n    cors:\n      credentials: true\n      maxAge: 600\n      methods: 'GET,POST'\n      origin: true\n    search:\n      maxHits: 100\n    maintainerEmail: security@requarks.io\nlocaleNamespaces:\n  - admin\n  - auth\n  - common\njobs:\n  purgeUploads:\n    onInit: true\n    schedule: PT15M\n    offlineSkip: false\n    repeat: true\n  syncGraphLocales:\n    onInit: true\n    schedule: P1D\n    offlineSkip: true\n    repeat: true\n  syncGraphUpdates:\n    onInit: true\n    schedule: P1D\n    offlineSkip: true\n    repeat: true\n  rebuildTree:\n    onInit: true\n    offlineSkip: false\n    repeat: false\n    immediate: true\n    worker: true\ngroups:\n  defaultPermissions:\n    - 'read:pages'\n    - 'read:assets'\n    - 'read:comments'\n    - 'write:comments'\n  defaultPageRules:\n    - id: default\n      deny: false\n      match: START\n      roles:\n        - 'read:pages'\n        - 'read:assets'\n        - 'read:comments'\n        - 'write:comments'\n      path: ''\n      locales: []\nreservedPaths:\n  - login\n  - logout\n  - register\n  - verify\n  - favicons\n  - fonts\n  - img\n  - js\n  - svg\npageExtensions:\n  - md\n  - html\n  - txt\n# ---------------------------------\n", "const graphHelper = require('../../helpers/graph')\nconst _ = require('lodash')\n\n/* global WIKI */\n\nmodule.exports = {\n  Query: {\n    async site() { return {} }\n  },\n  Mutation: {\n    async site() { return {} }\n  },\n  SiteQuery: {\n    async config(obj, args, context, info) {\n      return {\n        host: WIKI.config.host,\n        title: WIKI.config.title,\n        company: WIKI.config.company,\n        contentLicense: WIKI.config.contentLicense,\n        logoUrl: WIKI.config.logoUrl,\n        ...WIKI.config.seo,\n        ...WIKI.config.features,\n        ...WIKI.config.security,\n        authAutoLogin: WIKI.config.auth.autoLogin,\n        authEnforce2FA: WIKI.config.auth.enforce2FA,\n        authHideLocal: WIKI.config.auth.hideLocal,\n        authLoginBgUrl: WIKI.config.auth.loginBgUrl,\n        authJwtAudience: WIKI.config.auth.audience,\n        authJwtExpiration: WIKI.config.auth.tokenExpiration,\n        authJwtRenewablePeriod: WIKI.config.auth.tokenRenewal,\n        uploadMaxFileSize: WIKI.config.uploads.maxFileSize,\n        uploadMaxFiles: WIKI.config.uploads.maxFiles,\n        uploadScanSVG: WIKI.config.uploads.scanSVG,\n        uploadForceDownload: WIKI.config.uploads.forceDownload\n      }\n    }\n  },\n  SiteMutation: {\n    async updateConfig(obj, args, context) {\n      try {\n        if (args.host) {\n          let siteHost = _.trim(args.host)\n          if (siteHost.endsWith('/')) {\n            siteHost = siteHost.slice(0, -1)\n          }\n          WIKI.config.host = siteHost\n        }\n\n        if (args.title) {\n          WIKI.config.title = _.trim(args.title)\n        }\n\n        if (args.company) {\n          WIKI.config.company = _.trim(args.company)\n        }\n\n        if (args.contentLicense) {\n          WIKI.config.contentLicense = args.contentLicense\n        }\n\n        if (args.logoUrl) {\n          WIKI.config.logoUrl = _.trim(args.logoUrl)\n        }\n\n        WIKI.config.seo = {\n          description: _.get(args, 'description', WIKI.config.seo.description),\n          robots: _.get(args, 'robots', WIKI.config.seo.robots),\n          analyticsService: _.get(args, 'analyticsService', WIKI.config.seo.analyticsService),\n          analyticsId: _.get(args, 'analyticsId', WIKI.config.seo.analyticsId)\n        }\n\n        WIKI.config.auth = {\n          autoLogin: _.get(args, 'authAutoLogin', WIKI.config.auth.autoLogin),\n          enforce2FA: _.get(args, 'authEnforce2FA', WIKI.config.auth.enforce2FA),\n          hideLocal: _.get(args, 'authHideLocal', WIKI.config.auth.hideLocal),\n          loginBgUrl: _.get(args, 'authLoginBgUrl', WIKI.config.auth.loginBgUrl),\n          audience: _.get(args, 'authJwtAudience', WIKI.config.auth.audience),\n          tokenExpiration: _.get(args, 'authJwtExpiration', WIKI.config.auth.tokenExpiration),\n          tokenRenewal: _.get(args, 'authJwtRenewablePeriod', WIKI.config.auth.tokenRenewal)\n        }\n\n        WIKI.config.features = {\n          featurePageRatings: _.get(args, 'featurePageRatings', WIKI.config.features.featurePageRatings),\n          featurePageComments: _.get(args, 'featurePageComments', WIKI.config.features.featurePageComments),\n          featurePersonalWikis: _.get(args, 'featurePersonalWikis', WIKI.config.features.featurePersonalWikis)\n        }\n\n        WIKI.config.security = {\n          securityOpenRedirect: _.get(args, 'securityOpenRedirect', WIKI.config.security.securityOpenRedirect),\n          securityIframe: _.get(args, 'securityIframe', WIKI.config.security.securityIframe),\n          securityReferrerPolicy: _.get(args, 'securityReferrerPolicy', WIKI.config.security.securityReferrerPolicy),\n          securityTrustProxy: _.get(args, 'securityTrustProxy', WIKI.config.security.securityTrustProxy),\n          securitySRI: _.get(args, 'securitySRI', WIKI.config.security.securitySRI),\n          securityHSTS: _.get(args, 'securityHSTS', WIKI.config.security.securityHSTS),\n          securityHSTSDuration: _.get(args, 'securityHSTSDuration', WIKI.config.security.securityHSTSDuration),\n          securityCSP: _.get(args, 'securityCSP', WIKI.config.security.securityCSP),\n          securityCSPDirectives: _.get(args, 'securityCSPDirectives', WIKI.config.security.securityCSPDirectives)\n        }\n\n        WIKI.config.uploads = {\n          maxFileSize: _.get(args, 'uploadMaxFileSize', WIKI.config.uploads.maxFileSize),\n          maxFiles: _.get(args, 'uploadMaxFiles', WIKI.config.uploads.maxFiles),\n          scanSVG: _.get(args, 'uploadScanSVG', WIKI.config.uploads.scanSVG),\n          forceDownload: _.get(args, 'uploadForceDownload', WIKI.config.uploads.forceDownload)\n        }\n\n        await WIKI.configSvc.saveToDb(['host', 'title', 'company', 'contentLicense', 'seo', 'logoUrl', 'auth', 'features', 'security', 'uploads'])\n\n        if (WIKI.config.security.securityTrustProxy) {\n          WIKI.app.enable('trust proxy')\n        } else {\n          WIKI.app.disable('trust proxy')\n        }\n\n        return {\n          responseResult: graphHelper.generateSuccess('Site configuration updated successfully')\n        }\n      } catch (err) {\n        return graphHelper.generateError(err)\n      }\n    }\n  }\n}\n", "# ===============================================\n# SITE\n# ===============================================\n\nextend type Query {\n  site: SiteQuery\n}\n\nextend type Mutation {\n  site: SiteMutation\n}\n\n# -----------------------------------------------\n# QUERIES\n# -----------------------------------------------\n\ntype SiteQuery {\n  config: SiteConfig @auth(requires: [\"manage:system\"])\n}\n\n# -----------------------------------------------\n# MUTATIONS\n# -----------------------------------------------\n\ntype SiteMutation {\n  updateConfig(\n    host: String\n    title: String\n    description: String\n    robots: [String]\n    analyticsService: String\n    analyticsId: String\n    company: String\n    contentLicense: String\n    logoUrl: String\n    authAutoLogin: Boolean\n    authEnforce2FA: Boolean\n    authHideLocal: Boolean\n    authLoginBgUrl: String\n    authJwtAudience: String\n    authJwtExpiration: String\n    authJwtRenewablePeriod: String\n    featurePageRatings: Boolean\n    featurePageComments: Boolean\n    featurePersonalWikis: Boolean\n    securityOpenRedirect: Boolean\n    securityIframe: Boolean\n    securityReferrerPolicy: Boolean\n    securityTrustProxy: Boolean\n    securitySRI: Boolean\n    securityHSTS: Boolean\n    securityHSTSDuration: Int\n    securityCSP: Boolean\n    securityCSPDirectives: String\n    uploadMaxFileSize: Int\n    uploadMaxFiles: Int\n    uploadScanSVG: Boolean\n    uploadForceDownload: Boolean\n\n  ): DefaultResponse @auth(requires: [\"manage:system\"])\n}\n\n# -----------------------------------------------\n# TYPES\n# -----------------------------------------------\n\ntype SiteConfig {\n  host: String\n  title: String\n  description: String\n  robots: [String]\n  analyticsService: String\n  analyticsId: String\n  company: String\n  contentLicense: String\n  logoUrl: String\n  authAutoLogin: Boolean\n  authEnforce2FA: Boolean\n  authHideLocal: Boolean\n  authLoginBgUrl: String\n  authJwtAudience: String\n  authJwtExpiration: String\n  authJwtRenewablePeriod: String\n  featurePageRatings: Boolean\n  featurePageComments: Boolean\n  featurePersonalWikis: Boolean\n  securityOpenRedirect: Boolean\n  securityIframe: Boolean\n  securityReferrerPolicy: Boolean\n  securityTrustProxy: Boolean\n  securitySRI: Boolean\n  securityHSTS: Boolean\n  securityHSTSDuration: Int\n  securityCSP: Boolean\n  securityCSPDirectives: String\n  uploadMaxFileSize: Int\n  uploadMaxFiles: Int\n  uploadScanSVG: Boolean\n  uploadForceDownload: Boolean\n}\n", "const crypto = require('crypto')\nconst path = require('path')\n\nmodule.exports = {\n  /**\n   * Generate unique hash from page\n   */\n  generateHash(assetPath) {\n    return crypto.createHash('sha1').update(assetPath).digest('hex')\n  },\n\n  getPathInfo(assetPath) {\n    return path.parse(assetPath.toLowerCase())\n  }\n}\n", "/* global WIKI */\n\nconst Model = require('objection').Model\nconst moment = require('moment')\nconst path = require('path')\nconst fs = require('fs-extra')\nconst _ = require('lodash')\nconst assetHelper = require('../helpers/asset')\nconst Promise = require('bluebird')\n\n/**\n * Users model\n */\nmodule.exports = class Asset extends Model {\n  static get tableName() { return 'assets' }\n\n  static get jsonSchema () {\n    return {\n      type: 'object',\n\n      properties: {\n        id: {type: 'integer'},\n        filename: {type: 'string'},\n        hash: {type: 'string'},\n        ext: {type: 'string'},\n        kind: {type: 'string'},\n        mime: {type: 'string'},\n        fileSize: {type: 'integer'},\n        metadata: {type: 'object'},\n        createdAt: {type: 'string'},\n        updatedAt: {type: 'string'}\n      }\n    }\n  }\n\n  static get relationMappings() {\n    return {\n      author: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./users'),\n        join: {\n          from: 'assets.authorId',\n          to: 'users.id'\n        }\n      },\n      folder: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./assetFolders'),\n        join: {\n          from: 'assets.folderId',\n          to: 'assetFolders.id'\n        }\n      }\n    }\n  }\n\n  async $beforeUpdate(opt, context) {\n    await super.$beforeUpdate(opt, context)\n\n    this.updatedAt = moment.utc().toISOString()\n  }\n  async $beforeInsert(context) {\n    await super.$beforeInsert(context)\n\n    this.createdAt = moment.utc().toISOString()\n    this.updatedAt = moment.utc().toISOString()\n  }\n\n  async getAssetPath() {\n    let hierarchy = []\n    if (this.folderId) {\n      hierarchy = await WIKI.models.assetFolders.getHierarchy(this.folderId)\n    }\n    return (this.folderId) ? hierarchy.map(h => h.slug).join('/') + `/${this.filename}` : this.filename\n  }\n\n  async deleteAssetCache() {\n    await fs.remove(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${this.hash}.dat`))\n  }\n\n  static async upload(opts) {\n    const fileInfo = path.parse(opts.originalname)\n    const fileHash = assetHelper.generateHash(opts.assetPath)\n\n    // Check for existing asset\n    let asset = await WIKI.models.assets.query().where({\n      hash: fileHash,\n      folderId: opts.folderId\n    }).first()\n\n    // Build Object\n    let assetRow = {\n      filename: opts.originalname,\n      hash: fileHash,\n      ext: fileInfo.ext,\n      kind: _.startsWith(opts.mimetype, 'image/') ? 'image' : 'binary',\n      mime: opts.mimetype,\n      fileSize: opts.size,\n      folderId: opts.folderId\n    }\n\n    // Sanitize SVG contents\n    if (\n      WIKI.config.uploads.scanSVG &&\n      (\n        opts.mimetype.toLowerCase().startsWith('image/svg') ||\n        opts.ext.toLowerCase() === 'svg'\n      )\n    ) {\n      const svgSanitizeJob = await WIKI.scheduler.registerJob({\n        name: 'sanitize-svg',\n        immediate: true,\n        worker: true\n      }, opts.path)\n      await svgSanitizeJob.finished\n    }\n\n    // Save asset data\n    try {\n      const fileBuffer = await fs.readFile(opts.path)\n\n      if (asset) {\n        // Patch existing asset\n        if (opts.mode === 'upload') {\n          assetRow.authorId = opts.user.id\n        }\n        await WIKI.models.assets.query().patch(assetRow).findById(asset.id)\n        await WIKI.models.knex('assetData').where({\n          id: asset.id\n        }).update({\n          data: fileBuffer\n        })\n      } else {\n        // Create asset entry\n        assetRow.authorId = opts.user.id\n        asset = await WIKI.models.assets.query().insert(assetRow)\n        await WIKI.models.knex('assetData').insert({\n          id: asset.id,\n          data: fileBuffer\n        })\n      }\n\n      // Move temp upload to cache\n      if (opts.mode === 'upload') {\n        await fs.move(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      } else {\n        await fs.copy(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      }\n\n      // Add to Storage\n      if (!opts.skipStorage) {\n        await WIKI.models.storage.assetEvent({\n          event: 'uploaded',\n          asset: {\n            ...asset,\n            path: await asset.getAssetPath(),\n            data: fileBuffer,\n            authorId: opts.user.id,\n            authorName: opts.user.name,\n            authorEmail: opts.user.email\n          }\n        })\n      }\n    } catch (err) {\n      WIKI.logger.warn(err)\n    }\n  }\n\n  static async getAsset(assetPath, res) {\n    try {\n      const fileInfo = assetHelper.getPathInfo(assetPath)\n      const fileHash = assetHelper.generateHash(assetPath)\n      const cachePath = path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`)\n\n      // Force unsafe extensions to download\n      if (WIKI.config.uploads.forceDownload && !['.png', '.apng', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.svg'].includes(fileInfo.ext)) {\n        res.set('Content-disposition', 'attachment; filename=' + fileInfo.base)\n      }\n\n      if (await WIKI.models.assets.getAssetFromCache(assetPath, cachePath, res)) {\n        return\n      }\n      if (await WIKI.models.assets.getAssetFromStorage(assetPath, res)) {\n        return\n      }\n      await WIKI.models.assets.getAssetFromDb(assetPath, fileHash, cachePath, res)\n    } catch (err) {\n      if (err.code === `ECONNABORTED` || err.code === `EPIPE`) {\n        return\n      }\n      WIKI.logger.error(err)\n      res.sendStatus(500)\n    }\n  }\n\n  static async getAssetFromCache(assetPath, cachePath, res) {\n    try {\n      await fs.access(cachePath, fs.constants.R_OK)\n    } catch (err) {\n      return false\n    }\n    const sendFile = Promise.promisify(res.sendFile, {context: res})\n    res.type(path.extname(assetPath))\n    await sendFile(cachePath, { dotfiles: 'deny' })\n    return true\n  }\n\n  static async getAssetFromStorage(assetPath, res) {\n    const localLocations = await WIKI.models.storage.getLocalLocations({\n      asset: {\n        path: assetPath\n      }\n    })\n    for (let location of _.filter(localLocations, location => Boolean(location.path))) {\n      const assetExists = await WIKI.models.assets.getAssetFromCache(assetPath, location.path, res)\n      if (assetExists) {\n        return true\n      }\n    }\n    return false\n  }\n\n  static async getAssetFromDb(assetPath, fileHash, cachePath, res) {\n    const asset = await WIKI.models.assets.query().where('hash', fileHash).first()\n    if (asset) {\n      const assetData = await WIKI.models.knex('assetData').where('id', asset.id).first()\n      res.type(asset.ext)\n      res.send(assetData.data)\n      await fs.outputFile(cachePath, assetData.data)\n    } else {\n      res.sendStatus(404)\n    }\n  }\n\n  static async flushTempUploads() {\n    return fs.emptyDir(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `uploads`))\n  }\n}\n"], "filenames": ["client/components/admin/admin-security.vue", "server/app/data.yml", "server/graph/resolvers/site.js", "server/graph/schemas/site.graphql", "server/helpers/asset.js", "server/models/assets.js"], "buggy_code_start_loc": [153, 83, 33, 57, 1, 170], "buggy_code_end_loc": [404, 83, 103, 97, 8, 172], "fixing_code_start_loc": [154, 84, 33, 58, 2, 171], "fixing_code_end_loc": [419, 85, 105, 100, 14, 180], "type": "CWE-79", "message": "Wiki.js is a wiki app built on Node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through non-image file uploads for file types that can be viewed directly inline in the browser. By creating a malicious file which can execute inline JS when viewed in the browser (e.g. XML files), a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the file is viewed directly by other users. The file must be opened directly by the user and will not trigger directly in a normal Wiki.js page. A patch in version 2.5.264 fixes this vulnerability by adding an optional (enabled by default) force download flag to all non-image file types, preventing the file from being viewed inline in the browser. As a workaround, disable file upload for all non-trusted users. --- Thanks to @Haxatron for reporting this vulnerability. Initially reported via https://huntr.dev/bounties/266bff09-00d9-43ca-a4bb-bb540642811f/", "other": {"cve": {"id": "CVE-2021-43856", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-27T18:15:07.583", "lastModified": "2022-01-07T19:11:29.130", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wiki.js is a wiki app built on Node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through non-image file uploads for file types that can be viewed directly inline in the browser. By creating a malicious file which can execute inline JS when viewed in the browser (e.g. XML files), a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the file is viewed directly by other users. The file must be opened directly by the user and will not trigger directly in a normal Wiki.js page. A patch in version 2.5.264 fixes this vulnerability by adding an optional (enabled by default) force download flag to all non-image file types, preventing the file from being viewed inline in the browser. As a workaround, disable file upload for all non-trusted users. --- Thanks to @Haxatron for reporting this vulnerability. Initially reported via https://huntr.dev/bounties/266bff09-00d9-43ca-a4bb-bb540642811f/"}, {"lang": "es", "value": "Wiki.js es una aplicaci\u00f3n wiki construida sobre Node.js. Wiki.js versiones 2.5.263 y anteriores, son vulnerables a un ataque de tipo cross-site scripting almacenado por medio de una carga de archivos que no son de imagen para los tipos de archivos que pueden ser visualizados directamente en l\u00ednea en el navegador. Al crear un archivo malicioso que puede ejecutar JS en l\u00ednea cuando es visualizado en el navegador (por ejemplo, archivos XML), un usuario malicioso de Wiki.js puede realizar un ataque de tipo cross-site scripting almacenado. Esto permite al atacante ejecutar JavaScript malicioso cuando el archivo es visto directamente por otros usuarios. El archivo debe ser abierto directamente por el usuario y no ser\u00e1 desencadenado directamente en una p\u00e1gina Wiki.js normal. Un parche en la versi\u00f3n 2.5.264 corrige esta vulnerabilidad al a\u00f1adir un flag  de descarga opcional forzado (habilitada por defecto) para todos los tipos de archivos que no sean de imagen, impidiendo que el archivo sea visualizado en l\u00ednea en el navegador. Como soluci\u00f3n, deshabilite la carga de archivos para todos los usuarios que no sean confiables. --- Gracias a @Haxatron por reportar esta vulnerabilidad. Informado inicialmente por medio de https://huntr.dev/bounties/266bff09-00d9-43ca-a4bb-bb540642811f/"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:requarks:wiki.js:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.264", "matchCriteriaId": "1F3F2ADB-A69D-403D-9A61-51A8644F42E0"}]}]}], "references": [{"url": "https://github.com/Requarks/wiki/commit/79bdd4409316adf649806de3e22352297f85cee0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Requarks/wiki/releases/tag/2.5.264", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Requarks/wiki/security/advisories/GHSA-rhpf-929m-7fm2", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Requarks/wiki/commit/79bdd4409316adf649806de3e22352297f85cee0"}}