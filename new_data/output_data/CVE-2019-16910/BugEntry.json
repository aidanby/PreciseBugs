{"buggy_code": ["mbed TLS ChangeLog (Sorted per branch, date)\n\n= mbed TLS x.x.x branch released xxxx-xx-xx\n\nSecurity\n   * Fix a missing error detection in ECJPAKE. This could have caused a\n     predictable shared secret if a hardware accelerator failed and the other\n     side of the key exchange had a similar bug.\n\nBugfix\n   * Fix to allow building test suites with any warning that detects unused\n     functions. Fixes #1628.\n   * Fix typo in net_would_block(). Fixes #528 reported by github-monoculture.\n   * Remove redundant include file in timing.c. Fixes #2640 reported by irwir.\n   * Fix Visual Studio Release x64 build configuration by inheriting\n     PlatformToolset from the project configuration. Fixes #1430 reported by\n     irwir.\n   * Enable Suite B with subset of ECP curves. Make sure the code compiles even\n     if some curves are not defined. Fixes #1591 reported by dbedev.\n   * Fix misuse of signed arithmetic in the HAVEGE module. #2598\n\nChanges\n   * Make `make clean` clean all programs always. Fixes #1862.\n\n= mbed TLS 2.7.11 branch released 2019-06-11\n\nSecurity\n   * Make mbedtls_ecdh_get_params return an error if the second key\n     belongs to a different group from the first. Before, if an application\n     passed keys that belonged to different group, the first key's data was\n     interpreted according to the second group, which could lead to either\n     an error or a meaningless output from mbedtls_ecdh_get_params. In the\n     latter case, this could expose at most 5 bits of the private key.\n\nBugfix\n   * Server's RSA certificate in certs.c was SHA-1 signed. In the default\n     mbedTLS configuration only SHA-2 signed certificates are accepted.\n     This certificate is used in the demo server programs, which lead the\n     client programs to fail at the peer's certificate verification\n     due to an unacceptable hash signature. The certificate has been\n     updated to one that is SHA-256 signed. Fix contributed by\n     Illya Gerasymchuk.\n   * Fix private key DER output in the key_app_writer example. File contents\n     were shifted by one byte, creating an invalid ASN.1 tag. Fixed by\n     Christian Walther in #2239.\n   * Fix potential memory leak in X.509 self test. Found and fixed by\n     Junhwan Park, #2106.\n   * Fix 1-byte buffer overflow in mbedtls_mpi_write_string() when\n     used with negative inputs. Found by Guido Vranken in #2404. Credit to\n     OSS-Fuzz.\n   * Fix bugs in the AEAD test suite which would be exposed by ciphers which\n     either used both encrypt and decrypt key schedules, or which perform padding.\n     GCM and CCM were not affected. Fixed by Jack Lloyd.\n   * Fix incorrect default port number in ssl_mail_client example's usage.\n     Found and fixed by irwir. #2337\n   * Add missing parentheses around parameters in the definition of the\n     public macro MBEDTLS_X509_ID_FLAG. This could lead to invalid evaluation\n     in case operators binding less strongly than subtraction were used\n     for the parameter.\n   * Add a check for MBEDTLS_X509_CRL_PARSE_C in ssl_server2, guarding the crl\n     sni entry parameter. Reported by inestlerode in #560.\n   * Fix missing bounds checks in X.509 parsing functions that could\n     lead to successful parsing of ill-formed X.509 CRTs. Fixes #2437.\n   * Fix multiple X.509 functions previously returning ASN.1 low-level error\n     codes to always wrap these codes into X.509 high level error codes before\n     returning. Fixes #2431.\n\nChanges\n   * Return from various debugging routines immediately if the\n     provided SSL context is unset.\n   * Remove dead code from bignum.c in the default configuration.\n     Found by Coverity, reported and fixed by Peter Kolbus (Garmin). Fixes #2309.\n   * Add test for minimal value of MBEDTLS_MPI_WINDOW_SIZE to all.sh.\n     Contributed by Peter Kolbus (Garmin).\n   * Change wording in the `mbedtls_ssl_conf_max_frag_len()`'s documentation to\n     improve clarity. Fixes #2258.\n   * Improve debug output of ssl_client2 and ssl_server2 in case suitable\n     test CRTs are available because MBEDTLS_PEM_PARSE_C is disabled.\n     Fixes #2254.\n   * Replace multiple uses of MD2 by SHA-256 in X.509 test suite. Fixes #821.\n\n= mbed TLS 2.7.10 branch released 2019-03-19\n\nFeatures\n   * Add MBEDTLS_REMOVE_3DES_CIPHERSUITES to allow removing 3DES ciphersuites\n     from the default list (enabled by default). See\n     https://sweet32.info/SWEET32_CCS16.pdf.\n\nBugfix\n   * Run the AD too long test only if MBEDTLS_CCM_ALT is not defined.\n     Raised as a comment in #1996.\n   * Fix returning the value 1 when mbedtls_ecdsa_genkey failed.\n   * Remove a duplicate #include in a sample program. Fixed by Masashi Honma #2326.\n   * Reduce stack usage of `mpi_write_hlp()` by eliminating recursion.\n     Fixes #2190.\n   * Ensure that unused bits are zero when writing ASN.1 bitstrings when using\n     mbedtls_asn1_write_bitstring().\n   * Fix issue when writing the named bitstrings in KeyUsage and NsCertType\n     extensions in CSRs and CRTs that caused these bitstrings to not be encoded\n     correctly as trailing zeroes were not accounted for as unused bits in the\n     leading content octet. Fixes #1610.\n\nChanges\n   * Include configuration file in all header files that use configuration,\n     instead of relying on other header files that they include.\n     Inserted as an enhancement for #1371\n   * Add support for alternative CSR headers, as used by Microsoft and defined\n     in RFC 7468. Found by Michael Ernst. Fixes #767.\n   * Fix clobber list in MIPS assembly for large integer multiplication.\n     Previously, this could lead to functionally incorrect assembly being\n     produced by some optimizing compilers, showing up as failures in\n     e.g. RSA or ECC signature operations. Reported in #1722, fix suggested\n     by Aurelien Jarno and submitted by Jeffrey Martin.\n   * Reduce the complexity of the timing tests. They were assuming more than the\n     underlying OS actually guarantees.\n   * Ciphersuites based on 3DES now have the lowest priority by default when\n     they are enabled.\n\n= mbed TLS 2.7.9 branch released 2018-12-21\n\nBugfix\n   * Fix for Clang, which was reporting a warning for the bignum.c inline\n     assembly for AMD64 targets creating string literals greater than those\n     permitted by the ISO C99 standard. Found by Aaron Jones. Fixes #482.\n   * Fix runtime error in `mbedtls_platform_entropy_poll()` when run\n     through qemu user emulation. Reported and fix suggested by randombit\n     in #1212. Fixes #1212.\n   * Fix an unsafe bounds check when restoring an SSL session from a ticket.\n     This could lead to a buffer overflow, but only in case ticket authentication\n     was broken. Reported and fix suggested by Guido Vranken in #659.\n   * Add explicit integer to enumeration type casts to example program\n     programs/pkey/gen_key which previously led to compilation failure\n     on some toolchains. Reported by phoenixmcallister. Fixes #2170.\n   * Clarify documentation of mbedtls_ssl_set_own_cert() regarding the absence\n     of check for certificate/key matching. Reported by Attila Molnar, #507.\n\n= mbed TLS 2.7.8 branch released 2018-11-30\n\nSecurity\n   * Fix timing variations and memory access variations in RSA PKCS#1 v1.5\n     decryption that could lead to a Bleichenbacher-style padding oracle\n     attack. In TLS, this affects servers that accept ciphersuites based on\n     RSA decryption (i.e. ciphersuites whose name contains RSA but not\n     (EC)DH(E)). Discovered by Eyal Ronen (Weizmann Institute),  Robert Gillham\n     (University of Adelaide), Daniel Genkin (University of Michigan),\n     Adi Shamir (Weizmann Institute), David Wong (NCC Group), and Yuval Yarom\n     (University of Adelaide, Data61). The attack is described in more detail\n     in the paper available here: http://cat.eyalro.net/cat.pdf  CVE-2018-19608\n   * In mbedtls_mpi_write_binary(), don't leak the exact size of the number\n     via branching and memory access patterns. An attacker who could submit\n     a plaintext for RSA PKCS#1 v1.5 decryption but only observe the timing\n     of the decryption and not its result could nonetheless decrypt RSA\n     plaintexts and forge RSA signatures. Other asymmetric algorithms may\n     have been similarly vulnerable. Reported by Eyal Ronen, Robert Gillham,\n     Daniel Genkin, Adi Shamir, David Wong and Yuval Yarom.\n   * Wipe sensitive buffers on the stack in the CTR_DRBG and HMAC_DRBG\n     modules.\n\nAPI Changes\n   * The new functions mbedtls_ctr_drbg_update_ret() and\n     mbedtls_hmac_drbg_update_ret() are similar to mbedtls_ctr_drbg_update()\n     and mbedtls_hmac_drbg_update() respectively, but the new functions\n     report errors whereas the old functions return void. We recommend that\n     applications use the new functions.\n\n= mbed TLS 2.7.7 branch released 2018-11-19\n\nSecurity\n   * Fix overly strict DN comparison when looking for CRLs belonging to a\n     particular CA. This previously led to ignoring CRLs when the CRL's issuer\n     name and the CA's subject name differed in their string encoding (e.g.,\n     one using PrintableString and the other UTF8String) or in the choice of\n     upper and lower case. Reported by Henrik Andersson of Bosch GmbH in issue\n     #1784.\n   * Fix a flawed bounds check in server PSK hint parsing. In case the\n     incoming message buffer was placed within the first 64KiB of address\n     space and a PSK-(EC)DHE ciphersuite was used, this allowed an attacker\n     to trigger a memory access up to 64KiB beyond the incoming message buffer,\n     potentially leading to application crash or information disclosure.\n   * Fix mbedtls_mpi_is_prime() to use more rounds of probabilistic testing. The\n     previous settings for the number of rounds made it practical for an\n     adversary to construct non-primes that would be erroneously accepted as\n     primes with high probability. This does not have an impact on the\n     security of TLS, but can matter in other contexts with numbers chosen\n     potentially by an adversary that should be prime and can be validated.\n     For example, the number of rounds was enough to securely generate RSA key\n     pairs or Diffie-Hellman parameters, but was insufficient to validate\n     Diffie-Hellman parameters properly.\n     See \"Prime and Prejudice\" by by Martin R. Albrecht and Jake Massimo and\n     Kenneth G. Paterson and Juraj Somorovsky.\n\nBugfix\n   * Fix failure in hmac_drbg in the benchmark sample application, when\n     MBEDTLS_THREADING_C is defined. Found by TrinityTonic, #1095\n   * Fix a bug in the update function for SSL ticket keys which previously\n     invalidated keys of a lifetime of less than a 1s. Fixes #1968.\n   * Fix a bug in the record decryption routine ssl_decrypt_buf()\n     which led to accepting properly authenticated but improperly\n     padded records in case of CBC ciphersuites using Encrypt-then-MAC.\n   * Fix wrong order of freeing in programs/ssl/ssl_server2 example\n     application leading to a memory leak in case both\n     MBEDTLS_MEMORY_BUFFER_ALLOC_C and MBEDTLS_MEMORY_BACKTRACE are set.\n     Fixes #2069.\n   * Fix memory leak and freeing without initialization in the example\n     program programs/x509/cert_write. Fixes #1422.\n   * Ignore IV in mbedtls_cipher_set_iv() when the cipher mode is\n     MBEDTLS_MODE_ECB. Found by ezdevelop. Fixes for #1091.\n   * Zeroize memory used for reassembling handshake messages after use.\n   * Use `mbedtls_zeroize()` instead of `memset()` for zeroization of\n     sensitive data in the example programs aescrypt2 and crypt_and_hash.\n   * Fix compilation failure for configurations which use compile time\n     replacements of standard calloc/free functions through the macros\n     MBEDTLS_PLATFORM_CALLOC_MACRO and MBEDTLS_PLATFORM_FREE_MACRO.\n     Reported by ole-de and ddhome2006. Fixes #882, #1642 and #1706.\n\nChanges\n   * Add tests for session resumption in DTLS.\n   * Close a test gap in (D)TLS between the client side and the server side:\n     test the handling of large packets and small packets on the client side\n     in the same way as on the server side.\n   * Change the dtls_client and dtls_server samples to work by default over\n     IPv6 and optionally by a build option over IPv4.\n   * Change the use of Windows threading to use Microsoft Visual C++ runtime\n     calls, rather than Win32 API calls directly. This is necessary to avoid\n     conflict with C runtime usage. Found and fixed by irwir.\n   * Improve documentation of mbedtls_ssl_get_verify_result().\n     Fixes #517 reported by github-monoculture.\n\n= mbed TLS 2.7.6 branch released 2018-08-31\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate extensions parsing. In case of receiving malformed\n     input (extensions length field equal to 0), an illegal read of one byte\n     beyond the input buffer is made. Found and analyzed by Nathan Crandall.\n\nBugfix\n   * Fix a potential memory leak in mbedtls_ssl_setup() function. An allocation\n     failure in the function could lead to other buffers being leaked.\n   * Fixes a missing test dependency on MBEDTLS_ARC4_C. #1890\n   * Fix a memory leak in ecp_mul_comb() if ecp_precompute_comb() fails.\n     Fix contributed by Espressif Systems.\n   * Add ecc extensions only if an ecc based ciphersuite is used.\n     This improves compliance to RFC 4492, and as a result, solves\n     interoperability issues with BouncyCastle. Raised by milenamil in #1157.\n   * Fix potential use-after-free in mbedtls_ssl_get_max_frag_len()\n     and mbedtls_ssl_get_record_expansion() after a session reset. Fixes #1941.\n   * Fix a miscalculation of the maximum record expansion in\n     mbedtls_ssl_get_record_expansion() in case of CBC ciphersuites\n     in (D)TLS versions 1.1 or higher. Fixes #1914.\n   * Fix a bug that caused SSL/TLS clients to incorrectly abort the handshake\n     with TLS versions 1.1 and earlier when the server requested authentication\n     without providing a list of CAs. This was due to an overly strict bounds\n     check in parsing the CertificateRequest message, introduced in\n     Mbed TLS 2.12.0. Fixes #1954.\n   * Fix undefined shifts with negative values in certificates parsing\n     (found by Catena cyber using oss-fuzz)\n   * Fix memory leak and free without initialization in pk_encrypt\n     and pk_decrypt example programs. Reported by Brace Stout. Fixes #1128.\n\nChanges\n   * Improve compatibility with some alternative CCM implementations by using\n     CCM test vectors from RAM.\n\n= mbed TLS 2.7.5 branch released 2018-07-25\n\nSecurity\n   * Fix a vulnerability in TLS ciphersuites based on CBC and using SHA-384,\n     in (D)TLS 1.0 to 1.2, that allowed an active network attacker to\n     partially recover the plaintext of messages under some conditions by\n     exploiting timing measurements. With DTLS, the attacker could perform\n     this recovery by sending many messages in the same connection. With TLS\n     or if mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only\n     worked if the same secret (for example a HTTP Cookie) has been repeatedly\n     sent over connections manipulated by the attacker. Connections using GCM\n     or CCM instead of CBC, using hash sizes other than SHA-384, or using\n     Encrypt-then-Mac (RFC 7366) were not affected. The vulnerability was\n     caused by a miscalculation (for SHA-384) in a countermeasure to the\n     original Lucky 13 attack. Found by Kenny Paterson, Eyal Ronen and Adi\n     Shamir.\n   * Fix a vulnerability in TLS ciphersuites based on CBC, in (D)TLS 1.0 to\n     1.2, that allowed a local attacker, able to execute code on the local\n     machine as well as manipulate network packets, to partially recover the\n     plaintext of messages under some conditions by using a cache attack\n     targeting an internal MD/SHA buffer. With TLS or if\n     mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only worked if\n     the same secret (for example a HTTP Cookie) has been repeatedly sent over\n     connections manipulated by the attacker. Connections using GCM or CCM\n     instead of CBC or using Encrypt-then-Mac (RFC 7366) were not affected.\n     Found by Kenny Paterson, Eyal Ronen and Adi Shamir.\n   * Add a counter-measure against a vulnerability in TLS ciphersuites based\n     on CBC, in (D)TLS 1.0 to 1.2, that allowed a local attacker, able to\n     execute code on the local machine as well as manipulate network packets,\n     to partially recover the plaintext of messages under some conditions (see\n     previous entry) by using a cache attack targeting the SSL input record\n     buffer. Connections using GCM or CCM instead of CBC or using\n     Encrypt-then-Mac (RFC 7366) were not affected. Found by Kenny Paterson,\n     Eyal Ronen and Adi Shamir.\n\nBugfix\n   * Fix compilation error on C++, because of a variable named new.\n     Found and fixed by Hirotaka Niisato in #1783.\n   * Fix the inline assembly for the MPI multiply helper function for i386 and\n     i386 with SSE2. Found by L\u00e1szl\u00f3 Lang\u00f3. Fixes #1550\n   * Fix a memory leak in mbedtls_x509_csr_parse(), found by catenacyber,\n     Philippe Antoine. Fixes #1623.\n   * Clarify documentation for mbedtls_ssl_write() to include 0 as a valid\n     return value. Found by @davidwu2000. #839\n   * Fix the key_app_writer example which was writing a leading zero byte which\n     was creating an invalid ASN.1 tag. Found by Aryeh R. Fixes #1257.\n   * Remove unused headers included in x509.c. Found by Chris Hanson and fixed\n     by Brendan Shanks. Part of a fix for #992.\n   * Fix compilation error when MBEDTLS_ARC4_C is disabled and\n     MBEDTLS_CIPHER_NULL_CIPHER is enabled. Found by TrinityTonic in #1719.\n   * Added length checks to some TLS parsing functions. Found and fixed by\n     Philippe Antoine from Catena cyber. #1663.\n   * Fix namespacing in header files. Remove the `mbedtls` namespacing in\n     the `#include` in the header files. Resolves #857\n   * Fix compiler warning of 'use before initialisation' in\n     mbedtls_pk_parse_key(). Found by Martin Boye Petersen and fixed by Dawid\n     Drozd. #1098\n   * Fix decryption for zero length messages (which contain all padding) when a\n     CBC based ciphersuite is used together with Encrypt-then-MAC. Previously,\n     such a message was wrongly reported as an invalid record and therefore lead\n     to the connection being terminated. Seen most often with OpenSSL using\n     TLS 1.0. Reported by @kFYatek and by Conor Murphy on the forum. Fix\n     contributed by Espressif Systems. Fixes #1632\n   * Fix ssl_client2 example to send application data with 0-length content\n     when the request_size argument is set to 0 as stated in the documentation.\n     Fixes #1833.\n   * Correct the documentation for `mbedtls_ssl_get_session()`. This API has\n     deep copy of the session, and the peer certificate is not lost. Fixes #926.\n\nChanges\n   * Fail when receiving a TLS alert message with an invalid length, or invalid\n     zero-length messages when using TLS 1.2. Contributed by Espressif Systems.\n   * Change the shebang line in Perl scripts to look up perl in the PATH.\n     Contributed by fbrosson in #1533.\n\n= mbed TLS 2.7.4 branch released 2018-06-18\n\nBugfix\n   * Fix redundant declaration of mbedtls_ssl_list_ciphersuites. Raised by\n     TrinityTonic. #1359.\n   * Fix for redefinition of _WIN32_WINNT to avoid overriding a definition\n     used by user applications. Found and fixed by Fabio Alessandrelli.\n   * Fix braces in mbedtls_memory_buffer_alloc_status(). Found by sbranden, #552.\n   * Fix an issue with MicroBlaze support in bn_mul.h which was causing the\n     build to fail. Found by zv-io. Fixes #1651.\n   * Fix compilation warnings with IAR toolchain, on 32 bit platform.\n     Reported by rahmanih in #683\n\nChanges\n   * Support TLS testing in out-of-source builds using cmake. Fixes #1193.\n   * Changed CMake defaults for IAR to treat all compiler warnings as errors.\n   * Changed the Clang parameters used in the CMake build files to work for\n     versions later than 3.6. Versions of Clang earlier than this may no longer\n     work. Fixes #1072\n\n= mbed TLS 2.7.3 branch released 2018-04-30\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate validation. Additionally, the issue could also lead to\n     unnecessary callback checks being made or to some validation checks to be\n     omitted. The overread could be triggered remotely, while the other issues\n     would require a non DER-compliant certificate to be correctly signed by a\n     trusted CA, or a trusted CA with a non DER-compliant certificate. Found by\n     luocm. Fixes #825.\n   * Fix the buffer length assertion in the ssl_parse_certificate_request()\n     function which led to an arbitrary overread of the message buffer. The\n     overreads could be caused by receiving a malformed message at the point\n     where an optional signature algorithms list is expected when the signature\n     algorithms section is too short. In builds with debug output, the overread\n     data is output with the debug data.\n   * Fix a client-side bug in the validation of the server's ciphersuite choice\n     which could potentially lead to the client accepting a ciphersuite it didn't\n     offer or a ciphersuite that cannot be used with the TLS or DTLS version\n     chosen by the server. This could lead to corruption of internal data\n     structures for some configurations.\n\nBugfix\n   * Fix a spurious uninitialized variable warning in cmac.c. Fix independently\n     contributed by Brian J Murray and David Brown.\n   * Add missing dependencies in test suites that led to build failures\n     in configurations that omit certain hashes or public-key algorithms.\n     Fixes #1040.\n   * Fix C89 incompatibility in benchmark.c. Contributed by Brendan Shanks.\n     #1353\n   * Add missing dependencies for MBEDTLS_HAVE_TIME_DATE and\n     MBEDTLS_VERSION_FEATURES in some test suites. Contributed by\n     Deomid Ryabkov. Fixes #1299, #1475.\n   * Fix the Makefile build process for building shared libraries on Mac OS X.\n     Fixed by mnacamura.\n   * Fix parsing of PKCS#8 encoded Elliptic Curve keys. Previously Mbed TLS was\n     unable to parse keys which had only the optional parameters field of the\n     ECPrivateKey structure. Found by Jethro Beekman, fixed in #1379.\n   * Return the plaintext data more quickly on unpadded CBC decryption, as\n     stated in the mbedtls_cipher_update() documentation. Contributed by\n     Andy Leiserson.\n   * Fix overriding and ignoring return values when parsing and writing to\n     a file in pk_sign program. Found by kevlut in #1142.\n   * Fix buffer length assertions in the ssl_parse_certificate_request()\n     function which leads to a potential one byte overread of the message\n     buffer.\n   * Fix invalid buffer sizes passed to zlib during record compression and\n     decompression.\n\nChanges\n   * Support cmake builds where Mbed TLS is a subproject. Fix contributed\n     independently by Matthieu Volat and Arne Schwabe.\n   * Improve testing in configurations that omit certain hashes or\n     public-key algorithms. Includes contributions by Gert van Dijk.\n   * Improve negative testing of X.509 parsing.\n   * Do not define global mutexes around readdir() and gmtime() in\n     configurations where the feature is disabled. Found and fixed by Gergely\n     Budai.\n   * Provide an empty implementation of mbedtls_pkcs5_pbes2() when\n     MBEDTLS_ASN1_PARSE_C is not enabled. This allows the use of PBKDF2\n     without PBES2. Fixed by Marcos Del Sol Vives.\n   * Improve the documentation of mbedtls_net_accept(). Contributed by Ivan\n     Krylov.\n   * Improve the documentation of mbedtls_ssl_write(). Suggested by\n     Paul Sokolovsky in #1356.\n   * Add an option in the Makefile to support ar utilities where the operation\n     letter must not be prefixed by '-', such as LLVM. Found and fixed by\n     Alex Hixon.\n   * Allow configuring the shared library extension by setting the DLEXT\n     environment variable when using the project makefiles.\n   * In the SSL module, when f_send, f_recv or f_recv_timeout report\n     transmitting more than the required length, return an error. Raised by\n     Sam O'Connor in #1245.\n   * Improve robustness of mbedtls_ssl_derive_keys against the use of\n     HMAC functions with non-HMAC ciphersuites. Independently contributed\n     by Jiayuan Chen in #1377. Fixes #1437.\n\n= mbed TLS 2.7.2 branch released 2018-03-16\n\nSecurity\n   * Verify results of RSA private key operations to defend\n     against Bellcore glitch attack.\n   * Fix a buffer overread in ssl_parse_server_key_exchange() that could cause\n     a crash on invalid input.\n   * Fix a buffer overread in ssl_parse_server_psk_hint() that could cause a\n     crash on invalid input.\n   * Fix CRL parsing to reject CRLs containing unsupported critical\n     extensions. Found by Falko Strenzke and Evangelos Karatsiolis.\n\nFeatures\n   * Extend PKCS#8 interface by introducing support for the entire SHA\n     algorithms family when encrypting private keys using PKCS#5 v2.0.\n     This allows reading encrypted PEM files produced by software that\n     uses PBKDF2-SHA2, such as OpenSSL 1.1. Submitted by Antonio Quartulli,\n     OpenVPN Inc. Fixes #1339\n\nBugfix\n   * Fix setting version TLSv1 as minimal version, even if TLS 1\n     is not enabled. Set MBEDTLS_SSL_MIN_MAJOR_VERSION\n     and MBEDTLS_SSL_MIN_MINOR_VERSION instead of\n     MBEDTLS_SSL_MAJOR_VERSION_3 and MBEDTLS_SSL_MINOR_VERSION_1. #664\n   * Fix compilation error on Mingw32 when _TRUNCATE is defined. Use _TRUNCATE\n     only if __MINGW32__ not defined. Fix suggested by Thomas Glanzmann and\n     Nick Wilson on issue #355\n   * In test_suite_pk, pass valid parameters when testing for hash length\n     overflow. #1179\n   * Fix memory allocation corner cases in memory_buffer_alloc.c module. Found\n     by Guido Vranken. #639\n   * Log correct number of ciphersuites used in Client Hello message. #918\n   * Fix X509 CRT parsing that would potentially accept an invalid tag when\n     parsing the subject alternative names.\n   * Fix a possible arithmetic overflow in ssl_parse_server_key_exchange()\n     that could cause a key exchange to fail on valid data.\n   * Fix a possible arithmetic overflow in ssl_parse_server_psk_hint() that\n     could cause a key exchange to fail on valid data.\n   * Don't define mbedtls_aes_decrypt and mbedtls_aes_encrypt under\n     MBEDTLS_DEPRECATED_REMOVED. #1388\n   * Fix a 1-byte heap buffer overflow (read-only) during private key parsing.\n     Found through fuzz testing.\n\nChanges\n   * Clarify the documentation of mbedtls_ssl_setup.\n\n= mbed TLS 2.7.1 branch released 2018-02-23\n\nDefault behavior changes\n   * The truncated HMAC extension now conforms to RFC 6066. This means\n     that when both sides of a TLS connection negotiate the truncated\n     HMAC extension, Mbed TLS can now interoperate with other\n     compliant implementations, but this breaks interoperability with\n     prior versions of Mbed TLS. To restore the old behavior, enable\n     the (deprecated) option MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT in\n     config.h. Found by Andreas Walz (ivESK, Offenburg University of\n     Applied Sciences).\n\nSecurity\n   * Fix implementation of the truncated HMAC extension. The previous\n     implementation allowed an offline 2^80 brute force attack on the\n     HMAC key of a single, uninterrupted connection (with no\n     resumption of the session).\n\nBugfix\n   * Fix the name of a DHE parameter that was accidentally changed in 2.7.0.\n     Fixes #1358.\n   * Fix test_suite_pk to work on 64-bit ILP32 systems. #849\n   * Fix mbedtls_x509_crt_profile_suiteb, which used to reject all certificates\n     with flag MBEDTLS_X509_BADCERT_BAD_PK even when the key type was correct.\n     In the context of SSL, this resulted in handshake failure. Reported by\n     daniel in the Mbed TLS forum. #1351\n   * Fix Windows x64 builds with the included mbedTLS.sln file. #1347\n\nChanges\n   * Fix tag lengths and value ranges in the documentation of CCM encryption.\n     Contributed by Mathieu Briand.\n   * Fix typo in a comment ctr_drbg.c. Contributed by Paul Sokolovsky.\n   * MD functions deprecated in 2.7.0 are no longer inline, to provide\n     a migration path for those depending on the library's ABI.\n\n= mbed TLS 2.7.0 branch released 2018-02-03\n\nSecurity\n   * Fix a heap corruption issue in the implementation of the truncated HMAC\n     extension. When the truncated HMAC extension is enabled and CBC is used,\n     sending a malicious application packet could be used to selectively corrupt\n     6 bytes on the peer's heap, which could potentially lead to crash or remote\n     code execution. The issue could be triggered remotely from either side in\n     both TLS and DTLS. CVE-2018-0488\n   * Fix a buffer overflow in RSA-PSS verification when the hash was too large\n     for the key size, which could potentially lead to crash or remote code\n     execution. Found by Seth Terashima, Qualcomm Product Security Initiative,\n     Qualcomm Technologies Inc. CVE-2018-0487\n   * Fix buffer overflow in RSA-PSS verification when the unmasked data is all\n     zeros.\n   * Fix an unsafe bounds check in ssl_parse_client_psk_identity() when adding\n     64 KiB to the address of the SSL buffer and causing a wrap around.\n   * Fix a potential heap buffer overflow in mbedtls_ssl_write(). When the (by\n     default enabled) maximum fragment length extension is disabled in the\n     config and the application data buffer passed to mbedtls_ssl_write\n     is larger than the internal message buffer (16384 bytes by default), the\n     latter overflows. The exploitability of this issue depends on whether the\n     application layer can be forced into sending such large packets. The issue\n     was independently reported by Tim Nordell via e-mail and by Florin Petriuc\n     and sjorsdewit on GitHub. Fix proposed by Florin Petriuc in #1022.\n     Fixes #707.\n   * Add a provision to prevent compiler optimizations breaking the time\n     constancy of mbedtls_ssl_safer_memcmp().\n   * Ensure that buffers are cleared after use if they contain sensitive data.\n     Changes were introduced in multiple places in the library.\n   * Set PEM buffer to zero before freeing it, to avoid decoded private keys\n     being leaked to memory after release.\n   * Fix dhm_check_range() failing to detect trivial subgroups and potentially\n     leaking 1 bit of the private key. Reported by prashantkspatil.\n   * Make mbedtls_mpi_read_binary() constant-time with respect to the input\n     data. Previously, trailing zero bytes were detected and omitted for the\n     sake of saving memory, but potentially leading to slight timing\n     differences. Reported by Marco Macchetti, Kudelski Group.\n   * Wipe stack buffer temporarily holding EC private exponent\n     after keypair generation.\n   * Fix a potential heap buffer over-read in ALPN extension parsing\n     (server-side). Could result in application crash, but only if an ALPN\n     name larger than 16 bytes had been configured on the server.\n   * Change default choice of DHE parameters from untrustworthy RFC 5114\n     to RFC 3526 containing parameters generated in a nothing-up-my-sleeve\n     manner.\n\nFeatures\n   * Allow comments in test data files.\n   * The selftest program can execute a subset of the tests based on command\n     line arguments.\n   * New unit tests for timing. Improve the self-test to be more robust\n     when run on a heavily-loaded machine.\n   * Add alternative implementation support for CCM and CMAC (MBEDTLS_CCM_ALT,\n     MBEDTLS_CMAC_ALT). Submitted by Steven Cooreman, Silicon Labs.\n   * Add support for alternative implementations of GCM, selected by the\n     configuration flag MBEDTLS_GCM_ALT.\n   * Add support for alternative implementations for ECDSA, controlled by new\n     configuration flags MBEDTLS_ECDSA_SIGN_ALT, MBEDTLS_ECDSA_VERIFY_ALT and\n     MBEDTLS_ECDSDA_GENKEY_AT in config.h.\n     The following functions from the ECDSA module can be replaced\n     with alternative implementation:\n     mbedtls_ecdsa_sign(), mbedtls_ecdsa_verify() and mbedtls_ecdsa_genkey().\n   * Add support for alternative implementation of ECDH, controlled by the\n     new configuration flags MBEDTLS_ECDH_COMPUTE_SHARED_ALT and\n     MBEDTLS_ECDH_GEN_PUBLIC_ALT in config.h.\n     The following functions from the ECDH module can be replaced\n     with an alternative implementation:\n     mbedtls_ecdh_gen_public() and mbedtls_ecdh_compute_shared().\n   * Add support for alternative implementation of ECJPAKE, controlled by\n     the new configuration flag MBEDTLS_ECJPAKE_ALT.\n   * Add mechanism to provide alternative implementation of the DHM module.\n\nAPI Changes\n   * Extend RSA interface by multiple functions allowing structure-\n     independent setup and export of RSA contexts. Most notably,\n     mbedtls_rsa_import() and mbedtls_rsa_complete() are introduced for setting\n     up RSA contexts from partial key material and having them completed to the\n     needs of the implementation automatically. This allows to setup private RSA\n     contexts from keys consisting of N,D,E only, even if P,Q are needed for the\n     purpose or CRT and/or blinding.\n   * The configuration option MBEDTLS_RSA_ALT can be used to define alternative\n     implementations of the RSA interface declared in rsa.h.\n   * The following functions in the message digest modules (MD2, MD4, MD5,\n     SHA1, SHA256, SHA512) have been deprecated and replaced as shown below.\n     The new functions change the return type from void to int to allow\n     returning error codes when using MBEDTLS_<MODULE>_ALT.\n     mbedtls_<MODULE>_starts() -> mbedtls_<MODULE>_starts_ret()\n     mbedtls_<MODULE>_update() -> mbedtls_<MODULE>_update_ret()\n     mbedtls_<MODULE>_finish() -> mbedtls_<MODULE>_finish_ret()\n     mbedtls_<MODULE>_process() -> mbedtls_internal_<MODULE>_process()\n\nNew deprecations\n   * Deprecate usage of RSA primitives with non-matching key-type\n     (e.g. signing with a public key).\n   * Direct manipulation of structure fields of RSA contexts is deprecated.\n     Users are advised to use the extended RSA API instead.\n   * Deprecate usage of message digest functions that return void\n     (mbedtls_<MODULE>_starts, mbedtls_<MODULE>_update,\n     mbedtls_<MODULE>_finish and mbedtls_<MODULE>_process where <MODULE> is\n     any of MD2, MD4, MD5, SHA1, SHA256, SHA512) in favor of functions\n     that can return an error code.\n   * Deprecate untrustworthy DHE parameters from RFC 5114. Superseded by\n     parameters from RFC 3526 or the newly added parameters from RFC 7919.\n   * Deprecate hex string DHE constants MBEDTLS_DHM_RFC3526_MODP_2048_P etc.\n     Supserseded by binary encoded constants MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN\n     etc.\n   * Deprecate mbedtls_ssl_conf_dh_param() for setting default DHE parameters\n     from hex strings. Superseded by mbedtls_ssl_conf_dh_param_bin()\n     accepting DHM parameters in binary form, matching the new constants.\n\nBugfix\n   * Fix ssl_parse_record_header() to silently discard invalid DTLS records\n     as recommended in RFC 6347 Section 4.1.2.7.\n   * Fix memory leak in mbedtls_ssl_set_hostname() when called multiple times.\n     Found by projectgus and jethrogb, #836.\n   * Fix usage help in ssl_server2 example. Found and fixed by Bei Lin.\n   * Parse signature algorithm extension when renegotiating. Previously,\n     renegotiated handshakes would only accept signatures using SHA-1\n     regardless of the peer's preferences, or fail if SHA-1 was disabled.\n   * Fix leap year calculation in x509_date_is_valid() to ensure that invalid\n     dates on leap years with 100 and 400 intervals are handled correctly. Found\n     by Nicholas Wilson. #694\n   * Fix some invalid RSA-PSS signatures with keys of size 8N+1 that were\n     accepted. Generating these signatures required the private key.\n   * Fix out-of-memory problem when parsing 4096-bit PKCS8-encrypted RSA keys.\n     Found independently by Florian in the mbed TLS forum and by Mishamax.\n     #878, #1019.\n   * Fix variable used before assignment compilation warnings with IAR\n     toolchain. Found by gkerrien38.\n   * Fix unchecked return codes from AES, DES and 3DES functions in\n     pem_aes_decrypt(), pem_des_decrypt() and pem_des3_decrypt() respectively.\n     If a call to one of the functions of the cryptographic primitive modules\n     failed, the error may not be noticed by the function\n     mbedtls_pem_read_buffer() causing it to return invalid values. Found by\n     Guido Vranken. #756\n   * Include configuration file in md.h, to fix compilation warnings.\n     Reported by aaronmdjones in #1001\n   * Correct extraction of signature-type from PK instance in X.509 CRT and CSR\n     writing routines that prevented these functions to work with alternative\n     RSA implementations. Raised by J.B. in the Mbed TLS forum. Fixes #1011.\n   * Don't print X.509 version tag for v1 CRT's, and omit extensions for\n     non-v3 CRT's.\n   * Fix bugs in RSA test suite under MBEDTLS_NO_PLATFORM_ENTROPY. #1023 #1024\n   * Fix net_would_block() to avoid modification by errno through fcntl() call.\n     Found by nkolban. Fixes #845.\n   * Fix handling of handshake messages in mbedtls_ssl_read() in case\n     MBEDTLS_SSL_RENEGOTIATION is disabled. Found by erja-gp.\n   * Add a check for invalid private parameters in mbedtls_ecdsa_sign().\n     Reported by Yolan Romailler.\n   * Fix word size check in in pk.c to not depend on MBEDTLS_HAVE_INT64.\n   * Fix incorrect unit in benchmark output. #850\n   * Add size-checks for record and handshake message content, securing\n     fragile yet non-exploitable code-paths.\n   * Fix crash when calling mbedtls_ssl_cache_free() twice. Found by\n     MilenkoMitrovic, #1104\n   * Fix mbedtls_timing_alarm(0) on Unix and MinGW.\n   * Fix use of uninitialized memory in mbedtls_timing_get_timer() when reset=1.\n   * Fix possible memory leaks in mbedtls_gcm_self_test().\n   * Added missing return code checks in mbedtls_aes_self_test().\n   * Fix issues in RSA key generation program programs/x509/rsa_genkey and the\n     RSA test suite where the failure of CTR DRBG initialization lead to\n     freeing an RSA context and several MPI's without proper initialization\n     beforehand.\n   * Fix error message in programs/pkey/gen_key.c. Found and fixed by Chris Xue.\n   * Fix programs/pkey/dh_server.c so that it actually works with dh_client.c.\n     Found and fixed by Martijn de Milliano.\n   * Fix an issue in the cipher decryption with the mode\n     MBEDTLS_PADDING_ONE_AND_ZEROS that sometimes accepted invalid padding.\n     Note, this padding mode is not used by the TLS protocol. Found and fixed by\n     Micha Kraus.\n   * Fix the entropy.c module to not call mbedtls_sha256_starts() or\n     mbedtls_sha512_starts() in the mbedtls_entropy_init() function.\n   * Fix the entropy.c module to ensure that mbedtls_sha256_init() or\n     mbedtls_sha512_init() is called before operating on the relevant context\n     structure. Do not assume that zeroizing a context is a correct way to\n     reset it. Found independently by ccli8 on Github.\n   * In mbedtls_entropy_free(), properly free the message digest context.\n   * Fix status handshake status message in programs/ssl/dtls_client.c. Found\n     and fixed by muddog.\n\nChanges\n   * Extend cert_write example program by options to set the certificate version\n     and the message digest. Further, allow enabling/disabling of authority\n     identifier, subject identifier and basic constraints extensions.\n   * Only check for necessary RSA structure fields in `mbedtls_rsa_private`. In\n     particular, don't require P,Q if neither CRT nor blinding are\n     used. Reported and fix proposed independently by satur9nine and sliai\n     on GitHub.\n   * Only run AES-192 self-test if AES-192 is available. Fixes #963.\n   * Tighten the RSA PKCS#1 v1.5 signature verification code and remove the\n     undeclared dependency of the RSA module on the ASN.1 module.\n   * Update all internal usage of deprecated message digest functions to the\n     new ones with return codes. In particular, this modifies the\n     mbedtls_md_info_t structure. Propagate errors from these functions\n     everywhere except some locations in the ssl_tls.c module.\n   * Improve CTR_DRBG error handling by propagating underlying AES errors.\n   * Add MBEDTLS_ERR_XXX_HW_ACCEL_FAILED error codes for all cryptography\n     modules where the software implementation can be replaced by a hardware\n     implementation.\n   * Add explicit warnings for the use of MD2, MD4, MD5, SHA-1, DES and ARC4\n     throughout the library.\n\n= mbed TLS 2.6.0 branch released 2017-08-10\n\nSecurity\n   * Fix authentication bypass in SSL/TLS: when authmode is set to optional,\n     mbedtls_ssl_get_verify_result() would incorrectly return 0 when the peer's\n     X.509 certificate chain had more than MBEDTLS_X509_MAX_INTERMEDIATE_CA\n     (default: 8) intermediates, even when it was not trusted. This could be\n     triggered remotely from either side. (With authmode set to 'required'\n     (the default), the handshake was correctly aborted).\n   * Reliably wipe sensitive data after use in the AES example applications\n     programs/aes/aescrypt2 and programs/aes/crypt_and_hash.\n     Found by Laurent Simon.\n\nFeatures\n   * Add the functions mbedtls_platform_setup() and mbedtls_platform_teardown()\n     and the context struct mbedtls_platform_context to perform\n     platform-specific setup and teardown operations. The macro\n     MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT allows the functions to be overridden\n     by the user in a platform_alt.h file. These new functions are required in\n     some embedded environments to provide a means of initialising underlying\n     cryptographic acceleration hardware.\n\nAPI Changes\n   * Reverted API/ABI breaking changes introduced in mbed TLS 2.5.1, to make the\n     API consistent with mbed TLS 2.5.0. Specifically removed the inline\n     qualifier from the functions mbedtls_aes_decrypt, mbedtls_aes_encrypt,\n     mbedtls_ssl_ciphersuite_uses_ec and mbedtls_ssl_ciphersuite_uses_psk. Found\n     by James Cowgill. #978\n   * Certificate verification functions now set flags to -1 in case the full\n     chain was not verified due to an internal error (including in the verify\n     callback) or chain length limitations.\n   * With authmode set to optional, the TLS handshake is now aborted if the\n     verification of the peer's certificate failed due to an overlong chain or\n     a fatal error in the verify callback.\n\nBugfix\n   * Add a check if iv_len is zero in GCM, and return an error if it is zero.\n     Reported by roberto. #716\n   * Replace preprocessor condition from #if defined(MBEDTLS_THREADING_PTHREAD)\n     to #if defined(MBEDTLS_THREADING_C) as the library cannot assume they will\n     always be implemented by pthread support. #696\n   * Fix a resource leak on Windows platforms in mbedtls_x509_crt_parse_path(),\n     in the case of an error. Found by redplait. #590\n   * Add MBEDTLS_MPI_CHK to check for error value of mbedtls_mpi_fill_random.\n     Reported and fix suggested by guidovranken. #740\n   * Fix conditional preprocessor directives in bignum.h to enable 64-bit\n     compilation when using ARM Compiler 6.\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 CRLs. The overflow could enable maliciously constructed CRLs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix potential integer overflow in the version verification for DER\n     encoded X.509 CSRs. The overflow could enable maliciously constructed CSRs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 certificates. The overflow could enable maliciously\n     constructed certificates to bypass the certificate verification check.\n   * Fix a call to the libc function time() to call the platform abstraction\n     function mbedtls_time() instead. Found by wairua. #666\n   * Avoid shadowing of time and index functions through mbed TLS function\n     arguments. Found by inestlerode. #557.\n\nChanges\n   * Added config.h option MBEDTLS_NO_UDBL_DIVISION, to prevent the use of\n     64-bit division. This is useful on embedded platforms where 64-bit division\n     created a dependency on external libraries. #708\n   * Removed mutexes from ECP hardware accelerator code. Now all hardware\n     accelerator code in the library leaves concurrency handling to the\n     platform. Reported by Steven Cooreman. #863\n   * Define the macro MBEDTLS_AES_ROM_TABLES in the configuration file\n     config-no-entropy.h to reduce the RAM footprint.\n   * Added a test script that can be hooked into git that verifies commits\n     before they are pushed.\n   * Improve documentation of PKCS1 decryption functions.\n\n= mbed TLS 2.5.1 released 2017-06-21\n\nSecurity\n   * Fixed unlimited overread of heap-based buffer in mbedtls_ssl_read().\n     The issue could only happen client-side with renegotiation enabled.\n     Could result in DoS (application crash) or information leak\n     (if the application layer sent data read from mbedtls_ssl_read()\n     back to the server or to a third party). Can be triggered remotely.\n   * Removed SHA-1 and RIPEMD-160 from the default hash algorithms for\n     certificate verification. SHA-1 can be turned back on with a compile-time\n     option if needed.\n   * Fixed offset in FALLBACK_SCSV parsing that caused TLS server to fail to\n     detect it sometimes. Reported by Hugo Leisink. #810\n   * Tighten parsing of RSA PKCS#1 v1.5 signatures, to avoid a\n     potential Bleichenbacher/BERserk-style attack.\n\nBugfix\n   * Remove size zero arrays from ECJPAKE test suite. Size zero arrays are not\n     valid C and they prevented the test from compiling in Visual Studio 2015\n     and with GCC using the -Wpedantic compilation option.\n   * Fix insufficient support for signature-hash-algorithm extension,\n     resulting in compatibility problems with Chrome. Found by hfloyrd. #823\n   * Fix behaviour that hid the original cause of fatal alerts in some cases\n     when sending the alert failed. The fix makes sure not to hide the error\n     that triggered the alert.\n   * Fix SSLv3 renegotiation behaviour and stop processing data received from\n     peer after sending a fatal alert to refuse a renegotiation attempt.\n     Previous behaviour was to keep processing data even after the alert has\n     been sent.\n   * Accept empty trusted CA chain in authentication mode\n     MBEDTLS_SSL_VERIFY_OPTIONAL.\n     Found by jethrogb. #864\n   * Fix implementation of mbedtls_ssl_parse_certificate() to not annihilate\n     fatal errors in authentication mode MBEDTLS_SSL_VERIFY_OPTIONAL and to\n     reflect bad EC curves within verification result.\n   * Fix bug that caused the modular inversion function to accept the invalid\n     modulus 1 and therefore to hang. Found by blaufish. #641.\n   * Fix incorrect sign computation in modular exponentiation when the base is\n     a negative MPI. Previously the result was always negative. Found by Guido\n     Vranken.\n   * Fix a numerical underflow leading to stack overflow in mpi_read_file()\n     that was triggered uppon reading an empty line. Found by Guido Vranken.\n\nChanges\n   * Send fatal alerts in more cases. The previous behaviour was to skip\n     sending the fatal alert and just drop the connection.\n   * Clarify ECDSA documentation and improve the sample code to avoid\n     misunderstanding and potentially dangerous use of the API. Pointed out\n     by Jean-Philippe Aumasson.\n\n= mbed TLS 2.5.0 branch released 2017-05-17\n\nSecurity\n   * Wipe stack buffers in RSA private key operations\n     (rsa_rsaes_pkcs1_v15_decrypt(), rsa_rsaes_oaep_decrypt). Found by Laurent\n     Simon.\n   * Add exponent blinding to RSA private operations as a countermeasure\n     against side-channel attacks like the cache attack described in\n     https://arxiv.org/abs/1702.08719v2.\n     Found and fix proposed by Michael Schwarz, Samuel Weiser, Daniel Gruss,\n     Cl\u00e9mentine Maurice and Stefan Mangard.\n\nFeatures\n   * Add hardware acceleration support for the Elliptic Curve Point module.\n     This involved exposing parts of the internal interface to enable\n     replacing the core functions and adding and alternative, module level\n     replacement support for enabling the extension of the interface.\n   * Add a new configuration option to 'mbedtls_ssl_config' to enable\n     suppressing the CA list in Certificate Request messages. The default\n     behaviour has not changed, namely every configured CAs name is included.\n\nAPI Changes\n   * The following functions in the AES module have been deprecated and replaced\n     by the functions shown below. The new functions change the return type from\n     void to int to allow returning error codes when using MBEDTLS_AES_ALT,\n     MBEDTLS_AES_DECRYPT_ALT or MBEDTLS_AES_ENCRYPT_ALT.\n     mbedtls_aes_decrypt() -> mbedtls_internal_aes_decrypt()\n     mbedtls_aes_encrypt() -> mbedtls_internal_aes_encrypt()\n\nBugfix\n   * Remove macros from compat-1.3.h that correspond to deleted items from most\n     recent versions of the library. Found by Kyle Keen.\n   * Fixed issue in the Threading module that prevented mutexes from\n     initialising. Found by sznaider. #667 #843\n   * Add checks in the PK module for the RSA functions on 64-bit systems.\n     The PK and RSA modules use different types for passing hash length and\n     without these checks the type cast could lead to data loss. Found by Guido\n     Vranken.\n\n= mbed TLS 2.4.2 branch released 2017-03-08\n\nSecurity\n   * Add checks to prevent signature forgeries for very large messages while\n     using RSA through the PK module in 64-bit systems. The issue was caused by\n     some data loss when casting a size_t to an unsigned int value in the\n     functions rsa_verify_wrap(), rsa_sign_wrap(), rsa_alt_sign_wrap() and\n     mbedtls_pk_sign(). Found by Jean-Philippe Aumasson.\n   * Fixed potential livelock during the parsing of a CRL in PEM format in\n     mbedtls_x509_crl_parse(). A string containing a CRL followed by trailing\n     characters after the footer could result in the execution of an infinite\n     loop. The issue can be triggered remotely. Found by Greg Zaverucha,\n     Microsoft.\n   * Removed MD5 from the allowed hash algorithms for CertificateRequest and\n     CertificateVerify messages, to prevent SLOTH attacks against TLS 1.2.\n     Introduced by interoperability fix for #513.\n   * Fixed a bug that caused freeing a buffer that was allocated on the stack,\n     when verifying the validity of a key on secp224k1. This could be\n     triggered remotely for example with a maliciously constructed certificate\n     and potentially could lead to remote code execution on some platforms.\n     Reported independently by rongsaws and Aleksandar Nikolic, Cisco Talos\n     team. #569 CVE-2017-2784\n\nBugfix\n   * Fix output certificate verification flags set by x509_crt_verify_top() when\n     traversing a chain of trusted CA. The issue would cause both flags,\n     MBEDTLS_X509_BADCERT_NOT_TRUSTED and MBEDTLS_X509_BADCERT_EXPIRED, to be\n     set when the verification conditions are not met regardless of the cause.\n     Found by Harm Verhagen and inestlerode. #665 #561\n   * Fix the redefinition of macro ssl_set_bio to an undefined symbol\n     mbedtls_ssl_set_bio_timeout in compat-1.3.h, by removing it.\n     Found by omlib-lin. #673\n   * Fix unused variable/function compilation warnings in pem.c, x509_crt.c and\n     x509_csr.c that are reported when building mbed TLS with a config.h that\n     does not define MBEDTLS_PEM_PARSE_C. Found by omnium21. #562\n   * Fix incorrect renegotiation condition in ssl_check_ctr_renegotiate() that\n     would compare 64 bits of the record counter instead of 48 bits as indicated\n     in RFC 6347 Section 4.3.1. This could cause the execution of the\n     renegotiation routines at unexpected times when the protocol is DTLS. Found\n     by wariua. #687\n   * Fixed multiple buffer overreads in mbedtls_pem_read_buffer() when parsing\n     the input string in PEM format to extract the different components. Found\n     by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_ctr_drbg_reseed() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflows in mbedtls_cipher_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_md2_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_base64_decode() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed heap overreads in mbedtls_x509_get_time(). Found by Peng\n     Li/Yueh-Hsun Lin, KNOX Security, Samsung Research America.\n   * Fix potential memory leak in mbedtls_x509_crl_parse(). The leak was caused\n     by missing calls to mbedtls_pem_free() in cases when a\n     MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT error was encountered. Found and\n     fix proposed by Guido Vranken. #722\n   * Fixed the templates used to generate project and solution files for Visual\n     Studio 2015 as well as the files themselves, to remove a build warning\n     generated in Visual Studio 2015. Reported by Steve Valliere. #742\n   * Fix a resource leak in ssl_cookie, when using MBEDTLS_THREADING_C.\n     Raised and fix suggested by Alan Gillingham in the mbed TLS forum. #771\n   * Fix 1 byte buffer overflow in mbedtls_mpi_write_string() when the MPI\n     number to write in hexadecimal is negative and requires an odd number of\n     digits. Found and fixed by Guido Vranken.\n   * Fix unlisted DES configuration dependency in some pkparse test cases. Found\n     by inestlerode. #555\n\n= mbed TLS 2.4.1 branch released 2016-12-13\n\nChanges\n   * Update to CMAC test data, taken from - NIST Special Publication 800-38B -\n     Recommendation for Block Cipher Modes of Operation: The CMAC Mode for\n     Authentication \u2013 October  2016\n\n= mbed TLS 2.4.0 branch released 2016-10-17\n\nSecurity\n   * Removed the MBEDTLS_SSL_AEAD_RANDOM_IV option, because it was not compliant\n     with RFC-5116 and could lead to session key recovery in very long TLS\n     sessions. \"Nonce-Disrespecting Adversaries Practical Forgery Attacks on GCM in\n     TLS\" - H. Bock, A. Zauner, S. Devlin, J. Somorovsky, P. Jovanovic.\n     https://eprint.iacr.org/2016/475.pdf\n   * Fixed potential stack corruption in mbedtls_x509write_crt_der() and\n     mbedtls_x509write_csr_der() when the signature is copied to the buffer\n     without checking whether there is enough space in the destination. The\n     issue cannot be triggered remotely. Found by Jethro Beekman.\n\nFeatures\n   * Added support for CMAC for AES and 3DES and AES-CMAC-PRF-128, as defined by\n     NIST SP 800-38B, RFC-4493 and RFC-4615.\n   * Added hardware entropy selftest to verify that the hardware entropy source\n     is functioning correctly.\n   * Added a script to print build environment info for diagnostic use in test\n     scripts, which is also now called by all.sh.\n   * Added the macro MBEDTLS_X509_MAX_FILE_PATH_LEN that enables the user to\n     configure the maximum length of a file path that can be buffered when\n     calling mbedtls_x509_crt_parse_path().\n   * Added a configuration file config-no-entropy.h that configures the subset of\n     library features that do not require an entropy source.\n   * Added the macro MBEDTLS_ENTROPY_MIN_HARDWARE in config.h. This allows users\n     to configure the minimum number of bytes for entropy sources using the\n     mbedtls_hardware_poll() function.\n\nBugfix\n   * Fix for platform time abstraction to avoid dependency issues where a build\n     may need time but not the standard C library abstraction, and added\n     configuration consistency checks to check_config.h\n   * Fix dependency issue in Makefile to allow parallel builds.\n   * Fix incorrect handling of block lengths in crypt_and_hash.c sample program,\n     when GCM is used. Found by udf2457. #441\n   * Fix for key exchanges based on ECDH-RSA or ECDH-ECDSA which weren't\n     enabled unless others were also present. Found by David Fernandez. #428\n   * Fix for out-of-tree builds using CMake. Found by jwurzer, and fix based on\n     a contribution from Tobias Tangemann. #541\n   * Fixed cert_app.c sample program for debug output and for use when no root\n     certificates are provided.\n   * Fix conditional statement that would cause a 1 byte overread in\n     mbedtls_asn1_get_int(). Found and fixed by Guido Vranken. #599\n   * Fixed pthread implementation to avoid unintended double initialisations\n     and double frees. Found by Niklas Amnebratt.\n   * Fixed the sample applications gen_key.c, cert_req.c and cert_write.c for\n     builds where the configuration MBEDTLS_PEM_WRITE_C is not defined. Found\n     by inestlerode. #559.\n   * Fix mbedtls_x509_get_sig() to update the ASN1 type in the mbedtls_x509_buf\n     data structure until after error checks are successful. Found by\n     subramanyam-c. #622\n   * Fix documentation and implementation missmatch for function arguments of\n     mbedtls_gcm_finish(). Found by cmiatpaar. #602\n   * Guarantee that P>Q at RSA key generation. Found by inestlerode. #558\n   * Fix potential byte overread when verifying malformed SERVER_HELLO in\n     ssl_parse_hello_verify_request() for DTLS. Found by Guido Vranken.\n   * Fix check for validity of date when parsing in mbedtls_x509_get_time().\n     Found by subramanyam-c. #626\n   * Fix compatibility issue with Internet Explorer client authentication,\n     where the limited hash choices prevented the client from sending its\n     certificate. Found by teumas. #513\n   * Fix compilation without MBEDTLS_SELF_TEST enabled.\n\nChanges\n   * Extended test coverage of special cases, and added new timing test suite.\n   * Removed self-tests from the basic-built-test.sh script, and added all\n     missing self-tests to the test suites, to ensure self-tests are only\n     executed once.\n   * Added support for 3 and 4 byte lengths to mbedtls_asn1_write_len().\n   * Added support for a Yotta specific configuration file -\n     through the symbol YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE.\n   * Added optimization for code space for X.509/OID based on configured\n     features. Contributed by Aviv Palivoda.\n   * Renamed source file library/net.c to library/net_sockets.c to avoid\n     naming collision in projects which also have files with the common name\n     net.c. For consistency, the corresponding header file, net.h, is marked as\n     deprecated, and its contents moved to net_sockets.h.\n   * Changed the strategy for X.509 certificate parsing and validation, to no\n     longer disregard certificates with unrecognised fields.\n\n= mbed TLS 2.3.0 branch released 2016-06-28\n\nSecurity\n   * Fix missing padding length check in mbedtls_rsa_rsaes_pkcs1_v15_decrypt\n     required by PKCS1 v2.2\n   * Fix potential integer overflow to buffer overflow in\n     mbedtls_rsa_rsaes_pkcs1_v15_encrypt and mbedtls_rsa_rsaes_oaep_encrypt\n     (not triggerable remotely in (D)TLS).\n   * Fix a potential integer underflow to buffer overread in\n     mbedtls_rsa_rsaes_oaep_decrypt. It is not triggerable remotely in\n     SSL/TLS.\n\nFeatures\n   * Support for platform abstraction of the standard C library time()\n     function.\n\nBugfix\n   * Fix bug in mbedtls_mpi_add_mpi() that caused wrong results when the three\n     arguments where the same (in-place doubling). Found and fixed by Janos\n     Follath. #309\n   * Fix potential build failures related to the 'apidoc' target, introduced\n     in the previous patch release. Found by Robert Scheck. #390 #391\n   * Fix issue in Makefile that prevented building using armar. #386\n   * Fix memory leak that occurred only when ECJPAKE was enabled and ECDHE and\n     ECDSA was disabled in config.h . The leak didn't occur by default.\n   * Fix an issue that caused valid certificates to be rejected whenever an\n     expired or not yet valid certificate was parsed before a valid certificate\n     in the trusted certificate list.\n   * Fix bug in mbedtls_x509_crt_parse that caused trailing extra data in the\n     buffer after DER certificates to be included in the raw representation.\n   * Fix issue that caused a hang when generating RSA keys of odd bitlength\n   * Fix bug in mbedtls_rsa_rsaes_pkcs1_v15_encrypt that made null pointer\n     dereference possible.\n   * Fix issue that caused a crash if invalid curves were passed to\n     mbedtls_ssl_conf_curves. #373\n   * Fix issue in ssl_fork_server which was preventing it from functioning. #429\n   * Fix memory leaks in test framework\n   * Fix test in ssl-opt.sh that does not run properly with valgrind\n   * Fix unchecked calls to mmbedtls_md_setup(). Fix by Brian Murray. #502\n\nChanges\n   * On ARM platforms, when compiling with -O0 with GCC, Clang or armcc5,\n     don't use the optimized assembly for bignum multiplication. This removes\n     the need to pass -fomit-frame-pointer to avoid a build error with -O0.\n   * Disabled SSLv3 in the default configuration.\n   * Optimized mbedtls_mpi_zeroize() for MPI integer size. (Fix by Alexey\n     Skalozub).\n   * Fix non-compliance server extension handling. Extensions for SSLv3 are now\n     ignored, as required by RFC6101.\n\n= mbed TLS 2.2.1 released 2016-01-05\n\nSecurity\n   * Fix potential double free when mbedtls_asn1_store_named_data() fails to\n     allocate memory. Only used for certificate generation, not triggerable\n     remotely in SSL/TLS. Found by Rafa\u0142 Przywara. #367\n   * Disable MD5 handshake signatures in TLS 1.2 by default to prevent the\n     SLOTH attack on TLS 1.2 server authentication (other attacks from the\n     SLOTH paper do not apply to any version of mbed TLS or PolarSSL).\n     https://www.mitls.org/pages/attacks/SLOTH\n\nBugfix\n   * Fix over-restrictive length limit in GCM. Found by Andreas-N. #362\n   * Fix bug in certificate validation that caused valid chains to be rejected\n     when the first intermediate certificate has pathLenConstraint=0. Found by\n     Nicholas Wilson. Introduced in mbed TLS 2.2.0. #280\n   * Removed potential leak in mbedtls_rsa_rsassa_pkcs1_v15_sign(), found by\n     JayaraghavendranK. #372\n   * Fix suboptimal handling of unexpected records that caused interop issues\n     with some peers over unreliable links. Avoid dropping an entire DTLS\n     datagram if a single record in a datagram is unexpected, instead only\n     drop the record and look at subsequent records (if any are present) in\n     the same datagram. Found by jeannotlapin. #345\n\n= mbed TLS 2.2.0 released 2015-11-04\n\nSecurity\n   * Fix potential double free if mbedtls_ssl_conf_psk() is called more than\n     once and some allocation fails. Cannot be forced remotely. Found by Guido\n     Vranken, Intelworks.\n   * Fix potential heap corruption on Windows when\n     mbedtls_x509_crt_parse_path() is passed a path longer than 2GB. Cannot be\n     triggered remotely. Found by Guido Vranken, Intelworks.\n   * Fix potential buffer overflow in some asn1_write_xxx() functions.\n     Cannot be triggered remotely unless you create X.509 certificates based\n     on untrusted input or write keys of untrusted origin. Found by Guido\n     Vranken, Intelworks.\n   * The X509 max_pathlen constraint was not enforced on intermediate\n     certificates. Found by Nicholas Wilson, fix and tests provided by\n     Janos Follath. #280 and #319\n\nFeatures\n   * Experimental support for EC J-PAKE as defined in Thread 1.0.0.\n     Disabled by default as the specification might still change.\n   * Added a key extraction callback to accees the master secret and key\n     block. (Potential uses include EAP-TLS and Thread.)\n\nBugfix\n   * Self-signed certificates were not excluded from pathlen counting,\n     resulting in some valid X.509 being incorrectly rejected. Found and fix\n     provided by Janos Follath. #319\n   * Fix build error with configurations where ECDHE-PSK is the only key\n     exchange. Found and fix provided by Chris Hammond. #270\n   * Fix build error with configurations where RSA, RSA-PSK, ECDH-RSA or\n     ECHD-ECDSA if the only key exchange. Multiple reports. #310\n   * Fixed a bug causing some handshakes to fail due to some non-fatal alerts\n     not being properly ignored. Found by mancha and Kasom Koht-arsa, #308\n   * mbedtls_x509_crt_verify(_with_profile)() now also checks the key type and\n     size/curve against the profile. Before that, there was no way to set a\n     minimum key size for end-entity certificates with RSA keys. Found by\n     Matthew Page of Scannex Electronics Ltd.\n   * Fix failures in MPI on Sparc(64) due to use of bad assembly code.\n     Found by Kurt Danielson. #292\n   * Fix typo in name of the extKeyUsage OID. Found by inestlerode, #314\n   * Fix bug in ASN.1 encoding of booleans that caused generated CA\n     certificates to be rejected by some applications, including OS X\n     Keychain. Found and fixed by Jonathan Leroy, Inikup.\n\nChanges\n   * Improved performance of mbedtls_ecp_muladd() when one of the scalars is 1\n     or -1.\n\n= mbed TLS 2.1.2 released 2015-10-06\n\nSecurity\n   * Added fix for CVE-2015-5291 to prevent heap corruption due to buffer\n     overflow of the hostname or session ticket. Found by Guido Vranken,\n     Intelworks.\n   * Fix potential double-free if mbedtls_ssl_set_hs_psk() is called more than\n     once in the same handhake and mbedtls_ssl_conf_psk() was used.\n     Found and patch provided by Guido Vranken, Intelworks. Cannot be forced\n     remotely.\n   * Fix stack buffer overflow in pkcs12 decryption (used by\n     mbedtls_pk_parse_key(file)() when the password is > 129 bytes.\n     Found by Guido Vranken, Intelworks. Not triggerable remotely.\n   * Fix potential buffer overflow in mbedtls_mpi_read_string().\n     Found by Guido Vranken, Intelworks. Not exploitable remotely in the context\n     of TLS, but might be in other uses. On 32 bit machines, requires reading a\n     string of close to or larger than 1GB to exploit; on 64 bit machines, would\n     require reading a string of close to or larger than 2^62 bytes.\n   * Fix potential random memory allocation in mbedtls_pem_read_buffer()\n     on crafted PEM input data. Found and fix provided by Guido Vranken,\n     Intelworks. Not triggerable remotely in TLS. Triggerable remotely if you\n     accept PEM data from an untrusted source.\n   * Fix possible heap buffer overflow in base64_encoded() when the input\n     buffer is 512MB or larger on 32-bit platforms. Found by Guido Vranken,\n     Intelworks. Not trigerrable remotely in TLS.\n   * Fix potential double-free if mbedtls_conf_psk() is called repeatedly on\n     the same mbedtls_ssl_config object and memory allocation fails. Found by\n     Guido Vranken, Intelworks. Cannot be forced remotely.\n   * Fix potential heap buffer overflow in servers that perform client\n     authentication against a crafted CA cert. Cannot be triggered remotely\n     unless you allow third parties to pick trust CAs for client auth.\n     Found by Guido Vranken, Intelworks.\n\nBugfix\n   * Fix compile error in net.c with musl libc. Found and patch provided by\n     zhasha (#278).\n   * Fix macroization of 'inline' keyword when building as C++. (#279)\n\nChanges\n   * Added checking of hostname length in mbedtls_ssl_set_hostname() to ensure\n     domain names are compliant with RFC 1035.\n   * Fixed paths for check_config.h in example config files. (Found by bachp)\n     (#291)\n\n= mbed TLS 2.1.1 released 2015-09-17\n\nSecurity\n   * Add countermeasure against Lenstra's RSA-CRT attack for PKCS#1 v1.5\n     signatures. (Found by Florian Weimer, Red Hat.)\n     https://securityblog.redhat.com/2015/09/02/factoring-rsa-keys-with-tls-perfect-forward-secrecy/\n   * Fix possible client-side NULL pointer dereference (read) when the client\n     tries to continue the handshake after it failed (a misuse of the API).\n     (Found and patch provided by Fabian Foerg, Gotham Digital Science using\n     afl-fuzz.)\n\nBugfix\n   * Fix warning when using a 64bit platform. (found by embedthis) (#275)\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n\nChanges\n   * Made X509 profile pointer const in mbedtls_ssl_conf_cert_profile() to allow\n     use of mbedtls_x509_crt_profile_next. (found by NWilson)\n   * When a client initiates a reconnect from the same port as a live\n     connection, if cookie verification is available\n     (MBEDTLS_SSL_DTLS_HELLO_VERIFY defined in config.h, and usable cookie\n     callbacks set with mbedtls_ssl_conf_dtls_cookies()), this will be\n     detected and mbedtls_ssl_read() will return\n     MBEDTLS_ERR_SSL_CLIENT_RECONNECT - it is then possible to start a new\n     handshake with the same context. (See RFC 6347 section 4.2.8.)\n\n= mbed TLS 2.1.0 released 2015-09-04\n\nFeatures\n   * Added support for yotta as a build system.\n   * Primary open source license changed to Apache 2.0 license.\n\nBugfix\n   * Fix segfault in the benchmark program when benchmarking DHM.\n   * Fix build error with CMake and pre-4.5 versions of GCC (found by Hugo\n     Leisink).\n   * Fix bug when parsing a ServerHello without extensions (found by David\n     Sears).\n   * Fix bug in CMake lists that caused libmbedcrypto.a not to be installed\n     (found by Benoit Lecocq).\n   * Fix bug in Makefile that caused libmbedcrypto and libmbedx509 not to be\n     installed (found by Rawi666).\n   * Fix compile error with armcc 5 with --gnu option.\n   * Fix bug in Makefile that caused programs not to be installed correctly\n     (found by robotanarchy) (#232).\n   * Fix bug in Makefile that prevented from installing without building the\n     tests (found by robotanarchy) (#232).\n   * Fix missing -static-libgcc when building shared libraries for Windows\n     with make.\n   * Fix link error when building shared libraries for Windows with make.\n   * Fix error when loading libmbedtls.so.\n   * Fix bug in mbedtls_ssl_conf_default() that caused the default preset to\n     be always used (found by dcb314) (#235)\n   * Fix bug in mbedtls_rsa_public() and mbedtls_rsa_private() that could\n     result trying to unlock an unlocked mutex on invalid input (found by\n     Fredrik Axelsson) (#257)\n   * Fix -Wshadow warnings (found by hnrkp) (#240)\n   * Fix memory corruption on client with overlong PSK identity, around\n     SSL_MAX_CONTENT_LEN or higher - not triggerrable remotely (found by\n     Aleksandrs Saveljevs) (#238)\n   * Fix unused function warning when using MBEDTLS_MDx_ALT or\n     MBEDTLS_SHAxxx_ALT (found by Henrik) (#239)\n   * Fix memory corruption in pkey programs (found by yankuncheng) (#210)\n\nChanges\n   * The PEM parser now accepts a trailing space at end of lines (#226).\n   * It is now possible to #include a user-provided configuration file at the\n     end of the default config.h by defining MBEDTLS_USER_CONFIG_FILE on the\n     compiler's command line.\n   * When verifying a certificate chain, if an intermediate certificate is\n     trusted, no later cert is checked. (suggested by hannes-landeholm)\n     (#220).\n   * Prepend a \"thread identifier\" to debug messages (issue pointed out by\n     Hugo Leisink) (#210).\n   * Add mbedtls_ssl_get_max_frag_len() to query the current maximum fragment\n     length.\n\n= mbed TLS 2.0.0 released 2015-07-13\n\nFeatures\n   * Support for DTLS 1.0 and 1.2 (RFC 6347).\n   * Ability to override core functions from MDx, SHAx, AES and DES modules\n     with custom implementation (eg hardware accelerated), complementing the\n     ability to override the whole module.\n   * New server-side implementation of session tickets that rotate keys to\n     preserve forward secrecy, and allows sharing across multiple contexts.\n   * Added a concept of X.509 cerificate verification profile that controls\n     which algorithms and key sizes (curves for ECDSA) are acceptable.\n   * Expanded configurability of security parameters in the SSL module with\n     mbedtls_ssl_conf_dhm_min_bitlen() and mbedtls_ssl_conf_sig_hashes().\n   * Introduced a concept of presets for SSL security-relevant configuration\n     parameters.\n\nAPI Changes\n   * The library has been split into libmbedcrypto, libmbedx509, libmbedtls.\n     You now need to link to all of them if you use TLS for example.\n   * All public identifiers moved to the mbedtls_* or MBEDTLS_* namespace.\n     Some names have been further changed to make them more consistent.\n     Migration helpers scripts/rename.pl and include/mbedtls/compat-1.3.h are\n     provided. Full list of renamings in scripts/data_files/rename-1.3-2.0.txt\n   * Renamings of fields inside structures, not covered by the previous list:\n     mbedtls_cipher_info_t.key_length -> key_bitlen\n     mbedtls_cipher_context_t.key_length -> key_bitlen\n     mbedtls_ecp_curve_info.size -> bit_size\n   * Headers are now found in the 'mbedtls' directory (previously 'polarssl').\n   * The following _init() functions that could return errors have\n     been split into an _init() that returns void and another function that\n     should generally be the first function called on this context after init:\n     mbedtls_ssl_init() -> mbedtls_ssl_setup()\n     mbedtls_ccm_init() -> mbedtls_ccm_setkey()\n     mbedtls_gcm_init() -> mbedtls_gcm_setkey()\n     mbedtls_hmac_drbg_init() -> mbedtls_hmac_drbg_seed(_buf)()\n     mbedtls_ctr_drbg_init()  -> mbedtls_ctr_drbg_seed()\n     Note that for mbedtls_ssl_setup(), you need to be done setting up the\n     ssl_config structure before calling it.\n   * Most ssl_set_xxx() functions (all except ssl_set_bio(), ssl_set_hostname(),\n     ssl_set_session() and ssl_set_client_transport_id(), plus\n     ssl_legacy_renegotiation()) have been renamed to mbedtls_ssl_conf_xxx()\n     (see rename.pl and compat-1.3.h above) and their first argument's type\n     changed from ssl_context to ssl_config.\n   * ssl_set_bio() changed signature (contexts merged, order switched, one\n     additional callback for read-with-timeout).\n   * The following functions have been introduced and must be used in callback\n     implementations (SNI, PSK) instead of their *conf counterparts:\n     mbedtls_ssl_set_hs_own_cert()\n     mbedtls_ssl_set_hs_ca_chain()\n     mbedtls_ssl_set_hs_psk()\n   * mbedtls_ssl_conf_ca_chain() lost its last argument (peer_cn), now set\n     using mbedtls_ssl_set_hostname().\n   * mbedtls_ssl_conf_session_cache() changed prototype (only one context\n     pointer, parameters reordered).\n   * On server, mbedtls_ssl_conf_session_tickets_cb() must now be used in\n     place of mbedtls_ssl_conf_session_tickets() to enable session tickets.\n   * The SSL debug callback gained two new arguments (file name, line number).\n   * Debug modes were removed.\n   * mbedtls_ssl_conf_truncated_hmac() now returns void.\n   * mbedtls_memory_buffer_alloc_init() now returns void.\n   * X.509 verification flags are now an uint32_t. Affect the signature of:\n     mbedtls_ssl_get_verify_result()\n     mbedtls_x509_ctr_verify_info()\n     mbedtls_x509_crt_verify() (flags, f_vrfy -> needs to be updated)\n     mbedtls_ssl_conf_verify() (f_vrfy -> needs to be updated)\n   * The following functions changed prototype to avoid an in-out length\n     parameter:\n     mbedtls_base64_encode()\n     mbedtls_base64_decode()\n     mbedtls_mpi_write_string()\n     mbedtls_dhm_calc_secret()\n   * In the NET module, all \"int\" and \"int *\" arguments for file descriptors\n     changed type to \"mbedtls_net_context *\".\n   * net_accept() gained new arguments for the size of the client_ip buffer.\n   * In the threading layer, mbedtls_mutex_init() and mbedtls_mutex_free() now\n     return void.\n   * ecdsa_write_signature() gained an additional md_alg argument and\n     ecdsa_write_signature_det() was deprecated.\n   * pk_sign() no longer accepts md_alg == POLARSSL_MD_NONE with ECDSA.\n   * Last argument of x509_crt_check_key_usage() and\n     mbedtls_x509write_crt_set_key_usage() changed from int to unsigned.\n   * test_ca_list (from certs.h) is renamed to test_cas_pem and is only\n     available if POLARSSL_PEM_PARSE_C is defined (it never worked without).\n   * Test certificates in certs.c are no longer guaranteed to be nul-terminated\n     strings; use the new *_len variables instead of strlen().\n   * Functions mbedtls_x509_xxx_parse(), mbedtls_pk_parse_key(),\n     mbedtls_pk_parse_public_key() and mbedtls_dhm_parse_dhm() now expect the\n     length parameter to include the terminating null byte for PEM input.\n   * Signature of mpi_mul_mpi() changed to make the last argument unsigned\n   * calloc() is now used instead of malloc() everywhere. API of platform\n     layer and the memory_buffer_alloc module changed accordingly.\n     (Thanks to Mansour Moufid for helping with the replacement.)\n   * Change SSL_DISABLE_RENEGOTIATION config.h flag to SSL_RENEGOTIATION\n     (support for renegotiation now needs explicit enabling in config.h).\n   * Split MBEDTLS_HAVE_TIME into MBEDTLS_HAVE_TIME and MBEDTLS_HAVE_TIME_DATE\n     in config.h\n   * net_connect() and net_bind() have a new 'proto' argument to choose\n     between TCP and UDP, using the macros NET_PROTO_TCP or NET_PROTO_UDP.\n     Their 'port' argument type is changed to a string.\n   * Some constness fixes\n\nRemovals\n   * Removed mbedtls_ecp_group_read_string(). Only named groups are supported.\n   * Removed mbedtls_ecp_sub() and mbedtls_ecp_add(), use\n     mbedtls_ecp_muladd().\n   * Removed individual mdX_hmac, shaX_hmac, mdX_file and shaX_file functions\n     (use generic functions from md.h)\n   * Removed mbedtls_timing_msleep(). Use mbedtls_net_usleep() or a custom\n     waiting function.\n   * Removed test DHM parameters from the test certs module.\n   * Removed the PBKDF2 module (use PKCS5).\n   * Removed POLARSSL_ERROR_STRERROR_BC (use mbedtls_strerror()).\n   * Removed compat-1.2.h (helper for migrating from 1.2 to 1.3).\n   * Removed openssl.h (very partial OpenSSL compatibility layer).\n   * Configuration options POLARSSL_HAVE_LONGLONG was removed (now always on).\n   * Configuration options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 have\n     been removed (compiler is required to support 32-bit operations).\n   * Configuration option POLARSSL_HAVE_IPV6 was removed (always enabled).\n   * Removed test program o_p_test, the script compat.sh does more.\n   * Removed test program ssl_test, superseded by ssl-opt.sh.\n   * Removed helper script active-config.pl\n\nNew deprecations\n   * md_init_ctx() is deprecated in favour of md_setup(), that adds a third\n     argument (allowing memory savings if HMAC is not used)\n\nSemi-API changes (technically public, morally private)\n   * Renamed a few headers to include _internal in the name. Those headers are\n     not supposed to be included by users.\n   * Changed md_info_t into an opaque structure (use md_get_xxx() accessors).\n   * Changed pk_info_t into an opaque structure.\n   * Changed cipher_base_t into an opaque structure.\n   * Removed sig_oid2 and rename sig_oid1 to sig_oid in x509_crt and x509_crl.\n   * x509_crt.key_usage changed from unsigned char to unsigned int.\n   * Removed r and s from ecdsa_context\n   * Removed mode from des_context and des3_context\n\nDefault behavior changes\n   * The default minimum TLS version is now TLS 1.0.\n   * RC4 is now blacklisted by default in the SSL/TLS layer, and excluded from the\n     default ciphersuite list returned by ssl_list_ciphersuites()\n   * Support for receiving SSLv2 ClientHello is now disabled by default at\n     compile time.\n   * The default authmode for SSL/TLS clients is now REQUIRED.\n   * Support for RSA_ALT contexts in the PK layer is now optional. Since is is\n     enabled in the default configuration, this is only noticeable if using a\n     custom config.h\n   * Default DHM parameters server-side upgraded from 1024 to 2048 bits.\n   * A minimum RSA key size of 2048 bits is now enforced during ceritificate\n     chain verification.\n   * Negotiation of truncated HMAC is now disabled by default on server too.\n   * The following functions are now case-sensitive:\n     mbedtls_cipher_info_from_string()\n     mbedtls_ecp_curve_info_from_name()\n     mbedtls_md_info_from_string()\n     mbedtls_ssl_ciphersuite_from_string()\n     mbedtls_version_check_feature()\n\nRequirement changes\n   * The minimum MSVC version required is now 2010 (better C99 support).\n   * The NET layer now unconditionnaly relies on getaddrinfo() and select().\n   * Compiler is required to support C99 types such as long long and uint32_t.\n\nAPI changes from the 1.4 preview branch\n   * ssl_set_bio_timeout() was removed, split into mbedtls_ssl_set_bio() with\n     new prototype, and mbedtls_ssl_set_read_timeout().\n   * The following functions now return void:\n     mbedtls_ssl_conf_transport()\n     mbedtls_ssl_conf_max_version()\n     mbedtls_ssl_conf_min_version()\n   * DTLS no longer hard-depends on TIMING_C, but uses a callback interface\n     instead, see mbedtls_ssl_set_timer_cb(), with the Timing module providing\n     an example implementation, see mbedtls_timing_delay_context and\n     mbedtls_timing_set/get_delay().\n   * With UDP sockets, it is no longer necessary to call net_bind() again\n     after a successful net_accept().\n\nChanges\n   * mbedtls_ctr_drbg_random() and mbedtls_hmac_drbg_random() are now\n     thread-safe if MBEDTLS_THREADING_C is enabled.\n   * Reduced ROM fooprint of SHA-256 and added an option to reduce it even\n     more (at the expense of performance) MBEDTLS_SHA256_SMALLER.\n\n= mbed TLS 1.3 branch\n\nSecurity\n   * With authmode set to SSL_VERIFY_OPTIONAL, verification of keyUsage and\n     extendedKeyUsage on the leaf certificate was lost (results not accessible\n     via ssl_get_verify_results()).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nFeatures\n   * Improve ECC performance by using more efficient doubling formulas\n     (contributed by Peter Dettman).\n   * Add x509_crt_verify_info() to display certificate verification results.\n   * Add support for reading DH parameters with privateValueLength included\n     (contributed by Daniel Kahn Gillmor).\n   * Add support for bit strings in X.509 names (request by Fredrik Axelsson).\n   * Add support for id-at-uniqueIdentifier in X.509 names.\n   * Add support for overriding snprintf() (except on Windows) and exit() in\n     the platform layer.\n   * Add an option to use macros instead of function pointers in the platform\n     layer (helps get rid of unwanted references).\n   * Improved Makefiles for Windows targets by fixing library targets and making\n     cross-compilation easier (thanks to Alon Bar-Lev).\n   * The benchmark program also prints heap usage for public-key primitives\n     if POLARSSL_MEMORY_BUFFER_ALLOC_C and POLARSSL_MEMORY_DEBUG are defined.\n   * New script ecc-heap.sh helps measuring the impact of ECC parameters on\n     speed and RAM (heap only for now) usage.\n   * New script memory.sh helps measuring the ROM and RAM requirements of two\n     reduced configurations (PSK-CCM and NSA suite B).\n   * Add config flag POLARSSL_DEPRECATED_WARNING (off by default) to produce\n     warnings on use of deprecated functions (with GCC and Clang only).\n   * Add config flag POLARSSL_DEPRECATED_REMOVED (off by default) to produce\n     errors on use of deprecated functions.\n\nBugfix\n   * Fix compile errors with PLATFORM_NO_STD_FUNCTIONS.\n   * Fix compile error with PLATFORM_EXIT_ALT (thanks to Rafa\u0142 Przywara).\n   * Fix bug in entropy.c when THREADING_C is also enabled that caused\n     entropy_free() to crash (thanks to Rafa\u0142 Przywara).\n   * Fix memory leak when gcm_setkey() and ccm_setkey() are used more than\n     once on the same context.\n   * Fix bug in ssl_mail_client when password is longer that username (found\n     by Bruno Pape).\n   * Fix undefined behaviour (memcmp( NULL, NULL, 0 );) in X.509 modules\n     (detected by Clang's 3.6 UBSan).\n   * mpi_size() and mpi_msb() would segfault when called on an mpi that is\n     initialized but not set (found by pravic).\n   * Fix detection of support for getrandom() on Linux (reported by syzzer) by\n     doing it at runtime (using uname) rather that compile time.\n   * Fix handling of symlinks by \"make install\" (found by Ga\u00ebl PORTAY).\n   * Fix potential NULL pointer dereference (not trigerrable remotely) when\n     ssl_write() is called before the handshake is finished (introduced in\n     1.3.10) (first reported by Martin Blumenstingl).\n   * Fix bug in pk_parse_key() that caused some valid private EC keys to be\n     rejected.\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix thread safety bug in RSA operations (found by Fredrik Axelsson).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms.\n   * Fix potential memory leak in ssl_set_psk() (found by Mansour Moufid).\n   * Fix compile error when POLARSSL_SSL_DISABLE_RENEGOTATION and\n     POLARSSL_SSL_SSESSION_TICKETS where both enabled in config.h (introduced\n     in 1.3.10).\n   * Add missing extern \"C\" guard in aesni.h (reported by amir zamani).\n   * Add missing dependency on SHA-256 in some x509 programs (reported by\n     Gergely Budai).\n   * Fix bug related to ssl_set_curves(): the client didn't check that the\n     curve picked by the server was actually allowed.\n\nChanges\n   * Remove bias in mpi_gen_prime (contributed by Pascal Junod).\n   * Remove potential sources of timing variations (some contributed by Pascal\n     Junod).\n   * Options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 are deprecated.\n   * Enabling POLARSSL_NET_C without POLARSSL_HAVE_IPV6 is deprecated.\n   * compat-1.2.h and openssl.h are deprecated.\n   * Adjusting/overriding CFLAGS and LDFLAGS with the make build system is now\n     more flexible (warning: OFLAGS is not used any more) (see the README)\n     (contributed by Alon Bar-Lev).\n   * ssl_set_own_cert() no longer calls pk_check_pair() since the\n     performance impact was bad for some users (this was introduced in 1.3.10).\n   * Move from SHA-1 to SHA-256 in example programs using signatures\n     (suggested by Thorsten M\u00fchlfelder).\n   * Remove some unneeded inclusions of header files from the standard library\n     \"minimize\" others (eg use stddef.h if only size_t is needed).\n   * Change #include lines in test files to use double quotes instead of angle\n     brackets for uniformity with the rest of the code.\n   * Remove dependency on sscanf() in X.509 parsing modules.\n\n= mbed TLS 1.3.10 released 2015-02-09\nSecurity\n   * NULL pointer dereference in the buffer-based allocator when the buffer is\n     full and polarssl_free() is called (found by Mark Hasemeyer)\n     (only possible if POLARSSL_MEMORY_BUFFER_ALLOC_C is enabled, which it is\n     not by default).\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask for a\n     client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix timing difference that could theoretically lead to a\n     Bleichenbacher-style attack in the RSA and RSA-PSK key exchanges\n     (reported by Sebastian Schinzel).\n\nFeatures\n   * Add support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv).\n   * Add support for Extended Master Secret (draft-ietf-tls-session-hash).\n   * Add support for Encrypt-then-MAC (RFC 7366).\n   * Add function pk_check_pair() to test if public and private keys match.\n   * Add x509_crl_parse_der().\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain.\n   * Support for renegotiation can now be disabled at compile-time\n   * Support for 1/n-1 record splitting, a countermeasure against BEAST.\n   * Certificate selection based on signature hash, preferring SHA-1 over SHA-2\n     for pre-1.2 clients when multiple certificates are available.\n   * Add support for getrandom() syscall on recent Linux kernels with Glibc or\n     a compatible enough libc (eg uClibc).\n   * Add ssl_set_arc4_support() to make it easier to disable RC4 at runtime\n     while using the default ciphersuite list.\n   * Added new error codes and debug messages about selection of\n     ciphersuite/certificate.\n\nBugfix\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Possible buffer overflow of length at most POLARSSL_MEMORY_ALIGN_MULTIPLE\n     if memory_buffer_alloc_init() was called with buf not aligned and len not\n     a multiple of POLARSSL_MEMORY_ALIGN_MULTIPLE (not triggerable remotely).\n   * User set CFLAGS were ignored by Cmake with gcc (introduced in 1.3.9, found\n     by Julian Ospald).\n   * Fix potential undefined behaviour in Camellia.\n   * Fix potential failure in ECDSA signatures when POLARSSL_ECP_MAX_BITS is a\n     multiple of 8 (found by Gergely Budai).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Use deterministic nonces for AEAD ciphers in TLS by default (possible to\n     switch back to random with POLARSSL_SSL_AEAD_RANDOM_IV in config.h).\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * ssl_set_own_cert() now returns an error on key-certificate mismatch.\n   * Forbid repeated extensions in X.509 certificates.\n   * debug_print_buf() now prints a text view in addition to hexadecimal.\n   * A specific error is now returned when there are ciphersuites in common\n     but none of them is usable due to external factors such as no certificate\n     with a suitable (extended)KeyUsage or curve or no PSK set.\n   * It is now possible to disable negotiation of truncated HMAC server-side\n     at runtime with ssl_set_truncated_hmac().\n   * Example programs for SSL client and server now disable SSLv3 by default.\n   * Example programs for SSL client and server now disable RC4 by default.\n   * Use platform.h in all test suites and programs.\n\n= PolarSSL 1.3.9 released 2014-10-20\nSecurity\n   * Lowest common hash was selected from signature_algorithms extension in\n     TLS 1.2 (found by Darren Bane) (introduced in 1.3.8).\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Remotely-triggerable memory leak when parsing crafted ClientHello\n     (not affected if ECC support was compiled out) (found using Codenomicon\n     Defensics).\n\nBugfix\n   * Support escaping of commas in x509_string_to_names()\n   * Fix compile error in ssl_pthread_server (found by Julian Ospald).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n   * Fix compile error in timing.c when POLARSSL_NET_C and POLARSSL_SELFTEST\n     are defined but not POLARSSL_HAVE_TIME (found by Stephane Di Vito).\n   * Remove non-existent file from VS projects (found by Peter Vaskovic).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Server-initiated renegotiation would fail with non-blocking I/O if the\n     write callback returned WANT_WRITE when requesting renegotiation.\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compile error with armcc in mpi_is_prime()\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n\nChanges\n   * Ciphersuites using SHA-256 or SHA-384 now require TLS 1.x (there is no\n     standard defining how to use SHA-2 with SSL 3.0).\n   * Ciphersuites using RSA-PSK key exchange new require TLS 1.x (the spec is\n     ambiguous on how to encode some packets with SSL 3.0).\n   * Made buffer size in pk_write_(pub)key_pem() more dynamic, eg smaller if\n     RSA is disabled, larger if POLARSSL_MPI_MAX_SIZE is larger.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * POLARSSL_MPI_MAX_SIZE now defaults to 1024 in order to allow 8192 bits\n     RSA keys.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n\n= PolarSSL 1.3.8 released 2014-07-11\nSecurity\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nFeatures\n   * Add CCM module and cipher mode to Cipher Layer\n   * Support for CCM and CCM_8 ciphersuites\n   * Support for parsing and verifying RSASSA-PSS signatures in the X.509\n     modules (certificates, CRLs and CSRs).\n   * Blowfish in the cipher layer now supports variable length keys.\n   * Add example config.h for PSK with CCM, optimized for low RAM usage.\n   * Optimize for RAM usage in example config.h for NSA Suite B profile.\n   * Add POLARSSL_REMOVE_ARC4_CIPHERSUITES to allow removing RC4 ciphersuites\n     from the default list (inactive by default).\n   * Add server-side enforcement of sent renegotiation requests\n     (ssl_set_renegotiation_enforced())\n   * Add SSL_CIPHERSUITES config.h flag to allow specifying a list of\n     ciphersuites to use and save some memory if the list is small.\n\nChanges\n   * Add LINK_WITH_PTHREAD option in CMake for explicit linking that is\n     required on some platforms (e.g. OpenBSD)\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n   * md_list() now returns hashes strongest first\n   * Selection of hash for signing ServerKeyExchange in TLS 1.2 now picks\n     strongest offered by client.\n   * All public contexts have _init() and _free() functions now for simpler\n     usage pattern\n\nBugfix\n   * Fix in debug_print_msg()\n   * Enforce alignment in the buffer allocator even if buffer is not aligned\n   * Remove less-than-zero checks on unsigned numbers\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix WSAStartup() return value check (found by Peter Vaskovic)\n   * Other minor issues (found by Peter Vaskovic)\n   * Fix symlink command for cross compiling with CMake (found by Andre\n     Heinecke)\n   * Fix DER output of gen_key app (found by Gergely Budai)\n   * Very small records were incorrectly rejected when truncated HMAC was in\n     use with some ciphersuites and versions (RC4 in all versions, CBC with\n     versions < TLS 1.1).\n   * Very large records using more than 224 bytes of padding were incorrectly\n     rejected with CBC-based ciphersuites and TLS >= 1.1\n   * Very large records using less padding could cause a buffer overread of up\n     to 32 bytes with CBC-based ciphersuites and TLS >= 1.1\n   * Restore ability to use a v1 cert as a CA if trusted locally. (This had\n     been removed in 1.3.6.)\n   * Restore ability to locally trust a self-signed cert that is not a proper\n     CA for use as an end entity certificate. (This had been removed in\n     1.3.6.)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n   * Fix possible miscomputation of the premaster secret with DHE-PSK key\n     exchange that caused some handshakes to fail with other implementations.\n     (Failure rate <= 1/255 with common DHM moduli.)\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n   * Fix mpi_write_string() to write \"00\" as hex output for empty MPI (found\n     by Hui Dong)\n\n= PolarSSL 1.3.7 released on 2014-05-02\nFeatures\n   * debug_set_log_mode() added to determine raw or full logging\n   * debug_set_threshold() added to ignore messages over threshold level\n   * version_check_feature() added to check for compile-time options at\n     run-time\n\nChanges\n   * POLARSSL_CONFIG_OPTIONS has been removed. All values are individually\n     checked and filled in the relevant module headers\n   * Debug module only outputs full lines instead of parts\n   * Better support for the different Attribute Types from IETF PKIX (RFC 5280)\n   * AES-NI now compiles with \"old\" assemblers too\n   * Ciphersuites based on RC4 now have the lowest priority by default\n\nBugfix\n   * Only iterate over actual certificates in ssl_write_certificate_request()\n     (found by Matthew Page)\n   * Typos in platform.c and pkcs11.c (found by Daniel Phillips and Steffan\n     Karger)\n   * cert_write app should use subject of issuer certificate as issuer of cert\n   * Fix false reject in padding check in ssl_decrypt_buf() for CBC\n     ciphersuites, for full SSL frames of data.\n   * Improve interoperability by not writing extension length in ClientHello /\n     ServerHello when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix dependencies issues in X.509 test suite.\n   * Some parts of ssl_tls.c were compiled even when the module was disabled.\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Fix detection of Clang on some Apple platforms with CMake\n     (found by Barry K. Nathan)\n\n= PolarSSL 1.3.6 released on 2014-04-11\n\nFeatures\n   * Support for the ALPN SSL extension\n   * Add option 'use_dev_random' to gen_key application\n   * Enable verification of the keyUsage extension for CA and leaf\n     certificates (POLARSSL_X509_CHECK_KEY_USAGE)\n   * Enable verification of the extendedKeyUsage extension\n     (POLARSSL_X509_CHECK_EXTENDED_KEY_USAGE)\n\nChanges\n   * x509_crt_info() now prints information about parsed extensions as well\n   * pk_verify() now returns a specific error code when the signature is valid\n     but shorter than the supplied length.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n\nSecurity\n   * Avoid potential timing leak in ecdsa_sign() by blinding modular division.\n     (Found by Watson Ladd.)\n   * The notAfter date of some certificates was no longer checked since 1.3.5.\n     This affects certificates in the user-supplied chain except the top\n     certificate. If the user-supplied chain contains only one certificates,\n     it is not affected (ie, its notAfter date is properly checked).\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n\nBugfix\n   * The length of various ClientKeyExchange messages was not properly checked.\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Fixed malloc/free default #define in platform.c (found by Gergely Budai).\n   * Fixed type which made POLARSSL_ENTROPY_FORCE_SHA256 uneffective (found by\n     Gergely Budai).\n   * Fix #include path in ecdsa.h which wasn't accepted by some compilers.\n     (found by Gergely Budai)\n   * Fix compile errors when POLARSSL_ERROR_STRERROR_BC is undefined (found by\n     Shuo Chen).\n   * oid_get_numeric_string() used to truncate the output without returning an\n     error if the output buffer was just 1 byte too small.\n   * dhm_parse_dhm() (hence dhm_parse_dhmfile()) did not set dhm->len.\n   * Calling pk_debug() on an RSA-alt key would segfault.\n   * pk_get_size() and pk_get_len() were off by a factor 8 for RSA-alt keys.\n   * Potential buffer overwrite in pem_write_buffer() because of low length\n     indication (found by Thijs Alkemade)\n   * EC curves constants, which should be only in ROM since 1.3.3, were also\n     stored in RAM due to missing 'const's (found by Gergely Budai).\n\n= PolarSSL 1.3.5 released on 2014-03-26\nFeatures\n   * HMAC-DRBG as a separate module\n   * Option to set the Curve preference order (disabled by default)\n   * Single Platform compatilibity layer (for memory / printf / fprintf)\n   * Ability to provide alternate timing implementation\n   * Ability to force the entropy module to use SHA-256 as its basis\n     (POLARSSL_ENTROPY_FORCE_SHA256)\n   * Testing script ssl-opt.sh added for testing 'live' ssl option\n     interoperability against OpenSSL and PolarSSL\n   * Support for reading EC keys that use SpecifiedECDomain in some cases.\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Deprecated the Memory layer\n   * entropy_add_source(), entropy_update_manual() and entropy_gather()\n     now thread-safe if POLARSSL_THREADING_C defined\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Revamped the compat.sh interoperatibility script to include support for\n     testing against GnuTLS\n   * Deprecated ssl_set_own_cert_rsa() and ssl_set_own_cert_rsa_alt()\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is 'optional' (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Fixed possible buffer overflow with overlong PSK\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\nBugfix\n   * ecp_gen_keypair() does more tries to prevent failure because of\n     statistics\n   * Fixed bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Fixed dependency issues in test suite\n   * Programs rsa_sign_pss and rsa_verify_pss were not using PSS since 1.3.0\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_cache was creating entries when max_entries=0 if TIMING_C was enabled.\n   * m_sleep() was sleeping twice too long on most Unix platforms.\n   * Fixed bug with session tickets and non-blocking I/O in the unlikely case\n     send() would return an EAGAIN error when sending the ticket.\n   * ssl_cache was leaking memory when reusing a timed out entry containing a\n     client certificate.\n   * ssl_srv was leaking memory when client presented a timed out ticket\n     containing a client certificate\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * Fix typo in rsa_copy() that impacted PKCS#1 v2 contexts\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n\n= PolarSSL 1.3.4 released on 2014-01-27\nFeatures\n   * Support for the Koblitz curves: secp192k1, secp224k1, secp256k1\n   * Support for RIPEMD-160\n   * Support for AES CFB8 mode\n   * Support for deterministic ECDSA (RFC 6979)\n\nBugfix\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * net module handles timeouts on blocking sockets better (found by Tilman\n     Sauerbeck)\n   * Assembly format fixes in bn_mul.h\n\nSecurity\n   * Missing MPI_CHK calls added around unguarded mpi calls (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.3 released on 2013-12-31\nFeatures\n   * EC key generation support in gen_key app\n   * Support for adhering to client ciphersuite order preference\n     (POLARSSL_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n   * Support for Curve25519\n   * Support for ECDH-RSA and ECDH-ECDSA key exchanges and ciphersuites\n   * Support for IPv6 in the NET module\n   * AES-NI support for AES, AES-GCM and AES key scheduling\n   * SSL Pthread-based server example added (ssl_pthread_server)\n\nChanges\n   * gen_prime() speedup\n   * Speedup of ECP multiplication operation\n   * Relaxed some SHA2 ciphersuite's version requirements\n   * Dropped use of readdir_r() instead of readdir() with threading support\n   * More constant-time checks in the RSA module\n   * Split off curves from ecp.c into ecp_curves.c\n   * Curves are now stored fully in ROM\n   * Memory usage optimizations in ECP module\n   * Removed POLARSSL_THREADING_DUMMY\n\nBugfix\n   * Fixed bug in mpi_set_bit() on platforms where t_uint is wider than int\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * Missing defines / cases for RSA_PSK key exchange\n   * crypt_and_hash app checks MAC before final decryption\n   * Potential memory leak in ssl_ticket_keys_init()\n   * Memory leak in benchmark application\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n\nSecurity\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.2 released on 2013-11-04\nFeatures\n   * PK tests added to test framework\n   * Added optional optimization for NIST MODP curves (POLARSSL_ECP_NIST_OPTIM)\n   * Support for Camellia-GCM mode and ciphersuites\n\nChanges\n   * Padding checks in cipher layer are now constant-time\n   * Value comparisons in SSL layer are now constant-time\n   * Support for serialNumber, postalAddress and postalCode in X509 names\n   * SSL Renegotiation was refactored\n\nBugfix\n   * More stringent checks in cipher layer\n   * Server does not send out extensions not advertised by client\n   * Prevent possible alignment warnings on casting from char * to 'aligned *'\n   * Misc fixes and additions to dependency checks\n   * Const correctness\n   * cert_write with selfsign should use issuer_name as subject_name\n   * Fix ECDSA corner case: missing reduction mod N (found by DualTachyon)\n   * Defines to handle UEFI environment under MSVC\n   * Server-side initiated renegotiations send HelloRequest\n\n= PolarSSL 1.3.1 released on 2013-10-15\nFeatures\n   * Support for Brainpool curves and TLS ciphersuites (RFC 7027)\n   * Support for ECDHE-PSK key-exchange and ciphersuites\n   * Support for RSA-PSK key-exchange and ciphersuites\n\nChanges\n   * RSA blinding locks for a smaller amount of time\n   * TLS compression only allocates working buffer once\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * config.h is more script-friendly\n\nBugfix\n   * Missing MSVC defines added\n   * Compile errors with POLARSSL_RSA_NO_CRT\n   * Header files with 'polarssl/'\n   * Const correctness\n   * Possible naming collision in dhm_context\n   * Better support for MSVC\n   * threading_set_alt() name\n   * Added missing x509write_crt_set_version()\n\n= PolarSSL 1.3.0 released on 2013-10-01\nFeatures\n   * Elliptic Curve Cryptography module added\n   * Elliptic Curve Diffie Hellman module added\n   * Ephemeral Elliptic Curve Diffie Hellman support for SSL/TLS\n    (ECDHE-based ciphersuites)\n   * Ephemeral Elliptic Curve Digital Signature Algorithm support for SSL/TLS\n    (ECDSA-based ciphersuites)\n   * Ability to specify allowed ciphersuites based on the protocol version.\n   * PSK and DHE-PSK based ciphersuites added\n   * Memory allocation abstraction layer added\n   * Buffer-based memory allocator added (no malloc() / free() / HEAP usage)\n   * Threading abstraction layer added (dummy / pthread / alternate)\n   * Public Key abstraction layer added\n   * Parsing Elliptic Curve keys\n   * Parsing Elliptic Curve certificates\n   * Support for max_fragment_length extension (RFC 6066)\n   * Support for truncated_hmac extension (RFC 6066)\n   * Support for zeros-and-length (ANSI X.923) padding, one-and-zeros\n     (ISO/IEC 7816-4) padding and zero padding in the cipher layer\n   * Support for session tickets (RFC 5077)\n   * Certificate Request (CSR) generation with extensions (key_usage,\n     ns_cert_type)\n   * X509 Certificate writing with extensions (basic_constraints,\n     issuer_key_identifier, etc)\n   * Optional blinding for RSA, DHM and EC\n   * Support for multiple active certificate / key pairs in SSL servers for\n     the same host (Not to be confused with SNI!)\n\nChanges\n   * Ability to enable / disable SSL v3 / TLS 1.0 / TLS 1.1 / TLS 1.2\n     individually\n   * Introduced separate SSL Ciphersuites module that is based on\n     Cipher and MD information\n   * Internals for SSL module adapted to have separate IV pointer that is\n     dynamically set (Better support for hardware acceleration)\n   * Moved all OID functionality to a separate module. RSA function\n     prototypes for the RSA sign and verify functions changed as a result\n   * Split up the GCM module into a starts/update/finish cycle\n   * Client and server now filter sent and accepted ciphersuites on minimum\n     and maximum protocol version\n   * Ability to disable server_name extension (RFC 6066)\n   * Renamed error_strerror() to the less conflicting polarssl_strerror()\n     (Ability to keep old as well with POLARSSL_ERROR_STRERROR_BC)\n   * SHA2 renamed to SHA256, SHA4 renamed to SHA512 and functions accordingly\n   * All RSA operations require a random generator for blinding purposes\n   * X509 core refactored\n   * x509_crt_verify() now case insensitive for cn (RFC 6125 6.4)\n   * Also compiles / runs without time-based functions (!POLARSSL_HAVE_TIME)\n   * Support faulty X509 v1 certificates with extensions\n     (POLARSSL_X509_ALLOW_EXTENSIONS_NON_V3)\n\nBugfix\n   * Fixed parse error in ssl_parse_certificate_request()\n   * zlib compression/decompression skipped on empty blocks\n   * Support for AIX header locations in net.c module\n   * Fixed file descriptor leaks\n\nSecurity\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n\n= Version 1.2.14 released 2015-05-??\n\nSecurity\n   * Fix potential invalid memory read in the server, that allows a client to\n     crash it remotely (found by Caj Larsson).\n   * Fix potential invalid memory read in certificate parsing, that allows a\n     client to crash the server remotely if client authentication is enabled\n     (found using Codenomicon Defensics).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nBugfix\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms (found with Coverity Scan).\n\n= Version 1.2.13 released 2015-02-16\nNote: Although PolarSSL has been renamed to mbed TLS, no changes reflecting\n      this will be made in the 1.2 branch at this point.\n\nSecurity\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask\n     for a client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     found using Codenomicon Defensics).\n   * Fix buffer overread of size 1 when parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate).\n\nBugfix\n   * Fix potential undefined behaviour in Camellia.\n   * Fix memory leaks in PKCS#5 and PKCS#12.\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Fix bug in MPI/bignum on s390/s390x (reported by Dan Hor\u00e1k) (introduced\n     in 1.2.12).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * Forbid repeated extensions in X.509 certificates.\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain (default = 8).\n= Version 1.2.12 released 2014-10-24\n\nSecurity\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate).\n     (Found using Codenomicon Defensics.)\n\nBugfix\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n\nChanges\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n\n= Version 1.2.11 released 2014-07-11\nFeatures\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is optional (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nBugfix\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * crypt_and_hash app checks MAC before final decryption\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n   * Fix ASM format in bn_mul.h\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * Fix bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Improve interoperability by not writing extension length in ClientHello\n     when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n\n= Version 1.2.10 released 2013-10-07\nChanges\n   * Changed RSA blinding to a slower but thread-safe version\n\nBugfix\n   * Fixed memory leak in RSA as a result of introduction of blinding\n   * Fixed ssl_pkcs11_decrypt() prototype\n   * Fixed MSVC project files\n\n= Version 1.2.9 released 2013-10-01\nChanges\n   * x509_verify() now case insensitive for cn (RFC 6125 6.4)\n\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks (found by Remi Gacogne)\n   * Minor fixes\n\nSecurity\n   * Fixed potential heap buffer overflow on large hostname setting\n   * Fixed potential negative value misinterpretation in load_file()\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n= Version 1.2.8 released 2013-06-19\nFeatures\n   * Parsing of PKCS#8 encrypted private key files\n   * PKCS#12 PBE and derivation functions\n   * Centralized module option values in config.h to allow user-defined\n     settings without editing header files by using POLARSSL_CONFIG_OPTIONS\n\nChanges\n   * HAVEGE random generator disabled by default\n   * Internally split up x509parse_key() into a (PEM) handler function\n     and specific DER parser functions for the PKCS#1 and unencrypted\n     PKCS#8 private key formats\n   * Added mechanism to provide alternative implementations for all\n     symmetric cipher and hash algorithms (e.g. POLARSSL_AES_ALT in\n     config.h)\n   * PKCS#5 module added. Moved PBKDF2 functionality inside and deprecated\n     old PBKDF2 module\n\nBugfix\n   * Secure renegotiation extension should only be sent in case client\n     supports secure renegotiation\n   * Fixed offset for cert_type list in ssl_parse_certificate_request()\n   * Fixed const correctness issues that have no impact on the ABI\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * x509parse_crtpath() is now reentrant and uses more portable stat()\n   * Fixed bignum.c and bn_mul.h to support Thumb2 and LLVM compiler\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.2.7 released 2013-04-13\nFeatures\n   * Ability to specify allowed ciphersuites based on the protocol version.\n\nChanges\n   * Default Blowfish keysize is now 128-bits\n   * Test suites made smaller to accommodate Raspberry Pi\n\nBugfix\n   * Fix for MPI assembly for ARM\n   * GCM adapted to support sizes > 2^29\n\n= Version 1.2.6 released 2013-03-11\nBugfix\n   * Fixed memory leak in ssl_free() and ssl_reset() for active session\n   * Corrected GCM counter incrementation to use only 32-bits instead of\n     128-bits (found by Yawning Angel)\n   * Fixes for 64-bit compilation with MS Visual Studio\n   * Fixed net_bind() for specified IP addresses on little endian systems\n   * Fixed assembly code for ARM (Thumb and regular) for some compilers\n\nChanges\n   * Internally split up rsa_pkcs1_encrypt(), rsa_pkcs1_decrypt(),\n     rsa_pkcs1_sign() and rsa_pkcs1_verify() to separate PKCS#1 v1.5 and\n     PKCS#1 v2.1 functions\n   * Added support for custom labels when using rsa_rsaes_oaep_encrypt()\n     or rsa_rsaes_oaep_decrypt()\n   * Re-added handling for SSLv2 Client Hello when the define\n     POLARSSL_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO is set\n   * The SSL session cache module (ssl_cache) now also retains peer_cert\n     information (not the entire chain)\n\nSecurity\n   * Removed further timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.2.5 released 2013-02-02\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n   * Sending of security-relevant alert messages that do not break\n     interoperability can be switched on/off with the flag\n     POLARSSL_SSL_ALL_ALERT_MESSAGES\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf() due to badly formatted padding\n\n= Version 1.2.4 released 2013-01-25\nChanges\n   * More advanced SSL ciphersuite representation and moved to more dynamic\n     SSL core\n   * Added ssl_handshake_step() to allow single stepping the handshake process\n\nBugfix\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle future version properly in ssl_write_certificate_request()\n   * Correctly handle CertificateRequest message in client for <= TLS 1.1\n     without DN list\n\n= Version 1.2.3 released 2012-11-26\nBugfix\n   * Server not always sending correct CertificateRequest message\n\n= Version 1.2.2 released 2012-11-24\nChanges\n   * Added p_hw_data to ssl_context for context specific hardware acceleration\n     data\n   * During verify trust-CA is only checked for expiration and CRL presence\n\nBugfixes\n   * Fixed client authentication compatibility\n   * Fixed dependency on POLARSSL_SHA4_C in SSL modules\n\n= Version 1.2.1 released 2012-11-20\nChanges\n   * Depth that the certificate verify callback receives is now numbered\n     bottom-up (Peer cert depth is 0)\n\nBugfixes\n   * Fixes for MSVC6\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n\n= Version 1.2.0 released 2012-10-31\nFeatures\n   * Added support for NULL cipher (POLARSSL_CIPHER_NULL_CIPHER) and weak\n     ciphersuites (POLARSSL_ENABLE_WEAK_CIPHERSUITES). They are disabled by\n     default!\n   * Added support for wildcard certificates\n   * Added support for multi-domain certificates through the X509 Subject\n     Alternative Name extension\n   * Added preliminary ASN.1 buffer writing support\n   * Added preliminary X509 Certificate Request writing support\n   * Added key_app_writer example application\n   * Added cert_req example application\n   * Added base Galois Counter Mode (GCM) for AES\n   * Added TLS 1.2 support (RFC 5246)\n   * Added GCM suites to TLS 1.2 (RFC 5288)\n   * Added commandline error code convertor (util/strerror)\n   * Added support for Hardware Acceleration hooking in SSL/TLS\n   * Added OpenSSL / PolarSSL compatibility script (tests/compat.sh) and\n     example application (programs/ssl/o_p_test) (requires OpenSSL)\n   * Added X509 CA Path support\n   * Added Thumb assembly optimizations\n   * Added DEFLATE compression support as per RFC3749 (requires zlib)\n   * Added blowfish algorithm (Generic and cipher layer)\n   * Added PKCS#5 PBKDF2 key derivation function\n   * Added Secure Renegotiation (RFC 5746)\n   * Added predefined DHM groups from RFC 5114\n   * Added simple SSL session cache implementation\n   * Added ServerName extension parsing (SNI) at server side\n   * Added option to add minimum accepted SSL/TLS protocol version\n\nChanges\n   * Removed redundant POLARSSL_DEBUG_MSG define\n   * AES code only check for Padlock once\n   * Fixed const-correctness mpi_get_bit()\n   * Documentation for mpi_lsb() and mpi_msb()\n   * Moved out_msg to out_hdr + 32 to support hardware acceleration\n   * Changed certificate verify behaviour to comply with RFC 6125 section 6.3\n     to not match CN if subjectAltName extension is present (Closes ticket #56)\n   * Cipher layer cipher_mode_t POLARSSL_MODE_CFB128 is renamed to\n     POLARSSL_MODE_CFB, to also handle different block size CFB modes.\n   * Removed handling for SSLv2 Client Hello (as per RFC 5246 recommendation)\n   * Revamped session resumption handling\n   * Generalized external private key implementation handling (like PKCS#11)\n     in SSL/TLS\n   * Revamped x509_verify() and the SSL f_vrfy callback implementations\n   * Moved from unsigned long to fixed width uint32_t types throughout code\n   * Renamed ciphersuites naming scheme to IANA reserved names\n\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Handle empty certificate subject names\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover (found by Ruslan Yushchenko)\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * Fixed MPI assembly for SPARC64 platform\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.8 released on 2013-10-01\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks\n\nSecurity\n   * Potential buffer-overflow for ssl_read_record() (independently found by\n     both TrustInSoft and Paul Brodeur of Leviathan Security Group)\n   * Potential negative value misinterpretation in load_file()\n   * Potential heap buffer overflow on large hostname setting\n\n= Version 1.1.7 released on 2013-06-19\nChanges\n   * HAVEGE random generator disabled by default\n\nBugfix\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.1.6 released on 2013-03-11\nBugfix\n   * Fixed net_bind() for specified IP addresses on little endian systems\n\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.1.5 released on 2013-01-16\nBugfix\n   * Fixed MPI assembly for SPARC64 platform\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Fixes for MSVC6\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.4 released on 2012-05-31\nBugfix\n   * Correctly handle empty SSL/TLS packets (Found by James Yonan)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n\n= Version 1.1.3 released on 2012-04-29\nBugfix\n   * Fixed random MPI generation to not generate more size than requested.\n\n= Version 1.1.2 released on 2012-04-26\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n\nSecurity\n   * Fixed potential memory corruption on miscrafted client messages (found by\n     Frama-C team at CEA LIST)\n   * Fixed generation of DHM parameters to correct length (found by Ruslan\n     Yushchenko)\n\n= Version 1.1.1 released on 2012-01-23\nBugfix\n   * Check for failed malloc() in ssl_set_hostname() and x509_get_entries()\n     (Closes ticket #47, found by Hugo Leisink)\n   * Fixed issues with Intel compiler on 64-bit systems (Closes ticket #50)\n   * Fixed multiple compiler warnings for VS6 and armcc\n   * Fixed bug in CTR_CRBG selftest\n\n= Version 1.1.0 released on 2011-12-22\nFeatures\n   * Added ssl_session_reset() to allow better multi-connection pools of\n     SSL contexts without needing to set all non-connection-specific\n     data and pointers again. Adapted ssl_server to use this functionality.\n   * Added ssl_set_max_version() to allow clients to offer a lower maximum\n     supported version to a server to help buggy server implementations.\n     (Closes ticket #36)\n   * Added cipher_get_cipher_mode() and cipher_get_cipher_operation()\n     introspection functions (Closes ticket #40)\n   * Added CTR_DRBG based on AES-256-CTR (NIST SP 800-90) random generator\n   * Added a generic entropy accumulator that provides support for adding\n     custom entropy sources and added some generic and platform dependent\n     entropy sources\n\nChanges\n   * Documentation for AES and Camellia in modes CTR and CFB128 clarified.\n   * Fixed rsa_encrypt and rsa_decrypt examples to use public key for\n     encryption and private key for decryption. (Closes ticket #34)\n   * Inceased maximum size of ASN1 length reads to 32-bits.\n   * Added an EXPLICIT tag number parameter to x509_get_ext()\n   * Added a separate CRL entry extension parsing function\n   * Separated the ASN.1 parsing code from the X.509 specific parsing code.\n     So now there is a module that is controlled with POLARSSL_ASN1_PARSE_C.\n   * Changed the defined key-length of DES ciphers in cipher.h to include the\n     parity bits, to prevent mistakes in copying data. (Closes ticket #33)\n   * Loads of minimal changes to better support WINCE as a build target\n     (Credits go to Marco Lizza)\n   * Added POLARSSL_MPI_WINDOW_SIZE definition to allow easier time to memory\n     trade-off\n   * Introduced POLARSSL_MPI_MAX_SIZE and POLARSSL_MPI_MAX_BITS for MPI size\n     management (Closes ticket #44)\n   * Changed the used random function pointer to more flexible format. Renamed\n     havege_rand() to havege_random() to prevent mistakes. Lots of changes as\n     a consequence in library code and programs\n   * Moved all examples programs to use the new entropy and CTR_DRBG\n   * Added permissive certificate parsing to x509parse_crt() and\n     x509parse_crtfile(). With permissive parsing the parsing does not stop on\n     encountering a parse-error. Beware that the meaning of return values has\n     changed!\n   * All error codes are now negative. Even on mermory failures and IO errors.\n\nBugfix\n   * Fixed faulty HMAC-MD2 implementation. Found by dibac. (Closes\n     ticket #37)\n   * Fixed a bug where the CRL parser expected an EXPLICIT ASN.1 tag\n     before version numbers\n   * Allowed X509 key usage parsing to accept 4 byte values instead of the\n     standard 1 byte version sometimes used by Microsoft. (Closes ticket #38)\n   * Fixed incorrect behaviour in case of RSASSA-PSS with a salt length\n     smaller than the hash length. (Closes ticket #41)\n   * If certificate serial is longer than 32 octets, serial number is now\n     appended with '....' after first 28 octets\n   * Improved build support for s390x and sparc64 in bignum.h\n   * Fixed MS Visual C++ name clash with int64 in sha4.h\n   * Corrected removal of leading \"00:\" in printing serial numbers in\n     certificates and CRLs\n\n= Version 1.0.0 released on 2011-07-27\nFeatures\n   * Expanded cipher layer with support for CFB128 and CTR mode\n   * Added rsa_encrypt and rsa_decrypt simple example programs.\n\nChanges\n   * The generic cipher and message digest layer now have normal error\n     codes instead of integers\n\nBugfix\n   * Undid faulty bug fix in ssl_write() when flushing old data (Ticket\n     #18)\n\n= Version 0.99-pre5 released on 2011-05-26\nFeatures\n   * Added additional Cipher Block Modes to symmetric ciphers\n     (AES CTR, Camellia CTR, XTEA CBC) including the option to\n     enable and disable individual modes when needed\n   * Functions requiring File System functions can now be disabled\n     by undefining POLARSSL_FS_IO\n   * A error_strerror function() has been added to translate between\n     error codes and their description.\n   * Added mpi_get_bit() and mpi_set_bit() individual bit setter/getter\n     functions.\n   * Added ssl_mail_client and ssl_fork_server as example programs.\n\nChanges\n   * Major argument / variable rewrite. Introduced use of size_t\n     instead of int for buffer lengths and loop variables for\n     better unsigned / signed use. Renamed internal bigint types\n     t_int and t_dbl to t_uint and t_udbl in the process\n   * mpi_init() and mpi_free() now only accept a single MPI\n     argument and do not accept variable argument lists anymore.\n   * The error codes have been remapped and combining error codes\n     is now done with a PLUS instead of an OR as error codes\n     used are negative.\n   * Changed behaviour of net_read(), ssl_fetch_input() and ssl_recv().\n     net_recv() now returns 0 on EOF instead of\n     POLARSSL_ERR_NET_CONN_RESET. ssl_fetch_input() returns\n     POLARSSL_ERR_SSL_CONN_EOF on an EOF from its f_recv() function.\n     ssl_read() returns 0 if a POLARSSL_ERR_SSL_CONN_EOF is received\n     after the handshake.\n   * Network functions now return POLARSSL_ERR_NET_WANT_READ or\n     POLARSSL_ERR_NET_WANT_WRITE instead of the ambiguous\n     POLARSSL_ERR_NET_TRY_AGAIN\n\n= Version 0.99-pre4 released on 2011-04-01\nFeatures\n   * Added support for PKCS#1 v2.1 encoding and thus support\n     for the RSAES-OAEP and RSASSA-PSS operations.\n   * Reading of Public Key files incorporated into default x509\n     functionality as well.\n   * Added mpi_fill_random() for centralized filling of big numbers\n     with random data (Fixed ticket #10)\n\nChanges\n   * Debug print of MPI now removes leading zero octets and\n     displays actual bit size of the value.\n   * x509parse_key() (and as a consequence x509parse_keyfile())\n     does not zeroize memory in advance anymore. Use rsa_init()\n     before parsing a key or keyfile!\n\nBugfix\n   * Debug output of MPI's now the same independent of underlying\n     platform (32-bit / 64-bit) (Fixes ticket #19, found by Mads\n     Kiilerich and Mihai Militaru)\n   * Fixed bug in ssl_write() when flushing old data (Fixed ticket\n     #18, found by Nikolay Epifanov)\n   * Fixed proper handling of RSASSA-PSS verification with variable\n     length salt lengths\n\n= Version 0.99-pre3 released on 2011-02-28\nThis release replaces version 0.99-pre2 which had possible copyright issues.\nFeatures\n   * Parsing PEM private keys encrypted with DES and AES\n     are now supported as well (Fixes ticket #5)\n   * Added crl_app program to allow easy reading and\n     printing of X509 CRLs from file\n\nChanges\n   * Parsing of PEM files moved to separate module (Fixes\n     ticket #13). Also possible to remove PEM support for\n     systems only using DER encoding\n\nBugfixes\n   * Corrected parsing of UTCTime dates before 1990 and\n     after 1950\n   * Support more exotic OID's when parsing certificates\n     (found by Mads Kiilerich)\n   * Support more exotic name representations when parsing\n     certificates (found by Mads Kiilerich)\n   * Replaced the expired test certificates\n   * Do not bail out if no client certificate specified. Try\n     to negotiate anonymous connection (Fixes ticket #12,\n     found by Boris Krasnovskiy)\n\nSecurity fixes\n   * Fixed a possible Man-in-the-Middle attack on the\n     Diffie Hellman key exchange (thanks to Larry Highsmith,\n     Subreption LLC)\n\n= Version 0.99-pre1 released on 2011-01-30\nFeatures\nNote: Most of these features have been donated by Fox-IT\n   * Added Doxygen source code documentation parts\n   * Added reading of DHM context from memory and file\n   * Improved X509 certificate parsing to include extended\n     certificate fields, including Key Usage\n   * Improved certificate verification and verification\n     against the available CRLs\n   * Detection for DES weak keys and parity bits added\n   * Improvements to support integration in other\n     applications:\n       + Added generic message digest and cipher wrapper\n       + Improved information about current capabilities,\n         status, objects and configuration\n       + Added verification callback on certificate chain\n         verification to allow external blacklisting\n       + Additional example programs to show usage\n   * Added support for PKCS#11 through the use of the\n     libpkcs11-helper library\n\nChanges\n   * x509parse_time_expired() checks time in addition to\n     the existing date check\n   * The ciphers member of ssl_context and the cipher member\n     of ssl_session have been renamed to ciphersuites and\n     ciphersuite respectively. This clarifies the difference\n     with the generic cipher layer and is better naming\n     altogether\n\n= Version 0.14.0 released on 2010-08-16\nFeatures\n   * Added support for SSL_EDH_RSA_AES_128_SHA and\n     SSL_EDH_RSA_CAMELLIA_128_SHA ciphersuites\n   * Added compile-time and run-time version information\n   * Expanded ssl_client2 arguments for more flexibility\n   * Added support for TLS v1.1\n\nChanges\n   * Made Makefile cleaner\n   * Removed dependency on rand() in rsa_pkcs1_encrypt().\n     Now using random fuction provided to function and\n     changed the prototype of rsa_pkcs1_encrypt(),\n     rsa_init() and rsa_gen_key().\n   * Some SSL defines were renamed in order to avoid\n     future confusion\n\nBug fixes\n   * Fixed CMake out of source build for tests (found by\n     kkert)\n   * rsa_check_private() now supports PKCS1v2 keys as well\n   * Fixed deadlock in rsa_pkcs1_encrypt() on failing random\n     generator\n\n= Version 0.13.1 released on 2010-03-24\nBug fixes\n   * Fixed Makefile in library that was mistakenly merged\n   * Added missing const string fixes\n\n= Version 0.13.0 released on 2010-03-21\nFeatures\n   * Added option parsing for host and port selection to\n     ssl_client2\n   * Added support for GeneralizedTime in X509 parsing\n   * Added cert_app program to allow easy reading and\n     printing of X509 certificates from file or SSL\n     connection.\n\nChanges\n   * Added const correctness for main code base\n   * X509 signature algorithm determination is now\n     in a function to allow easy future expansion\n   * Changed symmetric cipher functions to\n     identical interface (returning int result values)\n   * Changed ARC4 to use separate input/output buffer\n   * Added reset function for HMAC context as speed-up\n     for specific use-cases\n\nBug fixes\n   * Fixed bug resulting in failure to send the last\n     certificate in the chain in ssl_write_certificate() and\n     ssl_write_certificate_request() (found by fatbob)\n   * Added small fixes for compiler warnings on a Mac\n     (found by Frank de Brabander)\n   * Fixed algorithmic bug in mpi_is_prime() (found by\n     Smbat Tonoyan)\n\n= Version 0.12.1 released on 2009-10-04\nChanges\n   * Coverage test definitions now support 'depends_on'\n     tagging system.\n   * Tests requiring specific hashing algorithms now honor\n     the defines.\n\nBug fixes\n   * Changed typo in #ifdef in x509parse.c (found\n     by Eduardo)\n\n= Version 0.12.0 released on 2009-07-28\nFeatures\n   * Added CMake makefiles as alternative to regular Makefiles.\n   * Added preliminary Code Coverage tests for AES, ARC4,\n     Base64, MPI, SHA-family, MD-family, HMAC-SHA-family,\n     Camellia, DES, 3-DES, RSA PKCS#1, XTEA, Diffie-Hellman\n     and X509parse.\n\nChanges\n   * Error codes are not (necessarily) negative. Keep\n     this is mind when checking for errors.\n   * RSA_RAW renamed to SIG_RSA_RAW for consistency.\n   * Fixed typo in name of POLARSSL_ERR_RSA_OUTPUT_TOO_LARGE.\n   * Changed interface for AES and Camellia setkey functions\n     to indicate invalid key lengths.\n\nBug fixes\n   * Fixed include location of endian.h on FreeBSD (found by\n     Gabriel)\n   * Fixed include location of endian.h and name clash on\n     Apples (found by Martin van Hensbergen)\n   * Fixed HMAC-MD2 by modifying md2_starts(), so that the\n     required HMAC ipad and opad variables are not cleared.\n     (found by code coverage tests)\n   * Prevented use of long long in bignum if\n     POLARSSL_HAVE_LONGLONG not defined (found by Giles\n     Bathgate).\n   * Fixed incorrect handling of negative strings in\n     mpi_read_string() (found by code coverage tests).\n   * Fixed segfault on handling empty rsa_context in\n     rsa_check_pubkey() and rsa_check_privkey() (found by\n     code coverage tests).\n   * Fixed incorrect handling of one single negative input\n     value in mpi_add_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_sub_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_mod_mpi() and mpi_mod_int(). Resulting\n     change also affects mpi_write_string() (found by code\n     coverage tests).\n   * Corrected is_prime() results for 0, 1 and 2 (found by\n     code coverage tests).\n   * Fixed Camellia and XTEA for 64-bit Windows systems.\n\n= Version 0.11.1 released on 2009-05-17\n   * Fixed missing functionality for SHA-224, SHA-256, SHA384,\n     SHA-512 in rsa_pkcs1_sign()\n\n= Version 0.11.0 released on 2009-05-03\n   * Fixed a bug in mpi_gcd() so that it also works when both\n     input numbers are even and added testcases to check\n     (found by Pierre Habouzit).\n   * Added support for SHA-224, SHA-256, SHA-384 and SHA-512\n     one way hash functions with the PKCS#1 v1.5 signing and\n     verification.\n   * Fixed minor bug regarding mpi_gcd located within the\n     POLARSSL_GENPRIME block.\n   * Fixed minor memory leak in x509parse_crt() and added better\n     handling of 'full' certificate chains (found by Mathias\n     Olsson).\n   * Centralized file opening and reading for x509 files into\n     load_file()\n   * Made definition of net_htons() endian-clean for big endian\n     systems (Found by Gernot).\n   * Undefining POLARSSL_HAVE_ASM now also handles prevents asm in\n     padlock and timing code.\n   * Fixed an off-by-one buffer allocation in ssl_set_hostname()\n     responsible for crashes and unwanted behaviour.\n   * Added support for Certificate Revocation List (CRL) parsing.\n   * Added support for CRL revocation to x509parse_verify() and\n     SSL/TLS code.\n   * Fixed compatibility of XTEA and Camellia on a 64-bit system\n     (found by Felix von Leitner).\n\n= Version 0.10.0 released on 2009-01-12\n   * Migrated XySSL to PolarSSL\n   * Added XTEA symmetric cipher\n   * Added Camellia symmetric cipher\n   * Added support for ciphersuites: SSL_RSA_CAMELLIA_128_SHA,\n     SSL_RSA_CAMELLIA_256_SHA and SSL_EDH_RSA_CAMELLIA_256_SHA\n   * Fixed dangerous bug that can cause a heap overflow in\n     rsa_pkcs1_decrypt (found by Christophe Devine)\n\n================================================================\nXySSL ChangeLog\n\n= Version 0.9 released on 2008-03-16\n\n    * Added support for ciphersuite: SSL_RSA_AES_128_SHA\n    * Enabled support for large files by default in aescrypt2.c\n    * Preliminary openssl wrapper contributed by David Barrett\n    * Fixed a bug in ssl_write() that caused the same payload to\n      be sent twice in non-blocking mode when send returns EAGAIN\n    * Fixed ssl_parse_client_hello(): session id and challenge must\n      not be swapped in the SSLv2 ClientHello (found by Greg Robson)\n    * Added user-defined callback debug function (Krystian Kolodziej)\n    * Before freeing a certificate, properly zero out all cert. data\n    * Fixed the \"mode\" parameter so that encryption/decryption are\n      not swapped on PadLock; also fixed compilation on older versions\n      of gcc (bug reported by David Barrett)\n    * Correctly handle the case in padlock_xcryptcbc() when input or\n      output data is non-aligned by falling back to the software\n      implementation, as VIA Nehemiah cannot handle non-aligned buffers\n    * Fixed a memory leak in x509parse_crt() which was reported by Greg\n      Robson-Garth; some x509write.c fixes by Pascal Vizeli, thanks to\n      Matthew Page who reported several bugs\n    * Fixed x509_get_ext() to accept some rare certificates which have\n      an INTEGER instead of a BOOLEAN for BasicConstraints::cA.\n    * Added support on the client side for the TLS \"hostname\" extension\n      (patch contributed by David Patino)\n    * Make x509parse_verify() return BADCERT_CN_MISMATCH when an empty\n      string is passed as the CN (bug reported by spoofy)\n    * Added an option to enable/disable the BN assembly code\n    * Updated rsa_check_privkey() to verify that (D*E) = 1 % (P-1)*(Q-1)\n    * Disabled obsolete hash functions by default (MD2, MD4); updated\n      selftest and benchmark to not test ciphers that have been disabled\n    * Updated x509parse_cert_info() to correctly display byte 0 of the\n      serial number, setup correct server port in the ssl client example\n    * Fixed a critical denial-of-service with X.509 cert. verification:\n      peer may cause xyssl to loop indefinitely by sending a certificate\n      for which the RSA signature check fails (bug reported by Benoit)\n    * Added test vectors for: AES-CBC, AES-CFB, DES-CBC and 3DES-CBC,\n      HMAC-MD5, HMAC-SHA1, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\n    * Fixed HMAC-SHA-384 and HMAC-SHA-512 (thanks to Josh Sinykin)\n    * Modified ssl_parse_client_key_exchange() to protect against\n      Daniel Bleichenbacher attack on PKCS#1 v1.5 padding, as well\n      as the Klima-Pokorny-Rosa extension of Bleichenbacher's attack\n    * Updated rsa_gen_key() so that ctx->N is always nbits in size\n    * Fixed assembly PPC compilation errors on Mac OS X, thanks to\n      David Barrett and Dusan Semen\n\n= Version 0.8 released on 2007-10-20\n\n    * Modified the HMAC functions to handle keys larger\n      than 64 bytes, thanks to Stephane Desneux and gary ng\n    * Fixed ssl_read_record() to properly update the handshake\n      message digests, which fixes IE6/IE7 client authentication\n    * Cleaned up the XYSSL* #defines, suggested by Azriel Fasten\n    * Fixed net_recv(), thanks to Lorenz Schori and Egon Kocjan\n    * Added user-defined callbacks for handling I/O and sessions\n    * Added lots of debugging output in the SSL/TLS functions\n    * Added preliminary X.509 cert. writing by Pascal Vizeli\n    * Added preliminary support for the VIA PadLock routines\n    * Added AES-CFB mode of operation, contributed by chmike\n    * Added an SSL/TLS stress testing program (ssl_test.c)\n    * Updated the RSA PKCS#1 code to allow choosing between\n      RSA_PUBLIC and RSA_PRIVATE, as suggested by David Barrett\n    * Updated ssl_read() to skip 0-length records from OpenSSL\n    * Fixed the make install target to comply with *BSD make\n    * Fixed a bug in mpi_read_binary() on 64-bit platforms\n    * mpi_is_prime() speedups, thanks to Kevin McLaughlin\n    * Fixed a long standing memory leak in mpi_is_prime()\n    * Replaced realloc with malloc in mpi_grow(), and set\n      the sign of zero as positive in mpi_init() (reported\n      by Jonathan M. McCune)\n\n= Version 0.7 released on 2007-07-07\n\n    * Added support for the MicroBlaze soft-core processor\n    * Fixed a bug in ssl_tls.c which sometimes prevented SSL\n      connections from being established with non-blocking I/O\n    * Fixed a couple bugs in the VS6 and UNIX Makefiles\n    * Fixed the \"PIC register ebx clobbered in asm\" bug\n    * Added HMAC starts/update/finish support functions\n    * Added the SHA-224, SHA-384 and SHA-512 hash functions\n    * Fixed the net_set_*block routines, thanks to Andreas\n    * Added a few demonstration programs: md5sum, sha1sum,\n      dh_client, dh_server, rsa_genkey, rsa_sign, rsa_verify\n    * Added new bignum import and export helper functions\n    * Rewrote README.txt in program/ssl/ca to better explain\n      how to create a test PKI\n\n= Version 0.6 released on 2007-04-01\n\n    * Ciphers used in SSL/TLS can now be disabled at compile\n      time, to reduce the memory footprint on embedded systems\n    * Added multiply assembly code for the TriCore and modified\n      havege_struct for this processor, thanks to David Pati\u00f1o\n    * Added multiply assembly code for 64-bit PowerPCs,\n      thanks to Peking University and the OSU Open Source Lab\n    * Added experimental support of Quantum Cryptography\n    * Added support for autoconf, contributed by Arnaud Cornet\n    * Fixed \"long long\" compilation issues on IA-64 and PPC64\n    * Fixed a bug introduced in xyssl-0.5/timing.c: hardclock\n      was not being correctly defined on ARM and MIPS\n\n= Version 0.5 released on 2007-03-01\n\n    * Added multiply assembly code for SPARC and Alpha\n    * Added (beta) support for non-blocking I/O operations\n    * Implemented session resuming and client authentication\n    * Fixed some portability issues on WinCE, MINIX 3, Plan9\n      (thanks to Benjamin Newman), HP-UX, FreeBSD and Solaris\n    * Improved the performance of the EDH key exchange\n    * Fixed a bug that caused valid packets with a payload\n      size of 16384 bytes to be rejected\n\n= Version 0.4 released on 2007-02-01\n\n    * Added support for Ephemeral Diffie-Hellman key exchange\n    * Added multiply asm code for SSE2, ARM, PPC, MIPS and M68K\n    * Various improvement to the modular exponentiation code\n    * Rewrote the headers to generate the API docs with doxygen\n    * Fixed a bug in ssl_encrypt_buf (incorrect padding was\n      generated) and in ssl_parse_client_hello (max. client\n      version was not properly set), thanks to Didier Rebeix\n    * Fixed another bug in ssl_parse_client_hello: clients with\n      cipherlists larger than 96 bytes were incorrectly rejected\n    * Fixed a couple memory leak in x509_read.c\n\n= Version 0.3 released on 2007-01-01\n\n    * Added server-side SSLv3 and TLSv1.0 support\n    * Multiple fixes to enhance the compatibility with g++,\n      thanks to Xos\u00e9 Ant\u00f3n Otero Ferreira\n    * Fixed a bug in the CBC code, thanks to dowst; also,\n      the bignum code is no longer dependent on long long\n    * Updated rsa_pkcs1_sign to handle arbitrary large inputs\n    * Updated timing.c for improved compatibility with i386\n      and 486 processors, thanks to Arnaud Cornet\n\n= Version 0.2 released on 2006-12-01\n\n    * Updated timing.c to support ARM and MIPS arch\n    * Updated the MPI code to support 8086 on MSVC 1.5\n    * Added the copyright notice at the top of havege.h\n    * Fixed a bug in sha2_hmac, thanks to newsoft/Wenfang Zhang\n    * Fixed a bug reported by Adrian R\u00fcegsegger in x509_read_key\n    * Fixed a bug reported by Torsten Lauter in ssl_read_record\n    * Fixed a bug in rsa_check_privkey that would wrongly cause\n      valid RSA keys to be dismissed (thanks to oldwolf)\n    * Fixed a bug in mpi_is_prime that caused some primes to fail\n      the Miller-Rabin primality test\n\n    I'd also like to thank Youn\u00e8s Hafri for the CRUX linux port,\n    Khalil Petit who added XySSL into pkgsrc and Arnaud Cornet\n    who maintains the Debian package :-)\n\n= Version 0.1 released on 2006-11-01\n", "/**\n * \\file config.h\n *\n * \\brief Configuration options (set of defines)\n *\n *  This set of compile-time options may be used to enable\n *  or disable features selectively, and reduce the global\n *  memory footprint.\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_CONFIG_H\n#define MBEDTLS_CONFIG_H\n\n#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)\n#define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n\n/**\n * \\name SECTION: System support\n *\n * This section sets system specific settings.\n * \\{\n */\n\n/**\n * \\def MBEDTLS_HAVE_ASM\n *\n * The compiler has support for asm().\n *\n * Requires support for asm() in compiler.\n *\n * Used in:\n *      library/timing.c\n *      library/padlock.c\n *      include/mbedtls/bn_mul.h\n *\n * Comment to disable the use of assembly code.\n */\n#define MBEDTLS_HAVE_ASM\n\n/**\n * \\def MBEDTLS_NO_UDBL_DIVISION\n *\n * The platform lacks support for double-width integer division (64-bit\n * division on a 32-bit platform, 128-bit division on a 64-bit platform).\n *\n * Used in:\n *      include/mbedtls/bignum.h\n *      library/bignum.c\n *\n * The bignum code uses double-width division to speed up some operations.\n * Double-width division is often implemented in software that needs to\n * be linked with the program. The presence of a double-width integer\n * type is usually detected automatically through preprocessor macros,\n * but the automatic detection cannot know whether the code needs to\n * and can be linked with an implementation of division for that type.\n * By default division is assumed to be usable if the type is present.\n * Uncomment this option to prevent the use of double-width division.\n *\n * Note that division for the native integer type is always required.\n * Furthermore, a 64-bit type is always required even on a 32-bit\n * platform, but it need not support multiplication or division. In some\n * cases it is also desirable to disable some double-width operations. For\n * example, if double-width division is implemented in software, disabling\n * it can reduce code size in some embedded targets.\n */\n//#define MBEDTLS_NO_UDBL_DIVISION\n\n/**\n * \\def MBEDTLS_HAVE_SSE2\n *\n * CPU supports SSE2 instruction set.\n *\n * Uncomment if the CPU supports SSE2 (IA-32 specific).\n */\n//#define MBEDTLS_HAVE_SSE2\n\n/**\n * \\def MBEDTLS_HAVE_TIME\n *\n * System has time.h and time().\n * The time does not need to be correct, only time differences are used,\n * by contrast with MBEDTLS_HAVE_TIME_DATE\n *\n * Defining MBEDTLS_HAVE_TIME allows you to specify MBEDTLS_PLATFORM_TIME_ALT,\n * MBEDTLS_PLATFORM_TIME_MACRO, MBEDTLS_PLATFORM_TIME_TYPE_MACRO and\n * MBEDTLS_PLATFORM_STD_TIME.\n *\n * Comment if your system does not support time functions\n */\n#define MBEDTLS_HAVE_TIME\n\n/**\n * \\def MBEDTLS_HAVE_TIME_DATE\n *\n * System has time.h and time(), gmtime() and the clock is correct.\n * The time needs to be correct (not necessarily very accurate, but at least\n * the date should be correct). This is used to verify the validity period of\n * X.509 certificates.\n *\n * Comment if your system does not have a correct clock.\n */\n#define MBEDTLS_HAVE_TIME_DATE\n\n/**\n * \\def MBEDTLS_PLATFORM_MEMORY\n *\n * Enable the memory allocation layer.\n *\n * By default mbed TLS uses the system-provided calloc() and free().\n * This allows different allocators (self-implemented or provided) to be\n * provided to the platform abstraction layer.\n *\n * Enabling MBEDTLS_PLATFORM_MEMORY without the\n * MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide\n * \"mbedtls_platform_set_calloc_free()\" allowing you to set an alternative calloc() and\n * free() function pointer at runtime.\n *\n * Enabling MBEDTLS_PLATFORM_MEMORY and specifying\n * MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the\n * alternate function at compile time.\n *\n * Requires: MBEDTLS_PLATFORM_C\n *\n * Enable this layer to allow use of alternative memory allocators.\n */\n//#define MBEDTLS_PLATFORM_MEMORY\n\n/**\n * \\def MBEDTLS_PLATFORM_NO_STD_FUNCTIONS\n *\n * Do not assign standard functions in the platform layer (e.g. calloc() to\n * MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF)\n *\n * This makes sure there are no linking errors on platforms that do not support\n * these functions. You will HAVE to provide alternatives, either at runtime\n * via the platform_set_xxx() functions or at compile time by setting\n * the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a\n * MBEDTLS_PLATFORM_XXX_MACRO.\n *\n * Requires: MBEDTLS_PLATFORM_C\n *\n * Uncomment to prevent default assignment of standard functions in the\n * platform layer.\n */\n//#define MBEDTLS_PLATFORM_NO_STD_FUNCTIONS\n\n/**\n * \\def MBEDTLS_PLATFORM_EXIT_ALT\n *\n * MBEDTLS_PLATFORM_XXX_ALT: Uncomment a macro to let mbed TLS support the\n * function in the platform abstraction layer.\n *\n * Example: In case you uncomment MBEDTLS_PLATFORM_PRINTF_ALT, mbed TLS will\n * provide a function \"mbedtls_platform_set_printf()\" that allows you to set an\n * alternative printf function pointer.\n *\n * All these define require MBEDTLS_PLATFORM_C to be defined!\n *\n * \\note MBEDTLS_PLATFORM_SNPRINTF_ALT is required on Windows;\n * it will be enabled automatically by check_config.h\n *\n * \\warning MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as\n * MBEDTLS_PLATFORM_XXX_MACRO!\n *\n * Requires: MBEDTLS_PLATFORM_TIME_ALT requires MBEDTLS_HAVE_TIME\n *\n * Uncomment a macro to enable alternate implementation of specific base\n * platform function\n */\n//#define MBEDTLS_PLATFORM_EXIT_ALT\n//#define MBEDTLS_PLATFORM_TIME_ALT\n//#define MBEDTLS_PLATFORM_FPRINTF_ALT\n//#define MBEDTLS_PLATFORM_PRINTF_ALT\n//#define MBEDTLS_PLATFORM_SNPRINTF_ALT\n//#define MBEDTLS_PLATFORM_NV_SEED_ALT\n//#define MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT\n\n/**\n * \\def MBEDTLS_DEPRECATED_WARNING\n *\n * Mark deprecated functions so that they generate a warning if used.\n * Functions deprecated in one version will usually be removed in the next\n * version. You can enable this to help you prepare the transition to a new\n * major version by making sure your code is not using these functions.\n *\n * This only works with GCC and Clang. With other compilers, you may want to\n * use MBEDTLS_DEPRECATED_REMOVED\n *\n * Uncomment to get warnings on using deprecated functions.\n */\n//#define MBEDTLS_DEPRECATED_WARNING\n\n/**\n * \\def MBEDTLS_DEPRECATED_REMOVED\n *\n * Remove deprecated functions so that they generate an error if used.\n * Functions deprecated in one version will usually be removed in the next\n * version. You can enable this to help you prepare the transition to a new\n * major version by making sure your code is not using these functions.\n *\n * Uncomment to get errors on using deprecated functions.\n */\n//#define MBEDTLS_DEPRECATED_REMOVED\n\n/* \\} name SECTION: System support */\n\n/**\n * \\name SECTION: mbed TLS feature support\n *\n * This section sets support for features that are or are not needed\n * within the modules that are enabled.\n * \\{\n */\n\n/**\n * \\def MBEDTLS_TIMING_ALT\n *\n * Uncomment to provide your own alternate implementation for mbedtls_timing_hardclock(),\n * mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()\n *\n * Only works if you have MBEDTLS_TIMING_C enabled.\n *\n * You will need to provide a header \"timing_alt.h\" and an implementation at\n * compile time.\n */\n//#define MBEDTLS_TIMING_ALT\n\n/**\n * \\def MBEDTLS_AES_ALT\n *\n * MBEDTLS__MODULE_NAME__ALT: Uncomment a macro to let mbed TLS use your\n * alternate core implementation of a symmetric crypto, an arithmetic or hash\n * module (e.g. platform specific assembly optimized implementations). Keep\n * in mind that the function prototypes should remain the same.\n *\n * This replaces the whole module. If you only want to replace one of the\n * functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags.\n *\n * Example: In case you uncomment MBEDTLS_AES_ALT, mbed TLS will no longer\n * provide the \"struct mbedtls_aes_context\" definition and omit the base\n * function declarations and implementations. \"aes_alt.h\" will be included from\n * \"aes.h\" to include the new function definitions.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * module.\n *\n * \\warning   MD2, MD4, MD5, ARC4, DES and SHA-1 are considered weak and their\n *            use constitutes a security risk. If possible, we recommend\n *            avoiding dependencies on them, and considering stronger message\n *            digests and ciphers instead.\n *\n */\n//#define MBEDTLS_AES_ALT\n//#define MBEDTLS_ARC4_ALT\n//#define MBEDTLS_BLOWFISH_ALT\n//#define MBEDTLS_CAMELLIA_ALT\n//#define MBEDTLS_CCM_ALT\n//#define MBEDTLS_CMAC_ALT\n//#define MBEDTLS_DES_ALT\n//#define MBEDTLS_DHM_ALT\n//#define MBEDTLS_ECJPAKE_ALT\n//#define MBEDTLS_GCM_ALT\n//#define MBEDTLS_MD2_ALT\n//#define MBEDTLS_MD4_ALT\n//#define MBEDTLS_MD5_ALT\n//#define MBEDTLS_RIPEMD160_ALT\n//#define MBEDTLS_RSA_ALT\n//#define MBEDTLS_SHA1_ALT\n//#define MBEDTLS_SHA256_ALT\n//#define MBEDTLS_SHA512_ALT\n//#define MBEDTLS_XTEA_ALT\n/*\n * When replacing the elliptic curve module, pleace consider, that it is\n * implemented with two .c files:\n *      - ecp.c\n *      - ecp_curves.c\n * You can replace them very much like all the other MBEDTLS__MODULE_NAME__ALT\n * macros as described above. The only difference is that you have to make sure\n * that you provide functionality for both .c files.\n */\n//#define MBEDTLS_ECP_ALT\n\n/**\n * \\def MBEDTLS_MD2_PROCESS_ALT\n *\n * MBEDTLS__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use you\n * alternate core implementation of symmetric crypto or hash function. Keep in\n * mind that function prototypes should remain the same.\n *\n * This replaces only one function. The header file from mbed TLS is still\n * used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.\n *\n * Example: In case you uncomment MBEDTLS_SHA256_PROCESS_ALT, mbed TLS will\n * no longer provide the mbedtls_sha1_process() function, but it will still provide\n * the other function (using your mbedtls_sha1_process() function) and the definition\n * of mbedtls_sha1_context, so your implementation of mbedtls_sha1_process must be compatible\n * with this definition.\n *\n * \\note Because of a signature change, the core AES encryption and decryption routines are\n *       currently named mbedtls_aes_internal_encrypt and mbedtls_aes_internal_decrypt,\n *       respectively. When setting up alternative implementations, these functions should\n *       be overridden, but the wrapper functions mbedtls_aes_decrypt and mbedtls_aes_encrypt\n *       must stay untouched.\n *\n * \\note If you use the AES_xxx_ALT macros, then is is recommended to also set\n *       MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES\n *       tables.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * function.\n *\n * \\warning   MD2, MD4, MD5, DES and SHA-1 are considered weak and their use\n *            constitutes a security risk. If possible, we recommend avoiding\n *            dependencies on them, and considering stronger message digests\n *            and ciphers instead.\n *\n */\n//#define MBEDTLS_MD2_PROCESS_ALT\n//#define MBEDTLS_MD4_PROCESS_ALT\n//#define MBEDTLS_MD5_PROCESS_ALT\n//#define MBEDTLS_RIPEMD160_PROCESS_ALT\n//#define MBEDTLS_SHA1_PROCESS_ALT\n//#define MBEDTLS_SHA256_PROCESS_ALT\n//#define MBEDTLS_SHA512_PROCESS_ALT\n//#define MBEDTLS_DES_SETKEY_ALT\n//#define MBEDTLS_DES_CRYPT_ECB_ALT\n//#define MBEDTLS_DES3_CRYPT_ECB_ALT\n//#define MBEDTLS_AES_SETKEY_ENC_ALT\n//#define MBEDTLS_AES_SETKEY_DEC_ALT\n//#define MBEDTLS_AES_ENCRYPT_ALT\n//#define MBEDTLS_AES_DECRYPT_ALT\n//#define MBEDTLS_ECDH_GEN_PUBLIC_ALT\n//#define MBEDTLS_ECDH_COMPUTE_SHARED_ALT\n//#define MBEDTLS_ECDSA_VERIFY_ALT\n//#define MBEDTLS_ECDSA_SIGN_ALT\n//#define MBEDTLS_ECDSA_GENKEY_ALT\n\n/**\n * \\def MBEDTLS_ECP_INTERNAL_ALT\n *\n * Expose a part of the internal interface of the Elliptic Curve Point module.\n *\n * MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your\n * alternative core implementation of elliptic curve arithmetic. Keep in mind\n * that function prototypes should remain the same.\n *\n * This partially replaces one function. The header file from mbed TLS is still\n * used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation\n * is still present and it is used for group structures not supported by the\n * alternative.\n *\n * Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT\n * and implementing the following functions:\n *      unsigned char mbedtls_internal_ecp_grp_capable(\n *          const mbedtls_ecp_group *grp )\n *      int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )\n *      void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )\n * The mbedtls_internal_ecp_grp_capable function should return 1 if the\n * replacement functions implement arithmetic for the given group and 0\n * otherwise.\n * The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are\n * called before and after each point operation and provide an opportunity to\n * implement optimized set up and tear down instructions.\n *\n * Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and\n * MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac\n * function, but will use your mbedtls_internal_ecp_double_jac if the group is\n * supported (your mbedtls_internal_ecp_grp_capable function returns 1 when\n * receives it as an argument). If the group is not supported then the original\n * implementation is used. The other functions and the definition of\n * mbedtls_ecp_group and mbedtls_ecp_point will not change, so your\n * implementation of mbedtls_internal_ecp_double_jac and\n * mbedtls_internal_ecp_grp_capable must be compatible with this definition.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * function.\n */\n/* Required for all the functions in this section */\n//#define MBEDTLS_ECP_INTERNAL_ALT\n/* Support for Weierstrass curves with Jacobi representation */\n//#define MBEDTLS_ECP_RANDOMIZE_JAC_ALT\n//#define MBEDTLS_ECP_ADD_MIXED_ALT\n//#define MBEDTLS_ECP_DOUBLE_JAC_ALT\n//#define MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT\n//#define MBEDTLS_ECP_NORMALIZE_JAC_ALT\n/* Support for curves with Montgomery arithmetic */\n//#define MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT\n//#define MBEDTLS_ECP_RANDOMIZE_MXZ_ALT\n//#define MBEDTLS_ECP_NORMALIZE_MXZ_ALT\n\n/**\n * \\def MBEDTLS_TEST_NULL_ENTROPY\n *\n * Enables testing and use of mbed TLS without any configured entropy sources.\n * This permits use of the library on platforms before an entropy source has\n * been integrated (see for example the MBEDTLS_ENTROPY_HARDWARE_ALT or the\n * MBEDTLS_ENTROPY_NV_SEED switches).\n *\n * WARNING! This switch MUST be disabled in production builds, and is suitable\n * only for development.\n * Enabling the switch negates any security provided by the library.\n *\n * Requires MBEDTLS_ENTROPY_C, MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n *\n */\n//#define MBEDTLS_TEST_NULL_ENTROPY\n\n/**\n * \\def MBEDTLS_ENTROPY_HARDWARE_ALT\n *\n * Uncomment this macro to let mbed TLS use your own implementation of a\n * hardware entropy collector.\n *\n * Your function must be called \\c mbedtls_hardware_poll(), have the same\n * prototype as declared in entropy_poll.h, and accept NULL as first argument.\n *\n * Uncomment to use your own hardware entropy collector.\n */\n//#define MBEDTLS_ENTROPY_HARDWARE_ALT\n\n/**\n * \\def MBEDTLS_AES_ROM_TABLES\n *\n * Store the AES tables in ROM.\n *\n * Uncomment this macro to store the AES tables in ROM.\n */\n//#define MBEDTLS_AES_ROM_TABLES\n\n/**\n * \\def MBEDTLS_CAMELLIA_SMALL_MEMORY\n *\n * Use less ROM for the Camellia implementation (saves about 768 bytes).\n *\n * Uncomment this macro to use less memory for Camellia.\n */\n//#define MBEDTLS_CAMELLIA_SMALL_MEMORY\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CBC\n *\n * Enable Cipher Block Chaining mode (CBC) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CBC\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CFB\n *\n * Enable Cipher Feedback mode (CFB) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CFB\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CTR\n *\n * Enable Counter Block Cipher mode (CTR) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CTR\n\n/**\n * \\def MBEDTLS_CIPHER_NULL_CIPHER\n *\n * Enable NULL cipher.\n * Warning: Only do so when you know what you are doing. This allows for\n * encryption or channels without any security!\n *\n * Requires MBEDTLS_ENABLE_WEAK_CIPHERSUITES as well to enable\n * the following ciphersuites:\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_RSA_WITH_NULL_SHA256\n *      MBEDTLS_TLS_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_RSA_WITH_NULL_MD5\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA\n *\n * Uncomment this macro to enable the NULL cipher and ciphersuites\n */\n//#define MBEDTLS_CIPHER_NULL_CIPHER\n\n/**\n * \\def MBEDTLS_CIPHER_PADDING_PKCS7\n *\n * MBEDTLS_CIPHER_PADDING_XXX: Uncomment or comment macros to add support for\n * specific padding modes in the cipher layer with cipher modes that support\n * padding (e.g. CBC)\n *\n * If you disable all padding modes, only full blocks can be used with CBC.\n *\n * Enable padding modes in the cipher layer.\n */\n#define MBEDTLS_CIPHER_PADDING_PKCS7\n#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS\n#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN\n#define MBEDTLS_CIPHER_PADDING_ZEROS\n\n/**\n * \\def MBEDTLS_ENABLE_WEAK_CIPHERSUITES\n *\n * Enable weak ciphersuites in SSL / TLS.\n * Warning: Only do so when you know what you are doing. This allows for\n * channels with virtually no security at all!\n *\n * This enables the following ciphersuites:\n *      MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA\n *\n * Uncomment this macro to enable weak ciphersuites\n *\n * \\warning   DES is considered a weak cipher and its use constitutes a\n *            security risk. We recommend considering stronger ciphers instead.\n */\n//#define MBEDTLS_ENABLE_WEAK_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_REMOVE_ARC4_CIPHERSUITES\n *\n * Remove RC4 ciphersuites by default in SSL / TLS.\n * This flag removes the ciphersuites based on RC4 from the default list as\n * returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible to\n * enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including them\n * explicitly.\n *\n * Uncomment this macro to remove RC4 ciphersuites by default.\n */\n#define MBEDTLS_REMOVE_ARC4_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_REMOVE_3DES_CIPHERSUITES\n *\n * Remove 3DES ciphersuites by default in SSL / TLS.\n * This flag removes the ciphersuites based on 3DES from the default list as\n * returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible\n * to enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including\n * them explicitly.\n *\n * A man-in-the-browser attacker can recover authentication tokens sent through\n * a TLS connection using a 3DES based cipher suite (see \"On the Practical\n * (In-)Security of 64-bit Block Ciphers\" by Karthikeyan Bhargavan and Ga\u00ebtan\n * Leurent, see https://sweet32.info/SWEET32_CCS16.pdf). If this attack falls\n * in your threat model or you are unsure, then you should keep this option\n * enabled to remove 3DES based cipher suites.\n *\n * Comment this macro to keep 3DES in the default ciphersuite list.\n */\n#define MBEDTLS_REMOVE_3DES_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_ECP_DP_SECP192R1_ENABLED\n *\n * MBEDTLS_ECP_XXXX_ENABLED: Enables specific curves within the Elliptic Curve\n * module.  By default all supported curves are enabled.\n *\n * Comment macros to disable the curve and functions for it\n */\n#define MBEDTLS_ECP_DP_SECP192R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP224R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP256R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP384R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP521R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP192K1_ENABLED\n#define MBEDTLS_ECP_DP_SECP224K1_ENABLED\n#define MBEDTLS_ECP_DP_SECP256K1_ENABLED\n#define MBEDTLS_ECP_DP_BP256R1_ENABLED\n#define MBEDTLS_ECP_DP_BP384R1_ENABLED\n#define MBEDTLS_ECP_DP_BP512R1_ENABLED\n#define MBEDTLS_ECP_DP_CURVE25519_ENABLED\n\n/**\n * \\def MBEDTLS_ECP_NIST_OPTIM\n *\n * Enable specific 'modulo p' routines for each NIST prime.\n * Depending on the prime and architecture, makes operations 4 to 8 times\n * faster on the corresponding curve.\n *\n * Comment this macro to disable NIST curves optimisation.\n */\n#define MBEDTLS_ECP_NIST_OPTIM\n\n/**\n * \\def MBEDTLS_ECDSA_DETERMINISTIC\n *\n * Enable deterministic ECDSA (RFC 6979).\n * Standard ECDSA is \"fragile\" in the sense that lack of entropy when signing\n * may result in a compromise of the long-term signing key. This is avoided by\n * the deterministic variant.\n *\n * Requires: MBEDTLS_HMAC_DRBG_C\n *\n * Comment this macro to disable deterministic ECDSA.\n */\n#define MBEDTLS_ECDSA_DETERMINISTIC\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_PSK_ENABLED\n *\n * Enable the PSK based ciphersuite modes in SSL / TLS.\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED\n *\n * Enable the DHE-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_DHM_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED\n *\n * Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED\n *\n * Enable the RSA-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_RSA_ENABLED\n *\n * Enable the RSA-only based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5\n */\n#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED\n *\n * Enable the DHE-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_DHM_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED\n *\n * Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED\n *\n * Enable the ECDHE-ECDSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_ECDSA_C, MBEDTLS_X509_CRT_PARSE_C,\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED\n *\n * Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED\n *\n * Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED\n *\n * Enable the ECJPAKE based ciphersuite modes in SSL / TLS.\n *\n * \\warning This is currently experimental. EC J-PAKE support is based on the\n * Thread v1.0.0 specification; incompatible changes to the specification\n * might still happen. For this reason, this is disabled by default.\n *\n * Requires: MBEDTLS_ECJPAKE_C\n *           MBEDTLS_SHA256_C\n *           MBEDTLS_ECP_DP_SECP256R1_ENABLED\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8\n */\n//#define MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED\n\n/**\n * \\def MBEDTLS_PK_PARSE_EC_EXTENDED\n *\n * Enhance support for reading EC keys using variants of SEC1 not allowed by\n * RFC 5915 and RFC 5480.\n *\n * Currently this means parsing the SpecifiedECDomain choice of EC\n * parameters (only known groups are supported, not arbitrary domains, to\n * avoid validation issues).\n *\n * Disable if you only need to support RFC 5915 + 5480 key formats.\n */\n#define MBEDTLS_PK_PARSE_EC_EXTENDED\n\n/**\n * \\def MBEDTLS_ERROR_STRERROR_DUMMY\n *\n * Enable a dummy error function to make use of mbedtls_strerror() in\n * third party libraries easier when MBEDTLS_ERROR_C is disabled\n * (no effect when MBEDTLS_ERROR_C is enabled).\n *\n * You can safely disable this if MBEDTLS_ERROR_C is enabled, or if you're\n * not using mbedtls_strerror() or error_strerror() in your application.\n *\n * Disable if you run into name conflicts and want to really remove the\n * mbedtls_strerror()\n */\n#define MBEDTLS_ERROR_STRERROR_DUMMY\n\n/**\n * \\def MBEDTLS_GENPRIME\n *\n * Enable the prime-number generation code.\n *\n * Requires: MBEDTLS_BIGNUM_C\n */\n#define MBEDTLS_GENPRIME\n\n/**\n * \\def MBEDTLS_FS_IO\n *\n * Enable functions that use the filesystem.\n */\n#define MBEDTLS_FS_IO\n\n/**\n * \\def MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n *\n * Do not add default entropy sources. These are the platform specific,\n * mbedtls_timing_hardclock and HAVEGE based poll functions.\n *\n * This is useful to have more control over the added entropy sources in an\n * application.\n *\n * Uncomment this macro to prevent loading of default entropy functions.\n */\n//#define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n\n/**\n * \\def MBEDTLS_NO_PLATFORM_ENTROPY\n *\n * Do not use built-in platform entropy functions.\n * This is useful if your platform does not support\n * standards like the /dev/urandom or Windows CryptoAPI.\n *\n * Uncomment this macro to disable the built-in platform entropy functions.\n */\n//#define MBEDTLS_NO_PLATFORM_ENTROPY\n\n/**\n * \\def MBEDTLS_ENTROPY_FORCE_SHA256\n *\n * Force the entropy accumulator to use a SHA-256 accumulator instead of the\n * default SHA-512 based one (if both are available).\n *\n * Requires: MBEDTLS_SHA256_C\n *\n * On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option\n * if you have performance concerns.\n *\n * This option is only useful if both MBEDTLS_SHA256_C and\n * MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.\n */\n//#define MBEDTLS_ENTROPY_FORCE_SHA256\n\n/**\n * \\def MBEDTLS_ENTROPY_NV_SEED\n *\n * Enable the non-volatile (NV) seed file-based entropy source.\n * (Also enables the NV seed read/write functions in the platform layer)\n *\n * This is crucial (if not required) on systems that do not have a\n * cryptographic entropy source (in hardware or kernel) available.\n *\n * Requires: MBEDTLS_ENTROPY_C, MBEDTLS_PLATFORM_C\n *\n * \\note The read/write functions that are used by the entropy source are\n *       determined in the platform layer, and can be modified at runtime and/or\n *       compile-time depending on the flags (MBEDTLS_PLATFORM_NV_SEED_*) used.\n *\n * \\note If you use the default implementation functions that read a seedfile\n *       with regular fopen(), please make sure you make a seedfile with the\n *       proper name (defined in MBEDTLS_PLATFORM_STD_NV_SEED_FILE) and at\n *       least MBEDTLS_ENTROPY_BLOCK_SIZE bytes in size that can be read from\n *       and written to or you will get an entropy source error! The default\n *       implementation will only use the first MBEDTLS_ENTROPY_BLOCK_SIZE\n *       bytes from the file.\n *\n * \\note The entropy collector will write to the seed file before entropy is\n *       given to an external source, to update it.\n */\n//#define MBEDTLS_ENTROPY_NV_SEED\n\n/**\n * \\def MBEDTLS_MEMORY_DEBUG\n *\n * Enable debugging of buffer allocator memory issues. Automatically prints\n * (to stderr) all (fatal) messages on memory allocation issues. Enables\n * function for 'debug output' of allocated memory.\n *\n * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *\n * Uncomment this macro to let the buffer allocator print out error messages.\n */\n//#define MBEDTLS_MEMORY_DEBUG\n\n/**\n * \\def MBEDTLS_MEMORY_BACKTRACE\n *\n * Include backtrace information with each allocated block.\n *\n * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *           GLIBC-compatible backtrace() an backtrace_symbols() support\n *\n * Uncomment this macro to include backtrace information\n */\n//#define MBEDTLS_MEMORY_BACKTRACE\n\n/**\n * \\def MBEDTLS_PK_RSA_ALT_SUPPORT\n *\n * Support external private RSA keys (eg from a HSM) in the PK layer.\n *\n * Comment this macro to disable support for external private RSA keys.\n */\n#define MBEDTLS_PK_RSA_ALT_SUPPORT\n\n/**\n * \\def MBEDTLS_PKCS1_V15\n *\n * Enable support for PKCS#1 v1.5 encoding.\n *\n * Requires: MBEDTLS_RSA_C\n *\n * This enables support for PKCS#1 v1.5 operations.\n */\n#define MBEDTLS_PKCS1_V15\n\n/**\n * \\def MBEDTLS_PKCS1_V21\n *\n * Enable support for PKCS#1 v2.1 encoding.\n *\n * Requires: MBEDTLS_MD_C, MBEDTLS_RSA_C\n *\n * This enables support for RSAES-OAEP and RSASSA-PSS operations.\n */\n#define MBEDTLS_PKCS1_V21\n\n/**\n * \\def MBEDTLS_RSA_NO_CRT\n *\n * Do not use the Chinese Remainder Theorem\n * for the RSA private operation.\n *\n * Uncomment this macro to disable the use of CRT in RSA.\n *\n */\n//#define MBEDTLS_RSA_NO_CRT\n\n/**\n * \\def MBEDTLS_SELF_TEST\n *\n * Enable the checkup functions (*_self_test).\n */\n#define MBEDTLS_SELF_TEST\n\n/**\n * \\def MBEDTLS_SHA256_SMALLER\n *\n * Enable an implementation of SHA-256 that has lower ROM footprint but also\n * lower performance.\n *\n * The default implementation is meant to be a reasonnable compromise between\n * performance and size. This version optimizes more aggressively for size at\n * the expense of performance. Eg on Cortex-M4 it reduces the size of\n * mbedtls_sha256_process() from ~2KB to ~0.5KB for a performance hit of about\n * 30%.\n *\n * Uncomment to enable the smaller implementation of SHA256.\n */\n//#define MBEDTLS_SHA256_SMALLER\n\n/**\n * \\def MBEDTLS_SSL_ALL_ALERT_MESSAGES\n *\n * Enable sending of alert messages in case of encountered errors as per RFC.\n * If you choose not to send the alert messages, mbed TLS can still communicate\n * with other servers, only debugging of failures is harder.\n *\n * The advantage of not sending alert messages, is that no information is given\n * about reasons for failures thus preventing adversaries of gaining intel.\n *\n * Enable sending of all alert messages\n */\n#define MBEDTLS_SSL_ALL_ALERT_MESSAGES\n\n/**\n * \\def MBEDTLS_SSL_DEBUG_ALL\n *\n * Enable the debug messages in SSL module for all issues.\n * Debug messages have been disabled in some places to prevent timing\n * attacks due to (unbalanced) debugging function calls.\n *\n * If you need all error reporting you should enable this during debugging,\n * but remove this for production servers that should log as well.\n *\n * Uncomment this macro to report all debug messages on errors introducing\n * a timing side-channel.\n *\n */\n//#define MBEDTLS_SSL_DEBUG_ALL\n\n/** \\def MBEDTLS_SSL_ENCRYPT_THEN_MAC\n *\n * Enable support for Encrypt-then-MAC, RFC 7366.\n *\n * This allows peers that both support it to use a more robust protection for\n * ciphersuites using CBC, providing deep resistance against timing attacks\n * on the padding or underlying cipher.\n *\n * This only affects CBC ciphersuites, and is useless if none is defined.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1    or\n *           MBEDTLS_SSL_PROTO_TLS1_1  or\n *           MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for Encrypt-then-MAC\n */\n#define MBEDTLS_SSL_ENCRYPT_THEN_MAC\n\n/** \\def MBEDTLS_SSL_EXTENDED_MASTER_SECRET\n *\n * Enable support for Extended Master Secret, aka Session Hash\n * (draft-ietf-tls-session-hash-02).\n *\n * This was introduced as \"the proper fix\" to the Triple Handshake familiy of\n * attacks, but it is recommended to always use it (even if you disable\n * renegotiation), since it actually fixes a more fundamental issue in the\n * original SSL/TLS design, and has implications beyond Triple Handshake.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1    or\n *           MBEDTLS_SSL_PROTO_TLS1_1  or\n *           MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for Extended Master Secret.\n */\n#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET\n\n/**\n * \\def MBEDTLS_SSL_FALLBACK_SCSV\n *\n * Enable support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv-00).\n *\n * For servers, it is recommended to always enable this, unless you support\n * only one version of TLS, or know for sure that none of your clients\n * implements a fallback strategy.\n *\n * For clients, you only need this if you're using a fallback strategy, which\n * is not recommended in the first place, unless you absolutely need it to\n * interoperate with buggy (version-intolerant) servers.\n *\n * Comment this macro to disable support for FALLBACK_SCSV\n */\n#define MBEDTLS_SSL_FALLBACK_SCSV\n\n/**\n * \\def MBEDTLS_SSL_HW_RECORD_ACCEL\n *\n * Enable hooking functions in SSL module for hardware acceleration of\n * individual records.\n *\n * Uncomment this macro to enable hooking functions.\n */\n//#define MBEDTLS_SSL_HW_RECORD_ACCEL\n\n/**\n * \\def MBEDTLS_SSL_CBC_RECORD_SPLITTING\n *\n * Enable 1/n-1 record splitting for CBC mode in SSLv3 and TLS 1.0.\n *\n * This is a countermeasure to the BEAST attack, which also minimizes the risk\n * of interoperability issues compared to sending 0-length records.\n *\n * Comment this macro to disable 1/n-1 record splitting.\n */\n#define MBEDTLS_SSL_CBC_RECORD_SPLITTING\n\n/**\n * \\def MBEDTLS_SSL_RENEGOTIATION\n *\n * Enable support for TLS renegotiation.\n *\n * The two main uses of renegotiation are (1) refresh keys on long-lived\n * connections and (2) client authentication after the initial handshake.\n * If you don't need renegotiation, it's probably better to disable it, since\n * it has been associated with security issues in the past and is easy to\n * misuse/misunderstand.\n *\n * Comment this to disable support for renegotiation.\n *\n * \\note   Even if this option is disabled, both client and server are aware\n *         of the Renegotiation Indication Extension (RFC 5746) used to\n *         prevent the SSL renegotiation attack (see RFC 5746 Sect. 1).\n *         (See \\c mbedtls_ssl_conf_legacy_renegotiation for the\n *          configuration of this extension).\n *\n */\n#define MBEDTLS_SSL_RENEGOTIATION\n\n/**\n * \\def MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO\n *\n * Enable support for receiving and parsing SSLv2 Client Hello messages for the\n * SSL Server module (MBEDTLS_SSL_SRV_C).\n *\n * Uncomment this macro to enable support for SSLv2 Client Hello messages.\n */\n//#define MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO\n\n/**\n * \\def MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE\n *\n * Pick the ciphersuite according to the client's preferences rather than ours\n * in the SSL Server module (MBEDTLS_SSL_SRV_C).\n *\n * Uncomment this macro to respect client's ciphersuite order\n */\n//#define MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE\n\n/**\n * \\def MBEDTLS_SSL_MAX_FRAGMENT_LENGTH\n *\n * Enable support for RFC 6066 max_fragment_length extension in SSL.\n *\n * Comment this macro to disable support for the max_fragment_length extension\n */\n#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH\n\n/**\n * \\def MBEDTLS_SSL_PROTO_SSL3\n *\n * Enable support for SSL 3.0.\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for SSL 3.0\n */\n//#define MBEDTLS_SSL_PROTO_SSL3\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1\n *\n * Enable support for TLS 1.0.\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for TLS 1.0\n */\n#define MBEDTLS_SSL_PROTO_TLS1\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1_1\n *\n * Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled).\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for TLS 1.1 / DTLS 1.0\n */\n#define MBEDTLS_SSL_PROTO_TLS1_1\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Enable support for TLS 1.2 (and DTLS 1.2 if DTLS is enabled).\n *\n * Requires: MBEDTLS_SHA1_C or MBEDTLS_SHA256_C or MBEDTLS_SHA512_C\n *           (Depends on ciphersuites)\n *\n * Comment this macro to disable support for TLS 1.2 / DTLS 1.2\n */\n#define MBEDTLS_SSL_PROTO_TLS1_2\n\n/**\n * \\def MBEDTLS_SSL_PROTO_DTLS\n *\n * Enable support for DTLS (all available versions).\n *\n * Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0,\n * and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1_1\n *        or MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for DTLS\n */\n#define MBEDTLS_SSL_PROTO_DTLS\n\n/**\n * \\def MBEDTLS_SSL_ALPN\n *\n * Enable support for RFC 7301 Application Layer Protocol Negotiation.\n *\n * Comment this macro to disable support for ALPN.\n */\n#define MBEDTLS_SSL_ALPN\n\n/**\n * \\def MBEDTLS_SSL_DTLS_ANTI_REPLAY\n *\n * Enable support for the anti-replay mechanism in DTLS.\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *           MBEDTLS_SSL_PROTO_DTLS\n *\n * \\warning Disabling this is often a security risk!\n * See mbedtls_ssl_conf_dtls_anti_replay() for details.\n *\n * Comment this to disable anti-replay in DTLS.\n */\n#define MBEDTLS_SSL_DTLS_ANTI_REPLAY\n\n/**\n * \\def MBEDTLS_SSL_DTLS_HELLO_VERIFY\n *\n * Enable support for HelloVerifyRequest on DTLS servers.\n *\n * This feature is highly recommended to prevent DTLS servers being used as\n * amplifiers in DoS attacks against other hosts. It should always be enabled\n * unless you know for sure amplification cannot be a problem in the\n * environment in which your server operates.\n *\n * \\warning Disabling this can ba a security risk! (see above)\n *\n * Requires: MBEDTLS_SSL_PROTO_DTLS\n *\n * Comment this to disable support for HelloVerifyRequest.\n */\n#define MBEDTLS_SSL_DTLS_HELLO_VERIFY\n\n/**\n * \\def MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE\n *\n * Enable server-side support for clients that reconnect from the same port.\n *\n * Some clients unexpectedly close the connection and try to reconnect using the\n * same source port. This needs special support from the server to handle the\n * new connection securely, as described in section 4.2.8 of RFC 6347. This\n * flag enables that support.\n *\n * Requires: MBEDTLS_SSL_DTLS_HELLO_VERIFY\n *\n * Comment this to disable support for clients reusing the source port.\n */\n#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE\n\n/**\n * \\def MBEDTLS_SSL_DTLS_BADMAC_LIMIT\n *\n * Enable support for a limit of records with bad MAC.\n *\n * See mbedtls_ssl_conf_dtls_badmac_limit().\n *\n * Requires: MBEDTLS_SSL_PROTO_DTLS\n */\n#define MBEDTLS_SSL_DTLS_BADMAC_LIMIT\n\n/**\n * \\def MBEDTLS_SSL_SESSION_TICKETS\n *\n * Enable support for RFC 5077 session tickets in SSL.\n * Client-side, provides full support for session tickets (maintenance of a\n * session store remains the responsibility of the application, though).\n * Server-side, you also need to provide callbacks for writing and parsing\n * tickets, including authenticated encryption and key management. Example\n * callbacks are provided by MBEDTLS_SSL_TICKET_C.\n *\n * Comment this macro to disable support for SSL session tickets\n */\n#define MBEDTLS_SSL_SESSION_TICKETS\n\n/**\n * \\def MBEDTLS_SSL_EXPORT_KEYS\n *\n * Enable support for exporting key block and master secret.\n * This is required for certain users of TLS, e.g. EAP-TLS.\n *\n * Comment this macro to disable support for key export\n */\n#define MBEDTLS_SSL_EXPORT_KEYS\n\n/**\n * \\def MBEDTLS_SSL_SERVER_NAME_INDICATION\n *\n * Enable support for RFC 6066 server name indication (SNI) in SSL.\n *\n * Requires: MBEDTLS_X509_CRT_PARSE_C\n *\n * Comment this macro to disable support for server name indication in SSL\n */\n#define MBEDTLS_SSL_SERVER_NAME_INDICATION\n\n/**\n * \\def MBEDTLS_SSL_TRUNCATED_HMAC\n *\n * Enable support for RFC 6066 truncated HMAC in SSL.\n *\n * Comment this macro to disable support for truncated HMAC in SSL\n */\n#define MBEDTLS_SSL_TRUNCATED_HMAC\n\n/**\n * \\def MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT\n *\n * Fallback to old (pre-2.7), non-conforming implementation of the truncated\n * HMAC extension which also truncates the HMAC key. Note that this option is\n * only meant for a transitory upgrade period and is likely to be removed in\n * a future version of the library.\n *\n * \\warning The old implementation is non-compliant and has a security weakness\n *          (2^80 brute force attack on the HMAC key used for a single,\n *          uninterrupted connection). This should only be enabled temporarily\n *          when (1) the use of truncated HMAC is essential in order to save\n *          bandwidth, and (2) the peer is an Mbed TLS stack that doesn't use\n *          the fixed implementation yet (pre-2.7).\n *\n * \\deprecated This option is deprecated and will likely be removed in a\n *             future version of Mbed TLS.\n *\n * Uncomment to fallback to old, non-compliant truncated HMAC implementation.\n *\n * Requires: MBEDTLS_SSL_TRUNCATED_HMAC\n */\n//#define MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT\n\n/**\n * \\def MBEDTLS_THREADING_ALT\n *\n * Provide your own alternate threading implementation.\n *\n * Requires: MBEDTLS_THREADING_C\n *\n * Uncomment this to allow your own alternate threading implementation.\n */\n//#define MBEDTLS_THREADING_ALT\n\n/**\n * \\def MBEDTLS_THREADING_PTHREAD\n *\n * Enable the pthread wrapper layer for the threading layer.\n *\n * Requires: MBEDTLS_THREADING_C\n *\n * Uncomment this to enable pthread mutexes.\n */\n//#define MBEDTLS_THREADING_PTHREAD\n\n/**\n * \\def MBEDTLS_VERSION_FEATURES\n *\n * Allow run-time checking of compile-time enabled features. Thus allowing users\n * to check at run-time if the library is for instance compiled with threading\n * support via mbedtls_version_check_feature().\n *\n * Requires: MBEDTLS_VERSION_C\n *\n * Comment this to disable run-time checking and save ROM space\n */\n#define MBEDTLS_VERSION_FEATURES\n\n/**\n * \\def MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3\n *\n * If set, the X509 parser will not break-off when parsing an X509 certificate\n * and encountering an extension in a v1 or v2 certificate.\n *\n * Uncomment to prevent an error.\n */\n//#define MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3\n\n/**\n * \\def MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION\n *\n * If set, the X509 parser will not break-off when parsing an X509 certificate\n * and encountering an unknown critical extension.\n *\n * \\warning Depending on your PKI use, enabling this can be a security risk!\n *\n * Uncomment to prevent an error.\n */\n//#define MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION\n\n/**\n * \\def MBEDTLS_X509_CHECK_KEY_USAGE\n *\n * Enable verification of the keyUsage extension (CA and leaf certificates).\n *\n * Disabling this avoids problems with mis-issued and/or misused\n * (intermediate) CA and leaf certificates.\n *\n * \\warning Depending on your PKI use, disabling this can be a security risk!\n *\n * Comment to skip keyUsage checking for both CA and leaf certificates.\n */\n#define MBEDTLS_X509_CHECK_KEY_USAGE\n\n/**\n * \\def MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE\n *\n * Enable verification of the extendedKeyUsage extension (leaf certificates).\n *\n * Disabling this avoids problems with mis-issued and/or misused certificates.\n *\n * \\warning Depending on your PKI use, disabling this can be a security risk!\n *\n * Comment to skip extendedKeyUsage checking for certificates.\n */\n#define MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE\n\n/**\n * \\def MBEDTLS_X509_RSASSA_PSS_SUPPORT\n *\n * Enable parsing and verification of X.509 certificates, CRLs and CSRS\n * signed with RSASSA-PSS (aka PKCS#1 v2.1).\n *\n * Comment this macro to disallow using RSASSA-PSS in certificates.\n */\n#define MBEDTLS_X509_RSASSA_PSS_SUPPORT\n\n/**\n * \\def MBEDTLS_ZLIB_SUPPORT\n *\n * If set, the SSL/TLS module uses ZLIB to support compression and\n * decompression of packet data.\n *\n * \\warning TLS-level compression MAY REDUCE SECURITY! See for example the\n * CRIME attack. Before enabling this option, you should examine with care if\n * CRIME or similar exploits may be applicable to your use case.\n *\n * \\note Currently compression can't be used with DTLS.\n *\n * Used in: library/ssl_tls.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This feature requires zlib library and headers to be present.\n *\n * Uncomment to enable use of ZLIB\n */\n//#define MBEDTLS_ZLIB_SUPPORT\n/* \\} name SECTION: mbed TLS feature support */\n\n/**\n * \\name SECTION: mbed TLS modules\n *\n * This section enables or disables entire modules in mbed TLS\n * \\{\n */\n\n/**\n * \\def MBEDTLS_AESNI_C\n *\n * Enable AES-NI support on x86-64.\n *\n * Module:  library/aesni.c\n * Caller:  library/aes.c\n *\n * Requires: MBEDTLS_HAVE_ASM\n *\n * This modules adds support for the AES-NI instructions on x86-64\n */\n#define MBEDTLS_AESNI_C\n\n/**\n * \\def MBEDTLS_AES_C\n *\n * Enable the AES block cipher.\n *\n * Module:  library/aes.c\n * Caller:  library/ssl_tls.c\n *          library/pem.c\n *          library/ctr_drbg.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA\n *\n * PEM_PARSE uses AES for decrypting encrypted keys.\n */\n#define MBEDTLS_AES_C\n\n/**\n * \\def MBEDTLS_ARC4_C\n *\n * Enable the ARCFOUR stream cipher.\n *\n * Module:  library/arc4.c\n * Caller:  library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5\n *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA\n *\n * \\warning   ARC4 is considered a weak cipher and its use constitutes a\n *            security risk. If possible, we recommend avoidng dependencies on\n *            it, and considering stronger ciphers instead.\n *\n */\n#define MBEDTLS_ARC4_C\n\n/**\n * \\def MBEDTLS_ASN1_PARSE_C\n *\n * Enable the generic ASN1 parser.\n *\n * Module:  library/asn1.c\n * Caller:  library/x509.c\n *          library/dhm.c\n *          library/pkcs12.c\n *          library/pkcs5.c\n *          library/pkparse.c\n */\n#define MBEDTLS_ASN1_PARSE_C\n\n/**\n * \\def MBEDTLS_ASN1_WRITE_C\n *\n * Enable the generic ASN1 writer.\n *\n * Module:  library/asn1write.c\n * Caller:  library/ecdsa.c\n *          library/pkwrite.c\n *          library/x509_create.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n */\n#define MBEDTLS_ASN1_WRITE_C\n\n/**\n * \\def MBEDTLS_BASE64_C\n *\n * Enable the Base64 module.\n *\n * Module:  library/base64.c\n * Caller:  library/pem.c\n *\n * This module is required for PEM support (required by X.509).\n */\n#define MBEDTLS_BASE64_C\n\n/**\n * \\def MBEDTLS_BIGNUM_C\n *\n * Enable the multi-precision integer library.\n *\n * Module:  library/bignum.c\n * Caller:  library/dhm.c\n *          library/ecp.c\n *          library/ecdsa.c\n *          library/rsa.c\n *          library/rsa_internal.c\n *          library/ssl_tls.c\n *\n * This module is required for RSA, DHM and ECC (ECDH, ECDSA) support.\n */\n#define MBEDTLS_BIGNUM_C\n\n/**\n * \\def MBEDTLS_BLOWFISH_C\n *\n * Enable the Blowfish block cipher.\n *\n * Module:  library/blowfish.c\n */\n#define MBEDTLS_BLOWFISH_C\n\n/**\n * \\def MBEDTLS_CAMELLIA_C\n *\n * Enable the Camellia block cipher.\n *\n * Module:  library/camellia.c\n * Caller:  library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\n */\n#define MBEDTLS_CAMELLIA_C\n\n/**\n * \\def MBEDTLS_CCM_C\n *\n * Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.\n *\n * Module:  library/ccm.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C\n *\n * This module enables the AES-CCM ciphersuites, if other requisites are\n * enabled as well.\n */\n#define MBEDTLS_CCM_C\n\n/**\n * \\def MBEDTLS_CERTS_C\n *\n * Enable the test certificates.\n *\n * Module:  library/certs.c\n * Caller:\n *\n * This module is used for testing (ssl_client/server).\n */\n#define MBEDTLS_CERTS_C\n\n/**\n * \\def MBEDTLS_CIPHER_C\n *\n * Enable the generic cipher layer.\n *\n * Module:  library/cipher.c\n * Caller:  library/ssl_tls.c\n *\n * Uncomment to enable generic cipher wrappers.\n */\n#define MBEDTLS_CIPHER_C\n\n/**\n * \\def MBEDTLS_CMAC_C\n *\n * Enable the CMAC (Cipher-based Message Authentication Code) mode for block\n * ciphers.\n *\n * Module:  library/cmac.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_DES_C\n *\n */\n//#define MBEDTLS_CMAC_C\n\n/**\n * \\def MBEDTLS_CTR_DRBG_C\n *\n * Enable the CTR_DRBG AES-256-based random generator.\n *\n * Module:  library/ctr_drbg.c\n * Caller:\n *\n * Requires: MBEDTLS_AES_C\n *\n * This module provides the CTR_DRBG AES-256 random number generator.\n */\n#define MBEDTLS_CTR_DRBG_C\n\n/**\n * \\def MBEDTLS_DEBUG_C\n *\n * Enable the debug functions.\n *\n * Module:  library/debug.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * This module provides debugging functions.\n */\n#define MBEDTLS_DEBUG_C\n\n/**\n * \\def MBEDTLS_DES_C\n *\n * Enable the DES block cipher.\n *\n * Module:  library/des.c\n * Caller:  library/pem.c\n *          library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA\n *\n * PEM_PARSE uses DES/3DES for decrypting encrypted keys.\n *\n * \\warning   DES is considered a weak cipher and its use constitutes a\n *            security risk. We recommend considering stronger ciphers instead.\n */\n#define MBEDTLS_DES_C\n\n/**\n * \\def MBEDTLS_DHM_C\n *\n * Enable the Diffie-Hellman-Merkle module.\n *\n * Module:  library/dhm.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module is used by the following key exchanges:\n *      DHE-RSA, DHE-PSK\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_DHM_C\n\n/**\n * \\def MBEDTLS_ECDH_C\n *\n * Enable the elliptic curve Diffie-Hellman library.\n *\n * Module:  library/ecdh.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module is used by the following key exchanges:\n *      ECDHE-ECDSA, ECDHE-RSA, DHE-PSK\n *\n * Requires: MBEDTLS_ECP_C\n */\n#define MBEDTLS_ECDH_C\n\n/**\n * \\def MBEDTLS_ECDSA_C\n *\n * Enable the elliptic curve DSA library.\n *\n * Module:  library/ecdsa.c\n * Caller:\n *\n * This module is used by the following key exchanges:\n *      ECDHE-ECDSA\n *\n * Requires: MBEDTLS_ECP_C, MBEDTLS_ASN1_WRITE_C, MBEDTLS_ASN1_PARSE_C\n */\n#define MBEDTLS_ECDSA_C\n\n/**\n * \\def MBEDTLS_ECJPAKE_C\n *\n * Enable the elliptic curve J-PAKE library.\n *\n * \\warning This is currently experimental. EC J-PAKE support is based on the\n * Thread v1.0.0 specification; incompatible changes to the specification\n * might still happen. For this reason, this is disabled by default.\n *\n * Module:  library/ecjpake.c\n * Caller:\n *\n * This module is used by the following key exchanges:\n *      ECJPAKE\n *\n * Requires: MBEDTLS_ECP_C, MBEDTLS_MD_C\n */\n//#define MBEDTLS_ECJPAKE_C\n\n/**\n * \\def MBEDTLS_ECP_C\n *\n * Enable the elliptic curve over GF(p) library.\n *\n * Module:  library/ecp.c\n * Caller:  library/ecdh.c\n *          library/ecdsa.c\n *          library/ecjpake.c\n *\n * Requires: MBEDTLS_BIGNUM_C and at least one MBEDTLS_ECP_DP_XXX_ENABLED\n */\n#define MBEDTLS_ECP_C\n\n/**\n * \\def MBEDTLS_ENTROPY_C\n *\n * Enable the platform-specific entropy code.\n *\n * Module:  library/entropy.c\n * Caller:\n *\n * Requires: MBEDTLS_SHA512_C or MBEDTLS_SHA256_C\n *\n * This module provides a generic entropy pool\n */\n#define MBEDTLS_ENTROPY_C\n\n/**\n * \\def MBEDTLS_ERROR_C\n *\n * Enable error code to error string conversion.\n *\n * Module:  library/error.c\n * Caller:\n *\n * This module enables mbedtls_strerror().\n */\n#define MBEDTLS_ERROR_C\n\n/**\n * \\def MBEDTLS_GCM_C\n *\n * Enable the Galois/Counter Mode (GCM) for AES.\n *\n * Module:  library/gcm.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C\n *\n * This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other\n * requisites are enabled as well.\n */\n#define MBEDTLS_GCM_C\n\n/**\n * \\def MBEDTLS_HAVEGE_C\n *\n * Enable the HAVEGE random generator.\n *\n * Warning: the HAVEGE random generator is not suitable for virtualized\n *          environments\n *\n * Warning: the HAVEGE random generator is dependent on timing and specific\n *          processor traits. It is therefore not advised to use HAVEGE as\n *          your applications primary random generator or primary entropy pool\n *          input. As a secondary input to your entropy pool, it IS able add\n *          the (limited) extra entropy it provides.\n *\n * Module:  library/havege.c\n * Caller:\n *\n * Requires: MBEDTLS_TIMING_C\n *\n * Uncomment to enable the HAVEGE random generator.\n */\n//#define MBEDTLS_HAVEGE_C\n\n/**\n * \\def MBEDTLS_HMAC_DRBG_C\n *\n * Enable the HMAC_DRBG random generator.\n *\n * Module:  library/hmac_drbg.c\n * Caller:\n *\n * Requires: MBEDTLS_MD_C\n *\n * Uncomment to enable the HMAC_DRBG random number geerator.\n */\n#define MBEDTLS_HMAC_DRBG_C\n\n/**\n * \\def MBEDTLS_MD_C\n *\n * Enable the generic message digest layer.\n *\n * Module:  library/md.c\n * Caller:\n *\n * Uncomment to enable generic message digest wrappers.\n */\n#define MBEDTLS_MD_C\n\n/**\n * \\def MBEDTLS_MD2_C\n *\n * Enable the MD2 hash algorithm.\n *\n * Module:  library/md2.c\n * Caller:\n *\n * Uncomment to enable support for (rare) MD2-signed X.509 certs.\n *\n * \\warning   MD2 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n//#define MBEDTLS_MD2_C\n\n/**\n * \\def MBEDTLS_MD4_C\n *\n * Enable the MD4 hash algorithm.\n *\n * Module:  library/md4.c\n * Caller:\n *\n * Uncomment to enable support for (rare) MD4-signed X.509 certs.\n *\n * \\warning   MD4 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n//#define MBEDTLS_MD4_C\n\n/**\n * \\def MBEDTLS_MD5_C\n *\n * Enable the MD5 hash algorithm.\n *\n * Module:  library/md5.c\n * Caller:  library/md.c\n *          library/pem.c\n *          library/ssl_tls.c\n *\n * This module is required for SSL/TLS up to version 1.1, and for TLS 1.2\n * depending on the handshake parameters. Further, it is used for checking\n * MD5-signed certificates, and for PBKDF1 when decrypting PEM-encoded\n * encrypted keys.\n *\n * \\warning   MD5 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_MD5_C\n\n/**\n * \\def MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *\n * Enable the buffer allocator implementation that makes use of a (stack)\n * based buffer to 'allocate' dynamic memory. (replaces calloc() and free()\n * calls)\n *\n * Module:  library/memory_buffer_alloc.c\n *\n * Requires: MBEDTLS_PLATFORM_C\n *           MBEDTLS_PLATFORM_MEMORY (to use it within mbed TLS)\n *\n * Enable this module to enable the buffer memory allocator.\n */\n//#define MBEDTLS_MEMORY_BUFFER_ALLOC_C\n\n/**\n * \\def MBEDTLS_NET_C\n *\n * Enable the TCP and UDP over IPv6/IPv4 networking routines.\n *\n * \\note This module only works on POSIX/Unix (including Linux, BSD and OS X)\n * and Windows. For other platforms, you'll want to disable it, and write your\n * own networking callbacks to be passed to \\c mbedtls_ssl_set_bio().\n *\n * \\note See also our Knowledge Base article about porting to a new\n * environment:\n * https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS\n *\n * Module:  library/net_sockets.c\n *\n * This module provides networking routines.\n */\n#define MBEDTLS_NET_C\n\n/**\n * \\def MBEDTLS_OID_C\n *\n * Enable the OID database.\n *\n * Module:  library/oid.c\n * Caller:  library/asn1write.c\n *          library/pkcs5.c\n *          library/pkparse.c\n *          library/pkwrite.c\n *          library/rsa.c\n *          library/x509.c\n *          library/x509_create.c\n *          library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n *\n * This modules translates between OIDs and internal values.\n */\n#define MBEDTLS_OID_C\n\n/**\n * \\def MBEDTLS_PADLOCK_C\n *\n * Enable VIA Padlock support on x86.\n *\n * Module:  library/padlock.c\n * Caller:  library/aes.c\n *\n * Requires: MBEDTLS_HAVE_ASM\n *\n * This modules adds support for the VIA PadLock on x86.\n */\n#define MBEDTLS_PADLOCK_C\n\n/**\n * \\def MBEDTLS_PEM_PARSE_C\n *\n * Enable PEM decoding / parsing.\n *\n * Module:  library/pem.c\n * Caller:  library/dhm.c\n *          library/pkparse.c\n *          library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_BASE64_C\n *\n * This modules adds support for decoding / parsing PEM files.\n */\n#define MBEDTLS_PEM_PARSE_C\n\n/**\n * \\def MBEDTLS_PEM_WRITE_C\n *\n * Enable PEM encoding / writing.\n *\n * Module:  library/pem.c\n * Caller:  library/pkwrite.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n *\n * Requires: MBEDTLS_BASE64_C\n *\n * This modules adds support for encoding / writing PEM files.\n */\n#define MBEDTLS_PEM_WRITE_C\n\n/**\n * \\def MBEDTLS_PK_C\n *\n * Enable the generic public (asymetric) key layer.\n *\n * Module:  library/pk.c\n * Caller:  library/ssl_tls.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * Requires: MBEDTLS_RSA_C or MBEDTLS_ECP_C\n *\n * Uncomment to enable generic public key wrappers.\n */\n#define MBEDTLS_PK_C\n\n/**\n * \\def MBEDTLS_PK_PARSE_C\n *\n * Enable the generic public (asymetric) key parser.\n *\n * Module:  library/pkparse.c\n * Caller:  library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * Uncomment to enable generic public key parse functions.\n */\n#define MBEDTLS_PK_PARSE_C\n\n/**\n * \\def MBEDTLS_PK_WRITE_C\n *\n * Enable the generic public (asymetric) key writer.\n *\n * Module:  library/pkwrite.c\n * Caller:  library/x509write.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * Uncomment to enable generic public key write functions.\n */\n#define MBEDTLS_PK_WRITE_C\n\n/**\n * \\def MBEDTLS_PKCS5_C\n *\n * Enable PKCS#5 functions.\n *\n * Module:  library/pkcs5.c\n *\n * Requires: MBEDTLS_MD_C\n *\n * This module adds support for the PKCS#5 functions.\n */\n#define MBEDTLS_PKCS5_C\n\n/**\n * \\def MBEDTLS_PKCS11_C\n *\n * Enable wrapper for PKCS#11 smartcard support.\n *\n * Module:  library/pkcs11.c\n * Caller:  library/pk.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * This module enables SSL/TLS PKCS #11 smartcard support.\n * Requires the presence of the PKCS#11 helper library (libpkcs11-helper)\n */\n//#define MBEDTLS_PKCS11_C\n\n/**\n * \\def MBEDTLS_PKCS12_C\n *\n * Enable PKCS#12 PBE functions.\n * Adds algorithms for parsing PKCS#8 encrypted private keys\n *\n * Module:  library/pkcs12.c\n * Caller:  library/pkparse.c\n *\n * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_CIPHER_C, MBEDTLS_MD_C\n * Can use:  MBEDTLS_ARC4_C\n *\n * This module enables PKCS#12 functions.\n */\n#define MBEDTLS_PKCS12_C\n\n/**\n * \\def MBEDTLS_PLATFORM_C\n *\n * Enable the platform abstraction layer that allows you to re-assign\n * functions like calloc(), free(), snprintf(), printf(), fprintf(), exit().\n *\n * Enabling MBEDTLS_PLATFORM_C enables to use of MBEDTLS_PLATFORM_XXX_ALT\n * or MBEDTLS_PLATFORM_XXX_MACRO directives, allowing the functions mentioned\n * above to be specified at runtime or compile time respectively.\n *\n * \\note This abstraction layer must be enabled on Windows (including MSYS2)\n * as other module rely on it for a fixed snprintf implementation.\n *\n * Module:  library/platform.c\n * Caller:  Most other .c files\n *\n * This module enables abstraction of common (libc) functions.\n */\n#define MBEDTLS_PLATFORM_C\n\n/**\n * \\def MBEDTLS_RIPEMD160_C\n *\n * Enable the RIPEMD-160 hash algorithm.\n *\n * Module:  library/ripemd160.c\n * Caller:  library/md.c\n *\n */\n#define MBEDTLS_RIPEMD160_C\n\n/**\n * \\def MBEDTLS_RSA_C\n *\n * Enable the RSA public-key cryptosystem.\n *\n * Module:  library/rsa.c\n *          library/rsa_internal.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *          library/x509.c\n *\n * This module is used by the following key exchanges:\n *      RSA, DHE-RSA, ECDHE-RSA, RSA-PSK\n *\n * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C\n */\n#define MBEDTLS_RSA_C\n\n/**\n * \\def MBEDTLS_SHA1_C\n *\n * Enable the SHA1 cryptographic hash algorithm.\n *\n * Module:  library/sha1.c\n * Caller:  library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *          library/x509write_crt.c\n *\n * This module is required for SSL/TLS up to version 1.1, for TLS 1.2\n * depending on the handshake parameters, and for SHA1-signed certificates.\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_SHA1_C\n\n/**\n * \\def MBEDTLS_SHA256_C\n *\n * Enable the SHA-224 and SHA-256 cryptographic hash algorithms.\n *\n * Module:  library/sha256.c\n * Caller:  library/entropy.c\n *          library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * This module adds support for SHA-224 and SHA-256.\n * This module is required for the SSL/TLS 1.2 PRF function.\n */\n#define MBEDTLS_SHA256_C\n\n/**\n * \\def MBEDTLS_SHA512_C\n *\n * Enable the SHA-384 and SHA-512 cryptographic hash algorithms.\n *\n * Module:  library/sha512.c\n * Caller:  library/entropy.c\n *          library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module adds support for SHA-384 and SHA-512.\n */\n#define MBEDTLS_SHA512_C\n\n/**\n * \\def MBEDTLS_SSL_CACHE_C\n *\n * Enable simple SSL cache implementation.\n *\n * Module:  library/ssl_cache.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_CACHE_C\n */\n#define MBEDTLS_SSL_CACHE_C\n\n/**\n * \\def MBEDTLS_SSL_COOKIE_C\n *\n * Enable basic implementation of DTLS cookies for hello verification.\n *\n * Module:  library/ssl_cookie.c\n * Caller:\n */\n#define MBEDTLS_SSL_COOKIE_C\n\n/**\n * \\def MBEDTLS_SSL_TICKET_C\n *\n * Enable an implementation of TLS server-side callbacks for session tickets.\n *\n * Module:  library/ssl_ticket.c\n * Caller:\n *\n * Requires: MBEDTLS_CIPHER_C\n */\n#define MBEDTLS_SSL_TICKET_C\n\n/**\n * \\def MBEDTLS_SSL_CLI_C\n *\n * Enable the SSL/TLS client code.\n *\n * Module:  library/ssl_cli.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *\n * This module is required for SSL/TLS client support.\n */\n#define MBEDTLS_SSL_CLI_C\n\n/**\n * \\def MBEDTLS_SSL_SRV_C\n *\n * Enable the SSL/TLS server code.\n *\n * Module:  library/ssl_srv.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *\n * This module is required for SSL/TLS server support.\n */\n#define MBEDTLS_SSL_SRV_C\n\n/**\n * \\def MBEDTLS_SSL_TLS_C\n *\n * Enable the generic SSL/TLS code.\n *\n * Module:  library/ssl_tls.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * Requires: MBEDTLS_CIPHER_C, MBEDTLS_MD_C\n *           and at least one of the MBEDTLS_SSL_PROTO_XXX defines\n *\n * This module is required for SSL/TLS.\n */\n#define MBEDTLS_SSL_TLS_C\n\n/**\n * \\def MBEDTLS_THREADING_C\n *\n * Enable the threading abstraction layer.\n * By default mbed TLS assumes it is used in a non-threaded environment or that\n * contexts are not shared between threads. If you do intend to use contexts\n * between threads, you will need to enable this layer to prevent race\n * conditions. See also our Knowledge Base article about threading:\n * https://tls.mbed.org/kb/development/thread-safety-and-multi-threading\n *\n * Module:  library/threading.c\n *\n * This allows different threading implementations (self-implemented or\n * provided).\n *\n * You will have to enable either MBEDTLS_THREADING_ALT or\n * MBEDTLS_THREADING_PTHREAD.\n *\n * Enable this layer to allow use of mutexes within mbed TLS\n */\n//#define MBEDTLS_THREADING_C\n\n/**\n * \\def MBEDTLS_TIMING_C\n *\n * Enable the semi-portable timing interface.\n *\n * \\note The provided implementation only works on POSIX/Unix (including Linux,\n * BSD and OS X) and Windows. On other platforms, you can either disable that\n * module and provide your own implementations of the callbacks needed by\n * \\c mbedtls_ssl_set_timer_cb() for DTLS, or leave it enabled and provide\n * your own implementation of the whole module by setting\n * \\c MBEDTLS_TIMING_ALT in the current file.\n *\n * \\note See also our Knowledge Base article about porting to a new\n * environment:\n * https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS\n *\n * Module:  library/timing.c\n * Caller:  library/havege.c\n *\n * This module is used by the HAVEGE random number generator.\n */\n#define MBEDTLS_TIMING_C\n\n/**\n * \\def MBEDTLS_VERSION_C\n *\n * Enable run-time version information.\n *\n * Module:  library/version.c\n *\n * This module provides run-time version information.\n */\n#define MBEDTLS_VERSION_C\n\n/**\n * \\def MBEDTLS_X509_USE_C\n *\n * Enable X.509 core for using certificates.\n *\n * Module:  library/x509.c\n * Caller:  library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_BIGNUM_C, MBEDTLS_OID_C,\n *           MBEDTLS_PK_PARSE_C\n *\n * This module is required for the X.509 parsing modules.\n */\n#define MBEDTLS_X509_USE_C\n\n/**\n * \\def MBEDTLS_X509_CRT_PARSE_C\n *\n * Enable X.509 certificate parsing.\n *\n * Module:  library/x509_crt.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is required for X.509 certificate parsing.\n */\n#define MBEDTLS_X509_CRT_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CRL_PARSE_C\n *\n * Enable X.509 CRL parsing.\n *\n * Module:  library/x509_crl.c\n * Caller:  library/x509_crt.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is required for X.509 CRL parsing.\n */\n#define MBEDTLS_X509_CRL_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CSR_PARSE_C\n *\n * Enable X.509 Certificate Signing Request (CSR) parsing.\n *\n * Module:  library/x509_csr.c\n * Caller:  library/x509_crt_write.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is used for reading X.509 certificate request.\n */\n#define MBEDTLS_X509_CSR_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CREATE_C\n *\n * Enable X.509 core for creating certificates.\n *\n * Module:  library/x509_create.c\n *\n * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C, MBEDTLS_PK_WRITE_C\n *\n * This module is the basis for creating X.509 certificates and CSRs.\n */\n#define MBEDTLS_X509_CREATE_C\n\n/**\n * \\def MBEDTLS_X509_CRT_WRITE_C\n *\n * Enable creating X.509 certificates.\n *\n * Module:  library/x509_crt_write.c\n *\n * Requires: MBEDTLS_X509_CREATE_C\n *\n * This module is required for X.509 certificate creation.\n */\n#define MBEDTLS_X509_CRT_WRITE_C\n\n/**\n * \\def MBEDTLS_X509_CSR_WRITE_C\n *\n * Enable creating X.509 Certificate Signing Requests (CSR).\n *\n * Module:  library/x509_csr_write.c\n *\n * Requires: MBEDTLS_X509_CREATE_C\n *\n * This module is required for X.509 certificate request writing.\n */\n#define MBEDTLS_X509_CSR_WRITE_C\n\n/**\n * \\def MBEDTLS_XTEA_C\n *\n * Enable the XTEA block cipher.\n *\n * Module:  library/xtea.c\n * Caller:\n */\n#define MBEDTLS_XTEA_C\n\n/* \\} name SECTION: mbed TLS modules */\n\n/**\n * \\name SECTION: Module configuration options\n *\n * This section allows for the setting of module specific sizes and\n * configuration options. The default values are already present in the\n * relevant header files and should suffice for the regular use cases.\n *\n * Our advice is to enable options and change their values here\n * only if you have a good reason and know the consequences.\n *\n * Please check the respective header file for documentation on these\n * parameters (to prevent duplicate documentation).\n * \\{\n */\n\n/* MPI / BIGNUM options */\n//#define MBEDTLS_MPI_WINDOW_SIZE            6 /**< Maximum windows size used. */\n//#define MBEDTLS_MPI_MAX_SIZE            1024 /**< Maximum number of bytes for usable MPIs. */\n\n/* CTR_DRBG options */\n//#define MBEDTLS_CTR_DRBG_ENTROPY_LEN               48 /**< Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) */\n//#define MBEDTLS_CTR_DRBG_RESEED_INTERVAL        10000 /**< Interval before reseed is performed by default */\n//#define MBEDTLS_CTR_DRBG_MAX_INPUT                256 /**< Maximum number of additional input bytes */\n//#define MBEDTLS_CTR_DRBG_MAX_REQUEST             1024 /**< Maximum number of requested bytes per call */\n//#define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT           384 /**< Maximum size of (re)seed buffer */\n\n/* HMAC_DRBG options */\n//#define MBEDTLS_HMAC_DRBG_RESEED_INTERVAL   10000 /**< Interval before reseed is performed by default */\n//#define MBEDTLS_HMAC_DRBG_MAX_INPUT           256 /**< Maximum number of additional input bytes */\n//#define MBEDTLS_HMAC_DRBG_MAX_REQUEST        1024 /**< Maximum number of requested bytes per call */\n//#define MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT      384 /**< Maximum size of (re)seed buffer */\n\n/* ECP options */\n//#define MBEDTLS_ECP_MAX_BITS             521 /**< Maximum bit size of groups */\n//#define MBEDTLS_ECP_WINDOW_SIZE            6 /**< Maximum window size used */\n//#define MBEDTLS_ECP_FIXED_POINT_OPTIM      1 /**< Enable fixed-point speed-up */\n\n/* Entropy options */\n//#define MBEDTLS_ENTROPY_MAX_SOURCES                20 /**< Maximum number of sources supported */\n//#define MBEDTLS_ENTROPY_MAX_GATHER                128 /**< Maximum amount requested from entropy sources */\n//#define MBEDTLS_ENTROPY_MIN_HARDWARE               32 /**< Default minimum number of bytes required for the hardware entropy source mbedtls_hardware_poll() before entropy is released */\n\n/* Memory buffer allocator options */\n//#define MBEDTLS_MEMORY_ALIGN_MULTIPLE      4 /**< Align on multiples of this value */\n\n/* Platform options */\n//#define MBEDTLS_PLATFORM_STD_MEM_HDR   <stdlib.h> /**< Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. */\n//#define MBEDTLS_PLATFORM_STD_CALLOC        calloc /**< Default allocator to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_FREE            free /**< Default free to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT            exit /**< Default exit to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_TIME            time /**< Default time to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_STD_FPRINTF      fprintf /**< Default fprintf to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_PRINTF        printf /**< Default printf to use, can be undefined */\n/* Note: your snprintf must correctly zero-terminate the buffer! */\n//#define MBEDTLS_PLATFORM_STD_SNPRINTF    snprintf /**< Default snprintf to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT_SUCCESS       0 /**< Default exit value to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT_FAILURE       1 /**< Default exit value to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_READ   mbedtls_platform_std_nv_seed_read /**< Default nv_seed_read function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_WRITE  mbedtls_platform_std_nv_seed_write /**< Default nv_seed_write function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_FILE  \"seedfile\" /**< Seed file to read/write with default implementation */\n\n/* To Use Function Macros MBEDTLS_PLATFORM_C must be enabled */\n/* MBEDTLS_PLATFORM_XXX_MACRO and MBEDTLS_PLATFORM_XXX_ALT cannot both be defined */\n//#define MBEDTLS_PLATFORM_CALLOC_MACRO        calloc /**< Default allocator macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_FREE_MACRO            free /**< Default free macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_EXIT_MACRO            exit /**< Default exit macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_TIME_MACRO            time /**< Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_TIME_TYPE_MACRO       time_t /**< Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_FPRINTF_MACRO      fprintf /**< Default fprintf macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_PRINTF_MACRO        printf /**< Default printf macro to use, can be undefined */\n/* Note: your snprintf must correctly zero-terminate the buffer! */\n//#define MBEDTLS_PLATFORM_SNPRINTF_MACRO    snprintf /**< Default snprintf macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_NV_SEED_READ_MACRO   mbedtls_platform_std_nv_seed_read /**< Default nv_seed_read function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO  mbedtls_platform_std_nv_seed_write /**< Default nv_seed_write function to use, can be undefined */\n\n/* SSL Cache options */\n//#define MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT       86400 /**< 1 day  */\n//#define MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES      50 /**< Maximum entries in cache */\n\n/* SSL options */\n//#define MBEDTLS_SSL_MAX_CONTENT_LEN             16384 /**< Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers */\n//#define MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME     86400 /**< Lifetime of session tickets (if enabled) */\n//#define MBEDTLS_PSK_MAX_LEN               32 /**< Max size of TLS pre-shared keys, in bytes (default 256 bits) */\n//#define MBEDTLS_SSL_COOKIE_TIMEOUT        60 /**< Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued */\n\n/**\n * Complete list of ciphersuites to use, in order of preference.\n *\n * \\warning No dependency checking is done on that field! This option can only\n * be used to restrict the set of available ciphersuites. It is your\n * responsibility to make sure the needed modules are active.\n *\n * Use this to save a few hundred bytes of ROM (default ordering of all\n * available ciphersuites) and a few to a few hundred bytes of RAM.\n *\n * The value below is only an example, not the default.\n */\n//#define MBEDTLS_SSL_CIPHERSUITES MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n\n/* X509 options */\n//#define MBEDTLS_X509_MAX_INTERMEDIATE_CA   8   /**< Maximum number of intermediate CAs in a verification chain. */\n//#define MBEDTLS_X509_MAX_FILE_PATH_LEN     512 /**< Maximum length of a path/filename string in bytes including the null terminator character ('\\0'). */\n\n/**\n * Allow SHA-1 in the default TLS configuration for certificate signing.\n * Without this build-time option, SHA-1 support must be activated explicitly\n * through mbedtls_ssl_conf_cert_profile. Turning on this option is not\n * recommended because of it is possible to generate SHA-1 collisions, however\n * this may be safe for legacy infrastructure where additional controls apply.\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n// #define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES\n\n/**\n * Allow SHA-1 in the default TLS configuration for TLS 1.2 handshake\n * signature and ciphersuite selection. Without this build-time option, SHA-1\n * support must be activated explicitly through mbedtls_ssl_conf_sig_hashes.\n * The use of SHA-1 in TLS <= 1.1 and in HMAC-SHA-1 is always allowed by\n * default. At the time of writing, there is no practical attack on the use\n * of SHA-1 in handshake signatures, hence this option is turned on by default\n * to preserve compatibility with existing peers, but the general\n * warning applies nonetheless:\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE\n\n/* \\} name SECTION: Customisation configuration options */\n\n/* Target and application specific configurations */\n//#define YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE \"target_config.h\"\n\n#if defined(TARGET_LIKE_MBED) && defined(YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE)\n#include YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE\n#endif\n\n/*\n * Allow user to override any previous default.\n *\n * Use two macro names for that, as:\n * - with yotta the prefix YOTTA_CFG_ is forced\n * - without yotta is looks weird to have a YOTTA prefix.\n */\n#if defined(YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE)\n#include YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE\n#elif defined(MBEDTLS_USER_CONFIG_FILE)\n#include MBEDTLS_USER_CONFIG_FILE\n#endif\n\n#include \"check_config.h\"\n\n#endif /* MBEDTLS_CONFIG_H */\n", "/**\n * \\file ecdsa.h\n *\n * \\brief The Elliptic Curve Digital Signature Algorithm (ECDSA).\n *\n * ECDSA is defined in <em>Standards for Efficient Cryptography Group (SECG):\n * SEC1 Elliptic Curve Cryptography</em>.\n * The use of ECDSA for TLS is defined in <em>RFC-4492: Elliptic Curve\n * Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</em>.\n *\n */\n/*\n *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of Mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_ECDSA_H\n#define MBEDTLS_ECDSA_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include \"ecp.h\"\n#include \"md.h\"\n\n/*\n * RFC-4492 page 20:\n *\n *     Ecdsa-Sig-Value ::= SEQUENCE {\n *         r       INTEGER,\n *         s       INTEGER\n *     }\n *\n * Size is at most\n *    1 (tag) + 1 (len) + 1 (initial 0) + ECP_MAX_BYTES for each of r and s,\n *    twice that + 1 (tag) + 2 (len) for the sequence\n * (assuming ECP_MAX_BYTES is less than 126 for r and s,\n * and less than 124 (total len <= 255) for the sequence)\n */\n#if MBEDTLS_ECP_MAX_BYTES > 124\n#error \"MBEDTLS_ECP_MAX_BYTES bigger than expected, please fix MBEDTLS_ECDSA_MAX_LEN\"\n#endif\n/** The maximal size of an ECDSA signature in Bytes. */\n#define MBEDTLS_ECDSA_MAX_LEN  ( 3 + 2 * ( 3 + MBEDTLS_ECP_MAX_BYTES ) )\n\n/**\n * \\brief           The ECDSA context structure.\n */\ntypedef mbedtls_ecp_keypair mbedtls_ecdsa_context;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * \\brief           This function computes the ECDSA signature of a\n *                  previously-hashed message.\n *\n * \\note            The deterministic version is usually preferred.\n *\n * \\param grp       The ECP group.\n * \\param r         The first output integer.\n * \\param s         The second output integer.\n * \\param d         The private signing key.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param f_rng     The RNG function.\n * \\param p_rng     The RNG parameter.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated\n *                  as defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX\n *                  or \\c MBEDTLS_MPI_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n/**\n * \\brief           This function computes the ECDSA signature of a\n *                  previously-hashed message, deterministic version.\n *                  For more information, see <em>RFC-6979: Deterministic\n *                  Usage of the Digital Signature Algorithm (DSA) and Elliptic\n *                  Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\param grp       The ECP group.\n * \\param r         The first output integer.\n * \\param s         The second output integer.\n * \\param d         The private signing key.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param md_alg    The MD algorithm used to hash the message.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX\n *                  error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                    mbedtls_md_type_t md_alg );\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n/**\n * \\brief           This function verifies the ECDSA signature of a\n *                  previously-hashed message.\n *\n * \\param grp       The ECP group.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param Q         The public key to use for verification.\n * \\param r         The first integer of the signature.\n * \\param s         The second integer of the signature.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.4, step 3.\n *\n * \\return          \\c 0 on success,\n *                  #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX\n *                  error code on failure for any other reason.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s);\n\n/**\n * \\brief           This function computes the ECDSA signature and writes it\n *                  to a buffer, serialized as defined in <em>RFC-4492:\n *                  Elliptic Curve Cryptography (ECC) Cipher Suites for\n *                  Transport Layer Security (TLS)</em>.\n *\n * \\warning         It is not thread-safe to use the same context in\n *                  multiple threads.\n *\n * \\note            The deterministic version is used if\n *                  #MBEDTLS_ECDSA_DETERMINISTIC is defined. For more\n *                  information, see <em>RFC-6979: Deterministic Usage\n *                  of the Digital Signature Algorithm (DSA) and Elliptic\n *                  Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\param ctx       The ECDSA context.\n * \\param md_alg    The message digest that was used to hash the message.\n * \\param hash      The message hash.\n * \\param hlen      The length of the hash.\n * \\param sig       The buffer that holds the signature.\n * \\param slen      The length of the signature written.\n * \\param f_rng     The RNG function.\n * \\param p_rng     The RNG parameter.\n *\n * \\note            The \\p sig buffer must be at least twice as large as the\n *                  size of the curve used, plus 9. For example, 73 Bytes if\n *                  a 256-bit curve is used. A buffer length of\n *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or\n *                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED)\n#if defined(MBEDTLS_DEPRECATED_WARNING)\n#define MBEDTLS_DEPRECATED    __attribute__((deprecated))\n#else\n#define MBEDTLS_DEPRECATED\n#endif\n/**\n * \\brief   This function computes an ECDSA signature and writes it to a buffer,\n *          serialized as defined in <em>RFC-4492: Elliptic Curve Cryptography\n *          (ECC) Cipher Suites for Transport Layer Security (TLS)</em>.\n *\n *          The deterministic version is defined in <em>RFC-6979:\n *          Deterministic Usage of the Digital Signature Algorithm (DSA) and\n *          Elliptic Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\warning         It is not thread-safe to use the same context in\n *                  multiple threads.\n\n *\n * \\deprecated      Superseded by mbedtls_ecdsa_write_signature() in 2.0.0\n *\n * \\param ctx       The ECDSA context.\n * \\param hash      The Message hash.\n * \\param hlen      The length of the hash.\n * \\param sig       The buffer that holds the signature.\n * \\param slen      The length of the signature written.\n * \\param md_alg    The MD algorithm used to hash the message.\n *\n * \\note            The \\p sig buffer must be at least twice as large as the\n *                  size of the curve used, plus 9. For example, 73 Bytes if a\n *                  256-bit curve is used. A buffer length of\n *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or\n *                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg ) MBEDTLS_DEPRECATED;\n#undef MBEDTLS_DEPRECATED\n#endif /* MBEDTLS_DEPRECATED_REMOVED */\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n/**\n * \\brief           This function reads and verifies an ECDSA signature.\n *\n * \\param ctx       The ECDSA context.\n * \\param hash      The message hash.\n * \\param hlen      The size of the hash.\n * \\param sig       The signature to read and verify.\n * \\param slen      The size of \\p sig.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.4, step 3.\n *\n * \\return          \\c 0 on success,\n *                  #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid,\n *                  #MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH if there is a valid\n *                  signature in sig but its length is less than \\p siglen,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_ERR_MPI_XXX\n *                  error code on failure for any other reason.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen );\n\n/**\n * \\brief          This function generates an ECDSA keypair on the given curve.\n *\n * \\param ctx      The ECDSA context to store the keypair in.\n * \\param gid      The elliptic curve to use. One of the various\n *                 \\c MBEDTLS_ECP_DP_XXX macros depending on configuration.\n * \\param f_rng    The RNG function.\n * \\param p_rng    The RNG parameter.\n *\n * \\return         \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX code on\n *                 failure.\n *\n * \\see            ecp.h\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           This function sets an ECDSA context from an EC key pair.\n *\n * \\param ctx       The ECDSA context to set.\n * \\param key       The EC key to use.\n *\n * \\return          \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX code on\n *                  failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           This function initializes an ECDSA context.\n *\n * \\param ctx       The ECDSA context to initialize.\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx );\n\n/**\n * \\brief           This function frees an ECDSA context.\n *\n * \\param ctx       The ECDSA context to free.\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx );\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ecdsa.h */\n", "/**\n * \\file ecp.h\n *\n * \\brief Elliptic curves over GF(p)\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_ECP_H\n#define MBEDTLS_ECP_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include \"bignum.h\"\n\n/*\n * ECP error codes\n */\n#define MBEDTLS_ERR_ECP_BAD_INPUT_DATA                    -0x4F80  /**< Bad input parameters to function. */\n#define MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL                  -0x4F00  /**< The buffer is too small to write to. */\n#define MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE               -0x4E80  /**< Requested curve not available. */\n#define MBEDTLS_ERR_ECP_VERIFY_FAILED                     -0x4E00  /**< The signature is not valid. */\n#define MBEDTLS_ERR_ECP_ALLOC_FAILED                      -0x4D80  /**< Memory allocation failed. */\n#define MBEDTLS_ERR_ECP_RANDOM_FAILED                     -0x4D00  /**< Generation of random value, such as (ephemeral) key, failed. */\n#define MBEDTLS_ERR_ECP_INVALID_KEY                       -0x4C80  /**< Invalid private or public key. */\n#define MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH                  -0x4C00  /**< The buffer contains a valid signature followed by more data. */\n#define MBEDTLS_ERR_ECP_HW_ACCEL_FAILED                   -0x4B80  /**< ECP hardware accelerator failed. */\n\n#if !defined(MBEDTLS_ECP_ALT)\n/*\n * default mbed TLS elliptic curve arithmetic implementation\n *\n * (in case MBEDTLS_ECP_ALT is defined then the developer has to provide an\n * alternative implementation for the whole module and it will replace this\n * one.)\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Domain parameters (curve, subgroup and generator) identifiers.\n *\n * Only curves over prime fields are supported.\n *\n * \\warning This library does not support validation of arbitrary domain\n * parameters. Therefore, only well-known domain parameters from trusted\n * sources should be used. See mbedtls_ecp_group_load().\n */\ntypedef enum\n{\n    MBEDTLS_ECP_DP_NONE = 0,\n    MBEDTLS_ECP_DP_SECP192R1,      /*!< 192-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP224R1,      /*!< 224-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP256R1,      /*!< 256-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP384R1,      /*!< 384-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP521R1,      /*!< 521-bits NIST curve  */\n    MBEDTLS_ECP_DP_BP256R1,        /*!< 256-bits Brainpool curve */\n    MBEDTLS_ECP_DP_BP384R1,        /*!< 384-bits Brainpool curve */\n    MBEDTLS_ECP_DP_BP512R1,        /*!< 512-bits Brainpool curve */\n    MBEDTLS_ECP_DP_CURVE25519,           /*!< Curve25519               */\n    MBEDTLS_ECP_DP_SECP192K1,      /*!< 192-bits \"Koblitz\" curve */\n    MBEDTLS_ECP_DP_SECP224K1,      /*!< 224-bits \"Koblitz\" curve */\n    MBEDTLS_ECP_DP_SECP256K1,      /*!< 256-bits \"Koblitz\" curve */\n} mbedtls_ecp_group_id;\n\n/**\n * Number of supported curves (plus one for NONE).\n *\n * (Montgomery curves excluded for now.)\n */\n#define MBEDTLS_ECP_DP_MAX     12\n\n/**\n * Curve information for use by other modules\n */\ntypedef struct\n{\n    mbedtls_ecp_group_id grp_id;    /*!< Internal identifier        */\n    uint16_t tls_id;                /*!< TLS NamedCurve identifier  */\n    uint16_t bit_size;              /*!< Curve size in bits         */\n    const char *name;               /*!< Human-friendly name        */\n} mbedtls_ecp_curve_info;\n\n/**\n * \\brief           ECP point structure (jacobian coordinates)\n *\n * \\note            All functions expect and return points satisfying\n *                  the following condition: Z == 0 or Z == 1. (Other\n *                  values of Z are used by internal functions only.)\n *                  The point is zero, or \"at infinity\", if Z == 0.\n *                  Otherwise, X and Y are its standard (affine) coordinates.\n */\ntypedef struct\n{\n    mbedtls_mpi X;          /*!<  the point's X coordinate  */\n    mbedtls_mpi Y;          /*!<  the point's Y coordinate  */\n    mbedtls_mpi Z;          /*!<  the point's Z coordinate  */\n}\nmbedtls_ecp_point;\n\n/**\n * \\brief           ECP group structure\n *\n * We consider two types of curves equations:\n * 1. Short Weierstrass y^2 = x^3 + A x + B     mod P   (SEC1 + RFC 4492)\n * 2. Montgomery,       y^2 = x^3 + A x^2 + x   mod P   (Curve25519 + draft)\n * In both cases, a generator G for a prime-order subgroup is fixed. In the\n * short weierstrass, this subgroup is actually the whole curve, and its\n * cardinal is denoted by N.\n *\n * In the case of Short Weierstrass curves, our code requires that N is an odd\n * prime. (Use odd in mbedtls_ecp_mul() and prime in mbedtls_ecdsa_sign() for blinding.)\n *\n * In the case of Montgomery curves, we don't store A but (A + 2) / 4 which is\n * the quantity actually used in the formulas. Also, nbits is not the size of N\n * but the required size for private keys.\n *\n * If modp is NULL, reduction modulo P is done using a generic algorithm.\n * Otherwise, it must point to a function that takes an mbedtls_mpi in the range\n * 0..2^(2*pbits)-1 and transforms it in-place in an integer of little more\n * than pbits, so that the integer may be efficiently brought in the 0..P-1\n * range by a few additions or substractions. It must return 0 on success and\n * non-zero on failure.\n */\ntypedef struct\n{\n    mbedtls_ecp_group_id id;    /*!<  internal group identifier                     */\n    mbedtls_mpi P;              /*!<  prime modulus of the base field               */\n    mbedtls_mpi A;              /*!<  1. A in the equation, or 2. (A + 2) / 4       */\n    mbedtls_mpi B;              /*!<  1. B in the equation, or 2. unused            */\n    mbedtls_ecp_point G;        /*!<  generator of the (sub)group used              */\n    mbedtls_mpi N;              /*!<  1. the order of G, or 2. unused               */\n    size_t pbits;       /*!<  number of bits in P                           */\n    size_t nbits;       /*!<  number of bits in 1. P, or 2. private keys    */\n    unsigned int h;     /*!<  internal: 1 if the constants are static       */\n    int (*modp)(mbedtls_mpi *); /*!<  function for fast reduction mod P             */\n    int (*t_pre)(mbedtls_ecp_point *, void *);  /*!< unused                         */\n    int (*t_post)(mbedtls_ecp_point *, void *); /*!< unused                         */\n    void *t_data;                       /*!< unused                         */\n    mbedtls_ecp_point *T;       /*!<  pre-computed points for ecp_mul_comb()        */\n    size_t T_size;      /*!<  number for pre-computed points                */\n}\nmbedtls_ecp_group;\n\n/**\n * \\brief           ECP key pair structure\n *\n * A generic key pair that could be used for ECDSA, fixed ECDH, etc.\n *\n * \\note Members purposefully in the same order as struc mbedtls_ecdsa_context.\n */\ntypedef struct\n{\n    mbedtls_ecp_group grp;      /*!<  Elliptic curve and base point     */\n    mbedtls_mpi d;              /*!<  our secret value                  */\n    mbedtls_ecp_point Q;        /*!<  our public value                  */\n}\nmbedtls_ecp_keypair;\n\n/**\n * \\name SECTION: Module settings\n *\n * The configuration options you can set for this module are in this section.\n * Either change them in config.h or define them on the compiler command line.\n * \\{\n */\n\n#if !defined(MBEDTLS_ECP_MAX_BITS)\n/**\n * Maximum size of the groups (that is, of N and P)\n */\n#define MBEDTLS_ECP_MAX_BITS     521   /**< Maximum bit size of groups */\n#endif\n\n#define MBEDTLS_ECP_MAX_BYTES    ( ( MBEDTLS_ECP_MAX_BITS + 7 ) / 8 )\n#define MBEDTLS_ECP_MAX_PT_LEN   ( 2 * MBEDTLS_ECP_MAX_BYTES + 1 )\n\n#if !defined(MBEDTLS_ECP_WINDOW_SIZE)\n/*\n * Maximum \"window\" size used for point multiplication.\n * Default: 6.\n * Minimum value: 2. Maximum value: 7.\n *\n * Result is an array of at most ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n * points used for point multiplication. This value is directly tied to EC\n * peak memory usage, so decreasing it by one should roughly cut memory usage\n * by two (if large curves are in use).\n *\n * Reduction in size may reduce speed, but larger curves are impacted first.\n * Sample performances (in ECDHE handshakes/s, with FIXED_POINT_OPTIM = 1):\n *      w-size:     6       5       4       3       2\n *      521       145     141     135     120      97\n *      384       214     209     198     177     146\n *      256       320     320     303     262     226\n\n *      224       475     475     453     398     342\n *      192       640     640     633     587     476\n */\n#define MBEDTLS_ECP_WINDOW_SIZE    6   /**< Maximum window size used */\n#endif /* MBEDTLS_ECP_WINDOW_SIZE */\n\n#if !defined(MBEDTLS_ECP_FIXED_POINT_OPTIM)\n/*\n * Trade memory for speed on fixed-point multiplication.\n *\n * This speeds up repeated multiplication of the generator (that is, the\n * multiplication in ECDSA signatures, and half of the multiplications in\n * ECDSA verification and ECDHE) by a factor roughly 3 to 4.\n *\n * The cost is increasing EC peak memory usage by a factor roughly 2.\n *\n * Change this value to 0 to reduce peak memory usage.\n */\n#define MBEDTLS_ECP_FIXED_POINT_OPTIM  1   /**< Enable fixed-point speed-up */\n#endif /* MBEDTLS_ECP_FIXED_POINT_OPTIM */\n\n/* \\} name SECTION: Module settings */\n\n/*\n * Point formats, from RFC 4492's enum ECPointFormat\n */\n#define MBEDTLS_ECP_PF_UNCOMPRESSED    0   /**< Uncompressed point format */\n#define MBEDTLS_ECP_PF_COMPRESSED      1   /**< Compressed point format */\n\n/*\n * Some other constants from RFC 4492\n */\n#define MBEDTLS_ECP_TLS_NAMED_CURVE    3   /**< ECCurveType's named_curve */\n\n/**\n * \\brief           Get the list of supported curves in order of preferrence\n *                  (full information)\n *\n * \\return          A statically allocated array, the last entry is 0.\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void );\n\n/**\n * \\brief           Get the list of supported curves in order of preferrence\n *                  (grp_id only)\n *\n * \\return          A statically allocated array,\n *                  terminated with MBEDTLS_ECP_DP_NONE.\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void );\n\n/**\n * \\brief           Get curve information from an internal group identifier\n *\n * \\param grp_id    A MBEDTLS_ECP_DP_XXX value\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id );\n\n/**\n * \\brief           Get curve information from a TLS NamedCurve value\n *\n * \\param tls_id    A MBEDTLS_ECP_DP_XXX value\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id );\n\n/**\n * \\brief           Get curve information from a human-readable name\n *\n * \\param name      The name\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name );\n\n/**\n * \\brief           Initialize a point (as zero)\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Initialize a group (to something meaningless)\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp );\n\n/**\n * \\brief           Initialize a key pair (as an invalid one)\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           Free the components of a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Free the components of an ECP group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp );\n\n/**\n * \\brief           Free the components of a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           Copy the contents of point Q into P\n *\n * \\param P         Destination point\n * \\param Q         Source point\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Copy the contents of a group object\n *\n * \\param dst       Destination group\n * \\param src       Source group\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src );\n\n/**\n * \\brief           Set a point to zero\n *\n * \\param pt        Destination point\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Tell if a point is zero\n *\n * \\param pt        Point to test\n *\n * \\return          1 if point is zero, 0 otherwise\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Compare two points\n *\n * \\note            This assumes the points are normalized. Otherwise,\n *                  they may compare as \"not equal\" even if they are.\n *\n * \\param P         First point to compare\n * \\param Q         Second point to compare\n *\n * \\return          0 if the points are equal,\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA otherwise\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Import a non-zero point from two ASCII strings\n *\n * \\param P         Destination point\n * \\param radix     Input numeric base\n * \\param x         First affine coordinate as a null-terminated string\n * \\param y         Second affine coordinate as a null-terminated string\n *\n * \\return          0 if successful, or a MBEDTLS_ERR_MPI_XXX error code\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y );\n\n/**\n * \\brief           Export a point into unsigned binary data\n *\n * \\param grp       Group to which the point should belong\n * \\param P         Point to export\n * \\param format    Point format, should be a MBEDTLS_ECP_PF_XXX macro\n * \\param olen      Length of the actual output\n * \\param buf       Output buffer\n * \\param buflen    Length of the output buffer\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BAD_INPUT_DATA\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen );\n\n/**\n * \\brief           Import a point from unsigned binary data\n *\n * \\param grp       Group to which the point should belong\n * \\param P         Point to import\n * \\param buf       Input buffer\n * \\param ilen      Actual length of input\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,\n *                  MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the point format\n *                  is not implemented.\n *\n * \\note            This function does NOT check that the point actually\n *                  belongs to the given group, see mbedtls_ecp_check_pubkey() for\n *                  that.\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                           const unsigned char *buf, size_t ilen );\n\n/**\n * \\brief           Import a point from a TLS ECPoint record\n *\n * \\param grp       ECP group used\n * \\param pt        Destination point\n * \\param buf       $(Start of input buffer)\n * \\param len       Buffer length\n *\n * \\note            buf is updated to point right after the ECPoint on exit\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t len );\n\n/**\n * \\brief           Export a point as a TLS ECPoint record\n *\n * \\param grp       ECP group used\n * \\param pt        Point to export\n * \\param format    Export format\n * \\param olen      length of data written\n * \\param buf       Buffer to write to\n * \\param blen      Buffer length\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BAD_INPUT_DATA\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen );\n\n/**\n * \\brief           Set a group using well-known domain parameters\n *\n * \\param grp       Destination group\n * \\param id        Index in the list of well-known domain parameters\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE for unkownn groups\n *\n * \\note            Index should be a value of RFC 4492's enum NamedCurve,\n *                  usually in the form of a MBEDTLS_ECP_DP_XXX macro.\n */\nint mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id );\n\n/**\n * \\brief           Set a group from a TLS ECParameters record\n *\n * \\param grp       Destination group\n * \\param buf       &(Start of input buffer)\n * \\param len       Buffer length\n *\n * \\note            buf is updated to point right after ECParameters on exit\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len );\n\n/**\n * \\brief           Write the TLS ECParameters record for a group\n *\n * \\param grp       ECP group used\n * \\param olen      Number of bytes actually written\n * \\param buf       Buffer to write to\n * \\param blen      Buffer length\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen );\n\n/**\n * \\brief           Multiplication by an integer: R = m * P\n *                  (Not thread-safe to use same group in multiple threads)\n *\n * \\note            In order to prevent timing attacks, this function\n *                  executes the exact same sequence of (base field)\n *                  operations for any valid m. It avoids any if-branch or\n *                  array index depending on the value of m.\n *\n * \\note            If f_rng is not NULL, it is used to randomize intermediate\n *                  results in order to prevent potential timing attacks\n *                  targeting these results. It is recommended to always\n *                  provide a non-NULL f_rng (the overhead is negligible).\n *\n * \\param grp       ECP group\n * \\param R         Destination point\n * \\param m         Integer by which to multiply\n * \\param P         Point to multiply\n * \\param f_rng     RNG function (see notes)\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY if m is not a valid privkey\n *                  or P is not a valid pubkey,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           Multiplication and addition of two points by integers:\n *                  R = m * P + n * Q\n *                  (Not thread-safe to use same group in multiple threads)\n *\n * \\note            In contrast to mbedtls_ecp_mul(), this function does not guarantee\n *                  a constant execution flow and timing.\n *\n * \\param grp       ECP group\n * \\param R         Destination point\n * \\param m         Integer by which to multiply P\n * \\param P         Point to multiply by m\n * \\param n         Integer by which to multiply Q\n * \\param Q         Point to be multiplied by n\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY if m or n is not a valid privkey\n *                  or P or Q is not a valid pubkey,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Check that a point is a valid public key on this curve\n *\n * \\param grp       Curve/group the point should belong to\n * \\param pt        Point to check\n *\n * \\return          0 if point is a valid public key,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY otherwise.\n *\n * \\note            This function only checks the point is non-zero, has valid\n *                  coordinates and lies on the curve, but not that it is\n *                  indeed a multiple of G. This is additional check is more\n *                  expensive, isn't required by standards, and shouldn't be\n *                  necessary if the group used has a small cofactor. In\n *                  particular, it is useless for the NIST groups which all\n *                  have a cofactor of 1.\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Check that an mbedtls_mpi is a valid private key for this curve\n *\n * \\param grp       Group used\n * \\param d         Integer to check\n *\n * \\return          0 if point is a valid private key,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY otherwise.\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d );\n\n/**\n * \\brief           Generate a keypair with configurable base point\n *\n * \\param grp       ECP group\n * \\param G         Chosen base point\n * \\param d         Destination MPI (secret part)\n * \\param Q         Destination point (public part)\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng );\n\n/**\n * \\brief           Generate a keypair\n *\n * \\param grp       ECP group\n * \\param d         Destination MPI (secret part)\n * \\param Q         Destination point (public part)\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng );\n\n/**\n * \\brief           Generate a keypair\n *\n * \\param grp_id    ECP group identifier\n * \\param key       Destination keypair\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           Check a public-private key pair\n *\n * \\param pub       Keypair structure holding a public key\n * \\param prv       Keypair structure holding a private (plus public) key\n *\n * \\return          0 if successful (keys are valid and match), or\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA, or\n *                  a MBEDTLS_ERR_ECP_XXX or MBEDTLS_ERR_MPI_XXX code.\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv );\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/**\n * \\brief          Checkup routine\n *\n * \\return         0 if successful, or 1 if a test failed\n */\nint mbedtls_ecp_self_test( int verbose );\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#ifdef __cplusplus\n}\n#endif\n\n#else  /* MBEDTLS_ECP_ALT */\n#include \"ecp_alt.h\"\n#endif /* MBEDTLS_ECP_ALT */\n\n#endif /* ecp.h */\n", "/*\n *  Elliptic curve DSA\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n\n#include \"mbedtls/ecdsa.h\"\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n/*\n * Derive a suitable integer for group grp from a buffer of length len\n * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3\n */\nstatic int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,\n                       const unsigned char *buf, size_t blen )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n    size_t use_size = blen > n_size ? n_size : blen;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );\n    if( use_size * 8 > grp->nbits )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );\n\n    /* While at it, reduce modulo N */\n    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );\n\ncleanup:\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_SIGN_ALT)\n/*\n * Compute ECDSA signature of a hashed message (SEC1 4.1.3)\n * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)\n */\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret, key_tries, sign_tries, blind_tries;\n    mbedtls_ecp_point R;\n    mbedtls_mpi k, e, t;\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /* Make sure d is in range 1..n-1 */\n    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );\n\n    sign_tries = 0;\n    do\n    {\n        /*\n         * Steps 1-3: generate a suitable ephemeral keypair\n         * and set r = xR mod n\n         */\n        key_tries = 0;\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );\n\n            if( key_tries++ > 10 )\n            {\n                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n                goto cleanup;\n            }\n        }\n        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );\n\n        /*\n         * Step 5: derive MPI from hashed message\n         */\n        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n        /*\n         * Generate a random value to blind inv_mod in next step,\n         * avoiding a potential timing leak.\n         */\n        blind_tries = 0;\n        do\n        {\n            size_t n_size = ( grp->nbits + 7 ) / 8;\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );\n\n            /* See mbedtls_ecp_gen_keypair() */\n            if( ++blind_tries > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );\n\n        /*\n         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );\n\n        if( sign_tries++ > 10 )\n        {\n            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n            goto cleanup;\n        }\n    }\n    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_SIGN_ALT */\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n/*\n * Deterministic signature wrapper\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                    mbedtls_md_type_t md_alg )\n{\n    int ret;\n    mbedtls_hmac_drbg_context rng_ctx;\n    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];\n    size_t grp_len = ( grp->nbits + 7 ) / 8;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_mpi h;\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &h );\n    mbedtls_hmac_drbg_init( &rng_ctx );\n\n    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );\n    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );\n\n    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,\n                      mbedtls_hmac_drbg_random, &rng_ctx );\n\ncleanup:\n    mbedtls_hmac_drbg_free( &rng_ctx );\n    mbedtls_mpi_free( &h );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)\n/*\n * Verify ECDSA signature of hashed message (SEC1 4.1.4)\n * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)\n{\n    int ret;\n    mbedtls_mpi e, s_inv, u1, u2;\n    mbedtls_ecp_point R;\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: make sure r and s are in range 1..n-1\n     */\n    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||\n        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Additional precaution: make sure Q is valid\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    /*\n     * Step 3: derive MPI from hashed message\n     */\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n    /*\n     * Step 4: u1 = e / s mod n, u2 = r / s mod n\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );\n\n    /*\n     * Step 5: R = u1 G + u2 Q\n     *\n     * Since we're not using any secret data, no need to pass a RNG to\n     * mbedtls_ecp_mul() for countermesures.\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );\n\n    if( mbedtls_ecp_is_zero( &R ) )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Step 6: convert xR to an integer (no-op)\n     * Step 7: reduce xR mod n (gives v)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );\n\n    /*\n     * Step 8: check if v (that is, R.X) is equal to r\n     */\n    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_VERIFY_ALT */\n\n/*\n * Convert a signature (given by context) to ASN.1\n */\nstatic int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,\n                                    unsigned char *sig, size_t *slen )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];\n    unsigned char *p = buf + sizeof( buf );\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    memcpy( sig, p, len );\n    *slen = len;\n\n    return( 0 );\n}\n\n/*\n * Compute and write signature\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng )\n{\n    int ret;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n    (void) f_rng;\n    (void) p_rng;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,\n                             hash, hlen, md_alg ) );\n#else\n    (void) md_alg;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,\n                         hash, hlen, f_rng, p_rng ) );\n#endif\n\n    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \\\n    defined(MBEDTLS_ECDSA_DETERMINISTIC)\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg )\n{\n    return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,\n                                   NULL, NULL ) );\n}\n#endif\n\n/*\n * Read and check signature\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen )\n{\n    int ret;\n    unsigned char *p = (unsigned char *) sig;\n    const unsigned char *end = sig + slen;\n    size_t len;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( p + len != end )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,\n                              &ctx->Q, &r, &s ) ) != 0 )\n        goto cleanup;\n\n    /* At this point we know that the buffer starts with a valid signature.\n     * Return 0 if the buffer just contains the signature, and a specific\n     * error code if the valid signature is followed by more data. */\n    if( p != end )\n        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_GENKEY_ALT)\n/*\n * Generate key pair\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = 0;\n    ret = mbedtls_ecp_group_load( &ctx->grp, gid );\n    if( ret != 0 )\n        return( ret );\n\n   return( mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d,\n                                    &ctx->Q, f_rng, p_rng ) );\n}\n#endif /* MBEDTLS_ECDSA_GENKEY_ALT */\n\n/*\n * Set context from an mbedtls_ecp_keypair\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||\n        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )\n    {\n        mbedtls_ecdsa_free( ctx );\n    }\n\n    return( ret );\n}\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_init( ctx );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_free( ctx );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n", "/*\n *  Elliptic curves over GF(p): generic functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone\n * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf\n * RFC 4492 for the related TLS structures and constants\n *\n * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf\n *\n * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis\n *     for elliptic curve cryptosystems. In : Cryptographic Hardware and\n *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.\n *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>\n *\n * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to\n *     render ECC resistant against Side Channel Attacks. IACR Cryptology\n *     ePrint Archive, 2004, vol. 2004, p. 342.\n *     <http://eprint.iacr.org/2004/342.pdf>\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n#include \"mbedtls/threading.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include \"mbedtls/ecp_internal.h\"\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * Counts of point addition and doubling, and field multiplications.\n * Used to test resistance of point multiplication to simple timing attacks.\n */\nstatic unsigned long add_count, dbl_count, mul_count;\n#endif\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n#define ECP_SHORTWEIERSTRASS\n#endif\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n#define ECP_MONTGOMERY\n#endif\n\n/*\n * Curve types: internal for now, might be exposed later\n */\ntypedef enum\n{\n    ECP_TYPE_NONE = 0,\n    ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */\n    ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */\n} ecp_curve_type;\n\n/*\n * List of supported curves:\n *  - internal ID\n *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)\n *  - size in bits\n *  - readable name\n *\n * Curves are listed in order: largest curves first, and for a given size,\n * fastest curves first. This provides the default order for the SSL module.\n *\n * Reminder: update profiles in x509_crt.c when adding a new curves!\n */\nstatic const mbedtls_ecp_curve_info ecp_supported_curves[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    \"secp521r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP512R1,      28,     512,    \"brainpoolP512r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    \"secp384r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP384R1,      27,     384,    \"brainpoolP384r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    \"secp256r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    \"secp256k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP256R1,      26,     256,    \"brainpoolP256r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    \"secp224r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    \"secp224k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    \"secp192r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    \"secp192k1\"         },\n#endif\n    { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },\n};\n\n#define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \\\n                        sizeof( ecp_supported_curves[0] )\n\nstatic mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];\n\n/*\n * List of supported curves and associated info\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )\n{\n    return( ecp_supported_curves );\n}\n\n/*\n * List of supported curves, group ID only\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )\n{\n    static int init_done = 0;\n\n    if( ! init_done )\n    {\n        size_t i = 0;\n        const mbedtls_ecp_curve_info *curve_info;\n\n        for( curve_info = mbedtls_ecp_curve_list();\n             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n             curve_info++ )\n        {\n            ecp_supported_grp_id[i++] = curve_info->grp_id;\n        }\n        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;\n\n        init_done = 1;\n    }\n\n    return( ecp_supported_grp_id );\n}\n\n/*\n * Get the curve info for the internal identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->grp_id == grp_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the TLS identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->tls_id == tls_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the name\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( strcmp( curve_info->name, name ) == 0 )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the type of a curve\n */\nstatic inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )\n{\n    if( grp->G.X.p == NULL )\n        return( ECP_TYPE_NONE );\n\n    if( grp->G.Y.p == NULL )\n        return( ECP_TYPE_MONTGOMERY );\n    else\n        return( ECP_TYPE_SHORT_WEIERSTRASS );\n}\n\n/*\n * Initialize (the components of) a point\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_init( &pt->X );\n    mbedtls_mpi_init( &pt->Y );\n    mbedtls_mpi_init( &pt->Z );\n}\n\n/*\n * Initialize (the components of) a group\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp )\n{\n    if( grp == NULL )\n        return;\n\n    memset( grp, 0, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Initialize (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_init( &key->grp );\n    mbedtls_mpi_init( &key->d );\n    mbedtls_ecp_point_init( &key->Q );\n}\n\n/*\n * Unallocate (the components of) a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_free( &( pt->X ) );\n    mbedtls_mpi_free( &( pt->Y ) );\n    mbedtls_mpi_free( &( pt->Z ) );\n}\n\n/*\n * Unallocate (the components of) a group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp )\n{\n    size_t i;\n\n    if( grp == NULL )\n        return;\n\n    if( grp->h != 1 )\n    {\n        mbedtls_mpi_free( &grp->P );\n        mbedtls_mpi_free( &grp->A );\n        mbedtls_mpi_free( &grp->B );\n        mbedtls_ecp_point_free( &grp->G );\n        mbedtls_mpi_free( &grp->N );\n    }\n\n    if( grp->T != NULL )\n    {\n        for( i = 0; i < grp->T_size; i++ )\n            mbedtls_ecp_point_free( &grp->T[i] );\n        mbedtls_free( grp->T );\n    }\n\n    mbedtls_zeroize( grp, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Unallocate (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &key->grp );\n    mbedtls_mpi_free( &key->d );\n    mbedtls_ecp_point_free( &key->Q );\n}\n\n/*\n * Copy the contents of a point\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Copy the contents of a group object\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )\n{\n    return mbedtls_ecp_group_load( dst, src->id );\n}\n\n/*\n * Set point to zero\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Tell if a point is zero\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )\n{\n    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );\n}\n\n/*\n * Compare two points lazily\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q )\n{\n    if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )\n    {\n        return( 0 );\n    }\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Import a non-zero point from ASCII strings\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Export a point into unsigned binary data (SEC1 2.3.3)\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen )\n{\n    int ret = 0;\n    size_t plen;\n\n    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&\n        format != MBEDTLS_ECP_PF_COMPRESSED )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Common case: P == 0\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n    {\n        if( buflen < 1 )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x00;\n        *olen = 1;\n\n        return( 0 );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )\n    {\n        *olen = 2 * plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x04;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );\n    }\n    else if( format == MBEDTLS_ECP_PF_COMPRESSED )\n    {\n        *olen = plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from unsigned binary data (SEC1 2.3.4)\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                           const unsigned char *buf, size_t ilen )\n{\n    int ret;\n    size_t plen;\n\n    if( ilen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( buf[0] == 0x00 )\n    {\n        if( ilen == 1 )\n            return( mbedtls_ecp_set_zero( pt ) );\n        else\n            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( buf[0] != 0x04 )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    if( ilen != 2 * plen + 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t buf_len )\n{\n    unsigned char data_len;\n    const unsigned char *buf_start;\n\n    /*\n     * We must have at least two bytes (1 for length, at least one for data)\n     */\n    if( buf_len < 2 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    data_len = *(*buf)++;\n    if( data_len < 1 || data_len > buf_len - 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Save buffer start for read_binary and update buf\n     */\n    buf_start = *buf;\n    *buf += data_len;\n\n    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );\n}\n\n/*\n * Export a point as a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    int ret;\n\n    /*\n     * buffer length must be at least one, for our length byte\n     */\n    if( blen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,\n                    olen, buf + 1, blen - 1) ) != 0 )\n        return( ret );\n\n    /*\n     * write length to the first byte and update total length\n     */\n    buf[0] = (unsigned char) *olen;\n    ++*olen;\n\n    return( 0 );\n}\n\n/*\n * Set a group from an ECParameters record (RFC 4492)\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )\n{\n    uint16_t tls_id;\n    const mbedtls_ecp_curve_info *curve_info;\n\n    /*\n     * We expect at least three bytes (see below)\n     */\n    if( len < 3 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * First byte is curve_type; only named_curve is handled\n     */\n    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    tls_id = *(*buf)++;\n    tls_id <<= 8;\n    tls_id |= *(*buf)++;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    return mbedtls_ecp_group_load( grp, curve_info->grp_id );\n}\n\n/*\n * Write the ECParameters record corresponding to a group (RFC 4492)\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * We are going to write 3 bytes (see below)\n     */\n    *olen = 3;\n    if( blen < *olen )\n        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n    /*\n     * First byte is curve_type, always named_curve\n     */\n    *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    buf[0] = curve_info->tls_id >> 8;\n    buf[1] = curve_info->tls_id & 0xFF;\n\n    return( 0 );\n}\n\n/*\n * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.\n * See the documentation of struct mbedtls_ecp_group.\n *\n * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.\n */\nstatic int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    if( grp->modp == NULL )\n        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||\n        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    MBEDTLS_MPI_CHK( grp->modp( N ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );\n\n    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )\n        /* we known P, N and the result are positive */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Fast mod-p functions expect their argument to be in the 0..p^2 range.\n *\n * In order to guarantee that, we need to ensure that operands of\n * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will\n * bring the result back to this range.\n *\n * The following macros are shortcuts for doing that.\n */\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi\n */\n#if defined(MBEDTLS_SELF_TEST)\n#define INC_MUL_COUNT   mul_count++;\n#else\n#define INC_MUL_COUNT\n#endif\n\n#define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \\\n                        while( 0 )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi\n * N->s < 0 is a very fast test, which fails only if N is 0\n */\n#define MOD_SUB( N )                                \\\n    while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.\n * We known P, N and the result are positive, so sub_abs is correct, and\n * a bit faster.\n */\n#define MOD_ADD( N )                                \\\n    while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * For curves in short Weierstrass form, we do all the internal operations in\n * Jacobian coordinates.\n *\n * For multiplication, we'll use a comb method with coutermeasueres against\n * SPA, hence timing attacks.\n */\n\n/*\n * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)\n * Cost: 1N := 1I + 3M + 1S\n */\nstatic int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi Zi, ZZi;\n\n    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac( grp, pt );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */\n    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * X = X / Z^2  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );\n\n    /*\n     * Y = Y / Z^3  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );\n\n    /*\n     * Z = 1\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n\n    return( ret );\n}\n\n/*\n * Normalize jacobian coordinates of an array of (pointers to) points,\n * using Montgomery's trick to perform only one inversion mod P.\n * (See for example Cohen's \"A Course in Computational Algebraic Number\n * Theory\", Algorithm 10.3.4.)\n *\n * Warning: fails (returning an error) if one of the points is zero!\n * This should never happen, see choice of w in ecp_mul_comb().\n *\n * Cost: 1N(t) := 1I + (6t - 3)M + 1S\n */\nstatic int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,\n                                   mbedtls_ecp_point *T[], size_t t_len )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi *c, u, Zi, ZZi;\n\n    if( t_len < 2 )\n        return( ecp_normalize_jac( grp, *T ) );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);\n    }\n#endif\n\n    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );\n\n    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * c[i] = Z_0 * ... * Z_i\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );\n    for( i = 1; i < t_len; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );\n        MOD_MUL( c[i] );\n    }\n\n    /*\n     * u = 1 / (Z_0 * ... * Z_n) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );\n\n    for( i = t_len - 1; ; i-- )\n    {\n        /*\n         * Zi = 1 / Z_i mod p\n         * u = 1 / (Z_0 * ... * Z_i) mod P\n         */\n        if( i == 0 ) {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );\n        }\n\n        /*\n         * proceed as in normalize()\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );\n\n        /*\n         * Post-precessing: reclaim some memory by shrinking coordinates\n         * - not storing Z (always 1)\n         * - shrinking other coordinates, but still keeping the same number of\n         *   limbs as P, as otherwise it will too likely be regrown too fast.\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );\n        mbedtls_mpi_free( &T[i]->Z );\n\n        if( i == 0 )\n            break;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n    for( i = 0; i < t_len; i++ )\n        mbedtls_mpi_free( &c[i] );\n    mbedtls_free( c );\n\n    return( ret );\n}\n\n/*\n * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.\n * \"inv\" must be 0 (don't invert) or 1 (invert) or the result will be invalid\n */\nstatic int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,\n                            mbedtls_ecp_point *Q,\n                            unsigned char inv )\n{\n    int ret;\n    unsigned char nonzero;\n    mbedtls_mpi mQY;\n\n    mbedtls_mpi_init( &mQY );\n\n    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );\n    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );\n\ncleanup:\n    mbedtls_mpi_free( &mQY );\n\n    return( ret );\n}\n\n/*\n * Point doubling R = 2 P, Jacobian coordinates\n *\n * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .\n *\n * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR\n * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.\n *\n * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.\n *\n * Cost: 1D := 3M + 4S          (A ==  0)\n *             4M + 4S          (A == -3)\n *             3M + 6S + 1a     otherwise\n */\nstatic int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                           const mbedtls_ecp_point *P )\n{\n    int ret;\n    mbedtls_mpi M, S, T, U;\n\n#if defined(MBEDTLS_SELF_TEST)\n    dbl_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_jac( grp, R, P );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */\n\n    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        /* M = 3(X + Z^2)(X - Z^2) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n    }\n    else\n    {\n        /* M = 3.X^2 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n\n        /* Optimize away for \"koblitz\" curves with A = 0 */\n        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )\n        {\n            /* M += A.Z^4 */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );\n        }\n    }\n\n    /* S = 4.X.Y^2 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );\n\n    /* U = 8.Y^4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    /* T = M^2 - 2.S */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n\n    /* S = M(S - T) - U */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );\n\n    /* U = 2.Y.Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );\n\ncleanup:\n    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );\n\n    return( ret );\n}\n\n/*\n * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)\n *\n * The coordinates of Q must be normalized (= affine),\n * but those of P don't need to. R is not normalized.\n *\n * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.\n * None of these cases can happen as intermediate step in ecp_mul_comb():\n * - at each step, P, Q and R are multiples of the base point, the factor\n *   being less than its order, so none of them is zero;\n * - Q is an odd multiple of the base point, P an even multiple,\n *   due to the choice of precomputed points in the modified comb method.\n * So branches for these cases do not leak secret information.\n *\n * We accept Q->Z being unset (saving memory in tables) as meaning 1.\n *\n * Cost: 1A := 8M + 3S\n */\nstatic int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;\n\n#if defined(MBEDTLS_SELF_TEST)\n    add_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_ADD_MIXED_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );\n    }\n#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */\n\n    /*\n     * Trivial cases: P == 0 or Q == 0 (case 1)\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, Q ) );\n\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, P ) );\n\n    /*\n     * Make sure Q coordinates are normalized\n     */\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );\n\n    /* Special cases (2) and (3) */\n    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )\n    {\n        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )\n        {\n            ret = ecp_double_jac( grp, R, P );\n            goto cleanup;\n        }\n        else\n        {\n            ret = mbedtls_ecp_set_zero( R );\n            goto cleanup;\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n\n    return( ret );\n}\n\n/*\n * Randomize jacobian coordinates:\n * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_jac().\n *\n * This countermeasure was first suggested in [2].\n */\nstatic int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l, ll;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    /* Z = l * Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );\n\n    /* X = l^2 * X */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );\n\n    /* Y = l^3 * Y */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );\n\ncleanup:\n    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );\n\n    return( ret );\n}\n\n/*\n * Check and define parameters used by the comb method (see below for details)\n */\n#if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7\n#error \"MBEDTLS_ECP_WINDOW_SIZE out of bounds\"\n#endif\n\n/* d = ceil( n / w ) */\n#define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2\n\n/* number of precomputed points */\n#define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n\n/*\n * Compute the representation of m that will be used with our comb method.\n *\n * The basic comb method is described in GECC 3.44 for example. We use a\n * modified version that provides resistance to SPA by avoiding zero\n * digits in the representation as in [3]. We modify the method further by\n * requiring that all K_i be odd, which has the small cost that our\n * representation uses one more K_i, due to carries.\n *\n * Also, for the sake of compactness, only the seven low-order bits of x[i]\n * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in\n * the paper): it is set if and only if if s_i == -1;\n *\n * Calling conventions:\n * - x is an array of size d + 1\n * - w is the size, ie number of teeth, of the comb, and must be between\n *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)\n * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d\n *   (the result will be incorrect if these assumptions are not satisfied)\n */\nstatic void ecp_comb_fixed( unsigned char x[], size_t d,\n                            unsigned char w, const mbedtls_mpi *m )\n{\n    size_t i, j;\n    unsigned char c, cc, adjust;\n\n    memset( x, 0, d+1 );\n\n    /* First get the classical comb values (except for x_d = 0) */\n    for( i = 0; i < d; i++ )\n        for( j = 0; j < w; j++ )\n            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;\n\n    /* Now make sure x_1 .. x_d are odd */\n    c = 0;\n    for( i = 1; i <= d; i++ )\n    {\n        /* Add carry and update it */\n        cc   = x[i] & c;\n        x[i] = x[i] ^ c;\n        c = cc;\n\n        /* Adjust if needed, avoiding branches */\n        adjust = 1 - ( x[i] & 0x01 );\n        c   |= x[i] & ( x[i-1] * adjust );\n        x[i] = x[i] ^ ( x[i-1] * adjust );\n        x[i-1] |= adjust << 7;\n    }\n}\n\n/*\n * Precompute points for the comb method\n *\n * If i = i_{w-1} ... i_1 is the binary representation of i, then\n * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P\n *\n * T must be able to hold 2^{w - 1} elements\n *\n * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)\n */\nstatic int ecp_precompute_comb( const mbedtls_ecp_group *grp,\n                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,\n                                unsigned char w, size_t d )\n{\n    int ret;\n    unsigned char i, k;\n    size_t j;\n    mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];\n\n    /*\n     * Set T[0] = P and\n     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );\n\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        cur = T + i;\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );\n        for( j = 0; j < d; j++ )\n            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );\n\n        TT[k++] = cur;\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\n    /*\n     * Compute the remaining ones using the minimal number of additions\n     * Be careful to update T[2^l] only after using it!\n     */\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        j = i;\n        while( j-- )\n        {\n            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );\n            TT[k++] = &T[i + j];\n        }\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]\n */\nstatic int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                            const mbedtls_ecp_point T[], unsigned char t_len,\n                            unsigned char i )\n{\n    int ret;\n    unsigned char ii, j;\n\n    /* Ignore the \"sign\" bit and scale down */\n    ii =  ( i & 0x7Fu ) >> 1;\n\n    /* Read the whole table to thwart cache-based timing attacks */\n    for( j = 0; j < t_len; j++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );\n    }\n\n    /* Safely invert result if i is \"negative\" */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Core multiplication algorithm for the (modified) comb method.\n * This part is actually common with the basic comb method (GECC 3.44)\n *\n * Cost: d A + d D + 1 R\n */\nstatic int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                              const mbedtls_ecp_point T[], unsigned char t_len,\n                              const unsigned char x[], size_t d,\n                              int (*f_rng)(void *, unsigned char *, size_t),\n                              void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point Txi;\n    size_t i;\n\n    mbedtls_ecp_point_init( &Txi );\n\n    /* Start with a non-zero point and randomize its coordinates */\n    i = d;\n    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );\n    if( f_rng != 0 )\n        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );\n\n    while( i-- != 0 )\n    {\n        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );\n        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );\n        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );\n    }\n\ncleanup:\n\n    mbedtls_ecp_point_free( &Txi );\n\n    return( ret );\n}\n\n/*\n * Multiplication using the comb method,\n * for curves in short Weierstrass form\n */\nstatic int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    unsigned char w, m_is_odd, p_eq_g, pre_len, i;\n    size_t d;\n    unsigned char k[COMB_MAX_D + 1];\n    mbedtls_ecp_point *T;\n    mbedtls_mpi M, mm;\n\n    mbedtls_mpi_init( &M );\n    mbedtls_mpi_init( &mm );\n\n    /* we need N to be odd to trnaform m in an odd number, check now */\n    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Minimize the number of multiplications, that is minimize\n     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )\n     * (see costs of the various parts, with 1S = 1M)\n     */\n    w = grp->nbits >= 384 ? 5 : 4;\n\n    /*\n     * If P == G, pre-compute a bit more, since this may be re-used later.\n     * Just adding one avoids upping the cost of the first mul too much,\n     * and the memory cost too.\n     */\n#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1\n    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&\n               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );\n    if( p_eq_g )\n        w++;\n#else\n    p_eq_g = 0;\n#endif\n\n    /*\n     * Make sure w is within bounds.\n     * (The last test is useful only for very small curves in the test suite.)\n     */\n    if( w > MBEDTLS_ECP_WINDOW_SIZE )\n        w = MBEDTLS_ECP_WINDOW_SIZE;\n    if( w >= grp->nbits )\n        w = 2;\n\n    /* Other sizes that depend on w */\n    pre_len = 1U << ( w - 1 );\n    d = ( grp->nbits + w - 1 ) / w;\n\n    /*\n     * Prepare precomputed points: if P == G we want to\n     * use grp->T if already initialized, or initialize it.\n     */\n    T = p_eq_g ? grp->T : NULL;\n\n    if( T == NULL )\n    {\n        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );\n        if( T == NULL )\n        {\n            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );\n\n        if( p_eq_g )\n        {\n            grp->T = T;\n            grp->T_size = pre_len;\n        }\n    }\n\n    /*\n     * Make sure M is odd (M = m or M = N - m, since N is odd)\n     * using the fact that m * P = - (N - m) * P\n     */\n    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );\n\n    /*\n     * Go for comb multiplication, R = M * P\n     */\n    ecp_comb_fixed( k, d, w, &M );\n    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );\n\n    /*\n     * Now get m * P from M * P and normalize it\n     */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n    /* There are two cases where T is not stored in grp:\n     * - P != G\n     * - An intermediate operation failed before setting grp->T\n     * In either case, T must be freed.\n     */\n    if( T != NULL && T != grp->T )\n    {\n        for( i = 0; i < pre_len; i++ )\n            mbedtls_ecp_point_free( &T[i] );\n        mbedtls_free( T );\n    }\n\n    mbedtls_mpi_free( &M );\n    mbedtls_mpi_free( &mm );\n\n    if( ret != 0 )\n        mbedtls_ecp_point_free( R );\n\n    return( ret );\n}\n\n#endif /* ECP_SHORTWEIERSTRASS */\n\n#if defined(ECP_MONTGOMERY)\n/*\n * For Montgomery curves, we do all the internal arithmetic in projective\n * coordinates. Import/export of points uses only the x coordinates, which is\n * internaly represented as X / Z.\n *\n * For scalar multiplication, we'll use a Montgomery ladder.\n */\n\n/*\n * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1\n * Cost: 1M + 1I\n */\nstatic int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )\n{\n    int ret;\n\n#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_mxz( grp, P );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Randomize projective x/z coordinates:\n * (X, Z) -> (l X, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_mxz().\n *\n * This countermeasure was first suggested in [2].\n * Cost: 2M\n */\nstatic int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );\n\ncleanup:\n    mbedtls_mpi_free( &l );\n\n    return( ret );\n}\n\n/*\n * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),\n * for Montgomery curves in x/z coordinates.\n *\n * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3\n * with\n * d =  X1\n * P = (X2, Z2)\n * Q = (X3, Z3)\n * R = (X4, Z4)\n * S = (X5, Z5)\n * and eliminating temporary variables tO, ..., t4.\n *\n * Cost: 5M + 4S\n */\nstatic int ecp_double_add_mxz( const mbedtls_ecp_group *grp,\n                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,\n                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,\n                               const mbedtls_mpi *d )\n{\n    int ret;\n    mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;\n\n#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );\n    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );\n    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );\n\ncleanup:\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );\n    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );\n    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );\n\n    return( ret );\n}\n\n/*\n * Multiplication with Montgomery ladder in x/z coordinates,\n * for curves in Montgomery form\n */\nstatic int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                        int (*f_rng)(void *, unsigned char *, size_t),\n                        void *p_rng )\n{\n    int ret;\n    size_t i;\n    unsigned char b;\n    mbedtls_ecp_point RP;\n    mbedtls_mpi PX;\n\n    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );\n\n    /* Save PX and read from P before writing to R, in case P == R */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );\n\n    /* Set R to zero in modified x/z coordinates */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );\n    mbedtls_mpi_free( &R->Y );\n\n    /* RP.X might be sligtly larger than P, so reduce it */\n    MOD_ADD( RP.X );\n\n    /* Randomize coordinates of the starting point */\n    if( f_rng != NULL )\n        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );\n\n    /* Loop invariant: R = result so far, RP = R + P */\n    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */\n    while( i-- > 0 )\n    {\n        b = mbedtls_mpi_get_bit( m, i );\n        /*\n         *  if (b) R = 2R + P else R = 2R,\n         * which is:\n         *  if (b) double_add( RP, R, RP, R )\n         *  else   double_add( R, RP, R, RP )\n         * but using safe conditional swaps to avoid leaks\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );\n\n    return( ret );\n}\n\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Multiplication R = m * P\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    /* Common sanity checks */\n    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||\n        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\ncleanup:\n\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    return( ret );\n}\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * Check that an affine point is valid as a public key,\n * short weierstrass curves (SEC1 3.2.3.1)\n */\nstatic int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi YY, RHS;\n\n    /* pt coordinates must be normalized for our checks */\n    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||\n        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );\n\n    /*\n     * YY = Y^2\n     * RHS = X (X^2 + A) + B = X^3 + A X + B\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );\n\n    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )\n        ret = MBEDTLS_ERR_ECP_INVALID_KEY;\n\ncleanup:\n\n    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );\n\n    return( ret );\n}\n#endif /* ECP_SHORTWEIERSTRASS */\n\n/*\n * R = m * P with shortcuts for m == 1 and m == -1\n * NOT constant-time - ONLY for short Weierstrass!\n */\nstatic int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,\n                                      mbedtls_ecp_point *R,\n                                      const mbedtls_mpi *m,\n                                      const mbedtls_ecp_point *P )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n    }\n    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Linear combination\n * NOT constant-time\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_ecp_point mP;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    mbedtls_ecp_point_init( &mP );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    mbedtls_ecp_point_free( &mP );\n\n    return( ret );\n}\n\n\n#if defined(ECP_MONTGOMERY)\n/*\n * Check validity of a public key for Montgomery curves with x-only schemes\n */\nstatic int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* [Curve25519 p. 5] Just check X is the correct number of bytes */\n    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    return( 0 );\n}\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Check that a point is valid as a public key\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* Must use affine coordinates */\n    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        return( ecp_check_pubkey_mx( grp, pt ) );\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        return( ecp_check_pubkey_sw( grp, pt ) );\n#endif\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Check that an mbedtls_mpi is valid as a private key\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )\n{\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* see [Curve25519] page 5 */\n        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 1 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 2 ) != 0 ||\n            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* see SEC1 3.2 */\n        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_SHORTWEIERSTRASS */\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Generate a keypair with configurable base point\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* [M225] page 5 */\n        size_t b;\n\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n        } while( mbedtls_mpi_bitlen( d ) == 0);\n\n        /* Make sure the most significant bit is nbits */\n        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */\n        if( b > grp->nbits )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );\n        else\n            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );\n\n        /* Make sure the last three bits are unset */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );\n    }\n    else\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* SEC1 3.2.1: Generate d such that 1 <= n < N */\n        int count = 0;\n\n        /*\n         * Match the procedure given in RFC 6979 (deterministic ECDSA):\n         * - use the same byte ordering;\n         * - keep the leftmost nbits bits of the generated octet string;\n         * - try until result is in the desired range.\n         * This also avoids any biais, which is especially important for ECDSA.\n         */\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );\n\n            /*\n             * Each try has at worst a probability 1/2 of failing (the msb has\n             * a probability 1/2 of being 0, and then the result will be < N),\n             * so after 30 tries failure probability is a most 2**(-30).\n             *\n             * For most curves, 1 try is enough with overwhelming probability,\n             * since N starts with a lot of 1s in binary, but some curves\n             * such as secp224k1 are actually very close to the worst case.\n             */\n            if( ++count > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );\n    }\n    else\n#endif /* ECP_SHORTWEIERSTRASS */\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\ncleanup:\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );\n}\n\n/*\n * Generate key pair, wrapper for conventional base point\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,\n                             mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );\n}\n\n/*\n * Generate a keypair, prettier wrapper\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );\n}\n\n/*\n * Check a public-private key pair\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )\n{\n    int ret;\n    mbedtls_ecp_point Q;\n    mbedtls_ecp_group grp;\n\n    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||\n        pub->grp.id != prv->grp.id ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_ecp_group_init( &grp );\n\n    /* mbedtls_ecp_mul() needs a non-const group... */\n    mbedtls_ecp_group_copy( &grp, &prv->grp );\n\n    /* Also checks d is valid */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );\n\n    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * Checkup routine\n */\nint mbedtls_ecp_self_test( int verbose )\n{\n    int ret;\n    size_t i;\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point R, P;\n    mbedtls_mpi m;\n    unsigned long add_c_prev, dbl_c_prev, mul_c_prev;\n    /* exponents especially adapted for secp192r1 */\n    const char *exponents[] =\n    {\n        \"000000000000000000000000000000000000000000000001\", /* one */\n        \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830\", /* N - 1 */\n        \"5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25\", /* random */\n        \"400000000000000000000000000000000000000000000000\", /* one and zeros */\n        \"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", /* all ones */\n        \"555555555555555555555555555555555555555555555555\", /* 101010... */\n    };\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &R );\n    mbedtls_ecp_point_init( &P );\n    mbedtls_mpi_init( &m );\n\n    /* Use secp192r1 if available, or any available curve */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );\n#else\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );\n#endif\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #1 (constant op_count, base point G): \" );\n\n    /* Do a dummy multiplication first to trigger precomputation */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #2 (constant op_count, other point): \" );\n    /* We computed P = 2G last time, use it */\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret < 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &R );\n    mbedtls_ecp_point_free( &P );\n    mbedtls_mpi_free( &m );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n", "/* BEGIN_HEADER */\n#include \"mbedtls/ecdsa.h\"\n/* END_HEADER */\n\n/* BEGIN_DEPENDENCIES\n * depends_on:MBEDTLS_ECDSA_C\n * END_DEPENDENCIES\n */\n\n/* BEGIN_CASE */\nvoid ecdsa_prim_random( int id )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point Q;\n    mbedtls_mpi d, r, s;\n    rnd_pseudo_info rnd_info;\n    unsigned char buf[66];\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );\n    memset( buf, 0, sizeof( buf ) );\n\n    /* prepare material for signature */\n    TEST_ASSERT( rnd_pseudo_rand( &rnd_info, buf, sizeof( buf ) ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_gen_keypair( &grp, &d, &Q, &rnd_pseudo_rand, &rnd_info )\n                 == 0 );\n\n    TEST_ASSERT( mbedtls_ecdsa_sign( &grp, &r, &s, &d, buf, sizeof( buf ),\n                             &rnd_pseudo_rand, &rnd_info ) == 0 );\n    TEST_ASSERT( mbedtls_ecdsa_verify( &grp, buf, sizeof( buf ), &Q, &r, &s ) == 0 );\n\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n}\n/* END_CASE */\n\n/* BEGIN_CASE */\nvoid ecdsa_prim_test_vectors( int id, char *d_str, char *xQ_str, char *yQ_str,\n                              char *k_str, char *hash_str, char *r_str,\n                              char *s_str, int result )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point Q;\n    mbedtls_mpi d, r, s, r_check, s_check;\n    unsigned char hash[66], rnd_buf[66];\n    size_t hlen;\n    rnd_buf_info rnd_info;\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    mbedtls_mpi_init( &r_check ); mbedtls_mpi_init( &s_check );\n    memset( hash, 0, sizeof( hash ) );\n    memset( rnd_buf, 0, sizeof( rnd_buf ) );\n\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_point_read_string( &Q, 16, xQ_str, yQ_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &d, 16, d_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &r_check, 16, r_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &s_check, 16, s_str ) == 0 );\n    hlen = unhexify(hash, hash_str);\n    rnd_info.buf = rnd_buf;\n    rnd_info.length = unhexify( rnd_buf, k_str );\n\n    /* Fix rnd_buf by shifting it left if necessary */\n    if( grp.nbits % 8 != 0 )\n    {\n        unsigned char shift = 8 - ( grp.nbits % 8 );\n        size_t i;\n\n        for( i = 0; i < rnd_info.length - 1; i++ )\n            rnd_buf[i] = rnd_buf[i] << shift | rnd_buf[i+1] >> ( 8 - shift );\n\n        rnd_buf[rnd_info.length-1] <<= shift;\n    }\n\n    TEST_ASSERT( mbedtls_ecdsa_sign( &grp, &r, &s, &d, hash, hlen,\n                 rnd_buffer_rand, &rnd_info ) == result );\n\n    if ( result == 0)\n    {\n        TEST_ASSERT( mbedtls_mpi_cmp_mpi( &r, &r_check ) == 0 );\n        TEST_ASSERT( mbedtls_mpi_cmp_mpi( &s, &s_check ) == 0 );\n\n        TEST_ASSERT( mbedtls_ecdsa_verify( &grp, hash, hlen, &Q, &r_check, &s_check ) == 0 );\n    }\n\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n    mbedtls_mpi_free( &r_check ); mbedtls_mpi_free( &s_check );\n}\n/* END_CASE */\n\n/* BEGIN_CASE depends_on:MBEDTLS_ECDSA_DETERMINISTIC */\nvoid ecdsa_det_test_vectors( int id, char *d_str, int md_alg,\n                             char *msg, char *r_str, char *s_str )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_mpi d, r, s, r_check, s_check;\n    unsigned char hash[MBEDTLS_MD_MAX_SIZE];\n    size_t hlen;\n    const mbedtls_md_info_t *md_info;\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    mbedtls_mpi_init( &r_check ); mbedtls_mpi_init( &s_check );\n    memset( hash, 0, sizeof( hash ) );\n\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &d, 16, d_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &r_check, 16, r_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &s_check, 16, s_str ) == 0 );\n\n    md_info = mbedtls_md_info_from_type( md_alg );\n    TEST_ASSERT( md_info != NULL );\n    hlen = mbedtls_md_get_size( md_info );\n    TEST_ASSERT( mbedtls_md( md_info, (const unsigned char *) msg,\n                 strlen( msg ), hash ) == 0 );\n\n    TEST_ASSERT( mbedtls_ecdsa_sign_det( &grp, &r, &s, &d, hash, hlen, md_alg ) == 0 );\n\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &r, &r_check ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &s, &s_check ) == 0 );\n\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n    mbedtls_mpi_free( &r_check ); mbedtls_mpi_free( &s_check );\n}\n/* END_CASE */\n\n/* BEGIN_CASE depends_on:MBEDTLS_SHA256_C */\nvoid ecdsa_write_read_random( int id )\n{\n    mbedtls_ecdsa_context ctx;\n    rnd_pseudo_info rnd_info;\n    unsigned char hash[32];\n    unsigned char sig[200];\n    size_t sig_len, i;\n\n    mbedtls_ecdsa_init( &ctx );\n    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );\n    memset( hash, 0, sizeof( hash ) );\n    memset( sig, 0x2a, sizeof( sig ) );\n\n    /* prepare material for signature */\n    TEST_ASSERT( rnd_pseudo_rand( &rnd_info, hash, sizeof( hash ) ) == 0 );\n\n    /* generate signing key */\n    TEST_ASSERT( mbedtls_ecdsa_genkey( &ctx, id, &rnd_pseudo_rand, &rnd_info ) == 0 );\n\n    /* generate and write signature, then read and verify it */\n    TEST_ASSERT( mbedtls_ecdsa_write_signature( &ctx, MBEDTLS_MD_SHA256,\n                 hash, sizeof( hash ),\n                 sig, &sig_len, &rnd_pseudo_rand, &rnd_info ) == 0 );\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) == 0 );\n\n    /* check we didn't write past the announced length */\n    for( i = sig_len; i < sizeof( sig ); i++ )\n        TEST_ASSERT( sig[i] == 0x2a );\n\n    /* try verification with invalid length */\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len - 1 ) != 0 );\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len + 1 ) != 0 );\n\n    /* try invalid sequence tag */\n    sig[0]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[0]--;\n\n    /* try modifying r */\n    sig[10]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[10]--;\n\n    /* try modifying s */\n    sig[sig_len - 1]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[sig_len - 1]--;\n\nexit:\n    mbedtls_ecdsa_free( &ctx );\n}\n/* END_CASE */\n\n"], "fixing_code": ["mbed TLS ChangeLog (Sorted per branch, date)\n\n= mbed TLS x.x.x branch released xxxx-xx-xx\n\nSecurity\n   * Fix a missing error detection in ECJPAKE. This could have caused a\n     predictable shared secret if a hardware accelerator failed and the other\n     side of the key exchange had a similar bug.\n   * The deterministic ECDSA calculation reused the scheme's HMAC-DRBG to\n     implement blinding. Because of this for the same key and message the same\n     blinding value was generated. This reduced the effectiveness of the\n     countermeasure and leaked information about the private key through side\n     channels. Reported by Jack Lloyd.\n\nAPI Changes\n   * The new function mbedtls_ecdsa_sign_det_ext() is similar to\n     mbedtls_ecdsa_sign_det() but allows passing an external RNG for the\n     purpose of blinding.\n   * The new function mbedtls_ecp_gen_privkey() allows to generate a private\n     key without generating the public part of the pair.\n\nBugfix\n   * Fix to allow building test suites with any warning that detects unused\n     functions. Fixes #1628.\n   * Fix typo in net_would_block(). Fixes #528 reported by github-monoculture.\n   * Remove redundant include file in timing.c. Fixes #2640 reported by irwir.\n   * Fix Visual Studio Release x64 build configuration by inheriting\n     PlatformToolset from the project configuration. Fixes #1430 reported by\n     irwir.\n   * Enable Suite B with subset of ECP curves. Make sure the code compiles even\n     if some curves are not defined. Fixes #1591 reported by dbedev.\n   * Fix misuse of signed arithmetic in the HAVEGE module. #2598\n\nChanges\n   * Make `make clean` clean all programs always. Fixes #1862.\n\n= mbed TLS 2.7.11 branch released 2019-06-11\n\nSecurity\n   * Make mbedtls_ecdh_get_params return an error if the second key\n     belongs to a different group from the first. Before, if an application\n     passed keys that belonged to different group, the first key's data was\n     interpreted according to the second group, which could lead to either\n     an error or a meaningless output from mbedtls_ecdh_get_params. In the\n     latter case, this could expose at most 5 bits of the private key.\n\nBugfix\n   * Server's RSA certificate in certs.c was SHA-1 signed. In the default\n     mbedTLS configuration only SHA-2 signed certificates are accepted.\n     This certificate is used in the demo server programs, which lead the\n     client programs to fail at the peer's certificate verification\n     due to an unacceptable hash signature. The certificate has been\n     updated to one that is SHA-256 signed. Fix contributed by\n     Illya Gerasymchuk.\n   * Fix private key DER output in the key_app_writer example. File contents\n     were shifted by one byte, creating an invalid ASN.1 tag. Fixed by\n     Christian Walther in #2239.\n   * Fix potential memory leak in X.509 self test. Found and fixed by\n     Junhwan Park, #2106.\n   * Fix 1-byte buffer overflow in mbedtls_mpi_write_string() when\n     used with negative inputs. Found by Guido Vranken in #2404. Credit to\n     OSS-Fuzz.\n   * Fix bugs in the AEAD test suite which would be exposed by ciphers which\n     either used both encrypt and decrypt key schedules, or which perform padding.\n     GCM and CCM were not affected. Fixed by Jack Lloyd.\n   * Fix incorrect default port number in ssl_mail_client example's usage.\n     Found and fixed by irwir. #2337\n   * Add missing parentheses around parameters in the definition of the\n     public macro MBEDTLS_X509_ID_FLAG. This could lead to invalid evaluation\n     in case operators binding less strongly than subtraction were used\n     for the parameter.\n   * Add a check for MBEDTLS_X509_CRL_PARSE_C in ssl_server2, guarding the crl\n     sni entry parameter. Reported by inestlerode in #560.\n   * Fix missing bounds checks in X.509 parsing functions that could\n     lead to successful parsing of ill-formed X.509 CRTs. Fixes #2437.\n   * Fix multiple X.509 functions previously returning ASN.1 low-level error\n     codes to always wrap these codes into X.509 high level error codes before\n     returning. Fixes #2431.\n\nChanges\n   * Return from various debugging routines immediately if the\n     provided SSL context is unset.\n   * Remove dead code from bignum.c in the default configuration.\n     Found by Coverity, reported and fixed by Peter Kolbus (Garmin). Fixes #2309.\n   * Add test for minimal value of MBEDTLS_MPI_WINDOW_SIZE to all.sh.\n     Contributed by Peter Kolbus (Garmin).\n   * Change wording in the `mbedtls_ssl_conf_max_frag_len()`'s documentation to\n     improve clarity. Fixes #2258.\n   * Improve debug output of ssl_client2 and ssl_server2 in case suitable\n     test CRTs are available because MBEDTLS_PEM_PARSE_C is disabled.\n     Fixes #2254.\n   * Replace multiple uses of MD2 by SHA-256 in X.509 test suite. Fixes #821.\n\n= mbed TLS 2.7.10 branch released 2019-03-19\n\nFeatures\n   * Add MBEDTLS_REMOVE_3DES_CIPHERSUITES to allow removing 3DES ciphersuites\n     from the default list (enabled by default). See\n     https://sweet32.info/SWEET32_CCS16.pdf.\n\nBugfix\n   * Run the AD too long test only if MBEDTLS_CCM_ALT is not defined.\n     Raised as a comment in #1996.\n   * Fix returning the value 1 when mbedtls_ecdsa_genkey failed.\n   * Remove a duplicate #include in a sample program. Fixed by Masashi Honma #2326.\n   * Reduce stack usage of `mpi_write_hlp()` by eliminating recursion.\n     Fixes #2190.\n   * Ensure that unused bits are zero when writing ASN.1 bitstrings when using\n     mbedtls_asn1_write_bitstring().\n   * Fix issue when writing the named bitstrings in KeyUsage and NsCertType\n     extensions in CSRs and CRTs that caused these bitstrings to not be encoded\n     correctly as trailing zeroes were not accounted for as unused bits in the\n     leading content octet. Fixes #1610.\n\nChanges\n   * Include configuration file in all header files that use configuration,\n     instead of relying on other header files that they include.\n     Inserted as an enhancement for #1371\n   * Add support for alternative CSR headers, as used by Microsoft and defined\n     in RFC 7468. Found by Michael Ernst. Fixes #767.\n   * Fix clobber list in MIPS assembly for large integer multiplication.\n     Previously, this could lead to functionally incorrect assembly being\n     produced by some optimizing compilers, showing up as failures in\n     e.g. RSA or ECC signature operations. Reported in #1722, fix suggested\n     by Aurelien Jarno and submitted by Jeffrey Martin.\n   * Reduce the complexity of the timing tests. They were assuming more than the\n     underlying OS actually guarantees.\n   * Ciphersuites based on 3DES now have the lowest priority by default when\n     they are enabled.\n\n= mbed TLS 2.7.9 branch released 2018-12-21\n\nBugfix\n   * Fix for Clang, which was reporting a warning for the bignum.c inline\n     assembly for AMD64 targets creating string literals greater than those\n     permitted by the ISO C99 standard. Found by Aaron Jones. Fixes #482.\n   * Fix runtime error in `mbedtls_platform_entropy_poll()` when run\n     through qemu user emulation. Reported and fix suggested by randombit\n     in #1212. Fixes #1212.\n   * Fix an unsafe bounds check when restoring an SSL session from a ticket.\n     This could lead to a buffer overflow, but only in case ticket authentication\n     was broken. Reported and fix suggested by Guido Vranken in #659.\n   * Add explicit integer to enumeration type casts to example program\n     programs/pkey/gen_key which previously led to compilation failure\n     on some toolchains. Reported by phoenixmcallister. Fixes #2170.\n   * Clarify documentation of mbedtls_ssl_set_own_cert() regarding the absence\n     of check for certificate/key matching. Reported by Attila Molnar, #507.\n\n= mbed TLS 2.7.8 branch released 2018-11-30\n\nSecurity\n   * Fix timing variations and memory access variations in RSA PKCS#1 v1.5\n     decryption that could lead to a Bleichenbacher-style padding oracle\n     attack. In TLS, this affects servers that accept ciphersuites based on\n     RSA decryption (i.e. ciphersuites whose name contains RSA but not\n     (EC)DH(E)). Discovered by Eyal Ronen (Weizmann Institute),  Robert Gillham\n     (University of Adelaide), Daniel Genkin (University of Michigan),\n     Adi Shamir (Weizmann Institute), David Wong (NCC Group), and Yuval Yarom\n     (University of Adelaide, Data61). The attack is described in more detail\n     in the paper available here: http://cat.eyalro.net/cat.pdf  CVE-2018-19608\n   * In mbedtls_mpi_write_binary(), don't leak the exact size of the number\n     via branching and memory access patterns. An attacker who could submit\n     a plaintext for RSA PKCS#1 v1.5 decryption but only observe the timing\n     of the decryption and not its result could nonetheless decrypt RSA\n     plaintexts and forge RSA signatures. Other asymmetric algorithms may\n     have been similarly vulnerable. Reported by Eyal Ronen, Robert Gillham,\n     Daniel Genkin, Adi Shamir, David Wong and Yuval Yarom.\n   * Wipe sensitive buffers on the stack in the CTR_DRBG and HMAC_DRBG\n     modules.\n\nAPI Changes\n   * The new functions mbedtls_ctr_drbg_update_ret() and\n     mbedtls_hmac_drbg_update_ret() are similar to mbedtls_ctr_drbg_update()\n     and mbedtls_hmac_drbg_update() respectively, but the new functions\n     report errors whereas the old functions return void. We recommend that\n     applications use the new functions.\n\n= mbed TLS 2.7.7 branch released 2018-11-19\n\nSecurity\n   * Fix overly strict DN comparison when looking for CRLs belonging to a\n     particular CA. This previously led to ignoring CRLs when the CRL's issuer\n     name and the CA's subject name differed in their string encoding (e.g.,\n     one using PrintableString and the other UTF8String) or in the choice of\n     upper and lower case. Reported by Henrik Andersson of Bosch GmbH in issue\n     #1784.\n   * Fix a flawed bounds check in server PSK hint parsing. In case the\n     incoming message buffer was placed within the first 64KiB of address\n     space and a PSK-(EC)DHE ciphersuite was used, this allowed an attacker\n     to trigger a memory access up to 64KiB beyond the incoming message buffer,\n     potentially leading to application crash or information disclosure.\n   * Fix mbedtls_mpi_is_prime() to use more rounds of probabilistic testing. The\n     previous settings for the number of rounds made it practical for an\n     adversary to construct non-primes that would be erroneously accepted as\n     primes with high probability. This does not have an impact on the\n     security of TLS, but can matter in other contexts with numbers chosen\n     potentially by an adversary that should be prime and can be validated.\n     For example, the number of rounds was enough to securely generate RSA key\n     pairs or Diffie-Hellman parameters, but was insufficient to validate\n     Diffie-Hellman parameters properly.\n     See \"Prime and Prejudice\" by by Martin R. Albrecht and Jake Massimo and\n     Kenneth G. Paterson and Juraj Somorovsky.\n\nBugfix\n   * Fix failure in hmac_drbg in the benchmark sample application, when\n     MBEDTLS_THREADING_C is defined. Found by TrinityTonic, #1095\n   * Fix a bug in the update function for SSL ticket keys which previously\n     invalidated keys of a lifetime of less than a 1s. Fixes #1968.\n   * Fix a bug in the record decryption routine ssl_decrypt_buf()\n     which led to accepting properly authenticated but improperly\n     padded records in case of CBC ciphersuites using Encrypt-then-MAC.\n   * Fix wrong order of freeing in programs/ssl/ssl_server2 example\n     application leading to a memory leak in case both\n     MBEDTLS_MEMORY_BUFFER_ALLOC_C and MBEDTLS_MEMORY_BACKTRACE are set.\n     Fixes #2069.\n   * Fix memory leak and freeing without initialization in the example\n     program programs/x509/cert_write. Fixes #1422.\n   * Ignore IV in mbedtls_cipher_set_iv() when the cipher mode is\n     MBEDTLS_MODE_ECB. Found by ezdevelop. Fixes for #1091.\n   * Zeroize memory used for reassembling handshake messages after use.\n   * Use `mbedtls_zeroize()` instead of `memset()` for zeroization of\n     sensitive data in the example programs aescrypt2 and crypt_and_hash.\n   * Fix compilation failure for configurations which use compile time\n     replacements of standard calloc/free functions through the macros\n     MBEDTLS_PLATFORM_CALLOC_MACRO and MBEDTLS_PLATFORM_FREE_MACRO.\n     Reported by ole-de and ddhome2006. Fixes #882, #1642 and #1706.\n\nChanges\n   * Add tests for session resumption in DTLS.\n   * Close a test gap in (D)TLS between the client side and the server side:\n     test the handling of large packets and small packets on the client side\n     in the same way as on the server side.\n   * Change the dtls_client and dtls_server samples to work by default over\n     IPv6 and optionally by a build option over IPv4.\n   * Change the use of Windows threading to use Microsoft Visual C++ runtime\n     calls, rather than Win32 API calls directly. This is necessary to avoid\n     conflict with C runtime usage. Found and fixed by irwir.\n   * Improve documentation of mbedtls_ssl_get_verify_result().\n     Fixes #517 reported by github-monoculture.\n\n= mbed TLS 2.7.6 branch released 2018-08-31\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate extensions parsing. In case of receiving malformed\n     input (extensions length field equal to 0), an illegal read of one byte\n     beyond the input buffer is made. Found and analyzed by Nathan Crandall.\n\nBugfix\n   * Fix a potential memory leak in mbedtls_ssl_setup() function. An allocation\n     failure in the function could lead to other buffers being leaked.\n   * Fixes a missing test dependency on MBEDTLS_ARC4_C. #1890\n   * Fix a memory leak in ecp_mul_comb() if ecp_precompute_comb() fails.\n     Fix contributed by Espressif Systems.\n   * Add ecc extensions only if an ecc based ciphersuite is used.\n     This improves compliance to RFC 4492, and as a result, solves\n     interoperability issues with BouncyCastle. Raised by milenamil in #1157.\n   * Fix potential use-after-free in mbedtls_ssl_get_max_frag_len()\n     and mbedtls_ssl_get_record_expansion() after a session reset. Fixes #1941.\n   * Fix a miscalculation of the maximum record expansion in\n     mbedtls_ssl_get_record_expansion() in case of CBC ciphersuites\n     in (D)TLS versions 1.1 or higher. Fixes #1914.\n   * Fix a bug that caused SSL/TLS clients to incorrectly abort the handshake\n     with TLS versions 1.1 and earlier when the server requested authentication\n     without providing a list of CAs. This was due to an overly strict bounds\n     check in parsing the CertificateRequest message, introduced in\n     Mbed TLS 2.12.0. Fixes #1954.\n   * Fix undefined shifts with negative values in certificates parsing\n     (found by Catena cyber using oss-fuzz)\n   * Fix memory leak and free without initialization in pk_encrypt\n     and pk_decrypt example programs. Reported by Brace Stout. Fixes #1128.\n\nChanges\n   * Improve compatibility with some alternative CCM implementations by using\n     CCM test vectors from RAM.\n\n= mbed TLS 2.7.5 branch released 2018-07-25\n\nSecurity\n   * Fix a vulnerability in TLS ciphersuites based on CBC and using SHA-384,\n     in (D)TLS 1.0 to 1.2, that allowed an active network attacker to\n     partially recover the plaintext of messages under some conditions by\n     exploiting timing measurements. With DTLS, the attacker could perform\n     this recovery by sending many messages in the same connection. With TLS\n     or if mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only\n     worked if the same secret (for example a HTTP Cookie) has been repeatedly\n     sent over connections manipulated by the attacker. Connections using GCM\n     or CCM instead of CBC, using hash sizes other than SHA-384, or using\n     Encrypt-then-Mac (RFC 7366) were not affected. The vulnerability was\n     caused by a miscalculation (for SHA-384) in a countermeasure to the\n     original Lucky 13 attack. Found by Kenny Paterson, Eyal Ronen and Adi\n     Shamir.\n   * Fix a vulnerability in TLS ciphersuites based on CBC, in (D)TLS 1.0 to\n     1.2, that allowed a local attacker, able to execute code on the local\n     machine as well as manipulate network packets, to partially recover the\n     plaintext of messages under some conditions by using a cache attack\n     targeting an internal MD/SHA buffer. With TLS or if\n     mbedtls_ssl_conf_dtls_badmac_limit() was used, the attack only worked if\n     the same secret (for example a HTTP Cookie) has been repeatedly sent over\n     connections manipulated by the attacker. Connections using GCM or CCM\n     instead of CBC or using Encrypt-then-Mac (RFC 7366) were not affected.\n     Found by Kenny Paterson, Eyal Ronen and Adi Shamir.\n   * Add a counter-measure against a vulnerability in TLS ciphersuites based\n     on CBC, in (D)TLS 1.0 to 1.2, that allowed a local attacker, able to\n     execute code on the local machine as well as manipulate network packets,\n     to partially recover the plaintext of messages under some conditions (see\n     previous entry) by using a cache attack targeting the SSL input record\n     buffer. Connections using GCM or CCM instead of CBC or using\n     Encrypt-then-Mac (RFC 7366) were not affected. Found by Kenny Paterson,\n     Eyal Ronen and Adi Shamir.\n\nBugfix\n   * Fix compilation error on C++, because of a variable named new.\n     Found and fixed by Hirotaka Niisato in #1783.\n   * Fix the inline assembly for the MPI multiply helper function for i386 and\n     i386 with SSE2. Found by L\u00e1szl\u00f3 Lang\u00f3. Fixes #1550\n   * Fix a memory leak in mbedtls_x509_csr_parse(), found by catenacyber,\n     Philippe Antoine. Fixes #1623.\n   * Clarify documentation for mbedtls_ssl_write() to include 0 as a valid\n     return value. Found by @davidwu2000. #839\n   * Fix the key_app_writer example which was writing a leading zero byte which\n     was creating an invalid ASN.1 tag. Found by Aryeh R. Fixes #1257.\n   * Remove unused headers included in x509.c. Found by Chris Hanson and fixed\n     by Brendan Shanks. Part of a fix for #992.\n   * Fix compilation error when MBEDTLS_ARC4_C is disabled and\n     MBEDTLS_CIPHER_NULL_CIPHER is enabled. Found by TrinityTonic in #1719.\n   * Added length checks to some TLS parsing functions. Found and fixed by\n     Philippe Antoine from Catena cyber. #1663.\n   * Fix namespacing in header files. Remove the `mbedtls` namespacing in\n     the `#include` in the header files. Resolves #857\n   * Fix compiler warning of 'use before initialisation' in\n     mbedtls_pk_parse_key(). Found by Martin Boye Petersen and fixed by Dawid\n     Drozd. #1098\n   * Fix decryption for zero length messages (which contain all padding) when a\n     CBC based ciphersuite is used together with Encrypt-then-MAC. Previously,\n     such a message was wrongly reported as an invalid record and therefore lead\n     to the connection being terminated. Seen most often with OpenSSL using\n     TLS 1.0. Reported by @kFYatek and by Conor Murphy on the forum. Fix\n     contributed by Espressif Systems. Fixes #1632\n   * Fix ssl_client2 example to send application data with 0-length content\n     when the request_size argument is set to 0 as stated in the documentation.\n     Fixes #1833.\n   * Correct the documentation for `mbedtls_ssl_get_session()`. This API has\n     deep copy of the session, and the peer certificate is not lost. Fixes #926.\n\nChanges\n   * Fail when receiving a TLS alert message with an invalid length, or invalid\n     zero-length messages when using TLS 1.2. Contributed by Espressif Systems.\n   * Change the shebang line in Perl scripts to look up perl in the PATH.\n     Contributed by fbrosson in #1533.\n\n= mbed TLS 2.7.4 branch released 2018-06-18\n\nBugfix\n   * Fix redundant declaration of mbedtls_ssl_list_ciphersuites. Raised by\n     TrinityTonic. #1359.\n   * Fix for redefinition of _WIN32_WINNT to avoid overriding a definition\n     used by user applications. Found and fixed by Fabio Alessandrelli.\n   * Fix braces in mbedtls_memory_buffer_alloc_status(). Found by sbranden, #552.\n   * Fix an issue with MicroBlaze support in bn_mul.h which was causing the\n     build to fail. Found by zv-io. Fixes #1651.\n   * Fix compilation warnings with IAR toolchain, on 32 bit platform.\n     Reported by rahmanih in #683\n\nChanges\n   * Support TLS testing in out-of-source builds using cmake. Fixes #1193.\n   * Changed CMake defaults for IAR to treat all compiler warnings as errors.\n   * Changed the Clang parameters used in the CMake build files to work for\n     versions later than 3.6. Versions of Clang earlier than this may no longer\n     work. Fixes #1072\n\n= mbed TLS 2.7.3 branch released 2018-04-30\n\nSecurity\n   * Fix an issue in the X.509 module which could lead to a buffer overread\n     during certificate validation. Additionally, the issue could also lead to\n     unnecessary callback checks being made or to some validation checks to be\n     omitted. The overread could be triggered remotely, while the other issues\n     would require a non DER-compliant certificate to be correctly signed by a\n     trusted CA, or a trusted CA with a non DER-compliant certificate. Found by\n     luocm. Fixes #825.\n   * Fix the buffer length assertion in the ssl_parse_certificate_request()\n     function which led to an arbitrary overread of the message buffer. The\n     overreads could be caused by receiving a malformed message at the point\n     where an optional signature algorithms list is expected when the signature\n     algorithms section is too short. In builds with debug output, the overread\n     data is output with the debug data.\n   * Fix a client-side bug in the validation of the server's ciphersuite choice\n     which could potentially lead to the client accepting a ciphersuite it didn't\n     offer or a ciphersuite that cannot be used with the TLS or DTLS version\n     chosen by the server. This could lead to corruption of internal data\n     structures for some configurations.\n\nBugfix\n   * Fix a spurious uninitialized variable warning in cmac.c. Fix independently\n     contributed by Brian J Murray and David Brown.\n   * Add missing dependencies in test suites that led to build failures\n     in configurations that omit certain hashes or public-key algorithms.\n     Fixes #1040.\n   * Fix C89 incompatibility in benchmark.c. Contributed by Brendan Shanks.\n     #1353\n   * Add missing dependencies for MBEDTLS_HAVE_TIME_DATE and\n     MBEDTLS_VERSION_FEATURES in some test suites. Contributed by\n     Deomid Ryabkov. Fixes #1299, #1475.\n   * Fix the Makefile build process for building shared libraries on Mac OS X.\n     Fixed by mnacamura.\n   * Fix parsing of PKCS#8 encoded Elliptic Curve keys. Previously Mbed TLS was\n     unable to parse keys which had only the optional parameters field of the\n     ECPrivateKey structure. Found by Jethro Beekman, fixed in #1379.\n   * Return the plaintext data more quickly on unpadded CBC decryption, as\n     stated in the mbedtls_cipher_update() documentation. Contributed by\n     Andy Leiserson.\n   * Fix overriding and ignoring return values when parsing and writing to\n     a file in pk_sign program. Found by kevlut in #1142.\n   * Fix buffer length assertions in the ssl_parse_certificate_request()\n     function which leads to a potential one byte overread of the message\n     buffer.\n   * Fix invalid buffer sizes passed to zlib during record compression and\n     decompression.\n\nChanges\n   * Support cmake builds where Mbed TLS is a subproject. Fix contributed\n     independently by Matthieu Volat and Arne Schwabe.\n   * Improve testing in configurations that omit certain hashes or\n     public-key algorithms. Includes contributions by Gert van Dijk.\n   * Improve negative testing of X.509 parsing.\n   * Do not define global mutexes around readdir() and gmtime() in\n     configurations where the feature is disabled. Found and fixed by Gergely\n     Budai.\n   * Provide an empty implementation of mbedtls_pkcs5_pbes2() when\n     MBEDTLS_ASN1_PARSE_C is not enabled. This allows the use of PBKDF2\n     without PBES2. Fixed by Marcos Del Sol Vives.\n   * Improve the documentation of mbedtls_net_accept(). Contributed by Ivan\n     Krylov.\n   * Improve the documentation of mbedtls_ssl_write(). Suggested by\n     Paul Sokolovsky in #1356.\n   * Add an option in the Makefile to support ar utilities where the operation\n     letter must not be prefixed by '-', such as LLVM. Found and fixed by\n     Alex Hixon.\n   * Allow configuring the shared library extension by setting the DLEXT\n     environment variable when using the project makefiles.\n   * In the SSL module, when f_send, f_recv or f_recv_timeout report\n     transmitting more than the required length, return an error. Raised by\n     Sam O'Connor in #1245.\n   * Improve robustness of mbedtls_ssl_derive_keys against the use of\n     HMAC functions with non-HMAC ciphersuites. Independently contributed\n     by Jiayuan Chen in #1377. Fixes #1437.\n\n= mbed TLS 2.7.2 branch released 2018-03-16\n\nSecurity\n   * Verify results of RSA private key operations to defend\n     against Bellcore glitch attack.\n   * Fix a buffer overread in ssl_parse_server_key_exchange() that could cause\n     a crash on invalid input.\n   * Fix a buffer overread in ssl_parse_server_psk_hint() that could cause a\n     crash on invalid input.\n   * Fix CRL parsing to reject CRLs containing unsupported critical\n     extensions. Found by Falko Strenzke and Evangelos Karatsiolis.\n\nFeatures\n   * Extend PKCS#8 interface by introducing support for the entire SHA\n     algorithms family when encrypting private keys using PKCS#5 v2.0.\n     This allows reading encrypted PEM files produced by software that\n     uses PBKDF2-SHA2, such as OpenSSL 1.1. Submitted by Antonio Quartulli,\n     OpenVPN Inc. Fixes #1339\n\nBugfix\n   * Fix setting version TLSv1 as minimal version, even if TLS 1\n     is not enabled. Set MBEDTLS_SSL_MIN_MAJOR_VERSION\n     and MBEDTLS_SSL_MIN_MINOR_VERSION instead of\n     MBEDTLS_SSL_MAJOR_VERSION_3 and MBEDTLS_SSL_MINOR_VERSION_1. #664\n   * Fix compilation error on Mingw32 when _TRUNCATE is defined. Use _TRUNCATE\n     only if __MINGW32__ not defined. Fix suggested by Thomas Glanzmann and\n     Nick Wilson on issue #355\n   * In test_suite_pk, pass valid parameters when testing for hash length\n     overflow. #1179\n   * Fix memory allocation corner cases in memory_buffer_alloc.c module. Found\n     by Guido Vranken. #639\n   * Log correct number of ciphersuites used in Client Hello message. #918\n   * Fix X509 CRT parsing that would potentially accept an invalid tag when\n     parsing the subject alternative names.\n   * Fix a possible arithmetic overflow in ssl_parse_server_key_exchange()\n     that could cause a key exchange to fail on valid data.\n   * Fix a possible arithmetic overflow in ssl_parse_server_psk_hint() that\n     could cause a key exchange to fail on valid data.\n   * Don't define mbedtls_aes_decrypt and mbedtls_aes_encrypt under\n     MBEDTLS_DEPRECATED_REMOVED. #1388\n   * Fix a 1-byte heap buffer overflow (read-only) during private key parsing.\n     Found through fuzz testing.\n\nChanges\n   * Clarify the documentation of mbedtls_ssl_setup.\n\n= mbed TLS 2.7.1 branch released 2018-02-23\n\nDefault behavior changes\n   * The truncated HMAC extension now conforms to RFC 6066. This means\n     that when both sides of a TLS connection negotiate the truncated\n     HMAC extension, Mbed TLS can now interoperate with other\n     compliant implementations, but this breaks interoperability with\n     prior versions of Mbed TLS. To restore the old behavior, enable\n     the (deprecated) option MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT in\n     config.h. Found by Andreas Walz (ivESK, Offenburg University of\n     Applied Sciences).\n\nSecurity\n   * Fix implementation of the truncated HMAC extension. The previous\n     implementation allowed an offline 2^80 brute force attack on the\n     HMAC key of a single, uninterrupted connection (with no\n     resumption of the session).\n\nBugfix\n   * Fix the name of a DHE parameter that was accidentally changed in 2.7.0.\n     Fixes #1358.\n   * Fix test_suite_pk to work on 64-bit ILP32 systems. #849\n   * Fix mbedtls_x509_crt_profile_suiteb, which used to reject all certificates\n     with flag MBEDTLS_X509_BADCERT_BAD_PK even when the key type was correct.\n     In the context of SSL, this resulted in handshake failure. Reported by\n     daniel in the Mbed TLS forum. #1351\n   * Fix Windows x64 builds with the included mbedTLS.sln file. #1347\n\nChanges\n   * Fix tag lengths and value ranges in the documentation of CCM encryption.\n     Contributed by Mathieu Briand.\n   * Fix typo in a comment ctr_drbg.c. Contributed by Paul Sokolovsky.\n   * MD functions deprecated in 2.7.0 are no longer inline, to provide\n     a migration path for those depending on the library's ABI.\n\n= mbed TLS 2.7.0 branch released 2018-02-03\n\nSecurity\n   * Fix a heap corruption issue in the implementation of the truncated HMAC\n     extension. When the truncated HMAC extension is enabled and CBC is used,\n     sending a malicious application packet could be used to selectively corrupt\n     6 bytes on the peer's heap, which could potentially lead to crash or remote\n     code execution. The issue could be triggered remotely from either side in\n     both TLS and DTLS. CVE-2018-0488\n   * Fix a buffer overflow in RSA-PSS verification when the hash was too large\n     for the key size, which could potentially lead to crash or remote code\n     execution. Found by Seth Terashima, Qualcomm Product Security Initiative,\n     Qualcomm Technologies Inc. CVE-2018-0487\n   * Fix buffer overflow in RSA-PSS verification when the unmasked data is all\n     zeros.\n   * Fix an unsafe bounds check in ssl_parse_client_psk_identity() when adding\n     64 KiB to the address of the SSL buffer and causing a wrap around.\n   * Fix a potential heap buffer overflow in mbedtls_ssl_write(). When the (by\n     default enabled) maximum fragment length extension is disabled in the\n     config and the application data buffer passed to mbedtls_ssl_write\n     is larger than the internal message buffer (16384 bytes by default), the\n     latter overflows. The exploitability of this issue depends on whether the\n     application layer can be forced into sending such large packets. The issue\n     was independently reported by Tim Nordell via e-mail and by Florin Petriuc\n     and sjorsdewit on GitHub. Fix proposed by Florin Petriuc in #1022.\n     Fixes #707.\n   * Add a provision to prevent compiler optimizations breaking the time\n     constancy of mbedtls_ssl_safer_memcmp().\n   * Ensure that buffers are cleared after use if they contain sensitive data.\n     Changes were introduced in multiple places in the library.\n   * Set PEM buffer to zero before freeing it, to avoid decoded private keys\n     being leaked to memory after release.\n   * Fix dhm_check_range() failing to detect trivial subgroups and potentially\n     leaking 1 bit of the private key. Reported by prashantkspatil.\n   * Make mbedtls_mpi_read_binary() constant-time with respect to the input\n     data. Previously, trailing zero bytes were detected and omitted for the\n     sake of saving memory, but potentially leading to slight timing\n     differences. Reported by Marco Macchetti, Kudelski Group.\n   * Wipe stack buffer temporarily holding EC private exponent\n     after keypair generation.\n   * Fix a potential heap buffer over-read in ALPN extension parsing\n     (server-side). Could result in application crash, but only if an ALPN\n     name larger than 16 bytes had been configured on the server.\n   * Change default choice of DHE parameters from untrustworthy RFC 5114\n     to RFC 3526 containing parameters generated in a nothing-up-my-sleeve\n     manner.\n\nFeatures\n   * Allow comments in test data files.\n   * The selftest program can execute a subset of the tests based on command\n     line arguments.\n   * New unit tests for timing. Improve the self-test to be more robust\n     when run on a heavily-loaded machine.\n   * Add alternative implementation support for CCM and CMAC (MBEDTLS_CCM_ALT,\n     MBEDTLS_CMAC_ALT). Submitted by Steven Cooreman, Silicon Labs.\n   * Add support for alternative implementations of GCM, selected by the\n     configuration flag MBEDTLS_GCM_ALT.\n   * Add support for alternative implementations for ECDSA, controlled by new\n     configuration flags MBEDTLS_ECDSA_SIGN_ALT, MBEDTLS_ECDSA_VERIFY_ALT and\n     MBEDTLS_ECDSDA_GENKEY_AT in config.h.\n     The following functions from the ECDSA module can be replaced\n     with alternative implementation:\n     mbedtls_ecdsa_sign(), mbedtls_ecdsa_verify() and mbedtls_ecdsa_genkey().\n   * Add support for alternative implementation of ECDH, controlled by the\n     new configuration flags MBEDTLS_ECDH_COMPUTE_SHARED_ALT and\n     MBEDTLS_ECDH_GEN_PUBLIC_ALT in config.h.\n     The following functions from the ECDH module can be replaced\n     with an alternative implementation:\n     mbedtls_ecdh_gen_public() and mbedtls_ecdh_compute_shared().\n   * Add support for alternative implementation of ECJPAKE, controlled by\n     the new configuration flag MBEDTLS_ECJPAKE_ALT.\n   * Add mechanism to provide alternative implementation of the DHM module.\n\nAPI Changes\n   * Extend RSA interface by multiple functions allowing structure-\n     independent setup and export of RSA contexts. Most notably,\n     mbedtls_rsa_import() and mbedtls_rsa_complete() are introduced for setting\n     up RSA contexts from partial key material and having them completed to the\n     needs of the implementation automatically. This allows to setup private RSA\n     contexts from keys consisting of N,D,E only, even if P,Q are needed for the\n     purpose or CRT and/or blinding.\n   * The configuration option MBEDTLS_RSA_ALT can be used to define alternative\n     implementations of the RSA interface declared in rsa.h.\n   * The following functions in the message digest modules (MD2, MD4, MD5,\n     SHA1, SHA256, SHA512) have been deprecated and replaced as shown below.\n     The new functions change the return type from void to int to allow\n     returning error codes when using MBEDTLS_<MODULE>_ALT.\n     mbedtls_<MODULE>_starts() -> mbedtls_<MODULE>_starts_ret()\n     mbedtls_<MODULE>_update() -> mbedtls_<MODULE>_update_ret()\n     mbedtls_<MODULE>_finish() -> mbedtls_<MODULE>_finish_ret()\n     mbedtls_<MODULE>_process() -> mbedtls_internal_<MODULE>_process()\n\nNew deprecations\n   * Deprecate usage of RSA primitives with non-matching key-type\n     (e.g. signing with a public key).\n   * Direct manipulation of structure fields of RSA contexts is deprecated.\n     Users are advised to use the extended RSA API instead.\n   * Deprecate usage of message digest functions that return void\n     (mbedtls_<MODULE>_starts, mbedtls_<MODULE>_update,\n     mbedtls_<MODULE>_finish and mbedtls_<MODULE>_process where <MODULE> is\n     any of MD2, MD4, MD5, SHA1, SHA256, SHA512) in favor of functions\n     that can return an error code.\n   * Deprecate untrustworthy DHE parameters from RFC 5114. Superseded by\n     parameters from RFC 3526 or the newly added parameters from RFC 7919.\n   * Deprecate hex string DHE constants MBEDTLS_DHM_RFC3526_MODP_2048_P etc.\n     Supserseded by binary encoded constants MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN\n     etc.\n   * Deprecate mbedtls_ssl_conf_dh_param() for setting default DHE parameters\n     from hex strings. Superseded by mbedtls_ssl_conf_dh_param_bin()\n     accepting DHM parameters in binary form, matching the new constants.\n\nBugfix\n   * Fix ssl_parse_record_header() to silently discard invalid DTLS records\n     as recommended in RFC 6347 Section 4.1.2.7.\n   * Fix memory leak in mbedtls_ssl_set_hostname() when called multiple times.\n     Found by projectgus and jethrogb, #836.\n   * Fix usage help in ssl_server2 example. Found and fixed by Bei Lin.\n   * Parse signature algorithm extension when renegotiating. Previously,\n     renegotiated handshakes would only accept signatures using SHA-1\n     regardless of the peer's preferences, or fail if SHA-1 was disabled.\n   * Fix leap year calculation in x509_date_is_valid() to ensure that invalid\n     dates on leap years with 100 and 400 intervals are handled correctly. Found\n     by Nicholas Wilson. #694\n   * Fix some invalid RSA-PSS signatures with keys of size 8N+1 that were\n     accepted. Generating these signatures required the private key.\n   * Fix out-of-memory problem when parsing 4096-bit PKCS8-encrypted RSA keys.\n     Found independently by Florian in the mbed TLS forum and by Mishamax.\n     #878, #1019.\n   * Fix variable used before assignment compilation warnings with IAR\n     toolchain. Found by gkerrien38.\n   * Fix unchecked return codes from AES, DES and 3DES functions in\n     pem_aes_decrypt(), pem_des_decrypt() and pem_des3_decrypt() respectively.\n     If a call to one of the functions of the cryptographic primitive modules\n     failed, the error may not be noticed by the function\n     mbedtls_pem_read_buffer() causing it to return invalid values. Found by\n     Guido Vranken. #756\n   * Include configuration file in md.h, to fix compilation warnings.\n     Reported by aaronmdjones in #1001\n   * Correct extraction of signature-type from PK instance in X.509 CRT and CSR\n     writing routines that prevented these functions to work with alternative\n     RSA implementations. Raised by J.B. in the Mbed TLS forum. Fixes #1011.\n   * Don't print X.509 version tag for v1 CRT's, and omit extensions for\n     non-v3 CRT's.\n   * Fix bugs in RSA test suite under MBEDTLS_NO_PLATFORM_ENTROPY. #1023 #1024\n   * Fix net_would_block() to avoid modification by errno through fcntl() call.\n     Found by nkolban. Fixes #845.\n   * Fix handling of handshake messages in mbedtls_ssl_read() in case\n     MBEDTLS_SSL_RENEGOTIATION is disabled. Found by erja-gp.\n   * Add a check for invalid private parameters in mbedtls_ecdsa_sign().\n     Reported by Yolan Romailler.\n   * Fix word size check in in pk.c to not depend on MBEDTLS_HAVE_INT64.\n   * Fix incorrect unit in benchmark output. #850\n   * Add size-checks for record and handshake message content, securing\n     fragile yet non-exploitable code-paths.\n   * Fix crash when calling mbedtls_ssl_cache_free() twice. Found by\n     MilenkoMitrovic, #1104\n   * Fix mbedtls_timing_alarm(0) on Unix and MinGW.\n   * Fix use of uninitialized memory in mbedtls_timing_get_timer() when reset=1.\n   * Fix possible memory leaks in mbedtls_gcm_self_test().\n   * Added missing return code checks in mbedtls_aes_self_test().\n   * Fix issues in RSA key generation program programs/x509/rsa_genkey and the\n     RSA test suite where the failure of CTR DRBG initialization lead to\n     freeing an RSA context and several MPI's without proper initialization\n     beforehand.\n   * Fix error message in programs/pkey/gen_key.c. Found and fixed by Chris Xue.\n   * Fix programs/pkey/dh_server.c so that it actually works with dh_client.c.\n     Found and fixed by Martijn de Milliano.\n   * Fix an issue in the cipher decryption with the mode\n     MBEDTLS_PADDING_ONE_AND_ZEROS that sometimes accepted invalid padding.\n     Note, this padding mode is not used by the TLS protocol. Found and fixed by\n     Micha Kraus.\n   * Fix the entropy.c module to not call mbedtls_sha256_starts() or\n     mbedtls_sha512_starts() in the mbedtls_entropy_init() function.\n   * Fix the entropy.c module to ensure that mbedtls_sha256_init() or\n     mbedtls_sha512_init() is called before operating on the relevant context\n     structure. Do not assume that zeroizing a context is a correct way to\n     reset it. Found independently by ccli8 on Github.\n   * In mbedtls_entropy_free(), properly free the message digest context.\n   * Fix status handshake status message in programs/ssl/dtls_client.c. Found\n     and fixed by muddog.\n\nChanges\n   * Extend cert_write example program by options to set the certificate version\n     and the message digest. Further, allow enabling/disabling of authority\n     identifier, subject identifier and basic constraints extensions.\n   * Only check for necessary RSA structure fields in `mbedtls_rsa_private`. In\n     particular, don't require P,Q if neither CRT nor blinding are\n     used. Reported and fix proposed independently by satur9nine and sliai\n     on GitHub.\n   * Only run AES-192 self-test if AES-192 is available. Fixes #963.\n   * Tighten the RSA PKCS#1 v1.5 signature verification code and remove the\n     undeclared dependency of the RSA module on the ASN.1 module.\n   * Update all internal usage of deprecated message digest functions to the\n     new ones with return codes. In particular, this modifies the\n     mbedtls_md_info_t structure. Propagate errors from these functions\n     everywhere except some locations in the ssl_tls.c module.\n   * Improve CTR_DRBG error handling by propagating underlying AES errors.\n   * Add MBEDTLS_ERR_XXX_HW_ACCEL_FAILED error codes for all cryptography\n     modules where the software implementation can be replaced by a hardware\n     implementation.\n   * Add explicit warnings for the use of MD2, MD4, MD5, SHA-1, DES and ARC4\n     throughout the library.\n\n= mbed TLS 2.6.0 branch released 2017-08-10\n\nSecurity\n   * Fix authentication bypass in SSL/TLS: when authmode is set to optional,\n     mbedtls_ssl_get_verify_result() would incorrectly return 0 when the peer's\n     X.509 certificate chain had more than MBEDTLS_X509_MAX_INTERMEDIATE_CA\n     (default: 8) intermediates, even when it was not trusted. This could be\n     triggered remotely from either side. (With authmode set to 'required'\n     (the default), the handshake was correctly aborted).\n   * Reliably wipe sensitive data after use in the AES example applications\n     programs/aes/aescrypt2 and programs/aes/crypt_and_hash.\n     Found by Laurent Simon.\n\nFeatures\n   * Add the functions mbedtls_platform_setup() and mbedtls_platform_teardown()\n     and the context struct mbedtls_platform_context to perform\n     platform-specific setup and teardown operations. The macro\n     MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT allows the functions to be overridden\n     by the user in a platform_alt.h file. These new functions are required in\n     some embedded environments to provide a means of initialising underlying\n     cryptographic acceleration hardware.\n\nAPI Changes\n   * Reverted API/ABI breaking changes introduced in mbed TLS 2.5.1, to make the\n     API consistent with mbed TLS 2.5.0. Specifically removed the inline\n     qualifier from the functions mbedtls_aes_decrypt, mbedtls_aes_encrypt,\n     mbedtls_ssl_ciphersuite_uses_ec and mbedtls_ssl_ciphersuite_uses_psk. Found\n     by James Cowgill. #978\n   * Certificate verification functions now set flags to -1 in case the full\n     chain was not verified due to an internal error (including in the verify\n     callback) or chain length limitations.\n   * With authmode set to optional, the TLS handshake is now aborted if the\n     verification of the peer's certificate failed due to an overlong chain or\n     a fatal error in the verify callback.\n\nBugfix\n   * Add a check if iv_len is zero in GCM, and return an error if it is zero.\n     Reported by roberto. #716\n   * Replace preprocessor condition from #if defined(MBEDTLS_THREADING_PTHREAD)\n     to #if defined(MBEDTLS_THREADING_C) as the library cannot assume they will\n     always be implemented by pthread support. #696\n   * Fix a resource leak on Windows platforms in mbedtls_x509_crt_parse_path(),\n     in the case of an error. Found by redplait. #590\n   * Add MBEDTLS_MPI_CHK to check for error value of mbedtls_mpi_fill_random.\n     Reported and fix suggested by guidovranken. #740\n   * Fix conditional preprocessor directives in bignum.h to enable 64-bit\n     compilation when using ARM Compiler 6.\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 CRLs. The overflow could enable maliciously constructed CRLs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix potential integer overflow in the version verification for DER\n     encoded X.509 CSRs. The overflow could enable maliciously constructed CSRs\n     to bypass the version verification check. Found by Peng Li/Yueh-Hsun Lin,\n     KNOX Security, Samsung Research America\n   * Fix a potential integer overflow in the version verification for DER\n     encoded X.509 certificates. The overflow could enable maliciously\n     constructed certificates to bypass the certificate verification check.\n   * Fix a call to the libc function time() to call the platform abstraction\n     function mbedtls_time() instead. Found by wairua. #666\n   * Avoid shadowing of time and index functions through mbed TLS function\n     arguments. Found by inestlerode. #557.\n\nChanges\n   * Added config.h option MBEDTLS_NO_UDBL_DIVISION, to prevent the use of\n     64-bit division. This is useful on embedded platforms where 64-bit division\n     created a dependency on external libraries. #708\n   * Removed mutexes from ECP hardware accelerator code. Now all hardware\n     accelerator code in the library leaves concurrency handling to the\n     platform. Reported by Steven Cooreman. #863\n   * Define the macro MBEDTLS_AES_ROM_TABLES in the configuration file\n     config-no-entropy.h to reduce the RAM footprint.\n   * Added a test script that can be hooked into git that verifies commits\n     before they are pushed.\n   * Improve documentation of PKCS1 decryption functions.\n\n= mbed TLS 2.5.1 released 2017-06-21\n\nSecurity\n   * Fixed unlimited overread of heap-based buffer in mbedtls_ssl_read().\n     The issue could only happen client-side with renegotiation enabled.\n     Could result in DoS (application crash) or information leak\n     (if the application layer sent data read from mbedtls_ssl_read()\n     back to the server or to a third party). Can be triggered remotely.\n   * Removed SHA-1 and RIPEMD-160 from the default hash algorithms for\n     certificate verification. SHA-1 can be turned back on with a compile-time\n     option if needed.\n   * Fixed offset in FALLBACK_SCSV parsing that caused TLS server to fail to\n     detect it sometimes. Reported by Hugo Leisink. #810\n   * Tighten parsing of RSA PKCS#1 v1.5 signatures, to avoid a\n     potential Bleichenbacher/BERserk-style attack.\n\nBugfix\n   * Remove size zero arrays from ECJPAKE test suite. Size zero arrays are not\n     valid C and they prevented the test from compiling in Visual Studio 2015\n     and with GCC using the -Wpedantic compilation option.\n   * Fix insufficient support for signature-hash-algorithm extension,\n     resulting in compatibility problems with Chrome. Found by hfloyrd. #823\n   * Fix behaviour that hid the original cause of fatal alerts in some cases\n     when sending the alert failed. The fix makes sure not to hide the error\n     that triggered the alert.\n   * Fix SSLv3 renegotiation behaviour and stop processing data received from\n     peer after sending a fatal alert to refuse a renegotiation attempt.\n     Previous behaviour was to keep processing data even after the alert has\n     been sent.\n   * Accept empty trusted CA chain in authentication mode\n     MBEDTLS_SSL_VERIFY_OPTIONAL.\n     Found by jethrogb. #864\n   * Fix implementation of mbedtls_ssl_parse_certificate() to not annihilate\n     fatal errors in authentication mode MBEDTLS_SSL_VERIFY_OPTIONAL and to\n     reflect bad EC curves within verification result.\n   * Fix bug that caused the modular inversion function to accept the invalid\n     modulus 1 and therefore to hang. Found by blaufish. #641.\n   * Fix incorrect sign computation in modular exponentiation when the base is\n     a negative MPI. Previously the result was always negative. Found by Guido\n     Vranken.\n   * Fix a numerical underflow leading to stack overflow in mpi_read_file()\n     that was triggered uppon reading an empty line. Found by Guido Vranken.\n\nChanges\n   * Send fatal alerts in more cases. The previous behaviour was to skip\n     sending the fatal alert and just drop the connection.\n   * Clarify ECDSA documentation and improve the sample code to avoid\n     misunderstanding and potentially dangerous use of the API. Pointed out\n     by Jean-Philippe Aumasson.\n\n= mbed TLS 2.5.0 branch released 2017-05-17\n\nSecurity\n   * Wipe stack buffers in RSA private key operations\n     (rsa_rsaes_pkcs1_v15_decrypt(), rsa_rsaes_oaep_decrypt). Found by Laurent\n     Simon.\n   * Add exponent blinding to RSA private operations as a countermeasure\n     against side-channel attacks like the cache attack described in\n     https://arxiv.org/abs/1702.08719v2.\n     Found and fix proposed by Michael Schwarz, Samuel Weiser, Daniel Gruss,\n     Cl\u00e9mentine Maurice and Stefan Mangard.\n\nFeatures\n   * Add hardware acceleration support for the Elliptic Curve Point module.\n     This involved exposing parts of the internal interface to enable\n     replacing the core functions and adding and alternative, module level\n     replacement support for enabling the extension of the interface.\n   * Add a new configuration option to 'mbedtls_ssl_config' to enable\n     suppressing the CA list in Certificate Request messages. The default\n     behaviour has not changed, namely every configured CAs name is included.\n\nAPI Changes\n   * The following functions in the AES module have been deprecated and replaced\n     by the functions shown below. The new functions change the return type from\n     void to int to allow returning error codes when using MBEDTLS_AES_ALT,\n     MBEDTLS_AES_DECRYPT_ALT or MBEDTLS_AES_ENCRYPT_ALT.\n     mbedtls_aes_decrypt() -> mbedtls_internal_aes_decrypt()\n     mbedtls_aes_encrypt() -> mbedtls_internal_aes_encrypt()\n\nBugfix\n   * Remove macros from compat-1.3.h that correspond to deleted items from most\n     recent versions of the library. Found by Kyle Keen.\n   * Fixed issue in the Threading module that prevented mutexes from\n     initialising. Found by sznaider. #667 #843\n   * Add checks in the PK module for the RSA functions on 64-bit systems.\n     The PK and RSA modules use different types for passing hash length and\n     without these checks the type cast could lead to data loss. Found by Guido\n     Vranken.\n\n= mbed TLS 2.4.2 branch released 2017-03-08\n\nSecurity\n   * Add checks to prevent signature forgeries for very large messages while\n     using RSA through the PK module in 64-bit systems. The issue was caused by\n     some data loss when casting a size_t to an unsigned int value in the\n     functions rsa_verify_wrap(), rsa_sign_wrap(), rsa_alt_sign_wrap() and\n     mbedtls_pk_sign(). Found by Jean-Philippe Aumasson.\n   * Fixed potential livelock during the parsing of a CRL in PEM format in\n     mbedtls_x509_crl_parse(). A string containing a CRL followed by trailing\n     characters after the footer could result in the execution of an infinite\n     loop. The issue can be triggered remotely. Found by Greg Zaverucha,\n     Microsoft.\n   * Removed MD5 from the allowed hash algorithms for CertificateRequest and\n     CertificateVerify messages, to prevent SLOTH attacks against TLS 1.2.\n     Introduced by interoperability fix for #513.\n   * Fixed a bug that caused freeing a buffer that was allocated on the stack,\n     when verifying the validity of a key on secp224k1. This could be\n     triggered remotely for example with a maliciously constructed certificate\n     and potentially could lead to remote code execution on some platforms.\n     Reported independently by rongsaws and Aleksandar Nikolic, Cisco Talos\n     team. #569 CVE-2017-2784\n\nBugfix\n   * Fix output certificate verification flags set by x509_crt_verify_top() when\n     traversing a chain of trusted CA. The issue would cause both flags,\n     MBEDTLS_X509_BADCERT_NOT_TRUSTED and MBEDTLS_X509_BADCERT_EXPIRED, to be\n     set when the verification conditions are not met regardless of the cause.\n     Found by Harm Verhagen and inestlerode. #665 #561\n   * Fix the redefinition of macro ssl_set_bio to an undefined symbol\n     mbedtls_ssl_set_bio_timeout in compat-1.3.h, by removing it.\n     Found by omlib-lin. #673\n   * Fix unused variable/function compilation warnings in pem.c, x509_crt.c and\n     x509_csr.c that are reported when building mbed TLS with a config.h that\n     does not define MBEDTLS_PEM_PARSE_C. Found by omnium21. #562\n   * Fix incorrect renegotiation condition in ssl_check_ctr_renegotiate() that\n     would compare 64 bits of the record counter instead of 48 bits as indicated\n     in RFC 6347 Section 4.3.1. This could cause the execution of the\n     renegotiation routines at unexpected times when the protocol is DTLS. Found\n     by wariua. #687\n   * Fixed multiple buffer overreads in mbedtls_pem_read_buffer() when parsing\n     the input string in PEM format to extract the different components. Found\n     by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_ctr_drbg_reseed() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflows in mbedtls_cipher_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_md2_update() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed potential arithmetic overflow in mbedtls_base64_decode() that could\n     cause buffer bound checks to be bypassed. Found by Eyal Itkin.\n   * Fixed heap overreads in mbedtls_x509_get_time(). Found by Peng\n     Li/Yueh-Hsun Lin, KNOX Security, Samsung Research America.\n   * Fix potential memory leak in mbedtls_x509_crl_parse(). The leak was caused\n     by missing calls to mbedtls_pem_free() in cases when a\n     MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT error was encountered. Found and\n     fix proposed by Guido Vranken. #722\n   * Fixed the templates used to generate project and solution files for Visual\n     Studio 2015 as well as the files themselves, to remove a build warning\n     generated in Visual Studio 2015. Reported by Steve Valliere. #742\n   * Fix a resource leak in ssl_cookie, when using MBEDTLS_THREADING_C.\n     Raised and fix suggested by Alan Gillingham in the mbed TLS forum. #771\n   * Fix 1 byte buffer overflow in mbedtls_mpi_write_string() when the MPI\n     number to write in hexadecimal is negative and requires an odd number of\n     digits. Found and fixed by Guido Vranken.\n   * Fix unlisted DES configuration dependency in some pkparse test cases. Found\n     by inestlerode. #555\n\n= mbed TLS 2.4.1 branch released 2016-12-13\n\nChanges\n   * Update to CMAC test data, taken from - NIST Special Publication 800-38B -\n     Recommendation for Block Cipher Modes of Operation: The CMAC Mode for\n     Authentication \u2013 October  2016\n\n= mbed TLS 2.4.0 branch released 2016-10-17\n\nSecurity\n   * Removed the MBEDTLS_SSL_AEAD_RANDOM_IV option, because it was not compliant\n     with RFC-5116 and could lead to session key recovery in very long TLS\n     sessions. \"Nonce-Disrespecting Adversaries Practical Forgery Attacks on GCM in\n     TLS\" - H. Bock, A. Zauner, S. Devlin, J. Somorovsky, P. Jovanovic.\n     https://eprint.iacr.org/2016/475.pdf\n   * Fixed potential stack corruption in mbedtls_x509write_crt_der() and\n     mbedtls_x509write_csr_der() when the signature is copied to the buffer\n     without checking whether there is enough space in the destination. The\n     issue cannot be triggered remotely. Found by Jethro Beekman.\n\nFeatures\n   * Added support for CMAC for AES and 3DES and AES-CMAC-PRF-128, as defined by\n     NIST SP 800-38B, RFC-4493 and RFC-4615.\n   * Added hardware entropy selftest to verify that the hardware entropy source\n     is functioning correctly.\n   * Added a script to print build environment info for diagnostic use in test\n     scripts, which is also now called by all.sh.\n   * Added the macro MBEDTLS_X509_MAX_FILE_PATH_LEN that enables the user to\n     configure the maximum length of a file path that can be buffered when\n     calling mbedtls_x509_crt_parse_path().\n   * Added a configuration file config-no-entropy.h that configures the subset of\n     library features that do not require an entropy source.\n   * Added the macro MBEDTLS_ENTROPY_MIN_HARDWARE in config.h. This allows users\n     to configure the minimum number of bytes for entropy sources using the\n     mbedtls_hardware_poll() function.\n\nBugfix\n   * Fix for platform time abstraction to avoid dependency issues where a build\n     may need time but not the standard C library abstraction, and added\n     configuration consistency checks to check_config.h\n   * Fix dependency issue in Makefile to allow parallel builds.\n   * Fix incorrect handling of block lengths in crypt_and_hash.c sample program,\n     when GCM is used. Found by udf2457. #441\n   * Fix for key exchanges based on ECDH-RSA or ECDH-ECDSA which weren't\n     enabled unless others were also present. Found by David Fernandez. #428\n   * Fix for out-of-tree builds using CMake. Found by jwurzer, and fix based on\n     a contribution from Tobias Tangemann. #541\n   * Fixed cert_app.c sample program for debug output and for use when no root\n     certificates are provided.\n   * Fix conditional statement that would cause a 1 byte overread in\n     mbedtls_asn1_get_int(). Found and fixed by Guido Vranken. #599\n   * Fixed pthread implementation to avoid unintended double initialisations\n     and double frees. Found by Niklas Amnebratt.\n   * Fixed the sample applications gen_key.c, cert_req.c and cert_write.c for\n     builds where the configuration MBEDTLS_PEM_WRITE_C is not defined. Found\n     by inestlerode. #559.\n   * Fix mbedtls_x509_get_sig() to update the ASN1 type in the mbedtls_x509_buf\n     data structure until after error checks are successful. Found by\n     subramanyam-c. #622\n   * Fix documentation and implementation missmatch for function arguments of\n     mbedtls_gcm_finish(). Found by cmiatpaar. #602\n   * Guarantee that P>Q at RSA key generation. Found by inestlerode. #558\n   * Fix potential byte overread when verifying malformed SERVER_HELLO in\n     ssl_parse_hello_verify_request() for DTLS. Found by Guido Vranken.\n   * Fix check for validity of date when parsing in mbedtls_x509_get_time().\n     Found by subramanyam-c. #626\n   * Fix compatibility issue with Internet Explorer client authentication,\n     where the limited hash choices prevented the client from sending its\n     certificate. Found by teumas. #513\n   * Fix compilation without MBEDTLS_SELF_TEST enabled.\n\nChanges\n   * Extended test coverage of special cases, and added new timing test suite.\n   * Removed self-tests from the basic-built-test.sh script, and added all\n     missing self-tests to the test suites, to ensure self-tests are only\n     executed once.\n   * Added support for 3 and 4 byte lengths to mbedtls_asn1_write_len().\n   * Added support for a Yotta specific configuration file -\n     through the symbol YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE.\n   * Added optimization for code space for X.509/OID based on configured\n     features. Contributed by Aviv Palivoda.\n   * Renamed source file library/net.c to library/net_sockets.c to avoid\n     naming collision in projects which also have files with the common name\n     net.c. For consistency, the corresponding header file, net.h, is marked as\n     deprecated, and its contents moved to net_sockets.h.\n   * Changed the strategy for X.509 certificate parsing and validation, to no\n     longer disregard certificates with unrecognised fields.\n\n= mbed TLS 2.3.0 branch released 2016-06-28\n\nSecurity\n   * Fix missing padding length check in mbedtls_rsa_rsaes_pkcs1_v15_decrypt\n     required by PKCS1 v2.2\n   * Fix potential integer overflow to buffer overflow in\n     mbedtls_rsa_rsaes_pkcs1_v15_encrypt and mbedtls_rsa_rsaes_oaep_encrypt\n     (not triggerable remotely in (D)TLS).\n   * Fix a potential integer underflow to buffer overread in\n     mbedtls_rsa_rsaes_oaep_decrypt. It is not triggerable remotely in\n     SSL/TLS.\n\nFeatures\n   * Support for platform abstraction of the standard C library time()\n     function.\n\nBugfix\n   * Fix bug in mbedtls_mpi_add_mpi() that caused wrong results when the three\n     arguments where the same (in-place doubling). Found and fixed by Janos\n     Follath. #309\n   * Fix potential build failures related to the 'apidoc' target, introduced\n     in the previous patch release. Found by Robert Scheck. #390 #391\n   * Fix issue in Makefile that prevented building using armar. #386\n   * Fix memory leak that occurred only when ECJPAKE was enabled and ECDHE and\n     ECDSA was disabled in config.h . The leak didn't occur by default.\n   * Fix an issue that caused valid certificates to be rejected whenever an\n     expired or not yet valid certificate was parsed before a valid certificate\n     in the trusted certificate list.\n   * Fix bug in mbedtls_x509_crt_parse that caused trailing extra data in the\n     buffer after DER certificates to be included in the raw representation.\n   * Fix issue that caused a hang when generating RSA keys of odd bitlength\n   * Fix bug in mbedtls_rsa_rsaes_pkcs1_v15_encrypt that made null pointer\n     dereference possible.\n   * Fix issue that caused a crash if invalid curves were passed to\n     mbedtls_ssl_conf_curves. #373\n   * Fix issue in ssl_fork_server which was preventing it from functioning. #429\n   * Fix memory leaks in test framework\n   * Fix test in ssl-opt.sh that does not run properly with valgrind\n   * Fix unchecked calls to mmbedtls_md_setup(). Fix by Brian Murray. #502\n\nChanges\n   * On ARM platforms, when compiling with -O0 with GCC, Clang or armcc5,\n     don't use the optimized assembly for bignum multiplication. This removes\n     the need to pass -fomit-frame-pointer to avoid a build error with -O0.\n   * Disabled SSLv3 in the default configuration.\n   * Optimized mbedtls_mpi_zeroize() for MPI integer size. (Fix by Alexey\n     Skalozub).\n   * Fix non-compliance server extension handling. Extensions for SSLv3 are now\n     ignored, as required by RFC6101.\n\n= mbed TLS 2.2.1 released 2016-01-05\n\nSecurity\n   * Fix potential double free when mbedtls_asn1_store_named_data() fails to\n     allocate memory. Only used for certificate generation, not triggerable\n     remotely in SSL/TLS. Found by Rafa\u0142 Przywara. #367\n   * Disable MD5 handshake signatures in TLS 1.2 by default to prevent the\n     SLOTH attack on TLS 1.2 server authentication (other attacks from the\n     SLOTH paper do not apply to any version of mbed TLS or PolarSSL).\n     https://www.mitls.org/pages/attacks/SLOTH\n\nBugfix\n   * Fix over-restrictive length limit in GCM. Found by Andreas-N. #362\n   * Fix bug in certificate validation that caused valid chains to be rejected\n     when the first intermediate certificate has pathLenConstraint=0. Found by\n     Nicholas Wilson. Introduced in mbed TLS 2.2.0. #280\n   * Removed potential leak in mbedtls_rsa_rsassa_pkcs1_v15_sign(), found by\n     JayaraghavendranK. #372\n   * Fix suboptimal handling of unexpected records that caused interop issues\n     with some peers over unreliable links. Avoid dropping an entire DTLS\n     datagram if a single record in a datagram is unexpected, instead only\n     drop the record and look at subsequent records (if any are present) in\n     the same datagram. Found by jeannotlapin. #345\n\n= mbed TLS 2.2.0 released 2015-11-04\n\nSecurity\n   * Fix potential double free if mbedtls_ssl_conf_psk() is called more than\n     once and some allocation fails. Cannot be forced remotely. Found by Guido\n     Vranken, Intelworks.\n   * Fix potential heap corruption on Windows when\n     mbedtls_x509_crt_parse_path() is passed a path longer than 2GB. Cannot be\n     triggered remotely. Found by Guido Vranken, Intelworks.\n   * Fix potential buffer overflow in some asn1_write_xxx() functions.\n     Cannot be triggered remotely unless you create X.509 certificates based\n     on untrusted input or write keys of untrusted origin. Found by Guido\n     Vranken, Intelworks.\n   * The X509 max_pathlen constraint was not enforced on intermediate\n     certificates. Found by Nicholas Wilson, fix and tests provided by\n     Janos Follath. #280 and #319\n\nFeatures\n   * Experimental support for EC J-PAKE as defined in Thread 1.0.0.\n     Disabled by default as the specification might still change.\n   * Added a key extraction callback to accees the master secret and key\n     block. (Potential uses include EAP-TLS and Thread.)\n\nBugfix\n   * Self-signed certificates were not excluded from pathlen counting,\n     resulting in some valid X.509 being incorrectly rejected. Found and fix\n     provided by Janos Follath. #319\n   * Fix build error with configurations where ECDHE-PSK is the only key\n     exchange. Found and fix provided by Chris Hammond. #270\n   * Fix build error with configurations where RSA, RSA-PSK, ECDH-RSA or\n     ECHD-ECDSA if the only key exchange. Multiple reports. #310\n   * Fixed a bug causing some handshakes to fail due to some non-fatal alerts\n     not being properly ignored. Found by mancha and Kasom Koht-arsa, #308\n   * mbedtls_x509_crt_verify(_with_profile)() now also checks the key type and\n     size/curve against the profile. Before that, there was no way to set a\n     minimum key size for end-entity certificates with RSA keys. Found by\n     Matthew Page of Scannex Electronics Ltd.\n   * Fix failures in MPI on Sparc(64) due to use of bad assembly code.\n     Found by Kurt Danielson. #292\n   * Fix typo in name of the extKeyUsage OID. Found by inestlerode, #314\n   * Fix bug in ASN.1 encoding of booleans that caused generated CA\n     certificates to be rejected by some applications, including OS X\n     Keychain. Found and fixed by Jonathan Leroy, Inikup.\n\nChanges\n   * Improved performance of mbedtls_ecp_muladd() when one of the scalars is 1\n     or -1.\n\n= mbed TLS 2.1.2 released 2015-10-06\n\nSecurity\n   * Added fix for CVE-2015-5291 to prevent heap corruption due to buffer\n     overflow of the hostname or session ticket. Found by Guido Vranken,\n     Intelworks.\n   * Fix potential double-free if mbedtls_ssl_set_hs_psk() is called more than\n     once in the same handhake and mbedtls_ssl_conf_psk() was used.\n     Found and patch provided by Guido Vranken, Intelworks. Cannot be forced\n     remotely.\n   * Fix stack buffer overflow in pkcs12 decryption (used by\n     mbedtls_pk_parse_key(file)() when the password is > 129 bytes.\n     Found by Guido Vranken, Intelworks. Not triggerable remotely.\n   * Fix potential buffer overflow in mbedtls_mpi_read_string().\n     Found by Guido Vranken, Intelworks. Not exploitable remotely in the context\n     of TLS, but might be in other uses. On 32 bit machines, requires reading a\n     string of close to or larger than 1GB to exploit; on 64 bit machines, would\n     require reading a string of close to or larger than 2^62 bytes.\n   * Fix potential random memory allocation in mbedtls_pem_read_buffer()\n     on crafted PEM input data. Found and fix provided by Guido Vranken,\n     Intelworks. Not triggerable remotely in TLS. Triggerable remotely if you\n     accept PEM data from an untrusted source.\n   * Fix possible heap buffer overflow in base64_encoded() when the input\n     buffer is 512MB or larger on 32-bit platforms. Found by Guido Vranken,\n     Intelworks. Not trigerrable remotely in TLS.\n   * Fix potential double-free if mbedtls_conf_psk() is called repeatedly on\n     the same mbedtls_ssl_config object and memory allocation fails. Found by\n     Guido Vranken, Intelworks. Cannot be forced remotely.\n   * Fix potential heap buffer overflow in servers that perform client\n     authentication against a crafted CA cert. Cannot be triggered remotely\n     unless you allow third parties to pick trust CAs for client auth.\n     Found by Guido Vranken, Intelworks.\n\nBugfix\n   * Fix compile error in net.c with musl libc. Found and patch provided by\n     zhasha (#278).\n   * Fix macroization of 'inline' keyword when building as C++. (#279)\n\nChanges\n   * Added checking of hostname length in mbedtls_ssl_set_hostname() to ensure\n     domain names are compliant with RFC 1035.\n   * Fixed paths for check_config.h in example config files. (Found by bachp)\n     (#291)\n\n= mbed TLS 2.1.1 released 2015-09-17\n\nSecurity\n   * Add countermeasure against Lenstra's RSA-CRT attack for PKCS#1 v1.5\n     signatures. (Found by Florian Weimer, Red Hat.)\n     https://securityblog.redhat.com/2015/09/02/factoring-rsa-keys-with-tls-perfect-forward-secrecy/\n   * Fix possible client-side NULL pointer dereference (read) when the client\n     tries to continue the handshake after it failed (a misuse of the API).\n     (Found and patch provided by Fabian Foerg, Gotham Digital Science using\n     afl-fuzz.)\n\nBugfix\n   * Fix warning when using a 64bit platform. (found by embedthis) (#275)\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n\nChanges\n   * Made X509 profile pointer const in mbedtls_ssl_conf_cert_profile() to allow\n     use of mbedtls_x509_crt_profile_next. (found by NWilson)\n   * When a client initiates a reconnect from the same port as a live\n     connection, if cookie verification is available\n     (MBEDTLS_SSL_DTLS_HELLO_VERIFY defined in config.h, and usable cookie\n     callbacks set with mbedtls_ssl_conf_dtls_cookies()), this will be\n     detected and mbedtls_ssl_read() will return\n     MBEDTLS_ERR_SSL_CLIENT_RECONNECT - it is then possible to start a new\n     handshake with the same context. (See RFC 6347 section 4.2.8.)\n\n= mbed TLS 2.1.0 released 2015-09-04\n\nFeatures\n   * Added support for yotta as a build system.\n   * Primary open source license changed to Apache 2.0 license.\n\nBugfix\n   * Fix segfault in the benchmark program when benchmarking DHM.\n   * Fix build error with CMake and pre-4.5 versions of GCC (found by Hugo\n     Leisink).\n   * Fix bug when parsing a ServerHello without extensions (found by David\n     Sears).\n   * Fix bug in CMake lists that caused libmbedcrypto.a not to be installed\n     (found by Benoit Lecocq).\n   * Fix bug in Makefile that caused libmbedcrypto and libmbedx509 not to be\n     installed (found by Rawi666).\n   * Fix compile error with armcc 5 with --gnu option.\n   * Fix bug in Makefile that caused programs not to be installed correctly\n     (found by robotanarchy) (#232).\n   * Fix bug in Makefile that prevented from installing without building the\n     tests (found by robotanarchy) (#232).\n   * Fix missing -static-libgcc when building shared libraries for Windows\n     with make.\n   * Fix link error when building shared libraries for Windows with make.\n   * Fix error when loading libmbedtls.so.\n   * Fix bug in mbedtls_ssl_conf_default() that caused the default preset to\n     be always used (found by dcb314) (#235)\n   * Fix bug in mbedtls_rsa_public() and mbedtls_rsa_private() that could\n     result trying to unlock an unlocked mutex on invalid input (found by\n     Fredrik Axelsson) (#257)\n   * Fix -Wshadow warnings (found by hnrkp) (#240)\n   * Fix memory corruption on client with overlong PSK identity, around\n     SSL_MAX_CONTENT_LEN or higher - not triggerrable remotely (found by\n     Aleksandrs Saveljevs) (#238)\n   * Fix unused function warning when using MBEDTLS_MDx_ALT or\n     MBEDTLS_SHAxxx_ALT (found by Henrik) (#239)\n   * Fix memory corruption in pkey programs (found by yankuncheng) (#210)\n\nChanges\n   * The PEM parser now accepts a trailing space at end of lines (#226).\n   * It is now possible to #include a user-provided configuration file at the\n     end of the default config.h by defining MBEDTLS_USER_CONFIG_FILE on the\n     compiler's command line.\n   * When verifying a certificate chain, if an intermediate certificate is\n     trusted, no later cert is checked. (suggested by hannes-landeholm)\n     (#220).\n   * Prepend a \"thread identifier\" to debug messages (issue pointed out by\n     Hugo Leisink) (#210).\n   * Add mbedtls_ssl_get_max_frag_len() to query the current maximum fragment\n     length.\n\n= mbed TLS 2.0.0 released 2015-07-13\n\nFeatures\n   * Support for DTLS 1.0 and 1.2 (RFC 6347).\n   * Ability to override core functions from MDx, SHAx, AES and DES modules\n     with custom implementation (eg hardware accelerated), complementing the\n     ability to override the whole module.\n   * New server-side implementation of session tickets that rotate keys to\n     preserve forward secrecy, and allows sharing across multiple contexts.\n   * Added a concept of X.509 cerificate verification profile that controls\n     which algorithms and key sizes (curves for ECDSA) are acceptable.\n   * Expanded configurability of security parameters in the SSL module with\n     mbedtls_ssl_conf_dhm_min_bitlen() and mbedtls_ssl_conf_sig_hashes().\n   * Introduced a concept of presets for SSL security-relevant configuration\n     parameters.\n\nAPI Changes\n   * The library has been split into libmbedcrypto, libmbedx509, libmbedtls.\n     You now need to link to all of them if you use TLS for example.\n   * All public identifiers moved to the mbedtls_* or MBEDTLS_* namespace.\n     Some names have been further changed to make them more consistent.\n     Migration helpers scripts/rename.pl and include/mbedtls/compat-1.3.h are\n     provided. Full list of renamings in scripts/data_files/rename-1.3-2.0.txt\n   * Renamings of fields inside structures, not covered by the previous list:\n     mbedtls_cipher_info_t.key_length -> key_bitlen\n     mbedtls_cipher_context_t.key_length -> key_bitlen\n     mbedtls_ecp_curve_info.size -> bit_size\n   * Headers are now found in the 'mbedtls' directory (previously 'polarssl').\n   * The following _init() functions that could return errors have\n     been split into an _init() that returns void and another function that\n     should generally be the first function called on this context after init:\n     mbedtls_ssl_init() -> mbedtls_ssl_setup()\n     mbedtls_ccm_init() -> mbedtls_ccm_setkey()\n     mbedtls_gcm_init() -> mbedtls_gcm_setkey()\n     mbedtls_hmac_drbg_init() -> mbedtls_hmac_drbg_seed(_buf)()\n     mbedtls_ctr_drbg_init()  -> mbedtls_ctr_drbg_seed()\n     Note that for mbedtls_ssl_setup(), you need to be done setting up the\n     ssl_config structure before calling it.\n   * Most ssl_set_xxx() functions (all except ssl_set_bio(), ssl_set_hostname(),\n     ssl_set_session() and ssl_set_client_transport_id(), plus\n     ssl_legacy_renegotiation()) have been renamed to mbedtls_ssl_conf_xxx()\n     (see rename.pl and compat-1.3.h above) and their first argument's type\n     changed from ssl_context to ssl_config.\n   * ssl_set_bio() changed signature (contexts merged, order switched, one\n     additional callback for read-with-timeout).\n   * The following functions have been introduced and must be used in callback\n     implementations (SNI, PSK) instead of their *conf counterparts:\n     mbedtls_ssl_set_hs_own_cert()\n     mbedtls_ssl_set_hs_ca_chain()\n     mbedtls_ssl_set_hs_psk()\n   * mbedtls_ssl_conf_ca_chain() lost its last argument (peer_cn), now set\n     using mbedtls_ssl_set_hostname().\n   * mbedtls_ssl_conf_session_cache() changed prototype (only one context\n     pointer, parameters reordered).\n   * On server, mbedtls_ssl_conf_session_tickets_cb() must now be used in\n     place of mbedtls_ssl_conf_session_tickets() to enable session tickets.\n   * The SSL debug callback gained two new arguments (file name, line number).\n   * Debug modes were removed.\n   * mbedtls_ssl_conf_truncated_hmac() now returns void.\n   * mbedtls_memory_buffer_alloc_init() now returns void.\n   * X.509 verification flags are now an uint32_t. Affect the signature of:\n     mbedtls_ssl_get_verify_result()\n     mbedtls_x509_ctr_verify_info()\n     mbedtls_x509_crt_verify() (flags, f_vrfy -> needs to be updated)\n     mbedtls_ssl_conf_verify() (f_vrfy -> needs to be updated)\n   * The following functions changed prototype to avoid an in-out length\n     parameter:\n     mbedtls_base64_encode()\n     mbedtls_base64_decode()\n     mbedtls_mpi_write_string()\n     mbedtls_dhm_calc_secret()\n   * In the NET module, all \"int\" and \"int *\" arguments for file descriptors\n     changed type to \"mbedtls_net_context *\".\n   * net_accept() gained new arguments for the size of the client_ip buffer.\n   * In the threading layer, mbedtls_mutex_init() and mbedtls_mutex_free() now\n     return void.\n   * ecdsa_write_signature() gained an additional md_alg argument and\n     ecdsa_write_signature_det() was deprecated.\n   * pk_sign() no longer accepts md_alg == POLARSSL_MD_NONE with ECDSA.\n   * Last argument of x509_crt_check_key_usage() and\n     mbedtls_x509write_crt_set_key_usage() changed from int to unsigned.\n   * test_ca_list (from certs.h) is renamed to test_cas_pem and is only\n     available if POLARSSL_PEM_PARSE_C is defined (it never worked without).\n   * Test certificates in certs.c are no longer guaranteed to be nul-terminated\n     strings; use the new *_len variables instead of strlen().\n   * Functions mbedtls_x509_xxx_parse(), mbedtls_pk_parse_key(),\n     mbedtls_pk_parse_public_key() and mbedtls_dhm_parse_dhm() now expect the\n     length parameter to include the terminating null byte for PEM input.\n   * Signature of mpi_mul_mpi() changed to make the last argument unsigned\n   * calloc() is now used instead of malloc() everywhere. API of platform\n     layer and the memory_buffer_alloc module changed accordingly.\n     (Thanks to Mansour Moufid for helping with the replacement.)\n   * Change SSL_DISABLE_RENEGOTIATION config.h flag to SSL_RENEGOTIATION\n     (support for renegotiation now needs explicit enabling in config.h).\n   * Split MBEDTLS_HAVE_TIME into MBEDTLS_HAVE_TIME and MBEDTLS_HAVE_TIME_DATE\n     in config.h\n   * net_connect() and net_bind() have a new 'proto' argument to choose\n     between TCP and UDP, using the macros NET_PROTO_TCP or NET_PROTO_UDP.\n     Their 'port' argument type is changed to a string.\n   * Some constness fixes\n\nRemovals\n   * Removed mbedtls_ecp_group_read_string(). Only named groups are supported.\n   * Removed mbedtls_ecp_sub() and mbedtls_ecp_add(), use\n     mbedtls_ecp_muladd().\n   * Removed individual mdX_hmac, shaX_hmac, mdX_file and shaX_file functions\n     (use generic functions from md.h)\n   * Removed mbedtls_timing_msleep(). Use mbedtls_net_usleep() or a custom\n     waiting function.\n   * Removed test DHM parameters from the test certs module.\n   * Removed the PBKDF2 module (use PKCS5).\n   * Removed POLARSSL_ERROR_STRERROR_BC (use mbedtls_strerror()).\n   * Removed compat-1.2.h (helper for migrating from 1.2 to 1.3).\n   * Removed openssl.h (very partial OpenSSL compatibility layer).\n   * Configuration options POLARSSL_HAVE_LONGLONG was removed (now always on).\n   * Configuration options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 have\n     been removed (compiler is required to support 32-bit operations).\n   * Configuration option POLARSSL_HAVE_IPV6 was removed (always enabled).\n   * Removed test program o_p_test, the script compat.sh does more.\n   * Removed test program ssl_test, superseded by ssl-opt.sh.\n   * Removed helper script active-config.pl\n\nNew deprecations\n   * md_init_ctx() is deprecated in favour of md_setup(), that adds a third\n     argument (allowing memory savings if HMAC is not used)\n\nSemi-API changes (technically public, morally private)\n   * Renamed a few headers to include _internal in the name. Those headers are\n     not supposed to be included by users.\n   * Changed md_info_t into an opaque structure (use md_get_xxx() accessors).\n   * Changed pk_info_t into an opaque structure.\n   * Changed cipher_base_t into an opaque structure.\n   * Removed sig_oid2 and rename sig_oid1 to sig_oid in x509_crt and x509_crl.\n   * x509_crt.key_usage changed from unsigned char to unsigned int.\n   * Removed r and s from ecdsa_context\n   * Removed mode from des_context and des3_context\n\nDefault behavior changes\n   * The default minimum TLS version is now TLS 1.0.\n   * RC4 is now blacklisted by default in the SSL/TLS layer, and excluded from the\n     default ciphersuite list returned by ssl_list_ciphersuites()\n   * Support for receiving SSLv2 ClientHello is now disabled by default at\n     compile time.\n   * The default authmode for SSL/TLS clients is now REQUIRED.\n   * Support for RSA_ALT contexts in the PK layer is now optional. Since is is\n     enabled in the default configuration, this is only noticeable if using a\n     custom config.h\n   * Default DHM parameters server-side upgraded from 1024 to 2048 bits.\n   * A minimum RSA key size of 2048 bits is now enforced during ceritificate\n     chain verification.\n   * Negotiation of truncated HMAC is now disabled by default on server too.\n   * The following functions are now case-sensitive:\n     mbedtls_cipher_info_from_string()\n     mbedtls_ecp_curve_info_from_name()\n     mbedtls_md_info_from_string()\n     mbedtls_ssl_ciphersuite_from_string()\n     mbedtls_version_check_feature()\n\nRequirement changes\n   * The minimum MSVC version required is now 2010 (better C99 support).\n   * The NET layer now unconditionnaly relies on getaddrinfo() and select().\n   * Compiler is required to support C99 types such as long long and uint32_t.\n\nAPI changes from the 1.4 preview branch\n   * ssl_set_bio_timeout() was removed, split into mbedtls_ssl_set_bio() with\n     new prototype, and mbedtls_ssl_set_read_timeout().\n   * The following functions now return void:\n     mbedtls_ssl_conf_transport()\n     mbedtls_ssl_conf_max_version()\n     mbedtls_ssl_conf_min_version()\n   * DTLS no longer hard-depends on TIMING_C, but uses a callback interface\n     instead, see mbedtls_ssl_set_timer_cb(), with the Timing module providing\n     an example implementation, see mbedtls_timing_delay_context and\n     mbedtls_timing_set/get_delay().\n   * With UDP sockets, it is no longer necessary to call net_bind() again\n     after a successful net_accept().\n\nChanges\n   * mbedtls_ctr_drbg_random() and mbedtls_hmac_drbg_random() are now\n     thread-safe if MBEDTLS_THREADING_C is enabled.\n   * Reduced ROM fooprint of SHA-256 and added an option to reduce it even\n     more (at the expense of performance) MBEDTLS_SHA256_SMALLER.\n\n= mbed TLS 1.3 branch\n\nSecurity\n   * With authmode set to SSL_VERIFY_OPTIONAL, verification of keyUsage and\n     extendedKeyUsage on the leaf certificate was lost (results not accessible\n     via ssl_get_verify_results()).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nFeatures\n   * Improve ECC performance by using more efficient doubling formulas\n     (contributed by Peter Dettman).\n   * Add x509_crt_verify_info() to display certificate verification results.\n   * Add support for reading DH parameters with privateValueLength included\n     (contributed by Daniel Kahn Gillmor).\n   * Add support for bit strings in X.509 names (request by Fredrik Axelsson).\n   * Add support for id-at-uniqueIdentifier in X.509 names.\n   * Add support for overriding snprintf() (except on Windows) and exit() in\n     the platform layer.\n   * Add an option to use macros instead of function pointers in the platform\n     layer (helps get rid of unwanted references).\n   * Improved Makefiles for Windows targets by fixing library targets and making\n     cross-compilation easier (thanks to Alon Bar-Lev).\n   * The benchmark program also prints heap usage for public-key primitives\n     if POLARSSL_MEMORY_BUFFER_ALLOC_C and POLARSSL_MEMORY_DEBUG are defined.\n   * New script ecc-heap.sh helps measuring the impact of ECC parameters on\n     speed and RAM (heap only for now) usage.\n   * New script memory.sh helps measuring the ROM and RAM requirements of two\n     reduced configurations (PSK-CCM and NSA suite B).\n   * Add config flag POLARSSL_DEPRECATED_WARNING (off by default) to produce\n     warnings on use of deprecated functions (with GCC and Clang only).\n   * Add config flag POLARSSL_DEPRECATED_REMOVED (off by default) to produce\n     errors on use of deprecated functions.\n\nBugfix\n   * Fix compile errors with PLATFORM_NO_STD_FUNCTIONS.\n   * Fix compile error with PLATFORM_EXIT_ALT (thanks to Rafa\u0142 Przywara).\n   * Fix bug in entropy.c when THREADING_C is also enabled that caused\n     entropy_free() to crash (thanks to Rafa\u0142 Przywara).\n   * Fix memory leak when gcm_setkey() and ccm_setkey() are used more than\n     once on the same context.\n   * Fix bug in ssl_mail_client when password is longer that username (found\n     by Bruno Pape).\n   * Fix undefined behaviour (memcmp( NULL, NULL, 0 );) in X.509 modules\n     (detected by Clang's 3.6 UBSan).\n   * mpi_size() and mpi_msb() would segfault when called on an mpi that is\n     initialized but not set (found by pravic).\n   * Fix detection of support for getrandom() on Linux (reported by syzzer) by\n     doing it at runtime (using uname) rather that compile time.\n   * Fix handling of symlinks by \"make install\" (found by Ga\u00ebl PORTAY).\n   * Fix potential NULL pointer dereference (not trigerrable remotely) when\n     ssl_write() is called before the handshake is finished (introduced in\n     1.3.10) (first reported by Martin Blumenstingl).\n   * Fix bug in pk_parse_key() that caused some valid private EC keys to be\n     rejected.\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix thread safety bug in RSA operations (found by Fredrik Axelsson).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms.\n   * Fix potential memory leak in ssl_set_psk() (found by Mansour Moufid).\n   * Fix compile error when POLARSSL_SSL_DISABLE_RENEGOTATION and\n     POLARSSL_SSL_SSESSION_TICKETS where both enabled in config.h (introduced\n     in 1.3.10).\n   * Add missing extern \"C\" guard in aesni.h (reported by amir zamani).\n   * Add missing dependency on SHA-256 in some x509 programs (reported by\n     Gergely Budai).\n   * Fix bug related to ssl_set_curves(): the client didn't check that the\n     curve picked by the server was actually allowed.\n\nChanges\n   * Remove bias in mpi_gen_prime (contributed by Pascal Junod).\n   * Remove potential sources of timing variations (some contributed by Pascal\n     Junod).\n   * Options POLARSSL_HAVE_INT8 and POLARSSL_HAVE_INT16 are deprecated.\n   * Enabling POLARSSL_NET_C without POLARSSL_HAVE_IPV6 is deprecated.\n   * compat-1.2.h and openssl.h are deprecated.\n   * Adjusting/overriding CFLAGS and LDFLAGS with the make build system is now\n     more flexible (warning: OFLAGS is not used any more) (see the README)\n     (contributed by Alon Bar-Lev).\n   * ssl_set_own_cert() no longer calls pk_check_pair() since the\n     performance impact was bad for some users (this was introduced in 1.3.10).\n   * Move from SHA-1 to SHA-256 in example programs using signatures\n     (suggested by Thorsten M\u00fchlfelder).\n   * Remove some unneeded inclusions of header files from the standard library\n     \"minimize\" others (eg use stddef.h if only size_t is needed).\n   * Change #include lines in test files to use double quotes instead of angle\n     brackets for uniformity with the rest of the code.\n   * Remove dependency on sscanf() in X.509 parsing modules.\n\n= mbed TLS 1.3.10 released 2015-02-09\nSecurity\n   * NULL pointer dereference in the buffer-based allocator when the buffer is\n     full and polarssl_free() is called (found by Mark Hasemeyer)\n     (only possible if POLARSSL_MEMORY_BUFFER_ALLOC_C is enabled, which it is\n     not by default).\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask for a\n     client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix timing difference that could theoretically lead to a\n     Bleichenbacher-style attack in the RSA and RSA-PSK key exchanges\n     (reported by Sebastian Schinzel).\n\nFeatures\n   * Add support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv).\n   * Add support for Extended Master Secret (draft-ietf-tls-session-hash).\n   * Add support for Encrypt-then-MAC (RFC 7366).\n   * Add function pk_check_pair() to test if public and private keys match.\n   * Add x509_crl_parse_der().\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain.\n   * Support for renegotiation can now be disabled at compile-time\n   * Support for 1/n-1 record splitting, a countermeasure against BEAST.\n   * Certificate selection based on signature hash, preferring SHA-1 over SHA-2\n     for pre-1.2 clients when multiple certificates are available.\n   * Add support for getrandom() syscall on recent Linux kernels with Glibc or\n     a compatible enough libc (eg uClibc).\n   * Add ssl_set_arc4_support() to make it easier to disable RC4 at runtime\n     while using the default ciphersuite list.\n   * Added new error codes and debug messages about selection of\n     ciphersuite/certificate.\n\nBugfix\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Possible buffer overflow of length at most POLARSSL_MEMORY_ALIGN_MULTIPLE\n     if memory_buffer_alloc_init() was called with buf not aligned and len not\n     a multiple of POLARSSL_MEMORY_ALIGN_MULTIPLE (not triggerable remotely).\n   * User set CFLAGS were ignored by Cmake with gcc (introduced in 1.3.9, found\n     by Julian Ospald).\n   * Fix potential undefined behaviour in Camellia.\n   * Fix potential failure in ECDSA signatures when POLARSSL_ECP_MAX_BITS is a\n     multiple of 8 (found by Gergely Budai).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Use deterministic nonces for AEAD ciphers in TLS by default (possible to\n     switch back to random with POLARSSL_SSL_AEAD_RANDOM_IV in config.h).\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * ssl_set_own_cert() now returns an error on key-certificate mismatch.\n   * Forbid repeated extensions in X.509 certificates.\n   * debug_print_buf() now prints a text view in addition to hexadecimal.\n   * A specific error is now returned when there are ciphersuites in common\n     but none of them is usable due to external factors such as no certificate\n     with a suitable (extended)KeyUsage or curve or no PSK set.\n   * It is now possible to disable negotiation of truncated HMAC server-side\n     at runtime with ssl_set_truncated_hmac().\n   * Example programs for SSL client and server now disable SSLv3 by default.\n   * Example programs for SSL client and server now disable RC4 by default.\n   * Use platform.h in all test suites and programs.\n\n= PolarSSL 1.3.9 released 2014-10-20\nSecurity\n   * Lowest common hash was selected from signature_algorithms extension in\n     TLS 1.2 (found by Darren Bane) (introduced in 1.3.8).\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Remotely-triggerable memory leak when parsing crafted ClientHello\n     (not affected if ECC support was compiled out) (found using Codenomicon\n     Defensics).\n\nBugfix\n   * Support escaping of commas in x509_string_to_names()\n   * Fix compile error in ssl_pthread_server (found by Julian Ospald).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n   * Fix compile error in timing.c when POLARSSL_NET_C and POLARSSL_SELFTEST\n     are defined but not POLARSSL_HAVE_TIME (found by Stephane Di Vito).\n   * Remove non-existent file from VS projects (found by Peter Vaskovic).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Server-initiated renegotiation would fail with non-blocking I/O if the\n     write callback returned WANT_WRITE when requesting renegotiation.\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compile error with armcc in mpi_is_prime()\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n\nChanges\n   * Ciphersuites using SHA-256 or SHA-384 now require TLS 1.x (there is no\n     standard defining how to use SHA-2 with SSL 3.0).\n   * Ciphersuites using RSA-PSK key exchange new require TLS 1.x (the spec is\n     ambiguous on how to encode some packets with SSL 3.0).\n   * Made buffer size in pk_write_(pub)key_pem() more dynamic, eg smaller if\n     RSA is disabled, larger if POLARSSL_MPI_MAX_SIZE is larger.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * POLARSSL_MPI_MAX_SIZE now defaults to 1024 in order to allow 8192 bits\n     RSA keys.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n\n= PolarSSL 1.3.8 released 2014-07-11\nSecurity\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nFeatures\n   * Add CCM module and cipher mode to Cipher Layer\n   * Support for CCM and CCM_8 ciphersuites\n   * Support for parsing and verifying RSASSA-PSS signatures in the X.509\n     modules (certificates, CRLs and CSRs).\n   * Blowfish in the cipher layer now supports variable length keys.\n   * Add example config.h for PSK with CCM, optimized for low RAM usage.\n   * Optimize for RAM usage in example config.h for NSA Suite B profile.\n   * Add POLARSSL_REMOVE_ARC4_CIPHERSUITES to allow removing RC4 ciphersuites\n     from the default list (inactive by default).\n   * Add server-side enforcement of sent renegotiation requests\n     (ssl_set_renegotiation_enforced())\n   * Add SSL_CIPHERSUITES config.h flag to allow specifying a list of\n     ciphersuites to use and save some memory if the list is small.\n\nChanges\n   * Add LINK_WITH_PTHREAD option in CMake for explicit linking that is\n     required on some platforms (e.g. OpenBSD)\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n   * md_list() now returns hashes strongest first\n   * Selection of hash for signing ServerKeyExchange in TLS 1.2 now picks\n     strongest offered by client.\n   * All public contexts have _init() and _free() functions now for simpler\n     usage pattern\n\nBugfix\n   * Fix in debug_print_msg()\n   * Enforce alignment in the buffer allocator even if buffer is not aligned\n   * Remove less-than-zero checks on unsigned numbers\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix WSAStartup() return value check (found by Peter Vaskovic)\n   * Other minor issues (found by Peter Vaskovic)\n   * Fix symlink command for cross compiling with CMake (found by Andre\n     Heinecke)\n   * Fix DER output of gen_key app (found by Gergely Budai)\n   * Very small records were incorrectly rejected when truncated HMAC was in\n     use with some ciphersuites and versions (RC4 in all versions, CBC with\n     versions < TLS 1.1).\n   * Very large records using more than 224 bytes of padding were incorrectly\n     rejected with CBC-based ciphersuites and TLS >= 1.1\n   * Very large records using less padding could cause a buffer overread of up\n     to 32 bytes with CBC-based ciphersuites and TLS >= 1.1\n   * Restore ability to use a v1 cert as a CA if trusted locally. (This had\n     been removed in 1.3.6.)\n   * Restore ability to locally trust a self-signed cert that is not a proper\n     CA for use as an end entity certificate. (This had been removed in\n     1.3.6.)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Fix off-by-one error in parsing Supported Point Format extension that\n     caused some handshakes to fail.\n   * Fix possible miscomputation of the premaster secret with DHE-PSK key\n     exchange that caused some handshakes to fail with other implementations.\n     (Failure rate <= 1/255 with common DHM moduli.)\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n   * Fix mpi_write_string() to write \"00\" as hex output for empty MPI (found\n     by Hui Dong)\n\n= PolarSSL 1.3.7 released on 2014-05-02\nFeatures\n   * debug_set_log_mode() added to determine raw or full logging\n   * debug_set_threshold() added to ignore messages over threshold level\n   * version_check_feature() added to check for compile-time options at\n     run-time\n\nChanges\n   * POLARSSL_CONFIG_OPTIONS has been removed. All values are individually\n     checked and filled in the relevant module headers\n   * Debug module only outputs full lines instead of parts\n   * Better support for the different Attribute Types from IETF PKIX (RFC 5280)\n   * AES-NI now compiles with \"old\" assemblers too\n   * Ciphersuites based on RC4 now have the lowest priority by default\n\nBugfix\n   * Only iterate over actual certificates in ssl_write_certificate_request()\n     (found by Matthew Page)\n   * Typos in platform.c and pkcs11.c (found by Daniel Phillips and Steffan\n     Karger)\n   * cert_write app should use subject of issuer certificate as issuer of cert\n   * Fix false reject in padding check in ssl_decrypt_buf() for CBC\n     ciphersuites, for full SSL frames of data.\n   * Improve interoperability by not writing extension length in ClientHello /\n     ServerHello when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix dependencies issues in X.509 test suite.\n   * Some parts of ssl_tls.c were compiled even when the module was disabled.\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Fix detection of Clang on some Apple platforms with CMake\n     (found by Barry K. Nathan)\n\n= PolarSSL 1.3.6 released on 2014-04-11\n\nFeatures\n   * Support for the ALPN SSL extension\n   * Add option 'use_dev_random' to gen_key application\n   * Enable verification of the keyUsage extension for CA and leaf\n     certificates (POLARSSL_X509_CHECK_KEY_USAGE)\n   * Enable verification of the extendedKeyUsage extension\n     (POLARSSL_X509_CHECK_EXTENDED_KEY_USAGE)\n\nChanges\n   * x509_crt_info() now prints information about parsed extensions as well\n   * pk_verify() now returns a specific error code when the signature is valid\n     but shorter than the supplied length.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n\nSecurity\n   * Avoid potential timing leak in ecdsa_sign() by blinding modular division.\n     (Found by Watson Ladd.)\n   * The notAfter date of some certificates was no longer checked since 1.3.5.\n     This affects certificates in the user-supplied chain except the top\n     certificate. If the user-supplied chain contains only one certificates,\n     it is not affected (ie, its notAfter date is properly checked).\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n\nBugfix\n   * The length of various ClientKeyExchange messages was not properly checked.\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Fixed malloc/free default #define in platform.c (found by Gergely Budai).\n   * Fixed type which made POLARSSL_ENTROPY_FORCE_SHA256 uneffective (found by\n     Gergely Budai).\n   * Fix #include path in ecdsa.h which wasn't accepted by some compilers.\n     (found by Gergely Budai)\n   * Fix compile errors when POLARSSL_ERROR_STRERROR_BC is undefined (found by\n     Shuo Chen).\n   * oid_get_numeric_string() used to truncate the output without returning an\n     error if the output buffer was just 1 byte too small.\n   * dhm_parse_dhm() (hence dhm_parse_dhmfile()) did not set dhm->len.\n   * Calling pk_debug() on an RSA-alt key would segfault.\n   * pk_get_size() and pk_get_len() were off by a factor 8 for RSA-alt keys.\n   * Potential buffer overwrite in pem_write_buffer() because of low length\n     indication (found by Thijs Alkemade)\n   * EC curves constants, which should be only in ROM since 1.3.3, were also\n     stored in RAM due to missing 'const's (found by Gergely Budai).\n\n= PolarSSL 1.3.5 released on 2014-03-26\nFeatures\n   * HMAC-DRBG as a separate module\n   * Option to set the Curve preference order (disabled by default)\n   * Single Platform compatilibity layer (for memory / printf / fprintf)\n   * Ability to provide alternate timing implementation\n   * Ability to force the entropy module to use SHA-256 as its basis\n     (POLARSSL_ENTROPY_FORCE_SHA256)\n   * Testing script ssl-opt.sh added for testing 'live' ssl option\n     interoperability against OpenSSL and PolarSSL\n   * Support for reading EC keys that use SpecifiedECDomain in some cases.\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Deprecated the Memory layer\n   * entropy_add_source(), entropy_update_manual() and entropy_gather()\n     now thread-safe if POLARSSL_THREADING_C defined\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Revamped the compat.sh interoperatibility script to include support for\n     testing against GnuTLS\n   * Deprecated ssl_set_own_cert_rsa() and ssl_set_own_cert_rsa_alt()\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is 'optional' (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Fixed possible buffer overflow with overlong PSK\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\nBugfix\n   * ecp_gen_keypair() does more tries to prevent failure because of\n     statistics\n   * Fixed bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Fixed dependency issues in test suite\n   * Programs rsa_sign_pss and rsa_verify_pss were not using PSS since 1.3.0\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_cache was creating entries when max_entries=0 if TIMING_C was enabled.\n   * m_sleep() was sleeping twice too long on most Unix platforms.\n   * Fixed bug with session tickets and non-blocking I/O in the unlikely case\n     send() would return an EAGAIN error when sending the ticket.\n   * ssl_cache was leaking memory when reusing a timed out entry containing a\n     client certificate.\n   * ssl_srv was leaking memory when client presented a timed out ticket\n     containing a client certificate\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * Fix typo in rsa_copy() that impacted PKCS#1 v2 contexts\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n\n= PolarSSL 1.3.4 released on 2014-01-27\nFeatures\n   * Support for the Koblitz curves: secp192k1, secp224k1, secp256k1\n   * Support for RIPEMD-160\n   * Support for AES CFB8 mode\n   * Support for deterministic ECDSA (RFC 6979)\n\nBugfix\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * net module handles timeouts on blocking sockets better (found by Tilman\n     Sauerbeck)\n   * Assembly format fixes in bn_mul.h\n\nSecurity\n   * Missing MPI_CHK calls added around unguarded mpi calls (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.3 released on 2013-12-31\nFeatures\n   * EC key generation support in gen_key app\n   * Support for adhering to client ciphersuite order preference\n     (POLARSSL_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n   * Support for Curve25519\n   * Support for ECDH-RSA and ECDH-ECDSA key exchanges and ciphersuites\n   * Support for IPv6 in the NET module\n   * AES-NI support for AES, AES-GCM and AES key scheduling\n   * SSL Pthread-based server example added (ssl_pthread_server)\n\nChanges\n   * gen_prime() speedup\n   * Speedup of ECP multiplication operation\n   * Relaxed some SHA2 ciphersuite's version requirements\n   * Dropped use of readdir_r() instead of readdir() with threading support\n   * More constant-time checks in the RSA module\n   * Split off curves from ecp.c into ecp_curves.c\n   * Curves are now stored fully in ROM\n   * Memory usage optimizations in ECP module\n   * Removed POLARSSL_THREADING_DUMMY\n\nBugfix\n   * Fixed bug in mpi_set_bit() on platforms where t_uint is wider than int\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * Missing defines / cases for RSA_PSK key exchange\n   * crypt_and_hash app checks MAC before final decryption\n   * Potential memory leak in ssl_ticket_keys_init()\n   * Memory leak in benchmark application\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n\nSecurity\n   * Possible remotely-triggered out-of-bounds memory access fixed (found by\n     TrustInSoft)\n\n= PolarSSL 1.3.2 released on 2013-11-04\nFeatures\n   * PK tests added to test framework\n   * Added optional optimization for NIST MODP curves (POLARSSL_ECP_NIST_OPTIM)\n   * Support for Camellia-GCM mode and ciphersuites\n\nChanges\n   * Padding checks in cipher layer are now constant-time\n   * Value comparisons in SSL layer are now constant-time\n   * Support for serialNumber, postalAddress and postalCode in X509 names\n   * SSL Renegotiation was refactored\n\nBugfix\n   * More stringent checks in cipher layer\n   * Server does not send out extensions not advertised by client\n   * Prevent possible alignment warnings on casting from char * to 'aligned *'\n   * Misc fixes and additions to dependency checks\n   * Const correctness\n   * cert_write with selfsign should use issuer_name as subject_name\n   * Fix ECDSA corner case: missing reduction mod N (found by DualTachyon)\n   * Defines to handle UEFI environment under MSVC\n   * Server-side initiated renegotiations send HelloRequest\n\n= PolarSSL 1.3.1 released on 2013-10-15\nFeatures\n   * Support for Brainpool curves and TLS ciphersuites (RFC 7027)\n   * Support for ECDHE-PSK key-exchange and ciphersuites\n   * Support for RSA-PSK key-exchange and ciphersuites\n\nChanges\n   * RSA blinding locks for a smaller amount of time\n   * TLS compression only allocates working buffer once\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * config.h is more script-friendly\n\nBugfix\n   * Missing MSVC defines added\n   * Compile errors with POLARSSL_RSA_NO_CRT\n   * Header files with 'polarssl/'\n   * Const correctness\n   * Possible naming collision in dhm_context\n   * Better support for MSVC\n   * threading_set_alt() name\n   * Added missing x509write_crt_set_version()\n\n= PolarSSL 1.3.0 released on 2013-10-01\nFeatures\n   * Elliptic Curve Cryptography module added\n   * Elliptic Curve Diffie Hellman module added\n   * Ephemeral Elliptic Curve Diffie Hellman support for SSL/TLS\n    (ECDHE-based ciphersuites)\n   * Ephemeral Elliptic Curve Digital Signature Algorithm support for SSL/TLS\n    (ECDSA-based ciphersuites)\n   * Ability to specify allowed ciphersuites based on the protocol version.\n   * PSK and DHE-PSK based ciphersuites added\n   * Memory allocation abstraction layer added\n   * Buffer-based memory allocator added (no malloc() / free() / HEAP usage)\n   * Threading abstraction layer added (dummy / pthread / alternate)\n   * Public Key abstraction layer added\n   * Parsing Elliptic Curve keys\n   * Parsing Elliptic Curve certificates\n   * Support for max_fragment_length extension (RFC 6066)\n   * Support for truncated_hmac extension (RFC 6066)\n   * Support for zeros-and-length (ANSI X.923) padding, one-and-zeros\n     (ISO/IEC 7816-4) padding and zero padding in the cipher layer\n   * Support for session tickets (RFC 5077)\n   * Certificate Request (CSR) generation with extensions (key_usage,\n     ns_cert_type)\n   * X509 Certificate writing with extensions (basic_constraints,\n     issuer_key_identifier, etc)\n   * Optional blinding for RSA, DHM and EC\n   * Support for multiple active certificate / key pairs in SSL servers for\n     the same host (Not to be confused with SNI!)\n\nChanges\n   * Ability to enable / disable SSL v3 / TLS 1.0 / TLS 1.1 / TLS 1.2\n     individually\n   * Introduced separate SSL Ciphersuites module that is based on\n     Cipher and MD information\n   * Internals for SSL module adapted to have separate IV pointer that is\n     dynamically set (Better support for hardware acceleration)\n   * Moved all OID functionality to a separate module. RSA function\n     prototypes for the RSA sign and verify functions changed as a result\n   * Split up the GCM module into a starts/update/finish cycle\n   * Client and server now filter sent and accepted ciphersuites on minimum\n     and maximum protocol version\n   * Ability to disable server_name extension (RFC 6066)\n   * Renamed error_strerror() to the less conflicting polarssl_strerror()\n     (Ability to keep old as well with POLARSSL_ERROR_STRERROR_BC)\n   * SHA2 renamed to SHA256, SHA4 renamed to SHA512 and functions accordingly\n   * All RSA operations require a random generator for blinding purposes\n   * X509 core refactored\n   * x509_crt_verify() now case insensitive for cn (RFC 6125 6.4)\n   * Also compiles / runs without time-based functions (!POLARSSL_HAVE_TIME)\n   * Support faulty X509 v1 certificates with extensions\n     (POLARSSL_X509_ALLOW_EXTENSIONS_NON_V3)\n\nBugfix\n   * Fixed parse error in ssl_parse_certificate_request()\n   * zlib compression/decompression skipped on empty blocks\n   * Support for AIX header locations in net.c module\n   * Fixed file descriptor leaks\n\nSecurity\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n\n= Version 1.2.14 released 2015-05-??\n\nSecurity\n   * Fix potential invalid memory read in the server, that allows a client to\n     crash it remotely (found by Caj Larsson).\n   * Fix potential invalid memory read in certificate parsing, that allows a\n     client to crash the server remotely if client authentication is enabled\n     (found using Codenomicon Defensics).\n   * Add countermeasure against \"Lucky 13 strikes back\" cache-based attack,\n     https://dl.acm.org/citation.cfm?id=2714625\n\nBugfix\n   * Fix bug in Via Padlock support (found by Nikos Mavrogiannopoulos).\n   * Fix hardclock() (only used in the benchmarking program) with some\n     versions of mingw64 (found by kxjhlele).\n   * Fix warnings from mingw64 in timing.c (found by kxjklele).\n   * Fix potential unintended sign extension in asn1_get_len() on 64-bit\n     platforms (found with Coverity Scan).\n\n= Version 1.2.13 released 2015-02-16\nNote: Although PolarSSL has been renamed to mbed TLS, no changes reflecting\n      this will be made in the 1.2 branch at this point.\n\nSecurity\n   * Fix remotely-triggerable uninitialised pointer dereference caused by\n     crafted X.509 certificate (TLS server is not affected if it doesn't ask\n     for a client certificate) (found using Codenomicon Defensics).\n   * Fix remotely-triggerable memory leak caused by crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     (found using Codenomicon Defensics).\n   * Fix potential stack overflow while parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate)\n     found using Codenomicon Defensics).\n   * Fix buffer overread of size 1 when parsing crafted X.509 certificates\n     (TLS server is not affected if it doesn't ask for a client certificate).\n\nBugfix\n   * Fix potential undefined behaviour in Camellia.\n   * Fix memory leaks in PKCS#5 and PKCS#12.\n   * Stack buffer overflow if ctr_drbg_update() is called with too large\n     add_len (found by Jean-Philippe Aumasson) (not triggerable remotely).\n   * Fix bug in MPI/bignum on s390/s390x (reported by Dan Hor\u00e1k) (introduced\n     in 1.2.12).\n   * Fix unchecked return code in x509_crt_parse_path() on Windows (found by\n     Peter Vaskovic).\n   * Fix assembly selection for MIPS64 (thanks to James Cowgill).\n   * ssl_get_verify_result() now works even if the handshake was aborted due\n     to a failed verification (found by Fredrik Axelsson).\n   * Skip writing and parsing signature_algorithm extension if none of the\n     key exchanges enabled needs certificates. This fixes a possible interop\n     issue with some servers when a zero-length extension was sent. (Reported\n     by Peter Dettman.)\n   * On a 0-length input, base64_encode() did not correctly set output length\n     (found by Hendrik van den Boogaard).\n\nChanges\n   * Blind RSA private operations even when POLARSSL_RSA_NO_CRT is defined.\n   * Forbid repeated extensions in X.509 certificates.\n   * Add compile-time option POLARSSL_X509_MAX_INTERMEDIATE_CA to limit the\n     length of an X.509 verification chain (default = 8).\n= Version 1.2.12 released 2014-10-24\n\nSecurity\n   * Remotely-triggerable memory leak when parsing some X.509 certificates\n     (server is not affected if it doesn't ask for a client certificate).\n     (Found using Codenomicon Defensics.)\n\nBugfix\n   * Fix potential bad read in parsing ServerHello (found by Adrien\n     Vialletelle).\n   * ssl_close_notify() could send more than one message in some circumstances\n     with non-blocking I/O.\n   * x509_crt_parse() did not increase total_failed on PEM error\n   * Fix compiler warnings on iOS (found by Sander Niemeijer).\n   * Don't print uninitialised buffer in ssl_mail_client (found by Marc Abel).\n   * Fix net_accept() regarding non-blocking sockets (found by Luca Pesce).\n   * ssl_read() could return non-application data records on server while\n     renegotation was pending, and on client when a HelloRequest was received.\n   * Fix warnings from Clang's scan-build (contributed by Alfred Klomp).\n\nChanges\n   * X.509 certificates with more than one AttributeTypeAndValue per\n     RelativeDistinguishedName are not accepted any more.\n   * ssl_read() now returns POLARSSL_ERR_NET_WANT_READ rather than\n     POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE on harmless alerts.\n   * Accept spaces at end of line or end of buffer in base64_decode().\n\n= Version 1.2.11 released 2014-07-11\nFeatures\n   * Entropy module now supports seed writing and reading\n\nChanges\n   * Introduced POLARSSL_HAVE_READDIR_R for systems without it\n   * Improvements to the CMake build system, contributed by Julian Ospald.\n   * Work around a bug of the version of Clang shipped by Apple with Mavericks\n     that prevented bignum.c from compiling. (Reported by Rafael Baptista.)\n   * Improvements to tests/Makefile, contributed by Oden Eriksson.\n   * Use UTC time to check certificate validity.\n   * Reject certificates with times not in UTC, per RFC 5280.\n   * Migrate zeroizing of data to polarssl_zeroize() instead of memset()\n     against unwanted compiler optimizations\n\nSecurity\n   * Forbid change of server certificate during renegotiation to prevent\n     \"triple handshake\" attack when authentication mode is optional (the\n     attack was already impossible when authentication is required).\n   * Check notBefore timestamp of certificates and CRLs from the future.\n   * Forbid sequence number wrapping\n   * Prevent potential NULL pointer dereference in ssl_read_record() (found by\n     TrustInSoft)\n   * Fix length checking for AEAD ciphersuites (found by Codenomicon).\n     It was possible to crash the server (and client) using crafted messages\n     when a GCM suite was chosen.\n\nBugfix\n   * Fixed X.509 hostname comparison (with non-regular characters)\n   * SSL now gracefully handles missing RNG\n   * crypt_and_hash app checks MAC before final decryption\n   * Fixed x509_crt_parse_path() bug on Windows platforms\n   * Added missing MPI_CHK() around some statements in mpi_div_mpi() (found by\n     TrustInSoft)\n   * Fixed potential overflow in certificate size verification in\n     ssl_write_certificate() (found by TrustInSoft)\n   * Fix ASM format in bn_mul.h\n   * Potential memory leak in bignum_selftest()\n   * Replaced expired test certificate\n   * ssl_mail_client now terminates lines with CRLF, instead of LF\n   * Fix bug in RSA PKCS#1 v1.5 \"reversed\" operations\n   * Fixed testing with out-of-source builds using cmake\n   * Fixed version-major intolerance in server\n   * Fixed CMake symlinking on out-of-source builds\n   * Bignum's MIPS-32 assembly was used on MIPS-64, causing chaos. (Found by\n     Alex Wilson.)\n   * ssl_init() was leaving a dirty pointer in ssl_context if malloc of\n     out_ctr failed\n   * ssl_handshake_init() was leaving dirty pointers in subcontexts if malloc\n     of one of them failed\n   * x509_get_current_time() uses localtime_r() to prevent thread issues\n   * Some example server programs were not sending the close_notify alert.\n   * Potential memory leak in mpi_exp_mod() when error occurs during\n     calculation of RR.\n   * Improve interoperability by not writing extension length in ClientHello\n     when no extensions are present (found by Matthew Page)\n   * rsa_check_pubkey() now allows an E up to N\n   * On OpenBSD, use arc4random_buf() instead of rand() to prevent warnings\n   * mpi_fill_random() was creating numbers larger than requested on\n     big-endian platform when size was not an integer number of limbs\n   * Fix detection of DragonflyBSD in net.c (found by Markus Pfeiffer)\n   * Stricter check on SSL ClientHello internal sizes compared to actual packet\n     size (found by TrustInSoft)\n   * Fix preprocessor checks for bn_mul PPC asm (found by Barry K. Nathan).\n   * Use \\n\\t rather than semicolons for bn_mul asm, since some assemblers\n     interpret semicolons as comment delimiters (found by Barry K. Nathan).\n   * Disable broken Sparc64 bn_mul assembly (found by Florian Obser).\n   * Fix base64_decode() to return and check length correctly (in case of\n     tight buffers)\n\n= Version 1.2.10 released 2013-10-07\nChanges\n   * Changed RSA blinding to a slower but thread-safe version\n\nBugfix\n   * Fixed memory leak in RSA as a result of introduction of blinding\n   * Fixed ssl_pkcs11_decrypt() prototype\n   * Fixed MSVC project files\n\n= Version 1.2.9 released 2013-10-01\nChanges\n   * x509_verify() now case insensitive for cn (RFC 6125 6.4)\n\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks (found by Remi Gacogne)\n   * Minor fixes\n\nSecurity\n   * Fixed potential heap buffer overflow on large hostname setting\n   * Fixed potential negative value misinterpretation in load_file()\n   * RSA blinding on CRT operations to counter timing attacks\n     (found by Cyril Arnaud and Pierre-Alain Fouque)\n\n= Version 1.2.8 released 2013-06-19\nFeatures\n   * Parsing of PKCS#8 encrypted private key files\n   * PKCS#12 PBE and derivation functions\n   * Centralized module option values in config.h to allow user-defined\n     settings without editing header files by using POLARSSL_CONFIG_OPTIONS\n\nChanges\n   * HAVEGE random generator disabled by default\n   * Internally split up x509parse_key() into a (PEM) handler function\n     and specific DER parser functions for the PKCS#1 and unencrypted\n     PKCS#8 private key formats\n   * Added mechanism to provide alternative implementations for all\n     symmetric cipher and hash algorithms (e.g. POLARSSL_AES_ALT in\n     config.h)\n   * PKCS#5 module added. Moved PBKDF2 functionality inside and deprecated\n     old PBKDF2 module\n\nBugfix\n   * Secure renegotiation extension should only be sent in case client\n     supports secure renegotiation\n   * Fixed offset for cert_type list in ssl_parse_certificate_request()\n   * Fixed const correctness issues that have no impact on the ABI\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * x509parse_crtpath() is now reentrant and uses more portable stat()\n   * Fixed bignum.c and bn_mul.h to support Thumb2 and LLVM compiler\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.2.7 released 2013-04-13\nFeatures\n   * Ability to specify allowed ciphersuites based on the protocol version.\n\nChanges\n   * Default Blowfish keysize is now 128-bits\n   * Test suites made smaller to accommodate Raspberry Pi\n\nBugfix\n   * Fix for MPI assembly for ARM\n   * GCM adapted to support sizes > 2^29\n\n= Version 1.2.6 released 2013-03-11\nBugfix\n   * Fixed memory leak in ssl_free() and ssl_reset() for active session\n   * Corrected GCM counter incrementation to use only 32-bits instead of\n     128-bits (found by Yawning Angel)\n   * Fixes for 64-bit compilation with MS Visual Studio\n   * Fixed net_bind() for specified IP addresses on little endian systems\n   * Fixed assembly code for ARM (Thumb and regular) for some compilers\n\nChanges\n   * Internally split up rsa_pkcs1_encrypt(), rsa_pkcs1_decrypt(),\n     rsa_pkcs1_sign() and rsa_pkcs1_verify() to separate PKCS#1 v1.5 and\n     PKCS#1 v2.1 functions\n   * Added support for custom labels when using rsa_rsaes_oaep_encrypt()\n     or rsa_rsaes_oaep_decrypt()\n   * Re-added handling for SSLv2 Client Hello when the define\n     POLARSSL_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO is set\n   * The SSL session cache module (ssl_cache) now also retains peer_cert\n     information (not the entire chain)\n\nSecurity\n   * Removed further timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.2.5 released 2013-02-02\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n   * Sending of security-relevant alert messages that do not break\n     interoperability can be switched on/off with the flag\n     POLARSSL_SSL_ALL_ALERT_MESSAGES\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf() due to badly formatted padding\n\n= Version 1.2.4 released 2013-01-25\nChanges\n   * More advanced SSL ciphersuite representation and moved to more dynamic\n     SSL core\n   * Added ssl_handshake_step() to allow single stepping the handshake process\n\nBugfix\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle future version properly in ssl_write_certificate_request()\n   * Correctly handle CertificateRequest message in client for <= TLS 1.1\n     without DN list\n\n= Version 1.2.3 released 2012-11-26\nBugfix\n   * Server not always sending correct CertificateRequest message\n\n= Version 1.2.2 released 2012-11-24\nChanges\n   * Added p_hw_data to ssl_context for context specific hardware acceleration\n     data\n   * During verify trust-CA is only checked for expiration and CRL presence\n\nBugfixes\n   * Fixed client authentication compatibility\n   * Fixed dependency on POLARSSL_SHA4_C in SSL modules\n\n= Version 1.2.1 released 2012-11-20\nChanges\n   * Depth that the certificate verify callback receives is now numbered\n     bottom-up (Peer cert depth is 0)\n\nBugfixes\n   * Fixes for MSVC6\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n\n= Version 1.2.0 released 2012-10-31\nFeatures\n   * Added support for NULL cipher (POLARSSL_CIPHER_NULL_CIPHER) and weak\n     ciphersuites (POLARSSL_ENABLE_WEAK_CIPHERSUITES). They are disabled by\n     default!\n   * Added support for wildcard certificates\n   * Added support for multi-domain certificates through the X509 Subject\n     Alternative Name extension\n   * Added preliminary ASN.1 buffer writing support\n   * Added preliminary X509 Certificate Request writing support\n   * Added key_app_writer example application\n   * Added cert_req example application\n   * Added base Galois Counter Mode (GCM) for AES\n   * Added TLS 1.2 support (RFC 5246)\n   * Added GCM suites to TLS 1.2 (RFC 5288)\n   * Added commandline error code convertor (util/strerror)\n   * Added support for Hardware Acceleration hooking in SSL/TLS\n   * Added OpenSSL / PolarSSL compatibility script (tests/compat.sh) and\n     example application (programs/ssl/o_p_test) (requires OpenSSL)\n   * Added X509 CA Path support\n   * Added Thumb assembly optimizations\n   * Added DEFLATE compression support as per RFC3749 (requires zlib)\n   * Added blowfish algorithm (Generic and cipher layer)\n   * Added PKCS#5 PBKDF2 key derivation function\n   * Added Secure Renegotiation (RFC 5746)\n   * Added predefined DHM groups from RFC 5114\n   * Added simple SSL session cache implementation\n   * Added ServerName extension parsing (SNI) at server side\n   * Added option to add minimum accepted SSL/TLS protocol version\n\nChanges\n   * Removed redundant POLARSSL_DEBUG_MSG define\n   * AES code only check for Padlock once\n   * Fixed const-correctness mpi_get_bit()\n   * Documentation for mpi_lsb() and mpi_msb()\n   * Moved out_msg to out_hdr + 32 to support hardware acceleration\n   * Changed certificate verify behaviour to comply with RFC 6125 section 6.3\n     to not match CN if subjectAltName extension is present (Closes ticket #56)\n   * Cipher layer cipher_mode_t POLARSSL_MODE_CFB128 is renamed to\n     POLARSSL_MODE_CFB, to also handle different block size CFB modes.\n   * Removed handling for SSLv2 Client Hello (as per RFC 5246 recommendation)\n   * Revamped session resumption handling\n   * Generalized external private key implementation handling (like PKCS#11)\n     in SSL/TLS\n   * Revamped x509_verify() and the SSL f_vrfy callback implementations\n   * Moved from unsigned long to fixed width uint32_t types throughout code\n   * Renamed ciphersuites naming scheme to IANA reserved names\n\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Handle empty certificate subject names\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover (found by Ruslan Yushchenko)\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * Fixed MPI assembly for SPARC64 platform\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.8 released on 2013-10-01\nBugfix\n   * Fixed potential memory leak when failing to resume a session\n   * Fixed potential file descriptor leaks\n\nSecurity\n   * Potential buffer-overflow for ssl_read_record() (independently found by\n     both TrustInSoft and Paul Brodeur of Leviathan Security Group)\n   * Potential negative value misinterpretation in load_file()\n   * Potential heap buffer overflow on large hostname setting\n\n= Version 1.1.7 released on 2013-06-19\nChanges\n   * HAVEGE random generator disabled by default\n\nBugfix\n   * x509parse_crt() now better handles PEM error situations\n   * ssl_parse_certificate() now calls x509parse_crt_der() directly\n     instead of the x509parse_crt() wrapper that can also parse PEM\n     certificates\n   * Fixed values for 2-key Triple DES in cipher layer\n   * ssl_write_certificate_request() can handle empty ca_chain\n\nSecurity\n   * A possible DoS during the SSL Handshake, due to faulty parsing of\n     PEM-encoded certificates has been fixed (found by Jack Lloyd)\n\n= Version 1.1.6 released on 2013-03-11\nBugfix\n   * Fixed net_bind() for specified IP addresses on little endian systems\n\nChanges\n   * Allow enabling of dummy error_strerror() to support some use-cases\n   * Debug messages about padding errors during SSL message decryption are\n     disabled by default and can be enabled with POLARSSL_SSL_DEBUG_ALL\n\nSecurity\n   * Removed timing differences during SSL message decryption in\n     ssl_decrypt_buf()\n   * Removed timing differences due to bad padding from\n     rsa_rsaes_pkcs1_v15_decrypt() and rsa_pkcs1_decrypt() for PKCS#1 v1.5\n     operations\n\n= Version 1.1.5 released on 2013-01-16\nBugfix\n   * Fixed MPI assembly for SPARC64 platform\n   * Handle existence of OpenSSL Trust Extensions at end of X.509 DER blob\n   * mpi_add_abs() now correctly handles adding short numbers to long numbers\n     with carry rollover\n   * Moved mpi_inv_mod() outside POLARSSL_GENPRIME\n   * Prevent reading over buffer boundaries on X509 certificate parsing\n   * mpi_exp_mod() now correctly handles negative base numbers (Closes ticket\n     #52)\n   * Fixed possible segfault in mpi_shift_r() (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Allow R and A to point to same mpi in mpi_div_mpi (found by Manuel\n     P\u00e9gouri\u00e9-Gonnard)\n   * Added max length check for rsa_pkcs1_sign with PKCS#1 v2.1\n   * Memory leak when using RSA_PKCS_V21 operations fixed\n   * Handle encryption with private key and decryption with public key as per\n     RFC 2313\n   * Fixes for MSVC6\n\nSecurity\n   * Fixed potential memory zeroization on miscrafted RSA key (found by Eloi\n     Vanderbeken)\n\n= Version 1.1.4 released on 2012-05-31\nBugfix\n   * Correctly handle empty SSL/TLS packets (Found by James Yonan)\n   * Fixed potential heap corruption in x509_name allocation\n   * Fixed single RSA test that failed on Big Endian systems (Closes ticket #54)\n\n= Version 1.1.3 released on 2012-04-29\nBugfix\n   * Fixed random MPI generation to not generate more size than requested.\n\n= Version 1.1.2 released on 2012-04-26\nBugfix\n   * Fixed handling error in mpi_cmp_mpi() on longer B values (found by\n     Hui Dong)\n\nSecurity\n   * Fixed potential memory corruption on miscrafted client messages (found by\n     Frama-C team at CEA LIST)\n   * Fixed generation of DHM parameters to correct length (found by Ruslan\n     Yushchenko)\n\n= Version 1.1.1 released on 2012-01-23\nBugfix\n   * Check for failed malloc() in ssl_set_hostname() and x509_get_entries()\n     (Closes ticket #47, found by Hugo Leisink)\n   * Fixed issues with Intel compiler on 64-bit systems (Closes ticket #50)\n   * Fixed multiple compiler warnings for VS6 and armcc\n   * Fixed bug in CTR_CRBG selftest\n\n= Version 1.1.0 released on 2011-12-22\nFeatures\n   * Added ssl_session_reset() to allow better multi-connection pools of\n     SSL contexts without needing to set all non-connection-specific\n     data and pointers again. Adapted ssl_server to use this functionality.\n   * Added ssl_set_max_version() to allow clients to offer a lower maximum\n     supported version to a server to help buggy server implementations.\n     (Closes ticket #36)\n   * Added cipher_get_cipher_mode() and cipher_get_cipher_operation()\n     introspection functions (Closes ticket #40)\n   * Added CTR_DRBG based on AES-256-CTR (NIST SP 800-90) random generator\n   * Added a generic entropy accumulator that provides support for adding\n     custom entropy sources and added some generic and platform dependent\n     entropy sources\n\nChanges\n   * Documentation for AES and Camellia in modes CTR and CFB128 clarified.\n   * Fixed rsa_encrypt and rsa_decrypt examples to use public key for\n     encryption and private key for decryption. (Closes ticket #34)\n   * Inceased maximum size of ASN1 length reads to 32-bits.\n   * Added an EXPLICIT tag number parameter to x509_get_ext()\n   * Added a separate CRL entry extension parsing function\n   * Separated the ASN.1 parsing code from the X.509 specific parsing code.\n     So now there is a module that is controlled with POLARSSL_ASN1_PARSE_C.\n   * Changed the defined key-length of DES ciphers in cipher.h to include the\n     parity bits, to prevent mistakes in copying data. (Closes ticket #33)\n   * Loads of minimal changes to better support WINCE as a build target\n     (Credits go to Marco Lizza)\n   * Added POLARSSL_MPI_WINDOW_SIZE definition to allow easier time to memory\n     trade-off\n   * Introduced POLARSSL_MPI_MAX_SIZE and POLARSSL_MPI_MAX_BITS for MPI size\n     management (Closes ticket #44)\n   * Changed the used random function pointer to more flexible format. Renamed\n     havege_rand() to havege_random() to prevent mistakes. Lots of changes as\n     a consequence in library code and programs\n   * Moved all examples programs to use the new entropy and CTR_DRBG\n   * Added permissive certificate parsing to x509parse_crt() and\n     x509parse_crtfile(). With permissive parsing the parsing does not stop on\n     encountering a parse-error. Beware that the meaning of return values has\n     changed!\n   * All error codes are now negative. Even on mermory failures and IO errors.\n\nBugfix\n   * Fixed faulty HMAC-MD2 implementation. Found by dibac. (Closes\n     ticket #37)\n   * Fixed a bug where the CRL parser expected an EXPLICIT ASN.1 tag\n     before version numbers\n   * Allowed X509 key usage parsing to accept 4 byte values instead of the\n     standard 1 byte version sometimes used by Microsoft. (Closes ticket #38)\n   * Fixed incorrect behaviour in case of RSASSA-PSS with a salt length\n     smaller than the hash length. (Closes ticket #41)\n   * If certificate serial is longer than 32 octets, serial number is now\n     appended with '....' after first 28 octets\n   * Improved build support for s390x and sparc64 in bignum.h\n   * Fixed MS Visual C++ name clash with int64 in sha4.h\n   * Corrected removal of leading \"00:\" in printing serial numbers in\n     certificates and CRLs\n\n= Version 1.0.0 released on 2011-07-27\nFeatures\n   * Expanded cipher layer with support for CFB128 and CTR mode\n   * Added rsa_encrypt and rsa_decrypt simple example programs.\n\nChanges\n   * The generic cipher and message digest layer now have normal error\n     codes instead of integers\n\nBugfix\n   * Undid faulty bug fix in ssl_write() when flushing old data (Ticket\n     #18)\n\n= Version 0.99-pre5 released on 2011-05-26\nFeatures\n   * Added additional Cipher Block Modes to symmetric ciphers\n     (AES CTR, Camellia CTR, XTEA CBC) including the option to\n     enable and disable individual modes when needed\n   * Functions requiring File System functions can now be disabled\n     by undefining POLARSSL_FS_IO\n   * A error_strerror function() has been added to translate between\n     error codes and their description.\n   * Added mpi_get_bit() and mpi_set_bit() individual bit setter/getter\n     functions.\n   * Added ssl_mail_client and ssl_fork_server as example programs.\n\nChanges\n   * Major argument / variable rewrite. Introduced use of size_t\n     instead of int for buffer lengths and loop variables for\n     better unsigned / signed use. Renamed internal bigint types\n     t_int and t_dbl to t_uint and t_udbl in the process\n   * mpi_init() and mpi_free() now only accept a single MPI\n     argument and do not accept variable argument lists anymore.\n   * The error codes have been remapped and combining error codes\n     is now done with a PLUS instead of an OR as error codes\n     used are negative.\n   * Changed behaviour of net_read(), ssl_fetch_input() and ssl_recv().\n     net_recv() now returns 0 on EOF instead of\n     POLARSSL_ERR_NET_CONN_RESET. ssl_fetch_input() returns\n     POLARSSL_ERR_SSL_CONN_EOF on an EOF from its f_recv() function.\n     ssl_read() returns 0 if a POLARSSL_ERR_SSL_CONN_EOF is received\n     after the handshake.\n   * Network functions now return POLARSSL_ERR_NET_WANT_READ or\n     POLARSSL_ERR_NET_WANT_WRITE instead of the ambiguous\n     POLARSSL_ERR_NET_TRY_AGAIN\n\n= Version 0.99-pre4 released on 2011-04-01\nFeatures\n   * Added support for PKCS#1 v2.1 encoding and thus support\n     for the RSAES-OAEP and RSASSA-PSS operations.\n   * Reading of Public Key files incorporated into default x509\n     functionality as well.\n   * Added mpi_fill_random() for centralized filling of big numbers\n     with random data (Fixed ticket #10)\n\nChanges\n   * Debug print of MPI now removes leading zero octets and\n     displays actual bit size of the value.\n   * x509parse_key() (and as a consequence x509parse_keyfile())\n     does not zeroize memory in advance anymore. Use rsa_init()\n     before parsing a key or keyfile!\n\nBugfix\n   * Debug output of MPI's now the same independent of underlying\n     platform (32-bit / 64-bit) (Fixes ticket #19, found by Mads\n     Kiilerich and Mihai Militaru)\n   * Fixed bug in ssl_write() when flushing old data (Fixed ticket\n     #18, found by Nikolay Epifanov)\n   * Fixed proper handling of RSASSA-PSS verification with variable\n     length salt lengths\n\n= Version 0.99-pre3 released on 2011-02-28\nThis release replaces version 0.99-pre2 which had possible copyright issues.\nFeatures\n   * Parsing PEM private keys encrypted with DES and AES\n     are now supported as well (Fixes ticket #5)\n   * Added crl_app program to allow easy reading and\n     printing of X509 CRLs from file\n\nChanges\n   * Parsing of PEM files moved to separate module (Fixes\n     ticket #13). Also possible to remove PEM support for\n     systems only using DER encoding\n\nBugfixes\n   * Corrected parsing of UTCTime dates before 1990 and\n     after 1950\n   * Support more exotic OID's when parsing certificates\n     (found by Mads Kiilerich)\n   * Support more exotic name representations when parsing\n     certificates (found by Mads Kiilerich)\n   * Replaced the expired test certificates\n   * Do not bail out if no client certificate specified. Try\n     to negotiate anonymous connection (Fixes ticket #12,\n     found by Boris Krasnovskiy)\n\nSecurity fixes\n   * Fixed a possible Man-in-the-Middle attack on the\n     Diffie Hellman key exchange (thanks to Larry Highsmith,\n     Subreption LLC)\n\n= Version 0.99-pre1 released on 2011-01-30\nFeatures\nNote: Most of these features have been donated by Fox-IT\n   * Added Doxygen source code documentation parts\n   * Added reading of DHM context from memory and file\n   * Improved X509 certificate parsing to include extended\n     certificate fields, including Key Usage\n   * Improved certificate verification and verification\n     against the available CRLs\n   * Detection for DES weak keys and parity bits added\n   * Improvements to support integration in other\n     applications:\n       + Added generic message digest and cipher wrapper\n       + Improved information about current capabilities,\n         status, objects and configuration\n       + Added verification callback on certificate chain\n         verification to allow external blacklisting\n       + Additional example programs to show usage\n   * Added support for PKCS#11 through the use of the\n     libpkcs11-helper library\n\nChanges\n   * x509parse_time_expired() checks time in addition to\n     the existing date check\n   * The ciphers member of ssl_context and the cipher member\n     of ssl_session have been renamed to ciphersuites and\n     ciphersuite respectively. This clarifies the difference\n     with the generic cipher layer and is better naming\n     altogether\n\n= Version 0.14.0 released on 2010-08-16\nFeatures\n   * Added support for SSL_EDH_RSA_AES_128_SHA and\n     SSL_EDH_RSA_CAMELLIA_128_SHA ciphersuites\n   * Added compile-time and run-time version information\n   * Expanded ssl_client2 arguments for more flexibility\n   * Added support for TLS v1.1\n\nChanges\n   * Made Makefile cleaner\n   * Removed dependency on rand() in rsa_pkcs1_encrypt().\n     Now using random fuction provided to function and\n     changed the prototype of rsa_pkcs1_encrypt(),\n     rsa_init() and rsa_gen_key().\n   * Some SSL defines were renamed in order to avoid\n     future confusion\n\nBug fixes\n   * Fixed CMake out of source build for tests (found by\n     kkert)\n   * rsa_check_private() now supports PKCS1v2 keys as well\n   * Fixed deadlock in rsa_pkcs1_encrypt() on failing random\n     generator\n\n= Version 0.13.1 released on 2010-03-24\nBug fixes\n   * Fixed Makefile in library that was mistakenly merged\n   * Added missing const string fixes\n\n= Version 0.13.0 released on 2010-03-21\nFeatures\n   * Added option parsing for host and port selection to\n     ssl_client2\n   * Added support for GeneralizedTime in X509 parsing\n   * Added cert_app program to allow easy reading and\n     printing of X509 certificates from file or SSL\n     connection.\n\nChanges\n   * Added const correctness for main code base\n   * X509 signature algorithm determination is now\n     in a function to allow easy future expansion\n   * Changed symmetric cipher functions to\n     identical interface (returning int result values)\n   * Changed ARC4 to use separate input/output buffer\n   * Added reset function for HMAC context as speed-up\n     for specific use-cases\n\nBug fixes\n   * Fixed bug resulting in failure to send the last\n     certificate in the chain in ssl_write_certificate() and\n     ssl_write_certificate_request() (found by fatbob)\n   * Added small fixes for compiler warnings on a Mac\n     (found by Frank de Brabander)\n   * Fixed algorithmic bug in mpi_is_prime() (found by\n     Smbat Tonoyan)\n\n= Version 0.12.1 released on 2009-10-04\nChanges\n   * Coverage test definitions now support 'depends_on'\n     tagging system.\n   * Tests requiring specific hashing algorithms now honor\n     the defines.\n\nBug fixes\n   * Changed typo in #ifdef in x509parse.c (found\n     by Eduardo)\n\n= Version 0.12.0 released on 2009-07-28\nFeatures\n   * Added CMake makefiles as alternative to regular Makefiles.\n   * Added preliminary Code Coverage tests for AES, ARC4,\n     Base64, MPI, SHA-family, MD-family, HMAC-SHA-family,\n     Camellia, DES, 3-DES, RSA PKCS#1, XTEA, Diffie-Hellman\n     and X509parse.\n\nChanges\n   * Error codes are not (necessarily) negative. Keep\n     this is mind when checking for errors.\n   * RSA_RAW renamed to SIG_RSA_RAW for consistency.\n   * Fixed typo in name of POLARSSL_ERR_RSA_OUTPUT_TOO_LARGE.\n   * Changed interface for AES and Camellia setkey functions\n     to indicate invalid key lengths.\n\nBug fixes\n   * Fixed include location of endian.h on FreeBSD (found by\n     Gabriel)\n   * Fixed include location of endian.h and name clash on\n     Apples (found by Martin van Hensbergen)\n   * Fixed HMAC-MD2 by modifying md2_starts(), so that the\n     required HMAC ipad and opad variables are not cleared.\n     (found by code coverage tests)\n   * Prevented use of long long in bignum if\n     POLARSSL_HAVE_LONGLONG not defined (found by Giles\n     Bathgate).\n   * Fixed incorrect handling of negative strings in\n     mpi_read_string() (found by code coverage tests).\n   * Fixed segfault on handling empty rsa_context in\n     rsa_check_pubkey() and rsa_check_privkey() (found by\n     code coverage tests).\n   * Fixed incorrect handling of one single negative input\n     value in mpi_add_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_sub_abs() (found by code coverage tests).\n   * Fixed incorrect handling of negative first input\n     value in mpi_mod_mpi() and mpi_mod_int(). Resulting\n     change also affects mpi_write_string() (found by code\n     coverage tests).\n   * Corrected is_prime() results for 0, 1 and 2 (found by\n     code coverage tests).\n   * Fixed Camellia and XTEA for 64-bit Windows systems.\n\n= Version 0.11.1 released on 2009-05-17\n   * Fixed missing functionality for SHA-224, SHA-256, SHA384,\n     SHA-512 in rsa_pkcs1_sign()\n\n= Version 0.11.0 released on 2009-05-03\n   * Fixed a bug in mpi_gcd() so that it also works when both\n     input numbers are even and added testcases to check\n     (found by Pierre Habouzit).\n   * Added support for SHA-224, SHA-256, SHA-384 and SHA-512\n     one way hash functions with the PKCS#1 v1.5 signing and\n     verification.\n   * Fixed minor bug regarding mpi_gcd located within the\n     POLARSSL_GENPRIME block.\n   * Fixed minor memory leak in x509parse_crt() and added better\n     handling of 'full' certificate chains (found by Mathias\n     Olsson).\n   * Centralized file opening and reading for x509 files into\n     load_file()\n   * Made definition of net_htons() endian-clean for big endian\n     systems (Found by Gernot).\n   * Undefining POLARSSL_HAVE_ASM now also handles prevents asm in\n     padlock and timing code.\n   * Fixed an off-by-one buffer allocation in ssl_set_hostname()\n     responsible for crashes and unwanted behaviour.\n   * Added support for Certificate Revocation List (CRL) parsing.\n   * Added support for CRL revocation to x509parse_verify() and\n     SSL/TLS code.\n   * Fixed compatibility of XTEA and Camellia on a 64-bit system\n     (found by Felix von Leitner).\n\n= Version 0.10.0 released on 2009-01-12\n   * Migrated XySSL to PolarSSL\n   * Added XTEA symmetric cipher\n   * Added Camellia symmetric cipher\n   * Added support for ciphersuites: SSL_RSA_CAMELLIA_128_SHA,\n     SSL_RSA_CAMELLIA_256_SHA and SSL_EDH_RSA_CAMELLIA_256_SHA\n   * Fixed dangerous bug that can cause a heap overflow in\n     rsa_pkcs1_decrypt (found by Christophe Devine)\n\n================================================================\nXySSL ChangeLog\n\n= Version 0.9 released on 2008-03-16\n\n    * Added support for ciphersuite: SSL_RSA_AES_128_SHA\n    * Enabled support for large files by default in aescrypt2.c\n    * Preliminary openssl wrapper contributed by David Barrett\n    * Fixed a bug in ssl_write() that caused the same payload to\n      be sent twice in non-blocking mode when send returns EAGAIN\n    * Fixed ssl_parse_client_hello(): session id and challenge must\n      not be swapped in the SSLv2 ClientHello (found by Greg Robson)\n    * Added user-defined callback debug function (Krystian Kolodziej)\n    * Before freeing a certificate, properly zero out all cert. data\n    * Fixed the \"mode\" parameter so that encryption/decryption are\n      not swapped on PadLock; also fixed compilation on older versions\n      of gcc (bug reported by David Barrett)\n    * Correctly handle the case in padlock_xcryptcbc() when input or\n      output data is non-aligned by falling back to the software\n      implementation, as VIA Nehemiah cannot handle non-aligned buffers\n    * Fixed a memory leak in x509parse_crt() which was reported by Greg\n      Robson-Garth; some x509write.c fixes by Pascal Vizeli, thanks to\n      Matthew Page who reported several bugs\n    * Fixed x509_get_ext() to accept some rare certificates which have\n      an INTEGER instead of a BOOLEAN for BasicConstraints::cA.\n    * Added support on the client side for the TLS \"hostname\" extension\n      (patch contributed by David Patino)\n    * Make x509parse_verify() return BADCERT_CN_MISMATCH when an empty\n      string is passed as the CN (bug reported by spoofy)\n    * Added an option to enable/disable the BN assembly code\n    * Updated rsa_check_privkey() to verify that (D*E) = 1 % (P-1)*(Q-1)\n    * Disabled obsolete hash functions by default (MD2, MD4); updated\n      selftest and benchmark to not test ciphers that have been disabled\n    * Updated x509parse_cert_info() to correctly display byte 0 of the\n      serial number, setup correct server port in the ssl client example\n    * Fixed a critical denial-of-service with X.509 cert. verification:\n      peer may cause xyssl to loop indefinitely by sending a certificate\n      for which the RSA signature check fails (bug reported by Benoit)\n    * Added test vectors for: AES-CBC, AES-CFB, DES-CBC and 3DES-CBC,\n      HMAC-MD5, HMAC-SHA1, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\n    * Fixed HMAC-SHA-384 and HMAC-SHA-512 (thanks to Josh Sinykin)\n    * Modified ssl_parse_client_key_exchange() to protect against\n      Daniel Bleichenbacher attack on PKCS#1 v1.5 padding, as well\n      as the Klima-Pokorny-Rosa extension of Bleichenbacher's attack\n    * Updated rsa_gen_key() so that ctx->N is always nbits in size\n    * Fixed assembly PPC compilation errors on Mac OS X, thanks to\n      David Barrett and Dusan Semen\n\n= Version 0.8 released on 2007-10-20\n\n    * Modified the HMAC functions to handle keys larger\n      than 64 bytes, thanks to Stephane Desneux and gary ng\n    * Fixed ssl_read_record() to properly update the handshake\n      message digests, which fixes IE6/IE7 client authentication\n    * Cleaned up the XYSSL* #defines, suggested by Azriel Fasten\n    * Fixed net_recv(), thanks to Lorenz Schori and Egon Kocjan\n    * Added user-defined callbacks for handling I/O and sessions\n    * Added lots of debugging output in the SSL/TLS functions\n    * Added preliminary X.509 cert. writing by Pascal Vizeli\n    * Added preliminary support for the VIA PadLock routines\n    * Added AES-CFB mode of operation, contributed by chmike\n    * Added an SSL/TLS stress testing program (ssl_test.c)\n    * Updated the RSA PKCS#1 code to allow choosing between\n      RSA_PUBLIC and RSA_PRIVATE, as suggested by David Barrett\n    * Updated ssl_read() to skip 0-length records from OpenSSL\n    * Fixed the make install target to comply with *BSD make\n    * Fixed a bug in mpi_read_binary() on 64-bit platforms\n    * mpi_is_prime() speedups, thanks to Kevin McLaughlin\n    * Fixed a long standing memory leak in mpi_is_prime()\n    * Replaced realloc with malloc in mpi_grow(), and set\n      the sign of zero as positive in mpi_init() (reported\n      by Jonathan M. McCune)\n\n= Version 0.7 released on 2007-07-07\n\n    * Added support for the MicroBlaze soft-core processor\n    * Fixed a bug in ssl_tls.c which sometimes prevented SSL\n      connections from being established with non-blocking I/O\n    * Fixed a couple bugs in the VS6 and UNIX Makefiles\n    * Fixed the \"PIC register ebx clobbered in asm\" bug\n    * Added HMAC starts/update/finish support functions\n    * Added the SHA-224, SHA-384 and SHA-512 hash functions\n    * Fixed the net_set_*block routines, thanks to Andreas\n    * Added a few demonstration programs: md5sum, sha1sum,\n      dh_client, dh_server, rsa_genkey, rsa_sign, rsa_verify\n    * Added new bignum import and export helper functions\n    * Rewrote README.txt in program/ssl/ca to better explain\n      how to create a test PKI\n\n= Version 0.6 released on 2007-04-01\n\n    * Ciphers used in SSL/TLS can now be disabled at compile\n      time, to reduce the memory footprint on embedded systems\n    * Added multiply assembly code for the TriCore and modified\n      havege_struct for this processor, thanks to David Pati\u00f1o\n    * Added multiply assembly code for 64-bit PowerPCs,\n      thanks to Peking University and the OSU Open Source Lab\n    * Added experimental support of Quantum Cryptography\n    * Added support for autoconf, contributed by Arnaud Cornet\n    * Fixed \"long long\" compilation issues on IA-64 and PPC64\n    * Fixed a bug introduced in xyssl-0.5/timing.c: hardclock\n      was not being correctly defined on ARM and MIPS\n\n= Version 0.5 released on 2007-03-01\n\n    * Added multiply assembly code for SPARC and Alpha\n    * Added (beta) support for non-blocking I/O operations\n    * Implemented session resuming and client authentication\n    * Fixed some portability issues on WinCE, MINIX 3, Plan9\n      (thanks to Benjamin Newman), HP-UX, FreeBSD and Solaris\n    * Improved the performance of the EDH key exchange\n    * Fixed a bug that caused valid packets with a payload\n      size of 16384 bytes to be rejected\n\n= Version 0.4 released on 2007-02-01\n\n    * Added support for Ephemeral Diffie-Hellman key exchange\n    * Added multiply asm code for SSE2, ARM, PPC, MIPS and M68K\n    * Various improvement to the modular exponentiation code\n    * Rewrote the headers to generate the API docs with doxygen\n    * Fixed a bug in ssl_encrypt_buf (incorrect padding was\n      generated) and in ssl_parse_client_hello (max. client\n      version was not properly set), thanks to Didier Rebeix\n    * Fixed another bug in ssl_parse_client_hello: clients with\n      cipherlists larger than 96 bytes were incorrectly rejected\n    * Fixed a couple memory leak in x509_read.c\n\n= Version 0.3 released on 2007-01-01\n\n    * Added server-side SSLv3 and TLSv1.0 support\n    * Multiple fixes to enhance the compatibility with g++,\n      thanks to Xos\u00e9 Ant\u00f3n Otero Ferreira\n    * Fixed a bug in the CBC code, thanks to dowst; also,\n      the bignum code is no longer dependent on long long\n    * Updated rsa_pkcs1_sign to handle arbitrary large inputs\n    * Updated timing.c for improved compatibility with i386\n      and 486 processors, thanks to Arnaud Cornet\n\n= Version 0.2 released on 2006-12-01\n\n    * Updated timing.c to support ARM and MIPS arch\n    * Updated the MPI code to support 8086 on MSVC 1.5\n    * Added the copyright notice at the top of havege.h\n    * Fixed a bug in sha2_hmac, thanks to newsoft/Wenfang Zhang\n    * Fixed a bug reported by Adrian R\u00fcegsegger in x509_read_key\n    * Fixed a bug reported by Torsten Lauter in ssl_read_record\n    * Fixed a bug in rsa_check_privkey that would wrongly cause\n      valid RSA keys to be dismissed (thanks to oldwolf)\n    * Fixed a bug in mpi_is_prime that caused some primes to fail\n      the Miller-Rabin primality test\n\n    I'd also like to thank Youn\u00e8s Hafri for the CRUX linux port,\n    Khalil Petit who added XySSL into pkgsrc and Arnaud Cornet\n    who maintains the Debian package :-)\n\n= Version 0.1 released on 2006-11-01\n", "/**\n * \\file config.h\n *\n * \\brief Configuration options (set of defines)\n *\n *  This set of compile-time options may be used to enable\n *  or disable features selectively, and reduce the global\n *  memory footprint.\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_CONFIG_H\n#define MBEDTLS_CONFIG_H\n\n#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)\n#define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n\n/**\n * \\name SECTION: System support\n *\n * This section sets system specific settings.\n * \\{\n */\n\n/**\n * \\def MBEDTLS_HAVE_ASM\n *\n * The compiler has support for asm().\n *\n * Requires support for asm() in compiler.\n *\n * Used in:\n *      library/timing.c\n *      library/padlock.c\n *      include/mbedtls/bn_mul.h\n *\n * Comment to disable the use of assembly code.\n */\n#define MBEDTLS_HAVE_ASM\n\n/**\n * \\def MBEDTLS_NO_UDBL_DIVISION\n *\n * The platform lacks support for double-width integer division (64-bit\n * division on a 32-bit platform, 128-bit division on a 64-bit platform).\n *\n * Used in:\n *      include/mbedtls/bignum.h\n *      library/bignum.c\n *\n * The bignum code uses double-width division to speed up some operations.\n * Double-width division is often implemented in software that needs to\n * be linked with the program. The presence of a double-width integer\n * type is usually detected automatically through preprocessor macros,\n * but the automatic detection cannot know whether the code needs to\n * and can be linked with an implementation of division for that type.\n * By default division is assumed to be usable if the type is present.\n * Uncomment this option to prevent the use of double-width division.\n *\n * Note that division for the native integer type is always required.\n * Furthermore, a 64-bit type is always required even on a 32-bit\n * platform, but it need not support multiplication or division. In some\n * cases it is also desirable to disable some double-width operations. For\n * example, if double-width division is implemented in software, disabling\n * it can reduce code size in some embedded targets.\n */\n//#define MBEDTLS_NO_UDBL_DIVISION\n\n/**\n * \\def MBEDTLS_HAVE_SSE2\n *\n * CPU supports SSE2 instruction set.\n *\n * Uncomment if the CPU supports SSE2 (IA-32 specific).\n */\n//#define MBEDTLS_HAVE_SSE2\n\n/**\n * \\def MBEDTLS_HAVE_TIME\n *\n * System has time.h and time().\n * The time does not need to be correct, only time differences are used,\n * by contrast with MBEDTLS_HAVE_TIME_DATE\n *\n * Defining MBEDTLS_HAVE_TIME allows you to specify MBEDTLS_PLATFORM_TIME_ALT,\n * MBEDTLS_PLATFORM_TIME_MACRO, MBEDTLS_PLATFORM_TIME_TYPE_MACRO and\n * MBEDTLS_PLATFORM_STD_TIME.\n *\n * Comment if your system does not support time functions\n */\n#define MBEDTLS_HAVE_TIME\n\n/**\n * \\def MBEDTLS_HAVE_TIME_DATE\n *\n * System has time.h and time(), gmtime() and the clock is correct.\n * The time needs to be correct (not necessarily very accurate, but at least\n * the date should be correct). This is used to verify the validity period of\n * X.509 certificates.\n *\n * Comment if your system does not have a correct clock.\n */\n#define MBEDTLS_HAVE_TIME_DATE\n\n/**\n * \\def MBEDTLS_PLATFORM_MEMORY\n *\n * Enable the memory allocation layer.\n *\n * By default mbed TLS uses the system-provided calloc() and free().\n * This allows different allocators (self-implemented or provided) to be\n * provided to the platform abstraction layer.\n *\n * Enabling MBEDTLS_PLATFORM_MEMORY without the\n * MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide\n * \"mbedtls_platform_set_calloc_free()\" allowing you to set an alternative calloc() and\n * free() function pointer at runtime.\n *\n * Enabling MBEDTLS_PLATFORM_MEMORY and specifying\n * MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the\n * alternate function at compile time.\n *\n * Requires: MBEDTLS_PLATFORM_C\n *\n * Enable this layer to allow use of alternative memory allocators.\n */\n//#define MBEDTLS_PLATFORM_MEMORY\n\n/**\n * \\def MBEDTLS_PLATFORM_NO_STD_FUNCTIONS\n *\n * Do not assign standard functions in the platform layer (e.g. calloc() to\n * MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF)\n *\n * This makes sure there are no linking errors on platforms that do not support\n * these functions. You will HAVE to provide alternatives, either at runtime\n * via the platform_set_xxx() functions or at compile time by setting\n * the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a\n * MBEDTLS_PLATFORM_XXX_MACRO.\n *\n * Requires: MBEDTLS_PLATFORM_C\n *\n * Uncomment to prevent default assignment of standard functions in the\n * platform layer.\n */\n//#define MBEDTLS_PLATFORM_NO_STD_FUNCTIONS\n\n/**\n * \\def MBEDTLS_PLATFORM_EXIT_ALT\n *\n * MBEDTLS_PLATFORM_XXX_ALT: Uncomment a macro to let mbed TLS support the\n * function in the platform abstraction layer.\n *\n * Example: In case you uncomment MBEDTLS_PLATFORM_PRINTF_ALT, mbed TLS will\n * provide a function \"mbedtls_platform_set_printf()\" that allows you to set an\n * alternative printf function pointer.\n *\n * All these define require MBEDTLS_PLATFORM_C to be defined!\n *\n * \\note MBEDTLS_PLATFORM_SNPRINTF_ALT is required on Windows;\n * it will be enabled automatically by check_config.h\n *\n * \\warning MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as\n * MBEDTLS_PLATFORM_XXX_MACRO!\n *\n * Requires: MBEDTLS_PLATFORM_TIME_ALT requires MBEDTLS_HAVE_TIME\n *\n * Uncomment a macro to enable alternate implementation of specific base\n * platform function\n */\n//#define MBEDTLS_PLATFORM_EXIT_ALT\n//#define MBEDTLS_PLATFORM_TIME_ALT\n//#define MBEDTLS_PLATFORM_FPRINTF_ALT\n//#define MBEDTLS_PLATFORM_PRINTF_ALT\n//#define MBEDTLS_PLATFORM_SNPRINTF_ALT\n//#define MBEDTLS_PLATFORM_NV_SEED_ALT\n//#define MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT\n\n/**\n * \\def MBEDTLS_DEPRECATED_WARNING\n *\n * Mark deprecated functions so that they generate a warning if used.\n * Functions deprecated in one version will usually be removed in the next\n * version. You can enable this to help you prepare the transition to a new\n * major version by making sure your code is not using these functions.\n *\n * This only works with GCC and Clang. With other compilers, you may want to\n * use MBEDTLS_DEPRECATED_REMOVED\n *\n * Uncomment to get warnings on using deprecated functions.\n */\n//#define MBEDTLS_DEPRECATED_WARNING\n\n/**\n * \\def MBEDTLS_DEPRECATED_REMOVED\n *\n * Remove deprecated functions so that they generate an error if used.\n * Functions deprecated in one version will usually be removed in the next\n * version. You can enable this to help you prepare the transition to a new\n * major version by making sure your code is not using these functions.\n *\n * Uncomment to get errors on using deprecated functions.\n */\n//#define MBEDTLS_DEPRECATED_REMOVED\n\n/* \\} name SECTION: System support */\n\n/**\n * \\name SECTION: mbed TLS feature support\n *\n * This section sets support for features that are or are not needed\n * within the modules that are enabled.\n * \\{\n */\n\n/**\n * \\def MBEDTLS_TIMING_ALT\n *\n * Uncomment to provide your own alternate implementation for mbedtls_timing_hardclock(),\n * mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()\n *\n * Only works if you have MBEDTLS_TIMING_C enabled.\n *\n * You will need to provide a header \"timing_alt.h\" and an implementation at\n * compile time.\n */\n//#define MBEDTLS_TIMING_ALT\n\n/**\n * \\def MBEDTLS_AES_ALT\n *\n * MBEDTLS__MODULE_NAME__ALT: Uncomment a macro to let mbed TLS use your\n * alternate core implementation of a symmetric crypto, an arithmetic or hash\n * module (e.g. platform specific assembly optimized implementations). Keep\n * in mind that the function prototypes should remain the same.\n *\n * This replaces the whole module. If you only want to replace one of the\n * functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags.\n *\n * Example: In case you uncomment MBEDTLS_AES_ALT, mbed TLS will no longer\n * provide the \"struct mbedtls_aes_context\" definition and omit the base\n * function declarations and implementations. \"aes_alt.h\" will be included from\n * \"aes.h\" to include the new function definitions.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * module.\n *\n * \\warning   MD2, MD4, MD5, ARC4, DES and SHA-1 are considered weak and their\n *            use constitutes a security risk. If possible, we recommend\n *            avoiding dependencies on them, and considering stronger message\n *            digests and ciphers instead.\n *\n */\n//#define MBEDTLS_AES_ALT\n//#define MBEDTLS_ARC4_ALT\n//#define MBEDTLS_BLOWFISH_ALT\n//#define MBEDTLS_CAMELLIA_ALT\n//#define MBEDTLS_CCM_ALT\n//#define MBEDTLS_CMAC_ALT\n//#define MBEDTLS_DES_ALT\n//#define MBEDTLS_DHM_ALT\n//#define MBEDTLS_ECJPAKE_ALT\n//#define MBEDTLS_GCM_ALT\n//#define MBEDTLS_MD2_ALT\n//#define MBEDTLS_MD4_ALT\n//#define MBEDTLS_MD5_ALT\n//#define MBEDTLS_RIPEMD160_ALT\n//#define MBEDTLS_RSA_ALT\n//#define MBEDTLS_SHA1_ALT\n//#define MBEDTLS_SHA256_ALT\n//#define MBEDTLS_SHA512_ALT\n//#define MBEDTLS_XTEA_ALT\n/*\n * When replacing the elliptic curve module, pleace consider, that it is\n * implemented with two .c files:\n *      - ecp.c\n *      - ecp_curves.c\n * You can replace them very much like all the other MBEDTLS__MODULE_NAME__ALT\n * macros as described above. The only difference is that you have to make sure\n * that you provide functionality for both .c files.\n */\n//#define MBEDTLS_ECP_ALT\n\n/**\n * \\def MBEDTLS_MD2_PROCESS_ALT\n *\n * MBEDTLS__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use you\n * alternate core implementation of symmetric crypto or hash function. Keep in\n * mind that function prototypes should remain the same.\n *\n * This replaces only one function. The header file from mbed TLS is still\n * used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.\n *\n * Example: In case you uncomment MBEDTLS_SHA256_PROCESS_ALT, mbed TLS will\n * no longer provide the mbedtls_sha1_process() function, but it will still provide\n * the other function (using your mbedtls_sha1_process() function) and the definition\n * of mbedtls_sha1_context, so your implementation of mbedtls_sha1_process must be compatible\n * with this definition.\n *\n * \\note Because of a signature change, the core AES encryption and decryption routines are\n *       currently named mbedtls_aes_internal_encrypt and mbedtls_aes_internal_decrypt,\n *       respectively. When setting up alternative implementations, these functions should\n *       be overridden, but the wrapper functions mbedtls_aes_decrypt and mbedtls_aes_encrypt\n *       must stay untouched.\n *\n * \\note If you use the AES_xxx_ALT macros, then is is recommended to also set\n *       MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES\n *       tables.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * function.\n *\n * \\warning   MD2, MD4, MD5, DES and SHA-1 are considered weak and their use\n *            constitutes a security risk. If possible, we recommend avoiding\n *            dependencies on them, and considering stronger message digests\n *            and ciphers instead.\n *\n * \\warning   If both MBEDTLS_ECDSA_SIGN_ALT and MBEDTLS_ECDSA_DETERMINISTIC are\n *            enabled, then the deterministic ECDH signature functions pass the\n *            the static HMAC-DRBG as RNG to mbedtls_ecdsa_sign(). Therefore\n *            alternative implementations should use the RNG only for generating\n *            the ephemeral key and nothing else. If this is not possible, then\n *            MBEDTLS_ECDSA_DETERMINISTIC should be disabled and an alternative\n *            implementation should be provided for mbedtls_ecdsa_sign_det_ext()\n *            (and for mbedtls_ecdsa_sign_det() too if backward compatibility is\n *            desirable).\n *\n */\n//#define MBEDTLS_MD2_PROCESS_ALT\n//#define MBEDTLS_MD4_PROCESS_ALT\n//#define MBEDTLS_MD5_PROCESS_ALT\n//#define MBEDTLS_RIPEMD160_PROCESS_ALT\n//#define MBEDTLS_SHA1_PROCESS_ALT\n//#define MBEDTLS_SHA256_PROCESS_ALT\n//#define MBEDTLS_SHA512_PROCESS_ALT\n//#define MBEDTLS_DES_SETKEY_ALT\n//#define MBEDTLS_DES_CRYPT_ECB_ALT\n//#define MBEDTLS_DES3_CRYPT_ECB_ALT\n//#define MBEDTLS_AES_SETKEY_ENC_ALT\n//#define MBEDTLS_AES_SETKEY_DEC_ALT\n//#define MBEDTLS_AES_ENCRYPT_ALT\n//#define MBEDTLS_AES_DECRYPT_ALT\n//#define MBEDTLS_ECDH_GEN_PUBLIC_ALT\n//#define MBEDTLS_ECDH_COMPUTE_SHARED_ALT\n//#define MBEDTLS_ECDSA_VERIFY_ALT\n//#define MBEDTLS_ECDSA_SIGN_ALT\n//#define MBEDTLS_ECDSA_GENKEY_ALT\n\n/**\n * \\def MBEDTLS_ECP_INTERNAL_ALT\n *\n * Expose a part of the internal interface of the Elliptic Curve Point module.\n *\n * MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your\n * alternative core implementation of elliptic curve arithmetic. Keep in mind\n * that function prototypes should remain the same.\n *\n * This partially replaces one function. The header file from mbed TLS is still\n * used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation\n * is still present and it is used for group structures not supported by the\n * alternative.\n *\n * Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT\n * and implementing the following functions:\n *      unsigned char mbedtls_internal_ecp_grp_capable(\n *          const mbedtls_ecp_group *grp )\n *      int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )\n *      void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )\n * The mbedtls_internal_ecp_grp_capable function should return 1 if the\n * replacement functions implement arithmetic for the given group and 0\n * otherwise.\n * The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are\n * called before and after each point operation and provide an opportunity to\n * implement optimized set up and tear down instructions.\n *\n * Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and\n * MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac\n * function, but will use your mbedtls_internal_ecp_double_jac if the group is\n * supported (your mbedtls_internal_ecp_grp_capable function returns 1 when\n * receives it as an argument). If the group is not supported then the original\n * implementation is used. The other functions and the definition of\n * mbedtls_ecp_group and mbedtls_ecp_point will not change, so your\n * implementation of mbedtls_internal_ecp_double_jac and\n * mbedtls_internal_ecp_grp_capable must be compatible with this definition.\n *\n * Uncomment a macro to enable alternate implementation of the corresponding\n * function.\n */\n/* Required for all the functions in this section */\n//#define MBEDTLS_ECP_INTERNAL_ALT\n/* Support for Weierstrass curves with Jacobi representation */\n//#define MBEDTLS_ECP_RANDOMIZE_JAC_ALT\n//#define MBEDTLS_ECP_ADD_MIXED_ALT\n//#define MBEDTLS_ECP_DOUBLE_JAC_ALT\n//#define MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT\n//#define MBEDTLS_ECP_NORMALIZE_JAC_ALT\n/* Support for curves with Montgomery arithmetic */\n//#define MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT\n//#define MBEDTLS_ECP_RANDOMIZE_MXZ_ALT\n//#define MBEDTLS_ECP_NORMALIZE_MXZ_ALT\n\n/**\n * \\def MBEDTLS_TEST_NULL_ENTROPY\n *\n * Enables testing and use of mbed TLS without any configured entropy sources.\n * This permits use of the library on platforms before an entropy source has\n * been integrated (see for example the MBEDTLS_ENTROPY_HARDWARE_ALT or the\n * MBEDTLS_ENTROPY_NV_SEED switches).\n *\n * WARNING! This switch MUST be disabled in production builds, and is suitable\n * only for development.\n * Enabling the switch negates any security provided by the library.\n *\n * Requires MBEDTLS_ENTROPY_C, MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n *\n */\n//#define MBEDTLS_TEST_NULL_ENTROPY\n\n/**\n * \\def MBEDTLS_ENTROPY_HARDWARE_ALT\n *\n * Uncomment this macro to let mbed TLS use your own implementation of a\n * hardware entropy collector.\n *\n * Your function must be called \\c mbedtls_hardware_poll(), have the same\n * prototype as declared in entropy_poll.h, and accept NULL as first argument.\n *\n * Uncomment to use your own hardware entropy collector.\n */\n//#define MBEDTLS_ENTROPY_HARDWARE_ALT\n\n/**\n * \\def MBEDTLS_AES_ROM_TABLES\n *\n * Store the AES tables in ROM.\n *\n * Uncomment this macro to store the AES tables in ROM.\n */\n//#define MBEDTLS_AES_ROM_TABLES\n\n/**\n * \\def MBEDTLS_CAMELLIA_SMALL_MEMORY\n *\n * Use less ROM for the Camellia implementation (saves about 768 bytes).\n *\n * Uncomment this macro to use less memory for Camellia.\n */\n//#define MBEDTLS_CAMELLIA_SMALL_MEMORY\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CBC\n *\n * Enable Cipher Block Chaining mode (CBC) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CBC\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CFB\n *\n * Enable Cipher Feedback mode (CFB) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CFB\n\n/**\n * \\def MBEDTLS_CIPHER_MODE_CTR\n *\n * Enable Counter Block Cipher mode (CTR) for symmetric ciphers.\n */\n#define MBEDTLS_CIPHER_MODE_CTR\n\n/**\n * \\def MBEDTLS_CIPHER_NULL_CIPHER\n *\n * Enable NULL cipher.\n * Warning: Only do so when you know what you are doing. This allows for\n * encryption or channels without any security!\n *\n * Requires MBEDTLS_ENABLE_WEAK_CIPHERSUITES as well to enable\n * the following ciphersuites:\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_RSA_WITH_NULL_SHA256\n *      MBEDTLS_TLS_RSA_WITH_NULL_SHA\n *      MBEDTLS_TLS_RSA_WITH_NULL_MD5\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA384\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA256\n *      MBEDTLS_TLS_PSK_WITH_NULL_SHA\n *\n * Uncomment this macro to enable the NULL cipher and ciphersuites\n */\n//#define MBEDTLS_CIPHER_NULL_CIPHER\n\n/**\n * \\def MBEDTLS_CIPHER_PADDING_PKCS7\n *\n * MBEDTLS_CIPHER_PADDING_XXX: Uncomment or comment macros to add support for\n * specific padding modes in the cipher layer with cipher modes that support\n * padding (e.g. CBC)\n *\n * If you disable all padding modes, only full blocks can be used with CBC.\n *\n * Enable padding modes in the cipher layer.\n */\n#define MBEDTLS_CIPHER_PADDING_PKCS7\n#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS\n#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN\n#define MBEDTLS_CIPHER_PADDING_ZEROS\n\n/**\n * \\def MBEDTLS_ENABLE_WEAK_CIPHERSUITES\n *\n * Enable weak ciphersuites in SSL / TLS.\n * Warning: Only do so when you know what you are doing. This allows for\n * channels with virtually no security at all!\n *\n * This enables the following ciphersuites:\n *      MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA\n *\n * Uncomment this macro to enable weak ciphersuites\n *\n * \\warning   DES is considered a weak cipher and its use constitutes a\n *            security risk. We recommend considering stronger ciphers instead.\n */\n//#define MBEDTLS_ENABLE_WEAK_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_REMOVE_ARC4_CIPHERSUITES\n *\n * Remove RC4 ciphersuites by default in SSL / TLS.\n * This flag removes the ciphersuites based on RC4 from the default list as\n * returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible to\n * enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including them\n * explicitly.\n *\n * Uncomment this macro to remove RC4 ciphersuites by default.\n */\n#define MBEDTLS_REMOVE_ARC4_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_REMOVE_3DES_CIPHERSUITES\n *\n * Remove 3DES ciphersuites by default in SSL / TLS.\n * This flag removes the ciphersuites based on 3DES from the default list as\n * returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible\n * to enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including\n * them explicitly.\n *\n * A man-in-the-browser attacker can recover authentication tokens sent through\n * a TLS connection using a 3DES based cipher suite (see \"On the Practical\n * (In-)Security of 64-bit Block Ciphers\" by Karthikeyan Bhargavan and Ga\u00ebtan\n * Leurent, see https://sweet32.info/SWEET32_CCS16.pdf). If this attack falls\n * in your threat model or you are unsure, then you should keep this option\n * enabled to remove 3DES based cipher suites.\n *\n * Comment this macro to keep 3DES in the default ciphersuite list.\n */\n#define MBEDTLS_REMOVE_3DES_CIPHERSUITES\n\n/**\n * \\def MBEDTLS_ECP_DP_SECP192R1_ENABLED\n *\n * MBEDTLS_ECP_XXXX_ENABLED: Enables specific curves within the Elliptic Curve\n * module.  By default all supported curves are enabled.\n *\n * Comment macros to disable the curve and functions for it\n */\n#define MBEDTLS_ECP_DP_SECP192R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP224R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP256R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP384R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP521R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP192K1_ENABLED\n#define MBEDTLS_ECP_DP_SECP224K1_ENABLED\n#define MBEDTLS_ECP_DP_SECP256K1_ENABLED\n#define MBEDTLS_ECP_DP_BP256R1_ENABLED\n#define MBEDTLS_ECP_DP_BP384R1_ENABLED\n#define MBEDTLS_ECP_DP_BP512R1_ENABLED\n#define MBEDTLS_ECP_DP_CURVE25519_ENABLED\n\n/**\n * \\def MBEDTLS_ECP_NIST_OPTIM\n *\n * Enable specific 'modulo p' routines for each NIST prime.\n * Depending on the prime and architecture, makes operations 4 to 8 times\n * faster on the corresponding curve.\n *\n * Comment this macro to disable NIST curves optimisation.\n */\n#define MBEDTLS_ECP_NIST_OPTIM\n\n/**\n * \\def MBEDTLS_ECDSA_DETERMINISTIC\n *\n * Enable deterministic ECDSA (RFC 6979).\n * Standard ECDSA is \"fragile\" in the sense that lack of entropy when signing\n * may result in a compromise of the long-term signing key. This is avoided by\n * the deterministic variant.\n *\n * Requires: MBEDTLS_HMAC_DRBG_C\n *\n * Comment this macro to disable deterministic ECDSA.\n */\n#define MBEDTLS_ECDSA_DETERMINISTIC\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_PSK_ENABLED\n *\n * Enable the PSK based ciphersuite modes in SSL / TLS.\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED\n *\n * Enable the DHE-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_DHM_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED\n *\n * Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED\n *\n * Enable the RSA-PSK based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_RSA_ENABLED\n *\n * Enable the RSA-only based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5\n */\n#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED\n *\n * Enable the DHE-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_DHM_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED\n *\n * Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_RSA_C, MBEDTLS_PKCS1_V15,\n *           MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED\n *\n * Enable the ECDHE-ECDSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_ECDSA_C, MBEDTLS_X509_CRT_PARSE_C,\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED\n *\n * Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED\n *\n * Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.\n *\n * Requires: MBEDTLS_ECDH_C, MBEDTLS_X509_CRT_PARSE_C\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\n */\n#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED\n\n/**\n * \\def MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED\n *\n * Enable the ECJPAKE based ciphersuite modes in SSL / TLS.\n *\n * \\warning This is currently experimental. EC J-PAKE support is based on the\n * Thread v1.0.0 specification; incompatible changes to the specification\n * might still happen. For this reason, this is disabled by default.\n *\n * Requires: MBEDTLS_ECJPAKE_C\n *           MBEDTLS_SHA256_C\n *           MBEDTLS_ECP_DP_SECP256R1_ENABLED\n *\n * This enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8\n */\n//#define MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED\n\n/**\n * \\def MBEDTLS_PK_PARSE_EC_EXTENDED\n *\n * Enhance support for reading EC keys using variants of SEC1 not allowed by\n * RFC 5915 and RFC 5480.\n *\n * Currently this means parsing the SpecifiedECDomain choice of EC\n * parameters (only known groups are supported, not arbitrary domains, to\n * avoid validation issues).\n *\n * Disable if you only need to support RFC 5915 + 5480 key formats.\n */\n#define MBEDTLS_PK_PARSE_EC_EXTENDED\n\n/**\n * \\def MBEDTLS_ERROR_STRERROR_DUMMY\n *\n * Enable a dummy error function to make use of mbedtls_strerror() in\n * third party libraries easier when MBEDTLS_ERROR_C is disabled\n * (no effect when MBEDTLS_ERROR_C is enabled).\n *\n * You can safely disable this if MBEDTLS_ERROR_C is enabled, or if you're\n * not using mbedtls_strerror() or error_strerror() in your application.\n *\n * Disable if you run into name conflicts and want to really remove the\n * mbedtls_strerror()\n */\n#define MBEDTLS_ERROR_STRERROR_DUMMY\n\n/**\n * \\def MBEDTLS_GENPRIME\n *\n * Enable the prime-number generation code.\n *\n * Requires: MBEDTLS_BIGNUM_C\n */\n#define MBEDTLS_GENPRIME\n\n/**\n * \\def MBEDTLS_FS_IO\n *\n * Enable functions that use the filesystem.\n */\n#define MBEDTLS_FS_IO\n\n/**\n * \\def MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n *\n * Do not add default entropy sources. These are the platform specific,\n * mbedtls_timing_hardclock and HAVEGE based poll functions.\n *\n * This is useful to have more control over the added entropy sources in an\n * application.\n *\n * Uncomment this macro to prevent loading of default entropy functions.\n */\n//#define MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES\n\n/**\n * \\def MBEDTLS_NO_PLATFORM_ENTROPY\n *\n * Do not use built-in platform entropy functions.\n * This is useful if your platform does not support\n * standards like the /dev/urandom or Windows CryptoAPI.\n *\n * Uncomment this macro to disable the built-in platform entropy functions.\n */\n//#define MBEDTLS_NO_PLATFORM_ENTROPY\n\n/**\n * \\def MBEDTLS_ENTROPY_FORCE_SHA256\n *\n * Force the entropy accumulator to use a SHA-256 accumulator instead of the\n * default SHA-512 based one (if both are available).\n *\n * Requires: MBEDTLS_SHA256_C\n *\n * On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option\n * if you have performance concerns.\n *\n * This option is only useful if both MBEDTLS_SHA256_C and\n * MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.\n */\n//#define MBEDTLS_ENTROPY_FORCE_SHA256\n\n/**\n * \\def MBEDTLS_ENTROPY_NV_SEED\n *\n * Enable the non-volatile (NV) seed file-based entropy source.\n * (Also enables the NV seed read/write functions in the platform layer)\n *\n * This is crucial (if not required) on systems that do not have a\n * cryptographic entropy source (in hardware or kernel) available.\n *\n * Requires: MBEDTLS_ENTROPY_C, MBEDTLS_PLATFORM_C\n *\n * \\note The read/write functions that are used by the entropy source are\n *       determined in the platform layer, and can be modified at runtime and/or\n *       compile-time depending on the flags (MBEDTLS_PLATFORM_NV_SEED_*) used.\n *\n * \\note If you use the default implementation functions that read a seedfile\n *       with regular fopen(), please make sure you make a seedfile with the\n *       proper name (defined in MBEDTLS_PLATFORM_STD_NV_SEED_FILE) and at\n *       least MBEDTLS_ENTROPY_BLOCK_SIZE bytes in size that can be read from\n *       and written to or you will get an entropy source error! The default\n *       implementation will only use the first MBEDTLS_ENTROPY_BLOCK_SIZE\n *       bytes from the file.\n *\n * \\note The entropy collector will write to the seed file before entropy is\n *       given to an external source, to update it.\n */\n//#define MBEDTLS_ENTROPY_NV_SEED\n\n/**\n * \\def MBEDTLS_MEMORY_DEBUG\n *\n * Enable debugging of buffer allocator memory issues. Automatically prints\n * (to stderr) all (fatal) messages on memory allocation issues. Enables\n * function for 'debug output' of allocated memory.\n *\n * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *\n * Uncomment this macro to let the buffer allocator print out error messages.\n */\n//#define MBEDTLS_MEMORY_DEBUG\n\n/**\n * \\def MBEDTLS_MEMORY_BACKTRACE\n *\n * Include backtrace information with each allocated block.\n *\n * Requires: MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *           GLIBC-compatible backtrace() an backtrace_symbols() support\n *\n * Uncomment this macro to include backtrace information\n */\n//#define MBEDTLS_MEMORY_BACKTRACE\n\n/**\n * \\def MBEDTLS_PK_RSA_ALT_SUPPORT\n *\n * Support external private RSA keys (eg from a HSM) in the PK layer.\n *\n * Comment this macro to disable support for external private RSA keys.\n */\n#define MBEDTLS_PK_RSA_ALT_SUPPORT\n\n/**\n * \\def MBEDTLS_PKCS1_V15\n *\n * Enable support for PKCS#1 v1.5 encoding.\n *\n * Requires: MBEDTLS_RSA_C\n *\n * This enables support for PKCS#1 v1.5 operations.\n */\n#define MBEDTLS_PKCS1_V15\n\n/**\n * \\def MBEDTLS_PKCS1_V21\n *\n * Enable support for PKCS#1 v2.1 encoding.\n *\n * Requires: MBEDTLS_MD_C, MBEDTLS_RSA_C\n *\n * This enables support for RSAES-OAEP and RSASSA-PSS operations.\n */\n#define MBEDTLS_PKCS1_V21\n\n/**\n * \\def MBEDTLS_RSA_NO_CRT\n *\n * Do not use the Chinese Remainder Theorem\n * for the RSA private operation.\n *\n * Uncomment this macro to disable the use of CRT in RSA.\n *\n */\n//#define MBEDTLS_RSA_NO_CRT\n\n/**\n * \\def MBEDTLS_SELF_TEST\n *\n * Enable the checkup functions (*_self_test).\n */\n#define MBEDTLS_SELF_TEST\n\n/**\n * \\def MBEDTLS_SHA256_SMALLER\n *\n * Enable an implementation of SHA-256 that has lower ROM footprint but also\n * lower performance.\n *\n * The default implementation is meant to be a reasonnable compromise between\n * performance and size. This version optimizes more aggressively for size at\n * the expense of performance. Eg on Cortex-M4 it reduces the size of\n * mbedtls_sha256_process() from ~2KB to ~0.5KB for a performance hit of about\n * 30%.\n *\n * Uncomment to enable the smaller implementation of SHA256.\n */\n//#define MBEDTLS_SHA256_SMALLER\n\n/**\n * \\def MBEDTLS_SSL_ALL_ALERT_MESSAGES\n *\n * Enable sending of alert messages in case of encountered errors as per RFC.\n * If you choose not to send the alert messages, mbed TLS can still communicate\n * with other servers, only debugging of failures is harder.\n *\n * The advantage of not sending alert messages, is that no information is given\n * about reasons for failures thus preventing adversaries of gaining intel.\n *\n * Enable sending of all alert messages\n */\n#define MBEDTLS_SSL_ALL_ALERT_MESSAGES\n\n/**\n * \\def MBEDTLS_SSL_DEBUG_ALL\n *\n * Enable the debug messages in SSL module for all issues.\n * Debug messages have been disabled in some places to prevent timing\n * attacks due to (unbalanced) debugging function calls.\n *\n * If you need all error reporting you should enable this during debugging,\n * but remove this for production servers that should log as well.\n *\n * Uncomment this macro to report all debug messages on errors introducing\n * a timing side-channel.\n *\n */\n//#define MBEDTLS_SSL_DEBUG_ALL\n\n/** \\def MBEDTLS_SSL_ENCRYPT_THEN_MAC\n *\n * Enable support for Encrypt-then-MAC, RFC 7366.\n *\n * This allows peers that both support it to use a more robust protection for\n * ciphersuites using CBC, providing deep resistance against timing attacks\n * on the padding or underlying cipher.\n *\n * This only affects CBC ciphersuites, and is useless if none is defined.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1    or\n *           MBEDTLS_SSL_PROTO_TLS1_1  or\n *           MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for Encrypt-then-MAC\n */\n#define MBEDTLS_SSL_ENCRYPT_THEN_MAC\n\n/** \\def MBEDTLS_SSL_EXTENDED_MASTER_SECRET\n *\n * Enable support for Extended Master Secret, aka Session Hash\n * (draft-ietf-tls-session-hash-02).\n *\n * This was introduced as \"the proper fix\" to the Triple Handshake familiy of\n * attacks, but it is recommended to always use it (even if you disable\n * renegotiation), since it actually fixes a more fundamental issue in the\n * original SSL/TLS design, and has implications beyond Triple Handshake.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1    or\n *           MBEDTLS_SSL_PROTO_TLS1_1  or\n *           MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for Extended Master Secret.\n */\n#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET\n\n/**\n * \\def MBEDTLS_SSL_FALLBACK_SCSV\n *\n * Enable support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv-00).\n *\n * For servers, it is recommended to always enable this, unless you support\n * only one version of TLS, or know for sure that none of your clients\n * implements a fallback strategy.\n *\n * For clients, you only need this if you're using a fallback strategy, which\n * is not recommended in the first place, unless you absolutely need it to\n * interoperate with buggy (version-intolerant) servers.\n *\n * Comment this macro to disable support for FALLBACK_SCSV\n */\n#define MBEDTLS_SSL_FALLBACK_SCSV\n\n/**\n * \\def MBEDTLS_SSL_HW_RECORD_ACCEL\n *\n * Enable hooking functions in SSL module for hardware acceleration of\n * individual records.\n *\n * Uncomment this macro to enable hooking functions.\n */\n//#define MBEDTLS_SSL_HW_RECORD_ACCEL\n\n/**\n * \\def MBEDTLS_SSL_CBC_RECORD_SPLITTING\n *\n * Enable 1/n-1 record splitting for CBC mode in SSLv3 and TLS 1.0.\n *\n * This is a countermeasure to the BEAST attack, which also minimizes the risk\n * of interoperability issues compared to sending 0-length records.\n *\n * Comment this macro to disable 1/n-1 record splitting.\n */\n#define MBEDTLS_SSL_CBC_RECORD_SPLITTING\n\n/**\n * \\def MBEDTLS_SSL_RENEGOTIATION\n *\n * Enable support for TLS renegotiation.\n *\n * The two main uses of renegotiation are (1) refresh keys on long-lived\n * connections and (2) client authentication after the initial handshake.\n * If you don't need renegotiation, it's probably better to disable it, since\n * it has been associated with security issues in the past and is easy to\n * misuse/misunderstand.\n *\n * Comment this to disable support for renegotiation.\n *\n * \\note   Even if this option is disabled, both client and server are aware\n *         of the Renegotiation Indication Extension (RFC 5746) used to\n *         prevent the SSL renegotiation attack (see RFC 5746 Sect. 1).\n *         (See \\c mbedtls_ssl_conf_legacy_renegotiation for the\n *          configuration of this extension).\n *\n */\n#define MBEDTLS_SSL_RENEGOTIATION\n\n/**\n * \\def MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO\n *\n * Enable support for receiving and parsing SSLv2 Client Hello messages for the\n * SSL Server module (MBEDTLS_SSL_SRV_C).\n *\n * Uncomment this macro to enable support for SSLv2 Client Hello messages.\n */\n//#define MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO\n\n/**\n * \\def MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE\n *\n * Pick the ciphersuite according to the client's preferences rather than ours\n * in the SSL Server module (MBEDTLS_SSL_SRV_C).\n *\n * Uncomment this macro to respect client's ciphersuite order\n */\n//#define MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE\n\n/**\n * \\def MBEDTLS_SSL_MAX_FRAGMENT_LENGTH\n *\n * Enable support for RFC 6066 max_fragment_length extension in SSL.\n *\n * Comment this macro to disable support for the max_fragment_length extension\n */\n#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH\n\n/**\n * \\def MBEDTLS_SSL_PROTO_SSL3\n *\n * Enable support for SSL 3.0.\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for SSL 3.0\n */\n//#define MBEDTLS_SSL_PROTO_SSL3\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1\n *\n * Enable support for TLS 1.0.\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for TLS 1.0\n */\n#define MBEDTLS_SSL_PROTO_TLS1\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1_1\n *\n * Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled).\n *\n * Requires: MBEDTLS_MD5_C\n *           MBEDTLS_SHA1_C\n *\n * Comment this macro to disable support for TLS 1.1 / DTLS 1.0\n */\n#define MBEDTLS_SSL_PROTO_TLS1_1\n\n/**\n * \\def MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Enable support for TLS 1.2 (and DTLS 1.2 if DTLS is enabled).\n *\n * Requires: MBEDTLS_SHA1_C or MBEDTLS_SHA256_C or MBEDTLS_SHA512_C\n *           (Depends on ciphersuites)\n *\n * Comment this macro to disable support for TLS 1.2 / DTLS 1.2\n */\n#define MBEDTLS_SSL_PROTO_TLS1_2\n\n/**\n * \\def MBEDTLS_SSL_PROTO_DTLS\n *\n * Enable support for DTLS (all available versions).\n *\n * Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0,\n * and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2.\n *\n * Requires: MBEDTLS_SSL_PROTO_TLS1_1\n *        or MBEDTLS_SSL_PROTO_TLS1_2\n *\n * Comment this macro to disable support for DTLS\n */\n#define MBEDTLS_SSL_PROTO_DTLS\n\n/**\n * \\def MBEDTLS_SSL_ALPN\n *\n * Enable support for RFC 7301 Application Layer Protocol Negotiation.\n *\n * Comment this macro to disable support for ALPN.\n */\n#define MBEDTLS_SSL_ALPN\n\n/**\n * \\def MBEDTLS_SSL_DTLS_ANTI_REPLAY\n *\n * Enable support for the anti-replay mechanism in DTLS.\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *           MBEDTLS_SSL_PROTO_DTLS\n *\n * \\warning Disabling this is often a security risk!\n * See mbedtls_ssl_conf_dtls_anti_replay() for details.\n *\n * Comment this to disable anti-replay in DTLS.\n */\n#define MBEDTLS_SSL_DTLS_ANTI_REPLAY\n\n/**\n * \\def MBEDTLS_SSL_DTLS_HELLO_VERIFY\n *\n * Enable support for HelloVerifyRequest on DTLS servers.\n *\n * This feature is highly recommended to prevent DTLS servers being used as\n * amplifiers in DoS attacks against other hosts. It should always be enabled\n * unless you know for sure amplification cannot be a problem in the\n * environment in which your server operates.\n *\n * \\warning Disabling this can ba a security risk! (see above)\n *\n * Requires: MBEDTLS_SSL_PROTO_DTLS\n *\n * Comment this to disable support for HelloVerifyRequest.\n */\n#define MBEDTLS_SSL_DTLS_HELLO_VERIFY\n\n/**\n * \\def MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE\n *\n * Enable server-side support for clients that reconnect from the same port.\n *\n * Some clients unexpectedly close the connection and try to reconnect using the\n * same source port. This needs special support from the server to handle the\n * new connection securely, as described in section 4.2.8 of RFC 6347. This\n * flag enables that support.\n *\n * Requires: MBEDTLS_SSL_DTLS_HELLO_VERIFY\n *\n * Comment this to disable support for clients reusing the source port.\n */\n#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE\n\n/**\n * \\def MBEDTLS_SSL_DTLS_BADMAC_LIMIT\n *\n * Enable support for a limit of records with bad MAC.\n *\n * See mbedtls_ssl_conf_dtls_badmac_limit().\n *\n * Requires: MBEDTLS_SSL_PROTO_DTLS\n */\n#define MBEDTLS_SSL_DTLS_BADMAC_LIMIT\n\n/**\n * \\def MBEDTLS_SSL_SESSION_TICKETS\n *\n * Enable support for RFC 5077 session tickets in SSL.\n * Client-side, provides full support for session tickets (maintenance of a\n * session store remains the responsibility of the application, though).\n * Server-side, you also need to provide callbacks for writing and parsing\n * tickets, including authenticated encryption and key management. Example\n * callbacks are provided by MBEDTLS_SSL_TICKET_C.\n *\n * Comment this macro to disable support for SSL session tickets\n */\n#define MBEDTLS_SSL_SESSION_TICKETS\n\n/**\n * \\def MBEDTLS_SSL_EXPORT_KEYS\n *\n * Enable support for exporting key block and master secret.\n * This is required for certain users of TLS, e.g. EAP-TLS.\n *\n * Comment this macro to disable support for key export\n */\n#define MBEDTLS_SSL_EXPORT_KEYS\n\n/**\n * \\def MBEDTLS_SSL_SERVER_NAME_INDICATION\n *\n * Enable support for RFC 6066 server name indication (SNI) in SSL.\n *\n * Requires: MBEDTLS_X509_CRT_PARSE_C\n *\n * Comment this macro to disable support for server name indication in SSL\n */\n#define MBEDTLS_SSL_SERVER_NAME_INDICATION\n\n/**\n * \\def MBEDTLS_SSL_TRUNCATED_HMAC\n *\n * Enable support for RFC 6066 truncated HMAC in SSL.\n *\n * Comment this macro to disable support for truncated HMAC in SSL\n */\n#define MBEDTLS_SSL_TRUNCATED_HMAC\n\n/**\n * \\def MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT\n *\n * Fallback to old (pre-2.7), non-conforming implementation of the truncated\n * HMAC extension which also truncates the HMAC key. Note that this option is\n * only meant for a transitory upgrade period and is likely to be removed in\n * a future version of the library.\n *\n * \\warning The old implementation is non-compliant and has a security weakness\n *          (2^80 brute force attack on the HMAC key used for a single,\n *          uninterrupted connection). This should only be enabled temporarily\n *          when (1) the use of truncated HMAC is essential in order to save\n *          bandwidth, and (2) the peer is an Mbed TLS stack that doesn't use\n *          the fixed implementation yet (pre-2.7).\n *\n * \\deprecated This option is deprecated and will likely be removed in a\n *             future version of Mbed TLS.\n *\n * Uncomment to fallback to old, non-compliant truncated HMAC implementation.\n *\n * Requires: MBEDTLS_SSL_TRUNCATED_HMAC\n */\n//#define MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT\n\n/**\n * \\def MBEDTLS_THREADING_ALT\n *\n * Provide your own alternate threading implementation.\n *\n * Requires: MBEDTLS_THREADING_C\n *\n * Uncomment this to allow your own alternate threading implementation.\n */\n//#define MBEDTLS_THREADING_ALT\n\n/**\n * \\def MBEDTLS_THREADING_PTHREAD\n *\n * Enable the pthread wrapper layer for the threading layer.\n *\n * Requires: MBEDTLS_THREADING_C\n *\n * Uncomment this to enable pthread mutexes.\n */\n//#define MBEDTLS_THREADING_PTHREAD\n\n/**\n * \\def MBEDTLS_VERSION_FEATURES\n *\n * Allow run-time checking of compile-time enabled features. Thus allowing users\n * to check at run-time if the library is for instance compiled with threading\n * support via mbedtls_version_check_feature().\n *\n * Requires: MBEDTLS_VERSION_C\n *\n * Comment this to disable run-time checking and save ROM space\n */\n#define MBEDTLS_VERSION_FEATURES\n\n/**\n * \\def MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3\n *\n * If set, the X509 parser will not break-off when parsing an X509 certificate\n * and encountering an extension in a v1 or v2 certificate.\n *\n * Uncomment to prevent an error.\n */\n//#define MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3\n\n/**\n * \\def MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION\n *\n * If set, the X509 parser will not break-off when parsing an X509 certificate\n * and encountering an unknown critical extension.\n *\n * \\warning Depending on your PKI use, enabling this can be a security risk!\n *\n * Uncomment to prevent an error.\n */\n//#define MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION\n\n/**\n * \\def MBEDTLS_X509_CHECK_KEY_USAGE\n *\n * Enable verification of the keyUsage extension (CA and leaf certificates).\n *\n * Disabling this avoids problems with mis-issued and/or misused\n * (intermediate) CA and leaf certificates.\n *\n * \\warning Depending on your PKI use, disabling this can be a security risk!\n *\n * Comment to skip keyUsage checking for both CA and leaf certificates.\n */\n#define MBEDTLS_X509_CHECK_KEY_USAGE\n\n/**\n * \\def MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE\n *\n * Enable verification of the extendedKeyUsage extension (leaf certificates).\n *\n * Disabling this avoids problems with mis-issued and/or misused certificates.\n *\n * \\warning Depending on your PKI use, disabling this can be a security risk!\n *\n * Comment to skip extendedKeyUsage checking for certificates.\n */\n#define MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE\n\n/**\n * \\def MBEDTLS_X509_RSASSA_PSS_SUPPORT\n *\n * Enable parsing and verification of X.509 certificates, CRLs and CSRS\n * signed with RSASSA-PSS (aka PKCS#1 v2.1).\n *\n * Comment this macro to disallow using RSASSA-PSS in certificates.\n */\n#define MBEDTLS_X509_RSASSA_PSS_SUPPORT\n\n/**\n * \\def MBEDTLS_ZLIB_SUPPORT\n *\n * If set, the SSL/TLS module uses ZLIB to support compression and\n * decompression of packet data.\n *\n * \\warning TLS-level compression MAY REDUCE SECURITY! See for example the\n * CRIME attack. Before enabling this option, you should examine with care if\n * CRIME or similar exploits may be applicable to your use case.\n *\n * \\note Currently compression can't be used with DTLS.\n *\n * Used in: library/ssl_tls.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This feature requires zlib library and headers to be present.\n *\n * Uncomment to enable use of ZLIB\n */\n//#define MBEDTLS_ZLIB_SUPPORT\n/* \\} name SECTION: mbed TLS feature support */\n\n/**\n * \\name SECTION: mbed TLS modules\n *\n * This section enables or disables entire modules in mbed TLS\n * \\{\n */\n\n/**\n * \\def MBEDTLS_AESNI_C\n *\n * Enable AES-NI support on x86-64.\n *\n * Module:  library/aesni.c\n * Caller:  library/aes.c\n *\n * Requires: MBEDTLS_HAVE_ASM\n *\n * This modules adds support for the AES-NI instructions on x86-64\n */\n#define MBEDTLS_AESNI_C\n\n/**\n * \\def MBEDTLS_AES_C\n *\n * Enable the AES block cipher.\n *\n * Module:  library/aes.c\n * Caller:  library/ssl_tls.c\n *          library/pem.c\n *          library/ctr_drbg.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA\n *\n * PEM_PARSE uses AES for decrypting encrypted keys.\n */\n#define MBEDTLS_AES_C\n\n/**\n * \\def MBEDTLS_ARC4_C\n *\n * Enable the ARCFOUR stream cipher.\n *\n * Module:  library/arc4.c\n * Caller:  library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_RSA_WITH_RC4_128_MD5\n *      MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA\n *      MBEDTLS_TLS_PSK_WITH_RC4_128_SHA\n *\n * \\warning   ARC4 is considered a weak cipher and its use constitutes a\n *            security risk. If possible, we recommend avoidng dependencies on\n *            it, and considering stronger ciphers instead.\n *\n */\n#define MBEDTLS_ARC4_C\n\n/**\n * \\def MBEDTLS_ASN1_PARSE_C\n *\n * Enable the generic ASN1 parser.\n *\n * Module:  library/asn1.c\n * Caller:  library/x509.c\n *          library/dhm.c\n *          library/pkcs12.c\n *          library/pkcs5.c\n *          library/pkparse.c\n */\n#define MBEDTLS_ASN1_PARSE_C\n\n/**\n * \\def MBEDTLS_ASN1_WRITE_C\n *\n * Enable the generic ASN1 writer.\n *\n * Module:  library/asn1write.c\n * Caller:  library/ecdsa.c\n *          library/pkwrite.c\n *          library/x509_create.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n */\n#define MBEDTLS_ASN1_WRITE_C\n\n/**\n * \\def MBEDTLS_BASE64_C\n *\n * Enable the Base64 module.\n *\n * Module:  library/base64.c\n * Caller:  library/pem.c\n *\n * This module is required for PEM support (required by X.509).\n */\n#define MBEDTLS_BASE64_C\n\n/**\n * \\def MBEDTLS_BIGNUM_C\n *\n * Enable the multi-precision integer library.\n *\n * Module:  library/bignum.c\n * Caller:  library/dhm.c\n *          library/ecp.c\n *          library/ecdsa.c\n *          library/rsa.c\n *          library/rsa_internal.c\n *          library/ssl_tls.c\n *\n * This module is required for RSA, DHM and ECC (ECDH, ECDSA) support.\n */\n#define MBEDTLS_BIGNUM_C\n\n/**\n * \\def MBEDTLS_BLOWFISH_C\n *\n * Enable the Blowfish block cipher.\n *\n * Module:  library/blowfish.c\n */\n#define MBEDTLS_BLOWFISH_C\n\n/**\n * \\def MBEDTLS_CAMELLIA_C\n *\n * Enable the Camellia block cipher.\n *\n * Module:  library/camellia.c\n * Caller:  library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256\n *      MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256\n */\n#define MBEDTLS_CAMELLIA_C\n\n/**\n * \\def MBEDTLS_CCM_C\n *\n * Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.\n *\n * Module:  library/ccm.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C\n *\n * This module enables the AES-CCM ciphersuites, if other requisites are\n * enabled as well.\n */\n#define MBEDTLS_CCM_C\n\n/**\n * \\def MBEDTLS_CERTS_C\n *\n * Enable the test certificates.\n *\n * Module:  library/certs.c\n * Caller:\n *\n * This module is used for testing (ssl_client/server).\n */\n#define MBEDTLS_CERTS_C\n\n/**\n * \\def MBEDTLS_CIPHER_C\n *\n * Enable the generic cipher layer.\n *\n * Module:  library/cipher.c\n * Caller:  library/ssl_tls.c\n *\n * Uncomment to enable generic cipher wrappers.\n */\n#define MBEDTLS_CIPHER_C\n\n/**\n * \\def MBEDTLS_CMAC_C\n *\n * Enable the CMAC (Cipher-based Message Authentication Code) mode for block\n * ciphers.\n *\n * Module:  library/cmac.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_DES_C\n *\n */\n//#define MBEDTLS_CMAC_C\n\n/**\n * \\def MBEDTLS_CTR_DRBG_C\n *\n * Enable the CTR_DRBG AES-256-based random generator.\n *\n * Module:  library/ctr_drbg.c\n * Caller:\n *\n * Requires: MBEDTLS_AES_C\n *\n * This module provides the CTR_DRBG AES-256 random number generator.\n */\n#define MBEDTLS_CTR_DRBG_C\n\n/**\n * \\def MBEDTLS_DEBUG_C\n *\n * Enable the debug functions.\n *\n * Module:  library/debug.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * This module provides debugging functions.\n */\n#define MBEDTLS_DEBUG_C\n\n/**\n * \\def MBEDTLS_DES_C\n *\n * Enable the DES block cipher.\n *\n * Module:  library/des.c\n * Caller:  library/pem.c\n *          library/ssl_tls.c\n *\n * This module enables the following ciphersuites (if other requisites are\n * enabled as well):\n *      MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA\n *      MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA\n *\n * PEM_PARSE uses DES/3DES for decrypting encrypted keys.\n *\n * \\warning   DES is considered a weak cipher and its use constitutes a\n *            security risk. We recommend considering stronger ciphers instead.\n */\n#define MBEDTLS_DES_C\n\n/**\n * \\def MBEDTLS_DHM_C\n *\n * Enable the Diffie-Hellman-Merkle module.\n *\n * Module:  library/dhm.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module is used by the following key exchanges:\n *      DHE-RSA, DHE-PSK\n *\n * \\warning    Using DHE constitutes a security risk as it\n *             is not possible to validate custom DH parameters.\n *             If possible, it is recommended users should consider\n *             preferring other methods of key exchange.\n *             See dhm.h for more details.\n *\n */\n#define MBEDTLS_DHM_C\n\n/**\n * \\def MBEDTLS_ECDH_C\n *\n * Enable the elliptic curve Diffie-Hellman library.\n *\n * Module:  library/ecdh.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module is used by the following key exchanges:\n *      ECDHE-ECDSA, ECDHE-RSA, DHE-PSK\n *\n * Requires: MBEDTLS_ECP_C\n */\n#define MBEDTLS_ECDH_C\n\n/**\n * \\def MBEDTLS_ECDSA_C\n *\n * Enable the elliptic curve DSA library.\n *\n * Module:  library/ecdsa.c\n * Caller:\n *\n * This module is used by the following key exchanges:\n *      ECDHE-ECDSA\n *\n * Requires: MBEDTLS_ECP_C, MBEDTLS_ASN1_WRITE_C, MBEDTLS_ASN1_PARSE_C\n */\n#define MBEDTLS_ECDSA_C\n\n/**\n * \\def MBEDTLS_ECJPAKE_C\n *\n * Enable the elliptic curve J-PAKE library.\n *\n * \\warning This is currently experimental. EC J-PAKE support is based on the\n * Thread v1.0.0 specification; incompatible changes to the specification\n * might still happen. For this reason, this is disabled by default.\n *\n * Module:  library/ecjpake.c\n * Caller:\n *\n * This module is used by the following key exchanges:\n *      ECJPAKE\n *\n * Requires: MBEDTLS_ECP_C, MBEDTLS_MD_C\n */\n//#define MBEDTLS_ECJPAKE_C\n\n/**\n * \\def MBEDTLS_ECP_C\n *\n * Enable the elliptic curve over GF(p) library.\n *\n * Module:  library/ecp.c\n * Caller:  library/ecdh.c\n *          library/ecdsa.c\n *          library/ecjpake.c\n *\n * Requires: MBEDTLS_BIGNUM_C and at least one MBEDTLS_ECP_DP_XXX_ENABLED\n */\n#define MBEDTLS_ECP_C\n\n/**\n * \\def MBEDTLS_ENTROPY_C\n *\n * Enable the platform-specific entropy code.\n *\n * Module:  library/entropy.c\n * Caller:\n *\n * Requires: MBEDTLS_SHA512_C or MBEDTLS_SHA256_C\n *\n * This module provides a generic entropy pool\n */\n#define MBEDTLS_ENTROPY_C\n\n/**\n * \\def MBEDTLS_ERROR_C\n *\n * Enable error code to error string conversion.\n *\n * Module:  library/error.c\n * Caller:\n *\n * This module enables mbedtls_strerror().\n */\n#define MBEDTLS_ERROR_C\n\n/**\n * \\def MBEDTLS_GCM_C\n *\n * Enable the Galois/Counter Mode (GCM) for AES.\n *\n * Module:  library/gcm.c\n *\n * Requires: MBEDTLS_AES_C or MBEDTLS_CAMELLIA_C\n *\n * This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other\n * requisites are enabled as well.\n */\n#define MBEDTLS_GCM_C\n\n/**\n * \\def MBEDTLS_HAVEGE_C\n *\n * Enable the HAVEGE random generator.\n *\n * Warning: the HAVEGE random generator is not suitable for virtualized\n *          environments\n *\n * Warning: the HAVEGE random generator is dependent on timing and specific\n *          processor traits. It is therefore not advised to use HAVEGE as\n *          your applications primary random generator or primary entropy pool\n *          input. As a secondary input to your entropy pool, it IS able add\n *          the (limited) extra entropy it provides.\n *\n * Module:  library/havege.c\n * Caller:\n *\n * Requires: MBEDTLS_TIMING_C\n *\n * Uncomment to enable the HAVEGE random generator.\n */\n//#define MBEDTLS_HAVEGE_C\n\n/**\n * \\def MBEDTLS_HMAC_DRBG_C\n *\n * Enable the HMAC_DRBG random generator.\n *\n * Module:  library/hmac_drbg.c\n * Caller:\n *\n * Requires: MBEDTLS_MD_C\n *\n * Uncomment to enable the HMAC_DRBG random number geerator.\n */\n#define MBEDTLS_HMAC_DRBG_C\n\n/**\n * \\def MBEDTLS_MD_C\n *\n * Enable the generic message digest layer.\n *\n * Module:  library/md.c\n * Caller:\n *\n * Uncomment to enable generic message digest wrappers.\n */\n#define MBEDTLS_MD_C\n\n/**\n * \\def MBEDTLS_MD2_C\n *\n * Enable the MD2 hash algorithm.\n *\n * Module:  library/md2.c\n * Caller:\n *\n * Uncomment to enable support for (rare) MD2-signed X.509 certs.\n *\n * \\warning   MD2 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n//#define MBEDTLS_MD2_C\n\n/**\n * \\def MBEDTLS_MD4_C\n *\n * Enable the MD4 hash algorithm.\n *\n * Module:  library/md4.c\n * Caller:\n *\n * Uncomment to enable support for (rare) MD4-signed X.509 certs.\n *\n * \\warning   MD4 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n//#define MBEDTLS_MD4_C\n\n/**\n * \\def MBEDTLS_MD5_C\n *\n * Enable the MD5 hash algorithm.\n *\n * Module:  library/md5.c\n * Caller:  library/md.c\n *          library/pem.c\n *          library/ssl_tls.c\n *\n * This module is required for SSL/TLS up to version 1.1, and for TLS 1.2\n * depending on the handshake parameters. Further, it is used for checking\n * MD5-signed certificates, and for PBKDF1 when decrypting PEM-encoded\n * encrypted keys.\n *\n * \\warning   MD5 is considered a weak message digest and its use constitutes a\n *            security risk. If possible, we recommend avoiding dependencies on\n *            it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_MD5_C\n\n/**\n * \\def MBEDTLS_MEMORY_BUFFER_ALLOC_C\n *\n * Enable the buffer allocator implementation that makes use of a (stack)\n * based buffer to 'allocate' dynamic memory. (replaces calloc() and free()\n * calls)\n *\n * Module:  library/memory_buffer_alloc.c\n *\n * Requires: MBEDTLS_PLATFORM_C\n *           MBEDTLS_PLATFORM_MEMORY (to use it within mbed TLS)\n *\n * Enable this module to enable the buffer memory allocator.\n */\n//#define MBEDTLS_MEMORY_BUFFER_ALLOC_C\n\n/**\n * \\def MBEDTLS_NET_C\n *\n * Enable the TCP and UDP over IPv6/IPv4 networking routines.\n *\n * \\note This module only works on POSIX/Unix (including Linux, BSD and OS X)\n * and Windows. For other platforms, you'll want to disable it, and write your\n * own networking callbacks to be passed to \\c mbedtls_ssl_set_bio().\n *\n * \\note See also our Knowledge Base article about porting to a new\n * environment:\n * https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS\n *\n * Module:  library/net_sockets.c\n *\n * This module provides networking routines.\n */\n#define MBEDTLS_NET_C\n\n/**\n * \\def MBEDTLS_OID_C\n *\n * Enable the OID database.\n *\n * Module:  library/oid.c\n * Caller:  library/asn1write.c\n *          library/pkcs5.c\n *          library/pkparse.c\n *          library/pkwrite.c\n *          library/rsa.c\n *          library/x509.c\n *          library/x509_create.c\n *          library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n *\n * This modules translates between OIDs and internal values.\n */\n#define MBEDTLS_OID_C\n\n/**\n * \\def MBEDTLS_PADLOCK_C\n *\n * Enable VIA Padlock support on x86.\n *\n * Module:  library/padlock.c\n * Caller:  library/aes.c\n *\n * Requires: MBEDTLS_HAVE_ASM\n *\n * This modules adds support for the VIA PadLock on x86.\n */\n#define MBEDTLS_PADLOCK_C\n\n/**\n * \\def MBEDTLS_PEM_PARSE_C\n *\n * Enable PEM decoding / parsing.\n *\n * Module:  library/pem.c\n * Caller:  library/dhm.c\n *          library/pkparse.c\n *          library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_BASE64_C\n *\n * This modules adds support for decoding / parsing PEM files.\n */\n#define MBEDTLS_PEM_PARSE_C\n\n/**\n * \\def MBEDTLS_PEM_WRITE_C\n *\n * Enable PEM encoding / writing.\n *\n * Module:  library/pem.c\n * Caller:  library/pkwrite.c\n *          library/x509write_crt.c\n *          library/x509write_csr.c\n *\n * Requires: MBEDTLS_BASE64_C\n *\n * This modules adds support for encoding / writing PEM files.\n */\n#define MBEDTLS_PEM_WRITE_C\n\n/**\n * \\def MBEDTLS_PK_C\n *\n * Enable the generic public (asymetric) key layer.\n *\n * Module:  library/pk.c\n * Caller:  library/ssl_tls.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * Requires: MBEDTLS_RSA_C or MBEDTLS_ECP_C\n *\n * Uncomment to enable generic public key wrappers.\n */\n#define MBEDTLS_PK_C\n\n/**\n * \\def MBEDTLS_PK_PARSE_C\n *\n * Enable the generic public (asymetric) key parser.\n *\n * Module:  library/pkparse.c\n * Caller:  library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * Uncomment to enable generic public key parse functions.\n */\n#define MBEDTLS_PK_PARSE_C\n\n/**\n * \\def MBEDTLS_PK_WRITE_C\n *\n * Enable the generic public (asymetric) key writer.\n *\n * Module:  library/pkwrite.c\n * Caller:  library/x509write.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * Uncomment to enable generic public key write functions.\n */\n#define MBEDTLS_PK_WRITE_C\n\n/**\n * \\def MBEDTLS_PKCS5_C\n *\n * Enable PKCS#5 functions.\n *\n * Module:  library/pkcs5.c\n *\n * Requires: MBEDTLS_MD_C\n *\n * This module adds support for the PKCS#5 functions.\n */\n#define MBEDTLS_PKCS5_C\n\n/**\n * \\def MBEDTLS_PKCS11_C\n *\n * Enable wrapper for PKCS#11 smartcard support.\n *\n * Module:  library/pkcs11.c\n * Caller:  library/pk.c\n *\n * Requires: MBEDTLS_PK_C\n *\n * This module enables SSL/TLS PKCS #11 smartcard support.\n * Requires the presence of the PKCS#11 helper library (libpkcs11-helper)\n */\n//#define MBEDTLS_PKCS11_C\n\n/**\n * \\def MBEDTLS_PKCS12_C\n *\n * Enable PKCS#12 PBE functions.\n * Adds algorithms for parsing PKCS#8 encrypted private keys\n *\n * Module:  library/pkcs12.c\n * Caller:  library/pkparse.c\n *\n * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_CIPHER_C, MBEDTLS_MD_C\n * Can use:  MBEDTLS_ARC4_C\n *\n * This module enables PKCS#12 functions.\n */\n#define MBEDTLS_PKCS12_C\n\n/**\n * \\def MBEDTLS_PLATFORM_C\n *\n * Enable the platform abstraction layer that allows you to re-assign\n * functions like calloc(), free(), snprintf(), printf(), fprintf(), exit().\n *\n * Enabling MBEDTLS_PLATFORM_C enables to use of MBEDTLS_PLATFORM_XXX_ALT\n * or MBEDTLS_PLATFORM_XXX_MACRO directives, allowing the functions mentioned\n * above to be specified at runtime or compile time respectively.\n *\n * \\note This abstraction layer must be enabled on Windows (including MSYS2)\n * as other module rely on it for a fixed snprintf implementation.\n *\n * Module:  library/platform.c\n * Caller:  Most other .c files\n *\n * This module enables abstraction of common (libc) functions.\n */\n#define MBEDTLS_PLATFORM_C\n\n/**\n * \\def MBEDTLS_RIPEMD160_C\n *\n * Enable the RIPEMD-160 hash algorithm.\n *\n * Module:  library/ripemd160.c\n * Caller:  library/md.c\n *\n */\n#define MBEDTLS_RIPEMD160_C\n\n/**\n * \\def MBEDTLS_RSA_C\n *\n * Enable the RSA public-key cryptosystem.\n *\n * Module:  library/rsa.c\n *          library/rsa_internal.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *          library/x509.c\n *\n * This module is used by the following key exchanges:\n *      RSA, DHE-RSA, ECDHE-RSA, RSA-PSK\n *\n * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C\n */\n#define MBEDTLS_RSA_C\n\n/**\n * \\def MBEDTLS_SHA1_C\n *\n * Enable the SHA1 cryptographic hash algorithm.\n *\n * Module:  library/sha1.c\n * Caller:  library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *          library/x509write_crt.c\n *\n * This module is required for SSL/TLS up to version 1.1, for TLS 1.2\n * depending on the handshake parameters, and for SHA1-signed certificates.\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_SHA1_C\n\n/**\n * \\def MBEDTLS_SHA256_C\n *\n * Enable the SHA-224 and SHA-256 cryptographic hash algorithms.\n *\n * Module:  library/sha256.c\n * Caller:  library/entropy.c\n *          library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * This module adds support for SHA-224 and SHA-256.\n * This module is required for the SSL/TLS 1.2 PRF function.\n */\n#define MBEDTLS_SHA256_C\n\n/**\n * \\def MBEDTLS_SHA512_C\n *\n * Enable the SHA-384 and SHA-512 cryptographic hash algorithms.\n *\n * Module:  library/sha512.c\n * Caller:  library/entropy.c\n *          library/md.c\n *          library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * This module adds support for SHA-384 and SHA-512.\n */\n#define MBEDTLS_SHA512_C\n\n/**\n * \\def MBEDTLS_SSL_CACHE_C\n *\n * Enable simple SSL cache implementation.\n *\n * Module:  library/ssl_cache.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_CACHE_C\n */\n#define MBEDTLS_SSL_CACHE_C\n\n/**\n * \\def MBEDTLS_SSL_COOKIE_C\n *\n * Enable basic implementation of DTLS cookies for hello verification.\n *\n * Module:  library/ssl_cookie.c\n * Caller:\n */\n#define MBEDTLS_SSL_COOKIE_C\n\n/**\n * \\def MBEDTLS_SSL_TICKET_C\n *\n * Enable an implementation of TLS server-side callbacks for session tickets.\n *\n * Module:  library/ssl_ticket.c\n * Caller:\n *\n * Requires: MBEDTLS_CIPHER_C\n */\n#define MBEDTLS_SSL_TICKET_C\n\n/**\n * \\def MBEDTLS_SSL_CLI_C\n *\n * Enable the SSL/TLS client code.\n *\n * Module:  library/ssl_cli.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *\n * This module is required for SSL/TLS client support.\n */\n#define MBEDTLS_SSL_CLI_C\n\n/**\n * \\def MBEDTLS_SSL_SRV_C\n *\n * Enable the SSL/TLS server code.\n *\n * Module:  library/ssl_srv.c\n * Caller:\n *\n * Requires: MBEDTLS_SSL_TLS_C\n *\n * This module is required for SSL/TLS server support.\n */\n#define MBEDTLS_SSL_SRV_C\n\n/**\n * \\def MBEDTLS_SSL_TLS_C\n *\n * Enable the generic SSL/TLS code.\n *\n * Module:  library/ssl_tls.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *\n * Requires: MBEDTLS_CIPHER_C, MBEDTLS_MD_C\n *           and at least one of the MBEDTLS_SSL_PROTO_XXX defines\n *\n * This module is required for SSL/TLS.\n */\n#define MBEDTLS_SSL_TLS_C\n\n/**\n * \\def MBEDTLS_THREADING_C\n *\n * Enable the threading abstraction layer.\n * By default mbed TLS assumes it is used in a non-threaded environment or that\n * contexts are not shared between threads. If you do intend to use contexts\n * between threads, you will need to enable this layer to prevent race\n * conditions. See also our Knowledge Base article about threading:\n * https://tls.mbed.org/kb/development/thread-safety-and-multi-threading\n *\n * Module:  library/threading.c\n *\n * This allows different threading implementations (self-implemented or\n * provided).\n *\n * You will have to enable either MBEDTLS_THREADING_ALT or\n * MBEDTLS_THREADING_PTHREAD.\n *\n * Enable this layer to allow use of mutexes within mbed TLS\n */\n//#define MBEDTLS_THREADING_C\n\n/**\n * \\def MBEDTLS_TIMING_C\n *\n * Enable the semi-portable timing interface.\n *\n * \\note The provided implementation only works on POSIX/Unix (including Linux,\n * BSD and OS X) and Windows. On other platforms, you can either disable that\n * module and provide your own implementations of the callbacks needed by\n * \\c mbedtls_ssl_set_timer_cb() for DTLS, or leave it enabled and provide\n * your own implementation of the whole module by setting\n * \\c MBEDTLS_TIMING_ALT in the current file.\n *\n * \\note See also our Knowledge Base article about porting to a new\n * environment:\n * https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS\n *\n * Module:  library/timing.c\n * Caller:  library/havege.c\n *\n * This module is used by the HAVEGE random number generator.\n */\n#define MBEDTLS_TIMING_C\n\n/**\n * \\def MBEDTLS_VERSION_C\n *\n * Enable run-time version information.\n *\n * Module:  library/version.c\n *\n * This module provides run-time version information.\n */\n#define MBEDTLS_VERSION_C\n\n/**\n * \\def MBEDTLS_X509_USE_C\n *\n * Enable X.509 core for using certificates.\n *\n * Module:  library/x509.c\n * Caller:  library/x509_crl.c\n *          library/x509_crt.c\n *          library/x509_csr.c\n *\n * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_BIGNUM_C, MBEDTLS_OID_C,\n *           MBEDTLS_PK_PARSE_C\n *\n * This module is required for the X.509 parsing modules.\n */\n#define MBEDTLS_X509_USE_C\n\n/**\n * \\def MBEDTLS_X509_CRT_PARSE_C\n *\n * Enable X.509 certificate parsing.\n *\n * Module:  library/x509_crt.c\n * Caller:  library/ssl_cli.c\n *          library/ssl_srv.c\n *          library/ssl_tls.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is required for X.509 certificate parsing.\n */\n#define MBEDTLS_X509_CRT_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CRL_PARSE_C\n *\n * Enable X.509 CRL parsing.\n *\n * Module:  library/x509_crl.c\n * Caller:  library/x509_crt.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is required for X.509 CRL parsing.\n */\n#define MBEDTLS_X509_CRL_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CSR_PARSE_C\n *\n * Enable X.509 Certificate Signing Request (CSR) parsing.\n *\n * Module:  library/x509_csr.c\n * Caller:  library/x509_crt_write.c\n *\n * Requires: MBEDTLS_X509_USE_C\n *\n * This module is used for reading X.509 certificate request.\n */\n#define MBEDTLS_X509_CSR_PARSE_C\n\n/**\n * \\def MBEDTLS_X509_CREATE_C\n *\n * Enable X.509 core for creating certificates.\n *\n * Module:  library/x509_create.c\n *\n * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C, MBEDTLS_PK_WRITE_C\n *\n * This module is the basis for creating X.509 certificates and CSRs.\n */\n#define MBEDTLS_X509_CREATE_C\n\n/**\n * \\def MBEDTLS_X509_CRT_WRITE_C\n *\n * Enable creating X.509 certificates.\n *\n * Module:  library/x509_crt_write.c\n *\n * Requires: MBEDTLS_X509_CREATE_C\n *\n * This module is required for X.509 certificate creation.\n */\n#define MBEDTLS_X509_CRT_WRITE_C\n\n/**\n * \\def MBEDTLS_X509_CSR_WRITE_C\n *\n * Enable creating X.509 Certificate Signing Requests (CSR).\n *\n * Module:  library/x509_csr_write.c\n *\n * Requires: MBEDTLS_X509_CREATE_C\n *\n * This module is required for X.509 certificate request writing.\n */\n#define MBEDTLS_X509_CSR_WRITE_C\n\n/**\n * \\def MBEDTLS_XTEA_C\n *\n * Enable the XTEA block cipher.\n *\n * Module:  library/xtea.c\n * Caller:\n */\n#define MBEDTLS_XTEA_C\n\n/* \\} name SECTION: mbed TLS modules */\n\n/**\n * \\name SECTION: Module configuration options\n *\n * This section allows for the setting of module specific sizes and\n * configuration options. The default values are already present in the\n * relevant header files and should suffice for the regular use cases.\n *\n * Our advice is to enable options and change their values here\n * only if you have a good reason and know the consequences.\n *\n * Please check the respective header file for documentation on these\n * parameters (to prevent duplicate documentation).\n * \\{\n */\n\n/* MPI / BIGNUM options */\n//#define MBEDTLS_MPI_WINDOW_SIZE            6 /**< Maximum windows size used. */\n//#define MBEDTLS_MPI_MAX_SIZE            1024 /**< Maximum number of bytes for usable MPIs. */\n\n/* CTR_DRBG options */\n//#define MBEDTLS_CTR_DRBG_ENTROPY_LEN               48 /**< Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) */\n//#define MBEDTLS_CTR_DRBG_RESEED_INTERVAL        10000 /**< Interval before reseed is performed by default */\n//#define MBEDTLS_CTR_DRBG_MAX_INPUT                256 /**< Maximum number of additional input bytes */\n//#define MBEDTLS_CTR_DRBG_MAX_REQUEST             1024 /**< Maximum number of requested bytes per call */\n//#define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT           384 /**< Maximum size of (re)seed buffer */\n\n/* HMAC_DRBG options */\n//#define MBEDTLS_HMAC_DRBG_RESEED_INTERVAL   10000 /**< Interval before reseed is performed by default */\n//#define MBEDTLS_HMAC_DRBG_MAX_INPUT           256 /**< Maximum number of additional input bytes */\n//#define MBEDTLS_HMAC_DRBG_MAX_REQUEST        1024 /**< Maximum number of requested bytes per call */\n//#define MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT      384 /**< Maximum size of (re)seed buffer */\n\n/* ECP options */\n//#define MBEDTLS_ECP_MAX_BITS             521 /**< Maximum bit size of groups */\n//#define MBEDTLS_ECP_WINDOW_SIZE            6 /**< Maximum window size used */\n//#define MBEDTLS_ECP_FIXED_POINT_OPTIM      1 /**< Enable fixed-point speed-up */\n\n/* Entropy options */\n//#define MBEDTLS_ENTROPY_MAX_SOURCES                20 /**< Maximum number of sources supported */\n//#define MBEDTLS_ENTROPY_MAX_GATHER                128 /**< Maximum amount requested from entropy sources */\n//#define MBEDTLS_ENTROPY_MIN_HARDWARE               32 /**< Default minimum number of bytes required for the hardware entropy source mbedtls_hardware_poll() before entropy is released */\n\n/* Memory buffer allocator options */\n//#define MBEDTLS_MEMORY_ALIGN_MULTIPLE      4 /**< Align on multiples of this value */\n\n/* Platform options */\n//#define MBEDTLS_PLATFORM_STD_MEM_HDR   <stdlib.h> /**< Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. */\n//#define MBEDTLS_PLATFORM_STD_CALLOC        calloc /**< Default allocator to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_FREE            free /**< Default free to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT            exit /**< Default exit to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_TIME            time /**< Default time to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_STD_FPRINTF      fprintf /**< Default fprintf to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_PRINTF        printf /**< Default printf to use, can be undefined */\n/* Note: your snprintf must correctly zero-terminate the buffer! */\n//#define MBEDTLS_PLATFORM_STD_SNPRINTF    snprintf /**< Default snprintf to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT_SUCCESS       0 /**< Default exit value to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_EXIT_FAILURE       1 /**< Default exit value to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_READ   mbedtls_platform_std_nv_seed_read /**< Default nv_seed_read function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_WRITE  mbedtls_platform_std_nv_seed_write /**< Default nv_seed_write function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_STD_NV_SEED_FILE  \"seedfile\" /**< Seed file to read/write with default implementation */\n\n/* To Use Function Macros MBEDTLS_PLATFORM_C must be enabled */\n/* MBEDTLS_PLATFORM_XXX_MACRO and MBEDTLS_PLATFORM_XXX_ALT cannot both be defined */\n//#define MBEDTLS_PLATFORM_CALLOC_MACRO        calloc /**< Default allocator macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_FREE_MACRO            free /**< Default free macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_EXIT_MACRO            exit /**< Default exit macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_TIME_MACRO            time /**< Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_TIME_TYPE_MACRO       time_t /**< Default time macro to use, can be undefined. MBEDTLS_HAVE_TIME must be enabled */\n//#define MBEDTLS_PLATFORM_FPRINTF_MACRO      fprintf /**< Default fprintf macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_PRINTF_MACRO        printf /**< Default printf macro to use, can be undefined */\n/* Note: your snprintf must correctly zero-terminate the buffer! */\n//#define MBEDTLS_PLATFORM_SNPRINTF_MACRO    snprintf /**< Default snprintf macro to use, can be undefined */\n//#define MBEDTLS_PLATFORM_NV_SEED_READ_MACRO   mbedtls_platform_std_nv_seed_read /**< Default nv_seed_read function to use, can be undefined */\n//#define MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO  mbedtls_platform_std_nv_seed_write /**< Default nv_seed_write function to use, can be undefined */\n\n/* SSL Cache options */\n//#define MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT       86400 /**< 1 day  */\n//#define MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES      50 /**< Maximum entries in cache */\n\n/* SSL options */\n//#define MBEDTLS_SSL_MAX_CONTENT_LEN             16384 /**< Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers */\n//#define MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME     86400 /**< Lifetime of session tickets (if enabled) */\n//#define MBEDTLS_PSK_MAX_LEN               32 /**< Max size of TLS pre-shared keys, in bytes (default 256 bits) */\n//#define MBEDTLS_SSL_COOKIE_TIMEOUT        60 /**< Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued */\n\n/**\n * Complete list of ciphersuites to use, in order of preference.\n *\n * \\warning No dependency checking is done on that field! This option can only\n * be used to restrict the set of available ciphersuites. It is your\n * responsibility to make sure the needed modules are active.\n *\n * Use this to save a few hundred bytes of ROM (default ordering of all\n * available ciphersuites) and a few to a few hundred bytes of RAM.\n *\n * The value below is only an example, not the default.\n */\n//#define MBEDTLS_SSL_CIPHERSUITES MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n\n/* X509 options */\n//#define MBEDTLS_X509_MAX_INTERMEDIATE_CA   8   /**< Maximum number of intermediate CAs in a verification chain. */\n//#define MBEDTLS_X509_MAX_FILE_PATH_LEN     512 /**< Maximum length of a path/filename string in bytes including the null terminator character ('\\0'). */\n\n/**\n * Allow SHA-1 in the default TLS configuration for certificate signing.\n * Without this build-time option, SHA-1 support must be activated explicitly\n * through mbedtls_ssl_conf_cert_profile. Turning on this option is not\n * recommended because of it is possible to generate SHA-1 collisions, however\n * this may be safe for legacy infrastructure where additional controls apply.\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n// #define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES\n\n/**\n * Allow SHA-1 in the default TLS configuration for TLS 1.2 handshake\n * signature and ciphersuite selection. Without this build-time option, SHA-1\n * support must be activated explicitly through mbedtls_ssl_conf_sig_hashes.\n * The use of SHA-1 in TLS <= 1.1 and in HMAC-SHA-1 is always allowed by\n * default. At the time of writing, there is no practical attack on the use\n * of SHA-1 in handshake signatures, hence this option is turned on by default\n * to preserve compatibility with existing peers, but the general\n * warning applies nonetheless:\n *\n * \\warning   SHA-1 is considered a weak message digest and its use constitutes\n *            a security risk. If possible, we recommend avoiding dependencies\n *            on it, and considering stronger message digests instead.\n *\n */\n#define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE\n\n/* \\} name SECTION: Customisation configuration options */\n\n/* Target and application specific configurations */\n//#define YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE \"target_config.h\"\n\n#if defined(TARGET_LIKE_MBED) && defined(YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE)\n#include YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE\n#endif\n\n/*\n * Allow user to override any previous default.\n *\n * Use two macro names for that, as:\n * - with yotta the prefix YOTTA_CFG_ is forced\n * - without yotta is looks weird to have a YOTTA prefix.\n */\n#if defined(YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE)\n#include YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE\n#elif defined(MBEDTLS_USER_CONFIG_FILE)\n#include MBEDTLS_USER_CONFIG_FILE\n#endif\n\n#include \"check_config.h\"\n\n#endif /* MBEDTLS_CONFIG_H */\n", "/**\n * \\file ecdsa.h\n *\n * \\brief The Elliptic Curve Digital Signature Algorithm (ECDSA).\n *\n * ECDSA is defined in <em>Standards for Efficient Cryptography Group (SECG):\n * SEC1 Elliptic Curve Cryptography</em>.\n * The use of ECDSA for TLS is defined in <em>RFC-4492: Elliptic Curve\n * Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</em>.\n *\n */\n/*\n *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of Mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_ECDSA_H\n#define MBEDTLS_ECDSA_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include \"ecp.h\"\n#include \"md.h\"\n\n/*\n * RFC-4492 page 20:\n *\n *     Ecdsa-Sig-Value ::= SEQUENCE {\n *         r       INTEGER,\n *         s       INTEGER\n *     }\n *\n * Size is at most\n *    1 (tag) + 1 (len) + 1 (initial 0) + ECP_MAX_BYTES for each of r and s,\n *    twice that + 1 (tag) + 2 (len) for the sequence\n * (assuming ECP_MAX_BYTES is less than 126 for r and s,\n * and less than 124 (total len <= 255) for the sequence)\n */\n#if MBEDTLS_ECP_MAX_BYTES > 124\n#error \"MBEDTLS_ECP_MAX_BYTES bigger than expected, please fix MBEDTLS_ECDSA_MAX_LEN\"\n#endif\n/** The maximal size of an ECDSA signature in Bytes. */\n#define MBEDTLS_ECDSA_MAX_LEN  ( 3 + 2 * ( 3 + MBEDTLS_ECP_MAX_BYTES ) )\n\n/**\n * \\brief           The ECDSA context structure.\n */\ntypedef mbedtls_ecp_keypair mbedtls_ecdsa_context;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * \\brief           This function computes the ECDSA signature of a\n *                  previously-hashed message.\n *\n * \\note            The deterministic version is usually preferred.\n *\n * \\param grp       The ECP group.\n * \\param r         The first output integer.\n * \\param s         The second output integer.\n * \\param d         The private signing key.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param f_rng     The RNG function.\n * \\param p_rng     The RNG parameter.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated\n *                  as defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX\n *                  or \\c MBEDTLS_MPI_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n/**\n * \\brief           This function computes the ECDSA signature of a\n *                  previously-hashed message, deterministic version.\n *                  For more information, see <em>RFC-6979: Deterministic\n *                  Usage of the Digital Signature Algorithm (DSA) and Elliptic\n *                  Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n *\n * \\warning         Since the output of the internal RNG is always the same for\n *                  the same key and message, this limits the efficiency of\n *                  blinding and leaks information through side channels. For\n *                  secure behavior use mbedtls_ecdsa_sign_det_ext() instead.\n *\n *                  (Optimally the blinding is a random value that is different\n *                  on every execution. In this case the blinding is still\n *                  random from the attackers perspective, but is the same on\n *                  each execution. This means that this blinding does not\n *                  prevent attackers from recovering secrets by combining\n *                  several measurement traces, but may prevent some attacks\n *                  that exploit relationships between secret data.)\n *\n * \\param grp       The ECP group.\n * \\param r         The first output integer.\n * \\param s         The second output integer.\n * \\param d         The private signing key.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param md_alg    The MD algorithm used to hash the message.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX\n *                  error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                            mbedtls_mpi *s, const mbedtls_mpi *d,\n                            const unsigned char *buf, size_t blen,\n                            mbedtls_md_type_t md_alg );\n/**\n * \\brief           This function computes the ECDSA signature of a\n *                  previously-hashed message, deterministic version.\n *\n *                  For more information, see <em>RFC-6979: Deterministic\n *                  Usage of the Digital Signature Algorithm (DSA) and Elliptic\n *                  Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\see             ecp.h\n *\n * \\param grp           The context for the elliptic curve to use.\n *                      This must be initialized and have group parameters\n *                      set, for example through mbedtls_ecp_group_load().\n * \\param r             The MPI context in which to store the first part\n *                      the signature. This must be initialized.\n * \\param s             The MPI context in which to store the second part\n *                      the signature. This must be initialized.\n * \\param d             The private signing key. This must be initialized\n *                      and setup, for example through mbedtls_ecp_gen_privkey().\n * \\param buf           The hashed content to be signed. This must be a readable\n *                      buffer of length \\p blen Bytes. It may be \\c NULL if\n *                      \\p blen is zero.\n * \\param blen          The length of \\p buf in Bytes.\n * \\param md_alg        The hash algorithm used to hash the original data.\n * \\param f_rng_blind   The RNG function used for blinding. This must not be\n *                      \\c NULL.\n * \\param p_rng_blind   The RNG context to be passed to \\p f_rng. This may be\n *                      \\c NULL if \\p f_rng doesn't need a context parameter.\n *\n * \\return          \\c 0 on success.\n * \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX\n *                  error code on failure.\n */\nint mbedtls_ecdsa_sign_det_ext( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                                mbedtls_mpi *s, const mbedtls_mpi *d,\n                                const unsigned char *buf, size_t blen,\n                                mbedtls_md_type_t md_alg,\n                                int (*f_rng_blind)(void *, unsigned char *,\n                                                   size_t),\n                                void *p_rng_blind );\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n/**\n * \\brief           This function verifies the ECDSA signature of a\n *                  previously-hashed message.\n *\n * \\param grp       The ECP group.\n * \\param buf       The message hash.\n * \\param blen      The length of \\p buf.\n * \\param Q         The public key to use for verification.\n * \\param r         The first integer of the signature.\n * \\param s         The second integer of the signature.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.4, step 3.\n *\n * \\return          \\c 0 on success,\n *                  #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX\n *                  error code on failure for any other reason.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s);\n\n/**\n * \\brief           This function computes the ECDSA signature and writes it\n *                  to a buffer, serialized as defined in <em>RFC-4492:\n *                  Elliptic Curve Cryptography (ECC) Cipher Suites for\n *                  Transport Layer Security (TLS)</em>.\n *\n * \\warning         It is not thread-safe to use the same context in\n *                  multiple threads.\n *\n * \\note            The deterministic version is used if\n *                  #MBEDTLS_ECDSA_DETERMINISTIC is defined. For more\n *                  information, see <em>RFC-6979: Deterministic Usage\n *                  of the Digital Signature Algorithm (DSA) and Elliptic\n *                  Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\param ctx       The ECDSA context.\n * \\param md_alg    The message digest that was used to hash the message.\n * \\param hash      The message hash.\n * \\param hlen      The length of the hash.\n * \\param sig       The buffer that holds the signature.\n * \\param slen      The length of the signature written.\n * \\param f_rng     The RNG function.\n * \\param p_rng     The RNG parameter.\n *\n * \\note            The \\p sig buffer must be at least twice as large as the\n *                  size of the curve used, plus 9. For example, 73 Bytes if\n *                  a 256-bit curve is used. A buffer length of\n *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or\n *                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED)\n#if defined(MBEDTLS_DEPRECATED_WARNING)\n#define MBEDTLS_DEPRECATED    __attribute__((deprecated))\n#else\n#define MBEDTLS_DEPRECATED\n#endif\n/**\n * \\brief   This function computes an ECDSA signature and writes it to a buffer,\n *          serialized as defined in <em>RFC-4492: Elliptic Curve Cryptography\n *          (ECC) Cipher Suites for Transport Layer Security (TLS)</em>.\n *\n *          The deterministic version is defined in <em>RFC-6979:\n *          Deterministic Usage of the Digital Signature Algorithm (DSA) and\n *          Elliptic Curve Digital Signature Algorithm (ECDSA)</em>.\n *\n * \\warning         It is not thread-safe to use the same context in\n *                  multiple threads.\n\n *\n * \\deprecated      Superseded by mbedtls_ecdsa_write_signature() in 2.0.0\n *\n * \\param ctx       The ECDSA context.\n * \\param hash      The Message hash.\n * \\param hlen      The length of the hash.\n * \\param sig       The buffer that holds the signature.\n * \\param slen      The length of the signature written.\n * \\param md_alg    The MD algorithm used to hash the message.\n *\n * \\note            The \\p sig buffer must be at least twice as large as the\n *                  size of the curve used, plus 9. For example, 73 Bytes if a\n *                  256-bit curve is used. A buffer length of\n *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.3, step 5.\n *\n * \\return          \\c 0 on success,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or\n *                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg ) MBEDTLS_DEPRECATED;\n#undef MBEDTLS_DEPRECATED\n#endif /* MBEDTLS_DEPRECATED_REMOVED */\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n/**\n * \\brief           This function reads and verifies an ECDSA signature.\n *\n * \\param ctx       The ECDSA context.\n * \\param hash      The message hash.\n * \\param hlen      The size of the hash.\n * \\param sig       The signature to read and verify.\n * \\param slen      The size of \\p sig.\n *\n * \\note            If the bitlength of the message hash is larger than the\n *                  bitlength of the group order, then the hash is truncated as\n *                  defined in <em>Standards for Efficient Cryptography Group\n *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section\n *                  4.1.4, step 3.\n *\n * \\return          \\c 0 on success,\n *                  #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid,\n *                  #MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH if there is a valid\n *                  signature in sig but its length is less than \\p siglen,\n *                  or an \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_ERR_MPI_XXX\n *                  error code on failure for any other reason.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen );\n\n/**\n * \\brief          This function generates an ECDSA keypair on the given curve.\n *\n * \\param ctx      The ECDSA context to store the keypair in.\n * \\param gid      The elliptic curve to use. One of the various\n *                 \\c MBEDTLS_ECP_DP_XXX macros depending on configuration.\n * \\param f_rng    The RNG function.\n * \\param p_rng    The RNG parameter.\n *\n * \\return         \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX code on\n *                 failure.\n *\n * \\see            ecp.h\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           This function sets an ECDSA context from an EC key pair.\n *\n * \\param ctx       The ECDSA context to set.\n * \\param key       The EC key to use.\n *\n * \\return          \\c 0 on success, or an \\c MBEDTLS_ERR_ECP_XXX code on\n *                  failure.\n *\n * \\see             ecp.h\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           This function initializes an ECDSA context.\n *\n * \\param ctx       The ECDSA context to initialize.\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx );\n\n/**\n * \\brief           This function frees an ECDSA context.\n *\n * \\param ctx       The ECDSA context to free.\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx );\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ecdsa.h */\n", "/**\n * \\file ecp.h\n *\n * \\brief Elliptic curves over GF(p)\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_ECP_H\n#define MBEDTLS_ECP_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include \"bignum.h\"\n\n/*\n * ECP error codes\n */\n#define MBEDTLS_ERR_ECP_BAD_INPUT_DATA                    -0x4F80  /**< Bad input parameters to function. */\n#define MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL                  -0x4F00  /**< The buffer is too small to write to. */\n#define MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE               -0x4E80  /**< Requested curve not available. */\n#define MBEDTLS_ERR_ECP_VERIFY_FAILED                     -0x4E00  /**< The signature is not valid. */\n#define MBEDTLS_ERR_ECP_ALLOC_FAILED                      -0x4D80  /**< Memory allocation failed. */\n#define MBEDTLS_ERR_ECP_RANDOM_FAILED                     -0x4D00  /**< Generation of random value, such as (ephemeral) key, failed. */\n#define MBEDTLS_ERR_ECP_INVALID_KEY                       -0x4C80  /**< Invalid private or public key. */\n#define MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH                  -0x4C00  /**< The buffer contains a valid signature followed by more data. */\n#define MBEDTLS_ERR_ECP_HW_ACCEL_FAILED                   -0x4B80  /**< ECP hardware accelerator failed. */\n\n#if !defined(MBEDTLS_ECP_ALT)\n/*\n * default mbed TLS elliptic curve arithmetic implementation\n *\n * (in case MBEDTLS_ECP_ALT is defined then the developer has to provide an\n * alternative implementation for the whole module and it will replace this\n * one.)\n */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Domain parameters (curve, subgroup and generator) identifiers.\n *\n * Only curves over prime fields are supported.\n *\n * \\warning This library does not support validation of arbitrary domain\n * parameters. Therefore, only well-known domain parameters from trusted\n * sources should be used. See mbedtls_ecp_group_load().\n */\ntypedef enum\n{\n    MBEDTLS_ECP_DP_NONE = 0,\n    MBEDTLS_ECP_DP_SECP192R1,      /*!< 192-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP224R1,      /*!< 224-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP256R1,      /*!< 256-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP384R1,      /*!< 384-bits NIST curve  */\n    MBEDTLS_ECP_DP_SECP521R1,      /*!< 521-bits NIST curve  */\n    MBEDTLS_ECP_DP_BP256R1,        /*!< 256-bits Brainpool curve */\n    MBEDTLS_ECP_DP_BP384R1,        /*!< 384-bits Brainpool curve */\n    MBEDTLS_ECP_DP_BP512R1,        /*!< 512-bits Brainpool curve */\n    MBEDTLS_ECP_DP_CURVE25519,           /*!< Curve25519               */\n    MBEDTLS_ECP_DP_SECP192K1,      /*!< 192-bits \"Koblitz\" curve */\n    MBEDTLS_ECP_DP_SECP224K1,      /*!< 224-bits \"Koblitz\" curve */\n    MBEDTLS_ECP_DP_SECP256K1,      /*!< 256-bits \"Koblitz\" curve */\n} mbedtls_ecp_group_id;\n\n/**\n * Number of supported curves (plus one for NONE).\n *\n * (Montgomery curves excluded for now.)\n */\n#define MBEDTLS_ECP_DP_MAX     12\n\n/**\n * Curve information for use by other modules\n */\ntypedef struct\n{\n    mbedtls_ecp_group_id grp_id;    /*!< Internal identifier        */\n    uint16_t tls_id;                /*!< TLS NamedCurve identifier  */\n    uint16_t bit_size;              /*!< Curve size in bits         */\n    const char *name;               /*!< Human-friendly name        */\n} mbedtls_ecp_curve_info;\n\n/**\n * \\brief           ECP point structure (jacobian coordinates)\n *\n * \\note            All functions expect and return points satisfying\n *                  the following condition: Z == 0 or Z == 1. (Other\n *                  values of Z are used by internal functions only.)\n *                  The point is zero, or \"at infinity\", if Z == 0.\n *                  Otherwise, X and Y are its standard (affine) coordinates.\n */\ntypedef struct\n{\n    mbedtls_mpi X;          /*!<  the point's X coordinate  */\n    mbedtls_mpi Y;          /*!<  the point's Y coordinate  */\n    mbedtls_mpi Z;          /*!<  the point's Z coordinate  */\n}\nmbedtls_ecp_point;\n\n/**\n * \\brief           ECP group structure\n *\n * We consider two types of curves equations:\n * 1. Short Weierstrass y^2 = x^3 + A x + B     mod P   (SEC1 + RFC 4492)\n * 2. Montgomery,       y^2 = x^3 + A x^2 + x   mod P   (Curve25519 + draft)\n * In both cases, a generator G for a prime-order subgroup is fixed. In the\n * short weierstrass, this subgroup is actually the whole curve, and its\n * cardinal is denoted by N.\n *\n * In the case of Short Weierstrass curves, our code requires that N is an odd\n * prime. (Use odd in mbedtls_ecp_mul() and prime in mbedtls_ecdsa_sign() for blinding.)\n *\n * In the case of Montgomery curves, we don't store A but (A + 2) / 4 which is\n * the quantity actually used in the formulas. Also, nbits is not the size of N\n * but the required size for private keys.\n *\n * If modp is NULL, reduction modulo P is done using a generic algorithm.\n * Otherwise, it must point to a function that takes an mbedtls_mpi in the range\n * 0..2^(2*pbits)-1 and transforms it in-place in an integer of little more\n * than pbits, so that the integer may be efficiently brought in the 0..P-1\n * range by a few additions or substractions. It must return 0 on success and\n * non-zero on failure.\n */\ntypedef struct\n{\n    mbedtls_ecp_group_id id;    /*!<  internal group identifier                     */\n    mbedtls_mpi P;              /*!<  prime modulus of the base field               */\n    mbedtls_mpi A;              /*!<  1. A in the equation, or 2. (A + 2) / 4       */\n    mbedtls_mpi B;              /*!<  1. B in the equation, or 2. unused            */\n    mbedtls_ecp_point G;        /*!<  generator of the (sub)group used              */\n    mbedtls_mpi N;              /*!<  1. the order of G, or 2. unused               */\n    size_t pbits;       /*!<  number of bits in P                           */\n    size_t nbits;       /*!<  number of bits in 1. P, or 2. private keys    */\n    unsigned int h;     /*!<  internal: 1 if the constants are static       */\n    int (*modp)(mbedtls_mpi *); /*!<  function for fast reduction mod P             */\n    int (*t_pre)(mbedtls_ecp_point *, void *);  /*!< unused                         */\n    int (*t_post)(mbedtls_ecp_point *, void *); /*!< unused                         */\n    void *t_data;                       /*!< unused                         */\n    mbedtls_ecp_point *T;       /*!<  pre-computed points for ecp_mul_comb()        */\n    size_t T_size;      /*!<  number for pre-computed points                */\n}\nmbedtls_ecp_group;\n\n/**\n * \\brief           ECP key pair structure\n *\n * A generic key pair that could be used for ECDSA, fixed ECDH, etc.\n *\n * \\note Members purposefully in the same order as struc mbedtls_ecdsa_context.\n */\ntypedef struct\n{\n    mbedtls_ecp_group grp;      /*!<  Elliptic curve and base point     */\n    mbedtls_mpi d;              /*!<  our secret value                  */\n    mbedtls_ecp_point Q;        /*!<  our public value                  */\n}\nmbedtls_ecp_keypair;\n\n/**\n * \\name SECTION: Module settings\n *\n * The configuration options you can set for this module are in this section.\n * Either change them in config.h or define them on the compiler command line.\n * \\{\n */\n\n#if !defined(MBEDTLS_ECP_MAX_BITS)\n/**\n * Maximum size of the groups (that is, of N and P)\n */\n#define MBEDTLS_ECP_MAX_BITS     521   /**< Maximum bit size of groups */\n#endif\n\n#define MBEDTLS_ECP_MAX_BYTES    ( ( MBEDTLS_ECP_MAX_BITS + 7 ) / 8 )\n#define MBEDTLS_ECP_MAX_PT_LEN   ( 2 * MBEDTLS_ECP_MAX_BYTES + 1 )\n\n#if !defined(MBEDTLS_ECP_WINDOW_SIZE)\n/*\n * Maximum \"window\" size used for point multiplication.\n * Default: 6.\n * Minimum value: 2. Maximum value: 7.\n *\n * Result is an array of at most ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n * points used for point multiplication. This value is directly tied to EC\n * peak memory usage, so decreasing it by one should roughly cut memory usage\n * by two (if large curves are in use).\n *\n * Reduction in size may reduce speed, but larger curves are impacted first.\n * Sample performances (in ECDHE handshakes/s, with FIXED_POINT_OPTIM = 1):\n *      w-size:     6       5       4       3       2\n *      521       145     141     135     120      97\n *      384       214     209     198     177     146\n *      256       320     320     303     262     226\n\n *      224       475     475     453     398     342\n *      192       640     640     633     587     476\n */\n#define MBEDTLS_ECP_WINDOW_SIZE    6   /**< Maximum window size used */\n#endif /* MBEDTLS_ECP_WINDOW_SIZE */\n\n#if !defined(MBEDTLS_ECP_FIXED_POINT_OPTIM)\n/*\n * Trade memory for speed on fixed-point multiplication.\n *\n * This speeds up repeated multiplication of the generator (that is, the\n * multiplication in ECDSA signatures, and half of the multiplications in\n * ECDSA verification and ECDHE) by a factor roughly 3 to 4.\n *\n * The cost is increasing EC peak memory usage by a factor roughly 2.\n *\n * Change this value to 0 to reduce peak memory usage.\n */\n#define MBEDTLS_ECP_FIXED_POINT_OPTIM  1   /**< Enable fixed-point speed-up */\n#endif /* MBEDTLS_ECP_FIXED_POINT_OPTIM */\n\n/* \\} name SECTION: Module settings */\n\n/*\n * Point formats, from RFC 4492's enum ECPointFormat\n */\n#define MBEDTLS_ECP_PF_UNCOMPRESSED    0   /**< Uncompressed point format */\n#define MBEDTLS_ECP_PF_COMPRESSED      1   /**< Compressed point format */\n\n/*\n * Some other constants from RFC 4492\n */\n#define MBEDTLS_ECP_TLS_NAMED_CURVE    3   /**< ECCurveType's named_curve */\n\n/**\n * \\brief           Get the list of supported curves in order of preferrence\n *                  (full information)\n *\n * \\return          A statically allocated array, the last entry is 0.\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void );\n\n/**\n * \\brief           Get the list of supported curves in order of preferrence\n *                  (grp_id only)\n *\n * \\return          A statically allocated array,\n *                  terminated with MBEDTLS_ECP_DP_NONE.\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void );\n\n/**\n * \\brief           Get curve information from an internal group identifier\n *\n * \\param grp_id    A MBEDTLS_ECP_DP_XXX value\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id );\n\n/**\n * \\brief           Get curve information from a TLS NamedCurve value\n *\n * \\param tls_id    A MBEDTLS_ECP_DP_XXX value\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id );\n\n/**\n * \\brief           Get curve information from a human-readable name\n *\n * \\param name      The name\n *\n * \\return          The associated curve information or NULL\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name );\n\n/**\n * \\brief           Initialize a point (as zero)\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Initialize a group (to something meaningless)\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp );\n\n/**\n * \\brief           Initialize a key pair (as an invalid one)\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           Free the components of a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Free the components of an ECP group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp );\n\n/**\n * \\brief           Free the components of a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key );\n\n/**\n * \\brief           Copy the contents of point Q into P\n *\n * \\param P         Destination point\n * \\param Q         Source point\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Copy the contents of a group object\n *\n * \\param dst       Destination group\n * \\param src       Source group\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src );\n\n/**\n * \\brief           Set a point to zero\n *\n * \\param pt        Destination point\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Tell if a point is zero\n *\n * \\param pt        Point to test\n *\n * \\return          1 if point is zero, 0 otherwise\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Compare two points\n *\n * \\note            This assumes the points are normalized. Otherwise,\n *                  they may compare as \"not equal\" even if they are.\n *\n * \\param P         First point to compare\n * \\param Q         Second point to compare\n *\n * \\return          0 if the points are equal,\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA otherwise\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Import a non-zero point from two ASCII strings\n *\n * \\param P         Destination point\n * \\param radix     Input numeric base\n * \\param x         First affine coordinate as a null-terminated string\n * \\param y         Second affine coordinate as a null-terminated string\n *\n * \\return          0 if successful, or a MBEDTLS_ERR_MPI_XXX error code\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y );\n\n/**\n * \\brief           Export a point into unsigned binary data\n *\n * \\param grp       Group to which the point should belong\n * \\param P         Point to export\n * \\param format    Point format, should be a MBEDTLS_ECP_PF_XXX macro\n * \\param olen      Length of the actual output\n * \\param buf       Output buffer\n * \\param buflen    Length of the output buffer\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BAD_INPUT_DATA\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen );\n\n/**\n * \\brief           Import a point from unsigned binary data\n *\n * \\param grp       Group to which the point should belong\n * \\param P         Point to import\n * \\param buf       Input buffer\n * \\param ilen      Actual length of input\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,\n *                  MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the point format\n *                  is not implemented.\n *\n * \\note            This function does NOT check that the point actually\n *                  belongs to the given group, see mbedtls_ecp_check_pubkey() for\n *                  that.\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                           const unsigned char *buf, size_t ilen );\n\n/**\n * \\brief           Import a point from a TLS ECPoint record\n *\n * \\param grp       ECP group used\n * \\param pt        Destination point\n * \\param buf       $(Start of input buffer)\n * \\param len       Buffer length\n *\n * \\note            buf is updated to point right after the ECPoint on exit\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t len );\n\n/**\n * \\brief           Export a point as a TLS ECPoint record\n *\n * \\param grp       ECP group used\n * \\param pt        Point to export\n * \\param format    Export format\n * \\param olen      length of data written\n * \\param buf       Buffer to write to\n * \\param blen      Buffer length\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BAD_INPUT_DATA\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen );\n\n/**\n * \\brief           Set a group using well-known domain parameters\n *\n * \\param grp       Destination group\n * \\param id        Index in the list of well-known domain parameters\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE for unkownn groups\n *\n * \\note            Index should be a value of RFC 4492's enum NamedCurve,\n *                  usually in the form of a MBEDTLS_ECP_DP_XXX macro.\n */\nint mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id );\n\n/**\n * \\brief           Set a group from a TLS ECParameters record\n *\n * \\param grp       Destination group\n * \\param buf       &(Start of input buffer)\n * \\param len       Buffer length\n *\n * \\note            buf is updated to point right after ECParameters on exit\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_MPI_XXX if initialization failed\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len );\n\n/**\n * \\brief           Write the TLS ECParameters record for a group\n *\n * \\param grp       ECP group used\n * \\param olen      Number of bytes actually written\n * \\param buf       Buffer to write to\n * \\param blen      Buffer length\n *\n * \\return          0 if successful,\n *                  or MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen );\n\n/**\n * \\brief           Multiplication by an integer: R = m * P\n *                  (Not thread-safe to use same group in multiple threads)\n *\n * \\note            In order to prevent timing attacks, this function\n *                  executes the exact same sequence of (base field)\n *                  operations for any valid m. It avoids any if-branch or\n *                  array index depending on the value of m.\n *\n * \\note            If f_rng is not NULL, it is used to randomize intermediate\n *                  results in order to prevent potential timing attacks\n *                  targeting these results. It is recommended to always\n *                  provide a non-NULL f_rng (the overhead is negligible).\n *\n * \\param grp       ECP group\n * \\param R         Destination point\n * \\param m         Integer by which to multiply\n * \\param P         Point to multiply\n * \\param f_rng     RNG function (see notes)\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY if m is not a valid privkey\n *                  or P is not a valid pubkey,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           Multiplication and addition of two points by integers:\n *                  R = m * P + n * Q\n *                  (Not thread-safe to use same group in multiple threads)\n *\n * \\note            In contrast to mbedtls_ecp_mul(), this function does not guarantee\n *                  a constant execution flow and timing.\n *\n * \\param grp       ECP group\n * \\param R         Destination point\n * \\param m         Integer by which to multiply P\n * \\param P         Point to multiply by m\n * \\param n         Integer by which to multiply Q\n * \\param Q         Point to be multiplied by n\n *\n * \\return          0 if successful,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY if m or n is not a valid privkey\n *                  or P or Q is not a valid pubkey,\n *                  MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q );\n\n/**\n * \\brief           Check that a point is a valid public key on this curve\n *\n * \\param grp       Curve/group the point should belong to\n * \\param pt        Point to check\n *\n * \\return          0 if point is a valid public key,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY otherwise.\n *\n * \\note            This function only checks the point is non-zero, has valid\n *                  coordinates and lies on the curve, but not that it is\n *                  indeed a multiple of G. This is additional check is more\n *                  expensive, isn't required by standards, and shouldn't be\n *                  necessary if the group used has a small cofactor. In\n *                  particular, it is useless for the NIST groups which all\n *                  have a cofactor of 1.\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt );\n\n/**\n * \\brief           Check that an mbedtls_mpi is a valid private key for this curve\n *\n * \\param grp       Group used\n * \\param d         Integer to check\n *\n * \\return          0 if point is a valid private key,\n *                  MBEDTLS_ERR_ECP_INVALID_KEY otherwise.\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d );\n\n/**\n * \\brief           Generate a private key\n *\n * \\param grp       ECP group\n * \\param d         Destination MPI (secret part)\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n */\nint mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,\n                     mbedtls_mpi *d,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng );\n\n/**\n * \\brief           Generate a keypair with configurable base point\n *\n * \\param grp       ECP group\n * \\param G         Chosen base point\n * \\param d         Destination MPI (secret part)\n * \\param Q         Destination point (public part)\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng );\n\n/**\n * \\brief           Generate a keypair\n *\n * \\param grp       ECP group\n * \\param d         Destination MPI (secret part)\n * \\param Q         Destination point (public part)\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n *\n * \\note            Uses bare components rather than an mbedtls_ecp_keypair structure\n *                  in order to ease use with other structures such as\n *                  mbedtls_ecdh_context of mbedtls_ecdsa_context.\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng );\n\n/**\n * \\brief           Generate a keypair\n *\n * \\param grp_id    ECP group identifier\n * \\param key       Destination keypair\n * \\param f_rng     RNG function\n * \\param p_rng     RNG parameter\n *\n * \\return          0 if successful,\n *                  or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\n/**\n * \\brief           Check a public-private key pair\n *\n * \\param pub       Keypair structure holding a public key\n * \\param prv       Keypair structure holding a private (plus public) key\n *\n * \\return          0 if successful (keys are valid and match), or\n *                  MBEDTLS_ERR_ECP_BAD_INPUT_DATA, or\n *                  a MBEDTLS_ERR_ECP_XXX or MBEDTLS_ERR_MPI_XXX code.\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv );\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/**\n * \\brief          Checkup routine\n *\n * \\return         0 if successful, or 1 if a test failed\n */\nint mbedtls_ecp_self_test( int verbose );\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#ifdef __cplusplus\n}\n#endif\n\n#else  /* MBEDTLS_ECP_ALT */\n#include \"ecp_alt.h\"\n#endif /* MBEDTLS_ECP_ALT */\n\n#endif /* ecp.h */\n", "/*\n *  Elliptic curve DSA\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n\n#include \"mbedtls/ecdsa.h\"\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n/*\n * Derive a suitable integer for group grp from a buffer of length len\n * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3\n */\nstatic int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,\n                       const unsigned char *buf, size_t blen )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n    size_t use_size = blen > n_size ? n_size : blen;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );\n    if( use_size * 8 > grp->nbits )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );\n\n    /* While at it, reduce modulo N */\n    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );\n\ncleanup:\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_SIGN_ALT)\n/*\n * Compute ECDSA signature of a hashed message (SEC1 4.1.3)\n * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)\n */\nstatic int ecdsa_sign_internal( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                                mbedtls_mpi *s, const mbedtls_mpi *d,\n                                const unsigned char *buf, size_t blen,\n                                int (*f_rng)(void *, unsigned char *, size_t),\n                                void *p_rng,\n                                int (*f_rng_blind)(void *, unsigned char *,\n                                                   size_t),\n                                void *p_rng_blind )\n{\n    int ret, key_tries, sign_tries, blind_tries;\n    mbedtls_ecp_point R;\n    mbedtls_mpi k, e, t;\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /* Make sure d is in range 1..n-1 */\n    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );\n\n    sign_tries = 0;\n    do\n    {\n        /*\n         * Steps 1-3: generate a suitable ephemeral keypair\n         * and set r = xR mod n\n         */\n        key_tries = 0;\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &k, f_rng, p_rng ) );\n\n            MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &R, &k, &grp->G,\n                                              f_rng_blind, p_rng_blind ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );\n\n            if( key_tries++ > 10 )\n            {\n                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n                goto cleanup;\n            }\n        }\n        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );\n\n        /*\n         * Step 5: derive MPI from hashed message\n         */\n        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n        /*\n         * Generate a random value to blind inv_mod in next step,\n         * avoiding a potential timing leak.\n         *\n         * This loop does the same job as mbedtls_ecp_gen_privkey() and it is\n         * replaced by a call to it in the mainline. This change is not\n         * necessary to backport the fix separating the blinding and ephemeral\n         * key generating RNGs, therefore the original code is kept.\n         */\n        blind_tries = 0;\n        do\n        {\n            size_t n_size = ( grp->nbits + 7 ) / 8;\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng_blind,\n                                                      p_rng_blind ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );\n\n            if( ++blind_tries > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );\n\n        /*\n         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );\n\n        if( sign_tries++ > 10 )\n        {\n            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n            goto cleanup;\n        }\n    }\n    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );\n\n    return( ret );\n}\n\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                        const mbedtls_mpi *d, const unsigned char *buf,\n                        size_t blen,\n                        int (*f_rng)(void *, unsigned char *, size_t),\n                        void *p_rng )\n{\n    /* Use the same RNG for both blinding and ephemeral key generation */\n    return( ecdsa_sign_internal( grp, r, s, d, buf, blen, f_rng, p_rng,\n                                 f_rng, p_rng ) );\n}\n#endif /* MBEDTLS_ECDSA_SIGN_ALT */\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\nstatic int ecdsa_sign_det_internal( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                                    mbedtls_mpi *s, const mbedtls_mpi *d,\n                                    const unsigned char *buf, size_t blen,\n                                    mbedtls_md_type_t md_alg,\n                                    int (*f_rng_blind)(void *, unsigned char *,\n                                                       size_t),\n                                    void *p_rng_blind )\n{\n    int ret;\n    mbedtls_hmac_drbg_context rng_ctx;\n    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];\n    size_t grp_len = ( grp->nbits + 7 ) / 8;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_mpi h;\n    /* Variables for deterministic blinding fallback */\n    const char* blind_label = \"BLINDING CONTEXT\";\n    mbedtls_hmac_drbg_context rng_ctx_blind;\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &h );\n    mbedtls_hmac_drbg_init( &rng_ctx );\n    mbedtls_hmac_drbg_init( &rng_ctx_blind );\n\n    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );\n    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );\n\n    if( f_rng_blind != NULL )\n        ret = ecdsa_sign_internal( grp, r, s, d, buf, blen,\n                                   mbedtls_hmac_drbg_random, &rng_ctx,\n                                   f_rng_blind, p_rng_blind );\n    else\n    {\n        /*\n         * To avoid reusing rng_ctx and risking incorrect behavior we seed a\n         * second HMAC-DRBG with the same seed. We also apply a label to avoid\n         * reusing the bits of the ephemeral key for blinding and eliminate the\n         * risk that they leak this way.\n         */\n\n        mbedtls_hmac_drbg_seed_buf( &rng_ctx_blind, md_info,\n                                    data, 2 * grp_len );\n        ret = mbedtls_hmac_drbg_update_ret( &rng_ctx_blind,\n                                            (const unsigned char*) blind_label,\n                                            strlen( blind_label ) );\n        if( ret != 0 )\n            goto cleanup;\n\n        /*\n         * Since the output of the RNGs is always the same for the same key and\n         * message, this limits the efficiency of blinding and leaks information\n         * through side channels. After mbedtls_ecdsa_sign_det() is removed NULL\n         * won't be a valid value for f_rng_blind anymore. Therefore it should\n         * be checked by the caller and this branch and check can be removed.\n         */\n        ret = ecdsa_sign_internal( grp, r, s, d, buf, blen,\n                                   mbedtls_hmac_drbg_random, &rng_ctx,\n                                   mbedtls_hmac_drbg_random, &rng_ctx_blind );\n\n    }\n\ncleanup:\n    mbedtls_hmac_drbg_free( &rng_ctx );\n    mbedtls_hmac_drbg_free( &rng_ctx_blind );\n    mbedtls_mpi_free( &h );\n\n    return( ret );\n}\n\n/*\n * Deterministic signature wrappers\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                            mbedtls_mpi *s, const mbedtls_mpi *d,\n                            const unsigned char *buf, size_t blen,\n                            mbedtls_md_type_t md_alg )\n{\n    return( ecdsa_sign_det_internal( grp, r, s, d, buf, blen, md_alg,\n                                     NULL, NULL ) );\n}\n\nint mbedtls_ecdsa_sign_det_ext( mbedtls_ecp_group *grp, mbedtls_mpi *r,\n                                mbedtls_mpi *s, const mbedtls_mpi *d,\n                                const unsigned char *buf, size_t blen,\n                                mbedtls_md_type_t md_alg,\n                                int (*f_rng_blind)(void *, unsigned char *,\n                                                   size_t),\n                                void *p_rng_blind )\n{\n    return( ecdsa_sign_det_internal( grp, r, s, d, buf, blen, md_alg,\n                                     f_rng_blind, p_rng_blind ) );\n}\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)\n/*\n * Verify ECDSA signature of hashed message (SEC1 4.1.4)\n * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)\n{\n    int ret;\n    mbedtls_mpi e, s_inv, u1, u2;\n    mbedtls_ecp_point R;\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: make sure r and s are in range 1..n-1\n     */\n    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||\n        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Additional precaution: make sure Q is valid\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    /*\n     * Step 3: derive MPI from hashed message\n     */\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n    /*\n     * Step 4: u1 = e / s mod n, u2 = r / s mod n\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );\n\n    /*\n     * Step 5: R = u1 G + u2 Q\n     *\n     * Since we're not using any secret data, no need to pass a RNG to\n     * mbedtls_ecp_mul() for countermesures.\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );\n\n    if( mbedtls_ecp_is_zero( &R ) )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Step 6: convert xR to an integer (no-op)\n     * Step 7: reduce xR mod n (gives v)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );\n\n    /*\n     * Step 8: check if v (that is, R.X) is equal to r\n     */\n    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_VERIFY_ALT */\n\n/*\n * Convert a signature (given by context) to ASN.1\n */\nstatic int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,\n                                    unsigned char *sig, size_t *slen )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];\n    unsigned char *p = buf + sizeof( buf );\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    memcpy( sig, p, len );\n    *slen = len;\n\n    return( 0 );\n}\n\n/*\n * Compute and write signature\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng )\n{\n    int ret;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n    MBEDTLS_MPI_CHK( ecdsa_sign_det_internal( &ctx->grp, &r, &s, &ctx->d,\n                                              hash, hlen, md_alg,\n                                              f_rng, p_rng ) );\n#else\n    (void) md_alg;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,\n                         hash, hlen, f_rng, p_rng ) );\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \\\n    defined(MBEDTLS_ECDSA_DETERMINISTIC)\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg )\n{\n    return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,\n                                   NULL, NULL ) );\n}\n#endif\n\n/*\n * Read and check signature\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen )\n{\n    int ret;\n    unsigned char *p = (unsigned char *) sig;\n    const unsigned char *end = sig + slen;\n    size_t len;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( p + len != end )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,\n                              &ctx->Q, &r, &s ) ) != 0 )\n        goto cleanup;\n\n    /* At this point we know that the buffer starts with a valid signature.\n     * Return 0 if the buffer just contains the signature, and a specific\n     * error code if the valid signature is followed by more data. */\n    if( p != end )\n        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_GENKEY_ALT)\n/*\n * Generate key pair\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = 0;\n    ret = mbedtls_ecp_group_load( &ctx->grp, gid );\n    if( ret != 0 )\n        return( ret );\n\n   return( mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d,\n                                    &ctx->Q, f_rng, p_rng ) );\n}\n#endif /* MBEDTLS_ECDSA_GENKEY_ALT */\n\n/*\n * Set context from an mbedtls_ecp_keypair\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||\n        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )\n    {\n        mbedtls_ecdsa_free( ctx );\n    }\n\n    return( ret );\n}\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_init( ctx );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_free( ctx );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n", "/*\n *  Elliptic curves over GF(p): generic functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone\n * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf\n * RFC 4492 for the related TLS structures and constants\n *\n * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf\n *\n * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis\n *     for elliptic curve cryptosystems. In : Cryptographic Hardware and\n *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.\n *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>\n *\n * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to\n *     render ECC resistant against Side Channel Attacks. IACR Cryptology\n *     ePrint Archive, 2004, vol. 2004, p. 342.\n *     <http://eprint.iacr.org/2004/342.pdf>\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n#include \"mbedtls/threading.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include \"mbedtls/ecp_internal.h\"\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * Counts of point addition and doubling, and field multiplications.\n * Used to test resistance of point multiplication to simple timing attacks.\n */\nstatic unsigned long add_count, dbl_count, mul_count;\n#endif\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n#define ECP_SHORTWEIERSTRASS\n#endif\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n#define ECP_MONTGOMERY\n#endif\n\n/*\n * Curve types: internal for now, might be exposed later\n */\ntypedef enum\n{\n    ECP_TYPE_NONE = 0,\n    ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */\n    ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */\n} ecp_curve_type;\n\n/*\n * List of supported curves:\n *  - internal ID\n *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)\n *  - size in bits\n *  - readable name\n *\n * Curves are listed in order: largest curves first, and for a given size,\n * fastest curves first. This provides the default order for the SSL module.\n *\n * Reminder: update profiles in x509_crt.c when adding a new curves!\n */\nstatic const mbedtls_ecp_curve_info ecp_supported_curves[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    \"secp521r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP512R1,      28,     512,    \"brainpoolP512r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    \"secp384r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP384R1,      27,     384,    \"brainpoolP384r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    \"secp256r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    \"secp256k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP256R1,      26,     256,    \"brainpoolP256r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    \"secp224r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    \"secp224k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    \"secp192r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    \"secp192k1\"         },\n#endif\n    { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },\n};\n\n#define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \\\n                        sizeof( ecp_supported_curves[0] )\n\nstatic mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];\n\n/*\n * List of supported curves and associated info\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )\n{\n    return( ecp_supported_curves );\n}\n\n/*\n * List of supported curves, group ID only\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )\n{\n    static int init_done = 0;\n\n    if( ! init_done )\n    {\n        size_t i = 0;\n        const mbedtls_ecp_curve_info *curve_info;\n\n        for( curve_info = mbedtls_ecp_curve_list();\n             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n             curve_info++ )\n        {\n            ecp_supported_grp_id[i++] = curve_info->grp_id;\n        }\n        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;\n\n        init_done = 1;\n    }\n\n    return( ecp_supported_grp_id );\n}\n\n/*\n * Get the curve info for the internal identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->grp_id == grp_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the TLS identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->tls_id == tls_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the name\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( strcmp( curve_info->name, name ) == 0 )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the type of a curve\n */\nstatic inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )\n{\n    if( grp->G.X.p == NULL )\n        return( ECP_TYPE_NONE );\n\n    if( grp->G.Y.p == NULL )\n        return( ECP_TYPE_MONTGOMERY );\n    else\n        return( ECP_TYPE_SHORT_WEIERSTRASS );\n}\n\n/*\n * Initialize (the components of) a point\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_init( &pt->X );\n    mbedtls_mpi_init( &pt->Y );\n    mbedtls_mpi_init( &pt->Z );\n}\n\n/*\n * Initialize (the components of) a group\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp )\n{\n    if( grp == NULL )\n        return;\n\n    memset( grp, 0, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Initialize (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_init( &key->grp );\n    mbedtls_mpi_init( &key->d );\n    mbedtls_ecp_point_init( &key->Q );\n}\n\n/*\n * Unallocate (the components of) a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_free( &( pt->X ) );\n    mbedtls_mpi_free( &( pt->Y ) );\n    mbedtls_mpi_free( &( pt->Z ) );\n}\n\n/*\n * Unallocate (the components of) a group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp )\n{\n    size_t i;\n\n    if( grp == NULL )\n        return;\n\n    if( grp->h != 1 )\n    {\n        mbedtls_mpi_free( &grp->P );\n        mbedtls_mpi_free( &grp->A );\n        mbedtls_mpi_free( &grp->B );\n        mbedtls_ecp_point_free( &grp->G );\n        mbedtls_mpi_free( &grp->N );\n    }\n\n    if( grp->T != NULL )\n    {\n        for( i = 0; i < grp->T_size; i++ )\n            mbedtls_ecp_point_free( &grp->T[i] );\n        mbedtls_free( grp->T );\n    }\n\n    mbedtls_zeroize( grp, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Unallocate (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &key->grp );\n    mbedtls_mpi_free( &key->d );\n    mbedtls_ecp_point_free( &key->Q );\n}\n\n/*\n * Copy the contents of a point\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Copy the contents of a group object\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )\n{\n    return mbedtls_ecp_group_load( dst, src->id );\n}\n\n/*\n * Set point to zero\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Tell if a point is zero\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )\n{\n    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );\n}\n\n/*\n * Compare two points lazily\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q )\n{\n    if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )\n    {\n        return( 0 );\n    }\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Import a non-zero point from ASCII strings\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Export a point into unsigned binary data (SEC1 2.3.3)\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen )\n{\n    int ret = 0;\n    size_t plen;\n\n    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&\n        format != MBEDTLS_ECP_PF_COMPRESSED )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Common case: P == 0\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n    {\n        if( buflen < 1 )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x00;\n        *olen = 1;\n\n        return( 0 );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )\n    {\n        *olen = 2 * plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x04;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );\n    }\n    else if( format == MBEDTLS_ECP_PF_COMPRESSED )\n    {\n        *olen = plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from unsigned binary data (SEC1 2.3.4)\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                           const unsigned char *buf, size_t ilen )\n{\n    int ret;\n    size_t plen;\n\n    if( ilen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( buf[0] == 0x00 )\n    {\n        if( ilen == 1 )\n            return( mbedtls_ecp_set_zero( pt ) );\n        else\n            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( buf[0] != 0x04 )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    if( ilen != 2 * plen + 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t buf_len )\n{\n    unsigned char data_len;\n    const unsigned char *buf_start;\n\n    /*\n     * We must have at least two bytes (1 for length, at least one for data)\n     */\n    if( buf_len < 2 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    data_len = *(*buf)++;\n    if( data_len < 1 || data_len > buf_len - 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Save buffer start for read_binary and update buf\n     */\n    buf_start = *buf;\n    *buf += data_len;\n\n    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );\n}\n\n/*\n * Export a point as a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    int ret;\n\n    /*\n     * buffer length must be at least one, for our length byte\n     */\n    if( blen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,\n                    olen, buf + 1, blen - 1) ) != 0 )\n        return( ret );\n\n    /*\n     * write length to the first byte and update total length\n     */\n    buf[0] = (unsigned char) *olen;\n    ++*olen;\n\n    return( 0 );\n}\n\n/*\n * Set a group from an ECParameters record (RFC 4492)\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )\n{\n    uint16_t tls_id;\n    const mbedtls_ecp_curve_info *curve_info;\n\n    /*\n     * We expect at least three bytes (see below)\n     */\n    if( len < 3 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * First byte is curve_type; only named_curve is handled\n     */\n    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    tls_id = *(*buf)++;\n    tls_id <<= 8;\n    tls_id |= *(*buf)++;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    return mbedtls_ecp_group_load( grp, curve_info->grp_id );\n}\n\n/*\n * Write the ECParameters record corresponding to a group (RFC 4492)\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * We are going to write 3 bytes (see below)\n     */\n    *olen = 3;\n    if( blen < *olen )\n        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n    /*\n     * First byte is curve_type, always named_curve\n     */\n    *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    buf[0] = curve_info->tls_id >> 8;\n    buf[1] = curve_info->tls_id & 0xFF;\n\n    return( 0 );\n}\n\n/*\n * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.\n * See the documentation of struct mbedtls_ecp_group.\n *\n * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.\n */\nstatic int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    if( grp->modp == NULL )\n        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||\n        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    MBEDTLS_MPI_CHK( grp->modp( N ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );\n\n    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )\n        /* we known P, N and the result are positive */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Fast mod-p functions expect their argument to be in the 0..p^2 range.\n *\n * In order to guarantee that, we need to ensure that operands of\n * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will\n * bring the result back to this range.\n *\n * The following macros are shortcuts for doing that.\n */\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi\n */\n#if defined(MBEDTLS_SELF_TEST)\n#define INC_MUL_COUNT   mul_count++;\n#else\n#define INC_MUL_COUNT\n#endif\n\n#define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \\\n                        while( 0 )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi\n * N->s < 0 is a very fast test, which fails only if N is 0\n */\n#define MOD_SUB( N )                                \\\n    while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.\n * We known P, N and the result are positive, so sub_abs is correct, and\n * a bit faster.\n */\n#define MOD_ADD( N )                                \\\n    while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * For curves in short Weierstrass form, we do all the internal operations in\n * Jacobian coordinates.\n *\n * For multiplication, we'll use a comb method with coutermeasueres against\n * SPA, hence timing attacks.\n */\n\n/*\n * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)\n * Cost: 1N := 1I + 3M + 1S\n */\nstatic int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi Zi, ZZi;\n\n    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac( grp, pt );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */\n    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * X = X / Z^2  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );\n\n    /*\n     * Y = Y / Z^3  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );\n\n    /*\n     * Z = 1\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n\n    return( ret );\n}\n\n/*\n * Normalize jacobian coordinates of an array of (pointers to) points,\n * using Montgomery's trick to perform only one inversion mod P.\n * (See for example Cohen's \"A Course in Computational Algebraic Number\n * Theory\", Algorithm 10.3.4.)\n *\n * Warning: fails (returning an error) if one of the points is zero!\n * This should never happen, see choice of w in ecp_mul_comb().\n *\n * Cost: 1N(t) := 1I + (6t - 3)M + 1S\n */\nstatic int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,\n                                   mbedtls_ecp_point *T[], size_t t_len )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi *c, u, Zi, ZZi;\n\n    if( t_len < 2 )\n        return( ecp_normalize_jac( grp, *T ) );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);\n    }\n#endif\n\n    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );\n\n    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * c[i] = Z_0 * ... * Z_i\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );\n    for( i = 1; i < t_len; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );\n        MOD_MUL( c[i] );\n    }\n\n    /*\n     * u = 1 / (Z_0 * ... * Z_n) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );\n\n    for( i = t_len - 1; ; i-- )\n    {\n        /*\n         * Zi = 1 / Z_i mod p\n         * u = 1 / (Z_0 * ... * Z_i) mod P\n         */\n        if( i == 0 ) {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );\n        }\n\n        /*\n         * proceed as in normalize()\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );\n\n        /*\n         * Post-precessing: reclaim some memory by shrinking coordinates\n         * - not storing Z (always 1)\n         * - shrinking other coordinates, but still keeping the same number of\n         *   limbs as P, as otherwise it will too likely be regrown too fast.\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );\n        mbedtls_mpi_free( &T[i]->Z );\n\n        if( i == 0 )\n            break;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n    for( i = 0; i < t_len; i++ )\n        mbedtls_mpi_free( &c[i] );\n    mbedtls_free( c );\n\n    return( ret );\n}\n\n/*\n * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.\n * \"inv\" must be 0 (don't invert) or 1 (invert) or the result will be invalid\n */\nstatic int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,\n                            mbedtls_ecp_point *Q,\n                            unsigned char inv )\n{\n    int ret;\n    unsigned char nonzero;\n    mbedtls_mpi mQY;\n\n    mbedtls_mpi_init( &mQY );\n\n    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );\n    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );\n\ncleanup:\n    mbedtls_mpi_free( &mQY );\n\n    return( ret );\n}\n\n/*\n * Point doubling R = 2 P, Jacobian coordinates\n *\n * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .\n *\n * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR\n * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.\n *\n * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.\n *\n * Cost: 1D := 3M + 4S          (A ==  0)\n *             4M + 4S          (A == -3)\n *             3M + 6S + 1a     otherwise\n */\nstatic int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                           const mbedtls_ecp_point *P )\n{\n    int ret;\n    mbedtls_mpi M, S, T, U;\n\n#if defined(MBEDTLS_SELF_TEST)\n    dbl_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_jac( grp, R, P );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */\n\n    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        /* M = 3(X + Z^2)(X - Z^2) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n    }\n    else\n    {\n        /* M = 3.X^2 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n\n        /* Optimize away for \"koblitz\" curves with A = 0 */\n        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )\n        {\n            /* M += A.Z^4 */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );\n        }\n    }\n\n    /* S = 4.X.Y^2 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );\n\n    /* U = 8.Y^4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    /* T = M^2 - 2.S */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n\n    /* S = M(S - T) - U */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );\n\n    /* U = 2.Y.Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );\n\ncleanup:\n    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );\n\n    return( ret );\n}\n\n/*\n * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)\n *\n * The coordinates of Q must be normalized (= affine),\n * but those of P don't need to. R is not normalized.\n *\n * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.\n * None of these cases can happen as intermediate step in ecp_mul_comb():\n * - at each step, P, Q and R are multiples of the base point, the factor\n *   being less than its order, so none of them is zero;\n * - Q is an odd multiple of the base point, P an even multiple,\n *   due to the choice of precomputed points in the modified comb method.\n * So branches for these cases do not leak secret information.\n *\n * We accept Q->Z being unset (saving memory in tables) as meaning 1.\n *\n * Cost: 1A := 8M + 3S\n */\nstatic int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;\n\n#if defined(MBEDTLS_SELF_TEST)\n    add_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_ADD_MIXED_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );\n    }\n#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */\n\n    /*\n     * Trivial cases: P == 0 or Q == 0 (case 1)\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, Q ) );\n\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, P ) );\n\n    /*\n     * Make sure Q coordinates are normalized\n     */\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );\n\n    /* Special cases (2) and (3) */\n    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )\n    {\n        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )\n        {\n            ret = ecp_double_jac( grp, R, P );\n            goto cleanup;\n        }\n        else\n        {\n            ret = mbedtls_ecp_set_zero( R );\n            goto cleanup;\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n\n    return( ret );\n}\n\n/*\n * Randomize jacobian coordinates:\n * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_jac().\n *\n * This countermeasure was first suggested in [2].\n */\nstatic int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l, ll;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    /* Z = l * Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );\n\n    /* X = l^2 * X */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );\n\n    /* Y = l^3 * Y */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );\n\ncleanup:\n    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );\n\n    return( ret );\n}\n\n/*\n * Check and define parameters used by the comb method (see below for details)\n */\n#if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7\n#error \"MBEDTLS_ECP_WINDOW_SIZE out of bounds\"\n#endif\n\n/* d = ceil( n / w ) */\n#define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2\n\n/* number of precomputed points */\n#define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n\n/*\n * Compute the representation of m that will be used with our comb method.\n *\n * The basic comb method is described in GECC 3.44 for example. We use a\n * modified version that provides resistance to SPA by avoiding zero\n * digits in the representation as in [3]. We modify the method further by\n * requiring that all K_i be odd, which has the small cost that our\n * representation uses one more K_i, due to carries.\n *\n * Also, for the sake of compactness, only the seven low-order bits of x[i]\n * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in\n * the paper): it is set if and only if if s_i == -1;\n *\n * Calling conventions:\n * - x is an array of size d + 1\n * - w is the size, ie number of teeth, of the comb, and must be between\n *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)\n * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d\n *   (the result will be incorrect if these assumptions are not satisfied)\n */\nstatic void ecp_comb_fixed( unsigned char x[], size_t d,\n                            unsigned char w, const mbedtls_mpi *m )\n{\n    size_t i, j;\n    unsigned char c, cc, adjust;\n\n    memset( x, 0, d+1 );\n\n    /* First get the classical comb values (except for x_d = 0) */\n    for( i = 0; i < d; i++ )\n        for( j = 0; j < w; j++ )\n            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;\n\n    /* Now make sure x_1 .. x_d are odd */\n    c = 0;\n    for( i = 1; i <= d; i++ )\n    {\n        /* Add carry and update it */\n        cc   = x[i] & c;\n        x[i] = x[i] ^ c;\n        c = cc;\n\n        /* Adjust if needed, avoiding branches */\n        adjust = 1 - ( x[i] & 0x01 );\n        c   |= x[i] & ( x[i-1] * adjust );\n        x[i] = x[i] ^ ( x[i-1] * adjust );\n        x[i-1] |= adjust << 7;\n    }\n}\n\n/*\n * Precompute points for the comb method\n *\n * If i = i_{w-1} ... i_1 is the binary representation of i, then\n * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P\n *\n * T must be able to hold 2^{w - 1} elements\n *\n * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)\n */\nstatic int ecp_precompute_comb( const mbedtls_ecp_group *grp,\n                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,\n                                unsigned char w, size_t d )\n{\n    int ret;\n    unsigned char i, k;\n    size_t j;\n    mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];\n\n    /*\n     * Set T[0] = P and\n     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );\n\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        cur = T + i;\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );\n        for( j = 0; j < d; j++ )\n            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );\n\n        TT[k++] = cur;\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\n    /*\n     * Compute the remaining ones using the minimal number of additions\n     * Be careful to update T[2^l] only after using it!\n     */\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        j = i;\n        while( j-- )\n        {\n            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );\n            TT[k++] = &T[i + j];\n        }\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]\n */\nstatic int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                            const mbedtls_ecp_point T[], unsigned char t_len,\n                            unsigned char i )\n{\n    int ret;\n    unsigned char ii, j;\n\n    /* Ignore the \"sign\" bit and scale down */\n    ii =  ( i & 0x7Fu ) >> 1;\n\n    /* Read the whole table to thwart cache-based timing attacks */\n    for( j = 0; j < t_len; j++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );\n    }\n\n    /* Safely invert result if i is \"negative\" */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Core multiplication algorithm for the (modified) comb method.\n * This part is actually common with the basic comb method (GECC 3.44)\n *\n * Cost: d A + d D + 1 R\n */\nstatic int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                              const mbedtls_ecp_point T[], unsigned char t_len,\n                              const unsigned char x[], size_t d,\n                              int (*f_rng)(void *, unsigned char *, size_t),\n                              void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point Txi;\n    size_t i;\n\n    mbedtls_ecp_point_init( &Txi );\n\n    /* Start with a non-zero point and randomize its coordinates */\n    i = d;\n    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );\n    if( f_rng != 0 )\n        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );\n\n    while( i-- != 0 )\n    {\n        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );\n        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );\n        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );\n    }\n\ncleanup:\n\n    mbedtls_ecp_point_free( &Txi );\n\n    return( ret );\n}\n\n/*\n * Multiplication using the comb method,\n * for curves in short Weierstrass form\n */\nstatic int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    unsigned char w, m_is_odd, p_eq_g, pre_len, i;\n    size_t d;\n    unsigned char k[COMB_MAX_D + 1];\n    mbedtls_ecp_point *T;\n    mbedtls_mpi M, mm;\n\n    mbedtls_mpi_init( &M );\n    mbedtls_mpi_init( &mm );\n\n    /* we need N to be odd to trnaform m in an odd number, check now */\n    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Minimize the number of multiplications, that is minimize\n     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )\n     * (see costs of the various parts, with 1S = 1M)\n     */\n    w = grp->nbits >= 384 ? 5 : 4;\n\n    /*\n     * If P == G, pre-compute a bit more, since this may be re-used later.\n     * Just adding one avoids upping the cost of the first mul too much,\n     * and the memory cost too.\n     */\n#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1\n    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&\n               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );\n    if( p_eq_g )\n        w++;\n#else\n    p_eq_g = 0;\n#endif\n\n    /*\n     * Make sure w is within bounds.\n     * (The last test is useful only for very small curves in the test suite.)\n     */\n    if( w > MBEDTLS_ECP_WINDOW_SIZE )\n        w = MBEDTLS_ECP_WINDOW_SIZE;\n    if( w >= grp->nbits )\n        w = 2;\n\n    /* Other sizes that depend on w */\n    pre_len = 1U << ( w - 1 );\n    d = ( grp->nbits + w - 1 ) / w;\n\n    /*\n     * Prepare precomputed points: if P == G we want to\n     * use grp->T if already initialized, or initialize it.\n     */\n    T = p_eq_g ? grp->T : NULL;\n\n    if( T == NULL )\n    {\n        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );\n        if( T == NULL )\n        {\n            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );\n\n        if( p_eq_g )\n        {\n            grp->T = T;\n            grp->T_size = pre_len;\n        }\n    }\n\n    /*\n     * Make sure M is odd (M = m or M = N - m, since N is odd)\n     * using the fact that m * P = - (N - m) * P\n     */\n    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );\n\n    /*\n     * Go for comb multiplication, R = M * P\n     */\n    ecp_comb_fixed( k, d, w, &M );\n    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );\n\n    /*\n     * Now get m * P from M * P and normalize it\n     */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n    /* There are two cases where T is not stored in grp:\n     * - P != G\n     * - An intermediate operation failed before setting grp->T\n     * In either case, T must be freed.\n     */\n    if( T != NULL && T != grp->T )\n    {\n        for( i = 0; i < pre_len; i++ )\n            mbedtls_ecp_point_free( &T[i] );\n        mbedtls_free( T );\n    }\n\n    mbedtls_mpi_free( &M );\n    mbedtls_mpi_free( &mm );\n\n    if( ret != 0 )\n        mbedtls_ecp_point_free( R );\n\n    return( ret );\n}\n\n#endif /* ECP_SHORTWEIERSTRASS */\n\n#if defined(ECP_MONTGOMERY)\n/*\n * For Montgomery curves, we do all the internal arithmetic in projective\n * coordinates. Import/export of points uses only the x coordinates, which is\n * internaly represented as X / Z.\n *\n * For scalar multiplication, we'll use a Montgomery ladder.\n */\n\n/*\n * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1\n * Cost: 1M + 1I\n */\nstatic int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )\n{\n    int ret;\n\n#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_mxz( grp, P );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Randomize projective x/z coordinates:\n * (X, Z) -> (l X, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_mxz().\n *\n * This countermeasure was first suggested in [2].\n * Cost: 2M\n */\nstatic int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );\n\ncleanup:\n    mbedtls_mpi_free( &l );\n\n    return( ret );\n}\n\n/*\n * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),\n * for Montgomery curves in x/z coordinates.\n *\n * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3\n * with\n * d =  X1\n * P = (X2, Z2)\n * Q = (X3, Z3)\n * R = (X4, Z4)\n * S = (X5, Z5)\n * and eliminating temporary variables tO, ..., t4.\n *\n * Cost: 5M + 4S\n */\nstatic int ecp_double_add_mxz( const mbedtls_ecp_group *grp,\n                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,\n                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,\n                               const mbedtls_mpi *d )\n{\n    int ret;\n    mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;\n\n#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );\n    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );\n    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );\n\ncleanup:\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );\n    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );\n    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );\n\n    return( ret );\n}\n\n/*\n * Multiplication with Montgomery ladder in x/z coordinates,\n * for curves in Montgomery form\n */\nstatic int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                        int (*f_rng)(void *, unsigned char *, size_t),\n                        void *p_rng )\n{\n    int ret;\n    size_t i;\n    unsigned char b;\n    mbedtls_ecp_point RP;\n    mbedtls_mpi PX;\n\n    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );\n\n    /* Save PX and read from P before writing to R, in case P == R */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );\n\n    /* Set R to zero in modified x/z coordinates */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );\n    mbedtls_mpi_free( &R->Y );\n\n    /* RP.X might be sligtly larger than P, so reduce it */\n    MOD_ADD( RP.X );\n\n    /* Randomize coordinates of the starting point */\n    if( f_rng != NULL )\n        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );\n\n    /* Loop invariant: R = result so far, RP = R + P */\n    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */\n    while( i-- > 0 )\n    {\n        b = mbedtls_mpi_get_bit( m, i );\n        /*\n         *  if (b) R = 2R + P else R = 2R,\n         * which is:\n         *  if (b) double_add( RP, R, RP, R )\n         *  else   double_add( R, RP, R, RP )\n         * but using safe conditional swaps to avoid leaks\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );\n\n    return( ret );\n}\n\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Multiplication R = m * P\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    /* Common sanity checks */\n    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||\n        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\ncleanup:\n\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    return( ret );\n}\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * Check that an affine point is valid as a public key,\n * short weierstrass curves (SEC1 3.2.3.1)\n */\nstatic int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi YY, RHS;\n\n    /* pt coordinates must be normalized for our checks */\n    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||\n        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );\n\n    /*\n     * YY = Y^2\n     * RHS = X (X^2 + A) + B = X^3 + A X + B\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );\n\n    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )\n        ret = MBEDTLS_ERR_ECP_INVALID_KEY;\n\ncleanup:\n\n    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );\n\n    return( ret );\n}\n#endif /* ECP_SHORTWEIERSTRASS */\n\n/*\n * R = m * P with shortcuts for m == 1 and m == -1\n * NOT constant-time - ONLY for short Weierstrass!\n */\nstatic int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,\n                                      mbedtls_ecp_point *R,\n                                      const mbedtls_mpi *m,\n                                      const mbedtls_ecp_point *P )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n    }\n    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Linear combination\n * NOT constant-time\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_ecp_point mP;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    mbedtls_ecp_point_init( &mP );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    mbedtls_ecp_point_free( &mP );\n\n    return( ret );\n}\n\n\n#if defined(ECP_MONTGOMERY)\n/*\n * Check validity of a public key for Montgomery curves with x-only schemes\n */\nstatic int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* [Curve25519 p. 5] Just check X is the correct number of bytes */\n    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    return( 0 );\n}\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Check that a point is valid as a public key\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* Must use affine coordinates */\n    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        return( ecp_check_pubkey_mx( grp, pt ) );\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        return( ecp_check_pubkey_sw( grp, pt ) );\n#endif\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Check that an mbedtls_mpi is valid as a private key\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )\n{\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* see [Curve25519] page 5 */\n        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 1 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 2 ) != 0 ||\n            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* see SEC1 3.2 */\n        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_SHORTWEIERSTRASS */\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Generate a private key\n */\nint mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,\n                     mbedtls_mpi *d,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* [M225] page 5 */\n        size_t b;\n\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n        } while( mbedtls_mpi_bitlen( d ) == 0);\n\n        /* Make sure the most significant bit is nbits */\n        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */\n        if( b > grp->nbits )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );\n        else\n            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );\n\n        /* Make sure the last three bits are unset */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );\n    }\n#endif /* ECP_MONTGOMERY */\n\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* SEC1 3.2.1: Generate d such that 1 <= n < N */\n        int count = 0;\n\n        /*\n         * Match the procedure given in RFC 6979 (deterministic ECDSA):\n         * - use the same byte ordering;\n         * - keep the leftmost nbits bits of the generated octet string;\n         * - try until result is in the desired range.\n         * This also avoids any biais, which is especially important for ECDSA.\n         */\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );\n\n            /*\n             * Each try has at worst a probability 1/2 of failing (the msb has\n             * a probability 1/2 of being 0, and then the result will be < N),\n             * so after 30 tries failure probability is a most 2**(-30).\n             *\n             * For most curves, 1 try is enough with overwhelming probability,\n             * since N starts with a lot of 1s in binary, but some curves\n             * such as secp224k1 are actually very close to the worst case.\n             */\n            if( ++count > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );\n    }\n#endif /* ECP_SHORTWEIERSTRASS */\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Generate a keypair with configurable base point\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Generate key pair, wrapper for conventional base point\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,\n                             mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );\n}\n\n/*\n * Generate a keypair, prettier wrapper\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );\n}\n\n/*\n * Check a public-private key pair\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )\n{\n    int ret;\n    mbedtls_ecp_point Q;\n    mbedtls_ecp_group grp;\n\n    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||\n        pub->grp.id != prv->grp.id ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_ecp_group_init( &grp );\n\n    /* mbedtls_ecp_mul() needs a non-const group... */\n    mbedtls_ecp_group_copy( &grp, &prv->grp );\n\n    /* Also checks d is valid */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );\n\n    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * Checkup routine\n */\nint mbedtls_ecp_self_test( int verbose )\n{\n    int ret;\n    size_t i;\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point R, P;\n    mbedtls_mpi m;\n    unsigned long add_c_prev, dbl_c_prev, mul_c_prev;\n    /* exponents especially adapted for secp192r1 */\n    const char *exponents[] =\n    {\n        \"000000000000000000000000000000000000000000000001\", /* one */\n        \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830\", /* N - 1 */\n        \"5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25\", /* random */\n        \"400000000000000000000000000000000000000000000000\", /* one and zeros */\n        \"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", /* all ones */\n        \"555555555555555555555555555555555555555555555555\", /* 101010... */\n    };\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &R );\n    mbedtls_ecp_point_init( &P );\n    mbedtls_mpi_init( &m );\n\n    /* Use secp192r1 if available, or any available curve */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );\n#else\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );\n#endif\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #1 (constant op_count, base point G): \" );\n\n    /* Do a dummy multiplication first to trigger precomputation */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #2 (constant op_count, other point): \" );\n    /* We computed P = 2G last time, use it */\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret < 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &R );\n    mbedtls_ecp_point_free( &P );\n    mbedtls_mpi_free( &m );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n", "/* BEGIN_HEADER */\n#include \"mbedtls/ecdsa.h\"\n/* END_HEADER */\n\n/* BEGIN_DEPENDENCIES\n * depends_on:MBEDTLS_ECDSA_C\n * END_DEPENDENCIES\n */\n\n/* BEGIN_CASE */\nvoid ecdsa_prim_random( int id )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point Q;\n    mbedtls_mpi d, r, s;\n    rnd_pseudo_info rnd_info;\n    unsigned char buf[66];\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );\n    memset( buf, 0, sizeof( buf ) );\n\n    /* prepare material for signature */\n    TEST_ASSERT( rnd_pseudo_rand( &rnd_info, buf, sizeof( buf ) ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_gen_keypair( &grp, &d, &Q, &rnd_pseudo_rand, &rnd_info )\n                 == 0 );\n\n    TEST_ASSERT( mbedtls_ecdsa_sign( &grp, &r, &s, &d, buf, sizeof( buf ),\n                             &rnd_pseudo_rand, &rnd_info ) == 0 );\n    TEST_ASSERT( mbedtls_ecdsa_verify( &grp, buf, sizeof( buf ), &Q, &r, &s ) == 0 );\n\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n}\n/* END_CASE */\n\n/* BEGIN_CASE */\nvoid ecdsa_prim_test_vectors( int id, char *d_str, char *xQ_str, char *yQ_str,\n                              char *k_str, char *hash_str, char *r_str,\n                              char *s_str, int result )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point Q;\n    mbedtls_mpi d, r, s, r_check, s_check;\n    unsigned char hash[66], rnd_buf[66];\n    size_t hlen;\n    rnd_buf_info rnd_info;\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    mbedtls_mpi_init( &r_check ); mbedtls_mpi_init( &s_check );\n    memset( hash, 0, sizeof( hash ) );\n    memset( rnd_buf, 0, sizeof( rnd_buf ) );\n\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_ecp_point_read_string( &Q, 16, xQ_str, yQ_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &d, 16, d_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &r_check, 16, r_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &s_check, 16, s_str ) == 0 );\n    hlen = unhexify(hash, hash_str);\n    rnd_info.buf = rnd_buf;\n    rnd_info.length = unhexify( rnd_buf, k_str );\n\n    /* Fix rnd_buf by shifting it left if necessary */\n    if( grp.nbits % 8 != 0 )\n    {\n        unsigned char shift = 8 - ( grp.nbits % 8 );\n        size_t i;\n\n        for( i = 0; i < rnd_info.length - 1; i++ )\n            rnd_buf[i] = rnd_buf[i] << shift | rnd_buf[i+1] >> ( 8 - shift );\n\n        rnd_buf[rnd_info.length-1] <<= shift;\n    }\n\n    TEST_ASSERT( mbedtls_ecdsa_sign( &grp, &r, &s, &d, hash, hlen,\n                 rnd_buffer_rand, &rnd_info ) == result );\n\n    if ( result == 0)\n    {\n        TEST_ASSERT( mbedtls_mpi_cmp_mpi( &r, &r_check ) == 0 );\n        TEST_ASSERT( mbedtls_mpi_cmp_mpi( &s, &s_check ) == 0 );\n\n        TEST_ASSERT( mbedtls_ecdsa_verify( &grp, hash, hlen, &Q, &r_check, &s_check ) == 0 );\n    }\n\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n    mbedtls_mpi_free( &r_check ); mbedtls_mpi_free( &s_check );\n}\n/* END_CASE */\n\n/* BEGIN_CASE depends_on:MBEDTLS_ECDSA_DETERMINISTIC */\nvoid ecdsa_det_test_vectors( int id, char *d_str, int md_alg,\n                             char *msg, char *r_str, char *s_str )\n{\n    mbedtls_ecp_group grp;\n    mbedtls_mpi d, r, s, r_check, s_check;\n    unsigned char hash[MBEDTLS_MD_MAX_SIZE];\n    size_t hlen;\n    const mbedtls_md_info_t *md_info;\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_mpi_init( &d ); mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n    mbedtls_mpi_init( &r_check ); mbedtls_mpi_init( &s_check );\n    memset( hash, 0, sizeof( hash ) );\n\n    TEST_ASSERT( mbedtls_ecp_group_load( &grp, id ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &d, 16, d_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &r_check, 16, r_str ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_read_string( &s_check, 16, s_str ) == 0 );\n\n    md_info = mbedtls_md_info_from_type( md_alg );\n    TEST_ASSERT( md_info != NULL );\n    hlen = mbedtls_md_get_size( md_info );\n    TEST_ASSERT( mbedtls_md( md_info, (const unsigned char *) msg,\n                 strlen( msg ), hash ) == 0 );\n\n    TEST_ASSERT( mbedtls_ecdsa_sign_det( &grp, &r, &s, &d, hash, hlen, md_alg ) == 0 );\n\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &r, &r_check ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &s, &s_check ) == 0 );\n\n    mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n    mbedtls_mpi_init( &r ); mbedtls_mpi_init( &s );\n\n    TEST_ASSERT(\n                mbedtls_ecdsa_sign_det_ext( &grp, &r, &s, &d, hash, hlen,\n                                            md_alg, rnd_std_rand, NULL )\n                == 0 );\n\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &r, &r_check ) == 0 );\n    TEST_ASSERT( mbedtls_mpi_cmp_mpi( &s, &s_check ) == 0 );\nexit:\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_mpi_free( &d ); mbedtls_mpi_free( &r ); mbedtls_mpi_free( &s );\n    mbedtls_mpi_free( &r_check ); mbedtls_mpi_free( &s_check );\n}\n/* END_CASE */\n\n/* BEGIN_CASE depends_on:MBEDTLS_SHA256_C */\nvoid ecdsa_write_read_random( int id )\n{\n    mbedtls_ecdsa_context ctx;\n    rnd_pseudo_info rnd_info;\n    unsigned char hash[32];\n    unsigned char sig[200];\n    size_t sig_len, i;\n\n    mbedtls_ecdsa_init( &ctx );\n    memset( &rnd_info, 0x00, sizeof( rnd_pseudo_info ) );\n    memset( hash, 0, sizeof( hash ) );\n    memset( sig, 0x2a, sizeof( sig ) );\n\n    /* prepare material for signature */\n    TEST_ASSERT( rnd_pseudo_rand( &rnd_info, hash, sizeof( hash ) ) == 0 );\n\n    /* generate signing key */\n    TEST_ASSERT( mbedtls_ecdsa_genkey( &ctx, id, &rnd_pseudo_rand, &rnd_info ) == 0 );\n\n    /* generate and write signature, then read and verify it */\n    TEST_ASSERT( mbedtls_ecdsa_write_signature( &ctx, MBEDTLS_MD_SHA256,\n                 hash, sizeof( hash ),\n                 sig, &sig_len, &rnd_pseudo_rand, &rnd_info ) == 0 );\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) == 0 );\n\n    /* check we didn't write past the announced length */\n    for( i = sig_len; i < sizeof( sig ); i++ )\n        TEST_ASSERT( sig[i] == 0x2a );\n\n    /* try verification with invalid length */\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len - 1 ) != 0 );\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len + 1 ) != 0 );\n\n    /* try invalid sequence tag */\n    sig[0]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[0]--;\n\n    /* try modifying r */\n    sig[10]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[10]--;\n\n    /* try modifying s */\n    sig[sig_len - 1]++;\n    TEST_ASSERT( mbedtls_ecdsa_read_signature( &ctx, hash, sizeof( hash ),\n                 sig, sig_len ) != 0 );\n    sig[sig_len - 1]--;\n\nexit:\n    mbedtls_ecdsa_free( &ctx );\n}\n/* END_CASE */\n\n"], "filenames": ["ChangeLog", "include/mbedtls/config.h", "include/mbedtls/ecdsa.h", "include/mbedtls/ecp.h", "library/ecdsa.c", "library/ecp.c", "tests/suites/test_suite_ecdsa.function"], "buggy_code_start_loc": [8, 334, 109, 604, 73, 1921, 131], "buggy_code_end_loc": [8, 334, 133, 604, 340, 1998, 131], "fixing_code_start_loc": [9, 335, 110, 605, 73, 1921, 132], "fixing_code_end_loc": [21, 345, 194, 621, 423, 2010, 142], "type": "NVD-CWE-noinfo", "message": "Arm Mbed TLS before 2.19.0 and Arm Mbed Crypto before 2.0.0, when deterministic ECDSA is enabled, use an RNG with insufficient entropy for blinding, which might allow an attacker to recover a private key via side-channel attacks if a victim signs the same message many times. (For Mbed TLS, the fix is also available in versions 2.7.12 and 2.16.3.)", "other": {"cve": {"id": "CVE-2019-16910", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-26T13:15:10.790", "lastModified": "2023-03-03T15:24:31.783", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Arm Mbed TLS before 2.19.0 and Arm Mbed Crypto before 2.0.0, when deterministic ECDSA is enabled, use an RNG with insufficient entropy for blinding, which might allow an attacker to recover a private key via side-channel attacks if a victim signs the same message many times. (For Mbed TLS, the fix is also available in versions 2.7.12 and 2.16.3.)"}, {"lang": "es", "value": "Arm Mbed TLS versiones anteriores a 2.19.0 y Arm Mbed Crypto versiones anteriores a 2.0.0, cuando el ECDSA determinista est\u00e1 habilitado, usa un RNG con entrop\u00eda insuficiente para el cegamiento, lo que podr\u00eda permitir a un atacante recuperar una clave privada por medio de ataques de canal lateral si una v\u00edctima firma el mismo mensaje muchas veces. (Para Mbed TLS, la correcci\u00f3n tambi\u00e9n est\u00e1 disponible en las versiones 2.7.12 y 2.16.3.)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6}, "baseSeverity": "LOW", "exploitabilityScore": 4.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:arm:mbed_crypto:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "6AD8A538-60A5-47C4-BB40-0685B4A3DE86"}, {"vulnerable": true, "criteria": "cpe:2.3:a:arm:mbed_tls:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.12", "matchCriteriaId": "053EFB3E-E148-4881-BE30-9895831DDCBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:arm:mbed_tls:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.0", "versionEndExcluding": "2.16.3", "matchCriteriaId": "E618350B-48F3-4061-BE8B-04160F1D6A07"}, {"vulnerable": true, "criteria": "cpe:2.3:a:arm:mbed_tls:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.17.0", "versionEndExcluding": "2.19.0", "matchCriteriaId": "C0548E55-EE05-40A5-9116-F89D9CAFAFCF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:29:*:*:*:*:*:*:*", "matchCriteriaId": "D100F7CE-FC64-4CC6-852A-6136D72DA419"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/ARMmbed/mbedtls/commit/298a43a77ec0ed2c19a8c924ddd8571ef3e65dfd", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/ARMmbed/mbedtls/commit/33f66ba6fd234114aa37f0209dac031bb2870a9b", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/12/msg00036.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/CGSKQSGR5SOBRBXDSSPTCDSBB5K3GMPF/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/CSFFOROD6IVLADZHNJC2LPDV7FQRP7XB/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PEHHH2DOBXB25CAU3Q6E66X723VAYTB5/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://tls.mbed.org/tech-updates/security-advisories/mbedtls-security-advisory-2019-10", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ARMmbed/mbedtls/commit/298a43a77ec0ed2c19a8c924ddd8571ef3e65dfd"}}