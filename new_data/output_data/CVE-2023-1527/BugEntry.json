{"buggy_code": ["<?php\n/*+***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n *************************************************************************************/\n\n/*\n * Check for image existence in themes or use the common one.\n */\n// Let us create cache to improve performance\nif (!isset($__cache_vtiger_imagepath)) {\n\t$__cache_vtiger_imagepath = array();\n}\nfunction vtiger_imageurl($imagename, $themename) {\n\tglobal $__cache_vtiger_imagepath;\n\tif (isset($__cache_vtiger_imagepath[$imagename]) && $__cache_vtiger_imagepath[$imagename]) {\n\t\t$imagepath = $__cache_vtiger_imagepath[$imagename];\n\t} else {\n\t\t$imagepath = false;\n\t\t// Check in theme specific folder\n\t\tif (file_exists(\"themes/$themename/images/$imagename\")) {\n\t\t\t$imagepath = \"themes/$themename/images/$imagename\";\n\t\t} elseif (file_exists(\"themes/images/$imagename\")) {\n\t\t\t// Search in common image folder\n\t\t\t$imagepath = \"themes/images/$imagename\";\n\t\t} else {\n\t\t\t// Not found anywhere? Return whatever is sent\n\t\t\t$imagepath = $imagename;\n\t\t}\n\t\t$__cache_vtiger_imagepath[$imagename] = $imagepath;\n\t}\n\treturn $imagepath;\n}\n\n/**\n * Get module name by id.\n */\nfunction vtlib_getModuleNameById($tabid) {\n\tglobal $adb;\n\t$sqlresult = $adb->pquery('SELECT name FROM vtiger_tab WHERE tabid = ?', array($tabid));\n\tif ($adb->num_rows($sqlresult)) {\n\t\treturn $adb->query_result($sqlresult, 0, 'name');\n\t}\n\treturn null;\n}\n\n/**\n * Get module names for which sharing access can be controlled.\n * NOTE: Ignore the standard modules which is already handled.\n */\nfunction vtlib_getModuleNameForSharing() {\n\treturn getSharingModuleList(array('Leads','Accounts','Contacts','Potentials','HelpDesk','Campaigns','Quotes','PurchaseOrder','SalesOrder','Invoice'));\n}\n\n/**\n * Cache the module active information for performance\n */\n$__cache_module_activeinfo = array();\n\n/**\n * Fetch module active information at one shot, but return all the information fetched.\n */\nfunction vtlib_prefetchModuleActiveInfo($force = true) {\n\tglobal $__cache_module_activeinfo;\n\n\t// Look up if cache has information\n\t$tabrows = VTCacheUtils::lookupAllTabsInfo();\n\n\t// Initialize from DB if cache information is not available or force flag is set\n\tif ($tabrows === false || $force) {\n\t\tglobal $adb;\n\t\t$tabres = $adb->query('SELECT * FROM vtiger_tab');\n\t\t$tabrows = array();\n\t\tif ($tabres) {\n\t\t\twhile ($tabresrow = $adb->fetch_array($tabres)) {\n\t\t\t\t$tabrows[] = $tabresrow;\n\t\t\t\t$__cache_module_activeinfo[$tabresrow['name']] = $tabresrow['presence'];\n\t\t\t}\n\t\t\t// Update cache for further re-use\n\t\t\tVTCacheUtils::updateAllTabsInfo($tabrows);\n\t\t}\n\t}\n\n\treturn $tabrows;\n}\n\n/**\n * Check if module is set active (or enabled)\n */\nfunction vtlib_isModuleActive($module) {\n\tglobal $__cache_module_activeinfo, $adb;\n\tif (is_numeric($module) || empty($module)) {\n\t\treturn false;\n\t}\n\tif (in_array($module, vtlib_moduleAlwaysActive())) {\n\t\treturn true;\n\t}\n\n\tif (!isset($__cache_module_activeinfo[$module])) {\n\t\t$tabid = getTabId($module);\n\t\tif (!is_null($tabid)) {\n\t\t\t$result = $adb->pquery('select presence from vtiger_tab where tabid=?', array($tabid));\n\t\t\t$presence = $adb->query_result($result, 0, 'presence');\n\t\t\t$__cache_module_activeinfo[$module] = $presence;\n\t\t} else {\n\t\t\t$presence = 1;\n\t\t}\n\t} else {\n\t\t$presence = $__cache_module_activeinfo[$module];\n\t}\n\n\t$active = false;\n\tif ($presence != 1) {\n\t\t$active = true;\n\t}\n\n\treturn $active;\n}\n\n/**\n * Recreate user privileges files.\n */\nfunction vtlib_RecreateUserPrivilegeFiles() {\n\trequire_once 'modules/Users/UserPrivilegesWriter.php';\n\tUserPrivilegesWriter::flushAllPrivileges();\n}\n\n/**\n * Get list module names which are always active (cannot be disabled)\n */\nfunction vtlib_moduleAlwaysActive() {\n\treturn array (\n\t\t'CustomView', 'Settings', 'Users', 'Migration', 'Utilities', 'Import', 'com_vtiger_workflow', 'PickList',\n\t);\n}\n\n/**\n * Toggle the module (enable/disable)\n */\nfunction vtlib_toggleModuleAccess($module, $enable_disable, $noevents = false) {\n\tglobal $adb, $__cache_module_activeinfo;\n\n\tinclude_once 'vtlib/Vtiger/Module.php';\n\n\t$event_type = false;\n\n\tif ($enable_disable === true) {\n\t\t$enable_disable = 0;\n\t\t$enable_disable_BA = 1;\n\t\t$event_type = Vtiger_Module::EVENT_MODULE_ENABLED;\n\t} elseif ($enable_disable === false) {\n\t\t$enable_disable = 1;\n\t\t$enable_disable_BA = 0;\n\t\t$event_type = Vtiger_Module::EVENT_MODULE_DISABLED;\n\t}\n\n\t$adb->pquery('UPDATE vtiger_tab set presence=? WHERE name=?', array($enable_disable,$module));\n\t$adb->pquery(\n\t\t'UPDATE vtiger_businessactions set active=? WHERE linkurl RLIKE \"[^a-zA-Z0-9_.]'.$module.'[^a-zA-Z0-9_.]\" OR linkurl RLIKE \"[^a-zA-Z0-9_.]'.$module.'$\" OR linkurl RLIKE \"^'.$module.'[^a-zA-Z0-9_.]\"',\n\t\tarray($enable_disable_BA)\n\t);\n\n\t$__cache_module_activeinfo[$module] = $enable_disable;\n\n\tvtlib_RecreateUserPrivilegeFiles();\n\n\tif (!$noevents) {\n\t\tVtiger_Module::fireEvent($module, $event_type);\n\t}\n}\n\n/**\n * Get list of module with current status which can be controlled.\n */\nfunction vtlib_getToggleModuleInfo() {\n\tglobal $adb;\n\n\t$modinfo = array();\n\t$sqlresult = $adb->query(\n\t\t\"SELECT name, presence, customized, isentitytype\n\t\tFROM vtiger_tab\n\t\tWHERE name NOT IN ('Users') AND presence IN (0,1) ORDER BY name\"\n\t);\n\t$num_rows = $adb->num_rows($sqlresult);\n\tfor ($idx = 0; $idx < $num_rows; ++$idx) {\n\t\t$module = $adb->query_result($sqlresult, $idx, 'name');\n\t\t$presence=$adb->query_result($sqlresult, $idx, 'presence');\n\t\t$customized=$adb->query_result($sqlresult, $idx, 'customized');\n\t\t$isentitytype=$adb->query_result($sqlresult, $idx, 'isentitytype');\n\t\t$hassettings=file_exists(\"modules/$module/Settings.php\");\n\t\t$modinfo[$module] = array('customized'=>$customized, 'presence'=>$presence, 'hassettings'=>$hassettings, 'isentitytype' => $isentitytype );\n\t}\n\tuksort($modinfo, function ($a, $b) {\n\t\treturn (strtolower(getTranslatedString($a, $a)) < strtolower(getTranslatedString($b, $b))) ? -1 : 1;\n\t});\n\treturn $modinfo;\n}\n\n/**\n * Get list of language and its current status.\n */\nfunction vtlib_getToggleLanguageInfo() {\n\tglobal $adb;\n\n\t// The table might not exists!\n\t$old_dieOnError = $adb->dieOnError;\n\t$adb->dieOnError = false;\n\n\t$langinfo = array();\n\t$sqlresult = $adb->query('SELECT * FROM vtiger_language');\n\tif ($sqlresult) {\n\t\tfor ($idx = 0; $idx < $adb->num_rows($sqlresult); ++$idx) {\n\t\t\t$row = $adb->fetch_array($sqlresult);\n\t\t\t$langinfo[$row['prefix']] = array('label'=>$row['label'], 'active'=>$row['active'] ,'id'=>$row['id']);\n\t\t}\n\t}\n\t$adb->dieOnError = $old_dieOnError;\n\treturn $langinfo;\n}\n\n/**\n * Toggle the language (enable/disable)\n */\nfunction vtlib_toggleLanguageAccess($langprefix, $enable_disable) {\n\tglobal $adb;\n\n\t// The table might not exists!\n\t$old_dieOnError = $adb->dieOnError;\n\t$adb->dieOnError = false;\n\n\tif ($enable_disable === true) {\n\t\t$enable_disable = 1;\n\t} elseif ($enable_disable === false) {\n\t\t$enable_disable = 0;\n\t}\n\n\t$adb->pquery('UPDATE vtiger_language set active = ? WHERE prefix = ?', array($enable_disable, $langprefix));\n\n\t$adb->dieOnError = $old_dieOnError;\n}\n\n/**\n * Get help information set for the module fields.\n */\nfunction vtlib_getFieldHelpInfo($module) {\n\tglobal $adb;\n\t$fieldhelpinfo = array();\n\tif (in_array('helpinfo', $adb->getColumnNames('vtiger_field'))) {\n\t\t$result = $adb->pquery('SELECT fieldname,helpinfo FROM vtiger_field WHERE tabid=?', array(getTabid($module)));\n\t\tif ($result && $adb->num_rows($result)) {\n\t\t\twhile ($fieldrow = $adb->fetch_array($result)) {\n\t\t\t\t$helpinfo = trim(decode_html($fieldrow['helpinfo']));\n\t\t\t\tif (!empty($helpinfo)) {\n\t\t\t\t\t$fieldhelpinfo[$fieldrow['fieldname']] = getTranslatedString($helpinfo, $module);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $fieldhelpinfo;\n}\n\n/**\n * @deprecated: the variables have been moved to each module\n */\nfunction vtlib_setup_modulevars($module, $focus) {\n\t// left here for backward compatibility\n}\n/**\n * @deprecated: the variables have been moved to each module\n */\nfunction __vtlib_get_modulevar_value($module, $varname) {\n\t// left here for backward compatibility\n\treturn null;\n}\n\n/**\n * @deprecated: use 'SINGLE_' or cbtranslation\n */\nfunction vtlib_tosingular($text) {\n\t$lastpos = strripos($text, 's');\n\tif ($lastpos == strlen($text)-1) {\n\t\treturn substr($text, 0, -1);\n\t}\n\treturn $text;\n}\n\n/**\n * Get picklist values that is accessible by all roles.\n */\nfunction vtlib_getPicklistValues_AccessibleToAll($field_columnname) {\n\tglobal $adb;\n\n\t$columnname = $adb->sql_escape_string($field_columnname);\n\t$tablename = \"vtiger_$columnname\";\n\n\t// Gather all the roles (except H1 which is organization role)\n\t$roleres = $adb->query(\"SELECT roleid FROM vtiger_role WHERE roleid != 'H1'\");\n\t$roleresCount= $adb->num_rows($roleres);\n\t$allroles = array();\n\tif ($roleresCount) {\n\t\tfor ($index = 0; $index < $roleresCount; ++$index) {\n\t\t\t$allroles[] = $adb->query_result($roleres, $index, 'roleid');\n\t\t}\n\t}\n\tsort($allroles);\n\n\t// Get all the picklist values associated to roles (except H1 - organization role).\n\t$picklistres = $adb->query(\n\t\t\"SELECT $columnname as pickvalue, roleid FROM $tablename\n\t\tINNER JOIN vtiger_role2picklist ON $tablename.picklist_valueid=vtiger_role2picklist.picklistvalueid\n\t\tWHERE roleid != 'H1'\"\n\t);\n\n\t$picklistresCount = $adb->num_rows($picklistres);\n\n\t$picklistval_roles = array();\n\tif ($picklistresCount) {\n\t\tfor ($index = 0; $index < $picklistresCount; ++$index) {\n\t\t\t$picklistval = $adb->query_result($picklistres, $index, 'pickvalue');\n\t\t\t$pickvalroleid=$adb->query_result($picklistres, $index, 'roleid');\n\t\t\t$picklistval_roles[$picklistval][] = $pickvalroleid;\n\t\t}\n\t}\n\t// Collect picklist value which is associated to all the roles.\n\t$allrolevalues = array();\n\tforeach ($picklistval_roles as $picklistval => $pickvalroles) {\n\t\tsort($pickvalroles);\n\t\t$diff = array_diff($pickvalroles, $allroles);\n\t\tif (empty($diff)) {\n\t\t\t$allrolevalues[] = $picklistval;\n\t\t}\n\t}\n\n\treturn $allrolevalues;\n}\n\n/**\n * Get all picklist values for a non-standard picklist type.\n */\nfunction vtlib_getPicklistValues($field_columnname) {\n\tglobal $adb;\n\n\t$columnname = $adb->sql_escape_string($field_columnname);\n\t$tablename = \"vtiger_$columnname\";\n\n\t$picklistres = $adb->query(\"SELECT $columnname as pickvalue FROM $tablename\");\n\n\t$picklistresCount = $adb->num_rows($picklistres);\n\n\t$picklistvalues = array();\n\tif ($picklistresCount) {\n\t\tfor ($index = 0; $index < $picklistresCount; ++$index) {\n\t\t\t$picklistvalues[] = $adb->query_result($picklistres, $index, 'pickvalue');\n\t\t}\n\t}\n\treturn $picklistvalues;\n}\n\n/**\n * Check for custom module by its name.\n */\nfunction vtlib_isCustomModule($moduleName) {\n\t$moduleFile = \"modules/$moduleName/$moduleName.php\";\n\tif (file_exists($moduleFile)) {\n\t\tif (function_exists('checkFileAccessForInclusion')) {\n\t\t\tcheckFileAccessForInclusion($moduleFile);\n\t\t}\n\t\tinclude_once $moduleFile;\n\t\t$focus = new $moduleName();\n\t\treturn (isset($focus->IsCustomModule) && $focus->IsCustomModule);\n\t}\n\treturn false;\n}\n\n/**\n * Check for entity module by its name.\n */\nfunction vtlib_isEntityModule($moduleName) {\n\tglobal $adb;\n\t$rsent = $adb->pquery('select isentitytype from vtiger_tab where name=?', array($moduleName));\n\treturn ($rsent && $adb->num_rows($rsent)>0 && $rsent->fields['isentitytype']=='1');\n}\n\n/**\n * Get module specific smarty template path.\n */\nfunction vtlib_getModuleTemplate($module, $templateName) {\n\treturn (\"modules/$module/$templateName\");\n}\n\n/**\n * Check if give path is writeable.\n */\nfunction vtlib_isWriteable($path) {\n\tif (is_dir($path)) {\n\t\treturn vtlib_isDirWriteable($path);\n\t} else {\n\t\treturn is_writable($path);\n\t}\n}\n\n/**\n * Check if given directory is writeable.\n * NOTE: The check is made by trying to create a random file in the directory.\n */\nfunction vtlib_isDirWriteable($dirpath) {\n\tif (is_dir($dirpath)) {\n\t\tdo {\n\t\t\t$tmpfile = 'vtiger' . time() . '-' . rand(1, 1000) . '.tmp';\n\t\t\t// Continue the loop unless we find a name that does not exists already.\n\t\t\t$usefilename = \"$dirpath/$tmpfile\";\n\t\t\tif (!file_exists($usefilename)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (true);\n\t\t$fh = @fopen($usefilename, 'a');\n\t\tif ($fh) {\n\t\t\tfclose($fh);\n\t\t\tunlink($usefilename);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/** HTML Purifier global instance */\n$__htmlpurifier_instance = false;\n/**\n * Purify (Cleanup) malicious snippets of code from the input\n *\n * @param mixed value(s) to clean\n * @param boolean ignore skip cleaning of the input\n * @return mixed sanitized\n */\nfunction vtlib_purify($input, $ignore = false) {\n\tglobal $__htmlpurifier_instance, $root_directory, $default_charset;\n\n\tstatic $purified_cache = array();\n\n\tif (!is_array($input)) {\n\t\t$md5OfInput = md5($input.($ignore?'T':'F'));\n\t\tif (array_key_exists($md5OfInput, $purified_cache)) {\n\t\t\treturn $purified_cache[$md5OfInput];\n\t\t}\n\t}\n\n\t$use_charset = $default_charset;\n\t$use_root_directory = $root_directory;\n\n\t$value = $input;\n\tif (!$ignore) {\n\t\t// Initialize the instance if it has not yet done\n\t\tif (!$__htmlpurifier_instance) {\n\t\t\tif (empty($use_charset)) {\n\t\t\t\t$use_charset = 'UTF-8';\n\t\t\t}\n\t\t\tif (empty($use_root_directory)) {\n\t\t\t\t$use_root_directory = __DIR__ . '/../..';\n\t\t\t}\n\n\t\t\tinclude_once 'include/htmlpurifier/library/HTMLPurifier.auto.php';\n\n\t\t\t$config = HTMLPurifier_Config::createDefault();\n\t\t\t$config->set('Core.Encoding', $use_charset);\n\t\t\t$config->set('Cache.SerializerPath', \"$use_root_directory/cache\");\n\t\t\t$config->set('Attr.AllowedFrameTargets', array('_blank', '_self', '_parent', '_top','_new','_newtc'));\n\n\t\t\t$__htmlpurifier_instance = new HTMLPurifier($config);\n\t\t}\n\t\tif ($__htmlpurifier_instance) {\n\t\t\t// Composite type\n\t\t\tif (is_array($input)) {\n\t\t\t\t$value = array();\n\t\t\t\tforeach ($input as $k => $v) {\n\t\t\t\t\t$value[$k] = vtlib_purify($v, $ignore);\n\t\t\t\t}\n\t\t\t} else { // Simple type\n\t\t\t\t$value = $__htmlpurifier_instance->purify($input);\n\t\t\t}\n\t\t}\n\t}\n\tif (is_array($value)) {\n\t\t$value = changeHTMLAmpersandsInArray($value);\n\t} elseif (is_string($value)) {\n\t\t$value = str_replace('&amp;', '&', $value);\n\t}\n\tif (!is_array($input)) {\n\t\t$purified_cache[$md5OfInput] = $value;\n\t}\n\treturn $value;\n}\n\nfunction changeHTMLAmpersandsInArray($v) {\n\tif (is_array($v)) {\n\t\treturn array_map('changeHTMLAmpersandsInArray', $v);\n\t}\n\treturn str_replace('&amp;', '&', $v);\n}\n\n/**\n * Process the UI Widget requested\n * @param Vtiger_Link $widgetLinkInfo\n * @param Smarty Context\n * @return\n */\nfunction vtlib_process_widget($widgetLinkInfo, $context = false) {\n\t$linkurl = trim($widgetLinkInfo->linkurl);\n\tif (preg_match(\"/^block:\\/\\/(.*)/\", $linkurl, $matches) || preg_match(\"/^top:\\/\\/(.*)/\", $linkurl, $matches)) {\n\t\t$widgetInfo = explode(':', $matches[1]);\n\t\t$widgetControllerClass = $widgetInfo[0];\n\t\t$widgetControllerClassFile = $widgetInfo[1];\n\t\tif (!class_exists($widgetControllerClass)) {\n\t\t\tcheckFileAccessForInclusion($widgetControllerClassFile);\n\t\t\tinclude_once $widgetControllerClassFile;\n\t\t}\n\t\tif (class_exists($widgetControllerClass)) {\n\t\t\t$widgetControllerInstance = new $widgetControllerClass;\n\t\t\t$widgetInstance = $widgetControllerInstance->getWidget($widgetLinkInfo->linklabel);\n\t\t\tif ($widgetInstance) {\n\t\t\t\tif (isset($widgetInfo[2])) {\n\t\t\t\t\tparse_str($widgetInfo[2], $widgetContext);\n\t\t\t\t\tif (!$context) {\n\t\t\t\t\t\t$context = [];\n\t\t\t\t\t}\n\t\t\t\t\t$context = array_merge($context, $widgetContext);\n\t\t\t\t}\n\t\t\t\t$context['BusinessActionInformation'] = json_encode($widgetLinkInfo);\n\t\t\t\treturn $widgetInstance->process($context);\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n\nfunction vtlib_module_icon($modulename) {\n\tif (file_exists(\"modules/$modulename/$modulename.png\")) {\n\t\treturn \"modules/$modulename/$modulename.png\";\n\t}\n\treturn 'modules/Vtiger/Vtiger.png';\n}\n\n/**\n * Function to return the valid SQL input\n * @param string SQL\n * @param boolean Skip the check if string is empty\n * @return string sanitized SQL or false\n */\nfunction vtlib_purifyForSql($string, $skipEmpty = true) {\n\t$pattern = '/^[_a-zA-Z0-9.]+$/';\n\tif ((empty($string) && $skipEmpty) || preg_match($pattern, $string)) {\n\t\treturn $string;\n\t}\n\treturn false;\n}\n\nfunction getvtlib_open_popup_window_function($popupmodule, $fldname, $basemodule) {\n\tif (file_exists('modules/'.$popupmodule.'/'.$popupmodule.'.php')) {\n\t\tinclude_once 'modules/'.$popupmodule.'/'.$popupmodule.'.php';\n\t\t$mod = new $popupmodule();\n\t\tif (method_exists($mod, 'getvtlib_open_popup_window_function')) {\n\t\t\treturn $mod->getvtlib_open_popup_window_function($fldname, $basemodule);\n\t\t} elseif (file_exists('modules/'.$popupmodule.'/getvtlib_open_popup_window_function.php')) {\n\t\t\t@include_once 'modules/'.$popupmodule.'/getvtlib_open_popup_window_function.php';\n\t\t\tif (function_exists('__hook_getvtlib_open_popup_window_function')) {\n\t\t\t\t$mod->registerMethod('__hook_getvtlib_open_popup_window_function');\n\t\t\t\treturn $mod->__hook_getvtlib_open_popup_window_function($fldname, $basemodule);\n\t\t\t}\n\t\t}\n\t}\n\treturn 'vtlib_open_popup_window';\n}\n?>\n"], "fixing_code": ["<?php\n/*+***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n *************************************************************************************/\n\n/*\n * Check for image existence in themes or use the common one.\n */\n// Let us create cache to improve performance\nif (!isset($__cache_vtiger_imagepath)) {\n\t$__cache_vtiger_imagepath = array();\n}\nfunction vtiger_imageurl($imagename, $themename) {\n\tglobal $__cache_vtiger_imagepath;\n\tif (isset($__cache_vtiger_imagepath[$imagename]) && $__cache_vtiger_imagepath[$imagename]) {\n\t\t$imagepath = $__cache_vtiger_imagepath[$imagename];\n\t} else {\n\t\t$imagepath = false;\n\t\t// Check in theme specific folder\n\t\tif (file_exists(\"themes/$themename/images/$imagename\")) {\n\t\t\t$imagepath = \"themes/$themename/images/$imagename\";\n\t\t} elseif (file_exists(\"themes/images/$imagename\")) {\n\t\t\t// Search in common image folder\n\t\t\t$imagepath = \"themes/images/$imagename\";\n\t\t} else {\n\t\t\t// Not found anywhere? Return whatever is sent\n\t\t\t$imagepath = $imagename;\n\t\t}\n\t\t$__cache_vtiger_imagepath[$imagename] = $imagepath;\n\t}\n\treturn $imagepath;\n}\n\n/**\n * Get module name by id.\n */\nfunction vtlib_getModuleNameById($tabid) {\n\tglobal $adb;\n\t$sqlresult = $adb->pquery('SELECT name FROM vtiger_tab WHERE tabid = ?', array($tabid));\n\tif ($adb->num_rows($sqlresult)) {\n\t\treturn $adb->query_result($sqlresult, 0, 'name');\n\t}\n\treturn null;\n}\n\n/**\n * Get module names for which sharing access can be controlled.\n * NOTE: Ignore the standard modules which is already handled.\n */\nfunction vtlib_getModuleNameForSharing() {\n\treturn getSharingModuleList(array('Leads','Accounts','Contacts','Potentials','HelpDesk','Campaigns','Quotes','PurchaseOrder','SalesOrder','Invoice'));\n}\n\n/**\n * Cache the module active information for performance\n */\n$__cache_module_activeinfo = array();\n\n/**\n * Fetch module active information at one shot, but return all the information fetched.\n */\nfunction vtlib_prefetchModuleActiveInfo($force = true) {\n\tglobal $__cache_module_activeinfo;\n\n\t// Look up if cache has information\n\t$tabrows = VTCacheUtils::lookupAllTabsInfo();\n\n\t// Initialize from DB if cache information is not available or force flag is set\n\tif ($tabrows === false || $force) {\n\t\tglobal $adb;\n\t\t$tabres = $adb->query('SELECT * FROM vtiger_tab');\n\t\t$tabrows = array();\n\t\tif ($tabres) {\n\t\t\twhile ($tabresrow = $adb->fetch_array($tabres)) {\n\t\t\t\t$tabrows[] = $tabresrow;\n\t\t\t\t$__cache_module_activeinfo[$tabresrow['name']] = $tabresrow['presence'];\n\t\t\t}\n\t\t\t// Update cache for further re-use\n\t\t\tVTCacheUtils::updateAllTabsInfo($tabrows);\n\t\t}\n\t}\n\n\treturn $tabrows;\n}\n\n/**\n * Check if module is set active (or enabled)\n */\nfunction vtlib_isModuleActive($module) {\n\tglobal $__cache_module_activeinfo, $adb;\n\tif (is_numeric($module) || empty($module)) {\n\t\treturn false;\n\t}\n\tif (in_array($module, vtlib_moduleAlwaysActive())) {\n\t\treturn true;\n\t}\n\n\tif (!isset($__cache_module_activeinfo[$module])) {\n\t\t$tabid = getTabId($module);\n\t\tif (!is_null($tabid)) {\n\t\t\t$result = $adb->pquery('select presence from vtiger_tab where tabid=?', array($tabid));\n\t\t\t$presence = $adb->query_result($result, 0, 'presence');\n\t\t\t$__cache_module_activeinfo[$module] = $presence;\n\t\t} else {\n\t\t\t$presence = 1;\n\t\t}\n\t} else {\n\t\t$presence = $__cache_module_activeinfo[$module];\n\t}\n\n\t$active = false;\n\tif ($presence != 1) {\n\t\t$active = true;\n\t}\n\n\treturn $active;\n}\n\n/**\n * Recreate user privileges files.\n */\nfunction vtlib_RecreateUserPrivilegeFiles() {\n\trequire_once 'modules/Users/UserPrivilegesWriter.php';\n\tUserPrivilegesWriter::flushAllPrivileges();\n}\n\n/**\n * Get list module names which are always active (cannot be disabled)\n */\nfunction vtlib_moduleAlwaysActive() {\n\treturn array (\n\t\t'CustomView', 'Settings', 'Users', 'Migration', 'Utilities', 'Import', 'com_vtiger_workflow', 'PickList',\n\t);\n}\n\n/**\n * Toggle the module (enable/disable)\n */\nfunction vtlib_toggleModuleAccess($module, $enable_disable, $noevents = false) {\n\tglobal $adb, $__cache_module_activeinfo;\n\n\tinclude_once 'vtlib/Vtiger/Module.php';\n\n\t$event_type = false;\n\n\tif ($enable_disable === true) {\n\t\t$enable_disable = 0;\n\t\t$enable_disable_BA = 1;\n\t\t$event_type = Vtiger_Module::EVENT_MODULE_ENABLED;\n\t} elseif ($enable_disable === false) {\n\t\t$enable_disable = 1;\n\t\t$enable_disable_BA = 0;\n\t\t$event_type = Vtiger_Module::EVENT_MODULE_DISABLED;\n\t}\n\n\t$adb->pquery('UPDATE vtiger_tab set presence=? WHERE name=?', array($enable_disable,$module));\n\t$adb->pquery(\n\t\t'UPDATE vtiger_businessactions set active=? WHERE linkurl RLIKE \"[^a-zA-Z0-9_.]'.$module.'[^a-zA-Z0-9_.]\" OR linkurl RLIKE \"[^a-zA-Z0-9_.]'.$module.'$\" OR linkurl RLIKE \"^'.$module.'[^a-zA-Z0-9_.]\"',\n\t\tarray($enable_disable_BA)\n\t);\n\n\t$__cache_module_activeinfo[$module] = $enable_disable;\n\n\tvtlib_RecreateUserPrivilegeFiles();\n\n\tif (!$noevents) {\n\t\tVtiger_Module::fireEvent($module, $event_type);\n\t}\n}\n\n/**\n * Get list of module with current status which can be controlled.\n */\nfunction vtlib_getToggleModuleInfo() {\n\tglobal $adb;\n\n\t$modinfo = array();\n\t$sqlresult = $adb->query(\n\t\t\"SELECT name, presence, customized, isentitytype\n\t\tFROM vtiger_tab\n\t\tWHERE name NOT IN ('Users') AND presence IN (0,1) ORDER BY name\"\n\t);\n\t$num_rows = $adb->num_rows($sqlresult);\n\tfor ($idx = 0; $idx < $num_rows; ++$idx) {\n\t\t$module = $adb->query_result($sqlresult, $idx, 'name');\n\t\t$presence=$adb->query_result($sqlresult, $idx, 'presence');\n\t\t$customized=$adb->query_result($sqlresult, $idx, 'customized');\n\t\t$isentitytype=$adb->query_result($sqlresult, $idx, 'isentitytype');\n\t\t$hassettings=file_exists(\"modules/$module/Settings.php\");\n\t\t$modinfo[$module] = array('customized'=>$customized, 'presence'=>$presence, 'hassettings'=>$hassettings, 'isentitytype' => $isentitytype );\n\t}\n\tuksort($modinfo, function ($a, $b) {\n\t\treturn (strtolower(getTranslatedString($a, $a)) < strtolower(getTranslatedString($b, $b))) ? -1 : 1;\n\t});\n\treturn $modinfo;\n}\n\n/**\n * Get list of language and its current status.\n */\nfunction vtlib_getToggleLanguageInfo() {\n\tglobal $adb;\n\n\t// The table might not exists!\n\t$old_dieOnError = $adb->dieOnError;\n\t$adb->dieOnError = false;\n\n\t$langinfo = array();\n\t$sqlresult = $adb->query('SELECT * FROM vtiger_language');\n\tif ($sqlresult) {\n\t\tfor ($idx = 0; $idx < $adb->num_rows($sqlresult); ++$idx) {\n\t\t\t$row = $adb->fetch_array($sqlresult);\n\t\t\t$langinfo[$row['prefix']] = array('label'=>$row['label'], 'active'=>$row['active'] ,'id'=>$row['id']);\n\t\t}\n\t}\n\t$adb->dieOnError = $old_dieOnError;\n\treturn $langinfo;\n}\n\n/**\n * Toggle the language (enable/disable)\n */\nfunction vtlib_toggleLanguageAccess($langprefix, $enable_disable) {\n\tglobal $adb;\n\n\t// The table might not exists!\n\t$old_dieOnError = $adb->dieOnError;\n\t$adb->dieOnError = false;\n\n\tif ($enable_disable === true) {\n\t\t$enable_disable = 1;\n\t} elseif ($enable_disable === false) {\n\t\t$enable_disable = 0;\n\t}\n\n\t$adb->pquery('UPDATE vtiger_language set active = ? WHERE prefix = ?', array($enable_disable, $langprefix));\n\n\t$adb->dieOnError = $old_dieOnError;\n}\n\n/**\n * Get help information set for the module fields.\n */\nfunction vtlib_getFieldHelpInfo($module) {\n\tglobal $adb;\n\t$fieldhelpinfo = array();\n\tif (in_array('helpinfo', $adb->getColumnNames('vtiger_field'))) {\n\t\t$result = $adb->pquery('SELECT fieldname,helpinfo FROM vtiger_field WHERE tabid=?', array(getTabid($module)));\n\t\tif ($result && $adb->num_rows($result)) {\n\t\t\twhile ($fieldrow = $adb->fetch_array($result)) {\n\t\t\t\t$helpinfo = trim(decode_html($fieldrow['helpinfo']));\n\t\t\t\tif (!empty($helpinfo)) {\n\t\t\t\t\t$fieldhelpinfo[$fieldrow['fieldname']] = getTranslatedString($helpinfo, $module);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $fieldhelpinfo;\n}\n\n/**\n * @deprecated: the variables have been moved to each module\n */\nfunction vtlib_setup_modulevars($module, $focus) {\n\t// left here for backward compatibility\n}\n/**\n * @deprecated: the variables have been moved to each module\n */\nfunction __vtlib_get_modulevar_value($module, $varname) {\n\t// left here for backward compatibility\n\treturn null;\n}\n\n/**\n * @deprecated: use 'SINGLE_' or cbtranslation\n */\nfunction vtlib_tosingular($text) {\n\t$lastpos = strripos($text, 's');\n\tif ($lastpos == strlen($text)-1) {\n\t\treturn substr($text, 0, -1);\n\t}\n\treturn $text;\n}\n\n/**\n * Get picklist values that is accessible by all roles.\n */\nfunction vtlib_getPicklistValues_AccessibleToAll($field_columnname) {\n\tglobal $adb;\n\n\t$columnname = $adb->sql_escape_string($field_columnname);\n\t$tablename = \"vtiger_$columnname\";\n\n\t// Gather all the roles (except H1 which is organization role)\n\t$roleres = $adb->query(\"SELECT roleid FROM vtiger_role WHERE roleid != 'H1'\");\n\t$roleresCount= $adb->num_rows($roleres);\n\t$allroles = array();\n\tif ($roleresCount) {\n\t\tfor ($index = 0; $index < $roleresCount; ++$index) {\n\t\t\t$allroles[] = $adb->query_result($roleres, $index, 'roleid');\n\t\t}\n\t}\n\tsort($allroles);\n\n\t// Get all the picklist values associated to roles (except H1 - organization role).\n\t$picklistres = $adb->query(\n\t\t\"SELECT $columnname as pickvalue, roleid FROM $tablename\n\t\tINNER JOIN vtiger_role2picklist ON $tablename.picklist_valueid=vtiger_role2picklist.picklistvalueid\n\t\tWHERE roleid != 'H1'\"\n\t);\n\n\t$picklistresCount = $adb->num_rows($picklistres);\n\n\t$picklistval_roles = array();\n\tif ($picklistresCount) {\n\t\tfor ($index = 0; $index < $picklistresCount; ++$index) {\n\t\t\t$picklistval = $adb->query_result($picklistres, $index, 'pickvalue');\n\t\t\t$pickvalroleid=$adb->query_result($picklistres, $index, 'roleid');\n\t\t\t$picklistval_roles[$picklistval][] = $pickvalroleid;\n\t\t}\n\t}\n\t// Collect picklist value which is associated to all the roles.\n\t$allrolevalues = array();\n\tforeach ($picklistval_roles as $picklistval => $pickvalroles) {\n\t\tsort($pickvalroles);\n\t\t$diff = array_diff($pickvalroles, $allroles);\n\t\tif (empty($diff)) {\n\t\t\t$allrolevalues[] = $picklistval;\n\t\t}\n\t}\n\n\treturn $allrolevalues;\n}\n\n/**\n * Get all picklist values for a non-standard picklist type.\n */\nfunction vtlib_getPicklistValues($field_columnname) {\n\tglobal $adb;\n\n\t$columnname = $adb->sql_escape_string($field_columnname);\n\t$tablename = \"vtiger_$columnname\";\n\n\t$picklistres = $adb->query(\"SELECT $columnname as pickvalue FROM $tablename\");\n\n\t$picklistresCount = $adb->num_rows($picklistres);\n\n\t$picklistvalues = array();\n\tif ($picklistresCount) {\n\t\tfor ($index = 0; $index < $picklistresCount; ++$index) {\n\t\t\t$picklistvalues[] = $adb->query_result($picklistres, $index, 'pickvalue');\n\t\t}\n\t}\n\treturn $picklistvalues;\n}\n\n/**\n * Check for custom module by its name.\n */\nfunction vtlib_isCustomModule($moduleName) {\n\t$moduleFile = \"modules/$moduleName/$moduleName.php\";\n\tif (file_exists($moduleFile)) {\n\t\tif (function_exists('checkFileAccessForInclusion')) {\n\t\t\tcheckFileAccessForInclusion($moduleFile);\n\t\t}\n\t\tinclude_once $moduleFile;\n\t\t$focus = new $moduleName();\n\t\treturn (isset($focus->IsCustomModule) && $focus->IsCustomModule);\n\t}\n\treturn false;\n}\n\n/**\n * Check for entity module by its name.\n */\nfunction vtlib_isEntityModule($moduleName) {\n\tglobal $adb;\n\t$rsent = $adb->pquery('select isentitytype from vtiger_tab where name=?', array($moduleName));\n\treturn ($rsent && $adb->num_rows($rsent)>0 && $rsent->fields['isentitytype']=='1');\n}\n\n/**\n * Get module specific smarty template path.\n */\nfunction vtlib_getModuleTemplate($module, $templateName) {\n\treturn (\"modules/$module/$templateName\");\n}\n\n/**\n * Check if give path is writeable.\n */\nfunction vtlib_isWriteable($path) {\n\tif (is_dir($path)) {\n\t\treturn vtlib_isDirWriteable($path);\n\t} else {\n\t\treturn is_writable($path);\n\t}\n}\n\n/**\n * Check if given directory is writeable.\n * NOTE: The check is made by trying to create a random file in the directory.\n */\nfunction vtlib_isDirWriteable($dirpath) {\n\tif (is_dir($dirpath)) {\n\t\tdo {\n\t\t\t$tmpfile = 'vtiger' . time() . '-' . rand(1, 1000) . '.tmp';\n\t\t\t// Continue the loop unless we find a name that does not exists already.\n\t\t\t$usefilename = \"$dirpath/$tmpfile\";\n\t\t\tif (!file_exists($usefilename)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (true);\n\t\t$fh = @fopen($usefilename, 'a');\n\t\tif ($fh) {\n\t\t\tfclose($fh);\n\t\t\tunlink($usefilename);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/** HTML Purifier global instance */\n$__htmlpurifier_instance = false;\n/**\n * Purify (Cleanup) malicious snippets of code from the input\n *\n * @param mixed value(s) to clean\n * @param boolean ignore skip cleaning of the input\n * @return mixed sanitized\n */\nfunction vtlib_purify($input, $ignore = false) {\n\tglobal $__htmlpurifier_instance, $root_directory, $default_charset;\n\n\tstatic $purified_cache = array();\n\n\tif (!is_array($input)) {\n\t\t$md5OfInput = md5($input.($ignore?'T':'F'));\n\t\tif (array_key_exists($md5OfInput, $purified_cache)) {\n\t\t\treturn $purified_cache[$md5OfInput];\n\t\t}\n\t}\n\n\t$use_charset = $default_charset;\n\t$use_root_directory = $root_directory;\n\n\t$value = $input;\n\tif (!$ignore) {\n\t\t// Initialize the instance if it has not yet done\n\t\tif (!$__htmlpurifier_instance) {\n\t\t\tif (empty($use_charset)) {\n\t\t\t\t$use_charset = 'UTF-8';\n\t\t\t}\n\t\t\tif (empty($use_root_directory)) {\n\t\t\t\t$use_root_directory = __DIR__ . '/../..';\n\t\t\t}\n\n\t\t\tinclude_once 'include/htmlpurifier/library/HTMLPurifier.auto.php';\n\n\t\t\t$config = HTMLPurifier_Config::createDefault();\n\t\t\t$config->set('Core.Encoding', $use_charset);\n\t\t\t$config->set('Cache.SerializerPath', \"$use_root_directory/cache\");\n\t\t\t$config->set('Attr.AllowedFrameTargets', array('_blank', '_self', '_parent', '_top','_new','_newtc'));\n\n\t\t\t$__htmlpurifier_instance = new HTMLPurifier($config);\n\t\t}\n\t\tif ($__htmlpurifier_instance) {\n\t\t\t// Composite type\n\t\t\tif (is_array($input)) {\n\t\t\t\t$value = array();\n\t\t\t\tforeach ($input as $k => $v) {\n\t\t\t\t\t$value[$k] = vtlib_purify($v, $ignore);\n\t\t\t\t}\n\t\t\t} else { // Simple type\n\t\t\t\t$value = $__htmlpurifier_instance->purify($input);\n\t\t\t\tif (strpos($value, '<a') !== false && strpos($value, 'javascript') !== false) {\n\t\t\t\t\t$dom = new DOMDocument;\n\t\t\t\t\t$dom->loadHTML($value, LIBXML_HTML_NODEFDTD | LIBXML_HTML_NOIMPLIED);\n\t\t\t\t\tforeach ($dom->getElementsByTagName('a') as $node) {\n\t\t\t\t\t\tif ($node->hasAttribute('href') && !filter_var($node->getAttribute('href'), FILTER_VALIDATE_URL) !== false) {\n\t\t\t\t\t\t\t$node->removeAttribute('href');\n\t\t\t\t\t\t\t$value = trim($dom->saveHTML(), \"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (is_array($value)) {\n\t\t$value = changeHTMLAmpersandsInArray($value);\n\t} elseif (is_string($value)) {\n\t\t$value = str_replace('&amp;', '&', $value);\n\t}\n\tif (!is_array($input)) {\n\t\t$purified_cache[$md5OfInput] = $value;\n\t}\n\treturn $value;\n}\n\nfunction changeHTMLAmpersandsInArray($v) {\n\tif (is_array($v)) {\n\t\treturn array_map('changeHTMLAmpersandsInArray', $v);\n\t}\n\treturn str_replace('&amp;', '&', $v);\n}\n\n/**\n * Process the UI Widget requested\n * @param Vtiger_Link $widgetLinkInfo\n * @param Smarty Context\n * @return\n */\nfunction vtlib_process_widget($widgetLinkInfo, $context = false) {\n\t$linkurl = trim($widgetLinkInfo->linkurl);\n\tif (preg_match(\"/^block:\\/\\/(.*)/\", $linkurl, $matches) || preg_match(\"/^top:\\/\\/(.*)/\", $linkurl, $matches)) {\n\t\t$widgetInfo = explode(':', $matches[1]);\n\t\t$widgetControllerClass = $widgetInfo[0];\n\t\t$widgetControllerClassFile = $widgetInfo[1];\n\t\tif (!class_exists($widgetControllerClass)) {\n\t\t\tcheckFileAccessForInclusion($widgetControllerClassFile);\n\t\t\tinclude_once $widgetControllerClassFile;\n\t\t}\n\t\tif (class_exists($widgetControllerClass)) {\n\t\t\t$widgetControllerInstance = new $widgetControllerClass;\n\t\t\t$widgetInstance = $widgetControllerInstance->getWidget($widgetLinkInfo->linklabel);\n\t\t\tif ($widgetInstance) {\n\t\t\t\tif (isset($widgetInfo[2])) {\n\t\t\t\t\tparse_str($widgetInfo[2], $widgetContext);\n\t\t\t\t\tif (!$context) {\n\t\t\t\t\t\t$context = [];\n\t\t\t\t\t}\n\t\t\t\t\t$context = array_merge($context, $widgetContext);\n\t\t\t\t}\n\t\t\t\t$context['BusinessActionInformation'] = json_encode($widgetLinkInfo);\n\t\t\t\treturn $widgetInstance->process($context);\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n\nfunction vtlib_module_icon($modulename) {\n\tif (file_exists(\"modules/$modulename/$modulename.png\")) {\n\t\treturn \"modules/$modulename/$modulename.png\";\n\t}\n\treturn 'modules/Vtiger/Vtiger.png';\n}\n\n/**\n * Function to return the valid SQL input\n * @param string SQL\n * @param boolean Skip the check if string is empty\n * @return string sanitized SQL or false\n */\nfunction vtlib_purifyForSql($string, $skipEmpty = true) {\n\t$pattern = '/^[_a-zA-Z0-9.]+$/';\n\tif ((empty($string) && $skipEmpty) || preg_match($pattern, $string)) {\n\t\treturn $string;\n\t}\n\treturn false;\n}\n\nfunction getvtlib_open_popup_window_function($popupmodule, $fldname, $basemodule) {\n\tif (file_exists('modules/'.$popupmodule.'/'.$popupmodule.'.php')) {\n\t\tinclude_once 'modules/'.$popupmodule.'/'.$popupmodule.'.php';\n\t\t$mod = new $popupmodule();\n\t\tif (method_exists($mod, 'getvtlib_open_popup_window_function')) {\n\t\t\treturn $mod->getvtlib_open_popup_window_function($fldname, $basemodule);\n\t\t} elseif (file_exists('modules/'.$popupmodule.'/getvtlib_open_popup_window_function.php')) {\n\t\t\t@include_once 'modules/'.$popupmodule.'/getvtlib_open_popup_window_function.php';\n\t\t\tif (function_exists('__hook_getvtlib_open_popup_window_function')) {\n\t\t\t\t$mod->registerMethod('__hook_getvtlib_open_popup_window_function');\n\t\t\t\treturn $mod->__hook_getvtlib_open_popup_window_function($fldname, $basemodule);\n\t\t\t}\n\t\t}\n\t}\n\treturn 'vtlib_open_popup_window';\n}\n?>\n"], "filenames": ["include/utils/VtlibUtils.php"], "buggy_code_start_loc": [482], "buggy_code_end_loc": [482], "fixing_code_start_loc": [483], "fixing_code_end_loc": [493], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository tsolucio/corebos prior to 8.0.", "other": {"cve": {"id": "CVE-2023-1527", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-21T00:15:10.780", "lastModified": "2023-03-23T19:36:00.390", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository tsolucio/corebos prior to 8.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:corebos:corebos:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.0", "matchCriteriaId": "2ED1C4A9-9F39-4663-9E1B-6270C9CC2539"}]}]}], "references": [{"url": "https://github.com/tsolucio/corebos/commit/aaaca69185bce2be6a82956c69541938dc871268", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f0272a31-9944-4545-8428-a26154d20348", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tsolucio/corebos/commit/aaaca69185bce2be6a82956c69541938dc871268"}}