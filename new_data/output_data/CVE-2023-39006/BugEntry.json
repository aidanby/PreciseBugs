{"buggy_code": ["<?php\n\n/*\n * Copyright (C) 2015-2023 Franco Fichtner <franco@opnsense.org>\n * Copyright (C) 2014 Deciso B.V.\n * Copyright (C) 2011 Scott Ullrich <sullrich@gmail.com>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nrequire_once 'guiconfig.inc';\n\nfunction has_crash_report()\n{\n    $skip_files = ['.', '..', 'minfree', 'bounds', ''];\n    $PHP_errors_log = '/tmp/PHP_errors.log';\n    $count = 0;\n\n    if (file_exists($PHP_errors_log)) {\n        if (intval(shell_safe('/bin/cat %s | /usr/bin/wc -l | /usr/bin/awk \\'{ print $1 }\\'', $PHP_errors_log))) {\n            $count++;\n        }\n    }\n\n    $crashes = glob('/var/crash/*');\n    foreach ($crashes as $crash) {\n        if (!in_array(basename($crash), $skip_files)) {\n            $count++;\n        }\n    }\n\n    return $count;\n}\n\nfunction upload_crash_report($files, $agent)\n{\n    $post = array();\n    $counter = 0;\n\n    foreach ($files as $filename) {\n        if (is_link($filename) || $filename == '/var/crash/minfree.gz' || $filename == '/var/crash/bounds.gz'\n            || filesize($filename) > 5 * 1024 * 1024) {\n            continue;\n        }\n        $post[\"file{$counter}\"] = curl_file_create($filename, \"application/x-gzip\", basename($filename));\n        $counter++;\n    }\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, 'https://crash.opnsense.org/');\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_VERBOSE, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, $agent);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: multipart/form-data;' ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n\n    return !$response;\n}\n\ninclude('head.inc');\n\n$plugins = implode(' ',  explode(\"\\n\", shell_safe('pkg info -g \"os-*\"')));\n$product = product::getInstance();\n\n$crash_report_header = sprintf(\n    \"%s %s\\n%s %s %s\\n%sTime %s\\n%s\\n%s\\nPHP %s\\n\",\n    php_uname('v'),\n    $product->arch(),\n    $product->name(),\n    $product->version(),\n    $product->hash(),\n    empty($plugins) ? '' : \"Plugins $plugins\\n\",\n    date('r'),\n    shell_safe('/usr/local/bin/openssl version'),\n    shell_safe('/usr/local/bin/python3 -V'),\n    PHP_VERSION\n);\n\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $crash_report_header = \"User-Agent {$_SERVER['HTTP_USER_AGENT']}\\n{$crash_report_header}\";\n}\n\n$user_agent = \"{$product->name()}/{$product->version()}\";\n$crash_reports = [];\n$has_crashed = false;\n$is_prod = empty($config['system']['deployment']);\n\n$pconfig = array();\n$pconfig['Email'] = isset($config['system']['contact_email']) ? $config['system']['contact_email'] : '';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $pconfig = $_POST;\n    if ($pconfig['Submit'] == 'yes') {\n        if (!is_dir('/var/crash')) {\n            mkdir('/var/crash', 0750, true);\n        }\n        $email = trim($pconfig['Email']);\n        if (!empty($email)) {\n            $crash_report_header .= \"Email {$email}\\n\";\n            if (!isset($config['system']['contact_email']) ||\n                $config['system']['contact_email'] !== $email) {\n                $config['system']['contact_email'] = $email;\n                write_config('Updated crash reporter contact email.');\n            }\n        } elseif (isset($config['system']['contact_email'])) {\n            unset($config['system']['contact_email']);\n            write_config('Removed crash reporter contact email.');\n        }\n        $desc = trim($pconfig['Desc']);\n        if (!empty($desc)) {\n            $crash_report_header .= \"Description\\n\\n{$desc}\";\n        }\n        $skip_files = array('.', '..', 'minfree', 'bounds', '');\n        $crashes = glob('/var/crash/*');\n        foreach ($crashes as $crash) {\n            if (!in_array(basename($crash), $skip_files)) {\n                $count++;\n            }\n        }\n        if ($count || (!empty($desc) && !empty($email))) {\n            $files_to_upload = glob('/var/crash/*');\n            foreach ($files_to_upload as $file_to_upload) {\n                if (filesize($file_to_upload) > 450000) {\n                    @unlink($file_to_upload);\n                }\n            }\n            file_put_contents('/var/crash/crashreport_header.txt', $crash_report_header);\n            if (file_exists('/tmp/PHP_errors.log')) {\n                // limit PHP_errors to send to 1MB\n                exec('/usr/bin/tail -c 1048576 /tmp/PHP_errors.log > /var/crash/PHP_errors.log');\n                @unlink('/tmp/PHP_errors.log');\n            }\n            @copy('/var/run/dmesg.boot', '/var/crash/dmesg.boot');\n            exec('/usr/bin/gzip /var/crash/*');\n            $files_to_upload = glob('/var/crash/*');\n            upload_crash_report($files_to_upload, $user_agent);\n            foreach ($files_to_upload as $file_to_upload) {\n                @unlink($file_to_upload);\n            }\n        } else {\n            /* still crashing ;) */\n            $has_crashed = true;\n        }\n    } elseif ($pconfig['Submit'] == 'no') {\n        $files_to_upload = glob('/var/crash/*');\n        foreach ($files_to_upload as $file_to_upload) {\n            @unlink($file_to_upload);\n        }\n        @unlink('/tmp/PHP_errors.log');\n    } elseif ($pconfig['Submit'] == 'new') {\n          /* force a crash report generation */\n          $has_crashed = true;\n    }\n} else {\n    /* if there is no user activity probe for a crash report */\n    $has_crashed = has_crash_report();\n}\n\nif ($has_crashed) {\n    $crash_files = glob(\"/var/crash/*\");\n    $crash_reports['System Information'] = trim($crash_report_header);\n    if (file_exists('/tmp/PHP_errors.log')) {\n        $php_errors_size = @filesize('/tmp/PHP_errors.log');\n        $max_php_errors_size = 1 * 1024 * 1024;\n        // limit reporting for PHP_errors.log to $max_php_errors_size characters\n        if ($php_errors_size > $max_php_errors_size) {\n            // if file is to large, only display last $max_php_errors_size characters\n            $php_errors .= @file_get_contents(\n                          '/tmp/PHP_errors.log',\n                          NULL,\n                          NULL,\n                          ($php_errors_size - $max_php_errors_size),\n                          $max_php_errors_size\n            );\n        } else {\n            $php_errors = @file_get_contents('/tmp/PHP_errors.log');\n        }\n        if (!empty($php_errors)) {\n            $crash_reports['PHP Errors'] = trim($php_errors);\n        }\n    }\n    $dmesg_boot = @file_get_contents('/var/run/dmesg.boot');\n    if (!empty($dmesg_boot)) {\n        $crash_reports['dmesg.boot'] = trim($dmesg_boot);\n    }\n    foreach ($crash_files as $cf) {\n        if (!is_link($cf) && $cf != '/var/crash/minfree' && $cf != '/var/crash/bounds') {\n            if (filesize($cf) > 450000) {\n                $crash_reports[$cf] = gettext('File too big to process. It will not be submitted automatically.');\n            } else {\n                $crash_reports[$cf] = trim(file_get_contents($cf));\n            }\n        }\n    }\n}\n\n$message = gettext('No issues were detected.');\nif ($has_crashed) {\n    if ($is_prod) {\n        $message = gettext('An issue was detected.');\n    } else {\n        $message = gettext('Development deployment is configured so crash reports cannot be sent.');\n    }\n}\n\nif (isset($pconfig['Submit'])) {\n    if ($pconfig['Submit'] == 'yes') {\n        if (!$has_crashed) {\n            $message = gettext('Thank you for submitting this crash report.');\n        } else {\n            $message = gettext('This crash report contains no actual crash information. If you want to submit a problem please fill out your e-mail and description below.');\n        }\n    } elseif ($pconfig['Submit'] == 'no') {\n        if ($is_prod) {\n            $message = gettext('Please consider submitting a crash report if the error persists.');\n        }\n    }\n}\n\n// escape form output before processing\nlegacy_html_escape_form_data($pconfig);\n\n?>\n<body>\n\n<?php include(\"fbegin.inc\"); ?>\n\n<section class=\"page-content-main\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <section class=\"col-xs-12\">\n        <div class=\"content-box\">\n          <form method=\"post\">\n            <div class=\"col-xs-12\">\n<?php if ($has_crashed): ?>\n              <br/><button name=\"Submit\" type=\"submit\" class=\"btn btn-default pull-right\" value=\"no\"><?=gettext('Dismiss this report');?></button>\n<?php if ($is_prod): ?>\n              <button name=\"Submit\" type=\"submit\" class=\"btn btn-primary pull-right\" style=\"margin-right: 8px;\" value=\"yes\"><?=gettext('Submit this report');?></button>\n              <p><strong><?= $message ?></strong></p>\n              <p><?=gettext(\"Would you like to submit this crash report to the developers?\");?></p>\n              <hr><p><?=gettext('You can help us further by adding your contact information and a problem description. ' .\n                  'Please note that providing your contact information greatly improves the chances of bugs being fixed.');?></p>\n              <p><input type=\"text\" placeholder=\"<?= html_safe(gettext('your@email.com')) ?>\" name=\"Email\" value=\"<?= html_safe($pconfig['Email']) ?>\"></p>\n              <p><textarea rows=\"5\" placeholder=\"<?= html_safe(gettext('A short problem description or steps to reproduce.')) ?>\" name=\"Desc\"><?= $pconfig['Desc'] ?></textarea></p>\n              <hr><p><?=gettext(\"Please double-check the following contents to ensure you are comfortable submitting the following information.\");?></p>\n<?php else: ?>\n              <p><strong><?= $message ?></strong></p>\n<?php endif ?>\n<?php\n              foreach ($crash_reports as $report => $content):?>\n                  <p>\n                    <?=$report;?>:<br/>\n                    <pre><?=$content;?></pre>\n                  </p>\n<?php\n              endforeach;\n            else:?>\n\n              <input type=\"hidden\" name=\"Email\" value=\"<?= html_safe($pconfig['Email'] ?? '') ?>\">\n              <br/><button name=\"Submit\" type=\"submit\" class=\"btn btn-primary pull-right\" value=\"new\"><?=gettext('Report an issue');?></button>\n              <p><strong><?=$message;?></strong></p><br/>\n<?php\n            endif;?>\n            </div>\n          </form>\n        </div>\n      </section>\n    </div>\n  </div>\n</section>\n\n<?php include(\"foot.inc\");\n"], "fixing_code": ["<?php\n\n/*\n * Copyright (C) 2015-2023 Franco Fichtner <franco@opnsense.org>\n * Copyright (C) 2014 Deciso B.V.\n * Copyright (C) 2011 Scott Ullrich <sullrich@gmail.com>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nrequire_once 'guiconfig.inc';\n\nfunction has_crash_report()\n{\n    $skip_files = ['.', '..', 'minfree', 'bounds', ''];\n    $PHP_errors_log = '/tmp/PHP_errors.log';\n    $count = 0;\n\n    if (file_exists($PHP_errors_log)) {\n        if (intval(shell_safe('/bin/cat %s | /usr/bin/wc -l | /usr/bin/awk \\'{ print $1 }\\'', $PHP_errors_log))) {\n            $count++;\n        }\n    }\n\n    $crashes = glob('/var/crash/*');\n    foreach ($crashes as $crash) {\n        if (!in_array(basename($crash), $skip_files)) {\n            $count++;\n        }\n    }\n\n    return $count;\n}\n\nfunction upload_crash_report($files, $agent)\n{\n    $post = array();\n    $counter = 0;\n\n    foreach ($files as $filename) {\n        if (is_link($filename) || $filename == '/var/crash/minfree.gz' || $filename == '/var/crash/bounds.gz'\n            || filesize($filename) > 5 * 1024 * 1024) {\n            continue;\n        }\n        $post[\"file{$counter}\"] = curl_file_create($filename, \"application/x-gzip\", basename($filename));\n        $counter++;\n    }\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, 'https://crash.opnsense.org/');\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_VERBOSE, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, $agent);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: multipart/form-data;' ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n\n    return !$response;\n}\n\ninclude('head.inc');\n\n$plugins = implode(' ',  explode(\"\\n\", shell_safe('pkg info -g \"os-*\"')));\n$product = product::getInstance();\n\n$crash_report_header = sprintf(\n    \"%s %s\\n%s %s %s\\n%sTime %s\\n%s\\n%s\\nPHP %s\\n\",\n    php_uname('v'),\n    $product->arch(),\n    $product->name(),\n    $product->version(),\n    $product->hash(),\n    empty($plugins) ? '' : \"Plugins $plugins\\n\",\n    date('r'),\n    shell_safe('/usr/local/bin/openssl version'),\n    shell_safe('/usr/local/bin/python3 -V'),\n    PHP_VERSION\n);\n\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $crash_report_header = \"User-Agent {$_SERVER['HTTP_USER_AGENT']}\\n{$crash_report_header}\";\n}\n\n$user_agent = \"{$product->name()}/{$product->version()}\";\n$crash_reports = [];\n$has_crashed = false;\n$is_prod = empty($config['system']['deployment']);\n\n$pconfig = array();\n$pconfig['Email'] = isset($config['system']['contact_email']) ? $config['system']['contact_email'] : '';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $pconfig = $_POST;\n    if ($pconfig['Submit'] == 'yes') {\n        if (!is_dir('/var/crash')) {\n            mkdir('/var/crash', 0750, true);\n        }\n        $email = trim($pconfig['Email']);\n        if (!empty($email)) {\n            $crash_report_header .= \"Email {$email}\\n\";\n            if (!isset($config['system']['contact_email']) ||\n                $config['system']['contact_email'] !== $email) {\n                $config['system']['contact_email'] = $email;\n                write_config('Updated crash reporter contact email.');\n            }\n        } elseif (isset($config['system']['contact_email'])) {\n            unset($config['system']['contact_email']);\n            write_config('Removed crash reporter contact email.');\n        }\n        $desc = trim($pconfig['Desc']);\n        if (!empty($desc)) {\n            $crash_report_header .= \"Description\\n\\n{$desc}\";\n        }\n        $skip_files = array('.', '..', 'minfree', 'bounds', '');\n        $crashes = glob('/var/crash/*');\n        foreach ($crashes as $crash) {\n            if (!in_array(basename($crash), $skip_files)) {\n                $count++;\n            }\n        }\n        if ($count || (!empty($desc) && !empty($email))) {\n            $files_to_upload = glob('/var/crash/*');\n            foreach ($files_to_upload as $file_to_upload) {\n                if (filesize($file_to_upload) > 450000) {\n                    @unlink($file_to_upload);\n                }\n            }\n            file_put_contents('/var/crash/crashreport_header.txt', $crash_report_header);\n            if (file_exists('/tmp/PHP_errors.log')) {\n                // limit PHP_errors to send to 1MB\n                exec('/usr/bin/tail -c 1048576 /tmp/PHP_errors.log > /var/crash/PHP_errors.log');\n                @unlink('/tmp/PHP_errors.log');\n            }\n            @copy('/var/run/dmesg.boot', '/var/crash/dmesg.boot');\n            exec('/usr/bin/gzip /var/crash/*');\n            $files_to_upload = glob('/var/crash/*');\n            upload_crash_report($files_to_upload, $user_agent);\n            foreach ($files_to_upload as $file_to_upload) {\n                @unlink($file_to_upload);\n            }\n        } else {\n            /* still crashing ;) */\n            $has_crashed = true;\n        }\n    } elseif ($pconfig['Submit'] == 'no') {\n        $files_to_upload = glob('/var/crash/*');\n        foreach ($files_to_upload as $file_to_upload) {\n            @unlink($file_to_upload);\n        }\n        @unlink('/tmp/PHP_errors.log');\n    } elseif ($pconfig['Submit'] == 'new') {\n          /* force a crash report generation */\n          $has_crashed = true;\n    }\n} else {\n    /* if there is no user activity probe for a crash report */\n    $has_crashed = has_crash_report();\n}\n\nif ($has_crashed) {\n    $crash_files = glob(\"/var/crash/*\");\n    $crash_reports['System Information'] = trim($crash_report_header);\n    if (file_exists('/tmp/PHP_errors.log')) {\n        $php_errors_size = @filesize('/tmp/PHP_errors.log');\n        $max_php_errors_size = 1 * 1024 * 1024;\n        // limit reporting for PHP_errors.log to $max_php_errors_size characters\n        if ($php_errors_size > $max_php_errors_size) {\n            // if file is to large, only display last $max_php_errors_size characters\n            $php_errors .= @file_get_contents(\n                          '/tmp/PHP_errors.log',\n                          NULL,\n                          NULL,\n                          ($php_errors_size - $max_php_errors_size),\n                          $max_php_errors_size\n            );\n        } else {\n            $php_errors = @file_get_contents('/tmp/PHP_errors.log');\n        }\n        if (!empty($php_errors)) {\n            $crash_reports['PHP Errors'] = trim($php_errors);\n        }\n    }\n    $dmesg_boot = @file_get_contents('/var/run/dmesg.boot');\n    if (!empty($dmesg_boot)) {\n        $crash_reports['dmesg.boot'] = trim($dmesg_boot);\n    }\n    foreach ($crash_files as $cf) {\n        if (!is_link($cf) && $cf != '/var/crash/minfree' && $cf != '/var/crash/bounds') {\n            if (filesize($cf) > 450000) {\n                $crash_reports[$cf] = gettext('File too big to process. It will not be submitted automatically.');\n            } else {\n                $crash_reports[$cf] = trim(file_get_contents($cf));\n            }\n        }\n    }\n}\n\n$message = gettext('No issues were detected.');\nif ($has_crashed) {\n    if ($is_prod) {\n        $message = gettext('An issue was detected.');\n    } else {\n        $message = gettext('Development deployment is configured so crash reports cannot be sent.');\n    }\n}\n\nif (isset($pconfig['Submit'])) {\n    if ($pconfig['Submit'] == 'yes') {\n        if (!$has_crashed) {\n            $message = gettext('Thank you for submitting this crash report.');\n        } else {\n            $message = gettext('This crash report contains no actual crash information. If you want to submit a problem please fill out your e-mail and description below.');\n        }\n    } elseif ($pconfig['Submit'] == 'no') {\n        if ($is_prod) {\n            $message = gettext('Please consider submitting a crash report if the error persists.');\n        }\n    }\n}\n\n// escape form output before processing\nlegacy_html_escape_form_data($pconfig);\n\n?>\n<body>\n\n<?php include(\"fbegin.inc\"); ?>\n\n<section class=\"page-content-main\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <section class=\"col-xs-12\">\n        <div class=\"content-box\">\n          <form method=\"post\">\n            <div class=\"col-xs-12\">\n<?php if ($has_crashed): ?>\n              <br/><button name=\"Submit\" type=\"submit\" class=\"btn btn-default pull-right\" value=\"no\"><?=gettext('Dismiss this report');?></button>\n<?php if ($is_prod): ?>\n              <button name=\"Submit\" type=\"submit\" class=\"btn btn-primary pull-right\" style=\"margin-right: 8px;\" value=\"yes\"><?=gettext('Submit this report');?></button>\n              <p><strong><?= $message ?></strong></p>\n              <p><?=gettext(\"Would you like to submit this crash report to the developers?\");?></p>\n              <hr><p><?=gettext('You can help us further by adding your contact information and a problem description. ' .\n                  'Please note that providing your contact information greatly improves the chances of bugs being fixed.');?></p>\n              <p><input type=\"text\" placeholder=\"<?= html_safe(gettext('your@email.com')) ?>\" name=\"Email\" value=\"<?= html_safe($pconfig['Email']) ?>\"></p>\n              <p><textarea rows=\"5\" placeholder=\"<?= html_safe(gettext('A short problem description or steps to reproduce.')) ?>\" name=\"Desc\"><?= $pconfig['Desc'] ?></textarea></p>\n              <hr><p><?=gettext(\"Please double-check the following contents to ensure you are comfortable submitting the following information.\");?></p>\n<?php else: ?>\n              <p><strong><?= $message ?></strong></p>\n<?php endif ?>\n<?php\n              foreach ($crash_reports as $report => $content):?>\n                  <p>\n                    <?=$report;?>:<br/>\n                    <pre><?=html_safe($content);?></pre>\n                  </p>\n<?php\n              endforeach;\n            else:?>\n\n              <input type=\"hidden\" name=\"Email\" value=\"<?= html_safe($pconfig['Email'] ?? '') ?>\">\n              <br/><button name=\"Submit\" type=\"submit\" class=\"btn btn-primary pull-right\" value=\"new\"><?=gettext('Report an issue');?></button>\n              <p><strong><?=$message;?></strong></p><br/>\n<?php\n            endif;?>\n            </div>\n          </form>\n        </div>\n      </section>\n    </div>\n  </div>\n</section>\n\n<?php include(\"foot.inc\");\n"], "filenames": ["src/www/crash_reporter.php"], "buggy_code_start_loc": [278], "buggy_code_end_loc": [279], "fixing_code_start_loc": [278], "fixing_code_end_loc": [279], "type": "CWE-79", "message": "The Crash Reporter (crash_reporter.php) component of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 mishandles input sanitization.", "other": {"cve": {"id": "CVE-2023-39006", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-09T19:15:15.140", "lastModified": "2023-10-10T23:15:10.640", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Crash Reporter (crash_reporter.php) component of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 mishandles input sanitization."}, {"lang": "es", "value": "El componente Crash Reporter (crash_reporter.php) de OPNsense Community Edition anterior a 23.7 y Business Edition anterior a 23.4.2 no realiza correctamente la limpieza de entradas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opnsense:opnsense:*:*:*:*:*:*:*:*", "versionEndExcluding": "23.7", "matchCriteriaId": "E4C1BDFF-B6E1-4F82-9957-1FFA069E2EDC"}]}]}], "references": [{"url": "https://github.com/opnsense/core/commit/1c05a19d9d52c7bfa4ac52114935d9fe76d5d181", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://logicaltrust.net/blog/2023/08/opnsense.html", "source": "cve@mitre.org", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opnsense/core/commit/1c05a19d9d52c7bfa4ac52114935d9fe76d5d181"}}