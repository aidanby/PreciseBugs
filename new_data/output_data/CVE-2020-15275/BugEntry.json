{"buggy_code": ["# -*- coding: iso-8859-1 -*-\n\"\"\"\n    MoinMoin - site-wide configuration defaults (NOT per single wiki!)\n\n    @copyright: 2005-2006 MoinMoin:ThomasWaldmann\n    @license: GNU GPL, see COPYING for details.\n\"\"\"\nimport re\nfrom MoinMoin import version\n\n# unicode: set the char types (upper, lower, digits, spaces)\nfrom MoinMoin.util.chartypes import *\n\n# List of image types browser do support regulary\nbrowser_supported_images = ('gif', 'jpg', 'jpeg', 'png', 'bmp', 'ico', )\n\n# Parser to use mimetype text\nparser_text_mimetype = ('plain', 'csv', 'rst', 'docbook', 'latex', 'tex', 'html', 'css',\n                       'xml', 'python', 'perl', 'php', 'ruby', 'javascript',\n                       'cplusplus', 'java', 'pascal', 'diff', 'gettext', 'xslt', 'creole', )\n\n# When creating files, we use e.g. 0666 & config.umask for the mode:\numask = 0770\n\n# list of acceptable password hashing schemes for cfg.password_scheme,\n# here we only give reasonably good schemes, which is passlib (if we\n# have passlib) and ssha (if we only have builtin stuff):\npassword_schemes_configurable = ['{PASSLIB}', '{SSHA}', ]\n\n# ordered list of supported password hashing schemes, best (passlib) should be\n# first, best builtin one should be second. this is what we support if we\n# encounter it in user profiles:\npassword_schemes_supported = password_schemes_configurable + ['{SHA}', '{APR1}', '{MD5}', '{DES}', ]\n\n# Default value for the static stuff URL prefix (css, img, js).\n# Caution:\n# * do NOT use this directly, it is only the DEFAULT value to be used by\n#   server Config classes and by multiconfig.py for request.cfg.\n# * must NOT end with '/'!\n# * some servers expect '/' at beginning and only 1 level deep.\nurl_prefix_static = '/moin_static' + version.release_short\n\n# Threads flag - if you write a moin server that use threads, import\n# config in the server and set this flag to True.\nuse_threads = False\n\n# Charset - we support only 'utf-8'. While older encodings might work,\n# we don't have the resources to test them, and there is no real\n# benefit for the user. IMPORTANT: use only lowercase 'utf-8'!\ncharset = 'utf-8'\n\n# Regex to find lower->upper transitions (word boundaries in WikiNames), used by split_title\nsplit_regex = re.compile('([%s])([%s])' % (chars_lower, chars_upper), re.UNICODE)\n\n# Invalid characters - invisible characters that should not be in page\n# names. Prevent user confusion and wiki abuse, e.g u'\\u202aFrontPage'.\npage_invalid_chars_regex = re.compile(\n    ur\"\"\"\n    \\u0000 | # NULL\n\n    # Bidi control characters\n    \\u202A | # LRE\n    \\u202B | # RLE\n    \\u202C | # PDF\n    \\u202D | # LRM\n    \\u202E   # RLM\n    \"\"\",\n    re.UNICODE | re.VERBOSE\n    )\n\n# used for wikiutil.clean_input\nclean_input_translation_map = {\n    # these chars will be replaced by blanks\n    ord(u'\\t'): u' ',\n    ord(u'\\r'): u' ',\n    ord(u'\\n'): u' ',\n}\nfor c in u'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f' \\\n          '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f':\n    # these chars will be removed\n    clean_input_translation_map[ord(c)] = None\ndel c\n\n# Other stuff\nurl_schemas = ['http', 'https', 'ftp', 'file',\n               'mailto', 'nntp', 'news',\n               'ssh', 'telnet', 'irc', 'ircs', 'xmpp', 'mumble',\n               'webcal', 'ed2k', 'apt', 'rootz',\n               'gopher',\n               'notes',\n               'rtp', 'rtsp', 'rtcp',\n               'tel',\n              ]\n\nsmileys = (r\"X-( :D <:( :o :( :) B) :)) ;) /!\\ <!> (!) :-? :\\ >:> |) \" +\n           r\":-( :-) B-) :-)) ;-) |-) (./) {OK} {X} {i} {1} {2} {3} {*} {o}\").split()\n", "# -*- coding: iso-8859-1 -*-\n\"\"\"\n    MoinMoin - Multiple configuration handler and Configuration defaults class\n\n    @copyright: 2000-2004 Juergen Hermann <jh@web.de>,\n                2005-2008 MoinMoin:ThomasWaldmann.\n                2008      MoinMoin:JohannesBerg\n    @license: GNU GPL, see COPYING for details.\n\"\"\"\n\nimport hashlib\nimport re\nimport os\nimport sys\nimport time\n\nfrom MoinMoin import log\nlogging = log.getLogger(__name__)\n\nfrom MoinMoin import config, error, util, wikiutil, web\nfrom MoinMoin import datastruct\nfrom MoinMoin.auth import MoinAuth\nimport MoinMoin.auth as authmodule\nimport MoinMoin.events as events\nfrom MoinMoin.events import PageChangedEvent, PageRenamedEvent\nfrom MoinMoin.events import PageDeletedEvent, PageCopiedEvent\nfrom MoinMoin.events import PageRevertedEvent, FileAttachedEvent\nimport MoinMoin.web.session\nfrom MoinMoin.packages import packLine\nfrom MoinMoin.security import AccessControlList\n\n_url_re_cache = None\n_farmconfig_mtime = None\n_config_cache = {}\n\n\ndef _importConfigModule(name):\n    \"\"\" Import and return configuration module and its modification time\n\n    Handle all errors except ImportError, because missing file is not\n    always an error.\n\n    @param name: module name\n    @rtype: tuple\n    @return: module, modification time\n    \"\"\"\n    try:\n        module = __import__(name, globals(), {})\n        mtime = os.path.getmtime(module.__file__)\n    except ImportError:\n        raise\n    except IndentationError, err:\n        logging.exception('Your source code / config file is not correctly indented!')\n        msg = \"\"\"IndentationError: %(err)s\n\nThe configuration files are Python modules. Therefore, whitespace is\nimportant. Make sure that you use only spaces, no tabs are allowed here!\nYou have to use four spaces at the beginning of the line mostly.\n\"\"\" % {\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n    except Exception, err:\n        logging.exception('An exception happened.')\n        msg = '%s: %s' % (err.__class__.__name__, str(err))\n        raise error.ConfigurationError(msg)\n    return module, mtime\n\n\ndef _url_re_list():\n    \"\"\" Return url matching regular expression\n\n    Import wikis list from farmconfig on the first call and compile the\n    regexes. Later just return the cached regex list.\n\n    @rtype: list of tuples of (name, compiled re object)\n    @return: url to wiki config name matching list\n    \"\"\"\n    global _url_re_cache, _farmconfig_mtime\n    if _url_re_cache is None:\n        try:\n            farmconfig, _farmconfig_mtime = _importConfigModule('farmconfig')\n        except ImportError, err:\n            if 'farmconfig' in str(err):\n                # we failed importing farmconfig\n                logging.debug(\"could not import farmconfig, mapping all URLs to wikiconfig\")\n                _farmconfig_mtime = 0\n                _url_re_cache = [('wikiconfig', re.compile(r'.')), ] # matches everything\n            else:\n                # maybe there was a failing import statement inside farmconfig\n                raise\n        else:\n            logging.info(\"using farm config: %s\" % os.path.abspath(farmconfig.__file__))\n            try:\n                cache = []\n                for name, regex in farmconfig.wikis:\n                    cache.append((name, re.compile(regex)))\n                _url_re_cache = cache\n            except AttributeError:\n                logging.error(\"required 'wikis' list missing in farmconfig\")\n                msg = \"\"\"\nMissing required 'wikis' list in 'farmconfig.py'.\n\nIf you run a single wiki you do not need farmconfig.py. Delete it and\nuse wikiconfig.py.\n\"\"\"\n                raise error.ConfigurationError(msg)\n    return _url_re_cache\n\n\ndef _makeConfig(name):\n    \"\"\" Create and return a config instance\n\n    Timestamp config with either module mtime or farmconfig mtime. This\n    mtime can be used later to invalidate older caches.\n\n    @param name: module name\n    @rtype: DefaultConfig sub class instance\n    @return: new configuration instance\n    \"\"\"\n    global _farmconfig_mtime\n    try:\n        module, mtime = _importConfigModule(name)\n        configClass = getattr(module, 'Config')\n        cfg = configClass(name)\n        cfg.cfg_mtime = max(mtime, _farmconfig_mtime)\n        logging.info(\"using wiki config: %s\" % os.path.abspath(module.__file__))\n    except ImportError, err:\n        logging.exception('Could not import.')\n        msg = \"\"\"ImportError: %(err)s\n\nCheck that the file is in the same directory as the server script. If\nit is not, you must add the path of the directory where the file is\nlocated to the python path in the server script. See the comments at\nthe top of the server script.\n\nCheck that the configuration file name is either \"wikiconfig.py\" or the\nmodule name specified in the wikis list in farmconfig.py. Note that the\nmodule name does not include the \".py\" suffix.\n\"\"\" % {\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n    except AttributeError, err:\n        logging.exception('An exception occurred.')\n        msg = \"\"\"AttributeError: %(err)s\n\nCould not find required \"Config\" class in \"%(name)s.py\".\n\nThis might happen if you are trying to use a pre 1.3 configuration file, or\nmade a syntax or spelling error.\n\nAnother reason for this could be a name clash. It is not possible to have\nconfig names like e.g. stats.py - because that collides with MoinMoin/stats/ -\nhave a look into your MoinMoin code directory what other names are NOT\npossible.\n\nPlease check your configuration file. As an example for correct syntax,\nuse the wikiconfig.py file from the distribution.\n\"\"\" % {\n    'name': name,\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n\n    return cfg\n\n\ndef _getConfigName(url):\n    \"\"\" Return config name for url or raise \"\"\"\n    for name, regex in _url_re_list():\n        match = regex.match(url)\n        if match:\n            return name\n    raise error.NoConfigMatchedError\n\n\ndef getConfig(url):\n    \"\"\" Return cached config instance for url or create new one\n\n    If called by many threads in the same time multiple config\n    instances might be created. The first created item will be\n    returned, using dict.setdefault.\n\n    @param url: the url from request, possibly matching specific wiki\n    @rtype: DefaultConfig subclass instance\n    @return: config object for specific wiki\n    \"\"\"\n    cfgName = _getConfigName(url)\n    try:\n        cfg = _config_cache[cfgName]\n    except KeyError:\n        cfg = _makeConfig(cfgName)\n        cfg = _config_cache.setdefault(cfgName, cfg)\n    return cfg\n\n\n# This is a way to mark some text for the gettext tools so that they don't\n# get orphaned. See http://www.python.org/doc/current/lib/node278.html.\ndef _(text):\n    return text\n\n\nclass CacheClass:\n    \"\"\" just a container for stuff we cache \"\"\"\n    pass\n\n\nclass ConfigFunctionality(object):\n    \"\"\" Configuration base class with config class behaviour.\n\n        This class contains the functionality for the DefaultConfig\n        class for the benefit of the WikiConfig macro.\n    \"\"\"\n\n    # attributes of this class that should not be shown\n    # in the WikiConfig() macro.\n    cfg_mtime = None\n    siteid = None\n    cache = None\n    mail_enabled = None\n    jabber_enabled = None\n    auth_can_logout = None\n    auth_have_login = None\n    auth_login_inputs = None\n    _site_plugin_lists = None\n    _iwid = None\n    _iwid_full = None\n    xapian_searchers = None\n    moinmoin_dir = None\n    # will be lazily loaded by interwiki code when needed (?)\n    shared_intermap_files = None\n\n    def __init__(self, siteid):\n        \"\"\" Init Config instance \"\"\"\n        self.siteid = siteid\n        self.cache = CacheClass()\n\n        from MoinMoin.Page import ItemCache\n        self.cache.meta = ItemCache('meta')\n        self.cache.pagelists = ItemCache('pagelists')\n\n        if self.config_check_enabled:\n            self._config_check()\n\n        # define directories\n        self.moinmoin_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))\n        data_dir = os.path.normpath(self.data_dir)\n        self.data_dir = data_dir\n        for dirname in ('user', 'cache', 'plugin'):\n            name = dirname + '_dir'\n            if not getattr(self, name, None):\n                setattr(self, name, os.path.abspath(os.path.join(data_dir, dirname)))\n        # directories below cache_dir (using __dirname__ to avoid conflicts)\n        for dirname in ('session', ):\n            name = dirname + '_dir'\n            if not getattr(self, name, None):\n                setattr(self, name, os.path.abspath(os.path.join(self.cache_dir, '__%s__' % dirname)))\n\n        # Try to decode certain names which allow unicode\n        self._decode()\n\n        # After that, pre-compile some regexes\n        self.cache.page_category_regex = re.compile(self.page_category_regex, re.UNICODE)\n        self.cache.page_dict_regex = re.compile(self.page_dict_regex, re.UNICODE)\n        self.cache.page_group_regex = re.compile(self.page_group_regex, re.UNICODE)\n        self.cache.page_template_regex = re.compile(self.page_template_regex, re.UNICODE)\n\n        # the ..._regexact versions only match if nothing is left (exact match)\n        self.cache.page_category_regexact = re.compile(u'^%s$' % self.page_category_regex, re.UNICODE)\n        self.cache.page_dict_regexact = re.compile(u'^%s$' % self.page_dict_regex, re.UNICODE)\n        self.cache.page_group_regexact = re.compile(u'^%s$' % self.page_group_regex, re.UNICODE)\n        self.cache.page_template_regexact = re.compile(u'^%s$' % self.page_template_regex, re.UNICODE)\n\n        self.cache.ua_spiders = self.ua_spiders and re.compile(self.ua_spiders, re.IGNORECASE)\n\n        self._check_directories()\n\n        if not isinstance(self.superuser, list):\n            msg = \"\"\"The superuser setting in your wiki configuration is not a list\n                     (e.g. ['Sample User', 'AnotherUser']).\n                     Please change it in your wiki configuration and try again.\"\"\"\n            raise error.ConfigurationError(msg)\n\n        if not isinstance(self.actions_superuser, list):\n            msg = \"\"\"The actions_superuser setting in your wiki configuration is not a list\n                     (e.g. ['newaccount', 'some_other_action']).\n                     Please change it in your wiki configuration and try again.\"\"\"\n            raise error.ConfigurationError(msg)\n\n        # moin < 1.9 used cookie_lifetime = <float> (but converted it to int) for logged-in users and\n        # anonymous_session_lifetime = <float> or None for anon users\n        # moin >= 1.9 uses cookie_lifetime = (<float>, <float>) - first is anon, second is logged-in\n        if not (isinstance(self.cookie_lifetime, tuple) and len(self.cookie_lifetime) == 2):\n            logging.error(\"wiki configuration has an invalid setting: \" +\n                          \"cookie_lifetime = %r\" % (self.cookie_lifetime, ))\n            try:\n                anon_lifetime = self.anonymous_session_lifetime\n                logging.warning(\"wiki configuration has an unsupported setting: \" +\n                                \"anonymous_session_lifetime = %r - \" % anon_lifetime +\n                                \"please remove it.\")\n                if anon_lifetime is None:\n                    anon_lifetime = 0\n                anon_lifetime = float(anon_lifetime)\n            except:\n                # if anything goes wrong, use default value\n                anon_lifetime = 0\n            try:\n                logged_in_lifetime = int(self.cookie_lifetime)\n            except:\n                # if anything goes wrong, use default value\n                logged_in_lifetime = 12\n            self.cookie_lifetime = (anon_lifetime, logged_in_lifetime)\n            logging.warning(\"using cookie_lifetime = %r - \" % (self.cookie_lifetime, ) +\n                            \"please fix your wiki configuration.\")\n\n        self._loadPluginModule()\n\n        # Preparse user dicts\n        self._fillDicts()\n\n        # Normalize values\n        self.language_default = self.language_default.lower()\n\n        # Use site name as default name-logo\n        if self.logo_string is None:\n            self.logo_string = self.sitename\n\n        # Check for needed modules\n\n        # FIXME: maybe we should do this check later, just before a\n        # chart is needed, maybe in the chart module, instead doing it\n        # for each request. But this require a large refactoring of\n        # current code.\n        if self.chart_options:\n            try:\n                import gdchart\n            except ImportError:\n                self.chart_options = None\n\n        # 'setuid' special auth method auth method can log out\n        self.auth_can_logout = ['setuid']\n        self.auth_login_inputs = []\n        found_names = []\n        for auth in self.auth:\n            if not auth.name:\n                raise error.ConfigurationError(\"Auth methods must have a name.\")\n            if auth.name in found_names:\n                raise error.ConfigurationError(\"Auth method names must be unique.\")\n            found_names.append(auth.name)\n            if auth.logout_possible and auth.name:\n                self.auth_can_logout.append(auth.name)\n            for input in auth.login_inputs:\n                if not input in self.auth_login_inputs:\n                    self.auth_login_inputs.append(input)\n        self.auth_have_login = len(self.auth_login_inputs) > 0\n        self.auth_methods = found_names\n\n        # internal dict for plugin `modules' lists\n        self._site_plugin_lists = {}\n\n        # we replace any string placeholders with config values\n        # e.g u'%(page_front_page)s' % self\n        self.navi_bar = [elem % self for elem in self.navi_bar]\n\n        # check if python-xapian is installed\n        if self.xapian_search:\n            try:\n                import xapian\n            except ImportError, err:\n                self.xapian_search = False\n                logging.error(\"xapian_search was auto-disabled because python-xapian is not installed [%s].\" % str(err))\n\n        # list to cache xapian searcher objects\n        self.xapian_searchers = []\n\n        # check if mail is possible and set flag:\n        self.mail_enabled = (self.mail_smarthost is not None or self.mail_sendmail is not None) and self.mail_from\n        self.mail_enabled = self.mail_enabled and True or False\n\n        # check if jabber bot is available and set flag:\n        self.jabber_enabled = self.notification_bot_uri is not None\n\n        # if we are to use the jabber bot, instantiate a server object for future use\n        if self.jabber_enabled:\n            from xmlrpclib import Server\n            self.notification_server = Server(self.notification_bot_uri, )\n\n        # Cache variables for the properties below\n        self._iwid = self._iwid_full = self._meta_dict = None\n\n        self.cache.acl_rights_before = AccessControlList(self, [self.acl_rights_before])\n        self.cache.acl_rights_default = AccessControlList(self, [self.acl_rights_default])\n        self.cache.acl_rights_after = AccessControlList(self, [self.acl_rights_after])\n\n        action_prefix = self.url_prefix_action\n        if action_prefix is not None and action_prefix.endswith('/'): # make sure there is no trailing '/'\n            self.url_prefix_action = action_prefix[:-1]\n\n        if self.url_prefix_local is None:\n            self.url_prefix_local = self.url_prefix_static\n\n        if self.url_prefix_fckeditor is None:\n            self.url_prefix_fckeditor = self.url_prefix_local + '/applets/FCKeditor'\n\n        if self.secrets is None:  # admin did not setup a real secret, so make up something\n            self.secrets = self.calc_secrets()\n\n        secret_key_names = ['action/cache', 'wikiutil/tickets', 'xmlrpc/ProcessMail', 'xmlrpc/RemoteScript', ]\n        if self.jabber_enabled:\n            secret_key_names.append('jabberbot')\n        if self.textchas:\n            secret_key_names.append('security/textcha')\n\n        secret_min_length = 10\n        if isinstance(self.secrets, str):\n            if len(self.secrets) < secret_min_length:\n                raise error.ConfigurationError(\"The secrets = '...' wiki config setting is a way too short string (minimum length is %d chars)!\" % (\n                    secret_min_length))\n            # for lazy people: set all required secrets to same value\n            secrets = {}\n            for key in secret_key_names:\n                secrets[key] = self.secrets\n            self.secrets = secrets\n\n        # we check if we have all secrets we need and that they have minimum length\n        for secret_key_name in secret_key_names:\n            try:\n                secret = self.secrets[secret_key_name]\n                if len(secret) < secret_min_length:\n                    raise ValueError\n            except (KeyError, ValueError):\n                raise error.ConfigurationError(\"You must set a (at least %d chars long) secret string for secrets['%s']!\" % (\n                    secret_min_length, secret_key_name))\n\n        if self.password_scheme not in config.password_schemes_configurable:\n            raise error.ConfigurationError(\"not supported: password_scheme = %r\" % self.password_scheme)\n\n        if self.passlib_support:\n            try:\n                from passlib.context import CryptContext\n            except ImportError, err:\n                raise error.ConfigurationError(\"Wiki is configured to use passlib, but importing passlib failed [%s]!\" % str(err))\n            try:\n                self.cache.pwd_context = CryptContext(**self.passlib_crypt_context)\n            except (ValueError, KeyError, TypeError, UserWarning), err:\n                # ValueError: wrong configuration values\n                # KeyError: unsupported hash (seen with passlib 1.3)\n                # TypeError: configuration value has wrong type\n                raise error.ConfigurationError(\"passlib_crypt_context configuration is invalid [%s].\" % str(err))\n        elif self.password_scheme == '{PASSLIB}':\n            raise error.ConfigurationError(\"passlib_support is switched off, thus you can't use password_scheme = '{PASSLIB}'.\")\n\n    def calc_secrets(self):\n        \"\"\" make up some 'secret' using some config values \"\"\"\n        varnames = ['data_dir', 'data_underlay_dir', 'language_default',\n                    'mail_smarthost', 'mail_from', 'page_front_page',\n                    'theme_default', 'sitename', 'logo_string',\n                    'interwikiname', 'user_homewiki', 'acl_rights_before', ]\n        secret = ''\n        for varname in varnames:\n            var = getattr(self, varname, None)\n            if isinstance(var, (str, unicode)):\n                secret += repr(var)\n        return secret\n\n    _meta_dict = None\n    def load_meta_dict(self):\n        \"\"\" The meta_dict contains meta data about the wiki instance. \"\"\"\n        if self._meta_dict is None:\n            self._meta_dict = wikiutil.MetaDict(os.path.join(self.data_dir, 'meta'), self.cache_dir)\n        return self._meta_dict\n    meta_dict = property(load_meta_dict)\n\n    # lazily load iwid(_full)\n    def make_iwid_property(attr):\n        def getter(self):\n            if getattr(self, attr, None) is None:\n                self.load_IWID()\n            return getattr(self, attr)\n        return property(getter)\n    iwid = make_iwid_property(\"_iwid\")\n    iwid_full = make_iwid_property(\"_iwid_full\")\n\n    # lazily create a list of event handlers\n    _event_handlers = None\n    def make_event_handlers_prop():\n        def getter(self):\n            if self._event_handlers is None:\n                self._event_handlers = events.get_handlers(self)\n            return self._event_handlers\n\n        def setter(self, new_handlers):\n            self._event_handlers = new_handlers\n\n        return property(getter, setter)\n    event_handlers = make_event_handlers_prop()\n\n    def load_IWID(self):\n        \"\"\" Loads the InterWikiID of this instance. It is used to identify the instance\n            globally.\n            The IWID is available as cfg.iwid\n            The full IWID containing the interwiki name is available as cfg.iwid_full\n            This method is called by the property.\n        \"\"\"\n        try:\n            iwid = self.meta_dict['IWID']\n        except KeyError:\n            iwid = util.random_string(16).encode(\"hex\") + \"-\" + str(int(time.time()))\n            self.meta_dict['IWID'] = iwid\n            self.meta_dict.sync()\n\n        self._iwid = iwid\n        if self.interwikiname is not None:\n            self._iwid_full = packLine([iwid, self.interwikiname])\n        else:\n            self._iwid_full = packLine([iwid])\n\n    def _config_check(self):\n        \"\"\" Check namespace and warn about unknown names\n\n        Warn about names which are not used by DefaultConfig, except\n        modules, classes, _private or __magic__ names.\n\n        This check is disabled by default, when enabled, it will show an\n        error message with unknown names.\n        \"\"\"\n        unknown = ['\"%s\"' % name for name in dir(self)\n                  if not name.startswith('_') and\n                  name not in DefaultConfig.__dict__ and\n                  not isinstance(getattr(self, name), (type(sys), type(DefaultConfig)))]\n        if unknown:\n            msg = \"\"\"\nUnknown configuration options: %s.\n\nFor more information, visit HelpOnConfiguration. Please check your\nconfiguration for typos before requesting support or reporting a bug.\n\"\"\" % ', '.join(unknown)\n            raise error.ConfigurationError(msg)\n\n    def _decode(self):\n        \"\"\" Try to decode certain names, ignore unicode values\n\n        Try to decode str using utf-8. If the decode fail, raise FatalError.\n\n        Certain config variables should contain unicode values, and\n        should be defined with u'text' syntax. Python decode these if\n        the file have a 'coding' line.\n\n        This will allow utf-8 users to use simple strings using, without\n        using u'string'. Other users will have to use u'string' for\n        these names, because we don't know what is the charset of the\n        config files.\n        \"\"\"\n        charset = 'utf-8'\n        message = u\"\"\"\n\"%(name)s\" configuration variable is a string, but should be\nunicode. Use %(name)s = u\"value\" syntax for unicode variables.\n\nAlso check your \"-*- coding -*-\" line at the top of your configuration\nfile. It should match the actual charset of the configuration file.\n\"\"\"\n\n        decode_names = (\n            'sitename', 'interwikiname', 'user_homewiki', 'logo_string', 'navi_bar',\n            'page_front_page', 'page_category_regex', 'page_dict_regex',\n            'page_group_regex', 'page_template_regex', 'page_license_page',\n            'page_local_spelling_words', 'acl_rights_default',\n            'acl_rights_before', 'acl_rights_after', 'mail_from',\n            'quicklinks_default', 'subscribed_pages_default',\n            )\n\n        for name in decode_names:\n            attr = getattr(self, name, None)\n            if attr:\n                # Try to decode strings\n                if isinstance(attr, str):\n                    try:\n                        setattr(self, name, unicode(attr, charset))\n                    except UnicodeError:\n                        raise error.ConfigurationError(message %\n                                                       {'name': name})\n                # Look into lists and try to decode strings inside them\n                elif isinstance(attr, list):\n                    for i in xrange(len(attr)):\n                        item = attr[i]\n                        if isinstance(item, str):\n                            try:\n                                attr[i] = unicode(item, charset)\n                            except UnicodeError:\n                                raise error.ConfigurationError(message %\n                                                               {'name': name})\n\n    def _check_directories(self):\n        \"\"\" Make sure directories are accessible\n\n        Both data and underlay should exists and allow read, write and\n        execute.\n        \"\"\"\n        mode = os.F_OK | os.R_OK | os.W_OK | os.X_OK\n        for attr in ('data_dir', 'data_underlay_dir'):\n            path = getattr(self, attr)\n\n            # allow an empty underlay path or None\n            if attr == 'data_underlay_dir' and not path:\n                continue\n\n            path_pages = os.path.join(path, \"pages\")\n            if not (os.path.isdir(path_pages) and os.access(path_pages, mode)):\n                msg = \"\"\"\n%(attr)s \"%(path)s\" does not exist, or has incorrect ownership or\npermissions.\n\nMake sure the directory and the subdirectory \"pages\" are owned by the web\nserver and are readable, writable and executable by the web server user\nand group.\n\nIt is recommended to use absolute paths and not relative paths. Check\nalso the spelling of the directory name.\n\"\"\" % {'attr': attr, 'path': path, }\n                raise error.ConfigurationError(msg)\n\n    def _loadPluginModule(self):\n        \"\"\"\n        import all plugin modules\n\n        To be able to import plugin from arbitrary path, we have to load\n        the base package once using imp.load_module. Later, we can use\n        standard __import__ call to load plugins in this package.\n\n        Since each configured plugin path has unique plugins, we load the\n        plugin packages as \"moin_plugin_<sha1(path)>.plugin\".\n        \"\"\"\n        import imp\n\n        plugin_dirs = [self.plugin_dir] + self.plugin_dirs\n        self._plugin_modules = []\n\n        try:\n            # Lock other threads while we check and import\n            imp.acquire_lock()\n            try:\n                for pdir in plugin_dirs:\n                    csum = 'p_%s' % hashlib.new('sha1', pdir).hexdigest()\n                    modname = '%s.%s' % (self.siteid, csum)\n                    # If the module is not loaded, try to load it\n                    if not modname in sys.modules:\n                        # Find module on disk and try to load - slow!\n                        abspath = os.path.abspath(pdir)\n                        parent_dir, pname = os.path.split(abspath)\n                        fp, path, info = imp.find_module(pname, [parent_dir])\n                        try:\n                            # Load the module and set in sys.modules\n                            module = imp.load_module(modname, fp, path, info)\n                            setattr(sys.modules[self.siteid], 'csum', module)\n                        finally:\n                            # Make sure fp is closed properly\n                            if fp:\n                                fp.close()\n                    if modname not in self._plugin_modules:\n                        self._plugin_modules.append(modname)\n            finally:\n                imp.release_lock()\n        except ImportError, err:\n            msg = \"\"\"\nCould not import plugin package \"%(path)s\" because of ImportError:\n%(err)s.\n\nMake sure your data directory path is correct, check permissions, and\nthat the data/plugin directory has an __init__.py file.\n\"\"\" % {\n    'path': pdir,\n    'err': str(err),\n}\n            raise error.ConfigurationError(msg)\n\n    def _fillDicts(self):\n        \"\"\" fill config dicts\n\n        Fills in missing dict keys of derived user config by copying\n        them from this base class.\n        \"\"\"\n        # user checkbox defaults\n        for key, value in DefaultConfig.user_checkbox_defaults.items():\n            if key not in self.user_checkbox_defaults:\n                self.user_checkbox_defaults[key] = value\n\n    def __getitem__(self, item):\n        \"\"\" Make it possible to access a config object like a dict \"\"\"\n        return getattr(self, item)\n\n\nclass DefaultConfig(ConfigFunctionality):\n    \"\"\" Configuration base class with default config values\n        (added below)\n    \"\"\"\n    # Do not add anything into this class. Functionality must\n    # be added above to avoid having the methods show up in\n    # the WikiConfig macro. Settings must be added below to\n    # the options dictionary.\n\n_default_backlink_method = lambda cfg, req: 'backlink' if req.user.valid else 'pagelink'\n\n\ndef _default_password_checker(cfg, request, username, password,\n                              min_length=6, min_different=4):\n    \"\"\" Check if a password is secure enough.\n        We use a built-in check to get rid of the worst passwords.\n\n        We do NOT use cracklib / python-crack here any more because it is\n        not thread-safe (we experienced segmentation faults when using it).\n\n        If you don't want to check passwords, use password_checker = None.\n\n        @return: None if there is no problem with the password,\n                 some unicode object with an error msg, if the password is problematic.\n    \"\"\"\n    _ = request.getText\n    # in any case, do a very simple built-in check to avoid the worst passwords\n    if len(password) < min_length:\n        return _(\"Password is too short.\")\n    if len(set(password)) < min_different:\n        return _(\"Password has not enough different characters.\")\n\n    username_lower = username.lower()\n    password_lower = password.lower()\n    if username in password or password in username or \\\n       username_lower in password_lower or password_lower in username_lower:\n        return _(\"Password is too easy (password contains name or name contains password).\")\n\n    keyboards = (ur\"`1234567890-=qwertyuiop[]\\asdfghjkl;'zxcvbnm,./\", # US kbd\n                 ur\"^1234567890\u00df\u00b4qwertzuiop\u00fc+asdfghjkl\u00f6\u00e4#yxcvbnm,.-\", # german kbd\n                ) # add more keyboards!\n    for kbd in keyboards:\n        rev_kbd = kbd[::-1]\n        if password in kbd or password in rev_kbd or \\\n           password_lower in kbd or password_lower in rev_kbd:\n            return _(\"Password is too easy (keyboard sequence).\")\n    return None\n\n\nclass DefaultExpression(object):\n    def __init__(self, exprstr):\n        self.text = exprstr\n        self.value = eval(exprstr)\n\n\n#\n# Options that are not prefixed automatically with their\n# group name, see below (at the options dict) for more\n# information on the layout of this structure.\n#\noptions_no_group_name = {\n  # =========================================================================\n  'attachment_extension': (\"Mapping of attachment extensions to actions\", None,\n  (\n   ('extensions_mapping',\n       {'.tdraw': {'modify': 'twikidraw'},\n        '.adraw': {'modify': 'anywikidraw'},\n       }, \"file extension -> do -> action\"),\n  )),\n  # ==========================================================================\n  'datastruct': ('Datastruct settings', None, (\n    ('dicts', lambda cfg, request: datastruct.WikiDicts(request),\n     \"function f(cfg, request) that returns a backend which is used to access dicts definitions.\"),\n    ('groups', lambda cfg, request: datastruct.WikiGroups(request),\n     \"function f(cfg, request) that returns a backend which is used to access groups definitions.\"),\n  )),\n  # ==========================================================================\n  'session': ('Session settings', \"Session-related settings, see HelpOnSessions.\", (\n    ('session_service', DefaultExpression('web.session.FileSessionService()'),\n     \"The session service.\"),\n    ('cookie_name', None,\n     'The variable part of the session cookie name. (None = determine from URL, siteidmagic = use siteid, any other string = use that)'),\n    ('cookie_secure', None,\n     'Use secure cookie. (None = auto-enable secure cookie for https, True = ever use secure cookie, False = never use secure cookie).'),\n    ('cookie_httponly', False,\n     'Use a httponly cookie that can only be used by the server, not by clientside scripts.'),\n    ('cookie_domain', None,\n     'Domain used in the session cookie. (None = do not specify domain).'),\n    ('cookie_path', None,\n     'Path used in the session cookie (None = auto-detect). Please only set if you know exactly what you are doing.'),\n    ('cookie_lifetime', (0, 12),\n     'Session lifetime [h] of (anonymous, logged-in) users (see HelpOnSessions for details).'),\n  )),\n  # ==========================================================================\n  'auth': ('Authentication / Authorization / Security settings', None, (\n    ('superuser', [],\n     \"List of trusted user names with wiki system administration super powers (not to be confused with ACL admin rights!). Used for e.g. software installation, language installation via SystemPagesSetup and more. See also HelpOnSuperUser.\"),\n    ('auth', DefaultExpression('[MoinAuth()]'),\n     \"list of auth objects, to be called in this order (see HelpOnAuthentication)\"),\n    ('auth_methods_trusted', ['http', 'given', 'xmlrpc_applytoken'], # Note: 'http' auth method is currently just a redirect to 'given'\n     'authentication methods for which users should be included in the special \"Trusted\" ACL group.'),\n    ('secrets', None, \"\"\"Either a long shared secret string used for multiple purposes or a dict {\"purpose\": \"longsecretstring\", ...} for setting up different shared secrets for different purposes. If you don't setup own secret(s), a secret string will be auto-generated from other config settings.\"\"\"),\n    ('DesktopEdition',\n     False,\n     \"if True, give all local users special powers - ''only use this for a local desktop wiki!''\"),\n    ('SecurityPolicy',\n     None,\n     \"Class object hook for implementing security restrictions or relaxations\"),\n    ('actions_superuser',\n     ['newaccount',  # spam bots create tons of user accounts, so better allow it only for superuser\n     ],\n     \"Restrict actions to superuser only (list of strings)\"),\n    ('actions_excluded',\n     ['xmlrpc',  # we do not want wiki admins unknowingly offering xmlrpc service\n      'MyPages',  # only works when used with a non-default SecurityPolicy (e.g. autoadmin)\n      'CopyPage',  # has questionable behaviour regarding subpages a user can't read, but can copy\n      ],\n     \"Exclude unwanted actions (list of strings)\"),\n\n    ('allow_xslt', False,\n        \"if True, enables XSLT processing via 4Suite (Note that this is DANGEROUS. It enables anyone who can edit the wiki to get '''read/write access to your filesystem as the moin process uid/gid''' and to insert '''arbitrary HTML''' into your wiki pages, which is why this setting defaults to `False` (XSLT disabled). Do not set it to other values, except if you know what you do and if you have very trusted editors only).\"),\n\n    ('password_checker', DefaultExpression('_default_password_checker'),\n     'checks whether a password is acceptable (default check is length >= 6, at least 4 different chars, no keyboard sequence, not username used somehow (you can switch this off by using `None`)'),\n\n    ('password_scheme', '{PASSLIB}',\n     'Either \"{PASSLIB}\" (default) to use passlib for creating and upgrading password hashes (see also passlib_crypt_context for passlib configuration), '\n     'or \"{SSHA}\" (or any other of the builtin password schemes) to not use passlib (not recommended).'),\n\n    ('passlib_support', True,\n     'If True (default), import passlib and support password hashes offered by it.'),\n\n    ('passlib_crypt_context', dict(\n        # schemes we want to support (or deprecated schemes for which we still have\n        # hashes in our storage).\n        # note: bcrypt: we did not include it as it needs additional code (that is not pure python\n        #       and thus either needs compiling or installing platform-specific binaries) and\n        #       also there was some bcrypt issue in passlib < 1.5.3.\n        #       pbkdf2_sha512: not included as it needs at least passlib 1.4.0\n        #       sha512_crypt: supported since passlib 1.3.0 (first public release)\n        schemes=[\"sha512_crypt\", ],\n        # default scheme for creating new pw hashes (if not given, passlib uses first from schemes)\n        #default=\"sha512_crypt\",\n        # deprecated schemes get auto-upgraded to the default scheme at login\n        # time or when setting a password (including doing a moin account pwreset).\n        # for passlib >= 1.6, giving [\"auto\"] means that all schemes except the default are deprecated:\n        #deprecated=[\"auto\"],\n        # to support also older passlib versions, rather give a explicit list:\n        #deprecated=[],\n        # vary rounds parameter randomly when creating new hashes...\n        #all__vary_rounds=0.1,\n    ),\n    \"passlib CryptContext arguments, see passlib docs\"),\n\n    ('recovery_token_lifetime', 12,\n     'how long the password recovery token is valid [h]'),\n  )),\n  # ==========================================================================\n  'spam_leech_dos': ('Anti-Spam/Leech/DOS',\n  'These settings help limiting ressource usage and avoiding abuse.',\n  (\n    ('hosts_deny', [], \"List of denied IPs; if an IP ends with a dot, it denies a whole subnet (class A, B or C)\"),\n    ('surge_action_limits',\n     {# allow max. <count> <action> requests per <dt> secs\n        # action: (count, dt)\n        'all': (30, 30), # all requests (except cache/AttachFile action) count for this limit\n        'default': (30, 60), # default limit for actions without a specific limit\n        'show': (30, 60),\n        'recall': (10, 120),\n        'raw': (20, 40),  # some people use this for css\n        'diff': (30, 60),\n        'fullsearch': (10, 120),\n        'edit': (30, 300), # can be lowered after making preview different from edit\n        'rss_rc': (1, 60),\n        # The following actions are often used for images - to avoid pages with lots of images\n        # (like photo galleries) triggering surge protection, we assign rather high limits:\n        'AttachFile': (300, 30),\n        'cache': (600, 30), # cache action is very cheap/efficient\n        # special stuff to prevent someone trying lots of usernames / passwords to log in.\n        # we keep this commented / disabled so that this feature does not get activated by default\n        # (if somebody does not override surge_action_limits with own values):\n        #'auth-ip': (10, 3600),  # same remote ip (any name)\n        #'auth-name': (10, 3600),  # same name (any remote ip)\n     },\n     \"Surge protection tries to deny clients causing too much load/traffic, see HelpOnConfiguration/SurgeProtection.\"),\n    ('surge_lockout_time', 3600, \"time [s] someone gets locked out when ignoring the warnings\"),\n\n    ('textchas', None,\n     \"Spam protection setup using site-specific questions/answers, see HelpOnSpam.\"),\n    ('textchas_disabled_group', None,\n     \"Name of a group of trusted users who do not get asked !TextCha questions.\"),\n    ('textchas_expiry_time', 600,\n     \"Time [s] for a !TextCha to expire.\"),\n\n    ('antispam_master_url', \"http://master.moinmo.in/?action=xmlrpc2\",\n     \"where antispam security policy fetches spam pattern updates (if it is enabled)\"),\n\n    # a regex of HTTP_USER_AGENTS that should be excluded from logging\n    # and receive a FORBIDDEN for anything except viewing a page\n    # list must not contain 'java' because of twikidraw wanting to save drawing uses this useragent\n    ('ua_spiders',\n     ('archiver|bingbot|cfetch|charlotte|crawler|gigabot|googlebot|heritrix|holmes|htdig|httrack|httpunit|'\n      'intelix|jeeves|larbin|leech|libwww-perl|linkbot|linkmap|linkwalk|litefinder|mercator|'\n      'microsoft.url.control|mirror| mj12bot|msnbot|msrbot|neomo|nutbot|omniexplorer|puf|robot|scooter|seekbot|'\n      'sherlock|slurp|sitecheck|snoopy|spider|teleport|twiceler|voilabot|voyager|webreaper|wget|yeti'),\n     \"A regex of HTTP_USER_AGENTs that should be excluded from logging and are not allowed to use actions.\"),\n\n    ('unzip_single_file_size', 2.0 * 1000 ** 2,\n     \"max. size of a single file in the archive which will be extracted [bytes]\"),\n    ('unzip_attachments_space', 200.0 * 1000 ** 2,\n     \"max. total amount of bytes can be used to unzip files [bytes]\"),\n    ('unzip_attachments_count', 101,\n     \"max. number of files which are extracted from the zip file\"),\n  )),\n  # ==========================================================================\n  'style': ('Style / Theme / UI related',\n  'These settings control how the wiki user interface will look like.',\n  (\n    ('sitename', u'Untitled Wiki',\n     \"Short description of your wiki site, displayed below the logo on each page, and used in RSS documents as the channel title [Unicode]\"),\n    ('interwikiname', None, \"unique and stable InterWiki name (prefix, moniker) of the site [Unicode], or None\"),\n    ('logo_string', None, \"The wiki logo top of page, HTML is allowed (`<img>` is possible as well) [Unicode]\"),\n    ('html_pagetitle', None, \"Allows you to set a specific HTML page title (if None, it defaults to the value of `sitename`)\"),\n    ('navi_bar', [u'RecentChanges', u'FindPage', u'HelpContents', ],\n     'Most important page names. Users can add more names in their quick links in user preferences. To link to URL, use `u\"[[url|link title]]\"`, to use a shortened name for long page name, use `u\"[[LongLongPageName|title]]\"`. [list of Unicode strings]'),\n\n    ('theme_default', 'modernized',\n     \"the name of the theme that is used by default (see HelpOnThemes)\"),\n    ('theme_force', False,\n     \"if True, do not allow to change the theme\"),\n\n    ('stylesheets', [],\n     \"List of tuples (media, csshref) to insert after theme css, before user css, see HelpOnThemes.\"),\n\n    ('supplementation_page', False,\n     \"if True, show a link to the supplementation page in the theme\"),\n    ('supplementation_page_name', u'Discussion',\n     \"default name of the supplementation (sub)page [unicode]\"),\n    ('supplementation_page_template', u'DiscussionTemplate',\n     \"default template used for creation of the supplementation page [unicode]\"),\n\n    ('interwiki_preferred', [], \"In dialogues, show those wikis at the top of the list.\"),\n    ('sistersites', [], \"list of tuples `('WikiName', 'sisterpagelist_fetch_url')`\"),\n\n    ('trail_size', 5,\n     \"Number of pages in the trail of visited pages\"),\n\n    ('page_footer1', '', \"Custom HTML markup sent ''before'' the system footer.\"),\n    ('page_footer2', '', \"Custom HTML markup sent ''after'' the system footer.\"),\n    ('page_header1', '', \"Custom HTML markup sent ''before'' the system header / title area but after the body tag.\"),\n    ('page_header2', '', \"Custom HTML markup sent ''after'' the system header / title area (and body tag).\"),\n\n    ('changed_time_fmt', '%H:%M', \"Time format used on Recent``Changes for page edits within the last 24 hours\"),\n    ('date_fmt', '%Y-%m-%d', \"System date format, used mostly in Recent``Changes\"),\n    ('datetime_fmt', '%Y-%m-%d %H:%M:%S', 'Default format for dates and times (when the user has no preferences or chose the \"default\" date format)'),\n    ('chart_options', None, \"If you have gdchart, use something like chart_options = {'width': 720, 'height': 540}\"),\n\n    ('edit_bar', ['Edit', 'Comments', 'Discussion', 'Info', 'Subscribe', 'Quicklink', 'Attachments', 'ActionsMenu'],\n     'list of edit bar entries'),\n    ('history_count', (100, 200, 5, 10, 25, 50), \"Number of revisions shown for info/history action (default_count_shown, max_count_shown, [other values shown as page size choices]). At least first two values (default and maximum) should be provided. If additional values are provided, user will be able to change number of items per page in the UI.\"),\n    ('history_paging', True, \"Enable paging functionality for info action's history display.\"),\n\n    ('show_hosts', True,\n     \"if True, show host names and IPs. Set to False to hide them.\"),\n    ('show_interwiki', False,\n     \"if True, let the theme display your interwiki name\"),\n    ('show_names', True,\n     \"if True, show user names in the revision history and on Recent``Changes. Set to False to hide them.\"),\n    ('show_section_numbers', False,\n     'show section numbers in headings by default'),\n    ('show_timings', False, \"show some timing values at bottom of a page\"),\n    ('show_version', False, \"show moin's version at the bottom of a page\"),\n    ('show_rename_redirect', False, \"if True, offer creation of redirect pages when renaming wiki pages\"),\n\n    ('backlink_method', DefaultExpression('_default_backlink_method'),\n     \"function determining how the (last part of the) pagename should be rendered in the title area\"),\n\n    ('packagepages_actions_excluded',\n     ['setthemename',  # related to questionable theme stuff, see below\n      'copythemefile', # maybe does not work, e.g. if no fs write permissions or real theme file path is unknown to moin\n      'installplugin', # code installation, potentially dangerous\n      'renamepage',    # dangerous with hierarchical acls\n      'deletepage',    # dangerous with hierarchical acls\n      'delattachment', # dangerous, no revisioning\n     ],\n     'list with excluded package actions (e.g. because they are dangerous / questionable)'),\n\n    ('page_credits',\n     [\n       '<a href=\"http://moinmo.in/\" title=\"This site uses the MoinMoin Wiki software.\">MoinMoin Powered</a>',\n       '<a href=\"http://moinmo.in/Python\" title=\"MoinMoin is written in Python.\">Python Powered</a>',\n       '<a href=\"http://moinmo.in/GPL\" title=\"MoinMoin is GPL licensed.\">GPL licensed</a>',\n       '<a href=\"http://validator.w3.org/check?uri=referer\" title=\"Click here to validate this page.\">Valid HTML 4.01</a>',\n     ],\n     'list with html fragments with logos or strings for crediting.'),\n\n    # These icons will show in this order in the iconbar, unless they\n    # are not relevant, e.g email icon when the wiki is not configured\n    # for email.\n    ('page_iconbar', [\"up\", \"edit\", \"view\", \"diff\", \"info\", \"subscribe\", \"raw\", \"print\", ],\n     'list of icons to show in iconbar, valid values are only those in page_icons_table. Available only in classic theme.'),\n\n    # Standard buttons in the iconbar\n    ('page_icons_table',\n     {\n        # key           pagekey, querystr dict, title, icon-key\n        'diff': ('page', {'action': 'diff'}, _(\"Diffs\"), \"diff\"),\n        'info': ('page', {'action': 'info'}, _(\"Info\"), \"info\"),\n        'edit': ('page', {'action': 'edit'}, _(\"Edit\"), \"edit\"),\n        'unsubscribe': ('page', {'action': 'unsubscribe'}, _(\"UnSubscribe\"), \"unsubscribe\"),\n        'subscribe': ('page', {'action': 'subscribe'}, _(\"Subscribe\"), \"subscribe\"),\n        'raw': ('page', {'action': 'raw'}, _(\"Raw\"), \"raw\"),\n        'xml': ('page', {'action': 'show', 'mimetype': 'text/xml'}, _(\"XML\"), \"xml\"),\n        'print': ('page', {'action': 'print'}, _(\"Print\"), \"print\"),\n        'view': ('page', {}, _(\"View\"), \"view\"),\n        'up': ('page_parent_page', {}, _(\"Up\"), \"up\"),\n     },\n     \"dict of {'iconname': (url, title, icon-img-key), ...}. Available only in classic theme.\"),\n    ('show_highlight_msg', False, \"Show message that page has highlighted text \"\n                                  \"and provide link to non-highlighted \"\n                                  \"version.\"),\n  )),\n  # ==========================================================================\n  'editor': ('Editor related', None, (\n    ('editor_default', 'text', \"Editor to use by default, 'text' or 'gui'\"),\n    ('editor_force', True, \"if True, force using the default editor\"),\n    ('editor_ui', 'theonepreferred', \"Editor choice shown on the user interface, 'freechoice' or 'theonepreferred'\"),\n    ('page_license_enabled', False, 'if True, show a license hint in page editor.'),\n    ('page_license_page', u'WikiLicense', 'Page linked from the license hint. [Unicode]'),\n    ('edit_locking', 'warn 10', \"Editor locking policy: `None`, `'warn <timeout in minutes>'`, or `'lock <timeout in minutes>'`\"),\n    ('edit_ticketing', True, None),\n    ('edit_rows', 20, \"Default height of the edit box\"),\n    ('comment_required', False, \"if True, only allow saving if a comment is filled in\"),\n\n  )),\n  # ==========================================================================\n  'paths': ('Paths', None, (\n    ('data_dir', './data/', \"Path to the data directory containing your (locally made) wiki pages.\"),\n    ('data_underlay_dir', './underlay/', \"Path to the underlay directory containing distribution system and help pages.\"),\n    ('cache_dir', None, \"Directory for caching, by default computed from `data_dir`/cache.\"),\n    ('session_dir', None, \"Directory for session storage, by default computed to be `cache_dir`/__session__.\"),\n    ('user_dir', None, \"Directory for user storage, by default computed to be `data_dir`/user.\"),\n    ('plugin_dir', None, \"Plugin directory, by default computed to be `data_dir`/plugin.\"),\n    ('plugin_dirs', [], \"Additional plugin directories.\"),\n\n    ('docbook_html_dir', r\"/usr/share/xml/docbook/stylesheet/nwalsh/html/\",\n     'Path to the directory with the Docbook to HTML XSLT files (optional, used by the docbook parser). The default value is correct for Debian Etch.'),\n    ('shared_intermap', None,\n     \"Path to a file containing global InterWiki definitions (or a list of such filenames)\"),\n  )),\n  # ==========================================================================\n  'urls': ('URLs', None, (\n    # includes the moin version number, so we can have a unlimited cache lifetime\n    # for the static stuff. if stuff changes on version upgrade, url will change\n    # immediately and we have no problem with stale caches.\n    ('url_prefix_static', config.url_prefix_static,\n     \"used as the base URL for icons, css, etc. - includes the moin version number and changes on every release. This replaces the deprecated and sometimes confusing `url_prefix = '/wiki'` setting.\"),\n    ('url_prefix_local', None,\n     \"used as the base URL for some Javascript - set this to a URL on same server as the wiki if your url_prefix_static points to a different server.\"),\n    ('url_prefix_fckeditor', None,\n     \"used as the base URL for FCKeditor - similar to url_prefix_local, but just for FCKeditor.\"),\n\n    ('url_prefix_action', None,\n     \"Use 'action' to enable action URL generation to be compatible with robots.txt. It will generate .../action/info/PageName?action=info then. Recommended for internet wikis.\"),\n\n    ('notification_bot_uri', None, \"URI of the Jabber notification bot.\"),\n\n    ('url_mappings', {},\n     \"lookup table to remap URL prefixes (dict of {{{'prefix': 'replacement'}}}); especially useful in intranets, when whole trees of externally hosted documents move around\"),\n\n  )),\n  # ==========================================================================\n  'pages': ('Special page names', None, (\n    ('page_front_page', u'LanguageSetup',\n     \"Name of the front page. We don't expect you to keep the default. Just read LanguageSetup in case you're wondering... [Unicode]\"),\n\n    # the following regexes should match the complete name when used in free text\n    # the group 'all' shall match all, while the group 'key' shall match the key only\n    # e.g. CategoryFoo -> group 'all' ==  CategoryFoo, group 'key' == Foo\n    # moin's code will add ^ / $ at beginning / end when needed\n    ('page_category_regex', ur'(?P<all>Category(?P<key>(?!Template)\\S+))',\n     'Pagenames exactly matching this regex are regarded as Wiki categories [Unicode]'),\n    ('page_dict_regex', ur'(?P<all>(?P<key>\\S+)Dict)',\n     'Pagenames exactly matching this regex are regarded as pages containing variable dictionary definitions [Unicode]'),\n    ('page_group_regex', ur'(?P<all>(?P<key>\\S+)Group)',\n     'Pagenames exactly matching this regex are regarded as pages containing group definitions [Unicode]'),\n    ('page_template_regex', ur'(?P<all>(?P<key>\\S+)Template)',\n     'Pagenames exactly matching this regex are regarded as pages containing templates for new pages [Unicode]'),\n\n    ('page_local_spelling_words', u'LocalSpellingWords',\n     'Name of the page containing user-provided spellchecker words [Unicode]'),\n  )),\n  # ==========================================================================\n  'user': ('User Preferences related', None, (\n    ('quicklinks_default', [],\n     'List of preset quicklinks for a newly created user accounts. Existing accounts are not affected by this option whereas changes in navi_bar do always affect existing accounts. Preset quicklinks can be removed by the user in the user preferences menu, navi_bar settings not.'),\n    ('subscribed_pages_default', [],\n     \"List of pagenames used for presetting page subscriptions for newly created user accounts.\"),\n\n    ('email_subscribed_events_default',\n     [\n        PageChangedEvent.__name__,\n        PageRenamedEvent.__name__,\n        PageDeletedEvent.__name__,\n        PageCopiedEvent.__name__,\n        PageRevertedEvent.__name__,\n        FileAttachedEvent.__name__,\n     ], None),\n    ('jabber_subscribed_events_default', [], None),\n\n    ('tz_offset', 0.0,\n     \"default time zone offset in hours from UTC\"),\n\n    ('userprefs_disabled', [],\n     \"Disable the listed user preferences plugins.\"),\n  )),\n  # ==========================================================================\n  'various': ('Various', None, (\n    ('bang_meta', True, 'if True, enable {{{!NoWikiName}}} markup'),\n    ('caching_formats', ['text_html'], \"output formats that are cached; set to [] to turn off caching (useful for development)\"),\n\n    ('config_check_enabled', False, \"if True, check configuration for unknown settings.\"),\n\n    ('default_markup', 'wiki', 'Default page parser / format (name of module in `MoinMoin.parser`)'),\n\n    ('html_head', '', \"Additional <HEAD> tags, see HelpOnThemes.\"),\n    ('html_head_queries', '<meta name=\"robots\" content=\"noindex,nofollow\">\\n',\n     \"Additional <HEAD> tags for requests with query strings, like actions.\"),\n    ('html_head_posts', '<meta name=\"robots\" content=\"noindex,nofollow\">\\n',\n     \"Additional <HEAD> tags for POST requests.\"),\n    ('html_head_index', '<meta name=\"robots\" content=\"index,follow\">\\n',\n     \"Additional <HEAD> tags for some few index pages.\"),\n    ('html_head_normal', '<meta name=\"robots\" content=\"index,nofollow\">\\n',\n     \"Additional <HEAD> tags for most normal pages.\"),\n\n    ('language_default', 'en', \"Default language for user interface and page content, see HelpOnLanguages.\"),\n    ('language_ignore_browser', False, \"if True, ignore user's browser language settings, see HelpOnLanguages.\"),\n\n    ('log_remote_addr', True,\n     \"if True, log the remote IP address (and maybe hostname).\"),\n    ('log_reverse_dns_lookups', False,\n     \"if True, do a reverse DNS lookup on page SAVE.\"),\n    ('log_timing', False,\n     \"if True, add timing infos to the log output to analyse load conditions\"),\n    ('log_events_format', 1,\n     \"0 = no events logging, 1 = standard format (like <= 1.9.7) [default], 2 = extended format\"),\n\n    # some dangerous mimetypes (we don't use \"content-disposition: inline\" for them when a user\n    # downloads such attachments, because the browser might execute e.g. Javascript contained\n    # in the HTML and steal your moin session cookie or do other nasty stuff)\n    ('mimetypes_xss_protect',\n     [\n       'text/html',\n       'application/x-shockwave-flash',\n       'application/xhtml+xml',\n     ],\n     '\"content-disposition: inline\" isn\\'t used for them when a user downloads such attachments'),\n\n    ('mimetypes_embed',\n     [\n       'application/x-dvi',\n       'application/postscript',\n       'application/pdf',\n       'application/ogg',\n       'application/vnd.visio',\n       'image/x-ms-bmp',\n       'image/svg+xml',\n       'image/tiff',\n       'image/x-photoshop',\n       'audio/mpeg',\n       'audio/midi',\n       'audio/x-wav',\n       'video/fli',\n       'video/mpeg',\n       'video/quicktime',\n       'video/x-msvideo',\n       'chemical/x-pdb',\n       'x-world/x-vrml',\n     ],\n     'mimetypes that can be embedded by the [[HelpOnMacros/EmbedObject|EmbedObject macro]]'),\n\n    ('refresh', None,\n     \"refresh = (minimum_delay_s, targets_allowed) enables use of `#refresh 5 PageName` processing instruction, targets_allowed must be either `'internal'` or `'external'`\"),\n    ('rss_cache', 60, \"suggested caching time for Recent''''''Changes RSS, in second\"),\n\n    ('search_results_per_page', 25, \"Number of hits shown per page in the search results\"),\n\n    ('siteid', 'default', None),\n    ('xmlrpc_overwrite_user', True, \"Overwrite authenticated user at start of xmlrpc code\"),\n  )),\n}\n\n#\n# The 'options' dict carries default MoinMoin options. The dict is a\n# group name to tuple mapping.\n# Each group tuple consists of the following items:\n#   group section heading, group help text, option list\n#\n# where each 'option list' is a tuple or list of option tuples\n#\n# each option tuple consists of\n#   option name, default value, help text\n#\n# All the help texts will be displayed by the WikiConfigHelp() macro.\n#\n# Unlike the options_no_group_name dict, option names in this dict\n# are automatically prefixed with \"group name '_'\" (i.e. the name of\n# the group they are in and an underscore), e.g. the 'hierarchic'\n# below creates an option called \"acl_hierarchic\".\n#\n# If you need to add a complex default expression that results in an\n# object and should not be shown in the __repr__ form in WikiConfigHelp(),\n# you can use the DefaultExpression class, see 'auth' above for example.\n#\n#\noptions = {\n    'acl': ('Access control lists',\n    'ACLs control who may do what, see HelpOnAccessControlLists.',\n    (\n      ('hierarchic', False, 'True to use hierarchical ACLs'),\n      ('rights_default', u\"Trusted:read,write,delete,revert Known:read All:read\",\n       \"ACL used if no ACL is specified on the page\"),\n      ('rights_before', u\"\",\n       \"ACL that is processed before the on-page/default ACL\"),\n      ('rights_after', u\"\",\n       \"ACL that is processed after the on-page/default ACL\"),\n      ('rights_valid', ['read', 'write', 'delete', 'revert', 'admin'],\n       \"Valid tokens for right sides of ACL entries.\"),\n    )),\n\n    'xapian': ('Xapian search', \"Configuration of the Xapian based indexed search, see HelpOnXapian.\", (\n      ('search', False,\n       \"True to enable the fast, indexed search (based on the Xapian search library)\"),\n      ('index_dir', None,\n       \"Directory where the Xapian search index is stored (None = auto-configure wiki local storage)\"),\n      ('stemming', False,\n       \"True to enable Xapian word stemmer usage for indexing / searching.\"),\n      ('index_history', False,\n       \"True to enable indexing of non-current page revisions.\"),\n    )),\n\n    'user': ('Users / User settings', None, (\n      ('email_unique', True,\n       \"if True, check email addresses for uniqueness and don't accept duplicates.\"),\n      ('jid_unique', True,\n       \"if True, check Jabber IDs for uniqueness and don't accept duplicates.\"),\n\n      ('homewiki', u'Self',\n       \"interwiki name of the wiki where the user home pages are located [Unicode] - useful if you have ''many'' users. You could even link to nonwiki \\\"user pages\\\" if the wiki username is in the target URL.\"),\n\n      ('checkbox_fields',\n       [\n        ('mailto_author', lambda _: _('Publish my email (not my wiki homepage) in author info')),\n        ('edit_on_doubleclick', lambda _: _('Open editor on double click')),\n        ('remember_last_visit', lambda _: _('After login, jump to last visited page')),\n        ('show_comments', lambda _: _('Show comment sections')),\n        ('show_nonexist_qm', lambda _: _('Show question mark for non-existing pagelinks')),\n        ('show_page_trail', lambda _: _('Show page trail')),\n        ('show_toolbar', lambda _: _('Show icon toolbar')),\n        ('show_topbottom', lambda _: _('Show top/bottom links in headings')),\n        ('show_fancy_diff', lambda _: _('Show fancy diffs')),\n        ('wikiname_add_spaces', lambda _: _('Add spaces to displayed wiki names')),\n        ('remember_me', lambda _: _('Remember login information')),\n\n        ('disabled', lambda _: _('Disable this account forever')),\n        # if an account is disabled, it may be used for looking up\n        # id -> username for page info and recent changes, but it\n        # is not usable for the user any more:\n       ],\n       \"Describes user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_defaults',\n       {\n        'mailto_author': 0,\n        'edit_on_doubleclick': 1,\n        'remember_last_visit': 0,\n        'show_comments': 0,\n        'show_nonexist_qm': False,\n        'show_page_trail': 1,\n        'show_toolbar': 1,\n        'show_topbottom': 0,\n        'show_fancy_diff': 1,\n        'wikiname_add_spaces': 0,\n        'remember_me': 1,\n       },\n       \"Defaults for user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_disable', [],\n       \"Disable user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_remove', [],\n       \"Remove user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('form_fields',\n       [\n        ('name', _('Name'), \"text\", \"36\", _(\"(Use FirstnameLastname)\")),\n        ('aliasname', _('Alias-Name'), \"text\", \"36\", ''),\n        ('email', _('Email'), \"text\", \"36\", ''),\n        ('jid', _('Jabber ID'), \"text\", \"36\", ''),\n        ('css_url', _('User CSS URL'), \"text\", \"40\", _('(Leave it empty for disabling user CSS)')),\n        ('edit_rows', _('Editor size'), \"text\", \"3\", ''),\n       ],\n       None),\n\n      ('form_defaults',\n       {# key: default - do NOT remove keys from here!\n        'name': '',\n        'aliasname': '',\n        'password': '',\n        'password2': '',\n        'email': '',\n        'jid': '',\n        'css_url': '',\n        'edit_rows': \"20\",\n       },\n       None),\n\n      ('form_disable', [], \"list of field names used to disable user preferences form fields\"),\n\n      ('form_remove', [], \"list of field names used to remove user preferences form fields\"),\n\n      ('transient_fields',\n       ['id', 'valid', 'may', 'auth_username', 'password', 'password2', 'auth_method', 'auth_attribs', ],\n       \"User object attributes that are not persisted to permanent storage (internal use).\"),\n    )),\n\n    'openidrp': ('OpenID Relying Party',\n        'These settings control the built-in OpenID Relying Party (client).',\n    (\n      ('allowed_op', [], \"List of forced providers\"),\n    )),\n\n    'openid_server': ('OpenID Server',\n        'These settings control the built-in OpenID Identity Provider (server).',\n    (\n      ('enabled', False, \"True to enable the built-in OpenID server.\"),\n      ('restricted_users_group', None, \"If set to a group name, the group members are allowed to use the wiki as an OpenID provider. (None = allow for all users)\"),\n      ('enable_user', False, \"If True, the OpenIDUser processing instruction is allowed.\"),\n    )),\n\n    'mail': ('Mail settings',\n        'These settings control outgoing and incoming email from and to the wiki.',\n    (\n      ('from', None, \"Used as From: address for generated mail.\"),\n      ('login', None, \"'username userpass' for SMTP server authentication (None = don't use auth).\"),\n      ('smarthost', None, \"Address of SMTP server to use for sending mail (None = don't use SMTP server).\"),\n      ('sendmail', None, \"sendmail command to use for sending mail (None = don't use sendmail)\"),\n\n      ('import_subpage_template', u\"$from-$date-$subject\", \"Create subpages using this template when importing mail.\"),\n      ('import_pagename_search', ['subject', 'to', ], \"Where to look for target pagename specification.\"),\n      ('import_pagename_envelope', u\"%s\", \"Use this to add some fixed prefix/postfix to the generated target pagename.\"),\n      ('import_pagename_regex', r'\\[\\[([^\\]]*)\\]\\]', \"Regular expression used to search for target pagename specification.\"),\n      ('import_wiki_addrs', [], \"Target mail addresses to consider when importing mail\"),\n\n      ('notify_page_text', '%(intro)s%(difflink)s\\n\\n%(comment)s%(diff)s',\n       \"Template for putting together the pieces for the page changed/deleted/renamed notification mail text body\"),\n      ('notify_page_changed_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page changed notification mail subject header\"),\n      ('notify_page_changed_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page or wiki category on \"%(sitename)s\" for change notification.\\n\\n'\n         'The \"%(pagename)s\" page has been changed by %(editor)s:\\n'),\n       \"Template for the page changed notification mail intro text\"),\n      ('notify_page_deleted_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page deleted notification mail subject header\"),\n      ('notify_page_deleted_intro',\n       _(\"Dear wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(sitename)s\" for change notification.\\n\\n'\n         'The page \"%(pagename)s\" has been deleted by %(editor)s:\\n\\n'),\n       \"Template for the page deleted notification mail intro text\"),\n      ('notify_page_renamed_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page renamed notification mail subject header\"),\n      ('notify_page_renamed_intro',\n       _(\"Dear wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(sitename)s\" for change notification.\\n\\n'\n         'The page \"%(pagename)s\" has been renamed from \"%(oldname)s\" by %(editor)s:\\n'),\n       \"Template for the page renamed notification mail intro text\"),\n      ('notify_att_added_subject', _('[%(sitename)s] New attachment added to page %(pagename)s'),\n       \"Template for the attachment added notification mail subject header\"),\n      ('notify_att_added_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(page_name)s\" for change notification. '\n         \"An attachment has been added to that page by %(editor)s. \"\n         \"Following detailed information is available:\\n\\n\"\n         \"Attachment name: %(attach_name)s\\n\"\n         \"Attachment size: %(attach_size)s\\n\"),\n       \"Template for the attachment added notification mail intro text\"),\n      ('notify_att_removed_subject', _('[%(sitename)s] Removed attachment from page %(pagename)s'),\n       \"Template for the attachment removed notification mail subject header\"),\n      ('notify_att_removed_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(page_name)s\" for change notification. '\n         \"An attachment has been removed from that page by %(editor)s. \"\n         \"Following detailed information is available:\\n\\n\"\n         \"Attachment name: %(attach_name)s\\n\"\n         \"Attachment size: %(attach_size)s\\n\"),\n       \"Template for the attachment removed notification mail intro text\"),\n      ('notify_user_created_subject',\n       _(\"[%(sitename)s] New user account created\"),\n       \"Template for the user created notification mail subject header\"),\n      ('notify_user_created_intro',\n       _('Dear Superuser, a new user has just been created on \"%(sitename)s\". Details follow:\\n\\n'\n         '    User name: %(username)s\\n'\n         '    Email address: %(useremail)s'),\n       \"Template for the user created notification mail intro text\"),\n    )),\n\n    'backup': ('Backup settings',\n        'These settings control how the backup action works and who is allowed to use it.',\n    (\n      ('compression', 'gz', 'What compression to use for the backup (\"gz\" or \"bz2\").'),\n      ('users', [], 'List of trusted user names who are allowed to get a backup.'),\n      ('include', [], 'List of pathes to backup.'),\n      ('exclude', lambda self, filename: False, 'Function f(self, filename) that tells whether a file should be excluded from backup. By default, nothing is excluded.'),\n    )),\n    'rss': ('RSS settings',\n        'These settings control RSS behaviour.',\n    (\n      ('items_default', 15, \"Default maximum items value for RSS feed. Can be \"\n                            \"changed via items URL query parameter of rss_rc \"\n                            \"action.\"),\n      ('items_limit', 100, \"Limit for item count got via RSS (i. e. user \"\n                           \"can't get more than items_limit items even via \"\n                           \"changing items URL query parameter).\"),\n      ('unique', 0, \"If set to 1, for each page name only one RSS item would \"\n                    \"be shown. Can be changed via unique rss_rc action URL \"\n                    \"query parameter.\"),\n      ('diffs', 0, \"Add diffs in RSS item descriptions by default. Can be \"\n                   \"changed via diffs URL query parameter of rss_rc action.\"),\n      ('ddiffs', 0, \"If set to 1, links to diff view instead of page itself \"\n                    \"would be generated by default. Can be changed via ddiffs \"\n                    \"URL query parameter of rss_rc action.\"),\n      ('lines_default', 20, \"Default line count limit for diffs added as item \"\n                            \"descriptions for RSS items. Can be changed via \"\n                            \"lines URL query parameter of rss_rc action.\"),\n      ('lines_limit', 100, \"Limit for possible line count for diffs added as \"\n                           \"item descriptions in RSS.\"),\n      ('show_attachment_entries', 0, \"If set to 1, items, related to \"\n                                     \"attachment management, would be added to \"\n                                     \"RSS feed. Can be changed via show_att \"\n                                     \"URL query parameter of rss_rc action.\"),\n      ('page_filter_pattern', \"\", \"Default page filter pattern for RSS feed. \"\n                                  \"Empty pattern matches to any page. Pattern \"\n                                  \"beginning with circumflex is interpreted as \"\n                                  \"regular expression. Pattern ending with \"\n                                  \"slash matches page and all its subpages. \"\n                                  \"Otherwise pattern sets specific pagename. \"\n                                  \"Can be changed via page URL query parameter \"\n                                  \"of rss_rc action.\"),\n      ('show_page_history_link', True, \"Add link to page change history \"\n                                       \"RSS feed in theme.\"),\n    )),\n    'search_macro': ('Search macro settings',\n        'Settings related to behaviour of search macros (such as FullSearch, '\n        'FullSearchCached, PageList)',\n    (\n      ('parse_args', False, \"Do search macro parameter parsing. In previous \"\n                            \"versions of MoinMoin, whole search macro \"\n                            \"parameter string had been interpreted as needle. \"\n                            \"Now, to provide ability to pass additional \"\n                            \"parameters, this behaviour should be changed.\"),\n      ('highlight_titles', 1, \"Perform title matches highlighting by default \"\n                              \"in search results generated by macro.\"),\n      ('highlight_pages', 1, \"Add highlight parameter to links in search \"\n                             \"results generated by search macros by default.\"),\n    )),\n}\n\ndef _add_options_to_defconfig(opts, addgroup=True):\n    for groupname in opts:\n        group_short, group_doc, group_opts = opts[groupname]\n        for name, default, doc in group_opts:\n            if addgroup:\n                name = groupname + '_' + name\n            if isinstance(default, DefaultExpression):\n                default = default.value\n            setattr(DefaultConfig, name, default)\n\n_add_options_to_defconfig(options)\n_add_options_to_defconfig(options_no_group_name, False)\n\n# remove the gettext pseudo function\ndel _\n\n"], "fixing_code": ["# -*- coding: iso-8859-1 -*-\n\"\"\"\n    MoinMoin - site-wide configuration defaults (NOT per single wiki!)\n\n    @copyright: 2005-2006 MoinMoin:ThomasWaldmann\n    @license: GNU GPL, see COPYING for details.\n\"\"\"\nimport re\nfrom MoinMoin import version\n\n# unicode: set the char types (upper, lower, digits, spaces)\nfrom MoinMoin.util.chartypes import *\n\n# List of image types browser do support regulary\nbrowser_supported_images = ('gif', 'jpg', 'jpeg', 'png', 'bmp', 'ico', 'svg+xml')\n\n# Parser to use mimetype text\nparser_text_mimetype = ('plain', 'csv', 'rst', 'docbook', 'latex', 'tex', 'html', 'css',\n                       'xml', 'python', 'perl', 'php', 'ruby', 'javascript',\n                       'cplusplus', 'java', 'pascal', 'diff', 'gettext', 'xslt', 'creole', )\n\n# When creating files, we use e.g. 0666 & config.umask for the mode:\numask = 0770\n\n# list of acceptable password hashing schemes for cfg.password_scheme,\n# here we only give reasonably good schemes, which is passlib (if we\n# have passlib) and ssha (if we only have builtin stuff):\npassword_schemes_configurable = ['{PASSLIB}', '{SSHA}', ]\n\n# ordered list of supported password hashing schemes, best (passlib) should be\n# first, best builtin one should be second. this is what we support if we\n# encounter it in user profiles:\npassword_schemes_supported = password_schemes_configurable + ['{SHA}', '{APR1}', '{MD5}', '{DES}', ]\n\n# Default value for the static stuff URL prefix (css, img, js).\n# Caution:\n# * do NOT use this directly, it is only the DEFAULT value to be used by\n#   server Config classes and by multiconfig.py for request.cfg.\n# * must NOT end with '/'!\n# * some servers expect '/' at beginning and only 1 level deep.\nurl_prefix_static = '/moin_static' + version.release_short\n\n# Threads flag - if you write a moin server that use threads, import\n# config in the server and set this flag to True.\nuse_threads = False\n\n# Charset - we support only 'utf-8'. While older encodings might work,\n# we don't have the resources to test them, and there is no real\n# benefit for the user. IMPORTANT: use only lowercase 'utf-8'!\ncharset = 'utf-8'\n\n# Regex to find lower->upper transitions (word boundaries in WikiNames), used by split_title\nsplit_regex = re.compile('([%s])([%s])' % (chars_lower, chars_upper), re.UNICODE)\n\n# Invalid characters - invisible characters that should not be in page\n# names. Prevent user confusion and wiki abuse, e.g u'\\u202aFrontPage'.\npage_invalid_chars_regex = re.compile(\n    ur\"\"\"\n    \\u0000 | # NULL\n\n    # Bidi control characters\n    \\u202A | # LRE\n    \\u202B | # RLE\n    \\u202C | # PDF\n    \\u202D | # LRM\n    \\u202E   # RLM\n    \"\"\",\n    re.UNICODE | re.VERBOSE\n    )\n\n# used for wikiutil.clean_input\nclean_input_translation_map = {\n    # these chars will be replaced by blanks\n    ord(u'\\t'): u' ',\n    ord(u'\\r'): u' ',\n    ord(u'\\n'): u' ',\n}\nfor c in u'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f' \\\n          '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f':\n    # these chars will be removed\n    clean_input_translation_map[ord(c)] = None\ndel c\n\n# Other stuff\nurl_schemas = ['http', 'https', 'ftp', 'file',\n               'mailto', 'nntp', 'news',\n               'ssh', 'telnet', 'irc', 'ircs', 'xmpp', 'mumble',\n               'webcal', 'ed2k', 'apt', 'rootz',\n               'gopher',\n               'notes',\n               'rtp', 'rtsp', 'rtcp',\n               'tel',\n              ]\n\nsmileys = (r\"X-( :D <:( :o :( :) B) :)) ;) /!\\ <!> (!) :-? :\\ >:> |) \" +\n           r\":-( :-) B-) :-)) ;-) |-) (./) {OK} {X} {i} {1} {2} {3} {*} {o}\").split()\n", "# -*- coding: iso-8859-1 -*-\n\"\"\"\n    MoinMoin - Multiple configuration handler and Configuration defaults class\n\n    @copyright: 2000-2004 Juergen Hermann <jh@web.de>,\n                2005-2008 MoinMoin:ThomasWaldmann.\n                2008      MoinMoin:JohannesBerg\n    @license: GNU GPL, see COPYING for details.\n\"\"\"\n\nimport hashlib\nimport re\nimport os\nimport sys\nimport time\n\nfrom MoinMoin import log\nlogging = log.getLogger(__name__)\n\nfrom MoinMoin import config, error, util, wikiutil, web\nfrom MoinMoin import datastruct\nfrom MoinMoin.auth import MoinAuth\nimport MoinMoin.auth as authmodule\nimport MoinMoin.events as events\nfrom MoinMoin.events import PageChangedEvent, PageRenamedEvent\nfrom MoinMoin.events import PageDeletedEvent, PageCopiedEvent\nfrom MoinMoin.events import PageRevertedEvent, FileAttachedEvent\nimport MoinMoin.web.session\nfrom MoinMoin.packages import packLine\nfrom MoinMoin.security import AccessControlList\n\n_url_re_cache = None\n_farmconfig_mtime = None\n_config_cache = {}\n\n\ndef _importConfigModule(name):\n    \"\"\" Import and return configuration module and its modification time\n\n    Handle all errors except ImportError, because missing file is not\n    always an error.\n\n    @param name: module name\n    @rtype: tuple\n    @return: module, modification time\n    \"\"\"\n    try:\n        module = __import__(name, globals(), {})\n        mtime = os.path.getmtime(module.__file__)\n    except ImportError:\n        raise\n    except IndentationError, err:\n        logging.exception('Your source code / config file is not correctly indented!')\n        msg = \"\"\"IndentationError: %(err)s\n\nThe configuration files are Python modules. Therefore, whitespace is\nimportant. Make sure that you use only spaces, no tabs are allowed here!\nYou have to use four spaces at the beginning of the line mostly.\n\"\"\" % {\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n    except Exception, err:\n        logging.exception('An exception happened.')\n        msg = '%s: %s' % (err.__class__.__name__, str(err))\n        raise error.ConfigurationError(msg)\n    return module, mtime\n\n\ndef _url_re_list():\n    \"\"\" Return url matching regular expression\n\n    Import wikis list from farmconfig on the first call and compile the\n    regexes. Later just return the cached regex list.\n\n    @rtype: list of tuples of (name, compiled re object)\n    @return: url to wiki config name matching list\n    \"\"\"\n    global _url_re_cache, _farmconfig_mtime\n    if _url_re_cache is None:\n        try:\n            farmconfig, _farmconfig_mtime = _importConfigModule('farmconfig')\n        except ImportError, err:\n            if 'farmconfig' in str(err):\n                # we failed importing farmconfig\n                logging.debug(\"could not import farmconfig, mapping all URLs to wikiconfig\")\n                _farmconfig_mtime = 0\n                _url_re_cache = [('wikiconfig', re.compile(r'.')), ] # matches everything\n            else:\n                # maybe there was a failing import statement inside farmconfig\n                raise\n        else:\n            logging.info(\"using farm config: %s\" % os.path.abspath(farmconfig.__file__))\n            try:\n                cache = []\n                for name, regex in farmconfig.wikis:\n                    cache.append((name, re.compile(regex)))\n                _url_re_cache = cache\n            except AttributeError:\n                logging.error(\"required 'wikis' list missing in farmconfig\")\n                msg = \"\"\"\nMissing required 'wikis' list in 'farmconfig.py'.\n\nIf you run a single wiki you do not need farmconfig.py. Delete it and\nuse wikiconfig.py.\n\"\"\"\n                raise error.ConfigurationError(msg)\n    return _url_re_cache\n\n\ndef _makeConfig(name):\n    \"\"\" Create and return a config instance\n\n    Timestamp config with either module mtime or farmconfig mtime. This\n    mtime can be used later to invalidate older caches.\n\n    @param name: module name\n    @rtype: DefaultConfig sub class instance\n    @return: new configuration instance\n    \"\"\"\n    global _farmconfig_mtime\n    try:\n        module, mtime = _importConfigModule(name)\n        configClass = getattr(module, 'Config')\n        cfg = configClass(name)\n        cfg.cfg_mtime = max(mtime, _farmconfig_mtime)\n        logging.info(\"using wiki config: %s\" % os.path.abspath(module.__file__))\n    except ImportError, err:\n        logging.exception('Could not import.')\n        msg = \"\"\"ImportError: %(err)s\n\nCheck that the file is in the same directory as the server script. If\nit is not, you must add the path of the directory where the file is\nlocated to the python path in the server script. See the comments at\nthe top of the server script.\n\nCheck that the configuration file name is either \"wikiconfig.py\" or the\nmodule name specified in the wikis list in farmconfig.py. Note that the\nmodule name does not include the \".py\" suffix.\n\"\"\" % {\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n    except AttributeError, err:\n        logging.exception('An exception occurred.')\n        msg = \"\"\"AttributeError: %(err)s\n\nCould not find required \"Config\" class in \"%(name)s.py\".\n\nThis might happen if you are trying to use a pre 1.3 configuration file, or\nmade a syntax or spelling error.\n\nAnother reason for this could be a name clash. It is not possible to have\nconfig names like e.g. stats.py - because that collides with MoinMoin/stats/ -\nhave a look into your MoinMoin code directory what other names are NOT\npossible.\n\nPlease check your configuration file. As an example for correct syntax,\nuse the wikiconfig.py file from the distribution.\n\"\"\" % {\n    'name': name,\n    'err': err,\n}\n        raise error.ConfigurationError(msg)\n\n    return cfg\n\n\ndef _getConfigName(url):\n    \"\"\" Return config name for url or raise \"\"\"\n    for name, regex in _url_re_list():\n        match = regex.match(url)\n        if match:\n            return name\n    raise error.NoConfigMatchedError\n\n\ndef getConfig(url):\n    \"\"\" Return cached config instance for url or create new one\n\n    If called by many threads in the same time multiple config\n    instances might be created. The first created item will be\n    returned, using dict.setdefault.\n\n    @param url: the url from request, possibly matching specific wiki\n    @rtype: DefaultConfig subclass instance\n    @return: config object for specific wiki\n    \"\"\"\n    cfgName = _getConfigName(url)\n    try:\n        cfg = _config_cache[cfgName]\n    except KeyError:\n        cfg = _makeConfig(cfgName)\n        cfg = _config_cache.setdefault(cfgName, cfg)\n    return cfg\n\n\n# This is a way to mark some text for the gettext tools so that they don't\n# get orphaned. See http://www.python.org/doc/current/lib/node278.html.\ndef _(text):\n    return text\n\n\nclass CacheClass:\n    \"\"\" just a container for stuff we cache \"\"\"\n    pass\n\n\nclass ConfigFunctionality(object):\n    \"\"\" Configuration base class with config class behaviour.\n\n        This class contains the functionality for the DefaultConfig\n        class for the benefit of the WikiConfig macro.\n    \"\"\"\n\n    # attributes of this class that should not be shown\n    # in the WikiConfig() macro.\n    cfg_mtime = None\n    siteid = None\n    cache = None\n    mail_enabled = None\n    jabber_enabled = None\n    auth_can_logout = None\n    auth_have_login = None\n    auth_login_inputs = None\n    _site_plugin_lists = None\n    _iwid = None\n    _iwid_full = None\n    xapian_searchers = None\n    moinmoin_dir = None\n    # will be lazily loaded by interwiki code when needed (?)\n    shared_intermap_files = None\n\n    def __init__(self, siteid):\n        \"\"\" Init Config instance \"\"\"\n        self.siteid = siteid\n        self.cache = CacheClass()\n\n        from MoinMoin.Page import ItemCache\n        self.cache.meta = ItemCache('meta')\n        self.cache.pagelists = ItemCache('pagelists')\n\n        if self.config_check_enabled:\n            self._config_check()\n\n        # define directories\n        self.moinmoin_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))\n        data_dir = os.path.normpath(self.data_dir)\n        self.data_dir = data_dir\n        for dirname in ('user', 'cache', 'plugin'):\n            name = dirname + '_dir'\n            if not getattr(self, name, None):\n                setattr(self, name, os.path.abspath(os.path.join(data_dir, dirname)))\n        # directories below cache_dir (using __dirname__ to avoid conflicts)\n        for dirname in ('session', ):\n            name = dirname + '_dir'\n            if not getattr(self, name, None):\n                setattr(self, name, os.path.abspath(os.path.join(self.cache_dir, '__%s__' % dirname)))\n\n        # Try to decode certain names which allow unicode\n        self._decode()\n\n        # After that, pre-compile some regexes\n        self.cache.page_category_regex = re.compile(self.page_category_regex, re.UNICODE)\n        self.cache.page_dict_regex = re.compile(self.page_dict_regex, re.UNICODE)\n        self.cache.page_group_regex = re.compile(self.page_group_regex, re.UNICODE)\n        self.cache.page_template_regex = re.compile(self.page_template_regex, re.UNICODE)\n\n        # the ..._regexact versions only match if nothing is left (exact match)\n        self.cache.page_category_regexact = re.compile(u'^%s$' % self.page_category_regex, re.UNICODE)\n        self.cache.page_dict_regexact = re.compile(u'^%s$' % self.page_dict_regex, re.UNICODE)\n        self.cache.page_group_regexact = re.compile(u'^%s$' % self.page_group_regex, re.UNICODE)\n        self.cache.page_template_regexact = re.compile(u'^%s$' % self.page_template_regex, re.UNICODE)\n\n        self.cache.ua_spiders = self.ua_spiders and re.compile(self.ua_spiders, re.IGNORECASE)\n\n        self._check_directories()\n\n        if not isinstance(self.superuser, list):\n            msg = \"\"\"The superuser setting in your wiki configuration is not a list\n                     (e.g. ['Sample User', 'AnotherUser']).\n                     Please change it in your wiki configuration and try again.\"\"\"\n            raise error.ConfigurationError(msg)\n\n        if not isinstance(self.actions_superuser, list):\n            msg = \"\"\"The actions_superuser setting in your wiki configuration is not a list\n                     (e.g. ['newaccount', 'some_other_action']).\n                     Please change it in your wiki configuration and try again.\"\"\"\n            raise error.ConfigurationError(msg)\n\n        # moin < 1.9 used cookie_lifetime = <float> (but converted it to int) for logged-in users and\n        # anonymous_session_lifetime = <float> or None for anon users\n        # moin >= 1.9 uses cookie_lifetime = (<float>, <float>) - first is anon, second is logged-in\n        if not (isinstance(self.cookie_lifetime, tuple) and len(self.cookie_lifetime) == 2):\n            logging.error(\"wiki configuration has an invalid setting: \" +\n                          \"cookie_lifetime = %r\" % (self.cookie_lifetime, ))\n            try:\n                anon_lifetime = self.anonymous_session_lifetime\n                logging.warning(\"wiki configuration has an unsupported setting: \" +\n                                \"anonymous_session_lifetime = %r - \" % anon_lifetime +\n                                \"please remove it.\")\n                if anon_lifetime is None:\n                    anon_lifetime = 0\n                anon_lifetime = float(anon_lifetime)\n            except:\n                # if anything goes wrong, use default value\n                anon_lifetime = 0\n            try:\n                logged_in_lifetime = int(self.cookie_lifetime)\n            except:\n                # if anything goes wrong, use default value\n                logged_in_lifetime = 12\n            self.cookie_lifetime = (anon_lifetime, logged_in_lifetime)\n            logging.warning(\"using cookie_lifetime = %r - \" % (self.cookie_lifetime, ) +\n                            \"please fix your wiki configuration.\")\n\n        self._loadPluginModule()\n\n        # Preparse user dicts\n        self._fillDicts()\n\n        # Normalize values\n        self.language_default = self.language_default.lower()\n\n        # Use site name as default name-logo\n        if self.logo_string is None:\n            self.logo_string = self.sitename\n\n        # Check for needed modules\n\n        # FIXME: maybe we should do this check later, just before a\n        # chart is needed, maybe in the chart module, instead doing it\n        # for each request. But this require a large refactoring of\n        # current code.\n        if self.chart_options:\n            try:\n                import gdchart\n            except ImportError:\n                self.chart_options = None\n\n        # 'setuid' special auth method auth method can log out\n        self.auth_can_logout = ['setuid']\n        self.auth_login_inputs = []\n        found_names = []\n        for auth in self.auth:\n            if not auth.name:\n                raise error.ConfigurationError(\"Auth methods must have a name.\")\n            if auth.name in found_names:\n                raise error.ConfigurationError(\"Auth method names must be unique.\")\n            found_names.append(auth.name)\n            if auth.logout_possible and auth.name:\n                self.auth_can_logout.append(auth.name)\n            for input in auth.login_inputs:\n                if not input in self.auth_login_inputs:\n                    self.auth_login_inputs.append(input)\n        self.auth_have_login = len(self.auth_login_inputs) > 0\n        self.auth_methods = found_names\n\n        # internal dict for plugin `modules' lists\n        self._site_plugin_lists = {}\n\n        # we replace any string placeholders with config values\n        # e.g u'%(page_front_page)s' % self\n        self.navi_bar = [elem % self for elem in self.navi_bar]\n\n        # check if python-xapian is installed\n        if self.xapian_search:\n            try:\n                import xapian\n            except ImportError, err:\n                self.xapian_search = False\n                logging.error(\"xapian_search was auto-disabled because python-xapian is not installed [%s].\" % str(err))\n\n        # list to cache xapian searcher objects\n        self.xapian_searchers = []\n\n        # check if mail is possible and set flag:\n        self.mail_enabled = (self.mail_smarthost is not None or self.mail_sendmail is not None) and self.mail_from\n        self.mail_enabled = self.mail_enabled and True or False\n\n        # check if jabber bot is available and set flag:\n        self.jabber_enabled = self.notification_bot_uri is not None\n\n        # if we are to use the jabber bot, instantiate a server object for future use\n        if self.jabber_enabled:\n            from xmlrpclib import Server\n            self.notification_server = Server(self.notification_bot_uri, )\n\n        # Cache variables for the properties below\n        self._iwid = self._iwid_full = self._meta_dict = None\n\n        self.cache.acl_rights_before = AccessControlList(self, [self.acl_rights_before])\n        self.cache.acl_rights_default = AccessControlList(self, [self.acl_rights_default])\n        self.cache.acl_rights_after = AccessControlList(self, [self.acl_rights_after])\n\n        action_prefix = self.url_prefix_action\n        if action_prefix is not None and action_prefix.endswith('/'): # make sure there is no trailing '/'\n            self.url_prefix_action = action_prefix[:-1]\n\n        if self.url_prefix_local is None:\n            self.url_prefix_local = self.url_prefix_static\n\n        if self.url_prefix_fckeditor is None:\n            self.url_prefix_fckeditor = self.url_prefix_local + '/applets/FCKeditor'\n\n        if self.secrets is None:  # admin did not setup a real secret, so make up something\n            self.secrets = self.calc_secrets()\n\n        secret_key_names = ['action/cache', 'wikiutil/tickets', 'xmlrpc/ProcessMail', 'xmlrpc/RemoteScript', ]\n        if self.jabber_enabled:\n            secret_key_names.append('jabberbot')\n        if self.textchas:\n            secret_key_names.append('security/textcha')\n\n        secret_min_length = 10\n        if isinstance(self.secrets, str):\n            if len(self.secrets) < secret_min_length:\n                raise error.ConfigurationError(\"The secrets = '...' wiki config setting is a way too short string (minimum length is %d chars)!\" % (\n                    secret_min_length))\n            # for lazy people: set all required secrets to same value\n            secrets = {}\n            for key in secret_key_names:\n                secrets[key] = self.secrets\n            self.secrets = secrets\n\n        # we check if we have all secrets we need and that they have minimum length\n        for secret_key_name in secret_key_names:\n            try:\n                secret = self.secrets[secret_key_name]\n                if len(secret) < secret_min_length:\n                    raise ValueError\n            except (KeyError, ValueError):\n                raise error.ConfigurationError(\"You must set a (at least %d chars long) secret string for secrets['%s']!\" % (\n                    secret_min_length, secret_key_name))\n\n        if self.password_scheme not in config.password_schemes_configurable:\n            raise error.ConfigurationError(\"not supported: password_scheme = %r\" % self.password_scheme)\n\n        if self.passlib_support:\n            try:\n                from passlib.context import CryptContext\n            except ImportError, err:\n                raise error.ConfigurationError(\"Wiki is configured to use passlib, but importing passlib failed [%s]!\" % str(err))\n            try:\n                self.cache.pwd_context = CryptContext(**self.passlib_crypt_context)\n            except (ValueError, KeyError, TypeError, UserWarning), err:\n                # ValueError: wrong configuration values\n                # KeyError: unsupported hash (seen with passlib 1.3)\n                # TypeError: configuration value has wrong type\n                raise error.ConfigurationError(\"passlib_crypt_context configuration is invalid [%s].\" % str(err))\n        elif self.password_scheme == '{PASSLIB}':\n            raise error.ConfigurationError(\"passlib_support is switched off, thus you can't use password_scheme = '{PASSLIB}'.\")\n\n    def calc_secrets(self):\n        \"\"\" make up some 'secret' using some config values \"\"\"\n        varnames = ['data_dir', 'data_underlay_dir', 'language_default',\n                    'mail_smarthost', 'mail_from', 'page_front_page',\n                    'theme_default', 'sitename', 'logo_string',\n                    'interwikiname', 'user_homewiki', 'acl_rights_before', ]\n        secret = ''\n        for varname in varnames:\n            var = getattr(self, varname, None)\n            if isinstance(var, (str, unicode)):\n                secret += repr(var)\n        return secret\n\n    _meta_dict = None\n    def load_meta_dict(self):\n        \"\"\" The meta_dict contains meta data about the wiki instance. \"\"\"\n        if self._meta_dict is None:\n            self._meta_dict = wikiutil.MetaDict(os.path.join(self.data_dir, 'meta'), self.cache_dir)\n        return self._meta_dict\n    meta_dict = property(load_meta_dict)\n\n    # lazily load iwid(_full)\n    def make_iwid_property(attr):\n        def getter(self):\n            if getattr(self, attr, None) is None:\n                self.load_IWID()\n            return getattr(self, attr)\n        return property(getter)\n    iwid = make_iwid_property(\"_iwid\")\n    iwid_full = make_iwid_property(\"_iwid_full\")\n\n    # lazily create a list of event handlers\n    _event_handlers = None\n    def make_event_handlers_prop():\n        def getter(self):\n            if self._event_handlers is None:\n                self._event_handlers = events.get_handlers(self)\n            return self._event_handlers\n\n        def setter(self, new_handlers):\n            self._event_handlers = new_handlers\n\n        return property(getter, setter)\n    event_handlers = make_event_handlers_prop()\n\n    def load_IWID(self):\n        \"\"\" Loads the InterWikiID of this instance. It is used to identify the instance\n            globally.\n            The IWID is available as cfg.iwid\n            The full IWID containing the interwiki name is available as cfg.iwid_full\n            This method is called by the property.\n        \"\"\"\n        try:\n            iwid = self.meta_dict['IWID']\n        except KeyError:\n            iwid = util.random_string(16).encode(\"hex\") + \"-\" + str(int(time.time()))\n            self.meta_dict['IWID'] = iwid\n            self.meta_dict.sync()\n\n        self._iwid = iwid\n        if self.interwikiname is not None:\n            self._iwid_full = packLine([iwid, self.interwikiname])\n        else:\n            self._iwid_full = packLine([iwid])\n\n    def _config_check(self):\n        \"\"\" Check namespace and warn about unknown names\n\n        Warn about names which are not used by DefaultConfig, except\n        modules, classes, _private or __magic__ names.\n\n        This check is disabled by default, when enabled, it will show an\n        error message with unknown names.\n        \"\"\"\n        unknown = ['\"%s\"' % name for name in dir(self)\n                  if not name.startswith('_') and\n                  name not in DefaultConfig.__dict__ and\n                  not isinstance(getattr(self, name), (type(sys), type(DefaultConfig)))]\n        if unknown:\n            msg = \"\"\"\nUnknown configuration options: %s.\n\nFor more information, visit HelpOnConfiguration. Please check your\nconfiguration for typos before requesting support or reporting a bug.\n\"\"\" % ', '.join(unknown)\n            raise error.ConfigurationError(msg)\n\n    def _decode(self):\n        \"\"\" Try to decode certain names, ignore unicode values\n\n        Try to decode str using utf-8. If the decode fail, raise FatalError.\n\n        Certain config variables should contain unicode values, and\n        should be defined with u'text' syntax. Python decode these if\n        the file have a 'coding' line.\n\n        This will allow utf-8 users to use simple strings using, without\n        using u'string'. Other users will have to use u'string' for\n        these names, because we don't know what is the charset of the\n        config files.\n        \"\"\"\n        charset = 'utf-8'\n        message = u\"\"\"\n\"%(name)s\" configuration variable is a string, but should be\nunicode. Use %(name)s = u\"value\" syntax for unicode variables.\n\nAlso check your \"-*- coding -*-\" line at the top of your configuration\nfile. It should match the actual charset of the configuration file.\n\"\"\"\n\n        decode_names = (\n            'sitename', 'interwikiname', 'user_homewiki', 'logo_string', 'navi_bar',\n            'page_front_page', 'page_category_regex', 'page_dict_regex',\n            'page_group_regex', 'page_template_regex', 'page_license_page',\n            'page_local_spelling_words', 'acl_rights_default',\n            'acl_rights_before', 'acl_rights_after', 'mail_from',\n            'quicklinks_default', 'subscribed_pages_default',\n            )\n\n        for name in decode_names:\n            attr = getattr(self, name, None)\n            if attr:\n                # Try to decode strings\n                if isinstance(attr, str):\n                    try:\n                        setattr(self, name, unicode(attr, charset))\n                    except UnicodeError:\n                        raise error.ConfigurationError(message %\n                                                       {'name': name})\n                # Look into lists and try to decode strings inside them\n                elif isinstance(attr, list):\n                    for i in xrange(len(attr)):\n                        item = attr[i]\n                        if isinstance(item, str):\n                            try:\n                                attr[i] = unicode(item, charset)\n                            except UnicodeError:\n                                raise error.ConfigurationError(message %\n                                                               {'name': name})\n\n    def _check_directories(self):\n        \"\"\" Make sure directories are accessible\n\n        Both data and underlay should exists and allow read, write and\n        execute.\n        \"\"\"\n        mode = os.F_OK | os.R_OK | os.W_OK | os.X_OK\n        for attr in ('data_dir', 'data_underlay_dir'):\n            path = getattr(self, attr)\n\n            # allow an empty underlay path or None\n            if attr == 'data_underlay_dir' and not path:\n                continue\n\n            path_pages = os.path.join(path, \"pages\")\n            if not (os.path.isdir(path_pages) and os.access(path_pages, mode)):\n                msg = \"\"\"\n%(attr)s \"%(path)s\" does not exist, or has incorrect ownership or\npermissions.\n\nMake sure the directory and the subdirectory \"pages\" are owned by the web\nserver and are readable, writable and executable by the web server user\nand group.\n\nIt is recommended to use absolute paths and not relative paths. Check\nalso the spelling of the directory name.\n\"\"\" % {'attr': attr, 'path': path, }\n                raise error.ConfigurationError(msg)\n\n    def _loadPluginModule(self):\n        \"\"\"\n        import all plugin modules\n\n        To be able to import plugin from arbitrary path, we have to load\n        the base package once using imp.load_module. Later, we can use\n        standard __import__ call to load plugins in this package.\n\n        Since each configured plugin path has unique plugins, we load the\n        plugin packages as \"moin_plugin_<sha1(path)>.plugin\".\n        \"\"\"\n        import imp\n\n        plugin_dirs = [self.plugin_dir] + self.plugin_dirs\n        self._plugin_modules = []\n\n        try:\n            # Lock other threads while we check and import\n            imp.acquire_lock()\n            try:\n                for pdir in plugin_dirs:\n                    csum = 'p_%s' % hashlib.new('sha1', pdir).hexdigest()\n                    modname = '%s.%s' % (self.siteid, csum)\n                    # If the module is not loaded, try to load it\n                    if not modname in sys.modules:\n                        # Find module on disk and try to load - slow!\n                        abspath = os.path.abspath(pdir)\n                        parent_dir, pname = os.path.split(abspath)\n                        fp, path, info = imp.find_module(pname, [parent_dir])\n                        try:\n                            # Load the module and set in sys.modules\n                            module = imp.load_module(modname, fp, path, info)\n                            setattr(sys.modules[self.siteid], 'csum', module)\n                        finally:\n                            # Make sure fp is closed properly\n                            if fp:\n                                fp.close()\n                    if modname not in self._plugin_modules:\n                        self._plugin_modules.append(modname)\n            finally:\n                imp.release_lock()\n        except ImportError, err:\n            msg = \"\"\"\nCould not import plugin package \"%(path)s\" because of ImportError:\n%(err)s.\n\nMake sure your data directory path is correct, check permissions, and\nthat the data/plugin directory has an __init__.py file.\n\"\"\" % {\n    'path': pdir,\n    'err': str(err),\n}\n            raise error.ConfigurationError(msg)\n\n    def _fillDicts(self):\n        \"\"\" fill config dicts\n\n        Fills in missing dict keys of derived user config by copying\n        them from this base class.\n        \"\"\"\n        # user checkbox defaults\n        for key, value in DefaultConfig.user_checkbox_defaults.items():\n            if key not in self.user_checkbox_defaults:\n                self.user_checkbox_defaults[key] = value\n\n    def __getitem__(self, item):\n        \"\"\" Make it possible to access a config object like a dict \"\"\"\n        return getattr(self, item)\n\n\nclass DefaultConfig(ConfigFunctionality):\n    \"\"\" Configuration base class with default config values\n        (added below)\n    \"\"\"\n    # Do not add anything into this class. Functionality must\n    # be added above to avoid having the methods show up in\n    # the WikiConfig macro. Settings must be added below to\n    # the options dictionary.\n\n_default_backlink_method = lambda cfg, req: 'backlink' if req.user.valid else 'pagelink'\n\n\ndef _default_password_checker(cfg, request, username, password,\n                              min_length=6, min_different=4):\n    \"\"\" Check if a password is secure enough.\n        We use a built-in check to get rid of the worst passwords.\n\n        We do NOT use cracklib / python-crack here any more because it is\n        not thread-safe (we experienced segmentation faults when using it).\n\n        If you don't want to check passwords, use password_checker = None.\n\n        @return: None if there is no problem with the password,\n                 some unicode object with an error msg, if the password is problematic.\n    \"\"\"\n    _ = request.getText\n    # in any case, do a very simple built-in check to avoid the worst passwords\n    if len(password) < min_length:\n        return _(\"Password is too short.\")\n    if len(set(password)) < min_different:\n        return _(\"Password has not enough different characters.\")\n\n    username_lower = username.lower()\n    password_lower = password.lower()\n    if username in password or password in username or \\\n       username_lower in password_lower or password_lower in username_lower:\n        return _(\"Password is too easy (password contains name or name contains password).\")\n\n    keyboards = (ur\"`1234567890-=qwertyuiop[]\\asdfghjkl;'zxcvbnm,./\", # US kbd\n                 ur\"^1234567890\u00df\u00b4qwertzuiop\u00fc+asdfghjkl\u00f6\u00e4#yxcvbnm,.-\", # german kbd\n                ) # add more keyboards!\n    for kbd in keyboards:\n        rev_kbd = kbd[::-1]\n        if password in kbd or password in rev_kbd or \\\n           password_lower in kbd or password_lower in rev_kbd:\n            return _(\"Password is too easy (keyboard sequence).\")\n    return None\n\n\nclass DefaultExpression(object):\n    def __init__(self, exprstr):\n        self.text = exprstr\n        self.value = eval(exprstr)\n\n\n#\n# Options that are not prefixed automatically with their\n# group name, see below (at the options dict) for more\n# information on the layout of this structure.\n#\noptions_no_group_name = {\n  # =========================================================================\n  'attachment_extension': (\"Mapping of attachment extensions to actions\", None,\n  (\n   ('extensions_mapping',\n       {'.tdraw': {'modify': 'twikidraw'},\n        '.adraw': {'modify': 'anywikidraw'},\n       }, \"file extension -> do -> action\"),\n  )),\n  # ==========================================================================\n  'datastruct': ('Datastruct settings', None, (\n    ('dicts', lambda cfg, request: datastruct.WikiDicts(request),\n     \"function f(cfg, request) that returns a backend which is used to access dicts definitions.\"),\n    ('groups', lambda cfg, request: datastruct.WikiGroups(request),\n     \"function f(cfg, request) that returns a backend which is used to access groups definitions.\"),\n  )),\n  # ==========================================================================\n  'session': ('Session settings', \"Session-related settings, see HelpOnSessions.\", (\n    ('session_service', DefaultExpression('web.session.FileSessionService()'),\n     \"The session service.\"),\n    ('cookie_name', None,\n     'The variable part of the session cookie name. (None = determine from URL, siteidmagic = use siteid, any other string = use that)'),\n    ('cookie_secure', None,\n     'Use secure cookie. (None = auto-enable secure cookie for https, True = ever use secure cookie, False = never use secure cookie).'),\n    ('cookie_httponly', False,\n     'Use a httponly cookie that can only be used by the server, not by clientside scripts.'),\n    ('cookie_domain', None,\n     'Domain used in the session cookie. (None = do not specify domain).'),\n    ('cookie_path', None,\n     'Path used in the session cookie (None = auto-detect). Please only set if you know exactly what you are doing.'),\n    ('cookie_lifetime', (0, 12),\n     'Session lifetime [h] of (anonymous, logged-in) users (see HelpOnSessions for details).'),\n  )),\n  # ==========================================================================\n  'auth': ('Authentication / Authorization / Security settings', None, (\n    ('superuser', [],\n     \"List of trusted user names with wiki system administration super powers (not to be confused with ACL admin rights!). Used for e.g. software installation, language installation via SystemPagesSetup and more. See also HelpOnSuperUser.\"),\n    ('auth', DefaultExpression('[MoinAuth()]'),\n     \"list of auth objects, to be called in this order (see HelpOnAuthentication)\"),\n    ('auth_methods_trusted', ['http', 'given', 'xmlrpc_applytoken'], # Note: 'http' auth method is currently just a redirect to 'given'\n     'authentication methods for which users should be included in the special \"Trusted\" ACL group.'),\n    ('secrets', None, \"\"\"Either a long shared secret string used for multiple purposes or a dict {\"purpose\": \"longsecretstring\", ...} for setting up different shared secrets for different purposes. If you don't setup own secret(s), a secret string will be auto-generated from other config settings.\"\"\"),\n    ('DesktopEdition',\n     False,\n     \"if True, give all local users special powers - ''only use this for a local desktop wiki!''\"),\n    ('SecurityPolicy',\n     None,\n     \"Class object hook for implementing security restrictions or relaxations\"),\n    ('actions_superuser',\n     ['newaccount',  # spam bots create tons of user accounts, so better allow it only for superuser\n     ],\n     \"Restrict actions to superuser only (list of strings)\"),\n    ('actions_excluded',\n     ['xmlrpc',  # we do not want wiki admins unknowingly offering xmlrpc service\n      'MyPages',  # only works when used with a non-default SecurityPolicy (e.g. autoadmin)\n      'CopyPage',  # has questionable behaviour regarding subpages a user can't read, but can copy\n      ],\n     \"Exclude unwanted actions (list of strings)\"),\n\n    ('allow_xslt', False,\n        \"if True, enables XSLT processing via 4Suite (Note that this is DANGEROUS. It enables anyone who can edit the wiki to get '''read/write access to your filesystem as the moin process uid/gid''' and to insert '''arbitrary HTML''' into your wiki pages, which is why this setting defaults to `False` (XSLT disabled). Do not set it to other values, except if you know what you do and if you have very trusted editors only).\"),\n\n    ('password_checker', DefaultExpression('_default_password_checker'),\n     'checks whether a password is acceptable (default check is length >= 6, at least 4 different chars, no keyboard sequence, not username used somehow (you can switch this off by using `None`)'),\n\n    ('password_scheme', '{PASSLIB}',\n     'Either \"{PASSLIB}\" (default) to use passlib for creating and upgrading password hashes (see also passlib_crypt_context for passlib configuration), '\n     'or \"{SSHA}\" (or any other of the builtin password schemes) to not use passlib (not recommended).'),\n\n    ('passlib_support', True,\n     'If True (default), import passlib and support password hashes offered by it.'),\n\n    ('passlib_crypt_context', dict(\n        # schemes we want to support (or deprecated schemes for which we still have\n        # hashes in our storage).\n        # note: bcrypt: we did not include it as it needs additional code (that is not pure python\n        #       and thus either needs compiling or installing platform-specific binaries) and\n        #       also there was some bcrypt issue in passlib < 1.5.3.\n        #       pbkdf2_sha512: not included as it needs at least passlib 1.4.0\n        #       sha512_crypt: supported since passlib 1.3.0 (first public release)\n        schemes=[\"sha512_crypt\", ],\n        # default scheme for creating new pw hashes (if not given, passlib uses first from schemes)\n        #default=\"sha512_crypt\",\n        # deprecated schemes get auto-upgraded to the default scheme at login\n        # time or when setting a password (including doing a moin account pwreset).\n        # for passlib >= 1.6, giving [\"auto\"] means that all schemes except the default are deprecated:\n        #deprecated=[\"auto\"],\n        # to support also older passlib versions, rather give a explicit list:\n        #deprecated=[],\n        # vary rounds parameter randomly when creating new hashes...\n        #all__vary_rounds=0.1,\n    ),\n    \"passlib CryptContext arguments, see passlib docs\"),\n\n    ('recovery_token_lifetime', 12,\n     'how long the password recovery token is valid [h]'),\n  )),\n  # ==========================================================================\n  'spam_leech_dos': ('Anti-Spam/Leech/DOS',\n  'These settings help limiting ressource usage and avoiding abuse.',\n  (\n    ('hosts_deny', [], \"List of denied IPs; if an IP ends with a dot, it denies a whole subnet (class A, B or C)\"),\n    ('surge_action_limits',\n     {# allow max. <count> <action> requests per <dt> secs\n        # action: (count, dt)\n        'all': (30, 30), # all requests (except cache/AttachFile action) count for this limit\n        'default': (30, 60), # default limit for actions without a specific limit\n        'show': (30, 60),\n        'recall': (10, 120),\n        'raw': (20, 40),  # some people use this for css\n        'diff': (30, 60),\n        'fullsearch': (10, 120),\n        'edit': (30, 300), # can be lowered after making preview different from edit\n        'rss_rc': (1, 60),\n        # The following actions are often used for images - to avoid pages with lots of images\n        # (like photo galleries) triggering surge protection, we assign rather high limits:\n        'AttachFile': (300, 30),\n        'cache': (600, 30), # cache action is very cheap/efficient\n        # special stuff to prevent someone trying lots of usernames / passwords to log in.\n        # we keep this commented / disabled so that this feature does not get activated by default\n        # (if somebody does not override surge_action_limits with own values):\n        #'auth-ip': (10, 3600),  # same remote ip (any name)\n        #'auth-name': (10, 3600),  # same name (any remote ip)\n     },\n     \"Surge protection tries to deny clients causing too much load/traffic, see HelpOnConfiguration/SurgeProtection.\"),\n    ('surge_lockout_time', 3600, \"time [s] someone gets locked out when ignoring the warnings\"),\n\n    ('textchas', None,\n     \"Spam protection setup using site-specific questions/answers, see HelpOnSpam.\"),\n    ('textchas_disabled_group', None,\n     \"Name of a group of trusted users who do not get asked !TextCha questions.\"),\n    ('textchas_expiry_time', 600,\n     \"Time [s] for a !TextCha to expire.\"),\n\n    ('antispam_master_url', \"http://master.moinmo.in/?action=xmlrpc2\",\n     \"where antispam security policy fetches spam pattern updates (if it is enabled)\"),\n\n    # a regex of HTTP_USER_AGENTS that should be excluded from logging\n    # and receive a FORBIDDEN for anything except viewing a page\n    # list must not contain 'java' because of twikidraw wanting to save drawing uses this useragent\n    ('ua_spiders',\n     ('archiver|bingbot|cfetch|charlotte|crawler|gigabot|googlebot|heritrix|holmes|htdig|httrack|httpunit|'\n      'intelix|jeeves|larbin|leech|libwww-perl|linkbot|linkmap|linkwalk|litefinder|mercator|'\n      'microsoft.url.control|mirror| mj12bot|msnbot|msrbot|neomo|nutbot|omniexplorer|puf|robot|scooter|seekbot|'\n      'sherlock|slurp|sitecheck|snoopy|spider|teleport|twiceler|voilabot|voyager|webreaper|wget|yeti'),\n     \"A regex of HTTP_USER_AGENTs that should be excluded from logging and are not allowed to use actions.\"),\n\n    ('unzip_single_file_size', 2.0 * 1000 ** 2,\n     \"max. size of a single file in the archive which will be extracted [bytes]\"),\n    ('unzip_attachments_space', 200.0 * 1000 ** 2,\n     \"max. total amount of bytes can be used to unzip files [bytes]\"),\n    ('unzip_attachments_count', 101,\n     \"max. number of files which are extracted from the zip file\"),\n  )),\n  # ==========================================================================\n  'style': ('Style / Theme / UI related',\n  'These settings control how the wiki user interface will look like.',\n  (\n    ('sitename', u'Untitled Wiki',\n     \"Short description of your wiki site, displayed below the logo on each page, and used in RSS documents as the channel title [Unicode]\"),\n    ('interwikiname', None, \"unique and stable InterWiki name (prefix, moniker) of the site [Unicode], or None\"),\n    ('logo_string', None, \"The wiki logo top of page, HTML is allowed (`<img>` is possible as well) [Unicode]\"),\n    ('html_pagetitle', None, \"Allows you to set a specific HTML page title (if None, it defaults to the value of `sitename`)\"),\n    ('navi_bar', [u'RecentChanges', u'FindPage', u'HelpContents', ],\n     'Most important page names. Users can add more names in their quick links in user preferences. To link to URL, use `u\"[[url|link title]]\"`, to use a shortened name for long page name, use `u\"[[LongLongPageName|title]]\"`. [list of Unicode strings]'),\n\n    ('theme_default', 'modernized',\n     \"the name of the theme that is used by default (see HelpOnThemes)\"),\n    ('theme_force', False,\n     \"if True, do not allow to change the theme\"),\n\n    ('stylesheets', [],\n     \"List of tuples (media, csshref) to insert after theme css, before user css, see HelpOnThemes.\"),\n\n    ('supplementation_page', False,\n     \"if True, show a link to the supplementation page in the theme\"),\n    ('supplementation_page_name', u'Discussion',\n     \"default name of the supplementation (sub)page [unicode]\"),\n    ('supplementation_page_template', u'DiscussionTemplate',\n     \"default template used for creation of the supplementation page [unicode]\"),\n\n    ('interwiki_preferred', [], \"In dialogues, show those wikis at the top of the list.\"),\n    ('sistersites', [], \"list of tuples `('WikiName', 'sisterpagelist_fetch_url')`\"),\n\n    ('trail_size', 5,\n     \"Number of pages in the trail of visited pages\"),\n\n    ('page_footer1', '', \"Custom HTML markup sent ''before'' the system footer.\"),\n    ('page_footer2', '', \"Custom HTML markup sent ''after'' the system footer.\"),\n    ('page_header1', '', \"Custom HTML markup sent ''before'' the system header / title area but after the body tag.\"),\n    ('page_header2', '', \"Custom HTML markup sent ''after'' the system header / title area (and body tag).\"),\n\n    ('changed_time_fmt', '%H:%M', \"Time format used on Recent``Changes for page edits within the last 24 hours\"),\n    ('date_fmt', '%Y-%m-%d', \"System date format, used mostly in Recent``Changes\"),\n    ('datetime_fmt', '%Y-%m-%d %H:%M:%S', 'Default format for dates and times (when the user has no preferences or chose the \"default\" date format)'),\n    ('chart_options', None, \"If you have gdchart, use something like chart_options = {'width': 720, 'height': 540}\"),\n\n    ('edit_bar', ['Edit', 'Comments', 'Discussion', 'Info', 'Subscribe', 'Quicklink', 'Attachments', 'ActionsMenu'],\n     'list of edit bar entries'),\n    ('history_count', (100, 200, 5, 10, 25, 50), \"Number of revisions shown for info/history action (default_count_shown, max_count_shown, [other values shown as page size choices]). At least first two values (default and maximum) should be provided. If additional values are provided, user will be able to change number of items per page in the UI.\"),\n    ('history_paging', True, \"Enable paging functionality for info action's history display.\"),\n\n    ('show_hosts', True,\n     \"if True, show host names and IPs. Set to False to hide them.\"),\n    ('show_interwiki', False,\n     \"if True, let the theme display your interwiki name\"),\n    ('show_names', True,\n     \"if True, show user names in the revision history and on Recent``Changes. Set to False to hide them.\"),\n    ('show_section_numbers', False,\n     'show section numbers in headings by default'),\n    ('show_timings', False, \"show some timing values at bottom of a page\"),\n    ('show_version', False, \"show moin's version at the bottom of a page\"),\n    ('show_rename_redirect', False, \"if True, offer creation of redirect pages when renaming wiki pages\"),\n\n    ('backlink_method', DefaultExpression('_default_backlink_method'),\n     \"function determining how the (last part of the) pagename should be rendered in the title area\"),\n\n    ('packagepages_actions_excluded',\n     ['setthemename',  # related to questionable theme stuff, see below\n      'copythemefile', # maybe does not work, e.g. if no fs write permissions or real theme file path is unknown to moin\n      'installplugin', # code installation, potentially dangerous\n      'renamepage',    # dangerous with hierarchical acls\n      'deletepage',    # dangerous with hierarchical acls\n      'delattachment', # dangerous, no revisioning\n     ],\n     'list with excluded package actions (e.g. because they are dangerous / questionable)'),\n\n    ('page_credits',\n     [\n       '<a href=\"http://moinmo.in/\" title=\"This site uses the MoinMoin Wiki software.\">MoinMoin Powered</a>',\n       '<a href=\"http://moinmo.in/Python\" title=\"MoinMoin is written in Python.\">Python Powered</a>',\n       '<a href=\"http://moinmo.in/GPL\" title=\"MoinMoin is GPL licensed.\">GPL licensed</a>',\n       '<a href=\"http://validator.w3.org/check?uri=referer\" title=\"Click here to validate this page.\">Valid HTML 4.01</a>',\n     ],\n     'list with html fragments with logos or strings for crediting.'),\n\n    # These icons will show in this order in the iconbar, unless they\n    # are not relevant, e.g email icon when the wiki is not configured\n    # for email.\n    ('page_iconbar', [\"up\", \"edit\", \"view\", \"diff\", \"info\", \"subscribe\", \"raw\", \"print\", ],\n     'list of icons to show in iconbar, valid values are only those in page_icons_table. Available only in classic theme.'),\n\n    # Standard buttons in the iconbar\n    ('page_icons_table',\n     {\n        # key           pagekey, querystr dict, title, icon-key\n        'diff': ('page', {'action': 'diff'}, _(\"Diffs\"), \"diff\"),\n        'info': ('page', {'action': 'info'}, _(\"Info\"), \"info\"),\n        'edit': ('page', {'action': 'edit'}, _(\"Edit\"), \"edit\"),\n        'unsubscribe': ('page', {'action': 'unsubscribe'}, _(\"UnSubscribe\"), \"unsubscribe\"),\n        'subscribe': ('page', {'action': 'subscribe'}, _(\"Subscribe\"), \"subscribe\"),\n        'raw': ('page', {'action': 'raw'}, _(\"Raw\"), \"raw\"),\n        'xml': ('page', {'action': 'show', 'mimetype': 'text/xml'}, _(\"XML\"), \"xml\"),\n        'print': ('page', {'action': 'print'}, _(\"Print\"), \"print\"),\n        'view': ('page', {}, _(\"View\"), \"view\"),\n        'up': ('page_parent_page', {}, _(\"Up\"), \"up\"),\n     },\n     \"dict of {'iconname': (url, title, icon-img-key), ...}. Available only in classic theme.\"),\n    ('show_highlight_msg', False, \"Show message that page has highlighted text \"\n                                  \"and provide link to non-highlighted \"\n                                  \"version.\"),\n  )),\n  # ==========================================================================\n  'editor': ('Editor related', None, (\n    ('editor_default', 'text', \"Editor to use by default, 'text' or 'gui'\"),\n    ('editor_force', True, \"if True, force using the default editor\"),\n    ('editor_ui', 'theonepreferred', \"Editor choice shown on the user interface, 'freechoice' or 'theonepreferred'\"),\n    ('page_license_enabled', False, 'if True, show a license hint in page editor.'),\n    ('page_license_page', u'WikiLicense', 'Page linked from the license hint. [Unicode]'),\n    ('edit_locking', 'warn 10', \"Editor locking policy: `None`, `'warn <timeout in minutes>'`, or `'lock <timeout in minutes>'`\"),\n    ('edit_ticketing', True, None),\n    ('edit_rows', 20, \"Default height of the edit box\"),\n    ('comment_required', False, \"if True, only allow saving if a comment is filled in\"),\n\n  )),\n  # ==========================================================================\n  'paths': ('Paths', None, (\n    ('data_dir', './data/', \"Path to the data directory containing your (locally made) wiki pages.\"),\n    ('data_underlay_dir', './underlay/', \"Path to the underlay directory containing distribution system and help pages.\"),\n    ('cache_dir', None, \"Directory for caching, by default computed from `data_dir`/cache.\"),\n    ('session_dir', None, \"Directory for session storage, by default computed to be `cache_dir`/__session__.\"),\n    ('user_dir', None, \"Directory for user storage, by default computed to be `data_dir`/user.\"),\n    ('plugin_dir', None, \"Plugin directory, by default computed to be `data_dir`/plugin.\"),\n    ('plugin_dirs', [], \"Additional plugin directories.\"),\n\n    ('docbook_html_dir', r\"/usr/share/xml/docbook/stylesheet/nwalsh/html/\",\n     'Path to the directory with the Docbook to HTML XSLT files (optional, used by the docbook parser). The default value is correct for Debian Etch.'),\n    ('shared_intermap', None,\n     \"Path to a file containing global InterWiki definitions (or a list of such filenames)\"),\n  )),\n  # ==========================================================================\n  'urls': ('URLs', None, (\n    # includes the moin version number, so we can have a unlimited cache lifetime\n    # for the static stuff. if stuff changes on version upgrade, url will change\n    # immediately and we have no problem with stale caches.\n    ('url_prefix_static', config.url_prefix_static,\n     \"used as the base URL for icons, css, etc. - includes the moin version number and changes on every release. This replaces the deprecated and sometimes confusing `url_prefix = '/wiki'` setting.\"),\n    ('url_prefix_local', None,\n     \"used as the base URL for some Javascript - set this to a URL on same server as the wiki if your url_prefix_static points to a different server.\"),\n    ('url_prefix_fckeditor', None,\n     \"used as the base URL for FCKeditor - similar to url_prefix_local, but just for FCKeditor.\"),\n\n    ('url_prefix_action', None,\n     \"Use 'action' to enable action URL generation to be compatible with robots.txt. It will generate .../action/info/PageName?action=info then. Recommended for internet wikis.\"),\n\n    ('notification_bot_uri', None, \"URI of the Jabber notification bot.\"),\n\n    ('url_mappings', {},\n     \"lookup table to remap URL prefixes (dict of {{{'prefix': 'replacement'}}}); especially useful in intranets, when whole trees of externally hosted documents move around\"),\n\n  )),\n  # ==========================================================================\n  'pages': ('Special page names', None, (\n    ('page_front_page', u'LanguageSetup',\n     \"Name of the front page. We don't expect you to keep the default. Just read LanguageSetup in case you're wondering... [Unicode]\"),\n\n    # the following regexes should match the complete name when used in free text\n    # the group 'all' shall match all, while the group 'key' shall match the key only\n    # e.g. CategoryFoo -> group 'all' ==  CategoryFoo, group 'key' == Foo\n    # moin's code will add ^ / $ at beginning / end when needed\n    ('page_category_regex', ur'(?P<all>Category(?P<key>(?!Template)\\S+))',\n     'Pagenames exactly matching this regex are regarded as Wiki categories [Unicode]'),\n    ('page_dict_regex', ur'(?P<all>(?P<key>\\S+)Dict)',\n     'Pagenames exactly matching this regex are regarded as pages containing variable dictionary definitions [Unicode]'),\n    ('page_group_regex', ur'(?P<all>(?P<key>\\S+)Group)',\n     'Pagenames exactly matching this regex are regarded as pages containing group definitions [Unicode]'),\n    ('page_template_regex', ur'(?P<all>(?P<key>\\S+)Template)',\n     'Pagenames exactly matching this regex are regarded as pages containing templates for new pages [Unicode]'),\n\n    ('page_local_spelling_words', u'LocalSpellingWords',\n     'Name of the page containing user-provided spellchecker words [Unicode]'),\n  )),\n  # ==========================================================================\n  'user': ('User Preferences related', None, (\n    ('quicklinks_default', [],\n     'List of preset quicklinks for a newly created user accounts. Existing accounts are not affected by this option whereas changes in navi_bar do always affect existing accounts. Preset quicklinks can be removed by the user in the user preferences menu, navi_bar settings not.'),\n    ('subscribed_pages_default', [],\n     \"List of pagenames used for presetting page subscriptions for newly created user accounts.\"),\n\n    ('email_subscribed_events_default',\n     [\n        PageChangedEvent.__name__,\n        PageRenamedEvent.__name__,\n        PageDeletedEvent.__name__,\n        PageCopiedEvent.__name__,\n        PageRevertedEvent.__name__,\n        FileAttachedEvent.__name__,\n     ], None),\n    ('jabber_subscribed_events_default', [], None),\n\n    ('tz_offset', 0.0,\n     \"default time zone offset in hours from UTC\"),\n\n    ('userprefs_disabled', [],\n     \"Disable the listed user preferences plugins.\"),\n  )),\n  # ==========================================================================\n  'various': ('Various', None, (\n    ('bang_meta', True, 'if True, enable {{{!NoWikiName}}} markup'),\n    ('caching_formats', ['text_html'], \"output formats that are cached; set to [] to turn off caching (useful for development)\"),\n\n    ('config_check_enabled', False, \"if True, check configuration for unknown settings.\"),\n\n    ('default_markup', 'wiki', 'Default page parser / format (name of module in `MoinMoin.parser`)'),\n\n    ('html_head', '', \"Additional <HEAD> tags, see HelpOnThemes.\"),\n    ('html_head_queries', '<meta name=\"robots\" content=\"noindex,nofollow\">\\n',\n     \"Additional <HEAD> tags for requests with query strings, like actions.\"),\n    ('html_head_posts', '<meta name=\"robots\" content=\"noindex,nofollow\">\\n',\n     \"Additional <HEAD> tags for POST requests.\"),\n    ('html_head_index', '<meta name=\"robots\" content=\"index,follow\">\\n',\n     \"Additional <HEAD> tags for some few index pages.\"),\n    ('html_head_normal', '<meta name=\"robots\" content=\"index,nofollow\">\\n',\n     \"Additional <HEAD> tags for most normal pages.\"),\n\n    ('language_default', 'en', \"Default language for user interface and page content, see HelpOnLanguages.\"),\n    ('language_ignore_browser', False, \"if True, ignore user's browser language settings, see HelpOnLanguages.\"),\n\n    ('log_remote_addr', True,\n     \"if True, log the remote IP address (and maybe hostname).\"),\n    ('log_reverse_dns_lookups', False,\n     \"if True, do a reverse DNS lookup on page SAVE.\"),\n    ('log_timing', False,\n     \"if True, add timing infos to the log output to analyse load conditions\"),\n    ('log_events_format', 1,\n     \"0 = no events logging, 1 = standard format (like <= 1.9.7) [default], 2 = extended format\"),\n\n    # some dangerous mimetypes (we don't use \"content-disposition: inline\" for them when a user\n    # downloads such attachments, because the browser might execute e.g. Javascript contained\n    # in the HTML and steal your moin session cookie or do other nasty stuff)\n    ('mimetypes_xss_protect',\n     [\n       'text/html',\n       'image/svg+xml',\n       'application/x-shockwave-flash',\n       'application/xhtml+xml',\n     ],\n     '\"content-disposition: inline\" isn\\'t used for them when a user downloads such attachments'),\n\n    ('mimetypes_embed',\n     [\n       'application/x-dvi',\n       'application/postscript',\n       'application/pdf',\n       'application/ogg',\n       'application/vnd.visio',\n       'image/x-ms-bmp',\n       'image/svg+xml',\n       'image/tiff',\n       'image/x-photoshop',\n       'audio/mpeg',\n       'audio/midi',\n       'audio/x-wav',\n       'video/fli',\n       'video/mpeg',\n       'video/quicktime',\n       'video/x-msvideo',\n       'chemical/x-pdb',\n       'x-world/x-vrml',\n     ],\n     'mimetypes that can be embedded by the [[HelpOnMacros/EmbedObject|EmbedObject macro]]'),\n\n    ('refresh', None,\n     \"refresh = (minimum_delay_s, targets_allowed) enables use of `#refresh 5 PageName` processing instruction, targets_allowed must be either `'internal'` or `'external'`\"),\n    ('rss_cache', 60, \"suggested caching time for Recent''''''Changes RSS, in second\"),\n\n    ('search_results_per_page', 25, \"Number of hits shown per page in the search results\"),\n\n    ('siteid', 'default', None),\n    ('xmlrpc_overwrite_user', True, \"Overwrite authenticated user at start of xmlrpc code\"),\n  )),\n}\n\n#\n# The 'options' dict carries default MoinMoin options. The dict is a\n# group name to tuple mapping.\n# Each group tuple consists of the following items:\n#   group section heading, group help text, option list\n#\n# where each 'option list' is a tuple or list of option tuples\n#\n# each option tuple consists of\n#   option name, default value, help text\n#\n# All the help texts will be displayed by the WikiConfigHelp() macro.\n#\n# Unlike the options_no_group_name dict, option names in this dict\n# are automatically prefixed with \"group name '_'\" (i.e. the name of\n# the group they are in and an underscore), e.g. the 'hierarchic'\n# below creates an option called \"acl_hierarchic\".\n#\n# If you need to add a complex default expression that results in an\n# object and should not be shown in the __repr__ form in WikiConfigHelp(),\n# you can use the DefaultExpression class, see 'auth' above for example.\n#\n#\noptions = {\n    'acl': ('Access control lists',\n    'ACLs control who may do what, see HelpOnAccessControlLists.',\n    (\n      ('hierarchic', False, 'True to use hierarchical ACLs'),\n      ('rights_default', u\"Trusted:read,write,delete,revert Known:read All:read\",\n       \"ACL used if no ACL is specified on the page\"),\n      ('rights_before', u\"\",\n       \"ACL that is processed before the on-page/default ACL\"),\n      ('rights_after', u\"\",\n       \"ACL that is processed after the on-page/default ACL\"),\n      ('rights_valid', ['read', 'write', 'delete', 'revert', 'admin'],\n       \"Valid tokens for right sides of ACL entries.\"),\n    )),\n\n    'xapian': ('Xapian search', \"Configuration of the Xapian based indexed search, see HelpOnXapian.\", (\n      ('search', False,\n       \"True to enable the fast, indexed search (based on the Xapian search library)\"),\n      ('index_dir', None,\n       \"Directory where the Xapian search index is stored (None = auto-configure wiki local storage)\"),\n      ('stemming', False,\n       \"True to enable Xapian word stemmer usage for indexing / searching.\"),\n      ('index_history', False,\n       \"True to enable indexing of non-current page revisions.\"),\n    )),\n\n    'user': ('Users / User settings', None, (\n      ('email_unique', True,\n       \"if True, check email addresses for uniqueness and don't accept duplicates.\"),\n      ('jid_unique', True,\n       \"if True, check Jabber IDs for uniqueness and don't accept duplicates.\"),\n\n      ('homewiki', u'Self',\n       \"interwiki name of the wiki where the user home pages are located [Unicode] - useful if you have ''many'' users. You could even link to nonwiki \\\"user pages\\\" if the wiki username is in the target URL.\"),\n\n      ('checkbox_fields',\n       [\n        ('mailto_author', lambda _: _('Publish my email (not my wiki homepage) in author info')),\n        ('edit_on_doubleclick', lambda _: _('Open editor on double click')),\n        ('remember_last_visit', lambda _: _('After login, jump to last visited page')),\n        ('show_comments', lambda _: _('Show comment sections')),\n        ('show_nonexist_qm', lambda _: _('Show question mark for non-existing pagelinks')),\n        ('show_page_trail', lambda _: _('Show page trail')),\n        ('show_toolbar', lambda _: _('Show icon toolbar')),\n        ('show_topbottom', lambda _: _('Show top/bottom links in headings')),\n        ('show_fancy_diff', lambda _: _('Show fancy diffs')),\n        ('wikiname_add_spaces', lambda _: _('Add spaces to displayed wiki names')),\n        ('remember_me', lambda _: _('Remember login information')),\n\n        ('disabled', lambda _: _('Disable this account forever')),\n        # if an account is disabled, it may be used for looking up\n        # id -> username for page info and recent changes, but it\n        # is not usable for the user any more:\n       ],\n       \"Describes user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_defaults',\n       {\n        'mailto_author': 0,\n        'edit_on_doubleclick': 1,\n        'remember_last_visit': 0,\n        'show_comments': 0,\n        'show_nonexist_qm': False,\n        'show_page_trail': 1,\n        'show_toolbar': 1,\n        'show_topbottom': 0,\n        'show_fancy_diff': 1,\n        'wikiname_add_spaces': 0,\n        'remember_me': 1,\n       },\n       \"Defaults for user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_disable', [],\n       \"Disable user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('checkbox_remove', [],\n       \"Remove user preferences, see HelpOnConfiguration/UserPreferences.\"),\n\n      ('form_fields',\n       [\n        ('name', _('Name'), \"text\", \"36\", _(\"(Use FirstnameLastname)\")),\n        ('aliasname', _('Alias-Name'), \"text\", \"36\", ''),\n        ('email', _('Email'), \"text\", \"36\", ''),\n        ('jid', _('Jabber ID'), \"text\", \"36\", ''),\n        ('css_url', _('User CSS URL'), \"text\", \"40\", _('(Leave it empty for disabling user CSS)')),\n        ('edit_rows', _('Editor size'), \"text\", \"3\", ''),\n       ],\n       None),\n\n      ('form_defaults',\n       {# key: default - do NOT remove keys from here!\n        'name': '',\n        'aliasname': '',\n        'password': '',\n        'password2': '',\n        'email': '',\n        'jid': '',\n        'css_url': '',\n        'edit_rows': \"20\",\n       },\n       None),\n\n      ('form_disable', [], \"list of field names used to disable user preferences form fields\"),\n\n      ('form_remove', [], \"list of field names used to remove user preferences form fields\"),\n\n      ('transient_fields',\n       ['id', 'valid', 'may', 'auth_username', 'password', 'password2', 'auth_method', 'auth_attribs', ],\n       \"User object attributes that are not persisted to permanent storage (internal use).\"),\n    )),\n\n    'openidrp': ('OpenID Relying Party',\n        'These settings control the built-in OpenID Relying Party (client).',\n    (\n      ('allowed_op', [], \"List of forced providers\"),\n    )),\n\n    'openid_server': ('OpenID Server',\n        'These settings control the built-in OpenID Identity Provider (server).',\n    (\n      ('enabled', False, \"True to enable the built-in OpenID server.\"),\n      ('restricted_users_group', None, \"If set to a group name, the group members are allowed to use the wiki as an OpenID provider. (None = allow for all users)\"),\n      ('enable_user', False, \"If True, the OpenIDUser processing instruction is allowed.\"),\n    )),\n\n    'mail': ('Mail settings',\n        'These settings control outgoing and incoming email from and to the wiki.',\n    (\n      ('from', None, \"Used as From: address for generated mail.\"),\n      ('login', None, \"'username userpass' for SMTP server authentication (None = don't use auth).\"),\n      ('smarthost', None, \"Address of SMTP server to use for sending mail (None = don't use SMTP server).\"),\n      ('sendmail', None, \"sendmail command to use for sending mail (None = don't use sendmail)\"),\n\n      ('import_subpage_template', u\"$from-$date-$subject\", \"Create subpages using this template when importing mail.\"),\n      ('import_pagename_search', ['subject', 'to', ], \"Where to look for target pagename specification.\"),\n      ('import_pagename_envelope', u\"%s\", \"Use this to add some fixed prefix/postfix to the generated target pagename.\"),\n      ('import_pagename_regex', r'\\[\\[([^\\]]*)\\]\\]', \"Regular expression used to search for target pagename specification.\"),\n      ('import_wiki_addrs', [], \"Target mail addresses to consider when importing mail\"),\n\n      ('notify_page_text', '%(intro)s%(difflink)s\\n\\n%(comment)s%(diff)s',\n       \"Template for putting together the pieces for the page changed/deleted/renamed notification mail text body\"),\n      ('notify_page_changed_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page changed notification mail subject header\"),\n      ('notify_page_changed_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page or wiki category on \"%(sitename)s\" for change notification.\\n\\n'\n         'The \"%(pagename)s\" page has been changed by %(editor)s:\\n'),\n       \"Template for the page changed notification mail intro text\"),\n      ('notify_page_deleted_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page deleted notification mail subject header\"),\n      ('notify_page_deleted_intro',\n       _(\"Dear wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(sitename)s\" for change notification.\\n\\n'\n         'The page \"%(pagename)s\" has been deleted by %(editor)s:\\n\\n'),\n       \"Template for the page deleted notification mail intro text\"),\n      ('notify_page_renamed_subject', _('[%(sitename)s] %(trivial)sUpdate of \"%(pagename)s\" by %(username)s'),\n       \"Template for the page renamed notification mail subject header\"),\n      ('notify_page_renamed_intro',\n       _(\"Dear wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(sitename)s\" for change notification.\\n\\n'\n         'The page \"%(pagename)s\" has been renamed from \"%(oldname)s\" by %(editor)s:\\n'),\n       \"Template for the page renamed notification mail intro text\"),\n      ('notify_att_added_subject', _('[%(sitename)s] New attachment added to page %(pagename)s'),\n       \"Template for the attachment added notification mail subject header\"),\n      ('notify_att_added_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(page_name)s\" for change notification. '\n         \"An attachment has been added to that page by %(editor)s. \"\n         \"Following detailed information is available:\\n\\n\"\n         \"Attachment name: %(attach_name)s\\n\"\n         \"Attachment size: %(attach_size)s\\n\"),\n       \"Template for the attachment added notification mail intro text\"),\n      ('notify_att_removed_subject', _('[%(sitename)s] Removed attachment from page %(pagename)s'),\n       \"Template for the attachment removed notification mail subject header\"),\n      ('notify_att_removed_intro',\n       _(\"Dear Wiki user,\\n\\n\"\n         'You have subscribed to a wiki page \"%(page_name)s\" for change notification. '\n         \"An attachment has been removed from that page by %(editor)s. \"\n         \"Following detailed information is available:\\n\\n\"\n         \"Attachment name: %(attach_name)s\\n\"\n         \"Attachment size: %(attach_size)s\\n\"),\n       \"Template for the attachment removed notification mail intro text\"),\n      ('notify_user_created_subject',\n       _(\"[%(sitename)s] New user account created\"),\n       \"Template for the user created notification mail subject header\"),\n      ('notify_user_created_intro',\n       _('Dear Superuser, a new user has just been created on \"%(sitename)s\". Details follow:\\n\\n'\n         '    User name: %(username)s\\n'\n         '    Email address: %(useremail)s'),\n       \"Template for the user created notification mail intro text\"),\n    )),\n\n    'backup': ('Backup settings',\n        'These settings control how the backup action works and who is allowed to use it.',\n    (\n      ('compression', 'gz', 'What compression to use for the backup (\"gz\" or \"bz2\").'),\n      ('users', [], 'List of trusted user names who are allowed to get a backup.'),\n      ('include', [], 'List of pathes to backup.'),\n      ('exclude', lambda self, filename: False, 'Function f(self, filename) that tells whether a file should be excluded from backup. By default, nothing is excluded.'),\n    )),\n    'rss': ('RSS settings',\n        'These settings control RSS behaviour.',\n    (\n      ('items_default', 15, \"Default maximum items value for RSS feed. Can be \"\n                            \"changed via items URL query parameter of rss_rc \"\n                            \"action.\"),\n      ('items_limit', 100, \"Limit for item count got via RSS (i. e. user \"\n                           \"can't get more than items_limit items even via \"\n                           \"changing items URL query parameter).\"),\n      ('unique', 0, \"If set to 1, for each page name only one RSS item would \"\n                    \"be shown. Can be changed via unique rss_rc action URL \"\n                    \"query parameter.\"),\n      ('diffs', 0, \"Add diffs in RSS item descriptions by default. Can be \"\n                   \"changed via diffs URL query parameter of rss_rc action.\"),\n      ('ddiffs', 0, \"If set to 1, links to diff view instead of page itself \"\n                    \"would be generated by default. Can be changed via ddiffs \"\n                    \"URL query parameter of rss_rc action.\"),\n      ('lines_default', 20, \"Default line count limit for diffs added as item \"\n                            \"descriptions for RSS items. Can be changed via \"\n                            \"lines URL query parameter of rss_rc action.\"),\n      ('lines_limit', 100, \"Limit for possible line count for diffs added as \"\n                           \"item descriptions in RSS.\"),\n      ('show_attachment_entries', 0, \"If set to 1, items, related to \"\n                                     \"attachment management, would be added to \"\n                                     \"RSS feed. Can be changed via show_att \"\n                                     \"URL query parameter of rss_rc action.\"),\n      ('page_filter_pattern', \"\", \"Default page filter pattern for RSS feed. \"\n                                  \"Empty pattern matches to any page. Pattern \"\n                                  \"beginning with circumflex is interpreted as \"\n                                  \"regular expression. Pattern ending with \"\n                                  \"slash matches page and all its subpages. \"\n                                  \"Otherwise pattern sets specific pagename. \"\n                                  \"Can be changed via page URL query parameter \"\n                                  \"of rss_rc action.\"),\n      ('show_page_history_link', True, \"Add link to page change history \"\n                                       \"RSS feed in theme.\"),\n    )),\n    'search_macro': ('Search macro settings',\n        'Settings related to behaviour of search macros (such as FullSearch, '\n        'FullSearchCached, PageList)',\n    (\n      ('parse_args', False, \"Do search macro parameter parsing. In previous \"\n                            \"versions of MoinMoin, whole search macro \"\n                            \"parameter string had been interpreted as needle. \"\n                            \"Now, to provide ability to pass additional \"\n                            \"parameters, this behaviour should be changed.\"),\n      ('highlight_titles', 1, \"Perform title matches highlighting by default \"\n                              \"in search results generated by macro.\"),\n      ('highlight_pages', 1, \"Add highlight parameter to links in search \"\n                             \"results generated by search macros by default.\"),\n    )),\n}\n\ndef _add_options_to_defconfig(opts, addgroup=True):\n    for groupname in opts:\n        group_short, group_doc, group_opts = opts[groupname]\n        for name, default, doc in group_opts:\n            if addgroup:\n                name = groupname + '_' + name\n            if isinstance(default, DefaultExpression):\n                default = default.value\n            setattr(DefaultConfig, name, default)\n\n_add_options_to_defconfig(options)\n_add_options_to_defconfig(options_no_group_name, False)\n\n# remove the gettext pseudo function\ndel _\n\n"], "filenames": ["MoinMoin/config/__init__.py", "MoinMoin/config/multiconfig.py"], "buggy_code_start_loc": [15, 1145], "buggy_code_end_loc": [16, 1145], "fixing_code_start_loc": [15, 1146], "fixing_code_end_loc": [16, 1147], "type": "CWE-79", "message": "MoinMoin is a wiki engine. In MoinMoin before version 1.9.11, an attacker with write permissions can upload an SVG file that contains malicious javascript. This javascript will be executed in a user's browser when the user is viewing that SVG file on the wiki. Users are strongly advised to upgrade to a patched version. MoinMoin Wiki 1.9.11 has the necessary fixes and also contains other important fixes.", "other": {"cve": {"id": "CVE-2020-15275", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-11T16:15:13.237", "lastModified": "2022-10-18T20:47:16.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MoinMoin is a wiki engine. In MoinMoin before version 1.9.11, an attacker with write permissions can upload an SVG file that contains malicious javascript. This javascript will be executed in a user's browser when the user is viewing that SVG file on the wiki. Users are strongly advised to upgrade to a patched version. MoinMoin Wiki 1.9.11 has the necessary fixes and also contains other important fixes."}, {"lang": "es", "value": "MoinMoin es un motor de wiki.&#xa0;En MoinMoin antes de la versi\u00f3n 1.9.11, un atacante con permisos de escritura puede cargar un archivo SVG que contiene javascript malicioso.&#xa0;Este javascript se ejecutar\u00e1 en el navegador de un usuario cuando el usuario est\u00e9 viendo ese archivo SVG en la wiki.&#xa0;Se recomienda encarecidamente a los usuarios que se actualicen a una versi\u00f3n parcheada.&#xa0;MoinMoin Wiki versi\u00f3n 1.9.11 tiene las correcciones necesarias y tambi\u00e9n contiene otras correcciones importantes"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moinmo:moinmoin:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.9.11", "matchCriteriaId": "90280389-72FE-47AD-9A03-4287C050976A"}]}]}], "references": [{"url": "https://advisory.checkmarx.net/advisory/CX-2020-4285", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/moinwiki/moin-1.9/commit/31de9139d0aabc171e94032168399b4a0b2a88a2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/moinwiki/moin-1.9/releases/tag/1.9.11", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/moinwiki/moin-1.9/security/advisories/GHSA-4q96-6xhq-ff43", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/moinwiki/moin-1.9/commit/31de9139d0aabc171e94032168399b4a0b2a88a2"}}