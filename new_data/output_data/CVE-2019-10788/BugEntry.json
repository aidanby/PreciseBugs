{"buggy_code": ["/*jshint laxbreak:true */\n\nvar sizeParser = require('filesize-parser');\nvar exec = require('child_process').exec, child;\n\nmodule.exports = function(path, opts, cb) {\n  if (!cb) {\n    cb = opts;\n    opts = {};\n  }\n\n  var cmd = module.exports.cmd(path, opts);\n  opts.timeout = opts.timeout || 5000;\n\n  exec(cmd, opts, function(e, stdout, stderr) {\n    if (e) { return cb(e); }\n    if (stderr) { return cb(new Error(stderr)); }\n\n    return cb(null, module.exports.parse(path, stdout, opts));\n  });\n};\n\nmodule.exports.cmd = function(path, opts) {\n  opts = opts || {};\n  var format = [\n    'name=',\n    'size=%[size]',\n    'format=%m',\n    'colorspace=%[colorspace]',\n    'height=%[height]',\n    'width=%[width]',\n    'orientation=%[orientation]',\n    (opts.exif ? '%[exif:*]' : '')\n  ].join(\"\\n\");\n\n  return 'identify -format \"' + format + '\" ' + path;\n};\n\nmodule.exports.parse = function(path, stdout, opts) {\n  var lines = stdout.split('\\n');\n  var ret = {path: path};\n  var i;\n\n  for (i = 0; i < lines.length; i++) {\n    if (lines[i]) {\n      lines[i] = lines[i].split('=');\n\n      // Parse exif metadata keys\n      if (lines[i][0].substr(0, 5) === 'exif:') {\n        if (!ret.exif) {\n          ret.exif = {};\n        }\n\n        ret.exif[lines[i][0].substr(5)] = lines[i][1];\n\n      // Parse normal metadata keys\n      } else {\n        ret[lines[i][0]] = lines[i][1];\n      }\n    }\n  }\n\n  if (ret.width) { ret.width = parseInt(ret.width, 10); }\n  if (ret.height) { ret.height = parseInt(ret.height, 10); }\n\n  if (ret.size) {\n    if (ret.size.substr(ret.size.length - 2) === 'BB') {\n      ret.size = ret.size.substr(0, ret.size.length - 1);\n    }\n\n    ret.size = parseInt(sizeParser(ret.size));\n  }\n\n  if (ret.colorspace && ret.colorspace === 'sRGB') {\n    ret.colorspace = 'RGB';\n  }\n\n  if (ret.orientation === 'Undefined') {\n    ret.orientation = '';\n  }\n\n  if (opts && opts.autoOrient\n      && ( ret.orientation === 'LeftTop'\n        ||\u00a0ret.orientation === 'RightTop'\n        ||\u00a0ret.orientation === 'LeftBottom'\n        ||\u00a0ret.orientation === 'RightBottom')) {\n\n    ret.width  = ret.width + ret.height;\n    ret.height = ret.width - ret.height;\n    ret.width  = ret.width - ret.height;\n  }\n\n  return ret;\n};\n"], "fixing_code": ["/*jshint laxbreak:true */\n\nvar sizeParser = require('filesize-parser');\nvar exec = require('child_process').exec, child;\n\nmodule.exports = function(path, opts, cb) {\n  if (!cb) {\n    cb = opts;\n    opts = {};\n  }\n\n  if(/;|&|`|\\$|\\(|\\)|\\|\\||\\||!|>|<|\\?|\\${/g.test(JSON.stringify(path))) {\n    console.log('Input Validation failed, Suspicious Characters found');\n  } else {\n    var cmd = module.exports.cmd(path, opts);\n    opts.timeout = opts.timeout || 5000;\n    exec(cmd, opts, function(e, stdout, stderr) {\n      if (e) { return cb(e); }\n    if (stderr) { return cb(new Error(stderr)); }\n\n      return cb(null, module.exports.parse(path, stdout, opts));\n  });\n}\n};\n\nmodule.exports.cmd = function(path, opts) {\n  opts = opts || {};\n  var format = [\n    'name=',\n    'size=%[size]',\n    'format=%m',\n    'colorspace=%[colorspace]',\n    'height=%[height]',\n    'width=%[width]',\n    'orientation=%[orientation]',\n    (opts.exif ? '%[exif:*]' : '')\n  ].join(\"\\n\");\n\n  return 'identify -format \"' + format + '\" ' + path;\n};\n\nmodule.exports.parse = function(path, stdout, opts) {\n  var lines = stdout.split('\\n');\n  var ret = {path: path};\n  var i;\n\n  for (i = 0; i < lines.length; i++) {\n    if (lines[i]) {\n      lines[i] = lines[i].split('=');\n\n      // Parse exif metadata keys\n      if (lines[i][0].substr(0, 5) === 'exif:') {\n        if (!ret.exif) {\n          ret.exif = {};\n        }\n\n        ret.exif[lines[i][0].substr(5)] = lines[i][1];\n\n      // Parse normal metadata keys\n      } else {\n        ret[lines[i][0]] = lines[i][1];\n      }\n    }\n  }\n\n  if (ret.width) { ret.width = parseInt(ret.width, 10); }\n  if (ret.height) { ret.height = parseInt(ret.height, 10); }\n\n  if (ret.size) {\n    if (ret.size.substr(ret.size.length - 2) === 'BB') {\n      ret.size = ret.size.substr(0, ret.size.length - 1);\n    }\n\n    ret.size = parseInt(sizeParser(ret.size));\n  }\n\n  if (ret.colorspace && ret.colorspace === 'sRGB') {\n    ret.colorspace = 'RGB';\n  }\n\n  if (ret.orientation === 'Undefined') {\n    ret.orientation = '';\n  }\n\n  if (opts && opts.autoOrient\n      && ( ret.orientation === 'LeftTop'\n        ||\u00a0ret.orientation === 'RightTop'\n        ||\u00a0ret.orientation === 'LeftBottom'\n        ||\u00a0ret.orientation === 'RightBottom')) {\n\n    ret.width  = ret.width + ret.height;\n    ret.height = ret.width - ret.height;\n    ret.width  = ret.width - ret.height;\n  }\n\n  return ret;\n};\n"], "filenames": ["index.js"], "buggy_code_start_loc": [12], "buggy_code_end_loc": [20], "fixing_code_start_loc": [12], "fixing_code_end_loc": [24], "type": "CWE-78", "message": "im-metadata through 3.0.1 allows remote attackers to execute arbitrary commands via the \"exec\" argument. It is possible to inject arbitrary commands as part of the metadata options which is given to the \"exec\" function.", "other": {"cve": {"id": "CVE-2019-10788", "sourceIdentifier": "report@snyk.io", "published": "2020-02-04T21:15:10.730", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "im-metadata through 3.0.1 allows remote attackers to execute arbitrary commands via the \"exec\" argument. It is possible to inject arbitrary commands as part of the metadata options which is given to the \"exec\" function."}, {"lang": "es", "value": "im-metadata por medio de 3.0.1, permite a atacantes remotos ejecutar comandos arbitrarios por medio del argumento \"exec\". Es posible inyectar comandos arbitrarios como parte de las opciones de metadatos que son otorgadas a la funci\u00f3n \"exec\"."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dnt:im-metadata:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "3.0.1", "matchCriteriaId": "28AA4536-291E-42C4-952B-F0303682EB03"}]}]}], "references": [{"url": "https://github.com/Turistforeningen/node-im-metadata/commit/ea15dddbe0f65694bfde36b78dd488e90f246639", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-IMMETADATA-544184", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Turistforeningen/node-im-metadata/commit/ea15dddbe0f65694bfde36b78dd488e90f246639"}}