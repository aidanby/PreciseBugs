{"buggy_code": ["/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + $(\"#id_name\").val());\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "{% extends \"admin/listing.html\" %}\n\n{% load i18n admin_tags lib_tags static%}\n\n{% block pagetitle %}{% trans \"Domains\" %}{% endblock %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script src=\"{% static 'transport/js/transport.js' %}\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\n   $(document).ready(function() {\n       admin = new Domains({\n           load_page_url: \"{% url 'admin:domain_page' %}\"\n       });\n   });\n  </script>\n{% extra_static_content \"domains\" \"js\" user %}\n{% endblock %}\n\n{% block toolbar_right %}\n  {% if perms.admin.add_domain %}\n    <a href=\"{% url 'admin:domain_add' %}\" class=\"btn btn-primary\" data-toggle=\"ajaxmodal\" modalcb=\"admin.newdomain_cb\">\n      <span class=\"fa fa-plus\"></span> {% trans \"Add\" %}\n    </a>\n  {% endif %}\n{% endblock %}\n\n{% block actions %}{% domains_menu \"domains\" user %}{% endblock %}\n", "/*\n * Global javascript utilities\n */\n\n/* global $ */\n\nvar static_url = \"\";\n\n/*\n * A simple function to initialize the value of the global variable\n * 'media_url' (corresponding to django's MEDIA_URL variable).\n */\nfunction set_static_url(url) {\n    static_url = url;\n}\n\n/*\n * Shortcut function that construct an url from the media_url and the\n * given value.\n */\nfunction get_static_url(value) {\n    return static_url + value;\n}\n\n/**\n * Open a modal box and load its content using an AJAX request.\n *\n * @param {Object} e - event object\n */\nfunction modalbox(e, css, defhref, defcb, defclosecb) {\n    e.preventDefault();\n    var $this = $(this);\n    var href = (defhref !== undefined) ? defhref : $this.attr('href');\n    var modalcb = (defcb !== undefined) ? defcb : $this.attr('modalcb');\n    var closecb = (defclosecb !== undefined) ? defclosecb : $this.attr(\"closecb\");\n\n    if (href.indexOf('#') === 0) {\n        $(href).modal('open');\n        return;\n    }\n    if ($(\"#modalbox\").length) {\n        return;\n    }\n    $.ajax({\n        type: \"GET\",\n        url: href\n    }).done(function(data) {\n        var $div = $('<div />', {\n            id: \"modalbox\", 'class': \"modal fade\", role: \"modal\",\n            html: data, 'aria-hidden': true\n        });\n\n        $div.modal({show: false});\n        $div.one('shown.bs.modal', function() {\n            if ($(\".selectpicker\").length) {\n                $(\".selectpicker\").selectize();\n            }\n            $(\".help\").popover({\n                container: \"#modalbox\",\n                trigger: \"hover\"\n            }).click(function(e) {e.preventDefault();});\n            if (modalcb !== undefined) {\n                if (typeof modalcb === \"function\") modalcb(); else eval(modalcb + '()');\n            }\n        }).on('hidden.bs.modal', function(e) {\n            var $target = $(e.target);\n\n            if (!$target.is($(this))) {\n                return;\n            }\n            $(\"#modalbox\").remove();\n            if (closecb !== undefined) {\n                if (typeof closecb === \"function\") closecb(); else eval(closecb + '()');\n            }\n        });\n        $div.modal('show');\n\n        if (css !== undefined) {\n            $div.css(css);\n        }\n    });\n}\n\nfunction modalbox_autowidth(e) {\n    modalbox.apply(this, [e]);\n}\n\n/*\n * Simple shorcut do create a bootstrap alert box (error mode)\n */\nfunction build_alert_box(msg, level) {\n    return $('<div class=\"alert alert-' + level + '\"> \\\n<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>' + msg + \"</div>\");\n}\n\nfunction build_error_alert(msg) {\n    return build_alert_box(msg, 'danger');\n}\n\nfunction build_success_alert(msg) {\n    return build_alert_box(msg, 'success');\n}\n\n\n/*\n * '.keys()' method support for old browsers :p\n */\nif (!Object.keys) {\n    Object.keys = function (obj) {\n        var keys = [],\n            k;\n        for (k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n}\n\n/*\n * Clean all errors in a given form.\n */\nfunction clean_form_errors(formid) {\n    $(\"#\" + formid + \" div.has-error\").removeClass(\"has-error\");\n    $(\"#\" + formid + \" span.help-block\").remove();\n}\n\nfunction display_field_error($field, error) {\n    var spanid = $field.attr('id') + \"-error\";\n    var $span = $(\"#\" + spanid);\n\n    if (!$field.parents(\".form-group\").hasClass(\"has-error\")) {\n        $field.parents(\".form-group\").addClass(\"has-error\");\n    }\n    if (!$span.length) {\n        $span = $(\"<span />\", {\n            class: \"help-block\",\n            html: error,\n            id: spanid\n        });\n        $field.parents(\".form-group\").append($span);\n    } else {\n        $span.html(error);\n    }\n}\n\n/*\n * Display validation errors for a given form.\n */\nfunction display_form_errors(formid, data) {\n    clean_form_errors(formid);\n    $.each(data.form_errors, function(id, value) {\n        var fullid = \"id_\" + (data.prefix ? data.prefix + \"-\" : \"\") + id;\n        var $widget = $(\"#\" + formid + \" #\" + fullid);\n        var error = value.join(' ');\n\n        display_field_error($widget, error);\n    });\n}\n\n/*\n * Simple function that sends a form using an 'ajax' post request.\n *\n * The function is intended to be used in a modal environment.\n */\nfunction simple_ajax_form_post(e, options) {\n    e.preventDefault();\n    var $form = (options.formid !== undefined) ? $(\"#\" + options.formid) : $(\"form\");\n    var defaults = {reload_on_success: true, reload_mode: 'full', modal: true};\n    var opts = $.extend({}, defaults, options);\n    var args = $form.serialize();\n\n    if (options.extradata !== undefined) {\n        args += \"&\" + options.extradata;\n    }\n    $.ajax({\n        type: \"POST\",\n        global: false,\n        url: $form.attr(\"action\"),\n        data: args\n    }).done(function(data) {\n        if (opts.modal) {\n            $(\"#modalbox\").modal('hide');\n        }\n        if (opts.success_cb !== undefined) {\n            opts.success_cb(data);\n            return;\n        }\n        if (opts.reload_on_success) {\n            if (opts.reload_mode === 'full') {\n                window.location.reload();\n            } else {\n                histomanager.update(true);\n            }\n        }\n        if (data && data.message) {\n            $(\"body\").notify('success', data.message, 2000);\n        }\n    }).fail(function(jqxhr) {\n        var data = $.parseJSON(jqxhr.responseText);\n        if (data.form_errors) {\n            display_form_errors(options.formid, data);\n        } else {\n            if (opts.modal) {\n                $('.modal-body').prepend(build_error_alert(data));\n            } else {\n                $('body').notify('error', data);\n            }\n        }\n        if (opts.error_cb) {\n            opts.error_cb(data);\n        }\n    });\n}\n\n/*\n * The following code prevents a bug under IE7 because fullpath is\n * returned instead of a relative one. (even if mootools uses\n * getAttribute(\"href\", 2), this is not working for AJAX requests)\n */\nfunction gethref(obj) {\n    var url = $(obj).attr(\"href\");\n    var re = new RegExp(\"^(https?):\");\n    var scheme = re.exec(url);\n\n    if (scheme !== null) {\n        var baseurl = scheme[0] + \"://\" + location.host + location.pathname;\n        return url.replace(baseurl, \"\");\n    }\n    return url;\n}\n\n/*\n * Extract the current URL parameters into a dictionnary.\n *\n * Ref:\n * http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction parse_qs(raw) {\n    if (raw === \"\") { return {}; }\n    var res = {};\n\n    for (var i = 0; i < raw.length; i++) {\n        var p = raw[i].split('=');\n\n        if (p.length !== 2) { continue; }\n        res[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return res;\n}\n\n/*\n * Extract a specific URL parameter using its name.\n *\n * Ref: http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction get_parameter_by_name(url, name, dont_replace_plus) {\n    name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(url);\n\n    if (results === null) {\n        return \"\";\n    }\n\n    var result = results[1];\n    if (dont_replace_plus === undefined || !dont_replace_plus) {\n        result = result.replace(\"/\\+/g\", \"\");\n    }\n    return decodeURIComponent(result);\n}\n\n/**\n * Return the target associated to an event object. You will generally\n * use this function within a click event handler configured on a <a/>\n * tag containg an image. (because e.target will often point to the\n * image...)\n *\n * @param {Object} e - event object\n * @param {string} tag - desired tag\n */\nfunction get_target(e, tag) {\n    var $target = $(e.target);\n\n    if (tag === undefined || $target.is(tag)) {\n        return $target;\n    }\n    return $target.parent();\n}\n\n/**\n * Send a simple AJAX request.\n */\nfunction simple_ajax_request(e, uoptions) {\n    var $this = $(this);\n    var defaults = {};\n    var options = $.extend({}, defaults, uoptions);\n\n    if (e !== undefined) { e.preventDefault(); }\n    $.ajax({\n        url: $this.attr(\"href\"),\n        dataType: 'json'\n    }).done(function(data) {\n        if (options.ok_cb) { options.ok_cb(data); }\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    });\n}\n\n/*\n * Simple function that redirect ajax requests to the login page if\n * the status code received with a response is equal to 278.\n */\nfunction ajax_login_redirect(xhr) {\n    if (xhr.status !== 278) {\n        return;\n    }\n    var params = \"?next=\" + window.location.pathname;\n\n    window.location.href =\n        xhr.getResponseHeader(\"Location\").replace(/\\?.*$/, params);\n}\n\nfunction activate_widget(e) {\n    var $this = $(this);\n    var widget_id = $this.attr(\"id\").substr(0, $this.attr(\"id\").length - 4);\n    var $widget = $('#' + widget_id);\n\n    if ($this.prop(\"checked\")) {\n        $widget.attr('disabled', true);\n    } else {\n        $widget.attr('disabled', false);\n    }\n}\n\n/*\n * Default error handler for AJAX requests.\n */\nfunction defaultAjaxErrorHandler(event, jqxhr, settings) {\n    var data;\n\n    try {\n        data = $.parseJSON(jqxhr.responseText);\n    } catch (x) {\n        data = gettext(\"Internal error\");\n    }\n    $('body').notify('error', data);\n}\n\n/**\n * An equivalent of python .format() method.\n */\nString.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (m, n) {\n        if (m === \"{{\") { return \"{\"; }\n        if (m === \"}}\") { return \"}\"; }\n        return args[n];\n    });\n};\n\n$(document).ready(function() {\n    $(document).ajaxSuccess(function(e, xhr, settings) { ajax_login_redirect(xhr); });\n    $(document).ajaxError(defaultAjaxErrorHandler);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal\"]', modalbox);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal-autowidth\"]', modalbox_autowidth);\n    $(document).on('click', '.activator', activate_widget);\n    $(\".help\").popover({trigger: 'hover'}).click(function(e) { e.preventDefault(); });\n});\n"], "fixing_code": ["/**\n * Creates an instance of Admin.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class contains utility methods used by the admin\n * application.\n */\n\n/* global $ gettext Listing */\n\nvar Admin = function(options) {\n    Listing.call(this, options);\n};\n\nAdmin.prototype = {\n    defaults: {\n        deflocation: \"list/\",\n        squery: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.list_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n    },\n\n    /**\n     * Callback used when the initial content of the listing is\n     * received.\n     *\n     * @this Admin\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if (data.rows) {\n            $(\"#objects_table tbody\").html(data.rows);\n        } else {\n            $(\"#objects_table tbody\").html(\"\");\n        }\n        this.update_listing(data);\n        if (data.length === 0) {\n            this.get_load_page_args();\n            this.end_of_list_reached();\n        }\n    },\n\n    /**\n     * Children must override this method.\n     */\n    listen: function() {\n    },\n\n    /**\n     * Load a new page using an AJAX request.\n     *\n     * @this Admin\n     * @param {Object} e - event object\n     */\n    page_loader: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        if ($link.hasClass(\"navigation\")) {\n            $(\".sidebar li.active\").removeClass(\"active\");\n            $link.parent().addClass(\"active\");\n        }\n        this.navobj.baseurl($link.attr(\"href\")).update();\n    },\n\n    importform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            if ($(\"#id_sourcefile\").val() === \"\") {\n                return;\n            }\n            $(\"#import_status\").css(\"display\", \"block\");\n            $(\"#import_result\").html(\"\").removeClass(\"alert alert-danger\");\n            $(\"#importform\").submit();\n        });\n    },\n\n    importdone: function(status, msg) {\n        $(\"#import_status\").css(\"display\", \"none\");\n        if (status === \"ok\") {\n            $(\"#modalbox\").modal('hide');\n            this.reload_listing(msg);\n        } else {\n            $(\"#import_result\").addClass(\"alert alert-danger\");\n            $(\"#import_result\").html(msg);\n            this.importform_cb();\n        }\n    },\n\n    exportform_cb: function() {\n        $(\".submit\").one('click', function(e) {\n            e.preventDefault();\n            $(\"#exportform\").submit();\n            $(\"#modalbox\").modal('hide');\n        });\n    },\n\n    reload_listing: function(data) {\n        this.navobj.update(true);\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    }\n};\n\nAdmin.prototype = $.extend({}, Listing.prototype, Admin.prototype);\n\n/**\n * Creates an instance of Domains.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to domains management.\n */\nvar Domains = function(options) {\n    Admin.call(this, options);\n};\n\nDomains.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"domfilter\", \"srvfilter\");\n        this.options.eor_message = gettext(\"No more domain to show\");\n        this.register_tag_handler(\"dom\");\n        this.register_tag_handler(\"srv\", this.srv_tag_handler);\n    },\n\n    /**\n     * Custom callbacks declaration.\n     */\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n    },\n\n    /**\n     * Initialize the domain links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_domain_links: function(data) {\n        var deloptions = (data.handle_mailboxes) ?\n            {keepdir: gettext(\"Do not delete domain directory\")} : {};\n        var warnmsg = (data.auto_account_removal && data.auto_account_removal === \"yes\")\n            ? gettext(\"This operation will remove ALL data associated to this domain.\")\n            : gettext(\"This operation will remove all data associated to this domain, excepting accounts.\");\n\n        $(\"a[name=deldomain]\").confirm({\n            question: function() { return htmlEncode(this.$element.attr('title')); },\n            method: \"POST\",\n            warning: warnmsg,\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domain_listing_refresh');\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"domain\";\n            this.options.eor_message = gettext(\"No more domain to show\");\n        } else if (this.navobj.getbaseurl() === \"quota\") {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        } else {\n            args.objtype = \"log\";\n            this.options.eor_message = gettext(\"No more log to show\");\n        }\n        return args;\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"domains\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_domain_links(data);\n    },\n\n    srv_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined && $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"domfilter\", \"relaydomain\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=dom]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"relaydomain\", \"dom\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_domain_links(data);\n    },\n\n    change_inputs_state: function(value) {\n        $(\"#id_dom_admin_username\").attr(\"disabled\", value);\n        $(\"input[name=with_mailbox]\").attr(\"disabled\", value);\n        $(\"input[name=create_aliases]\").attr(\"disabled\", value);\n    },\n\n    create_dom_admin_changed: function(e) {\n        var $target = $(e.target);\n        this.change_inputs_state(($target.val() === \"True\") ? false : true);\n    },\n\n    withMailboxChanged: function(e) {\n        var $target = $(e.target);\n        $(\"input[name=create_aliases]\").attr(\n            \"disabled\", $target.val() === \"False\");\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    toggleDKIMFields: function (value) {\n        if (value) {\n            $('#id_dkim_key_selector').parents(\".form-group\").show();\n            $('#id_dkim_key_length').parents(\".form-group\").show();\n        } else {\n            $('#id_dkim_key_selector').parents(\".form-group\").hide();\n            $('#id_dkim_key_length').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Initialize the main form contained in the domain edition modal.\n     *\n     * @this Domains\n     */\n    generalform_init: function() {\n        $('input:text:visible:first').focus();\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $('#id_enable_dkim').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.toggleDKIMFields($this.prop('checked'));\n        }, this));\n        this.toggleDKIMFields($('#id_enable_dkim').prop('checked'));\n    },\n\n    optionsform_init: function() {\n        $(\"input[name=create_dom_admin]\").click(\n            $.proxy(this.create_dom_admin_changed, this));\n        $(\"input[name=with_mailbox]\").click(\n            $.proxy(this.withMailboxChanged, this));\n        this.change_inputs_state(\n            $(\"input[name=create_dom_admin]:checked\").val() === \"True\" ? false : true\n        );\n        this.optionsform_prefill();\n    },\n\n    optionsform_prefill: function() {\n        var $span = $(\"#id_dom_admin_username\").next(\"span\");\n        $span.html(\"@\" + htmlEncode($(\"#id_name\").val()));\n    },\n\n    domadminsform_init: function() {\n        $(\"a[name=removeperm]\").click(function(e) {\n            var $tr = $(this).parents('tr');\n            simple_ajax_request.apply(this, [e, {\n                ok_cb: function(resp) {\n                    $tr.remove();\n                    if (!$(\"#domadmins\").find(\"tr\").length) {\n                        $(\"#admins\").html('<div class=\"alert alert-info\">'\n                            + gettext(\"No domain administrator defined\") + \"</div>\");\n                    }\n                }\n            }]);\n        });\n    },\n\n    newdomain_cb: function() {\n        this.generalform_init();\n        this.optionsform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"domform\",\n            transition_callbacks: {\n                \"options\": this.optionsform_prefill\n            },\n            error_callbacks: {\n                \"options\": $.proxy(this.optionsform_init, this)\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n        $(document).trigger('domwizard_init');\n    },\n\n    domainform_cb: function() {\n        this.generalform_init();\n        this.domadminsform_init();\n        $(\".submit\").one('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"domform\",\n                error_cb: $.proxy(this.domainform_cb, this),\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n        $(document).trigger('domform_init');\n    }\n};\n\nDomains.prototype = $.extend({}, Admin.prototype, Domains.prototype);\n\n/**\n * Creates an instance of Identities.\n *\n * @constructor\n * @param {Object} options - instance options\n * @classdesc This class extends the Admin one by adding methods\n * specific to identities management.\n */\nvar Identities = function(options) {\n    Admin.call(this, options);\n};\n\nIdentities.prototype = {\n    initialize: function(options) {\n        Admin.prototype.initialize.call(this, options);\n        this.options.navigation_params.push(\"idtfilter\", \"grpfilter\");\n        this.options.eor_message = gettext(\"No more identity to show\");\n        this.domain_list = [];\n        this.register_tag_handler(\"idt\");\n        this.register_tag_handler(\"grp\", this.grp_tag_handler);\n    },\n\n    listen: function() {\n        Admin.prototype.listen.call(this);\n        $(document).on(\"click\", \"a.ajaxnav\", $.proxy(this.page_loader, this));\n        $(document).on(\"click\", \"a.ajaxcall\", $.proxy(this.send_call, this));\n    },\n\n    /**\n     * Send an ajax call.\n     */\n    send_call: function(evt) {\n        var $link = get_target(evt, \"a\");\n        var $this = this;\n        var method = $link.attr(\"data-call_method\");\n\n        if (method === undefined) {\n            method = \"GET\";\n        }\n        evt.preventDefault();\n        $.ajax({\n            url: $link.attr(\"href\"),\n            type: method,\n            dataType: \"json\"\n        }).done(function(data) {\n            $this.reload_listing(data.respmsg);\n        });\n    },\n\n    /**\n     * Initialize the links embedded within a page.\n     *\n     * @param {Object} data - options\n     */\n    init_identity_links: function(data) {\n        var deloptions = {};\n\n        if (data.handle_mailboxes) {\n            deloptions = {keepdir: gettext(\"Do not delete mailbox directory\")};\n        }\n\n        $(\"a[name=delaccount]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"POST\",\n            checkboxes: deloptions,\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n        $(\"a[name=delalias]\").confirm({\n            question: function() { return this.$element.attr('title'); },\n            method: \"DELETE\",\n            success_cb: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    /**\n     * Add a type to let the server know what kind of object we expect.\n     *\n     * @this Listing\n     */\n    get_load_page_args: function() {\n        var args = Admin.prototype.get_load_page_args.call(this);\n\n        if (this.navobj.getbaseurl() === \"list\") {\n            args.objtype = \"identity\";\n            this.options.eor_message = gettext(\"No more identity to show\");\n        } else {\n            args.objtype = \"quota\";\n            this.options.eor_message = gettext(\"No more quota to show\");\n        }\n        return args;\n    },\n\n    /**\n     * A new page has been received, inject it.\n     *\n     * @param {Object} data - page content\n     * @param {string} direction -\n     */\n    add_new_page: function(data, direction) {\n        Admin.prototype.add_new_page.call(this, data, direction);\n        this.init_identity_links(data);\n    },\n\n    /**\n     * Navigation callback: default.\n     *\n     * @param {Object} data - response of the ajax call (JSON)\n     */\n    list_cb: function(data) {\n        if ($(\".sidebar li.active\").length === 0) {\n            var menu = this.navobj.getbaseurl();\n            if (menu === \"list\") {\n                menu = \"identities\";\n            }\n            $(\"a[name={0}]\".format(menu)).parent().addClass(\"active\");\n        }\n        $(\"#objects_table thead tr\").html(data.headers);\n        Admin.prototype.list_cb.call(this, data);\n        this.init_identity_links(data);\n    },\n\n    grp_tag_handler: function(tag, $link) {\n        if (this.navobj.getparam(tag + \"filter\") === undefined &&\n            $link.hasClass(tag)) {\n            var text = $link.attr(\"name\");\n            this.navobj\n                .setparam(\"idtfilter\", \"account\")\n                .setparam(tag + \"filter\", text)\n                .update();\n            if ($(\"a[name=idt]\").length === 0) {\n                $(\"#taglist\").append(this.make_tag(\"account\", \"idt\"));\n            }\n            $(\"#taglist\").append(this.make_tag(text, tag));\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Retrieve a list of domain from the server.\n     *\n     * @this Identities\n     * @return {Array} a list of domain names\n     */\n    get_domain_list: function() {\n        if (!this.domain_list.length) {\n            $.ajax({\n                url: this.options.domain_list_url,\n                dataType: \"json\",\n                async: false\n            }).done($.proxy(function(data) {\n                this.domain_list = data;\n            }, this));\n        }\n        return this.domain_list;\n    },\n\n    simpleuser_mode: function() {\n        var $username = $('#id_username');\n        var $email = $('#id_email');\n\n        $username.change(function (evt) {\n            $email.val($(this).val());\n            $email.change();\n        });\n        $username.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#id_email\").addClass(\"disabled\")\n            .attr(\"readonly\", \"\")\n            .autocompleter(\"unbind\");\n        this.toggle_master_user();\n    },\n\n    normal_mode: function(group) {\n        $(\"#id_email\").removeClass(\"disabled\")\n            .attr(\"readonly\", null)\n            .autocompleter(\"listen\");\n        this.toggle_master_user(group);\n    },\n\n    /**\n     * Hide or show the master user checkbox according to desired role.\n     *\n     * @param {string} group - The desired role (or group)\n     */\n    toggle_master_user: function(group) {\n        var $target = $(\"#id_master_user\").parents(\".form-group\");\n        if (group !== \"SuperAdmins\") {\n            $target.hide();\n        } else {\n            $target.show();\n        }\n    },\n\n    /**\n     * Hide or show password inputs depending on value.\n     *\n     * @param {bool} value - visibility flag\n     */\n    togglePasswordInputs: function(value) {\n        if (value) {\n            $('#id_password1').parents(\".form-group\").show();\n            $('#id_password2').parents(\".form-group\").show();\n        } else {\n            $('#id_password1').parents(\".form-group\").hide();\n            $('#id_password2').parents(\".form-group\").hide();\n        }\n    },\n\n    /**\n     * Callback to watch for username change.\n     *\n     */\n    emailChanged: function(event) {\n        var $target = get_target(event);\n        var $username = $('#id_username');\n\n        if ($target.val() !== this.originalEmail) {\n            $('#id_create_alias_with_old_address').parents(\".form-group\").show();\n        }\n        if ($username.val() !== $target.val()) {\n            $username.val($target.val());\n        }\n    },\n\n    generalform_init: function(notrigger) {\n        var $role = $('#id_role');\n\n        $role.change($.proxy(function(e) {\n            var $this = $(e.target);\n            var value = $this.val();\n            var email = $('#id_email').val();\n\n            if (value === 'SimpleUsers' || email !== '') {\n                this.simpleuser_mode();\n            } else {\n                this.normal_mode(value);\n            }\n        }, this));\n        $('#id_random_password').click($.proxy(function (e) {\n            var $this = $(e.target);\n            this.togglePasswordInputs(!$this.prop('checked'));\n        }, this));\n        this.toggle_master_user($role.val());\n        $('#id_create_alias_with_old_address').parents('.form-group').hide();\n        if (notrigger !== undefined && notrigger) {\n            return;\n        }\n        $role.trigger(\"change\");\n    },\n\n    mailform_init: function() {\n        var $email = $('#id_email');\n\n        this.originalEmail = $email.val();\n        $email.change($.proxy(this.emailChanged, this));\n        $(\"#id_aliases\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_aliases\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#original_senderaddress\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $email.autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        if ($(\"#id_role\").length) {\n            $(\"#id_role\").trigger(\"change\");\n        } else {\n            this.simpleuser_mode();\n        }\n        $(\"#id_domains\").autocompleter({\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_domains\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        activate_widget.call($(\"#id_quota_act\"));\n    },\n\n    accountform_init: function() {\n        this.generalform_init(true);\n        this.mailform_init();\n    },\n\n    mailform_prefill: function() {\n        var $role = $(\"#id_role\");\n        if (!$role.length || $role.val() === \"\" || $role.val() === \"SimpleUsers\") {\n            $(\"#id_email\").val($(\"#id_username\").val());\n        }\n    },\n\n    newaccount_cb: function() {\n        this.accountform_init();\n        $(\"#wizard\").cwizard({\n            formid: \"newaccount_form\",\n            transition_callbacks: {\n                mail: this.mailform_prefill\n            },\n            success_callback: $.proxy(this.reload_listing, this)\n        });\n    },\n\n    editaccount_cb: function() {\n        this.accountform_init();\n        $('.submit').on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"accountform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    },\n\n    aliasform_cb: function() {\n        $(\"#id_random_address\").click(function(evt) {\n            if ($(this).prop(\"checked\")) {\n                $(\"#id_address\").parents(\".form-group\").hide();\n                $(\"#id_domain\").parents(\".form-group\").show();\n            } else {\n                $(\"#id_address\").parents(\".form-group\").show();\n                $(\"#id_domain\").parents(\".form-group\").hide();\n            }\n        });\n        $(\"#id_address\").autocompleter({\n            from_character: \"@\",\n            choices: $.proxy(this.get_domain_list, this)\n        });\n        $(\"#original_recipients\").dynamic_input({\n            input_added: function($row) {\n                $row.find(\"label\").html(\"\");\n            },\n            input_removed: function($input) {\n                $input.parents(\".form-group\").remove();\n                return true;\n            }\n        });\n        $(\"#id_expire_at\").datetimepicker({\n            format: 'YYYY-MM-DD HH:mm:ss'\n        });\n        $(\".submit\").on('click', $.proxy(function(e) {\n            simple_ajax_form_post(e, {\n                formid: \"aliasform\",\n                reload_on_success: false,\n                success_cb: $.proxy(this.reload_listing, this)\n            });\n        }, this));\n    }\n\n};\n\nIdentities.prototype = $.extend({}, Admin.prototype, Identities.prototype);\n", "{% extends \"admin/listing.html\" %}\n\n{% load i18n admin_tags lib_tags static%}\n\n{% block pagetitle %}{% trans \"Domains\" %}{% endblock %}\n\n{% block extra_css %}\n  {{ block.super }}\n  {% extra_static_content \"domains\" \"css\" user %}\n{% endblock %}\n\n{% block extra_js %}\n  {{ block.super }}\n  <script src=\"{% static 'transport/js/transport.js' %}\" type=\"text/javascript\"></script>\n  <script type=\"text/javascript\">\n  $(document).ready(function() {\n      admin = new Domains({\n          load_page_url: \"{% url 'admin:domain_page' %}\"\n      });\n  });\n  </script>\n{% extra_static_content \"domains\" \"js\" user %}\n{% endblock %}\n\n{% block toolbar_right %}\n  {% if perms.admin.add_domain %}\n    <a href=\"{% url 'admin:domain_add' %}\" class=\"btn btn-primary\" data-toggle=\"ajaxmodal\" modalcb=\"admin.newdomain_cb\">\n      <span class=\"fa fa-plus\"></span> {% trans \"Add\" %}\n    </a>\n  {% endif %}\n{% endblock %}\n\n{% block actions %}{% domains_menu \"domains\" user %}{% endblock %}\n", "/*\n * Global javascript utilities\n */\n\n/* global $ */\n\nvar static_url = \"\";\n\n/*\n * A simple function to initialize the value of the global variable\n * 'media_url' (corresponding to django's MEDIA_URL variable).\n */\nfunction set_static_url(url) {\n    static_url = url;\n}\n\n/*\n * Shortcut function that construct an url from the media_url and the\n * given value.\n */\nfunction get_static_url(value) {\n    return static_url + value;\n}\n\n/**\n * Open a modal box and load its content using an AJAX request.\n *\n * @param {Object} e - event object\n */\nfunction modalbox(e, css, defhref, defcb, defclosecb) {\n    e.preventDefault();\n    var $this = $(this);\n    var href = (defhref !== undefined) ? defhref : $this.attr('href');\n    var modalcb = (defcb !== undefined) ? defcb : $this.attr('modalcb');\n    var closecb = (defclosecb !== undefined) ? defclosecb : $this.attr(\"closecb\");\n\n    if (href.indexOf('#') === 0) {\n        $(href).modal('open');\n        return;\n    }\n    if ($(\"#modalbox\").length) {\n        return;\n    }\n    $.ajax({\n        type: \"GET\",\n        url: href\n    }).done(function(data) {\n        var $div = $('<div />', {\n            id: \"modalbox\", 'class': \"modal fade\", role: \"modal\",\n            html: data, 'aria-hidden': true\n        });\n\n        $div.modal({show: false});\n        $div.one('shown.bs.modal', function() {\n            if ($(\".selectpicker\").length) {\n                $(\".selectpicker\").selectize();\n            }\n            $(\".help\").popover({\n                container: \"#modalbox\",\n                trigger: \"hover\"\n            }).click(function(e) {e.preventDefault();});\n            if (modalcb !== undefined) {\n                if (typeof modalcb === \"function\") modalcb(); else eval(modalcb + '()');\n            }\n        }).on('hidden.bs.modal', function(e) {\n            var $target = $(e.target);\n\n            if (!$target.is($(this))) {\n                return;\n            }\n            $(\"#modalbox\").remove();\n            if (closecb !== undefined) {\n                if (typeof closecb === \"function\") closecb(); else eval(closecb + '()');\n            }\n        });\n        $div.modal('show');\n\n        if (css !== undefined) {\n            $div.css(css);\n        }\n    });\n}\n\nfunction modalbox_autowidth(e) {\n    modalbox.apply(this, [e]);\n}\n\n/*\n * Simple shorcut do create a bootstrap alert box (error mode)\n */\nfunction build_alert_box(msg, level) {\n    return $('<div class=\"alert alert-' + level + '\"> \\\n<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>' + msg + \"</div>\");\n}\n\nfunction build_error_alert(msg) {\n    return build_alert_box(msg, 'danger');\n}\n\nfunction build_success_alert(msg) {\n    return build_alert_box(msg, 'success');\n}\n\n\n/*\n * '.keys()' method support for old browsers :p\n */\nif (!Object.keys) {\n    Object.keys = function (obj) {\n        var keys = [],\n            k;\n        for (k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n}\n\n/*\n * Clean all errors in a given form.\n */\nfunction clean_form_errors(formid) {\n    $(\"#\" + formid + \" div.has-error\").removeClass(\"has-error\");\n    $(\"#\" + formid + \" span.help-block\").remove();\n}\n\nfunction display_field_error($field, error) {\n    var spanid = $field.attr('id') + \"-error\";\n    var $span = $(\"#\" + spanid);\n\n    if (!$field.parents(\".form-group\").hasClass(\"has-error\")) {\n        $field.parents(\".form-group\").addClass(\"has-error\");\n    }\n    if (!$span.length) {\n        $span = $(\"<span />\", {\n            class: \"help-block\",\n            html: error,\n            id: spanid\n        });\n        $field.parents(\".form-group\").append($span);\n    } else {\n        $span.html(error);\n    }\n}\n\n/*\n * Display validation errors for a given form.\n */\nfunction display_form_errors(formid, data) {\n    clean_form_errors(formid);\n    $.each(data.form_errors, function(id, value) {\n        var fullid = \"id_\" + (data.prefix ? data.prefix + \"-\" : \"\") + id;\n        var $widget = $(\"#\" + formid + \" #\" + fullid);\n        var error = value.join(' ');\n\n        display_field_error($widget, error);\n    });\n}\n\n/*\n * Simple function that sends a form using an 'ajax' post request.\n *\n * The function is intended to be used in a modal environment.\n */\nfunction simple_ajax_form_post(e, options) {\n    e.preventDefault();\n    var $form = (options.formid !== undefined) ? $(\"#\" + options.formid) : $(\"form\");\n    var defaults = {reload_on_success: true, reload_mode: 'full', modal: true};\n    var opts = $.extend({}, defaults, options);\n    var args = $form.serialize();\n\n    if (options.extradata !== undefined) {\n        args += \"&\" + options.extradata;\n    }\n    $.ajax({\n        type: \"POST\",\n        global: false,\n        url: $form.attr(\"action\"),\n        data: args\n    }).done(function(data) {\n        if (opts.modal) {\n            $(\"#modalbox\").modal('hide');\n        }\n        if (opts.success_cb !== undefined) {\n            opts.success_cb(data);\n            return;\n        }\n        if (opts.reload_on_success) {\n            if (opts.reload_mode === 'full') {\n                window.location.reload();\n            } else {\n                histomanager.update(true);\n            }\n        }\n        if (data && data.message) {\n            $(\"body\").notify('success', data.message, 2000);\n        }\n    }).fail(function(jqxhr) {\n        var data = $.parseJSON(jqxhr.responseText);\n        if (data.form_errors) {\n            display_form_errors(options.formid, data);\n        } else {\n            if (opts.modal) {\n                $('.modal-body').prepend(build_error_alert(data));\n            } else {\n                $('body').notify('error', data);\n            }\n        }\n        if (opts.error_cb) {\n            opts.error_cb(data);\n        }\n    });\n}\n\n/*\n * The following code prevents a bug under IE7 because fullpath is\n * returned instead of a relative one. (even if mootools uses\n * getAttribute(\"href\", 2), this is not working for AJAX requests)\n */\nfunction gethref(obj) {\n    var url = $(obj).attr(\"href\");\n    var re = new RegExp(\"^(https?):\");\n    var scheme = re.exec(url);\n\n    if (scheme !== null) {\n        var baseurl = scheme[0] + \"://\" + location.host + location.pathname;\n        return url.replace(baseurl, \"\");\n    }\n    return url;\n}\n\n/*\n * Extract the current URL parameters into a dictionnary.\n *\n * Ref:\n * http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction parse_qs(raw) {\n    if (raw === \"\") { return {}; }\n    var res = {};\n\n    for (var i = 0; i < raw.length; i++) {\n        var p = raw[i].split('=');\n\n        if (p.length !== 2) { continue; }\n        res[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return res;\n}\n\n/*\n * Extract a specific URL parameter using its name.\n *\n * Ref: http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript\n */\nfunction get_parameter_by_name(url, name, dont_replace_plus) {\n    name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(url);\n\n    if (results === null) {\n        return \"\";\n    }\n\n    var result = results[1];\n    if (dont_replace_plus === undefined || !dont_replace_plus) {\n        result = result.replace(\"/\\+/g\", \"\");\n    }\n    return decodeURIComponent(result);\n}\n\n/**\n * Return the target associated to an event object. You will generally\n * use this function within a click event handler configured on a <a/>\n * tag containg an image. (because e.target will often point to the\n * image...)\n *\n * @param {Object} e - event object\n * @param {string} tag - desired tag\n */\nfunction get_target(e, tag) {\n    var $target = $(e.target);\n\n    if (tag === undefined || $target.is(tag)) {\n        return $target;\n    }\n    return $target.parent();\n}\n\n/**\n * Send a simple AJAX request.\n */\nfunction simple_ajax_request(e, uoptions) {\n    var $this = $(this);\n    var defaults = {};\n    var options = $.extend({}, defaults, uoptions);\n\n    if (e !== undefined) { e.preventDefault(); }\n    $.ajax({\n        url: $this.attr(\"href\"),\n        dataType: 'json'\n    }).done(function(data) {\n        if (options.ok_cb) { options.ok_cb(data); }\n        if (data) {\n            $(\"body\").notify(\"success\", data, 2000);\n        }\n    });\n}\n\n/*\n * Simple function that redirect ajax requests to the login page if\n * the status code received with a response is equal to 278.\n */\nfunction ajax_login_redirect(xhr) {\n    if (xhr.status !== 278) {\n        return;\n    }\n    var params = \"?next=\" + window.location.pathname;\n\n    window.location.href =\n        xhr.getResponseHeader(\"Location\").replace(/\\?.*$/, params);\n}\n\nfunction activate_widget(e) {\n    var $this = $(this);\n    var widget_id = $this.attr(\"id\").substr(0, $this.attr(\"id\").length - 4);\n    var $widget = $('#' + widget_id);\n\n    if ($this.prop(\"checked\")) {\n        $widget.attr('disabled', true);\n    } else {\n        $widget.attr('disabled', false);\n    }\n}\n\n/*\n * Default error handler for AJAX requests.\n */\nfunction defaultAjaxErrorHandler(event, jqxhr, settings) {\n    var data;\n\n    try {\n        data = $.parseJSON(jqxhr.responseText);\n    } catch (x) {\n        data = gettext(\"Internal error\");\n    }\n    $('body').notify('error', data);\n}\n\n/**\n * An equivalent of python .format() method.\n */\nString.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (m, n) {\n        if (m === \"{{\") { return \"{\"; }\n        if (m === \"}}\") { return \"}\"; }\n        return args[n];\n    });\n};\n\n/**\n * Simple HTML escape function\n */\nfunction htmlEncode(str) {\n    return String(str).replace(/[^\\w. ]/gi, function(c) {\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n$(document).ready(function() {\n    $(document).ajaxSuccess(function(e, xhr, settings) { ajax_login_redirect(xhr); });\n    $(document).ajaxError(defaultAjaxErrorHandler);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal\"]', modalbox);\n    $(document).on('click', 'a[data-toggle=\"ajaxmodal-autowidth\"]', modalbox_autowidth);\n    $(document).on('click', '.activator', activate_widget);\n    $(\".help\").popover({trigger: 'hover'}).click(function(e) { e.preventDefault(); });\n});\n"], "filenames": ["modoboa/admin/static/admin/js/admin.js", "modoboa/admin/templates/admin/domains.html", "modoboa/static/js/global.js"], "buggy_code_start_loc": [155, 16, 363], "buggy_code_end_loc": [299, 21, 363], "fixing_code_start_loc": [155, 16, 364], "fixing_code_end_loc": [299, 21, 373], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4.", "other": {"cve": {"id": "CVE-2023-0470", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-26T22:15:26.433", "lastModified": "2023-02-02T15:06:12.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modoboa:modoboa:*:*:*:*:*:modoboa:*:*", "versionEndExcluding": "2.0.4", "matchCriteriaId": "4781FBB6-EAE1-4AF9-A51F-5BEE3E8DFA16"}]}]}], "references": [{"url": "https://github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/baae3180-b63b-4880-b2af-1a3f30056c2b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2"}}