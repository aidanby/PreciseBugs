{"buggy_code": ["/******************************************************************************\n *\n * Project:  OGR\n * Purpose:  Convenience function for parsing with Expat library\n * Author:   Even Rouault, even dot rouault at spatialys.com\n *\n ******************************************************************************\n * Copyright (c) 2009-2012, Even Rouault <even dot rouault at spatialys.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n ****************************************************************************/\n\n#ifdef HAVE_EXPAT\n\n#include \"cpl_port.h\"\n#include \"cpl_conv.h\"\n#include \"cpl_string.h\"\n#include \"ogr_expat.h\"\n\n#include <cstddef>\n#include <cstdlib>\n\n#include \"cpl_error.h\"\n\n\nCPL_CVSID(\"$Id$\")\n\nconstexpr size_t OGR_EXPAT_MAX_ALLOWED_ALLOC = 10000000;\n\nstatic void* OGRExpatMalloc( size_t size ) CPL_WARN_UNUSED_RESULT;\nstatic void* OGRExpatRealloc( void *ptr, size_t size ) CPL_WARN_UNUSED_RESULT;\n\n/************************************************************************/\n/*                              CanAlloc()                              */\n/************************************************************************/\n\nstatic bool CanAlloc( size_t size )\n{\n    if( size < OGR_EXPAT_MAX_ALLOWED_ALLOC )\n        return true;\n\n    if( CPLTestBool(CPLGetConfigOption(\"OGR_EXPAT_UNLIMITED_MEM_ALLOC\", \"NO\")) )\n        return true;\n\n    CPLError(CE_Failure, CPLE_OutOfMemory,\n             \"Expat tried to malloc %d bytes. File probably corrupted. \"\n             \"This may also happen in case of a very big XML comment, in which case \"\n             \"you may define the OGR_EXPAT_UNLIMITED_MEM_ALLOC configuration \"\n             \"option to YES to remove that protection.\",\n             static_cast<int>(size));\n    return false;\n}\n\n/************************************************************************/\n/*                          OGRExpatMalloc()                            */\n/************************************************************************/\n\nstatic void* OGRExpatMalloc( size_t size )\n{\n    if( CanAlloc(size) )\n        return malloc(size);\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                         OGRExpatRealloc()                            */\n/************************************************************************/\n\n// Caller must replace the pointer with the returned pointer.\nstatic void* OGRExpatRealloc( void *ptr, size_t size )\n{\n    if( CanAlloc(size) )\n        return realloc(ptr, size);\n\n    free(ptr);\n    return nullptr;\n}\n\n/************************************************************************/\n/*                            FillWINDOWS1252()                         */\n/************************************************************************/\n\nstatic void FillWINDOWS1252( XML_Encoding *info )\n{\n    // Map CP1252 bytes to Unicode values.\n    for( int i = 0; i < 0x80; ++i )\n        info->map[i] = i;\n\n    info->map[0x80] = 0x20AC;\n    info->map[0x81] = -1;\n    info->map[0x82] = 0x201A;\n    info->map[0x83] = 0x0192;\n    info->map[0x84] = 0x201E;\n    info->map[0x85] = 0x2026;\n    info->map[0x86] = 0x2020;\n    info->map[0x87] = 0x2021;\n    info->map[0x88] = 0x02C6;\n    info->map[0x89] = 0x2030;\n    info->map[0x8A] = 0x0160;\n    info->map[0x8B] = 0x2039;\n    info->map[0x8C] = 0x0152;\n    info->map[0x8D] = -1;\n    info->map[0x8E] = 0x017D;\n    info->map[0x8F] = -1;\n    info->map[0x90] = -1;\n    info->map[0x91] = 0x2018;\n    info->map[0x92] = 0x2019;\n    info->map[0x93] = 0x201C;\n    info->map[0x94] = 0x201D;\n    info->map[0x95] = 0x2022;\n    info->map[0x96] = 0x2013;\n    info->map[0x97] = 0x2014;\n    info->map[0x98] = 0x02DC;\n    info->map[0x99] = 0x2122;\n    info->map[0x9A] = 0x0161;\n    info->map[0x9B] = 0x203A;\n    info->map[0x9C] = 0x0153;\n    info->map[0x9D] = -1;\n    info->map[0x9E] = 0x017E;\n    info->map[0x9F] = 0x0178;\n\n    for( int i = 0xA0; i <= 0xFF; ++i )\n        info->map[i] = i;\n}\n\n/************************************************************************/\n/*                             FillISO885915()                          */\n/************************************************************************/\n\nstatic void FillISO885915( XML_Encoding *info )\n{\n    // Map ISO-8859-15 bytes to Unicode values.\n    // Generated by generate_encoding_table.c.\n    for( int i = 0x00; i < 0xA4; ++i)\n        info->map[i] = i;\n    info->map[0xA4] = 0x20AC;\n    info->map[0xA5] = 0xA5;\n    info->map[0xA6] = 0x0160;\n    info->map[0xA7] = 0xA7;\n    info->map[0xA8] = 0x0161;\n    for( int i = 0xA9; i < 0xB4; ++i )\n        info->map[i] = i;\n    info->map[0xB4] = 0x017D;\n    for( int i = 0xB5; i < 0xB8; ++i )\n        info->map[i] = i;\n    info->map[0xB8] = 0x017E;\n    for( int i = 0xB9; i < 0xBC; ++i )\n        info->map[i] = i;\n    info->map[0xBC] = 0x0152;\n    info->map[0xBD] = 0x0153;\n    info->map[0xBE] = 0x0178;\n    for( int i = 0xBF; i < 0x100; ++i )\n        info->map[i] = i;\n}\n\n/************************************************************************/\n/*                  OGRExpatUnknownEncodingHandler()                    */\n/************************************************************************/\n\nstatic int OGRExpatUnknownEncodingHandler(\n    void * /* unused_encodingHandlerData */,\n    const XML_Char *name,\n    XML_Encoding *info )\n{\n    if( EQUAL(name, \"WINDOWS-1252\") )\n        FillWINDOWS1252(info);\n    else if( EQUAL(name, \"ISO-8859-15\") )\n        FillISO885915(info);\n    else\n    {\n        CPLDebug(\"OGR\", \"Unhandled encoding %s\", name);\n        return XML_STATUS_ERROR;\n    }\n\n    info->data    = nullptr;\n    info->convert = nullptr;\n    info->release = nullptr;\n\n    return XML_STATUS_OK;\n}\n\n/************************************************************************/\n/*                       OGRCreateExpatXMLParser()                      */\n/************************************************************************/\n\nXML_Parser OGRCreateExpatXMLParser()\n{\n    XML_Memory_Handling_Suite memsuite;\n    memsuite.malloc_fcn = OGRExpatMalloc;\n    memsuite.realloc_fcn = OGRExpatRealloc;\n    memsuite.free_fcn = free;\n    XML_Parser hParser = XML_ParserCreate_MM(nullptr, &memsuite, nullptr);\n\n    XML_SetUnknownEncodingHandler(hParser,\n                                  OGRExpatUnknownEncodingHandler,\n                                  nullptr);\n\n    return hParser;\n}\n\n#endif  // HAVE_EXPAT\n"], "fixing_code": ["/******************************************************************************\n *\n * Project:  OGR\n * Purpose:  Convenience function for parsing with Expat library\n * Author:   Even Rouault, even dot rouault at spatialys.com\n *\n ******************************************************************************\n * Copyright (c) 2009-2012, Even Rouault <even dot rouault at spatialys.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n ****************************************************************************/\n\n#ifdef HAVE_EXPAT\n\n#include \"cpl_port.h\"\n#include \"cpl_conv.h\"\n#include \"cpl_string.h\"\n#include \"ogr_expat.h\"\n\n#include <cstddef>\n#include <cstdlib>\n\n#include \"cpl_error.h\"\n\n\nCPL_CVSID(\"$Id$\")\n\nconstexpr size_t OGR_EXPAT_MAX_ALLOWED_ALLOC = 10000000;\n\nstatic void* OGRExpatMalloc( size_t size ) CPL_WARN_UNUSED_RESULT;\nstatic void* OGRExpatRealloc( void *ptr, size_t size ) CPL_WARN_UNUSED_RESULT;\n\n/************************************************************************/\n/*                              CanAlloc()                              */\n/************************************************************************/\n\nstatic bool CanAlloc( size_t size )\n{\n    if( size < OGR_EXPAT_MAX_ALLOWED_ALLOC )\n        return true;\n\n    if( CPLTestBool(CPLGetConfigOption(\"OGR_EXPAT_UNLIMITED_MEM_ALLOC\", \"NO\")) )\n        return true;\n\n    CPLError(CE_Failure, CPLE_OutOfMemory,\n             \"Expat tried to malloc %d bytes. File probably corrupted. \"\n             \"This may also happen in case of a very big XML comment, in which case \"\n             \"you may define the OGR_EXPAT_UNLIMITED_MEM_ALLOC configuration \"\n             \"option to YES to remove that protection.\",\n             static_cast<int>(size));\n    return false;\n}\n\n/************************************************************************/\n/*                          OGRExpatMalloc()                            */\n/************************************************************************/\n\nstatic void* OGRExpatMalloc( size_t size )\n{\n    if( CanAlloc(size) )\n        return malloc(size);\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                         OGRExpatRealloc()                            */\n/************************************************************************/\n\n// Caller must replace the pointer with the returned pointer.\nstatic void* OGRExpatRealloc( void *ptr, size_t size )\n{\n    if( CanAlloc(size) )\n        return realloc(ptr, size);\n\n    return nullptr;\n}\n\n/************************************************************************/\n/*                            FillWINDOWS1252()                         */\n/************************************************************************/\n\nstatic void FillWINDOWS1252( XML_Encoding *info )\n{\n    // Map CP1252 bytes to Unicode values.\n    for( int i = 0; i < 0x80; ++i )\n        info->map[i] = i;\n\n    info->map[0x80] = 0x20AC;\n    info->map[0x81] = -1;\n    info->map[0x82] = 0x201A;\n    info->map[0x83] = 0x0192;\n    info->map[0x84] = 0x201E;\n    info->map[0x85] = 0x2026;\n    info->map[0x86] = 0x2020;\n    info->map[0x87] = 0x2021;\n    info->map[0x88] = 0x02C6;\n    info->map[0x89] = 0x2030;\n    info->map[0x8A] = 0x0160;\n    info->map[0x8B] = 0x2039;\n    info->map[0x8C] = 0x0152;\n    info->map[0x8D] = -1;\n    info->map[0x8E] = 0x017D;\n    info->map[0x8F] = -1;\n    info->map[0x90] = -1;\n    info->map[0x91] = 0x2018;\n    info->map[0x92] = 0x2019;\n    info->map[0x93] = 0x201C;\n    info->map[0x94] = 0x201D;\n    info->map[0x95] = 0x2022;\n    info->map[0x96] = 0x2013;\n    info->map[0x97] = 0x2014;\n    info->map[0x98] = 0x02DC;\n    info->map[0x99] = 0x2122;\n    info->map[0x9A] = 0x0161;\n    info->map[0x9B] = 0x203A;\n    info->map[0x9C] = 0x0153;\n    info->map[0x9D] = -1;\n    info->map[0x9E] = 0x017E;\n    info->map[0x9F] = 0x0178;\n\n    for( int i = 0xA0; i <= 0xFF; ++i )\n        info->map[i] = i;\n}\n\n/************************************************************************/\n/*                             FillISO885915()                          */\n/************************************************************************/\n\nstatic void FillISO885915( XML_Encoding *info )\n{\n    // Map ISO-8859-15 bytes to Unicode values.\n    // Generated by generate_encoding_table.c.\n    for( int i = 0x00; i < 0xA4; ++i)\n        info->map[i] = i;\n    info->map[0xA4] = 0x20AC;\n    info->map[0xA5] = 0xA5;\n    info->map[0xA6] = 0x0160;\n    info->map[0xA7] = 0xA7;\n    info->map[0xA8] = 0x0161;\n    for( int i = 0xA9; i < 0xB4; ++i )\n        info->map[i] = i;\n    info->map[0xB4] = 0x017D;\n    for( int i = 0xB5; i < 0xB8; ++i )\n        info->map[i] = i;\n    info->map[0xB8] = 0x017E;\n    for( int i = 0xB9; i < 0xBC; ++i )\n        info->map[i] = i;\n    info->map[0xBC] = 0x0152;\n    info->map[0xBD] = 0x0153;\n    info->map[0xBE] = 0x0178;\n    for( int i = 0xBF; i < 0x100; ++i )\n        info->map[i] = i;\n}\n\n/************************************************************************/\n/*                  OGRExpatUnknownEncodingHandler()                    */\n/************************************************************************/\n\nstatic int OGRExpatUnknownEncodingHandler(\n    void * /* unused_encodingHandlerData */,\n    const XML_Char *name,\n    XML_Encoding *info )\n{\n    if( EQUAL(name, \"WINDOWS-1252\") )\n        FillWINDOWS1252(info);\n    else if( EQUAL(name, \"ISO-8859-15\") )\n        FillISO885915(info);\n    else\n    {\n        CPLDebug(\"OGR\", \"Unhandled encoding %s\", name);\n        return XML_STATUS_ERROR;\n    }\n\n    info->data    = nullptr;\n    info->convert = nullptr;\n    info->release = nullptr;\n\n    return XML_STATUS_OK;\n}\n\n/************************************************************************/\n/*                       OGRCreateExpatXMLParser()                      */\n/************************************************************************/\n\nXML_Parser OGRCreateExpatXMLParser()\n{\n    XML_Memory_Handling_Suite memsuite;\n    memsuite.malloc_fcn = OGRExpatMalloc;\n    memsuite.realloc_fcn = OGRExpatRealloc;\n    memsuite.free_fcn = free;\n    XML_Parser hParser = XML_ParserCreate_MM(nullptr, &memsuite, nullptr);\n\n    XML_SetUnknownEncodingHandler(hParser,\n                                  OGRExpatUnknownEncodingHandler,\n                                  nullptr);\n\n    return hParser;\n}\n\n#endif  // HAVE_EXPAT\n"], "filenames": ["gdal/ogr/ogr_expat.cpp"], "buggy_code_start_loc": [92], "buggy_code_end_loc": [93], "fixing_code_start_loc": [91], "fixing_code_end_loc": [91], "type": "CWE-415", "message": "GDAL through 3.0.1 has a poolDestroy double free in OGRExpatRealloc in ogr/ogr_expat.cpp when the 10MB threshold is exceeded.", "other": {"cve": {"id": "CVE-2019-17545", "sourceIdentifier": "cve@mitre.org", "published": "2019-10-14T02:15:11.030", "lastModified": "2022-10-27T17:29:44.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GDAL through 3.0.1 has a poolDestroy double free in OGRExpatRealloc in ogr/ogr_expat.cpp when the 10MB threshold is exceeded."}, {"lang": "es", "value": "GDAL versiones hasta 3.0.1, presenta una vulnerabilidad de doble liberaci\u00f3n de poolDestroy en la funci\u00f3n OGRExpatRealloc en el archivo ogr/ogr_expat.cpp cuando se excede el umbral de 10 MB."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-415"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:osgeo:gdal:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.0.1", "matchCriteriaId": "028B7E48-C2D6-43D1-B740-8CE5070B115E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:spatial_and_graph:12.2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "789DA537-09EA-485F-B41A-CB7E0B513C9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:spatial_and_graph:19c:*:*:*:*:*:*:*", "matchCriteriaId": "05508099-EEB4-4CE6-8621-D07A5B8B16D5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opensuse:backports_sle:15.0:sp1:*:*:*:*:*:*", "matchCriteriaId": "40513095-7E6E-46B3-B604-C926F1BA3568"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-11/msg00022.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=16178", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/OSGeo/gdal/commit/148115fcc40f1651a5d15fa34c9a8c528e7147bb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/11/msg00005.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/01/msg00004.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/09/msg00040.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/CB7RRPCQP253XA5MYUOLHLRPKNGKVZNT/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XVRC3EBQBFBVQC26XJE3AI3KQXC2NGTP/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.oracle.com//security-alerts/cpujul2021.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OSGeo/gdal/commit/148115fcc40f1651a5d15fa34c9a8c528e7147bb"}}