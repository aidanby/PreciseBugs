{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Dashboard $Dashboard\n */\nclass DashboardsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n    public $helpers = array('ScopedCSS');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'renderWidget';\n        $this->Security->unlockedActions[] = 'getForm';\n        if ($this->request->action === 'renderWidget') {\n            $this->Security->doNotGenerateToken = true;\n        }\n    }\n\n    public $paginate = array(\n        'limit' => 60,\n        'maxLimit' => 9999\n    );\n\n    public function index($template_id = false)\n    {\n        if (empty($template_id)) {\n            $params = array(\n                'conditions' => array(\n                    'UserSetting.user_id' => $this->Auth->user('id'),\n                    'UserSetting.setting' => 'dashboard'\n                )\n            );\n            $userSettings = $this->User->UserSetting->find('first', $params);\n        } else {\n            $dashboardTemplate = $this->Dashboard->getDashboardTemplate($this->Auth->user(), $template_id);\n            if (empty($dashboardTemplate)) {\n                throw new NotFoundException(__('Invalid dashboard template.'));\n            }\n        }\n        if (empty($userSettings) && empty($dashboardTemplate)) {\n            $dashboardTemplate = $this->Dashboard->getDashboardTemplate($this->Auth->user());\n        }\n        if (empty($userSettings)) {\n            if (empty($dashboardTemplate)) {\n                $value = array(\n                    array(\n                        'widget' => 'MispStatusWidget',\n                        'config' => array(\n                        ),\n                        'position' => array(\n                            'x' => 0,\n                            'y' => 0,\n                            'width' => 2,\n                            'height' => 2\n                        )\n                    )\n                );\n            } else {\n                $value = $dashboardTemplate['Dashboard']['value'];\n                if (!is_array($value)) {\n                    $value = json_decode($value, true);\n                }\n            }\n            $userSettings = array(\n                'UserSetting' => array(\n                    'setting' => 'dashboard',\n                    'value' => $value\n                )\n            );\n        }\n        $widgets = array();\n        foreach ($userSettings['UserSetting']['value'] as $widget) {\n            try {\n                $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $widget['widget']);\n                $widget['width'] = $dashboardWidget->width;\n                $widget['height'] = $dashboardWidget->height;\n                $widget['title'] = $dashboardWidget->title;\n                $widgets[] = $widget;\n            } catch (Exception $e) {\n                // continue, we just don't load the widget\n            }\n        }\n        $this->set('widgets', $widgets);\n    }\n\n    public function getForm($action = 'edit')\n    {\n        if ($this->request->is(['post', 'put'])) {\n            $data = $this->request->data;\n            if (empty($data['config'])) {\n                $data['config'] = '';\n            }\n            if ($action === 'add') {\n                $data['widget_options'] = $this->Dashboard->loadAllWidgets($this->Auth->user());\n            } else if ($action === 'edit') {\n                if (!isset($data['widget'])) {\n                    throw new BadRequestException(__('No widget name passed.'));\n                }\n                $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $data['widget']);\n                $data['description'] = empty($dashboardWidget->description) ? '' : $dashboardWidget->description;\n                $data['params'] = empty($dashboardWidget->params) ? array() : $dashboardWidget->params;\n                $data['params'] = array_merge($data['params'], array('widget_config' => __('Configuration of the widget that will be passed to the render. Check the view for more information')));\n                $data['params'] = array_merge(array('alias' => __('Alias to use as the title of the widget')), $data['params']);\n            } else {\n                throw new BadRequestException(__('Invalid action provided, just add or edit is supported.'));\n            }\n            $this->set('data', $data);\n            $this->layout = false;\n            $this->render($action);\n        }\n    }\n\n    public function updateSettings()\n    {\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Dashboard']['value'])) {\n                throw new InvalidArgumentException(__('No setting data found.'));\n            }\n            $data = array(\n                'UserSetting' => array(\n                    'setting' => 'dashboard',\n                    'value' => $this->request->data['Dashboard']['value']\n                )\n            );\n            $result = $this->User->UserSetting->setSetting($this->Auth->user(), $data);\n            if ($result) {\n                return $this->RestResponse->saveSuccessResponse('Dashboard', 'updateSettings', false, false, __('Settings updated.'));\n            }\n            return $this->RestResponse->saveFailResponse('Dashboard', 'updateSettings', false, $this->User->UserSetting->validationErrors, $this->response->type());\n        }\n    }\n\n    public function getEmptyWidget($widget, $k = 1)\n    {\n        $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $widget);\n        if (empty($dashboardWidget)) {\n            throw new NotFoundException(__('Invalid widget.'));\n        }\n        $this->layout = false;\n        $widget = array(\n            'config' => isset($dashboardWidget->config) ? $dashboardWidget->height : '',\n            'title' => $dashboardWidget->title,\n            'alias' => isset($dashboardWidget->alias) ? $dashboardWidget->alias : $dashboardWidget->title,\n            'widget' => $widget\n        );\n        $this->set('k', $k);\n        $this->set('widget', $widget);\n    }\n\n    public function renderWidget($widget_id, $force = false)\n    {\n        $user = $this->_closeSession();\n\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint can only be reached via POST requests.'));\n        }\n\n        if (empty($this->request->data['data'])) {\n            $this->request->data = array('data' => $this->request->data);\n        }\n        if (empty($this->request->data['data'])) {\n            throw new MethodNotAllowedException(__('You need to specify the widget to use along with the configuration.'));\n        }\n        $value = $this->request->data['data'];\n        $valueConfig = $this->_jsonDecode($value['config']);\n        $dashboardWidget = $this->Dashboard->loadWidget($user, $value['widget']);\n\n        $cacheLifetime = $dashboardWidget->cacheLifetime ?? false;\n        if ($cacheLifetime !== false) {\n            $orgScope = $this->_isSiteAdmin() ? 0 : $user['org_id'];\n            $lookupHash = sha1($value['widget'] . $value['config'], true);\n            $cacheKey = \"misp:dashboard:$orgScope:$lookupHash\";\n\n            $redis = RedisTool::init();\n            $data = $redis->get($cacheKey);\n            if (!empty($data)) {\n                $data = RedisTool::deserialize($data);\n            } else {\n                $data = $dashboardWidget->handler($user, $valueConfig);\n                $redis->setex($cacheKey, $cacheLifetime, RedisTool::serialize($data));\n            }\n        } else {\n            $data = $dashboardWidget->handler($user, $valueConfig);\n        }\n        $renderer = method_exists($dashboardWidget, 'getRenderer') ? $dashboardWidget->getRenderer($valueConfig) : $dashboardWidget->render;\n        $config = array(\n            'render' => $renderer,\n            'autoRefreshDelay' => empty($dashboardWidget->autoRefreshDelay) ? false : $dashboardWidget->autoRefreshDelay,\n            'widget_config' => empty($valueConfig['widget_config']) ? array() : $valueConfig['widget_config']\n        );\n\n        if (!empty($this->request->params['named']['exportjson'])) {\n            return $this->RestResponse->viewData($data);\n        } else if (!empty($this->request->params['named']['exportcsv'])) {\n            $csv = '';\n            $toConvert = !empty($data) ? (!empty($data['data']) ? $data['data'] : $data) : [];\n            if (!empty($toConvert)) {\n                $firstElement = key($toConvert);\n                if (is_string($firstElement)) {\n                    foreach ($toConvert as $key => $value) {\n                        $csv .= sprintf('%s,%s', $key, json_encode($value)) . PHP_EOL;\n                    }\n                } else { // second element is an array\n                    $csv = array_map(function($row) {\n                        $flattened = array_values(Hash::flatten($row));\n                        $stringified = array_map('strval', $flattened);\n                        $quotified = array_map(function($item) { return sprintf('\"%s\"', $item); }, $stringified);\n                        return implode(',', $quotified);\n                    }, $toConvert);\n                    $rowKey = implode(',', array_map(function ($item) {\n                        return sprintf('\"%s\"', $item);\n                    }, array_map('strval', array_keys(Hash::flatten($toConvert[0])))));\n                    $csv = $rowKey . PHP_EOL .  implode(PHP_EOL, array_values($csv));\n                }\n            }\n            return $this->RestResponse->viewData($csv, 'text/csv', false, true);\n        }\n\n        $this->layout = false;\n        $this->set('title', $dashboardWidget->title);\n        $this->set('widget_id', $widget_id);\n        $this->set('data', $data);\n        $this->set('config', $config);\n        $this->render('widget_loader');\n    }\n\n    public function import()\n    {\n        if ($this->request->is('post')) {\n            if (!empty($this->request->data['Dashboard'])) {\n                $this->request->data = json_decode($this->request->data['Dashboard']['value'], true);\n            }\n            if (!empty($this->request->data['UserSetting'])) {\n                $this->request->data = $this->request->data['UserSetting']['value'];\n            }\n            $result = $this->Dashboard->import($this->Auth->user(), $this->request->data);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('Dashboard', 'import', false, false, __('Settings updated.'));\n                }\n                return $this->RestResponse->saveFailResponse('Dashboard', 'import', false, __('Settings could not be updated.'), $this->response->type());\n            } else {\n                if ($result) {\n                    $this->Flash->success(__('Settings updated.'));\n                } else {\n                    $this->Flash->error(__('Settings could not be updated.'));\n                }\n                $this->redirect($this->baseurl . '/dashboards');\n            }\n        }\n        $this->layout = false;\n    }\n\n    public function export()\n    {\n        $data = $this->Dashboard->export($this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('data', $data);\n            $this->layout = false;\n        }\n    }\n\n    public function saveTemplate($update = false)\n    {\n        if (!empty($update)) {\n            $conditions = array('Dashboard.id' => $update);\n            if (Validation::uuid($update)) {\n                $conditions = array('Dashboard.uuid' => $update);\n            }\n            $existingDashboard = $this->Dashboard->find('first', array(\n                'recursive' => -1,\n                'conditions' => $conditions\n            ));\n            if (\n                empty($existingDashboard) ||\n                (!$this->_isSiteAdmin() && $existingDashboard['Dashboard']['user_id'] != $this->Auth->user('id'))\n            ) {\n                throw new NotFoundException(__('Invalid dashboard template.'));\n            }\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (isset($this->request->data['Dashboard'])) {\n                $this->request->data = $this->request->data['Dashboard'];\n            }\n            $data = $this->request->data;\n            if (empty($update)) { // save the template stored in user setting and make it persistent\n                $data['value'] = $this->User->UserSetting->getSetting($this->Auth->user('id'), 'dashboard');\n            }\n            $result = $this->Dashboard->saveDashboardTemplate($this->Auth->user(), $data, $update);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('Dashboard', 'saveDashboardTemplate', false, false, __('Dashboard template updated.'));\n                }\n                return $this->RestResponse->saveFailResponse('Dashboard', 'import', false, __('Dashboard template could not be updated.'), $this->response->type());\n            } else {\n                if ($result) {\n                    $this->Flash->success(__('Dashboard template updated.'));\n                } else {\n                    $this->Flash->error(__('Dashboard template could not be updated.'));\n                }\n                $this->redirect($this->baseurl . '/dashboards/listTemplates');\n            }\n        } else {\n            $this->layout = false;\n        }\n        $permFlags = array(0 => __('Unrestricted'));\n        foreach ($this->User->Role->permFlags as $perm_flag => $perm_data) {\n            $permFlags[$perm_flag] = $perm_data['text'];\n        }\n        $options = array(\n            'org_id' => (\n                array(\n                    0 => __('Unrestricted')\n                ) + // avoid re-indexing\n                $this->User->Organisation->find('list', array(\n                    'fields' => array(\n                        'Organisation.id', 'Organisation.name'\n                    ),\n                    'conditions' => array('Organisation.local' => 1)\n                ))\n            ),\n            'role_id' => (\n                array(\n                    0 => __('Unrestricted')\n                ) + // avoid re-indexing\n                $this->User->Role->find('list', array(\n                    'fields' => array(\n                        'Role.id', 'Role.name'\n                    )\n                ))\n            ),\n            'role_perms' => $permFlags\n        );\n        if (!empty($update)) {\n            $this->request->data = $existingDashboard;\n        }\n        $this->set('options', $options);\n    }\n\n    public function listTemplates()\n    {\n        $conditions = array();\n        // load all widgets for internal use, won't be displayed to the user. Thus we circumvent the ACL on it.\n        $accessible_widgets = array_keys($this->Dashboard->loadAllWidgets($this->Auth->user()));\n        if (!$this->_isSiteAdmin()) {\n            $permission_flags = array();\n            foreach ($this->Auth->user('Role') as $perm => $value) {\n                if (strpos($perm, 'perm_') !== false && !empty($value)) {\n                    $permission_flags[] = $perm;\n                }\n            }\n            $conditions['AND'] = array(\n                array(\n                    'OR' => array(\n                        'Dashboard.user_id' => $this->Auth->user('id'),\n                        'AND' => array(\n                            'Dashboard.selectable' => 1,\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_org_id' => $this->Auth->user('org_id')),\n                                    array('Dashboard.restrict_to_org_id' => 0)\n                                )\n                            ),\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_role_id' => $this->Auth->user('role_id')),\n                                    array('Dashboard.restrict_to_role_id' => 0)\n                                )\n                            ),\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_permission_flag' => $permission_flags),\n                                    array('Dashboard.restrict_to_permission_flag' => 0)\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        }\n        if (!empty($this->passedArgs['value'])) {\n            $conditions['AND'][] = array(\n                'OR' => array(\n                    'LOWER(Dashboard.name) LIKE' => '%' . strtolower(trim($this->passedArgs['value'])) . '%',\n                    'LOWER(Dashboard.description) LIKE' => '%' . strtolower(trim($this->passedArgs['value'])) . '%',\n                    'LOWER(Dashboard.uuid) LIKE' => strtolower(trim($this->passedArgs['value']))\n                )\n            );\n        }\n        $this->paginate['conditions'] = $conditions;\n        if ($this->_isRest()) {\n            $params = array(\n                'conditions' => $conditions,\n                'recursive' => -1\n            );\n            $paramsToPass = array('limit', 'page');\n            foreach ($paramsToPass as $p) {\n                if (!empty($this->passedArgs[$p])) {\n                    $params[$p] = $this->passedArgs[$p];\n                }\n            }\n            $data = $this->Dashboard->find('all', $params);\n            foreach ($data as &$element) {\n                $element['Dashboard']['value'] = json_decode($element['Dashboard']['value'], true);\n            }\n            return $this->RestResponse->viewData(\n                $data,\n                $this->response->type()\n            );\n        } else {\n            $this->paginate['contain'] = array(\n                'User.id', 'User.email'\n            );\n            $data = $this->paginate();\n            foreach ($data as &$element) {\n                $element['Dashboard']['value'] = json_decode($element['Dashboard']['value'], true);\n                $widgets = array();\n                foreach ($element['Dashboard']['value'] as $val) {\n                    $widgets[$val['widget']] = 1;\n                }\n                $element['Dashboard']['widgets'] = array_keys($widgets);\n                sort($element['Dashboard']['widgets']);\n                $temp = [];\n                foreach ($element['Dashboard']['widgets'] as $widget) {\n                    if (in_array($widget, $accessible_widgets)) {\n                        $temp['allow'][] = $widget;\n                    } else {\n                        $temp['deny'][] = $widget;\n                    }\n                }\n                $element['Dashboard']['widgets'] = $temp;\n                if ($element['Dashboard']['user_id'] != $this->Auth->user('id')) {\n                    $element['User']['email'] = '';\n                }\n            }\n            $this->set('passedArgs', json_encode($this->passedArgs));\n            $this->set('data', $data);\n        }\n    }\n\n    public function deleteTemplate($id)\n    {\n        $conditions = array();\n        if (Validation::uuid($id)) {\n            $conditions['AND'][] = array('Dashboard.uuid' => $id);\n        } else {\n            $conditions['AND'][] = array('Dashboard.id' => $id);\n        }\n        if (!$this->_isSiteAdmin()) {\n            $conditions['AND'][] = array('Dashboard.user_id' => $this->Auth->user('id'));\n        }\n        $dashboard = $this->Dashboard->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        if (empty($dashboard)) {\n            throw new NotFoundException(__('Invalid dashboard template.'));\n        }\n        $this->Dashboard->delete($dashboard['Dashboard']['id']);\n        $message = __('Dashboard template removed.');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Dashboard', 'delete', $id, false, $message);\n        } else {\n            $this->Flash->success($message);\n            $this->redirect($this->baseurl . '/dashboards/listTemplates');\n        }\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Dashboard $Dashboard\n */\nclass DashboardsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n    public $helpers = array('ScopedCSS');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'renderWidget';\n        $this->Security->unlockedActions[] = 'getForm';\n        if ($this->request->action === 'renderWidget') {\n            $this->Security->doNotGenerateToken = true;\n        }\n    }\n\n    public $paginate = array(\n        'limit' => 60,\n        'maxLimit' => 9999\n    );\n\n    public function index($template_id = false)\n    {\n        if (empty($template_id)) {\n            $params = array(\n                'conditions' => array(\n                    'UserSetting.user_id' => $this->Auth->user('id'),\n                    'UserSetting.setting' => 'dashboard'\n                )\n            );\n            $userSettings = $this->User->UserSetting->find('first', $params);\n        } else {\n            $dashboardTemplate = $this->Dashboard->getDashboardTemplate($this->Auth->user(), $template_id);\n            if (empty($dashboardTemplate)) {\n                throw new NotFoundException(__('Invalid dashboard template.'));\n            }\n        }\n        if (empty($userSettings) && empty($dashboardTemplate)) {\n            $dashboardTemplate = $this->Dashboard->getDashboardTemplate($this->Auth->user());\n        }\n        if (empty($userSettings)) {\n            if (empty($dashboardTemplate)) {\n                $value = array(\n                    array(\n                        'widget' => 'MispStatusWidget',\n                        'config' => array(\n                        ),\n                        'position' => array(\n                            'x' => 0,\n                            'y' => 0,\n                            'width' => 2,\n                            'height' => 2\n                        )\n                    )\n                );\n            } else {\n                $value = $dashboardTemplate['Dashboard']['value'];\n                if (!is_array($value)) {\n                    $value = json_decode($value, true);\n                }\n            }\n            $userSettings = array(\n                'UserSetting' => array(\n                    'setting' => 'dashboard',\n                    'value' => $value\n                )\n            );\n        }\n        $widgets = array();\n        foreach ($userSettings['UserSetting']['value'] as $widget) {\n            try {\n                $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $widget['widget']);\n                $widget['width'] = $dashboardWidget->width;\n                $widget['height'] = $dashboardWidget->height;\n                $widget['title'] = $dashboardWidget->title;\n                $widgets[] = $widget;\n            } catch (Exception $e) {\n                // continue, we just don't load the widget\n            }\n        }\n        $this->set('widgets', $widgets);\n    }\n\n    public function getForm($action = 'edit')\n    {\n        if ($this->request->is(['post', 'put'])) {\n            $data = $this->request->data;\n            if (empty($data['config'])) {\n                $data['config'] = '';\n            }\n            if (!empty($data['id']) && !preg_match('/^[\\w\\d_]+$/i', $data['id'])) {\n                throw new BadRequestException(__('Invalid widget id provided.'));\n            }\n            if ($action === 'add') {\n                $data['widget_options'] = $this->Dashboard->loadAllWidgets($this->Auth->user());\n            } else if ($action === 'edit') {\n                if (!isset($data['widget'])) {\n                    throw new BadRequestException(__('No widget name passed.'));\n                }\n                $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $data['widget']);\n                $data['description'] = empty($dashboardWidget->description) ? '' : $dashboardWidget->description;\n                $data['params'] = empty($dashboardWidget->params) ? array() : $dashboardWidget->params;\n                $data['params'] = array_merge($data['params'], array('widget_config' => __('Configuration of the widget that will be passed to the render. Check the view for more information')));\n                $data['params'] = array_merge(array('alias' => __('Alias to use as the title of the widget')), $data['params']);\n            } else {\n                throw new BadRequestException(__('Invalid action provided, just add or edit is supported.'));\n            }\n            $this->set('data', $data);\n            $this->layout = false;\n            $this->render($action);\n        }\n    }\n\n    public function updateSettings()\n    {\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Dashboard']['value'])) {\n                throw new InvalidArgumentException(__('No setting data found.'));\n            }\n            $data = array(\n                'UserSetting' => array(\n                    'setting' => 'dashboard',\n                    'value' => $this->request->data['Dashboard']['value']\n                )\n            );\n            $result = $this->User->UserSetting->setSetting($this->Auth->user(), $data);\n            if ($result) {\n                return $this->RestResponse->saveSuccessResponse('Dashboard', 'updateSettings', false, false, __('Settings updated.'));\n            }\n            return $this->RestResponse->saveFailResponse('Dashboard', 'updateSettings', false, $this->User->UserSetting->validationErrors, $this->response->type());\n        }\n    }\n\n    public function getEmptyWidget($widget, $k = 1)\n    {\n        $dashboardWidget = $this->Dashboard->loadWidget($this->Auth->user(), $widget);\n        if (empty($dashboardWidget)) {\n            throw new NotFoundException(__('Invalid widget.'));\n        }\n        $this->layout = false;\n        $widget = array(\n            'config' => isset($dashboardWidget->config) ? $dashboardWidget->height : '',\n            'title' => $dashboardWidget->title,\n            'alias' => isset($dashboardWidget->alias) ? $dashboardWidget->alias : $dashboardWidget->title,\n            'widget' => $widget\n        );\n        $this->set('k', $k);\n        $this->set('widget', $widget);\n    }\n\n    public function renderWidget($widget_id, $force = false)\n    {\n        $user = $this->_closeSession();\n\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint can only be reached via POST requests.'));\n        }\n\n        if (empty($this->request->data['data'])) {\n            $this->request->data = array('data' => $this->request->data);\n        }\n        if (empty($this->request->data['data'])) {\n            throw new MethodNotAllowedException(__('You need to specify the widget to use along with the configuration.'));\n        }\n        $value = $this->request->data['data'];\n        $valueConfig = $this->_jsonDecode($value['config']);\n        $dashboardWidget = $this->Dashboard->loadWidget($user, $value['widget']);\n\n        $cacheLifetime = $dashboardWidget->cacheLifetime ?? false;\n        if ($cacheLifetime !== false) {\n            $orgScope = $this->_isSiteAdmin() ? 0 : $user['org_id'];\n            $lookupHash = sha1($value['widget'] . $value['config'], true);\n            $cacheKey = \"misp:dashboard:$orgScope:$lookupHash\";\n\n            $redis = RedisTool::init();\n            $data = $redis->get($cacheKey);\n            if (!empty($data)) {\n                $data = RedisTool::deserialize($data);\n            } else {\n                $data = $dashboardWidget->handler($user, $valueConfig);\n                $redis->setex($cacheKey, $cacheLifetime, RedisTool::serialize($data));\n            }\n        } else {\n            $data = $dashboardWidget->handler($user, $valueConfig);\n        }\n        $renderer = method_exists($dashboardWidget, 'getRenderer') ? $dashboardWidget->getRenderer($valueConfig) : $dashboardWidget->render;\n        $config = array(\n            'render' => $renderer,\n            'autoRefreshDelay' => empty($dashboardWidget->autoRefreshDelay) ? false : $dashboardWidget->autoRefreshDelay,\n            'widget_config' => empty($valueConfig['widget_config']) ? array() : $valueConfig['widget_config']\n        );\n\n        if (!empty($this->request->params['named']['exportjson'])) {\n            return $this->RestResponse->viewData($data);\n        } else if (!empty($this->request->params['named']['exportcsv'])) {\n            $csv = '';\n            $toConvert = !empty($data) ? (!empty($data['data']) ? $data['data'] : $data) : [];\n            if (!empty($toConvert)) {\n                $firstElement = key($toConvert);\n                if (is_string($firstElement)) {\n                    foreach ($toConvert as $key => $value) {\n                        $csv .= sprintf('%s,%s', $key, json_encode($value)) . PHP_EOL;\n                    }\n                } else { // second element is an array\n                    $csv = array_map(function($row) {\n                        $flattened = array_values(Hash::flatten($row));\n                        $stringified = array_map('strval', $flattened);\n                        $quotified = array_map(function($item) { return sprintf('\"%s\"', $item); }, $stringified);\n                        return implode(',', $quotified);\n                    }, $toConvert);\n                    $rowKey = implode(',', array_map(function ($item) {\n                        return sprintf('\"%s\"', $item);\n                    }, array_map('strval', array_keys(Hash::flatten($toConvert[0])))));\n                    $csv = $rowKey . PHP_EOL .  implode(PHP_EOL, array_values($csv));\n                }\n            }\n            return $this->RestResponse->viewData($csv, 'text/csv', false, true);\n        }\n\n        $this->layout = false;\n        $this->set('title', $dashboardWidget->title);\n        $this->set('widget_id', $widget_id);\n        $this->set('data', $data);\n        $this->set('config', $config);\n        $this->render('widget_loader');\n    }\n\n    public function import()\n    {\n        if ($this->request->is('post')) {\n            if (!empty($this->request->data['Dashboard'])) {\n                $this->request->data = json_decode($this->request->data['Dashboard']['value'], true);\n            }\n            if (!empty($this->request->data['UserSetting'])) {\n                $this->request->data = $this->request->data['UserSetting']['value'];\n            }\n            $result = $this->Dashboard->import($this->Auth->user(), $this->request->data);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('Dashboard', 'import', false, false, __('Settings updated.'));\n                }\n                return $this->RestResponse->saveFailResponse('Dashboard', 'import', false, __('Settings could not be updated.'), $this->response->type());\n            } else {\n                if ($result) {\n                    $this->Flash->success(__('Settings updated.'));\n                } else {\n                    $this->Flash->error(__('Settings could not be updated.'));\n                }\n                $this->redirect($this->baseurl . '/dashboards');\n            }\n        }\n        $this->layout = false;\n    }\n\n    public function export()\n    {\n        $data = $this->Dashboard->export($this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('data', $data);\n            $this->layout = false;\n        }\n    }\n\n    public function saveTemplate($update = false)\n    {\n        if (!empty($update)) {\n            $conditions = array('Dashboard.id' => $update);\n            if (Validation::uuid($update)) {\n                $conditions = array('Dashboard.uuid' => $update);\n            }\n            $existingDashboard = $this->Dashboard->find('first', array(\n                'recursive' => -1,\n                'conditions' => $conditions\n            ));\n            if (\n                empty($existingDashboard) ||\n                (!$this->_isSiteAdmin() && $existingDashboard['Dashboard']['user_id'] != $this->Auth->user('id'))\n            ) {\n                throw new NotFoundException(__('Invalid dashboard template.'));\n            }\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (isset($this->request->data['Dashboard'])) {\n                $this->request->data = $this->request->data['Dashboard'];\n            }\n            $data = $this->request->data;\n            if (empty($update)) { // save the template stored in user setting and make it persistent\n                $data['value'] = $this->User->UserSetting->getSetting($this->Auth->user('id'), 'dashboard');\n            }\n            $result = $this->Dashboard->saveDashboardTemplate($this->Auth->user(), $data, $update);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('Dashboard', 'saveDashboardTemplate', false, false, __('Dashboard template updated.'));\n                }\n                return $this->RestResponse->saveFailResponse('Dashboard', 'import', false, __('Dashboard template could not be updated.'), $this->response->type());\n            } else {\n                if ($result) {\n                    $this->Flash->success(__('Dashboard template updated.'));\n                } else {\n                    $this->Flash->error(__('Dashboard template could not be updated.'));\n                }\n                $this->redirect($this->baseurl . '/dashboards/listTemplates');\n            }\n        } else {\n            $this->layout = false;\n        }\n        $permFlags = array(0 => __('Unrestricted'));\n        foreach ($this->User->Role->permFlags as $perm_flag => $perm_data) {\n            $permFlags[$perm_flag] = $perm_data['text'];\n        }\n        $options = array(\n            'org_id' => (\n                array(\n                    0 => __('Unrestricted')\n                ) + // avoid re-indexing\n                $this->User->Organisation->find('list', array(\n                    'fields' => array(\n                        'Organisation.id', 'Organisation.name'\n                    ),\n                    'conditions' => array('Organisation.local' => 1)\n                ))\n            ),\n            'role_id' => (\n                array(\n                    0 => __('Unrestricted')\n                ) + // avoid re-indexing\n                $this->User->Role->find('list', array(\n                    'fields' => array(\n                        'Role.id', 'Role.name'\n                    )\n                ))\n            ),\n            'role_perms' => $permFlags\n        );\n        if (!empty($update)) {\n            $this->request->data = $existingDashboard;\n        }\n        $this->set('options', $options);\n    }\n\n    public function listTemplates()\n    {\n        $conditions = array();\n        // load all widgets for internal use, won't be displayed to the user. Thus we circumvent the ACL on it.\n        $accessible_widgets = array_keys($this->Dashboard->loadAllWidgets($this->Auth->user()));\n        if (!$this->_isSiteAdmin()) {\n            $permission_flags = array();\n            foreach ($this->Auth->user('Role') as $perm => $value) {\n                if (strpos($perm, 'perm_') !== false && !empty($value)) {\n                    $permission_flags[] = $perm;\n                }\n            }\n            $conditions['AND'] = array(\n                array(\n                    'OR' => array(\n                        'Dashboard.user_id' => $this->Auth->user('id'),\n                        'AND' => array(\n                            'Dashboard.selectable' => 1,\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_org_id' => $this->Auth->user('org_id')),\n                                    array('Dashboard.restrict_to_org_id' => 0)\n                                )\n                            ),\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_role_id' => $this->Auth->user('role_id')),\n                                    array('Dashboard.restrict_to_role_id' => 0)\n                                )\n                            ),\n                            array(\n                                'OR' => array(\n                                    array('Dashboard.restrict_to_permission_flag' => $permission_flags),\n                                    array('Dashboard.restrict_to_permission_flag' => 0)\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        }\n        if (!empty($this->passedArgs['value'])) {\n            $conditions['AND'][] = array(\n                'OR' => array(\n                    'LOWER(Dashboard.name) LIKE' => '%' . strtolower(trim($this->passedArgs['value'])) . '%',\n                    'LOWER(Dashboard.description) LIKE' => '%' . strtolower(trim($this->passedArgs['value'])) . '%',\n                    'LOWER(Dashboard.uuid) LIKE' => strtolower(trim($this->passedArgs['value']))\n                )\n            );\n        }\n        $this->paginate['conditions'] = $conditions;\n        if ($this->_isRest()) {\n            $params = array(\n                'conditions' => $conditions,\n                'recursive' => -1\n            );\n            $paramsToPass = array('limit', 'page');\n            foreach ($paramsToPass as $p) {\n                if (!empty($this->passedArgs[$p])) {\n                    $params[$p] = $this->passedArgs[$p];\n                }\n            }\n            $data = $this->Dashboard->find('all', $params);\n            foreach ($data as &$element) {\n                $element['Dashboard']['value'] = json_decode($element['Dashboard']['value'], true);\n            }\n            return $this->RestResponse->viewData(\n                $data,\n                $this->response->type()\n            );\n        } else {\n            $this->paginate['contain'] = array(\n                'User.id', 'User.email'\n            );\n            $data = $this->paginate();\n            foreach ($data as &$element) {\n                $element['Dashboard']['value'] = json_decode($element['Dashboard']['value'], true);\n                $widgets = array();\n                foreach ($element['Dashboard']['value'] as $val) {\n                    $widgets[$val['widget']] = 1;\n                }\n                $element['Dashboard']['widgets'] = array_keys($widgets);\n                sort($element['Dashboard']['widgets']);\n                $temp = [];\n                foreach ($element['Dashboard']['widgets'] as $widget) {\n                    if (in_array($widget, $accessible_widgets)) {\n                        $temp['allow'][] = $widget;\n                    } else {\n                        $temp['deny'][] = $widget;\n                    }\n                }\n                $element['Dashboard']['widgets'] = $temp;\n                if ($element['Dashboard']['user_id'] != $this->Auth->user('id')) {\n                    $element['User']['email'] = '';\n                }\n            }\n            $this->set('passedArgs', json_encode($this->passedArgs));\n            $this->set('data', $data);\n        }\n    }\n\n    public function deleteTemplate($id)\n    {\n        $conditions = array();\n        if (Validation::uuid($id)) {\n            $conditions['AND'][] = array('Dashboard.uuid' => $id);\n        } else {\n            $conditions['AND'][] = array('Dashboard.id' => $id);\n        }\n        if (!$this->_isSiteAdmin()) {\n            $conditions['AND'][] = array('Dashboard.user_id' => $this->Auth->user('id'));\n        }\n        $dashboard = $this->Dashboard->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        if (empty($dashboard)) {\n            throw new NotFoundException(__('Invalid dashboard template.'));\n        }\n        $this->Dashboard->delete($dashboard['Dashboard']['id']);\n        $message = __('Dashboard template removed.');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Dashboard', 'delete', $id, false, $message);\n        } else {\n            $this->Flash->success($message);\n            $this->redirect($this->baseurl . '/dashboards/listTemplates');\n        }\n    }\n}\n"], "filenames": ["app/Controller/DashboardsController.php"], "buggy_code_start_loc": [94], "buggy_code_end_loc": [94], "fixing_code_start_loc": [95], "fixing_code_end_loc": [98], "type": "CWE-79", "message": "An issue was discovered in MISP 2.4.174. In app/Controller/DashboardsController.php, a reflected XSS issue exists via the id parameter upon a dashboard edit.", "other": {"cve": {"id": "CVE-2023-41098", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-23T06:15:07.950", "lastModified": "2023-08-28T21:21:37.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP 2.4.174. In app/Controller/DashboardsController.php, a reflected XSS issue exists via the id parameter upon a dashboard edit."}, {"lang": "es", "value": "Se ha descubierto un problema en MISP v2.4.174. En el fichero \"app/Controller/DashboardsController.php\" existe un problema de Cross-Site Scripting (XSS) reflejado a trav\u00e9s del par\u00e1metro \"id\" al editar un panel de control. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.174:*:*:*:*:*:*:*", "matchCriteriaId": "41B6B5F0-5F19-48A8-BD25-08E4D3FD7665"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/09fb0cba65eab9341e81f1cbebc2ae10be34a2b7", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/09fb0cba65eab9341e81f1cbebc2ae10be34a2b7"}}