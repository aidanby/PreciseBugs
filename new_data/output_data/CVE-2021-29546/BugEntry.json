{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Implements a quantized eight-bit version of the bias addition operation.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/meta_support.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/quantization_utils.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <class T1, class T2, class T3>\nclass QuantizedBiasAddOp : public OpKernel {\n public:\n  explicit QuantizedBiasAddOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& bias = context->input(1);\n    const float input_min = context->input(2).flat<float>()(0);\n    const float input_max = context->input(3).flat<float>()(0);\n    const float bias_min = context->input(4).flat<float>()(0);\n    const float bias_max = context->input(5).flat<float>()(0);\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrixOrHigher(input.shape()),\n                errors::InvalidArgument(\"Input tensor must be at least 2D: \",\n                                        input.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(bias.shape()),\n                errors::InvalidArgument(\"Biases must be 1D: \",\n                                        bias.shape().DebugString()));\n    const auto last_dim = input.shape().dims() - 1;\n    OP_REQUIRES(\n        context, bias.shape().dim_size(0) == input.shape().dim_size(last_dim),\n        errors::InvalidArgument(\n            \"Must provide as many biases as the last dimension \"\n            \"of the input tensor: \",\n            bias.shape().DebugString(), \" vs. \", input.shape().DebugString()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n\n    float total_min;\n    float total_max;\n\n    if (meta::IsSupportedAndEnabled() && std::is_same<T1, quint8>() &&\n        std::is_same<T2, quint8>() && std::is_same<T3, qint32>()) {\n      auto input_ui8_array = input.flat<quint8>();\n      auto bias_ui8_array = bias.flat<quint8>();\n      GetOutputMinAndMaxForQuantizedAdd(input_min, input_max, bias_min,\n                                        bias_max, &total_min, &total_max);\n      meta::QuantizedBiasAdd(context, input_ui8_array.data(),\n                             input_ui8_array.size(), bias_ui8_array.data(),\n                             bias_ui8_array.size(), input_min, input_max,\n                             bias_min, bias_max, total_min, total_max,\n                             output->flat<qint32>().data());\n    } else {\n      QuantizedAddUsingEigen<T1, T2, T3>(\n          context->template eigen_device<CPUDevice>(), input, input_min,\n          input_max, bias, bias_min, bias_max, output, &total_min, &total_max);\n    }\n\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &output_min));\n    output_min->flat<float>()(0) = total_min;\n\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &output_max));\n    output_max->flat<float>()(0) = total_max;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<quint8>(\"T1\")\n                            .TypeConstraint<quint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<quint8, quint8, qint32>);\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<qint8>(\"T1\")\n                            .TypeConstraint<qint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<qint8, qint8, qint32>);\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Implements a quantized eight-bit version of the bias addition operation.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/kernels/meta_support.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/quantization_utils.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <class T1, class T2, class T3>\nclass QuantizedBiasAddOp : public OpKernel {\n public:\n  explicit QuantizedBiasAddOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& bias = context->input(1);\n    const float input_min = context->input(2).flat<float>()(0);\n    const float input_max = context->input(3).flat<float>()(0);\n    const float bias_min = context->input(4).flat<float>()(0);\n    const float bias_max = context->input(5).flat<float>()(0);\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrixOrHigher(input.shape()),\n                errors::InvalidArgument(\"Input tensor must be at least 2D: \",\n                                        input.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(bias.shape()),\n                errors::InvalidArgument(\"Biases must be 1D: \",\n                                        bias.shape().DebugString()));\n    const auto last_dim = input.shape().dims() - 1;\n    OP_REQUIRES(\n        context, bias.shape().dim_size(0) == input.shape().dim_size(last_dim),\n        errors::InvalidArgument(\n            \"Must provide as many biases as the last dimension \"\n            \"of the input tensor: \",\n            bias.shape().DebugString(), \" vs. \", input.shape().DebugString()));\n    OP_REQUIRES(context, bias.NumElements() > 0,\n                errors::InvalidArgument(\"Must provide at least 1 bias\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, input.shape(), &output));\n\n    float total_min;\n    float total_max;\n\n    if (meta::IsSupportedAndEnabled() && std::is_same<T1, quint8>() &&\n        std::is_same<T2, quint8>() && std::is_same<T3, qint32>()) {\n      auto input_ui8_array = input.flat<quint8>();\n      auto bias_ui8_array = bias.flat<quint8>();\n      GetOutputMinAndMaxForQuantizedAdd(input_min, input_max, bias_min,\n                                        bias_max, &total_min, &total_max);\n      meta::QuantizedBiasAdd(context, input_ui8_array.data(),\n                             input_ui8_array.size(), bias_ui8_array.data(),\n                             bias_ui8_array.size(), input_min, input_max,\n                             bias_min, bias_max, total_min, total_max,\n                             output->flat<qint32>().data());\n    } else {\n      QuantizedAddUsingEigen<T1, T2, T3>(\n          context->template eigen_device<CPUDevice>(), input, input_min,\n          input_max, bias, bias_min, bias_max, output, &total_min, &total_max);\n    }\n\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, {}, &output_min));\n    output_min->flat<float>()(0) = total_min;\n\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(2, {}, &output_max));\n    output_max->flat<float>()(0) = total_max;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<quint8>(\"T1\")\n                            .TypeConstraint<quint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<quint8, quint8, qint32>);\nREGISTER_KERNEL_BUILDER(Name(\"QuantizedBiasAdd\")\n                            .Device(DEVICE_CPU)\n                            .TypeConstraint<qint8>(\"T1\")\n                            .TypeConstraint<qint8>(\"T2\")\n                            .TypeConstraint<qint32>(\"out_type\"),\n                        QuantizedBiasAddOp<qint8, qint8, qint32>);\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/quantized_bias_add_op.cc"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [58], "fixing_code_start_loc": [59], "fixing_code_end_loc": [61], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel(https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29546", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:12.717", "lastModified": "2021-07-26T16:05:50.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel(https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Un atacante puede desencadenar una divisi\u00f3n entera por un comportamiento indefinido cero en \"tf.raw_ops.QuantizedBiasAdd\".&#xa0;Esto es debido a que la implementaci\u00f3n del kernel Eigen (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) hace una divisi\u00f3n por el n\u00famero de elementos del entrada m\u00e1s peque\u00f1a (basada en una forma) sin comprobar que no sea cero.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/67784700869470d65d5f2ef20aeb5e97c31673cb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m34j-p8rj-wjxq", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/67784700869470d65d5f2ef20aeb5e97c31673cb"}}