{"buggy_code": ["<?php\n/**\n * This file is part of the Cockpit project.\n *\n * (c) Artur Heinze - \ud83c\udd70\ud83c\udd76\ud83c\udd74\ud83c\udd7d\ud83c\udd83\ud83c\udd74\ud83c\udd79\ud83c\udd7e, http://agentejo.com\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// Auth Api\n$this->module('cockpit')->extend([\n\n    'authenticate' => function($data) use($app) {\n\n        $data = array_merge([\n            'user'     => '',\n            'email'    => '',\n            'group'    => '',\n            'password' => ''\n        ], $data);\n\n        if (!$data['password']) return false;\n\n        $filter = ['active' => true];\n\n        if ($data['email']) {\n            $filter['email'] = $data['email'];\n        } else {\n            $filter['user'] = $data['user'];\n        }\n\n        $user = $app->storage->findOne('cockpit/accounts', $filter);\n\n        if ($user && password_verify($data['password'], $user['password'])) {\n\n            $user = array_merge($data, (array)$user);\n\n            unset($user['password']);\n\n            return $user;\n        }\n\n        return false;\n    },\n\n    'setUser' => function($user, $permanent = true) use($app) {\n\n        if ($permanent) {\n            $app('session')->write('cockpit.app.auth', $user);\n        }\n\n        $app->trigger('cockpit.auth.setuser', [&$user, $permanent]);\n\n        $app['cockpit.auth.user'] = $user;\n    },\n\n    'getUser' => function($prop = null, $default = null) use($app) {\n\n        $user = $app->retrieve('cockpit.auth.user');\n\n        if (is_null($user) && !COCKPIT_API_REQUEST) {\n            $user = $app('session')->read('cockpit.app.auth', null);\n        }\n\n        if (!is_null($prop)) {\n            return $user && isset($user[$prop]) ? $user[$prop] : $default;\n        }\n\n        return $user;\n    },\n\n    'logout' => function() use($app) {\n        $app->trigger('cockpit.account.logout', [$this->getUser()]);\n        $app('session')->delete('cockpit.app.auth');\n    },\n\n    'hasaccess' => function($resource, $action, $group = null) use($app) {\n\n        if (!$group) {\n            $user = $this->getUser();\n            $group = $user['group'] ?? null;\n        }\n\n        if ($group) {\n            if ($app('acl')->hasaccess($group, $resource, $action)) return true;\n        }\n\n        return false;\n    },\n\n    'getGroup' => function() use($app) {\n\n        $user = $this->getUser();\n\n        if (isset($user['group'])) {\n            return $user['group'];\n        }\n\n        return false;\n    },\n\n    'getGroupRights' => function($resource, $group = null) use($app) {\n\n        if ($group) {\n            return $app('acl')->getGroupRights($group, $resource);\n        }\n\n        $user = $this->getUser();\n\n        if (isset($user['group'])) {\n            return $app('acl')->getGroupRights($user['group'], $resource);\n        }\n\n        return false;\n    },\n\n    'isSuperAdmin' => function($group = null) use($app) {\n\n        if (!$group) {\n\n            $user = $this->getUser();\n\n            if (isset($user['group'])) {\n                $group = $user['group'];\n            }\n        }\n\n        return $group ? $app('acl')->isSuperAdmin($group) : false;\n    },\n\n    'getGroups' => function() use($app) {\n\n        $groups = array_merge(['admin'], array_keys($app->retrieve('config/groups', [])));\n\n        return array_unique($groups);\n    },\n\n    'getGroupVar' => function($setting, $default = null) use($app) {\n\n        if ($user = $this->getUser()) {\n\n            if (isset($user['group']) && $user['group']) {\n\n                return $app('acl')->getVar($user['group'], $setting, $default);\n            }\n        }\n\n        return $default;\n    },\n\n    'userInGroup' => function($groups) use($app) {\n\n        $user = $this->getUser();\n\n        return (isset($user['group']) && in_array($user['group'], (array)$groups));\n    },\n\n    'updateUserOption' => function($key, $value) use($app) {\n\n        if ($user = $this->getUser()) {\n\n            $data = isset($user['data']) && is_array($user['data']) ? $user['data'] : [];\n\n            $data[$key] = $value;\n\n            $app->storage->update('cockpit/accounts', ['_id' => $user['_id']], ['$set' => ['data' => $data]]);\n\n            return $value;\n        }\n\n        return false;\n    }\n]);\n\n// ACL\n$app('acl')->addResource('cockpit', [\n    'backend', 'finder', 'accounts', 'settings', 'rest', 'webhooks', 'info'\n]);\n\n\n// init acl groups + permissions + settings\n\n$app('acl')->addGroup('admin', true);\n\n/*\ngroups:\n    author:\n        $admin: false\n        $vars:\n            finder.path: /upload\n        cockpit:\n            backend: true\n            finder: true\n\n*/\n\n$aclsettings = $app->retrieve('config/groups', []);\n\nforeach ($aclsettings as $group => $settings) {\n\n    $isSuperAdmin = $settings === true || (isset($settings['$admin']) && $settings['$admin']);\n    $vars         = $settings['$vars'] ?? [];\n\n    $app('acl')->addGroup($group, $isSuperAdmin, $vars);\n\n    if (!$isSuperAdmin && is_array($settings)) {\n\n        foreach ($settings as $resource => $actions) {\n\n            if ($resource == '$vars' || $resource == '$admin') continue;\n\n            foreach ((array)$actions as $action => $allow) {\n                if ($allow) {\n                    $app('acl')->allow($group, $resource, $action);\n                }\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * This file is part of the Cockpit project.\n *\n * (c) Artur Heinze - \ud83c\udd70\ud83c\udd76\ud83c\udd74\ud83c\udd7d\ud83c\udd83\ud83c\udd74\ud83c\udd79\ud83c\udd7e, http://agentejo.com\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// Auth Api\n$this->module('cockpit')->extend([\n\n    'authenticate' => function($data) use($app) {\n\n        $data = array_merge([\n            'user'     => '',\n            'email'    => '',\n            'group'    => '',\n            'password' => ''\n        ], $data);\n\n        if (!$data['password']) return false;\n\n        $filter = ['active' => true];\n\n        if ($data['email']) {\n            $filter['email'] = $data['email'];\n        } else {\n            $filter['user'] = $data['user'];\n        }\n\n        $user = $app->storage->findOne('cockpit/accounts', $filter);\n\n        if ($user && password_verify($data['password'], $user['password'])) {\n\n            $user = array_merge($data, (array)$user);\n\n            unset($user['password']);\n\n            return $user;\n        }\n\n        return false;\n    },\n\n    'setUser' => function($user, $permanent = true) use($app) {\n\n        if ($permanent) {\n            // prevent session fixation attacks\n            session_regenerate_id(true);\n            $app('session')->write('cockpit.app.auth', $user);\n        }\n\n        $app->trigger('cockpit.auth.setuser', [&$user, $permanent]);\n\n        $app['cockpit.auth.user'] = $user;\n    },\n\n    'getUser' => function($prop = null, $default = null) use($app) {\n\n        $user = $app->retrieve('cockpit.auth.user');\n\n        if (is_null($user) && !COCKPIT_API_REQUEST) {\n            $user = $app('session')->read('cockpit.app.auth', null);\n        }\n\n        if (!is_null($prop)) {\n            return $user && isset($user[$prop]) ? $user[$prop] : $default;\n        }\n\n        return $user;\n    },\n\n    'logout' => function() use($app) {\n        $app->trigger('cockpit.account.logout', [$this->getUser()]);\n        $app('session')->delete('cockpit.app.auth');\n\n        // prevent session fixation attacks\n        session_regenerate_id(true);\n    },\n\n    'hasaccess' => function($resource, $action, $group = null) use($app) {\n\n        if (!$group) {\n            $user = $this->getUser();\n            $group = $user['group'] ?? null;\n        }\n\n        if ($group) {\n            if ($app('acl')->hasaccess($group, $resource, $action)) return true;\n        }\n\n        return false;\n    },\n\n    'getGroup' => function() use($app) {\n\n        $user = $this->getUser();\n\n        if (isset($user['group'])) {\n            return $user['group'];\n        }\n\n        return false;\n    },\n\n    'getGroupRights' => function($resource, $group = null) use($app) {\n\n        if ($group) {\n            return $app('acl')->getGroupRights($group, $resource);\n        }\n\n        $user = $this->getUser();\n\n        if (isset($user['group'])) {\n            return $app('acl')->getGroupRights($user['group'], $resource);\n        }\n\n        return false;\n    },\n\n    'isSuperAdmin' => function($group = null) use($app) {\n\n        if (!$group) {\n\n            $user = $this->getUser();\n\n            if (isset($user['group'])) {\n                $group = $user['group'];\n            }\n        }\n\n        return $group ? $app('acl')->isSuperAdmin($group) : false;\n    },\n\n    'getGroups' => function() use($app) {\n\n        $groups = array_merge(['admin'], array_keys($app->retrieve('config/groups', [])));\n\n        return array_unique($groups);\n    },\n\n    'getGroupVar' => function($setting, $default = null) use($app) {\n\n        if ($user = $this->getUser()) {\n\n            if (isset($user['group']) && $user['group']) {\n\n                return $app('acl')->getVar($user['group'], $setting, $default);\n            }\n        }\n\n        return $default;\n    },\n\n    'userInGroup' => function($groups) use($app) {\n\n        $user = $this->getUser();\n\n        return (isset($user['group']) && in_array($user['group'], (array)$groups));\n    },\n\n    'updateUserOption' => function($key, $value) use($app) {\n\n        if ($user = $this->getUser()) {\n\n            $data = isset($user['data']) && is_array($user['data']) ? $user['data'] : [];\n\n            $data[$key] = $value;\n\n            $app->storage->update('cockpit/accounts', ['_id' => $user['_id']], ['$set' => ['data' => $data]]);\n\n            return $value;\n        }\n\n        return false;\n    }\n]);\n\n// ACL\n$app('acl')->addResource('cockpit', [\n    'backend', 'finder', 'accounts', 'settings', 'rest', 'webhooks', 'info'\n]);\n\n\n// init acl groups + permissions + settings\n\n$app('acl')->addGroup('admin', true);\n\n/*\ngroups:\n    author:\n        $admin: false\n        $vars:\n            finder.path: /upload\n        cockpit:\n            backend: true\n            finder: true\n\n*/\n\n$aclsettings = $app->retrieve('config/groups', []);\n\nforeach ($aclsettings as $group => $settings) {\n\n    $isSuperAdmin = $settings === true || (isset($settings['$admin']) && $settings['$admin']);\n    $vars         = $settings['$vars'] ?? [];\n\n    $app('acl')->addGroup($group, $isSuperAdmin, $vars);\n\n    if (!$isSuperAdmin && is_array($settings)) {\n\n        foreach ($settings as $resource => $actions) {\n\n            if ($resource == '$vars' || $resource == '$admin') continue;\n\n            foreach ((array)$actions as $action => $allow) {\n                if ($allow) {\n                    $app('acl')->allow($group, $resource, $action);\n                }\n            }\n        }\n    }\n}\n"], "filenames": ["modules/Cockpit/module/auth.php"], "buggy_code_start_loc": [49], "buggy_code_end_loc": [75], "fixing_code_start_loc": [50], "fixing_code_end_loc": [81], "type": "CWE-79", "message": "Cockpit is a content management system that allows addition of content management functionality to any site. In versions 0.12.2 and prior, bad HTML sanitization in `htmleditor.js` may lead to cross-site scripting (XSS) issues. There are no known patches for this issue.", "other": {"cve": {"id": "CVE-2021-32857", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-21T15:15:11.630", "lastModified": "2023-03-02T16:21:28.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cockpit is a content management system that allows addition of content management functionality to any site. In versions 0.12.2 and prior, bad HTML sanitization in `htmleditor.js` may lead to cross-site scripting (XSS) issues. There are no known patches for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:agentejo:cockpit:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.12.2", "matchCriteriaId": "B0A8091B-5899-47F1-83C7-E9B6E0FB0B78"}]}]}], "references": [{"url": "https://github.com/agentejo/cockpit/blob/f7cd602bcc6134657ccfeb4e400b0050943dd243/assets/lib/uikit/js/components/htmleditor.js", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/agentejo/cockpit/commit/0c6628cbff3e49bc317c97b03a4666b3a75f76cc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2021-1035_Cockpit_Next/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/agentejo/cockpit/commit/0c6628cbff3e49bc317c97b03a4666b3a75f76cc"}}