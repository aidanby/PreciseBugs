{"buggy_code": ["require \"sqlite3\"\n\nclass Database < SQLite3::Database\n  def initialize(database)\n    super(database)\n    self.results_as_hash = true\n  end\n  def self.connection(environment)\n    @connection ||= Database.new(\"db/license_to_kill_#{environment}.sqlite3\")\n  end\n\n  def create_tables\n    self.execute(\"CREATE TABLE injuries (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(50))\")\n  end\n\n  def execute(statement)\n    Environment.logger.info(\"Executing: \" + statement)\n    super(statement)\n  end\nend\n", "class Injury\n  attr_reader :errors\n  attr_reader :name\n\n  def initialize(name)\n    @name = name\n    @errors = []\n  end\n\n  def self.all\n    statement = \"Select * from injuries;\"\n    execute_and_instantiate(statement)\n  end\n\n  def self.count\n    statement = \"Select count(*) from injuries;\"\n    result = Environment.database_connection.execute(statement)\n    result[0][0]\n  end\n\n  def self.find_by_name(name)\n    statement = \"Select * from injuries where name = \\\"#{name}\\\";\"\n    execute_and_instantiate(statement)[0]\n  end\n\n  def self.last\n    statement = \"Select * from injuries order by id DESC limit(1);\"\n    execute_and_instantiate(statement)[0]\n  end\n\n  def save\n    if Injury.find_by_name(self.name)\n      @errors << \"#{self.name} already exists.\"\n      false\n    else\n      statement = \"Insert into injuries (name) values ('#{name}');\"\n      Environment.database_connection.execute(statement)\n      true\n    end\n  end\n\n  private\n\n  def self.execute_and_instantiate(statement)\n    rows = Environment.database_connection.execute(statement)\n    results = []\n    rows.each do |row|\n      results << Injury.new(row[\"name\"])\n    end\n    results\n  end\nend\n", "require_relative 'spec_helper'\n\ndescribe \"Adding an injury\" do\n  before do\n    injury = Injury.new(\"Decapitation\")\n    injury.save\n  end\n  context \"adding a unique injury\" do\n    let!(:output){ run_ltk_with_input(\"2\", \"Disembowelment\") }\n    it \"should print a confirmation message\" do\n      output.should include(\"Disembowelment has been added.\")\n      Injury.count.should == 2\n    end\n    it \"should insert a new injury\" do\n      Injury.count.should == 2\n    end\n    it \"should use the name we entered\" do\n      Injury.last.name.should == \"Disembowelment\"\n    end\n  end\n  context \"adding a duplicate injury\" do\n    let(:output){ run_ltk_with_input(\"2\", \"Decapitation\") }\n    it \"should print an error message\" do\n      output.should include(\"Decapitation already exists.\")\n    end\n    it \"should ask them to try again\" do\n      menu_text = \"What is the injury you want to add?\"\n      output.should include_in_order(menu_text, \"already exists\", menu_text)\n    end\n    it \"shouldn't save the duplicate\" do\n      Injury.count.should == 1\n    end\n    context \"and trying again\" do\n      let!(:output){ run_ltk_with_input(\"2\", \"Decapitation\", \"Leprosy\") }\n      it \"should save a unique item\" do\n        Injury.last.name.should == \"Leprosy\"\n      end\n      it \"should print a success message at the end\" do\n        output.should include(\"Leprosy has been added\")\n      end\n    end\n  end\n  context \"entering an invalid looking injury name\" do\n    context \"with SQL injection\" do\n      let(:input){ \"phalangectomy'), ('425\" }\n      let!(:output){ run_ltk_with_input(\"2\", input) }\n      it \"should create the injury without evaluating the SQL\" do\n        Injury.last.name.should == input\n      end\n      it \"shouldn't create an extra injury\" do\n        Injury.count.should == 2\n      end\n      it \"should print a success message at the end\" do\n        output.should include(\"#{input} has been added\")\n      end\n    end\n    context \"without alphabet characters\" do\n      let(:output){ run_ltk_with_input(\"2\", \"4*25\") }\n      it \"should not save the injury\" do\n        Injury.count.should == 1\n      end\n      it \"should print an error message\" do\n        output.should include(\"'4*25' is not a valid injury name, as it does not include any letters'\")\n      end\n      it \"should let them try again\" do\n        menu_text = \"What is the injury you want to add?\"\n        output.should include_in_order(menu_text, \"not a valid\", menu_text)\n      end\n    end\n  end\nend\n"], "fixing_code": ["require \"sqlite3\"\n\nclass Database < SQLite3::Database\n  def initialize(database)\n    super(database)\n    self.results_as_hash = true\n  end\n  def self.connection(environment)\n    @connection ||= Database.new(\"db/license_to_kill_#{environment}.sqlite3\")\n  end\n\n  def create_tables\n    self.execute(\"CREATE TABLE injuries (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(50))\")\n  end\n\n  def execute(statement, bind_vars = [])\n    Environment.logger.info(\"Executing: \" + statement)\n    super(statement, bind_vars)\n  end\nend\n", "class Injury\n  attr_reader :errors\n  attr_reader :name\n\n  def initialize(name)\n    @name = name\n    @errors = []\n  end\n\n  def self.all\n    statement = \"Select * from injuries;\"\n    execute_and_instantiate(statement)\n  end\n\n  def self.count\n    statement = \"Select count(*) from injuries;\"\n    result = Environment.database_connection.execute(statement)\n    result[0][0]\n  end\n\n  def self.find_by_name(name)\n    statement = \"Select * from injuries where name = ?;\"\n    execute_and_instantiate(statement, name)[0]\n  end\n\n  def self.last\n    statement = \"Select * from injuries order by id DESC limit(1);\"\n    execute_and_instantiate(statement)[0]\n  end\n\n  def save\n    if Injury.find_by_name(self.name)\n      @errors << \"#{self.name} already exists.\"\n      false\n    else\n      statement = \"Insert into injuries (name) values (?);\"\n      Environment.database_connection.execute(statement, name)\n      true\n    end\n  end\n\n  private\n\n  def self.execute_and_instantiate(statement, bind_vars = [])\n    rows = Environment.database_connection.execute(statement, bind_vars)\n    results = []\n    rows.each do |row|\n      results << Injury.new(row[\"name\"])\n    end\n    results\n  end\nend\n", "require_relative 'spec_helper'\n\ndescribe \"Adding an injury\" do\n  before do\n    injury = Injury.new(\"Decapitation\")\n    injury.save\n  end\n  context \"adding a unique injury\" do\n    let!(:output){ run_ltk_with_input(\"2\", \"Disembowelment\") }\n    it \"should print a confirmation message\" do\n      output.should include(\"Disembowelment has been added.\")\n      Injury.count.should == 2\n    end\n    it \"should insert a new injury\" do\n      Injury.count.should == 2\n    end\n    it \"should use the name we entered\" do\n      Injury.last.name.should == \"Disembowelment\"\n    end\n  end\n  context \"adding a duplicate injury\" do\n    let(:output){ run_ltk_with_input(\"2\", \"Decapitation\") }\n    it \"should print an error message\" do\n      output.should include(\"Decapitation already exists.\")\n    end\n    it \"should ask them to try again\" do\n      menu_text = \"What is the injury you want to add?\"\n      output.should include_in_order(menu_text, \"already exists\", menu_text)\n    end\n    it \"shouldn't save the duplicate\" do\n      Injury.count.should == 1\n    end\n    context \"and trying again\" do\n      let!(:output){ run_ltk_with_input(\"2\", \"Decapitation\", \"Leprosy\") }\n      it \"should save a unique item\" do\n        Injury.last.name.should == \"Leprosy\"\n      end\n      it \"should print a success message at the end\" do\n        output.should include(\"Leprosy has been added\")\n      end\n    end\n  end\n  context \"entering an invalid looking injury name\" do\n    context \"with SQL injection\" do\n      let(:input){ \"phalangectomy'), ('425\" }\n      let!(:output){ run_ltk_with_input(\"2\", input) }\n      it \"should create the injury without evaluating the SQL\" do\n        Injury.last.name.should == input\n      end\n      it \"shouldn't create an extra injury\" do\n        Injury.count.should == 2\n      end\n      it \"should print a success message at the end\" do\n        output.should include(\"#{input} has been added\")\n      end\n    end\n    context \"without alphabet characters\" do\n      let(:output){ run_ltk_with_input(\"2\", \"4*25\") }\n      it \"should not save the injury\" do\n        pending\n        Injury.count.should == 1\n      end\n      it \"should print an error message\" do\n        pending\n        output.should include(\"'4*25' is not a valid injury name, as it does not include any letters'\")\n      end\n      it \"should let them try again\" do\n        pending\n        menu_text = \"What is the injury you want to add?\"\n        output.should include_in_order(menu_text, \"not a valid\", menu_text)\n      end\n    end\n  end\nend\n"], "filenames": ["lib/database.rb", "models/injury.rb", "spec/injury_integration_spec.rb"], "buggy_code_start_loc": [16, 22, 59], "buggy_code_end_loc": [19, 46, 65], "fixing_code_start_loc": [16, 22, 60], "fixing_code_end_loc": [19, 46, 69], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, was found in License to Kill. This affects an unknown part of the file models/injury.rb. The manipulation of the argument name leads to sql injection. The name of the patch is cd11cf174f361c98e9b1b4c281aa7b77f46b5078. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217191.", "other": {"cve": {"id": "CVE-2014-125037", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-02T18:15:18.787", "lastModified": "2023-01-09T19:01:31.350", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, was found in License to Kill. This affects an unknown part of the file models/injury.rb. The manipulation of the argument name leads to sql injection. The name of the patch is cd11cf174f361c98e9b1b4c281aa7b77f46b5078. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217191."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:license_to_kill_project:license_to_kill:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-05-01", "matchCriteriaId": "A65E5EF1-107E-4C33-B995-3A0D70360853"}]}]}], "references": [{"url": "https://github.com/elizabrock/license-to-kill/commit/cd11cf174f361c98e9b1b4c281aa7b77f46b5078", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217191", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217191", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/elizabrock/license-to-kill/commit/cd11cf174f361c98e9b1b4c281aa7b77f46b5078"}}