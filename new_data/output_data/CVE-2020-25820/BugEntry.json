{"buggy_code": ["/**\r\n * BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\r\n * \r\n * Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the\r\n * terms of the GNU Lesser General Public License as published by the Free Software\r\n * Foundation; either version 3.0 of the License, or (at your option) any later\r\n * version.\r\n * \r\n * BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\r\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\n * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License along\r\n * with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\r\n *\r\n */\r\n\r\npackage org.bigbluebutton.presentation.imp;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.bigbluebutton.presentation.ConversionMessageConstants;\r\nimport org.bigbluebutton.presentation.SupportedFileTypes;\r\nimport org.bigbluebutton.presentation.UploadedPresentation;\r\nimport org.jodconverter.core.office.OfficeException;\r\nimport org.jodconverter.core.office.OfficeManager;\r\nimport org.jodconverter.local.LocalConverter;\r\nimport org.jodconverter.local.office.LocalOfficeManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.google.gson.Gson;\r\n\r\npublic class OfficeToPdfConversionService {\r\n  private static Logger log = LoggerFactory.getLogger(OfficeToPdfConversionService.class);\r\n\r\n  private OfficeDocumentValidator2 officeDocumentValidator;\r\n  private final OfficeManager officeManager;\r\n  private final LocalConverter documentConverter;\r\n  private boolean skipOfficePrecheck = false;\r\n\r\n  public OfficeToPdfConversionService() throws OfficeException {\r\n    officeManager = LocalOfficeManager\r\n      .builder()\r\n      .portNumbers(8100, 8101, 8102, 8103, 8104)\r\n      .build();\r\n    documentConverter = LocalConverter\r\n      .builder()\r\n      .officeManager(officeManager)\r\n      .filterChain(new OfficeDocumentConversionFilter())\r\n      .build();\r\n  }\r\n\r\n  /*\r\n   * Convert the Office document to PDF. If successful, update\r\n   * UploadPresentation.uploadedFile with the new PDF out and\r\n   * UploadPresentation.lastStepSuccessful to TRUE.\r\n   */\r\n  public UploadedPresentation convertOfficeToPdf(UploadedPresentation pres) {\r\n    initialize(pres);\r\n    if (SupportedFileTypes.isOfficeFile(pres.getFileType())) {\r\n      // Check if we need to precheck office document\r\n      if (!skipOfficePrecheck && officeDocumentValidator.isValid(pres)) {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"problems_office_to_pdf_validation\");\r\n        logData.put(\"message\", \"Problems detected prior to converting the file to PDF.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.warn(\" --analytics-- data={}\", logStr);\r\n\r\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_INVALID_KEY);\r\n        return pres;\r\n      }\r\n      File pdfOutput = setupOutputPdfFile(pres);\r\n      if (convertOfficeDocToPdf(pres, pdfOutput)) {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"office_to_pdf_success\");\r\n        logData.put(\"message\", \"Successfully converted office file to pdf.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.info(\" --analytics-- data={}\", logStr);\r\n\r\n        makePdfTheUploadedFileAndSetStepAsSuccess(pres, pdfOutput);\r\n      } else {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"office_to_pdf_failed\");\r\n        logData.put(\"message\", \"Failed to convert \" + pres.getUploadedFile().getAbsolutePath() + \" to Pdf.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.warn(\" --analytics-- data={}\", logStr);\r\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\r\n        return pres;\r\n      }\r\n    }\r\n    return pres;\r\n  }\r\n\r\n  public void initialize(UploadedPresentation pres) {\r\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\r\n  }\r\n\r\n  private File setupOutputPdfFile(UploadedPresentation pres) {\r\n    File presentationFile = pres.getUploadedFile();\r\n    String filenameWithoutExt = presentationFile.getAbsolutePath().substring(0,\r\n        presentationFile.getAbsolutePath().lastIndexOf('.'));\r\n    return new File(filenameWithoutExt + \".pdf\");\r\n  }\r\n\r\n  private boolean convertOfficeDocToPdf(UploadedPresentation pres,\r\n      File pdfOutput) {\r\n    Office2PdfPageConverter converter = new Office2PdfPageConverter();\r\n    return converter.convert(pres.getUploadedFile(), pdfOutput, 0, pres, documentConverter);\r\n  }\r\n\r\n  private void makePdfTheUploadedFileAndSetStepAsSuccess(UploadedPresentation pres, File pdf) {\r\n    pres.setUploadedFile(pdf);\r\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_SUCCESS_KEY);\r\n  }\r\n\r\n  public void setOfficeDocumentValidator(OfficeDocumentValidator2 v) {\r\n    officeDocumentValidator = v;\r\n  }\r\n\r\n  public void setSkipOfficePrecheck(boolean skipOfficePrecheck) {\r\n    this.skipOfficePrecheck = skipOfficePrecheck;\r\n  }\r\n\r\n  public void start() {\r\n    try {\r\n      officeManager.start();\r\n    } catch (OfficeException e) {\r\n      log.error(\"Could not start Office Manager\", e);\r\n    }\r\n  }\r\n\r\n  public void stop() {\r\n    try {\r\n      officeManager.stop();\r\n    } catch (OfficeException e) {\r\n      log.error(\"Could not stop Office Manager\", e);\r\n    }\r\n\r\n  }\r\n}\r\n"], "fixing_code": ["/**\r\n * BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\r\n * \r\n * Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the\r\n * terms of the GNU Lesser General Public License as published by the Free Software\r\n * Foundation; either version 3.0 of the License, or (at your option) any later\r\n * version.\r\n * \r\n * BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\r\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\n * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License along\r\n * with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\r\n *\r\n */\r\npackage org.bigbluebutton.presentation.imp;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport org.bigbluebutton.presentation.ConversionMessageConstants;\r\nimport org.bigbluebutton.presentation.SupportedFileTypes;\r\nimport org.bigbluebutton.presentation.UploadedPresentation;\r\nimport org.jodconverter.core.office.OfficeException;\r\nimport org.jodconverter.core.office.OfficeManager;\r\nimport org.jodconverter.local.LocalConverter;\r\nimport org.jodconverter.local.office.LocalOfficeManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport com.sun.star.document.UpdateDocMode;\r\nimport com.google.gson.Gson;\r\npublic class OfficeToPdfConversionService {\r\n  private static Logger log = LoggerFactory.getLogger(OfficeToPdfConversionService.class);\r\n  private OfficeDocumentValidator2 officeDocumentValidator;\r\n  private final OfficeManager officeManager;\r\n  private final LocalConverter documentConverter;\r\n  private boolean skipOfficePrecheck = false;\r\n  public OfficeToPdfConversionService() throws OfficeException {\r\n    final Map<String, Object> loadProperties = new HashMap<>();\r\n    loadProperties.put(\"Hidden\", true);\r\n    loadProperties.put(\"ReadOnly\", true);\r\n    loadProperties.put(\"UpdateDocMode\", UpdateDocMode.NO_UPDATE);\r\n    officeManager = LocalOfficeManager\r\n      .builder()\r\n      .portNumbers(8100, 8101, 8102, 8103, 8104)\r\n      .build();\r\n    documentConverter = LocalConverter\r\n      .builder()\r\n      .officeManager(officeManager)\r\n      .loadProperties(loadProperties)\r\n      .filterChain(new OfficeDocumentConversionFilter())\r\n      .build();\r\n  }\r\n  /*\r\n   * Convert the Office document to PDF. If successful, update\r\n   * UploadPresentation.uploadedFile with the new PDF out and\r\n   * UploadPresentation.lastStepSuccessful to TRUE.\r\n   */\r\n  public UploadedPresentation convertOfficeToPdf(UploadedPresentation pres) {\r\n    initialize(pres);\r\n    if (SupportedFileTypes.isOfficeFile(pres.getFileType())) {\r\n      // Check if we need to precheck office document\r\n      if (!skipOfficePrecheck && officeDocumentValidator.isValid(pres)) {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"problems_office_to_pdf_validation\");\r\n        logData.put(\"message\", \"Problems detected prior to converting the file to PDF.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.warn(\" --analytics-- data={}\", logStr);\r\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_INVALID_KEY);\r\n        return pres;\r\n      }\r\n      File pdfOutput = setupOutputPdfFile(pres);\r\n      if (convertOfficeDocToPdf(pres, pdfOutput)) {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"office_to_pdf_success\");\r\n        logData.put(\"message\", \"Successfully converted office file to pdf.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.info(\" --analytics-- data={}\", logStr);\r\n        makePdfTheUploadedFileAndSetStepAsSuccess(pres, pdfOutput);\r\n      } else {\r\n        Map<String, Object> logData = new HashMap<>();\r\n        logData.put(\"meetingId\", pres.getMeetingId());\r\n        logData.put(\"presId\", pres.getId());\r\n        logData.put(\"filename\", pres.getName());\r\n        logData.put(\"logCode\", \"office_to_pdf_failed\");\r\n        logData.put(\"message\", \"Failed to convert \" + pres.getUploadedFile().getAbsolutePath() + \" to Pdf.\");\r\n        Gson gson = new Gson();\r\n        String logStr = gson.toJson(logData);\r\n        log.warn(\" --analytics-- data={}\", logStr);\r\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\r\n        return pres;\r\n      }\r\n    }\r\n    return pres;\r\n  }\r\n  public void initialize(UploadedPresentation pres) {\r\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\r\n  }\r\n  private File setupOutputPdfFile(UploadedPresentation pres) {\r\n    File presentationFile = pres.getUploadedFile();\r\n    String filenameWithoutExt = presentationFile.getAbsolutePath().substring(0,\r\n        presentationFile.getAbsolutePath().lastIndexOf('.'));\r\n    return new File(filenameWithoutExt + \".pdf\");\r\n  }\r\n  private boolean convertOfficeDocToPdf(UploadedPresentation pres,\r\n      File pdfOutput) {\r\n    Office2PdfPageConverter converter = new Office2PdfPageConverter();\r\n    return converter.convert(pres.getUploadedFile(), pdfOutput, 0, pres, documentConverter);\r\n  }\r\n  private void makePdfTheUploadedFileAndSetStepAsSuccess(UploadedPresentation pres, File pdf) {\r\n    pres.setUploadedFile(pdf);\r\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_SUCCESS_KEY);\r\n  }\r\n  public void setOfficeDocumentValidator(OfficeDocumentValidator2 v) {\r\n    officeDocumentValidator = v;\r\n  }\r\n  public void setSkipOfficePrecheck(boolean skipOfficePrecheck) {\r\n    this.skipOfficePrecheck = skipOfficePrecheck;\r\n  }\r\n  public void start() {\r\n    try {\r\n      officeManager.start();\r\n    } catch (OfficeException e) {\r\n      log.error(\"Could not start Office Manager\", e);\r\n    }\r\n  }\r\n  public void stop() {\r\n    try {\r\n      officeManager.stop();\r\n    } catch (OfficeException e) {\r\n      log.error(\"Could not stop Office Manager\", e);\r\n    }\r\n  }\r\n}\r\n"], "filenames": ["bbb-common-web/src/main/java/org/bigbluebutton/presentation/imp/OfficeToPdfConversionService.java"], "buggy_code_start_loc": [19], "buggy_code_end_loc": [156], "fixing_code_start_loc": [18], "fixing_code_end_loc": [142], "type": "CWE-918", "message": "BigBlueButton before 2.2.7 allows remote authenticated users to read local files and conduct SSRF attacks via an uploaded Office document that has a crafted URL in an ODF xlink field.", "other": {"cve": {"id": "CVE-2020-25820", "sourceIdentifier": "cve@mitre.org", "published": "2020-10-21T13:15:12.960", "lastModified": "2020-10-29T16:22:27.727", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "BigBlueButton before 2.2.7 allows remote authenticated users to read local files and conduct SSRF attacks via an uploaded Office document that has a crafted URL in an ODF xlink field."}, {"lang": "es", "value": "BigBlueButton versiones anteriores a 2.2.7, permite a usuarios autenticados remoto leer archivos locales y llevar a cabo ataques SSRF por medio de un documento Office cargado que tiene una URL dise\u00f1ada en un campo xlink ODF"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigbluebutton:bigbluebutton:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.27", "matchCriteriaId": "C3387D13-B022-40CE-8B0F-74CFD8DAD88E"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/159667/BigBlueButton-2.2.25-File-Disclosure-Server-Side-Request-Forgery.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/commit/71fe1eac1e5bd73a2cd44bd79c001086b250e435", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/bigbluebutton/bigbluebutton/compare/v2.2.26...v2.2.27", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.golem.de/news/big-blue-button-das-grosse-blaue-sicherheitsrisiko-2010-151610.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.redteam-pentesting.de/advisories/rt-sa-2020-005", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bigbluebutton/bigbluebutton/commit/71fe1eac1e5bd73a2cd44bd79c001086b250e435"}}