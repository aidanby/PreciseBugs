{"buggy_code": ["<?php\n\nclass IndexController extends Zend_Controller_Action\n{\n\n    protected $_config = null;\n\n    public function init()\n    {\n        $this->_config = $this->getInvokeArg('bootstrap')\n            ->getOptions();\n    }\n\n    public function indexAction()\n    {\n        $page = $this->_getParam('page');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getAllPosts();\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $sysParams = new Application_Model_SysParameters();\n        $this->view->metaDescription = $sysParams->getOption('meta_description');\n\n        if ($page > 1) {\n            $this->view->browsertitle = '\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= ' \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n    }\n\n    public function categoryAction()\n    {\n        $page = $this->_getParam('page');\n        $url  = $this->_getParam('url');\n\n        $this->view->headMeta()->appendName('robots', 'noindex, follow');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getPostsByCategory($url);\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $category = new Application_Model_Category();\n        $currentCategory = $category->getCategoryByUrl($url);\n\n        $this->view->browsertitle    = '\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \"' . $currentCategory->name . '\"';\n        $this->view->metaDescription = '\u0417\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"' . $currentCategory->name . '\"';\n\n        if ($page > 1) {\n            $this->view->browsertitle .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n\n        $this->render('index');\n    }\n\n    public function tagAction()\n    {\n        $page = $this->_getParam('page');\n        $url  = $this->_getParam('url');\n\n        $this->view->headMeta()->appendName('robots', 'noindex, follow');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getPostsByTag($url);\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $tags = new Application_Model_Tags();\n        $currentTag = $tags->getTagByUrl($url);\n\n        $this->view->browsertitle    = '\u0422\u0435\u0433 \"' . $currentTag->name . '\"';\n        $this->view->metaDescription = '\u0417\u0430\u043f\u0438\u0441\u0438 \u043f\u043e \u0442\u0435\u0433\u0443 \"' . $currentTag->name . '\"';\n\n        if ($page > 1) {\n            $this->view->browsertitle .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n\n        $this->render('index');\n    }\n\n    public function topicAction()\n    {\n        $id   = $this->_getParam('id');\n        $url  = $this->_getParam('url');\n        $hash = $this->_getParam('hash');\n\n        $postsTable = new Application_Model_Posts();\n\n        if (isset($hash)) {\n            $path = str_replace('qwerty', '', $this->view->url(array('url' => 'qwerty'), 'topic_url'));\n            setcookie('commentator_hash', $hash, time() + 31104000, $path);\n        }\n\n        if (isset($id)) {\n            $post = $postsTable->getPostById($id);\n            if ($post) {\n                $postUrl = $this->view->url(array('url' => $post->url), 'topic_url', true);\n                $this->redirect($postUrl, array('code' => 301));\n            } else {\n                $this->_redirect404();\n            }\n        }\n\n        $post = null;\n        if (isset($url)) {\n            $post = $postsTable->getPostByUrl($url);\n            if (!$post) {\n                $this->_redirect404();\n            } else {\n                if (preg_match('/\\/$/', $this->_request->getRequestUri())) {\n                    $postUrl = $this->view->url(array('url' => $url), 'topic_url', true);\n                    $this->redirect($postUrl, array('code' => 301));\n                }\n            }\n        }\n\n        $commentsTable = new Application_Model_Comments();\n        $this->view->commentsCacheKey = $commentsTable->getPostCommentKey(\n            $post->id,\n            Zend_Auth::getInstance()->hasIdentity()\n        );\n\n        $this->view->post = $post;\n\n        if ($post->description) {\n            $this->view->metaDescription = $post->description;\n        }\n\n        $this->view->browsertitle = $post->title;\n\n        $form = new Application_Form_Comment();\n        $form->topicId->setValue($post->id);\n\n        $this->view->form = $form;\n\n        $tracking = new Application_Model_Tracking();\n        $tracking->checkTrackingEvent($post->id, $this->_request->getClientIp());\n    }\n\n    public function feedAction()\n    {\n        $feedType = $this->_getParam('feed');\n\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $nameCacheFeed = 'feed_' . $feedType;\n        $cache = Zend_Registry::get('cache');\n\n        $feedArray = $cache->load($nameCacheFeed);\n        if (!$feedArray) {\n            $topics = new Application_Model_Posts();\n            $feedArray = $topics->getFeedData($feedType);\n            $cache->save($feedArray, $nameCacheFeed);\n        }\n\n        $tracking = new Application_Model_Tracking();\n        $tracking->checkTrackingEvent(null, $this->_request->getClientIp());\n\n        $feed = Zend_Feed::importArray($feedArray, $feedType);\n        $feed->send();\n    }\n\n    public function sitemapAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        if ($this->isCDN()) {\n            $sitemap = <<<RAW\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n</urlset>\nRAW;\n        } else {\n            $sitemap = Application_Model_Sitemap::generateSitemap();\n        }\n\n        $this->getResponse()->setHeader('Content-Type', 'application/xml');\n        $this->getResponse()->setHeader('Cache-Control', 'public, max-age=7200');\n        $this->getResponse()->appendBody($sitemap);\n    }\n\n    public function addcommentAction()\n    {\n        $this->redirect('/');\n    }\n\n    public function ajaxaddcommentAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $topicId = (int) $this->_getParam('topicId');\n\n        $topicTable = new Application_Model_Posts();\n\n        $topic = $topicTable->getPostById($topicId);\n        if ($topic) {\n            $url = $topic->url;\n        } else {\n            $url = false;\n        }\n\n        $result = array('valid' => false);\n\n        if ($this->getRequest()->isPost() && $url) {\n            $form = new Application_Form_Comment();\n\n            if ($form->isValid($this->getRequest()->getPost())) {\n                $formData = $form->getValues();\n\n                $this->saveComment($topicId, $url, $formData);\n                $result['valid'] = true;\n            } else {\n                $formView = new Zend_View;\n                $formView->setScriptPath(APPLICATION_PATH . \"/views/scripts/index\");\n                $formView->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n                $formView->form = $form;\n\n                $result['form_html'] = $formView->render('formcomment.phtml');\n            }\n        }\n\n        $this->_helper->json($result);\n    }\n\n    public function robotsAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $robots = <<<RAW\nUser-agent: *\n\nHost: morontt.info\nSitemap: https://morontt.info/sitemap.xml\nRAW;\n        if ($this->isCDN()) {\n            $robots = <<<RAW\nUser-agent: *\n\nDisallow: /\nRAW;\n        }\n\n        $this->getResponse()->setHeader('Content-Type', 'text/plain');\n        $this->getResponse()->setHeader('Cache-Control', 'public, max-age=2592000');\n        $this->getResponse()->appendBody($robots);\n    }\n\n    protected function _redirect404()\n    {\n        throw new Zend_Controller_Action_Exception('Page not found', 404);\n    }\n\n    protected function saveComment($topicId, $url, $formData)\n    {\n        $topic         = new Application_Model_Posts();\n        $commentators  = new Application_Model_Commentators();\n        $commentsTable = new Application_Model_Comments();\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $commentatorId = $commentators->getCommentatorId($formData['name'], $formData['mail'], $formData['website']);\n            if ($formData['cookie']) {\n                $hash = md5(Application_Model_Commentators::HASH_SALT . $commentatorId);\n                $path = str_replace('qwerty', '', $this->view->url(array('url' => 'qwerty'), 'topic_url'));\n                setcookie('commentator_hash', $hash, time() + 31104000, $path);\n            }\n        } else {\n            $commentatorId = 0;\n        }\n        $commentId = $commentsTable->saveComment($formData, $commentatorId, $this->_request->getClientIp());\n        $topic->updateCommentsCount($topicId);\n\n        $this->sendCommentMails($url, $formData);\n        $this->sendTelegramMessage($url, $commentId, $formData);\n\n        $cacheOutput = Zend_Registry::get('cacheOutput');\n        $cacheOutput->remove('commentators_stats');\n    }\n\n    protected function sendCommentMails($url, $formData)\n    {\n        $mailer = new Application_Model_Mailswift();\n\n        $notice = true;\n\n        $options = Zend_Registry::get('options');\n\n        if (Zend_Auth::getInstance()->hasIdentity()) {\n            if (Zend_Auth::getInstance()->getIdentity()->id == '1') {\n                $notice = false;\n            }\n        }\n\n        if ($notice) {\n            $mailView = new Zend_View;\n            $mailView->setScriptPath(APPLICATION_PATH . \"/views/mails\");\n            $mailView->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n            $mailView->topicUrl    = $url;\n            $mailView->formData    = $formData;\n            $mailView->headerTitle = $options['blog']['title'];\n\n            $mailBody = $mailView->render('commenttopic.phtml');\n\n            $mailer->sendEmailToSpool($options['sys_parameters']['mail'], $options['sys_parameters']['mailto'],\n                '\u041d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBody\n            );\n            $mailer->sendEmailToSpool($options['sys_parameters']['copymail'], $options['sys_parameters']['mailto'],\n                '\u041d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBody\n            );\n        }\n\n        if ($formData['parentId']) {\n\n            $commentsTable = new Application_Model_Comments();\n            $commentInfo = $commentsTable->getCommentInfo($formData['parentId']);\n\n            if ($commentInfo) {\n                $mailTwo = new Zend_View;\n                $mailTwo->setScriptPath(APPLICATION_PATH . \"/views/mails\");\n                $mailTwo->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n                $mailTwo->topicUrl    = $url;\n                $mailTwo->formData    = $formData;\n                $mailTwo->topicTitle  = $commentInfo['title'];\n                $mailTwo->hash        = $commentInfo['hash'];\n                $mailTwo->headerTitle = $options['blog']['title'];\n\n                $mailBodyTwo = $mailTwo->render('responsecomment.phtml');\n\n                $mailer->sendEmailToSpool($commentInfo['mail'], $commentInfo['name'], '\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBodyTwo);\n            }\n        }\n    }\n\n    /**\n     * @param string $slug\n     * @param int $commentId\n     * @param array $formData\n     *\n     * @throws Zend_Exception\n     */\n    protected function sendTelegramMessage(string $slug, int $commentId, array $formData)\n    {\n        $url = BASE_URL . $this->view->url(array('url' => $slug), 'topic_url');\n\n        $text = \"\u041a\u0442\u043e-\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u043b [\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439]({$url})\\n\\n*ID*: {$commentId}\\n\";\n        if (!empty($formData['name'])) {\n            $text .= \"*Name*: {$formData['name']}\\n\";\n        }\n        if (!empty($formData['mail'])) {\n            $text .= \"*Email*: {$formData['mail']}\\n\";\n        }\n        if (!empty($formData['website'])) {\n            $text .= \"*Website*: {$formData['website']}\\n\";\n        }\n\n        $text .= \"\\n\" . strip_tags($formData['comment_text']);\n\n        $options = Zend_Registry::get('options');\n        $message = [\n            'chat_id' => $options['telegram']['admin_id'],\n            'text' => $text,\n            'parse_mode' => 'Markdown',\n        ];\n\n        exec(sprintf(\n            'nohup php %s \\'%s\\' > /dev/null 2>&1 &',\n            realpath(__DIR__ . '/../../bin/telegramMessage.php'),\n            json_encode($message)\n        ));\n\n        exec(sprintf(\n            'nohup php %s > /dev/null 2>&1 &',\n            realpath(__DIR__ . '/../../bin/commentGeoLocation.php')\n        ));\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isCDN()\n    {\n        return !empty($_SERVER['HTTP_VIA'])\n            && (stripos($_SERVER['HTTP_VIA'], 'BunnyCDN') !== false\n                || strpos($_SERVER['HTTP_VIA'], 'cdn77') !== false);\n    }\n}\n", "<?php\n\nclass Application_Form_Comment extends Zend_Form\n{\n\n    public $elementDecorators = array(\n        'ViewHelper',\n        'Errors',\n        array(array('data' => 'HtmlTag'), array('tag' => 'div', 'class' => 'element')),\n        array('label', array()),\n        array(array('row' => 'HtmlTag'), array('tag' => 'div', 'class' => 'row')),\n    );\n\n    public function init()\n    {\n        $this->setAction('/index/addcomment');\n        $this->setMethod('post');\n\n        $this->setAttrib('id', 'comment_form');\n\n        $name = new Zend_Form_Element_Text('name');\n        $name->setLabel('\u0418\u043c\u044f:')\n            ->setRequired(true)\n            ->setAttribs(array(\n                'placeholder' => 'nickname',\n                'required'    => 'required',\n            ))\n            ->addFilters(array('StripTags', 'StringTrim'))\n            ->addValidator('NotEmpty');\n\n        $email = new Zend_Form_Element_Text('mail');\n        $email->helper = 'formEmail';\n        $email->setLabel('E-mail:')\n            ->setAttribs(array(\n                'placeholder' => 'mail@example.org',\n            ))\n            ->addFilters(array('StripTags', 'StringTrim'))\n            ->addValidator('EmailAddress');\n\n        $website = new Zend_Form_Element_Text('website');\n        $website->helper = 'formUrl';\n        $website->setLabel('Website:')\n                ->setRequired(false)\n                ->setAttrib('placeholder', 'http://example.org')\n                ->addFilters(array('StripTags', 'StringTrim'))\n                ->addValidator(new Application_Form_Validate_Uri());\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $this->addElement($name);\n            $this->addElement($email);\n            $this->addElement($website);\n        }\n\n        $textarea = new Zend_Form_Element_Textarea('comment_text');\n        $textarea->setLabel('\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:')\n                ->setRequired(true)\n                ->setAttribs(array(\n                    'cols'     => 66,\n                    'rows'     => 10,\n                    'required' => 'required',\n                ))\n                ->addFilter('StringTrim');\n        $tagFilter = new Zend_Filter_StripTags(array(\n            'allowTags'    => array('a', 's', 'b', 'i', 'em', 'strong', 'img'),\n            'allowAttribs' => array('src', 'href', 'class', 'id'),\n        ));\n        $textarea->addFilter($tagFilter);\n        $this->addElement($textarea);\n\n        $topicId = new Zend_Form_Element_Hidden('topicId');\n        $topicId->addValidator('Int');\n        $this->addElement($topicId);\n\n        $parentId = new Zend_Form_Element_Hidden('parentId');\n        $parentId->setValue(0);\n        $parentId->addValidator('Int');\n        $this->addElement($parentId);\n\n        $cookie = new Zend_Form_Element_Hidden('cookie');\n        $cookie->setValue(1);\n        $cookie->addValidator('Int');\n        $this->addElement($cookie);\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $this->checkCookie();\n        }\n\n        $this->setElementDecorators($this->elementDecorators);\n    }\n\n    protected function checkCookie()\n    {\n        $hash = false;\n\n        if (isset($_COOKIE['commentator_hash'])) {\n            $hash = $_COOKIE['commentator_hash'];\n        }\n\n        if ($hash) {\n            $commentatorsTable = new Application_Model_Commentators();\n\n            $commentator = $commentatorsTable->getByHash($hash);\n            if ($commentator) {\n                $this->name->setValue($commentator->name);\n                if ($commentator->mail) {\n                    $this->mail->setValue($commentator->mail);\n                }\n                if ($commentator->website) {\n                    $this->website->setValue($commentator->website);\n                }\n            }\n        }\n    }\n}\n\n", "<form id=\"comment_form\" class=\"ym-form ym-columnar\" method=\"POST\" action=\"<?php echo $this->url(array(), 'add_comment', true); ?>\">\n    <?php if (!Zend_Auth::getInstance()->hasIdentity()) { ?>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->name; ?>\n    </div>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->mail; ?>\n    </div>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->website; ?>\n    </div>\n    <?php } ?>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->comment_text; ?>\n    </div>\n    <div style=\"display: none;\">\n        <?php echo $this->form->topicId; ?>\n        <?php echo $this->form->parentId; ?>\n        <?php echo $this->form->cookie; ?>\n    </div>\n    <div class=\"ym-fbox-button\">\n        <button type=\"submit\" class=\"ym-button ym-add\" id=\"submit\" name=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439</button>\n    </div>\n</form>\n<?php\n    $options = Zend_Registry::get('options');\n?>\n<div class=\"form_note\">\n    \u041f\u043e\u043b\u044f, \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 <img src=\"<?php echo $options['cdn_host']; ?>/img/req_asterisk.png\" alt=\"asterisk\" />, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.<br />\n    \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043d\u0438\u0433\u0434\u0435 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.<br/>\n    \u0412\u0435\u0431-\u0441\u0430\u0439\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://example.org, \u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438, \u043a\u043e\u043d\u0435\u0447\u043d\u043e.\n</div>\n<div class=\"ajax-loader\"></div>\n"], "fixing_code": ["<?php\n\nclass IndexController extends Zend_Controller_Action\n{\n\n    protected $_config = null;\n\n    public function init()\n    {\n        $this->_config = $this->getInvokeArg('bootstrap')\n            ->getOptions();\n    }\n\n    public function indexAction()\n    {\n        $page = $this->_getParam('page');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getAllPosts();\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $sysParams = new Application_Model_SysParameters();\n        $this->view->metaDescription = $sysParams->getOption('meta_description');\n\n        if ($page > 1) {\n            $this->view->browsertitle = '\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= ' \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n    }\n\n    public function categoryAction()\n    {\n        $page = $this->_getParam('page');\n        $url  = $this->_getParam('url');\n\n        $this->view->headMeta()->appendName('robots', 'noindex, follow');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getPostsByCategory($url);\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $category = new Application_Model_Category();\n        $currentCategory = $category->getCategoryByUrl($url);\n\n        $this->view->browsertitle    = '\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \"' . $currentCategory->name . '\"';\n        $this->view->metaDescription = '\u0417\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"' . $currentCategory->name . '\"';\n\n        if ($page > 1) {\n            $this->view->browsertitle .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n\n        $this->render('index');\n    }\n\n    public function tagAction()\n    {\n        $page = $this->_getParam('page');\n        $url  = $this->_getParam('url');\n\n        $this->view->headMeta()->appendName('robots', 'noindex, follow');\n\n        $postsTable = new Application_Model_Posts();\n\n        $paginator = $postsTable->getPostsByTag($url);\n        $paginator->setItemCountPerPage($this->_config['paginator']['topic']);\n        $paginator->SetCurrentPageNumber($page);\n\n        if (count($paginator) < $page || $page < 1) {\n            $this->_redirect404();\n        }\n\n        $tags = new Application_Model_Tags();\n        $currentTag = $tags->getTagByUrl($url);\n\n        $this->view->browsertitle    = '\u0422\u0435\u0433 \"' . $currentTag->name . '\"';\n        $this->view->metaDescription = '\u0417\u0430\u043f\u0438\u0441\u0438 \u043f\u043e \u0442\u0435\u0433\u0443 \"' . $currentTag->name . '\"';\n\n        if ($page > 1) {\n            $this->view->browsertitle .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n            $this->view->metaDescription .= '. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ' . $page;\n        }\n\n        $this->view->posts = $paginator;\n\n        $this->render('index');\n    }\n\n    public function topicAction()\n    {\n        $id   = $this->_getParam('id');\n        $url  = $this->_getParam('url');\n        $hash = $this->_getParam('hash');\n\n        $postsTable = new Application_Model_Posts();\n\n        if (isset($hash)) {\n            $path = str_replace('qwerty', '', $this->view->url(array('url' => 'qwerty'), 'topic_url'));\n            setcookie('commentator_hash', $hash, time() + 31104000, $path);\n        }\n\n        if (isset($id)) {\n            $post = $postsTable->getPostById($id);\n            if ($post) {\n                $postUrl = $this->view->url(array('url' => $post->url), 'topic_url', true);\n                $this->redirect($postUrl, array('code' => 301));\n            } else {\n                $this->_redirect404();\n            }\n        }\n\n        $post = null;\n        if (isset($url)) {\n            $post = $postsTable->getPostByUrl($url);\n            if (!$post) {\n                $this->_redirect404();\n            } else {\n                if (preg_match('/\\/$/', $this->_request->getRequestUri())) {\n                    $postUrl = $this->view->url(array('url' => $url), 'topic_url', true);\n                    $this->redirect($postUrl, array('code' => 301));\n                }\n            }\n        }\n\n        $commentsTable = new Application_Model_Comments();\n        $this->view->commentsCacheKey = $commentsTable->getPostCommentKey(\n            $post->id,\n            Zend_Auth::getInstance()->hasIdentity()\n        );\n\n        $this->view->post = $post;\n\n        if ($post->description) {\n            $this->view->metaDescription = $post->description;\n        }\n\n        $this->view->browsertitle = $post->title;\n\n        $form = new Application_Form_Comment();\n        $form->topicId->setValue($post->id);\n        $form->getElement('csrfToken')->setValue($this->generateCommentToken());\n\n        $this->view->form = $form;\n\n        $tracking = new Application_Model_Tracking();\n        $tracking->checkTrackingEvent($post->id, $this->_request->getClientIp());\n    }\n\n    public function feedAction()\n    {\n        $feedType = $this->_getParam('feed');\n\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $nameCacheFeed = 'feed_' . $feedType;\n        $cache = Zend_Registry::get('cache');\n\n        $feedArray = $cache->load($nameCacheFeed);\n        if (!$feedArray) {\n            $topics = new Application_Model_Posts();\n            $feedArray = $topics->getFeedData($feedType);\n            $cache->save($feedArray, $nameCacheFeed);\n        }\n\n        $tracking = new Application_Model_Tracking();\n        $tracking->checkTrackingEvent(null, $this->_request->getClientIp());\n\n        $feed = Zend_Feed::importArray($feedArray, $feedType);\n        $feed->send();\n    }\n\n    public function sitemapAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        if ($this->isCDN()) {\n            $sitemap = <<<RAW\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n</urlset>\nRAW;\n        } else {\n            $sitemap = Application_Model_Sitemap::generateSitemap();\n        }\n\n        $this->getResponse()->setHeader('Content-Type', 'application/xml');\n        $this->getResponse()->setHeader('Cache-Control', 'public, max-age=7200');\n        $this->getResponse()->appendBody($sitemap);\n    }\n\n    public function addcommentAction()\n    {\n        $this->redirect('/');\n    }\n\n    public function ajaxaddcommentAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $topicId = (int) $this->_getParam('topicId');\n\n        $topicTable = new Application_Model_Posts();\n\n        $topic = $topicTable->getPostById($topicId);\n        if ($topic) {\n            $url = $topic->url;\n        } else {\n            $url = false;\n        }\n\n        $result = array('valid' => false);\n\n        if ($this->getRequest()->isPost() && $url) {\n            $form = new Application_Form_Comment();\n\n            if ($form->isValid($this->getRequest()->getPost())) {\n                $formData = $form->getValues();\n\n                if ($this->validCommentToken($formData['csrfToken'])) {\n                    $this->saveComment($topicId, $url, $formData);\n                }\n\n                $result['valid'] = true;\n            } else {\n                $formView = new Zend_View;\n                $formView->setScriptPath(APPLICATION_PATH . \"/views/scripts/index\");\n                $formView->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n                $formView->form = $form;\n\n                $result['form_html'] = $formView->render('formcomment.phtml');\n            }\n        }\n\n        $this->_helper->json($result);\n    }\n\n    public function robotsAction()\n    {\n        $this->_helper->layout->disableLayout();\n        $this->_helper->viewRenderer->setNoRender(true);\n\n        $robots = <<<RAW\nUser-agent: *\n\nHost: morontt.info\nSitemap: https://morontt.info/sitemap.xml\nRAW;\n        if ($this->isCDN()) {\n            $robots = <<<RAW\nUser-agent: *\n\nDisallow: /\nRAW;\n        }\n\n        $this->getResponse()->setHeader('Content-Type', 'text/plain');\n        $this->getResponse()->setHeader('Cache-Control', 'public, max-age=2592000');\n        $this->getResponse()->appendBody($robots);\n    }\n\n    protected function _redirect404()\n    {\n        throw new Zend_Controller_Action_Exception('Page not found', 404);\n    }\n\n    protected function saveComment($topicId, $url, $formData)\n    {\n        $topic         = new Application_Model_Posts();\n        $commentators  = new Application_Model_Commentators();\n        $commentsTable = new Application_Model_Comments();\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $commentatorId = $commentators->getCommentatorId($formData['name'], $formData['mail'], $formData['website']);\n            if ($formData['cookie']) {\n                $hash = md5(Application_Model_Commentators::HASH_SALT . $commentatorId);\n                $path = str_replace('qwerty', '', $this->view->url(array('url' => 'qwerty'), 'topic_url'));\n                setcookie('commentator_hash', $hash, time() + 31104000, $path);\n            }\n        } else {\n            $commentatorId = 0;\n        }\n        $commentId = $commentsTable->saveComment($formData, $commentatorId, $this->_request->getClientIp());\n        $topic->updateCommentsCount($topicId);\n\n        $this->sendCommentMails($url, $formData);\n        $this->sendTelegramMessage($url, $commentId, $formData);\n\n        $cacheOutput = Zend_Registry::get('cacheOutput');\n        $cacheOutput->remove('commentators_stats');\n    }\n\n    protected function sendCommentMails($url, $formData)\n    {\n        $mailer = new Application_Model_Mailswift();\n\n        $notice = true;\n\n        $options = Zend_Registry::get('options');\n\n        if (Zend_Auth::getInstance()->hasIdentity()) {\n            if (Zend_Auth::getInstance()->getIdentity()->id == '1') {\n                $notice = false;\n            }\n        }\n\n        if ($notice) {\n            $mailView = new Zend_View;\n            $mailView->setScriptPath(APPLICATION_PATH . \"/views/mails\");\n            $mailView->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n            $mailView->topicUrl    = $url;\n            $mailView->formData    = $formData;\n            $mailView->headerTitle = $options['blog']['title'];\n\n            $mailBody = $mailView->render('commenttopic.phtml');\n\n            $mailer->sendEmailToSpool($options['sys_parameters']['mail'], $options['sys_parameters']['mailto'],\n                '\u041d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBody\n            );\n            $mailer->sendEmailToSpool($options['sys_parameters']['copymail'], $options['sys_parameters']['mailto'],\n                '\u041d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBody\n            );\n        }\n\n        if ($formData['parentId']) {\n\n            $commentsTable = new Application_Model_Comments();\n            $commentInfo = $commentsTable->getCommentInfo($formData['parentId']);\n\n            if ($commentInfo) {\n                $mailTwo = new Zend_View;\n                $mailTwo->setScriptPath(APPLICATION_PATH . \"/views/mails\");\n                $mailTwo->setHelperPath(APPLICATION_PATH . \"/views/helpers\");\n\n                $mailTwo->topicUrl    = $url;\n                $mailTwo->formData    = $formData;\n                $mailTwo->topicTitle  = $commentInfo['title'];\n                $mailTwo->hash        = $commentInfo['hash'];\n                $mailTwo->headerTitle = $options['blog']['title'];\n\n                $mailBodyTwo = $mailTwo->render('responsecomment.phtml');\n\n                $mailer->sendEmailToSpool($commentInfo['mail'], $commentInfo['name'], '\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439', $mailBodyTwo);\n            }\n        }\n    }\n\n    /**\n     * @param string $slug\n     * @param int $commentId\n     * @param array $formData\n     *\n     * @throws Zend_Exception\n     */\n    protected function sendTelegramMessage(string $slug, int $commentId, array $formData)\n    {\n        $url = BASE_URL . $this->view->url(array('url' => $slug), 'topic_url');\n\n        $text = \"\u041a\u0442\u043e-\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u043b [\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439]({$url})\\n\\n*ID*: {$commentId}\\n\";\n        if (!empty($formData['name'])) {\n            $text .= \"*Name*: {$formData['name']}\\n\";\n        }\n        if (!empty($formData['mail'])) {\n            $text .= \"*Email*: {$formData['mail']}\\n\";\n        }\n        if (!empty($formData['website'])) {\n            $text .= \"*Website*: {$formData['website']}\\n\";\n        }\n\n        $text .= \"\\n\" . strip_tags($formData['comment_text']);\n\n        $options = Zend_Registry::get('options');\n        $message = [\n            'chat_id' => $options['telegram']['admin_id'],\n            'text' => $text,\n            'parse_mode' => 'Markdown',\n        ];\n\n        exec(sprintf(\n            'nohup php %s \\'%s\\' > /dev/null 2>&1 &',\n            realpath(__DIR__ . '/../../bin/telegramMessage.php'),\n            json_encode($message)\n        ));\n\n        exec(sprintf(\n            'nohup php %s > /dev/null 2>&1 &',\n            realpath(__DIR__ . '/../../bin/commentGeoLocation.php')\n        ));\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isCDN()\n    {\n        return !empty($_SERVER['HTTP_VIA'])\n            && (stripos($_SERVER['HTTP_VIA'], 'BunnyCDN') !== false\n                || strpos($_SERVER['HTTP_VIA'], 'cdn77') !== false);\n    }\n\n    private function generateCommentToken($time = null): string\n    {\n        $time = $time ?? time();\n        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? '';\n\n        return base64_encode($time . ':' . hash('md5', 'MD5_' . $userAgent . $time, true));\n    }\n\n    private function validCommentToken($token): bool\n    {\n        $raw = base64_decode($token, true);\n        if ($raw === false) {\n            return false;\n        }\n\n        $position = strpos($raw, ':');\n        if ($position === false) {\n            return false;\n        }\n\n        $time = substr($raw, 0, $position);\n\n        return hash_equals($this->generateCommentToken($time), $token);\n    }\n}\n", "<?php\n\nclass Application_Form_Comment extends Zend_Form\n{\n\n    public $elementDecorators = array(\n        'ViewHelper',\n        'Errors',\n        array(array('data' => 'HtmlTag'), array('tag' => 'div', 'class' => 'element')),\n        array('label', array()),\n        array(array('row' => 'HtmlTag'), array('tag' => 'div', 'class' => 'row')),\n    );\n\n    public function init()\n    {\n        $this->setAction('/index/addcomment');\n        $this->setMethod('post');\n\n        $this->setAttrib('id', 'comment_form');\n\n        $name = new Zend_Form_Element_Text('name');\n        $name->setLabel('\u0418\u043c\u044f:')\n            ->setRequired(true)\n            ->setAttribs(array(\n                'placeholder' => 'nickname',\n                'required'    => 'required',\n            ))\n            ->addFilters(array('StripTags', 'StringTrim'))\n            ->addValidator('NotEmpty');\n\n        $email = new Zend_Form_Element_Text('mail');\n        $email->helper = 'formEmail';\n        $email->setLabel('E-mail:')\n            ->setAttribs(array(\n                'placeholder' => 'mail@example.org',\n            ))\n            ->addFilters(array('StripTags', 'StringTrim'))\n            ->addValidator('EmailAddress');\n\n        $website = new Zend_Form_Element_Text('website');\n        $website->helper = 'formUrl';\n        $website->setLabel('Website:')\n                ->setRequired(false)\n                ->setAttrib('placeholder', 'http://example.org')\n                ->addFilters(array('StripTags', 'StringTrim'))\n                ->addValidator(new Application_Form_Validate_Uri());\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $this->addElement($name);\n            $this->addElement($email);\n            $this->addElement($website);\n        }\n\n        $textarea = new Zend_Form_Element_Textarea('comment_text');\n        $textarea->setLabel('\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:')\n                ->setRequired(true)\n                ->setAttribs(array(\n                    'cols'     => 66,\n                    'rows'     => 10,\n                    'required' => 'required',\n                ))\n                ->addFilter('StringTrim');\n        $tagFilter = new Zend_Filter_StripTags(array(\n            'allowTags'    => array('a', 's', 'b', 'i', 'em', 'strong', 'img'),\n            'allowAttribs' => array('src', 'href', 'class', 'id'),\n        ));\n        $textarea->addFilter($tagFilter);\n        $this->addElement($textarea);\n\n        $topicId = new Zend_Form_Element_Hidden('topicId');\n        $topicId->addValidator('Int');\n        $this->addElement($topicId);\n\n        $parentId = new Zend_Form_Element_Hidden('parentId');\n        $parentId->setValue(0);\n        $parentId->addValidator('Int');\n        $this->addElement($parentId);\n\n        $cookie = new Zend_Form_Element_Hidden('cookie');\n        $cookie->setValue(1);\n        $cookie->addValidator('Int');\n        $this->addElement($cookie);\n\n        if (!Zend_Auth::getInstance()->hasIdentity()) {\n            $this->checkCookie();\n        }\n\n        $csrfToken = new Zend_Form_Element_Hidden('csrfToken');\n        $csrfToken->addValidator('NotEmpty');\n        $this->addElement($csrfToken);\n\n        $this->setElementDecorators($this->elementDecorators);\n    }\n\n    protected function checkCookie()\n    {\n        $hash = false;\n\n        if (isset($_COOKIE['commentator_hash'])) {\n            $hash = $_COOKIE['commentator_hash'];\n        }\n\n        if ($hash) {\n            $commentatorsTable = new Application_Model_Commentators();\n\n            $commentator = $commentatorsTable->getByHash($hash);\n            if ($commentator) {\n                $this->name->setValue($commentator->name);\n                if ($commentator->mail) {\n                    $this->mail->setValue($commentator->mail);\n                }\n                if ($commentator->website) {\n                    $this->website->setValue($commentator->website);\n                }\n            }\n        }\n    }\n}\n\n", "<form id=\"comment_form\" class=\"ym-form ym-columnar\" method=\"POST\" action=\"<?php echo $this->url(array(), 'add_comment', true); ?>\">\n    <?php if (!Zend_Auth::getInstance()->hasIdentity()) { ?>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->name; ?>\n    </div>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->mail; ?>\n    </div>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->website; ?>\n    </div>\n    <?php } ?>\n    <div class=\"ym-fbox-text\">\n        <?php echo $this->form->comment_text; ?>\n    </div>\n    <div style=\"display: none;\">\n        <?php echo $this->form->topicId; ?>\n        <?php echo $this->form->parentId; ?>\n        <?php echo $this->form->cookie; ?>\n        <?php echo $this->form->csrfToken; ?>\n    </div>\n    <div class=\"ym-fbox-button\">\n        <button type=\"submit\" class=\"ym-button ym-add\" id=\"submit\" name=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439</button>\n    </div>\n</form>\n<?php\n    $options = Zend_Registry::get('options');\n?>\n<div class=\"form_note\">\n    \u041f\u043e\u043b\u044f, \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 <img src=\"<?php echo $options['cdn_host']; ?>/img/req_asterisk.png\" alt=\"asterisk\" />, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.<br />\n    \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043d\u0438\u0433\u0434\u0435 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.<br/>\n    \u0412\u0435\u0431-\u0441\u0430\u0439\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://example.org, \u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438, \u043a\u043e\u043d\u0435\u0447\u043d\u043e.\n</div>\n<div class=\"ajax-loader\"></div>\n"], "filenames": ["application/controllers/IndexController.php", "application/forms/Comment.php", "application/views/scripts/index/formcomment.phtml"], "buggy_code_start_loc": [156, 87, 19], "buggy_code_end_loc": [415, 87, 19], "fixing_code_start_loc": [157, 88, 20], "fixing_code_end_loc": [445, 92, 21], "type": "CWE-352", "message": "A vulnerability was found in morontt zend-blog-number-2. It has been classified as problematic. Affected is an unknown function of the file application/forms/Comment.php of the component Comment Handler. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is 36b2d4abe20a6245e4f8df7a4b14e130b24d429d. It is recommended to apply a patch to fix this issue. VDB-215250 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4397", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-10T19:15:10.223", "lastModified": "2022-12-13T14:42:15.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in morontt zend-blog-number-2. It has been classified as problematic. Affected is an unknown function of the file application/forms/Comment.php of the component Comment Handler. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is 36b2d4abe20a6245e4f8df7a4b14e130b24d429d. It is recommended to apply a patch to fix this issue. VDB-215250 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}, {"lang": "en", "value": "CWE-862"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zend-blog-2_project:zend-blog-2:-:*:*:*:*:*:*:*", "matchCriteriaId": "919C9915-49C0-4AF0-B423-D93E07800667"}]}]}], "references": [{"url": "https://github.com/morontt/zend-blog-number-2/commit/36b2d4abe20a6245e4f8df7a4b14e130b24d429d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215250", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/morontt/zend-blog-number-2/commit/36b2d4abe20a6245e4f8df7a4b14e130b24d429d"}}