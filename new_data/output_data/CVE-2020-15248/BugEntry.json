{"buggy_code": ["<?php namespace Backend;\n\nuse App;\nuse Backend;\nuse BackendMenu;\nuse BackendAuth;\nuse Backend\\Models\\UserRole;\nuse Backend\\Classes\\WidgetManager;\nuse System\\Classes\\MailManager;\nuse System\\Classes\\CombineAssets;\nuse System\\Classes\\SettingsManager;\nuse October\\Rain\\Support\\ModuleServiceProvider;\n\nclass ServiceProvider extends ModuleServiceProvider\n{\n    /**\n     * Register the service provider.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        parent::register('backend');\n\n        $this->registerMailer();\n        $this->registerAssetBundles();\n\n        /*\n         * Backend specific\n         */\n        if (App::runningInBackend()) {\n            $this->registerBackendNavigation();\n            $this->registerBackendReportWidgets();\n            $this->registerBackendWidgets();\n            $this->registerBackendPermissions();\n            $this->registerBackendSettings();\n        }\n    }\n\n    /**\n     * Bootstrap the module events.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        parent::boot('backend');\n    }\n\n    /**\n     * Register mail templates\n     */\n    protected function registerMailer()\n    {\n        MailManager::instance()->registerCallback(function ($manager) {\n            $manager->registerMailTemplates([\n                'backend::mail.invite',\n                'backend::mail.restore',\n            ]);\n        });\n    }\n\n    /**\n     * Register asset bundles\n     */\n    protected function registerAssetBundles()\n    {\n        CombineAssets::registerCallback(function ($combiner) {\n            $combiner->registerBundle('~/modules/backend/assets/less/october.less');\n            $combiner->registerBundle('~/modules/backend/assets/js/october.js');\n            $combiner->registerBundle('~/modules/backend/widgets/table/assets/js/build.js');\n            $combiner->registerBundle('~/modules/backend/widgets/mediamanager/assets/js/mediamanager-browser.js');\n            $combiner->registerBundle('~/modules/backend/widgets/mediamanager/assets/less/mediamanager.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/codeeditor/assets/less/codeeditor.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/repeater/assets/less/repeater.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/codeeditor/assets/js/build.js');\n            $combiner->registerBundle('~/modules/backend/formwidgets/fileupload/assets/less/fileupload.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/nestedform/assets/less/nestedform.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/js/build-plugins.js');\n            $combiner->registerBundle('~/modules/backend/formwidgets/colorpicker/assets/less/colorpicker.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/permissioneditor/assets/less/permissioneditor.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/markdowneditor/assets/less/markdowneditor.less');\n\n            /*\n             * Rich Editor is protected by DRM\n             */\n            if (file_exists(base_path('modules/backend/formwidgets/richeditor/assets/vendor/froala_drm'))) {\n                $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/less/richeditor.less');\n                $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/js/build.js');\n            }\n        });\n    }\n\n    /*\n     * Register navigation\n     */\n    protected function registerBackendNavigation()\n    {\n        BackendMenu::registerCallback(function ($manager) {\n            $manager->registerMenuItems('October.Backend', [\n                'dashboard' => [\n                    'label'       => 'backend::lang.dashboard.menu_label',\n                    'icon'        => 'icon-dashboard',\n                    'iconSvg'     => 'modules/backend/assets/images/dashboard-icon.svg',\n                    'url'         => Backend::url('backend'),\n                    'permissions' => ['backend.access_dashboard'],\n                    'order'       => 10\n                ],\n                'media' => [\n                    'label'       => 'backend::lang.media.menu_label',\n                    'icon'        => 'icon-folder',\n                    'iconSvg'     => 'modules/backend/assets/images/media-icon.svg',\n                    'url'         => Backend::url('backend/media'),\n                    'permissions' => ['media.*'],\n                    'order'       => 200\n                ]\n            ]);\n        });\n    }\n\n    /*\n     * Register report widgets\n     */\n    protected function registerBackendReportWidgets()\n    {\n        WidgetManager::instance()->registerReportWidgets(function ($manager) {\n            $manager->registerReportWidget(\\Backend\\ReportWidgets\\Welcome::class, [\n                'label'   => 'backend::lang.dashboard.welcome.widget_title_default',\n                'context' => 'dashboard'\n            ]);\n        });\n    }\n\n    /*\n     * Register permissions\n     */\n    protected function registerBackendPermissions()\n    {\n        BackendAuth::registerCallback(function ($manager) {\n            $manager->registerPermissions('October.Backend', [\n                'backend.access_dashboard' => [\n                    'label' => 'system::lang.permissions.view_the_dashboard',\n                    'tab'   => 'system::lang.permissions.name'\n                ],\n                'backend.manage_default_dashboard' => [\n                    'label' => 'system::lang.permissions.manage_default_dashboard',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'backend.manage_users' => [\n                    'label' => 'system::lang.permissions.manage_other_administrators',\n                    'tab'   => 'system::lang.permissions.name'\n                ],\n                'backend.impersonate_users' => [\n                    'label' => 'system::lang.permissions.impersonate_users',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'backend.manage_preferences' => [\n                    'label' => 'system::lang.permissions.manage_preferences',\n                    'tab'   => 'system::lang.permissions.name'\n                ],\n                'backend.manage_editor' => [\n                    'label' => 'system::lang.permissions.manage_editor',\n                    'tab'   => 'system::lang.permissions.name'\n                ],\n                'backend.manage_branding' => [\n                    'label' => 'system::lang.permissions.manage_branding',\n                    'tab'   => 'system::lang.permissions.name'\n                ],\n                'media.manage_media' => [\n                    'label' => 'backend::lang.permissions.manage_media',\n                    'tab' => 'system::lang.permissions.name',\n                ],\n                'backend.allow_unsafe_markdown' => [\n                    'label' => 'backend::lang.permissions.allow_unsafe_markdown',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n            ]);\n        });\n    }\n\n    /*\n     * Register widgets\n     */\n    protected function registerBackendWidgets()\n    {\n        WidgetManager::instance()->registerFormWidgets(function ($manager) {\n            $manager->registerFormWidget('Backend\\FormWidgets\\CodeEditor', 'codeeditor');\n            $manager->registerFormWidget('Backend\\FormWidgets\\RichEditor', 'richeditor');\n            $manager->registerFormWidget('Backend\\FormWidgets\\MarkdownEditor', 'markdown');\n            $manager->registerFormWidget('Backend\\FormWidgets\\FileUpload', 'fileupload');\n            $manager->registerFormWidget('Backend\\FormWidgets\\Relation', 'relation');\n            $manager->registerFormWidget('Backend\\FormWidgets\\DatePicker', 'datepicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\TimePicker', 'timepicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\ColorPicker', 'colorpicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\DataTable', 'datatable');\n            $manager->registerFormWidget('Backend\\FormWidgets\\RecordFinder', 'recordfinder');\n            $manager->registerFormWidget('Backend\\FormWidgets\\Repeater', 'repeater');\n            $manager->registerFormWidget('Backend\\FormWidgets\\TagList', 'taglist');\n            $manager->registerFormWidget('Backend\\FormWidgets\\MediaFinder', 'mediafinder');\n            $manager->registerFormWidget('Backend\\FormWidgets\\NestedForm', 'nestedform');\n        });\n    }\n\n    /*\n     * Register settings\n     */\n    protected function registerBackendSettings()\n    {\n        SettingsManager::instance()->registerCallback(function ($manager) {\n            $manager->registerSettingItems('October.Backend', [\n                'branding' => [\n                    'label'       => 'backend::lang.branding.menu_label',\n                    'description' => 'backend::lang.branding.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-paint-brush',\n                    'class'       => 'Backend\\Models\\BrandSetting',\n                    'permissions' => ['backend.manage_branding'],\n                    'order'       => 500,\n                    'keywords'    => 'brand style'\n                ],\n                'editor' => [\n                    'label'       => 'backend::lang.editor.menu_label',\n                    'description' => 'backend::lang.editor.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-code',\n                    'class'       => 'Backend\\Models\\EditorSetting',\n                    'permissions' => ['backend.manage_editor'],\n                    'order'       => 500,\n                    'keywords'    => 'html code class style'\n                ],\n                'myaccount' => [\n                    'label'       => 'backend::lang.myaccount.menu_label',\n                    'description' => 'backend::lang.myaccount.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MYSETTINGS,\n                    'icon'        => 'icon-user',\n                    'url'         => Backend::url('backend/users/myaccount'),\n                    'order'       => 500,\n                    'context'     => 'mysettings',\n                    'keywords'    => 'backend::lang.myaccount.menu_keywords'\n                ],\n                'preferences' => [\n                    'label'       => 'backend::lang.backend_preferences.menu_label',\n                    'description' => 'backend::lang.backend_preferences.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MYSETTINGS,\n                    'icon'        => 'icon-laptop',\n                    'url'         => Backend::url('backend/preferences'),\n                    'permissions' => ['backend.manage_preferences'],\n                    'order'       => 510,\n                    'context'     => 'mysettings'\n                ],\n                'access_logs' => [\n                    'label'       => 'backend::lang.access_log.menu_label',\n                    'description' => 'backend::lang.access_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-lock',\n                    'url'         => Backend::url('backend/accesslogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 920\n                ]\n            ]);\n        });\n    }\n}\n", "<?php namespace System;\n\nuse Db;\nuse App;\nuse View;\nuse Event;\nuse Config;\nuse Backend;\nuse Request;\nuse BackendMenu;\nuse BackendAuth;\nuse Twig\\Extension\\SandboxExtension;\nuse Twig\\Environment as TwigEnvironment;\nuse System\\Classes\\MailManager;\nuse System\\Classes\\ErrorHandler;\nuse System\\Classes\\MarkupManager;\nuse System\\Classes\\PluginManager;\nuse System\\Classes\\SettingsManager;\nuse System\\Classes\\UpdateManager;\nuse System\\Twig\\Engine as TwigEngine;\nuse System\\Twig\\Loader as TwigLoader;\nuse System\\Twig\\Extension as TwigExtension;\nuse System\\Twig\\SecurityPolicy as TwigSecurityPolicy;\nuse System\\Models\\EventLog;\nuse System\\Models\\MailSetting;\nuse System\\Classes\\CombineAssets;\nuse Backend\\Classes\\WidgetManager;\nuse October\\Rain\\Support\\ModuleServiceProvider;\nuse October\\Rain\\Router\\Helper as RouterHelper;\nuse Illuminate\\Pagination\\Paginator;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass ServiceProvider extends ModuleServiceProvider\n{\n    /**\n     * Register the service provider.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        parent::register('system');\n\n        $this->registerSingletons();\n        $this->registerPrivilegedActions();\n\n        /*\n         * Register all plugins\n         */\n        PluginManager::instance()->registerAll();\n\n        $this->registerConsole();\n        $this->registerErrorHandler();\n        $this->registerLogging();\n        $this->registerTwigParser();\n        $this->registerMailer();\n        $this->registerMarkupTags();\n        $this->registerAssetBundles();\n        $this->registerValidator();\n        $this->registerGlobalViewVars();\n\n        /*\n         * Register other module providers\n         */\n        foreach (Config::get('cms.loadModules', []) as $module) {\n            if (strtolower(trim($module)) != 'system') {\n                App::register('\\\\' . $module . '\\ServiceProvider');\n            }\n        }\n\n        /*\n         * Backend specific\n         */\n        if (App::runningInBackend()) {\n            $this->registerBackendNavigation();\n            $this->registerBackendReportWidgets();\n            $this->registerBackendPermissions();\n            $this->registerBackendSettings();\n        }\n    }\n\n    /**\n     * Bootstrap the module events.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Fix UTF8MB4 support for MariaDB < 10.2 and MySQL < 5.7\n        $this->applyDatabaseDefaultStringLength();\n\n        // Fix use of Storage::url() for local disks that haven't been configured correctly\n        foreach (Config::get('filesystems.disks') as $key => $config) {\n            if ($config['driver'] === 'local' && ends_with($config['root'], '/storage/app') && empty($config['url'])) {\n                Config::set(\"filesystems.disks.$key.url\", '/storage/app');\n            }\n        }\n\n        Paginator::defaultSimpleView('system::pagination.simple-default');\n\n        /*\n         * Boot plugins\n         */\n        PluginManager::instance()->bootAll();\n\n        parent::boot('system');\n    }\n\n    /**\n     * Register singletons\n     */\n    protected function registerSingletons()\n    {\n        App::singleton('cms.helper', function () {\n            return new \\Cms\\Helpers\\Cms;\n        });\n\n        App::singleton('backend.helper', function () {\n            return new \\Backend\\Helpers\\Backend;\n        });\n\n        App::singleton('backend.menu', function () {\n            return \\Backend\\Classes\\NavigationManager::instance();\n        });\n\n        App::singleton('backend.auth', function () {\n            return \\Backend\\Classes\\AuthManager::instance();\n        });\n    }\n\n    /**\n     * Check for CLI or system/updates route and disable any plugin initialization\n     */\n    protected function registerPrivilegedActions()\n    {\n        $requests = ['/combine/', '@/system/updates', '@/system/install', '@/backend/auth'];\n        $commands = ['october:up', 'october:update'];\n\n        /*\n         * Requests\n         */\n        $path = RouterHelper::normalizeUrl(Request::path());\n        $backendUri = RouterHelper::normalizeUrl(Config::get('cms.backendUri', 'backend'));\n        foreach ($requests as $request) {\n            if (substr($request, 0, 1) == '@') {\n                $request = $backendUri . substr($request, 1);\n            }\n\n            if (stripos($path, $request) === 0) {\n                PluginManager::$noInit = true;\n            }\n        }\n\n        /*\n         * CLI\n         */\n        if (App::runningInConsole() && count(array_intersect($commands, Request::server('argv', []))) > 0) {\n            PluginManager::$noInit = true;\n        }\n    }\n\n    /*\n     * Register markup tags\n     */\n    protected function registerMarkupTags()\n    {\n        MarkupManager::instance()->registerCallback(function ($manager) {\n            $manager->registerFunctions([\n                // Functions\n                'input'          => 'input',\n                'post'           => 'post',\n                'get'            => 'get',\n                'link_to'        => 'link_to',\n                'link_to_asset'  => 'link_to_asset',\n                'link_to_route'  => 'link_to_route',\n                'link_to_action' => 'link_to_action',\n                'asset'          => 'asset',\n                'action'         => 'action',\n                'url'            => 'url',\n                'route'          => 'route',\n                'secure_url'     => 'secure_url',\n                'secure_asset'   => 'secure_asset',\n\n                // Classes\n                'str_*'          => ['Str', '*'],\n                'url_*'          => ['Url', '*'],\n                'html_*'         => ['Html', '*'],\n                'form_*'         => ['Form', '*'],\n                'form_macro'     => ['Form', '__call']\n            ]);\n\n            $manager->registerFilters([\n                // Classes\n                'slug'           => ['Str', 'slug'],\n                'plural'         => ['Str', 'plural'],\n                'singular'       => ['Str', 'singular'],\n                'finish'         => ['Str', 'finish'],\n                'snake'          => ['Str', 'snake'],\n                'camel'          => ['Str', 'camel'],\n                'studly'         => ['Str', 'studly'],\n                'trans'          => ['Lang', 'get'],\n                'transchoice'    => ['Lang', 'choice'],\n                'md'             => ['Markdown', 'parse'],\n                'md_safe'        => ['Markdown', 'parseSafe'],\n                'time_since'     => ['System\\Helpers\\DateTime', 'timeSince'],\n                'time_tense'     => ['System\\Helpers\\DateTime', 'timeTense'],\n            ]);\n        });\n    }\n\n    /**\n     * Register command line specifics\n     */\n    protected function registerConsole()\n    {\n        /*\n         * Allow plugins to use the scheduler\n         */\n        Event::listen('console.schedule', function ($schedule) {\n            // Fix initial system migration with plugins that use settings for scheduling - see #3208\n            if (App::hasDatabase() && !Schema::hasTable(UpdateManager::instance()->getMigrationTableName())) {\n                return;\n            }\n\n            $plugins = PluginManager::instance()->getPlugins();\n            foreach ($plugins as $plugin) {\n                if (method_exists($plugin, 'registerSchedule')) {\n                    $plugin->registerSchedule($schedule);\n                }\n            }\n        });\n\n        /*\n         * Add CMS based cache clearing to native command\n         */\n        Event::listen('cache:cleared', function () {\n            \\System\\Helpers\\Cache::clearInternal();\n        });\n\n        /*\n         * Register console commands\n         */\n        $this->registerConsoleCommand('october.up', 'System\\Console\\OctoberUp');\n        $this->registerConsoleCommand('october.down', 'System\\Console\\OctoberDown');\n        $this->registerConsoleCommand('october.update', 'System\\Console\\OctoberUpdate');\n        $this->registerConsoleCommand('october.util', 'System\\Console\\OctoberUtil');\n        $this->registerConsoleCommand('october.mirror', 'System\\Console\\OctoberMirror');\n        $this->registerConsoleCommand('october.fresh', 'System\\Console\\OctoberFresh');\n        $this->registerConsoleCommand('october.env', 'System\\Console\\OctoberEnv');\n        $this->registerConsoleCommand('october.install', 'System\\Console\\OctoberInstall');\n        $this->registerConsoleCommand('october.passwd', 'System\\Console\\OctoberPasswd');\n\n        $this->registerConsoleCommand('plugin.install', 'System\\Console\\PluginInstall');\n        $this->registerConsoleCommand('plugin.remove', 'System\\Console\\PluginRemove');\n        $this->registerConsoleCommand('plugin.disable', 'System\\Console\\PluginDisable');\n        $this->registerConsoleCommand('plugin.enable', 'System\\Console\\PluginEnable');\n        $this->registerConsoleCommand('plugin.refresh', 'System\\Console\\PluginRefresh');\n        $this->registerConsoleCommand('plugin.rollback', 'System\\Console\\PluginRollback');\n        $this->registerConsoleCommand('plugin.list', 'System\\Console\\PluginList');\n\n        $this->registerConsoleCommand('theme.install', 'System\\Console\\ThemeInstall');\n        $this->registerConsoleCommand('theme.remove', 'System\\Console\\ThemeRemove');\n        $this->registerConsoleCommand('theme.list', 'System\\Console\\ThemeList');\n        $this->registerConsoleCommand('theme.use', 'System\\Console\\ThemeUse');\n        $this->registerConsoleCommand('theme.sync', 'System\\Console\\ThemeSync');\n    }\n\n    /*\n     * Error handling for uncaught Exceptions\n     */\n    protected function registerErrorHandler()\n    {\n        Event::listen('exception.beforeRender', function ($exception, $httpCode, $request) {\n            $handler = new ErrorHandler;\n            return $handler->handleException($exception);\n        });\n    }\n\n    /*\n     * Write all log events to the database\n     */\n    protected function registerLogging()\n    {\n        Event::listen(\\Illuminate\\Log\\Events\\MessageLogged::class, function ($event) {\n            if (EventLog::useLogging()) {\n                EventLog::add($event->message, $event->level);\n            }\n        });\n    }\n\n    /*\n     * Register text twig parser\n     */\n    protected function registerTwigParser()\n    {\n        /*\n         * Register system Twig environment\n         */\n        App::singleton('twig.environment', function ($app) {\n            $twig = new TwigEnvironment(new TwigLoader, ['auto_reload' => true]);\n            $twig->addExtension(new TwigExtension);\n            $twig->addExtension(new SandboxExtension(new TwigSecurityPolicy, true));\n            return $twig;\n        });\n\n        /*\n         * Register .htm extension for Twig views\n         */\n        App::make('view')->addExtension('htm', 'twig', function () {\n            return new TwigEngine(App::make('twig.environment'));\n        });\n    }\n\n    /**\n     * Register mail templating and settings override.\n     */\n    protected function registerMailer()\n    {\n        /*\n         * Register system layouts\n         */\n        MailManager::instance()->registerCallback(function ($manager) {\n            $manager->registerMailLayouts([\n                'default' => 'system::mail.layout-default',\n                'system' => 'system::mail.layout-system',\n            ]);\n\n            $manager->registerMailPartials([\n                'header' => 'system::mail.partial-header',\n                'footer' => 'system::mail.partial-footer',\n                'button' => 'system::mail.partial-button',\n                'panel' => 'system::mail.partial-panel',\n                'table' => 'system::mail.partial-table',\n                'subcopy' => 'system::mail.partial-subcopy',\n                'promotion' => 'system::mail.partial-promotion',\n            ]);\n        });\n\n        /*\n         * Override system mailer with mail settings\n         */\n        Event::listen('mailer.beforeRegister', function () {\n            if (MailSetting::isConfigured()) {\n                MailSetting::applyConfigValues();\n            }\n        });\n\n        /*\n         * Override standard Mailer content with template\n         */\n        Event::listen('mailer.beforeAddContent', function ($mailer, $message, $view, $data, $raw, $plain) {\n            $method = $raw === null ? 'addContentToMailer' : 'addRawContentToMailer';\n            $plainOnly = $view === null; // When \"plain-text only\" email is sent, $view is null, this sets the flag appropriately\n            return !MailManager::instance()->$method($message, $raw ?: $view ?: $plain, $data, $plainOnly);\n        });\n    }\n\n    /*\n     * Register navigation\n     */\n    protected function registerBackendNavigation()\n    {\n        BackendMenu::registerCallback(function ($manager) {\n            $manager->registerMenuItems('October.System', [\n                'system' => [\n                    'label'       => 'system::lang.settings.menu_label',\n                    'icon'        => 'icon-cog',\n                    'iconSvg'     => 'modules/system/assets/images/cog-icon.svg',\n                    'url'         => Backend::url('system/settings'),\n                    'permissions' => [],\n                    'order'       => 1000\n                ]\n            ]);\n        });\n\n        /*\n         * Register the sidebar for the System main menu\n         */\n        BackendMenu::registerContextSidenavPartial(\n            'October.System',\n            'system',\n            '~/modules/system/partials/_system_sidebar.htm'\n        );\n\n        /*\n         * Remove the October.System.system main menu item if there is no subpages to display\n         */\n        Event::listen('backend.menu.extendItems', function ($manager) {\n            $systemSettingItems = SettingsManager::instance()->listItems('system');\n            $systemMenuItems = $manager->listSideMenuItems('October.System', 'system');\n\n            if (empty($systemSettingItems) && empty($systemMenuItems)) {\n                $manager->removeMainMenuItem('October.System', 'system');\n            }\n        }, -9999);\n    }\n\n    /*\n     * Register report widgets\n     */\n    protected function registerBackendReportWidgets()\n    {\n        WidgetManager::instance()->registerReportWidgets(function ($manager) {\n            $manager->registerReportWidget(\\System\\ReportWidgets\\Status::class, [\n                'label'   => 'backend::lang.dashboard.status.widget_title_default',\n                'context' => 'dashboard'\n            ]);\n        });\n    }\n\n    /*\n     * Register permissions\n     */\n    protected function registerBackendPermissions()\n    {\n        BackendAuth::registerCallback(function ($manager) {\n            $manager->registerPermissions('October.System', [\n                'system.manage_updates' => [\n                    'label' => 'system::lang.permissions.manage_software_updates',\n                    'tab' => 'system::lang.permissions.name'\n                ],\n                'system.access_logs' => [\n                    'label' => 'system::lang.permissions.access_logs',\n                    'tab' => 'system::lang.permissions.name'\n                ],\n                'system.manage_mail_settings' => [\n                    'label' => 'system::lang.permissions.manage_mail_settings',\n                    'tab' => 'system::lang.permissions.name'\n                ],\n                'system.manage_mail_templates' => [\n                    'label' => 'system::lang.permissions.manage_mail_templates',\n                    'tab' => 'system::lang.permissions.name'\n                ]\n            ]);\n        });\n    }\n\n    /*\n     * Register settings\n     */\n    protected function registerBackendSettings()\n    {\n        Event::listen('system.settings.extendItems', function ($manager) {\n            \\System\\Models\\LogSetting::filterSettingItems($manager);\n        });\n\n        SettingsManager::instance()->registerCallback(function ($manager) {\n            $manager->registerSettingItems('October.System', [\n                'updates' => [\n                    'label'       => 'system::lang.updates.menu_label',\n                    'description' => 'system::lang.updates.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-cloud-download',\n                    'url'         => Backend::url('system/updates'),\n                    'permissions' => ['system.manage_updates'],\n                    'order'       => 300\n                ],\n                'administrators' => [\n                    'label'       => 'backend::lang.user.menu_label',\n                    'description' => 'backend::lang.user.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-users',\n                    'url'         => Backend::url('backend/users'),\n                    'permissions' => ['backend.manage_users'],\n                    'order'       => 400\n                ],\n                'mail_templates' => [\n                    'label'       => 'system::lang.mail_templates.menu_label',\n                    'description' => 'system::lang.mail_templates.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-envelope-square',\n                    'url'         => Backend::url('system/mailtemplates'),\n                    'permissions' => ['system.manage_mail_templates'],\n                    'order'       => 610\n                ],\n                'mail_settings' => [\n                    'label'       => 'system::lang.mail.menu_label',\n                    'description' => 'system::lang.mail.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-envelope',\n                    'class'       => 'System\\Models\\MailSetting',\n                    'permissions' => ['system.manage_mail_settings'],\n                    'order'       => 620\n                ],\n                'mail_brand_settings' => [\n                    'label'       => 'system::lang.mail_brand.menu_label',\n                    'description' => 'system::lang.mail_brand.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-paint-brush',\n                    'url'         => Backend::url('system/mailbrandsettings'),\n                    'permissions' => ['system.manage_mail_templates'],\n                    'order'       => 630\n                ],\n                'event_logs' => [\n                    'label'       => 'system::lang.event_log.menu_label',\n                    'description' => 'system::lang.event_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-exclamation-triangle',\n                    'url'         => Backend::url('system/eventlogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 900,\n                    'keywords'    => 'error exception'\n                ],\n                'request_logs' => [\n                    'label'       => 'system::lang.request_log.menu_label',\n                    'description' => 'system::lang.request_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-file-o',\n                    'url'         => Backend::url('system/requestlogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 910,\n                    'keywords'    => '404 error'\n                ],\n                'log_settings' => [\n                    'label'       => 'system::lang.log.menu_label',\n                    'description' => 'system::lang.log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-dot-circle-o',\n                    'class'       => 'System\\Models\\LogSetting',\n                    'permissions' => ['system.manage_logs'],\n                    'order'       => 990\n                ],\n            ]);\n        });\n    }\n\n    /**\n     * Register asset bundles\n     */\n    protected function registerAssetBundles()\n    {\n        /*\n         * Register asset bundles\n         */\n        CombineAssets::registerCallback(function ($combiner) {\n            $combiner->registerBundle('~/modules/system/assets/less/styles.less');\n            $combiner->registerBundle('~/modules/system/assets/ui/storm.less');\n            $combiner->registerBundle('~/modules/system/assets/ui/storm.js');\n            $combiner->registerBundle('~/modules/system/assets/js/framework.js');\n            $combiner->registerBundle('~/modules/system/assets/js/framework.combined.js');\n            $combiner->registerBundle('~/modules/system/assets/css/framework.extras.css');\n        });\n    }\n\n    /**\n     * Extends the validator with custom rules\n     */\n    protected function registerValidator()\n    {\n        $this->app->resolving('validator', function ($validator) {\n            /*\n             * Allowed file extensions, as opposed to mime types.\n             * - extensions: png,jpg,txt\n             */\n            $validator->extend('extensions', function ($attribute, $value, $parameters) {\n                $extension = strtolower($value->getClientOriginalExtension());\n                return in_array($extension, $parameters);\n            });\n\n            $validator->replacer('extensions', function ($message, $attribute, $rule, $parameters) {\n                return strtr($message, [':values' => implode(', ', $parameters)]);\n            });\n        });\n    }\n\n    protected function registerGlobalViewVars()\n    {\n        View::share('appName', Config::get('app.name'));\n    }\n\n    /**\n     * Fix UTF8MB4 support for old versions of MariaDB (<10.2) and MySQL (<5.7)\n     */\n    protected function applyDatabaseDefaultStringLength()\n    {\n        if (Db::getDriverName() !== 'mysql') {\n            return;\n        }\n\n        $defaultStrLen = Db::getConfig('varcharmax');\n\n        if ($defaultStrLen === null && Db::getConfig('charset') === 'utf8mb4') {\n            $defaultStrLen = 191;\n        }\n\n        if ($defaultStrLen !== null) {\n            Schema::defaultStringLength((int) $defaultStrLen);\n        }\n    }\n}\n"], "fixing_code": ["<?php namespace Backend;\n\nuse App;\nuse Backend;\nuse BackendMenu;\nuse BackendAuth;\nuse Backend\\Models\\UserRole;\nuse Backend\\Classes\\WidgetManager;\nuse System\\Classes\\MailManager;\nuse System\\Classes\\CombineAssets;\nuse System\\Classes\\SettingsManager;\nuse October\\Rain\\Support\\ModuleServiceProvider;\n\nclass ServiceProvider extends ModuleServiceProvider\n{\n    /**\n     * Register the service provider.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        parent::register('backend');\n\n        $this->registerMailer();\n        $this->registerAssetBundles();\n\n        /*\n         * Backend specific\n         */\n        if (App::runningInBackend()) {\n            $this->registerBackendNavigation();\n            $this->registerBackendReportWidgets();\n            $this->registerBackendWidgets();\n            $this->registerBackendPermissions();\n            $this->registerBackendSettings();\n        }\n    }\n\n    /**\n     * Bootstrap the module events.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        parent::boot('backend');\n    }\n\n    /**\n     * Register mail templates\n     */\n    protected function registerMailer()\n    {\n        MailManager::instance()->registerCallback(function ($manager) {\n            $manager->registerMailTemplates([\n                'backend::mail.invite',\n                'backend::mail.restore',\n            ]);\n        });\n    }\n\n    /**\n     * Register asset bundles\n     */\n    protected function registerAssetBundles()\n    {\n        CombineAssets::registerCallback(function ($combiner) {\n            $combiner->registerBundle('~/modules/backend/assets/less/october.less');\n            $combiner->registerBundle('~/modules/backend/assets/js/october.js');\n            $combiner->registerBundle('~/modules/backend/widgets/table/assets/js/build.js');\n            $combiner->registerBundle('~/modules/backend/widgets/mediamanager/assets/js/mediamanager-browser.js');\n            $combiner->registerBundle('~/modules/backend/widgets/mediamanager/assets/less/mediamanager.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/codeeditor/assets/less/codeeditor.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/repeater/assets/less/repeater.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/codeeditor/assets/js/build.js');\n            $combiner->registerBundle('~/modules/backend/formwidgets/fileupload/assets/less/fileupload.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/nestedform/assets/less/nestedform.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/js/build-plugins.js');\n            $combiner->registerBundle('~/modules/backend/formwidgets/colorpicker/assets/less/colorpicker.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/permissioneditor/assets/less/permissioneditor.less');\n            $combiner->registerBundle('~/modules/backend/formwidgets/markdowneditor/assets/less/markdowneditor.less');\n\n            /*\n             * Rich Editor is protected by DRM\n             */\n            if (file_exists(base_path('modules/backend/formwidgets/richeditor/assets/vendor/froala_drm'))) {\n                $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/less/richeditor.less');\n                $combiner->registerBundle('~/modules/backend/formwidgets/richeditor/assets/js/build.js');\n            }\n        });\n    }\n\n    /*\n     * Register navigation\n     */\n    protected function registerBackendNavigation()\n    {\n        BackendMenu::registerCallback(function ($manager) {\n            $manager->registerMenuItems('October.Backend', [\n                'dashboard' => [\n                    'label'       => 'backend::lang.dashboard.menu_label',\n                    'icon'        => 'icon-dashboard',\n                    'iconSvg'     => 'modules/backend/assets/images/dashboard-icon.svg',\n                    'url'         => Backend::url('backend'),\n                    'permissions' => ['backend.access_dashboard'],\n                    'order'       => 10\n                ],\n                'media' => [\n                    'label'       => 'backend::lang.media.menu_label',\n                    'icon'        => 'icon-folder',\n                    'iconSvg'     => 'modules/backend/assets/images/media-icon.svg',\n                    'url'         => Backend::url('backend/media'),\n                    'permissions' => ['media.*'],\n                    'order'       => 200\n                ]\n            ]);\n        });\n    }\n\n    /*\n     * Register report widgets\n     */\n    protected function registerBackendReportWidgets()\n    {\n        WidgetManager::instance()->registerReportWidgets(function ($manager) {\n            $manager->registerReportWidget(\\Backend\\ReportWidgets\\Welcome::class, [\n                'label'   => 'backend::lang.dashboard.welcome.widget_title_default',\n                'context' => 'dashboard'\n            ]);\n        });\n    }\n\n    /*\n     * Register permissions\n     */\n    protected function registerBackendPermissions()\n    {\n        BackendAuth::registerCallback(function ($manager) {\n            $manager->registerPermissions('October.Backend', [\n                'backend.access_dashboard' => [\n                    'label' => 'system::lang.permissions.view_the_dashboard',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'backend.manage_default_dashboard' => [\n                    'label' => 'system::lang.permissions.manage_default_dashboard',\n                    'tab'   => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'backend.manage_users' => [\n                    'label' => 'system::lang.permissions.manage_other_administrators',\n                    'tab'   => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'backend.impersonate_users' => [\n                    'label' => 'system::lang.permissions.impersonate_users',\n                    'tab'   => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'backend.manage_preferences' => [\n                    'label' => 'system::lang.permissions.manage_preferences',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'backend.manage_editor' => [\n                    'label' => 'system::lang.permissions.manage_editor',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'backend.manage_branding' => [\n                    'label' => 'system::lang.permissions.manage_branding',\n                    'tab'   => 'system::lang.permissions.name',\n                ],\n                'media.manage_media' => [\n                    'label' => 'backend::lang.permissions.manage_media',\n                    'tab' => 'system::lang.permissions.name',\n                ],\n                'backend.allow_unsafe_markdown' => [\n                    'label' => 'backend::lang.permissions.allow_unsafe_markdown',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n            ]);\n        });\n    }\n\n    /*\n     * Register widgets\n     */\n    protected function registerBackendWidgets()\n    {\n        WidgetManager::instance()->registerFormWidgets(function ($manager) {\n            $manager->registerFormWidget('Backend\\FormWidgets\\CodeEditor', 'codeeditor');\n            $manager->registerFormWidget('Backend\\FormWidgets\\RichEditor', 'richeditor');\n            $manager->registerFormWidget('Backend\\FormWidgets\\MarkdownEditor', 'markdown');\n            $manager->registerFormWidget('Backend\\FormWidgets\\FileUpload', 'fileupload');\n            $manager->registerFormWidget('Backend\\FormWidgets\\Relation', 'relation');\n            $manager->registerFormWidget('Backend\\FormWidgets\\DatePicker', 'datepicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\TimePicker', 'timepicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\ColorPicker', 'colorpicker');\n            $manager->registerFormWidget('Backend\\FormWidgets\\DataTable', 'datatable');\n            $manager->registerFormWidget('Backend\\FormWidgets\\RecordFinder', 'recordfinder');\n            $manager->registerFormWidget('Backend\\FormWidgets\\Repeater', 'repeater');\n            $manager->registerFormWidget('Backend\\FormWidgets\\TagList', 'taglist');\n            $manager->registerFormWidget('Backend\\FormWidgets\\MediaFinder', 'mediafinder');\n            $manager->registerFormWidget('Backend\\FormWidgets\\NestedForm', 'nestedform');\n        });\n    }\n\n    /*\n     * Register settings\n     */\n    protected function registerBackendSettings()\n    {\n        SettingsManager::instance()->registerCallback(function ($manager) {\n            $manager->registerSettingItems('October.Backend', [\n                'branding' => [\n                    'label'       => 'backend::lang.branding.menu_label',\n                    'description' => 'backend::lang.branding.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-paint-brush',\n                    'class'       => 'Backend\\Models\\BrandSetting',\n                    'permissions' => ['backend.manage_branding'],\n                    'order'       => 500,\n                    'keywords'    => 'brand style'\n                ],\n                'editor' => [\n                    'label'       => 'backend::lang.editor.menu_label',\n                    'description' => 'backend::lang.editor.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-code',\n                    'class'       => 'Backend\\Models\\EditorSetting',\n                    'permissions' => ['backend.manage_editor'],\n                    'order'       => 500,\n                    'keywords'    => 'html code class style'\n                ],\n                'myaccount' => [\n                    'label'       => 'backend::lang.myaccount.menu_label',\n                    'description' => 'backend::lang.myaccount.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MYSETTINGS,\n                    'icon'        => 'icon-user',\n                    'url'         => Backend::url('backend/users/myaccount'),\n                    'order'       => 500,\n                    'context'     => 'mysettings',\n                    'keywords'    => 'backend::lang.myaccount.menu_keywords'\n                ],\n                'preferences' => [\n                    'label'       => 'backend::lang.backend_preferences.menu_label',\n                    'description' => 'backend::lang.backend_preferences.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MYSETTINGS,\n                    'icon'        => 'icon-laptop',\n                    'url'         => Backend::url('backend/preferences'),\n                    'permissions' => ['backend.manage_preferences'],\n                    'order'       => 510,\n                    'context'     => 'mysettings'\n                ],\n                'access_logs' => [\n                    'label'       => 'backend::lang.access_log.menu_label',\n                    'description' => 'backend::lang.access_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-lock',\n                    'url'         => Backend::url('backend/accesslogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 920\n                ]\n            ]);\n        });\n    }\n}\n", "<?php namespace System;\n\nuse Db;\nuse App;\nuse View;\nuse Event;\nuse Config;\nuse Backend;\nuse Request;\nuse BackendMenu;\nuse BackendAuth;\nuse Backend\\Models\\UserRole;\nuse Twig\\Extension\\SandboxExtension;\nuse Twig\\Environment as TwigEnvironment;\nuse System\\Classes\\MailManager;\nuse System\\Classes\\ErrorHandler;\nuse System\\Classes\\MarkupManager;\nuse System\\Classes\\PluginManager;\nuse System\\Classes\\SettingsManager;\nuse System\\Classes\\UpdateManager;\nuse System\\Twig\\Engine as TwigEngine;\nuse System\\Twig\\Loader as TwigLoader;\nuse System\\Twig\\Extension as TwigExtension;\nuse System\\Twig\\SecurityPolicy as TwigSecurityPolicy;\nuse System\\Models\\EventLog;\nuse System\\Models\\MailSetting;\nuse System\\Classes\\CombineAssets;\nuse Backend\\Classes\\WidgetManager;\nuse October\\Rain\\Support\\ModuleServiceProvider;\nuse October\\Rain\\Router\\Helper as RouterHelper;\nuse Illuminate\\Pagination\\Paginator;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass ServiceProvider extends ModuleServiceProvider\n{\n    /**\n     * Register the service provider.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        parent::register('system');\n\n        $this->registerSingletons();\n        $this->registerPrivilegedActions();\n\n        /*\n         * Register all plugins\n         */\n        PluginManager::instance()->registerAll();\n\n        $this->registerConsole();\n        $this->registerErrorHandler();\n        $this->registerLogging();\n        $this->registerTwigParser();\n        $this->registerMailer();\n        $this->registerMarkupTags();\n        $this->registerAssetBundles();\n        $this->registerValidator();\n        $this->registerGlobalViewVars();\n\n        /*\n         * Register other module providers\n         */\n        foreach (Config::get('cms.loadModules', []) as $module) {\n            if (strtolower(trim($module)) != 'system') {\n                App::register('\\\\' . $module . '\\ServiceProvider');\n            }\n        }\n\n        /*\n         * Backend specific\n         */\n        if (App::runningInBackend()) {\n            $this->registerBackendNavigation();\n            $this->registerBackendReportWidgets();\n            $this->registerBackendPermissions();\n            $this->registerBackendSettings();\n        }\n    }\n\n    /**\n     * Bootstrap the module events.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Fix UTF8MB4 support for MariaDB < 10.2 and MySQL < 5.7\n        $this->applyDatabaseDefaultStringLength();\n\n        // Fix use of Storage::url() for local disks that haven't been configured correctly\n        foreach (Config::get('filesystems.disks') as $key => $config) {\n            if ($config['driver'] === 'local' && ends_with($config['root'], '/storage/app') && empty($config['url'])) {\n                Config::set(\"filesystems.disks.$key.url\", '/storage/app');\n            }\n        }\n\n        Paginator::defaultSimpleView('system::pagination.simple-default');\n\n        /*\n         * Boot plugins\n         */\n        PluginManager::instance()->bootAll();\n\n        parent::boot('system');\n    }\n\n    /**\n     * Register singletons\n     */\n    protected function registerSingletons()\n    {\n        App::singleton('cms.helper', function () {\n            return new \\Cms\\Helpers\\Cms;\n        });\n\n        App::singleton('backend.helper', function () {\n            return new \\Backend\\Helpers\\Backend;\n        });\n\n        App::singleton('backend.menu', function () {\n            return \\Backend\\Classes\\NavigationManager::instance();\n        });\n\n        App::singleton('backend.auth', function () {\n            return \\Backend\\Classes\\AuthManager::instance();\n        });\n    }\n\n    /**\n     * Check for CLI or system/updates route and disable any plugin initialization\n     */\n    protected function registerPrivilegedActions()\n    {\n        $requests = ['/combine/', '@/system/updates', '@/system/install', '@/backend/auth'];\n        $commands = ['october:up', 'october:update'];\n\n        /*\n         * Requests\n         */\n        $path = RouterHelper::normalizeUrl(Request::path());\n        $backendUri = RouterHelper::normalizeUrl(Config::get('cms.backendUri', 'backend'));\n        foreach ($requests as $request) {\n            if (substr($request, 0, 1) == '@') {\n                $request = $backendUri . substr($request, 1);\n            }\n\n            if (stripos($path, $request) === 0) {\n                PluginManager::$noInit = true;\n            }\n        }\n\n        /*\n         * CLI\n         */\n        if (App::runningInConsole() && count(array_intersect($commands, Request::server('argv', []))) > 0) {\n            PluginManager::$noInit = true;\n        }\n    }\n\n    /*\n     * Register markup tags\n     */\n    protected function registerMarkupTags()\n    {\n        MarkupManager::instance()->registerCallback(function ($manager) {\n            $manager->registerFunctions([\n                // Functions\n                'input'          => 'input',\n                'post'           => 'post',\n                'get'            => 'get',\n                'link_to'        => 'link_to',\n                'link_to_asset'  => 'link_to_asset',\n                'link_to_route'  => 'link_to_route',\n                'link_to_action' => 'link_to_action',\n                'asset'          => 'asset',\n                'action'         => 'action',\n                'url'            => 'url',\n                'route'          => 'route',\n                'secure_url'     => 'secure_url',\n                'secure_asset'   => 'secure_asset',\n\n                // Classes\n                'str_*'          => ['Str', '*'],\n                'url_*'          => ['Url', '*'],\n                'html_*'         => ['Html', '*'],\n                'form_*'         => ['Form', '*'],\n                'form_macro'     => ['Form', '__call']\n            ]);\n\n            $manager->registerFilters([\n                // Classes\n                'slug'           => ['Str', 'slug'],\n                'plural'         => ['Str', 'plural'],\n                'singular'       => ['Str', 'singular'],\n                'finish'         => ['Str', 'finish'],\n                'snake'          => ['Str', 'snake'],\n                'camel'          => ['Str', 'camel'],\n                'studly'         => ['Str', 'studly'],\n                'trans'          => ['Lang', 'get'],\n                'transchoice'    => ['Lang', 'choice'],\n                'md'             => ['Markdown', 'parse'],\n                'md_safe'        => ['Markdown', 'parseSafe'],\n                'time_since'     => ['System\\Helpers\\DateTime', 'timeSince'],\n                'time_tense'     => ['System\\Helpers\\DateTime', 'timeTense'],\n            ]);\n        });\n    }\n\n    /**\n     * Register command line specifics\n     */\n    protected function registerConsole()\n    {\n        /*\n         * Allow plugins to use the scheduler\n         */\n        Event::listen('console.schedule', function ($schedule) {\n            // Fix initial system migration with plugins that use settings for scheduling - see #3208\n            if (App::hasDatabase() && !Schema::hasTable(UpdateManager::instance()->getMigrationTableName())) {\n                return;\n            }\n\n            $plugins = PluginManager::instance()->getPlugins();\n            foreach ($plugins as $plugin) {\n                if (method_exists($plugin, 'registerSchedule')) {\n                    $plugin->registerSchedule($schedule);\n                }\n            }\n        });\n\n        /*\n         * Add CMS based cache clearing to native command\n         */\n        Event::listen('cache:cleared', function () {\n            \\System\\Helpers\\Cache::clearInternal();\n        });\n\n        /*\n         * Register console commands\n         */\n        $this->registerConsoleCommand('october.up', 'System\\Console\\OctoberUp');\n        $this->registerConsoleCommand('october.down', 'System\\Console\\OctoberDown');\n        $this->registerConsoleCommand('october.update', 'System\\Console\\OctoberUpdate');\n        $this->registerConsoleCommand('october.util', 'System\\Console\\OctoberUtil');\n        $this->registerConsoleCommand('october.mirror', 'System\\Console\\OctoberMirror');\n        $this->registerConsoleCommand('october.fresh', 'System\\Console\\OctoberFresh');\n        $this->registerConsoleCommand('october.env', 'System\\Console\\OctoberEnv');\n        $this->registerConsoleCommand('october.install', 'System\\Console\\OctoberInstall');\n        $this->registerConsoleCommand('october.passwd', 'System\\Console\\OctoberPasswd');\n\n        $this->registerConsoleCommand('plugin.install', 'System\\Console\\PluginInstall');\n        $this->registerConsoleCommand('plugin.remove', 'System\\Console\\PluginRemove');\n        $this->registerConsoleCommand('plugin.disable', 'System\\Console\\PluginDisable');\n        $this->registerConsoleCommand('plugin.enable', 'System\\Console\\PluginEnable');\n        $this->registerConsoleCommand('plugin.refresh', 'System\\Console\\PluginRefresh');\n        $this->registerConsoleCommand('plugin.rollback', 'System\\Console\\PluginRollback');\n        $this->registerConsoleCommand('plugin.list', 'System\\Console\\PluginList');\n\n        $this->registerConsoleCommand('theme.install', 'System\\Console\\ThemeInstall');\n        $this->registerConsoleCommand('theme.remove', 'System\\Console\\ThemeRemove');\n        $this->registerConsoleCommand('theme.list', 'System\\Console\\ThemeList');\n        $this->registerConsoleCommand('theme.use', 'System\\Console\\ThemeUse');\n        $this->registerConsoleCommand('theme.sync', 'System\\Console\\ThemeSync');\n    }\n\n    /*\n     * Error handling for uncaught Exceptions\n     */\n    protected function registerErrorHandler()\n    {\n        Event::listen('exception.beforeRender', function ($exception, $httpCode, $request) {\n            $handler = new ErrorHandler;\n            return $handler->handleException($exception);\n        });\n    }\n\n    /*\n     * Write all log events to the database\n     */\n    protected function registerLogging()\n    {\n        Event::listen(\\Illuminate\\Log\\Events\\MessageLogged::class, function ($event) {\n            if (EventLog::useLogging()) {\n                EventLog::add($event->message, $event->level);\n            }\n        });\n    }\n\n    /*\n     * Register text twig parser\n     */\n    protected function registerTwigParser()\n    {\n        /*\n         * Register system Twig environment\n         */\n        App::singleton('twig.environment', function ($app) {\n            $twig = new TwigEnvironment(new TwigLoader, ['auto_reload' => true]);\n            $twig->addExtension(new TwigExtension);\n            $twig->addExtension(new SandboxExtension(new TwigSecurityPolicy, true));\n            return $twig;\n        });\n\n        /*\n         * Register .htm extension for Twig views\n         */\n        App::make('view')->addExtension('htm', 'twig', function () {\n            return new TwigEngine(App::make('twig.environment'));\n        });\n    }\n\n    /**\n     * Register mail templating and settings override.\n     */\n    protected function registerMailer()\n    {\n        /*\n         * Register system layouts\n         */\n        MailManager::instance()->registerCallback(function ($manager) {\n            $manager->registerMailLayouts([\n                'default' => 'system::mail.layout-default',\n                'system' => 'system::mail.layout-system',\n            ]);\n\n            $manager->registerMailPartials([\n                'header' => 'system::mail.partial-header',\n                'footer' => 'system::mail.partial-footer',\n                'button' => 'system::mail.partial-button',\n                'panel' => 'system::mail.partial-panel',\n                'table' => 'system::mail.partial-table',\n                'subcopy' => 'system::mail.partial-subcopy',\n                'promotion' => 'system::mail.partial-promotion',\n            ]);\n        });\n\n        /*\n         * Override system mailer with mail settings\n         */\n        Event::listen('mailer.beforeRegister', function () {\n            if (MailSetting::isConfigured()) {\n                MailSetting::applyConfigValues();\n            }\n        });\n\n        /*\n         * Override standard Mailer content with template\n         */\n        Event::listen('mailer.beforeAddContent', function ($mailer, $message, $view, $data, $raw, $plain) {\n            $method = $raw === null ? 'addContentToMailer' : 'addRawContentToMailer';\n            $plainOnly = $view === null; // When \"plain-text only\" email is sent, $view is null, this sets the flag appropriately\n            return !MailManager::instance()->$method($message, $raw ?: $view ?: $plain, $data, $plainOnly);\n        });\n    }\n\n    /*\n     * Register navigation\n     */\n    protected function registerBackendNavigation()\n    {\n        BackendMenu::registerCallback(function ($manager) {\n            $manager->registerMenuItems('October.System', [\n                'system' => [\n                    'label'       => 'system::lang.settings.menu_label',\n                    'icon'        => 'icon-cog',\n                    'iconSvg'     => 'modules/system/assets/images/cog-icon.svg',\n                    'url'         => Backend::url('system/settings'),\n                    'permissions' => [],\n                    'order'       => 1000\n                ]\n            ]);\n        });\n\n        /*\n         * Register the sidebar for the System main menu\n         */\n        BackendMenu::registerContextSidenavPartial(\n            'October.System',\n            'system',\n            '~/modules/system/partials/_system_sidebar.htm'\n        );\n\n        /*\n         * Remove the October.System.system main menu item if there is no subpages to display\n         */\n        Event::listen('backend.menu.extendItems', function ($manager) {\n            $systemSettingItems = SettingsManager::instance()->listItems('system');\n            $systemMenuItems = $manager->listSideMenuItems('October.System', 'system');\n\n            if (empty($systemSettingItems) && empty($systemMenuItems)) {\n                $manager->removeMainMenuItem('October.System', 'system');\n            }\n        }, -9999);\n    }\n\n    /*\n     * Register report widgets\n     */\n    protected function registerBackendReportWidgets()\n    {\n        WidgetManager::instance()->registerReportWidgets(function ($manager) {\n            $manager->registerReportWidget(\\System\\ReportWidgets\\Status::class, [\n                'label'   => 'backend::lang.dashboard.status.widget_title_default',\n                'context' => 'dashboard'\n            ]);\n        });\n    }\n\n    /*\n     * Register permissions\n     */\n    protected function registerBackendPermissions()\n    {\n        BackendAuth::registerCallback(function ($manager) {\n            $manager->registerPermissions('October.System', [\n                'system.manage_updates' => [\n                    'label' => 'system::lang.permissions.manage_software_updates',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'system.access_logs' => [\n                    'label' => 'system::lang.permissions.access_logs',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'system.manage_mail_settings' => [\n                    'label' => 'system::lang.permissions.manage_mail_settings',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ],\n                'system.manage_mail_templates' => [\n                    'label' => 'system::lang.permissions.manage_mail_templates',\n                    'tab' => 'system::lang.permissions.name',\n                    'roles' => UserRole::CODE_DEVELOPER,\n                ]\n            ]);\n        });\n    }\n\n    /*\n     * Register settings\n     */\n    protected function registerBackendSettings()\n    {\n        Event::listen('system.settings.extendItems', function ($manager) {\n            \\System\\Models\\LogSetting::filterSettingItems($manager);\n        });\n\n        SettingsManager::instance()->registerCallback(function ($manager) {\n            $manager->registerSettingItems('October.System', [\n                'updates' => [\n                    'label'       => 'system::lang.updates.menu_label',\n                    'description' => 'system::lang.updates.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-cloud-download',\n                    'url'         => Backend::url('system/updates'),\n                    'permissions' => ['system.manage_updates'],\n                    'order'       => 300\n                ],\n                'administrators' => [\n                    'label'       => 'backend::lang.user.menu_label',\n                    'description' => 'backend::lang.user.menu_description',\n                    'category'    => SettingsManager::CATEGORY_SYSTEM,\n                    'icon'        => 'icon-users',\n                    'url'         => Backend::url('backend/users'),\n                    'permissions' => ['backend.manage_users'],\n                    'order'       => 400\n                ],\n                'mail_templates' => [\n                    'label'       => 'system::lang.mail_templates.menu_label',\n                    'description' => 'system::lang.mail_templates.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-envelope-square',\n                    'url'         => Backend::url('system/mailtemplates'),\n                    'permissions' => ['system.manage_mail_templates'],\n                    'order'       => 610\n                ],\n                'mail_settings' => [\n                    'label'       => 'system::lang.mail.menu_label',\n                    'description' => 'system::lang.mail.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-envelope',\n                    'class'       => 'System\\Models\\MailSetting',\n                    'permissions' => ['system.manage_mail_settings'],\n                    'order'       => 620\n                ],\n                'mail_brand_settings' => [\n                    'label'       => 'system::lang.mail_brand.menu_label',\n                    'description' => 'system::lang.mail_brand.menu_description',\n                    'category'    => SettingsManager::CATEGORY_MAIL,\n                    'icon'        => 'icon-paint-brush',\n                    'url'         => Backend::url('system/mailbrandsettings'),\n                    'permissions' => ['system.manage_mail_templates'],\n                    'order'       => 630\n                ],\n                'event_logs' => [\n                    'label'       => 'system::lang.event_log.menu_label',\n                    'description' => 'system::lang.event_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-exclamation-triangle',\n                    'url'         => Backend::url('system/eventlogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 900,\n                    'keywords'    => 'error exception'\n                ],\n                'request_logs' => [\n                    'label'       => 'system::lang.request_log.menu_label',\n                    'description' => 'system::lang.request_log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-file-o',\n                    'url'         => Backend::url('system/requestlogs'),\n                    'permissions' => ['system.access_logs'],\n                    'order'       => 910,\n                    'keywords'    => '404 error'\n                ],\n                'log_settings' => [\n                    'label'       => 'system::lang.log.menu_label',\n                    'description' => 'system::lang.log.menu_description',\n                    'category'    => SettingsManager::CATEGORY_LOGS,\n                    'icon'        => 'icon-dot-circle-o',\n                    'class'       => 'System\\Models\\LogSetting',\n                    'permissions' => ['system.manage_logs'],\n                    'order'       => 990\n                ],\n            ]);\n        });\n    }\n\n    /**\n     * Register asset bundles\n     */\n    protected function registerAssetBundles()\n    {\n        /*\n         * Register asset bundles\n         */\n        CombineAssets::registerCallback(function ($combiner) {\n            $combiner->registerBundle('~/modules/system/assets/less/styles.less');\n            $combiner->registerBundle('~/modules/system/assets/ui/storm.less');\n            $combiner->registerBundle('~/modules/system/assets/ui/storm.js');\n            $combiner->registerBundle('~/modules/system/assets/js/framework.js');\n            $combiner->registerBundle('~/modules/system/assets/js/framework.combined.js');\n            $combiner->registerBundle('~/modules/system/assets/css/framework.extras.css');\n        });\n    }\n\n    /**\n     * Extends the validator with custom rules\n     */\n    protected function registerValidator()\n    {\n        $this->app->resolving('validator', function ($validator) {\n            /*\n             * Allowed file extensions, as opposed to mime types.\n             * - extensions: png,jpg,txt\n             */\n            $validator->extend('extensions', function ($attribute, $value, $parameters) {\n                $extension = strtolower($value->getClientOriginalExtension());\n                return in_array($extension, $parameters);\n            });\n\n            $validator->replacer('extensions', function ($message, $attribute, $rule, $parameters) {\n                return strtr($message, [':values' => implode(', ', $parameters)]);\n            });\n        });\n    }\n\n    protected function registerGlobalViewVars()\n    {\n        View::share('appName', Config::get('app.name'));\n    }\n\n    /**\n     * Fix UTF8MB4 support for old versions of MariaDB (<10.2) and MySQL (<5.7)\n     */\n    protected function applyDatabaseDefaultStringLength()\n    {\n        if (Db::getDriverName() !== 'mysql') {\n            return;\n        }\n\n        $defaultStrLen = Db::getConfig('varcharmax');\n\n        if ($defaultStrLen === null && Db::getConfig('charset') === 'utf8mb4') {\n            $defaultStrLen = 191;\n        }\n\n        if ($defaultStrLen !== null) {\n            Schema::defaultStringLength((int) $defaultStrLen);\n        }\n    }\n}\n"], "filenames": ["modules/backend/ServiceProvider.php", "modules/system/ServiceProvider.php"], "buggy_code_start_loc": [143, 11], "buggy_code_end_loc": [168, 433], "fixing_code_start_loc": [143, 12], "fixing_code_end_loc": [171, 438], "type": "CWE-269", "message": "October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. In October CMS from version 1.0.319 and before version 1.0.470, backend users with the default \"Publisher\" system role have access to create & manage users where they can choose which role the new user has. This means that a user with \"Publisher\" access has the ability to escalate their access to \"Developer\" access. Issue has been patched in Build 470 (v1.0.470) & v1.1.1.", "other": {"cve": {"id": "CVE-2020-15248", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-23T20:15:12.463", "lastModified": "2021-11-18T16:28:40.320", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. In October CMS from version 1.0.319 and before version 1.0.470, backend users with the default \"Publisher\" system role have access to create & manage users where they can choose which role the new user has. This means that a user with \"Publisher\" access has the ability to escalate their access to \"Developer\" access. Issue has been patched in Build 470 (v1.0.470) & v1.1.1."}, {"lang": "es", "value": "October es una plataforma CMS gratuita, de c\u00f3digo abierto y autohosteada basada en Laravel PHP Framework.&#xa0;En October CMS desde la versi\u00f3n 1.0.319 y anterior a versi\u00f3n 1.0.470, los usuarios de backend con el rol de sistema \"Publisher\" predeterminado tienen acceso para crear y administrar usuarios donde pueden elegir qu\u00e9 rol tiene el nuevo usuario.&#xa0;Esto significa que un usuario con acceso de \"Publisher\" tiene la capacidad de escalar su acceso al acceso de \"Developer\".&#xa0;El problema se ha corregido en Build 470 (versi\u00f3n v1.0.470) y versi\u00f3n v1.1.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 3.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.319", "versionEndExcluding": "1.0.469", "matchCriteriaId": "ABEFA590-9054-45DD-A177-D5EBEA49C5B7"}]}]}], "references": [{"url": "https://github.com/octobercms/october/commit/78a37298a4ed4602b383522344a31e311402d829", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/security/advisories/GHSA-rfjc-xrmf-5vvw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/octobercms/october/commit/78a37298a4ed4602b383522344a31e311402d829"}}