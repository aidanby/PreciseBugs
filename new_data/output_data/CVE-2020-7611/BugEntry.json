{"buggy_code": ["/*\n * Copyright 2017-2019 original authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.micronaut.http.netty;\n\nimport io.micronaut.core.annotation.Internal;\nimport io.micronaut.core.convert.ArgumentConversionContext;\nimport io.micronaut.core.convert.ConversionService;\nimport io.micronaut.http.MutableHttpHeaders;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\n\n/**\n * Delegates to Netty's {@link io.netty.handler.codec.http.HttpHeaders}.\n *\n * @author Graeme Rocher\n * @since 1.0\n */\n@Internal\npublic class NettyHttpHeaders implements MutableHttpHeaders {\n\n    io.netty.handler.codec.http.HttpHeaders nettyHeaders;\n    final ConversionService<?> conversionService;\n\n    /**\n     * @param nettyHeaders      The Netty Http headers\n     * @param conversionService The conversion service\n     */\n    public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, ConversionService conversionService) {\n        this.nettyHeaders = nettyHeaders;\n        this.conversionService = conversionService;\n    }\n\n    /**\n     * Default constructor.\n     */\n    public NettyHttpHeaders() {\n        this.nettyHeaders = new DefaultHttpHeaders(false);\n        this.conversionService = ConversionService.SHARED;\n    }\n\n    /**\n     * @return The underlying Netty headers.\n     */\n    public io.netty.handler.codec.http.HttpHeaders getNettyHeaders() {\n        return nettyHeaders;\n    }\n\n    /**\n     * Sets the underlying netty headers.\n     *\n     * @param headers The Netty http headers\n     */\n    void setNettyHeaders(io.netty.handler.codec.http.HttpHeaders headers) {\n        this.nettyHeaders = headers;\n    }\n\n    @Override\n    public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {\n        List<String> values = nettyHeaders.getAll(name);\n        if (values.size() > 0) {\n            if (values.size() == 1 || !isCollectionOrArray(conversionContext.getArgument().getType())) {\n                return conversionService.convert(values.get(0), conversionContext);\n            } else {\n                return conversionService.convert(values, conversionContext);\n            }\n        }\n        return Optional.empty();\n    }\n\n    private boolean isCollectionOrArray(Class<?> clazz) {\n        return clazz.isArray() || Collection.class.isAssignableFrom(clazz);\n    }\n\n    @Override\n    public List<String> getAll(CharSequence name) {\n        return nettyHeaders.getAll(name);\n    }\n\n    @Override\n    public Set<String> names() {\n        return nettyHeaders.names();\n    }\n\n    @Override\n    public Collection<List<String>> values() {\n        Set<String> names = names();\n        List<List<String>> values = new ArrayList<>();\n        for (String name : names) {\n            values.add(getAll(name));\n        }\n        return Collections.unmodifiableList(values);\n    }\n\n    @Override\n    public String get(CharSequence name) {\n        return nettyHeaders.get(name);\n    }\n\n    @Override\n    public MutableHttpHeaders add(CharSequence header, CharSequence value) {\n        nettyHeaders.add(header, value);\n        return this;\n    }\n\n    @Override\n    public MutableHttpHeaders remove(CharSequence header) {\n        nettyHeaders.remove(header);\n        return this;\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2017-2019 original authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.micronaut.http.netty;\n\nimport io.micronaut.core.annotation.Internal;\nimport io.micronaut.core.convert.ArgumentConversionContext;\nimport io.micronaut.core.convert.ConversionService;\nimport io.micronaut.http.MutableHttpHeaders;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\n\n/**\n * Delegates to Netty's {@link io.netty.handler.codec.http.HttpHeaders}.\n *\n * @author Graeme Rocher\n * @since 1.0\n */\n@Internal\npublic class NettyHttpHeaders implements MutableHttpHeaders {\n\n    io.netty.handler.codec.http.HttpHeaders nettyHeaders;\n    final ConversionService<?> conversionService;\n\n    /**\n     * @param nettyHeaders      The Netty Http headers\n     * @param conversionService The conversion service\n     */\n    public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, ConversionService conversionService) {\n        this.nettyHeaders = nettyHeaders;\n        this.conversionService = conversionService;\n    }\n\n    /**\n     * Default constructor.\n     */\n    public NettyHttpHeaders() {\n        this.nettyHeaders = new DefaultHttpHeaders();\n        this.conversionService = ConversionService.SHARED;\n    }\n\n    /**\n     * @return The underlying Netty headers.\n     */\n    public io.netty.handler.codec.http.HttpHeaders getNettyHeaders() {\n        return nettyHeaders;\n    }\n\n    /**\n     * Sets the underlying netty headers.\n     *\n     * @param headers The Netty http headers\n     */\n    void setNettyHeaders(io.netty.handler.codec.http.HttpHeaders headers) {\n        this.nettyHeaders = headers;\n    }\n\n    @Override\n    public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {\n        List<String> values = nettyHeaders.getAll(name);\n        if (values.size() > 0) {\n            if (values.size() == 1 || !isCollectionOrArray(conversionContext.getArgument().getType())) {\n                return conversionService.convert(values.get(0), conversionContext);\n            } else {\n                return conversionService.convert(values, conversionContext);\n            }\n        }\n        return Optional.empty();\n    }\n\n    private boolean isCollectionOrArray(Class<?> clazz) {\n        return clazz.isArray() || Collection.class.isAssignableFrom(clazz);\n    }\n\n    @Override\n    public List<String> getAll(CharSequence name) {\n        return nettyHeaders.getAll(name);\n    }\n\n    @Override\n    public Set<String> names() {\n        return nettyHeaders.names();\n    }\n\n    @Override\n    public Collection<List<String>> values() {\n        Set<String> names = names();\n        List<List<String>> values = new ArrayList<>();\n        for (String name : names) {\n            values.add(getAll(name));\n        }\n        return Collections.unmodifiableList(values);\n    }\n\n    @Override\n    public String get(CharSequence name) {\n        return nettyHeaders.get(name);\n    }\n\n    @Override\n    public MutableHttpHeaders add(CharSequence header, CharSequence value) {\n        nettyHeaders.add(header, value);\n        return this;\n    }\n\n    @Override\n    public MutableHttpHeaders remove(CharSequence header) {\n        nettyHeaders.remove(header);\n        return this;\n    }\n}\n"], "filenames": ["http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java"], "buggy_code_start_loc": [56], "buggy_code_end_loc": [57], "fixing_code_start_loc": [56], "fixing_code_end_loc": [57], "type": "CWE-444", "message": "All versions of io.micronaut:micronaut-http-client before 1.2.11 and all versions from 1.3.0 before 1.3.2 are vulnerable to HTTP Request Header Injection due to not validating request headers passed to the client.", "other": {"cve": {"id": "CVE-2020-7611", "sourceIdentifier": "report@snyk.io", "published": "2020-03-30T22:15:15.603", "lastModified": "2020-04-02T14:37:04.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "All versions of io.micronaut:micronaut-http-client before 1.2.11 and all versions from 1.3.0 before 1.3.2 are vulnerable to HTTP Request Header Injection due to not validating request headers passed to the client."}, {"lang": "es", "value": "Todas las versiones de io.micronaut:micronaut-http-client versiones anteriores a 1.2.11 y todas las versiones desde 1.3.0 anteriores a 1.3.2, son vulnerables a una Inyecci\u00f3n de Encabezado de Petici\u00f3n HTTP, debido a que no comprueban los encabezados de petici\u00f3n pasados hacia el cliente."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-444"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:objectcomputing:micronaut:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.11", "matchCriteriaId": "1656466B-C668-4299-A9DB-0BEECB5E411E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:objectcomputing:micronaut:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.3.0", "versionEndExcluding": "1.3.2", "matchCriteriaId": "EE50BE0B-0114-430D-B00D-E5BD503BFD96"}]}]}], "references": [{"url": "https://github.com/micronaut-projects/micronaut-core/commit/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://github.com/micronaut-projects/micronaut-core/security/advisories/GHSA-694p-xrhg-x3wm", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-IOMICRONAUT-561342", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1"}}