{"buggy_code": ["<?php\n/**\n * Abstract action controller file.\n *\n * @package   Controller\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n */\n\nnamespace App\\Controller;\n\n/**\n * Abstract action controller class.\n */\nabstract class Action extends Base\n{\n\t/** {@inheritdoc} */\n\tpublic $csrfActive = false;\n\n\t/**\n\t * Process action.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function process(\\App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function validateRequest(\\App\\Request $request)\n\t{\n\t\t$request->validateWriteAccess();\n\t}\n}\n", "<?php\n/**\n * Abstract base controller file.\n *\n * @package   Controller\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n */\n\nnamespace App\\Controller;\n\n/**\n * Abstract base controller class.\n */\nabstract class Base\n{\n\t/** @var \\App\\Headers Headers instance. */\n\tpublic $headers;\n\t/**\n\t * CSRF is active?.\n\t *\n\t * @var bool\n\t */\n\tpublic $csrfActive = true;\n\n\t/**\n\t * Activated language locale.\n\t *\n\t * @var bool\n\t */\n\tprotected static $activatedLocale = false;\n\t/**\n\t * Activated csrf.\n\t *\n\t * @var bool\n\t */\n\tprotected static $activatedCsrf = false;\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->headers = \\App\\Controller\\Headers::getInstance();\n\t\tif (!self::$activatedLocale && \\App\\Config::performance('CHANGE_LOCALE')) {\n\t\t\t\\App\\Language::initLocale();\n\t\t\tself::$activatedLocale = true;\n\t\t}\n\t\tif (!self::$activatedCsrf) {\n\t\t\tif ($this->csrfActive && \\App\\Config::security('csrfActive')) {\n\t\t\t\trequire_once 'config/csrf_config.php';\n\t\t\t\t\\CsrfMagic\\Csrf::init();\n\t\t\t\t$this->csrfActive = true;\n\t\t\t} else {\n\t\t\t\t$this->csrfActive = false;\n\t\t\t}\n\t\t\tself::$activatedCsrf = true;\n\t\t}\n\t}\n\n\t/**\n\t * Function to check login required permission.\n\t *\n\t * @return bool\n\t */\n\tpublic function loginRequired()\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Function to check permission.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tabstract public function checkPermission(\\App\\Request $request);\n\n\t/**\n\t * Process function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tabstract public function process(\\App\\Request $request);\n\n\t/**\n\t * Function to validate request method.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function validateRequest(\\App\\Request $request)\n\t{\n\t\t$request->validateReadAccess();\n\t}\n\n\t/**\n\t * Pre process ajax function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function preProcessAjax(\\App\\Request $request)\n\t{\n\t}\n\n\t/**\n\t * Pre process function.\n\t *\n\t * @param \\App\\Request $request\n\t * @param bool         $display\n\t */\n\tpublic function preProcess(\\App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/**\n\t * Post process function.\n\t *\n\t * @param \\App\\Request $request\n\t * @param bool         $display\n\t */\n\tpublic function postProcess(\\App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/**\n\t * Post process ajax function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function postProcessAjax(\\App\\Request $request)\n\t{\n\t}\n\n\t/**\n\t * Send headers.\n\t */\n\tpublic function sendHeaders()\n\t{\n\t\t$this->headers->send();\n\t}\n\n\t/**\n\t * Function to check if session is extended.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return bool\n\t */\n\tpublic function isSessionExtend(\\App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n}\n", "<?php\n/**\n * Request basic class.\n *\n * @package App\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App;\n\n/**\n * Request basic class.\n */\nclass Request\n{\n\t/**\n\t * Raw request data.\n\t *\n\t * @var array\n\t */\n\tprotected $rawValues = [];\n\n\t/**\n\t * Headers request.\n\t *\n\t * @var array\n\t */\n\tprotected $headers;\n\n\t/**\n\t * Self instance.\n\t *\n\t * @var Request\n\t */\n\tprotected static $request;\n\n\t/**\n\t * Purified request values for get.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByGet = [];\n\n\t/**\n\t * Purified request values for type.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByType = [];\n\n\t/**\n\t * Purified request values for integer.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByInteger = [];\n\n\t/**\n\t * Purified request values for array.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByArray = [];\n\n\t/**\n\t * Purified request values for exploded.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByExploded = [];\n\n\t/**\n\t * Purified request values for multi dimension array.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByMultiDimension = [];\n\n\t/**\n\t * Purified request values for date range.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByDateRange = [];\n\n\t/**\n\t * Purified request values for date html.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByHtml = [];\n\t/**\n\t * List of headings and sanitization methods.\n\t *\n\t * @var array\n\t */\n\tpublic $headersPurifierMap = [\n\t];\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $rawValues\n\t * @param bool  $overwrite\n\t */\n\tpublic function __construct($rawValues, $overwrite = true)\n\t{\n\t\t$this->rawValues = $rawValues;\n\t\tif ($overwrite) {\n\t\t\tstatic::$request = $this;\n\t\t}\n\t}\n\n\t/**\n\t * Function to get the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value Default value\n\t *\n\t * @return mixed\n\t */\n\tpublic function get($key, $value = '')\n\t{\n\t\tif (isset($this->purifiedValuesByGet[$key])) {\n\t\t\treturn $this->purifiedValuesByGet[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t} else {\n\t\t\treturn $value;\n\t\t}\n\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t$decodeValue = Json::decode($value);\n\t\t\tif (isset($decodeValue)) {\n\t\t\t\t$value = $decodeValue;\n\t\t\t}\n\t\t}\n\t\tif ($value) {\n\t\t\t$value = Purifier::purify($value);\n\t\t}\n\n\t\treturn $this->purifiedValuesByGet[$key] = $value;\n\t}\n\n\t/**\n\t * Purify by data type.\n\t *\n\t * Type list:\n\t * Standard - only words\n\t * 1 - only words\n\t * Alnum - word and int\n\t * 2 - word and int\n\t *\n\t * @param string     $key     Key name\n\t * @param int|string $type    Data type that is only acceptable, default only words 'Standard'\n\t * @param mixed      $convert\n\t *\n\t * @return bool|mixed\n\t */\n\tpublic function getByType($key, $type = 'Standard', $convert = false)\n\t{\n\t\tif (isset($this->purifiedValuesByType[$key][$type])) {\n\t\t\treturn $this->purifiedValuesByType[$key][$type];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\treturn $this->purifiedValuesByType[$key][$type] = Purifier::purifyByType($this->rawValues[$key], $type, $convert);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to get the boolean value for a given key.\n\t *\n\t * @param string $key\n\t * @param bool   $defaultValue Default value\n\t *\n\t * @return bool\n\t */\n\tpublic function getBoolean(string $key, bool $defaultValue = null)\n\t{\n\t\t$value = $this->get($key, $defaultValue);\n\t\tif (\\is_bool($value)) {\n\t\t\treturn $value;\n\t\t}\n\t\treturn 0 === strcasecmp('true', (string) $value) || '1' === (string) $value;\n\t}\n\n\t/**\n\t * Function to get the integer value for a given key.\n\t *\n\t * @param string $key\n\t * @param int    $value\n\t *\n\t * @return int\n\t */\n\tpublic function getInteger($key, $value = 0)\n\t{\n\t\tif (isset($this->purifiedValuesByInteger[$key])) {\n\t\t\treturn $this->purifiedValuesByInteger[$key];\n\t\t}\n\t\tif (!isset($this->rawValues[$key])) {\n\t\t\treturn $value;\n\t\t}\n\t\tif (false !== ($value = filter_var($this->rawValues[$key], FILTER_VALIDATE_INT))) {\n\t\t\treturn $this->purifiedValuesByInteger[$key] = $value;\n\t\t}\n\n\t\tthrow new \\App\\Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||$key||{$this->rawValues[$key]}\", 406);\n\t}\n\n\t/**\n\t * Function to get the array values for a given key.\n\t *\n\t * @param string      $key\n\t * @param mixed       $type\n\t * @param array       $value\n\t * @param string|null $keyType\n\t *\n\t * @return array\n\t */\n\tpublic function getArray($key, $type = false, $value = [], ?string $keyType = null)\n\t{\n\t\tif (isset($this->purifiedValuesByArray[$key])) {\n\t\t\treturn $this->purifiedValuesByArray[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t\tif (!$value) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t\t$decodeValue = Json::decode($value);\n\t\t\t\tif (isset($decodeValue)) {\n\t\t\t\t\t$value = $decodeValue;\n\t\t\t\t} else {\n\t\t\t\t\t\\App\\Log::warning('Invalid data format, problem encountered while decoding JSON. Data should be in JSON format. Data: ' . $value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($value) {\n\t\t\t\tif (\\is_array($value)) {\n\t\t\t\t\t$input = [];\n\t\t\t\t\tforeach ($value as $k => $v) {\n\t\t\t\t\t\tif (!\\is_int($k)) {\n\t\t\t\t\t\t\t$k = $keyType ? Purifier::purifyByType($k, $keyType) : Purifier::purify($k);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$input[$k] = $type ? Purifier::purifyByType($v, $type) : Purifier::purify($v);\n\t\t\t\t\t}\n\t\t\t\t\t$value = $input;\n\t\t\t\t} else {\n\t\t\t\t\t$value = $type ? Purifier::purifyByType($value, $type) : Purifier::purify($value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $this->purifiedValuesByArray[$key] = (array) $value;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Function to get the exploded values for a given key.\n\t *\n\t * @param string      $key\n\t * @param string      $delimiter\n\t * @param bool|string $type\n\t *\n\t * @return array\n\t */\n\tpublic function getExploded($key, $delimiter = ',', $type = false)\n\t{\n\t\tif (isset($this->purifiedValuesByExploded[$key])) {\n\t\t\treturn $this->purifiedValuesByExploded[$key];\n\t\t}\n\t\t$value = [];\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\tif ('' === $this->rawValues[$key]) {\n\t\t\t\treturn $value;\n\t\t\t}\n\t\t\t$value = explode($delimiter, $this->rawValues[$key]);\n\t\t\tif ($value) {\n\t\t\t\t$value = $type ? Purifier::purifyByType($value, $type) : Purifier::purify($value);\n\t\t\t}\n\n\t\t\treturn $this->purifiedValuesByExploded[$key] = $value;\n\t\t}\n\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Purify multi dimension array.\n\t *\n\t * @param mixed        $values\n\t * @param array|string $template\n\t *\n\t * @throws \\App\\Exceptions\\IllegalValue\n\t *\n\t * @return mixed\n\t */\n\tprivate function purifyMultiDimensionArray($values, $template)\n\t{\n\t\tif (\\is_array($template)) {\n\t\t\tforeach ($values as $firstKey => $value) {\n\t\t\t\tif (\\is_array($value)) {\n\t\t\t\t\tif (1 === \\count($template)) {\n\t\t\t\t\t\t$template = current($template);\n\t\t\t\t\t}\n\t\t\t\t\tforeach ($value as $secondKey => $val) {\n\t\t\t\t\t\t$tempTemplate = $template;\n\t\t\t\t\t\tif (isset($template[$firstKey])) {\n\t\t\t\t\t\t\t$tempTemplate = $template[$firstKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (1 === \\count($tempTemplate)) {\n\t\t\t\t\t\t\t$tempTemplate = current($tempTemplate);\n\t\t\t\t\t\t} elseif (!isset($tempTemplate[$secondKey])) {\n\t\t\t\t\t\t\tthrow new Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||{$secondKey}\", 406);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$tempTemplate = $tempTemplate[$secondKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$values[$firstKey][$secondKey] = $this->purifyMultiDimensionArray($val, $tempTemplate);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (\\is_array($template) && 1 === \\count($template)) {\n\t\t\t\t\t\t$values[$firstKey] = $this->purifyMultiDimensionArray($value, current($template));\n\t\t\t\t\t} elseif (isset($template[$firstKey])) {\n\t\t\t\t\t\t$values[$firstKey] = $this->purifyMultiDimensionArray($value, $template[$firstKey]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||{$firstKey}||\" . print_r($template, true), 406);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$values = empty($values) ? $values : ($template ? Purifier::purifyByType($values, $template) : Purifier::purify($values));\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * Function to get multi dimension array.\n\t *\n\t * @param string $key\n\t * @param array  $template\n\t *\n\t * @return array\n\t */\n\tpublic function getMultiDimensionArray(string $key, array $template): array\n\t{\n\t\t$return = [];\n\t\tif (isset($this->purifiedValuesByMultiDimension[$key])) {\n\t\t\t$return = $this->purifiedValuesByMultiDimension[$key];\n\t\t} elseif (isset($this->rawValues[$key]) && ($value = $this->rawValues[$key])) {\n\t\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t\t$decodeValue = Json::decode($value);\n\t\t\t\tif (null !== $decodeValue) {\n\t\t\t\t\t$value = $decodeValue;\n\t\t\t\t} else {\n\t\t\t\t\tLog::warning('Invalid data format, problem encountered while decoding JSON. Data should be in JSON format. Data: ' . $value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value = (array) $this->purifyMultiDimensionArray($value, $template);\n\t\t\t$return = $this->purifiedValuesByMultiDimension[$key] = $value;\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Function to get the date range values for a given key.\n\t *\n\t * @param string $key request param like 'createdtime'\n\t *\n\t * @return array\n\t */\n\tpublic function getDateRange($key)\n\t{\n\t\treturn $this->getByType($key, 'DateRangeUserFormat');\n\t}\n\n\t/**\n\t * Function to get html the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value\n\t *\n\t * @return mixed\n\t */\n\tpublic function getForHtml($key, $value = '')\n\t{\n\t\tif (isset($this->purifiedValuesByHtml[$key])) {\n\t\t\treturn $this->purifiedValuesByHtml[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t}\n\t\tif ($value) {\n\t\t\t$value = \\App\\Purifier::purifyHtml($value);\n\t\t}\n\n\t\treturn $this->purifiedValuesByHtml[$key] = $value;\n\t}\n\n\t/**\n\t * Function to get the value if its safe to use for SQL Query (column).\n\t *\n\t * @param string $key\n\t * @param bool   $skipEmtpy\n\t *\n\t * @return string\n\t */\n\tpublic function getForSql($key, $skipEmtpy = true)\n\t{\n\t\treturn Purifier::purifySql($this->get($key), $skipEmtpy);\n\t}\n\n\t/**\n\t * Function to get the request mode.\n\t *\n\t * @return string\n\t */\n\tpublic function getMode()\n\t{\n\t\treturn '' !== $this->getRaw('mode') ? $this->getByType('mode', 'Alnum') : '';\n\t}\n\n\t/**\n\t * Get all data.\n\t *\n\t * @return array\n\t */\n\tpublic function getAll()\n\t{\n\t\tforeach ($this->rawValues as $key => $value) {\n\t\t\t$this->get($key);\n\t\t}\n\n\t\treturn $this->purifiedValuesByGet;\n\t}\n\n\t/**\n\t * Get all raw data.\n\t *\n\t * @return array\n\t */\n\tpublic function getAllRaw()\n\t{\n\t\treturn $this->rawValues;\n\t}\n\n\t/**\n\t * Get raw value.\n\t *\n\t * @param string $key\n\t * @param mixed  $defaultValue\n\t *\n\t * @return mixed\n\t */\n\tpublic function getRaw($key, $defaultValue = '')\n\t{\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\treturn $this->rawValues[$key];\n\t\t}\n\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Get all headers.\n\t *\n\t * @return string[]\n\t */\n\tpublic function getHeaders()\n\t{\n\t\tif (isset($this->headers)) {\n\t\t\treturn $this->headers;\n\t\t}\n\t\t$data = array_change_key_case(getallheaders(), CASE_LOWER);\n\t\tforeach ($data as $key => &$value) {\n\t\t\tif ('' !== $value) {\n\t\t\t\t$value = isset($this->headersPurifierMap[$key]) ? Purifier::purifyByType($value, $this->headersPurifierMap[$key]) : Purifier::purify($value);\n\t\t\t}\n\t\t}\n\t\treturn $this->headers = $data;\n\t}\n\n\t/**\n\t * Get header for a given key.\n\t *\n\t * @param string $key\n\t *\n\t * @return string\n\t */\n\tpublic function getHeader($key)\n\t{\n\t\tif (!isset($this->headers)) {\n\t\t\t$this->getHeaders();\n\t\t}\n\t\treturn $this->headers[$key] ?? null;\n\t}\n\n\t/**\n\t * Get request method.\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t *\n\t * @return string\n\t */\n\tpublic static function getRequestMethod()\n\t{\n\t\t$method = $_SERVER['REQUEST_METHOD'];\n\t\tif ('POST' === $method && isset($_SERVER['HTTP_X_HTTP_METHOD'])) {\n\t\t\tif ('DELETE' === $_SERVER['HTTP_X_HTTP_METHOD']) {\n\t\t\t\t$method = 'DELETE';\n\t\t\t} elseif ('PUT' === $_SERVER['HTTP_X_HTTP_METHOD']) {\n\t\t\t\t$method = 'PUT';\n\t\t\t} else {\n\t\t\t\tthrow new \\App\\Exceptions\\AppException('Unexpected Header');\n\t\t\t}\n\t\t}\n\t\treturn strtoupper($method);\n\t}\n\n\t/**\n\t * Get server and execution environment information.\n\t *\n\t * @param string $key\n\t * @param mixed  $default\n\t *\n\t * @return bool\n\t */\n\tpublic function getServer($key, $default = false)\n\t{\n\t\tif (!isset($_SERVER[$key])) {\n\t\t\treturn $default;\n\t\t}\n\t\treturn Purifier::purifyByType($_SERVER[$key], 'Text');\n\t}\n\n\t/**\n\t * Get module name.\n\t *\n\t * @param bool $raw\n\t *\n\t * @return string\n\t */\n\tpublic function getModule($raw = true)\n\t{\n\t\t$moduleName = $this->getByType('module', 'Alnum');\n\t\tif (!$raw && !$this->isEmpty('parent', true) && 'Settings' === ($parentModule = $this->getByType('parent', 'Alnum'))) {\n\t\t\t$moduleName = \"$parentModule:$moduleName\";\n\t\t}\n\t\treturn $moduleName;\n\t}\n\n\t/**\n\t * Check for existence of key.\n\t *\n\t * @param string $key\n\t *\n\t * @return bool\n\t */\n\tpublic function has($key)\n\t{\n\t\treturn isset($this->rawValues[$key]);\n\t}\n\n\t/**\n\t * Function to check if the key is empty.\n\t *\n\t * @param string $key\n\t * @param bool   $emptyFunction\n\t *\n\t * @return bool\n\t */\n\tpublic function isEmpty($key, $emptyFunction = false)\n\t{\n\t\tif ($emptyFunction) {\n\t\t\treturn empty($this->rawValues[$key]);\n\t\t}\n\t\treturn !isset($this->rawValues[$key]) || '' === $this->rawValues[$key];\n\t}\n\n\t/**\n\t * Function to set the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value\n\t * @param bool   $onlyRaw\n\t *\n\t * @return $this\n\t */\n\tpublic function set($key, $value, bool $onlyRaw = false): self\n\t{\n\t\tif ($onlyRaw) {\n\t\t\t$this->rawValues[$key] = $value;\n\t\t} else {\n\t\t\t$this->rawValues[$key] = $this->purifiedValuesByGet[$key] = $this->purifiedValuesByInteger[$key] = $this->purifiedValuesByHtml[$key] = $value;\n\t\t\t$this->purifiedValuesByType[$key] = [];\n\t\t}\n\t\treturn $this;\n\t}\n\n\t/**\n\t * Function to remove the value for a given key.\n\t *\n\t * @param string $key\n\t */\n\tpublic function delete($key)\n\t{\n\t\tif (isset($this->purifiedValuesByGet[$key])) {\n\t\t\tunset($this->purifiedValuesByGet[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByInteger[$key])) {\n\t\t\tunset($this->purifiedValuesByInteger[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByType[$key])) {\n\t\t\tunset($this->purifiedValuesByType[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByHtml[$key])) {\n\t\t\tunset($this->purifiedValuesByHtml[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByArray[$key])) {\n\t\t\tunset($this->purifiedValuesByArray[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByDateRange[$key])) {\n\t\t\tunset($this->purifiedValuesByDateRange[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByExploded[$key])) {\n\t\t\tunset($this->purifiedValuesByExploded[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByMultiDimension[$key])) {\n\t\t\tunset($this->purifiedValuesByMultiDimension[$key]);\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\tunset($this->rawValues[$key]);\n\t\t}\n\t}\n\n\t/**\n\t * Get all request keys.\n\t *\n\t * @return array\n\t */\n\tpublic function getKeys()\n\t{\n\t\treturn array_keys($this->rawValues);\n\t}\n\n\t/**\n\t * Function to check if the ajax request.\n\t *\n\t * @return bool\n\t */\n\tpublic function isAjax()\n\t{\n\t\tif (!empty($_SERVER['HTTP_X_PJAX']) && true === $_SERVER['HTTP_X_PJAX']) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Is json.\n\t *\n\t * @return bool\n\t */\n\tpublic function isJSON()\n\t{\n\t\treturn false !== strpos($this->getHeader('accept'), 'application/json');\n\t}\n\n\t/**\n\t * Validating read access request.\n\t *\n\t * @throws \\App\\Exceptions\\Csrf\n\t */\n\tpublic function validateReadAccess()\n\t{\n\t\t// Referer check if present - to over come && Check for user post authentication.\n\t\tif (isset($_SERVER['HTTP_REFERER']) && \\App\\User::getCurrentUserId() && 'Install' !== $this->get('module')) {\n\t\t\t$allowed = array_merge(\\Config\\Security::$allowedFrameDomains, \\Config\\Security::$allowedFormDomains);\n\t\t\t$allowed[] = \\App\\Config::main('site_URL');\n\t\t\t$throw = true;\n\t\t\tforeach ($allowed as $value) {\n\t\t\t\tif (0 === stripos($_SERVER['HTTP_REFERER'], $value)) {\n\t\t\t\t\t$throw = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($throw) {\n\t\t\t\tthrow new \\App\\Exceptions\\Csrf('Illegal request');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validating write access request.\n\t *\n\t * @param bool $skipRequestTypeCheck\n\t *\n\t * @throws \\App\\Exceptions\\Csrf\n\t */\n\tpublic function validateWriteAccess($skipRequestTypeCheck = false)\n\t{\n\t\tif (!$skipRequestTypeCheck && 'POST' !== $_SERVER['REQUEST_METHOD']) {\n\t\t\tthrow new \\App\\Exceptions\\Csrf('Invalid request - validate Write Access');\n\t\t}\n\t\t$this->validateReadAccess();\n\t\tif (class_exists('CSRFConfig') && !\\CsrfMagic\\Csrf::check(false)) {\n\t\t\tthrow new \\App\\Exceptions\\Csrf('Unsupported request');\n\t\t}\n\t}\n\n\t/**\n\t * Static instance initialization.\n\t *\n\t * @param array|bool $request\n\t *\n\t * @return Request\n\t */\n\tpublic static function init($request = false)\n\t{\n\t\tif (!static::$request) {\n\t\t\tstatic::$request = new self($request ?: $_REQUEST);\n\t\t}\n\t\treturn static::$request;\n\t}\n\n\t/**\n\t * Support static methods, all functions must start with \"_\".\n\t *\n\t * @param string     $name\n\t * @param array|null $arguments\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t *\n\t * @return mixed\n\t */\n\tpublic static function __callStatic($name, $arguments = null)\n\t{\n\t\tif (!static::$request) {\n\t\t\tstatic::init();\n\t\t}\n\t\t$function = ltrim($name, '_');\n\t\tif (!method_exists(static::$request, $function)) {\n\t\t\tthrow new \\App\\Exceptions\\AppException('Method not found');\n\t\t}\n\t\tif (empty($arguments)) {\n\t\t\treturn static::$request->{$function}();\n\t\t}\n\t\t$first = array_shift($arguments);\n\t\tif (empty($arguments)) {\n\t\t\treturn static::$request->{$function}($first);\n\t\t}\n\t\treturn static::$request->{$function}($first, $arguments[0]);\n\t}\n}\n", "<?php\n/**\n * Main config.\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n */\nreturn [\n\t'api' => [\n\t\t'enabledServices' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of active services. Available: dav, webservice',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && empty(array_diff($arg, ['dav', 'webservice']));\n\t\t\t}\n\t\t],\n\t\t'enableBrowser' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableCardDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableCalDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableWebDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableEmailPortal' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Webservice config. Enabling contact notifications about the new account in the portal. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ENCRYPT_DATA_TRANSFER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Webservice config. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'AUTH_METHOD' => [\n\t\t\t'default' => 'Basic',\n\t\t\t'description' => 'Webservice config.',\n\t\t\t'validation' => function () {\n\t\t\t\treturn 'Basic' === func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'PRIVATE_KEY' => [\n\t\t\t'default' => 'config/private.key',\n\t\t\t'description' => 'Webservice config.'\n\t\t],\n\t\t'PUBLIC_KEY' => [\n\t\t\t'default' => 'config/public.key',\n\t\t\t'description' => 'Webservice config.'\n\t\t]\n\t],\n\t'main' => [\n\t\t'USE_RTE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Use rte',\n\t\t],\n\t\t'PORTAL_URL' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Url for customer portal (Example: https://portal.yetiforce.com/)',\n\t\t],\n\t\t//\t\t'HELPDESK_SUPPORT_NAME' => [\n\t\t//\t\t\t'default' => 'your-support name',\n\t\t//\t\t\t'description' => 'Helpdesk support email id and support name (Example: \"support@yetiforce.com\" and \"yetiforce support\")',\n\t\t//\t\t\t'validation' => ''\n\t\t//\t\t],\n\t\t'HELPDESK_SUPPORT_EMAIL_REPLY' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Help desk support email reply',\n\t\t],\n\t\t'site_URL' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Backslash is required at the end of URL',\n\t\t\t'validation' => '\\App\\Validator::url'\n\t\t],\n\t\t'cache_dir' => [\n\t\t\t'default' => 'cache/',\n\t\t\t'description' => 'Cache directory path'\n\t\t],\n\t\t'tmp_dir' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => 'return self::$cache_dir . \"images/\";',\n\t\t\t'description' => 'Default value prepended by cache_dir = images/',\n\t\t],\n\t\t'upload_maxsize' => [\n\t\t\t'default' => 52428800,\n\t\t\t'description' => 'Maximum file size for uploaded files in bytes also used when uploading import files: upload_maxsize default value = 52428800 (50MB)',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && ($arg * 1048576) <= \\vtlib\\Functions::getMaxUploadSize();\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0) * 1048576;\n\t\t\t}\n\t\t],\n\t\t'allow_exports' => [\n\t\t\t'default' => 'all',\n\t\t\t'description' => 'Flag to allow export functionality: \"all\" - to allow anyone to use exports, \"admin\" - to only allow admins to export, \"none\" -  to block exports completely',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['all', 'admin', 'none']);\n\t\t\t}\n\t\t],\n\t\t'upload_badext' => [\n\t\t\t'default' => ['php', 'php3', 'php4', 'php5', 'pl', 'cgi', 'py', 'asp', 'cfm', 'js', 'vbs', 'html', 'htm', 'exe', 'bin', 'bat', 'sh', 'dll', 'phps', 'phtml', 'xhtml', 'rb', 'msi', 'jsp', 'shtml', 'sth', 'shtm'],\n\t\t\t'description' => 'Files with one of these extensions will have \".txt\" appended to their filename on upload.'\n\t\t],\n\t\t'list_max_entries_per_page' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'List max entries per page: default value = 20',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'default_module' => [\n\t\t\t'default' => 'Home',\n\t\t\t'description' => 'Default module: default value = Home',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn true === \\App\\Module::isModuleActive($arg);\n\t\t\t}\n\t\t],\n\t\t'default_charset' => [\n\t\t\t'default' => 'UTF-8',\n\t\t\t'description' => 'Default charset:  default value = \"UTF-8\"',\n\t\t\t'validation' => function () {\n\t\t\t\treturn 'UTF-8' === func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'default_language' => [\n\t\t\t'default' => 'en-US',\n\t\t\t'description' => 'Default language: default value = en-US',\n\t\t\t'validation' => '\\App\\Validator::languageTag',\n\t\t],\n\t\t'application_unique_key' => [\n\t\t\t'default' => sha1(time() + random_int(1, 9999999)),\n\t\t\t'description' => 'Unique Application Key',\n\t\t\t'validation' => function () {\n\t\t\t\treturn !class_exists('\\\\Config\\\\Main');\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn sha1(time() + random_int(1, 9999999));\n\t\t\t}\n\t\t],\n\t\t'listview_max_textlength' => [\n\t\t\t'default' => 40,\n\t\t\t'description' => 'Trim descriptions, titles in listviews to this value',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'php_max_execution_time' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Maximum time limit for PHP script execution (in seconds)'\n\t\t],\n\t\t'default_timezone' => [\n\t\t\t'default' => '_TIMEZONE_',\n\t\t\t'description' => 'Set the default timezone as per your preference',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, timezone_identifiers_list());\n\t\t\t}\n\t\t],\n\t\t'title_max_length' => [\n\t\t\t'default' => 60,\n\t\t\t'description' => 'Maximum length of characters for title',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'href_max_length' => [\n\t\t\t'default' => 35,\n\t\t\t'description' => 'Maximum length for href tag',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'MINIMUM_CRON_FREQUENCY' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'Minimum cron frequency [min]',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'davStorageDir' => [\n\t\t\t'default' => 'storage/Files',\n\t\t\t'description' => 'Update the current session id with a newly generated one after login',\n\t\t],\n\t\t'systemMode' => [\n\t\t\t'default' => 'prod',\n\t\t\t'description' => 'System mode. Available: prod, demo, test',\n\t\t\t'validationValues' => ['prod', 'demo', 'test']\n\t\t],\n\t\t'listMaxEntriesMassEdit' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => 'Maximum number of records in a mass edition',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (5000 >= $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'backgroundClosingModal' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable closing of modal window by clicking on the background',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'isActiveSendingMails' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Is sending emails active?'\n\t\t],\n\t\t'isActiveRecordTemplate' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Activates / deactivates batch adding of records',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'unblockedTimeoutCronTasks' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should the task in cron be unblocked if the script execution time was exceeded?'\n\t\t],\n\t\t'maxExecutionCronTime' => [\n\t\t\t'default' => 3600,\n\t\t\t'description' => 'The maximum time of executing a cron. Recommended the same as the max_exacution_time parameter value.'\n\t\t],\n\t\t'langInLoginView' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"System's language selection in the login window (true/false).\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'layoutInLoginView' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"System's layout selection in the login window (true/false)\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'defaultLayout' => [\n\t\t\t'default' => 'basic',\n\t\t\t'description' => 'Set the default layout',\n\t\t\t'validation' => function () {\n\t\t\t\treturn isset(\\App\\Layout::getAllLayouts()[func_get_arg(0)]);\n\t\t\t}\n\t\t],\n\t\t'phoneFieldAdvancedVerification' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable advanced phone number validation. Enabling it will block saving invalid phone number.'\n\t\t],\n\t\t'phoneFieldAdvancedHrefFormat' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('\\libphonenumber\\PhoneNumberFormat::RFC3966'),\n\t\t\t'description' => \"Phone number display format. Values:\\nfalse - formatting is disabled \\n\\\\libphonenumber\\\\PhoneNumberFormat::RFC3966 - +48-44-668-18-00\\n\\\\libphonenumber\\\\PhoneNumberFormat::E164 - +48446681800 \\n\\\\libphonenumber\\\\PhoneNumberFormat::INTERNATIONAL - 044 668 18 00\\n\\\\libphonenumber\\\\PhoneNumberFormat::NATIONAL - +48 44 668 18 00\",\n\t\t\t'validation' => function () {\n\t\t\t\treturn \\in_array(func_get_arg(0), [\n\t\t\t\t\tfalse,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::RFC3966,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::E164,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::INTERNATIONAL,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::NATIONAL\n\t\t\t\t]);\n\t\t\t}\n\t\t],\n\t\t'headerAlertMessage' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert message'\n\t\t],\n\t\t'headerAlertType' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert type, ex. alert-primary, alert-danger, alert-warning, alert-info'\n\t\t],\n\t\t'headerAlertIcon' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert icon, ex.  fas fa-exclamation-triangle, fas fa-exclamation-circle, fas fa-exclamation, far fa-question-circle, fas fa-info-circle'\n\t\t],\n\t\t'loginPageAlertMessage' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert message'\n\t\t],\n\t\t'loginPageAlertType' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert type, ex. alert-primary, alert-danger, alert-warning, alert-info'\n\t\t],\n\t\t'loginPageAlertIcon' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert icon, ex.  fas fa-exclamation-triangle, fas fa-exclamation-circle, fas fa-exclamation, far fa-question-circle, fas fa-info-circle'\n\t\t],\n\t\t'showRegistrationAlert' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show the alert when the system is incorrectly registered',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'debug' => [\n\t\t'LOG_TO_FILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable saving logs to file. Values: false/true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LOG_TO_PROFILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable saving logs profiling. Values: false/true',\n\t\t],\n\t\t'LOG_PROFILE_CATEGORIES' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Categories to be registered in profiling, an empty value means all categories. ex. \"yii\\db\\Command::query\", \"Integrations/MagentoApi\"'\n\t\t],\n\t\t'LOG_LEVELS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Level of saved/displayed logs. Values: false = All / 3 = error and warning / [\"error\", \"warning\", \"info\", \"trace\", \"profile\"]',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn false === $arg || (\\is_array($arg) && array_diff(['error', 'warning', 'info', 'trace', 'profile'], $arg));\n\t\t\t},\n\t\t],\n\t\t'LOG_TRACE_LEVEL' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Level of saved/displayed tracerts. // Values: int',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'SQL_DIE_ON_ERROR' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Stop the running process of the system if there is an error in sql query'\n\t\t],\n\t\t'EXCEPTION_ERROR_TO_SHOW' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display errors',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_EXCEPTION_BACKTRACE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Displays information about the tracking code when an error occurs. Available only with the active SQL_DIE_ON_ERROR = true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_EXCEPTION_LOGS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display logs when error exception occurs',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EXCEPTION_ERROR_HANDLER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Turn on/off the error handler',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EXCEPTION_ERROR_TO_FILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Save logs to file (cache/logs/errors.log)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_DEBUG_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display main debug console'\n\t\t],\n\t\t'DISPLAY_LOGS_IN_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable displaying logs in debug console. Values: false/true'\n\t\t],\n\t\t'DISPLAY_CONFIG_IN_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable displaying logs in debug console. Values: false/true'\n\t\t],\n\t\t'DEBUG_CONSOLE_ALLOWED_IPS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'List of IP addresses allowed to display debug console. Values: false = All IPS / \"192.168.1.10\" / [\"192.168.1.10\",\"192.168.1.11\"]',\n\t\t],\n\t\t'DEBUG_CONSOLE_ALLOWED_USERS' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of user IDs allowed to display debug console. ',\n\t\t],\n\t\t'DEBUG_CRON' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Debug cron => cache/logs/cron/',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DEBUG_VIEWER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Debug Viewer => cache/logs/viewer-debug.log'\n\t\t],\n\t\t'DISPLAY_DEBUG_VIEWER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display Smarty Debug Console'\n\t\t],\n\t\t'SMARTY_ERROR_REPORTING' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('E_ALL & ~E_NOTICE'),\n\t\t\t'description' => 'Do not show Smarty Notice in phpError.log',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = (string) func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['E_ALL', 'E_ALL & ~E_NOTICE']);\n\t\t\t},\n\t\t],\n\t\t'EXCEPTION_ERROR_LEVEL' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('E_ALL & ~E_NOTICE'),\n\t\t\t'description' => \"Set the error reporting level. The parameter is either an integer representing a bit field, or named constants.\\nhttps://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting\\nAll errors - E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED / Critical errors - E_ERROR | E_WARNING | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = (string) func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['E_ALL', 'E_ALL & ~E_NOTICE']);\n\t\t\t},\n\t\t],\n\t\t'JS_DEBUG' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Turn on/off error debugging in javascript',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionMessages' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception messages in response body',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionReasonPhrase' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception reason phrase in response header',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionBacktrace' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception backtrace in response body',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiLogException' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Log to file only exception errors in the logs',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiLogAllRequests' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Log to file all communications data (request + response)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DAV_DEBUG_EXCEPTIONS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'API - Sabre dav - This is a flag that allows (or not) showing file, line, and code of the exception in the returned XML',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DAV_DEBUG_PLUGIN' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Activate the plugin recording log in DAV',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MAILER_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Mailer debug',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ROUNDCUBE_DEBUG_LEVEL' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'System error reporting, sum of: 1 = log; 4 = show, 8 = trace'\n\t\t],\n\t\t'ROUNDCUBE_DEVEL_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Devel_mode this will print real PHP memory usage into logs/console and do not compress JS libraries'\n\t\t],\n\t\t'ROUNDCUBE_PER_USER_LOGGING' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Activate this option if logs should be written to per-user directories.\\nData will only be logged if a directory cache/logs/<username>/ exists and is writable.\"\n\t\t],\n\t\t'ROUNDCUBE_SMTP_LOG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log sent messages to cache/logs/sendmail or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LOG_LOGINS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log successful/failed logins to cache/logs/userlogins or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LOG_SESSION' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log session authentication errors to cache/logs/session or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_SQL_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log SQL queries to cache/logs/sql or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_IMAP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log IMAP conversation to cache/logs/imap or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LDAP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log LDAP conversation to cache/logs/ldap or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_SMTP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log SMTP conversation to cache/logs/smtp or to syslog'\n\t\t],\n\t],\n\t'developer' => [\n\t\t'CHANGE_GENERATEDTYPE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Turn the possibility to change generatedtype',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MINIMIZE_JS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable minimize JS files',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MINIMIZE_CSS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => ' Enable minimize CSS files',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_VISIBILITY' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Change of fields visibility',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_RELATIONS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Adding/Deleting relations between modules.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MISSING_LIBRARY_DEV_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer libraries update mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LANGUAGES_UPDATE_DEV_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer libraries update mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'updaterDevMode' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer updater mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t]\n\t],\n\t'layout' => [\n\t\t'breadcrumbs' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should menu breadcrumbs be visible? true = show, false = hide',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'breadcrumbsHref' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should the breadcrumb menu have href enabled? true = enabled, false = off',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t]\n\t],\n\t'performance' => [\n\t\t'CACHING_DRIVER' => [\n\t\t\t'default' => 'Base',\n\t\t\t'description' => 'Data caching is about storing some PHP variables in cache and retrieving it later from cache. Drivers: Base, Apcu',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn 'Basic' === $arg || 'Apcu' === $arg;\n\t\t\t}\n\t\t],\n\t\t'ENABLE_CACHING_USERS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable caching of user data',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ENABLE_CACHING_DB_CONNECTION' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable caching database instance, accelerate time database connection',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DB_DEFAULT_CHARSET_UTF8' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'If database default charset is UTF-8, set this to true. This avoids executing the SET NAMES SQL for each query!',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LISTVIEW_COMPUTE_PAGE_COUNT' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Compute list view record count while loading listview each time. Recommended value false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'AUTO_REFRESH_RECORD_LIST_ON_SELECT_CHANGE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable automatic records list refreshing while changing the value of the selection list',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_SHOW_OWNER_ONLY_IN_LIST' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Show in search engine/filters only users and groups available in records list. It might result in a longer search time.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'INTERVAL_FOR_NOTIFICATION_NUMBER_CHECK' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'Time to update number of notifications in seconds',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'SEARCH_OWNERS_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search owners by AJAX. We recommend selecting the \"true\" value if there are numerous users in the system.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_ROLES_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search roles by AJAX',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_REFERENCE_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search reference by AJAX. We recommend selecting the \"true\" value if there are numerous users in the system.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MAX_NUMBER_EXPORT_RECORDS' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => 'Max number of exported records',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'maxMassDeleteRecords' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'Max number of mass deleted records',\n\t\t],\n\t\t'maxMassTransferOwnershipRecords' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'Max number of transfer ownership records',\n\t\t],\n\t\t'OWNER_MINIMUM_INPUT_LENGTH' => [\n\t\t\t'default' => 2,\n\t\t\t'description' => 'Minimum number of characters to search for record owner',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'ROLE_MINIMUM_INPUT_LENGTH' => [\n\t\t\t'default' => 2,\n\t\t\t'description' => 'Minimum number of characters to search for role',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'NUMBERS_EMAILS_DOWNLOADED_DURING_ONE_SCANNING' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'The numbers of emails downloaded during one scanning',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_PRIVILEGES_UPDATER' => [\n\t\t\t'default' => 1000000,\n\t\t\t'description' => 'The maximum number of global search permissions that cron can update during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_ADDRESS_BOOK_UPDATER' => [\n\t\t\t'default' => 10000,\n\t\t\t'description' => 'The maximum number of records in address book to be updated in cron',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_LABELS_UPDATER' => [\n\t\t\t'default' => 10000,\n\t\t\t'description' => 'The maximum number of record labels that cron can update during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_SENDING_MAILS' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'The maximum number of emails that cron can send during a single execution. Pay attention to the server limits.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_SENDING_SMS' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => 'The maximum number of sms that cron can send during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_ATACHMENTS_DELETE' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'The maximum number of attachments that cron can delete during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'LOAD_CUSTOM_FILES' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Parameter that allows to disable file overwriting.\\nAfter enabling it the system will additionally check whether the file exists in the custom directory. Ex. custom/modules/Assets/Assets.php.\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_ADMIN_PANEL' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Parameter that determines whether admin panel should be available to admin by default',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_ADMINISTRATORS_IN_USERS_LIST' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Display administrators in the list of users (Assigned To)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search: true/false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'BROWSING_HISTORY_WORKING' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Browsing history working if true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'BROWSING_HISTORY_VIEW_LIMIT' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'Number of browsing history steps',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'BROWSING_HISTORY_DELETE_AFTER' => [\n\t\t\t'default' => 7,\n\t\t\t'description' => 'Number of days after which browsing history will be deleted',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'SESSION_DRIVER' => [\n\t\t\t'default' => 'File',\n\t\t\t'description' => 'Session handler name, handler dir: app/Session/',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CHART_MULTI_FILTER_LIMIT' => [\n\t\t\t'default' => 5,\n\t\t\t'description' => 'Charts multi filter limit',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CHART_ADDITIONAL_FILTERS_LIMIT' => [\n\t\t\t'default' => 6,\n\t\t\t'description' => \"Additional filters limit for ChartFilter's\",\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'MAX_MERGE_RECORDS' => [\n\t\t\t'default' => 4,\n\t\t\t'description' => 'Maximum number of merged records',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'ACCESS_TO_INTERNET' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Can CRM have access to the Internet?',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_LOCALE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Change the locale for sort the data',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'INVENTORY_EDIT_VIEW_LAYOUT' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Is divided layout style on edit view in modules with products',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MODULES_SPLITTED_EDIT_VIEW_LAYOUT' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules with splitted edit view layout',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && array_diff($arg, App\\Module::getAllModuleNames());\n\t\t\t}\n\t\t],\n\t\t'RECORD_POPOVER_DELAY' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => \"Popover record's trigger delay in ms\",\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'PICKLIST_DEPENDENCY_DEFAULT_EMPTY' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Empty value when there is selected item in picklist dependency',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'picklistLimit' => [\n\t\t\t'default' => 50,\n\t\t\t'description' => 'Number of items displayed in picklists.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'recursiveTranslate' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'If there is no translation in the chosen language, then get from the default language.'\n\t\t],\n\t\t'quickEditLayout' => [\n\t\t\t'default' => 'blocks',\n\t\t\t'description' => 'Parameter defining how fields are displayed in quick edit. Available values: standard,blocks,vertical',\n\t\t\t'validationValues' => ['blocks', 'standard', 'vertical']\n\t\t],\n\t\t'quickCreateLayout' => [\n\t\t\t'default' => 'blocks',\n\t\t\t'description' => 'Parameter defining how fields are displayed in quick create. Available values: blocks,standard',\n\t\t\t'validationValues' => ['blocks', 'standard']\n\t\t],\n\t\t'REPORT_RECORD_NUMBERS' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => 'Number of records that can be shown in report mail',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'LOGIN_HISTORY_VIEW_LIMIT' => [\n\t\t\t'default' => 30,\n\t\t\t'description' => 'Number of records that can be shown in history login modal',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t],\n\t'relation' => [\n\t\t'COMMENT_MAX_LENGTH' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'Maximum length of a comment visible in the related module',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'SHOW_RELATED_MODULE_NAME' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show related modules names',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_RELATED_ICON' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show related modules icon',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_RECORDS_COUNT' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Show record count in tabs of related modules',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'addSearchParamsToCreateView' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Fill in the record creation form with the data used in filtering (search_params)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'separateChangeRelationButton' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Separate change relation button in related module',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'search' => [\n\t\t'GLOBAL_SEARCH_SELECT_MODULE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Auto select current module in global search (true/false)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH_MODAL_MAX_NUMBER_RESULT' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'Auto select current module in global search (int)',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'GLOBAL_SEARCH_SORTING_RESULTS' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Global search - Should the results be sorted in MySQL or PHP while displaying (None = 0, PHP = 1, Mysql = 2). The parameter impacts system efficiency.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_int($arg) && \\in_array($arg, [0, 1, 2]);\n\t\t\t}\n\t\t],\n\t\t'GLOBAL_SEARCH_CURRENT_MODULE_TO_TOP' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search - Show current module as first in search results (true/false).',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'Global search - Search for records while entering text  (1/0).',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_int($arg) && \\in_array($arg, [0, 1]);\n\t\t\t}\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE_LIMIT' => [\n\t\t\t'default' => 15,\n\t\t\t'description' => 'Global search - Max number of displayed results. The parameter impacts system efficiency.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE_MIN_LENGTH' => [\n\t\t\t'default' => 3,\n\t\t\t'description' => 'Global search - The minimum number of characters a user must type before a search is performed. The parameter impacts system efficiency',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'GLOBAL_SEARCH_OPERATOR_SELECT' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search - Show operator list.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LIST_ENTITY_STATE_COLOR' => [\n\t\t\t'default' => [\n\t\t\t\t'Archived' => '#0032a2',\n\t\t\t\t'Trash' => '#ab0505',\n\t\t\t\t'Active' => '#009405',\n\t\t\t],\n\t\t\t'description' => 'Colors for record state will be displayed in list view, history, and preview.',\n\t\t],\n\t],\n\t'securityKeys' => [\n\t\t'encryptionPass' => [\n\t\t\t'default' => 'yeti',\n\t\t\t'description' => 'Key to encrypt passwords, changing the key results in the loss of all encrypted data.',\n\t\t\t'validation' => function () {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t],\n\t\t'encryptionMethod' => [\n\t\t\t'default' => 'aes-256-cbc',\n\t\t\t'description' => 'Encryption method.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn empty($arg) || ($arg && \\in_array($arg, \\App\\Encryption::getMethods()));\n\t\t\t}\n\t\t],\n\t],\n\t'security' => [\n\t\t'USER_ENCRYPT_PASSWORD_COST' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => \"Password encrypt algorithmic cost. Numeric values - we recommend values greater than 10.\\nThe greater the value, the longer it takes to encrypt the password.\"\n\t\t],\n\t\t'RESET_LOGIN_PASSWORD' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Possible to reset the password while logging in (true/false)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_MY_PREFERENCES' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show my preferences',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_LOGIN_PASSWORD' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Changing the settings by the user is possible true/false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_ROLES' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by roles.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_SHARING' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by sharing.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_SHARED_OWNERS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by shared owners.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_RECORD_HIERARCHY' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by record hierarchy.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_ADVANCED_PERMISSION' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by advanced permission.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_PRIVATE_FIELD' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by private field.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'permittedModulesByCreatorField' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules to which access is based on the record creation.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && array_diff($arg, App\\Module::getAllModuleNames());\n\t\t\t}\n\t\t],\n\t\t'permittedWriteAccessByCreatorField' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Permission level access based on the record creation',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CACHING_PERMISSION_TO_RECORD' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Configuration of the permission mechanism on records list.\\ntrue - Permissions based on the users column in vtiger_crmentity.\\n\t\tPermissions are not verified in real time. They are updated via cron.\\n\t\tWe do not recommend using this option in production environments.\\nfalse - Permissions based on adding tables with permissions to query (old mechanism).\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_ACTIVE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Restricted domains allow you to block saving an email address from a given domain in the system.\\nRestricted domains work only for email address type fields.\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_VALUES' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Restricted domains',\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_ALLOWED' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules where restricted domains are enabled, if empty it will be enabled everywhere.',\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_EXCLUDED' => [\n\t\t\t'default' => ['OSSEmployees', 'Users'],\n\t\t\t'description' => 'List of modules excluded from restricted domains validation.',\n\t\t],\n\t\t'LOGIN_PAGE_REMEMBER_CREDENTIALS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Remember user credentials',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'fieldsReferencesDependent' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Interdependent reference fields',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'maxLifetimeSession' => [\n\t\t\t'default' => 900,\n\t\t\t'description' => 'Lifetime session (in seconds)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'maxLifetimeSessionCookie' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => \"Specifies the lifetime of the cookie in seconds which is sent to the browser. The value 0 means 'until the browser is closed.'\\nHow much time can someone be logged in to the browser. Defaults to 0.\",\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'loginSessionRegenerate' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Update the current session id with a newly generated one after login and logout',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'cookieSameSite' => [\n\t\t\t'default' => 'Strict',\n\t\t\t'description' => \"Same-site cookie attribute allows a web application to advise the browser that cookies should only be sent if the request originates from the website the cookie came from.\\nValues: None, Lax, Strict\",\n\t\t\t'validationValues' => ['None', 'Lax', 'Strict']\n\t\t],\n\t\t'cookieForceHttpOnly' => [\n\t\t\t'default' => true,\n\t\t\t'description' => \"Force the use of https only for cookie.\\nValues: true, false, null\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn null === $arg ? $arg : \\is_bool($arg);\n\t\t\t}\n\t\t],\n\t\t'apiLifetimeSessionCreate' => [\n\t\t\t'default' => 1440,\n\t\t\t'description' => 'Maximum session lifetime from the time it was created (in minutes)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'apiLifetimeSessionUpdate' => [\n\t\t\t'default' => 240,\n\t\t\t'description' => 'Maximum session lifetime since the last modification (in minutes)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'USER_AUTHY_MODE' => [\n\t\t\t'default' => 'TOTP_OPTIONAL',\n\t\t\t'description' => \"User authentication mode.\\n\\n@see \\\\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE\\nAvailable values:\\nTOTP_OFF - 2FA TOTP is checking off\\nTOTP_OPTIONAL - It is defined by the user\\nTOTP_OBLIGATORY - It is obligatory.\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, \\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE);\n\t\t\t}\n\t\t],\n\t\t'whitelistIp2fa' => [\n\t\t\t'default' => [],\n\t\t\t'description' => \"IP address whitelisting.\\nAllow access without 2FA.\",\n\t\t\t'validation' => '\\App\\Validator::ip'\n\t\t],\n\t\t'CACHE_LIFETIME_SENSIOLABS_SECURITY_CHECKER' => [\n\t\t\t'default' => 3600,\n\t\t\t'description' => 'Cache lifetime for SensioLabs security checker.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'forceHttpsRedirection' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Force site access to always occur under SSL (https) for selected areas. You will not be able to access selected areas under non-ssl. Note, you must have SSL enabled on your server to utilise this option.'\n\t\t],\n\t\t'forceUrlRedirection' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Redirect to proper url when wrong url is entered.'\n\t\t],\n\t\t'hpkpKeysHeader' => [\n\t\t\t'default' => [],\n\t\t\t'description' => \"HTTP Public-Key-Pins (HPKP) pin-sha256 For HPKP to work properly at least 2 keys are needed.\\nhttps://scotthelme.co.uk/hpkp-http-public-key-pinning/, https://sekurak.pl/mechanizm-http-public-key-pinning/.\",\n\t\t],\n\t\t'csrfActive' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable CSRF protection',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'csrfFrameBreaker' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable verified frame protection, used in CSRF',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'csrfFrameBreakerWindow' => [\n\t\t\t'default' => 'top',\n\t\t\t'description' => 'Which window should be verified? It is used to check if the system is loaded in the frame, used in CSRF.',\n\t\t\t'validationValues' => ['top', 'parent']\n\t\t],\n\t\t'cspHeaderActive' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'HTTP Content Security Policy response header allows website administrators to control resources the user agent is allowed to load for a given page',\n\t\t\t'validation' => '\\App\\Validator::alnumSpace'\n\t\t],\n\t\t'cspHeaderTokenTime' => [\n\t\t\t'default' => '5 minutes',\n\t\t\t'description' => 'HTTP Content Security Policy time interval for generating a new nonce token',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'allowedImageDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading images, used in CSP.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t],\n\t\t'allowedFrameDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading frame, used in CSP and validate referer.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'allowedScriptDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading script, used in CSP.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'allowedFormDomains' => [\n\t\t\t'default' => ['https://www.paypal.com'],\n\t\t\t'description' => 'Allowed domains which can be used as the target of a form submissions from a given context, used in CSP.',\n\t\t],\n\t\t'generallyAllowedDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Generally allowed domains, used in CSP.',\n\t\t],\n\t\t'purifierAllowedDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of allowed domains for fields with HTML support',\n\t\t],\n\t\t'proxyConnection' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Do you want all connections to be made using a proxy?',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'proxyProtocol' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy protocol: http, https, tcp',\n\t\t\t'validationValues' => ['http', 'https', 'tcp', '']\n\t\t],\n\t\t'proxyHost' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy host',\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'proxyPort' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Proxy port',\n\t\t\t'validation' => '\\App\\Validator::port',\n\t\t],\n\t\t'proxyLogin' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy login',\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'proxyPassword' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy password',\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'askAdminAboutVisitPurpose' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask admin about visit purpose',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'askAdminAboutVisitSwitchUsers' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask admin about switch users purpose',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'askSuperUserAboutVisitPurpose' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask super user about visit purpose, only for the settings part',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'sounds' => [\n\t\t'IS_ENABLED' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable system sounds',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'REMINDERS' => [\n\t\t\t'default' => 'sound_1.mp3',\n\t\t\t'description' => 'Sets the type of sound of reminders',\n\t\t],\n\t\t'CHAT' => [\n\t\t\t'default' => 'sound_2.mp3',\n\t\t\t'description' => 'Sets the type of sound of chat',\n\t\t],\n\t\t'MAILS' => [\n\t\t\t'default' => 'sound_1.mp3',\n\t\t\t'description' => 'Sets the type of sound of mails',\n\t\t],\n\t],\n\t'db' => [\n\t\t'db_server' => [\n\t\t\t'default' => '>URL<',\n\t\t\t'description' => 'Gets the database server',\n\t\t\t'validation' => '\\App\\Validator::domain',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_port' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Gets the database port',\n\t\t\t'validation' => '\\App\\Validator::port'\n\t\t],\n\t\t'db_username' => [\n\t\t\t'default' => '_DBC_USER_',\n\t\t\t'description' => 'Gets the database user name',\n\t\t\t'validation' => '\\App\\Validator::dbUserName',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_password' => [\n\t\t\t'default' => '_DBC_PASS_',\n\t\t\t'description' => 'Gets the database password',\n\t\t\t'validation' => function () {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t],\n\t\t'db_name' => [\n\t\t\t'default' => '_DBC_NAME_',\n\t\t\t'description' => 'Gets the database name',\n\t\t\t'validation' => '\\App\\Validator::dbName',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_type' => [\n\t\t\t'default' => 'mysql',\n\t\t\t'description' => 'Gets the database type',\n\t\t\t'validation' => '\\App\\Validator::dbType'\n\t\t],\n\t\t'db_hostname' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => 'return self::$db_server . \\':\\' . self::$db_port;',\n\t\t\t'description' => 'Gets host name.'\n\t\t],\n\t\t'base' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => \"return [\n\t'dsn' => self::\\$db_type . ':host=' . self::\\$db_server . ';dbname=' . self::\\$db_name . ';port=' . self::\\$db_port,\n\t'host' => self::\\$db_server,\n\t'port' => self::\\$db_port,\n\t'username' => self::\\$db_username,\n\t'password' => self::\\$db_password,\n\t'dbName' => self::\\$db_name,\n\t'tablePrefix' => 'yf_',\n\t'charset' => 'utf8',\n];\",\n\t\t\t'description' => 'Basic database configuration.'\n\t\t],\n\t]\n];\n", "<?php\n\n/**\n * Configuration file.\n * This file is auto-generated.\n *\n * @package Config\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n */\n\nnamespace Config;\n\n/**\n * Configuration file: Config\\Security.\n */\nclass Security\n{\n\t/**\n\t * Password encrypt algorithmic cost. Numeric values - we recommend values greater than 10.\n\t * The greater the value, the longer it takes to encrypt the password.\n\t */\n\tpublic static $USER_ENCRYPT_PASSWORD_COST = 10;\n\n\t/** Possible to reset the password while logging in (true/false) */\n\tpublic static $RESET_LOGIN_PASSWORD = false;\n\n\t/** Show my preferences */\n\tpublic static $SHOW_MY_PREFERENCES = true;\n\n\t/** Changing the settings by the user is possible true/false */\n\tpublic static $CHANGE_LOGIN_PASSWORD = true;\n\n\t/** Permitted by roles. */\n\tpublic static $PERMITTED_BY_ROLES = true;\n\n\t/** Permitted by sharing. */\n\tpublic static $PERMITTED_BY_SHARING = true;\n\n\t/** Permitted by shared owners. */\n\tpublic static $PERMITTED_BY_SHARED_OWNERS = true;\n\n\t/** Permitted by record hierarchy. */\n\tpublic static $PERMITTED_BY_RECORD_HIERARCHY = true;\n\n\t/** Permitted by advanced permission. */\n\tpublic static $PERMITTED_BY_ADVANCED_PERMISSION = true;\n\n\t/** Permitted by private field. */\n\tpublic static $PERMITTED_BY_PRIVATE_FIELD = true;\n\n\t/** List of modules to which access is based on the record creation. */\n\tpublic static $permittedModulesByCreatorField = [];\n\n\t/** Permission level access based on the record creation */\n\tpublic static $permittedWriteAccessByCreatorField = false;\n\n\t/**\n\t * Configuration of the permission mechanism on records list.\n\t * true - Permissions based on the users column in vtiger_crmentity.\n\t * \t\tPermissions are not verified in real time. They are updated via cron.\n\t * \t\tWe do not recommend using this option in production environments.\n\t * false - Permissions based on adding tables with permissions to query (old mechanism).\n\t */\n\tpublic static $CACHING_PERMISSION_TO_RECORD = false;\n\n\t/**\n\t * Restricted domains allow you to block saving an email address from a given domain in the system.\n\t * Restricted domains work only for email address type fields.\n\t */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_ACTIVE = false;\n\n\t/** Restricted domains */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_VALUES = [];\n\n\t/** List of modules where restricted domains are enabled, if empty it will be enabled everywhere. */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_ALLOWED = [];\n\n\t/** List of modules excluded from restricted domains validation. */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_EXCLUDED = ['OSSEmployees', 'Users'];\n\n\t/** Remember user credentials */\n\tpublic static $LOGIN_PAGE_REMEMBER_CREDENTIALS = false;\n\n\t/** Interdependent reference fields */\n\tpublic static $fieldsReferencesDependent = false;\n\n\t/** Lifetime session (in seconds) */\n\tpublic static $maxLifetimeSession = 900;\n\n\t/**\n\t * Specifies the lifetime of the cookie in seconds which is sent to the browser. The value 0 means 'until the browser is closed.'\n\t * How much time can someone be logged in to the browser. Defaults to 0.\n\t */\n\tpublic static $maxLifetimeSessionCookie = 0;\n\n\t/** Update the current session id with a newly generated one after login and logout */\n\tpublic static $loginSessionRegenerate = true;\n\n\t/**\n\t * Same-site cookie attribute allows a web application to advise the browser that cookies should only be sent if the request originates from the website the cookie came from.\n\t * Values: None, Lax, Strict\n\t */\n\tpublic static $cookieSameSite = 'Strict';\n\n\t/**\n\t * Force the use of https only for cookie.\n\t * Values: true, false, null\n\t */\n\tpublic static $cookieForceHttpOnly = true;\n\n\t/** Maximum session lifetime from the time it was created (in minutes) */\n\tpublic static $apiLifetimeSessionCreate = 1440;\n\n\t/** Maximum session lifetime since the last modification (in minutes) */\n\tpublic static $apiLifetimeSessionUpdate = 240;\n\n\t/**\n\t * User authentication mode.\n\t *\n\t * @see \\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE\n\t * Available values:\n\t * TOTP_OFF - 2FA TOTP is checking off\n\t * TOTP_OPTIONAL - It is defined by the user\n\t * TOTP_OBLIGATORY - It is obligatory.\n\t */\n\tpublic static $USER_AUTHY_MODE = 'TOTP_OPTIONAL';\n\n\t/**\n\t * IP address whitelisting.\n\t * Allow access without 2FA.\n\t */\n\tpublic static $whitelistIp2fa = [];\n\n\t/** Cache lifetime for SensioLabs security checker. */\n\tpublic static $CACHE_LIFETIME_SENSIOLABS_SECURITY_CHECKER = 3600;\n\n\t/** Force site access to always occur under SSL (https) for selected areas. You will not be able to access selected areas under non-ssl. Note, you must have SSL enabled on your server to utilise this option. */\n\tpublic static $forceHttpsRedirection = false;\n\n\t/** Redirect to proper url when wrong url is entered. */\n\tpublic static $forceUrlRedirection = true;\n\n\t/**\n\t * HTTP Public-Key-Pins (HPKP) pin-sha256 For HPKP to work properly at least 2 keys are needed.\n\t * https://scotthelme.co.uk/hpkp-http-public-key-pinning/, https://sekurak.pl/mechanizm-http-public-key-pinning/.\n\t */\n\tpublic static $hpkpKeysHeader = [];\n\n\t/** Enable CSRF protection */\n\tpublic static $csrfActive = true;\n\n\t/** Enable verified frame protection, used in CSRF */\n\tpublic static $csrfFrameBreaker = true;\n\n\t/** Which window should be verified? It is used to check if the system is loaded in the frame, used in CSRF. */\n\tpublic static $csrfFrameBreakerWindow = 'top';\n\n\t/** HTTP Content Security Policy response header allows website administrators to control resources the user agent is allowed to load for a given page */\n\tpublic static $cspHeaderActive = true;\n\n\t/** HTTP Content Security Policy time interval for generating a new nonce token */\n\tpublic static $cspHeaderTokenTime = '5 minutes';\n\n\t/** Allowed domains for loading images, used in CSP. */\n\tpublic static $allowedImageDomains = [];\n\n\t/** Allowed domains for loading frame, used in CSP and validate referer. */\n\tpublic static $allowedFrameDomains = [];\n\n\t/** Allowed domains for loading script, used in CSP. */\n\tpublic static $allowedScriptDomains = [];\n\n\t/** Allowed domains which can be used as the target of a form submissions from a given context, used in CSP. */\n\tpublic static $allowedFormDomains = ['https://www.paypal.com'];\n\n\t/** Generally allowed domains, used in CSP. */\n\tpublic static $generallyAllowedDomains = [];\n\n\t/** List of allowed domains for fields with HTML support */\n\tpublic static $purifierAllowedDomains = [];\n\n\t/** Do you want all connections to be made using a proxy? */\n\tpublic static $proxyConnection = false;\n\n\t/** Proxy protocol: http, https, tcp */\n\tpublic static $proxyProtocol = '';\n\n\t/** Proxy host */\n\tpublic static $proxyHost = '';\n\n\t/** Proxy port */\n\tpublic static $proxyPort = 0;\n\n\t/** Proxy login */\n\tpublic static $proxyLogin = '';\n\n\t/** Proxy password */\n\tpublic static $proxyPassword = '';\n\n\t/** @var bool Ask admin about visit purpose */\n\tpublic static $askAdminAboutVisitPurpose = true;\n\n\t/** @var bool Ask admin about switch users purpose */\n\tpublic static $askAdminAboutVisitSwitchUsers = true;\n\n\t/** @var bool Ask super user about visit purpose, only for the settings part */\n\tpublic static $askSuperUserAboutVisitPurpose = true;\n}\n", "<?php\n/* +*******************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * ****************************************************************************** */\n\nclass CSRFConfig\n{\n\t/**\n\t * Specific custom config startup for CSRF.\n\t */\n\tpublic static function startup()\n\t{\n\t\t//Override the default expire time of token\n\t\t\\CsrfMagic\\Csrf::$expires = 259200;\n\t\t\\CsrfMagic\\Csrf::$callback = function ($tokens) {\n\t\t\tthrow new \\App\\Exceptions\\AppException('Invalid request - Response For Illegal Access', 403);\n\t\t};\n\t\t$js = 'vendor/yetiforce/csrf-magic/src/Csrf.min.js';\n\t\tif (!IS_PUBLIC_DIR) {\n\t\t\t$js = 'public_html/' . $js;\n\t\t}\n\t\t\\CsrfMagic\\Csrf::$dirSecret = __DIR__;\n\t\t\\CsrfMagic\\Csrf::$rewriteJs = $js;\n\t\t\\CsrfMagic\\Csrf::$cspToken = \\App\\Session::get('CSP_TOKEN');\n\t\t\\CsrfMagic\\Csrf::$frameBreaker = \\Config\\Security::$csrfFrameBreaker;\n\t\t\\CsrfMagic\\Csrf::$windowVerification = \\Config\\Security::$csrfFrameBreakerWindow;\n\n\t\t/*\n\t\t * if an ajax request initiated, then if php serves content with <html> tags\n\t\t * as a response, then unnecessarily we are injecting csrf magic javascipt\n\t\t * in the response html at <head> and <body> using csrf_ob_handler().\n\t\t * So, to overwride above rewriting we need following config.\n\t\t */\n\t\tif (static::isAjax()) {\n\t\t\t\\CsrfMagic\\Csrf::$frameBreaker = false;\n\t\t\t\\CsrfMagic\\Csrf::$rewriteJs = null;\n\t\t}\n\t}\n\n\tpublic static function isAjax()\n\t{\n\t\tif (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n", "<?php\n\nreturn [\n\t'appVersion' => '6.3.42',\n\t'patchVersion' => '2022.01.17',\n\t'lib_roundcube' => '0.2.10',\n];\n", "<?php\n/* +**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.1\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com\n * ********************************************************************************** */\nrequire_once 'include/ConfigUtils.php';\nrequire_once 'include/utils/CommonUtils.php';\nrequire_once 'include/fields/DateTimeField.php';\nrequire_once 'include/fields/DateTimeRange.php';\nrequire_once 'include/fields/CurrencyField.php';\nrequire_once 'include/CRMEntity.php';\ninclude_once 'modules/Vtiger/CRMEntity.php';\nrequire_once 'include/runtime/Cache.php';\nrequire_once 'modules/Vtiger/helpers/Util.php';\nrequire_once 'modules/PickList/DependentPickListUtils.php';\nrequire_once 'modules/Users/Users.php';\nrequire_once 'include/Webservices/Utils.php';\nrequire_once 'include/Loader.php';\nVtiger_Loader::includeOnce('include.runtime.EntryPoint');\nApp\\Cache::init();\nApp\\Debuger::init();\nApp\\Db::$connectCache = App\\Config::performance('ENABLE_CACHING_DB_CONNECTION');\nApp\\Log::$logToProfile = Yii::$logToProfile = App\\Config::debug('LOG_TO_PROFILE');\nApp\\Log::$logToConsole = App\\Config::debug('DISPLAY_LOGS_IN_CONSOLE');\nApp\\Log::$logToFile = App\\Config::debug('LOG_TO_FILE');\n\nclass Vtiger_WebUI extends Vtiger_EntryPoint\n{\n\t/**\n\t * User privileges model instance.\n\t *\n\t * @var Users_Privileges_Model\n\t */\n\tprotected $userPrivilegesModel;\n\n\t/**\n\t * Function to check if the User has logged in.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\Unauthorized\n\t */\n\tprotected function checkLogin(App\\Request $request)\n\t{\n\t\tif (!$this->hasLogin()) {\n\t\t\tif ($request->isAjax()) {\n\t\t\t\tthrow new \\App\\Exceptions\\Unauthorized('LBL_LOGIN_IS_REQUIRED', 401);\n\t\t\t}\n\t\t\theader('location: index.php');\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to get the instance of the logged in User.\n\t *\n\t * @return Users object\n\t */\n\tpublic function getLogin()\n\t{\n\t\t$user = parent::getLogin();\n\t\tif (!$user && App\\Session::has('authenticated_user_id')) {\n\t\t\t$userId = App\\Session::get('authenticated_user_id');\n\t\t\tif ($userId && App\\Config::main('application_unique_key') === App\\Session::get('app_unique_key') && \\App\\User::isExists($userId)) {\n\t\t\t\t\\App\\User::setCurrentUserId($userId);\n\t\t\t\t$this->setLogin();\n\t\t\t}\n\t\t}\n\t\treturn $user;\n\t}\n\n\t/**\n\t * Process.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws Exception\n\t * @throws \\App\\Exceptions\\AppException\n\t */\n\tpublic function process(App\\Request $request)\n\t{\n\t\tif (\\Config\\Security::$forceHttpsRedirection && !\\App\\RequestUtil::isHttps()) {\n\t\t\theader(\"location: https://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\", true, 301);\n\t\t}\n\t\tif (\\Config\\Security::$forceUrlRedirection) {\n\t\t\t$requestUrl = (\\App\\RequestUtil::isHttps() ? 'https' : 'http') . '://' . $request->getServer('HTTP_HOST') . $request->getServer('REQUEST_URI');\n\t\t\tif (0 !== stripos($requestUrl, App\\Config::main('site_URL'))) {\n\t\t\t\theader('location: ' . App\\Config::main('site_URL'), true, 301);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tApp\\Session::init();\n\t\t\tApp\\Process::init();\n\t\t\t// common utils api called, depend on this variable right now\n\t\t\t$this->getLogin();\n\t\t\tApp\\Debuger::initConsole();\n\t\t\t$hasLogin = $this->hasLogin();\n\t\t\t$moduleName = $request->getModule();\n\t\t\t$qualifiedModuleName = $request->getModule(false);\n\t\t\t$view = $request->getByType('view', 2);\n\t\t\t$action = $request->getByType('action', 2);\n\t\t\t$response = false;\n\t\t\tif (!$hasLogin && 'GET' === $_SERVER['REQUEST_METHOD'] && 'Users' !== $moduleName && ($returnUrl = $request->getServer('QUERY_STRING')) && !\\App\\Session::has('return_params')) {\n\t\t\t\t//Take the url that user would like to redirect after they have successfully logged in.\n\t\t\t\t\\App\\Session::set('return_params', str_replace('&amp;', '&', $returnUrl));\n\t\t\t}\n\t\t\tif (empty($moduleName)) {\n\t\t\t\tif ($hasLogin) {\n\t\t\t\t\t$defaultModule = App\\Config::main('default_module');\n\t\t\t\t\tif (!empty($defaultModule) && 'Home' !== $defaultModule && \\App\\Privilege::isPermitted($defaultModule)) {\n\t\t\t\t\t\t$moduleName = $defaultModule;\n\t\t\t\t\t\t$qualifiedModuleName = $defaultModule;\n\t\t\t\t\t\tif (empty($view = Vtiger_Module_Model::getInstance($moduleName)->getDefaultViewName())) {\n\t\t\t\t\t\t\t$view = 'List';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$qualifiedModuleName = $moduleName = 'Home';\n\t\t\t\t\t\t$view = 'DashBoard';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$qualifiedModuleName = $moduleName = 'Users';\n\t\t\t\t\t$view = 'Login';\n\t\t\t\t}\n\t\t\t\t$request->set('module', $moduleName);\n\t\t\t\t$request->set('view', $view);\n\t\t\t}\n\t\t\tif (!empty($action)) {\n\t\t\t\t$componentType = 'Action';\n\t\t\t\t$componentName = $action;\n\t\t\t\t\\App\\Config::setJsEnv('action', $action);\n\t\t\t} else {\n\t\t\t\t$componentType = 'View';\n\t\t\t\tif (empty($view)) {\n\t\t\t\t\t$view = 'Index';\n\t\t\t\t}\n\t\t\t\t$componentName = $view;\n\t\t\t\t\\App\\Config::setJsEnv('view', $view);\n\t\t\t}\n\t\t\tif ('Login' === $view && 'Users' === $moduleName) {\n\t\t\t\tif (!\\App\\Session::has('CSP_TOKEN')) {\n\t\t\t\t\t\\App\\Controller\\Headers::generateCspToken();\n\t\t\t\t}\n\t\t\t\tif ($hasLogin) {\n\t\t\t\t\theader('location: index.php');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\\App\\Process::$processName = $componentName;\n\t\t\t\\App\\Process::$processType = $componentType;\n\t\t\t\\App\\Config::setJsEnv('module', $moduleName);\n\t\t\t\\App\\Config::setJsEnv('mode', $request->getMode());\n\t\t\tif ($qualifiedModuleName && 0 === stripos($qualifiedModuleName, 'Settings') && empty(\\App\\User::getCurrentUserId())) {\n\t\t\t\theader('location: ' . App\\Config::main('site_URL'), true);\n\t\t\t}\n\t\t\tif ('AppComponents' === $moduleName) {\n\t\t\t\t$handlerClass = \"App\\\\Controller\\\\Components\\\\{$componentType}\\\\{$componentName}\";\n\t\t\t} else {\n\t\t\t\t$handlerClass = Vtiger_Loader::getComponentClassName($componentType, $componentName, $qualifiedModuleName);\n\t\t\t}\n\t\t\t$handler = new $handlerClass();\n\t\t\tif (!$handler) {\n\t\t\t\t\\App\\Log::error(\"HandlerClass: $handlerClass\", 'Loader');\n\t\t\t\tthrow new \\App\\Exceptions\\AppException('LBL_HANDLER_NOT_FOUND', 405);\n\t\t\t}\n\t\t\tif ($handler->csrfActive) {\n\t\t\t\t$handler->validateRequest($request);\n\t\t\t}\n\t\t\tif ($handler->loginRequired() && $this->checkLogin($request)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif ($handler->isSessionExtend($request)) {\n\t\t\t\t\\App\\Session::set('last_activity', \\App\\Process::$startTime);\n\t\t\t}\n\t\t\tif ('ModComments' === $moduleName && 'List' === $view) {\n\t\t\t\theader('location: index.php?module=Home&view=DashBoard');\n\t\t\t}\n\t\t\t$skipList = ['Users', 'Home', 'CustomView', 'Import', 'Export', 'Install', 'ModTracker', 'AppComponents'];\n\t\t\tif ($handler->loginRequired() && !\\in_array($moduleName, $skipList) && false === stripos($qualifiedModuleName, 'Settings')) {\n\t\t\t\t$this->triggerCheckPermission($handler, $request);\n\t\t\t} elseif (0 === stripos($qualifiedModuleName, 'Settings') || \\in_array($moduleName, $skipList) || !$handler->loginRequired()) {\n\t\t\t\t$handler->checkPermission($request);\n\t\t\t}\n\t\t\t$this->triggerPreProcess($handler, $request);\n\t\t\t$response = $handler->process($request);\n\t\t\t$this->triggerPostProcess($handler, $request);\n\t\t} catch (Throwable $e) {\n\t\t\t\\App\\Log::error($e->getMessage() . PHP_EOL . $e->__toString());\n\t\t\t$messageHeader = 'LBL_ERROR';\n\t\t\tif ($e instanceof \\App\\Exceptions\\NoPermittedToRecord || $e instanceof WebServiceException) {\n\t\t\t\t$messageHeader = 'LBL_PERMISSION_DENIED';\n\t\t\t} elseif ($e instanceof \\App\\Exceptions\\Security) {\n\t\t\t\t$messageHeader = 'LBL_BAD_REQUEST';\n\t\t\t} elseif ($e instanceof \\yii\\db\\Exception) {\n\t\t\t\t$messageHeader = 'LBL_ERROR';\n\t\t\t}\n\t\t\t\\vtlib\\Functions::throwNewException($e, false, $messageHeader);\n\t\t\tif (!($request->isAjax() && $request->isJSON())) {\n\t\t\t\tif (App\\Config::debug('DISPLAY_EXCEPTION_BACKTRACE')) {\n\t\t\t\t\techo '<pre class=\"my-5 mx-auto card p-3 u-w-fit shadow js-exception-backtrace\">' . App\\Purifier::encodeHtml(str_replace(ROOT_DIRECTORY . DIRECTORY_SEPARATOR, '', $e->__toString())) . '</pre>';\n\t\t\t\t\t$response = false;\n\t\t\t\t}\n\t\t\t\tif (App\\Config::debug('DISPLAY_EXCEPTION_LOGS')) {\n\t\t\t\t\techo '<pre class=\"my-5 mx-auto card p-3 u-w-fit shadow js-exception-logs\">' . App\\Purifier::encodeHtml(str_replace(ROOT_DIRECTORY . DIRECTORY_SEPARATOR, '', \\App\\Log::getlastLogs())) . '</pre>';\n\t\t\t\t\t$response = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ('test' === App\\Config::main('systemMode')) {\n\t\t\t\tfile_put_contents('cache/logs/request.log', print_r($request->getAll(), true));\n\t\t\t\tif (\\function_exists('apache_request_headers')) {\n\t\t\t\t\tfile_put_contents('cache/logs/request.log', print_r(apache_request_headers(), true));\n\t\t\t\t}\n\t\t\t\tthrow $e;\n\t\t\t}\n\t\t}\n\t\tif (isset($response) && \\is_object($response)) {\n\t\t\t$response->emit();\n\t\t}\n\t}\n\n\t/**\n\t * Trigger check permission.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerCheckPermission(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\t$moduleName = $request->getModule();\n\t\t$moduleModel = Vtiger_Module_Model::getInstance($moduleName);\n\t\tif (empty($moduleModel)) {\n\t\t\t\\App\\Log::error('HandlerModule: ' . $moduleName, 'Loader');\n\t\t\tthrow new \\App\\Exceptions\\AppException('ERR_MODULE_DOES_NOT_EXIST||' . $moduleName, 405);\n\t\t}\n\t\t$this->userPrivilegesModel = Users_Privileges_Model::getCurrentUserPrivilegesModel();\n\t\tif ($this->userPrivilegesModel->hasModulePermission($moduleName)) {\n\t\t\t$handler->checkPermission($request);\n\t\t\treturn true;\n\t\t}\n\t\t\\App\\Log::error(\"No permissions to the module: $moduleName\", 'NoPermitted');\n\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NOT_ACCESSIBLE', 403);\n\t}\n\n\t/**\n\t * Trigger pre process.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerPreProcess(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\t$handler->sendHeaders();\n\t\tif ($request->isAjax()) {\n\t\t\t$handler->preProcessAjax($request);\n\t\t\treturn true;\n\t\t}\n\t\t$handler->preProcess($request);\n\t}\n\n\t/**\n\t * Trigger post process.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerPostProcess(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\tif ($request->isAjax()) {\n\t\t\t$handler->postProcessAjax($request);\n\t\t\treturn true;\n\t\t}\n\t\t$handler->postProcess($request);\n\t}\n}\n", "<?php\n\n /* +***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com.\n * *********************************************************************************** */\n\nclass Install_Index_View extends \\App\\Controller\\View\\Base\n{\n\tuse \\App\\Controller\\ExposeMethod;\n\n\t/** {@inheritdoc} */\n\tpublic $csrfActive = false;\n\n\t/**\n\t * @var bool\n\t */\n\tprotected $debug = false;\n\n\t/**\n\t * @var Vtiger_Viewer\n\t */\n\tprotected $viewer;\n\n\t/**\n\t * Step number.\n\t *\n\t * @var int\n\t */\n\tprotected $stepNumber = 1;\n\n\t/** {@inheritdoc} */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->exposeMethod('step1');\n\t\t$this->exposeMethod('step2');\n\t\t$this->exposeMethod('stepChooseHost');\n\t\t$this->exposeMethod('showBuyModal');\n\t\t$this->exposeMethod('showProductModal');\n\t\t$this->exposeMethod('step3');\n\t\t$this->exposeMethod('step4');\n\t\t$this->exposeMethod('step5');\n\t\t$this->exposeMethod('step6');\n\t\t$this->exposeMethod('step7');\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function loginRequired()\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * Set language.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return \\App\\Request\n\t */\n\tpublic function setLanguage(App\\Request $request)\n\t{\n\t\tif (!$request->getByType('lang', 1)) {\n\t\t\t$lang = '';\n\t\t\tif (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n\t\t\t\t$languages = Install_Utils_Model::getLanguages();\n\t\t\t\tforeach ($languages as $code => &$data) {\n\t\t\t\t\t$data = Locale::getPrimaryLanguage($code);\n\t\t\t\t}\n\t\t\t\tforeach (explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']) as $code) {\n\t\t\t\t\tif (isset($languages[$code])\n\t\t\t\t\t\t|| (($code = str_replace('_', '-', Locale::acceptFromHttp($code))) && isset($languages[$code]))\n\t\t\t\t\t\t|| false !== ($code = array_search(Locale::acceptFromHttp($code), $languages))\n\t\t\t\t\t) {\n\t\t\t\t\t\t$lang = $code;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$lang) {\n\t\t\t\t$lang = \\App\\Language::DEFAULT_LANG;\n\t\t\t}\n\t\t\t$request->set('lang', $lang);\n\t\t}\n\t\treturn $request;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function preProcess(App\\Request $request, $display = true)\n\t{\n\t\tif (preg_match('|^step([0-9])|i', $request->getMode(), $m)) {\n\t\t\t$this->stepNumber = (int) $m[1];\n\t\t}\n\t\tif ('step3' !== $request->getMode()) {\n\t\t\tdate_default_timezone_set('UTC'); // to overcome the pre configuration settings\n\t\t}\n\t\t// Added to redirect to default module if already installed\n\t\t$request->set('module', 'Install');\n\t\t$request = $this->setLanguage($request);\n\t\tif ('step7' !== $request->getMode() && \\App\\Config::main('application_unique_key', false)) {\n\t\t\t$defaultModule = \\App\\Config::main('default_module');\n\t\t\t$defaultModuleInstance = Vtiger_Module_Model::getInstance($defaultModule);\n\t\t\t$defaultView = $defaultModuleInstance->getDefaultViewName();\n\t\t\theader('location: ../index.php?module=' . $defaultModule . '&view=' . $defaultView);\n\t\t}\n\t\t$_SESSION['language'] = $defaultLanguage = ($request->getByType('lang', 1)) ?: \\App\\Language::DEFAULT_LANG;\n\t\tApp\\Language::setTemporaryLanguage($defaultLanguage);\n\t\t$this->loadJsConfig($request);\n\t\t$this->viewer = new Vtiger_Viewer();\n\t\t$this->viewer->setTemplateDir('install/tpl/');\n\t\t$this->viewer->assign('IS_IE', \\App\\RequestUtil::getBrowserInfo()->ie);\n\t\t$this->viewer->assign('LANGUAGE_STRINGS', $this->getJSLanguageStrings($request));\n\t\t$this->viewer->assign('LANG', $request->getByType('lang', 1));\n\t\t$this->viewer->assign('NEXT_STEP', 'step' . ($this->stepNumber + 1));\n\t\t$this->viewer->assign('STEP_NUMBER', $this->stepNumber);\n\t\t$this->viewer->assign('HTMLLANG', substr($defaultLanguage, 0, 2));\n\t\t$this->viewer->assign('LANGUAGE', $defaultLanguage);\n\t\t$this->viewer->assign('STYLES', $this->getHeaderCss($request));\n\t\t$this->viewer->assign('HEADER_SCRIPTS', $this->getHeaderScripts($request));\n\t\t$this->viewer->assign('MODE', $request->getMode());\n\t\t$this->viewer->assign('YETIFORCE_VERSION', \\App\\Version::get());\n\t\t$this->viewer->error_reporting = E_ALL & ~E_NOTICE;\n\t\t$this->viewer->display('InstallPreProcess.tpl');\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function process(App\\Request $request)\n\t{\n\t\t$mode = $request->getMode();\n\t\tif (!empty($mode) && $this->isMethodExposed($mode)) {\n\t\t\treturn $this->{$mode}($request);\n\t\t}\n\t\t$this->step1($request);\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function postProcess(App\\Request $request, $display = true)\n\t{\n\t\t$this->viewer->assign('FOOTER_SCRIPTS', $this->getFooterScripts($request));\n\t\t$this->viewer->display('InstallPostProcess.tpl');\n\t}\n\n\tpublic function step1(App\\Request $request)\n\t{\n\t\t$isMigrate = false;\n\t\tif (is_dir(ROOT_DIRECTORY . '/install/migrate_schema/')) {\n\t\t\t$filesInDir = scandir(ROOT_DIRECTORY . '/install/migrate_schema/');\n\t\t\tif (\\count($filesInDir) > 2) {\n\t\t\t\t$isMigrate = true;\n\t\t\t}\n\t\t}\n\t\t$this->viewer->assign('LANGUAGES', Install_Utils_Model::getLanguages());\n\t\t$this->viewer->assign('IS_MIGRATE', $isMigrate);\n\t\t$this->viewer->display('StepWelcome.tpl');\n\t}\n\n\tpublic function step2(App\\Request $request)\n\t{\n\t\tif ('pl-PL' === $_SESSION['language']) {\n\t\t\t$license = file_get_contents('licenses/LicensePL.txt');\n\t\t} else {\n\t\t\t$license = file_get_contents('licenses/LicenseEN.txt');\n\t\t}\n\t\t$this->viewer->assign('LIBRARIES', \\App\\Installer\\Credits::getCredits());\n\t\t$this->viewer->assign('LICENSE', nl2br($license));\n\t\tif ($request->getRaw('session_id') !== session_id()) {\n\t\t\t$this->viewer->display('SessionError.tpl');\n\t\t} else {\n\t\t\t$this->viewer->display('StepLicense.tpl');\n\t\t}\n\t}\n\n\t/**\n\t * Show choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function stepChooseHost(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('PRODUCT_ClOUD', \\App\\YetiForce\\Shop::getProduct('YetiForceInstallInCloud'));\n\t\t$this->viewer->assign('PRODUCT_SHARED', \\App\\YetiForce\\Shop::getProduct('YetiForceInstallInHosting'));\n\t\t$this->viewer->display('StepChooseHost.tpl');\n\t}\n\n\t/**\n\t * Show buy modal in choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function showBuyModal(App\\Request $request)\n\t{\n\t\t$request = new \\App\\Request([\n\t\t\t'product' => $request->getByType('product'),\n\t\t\t'module' => 'YetiForce',\n\t\t\t'parent' => 'Settings',\n\t\t\t'installation' => true,\n\t\t], false);\n\t\t$instance = new Settings_YetiForce_BuyModal_View();\n\t\t$instance->preProcessAjax($request);\n\t\t$instance->process($request);\n\t\t$instance->postProcessAjax($request);\n\t}\n\n\t/**\n\t * Show product modal in choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function showProductModal(App\\Request $request)\n\t{\n\t\t$request = new \\App\\Request([\n\t\t\t'product' => $request->getByType('product'),\n\t\t\t'module' => 'YetiForce',\n\t\t\t'parent' => 'Settings',\n\t\t\t'installation' => true,\n\t\t], false);\n\t\t$instance = new Settings_YetiForce_ProductModal_View();\n\t\t$instance->preProcessAjax($request);\n\t\t$instance->process($request);\n\t\t$instance->postProcessAjax($request);\n\t}\n\n\tpublic function step3(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('ALL', \\App\\Utils\\ConfReport::getByType([\n\t\t\t'stability', 'security', 'libraries', 'performance', 'environment', 'publicDirectoryAccess', 'writableFilesAndFolders',\n\t\t]));\n\t\t$this->viewer->display('StepVerifyServerConfiguration.tpl');\n\t}\n\n\tpublic function step4(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('CURRENCIES', Install_Utils_Model::getCurrencyList());\n\t\trequire_once ROOT_DIRECTORY . '/modules/Users/UserTimeZonesArray.php';\n\t\t$this->viewer->assign('TIMEZONES', UserTimeZones::getTimeZones());\n\n\t\t$defaultParameters = Install_Utils_Model::getDefaultPreInstallParameters();\n\t\t$this->viewer->assign('USERNAME_BLACKLIST', require ROOT_DIRECTORY . '/config/username_blacklist.php');\n\t\t$this->viewer->assign('DB_HOSTNAME', $defaultParameters['db_server']);\n\t\t$this->viewer->assign('DB_USERNAME', $defaultParameters['db_username']);\n\t\t$this->viewer->assign('DB_PASSWORD', $defaultParameters['db_password']);\n\t\t$this->viewer->assign('DB_NAME', $defaultParameters['db_name']);\n\t\t$this->viewer->assign('ADMIN_NAME', $defaultParameters['admin_name']);\n\t\t$this->viewer->assign('ADMIN_FIRSTNAME', $defaultParameters['admin_firstname']);\n\t\t$this->viewer->assign('ADMIN_LASTNAME', $defaultParameters['admin_lastname']);\n\t\t$this->viewer->assign('ADMIN_PASSWORD', $defaultParameters['admin_password']);\n\t\t$this->viewer->assign('ADMIN_EMAIL', $defaultParameters['admin_email']);\n\t\t$this->viewer->display('StepSystemConfiguration.tpl');\n\t}\n\n\tpublic function step5(App\\Request $request)\n\t{\n\t\tset_time_limit(60); // Override default limit to let install complete.\n\t\t$error = false;\n\t\t$dbConnection['flag'] = true;\n\t\t$configFile = new \\App\\ConfigFile('db');\n\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\ttry {\n\t\t\t\t\t$configFile->set($name, $request->getRaw($name));\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t\t\t$error = true;\n\t\t\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$error) {\n\t\t\t$dbConnection = Install_Utils_Model::checkDbConnection($configFile->getData());\n\t\t\tif (!$dbConnection['flag']) {\n\t\t\t\t$error = true;\n\t\t\t} else {\n\t\t\t\t$configFile->create();\n\t\t\t}\n\t\t}\n\t\t$configFile = new \\App\\ConfigFile('main');\n\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\ttry {\n\t\t\t\t\t$configFile->set($name, $request->get($name));\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t\t\t$error = true;\n\t\t\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$webRoot = ($_SERVER['HTTP_HOST']) ?: $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'];\n\t\t$webRoot .= $_SERVER['REQUEST_URI'];\n\t\t$webRoot = str_replace('index.php', '', $webRoot);\n\t\t$webRoot = (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) ? 'https://' : 'http://') . $webRoot;\n\t\t$tabUrl = explode('/', $webRoot);\n\t\tunset($tabUrl[\\count($tabUrl) - 1], $tabUrl[\\count($tabUrl) - 1]);\n\t\t$webRoot = implode('/', $tabUrl) . '/';\n\t\t$name = 'site_URL';\n\t\ttry {\n\t\t\t$configFile->set($name, $webRoot);\n\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t} catch (\\Throwable $e) {\n\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t$error = true;\n\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t}\n\t\tforeach (['user_name', 'password', 'retype_password', 'firstname', 'lastname', 'admin_email', 'dateformat', 'currency_name'] as $name) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\tswitch ($name) {\n\t\t\t\t\tcase 'currency_name':\n\t\t\t\t\t\t$currencies = Install_Utils_Model::getCurrencyList();\n\t\t\t\t\t\tif (($value = $request->get('currency_name')) && isset($currencies[$value])) {\n\t\t\t\t\t\t\t$_SESSION['config_file_info']['currency_code'] = $currencies[$value][0];\n\t\t\t\t\t\t\t$_SESSION['config_file_info']['currency_symbol'] = $currencies[$value][1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_name':\n\t\t\t\t\t\t$blacklist = require ROOT_DIRECTORY . '/config/username_blacklist.php';\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tif (\\in_array($value, $blacklist) || !preg_match('/^[a-zA-Z0-9_.@-]{3,64}$/', $value)) {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'admin_email':\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tif (!App\\Validator::email($value)) {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'password':\n\t\t\t\t\tcase 'retype_password':\n\t\t\t\t\t\tif ($request->getRaw('password') === $request->getRaw('retype_password')) {\n\t\t\t\t\t\t\t$value = $request->getRaw($name);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$_SESSION['config_file_info'][$name] = $value;\n\t\t\t}\n\t\t}\n\t\t$this->viewer->assign('BREAK_INSTALL', $error);\n\t\t$this->viewer->assign('DB_CONNECTION_INFO', $dbConnection);\n\t\t$this->viewer->assign('INFORMATION', $_SESSION['config_file_info'] ?? []);\n\t\tif (!$error) {\n\t\t\t$this->viewer->assign('CONF_REPORT_RESULT', \\App\\Utils\\ConfReport::getByType(['database']));\n\t\t}\n\t\t$this->viewer->display('StepConfirmConfigurationSettings.tpl');\n\t}\n\n\t/**\n\t * Create configuration file.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\SmartyException\n\t */\n\tpublic function step6(App\\Request $request)\n\t{\n\t\tif (empty($_SESSION['config_file_info'])) {\n\t\t\t\\App\\Log::error('Error generating configuration files, no data in the session', 'Install');\n\t\t\t$this->viewer->assign('ERROR', 'LBL_NO_NO_DATA_IN_SESSION');\n\t\t} else {\n\t\t\t$configFile = new \\App\\ConfigFile('main');\n\t\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\t\tif (isset($_SESSION['config_file_info'][$name])) {\n\t\t\t\t\t$configFile->set($name, $_SESSION['config_file_info'][$name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$configFile->set('application_unique_key', '');\n\t\t\t$configFile->create();\n\t\t}\n\n\t\t$this->viewer->display('StepCompanyDetails.tpl');\n\t}\n\n\tpublic function step7(App\\Request $request)\n\t{\n\t\tset_time_limit(0);\n\t\tif (\\App\\Config::main('application_unique_key', false) && !empty($_SESSION['config_file_info'])) {\n\t\t\t// Initialize and set up tables\n\t\t\t$initSchema = new Install_InitSchema_Model();\n\t\t\ttry {\n\t\t\t\t$initSchema->initialize();\n\t\t\t\t$initSchema->setCompanyDetails($request);\n\t\t\t\tchmod(ROOT_DIRECTORY . '/cron/cron.sh', 0744);\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t$_SESSION['installation_success'] = false;\n\t\t\t\t\\App\\Log::error($e->__toString());\n\t\t\t}\n\t\t\t$this->viewer->assign('USER_NAME', $_SESSION['config_file_info']['user_name'] ?? '');\n\t\t\t$this->viewer->assign('PASSWORD', $_SESSION['config_file_info']['password'] ?? '');\n\t\t}\n\t\tif (!($success = $_SESSION['installation_success'] ?? false)) {\n\t\t\tInstall_Utils_Model::cleanConfiguration();\n\t\t} else {\n\t\t\tunset($_SESSION['language']);\n\t\t}\n\t\t$this->viewer->assign('INSTALLATION_SUCCESS', $success);\n\t\t$this->viewer->display('StepInstall.tpl');\n\t}\n\n\tprotected function preProcessDisplay(App\\Request $request)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function validateRequest(App\\Request $request)\n\t{\n\t\t$request->validateWriteAccess(true);\n\t}\n\n\t/**\n\t * Retrieves css styles that need to loaded in the page.\n\t *\n\t * @param \\App\\Request $request - request model\n\t *\n\t * @return Vtiger_CssScript_Model[]\n\t */\n\tpublic function getHeaderCss(App\\Request $request)\n\t{\n\t\t$headerCssInstances = parent::getHeaderCss($request);\n\t\t$cssFileNames = [\n\t\t\t'~libraries/datatables.net-bs4/css/dataTables.bootstrap4.css',\n\t\t\t'~libraries/datatables.net-responsive-bs4/css/responsive.bootstrap4.css',\n\t\t\t'~libraries/@fortawesome/fontawesome-free/css/all.css',\n\t\t\t'~install/tpl/resources/css/style.css',\n\t\t\t'~install/tpl/resources/css/mkCheckbox.css',\n\t\t];\n\t\t$cssInstances = $this->checkAndConvertCssStyles($cssFileNames);\n\n\t\treturn array_merge($headerCssInstances, $cssInstances);\n\t}\n\n\tpublic function getHeaderScripts(App\\Request $request)\n\t{\n\t\treturn $this->checkAndConvertJsScripts([\n\t\t\t'libraries.jquery.dist.jquery',\n\t\t]);\n\t}\n\n\t/**\n\t * Function to get the list of Script models to be included.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return Vtiger_JsScript_Model[]\n\t */\n\tpublic function getFooterScripts(App\\Request $request)\n\t{\n\t\t$viewScripts = [];\n\t\tif ('step7' === $request->getMode()) {\n\t\t\treturn [];\n\t\t}\n\t\tif ('stepChooseHost' === $request->getMode()) {\n\t\t\t$viewScripts = $this->checkAndConvertJsScripts([\n\t\t\t\t'~layouts/resources/Field.js',\n\t\t\t\t'~layouts/resources/validator/BaseValidator.js',\n\t\t\t\t'~layouts/resources/validator/FieldValidator.js',\n\t\t\t\t'modules.Settings.YetiForce.resources.Shop',\n\t\t\t]);\n\t\t}\n\t\treturn array_merge(parent::getFooterScripts($request), $viewScripts, $this->checkAndConvertJsScripts([\n\t\t\t'~libraries/datatables.net/js/jquery.dataTables.js',\n\t\t\t'~libraries/datatables.net-bs4/js/dataTables.bootstrap4.js',\n\t\t\t'~libraries/datatables.net-responsive/js/dataTables.responsive.js',\n\t\t\t'~libraries/datatables.net-responsive-bs4/js/responsive.bootstrap4.js',\n\t\t\t'~install/tpl/resources/Index.js',\n\t\t]));\n\t}\n}\n", "<?php\n/* +**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.1\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com\n * ********************************************************************************** */\n\nclass Users_Login_View extends \\App\\Controller\\View\\Base\n{\n\t/** {@inheritdoc} */\n\tpublic $csrfActive = false;\n\n\t/** {@inheritdoc} */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\tif ($nonce = \\App\\Session::get('CSP_TOKEN')) {\n\t\t\t$this->headers->csp['script-src'] .= \" 'nonce-{$nonce}'\";\n\t\t}\n\t\t$this->headers->csp['default-src'] = '\\'self\\'';\n\t\t$this->headers->csp['script-src'] = str_replace([\n\t\t\t' \\'unsafe-inline\\'', ' blob:'\n\t\t], '', $this->headers->csp['script-src']);\n\t\t$this->headers->csp['form-action'] = '\\'self\\'';\n\t\t$this->headers->csp['style-src'] = '\\'self\\'';\n\t\t$this->headers->csp['base-uri'] = '\\'self\\'';\n\t\t$this->headers->csp['object-src'] = '\\'none\\'';\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function loginRequired()\n\t{\n\t\treturn false;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function preProcess(App\\Request $request, $display = true)\n\t{\n\t\tparent::preProcess($request, false);\n\t\t$viewer = $this->getViewer($request);\n\t\t$viewer->assign('QUALIFIED_MODULE', $request->getModule());\n\t\t$viewer->assign('SHOW_FOOTER_BAR', false);\n\t\tif ($display) {\n\t\t\t$this->preProcessDisplay($request);\n\t\t}\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function postProcess(App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function process(App\\Request $request)\n\t{\n\t\t$viewer = $this->getViewer($request);\n\t\t$viewer->assign('IS_BLOCKED_IP', Settings_BruteForce_Module_Model::getCleanInstance()->isBlockedIp());\n\t\tif (\\App\\Session::has('UserLoginMessage')) {\n\t\t\t$viewer->assign('MESSAGE', \\App\\Session::get('UserLoginMessage'));\n\t\t\t$viewer->assign('MESSAGE_TYPE', \\App\\Session::get('UserLoginMessageType'));\n\t\t\t\\App\\Session::delete('UserLoginMessage');\n\t\t\t\\App\\Session::delete('UserLoginMessageType');\n\t\t}\n\t\tif ('2fa' === \\App\\Session::get('LoginAuthyMethod')) {\n\t\t\t$viewer->view('Login2faTotp.tpl', 'Users');\n\t\t} else {\n\t\t\t$viewer->assign('LANGUAGE_SELECTION', App\\Config::main('langInLoginView'));\n\t\t\t$viewer->assign('LAYOUT_SELECTION', App\\Config::main('layoutInLoginView'));\n\t\t\t$viewer->view('Login.tpl', 'Users');\n\t\t}\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function getHeaderCss(App\\Request $request)\n\t{\n\t\treturn array_merge(parent::getHeaderCss($request), $this->checkAndConvertCssStyles([\n\t\t\t'modules.Users.Login'\n\t\t]));\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function getHeaderScripts(App\\Request $request)\n\t{\n\t\treturn array_merge(parent::getHeaderScripts($request), $this->checkAndConvertJsScripts([\n\t\t\t'~libraries/device-uuid/lib/device-uuid.js',\n\t\t\t'modules.Users.resources.Login'\n\t\t]));\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Abstract action controller file.\n *\n * @package   Controller\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App\\Controller;\n\n/**\n * Abstract action controller class.\n */\nabstract class Action extends Base\n{\n\t/**\n\t * Process action.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function process(\\App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function validateRequest(\\App\\Request $request)\n\t{\n\t\t$request->validateWriteAccess();\n\t}\n}\n", "<?php\n/**\n * Abstract base controller file.\n *\n * @package   Controller\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App\\Controller;\n\n/**\n * Abstract base controller class.\n */\nabstract class Base\n{\n\t/** @var \\App\\Headers Headers instance. */\n\tpublic $headers;\n\n\t/**\n\t * Activated language locale.\n\t *\n\t * @var bool\n\t */\n\tprotected static $activatedLocale = false;\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->headers = \\App\\Controller\\Headers::getInstance();\n\t\tif (!self::$activatedLocale && \\App\\Config::performance('CHANGE_LOCALE')) {\n\t\t\t\\App\\Language::initLocale();\n\t\t\tself::$activatedLocale = true;\n\t\t}\n\t\tif (\\App\\Config::security('csrfActive')) {\n\t\t\trequire_once 'config/csrf_config.php';\n\t\t\t\\CsrfMagic\\Csrf::init();\n\t\t}\n\t}\n\n\t/**\n\t * Function to check login required permission.\n\t *\n\t * @return bool\n\t */\n\tpublic function loginRequired()\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Function to check permission.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tabstract public function checkPermission(\\App\\Request $request);\n\n\t/**\n\t * Process function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tabstract public function process(\\App\\Request $request);\n\n\t/**\n\t * Function to validate request method.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function validateRequest(\\App\\Request $request)\n\t{\n\t\t$request->validateReadAccess();\n\t}\n\n\t/**\n\t * Pre process ajax function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function preProcessAjax(\\App\\Request $request)\n\t{\n\t}\n\n\t/**\n\t * Pre process function.\n\t *\n\t * @param \\App\\Request $request\n\t * @param bool         $display\n\t */\n\tpublic function preProcess(\\App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/**\n\t * Post process function.\n\t *\n\t * @param \\App\\Request $request\n\t * @param bool         $display\n\t */\n\tpublic function postProcess(\\App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/**\n\t * Post process ajax function.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function postProcessAjax(\\App\\Request $request)\n\t{\n\t}\n\n\t/**\n\t * Send headers.\n\t */\n\tpublic function sendHeaders()\n\t{\n\t\t$this->headers->send();\n\t}\n\n\t/**\n\t * Function to check if session is extended.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return bool\n\t */\n\tpublic function isSessionExtend(\\App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n}\n", "<?php\n/**\n * Request basic class.\n *\n * @package App\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App;\n\n/**\n * Request basic class.\n */\nclass Request\n{\n\t/**\n\t * Raw request data.\n\t *\n\t * @var array\n\t */\n\tprotected $rawValues = [];\n\n\t/**\n\t * Headers request.\n\t *\n\t * @var array\n\t */\n\tprotected $headers;\n\n\t/**\n\t * Self instance.\n\t *\n\t * @var Request\n\t */\n\tprotected static $request;\n\n\t/**\n\t * Purified request values for get.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByGet = [];\n\n\t/**\n\t * Purified request values for type.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByType = [];\n\n\t/**\n\t * Purified request values for integer.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByInteger = [];\n\n\t/**\n\t * Purified request values for array.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByArray = [];\n\n\t/**\n\t * Purified request values for exploded.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByExploded = [];\n\n\t/**\n\t * Purified request values for multi dimension array.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByMultiDimension = [];\n\n\t/**\n\t * Purified request values for date range.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByDateRange = [];\n\n\t/**\n\t * Purified request values for date html.\n\t *\n\t * @var array\n\t */\n\tprotected $purifiedValuesByHtml = [];\n\t/**\n\t * List of headings and sanitization methods.\n\t *\n\t * @var array\n\t */\n\tpublic $headersPurifierMap = [\n\t];\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $rawValues\n\t * @param bool  $overwrite\n\t */\n\tpublic function __construct($rawValues, $overwrite = true)\n\t{\n\t\t$this->rawValues = $rawValues;\n\t\tif ($overwrite) {\n\t\t\tstatic::$request = $this;\n\t\t}\n\t}\n\n\t/**\n\t * Function to get the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value Default value\n\t *\n\t * @return mixed\n\t */\n\tpublic function get($key, $value = '')\n\t{\n\t\tif (isset($this->purifiedValuesByGet[$key])) {\n\t\t\treturn $this->purifiedValuesByGet[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t} else {\n\t\t\treturn $value;\n\t\t}\n\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t$decodeValue = Json::decode($value);\n\t\t\tif (isset($decodeValue)) {\n\t\t\t\t$value = $decodeValue;\n\t\t\t}\n\t\t}\n\t\tif ($value) {\n\t\t\t$value = Purifier::purify($value);\n\t\t}\n\n\t\treturn $this->purifiedValuesByGet[$key] = $value;\n\t}\n\n\t/**\n\t * Purify by data type.\n\t *\n\t * Type list:\n\t * Standard - only words\n\t * 1 - only words\n\t * Alnum - word and int\n\t * 2 - word and int\n\t *\n\t * @param string     $key     Key name\n\t * @param int|string $type    Data type that is only acceptable, default only words 'Standard'\n\t * @param mixed      $convert\n\t *\n\t * @return bool|mixed\n\t */\n\tpublic function getByType($key, $type = 'Standard', $convert = false)\n\t{\n\t\tif (isset($this->purifiedValuesByType[$key][$type])) {\n\t\t\treturn $this->purifiedValuesByType[$key][$type];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\treturn $this->purifiedValuesByType[$key][$type] = Purifier::purifyByType($this->rawValues[$key], $type, $convert);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to get the boolean value for a given key.\n\t *\n\t * @param string $key\n\t * @param bool   $defaultValue Default value\n\t *\n\t * @return bool\n\t */\n\tpublic function getBoolean(string $key, bool $defaultValue = null)\n\t{\n\t\t$value = $this->get($key, $defaultValue);\n\t\tif (\\is_bool($value)) {\n\t\t\treturn $value;\n\t\t}\n\t\treturn 0 === strcasecmp('true', (string) $value) || '1' === (string) $value;\n\t}\n\n\t/**\n\t * Function to get the integer value for a given key.\n\t *\n\t * @param string $key\n\t * @param int    $value\n\t *\n\t * @return int\n\t */\n\tpublic function getInteger($key, $value = 0)\n\t{\n\t\tif (isset($this->purifiedValuesByInteger[$key])) {\n\t\t\treturn $this->purifiedValuesByInteger[$key];\n\t\t}\n\t\tif (!isset($this->rawValues[$key])) {\n\t\t\treturn $value;\n\t\t}\n\t\tif (false !== ($value = filter_var($this->rawValues[$key], FILTER_VALIDATE_INT))) {\n\t\t\treturn $this->purifiedValuesByInteger[$key] = $value;\n\t\t}\n\n\t\tthrow new \\App\\Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||$key||{$this->rawValues[$key]}\", 406);\n\t}\n\n\t/**\n\t * Function to get the array values for a given key.\n\t *\n\t * @param string      $key\n\t * @param mixed       $type\n\t * @param array       $value\n\t * @param string|null $keyType\n\t *\n\t * @return array\n\t */\n\tpublic function getArray($key, $type = false, $value = [], ?string $keyType = null)\n\t{\n\t\tif (isset($this->purifiedValuesByArray[$key])) {\n\t\t\treturn $this->purifiedValuesByArray[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t\tif (!$value) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t\t$decodeValue = Json::decode($value);\n\t\t\t\tif (isset($decodeValue)) {\n\t\t\t\t\t$value = $decodeValue;\n\t\t\t\t} else {\n\t\t\t\t\t\\App\\Log::warning('Invalid data format, problem encountered while decoding JSON. Data should be in JSON format. Data: ' . $value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($value) {\n\t\t\t\tif (\\is_array($value)) {\n\t\t\t\t\t$input = [];\n\t\t\t\t\tforeach ($value as $k => $v) {\n\t\t\t\t\t\tif (!\\is_int($k)) {\n\t\t\t\t\t\t\t$k = $keyType ? Purifier::purifyByType($k, $keyType) : Purifier::purify($k);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$input[$k] = $type ? Purifier::purifyByType($v, $type) : Purifier::purify($v);\n\t\t\t\t\t}\n\t\t\t\t\t$value = $input;\n\t\t\t\t} else {\n\t\t\t\t\t$value = $type ? Purifier::purifyByType($value, $type) : Purifier::purify($value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $this->purifiedValuesByArray[$key] = (array) $value;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Function to get the exploded values for a given key.\n\t *\n\t * @param string      $key\n\t * @param string      $delimiter\n\t * @param bool|string $type\n\t *\n\t * @return array\n\t */\n\tpublic function getExploded($key, $delimiter = ',', $type = false)\n\t{\n\t\tif (isset($this->purifiedValuesByExploded[$key])) {\n\t\t\treturn $this->purifiedValuesByExploded[$key];\n\t\t}\n\t\t$value = [];\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\tif ('' === $this->rawValues[$key]) {\n\t\t\t\treturn $value;\n\t\t\t}\n\t\t\t$value = explode($delimiter, $this->rawValues[$key]);\n\t\t\tif ($value) {\n\t\t\t\t$value = $type ? Purifier::purifyByType($value, $type) : Purifier::purify($value);\n\t\t\t}\n\n\t\t\treturn $this->purifiedValuesByExploded[$key] = $value;\n\t\t}\n\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Purify multi dimension array.\n\t *\n\t * @param mixed        $values\n\t * @param array|string $template\n\t *\n\t * @throws \\App\\Exceptions\\IllegalValue\n\t *\n\t * @return mixed\n\t */\n\tprivate function purifyMultiDimensionArray($values, $template)\n\t{\n\t\tif (\\is_array($template)) {\n\t\t\tforeach ($values as $firstKey => $value) {\n\t\t\t\tif (\\is_array($value)) {\n\t\t\t\t\tif (1 === \\count($template)) {\n\t\t\t\t\t\t$template = current($template);\n\t\t\t\t\t}\n\t\t\t\t\tforeach ($value as $secondKey => $val) {\n\t\t\t\t\t\t$tempTemplate = $template;\n\t\t\t\t\t\tif (isset($template[$firstKey])) {\n\t\t\t\t\t\t\t$tempTemplate = $template[$firstKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (1 === \\count($tempTemplate)) {\n\t\t\t\t\t\t\t$tempTemplate = current($tempTemplate);\n\t\t\t\t\t\t} elseif (!isset($tempTemplate[$secondKey])) {\n\t\t\t\t\t\t\tthrow new Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||{$secondKey}\", 406);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$tempTemplate = $tempTemplate[$secondKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$values[$firstKey][$secondKey] = $this->purifyMultiDimensionArray($val, $tempTemplate);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (\\is_array($template) && 1 === \\count($template)) {\n\t\t\t\t\t\t$values[$firstKey] = $this->purifyMultiDimensionArray($value, current($template));\n\t\t\t\t\t} elseif (isset($template[$firstKey])) {\n\t\t\t\t\t\t$values[$firstKey] = $this->purifyMultiDimensionArray($value, $template[$firstKey]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Exceptions\\IllegalValue(\"ERR_NOT_ALLOWED_VALUE||{$firstKey}||\" . print_r($template, true), 406);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$values = empty($values) ? $values : ($template ? Purifier::purifyByType($values, $template) : Purifier::purify($values));\n\t\t}\n\t\treturn $values;\n\t}\n\n\t/**\n\t * Function to get multi dimension array.\n\t *\n\t * @param string $key\n\t * @param array  $template\n\t *\n\t * @return array\n\t */\n\tpublic function getMultiDimensionArray(string $key, array $template): array\n\t{\n\t\t$return = [];\n\t\tif (isset($this->purifiedValuesByMultiDimension[$key])) {\n\t\t\t$return = $this->purifiedValuesByMultiDimension[$key];\n\t\t} elseif (isset($this->rawValues[$key]) && ($value = $this->rawValues[$key])) {\n\t\t\tif (\\is_string($value) && (0 === strpos($value, '[') || 0 === strpos($value, '{'))) {\n\t\t\t\t$decodeValue = Json::decode($value);\n\t\t\t\tif (null !== $decodeValue) {\n\t\t\t\t\t$value = $decodeValue;\n\t\t\t\t} else {\n\t\t\t\t\tLog::warning('Invalid data format, problem encountered while decoding JSON. Data should be in JSON format. Data: ' . $value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value = (array) $this->purifyMultiDimensionArray($value, $template);\n\t\t\t$return = $this->purifiedValuesByMultiDimension[$key] = $value;\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Function to get the date range values for a given key.\n\t *\n\t * @param string $key request param like 'createdtime'\n\t *\n\t * @return array\n\t */\n\tpublic function getDateRange($key)\n\t{\n\t\treturn $this->getByType($key, 'DateRangeUserFormat');\n\t}\n\n\t/**\n\t * Function to get html the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value\n\t *\n\t * @return mixed\n\t */\n\tpublic function getForHtml($key, $value = '')\n\t{\n\t\tif (isset($this->purifiedValuesByHtml[$key])) {\n\t\t\treturn $this->purifiedValuesByHtml[$key];\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\t$value = $this->rawValues[$key];\n\t\t}\n\t\tif ($value) {\n\t\t\t$value = \\App\\Purifier::purifyHtml($value);\n\t\t}\n\n\t\treturn $this->purifiedValuesByHtml[$key] = $value;\n\t}\n\n\t/**\n\t * Function to get the value if its safe to use for SQL Query (column).\n\t *\n\t * @param string $key\n\t * @param bool   $skipEmtpy\n\t *\n\t * @return string\n\t */\n\tpublic function getForSql($key, $skipEmtpy = true)\n\t{\n\t\treturn Purifier::purifySql($this->get($key), $skipEmtpy);\n\t}\n\n\t/**\n\t * Function to get the request mode.\n\t *\n\t * @return string\n\t */\n\tpublic function getMode()\n\t{\n\t\treturn '' !== $this->getRaw('mode') ? $this->getByType('mode', 'Alnum') : '';\n\t}\n\n\t/**\n\t * Get all data.\n\t *\n\t * @return array\n\t */\n\tpublic function getAll()\n\t{\n\t\tforeach ($this->rawValues as $key => $value) {\n\t\t\t$this->get($key);\n\t\t}\n\n\t\treturn $this->purifiedValuesByGet;\n\t}\n\n\t/**\n\t * Get all raw data.\n\t *\n\t * @return array\n\t */\n\tpublic function getAllRaw()\n\t{\n\t\treturn $this->rawValues;\n\t}\n\n\t/**\n\t * Get raw value.\n\t *\n\t * @param string $key\n\t * @param mixed  $defaultValue\n\t *\n\t * @return mixed\n\t */\n\tpublic function getRaw($key, $defaultValue = '')\n\t{\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\treturn $this->rawValues[$key];\n\t\t}\n\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Get all headers.\n\t *\n\t * @return string[]\n\t */\n\tpublic function getHeaders()\n\t{\n\t\tif (isset($this->headers)) {\n\t\t\treturn $this->headers;\n\t\t}\n\t\t$data = array_change_key_case(getallheaders(), CASE_LOWER);\n\t\tforeach ($data as $key => &$value) {\n\t\t\tif ('' !== $value) {\n\t\t\t\t$value = isset($this->headersPurifierMap[$key]) ? Purifier::purifyByType($value, $this->headersPurifierMap[$key]) : Purifier::purify($value);\n\t\t\t}\n\t\t}\n\t\treturn $this->headers = $data;\n\t}\n\n\t/**\n\t * Get header for a given key.\n\t *\n\t * @param string $key\n\t *\n\t * @return string\n\t */\n\tpublic function getHeader($key)\n\t{\n\t\tif (!isset($this->headers)) {\n\t\t\t$this->getHeaders();\n\t\t}\n\t\treturn $this->headers[$key] ?? null;\n\t}\n\n\t/**\n\t * Get request method.\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t *\n\t * @return string\n\t */\n\tpublic static function getRequestMethod()\n\t{\n\t\t$method = $_SERVER['REQUEST_METHOD'];\n\t\tif ('POST' === $method && isset($_SERVER['HTTP_X_HTTP_METHOD'])) {\n\t\t\tif ('DELETE' === $_SERVER['HTTP_X_HTTP_METHOD']) {\n\t\t\t\t$method = 'DELETE';\n\t\t\t} elseif ('PUT' === $_SERVER['HTTP_X_HTTP_METHOD']) {\n\t\t\t\t$method = 'PUT';\n\t\t\t} else {\n\t\t\t\tthrow new \\App\\Exceptions\\AppException('Unexpected Header');\n\t\t\t}\n\t\t}\n\t\treturn strtoupper($method);\n\t}\n\n\t/**\n\t * Get server and execution environment information.\n\t *\n\t * @param string $key\n\t * @param mixed  $default\n\t *\n\t * @return bool\n\t */\n\tpublic function getServer($key, $default = false)\n\t{\n\t\tif (!isset($_SERVER[$key])) {\n\t\t\treturn $default;\n\t\t}\n\t\treturn Purifier::purifyByType($_SERVER[$key], 'Text');\n\t}\n\n\t/**\n\t * Get module name.\n\t *\n\t * @param bool $raw\n\t *\n\t * @return string\n\t */\n\tpublic function getModule($raw = true)\n\t{\n\t\t$moduleName = $this->getByType('module', 'Alnum');\n\t\tif (!$raw && !$this->isEmpty('parent', true) && 'Settings' === ($parentModule = $this->getByType('parent', 'Alnum'))) {\n\t\t\t$moduleName = \"$parentModule:$moduleName\";\n\t\t}\n\t\treturn $moduleName;\n\t}\n\n\t/**\n\t * Check for existence of key.\n\t *\n\t * @param string $key\n\t *\n\t * @return bool\n\t */\n\tpublic function has($key)\n\t{\n\t\treturn isset($this->rawValues[$key]);\n\t}\n\n\t/**\n\t * Function to check if the key is empty.\n\t *\n\t * @param string $key\n\t * @param bool   $emptyFunction\n\t *\n\t * @return bool\n\t */\n\tpublic function isEmpty($key, $emptyFunction = false)\n\t{\n\t\tif ($emptyFunction) {\n\t\t\treturn empty($this->rawValues[$key]);\n\t\t}\n\t\treturn !isset($this->rawValues[$key]) || '' === $this->rawValues[$key];\n\t}\n\n\t/**\n\t * Function to set the value for a given key.\n\t *\n\t * @param string $key\n\t * @param mixed  $value\n\t * @param bool   $onlyRaw\n\t *\n\t * @return $this\n\t */\n\tpublic function set($key, $value, bool $onlyRaw = false): self\n\t{\n\t\tif ($onlyRaw) {\n\t\t\t$this->rawValues[$key] = $value;\n\t\t} else {\n\t\t\t$this->rawValues[$key] = $this->purifiedValuesByGet[$key] = $this->purifiedValuesByInteger[$key] = $this->purifiedValuesByHtml[$key] = $value;\n\t\t\t$this->purifiedValuesByType[$key] = [];\n\t\t}\n\t\treturn $this;\n\t}\n\n\t/**\n\t * Function to remove the value for a given key.\n\t *\n\t * @param string $key\n\t */\n\tpublic function delete($key)\n\t{\n\t\tif (isset($this->purifiedValuesByGet[$key])) {\n\t\t\tunset($this->purifiedValuesByGet[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByInteger[$key])) {\n\t\t\tunset($this->purifiedValuesByInteger[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByType[$key])) {\n\t\t\tunset($this->purifiedValuesByType[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByHtml[$key])) {\n\t\t\tunset($this->purifiedValuesByHtml[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByArray[$key])) {\n\t\t\tunset($this->purifiedValuesByArray[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByDateRange[$key])) {\n\t\t\tunset($this->purifiedValuesByDateRange[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByExploded[$key])) {\n\t\t\tunset($this->purifiedValuesByExploded[$key]);\n\t\t}\n\t\tif (isset($this->purifiedValuesByMultiDimension[$key])) {\n\t\t\tunset($this->purifiedValuesByMultiDimension[$key]);\n\t\t}\n\t\tif (isset($this->rawValues[$key])) {\n\t\t\tunset($this->rawValues[$key]);\n\t\t}\n\t}\n\n\t/**\n\t * Get all request keys.\n\t *\n\t * @return array\n\t */\n\tpublic function getKeys()\n\t{\n\t\treturn array_keys($this->rawValues);\n\t}\n\n\t/**\n\t * Function to check if the ajax request.\n\t *\n\t * @return bool\n\t */\n\tpublic function isAjax()\n\t{\n\t\tif (!empty($_SERVER['HTTP_X_PJAX']) && true === $_SERVER['HTTP_X_PJAX']) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Is json.\n\t *\n\t * @return bool\n\t */\n\tpublic function isJSON()\n\t{\n\t\treturn false !== strpos($this->getHeader('accept'), 'application/json');\n\t}\n\n\t/**\n\t * Validating read access request.\n\t *\n\t * @throws \\App\\Exceptions\\Csrf\n\t */\n\tpublic function validateReadAccess()\n\t{\n\t\t// Referer check if present - to over come && Check for user post authentication.\n\t\tif (isset($_SERVER['HTTP_REFERER']) && \\App\\User::getCurrentUserId() && 'Install' !== $this->get('module')) {\n\t\t\t$allowed = array_merge(\\Config\\Security::$allowedFrameDomains, \\Config\\Security::$allowedFormDomains);\n\t\t\t$allowed[] = \\App\\Config::main('site_URL');\n\t\t\t$throw = true;\n\t\t\tforeach ($allowed as $value) {\n\t\t\t\tif (0 === stripos($_SERVER['HTTP_REFERER'], $value)) {\n\t\t\t\t\t$throw = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($throw) {\n\t\t\t\tthrow new \\App\\Exceptions\\Csrf('Illegal request');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validating write access request.\n\t *\n\t * @param bool $skipRequestTypeCheck\n\t *\n\t * @throws \\App\\Exceptions\\Csrf\n\t */\n\tpublic function validateWriteAccess($skipRequestTypeCheck = false)\n\t{\n\t\tif (!$skipRequestTypeCheck && 'POST' !== $_SERVER['REQUEST_METHOD']) {\n\t\t\tthrow new \\App\\Exceptions\\Csrf('Invalid request - validate Write Access');\n\t\t}\n\t\t$this->validateReadAccess();\n\t\tif (\\App\\Config::security('csrfActive')) {\n\t\t\t\\CsrfMagic\\Csrf::check();\n\t\t}\n\t}\n\n\t/**\n\t * Static instance initialization.\n\t *\n\t * @param array|bool $request\n\t *\n\t * @return Request\n\t */\n\tpublic static function init($request = false)\n\t{\n\t\tif (!static::$request) {\n\t\t\tstatic::$request = new self($request ?: $_REQUEST);\n\t\t}\n\t\treturn static::$request;\n\t}\n\n\t/**\n\t * Support static methods, all functions must start with \"_\".\n\t *\n\t * @param string     $name\n\t * @param array|null $arguments\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t *\n\t * @return mixed\n\t */\n\tpublic static function __callStatic($name, $arguments = null)\n\t{\n\t\tif (!static::$request) {\n\t\t\tstatic::init();\n\t\t}\n\t\t$function = ltrim($name, '_');\n\t\tif (!method_exists(static::$request, $function)) {\n\t\t\tthrow new \\App\\Exceptions\\AppException('Method not found');\n\t\t}\n\t\tif (empty($arguments)) {\n\t\t\treturn static::$request->{$function}();\n\t\t}\n\t\t$first = array_shift($arguments);\n\t\tif (empty($arguments)) {\n\t\t\treturn static::$request->{$function}($first);\n\t\t}\n\t\treturn static::$request->{$function}($first, $arguments[0]);\n\t}\n}\n", "<?php\n/**\n * Main config.\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n */\nreturn [\n\t'api' => [\n\t\t'enabledServices' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of active services. Available: dav, webservice',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && empty(array_diff($arg, ['dav', 'webservice']));\n\t\t\t}\n\t\t],\n\t\t'enableBrowser' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableCardDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableCalDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableWebDAV' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Dav configuration. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'enableEmailPortal' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Webservice config. Enabling contact notifications about the new account in the portal. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ENCRYPT_DATA_TRANSFER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Webservice config. Available: false, true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'AUTH_METHOD' => [\n\t\t\t'default' => 'Basic',\n\t\t\t'description' => 'Webservice config.',\n\t\t\t'validation' => function () {\n\t\t\t\treturn 'Basic' === func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'PRIVATE_KEY' => [\n\t\t\t'default' => 'config/private.key',\n\t\t\t'description' => 'Webservice config.'\n\t\t],\n\t\t'PUBLIC_KEY' => [\n\t\t\t'default' => 'config/public.key',\n\t\t\t'description' => 'Webservice config.'\n\t\t]\n\t],\n\t'main' => [\n\t\t'USE_RTE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Use rte',\n\t\t],\n\t\t'PORTAL_URL' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Url for customer portal (Example: https://portal.yetiforce.com/)',\n\t\t],\n\t\t//\t\t'HELPDESK_SUPPORT_NAME' => [\n\t\t//\t\t\t'default' => 'your-support name',\n\t\t//\t\t\t'description' => 'Helpdesk support email id and support name (Example: \"support@yetiforce.com\" and \"yetiforce support\")',\n\t\t//\t\t\t'validation' => ''\n\t\t//\t\t],\n\t\t'HELPDESK_SUPPORT_EMAIL_REPLY' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Help desk support email reply',\n\t\t],\n\t\t'site_URL' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Backslash is required at the end of URL',\n\t\t\t'validation' => '\\App\\Validator::url'\n\t\t],\n\t\t'cache_dir' => [\n\t\t\t'default' => 'cache/',\n\t\t\t'description' => 'Cache directory path'\n\t\t],\n\t\t'tmp_dir' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => 'return self::$cache_dir . \"images/\";',\n\t\t\t'description' => 'Default value prepended by cache_dir = images/',\n\t\t],\n\t\t'upload_maxsize' => [\n\t\t\t'default' => 52428800,\n\t\t\t'description' => 'Maximum file size for uploaded files in bytes also used when uploading import files: upload_maxsize default value = 52428800 (50MB)',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && ($arg * 1048576) <= \\vtlib\\Functions::getMaxUploadSize();\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0) * 1048576;\n\t\t\t}\n\t\t],\n\t\t'allow_exports' => [\n\t\t\t'default' => 'all',\n\t\t\t'description' => 'Flag to allow export functionality: \"all\" - to allow anyone to use exports, \"admin\" - to only allow admins to export, \"none\" -  to block exports completely',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['all', 'admin', 'none']);\n\t\t\t}\n\t\t],\n\t\t'upload_badext' => [\n\t\t\t'default' => ['php', 'php3', 'php4', 'php5', 'pl', 'cgi', 'py', 'asp', 'cfm', 'js', 'vbs', 'html', 'htm', 'exe', 'bin', 'bat', 'sh', 'dll', 'phps', 'phtml', 'xhtml', 'rb', 'msi', 'jsp', 'shtml', 'sth', 'shtm'],\n\t\t\t'description' => 'Files with one of these extensions will have \".txt\" appended to their filename on upload.'\n\t\t],\n\t\t'list_max_entries_per_page' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'List max entries per page: default value = 20',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'default_module' => [\n\t\t\t'default' => 'Home',\n\t\t\t'description' => 'Default module: default value = Home',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn true === \\App\\Module::isModuleActive($arg);\n\t\t\t}\n\t\t],\n\t\t'default_charset' => [\n\t\t\t'default' => 'UTF-8',\n\t\t\t'description' => 'Default charset:  default value = \"UTF-8\"',\n\t\t\t'validation' => function () {\n\t\t\t\treturn 'UTF-8' === func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'default_language' => [\n\t\t\t'default' => 'en-US',\n\t\t\t'description' => 'Default language: default value = en-US',\n\t\t\t'validation' => '\\App\\Validator::languageTag',\n\t\t],\n\t\t'application_unique_key' => [\n\t\t\t'default' => sha1(time() + random_int(1, 9999999)),\n\t\t\t'description' => 'Unique Application Key',\n\t\t\t'validation' => function () {\n\t\t\t\treturn !class_exists('\\\\Config\\\\Main');\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn sha1(time() + random_int(1, 9999999));\n\t\t\t}\n\t\t],\n\t\t'listview_max_textlength' => [\n\t\t\t'default' => 40,\n\t\t\t'description' => 'Trim descriptions, titles in listviews to this value',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'php_max_execution_time' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Maximum time limit for PHP script execution (in seconds)'\n\t\t],\n\t\t'default_timezone' => [\n\t\t\t'default' => '_TIMEZONE_',\n\t\t\t'description' => 'Set the default timezone as per your preference',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, timezone_identifiers_list());\n\t\t\t}\n\t\t],\n\t\t'title_max_length' => [\n\t\t\t'default' => 60,\n\t\t\t'description' => 'Maximum length of characters for title',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'href_max_length' => [\n\t\t\t'default' => 35,\n\t\t\t'description' => 'Maximum length for href tag',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'MINIMUM_CRON_FREQUENCY' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'Minimum cron frequency [min]',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (100 >= $arg) && (0 < $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'davStorageDir' => [\n\t\t\t'default' => 'storage/Files',\n\t\t\t'description' => 'Update the current session id with a newly generated one after login',\n\t\t],\n\t\t'systemMode' => [\n\t\t\t'default' => 'prod',\n\t\t\t'description' => 'System mode. Available: prod, demo, test',\n\t\t\t'validationValues' => ['prod', 'demo', 'test']\n\t\t],\n\t\t'listMaxEntriesMassEdit' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => 'Maximum number of records in a mass edition',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn $arg && \\App\\Validator::naturalNumber($arg) && (5000 >= $arg);\n\t\t\t},\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'backgroundClosingModal' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable closing of modal window by clicking on the background',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'isActiveSendingMails' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Is sending emails active?'\n\t\t],\n\t\t'isActiveRecordTemplate' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Activates / deactivates batch adding of records',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'unblockedTimeoutCronTasks' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should the task in cron be unblocked if the script execution time was exceeded?'\n\t\t],\n\t\t'maxExecutionCronTime' => [\n\t\t\t'default' => 3600,\n\t\t\t'description' => 'The maximum time of executing a cron. Recommended the same as the max_exacution_time parameter value.'\n\t\t],\n\t\t'langInLoginView' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"System's language selection in the login window (true/false).\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'layoutInLoginView' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"System's layout selection in the login window (true/false)\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'defaultLayout' => [\n\t\t\t'default' => 'basic',\n\t\t\t'description' => 'Set the default layout',\n\t\t\t'validation' => function () {\n\t\t\t\treturn isset(\\App\\Layout::getAllLayouts()[func_get_arg(0)]);\n\t\t\t}\n\t\t],\n\t\t'phoneFieldAdvancedVerification' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable advanced phone number validation. Enabling it will block saving invalid phone number.'\n\t\t],\n\t\t'phoneFieldAdvancedHrefFormat' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('\\libphonenumber\\PhoneNumberFormat::RFC3966'),\n\t\t\t'description' => \"Phone number display format. Values:\\nfalse - formatting is disabled \\n\\\\libphonenumber\\\\PhoneNumberFormat::RFC3966 - +48-44-668-18-00\\n\\\\libphonenumber\\\\PhoneNumberFormat::E164 - +48446681800 \\n\\\\libphonenumber\\\\PhoneNumberFormat::INTERNATIONAL - 044 668 18 00\\n\\\\libphonenumber\\\\PhoneNumberFormat::NATIONAL - +48 44 668 18 00\",\n\t\t\t'validation' => function () {\n\t\t\t\treturn \\in_array(func_get_arg(0), [\n\t\t\t\t\tfalse,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::RFC3966,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::E164,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::INTERNATIONAL,\n\t\t\t\t\t\\libphonenumber\\PhoneNumberFormat::NATIONAL\n\t\t\t\t]);\n\t\t\t}\n\t\t],\n\t\t'headerAlertMessage' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert message'\n\t\t],\n\t\t'headerAlertType' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert type, ex. alert-primary, alert-danger, alert-warning, alert-info'\n\t\t],\n\t\t'headerAlertIcon' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Header alert icon, ex.  fas fa-exclamation-triangle, fas fa-exclamation-circle, fas fa-exclamation, far fa-question-circle, fas fa-info-circle'\n\t\t],\n\t\t'loginPageAlertMessage' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert message'\n\t\t],\n\t\t'loginPageAlertType' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert type, ex. alert-primary, alert-danger, alert-warning, alert-info'\n\t\t],\n\t\t'loginPageAlertIcon' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Login page alert icon, ex.  fas fa-exclamation-triangle, fas fa-exclamation-circle, fas fa-exclamation, far fa-question-circle, fas fa-info-circle'\n\t\t],\n\t\t'showRegistrationAlert' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show the alert when the system is incorrectly registered',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'debug' => [\n\t\t'LOG_TO_FILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable saving logs to file. Values: false/true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LOG_TO_PROFILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable saving logs profiling. Values: false/true',\n\t\t],\n\t\t'LOG_PROFILE_CATEGORIES' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Categories to be registered in profiling, an empty value means all categories. ex. \"yii\\db\\Command::query\", \"Integrations/MagentoApi\"'\n\t\t],\n\t\t'LOG_LEVELS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Level of saved/displayed logs. Values: false = All / 3 = error and warning / [\"error\", \"warning\", \"info\", \"trace\", \"profile\"]',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn false === $arg || (\\is_array($arg) && array_diff(['error', 'warning', 'info', 'trace', 'profile'], $arg));\n\t\t\t},\n\t\t],\n\t\t'LOG_TRACE_LEVEL' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Level of saved/displayed tracerts. // Values: int',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'SQL_DIE_ON_ERROR' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Stop the running process of the system if there is an error in sql query'\n\t\t],\n\t\t'EXCEPTION_ERROR_TO_SHOW' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display errors',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_EXCEPTION_BACKTRACE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Displays information about the tracking code when an error occurs. Available only with the active SQL_DIE_ON_ERROR = true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_EXCEPTION_LOGS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display logs when error exception occurs',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EXCEPTION_ERROR_HANDLER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Turn on/off the error handler',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EXCEPTION_ERROR_TO_FILE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Save logs to file (cache/logs/errors.log)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DISPLAY_DEBUG_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display main debug console'\n\t\t],\n\t\t'DISPLAY_LOGS_IN_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable displaying logs in debug console. Values: false/true'\n\t\t],\n\t\t'DISPLAY_CONFIG_IN_CONSOLE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable displaying logs in debug console. Values: false/true'\n\t\t],\n\t\t'DEBUG_CONSOLE_ALLOWED_IPS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'List of IP addresses allowed to display debug console. Values: false = All IPS / \"192.168.1.10\" / [\"192.168.1.10\",\"192.168.1.11\"]',\n\t\t],\n\t\t'DEBUG_CONSOLE_ALLOWED_USERS' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of user IDs allowed to display debug console. ',\n\t\t],\n\t\t'DEBUG_CRON' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Debug cron => cache/logs/cron/',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DEBUG_VIEWER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Debug Viewer => cache/logs/viewer-debug.log'\n\t\t],\n\t\t'DISPLAY_DEBUG_VIEWER' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Display Smarty Debug Console'\n\t\t],\n\t\t'SMARTY_ERROR_REPORTING' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('E_ALL & ~E_NOTICE'),\n\t\t\t'description' => 'Do not show Smarty Notice in phpError.log',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = (string) func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['E_ALL', 'E_ALL & ~E_NOTICE']);\n\t\t\t},\n\t\t],\n\t\t'EXCEPTION_ERROR_LEVEL' => [\n\t\t\t'default' => new \\Nette\\PhpGenerator\\PhpLiteral('E_ALL & ~E_NOTICE'),\n\t\t\t'description' => \"Set the error reporting level. The parameter is either an integer representing a bit field, or named constants.\\nhttps://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting\\nAll errors - E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED / Critical errors - E_ERROR | E_WARNING | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = (string) func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, ['E_ALL', 'E_ALL & ~E_NOTICE']);\n\t\t\t},\n\t\t],\n\t\t'JS_DEBUG' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Turn on/off error debugging in javascript',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionMessages' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception messages in response body',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionReasonPhrase' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception reason phrase in response header',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiShowExceptionBacktrace' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Show exception backtrace in response body',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiLogException' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Log to file only exception errors in the logs',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'apiLogAllRequests' => [\n\t\t\t'default' => false,\n\t\t\t'description' => '[WebServices/API] Log to file all communications data (request + response)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DAV_DEBUG_EXCEPTIONS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'API - Sabre dav - This is a flag that allows (or not) showing file, line, and code of the exception in the returned XML',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DAV_DEBUG_PLUGIN' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Activate the plugin recording log in DAV',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MAILER_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Mailer debug',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ROUNDCUBE_DEBUG_LEVEL' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'System error reporting, sum of: 1 = log; 4 = show, 8 = trace'\n\t\t],\n\t\t'ROUNDCUBE_DEVEL_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Devel_mode this will print real PHP memory usage into logs/console and do not compress JS libraries'\n\t\t],\n\t\t'ROUNDCUBE_PER_USER_LOGGING' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Activate this option if logs should be written to per-user directories.\\nData will only be logged if a directory cache/logs/<username>/ exists and is writable.\"\n\t\t],\n\t\t'ROUNDCUBE_SMTP_LOG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log sent messages to cache/logs/sendmail or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LOG_LOGINS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log successful/failed logins to cache/logs/userlogins or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LOG_SESSION' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log session authentication errors to cache/logs/session or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_SQL_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log SQL queries to cache/logs/sql or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_IMAP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log IMAP conversation to cache/logs/imap or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_LDAP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log LDAP conversation to cache/logs/ldap or to syslog'\n\t\t],\n\t\t'ROUNDCUBE_SMTP_DEBUG' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Log SMTP conversation to cache/logs/smtp or to syslog'\n\t\t],\n\t],\n\t'developer' => [\n\t\t'CHANGE_GENERATEDTYPE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Turn the possibility to change generatedtype',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MINIMIZE_JS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable minimize JS files',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MINIMIZE_CSS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => ' Enable minimize CSS files',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_VISIBILITY' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Change of fields visibility',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_RELATIONS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Adding/Deleting relations between modules.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MISSING_LIBRARY_DEV_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer libraries update mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LANGUAGES_UPDATE_DEV_MODE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer libraries update mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'updaterDevMode' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Developer updater mode',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t]\n\t],\n\t'layout' => [\n\t\t'breadcrumbs' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should menu breadcrumbs be visible? true = show, false = hide',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'breadcrumbsHref' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Should the breadcrumb menu have href enabled? true = enabled, false = off',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t]\n\t],\n\t'performance' => [\n\t\t'CACHING_DRIVER' => [\n\t\t\t'default' => 'Base',\n\t\t\t'description' => 'Data caching is about storing some PHP variables in cache and retrieving it later from cache. Drivers: Base, Apcu',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn 'Basic' === $arg || 'Apcu' === $arg;\n\t\t\t}\n\t\t],\n\t\t'ENABLE_CACHING_USERS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable caching of user data',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'ENABLE_CACHING_DB_CONNECTION' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Enable caching database instance, accelerate time database connection',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'DB_DEFAULT_CHARSET_UTF8' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'If database default charset is UTF-8, set this to true. This avoids executing the SET NAMES SQL for each query!',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LISTVIEW_COMPUTE_PAGE_COUNT' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Compute list view record count while loading listview each time. Recommended value false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'AUTO_REFRESH_RECORD_LIST_ON_SELECT_CHANGE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable automatic records list refreshing while changing the value of the selection list',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_SHOW_OWNER_ONLY_IN_LIST' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Show in search engine/filters only users and groups available in records list. It might result in a longer search time.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'INTERVAL_FOR_NOTIFICATION_NUMBER_CHECK' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'Time to update number of notifications in seconds',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'SEARCH_OWNERS_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search owners by AJAX. We recommend selecting the \"true\" value if there are numerous users in the system.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_ROLES_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search roles by AJAX',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SEARCH_REFERENCE_BY_AJAX' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Search reference by AJAX. We recommend selecting the \"true\" value if there are numerous users in the system.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MAX_NUMBER_EXPORT_RECORDS' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => 'Max number of exported records',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'maxMassDeleteRecords' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'Max number of mass deleted records',\n\t\t],\n\t\t'maxMassTransferOwnershipRecords' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'Max number of transfer ownership records',\n\t\t],\n\t\t'OWNER_MINIMUM_INPUT_LENGTH' => [\n\t\t\t'default' => 2,\n\t\t\t'description' => 'Minimum number of characters to search for record owner',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'ROLE_MINIMUM_INPUT_LENGTH' => [\n\t\t\t'default' => 2,\n\t\t\t'description' => 'Minimum number of characters to search for role',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'NUMBERS_EMAILS_DOWNLOADED_DURING_ONE_SCANNING' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'The numbers of emails downloaded during one scanning',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_PRIVILEGES_UPDATER' => [\n\t\t\t'default' => 1000000,\n\t\t\t'description' => 'The maximum number of global search permissions that cron can update during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_ADDRESS_BOOK_UPDATER' => [\n\t\t\t'default' => 10000,\n\t\t\t'description' => 'The maximum number of records in address book to be updated in cron',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_RECORD_LABELS_UPDATER' => [\n\t\t\t'default' => 10000,\n\t\t\t'description' => 'The maximum number of record labels that cron can update during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_SENDING_MAILS' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'The maximum number of emails that cron can send during a single execution. Pay attention to the server limits.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_NUMBERS_SENDING_SMS' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => 'The maximum number of sms that cron can send during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CRON_MAX_ATACHMENTS_DELETE' => [\n\t\t\t'default' => 1000,\n\t\t\t'description' => 'The maximum number of attachments that cron can delete during a single execution',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'LOAD_CUSTOM_FILES' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Parameter that allows to disable file overwriting.\\nAfter enabling it the system will additionally check whether the file exists in the custom directory. Ex. custom/modules/Assets/Assets.php.\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_ADMIN_PANEL' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Parameter that determines whether admin panel should be available to admin by default',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_ADMINISTRATORS_IN_USERS_LIST' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Display administrators in the list of users (Assigned To)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search: true/false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'BROWSING_HISTORY_WORKING' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Browsing history working if true',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'BROWSING_HISTORY_VIEW_LIMIT' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'Number of browsing history steps',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'BROWSING_HISTORY_DELETE_AFTER' => [\n\t\t\t'default' => 7,\n\t\t\t'description' => 'Number of days after which browsing history will be deleted',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'SESSION_DRIVER' => [\n\t\t\t'default' => 'File',\n\t\t\t'description' => 'Session handler name, handler dir: app/Session/',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CHART_MULTI_FILTER_LIMIT' => [\n\t\t\t'default' => 5,\n\t\t\t'description' => 'Charts multi filter limit',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'CHART_ADDITIONAL_FILTERS_LIMIT' => [\n\t\t\t'default' => 6,\n\t\t\t'description' => \"Additional filters limit for ChartFilter's\",\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'MAX_MERGE_RECORDS' => [\n\t\t\t'default' => 4,\n\t\t\t'description' => 'Maximum number of merged records',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'ACCESS_TO_INTERNET' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Can CRM have access to the Internet?',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_LOCALE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Change the locale for sort the data',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'INVENTORY_EDIT_VIEW_LAYOUT' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Is divided layout style on edit view in modules with products',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'MODULES_SPLITTED_EDIT_VIEW_LAYOUT' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules with splitted edit view layout',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && array_diff($arg, App\\Module::getAllModuleNames());\n\t\t\t}\n\t\t],\n\t\t'RECORD_POPOVER_DELAY' => [\n\t\t\t'default' => 500,\n\t\t\t'description' => \"Popover record's trigger delay in ms\",\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'PICKLIST_DEPENDENCY_DEFAULT_EMPTY' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Empty value when there is selected item in picklist dependency',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'picklistLimit' => [\n\t\t\t'default' => 50,\n\t\t\t'description' => 'Number of items displayed in picklists.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'recursiveTranslate' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'If there is no translation in the chosen language, then get from the default language.'\n\t\t],\n\t\t'quickEditLayout' => [\n\t\t\t'default' => 'blocks',\n\t\t\t'description' => 'Parameter defining how fields are displayed in quick edit. Available values: standard,blocks,vertical',\n\t\t\t'validationValues' => ['blocks', 'standard', 'vertical']\n\t\t],\n\t\t'quickCreateLayout' => [\n\t\t\t'default' => 'blocks',\n\t\t\t'description' => 'Parameter defining how fields are displayed in quick create. Available values: blocks,standard',\n\t\t\t'validationValues' => ['blocks', 'standard']\n\t\t],\n\t\t'REPORT_RECORD_NUMBERS' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => 'Number of records that can be shown in report mail',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'LOGIN_HISTORY_VIEW_LIMIT' => [\n\t\t\t'default' => 30,\n\t\t\t'description' => 'Number of records that can be shown in history login modal',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t],\n\t'relation' => [\n\t\t'COMMENT_MAX_LENGTH' => [\n\t\t\t'default' => 20,\n\t\t\t'description' => 'Maximum length of a comment visible in the related module',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t\t'sanitization' => function () {\n\t\t\t\treturn (int) func_get_arg(0);\n\t\t\t}\n\t\t],\n\t\t'SHOW_RELATED_MODULE_NAME' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show related modules names',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_RELATED_ICON' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show related modules icon',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_RECORDS_COUNT' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Show record count in tabs of related modules',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'addSearchParamsToCreateView' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Fill in the record creation form with the data used in filtering (search_params)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'separateChangeRelationButton' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Separate change relation button in related module',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'search' => [\n\t\t'GLOBAL_SEARCH_SELECT_MODULE' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Auto select current module in global search (true/false)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH_MODAL_MAX_NUMBER_RESULT' => [\n\t\t\t'default' => 100,\n\t\t\t'description' => 'Auto select current module in global search (int)',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'GLOBAL_SEARCH_SORTING_RESULTS' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Global search - Should the results be sorted in MySQL or PHP while displaying (None = 0, PHP = 1, Mysql = 2). The parameter impacts system efficiency.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_int($arg) && \\in_array($arg, [0, 1, 2]);\n\t\t\t}\n\t\t],\n\t\t'GLOBAL_SEARCH_CURRENT_MODULE_TO_TOP' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search - Show current module as first in search results (true/false).',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE' => [\n\t\t\t'default' => 1,\n\t\t\t'description' => 'Global search - Search for records while entering text  (1/0).',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_int($arg) && \\in_array($arg, [0, 1]);\n\t\t\t}\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE_LIMIT' => [\n\t\t\t'default' => 15,\n\t\t\t'description' => 'Global search - Max number of displayed results. The parameter impacts system efficiency.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'GLOBAL_SEARCH_AUTOCOMPLETE_MIN_LENGTH' => [\n\t\t\t'default' => 3,\n\t\t\t'description' => 'Global search - The minimum number of characters a user must type before a search is performed. The parameter impacts system efficiency',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber'\n\t\t],\n\t\t'GLOBAL_SEARCH_OPERATOR_SELECT' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Global search - Show operator list.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'LIST_ENTITY_STATE_COLOR' => [\n\t\t\t'default' => [\n\t\t\t\t'Archived' => '#0032a2',\n\t\t\t\t'Trash' => '#ab0505',\n\t\t\t\t'Active' => '#009405',\n\t\t\t],\n\t\t\t'description' => 'Colors for record state will be displayed in list view, history, and preview.',\n\t\t],\n\t],\n\t'securityKeys' => [\n\t\t'encryptionPass' => [\n\t\t\t'default' => 'yeti',\n\t\t\t'description' => 'Key to encrypt passwords, changing the key results in the loss of all encrypted data.',\n\t\t\t'validation' => function () {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t],\n\t\t'encryptionMethod' => [\n\t\t\t'default' => 'aes-256-cbc',\n\t\t\t'description' => 'Encryption method.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn empty($arg) || ($arg && \\in_array($arg, \\App\\Encryption::getMethods()));\n\t\t\t}\n\t\t],\n\t],\n\t'security' => [\n\t\t'USER_ENCRYPT_PASSWORD_COST' => [\n\t\t\t'default' => 10,\n\t\t\t'description' => \"Password encrypt algorithmic cost. Numeric values - we recommend values greater than 10.\\nThe greater the value, the longer it takes to encrypt the password.\"\n\t\t],\n\t\t'RESET_LOGIN_PASSWORD' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Possible to reset the password while logging in (true/false)',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'SHOW_MY_PREFERENCES' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Show my preferences',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CHANGE_LOGIN_PASSWORD' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Changing the settings by the user is possible true/false',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_ROLES' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by roles.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_SHARING' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by sharing.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_SHARED_OWNERS' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by shared owners.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_RECORD_HIERARCHY' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by record hierarchy.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_ADVANCED_PERMISSION' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by advanced permission.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'PERMITTED_BY_PRIVATE_FIELD' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Permitted by private field.',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'permittedModulesByCreatorField' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules to which access is based on the record creation.',\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\is_array($arg) && array_diff($arg, App\\Module::getAllModuleNames());\n\t\t\t}\n\t\t],\n\t\t'permittedWriteAccessByCreatorField' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Permission level access based on the record creation',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'CACHING_PERMISSION_TO_RECORD' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Configuration of the permission mechanism on records list.\\ntrue - Permissions based on the users column in vtiger_crmentity.\\n\t\tPermissions are not verified in real time. They are updated via cron.\\n\t\tWe do not recommend using this option in production environments.\\nfalse - Permissions based on adding tables with permissions to query (old mechanism).\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_ACTIVE' => [\n\t\t\t'default' => false,\n\t\t\t'description' => \"Restricted domains allow you to block saving an email address from a given domain in the system.\\nRestricted domains work only for email address type fields.\",\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_VALUES' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Restricted domains',\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_ALLOWED' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of modules where restricted domains are enabled, if empty it will be enabled everywhere.',\n\t\t],\n\t\t'EMAIL_FIELD_RESTRICTED_DOMAINS_EXCLUDED' => [\n\t\t\t'default' => ['OSSEmployees', 'Users'],\n\t\t\t'description' => 'List of modules excluded from restricted domains validation.',\n\t\t],\n\t\t'LOGIN_PAGE_REMEMBER_CREDENTIALS' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Remember user credentials',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'fieldsReferencesDependent' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Interdependent reference fields',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'maxLifetimeSession' => [\n\t\t\t'default' => 900,\n\t\t\t'description' => 'Lifetime session (in seconds)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'maxLifetimeSessionCookie' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => \"Specifies the lifetime of the cookie in seconds which is sent to the browser. The value 0 means 'until the browser is closed.'\\nHow much time can someone be logged in to the browser. Defaults to 0.\",\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'loginSessionRegenerate' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Update the current session id with a newly generated one after login and logout',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'cookieSameSite' => [\n\t\t\t'default' => 'Strict',\n\t\t\t'description' => \"Same-site cookie attribute allows a web application to advise the browser that cookies should only be sent if the request originates from the website the cookie came from.\\nValues: None, Lax, Strict\",\n\t\t\t'validationValues' => ['None', 'Lax', 'Strict']\n\t\t],\n\t\t'cookieForceHttpOnly' => [\n\t\t\t'default' => true,\n\t\t\t'description' => \"Force the use of https only for cookie.\\nValues: true, false, null\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn null === $arg ? $arg : \\is_bool($arg);\n\t\t\t}\n\t\t],\n\t\t'apiLifetimeSessionCreate' => [\n\t\t\t'default' => 1440,\n\t\t\t'description' => 'Maximum session lifetime from the time it was created (in minutes)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'apiLifetimeSessionUpdate' => [\n\t\t\t'default' => 240,\n\t\t\t'description' => 'Maximum session lifetime since the last modification (in minutes)',\n\t\t\t'validation' => '\\App\\Validator::integer'\n\t\t],\n\t\t'USER_AUTHY_MODE' => [\n\t\t\t'default' => 'TOTP_OPTIONAL',\n\t\t\t'description' => \"User authentication mode.\\n\\n@see \\\\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE\\nAvailable values:\\nTOTP_OFF - 2FA TOTP is checking off\\nTOTP_OPTIONAL - It is defined by the user\\nTOTP_OBLIGATORY - It is obligatory.\",\n\t\t\t'validation' => function () {\n\t\t\t\t$arg = func_get_arg(0);\n\t\t\t\treturn \\in_array($arg, \\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE);\n\t\t\t}\n\t\t],\n\t\t'whitelistIp2fa' => [\n\t\t\t'default' => [],\n\t\t\t'description' => \"IP address whitelisting.\\nAllow access without 2FA.\",\n\t\t\t'validation' => '\\App\\Validator::ip'\n\t\t],\n\t\t'CACHE_LIFETIME_SENSIOLABS_SECURITY_CHECKER' => [\n\t\t\t'default' => 3600,\n\t\t\t'description' => 'Cache lifetime for SensioLabs security checker.',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t],\n\t\t'forceHttpsRedirection' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Force site access to always occur under SSL (https) for selected areas. You will not be able to access selected areas under non-ssl. Note, you must have SSL enabled on your server to utilise this option.'\n\t\t],\n\t\t'forceUrlRedirection' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Redirect to proper url when wrong url is entered.'\n\t\t],\n\t\t'hpkpKeysHeader' => [\n\t\t\t'default' => [],\n\t\t\t'description' => \"HTTP Public-Key-Pins (HPKP) pin-sha256 For HPKP to work properly at least 2 keys are needed.\\nhttps://scotthelme.co.uk/hpkp-http-public-key-pinning/, https://sekurak.pl/mechanizm-http-public-key-pinning/.\",\n\t\t],\n\t\t'csrfActive' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable CSRF protection',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'csrfLifetimeToken' => [\n\t\t\t'default' => 28800,\n\t\t\t'description' => 'Default expire time of CSRF token in seconds',\n\t\t\t'validation' => '\\App\\Validator::naturalNumber',\n\t\t\t'sanitization' => '\\App\\Purifier::naturalNumber'\n\t\t],\n\t\t'csrfFrameBreaker' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable verified frame protection, used in CSRF',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'csrfFrameBreakerWindow' => [\n\t\t\t'default' => 'top',\n\t\t\t'description' => 'Which window should be verified? It is used to check if the system is loaded in the frame, used in CSRF.',\n\t\t\t'validationValues' => ['top', 'parent']\n\t\t],\n\t\t'cspHeaderActive' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'HTTP Content Security Policy response header allows website administrators to control resources the user agent is allowed to load for a given page',\n\t\t\t'validation' => '\\App\\Validator::alnumSpace'\n\t\t],\n\t\t'cspHeaderTokenTime' => [\n\t\t\t'default' => '5 minutes',\n\t\t\t'description' => 'HTTP Content Security Policy time interval for generating a new nonce token',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'allowedImageDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading images, used in CSP.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t],\n\t\t'allowedFrameDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading frame, used in CSP and validate referer.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'allowedScriptDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Allowed domains for loading script, used in CSP.',\n\t\t\t'loopValidate' => true,\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'allowedFormDomains' => [\n\t\t\t'default' => ['https://www.paypal.com'],\n\t\t\t'description' => 'Allowed domains which can be used as the target of a form submissions from a given context, used in CSP.',\n\t\t],\n\t\t'generallyAllowedDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'Generally allowed domains, used in CSP.',\n\t\t],\n\t\t'purifierAllowedDomains' => [\n\t\t\t'default' => [],\n\t\t\t'description' => 'List of allowed domains for fields with HTML support',\n\t\t],\n\t\t'proxyConnection' => [\n\t\t\t'default' => false,\n\t\t\t'description' => 'Do you want all connections to be made using a proxy?',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'proxyProtocol' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy protocol: http, https, tcp',\n\t\t\t'validationValues' => ['http', 'https', 'tcp', '']\n\t\t],\n\t\t'proxyHost' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy host',\n\t\t\t'validation' => '\\App\\Validator::url',\n\t\t],\n\t\t'proxyPort' => [\n\t\t\t'default' => 0,\n\t\t\t'description' => 'Proxy port',\n\t\t\t'validation' => '\\App\\Validator::port',\n\t\t],\n\t\t'proxyLogin' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy login',\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'proxyPassword' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Proxy password',\n\t\t\t'validation' => '\\App\\Validator::text',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'askAdminAboutVisitPurpose' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask admin about visit purpose',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'askAdminAboutVisitSwitchUsers' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask admin about switch users purpose',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'askSuperUserAboutVisitPurpose' => [\n\t\t\t'default' => true,\n\t\t\t'description' => '@var bool Ask super user about visit purpose, only for the settings part',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t],\n\t'sounds' => [\n\t\t'IS_ENABLED' => [\n\t\t\t'default' => true,\n\t\t\t'description' => 'Enable system sounds',\n\t\t\t'validation' => '\\App\\Validator::bool',\n\t\t\t'sanitization' => '\\App\\Purifier::bool'\n\t\t],\n\t\t'REMINDERS' => [\n\t\t\t'default' => 'sound_1.mp3',\n\t\t\t'description' => 'Sets the type of sound of reminders',\n\t\t],\n\t\t'CHAT' => [\n\t\t\t'default' => 'sound_2.mp3',\n\t\t\t'description' => 'Sets the type of sound of chat',\n\t\t],\n\t\t'MAILS' => [\n\t\t\t'default' => 'sound_1.mp3',\n\t\t\t'description' => 'Sets the type of sound of mails',\n\t\t],\n\t],\n\t'db' => [\n\t\t'db_server' => [\n\t\t\t'default' => '>URL<',\n\t\t\t'description' => 'Gets the database server',\n\t\t\t'validation' => '\\App\\Validator::domain',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_port' => [\n\t\t\t'default' => '',\n\t\t\t'description' => 'Gets the database port',\n\t\t\t'validation' => '\\App\\Validator::port'\n\t\t],\n\t\t'db_username' => [\n\t\t\t'default' => '_DBC_USER_',\n\t\t\t'description' => 'Gets the database user name',\n\t\t\t'validation' => '\\App\\Validator::dbUserName',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_password' => [\n\t\t\t'default' => '_DBC_PASS_',\n\t\t\t'description' => 'Gets the database password',\n\t\t\t'validation' => function () {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t],\n\t\t'db_name' => [\n\t\t\t'default' => '_DBC_NAME_',\n\t\t\t'description' => 'Gets the database name',\n\t\t\t'validation' => '\\App\\Validator::dbName',\n\t\t\t'sanitization' => '\\App\\Purifier::purify'\n\t\t],\n\t\t'db_type' => [\n\t\t\t'default' => 'mysql',\n\t\t\t'description' => 'Gets the database type',\n\t\t\t'validation' => '\\App\\Validator::dbType'\n\t\t],\n\t\t'db_hostname' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => 'return self::$db_server . \\':\\' . self::$db_port;',\n\t\t\t'description' => 'Gets host name.'\n\t\t],\n\t\t'base' => [\n\t\t\t'type' => 'function',\n\t\t\t'default' => \"return [\n\t'dsn' => self::\\$db_type . ':host=' . self::\\$db_server . ';dbname=' . self::\\$db_name . ';port=' . self::\\$db_port,\n\t'host' => self::\\$db_server,\n\t'port' => self::\\$db_port,\n\t'username' => self::\\$db_username,\n\t'password' => self::\\$db_password,\n\t'dbName' => self::\\$db_name,\n\t'tablePrefix' => 'yf_',\n\t'charset' => 'utf8',\n];\",\n\t\t\t'description' => 'Basic database configuration.'\n\t\t],\n\t]\n];\n", "<?php\n\n/**\n * Configuration file.\n * This file is auto-generated.\n *\n * @package Config\n *\n * @copyright YetiForce Sp. z o.o\n * @license   YetiForce Public License 4.0 (licenses/LicenseEN.txt or yetiforce.com)\n */\n\nnamespace Config;\n\n/**\n * Configuration file: Config\\Security.\n */\nclass Security\n{\n\t/**\n\t * Password encrypt algorithmic cost. Numeric values - we recommend values greater than 10.\n\t * The greater the value, the longer it takes to encrypt the password.\n\t */\n\tpublic static $USER_ENCRYPT_PASSWORD_COST = 10;\n\n\t/** Possible to reset the password while logging in (true/false) */\n\tpublic static $RESET_LOGIN_PASSWORD = false;\n\n\t/** Show my preferences */\n\tpublic static $SHOW_MY_PREFERENCES = true;\n\n\t/** Changing the settings by the user is possible true/false */\n\tpublic static $CHANGE_LOGIN_PASSWORD = true;\n\n\t/** Permitted by roles. */\n\tpublic static $PERMITTED_BY_ROLES = true;\n\n\t/** Permitted by sharing. */\n\tpublic static $PERMITTED_BY_SHARING = true;\n\n\t/** Permitted by shared owners. */\n\tpublic static $PERMITTED_BY_SHARED_OWNERS = true;\n\n\t/** Permitted by record hierarchy. */\n\tpublic static $PERMITTED_BY_RECORD_HIERARCHY = true;\n\n\t/** Permitted by advanced permission. */\n\tpublic static $PERMITTED_BY_ADVANCED_PERMISSION = true;\n\n\t/** Permitted by private field. */\n\tpublic static $PERMITTED_BY_PRIVATE_FIELD = true;\n\n\t/** List of modules to which access is based on the record creation. */\n\tpublic static $permittedModulesByCreatorField = [];\n\n\t/** Permission level access based on the record creation */\n\tpublic static $permittedWriteAccessByCreatorField = false;\n\n\t/**\n\t * Configuration of the permission mechanism on records list.\n\t * true - Permissions based on the users column in vtiger_crmentity.\n\t * \t\tPermissions are not verified in real time. They are updated via cron.\n\t * \t\tWe do not recommend using this option in production environments.\n\t * false - Permissions based on adding tables with permissions to query (old mechanism).\n\t */\n\tpublic static $CACHING_PERMISSION_TO_RECORD = false;\n\n\t/**\n\t * Restricted domains allow you to block saving an email address from a given domain in the system.\n\t * Restricted domains work only for email address type fields.\n\t */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_ACTIVE = false;\n\n\t/** Restricted domains */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_VALUES = [];\n\n\t/** List of modules where restricted domains are enabled, if empty it will be enabled everywhere. */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_ALLOWED = [];\n\n\t/** List of modules excluded from restricted domains validation. */\n\tpublic static $EMAIL_FIELD_RESTRICTED_DOMAINS_EXCLUDED = ['OSSEmployees', 'Users'];\n\n\t/** Remember user credentials */\n\tpublic static $LOGIN_PAGE_REMEMBER_CREDENTIALS = false;\n\n\t/** Interdependent reference fields */\n\tpublic static $fieldsReferencesDependent = false;\n\n\t/** Lifetime session (in seconds) */\n\tpublic static $maxLifetimeSession = 900;\n\n\t/**\n\t * Specifies the lifetime of the cookie in seconds which is sent to the browser. The value 0 means 'until the browser is closed.'\n\t * How much time can someone be logged in to the browser. Defaults to 0.\n\t */\n\tpublic static $maxLifetimeSessionCookie = 0;\n\n\t/** Update the current session id with a newly generated one after login and logout */\n\tpublic static $loginSessionRegenerate = true;\n\n\t/**\n\t * Same-site cookie attribute allows a web application to advise the browser that cookies should only be sent if the request originates from the website the cookie came from.\n\t * Values: None, Lax, Strict\n\t */\n\tpublic static $cookieSameSite = 'Strict';\n\n\t/**\n\t * Force the use of https only for cookie.\n\t * Values: true, false, null\n\t */\n\tpublic static $cookieForceHttpOnly = true;\n\n\t/** Maximum session lifetime from the time it was created (in minutes) */\n\tpublic static $apiLifetimeSessionCreate = 1440;\n\n\t/** Maximum session lifetime since the last modification (in minutes) */\n\tpublic static $apiLifetimeSessionUpdate = 240;\n\n\t/**\n\t * User authentication mode.\n\t *\n\t * @see \\Users_Totp_Authmethod::ALLOWED_USER_AUTHY_MODE\n\t * Available values:\n\t * TOTP_OFF - 2FA TOTP is checking off\n\t * TOTP_OPTIONAL - It is defined by the user\n\t * TOTP_OBLIGATORY - It is obligatory.\n\t */\n\tpublic static $USER_AUTHY_MODE = 'TOTP_OPTIONAL';\n\n\t/**\n\t * IP address whitelisting.\n\t * Allow access without 2FA.\n\t */\n\tpublic static $whitelistIp2fa = [];\n\n\t/** Cache lifetime for SensioLabs security checker. */\n\tpublic static $CACHE_LIFETIME_SENSIOLABS_SECURITY_CHECKER = 3600;\n\n\t/** Force site access to always occur under SSL (https) for selected areas. You will not be able to access selected areas under non-ssl. Note, you must have SSL enabled on your server to utilise this option. */\n\tpublic static $forceHttpsRedirection = false;\n\n\t/** Redirect to proper url when wrong url is entered. */\n\tpublic static $forceUrlRedirection = true;\n\n\t/**\n\t * HTTP Public-Key-Pins (HPKP) pin-sha256 For HPKP to work properly at least 2 keys are needed.\n\t * https://scotthelme.co.uk/hpkp-http-public-key-pinning/, https://sekurak.pl/mechanizm-http-public-key-pinning/.\n\t */\n\tpublic static $hpkpKeysHeader = [];\n\n\t/** Enable CSRF protection */\n\tpublic static $csrfActive = true;\n\n\t/** Default expire time of CSRF token in seconds */\n\tpublic static $csrfLifetimeToken = 28800;\n\n\t/** Enable verified frame protection, used in CSRF */\n\tpublic static $csrfFrameBreaker = true;\n\n\t/** Which window should be verified? It is used to check if the system is loaded in the frame, used in CSRF. */\n\tpublic static $csrfFrameBreakerWindow = 'top';\n\n\t/** HTTP Content Security Policy response header allows website administrators to control resources the user agent is allowed to load for a given page */\n\tpublic static $cspHeaderActive = true;\n\n\t/** HTTP Content Security Policy time interval for generating a new nonce token */\n\tpublic static $cspHeaderTokenTime = '5 minutes';\n\n\t/** Allowed domains for loading images, used in CSP. */\n\tpublic static $allowedImageDomains = [];\n\n\t/** Allowed domains for loading frame, used in CSP and validate referer. */\n\tpublic static $allowedFrameDomains = [];\n\n\t/** Allowed domains for loading script, used in CSP. */\n\tpublic static $allowedScriptDomains = [];\n\n\t/** Allowed domains which can be used as the target of a form submissions from a given context, used in CSP. */\n\tpublic static $allowedFormDomains = ['https://www.paypal.com'];\n\n\t/** Generally allowed domains, used in CSP. */\n\tpublic static $generallyAllowedDomains = [];\n\n\t/** List of allowed domains for fields with HTML support */\n\tpublic static $purifierAllowedDomains = [];\n\n\t/** Do you want all connections to be made using a proxy? */\n\tpublic static $proxyConnection = false;\n\n\t/** Proxy protocol: http, https, tcp */\n\tpublic static $proxyProtocol = '';\n\n\t/** Proxy host */\n\tpublic static $proxyHost = '';\n\n\t/** Proxy port */\n\tpublic static $proxyPort = 0;\n\n\t/** Proxy login */\n\tpublic static $proxyLogin = '';\n\n\t/** Proxy password */\n\tpublic static $proxyPassword = '';\n\n\t/** @var bool Ask admin about visit purpose */\n\tpublic static $askAdminAboutVisitPurpose = true;\n\n\t/** @var bool Ask admin about switch users purpose */\n\tpublic static $askAdminAboutVisitSwitchUsers = true;\n\n\t/** @var bool Ask super user about visit purpose, only for the settings part */\n\tpublic static $askSuperUserAboutVisitPurpose = true;\n}\n", "<?php\n/* +*******************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce Sp. z o.o\n * ****************************************************************************** */\n\nclass CSRFConfig\n{\n\t/**\n\t * Specific custom config startup for CSRF.\n\t */\n\tpublic static function startup()\n\t{\n\t\t//Override the default expire time of token\n\t\t\\CsrfMagic\\Csrf::$expires = \\App\\Config::security('csrfLifetimeToken', 7200);\n\t\t\\CsrfMagic\\Csrf::$callback = function ($tokens) {\n\t\t\tthrow new \\App\\Exceptions\\Csrf('Invalid request - Response For Illegal Access', 403);\n\t\t};\n\t\t$js = 'vendor/yetiforce/csrf-magic/src/Csrf.min.js';\n\t\tif (!IS_PUBLIC_DIR) {\n\t\t\t$js = 'public_html/' . $js;\n\t\t}\n\t\t\\CsrfMagic\\Csrf::$defer = true;\n\t\t\\CsrfMagic\\Csrf::$dirSecret = __DIR__;\n\t\t\\CsrfMagic\\Csrf::$rewriteJs = $js;\n\t\t\\CsrfMagic\\Csrf::$cspToken = \\App\\Session::get('CSP_TOKEN');\n\t\t\\CsrfMagic\\Csrf::$frameBreaker = \\Config\\Security::$csrfFrameBreaker;\n\t\t\\CsrfMagic\\Csrf::$windowVerification = \\Config\\Security::$csrfFrameBreakerWindow;\n\n\t\t/*\n\t\t * if an ajax request initiated, then if php serves content with <html> tags\n\t\t * as a response, then unnecessarily we are injecting csrf magic javascipt\n\t\t * in the response html at <head> and <body> using csrf_ob_handler().\n\t\t * So, to overwride above rewriting we need following config.\n\t\t */\n\t\tif (static::isAjax()) {\n\t\t\t\\CsrfMagic\\Csrf::$frameBreaker = false;\n\t\t\t\\CsrfMagic\\Csrf::$rewriteJs = null;\n\t\t}\n\t}\n\n\tpublic static function isAjax()\n\t{\n\t\tif (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n", "<?php\n\nreturn [\n\t'appVersion' => '6.3.43',\n\t'patchVersion' => '2022.01.18',\n\t'lib_roundcube' => '0.2.10',\n];\n", "<?php\n/* +**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.1\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com\n * ********************************************************************************** */\nrequire_once 'include/ConfigUtils.php';\nrequire_once 'include/utils/CommonUtils.php';\nrequire_once 'include/fields/DateTimeField.php';\nrequire_once 'include/fields/DateTimeRange.php';\nrequire_once 'include/fields/CurrencyField.php';\nrequire_once 'include/CRMEntity.php';\ninclude_once 'modules/Vtiger/CRMEntity.php';\nrequire_once 'include/runtime/Cache.php';\nrequire_once 'modules/Vtiger/helpers/Util.php';\nrequire_once 'modules/PickList/DependentPickListUtils.php';\nrequire_once 'modules/Users/Users.php';\nrequire_once 'include/Webservices/Utils.php';\nrequire_once 'include/Loader.php';\nVtiger_Loader::includeOnce('include.runtime.EntryPoint');\nApp\\Cache::init();\nApp\\Debuger::init();\nApp\\Db::$connectCache = App\\Config::performance('ENABLE_CACHING_DB_CONNECTION');\nApp\\Log::$logToProfile = Yii::$logToProfile = App\\Config::debug('LOG_TO_PROFILE');\nApp\\Log::$logToConsole = App\\Config::debug('DISPLAY_LOGS_IN_CONSOLE');\nApp\\Log::$logToFile = App\\Config::debug('LOG_TO_FILE');\n\nclass Vtiger_WebUI extends Vtiger_EntryPoint\n{\n\t/**\n\t * User privileges model instance.\n\t *\n\t * @var Users_Privileges_Model\n\t */\n\tprotected $userPrivilegesModel;\n\n\t/**\n\t * Function to check if the User has logged in.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\Unauthorized\n\t */\n\tprotected function checkLogin(App\\Request $request)\n\t{\n\t\tif (!$this->hasLogin()) {\n\t\t\tif ($request->isAjax()) {\n\t\t\t\tthrow new \\App\\Exceptions\\Unauthorized('LBL_LOGIN_IS_REQUIRED', 401);\n\t\t\t}\n\t\t\theader('location: index.php');\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to get the instance of the logged in User.\n\t *\n\t * @return Users object\n\t */\n\tpublic function getLogin()\n\t{\n\t\t$user = parent::getLogin();\n\t\tif (!$user && App\\Session::has('authenticated_user_id')) {\n\t\t\t$userId = App\\Session::get('authenticated_user_id');\n\t\t\tif ($userId && App\\Config::main('application_unique_key') === App\\Session::get('app_unique_key') && \\App\\User::isExists($userId)) {\n\t\t\t\t\\App\\User::setCurrentUserId($userId);\n\t\t\t\t$this->setLogin();\n\t\t\t}\n\t\t}\n\t\treturn $user;\n\t}\n\n\t/**\n\t * Process.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws Exception\n\t * @throws \\App\\Exceptions\\AppException\n\t */\n\tpublic function process(App\\Request $request)\n\t{\n\t\tif (\\Config\\Security::$forceHttpsRedirection && !\\App\\RequestUtil::isHttps()) {\n\t\t\theader(\"location: https://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\", true, 301);\n\t\t}\n\t\tif (\\Config\\Security::$forceUrlRedirection) {\n\t\t\t$requestUrl = (\\App\\RequestUtil::isHttps() ? 'https' : 'http') . '://' . $request->getServer('HTTP_HOST') . $request->getServer('REQUEST_URI');\n\t\t\tif (0 !== stripos($requestUrl, App\\Config::main('site_URL'))) {\n\t\t\t\theader('location: ' . App\\Config::main('site_URL'), true, 301);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tApp\\Session::init();\n\t\t\tApp\\Process::init();\n\t\t\t// common utils api called, depend on this variable right now\n\t\t\t$this->getLogin();\n\t\t\tApp\\Debuger::initConsole();\n\t\t\t$hasLogin = $this->hasLogin();\n\t\t\t$moduleName = $request->getModule();\n\t\t\t$qualifiedModuleName = $request->getModule(false);\n\t\t\t$view = $request->getByType('view', 2);\n\t\t\t$action = $request->getByType('action', 2);\n\t\t\t$response = false;\n\t\t\tif (!$hasLogin && 'GET' === $_SERVER['REQUEST_METHOD'] && 'Users' !== $moduleName && ($returnUrl = $request->getServer('QUERY_STRING')) && !\\App\\Session::has('return_params')) {\n\t\t\t\t//Take the url that user would like to redirect after they have successfully logged in.\n\t\t\t\t\\App\\Session::set('return_params', str_replace('&amp;', '&', $returnUrl));\n\t\t\t}\n\t\t\tif (empty($moduleName)) {\n\t\t\t\tif ($hasLogin) {\n\t\t\t\t\t$defaultModule = App\\Config::main('default_module');\n\t\t\t\t\tif (!empty($defaultModule) && 'Home' !== $defaultModule && \\App\\Privilege::isPermitted($defaultModule)) {\n\t\t\t\t\t\t$moduleName = $defaultModule;\n\t\t\t\t\t\t$qualifiedModuleName = $defaultModule;\n\t\t\t\t\t\tif (empty($view = Vtiger_Module_Model::getInstance($moduleName)->getDefaultViewName())) {\n\t\t\t\t\t\t\t$view = 'List';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$qualifiedModuleName = $moduleName = 'Home';\n\t\t\t\t\t\t$view = 'DashBoard';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$qualifiedModuleName = $moduleName = 'Users';\n\t\t\t\t\t$view = 'Login';\n\t\t\t\t}\n\t\t\t\t$request->set('module', $moduleName);\n\t\t\t\t$request->set('view', $view);\n\t\t\t}\n\t\t\tif (!empty($action)) {\n\t\t\t\t$componentType = 'Action';\n\t\t\t\t$componentName = $action;\n\t\t\t\t\\App\\Config::setJsEnv('action', $action);\n\t\t\t} else {\n\t\t\t\t$componentType = 'View';\n\t\t\t\tif (empty($view)) {\n\t\t\t\t\t$view = 'Index';\n\t\t\t\t}\n\t\t\t\t$componentName = $view;\n\t\t\t\t\\App\\Config::setJsEnv('view', $view);\n\t\t\t}\n\t\t\tif ('Login' === $view && 'Users' === $moduleName) {\n\t\t\t\tif (!\\App\\Session::has('CSP_TOKEN')) {\n\t\t\t\t\t\\App\\Controller\\Headers::generateCspToken();\n\t\t\t\t}\n\t\t\t\tif ($hasLogin) {\n\t\t\t\t\theader('location: index.php');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\\App\\Process::$processName = $componentName;\n\t\t\t\\App\\Process::$processType = $componentType;\n\t\t\t\\App\\Config::setJsEnv('module', $moduleName);\n\t\t\t\\App\\Config::setJsEnv('mode', $request->getMode());\n\t\t\tif ($qualifiedModuleName && 0 === stripos($qualifiedModuleName, 'Settings') && empty(\\App\\User::getCurrentUserId())) {\n\t\t\t\theader('location: ' . App\\Config::main('site_URL'), true);\n\t\t\t}\n\t\t\tif ('AppComponents' === $moduleName) {\n\t\t\t\t$handlerClass = \"App\\\\Controller\\\\Components\\\\{$componentType}\\\\{$componentName}\";\n\t\t\t} else {\n\t\t\t\t$handlerClass = Vtiger_Loader::getComponentClassName($componentType, $componentName, $qualifiedModuleName);\n\t\t\t}\n\t\t\t$handler = new $handlerClass();\n\t\t\tif (!$handler) {\n\t\t\t\t\\App\\Log::error(\"HandlerClass: $handlerClass\", 'Loader');\n\t\t\t\tthrow new \\App\\Exceptions\\AppException('LBL_HANDLER_NOT_FOUND', 405);\n\t\t\t}\n\t\t\t$handler->validateRequest($request);\n\t\t\tif ($handler->loginRequired() && $this->checkLogin($request)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif ($handler->isSessionExtend($request)) {\n\t\t\t\t\\App\\Session::set('last_activity', \\App\\Process::$startTime);\n\t\t\t}\n\t\t\tif ('ModComments' === $moduleName && 'List' === $view) {\n\t\t\t\theader('location: index.php?module=Home&view=DashBoard');\n\t\t\t}\n\t\t\t$skipList = ['Users', 'Home', 'CustomView', 'Import', 'Export', 'Install', 'ModTracker', 'AppComponents'];\n\t\t\tif ($handler->loginRequired() && !\\in_array($moduleName, $skipList) && false === stripos($qualifiedModuleName, 'Settings')) {\n\t\t\t\t$this->triggerCheckPermission($handler, $request);\n\t\t\t} elseif (0 === stripos($qualifiedModuleName, 'Settings') || \\in_array($moduleName, $skipList) || !$handler->loginRequired()) {\n\t\t\t\t$handler->checkPermission($request);\n\t\t\t}\n\t\t\t$this->triggerPreProcess($handler, $request);\n\t\t\t$response = $handler->process($request);\n\t\t\t$this->triggerPostProcess($handler, $request);\n\t\t} catch (Throwable $e) {\n\t\t\t\\App\\Log::error($e->getMessage() . PHP_EOL . $e->__toString());\n\t\t\t$messageHeader = 'LBL_ERROR';\n\t\t\tif ($e instanceof \\App\\Exceptions\\NoPermittedToRecord || $e instanceof WebServiceException) {\n\t\t\t\t$messageHeader = 'LBL_PERMISSION_DENIED';\n\t\t\t} elseif ($e instanceof \\App\\Exceptions\\Security) {\n\t\t\t\t$messageHeader = 'LBL_BAD_REQUEST';\n\t\t\t} elseif ($e instanceof \\yii\\db\\Exception) {\n\t\t\t\t$messageHeader = 'LBL_ERROR';\n\t\t\t}\n\t\t\t\\vtlib\\Functions::throwNewException($e, false, $messageHeader);\n\t\t\tif (!($request->isAjax() && $request->isJSON())) {\n\t\t\t\tif (App\\Config::debug('DISPLAY_EXCEPTION_BACKTRACE')) {\n\t\t\t\t\techo '<pre class=\"my-5 mx-auto card p-3 u-w-fit shadow js-exception-backtrace\">' . App\\Purifier::encodeHtml(str_replace(ROOT_DIRECTORY . DIRECTORY_SEPARATOR, '', $e->__toString())) . '</pre>';\n\t\t\t\t\t$response = false;\n\t\t\t\t}\n\t\t\t\tif (App\\Config::debug('DISPLAY_EXCEPTION_LOGS')) {\n\t\t\t\t\techo '<pre class=\"my-5 mx-auto card p-3 u-w-fit shadow js-exception-logs\">' . App\\Purifier::encodeHtml(str_replace(ROOT_DIRECTORY . DIRECTORY_SEPARATOR, '', \\App\\Log::getlastLogs())) . '</pre>';\n\t\t\t\t\t$response = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ('test' === App\\Config::main('systemMode')) {\n\t\t\t\tfile_put_contents('cache/logs/request.log', print_r($request->getAll(), true));\n\t\t\t\tif (\\function_exists('apache_request_headers')) {\n\t\t\t\t\tfile_put_contents('cache/logs/request.log', print_r(apache_request_headers(), true));\n\t\t\t\t}\n\t\t\t\tthrow $e;\n\t\t\t}\n\t\t}\n\t\tif (isset($response) && \\is_object($response)) {\n\t\t\t$response->emit();\n\t\t}\n\t}\n\n\t/**\n\t * Trigger check permission.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @throws \\App\\Exceptions\\AppException\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerCheckPermission(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\t$moduleName = $request->getModule();\n\t\t$moduleModel = Vtiger_Module_Model::getInstance($moduleName);\n\t\tif (empty($moduleModel)) {\n\t\t\t\\App\\Log::error('HandlerModule: ' . $moduleName, 'Loader');\n\t\t\tthrow new \\App\\Exceptions\\AppException('ERR_MODULE_DOES_NOT_EXIST||' . $moduleName, 405);\n\t\t}\n\t\t$this->userPrivilegesModel = Users_Privileges_Model::getCurrentUserPrivilegesModel();\n\t\tif ($this->userPrivilegesModel->hasModulePermission($moduleName)) {\n\t\t\t$handler->checkPermission($request);\n\t\t\treturn true;\n\t\t}\n\t\t\\App\\Log::error(\"No permissions to the module: $moduleName\", 'NoPermitted');\n\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NOT_ACCESSIBLE', 403);\n\t}\n\n\t/**\n\t * Trigger pre process.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerPreProcess(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\t$handler->sendHeaders();\n\t\tif ($request->isAjax()) {\n\t\t\t$handler->preProcessAjax($request);\n\t\t\treturn true;\n\t\t}\n\t\t$handler->preProcess($request);\n\t}\n\n\t/**\n\t * Trigger post process.\n\t *\n\t * @param \\App\\Controller\\Base $handler\n\t * @param \\App\\Request         $request\n\t *\n\t * @return bool\n\t */\n\tprotected function triggerPostProcess(App\\Controller\\Base $handler, App\\Request $request)\n\t{\n\t\tif ($request->isAjax()) {\n\t\t\t$handler->postProcessAjax($request);\n\t\t\treturn true;\n\t\t}\n\t\t$handler->postProcess($request);\n\t}\n}\n", "<?php\n\n /* +***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com.\n * *********************************************************************************** */\n\nclass Install_Index_View extends \\App\\Controller\\View\\Base\n{\n\tuse \\App\\Controller\\ExposeMethod;\n\n\t/**\n\t * @var bool\n\t */\n\tprotected $debug = false;\n\n\t/**\n\t * @var Vtiger_Viewer\n\t */\n\tprotected $viewer;\n\n\t/**\n\t * Step number.\n\t *\n\t * @var int\n\t */\n\tprotected $stepNumber = 1;\n\n\t/** {@inheritdoc} */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->exposeMethod('step1');\n\t\t$this->exposeMethod('step2');\n\t\t$this->exposeMethod('stepChooseHost');\n\t\t$this->exposeMethod('showBuyModal');\n\t\t$this->exposeMethod('showProductModal');\n\t\t$this->exposeMethod('step3');\n\t\t$this->exposeMethod('step4');\n\t\t$this->exposeMethod('step5');\n\t\t$this->exposeMethod('step6');\n\t\t$this->exposeMethod('step7');\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function loginRequired()\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * Set language.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return \\App\\Request\n\t */\n\tpublic function setLanguage(App\\Request $request)\n\t{\n\t\tif (!$request->getByType('lang', 1)) {\n\t\t\t$lang = '';\n\t\t\tif (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n\t\t\t\t$languages = Install_Utils_Model::getLanguages();\n\t\t\t\tforeach ($languages as $code => &$data) {\n\t\t\t\t\t$data = Locale::getPrimaryLanguage($code);\n\t\t\t\t}\n\t\t\t\tforeach (explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']) as $code) {\n\t\t\t\t\tif (isset($languages[$code])\n\t\t\t\t\t\t|| (($code = str_replace('_', '-', Locale::acceptFromHttp($code))) && isset($languages[$code]))\n\t\t\t\t\t\t|| false !== ($code = array_search(Locale::acceptFromHttp($code), $languages))\n\t\t\t\t\t) {\n\t\t\t\t\t\t$lang = $code;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$lang) {\n\t\t\t\t$lang = \\App\\Language::DEFAULT_LANG;\n\t\t\t}\n\t\t\t$request->set('lang', $lang);\n\t\t}\n\t\treturn $request;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function preProcess(App\\Request $request, $display = true)\n\t{\n\t\tif (preg_match('|^step([0-9])|i', $request->getMode(), $m)) {\n\t\t\t$this->stepNumber = (int) $m[1];\n\t\t}\n\t\tif ('step3' !== $request->getMode()) {\n\t\t\tdate_default_timezone_set('UTC'); // to overcome the pre configuration settings\n\t\t}\n\t\t// Added to redirect to default module if already installed\n\t\t$request->set('module', 'Install');\n\t\t$request = $this->setLanguage($request);\n\t\tif ('step7' !== $request->getMode() && \\App\\Config::main('application_unique_key', false)) {\n\t\t\t$defaultModule = \\App\\Config::main('default_module');\n\t\t\t$defaultModuleInstance = Vtiger_Module_Model::getInstance($defaultModule);\n\t\t\t$defaultView = $defaultModuleInstance->getDefaultViewName();\n\t\t\theader('location: ../index.php?module=' . $defaultModule . '&view=' . $defaultView);\n\t\t}\n\t\t$_SESSION['language'] = $defaultLanguage = ($request->getByType('lang', 1)) ?: \\App\\Language::DEFAULT_LANG;\n\t\tApp\\Language::setTemporaryLanguage($defaultLanguage);\n\t\t$this->loadJsConfig($request);\n\t\t$this->viewer = new Vtiger_Viewer();\n\t\t$this->viewer->setTemplateDir('install/tpl/');\n\t\t$this->viewer->assign('IS_IE', \\App\\RequestUtil::getBrowserInfo()->ie);\n\t\t$this->viewer->assign('LANGUAGE_STRINGS', $this->getJSLanguageStrings($request));\n\t\t$this->viewer->assign('LANG', $request->getByType('lang', 1));\n\t\t$this->viewer->assign('NEXT_STEP', 'step' . ($this->stepNumber + 1));\n\t\t$this->viewer->assign('STEP_NUMBER', $this->stepNumber);\n\t\t$this->viewer->assign('HTMLLANG', substr($defaultLanguage, 0, 2));\n\t\t$this->viewer->assign('LANGUAGE', $defaultLanguage);\n\t\t$this->viewer->assign('STYLES', $this->getHeaderCss($request));\n\t\t$this->viewer->assign('HEADER_SCRIPTS', $this->getHeaderScripts($request));\n\t\t$this->viewer->assign('MODE', $request->getMode());\n\t\t$this->viewer->assign('YETIFORCE_VERSION', \\App\\Version::get());\n\t\t$this->viewer->error_reporting = E_ALL & ~E_NOTICE;\n\t\t$this->viewer->display('InstallPreProcess.tpl');\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function process(App\\Request $request)\n\t{\n\t\t$mode = $request->getMode();\n\t\tif (!empty($mode) && $this->isMethodExposed($mode)) {\n\t\t\treturn $this->{$mode}($request);\n\t\t}\n\t\t$this->step1($request);\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function postProcess(App\\Request $request, $display = true)\n\t{\n\t\t$this->viewer->assign('FOOTER_SCRIPTS', $this->getFooterScripts($request));\n\t\t$this->viewer->display('InstallPostProcess.tpl');\n\t}\n\n\tpublic function step1(App\\Request $request)\n\t{\n\t\t$isMigrate = false;\n\t\tif (is_dir(ROOT_DIRECTORY . '/install/migrate_schema/')) {\n\t\t\t$filesInDir = scandir(ROOT_DIRECTORY . '/install/migrate_schema/');\n\t\t\tif (\\count($filesInDir) > 2) {\n\t\t\t\t$isMigrate = true;\n\t\t\t}\n\t\t}\n\t\t$this->viewer->assign('LANGUAGES', Install_Utils_Model::getLanguages());\n\t\t$this->viewer->assign('IS_MIGRATE', $isMigrate);\n\t\t$this->viewer->display('StepWelcome.tpl');\n\t}\n\n\tpublic function step2(App\\Request $request)\n\t{\n\t\tif ('pl-PL' === $_SESSION['language']) {\n\t\t\t$license = file_get_contents('licenses/LicensePL.txt');\n\t\t} else {\n\t\t\t$license = file_get_contents('licenses/LicenseEN.txt');\n\t\t}\n\t\t$this->viewer->assign('LIBRARIES', \\App\\Installer\\Credits::getCredits());\n\t\t$this->viewer->assign('LICENSE', nl2br($license));\n\t\tif ($request->getRaw('session_id') !== session_id()) {\n\t\t\t$this->viewer->display('SessionError.tpl');\n\t\t} else {\n\t\t\t$this->viewer->display('StepLicense.tpl');\n\t\t}\n\t}\n\n\t/**\n\t * Show choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function stepChooseHost(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('PRODUCT_ClOUD', \\App\\YetiForce\\Shop::getProduct('YetiForceInstallInCloud'));\n\t\t$this->viewer->assign('PRODUCT_SHARED', \\App\\YetiForce\\Shop::getProduct('YetiForceInstallInHosting'));\n\t\t$this->viewer->display('StepChooseHost.tpl');\n\t}\n\n\t/**\n\t * Show buy modal in choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function showBuyModal(App\\Request $request)\n\t{\n\t\t$request = new \\App\\Request([\n\t\t\t'product' => $request->getByType('product'),\n\t\t\t'module' => 'YetiForce',\n\t\t\t'parent' => 'Settings',\n\t\t\t'installation' => true,\n\t\t], false);\n\t\t$instance = new Settings_YetiForce_BuyModal_View();\n\t\t$instance->preProcessAjax($request);\n\t\t$instance->process($request);\n\t\t$instance->postProcessAjax($request);\n\t}\n\n\t/**\n\t * Show product modal in choose host step.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function showProductModal(App\\Request $request)\n\t{\n\t\t$request = new \\App\\Request([\n\t\t\t'product' => $request->getByType('product'),\n\t\t\t'module' => 'YetiForce',\n\t\t\t'parent' => 'Settings',\n\t\t\t'installation' => true,\n\t\t], false);\n\t\t$instance = new Settings_YetiForce_ProductModal_View();\n\t\t$instance->preProcessAjax($request);\n\t\t$instance->process($request);\n\t\t$instance->postProcessAjax($request);\n\t}\n\n\tpublic function step3(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('ALL', \\App\\Utils\\ConfReport::getByType([\n\t\t\t'stability', 'security', 'libraries', 'performance', 'environment', 'publicDirectoryAccess', 'writableFilesAndFolders',\n\t\t]));\n\t\t$this->viewer->display('StepVerifyServerConfiguration.tpl');\n\t}\n\n\tpublic function step4(App\\Request $request)\n\t{\n\t\t$this->viewer->assign('CURRENCIES', Install_Utils_Model::getCurrencyList());\n\t\trequire_once ROOT_DIRECTORY . '/modules/Users/UserTimeZonesArray.php';\n\t\t$this->viewer->assign('TIMEZONES', UserTimeZones::getTimeZones());\n\n\t\t$defaultParameters = Install_Utils_Model::getDefaultPreInstallParameters();\n\t\t$this->viewer->assign('USERNAME_BLACKLIST', require ROOT_DIRECTORY . '/config/username_blacklist.php');\n\t\t$this->viewer->assign('DB_HOSTNAME', $defaultParameters['db_server']);\n\t\t$this->viewer->assign('DB_USERNAME', $defaultParameters['db_username']);\n\t\t$this->viewer->assign('DB_PASSWORD', $defaultParameters['db_password']);\n\t\t$this->viewer->assign('DB_NAME', $defaultParameters['db_name']);\n\t\t$this->viewer->assign('ADMIN_NAME', $defaultParameters['admin_name']);\n\t\t$this->viewer->assign('ADMIN_FIRSTNAME', $defaultParameters['admin_firstname']);\n\t\t$this->viewer->assign('ADMIN_LASTNAME', $defaultParameters['admin_lastname']);\n\t\t$this->viewer->assign('ADMIN_PASSWORD', $defaultParameters['admin_password']);\n\t\t$this->viewer->assign('ADMIN_EMAIL', $defaultParameters['admin_email']);\n\t\t$this->viewer->display('StepSystemConfiguration.tpl');\n\t}\n\n\tpublic function step5(App\\Request $request)\n\t{\n\t\tset_time_limit(60); // Override default limit to let install complete.\n\t\t$error = false;\n\t\t$dbConnection['flag'] = true;\n\t\t$configFile = new \\App\\ConfigFile('db');\n\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\ttry {\n\t\t\t\t\t$configFile->set($name, $request->getRaw($name));\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t\t\t$error = true;\n\t\t\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$error) {\n\t\t\t$dbConnection = Install_Utils_Model::checkDbConnection($configFile->getData());\n\t\t\tif (!$dbConnection['flag']) {\n\t\t\t\t$error = true;\n\t\t\t} else {\n\t\t\t\t$configFile->create();\n\t\t\t}\n\t\t}\n\t\t$configFile = new \\App\\ConfigFile('main');\n\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\ttry {\n\t\t\t\t\t$configFile->set($name, $request->get($name));\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t\t\t$error = true;\n\t\t\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$webRoot = ($_SERVER['HTTP_HOST']) ?: $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'];\n\t\t$webRoot .= $_SERVER['REQUEST_URI'];\n\t\t$webRoot = str_replace('index.php', '', $webRoot);\n\t\t$webRoot = (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) ? 'https://' : 'http://') . $webRoot;\n\t\t$tabUrl = explode('/', $webRoot);\n\t\tunset($tabUrl[\\count($tabUrl) - 1], $tabUrl[\\count($tabUrl) - 1]);\n\t\t$webRoot = implode('/', $tabUrl) . '/';\n\t\t$name = 'site_URL';\n\t\ttry {\n\t\t\t$configFile->set($name, $webRoot);\n\t\t\t$_SESSION['config_file_info'][$name] = $configFile->get($name);\n\t\t} catch (\\Throwable $e) {\n\t\t\t$_SESSION['config_file_info'][$name] = '';\n\t\t\t$error = true;\n\t\t\t\\App\\Log::error($e->__toString(), 'Install');\n\t\t}\n\t\tforeach (['user_name', 'password', 'retype_password', 'firstname', 'lastname', 'admin_email', 'dateformat', 'currency_name'] as $name) {\n\t\t\tif ($request->has($name)) {\n\t\t\t\tswitch ($name) {\n\t\t\t\t\tcase 'currency_name':\n\t\t\t\t\t\t$currencies = Install_Utils_Model::getCurrencyList();\n\t\t\t\t\t\tif (($value = $request->get('currency_name')) && isset($currencies[$value])) {\n\t\t\t\t\t\t\t$_SESSION['config_file_info']['currency_code'] = $currencies[$value][0];\n\t\t\t\t\t\t\t$_SESSION['config_file_info']['currency_symbol'] = $currencies[$value][1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_name':\n\t\t\t\t\t\t$blacklist = require ROOT_DIRECTORY . '/config/username_blacklist.php';\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tif (\\in_array($value, $blacklist) || !preg_match('/^[a-zA-Z0-9_.@-]{3,64}$/', $value)) {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'admin_email':\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tif (!App\\Validator::email($value)) {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'password':\n\t\t\t\t\tcase 'retype_password':\n\t\t\t\t\t\tif ($request->getRaw('password') === $request->getRaw('retype_password')) {\n\t\t\t\t\t\t\t$value = $request->getRaw($name);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = '';\n\t\t\t\t\t\t\t$error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$value = $request->get($name);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$_SESSION['config_file_info'][$name] = $value;\n\t\t\t}\n\t\t}\n\t\t$this->viewer->assign('BREAK_INSTALL', $error);\n\t\t$this->viewer->assign('DB_CONNECTION_INFO', $dbConnection);\n\t\t$this->viewer->assign('INFORMATION', $_SESSION['config_file_info'] ?? []);\n\t\tif (!$error) {\n\t\t\t$this->viewer->assign('CONF_REPORT_RESULT', \\App\\Utils\\ConfReport::getByType(['database']));\n\t\t}\n\t\t$this->viewer->display('StepConfirmConfigurationSettings.tpl');\n\t}\n\n\t/**\n\t * Create configuration file.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\SmartyException\n\t */\n\tpublic function step6(App\\Request $request)\n\t{\n\t\tif (empty($_SESSION['config_file_info'])) {\n\t\t\t\\App\\Log::error('Error generating configuration files, no data in the session', 'Install');\n\t\t\t$this->viewer->assign('ERROR', 'LBL_NO_NO_DATA_IN_SESSION');\n\t\t} else {\n\t\t\t$configFile = new \\App\\ConfigFile('main');\n\t\t\tforeach ($configFile->getTemplate() as $name => $data) {\n\t\t\t\tif (isset($_SESSION['config_file_info'][$name])) {\n\t\t\t\t\t$configFile->set($name, $_SESSION['config_file_info'][$name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$configFile->set('application_unique_key', '');\n\t\t\t$configFile->create();\n\t\t}\n\n\t\t$this->viewer->display('StepCompanyDetails.tpl');\n\t}\n\n\tpublic function step7(App\\Request $request)\n\t{\n\t\tset_time_limit(0);\n\t\tif (\\App\\Config::main('application_unique_key', false) && !empty($_SESSION['config_file_info'])) {\n\t\t\t// Initialize and set up tables\n\t\t\t$initSchema = new Install_InitSchema_Model();\n\t\t\ttry {\n\t\t\t\t$initSchema->initialize();\n\t\t\t\t$initSchema->setCompanyDetails($request);\n\t\t\t\tchmod(ROOT_DIRECTORY . '/cron/cron.sh', 0744);\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\t$_SESSION['installation_success'] = false;\n\t\t\t\t\\App\\Log::error($e->__toString());\n\t\t\t}\n\t\t\t$this->viewer->assign('USER_NAME', $_SESSION['config_file_info']['user_name'] ?? '');\n\t\t\t$this->viewer->assign('PASSWORD', $_SESSION['config_file_info']['password'] ?? '');\n\t\t}\n\t\tif (!($success = $_SESSION['installation_success'] ?? false)) {\n\t\t\tInstall_Utils_Model::cleanConfiguration();\n\t\t} else {\n\t\t\tunset($_SESSION['language']);\n\t\t}\n\t\t$this->viewer->assign('INSTALLATION_SUCCESS', $success);\n\t\t$this->viewer->display('StepInstall.tpl');\n\t}\n\n\tprotected function preProcessDisplay(App\\Request $request)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function validateRequest(App\\Request $request)\n\t{\n\t\t$request->validateWriteAccess(true);\n\t}\n\n\t/**\n\t * Retrieves css styles that need to loaded in the page.\n\t *\n\t * @param \\App\\Request $request - request model\n\t *\n\t * @return Vtiger_CssScript_Model[]\n\t */\n\tpublic function getHeaderCss(App\\Request $request)\n\t{\n\t\t$headerCssInstances = parent::getHeaderCss($request);\n\t\t$cssFileNames = [\n\t\t\t'~libraries/datatables.net-bs4/css/dataTables.bootstrap4.css',\n\t\t\t'~libraries/datatables.net-responsive-bs4/css/responsive.bootstrap4.css',\n\t\t\t'~libraries/@fortawesome/fontawesome-free/css/all.css',\n\t\t\t'~install/tpl/resources/css/style.css',\n\t\t\t'~install/tpl/resources/css/mkCheckbox.css',\n\t\t];\n\t\t$cssInstances = $this->checkAndConvertCssStyles($cssFileNames);\n\n\t\treturn array_merge($headerCssInstances, $cssInstances);\n\t}\n\n\tpublic function getHeaderScripts(App\\Request $request)\n\t{\n\t\treturn $this->checkAndConvertJsScripts([\n\t\t\t'libraries.jquery.dist.jquery',\n\t\t]);\n\t}\n\n\t/**\n\t * Function to get the list of Script models to be included.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @return Vtiger_JsScript_Model[]\n\t */\n\tpublic function getFooterScripts(App\\Request $request)\n\t{\n\t\t$viewScripts = [];\n\t\tif ('step7' === $request->getMode()) {\n\t\t\treturn [];\n\t\t}\n\t\tif ('stepChooseHost' === $request->getMode()) {\n\t\t\t$viewScripts = $this->checkAndConvertJsScripts([\n\t\t\t\t'~layouts/resources/Field.js',\n\t\t\t\t'~layouts/resources/validator/BaseValidator.js',\n\t\t\t\t'~layouts/resources/validator/FieldValidator.js',\n\t\t\t\t'modules.Settings.YetiForce.resources.Shop',\n\t\t\t]);\n\t\t}\n\t\treturn array_merge(parent::getFooterScripts($request), $viewScripts, $this->checkAndConvertJsScripts([\n\t\t\t'~libraries/datatables.net/js/jquery.dataTables.js',\n\t\t\t'~libraries/datatables.net-bs4/js/dataTables.bootstrap4.js',\n\t\t\t'~libraries/datatables.net-responsive/js/dataTables.responsive.js',\n\t\t\t'~libraries/datatables.net-responsive-bs4/js/responsive.bootstrap4.js',\n\t\t\t'~install/tpl/resources/Index.js',\n\t\t]));\n\t}\n}\n", "<?php\n/* +**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.1\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * Contributor(s): YetiForce.com\n * ********************************************************************************** */\n\nclass Users_Login_View extends \\App\\Controller\\View\\Base\n{\n\t/** {@inheritdoc} */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\tif ($nonce = \\App\\Session::get('CSP_TOKEN')) {\n\t\t\t$this->headers->csp['script-src'] .= \" 'nonce-{$nonce}'\";\n\t\t}\n\t\t$this->headers->csp['default-src'] = '\\'self\\'';\n\t\t$this->headers->csp['script-src'] = str_replace([\n\t\t\t' \\'unsafe-inline\\'', ' blob:'\n\t\t], '', $this->headers->csp['script-src']);\n\t\t$this->headers->csp['form-action'] = '\\'self\\'';\n\t\t$this->headers->csp['style-src'] = '\\'self\\'';\n\t\t$this->headers->csp['base-uri'] = '\\'self\\'';\n\t\t$this->headers->csp['object-src'] = '\\'none\\'';\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function loginRequired()\n\t{\n\t\treturn false;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t\treturn true;\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function preProcess(App\\Request $request, $display = true)\n\t{\n\t\tparent::preProcess($request, false);\n\t\t$viewer = $this->getViewer($request);\n\t\t$viewer->assign('QUALIFIED_MODULE', $request->getModule());\n\t\t$viewer->assign('SHOW_FOOTER_BAR', false);\n\t\tif ($display) {\n\t\t\t$this->preProcessDisplay($request);\n\t\t}\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function postProcess(App\\Request $request, $display = true)\n\t{\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function process(App\\Request $request)\n\t{\n\t\t$viewer = $this->getViewer($request);\n\t\t$viewer->assign('IS_BLOCKED_IP', Settings_BruteForce_Module_Model::getCleanInstance()->isBlockedIp());\n\t\tif (\\App\\Session::has('UserLoginMessage')) {\n\t\t\t$viewer->assign('MESSAGE', \\App\\Session::get('UserLoginMessage'));\n\t\t\t$viewer->assign('MESSAGE_TYPE', \\App\\Session::get('UserLoginMessageType'));\n\t\t\t\\App\\Session::delete('UserLoginMessage');\n\t\t\t\\App\\Session::delete('UserLoginMessageType');\n\t\t}\n\t\tif ('2fa' === \\App\\Session::get('LoginAuthyMethod')) {\n\t\t\t$viewer->view('Login2faTotp.tpl', 'Users');\n\t\t} else {\n\t\t\t$viewer->assign('LANGUAGE_SELECTION', App\\Config::main('langInLoginView'));\n\t\t\t$viewer->assign('LAYOUT_SELECTION', App\\Config::main('layoutInLoginView'));\n\t\t\t$viewer->view('Login.tpl', 'Users');\n\t\t}\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function getHeaderCss(App\\Request $request)\n\t{\n\t\treturn array_merge(parent::getHeaderCss($request), $this->checkAndConvertCssStyles([\n\t\t\t'modules.Users.Login'\n\t\t]));\n\t}\n\n\t/** {@inheritdoc} */\n\tpublic function getHeaderScripts(App\\Request $request)\n\t{\n\t\treturn array_merge(parent::getHeaderScripts($request), $this->checkAndConvertJsScripts([\n\t\t\t'~libraries/device-uuid/lib/device-uuid.js',\n\t\t\t'modules.Users.resources.Login'\n\t\t]));\n\t}\n}\n"], "filenames": ["app/Controller/Action.php", "app/Controller/Base.php", "app/Request.php", "config/ConfigTemplates.php", "config/Security.php", "config/csrf_config.php", "config/version.php", "include/main/WebUI.php", "install/views/Index.php", "modules/Users/views/Login.php"], "buggy_code_start_loc": [9, 9, 713, 1155, 153, 8, 4, 171, 16, 14], "buggy_code_end_loc": [22, 60, 715, 1155, 153, 26, 6, 174, 19, 17], "fixing_code_start_loc": [10, 10, 713, 1156, 154, 9, 4, 171, 15, 13], "fixing_code_end_loc": [19, 43, 715, 1162, 157, 29, 6, 172, 15, 13], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in Packagist yetiforce/yetiforce-crm prior to 6.3.0.", "other": {"cve": {"id": "CVE-2022-0269", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-24T12:15:07.713", "lastModified": "2022-01-28T16:31:21.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in Packagist yetiforce/yetiforce-crm prior to 6.3.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo  Cross-Site Request Forgery (CSRF) en el paquete yetiforce/yetiforce-crm versiones anteriores a 6.3.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yetiforce:yetiforce_customer_relationship_management:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.3.0", "matchCriteriaId": "BA4FB254-9FF3-45E9-AD54-096B3B65F3D8"}]}]}], "references": [{"url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/298c7870e6fe4332d8aa1757a9c8d79f841389ff", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a0470915-f6df-45b8-b3a2-01aebe764df0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/298c7870e6fe4332d8aa1757a9c8d79f841389ff"}}