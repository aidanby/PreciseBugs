{"buggy_code": ["<?php\r\ninclude('config.php');\r\n// Include i18n class and initialize it\r\nrequire_once 'i18n.class.php';\r\n$i18n = new i18n();\r\n$i18n->setCachePath('cache');\r\n$i18n->setFilePath('lang/{LANGUAGE}.ini');\r\n$i18n->setFallbackLang('en');\r\n$i18n->init();\r\n// Check whether the php-exif and php-gd libraries are installed\r\nif (!extension_loaded('gd')) {\r\n\texit(\"<center><code style='color: red;'>\" . L::warning_php_gd . \"</code></center>\");\r\n}\r\nif (!extension_loaded('exif')) {\r\n\texit(\"<center><code style='color: red;'>\" . L::warning_php_exif . \"</code></center>\");\r\n}\r\n// Time allowed the script to run. Generating tims can take time,\r\n// and increasing the time limit prevents the script from ending prematurely\r\nset_time_limit(600);\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"<?php echo $i18n->getAppliedLang(); ?>\">\r\n\r\n<!--\r\n\t Author: Dmitri Popov\r\n\t License: GPLv3 https://www.gnu.org/licenses/gpl-3.0.txt\r\n\t Source code: https://github.com/dmpop/mejiro\r\n\t-->\r\n\r\n<head>\r\n\t<meta charset=\"utf-8\">\r\n\t<link rel=\"shortcut icon\" href=\"favicon.png\" />\r\n\t<meta name=\"viewport\" content=\"width=device-width\">\r\n\t<link rel=\"stylesheet\" href=\"styles.css\" />\r\n\r\n\t<title><?php echo $title; ?></title>\r\n</head>\r\n\r\n<body>\r\n\t<div id=\"content\">\r\n\t\t<?php\r\n\t\t// basename and str_replace are used to prevent the path traversal attacks. Not very elegant, but it should do the trick.\r\n\t\t//  The $d parameter is used to detect a subdirectory\r\n\t\tif (isset($_GET['d'])) {\r\n\t\t\t$sub_photo_dir = $_GET['d'];\r\n\t\t\t$d = \"?d=\" . htmlentities($sub_photo_dir);\r\n\t\t\t$and_d = \"&d=\" . htmlentities($sub_photo_dir);\r\n\t\t} else {\r\n\t\t\t$sub_photo_dir = null;\r\n\t\t}\r\n\t\t// Create $base_photo_dir if it doesn't exist\r\n\t\tif (!file_exists($base_photo_dir)) {\r\n\t\t\tmkdir($base_photo_dir, 0755, true);\r\n\t\t}\r\n\t\t$photo_dir = str_replace(DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $base_photo_dir . DIRECTORY_SEPARATOR . $sub_photo_dir . DIRECTORY_SEPARATOR);\r\n\r\n\t\t/*\r\n\t * Returns an array of latitude and longitude from the image file.\r\n\t * @param image $file\r\n\t * @return multitype:number |boolean\r\n\t * http://stackoverflow.com/questions/5449282/reading-geotag-data-from-image-in-php\r\n\t */\r\n\t\tfunction read_gps_location($file)\r\n\t\t{\r\n\t\t\tif (is_file($file)) {\r\n\t\t\t\t$exif = exif_read_data($file);\r\n\t\t\t\tif (\r\n\t\t\t\t\tisset($exif['GPSLatitude']) && isset($exif['GPSLongitude']) &&\r\n\t\t\t\t\tisset($exif['GPSLatitudeRef']) && isset($exif['GPSLongitudeRef']) &&\r\n\t\t\t\t\tin_array($exif['GPSLatitudeRef'], array('E', 'W', 'N', 'S')) && in_array($exif['GPSLongitudeRef'], array('E', 'W', 'N', 'S'))\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\t$GPSLatitudeRef\t = strtolower(trim($exif['GPSLatitudeRef']));\r\n\t\t\t\t\t$GPSLongitudeRef = strtolower(trim($exif['GPSLongitudeRef']));\r\n\r\n\t\t\t\t\t$lat_degrees_a = explode('/', $exif['GPSLatitude'][0]);\r\n\t\t\t\t\t$lat_minutes_a = explode('/', $exif['GPSLatitude'][1]);\r\n\t\t\t\t\t$lat_seconds_a = explode('/', $exif['GPSLatitude'][2]);\r\n\t\t\t\t\t$lon_degrees_a = explode('/', $exif['GPSLongitude'][0]);\r\n\t\t\t\t\t$lon_minutes_a = explode('/', $exif['GPSLongitude'][1]);\r\n\t\t\t\t\t$lon_seconds_a = explode('/', $exif['GPSLongitude'][2]);\r\n\r\n\t\t\t\t\t$lat_degrees = $lat_degrees_a[0] / $lat_degrees_a[1];\r\n\t\t\t\t\t$lat_minutes = $lat_minutes_a[0] / $lat_minutes_a[1];\r\n\t\t\t\t\t$lat_seconds = $lat_seconds_a[0] / $lat_seconds_a[1];\r\n\t\t\t\t\t$lon_degrees = $lon_degrees_a[0] / $lon_degrees_a[1];\r\n\t\t\t\t\t$lon_minutes = $lon_minutes_a[0] / $lon_minutes_a[1];\r\n\t\t\t\t\t$lon_seconds = $lon_seconds_a[0] / $lon_seconds_a[1];\r\n\r\n\t\t\t\t\t$lat = (float) $lat_degrees + ((($lat_minutes * 60) + ($lat_seconds)) / 3600);\r\n\t\t\t\t\t$lon = (float) $lon_degrees + ((($lon_minutes * 60) + ($lon_seconds)) / 3600);\r\n\r\n\t\t\t\t\t// If the latitude is South, make it negative\r\n\t\t\t\t\t// If the longitude is west, make it negative\r\n\t\t\t\t\t$GPSLatitudeRef\t == 's' ? $lat *= -1 : '';\r\n\t\t\t\t\t$GPSLongitudeRef == 'w' ? $lon *= -1 : '';\r\n\r\n\t\t\t\t\treturn array(\r\n\t\t\t\t\t\t'lat' => $lat,\r\n\t\t\t\t\t\t'lon' => $lon\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Create tims if missing\r\n\t\tif (file_exists($photo_dir) && !file_exists($photo_dir . '.tims')) {\r\n\t\t\tmkdir($photo_dir . '.tims');\r\n\t\t}\r\n\r\n\t\t// Get file info\r\n\t\t$files = glob($photo_dir . \"*.{\" . $img_formats . \"}\", GLOB_BRACE);\r\n\r\n\t\t// Check whether the reversed order option is enabled and sort the array accordingly\r\n\t\tif ($r_sort) {\r\n\t\t\trsort($files);\r\n\t\t}\r\n\r\n\t\t// Update count (we might have removed some files)\r\n\t\t$file_count = count($files);\r\n\r\n\t\t// Function that generates tims\r\n\t\tfunction createTim($original, $tim, $timWidth)\r\n\t\t{\r\n\t\t\t// Load image\r\n\t\t\t$img = @imagecreatefromjpeg($original);\r\n\t\t\tif (!$img) return false;\r\n\r\n\t\t\t// Get image size\r\n\t\t\t$width = imagesx($img);\r\n\t\t\t$height = imagesy($img);\r\n\r\n\t\t\t// Calculate tim size\r\n\t\t\t$new_width\t= $timWidth;\r\n\t\t\t$new_height = floor($height * ($timWidth / $width));\r\n\r\n\t\t\t// Create a new temporary image\r\n\t\t\t$tmp_img = imagecreatetruecolor($new_width, $new_height);\r\n\r\n\t\t\t// Copy and resize old image into new image\r\n\t\t\timagecopyresampled($tmp_img, $img, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\r\n\r\n\t\t\t// Save tim into a file\r\n\t\t\t$ok = @imagejpeg($tmp_img, $tim);\r\n\r\n\t\t\t// Cleanup\r\n\t\t\timagedestroy($img);\r\n\t\t\timagedestroy($tmp_img);\r\n\r\n\t\t\t// Return bool true if tim creation worked\r\n\t\t\treturn $ok;\r\n\t\t}\r\n\r\n\t\t// Generate missing tims\r\n\t\tfor ($i = 0; $i < $file_count; $i++) {\r\n\t\t\t$file  = $files[$i];\r\n\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\r\n\t\t\tif (!file_exists($tim)) {\r\n\t\t\t\t// Generate tims\r\n\t\t\t\tcreateTim($file, $tim, $tim_size);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare pagination. Calculate total items per page * START\r\n\t\t$total = count($files);\r\n\t\t$last_page = ceil($total / $per_page);\r\n\r\n\t\tif (isset($_GET[\"photo\"]) == '') {\r\n\r\n\t\t\tif (isset($_GET[\"page\"]) && ($_GET[\"page\"] <= $last_page) && ($_GET[\"page\"] > 0) && ($_GET[\"all\"] != 1)) {\r\n\t\t\t\t$page = $_GET[\"page\"];\r\n\t\t\t\t$offset = ($per_page) * ($page - 1);\r\n\t\t\t} else {\r\n\t\t\t\t$page = 1;\r\n\t\t\t\t$offset = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (isset($_GET['all']) == 1) {\r\n\t\t\t\t$all = 1;\r\n\t\t\t}\r\n\t\t\t$max = $offset + $per_page;\r\n\t\t}\r\n\t\tif (!isset($max)) {\r\n\t\t\t$max = null;\r\n\t\t}\r\n\t\tif ($max > $total) {\r\n\t\t\t$max = $total;\r\n\t\t}\r\n\t\t// Pagination. Calculate total items per page * END\r\n\r\n\t\t// The $grid parameter is used to show the main grid\r\n\t\t$grid = (isset($_GET['photo']) ? $_GET['photo'] : null);\r\n\r\n\t\tif (!isset($grid)) {\r\n\t\t\techo '<div style=\"text-align:center; margin-bottom: 1.5em; margin-top: 1.5em;\">';\r\n\t\t\techo '<a style=\"text-decoration:none;\" href=\"' . basename($_SERVER['PHP_SELF']) . '\"><img style=\"display: inline; height: 3.5em; vertical-align: middle;\" src=\"favicon.png\" alt=\"Mejiro\" /></a>';\r\n\t\t\techo '<a style=\"text-decoration:none;\" href=\"' . basename($_SERVER['PHP_SELF']) . '\"><h1 style=\"display: inline; font-size: 2.3em; margin-left: 0.19em; vertical-align: middle; letter-spacing: 3px; color: #619b8a;\">' . $title . '</h1></a>';\r\n\t\t\techo '</div>';\r\n\t\t\techo \"<div class ='center' style='color: gray; margin-bottom: 1em;'>\" . $subtitle . \"</div>\";\r\n\t\t\techo \"<div class ='center' style='margin-bottom: 1em;'>\";\r\n\t\t\t// Show stats icon\r\n\t\t\techo '<a href=\"stats.php\"><img src=\"svg/stats.svg\" alt=\"' . L::stats . '\" title=\"' . L::stats . '\"/></a>';\r\n\t\t\t// Show the grid icon if there are several pages\r\n\t\t\tif (!isset($_GET[\"all\"])) {\r\n\t\t\t\t$all = null;\r\n\t\t\t}\r\n\t\t\tif (isset($_GET[\"all\"]) != 1 && $file_count > $per_page) {\r\n\t\t\t\techo '<a href=\"?all=1' . $and_d . '\"><img  style=\"margin-left: .5em;\" src=\"svg/display-grid.svg\" alt=\"' . L::img_show_all . '\" title=\"' . L::img_show_all . '\"/></a>';\r\n\t\t\t}\r\n\t\t\techo '<hr style=\"margin-bottom: 1em;\">';\r\n\r\n\t\t\t// Create an array with all subdirectories\r\n\t\t\t$all_sub_dirs = array_filter(glob($photo_dir . '*'), 'is_dir');\r\n\t\t\t$sub_dirs = array_diff($all_sub_dirs, array($photo_dir . \".tims\"));\r\n\t\t\t$count = count(glob($photo_dir . \".tims/*\"));\r\n\t\t\techo \"<span style='color: gray'>\" . L::album_items_count . \": </span>\" . $count;\r\n\t\t\techo \"</div>\";\r\n\r\n\t\t\t// Populate a drop-down list with subdirectories\r\n\t\t\tif ((count($sub_dirs)) > 0 or (!empty($sub_photo_dir))) {\r\n\t\t\t\techo \"<noscript>\";\r\n\t\t\t\techo \"<h3><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/> Make sure that JavaScript is enabled</h3>\";\r\n\t\t\t\techo \"</noscript>\";\r\n\t\t\t\techo '<div class=\"center\" style=\"margin-bottom: 1em;\">';\r\n\t\t\t\techo \"<a href='\"  . basename($_SERVER['PHP_SELF']) . \"'><img style='vertical-align: middle;' alt='\" . L::img_root_album . \"' title='\" . L::img_root_album . \"' src='svg/home.svg'/></a> &rarr;&nbsp;\";\r\n\t\t\t\t$higher_dirs = explode(\"/\", $sub_photo_dir);\r\n\t\t\t\t$higher_dir_cascade = \"\";\r\n\t\t\t\tforeach ($higher_dirs as $higher_dir) {\r\n\t\t\t\t\tif (!empty($higher_dir)) {\r\n\t\t\t\t\t\tif (!empty($higher_dir_cascade)) {\r\n\t\t\t\t\t\t\t$higher_dir_cascade = $higher_dir_cascade . DIRECTORY_SEPARATOR;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$higher_dir_cascade = $higher_dir_cascade . $higher_dir;\r\n\t\t\t\t\t\techo \"<a href='\"  . basename($_SERVER['PHP_SELF']) . \"?d=\" . $higher_dir_cascade . \"'>\" . $higher_dir . \"</a> &rarr;&nbsp;\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\techo '<select style=\"min-width: 10em; vertical-align: middle; margin-right: 0.5em;\" name=\"\" onchange=\"javascript:location.href = this.value;\">';\r\n\t\t\t\techo '<option value=\"Default\">' . L::album . '</option>';\r\n\t\t\t\tforeach ($sub_dirs as $dir) {\r\n\t\t\t\t\t$dir_name = basename($dir);\r\n\t\t\t\t\t$dir_option = str_replace('\\'', '&apos;', $sub_photo_dir . DIRECTORY_SEPARATOR . $dir_name);\r\n\t\t\t\t\techo \"<option value='?d=\" . ltrim($dir_option, '/') . \"'>\" . $dir_name . \"</option>\";\r\n\t\t\t\t}\r\n\t\t\t\techo \"</select>\";\r\n\t\t\t}\r\n\r\n\t\t\t// Check whether $photo_dir directory exists\r\n\t\t\tif (!file_exists($photo_dir)) {\r\n\t\t\t\techo (\"<h3 style='margin-top: 2em;'><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/>\" . L::warning_no_album . \"</h3>\");\r\n\t\t\t\texit;\r\n\t\t\t}\r\n\t\t\tif ($file_count < 1) {\r\n\t\t\t\techo (\"<h3 style='margin-top: 2em;'><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/> \" . L::warning_empty_album . \"</h3>\");\r\n\t\t\t\texit;\r\n\t\t\t}\r\n\t\t\t// Show the content of the description.txt file if it exists in the album\r\n\t\t\tif (file_exists($photo_dir . DIRECTORY_SEPARATOR . \"description.txt\")) {\r\n\t\t\t\techo '<div style=\"margin: auto; margin-top: 1.5em; margin-bottom: 1em; width: 50%;\">';\r\n\t\t\t\techo file_get_contents($photo_dir . DIRECTORY_SEPARATOR . \"description.txt\");\r\n\t\t\t\techo \"</div>\";\r\n\t\t\t}\r\n\t\t\techo \"</div>\";\r\n\t\t\techo '<div class=\"gallery-grid\">';\r\n\t\t\tif ($all == 1) {\r\n\t\t\t\tfor ($i = 0; $i < $file_count; $i++) {\r\n\t\t\t\t\t$file = $files[$i];\r\n\t\t\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t\t\t$file_path = pathinfo($file);\r\n\t\t\t\t\techo '<figure class=\"gallery-frame\">';\r\n\t\t\t\t\techo '<a href=\"index.php?all=1&photo=' . $file . $and_d . '\"><img class=\"gallery-img\" src=\"' . $tim . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a>';\r\n\t\t\t\t\techo '<figcaption>' . $file_path['filename'] . '</figcaption></figure>';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ($i = $offset; $i < $max; $i++) {\r\n\t\t\t\t\t$file = $files[$i];\r\n\t\t\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t\t\t$file_path = pathinfo($file);\r\n\t\t\t\t\techo '<figure class=\"gallery-frame\">';\r\n\t\t\t\t\techo '<a href=\"index.php?all=1&photo=' . $file . $and_d . '\"><img class=\"gallery-img\" src=\"' . $tim . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a>';\r\n\t\t\t\t\techo '<figcaption>' . $file_path['filename'] . '</figcaption></figure>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\techo \"</div>\";\r\n\t\t}\r\n\r\n\t\tif (isset($_GET[\"all\"]) != 1) {\r\n\t\t\tshow_pagination($page, $last_page, $and_d, $sub_photo_dir); // Pagination. Show navigation on bottom of page\r\n\t\t}\r\n\r\n\t\t//Pagination. Create the navigation links * START\r\n\t\tfunction show_pagination($current_page, $last_page, $and_d, $sub_photo_dir)\r\n\t\t{\r\n\t\t\techo '<div class=\"center\">';\r\n\t\t\tif ($current_page != 1 && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . \"1\" . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-up.svg\" alt=\"' . L::nav_first . '\" title=\"' . L::nav_first . '\"/></a> ';\r\n\t\t\t}\r\n\t\t\tif ($current_page > 1 && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . ($current_page - 1) . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-left.svg\" alt=\"' . L::nav_prev . '\" title=\"' . L::nav_prev . '\"/></a> ';\r\n\t\t\t}\r\n\t\t\tif ($current_page < $last_page && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . ($current_page + 1) . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-right.svg\" alt=\"' . L::nav_next . '\" title=\"' . L::nav_next . '\"/></a>';\r\n\t\t\t}\r\n\t\t\tif ($current_page != $last_page && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo ' <a style=\"color: #e3e3e3;\" href=\"?page=' . ($last_page) . $and_d . '\"><img src=\"svg/arrow-down.svg\" alt=\"' . L::nav_last . '\" title=\"' . L::nav_last . '\"/></a>';\r\n\t\t\t}\r\n\t\t\techo '</div>';\r\n\t\t}\r\n\t\t//Pagination. Create the navigation links * END\r\n\r\n\t\t// The $photo parameter is used to show an individual photo\r\n\t\t$file = (isset($_GET['photo']) ? $_GET['photo'] : null);\r\n\t\tif (isset($file)) {\r\n\t\t\t$key = array_search($file, $files); // Determine the array key of the current item (we need this for generating the Next and Previous links)\r\n\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t$exif = exif_read_data($file, 0, true);\r\n\t\t\t$file_path = pathinfo($file);\r\n\r\n\t\t\t//Check if the related RAW file exists and link to it\r\n\t\t\t$raw_file = glob($photo_dir . $file_path['filename'] . \"*.{\" . $raw_formats . \"}\", GLOB_BRACE);\r\n\t\t\tif ($show_raw) {\r\n\t\t\t\tif (!empty($raw_file)) {\r\n\t\t\t\t\techo \"<h1>\" . $file_path['filename'] . \" <a href=\" . $raw_file[0] . \"><img style='vertical-align: baseline;' alt='\" . L::img_link_raw . \"' title='\" . L::img_link_raw . \"' src='svg/raw.svg' height='22'/></a></h1>\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\techo \"<h1>\" . $file_path['filename'] . \"</h1>\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\techo \"<h1>\" . $file_path['filename'] . \"</h1>\";\r\n\t\t\t}\r\n\r\n\t\t\t// NAVIGATION LINKS\r\n\t\t\t// Set first and last photo navigation links according to specified\t sort order\r\n\t\t\t$last_photo = $files[count($files) - 1];\r\n\t\t\t$first_photo = $files[0];\r\n\r\n\t\t\t// If there is only one photo in the album, show the home navigation link\r\n\t\t\tif ($file_count == 1) {\r\n\t\t\t\techo \"<div class='center'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Disable the Previous link if this is the FIRST photo\r\n\t\t\telseif (empty($files[$key - 1])) {\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d .  \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key + 1] . $and_d . \"' accesskey='n'><img style='margin-right:1em;' src='svg/arrow-right.svg'  alt='\" . L::nav_next . \"' title='\" . L::nav_next . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $last_photo . $and_d .  \"' accesskey='l'><img src='svg/arrow-down.svg' alt='\" . L::nav_last . \"' title='\" . L::nav_last . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Disable the Next link if this is the LAST photo\r\n\t\t\telseif (empty($files[$key + 1])) {\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $first_photo . $and_d . \"' accesskey='f'><img style='margin-right:1em;' src='svg/arrow-up.svg' alt='\" . L::nav_first . \"' title='\" . L::nav_first . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key - 1] . $and_d . \"' accesskey='p'><img style='margin-right:1em;' src='svg/arrow-left.svg' alt='\" . L::nav_prev . \"' title='\" . L::nav_prev . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Show all navigation links\r\n\t\t\telse {\r\n\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $first_photo . \"&d=\" . htmlentities($sub_photo_dir) . \"' accesskey='f'><img style='margin-right:1em;' src='svg/arrow-up.svg' alt='\" . L::nav_first . \"' title='\" . L::nav_first . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key - 1] . $and_d . \"' accesskey='p'><img style='margin-right:1em;' src='svg/arrow-left.svg' alt='\" . L::nav_prev . \"' title='\" . L::nav_prev . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key + 1] . $and_d . \"' accesskey='n'><img style='margin-right:1em;' src='svg/arrow-right.svg' alt='\" . L::nav_next . \"' title='\" . L::nav_next . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $last_photo . $and_d . \"' accesskey='l'><img src='svg/arrow-down.svg' alt='\" . L::nav_last . \"' title='\" . L::nav_last . \"'/></a></div>\";\r\n\t\t\t}\r\n\r\n\t\t\t// Check whether the localized description file matching the browser language exists\r\n\t\t\tif (file_exists($photo_dir . $i18n->getAppliedLang() . '-' . $file_path['filename'] . '.txt')) {\r\n\t\t\t\t$description = @file_get_contents($photo_dir . $i18n->getAppliedLang() . '-' . $file_path['filename'] . '.txt');\r\n\t\t\t\t// If the localized description file doesn't exist, use the default one\r\n\t\t\t} else {\r\n\t\t\t\t$description = @file_get_contents($photo_dir . $file_path['filename'] . '.txt');\r\n\t\t\t}\r\n\t\t\t$gps = read_gps_location($file);\r\n\r\n\t\t\t// Get aperture, exposure, iso, and datetime from EXIF\r\n\t\t\t$aperture = (is_null($exif['COMPUTED']['ApertureFNumber']) ? null : $exif['COMPUTED']['ApertureFNumber']);\r\n\t\t\t$exposure = (is_null($exif['EXIF']['ExposureTime']) ? null : $exif['EXIF']['ExposureTime']);\r\n\t\t\t// Normalize exposure\r\n\t\t\t// https://stackoverflow.com/questions/3049998/parsing-exifs-exposuretime-using-php\r\n\t\t\tif (!is_null($exposure)) {\r\n\t\t\t\t$parts = explode(\"/\", $exposure);\r\n\t\t\t\tif (($parts[1] % $parts[0]) == 0 || $parts[1] == 1000000) {\r\n\t\t\t\t\t$exposure = ' &bull; 1/' . round($parts[1] / $parts[0], 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ($parts[1] == 1) {\r\n\t\t\t\t\t\t$exposure = ' &bull; ' . $parts[0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$exposure = ' &bull; ' . $parts[0] . '/' . $parts[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$iso = (is_null($exif['EXIF']['ISOSpeedRatings']) ? null : \" &bull; \" . $exif['EXIF']['ISOSpeedRatings']);\r\n\t\t\t$datetime = $exif['EXIF']['DateTimeOriginal'] ?? null;\r\n\t\t\t$comment = $exif['COMMENT']['0'] ?? null;\r\n\r\n\t\t\t// Concatenate $exif_info\r\n\t\t\tif (!is_null($aperture) || !is_null($exposure) || !is_null($iso) || !is_null($datetime)) {\r\n\t\t\t\t$exif_info = '<img style=\"margin-right: .5rem;\" src=\"svg/camera.svg\" alt=\"' . L::img_exif . '\" title=\"' . L::img_exif . '\"/>' . $aperture . $exposure . $iso . '<img style=\"margin-left: .5rem; margin-right: .5rem;\" src=\"svg/calendar.svg\" alt=\"' . L::img_date . '\" title=\"' . L::img_date . '\"/>' .  $datetime;\r\n\t\t\t}\r\n\r\n\t\t\t// Add the pin icon if the photo contains geographical coordinates\r\n\t\t\tif (!empty($gps['lat']) && !empty($gps['lon'])) {\r\n\t\t\t\t//Generate Geo URI\r\n\t\t\t\t$map_url = \"<a href='geo:\" . $gps['lat'] . \",\" . $gps['lon'] . \"'><img style='margin-left: .5rem;' src='svg/pin.svg' alt='\" . L::img_map . \"' title='\" . L::img_map . \"'/></a>\";\r\n\t\t\t\t$exif_info = $exif_info . $map_url;\r\n\t\t\t}\r\n\r\n\t\t\t// Show photo, EXIF data, description, and info\r\n\t\t\t// Enable the download link if $download = true\r\n\t\t\t$raw = (!empty($raw_file[0]) ? '&raw=' .  $raw_file[0] : null);\r\n\t\t\tif ($download) {\r\n\t\t\t\techo '<div class=\"center\"><a href=\"' . htmlentities($file) . '\" download><img style=\"max-width: 100%; border-radius: 7px;\" src=\"' . htmlentities($tim) . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a><div class=\"caption\">' . $comment . ' ' . $description . '</div><div class=\"caption\">' . $exif_info . '<a href=\"delete.php?file=' . $file . $raw . '\"><img style=\"margin-left: 1em;\" src=\"svg/bin.svg\" alt=\"' . L::img_delete . '\" title=\"' . L::img_delete . '\" /></a></div>';\r\n\t\t\t} else {\r\n\t\t\t\techo '<div class=\"center\"><img style=\"max-width: 100%; border-radius: 7px;\" src=\"' . htmlentities($tim) . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"><div class=\"caption\">' . $comment . ' ' . $description . '</div><div class=\"caption\">' . $exif_info . '<a href=\"delete.php?file=' . $file . $raw . '\"><img style=\"margin-left: 1em;\" src=\"svg/remove-image.svg\" alt=\"' . L::img_delete . '\" title=\"' . L::img_delete . '\" /></a></div>';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Show links\r\n\t\tif ($links) {\r\n\t\t\t$array_length = count($urls);\r\n\t\t\techo '<div class=\"footer\">';\r\n\t\t\tfor ($i = 0; $i < $array_length; $i++) {\r\n\t\t\t\techo '<span style=\"word-spacing:0.1em;\"><a style=\"color: white\" href=\"' . $urls[$i][0] . '\">' . $urls[$i][1] . '</a> &bull; </span>';\r\n\t\t\t}\r\n\t\t\techo  $footer . '</div>';\r\n\t\t} else {\r\n\t\t\techo '<div class=\"footer\">' . $footer . '</div>';\r\n\t\t}\r\n\t\tif ($goatcounter) {\r\n\t\t\techo \"<script data-goatcounter='https://\" . $goatcounter_code . \".goatcounter.com/count' async src='//gc.zgo.at/count.js'></script>\";\r\n\t\t}\r\n\t\t?>\r\n\t</div>\r\n</body>\r\n\r\n</html>"], "fixing_code": ["<?php\r\ninclude('config.php');\r\n// Include i18n class and initialize it\r\nrequire_once 'i18n.class.php';\r\n$i18n = new i18n();\r\n$i18n->setCachePath('cache');\r\n$i18n->setFilePath('lang/{LANGUAGE}.ini');\r\n$i18n->setFallbackLang('en');\r\n$i18n->init();\r\n// Check whether the php-exif and php-gd libraries are installed\r\nif (!extension_loaded('gd')) {\r\n\texit(\"<center><code style='color: red;'>\" . L::warning_php_gd . \"</code></center>\");\r\n}\r\nif (!extension_loaded('exif')) {\r\n\texit(\"<center><code style='color: red;'>\" . L::warning_php_exif . \"</code></center>\");\r\n}\r\n// Time allowed the script to run. Generating tims can take time,\r\n// and increasing the time limit prevents the script from ending prematurely\r\nset_time_limit(600);\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"<?php echo $i18n->getAppliedLang(); ?>\">\r\n\r\n<!--\r\n\t Author: Dmitri Popov\r\n\t License: GPLv3 https://www.gnu.org/licenses/gpl-3.0.txt\r\n\t Source code: https://github.com/dmpop/mejiro\r\n\t-->\r\n\r\n<head>\r\n\t<meta charset=\"utf-8\">\r\n\t<link rel=\"shortcut icon\" href=\"favicon.png\" />\r\n\t<meta name=\"viewport\" content=\"width=device-width\">\r\n\t<link rel=\"stylesheet\" href=\"styles.css\" />\r\n\r\n\t<title><?php echo $title; ?></title>\r\n</head>\r\n\r\n<body>\r\n\t<div id=\"content\">\r\n\t\t<?php\r\n\t\t// basename and str_replace are used to prevent the path traversal attacks. Not very elegant, but it should do the trick.\r\n\t\t//  The $d parameter is used to detect a subdirectory\r\n\t\tif (isset($_GET['d'])) {\r\n\t\t\t$sub_photo_dir = $_GET['d'];\r\n\t\t\t$d = \"?d=\" . htmlentities($sub_photo_dir);\r\n\t\t\t$and_d = \"&d=\" . htmlentities($sub_photo_dir);\r\n\t\t} else {\r\n\t\t\t$sub_photo_dir = null;\r\n\t\t}\r\n\t\t// Create $base_photo_dir if it doesn't exist\r\n\t\tif (!file_exists($base_photo_dir)) {\r\n\t\t\tmkdir($base_photo_dir, 0755, true);\r\n\t\t}\r\n\t\t$photo_dir = str_replace(DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $base_photo_dir . DIRECTORY_SEPARATOR . $sub_photo_dir . DIRECTORY_SEPARATOR);\r\n\r\n\t\t/*\r\n\t * Returns an array of latitude and longitude from the image file.\r\n\t * @param image $file\r\n\t * @return multitype:number |boolean\r\n\t * http://stackoverflow.com/questions/5449282/reading-geotag-data-from-image-in-php\r\n\t */\r\n\t\tfunction read_gps_location($file)\r\n\t\t{\r\n\t\t\tif (is_file($file)) {\r\n\t\t\t\t$exif = exif_read_data($file);\r\n\t\t\t\tif (\r\n\t\t\t\t\tisset($exif['GPSLatitude']) && isset($exif['GPSLongitude']) &&\r\n\t\t\t\t\tisset($exif['GPSLatitudeRef']) && isset($exif['GPSLongitudeRef']) &&\r\n\t\t\t\t\tin_array($exif['GPSLatitudeRef'], array('E', 'W', 'N', 'S')) && in_array($exif['GPSLongitudeRef'], array('E', 'W', 'N', 'S'))\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\t$GPSLatitudeRef\t = strtolower(trim($exif['GPSLatitudeRef']));\r\n\t\t\t\t\t$GPSLongitudeRef = strtolower(trim($exif['GPSLongitudeRef']));\r\n\r\n\t\t\t\t\t$lat_degrees_a = explode('/', $exif['GPSLatitude'][0]);\r\n\t\t\t\t\t$lat_minutes_a = explode('/', $exif['GPSLatitude'][1]);\r\n\t\t\t\t\t$lat_seconds_a = explode('/', $exif['GPSLatitude'][2]);\r\n\t\t\t\t\t$lon_degrees_a = explode('/', $exif['GPSLongitude'][0]);\r\n\t\t\t\t\t$lon_minutes_a = explode('/', $exif['GPSLongitude'][1]);\r\n\t\t\t\t\t$lon_seconds_a = explode('/', $exif['GPSLongitude'][2]);\r\n\r\n\t\t\t\t\t$lat_degrees = $lat_degrees_a[0] / $lat_degrees_a[1];\r\n\t\t\t\t\t$lat_minutes = $lat_minutes_a[0] / $lat_minutes_a[1];\r\n\t\t\t\t\t$lat_seconds = $lat_seconds_a[0] / $lat_seconds_a[1];\r\n\t\t\t\t\t$lon_degrees = $lon_degrees_a[0] / $lon_degrees_a[1];\r\n\t\t\t\t\t$lon_minutes = $lon_minutes_a[0] / $lon_minutes_a[1];\r\n\t\t\t\t\t$lon_seconds = $lon_seconds_a[0] / $lon_seconds_a[1];\r\n\r\n\t\t\t\t\t$lat = (float) $lat_degrees + ((($lat_minutes * 60) + ($lat_seconds)) / 3600);\r\n\t\t\t\t\t$lon = (float) $lon_degrees + ((($lon_minutes * 60) + ($lon_seconds)) / 3600);\r\n\r\n\t\t\t\t\t// If the latitude is South, make it negative\r\n\t\t\t\t\t// If the longitude is west, make it negative\r\n\t\t\t\t\t$GPSLatitudeRef\t == 's' ? $lat *= -1 : '';\r\n\t\t\t\t\t$GPSLongitudeRef == 'w' ? $lon *= -1 : '';\r\n\r\n\t\t\t\t\treturn array(\r\n\t\t\t\t\t\t'lat' => htmlentities($lat),\r\n\t\t\t\t\t\t'lon' => htmlentities($lon)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Create tims if missing\r\n\t\tif (file_exists($photo_dir) && !file_exists($photo_dir . '.tims')) {\r\n\t\t\tmkdir($photo_dir . '.tims');\r\n\t\t}\r\n\r\n\t\t// Get file info\r\n\t\t$files = glob($photo_dir . \"*.{\" . $img_formats . \"}\", GLOB_BRACE);\r\n\r\n\t\t// Check whether the reversed order option is enabled and sort the array accordingly\r\n\t\tif ($r_sort) {\r\n\t\t\trsort($files);\r\n\t\t}\r\n\r\n\t\t// Update count (we might have removed some files)\r\n\t\t$file_count = count($files);\r\n\r\n\t\t// Function that generates tims\r\n\t\tfunction createTim($original, $tim, $timWidth)\r\n\t\t{\r\n\t\t\t// Load image\r\n\t\t\t$img = @imagecreatefromjpeg($original);\r\n\t\t\tif (!$img) return false;\r\n\r\n\t\t\t// Get image size\r\n\t\t\t$width = imagesx($img);\r\n\t\t\t$height = imagesy($img);\r\n\r\n\t\t\t// Calculate tim size\r\n\t\t\t$new_width\t= $timWidth;\r\n\t\t\t$new_height = floor($height * ($timWidth / $width));\r\n\r\n\t\t\t// Create a new temporary image\r\n\t\t\t$tmp_img = imagecreatetruecolor($new_width, $new_height);\r\n\r\n\t\t\t// Copy and resize old image into new image\r\n\t\t\timagecopyresampled($tmp_img, $img, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\r\n\r\n\t\t\t// Save tim into a file\r\n\t\t\t$ok = @imagejpeg($tmp_img, $tim);\r\n\r\n\t\t\t// Cleanup\r\n\t\t\timagedestroy($img);\r\n\t\t\timagedestroy($tmp_img);\r\n\r\n\t\t\t// Return bool true if tim creation worked\r\n\t\t\treturn $ok;\r\n\t\t}\r\n\r\n\t\t// Generate missing tims\r\n\t\tfor ($i = 0; $i < $file_count; $i++) {\r\n\t\t\t$file  = $files[$i];\r\n\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\r\n\t\t\tif (!file_exists($tim)) {\r\n\t\t\t\t// Generate tims\r\n\t\t\t\tcreateTim($file, $tim, $tim_size);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare pagination. Calculate total items per page * START\r\n\t\t$total = count($files);\r\n\t\t$last_page = ceil($total / $per_page);\r\n\r\n\t\tif (isset($_GET[\"photo\"]) == '') {\r\n\r\n\t\t\tif (isset($_GET[\"page\"]) && ($_GET[\"page\"] <= $last_page) && ($_GET[\"page\"] > 0) && ($_GET[\"all\"] != 1)) {\r\n\t\t\t\t$page = $_GET[\"page\"];\r\n\t\t\t\t$offset = ($per_page) * ($page - 1);\r\n\t\t\t} else {\r\n\t\t\t\t$page = 1;\r\n\t\t\t\t$offset = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (isset($_GET['all']) == 1) {\r\n\t\t\t\t$all = 1;\r\n\t\t\t}\r\n\t\t\t$max = $offset + $per_page;\r\n\t\t}\r\n\t\tif (!isset($max)) {\r\n\t\t\t$max = null;\r\n\t\t}\r\n\t\tif ($max > $total) {\r\n\t\t\t$max = $total;\r\n\t\t}\r\n\t\t// Pagination. Calculate total items per page * END\r\n\r\n\t\t// The $grid parameter is used to show the main grid\r\n\t\t$grid = (isset($_GET['photo']) ? $_GET['photo'] : null);\r\n\r\n\t\tif (!isset($grid)) {\r\n\t\t\techo '<div style=\"text-align:center; margin-bottom: 1.5em; margin-top: 1.5em;\">';\r\n\t\t\techo '<a style=\"text-decoration:none;\" href=\"' . basename($_SERVER['PHP_SELF']) . '\"><img style=\"display: inline; height: 3.5em; vertical-align: middle;\" src=\"favicon.png\" alt=\"Mejiro\" /></a>';\r\n\t\t\techo '<a style=\"text-decoration:none;\" href=\"' . basename($_SERVER['PHP_SELF']) . '\"><h1 style=\"display: inline; font-size: 2.3em; margin-left: 0.19em; vertical-align: middle; letter-spacing: 3px; color: #619b8a;\">' . $title . '</h1></a>';\r\n\t\t\techo '</div>';\r\n\t\t\techo \"<div class ='center' style='color: gray; margin-bottom: 1em;'>\" . $subtitle . \"</div>\";\r\n\t\t\techo \"<div class ='center' style='margin-bottom: 1em;'>\";\r\n\t\t\t// Show stats icon\r\n\t\t\techo '<a href=\"stats.php\"><img src=\"svg/stats.svg\" alt=\"' . L::stats . '\" title=\"' . L::stats . '\"/></a>';\r\n\t\t\t// Show the grid icon if there are several pages\r\n\t\t\tif (!isset($_GET[\"all\"])) {\r\n\t\t\t\t$all = null;\r\n\t\t\t}\r\n\t\t\tif (isset($_GET[\"all\"]) != 1 && $file_count > $per_page) {\r\n\t\t\t\techo '<a href=\"?all=1' . $and_d . '\"><img  style=\"margin-left: .5em;\" src=\"svg/display-grid.svg\" alt=\"' . L::img_show_all . '\" title=\"' . L::img_show_all . '\"/></a>';\r\n\t\t\t}\r\n\t\t\techo '<hr style=\"margin-bottom: 1em;\">';\r\n\r\n\t\t\t// Create an array with all subdirectories\r\n\t\t\t$all_sub_dirs = array_filter(glob($photo_dir . '*'), 'is_dir');\r\n\t\t\t$sub_dirs = array_diff($all_sub_dirs, array($photo_dir . \".tims\"));\r\n\t\t\t$count = count(glob($photo_dir . \".tims/*\"));\r\n\t\t\techo \"<span style='color: gray'>\" . L::album_items_count . \": </span>\" . $count;\r\n\t\t\techo \"</div>\";\r\n\r\n\t\t\t// Populate a drop-down list with subdirectories\r\n\t\t\tif ((count($sub_dirs)) > 0 or (!empty($sub_photo_dir))) {\r\n\t\t\t\techo \"<noscript>\";\r\n\t\t\t\techo \"<h3><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/> Make sure that JavaScript is enabled</h3>\";\r\n\t\t\t\techo \"</noscript>\";\r\n\t\t\t\techo '<div class=\"center\" style=\"margin-bottom: 1em;\">';\r\n\t\t\t\techo \"<a href='\"  . basename($_SERVER['PHP_SELF']) . \"'><img style='vertical-align: middle;' alt='\" . L::img_root_album . \"' title='\" . L::img_root_album . \"' src='svg/home.svg'/></a> &rarr;&nbsp;\";\r\n\t\t\t\t$higher_dirs = explode(\"/\", $sub_photo_dir);\r\n\t\t\t\t$higher_dir_cascade = \"\";\r\n\t\t\t\tforeach ($higher_dirs as $higher_dir) {\r\n\t\t\t\t\tif (!empty($higher_dir)) {\r\n\t\t\t\t\t\tif (!empty($higher_dir_cascade)) {\r\n\t\t\t\t\t\t\t$higher_dir_cascade = $higher_dir_cascade . DIRECTORY_SEPARATOR;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$higher_dir_cascade = $higher_dir_cascade . $higher_dir;\r\n\t\t\t\t\t\techo \"<a href='\"  . basename($_SERVER['PHP_SELF']) . \"?d=\" . $higher_dir_cascade . \"'>\" . $higher_dir . \"</a> &rarr;&nbsp;\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\techo '<select style=\"min-width: 10em; vertical-align: middle; margin-right: 0.5em;\" name=\"\" onchange=\"javascript:location.href = this.value;\">';\r\n\t\t\t\techo '<option value=\"Default\">' . L::album . '</option>';\r\n\t\t\t\tforeach ($sub_dirs as $dir) {\r\n\t\t\t\t\t$dir_name = basename($dir);\r\n\t\t\t\t\t$dir_option = str_replace('\\'', '&apos;', $sub_photo_dir . DIRECTORY_SEPARATOR . $dir_name);\r\n\t\t\t\t\techo \"<option value='?d=\" . ltrim($dir_option, '/') . \"'>\" . $dir_name . \"</option>\";\r\n\t\t\t\t}\r\n\t\t\t\techo \"</select>\";\r\n\t\t\t}\r\n\r\n\t\t\t// Check whether $photo_dir directory exists\r\n\t\t\tif (!file_exists($photo_dir)) {\r\n\t\t\t\techo (\"<h3 style='margin-top: 2em;'><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/>\" . L::warning_no_album . \"</h3>\");\r\n\t\t\t\texit;\r\n\t\t\t}\r\n\t\t\tif ($file_count < 1) {\r\n\t\t\t\techo (\"<h3 style='margin-top: 2em;'><img style='vertical-align: middle; margin-right: .5em;' src='svg/denied.svg'/> \" . L::warning_empty_album . \"</h3>\");\r\n\t\t\t\texit;\r\n\t\t\t}\r\n\t\t\t// Show the content of the description.txt file if it exists in the album\r\n\t\t\tif (file_exists($photo_dir . DIRECTORY_SEPARATOR . \"description.txt\")) {\r\n\t\t\t\techo '<div style=\"margin: auto; margin-top: 1.5em; margin-bottom: 1em; width: 50%;\">';\r\n\t\t\t\techo file_get_contents($photo_dir . DIRECTORY_SEPARATOR . \"description.txt\");\r\n\t\t\t\techo \"</div>\";\r\n\t\t\t}\r\n\t\t\techo \"</div>\";\r\n\t\t\techo '<div class=\"gallery-grid\">';\r\n\t\t\tif ($all == 1) {\r\n\t\t\t\tfor ($i = 0; $i < $file_count; $i++) {\r\n\t\t\t\t\t$file = $files[$i];\r\n\t\t\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t\t\t$file_path = pathinfo($file);\r\n\t\t\t\t\techo '<figure class=\"gallery-frame\">';\r\n\t\t\t\t\techo '<a href=\"index.php?all=1&photo=' . $file . $and_d . '\"><img class=\"gallery-img\" src=\"' . $tim . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a>';\r\n\t\t\t\t\techo '<figcaption>' . $file_path['filename'] . '</figcaption></figure>';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ($i = $offset; $i < $max; $i++) {\r\n\t\t\t\t\t$file = $files[$i];\r\n\t\t\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t\t\t$file_path = pathinfo($file);\r\n\t\t\t\t\techo '<figure class=\"gallery-frame\">';\r\n\t\t\t\t\techo '<a href=\"index.php?all=1&photo=' . $file . $and_d . '\"><img class=\"gallery-img\" src=\"' . $tim . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a>';\r\n\t\t\t\t\techo '<figcaption>' . $file_path['filename'] . '</figcaption></figure>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\techo \"</div>\";\r\n\t\t}\r\n\r\n\t\tif (isset($_GET[\"all\"]) != 1) {\r\n\t\t\tshow_pagination($page, $last_page, $and_d, $sub_photo_dir); // Pagination. Show navigation on bottom of page\r\n\t\t}\r\n\r\n\t\t//Pagination. Create the navigation links * START\r\n\t\tfunction show_pagination($current_page, $last_page, $and_d, $sub_photo_dir)\r\n\t\t{\r\n\t\t\techo '<div class=\"center\">';\r\n\t\t\tif ($current_page != 1 && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . \"1\" . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-up.svg\" alt=\"' . L::nav_first . '\" title=\"' . L::nav_first . '\"/></a> ';\r\n\t\t\t}\r\n\t\t\tif ($current_page > 1 && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . ($current_page - 1) . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-left.svg\" alt=\"' . L::nav_prev . '\" title=\"' . L::nav_prev . '\"/></a> ';\r\n\t\t\t}\r\n\t\t\tif ($current_page < $last_page && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo '<a color: #e3e3e3;\" href=\"?page=' . ($current_page + 1) . $and_d . '\"><img style=\"margin-right:1em;\" src=\"svg/arrow-right.svg\" alt=\"' . L::nav_next . '\" title=\"' . L::nav_next . '\"/></a>';\r\n\t\t\t}\r\n\t\t\tif ($current_page != $last_page && isset($_GET[\"photo\"]) == '') {\r\n\t\t\t\techo ' <a style=\"color: #e3e3e3;\" href=\"?page=' . ($last_page) . $and_d . '\"><img src=\"svg/arrow-down.svg\" alt=\"' . L::nav_last . '\" title=\"' . L::nav_last . '\"/></a>';\r\n\t\t\t}\r\n\t\t\techo '</div>';\r\n\t\t}\r\n\t\t//Pagination. Create the navigation links * END\r\n\r\n\t\t// The $photo parameter is used to show an individual photo\r\n\t\t$file = (isset($_GET['photo']) ? $_GET['photo'] : null);\r\n\t\tif (isset($file)) {\r\n\t\t\t$key = array_search($file, $files); // Determine the array key of the current item (we need this for generating the Next and Previous links)\r\n\t\t\t$tim = $photo_dir . '.tims/' . basename($file);\r\n\t\t\t$exif = exif_read_data($file, 0, true);\r\n\t\t\t$file_path = pathinfo($file);\r\n\r\n\t\t\t//Check if the related RAW file exists and link to it\r\n\t\t\t$raw_file = glob($photo_dir . $file_path['filename'] . \"*.{\" . $raw_formats . \"}\", GLOB_BRACE);\r\n\t\t\tif ($show_raw) {\r\n\t\t\t\tif (!empty($raw_file)) {\r\n\t\t\t\t\techo \"<h1>\" . $file_path['filename'] . \" <a href=\" . $raw_file[0] . \"><img style='vertical-align: baseline;' alt='\" . L::img_link_raw . \"' title='\" . L::img_link_raw . \"' src='svg/raw.svg' height='22'/></a></h1>\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\techo \"<h1>\" . $file_path['filename'] . \"</h1>\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\techo \"<h1>\" . $file_path['filename'] . \"</h1>\";\r\n\t\t\t}\r\n\r\n\t\t\t// NAVIGATION LINKS\r\n\t\t\t// Set first and last photo navigation links according to specified\t sort order\r\n\t\t\t$last_photo = $files[count($files) - 1];\r\n\t\t\t$first_photo = $files[0];\r\n\r\n\t\t\t// If there is only one photo in the album, show the home navigation link\r\n\t\t\tif ($file_count == 1) {\r\n\t\t\t\techo \"<div class='center'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Disable the Previous link if this is the FIRST photo\r\n\t\t\telseif (empty($files[$key - 1])) {\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d .  \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key + 1] . $and_d . \"' accesskey='n'><img style='margin-right:1em;' src='svg/arrow-right.svg'  alt='\" . L::nav_next . \"' title='\" . L::nav_next . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $last_photo . $and_d .  \"' accesskey='l'><img src='svg/arrow-down.svg' alt='\" . L::nav_last . \"' title='\" . L::nav_last . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Disable the Next link if this is the LAST photo\r\n\t\t\telseif (empty($files[$key + 1])) {\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $first_photo . $and_d . \"' accesskey='f'><img style='margin-right:1em;' src='svg/arrow-up.svg' alt='\" . L::nav_first . \"' title='\" . L::nav_first . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key - 1] . $and_d . \"' accesskey='p'><img style='margin-right:1em;' src='svg/arrow-left.svg' alt='\" . L::nav_prev . \"' title='\" . L::nav_prev . \"'/></a></div>\";\r\n\t\t\t}\r\n\t\t\t// Show all navigation links\r\n\t\t\telse {\r\n\r\n\t\t\t\techo \"<div class='center' style='margin-bottom: 1em;'><a href='\" . basename($_SERVER['PHP_SELF']) . $d . \"' accesskey='g'><img style='margin-right:1em;' src='svg/home.svg' alt='\" . L::nav_home . \"' title='\" . L::nav_home . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $first_photo . \"&d=\" . htmlentities($sub_photo_dir) . \"' accesskey='f'><img style='margin-right:1em;' src='svg/arrow-up.svg' alt='\" . L::nav_first . \"' title='\" . L::nav_first . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key - 1] . $and_d . \"' accesskey='p'><img style='margin-right:1em;' src='svg/arrow-left.svg' alt='\" . L::nav_prev . \"' title='\" . L::nav_prev . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $files[$key + 1] . $and_d . \"' accesskey='n'><img style='margin-right:1em;' src='svg/arrow-right.svg' alt='\" . L::nav_next . \"' title='\" . L::nav_next . \"'/></a><a href='\" . basename($_SERVER['PHP_SELF']) . \"?photo=\" . $last_photo . $and_d . \"' accesskey='l'><img src='svg/arrow-down.svg' alt='\" . L::nav_last . \"' title='\" . L::nav_last . \"'/></a></div>\";\r\n\t\t\t}\r\n\r\n\t\t\t// Check whether the localized description file matching the browser language exists\r\n\t\t\tif (file_exists($photo_dir . $i18n->getAppliedLang() . '-' . $file_path['filename'] . '.txt')) {\r\n\t\t\t\t$description = @file_get_contents($photo_dir . $i18n->getAppliedLang() . '-' . $file_path['filename'] . '.txt');\r\n\t\t\t\t// If the localized description file doesn't exist, use the default one\r\n\t\t\t} else {\r\n\t\t\t\t$description = @file_get_contents($photo_dir . $file_path['filename'] . '.txt');\r\n\t\t\t}\r\n\t\t\t$gps = read_gps_location($file);\r\n\r\n\t\t\t// Get aperture, exposure, iso, and datetime from EXIF\r\n\t\t\t$aperture = htmlentities((is_null($exif['COMPUTED']['ApertureFNumber']) ? null : $exif['COMPUTED']['ApertureFNumber']));\r\n\t\t\t$exposure = htmlentities((is_null($exif['EXIF']['ExposureTime']) ? null : $exif['EXIF']['ExposureTime']));\r\n\t\t\t// Normalize exposure\r\n\t\t\t// https://stackoverflow.com/questions/3049998/parsing-exifs-exposuretime-using-php\r\n\t\t\tif (!is_null($exposure)) {\r\n\t\t\t\t$parts = explode(\"/\", $exposure);\r\n\t\t\t\tif (($parts[1] % $parts[0]) == 0 || $parts[1] == 1000000) {\r\n\t\t\t\t\t$exposure = htmlentities(' &bull; 1/' . round($parts[1] / $parts[0], 0));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ($parts[1] == 1) {\r\n\t\t\t\t\t\t$exposure = htmlentities(' &bull; ' . $parts[0]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$exposure = htmlentities(' &bull; ' . $parts[0] . '/' . $parts[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$iso = htmlentities((is_null($exif['EXIF']['ISOSpeedRatings']) ? null : \" &bull; \" . $exif['EXIF']['ISOSpeedRatings']));\r\n\t\t\t$datetime = htmlentities($exif['EXIF']['DateTimeOriginal']) ?? null;\r\n\t\t\t$comment = htmlentities($exif['COMMENT']['0']) ?? null;\r\n\r\n\t\t\t// Concatenate $exif_info\r\n\t\t\tif (!is_null($aperture) || !is_null($exposure) || !is_null($iso) || !is_null($datetime)) {\r\n\t\t\t\t$exif_info = '<img style=\"margin-right: .5rem;\" src=\"svg/camera.svg\" alt=\"' . L::img_exif . '\" title=\"' . L::img_exif . '\"/>' . $aperture . $exposure . $iso . '<img style=\"margin-left: .5rem; margin-right: .5rem;\" src=\"svg/calendar.svg\" alt=\"' . L::img_date . '\" title=\"' . L::img_date . '\"/>' .  $datetime;\r\n\t\t\t}\r\n\r\n\t\t\t// Add the pin icon if the photo contains geographical coordinates\r\n\t\t\tif (!empty($gps['lat']) && !empty($gps['lon'])) {\r\n\t\t\t\t//Generate Geo URI\r\n\t\t\t\t$map_url = \"<a href='geo:\" . $gps['lat'] . \",\" . $gps['lon'] . \"'><img style='margin-left: .5rem;' src='svg/pin.svg' alt='\" . L::img_map . \"' title='\" . L::img_map . \"'/></a>\";\r\n\t\t\t\t$exif_info = $exif_info . $map_url;\r\n\t\t\t}\r\n\r\n\t\t\t// Show photo, EXIF data, description, and info\r\n\t\t\t// Enable the download link if $download = true\r\n\t\t\t$raw = (!empty($raw_file[0]) ? '&raw=' .  $raw_file[0] : null);\r\n\t\t\tif ($download) {\r\n\t\t\t\techo '<div class=\"center\"><a href=\"' . htmlentities($file) . '\" download><img style=\"max-width: 100%; border-radius: 7px;\" src=\"' . htmlentities($tim) . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"></a><div class=\"caption\">' . $comment . ' ' . $description . '</div><div class=\"caption\">' . $exif_info . '<a href=\"delete.php?file=' . $file . $raw . '\"><img style=\"margin-left: 1em;\" src=\"svg/bin.svg\" alt=\"' . L::img_delete . '\" title=\"' . L::img_delete . '\" /></a></div>';\r\n\t\t\t} else {\r\n\t\t\t\techo '<div class=\"center\"><img style=\"max-width: 100%; border-radius: 7px;\" src=\"' . htmlentities($tim) . '\" alt=\"' . $file_path['filename'] . '\" title=\"' . $file_path['filename'] . '\"><div class=\"caption\">' . $comment . ' ' . $description . '</div><div class=\"caption\">' . $exif_info . '<a href=\"delete.php?file=' . $file . $raw . '\"><img style=\"margin-left: 1em;\" src=\"svg/remove-image.svg\" alt=\"' . L::img_delete . '\" title=\"' . L::img_delete . '\" /></a></div>';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Show links\r\n\t\tif ($links) {\r\n\t\t\t$array_length = count($urls);\r\n\t\t\techo '<div class=\"footer\">';\r\n\t\t\tfor ($i = 0; $i < $array_length; $i++) {\r\n\t\t\t\techo '<span style=\"word-spacing:0.1em;\"><a style=\"color: white\" href=\"' . $urls[$i][0] . '\">' . $urls[$i][1] . '</a> &bull; </span>';\r\n\t\t\t}\r\n\t\t\techo  $footer . '</div>';\r\n\t\t} else {\r\n\t\t\techo '<div class=\"footer\">' . $footer . '</div>';\r\n\t\t}\r\n\t\tif ($goatcounter) {\r\n\t\t\techo \"<script data-goatcounter='https://\" . $goatcounter_code . \".goatcounter.com/count' async src='//gc.zgo.at/count.js'></script>\";\r\n\t\t}\r\n\t\t?>\r\n\t</div>\r\n</body>\r\n\r\n</html>"], "filenames": ["index.php"], "buggy_code_start_loc": [100], "buggy_code_end_loc": [386], "fixing_code_start_loc": [100], "fixing_code_end_loc": [386], "type": "CWE-79", "message": "Reflected Cross-Site Scripting (XSS) vulnerability in dmpop Mejiro Commit Versions Prior To 3096393 allows attackers to run arbitrary code via crafted string in metadata of uploaded images.", "other": {"cve": {"id": "CVE-2023-46448", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-01T22:15:08.730", "lastModified": "2023-11-09T15:55:49.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Reflected Cross-Site Scripting (XSS) vulnerability in dmpop Mejiro Commit Versions Prior To 3096393 allows attackers to run arbitrary code via crafted string in metadata of uploaded images."}, {"lang": "es", "value": "Vulnerabilidad de Cross-Site Scripting (XSS) Reflejada en dmpop Mejiro Commit Versions anteriores a 3096393 permite a los atacantes ejecutar c\u00f3digo arbitrario a trav\u00e9s de una cadena manipulada en metadatos de im\u00e1genes cargadas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dmpop:mejiro:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-10-15", "matchCriteriaId": "84F44AB1-6106-420F-A03A-4FA2EF8D2CAB"}]}]}], "references": [{"url": "https://blog.0xzon.dev/2023-10-15-Mejiro-Reflected-XSS-Via-Remote-File-Inclusion-CVE-2023-46448/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/dmpop/mejiro/commit/309639339f5816408865902befe8c90cb6862537", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/dmpop/mejiro/commit/309639339f5816408865902befe8c90cb6862537"}}