{"buggy_code": ["<?php\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Public Profile -- a user's public profile page\n *\n * - each user can currently have their own page (cloned from system and then customised)\n * - users can add any blocks they want\n * - the administrators can define a default site public profile for users who have\n *   not created their own public profile\n *\n * This script implements the user's view of the public profile, and allows editing\n * of the public profile.\n *\n * @package    core_user\n * @copyright  2010 Remote-Learner.net\n * @author     Hubert Chathi <hubert@remote-learner.net>\n * @author     Olav Jordan <olav.jordan@remote-learner.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nrequire_once(dirname(__FILE__) . '/../config.php');\nrequire_once($CFG->dirroot . '/my/lib.php');\nrequire_once($CFG->dirroot . '/tag/lib.php');\nrequire_once($CFG->dirroot . '/user/profile/lib.php');\nrequire_once($CFG->libdir.'/filelib.php');\n\n$userid         = optional_param('id', 0, PARAM_INT);\n$edit           = optional_param('edit', null, PARAM_BOOL);    // Turn editing on and off.\n$reset          = optional_param('reset', null, PARAM_BOOL);\n$showallcourses = optional_param('showallcourses', 0, PARAM_INT);\n\n$PAGE->set_url('/user/profile.php', array('id' => $userid));\n\nif (!empty($CFG->forceloginforprofiles)) {\n    require_login();\n    if (isguestuser()) {\n        $SESSION->wantsurl = $PAGE->url->out(false);\n        redirect(get_login_url());\n    }\n} else if (!empty($CFG->forcelogin)) {\n    require_login();\n}\n\n$userid = $userid ? $userid : $USER->id;       // Owner of the page.\nif ((!$user = $DB->get_record('user', array('id' => $userid))) || ($user->deleted)) {\n    $PAGE->set_context(context_system::instance());\n    echo $OUTPUT->header();\n    if (!$user) {\n        echo $OUTPUT->notification(get_string('invaliduser', 'error'));\n    } else {\n        echo $OUTPUT->notification(get_string('userdeleted'));\n    }\n    echo $OUTPUT->footer();\n    die;\n}\n\n$currentuser = ($user->id == $USER->id);\n$context = $usercontext = context_user::instance($userid, MUST_EXIST);\n\nif (!$currentuser &&\n    !empty($CFG->forceloginforprofiles) &&\n    !has_capability('moodle/user:viewdetails', $context) &&\n    !has_coursecontact_role($userid)) {\n\n    // Course managers can be browsed at site level. If not forceloginforprofiles, allow access (bug #4366).\n    $struser = get_string('user');\n    $PAGE->set_context(context_system::instance());\n    $PAGE->set_title(\"$SITE->shortname: $struser\");  // Do not leak the name.\n    $PAGE->set_heading(\"$SITE->shortname: $struser\");\n    $PAGE->set_url('/user/profile.php', array('id' => $userid));\n    $PAGE->navbar->add($struser);\n    echo $OUTPUT->header();\n    echo $OUTPUT->notification(get_string('usernotavailable', 'error'));\n    echo $OUTPUT->footer();\n    exit;\n}\n\n// Get the profile page.  Should always return something unless the database is broken.\nif (!$currentpage = my_get_page($userid, MY_PAGE_PUBLIC)) {\n    print_error('mymoodlesetup');\n}\n\nif (!$currentpage->userid) {\n    $context = context_system::instance();  // A trick so that we even see non-sticky blocks.\n}\n\n$PAGE->set_context($context);\n$PAGE->set_pagelayout('mypublic');\n$PAGE->set_pagetype('user-profile');\n\n// Set up block editing capabilities.\nif (isguestuser()) {     // Guests can never edit their profile.\n    $USER->editing = $edit = 0;  // Just in case.\n    $PAGE->set_blocks_editing_capability('moodle/my:configsyspages');  // unlikely :).\n} else {\n    if ($currentuser) {\n        $PAGE->set_blocks_editing_capability('moodle/user:manageownblocks');\n    } else {\n        $PAGE->set_blocks_editing_capability('moodle/user:manageblocks');\n    }\n}\n\nif (has_capability('moodle/user:viewhiddendetails', $context)) {\n    $hiddenfields = array();\n} else {\n    $hiddenfields = array_flip(explode(',', $CFG->hiddenuserfields));\n}\n\nif (has_capability('moodle/site:viewuseridentity', $context)) {\n    $identityfields = array_flip(explode(',', $CFG->showuseridentity));\n} else {\n    $identityfields = array();\n}\n\n// Start setting up the page.\n$strpublicprofile = get_string('publicprofile');\n\n$PAGE->blocks->add_region('content');\n$PAGE->set_subpage($currentpage->id);\n$PAGE->set_title(fullname($user).\": $strpublicprofile\");\n$PAGE->set_heading(fullname($user).\": $strpublicprofile\");\n\nif (!$currentuser) {\n    $PAGE->navigation->extend_for_user($user);\n    if ($node = $PAGE->settingsnav->get('userviewingsettings'.$user->id)) {\n        $node->forceopen = true;\n    }\n} else if ($node = $PAGE->settingsnav->get('usercurrentsettings', navigation_node::TYPE_CONTAINER)) {\n    $node->forceopen = true;\n}\nif ($node = $PAGE->settingsnav->get('root')) {\n    $node->forceopen = false;\n}\n\n\n// Toggle the editing state and switches.\nif ($PAGE->user_allowed_editing()) {\n    if ($reset !== null) {\n        if (!is_null($userid)) {\n            if (!$currentpage = my_reset_page($userid, MY_PAGE_PUBLIC, 'user-profile')) {\n                print_error('reseterror', 'my');\n            }\n            redirect(new moodle_url('/user/profile.php', array('id' => $userid)));\n        }\n    } else if ($edit !== null) {             // Editing state was specified.\n        $USER->editing = $edit;       // Change editing state.\n        if (!$currentpage->userid && $edit) {\n            // If we are viewing a system page as ordinary user, and the user turns\n            // editing on, copy the system pages as new user pages, and get the\n            // new page record.\n            if (!$currentpage = my_copy_page($userid, MY_PAGE_PUBLIC, 'user-profile')) {\n                print_error('mymoodlesetup');\n            }\n            $PAGE->set_context($usercontext);\n            $PAGE->set_subpage($currentpage->id);\n        }\n    } else {                          // Editing state is in session.\n        if ($currentpage->userid) {   // It's a page we can edit, so load from session.\n            if (!empty($USER->editing)) {\n                $edit = 1;\n            } else {\n                $edit = 0;\n            }\n        } else {                      // It's a system page and they are not allowed to edit system pages.\n            $USER->editing = $edit = 0;          // Disable editing completely, just to be safe.\n        }\n    }\n\n    // Add button for editing page.\n    $params = array('edit' => !$edit, 'id' => $userid);\n\n    $resetbutton = '';\n    $resetstring = get_string('resetpage', 'my');\n    $reseturl = new moodle_url(\"$CFG->wwwroot/user/profile.php\", array('edit' => 1, 'reset' => 1, 'id' => $userid));\n\n    if (!$currentpage->userid) {\n        // Viewing a system page -- let the user customise it.\n        $editstring = get_string('updatemymoodleon');\n        $params['edit'] = 1;\n    } else if (empty($edit)) {\n        $editstring = get_string('updatemymoodleon');\n        $resetbutton = $OUTPUT->single_button($reseturl, $resetstring);\n    } else {\n        $editstring = get_string('updatemymoodleoff');\n        $resetbutton = $OUTPUT->single_button($reseturl, $resetstring);\n    }\n\n    $url = new moodle_url(\"$CFG->wwwroot/user/profile.php\", $params);\n    $button = $OUTPUT->single_button($url, $editstring);\n    $PAGE->set_button($resetbutton . $button);\n\n} else {\n    $USER->editing = $edit = 0;\n}\n\n// HACK WARNING!  This loads up all this page's blocks in the system context.\nif ($currentpage->userid == 0) {\n    $CFG->blockmanagerclass = 'my_syspage_block_manager';\n}\n\n// Trigger a user profile viewed event.\n$event = \\core\\event\\user_profile_viewed::create(array(\n    'objectid' => $user->id,\n    'relateduserid' => $user->id,\n    'context' => $usercontext\n));\n$event->add_record_snapshot('user', $user);\n$event->trigger();\n\n// TODO WORK OUT WHERE THE NAV BAR IS!\necho $OUTPUT->header();\necho '<div class=\"userprofile\">';\n\n\n// Print the standard content of this page, the basic profile info.\necho $OUTPUT->heading(fullname($user));\n\nif (is_mnet_remote_user($user)) {\n    $sql = \"SELECT h.id, h.name, h.wwwroot,\n                   a.name as application, a.display_name\n              FROM {mnet_host} h, {mnet_application} a\n             WHERE h.id = ? AND h.applicationid = a.id\";\n\n    $remotehost = $DB->get_record_sql($sql, array($user->mnethostid));\n    $a = new stdclass();\n    $a->remotetype = $remotehost->display_name;\n    $a->remotename = $remotehost->name;\n    $a->remoteurl  = $remotehost->wwwroot;\n\n    echo $OUTPUT->box(get_string('remoteuserinfo', 'mnet', $a), 'remoteuserinfo');\n}\n\necho '<div class=\"userprofilebox clearfix\"><div class=\"profilepicture\">';\necho $OUTPUT->user_picture($user, array('size' => 100));\necho '</div>';\n\necho '<div class=\"descriptionbox\"><div class=\"description\">';\n// Print the description.\nif ($user->description && !isset($hiddenfields['description'])) {\n    if (!empty($CFG->profilesforenrolledusersonly) && !$currentuser &&\n        !$DB->record_exists('role_assignments', array('userid' => $user->id))) {\n        echo get_string('profilenotshown', 'moodle');\n    } else {\n        $user->description = file_rewrite_pluginfile_urls($user->description, 'pluginfile.php', $usercontext->id, 'user',\n                                                          'profile', null);\n        $options = array('overflowdiv' => true);\n        echo format_text($user->description, $user->descriptionformat, $options);\n    }\n}\necho '</div>';\n\n\n// Print all the little details in a list.\necho html_writer::start_tag('dl', array('class' => 'list'));\nif (!isset($hiddenfields['country']) && $user->country) {\n    echo html_writer::tag('dt', get_string('country'));\n    echo html_writer::tag('dd', get_string($user->country, 'countries'));\n}\n\nif (!isset($hiddenfields['city']) && $user->city) {\n    echo html_writer::tag('dt', get_string('city'));\n    echo html_writer::tag('dd', $user->city);\n}\n\nif (isset($identityfields['address']) && $user->address) {\n    echo html_writer::tag('dt', get_string('address'));\n    echo html_writer::tag('dd', $user->address);\n}\n\nif (isset($identityfields['phone1']) && $user->phone1) {\n    echo html_writer::tag('dt', get_string('phone'));\n    echo html_writer::tag('dd', $user->phone1);\n}\n\nif (isset($identityfields['phone2']) && $user->phone2) {\n    echo html_writer::tag('dt', get_string('phone2'));\n    echo html_writer::tag('dd', $user->phone2);\n}\n\nif (isset($identityfields['institution']) && $user->institution) {\n    echo html_writer::tag('dt', get_string('institution'));\n    echo html_writer::tag('dd', $user->institution);\n}\n\nif (isset($identityfields['department']) && $user->department) {\n    echo html_writer::tag('dt', get_string('department'));\n    echo html_writer::tag('dd', $user->department);\n}\n\nif (isset($identityfields['idnumber']) && $user->idnumber) {\n    echo html_writer::tag('dt', get_string('idnumber'));\n    echo html_writer::tag('dd', $user->idnumber);\n}\n\nif (isset($identityfields['email']) and ($currentuser\n  or $user->maildisplay == 1\n  or has_capability('moodle/course:useremail', $context)\n  or ($user->maildisplay == 2 and enrol_sharing_course($user, $USER)))) {\n    echo html_writer::tag('dt', get_string('email'));\n    echo html_writer::tag('dd', obfuscate_mailto($user->email, ''));\n}\n\nif ($user->url && !isset($hiddenfields['webpage'])) {\n    $url = $user->url;\n    if (strpos($user->url, '://') === false) {\n        $url = 'http://'. $url;\n    }\n    $webpageurl = new moodle_url($url);\n    echo html_writer::tag('dt', get_string('webpage'));\n    echo html_writer::tag('dd', html_writer::link($webpageurl, s($user->url)));\n}\n\nif ($user->icq && !isset($hiddenfields['icqnumber'])) {\n    $imurl = new moodle_url('http://web.icq.com/wwp', array('uin' => $user->icq) );\n    $iconurl = new moodle_url('http://web.icq.com/whitepages/online', array('icq' => $user->icq, 'img' => '5'));\n    $statusicon = html_writer::tag('img', '', array('src' => $iconurl, 'class' => 'icon icon-post', 'alt' => get_string('status')));\n    echo html_writer::tag('dt', get_string('icqnumber'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->icq) . $statusicon));\n}\n\nif ($user->skype && !isset($hiddenfields['skypeid'])) {\n    $imurl = 'skype:'.urlencode($user->skype).'?call';\n    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.$user->skype);\n    if (strpos($CFG->httpswwwroot, 'https:') === 0) {\n        // Bad luck, skype devs are lazy to set up SSL on their servers - see MDL-37233.\n        $statusicon = '';\n    } else {\n        $statusicon = html_writer::empty_tag('img',\n            array('src' => $iconurl, 'class' => 'icon icon-post', 'alt' => get_string('status')));\n    }\n    echo html_writer::tag('dt', get_string('skypeid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->skype) . $statusicon));\n}\nif ($user->yahoo && !isset($hiddenfields['yahooid'])) {\n    $imurl = new moodle_url('http://edit.yahoo.com/config/send_webmesg', array('.target' => $user->yahoo, '.src' => 'pg'));\n    $iconurl = new moodle_url('http://opi.yahoo.com/online', array('u' => $user->yahoo, 'm' => 'g', 't' => '0'));\n    $statusicon = html_writer::tag('img', '',\n        array('src' => $iconurl, 'class' => 'iconsmall icon-post', 'alt' => get_string('status')));\n    echo html_writer::tag('dt', get_string('yahooid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->yahoo) . $statusicon));\n}\nif ($user->aim && !isset($hiddenfields['aimid'])) {\n    $imurl = 'aim:goim?screenname='.urlencode($user->aim);\n    echo html_writer::tag('dt', get_string('aimid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->aim)));\n}\nif ($user->msn && !isset($hiddenfields['msnid'])) {\n    echo html_writer::tag('dt', get_string('msnid'));\n    echo html_writer::tag('dd', s($user->msn));\n}\n\n// Print the Custom User Fields.\nprofile_display_fields($user->id);\n\n\nif (!isset($hiddenfields['mycourses'])) {\n    if ($mycourses = enrol_get_all_users_courses($user->id, true, null, 'visible DESC, sortorder ASC')) {\n        $shown = 0;\n        $courselisting = '';\n        foreach ($mycourses as $mycourse) {\n            if ($mycourse->category) {\n                context_helper::preload_from_record($mycourse);\n                $ccontext = context_course::instance($mycourse->id);\n                $class = '';\n                if ($mycourse->visible == 0) {\n                    if (!has_capability('moodle/course:viewhiddencourses', $ccontext)) {\n                        continue;\n                    }\n                    $class = 'class=\"dimmed\"';\n                }\n                $params = array('id' => $user->id, 'course' => $mycourse->id);\n                if ($showallcourses) {\n                    $params['showallcourses'] = 1;\n                }\n                $url = new moodle_url('/user/view.php', $params);\n                $courselisting .= html_writer::link($url, $ccontext->get_context_name(false), array('class' => $class));\n                $courselisting .= ', ';\n            }\n            $shown++;\n            if (!$showallcourses && $shown == 20) {\n                $url = new moodle_url('/user/profile.php', array('id' => $user->id, 'showallcourses' => 1));\n                $courselisting .= html_writer::link($url, '...', array('title' => get_string('viewmore')));\n                break;\n            }\n        }\n        echo html_writer::tag('dt', get_string('courseprofiles'));\n        echo html_writer::tag('dd', rtrim($courselisting, ', '));\n    }\n}\nif (!isset($hiddenfields['firstaccess'])) {\n    if ($user->firstaccess) {\n        $datestring = userdate($user->firstaccess).\"&nbsp; (\".format_time(time() - $user->firstaccess).\")\";\n    } else {\n        $datestring = get_string(\"never\");\n    }\n    echo html_writer::tag('dt', get_string('firstaccess'));\n    echo html_writer::tag('dd', $datestring);\n}\nif (!isset($hiddenfields['lastaccess'])) {\n    if ($user->lastaccess) {\n        $datestring = userdate($user->lastaccess).\"&nbsp; (\".format_time(time() - $user->lastaccess).\")\";\n    } else {\n        $datestring = get_string(\"never\");\n    }\n    echo html_writer::tag('dt', get_string('lastaccess'));\n    echo html_writer::tag('dd', $datestring);\n}\n\nif (has_capability('moodle/user:viewlastip', $usercontext) && !isset($hiddenfields['lastip'])) {\n    if ($user->lastip) {\n        $iplookupurl = new moodle_url('/iplookup/index.php', array('ip' => $user->lastip, 'user' => $user->id));\n        $ipstring = html_writer::link($iplookupurl, $user->lastip);\n    } else {\n        $ipstring = get_string(\"none\");\n    }\n    echo html_writer::tag('dt', get_string('lastip'));\n    echo html_writer::tag('dd', $ipstring);\n}\n\n// Printing tagged interests.\nif (!empty($CFG->usetags)) {\n    if ($interests = tag_get_tags_csv('user', $user->id) ) {\n        echo html_writer::tag('dt', get_string('interests'));\n        echo html_writer::tag('dd', $interests);\n    }\n}\n\nif (!isset($hiddenfields['suspended'])) {\n    if ($user->suspended) {\n        echo html_writer::tag('dt', '&nbsp;');\n        echo html_writer::tag('dd', get_string('suspended', 'auth'));\n    }\n}\n\nrequire_once($CFG->libdir . '/badgeslib.php');\nif (!empty($CFG->enablebadges)) {\n    profile_display_badges($user->id);\n}\n\necho html_writer::end_tag('dl');\necho \"</div></div>\"; // Closing desriptionbox and userprofilebox.\n\necho $OUTPUT->custom_block_region('content');\n\n// Print messaging link if allowed.\nif (isloggedin() && has_capability('moodle/site:sendmessage', $context)\n    && !empty($CFG->messaging) && !isguestuser() && !isguestuser($user) && ($USER->id != $user->id)) {\n    echo '<div class=\"messagebox\">';\n    echo '<a href=\"'.$CFG->wwwroot.'/message/index.php?id='.$user->id.'\">'.get_string('messageselectadd').'</a>';\n    echo '</div>';\n}\n\necho '</div>';  // Userprofile class.\necho $OUTPUT->footer();\n"], "fixing_code": ["<?php\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Public Profile -- a user's public profile page\n *\n * - each user can currently have their own page (cloned from system and then customised)\n * - users can add any blocks they want\n * - the administrators can define a default site public profile for users who have\n *   not created their own public profile\n *\n * This script implements the user's view of the public profile, and allows editing\n * of the public profile.\n *\n * @package    core_user\n * @copyright  2010 Remote-Learner.net\n * @author     Hubert Chathi <hubert@remote-learner.net>\n * @author     Olav Jordan <olav.jordan@remote-learner.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nrequire_once(dirname(__FILE__) . '/../config.php');\nrequire_once($CFG->dirroot . '/my/lib.php');\nrequire_once($CFG->dirroot . '/tag/lib.php');\nrequire_once($CFG->dirroot . '/user/profile/lib.php');\nrequire_once($CFG->libdir.'/filelib.php');\n\n$userid         = optional_param('id', 0, PARAM_INT);\n$edit           = optional_param('edit', null, PARAM_BOOL);    // Turn editing on and off.\n$reset          = optional_param('reset', null, PARAM_BOOL);\n$showallcourses = optional_param('showallcourses', 0, PARAM_INT);\n\n$PAGE->set_url('/user/profile.php', array('id' => $userid));\n\nif (!empty($CFG->forceloginforprofiles)) {\n    require_login();\n    if (isguestuser()) {\n        $SESSION->wantsurl = $PAGE->url->out(false);\n        redirect(get_login_url());\n    }\n} else if (!empty($CFG->forcelogin)) {\n    require_login();\n}\n\n$userid = $userid ? $userid : $USER->id;       // Owner of the page.\nif ((!$user = $DB->get_record('user', array('id' => $userid))) || ($user->deleted)) {\n    $PAGE->set_context(context_system::instance());\n    echo $OUTPUT->header();\n    if (!$user) {\n        echo $OUTPUT->notification(get_string('invaliduser', 'error'));\n    } else {\n        echo $OUTPUT->notification(get_string('userdeleted'));\n    }\n    echo $OUTPUT->footer();\n    die;\n}\n\n$currentuser = ($user->id == $USER->id);\n$context = $usercontext = context_user::instance($userid, MUST_EXIST);\n\nif (!$currentuser &&\n    !empty($CFG->forceloginforprofiles) &&\n    !has_capability('moodle/user:viewdetails', $context) &&\n    !has_coursecontact_role($userid)) {\n\n    // Course managers can be browsed at site level. If not forceloginforprofiles, allow access (bug #4366).\n    $struser = get_string('user');\n    $PAGE->set_context(context_system::instance());\n    $PAGE->set_title(\"$SITE->shortname: $struser\");  // Do not leak the name.\n    $PAGE->set_heading(\"$SITE->shortname: $struser\");\n    $PAGE->set_url('/user/profile.php', array('id' => $userid));\n    $PAGE->navbar->add($struser);\n    echo $OUTPUT->header();\n    echo $OUTPUT->notification(get_string('usernotavailable', 'error'));\n    echo $OUTPUT->footer();\n    exit;\n}\n\n// Get the profile page.  Should always return something unless the database is broken.\nif (!$currentpage = my_get_page($userid, MY_PAGE_PUBLIC)) {\n    print_error('mymoodlesetup');\n}\n\nif (!$currentpage->userid) {\n    $context = context_system::instance();  // A trick so that we even see non-sticky blocks.\n}\n\n$PAGE->set_context($context);\n$PAGE->set_pagelayout('mypublic');\n$PAGE->set_pagetype('user-profile');\n\n// Set up block editing capabilities.\nif (isguestuser()) {     // Guests can never edit their profile.\n    $USER->editing = $edit = 0;  // Just in case.\n    $PAGE->set_blocks_editing_capability('moodle/my:configsyspages');  // unlikely :).\n} else {\n    if ($currentuser) {\n        $PAGE->set_blocks_editing_capability('moodle/user:manageownblocks');\n    } else {\n        $PAGE->set_blocks_editing_capability('moodle/user:manageblocks');\n    }\n}\n\nif (has_capability('moodle/user:viewhiddendetails', $context)) {\n    $hiddenfields = array();\n} else {\n    $hiddenfields = array_flip(explode(',', $CFG->hiddenuserfields));\n}\n\nif (has_capability('moodle/site:viewuseridentity', $context)) {\n    $identityfields = array_flip(explode(',', $CFG->showuseridentity));\n} else {\n    $identityfields = array();\n}\n\n// Start setting up the page.\n$strpublicprofile = get_string('publicprofile');\n\n$PAGE->blocks->add_region('content');\n$PAGE->set_subpage($currentpage->id);\n$PAGE->set_title(fullname($user).\": $strpublicprofile\");\n$PAGE->set_heading(fullname($user).\": $strpublicprofile\");\n\nif (!$currentuser) {\n    $PAGE->navigation->extend_for_user($user);\n    if ($node = $PAGE->settingsnav->get('userviewingsettings'.$user->id)) {\n        $node->forceopen = true;\n    }\n} else if ($node = $PAGE->settingsnav->get('usercurrentsettings', navigation_node::TYPE_CONTAINER)) {\n    $node->forceopen = true;\n}\nif ($node = $PAGE->settingsnav->get('root')) {\n    $node->forceopen = false;\n}\n\n\n// Toggle the editing state and switches.\nif ($PAGE->user_allowed_editing()) {\n    if ($reset !== null) {\n        if (!is_null($userid)) {\n            if (!$currentpage = my_reset_page($userid, MY_PAGE_PUBLIC, 'user-profile')) {\n                print_error('reseterror', 'my');\n            }\n            redirect(new moodle_url('/user/profile.php', array('id' => $userid)));\n        }\n    } else if ($edit !== null) {             // Editing state was specified.\n        $USER->editing = $edit;       // Change editing state.\n        if (!$currentpage->userid && $edit) {\n            // If we are viewing a system page as ordinary user, and the user turns\n            // editing on, copy the system pages as new user pages, and get the\n            // new page record.\n            if (!$currentpage = my_copy_page($userid, MY_PAGE_PUBLIC, 'user-profile')) {\n                print_error('mymoodlesetup');\n            }\n            $PAGE->set_context($usercontext);\n            $PAGE->set_subpage($currentpage->id);\n        }\n    } else {                          // Editing state is in session.\n        if ($currentpage->userid) {   // It's a page we can edit, so load from session.\n            if (!empty($USER->editing)) {\n                $edit = 1;\n            } else {\n                $edit = 0;\n            }\n        } else {                      // It's a system page and they are not allowed to edit system pages.\n            $USER->editing = $edit = 0;          // Disable editing completely, just to be safe.\n        }\n    }\n\n    // Add button for editing page.\n    $params = array('edit' => !$edit, 'id' => $userid);\n\n    $resetbutton = '';\n    $resetstring = get_string('resetpage', 'my');\n    $reseturl = new moodle_url(\"$CFG->wwwroot/user/profile.php\", array('edit' => 1, 'reset' => 1, 'id' => $userid));\n\n    if (!$currentpage->userid) {\n        // Viewing a system page -- let the user customise it.\n        $editstring = get_string('updatemymoodleon');\n        $params['edit'] = 1;\n    } else if (empty($edit)) {\n        $editstring = get_string('updatemymoodleon');\n        $resetbutton = $OUTPUT->single_button($reseturl, $resetstring);\n    } else {\n        $editstring = get_string('updatemymoodleoff');\n        $resetbutton = $OUTPUT->single_button($reseturl, $resetstring);\n    }\n\n    $url = new moodle_url(\"$CFG->wwwroot/user/profile.php\", $params);\n    $button = $OUTPUT->single_button($url, $editstring);\n    $PAGE->set_button($resetbutton . $button);\n\n} else {\n    $USER->editing = $edit = 0;\n}\n\n// HACK WARNING!  This loads up all this page's blocks in the system context.\nif ($currentpage->userid == 0) {\n    $CFG->blockmanagerclass = 'my_syspage_block_manager';\n}\n\n// Trigger a user profile viewed event.\n$event = \\core\\event\\user_profile_viewed::create(array(\n    'objectid' => $user->id,\n    'relateduserid' => $user->id,\n    'context' => $usercontext\n));\n$event->add_record_snapshot('user', $user);\n$event->trigger();\n\n// TODO WORK OUT WHERE THE NAV BAR IS!\necho $OUTPUT->header();\necho '<div class=\"userprofile\">';\n\n\n// Print the standard content of this page, the basic profile info.\necho $OUTPUT->heading(fullname($user));\n\nif (is_mnet_remote_user($user)) {\n    $sql = \"SELECT h.id, h.name, h.wwwroot,\n                   a.name as application, a.display_name\n              FROM {mnet_host} h, {mnet_application} a\n             WHERE h.id = ? AND h.applicationid = a.id\";\n\n    $remotehost = $DB->get_record_sql($sql, array($user->mnethostid));\n    $a = new stdclass();\n    $a->remotetype = $remotehost->display_name;\n    $a->remotename = $remotehost->name;\n    $a->remoteurl  = $remotehost->wwwroot;\n\n    echo $OUTPUT->box(get_string('remoteuserinfo', 'mnet', $a), 'remoteuserinfo');\n}\n\necho '<div class=\"userprofilebox clearfix\"><div class=\"profilepicture\">';\necho $OUTPUT->user_picture($user, array('size' => 100));\necho '</div>';\n\necho '<div class=\"descriptionbox\"><div class=\"description\">';\n// Print the description.\nif ($user->description && !isset($hiddenfields['description'])) {\n    if (!empty($CFG->profilesforenrolledusersonly) && !$currentuser &&\n        !$DB->record_exists('role_assignments', array('userid' => $user->id))) {\n        echo get_string('profilenotshown', 'moodle');\n    } else {\n        $user->description = file_rewrite_pluginfile_urls($user->description, 'pluginfile.php', $usercontext->id, 'user',\n                                                          'profile', null);\n        $options = array('overflowdiv' => true);\n        echo format_text($user->description, $user->descriptionformat, $options);\n    }\n}\necho '</div>';\n\n\n// Print all the little details in a list.\necho html_writer::start_tag('dl', array('class' => 'list'));\nif (!isset($hiddenfields['country']) && $user->country) {\n    echo html_writer::tag('dt', get_string('country'));\n    echo html_writer::tag('dd', get_string($user->country, 'countries'));\n}\n\nif (!isset($hiddenfields['city']) && $user->city) {\n    echo html_writer::tag('dt', get_string('city'));\n    echo html_writer::tag('dd', $user->city);\n}\n\nif (isset($identityfields['address']) && $user->address) {\n    echo html_writer::tag('dt', get_string('address'));\n    echo html_writer::tag('dd', $user->address);\n}\n\nif (isset($identityfields['phone1']) && $user->phone1) {\n    echo html_writer::tag('dt', get_string('phone'));\n    echo html_writer::tag('dd', $user->phone1);\n}\n\nif (isset($identityfields['phone2']) && $user->phone2) {\n    echo html_writer::tag('dt', get_string('phone2'));\n    echo html_writer::tag('dd', $user->phone2);\n}\n\nif (isset($identityfields['institution']) && $user->institution) {\n    echo html_writer::tag('dt', get_string('institution'));\n    echo html_writer::tag('dd', $user->institution);\n}\n\nif (isset($identityfields['department']) && $user->department) {\n    echo html_writer::tag('dt', get_string('department'));\n    echo html_writer::tag('dd', $user->department);\n}\n\nif (isset($identityfields['idnumber']) && $user->idnumber) {\n    echo html_writer::tag('dt', get_string('idnumber'));\n    echo html_writer::tag('dd', $user->idnumber);\n}\n\nif (isset($identityfields['email']) and ($currentuser\n  or $user->maildisplay == 1\n  or has_capability('moodle/course:useremail', $context)\n  or ($user->maildisplay == 2 and enrol_sharing_course($user, $USER)))) {\n    echo html_writer::tag('dt', get_string('email'));\n    echo html_writer::tag('dd', obfuscate_mailto($user->email, ''));\n}\n\nif ($user->url && !isset($hiddenfields['webpage'])) {\n    $url = $user->url;\n    if (strpos($user->url, '://') === false) {\n        $url = 'http://'. $url;\n    }\n    $webpageurl = new moodle_url($url);\n    echo html_writer::tag('dt', get_string('webpage'));\n    echo html_writer::tag('dd', html_writer::link($webpageurl, s($user->url)));\n}\n\nif ($user->icq && !isset($hiddenfields['icqnumber'])) {\n    $imurl = new moodle_url('http://web.icq.com/wwp', array('uin' => $user->icq) );\n    $iconurl = new moodle_url('http://web.icq.com/whitepages/online', array('icq' => $user->icq, 'img' => '5'));\n    $statusicon = html_writer::tag('img', '', array('src' => $iconurl, 'class' => 'icon icon-post', 'alt' => get_string('status')));\n    echo html_writer::tag('dt', get_string('icqnumber'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->icq) . $statusicon));\n}\n\nif ($user->skype && !isset($hiddenfields['skypeid'])) {\n    $imurl = 'skype:'.urlencode($user->skype).'?call';\n    $iconurl = new moodle_url('http://mystatus.skype.com/smallicon/'.urlencode($user->skype));\n    if (strpos($CFG->httpswwwroot, 'https:') === 0) {\n        // Bad luck, skype devs are lazy to set up SSL on their servers - see MDL-37233.\n        $statusicon = '';\n    } else {\n        $statusicon = html_writer::empty_tag('img',\n            array('src' => $iconurl, 'class' => 'icon icon-post', 'alt' => get_string('status')));\n    }\n    echo html_writer::tag('dt', get_string('skypeid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->skype) . $statusicon));\n}\nif ($user->yahoo && !isset($hiddenfields['yahooid'])) {\n    $imurl = new moodle_url('http://edit.yahoo.com/config/send_webmesg', array('.target' => $user->yahoo, '.src' => 'pg'));\n    $iconurl = new moodle_url('http://opi.yahoo.com/online', array('u' => $user->yahoo, 'm' => 'g', 't' => '0'));\n    $statusicon = html_writer::tag('img', '',\n        array('src' => $iconurl, 'class' => 'iconsmall icon-post', 'alt' => get_string('status')));\n    echo html_writer::tag('dt', get_string('yahooid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->yahoo) . $statusicon));\n}\nif ($user->aim && !isset($hiddenfields['aimid'])) {\n    $imurl = 'aim:goim?screenname='.urlencode($user->aim);\n    echo html_writer::tag('dt', get_string('aimid'));\n    echo html_writer::tag('dd', html_writer::link($imurl, s($user->aim)));\n}\nif ($user->msn && !isset($hiddenfields['msnid'])) {\n    echo html_writer::tag('dt', get_string('msnid'));\n    echo html_writer::tag('dd', s($user->msn));\n}\n\n// Print the Custom User Fields.\nprofile_display_fields($user->id);\n\n\nif (!isset($hiddenfields['mycourses'])) {\n    if ($mycourses = enrol_get_all_users_courses($user->id, true, null, 'visible DESC, sortorder ASC')) {\n        $shown = 0;\n        $courselisting = '';\n        foreach ($mycourses as $mycourse) {\n            if ($mycourse->category) {\n                context_helper::preload_from_record($mycourse);\n                $ccontext = context_course::instance($mycourse->id);\n                $class = '';\n                if ($mycourse->visible == 0) {\n                    if (!has_capability('moodle/course:viewhiddencourses', $ccontext)) {\n                        continue;\n                    }\n                    $class = 'class=\"dimmed\"';\n                }\n                $params = array('id' => $user->id, 'course' => $mycourse->id);\n                if ($showallcourses) {\n                    $params['showallcourses'] = 1;\n                }\n                $url = new moodle_url('/user/view.php', $params);\n                $courselisting .= html_writer::link($url, $ccontext->get_context_name(false), array('class' => $class));\n                $courselisting .= ', ';\n            }\n            $shown++;\n            if (!$showallcourses && $shown == 20) {\n                $url = new moodle_url('/user/profile.php', array('id' => $user->id, 'showallcourses' => 1));\n                $courselisting .= html_writer::link($url, '...', array('title' => get_string('viewmore')));\n                break;\n            }\n        }\n        echo html_writer::tag('dt', get_string('courseprofiles'));\n        echo html_writer::tag('dd', rtrim($courselisting, ', '));\n    }\n}\nif (!isset($hiddenfields['firstaccess'])) {\n    if ($user->firstaccess) {\n        $datestring = userdate($user->firstaccess).\"&nbsp; (\".format_time(time() - $user->firstaccess).\")\";\n    } else {\n        $datestring = get_string(\"never\");\n    }\n    echo html_writer::tag('dt', get_string('firstaccess'));\n    echo html_writer::tag('dd', $datestring);\n}\nif (!isset($hiddenfields['lastaccess'])) {\n    if ($user->lastaccess) {\n        $datestring = userdate($user->lastaccess).\"&nbsp; (\".format_time(time() - $user->lastaccess).\")\";\n    } else {\n        $datestring = get_string(\"never\");\n    }\n    echo html_writer::tag('dt', get_string('lastaccess'));\n    echo html_writer::tag('dd', $datestring);\n}\n\nif (has_capability('moodle/user:viewlastip', $usercontext) && !isset($hiddenfields['lastip'])) {\n    if ($user->lastip) {\n        $iplookupurl = new moodle_url('/iplookup/index.php', array('ip' => $user->lastip, 'user' => $user->id));\n        $ipstring = html_writer::link($iplookupurl, $user->lastip);\n    } else {\n        $ipstring = get_string(\"none\");\n    }\n    echo html_writer::tag('dt', get_string('lastip'));\n    echo html_writer::tag('dd', $ipstring);\n}\n\n// Printing tagged interests.\nif (!empty($CFG->usetags)) {\n    if ($interests = tag_get_tags_csv('user', $user->id) ) {\n        echo html_writer::tag('dt', get_string('interests'));\n        echo html_writer::tag('dd', $interests);\n    }\n}\n\nif (!isset($hiddenfields['suspended'])) {\n    if ($user->suspended) {\n        echo html_writer::tag('dt', '&nbsp;');\n        echo html_writer::tag('dd', get_string('suspended', 'auth'));\n    }\n}\n\nrequire_once($CFG->libdir . '/badgeslib.php');\nif (!empty($CFG->enablebadges)) {\n    profile_display_badges($user->id);\n}\n\necho html_writer::end_tag('dl');\necho \"</div></div>\"; // Closing desriptionbox and userprofilebox.\n\necho $OUTPUT->custom_block_region('content');\n\n// Print messaging link if allowed.\nif (isloggedin() && has_capability('moodle/site:sendmessage', $context)\n    && !empty($CFG->messaging) && !isguestuser() && !isguestuser($user) && ($USER->id != $user->id)) {\n    echo '<div class=\"messagebox\">';\n    echo '<a href=\"'.$CFG->wwwroot.'/message/index.php?id='.$user->id.'\">'.get_string('messageselectadd').'</a>';\n    echo '</div>';\n}\n\necho '</div>';  // Userprofile class.\necho $OUTPUT->footer();\n"], "filenames": ["user/profile.php"], "buggy_code_start_loc": [337], "buggy_code_end_loc": [338], "fixing_code_start_loc": [337], "fixing_code_end_loc": [338], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field.", "other": {"cve": {"id": "CVE-2014-3544", "sourceIdentifier": "secalert@redhat.com", "published": "2014-07-29T11:10:32.137", "lastModified": "2020-12-01T14:54:45.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in user/profile.php in Moodle through 2.3.11, 2.4.x before 2.4.11, 2.5.x before 2.5.7, 2.6.x before 2.6.4, and 2.7.x before 2.7.1 allows remote authenticated users to inject arbitrary web script or HTML via the Skype ID profile field."}, {"lang": "es", "value": "Vulnerabilidad de XSS en user/profile.php en Moodle hasta 2.3.11, 2.4.x anterior a 2.4.11, 2.5.x anterior a 2.5.7, 2.6.x anterior a 2.6.4 y 2.7.x anterior a 2.7.1 permite a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s del campo del perfil de ID de Skype."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "B8E52813-E056-4A5C-8BF5-4DD5EF5BF041"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "62156008-2728-4207-AF60-E6330421D102"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "094DCC66-8C95-4DD6-B8DD-FB2D46A2A847"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "D27EBAD4-F6F3-4E6A-8E42-EBB36655376D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "93169BDD-4F0B-44C9-96C4-5BD0839A9BA4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "DC1ED608-B1D0-4FFF-B67F-69451C2526C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "8B8A5C78-F69F-43DB-98EE-412D4D8FD83B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "ECF4F307-508B-4284-8864-DF604C70132B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "B66679A6-C09F-4675-BE7B-EDBA1F439525"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "74B4B5C5-3132-4B3B-8657-8D905806C9B2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "8D36FAFC-56A6-4CD8-9668-00404C46B07E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.11", "matchCriteriaId": "93AAC675-554B-4519-85CC-929E917D8E08"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "BFD575CF-2AF2-443F-841D-F7E25FBD455A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "AC2A1954-E30F-40EC-BA59-40D29573E7D6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "25EA194F-BE9D-49A8-AA35-FC7810C06643"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "2C3888D8-8219-4DE4-8E6C-84F58AFD3B15"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "E15AADAA-EFF5-4116-A683-D2B9824AA353"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "C917E5A8-ABE8-4F01-8580-329836CC2C55"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.6:*:*:*:*:*:*:*", "matchCriteriaId": "70C08FF1-BAA7-4534-98E4-80231C25BC83"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.7:*:*:*:*:*:*:*", "matchCriteriaId": "025832C9-F1A4-4935-892A-8868E401906E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.8:*:*:*:*:*:*:*", "matchCriteriaId": "D2F95290-BFA3-470A-888C-E1896DD466F3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.9:*:*:*:*:*:*:*", "matchCriteriaId": "45A44950-97B6-4AC7-AB41-57D644BA6415"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.3.10:*:*:*:*:*:*:*", "matchCriteriaId": "B917F1CA-B788-4FE0-9A03-FD7F486DCAA4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "05112EC5-3AAA-499B-8763-345187529C09"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "71407960-077B-4407-B249-789436687D91"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "72728F94-D408-4CAD-A214-800B1D1C7971"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "33C1E9B5-6B2B-4230-92F2-EC0FB307ECF4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "4E051AAC-EB40-491F-AF0E-EE8143C12567"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "CD1B5B42-ECA9-4888-B18E-AD8D282311DB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "9EF03304-032C-4E85-A802-7CDAC89216FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "311BEFF3-A58A-4CA8-BE09-F8D081EA13A8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "D7D2A1F8-82FF-4C1A-A872-71D93874EEAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "86E79BB0-6017-441C-9B10-00E55FDF0986"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.5:*:*:*:*:*:*:*", "matchCriteriaId": "CA845882-C0F4-4522-94B2-9AA21A08887A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:moodle:moodle:2.5.6:*:*:*:*:*:*:*", "matchCriteriaId": "48F341A8-0AC8-4033-8C99-0249B7289F9E"}]}]}], "references": [{"url": "http://git.moodle.org/gw?p=moodle.git&a=search&h=HEAD&st=commit&s=MDL-45683", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://openwall.com/lists/oss-security/2014/07/21/1", "source": "secalert@redhat.com"}, {"url": "http://osandamalith.wordpress.com/2014/07/25/moodle-2-7-persistent-xss/", "source": "secalert@redhat.com", "tags": ["Exploit"]}, {"url": "http://packetstormsecurity.com/files/127624/Moodle-2.7-Cross-Site-Scripting.html", "source": "secalert@redhat.com", "tags": ["Exploit"]}, {"url": "http://www.exploit-db.com/exploits/34169", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/68756", "source": "secalert@redhat.com"}, {"url": "https://github.com/moodle/moodle/commit/ce5a785b0962c3c94c7a7b0d36176482d21db95d", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://moodle.org/mod/forum/discuss.php?d=264265", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/moodle/moodle/commit/ce5a785b0962c3c94c7a7b0d36176482d21db95d"}}