{"buggy_code": ["{\n  \"php-core-extensions\": [\n    \"core\", \"standard\",\n\n    \"dom\", \"date\", \"fileinfo\", \"filter\", \"json\", \"libxml\", \"pcre\", \"reflection\", \"session\", \"simplexml\", \"spl\", \"xml\",\n\n    \"curl\", \"gd\", \"intl\", \"mysqli\", \"zlib\",\n\n    \"exif\", \"ldap\", \"pcntl\", \"xmlrpc\", \"zip\"\n  ],\n  \"symbol-whitelist\": [\n    \"// PHP symbols\",\n    \"null\",\n    \"false\", \"true\",\n    \"static\", \"self\", \"parent\",\n    \"array\", \"bool\", \"callable\", \"float\", \"int\", \"iterable\", \"object\", \"string\", \"void\",\n\n    \"// Missing constant in Alpine Linux\",\n    \"GLOB_BRACE\",\n\n    \"// PHP 8.1 symbols\",\n    \"Ldap\\\\Connection\",\n\n    \"// GLPI config classes\",\n    \"DB\", \"DBSlave\",\n\n    \"// GLPI base constants (they are not detected as they are dynamically declared)\",\n    \"GLPI_AJAX_DASHBOARD\", \"GLPI_ALLOW_IFRAME_IN_RICH_TEXT\", \"GLPI_CALDAV_IMPORT_STATE\", \"GLPI_CACHE_DIR\",\n    \"GLPI_MARKETPLACE_ALLOW_OVERRIDE\", \"GLPI_MARKETPLACE_MANUAL_DOWNLOADS\",\n    \"GLPI_CRON_DIR\", \"GLPI_CSRF_EXPIRES\", \"GLPI_CSRF_MAX_TOKENS\", \"GLPI_DEMO_MODE\",\n    \"GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE\", \"GLPI_DOC_DIR\", \"GLPI_DUMP_DIR\",\n    \"GLPI_GRAPH_DIR\", \"GLPI_IDOR_EXPIRES\", \"GLPI_INSTALL_MODE\", \"GLPI_INVENTORY_DIR\", \"GLPI_LOCAL_I18N_DIR\",\n    \"GLPI_LOCK_DIR\", \"GLPI_LOG_DIR\", \"GLPI_MARKETPLACE_DIR\", \"GLPI_MARKETPLACE_PLUGINS_API_URI\",\n    \"GLPI_MARKETPLACE_PRERELEASES\", \"GLPI_NETWORK_REGISTRATION_API_URL\", \"GLPI_NETWORK_MAIL\",\n    \"GLPI_NETWORK_SERVICES\", \"GLPI_PICTURE_DIR\", \"GLPI_PLUGIN_DOC_DIR\", \"GLPI_RSS_DIR\", \"GLPI_SESSION_DIR\",\n    \"GLPI_TELEMETRY_URI\", \"GLPI_TMP_DIR\", \"GLPI_UPLOAD_DIR\", \"GLPI_USE_CSRF_CHECK\", \"GLPI_USE_IDOR_CHECK\",\n    \"GLPI_USER_AGENT_EXTRA_COMMENTS\", \"GLPI_VAR_DIR\", \"GLPI_CENTRAL_WARNINGS\",\n\n    \"// GLPI optionnal constants\",\n    \"GLPI_FORCE_MAIL\", \"GLPI_LOG_LVL\",\n\n    \"// GLPI test suite specific functions\",\n    \"GLPI_SQL_DEBUG\",\n\n    \"// apache function\",\n    \"getallheaders\",\n\n    \"// OPCache extension (not installed on testing env)\",\n    \"opcache_get_status\", \"opcache_invalidate\", \"opcache_reset\",\n\n    \"// random native PHP functions\",\n    \"// these are moved in random native extension in PHP 8.2, but this extension does not exists in previous PHP versions\",\n    \"mt_getrandmax\",\n    \"mt_rand\",\n    \"rand\",\n    \"random_bytes\",\n    \"random_int\",\n\n    \"// SELinux PECL extension\",\n    \"selinux_getenforce\", \"selinux_get_boolean_active\", \"selinux_is_enabled\",\n\n    \"// XHProf PECL extension\",\n    \"XHProfRuns_Default\", \"xhprof_disable\", \"xhprof_enable\", \"XHPROF_PATH\", \"XHPROF_URL\",\n\n    \"// phpCAS library\",\n    \"CAS_VERSION_2_0\", \"phpCAS\",\n\n    \"// paragonie/sodium_compat library\",\n    \"SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES\", \"SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES\", \"sodium_crypto_aead_xchacha20poly1305_ietf_decrypt\", \"sodium_crypto_aead_xchacha20poly1305_ietf_encrypt\", \"sodium_crypto_aead_chacha20poly1305_ietf_keygen\",\n\n    \"//xhprof\",\n    \"XHPROF_FLAGS_NO_BUILTINS\", \"XHPROF_FLAGS_CPU\", \"XHPROF_FLAGS_MEMORY\",\n\n    \"//brotli compression\",\n    \"brotli_uncompress\",\n    \"brotli_compress\",\n\n    \"// composer autoloader\",\n    \"Composer\\\\Autoload\\\\ClassLoader\"\n  ],\n  \"scan-files\": [\n    \"ajax/**/*.php\",\n    \"bin/console\",\n    \"front/**/*.php\",\n    \"inc/**/*.php\",\n    \"install/**/*.php\",\n    \"src/**/*.php\",\n    \"/*.php\"\n  ]\n}\n", "/*!\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\n@import \"../../includes/components/fullcalendar\";\n\n#planning_container {\n   gap: 10px;\n\n   &.folded {\n      padding-left: 28px;\n   }\n\n   #planning_filter {\n      #planning_filter_content {\n         min-width: 300px;\n      }\n\n      .toggle {\n         float: right;\n         margin: 8px 8px 0 0;\n         height: 18px;\n         width: 18px;\n         display: block;\n\n         &::before {\n            font: var(--fa-font-solid);\n            content: \"\\f191\";\n         }\n      }\n\n      &.folded {\n         .toggle {\n            float: none;\n            &::before {\n               font: var(--fa-font-solid);\n               content: \"\\f152\";\n            }\n         }\n\n         width: 18px;\n      }\n\n      h3 {\n         background: $header-bg;\n         color: $header-fg;\n         margin: 2px 0 0 0;\n         padding: .5em .5em .5em .7em;\n         font-weight: normal;\n         line-height: 1.3;\n         font-size: 13px;\n      }\n\n      ul.filters {\n         border: 0;\n         padding: 5px;\n         list-style: none;\n         margin: 0;\n         padding: 0;\n\n         > li {\n            padding: 5px 0 5px 5px;\n            display: flex;\n            flex-wrap: wrap;\n            align-items: center;\n\n            .actor_icon {\n               padding-bottom: 2px;\n               vertical-align: top;\n               font-size: 14px;\n               margin-left: 5px;\n            }\n\n            label {\n               padding-left: 5px;\n               line-height: 16px;\n               width: 185px;\n               overflow: hidden;\n               text-overflow: ellipsis;\n               display: inline-block;\n               white-space: nowrap;\n            }\n\n            .filter-icon {\n               float: right;\n               padding: 0;\n               border: none;\n            }\n\n            .sp-replacer {\n               float: right;\n               padding: 0;\n               border: none;\n\n               .sp-preview {\n                  margin-right: 0;\n                  border: none;\n               }\n\n               .sp-dd {\n                  display: none;\n               }\n            }\n\n            &.group_users {\n               .toggle {\n                  width: 14px;\n                  height: 14px;\n                  margin: 0 4px 2px 0;\n                  vertical-align: middle;\n\n                  &::before {\n                     font: var(--fa-font-solid);\n                     content: \"\\f0fe\";\n                  }\n               }\n\n               &.expanded .toggle {\n                  &::before {\n                     font: var(--fa-font-solid);\n                     content: \"\\f146\";\n                  }\n               }\n\n               ul.group_listofusers {\n                  border-left: 1px dashed #D4D4D4;\n                  margin: 6px 0 0 6px;\n                  padding: 0;\n                  display: none;\n                  width: 100%;\n               }\n\n               &.expanded ul.group_listofusers {\n                  display: block;\n\n                  > li label {\n                     width: 162px;\n                  }\n               }\n            }\n\n            .color_input {\n               float: right;\n               margin-right: 2px;\n\n               input {\n                  border: 0 !important;\n                  background-color: transparent !important;\n               }\n            }\n         }\n      }\n\n      .planning_link {\n         text-align: center;\n         display: block;\n      }\n\n      .planning_add_filter {\n         float: right;\n         margin-right: 3px;\n      }\n\n      .filter_option {\n         width: 12px;\n         height: 12px;\n         margin: 3px 2px;\n         display: inline-block;\n         position: relative;\n         left: 0;\n\n         > img {\n            z-index: 1;\n         }\n\n         ul {\n            display: none;\n            width: 140px;\n\n            li {\n               white-space: normal;\n            }\n         }\n      }\n   }\n\n   #planning {\n      flex-grow: 1;\n      min-height: calc(100vh - 160px);\n\n      .fc-time-grid-event {\n         // TODO check new version,\n         // Fullcalendar 2.4.0 seems to have removed this property\n         overflow: hidden;\n      }\n\n      .end-of-day {\n         border-right: 1px solid #bdbdbd;\n      }\n\n      .fc-toolbar h2 {\n         font-size: 1.2em;\n\n      }\n\n      .event_today {\n         background: #fcf8e3;\n      }\n\n      .fc-event {\n         font-weight: normal;\n         display: block;\n\n         .fc-content {\n            margin-right: 8px;\n         }\n\n         .fc-time {\n            overflow: hidden;\n         }\n\n         .fc-title {\n            font-weight: bold;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n         }\n\n         .content {\n            font-weight: normal;\n            padding: 0 7px 0 2px;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            margin: 0;\n            display: block;\n\n            .event-description {\n               border-top: 1px solid rgba(0, 0, 0, 0.2);\n               margin-top: 2px;\n               padding-top: 2px;\n\n               p {\n                  margin: 0;\n               }\n            }\n         }\n\n         .event_type {\n            position: absolute;\n            width: 7px;\n            bottom: 0;\n            top: 0;\n            right: 0;\n         }\n      }\n\n      .fc-timeline {\n         .fc-event {\n            .content {\n               max-height: 25px;\n            }\n         }\n      }\n\n      .fc-list-item-title .event_type {\n         height: 12px;\n         width: 6px;\n         margin-right: 3px;\n         display: inline-block;\n      }\n\n      .event_past .fc-list-item-title .event_type {\n         opacity: .5;\n      }\n\n      .planning-select-helper {\n         border: 2px solid #3B8CBE;\n         background-color: rgba(59, 140, 190, 0.5);\n      }\n\n      .fc-day-grid-event .fc-resizer {\n         width: 10px;\n      }\n\n      .fc-time-grid-event .fc-resizer {\n         height: 10px;\n      }\n\n      .fc-divider {\n         border: 1px dashed #cccccc;\n      }\n\n      .fc-list-empty-wrap2 {\n         position: initial;\n      }\n   }\n\n}\n\n.planning_on_central {\n   .fc-head {\n      display: none;\n   }\n\n   .fc-scroller {\n      height: auto !important;\n      max-height: 400px;\n   }\n}\n\n/* for checkavailable */\n\n.planning {\n   text-align: center;\n   border: 1px dashed #cccccc;\n   background-color: #d7d7d2;\n   font-size: 9px;\n\n   &:hover {\n      border: 1px solid #999999;\n      background-color: white;\n   }\n}\n\n.available {\n   background-color: green;\n}\n\n.notavailable {\n   background-color: red;\n}\n\n.partialavailableend {\n   background-image: -webkit-linear-gradient(left, red 50%, green 0%);\n   background-image: -moz-linear-gradient(left, red 50%, green 0%);\n   background-image: -ms-linear-gradient(left, red 50%, green 0%);\n   background-image: -o-linear-gradient(left, red 50%, green 0%);\n   background-image: linear-gradient(left, red 50%, green 0%);\n}\n\n.partialavailablebegin {\n   background-image: -webkit-linear-gradient(left, green 50%, red 0%);\n   background-image: -moz-linear-gradient(left, green 50%, red 0%);\n   background-image: -ms-linear-gradient(left, green 50%, red 0%);\n   background-image: -o-linear-gradient(left, green 50%, red 0%);\n   background-image: linear-gradient(left, green 50%, red 0%);\n}\n\n.planning-context-menu {\n   list-style: none;\n   margin: 0;\n   padding: 0;\n   position:fixed;\n   z-index:20000;\n   background-color: #FFF;\n   box-shadow: 0 10px 20px rgba(0,0,0,0.19),\n               0 6px 6px rgba(0,0,0,0.23);\n\n   li {\n      padding: 8px 10px;\n      cursor: pointer;\n\n      i.fas,\n      i.fa-solid,\n      i.far,\n      i.fa-regular {\n         margin-right: 5px;\n         color: #555\n      }\n\n      &:hover {\n         background-color: #CCC;\n      }\n   }\n}\n\n@media screen and (max-width:767px) {\n   .fc-toolbar.fc-header-toolbar {\n      flex-direction:column;\n   }\n\n   .fc-toolbar-chunk {\n      display: table-row;\n      text-align:center;\n      padding:5px 0;\n   }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n    define('GLPI_ROOT', dirname(__FILE__, 2));\n}\n\n// Notice problem  for date function :\n$tz = ini_get('date.timezone');\nif (!empty($tz)) {\n    date_default_timezone_set($tz);\n} else {\n    date_default_timezone_set(@date_default_timezone_get());\n}\n\ninclude_once(GLPI_ROOT . \"/inc/autoload.function.php\");\n\n(function () {\n   // Define GLPI_* constants that can be customized by admin.\n   //\n   // Use a self-invoking anonymous function to:\n   // - prevent any global variables/functions definition from `local_define.php` and `downstream.php` files;\n   // - prevent any global variables definition from current function logic.\n\n    $constants = [\n      // Constants related to system paths\n        'GLPI_CONFIG_DIR'      => GLPI_ROOT . '/config', // Path for configuration files (db, security key, ...)\n        'GLPI_VAR_DIR'         => GLPI_ROOT . '/files',  // Path for all files\n        'GLPI_MARKETPLACE_DIR' => GLPI_ROOT . '/marketplace', // Path for marketplace plugins\n        'GLPI_DOC_DIR'         => '{GLPI_VAR_DIR}', // Path for documents storage\n        'GLPI_CACHE_DIR'       => '{GLPI_VAR_DIR}/_cache', // Path for cache\n        'GLPI_CRON_DIR'        => '{GLPI_VAR_DIR}/_cron', // Path for cron storage\n        'GLPI_DUMP_DIR'        => '{GLPI_VAR_DIR}/_dumps', // Path for backup dump\n        'GLPI_GRAPH_DIR'       => '{GLPI_VAR_DIR}/_graphs', // Path for graph storage\n        'GLPI_LOCAL_I18N_DIR'  => '{GLPI_VAR_DIR}/_locales', // Path for local i18n files\n        'GLPI_LOCK_DIR'        => '{GLPI_VAR_DIR}/_lock', // Path for lock files storage (used by cron)\n        'GLPI_LOG_DIR'         => '{GLPI_VAR_DIR}/_log', // Path for log storage\n        'GLPI_PICTURE_DIR'     => '{GLPI_VAR_DIR}/_pictures', // Path for picture storage\n        'GLPI_PLUGIN_DOC_DIR'  => '{GLPI_VAR_DIR}/_plugins', // Path for plugins documents storage\n        'GLPI_RSS_DIR'         => '{GLPI_VAR_DIR}/_rss', // Path for rss storage\n        'GLPI_SESSION_DIR'     => '{GLPI_VAR_DIR}/_sessions', // Path for sessions storage\n        'GLPI_TMP_DIR'         => '{GLPI_VAR_DIR}/_tmp', // Path for temp storage\n        'GLPI_UPLOAD_DIR'      => '{GLPI_VAR_DIR}/_uploads', // Path for upload storage\n        \"GLPI_INVENTORY_DIR\"   => '{GLPI_VAR_DIR}/_inventories', //Path for inventories\n\n      // Security constants\n        'GLPI_USE_CSRF_CHECK'            => '1',\n        'GLPI_CSRF_EXPIRES'              => '7200',\n        'GLPI_CSRF_MAX_TOKENS'           => '100',\n        'GLPI_USE_IDOR_CHECK'            => '1',\n        'GLPI_IDOR_EXPIRES'              => '7200',\n        'GLPI_ALLOW_IFRAME_IN_RICH_TEXT' => false,\n\n      // Constants related to GLPI Project / GLPI Network external services\n        'GLPI_TELEMETRY_URI'                => 'https://telemetry.glpi-project.org', // Telemetry project URL\n        'GLPI_INSTALL_MODE'                 => is_dir(GLPI_ROOT . '/.git') ? 'GIT' : 'TARBALL', // Install mode for telemetry\n        'GLPI_NETWORK_MAIL'                 => 'glpi@teclib.com',\n        'GLPI_NETWORK_SERVICES'             => 'https://services.glpi-network.com', // GLPI Network services project URL\n        'GLPI_NETWORK_REGISTRATION_API_URL' => '{GLPI_NETWORK_SERVICES}/api/registration/',\n        'GLPI_MARKETPLACE_PLUGINS_API_URI'  => '{GLPI_NETWORK_SERVICES}/api/glpi-plugins/',\n        'GLPI_MARKETPLACE_ALLOW_OVERRIDE'   => true, // allow marketplace to override a plugin found outside GLPI_MARKETPLACE_DIR\n        'GLPI_MARKETPLACE_MANUAL_DOWNLOADS' => true, // propose manual download link of plugins which cannot be installed/updated by marketplace\n        'GLPI_USER_AGENT_EXTRA_COMMENTS'    => '', // Extra comment to add to GLPI User-Agent\n\n      // SQL compatibility\n        'GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE' => '1', // '1' to disable ONLY_FULL_GROUP_BY 'sql_mode'\n\n      // Other constants\n        'GLPI_AJAX_DASHBOARD'         => '1',\n        'GLPI_CALDAV_IMPORT_STATE'    => 0, // external events created from a caldav client will take this state by default (0 = Planning::INFO)\n        'GLPI_DEMO_MODE'              => '0',\n        'GLPI_CENTRAL_WARNINGS'       => '1', // display (1), or not (0), warnings on GLPI Central page\n    ];\n\n   // Define constants values based on server env variables (i.e. defined using apache SetEnv directive)\n    foreach (array_keys($constants) as $name) {\n        if (!defined($name) && ($value = getenv($name)) !== false) {\n            define($name, $value);\n        }\n    }\n\n   // Define constants values from local configuration file\n    if (file_exists(GLPI_ROOT . '/config/local_define.php') && !defined('TU_USER')) {\n        require_once GLPI_ROOT . '/config/local_define.php';\n    }\n\n   // Define constants values from downstream distribution file\n    if (file_exists(GLPI_ROOT . '/inc/downstream.php')) {\n        include_once(GLPI_ROOT . '/inc/downstream.php');\n    }\n\n   // Define constants values from defaults\n   // 1. First, define constants that does not inherit from another one.\n   // 2. Second, define constants that inherits from another one.\n   // This logic is quiet simple and is not made to handle chain inheritance.\n    $inherit_pattern = '/\\{(?<name>GLPI_[\\w]+)\\}/';\n    foreach ($constants as $key => $value) {\n        if (!defined($key) && !preg_match($inherit_pattern, $value)) {\n            define($key, $value);\n        }\n    }\n    foreach ($constants as $key => $value) {\n        if (!defined($key)) {\n           // Replace {GLPI_*} by value of corresponding constant\n            $value = preg_replace_callback(\n                '/\\{(?<name>GLPI_[\\w]+)\\}/',\n                function ($matches) {\n                    return defined($matches['name']) ? constant($matches['name']) : '';\n                },\n                $value\n            );\n\n            define($key, $value);\n        }\n    }\n\n   // Where to load plugins.\n   // Order in this array is important (priority to first found).\n    if (!defined('PLUGINS_DIRECTORIES')) {\n        define('PLUGINS_DIRECTORIES', [\n            GLPI_MARKETPLACE_DIR,\n            GLPI_ROOT . '/plugins',\n        ]);\n    } else if (!is_array(PLUGINS_DIRECTORIES)) {\n        throw new \\Exception('PLUGINS_DIRECTORIES constant value must be an array');\n    }\n})();\n\ndefine('GLPI_I18N_DIR', GLPI_ROOT . \"/locales\");\n\ninclude_once(GLPI_ROOT . \"/inc/define.php\");\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\RichText\\RichText;\nuse RRule\\RRule;\nuse Sabre\\VObject\\Component\\VCalendar;\nuse Sabre\\VObject\\Component\\VEvent;\nuse Sabre\\VObject\\Component\\VTodo;\nuse Sabre\\VObject\\Property\\FlatText;\nuse Sabre\\VObject\\Property\\ICalendar\\Recur;\nuse Sabre\\VObject\\Reader;\n\n/**\n * Planning Class\n **/\nclass Planning extends CommonGLPI\n{\n    public static $rightname = 'planning';\n\n    public static $palette_bg = ['#FFEEC4', '#D4EDFB', '#E1D0E1', '#CDD7A9', '#F8C8D2',\n        '#D6CACA', '#D3D6ED', '#C8E5E3', '#FBD5BF', '#E9EBA2',\n        '#E8E5E5', '#DBECDF', '#FCE7F2', '#E9D3D3', '#D2DBDC'\n    ];\n\n    public static $palette_fg = ['#57544D', '#59707E', '#5B3B5B', '#3A431A', '#58242F',\n        '#3B2727', '#272D59', '#2E4645', '#6F4831', '#46481B',\n        '#4E4E4E', '#274C30', '#6A535F', '#473232', '#454545',\n    ];\n\n    public static $palette_ev = ['#E94A31', '#5174F2', '#51C9F2', '#FFCC29', '#20C646',\n        '#364959', '#8C5344', '#FF8100', '#F600C4', '#0017FF',\n        '#000000', '#FFFFFF', '#005800', '#925EFF'\n    ];\n\n    public static $directgroup_itemtype = ['PlanningExternalEvent', 'ProjectTask', 'TicketTask', 'ProblemTask', 'ChangeTask'];\n\n    const READMY    =    1;\n    const READGROUP = 1024;\n    const READALL   = 2048;\n\n    const INFO = 0;\n    const TODO = 1;\n    const DONE = 2;\n\n    /**\n     * @since 0.85\n     *\n     * @param $nb\n     **/\n    public static function getTypeName($nb = 0)\n    {\n        return __('Planning');\n    }\n\n\n    public static function getMenuContent()\n    {\n        $menu = [];\n\n        if (Planning::canView()) {\n            $menu = [\n                'title'    => static::getMenuName(),\n                'shortcut' => static::getMenuShorcut(),\n                'page'     => static::getSearchURL(false),\n                'icon'     => static::getIcon(),\n            ];\n\n            if ($data = static::getAdditionalMenuLinks()) {\n                $menu['links'] = $data;\n            }\n\n            if ($options = static::getAdditionalMenuOptions()) {\n                $menu['options'] = $options;\n            }\n        }\n\n        return $menu;\n    }\n\n\n    public static function getAdditionalMenuLinks()\n    {\n        global $CFG_GLPI;\n\n        $links = [];\n\n        if (Planning::canView()) {\n            $title     = Planning::getTypeName(Session::getPluralNumber());\n            $planning  = \"<i class='fa far fa-calendar-alt pointer' title='$title'>\n                        <span class='sr-only'>$title</span>\n                       </i>\";\n\n            $links[$planning] = Planning::getSearchURL(false);\n        }\n\n        if (PlanningExternalEvent::canView()) {\n            $ext_title = PlanningExternalEvent::getTypeName(Session::getPluralNumber());\n            $external  = \"<i class='fa fas fa-calendar-week pointer' title='$ext_title'>\n                        <span class='sr-only'>$ext_title</span>\n                       </i>\";\n\n            $links[$external] = PlanningExternalEvent::getSearchURL(false);\n        }\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            $caldav_title = __('CalDAV browser interface');\n            $caldav  = \"<i class='fa fas fa-sync pointer' title='$caldav_title'>\n                        <span class='sr-only'>$caldav_title</span>\n                       </i>\";\n\n            $links[$caldav] = '/caldav.php';\n        }\n\n        return $links;\n    }\n\n\n    public static function getAdditionalMenuOptions()\n    {\n        if (PlanningExternalEvent::canView()) {\n            return [\n                'external' => [\n                    'title' => PlanningExternalEvent::getTypeName(Session::getPluralNumber()),\n                    'page'  => PlanningExternalEvent::getSearchURL(false),\n                    'links' => [\n                        'add'    => '/front/planningexternalevent.form.php',\n                        'search' => '/front/planningexternalevent.php',\n                    ] + static::getAdditionalMenuLinks()\n                ]\n            ];\n        }\n        return false;\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'p';\n    }\n\n\n    /**\n     * @since 0.85\n     **/\n    public static function canView()\n    {\n\n        return Session::haveRightsOr(self::$rightname, [self::READMY, self::READGROUP,\n            self::READALL\n        ]);\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong               = [];\n        $ong['no_all_tab'] = true;\n\n        $this->addStandardTab(__CLASS__, $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            $tabs[1] = self::getTypeName();\n\n            return $tabs;\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            switch ($tabnum) {\n                case 1: // all\n                    Planning::showPlanning($_SESSION['glpiID']);\n                    break;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Get planning state name\n     *\n     * @param $value status ID\n     **/\n    public static function getState($value)\n    {\n\n        switch ($value) {\n            case static::INFO:\n                return _n('Information', 'Information', 1);\n\n            case static::TODO:\n                return __('To do');\n\n            case static::DONE:\n                return __('Done');\n        }\n    }\n\n\n    /**\n     * Dropdown of planning state\n     *\n     * @param $name   select name\n     * @param $value  default value (default '')\n     * @param $display  display of send string ? (true by default)\n     * @param $options  options\n     **/\n    public static function dropdownState($name, $value = '', $display = true, $options = [])\n    {\n\n        $values = [static::INFO => _n('Information', 'Information', 1),\n            static::TODO => __('To do'),\n            static::DONE => __('Done')\n        ];\n\n        return Dropdown::showFromArray($name, $values, array_merge(['value'   => $value,\n            'display' => $display\n        ], $options));\n    }\n\n\n    /**\n     * Check already planned user for a period\n     *\n     * @param integer $users_id user id\n     * @param string  $begin    begin date\n     * @param string  $end      end date\n     * @param array   $except   items which not be into account ['Reminder' => [1, 2, id_of_items]]\n     **/\n    public static function checkAlreadyPlanned($users_id, $begin, $end, $except = [])\n    {\n        global $CFG_GLPI;\n\n        $planned = false;\n        $message = '';\n\n        foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n            $item = new $itemtype();\n            $data = $item->populatePlanning([\n                'who'           => $users_id,\n                'whogroup'      => 0,\n                'begin'         => $begin,\n                'end'           => $end,\n                'check_planned' => true\n            ]);\n            if (isPluginItemType($itemtype)) {\n                if (isset($data['items'])) {\n                    $data = $data['items'];\n                } else {\n                    $data = [];\n                }\n            }\n\n            if (\n                count($data)\n                && method_exists($itemtype, 'getAlreadyPlannedInformation')\n            ) {\n                foreach ($data as $val) {\n                    if (\n                        !isset($except[$itemtype])\n                        || (is_array($except[$itemtype]) && !in_array($val['id'], $except[$itemtype]))\n                    ) {\n                         $planned  = true;\n                         $message .= '- ' . $item->getAlreadyPlannedInformation($val);\n                         $message .= '<br/>';\n                    }\n                }\n            }\n        }\n        if ($planned) {\n            $user = new User();\n            $user->getFromDB($users_id);\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('The user %1$s is busy at the selected timeframe.'),\n                    '<a href=\"' . $user->getFormURLWithID($users_id) . '\">' . $user->getName() . '</a>'\n                ) . '<br/>' . $message,\n                false,\n                WARNING\n            );\n        }\n        return $planned;\n    }\n\n\n    /**\n     * Show the availability of a user\n     *\n     * @since 0.83\n     *\n     * @param $params   array of params\n     *    must contain :\n     *          - begin: begin date to check (default '')\n     *          - end: end date to check (default '')\n     *          - itemtype : User or Object type (Ticket...)\n     *          - foreign key field of the itemtype to define which item to used\n     *    optional :\n     *          - limitto : limit display to a specific user\n     *\n     * @return void\n     **/\n    public static function checkAvailability($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (!isset($params['itemtype'])) {\n            return false;\n        }\n        if (!($item = getItemForItemtype($params['itemtype']))) {\n            return false;\n        }\n        if (\n            !isset($params[$item->getForeignKeyField()])\n            || !$item->getFromDB($params[$item->getForeignKeyField()])\n        ) {\n            return false;\n        }\n       // No limit by default\n        if (!isset($params['limitto'])) {\n            $params['limitto'] = 0;\n        }\n        if (isset($params['begin']) && !empty($params['begin'])) {\n            $begin = $params['begin'];\n        } else {\n            $begin = date(\"Y-m-d\");\n        }\n        if (isset($params['end']) && !empty($params['end'])) {\n            $end = $params['end'];\n        } else {\n            $end = date(\"Y-m-d\");\n        }\n\n        if ($end < $begin) {\n            $end = $begin;\n        }\n        $realbegin = $begin . \" \" . $CFG_GLPI[\"planning_begin\"];\n        $realend   = $end . \" \" . $CFG_GLPI[\"planning_end\"];\n        if ($CFG_GLPI[\"planning_end\"] == \"24:00\") {\n            $realend = $end . \" 23:59:59\";\n        }\n\n        $users = [];\n\n        switch ($item->getType()) {\n            case 'User':\n                $users[$item->getID()] = $item->getName();\n                break;\n\n            default:\n                if (is_a($item, 'CommonITILObject', true)) {\n                    foreach ($item->getUsers(CommonITILActor::ASSIGN) as $data) {\n                        $users[$data['users_id']] = getUserName($data['users_id']);\n                    }\n                    foreach ($item->getGroups(CommonITILActor::ASSIGN) as $data) {\n                        foreach (Group_User::getGroupUsers($data['groups_id']) as $data2) {\n                            $users[$data2['id']] = formatUserName(\n                                $data2[\"id\"],\n                                $data2[\"name\"],\n                                $data2[\"realname\"],\n                                $data2[\"firstname\"]\n                            );\n                        }\n                    }\n                }\n                if ($itemtype = 'Ticket') {\n                    $task = new TicketTask();\n                } else if ($itemtype = 'Problem') {\n                    $task = new ProblemTask();\n                }\n                if ($task->getFromDBByCrit(['tickets_id' => $item->fields['id']])) {\n                    $users['users_id'] = getUserName($task->fields['users_id_tech']);\n                    $group_id = $task->fields['groups_id_tech'];\n                    if ($group_id) {\n                        foreach (Group_User::getGroupUsers($group_id) as $data2) {\n                             $users[$data2['id']] = formatUserName(\n                                 $data2[\"id\"],\n                                 $data2[\"name\"],\n                                 $data2[\"realname\"],\n                                 $data2[\"firstname\"]\n                             );\n                        }\n                    }\n                }\n                break;\n        }\n        asort($users);\n       // Use get method to check availability\n        echo \"<div class='center'><form method='GET' name='form' action='planning.php'>\\n\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        $colspan = 5;\n        if (count($users) > 1) {\n            $colspan++;\n        }\n        echo \"<tr class='tab_bg_1'><th colspan='$colspan'>\" . __('Availability') . \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Start') . \"</td>\\n\";\n        echo \"<td>\";\n        Html::showDateField(\"begin\", ['value'      => $begin,\n            'maybeempty' => false\n        ]);\n        echo \"</td>\\n\";\n        echo \"<td>\" . __('End') . \"</td>\\n\";\n        echo \"<td>\";\n        Html::showDateField(\"end\", ['value'      => $end,\n            'maybeempty' => false\n        ]);\n        echo \"</td>\\n\";\n        if (count($users) > 1) {\n            echo \"<td width='40%'>\";\n            $data = [0 => __('All')];\n            $data += $users;\n            Dropdown::showFromArray('limitto', $data, ['width' => '100%',\n                'value' => $params['limitto']\n            ]);\n            echo \"</td>\";\n        }\n\n        echo \"<td class='center'>\";\n        echo \"<input type='hidden' name='\" . $item->getForeignKeyField() . \"' value=\\\"\" . $item->getID() . \"\\\">\";\n        echo \"<input type='hidden' name='itemtype' value=\\\"\" . $item->getType() . \"\\\">\";\n        echo \"<input type='submit' class='btn btn-primary' name='checkavailability' value=\\\"\" .\n             _sx('button', 'Search') . \"\\\">\";\n        echo \"</td>\\n\";\n\n        echo \"</tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\\n\";\n\n        if (($params['limitto'] > 0) && isset($users[$params['limitto']])) {\n            $displayuser[$params['limitto']] = $users[$params['limitto']];\n        } else {\n            $displayuser = $users;\n        }\n\n        if (count($displayuser)) {\n            foreach ($displayuser as $who => $whoname) {\n                $params = [\n                    'who'       => $who,\n                    'whogroup'  => 0,\n                    'begin'     => $realbegin,\n                    'end'       => $realend\n                ];\n\n                $interv = [];\n                foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n                    $interv = array_merge($interv, $itemtype::populatePlanning($params));\n                    if (method_exists($itemtype, 'populateNotPlanned')) {\n                        $interv = array_merge($interv, $itemtype::populateNotPlanned($params));\n                    }\n                }\n\n               // Print Headers\n                echo \"<br><div class='center'><table class='tab_cadre_fixe'>\";\n                $colnumber  = 1;\n                $plan_begin = explode(\":\", $CFG_GLPI[\"planning_begin\"]);\n                $plan_end   = explode(\":\", $CFG_GLPI[\"planning_end\"]);\n                $begin_hour = intval($plan_begin[0]);\n                $end_hour   = intval($plan_end[0]);\n                if ($plan_end[1] != 0) {\n                    $end_hour++;\n                }\n                $colsize    = floor((100 - 15) / ($end_hour - $begin_hour));\n                $timeheader = '';\n                for ($i = $begin_hour; $i < $end_hour; $i++) {\n                    $from       = ($i < 10 ? '0' : '') . $i;\n                    $timeheader .= \"<th width='$colsize%' colspan='4'>\" . $from . \":00</th>\";\n                    $colnumber += 4;\n                }\n\n               // Print Headers\n                echo \"<tr class='tab_bg_1'><th colspan='$colnumber'>\";\n                echo $whoname;\n                echo \"</th></tr>\";\n                echo \"<tr class='tab_bg_1'><th width='15%'>&nbsp;</th>\";\n                echo $timeheader;\n                echo \"</tr>\";\n\n                $day_begin = strtotime($realbegin);\n                $day_end   = strtotime($realend);\n\n                for ($time = $day_begin; $time < $day_end; $time += DAY_TIMESTAMP) {\n                    $current_day   = date('Y-m-d', $time);\n                    echo \"<tr><th>\" . Html::convDate($current_day) . \"</th>\";\n                    $begin_quarter = $begin_hour * 4;\n                    $end_quarter   = $end_hour * 4;\n                    for ($i = $begin_quarter; $i < $end_quarter; $i++) {\n                        $begin_time = date(\"Y-m-d H:i:s\", strtotime($current_day) + ($i) * HOUR_TIMESTAMP / 4);\n                        $end_time   = date(\"Y-m-d H:i:s\", strtotime($current_day) + ($i + 1) * HOUR_TIMESTAMP / 4);\n                       // Init activity interval\n                        $begin_act  = $end_time;\n                        $end_act    = $begin_time;\n\n                        reset($interv);\n                        while ($data = current($interv)) {\n                            if (\n                                ($data[\"begin\"] >= $begin_time)\n                                && ($data[\"end\"] <= $end_time)\n                            ) {\n                             // In\n                                if ($begin_act > $data[\"begin\"]) {\n                                    $begin_act = $data[\"begin\"];\n                                }\n                                if ($end_act < $data[\"end\"]) {\n                                    $end_act = $data[\"end\"];\n                                }\n                                unset($interv[key($interv)]);\n                            } else if (\n                                ($data[\"begin\"] < $begin_time)\n                                 && ($data[\"end\"] > $end_time)\n                            ) {\n                            // Through\n                                $begin_act = $begin_time;\n                                $end_act   = $end_time;\n                                next($interv);\n                            } else if (\n                                ($data[\"begin\"] >= $begin_time)\n                                 && ($data[\"begin\"] < $end_time)\n                            ) {\n                            // Begin\n                                if ($begin_act > $data[\"begin\"]) {\n                                    $begin_act = $data[\"begin\"];\n                                }\n                                $end_act = $end_time;\n                                next($interv);\n                            } else if (\n                                ($data[\"end\"] > $begin_time)\n                                 && ($data[\"end\"] <= $end_time)\n                            ) {\n                            //End\n                                $begin_act = $begin_time;\n                                if ($end_act < $data[\"end\"]) {\n                                    $end_act = $data[\"end\"];\n                                }\n                                unset($interv[key($interv)]);\n                            } else { // Defautl case\n                                next($interv);\n                            }\n                        }\n                        if ($begin_act < $end_act) {\n                            if (\n                                ($begin_act <= $begin_time)\n                                && ($end_act >= $end_time)\n                            ) {\n                               // Activity in quarter\n                                echo \"<td class='notavailable'>&nbsp;</td>\";\n                            } else {\n                             // Not all the quarter\n                                if ($begin_act <= $begin_time) {\n                                    echo \"<td class='partialavailableend'>&nbsp;</td>\";\n                                } else {\n                                    echo \"<td class='partialavailablebegin'>&nbsp;</td>\";\n                                }\n                            }\n                        } else {\n                           // No activity\n                            echo \"<td class='available'>&nbsp;</td>\";\n                        }\n                    }\n                    echo \"</tr>\";\n                }\n                echo \"<tr class='tab_bg_1'><td colspan='$colnumber'>&nbsp;</td></tr>\";\n                echo \"</table></div>\";\n            }\n        }\n        echo \"<div><table class='tab_cadre'>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th>\" . __('Caption') . \"</th>\";\n        echo \"<td class='available' colspan=8>\" . __('Available') . \"</td>\";\n        echo \"<td class='notavailable' colspan=8>\" . __('Unavailable') . \"</td>\";\n        echo \"</tr>\";\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Show the planning\n     *\n     * Function name change since version 0.84 show() => showPlanning\n     * Function prototype changes in 9.1 (no more parameters)\n     *\n     * @return void\n     **/\n    public static function showPlanning($fullview = true)\n    {\n        if (!static::canView()) {\n            return false;\n        }\n\n        self::initSessionForCurrentUser();\n\n       // scheduler feature key\n       // schedular part of fullcalendar is distributed with opensource licence (GLPv3)\n       // but this licence is incompatible with GLPI (GPLv2)\n       // see https://fullcalendar.io/license\n        $scheduler_key = Plugin::doHookFunction('planning_scheduler_key');\n\n        echo \"<div\" . ($fullview ? \" id='planning_container'\" : \"\") . \" class='d-flex flex-wrap flex-sm-nowrap'>\";\n\n       // define options for current page\n        $rand = '';\n        if ($fullview) {\n           // full planning view (Assistance > Planning)\n            Planning::showPlanningFilter();\n            $options = [\n                'full_view'    => true,\n                'default_view' => $_SESSION['glpi_plannings']['lastview'] ?? 'timeGridWeek',\n                'license_key'  => $scheduler_key,\n                'resources'    => self::getTimelineResources(),\n                'now'          => date(\"Y-m-d H:i:s\"),\n                'can_create'   => PlanningExternalEvent::canCreate(),\n                'can_delete'   => PlanningExternalEvent::canDelete(),\n            ];\n        } else {\n           // short view (on Central page)\n            $rand    = rand();\n            $options = [\n                'full_view'    => false,\n                'default_view' => 'listFull',\n                'header'       => false,\n                'height'       => 'auto',\n                'rand'         => $rand,\n                'now'          => date(\"Y-m-d H:i:s\"),\n            ];\n        }\n\n       // display planning (and call js from js/planning.js)\n        echo \"<div id='planning$rand' class='flex-fill'></div>\";\n        echo \"</div>\";\n\n        echo Html::scriptBlock(\"$(function() {\n         GLPIPlanning.display(\" . json_encode($options) . \");\n         GLPIPlanning.planningFilters();\n      });\");\n\n        return;\n    }\n\n    public static function getTimelineResources()\n    {\n        $resources = [];\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning_id => $planning) {\n            if ($planning['type'] == 'external') {\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $planning['name'],\n                    'group_id'   => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => null,\n                    'items_id'   => null\n                ];\n                continue; // Ignore external calendars\n            }\n\n            $exploded = explode('_', $planning_id);\n            if ($planning['type'] == 'group_users') {\n                $group_exploded = explode('_', $planning_id);\n                $group_id = (int) $group_exploded[1];\n                $group = new Group();\n                $group->getFromDB($group_id);\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $group->getName(),\n                    'eventAllow' => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => 'Group_User',\n                    'items_id'   => $group_id\n                ];\n                foreach (array_keys($planning['users']) as $planning_id_user) {\n                    $child_exploded = explode('_', $planning_id_user);\n                    $user = new User();\n                    $users_id = (int) $child_exploded[1];\n                    $user->getFromDB($users_id);\n                    $planning_id_user = \"gu_\" . $planning_id_user;\n                    $resources[] = [\n                        'id'         => $planning_id_user,\n                        'title'      => $user->getName(),\n                        'is_visible' => $planning['display'],\n                        'itemtype'   => 'User',\n                        'items_id'   => $users_id,\n                        'parentId'   => $planning_id,\n                    ];\n                }\n            } else {\n                $itemtype   = $exploded[0];\n                $object = new $itemtype();\n                $users_id = (int) $exploded[1];\n                $object->getFromDB($users_id);\n\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $object->getName(),\n                    'group_id'   => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => $itemtype,\n                    'items_id'   => $users_id\n                ];\n            }\n        }\n\n        return $resources;\n    }\n\n    /**\n     * Return a palette array (for example self::$palette_bg)\n     * @param  string $palette_name  the short name for palette (bg, fg, ev)\n     * @return mixed                 the palette array or false\n     *\n     * @since  9.1.1\n     */\n    public static function getPalette($palette_name = 'bg')\n    {\n        if (in_array($palette_name, ['bg', 'fg', 'ev'])) {\n            return self::${\"palette_$palette_name\"};\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Return an hexa color from a palette\n     * @param  string  $palette_name the short name for palette (bg, fg, ev)\n     * @param  integer $color_index  The color index in this palette\n     * @return mixed                 the color in hexa (ex: #FFFFFF) or false\n     *\n     * @since  9.1.1\n     */\n    public static function getPaletteColor($palette_name = 'bg', $color_index = 0)\n    {\n        if ($palette = self::getPalette($palette_name)) {\n            if ($color_index >= count($palette)) {\n                $color_index = $color_index % count($palette);\n            }\n\n            return $palette[$color_index];\n        }\n\n        return false;\n    }\n\n    public static function getPlanningTypes()\n    {\n        global $CFG_GLPI;\n\n        return array_merge(\n            $CFG_GLPI['planning_types'],\n            ['NotPlanned', 'OnlyBgEvents']\n        );\n    }\n\n    /**\n     * Init $_SESSION['glpi_plannings'] var with thses keys :\n     *  - 'filters' : type of planning available (ChangeTask, Reminder, etc)\n     *  - 'plannings' : all plannings definided for current user.\n     *\n     * If currently logged user, has no plannings or filter, this function wiil init them\n     *\n     * Also manage color index in $_SESSION['glpi_plannings_color_index']\n     *\n     * @return void\n     */\n    public static function initSessionForCurrentUser()\n    {\n       // new user in planning, init session\n        if (!isset($_SESSION['glpi_plannings']['filters'])) {\n            $_SESSION['glpi_plannings']['filters']   = [];\n            $_SESSION['glpi_plannings']['plannings'] = ['user_' . $_SESSION['glpiID'] => [\n                'color'   => self::getPaletteColor('bg', 0),\n                'display' => true,\n                'type'    => 'user'\n            ]\n            ];\n        }\n\n       // complete missing filters\n        $filters = &$_SESSION['glpi_plannings']['filters'];\n        $index_color = 0;\n        foreach (self::getPlanningTypes() as $planning_type) {\n            if (in_array($planning_type, ['NotPlanned', 'OnlyBgEvents']) || $planning_type::canView()) {\n                if (!isset($filters[$planning_type])) {\n                    $filters[$planning_type] = [\n                        'color'   => self::getPaletteColor('ev', $index_color),\n                        'display' => !in_array($planning_type, ['NotPlanned', 'OnlyBgEvents']),\n                        'type'    => 'event_filter'\n                    ];\n                }\n                $index_color++;\n            }\n        }\n\n       // compute color index for plannings\n        $_SESSION['glpi_plannings_color_index'] = 0;\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning) {\n            if ($planning['type'] == 'group_users') {\n                $_SESSION['glpi_plannings_color_index'] += count($planning['users']);\n            } else {\n                $_SESSION['glpi_plannings_color_index']++;\n            }\n        }\n    }\n\n\n    /**\n     * Display left part of planning who contains filters and planning with delete/toggle buttons\n     * and color choosing.\n     * Call self::showSingleLinePlanningFilter for each filters and plannings\n     *\n     * @return void\n     */\n    public static function showPlanningFilter()\n    {\n        global $CFG_GLPI;\n\n        $headings = ['filters'    => __(\"Events type\"),\n            'plannings'  => __('Plannings')\n        ];\n\n        echo \"<div id='planning_filter'>\";\n\n        echo \"<div id='planning_filter_toggle'>\";\n        echo \"<a class='toggle pointer' title='\" . __s(\"Toggle filters\") . \"'></a>\";\n        echo \"</div>\";\n\n        echo \"<div id='planning_filter_content'>\";\n        foreach ($_SESSION['glpi_plannings'] as $filter_heading => $filters) {\n            if (!in_array($filter_heading, array_keys($headings))) {\n                continue;\n            }\n\n            echo \"<div>\";\n            echo \"<h3>\";\n            echo $headings[$filter_heading];\n            if ($filter_heading == \"plannings\") {\n                echo \"<a class='planning_link planning_add_filter' href='\" . $CFG_GLPI['root_doc'] .\n                '/ajax/planning.php?action=add_planning_form' . \"'>\";\n                echo \"<i class='fas fa-plus-circle'></i>\";\n                echo \"</a>\";\n            }\n            echo \"</h3>\";\n            echo \"<ul class='filters'>\";\n            foreach ($filters as $filter_key => $filter_data) {\n                self::showSingleLinePlanningFilter(\n                    $filter_key,\n                    $filter_data,\n                    ['filter_color_index' => 0]\n                );\n            }\n            echo \"</ul>\";\n            echo \"</div>\";\n        }\n        echo \"</div>\"; // #planning_filter_content\n        echo \"</div>\"; // #planning_filter\n    }\n\n\n    /**\n     * Display a single line of planning filter.\n     * See self::showPlanningFilter function\n     *\n     * @param $filter_key  : identify curent line of filter\n     * @param $filter_data : array of filter date, must contains :\n     *   * 'show_delete' (boolean): show delete button\n     *   * 'filter_color_index' (integer): index of the color to use in self::$palette_bg\n     * @param $options\n     *\n     * @return void\n     */\n    public static function showSingleLinePlanningFilter($filter_key, $filter_data, $options = [])\n    {\n        global $CFG_GLPI;\n\n       // Invalid data, skip\n        if (!isset($filter_data['type'])) {\n            return;\n        }\n\n        $params['show_delete']        = true;\n        $params['filter_color_index'] = 0;\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $params[$key] = $val;\n            }\n        }\n\n        $actor = explode('_', $filter_key);\n        $uID = 0;\n        $gID = 0;\n        $expanded = '';\n        if ($filter_data['type'] == 'user') {\n            $uID = $actor[1];\n            $user = new User();\n            $user->getFromDB($actor[1]);\n            $title = $user->getName();\n        } else if ($filter_data['type'] == 'group_users') {\n            $group = new Group();\n            $group->getFromDB($actor[1]);\n            $title = $group->getName();\n            $enabled = $disabled = 0;\n            foreach ($filter_data['users'] as $user) {\n                if ($user['display']) {\n                    $enabled++;\n                } else {\n                    $disabled++;\n                    $filter_data['display'] = false;\n                }\n            }\n            if ($enabled > 0 && $disabled > 0) {\n                $expanded = ' expanded';\n            }\n        } else if ($filter_data['type'] == 'group') {\n            $gID = $actor[1];\n            $group = new Group();\n            $group->getFromDB($actor[1]);\n            $title = $group->getName();\n        } else if ($filter_data['type'] == 'external') {\n            $title = $filter_data['name'];\n        } else if ($filter_data['type'] == 'event_filter') {\n            if ($filter_key == 'NotPlanned') {\n                $title = __('Not planned tasks');\n            } else if ($filter_key == 'OnlyBgEvents') {\n                $title = __('Only background events');\n            } else {\n                if (!getItemForItemtype($filter_key)) {\n                    return false;\n                } else if (!$filter_key::canView()) {\n                    return false;\n                }\n                $title = $filter_key::getTypeName();\n            }\n        }\n\n        echo \"<li event_type='\" . $filter_data['type'] . \"'\n               event_name='$filter_key'\n               class='\" . $filter_data['type'] . $expanded . \"'>\";\n        Html::showCheckbox([\n            'name'          => 'filters[]',\n            'value'         => $filter_key,\n            'id'            => $filter_key,\n            'title'         => $title,\n            'checked'       => $filter_data['display']\n        ]);\n\n        if ($filter_data['type'] != 'event_filter') {\n            $exploded = explode('_', $filter_data['type']);\n            $icon = \"user\";\n            if ($exploded[0] === 'group') {\n                $icon = \"users\";\n            }\n            echo \"<i class='actor_icon fa fa-fw fa-$icon'></i>\";\n        }\n\n        echo \"<label for='$filter_key'>$title</label>\";\n\n        $color = self::$palette_bg[$params['filter_color_index']];\n        if (isset($filter_data['color']) && !empty($filter_data['color'])) {\n            $color = $filter_data['color'];\n        } else {\n            $params['filter_color_index']++;\n            $color = self::getPaletteColor('bg', $params['filter_color_index']);\n        }\n\n        echo \"<span class='ms-auto d-flex align-items-center'>\";\n       // colors not for groups\n        if ($filter_data['type'] != 'group_users' && $filter_key != 'OnlyBgEvents') {\n            echo \"<span class='color_input'>\";\n            Html::showColorField(\n                $filter_key . \"_color\",\n                ['value' => $color]\n            );\n            echo \"</span>\";\n        }\n\n        if ($filter_data['type'] == 'group_users') {\n            echo \"<span class='toggle pointer'></span>\";\n        }\n\n        if ($filter_data['type'] != 'event_filter') {\n            echo \"<span class='filter_option dropstart'>\";\n            echo \"<i class='fas fa-ellipsis-v'></i>\";\n            echo \"<ul class='dropdown-menu '>\";\n            if ($params['show_delete']) {\n                echo \"<li class='delete_planning dropdown-item' value='$filter_key'>\" . __(\"Delete\") . \"</li>\";\n            }\n            if ($filter_data['type'] != 'group_users' && $filter_data['type'] != 'external') {\n                $url = parse_url($CFG_GLPI[\"url_base\"]);\n                $port = 80;\n                if (isset($url['port'])) {\n                    $port = $url['port'];\n                } else if (isset($url['scheme']) && ($url[\"scheme\"] == 'https')) {\n                    $port = 443;\n                }\n\n                $loginUser = new User();\n                $loginUser->getFromDB(Session::getLoginUserID(true));\n                $cal_url = \"/front/planning.php?genical=1&uID=\" . $uID . \"&gID=\" . $gID .\n                       //\"&limititemtype=$limititemtype\".\n                       \"&entities_id=\" . $_SESSION[\"glpiactive_entity\"] .\n                       \"&is_recursive=\" . $_SESSION[\"glpiactive_entity_recursive\"] .\n                       \"&token=\" . $loginUser->getAuthToken();\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='\" . $CFG_GLPI[\"root_doc\"] . \"$cal_url'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"Ical\") . \"</a></li>\";\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='webcal://\" . $url['host'] . \":$port\" .\n                 (isset($url['path']) ? $url['path'] : '') . \"$cal_url'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"Webcal\") . \"</a></li>\";\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='\" . $CFG_GLPI['root_doc'] .\n                 \"/front/planningcsv.php?uID=\" . $uID . \"&gID=\" . $gID . \"'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"CSV\") . \"</a></li>\";\n\n                $caldav_url = $CFG_GLPI['url_base']\n                . '/caldav.php/'\n                . self::getCaldavBaseCalendarUrl($filter_data['type'] == 'user' ? $user : $group);\n                $copy_js = 'copyTextToClipboard(\"' . $caldav_url . '\");'\n                . ' alert(\"' . __s('CalDAV URL has been copied to clipboard') . '\");'\n                . ' return false;';\n                echo \"<li class='dropdown-item'><a target='_blank' href='#'\n                 onclick='$copy_js'>\" .\n                 __s(\"Copy CalDAV URL to clipboard\") . \"</a></li>\";\n            }\n            echo \"</ul>\";\n            echo \"</span>\";\n        }\n        echo \"</span>\";\n\n        if ($filter_data['type'] == 'group_users') {\n            echo \"<ul class='group_listofusers filters'>\";\n            foreach ($filter_data['users'] as $user_key => $userdata) {\n                self::showSingleLinePlanningFilter(\n                    $user_key,\n                    $userdata,\n                    ['show_delete'        => false,\n                        'filter_color_index' => $params['filter_color_index']\n                    ]\n                );\n            }\n            echo \"</ul>\";\n        }\n\n        echo \"</li>\";\n    }\n\n\n    /**\n     * Display ajax form to add actor on planning\n     *\n     * @return void\n     */\n    public static function showAddPlanningForm()\n    {\n        global $CFG_GLPI;\n\n        $rand = mt_rand();\n        echo \"<form action='\" . self::getFormURL() . \"'>\";\n        echo __(\"Actor\") . \": <br>\";\n\n        $planning_types = ['user' => User::getTypeName(1)];\n\n        if (Session::haveRightsOr('planning', [self::READGROUP, self::READALL])) {\n            $planning_types['group_users'] = __('All users of a group');\n            $planning_types['group']       = Group::getTypeName(1);\n        }\n\n        $planning_types['external'] = __('External calendar');\n\n        Dropdown::showFromArray(\n            'planning_type',\n            $planning_types,\n            ['display_emptychoice' => true,\n                'rand'                =>  $rand\n            ]\n        );\n        echo Html::scriptBlock(\"\n      $(function() {\n         $('#dropdown_planning_type$rand').on( 'change', function( e ) {\n            var planning_type = $(this).val();\n            $('#add_planning_subform$rand').load('\" . $CFG_GLPI['root_doc'] . \"/ajax/planning.php',\n                                                 {action: 'add_'+planning_type+'_form'});\n         });\n      });\");\n        echo \"<br><br>\";\n        echo \"<div id='add_planning_subform$rand'></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Display 'User' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @return void\n     */\n    public static function showAddUserForm()\n    {\n        $used = [];\n        foreach (array_keys($_SESSION['glpi_plannings']) as $actor) {\n            $actor = explode(\"_\", $actor);\n            if ($actor[0] == \"user\") {\n                $used[] = $actor[1];\n            }\n        }\n        echo User::getTypeName(1) . \" :<br>\";\n\n       // show only users with right to add planning events\n        $rights = ['change', 'problem', 'reminder', 'task', 'projecttask'];\n       // Can we see only personnal planning ?\n        if (!Session::haveRightsOr('planning', [self::READALL, self::READGROUP])) {\n            $rights = 'id';\n        }\n       // Can we see user of my groups ?\n        if (\n            Session::haveRight('planning', self::READGROUP)\n            && !Session::haveRight('planning', self::READALL)\n        ) {\n            $rights = 'groups';\n        }\n\n        User::dropdown(['entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'right'       => $rights,\n            'used'        => $used\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_user_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'User' data from self::showAddPlanningForm and save them to session and DB\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddUserForm($params = [])\n    {\n        $_SESSION['glpi_plannings']['plannings'][\"user_\" . $params['users_id']]\n         = ['color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n             'display' => true,\n             'type'    => 'user'\n         ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    /**\n     * Display 'All users of a group' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @return void\n     */\n    public static function showAddGroupUsersForm()\n    {\n        echo Group::getTypeName(1) . \" : <br>\";\n\n        $condition = ['is_task' => 1];\n       // filter groups\n        if (!Session::haveRight('planning', self::READALL)) {\n            $condition['id'] = $_SESSION['glpigroups'];\n        }\n\n        Group::dropdown([\n            'entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'condition'   => $condition\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_group_users_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'All users of a group' data from self::showAddGroupUsersForm and save them to session and DB\n     *\n     * @since 9.1\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddGroupUsersForm($params = [])\n    {\n        $current_group = &$_SESSION['glpi_plannings']['plannings'][\"group_\" . $params['groups_id'] . \"_users\"];\n        $current_group = ['display' => true,\n            'type'    => 'group_users',\n            'users'   => []\n        ];\n        $users = Group_User::getGroupUsers($params['groups_id'], [\n            'glpi_users.is_active'  => 1,\n            'glpi_users.is_deleted' => 0,\n            [\n                'OR' => [\n                    ['glpi_users.begin_date' => null],\n                    ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]],\n                ],\n            ],\n            [\n                'OR' => [\n                    ['glpi_users.end_date' => null],\n                    ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]],\n                ]\n            ]\n        ]);\n\n        foreach ($users as $user_data) {\n            $current_group['users']['user_' . $user_data['id']] = [\n                'color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n                'display' => true,\n                'type'    => 'user'\n            ];\n            $_SESSION['glpi_plannings_color_index']++;\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    public static function editEventForm($params = [])\n    {\n        if (!$params['itemtype'] instanceof CommonDBTM) {\n            echo \"<div class='center'>\";\n            echo \"<a href='\" . $params['url'] . \"' class='btn btn-outline-secondary'>\" .\n                \"<i class='ti ti-eye'></i>\" .\n                \"<span>\" . __(\"View this item in his context\") . \"</span>\" .\n            \"</a>\";\n            echo \"</div>\";\n            echo \"<hr>\";\n            $rand = mt_rand();\n            $options = [\n                'from_planning_edit_ajax' => true,\n                'formoptions'             => \"id='edit_event_form$rand'\",\n                'start'                   => date(\"Y-m-d\", strtotime($params['start']))\n            ];\n            if (isset($params['parentitemtype'])) {\n                $options['parent'] = getItemForItemtype($params['parentitemtype']);\n                $options['parent']->getFromDB($params['parentid']);\n            }\n            $item = getItemForItemtype($params['itemtype']);\n            $item->getFromDB((int) $params['id']);\n            $item->showForm((int)$params['id'], $options);\n            $callback = \"glpi_close_all_dialogs();\n                      GLPIPlanning.refresh();\n                      displayAjaxMessageAfterRedirect();\";\n            Html::ajaxForm(\"#edit_event_form$rand\", $callback);\n        }\n    }\n\n\n    /**\n     * Display 'Group' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @since 9.1\n     *\n     * @return void\n     */\n    public static function showAddGroupForm()\n    {\n\n        $condition = ['is_task' => 1];\n       // filter groups\n        if (!Session::haveRight('planning', self::READALL)) {\n            $condition['id'] = $_SESSION['glpigroups'];\n        }\n\n        echo Group::getTypeName(1) . \" : <br>\";\n        Group::dropdown([\n            'entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'condition'   => $condition\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_group_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'Group' data from self::showAddGroupForm and save them to session and DB\n     *\n     * @since 9.1\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddGroupForm($params = [])\n    {\n        $_SESSION['glpi_plannings']['plannings'][\"group_\" . $params['groups_id']]\n         = ['color'   => self::getPaletteColor(\n             'bg',\n             $_SESSION['glpi_plannings_color_index']\n         ),\n             'display' => true,\n             'type'    => 'group'\n         ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    /**\n     * Display 'External' part of self::showAddPlanningForm specified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @since 9.5\n     *\n     * @return void\n     */\n    public static function showAddExternalForm()\n    {\n\n        $rand = mt_rand();\n\n        echo '<label for =\"name' . $rand . '\">' . __(\"Calendar name\") . ' : </label> ';\n        echo '<br />';\n        echo Html::input(\n            'name',\n            [\n                'value' => '',\n                'id'    => 'name' . $rand,\n            ]\n        );\n        echo '<br />';\n        echo '<br />';\n\n        echo '<label for =\"url' . $rand . '\">' . __(\"Calendar URL\") . ' : </label> ';\n        echo '<br />';\n        echo '<input type=\"url\" name=\"url\" id=\"url' . $rand . '\" required>';\n        echo '<br /><br />';\n\n        echo Html::hidden('action', ['value' => 'send_add_external_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Receive 'External' data from self::showAddExternalForm and save them to session and DB\n     *\n     * @since 9.5\n     *\n     * @param array $params Form data\n     *\n     * @return void\n     */\n    public static function sendAddExternalForm($params = [])\n    {\n        $_SESSION['glpi_plannings']['plannings']['external_' . md5($params['url'])] = [\n            'color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n            'display' => true,\n            'type'    => 'external',\n            'name'    => $params['name'],\n            'url'     => $params['url'],\n        ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    public static function showAddEventForm($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (count($CFG_GLPI['planning_add_types']) == 1) {\n            $params['itemtype'] = $CFG_GLPI['planning_add_types'][0];\n            self::showAddEventSubForm($params);\n        } else {\n            $rand = mt_rand();\n            $select_options = [];\n            foreach ($CFG_GLPI['planning_add_types'] as $add_types) {\n                $select_options[$add_types] = $add_types::getTypeName(1);\n            }\n            echo __(\"Event type\") . \" : <br>\";\n            Dropdown::showFromArray(\n                'itemtype',\n                $select_options,\n                ['display_emptychoice' => true,\n                    'rand'                => $rand\n                ]\n            );\n\n            echo Html::scriptBlock(\"\n         $(function() {\n            $('#dropdown_itemtype$rand').on('change', function() {\n               var current_itemtype = $(this).val();\n               $('#add_planning_subform$rand').load('\" . $CFG_GLPI['root_doc'] . \"/ajax/planning.php',\n                                                    {action:   'add_event_sub_form',\n                                                     itemtype: current_itemtype,\n                                                     begin:    '\" . $params['begin'] . \"',\n                                                     end:      '\" . $params['end'] . \"'});\n            });\n         });\");\n            echo \"<br><br>\";\n            echo \"<div id='add_planning_subform$rand'></div>\";\n        }\n    }\n\n\n    /**\n     * Display form after selecting date range in planning\n     *\n     * @since 9.1\n     *\n     * @param $params (array): must contains this keys :\n     *  - begin : start of selection range.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end : end of selection range.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *\n     * @return void\n     */\n    public static function showAddEventSubForm($params = [])\n    {\n\n        $rand   = mt_rand();\n        $params = self::cleanDates($params);\n\n        $params['res_itemtype'] = $params['res_itemtype'] ?? '';\n        $params['res_items_id'] = $params['res_items_id'] ?? 0;\n        if ($item = getItemForItemtype($params['itemtype'])) {\n            $item->showForm('', [\n                'from_planning_ajax' => true,\n                'begin'              => $params['begin'],\n                'end'                => $params['end'],\n                'res_itemtype'       => $params['res_itemtype'],\n                'res_items_id'       => $params['res_items_id'],\n                'formoptions'        => \"id='ajax_reminder$rand'\"\n            ]);\n            $callback = \"glpi_close_all_dialogs();\n                      GLPIPlanning.refresh();\n                      displayAjaxMessageAfterRedirect();\";\n            Html::ajaxForm(\"#ajax_reminder$rand\", $callback);\n        }\n    }\n\n\n    /**\n     * Former front/planning.php before 9.1.\n     * Display a classic form to plan an event (with begin fiel and duration)\n     *\n     * @since 9.1\n     *\n     * @param $params (array): array of parameters whou should contain :\n     *   - id (integer): id of item who receive the planification\n     *   - itemtype (string): itemtype of item who receive the planification\n     *   - begin (string) : start date of event\n     *   - _display_dates (bool) : display dates fields (default true)\n     *   - end (optionnal) (string) : end date of event. Ifg missing, it will computerd from begin+1hour\n     *   - rand_user (integer) : users_id to check planning avaibility\n     *   - rand : specific rand if needed (default is generated one)\n     */\n    public static function showAddEventClassicForm($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (isset($params[\"id\"]) && ($params[\"id\"] > 0)) {\n            echo \"<input type='hidden' name='plan[id]' value='\" . $params[\"id\"] . \"'>\";\n        }\n\n        $rand = mt_rand();\n        if (isset($params['rand'])) {\n            $rand = $params['rand'];\n        }\n\n        $display_dates = $params['_display_dates'] ?? true;\n\n        $mintime = $CFG_GLPI[\"planning_begin\"];\n        if (isset($params[\"begin\"]) && !empty($params[\"begin\"])) {\n            $begin = $params[\"begin\"];\n            $begintime = date(\"H:i:s\", strtotime($begin));\n            if ($begintime < $mintime) {\n                $mintime = $begintime;\n            }\n        } else {\n            $ts = $CFG_GLPI['time_step'] * 60; // passage en minutes\n            $time = time() + $ts - 60;\n            $time = floor($time / $ts) * $ts;\n            $begin = date(\"Y-m-d H:i\", $time);\n        }\n\n        if (isset($params[\"end\"]) && !empty($params[\"end\"])) {\n            $end = $params[\"end\"];\n        } else {\n            $end = date(\"Y-m-d H:i:s\", strtotime($begin) + HOUR_TIMESTAMP);\n        }\n\n        echo \"<table class='planning_classic_card'>\";\n\n        if ($display_dates) {\n            echo \"<tr class='tab_bg_2'><td>\" . __('Start date') . \"</td><td>\";\n            Html::showDateTimeField(\"plan[begin]\", [\n                'value'      => $begin,\n                'maybeempty' => false,\n                'canedit'    => true,\n                'mindate'    => '',\n                'maxdate'    => '',\n                'mintime'    => $mintime,\n                'maxtime'    => $CFG_GLPI[\"planning_end\"],\n                'rand'       => $rand,\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Period') . \"&nbsp;\";\n\n        if (isset($params[\"rand_user\"])) {\n            $_POST['parent_itemtype'] = $params[\"parent_itemtype\"] ?? '';\n            $_POST['parent_items_id'] = $params[\"parent_items_id\"] ?? '';\n            $_POST['parent_fk_field'] = $params[\"parent_fk_field\"] ?? '';\n            echo \"<span id='user_available\" . $params[\"rand_user\"] . \"'>\";\n            include_once(GLPI_ROOT . '/ajax/planningcheck.php');\n            echo \"</span>\";\n        }\n\n        echo \"</td><td>\";\n\n        $empty_label   = Dropdown::EMPTY_VALUE;\n        $default_delay = $params['duration'] ?? 0;\n        if ($display_dates) {\n            $empty_label   = __('Specify an end date');\n            $default_delay = floor((strtotime($end) - strtotime($begin)) / $CFG_GLPI['time_step'] / MINUTE_TIMESTAMP) * $CFG_GLPI['time_step'] * MINUTE_TIMESTAMP;\n        }\n\n        Dropdown::showTimeStamp(\"plan[_duration]\", [\n            'min'        => 0,\n            'max'        => 50 * HOUR_TIMESTAMP,\n            'value'      => $default_delay,\n            'emptylabel' => $empty_label,\n            'rand'       => $rand,\n        ]);\n        echo \"<br><div id='date_end$rand'></div>\";\n\n        $event_options = [\n            'duration'     => '__VALUE__',\n            'end'          => $end,\n            'name'         => \"plan[end]\",\n            'global_begin' => $CFG_GLPI[\"planning_begin\"],\n            'global_end'   => $CFG_GLPI[\"planning_end\"]\n        ];\n\n        if ($display_dates) {\n            Ajax::updateItemOnSelectEvent(\n                \"dropdown_plan[_duration]$rand\",\n                \"date_end$rand\",\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/planningend.php\",\n                $event_options\n            );\n\n            if ($default_delay == 0) {\n                $params['duration'] = 0;\n                Ajax::updateItem(\"date_end$rand\", $CFG_GLPI[\"root_doc\"] . \"/ajax/planningend.php\", $params);\n            }\n        }\n\n        echo \"</td></tr>\\n\";\n\n        if (\n            (!isset($params[\"id\"]) || ($params[\"id\"] == 0))\n            && isset($params['itemtype'])\n            && PlanningRecall::isAvailable()\n        ) {\n            echo \"<tr class='tab_bg_2'><td>\" . _x('Planning', 'Reminder') . \"</td><td>\";\n            PlanningRecall::dropdown([\n                'itemtype' => $params['itemtype'],\n                'items_id' => $params['items_id'],\n                'rand'     => $rand,\n            ]);\n            echo \"</td></tr>\";\n        }\n        echo \"</table>\\n\";\n    }\n\n\n    /**\n     * Clone an event\n     *\n     * @since 9.5\n     *\n     * @param array $event the event to clone\n     *\n     * @return mixed the id (integer) or false if it failed\n     */\n    public static function cloneEvent(array $event = [])\n    {\n        $item = new $event['old_itemtype']();\n        $item->getFromDB((int) $event['old_items_id']);\n\n        $input = array_merge($item->fields, [\n            'plan' => [\n                'begin' => date(\"Y-m-d H:i:s\", strtotime($event['start'])),\n                'end'   => date(\"Y-m-d H:i:s\", strtotime($event['end'])),\n            ],\n        ]);\n        unset($input['id'], $input['uuid']);\n\n        if (isset($item->fields['name'])) {\n            $input['name'] = sprintf(__('Copy of %s'), $item->fields['name']);\n        }\n\n       // manage change of assigment for CommonITILTask\n        if (\n            $item instanceof CommonITILTask\n            && isset($event['actor']['itemtype'])\n            && isset($event['actor']['items_id'])\n        ) {\n            switch ($event['actor']['itemtype']) {\n                case \"group\":\n                    $key = \"groups_id_tech\";\n                    break;\n                case \"user\":\n                    $key = isset($item->fields['users_id_tech']) ? \"users_id_tech\" : \"users_id\";\n                    break;\n            }\n\n            unset(\n                $input['users_id_tech'],\n                $input['users_id'],\n                $input['groups_id_tech'],\n                $input['groups_id']\n            );\n\n            $input[$key] = $event['actor']['items_id'];\n        }\n\n        $new_items_id = $item->add(Toolbox::addslashes_deep($input));\n\n       // manage all assigments for ProjectTask\n        if (\n            $item instanceof ProjectTask\n            && isset($event['actor']['itemtype'])\n            && isset($event['actor']['items_id'])\n        ) {\n            $team = new ProjectTaskTeam();\n            $team->add([\n                'projecttasks_id' => $new_items_id,\n                'itemtype'        => ucfirst($event['actor']['itemtype']),\n                'items_id'        => $event['actor']['items_id']\n            ]);\n        }\n\n        return $new_items_id;\n    }\n\n    /**\n     * Delete an event\n     *\n     * @since 9.5\n     *\n     * @param array $event the event to clone (with itemtype and items_id keys)\n     *\n     * @return bool\n     */\n    public static function deleteEvent(array $event = []): bool\n    {\n        $item = new $event['itemtype']();\n\n        if (\n            isset($event['day'])\n            && isset($event['instance'])\n            && $event['instance']\n            && method_exists($item, \"deleteInstance\")\n        ) {\n            return $item->deleteInstance((int) $event['items_id'], $event['day']);\n        } else {\n            return $item->delete([\n                'id' => (int) $event['items_id']\n            ]);\n        }\n    }\n\n\n    /**\n     * toggle display for selected line of $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - parent : in case of type=users_group, must contains the id of the group\n     *  - name : contains a string with type and id concatened with a '_' char (ex user_41).\n     *  - display : boolean value to set to his line\n     * @return void\n     */\n    public static function toggleFilter($options = [])\n    {\n\n        $key = 'filters';\n        if (in_array($options['type'], ['user', 'group', 'group_users', 'external'])) {\n            $key = 'plannings';\n        }\n        if (\n            !isset($options['parent'])\n            || empty($options['parent'])\n        ) {\n            $_SESSION['glpi_plannings'][$key][$options['name']]['display']\n            = ($options['display'] === 'true');\n        } else {\n            $_SESSION['glpi_plannings']['plannings'][$options['parent']]['users']\n            [$options['name']]['display']\n            = ($options['display'] === 'true');\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    /**\n     * change color for selected line of $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - parent : in case of type=users_group, must contains the id of the group\n     *  - name : contains a string with type and id concatened with a '_' char (ex user_41).\n     *  - color : rgb color (preceded by '#'' char)\n     * @return void\n     */\n    public static function colorFilter($options = [])\n    {\n        $key = 'filters';\n        if (in_array($options['type'], ['user', 'group', 'group_users', 'external'])) {\n            $key = 'plannings';\n        }\n        if (\n            !isset($options['parent'])\n            || empty($options['parent'])\n        ) {\n            $_SESSION['glpi_plannings'][$key][$options['name']]['color'] = $options['color'];\n        } else {\n            $_SESSION['glpi_plannings']['plannings'][$options['parent']]['users']\n            [$options['name']]['color'] = $options['color'];\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    /**\n     * delete selected line in $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - filter : contains a string with type and id concatened with a '_' char (ex user_41).\n     * @return void\n     */\n    public static function deleteFilter($options = [])\n    {\n\n        $current = $_SESSION['glpi_plannings']['plannings'][$options['filter']];\n        if ($current['type'] == 'group_users') {\n            $_SESSION['glpi_plannings_color_index'] -= count($current['users']);\n        } else {\n            $_SESSION['glpi_plannings_color_index']--;\n        }\n\n        unset($_SESSION['glpi_plannings']['plannings'][$options['filter']]);\n        self::savePlanningsInDB();\n    }\n\n\n    public static function savePlanningsInDB()\n    {\n\n        $user = new User();\n        $user->update(['id' => $_SESSION['glpiID'],\n            'plannings' => exportArrayToDB($_SESSION['glpi_plannings'])\n        ]);\n    }\n\n\n    /**\n     * Prepare a set of events for jquery fullcalendar.\n     * Call populatePlanning functions for all $CFG_GLPI['planning_types'] types\n     *\n     * @since 9.1\n     *\n     * @param array $options with this keys:\n     *  - begin: mandatory, planning start.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end: mandatory, planning end.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - display_done_events: default true, show also events tagged as done\n     *  - force_all_events: even if the range is big, don't reduce the returned set\n     * @return array $events : array with events in fullcalendar.io format\n     */\n    public static function constructEventsArray($options = [])\n    {\n        global $CFG_GLPI;\n\n        $param['start']               = '';\n        $param['end']                 = '';\n        $param['view_name']           = '';\n        $param['display_done_events'] = true;\n        $param['force_all_events']    = false;\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $timezone = new DateTimeZone(date_default_timezone_get());\n        $time_begin = strtotime($param['start']) - $timezone->getOffset(new DateTime($param['start']));\n        $time_end   = strtotime($param['end']) - $timezone->getOffset(new DateTime($param['end']));\n\n       // if the dates range is greater than a certain amount, and we're not on a list view\n       // we certainly are on this view (as our biggest view apart list is month one).\n       // we must avoid at all cost to calculate rrules events on a big range\n        if (\n            !$param['force_all_events']\n            && $param['view_name'] != \"listFull\"\n            && ($time_end - $time_begin) > (2 * MONTH_TIMESTAMP)\n        ) {\n            $param['view_name'] = \"listFull\";\n            return [];\n        }\n\n        $param['begin'] = date(\"Y-m-d H:i:s\", $time_begin);\n        $param['end']   = date(\"Y-m-d H:i:s\", $time_end);\n\n        $raw_events = [];\n        $not_planned = [];\n        foreach ($CFG_GLPI['planning_types'] as $planning_type) {\n            if (!$planning_type::canView()) {\n                continue;\n            }\n            if ($_SESSION['glpi_plannings']['filters'][$planning_type]['display']) {\n                $event_type_color = $_SESSION['glpi_plannings']['filters'][$planning_type]['color'];\n                foreach ($_SESSION['glpi_plannings']['plannings'] as $actor => $actor_params) {\n                    if ($actor_params['type'] == 'external') {\n                        continue; // Ignore external calendars\n                    }\n                    $actor_params['event_type_color'] = $event_type_color;\n                    $actor_params['planning_type'] = $planning_type;\n                    self::constructEventsArraySingleLine(\n                        $actor,\n                        array_merge($param, $actor_params),\n                        $raw_events,\n                        $not_planned\n                    );\n                }\n            }\n        }\n\n       //handle not planned events\n        $raw_events = array_merge($raw_events, $not_planned);\n\n       // get external calendars events (ical)\n       // and on list view, only get future events\n        $begin_ical = $param['begin'];\n        if ($param['view_name'] == \"listFull\") {\n            $begin_ical = date('Y-m-d 00:00:00');\n        }\n        $raw_events = array_merge(\n            $raw_events,\n            self::getExternalCalendarRawEvents($begin_ical, $param['end'])\n        );\n\n       // construct events (in fullcalendar format)\n        $events = [];\n        foreach ($raw_events as $event) {\n            if (\n                $_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']\n                && (!isset($event['background']) || !$event['background'])\n            ) {\n                continue;\n            }\n\n            $users_id = (isset($event['users_id_tech']) && !empty($event['users_id_tech']) ?\n                        $event['users_id_tech'] :\n                        $event['users_id']);\n            $content = Planning::displayPlanningItem($event, $users_id, 'in', false) ?: ($event['content'] ?? \"\");\n            $tooltip = Planning::displayPlanningItem($event, $users_id, 'in', true) ?: ($event['tooltip'] ?? \"\");\n\n           // dates should be set with the user timezone\n            $begin = $event['begin'];\n            $end   = $event['end'];\n\n           // retreive all day events\n            if (\n                strpos($event['begin'], \"00:00:00\") != false\n                && (strtotime($event['end']) - strtotime($event['begin'])) % DAY_TIMESTAMP == 0\n            ) {\n                 $begin = date('Y-m-d', strtotime($event['begin']));\n                 $end = date('Y-m-d', strtotime($event['end']));\n            }\n\n           // get duration in milliseconds\n            $ms_duration = (strtotime($end) - strtotime($begin)) * 1000;\n\n            $index_color = array_search(\"user_$users_id\", array_keys($_SESSION['glpi_plannings']));\n            $new_event = [\n                'title'       => $event['name'],\n                'content'     => $content,\n                'tooltip'     => $tooltip,\n                'start'       => $begin,\n                'end'         => $end,\n                'duration'    => $ms_duration,\n                '_duration'   => $ms_duration, // sometimes duration is removed from event object in fullcalendar\n                '_editable'   => $event['editable'], // same, avoid loss of editable key in fullcalendar\n                'rendering'   => isset($event['background'])\n                             && $event['background']\n                             && !$_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']\n                              ? 'background'\n                              : '',\n                'color'       => (empty($event['color']) ?\n                              Planning::$palette_bg[$index_color] :\n                              $event['color']),\n                'borderColor' => (empty($event['event_type_color']) ?\n                              self::getPaletteColor('ev', $event['itemtype']) :\n                              $event['event_type_color']),\n                'textColor'   => Planning::$palette_fg[$index_color],\n                'typeColor'   => (empty($event['event_type_color']) ?\n                              self::getPaletteColor('ev', $event['itemtype']) :\n                              $event['event_type_color']),\n                'url'         => $event['url'] ?? \"\",\n                'ajaxurl'     => $event['ajaxurl'] ?? \"\",\n                'itemtype'    => $event['itemtype'] ?? \"\",\n                'parentitemtype' => $event['parentitemtype'] ?? \"\",\n                'items_id'    => $event['id'] ?? \"\",\n                'resourceId'  => $event['resourceId'] ?? \"\",\n                'priority'    => $event['priority'] ?? \"\",\n                'state'       => $event['state'] ?? \"\",\n            ];\n\n           // if we can't update the event, pass the editable key\n            if (!$event['editable']) {\n                $new_event['editable'] = false;\n            }\n\n           // override color if view is ressource and category color exists\n           // maybe we need a better way for displaying categories color\n            if (\n                $param['view_name'] == \"resourceWeek\"\n                && !empty($event['event_cat_color'])\n            ) {\n                $new_event['color'] = $event['event_cat_color'];\n            }\n\n           // manage reccurent events\n            if (isset($event['rrule']) && count($event['rrule'])) {\n                $rrule = $event['rrule'];\n\n               // the fullcalencard plugin waits for integer types for number (not strings)\n                if (isset($rrule['interval'])) {\n                    $rrule['interval'] = (int) $rrule['interval'];\n                }\n                if (isset($rrule['count'])) {\n                    $rrule['count'] = (int) $rrule['count'];\n                }\n\n               // clean empty values in rrule\n                foreach ($rrule as $key => $value) {\n                    if (is_null($value) || $value == '') {\n                        unset($rrule[$key]);\n                    }\n                }\n\n                $rset = PlanningExternalEvent::getRsetFromRRuleField($rrule, $new_event['start']);\n\n               // append icon to distinguish reccurent event in views\n               // use UTC datetime to avoid some issues with rlan/phprrule\n                $dtstart_datetime  = new \\DateTime($new_event['start']);\n                unset($rrule['exceptions']); // remove exceptions key (as libraries throw exception for unknow keys)\n                $hr_rrule_o = new RRule(\n                    array_merge(\n                        $rrule,\n                        [\n                            'dtstart' => $dtstart_datetime->format('Ymd\\THis\\Z')\n                        ]\n                    )\n                );\n                $new_event = array_merge($new_event, [\n                    'icon'     => 'fas fa-history',\n                    'icon_alt' => $hr_rrule_o->humanReadable(),\n                ]);\n\n               // for fullcalendar, we need to pass start in the rrule key\n                unset($new_event['start'], $new_event['end']);\n\n               // For list view, only display only the next occurence\n               // to avoid issues performances (range in list view can be 10 years long)\n                if ($param['view_name'] == \"listFull\") {\n                     $next_date = $rset->getNthOccurrenceAfter(new DateTime(), 1);\n                    if ($next_date) {\n                        $new_event = array_merge($new_event, [\n                            'start'    => $next_date->format('c'),\n                            'end'      => $next_date->add(new DateInterval(\"PT\" . ($ms_duration / 1000) . \"S\"))\n                                            ->format('c'),\n                        ]);\n                    }\n                } else {\n                    $rrule_string = \"\";\n                    foreach ($rset->getRRules() as $occurence) {\n                        $rrule_string .= $occurence->rfcString(false) . \"\\n\";\n                    }\n                    $ex_dates = [];\n                    foreach ($rset->getExDates() as $occurence) {\n                       // we forge the ex date with only the date part of the exception\n                       // and the hour of the dtstart.\n                       // This to presents only date selection to the user\n                        $ex_dates[] = \"EXDATE:\" . $occurence->format('Ymd\\THis');\n                    }\n\n                    if (count($ex_dates)) {\n                        $rrule_string .= implode(\"\\n\", $ex_dates) . \"\\n\";\n                    }\n\n                    $new_event = array_merge($new_event, [\n                        'is_recurrent' => true,\n                        'rrule'        => $rrule_string,\n                        'duration'     => $ms_duration\n                    ]);\n                }\n            }\n\n            $events[] = $new_event;\n        }\n\n        return $events;\n    }\n\n\n    /**\n     * construct a single line for self::constructEventsArray()\n     * Recursively called to construct $raw_events param.\n     *\n     * @since 9.1\n     *\n     * @param string $actor: a type and id concaneted separated by '_' char, ex 'user_41'\n     * @param array  $params: must contains this keys :\n     *  - display: boolean for pass or not the consstruction of this line (a group of users can be displayed but its users not).\n     *  - type: event type, can be event_filter, user, group or group_users\n     *  - who: integer for identify user\n     *  - whogroup: integer for identify group\n     *  - color: string with #rgb color for event's foreground color.\n     *  - event_type_color : string with #rgb color for event's foreground color.\n     * @param array  $raw_events: (passed by reference) the events array in construction\n     * @param array  $not_planned (passed by references) not planned events array in construction\n     * @return void\n     */\n    public static function constructEventsArraySingleLine($actor, $params = [], &$raw_events = [], &$not_planned = [])\n    {\n\n        if ($params['display']) {\n            $actor_array = explode(\"_\", $actor);\n            if ($params['type'] == \"group_users\") {\n                $subparams = $params;\n                unset($subparams['users']);\n                $subparams['from_group_users'] = true;\n                foreach ($params['users'] as $user => $userdata) {\n                    $subparams = array_merge($subparams, $userdata);\n                    self::constructEventsArraySingleLine($user, $subparams, $raw_events, $not_planned);\n                }\n            } else {\n                $params['who']       = $actor_array[1];\n                $params['whogroup']  = 0;\n                if (\n                    $params['type'] == \"group\"\n                    && in_array($params['planning_type'], self::$directgroup_itemtype)\n                ) {\n                    $params['who']       = 0;\n                    $params['whogroup']  = $actor_array[1];\n                }\n\n                $current_events = $params['planning_type']::populatePlanning($params);\n                if (count($current_events) > 0) {\n                    $raw_events = array_merge($raw_events, $current_events);\n                }\n                if (\n                    $_SESSION['glpi_plannings']['filters']['NotPlanned']['display']\n                    && method_exists($params['planning_type'], 'populateNotPlanned')\n                ) {\n                    $not_planned = array_merge($not_planned, $params['planning_type']::populateNotPlanned($params));\n                }\n            }\n        }\n\n        if (isset($params['from_group_users']) && $params['from_group_users']) {\n            $actor = \"gu_\" . $actor;\n        }\n\n       // fill type of planning\n        $raw_events = array_map(function ($arr) use ($actor) {\n            return $arr + ['resourceId' => $actor];\n        }, $raw_events);\n\n        if ($_SESSION['glpi_plannings']['filters']['NotPlanned']['display']) {\n            $not_planned = array_map(function ($arr) use ($actor) {\n                return $arr + [\n                    'not_planned' => true,\n                    'resourceId' => $actor,\n                    'event_type_color' => $_SESSION['glpi_plannings']['filters']['NotPlanned']['color']\n                ];\n            }, $not_planned);\n        }\n    }\n\n    /**\n     * Return events fetched from user external calendars.\n     *\n     * @return array\n     */\n    private static function getExternalCalendarRawEvents(string $limit_begin, string $limit_end): array\n    {\n        ErrorHandler::getInstance()->suspendOutput(); // Suspend error output to prevent warnings to corrupr JSON output\n\n        $raw_events = [];\n\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning_id => $planning_params) {\n            if ('external' !== $planning_params['type'] || !$planning_params['display']) {\n                continue; // Ignore non external and inactive calendars\n            }\n            $calendar_data = Toolbox::getURLContent($planning_params['url']);\n            if (empty($calendar_data)) {\n                continue;\n            }\n            try {\n                $vcalendar = Reader::read($calendar_data);\n            } catch (\\Sabre\\VObject\\ParseException $exception) {\n                trigger_error(\n                    sprintf('Unable to parse calendar data from URL \"%s\"', $planning_params['url']),\n                    E_USER_WARNING\n                );\n                continue;\n            }\n            if (!$vcalendar instanceof VCalendar) {\n                trigger_error(\n                    sprintf('No VCalendar object found at URL \"%s\"', $planning_params['url']),\n                    E_USER_WARNING\n                );\n                continue;\n            }\n            foreach ($vcalendar->getComponents() as $vcomp) {\n                if (!($vcomp instanceof VEvent || $vcomp instanceof VTodo)) {\n                    continue;\n                }\n\n                $end_date_prop = $vcomp instanceof VTodo ? 'DUE' : 'DTEND';\n                if (\n                    !$vcomp->DTSTART instanceof \\Sabre\\VObject\\Property\\ICalendar\\DateTime\n                    || !$vcomp->$end_date_prop instanceof \\Sabre\\VObject\\Property\\ICalendar\\DateTime\n                ) {\n                    continue;\n                }\n                $user_tz  = new \\DateTimeZone(date_default_timezone_get());\n                $begin_dt = $vcomp->DTSTART->getDateTime();\n                $begin_dt = $begin_dt->setTimeZone($user_tz);\n                $end_dt   = $vcomp->$end_date_prop->getDateTime();\n                $end_dt   = $end_dt->setTimeZone($user_tz);\n\n                if (\n                    !($vcomp->RRULE instanceof Recur)\n                    && ($limit_end < $begin_dt->format('Y-m-d H:i:s') || $limit_begin > $end_dt->format('Y-m-d H:i:s'))\n                ) {\n                    continue; // Ignore events not inside dates range\n                }\n\n                $title = $vcomp->SUMMARY instanceof FlatText ? $vcomp->SUMMARY->getValue() : '';\n                $description = $vcomp->DESCRIPTION instanceof FlatText ? $vcomp->DESCRIPTION->getValue() : '';\n\n                $raw_events[] = [\n                    'users_id'         => Session::getLoginUserID(),\n                    'name'             => $title,\n                    'tooltip'          => trim($title . \"\\n\" . $description),\n                    'content'          => $description,\n                    'begin'            => $begin_dt->format('Y-m-d H:i:s'),\n                    'end'              => $end_dt->format('Y-m-d H:i:s'),\n                    'event_type_color' => $planning_params['color'],\n                    'color'            => $planning_params['color'],\n                    'rrule'            => $vcomp->RRULE instanceof Recur\n                  ? current($vcomp->RRULE->getJsonValue())\n                  : null,\n                    'editable'         => false,\n                    'resourceId'       => $planning_id,\n                ];\n            }\n        }\n\n        ErrorHandler::getInstance()->unsuspendOutput(); // Restore error output state\n\n        return $raw_events;\n    }\n\n\n    /**\n     * Change dates of a selected event.\n     * Called from a drag&drop in planning\n     *\n     * @since 9.1\n     *\n     * @param array $options: must contains this keys :\n     *  - items_id : integer to identify items\n     *  - itemtype : string to identify items\n     *  - begin : planning start .\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end : planning end .\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     * @return bool\n     */\n    public static function updateEventTimes($params = [])\n    {\n        if ($item = getItemForItemtype($params['itemtype'])) {\n            $params = self::cleanDates($params);\n\n            if (\n                $item->getFromDB($params['items_id'])\n                && empty($item->fields['is_deleted'])\n            ) {\n                // item exists and is not in bin\n\n                $abort = false;\n\n                // we should not edit events from closed parent\n                if (!empty($item->fields['tickets_id'])) {\n                  // todo: to same checks for changes, problems, projects and maybe reminders and others depending on incoming itemtypes\n                    $ticket = new Ticket();\n\n                    if (\n                        !$ticket->getFromDB($item->fields['tickets_id'])\n                        || $ticket->fields['is_deleted']\n                        || $ticket->fields['status'] == CommonITILObject::CLOSED\n                    ) {\n                         $abort = true;\n                    }\n                }\n\n                // if event has rrule property, check if we need to create a clone instance\n                if (\n                    isset($item->fields['rrule'])\n                    && strlen($item->fields['rrule'])\n                ) {\n                    if (\n                        isset($params['move_instance'])\n                        && filter_var($params['move_instance'], FILTER_VALIDATE_BOOLEAN)\n                    ) {\n                         $item = $item->createInstanceClone(\n                             $item->fields['id'],\n                             $params['old_start']\n                         );\n                            $params['items_id'] = $item->fields['id'];\n                    }\n                }\n\n                if (!$abort) {\n                     $update = [\n                         'id'   => $params['items_id'],\n                         'plan' => [\n                             'begin' => $params['start'],\n                             'end'   => $params['end']\n                         ]\n                     ];\n\n                     if (isset($item->fields['users_id_tech'])) {\n                         $update['users_id_tech'] = $item->fields['users_id_tech'];\n                     }\n\n                     // manage moving event between resource (actors)\n                     if (\n                         isset($params['new_actor_itemtype'])\n                         && isset($params['new_actor_items_id'])\n                         && !empty($params['new_actor_itemtype'])\n                         && !empty($params['new_actor_items_id'])\n                     ) {\n                         $new_actor_itemtype = strtolower($params['new_actor_itemtype']);\n\n                         // reminders don't have group assignement for planning\n                         if (\n                             !($new_actor_itemtype === 'group'\n                             && $item instanceof Reminder)\n                         ) {\n                             switch ($new_actor_itemtype) {\n                                 case \"group\":\n                                        $update['groups_id_tech'] = $params['new_actor_items_id'];\n                                     if (strtolower($params['old_actor_itemtype']) === \"user\") {\n                                         $update['users_id_tech']  = 0;\n                                     }\n                                     break;\n\n                                 case \"user\":\n                                     if (isset($item->fields['users_id_tech'])) {\n                                         $update['users_id_tech']  = $params['new_actor_items_id'];\n                                         if (strtolower($params['old_actor_itemtype']) === \"group\") {\n                                             $update['groups_id_tech']  = 0;\n                                         }\n                                     } else {\n                                         $update['users_id'] = $params['new_actor_items_id'];\n                                     }\n                                     break;\n                             }\n                         }\n\n                       // special case for project tasks\n                       // which have a link tables for their relation with groups/users\n                         if ($item instanceof ProjectTask) {\n                          // get actor for finding relation with item\n                             $actor = new $params['old_actor_itemtype']();\n                             $actor->getFromDB((int) $params['old_actor_items_id']);\n\n                          // get current relation\n                             $team_old = new ProjectTaskTeam();\n                             $team_old->getFromDBForItems($item, $actor);\n\n                          // if new relation already exists, delete old relation\n                             $actor_new = new $params['new_actor_itemtype']();\n                             $actor_new->getFromDB((int) $params['new_actor_items_id']);\n                             $team_new  = new ProjectTaskTeam();\n                             if ($team_new->getFromDBForItems($item, $actor_new)) {\n                                 $team_old->delete([\n                                     'id' => $team_old->fields['id']\n                                 ]);\n                             } else {\n                      // else update relation\n                                 $team_old->update([\n                                     'id'       => $team_old->fields['id'],\n                                     'itemtype' => $params['new_actor_itemtype'],\n                                     'items_id' => $params['new_actor_items_id'],\n                                 ]);\n                             }\n                         }\n                     }\n\n                     if (is_subclass_of($item, \"CommonITILTask\")) {\n                         $parentitemtype = $item->getItilObjectItemType();\n                         if (!$update[\"_job\"] = getItemForItemtype($parentitemtype)) {\n                             return;\n                         }\n\n                         $fkfield = $update[\"_job\"]->getForeignKeyField();\n                         $update[$fkfield] = $item->fields[$fkfield];\n                     }\n\n                     return $item->update($update);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Clean timezone information from dates fields,\n     * as fullcalendar doesn't support easily timezones, let's consider it sends raw dates\n     * (remove timezone suffix), we will manage timezone directy on database\n     * see https://fullcalendar.io/docs/timeZone\n     *\n     * @since 9.5\n     *\n     * @param array $params parameters send by fullcalendar\n     *\n     * @return array cleaned $params\n     */\n    public static function cleanDates(array $params = []): array\n    {\n        $dates_fields = [\n            'start', 'begin', 'end'\n        ];\n\n        foreach ($params as $key => &$value) {\n            if (in_array($key, $dates_fields)) {\n                $value  = date(\"Y-m-d H:i:s\", strtotime(trim($value, 'Z')));\n            }\n        }\n\n        return $params;\n    }\n\n\n\n    /**\n     * Display a Planning Item\n     *\n     * @param $val       Array of the item to display\n     * @param $who             ID of the user (0 if all)\n     * @param $type            position of the item in the time block (in, through, begin or end)\n     *                         (default '')\n     * @param $complete        complete display (more details) (default 0)\n     *\n     * @return string\n     **/\n    public static function displayPlanningItem(array $val, $who, $type = \"\", $complete = 0)\n    {\n        $html = \"\";\n\n       // bg event shouldn't have content displayed\n        if (!$complete && $_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']) {\n            return \"\";\n        }\n\n       // Plugins case\n        if (\n            isset($val['itemtype'])\n            && !empty($val['itemtype'])\n            && $val['itemtype'] != 'NotPlanned'\n            && method_exists($val['itemtype'], \"displayPlanningItem\")\n        ) {\n            $html .= $val['itemtype']::displayPlanningItem($val, $who, $type, $complete);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Show the planning for the central page of a user\n     *\n     * @param $who ID of the user\n     *\n     * @return void\n     **/\n    public static function showCentral($who)\n    {\n        global $CFG_GLPI;\n\n        if (\n            !Session::haveRight(self::$rightname, self::READMY)\n            || ($who <= 0)\n        ) {\n            return false;\n        }\n\n        echo \"<div class='table-responsive card-table'>\";\n        echo \"<table class='table'>\";\n        echo \"<thead>\";\n        echo \"<tr class='noHover'><th>\";\n        echo \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/planning.php'>\" . __('Your planning') . \"</a>\";\n        echo \"</th></tr>\";\n        echo \"</thead>\";\n\n        echo \"<tr class='noHover'>\";\n        echo \"<td class='planning_on_central'>\";\n        self::showPlanning(false);\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        echo \"</div>\";\n    }\n\n\n\n   //*******************************************************************************************************************************\n   // *********************************** Implementation ICAL ***************************************************************\n   //*******************************************************************************************************************************\n\n    /**\n     *  Generate ical file content\n     *\n     * @param $who             user ID\n     * @param $whogroup        group ID\n     * @param $limititemtype   itemtype only display this itemtype (default '')\n     *\n     * @return void Outputs ical contents\n     **/\n    public static function generateIcal($who, $whogroup, $limititemtype = '')\n    {\n        global $CFG_GLPI;\n\n        if (\n            ($who === 0)\n            && ($whogroup === 0)\n        ) {\n            return;\n        }\n\n        if (!empty($CFG_GLPI[\"version\"])) {\n            $unique_id = \"GLPI-Planning-\" . trim($CFG_GLPI[\"version\"]);\n        } else {\n            $unique_id = \"GLPI-Planning-UnknownVersion\";\n        }\n\n       // create vcalendar\n        $vcalendar = new VCalendar();\n\n       // $xprops = array( \"X-LIC-LOCATION\" => $tz );\n       // iCalUtilityFunctions::createTimezone( $v, $tz, $xprops );\n\n        $interv = [];\n        $begin  = time() - MONTH_TIMESTAMP * 12;\n        $end    = time() + MONTH_TIMESTAMP * 12;\n        $begin  = date(\"Y-m-d H:i:s\", $begin);\n        $end    = date(\"Y-m-d H:i:s\", $end);\n        $params = [\n            'genical'   => true,\n            'who'       => $who,\n            'whogroup'  => $whogroup,\n            'begin'     => $begin,\n            'end'       => $end\n        ];\n\n        if (empty($limititemtype)) {\n            foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n                $interv = array_merge($interv, $itemtype::populatePlanning($params));\n            }\n        } else {\n            $interv = $limititemtype::populatePlanning($params);\n        }\n\n        if (count($interv) > 0) {\n            foreach ($interv as $key => $val) {\n                if (isset($val['itemtype'])) {\n                    if (isset($val[getForeignKeyFieldForItemType($val['itemtype'])])) {\n                        $uid = $val['itemtype'] . \"#\" . $val[getForeignKeyFieldForItemType($val['itemtype'])];\n                    } else {\n                        $uid = \"Other#\" . $key;\n                    }\n                } else {\n                    $uid = \"Other#\" . $key;\n                }\n\n                $vevent['UID']     = $uid;\n\n                $dateBegin = new DateTime($val[\"begin\"]);\n                $dateBegin->setTimeZone(new DateTimeZone('UTC'));\n\n                $dateEnd = new DateTime($val[\"end\"]);\n                $dateEnd->setTimeZone(new DateTimeZone('UTC'));\n\n                $vevent['DTSTART'] = $dateBegin;\n                $vevent['DTEND']   = $dateEnd;\n\n                if (isset($val[\"tickets_id\"])) {\n                    $summary = sprintf(__('Ticket #%1$s %2$s'), $val[\"tickets_id\"], $val[\"name\"]);\n                } else if (isset($val[\"name\"])) {\n                    $summary = $val[\"name\"];\n                }\n                $vevent['SUMMARY'] = $summary;\n\n                if (isset($val[\"content\"])) {\n                    $description = $val[\"content\"];\n                } else if (isset($val[\"text\"])) {\n                    $description = $val[\"text\"];\n                } else if (isset($val[\"name\"])) {\n                    $description = $val[\"name\"];\n                }\n                $vevent['DESCRIPTION'] = RichText::getTextFromHtml($description);\n\n                if (isset($val[\"url\"])) {\n                    $vevent['URL'] = $val[\"url\"];\n                }\n                $vcalendar->add('VEVENT', $vevent);\n            }\n        }\n\n        $output   = $vcalendar->serialize();\n        $filename = date('YmdHis') . '.ics';\n\n        @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n       //@header(\"Content-Length: \".Toolbox::strlen($output));\n        @header(\"Connection: close\");\n        @header(\"content-type: text/calendar; charset=utf-8\");\n\n        echo $output;\n    }\n\n    /**\n     * @since 0.85\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        $values[self::READMY]    = __('See personnal planning');\n        $values[self::READGROUP] = __('See schedule of people in my groups');\n        $values[self::READALL]   = __('See all plannings');\n\n        return $values;\n    }\n\n    /**\n     * Save the last view used in fullcalendar\n     *\n     * @since 9.5\n     *\n     * @param string $view_name\n     * @return void\n     */\n    public static function viewChanged($view_name = \"ListView\")\n    {\n        $_SESSION['glpi_plannings']['lastview'] = $view_name;\n    }\n\n    /**\n     * Returns actor type from 'planning' key (key comes from user 'plannings' field).\n     *\n     * @param string $key\n     *\n     * @return string|null\n     */\n    public static function getActorTypeFromPlanningKey($key)\n    {\n        if (preg_match('/group_\\d+_users/', $key)) {\n            return Group_User::getType();\n        }\n        $itemtype = ucfirst(preg_replace('/^([a-z]+)_\\d+$/', '$1', $key));\n        return class_exists($itemtype) ? $itemtype : null;\n    }\n\n    /**\n     * Returns actor id from 'planning' key (key comes from user 'plannings' field).\n     *\n     * @param string $key\n     *\n     * @return integer|null\n     */\n    public static function getActorIdFromPlanningKey($key)\n    {\n        $items_id = preg_replace('/^[a-z]+_(\\d+)(?:_[a-z]+)?$/', '$1', $key);\n        return is_numeric($items_id) ? (int)$items_id : null;\n    }\n\n    /**\n     * Returns planning key for given actor (key is used in user 'plannings' field).\n     *\n     * @param string  $itemtype\n     * @param integer $items_id\n     *\n     * @return string\n     */\n    public static function getPlanningKeyForActor($itemtype, $items_id)\n    {\n        if ('Group_User' === $itemtype) {\n            return 'group_' . $items_id . '_users';\n        }\n\n        return strtolower($itemtype) . '_' . $items_id;\n    }\n\n    /**\n     * Get CalDAV base calendar URL for given actor.\n     *\n     * @param CommonDBTM $item\n     *\n     * @return string|null\n     */\n    private static function getCaldavBaseCalendarUrl(\\CommonDBTM $item)\n    {\n\n        $calendar_uri = null;\n\n        switch (get_class($item)) {\n            case \\Group::class:\n                $calendar_uri = \\Glpi\\CalDAV\\Backend\\Calendar::PREFIX_GROUPS\n                 . '/' . $item->fields['id']\n                 . '/' . \\Glpi\\CalDAV\\Backend\\Calendar::BASE_CALENDAR_URI;\n                break;\n            case \\User::class:\n                $calendar_uri = \\Glpi\\CalDAV\\Backend\\Calendar::PREFIX_USERS\n                . '/' . $item->fields['name']\n                . '/' . \\Glpi\\CalDAV\\Backend\\Calendar::BASE_CALENDAR_URI;\n                break;\n        }\n\n        return $calendar_uri;\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-calendar-time\";\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Toolbox\\Sanitizer;\n\n// $feed = new SimplePie();\n// $feed->set_cache_location('../files/_rss');\n// $feed->set_cache_duration(3600);\n// $feed->set_feed_url('http://linuxfr.org/news.atom');\n// $feed->force_feed(true);\n// // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n// // all that other good stuff.  The feed's information will not be available to SimplePie before\n// // this is called.\n// $success = $feed->init();\n//\n// // We'll make sure that the right content type and character encoding gets set automatically.\n// // This function will grab the proper character encoding, as well as set the content type to text/html.\n// $feed->handle_content_type();\n// if ($feed->error())\n// {\n//    echo \"ERROR\";\n// } else {\n//    echo $feed->get_title();\n//    echo $feed->get_link();\n// }\n\n/**\n * RSSFeed Class\n *\n * @since 0.84\n **/\nclass RSSFeed extends CommonDBVisible implements ExtraVisibilityCriteria\n{\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    public static $rightname    = 'rssfeed_public';\n\n\n\n    public static function getTypeName($nb = 0)\n    {\n\n        if (Session::haveRight('rssfeed_public', READ)) {\n            return _n('RSS feed', 'RSS feed', $nb);\n        }\n        return _n('Personal RSS feed', 'Personal RSS feed', $nb);\n    }\n\n\n    public static function canCreate()\n    {\n\n        return (Session::haveRight(self::$rightname, CREATE)\n              || Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    public static function canView()\n    {\n\n        return (Session::haveRight('rssfeed_public', READ)\n              || Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    public function canViewItem()\n    {\n\n       // Is my rssfeed or is in visibility\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', READ)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function canCreateItem()\n    {\n       // Is my rssfeed\n        return ($this->fields['users_id'] == Session::getLoginUserID());\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', UPDATE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canUpdate()\n    {\n        return (Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canPurge()\n    {\n        return (Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @see CommonDBTM::canPurgeItem()\n     **/\n    public function canPurgeItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight(self::$rightname, PURGE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function post_getFromDB()\n    {\n\n       // Users\n        $this->users    = RSSFeed_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = Entity_RSSFeed::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = Group_RSSFeed::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = Profile_RSSFeed::getProfiles($this->fields['id']);\n    }\n\n\n    /**\n     * @see CommonDBTM::cleanDBonPurge()\n     **/\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Entity_RSSFeed::class,\n                Group_RSSFeed::class,\n                Profile_RSSFeed::class,\n                RSSFeed_User::class,\n            ]\n        );\n    }\n\n    public function haveVisibilityAccess()\n    {\n        if (!self::canView()) {\n            return false;\n        }\n\n        return parent::haveVisibilityAccess();\n    }\n\n    /**\n     * Return visibility joins to add to SQL\n     *\n     * @param $forceall force all joins (false by default)\n     *\n     * @return string joins to add\n     **/\n    public static function addVisibilityJoins($forceall = false)\n    {\n       //not deprecated because used in Search\n        global $DB;\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['WHERE']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = str_replace(\n            'SELECT * FROM ' . $DB->quoteName(self::getTable()) . ' ',\n            '',\n            $sql\n        );\n        return $sql;\n    }\n\n\n    /**\n     * Return visibility SQL restriction to add\n     *\n     * @return string restrict to add\n     **/\n    public static function addVisibilityRestrict()\n    {\n       //not deprecated because used in Search\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['LEFT JOIN']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = preg_replace('/.*WHERE /', '', $sql);\n\n        return $sql;\n    }\n\n    /**\n     * Return visibility joins to add to DBIterator parameters\n     *\n     * @since 9.4\n     *\n     * @param boolean $forceall force all joins (false by default)\n     *\n     * @return array\n     */\n    public static function getVisibilityCriteria(bool $forceall = false): array\n    {\n        $where = [self::getTable() . '.users_id' => Session::getLoginUserID()];\n        $join = [];\n\n        if (!self::canView()) {\n            return [\n                'LEFT JOIN' => $join,\n                'WHERE'     => $where\n            ];\n        }\n\n       //JOINs\n       // Users\n        $join['glpi_rssfeeds_users'] = [\n            'ON' => [\n                'glpi_rssfeeds_users'   => 'rssfeeds_id',\n                'glpi_rssfeeds'         => 'id'\n            ]\n        ];\n\n        $where = [\n            'OR' => [\n                self::getTable() . '.users_id'   => Session::getLoginUserID(),\n                'glpi_rssfeeds_users.users_id'   => Session::getLoginUserID()\n            ]\n        ];\n        $orwhere = [];\n\n       // Groups\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]))\n        ) {\n            $join['glpi_groups_rssfeeds'] = [\n                'ON' => [\n                    'glpi_groups_rssfeeds'  => 'rssfeeds_id',\n                    'glpi_rssfeeds'         => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_rssfeeds', '', '', true);\n            $orwhere[] = [\n                'glpi_groups_rssfeeds.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                      ? $_SESSION[\"glpigroups\"]\n                                                      : [-1],\n                'OR' => [\n                    'glpi_groups_rssfeeds.no_entity_restriction' => 1,\n                ] + $restrict\n            ];\n        }\n\n       // Profiles\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveprofile\"])\n              && isset($_SESSION[\"glpiactiveprofile\"]['id']))\n        ) {\n            $join['glpi_profiles_rssfeeds'] = [\n                'ON' => [\n                    'glpi_profiles_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveprofile\"]) && isset($_SESSION[\"glpiactiveprofile\"]['id'])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true);\n            if (!count($restrict)) {\n                $restrict = [true];\n            }\n            $ors = [\n                'glpi_profiles_rssfeeds.no_entity_restriction' => 1,\n                $restrict\n            ];\n\n            $orwhere[] = [\n                'glpi_profiles_rssfeeds.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n                'OR' => $ors\n            ];\n        }\n\n       // Entities\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"]))\n        ) {\n            $join['glpi_entities_rssfeeds'] = [\n                'ON' => [\n                    'glpi_entities_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"])) {\n           // Force complete SQL not summary when access to all entities\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true, true);\n            if (count($restrict)) {\n                $orwhere[] = $restrict;\n            }\n        }\n\n        $where['OR'] = array_merge($where['OR'], $orwhere);\n        $criteria = ['LEFT JOIN' => $join];\n        if (count($where)) {\n            $criteria['WHERE'] = $where;\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * @param $field\n     * @param $values\n     * @param $options   array\n     **/\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'refresh_rate':\n                return Html::timestampToString($values[$field], false);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n\n    /**\n     * @param $field\n     * @param $name               (default '')\n     * @param $values             (default '')\n     * @param $options      array\n     **/\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n\n        switch ($field) {\n            case 'refresh_rate':\n                return Planning::dropdownState($name, $values[$field], false);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'forcegroupby'       => true,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'name'               => __('Creator'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'right'              => 'all'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'url',\n            'name'               => __('URL'),\n            'datatype'           => 'string',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'have_error',\n            'name'               => __('Error'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'max_items',\n            'name'               => __('Number of items displayed'),\n            'datatype'           => 'number',\n            'min'                => 5,\n            'max'                => 100,\n            'step'               => 5,\n            'toadd'              => [1],\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'refresh_rate',\n            'name'               => __('Refresh rate'),\n            'datatype'           => 'timestamp',\n            'min'                => HOUR_TIMESTAMP,\n            'max'                => DAY_TIMESTAMP,\n            'step'               => HOUR_TIMESTAMP,\n            'toadd'              => [\n                5 * MINUTE_TIMESTAMP,\n                15 * MINUTE_TIMESTAMP,\n                30 * MINUTE_TIMESTAMP,\n                45 * MINUTE_TIMESTAMP\n            ],\n            'display_emptychoice' => false,\n            'massiveaction'      => true,\n            'searchtype'         => 'equals'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n\n    /**\n     * @see CommonGLPI::getTabNameForItem()\n     **/\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (self::canView()) {\n            $nb = 0;\n            switch ($item->getType()) {\n                case 'RSSFeed':\n                    $showtab = [1 => __('Content')];\n                    if (Session::haveRight('rssfeed_public', UPDATE)) {\n                        if ($_SESSION['glpishow_count_on_tabs']) {\n                            $nb = $item->countVisibilities();\n                        }\n                        $showtab[2] = self::createTabEntry(_n(\n                            'Target',\n                            'Targets',\n                            Session::getPluralNumber()\n                        ), $nb);\n                    }\n                    return $showtab;\n            }\n        }\n        return '';\n    }\n\n\n    /**\n     * @see CommonGLPI::defineTabs()\n     **/\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    /**\n     * @param $item         CommonGLPI object\n     * @param $tabnum       (default 1)\n     * @param $withtemplate (default 0)\n     **/\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'RSSFeed':\n                switch ($tabnum) {\n                    case 1:\n                        $item->showFeedContent();\n                        return true;\n\n                    case 2:\n                        $item->showVisibility();\n                        return true;\n                }\n        }\n        return false;\n    }\n\n\n    /**\n     * @see CommonDBTM::prepareInputForAdd()\n     **/\n    public function prepareInputForAdd($input)\n    {\n\n        if ($feed = self::getRSSFeed($input['url'])) {\n            $input['have_error'] = 0;\n            $input['name']       = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        } else {\n            $input['have_error'] = 1;\n            $input['name']       = '';\n        }\n        $input[\"name\"] = trim($input[\"name\"]);\n\n        if (empty($input[\"name\"])) {\n            $input[\"name\"] = __('Without title');\n        }\n        return $input;\n    }\n\n\n    /**\n     * @see CommonDBTM::prepareInputForAdd()\n     **/\n    public function prepareInputForUpdate($input)\n    {\n\n        if (\n            empty($input['name'])\n            && isset($input['url'])\n            && ($feed = self::getRSSFeed($input['url']))\n        ) {\n            $input['name'] = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        }\n        return $input;\n    }\n\n\n    public function pre_updateInDB()\n    {\n\n       // Set new user if initial user have been deleted\n        if (\n            ($this->fields['users_id'] == 0)\n            && ($uid = Session::getLoginUserID())\n        ) {\n            $this->fields['users_id'] = $uid;\n            $this->updates[]          = \"users_id\";\n        }\n    }\n\n\n    public function post_getEmpty()\n    {\n\n        $this->fields[\"name\"]         = __('New note');\n        $this->fields[\"users_id\"]     = Session::getLoginUserID();\n        $this->fields[\"refresh_rate\"] = DAY_TIMESTAMP;\n        $this->fields[\"max_items\"]    = 20;\n    }\n\n\n    /**\n     * Print the rssfeed form\n     *\n     * @param $ID        integer  Id of the item to print\n     * @param $options   array    of possible options:\n     *     - target filename : where to go when done.\n     **/\n    public function showForm($ID, array $options = [])\n    {\n       // Test _rss cache directory. I permission trouble : unable to edit\n        if (Toolbox::testWriteAccessToDirectory(GLPI_RSS_DIR) > 0) {\n            echo \"<div class='center'>\";\n            printf(__('Check permissions to the directory: %s'), GLPI_RSS_DIR);\n            echo \"<p class='red b'>\" . __('Error') . \"</p>\";\n            echo \"</div>\";\n            return false;\n        }\n\n        $this->initForm($ID, $options);\n\n        $this->showFormHeader($options);\n\n        $rowspan = 4;\n\n        if (!$this->isNewID($ID)) {\n           // Force getting feed :\n            $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n            if (!$feed || $feed->error()) {\n                $this->setError(true);\n            } else {\n                $this->setError(false);\n            }\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Name') . \"</td>\";\n            echo \"<td>\";\n            echo Html::input('name', ['value' => $this->fields['name']]);\n            echo \"</td><td colspan ='2'>&nbsp;</td></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('URL') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='url' size='100' value='\" . $this->fields[\"url\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('By') . \"</td>\";\n        echo \"<td>\";\n        echo getUserName($this->fields[\"users_id\"]);\n        echo \"<input type='hidden' name='users_id' value='\" . $this->fields['users_id'] . \"'>\\n\";\n        echo \"</td>\";\n        echo \"<td rowspan='$rowspan'>\" . __('Comments') . \"</td>\";\n        echo \"<td rowspan='$rowspan' class='middle'>\";\n        echo \"<textarea  class='form-control' rows='\" . ($rowspan + 3) . \"' name='comment' >\" . $this->fields[\"comment\"] .\n           \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Active') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('is_active', $this->fields['is_active']);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Refresh rate') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showTimeStamp(\n            \"refresh_rate\",\n            ['value'                => $this->fields[\"refresh_rate\"],\n                'min'                  => HOUR_TIMESTAMP,\n                'max'                  => DAY_TIMESTAMP,\n                'step'                 => HOUR_TIMESTAMP,\n                'display_emptychoice'  => false,\n                'toadd'                => [5 * MINUTE_TIMESTAMP,\n                    15 * MINUTE_TIMESTAMP,\n                    30 * MINUTE_TIMESTAMP,\n                    45 * MINUTE_TIMESTAMP\n                ]\n            ]\n        );\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Number of items displayed') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"max_items\", ['value'                => $this->fields[\"max_items\"],\n            'min'                  => 5,\n            'max'                  => 100,\n            'step'                 => 5,\n            'toadd'                => [1],\n            'display_emptychoice'  => false\n        ]);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Error retrieving RSS feed') . \"</td>\";\n        echo \"<td>\";\n        echo Dropdown::getYesNo($this->fields['have_error']);\n        echo \"</td>\";\n        if ($this->fields['have_error']) {\n            echo \"<td>\" . __('RSS feeds found');\n            echo \"</td><td>\";\n            $this->showDiscoveredFeeds();\n            echo \"</td>\\n\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Set error field\n     *\n     * @param $error   (false by default\n     **/\n    public function setError($error = false)\n    {\n\n        if (!isset($this->fields['id']) && !isset($this->fields['have_error'])) {\n            return;\n        }\n\n       // Set error if not set\n        if ($error && !$this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 1\n            ]);\n        }\n       // Unset error if set\n        if (!$error && $this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 0\n            ]);\n        }\n    }\n\n\n    /**\n     * Show the feed content\n     **/\n    public function showFeedContent()\n    {\n\n        if (!$this->canViewItem()) {\n            return false;\n        }\n        $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n        $rss_feed = [\n            'items'  => []\n        ];\n        echo \"<div class='firstbloc'>\";\n        if (!$feed || $feed->error()) {\n            $rss_feed['error'] = !$feed ? __('Error retrieving RSS feed') : $feed->error();\n            $this->setError(true);\n        } else {\n            $this->setError(false);\n            $rss_feed['title'] = $feed->get_title();\n            foreach ($feed->get_items(0, $this->fields['max_items']) as $item) {\n                $rss_feed['items'][] = [\n                    'title'     => $item->get_title(),\n                    'link'      => $item->get_permalink(),\n                    'timestamp' => Html::convDateTime($item->get_date('Y-m-d H:i:s')),\n                    'content'   => $item->get_content()\n                ];\n            }\n        }\n\n        TemplateRenderer::getInstance()->display('components/rss_feed.html.twig', [\n            'rss_feed'  => $rss_feed\n        ]);\n    }\n\n\n    /**\n     * Show discovered feeds\n     *\n     * @return void\n     **/\n    public function showDiscoveredFeeds()\n    {\n\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->enable_cache(false);\n        $feed->set_feed_url($this->fields['url']);\n        $feed->init();\n        $feed->handle_content_type();\n\n        if ($feed->error()) {\n            return;\n        }\n\n        foreach ($feed->get_all_discovered_feeds() as $f) {\n            $newurl  = $f->url;\n            $newfeed = self::getRSSFeed($newurl);\n            if ($newfeed && !$newfeed->error()) {\n                $link = $newfeed->get_permalink();\n                if (!empty($link)) {\n                     echo \"<a href='$newurl'>\" . $newfeed->get_title() . \"</a>&nbsp;\";\n                     Html::showSimpleForm(\n                         $this->getFormURL(),\n                         'update',\n                         _x('button', 'Use'),\n                         ['id'  => $this->getID(),\n                             'url' => $newurl\n                         ]\n                     );\n                     echo \"<br>\";\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Get a specific RSS feed\n     *\n     * @param $url             string/array   URL of the feed or array of URL\n     * @param $cache_duration  timestamp      cache duration (default DAY_TIMESTAMP)\n     *\n     * @return feed object\n     **/\n    public static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP)\n    {\n        global $CFG_GLPI;\n\n        if (Sanitizer::isHtmlEncoded($url)) {\n            $url = Sanitizer::decodeHtmlSpecialChars($url);\n        }\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->set_cache_duration($cache_duration);\n\n       // proxy support\n        if (!empty($CFG_GLPI[\"proxy_name\"])) {\n            $prx_opt = [];\n            $prx_opt[CURLOPT_PROXY]     = $CFG_GLPI[\"proxy_name\"];\n            $prx_opt[CURLOPT_PROXYPORT] = $CFG_GLPI[\"proxy_port\"];\n            if (!empty($CFG_GLPI[\"proxy_user\"])) {\n                $prx_opt[CURLOPT_HTTPAUTH]     = CURLAUTH_ANYSAFE;\n                $prx_opt[CURLOPT_PROXYUSERPWD] = $CFG_GLPI[\"proxy_user\"] . \":\" .\n                                             (new GLPIKey())->decrypt($CFG_GLPI[\"proxy_passwd\"]);\n            }\n            $feed->set_curl_options($prx_opt);\n        }\n\n        $feed->enable_cache(true);\n        $feed->set_feed_url($url);\n        $feed->force_feed(true);\n       // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n       // all that other good stuff.  The feed's information will not be available to SimplePie before\n       // this is called.\n        $feed->init();\n\n       // We'll make sure that the right content type and character encoding gets set automatically.\n       // This function will grab the proper character encoding, as well as set the content type to text/html.\n        $feed->handle_content_type();\n        if ($feed->error()) {\n            return false;\n        }\n        return $feed;\n    }\n\n\n    /**\n     * Show list for central view\n     *\n     * @param $personal boolean   display rssfeeds created by me ?\n     * @param $personal $display  if false, return html\n     *\n     * @return void\n     **/\n    public static function showListForCentral(bool $personal = true, bool $display = true)\n    {\n        global $DB, $CFG_GLPI;\n\n        $users_id             = Session::getLoginUserID();\n\n        $table = self::getTable();\n        $criteria = [\n            'SELECT'   => \"$table.*\",\n            'DISTINCT' => true,\n            'FROM'     => $table,\n            'ORDER'    => \"$table.name\"\n        ];\n\n        if ($personal) {\n           /// Personal notes only for central view\n            if (Session::getCurrentInterface() == 'helpdesk') {\n                return false;\n            }\n\n            $criteria['WHERE'][\"$table.users_id\"] = $users_id;\n            $criteria['WHERE'][\"$table.is_active\"] = 1;\n\n            $titre = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php'>\" .\n                    _n('Personal RSS feed', 'Personal RSS feeds', Session::getPluralNumber()) . \"</a>\";\n        } else {\n           // Show public rssfeeds / not mines : need to have access to public rssfeeds\n            if (!self::canView()) {\n                return false;\n            }\n\n            $criteria = $criteria + self::getVisibilityCriteria();\n\n           // Only personal on central so do not keep it\n            if (Session::getCurrentInterface() == 'central') {\n                $criteria['WHERE'][\"$table.users_id\"] = ['<>', $users_id];\n            }\n\n            if (Session::getCurrentInterface() == 'central') {\n                $titre = \"<a href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php\\\">\" .\n                       _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber()) . \"</a>\";\n            } else {\n                $titre = _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber());\n            }\n        }\n\n        $iterator = $DB->request($criteria);\n        $nb = count($iterator);\n        $items   = [];\n        $rssfeed = new self();\n        foreach ($iterator as $data) {\n            if ($rssfeed->getFromDB($data['id'])) {\n               // Force fetching feeds\n                if ($feed = self::getRSSFeed($data['url'], $data['refresh_rate'])) {\n                    // Store feeds in array of feeds\n                    $items = array_merge($items, $feed->get_items(0, $data['max_items']));\n                    $rssfeed->setError(false);\n                } else {\n                    $rssfeed->setError(true);\n                }\n            }\n        }\n\n        $output = \"\";\n        $output .= \"<table class='table table-striped table-hover card-table'>\";\n        $output .= \"<thead>\";\n        $output .= \"<tr class='noHover'><th colspan='2'><div class='relative'><span>$titre</span>\";\n\n        if (\n            ($personal && self::canCreate())\n            || (!$personal && Session::haveRight('rssfeed_public', CREATE))\n        ) {\n            $output .= \"<span class='float-end'>\";\n            $output .= \"<a href='\" . RSSFeed::getFormURL() . \"'>\";\n            $output .= \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/plus.png' alt='\" . __s('Add') . \"' title=\\\"\" .\n                __s('Add') . \"\\\"></a></span>\";\n        }\n\n        $output .= \"</div></th></tr>\";\n        $output .= \"</thead>\";\n\n        if ($nb) {\n            usort($items, ['SimplePie', 'sort_items']);\n            foreach ($items as $item) {\n                $output .= \"<tr class='tab_bg_1'><td>\";\n                $output .= Html::convDateTime($item->get_date('Y-m-d H:i:s'));\n                $output .= \"</td><td>\";\n                $link = $item->feed->get_permalink();\n                if (empty($link)) {\n                    $output .= $item->feed->get_title();\n                } else {\n                    $output .= \"<a target='_blank' href='$link'>\" . $item->feed->get_title() . '</a>';\n                }\n                $link = $item->get_permalink();\n\n                $rand = mt_rand();\n                $output .= \"<div id='rssitem$rand'>\";\n                if (!is_null($link)) {\n                    $output .= \"<a target='_blank' href='$link'>\";\n                }\n                $output .= $item->get_title();\n                if (!is_null($link)) {\n                    $output .= \"</a>\";\n                }\n                $output .= \"</div>\";\n                $output .= Html::showToolTip(RichText::getEnhancedHtml($item->get_content()), [\n                    'applyto' => \"rssitem$rand\",\n                    'display' => false\n                ]);\n                $output .= \"</td></tr>\";\n            }\n        }\n        $output .= \"</table>\";\n\n        if ($display) {\n            echo $output;\n        } else {\n            return $output;\n        }\n    }\n\n    /**\n     * @since 0.85\n     *\n     * @see commonDBTM::getRights()\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        if ($interface == 'helpdesk') {\n            $values = [READ => __('Read')];\n        } else {\n            $values = parent::getRights();\n        }\n        return $values;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-rss\";\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace Glpi\\System\\Status;\n\nuse AuthLDAP;\nuse CronTask;\nuse DBConnection;\nuse DBmysql;\nuse MailCollector;\nuse Plugin;\nuse Toolbox;\n\n/**\n * @since 9.5.0\n */\nfinal class StatusChecker\n{\n    /**\n     * The plugin or service is working as expected.\n     */\n    public const STATUS_OK = 'OK';\n\n    /**\n     * The plugin or service is working but may have some issues\n     */\n    public const STATUS_WARNING = 'WARNING';\n\n    /**\n     * The plugin or service is reachable but not working as expected.\n     */\n    public const STATUS_PROBLEM = 'PROBLEM';\n\n    /**\n     * Unable to get the status of a plugin or service.\n     * This is likely due to a prerequisite plugin or service being unavailable or the plugin not implementing the status hook.\n     * For example, some checks require the DB to be accessible.\n     */\n    public const STATUS_NO_DATA = 'NO_DATA';\n\n    /**\n     * Get all registered services\n     * @return array Array of services keyed by name.\n     *    The value for each service is expected to be an array containing a class name and a method name relating to the method that will do the check.\n     * @since 10.0.0\n     */\n    public static function getServices(): array\n    {\n        return [\n            'db'              => [self::class, 'getDBStatus'],\n            'cas'             => [self::class, 'getCASStatus'],\n            'ldap'            => [self::class, 'getLDAPStatus'],\n            'imap'            => [self::class, 'getIMAPStatus'],\n            'mail_collectors' => [self::class, 'getMailCollectorStatus'],\n            'crontasks'       => [self::class, 'getCronTaskStatus'],\n            'filesystem'      => [self::class, 'getFilesystemStatus'],\n            'plugins'         => [self::class, 'getPluginsStatus']\n        ];\n    }\n\n    /**\n     * Calculate the overall GLPI status or the overall service status based on all child status checks\n     * @param array $status The status array for all services or a specific service check.\n     * @return string The calculated status.\n     *    One of {@link STATUS_NO_DATA}, {@link STATUS_OK}, {@link STATUS_WARNING}, or {@link STATUS_PROBLEM}.\n     * @since 10.0.0\n     */\n    public static function calculateGlobalStatus(array $status)\n    {\n        $statuses = array_column($status, 'status');\n        $global_status = self::STATUS_OK;\n        if (in_array(self::STATUS_PROBLEM, $statuses, true)) {\n            $global_status = self::STATUS_PROBLEM;\n        } else if (in_array(self::STATUS_WARNING, $statuses, true)) {\n            $global_status = self::STATUS_WARNING;\n        }\n        return $global_status;\n    }\n\n    /**\n     * Get a service's status\n     *\n     * @param string|null $service The name of the service or if null/'all' all services will be checked\n     * @param bool $public_only True if only public information should be available in the status check.\n     *    If true, assume the data is being viewed by an anonymous user.\n     * @param bool $as_array True if the service check result should be returned as an array instead of a plain-text string.\n     * @return array|string An array or string with the result based on the $as_array parameter value.\n     * @since 10.0.0\n     */\n    public static function getServiceStatus(?string $service, $public_only = true, $as_array = true)\n    {\n        $services = self::getServices();\n        if ($service === 'all' || $service === null) {\n            $status = [\n                'glpi'   => [\n                    'status' => self::STATUS_OK\n                ]\n            ];\n            foreach ($services as $name => $service_check_method) {\n                $service_status = self::getServiceStatus($name, $public_only, true);\n                $status[$name] = $service_status;\n            }\n\n            $status['glpi']['status'] = self::calculateGlobalStatus($status);\n\n            if ($as_array) {\n                return $status;\n            } else {\n                return self::getPlaintextOutput($status);\n            }\n        }\n\n        if (!array_key_exists($service, $services)) {\n            return $as_array ? [] : '';\n        }\n        $service_check_method = $services[$service];\n        if (method_exists($service_check_method[0], $service_check_method[1])) {\n            $service_status = $service_check_method($public_only);\n            if ($as_array) {\n                return $service_status;\n            }\n            return strtoupper($service) . '_' . $service_status['status'];\n        }\n        return $as_array ? [] : '';\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getDBStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_OK,\n                'master' => [\n                    'status' => self::STATUS_OK,\n                ],\n                'slaves' => [\n                    'status' => self::STATUS_NO_DATA,\n                    'servers' => []\n                ]\n            ];\n           // Check replica SQL server connection\n            if (DBConnection::isDBSlaveActive()) {\n                $DBslave = DBConnection::getDBSlaveConf();\n                if (is_array($DBslave->dbhost)) {\n                    $hosts = $DBslave->dbhost;\n                } else {\n                    $hosts = [$DBslave->dbhost];\n                }\n\n                if (count($hosts)) {\n                    $status['slaves']['status'] = self::STATUS_OK;\n                }\n\n                foreach ($hosts as $num => $name) {\n                    $diff = DBConnection::getReplicateDelay($num);\n                    if (abs($diff) > 1000000000) {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_PROBLEM,\n                            'replication_delay'  => '-1',\n                            'status_msg'           => _x('glpi_status', 'Replication delay is too high')\n                        ];\n                        $status['slaves']['status'] = self::STATUS_PROBLEM;\n                        $status['status'] = self::STATUS_PROBLEM;\n                    } else if (abs($diff) > HOUR_TIMESTAMP) {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_PROBLEM,\n                            'replication_delay'  => abs($diff),\n                            'status_msg'           => _x('glpi_status', 'Replication delay is too high')\n                        ];\n                        $status['slaves']['status'] = self::STATUS_PROBLEM;\n                        $status['status'] = self::STATUS_PROBLEM;\n                    } else {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_OK,\n                            'replication_delay'  => abs($diff)\n                        ];\n                    }\n                }\n            }\n\n           // Check main server connection\n            if (!@DBConnection::establishDBConnection(false, true, false)) {\n                $status['master'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg' => _x('glpi_status', 'Unable to connect to the main database')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            }\n        }\n\n        // Set new properties. Master and slave are deprecated given their implications in English.\n        $status['main'] = $status['master'];\n        $status['replicas'] = $status['slaves'];\n\n        return $status;\n    }\n\n    private static function isDBAvailable(): bool\n    {\n        static $db_ok = null;\n\n        if ($db_ok === null) {\n            $status = self::getDBStatus();\n            $db_ok = ($status['main']['status'] === self::STATUS_OK || $status['replicas']['status'] === self::STATUS_OK);\n        }\n\n        return $db_ok;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getLDAPStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n               // Check LDAP Auth connections\n                $ldap_methods = getAllDataFromTable('glpi_authldaps', ['is_active' => 1]);\n\n                $total_servers = count($ldap_methods);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    foreach ($ldap_methods as $method) {\n                        $ldap = null;\n                        try {\n                            if (\n                                AuthLDAP::tryToConnectToServer(\n                                    $method,\n                                    $method['rootdn'],\n                                    (new \\GLPIKey())->decrypt($method['rootdn_passwd'])\n                                )\n                            ) {\n                                $status['servers'][$method['name']] = [\n                                    'status' => self::STATUS_OK\n                                ];\n                            } else {\n                                $status['servers'][$method['name']] = [\n                                    'status' => self::STATUS_PROBLEM,\n                                    'status_msg' => _x('glpi_status', 'Unable to connect to the LDAP server')\n                                ];\n                                $total_error++;\n                                $global_status = self::STATUS_PROBLEM;\n                            }\n                        } catch (\\RuntimeException $e) {\n                            // May be missing LDAP extension (Probably test environment)\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_PROBLEM\n                            ];\n                            $total_error++;\n                            $global_status = self::STATUS_PROBLEM;\n                        }\n                    }\n\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getIMAPStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n               // Check IMAP Auth connections\n                $imap_methods = getAllDataFromTable('glpi_authmails', ['is_active' => 1]);\n\n                $total_servers = count($imap_methods);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    foreach ($imap_methods as $method) {\n                        $param = Toolbox::parseMailServerConnectString($method['connect_string'], true);\n                        if ($param['ssl'] === true) {\n                            $host = 'ssl://' . $param['address'];\n                        } else if ($param['tls'] === true) {\n                            $host = 'tls://' . $param['address'];\n                        } else {\n                            $host = $param['address'];\n                        }\n                        if ($fp = @fsockopen($host, $param['port'], $errno, $errstr, 1)) {\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_OK\n                            ];\n                        } else {\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_PROBLEM,\n                                'status_msg' => _x('glpi_status', 'Unable to connect to the IMAP server')\n                            ];\n                            $total_error++;\n                            $global_status = self::STATUS_PROBLEM;\n                        }\n                        if ($fp !== false) {\n                                 fclose($fp);\n                        }\n                    }\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getCASStatus($public_only = true): array\n    {\n        global $CFG_GLPI;\n\n        static $status = null;\n\n        if ($status === null) {\n            $status['status'] = self::STATUS_NO_DATA;\n            if (!empty($CFG_GLPI['cas_host'])) {\n                $url = $CFG_GLPI['cas_host'];\n                if (!empty($CFG_GLPI['cas_port'])) {\n                    $url .= ':' . (int)$CFG_GLPI['cas_port'];\n                }\n                $url .= '/' . $CFG_GLPI['cas_uri'];\n                $data = Toolbox::getURLContent($url);\n                if (!empty($data)) {\n                    $status['status'] = self::STATUS_OK;\n                } else {\n                    $status['status'] = self::STATUS_PROBLEM;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getMailCollectorStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n                $mailcollectors = getAllDataFromTable('glpi_mailcollectors', ['is_active' => 1]);\n\n                $total_servers = count($mailcollectors);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    $mailcol = new MailCollector();\n                    foreach ($mailcollectors as $mc) {\n                        if ($mailcol->getFromDB($mc['id'])) {\n                            try {\n                                $mailcol->connect();\n                                $status['servers'][$mc['name']] = [\n                                    'status' => self::STATUS_OK\n                                ];\n                            } catch (\\Exception $e) {\n                                $status['servers'][$mc['name']] = [\n                                    'status'       => self::STATUS_PROBLEM,\n                                    'error_code'   => $e->getCode(),\n                                    'status_msg'      => $e->getMessage()\n                                ];\n                                $total_error++;\n                                $global_status = self::STATUS_PROBLEM;\n                            }\n                        }\n                    }\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getCronTaskStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'stuck' => []\n            ];\n            if (self::isDBAvailable()) {\n                $crontasks = getAllDataFromTable('glpi_crontasks');\n                $running = count(array_filter($crontasks, static function ($crontask) {\n                    return $crontask['state'] === CronTask::STATE_RUNNING;\n                }));\n                $stuck_crontasks = getAllDataFromTable(\n                    'glpi_crontasks',\n                    [\n                        'state'  => CronTask::STATE_RUNNING,\n                        'OR'     => [\n                            new \\QueryExpression(\n                                '(unix_timestamp(' . DBmysql::quoteName('lastrun') . ') + 2 * ' .\n                                DBmysql::quoteName('frequency') . ' < unix_timestamp(now()))'\n                            ),\n                            new \\QueryExpression(\n                                '(unix_timestamp(' . DBmysql::quoteName('lastrun') . ') + 2 * ' .\n                                HOUR_TIMESTAMP . ' < unix_timestamp(now()))'\n                            )\n                        ]\n                    ]\n                );\n                foreach ($stuck_crontasks as $ct) {\n                      $status['stuck'][] = $ct['name'];\n                }\n                $status['status'] = count($status['stuck']) ? self::STATUS_PROBLEM : self::STATUS_OK;\n                $status['status_msg'] = sprintf(_x('glpi_status', 'RUNNING: %d, STUCK: %d, TOTAL: %d'), $running, count($stuck_crontasks), count($crontasks));\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getFilesystemStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_OK,\n                'session_dir' => [\n                    'status' => self::STATUS_OK\n                ]\n            ];\n           // Check session dir (useful when NFS mounted))\n            if (!is_dir(GLPI_SESSION_DIR)) {\n                $status['session_dir'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg'   => sprintf(_x('glpi_status', '%s variable is not a directory'), 'GLPI_SESSION_DIR')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            } else if (!is_writable(GLPI_SESSION_DIR)) {\n                $status['session_dir'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg'   => sprintf(_x('glpi_status', '%s variable is not writable'), 'GLPI_SESSION_DIR')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     *\n     * @since 9.5.0\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getPluginsStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $plugins = Plugin::getPlugins();\n            $status = [];\n\n            foreach ($plugins as $plugin) {\n                // Old-style plugin status hook which only modified the global OK status.\n                $param = [\n                    'ok' => true,\n                    '_public_only' => $public_only\n                ];\n                $plugin_status = Plugin::doOneHook($plugin, 'status', $param);\n                if ($plugin_status === null) {\n                    continue;\n                }\n                unset($plugin_status['_public_only']);\n                if (isset($plugin_status['ok']) && count(array_keys($plugin_status)) === 1) {\n                    $status[$plugin] = [\n                        'status'    => $plugin_status['ok'] ? self::STATUS_OK : self::STATUS_PROBLEM,\n                        'version'   => Plugin::getPluginFilesVersion($plugin)\n                    ];\n                } else {\n                    $status[$plugin] = $plugin_status;\n                }\n            }\n        }\n\n        if (count($status) === 0) {\n            $status['status'] = self::STATUS_NO_DATA;\n        } else {\n            if ($public_only) {\n               // Only show overall plugin status\n               // Giving out plugin names and versions to anonymous users could make it easier to target insecure plugins and versions\n                $statuses = array_column($status, 'status');\n                $all_ok = !in_array(self::STATUS_PROBLEM, $statuses, true);\n                return ['status' => $all_ok ? self::STATUS_OK : self::STATUS_PROBLEM];\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @param bool $as_array\n     * @return array|string\n     * @deprecated 10.0.0 Use {@link self::getServiceStatus} instead\n     */\n    public static function getFullStatus($public_only = true, $as_array = true)\n    {\n        Toolbox::deprecated('Use StatusChecker::getServiceStatus for service checks instead');\n        return self::getServiceStatus(null, $public_only, $as_array);\n    }\n\n    /**\n     * Format the given full service status result as a plain-text output compatible with previous versions of GLPI.\n     * @param array $status\n     * @return string\n     * @deprecated 10.0.0\n     */\n    private static function getPlaintextOutput(array $status): string\n    {\n       // Deprecated notices are done on the /status.php endpoint and CLI commands to give better migration hints\n        $output = '';\n       // Plain-text output\n        if (count($status['db']['slaves'])) {\n            foreach ($status['db']['slaves']['servers'] as $num => $slave_info) {\n                $output .= \"GLPI_DBSLAVE_{$num}_{$slave_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No slave DB\\n\"; // Leave as \"slave\" since plain text is already deprecated\n        }\n        $output .= \"GLPI_DB_{$status['db']['master']['status']}\\n\";\n        $output .= \"GLPI_SESSION_DIR_{$status['filesystem']['session_dir']['status']}\\n\";\n        if (count($status['ldap']['servers'])) {\n            $output .= 'Check LDAP servers:';\n            foreach ($status['ldap']['servers'] as $name => $ldap_info) {\n                $output .= \" {$name}_{$ldap_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No LDAP server\\n\";\n        }\n        if (count($status['imap']['servers'])) {\n            $output .= 'Check IMAP servers:';\n            foreach ($status['imap']['servers'] as $name => $imap_info) {\n                $output .= \" {$name}_{$imap_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No IMAP server\\n\";\n        }\n        if (isset($status['cas']['status']) && $status['cas']['status'] !== self::STATUS_NO_DATA) {\n            $output .= \"CAS_SERVER_{$status['cas']['status']}\\n\";\n        } else {\n            $output .= \"No CAS server\\n\";\n        }\n        if (count($status['mail_collectors']['servers'])) {\n            $output .= 'Check mail collectors:';\n            foreach ($status['mail_collectors']['servers'] as $name => $collector_info) {\n                $output .= \" {$name}_{$collector_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No mail collector\\n\";\n        }\n        if (count($status['crontasks']['stuck'])) {\n            $output .= 'Check crontasks:';\n            foreach ($status['crontasks']['stuck'] as $name) {\n                $output .= \" {$name}_PROBLEM\\n\";\n            }\n        } else {\n            $output .= \"Crontasks_OK\\n\";\n        }\n\n       // Overall Status\n        $output .= \"\\nGLPI_{$status['glpi']['status']}\\n\";\n        return $output;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Console\\Application;\nuse Glpi\\Event;\nuse Glpi\\Mail\\Protocol\\ProtocolInterface;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Glpi\\Toolbox\\VersionParser;\nuse Laminas\\Mail\\Storage\\AbstractStorage;\nuse Mexitek\\PHPColors\\Color;\nuse Monolog\\Logger;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Toolbox Class\n **/\nclass Toolbox\n{\n    /**\n     * Wrapper for max_input_vars\n     *\n     * @since 0.84\n     *\n     * @return integer\n     **/\n    public static function get_max_input_vars()\n    {\n\n        $max = ini_get('max_input_vars');  // Security limit since PHP 5.3.9\n        if (!$max) {\n            $max = ini_get('suhosin.post.max_vars');  // Security limit from Suhosin\n        }\n        return $max;\n    }\n\n\n    /**\n     * Convert first caracter in upper\n     *\n     * @since 0.83\n     * @since 9.3 Rework\n     *\n     * @param string $str  string to change\n     *\n     * @return string\n     **/\n    public static function ucfirst($str)\n    {\n        $first_letter = mb_strtoupper(mb_substr($str, 0, 1));\n        $str_end = mb_substr($str, 1, mb_strlen($str));\n        return $first_letter . $str_end;\n    }\n\n\n    /**\n     * to underline shortcut letter\n     *\n     * @since 0.83\n     *\n     * @param string $str       from dico\n     * @param string $shortcut  letter of shortcut\n     *\n     * @return string\n     **/\n    public static function shortcut($str, $shortcut)\n    {\n\n        $pos = self::strpos(self::strtolower($str), self::strtolower($shortcut));\n        if ($pos !== false) {\n            return self::substr($str, 0, $pos) .\n                \"<u>\" . self::substr($str, $pos, 1) . \"</u>\" .\n                self::substr($str, $pos + 1);\n        }\n        return $str;\n    }\n\n\n    /**\n     * substr function for utf8 string\n     *\n     * @param string  $str      string\n     * @param string  $tofound  string to found\n     * @param integer $offset   The search offset. If it is not specified, 0 is used.\n     *\n     * @return integer|false\n     **/\n    public static function strpos($str, $tofound, $offset = 0)\n    {\n        return mb_strpos($str, $tofound, $offset, \"UTF-8\");\n    }\n\n\n\n    /**\n     *  Replace str_pad()\n     *  who bug with utf8\n     *\n     * @param string  $input       input string\n     * @param integer $pad_length  padding length\n     * @param string  $pad_string  padding string\n     * @param integer $pad_type    padding type\n     *\n     * @return string\n     **/\n    public static function str_pad($input, $pad_length, $pad_string = \" \", $pad_type = STR_PAD_RIGHT)\n    {\n\n        $diff = (strlen($input) - self::strlen($input));\n        return str_pad($input, $pad_length + $diff, $pad_string, $pad_type);\n    }\n\n\n    /**\n     * strlen function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return integer  length of the string\n     **/\n    public static function strlen($str)\n    {\n        return mb_strlen($str, \"UTF-8\");\n    }\n\n\n    /**\n     * substr function for utf8 string\n     *\n     * @param string  $str\n     * @param integer $start   start of the result substring\n     * @param integer $length  The maximum length of the returned string if > 0 (default -1)\n     *\n     * @return string\n     **/\n    public static function substr($str, $start, $length = -1)\n    {\n\n        if ($length == -1) {\n            $length = self::strlen($str) - $start;\n        }\n        return mb_substr($str, $start, $length, \"UTF-8\");\n    }\n\n\n    /**\n     * strtolower function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return string  lower case string\n     **/\n    public static function strtolower($str)\n    {\n        return mb_strtolower($str, \"UTF-8\");\n    }\n\n\n    /**\n     * strtoupper function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return string  upper case string\n     **/\n    public static function strtoupper($str)\n    {\n        return mb_strtoupper($str, \"UTF-8\");\n    }\n\n\n    /**\n     * Is a string seems to be UTF-8 one ?\n     *\n     * @param $str string   string to analyse\n     *\n     * @return boolean\n     **/\n    public static function seems_utf8($str)\n    {\n        return mb_check_encoding($str, \"UTF-8\");\n    }\n\n\n    /**\n     * Encode string to UTF-8\n     *\n     * @param string $string        string to convert\n     * @param string $from_charset  original charset (if 'auto' try to autodetect)\n     *\n     * @return string  utf8 string\n     **/\n    public static function encodeInUtf8($string, $from_charset = \"ISO-8859-1\")\n    {\n\n        if (strcmp($from_charset, \"auto\") == 0) {\n            $from_charset = mb_detect_encoding($string);\n        }\n        return mb_convert_encoding($string, \"UTF-8\", $from_charset);\n    }\n\n\n    /**\n     * Decode string from UTF-8 to specified charset\n     *\n     * @param string $string      string to convert\n     * @param string $to_charset  destination charset (default \"ISO-8859-1\")\n     *\n     * @return string  converted string\n     **/\n    public static function decodeFromUtf8($string, $to_charset = \"ISO-8859-1\")\n    {\n        return mb_convert_encoding($string, $to_charset, \"UTF-8\");\n    }\n\n    /**\n     * @deprecated 10.0.0\n     */\n    public static function sodiumEncrypt($content, $key = null)\n    {\n        Toolbox::deprecated('Use \"GLPIKey::encrypt()\"');\n        $glpikey = new GLPIKey();\n        return $glpikey->encrypt($content, $key);\n    }\n\n    /**\n     * @deprecated 10.0.0\n     */\n    public static function sodiumDecrypt($content, $key = null)\n    {\n        Toolbox::deprecated('Use \"GLPIKey::decrypt()\"');\n        $glpikey = new GLPIKey();\n        return $glpikey->decrypt($content, $key);\n    }\n\n\n    /**\n     * Prevent from XSS\n     * Clean code\n     *\n     * @param array|string $value  item to prevent\n     *\n     * @return array|string  clean item\n     *\n     * @see unclean_cross_side_scripting_deep*\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function clean_cross_side_scripting_deep($value)\n    {\n        Toolbox::deprecated('Use \"Glpi\\Toolbox\\Sanitizer::encodeHtmlSpecialCharsRecursive()\"');\n        return Sanitizer::encodeHtmlSpecialCharsRecursive($value);\n    }\n\n\n    /**\n     *  Invert fonction from clean_cross_side_scripting_deep\n     *\n     * @param array|string $value  item to unclean from clean_cross_side_scripting_deep\n     *\n     * @return array|string  unclean item\n     *\n     * @see clean_cross_side_scripting_deep()\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function unclean_cross_side_scripting_deep($value)\n    {\n        Toolbox::deprecated('Use \"Glpi\\Toolbox\\Sanitizer::decodeHtmlSpecialCharsRecursive()\"');\n        global $DB;\n        return $DB->escape(Sanitizer::decodeHtmlSpecialCharsRecursive($value));\n    }\n\n    /**\n     * Returns a safe configuration for htmLawed.\n     *\n     * @return array\n     *\n     * @since 9.5.4\n     */\n    public static function getHtmLawedSafeConfig(): array\n    {\n        $config = [\n            'elements'           => '* -applet -canvas -embed -form -object -script -link -meta',\n            'deny_attribute'     => 'on*, srcdoc',\n            'comment'            => 1, // 1: remove HTML comments (and do not display their contents)\n            'cdata'              => 1, // 1: remove CDATA sections (and do not display their contents)\n            'direct_list_nest'   => 1, // 1: Allow usage of ul/ol tags nested in other ul/ol tags\n            'schemes'            => 'href: aim, app, feed, file, ftp, gopher, http, https, irc, mailto, news, nntp, sftp, ssh, tel, telnet, notes; *: file, http, https',\n            'no_deprecated_attr' => 0, // 0: do not transform deprecated HTML attributes\n        ];\n        if (!GLPI_ALLOW_IFRAME_IN_RICH_TEXT) {\n            $config['elements'] .= '-iframe';\n        }\n\n        return $config;\n    }\n\n    /**\n     * Log in 'php-errors' all args\n     *\n     * @param Logger  $logger Logger instance, if any\n     * @param integer $level  Log level (defaults to warning)\n     * @param array   $args   Arguments (message to log, ...)\n     *\n     * @return void\n     **/\n    private static function log($logger = null, $level = Logger::WARNING, $args = null)\n    {\n        static $tps = 0;\n\n        $extra = [];\n        if (method_exists('Session', 'getLoginUserID')) {\n            $extra['user'] = Session::getLoginUserID() . '@' . php_uname('n');\n        }\n        if ($tps && function_exists('memory_get_usage')) {\n            $extra['mem_usage'] = number_format(microtime(true) - $tps, 3) . '\", ' .\n                      number_format(memory_get_usage() / 1024 / 1024, 2) . 'Mio)';\n        }\n\n        $msg = \"\";\n        if (function_exists('debug_backtrace')) {\n            $bt  = debug_backtrace();\n            if (count($bt) > 2) {\n                if (isset($bt[2]['class'])) {\n                    $msg .= $bt[2]['class'] . '::';\n                }\n                $msg .= $bt[2]['function'] . '() in ';\n            }\n            $msg .= $bt[1]['file'] . ' line ' . $bt[1]['line'] . \"\\n\";\n        }\n\n        if ($args == null) {\n            $args = func_get_args();\n        } else if (!is_array($args)) {\n            $args = [$args];\n        }\n\n        foreach ($args as $arg) {\n            if (is_array($arg) || is_object($arg)) {\n                $msg .= str_replace(\"\\n\", \"\\n  \", print_r($arg, true));\n            } else if (is_null($arg)) {\n                $msg .= 'NULL ';\n            } else if (is_bool($arg)) {\n                $msg .= ($arg ? 'true' : 'false') . ' ';\n            } else {\n                $msg .= $arg . ' ';\n            }\n        }\n\n        $tps = microtime(true);\n\n        if ($logger === null) {\n            global $PHPLOGGER;\n            $logger = $PHPLOGGER;\n        }\n\n        try {\n            $logger->addRecord($level, $msg, $extra);\n        } catch (\\Exception $e) {\n           //something went wrong, make sure logging does not cause fatal\n            error_log($e);\n        }\n\n        global $SQLLOGGER;\n        if (isCommandLine() && $level >= Logger::WARNING && $logger !== $SQLLOGGER) {\n           // Do not output related messages to $SQLLOGGER as they are redundant with\n           // output made by \"ErrorHandler::handleSql*()\" methods.\n            echo $msg;\n        }\n    }\n\n    /**\n     * PHP debug log\n     */\n    public static function logDebug()\n    {\n        self::log(null, Logger::DEBUG, func_get_args());\n    }\n\n    /**\n     * PHP notice log\n     */\n    public static function logNotice()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_NOTICE) to log notices,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::NOTICE, func_get_args());\n    }\n\n    /**\n     * PHP info log\n     */\n    public static function logInfo()\n    {\n        self::log(null, Logger::INFO, func_get_args());\n    }\n\n    /**\n     * PHP warning log\n     */\n    public static function logWarning()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_WARNING) to log warnings,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::WARNING, func_get_args());\n    }\n\n    /**\n     * PHP error log\n     */\n    public static function logError()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_WARNING) to log errors,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::ERROR, func_get_args());\n    }\n\n    /**\n     * SQL debug log\n     */\n    public static function logSqlDebug()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::DEBUG, $args);\n    }\n\n    /**\n     * SQL warning log\n     */\n    public static function logSqlWarning()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::WARNING, $args);\n    }\n\n    /**\n     * SQL error log\n     */\n    public static function logSqlError()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::ERROR, $args);\n    }\n\n\n    /**\n     * Generate a Backtrace\n     *\n     * @param string $log  Log file name (default php-errors) if false, return the string\n     * @param string $hide Call to hide (but display script/line)\n     * @param array  $skip Calls to not display at all\n     *\n     * @return string\n     *\n     * @since 0.85\n     **/\n    public static function backtrace($log = 'php-errors', $hide = '', array $skip = [])\n    {\n\n        if (function_exists(\"debug_backtrace\")) {\n            $message = \"  Backtrace :\\n\";\n            $traces  = debug_backtrace();\n            foreach ($traces as $trace) {\n                $script = (isset($trace[\"file\"]) ? $trace[\"file\"] : \"\") . \":\" .\n                        (isset($trace[\"line\"]) ? $trace[\"line\"] : \"\");\n                if (strpos($script, GLPI_ROOT) === 0) {\n                    $script = substr($script, strlen(GLPI_ROOT) + 1);\n                }\n                if (strlen($script) > 50) {\n                    $script = \"...\" . substr($script, -47);\n                } else {\n                    $script = str_pad($script, 50);\n                }\n                $call = (isset($trace[\"class\"]) ? $trace[\"class\"] : \"\") .\n                    (isset($trace[\"type\"]) ? $trace[\"type\"] : \"\") .\n                    (isset($trace[\"function\"]) ? $trace[\"function\"] . \"()\" : \"\");\n                if ($call == $hide) {\n                    $call = '';\n                }\n\n                if (!in_array($call, $skip)) {\n                    $message .= \"  $script $call\\n\";\n                }\n            }\n        } else {\n            $message = \"  Script : \" . $_SERVER[\"SCRIPT_FILENAME\"] . \"\\n\";\n        }\n\n        if ($log) {\n            self::logInFile($log, $message, true);\n        }\n\n        return $message;\n    }\n\n    /**\n     * Send a deprecated message in log (with backtrace)\n     * @param  string $message the message to send\n     * @return void\n     */\n    public static function deprecated($message = \"Called method is deprecated\")\n    {\n        trigger_error($message, E_USER_DEPRECATED);\n    }\n\n\n    /**\n     * Log a message in log file\n     *\n     * @param string  $name   name of the log file\n     * @param string  $text   text to log\n     * @param boolean $force  force log in file not seeing use_log_in_files config\n     *\n     * @return boolean\n     **/\n    public static function logInFile($name, $text, $force = false)\n    {\n        global $CFG_GLPI;\n\n        $user = '';\n        if (method_exists('Session', 'getLoginUserID')) {\n            $user = \" [\" . Session::getLoginUserID() . '@' . php_uname('n') . \"]\";\n        }\n\n        $ok = true;\n        if (\n            (isset($CFG_GLPI[\"use_log_in_files\"]) && $CFG_GLPI[\"use_log_in_files\"])\n            || $force\n        ) {\n            $ok = error_log(date(\"Y-m-d H:i:s\") . \"$user\\n\" . $text, 3, GLPI_LOG_DIR . \"/\" . $name . \".log\");\n        }\n\n        global $application;\n        if ($application instanceof Application) {\n            $application->getOutput()->writeln('<comment>' . $text . '</comment>', OutputInterface::VERBOSITY_VERY_VERBOSE);\n        } else if (\n            isset($_SESSION['glpi_use_mode'])\n            && ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE)\n            && isCommandLine()\n        ) {\n            $stderr = fopen('php://stderr', 'w');\n            fwrite($stderr, $text);\n            fclose($stderr);\n        }\n        return $ok;\n    }\n\n\n    /**\n     * Switch error mode for GLPI\n     *\n     * @param integer|null $mode       From Session::*_MODE\n     * @param boolean|null $debug_sql\n     * @param boolean|null $debug_vars\n     * @param boolean|null $log_in_files\n     *\n     * @return void\n     *\n     * @since 0.84\n     **/\n    public static function setDebugMode($mode = null, $debug_sql = null, $debug_vars = null, $log_in_files = null)\n    {\n        global $CFG_GLPI;\n\n        if (isset($mode)) {\n            $_SESSION['glpi_use_mode'] = $mode;\n        }\n        if (isset($debug_sql)) {\n            $CFG_GLPI['debug_sql'] = $debug_sql;\n        }\n        if (isset($debug_vars)) {\n            $CFG_GLPI['debug_vars'] = $debug_vars;\n        }\n        if (isset($log_in_files)) {\n            $CFG_GLPI['use_log_in_files'] = $log_in_files;\n        }\n\n       // If debug mode activated : display some information\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n           // Force reporting of all errors\n            error_reporting(E_ALL);\n           // Disable native error displaying as it will be done by custom handler\n            ini_set('display_errors', 'Off');\n        }\n    }\n\n\n    /**\n     * Send a file (not a document) to the navigator\n     * See Document->send();\n     *\n     * @param string      $file        storage filename\n     * @param string      $filename    file title\n     * @param string|null $mime        file mime type\n     * @param boolean     $add_expires add expires headers maximize cacheability ?\n     *\n     * @return void\n     **/\n    public static function sendFile($file, $filename, $mime = null, $expires_headers = false)\n    {\n\n       // Test securite : document in DOC_DIR\n        $tmpfile = str_replace(GLPI_DOC_DIR, \"\", $file);\n\n        if (strstr($tmpfile, \"../\") || strstr($tmpfile, \"..\\\\\")) {\n            Event::log(\n                $file,\n                \"sendFile\",\n                1,\n                \"security\",\n                $_SESSION[\"glpiname\"] . \" try to get a non standard file.\"\n            );\n            echo \"Security attack!!!\";\n            die(1);\n        }\n\n        if (!file_exists($file)) {\n            echo \"Error file $file does not exist\";\n            die(1);\n        }\n\n       // if $mime is defined, ignore mime type by extension\n        if ($mime === null && preg_match('/\\.(...)$/', $file)) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n            $mime = finfo_file($finfo, $file);\n            finfo_close($finfo);\n        }\n\n       // don't download picture files, see them inline\n        $attachment = \"\";\n       // if not begin 'image/'\n        if (\n            strncmp($mime, 'image/', 6) !== 0\n            && $mime != 'application/pdf'\n            // svg vector of attack, force attachment\n            // see https://github.com/glpi-project/glpi/issues/3873\n            || $mime == 'image/svg+xml'\n        ) {\n            $attachment = ' attachment;';\n        }\n\n        $etag = md5_file($file);\n        $lastModified = filemtime($file);\n\n       // Make sure there is nothing in the output buffer (In case stuff was added by core or misbehaving plugin).\n       // If there is any extra data, the sent file will be corrupted.\n        while (ob_get_level() > 0) {\n            ob_end_clean();\n        }\n       // Now send the file with header() magic\n        header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\", $lastModified) . \" GMT\");\n        header(\"Etag: $etag\");\n        header_remove('Pragma');\n        header('Cache-Control: private');\n        if ($expires_headers) {\n            $max_age = WEEK_TIMESTAMP;\n            header('Expires: ' . gmdate('D, d M Y H:i:s \\G\\M\\T', time() + $max_age));\n        }\n        header(\n            \"Content-disposition:$attachment filename=\\\"\" .\n            addslashes(iconv('UTF-8', 'ISO-8859-1', $filename)) .\n            \"\\\"; filename*=utf-8''\" .\n            rawurlencode($filename)\n        );\n        header(\"Content-type: \" . $mime);\n\n       // HTTP_IF_NONE_MATCH takes precedence over HTTP_IF_MODIFIED_SINCE\n       // http://tools.ietf.org/html/rfc7232#section-3.3\n        if (isset($_SERVER['HTTP_IF_NONE_MATCH']) && trim($_SERVER['HTTP_IF_NONE_MATCH']) === $etag) {\n            http_response_code(304); //304 - Not Modified\n            exit;\n        }\n        if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && @strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) >= $lastModified) {\n            http_response_code(304); //304 - Not Modified\n            exit;\n        }\n\n        readfile($file) or die(\"Error opening file $file\");\n    }\n\n\n    /**\n     *  Add slash for variable & array\n     *\n     * @param string|string[] $value value to add slashes\n     *\n     * @return string|string[]\n     **/\n    public static function addslashes_deep($value)\n    {\n        global $DB;\n\n        $value = ((array) $value === $value)\n                  ? array_map([__CLASS__, 'addslashes_deep'], $value)\n                  : (is_null($value)\n                       ? null : (is_resource($value) || is_object($value)\n                       ? $value : $DB->escape(\n                           str_replace(\n                               ['&#039;', '&#39;', '&#x27;', '&apos;', '&quot;'],\n                               [\"'\", \"'\", \"'\", \"'\", \"\\\"\"],\n                               $value\n                           )\n                       ))\n                    );\n\n        return $value;\n    }\n\n\n    /**\n     * Strip slash  for variable & array\n     *\n     * @param array|string $value  item to stripslashes\n     *\n     * @return array|string stripslashes item\n     **/\n    public static function stripslashes_deep($value)\n    {\n\n        $value = ((array) $value === $value)\n                  ? array_map([__CLASS__, 'stripslashes_deep'], $value)\n                  : (is_null($value)\n                        ? null : (is_resource($value) || is_object($value)\n                                    ? $value : stripslashes($value)));\n\n        return $value;\n    }\n\n    /** Converts an array of parameters into a query string to be appended to a URL.\n     *\n     * @param array  $array      parameters to append to the query string.\n     * @param string $separator  separator may be defined as &amp; to display purpose\n     * @param string $parent     This should be left blank (it is used internally by the function).\n     *\n     * @return string  Query string to append to a URL.\n     **/\n    public static function append_params($array, $separator = '&', $parent = '')\n    {\n\n        $params = [];\n        foreach ($array as $k => $v) {\n            if (is_array($v)) {\n                $params[] = self::append_params(\n                    $v,\n                    $separator,\n                    (empty($parent) ? rawurlencode($k)\n                    : $parent . '%5B' . rawurlencode($k) . '%5D')\n                );\n            } else {\n                $params[] = (!empty($parent) ? $parent . '%5B' . rawurlencode($k) . '%5D' : rawurlencode($k)) . '=' . rawurlencode($v);\n            }\n        }\n        //Remove empty values\n        $params = array_filter($params);\n        return implode($separator, $params);\n    }\n\n\n    /**\n     * Compute PHP memory_limit\n     *\n     * @param string $ininame  name of the ini ooption to retrieve (since 9.1)\n     *\n     * @return integer memory limit\n     **/\n    public static function getMemoryLimit($ininame = 'memory_limit')\n    {\n\n        $mem = ini_get($ininame);\n        $matches = [];\n        preg_match(\"/([-0-9]+)([KMG]*)/\", $mem, $matches);\n        $mem = \"\";\n\n       // no K M or G\n        if (isset($matches[1])) {\n            $mem = $matches[1];\n            if (isset($matches[2])) {\n                switch ($matches[2]) {\n                    case \"G\":\n                        $mem *= 1024;\n                        // nobreak;\n\n                    case \"M\":\n                        $mem *= 1024;\n                        // nobreak;\n\n                    case \"K\":\n                        $mem *= 1024;\n                        // nobreak;\n                }\n            }\n        }\n\n        return $mem;\n    }\n\n\n    /**\n     * Check is current memory_limit is enough for GLPI\n     *\n     * @since 0.83\n     *\n     * @return integer\n     *   0 if PHP not compiled with memory_limit support,\n     *   1 no memory limit (memory_limit = -1),\n     *   2 insufficient memory for GLPI,\n     *   3 enough memory for GLPI\n     **/\n    public static function checkMemoryLimit()\n    {\n\n        $mem = self::getMemoryLimit();\n        if ($mem == \"\") {\n            return 0;\n        }\n        if ($mem == \"-1\") {\n            return 1;\n        }\n        if ($mem < (64 * 1024 * 1024)) {\n            return 2;\n        }\n        return 3;\n    }\n\n\n    /**\n     * Get the filesize of a complete directory (from php.net)\n     *\n     * @param string $path  directory or file to get size\n     *\n     * @return null|integer\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function filesizeDirectory($path)\n    {\n        Toolbox::deprecated();\n\n        if (!is_dir($path)) {\n            return filesize($path);\n        }\n\n        if ($handle = opendir($path)) {\n            $size = 0;\n\n            while (false !== ($file = readdir($handle))) {\n                if (($file != '.') && ($file != '..')) {\n                    $size += filesize($path . '/' . $file);\n                    $size += self::filesizeDirectory($path . '/' . $file);\n                }\n            }\n\n            closedir($handle);\n            return $size;\n        }\n\n        return null;\n    }\n\n\n    /** Format a size passing a size in octet\n     *\n     * @param integer $size  Size in octet\n     *\n     * @return string  formatted size\n     **/\n    public static function getSize($size)\n    {\n\n       //TRANS: list of unit (o for octet)\n        $bytes = [__('o'), __('Kio'), __('Mio'), __('Gio'), __('Tio')];\n        foreach ($bytes as $val) {\n            if ($size > 1024) {\n                $size = $size / 1024;\n            } else {\n                break;\n            }\n        }\n       //TRANS: %1$s is a number maybe float or string and %2$s the unit\n        return sprintf(__('%1$s %2$s'), round($size, 2), $val);\n    }\n\n\n    /**\n     * Delete a directory and file contains in it\n     *\n     * @param string $dir  directory to delete\n     *\n     * @return void\n     **/\n    public static function deleteDir($dir)\n    {\n\n        if (file_exists($dir)) {\n            chmod($dir, 0777);\n\n            if (is_dir($dir)) {\n                $id_dir = opendir($dir);\n                while (($element = readdir($id_dir)) !== false) {\n                    if (($element != \".\") && ($element != \"..\")) {\n                        if (is_dir($dir . \"/\" . $element)) {\n                            self::deleteDir($dir . \"/\" . $element);\n                        } else {\n                            unlink($dir . \"/\" . $element);\n                        }\n                    }\n                }\n                closedir($id_dir);\n                rmdir($dir);\n            } else { // Delete file\n                unlink($dir);\n            }\n        }\n    }\n\n\n    /**\n     * Resize a picture to the new size\n     * Always produce a JPG file!\n     *\n     * @since 0.85\n     *\n     * @param string  $source_path   path of the picture to be resized\n     * @param string  $dest_path     path of the new resized picture\n     * @param integer $new_width     new width after resized (default 71)\n     * @param integer $new_height    new height after resized (default 71)\n     * @param integer $img_y         y axis of picture (default 0)\n     * @param integer $img_x         x axis of picture (default 0)\n     * @param integer $img_width     width of picture (default 0)\n     * @param integer $img_height    height of picture (default 0)\n     * @param integer $max_size      max size of the picture (default 500, is set to 0 no resize)\n     *\n     * @return boolean\n     **/\n    public static function resizePicture(\n        $source_path,\n        $dest_path,\n        $new_width = 71,\n        $new_height = 71,\n        $img_y = 0,\n        $img_x = 0,\n        $img_width = 0,\n        $img_height = 0,\n        $max_size = 500\n    ) {\n\n       //get img information (dimensions and extension)\n        $img_infos  = getimagesize($source_path);\n        if (empty($img_width)) {\n            $img_width  = $img_infos[0];\n        }\n        if (empty($img_height)) {\n            $img_height = $img_infos[1];\n        }\n        if (empty($new_width)) {\n            $new_width  = $img_infos[0];\n        }\n        if (empty($new_height)) {\n            $new_height = $img_infos[1];\n        }\n\n       // Image max size is 500 pixels : is set to 0 no resize\n        if ($max_size > 0) {\n            if (\n                ($img_width > $max_size)\n                || ($img_height > $max_size)\n            ) {\n                $source_aspect_ratio = $img_width / $img_height;\n                if ($source_aspect_ratio < 1) {\n                    $new_width  = ceil($max_size * $source_aspect_ratio);\n                    $new_height = $max_size;\n                } else {\n                    $new_width  = $max_size;\n                    $new_height = ceil($max_size / $source_aspect_ratio);\n                }\n            }\n        }\n\n        $img_type = $img_infos[2];\n\n        switch ($img_type) {\n            case IMAGETYPE_BMP:\n                $source_res = imagecreatefrombmp($source_path);\n                break;\n\n            case IMAGETYPE_GIF:\n                $source_res = imagecreatefromgif($source_path);\n                break;\n\n            case IMAGETYPE_JPEG:\n                $source_res = imagecreatefromjpeg($source_path);\n                break;\n\n            case IMAGETYPE_PNG:\n                $source_res = imagecreatefrompng($source_path);\n                break;\n\n            default:\n                return false;\n        }\n\n       //create new img resource for store thumbnail\n        $source_dest = imagecreatetruecolor($new_width, $new_height);\n\n       // set transparent background for PNG/GIF\n        if ($img_type === IMAGETYPE_GIF || $img_type === IMAGETYPE_PNG) {\n            imagecolortransparent($source_dest, imagecolorallocatealpha($source_dest, 0, 0, 0, 127));\n            imagealphablending($source_dest, false);\n            imagesavealpha($source_dest, true);\n        }\n\n       //resize image\n        imagecopyresampled(\n            $source_dest,\n            $source_res,\n            0,\n            0,\n            $img_x,\n            $img_y,\n            $new_width,\n            $new_height,\n            $img_width,\n            $img_height\n        );\n\n       //output img\n        $result = null;\n        switch ($img_type) {\n            case IMAGETYPE_GIF:\n            case IMAGETYPE_PNG:\n                $result = imagepng($source_dest, $dest_path);\n                break;\n\n            case IMAGETYPE_JPEG:\n            default:\n                $result = imagejpeg($source_dest, $dest_path, 90);\n                break;\n        }\n        return $result;\n    }\n\n\n    /**\n     * Check if new version is available\n     *\n     * @return string\n     **/\n    public static function checkNewVersionAvailable()\n    {\n       //parse github releases (get last version number)\n        $error = \"\";\n        $json_gh_releases = self::getURLContent(\"https://api.github.com/repos/glpi-project/glpi/releases\", $error);\n        $all_gh_releases = json_decode($json_gh_releases, true);\n        $released_tags = [];\n        foreach ($all_gh_releases as $release) {\n            if ($release['prerelease'] == false) {\n                $released_tags[] =  $release['tag_name'];\n            }\n        }\n        usort($released_tags, 'version_compare');\n        $latest_version = array_pop($released_tags);\n\n        if (strlen(trim($latest_version)) == 0) {\n            return $error;\n        } else {\n            $currentVersion = preg_replace('/^((\\d+\\.?)+).*$/', '$1', GLPI_VERSION);\n            if (version_compare($currentVersion, $latest_version, '<')) {\n                Config::setConfigurationValues('core', ['founded_new_version' => $latest_version]);\n                return sprintf(__('A new version is available: %s.'), $latest_version);\n            } else {\n                return __('You have the latest available version');\n            }\n        }\n        return 1;\n    }\n\n\n    /**\n     * Determine if Ldap is usable checking ldap extension existence\n     *\n     * @return boolean\n     **/\n    public static function canUseLdap()\n    {\n        return extension_loaded('ldap');\n    }\n\n\n    /**\n     * Determine if CAS auth is usable checking lib existence\n     *\n     * @since 9.3\n     *\n     * @return boolean\n     **/\n    public static function canUseCas()\n    {\n        return class_exists('phpCAS');\n    }\n\n\n    /**\n     * Check Write Access to a directory\n     *\n     * @param string $dir  directory to check\n     *\n     * @return integer\n     *   0: OK,\n     *   1: delete error,\n     *   2: creation error\n     **/\n    public static function testWriteAccessToDirectory($dir)\n    {\n\n        $rand = rand();\n\n       // Check directory creation which can be denied by SElinux\n        $sdir = sprintf(\"%s/test_glpi_%08x\", $dir, $rand);\n\n        if (!mkdir($sdir)) {\n            return 4;\n        }\n\n        if (!rmdir($sdir)) {\n            return 3;\n        }\n\n       // Check file creation\n        $path = sprintf(\"%s/test_glpi_%08x.txt\", $dir, $rand);\n        $fp   = fopen($path, 'w');\n\n        if (empty($fp)) {\n            return 2;\n        }\n\n        fwrite($fp, \"This file was created for testing reasons. \");\n        fclose($fp);\n        $delete = unlink($path);\n\n        if (!$delete) {\n            return 1;\n        }\n\n        return 0;\n    }\n\n\n    /**\n     * Get form URL for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype Form URL\n     **/\n    public static function getItemTypeFormURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n        if ($plug = isPluginItemType($itemtype)) {\n           /* PluginFooBar => /plugins/foo/front/bar */\n            $dir .= Plugin::getPhpDir(strtolower($plug['plugin']), false);\n            $item = str_replace('\\\\', '/', strtolower($plug['class']));\n        } else { // Standard case\n            $item = strtolower($itemtype);\n            if (substr($itemtype, 0, \\strlen(NS_GLPI)) === NS_GLPI) {\n                $item = str_replace('\\\\', '/', substr($item, \\strlen(NS_GLPI)));\n            }\n        }\n\n        return \"$dir/front/$item.form.php\";\n    }\n\n\n    /**\n     * Get search URL for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype search URL\n     **/\n    public static function getItemTypeSearchURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n        if ($plug = isPluginItemType($itemtype)) {\n            $dir .= Plugin::getPhpDir(strtolower($plug['plugin']), false);\n            $item = str_replace('\\\\', '/', strtolower($plug['class']));\n        } else { // Standard case\n            if ($itemtype == 'Cartridge') {\n                $itemtype = 'CartridgeItem';\n            }\n            if ($itemtype == 'Consumable') {\n                $itemtype = 'ConsumableItem';\n            }\n            $item = strtolower($itemtype);\n            if (substr($itemtype, 0, \\strlen(NS_GLPI)) === NS_GLPI) {\n                $item = str_replace('\\\\', '/', substr($item, \\strlen(NS_GLPI)));\n            }\n        }\n\n        return \"$dir/front/$item.php\";\n    }\n\n\n    /**\n     * Get ajax tabs url for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype tabs URL\n     **/\n    public static function getItemTypeTabsURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $filename = \"/ajax/common.tabs.php\";\n\n        return ($full ? $CFG_GLPI['root_doc'] : '') . $filename;\n    }\n\n\n    /**\n     * Get a random string\n     *\n     * @param integer $length of the random string\n     *\n     * @return string  random string\n     *\n     * @see https://stackoverflow.com/questions/4356289/php-random-string-generator/31107425#31107425\n     **/\n    public static function getRandomString($length)\n    {\n        $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $str = '';\n        $max = mb_strlen($keyspace, '8bit') - 1;\n        for ($i = 0; $i < $length; ++$i) {\n            $str .= $keyspace[random_int(0, $max)];\n        }\n        return $str;\n    }\n\n\n    /**\n     * Split timestamp in time units\n     *\n     * @param integer $time  timestamp\n     *\n     * @return array\n     **/\n    public static function getTimestampTimeUnits($time)\n    {\n\n        $out = [];\n\n        $time          = round(abs($time));\n        $out['second'] = 0;\n        $out['minute'] = 0;\n        $out['hour']   = 0;\n        $out['day']    = 0;\n\n        $out['second'] = $time % MINUTE_TIMESTAMP;\n        $time         -= $out['second'];\n\n        if ($time > 0) {\n            $out['minute'] = ($time % HOUR_TIMESTAMP) / MINUTE_TIMESTAMP;\n            $time         -= $out['minute'] * MINUTE_TIMESTAMP;\n\n            if ($time > 0) {\n                $out['hour'] = ($time % DAY_TIMESTAMP) / HOUR_TIMESTAMP;\n                $time       -= $out['hour'] * HOUR_TIMESTAMP;\n\n                if ($time > 0) {\n                    $out['day'] = $time / DAY_TIMESTAMP;\n                }\n            }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Get a web page. Use proxy if configured\n     *\n     * @param string  $url    URL to retrieve\n     * @param string  $msgerr set if problem encountered (default NULL)\n     * @param integer $rec    internal use only Must be 0 (default 0)\n     *\n     * @return string content of the page (or empty)\n     **/\n    public static function getURLContent($url, &$msgerr = null, $rec = 0)\n    {\n        $content = self::callCurl($url);\n        return $content;\n    }\n\n    /**\n     * Executes a curl call\n     *\n     * @param string $url         URL to retrieve\n     * @param array  $eopts       Extra curl opts\n     * @param string $msgerr      will contains a human readable error string if an error occurs of url returns empty contents\n     * @param string $curl_error  will contains original curl error string if an error occurs\n     *\n     * @return string\n     */\n    public static function callCurl($url, array $eopts = [], &$msgerr = null, &$curl_error = null)\n    {\n        global $CFG_GLPI;\n\n        $content = \"\";\n        $taburl  = parse_url($url);\n\n        $defaultport = 80;\n\n       // Manage standard HTTPS port : scheme detection or port 443\n        if (\n            (isset($taburl[\"scheme\"]) && $taburl[\"scheme\"] == 'https')\n            || (isset($taburl[\"port\"]) && $taburl[\"port\"] == '443')\n        ) {\n            $defaultport = 443;\n        }\n\n        $ch = curl_init($url);\n        $opts = [\n            CURLOPT_URL             => $url,\n            CURLOPT_USERAGENT       => \"GLPI/\" . trim($CFG_GLPI[\"version\"]),\n            CURLOPT_RETURNTRANSFER  => 1,\n            CURLOPT_CONNECTTIMEOUT  => 5,\n        ] + $eopts;\n\n        if (!empty($CFG_GLPI[\"proxy_name\"])) {\n           // Connection using proxy\n            $opts += [\n                CURLOPT_PROXY           => $CFG_GLPI['proxy_name'],\n                CURLOPT_PROXYPORT       => $CFG_GLPI['proxy_port'],\n                CURLOPT_PROXYTYPE       => CURLPROXY_HTTP\n            ];\n\n            if (!empty($CFG_GLPI[\"proxy_user\"])) {\n                $opts += [\n                    CURLOPT_PROXYAUTH    => CURLAUTH_BASIC,\n                    CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . (new GLPIKey())->decrypt($CFG_GLPI[\"proxy_passwd\"]),\n                ];\n            }\n\n            if ($defaultport == 443) {\n                $opts += [\n                    CURLOPT_HTTPPROXYTUNNEL => 1\n                ];\n            }\n        }\n\n        curl_setopt_array($ch, $opts);\n        $content = curl_exec($ch);\n        $curl_error = curl_error($ch) ?: null;\n        curl_close($ch);\n\n        if ($curl_error !== null) {\n            if (empty($CFG_GLPI[\"proxy_name\"])) {\n               //TRANS: %s is the error string\n                $msgerr = sprintf(\n                    __('Connection failed. If you use a proxy, please configure it. (%s)'),\n                    $curl_error\n                );\n            } else {\n               //TRANS: %s is the error string\n                $msgerr = sprintf(\n                    __('Failed to connect to the proxy server (%s)'),\n                    $curl_error\n                );\n            }\n            $content = '';\n        } else if (empty($content)) {\n            $msgerr = __('No data available on the web site');\n        }\n        if (!empty($msgerr)) {\n            trigger_error($msgerr, E_USER_WARNING);\n        }\n        return $content;\n    }\n\n    /**\n     * Returns whether this is an AJAX (XMLHttpRequest) request.\n     *\n     * @return boolean whether this is an AJAX (XMLHttpRequest) request.\n     */\n    public static function isAjax()\n    {\n        return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest';\n    }\n\n\n    /**\n     * @param $need\n     * @param $tab\n     *\n     * @return boolean\n     **/\n    public static function key_exists_deep($need, $tab)\n    {\n\n        foreach ($tab as $key => $value) {\n            if ($need == $key) {\n                return true;\n            }\n\n            if (\n                is_array($value)\n                && self::key_exists_deep($need, $value)\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Manage planning posted datas (must have begin + duration or end)\n     * Compute end if duration is set\n     *\n     * @param array $data  data to process\n     *\n     * @return void\n     **/\n    public static function manageBeginAndEndPlanDates(&$data)\n    {\n\n        if (!isset($data['end'])) {\n            if (\n                isset($data['begin'])\n                && isset($data['_duration'])\n            ) {\n                $begin_timestamp = strtotime($data['begin']);\n                $data['end']     = date(\"Y-m-d H:i:s\", $begin_timestamp + $data['_duration']);\n                unset($data['_duration']);\n            }\n        }\n    }\n\n\n    /**\n     * Manage login redirection\n     *\n     * @param string $where  where to redirect ?\n     *\n     * @return void\n     **/\n    public static function manageRedirect($where)\n    {\n        global $CFG_GLPI;\n\n        if (!empty($where)) {\n            if (Session::getCurrentInterface()) {\n                // redirect to URL : URL must be rawurlencoded\n                $decoded_where = rawurldecode($where);\n                $matches = [];\n\n                // redirect to full url -> check if it's based on glpi url\n                if (preg_match('@(([^:/].+:)?//[^/]+)(/.+)?@', $decoded_where, $matches)) {\n                    if ($matches[1] !== $CFG_GLPI['url_base']) {\n                        Session::addMessageAfterRedirect('Redirection failed');\n                        if (Session::getCurrentInterface() === \"helpdesk\") {\n                            Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                        } else {\n                            Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/central.php\");\n                        }\n                    } else {\n                        Html::redirect($decoded_where);\n                    }\n                }\n\n                // Redirect to relative url -> redirect with glpi url to prevent exploits\n                if ($decoded_where[0] == '/') {\n                    $redirect_to = $CFG_GLPI[\"url_base\"] . $decoded_where;\n                   //echo $redirect_to; exit();\n                    Html::redirect($redirect_to);\n                }\n\n                $data = explode(\"_\", $where);\n                $forcetab = '';\n                // forcetab for simple items\n                if (isset($data[2])) {\n                    $forcetab = 'forcetab=' . $data[2];\n                }\n\n                switch (Session::getCurrentInterface()) {\n                    case \"helpdesk\":\n                        switch (strtolower($data[0])) {\n                              // Use for compatibility with old name\n                            case \"tracking\":\n                            case \"ticket\":\n                                $data[0] = 'Ticket';\n                             // redirect to item\n                                if (\n                                    isset($data[1])\n                                    && is_numeric($data[1])\n                                    && ($data[1] > 0)\n                                ) {\n                                    // Check entity\n                                    if (\n                                        ($item = getItemForItemtype($data[0]))\n                                        && $item->isEntityAssign()\n                                    ) {\n                                        if ($item->getFromDB($data[1])) {\n                                            if (!Session::haveAccessToEntity($item->getEntityID())) {\n                                                Session::changeActiveEntities($item->getEntityID(), 1);\n                                            }\n                                        }\n                                    }\n                                  // force redirect to timeline when timeline is enabled and viewing\n                                  // Tasks or Followups\n                                    $forcetab = str_replace('TicketFollowup$1', 'Ticket$1', $forcetab);\n                                    $forcetab = str_replace('TicketTask$1', 'Ticket$1', $forcetab);\n                                    $forcetab = str_replace('ITILFollowup$1', 'Ticket$1', $forcetab);\n                                    Html::redirect(Ticket::getFormURLWithID($data[1]) . \"&$forcetab\");\n                                } else if (!empty($data[0])) { // redirect to list\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        $searchUrl = $item->getSearchURL();\n                                        $searchUrl .= strpos($searchUrl, '?') === false ? '?' : '&';\n                                        $searchUrl .= $forcetab;\n                                        Html::redirect($searchUrl);\n                                    }\n                                }\n\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                                break;\n\n                            case \"preference\":\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/preference.php?$forcetab\");\n                                break;\n\n                            case \"reservation\":\n                                Html::redirect(Reservation::getFormURLWithID($data[1]) . \"&$forcetab\");\n                                break;\n\n                            default:\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                                break;\n                        }\n                        break;\n\n                    case \"central\":\n                        switch (strtolower($data[0])) {\n                            case \"preference\":\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/preference.php?$forcetab\");\n                                break;\n\n                           // Use for compatibility with old name\n                           // no break\n                            case \"tracking\":\n                                $data[0] = \"Ticket\";\n                             //var defined, use default case\n\n                            default:\n                             // redirect to item\n                                if (\n                                    !empty($data[0])\n                                    && isset($data[1])\n                                    && is_numeric($data[1])\n                                    && ($data[1] > 0)\n                                ) {\n                                    // Check entity\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        if ($item->isEntityAssign()) {\n                                            if ($item->getFromDB($data[1])) {\n                                                if (!Session::haveAccessToEntity($item->getEntityID())) {\n                                                    Session::changeActiveEntities($item->getEntityID(), 1);\n                                                }\n                                            }\n                                        }\n                                    // force redirect to timeline when timeline is enabled\n                                        $forcetab = str_replace('TicketFollowup$1', 'Ticket$1', $forcetab);\n                                        $forcetab = str_replace('TicketTask$1', 'Ticket$1', $forcetab);\n                                        $forcetab = str_replace('ITILFollowup$1', 'Ticket$1', $forcetab);\n                                        Html::redirect($item->getFormURLWithID($data[1]) . \"&$forcetab\");\n                                    }\n                                } else if (!empty($data[0])) { // redirect to list\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        $searchUrl = $item->getSearchURL();\n                                        $searchUrl .= strpos($searchUrl, '?') === false ? '?' : '&';\n                                        $searchUrl .= $forcetab;\n                                        Html::redirect($searchUrl);\n                                    }\n                                }\n\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/central.php\");\n                                break;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Convert a value in byte, kbyte, megabyte etc...\n     *\n     * @param string $val  config value (like 10k, 5M)\n     *\n     * @return integer $val\n     **/\n    public static function return_bytes_from_ini_vars($val)\n    {\n\n        $val  = trim($val);\n        $last = self::strtolower($val[strlen($val) - 1]);\n        $val  = (int)$val;\n\n        switch ($last) {\n           // Le modifieur 'G' est disponible depuis PHP 5.1.0\n            case 'g':\n                $val *= 1024;\n                // no break;\n\n            case 'm':\n                $val *= 1024;\n                // no break;\n\n            case 'k':\n                $val *= 1024;\n                // no break;\n        }\n\n        return $val;\n    }\n\n\n    /**\n     * Get max upload size from php config.\n     *\n     * @return int\n     */\n    public static function getPhpUploadSizeLimit(): int\n    {\n        $post_max   = Toolbox::return_bytes_from_ini_vars(ini_get(\"post_max_size\"));\n        $upload_max = Toolbox::return_bytes_from_ini_vars(ini_get(\"upload_max_filesize\"));\n        $max_size   = $post_max > 0 ? min($post_max, $upload_max) : $upload_max;\n        return $max_size;\n    }\n\n    /**\n     * Parse imap open connect string\n     *\n     * @since 0.84\n     *\n     * @param string  $value      connect string\n     * @param boolean $forceport  force compute port if not set\n     *\n     * @return array  parsed arguments (address, port, mailbox, type, ssl, tls, validate-cert\n     *                norsh, secure and debug) : options are empty if not set\n     *                and options have boolean values if set\n     **/\n    public static function parseMailServerConnectString($value, $forceport = false)\n    {\n\n        $tab = [];\n        if (strstr($value, \":\")) {\n            $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/:.*/\", \"\", $value));\n            $tab['port']    = preg_replace(\"/.*:/\", \"\", preg_replace(\"/\\/.*/\", \"\", $value));\n        } else {\n            if (strstr($value, \"/\")) {\n                $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/\\/.*/\", \"\", $value));\n            } else {\n                $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/}.*/\", \"\", $value));\n            }\n            $tab['port'] = \"\";\n        }\n        $tab['mailbox'] = preg_replace(\"/.*}/\", \"\", $value);\n\n       // type follows first found \"/\" and ends on next \"/\" (or end of server string)\n       // server string is surrounded by \"{}\" and can be followed by a folder name\n       // i.e. \"{mail.domain.org/imap/ssl}INBOX\", or \"{mail.domain.org/pop}\"\n        $type = preg_replace('/^\\{[^\\/]+\\/([^\\/]+)(?:\\/.+)*\\}.*/', '$1', $value);\n        $tab['type'] = in_array($type, array_keys(self::getMailServerProtocols())) ? $type : '';\n\n        $tab['ssl'] = false;\n        if (strstr($value, \"/ssl\")) {\n            $tab['ssl'] = true;\n        }\n\n        if ($forceport && empty($tab['port'])) {\n            if ($tab['type'] == 'pop') {\n                if ($tab['ssl']) {\n                    $tab['port'] = 110;\n                } else {\n                    $tab['port'] = 995;\n                }\n            }\n            if ($tab['type'] = 'imap') {\n                if ($tab['ssl']) {\n                    $tab['port'] = 993;\n                } else {\n                    $tab['port'] = 143;\n                }\n            }\n        }\n        $tab['tls'] = '';\n        if (strstr($value, \"/tls\")) {\n            $tab['tls'] = true;\n        }\n        if (strstr($value, \"/notls\")) {\n            $tab['tls'] = false;\n        }\n        $tab['validate-cert'] = '';\n        if (strstr($value, \"/validate-cert\")) {\n            $tab['validate-cert'] = true;\n        }\n        if (strstr($value, \"/novalidate-cert\")) {\n            $tab['validate-cert'] = false;\n        }\n        $tab['norsh'] = '';\n        if (strstr($value, \"/norsh\")) {\n            $tab['norsh'] = true;\n        }\n        $tab['secure'] = '';\n        if (strstr($value, \"/secure\")) {\n            $tab['secure'] = true;\n        }\n        $tab['debug'] = '';\n        if (strstr($value, \"/debug\")) {\n            $tab['debug'] = true;\n        }\n\n        return $tab;\n    }\n\n\n    /**\n     * Display a mail server configuration form\n     *\n     * @param string $value  host connect string ex {localhost:993/imap/ssl}INBOX\n     *\n     * @return string  type of the server (imap/pop)\n     **/\n    public static function showMailServerConfig($value)\n    {\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $tab = Toolbox::parseMailServerConnectString($value);\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Server') . \"</td>\";\n        echo \"<td><input size='30' class='form-control' type='text' name='mail_server' value=\\\"\" . $tab['address'] . \"\\\">\";\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Connection options') . \"</td><td>\";\n        $values = [];\n        $protocols = Toolbox::getMailServerProtocols();\n        foreach ($protocols as $key => $params) {\n            $values['/' . $key] = $params['label'];\n        }\n        $svalue = (!empty($tab['type']) ? '/' . $tab['type'] : '');\n\n        Dropdown::showFromArray(\n            'server_type',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/ssl' => __('SSL')\n        ];\n\n        $svalue = ($tab['ssl'] ? '/ssl' : '');\n\n        Dropdown::showFromArray(\n            'server_ssl',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/tls' => __('TLS'),\n                     //TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/notls' => __('NO-TLS'),\n        ];\n\n        $svalue = '';\n        if (($tab['tls'] === true)) {\n            $svalue = '/tls';\n        }\n        if (($tab['tls'] === false)) {\n            $svalue = '/notls';\n        }\n\n        Dropdown::showFromArray(\n            'server_tls',\n            $values,\n            ['value'               => $svalue,\n                'width'               => '14%',\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/novalidate-cert' => __('NO-VALIDATE-CERT'),\n                     //TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/validate-cert' => __('VALIDATE-CERT'),\n        ];\n\n        $svalue = '';\n        if (($tab['validate-cert'] === false)) {\n            $svalue = '/novalidate-cert';\n        }\n        if (($tab['validate-cert'] === true)) {\n            $svalue = '/validate-cert';\n        }\n\n        Dropdown::showFromArray(\n            'server_cert',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/norsh' => __('NORSH')\n        ];\n\n        $svalue = ($tab['norsh'] === true ? '/norsh' : '');\n\n        Dropdown::showFromArray(\n            'server_rsh',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/secure' => __('SECURE')\n        ];\n\n        $svalue = ($tab['secure'] === true ? '/secure' : '');\n\n        Dropdown::showFromArray(\n            'server_secure',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/debug' => __('DEBUG')\n        ];\n\n        $svalue = ($tab['debug'] === true ? '/debug' : '');\n\n        Dropdown::showFromArray(\n            'server_debug',\n            $values,\n            ['value'               => $svalue,\n                'width'               => '12%',\n                'display_emptychoice' => true\n            ]\n        );\n\n        echo \"<input type=hidden name=imap_string value='\" . $value . \"'>\";\n        echo \"</td></tr>\\n\";\n\n        if ($tab['type'] != 'pop') {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Incoming mail folder (optional, often INBOX)') . \"</td>\";\n            echo \"<td>\";\n            echo \"<div class='btn-group btn-group-sm'>\";\n            echo \"<input size='30' class='form-control' type='text' id='server_mailbox' name='server_mailbox' value=\\\"\" . $tab['mailbox'] . \"\\\" >\";\n            echo \"<div class='btn btn-outline-secondary get-imap-folder'>\";\n            echo \"<i class='fa fa-list pointer'></i>\";\n            echo \"</div>\";\n            echo \"</div></td></tr>\\n\";\n        }\n\n       //TRANS: for mail connection system\n        echo \"<tr class='tab_bg_1'><td>\" . __('Port (optional)') . \"</td>\";\n        echo \"<td><input size='10' class='form-control' type='text' name='server_port' value='\" . $tab['port'] . \"'></td></tr>\\n\";\n        if (empty($value)) {\n            $value = \"&nbsp;\";\n        }\n       //TRANS: for mail connection system\n        echo \"<tr class='tab_bg_1'><td>\" . __('Connection string') . \"</td>\";\n        echo \"<td class='b'>$value</td></tr>\\n\";\n\n        return $tab['type'];\n    }\n\n\n    /**\n     * @param array $input\n     *\n     * @return string\n     **/\n    public static function constructMailServerConfig($input)\n    {\n\n        $out = \"\";\n        if (isset($input['mail_server']) && !empty($input['mail_server'])) {\n            $out .= \"{\" . $input['mail_server'];\n        } else {\n            return $out;\n        }\n        if (isset($input['server_port']) && !empty($input['server_port'])) {\n            $out .= \":\" . $input['server_port'];\n        }\n        if (isset($input['server_type']) && !empty($input['server_type'])) {\n            $out .= $input['server_type'];\n        }\n        if (isset($input['server_ssl']) && !empty($input['server_ssl'])) {\n            $out .= $input['server_ssl'];\n        }\n        if (isset($input['server_cert']) && !empty($input['server_cert'])) {\n            $out .= $input['server_cert'];\n        }\n        if (isset($input['server_tls']) && !empty($input['server_tls'])) {\n            $out .= $input['server_tls'];\n        }\n\n        if (isset($input['server_rsh']) && !empty($input['server_rsh'])) {\n            $out .= $input['server_rsh'];\n        }\n        if (isset($input['server_secure']) && !empty($input['server_secure'])) {\n            $out .= $input['server_secure'];\n        }\n        if (isset($input['server_debug']) && !empty($input['server_debug'])) {\n            $out .= $input['server_debug'];\n        }\n        $out .= \"}\";\n        if (isset($input['server_mailbox']) && !empty($input['server_mailbox'])) {\n            $out .= $input['server_mailbox'];\n        }\n\n        return $out;\n    }\n\n    /**\n     * Retuns available mail servers protocols.\n     *\n     * For each returned element:\n     *  - key is type used in connection string;\n     *  - 'label' field is the label to display;\n     *  - 'protocol_class' field is the protocol class to use (see Laminas\\Mail\\Protocol\\Imap | Laminas\\Mail\\Protocol\\Pop3);\n     *  - 'storage_class' field is the storage class to use (see Laminas\\Mail\\Storage\\Imap | Laminas\\Mail\\Storage\\Pop3).\n     *\n     * @return array\n     */\n    private static function getMailServerProtocols(): array\n    {\n        $protocols = [\n            'imap' => [\n            //TRANS: IMAP mail server protocol\n                'label'    => __('IMAP'),\n                'protocol' => 'Laminas\\Mail\\Protocol\\Imap',\n                'storage'  => 'Laminas\\Mail\\Storage\\Imap',\n            ],\n            'pop'  => [\n            //TRANS: POP3 mail server protocol\n                'label'    => __('POP'),\n                'protocol' => 'Laminas\\Mail\\Protocol\\Pop3',\n                'storage'  => 'Laminas\\Mail\\Storage\\Pop3',\n            ]\n        ];\n\n        $additionnal_protocols = Plugin::doHookFunction('mail_server_protocols', []);\n        if (is_array($additionnal_protocols)) {\n            foreach ($additionnal_protocols as $key => $additionnal_protocol) {\n                if (array_key_exists($key, $protocols)) {\n                    trigger_error(\n                        sprintf('Protocol \"%s\" is already defined and cannot be overwritten.', $key),\n                        E_USER_WARNING\n                    );\n                     continue; // already exists, do not overwrite\n                }\n\n                if (\n                    !array_key_exists('label', $additionnal_protocol)\n                    || !array_key_exists('protocol', $additionnal_protocol)\n                    || !array_key_exists('storage', $additionnal_protocol)\n                ) {\n                    trigger_error(\n                        sprintf('Invalid specs for protocol \"%s\".', $key),\n                        E_USER_WARNING\n                    );\n                    continue;\n                }\n                $protocols[$key] = $additionnal_protocol;\n            }\n        } else {\n            trigger_error(\n                'Invalid value returned by \"mail_server_protocols\" hook.',\n                E_USER_WARNING\n            );\n        }\n\n        return $protocols;\n    }\n\n    /**\n     * Returns protocol instance for given mail server type.\n     *\n     * Class should implements Glpi\\Mail\\Protocol\\ProtocolInterface\n     * or should be \\Laminas\\Mail\\Protocol\\Imap|\\Laminas\\Mail\\Protocol\\Pop3 for native protocols.\n     *\n     * @param string $protocol_type\n     *\n     * @return null|\\Glpi\\Mail\\Protocol\\ProtocolInterface|\\Laminas\\Mail\\Protocol\\Imap|\\Laminas\\Mail\\Protocol\\Pop3\n     */\n    public static function getMailServerProtocolInstance(string $protocol_type)\n    {\n        $protocols = self::getMailServerProtocols();\n        if (array_key_exists($protocol_type, $protocols)) {\n            $protocol = $protocols[$protocol_type]['protocol'];\n            if (is_callable($protocol)) {\n                return call_user_func($protocol);\n            } else if (\n                class_exists($protocol)\n                && (is_a($protocol, ProtocolInterface::class, true)\n                 || is_a($protocol, \\Laminas\\Mail\\Protocol\\Imap::class, true)\n                 || is_a($protocol, \\Laminas\\Mail\\Protocol\\Pop3::class, true))\n            ) {\n                return new $protocol();\n            } else {\n                trigger_error(\n                    sprintf('Invalid specs for protocol \"%s\".', $protocol_type),\n                    E_USER_WARNING\n                );\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Returns storage instance for given mail server type.\n     *\n     * Class should extends \\Laminas\\Mail\\Storage\\AbstractStorage.\n     *\n     * @param string $protocol_type\n     * @param array  $params         Storage constructor params, as defined in AbstractStorage\n     *\n     * @return null|AbstractStorage\n     */\n    public static function getMailServerStorageInstance(string $protocol_type, array $params): ?AbstractStorage\n    {\n        $protocols = self::getMailServerProtocols();\n        if (array_key_exists($protocol_type, $protocols)) {\n            $storage = $protocols[$protocol_type]['storage'];\n            if (is_callable($storage)) {\n                return call_user_func($storage, $params);\n            } else if (class_exists($storage) && is_a($storage, AbstractStorage::class, true)) {\n                return new $storage($params);\n            } else {\n                trigger_error(\n                    sprintf('Invalid specs for protocol \"%s\".', $protocol_type),\n                    E_USER_WARNING\n                );\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getDaysOfWeekArray()\n    {\n\n        $tab = [];\n\n        $tab[0] = __(\"Sunday\");\n        $tab[1] = __(\"Monday\");\n        $tab[2] = __(\"Tuesday\");\n        $tab[3] = __(\"Wednesday\");\n        $tab[4] = __(\"Thursday\");\n        $tab[5] = __(\"Friday\");\n        $tab[6] = __(\"Saturday\");\n\n        return $tab;\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getMonthsOfYearArray()\n    {\n\n        $tab = [];\n\n        $tab[1]  = __(\"January\");\n        $tab[2]  = __(\"February\");\n        $tab[3]  = __(\"March\");\n        $tab[4]  = __(\"April\");\n        $tab[5]  = __(\"May\");\n        $tab[6]  = __(\"June\");\n        $tab[7]  = __(\"July\");\n        $tab[8]  = __(\"August\");\n        $tab[9]  = __(\"September\");\n        $tab[10] = __(\"October\");\n        $tab[11] = __(\"November\");\n        $tab[12] = __(\"December\");\n\n        return $tab;\n    }\n\n\n    /**\n     * Do a in_array search comparing string using strcasecmp\n     *\n     * @since 0.84\n     *\n     * @param string $string  string to search\n     * @param array  $data    array to search in\n     *\n     * @return boolean  string found ?\n     **/\n    public static function inArrayCaseCompare($string, $data = [])\n    {\n\n        if (count($data)) {\n            foreach ($data as $tocheck) {\n                if (strcasecmp($string, $tocheck) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Clean integer string value (strip all chars not - and spaces )\n     *\n     * @since versin 0.83.5\n     *\n     * @param string  $integer  integer string\n     *\n     * @return string  clean integer\n     **/\n    public static function cleanInteger($integer)\n    {\n        return preg_replace(\"/[^0-9-]/\", \"\", (string)$integer);\n    }\n\n\n    /**\n     * Clean decimal string value (strip all chars not - and spaces )\n     *\n     * @since versin 0.83.5\n     *\n     * @param string $decimal  float string\n     *\n     * @return string  clean decimal\n     **/\n    public static function cleanDecimal($decimal)\n    {\n        return preg_replace(\"/[^0-9\\.-]/\", \"\", $decimal);\n    }\n\n\n    /**\n     * Clean new lines of a string\n     *\n     * @since versin 0.85\n     *\n     * @param string $string  string to clean\n     *\n     * @return string  clean string\n     **/\n    public static function cleanNewLines($string)\n    {\n\n        $string = preg_replace(\"/\\r\\n/\", \" \", $string);\n        $string = preg_replace(\"/\\n/\", \" \", $string);\n        $string = preg_replace(\"/\\r/\", \" \", $string);\n        return $string;\n    }\n\n\n    /**\n     * Create the GLPI default schema\n     *\n     * @param string  $lang Language to install\n     * @param DBmysql $db   Database instance to use, will fallback to a new instance of DB if null\n     *\n     * @return void\n     *\n     * @since 9.1\n     * @since 9.4.7 Added $db parameter\n     **/\n    public static function createSchema($lang = 'en_GB', DBmysql $database = null)\n    {\n        global $DB;\n\n        if (null === $database) {\n           // Use configured DB if no $db is defined in parameters\n            include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n            $database = new DB();\n        }\n\n       // Set global $DB as it is used in \"Config::setConfigurationValues()\" just after schema creation\n        $DB = $database;\n\n        $normalized_nersion = VersionParser::getNormalizedVersion(GLPI_VERSION, false);\n        if (!$DB->runFile(sprintf('%s/install/mysql/glpi-%s-empty.sql', GLPI_ROOT, $normalized_nersion))) {\n            echo \"Errors occurred inserting default database\";\n        } else {\n           //dataset\n            Session::loadLanguage($lang, false); // Load default language locales to translate empty data\n            $tables = require_once(__DIR__ . '/../install/empty_data.php');\n            Session::loadLanguage('', false); // Load back session language\n\n            foreach ($tables as $table => $data) {\n                $reference = array_replace(\n                    $data[0],\n                    array_fill_keys(\n                        array_keys($data[0]),\n                        new QueryParam()\n                    )\n                );\n\n                $stmt = $DB->prepare($DB->buildInsert($table, $reference));\n                if (false === $stmt) {\n                     $msg = \"Error preparing statement in table $table\";\n                     throw new \\RuntimeException($msg);\n                }\n\n                $types = str_repeat('s', count($data[0]));\n                foreach ($data as $row) {\n                    $res = $stmt->bind_param($types, ...array_values($row));\n                    if (false === $res) {\n                        $msg = \"Error binding params in table $table\\n\";\n                        $msg .= print_r($row, true);\n                        throw new \\RuntimeException($msg);\n                    }\n                    $res = $stmt->execute();\n                    if (false === $res) {\n                        $msg = $stmt->error;\n                        $msg .= \"\\nError execution statement in table $table\\n\";\n                        $msg .= print_r($row, true);\n                        throw new \\RuntimeException($msg);\n                    }\n                    if (!isCommandLine()) {\n                         // Flush will prevent proxy to timeout as it will receive data.\n                         // Flush requires a content to be sent, so we sent spaces as multiple spaces\n                         // will be shown as a single one on browser.\n                         echo ' ';\n                         Html::glpi_flush();\n                    }\n                }\n            }\n\n           //rules\n            RuleImportAsset::initRules();\n\n           // update default language\n            Config::setConfigurationValues(\n                'core',\n                [\n                    'language'      => $lang,\n                    'version'       => GLPI_VERSION,\n                    'dbversion'     => GLPI_SCHEMA_VERSION,\n                ]\n            );\n\n            if (defined('GLPI_SYSTEM_CRON')) {\n               // Downstream packages may provide a good system cron\n                $DB->updateOrDie(\n                    'glpi_crontasks',\n                    [\n                        'mode'   => 2\n                    ],\n                    [\n                        'name'      => ['!=', 'watcher'],\n                        'allowmode' => ['&', 2]\n                    ],\n                    '4203'\n                );\n            }\n        }\n    }\n\n\n    /**\n     * Save a configuration file\n     *\n     * @since 0.84\n     *\n     * @param string $name        config file name\n     * @param string $content     config file content\n     * @param string $config_dir  configuration directory to write on\n     *\n     * @return boolean\n     **/\n    public static function writeConfig($name, $content, string $config_dir = GLPI_CONFIG_DIR)\n    {\n\n        $name = $config_dir . '/' . $name;\n        $fp   = fopen($name, 'wt');\n        if ($fp) {\n            $fw = fwrite($fp, $content);\n            fclose($fp);\n            if (function_exists('opcache_invalidate')) {\n                /* Invalidate Zend OPcache to ensure saved version used */\n                opcache_invalidate($name, true);\n            }\n            return ($fw > 0);\n        }\n        return false;\n    }\n\n\n    /**\n     * Prepare array passed on an input form\n     *\n     * @param array $value  passed array\n     *\n     * @return string  encoded array\n     *\n     * @since 0.83.91\n     **/\n    public static function prepareArrayForInput(array $value)\n    {\n        return base64_encode(json_encode($value));\n    }\n\n\n    /**\n     * Decode array passed on an input form\n     *\n     * @param string $value  encoded value\n     *\n     * @return string  decoded array\n     *\n     * @since 0.83.91\n     **/\n    public static function decodeArrayFromInput($value)\n    {\n\n        if ($dec = base64_decode($value)) {\n            if ($ret = json_decode($dec, true)) {\n                return $ret;\n            }\n        }\n        return [];\n    }\n\n\n    /**\n     * Check valid referer accessing GLPI\n     *\n     * @since 0.84.2\n     *\n     * @return void  display error if not permit\n     **/\n    public static function checkValidReferer()\n    {\n        global $CFG_GLPI;\n\n        $isvalidReferer = true;\n\n        if (!isset($_SERVER['HTTP_REFERER'])) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"No HTTP_REFERER found in request. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        } else if (!is_array($url = parse_url($_SERVER['HTTP_REFERER']))) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"Error when parsing HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (\n            !isset($url['host'])\n            || (($url['host'] != $_SERVER['SERVER_NAME'])\n            && (!isset($_SERVER['HTTP_X_FORWARDED_SERVER'])\n               || ($url['host'] != $_SERVER['HTTP_X_FORWARDED_SERVER'])))\n        ) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"None or Invalid host in HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (\n            !isset($url['path'])\n            || (!empty($CFG_GLPI['root_doc'])\n            && (strpos($url['path'], $CFG_GLPI['root_doc']) !== 0))\n        ) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"None or Invalid path in HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (!$isvalidReferer && $_SESSION['glpi_use_mode'] != Session::DEBUG_MODE) {\n            Html::displayErrorAndDie(\n                __(\"The action you have requested is not allowed. Reload previous page before doing action again.\"),\n                true\n            );\n        }\n    }\n\n\n    /**\n     * Retrieve the mime type of a file\n     *\n     * @since 0.85.5\n     *\n     * @param string         $file  path of the file\n     * @param boolean|string $type  check if $file is the correct type\n     *\n     * @return boolean|string (if $type not given) else boolean\n     *\n     **/\n    public static function getMime($file, $type = false)\n    {\n\n        static $finfo = null;\n\n        if (is_null($finfo)) {\n            $finfo = new finfo(FILEINFO_MIME_TYPE);\n        }\n        $mime = $finfo->file($file);\n        if ($type) {\n            $parts = explode('/', $mime, 2);\n            return ($parts[0] == $type);\n        }\n        return ($mime);\n    }\n\n\n    /**\n     * Summary of in_array_recursive\n     *\n     * @since 9.1\n     *\n     * @param mixed $needle\n     * @param array $haystack\n     * @param bool  $strict: If strict is set to TRUE then it will also\n     *              check the types of the needle in the haystack.\n     * @return bool\n     */\n    public static function in_array_recursive($needle, $haystack, $strict = false)\n    {\n\n        $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));\n\n        foreach ($it as $element) {\n            if ($strict) {\n                if ($element === $needle) {\n                    return true;\n                }\n            } else {\n                if ($element == $needle) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Slugify\n     *\n     * @param string $string String to slugify\n     * @param string $prefix Prefix to use (anchors cannot begin with a number)\n     *\n     * @return string\n     */\n    public static function slugify($string, $prefix = 'slug_')\n    {\n        $string = transliterator_transliterate(\"Any-Latin; Latin-ASCII; [^a-zA-Z0-9\\.\\ -_] Remove;\", $string);\n        $string = str_replace(' ', '-', self::strtolower($string, 'UTF-8'));\n        $string = preg_replace('~[^0-9a-z_\\.]+~i', '-', $string);\n        $string = trim($string, '-');\n        if ($string == '') {\n           //prevent empty slugs; see https://github.com/glpi-project/glpi/issues/2946\n           //harcoded prefix string because html @id must begin with a letter\n            $string = 'nok_' . Toolbox::getRandomString(10);\n        } else if (ctype_digit(substr($string, 0, 1))) {\n           //starts with a number; not ok to be used as an html id attribute\n            $string = $prefix . $string;\n        }\n        return $string;\n    }\n\n    /**\n     * Find documents data matching the tags found in the string\n     * Tags are deduplicated\n     *\n     * @param string $content_text String to search tags from\n     *\n     * @return array data from documents having tags found\n     */\n    public static function getDocumentsFromTag(string $content_text): array\n    {\n        preg_match_all(\n            '/' . Document::getImageTag('(([a-z0-9]+|[\\.\\-]?)+)') . '/',\n            $content_text,\n            $matches,\n            PREG_PATTERN_ORDER\n        );\n        if (!isset($matches[1]) || count($matches[1]) == 0) {\n            return [];\n        }\n\n        $document = new Document();\n        return $document->find(['tag' => array_unique($matches[1])]);\n    }\n\n    /**\n     * Convert tag to image\n     *\n     * @since 9.2\n     *\n     * @param string $content_text   text content of input\n     * @param CommonDBTM $item       Glpi item where to convert image tag to image document\n     * @param array $doc_data        list of filenames and tags\n     *\n     * @return string                the $content_text param after parsing\n     **/\n    public static function convertTagToImage($content_text, CommonDBTM $item, $doc_data = [])\n    {\n        global $CFG_GLPI;\n\n        $document = new Document();\n        $matches  = [];\n       // If no doc data available we match all tags in content\n        if (!count($doc_data)) {\n            $doc_data = Toolbox::getDocumentsFromTag($content_text);\n        }\n\n        if (count($doc_data)) {\n            $base_path = $CFG_GLPI['root_doc'];\n\n            $was_html_encoded = Sanitizer::isHtmlEncoded($content_text);\n            $was_escaped      = Sanitizer::isDbEscaped($content_text);\n            if ($was_html_encoded) {\n                $content_text = Sanitizer::decodeHtmlSpecialChars($content_text);\n            }\n            if ($was_escaped) {\n                $content_text = Sanitizer::dbUnescape($content_text);\n            }\n\n            foreach ($doc_data as $id => $image) {\n                if (isset($image['tag'])) {\n                   // Add only image files : try to detect mime type\n                    if (\n                        $document->getFromDB($id)\n                        && strpos($document->fields['mime'], 'image/') !== false\n                    ) {\n                        // append object reference in image link\n                        $linked_object = null;\n                        if (\n                              !($item instanceof CommonITILObject)\n                              && isset($item->input['_job'])\n                              && $item->input['_job'] instanceof CommonITILObject\n                        ) {\n                            $linked_object = $item->input['_job'];\n                        } else if ($item instanceof CommonDBTM) {\n                            $linked_object = $item;\n                        }\n                        $object_url_param = null !== $linked_object\n                        ? sprintf('&itemtype=%s&items_id=%s', $linked_object->getType(), $linked_object->fields['id'])\n                        : \"\";\n                        $img = \"<img alt='\" . $image['tag'] . \"' src='\" . $base_path .\n                          \"/front/document.send.php?docid=\" . $id . $object_url_param . \"'/>\";\n\n                      // 1 - Replace direct tag (with prefix and suffix) by the image\n                        $content_text = preg_replace(\n                            '/' . Document::getImageTag($image['tag']) . '/',\n                            $img,\n                            $content_text\n                        );\n\n                         // 2 - Replace img with tag in id attribute by the image\n                        $regex = '/<img[^>]+' . preg_quote($image['tag'], '/') . '[^<]+>/im';\n                        preg_match_all($regex, $content_text, $matches);\n                        foreach ($matches[0] as $match_img) {\n                            //retrieve dimensions\n                            $width = $height = null;\n                            $attributes = [];\n                            preg_match_all('/(width|height)=\"([^\"]*)\"/i', $match_img, $attributes);\n                            if (isset($attributes[1][0])) {\n                                ${$attributes[1][0]} = $attributes[2][0];\n                            }\n                            if (isset($attributes[1][1])) {\n                                ${$attributes[1][1]} = $attributes[2][1];\n                            }\n\n                            if ($width == null || $height == null) {\n                                $path = GLPI_DOC_DIR . \"/\" . $image['filepath'];\n                                $img_infos  = getimagesize($path);\n                                $width = $img_infos[0];\n                                $height = $img_infos[1];\n                            }\n\n                            // replace image\n                            $new_image =  Html::getImageHtmlTagForDocument(\n                                $id,\n                                $width,\n                                $height,\n                                true,\n                                $object_url_param\n                            );\n                            if (empty($new_image)) {\n                                  $new_image = '#' . $image['tag'] . '#';\n                            }\n                            $content_text = str_replace(\n                                $match_img,\n                                $new_image,\n                                $content_text\n                            );\n                            $content_text = $content_text;\n                        }\n\n                        // If the tag is from another ticket : link document to ticket\n                        if (\n                            $item instanceof Ticket\n                            && $item->getID()\n                            && isset($image['tickets_id'])\n                            && $image['tickets_id'] != $item->getID()\n                        ) {\n                            $docitem = new Document_Item();\n                            $docitem->add(['documents_id'  => $image['id'],\n                                '_do_notif'     => false,\n                                '_disablenotif' => true,\n                                'itemtype'      => $item->getType(),\n                                'items_id'      => $item->fields['id']\n                            ]);\n                        }\n                    } else {\n                      // Remove tag\n                        $content_text = preg_replace(\n                            '/' . Document::getImageTag($image['tag']) . '/',\n                            '',\n                            $content_text\n                        );\n                    }\n                }\n            }\n\n            if ($was_html_encoded) {\n                $content_text = Sanitizer::encodeHtmlSpecialChars($content_text);\n            }\n            if ($was_escaped) {\n                $content_text = Sanitizer::dbEscape($content_text);\n            }\n        }\n\n        return $content_text;\n    }\n\n    /**\n     * Delete tag or image from ticket content\n     *\n     * @since 9.2\n     *\n     * @param string $content   html content of input\n     * @param array $tags       list of tags to clen\n     *\n     * @return string  html content\n     **/\n    public static function cleanTagOrImage($content, array $tags)\n    {\n        $content = Sanitizer::unsanitize($content);\n\n        foreach ($tags as $tag) {\n            $content = preg_replace(\"/<img.*alt=['|\\\"]\" . $tag . \"['|\\\"][^>]*\\>/\", \"<p></p>\", $content);\n        }\n\n        $content = Sanitizer::sanitize($content);\n\n        return $content;\n    }\n\n    /**\n     * Decode JSON in GLPI\n     * Because json can have been modified from Sanitizer\n     *\n     * @param string $encoded Encoded JSON\n     * @param boolean $assoc  assoc parameter of json_encode native function\n     *\n     * @return mixed\n     */\n    public static function jsonDecode($encoded, $assoc = false)\n    {\n        if (!is_string($encoded)) {\n            self::log(null, Logger::NOTICE, ['Only strings can be json to decode!']);\n            return $encoded;\n        }\n\n        $json_data = null;\n        if (self::isJSON($encoded)) {\n            $json_data = $encoded;\n        } else {\n            //something went wrong... Try to unsanitize before decoding.\n            $raw_encoded = Sanitizer::unsanitize($encoded);\n            if (self::isJSON($raw_encoded)) {\n                $json_data = $raw_encoded;\n            }\n        }\n\n        if ($json_data === null) {\n            self::log(null, Logger::NOTICE, ['Unable to decode JSON string! Is this really JSON?']);\n            return $encoded;\n        }\n\n        $json = json_decode($json_data, $assoc);\n        return $json;\n    }\n\n\n    /**\n     * **Fast** JSON detection of a given var\n     * From https://stackoverflow.com/a/45241792\n     *\n     * @param mixed the var to test\n     *\n     * @return bool\n     */\n    public static function isJSON($json): bool\n    {\n        // Numeric strings are always valid JSON.\n        if (is_numeric($json)) {\n            return true;\n        }\n\n        // A non-string value can never be a JSON string.\n        if (!is_string($json)) {\n            return false;\n        }\n\n        $json = trim($json);\n        // Any non-numeric JSON string must be longer than 2 characters.\n        if (strlen($json) < 2) {\n            return false;\n        }\n\n        // \"null\" is valid JSON string.\n        if ('null' === $json) {\n            return true;\n        }\n\n        // \"true\" and \"false\" are valid JSON strings.\n        if ('true' === $json) {\n            return true;\n        }\n        if ('false' === $json) {\n            return false;\n        }\n\n        // Any other JSON string has to be wrapped in {}, [] or \"\".\n        if ('{' != $json[0] && '[' != $json[0] && '\"' != $json[0]) {\n            return false;\n        }\n\n        // Verify that the trailing character matches the first character.\n        $last_char = $json[strlen($json) - 1];\n        if ('{' == $json[0] && '}' != $last_char) {\n            return false;\n        }\n        if ('[' == $json[0] && ']' != $last_char) {\n            return false;\n        }\n        if ('\"' == $json[0] && '\"' != $last_char) {\n            return false;\n        }\n\n        // See if the string contents are valid JSON.\n        return null !== json_decode($json);\n    }\n\n    /**\n     * Checks if a string starts with another one\n     *\n     * @since 9.1.5\n     *\n     * @param string $haystack String to check\n     * @param string $needle   String to find\n     *\n     * @return boolean\n     *\n     * @deprecated 10.0.0\n     */\n    public static function startsWith($haystack, $needle)\n    {\n        Toolbox::deprecated('Use native str_starts_with() function.');\n        return str_starts_with($haystack, $needle);\n    }\n\n    /**\n     * Checks if a string starts with another one\n     *\n     * @since 9.2\n     *\n     * @param string $haystack String to check\n     * @param string $needle   String to find\n     *\n     * @return boolean\n     *\n     * @deprecated 10.0.0\n     */\n    public static function endsWith($haystack, $needle)\n    {\n        Toolbox::deprecated('Use native str_ends_with() function.');\n        return str_ends_with($haystack, $needle);\n    }\n\n    /**\n     * gets the IP address of the client\n     *\n     * @since 9.2\n     *\n     * @return string the IP address\n     */\n    public static function getRemoteIpAddress()\n    {\n        return $_SERVER[\"REMOTE_ADDR\"];\n    }\n\n    /**\n     * Get available date formats\n     *\n     * @since 9.2\n     *\n     * @param string $type Type for (either 'php' or 'js')\n     *\n     * @return array\n     */\n    public static function getDateFormats($type)\n    {\n        $formats = [];\n        switch ($type) {\n            case 'js':\n                $formats = [\n                    0 => 'Y-m-d',\n                    1 => 'd-m-Y',\n                    2 => 'm-d-Y'\n                ];\n                break;\n            case 'php':\n                $formats = [\n                    0 => __('YYYY-MM-DD'),\n                    1 => __('DD-MM-YYYY'),\n                    2 => __('MM-DD-YYYY')\n                ];\n                break;\n            default:\n                throw new \\RuntimeException(\"Unknown type $type to get date formats.\");\n        }\n        return $formats;\n    }\n\n    /**\n     * Get current date format\n     *\n     * @since 9.2\n     *\n     * @param string $type Type for (either 'php', 'js')\n     *\n     * @return string\n     */\n    public static function getDateFormat($type)\n    {\n        $formats = self::getDateFormats($type);\n        $format = $formats[$_SESSION[\"glpidate_format\"] ?? 0];\n        return $format;\n    }\n\n    /**\n     * Get current date format for php\n     *\n     * @since 9.2\n     *\n     * @return string\n     */\n    public static function phpDateFormat()\n    {\n        return self::getDateFormat('php');\n    }\n\n    /**\n     * Get available date formats for php\n     *\n     * @since 9.2\n     *\n     * @return array\n     */\n    public static function phpDateFormats()\n    {\n        return self::getDateFormats('php');\n    }\n\n    /**\n     * Get current date format for javascript\n     *\n     * @since 9.2\n     *\n     * @return string\n     */\n    public static function jsDateFormat()\n    {\n        return self::getDateFormat('js');\n    }\n\n    /**\n     * Get available date formats for javascript\n     *\n     * @since 9.2\n     *\n     * @return array\n     */\n    public static function jsDateFormats()\n    {\n        return self::getDateFormats('js');\n    }\n\n    /**\n     * Format a web link adding http:// if missing\n     *\n     * @param string $link link to format\n     *\n     * @return string formatted link.\n     **/\n    public static function formatOutputWebLink($link)\n    {\n        if (!preg_match(\"/^https?/\", $link)) {\n            return \"http://\" . $link;\n        }\n        return $link;\n    }\n\n    /**\n     * Convert a integer index into an excel like alpha index (A, B, ..., AA, AB, ...)\n     * @since 9.3\n     * @param  integer $index the numeric index\n     * @return string         excel like string index\n     */\n    public static function getBijectiveIndex($index = 0)\n    {\n        $bij_str = \"\";\n        while ((int) $index > 0) {\n            $index--;\n            $bij_str = chr($index % 26 + ord(\"A\")) . $bij_str;\n            $index = floor($index / 26);\n        }\n        return $bij_str;\n    }\n\n    /**\n     * Get HTML content to display (cleaned)\n     *\n     * @since 9.1.8\n     *\n     * @param string $content Content to display\n     *\n     * @return string\n     *\n     * @deprecated 10.0.0\n     */\n    public static function getHtmlToDisplay($content)\n    {\n        Toolbox::deprecated('Use Glpi\\Toolbox\\RichText::getEnhancedHtml()');\n\n        $content = Toolbox::unclean_cross_side_scripting_deep(\n            $content\n        );\n\n        $content = Html::clean($content, false, 1);\n\n       // If content does not contain <br> or <p> html tag, use nl2br\n       // Required to correctly render linebreaks from \"simple text mode\" from GLPI prior to 9.4.0.\n        if (!preg_match('/<br\\s?\\/?>/', $content) && !preg_match('/<p>/', $content)) {\n            $content = nl2br($content);\n        }\n\n        return $content;\n    }\n\n    /**\n     * Strip HTML tags from a string.\n     *\n     * @since 10.0.0\n     *\n     * @param string  $str\n     *\n     * @return string\n     *\n     * @TODO Unit test\n     */\n    public static function stripTags(string $str): string\n    {\n        $str = Sanitizer::getVerbatimValue($str);\n\n        return strip_tags($str);\n    }\n\n    /**\n     * Save a picture and return destination filepath.\n     * /!\\ This method is made to handle uploaded files and removes the source file filesystem.\n     *\n     * @param string|null $src          Source path of the picture\n     * @param string      $uniq_prefix  Unique prefix that can be used to improve uniqueness of destination filename\n     *\n     * @return boolean|string      Destination filepath, relative to GLPI_PICTURE_DIR, or false on failure\n     *\n     * @since 9.5.0\n     */\n    public static function savePicture($src, $uniq_prefix = '')\n    {\n\n        if (!Document::isImage($src)) {\n            return false;\n        }\n\n        $filename     = uniqid($uniq_prefix);\n        $ext          = pathinfo($src, PATHINFO_EXTENSION);\n        $subdirectory = substr($filename, -2); // subdirectory based on last 2 hex digit\n\n        $i = 0;\n        do {\n           // Iterate on possible suffix while dest exists.\n           // This case will almost never exists as dest is based on an unique id.\n            $dest = GLPI_PICTURE_DIR\n            . '/' . $subdirectory\n            . '/' . $filename . ($i > 0 ? '_' . $i : '') . '.' . $ext;\n            $i++;\n        } while (file_exists($dest));\n\n        if (!is_dir(GLPI_PICTURE_DIR . '/' . $subdirectory) && !mkdir(GLPI_PICTURE_DIR . '/' . $subdirectory)) {\n            return false;\n        }\n\n        if (!rename($src, $dest)) {\n            return false;\n        }\n\n        return substr($dest, strlen(GLPI_PICTURE_DIR . '/')); // Return dest relative to GLPI_PICTURE_DIR\n    }\n\n\n    /**\n     * Delete a picture.\n     *\n     * @param string $path\n     *\n     * @return boolean\n     *\n     * @since 9.5.0\n     */\n    public static function deletePicture($path)\n    {\n\n        $fullpath = GLPI_PICTURE_DIR . '/' . $path;\n\n        if (!file_exists($fullpath)) {\n            return false;\n        }\n\n        $fullpath = realpath($fullpath);\n        if (!str_starts_with($fullpath, realpath(GLPI_PICTURE_DIR))) {\n           // Prevent deletion of a file ouside pictures directory\n            return false;\n        }\n\n        return @unlink($fullpath);\n    }\n\n\n    /**\n     * Get picture URL.\n     *\n     * @param string $path\n     * @param bool  bool get full path\n     *\n     * @return null|string\n     *\n     * @since 9.5.0\n     */\n    public static function getPictureUrl($path, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $path = Html::cleanInputText($path); // prevent xss\n\n        if (empty($path)) {\n            return null;\n        }\n\n        return ($full ? $CFG_GLPI[\"root_doc\"] : \"\") . '/front/document.send.php?file=_pictures/' . $path;\n    }\n\n    /**\n     * Return a shortened number with a suffix (K, M, B, T)\n     *\n     * @param int $number to shorten\n     * @param int $precision how much number after comma we need\n     * @param bool $html do we return an html or a single string\n     *\n     * @return string shortened number\n     */\n    public static function shortenNumber($number = 0, $precision = 1, bool $html = true): string\n    {\n\n        $suffix = \"\";\n        if (!is_numeric($number)) {\n            if (preg_match(\"/^([0-9\\.]+)(.*)/\", $number, $matches)) {\n                // Preformatted value: {Number}{Suffix}\n                $formatted = $matches[1];\n                $suffix = $matches[2];\n            } else {\n               // Unknwown format\n                $formatted = $number;\n            }\n        } else if ($number < 900) {\n            $formatted = number_format($number);\n        } else if ($number < 900000) {\n            $formatted = number_format($number / 1000, $precision);\n            $suffix = \"K\";\n        } else if ($number < 900000000) {\n            $formatted = number_format($number / 1000000, $precision);\n            $suffix = \"M\";\n        } else if ($number < 900000000000) {\n            $formatted = number_format($number / 1000000000, $precision);\n            $suffix = \"B\";\n        } else {\n            $formatted = number_format($number / 1000000000000, $precision);\n            $suffix = \"T\";\n        }\n\n        if (strpos($formatted, '.') === false) {\n            $precision = 0;\n        }\n\n        if ($html) {\n            $formatted = <<<HTML\n            <span title=\"{$number}\"\n                  class=\"formatted-number\"\n                  data-precision='{$precision}'>\n               <span class=\"number\">$formatted</span>\n               <span class=\"suffix\">$suffix</span>\n            </span>\nHTML;\n        } else {\n            $formatted .= $suffix;\n        }\n\n        return $formatted;\n    }\n\n\n    /**\n     * Get a fixed hex color for a input string\n     * Inpsired by shahonseven/php-color-hash\n     * @since 9.5\n     *\n     * @param string $str\n     *\n     * @return string hex color (ex #FAFAFA)\n     */\n    public static function getColorForString(string $str = \"\"): string\n    {\n        $seed  = 131;\n        $seed2 = 137;\n        $hash  = 0;\n       // Make hash more sensitive for short string like 'a', 'b', 'c'\n        $str .= 'x';\n        $max = intval(9007199254740991 / $seed2);\n\n       // Backport of Javascript function charCodeAt()\n        $getCharCode = function ($c) {\n            list(, $ord) = unpack('N', mb_convert_encoding($c, 'UCS-4BE', 'UTF-8'));\n            return $ord;\n        };\n\n       // generate integer hash\n        for ($i = 0, $ilen = mb_strlen($str, 'UTF-8'); $i < $ilen; $i++) {\n            if ($hash > $max) {\n                $hash = intval($hash / $seed2);\n            }\n            $hash = $hash * $seed + $getCharCode(mb_substr($str, $i, 1, 'UTF-8'));\n        }\n\n       //get Hsl\n        $base_L = $base_S = [0.6, 0.65, 0.7];\n        $H = $hash % 359;\n        $hash = intval($hash / 360);\n        $S = $base_S[$hash % count($base_S)];\n        $hash = intval($hash / count($base_S));\n        $L = $base_L[$hash % count($base_L)];\n        $hsl = [\n            'H' => $H,\n            'S' => $S,\n            'L' => $L\n        ];\n\n       // return hex\n        return \"#\" . Color::hslToHex($hsl);\n    }\n\n\n    /**\n     * Return a frontground color for a given background color\n     * if bg color is light, we'll return dark fg color\n     * else a light fg color\n     *\n     * @param string $color the background color in hexadecimal notation (ex #FFFFFF) to compute\n     * @param int $offset how much we need to darken/lighten the color\n     * @param bool $inherit_if_transparent if color contains an opacity value, and if this value is too transparent return 'inherit'\n     *\n     * @return string hexadecimal fg color (ex #FFFFFF)\n     */\n    public static function getFgColor(string $color = \"\", int $offset = 40, bool $inherit_if_transparent = false): string\n    {\n        $fg_color = \"FFFFFF\";\n        if ($color !== \"\") {\n            $color = str_replace(\"#\", \"\", $color);\n\n           // if transparency present, get only the color part\n            if (strlen($color) === 8 && preg_match('/^[a-fA-F0-9]+$/', $color)) {\n                $tmp = $color;\n                $alpha = hexdec(substr($tmp, 6, 2));\n                $color = substr($color, 0, 6);\n\n                if ($alpha <= 100) {\n                    return \"inherit\";\n                }\n            }\n\n            $color_inst = new Color($color);\n\n           // adapt luminance part\n            if ($color_inst->isLight()) {\n                $hsl = Color::hexToHsl($color);\n                $hsl['L'] = max(0, $hsl['L'] - ($offset / 100));\n                $fg_color = Color::hslToHex($hsl);\n            } else {\n                $hsl = Color::hexToHsl($color);\n                $hsl['L'] = min(1, $hsl['L'] + ($offset / 100));\n                $fg_color = Color::hslToHex($hsl);\n            }\n        }\n\n        return \"#\" . $fg_color;\n    }\n\n    /**\n     * Get an HTTP header value\n     *\n     * @since 9.5\n     *\n     * @param string $name\n     *\n     * @return mixed The header value or null if not found\n     */\n    public static function getHeader(string $name)\n    {\n       // Format expected header name\n        $name = \"HTTP_\" . str_replace(\"-\", \"_\", strtoupper($name));\n\n        return $_SERVER[$name] ?? null;\n    }\n\n    /**\n     * Check if the given class exist and extends CommonDBTM\n     *\n     * @param string $class\n     * @return bool\n     */\n    public static function isCommonDBTM(string $class): bool\n    {\n        return class_exists($class) && is_subclass_of($class, 'CommonDBTM');\n    }\n\n    /**\n     * Check if the given class exist and implement DeprecatedInterface\n     *\n     * @param string $class\n     * @return bool\n     */\n    public static function isAPIDeprecated(string $class): bool\n    {\n        $deprecated = \"Glpi\\Api\\Deprecated\\DeprecatedInterface\";\n\n       // Insert namespace if missing\n        if (strpos($class, \"Glpi\\Api\\Deprecated\") === false) {\n            $class = \"Glpi\\Api\\Deprecated\\\\$class\";\n        }\n\n        return class_exists($class) && is_a($class, $deprecated, true);\n    }\n\n    /**\n     * Check URL validity\n     *\n     * @param string $url The URL to check\n     *\n     * @return boolean\n     */\n    public static function isValidWebUrl($url): bool\n    {\n       // Verify absence of known disallowed characters.\n       // It is still possible to have false positives, but a fireproof check would be too complex\n       // (or would require usage of a dedicated lib).\n        return (preg_match(\n            \"/^(?:http[s]?:\\/\\/(?:[^\\s`!(){};'\\\",<>\u00ab\u00bb\u201c\u201d\u2018\u2019+]+|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019+]))$/iu\",\n            $url\n        ) === 1);\n    }\n\n    /**\n     * Checks if the given class or object has the specified trait.\n     * This function checks the class itself and all parent classes for the trait.\n     * @since 10.0.0\n     * @param string|object $class The class or object\n     * @param string $trait The trait\n     * @return bool True if the class or its parents have the specified trait\n     */\n    public static function hasTrait($class, string $trait): bool\n    {\n       // Get traits of all parent classes\n        do {\n            $traits = class_uses($class, true);\n            if (in_array($trait, $traits, true)) {\n                return true;\n            }\n        } while ($class = get_parent_class($class));\n\n        return false;\n    }\n\n   /*\n    * Normalizes file name\n    *\n    * @param string filename\n    *\n    * @return string\n    */\n    public static function filename($filename): string\n    {\n       //remove extension\n        $ext = pathinfo($filename, PATHINFO_EXTENSION);\n        $filename = self::slugify(\n            preg_replace(\n                '/\\.' . $ext . '$/',\n                '',\n                $filename\n            ),\n            '' //no prefix on filenames\n        );\n\n        $namesize = strlen($filename) + strlen($ext) + 1;\n        if ($namesize > 255) {\n           //limit to 255 characters\n            $filename = substr($filename, 0, $namesize - 255);\n        }\n\n        if (!empty($ext)) {\n            $filename .= '.' . $ext;\n        }\n\n        return $filename;\n    }\n\n    /**\n     * Clean _target argument\n     *\n     * @param string $target Target argument\n     *\n     * @return string\n     */\n    public static function cleanTarget(string $target): string\n    {\n        global $CFG_GLPI;\n\n        $file = preg_replace('/^' . preg_quote($CFG_GLPI['root_doc'], '/') . '/', '', $target);\n        if (file_exists(GLPI_ROOT . $file)) {\n            return $target;\n        }\n\n        return '';\n    }\n\n    /**\n     * Get available tabs for a given item\n     *\n     * @param string   $itemtype Type of the item\n     * @param int|string|null $itemtype Id the item, optional\n     *\n     * @return array\n     */\n    public static function getAvailablesTabs(string $itemtype, $id = null): array\n    {\n        $item = getItemForItemtype($itemtype);\n\n        if (!$item) {\n            return [];\n        }\n\n        if (!is_null($id) && !$item->isNewID($id)) {\n            $item->getFromDB($id);\n        }\n\n        $tabs = $item->defineAllTabs();\n        if (isset($tabs['no_all_tab'])) {\n            unset($tabs['no_all_tab']);\n        }\n       // Add all tab\n        $tabs[-1] = 'All';\n\n        return $tabs;\n    }\n\n    /**\n     * Handle redirect after a profile switch.\n     * Must be called after a right check failure.\n     */\n    public static function handleProfileChangeRedirect(): void\n    {\n        global $CFG_GLPI;\n\n        $redirect = $_SESSION['_redirected_from_profile_selector'] ?? false;\n\n        if ($redirect) {\n            unset($_SESSION['_redirected_from_profile_selector']);\n            Html::redirect($CFG_GLPI['root_doc'] . \"/front/central.php\");\n        }\n    }\n\n    /**\n     * Check if a mixed value (possibly a string) is an integer or a float\n     *\n     * @param mixed $value A possible float\n     *\n     * @return bool\n     */\n    public static function isFloat($value): bool\n    {\n        if ($value === null || $value === '') {\n            return false;\n        }\n\n        if (!is_numeric($value)) {\n            $type = gettype($value);\n\n            trigger_error(\n                \"Calling isFloat on $type\",\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        return (floatval($value) - intval($value)) > 0;\n    }\n\n    /**\n     * Get the number of decimals for a given value\n     *\n     * @param mixed $value A possible float\n     *\n     * @return int\n     */\n    public static function getDecimalNumbers($value): int\n    {\n        if (!is_numeric($value)) {\n            $type = gettype($value);\n\n            trigger_error(\n                \"Calling getDecimalNumbers on $type\",\n                E_USER_WARNING\n            );\n            return 0;\n        }\n\n        if (floatval($value) == intval($value)) {\n            return 0;\n        }\n\n        return strlen(preg_replace('/\\d*\\./', '', floatval($value)));\n    }\n\n    /**\n     * Try to convert to Mio the given input\n     *\n     * @param string $size Input string\n     *\n     * @return mixed The Mio value as an integer if we were able to parse the\n     * input, else the unchanged input string\n     */\n    public static function getMioSizeFromString(string $size)\n    {\n        if (is_numeric($size)) {\n            // Already a numeric value, no work to be done\n            return $size;\n        }\n\n        if (!preg_match('/(\\d+).*?(\\w+)/', $size, $matches)) {\n            // Unkown format, keep the string as it is\n            return $size;\n        }\n        $supported_sizes = [\n            'mo'  => 0,\n            'mio' => 0,\n            'go'  => 1,\n            'gio' => 1,\n            'to'  => 2,\n            'tio' => 2,\n        ];\n        $exp = $supported_sizes[strtolower($matches[2]) ?? null];\n        if ($exp === null) {\n            // Unkown format, keep the string as it is\n            return $size;\n        }\n        return $matches[1] * pow(1024, $exp);\n    }\n}\n", "{#\n # ---------------------------------------------------------------------\n #\n # GLPI - Gestionnaire Libre de Parc Informatique\n #\n # http://glpi-project.org\n #\n # @copyright 2015-2022 Teclib' and contributors.\n # @copyright 2003-2014 by the INDEPNET Development Team.\n # @licence   https://www.gnu.org/licenses/gpl-3.0.html\n #\n # ---------------------------------------------------------------------\n #\n # LICENSE\n #\n # This file is part of GLPI.\n #\n # This program is free software: you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation, either version 3 of the License, or\n # (at your option) any later version.\n #\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n #\n # ---------------------------------------------------------------------\n #}\n\n<div class=\"firstbloc\">\n   {% if rss_feed.error is defined and rss_feed.error is not null %}\n      {{ __('Error retrieving RSS feed') }}\n   {% endif %}\n   <table class=\"table table-striped table-hover\">\n      <thead>\n         <tr>\n            <th colspan=\"3\">{{ rss_feed.title }}</th>\n         </tr>\n      </thead>\n      {% for rss_item in rss_feed.items %}\n         <tr class=\"tab_bg_1\">\n            <td>{{ rss_item.timestamp }}</td>\n            <td>\n               {% if rss_item.link is defined and rss_item.link is not null %}\n                  <a target=\"_blank\" href=\"{{ rss_item.link }}\">{{ rss_item.title }}</a>\n               {% else %}\n                  {{ rss_item.title }}\n               {% endif %}\n            </td>\n            <td>\n               {% set rand = random() %}\n               {% set preview = rss_item.content|html_to_text %}\n               {% set preview = preview|length > 1000 ? preview|slice(0, 1000) ~ ' (...)' : preview %}\n               <span id=\"rssitem{{ rand }}\" class=\"pointer\">{{ preview }}</span>\n               {% do call('Html::showToolTip', [rss_item.content, {\n                  'applyto': 'rssitem' ~ rand,\n                  'display': true\n               }]) %}\n            </td>\n         </tr>\n      {% endfor %}\n   </table>\n</div>\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\Cache\\CacheManager;\nuse Glpi\\Cache\\SimpleCache;\nuse Glpi\\Socket;\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\n\nini_set('display_errors', 'On');\nerror_reporting(E_ALL);\n\ndefine('GLPI_ROOT', __DIR__ . '/../');\ndefine('GLPI_CONFIG_DIR', getenv('GLPI_CONFIG_DIR') ?: __DIR__ . '/config');\ndefine('GLPI_VAR_DIR', getenv('GLPI_VAR_DIR') ?: __DIR__ . '/files');\ndefine('GLPI_URI', getenv('GLPI_URI') ?: 'http://localhost:8088');\n\ndefine(\n    'PLUGINS_DIRECTORIES',\n    [\n        GLPI_ROOT . '/plugins',\n        GLPI_ROOT . '/tests/fixtures/plugins',\n    ]\n);\n\ndefine('TU_USER', '_test_user');\ndefine('TU_PASS', 'PhpUnit_4');\n\nglobal $CFG_GLPI, $GLPI_CACHE;\n\ninclude(GLPI_ROOT . \"/inc/based_config.php\");\n\nif (!file_exists(GLPI_CONFIG_DIR . '/config_db.php')) {\n    die(\"\\nConfiguration file for tests not found\\n\\nrun: bin/console glpi:database:install --config-dir=\" . GLPI_CONFIG_DIR . \" ...\\n\\n\");\n}\n\n\\Glpi\\Tests\\BootstrapUtils::initVarDirectories();\n\n//init cache\nif (file_exists(GLPI_CONFIG_DIR . DIRECTORY_SEPARATOR . CacheManager::CONFIG_FILENAME)) {\n   // Use configured cache for cache tests\n    $cache_manager = new CacheManager();\n    $GLPI_CACHE = $cache_manager->getCoreCacheInstance();\n} else {\n   // Use \"in-memory\" cache for other tests\n    $GLPI_CACHE = new SimpleCache(new ArrayAdapter());\n}\n\ninclude_once __DIR__ . '/../inc/includes.php';\n\ninclude_once __DIR__ . '/GLPITestCase.php';\ninclude_once __DIR__ . '/DbTestCase.php';\ninclude_once __DIR__ . '/CsvTestCase.php';\ninclude_once __DIR__ . '/APIBaseClass.php';\ninclude_once __DIR__ . '/InventoryTestCase.php';\ninclude_once __DIR__ . '/functionnal/CommonITILRecurrent.php';\ninclude_once __DIR__ . '/functionnal/Glpi/ContentTemplates/Parameters/AbstractParameters.php';\ninclude_once __DIR__ . '/units/AbstractRightsDropdown.php';\n\n// check folder exists instead of class_exists('\\GuzzleHttp\\Client'), to prevent global includes\nif (file_exists(__DIR__ . '/../vendor/autoload.php') && !file_exists(__DIR__ . '/../vendor/guzzlehttp/guzzle')) {\n    die(\"\\nDevelopment dependencies not found\\n\\nrun: composer install -o\\n\\n\");\n}\n\nfunction loadDataset()\n{\n    global $CFG_GLPI, $DB;\n\n   // Unit test data definition\n    $data = [\n      // bump this version to force reload of the full dataset, when content change\n        '_version' => '4.8',\n\n      // Type => array of entries\n        'Entity' => [\n            [\n                'name'        => '_test_root_entity',\n                'entities_id' => 0,\n            ], [\n                'name'        => '_test_child_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'        => '_test_child_2',\n                'entities_id' => '_test_root_entity',\n            ]\n        ], 'Computer' => [\n            [\n                'name'        => '_test_pc01',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc01',\n            ], [\n                'name'        => '_test_pc02',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc02',\n            ], [\n                'name'        => '_test_pc03',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc03',\n                'contact'     => 'johndoe',\n            ], [\n                'name'        => '_test_pc11',\n                'entities_id' => '_test_child_1',\n            ], [\n                'name'        => '_test_pc12',\n                'entities_id' => '_test_child_1',\n            ], [\n                'name'        => '_test_pc13',\n                'entities_id' => '_test_child_1',\n                'comment'     => 'Comment for computer _test_pc13',\n                'contact'     => 'johndoe',\n            ], [\n                'name'        => '_test_pc21',\n                'entities_id' => '_test_child_2',\n            ], [\n                'name'        => '_test_pc22',\n                'entities_id' => '_test_child_2',\n            ], [\n                'name'        => '_test_pc_with_encoded_comment',\n                'entities_id' => '_test_root_entity',\n                'comment'     => '&#60;&#62;', // \"&#60;\" => \"<\", \"&#62;\" => \">\"\n            ]\n        ], 'ComputerModel' => [\n            [\n                'name'           => '_test_computermodel_1',\n                'product_number' => 'CMP_ADEAF5E1',\n            ], [\n                'name'           => '_test_computermodel_2',\n                'product_number' => 'CMP_567AEC68',\n            ],\n        ], 'Monitor' => [\n            [\n                'name'           => '_test_monitor_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_monitor_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Software' => [\n            [\n                'name'         => '_test_soft',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ], [\n                'name'         => '_test_soft2',\n                'entities_id'  => '_test_child_2',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_soft_3',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ]\n\n        ], 'SoftwareVersion' => [\n            [\n                'name'        => '_test_softver_1',\n                'entities_id' => '_test_root_entity',\n                'is_recursive' => 1,\n                'softwares_id' => '_test_soft',\n            ], [\n                'name'        => '_test_softver_2',\n                'entities_id' => '_test_root_entity',\n                'is_recursive' => 1,\n                'softwares_id' => '_test_soft',\n            ]\n        ], 'NetworkEquipment' => [\n            [\n                'name'           => '_test_networkequipment_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_networkequipment_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Peripheral' => [\n            [\n                'name'           => '_test_peripheral_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_peripheral_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Printer' => [\n            [\n                'name'         => '_test_printer_all',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ], [\n                'name'         => '_test_printer_ent0',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_printer_ent1',\n                'entities_id'  => '_test_child_1',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_printer_ent2',\n                'entities_id'  => '_test_child_2',\n                'is_recursive' => 0,\n            ]\n        ], 'Phone' => [\n            [\n                'name'           => '_test_phone_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_phone_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'User' => [\n            [\n                'name'          => TU_USER,\n                'password'      => TU_PASS,\n                'password2'     => TU_PASS,\n                'entities_id'   => '_test_root_entity',\n                'profiles_id'   => 4, // TODO manage test profiles\n                '_entities_id'  => 0,\n                '_profiles_id'  => 4,\n                '_is_recursive' => 1,\n            ]\n        ], 'Group'   => [\n            [\n                'name'         => '_test_group_1',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'is_usergroup' => 1,\n                'is_requester' => 1,\n                'is_watcher'   => 1,\n                'is_assign'    => 1,\n            ],\n            [\n                'name'         => '_test_group_2',\n                'entities_id'  => '_test_root_entity',\n                'groups_id'    => '_test_group_1',\n                'is_recursive' => 1,\n                'is_usergroup' => 1,\n                'is_requester' => 1,\n                'is_watcher'   => 1,\n                'is_assign'    => 1,\n            ],\n        ], 'TaskCategory' => [\n            [\n                'is_recursive' => 1,\n                'name'         => '_cat_1',\n                'completename' => '_cat_1',\n                'comment'      => 'Comment for category _cat_1',\n                'level'        => 1,\n            ],\n            [\n                'is_recursive' => 1,\n                'taskcategories_id' => '_cat_1',\n                'name'         => '_subcat_1',\n                'completename' => '_cat_1 > _subcat_1',\n                'comment'      => 'Comment for sub-category _subcat_1',\n                'level'        => 2,\n            ]\n        ], 'DropdownTranslation' => [\n            [\n                'items_id'   => '_cat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'name',\n                'value'      => 'FR - _cat_1'\n            ],\n            [\n                'items_id'   => '_cat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'comment',\n                'value'      => 'FR - Commentaire pour cat\u00e9gorie _cat_1'\n            ],\n            [\n                'items_id'   => '_subcat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'name',\n                'value'      => 'FR - _subcat_1'\n            ],\n            [\n                'items_id'   => '_subcat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'comment',\n                'value'      => 'FR - Commentaire pour sous-cat\u00e9gorie _subcat_1'\n            ]\n        ], 'Contact' => [\n            [\n                'name'         => '_contact01_name',\n                'firstname'    => '_contact01_firstname',\n                'phone'        => '0123456789',\n                'phone2'       => '0123456788',\n                'mobile'       => '0623456789',\n                'fax'          => '0123456787',\n                'email'        => '_contact01_firstname._contact01_name@glpi.com',\n                'comment'      => 'Comment for contact _contact01_name',\n                'entities_id'  => '_test_root_entity'\n            ]\n        ], 'Supplier' => [\n            [\n                'name'         => '_suplier01_name',\n                'phonenumber'  => '0123456789',\n                'fax'          => '0123456787',\n                'email'        => 'info@_supplier01_name.com',\n                'comment'      => 'Comment for supplier _suplier01_name',\n                'entities_id'  => '_test_root_entity'\n            ]\n        ], 'Location' => [\n            [\n                'name'         => '_location01',\n                'comment'      => 'Comment for location _location01'\n            ],\n            [\n                'name'         => '_location01 > _sublocation01',\n                'comment'      => 'Comment for location _sublocation01'\n            ],\n            [\n                'name'         => '_location02',\n                'comment'      => 'Comment for location _sublocation02'\n            ]\n        ], Socket::class => [\n            [\n                'name'         => '_socket01',\n                'locations_id' => '_location01',\n                'comment'      => 'Comment for socket _socket01'\n            ]\n        ], 'BudgetType' => [\n            [\n                'name'         => '_budgettype01',\n                'comment'      => 'Comment for budgettype _budgettype01'\n            ]\n        ], 'Budget' => [\n            [\n                'name'           => '_budget01',\n                'comment'        => 'Comment for budget _budget01',\n                'locations_id'   => '_location01',\n                'budgettypes_id' => '_budgettype01',\n                'begin_date'     => '2016-10-18',\n                'end_date'       => '2016-12-31',\n                'entities_id'     => '_test_root_entity'\n            ]\n        ], 'Ticket' => [\n            [\n                'name'           => '_ticket01',\n                'content'        => 'Content for ticket _ticket01',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'name'           => '_ticket02',\n                'content'        => 'Content for ticket _ticket02',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'name'           => '_ticket03',\n                'content'        => 'Content for ticket _ticket03',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_child_1'\n            ],\n            [\n                'id'             => 100, // Force ID that will be used in imap test suite fixtures\n                'name'           => '_ticket100',\n                'content'        => 'Content for ticket _ticket100',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'id'             => 101, // Force ID that will be used in imap test suite fixtures\n                'name'           => '_ticket101',\n                'content'        => 'Content for ticket _ticket101',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n        ], 'TicketTask' => [\n            [\n                'tickets_id'         => '_ticket01',\n                'taskcategories_id'  => '_subcat_1',\n                'users_id'           => TU_USER,\n                'content'            => 'Task to be done',\n                'is_private'         => 0,\n                'users_id_tech'      => TU_USER,\n                'date'               => '2016-10-19 11:50:50'\n            ]\n        ], 'UserEmail' => [\n            [\n                'users_id'     => TU_USER,\n                'is_default'   => '1',\n                'is_dynamic'   => '0',\n                'email'        => TU_USER . '@glpi.com'\n            ]\n        ], 'KnowbaseItem' => [\n            [\n                'name'     => '_knowbaseitem01',\n                'answer'   => 'Answer for Knowledge base entry _knowbaseitem01',\n                'is_faq'   => 0,\n                'users_id' => TU_USER,\n                'date'     => '2016-11-17 12:27:48',\n            ],\n            [\n                'name'     => '_knowbaseitem02',\n                'answer'   => 'Answer for Knowledge base entry _knowbaseitem02',\n                'is_faq'   => 0,\n                'users_id' => TU_USER,\n                'date'     => '2016-11-17 12:27:48',\n            ]\n        ], 'KnowbaseItem_Item' => [\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket01',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket02',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket03',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket03',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'itemtype'         => 'Computer',\n                'items_id'         => '_test_pc21',\n            ]\n        ], 'Entity_KnowbaseItem' => [\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'entities_id'      => '_test_root_entity'\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'entities_id'      => '_test_child_1'\n            ]\n        ], 'DocumentType' => [\n            [\n                'name'          => 'markdown',\n                'is_uploadable' => '1',\n                'ext'           => 'md'\n            ]\n        ], 'Manufacturer' => [\n            [\n                'name'          => 'My Manufacturer',\n            ]\n        ], 'SoftwareLicense' => [\n            [\n                'name'         => '_test_softlic_1',\n                'completename' => '_test_softlic_1',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 2,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_2',\n                'completename' => '_test_softlic_2',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 3,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_3',\n                'completename' => '_test_softlic_3',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 5,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_4',\n                'completename' => '_test_softlic_4',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 2,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_child',\n                'completename' => '_test_softlic_child',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 1,\n                'softwares_id' => '_test_soft',\n                'softwarelicenses_id' => '_test_softlic_1',\n            ],\n        ], 'Item_SoftwareLicense' => [\n            [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc01',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_2',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_3',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_3',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_2',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ]\n        ], 'DeviceSimcard' => [\n            [\n                'designation'         => '_test_simcard_1',\n                'entities_id'         => '_test_root_entity',\n                'is_recursive'        => 1,\n            ]\n        ], 'DeviceSensor' => [\n            [\n                'designation'  => '_test_sensor_1',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1\n            ]\n        ], 'AuthLDAP' => [\n            [\n                'name'            => '_local_ldap',\n                'host'            => 'openldap',\n                'basedn'          => 'dc=glpi,dc=org',\n                'rootdn'          => 'cn=Manager,dc=glpi,dc=org',\n                'port'            => '3890',\n                'condition'       => '(objectclass=inetOrgPerson)',\n                'login_field'     => 'uid',\n                'rootdn_passwd'   => 'insecure',\n                'is_default'      => 1,\n                'is_active'       => 0,\n                'use_tls'         => 0,\n                'email1_field'    => 'mail',\n                'realname_field'  => 'cn',\n                'firstname_field' => 'sn',\n                'phone_field'     => 'telephonenumber',\n                'comment_field'   => 'description',\n                'title_field'     => 'title',\n                'category_field'  => 'businesscategory',\n                'language_field'  => 'preferredlanguage',\n                'group_search_type'  => \\AuthLDAP::GROUP_SEARCH_GROUP,\n                'group_condition' => '(objectclass=groupOfNames)',\n                'group_member_field' => 'member'\n            ]\n        ], 'Holiday'   => [\n            [\n                'name'         => 'X-Mas',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'begin_date'   => '2018-12-29',\n                'end_date'     => '2019-01-06'\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Dashboard' => [\n            [\n                'key'     => 'test_dashboard',\n                'name'    => 'Test_Dashboard',\n                'context' => 'core',\n            ], [\n                'key'     => 'test_dashboard2',\n                'name'    => 'Test_Dashboard_2',\n                'context' => 'core'\n            ], [\n                'key'     => 'test_dashboard3',\n                'name'    => 'Test_Dashboard_3',\n                'context' => 'oustide_core',\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Item' => [\n            [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_1',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 0,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_2',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 2,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_3',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 4,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Right' => [\n            [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'itemtype'                 => 'Entity',\n                'items_id'                 => 0,\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'itemtype'                 => 'Profile',\n                'items_id'                 => 3,\n            ]\n        ], 'Plugin' => [\n            [\n                'directory'    => 'tester',\n                'name'         => 'tester',\n                'version'      => '1.0.0',\n                'state'        => 1,\n            ]\n        ],\n    ];\n\n   // To bypass various right checks\n    $session_bak = $_SESSION;\n    $_SESSION['glpishowallentities'] = 1;\n    $_SESSION['glpicronuserrunning'] = \"cron_phpunit\";\n    $_SESSION['glpi_use_mode']       = Session::NORMAL_MODE;\n    $_SESSION['glpiactive_entity']   = 0;\n    $_SESSION['glpiactiveentities']  = [0];\n    $_SESSION['glpiactiveentities_string'] = \"'0'\";\n    $CFG_GLPI['root_doc']            = '/glpi';\n\n    $DB->beginTransaction();\n\n    Config::setConfigurationValues('core', ['url_base'     => GLPI_URI,\n        'url_base_api' => GLPI_URI . '/apirest.php'\n    ]);\n    $CFG_GLPI['url_base']      = GLPI_URI;\n    $CFG_GLPI['url_base_api']  = GLPI_URI . '/apirest.php';\n\n   // make all caldav component available for tests (for default usage we don't VTODO)\n    $CFG_GLPI['caldav_supported_components']  = ['VEVENT', 'VJOURNAL', 'VTODO'];\n\n    $conf = Config::getConfigurationValues('phpunit');\n    if (isset($conf['dataset']) && $conf['dataset'] == $data['_version']) {\n        printf(\"\\nGLPI dataset version %s already loaded\\n\\n\", $data['_version']);\n    } else {\n        printf(\"\\nLoading GLPI dataset version %s\\n\", $data['_version']);\n\n        $ids = [];\n        foreach ($data as $type => $inputs) {\n            if ($type[0] == '_') {\n                continue;\n            }\n            foreach ($inputs as $input) {\n               // Resolve FK\n                foreach ($input as $k => $v) {\n                    // $foreigntype = $type; // by default same type than current type (is the case of the dropdowns)\n                    $foreigntype = false;\n                    $match = [];\n                    if (isForeignKeyField($k) && (preg_match(\"/(.*s)_id$/\", $k, $match) || preg_match(\"/(.*s)_id_/\", $k, $match))) {\n                        $foreigntypetxt = array_pop($match);\n                        if (substr($foreigntypetxt, 0, 1) !== '_') {\n                            $foreigntype = getItemTypeForTable(\"glpi_$foreigntypetxt\");\n                        }\n                    }\n                    if ($foreigntype && isset($ids[$foreigntype][$v]) && !is_numeric($v)) {\n                        $input[$k] = $ids[$foreigntype][$v];\n                    } else if ($k == 'items_id'  &&  isset($input['itemtype']) && isset($ids[$input['itemtype']][$v]) && !is_numeric($v)) {\n                        $input[$k] = $ids[$input['itemtype']][$v];\n                    } else if ($foreigntype && $foreigntype != 'UNKNOWN' && !is_numeric($v)) {\n                       // not found in ids array, then must get it from DB\n                        if ($obj = getItemByTypeName($foreigntype, $v)) {\n                            $input[$k] = $obj->getID();\n                        }\n                    }\n                }\n\n                if (isset($input['name']) && $item = getItemByTypeName($type, $input['name'])) {\n                    $input['id'] = $ids[$type][$input['name']] = $item->getField('id');\n                    $item->update($input);\n                    echo \".\";\n                } else {\n                   // Not found, create it\n                    $item = getItemForItemtype($type);\n                    $id = $item->add($input);\n                    echo \"+\";\n                    if (isset($input['name'])) {\n                        $ids[$type][$input['name']] = $id;\n                    }\n                }\n            }\n        }\n        Search::$search = [];\n        echo \"\\nDone\\n\\n\";\n        Config::setConfigurationValues('phpunit', ['dataset' => $data['_version']]);\n    }\n    $DB->commit();\n\n    $_SESSION = $session_bak; // Unset force session variables\n\n   // Ensure cache is clear after dataset reload\n    global $GLPI_CACHE;\n    $GLPI_CACHE->clear();\n}\n\n/**\n * Test helper, search an item from its type and name\n *\n * @param string  $type\n * @param string  $name\n * @param boolean $onlyid\n * @return CommonDBTM|false the item, or its id\n */\nfunction getItemByTypeName($type, $name, $onlyid = false)\n{\n\n    $item = getItemForItemtype($type);\n    $nameField = $type::getNameField();\n    if ($item->getFromDBByCrit([$nameField => $name])) {\n        return ($onlyid ? $item->getField('id') : $item);\n    }\n    return false;\n}\n\nloadDataset();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\nuse DbTestCase;\nuse Generator;\nuse Glpi\\Api\\Deprecated\\TicketFollowup;\nuse Glpi\\Features\\Clonable;\nuse Glpi\\Features\\DCBreadcrumb;\nuse Glpi\\Features\\Kanban;\nuse Glpi\\Features\\PlanningEvent;\nuse Glpi\\Toolbox\\Sanitizer;\nuse ITILFollowup;\nuse stdClass;\nuse Ticket;\nuse Psr\\Log\\LogLevel;\n\n/* Test for inc/toolbox.class.php */\n\nclass Toolbox extends DbTestCase\n{\n    public function testGetRandomString()\n    {\n        for ($len = 20; $len < 50; $len += 5) {\n           // Low strength\n            $str = \\Toolbox::getRandomString($len);\n            $this->integer(strlen($str))->isIdenticalTo($len);\n            $this->boolean(ctype_alnum($str))->isTrue();\n        }\n    }\n\n    protected function slugifyProvider()\n    {\n        return [\n            [\n                'string'   => 'My - string \u00e8\u00e9  \u00ca \u00c0 \u00df',\n                'expected' => 'my-string-ee-e-a-ss'\n            ], [\n            //https://github.com/glpi-project/glpi/issues/2946\n                'string'   => '\u0388\u03c1\u03b5\u03c5\u03bd\u03b1 \u03b9\u03ba\u03b1\u03bd\u03bf\u03c0\u03bf\u03af\u03b7\u03c3\u03b7\u03c2 - \u0391\u03b9\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1',\n                'expected' => 'ereuna-ikanopoieses-aitemata'\n            ], [\n                'string'   => 'a-valid-one',\n                'expected' => 'a-valid-one',\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider slugifyProvider\n     */\n    public function testSlugify($string, $expected)\n    {\n        $this->string(\\Toolbox::slugify($string))->isIdenticalTo($expected);\n    }\n\n    protected function filenameProvider()\n    {\n        return [\n            [\n                'name'  => '00-logoteclib.png',\n                'expected'  => '00-logoteclib.png',\n            ], [\n            // Space is missing between \"France\" and \"tr\u00e8s\" due to a bug in laminas-mail\n                'name'  => '01-Screenshot-2018-4-12 Observatoire - Francetr\u00e8s haut d\u00e9bit.png',\n                'expected'  => '01-screenshot-2018-4-12-observatoire-francetres-haut-debit.png',\n            ], [\n                'name'  => '01-test.JPG',\n                'expected'  => '01-test.JPG',\n            ], [\n                'name'  => '15-image001.png',\n                'expected'  => '15-image001.png',\n            ], [\n                'name'  => '18-blank.gif',\n                'expected'  => '18-blank.gif',\n            ], [\n                'name'  => '19-\u0282\u01f7\u00e8\u0255\u0269\u0250\u026b \u023c\u0266\u00e2\u0281\u023f.gif',\n                'expected'  => '19-secl-chas.gif',\n            ], [\n                'name'  => '20-spec\u00efal chars.gif',\n                'expected'  => '20-special-chars.gif',\n            ], [\n                'name'  => '24.1-\u957f\u6587\u4ef6\u540d\uff0c\u5c06\u5bfc\u81f4\u5185\u5bb9\u5904\u7f6e\u6807\u5934\u4e2d\u7684\u8fde\u7eed\u884c.txt',\n                'expected'  => '24.1-zhang-wen-jian-ming-jiang-dao-zhi-nei-rong-chu-zhi-biao-tou-zhong-de-lian-xu-xing.txt',\n            ], [\n                'name'  => '24.2-\u4e2d\u56fd\u5b57\u7b26.txt',\n                'expected'  => '24.2-zhong-guo-zi-fu.txt',\n            ], [\n                'name'  => '25-New Text - Document.txt',\n                'expected'  => '25-new-text-document.txt',\n            ], [\n                'name'     => '\u0388\u03c1\u03b5\u03c5\u03bd\u03b1 \u03b9\u03ba\u03b1\u03bd\u03bf\u03c0\u03bf\u03af\u03b7\u03c3\u03b7\u03c2 - \u0391\u03b9\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1',\n                'expected' => 'ereuna-ikanopoieses-aitemata'\n            ], [\n                'name'     => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc gravida, nisi vel scelerisque feugiat, tellus purus volutpat justo, vel aliquam nibh nibh sit amet risus. Aenean eget urna et felis molestie elementum nec sit amet magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum nec malesuada elit, non luctus mi. Aliquam quis velit justo. Donec id pulvinar nunc. Phasellus.txt',\n                'expected' => 'lorem-ipsum-dolor-sit-amet-consectetur-adipiscing-elit.-nunc-gravida-nisi-vel-scelerisque-feugiat-tellus-purus-volutpat-justo-vel-aliquam-.txt'\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider filenameProvider\n     */\n    public function testFilename($name, $expected)\n    {\n        $this->string(\\Toolbox::filename($name))->isIdenticalTo($expected);\n        $this->integer(strlen($expected))->isLessThanOrEqualTo(255);\n    }\n\n    public function dataGetSize()\n    {\n        return [\n            [1,                   '1 o'],\n            [1025,                '1 Kio'],\n            [1100000,             '1.05 Mio'],\n            [1100000000,          '1.02 Gio'],\n            [1100000000000,       '1 Tio'],\n        ];\n    }\n\n    /**\n     * @dataProvider dataGetSize\n     */\n    public function testGetSize($input, $expected)\n    {\n        $this->string(\\Toolbox::getSize($input))->isIdenticalTo($expected);\n    }\n\n    public function testGetIPAddress()\n    {\n       // Save values\n        $saveServer = $_SERVER;\n\n       // Test REMOTE_ADDR\n        $_SERVER['REMOTE_ADDR'] = '123.123.123.123';\n        $ip = \\Toolbox::getRemoteIpAddress();\n        $this->variable($ip)->isEqualTo('123.123.123.123');\n\n       // Restore values\n        $_SERVER = $saveServer;\n    }\n\n    public function testFormatOutputWebLink()\n    {\n        $this->string(\\Toolbox::formatOutputWebLink('www.glpi-project.org/'))\n         ->isIdenticalTo('http://www.glpi-project.org/');\n        $this->string(\\Toolbox::formatOutputWebLink('http://www.glpi-project.org/'))\n         ->isIdenticalTo('http://www.glpi-project.org/');\n        $this->string(\\Toolbox::formatOutputWebLink('https://www.glpi-project.org/'))\n         ->isIdenticalTo('https://www.glpi-project.org/');\n    }\n\n    public function testgetBijectiveIndex()\n    {\n        foreach (\n            [\n                1   => 'A',\n                2   => 'B',\n                27  => 'AA',\n                28  => 'AB',\n                53  => 'BA',\n                702 => 'ZZ',\n                703 => 'AAA',\n            ] as $number => $bij_string\n        ) {\n            $this->string(\\Toolbox::getBijectiveIndex($number))->isIdenticalTo($bij_string);\n        }\n    }\n\n    protected function cleanIntegerProvider()\n    {\n        return [\n            [1, '1'],\n            ['1', '1'],\n            ['a1', '1'],\n            ['-1', '-1'],\n            ['-a1', '-1'],\n        ];\n    }\n\n    /**\n     * @dataProvider cleanIntegerProvider\n     */\n    public function testCleanInteger($value, $expected)\n    {\n        $this->variable(\\Toolbox::cleanInteger($value))->isIdenticalTo($expected);\n    }\n\n    protected function jsonDecodeProvider()\n    {\n        return [\n            [\n                '{\"Monitor\":[6],\"Computer\":[35]}',\n                ['Monitor' => [6], 'Computer' => [35]]\n            ], [\n                '{\\\"Monitor\\\":[\\\"6\\\"],\\\"Computer\\\":[\\\"35\\\"]}',\n                ['Monitor' => [\"6\"], 'Computer' => [\"35\"]]\n            ], [\n                '{\\\"content\\\":\\\"&#60;p&#62;HTML !&#60;/p&#62;\\\"}',\n                ['content' => '<p>HTML !</p>']\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider jsonDecodeProvider\n     */\n    public function testJsonDecode($json, $expected)\n    {\n        $this\n         ->variable(\\Toolbox::jsonDecode($json, true))\n         ->isIdenticalTo($expected);\n    }\n\n\n    protected function isJSONProvider()\n    {\n        return [\n            [\n                '{\"validJson\":true}',\n                true\n            ], [\n                '{\"invalidJson\":true',\n                false\n            ], [\n                '\"valid\"',\n                true\n            ], [\n                'null',\n                true\n            ], [\n                1000,\n                true\n            ], [\n                [1, 2, 3],\n                false\n            ], [\n                (object) ['json' => true],\n                false\n            ], [\n                '{ bad content',\n                false\n            ], [\n                file_get_contents(GLPI_ROOT . '/vendor/glpi-project/inventory_format/examples/computer_1.json'),\n                true\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider isJsonProvider\n     */\n    public function testIsJSON($json, $expected)\n    {\n        $this\n         ->variable(\\Toolbox::isJSON($json, true))\n         ->isIdenticalTo($expected);\n    }\n\n\n\n    public function testInvalidJsonDecode()\n    {\n        $invalid = '\"Monitor\":\"6\",\"Computer\":\"35\"';\n        $this->variable(\\Toolbox::jsonDecode($invalid, true))->isIdenticalTo($invalid);\n        $this->hasPhpLogRecordThatContains('Unable to decode JSON string! Is this really JSON?', LogLevel::NOTICE);\n    }\n\n    protected function ucProvider()\n    {\n        return [\n            ['hello you', 'Hello you'],\n            ['HEllO you', 'HEllO you'],\n            ['\u00e9\u00e8', '\u00c9\u00e8'],\n            ['\u00c9\u00c8', '\u00c9\u00c8']\n        ];\n    }\n\n    /**\n     * @dataProvider ucProvider\n     */\n    public function testUcfirst($in, $out)\n    {\n        $this->string(\\Toolbox::ucfirst($in))->isIdenticalTo($out);\n    }\n\n    protected function shortcutProvider()\n    {\n        return [\n            ['My menu', 'm', '<u>M</u>y menu'],\n            ['Do something', 't', 'Do some<u>t</u>hing'],\n            ['Any menu entry', 'z', 'Any menu entry'],\n            ['Computer', 'O', 'C<u>o</u>mputer']\n        ];\n    }\n\n    /**\n     * @dataProvider shortcutProvider\n     */\n    public function testShortcut($string, $letter, $expected)\n    {\n        $this->string(\\Toolbox::shortcut($string, $letter))->isIdenticalTo($expected);\n    }\n\n    protected function strposProvider()\n    {\n        return [\n            ['Where is Charlie?', 'W', 0, 0],\n            ['Where is Charlie?', 'W', 1, false],\n            ['Where is Charlie?', 'w', 0, false],\n            ['Where is Charlie?', '?', 0, 16],\n            ['Where is Charlie?', '?', 3, 16],\n            ['Where is Charlie?', 'e', 0, 2],\n            ['Where is Charlie?', 'e', 2, 2],\n            ['Where is Charlie?', 'e', 3, 4],\n            ['O\u00f9 est Charlie ?', '\u00f9', 0, 1]\n        ];\n    }\n\n    /**\n     * @dataProvider strposProvider\n     */\n    public function testStrpos($string, $search, $offset, $expected)\n    {\n        $this->variable(\\Toolbox::strpos($string, $search, $offset))->isIdenticalTo($expected);\n    }\n\n    protected function padProvider()\n    {\n        return [\n            ['GLPI', 10, \" \", STR_PAD_RIGHT, 'GLPI      '],\n            ['\u00e9\u00e8', 10, \" \", STR_PAD_RIGHT, '\u00e9\u00e8        '],\n            ['GLPI', 10, \" \", STR_PAD_LEFT, '      GLPI'],\n            ['\u00e9\u00e8', 10, \" \", STR_PAD_LEFT, '        \u00e9\u00e8'],\n            ['GLPI', 10, \" \", STR_PAD_BOTH, '   GLPI   '],\n            ['\u00e9\u00e8', 10, \" \", STR_PAD_BOTH, '    \u00e9\u00e8    '],\n            ['123', 10, \" \", STR_PAD_BOTH, '   123    ']\n        ];\n    }\n\n    /**\n     * @dataProvider padProvider\n     */\n    public function testStr_pad($string, $length, $char, $pad, $expected)\n    {\n        $this->string(\\Toolbox::str_pad($string, $length, $char, $pad))\n         ->isIdenticalTo($expected);\n    }\n\n    protected function strlenProvider()\n    {\n        return [\n            ['GLPI', 4],\n            ['O\u00f9 \u00e7a ?', 7]\n        ];\n    }\n\n    /**\n     * @dataProvider strlenProvider\n     */\n    public function testStrlen($string, $length)\n    {\n        $this->integer(\\Toolbox::strlen($string))->isIdenticalTo($length);\n    }\n\n    protected function substrProvider()\n    {\n        return [\n            ['I want a substring', 0, -1, 'I want a substring'],\n            ['I want a substring', 9, -1, 'substring'],\n            ['I want a substring', 9, 3, 'sub'],\n            ['Caract\u00e8res accentu\u00e9s', 0, -1, 'Caract\u00e8res accentu\u00e9s'],\n            ['Caract\u00e8res accentu\u00e9s', 11, -1, 'accentu\u00e9s'],\n            ['Caract\u00e8res accentu\u00e9s', 11, 8, 'accentu\u00e9']\n        ];\n    }\n\n    /**\n     * @dataProvider substrProvider\n     */\n    public function testSubstr($string, $start, $length, $expected)\n    {\n        $this->string(\\Toolbox::substr($string, $start, $length))\n         ->isIdenticalTo($expected);\n    }\n\n    protected function lowercaseProvider()\n    {\n        return [\n            ['GLPI', 'glpi'],\n            ['\u00c9\u00c8', '\u00e9\u00e8'],\n            ['glpi', 'glpi']\n        ];\n    }\n\n    /**\n     * @dataProvider lowercaseProvider\n     */\n    public function testStrtolower($upper, $lower)\n    {\n        $this->string(\\Toolbox::strtolower($upper))->isIdenticalTo($lower);\n    }\n\n    protected function uppercaseProvider()\n    {\n        return [\n            ['glpi', 'GLPI'],\n            ['\u00e9\u00e8', '\u00c9\u00c8'],\n            ['GlPI', 'GLPI']\n        ];\n    }\n\n    /**\n     * @dataProvider uppercaseProvider\n     */\n    public function testStrtoupper($lower, $upper)\n    {\n        $this->string(\\Toolbox::strtoupper($lower))->isIdenticalTo($upper);\n    }\n\n    protected function utfProvider()\n    {\n        return [\n            ['a simple string', true],\n            ['caract\u00e8re', true],\n            [mb_convert_encoding('caract\u00e8re', 'ISO-8859-15'), false],\n            [mb_convert_encoding('simple string', 'ISO-8859-15'), true]\n        ];\n    }\n\n    /**\n     * @dataProvider utfProvider\n     */\n    public function testSeems_utf8($string, $utf)\n    {\n        $this->boolean(\\Toolbox::seems_utf8($string))->isIdenticalTo($utf);\n    }\n\n    public function testSaveAndDeletePicture()\n    {\n       // Save an image twice\n        $test_file = __DIR__ . '/../files/test.png';\n        copy(__DIR__ . '/../../pics/add_dropdown.png', $test_file); // saved image will be removed from FS\n        $first_pict = \\Toolbox::savePicture($test_file);\n        $this->string($first_pict)->matches('#[^/]+/.+\\.png#'); // generated random name inside subdir\n\n        copy(__DIR__ . '/../../pics/add_dropdown.png', $test_file); // saved image will be removed from FS\n        $second_pict = \\Toolbox::savePicture($test_file);\n        $this->string($second_pict)->matches('#[^/]+/.+\\.png#'); // generated random name inside subdir\n\n       // Check that second saving of same image is not overriding first saved image.\n        $this->string($first_pict)->isNotEqualTo($second_pict);\n\n       // Delete saved images\n        $this->boolean(\\Toolbox::deletePicture($first_pict))->isTrue();\n        $this->boolean(\\Toolbox::deletePicture($second_pict))->isTrue();\n\n       // Save not an image\n        $this->boolean(\\Toolbox::savePicture(__DIR__ . '/../notanimage.jpg'))->isFalse();\n\n       // Save and delete unexisting files\n        $this->boolean(\\Toolbox::savePicture('notafile.jpg'))->isFalse();\n        $this->boolean(\\Toolbox::deletePicture('notafile.jpg'))->isFalse();\n    }\n\n    protected function getPictureUrlProvider()\n    {\n        global $CFG_GLPI;\n\n        return [\n            [\n                'path' => '',\n                'url'  => null,\n            ],\n            [\n                'path' => 'image.jpg',\n                'url'  => $CFG_GLPI['root_doc'] . '/front/document.send.php?file=_pictures/image.jpg',\n            ],\n            [\n                'path' => 'xss\\' onclick=\"alert(\\'PWNED\\')\".jpg',\n                'url'  => $CFG_GLPI['root_doc'] . '/front/document.send.php?file=_pictures/xss&apos; onclick=&quot;alert(&apos;PWNED&apos;)&quot;.jpg',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider getPictureUrlProvider\n     */\n    public function testGetPictureUrl($path, $url)\n    {\n        $this->variable(\\Toolbox::getPictureUrl($path))->isIdenticalTo($url);\n    }\n\n    /**\n     * Data provider for self::testConvertTagToImage().\n     */\n    protected function convertTagToImageProvider()\n    {\n        $data = [];\n\n        foreach ([\\Computer::class, \\Change::class, \\Problem::class, \\Ticket::class] as $itemtype) {\n            $item = new $itemtype();\n            $item->fields['id'] = mt_rand(1, 50);\n\n            $img_url = '/front/document.send.php?docid={docid}'; //{docid} to replace by generated doc id\n            if ($item instanceof \\CommonDBTM) {\n                $img_url .= '&itemtype=' . $item->getType();\n                $img_url .= '&items_id=' . $item->fields['id'];\n            }\n\n            $data[] = [\n                'item'         => $item,\n                'expected_url' => $img_url,\n            ];\n\n            if ($item instanceof \\CommonITILObject) {\n                $fup = new \\ITILFollowup();\n                $fup->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $fup,\n                    'expected_url' => $img_url,\n                ];\n\n                $solution = new \\ITILSolution();\n                $solution->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $solution,\n                    'expected_url' => $img_url,\n                ];\n\n                $task_itemtype = $itemtype . 'Task';\n                $task = new $task_itemtype();\n                $task->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $task,\n                    'expected_url' => $img_url,\n                ];\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * Check conversion of tags to images.\n     *\n     * @dataProvider convertTagToImageProvider\n     */\n    public function testConvertTagToImage($item, $expected_url)\n    {\n\n        $img_tag = uniqid('', true);\n\n       // Create document in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'basic document',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text   = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url   = str_replace('{docid}', $doc_id, $expected_url);\n        $expected_result = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result);\n    }\n\n    /**\n     * Data provider for self::testBaseUrlInConvertTagToImage().\n     */\n    protected function convertTagToImageBaseUrlProvider()\n    {\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n        $img_url = '/front/document.send.php?docid={docid}'; //{docid} to replace by generated doc id\n        $img_url .= '&itemtype=' . $item->getType();\n        $img_url .= '&items_id=' . $item->fields['id'];\n\n        return [\n            [\n                'url_base'     => 'http://glpi.domain.org',\n                'item'         => $item,\n                'expected_url' => $img_url,\n            ],\n            [\n                'url_base'     => 'http://www.domain.org/glpi/v9.4/',\n                'item'         => $item,\n                'expected_url' => '/glpi/v9.4/' . $img_url,\n            ],\n        ];\n    }\n\n    /**\n     * Check base url handling in conversion of tags to images.\n     *\n     * @dataProvider convertTagToImageBaseUrlProvider\n     */\n    public function testBaseUrlInConvertTagToImage($url_base, $item, $expected_url)\n    {\n\n        $img_tag = uniqid('', true);\n\n       // Create document in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'basic document',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text   = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url   = str_replace('{docid}', $doc_id, $expected_url);\n        $expected_result = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n\n       // Save old config\n        global $CFG_GLPI;\n        $old_url_base = $CFG_GLPI['url_base'];\n\n       // Get result\n        $CFG_GLPI['url_base'] = $url_base;\n        $result = \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]]);\n\n       // Restore config\n        $CFG_GLPI['url_base'] = $old_url_base;\n\n       // Validate result\n        $this->string($result)->isEqualTo($expected_result);\n    }\n\n    /**\n     * Check conversion of tags to images when contents contains multiple inlined images.\n     */\n    public function testConvertTagToImageWithMultipleInlinedImg()\n    {\n\n        $img_tag_1 = uniqid('', true);\n        $img_tag_2 = uniqid('', true);\n        $img_tag_3 = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id_1 = $document->add([\n            'name'     => 'document 1',\n            'filename' => 'img1.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_1,\n        ]);\n        $this->integer((int)$doc_id_1)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_2 = $document->add([\n            'name'     => 'document 2',\n            'filename' => 'img2.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_2,\n        ]);\n        $this->integer((int)$doc_id_2)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_3 = $document->add([\n            'name'     => 'document 3',\n            'filename' => 'img3.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_3,\n        ]);\n        $this->integer((int)$doc_id_3)->isGreaterThan(0);\n\n        $doc_data = [\n            $doc_id_1 => ['tag' => $img_tag_1],\n            $doc_id_2 => ['tag' => $img_tag_2],\n            $doc_id_3 => ['tag' => $img_tag_3],\n        ];\n\n        $content_text    = '';\n        $expected_result = '';\n        foreach ($doc_data as $doc_id => $doc) {\n            $expected_url    = '/front/document.send.php?docid=' . $doc_id;\n            $expected_url    .= '&itemtype=' . $item->getType();\n            $expected_url    .= '&items_id=' . $item->fields['id'];\n            $content_text    .= '<img id=\"' . $doc['tag'] . '\" width=\"10\" height=\"10\" />';\n            $expected_result .= '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $doc['tag'] . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n        }\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, $doc_data)\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, $doc_data)\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, $doc_data)\n        )->isEqualTo($expected_result);\n    }\n\n    /**\n     * Check conversion of tags to images when multiple document matches same tag.\n     */\n    public function testConvertTagToImageWithMultipleDocMatchesSameTag()\n    {\n\n        $img_tag = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id_1 = $document->add([\n            'name'     => 'duplicated document 1',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id_1)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_2 = $document->add([\n            'name'     => 'duplicated document 2',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id_2)->isGreaterThan(0);\n\n        $content_text    = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url_1    = '/front/document.send.php?docid=' . $doc_id_1;\n        $expected_url_1     .= '&itemtype=' . $item->getType();\n        $expected_url_1     .= '&items_id=' . $item->fields['id'];\n        $expected_result_1 = '<a href=\"' . $expected_url_1 . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url_1 . '\" /></a>';\n        $expected_url_2    = '/front/document.send.php?docid=' . $doc_id_2;\n        $expected_url_2     .= '&itemtype=' . $item->getType();\n        $expected_url_2     .= '&items_id=' . $item->fields['id'];\n        $expected_result_2 = '<a href=\"' . $expected_url_2 . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url_2 . '\" /></a>';\n\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result_1));\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result_2));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result_1));\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result_2));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result_1);\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result_2);\n    }\n\n    /**\n     * Check conversion of tags to images when content contains multiple times same inlined image.\n     */\n    public function testConvertTagToImageWithDuplicatedInlinedImg()\n    {\n\n        $img_tag = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'img 1',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text     = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $content_text    .= $content_text;\n        $expected_url     = '/front/document.send.php?docid=' . $doc_id;\n        $expected_url    .= '&itemtype=' . $item->getType();\n        $expected_url    .= '&items_id=' . $item->fields['id'];\n        $expected_result  = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n        $expected_result .= $expected_result;\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result);\n    }\n\n    protected function shortenNumbers()\n    {\n        return [\n            [\n                'number'    => 1500,\n                'precision' => 1,\n                'expected'  => '1.5K',\n            ], [\n                'number'    => 1600,\n                'precision' => 0,\n                'expected'  => '2K',\n            ], [\n                'number'    => 1600000,\n                'precision' => 1,\n                'expected'  => '1.6M',\n            ], [\n                'number'    => 1660000,\n                'precision' => 1,\n                'expected'  => '1.7M',\n            ], [\n                'number'    => 1600000000,\n                'precision' => 1,\n                'expected'  => '1.6B',\n            ], [\n                'number'    => 1600000000000,\n                'precision' => 1,\n                'expected'  => '1.6T',\n            ], [\n                'number'    => \"14%\",\n                'precision' => 1,\n                'expected'  => '14%',\n            ], [\n                'number'    => \"test\",\n                'precision' => 1,\n                'expected'  => 'test',\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider shortenNumbers\n     */\n    public function testShortenNumber($number, int $precision, string $expected)\n    {\n        $this->string(\\Toolbox::shortenNumber($number, $precision, false))\n         ->isEqualTo($expected);\n    }\n\n    protected function colors()\n    {\n        return [\n            [\n                'bg_color' => \"#FFFFFF\",\n                'offset'   => 40,\n                'fg_color' => '#999999',\n            ], [\n                'bg_color' => \"#FFFFFF\",\n                'offset'   => 50,\n                'fg_color' => '#808080',\n            ], [\n                'bg_color' => \"#000000\",\n                'offset'   => 40,\n                'fg_color' => '#666666',\n            ], [\n                'bg_color' => \"#000000\",\n                'offset'   => 50,\n                'fg_color' => '#808080',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider colors\n     */\n    public function testGetFgColor(string $bg_color, int $offset, string $fg_color)\n    {\n        $this->string(\\Toolbox::getFgColor($bg_color, $offset))\n         ->isEqualTo($fg_color);\n    }\n\n    protected function testIsCommonDBTMProvider()\n    {\n        return [\n            [\n                'class'         => TicketFollowup::class,\n                'is_commondbtm' => false,\n            ],\n            [\n                'class'         => Ticket::class,\n                'is_commondbtm' => true,\n            ],\n            [\n                'class'         => ITILFollowup::class,\n                'is_commondbtm' => true,\n            ],\n            [\n                'class'         => \"Not a real class\",\n                'is_commondbtm' => false,\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider testIsCommonDBTMProvider\n     */\n    public function testIsCommonDBTM(string $class, bool $is_commondbtm)\n    {\n        $this->boolean(\\Toolbox::isCommonDBTM($class))->isEqualTo($is_commondbtm);\n    }\n\n    protected function testIsAPIDeprecatedProvider()\n    {\n        return [\n            [\n                'class'         => TicketFollowup::class,\n                'is_deprecated' => true,\n            ],\n            [\n                'class'         => Ticket::class,\n                'is_deprecated' => false,\n            ],\n            [\n                'class'         => ITILFollowup::class,\n                'is_deprecated' => false,\n            ],\n            [\n                'class'         => \"Not a real class\",\n                'is_deprecated' => false,\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider testIsAPIDeprecatedProvider\n     */\n    public function testIsAPIDeprecated(string $class, bool $is_deprecated)\n    {\n        $this->boolean(\\Toolbox::isAPIDeprecated($class))->isEqualTo($is_deprecated);\n    }\n\n    protected function urlProvider()\n    {\n        return [\n            ['http://localhost', true],\n            ['https://localhost', true],\n            ['https;//localhost', false],\n            ['https://glpi-project.org', true],\n            ['https://glpi+project-org', false],\n            [' http://my.host.com', false],\n            ['http://my.host.com', true],\n            ['http://my.host.com/', true],\n            ['http://my.host.com/glpi/', true],\n            ['http://my.host.com /', false],\n            ['http://localhost:8080', true],\n            ['http://localhost:8080/', true],\n            ['http://my.host.com:8080/glpi/', true],\n            ['http://my.host.com:8080 /', false],\n            ['http://my.host.com: 8080/', false],\n            ['http://my.host.com :8080/', false],\n            ['http://helpdesk.global.glpi-project.org', true],\n            ['http://dev.helpdesk.global.glpi-project.org', true],\n            ['http://127.0.0.1', true],\n            ['http://127.0.0.1/glpi', true],\n            ['http://127.0.0.1:8080', true],\n            ['http://127.0.0.1:8080/', true],\n            ['http://127.0.0.1 :8080/', false],\n            ['http://127.0.0.1 :8080 /', false],\n            ['http://::1', true],\n            ['http://::1/glpi', true],\n            ['http://::1:8080/', true],\n            ['http://::1:8080/', true],\n            ['HTTPS://::1:8080/', true],\n            ['www.my.host.com', false],\n            ['127.0.0.1', false],\n            ['::1', false],\n            ['http://my.host.com/subdir/glpi/', true],\n            ['http://my.host.com/~subdir/glpi/', true],\n            ['https://localhost<', false],\n            ['https://localhost\"', false],\n            ['https://localhost\\'', false],\n            ['https://localhost?test=true', true],\n            ['https://localhost?test=true&othertest=false', true],\n            ['https://localhost/front/computer.php?is_deleted=0&as_map=0&criteria[0][link]=AND&criteria[0][field]=80&criteria[0][searchtype]=equals&criteria[0][value]=254&search=Search&itemtype=Computer', true],\n        ];\n    }\n\n    /**\n     * @dataProvider urlProvider\n     */\n    public function testIsValidWebUrl($url, $result)\n    {\n        $this->boolean(\\Toolbox::isValidWebUrl($url))->isIdenticalTo((bool)$result, $url);\n    }\n\n    public function testDeprecated()\n    {\n        $this->when(\n            function () {\n                \\Toolbox::deprecated('Calling this function is deprecated');\n            }\n        )->error()\n         ->withType(E_USER_DEPRECATED)\n         ->withMessage('Calling this function is deprecated')\n         ->exists();\n    }\n\n    public function hasTraitProvider()\n    {\n        return [\n            [\\Computer::class, Clonable::class, true],\n            [\\Monitor::class, Clonable::class, true],\n            [\\CommonITILObject::class, Clonable::class, true],\n            [\\Ticket::class, Clonable::class, true],\n            [\\Plugin::class, Clonable::class, false],\n            [\\Project::class, Kanban::class, true],\n            [\\Computer::class, Kanban::class, false],\n            [\\Computer::class, DCBreadcrumb::class, true],\n            [\\Ticket::class, DCBreadcrumb::class, false],\n            [\\CommonITILTask::class, PlanningEvent::class, true],\n            [\\Computer::class, PlanningEvent::class, false],\n        ];\n    }\n\n    /**\n     * @dataProvider hasTraitProvider\n     */\n    public function testHasTrait($class, $trait, $result)\n    {\n        $this->boolean(\\Toolbox::hasTrait($class, $trait))->isIdenticalTo((bool)$result);\n    }\n\n    public function testGetDocumentsFromTag()\n    {\n       // No tag provided in the tested text\n        $output = \\Toolbox::getDocumentsFromTag('');\n        $this->array($output)->hasSize(0);\n\n       // Create a document to emulate a document upload\n        $filename = 'foo.png';\n        copy(__DIR__ . '/../fixtures/uploads/foo.png', GLPI_TMP_DIR . '/' . $filename);\n        $tag = \\Rule::getUuid();\n        $input = [\n            'filename' => 'foo.png',\n            '_filename' => [\n                $filename,\n            ],\n            '_tag_filename' => [\n                $tag,\n            ],\n            '_prefix_filename' => [\n                '5e5e92ffd9bd91.11111111',\n            ]\n        ];\n        $document = new \\Document();\n        $document->add($input);\n        $this->boolean($document->isnewItem())->isFalse();\n\n        $output = \\Toolbox::getDocumentsFromTag(\"foo #$tag# bar \");\n        $this->array($output)->hasSize(1);\n    }\n\n    public function appendParametersProvider()\n    {\n        return [\n            [\n                [\n                    'a'   => 'test1',\n                    'b'   => 'test2'\n                ], '&', 'a=test1&b=test2'\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3'\n                ], '&', 'a%5B0%5D=test1&a%5B1%5D=test2&b=test3' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3*'\n                ], '&', 'a%5B0%5D=test1&a%5B1%5D=test2&b=test3%2A' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => 'test1',\n                    'b'   => 'test2'\n                ], '_', 'a=test1_b=test2'\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3'\n                ], '_', 'a%5B0%5D=test1_a%5B1%5D=test2_b=test3' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => 'test1',\n                    [], // Empty array Should be ignored\n                    'b'   => 'test2'\n                ], '&', 'a=test1&b=test2'\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider appendParametersProvider\n     */\n    public function testAppendParameters(array $params, string $separator, string $expected)\n    {\n        $this->string(\\Toolbox::append_params($params, $separator))->isEqualTo($expected);\n    }\n\n    /**\n     * Data provider for testIsFloat\n     *\n     * @return Generator\n     */\n    protected function testIsFloatProvider(): Generator\n    {\n        yield [\n            'value'    => null,\n            'expected' => false,\n        ];\n\n        yield [\n            'value'    => \"\",\n            'expected' => false,\n        ];\n\n        yield [\n            'value' => \"1\",\n            'expected' => false\n        ];\n\n        yield [\n            'value' => \"1.5\",\n            'expected' => true\n        ];\n\n        yield [\n            'value' => \"7.5569569\",\n            'expected' => true\n        ];\n\n        yield [\n            'value' => \"0\",\n            'expected' => false\n        ];\n\n        yield [\n            'value' => 3.4,\n            'expected' => true\n        ];\n\n        yield [\n            'value' => 3,\n            'expected' => false\n        ];\n\n        yield [\n            'value' => \"not a float\",\n            'expected' => false,\n            'warning' => \"Calling isFloat on string\"\n        ];\n\n        yield [\n            'value' => new stdClass(),\n            'expected' => false,\n            'warning' => \"Calling isFloat on object\"\n        ];\n\n        yield [\n            'value' => [],\n            'expected' => false,\n            'warning' => \"Calling isFloat on array\"\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::IsFloat()\n     *\n     * @dataprovider testIsFloatProvider\n     *\n     * @param mixed $value\n     * @param bool $expected\n     * @param string|null $warning\n     *\n     * @return void\n     */\n    public function testIsFloat($value, bool $expected, ?string $warning = null): void\n    {\n        $result = null;\n\n        if (! is_null($warning)) {\n            $this->when(function () use ($value, &$result) {\n                $result = \\Toolbox::isFloat($value);\n            })\n                ->error()\n                ->withType(E_USER_WARNING)\n                ->withMessage($warning)\n                ->exists();\n        } else {\n            $result = \\Toolbox::isFloat($value);\n        }\n\n        $this->boolean($result)->isEqualTo($expected);\n    }\n\n    /**\n     * Data provider for testgetDecimalNumbers\n     *\n     * @return Generator\n     */\n    protected function testgetDecimalNumbersProvider(): Generator\n    {\n        yield [\n            'value' => \"1\",\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => \"1.5\",\n            'decimals' => 1\n        ];\n\n        yield [\n            'value' => \"7.5569569\",\n            'decimals' => 7\n        ];\n\n        yield [\n            'value' => \"0\",\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => 3.4,\n            'decimals' => 1\n        ];\n\n        yield [\n            'value' => 3,\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => \"not a float\",\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on string\"\n        ];\n\n        yield [\n            'value' => new stdClass(),\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on object\"\n        ];\n\n        yield [\n            'value' => [],\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on array\"\n        ];\n\n        yield [\n            'value' => 3.141592653589791415926535897914159265358979,\n            'decimals' => 13 // floatval() round up after 13 decimals\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::getDecimalNumbers()\n     *\n     * @dataprovider testgetDecimalNumbersProvider\n     *\n     * @param mixed $value\n     * @param int $decimals\n     * @param string|null $warning\n     *\n     * @return void\n     */\n    public function testGetDecimalNumbers($value, int $decimals, ?string $warning = null): void\n    {\n        $result = null;\n\n        if (! is_null($warning)) {\n            $this->when(function () use ($value, &$result) {\n                $result = \\Toolbox::getDecimalNumbers($value);\n            })\n                ->error()\n                ->withType(E_USER_WARNING)\n                ->withMessage($warning)\n                ->exists();\n        } else {\n            $result = \\Toolbox::getDecimalNumbers($value);\n        }\n\n        $this->integer($result)->isEqualTo($decimals);\n    }\n\n    /**\n     * Data provider for testGetMioSizeFromString\n     *\n     * @return Generator\n     */\n    protected function testGetMioSizeFromStringProvider(): Generator\n    {\n        yield [\n            'size'     => \"1024\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024 mo\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024 mio\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024MO\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"2 gio\",\n            'expected' => 2048,\n        ];\n\n        yield [\n            'size'     => \"2gO\",\n            'expected' => 2048,\n        ];\n\n        yield [\n            'size'     => \"2 tio\",\n            'expected' => 2097152,\n        ];\n\n        yield [\n            'size'     => \"2TO\",\n            'expected' => 2097152,\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::getMioSizeFromString()\n     *\n     * @dataprovider testGetMioSizeFromStringProvider\n     *\n     * @param string $value\n     * @param mixed $expected\n     *\n     * @return void\n     */\n    public function testGetMioSizeFromString(string $size, $expected): void\n    {\n        $result = \\Toolbox::getMioSizeFromString($size);\n        $this->variable($result)->isEqualTo($expected);\n    }\n}\n"], "fixing_code": ["{\n  \"php-core-extensions\": [\n    \"core\", \"standard\",\n\n    \"dom\", \"date\", \"fileinfo\", \"filter\", \"json\", \"libxml\", \"pcre\", \"reflection\", \"session\", \"simplexml\", \"spl\", \"xml\",\n\n    \"curl\", \"gd\", \"intl\", \"mysqli\", \"zlib\",\n\n    \"exif\", \"ldap\", \"pcntl\", \"xmlrpc\", \"zip\"\n  ],\n  \"symbol-whitelist\": [\n    \"// PHP symbols\",\n    \"null\",\n    \"false\", \"true\",\n    \"static\", \"self\", \"parent\",\n    \"array\", \"bool\", \"callable\", \"float\", \"int\", \"iterable\", \"object\", \"string\", \"void\",\n\n    \"// Missing constant in Alpine Linux\",\n    \"GLOB_BRACE\",\n\n    \"// PHP 8.1 symbols\",\n    \"Ldap\\\\Connection\",\n\n    \"// GLPI config classes\",\n    \"DB\", \"DBSlave\",\n\n    \"// GLPI base constants (they are not detected as they are dynamically declared)\",\n    \"GLPI_AJAX_DASHBOARD\", \"GLPI_ALLOW_IFRAME_IN_RICH_TEXT\", \"GLPI_CALDAV_IMPORT_STATE\", \"GLPI_CACHE_DIR\",\n    \"GLPI_MARKETPLACE_ALLOW_OVERRIDE\", \"GLPI_MARKETPLACE_MANUAL_DOWNLOADS\",\n    \"GLPI_CRON_DIR\", \"GLPI_CSRF_EXPIRES\", \"GLPI_CSRF_MAX_TOKENS\", \"GLPI_DEMO_MODE\",\n    \"GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE\", \"GLPI_DOC_DIR\", \"GLPI_DUMP_DIR\",\n    \"GLPI_GRAPH_DIR\", \"GLPI_IDOR_EXPIRES\", \"GLPI_INSTALL_MODE\", \"GLPI_INVENTORY_DIR\", \"GLPI_LOCAL_I18N_DIR\",\n    \"GLPI_LOCK_DIR\", \"GLPI_LOG_DIR\", \"GLPI_MARKETPLACE_DIR\", \"GLPI_MARKETPLACE_PLUGINS_API_URI\",\n    \"GLPI_MARKETPLACE_PRERELEASES\", \"GLPI_NETWORK_REGISTRATION_API_URL\", \"GLPI_NETWORK_MAIL\",\n    \"GLPI_NETWORK_SERVICES\", \"GLPI_PICTURE_DIR\", \"GLPI_PLUGIN_DOC_DIR\", \"GLPI_RSS_DIR\", \"GLPI_SESSION_DIR\",\n    \"GLPI_TELEMETRY_URI\", \"GLPI_TMP_DIR\", \"GLPI_UPLOAD_DIR\", \"GLPI_USE_CSRF_CHECK\", \"GLPI_USE_IDOR_CHECK\",\n    \"GLPI_USER_AGENT_EXTRA_COMMENTS\", \"GLPI_VAR_DIR\", \"GLPI_CENTRAL_WARNINGS\", \"GLPI_SERVERSIDE_URL_ALLOWLIST\",\n\n    \"// GLPI optionnal constants\",\n    \"GLPI_FORCE_MAIL\", \"GLPI_LOG_LVL\",\n\n    \"// GLPI test suite specific functions\",\n    \"GLPI_SQL_DEBUG\",\n\n    \"// apache function\",\n    \"getallheaders\",\n\n    \"// OPCache extension (not installed on testing env)\",\n    \"opcache_get_status\", \"opcache_invalidate\", \"opcache_reset\",\n\n    \"// random native PHP functions\",\n    \"// these are moved in random native extension in PHP 8.2, but this extension does not exists in previous PHP versions\",\n    \"mt_getrandmax\",\n    \"mt_rand\",\n    \"rand\",\n    \"random_bytes\",\n    \"random_int\",\n\n    \"// SELinux PECL extension\",\n    \"selinux_getenforce\", \"selinux_get_boolean_active\", \"selinux_is_enabled\",\n\n    \"// XHProf PECL extension\",\n    \"XHProfRuns_Default\", \"xhprof_disable\", \"xhprof_enable\", \"XHPROF_PATH\", \"XHPROF_URL\",\n\n    \"// phpCAS library\",\n    \"CAS_VERSION_2_0\", \"phpCAS\",\n\n    \"// paragonie/sodium_compat library\",\n    \"SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES\", \"SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES\", \"sodium_crypto_aead_xchacha20poly1305_ietf_decrypt\", \"sodium_crypto_aead_xchacha20poly1305_ietf_encrypt\", \"sodium_crypto_aead_chacha20poly1305_ietf_keygen\",\n\n    \"//xhprof\",\n    \"XHPROF_FLAGS_NO_BUILTINS\", \"XHPROF_FLAGS_CPU\", \"XHPROF_FLAGS_MEMORY\",\n\n    \"//brotli compression\",\n    \"brotli_uncompress\",\n    \"brotli_compress\",\n\n    \"// composer autoloader\",\n    \"Composer\\\\Autoload\\\\ClassLoader\"\n  ],\n  \"scan-files\": [\n    \"ajax/**/*.php\",\n    \"bin/console\",\n    \"front/**/*.php\",\n    \"inc/**/*.php\",\n    \"install/**/*.php\",\n    \"src/**/*.php\",\n    \"/*.php\"\n  ]\n}\n", "/*!\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\n@import \"../../includes/components/fullcalendar\";\n\n#planning_container {\n   gap: 10px;\n\n   &.folded {\n      padding-left: 28px;\n   }\n\n   #planning_filter {\n      #planning_filter_content {\n         min-width: 300px;\n      }\n\n      .toggle {\n         float: right;\n         margin: 8px 8px 0 0;\n         height: 18px;\n         width: 18px;\n         display: block;\n\n         &::before {\n            font: var(--fa-font-solid);\n            content: \"\\f191\";\n         }\n      }\n\n      &.folded {\n         .toggle {\n            float: none;\n            &::before {\n               font: var(--fa-font-solid);\n               content: \"\\f152\";\n            }\n         }\n\n         width: 18px;\n      }\n\n      h3 {\n         background: $header-bg;\n         color: $header-fg;\n         margin: 2px 0 0 0;\n         padding: .5em .5em .5em .7em;\n         font-weight: normal;\n         line-height: 1.3;\n         font-size: 13px;\n      }\n\n      ul.filters {\n         border: 0;\n         padding: 5px;\n         list-style: none;\n         margin: 0;\n         padding: 0;\n\n         > li {\n            padding: 5px 0 5px 5px;\n            display: flex;\n            flex-wrap: wrap;\n            align-items: center;\n\n            .actor_icon {\n               padding-bottom: 2px;\n               vertical-align: top;\n               font-size: 14px;\n               margin-left: 5px;\n            }\n\n            label {\n               padding-left: 5px;\n               line-height: 16px;\n               width: 185px;\n               overflow: hidden;\n               text-overflow: ellipsis;\n               display: inline-block;\n               white-space: nowrap;\n\n               > i {\n                  color: $warning;\n                  float: right;\n               }\n            }\n\n            .filter-icon {\n               float: right;\n               padding: 0;\n               border: none;\n            }\n\n            .sp-replacer {\n               float: right;\n               padding: 0;\n               border: none;\n\n               .sp-preview {\n                  margin-right: 0;\n                  border: none;\n               }\n\n               .sp-dd {\n                  display: none;\n               }\n            }\n\n            &.group_users {\n               .toggle {\n                  width: 14px;\n                  height: 14px;\n                  margin: 0 4px 2px 0;\n                  vertical-align: middle;\n\n                  &::before {\n                     font: var(--fa-font-solid);\n                     content: \"\\f0fe\";\n                  }\n               }\n\n               &.expanded .toggle {\n                  &::before {\n                     font: var(--fa-font-solid);\n                     content: \"\\f146\";\n                  }\n               }\n\n               ul.group_listofusers {\n                  border-left: 1px dashed #D4D4D4;\n                  margin: 6px 0 0 6px;\n                  padding: 0;\n                  display: none;\n                  width: 100%;\n               }\n\n               &.expanded ul.group_listofusers {\n                  display: block;\n\n                  > li label {\n                     width: 162px;\n                  }\n               }\n            }\n\n            .color_input {\n               float: right;\n               margin-right: 2px;\n\n               input {\n                  border: 0 !important;\n                  background-color: transparent !important;\n               }\n            }\n         }\n      }\n\n      .planning_link {\n         text-align: center;\n         display: block;\n      }\n\n      .planning_add_filter {\n         float: right;\n         margin-right: 3px;\n      }\n\n      .filter_option {\n         width: 12px;\n         height: 12px;\n         margin: 3px 2px;\n         display: inline-block;\n         position: relative;\n         left: 0;\n\n         > img {\n            z-index: 1;\n         }\n\n         ul {\n            display: none;\n            width: 140px;\n\n            li {\n               white-space: normal;\n            }\n         }\n      }\n   }\n\n   #planning {\n      flex-grow: 1;\n      min-height: calc(100vh - 160px);\n\n      .fc-time-grid-event {\n         // TODO check new version,\n         // Fullcalendar 2.4.0 seems to have removed this property\n         overflow: hidden;\n      }\n\n      .end-of-day {\n         border-right: 1px solid #bdbdbd;\n      }\n\n      .fc-toolbar h2 {\n         font-size: 1.2em;\n\n      }\n\n      .event_today {\n         background: #fcf8e3;\n      }\n\n      .fc-event {\n         font-weight: normal;\n         display: block;\n\n         .fc-content {\n            margin-right: 8px;\n         }\n\n         .fc-time {\n            overflow: hidden;\n         }\n\n         .fc-title {\n            font-weight: bold;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n         }\n\n         .content {\n            font-weight: normal;\n            padding: 0 7px 0 2px;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            margin: 0;\n            display: block;\n\n            .event-description {\n               border-top: 1px solid rgba(0, 0, 0, 0.2);\n               margin-top: 2px;\n               padding-top: 2px;\n\n               p {\n                  margin: 0;\n               }\n            }\n         }\n\n         .event_type {\n            position: absolute;\n            width: 7px;\n            bottom: 0;\n            top: 0;\n            right: 0;\n         }\n      }\n\n      .fc-timeline {\n         .fc-event {\n            .content {\n               max-height: 25px;\n            }\n         }\n      }\n\n      .fc-list-item-title .event_type {\n         height: 12px;\n         width: 6px;\n         margin-right: 3px;\n         display: inline-block;\n      }\n\n      .event_past .fc-list-item-title .event_type {\n         opacity: .5;\n      }\n\n      .planning-select-helper {\n         border: 2px solid #3B8CBE;\n         background-color: rgba(59, 140, 190, 0.5);\n      }\n\n      .fc-day-grid-event .fc-resizer {\n         width: 10px;\n      }\n\n      .fc-time-grid-event .fc-resizer {\n         height: 10px;\n      }\n\n      .fc-divider {\n         border: 1px dashed #cccccc;\n      }\n\n      .fc-list-empty-wrap2 {\n         position: initial;\n      }\n   }\n\n}\n\n.planning_on_central {\n   .fc-head {\n      display: none;\n   }\n\n   .fc-scroller {\n      height: auto !important;\n      max-height: 400px;\n   }\n}\n\n/* for checkavailable */\n\n.planning {\n   text-align: center;\n   border: 1px dashed #cccccc;\n   background-color: #d7d7d2;\n   font-size: 9px;\n\n   &:hover {\n      border: 1px solid #999999;\n      background-color: white;\n   }\n}\n\n.available {\n   background-color: green;\n}\n\n.notavailable {\n   background-color: red;\n}\n\n.partialavailableend {\n   background-image: -webkit-linear-gradient(left, red 50%, green 0%);\n   background-image: -moz-linear-gradient(left, red 50%, green 0%);\n   background-image: -ms-linear-gradient(left, red 50%, green 0%);\n   background-image: -o-linear-gradient(left, red 50%, green 0%);\n   background-image: linear-gradient(left, red 50%, green 0%);\n}\n\n.partialavailablebegin {\n   background-image: -webkit-linear-gradient(left, green 50%, red 0%);\n   background-image: -moz-linear-gradient(left, green 50%, red 0%);\n   background-image: -ms-linear-gradient(left, green 50%, red 0%);\n   background-image: -o-linear-gradient(left, green 50%, red 0%);\n   background-image: linear-gradient(left, green 50%, red 0%);\n}\n\n.planning-context-menu {\n   list-style: none;\n   margin: 0;\n   padding: 0;\n   position:fixed;\n   z-index:20000;\n   background-color: #FFF;\n   box-shadow: 0 10px 20px rgba(0,0,0,0.19),\n               0 6px 6px rgba(0,0,0,0.23);\n\n   li {\n      padding: 8px 10px;\n      cursor: pointer;\n\n      i.fas,\n      i.fa-solid,\n      i.far,\n      i.fa-regular {\n         margin-right: 5px;\n         color: #555\n      }\n\n      &:hover {\n         background-color: #CCC;\n      }\n   }\n}\n\n@media screen and (max-width:767px) {\n   .fc-toolbar.fc-header-toolbar {\n      flex-direction:column;\n   }\n\n   .fc-toolbar-chunk {\n      display: table-row;\n      text-align:center;\n      padding:5px 0;\n   }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n    define('GLPI_ROOT', dirname(__FILE__, 2));\n}\n\n// Notice problem  for date function :\n$tz = ini_get('date.timezone');\nif (!empty($tz)) {\n    date_default_timezone_set($tz);\n} else {\n    date_default_timezone_set(@date_default_timezone_get());\n}\n\ninclude_once(GLPI_ROOT . \"/inc/autoload.function.php\");\n\n(function () {\n   // Define GLPI_* constants that can be customized by admin.\n   //\n   // Use a self-invoking anonymous function to:\n   // - prevent any global variables/functions definition from `local_define.php` and `downstream.php` files;\n   // - prevent any global variables definition from current function logic.\n\n    $constants = [\n      // Constants related to system paths\n        'GLPI_CONFIG_DIR'      => GLPI_ROOT . '/config', // Path for configuration files (db, security key, ...)\n        'GLPI_VAR_DIR'         => GLPI_ROOT . '/files',  // Path for all files\n        'GLPI_MARKETPLACE_DIR' => GLPI_ROOT . '/marketplace', // Path for marketplace plugins\n        'GLPI_DOC_DIR'         => '{GLPI_VAR_DIR}', // Path for documents storage\n        'GLPI_CACHE_DIR'       => '{GLPI_VAR_DIR}/_cache', // Path for cache\n        'GLPI_CRON_DIR'        => '{GLPI_VAR_DIR}/_cron', // Path for cron storage\n        'GLPI_DUMP_DIR'        => '{GLPI_VAR_DIR}/_dumps', // Path for backup dump\n        'GLPI_GRAPH_DIR'       => '{GLPI_VAR_DIR}/_graphs', // Path for graph storage\n        'GLPI_LOCAL_I18N_DIR'  => '{GLPI_VAR_DIR}/_locales', // Path for local i18n files\n        'GLPI_LOCK_DIR'        => '{GLPI_VAR_DIR}/_lock', // Path for lock files storage (used by cron)\n        'GLPI_LOG_DIR'         => '{GLPI_VAR_DIR}/_log', // Path for log storage\n        'GLPI_PICTURE_DIR'     => '{GLPI_VAR_DIR}/_pictures', // Path for picture storage\n        'GLPI_PLUGIN_DOC_DIR'  => '{GLPI_VAR_DIR}/_plugins', // Path for plugins documents storage\n        'GLPI_RSS_DIR'         => '{GLPI_VAR_DIR}/_rss', // Path for rss storage\n        'GLPI_SESSION_DIR'     => '{GLPI_VAR_DIR}/_sessions', // Path for sessions storage\n        'GLPI_TMP_DIR'         => '{GLPI_VAR_DIR}/_tmp', // Path for temp storage\n        'GLPI_UPLOAD_DIR'      => '{GLPI_VAR_DIR}/_uploads', // Path for upload storage\n        \"GLPI_INVENTORY_DIR\"   => '{GLPI_VAR_DIR}/_inventories', //Path for inventories\n\n      // Security constants\n        'GLPI_USE_CSRF_CHECK'            => '1',\n        'GLPI_CSRF_EXPIRES'              => '7200',\n        'GLPI_CSRF_MAX_TOKENS'           => '100',\n        'GLPI_USE_IDOR_CHECK'            => '1',\n        'GLPI_IDOR_EXPIRES'              => '7200',\n        'GLPI_ALLOW_IFRAME_IN_RICH_TEXT' => false,\n        'GLPI_SERVERSIDE_URL_ALLOWLIST'  => [\n            // allowlist (regex format) of URL that can be fetched from server side (used for RSS feeds and external calendars, among others)\n            // URL will be considered as safe as long as it matches at least one entry of the allowlist\n            '/^(https?|feed):\\/\\/[^@:]+(\\/.*)?$/', // only accept http/https/feed protocols, and reject presence of @ (username) and : (protocol) in host part of URL\n        ],\n\n      // Constants related to GLPI Project / GLPI Network external services\n        'GLPI_TELEMETRY_URI'                => 'https://telemetry.glpi-project.org', // Telemetry project URL\n        'GLPI_INSTALL_MODE'                 => is_dir(GLPI_ROOT . '/.git') ? 'GIT' : 'TARBALL', // Install mode for telemetry\n        'GLPI_NETWORK_MAIL'                 => 'glpi@teclib.com',\n        'GLPI_NETWORK_SERVICES'             => 'https://services.glpi-network.com', // GLPI Network services project URL\n        'GLPI_NETWORK_REGISTRATION_API_URL' => '{GLPI_NETWORK_SERVICES}/api/registration/',\n        'GLPI_MARKETPLACE_PLUGINS_API_URI'  => '{GLPI_NETWORK_SERVICES}/api/glpi-plugins/',\n        'GLPI_MARKETPLACE_ALLOW_OVERRIDE'   => true, // allow marketplace to override a plugin found outside GLPI_MARKETPLACE_DIR\n        'GLPI_MARKETPLACE_MANUAL_DOWNLOADS' => true, // propose manual download link of plugins which cannot be installed/updated by marketplace\n        'GLPI_USER_AGENT_EXTRA_COMMENTS'    => '', // Extra comment to add to GLPI User-Agent\n\n      // SQL compatibility\n        'GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE' => '1', // '1' to disable ONLY_FULL_GROUP_BY 'sql_mode'\n\n      // Other constants\n        'GLPI_AJAX_DASHBOARD'         => '1',\n        'GLPI_CALDAV_IMPORT_STATE'    => 0, // external events created from a caldav client will take this state by default (0 = Planning::INFO)\n        'GLPI_DEMO_MODE'              => '0',\n        'GLPI_CENTRAL_WARNINGS'       => '1', // display (1), or not (0), warnings on GLPI Central page\n    ];\n\n   // Define constants values based on server env variables (i.e. defined using apache SetEnv directive)\n    foreach (array_keys($constants) as $name) {\n        if (!defined($name) && ($value = getenv($name)) !== false) {\n            define($name, $value);\n        }\n    }\n\n   // Define constants values from local configuration file\n    if (file_exists(GLPI_ROOT . '/config/local_define.php') && !defined('TU_USER')) {\n        require_once GLPI_ROOT . '/config/local_define.php';\n    }\n\n   // Define constants values from downstream distribution file\n    if (file_exists(GLPI_ROOT . '/inc/downstream.php')) {\n        include_once(GLPI_ROOT . '/inc/downstream.php');\n    }\n\n   // Define constants values from defaults\n   // 1. First, define constants that does not inherit from another one.\n   // 2. Second, define constants that inherits from another one.\n   // This logic is quiet simple and is not made to handle chain inheritance.\n    $inherit_pattern = '/\\{(?<name>GLPI_[\\w]+)\\}/';\n    foreach ($constants as $key => $value) {\n        if (!defined($key) && (!is_string($value) || !preg_match($inherit_pattern, $value))) {\n            define($key, $value);\n        }\n    }\n    foreach ($constants as $key => $value) {\n        if (!defined($key)) {\n           // Replace {GLPI_*} by value of corresponding constant\n            $value = preg_replace_callback(\n                '/\\{(?<name>GLPI_[\\w]+)\\}/',\n                function ($matches) {\n                    return defined($matches['name']) ? constant($matches['name']) : '';\n                },\n                $value\n            );\n\n            define($key, $value);\n        }\n    }\n\n   // Where to load plugins.\n   // Order in this array is important (priority to first found).\n    if (!defined('PLUGINS_DIRECTORIES')) {\n        define('PLUGINS_DIRECTORIES', [\n            GLPI_MARKETPLACE_DIR,\n            GLPI_ROOT . '/plugins',\n        ]);\n    } else if (!is_array(PLUGINS_DIRECTORIES)) {\n        throw new \\Exception('PLUGINS_DIRECTORIES constant value must be an array');\n    }\n})();\n\ndefine('GLPI_I18N_DIR', GLPI_ROOT . \"/locales\");\n\ninclude_once(GLPI_ROOT . \"/inc/define.php\");\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\RichText\\RichText;\nuse RRule\\RRule;\nuse Sabre\\VObject\\Component\\VCalendar;\nuse Sabre\\VObject\\Component\\VEvent;\nuse Sabre\\VObject\\Component\\VTodo;\nuse Sabre\\VObject\\Property\\FlatText;\nuse Sabre\\VObject\\Property\\ICalendar\\Recur;\nuse Sabre\\VObject\\Reader;\n\n/**\n * Planning Class\n **/\nclass Planning extends CommonGLPI\n{\n    public static $rightname = 'planning';\n\n    public static $palette_bg = ['#FFEEC4', '#D4EDFB', '#E1D0E1', '#CDD7A9', '#F8C8D2',\n        '#D6CACA', '#D3D6ED', '#C8E5E3', '#FBD5BF', '#E9EBA2',\n        '#E8E5E5', '#DBECDF', '#FCE7F2', '#E9D3D3', '#D2DBDC'\n    ];\n\n    public static $palette_fg = ['#57544D', '#59707E', '#5B3B5B', '#3A431A', '#58242F',\n        '#3B2727', '#272D59', '#2E4645', '#6F4831', '#46481B',\n        '#4E4E4E', '#274C30', '#6A535F', '#473232', '#454545',\n    ];\n\n    public static $palette_ev = ['#E94A31', '#5174F2', '#51C9F2', '#FFCC29', '#20C646',\n        '#364959', '#8C5344', '#FF8100', '#F600C4', '#0017FF',\n        '#000000', '#FFFFFF', '#005800', '#925EFF'\n    ];\n\n    public static $directgroup_itemtype = ['PlanningExternalEvent', 'ProjectTask', 'TicketTask', 'ProblemTask', 'ChangeTask'];\n\n    const READMY    =    1;\n    const READGROUP = 1024;\n    const READALL   = 2048;\n\n    const INFO = 0;\n    const TODO = 1;\n    const DONE = 2;\n\n    /**\n     * @since 0.85\n     *\n     * @param $nb\n     **/\n    public static function getTypeName($nb = 0)\n    {\n        return __('Planning');\n    }\n\n\n    public static function getMenuContent()\n    {\n        $menu = [];\n\n        if (Planning::canView()) {\n            $menu = [\n                'title'    => static::getMenuName(),\n                'shortcut' => static::getMenuShorcut(),\n                'page'     => static::getSearchURL(false),\n                'icon'     => static::getIcon(),\n            ];\n\n            if ($data = static::getAdditionalMenuLinks()) {\n                $menu['links'] = $data;\n            }\n\n            if ($options = static::getAdditionalMenuOptions()) {\n                $menu['options'] = $options;\n            }\n        }\n\n        return $menu;\n    }\n\n\n    public static function getAdditionalMenuLinks()\n    {\n        global $CFG_GLPI;\n\n        $links = [];\n\n        if (Planning::canView()) {\n            $title     = Planning::getTypeName(Session::getPluralNumber());\n            $planning  = \"<i class='fa far fa-calendar-alt pointer' title='$title'>\n                        <span class='sr-only'>$title</span>\n                       </i>\";\n\n            $links[$planning] = Planning::getSearchURL(false);\n        }\n\n        if (PlanningExternalEvent::canView()) {\n            $ext_title = PlanningExternalEvent::getTypeName(Session::getPluralNumber());\n            $external  = \"<i class='fa fas fa-calendar-week pointer' title='$ext_title'>\n                        <span class='sr-only'>$ext_title</span>\n                       </i>\";\n\n            $links[$external] = PlanningExternalEvent::getSearchURL(false);\n        }\n\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n            $caldav_title = __('CalDAV browser interface');\n            $caldav  = \"<i class='fa fas fa-sync pointer' title='$caldav_title'>\n                        <span class='sr-only'>$caldav_title</span>\n                       </i>\";\n\n            $links[$caldav] = '/caldav.php';\n        }\n\n        return $links;\n    }\n\n\n    public static function getAdditionalMenuOptions()\n    {\n        if (PlanningExternalEvent::canView()) {\n            return [\n                'external' => [\n                    'title' => PlanningExternalEvent::getTypeName(Session::getPluralNumber()),\n                    'page'  => PlanningExternalEvent::getSearchURL(false),\n                    'links' => [\n                        'add'    => '/front/planningexternalevent.form.php',\n                        'search' => '/front/planningexternalevent.php',\n                    ] + static::getAdditionalMenuLinks()\n                ]\n            ];\n        }\n        return false;\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'p';\n    }\n\n\n    /**\n     * @since 0.85\n     **/\n    public static function canView()\n    {\n\n        return Session::haveRightsOr(self::$rightname, [self::READMY, self::READGROUP,\n            self::READALL\n        ]);\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong               = [];\n        $ong['no_all_tab'] = true;\n\n        $this->addStandardTab(__CLASS__, $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            $tabs[1] = self::getTypeName();\n\n            return $tabs;\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            switch ($tabnum) {\n                case 1: // all\n                    Planning::showPlanning($_SESSION['glpiID']);\n                    break;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Get planning state name\n     *\n     * @param $value status ID\n     **/\n    public static function getState($value)\n    {\n\n        switch ($value) {\n            case static::INFO:\n                return _n('Information', 'Information', 1);\n\n            case static::TODO:\n                return __('To do');\n\n            case static::DONE:\n                return __('Done');\n        }\n    }\n\n\n    /**\n     * Dropdown of planning state\n     *\n     * @param $name   select name\n     * @param $value  default value (default '')\n     * @param $display  display of send string ? (true by default)\n     * @param $options  options\n     **/\n    public static function dropdownState($name, $value = '', $display = true, $options = [])\n    {\n\n        $values = [static::INFO => _n('Information', 'Information', 1),\n            static::TODO => __('To do'),\n            static::DONE => __('Done')\n        ];\n\n        return Dropdown::showFromArray($name, $values, array_merge(['value'   => $value,\n            'display' => $display\n        ], $options));\n    }\n\n\n    /**\n     * Check already planned user for a period\n     *\n     * @param integer $users_id user id\n     * @param string  $begin    begin date\n     * @param string  $end      end date\n     * @param array   $except   items which not be into account ['Reminder' => [1, 2, id_of_items]]\n     **/\n    public static function checkAlreadyPlanned($users_id, $begin, $end, $except = [])\n    {\n        global $CFG_GLPI;\n\n        $planned = false;\n        $message = '';\n\n        foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n            $item = new $itemtype();\n            $data = $item->populatePlanning([\n                'who'           => $users_id,\n                'whogroup'      => 0,\n                'begin'         => $begin,\n                'end'           => $end,\n                'check_planned' => true\n            ]);\n            if (isPluginItemType($itemtype)) {\n                if (isset($data['items'])) {\n                    $data = $data['items'];\n                } else {\n                    $data = [];\n                }\n            }\n\n            if (\n                count($data)\n                && method_exists($itemtype, 'getAlreadyPlannedInformation')\n            ) {\n                foreach ($data as $val) {\n                    if (\n                        !isset($except[$itemtype])\n                        || (is_array($except[$itemtype]) && !in_array($val['id'], $except[$itemtype]))\n                    ) {\n                         $planned  = true;\n                         $message .= '- ' . $item->getAlreadyPlannedInformation($val);\n                         $message .= '<br/>';\n                    }\n                }\n            }\n        }\n        if ($planned) {\n            $user = new User();\n            $user->getFromDB($users_id);\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('The user %1$s is busy at the selected timeframe.'),\n                    '<a href=\"' . $user->getFormURLWithID($users_id) . '\">' . $user->getName() . '</a>'\n                ) . '<br/>' . $message,\n                false,\n                WARNING\n            );\n        }\n        return $planned;\n    }\n\n\n    /**\n     * Show the availability of a user\n     *\n     * @since 0.83\n     *\n     * @param $params   array of params\n     *    must contain :\n     *          - begin: begin date to check (default '')\n     *          - end: end date to check (default '')\n     *          - itemtype : User or Object type (Ticket...)\n     *          - foreign key field of the itemtype to define which item to used\n     *    optional :\n     *          - limitto : limit display to a specific user\n     *\n     * @return void\n     **/\n    public static function checkAvailability($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (!isset($params['itemtype'])) {\n            return false;\n        }\n        if (!($item = getItemForItemtype($params['itemtype']))) {\n            return false;\n        }\n        if (\n            !isset($params[$item->getForeignKeyField()])\n            || !$item->getFromDB($params[$item->getForeignKeyField()])\n        ) {\n            return false;\n        }\n       // No limit by default\n        if (!isset($params['limitto'])) {\n            $params['limitto'] = 0;\n        }\n        if (isset($params['begin']) && !empty($params['begin'])) {\n            $begin = $params['begin'];\n        } else {\n            $begin = date(\"Y-m-d\");\n        }\n        if (isset($params['end']) && !empty($params['end'])) {\n            $end = $params['end'];\n        } else {\n            $end = date(\"Y-m-d\");\n        }\n\n        if ($end < $begin) {\n            $end = $begin;\n        }\n        $realbegin = $begin . \" \" . $CFG_GLPI[\"planning_begin\"];\n        $realend   = $end . \" \" . $CFG_GLPI[\"planning_end\"];\n        if ($CFG_GLPI[\"planning_end\"] == \"24:00\") {\n            $realend = $end . \" 23:59:59\";\n        }\n\n        $users = [];\n\n        switch ($item->getType()) {\n            case 'User':\n                $users[$item->getID()] = $item->getName();\n                break;\n\n            default:\n                if (is_a($item, 'CommonITILObject', true)) {\n                    foreach ($item->getUsers(CommonITILActor::ASSIGN) as $data) {\n                        $users[$data['users_id']] = getUserName($data['users_id']);\n                    }\n                    foreach ($item->getGroups(CommonITILActor::ASSIGN) as $data) {\n                        foreach (Group_User::getGroupUsers($data['groups_id']) as $data2) {\n                            $users[$data2['id']] = formatUserName(\n                                $data2[\"id\"],\n                                $data2[\"name\"],\n                                $data2[\"realname\"],\n                                $data2[\"firstname\"]\n                            );\n                        }\n                    }\n                }\n                if ($itemtype = 'Ticket') {\n                    $task = new TicketTask();\n                } else if ($itemtype = 'Problem') {\n                    $task = new ProblemTask();\n                }\n                if ($task->getFromDBByCrit(['tickets_id' => $item->fields['id']])) {\n                    $users['users_id'] = getUserName($task->fields['users_id_tech']);\n                    $group_id = $task->fields['groups_id_tech'];\n                    if ($group_id) {\n                        foreach (Group_User::getGroupUsers($group_id) as $data2) {\n                             $users[$data2['id']] = formatUserName(\n                                 $data2[\"id\"],\n                                 $data2[\"name\"],\n                                 $data2[\"realname\"],\n                                 $data2[\"firstname\"]\n                             );\n                        }\n                    }\n                }\n                break;\n        }\n        asort($users);\n       // Use get method to check availability\n        echo \"<div class='center'><form method='GET' name='form' action='planning.php'>\\n\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        $colspan = 5;\n        if (count($users) > 1) {\n            $colspan++;\n        }\n        echo \"<tr class='tab_bg_1'><th colspan='$colspan'>\" . __('Availability') . \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Start') . \"</td>\\n\";\n        echo \"<td>\";\n        Html::showDateField(\"begin\", ['value'      => $begin,\n            'maybeempty' => false\n        ]);\n        echo \"</td>\\n\";\n        echo \"<td>\" . __('End') . \"</td>\\n\";\n        echo \"<td>\";\n        Html::showDateField(\"end\", ['value'      => $end,\n            'maybeempty' => false\n        ]);\n        echo \"</td>\\n\";\n        if (count($users) > 1) {\n            echo \"<td width='40%'>\";\n            $data = [0 => __('All')];\n            $data += $users;\n            Dropdown::showFromArray('limitto', $data, ['width' => '100%',\n                'value' => $params['limitto']\n            ]);\n            echo \"</td>\";\n        }\n\n        echo \"<td class='center'>\";\n        echo \"<input type='hidden' name='\" . $item->getForeignKeyField() . \"' value=\\\"\" . $item->getID() . \"\\\">\";\n        echo \"<input type='hidden' name='itemtype' value=\\\"\" . $item->getType() . \"\\\">\";\n        echo \"<input type='submit' class='btn btn-primary' name='checkavailability' value=\\\"\" .\n             _sx('button', 'Search') . \"\\\">\";\n        echo \"</td>\\n\";\n\n        echo \"</tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\\n\";\n\n        if (($params['limitto'] > 0) && isset($users[$params['limitto']])) {\n            $displayuser[$params['limitto']] = $users[$params['limitto']];\n        } else {\n            $displayuser = $users;\n        }\n\n        if (count($displayuser)) {\n            foreach ($displayuser as $who => $whoname) {\n                $params = [\n                    'who'       => $who,\n                    'whogroup'  => 0,\n                    'begin'     => $realbegin,\n                    'end'       => $realend\n                ];\n\n                $interv = [];\n                foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n                    $interv = array_merge($interv, $itemtype::populatePlanning($params));\n                    if (method_exists($itemtype, 'populateNotPlanned')) {\n                        $interv = array_merge($interv, $itemtype::populateNotPlanned($params));\n                    }\n                }\n\n               // Print Headers\n                echo \"<br><div class='center'><table class='tab_cadre_fixe'>\";\n                $colnumber  = 1;\n                $plan_begin = explode(\":\", $CFG_GLPI[\"planning_begin\"]);\n                $plan_end   = explode(\":\", $CFG_GLPI[\"planning_end\"]);\n                $begin_hour = intval($plan_begin[0]);\n                $end_hour   = intval($plan_end[0]);\n                if ($plan_end[1] != 0) {\n                    $end_hour++;\n                }\n                $colsize    = floor((100 - 15) / ($end_hour - $begin_hour));\n                $timeheader = '';\n                for ($i = $begin_hour; $i < $end_hour; $i++) {\n                    $from       = ($i < 10 ? '0' : '') . $i;\n                    $timeheader .= \"<th width='$colsize%' colspan='4'>\" . $from . \":00</th>\";\n                    $colnumber += 4;\n                }\n\n               // Print Headers\n                echo \"<tr class='tab_bg_1'><th colspan='$colnumber'>\";\n                echo $whoname;\n                echo \"</th></tr>\";\n                echo \"<tr class='tab_bg_1'><th width='15%'>&nbsp;</th>\";\n                echo $timeheader;\n                echo \"</tr>\";\n\n                $day_begin = strtotime($realbegin);\n                $day_end   = strtotime($realend);\n\n                for ($time = $day_begin; $time < $day_end; $time += DAY_TIMESTAMP) {\n                    $current_day   = date('Y-m-d', $time);\n                    echo \"<tr><th>\" . Html::convDate($current_day) . \"</th>\";\n                    $begin_quarter = $begin_hour * 4;\n                    $end_quarter   = $end_hour * 4;\n                    for ($i = $begin_quarter; $i < $end_quarter; $i++) {\n                        $begin_time = date(\"Y-m-d H:i:s\", strtotime($current_day) + ($i) * HOUR_TIMESTAMP / 4);\n                        $end_time   = date(\"Y-m-d H:i:s\", strtotime($current_day) + ($i + 1) * HOUR_TIMESTAMP / 4);\n                       // Init activity interval\n                        $begin_act  = $end_time;\n                        $end_act    = $begin_time;\n\n                        reset($interv);\n                        while ($data = current($interv)) {\n                            if (\n                                ($data[\"begin\"] >= $begin_time)\n                                && ($data[\"end\"] <= $end_time)\n                            ) {\n                             // In\n                                if ($begin_act > $data[\"begin\"]) {\n                                    $begin_act = $data[\"begin\"];\n                                }\n                                if ($end_act < $data[\"end\"]) {\n                                    $end_act = $data[\"end\"];\n                                }\n                                unset($interv[key($interv)]);\n                            } else if (\n                                ($data[\"begin\"] < $begin_time)\n                                 && ($data[\"end\"] > $end_time)\n                            ) {\n                            // Through\n                                $begin_act = $begin_time;\n                                $end_act   = $end_time;\n                                next($interv);\n                            } else if (\n                                ($data[\"begin\"] >= $begin_time)\n                                 && ($data[\"begin\"] < $end_time)\n                            ) {\n                            // Begin\n                                if ($begin_act > $data[\"begin\"]) {\n                                    $begin_act = $data[\"begin\"];\n                                }\n                                $end_act = $end_time;\n                                next($interv);\n                            } else if (\n                                ($data[\"end\"] > $begin_time)\n                                 && ($data[\"end\"] <= $end_time)\n                            ) {\n                            //End\n                                $begin_act = $begin_time;\n                                if ($end_act < $data[\"end\"]) {\n                                    $end_act = $data[\"end\"];\n                                }\n                                unset($interv[key($interv)]);\n                            } else { // Defautl case\n                                next($interv);\n                            }\n                        }\n                        if ($begin_act < $end_act) {\n                            if (\n                                ($begin_act <= $begin_time)\n                                && ($end_act >= $end_time)\n                            ) {\n                               // Activity in quarter\n                                echo \"<td class='notavailable'>&nbsp;</td>\";\n                            } else {\n                             // Not all the quarter\n                                if ($begin_act <= $begin_time) {\n                                    echo \"<td class='partialavailableend'>&nbsp;</td>\";\n                                } else {\n                                    echo \"<td class='partialavailablebegin'>&nbsp;</td>\";\n                                }\n                            }\n                        } else {\n                           // No activity\n                            echo \"<td class='available'>&nbsp;</td>\";\n                        }\n                    }\n                    echo \"</tr>\";\n                }\n                echo \"<tr class='tab_bg_1'><td colspan='$colnumber'>&nbsp;</td></tr>\";\n                echo \"</table></div>\";\n            }\n        }\n        echo \"<div><table class='tab_cadre'>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th>\" . __('Caption') . \"</th>\";\n        echo \"<td class='available' colspan=8>\" . __('Available') . \"</td>\";\n        echo \"<td class='notavailable' colspan=8>\" . __('Unavailable') . \"</td>\";\n        echo \"</tr>\";\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Show the planning\n     *\n     * Function name change since version 0.84 show() => showPlanning\n     * Function prototype changes in 9.1 (no more parameters)\n     *\n     * @return void\n     **/\n    public static function showPlanning($fullview = true)\n    {\n        if (!static::canView()) {\n            return false;\n        }\n\n        self::initSessionForCurrentUser();\n\n       // scheduler feature key\n       // schedular part of fullcalendar is distributed with opensource licence (GLPv3)\n       // but this licence is incompatible with GLPI (GPLv2)\n       // see https://fullcalendar.io/license\n        $scheduler_key = Plugin::doHookFunction('planning_scheduler_key');\n\n        echo \"<div\" . ($fullview ? \" id='planning_container'\" : \"\") . \" class='d-flex flex-wrap flex-sm-nowrap'>\";\n\n       // define options for current page\n        $rand = '';\n        if ($fullview) {\n           // full planning view (Assistance > Planning)\n            Planning::showPlanningFilter();\n            $options = [\n                'full_view'    => true,\n                'default_view' => $_SESSION['glpi_plannings']['lastview'] ?? 'timeGridWeek',\n                'license_key'  => $scheduler_key,\n                'resources'    => self::getTimelineResources(),\n                'now'          => date(\"Y-m-d H:i:s\"),\n                'can_create'   => PlanningExternalEvent::canCreate(),\n                'can_delete'   => PlanningExternalEvent::canDelete(),\n            ];\n        } else {\n           // short view (on Central page)\n            $rand    = rand();\n            $options = [\n                'full_view'    => false,\n                'default_view' => 'listFull',\n                'header'       => false,\n                'height'       => 'auto',\n                'rand'         => $rand,\n                'now'          => date(\"Y-m-d H:i:s\"),\n            ];\n        }\n\n       // display planning (and call js from js/planning.js)\n        echo \"<div id='planning$rand' class='flex-fill'></div>\";\n        echo \"</div>\";\n\n        echo Html::scriptBlock(\"$(function() {\n         GLPIPlanning.display(\" . json_encode($options) . \");\n         GLPIPlanning.planningFilters();\n      });\");\n\n        return;\n    }\n\n    public static function getTimelineResources()\n    {\n        $resources = [];\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning_id => $planning) {\n            if ($planning['type'] == 'external') {\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $planning['name'],\n                    'group_id'   => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => null,\n                    'items_id'   => null\n                ];\n                continue; // Ignore external calendars\n            }\n\n            $exploded = explode('_', $planning_id);\n            if ($planning['type'] == 'group_users') {\n                $group_exploded = explode('_', $planning_id);\n                $group_id = (int) $group_exploded[1];\n                $group = new Group();\n                $group->getFromDB($group_id);\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $group->getName(),\n                    'eventAllow' => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => 'Group_User',\n                    'items_id'   => $group_id\n                ];\n                foreach (array_keys($planning['users']) as $planning_id_user) {\n                    $child_exploded = explode('_', $planning_id_user);\n                    $user = new User();\n                    $users_id = (int) $child_exploded[1];\n                    $user->getFromDB($users_id);\n                    $planning_id_user = \"gu_\" . $planning_id_user;\n                    $resources[] = [\n                        'id'         => $planning_id_user,\n                        'title'      => $user->getName(),\n                        'is_visible' => $planning['display'],\n                        'itemtype'   => 'User',\n                        'items_id'   => $users_id,\n                        'parentId'   => $planning_id,\n                    ];\n                }\n            } else {\n                $itemtype   = $exploded[0];\n                $object = new $itemtype();\n                $users_id = (int) $exploded[1];\n                $object->getFromDB($users_id);\n\n                $resources[] = [\n                    'id'         => $planning_id,\n                    'title'      => $object->getName(),\n                    'group_id'   => false,\n                    'is_visible' => $planning['display'],\n                    'itemtype'   => $itemtype,\n                    'items_id'   => $users_id\n                ];\n            }\n        }\n\n        return $resources;\n    }\n\n    /**\n     * Return a palette array (for example self::$palette_bg)\n     * @param  string $palette_name  the short name for palette (bg, fg, ev)\n     * @return mixed                 the palette array or false\n     *\n     * @since  9.1.1\n     */\n    public static function getPalette($palette_name = 'bg')\n    {\n        if (in_array($palette_name, ['bg', 'fg', 'ev'])) {\n            return self::${\"palette_$palette_name\"};\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Return an hexa color from a palette\n     * @param  string  $palette_name the short name for palette (bg, fg, ev)\n     * @param  integer $color_index  The color index in this palette\n     * @return mixed                 the color in hexa (ex: #FFFFFF) or false\n     *\n     * @since  9.1.1\n     */\n    public static function getPaletteColor($palette_name = 'bg', $color_index = 0)\n    {\n        if ($palette = self::getPalette($palette_name)) {\n            if ($color_index >= count($palette)) {\n                $color_index = $color_index % count($palette);\n            }\n\n            return $palette[$color_index];\n        }\n\n        return false;\n    }\n\n    public static function getPlanningTypes()\n    {\n        global $CFG_GLPI;\n\n        return array_merge(\n            $CFG_GLPI['planning_types'],\n            ['NotPlanned', 'OnlyBgEvents']\n        );\n    }\n\n    /**\n     * Init $_SESSION['glpi_plannings'] var with thses keys :\n     *  - 'filters' : type of planning available (ChangeTask, Reminder, etc)\n     *  - 'plannings' : all plannings definided for current user.\n     *\n     * If currently logged user, has no plannings or filter, this function wiil init them\n     *\n     * Also manage color index in $_SESSION['glpi_plannings_color_index']\n     *\n     * @return void\n     */\n    public static function initSessionForCurrentUser()\n    {\n       // new user in planning, init session\n        if (!isset($_SESSION['glpi_plannings']['filters'])) {\n            $_SESSION['glpi_plannings']['filters']   = [];\n            $_SESSION['glpi_plannings']['plannings'] = ['user_' . $_SESSION['glpiID'] => [\n                'color'   => self::getPaletteColor('bg', 0),\n                'display' => true,\n                'type'    => 'user'\n            ]\n            ];\n        }\n\n       // complete missing filters\n        $filters = &$_SESSION['glpi_plannings']['filters'];\n        $index_color = 0;\n        foreach (self::getPlanningTypes() as $planning_type) {\n            if (in_array($planning_type, ['NotPlanned', 'OnlyBgEvents']) || $planning_type::canView()) {\n                if (!isset($filters[$planning_type])) {\n                    $filters[$planning_type] = [\n                        'color'   => self::getPaletteColor('ev', $index_color),\n                        'display' => !in_array($planning_type, ['NotPlanned', 'OnlyBgEvents']),\n                        'type'    => 'event_filter'\n                    ];\n                }\n                $index_color++;\n            }\n        }\n\n       // compute color index for plannings\n        $_SESSION['glpi_plannings_color_index'] = 0;\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning) {\n            if ($planning['type'] == 'group_users') {\n                $_SESSION['glpi_plannings_color_index'] += count($planning['users']);\n            } else {\n                $_SESSION['glpi_plannings_color_index']++;\n            }\n        }\n    }\n\n\n    /**\n     * Display left part of planning who contains filters and planning with delete/toggle buttons\n     * and color choosing.\n     * Call self::showSingleLinePlanningFilter for each filters and plannings\n     *\n     * @return void\n     */\n    public static function showPlanningFilter()\n    {\n        global $CFG_GLPI;\n\n        $headings = ['filters'    => __(\"Events type\"),\n            'plannings'  => __('Plannings')\n        ];\n\n        echo \"<div id='planning_filter'>\";\n\n        echo \"<div id='planning_filter_toggle'>\";\n        echo \"<a class='toggle pointer' title='\" . __s(\"Toggle filters\") . \"'></a>\";\n        echo \"</div>\";\n\n        echo \"<div id='planning_filter_content'>\";\n        foreach ($_SESSION['glpi_plannings'] as $filter_heading => $filters) {\n            if (!in_array($filter_heading, array_keys($headings))) {\n                continue;\n            }\n\n            echo \"<div>\";\n            echo \"<h3>\";\n            echo $headings[$filter_heading];\n            if ($filter_heading == \"plannings\") {\n                echo \"<a class='planning_link planning_add_filter' href='\" . $CFG_GLPI['root_doc'] .\n                '/ajax/planning.php?action=add_planning_form' . \"'>\";\n                echo \"<i class='fas fa-plus-circle'></i>\";\n                echo \"</a>\";\n            }\n            echo \"</h3>\";\n            echo \"<ul class='filters'>\";\n            foreach ($filters as $filter_key => $filter_data) {\n                self::showSingleLinePlanningFilter(\n                    $filter_key,\n                    $filter_data,\n                    ['filter_color_index' => 0]\n                );\n            }\n            echo \"</ul>\";\n            echo \"</div>\";\n        }\n        echo \"</div>\"; // #planning_filter_content\n        echo \"</div>\"; // #planning_filter\n    }\n\n\n    /**\n     * Display a single line of planning filter.\n     * See self::showPlanningFilter function\n     *\n     * @param $filter_key  : identify curent line of filter\n     * @param $filter_data : array of filter date, must contains :\n     *   * 'show_delete' (boolean): show delete button\n     *   * 'filter_color_index' (integer): index of the color to use in self::$palette_bg\n     * @param $options\n     *\n     * @return void\n     */\n    public static function showSingleLinePlanningFilter($filter_key, $filter_data, $options = [])\n    {\n        global $CFG_GLPI;\n\n       // Invalid data, skip\n        if (!isset($filter_data['type'])) {\n            return;\n        }\n\n        $params['show_delete']        = true;\n        $params['filter_color_index'] = 0;\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $params[$key] = $val;\n            }\n        }\n\n        $actor = explode('_', $filter_key);\n        $uID = 0;\n        $gID = 0;\n        $expanded = '';\n        if ($filter_data['type'] == 'user') {\n            $uID = $actor[1];\n            $user = new User();\n            $user->getFromDB($actor[1]);\n            $title = $user->getName();\n        } else if ($filter_data['type'] == 'group_users') {\n            $group = new Group();\n            $group->getFromDB($actor[1]);\n            $title = $group->getName();\n            $enabled = $disabled = 0;\n            foreach ($filter_data['users'] as $user) {\n                if ($user['display']) {\n                    $enabled++;\n                } else {\n                    $disabled++;\n                    $filter_data['display'] = false;\n                }\n            }\n            if ($enabled > 0 && $disabled > 0) {\n                $expanded = ' expanded';\n            }\n        } else if ($filter_data['type'] == 'group') {\n            $gID = $actor[1];\n            $group = new Group();\n            $group->getFromDB($actor[1]);\n            $title = $group->getName();\n        } else if ($filter_data['type'] == 'external') {\n            $title = $filter_data['name'];\n        } else if ($filter_data['type'] == 'event_filter') {\n            if ($filter_key == 'NotPlanned') {\n                $title = __('Not planned tasks');\n            } else if ($filter_key == 'OnlyBgEvents') {\n                $title = __('Only background events');\n            } else {\n                if (!getItemForItemtype($filter_key)) {\n                    return false;\n                } else if (!$filter_key::canView()) {\n                    return false;\n                }\n                $title = $filter_key::getTypeName();\n            }\n        }\n\n        echo \"<li event_type='\" . $filter_data['type'] . \"'\n               event_name='$filter_key'\n               class='\" . $filter_data['type'] . $expanded . \"'>\";\n        Html::showCheckbox([\n            'name'          => 'filters[]',\n            'value'         => $filter_key,\n            'id'            => $filter_key,\n            'title'         => $title,\n            'checked'       => $filter_data['display']\n        ]);\n\n        if ($filter_data['type'] != 'event_filter') {\n            $exploded = explode('_', $filter_data['type']);\n            $icon = \"user\";\n            if ($exploded[0] === 'group') {\n                $icon = \"users\";\n            }\n            echo \"<i class='actor_icon fa fa-fw fa-$icon'></i>\";\n        }\n\n        echo \"<label for='$filter_key'>\";\n        echo $title;\n        if ($filter_data['type'] == 'external' && !Toolbox::isUrlSafe($filter_data['url'])) {\n            $warning = sprintf(__s('URL \"%s\" is not allowed by your administrator.'), $filter_data['url']);\n            echo \"<i class='fas fa-exclamation-triangle' title='{$warning}'></i>\";\n        }\n        echo \"</label>\";\n\n        $color = self::$palette_bg[$params['filter_color_index']];\n        if (isset($filter_data['color']) && !empty($filter_data['color'])) {\n            $color = $filter_data['color'];\n        } else {\n            $params['filter_color_index']++;\n            $color = self::getPaletteColor('bg', $params['filter_color_index']);\n        }\n\n        echo \"<span class='ms-auto d-flex align-items-center'>\";\n       // colors not for groups\n        if ($filter_data['type'] != 'group_users' && $filter_key != 'OnlyBgEvents') {\n            echo \"<span class='color_input'>\";\n            Html::showColorField(\n                $filter_key . \"_color\",\n                ['value' => $color]\n            );\n            echo \"</span>\";\n        }\n\n        if ($filter_data['type'] == 'group_users') {\n            echo \"<span class='toggle pointer'></span>\";\n        }\n\n        if ($filter_data['type'] != 'event_filter') {\n            echo \"<span class='filter_option dropstart'>\";\n            echo \"<i class='fas fa-ellipsis-v'></i>\";\n            echo \"<ul class='dropdown-menu '>\";\n            if ($params['show_delete']) {\n                echo \"<li class='delete_planning dropdown-item' value='$filter_key'>\" . __(\"Delete\") . \"</li>\";\n            }\n            if ($filter_data['type'] != 'group_users' && $filter_data['type'] != 'external') {\n                $url = parse_url($CFG_GLPI[\"url_base\"]);\n                $port = 80;\n                if (isset($url['port'])) {\n                    $port = $url['port'];\n                } else if (isset($url['scheme']) && ($url[\"scheme\"] == 'https')) {\n                    $port = 443;\n                }\n\n                $loginUser = new User();\n                $loginUser->getFromDB(Session::getLoginUserID(true));\n                $cal_url = \"/front/planning.php?genical=1&uID=\" . $uID . \"&gID=\" . $gID .\n                       //\"&limititemtype=$limititemtype\".\n                       \"&entities_id=\" . $_SESSION[\"glpiactive_entity\"] .\n                       \"&is_recursive=\" . $_SESSION[\"glpiactive_entity_recursive\"] .\n                       \"&token=\" . $loginUser->getAuthToken();\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='\" . $CFG_GLPI[\"root_doc\"] . \"$cal_url'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"Ical\") . \"</a></li>\";\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='webcal://\" . $url['host'] . \":$port\" .\n                 (isset($url['path']) ? $url['path'] : '') . \"$cal_url'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"Webcal\") . \"</a></li>\";\n\n                echo \"<li class='dropdown-item'><a target='_blank' href='\" . $CFG_GLPI['root_doc'] .\n                 \"/front/planningcsv.php?uID=\" . $uID . \"&gID=\" . $gID . \"'>\" .\n                 _sx(\"button\", \"Export\") . \" - \" . __(\"CSV\") . \"</a></li>\";\n\n                $caldav_url = $CFG_GLPI['url_base']\n                . '/caldav.php/'\n                . self::getCaldavBaseCalendarUrl($filter_data['type'] == 'user' ? $user : $group);\n                $copy_js = 'copyTextToClipboard(\"' . $caldav_url . '\");'\n                . ' alert(\"' . __s('CalDAV URL has been copied to clipboard') . '\");'\n                . ' return false;';\n                echo \"<li class='dropdown-item'><a target='_blank' href='#'\n                 onclick='$copy_js'>\" .\n                 __s(\"Copy CalDAV URL to clipboard\") . \"</a></li>\";\n            }\n            echo \"</ul>\";\n            echo \"</span>\";\n        }\n        echo \"</span>\";\n\n        if ($filter_data['type'] == 'group_users') {\n            echo \"<ul class='group_listofusers filters'>\";\n            foreach ($filter_data['users'] as $user_key => $userdata) {\n                self::showSingleLinePlanningFilter(\n                    $user_key,\n                    $userdata,\n                    ['show_delete'        => false,\n                        'filter_color_index' => $params['filter_color_index']\n                    ]\n                );\n            }\n            echo \"</ul>\";\n        }\n\n        echo \"</li>\";\n    }\n\n\n    /**\n     * Display ajax form to add actor on planning\n     *\n     * @return void\n     */\n    public static function showAddPlanningForm()\n    {\n        global $CFG_GLPI;\n\n        $rand = mt_rand();\n        echo \"<form action='\" . self::getFormURL() . \"'>\";\n        echo __(\"Actor\") . \": <br>\";\n\n        $planning_types = ['user' => User::getTypeName(1)];\n\n        if (Session::haveRightsOr('planning', [self::READGROUP, self::READALL])) {\n            $planning_types['group_users'] = __('All users of a group');\n            $planning_types['group']       = Group::getTypeName(1);\n        }\n\n        $planning_types['external'] = __('External calendar');\n\n        Dropdown::showFromArray(\n            'planning_type',\n            $planning_types,\n            ['display_emptychoice' => true,\n                'rand'                =>  $rand\n            ]\n        );\n        echo Html::scriptBlock(\"\n      $(function() {\n         $('#dropdown_planning_type$rand').on( 'change', function( e ) {\n            var planning_type = $(this).val();\n            $('#add_planning_subform$rand').load('\" . $CFG_GLPI['root_doc'] . \"/ajax/planning.php',\n                                                 {action: 'add_'+planning_type+'_form'});\n         });\n      });\");\n        echo \"<br><br>\";\n        echo \"<div id='add_planning_subform$rand'></div>\";\n        Html::closeForm();\n    }\n\n\n    /**\n     * Display 'User' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @return void\n     */\n    public static function showAddUserForm()\n    {\n        $used = [];\n        foreach (array_keys($_SESSION['glpi_plannings']) as $actor) {\n            $actor = explode(\"_\", $actor);\n            if ($actor[0] == \"user\") {\n                $used[] = $actor[1];\n            }\n        }\n        echo User::getTypeName(1) . \" :<br>\";\n\n       // show only users with right to add planning events\n        $rights = ['change', 'problem', 'reminder', 'task', 'projecttask'];\n       // Can we see only personnal planning ?\n        if (!Session::haveRightsOr('planning', [self::READALL, self::READGROUP])) {\n            $rights = 'id';\n        }\n       // Can we see user of my groups ?\n        if (\n            Session::haveRight('planning', self::READGROUP)\n            && !Session::haveRight('planning', self::READALL)\n        ) {\n            $rights = 'groups';\n        }\n\n        User::dropdown(['entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'right'       => $rights,\n            'used'        => $used\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_user_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'User' data from self::showAddPlanningForm and save them to session and DB\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddUserForm($params = [])\n    {\n        $_SESSION['glpi_plannings']['plannings'][\"user_\" . $params['users_id']]\n         = ['color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n             'display' => true,\n             'type'    => 'user'\n         ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    /**\n     * Display 'All users of a group' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @return void\n     */\n    public static function showAddGroupUsersForm()\n    {\n        echo Group::getTypeName(1) . \" : <br>\";\n\n        $condition = ['is_task' => 1];\n       // filter groups\n        if (!Session::haveRight('planning', self::READALL)) {\n            $condition['id'] = $_SESSION['glpigroups'];\n        }\n\n        Group::dropdown([\n            'entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'condition'   => $condition\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_group_users_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'All users of a group' data from self::showAddGroupUsersForm and save them to session and DB\n     *\n     * @since 9.1\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddGroupUsersForm($params = [])\n    {\n        $current_group = &$_SESSION['glpi_plannings']['plannings'][\"group_\" . $params['groups_id'] . \"_users\"];\n        $current_group = ['display' => true,\n            'type'    => 'group_users',\n            'users'   => []\n        ];\n        $users = Group_User::getGroupUsers($params['groups_id'], [\n            'glpi_users.is_active'  => 1,\n            'glpi_users.is_deleted' => 0,\n            [\n                'OR' => [\n                    ['glpi_users.begin_date' => null],\n                    ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]],\n                ],\n            ],\n            [\n                'OR' => [\n                    ['glpi_users.end_date' => null],\n                    ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]],\n                ]\n            ]\n        ]);\n\n        foreach ($users as $user_data) {\n            $current_group['users']['user_' . $user_data['id']] = [\n                'color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n                'display' => true,\n                'type'    => 'user'\n            ];\n            $_SESSION['glpi_plannings_color_index']++;\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    public static function editEventForm($params = [])\n    {\n        if (!$params['itemtype'] instanceof CommonDBTM) {\n            echo \"<div class='center'>\";\n            echo \"<a href='\" . $params['url'] . \"' class='btn btn-outline-secondary'>\" .\n                \"<i class='ti ti-eye'></i>\" .\n                \"<span>\" . __(\"View this item in his context\") . \"</span>\" .\n            \"</a>\";\n            echo \"</div>\";\n            echo \"<hr>\";\n            $rand = mt_rand();\n            $options = [\n                'from_planning_edit_ajax' => true,\n                'formoptions'             => \"id='edit_event_form$rand'\",\n                'start'                   => date(\"Y-m-d\", strtotime($params['start']))\n            ];\n            if (isset($params['parentitemtype'])) {\n                $options['parent'] = getItemForItemtype($params['parentitemtype']);\n                $options['parent']->getFromDB($params['parentid']);\n            }\n            $item = getItemForItemtype($params['itemtype']);\n            $item->getFromDB((int) $params['id']);\n            $item->showForm((int)$params['id'], $options);\n            $callback = \"glpi_close_all_dialogs();\n                      GLPIPlanning.refresh();\n                      displayAjaxMessageAfterRedirect();\";\n            Html::ajaxForm(\"#edit_event_form$rand\", $callback);\n        }\n    }\n\n\n    /**\n     * Display 'Group' part of self::showAddPlanningForm spcified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @since 9.1\n     *\n     * @return void\n     */\n    public static function showAddGroupForm()\n    {\n\n        $condition = ['is_task' => 1];\n       // filter groups\n        if (!Session::haveRight('planning', self::READALL)) {\n            $condition['id'] = $_SESSION['glpigroups'];\n        }\n\n        echo Group::getTypeName(1) . \" : <br>\";\n        Group::dropdown([\n            'entity'      => $_SESSION['glpiactive_entity'],\n            'entity_sons' => $_SESSION['glpiactive_entity_recursive'],\n            'condition'   => $condition\n        ]);\n        echo \"<br /><br />\";\n        echo Html::hidden('action', ['value' => 'send_add_group_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Recieve 'Group' data from self::showAddGroupForm and save them to session and DB\n     *\n     * @since 9.1\n     *\n     * @param $params (array) : must contais form data (typically $_REQUEST)\n     */\n    public static function sendAddGroupForm($params = [])\n    {\n        $_SESSION['glpi_plannings']['plannings'][\"group_\" . $params['groups_id']]\n         = ['color'   => self::getPaletteColor(\n             'bg',\n             $_SESSION['glpi_plannings_color_index']\n         ),\n             'display' => true,\n             'type'    => 'group'\n         ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    /**\n     * Display 'External' part of self::showAddPlanningForm specified by planning type dropdown.\n     * Actually called by ajax/planning.php\n     *\n     * @since 9.5\n     *\n     * @return void\n     */\n    public static function showAddExternalForm()\n    {\n\n        $rand = mt_rand();\n\n        echo '<label for =\"name' . $rand . '\">' . __(\"Calendar name\") . ' : </label> ';\n        echo '<br />';\n        echo Html::input(\n            'name',\n            [\n                'value' => '',\n                'id'    => 'name' . $rand,\n            ]\n        );\n        echo '<br />';\n        echo '<br />';\n\n        echo '<label for =\"url' . $rand . '\">' . __(\"Calendar URL\") . ' : </label> ';\n        echo '<br />';\n        echo '<input type=\"url\" name=\"url\" id=\"url' . $rand . '\" required>';\n        echo '<br /><br />';\n\n        echo Html::hidden('action', ['value' => 'send_add_external_form']);\n        echo Html::submit(_sx('button', 'Add'));\n    }\n\n\n    /**\n     * Receive 'External' data from self::showAddExternalForm and save them to session and DB\n     *\n     * @since 9.5\n     *\n     * @param array $params Form data\n     *\n     * @return void\n     */\n    public static function sendAddExternalForm($params = [])\n    {\n        if (!Toolbox::isUrlSafe($params['url'])) {\n            Session::addMessageAfterRedirect(\n                sprintf(__('URL \"%s\" is not allowed by your administrator.'), $params['url']),\n                false,\n                ERROR\n            );\n            return;\n        }\n\n        $_SESSION['glpi_plannings']['plannings']['external_' . md5($params['url'])] = [\n            'color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n            'display' => true,\n            'type'    => 'external',\n            'name'    => $params['name'],\n            'url'     => $params['url'],\n        ];\n        self::savePlanningsInDB();\n        $_SESSION['glpi_plannings_color_index']++;\n    }\n\n\n    public static function showAddEventForm($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (count($CFG_GLPI['planning_add_types']) == 1) {\n            $params['itemtype'] = $CFG_GLPI['planning_add_types'][0];\n            self::showAddEventSubForm($params);\n        } else {\n            $rand = mt_rand();\n            $select_options = [];\n            foreach ($CFG_GLPI['planning_add_types'] as $add_types) {\n                $select_options[$add_types] = $add_types::getTypeName(1);\n            }\n            echo __(\"Event type\") . \" : <br>\";\n            Dropdown::showFromArray(\n                'itemtype',\n                $select_options,\n                ['display_emptychoice' => true,\n                    'rand'                => $rand\n                ]\n            );\n\n            echo Html::scriptBlock(\"\n         $(function() {\n            $('#dropdown_itemtype$rand').on('change', function() {\n               var current_itemtype = $(this).val();\n               $('#add_planning_subform$rand').load('\" . $CFG_GLPI['root_doc'] . \"/ajax/planning.php',\n                                                    {action:   'add_event_sub_form',\n                                                     itemtype: current_itemtype,\n                                                     begin:    '\" . $params['begin'] . \"',\n                                                     end:      '\" . $params['end'] . \"'});\n            });\n         });\");\n            echo \"<br><br>\";\n            echo \"<div id='add_planning_subform$rand'></div>\";\n        }\n    }\n\n\n    /**\n     * Display form after selecting date range in planning\n     *\n     * @since 9.1\n     *\n     * @param $params (array): must contains this keys :\n     *  - begin : start of selection range.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end : end of selection range.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *\n     * @return void\n     */\n    public static function showAddEventSubForm($params = [])\n    {\n\n        $rand   = mt_rand();\n        $params = self::cleanDates($params);\n\n        $params['res_itemtype'] = $params['res_itemtype'] ?? '';\n        $params['res_items_id'] = $params['res_items_id'] ?? 0;\n        if ($item = getItemForItemtype($params['itemtype'])) {\n            $item->showForm('', [\n                'from_planning_ajax' => true,\n                'begin'              => $params['begin'],\n                'end'                => $params['end'],\n                'res_itemtype'       => $params['res_itemtype'],\n                'res_items_id'       => $params['res_items_id'],\n                'formoptions'        => \"id='ajax_reminder$rand'\"\n            ]);\n            $callback = \"glpi_close_all_dialogs();\n                      GLPIPlanning.refresh();\n                      displayAjaxMessageAfterRedirect();\";\n            Html::ajaxForm(\"#ajax_reminder$rand\", $callback);\n        }\n    }\n\n\n    /**\n     * Former front/planning.php before 9.1.\n     * Display a classic form to plan an event (with begin fiel and duration)\n     *\n     * @since 9.1\n     *\n     * @param $params (array): array of parameters whou should contain :\n     *   - id (integer): id of item who receive the planification\n     *   - itemtype (string): itemtype of item who receive the planification\n     *   - begin (string) : start date of event\n     *   - _display_dates (bool) : display dates fields (default true)\n     *   - end (optionnal) (string) : end date of event. Ifg missing, it will computerd from begin+1hour\n     *   - rand_user (integer) : users_id to check planning avaibility\n     *   - rand : specific rand if needed (default is generated one)\n     */\n    public static function showAddEventClassicForm($params = [])\n    {\n        global $CFG_GLPI;\n\n        if (isset($params[\"id\"]) && ($params[\"id\"] > 0)) {\n            echo \"<input type='hidden' name='plan[id]' value='\" . $params[\"id\"] . \"'>\";\n        }\n\n        $rand = mt_rand();\n        if (isset($params['rand'])) {\n            $rand = $params['rand'];\n        }\n\n        $display_dates = $params['_display_dates'] ?? true;\n\n        $mintime = $CFG_GLPI[\"planning_begin\"];\n        if (isset($params[\"begin\"]) && !empty($params[\"begin\"])) {\n            $begin = $params[\"begin\"];\n            $begintime = date(\"H:i:s\", strtotime($begin));\n            if ($begintime < $mintime) {\n                $mintime = $begintime;\n            }\n        } else {\n            $ts = $CFG_GLPI['time_step'] * 60; // passage en minutes\n            $time = time() + $ts - 60;\n            $time = floor($time / $ts) * $ts;\n            $begin = date(\"Y-m-d H:i\", $time);\n        }\n\n        if (isset($params[\"end\"]) && !empty($params[\"end\"])) {\n            $end = $params[\"end\"];\n        } else {\n            $end = date(\"Y-m-d H:i:s\", strtotime($begin) + HOUR_TIMESTAMP);\n        }\n\n        echo \"<table class='planning_classic_card'>\";\n\n        if ($display_dates) {\n            echo \"<tr class='tab_bg_2'><td>\" . __('Start date') . \"</td><td>\";\n            Html::showDateTimeField(\"plan[begin]\", [\n                'value'      => $begin,\n                'maybeempty' => false,\n                'canedit'    => true,\n                'mindate'    => '',\n                'maxdate'    => '',\n                'mintime'    => $mintime,\n                'maxtime'    => $CFG_GLPI[\"planning_end\"],\n                'rand'       => $rand,\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Period') . \"&nbsp;\";\n\n        if (isset($params[\"rand_user\"])) {\n            $_POST['parent_itemtype'] = $params[\"parent_itemtype\"] ?? '';\n            $_POST['parent_items_id'] = $params[\"parent_items_id\"] ?? '';\n            $_POST['parent_fk_field'] = $params[\"parent_fk_field\"] ?? '';\n            echo \"<span id='user_available\" . $params[\"rand_user\"] . \"'>\";\n            include_once(GLPI_ROOT . '/ajax/planningcheck.php');\n            echo \"</span>\";\n        }\n\n        echo \"</td><td>\";\n\n        $empty_label   = Dropdown::EMPTY_VALUE;\n        $default_delay = $params['duration'] ?? 0;\n        if ($display_dates) {\n            $empty_label   = __('Specify an end date');\n            $default_delay = floor((strtotime($end) - strtotime($begin)) / $CFG_GLPI['time_step'] / MINUTE_TIMESTAMP) * $CFG_GLPI['time_step'] * MINUTE_TIMESTAMP;\n        }\n\n        Dropdown::showTimeStamp(\"plan[_duration]\", [\n            'min'        => 0,\n            'max'        => 50 * HOUR_TIMESTAMP,\n            'value'      => $default_delay,\n            'emptylabel' => $empty_label,\n            'rand'       => $rand,\n        ]);\n        echo \"<br><div id='date_end$rand'></div>\";\n\n        $event_options = [\n            'duration'     => '__VALUE__',\n            'end'          => $end,\n            'name'         => \"plan[end]\",\n            'global_begin' => $CFG_GLPI[\"planning_begin\"],\n            'global_end'   => $CFG_GLPI[\"planning_end\"]\n        ];\n\n        if ($display_dates) {\n            Ajax::updateItemOnSelectEvent(\n                \"dropdown_plan[_duration]$rand\",\n                \"date_end$rand\",\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/planningend.php\",\n                $event_options\n            );\n\n            if ($default_delay == 0) {\n                $params['duration'] = 0;\n                Ajax::updateItem(\"date_end$rand\", $CFG_GLPI[\"root_doc\"] . \"/ajax/planningend.php\", $params);\n            }\n        }\n\n        echo \"</td></tr>\\n\";\n\n        if (\n            (!isset($params[\"id\"]) || ($params[\"id\"] == 0))\n            && isset($params['itemtype'])\n            && PlanningRecall::isAvailable()\n        ) {\n            echo \"<tr class='tab_bg_2'><td>\" . _x('Planning', 'Reminder') . \"</td><td>\";\n            PlanningRecall::dropdown([\n                'itemtype' => $params['itemtype'],\n                'items_id' => $params['items_id'],\n                'rand'     => $rand,\n            ]);\n            echo \"</td></tr>\";\n        }\n        echo \"</table>\\n\";\n    }\n\n\n    /**\n     * Clone an event\n     *\n     * @since 9.5\n     *\n     * @param array $event the event to clone\n     *\n     * @return mixed the id (integer) or false if it failed\n     */\n    public static function cloneEvent(array $event = [])\n    {\n        $item = new $event['old_itemtype']();\n        $item->getFromDB((int) $event['old_items_id']);\n\n        $input = array_merge($item->fields, [\n            'plan' => [\n                'begin' => date(\"Y-m-d H:i:s\", strtotime($event['start'])),\n                'end'   => date(\"Y-m-d H:i:s\", strtotime($event['end'])),\n            ],\n        ]);\n        unset($input['id'], $input['uuid']);\n\n        if (isset($item->fields['name'])) {\n            $input['name'] = sprintf(__('Copy of %s'), $item->fields['name']);\n        }\n\n       // manage change of assigment for CommonITILTask\n        if (\n            $item instanceof CommonITILTask\n            && isset($event['actor']['itemtype'])\n            && isset($event['actor']['items_id'])\n        ) {\n            switch ($event['actor']['itemtype']) {\n                case \"group\":\n                    $key = \"groups_id_tech\";\n                    break;\n                case \"user\":\n                    $key = isset($item->fields['users_id_tech']) ? \"users_id_tech\" : \"users_id\";\n                    break;\n            }\n\n            unset(\n                $input['users_id_tech'],\n                $input['users_id'],\n                $input['groups_id_tech'],\n                $input['groups_id']\n            );\n\n            $input[$key] = $event['actor']['items_id'];\n        }\n\n        $new_items_id = $item->add(Toolbox::addslashes_deep($input));\n\n       // manage all assigments for ProjectTask\n        if (\n            $item instanceof ProjectTask\n            && isset($event['actor']['itemtype'])\n            && isset($event['actor']['items_id'])\n        ) {\n            $team = new ProjectTaskTeam();\n            $team->add([\n                'projecttasks_id' => $new_items_id,\n                'itemtype'        => ucfirst($event['actor']['itemtype']),\n                'items_id'        => $event['actor']['items_id']\n            ]);\n        }\n\n        return $new_items_id;\n    }\n\n    /**\n     * Delete an event\n     *\n     * @since 9.5\n     *\n     * @param array $event the event to clone (with itemtype and items_id keys)\n     *\n     * @return bool\n     */\n    public static function deleteEvent(array $event = []): bool\n    {\n        $item = new $event['itemtype']();\n\n        if (\n            isset($event['day'])\n            && isset($event['instance'])\n            && $event['instance']\n            && method_exists($item, \"deleteInstance\")\n        ) {\n            return $item->deleteInstance((int) $event['items_id'], $event['day']);\n        } else {\n            return $item->delete([\n                'id' => (int) $event['items_id']\n            ]);\n        }\n    }\n\n\n    /**\n     * toggle display for selected line of $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - parent : in case of type=users_group, must contains the id of the group\n     *  - name : contains a string with type and id concatened with a '_' char (ex user_41).\n     *  - display : boolean value to set to his line\n     * @return void\n     */\n    public static function toggleFilter($options = [])\n    {\n\n        $key = 'filters';\n        if (in_array($options['type'], ['user', 'group', 'group_users', 'external'])) {\n            $key = 'plannings';\n        }\n        if (\n            !isset($options['parent'])\n            || empty($options['parent'])\n        ) {\n            $_SESSION['glpi_plannings'][$key][$options['name']]['display']\n            = ($options['display'] === 'true');\n        } else {\n            $_SESSION['glpi_plannings']['plannings'][$options['parent']]['users']\n            [$options['name']]['display']\n            = ($options['display'] === 'true');\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    /**\n     * change color for selected line of $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - parent : in case of type=users_group, must contains the id of the group\n     *  - name : contains a string with type and id concatened with a '_' char (ex user_41).\n     *  - color : rgb color (preceded by '#'' char)\n     * @return void\n     */\n    public static function colorFilter($options = [])\n    {\n        $key = 'filters';\n        if (in_array($options['type'], ['user', 'group', 'group_users', 'external'])) {\n            $key = 'plannings';\n        }\n        if (\n            !isset($options['parent'])\n            || empty($options['parent'])\n        ) {\n            $_SESSION['glpi_plannings'][$key][$options['name']]['color'] = $options['color'];\n        } else {\n            $_SESSION['glpi_plannings']['plannings'][$options['parent']]['users']\n            [$options['name']]['color'] = $options['color'];\n        }\n        self::savePlanningsInDB();\n    }\n\n\n    /**\n     * delete selected line in $_SESSION['glpi_plannings']\n     *\n     * @since 9.1\n     *\n     * @param  array $options: should contains :\n     *  - type : event type, can be event_filter, user, group or group_users\n     *  - filter : contains a string with type and id concatened with a '_' char (ex user_41).\n     * @return void\n     */\n    public static function deleteFilter($options = [])\n    {\n\n        $current = $_SESSION['glpi_plannings']['plannings'][$options['filter']];\n        if ($current['type'] == 'group_users') {\n            $_SESSION['glpi_plannings_color_index'] -= count($current['users']);\n        } else {\n            $_SESSION['glpi_plannings_color_index']--;\n        }\n\n        unset($_SESSION['glpi_plannings']['plannings'][$options['filter']]);\n        self::savePlanningsInDB();\n    }\n\n\n    public static function savePlanningsInDB()\n    {\n\n        $user = new User();\n        $user->update(['id' => $_SESSION['glpiID'],\n            'plannings' => exportArrayToDB($_SESSION['glpi_plannings'])\n        ]);\n    }\n\n\n    /**\n     * Prepare a set of events for jquery fullcalendar.\n     * Call populatePlanning functions for all $CFG_GLPI['planning_types'] types\n     *\n     * @since 9.1\n     *\n     * @param array $options with this keys:\n     *  - begin: mandatory, planning start.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end: mandatory, planning end.\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - display_done_events: default true, show also events tagged as done\n     *  - force_all_events: even if the range is big, don't reduce the returned set\n     * @return array $events : array with events in fullcalendar.io format\n     */\n    public static function constructEventsArray($options = [])\n    {\n        global $CFG_GLPI;\n\n        $param['start']               = '';\n        $param['end']                 = '';\n        $param['view_name']           = '';\n        $param['display_done_events'] = true;\n        $param['force_all_events']    = false;\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $timezone = new DateTimeZone(date_default_timezone_get());\n        $time_begin = strtotime($param['start']) - $timezone->getOffset(new DateTime($param['start']));\n        $time_end   = strtotime($param['end']) - $timezone->getOffset(new DateTime($param['end']));\n\n       // if the dates range is greater than a certain amount, and we're not on a list view\n       // we certainly are on this view (as our biggest view apart list is month one).\n       // we must avoid at all cost to calculate rrules events on a big range\n        if (\n            !$param['force_all_events']\n            && $param['view_name'] != \"listFull\"\n            && ($time_end - $time_begin) > (2 * MONTH_TIMESTAMP)\n        ) {\n            $param['view_name'] = \"listFull\";\n            return [];\n        }\n\n        $param['begin'] = date(\"Y-m-d H:i:s\", $time_begin);\n        $param['end']   = date(\"Y-m-d H:i:s\", $time_end);\n\n        $raw_events = [];\n        $not_planned = [];\n        foreach ($CFG_GLPI['planning_types'] as $planning_type) {\n            if (!$planning_type::canView()) {\n                continue;\n            }\n            if ($_SESSION['glpi_plannings']['filters'][$planning_type]['display']) {\n                $event_type_color = $_SESSION['glpi_plannings']['filters'][$planning_type]['color'];\n                foreach ($_SESSION['glpi_plannings']['plannings'] as $actor => $actor_params) {\n                    if ($actor_params['type'] == 'external') {\n                        continue; // Ignore external calendars\n                    }\n                    $actor_params['event_type_color'] = $event_type_color;\n                    $actor_params['planning_type'] = $planning_type;\n                    self::constructEventsArraySingleLine(\n                        $actor,\n                        array_merge($param, $actor_params),\n                        $raw_events,\n                        $not_planned\n                    );\n                }\n            }\n        }\n\n       //handle not planned events\n        $raw_events = array_merge($raw_events, $not_planned);\n\n       // get external calendars events (ical)\n       // and on list view, only get future events\n        $begin_ical = $param['begin'];\n        if ($param['view_name'] == \"listFull\") {\n            $begin_ical = date('Y-m-d 00:00:00');\n        }\n        $raw_events = array_merge(\n            $raw_events,\n            self::getExternalCalendarRawEvents($begin_ical, $param['end'])\n        );\n\n       // construct events (in fullcalendar format)\n        $events = [];\n        foreach ($raw_events as $event) {\n            if (\n                $_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']\n                && (!isset($event['background']) || !$event['background'])\n            ) {\n                continue;\n            }\n\n            $users_id = (isset($event['users_id_tech']) && !empty($event['users_id_tech']) ?\n                        $event['users_id_tech'] :\n                        $event['users_id']);\n            $content = Planning::displayPlanningItem($event, $users_id, 'in', false) ?: ($event['content'] ?? \"\");\n            $tooltip = Planning::displayPlanningItem($event, $users_id, 'in', true) ?: ($event['tooltip'] ?? \"\");\n\n           // dates should be set with the user timezone\n            $begin = $event['begin'];\n            $end   = $event['end'];\n\n           // retreive all day events\n            if (\n                strpos($event['begin'], \"00:00:00\") != false\n                && (strtotime($event['end']) - strtotime($event['begin'])) % DAY_TIMESTAMP == 0\n            ) {\n                 $begin = date('Y-m-d', strtotime($event['begin']));\n                 $end = date('Y-m-d', strtotime($event['end']));\n            }\n\n           // get duration in milliseconds\n            $ms_duration = (strtotime($end) - strtotime($begin)) * 1000;\n\n            $index_color = array_search(\"user_$users_id\", array_keys($_SESSION['glpi_plannings']));\n            $new_event = [\n                'title'       => $event['name'],\n                'content'     => $content,\n                'tooltip'     => $tooltip,\n                'start'       => $begin,\n                'end'         => $end,\n                'duration'    => $ms_duration,\n                '_duration'   => $ms_duration, // sometimes duration is removed from event object in fullcalendar\n                '_editable'   => $event['editable'], // same, avoid loss of editable key in fullcalendar\n                'rendering'   => isset($event['background'])\n                             && $event['background']\n                             && !$_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']\n                              ? 'background'\n                              : '',\n                'color'       => (empty($event['color']) ?\n                              Planning::$palette_bg[$index_color] :\n                              $event['color']),\n                'borderColor' => (empty($event['event_type_color']) ?\n                              self::getPaletteColor('ev', $event['itemtype']) :\n                              $event['event_type_color']),\n                'textColor'   => Planning::$palette_fg[$index_color],\n                'typeColor'   => (empty($event['event_type_color']) ?\n                              self::getPaletteColor('ev', $event['itemtype']) :\n                              $event['event_type_color']),\n                'url'         => $event['url'] ?? \"\",\n                'ajaxurl'     => $event['ajaxurl'] ?? \"\",\n                'itemtype'    => $event['itemtype'] ?? \"\",\n                'parentitemtype' => $event['parentitemtype'] ?? \"\",\n                'items_id'    => $event['id'] ?? \"\",\n                'resourceId'  => $event['resourceId'] ?? \"\",\n                'priority'    => $event['priority'] ?? \"\",\n                'state'       => $event['state'] ?? \"\",\n            ];\n\n           // if we can't update the event, pass the editable key\n            if (!$event['editable']) {\n                $new_event['editable'] = false;\n            }\n\n           // override color if view is ressource and category color exists\n           // maybe we need a better way for displaying categories color\n            if (\n                $param['view_name'] == \"resourceWeek\"\n                && !empty($event['event_cat_color'])\n            ) {\n                $new_event['color'] = $event['event_cat_color'];\n            }\n\n           // manage reccurent events\n            if (isset($event['rrule']) && count($event['rrule'])) {\n                $rrule = $event['rrule'];\n\n               // the fullcalencard plugin waits for integer types for number (not strings)\n                if (isset($rrule['interval'])) {\n                    $rrule['interval'] = (int) $rrule['interval'];\n                }\n                if (isset($rrule['count'])) {\n                    $rrule['count'] = (int) $rrule['count'];\n                }\n\n               // clean empty values in rrule\n                foreach ($rrule as $key => $value) {\n                    if (is_null($value) || $value == '') {\n                        unset($rrule[$key]);\n                    }\n                }\n\n                $rset = PlanningExternalEvent::getRsetFromRRuleField($rrule, $new_event['start']);\n\n               // append icon to distinguish reccurent event in views\n               // use UTC datetime to avoid some issues with rlan/phprrule\n                $dtstart_datetime  = new \\DateTime($new_event['start']);\n                unset($rrule['exceptions']); // remove exceptions key (as libraries throw exception for unknow keys)\n                $hr_rrule_o = new RRule(\n                    array_merge(\n                        $rrule,\n                        [\n                            'dtstart' => $dtstart_datetime->format('Ymd\\THis\\Z')\n                        ]\n                    )\n                );\n                $new_event = array_merge($new_event, [\n                    'icon'     => 'fas fa-history',\n                    'icon_alt' => $hr_rrule_o->humanReadable(),\n                ]);\n\n               // for fullcalendar, we need to pass start in the rrule key\n                unset($new_event['start'], $new_event['end']);\n\n               // For list view, only display only the next occurence\n               // to avoid issues performances (range in list view can be 10 years long)\n                if ($param['view_name'] == \"listFull\") {\n                     $next_date = $rset->getNthOccurrenceAfter(new DateTime(), 1);\n                    if ($next_date) {\n                        $new_event = array_merge($new_event, [\n                            'start'    => $next_date->format('c'),\n                            'end'      => $next_date->add(new DateInterval(\"PT\" . ($ms_duration / 1000) . \"S\"))\n                                            ->format('c'),\n                        ]);\n                    }\n                } else {\n                    $rrule_string = \"\";\n                    foreach ($rset->getRRules() as $occurence) {\n                        $rrule_string .= $occurence->rfcString(false) . \"\\n\";\n                    }\n                    $ex_dates = [];\n                    foreach ($rset->getExDates() as $occurence) {\n                       // we forge the ex date with only the date part of the exception\n                       // and the hour of the dtstart.\n                       // This to presents only date selection to the user\n                        $ex_dates[] = \"EXDATE:\" . $occurence->format('Ymd\\THis');\n                    }\n\n                    if (count($ex_dates)) {\n                        $rrule_string .= implode(\"\\n\", $ex_dates) . \"\\n\";\n                    }\n\n                    $new_event = array_merge($new_event, [\n                        'is_recurrent' => true,\n                        'rrule'        => $rrule_string,\n                        'duration'     => $ms_duration\n                    ]);\n                }\n            }\n\n            $events[] = $new_event;\n        }\n\n        return $events;\n    }\n\n\n    /**\n     * construct a single line for self::constructEventsArray()\n     * Recursively called to construct $raw_events param.\n     *\n     * @since 9.1\n     *\n     * @param string $actor: a type and id concaneted separated by '_' char, ex 'user_41'\n     * @param array  $params: must contains this keys :\n     *  - display: boolean for pass or not the consstruction of this line (a group of users can be displayed but its users not).\n     *  - type: event type, can be event_filter, user, group or group_users\n     *  - who: integer for identify user\n     *  - whogroup: integer for identify group\n     *  - color: string with #rgb color for event's foreground color.\n     *  - event_type_color : string with #rgb color for event's foreground color.\n     * @param array  $raw_events: (passed by reference) the events array in construction\n     * @param array  $not_planned (passed by references) not planned events array in construction\n     * @return void\n     */\n    public static function constructEventsArraySingleLine($actor, $params = [], &$raw_events = [], &$not_planned = [])\n    {\n\n        if ($params['display']) {\n            $actor_array = explode(\"_\", $actor);\n            if ($params['type'] == \"group_users\") {\n                $subparams = $params;\n                unset($subparams['users']);\n                $subparams['from_group_users'] = true;\n                foreach ($params['users'] as $user => $userdata) {\n                    $subparams = array_merge($subparams, $userdata);\n                    self::constructEventsArraySingleLine($user, $subparams, $raw_events, $not_planned);\n                }\n            } else {\n                $params['who']       = $actor_array[1];\n                $params['whogroup']  = 0;\n                if (\n                    $params['type'] == \"group\"\n                    && in_array($params['planning_type'], self::$directgroup_itemtype)\n                ) {\n                    $params['who']       = 0;\n                    $params['whogroup']  = $actor_array[1];\n                }\n\n                $current_events = $params['planning_type']::populatePlanning($params);\n                if (count($current_events) > 0) {\n                    $raw_events = array_merge($raw_events, $current_events);\n                }\n                if (\n                    $_SESSION['glpi_plannings']['filters']['NotPlanned']['display']\n                    && method_exists($params['planning_type'], 'populateNotPlanned')\n                ) {\n                    $not_planned = array_merge($not_planned, $params['planning_type']::populateNotPlanned($params));\n                }\n            }\n        }\n\n        if (isset($params['from_group_users']) && $params['from_group_users']) {\n            $actor = \"gu_\" . $actor;\n        }\n\n       // fill type of planning\n        $raw_events = array_map(function ($arr) use ($actor) {\n            return $arr + ['resourceId' => $actor];\n        }, $raw_events);\n\n        if ($_SESSION['glpi_plannings']['filters']['NotPlanned']['display']) {\n            $not_planned = array_map(function ($arr) use ($actor) {\n                return $arr + [\n                    'not_planned' => true,\n                    'resourceId' => $actor,\n                    'event_type_color' => $_SESSION['glpi_plannings']['filters']['NotPlanned']['color']\n                ];\n            }, $not_planned);\n        }\n    }\n\n    /**\n     * Return events fetched from user external calendars.\n     *\n     * @return array\n     */\n    private static function getExternalCalendarRawEvents(string $limit_begin, string $limit_end): array\n    {\n        ErrorHandler::getInstance()->suspendOutput(); // Suspend error output to prevent warnings to corrupr JSON output\n\n        $raw_events = [];\n\n        foreach ($_SESSION['glpi_plannings']['plannings'] as $planning_id => $planning_params) {\n            if ('external' !== $planning_params['type'] || !$planning_params['display']) {\n                continue; // Ignore non external and inactive calendars\n            }\n            $calendar_data = Toolbox::getURLContent($planning_params['url']);\n            if (empty($calendar_data)) {\n                continue;\n            }\n            try {\n                $vcalendar = Reader::read($calendar_data);\n            } catch (\\Sabre\\VObject\\ParseException $exception) {\n                trigger_error(\n                    sprintf('Unable to parse calendar data from URL \"%s\"', $planning_params['url']),\n                    E_USER_WARNING\n                );\n                continue;\n            }\n            if (!$vcalendar instanceof VCalendar) {\n                trigger_error(\n                    sprintf('No VCalendar object found at URL \"%s\"', $planning_params['url']),\n                    E_USER_WARNING\n                );\n                continue;\n            }\n            foreach ($vcalendar->getComponents() as $vcomp) {\n                if (!($vcomp instanceof VEvent || $vcomp instanceof VTodo)) {\n                    continue;\n                }\n\n                $end_date_prop = $vcomp instanceof VTodo ? 'DUE' : 'DTEND';\n                if (\n                    !$vcomp->DTSTART instanceof \\Sabre\\VObject\\Property\\ICalendar\\DateTime\n                    || !$vcomp->$end_date_prop instanceof \\Sabre\\VObject\\Property\\ICalendar\\DateTime\n                ) {\n                    continue;\n                }\n                $user_tz  = new \\DateTimeZone(date_default_timezone_get());\n                $begin_dt = $vcomp->DTSTART->getDateTime();\n                $begin_dt = $begin_dt->setTimeZone($user_tz);\n                $end_dt   = $vcomp->$end_date_prop->getDateTime();\n                $end_dt   = $end_dt->setTimeZone($user_tz);\n\n                if (\n                    !($vcomp->RRULE instanceof Recur)\n                    && ($limit_end < $begin_dt->format('Y-m-d H:i:s') || $limit_begin > $end_dt->format('Y-m-d H:i:s'))\n                ) {\n                    continue; // Ignore events not inside dates range\n                }\n\n                $title = $vcomp->SUMMARY instanceof FlatText ? $vcomp->SUMMARY->getValue() : '';\n                $description = $vcomp->DESCRIPTION instanceof FlatText ? $vcomp->DESCRIPTION->getValue() : '';\n\n                $raw_events[] = [\n                    'users_id'         => Session::getLoginUserID(),\n                    'name'             => $title,\n                    'tooltip'          => trim($title . \"\\n\" . $description),\n                    'content'          => $description,\n                    'begin'            => $begin_dt->format('Y-m-d H:i:s'),\n                    'end'              => $end_dt->format('Y-m-d H:i:s'),\n                    'event_type_color' => $planning_params['color'],\n                    'color'            => $planning_params['color'],\n                    'rrule'            => $vcomp->RRULE instanceof Recur\n                  ? current($vcomp->RRULE->getJsonValue())\n                  : null,\n                    'editable'         => false,\n                    'resourceId'       => $planning_id,\n                ];\n            }\n        }\n\n        ErrorHandler::getInstance()->unsuspendOutput(); // Restore error output state\n\n        return $raw_events;\n    }\n\n\n    /**\n     * Change dates of a selected event.\n     * Called from a drag&drop in planning\n     *\n     * @since 9.1\n     *\n     * @param array $options: must contains this keys :\n     *  - items_id : integer to identify items\n     *  - itemtype : string to identify items\n     *  - begin : planning start .\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     *  - end : planning end .\n     *       (should be an ISO_8601 date, but could be anything wo can be parsed by strtotime)\n     * @return bool\n     */\n    public static function updateEventTimes($params = [])\n    {\n        if ($item = getItemForItemtype($params['itemtype'])) {\n            $params = self::cleanDates($params);\n\n            if (\n                $item->getFromDB($params['items_id'])\n                && empty($item->fields['is_deleted'])\n            ) {\n                // item exists and is not in bin\n\n                $abort = false;\n\n                // we should not edit events from closed parent\n                if (!empty($item->fields['tickets_id'])) {\n                  // todo: to same checks for changes, problems, projects and maybe reminders and others depending on incoming itemtypes\n                    $ticket = new Ticket();\n\n                    if (\n                        !$ticket->getFromDB($item->fields['tickets_id'])\n                        || $ticket->fields['is_deleted']\n                        || $ticket->fields['status'] == CommonITILObject::CLOSED\n                    ) {\n                         $abort = true;\n                    }\n                }\n\n                // if event has rrule property, check if we need to create a clone instance\n                if (\n                    isset($item->fields['rrule'])\n                    && strlen($item->fields['rrule'])\n                ) {\n                    if (\n                        isset($params['move_instance'])\n                        && filter_var($params['move_instance'], FILTER_VALIDATE_BOOLEAN)\n                    ) {\n                         $item = $item->createInstanceClone(\n                             $item->fields['id'],\n                             $params['old_start']\n                         );\n                            $params['items_id'] = $item->fields['id'];\n                    }\n                }\n\n                if (!$abort) {\n                     $update = [\n                         'id'   => $params['items_id'],\n                         'plan' => [\n                             'begin' => $params['start'],\n                             'end'   => $params['end']\n                         ]\n                     ];\n\n                     if (isset($item->fields['users_id_tech'])) {\n                         $update['users_id_tech'] = $item->fields['users_id_tech'];\n                     }\n\n                     // manage moving event between resource (actors)\n                     if (\n                         isset($params['new_actor_itemtype'])\n                         && isset($params['new_actor_items_id'])\n                         && !empty($params['new_actor_itemtype'])\n                         && !empty($params['new_actor_items_id'])\n                     ) {\n                         $new_actor_itemtype = strtolower($params['new_actor_itemtype']);\n\n                         // reminders don't have group assignement for planning\n                         if (\n                             !($new_actor_itemtype === 'group'\n                             && $item instanceof Reminder)\n                         ) {\n                             switch ($new_actor_itemtype) {\n                                 case \"group\":\n                                        $update['groups_id_tech'] = $params['new_actor_items_id'];\n                                     if (strtolower($params['old_actor_itemtype']) === \"user\") {\n                                         $update['users_id_tech']  = 0;\n                                     }\n                                     break;\n\n                                 case \"user\":\n                                     if (isset($item->fields['users_id_tech'])) {\n                                         $update['users_id_tech']  = $params['new_actor_items_id'];\n                                         if (strtolower($params['old_actor_itemtype']) === \"group\") {\n                                             $update['groups_id_tech']  = 0;\n                                         }\n                                     } else {\n                                         $update['users_id'] = $params['new_actor_items_id'];\n                                     }\n                                     break;\n                             }\n                         }\n\n                       // special case for project tasks\n                       // which have a link tables for their relation with groups/users\n                         if ($item instanceof ProjectTask) {\n                          // get actor for finding relation with item\n                             $actor = new $params['old_actor_itemtype']();\n                             $actor->getFromDB((int) $params['old_actor_items_id']);\n\n                          // get current relation\n                             $team_old = new ProjectTaskTeam();\n                             $team_old->getFromDBForItems($item, $actor);\n\n                          // if new relation already exists, delete old relation\n                             $actor_new = new $params['new_actor_itemtype']();\n                             $actor_new->getFromDB((int) $params['new_actor_items_id']);\n                             $team_new  = new ProjectTaskTeam();\n                             if ($team_new->getFromDBForItems($item, $actor_new)) {\n                                 $team_old->delete([\n                                     'id' => $team_old->fields['id']\n                                 ]);\n                             } else {\n                      // else update relation\n                                 $team_old->update([\n                                     'id'       => $team_old->fields['id'],\n                                     'itemtype' => $params['new_actor_itemtype'],\n                                     'items_id' => $params['new_actor_items_id'],\n                                 ]);\n                             }\n                         }\n                     }\n\n                     if (is_subclass_of($item, \"CommonITILTask\")) {\n                         $parentitemtype = $item->getItilObjectItemType();\n                         if (!$update[\"_job\"] = getItemForItemtype($parentitemtype)) {\n                             return;\n                         }\n\n                         $fkfield = $update[\"_job\"]->getForeignKeyField();\n                         $update[$fkfield] = $item->fields[$fkfield];\n                     }\n\n                     return $item->update($update);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Clean timezone information from dates fields,\n     * as fullcalendar doesn't support easily timezones, let's consider it sends raw dates\n     * (remove timezone suffix), we will manage timezone directy on database\n     * see https://fullcalendar.io/docs/timeZone\n     *\n     * @since 9.5\n     *\n     * @param array $params parameters send by fullcalendar\n     *\n     * @return array cleaned $params\n     */\n    public static function cleanDates(array $params = []): array\n    {\n        $dates_fields = [\n            'start', 'begin', 'end'\n        ];\n\n        foreach ($params as $key => &$value) {\n            if (in_array($key, $dates_fields)) {\n                $value  = date(\"Y-m-d H:i:s\", strtotime(trim($value, 'Z')));\n            }\n        }\n\n        return $params;\n    }\n\n\n\n    /**\n     * Display a Planning Item\n     *\n     * @param $val       Array of the item to display\n     * @param $who             ID of the user (0 if all)\n     * @param $type            position of the item in the time block (in, through, begin or end)\n     *                         (default '')\n     * @param $complete        complete display (more details) (default 0)\n     *\n     * @return string\n     **/\n    public static function displayPlanningItem(array $val, $who, $type = \"\", $complete = 0)\n    {\n        $html = \"\";\n\n       // bg event shouldn't have content displayed\n        if (!$complete && $_SESSION['glpi_plannings']['filters']['OnlyBgEvents']['display']) {\n            return \"\";\n        }\n\n       // Plugins case\n        if (\n            isset($val['itemtype'])\n            && !empty($val['itemtype'])\n            && $val['itemtype'] != 'NotPlanned'\n            && method_exists($val['itemtype'], \"displayPlanningItem\")\n        ) {\n            $html .= $val['itemtype']::displayPlanningItem($val, $who, $type, $complete);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Show the planning for the central page of a user\n     *\n     * @param $who ID of the user\n     *\n     * @return void\n     **/\n    public static function showCentral($who)\n    {\n        global $CFG_GLPI;\n\n        if (\n            !Session::haveRight(self::$rightname, self::READMY)\n            || ($who <= 0)\n        ) {\n            return false;\n        }\n\n        echo \"<div class='table-responsive card-table'>\";\n        echo \"<table class='table'>\";\n        echo \"<thead>\";\n        echo \"<tr class='noHover'><th>\";\n        echo \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/planning.php'>\" . __('Your planning') . \"</a>\";\n        echo \"</th></tr>\";\n        echo \"</thead>\";\n\n        echo \"<tr class='noHover'>\";\n        echo \"<td class='planning_on_central'>\";\n        self::showPlanning(false);\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        echo \"</div>\";\n    }\n\n\n\n   //*******************************************************************************************************************************\n   // *********************************** Implementation ICAL ***************************************************************\n   //*******************************************************************************************************************************\n\n    /**\n     *  Generate ical file content\n     *\n     * @param $who             user ID\n     * @param $whogroup        group ID\n     * @param $limititemtype   itemtype only display this itemtype (default '')\n     *\n     * @return void Outputs ical contents\n     **/\n    public static function generateIcal($who, $whogroup, $limititemtype = '')\n    {\n        global $CFG_GLPI;\n\n        if (\n            ($who === 0)\n            && ($whogroup === 0)\n        ) {\n            return;\n        }\n\n        if (!empty($CFG_GLPI[\"version\"])) {\n            $unique_id = \"GLPI-Planning-\" . trim($CFG_GLPI[\"version\"]);\n        } else {\n            $unique_id = \"GLPI-Planning-UnknownVersion\";\n        }\n\n       // create vcalendar\n        $vcalendar = new VCalendar();\n\n       // $xprops = array( \"X-LIC-LOCATION\" => $tz );\n       // iCalUtilityFunctions::createTimezone( $v, $tz, $xprops );\n\n        $interv = [];\n        $begin  = time() - MONTH_TIMESTAMP * 12;\n        $end    = time() + MONTH_TIMESTAMP * 12;\n        $begin  = date(\"Y-m-d H:i:s\", $begin);\n        $end    = date(\"Y-m-d H:i:s\", $end);\n        $params = [\n            'genical'   => true,\n            'who'       => $who,\n            'whogroup'  => $whogroup,\n            'begin'     => $begin,\n            'end'       => $end\n        ];\n\n        if (empty($limititemtype)) {\n            foreach ($CFG_GLPI['planning_types'] as $itemtype) {\n                $interv = array_merge($interv, $itemtype::populatePlanning($params));\n            }\n        } else {\n            $interv = $limititemtype::populatePlanning($params);\n        }\n\n        if (count($interv) > 0) {\n            foreach ($interv as $key => $val) {\n                if (isset($val['itemtype'])) {\n                    if (isset($val[getForeignKeyFieldForItemType($val['itemtype'])])) {\n                        $uid = $val['itemtype'] . \"#\" . $val[getForeignKeyFieldForItemType($val['itemtype'])];\n                    } else {\n                        $uid = \"Other#\" . $key;\n                    }\n                } else {\n                    $uid = \"Other#\" . $key;\n                }\n\n                $vevent['UID']     = $uid;\n\n                $dateBegin = new DateTime($val[\"begin\"]);\n                $dateBegin->setTimeZone(new DateTimeZone('UTC'));\n\n                $dateEnd = new DateTime($val[\"end\"]);\n                $dateEnd->setTimeZone(new DateTimeZone('UTC'));\n\n                $vevent['DTSTART'] = $dateBegin;\n                $vevent['DTEND']   = $dateEnd;\n\n                if (isset($val[\"tickets_id\"])) {\n                    $summary = sprintf(__('Ticket #%1$s %2$s'), $val[\"tickets_id\"], $val[\"name\"]);\n                } else if (isset($val[\"name\"])) {\n                    $summary = $val[\"name\"];\n                }\n                $vevent['SUMMARY'] = $summary;\n\n                if (isset($val[\"content\"])) {\n                    $description = $val[\"content\"];\n                } else if (isset($val[\"text\"])) {\n                    $description = $val[\"text\"];\n                } else if (isset($val[\"name\"])) {\n                    $description = $val[\"name\"];\n                }\n                $vevent['DESCRIPTION'] = RichText::getTextFromHtml($description);\n\n                if (isset($val[\"url\"])) {\n                    $vevent['URL'] = $val[\"url\"];\n                }\n                $vcalendar->add('VEVENT', $vevent);\n            }\n        }\n\n        $output   = $vcalendar->serialize();\n        $filename = date('YmdHis') . '.ics';\n\n        @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n       //@header(\"Content-Length: \".Toolbox::strlen($output));\n        @header(\"Connection: close\");\n        @header(\"content-type: text/calendar; charset=utf-8\");\n\n        echo $output;\n    }\n\n    /**\n     * @since 0.85\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        $values[self::READMY]    = __('See personnal planning');\n        $values[self::READGROUP] = __('See schedule of people in my groups');\n        $values[self::READALL]   = __('See all plannings');\n\n        return $values;\n    }\n\n    /**\n     * Save the last view used in fullcalendar\n     *\n     * @since 9.5\n     *\n     * @param string $view_name\n     * @return void\n     */\n    public static function viewChanged($view_name = \"ListView\")\n    {\n        $_SESSION['glpi_plannings']['lastview'] = $view_name;\n    }\n\n    /**\n     * Returns actor type from 'planning' key (key comes from user 'plannings' field).\n     *\n     * @param string $key\n     *\n     * @return string|null\n     */\n    public static function getActorTypeFromPlanningKey($key)\n    {\n        if (preg_match('/group_\\d+_users/', $key)) {\n            return Group_User::getType();\n        }\n        $itemtype = ucfirst(preg_replace('/^([a-z]+)_\\d+$/', '$1', $key));\n        return class_exists($itemtype) ? $itemtype : null;\n    }\n\n    /**\n     * Returns actor id from 'planning' key (key comes from user 'plannings' field).\n     *\n     * @param string $key\n     *\n     * @return integer|null\n     */\n    public static function getActorIdFromPlanningKey($key)\n    {\n        $items_id = preg_replace('/^[a-z]+_(\\d+)(?:_[a-z]+)?$/', '$1', $key);\n        return is_numeric($items_id) ? (int)$items_id : null;\n    }\n\n    /**\n     * Returns planning key for given actor (key is used in user 'plannings' field).\n     *\n     * @param string  $itemtype\n     * @param integer $items_id\n     *\n     * @return string\n     */\n    public static function getPlanningKeyForActor($itemtype, $items_id)\n    {\n        if ('Group_User' === $itemtype) {\n            return 'group_' . $items_id . '_users';\n        }\n\n        return strtolower($itemtype) . '_' . $items_id;\n    }\n\n    /**\n     * Get CalDAV base calendar URL for given actor.\n     *\n     * @param CommonDBTM $item\n     *\n     * @return string|null\n     */\n    private static function getCaldavBaseCalendarUrl(\\CommonDBTM $item)\n    {\n\n        $calendar_uri = null;\n\n        switch (get_class($item)) {\n            case \\Group::class:\n                $calendar_uri = \\Glpi\\CalDAV\\Backend\\Calendar::PREFIX_GROUPS\n                 . '/' . $item->fields['id']\n                 . '/' . \\Glpi\\CalDAV\\Backend\\Calendar::BASE_CALENDAR_URI;\n                break;\n            case \\User::class:\n                $calendar_uri = \\Glpi\\CalDAV\\Backend\\Calendar::PREFIX_USERS\n                . '/' . $item->fields['name']\n                . '/' . \\Glpi\\CalDAV\\Backend\\Calendar::BASE_CALENDAR_URI;\n                break;\n        }\n\n        return $calendar_uri;\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-calendar-time\";\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Toolbox\\Sanitizer;\n\n// $feed = new SimplePie();\n// $feed->set_cache_location('../files/_rss');\n// $feed->set_cache_duration(3600);\n// $feed->set_feed_url('http://linuxfr.org/news.atom');\n// $feed->force_feed(true);\n// // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n// // all that other good stuff.  The feed's information will not be available to SimplePie before\n// // this is called.\n// $success = $feed->init();\n//\n// // We'll make sure that the right content type and character encoding gets set automatically.\n// // This function will grab the proper character encoding, as well as set the content type to text/html.\n// $feed->handle_content_type();\n// if ($feed->error())\n// {\n//    echo \"ERROR\";\n// } else {\n//    echo $feed->get_title();\n//    echo $feed->get_link();\n// }\n\n/**\n * RSSFeed Class\n *\n * @since 0.84\n **/\nclass RSSFeed extends CommonDBVisible implements ExtraVisibilityCriteria\n{\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    public static $rightname    = 'rssfeed_public';\n\n\n\n    public static function getTypeName($nb = 0)\n    {\n\n        if (Session::haveRight('rssfeed_public', READ)) {\n            return _n('RSS feed', 'RSS feed', $nb);\n        }\n        return _n('Personal RSS feed', 'Personal RSS feed', $nb);\n    }\n\n\n    public static function canCreate()\n    {\n\n        return (Session::haveRight(self::$rightname, CREATE)\n              || Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    public static function canView()\n    {\n\n        return (Session::haveRight('rssfeed_public', READ)\n              || Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    public function canViewItem()\n    {\n\n       // Is my rssfeed or is in visibility\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', READ)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function canCreateItem()\n    {\n       // Is my rssfeed\n        return ($this->fields['users_id'] == Session::getLoginUserID());\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', UPDATE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canUpdate()\n    {\n        return (Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canPurge()\n    {\n        return (Session::getCurrentInterface() != 'helpdesk');\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @see CommonDBTM::canPurgeItem()\n     **/\n    public function canPurgeItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight(self::$rightname, PURGE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function post_getFromDB()\n    {\n\n       // Users\n        $this->users    = RSSFeed_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = Entity_RSSFeed::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = Group_RSSFeed::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = Profile_RSSFeed::getProfiles($this->fields['id']);\n    }\n\n\n    /**\n     * @see CommonDBTM::cleanDBonPurge()\n     **/\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Entity_RSSFeed::class,\n                Group_RSSFeed::class,\n                Profile_RSSFeed::class,\n                RSSFeed_User::class,\n            ]\n        );\n    }\n\n    public function haveVisibilityAccess()\n    {\n        if (!self::canView()) {\n            return false;\n        }\n\n        return parent::haveVisibilityAccess();\n    }\n\n    /**\n     * Return visibility joins to add to SQL\n     *\n     * @param $forceall force all joins (false by default)\n     *\n     * @return string joins to add\n     **/\n    public static function addVisibilityJoins($forceall = false)\n    {\n       //not deprecated because used in Search\n        global $DB;\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['WHERE']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = str_replace(\n            'SELECT * FROM ' . $DB->quoteName(self::getTable()) . ' ',\n            '',\n            $sql\n        );\n        return $sql;\n    }\n\n\n    /**\n     * Return visibility SQL restriction to add\n     *\n     * @return string restrict to add\n     **/\n    public static function addVisibilityRestrict()\n    {\n       //not deprecated because used in Search\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['LEFT JOIN']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = preg_replace('/.*WHERE /', '', $sql);\n\n        return $sql;\n    }\n\n    /**\n     * Return visibility joins to add to DBIterator parameters\n     *\n     * @since 9.4\n     *\n     * @param boolean $forceall force all joins (false by default)\n     *\n     * @return array\n     */\n    public static function getVisibilityCriteria(bool $forceall = false): array\n    {\n        $where = [self::getTable() . '.users_id' => Session::getLoginUserID()];\n        $join = [];\n\n        if (!self::canView()) {\n            return [\n                'LEFT JOIN' => $join,\n                'WHERE'     => $where\n            ];\n        }\n\n       //JOINs\n       // Users\n        $join['glpi_rssfeeds_users'] = [\n            'ON' => [\n                'glpi_rssfeeds_users'   => 'rssfeeds_id',\n                'glpi_rssfeeds'         => 'id'\n            ]\n        ];\n\n        $where = [\n            'OR' => [\n                self::getTable() . '.users_id'   => Session::getLoginUserID(),\n                'glpi_rssfeeds_users.users_id'   => Session::getLoginUserID()\n            ]\n        ];\n        $orwhere = [];\n\n       // Groups\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]))\n        ) {\n            $join['glpi_groups_rssfeeds'] = [\n                'ON' => [\n                    'glpi_groups_rssfeeds'  => 'rssfeeds_id',\n                    'glpi_rssfeeds'         => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_rssfeeds', '', '', true);\n            $orwhere[] = [\n                'glpi_groups_rssfeeds.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                      ? $_SESSION[\"glpigroups\"]\n                                                      : [-1],\n                'OR' => [\n                    'glpi_groups_rssfeeds.no_entity_restriction' => 1,\n                ] + $restrict\n            ];\n        }\n\n       // Profiles\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveprofile\"])\n              && isset($_SESSION[\"glpiactiveprofile\"]['id']))\n        ) {\n            $join['glpi_profiles_rssfeeds'] = [\n                'ON' => [\n                    'glpi_profiles_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveprofile\"]) && isset($_SESSION[\"glpiactiveprofile\"]['id'])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true);\n            if (!count($restrict)) {\n                $restrict = [true];\n            }\n            $ors = [\n                'glpi_profiles_rssfeeds.no_entity_restriction' => 1,\n                $restrict\n            ];\n\n            $orwhere[] = [\n                'glpi_profiles_rssfeeds.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n                'OR' => $ors\n            ];\n        }\n\n       // Entities\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"]))\n        ) {\n            $join['glpi_entities_rssfeeds'] = [\n                'ON' => [\n                    'glpi_entities_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"])) {\n           // Force complete SQL not summary when access to all entities\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true, true);\n            if (count($restrict)) {\n                $orwhere[] = $restrict;\n            }\n        }\n\n        $where['OR'] = array_merge($where['OR'], $orwhere);\n        $criteria = ['LEFT JOIN' => $join];\n        if (count($where)) {\n            $criteria['WHERE'] = $where;\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * @param $field\n     * @param $values\n     * @param $options   array\n     **/\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'refresh_rate':\n                return Html::timestampToString($values[$field], false);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n\n    /**\n     * @param $field\n     * @param $name               (default '')\n     * @param $values             (default '')\n     * @param $options      array\n     **/\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n\n        switch ($field) {\n            case 'refresh_rate':\n                return Planning::dropdownState($name, $values[$field], false);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'forcegroupby'       => true,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'name'               => __('Creator'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'right'              => 'all'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'url',\n            'name'               => __('URL'),\n            'datatype'           => 'string',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'have_error',\n            'name'               => __('Error'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'max_items',\n            'name'               => __('Number of items displayed'),\n            'datatype'           => 'number',\n            'min'                => 5,\n            'max'                => 100,\n            'step'               => 5,\n            'toadd'              => [1],\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'refresh_rate',\n            'name'               => __('Refresh rate'),\n            'datatype'           => 'timestamp',\n            'min'                => HOUR_TIMESTAMP,\n            'max'                => DAY_TIMESTAMP,\n            'step'               => HOUR_TIMESTAMP,\n            'toadd'              => [\n                5 * MINUTE_TIMESTAMP,\n                15 * MINUTE_TIMESTAMP,\n                30 * MINUTE_TIMESTAMP,\n                45 * MINUTE_TIMESTAMP\n            ],\n            'display_emptychoice' => false,\n            'massiveaction'      => true,\n            'searchtype'         => 'equals'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n\n    /**\n     * @see CommonGLPI::getTabNameForItem()\n     **/\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (self::canView()) {\n            $nb = 0;\n            switch ($item->getType()) {\n                case 'RSSFeed':\n                    $showtab = [1 => __('Content')];\n                    if (Session::haveRight('rssfeed_public', UPDATE)) {\n                        if ($_SESSION['glpishow_count_on_tabs']) {\n                            $nb = $item->countVisibilities();\n                        }\n                        $showtab[2] = self::createTabEntry(_n(\n                            'Target',\n                            'Targets',\n                            Session::getPluralNumber()\n                        ), $nb);\n                    }\n                    return $showtab;\n            }\n        }\n        return '';\n    }\n\n\n    /**\n     * @see CommonGLPI::defineTabs()\n     **/\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    /**\n     * @param $item         CommonGLPI object\n     * @param $tabnum       (default 1)\n     * @param $withtemplate (default 0)\n     **/\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'RSSFeed':\n                switch ($tabnum) {\n                    case 1:\n                        $item->showFeedContent();\n                        return true;\n\n                    case 2:\n                        $item->showVisibility();\n                        return true;\n                }\n        }\n        return false;\n    }\n\n    public function prepareInputForAdd($input)\n    {\n        if (!$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if ($feed = self::getRSSFeed($input['url'])) {\n            $input['have_error'] = 0;\n            $input['name']       = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        } else {\n            $input['have_error'] = 1;\n            $input['name']       = '';\n        }\n        $input[\"name\"] = trim($input[\"name\"]);\n\n        if (empty($input[\"name\"])) {\n            $input[\"name\"] = __('Without title');\n        }\n        return $input;\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n        if (array_key_exists('url', $input) && !$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if (\n            empty($input['name'])\n            && isset($input['url'])\n            && ($feed = self::getRSSFeed($input['url']))\n        ) {\n            $input['name'] = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        }\n        return $input;\n    }\n\n    /**\n     * Check URL given in input.\n     * @param string $url\n     * @return bool\n     */\n    private function checkUrlInput(string $url): bool\n    {\n        if (parse_url($url) === false) {\n            Session::addMessageAfterRedirect(__('Feed URL is invalid.'), false, ERROR);\n            return false;\n        } elseif (!Toolbox::isUrlSafe($url)) {\n            Session::addMessageAfterRedirect(sprintf(__('URL \"%s\" is not allowed by your administrator.'), $url), false, ERROR);\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public function pre_updateInDB()\n    {\n\n       // Set new user if initial user have been deleted\n        if (\n            ($this->fields['users_id'] == 0)\n            && ($uid = Session::getLoginUserID())\n        ) {\n            $this->fields['users_id'] = $uid;\n            $this->updates[]          = \"users_id\";\n        }\n    }\n\n\n    public function post_getEmpty()\n    {\n\n        $this->fields[\"name\"]         = __('New note');\n        $this->fields[\"users_id\"]     = Session::getLoginUserID();\n        $this->fields[\"refresh_rate\"] = DAY_TIMESTAMP;\n        $this->fields[\"max_items\"]    = 20;\n    }\n\n\n    /**\n     * Print the rssfeed form\n     *\n     * @param $ID        integer  Id of the item to print\n     * @param $options   array    of possible options:\n     *     - target filename : where to go when done.\n     **/\n    public function showForm($ID, array $options = [])\n    {\n       // Test _rss cache directory. I permission trouble : unable to edit\n        if (Toolbox::testWriteAccessToDirectory(GLPI_RSS_DIR) > 0) {\n            echo \"<div class='center'>\";\n            printf(__('Check permissions to the directory: %s'), GLPI_RSS_DIR);\n            echo \"<p class='red b'>\" . __('Error') . \"</p>\";\n            echo \"</div>\";\n            return false;\n        }\n\n        $this->initForm($ID, $options);\n\n        $this->showFormHeader($options);\n\n        $rowspan = 4;\n\n        if (!$this->isNewID($ID)) {\n           // Force getting feed :\n            $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n            if (!$feed || $feed->error()) {\n                $this->setError(true);\n            } else {\n                $this->setError(false);\n            }\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Name') . \"</td>\";\n            echo \"<td>\";\n            echo Html::input('name', ['value' => $this->fields['name']]);\n            echo \"</td><td colspan ='2'>&nbsp;</td></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('URL') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='url' size='100' value='\" . $this->fields[\"url\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('By') . \"</td>\";\n        echo \"<td>\";\n        echo getUserName($this->fields[\"users_id\"]);\n        echo \"<input type='hidden' name='users_id' value='\" . $this->fields['users_id'] . \"'>\\n\";\n        echo \"</td>\";\n        echo \"<td rowspan='$rowspan'>\" . __('Comments') . \"</td>\";\n        echo \"<td rowspan='$rowspan' class='middle'>\";\n        echo \"<textarea  class='form-control' rows='\" . ($rowspan + 3) . \"' name='comment' >\" . $this->fields[\"comment\"] .\n           \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Active') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('is_active', $this->fields['is_active']);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Refresh rate') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showTimeStamp(\n            \"refresh_rate\",\n            ['value'                => $this->fields[\"refresh_rate\"],\n                'min'                  => HOUR_TIMESTAMP,\n                'max'                  => DAY_TIMESTAMP,\n                'step'                 => HOUR_TIMESTAMP,\n                'display_emptychoice'  => false,\n                'toadd'                => [5 * MINUTE_TIMESTAMP,\n                    15 * MINUTE_TIMESTAMP,\n                    30 * MINUTE_TIMESTAMP,\n                    45 * MINUTE_TIMESTAMP\n                ]\n            ]\n        );\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Number of items displayed') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"max_items\", ['value'                => $this->fields[\"max_items\"],\n            'min'                  => 5,\n            'max'                  => 100,\n            'step'                 => 5,\n            'toadd'                => [1],\n            'display_emptychoice'  => false\n        ]);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Error retrieving RSS feed') . \"</td>\";\n        echo \"<td>\";\n        if ($this->fields['have_error'] && !Toolbox::isUrlSafe($this->fields['url'])) {\n            echo sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url']);\n        } else {\n            echo Dropdown::getYesNo($this->fields['have_error']);\n        }\n        echo \"</td>\";\n        if ($this->fields['have_error']) {\n            echo \"<td>\" . __('RSS feeds found');\n            echo \"</td><td>\";\n            $this->showDiscoveredFeeds();\n            echo \"</td>\\n\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Set error field\n     *\n     * @param $error   (false by default\n     **/\n    public function setError($error = false)\n    {\n\n        if (!isset($this->fields['id']) && !isset($this->fields['have_error'])) {\n            return;\n        }\n\n       // Set error if not set\n        if ($error && !$this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 1\n            ]);\n        }\n       // Unset error if set\n        if (!$error && $this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 0\n            ]);\n        }\n    }\n\n\n    /**\n     * Show the feed content\n     **/\n    public function showFeedContent()\n    {\n\n        if (!$this->canViewItem()) {\n            return false;\n        }\n        $rss_feed = [\n            'items'  => []\n        ];\n        echo \"<div class='firstbloc'>\";\n        if ($feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate'])) {\n            $this->setError(false);\n            $rss_feed['title'] = $feed->get_title();\n            foreach ($feed->get_items(0, $this->fields['max_items']) as $item) {\n                $rss_feed['items'][] = [\n                    'title'     => $item->get_title(),\n                    'link'      => $item->get_permalink(),\n                    'timestamp' => Html::convDateTime($item->get_date('Y-m-d H:i:s')),\n                    'content'   => $item->get_content()\n                ];\n            }\n        } else {\n            $rss_feed['error'] = !Toolbox::isUrlSafe($this->fields['url'])\n                ? sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url'])\n                : __('Error retrieving RSS feed');\n            $this->setError(true);\n        }\n\n        TemplateRenderer::getInstance()->display('components/rss_feed.html.twig', [\n            'rss_feed'  => $rss_feed\n        ]);\n    }\n\n\n    /**\n     * Show discovered feeds\n     *\n     * @return void\n     **/\n    public function showDiscoveredFeeds()\n    {\n        if (!Toolbox::isUrlSafe($this->fields['url'])) {\n            return;\n        }\n\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->enable_cache(false);\n        $feed->set_feed_url($this->fields['url']);\n        $feed->init();\n        $feed->handle_content_type();\n\n        if ($feed->error()) {\n            return;\n        }\n\n        foreach ($feed->get_all_discovered_feeds() as $f) {\n            $newurl  = $f->url;\n            $newfeed = self::getRSSFeed($newurl);\n            if ($newfeed && !$newfeed->error()) {\n                $link = $newfeed->get_permalink();\n                if (!empty($link)) {\n                     echo \"<a href='$newurl'>\" . $newfeed->get_title() . \"</a>&nbsp;\";\n                     Html::showSimpleForm(\n                         $this->getFormURL(),\n                         'update',\n                         _x('button', 'Use'),\n                         ['id'  => $this->getID(),\n                             'url' => $newurl\n                         ]\n                     );\n                     echo \"<br>\";\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Get a specific RSS feed\n     *\n     * @param $url             string/array   URL of the feed or array of URL\n     * @param $cache_duration  timestamp      cache duration (default DAY_TIMESTAMP)\n     *\n     * @return feed object\n     **/\n    public static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP)\n    {\n        global $CFG_GLPI;\n\n        if (!Toolbox::isUrlSafe($url)) {\n            return false;\n        }\n\n        if (Sanitizer::isHtmlEncoded($url)) {\n            $url = Sanitizer::decodeHtmlSpecialChars($url);\n        }\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->set_cache_duration($cache_duration);\n\n       // proxy support\n        if (!empty($CFG_GLPI[\"proxy_name\"])) {\n            $prx_opt = [];\n            $prx_opt[CURLOPT_PROXY]     = $CFG_GLPI[\"proxy_name\"];\n            $prx_opt[CURLOPT_PROXYPORT] = $CFG_GLPI[\"proxy_port\"];\n            if (!empty($CFG_GLPI[\"proxy_user\"])) {\n                $prx_opt[CURLOPT_HTTPAUTH]     = CURLAUTH_ANYSAFE;\n                $prx_opt[CURLOPT_PROXYUSERPWD] = $CFG_GLPI[\"proxy_user\"] . \":\" .\n                                             (new GLPIKey())->decrypt($CFG_GLPI[\"proxy_passwd\"]);\n            }\n            $feed->set_curl_options($prx_opt);\n        }\n\n        $feed->enable_cache(true);\n        $feed->set_feed_url($url);\n        $feed->force_feed(true);\n       // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n       // all that other good stuff.  The feed's information will not be available to SimplePie before\n       // this is called.\n        $feed->init();\n\n       // We'll make sure that the right content type and character encoding gets set automatically.\n       // This function will grab the proper character encoding, as well as set the content type to text/html.\n        $feed->handle_content_type();\n        if ($feed->error()) {\n            return false;\n        }\n        return $feed;\n    }\n\n\n    /**\n     * Show list for central view\n     *\n     * @param $personal boolean   display rssfeeds created by me ?\n     * @param $personal $display  if false, return html\n     *\n     * @return void\n     **/\n    public static function showListForCentral(bool $personal = true, bool $display = true)\n    {\n        global $DB, $CFG_GLPI;\n\n        $users_id             = Session::getLoginUserID();\n\n        $table = self::getTable();\n        $criteria = [\n            'SELECT'   => \"$table.*\",\n            'DISTINCT' => true,\n            'FROM'     => $table,\n            'ORDER'    => \"$table.name\"\n        ];\n\n        if ($personal) {\n           /// Personal notes only for central view\n            if (Session::getCurrentInterface() == 'helpdesk') {\n                return false;\n            }\n\n            $criteria['WHERE'][\"$table.users_id\"] = $users_id;\n            $criteria['WHERE'][\"$table.is_active\"] = 1;\n\n            $titre = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php'>\" .\n                    _n('Personal RSS feed', 'Personal RSS feeds', Session::getPluralNumber()) . \"</a>\";\n        } else {\n           // Show public rssfeeds / not mines : need to have access to public rssfeeds\n            if (!self::canView()) {\n                return false;\n            }\n\n            $criteria = $criteria + self::getVisibilityCriteria();\n\n           // Only personal on central so do not keep it\n            if (Session::getCurrentInterface() == 'central') {\n                $criteria['WHERE'][\"$table.users_id\"] = ['<>', $users_id];\n            }\n\n            if (Session::getCurrentInterface() == 'central') {\n                $titre = \"<a href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php\\\">\" .\n                       _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber()) . \"</a>\";\n            } else {\n                $titre = _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber());\n            }\n        }\n\n        $iterator = $DB->request($criteria);\n        $nb = count($iterator);\n        $items   = [];\n        $rssfeed = new self();\n        foreach ($iterator as $data) {\n            if ($rssfeed->getFromDB($data['id'])) {\n               // Force fetching feeds\n                if ($feed = self::getRSSFeed($data['url'], $data['refresh_rate'])) {\n                    // Store feeds in array of feeds\n                    $items = array_merge($items, $feed->get_items(0, $data['max_items']));\n                    $rssfeed->setError(false);\n                } else {\n                    $rssfeed->setError(true);\n                }\n            }\n        }\n\n        $output = \"\";\n        $output .= \"<table class='table table-striped table-hover card-table'>\";\n        $output .= \"<thead>\";\n        $output .= \"<tr class='noHover'><th colspan='2'><div class='relative'><span>$titre</span>\";\n\n        if (\n            ($personal && self::canCreate())\n            || (!$personal && Session::haveRight('rssfeed_public', CREATE))\n        ) {\n            $output .= \"<span class='float-end'>\";\n            $output .= \"<a href='\" . RSSFeed::getFormURL() . \"'>\";\n            $output .= \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/plus.png' alt='\" . __s('Add') . \"' title=\\\"\" .\n                __s('Add') . \"\\\"></a></span>\";\n        }\n\n        $output .= \"</div></th></tr>\";\n        $output .= \"</thead>\";\n\n        if ($nb) {\n            usort($items, ['SimplePie', 'sort_items']);\n            foreach ($items as $item) {\n                $output .= \"<tr class='tab_bg_1'><td>\";\n                $output .= Html::convDateTime($item->get_date('Y-m-d H:i:s'));\n                $output .= \"</td><td>\";\n                $link = $item->feed->get_permalink();\n                if (empty($link)) {\n                    $output .= $item->feed->get_title();\n                } else {\n                    $output .= \"<a target='_blank' href='$link'>\" . $item->feed->get_title() . '</a>';\n                }\n                $link = $item->get_permalink();\n\n                $rand = mt_rand();\n                $output .= \"<div id='rssitem$rand'>\";\n                if (!is_null($link)) {\n                    $output .= \"<a target='_blank' href='$link'>\";\n                }\n                $output .= $item->get_title();\n                if (!is_null($link)) {\n                    $output .= \"</a>\";\n                }\n                $output .= \"</div>\";\n                $output .= Html::showToolTip(RichText::getEnhancedHtml($item->get_content()), [\n                    'applyto' => \"rssitem$rand\",\n                    'display' => false\n                ]);\n                $output .= \"</td></tr>\";\n            }\n        }\n        $output .= \"</table>\";\n\n        if ($display) {\n            echo $output;\n        } else {\n            return $output;\n        }\n    }\n\n    /**\n     * @since 0.85\n     *\n     * @see commonDBTM::getRights()\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        if ($interface == 'helpdesk') {\n            $values = [READ => __('Read')];\n        } else {\n            $values = parent::getRights();\n        }\n        return $values;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-rss\";\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace Glpi\\System\\Status;\n\nuse AuthLDAP;\nuse CronTask;\nuse DBConnection;\nuse DBmysql;\nuse MailCollector;\nuse Plugin;\nuse Toolbox;\n\n/**\n * @since 9.5.0\n */\nfinal class StatusChecker\n{\n    /**\n     * The plugin or service is working as expected.\n     */\n    public const STATUS_OK = 'OK';\n\n    /**\n     * The plugin or service is working but may have some issues\n     */\n    public const STATUS_WARNING = 'WARNING';\n\n    /**\n     * The plugin or service is reachable but not working as expected.\n     */\n    public const STATUS_PROBLEM = 'PROBLEM';\n\n    /**\n     * Unable to get the status of a plugin or service.\n     * This is likely due to a prerequisite plugin or service being unavailable or the plugin not implementing the status hook.\n     * For example, some checks require the DB to be accessible.\n     */\n    public const STATUS_NO_DATA = 'NO_DATA';\n\n    /**\n     * Get all registered services\n     * @return array Array of services keyed by name.\n     *    The value for each service is expected to be an array containing a class name and a method name relating to the method that will do the check.\n     * @since 10.0.0\n     */\n    public static function getServices(): array\n    {\n        return [\n            'db'              => [self::class, 'getDBStatus'],\n            'cas'             => [self::class, 'getCASStatus'],\n            'ldap'            => [self::class, 'getLDAPStatus'],\n            'imap'            => [self::class, 'getIMAPStatus'],\n            'mail_collectors' => [self::class, 'getMailCollectorStatus'],\n            'crontasks'       => [self::class, 'getCronTaskStatus'],\n            'filesystem'      => [self::class, 'getFilesystemStatus'],\n            'plugins'         => [self::class, 'getPluginsStatus']\n        ];\n    }\n\n    /**\n     * Calculate the overall GLPI status or the overall service status based on all child status checks\n     * @param array $status The status array for all services or a specific service check.\n     * @return string The calculated status.\n     *    One of {@link STATUS_NO_DATA}, {@link STATUS_OK}, {@link STATUS_WARNING}, or {@link STATUS_PROBLEM}.\n     * @since 10.0.0\n     */\n    public static function calculateGlobalStatus(array $status)\n    {\n        $statuses = array_column($status, 'status');\n        $global_status = self::STATUS_OK;\n        if (in_array(self::STATUS_PROBLEM, $statuses, true)) {\n            $global_status = self::STATUS_PROBLEM;\n        } else if (in_array(self::STATUS_WARNING, $statuses, true)) {\n            $global_status = self::STATUS_WARNING;\n        }\n        return $global_status;\n    }\n\n    /**\n     * Get a service's status\n     *\n     * @param string|null $service The name of the service or if null/'all' all services will be checked\n     * @param bool $public_only True if only public information should be available in the status check.\n     *    If true, assume the data is being viewed by an anonymous user.\n     * @param bool $as_array True if the service check result should be returned as an array instead of a plain-text string.\n     * @return array|string An array or string with the result based on the $as_array parameter value.\n     * @since 10.0.0\n     */\n    public static function getServiceStatus(?string $service, $public_only = true, $as_array = true)\n    {\n        $services = self::getServices();\n        if ($service === 'all' || $service === null) {\n            $status = [\n                'glpi'   => [\n                    'status' => self::STATUS_OK\n                ]\n            ];\n            foreach ($services as $name => $service_check_method) {\n                $service_status = self::getServiceStatus($name, $public_only, true);\n                $status[$name] = $service_status;\n            }\n\n            $status['glpi']['status'] = self::calculateGlobalStatus($status);\n\n            if ($as_array) {\n                return $status;\n            } else {\n                return self::getPlaintextOutput($status);\n            }\n        }\n\n        if (!array_key_exists($service, $services)) {\n            return $as_array ? [] : '';\n        }\n        $service_check_method = $services[$service];\n        if (method_exists($service_check_method[0], $service_check_method[1])) {\n            $service_status = $service_check_method($public_only);\n            if ($as_array) {\n                return $service_status;\n            }\n            return strtoupper($service) . '_' . $service_status['status'];\n        }\n        return $as_array ? [] : '';\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getDBStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_OK,\n                'master' => [\n                    'status' => self::STATUS_OK,\n                ],\n                'slaves' => [\n                    'status' => self::STATUS_NO_DATA,\n                    'servers' => []\n                ]\n            ];\n           // Check replica SQL server connection\n            if (DBConnection::isDBSlaveActive()) {\n                $DBslave = DBConnection::getDBSlaveConf();\n                if (is_array($DBslave->dbhost)) {\n                    $hosts = $DBslave->dbhost;\n                } else {\n                    $hosts = [$DBslave->dbhost];\n                }\n\n                if (count($hosts)) {\n                    $status['slaves']['status'] = self::STATUS_OK;\n                }\n\n                foreach ($hosts as $num => $name) {\n                    $diff = DBConnection::getReplicateDelay($num);\n                    if (abs($diff) > 1000000000) {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_PROBLEM,\n                            'replication_delay'  => '-1',\n                            'status_msg'           => _x('glpi_status', 'Replication delay is too high')\n                        ];\n                        $status['slaves']['status'] = self::STATUS_PROBLEM;\n                        $status['status'] = self::STATUS_PROBLEM;\n                    } else if (abs($diff) > HOUR_TIMESTAMP) {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_PROBLEM,\n                            'replication_delay'  => abs($diff),\n                            'status_msg'           => _x('glpi_status', 'Replication delay is too high')\n                        ];\n                        $status['slaves']['status'] = self::STATUS_PROBLEM;\n                        $status['status'] = self::STATUS_PROBLEM;\n                    } else {\n                        $status['slaves']['servers'][$num] = [\n                            'status'             => self::STATUS_OK,\n                            'replication_delay'  => abs($diff)\n                        ];\n                    }\n                }\n            }\n\n           // Check main server connection\n            if (!@DBConnection::establishDBConnection(false, true, false)) {\n                $status['master'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg' => _x('glpi_status', 'Unable to connect to the main database')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            }\n        }\n\n        // Set new properties. Master and slave are deprecated given their implications in English.\n        $status['main'] = $status['master'];\n        $status['replicas'] = $status['slaves'];\n\n        return $status;\n    }\n\n    private static function isDBAvailable(): bool\n    {\n        static $db_ok = null;\n\n        if ($db_ok === null) {\n            $status = self::getDBStatus();\n            $db_ok = ($status['main']['status'] === self::STATUS_OK || $status['replicas']['status'] === self::STATUS_OK);\n        }\n\n        return $db_ok;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getLDAPStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n               // Check LDAP Auth connections\n                $ldap_methods = getAllDataFromTable('glpi_authldaps', ['is_active' => 1]);\n\n                $total_servers = count($ldap_methods);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    foreach ($ldap_methods as $method) {\n                        $ldap = null;\n                        try {\n                            if (\n                                AuthLDAP::tryToConnectToServer(\n                                    $method,\n                                    $method['rootdn'],\n                                    (new \\GLPIKey())->decrypt($method['rootdn_passwd'])\n                                )\n                            ) {\n                                $status['servers'][$method['name']] = [\n                                    'status' => self::STATUS_OK\n                                ];\n                            } else {\n                                $status['servers'][$method['name']] = [\n                                    'status' => self::STATUS_PROBLEM,\n                                    'status_msg' => _x('glpi_status', 'Unable to connect to the LDAP server')\n                                ];\n                                $total_error++;\n                                $global_status = self::STATUS_PROBLEM;\n                            }\n                        } catch (\\RuntimeException $e) {\n                            // May be missing LDAP extension (Probably test environment)\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_PROBLEM\n                            ];\n                            $total_error++;\n                            $global_status = self::STATUS_PROBLEM;\n                        }\n                    }\n\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getIMAPStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n               // Check IMAP Auth connections\n                $imap_methods = getAllDataFromTable('glpi_authmails', ['is_active' => 1]);\n\n                $total_servers = count($imap_methods);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    foreach ($imap_methods as $method) {\n                        $param = Toolbox::parseMailServerConnectString($method['connect_string'], true);\n                        if ($param['ssl'] === true) {\n                            $host = 'ssl://' . $param['address'];\n                        } else if ($param['tls'] === true) {\n                            $host = 'tls://' . $param['address'];\n                        } else {\n                            $host = $param['address'];\n                        }\n                        if ($fp = @fsockopen($host, $param['port'], $errno, $errstr, 1)) {\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_OK\n                            ];\n                        } else {\n                            $status['servers'][$method['name']] = [\n                                'status' => self::STATUS_PROBLEM,\n                                'status_msg' => _x('glpi_status', 'Unable to connect to the IMAP server')\n                            ];\n                            $total_error++;\n                            $global_status = self::STATUS_PROBLEM;\n                        }\n                        if ($fp !== false) {\n                                 fclose($fp);\n                        }\n                    }\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getCASStatus($public_only = true): array\n    {\n        global $CFG_GLPI;\n\n        static $status = null;\n\n        if ($status === null) {\n            $status['status'] = self::STATUS_NO_DATA;\n            if (!empty($CFG_GLPI['cas_host'])) {\n                $url = $CFG_GLPI['cas_host'];\n                if (!empty($CFG_GLPI['cas_port'])) {\n                    $url .= ':' . (int)$CFG_GLPI['cas_port'];\n                }\n                $url .= '/' . $CFG_GLPI['cas_uri'];\n                if (Toolbox::isUrlSafe($url)) {\n                    $data = Toolbox::getURLContent($url);\n                    if (!empty($data)) {\n                        $status['status'] = self::STATUS_OK;\n                    } else {\n                        $status['status'] = self::STATUS_PROBLEM;\n                    }\n                } else {\n                    $status['status'] = self::STATUS_NO_DATA;\n                    if (!$public_only) {\n                        $status['status_msg'] = sprintf(\n                            __('URL \"%s\" is not considered safe and cannot be fetched from GLPI server.'),\n                            $url\n                        );\n                    }\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getMailCollectorStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'servers' => []\n            ];\n            if (self::isDBAvailable()) {\n                $mailcollectors = getAllDataFromTable('glpi_mailcollectors', ['is_active' => 1]);\n\n                $total_servers = count($mailcollectors);\n                $total_error = 0;\n                $global_status = self::STATUS_NO_DATA;\n                $message = null;\n                if ($total_servers > 0) {\n                    $global_status = self::STATUS_OK;\n                    $mailcol = new MailCollector();\n                    foreach ($mailcollectors as $mc) {\n                        if ($mailcol->getFromDB($mc['id'])) {\n                            try {\n                                $mailcol->connect();\n                                $status['servers'][$mc['name']] = [\n                                    'status' => self::STATUS_OK\n                                ];\n                            } catch (\\Exception $e) {\n                                $status['servers'][$mc['name']] = [\n                                    'status'       => self::STATUS_PROBLEM,\n                                    'error_code'   => $e->getCode(),\n                                    'status_msg'      => $e->getMessage()\n                                ];\n                                $total_error++;\n                                $global_status = self::STATUS_PROBLEM;\n                            }\n                        }\n                    }\n                    if ($global_status !== self::STATUS_OK) {\n                        $message = sprintf(_x('glpi_status', 'OK: %d, WARNING: %d, PROBLEM: %d, TOTAL: %d'), $total_servers - $total_error, 0, $total_error, $total_servers);\n                    }\n                }\n                $status['status'] = $global_status;\n                if ($message !== null) {\n                    $status['status_msg'] = $message;\n                }\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getCronTaskStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_NO_DATA,\n                'stuck' => []\n            ];\n            if (self::isDBAvailable()) {\n                $crontasks = getAllDataFromTable('glpi_crontasks');\n                $running = count(array_filter($crontasks, static function ($crontask) {\n                    return $crontask['state'] === CronTask::STATE_RUNNING;\n                }));\n                $stuck_crontasks = getAllDataFromTable(\n                    'glpi_crontasks',\n                    [\n                        'state'  => CronTask::STATE_RUNNING,\n                        'OR'     => [\n                            new \\QueryExpression(\n                                '(unix_timestamp(' . DBmysql::quoteName('lastrun') . ') + 2 * ' .\n                                DBmysql::quoteName('frequency') . ' < unix_timestamp(now()))'\n                            ),\n                            new \\QueryExpression(\n                                '(unix_timestamp(' . DBmysql::quoteName('lastrun') . ') + 2 * ' .\n                                HOUR_TIMESTAMP . ' < unix_timestamp(now()))'\n                            )\n                        ]\n                    ]\n                );\n                foreach ($stuck_crontasks as $ct) {\n                      $status['stuck'][] = $ct['name'];\n                }\n                $status['status'] = count($status['stuck']) ? self::STATUS_PROBLEM : self::STATUS_OK;\n                $status['status_msg'] = sprintf(_x('glpi_status', 'RUNNING: %d, STUCK: %d, TOTAL: %d'), $running, count($stuck_crontasks), count($crontasks));\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getFilesystemStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $status = [\n                'status' => self::STATUS_OK,\n                'session_dir' => [\n                    'status' => self::STATUS_OK\n                ]\n            ];\n           // Check session dir (useful when NFS mounted))\n            if (!is_dir(GLPI_SESSION_DIR)) {\n                $status['session_dir'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg'   => sprintf(_x('glpi_status', '%s variable is not a directory'), 'GLPI_SESSION_DIR')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            } else if (!is_writable(GLPI_SESSION_DIR)) {\n                $status['session_dir'] = [\n                    'status' => self::STATUS_PROBLEM,\n                    'status_msg'   => sprintf(_x('glpi_status', '%s variable is not writable'), 'GLPI_SESSION_DIR')\n                ];\n                $status['status'] = self::STATUS_PROBLEM;\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     *\n     * @since 9.5.0\n     * @param bool $public_only True if only public status information should be given.\n     * @return array\n     */\n    public static function getPluginsStatus($public_only = true): array\n    {\n        static $status = null;\n\n        if ($status === null) {\n            $plugins = Plugin::getPlugins();\n            $status = [];\n\n            foreach ($plugins as $plugin) {\n                // Old-style plugin status hook which only modified the global OK status.\n                $param = [\n                    'ok' => true,\n                    '_public_only' => $public_only\n                ];\n                $plugin_status = Plugin::doOneHook($plugin, 'status', $param);\n                if ($plugin_status === null) {\n                    continue;\n                }\n                unset($plugin_status['_public_only']);\n                if (isset($plugin_status['ok']) && count(array_keys($plugin_status)) === 1) {\n                    $status[$plugin] = [\n                        'status'    => $plugin_status['ok'] ? self::STATUS_OK : self::STATUS_PROBLEM,\n                        'version'   => Plugin::getPluginFilesVersion($plugin)\n                    ];\n                } else {\n                    $status[$plugin] = $plugin_status;\n                }\n            }\n        }\n\n        if (count($status) === 0) {\n            $status['status'] = self::STATUS_NO_DATA;\n        } else {\n            if ($public_only) {\n               // Only show overall plugin status\n               // Giving out plugin names and versions to anonymous users could make it easier to target insecure plugins and versions\n                $statuses = array_column($status, 'status');\n                $all_ok = !in_array(self::STATUS_PROBLEM, $statuses, true);\n                return ['status' => $all_ok ? self::STATUS_OK : self::STATUS_PROBLEM];\n            }\n        }\n\n        return $status;\n    }\n\n    /**\n     * @param bool $public_only True if only public status information should be given.\n     * @param bool $as_array\n     * @return array|string\n     * @deprecated 10.0.0 Use {@link self::getServiceStatus} instead\n     */\n    public static function getFullStatus($public_only = true, $as_array = true)\n    {\n        Toolbox::deprecated('Use StatusChecker::getServiceStatus for service checks instead');\n        return self::getServiceStatus(null, $public_only, $as_array);\n    }\n\n    /**\n     * Format the given full service status result as a plain-text output compatible with previous versions of GLPI.\n     * @param array $status\n     * @return string\n     * @deprecated 10.0.0\n     */\n    private static function getPlaintextOutput(array $status): string\n    {\n       // Deprecated notices are done on the /status.php endpoint and CLI commands to give better migration hints\n        $output = '';\n       // Plain-text output\n        if (count($status['db']['slaves'])) {\n            foreach ($status['db']['slaves']['servers'] as $num => $slave_info) {\n                $output .= \"GLPI_DBSLAVE_{$num}_{$slave_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No slave DB\\n\"; // Leave as \"slave\" since plain text is already deprecated\n        }\n        $output .= \"GLPI_DB_{$status['db']['master']['status']}\\n\";\n        $output .= \"GLPI_SESSION_DIR_{$status['filesystem']['session_dir']['status']}\\n\";\n        if (count($status['ldap']['servers'])) {\n            $output .= 'Check LDAP servers:';\n            foreach ($status['ldap']['servers'] as $name => $ldap_info) {\n                $output .= \" {$name}_{$ldap_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No LDAP server\\n\";\n        }\n        if (count($status['imap']['servers'])) {\n            $output .= 'Check IMAP servers:';\n            foreach ($status['imap']['servers'] as $name => $imap_info) {\n                $output .= \" {$name}_{$imap_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No IMAP server\\n\";\n        }\n        if (isset($status['cas']['status']) && $status['cas']['status'] !== self::STATUS_NO_DATA) {\n            $output .= \"CAS_SERVER_{$status['cas']['status']}\\n\";\n        } else {\n            $output .= \"No CAS server\\n\";\n        }\n        if (count($status['mail_collectors']['servers'])) {\n            $output .= 'Check mail collectors:';\n            foreach ($status['mail_collectors']['servers'] as $name => $collector_info) {\n                $output .= \" {$name}_{$collector_info['status']}\\n\";\n            }\n        } else {\n            $output .= \"No mail collector\\n\";\n        }\n        if (count($status['crontasks']['stuck'])) {\n            $output .= 'Check crontasks:';\n            foreach ($status['crontasks']['stuck'] as $name) {\n                $output .= \" {$name}_PROBLEM\\n\";\n            }\n        } else {\n            $output .= \"Crontasks_OK\\n\";\n        }\n\n       // Overall Status\n        $output .= \"\\nGLPI_{$status['glpi']['status']}\\n\";\n        return $output;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Console\\Application;\nuse Glpi\\Event;\nuse Glpi\\Mail\\Protocol\\ProtocolInterface;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Glpi\\Toolbox\\VersionParser;\nuse Laminas\\Mail\\Storage\\AbstractStorage;\nuse Mexitek\\PHPColors\\Color;\nuse Monolog\\Logger;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Toolbox Class\n **/\nclass Toolbox\n{\n    /**\n     * Wrapper for max_input_vars\n     *\n     * @since 0.84\n     *\n     * @return integer\n     **/\n    public static function get_max_input_vars()\n    {\n\n        $max = ini_get('max_input_vars');  // Security limit since PHP 5.3.9\n        if (!$max) {\n            $max = ini_get('suhosin.post.max_vars');  // Security limit from Suhosin\n        }\n        return $max;\n    }\n\n\n    /**\n     * Convert first caracter in upper\n     *\n     * @since 0.83\n     * @since 9.3 Rework\n     *\n     * @param string $str  string to change\n     *\n     * @return string\n     **/\n    public static function ucfirst($str)\n    {\n        $first_letter = mb_strtoupper(mb_substr($str, 0, 1));\n        $str_end = mb_substr($str, 1, mb_strlen($str));\n        return $first_letter . $str_end;\n    }\n\n\n    /**\n     * to underline shortcut letter\n     *\n     * @since 0.83\n     *\n     * @param string $str       from dico\n     * @param string $shortcut  letter of shortcut\n     *\n     * @return string\n     **/\n    public static function shortcut($str, $shortcut)\n    {\n\n        $pos = self::strpos(self::strtolower($str), self::strtolower($shortcut));\n        if ($pos !== false) {\n            return self::substr($str, 0, $pos) .\n                \"<u>\" . self::substr($str, $pos, 1) . \"</u>\" .\n                self::substr($str, $pos + 1);\n        }\n        return $str;\n    }\n\n\n    /**\n     * substr function for utf8 string\n     *\n     * @param string  $str      string\n     * @param string  $tofound  string to found\n     * @param integer $offset   The search offset. If it is not specified, 0 is used.\n     *\n     * @return integer|false\n     **/\n    public static function strpos($str, $tofound, $offset = 0)\n    {\n        return mb_strpos($str, $tofound, $offset, \"UTF-8\");\n    }\n\n\n\n    /**\n     *  Replace str_pad()\n     *  who bug with utf8\n     *\n     * @param string  $input       input string\n     * @param integer $pad_length  padding length\n     * @param string  $pad_string  padding string\n     * @param integer $pad_type    padding type\n     *\n     * @return string\n     **/\n    public static function str_pad($input, $pad_length, $pad_string = \" \", $pad_type = STR_PAD_RIGHT)\n    {\n\n        $diff = (strlen($input) - self::strlen($input));\n        return str_pad($input, $pad_length + $diff, $pad_string, $pad_type);\n    }\n\n\n    /**\n     * strlen function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return integer  length of the string\n     **/\n    public static function strlen($str)\n    {\n        return mb_strlen($str, \"UTF-8\");\n    }\n\n\n    /**\n     * substr function for utf8 string\n     *\n     * @param string  $str\n     * @param integer $start   start of the result substring\n     * @param integer $length  The maximum length of the returned string if > 0 (default -1)\n     *\n     * @return string\n     **/\n    public static function substr($str, $start, $length = -1)\n    {\n\n        if ($length == -1) {\n            $length = self::strlen($str) - $start;\n        }\n        return mb_substr($str, $start, $length, \"UTF-8\");\n    }\n\n\n    /**\n     * strtolower function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return string  lower case string\n     **/\n    public static function strtolower($str)\n    {\n        return mb_strtolower($str, \"UTF-8\");\n    }\n\n\n    /**\n     * strtoupper function for utf8 string\n     *\n     * @param string $str\n     *\n     * @return string  upper case string\n     **/\n    public static function strtoupper($str)\n    {\n        return mb_strtoupper($str, \"UTF-8\");\n    }\n\n\n    /**\n     * Is a string seems to be UTF-8 one ?\n     *\n     * @param $str string   string to analyse\n     *\n     * @return boolean\n     **/\n    public static function seems_utf8($str)\n    {\n        return mb_check_encoding($str, \"UTF-8\");\n    }\n\n\n    /**\n     * Encode string to UTF-8\n     *\n     * @param string $string        string to convert\n     * @param string $from_charset  original charset (if 'auto' try to autodetect)\n     *\n     * @return string  utf8 string\n     **/\n    public static function encodeInUtf8($string, $from_charset = \"ISO-8859-1\")\n    {\n\n        if (strcmp($from_charset, \"auto\") == 0) {\n            $from_charset = mb_detect_encoding($string);\n        }\n        return mb_convert_encoding($string, \"UTF-8\", $from_charset);\n    }\n\n\n    /**\n     * Decode string from UTF-8 to specified charset\n     *\n     * @param string $string      string to convert\n     * @param string $to_charset  destination charset (default \"ISO-8859-1\")\n     *\n     * @return string  converted string\n     **/\n    public static function decodeFromUtf8($string, $to_charset = \"ISO-8859-1\")\n    {\n        return mb_convert_encoding($string, $to_charset, \"UTF-8\");\n    }\n\n    /**\n     * @deprecated 10.0.0\n     */\n    public static function sodiumEncrypt($content, $key = null)\n    {\n        Toolbox::deprecated('Use \"GLPIKey::encrypt()\"');\n        $glpikey = new GLPIKey();\n        return $glpikey->encrypt($content, $key);\n    }\n\n    /**\n     * @deprecated 10.0.0\n     */\n    public static function sodiumDecrypt($content, $key = null)\n    {\n        Toolbox::deprecated('Use \"GLPIKey::decrypt()\"');\n        $glpikey = new GLPIKey();\n        return $glpikey->decrypt($content, $key);\n    }\n\n\n    /**\n     * Prevent from XSS\n     * Clean code\n     *\n     * @param array|string $value  item to prevent\n     *\n     * @return array|string  clean item\n     *\n     * @see unclean_cross_side_scripting_deep*\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function clean_cross_side_scripting_deep($value)\n    {\n        Toolbox::deprecated('Use \"Glpi\\Toolbox\\Sanitizer::encodeHtmlSpecialCharsRecursive()\"');\n        return Sanitizer::encodeHtmlSpecialCharsRecursive($value);\n    }\n\n\n    /**\n     *  Invert fonction from clean_cross_side_scripting_deep\n     *\n     * @param array|string $value  item to unclean from clean_cross_side_scripting_deep\n     *\n     * @return array|string  unclean item\n     *\n     * @see clean_cross_side_scripting_deep()\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function unclean_cross_side_scripting_deep($value)\n    {\n        Toolbox::deprecated('Use \"Glpi\\Toolbox\\Sanitizer::decodeHtmlSpecialCharsRecursive()\"');\n        global $DB;\n        return $DB->escape(Sanitizer::decodeHtmlSpecialCharsRecursive($value));\n    }\n\n    /**\n     * Returns a safe configuration for htmLawed.\n     *\n     * @return array\n     *\n     * @since 9.5.4\n     */\n    public static function getHtmLawedSafeConfig(): array\n    {\n        $config = [\n            'elements'           => '* -applet -canvas -embed -form -object -script -link -meta',\n            'deny_attribute'     => 'on*, srcdoc',\n            'comment'            => 1, // 1: remove HTML comments (and do not display their contents)\n            'cdata'              => 1, // 1: remove CDATA sections (and do not display their contents)\n            'direct_list_nest'   => 1, // 1: Allow usage of ul/ol tags nested in other ul/ol tags\n            'schemes'            => 'href: aim, app, feed, file, ftp, gopher, http, https, irc, mailto, news, nntp, sftp, ssh, tel, telnet, notes; *: file, http, https',\n            'no_deprecated_attr' => 0, // 0: do not transform deprecated HTML attributes\n        ];\n        if (!GLPI_ALLOW_IFRAME_IN_RICH_TEXT) {\n            $config['elements'] .= '-iframe';\n        }\n\n        return $config;\n    }\n\n    /**\n     * Log in 'php-errors' all args\n     *\n     * @param Logger  $logger Logger instance, if any\n     * @param integer $level  Log level (defaults to warning)\n     * @param array   $args   Arguments (message to log, ...)\n     *\n     * @return void\n     **/\n    private static function log($logger = null, $level = Logger::WARNING, $args = null)\n    {\n        static $tps = 0;\n\n        $extra = [];\n        if (method_exists('Session', 'getLoginUserID')) {\n            $extra['user'] = Session::getLoginUserID() . '@' . php_uname('n');\n        }\n        if ($tps && function_exists('memory_get_usage')) {\n            $extra['mem_usage'] = number_format(microtime(true) - $tps, 3) . '\", ' .\n                      number_format(memory_get_usage() / 1024 / 1024, 2) . 'Mio)';\n        }\n\n        $msg = \"\";\n        if (function_exists('debug_backtrace')) {\n            $bt  = debug_backtrace();\n            if (count($bt) > 2) {\n                if (isset($bt[2]['class'])) {\n                    $msg .= $bt[2]['class'] . '::';\n                }\n                $msg .= $bt[2]['function'] . '() in ';\n            }\n            $msg .= $bt[1]['file'] . ' line ' . $bt[1]['line'] . \"\\n\";\n        }\n\n        if ($args == null) {\n            $args = func_get_args();\n        } else if (!is_array($args)) {\n            $args = [$args];\n        }\n\n        foreach ($args as $arg) {\n            if (is_array($arg) || is_object($arg)) {\n                $msg .= str_replace(\"\\n\", \"\\n  \", print_r($arg, true));\n            } else if (is_null($arg)) {\n                $msg .= 'NULL ';\n            } else if (is_bool($arg)) {\n                $msg .= ($arg ? 'true' : 'false') . ' ';\n            } else {\n                $msg .= $arg . ' ';\n            }\n        }\n\n        $tps = microtime(true);\n\n        if ($logger === null) {\n            global $PHPLOGGER;\n            $logger = $PHPLOGGER;\n        }\n\n        try {\n            $logger->addRecord($level, $msg, $extra);\n        } catch (\\Exception $e) {\n           //something went wrong, make sure logging does not cause fatal\n            error_log($e);\n        }\n\n        global $SQLLOGGER;\n        if (isCommandLine() && $level >= Logger::WARNING && $logger !== $SQLLOGGER) {\n           // Do not output related messages to $SQLLOGGER as they are redundant with\n           // output made by \"ErrorHandler::handleSql*()\" methods.\n            echo $msg;\n        }\n    }\n\n    /**\n     * PHP debug log\n     */\n    public static function logDebug()\n    {\n        self::log(null, Logger::DEBUG, func_get_args());\n    }\n\n    /**\n     * PHP notice log\n     */\n    public static function logNotice()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_NOTICE) to log notices,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::NOTICE, func_get_args());\n    }\n\n    /**\n     * PHP info log\n     */\n    public static function logInfo()\n    {\n        self::log(null, Logger::INFO, func_get_args());\n    }\n\n    /**\n     * PHP warning log\n     */\n    public static function logWarning()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_WARNING) to log warnings,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::WARNING, func_get_args());\n    }\n\n    /**\n     * PHP error log\n     */\n    public static function logError()\n    {\n        self::deprecated(\n            'Use either native trigger_error($msg, E_USER_WARNING) to log errors,'\n            . ' either Glpi\\\\Application\\\\ErrorHandler::handleException() to log exceptions,'\n            . ' either Toolbox::logInfo() or Toolbox::logDebug() to log messages not related to errors.'\n        );\n        self::log(null, Logger::ERROR, func_get_args());\n    }\n\n    /**\n     * SQL debug log\n     */\n    public static function logSqlDebug()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::DEBUG, $args);\n    }\n\n    /**\n     * SQL warning log\n     */\n    public static function logSqlWarning()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::WARNING, $args);\n    }\n\n    /**\n     * SQL error log\n     */\n    public static function logSqlError()\n    {\n        global $SQLLOGGER;\n        $args = func_get_args();\n        self::log($SQLLOGGER, Logger::ERROR, $args);\n    }\n\n\n    /**\n     * Generate a Backtrace\n     *\n     * @param string $log  Log file name (default php-errors) if false, return the string\n     * @param string $hide Call to hide (but display script/line)\n     * @param array  $skip Calls to not display at all\n     *\n     * @return string\n     *\n     * @since 0.85\n     **/\n    public static function backtrace($log = 'php-errors', $hide = '', array $skip = [])\n    {\n\n        if (function_exists(\"debug_backtrace\")) {\n            $message = \"  Backtrace :\\n\";\n            $traces  = debug_backtrace();\n            foreach ($traces as $trace) {\n                $script = (isset($trace[\"file\"]) ? $trace[\"file\"] : \"\") . \":\" .\n                        (isset($trace[\"line\"]) ? $trace[\"line\"] : \"\");\n                if (strpos($script, GLPI_ROOT) === 0) {\n                    $script = substr($script, strlen(GLPI_ROOT) + 1);\n                }\n                if (strlen($script) > 50) {\n                    $script = \"...\" . substr($script, -47);\n                } else {\n                    $script = str_pad($script, 50);\n                }\n                $call = (isset($trace[\"class\"]) ? $trace[\"class\"] : \"\") .\n                    (isset($trace[\"type\"]) ? $trace[\"type\"] : \"\") .\n                    (isset($trace[\"function\"]) ? $trace[\"function\"] . \"()\" : \"\");\n                if ($call == $hide) {\n                    $call = '';\n                }\n\n                if (!in_array($call, $skip)) {\n                    $message .= \"  $script $call\\n\";\n                }\n            }\n        } else {\n            $message = \"  Script : \" . $_SERVER[\"SCRIPT_FILENAME\"] . \"\\n\";\n        }\n\n        if ($log) {\n            self::logInFile($log, $message, true);\n        }\n\n        return $message;\n    }\n\n    /**\n     * Send a deprecated message in log (with backtrace)\n     * @param  string $message the message to send\n     * @return void\n     */\n    public static function deprecated($message = \"Called method is deprecated\")\n    {\n        trigger_error($message, E_USER_DEPRECATED);\n    }\n\n\n    /**\n     * Log a message in log file\n     *\n     * @param string  $name   name of the log file\n     * @param string  $text   text to log\n     * @param boolean $force  force log in file not seeing use_log_in_files config\n     *\n     * @return boolean\n     **/\n    public static function logInFile($name, $text, $force = false)\n    {\n        global $CFG_GLPI;\n\n        $user = '';\n        if (method_exists('Session', 'getLoginUserID')) {\n            $user = \" [\" . Session::getLoginUserID() . '@' . php_uname('n') . \"]\";\n        }\n\n        $ok = true;\n        if (\n            (isset($CFG_GLPI[\"use_log_in_files\"]) && $CFG_GLPI[\"use_log_in_files\"])\n            || $force\n        ) {\n            $ok = error_log(date(\"Y-m-d H:i:s\") . \"$user\\n\" . $text, 3, GLPI_LOG_DIR . \"/\" . $name . \".log\");\n        }\n\n        global $application;\n        if ($application instanceof Application) {\n            $application->getOutput()->writeln('<comment>' . $text . '</comment>', OutputInterface::VERBOSITY_VERY_VERBOSE);\n        } else if (\n            isset($_SESSION['glpi_use_mode'])\n            && ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE)\n            && isCommandLine()\n        ) {\n            $stderr = fopen('php://stderr', 'w');\n            fwrite($stderr, $text);\n            fclose($stderr);\n        }\n        return $ok;\n    }\n\n\n    /**\n     * Switch error mode for GLPI\n     *\n     * @param integer|null $mode       From Session::*_MODE\n     * @param boolean|null $debug_sql\n     * @param boolean|null $debug_vars\n     * @param boolean|null $log_in_files\n     *\n     * @return void\n     *\n     * @since 0.84\n     **/\n    public static function setDebugMode($mode = null, $debug_sql = null, $debug_vars = null, $log_in_files = null)\n    {\n        global $CFG_GLPI;\n\n        if (isset($mode)) {\n            $_SESSION['glpi_use_mode'] = $mode;\n        }\n        if (isset($debug_sql)) {\n            $CFG_GLPI['debug_sql'] = $debug_sql;\n        }\n        if (isset($debug_vars)) {\n            $CFG_GLPI['debug_vars'] = $debug_vars;\n        }\n        if (isset($log_in_files)) {\n            $CFG_GLPI['use_log_in_files'] = $log_in_files;\n        }\n\n       // If debug mode activated : display some information\n        if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n           // Force reporting of all errors\n            error_reporting(E_ALL);\n           // Disable native error displaying as it will be done by custom handler\n            ini_set('display_errors', 'Off');\n        }\n    }\n\n\n    /**\n     * Send a file (not a document) to the navigator\n     * See Document->send();\n     *\n     * @param string      $file        storage filename\n     * @param string      $filename    file title\n     * @param string|null $mime        file mime type\n     * @param boolean     $add_expires add expires headers maximize cacheability ?\n     *\n     * @return void\n     **/\n    public static function sendFile($file, $filename, $mime = null, $expires_headers = false)\n    {\n\n       // Test securite : document in DOC_DIR\n        $tmpfile = str_replace(GLPI_DOC_DIR, \"\", $file);\n\n        if (strstr($tmpfile, \"../\") || strstr($tmpfile, \"..\\\\\")) {\n            Event::log(\n                $file,\n                \"sendFile\",\n                1,\n                \"security\",\n                $_SESSION[\"glpiname\"] . \" try to get a non standard file.\"\n            );\n            echo \"Security attack!!!\";\n            die(1);\n        }\n\n        if (!file_exists($file)) {\n            echo \"Error file $file does not exist\";\n            die(1);\n        }\n\n       // if $mime is defined, ignore mime type by extension\n        if ($mime === null && preg_match('/\\.(...)$/', $file)) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n            $mime = finfo_file($finfo, $file);\n            finfo_close($finfo);\n        }\n\n       // don't download picture files, see them inline\n        $attachment = \"\";\n       // if not begin 'image/'\n        if (\n            strncmp($mime, 'image/', 6) !== 0\n            && $mime != 'application/pdf'\n            // svg vector of attack, force attachment\n            // see https://github.com/glpi-project/glpi/issues/3873\n            || $mime == 'image/svg+xml'\n        ) {\n            $attachment = ' attachment;';\n        }\n\n        $etag = md5_file($file);\n        $lastModified = filemtime($file);\n\n       // Make sure there is nothing in the output buffer (In case stuff was added by core or misbehaving plugin).\n       // If there is any extra data, the sent file will be corrupted.\n        while (ob_get_level() > 0) {\n            ob_end_clean();\n        }\n       // Now send the file with header() magic\n        header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\", $lastModified) . \" GMT\");\n        header(\"Etag: $etag\");\n        header_remove('Pragma');\n        header('Cache-Control: private');\n        if ($expires_headers) {\n            $max_age = WEEK_TIMESTAMP;\n            header('Expires: ' . gmdate('D, d M Y H:i:s \\G\\M\\T', time() + $max_age));\n        }\n        header(\n            \"Content-disposition:$attachment filename=\\\"\" .\n            addslashes(iconv('UTF-8', 'ISO-8859-1', $filename)) .\n            \"\\\"; filename*=utf-8''\" .\n            rawurlencode($filename)\n        );\n        header(\"Content-type: \" . $mime);\n\n       // HTTP_IF_NONE_MATCH takes precedence over HTTP_IF_MODIFIED_SINCE\n       // http://tools.ietf.org/html/rfc7232#section-3.3\n        if (isset($_SERVER['HTTP_IF_NONE_MATCH']) && trim($_SERVER['HTTP_IF_NONE_MATCH']) === $etag) {\n            http_response_code(304); //304 - Not Modified\n            exit;\n        }\n        if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && @strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) >= $lastModified) {\n            http_response_code(304); //304 - Not Modified\n            exit;\n        }\n\n        readfile($file) or die(\"Error opening file $file\");\n    }\n\n\n    /**\n     *  Add slash for variable & array\n     *\n     * @param string|string[] $value value to add slashes\n     *\n     * @return string|string[]\n     **/\n    public static function addslashes_deep($value)\n    {\n        global $DB;\n\n        $value = ((array) $value === $value)\n                  ? array_map([__CLASS__, 'addslashes_deep'], $value)\n                  : (is_null($value)\n                       ? null : (is_resource($value) || is_object($value)\n                       ? $value : $DB->escape(\n                           str_replace(\n                               ['&#039;', '&#39;', '&#x27;', '&apos;', '&quot;'],\n                               [\"'\", \"'\", \"'\", \"'\", \"\\\"\"],\n                               $value\n                           )\n                       ))\n                    );\n\n        return $value;\n    }\n\n\n    /**\n     * Strip slash  for variable & array\n     *\n     * @param array|string $value  item to stripslashes\n     *\n     * @return array|string stripslashes item\n     **/\n    public static function stripslashes_deep($value)\n    {\n\n        $value = ((array) $value === $value)\n                  ? array_map([__CLASS__, 'stripslashes_deep'], $value)\n                  : (is_null($value)\n                        ? null : (is_resource($value) || is_object($value)\n                                    ? $value : stripslashes($value)));\n\n        return $value;\n    }\n\n    /** Converts an array of parameters into a query string to be appended to a URL.\n     *\n     * @param array  $array      parameters to append to the query string.\n     * @param string $separator  separator may be defined as &amp; to display purpose\n     * @param string $parent     This should be left blank (it is used internally by the function).\n     *\n     * @return string  Query string to append to a URL.\n     **/\n    public static function append_params($array, $separator = '&', $parent = '')\n    {\n\n        $params = [];\n        foreach ($array as $k => $v) {\n            if (is_array($v)) {\n                $params[] = self::append_params(\n                    $v,\n                    $separator,\n                    (empty($parent) ? rawurlencode($k)\n                    : $parent . '%5B' . rawurlencode($k) . '%5D')\n                );\n            } else {\n                $params[] = (!empty($parent) ? $parent . '%5B' . rawurlencode($k) . '%5D' : rawurlencode($k)) . '=' . rawurlencode($v);\n            }\n        }\n        //Remove empty values\n        $params = array_filter($params);\n        return implode($separator, $params);\n    }\n\n\n    /**\n     * Compute PHP memory_limit\n     *\n     * @param string $ininame  name of the ini ooption to retrieve (since 9.1)\n     *\n     * @return integer memory limit\n     **/\n    public static function getMemoryLimit($ininame = 'memory_limit')\n    {\n\n        $mem = ini_get($ininame);\n        $matches = [];\n        preg_match(\"/([-0-9]+)([KMG]*)/\", $mem, $matches);\n        $mem = \"\";\n\n       // no K M or G\n        if (isset($matches[1])) {\n            $mem = $matches[1];\n            if (isset($matches[2])) {\n                switch ($matches[2]) {\n                    case \"G\":\n                        $mem *= 1024;\n                        // nobreak;\n\n                    case \"M\":\n                        $mem *= 1024;\n                        // nobreak;\n\n                    case \"K\":\n                        $mem *= 1024;\n                        // nobreak;\n                }\n            }\n        }\n\n        return $mem;\n    }\n\n\n    /**\n     * Check is current memory_limit is enough for GLPI\n     *\n     * @since 0.83\n     *\n     * @return integer\n     *   0 if PHP not compiled with memory_limit support,\n     *   1 no memory limit (memory_limit = -1),\n     *   2 insufficient memory for GLPI,\n     *   3 enough memory for GLPI\n     **/\n    public static function checkMemoryLimit()\n    {\n\n        $mem = self::getMemoryLimit();\n        if ($mem == \"\") {\n            return 0;\n        }\n        if ($mem == \"-1\") {\n            return 1;\n        }\n        if ($mem < (64 * 1024 * 1024)) {\n            return 2;\n        }\n        return 3;\n    }\n\n\n    /**\n     * Get the filesize of a complete directory (from php.net)\n     *\n     * @param string $path  directory or file to get size\n     *\n     * @return null|integer\n     *\n     * @deprecated 10.0.0\n     **/\n    public static function filesizeDirectory($path)\n    {\n        Toolbox::deprecated();\n\n        if (!is_dir($path)) {\n            return filesize($path);\n        }\n\n        if ($handle = opendir($path)) {\n            $size = 0;\n\n            while (false !== ($file = readdir($handle))) {\n                if (($file != '.') && ($file != '..')) {\n                    $size += filesize($path . '/' . $file);\n                    $size += self::filesizeDirectory($path . '/' . $file);\n                }\n            }\n\n            closedir($handle);\n            return $size;\n        }\n\n        return null;\n    }\n\n\n    /** Format a size passing a size in octet\n     *\n     * @param integer $size  Size in octet\n     *\n     * @return string  formatted size\n     **/\n    public static function getSize($size)\n    {\n\n       //TRANS: list of unit (o for octet)\n        $bytes = [__('o'), __('Kio'), __('Mio'), __('Gio'), __('Tio')];\n        foreach ($bytes as $val) {\n            if ($size > 1024) {\n                $size = $size / 1024;\n            } else {\n                break;\n            }\n        }\n       //TRANS: %1$s is a number maybe float or string and %2$s the unit\n        return sprintf(__('%1$s %2$s'), round($size, 2), $val);\n    }\n\n\n    /**\n     * Delete a directory and file contains in it\n     *\n     * @param string $dir  directory to delete\n     *\n     * @return void\n     **/\n    public static function deleteDir($dir)\n    {\n\n        if (file_exists($dir)) {\n            chmod($dir, 0777);\n\n            if (is_dir($dir)) {\n                $id_dir = opendir($dir);\n                while (($element = readdir($id_dir)) !== false) {\n                    if (($element != \".\") && ($element != \"..\")) {\n                        if (is_dir($dir . \"/\" . $element)) {\n                            self::deleteDir($dir . \"/\" . $element);\n                        } else {\n                            unlink($dir . \"/\" . $element);\n                        }\n                    }\n                }\n                closedir($id_dir);\n                rmdir($dir);\n            } else { // Delete file\n                unlink($dir);\n            }\n        }\n    }\n\n\n    /**\n     * Resize a picture to the new size\n     * Always produce a JPG file!\n     *\n     * @since 0.85\n     *\n     * @param string  $source_path   path of the picture to be resized\n     * @param string  $dest_path     path of the new resized picture\n     * @param integer $new_width     new width after resized (default 71)\n     * @param integer $new_height    new height after resized (default 71)\n     * @param integer $img_y         y axis of picture (default 0)\n     * @param integer $img_x         x axis of picture (default 0)\n     * @param integer $img_width     width of picture (default 0)\n     * @param integer $img_height    height of picture (default 0)\n     * @param integer $max_size      max size of the picture (default 500, is set to 0 no resize)\n     *\n     * @return boolean\n     **/\n    public static function resizePicture(\n        $source_path,\n        $dest_path,\n        $new_width = 71,\n        $new_height = 71,\n        $img_y = 0,\n        $img_x = 0,\n        $img_width = 0,\n        $img_height = 0,\n        $max_size = 500\n    ) {\n\n       //get img information (dimensions and extension)\n        $img_infos  = getimagesize($source_path);\n        if (empty($img_width)) {\n            $img_width  = $img_infos[0];\n        }\n        if (empty($img_height)) {\n            $img_height = $img_infos[1];\n        }\n        if (empty($new_width)) {\n            $new_width  = $img_infos[0];\n        }\n        if (empty($new_height)) {\n            $new_height = $img_infos[1];\n        }\n\n       // Image max size is 500 pixels : is set to 0 no resize\n        if ($max_size > 0) {\n            if (\n                ($img_width > $max_size)\n                || ($img_height > $max_size)\n            ) {\n                $source_aspect_ratio = $img_width / $img_height;\n                if ($source_aspect_ratio < 1) {\n                    $new_width  = ceil($max_size * $source_aspect_ratio);\n                    $new_height = $max_size;\n                } else {\n                    $new_width  = $max_size;\n                    $new_height = ceil($max_size / $source_aspect_ratio);\n                }\n            }\n        }\n\n        $img_type = $img_infos[2];\n\n        switch ($img_type) {\n            case IMAGETYPE_BMP:\n                $source_res = imagecreatefrombmp($source_path);\n                break;\n\n            case IMAGETYPE_GIF:\n                $source_res = imagecreatefromgif($source_path);\n                break;\n\n            case IMAGETYPE_JPEG:\n                $source_res = imagecreatefromjpeg($source_path);\n                break;\n\n            case IMAGETYPE_PNG:\n                $source_res = imagecreatefrompng($source_path);\n                break;\n\n            default:\n                return false;\n        }\n\n       //create new img resource for store thumbnail\n        $source_dest = imagecreatetruecolor($new_width, $new_height);\n\n       // set transparent background for PNG/GIF\n        if ($img_type === IMAGETYPE_GIF || $img_type === IMAGETYPE_PNG) {\n            imagecolortransparent($source_dest, imagecolorallocatealpha($source_dest, 0, 0, 0, 127));\n            imagealphablending($source_dest, false);\n            imagesavealpha($source_dest, true);\n        }\n\n       //resize image\n        imagecopyresampled(\n            $source_dest,\n            $source_res,\n            0,\n            0,\n            $img_x,\n            $img_y,\n            $new_width,\n            $new_height,\n            $img_width,\n            $img_height\n        );\n\n       //output img\n        $result = null;\n        switch ($img_type) {\n            case IMAGETYPE_GIF:\n            case IMAGETYPE_PNG:\n                $result = imagepng($source_dest, $dest_path);\n                break;\n\n            case IMAGETYPE_JPEG:\n            default:\n                $result = imagejpeg($source_dest, $dest_path, 90);\n                break;\n        }\n        return $result;\n    }\n\n\n    /**\n     * Check if new version is available\n     *\n     * @return string\n     **/\n    public static function checkNewVersionAvailable()\n    {\n       //parse github releases (get last version number)\n        $error = \"\";\n        $json_gh_releases = self::getURLContent(\"https://api.github.com/repos/glpi-project/glpi/releases\", $error);\n        if (empty($json_gh_releases)) {\n            return $error;\n        }\n\n        $all_gh_releases = json_decode($json_gh_releases, true);\n        $released_tags = [];\n        foreach ($all_gh_releases as $release) {\n            if ($release['prerelease'] == false) {\n                $released_tags[] =  $release['tag_name'];\n            }\n        }\n        usort($released_tags, 'version_compare');\n        $latest_version = array_pop($released_tags);\n\n        if (strlen(trim($latest_version)) == 0) {\n            return $error;\n        } else {\n            $currentVersion = preg_replace('/^((\\d+\\.?)+).*$/', '$1', GLPI_VERSION);\n            if (version_compare($currentVersion, $latest_version, '<')) {\n                Config::setConfigurationValues('core', ['founded_new_version' => $latest_version]);\n                return sprintf(__('A new version is available: %s.'), $latest_version);\n            } else {\n                return __('You have the latest available version');\n            }\n        }\n        return 1;\n    }\n\n\n    /**\n     * Determine if Ldap is usable checking ldap extension existence\n     *\n     * @return boolean\n     **/\n    public static function canUseLdap()\n    {\n        return extension_loaded('ldap');\n    }\n\n\n    /**\n     * Determine if CAS auth is usable checking lib existence\n     *\n     * @since 9.3\n     *\n     * @return boolean\n     **/\n    public static function canUseCas()\n    {\n        return class_exists('phpCAS');\n    }\n\n\n    /**\n     * Check Write Access to a directory\n     *\n     * @param string $dir  directory to check\n     *\n     * @return integer\n     *   0: OK,\n     *   1: delete error,\n     *   2: creation error\n     **/\n    public static function testWriteAccessToDirectory($dir)\n    {\n\n        $rand = rand();\n\n       // Check directory creation which can be denied by SElinux\n        $sdir = sprintf(\"%s/test_glpi_%08x\", $dir, $rand);\n\n        if (!mkdir($sdir)) {\n            return 4;\n        }\n\n        if (!rmdir($sdir)) {\n            return 3;\n        }\n\n       // Check file creation\n        $path = sprintf(\"%s/test_glpi_%08x.txt\", $dir, $rand);\n        $fp   = fopen($path, 'w');\n\n        if (empty($fp)) {\n            return 2;\n        }\n\n        fwrite($fp, \"This file was created for testing reasons. \");\n        fclose($fp);\n        $delete = unlink($path);\n\n        if (!$delete) {\n            return 1;\n        }\n\n        return 0;\n    }\n\n\n    /**\n     * Get form URL for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype Form URL\n     **/\n    public static function getItemTypeFormURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n        if ($plug = isPluginItemType($itemtype)) {\n           /* PluginFooBar => /plugins/foo/front/bar */\n            $dir .= Plugin::getPhpDir(strtolower($plug['plugin']), false);\n            $item = str_replace('\\\\', '/', strtolower($plug['class']));\n        } else { // Standard case\n            $item = strtolower($itemtype);\n            if (substr($itemtype, 0, \\strlen(NS_GLPI)) === NS_GLPI) {\n                $item = str_replace('\\\\', '/', substr($item, \\strlen(NS_GLPI)));\n            }\n        }\n\n        return \"$dir/front/$item.form.php\";\n    }\n\n\n    /**\n     * Get search URL for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype search URL\n     **/\n    public static function getItemTypeSearchURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n        if ($plug = isPluginItemType($itemtype)) {\n            $dir .= Plugin::getPhpDir(strtolower($plug['plugin']), false);\n            $item = str_replace('\\\\', '/', strtolower($plug['class']));\n        } else { // Standard case\n            if ($itemtype == 'Cartridge') {\n                $itemtype = 'CartridgeItem';\n            }\n            if ($itemtype == 'Consumable') {\n                $itemtype = 'ConsumableItem';\n            }\n            $item = strtolower($itemtype);\n            if (substr($itemtype, 0, \\strlen(NS_GLPI)) === NS_GLPI) {\n                $item = str_replace('\\\\', '/', substr($item, \\strlen(NS_GLPI)));\n            }\n        }\n\n        return \"$dir/front/$item.php\";\n    }\n\n\n    /**\n     * Get ajax tabs url for itemtype\n     *\n     * @param string  $itemtype  item type\n     * @param boolean $full      path or relative one\n     *\n     * return string itemtype tabs URL\n     **/\n    public static function getItemTypeTabsURL($itemtype, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $filename = \"/ajax/common.tabs.php\";\n\n        return ($full ? $CFG_GLPI['root_doc'] : '') . $filename;\n    }\n\n\n    /**\n     * Get a random string\n     *\n     * @param integer $length of the random string\n     *\n     * @return string  random string\n     *\n     * @see https://stackoverflow.com/questions/4356289/php-random-string-generator/31107425#31107425\n     **/\n    public static function getRandomString($length)\n    {\n        $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $str = '';\n        $max = mb_strlen($keyspace, '8bit') - 1;\n        for ($i = 0; $i < $length; ++$i) {\n            $str .= $keyspace[random_int(0, $max)];\n        }\n        return $str;\n    }\n\n\n    /**\n     * Split timestamp in time units\n     *\n     * @param integer $time  timestamp\n     *\n     * @return array\n     **/\n    public static function getTimestampTimeUnits($time)\n    {\n\n        $out = [];\n\n        $time          = round(abs($time));\n        $out['second'] = 0;\n        $out['minute'] = 0;\n        $out['hour']   = 0;\n        $out['day']    = 0;\n\n        $out['second'] = $time % MINUTE_TIMESTAMP;\n        $time         -= $out['second'];\n\n        if ($time > 0) {\n            $out['minute'] = ($time % HOUR_TIMESTAMP) / MINUTE_TIMESTAMP;\n            $time         -= $out['minute'] * MINUTE_TIMESTAMP;\n\n            if ($time > 0) {\n                $out['hour'] = ($time % DAY_TIMESTAMP) / HOUR_TIMESTAMP;\n                $time       -= $out['hour'] * HOUR_TIMESTAMP;\n\n                if ($time > 0) {\n                    $out['day'] = $time / DAY_TIMESTAMP;\n                }\n            }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Check an url is safe.\n     * Used to mitigate SSRF exploits.\n     *\n     * @since 10.0.3\n     *\n     * @param string    $url        URL to check\n     * @param array     $allowlist  Allowlist (regex array)\n     *\n     * @return bool\n     */\n    public static function isUrlSafe(string $url, array $allowlist = GLPI_SERVERSIDE_URL_ALLOWLIST): bool\n    {\n        foreach ($allowlist as $allow_regex) {\n            $result = preg_match($allow_regex, $url);\n            if ($result === false) {\n                trigger_error(\n                    sprintf('Unable to validate URL safeness. Following regex is probably invalid: \"%s\".', $allow_regex),\n                    E_USER_WARNING\n                );\n            } elseif ($result === 1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get a web page. Use proxy if configured\n     *\n     * @param string  $url    URL to retrieve\n     * @param string  $msgerr set if problem encountered (default NULL)\n     * @param integer $rec    internal use only Must be 0 (default 0)\n     *\n     * @return string content of the page (or empty)\n     **/\n    public static function getURLContent($url, &$msgerr = null, $rec = 0)\n    {\n        $curl_error = null;\n        $content = self::callCurl($url, [], $msgerr, $curl_error, true);\n        return $content;\n    }\n\n    /**\n     * Executes a curl call\n     *\n     * @param string $url         URL to retrieve\n     * @param array  $eopts       Extra curl opts\n     * @param string $msgerr      will contains a human readable error string if an error occurs of url returns empty contents\n     * @param string $curl_error  will contains original curl error string if an error occurs\n     *\n     * @return string\n     */\n    public static function callCurl(\n        $url,\n        array $eopts = [],\n        &$msgerr = null,\n        &$curl_error = null,\n        bool $check_url_safeness = false\n    ) {\n        global $CFG_GLPI;\n\n        if ($check_url_safeness && !Toolbox::isUrlSafe($url)) {\n            $msgerr = sprintf(\n                __('URL \"%s\" is not considered safe and cannot be fetched from GLPI server.'),\n                $url\n            );\n            trigger_error(sprintf('Unsafe URL \"%s\" fetching has been blocked.', $url), E_USER_NOTICE);\n            return '';\n        }\n\n        $content = \"\";\n        $taburl  = parse_url($url);\n\n        $defaultport = 80;\n\n       // Manage standard HTTPS port : scheme detection or port 443\n        if (\n            (isset($taburl[\"scheme\"]) && $taburl[\"scheme\"] == 'https')\n            || (isset($taburl[\"port\"]) && $taburl[\"port\"] == '443')\n        ) {\n            $defaultport = 443;\n        }\n\n        $ch = curl_init($url);\n        $opts = [\n            CURLOPT_URL             => $url,\n            CURLOPT_USERAGENT       => \"GLPI/\" . trim($CFG_GLPI[\"version\"]),\n            CURLOPT_RETURNTRANSFER  => 1,\n            CURLOPT_CONNECTTIMEOUT  => 5,\n        ] + $eopts;\n\n        if (!empty($CFG_GLPI[\"proxy_name\"])) {\n           // Connection using proxy\n            $opts += [\n                CURLOPT_PROXY           => $CFG_GLPI['proxy_name'],\n                CURLOPT_PROXYPORT       => $CFG_GLPI['proxy_port'],\n                CURLOPT_PROXYTYPE       => CURLPROXY_HTTP\n            ];\n\n            if (!empty($CFG_GLPI[\"proxy_user\"])) {\n                $opts += [\n                    CURLOPT_PROXYAUTH    => CURLAUTH_BASIC,\n                    CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . (new GLPIKey())->decrypt($CFG_GLPI[\"proxy_passwd\"]),\n                ];\n            }\n\n            if ($defaultport == 443) {\n                $opts += [\n                    CURLOPT_HTTPPROXYTUNNEL => 1\n                ];\n            }\n        }\n\n        curl_setopt_array($ch, $opts);\n        $content = curl_exec($ch);\n        $curl_error = curl_error($ch) ?: null;\n        curl_close($ch);\n\n        if ($curl_error !== null) {\n            if (empty($CFG_GLPI[\"proxy_name\"])) {\n               //TRANS: %s is the error string\n                $msgerr = sprintf(\n                    __('Connection failed. If you use a proxy, please configure it. (%s)'),\n                    $curl_error\n                );\n            } else {\n               //TRANS: %s is the error string\n                $msgerr = sprintf(\n                    __('Failed to connect to the proxy server (%s)'),\n                    $curl_error\n                );\n            }\n            $content = '';\n        } else if (empty($content)) {\n            $msgerr = __('No data available on the web site');\n        }\n        if (!empty($msgerr)) {\n            trigger_error($msgerr, E_USER_WARNING);\n        }\n        return $content;\n    }\n\n    /**\n     * Returns whether this is an AJAX (XMLHttpRequest) request.\n     *\n     * @return boolean whether this is an AJAX (XMLHttpRequest) request.\n     */\n    public static function isAjax()\n    {\n        return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest';\n    }\n\n\n    /**\n     * @param $need\n     * @param $tab\n     *\n     * @return boolean\n     **/\n    public static function key_exists_deep($need, $tab)\n    {\n\n        foreach ($tab as $key => $value) {\n            if ($need == $key) {\n                return true;\n            }\n\n            if (\n                is_array($value)\n                && self::key_exists_deep($need, $value)\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Manage planning posted datas (must have begin + duration or end)\n     * Compute end if duration is set\n     *\n     * @param array $data  data to process\n     *\n     * @return void\n     **/\n    public static function manageBeginAndEndPlanDates(&$data)\n    {\n\n        if (!isset($data['end'])) {\n            if (\n                isset($data['begin'])\n                && isset($data['_duration'])\n            ) {\n                $begin_timestamp = strtotime($data['begin']);\n                $data['end']     = date(\"Y-m-d H:i:s\", $begin_timestamp + $data['_duration']);\n                unset($data['_duration']);\n            }\n        }\n    }\n\n\n    /**\n     * Manage login redirection\n     *\n     * @param string $where  where to redirect ?\n     *\n     * @return void\n     **/\n    public static function manageRedirect($where)\n    {\n        global $CFG_GLPI;\n\n        if (!empty($where)) {\n            if (Session::getCurrentInterface()) {\n                // redirect to URL : URL must be rawurlencoded\n                $decoded_where = rawurldecode($where);\n                $matches = [];\n\n                // redirect to full url -> check if it's based on glpi url\n                if (preg_match('@(([^:/].+:)?//[^/]+)(/.+)?@', $decoded_where, $matches)) {\n                    if ($matches[1] !== $CFG_GLPI['url_base']) {\n                        Session::addMessageAfterRedirect('Redirection failed');\n                        if (Session::getCurrentInterface() === \"helpdesk\") {\n                            Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                        } else {\n                            Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/central.php\");\n                        }\n                    } else {\n                        Html::redirect($decoded_where);\n                    }\n                }\n\n                // Redirect to relative url -> redirect with glpi url to prevent exploits\n                if ($decoded_where[0] == '/') {\n                    $redirect_to = $CFG_GLPI[\"url_base\"] . $decoded_where;\n                   //echo $redirect_to; exit();\n                    Html::redirect($redirect_to);\n                }\n\n                $data = explode(\"_\", $where);\n                $forcetab = '';\n                // forcetab for simple items\n                if (isset($data[2])) {\n                    $forcetab = 'forcetab=' . $data[2];\n                }\n\n                switch (Session::getCurrentInterface()) {\n                    case \"helpdesk\":\n                        switch (strtolower($data[0])) {\n                              // Use for compatibility with old name\n                            case \"tracking\":\n                            case \"ticket\":\n                                $data[0] = 'Ticket';\n                             // redirect to item\n                                if (\n                                    isset($data[1])\n                                    && is_numeric($data[1])\n                                    && ($data[1] > 0)\n                                ) {\n                                    // Check entity\n                                    if (\n                                        ($item = getItemForItemtype($data[0]))\n                                        && $item->isEntityAssign()\n                                    ) {\n                                        if ($item->getFromDB($data[1])) {\n                                            if (!Session::haveAccessToEntity($item->getEntityID())) {\n                                                Session::changeActiveEntities($item->getEntityID(), 1);\n                                            }\n                                        }\n                                    }\n                                  // force redirect to timeline when timeline is enabled and viewing\n                                  // Tasks or Followups\n                                    $forcetab = str_replace('TicketFollowup$1', 'Ticket$1', $forcetab);\n                                    $forcetab = str_replace('TicketTask$1', 'Ticket$1', $forcetab);\n                                    $forcetab = str_replace('ITILFollowup$1', 'Ticket$1', $forcetab);\n                                    Html::redirect(Ticket::getFormURLWithID($data[1]) . \"&$forcetab\");\n                                } else if (!empty($data[0])) { // redirect to list\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        $searchUrl = $item->getSearchURL();\n                                        $searchUrl .= strpos($searchUrl, '?') === false ? '?' : '&';\n                                        $searchUrl .= $forcetab;\n                                        Html::redirect($searchUrl);\n                                    }\n                                }\n\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                                break;\n\n                            case \"preference\":\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/preference.php?$forcetab\");\n                                break;\n\n                            case \"reservation\":\n                                Html::redirect(Reservation::getFormURLWithID($data[1]) . \"&$forcetab\");\n                                break;\n\n                            default:\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/helpdesk.public.php\");\n                                break;\n                        }\n                        break;\n\n                    case \"central\":\n                        switch (strtolower($data[0])) {\n                            case \"preference\":\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/preference.php?$forcetab\");\n                                break;\n\n                           // Use for compatibility with old name\n                           // no break\n                            case \"tracking\":\n                                $data[0] = \"Ticket\";\n                             //var defined, use default case\n\n                            default:\n                             // redirect to item\n                                if (\n                                    !empty($data[0])\n                                    && isset($data[1])\n                                    && is_numeric($data[1])\n                                    && ($data[1] > 0)\n                                ) {\n                                    // Check entity\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        if ($item->isEntityAssign()) {\n                                            if ($item->getFromDB($data[1])) {\n                                                if (!Session::haveAccessToEntity($item->getEntityID())) {\n                                                    Session::changeActiveEntities($item->getEntityID(), 1);\n                                                }\n                                            }\n                                        }\n                                    // force redirect to timeline when timeline is enabled\n                                        $forcetab = str_replace('TicketFollowup$1', 'Ticket$1', $forcetab);\n                                        $forcetab = str_replace('TicketTask$1', 'Ticket$1', $forcetab);\n                                        $forcetab = str_replace('ITILFollowup$1', 'Ticket$1', $forcetab);\n                                        Html::redirect($item->getFormURLWithID($data[1]) . \"&$forcetab\");\n                                    }\n                                } else if (!empty($data[0])) { // redirect to list\n                                    if ($item = getItemForItemtype($data[0])) {\n                                        $searchUrl = $item->getSearchURL();\n                                        $searchUrl .= strpos($searchUrl, '?') === false ? '?' : '&';\n                                        $searchUrl .= $forcetab;\n                                        Html::redirect($searchUrl);\n                                    }\n                                }\n\n                                Html::redirect($CFG_GLPI[\"root_doc\"] . \"/front/central.php\");\n                                break;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Convert a value in byte, kbyte, megabyte etc...\n     *\n     * @param string $val  config value (like 10k, 5M)\n     *\n     * @return integer $val\n     **/\n    public static function return_bytes_from_ini_vars($val)\n    {\n\n        $val  = trim($val);\n        $last = self::strtolower($val[strlen($val) - 1]);\n        $val  = (int)$val;\n\n        switch ($last) {\n           // Le modifieur 'G' est disponible depuis PHP 5.1.0\n            case 'g':\n                $val *= 1024;\n                // no break;\n\n            case 'm':\n                $val *= 1024;\n                // no break;\n\n            case 'k':\n                $val *= 1024;\n                // no break;\n        }\n\n        return $val;\n    }\n\n\n    /**\n     * Get max upload size from php config.\n     *\n     * @return int\n     */\n    public static function getPhpUploadSizeLimit(): int\n    {\n        $post_max   = Toolbox::return_bytes_from_ini_vars(ini_get(\"post_max_size\"));\n        $upload_max = Toolbox::return_bytes_from_ini_vars(ini_get(\"upload_max_filesize\"));\n        $max_size   = $post_max > 0 ? min($post_max, $upload_max) : $upload_max;\n        return $max_size;\n    }\n\n    /**\n     * Parse imap open connect string\n     *\n     * @since 0.84\n     *\n     * @param string  $value      connect string\n     * @param boolean $forceport  force compute port if not set\n     *\n     * @return array  parsed arguments (address, port, mailbox, type, ssl, tls, validate-cert\n     *                norsh, secure and debug) : options are empty if not set\n     *                and options have boolean values if set\n     **/\n    public static function parseMailServerConnectString($value, $forceport = false)\n    {\n\n        $tab = [];\n        if (strstr($value, \":\")) {\n            $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/:.*/\", \"\", $value));\n            $tab['port']    = preg_replace(\"/.*:/\", \"\", preg_replace(\"/\\/.*/\", \"\", $value));\n        } else {\n            if (strstr($value, \"/\")) {\n                $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/\\/.*/\", \"\", $value));\n            } else {\n                $tab['address'] = str_replace(\"{\", \"\", preg_replace(\"/}.*/\", \"\", $value));\n            }\n            $tab['port'] = \"\";\n        }\n        $tab['mailbox'] = preg_replace(\"/.*}/\", \"\", $value);\n\n       // type follows first found \"/\" and ends on next \"/\" (or end of server string)\n       // server string is surrounded by \"{}\" and can be followed by a folder name\n       // i.e. \"{mail.domain.org/imap/ssl}INBOX\", or \"{mail.domain.org/pop}\"\n        $type = preg_replace('/^\\{[^\\/]+\\/([^\\/]+)(?:\\/.+)*\\}.*/', '$1', $value);\n        $tab['type'] = in_array($type, array_keys(self::getMailServerProtocols())) ? $type : '';\n\n        $tab['ssl'] = false;\n        if (strstr($value, \"/ssl\")) {\n            $tab['ssl'] = true;\n        }\n\n        if ($forceport && empty($tab['port'])) {\n            if ($tab['type'] == 'pop') {\n                if ($tab['ssl']) {\n                    $tab['port'] = 110;\n                } else {\n                    $tab['port'] = 995;\n                }\n            }\n            if ($tab['type'] = 'imap') {\n                if ($tab['ssl']) {\n                    $tab['port'] = 993;\n                } else {\n                    $tab['port'] = 143;\n                }\n            }\n        }\n        $tab['tls'] = '';\n        if (strstr($value, \"/tls\")) {\n            $tab['tls'] = true;\n        }\n        if (strstr($value, \"/notls\")) {\n            $tab['tls'] = false;\n        }\n        $tab['validate-cert'] = '';\n        if (strstr($value, \"/validate-cert\")) {\n            $tab['validate-cert'] = true;\n        }\n        if (strstr($value, \"/novalidate-cert\")) {\n            $tab['validate-cert'] = false;\n        }\n        $tab['norsh'] = '';\n        if (strstr($value, \"/norsh\")) {\n            $tab['norsh'] = true;\n        }\n        $tab['secure'] = '';\n        if (strstr($value, \"/secure\")) {\n            $tab['secure'] = true;\n        }\n        $tab['debug'] = '';\n        if (strstr($value, \"/debug\")) {\n            $tab['debug'] = true;\n        }\n\n        return $tab;\n    }\n\n\n    /**\n     * Display a mail server configuration form\n     *\n     * @param string $value  host connect string ex {localhost:993/imap/ssl}INBOX\n     *\n     * @return string  type of the server (imap/pop)\n     **/\n    public static function showMailServerConfig($value)\n    {\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n\n        $tab = Toolbox::parseMailServerConnectString($value);\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Server') . \"</td>\";\n        echo \"<td><input size='30' class='form-control' type='text' name='mail_server' value=\\\"\" . $tab['address'] . \"\\\">\";\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Connection options') . \"</td><td>\";\n        $values = [];\n        $protocols = Toolbox::getMailServerProtocols();\n        foreach ($protocols as $key => $params) {\n            $values['/' . $key] = $params['label'];\n        }\n        $svalue = (!empty($tab['type']) ? '/' . $tab['type'] : '');\n\n        Dropdown::showFromArray(\n            'server_type',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/ssl' => __('SSL')\n        ];\n\n        $svalue = ($tab['ssl'] ? '/ssl' : '');\n\n        Dropdown::showFromArray(\n            'server_ssl',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/tls' => __('TLS'),\n                     //TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/notls' => __('NO-TLS'),\n        ];\n\n        $svalue = '';\n        if (($tab['tls'] === true)) {\n            $svalue = '/tls';\n        }\n        if (($tab['tls'] === false)) {\n            $svalue = '/notls';\n        }\n\n        Dropdown::showFromArray(\n            'server_tls',\n            $values,\n            ['value'               => $svalue,\n                'width'               => '14%',\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/novalidate-cert' => __('NO-VALIDATE-CERT'),\n                     //TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/validate-cert' => __('VALIDATE-CERT'),\n        ];\n\n        $svalue = '';\n        if (($tab['validate-cert'] === false)) {\n            $svalue = '/novalidate-cert';\n        }\n        if (($tab['validate-cert'] === true)) {\n            $svalue = '/validate-cert';\n        }\n\n        Dropdown::showFromArray(\n            'server_cert',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/norsh' => __('NORSH')\n        ];\n\n        $svalue = ($tab['norsh'] === true ? '/norsh' : '');\n\n        Dropdown::showFromArray(\n            'server_rsh',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/secure' => __('SECURE')\n        ];\n\n        $svalue = ($tab['secure'] === true ? '/secure' : '');\n\n        Dropdown::showFromArray(\n            'server_secure',\n            $values,\n            ['value'               => $svalue,\n                'display_emptychoice' => true\n            ]\n        );\n\n        $values = [//TRANS: imap_open option see http://www.php.net/manual/en/function.imap-open.php\n            '/debug' => __('DEBUG')\n        ];\n\n        $svalue = ($tab['debug'] === true ? '/debug' : '');\n\n        Dropdown::showFromArray(\n            'server_debug',\n            $values,\n            ['value'               => $svalue,\n                'width'               => '12%',\n                'display_emptychoice' => true\n            ]\n        );\n\n        echo \"<input type=hidden name=imap_string value='\" . $value . \"'>\";\n        echo \"</td></tr>\\n\";\n\n        if ($tab['type'] != 'pop') {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Incoming mail folder (optional, often INBOX)') . \"</td>\";\n            echo \"<td>\";\n            echo \"<div class='btn-group btn-group-sm'>\";\n            echo \"<input size='30' class='form-control' type='text' id='server_mailbox' name='server_mailbox' value=\\\"\" . $tab['mailbox'] . \"\\\" >\";\n            echo \"<div class='btn btn-outline-secondary get-imap-folder'>\";\n            echo \"<i class='fa fa-list pointer'></i>\";\n            echo \"</div>\";\n            echo \"</div></td></tr>\\n\";\n        }\n\n       //TRANS: for mail connection system\n        echo \"<tr class='tab_bg_1'><td>\" . __('Port (optional)') . \"</td>\";\n        echo \"<td><input size='10' class='form-control' type='text' name='server_port' value='\" . $tab['port'] . \"'></td></tr>\\n\";\n        if (empty($value)) {\n            $value = \"&nbsp;\";\n        }\n       //TRANS: for mail connection system\n        echo \"<tr class='tab_bg_1'><td>\" . __('Connection string') . \"</td>\";\n        echo \"<td class='b'>$value</td></tr>\\n\";\n\n        return $tab['type'];\n    }\n\n\n    /**\n     * @param array $input\n     *\n     * @return string\n     **/\n    public static function constructMailServerConfig($input)\n    {\n\n        $out = \"\";\n        if (isset($input['mail_server']) && !empty($input['mail_server'])) {\n            $out .= \"{\" . $input['mail_server'];\n        } else {\n            return $out;\n        }\n        if (isset($input['server_port']) && !empty($input['server_port'])) {\n            $out .= \":\" . $input['server_port'];\n        }\n        if (isset($input['server_type']) && !empty($input['server_type'])) {\n            $out .= $input['server_type'];\n        }\n        if (isset($input['server_ssl']) && !empty($input['server_ssl'])) {\n            $out .= $input['server_ssl'];\n        }\n        if (isset($input['server_cert']) && !empty($input['server_cert'])) {\n            $out .= $input['server_cert'];\n        }\n        if (isset($input['server_tls']) && !empty($input['server_tls'])) {\n            $out .= $input['server_tls'];\n        }\n\n        if (isset($input['server_rsh']) && !empty($input['server_rsh'])) {\n            $out .= $input['server_rsh'];\n        }\n        if (isset($input['server_secure']) && !empty($input['server_secure'])) {\n            $out .= $input['server_secure'];\n        }\n        if (isset($input['server_debug']) && !empty($input['server_debug'])) {\n            $out .= $input['server_debug'];\n        }\n        $out .= \"}\";\n        if (isset($input['server_mailbox']) && !empty($input['server_mailbox'])) {\n            $out .= $input['server_mailbox'];\n        }\n\n        return $out;\n    }\n\n    /**\n     * Retuns available mail servers protocols.\n     *\n     * For each returned element:\n     *  - key is type used in connection string;\n     *  - 'label' field is the label to display;\n     *  - 'protocol_class' field is the protocol class to use (see Laminas\\Mail\\Protocol\\Imap | Laminas\\Mail\\Protocol\\Pop3);\n     *  - 'storage_class' field is the storage class to use (see Laminas\\Mail\\Storage\\Imap | Laminas\\Mail\\Storage\\Pop3).\n     *\n     * @return array\n     */\n    private static function getMailServerProtocols(): array\n    {\n        $protocols = [\n            'imap' => [\n            //TRANS: IMAP mail server protocol\n                'label'    => __('IMAP'),\n                'protocol' => 'Laminas\\Mail\\Protocol\\Imap',\n                'storage'  => 'Laminas\\Mail\\Storage\\Imap',\n            ],\n            'pop'  => [\n            //TRANS: POP3 mail server protocol\n                'label'    => __('POP'),\n                'protocol' => 'Laminas\\Mail\\Protocol\\Pop3',\n                'storage'  => 'Laminas\\Mail\\Storage\\Pop3',\n            ]\n        ];\n\n        $additionnal_protocols = Plugin::doHookFunction('mail_server_protocols', []);\n        if (is_array($additionnal_protocols)) {\n            foreach ($additionnal_protocols as $key => $additionnal_protocol) {\n                if (array_key_exists($key, $protocols)) {\n                    trigger_error(\n                        sprintf('Protocol \"%s\" is already defined and cannot be overwritten.', $key),\n                        E_USER_WARNING\n                    );\n                     continue; // already exists, do not overwrite\n                }\n\n                if (\n                    !array_key_exists('label', $additionnal_protocol)\n                    || !array_key_exists('protocol', $additionnal_protocol)\n                    || !array_key_exists('storage', $additionnal_protocol)\n                ) {\n                    trigger_error(\n                        sprintf('Invalid specs for protocol \"%s\".', $key),\n                        E_USER_WARNING\n                    );\n                    continue;\n                }\n                $protocols[$key] = $additionnal_protocol;\n            }\n        } else {\n            trigger_error(\n                'Invalid value returned by \"mail_server_protocols\" hook.',\n                E_USER_WARNING\n            );\n        }\n\n        return $protocols;\n    }\n\n    /**\n     * Returns protocol instance for given mail server type.\n     *\n     * Class should implements Glpi\\Mail\\Protocol\\ProtocolInterface\n     * or should be \\Laminas\\Mail\\Protocol\\Imap|\\Laminas\\Mail\\Protocol\\Pop3 for native protocols.\n     *\n     * @param string $protocol_type\n     *\n     * @return null|\\Glpi\\Mail\\Protocol\\ProtocolInterface|\\Laminas\\Mail\\Protocol\\Imap|\\Laminas\\Mail\\Protocol\\Pop3\n     */\n    public static function getMailServerProtocolInstance(string $protocol_type)\n    {\n        $protocols = self::getMailServerProtocols();\n        if (array_key_exists($protocol_type, $protocols)) {\n            $protocol = $protocols[$protocol_type]['protocol'];\n            if (is_callable($protocol)) {\n                return call_user_func($protocol);\n            } else if (\n                class_exists($protocol)\n                && (is_a($protocol, ProtocolInterface::class, true)\n                 || is_a($protocol, \\Laminas\\Mail\\Protocol\\Imap::class, true)\n                 || is_a($protocol, \\Laminas\\Mail\\Protocol\\Pop3::class, true))\n            ) {\n                return new $protocol();\n            } else {\n                trigger_error(\n                    sprintf('Invalid specs for protocol \"%s\".', $protocol_type),\n                    E_USER_WARNING\n                );\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Returns storage instance for given mail server type.\n     *\n     * Class should extends \\Laminas\\Mail\\Storage\\AbstractStorage.\n     *\n     * @param string $protocol_type\n     * @param array  $params         Storage constructor params, as defined in AbstractStorage\n     *\n     * @return null|AbstractStorage\n     */\n    public static function getMailServerStorageInstance(string $protocol_type, array $params): ?AbstractStorage\n    {\n        $protocols = self::getMailServerProtocols();\n        if (array_key_exists($protocol_type, $protocols)) {\n            $storage = $protocols[$protocol_type]['storage'];\n            if (is_callable($storage)) {\n                return call_user_func($storage, $params);\n            } else if (class_exists($storage) && is_a($storage, AbstractStorage::class, true)) {\n                return new $storage($params);\n            } else {\n                trigger_error(\n                    sprintf('Invalid specs for protocol \"%s\".', $protocol_type),\n                    E_USER_WARNING\n                );\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getDaysOfWeekArray()\n    {\n\n        $tab = [];\n\n        $tab[0] = __(\"Sunday\");\n        $tab[1] = __(\"Monday\");\n        $tab[2] = __(\"Tuesday\");\n        $tab[3] = __(\"Wednesday\");\n        $tab[4] = __(\"Thursday\");\n        $tab[5] = __(\"Friday\");\n        $tab[6] = __(\"Saturday\");\n\n        return $tab;\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getMonthsOfYearArray()\n    {\n\n        $tab = [];\n\n        $tab[1]  = __(\"January\");\n        $tab[2]  = __(\"February\");\n        $tab[3]  = __(\"March\");\n        $tab[4]  = __(\"April\");\n        $tab[5]  = __(\"May\");\n        $tab[6]  = __(\"June\");\n        $tab[7]  = __(\"July\");\n        $tab[8]  = __(\"August\");\n        $tab[9]  = __(\"September\");\n        $tab[10] = __(\"October\");\n        $tab[11] = __(\"November\");\n        $tab[12] = __(\"December\");\n\n        return $tab;\n    }\n\n\n    /**\n     * Do a in_array search comparing string using strcasecmp\n     *\n     * @since 0.84\n     *\n     * @param string $string  string to search\n     * @param array  $data    array to search in\n     *\n     * @return boolean  string found ?\n     **/\n    public static function inArrayCaseCompare($string, $data = [])\n    {\n\n        if (count($data)) {\n            foreach ($data as $tocheck) {\n                if (strcasecmp($string, $tocheck) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Clean integer string value (strip all chars not - and spaces )\n     *\n     * @since versin 0.83.5\n     *\n     * @param string  $integer  integer string\n     *\n     * @return string  clean integer\n     **/\n    public static function cleanInteger($integer)\n    {\n        return preg_replace(\"/[^0-9-]/\", \"\", (string)$integer);\n    }\n\n\n    /**\n     * Clean decimal string value (strip all chars not - and spaces )\n     *\n     * @since versin 0.83.5\n     *\n     * @param string $decimal  float string\n     *\n     * @return string  clean decimal\n     **/\n    public static function cleanDecimal($decimal)\n    {\n        return preg_replace(\"/[^0-9\\.-]/\", \"\", $decimal);\n    }\n\n\n    /**\n     * Clean new lines of a string\n     *\n     * @since versin 0.85\n     *\n     * @param string $string  string to clean\n     *\n     * @return string  clean string\n     **/\n    public static function cleanNewLines($string)\n    {\n\n        $string = preg_replace(\"/\\r\\n/\", \" \", $string);\n        $string = preg_replace(\"/\\n/\", \" \", $string);\n        $string = preg_replace(\"/\\r/\", \" \", $string);\n        return $string;\n    }\n\n\n    /**\n     * Create the GLPI default schema\n     *\n     * @param string  $lang Language to install\n     * @param DBmysql $db   Database instance to use, will fallback to a new instance of DB if null\n     *\n     * @return void\n     *\n     * @since 9.1\n     * @since 9.4.7 Added $db parameter\n     **/\n    public static function createSchema($lang = 'en_GB', DBmysql $database = null)\n    {\n        global $DB;\n\n        if (null === $database) {\n           // Use configured DB if no $db is defined in parameters\n            include_once(GLPI_CONFIG_DIR . \"/config_db.php\");\n            $database = new DB();\n        }\n\n       // Set global $DB as it is used in \"Config::setConfigurationValues()\" just after schema creation\n        $DB = $database;\n\n        $normalized_nersion = VersionParser::getNormalizedVersion(GLPI_VERSION, false);\n        if (!$DB->runFile(sprintf('%s/install/mysql/glpi-%s-empty.sql', GLPI_ROOT, $normalized_nersion))) {\n            echo \"Errors occurred inserting default database\";\n        } else {\n           //dataset\n            Session::loadLanguage($lang, false); // Load default language locales to translate empty data\n            $tables = require_once(__DIR__ . '/../install/empty_data.php');\n            Session::loadLanguage('', false); // Load back session language\n\n            foreach ($tables as $table => $data) {\n                $reference = array_replace(\n                    $data[0],\n                    array_fill_keys(\n                        array_keys($data[0]),\n                        new QueryParam()\n                    )\n                );\n\n                $stmt = $DB->prepare($DB->buildInsert($table, $reference));\n                if (false === $stmt) {\n                     $msg = \"Error preparing statement in table $table\";\n                     throw new \\RuntimeException($msg);\n                }\n\n                $types = str_repeat('s', count($data[0]));\n                foreach ($data as $row) {\n                    $res = $stmt->bind_param($types, ...array_values($row));\n                    if (false === $res) {\n                        $msg = \"Error binding params in table $table\\n\";\n                        $msg .= print_r($row, true);\n                        throw new \\RuntimeException($msg);\n                    }\n                    $res = $stmt->execute();\n                    if (false === $res) {\n                        $msg = $stmt->error;\n                        $msg .= \"\\nError execution statement in table $table\\n\";\n                        $msg .= print_r($row, true);\n                        throw new \\RuntimeException($msg);\n                    }\n                    if (!isCommandLine()) {\n                         // Flush will prevent proxy to timeout as it will receive data.\n                         // Flush requires a content to be sent, so we sent spaces as multiple spaces\n                         // will be shown as a single one on browser.\n                         echo ' ';\n                         Html::glpi_flush();\n                    }\n                }\n            }\n\n           //rules\n            RuleImportAsset::initRules();\n\n           // update default language\n            Config::setConfigurationValues(\n                'core',\n                [\n                    'language'      => $lang,\n                    'version'       => GLPI_VERSION,\n                    'dbversion'     => GLPI_SCHEMA_VERSION,\n                ]\n            );\n\n            if (defined('GLPI_SYSTEM_CRON')) {\n               // Downstream packages may provide a good system cron\n                $DB->updateOrDie(\n                    'glpi_crontasks',\n                    [\n                        'mode'   => 2\n                    ],\n                    [\n                        'name'      => ['!=', 'watcher'],\n                        'allowmode' => ['&', 2]\n                    ],\n                    '4203'\n                );\n            }\n        }\n    }\n\n\n    /**\n     * Save a configuration file\n     *\n     * @since 0.84\n     *\n     * @param string $name        config file name\n     * @param string $content     config file content\n     * @param string $config_dir  configuration directory to write on\n     *\n     * @return boolean\n     **/\n    public static function writeConfig($name, $content, string $config_dir = GLPI_CONFIG_DIR)\n    {\n\n        $name = $config_dir . '/' . $name;\n        $fp   = fopen($name, 'wt');\n        if ($fp) {\n            $fw = fwrite($fp, $content);\n            fclose($fp);\n            if (function_exists('opcache_invalidate')) {\n                /* Invalidate Zend OPcache to ensure saved version used */\n                opcache_invalidate($name, true);\n            }\n            return ($fw > 0);\n        }\n        return false;\n    }\n\n\n    /**\n     * Prepare array passed on an input form\n     *\n     * @param array $value  passed array\n     *\n     * @return string  encoded array\n     *\n     * @since 0.83.91\n     **/\n    public static function prepareArrayForInput(array $value)\n    {\n        return base64_encode(json_encode($value));\n    }\n\n\n    /**\n     * Decode array passed on an input form\n     *\n     * @param string $value  encoded value\n     *\n     * @return string  decoded array\n     *\n     * @since 0.83.91\n     **/\n    public static function decodeArrayFromInput($value)\n    {\n\n        if ($dec = base64_decode($value)) {\n            if ($ret = json_decode($dec, true)) {\n                return $ret;\n            }\n        }\n        return [];\n    }\n\n\n    /**\n     * Check valid referer accessing GLPI\n     *\n     * @since 0.84.2\n     *\n     * @return void  display error if not permit\n     **/\n    public static function checkValidReferer()\n    {\n        global $CFG_GLPI;\n\n        $isvalidReferer = true;\n\n        if (!isset($_SERVER['HTTP_REFERER'])) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"No HTTP_REFERER found in request. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        } else if (!is_array($url = parse_url($_SERVER['HTTP_REFERER']))) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"Error when parsing HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (\n            !isset($url['host'])\n            || (($url['host'] != $_SERVER['SERVER_NAME'])\n            && (!isset($_SERVER['HTTP_X_FORWARDED_SERVER'])\n               || ($url['host'] != $_SERVER['HTTP_X_FORWARDED_SERVER'])))\n        ) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"None or Invalid host in HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (\n            !isset($url['path'])\n            || (!empty($CFG_GLPI['root_doc'])\n            && (strpos($url['path'], $CFG_GLPI['root_doc']) !== 0))\n        ) {\n            if ($_SESSION['glpi_use_mode'] == Session::DEBUG_MODE) {\n                Html::displayErrorAndDie(\n                    __(\"None or Invalid path in HTTP_REFERER. Reload previous page before doing action again.\"),\n                    true\n                );\n                $isvalidReferer = false;\n            }\n        }\n\n        if (!$isvalidReferer && $_SESSION['glpi_use_mode'] != Session::DEBUG_MODE) {\n            Html::displayErrorAndDie(\n                __(\"The action you have requested is not allowed. Reload previous page before doing action again.\"),\n                true\n            );\n        }\n    }\n\n\n    /**\n     * Retrieve the mime type of a file\n     *\n     * @since 0.85.5\n     *\n     * @param string         $file  path of the file\n     * @param boolean|string $type  check if $file is the correct type\n     *\n     * @return boolean|string (if $type not given) else boolean\n     *\n     **/\n    public static function getMime($file, $type = false)\n    {\n\n        static $finfo = null;\n\n        if (is_null($finfo)) {\n            $finfo = new finfo(FILEINFO_MIME_TYPE);\n        }\n        $mime = $finfo->file($file);\n        if ($type) {\n            $parts = explode('/', $mime, 2);\n            return ($parts[0] == $type);\n        }\n        return ($mime);\n    }\n\n\n    /**\n     * Summary of in_array_recursive\n     *\n     * @since 9.1\n     *\n     * @param mixed $needle\n     * @param array $haystack\n     * @param bool  $strict: If strict is set to TRUE then it will also\n     *              check the types of the needle in the haystack.\n     * @return bool\n     */\n    public static function in_array_recursive($needle, $haystack, $strict = false)\n    {\n\n        $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));\n\n        foreach ($it as $element) {\n            if ($strict) {\n                if ($element === $needle) {\n                    return true;\n                }\n            } else {\n                if ($element == $needle) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Slugify\n     *\n     * @param string $string String to slugify\n     * @param string $prefix Prefix to use (anchors cannot begin with a number)\n     *\n     * @return string\n     */\n    public static function slugify($string, $prefix = 'slug_')\n    {\n        $string = transliterator_transliterate(\"Any-Latin; Latin-ASCII; [^a-zA-Z0-9\\.\\ -_] Remove;\", $string);\n        $string = str_replace(' ', '-', self::strtolower($string, 'UTF-8'));\n        $string = preg_replace('~[^0-9a-z_\\.]+~i', '-', $string);\n        $string = trim($string, '-');\n        if ($string == '') {\n           //prevent empty slugs; see https://github.com/glpi-project/glpi/issues/2946\n           //harcoded prefix string because html @id must begin with a letter\n            $string = 'nok_' . Toolbox::getRandomString(10);\n        } else if (ctype_digit(substr($string, 0, 1))) {\n           //starts with a number; not ok to be used as an html id attribute\n            $string = $prefix . $string;\n        }\n        return $string;\n    }\n\n    /**\n     * Find documents data matching the tags found in the string\n     * Tags are deduplicated\n     *\n     * @param string $content_text String to search tags from\n     *\n     * @return array data from documents having tags found\n     */\n    public static function getDocumentsFromTag(string $content_text): array\n    {\n        preg_match_all(\n            '/' . Document::getImageTag('(([a-z0-9]+|[\\.\\-]?)+)') . '/',\n            $content_text,\n            $matches,\n            PREG_PATTERN_ORDER\n        );\n        if (!isset($matches[1]) || count($matches[1]) == 0) {\n            return [];\n        }\n\n        $document = new Document();\n        return $document->find(['tag' => array_unique($matches[1])]);\n    }\n\n    /**\n     * Convert tag to image\n     *\n     * @since 9.2\n     *\n     * @param string $content_text   text content of input\n     * @param CommonDBTM $item       Glpi item where to convert image tag to image document\n     * @param array $doc_data        list of filenames and tags\n     *\n     * @return string                the $content_text param after parsing\n     **/\n    public static function convertTagToImage($content_text, CommonDBTM $item, $doc_data = [])\n    {\n        global $CFG_GLPI;\n\n        $document = new Document();\n        $matches  = [];\n       // If no doc data available we match all tags in content\n        if (!count($doc_data)) {\n            $doc_data = Toolbox::getDocumentsFromTag($content_text);\n        }\n\n        if (count($doc_data)) {\n            $base_path = $CFG_GLPI['root_doc'];\n\n            $was_html_encoded = Sanitizer::isHtmlEncoded($content_text);\n            $was_escaped      = Sanitizer::isDbEscaped($content_text);\n            if ($was_html_encoded) {\n                $content_text = Sanitizer::decodeHtmlSpecialChars($content_text);\n            }\n            if ($was_escaped) {\n                $content_text = Sanitizer::dbUnescape($content_text);\n            }\n\n            foreach ($doc_data as $id => $image) {\n                if (isset($image['tag'])) {\n                   // Add only image files : try to detect mime type\n                    if (\n                        $document->getFromDB($id)\n                        && strpos($document->fields['mime'], 'image/') !== false\n                    ) {\n                        // append object reference in image link\n                        $linked_object = null;\n                        if (\n                              !($item instanceof CommonITILObject)\n                              && isset($item->input['_job'])\n                              && $item->input['_job'] instanceof CommonITILObject\n                        ) {\n                            $linked_object = $item->input['_job'];\n                        } else if ($item instanceof CommonDBTM) {\n                            $linked_object = $item;\n                        }\n                        $object_url_param = null !== $linked_object\n                        ? sprintf('&itemtype=%s&items_id=%s', $linked_object->getType(), $linked_object->fields['id'])\n                        : \"\";\n                        $img = \"<img alt='\" . $image['tag'] . \"' src='\" . $base_path .\n                          \"/front/document.send.php?docid=\" . $id . $object_url_param . \"'/>\";\n\n                      // 1 - Replace direct tag (with prefix and suffix) by the image\n                        $content_text = preg_replace(\n                            '/' . Document::getImageTag($image['tag']) . '/',\n                            $img,\n                            $content_text\n                        );\n\n                         // 2 - Replace img with tag in id attribute by the image\n                        $regex = '/<img[^>]+' . preg_quote($image['tag'], '/') . '[^<]+>/im';\n                        preg_match_all($regex, $content_text, $matches);\n                        foreach ($matches[0] as $match_img) {\n                            //retrieve dimensions\n                            $width = $height = null;\n                            $attributes = [];\n                            preg_match_all('/(width|height)=\"([^\"]*)\"/i', $match_img, $attributes);\n                            if (isset($attributes[1][0])) {\n                                ${$attributes[1][0]} = $attributes[2][0];\n                            }\n                            if (isset($attributes[1][1])) {\n                                ${$attributes[1][1]} = $attributes[2][1];\n                            }\n\n                            if ($width == null || $height == null) {\n                                $path = GLPI_DOC_DIR . \"/\" . $image['filepath'];\n                                $img_infos  = getimagesize($path);\n                                $width = $img_infos[0];\n                                $height = $img_infos[1];\n                            }\n\n                            // replace image\n                            $new_image =  Html::getImageHtmlTagForDocument(\n                                $id,\n                                $width,\n                                $height,\n                                true,\n                                $object_url_param\n                            );\n                            if (empty($new_image)) {\n                                  $new_image = '#' . $image['tag'] . '#';\n                            }\n                            $content_text = str_replace(\n                                $match_img,\n                                $new_image,\n                                $content_text\n                            );\n                            $content_text = $content_text;\n                        }\n\n                        // If the tag is from another ticket : link document to ticket\n                        if (\n                            $item instanceof Ticket\n                            && $item->getID()\n                            && isset($image['tickets_id'])\n                            && $image['tickets_id'] != $item->getID()\n                        ) {\n                            $docitem = new Document_Item();\n                            $docitem->add(['documents_id'  => $image['id'],\n                                '_do_notif'     => false,\n                                '_disablenotif' => true,\n                                'itemtype'      => $item->getType(),\n                                'items_id'      => $item->fields['id']\n                            ]);\n                        }\n                    } else {\n                      // Remove tag\n                        $content_text = preg_replace(\n                            '/' . Document::getImageTag($image['tag']) . '/',\n                            '',\n                            $content_text\n                        );\n                    }\n                }\n            }\n\n            if ($was_html_encoded) {\n                $content_text = Sanitizer::encodeHtmlSpecialChars($content_text);\n            }\n            if ($was_escaped) {\n                $content_text = Sanitizer::dbEscape($content_text);\n            }\n        }\n\n        return $content_text;\n    }\n\n    /**\n     * Delete tag or image from ticket content\n     *\n     * @since 9.2\n     *\n     * @param string $content   html content of input\n     * @param array $tags       list of tags to clen\n     *\n     * @return string  html content\n     **/\n    public static function cleanTagOrImage($content, array $tags)\n    {\n        $content = Sanitizer::unsanitize($content);\n\n        foreach ($tags as $tag) {\n            $content = preg_replace(\"/<img.*alt=['|\\\"]\" . $tag . \"['|\\\"][^>]*\\>/\", \"<p></p>\", $content);\n        }\n\n        $content = Sanitizer::sanitize($content);\n\n        return $content;\n    }\n\n    /**\n     * Decode JSON in GLPI\n     * Because json can have been modified from Sanitizer\n     *\n     * @param string $encoded Encoded JSON\n     * @param boolean $assoc  assoc parameter of json_encode native function\n     *\n     * @return mixed\n     */\n    public static function jsonDecode($encoded, $assoc = false)\n    {\n        if (!is_string($encoded)) {\n            self::log(null, Logger::NOTICE, ['Only strings can be json to decode!']);\n            return $encoded;\n        }\n\n        $json_data = null;\n        if (self::isJSON($encoded)) {\n            $json_data = $encoded;\n        } else {\n            //something went wrong... Try to unsanitize before decoding.\n            $raw_encoded = Sanitizer::unsanitize($encoded);\n            if (self::isJSON($raw_encoded)) {\n                $json_data = $raw_encoded;\n            }\n        }\n\n        if ($json_data === null) {\n            self::log(null, Logger::NOTICE, ['Unable to decode JSON string! Is this really JSON?']);\n            return $encoded;\n        }\n\n        $json = json_decode($json_data, $assoc);\n        return $json;\n    }\n\n\n    /**\n     * **Fast** JSON detection of a given var\n     * From https://stackoverflow.com/a/45241792\n     *\n     * @param mixed the var to test\n     *\n     * @return bool\n     */\n    public static function isJSON($json): bool\n    {\n        // Numeric strings are always valid JSON.\n        if (is_numeric($json)) {\n            return true;\n        }\n\n        // A non-string value can never be a JSON string.\n        if (!is_string($json)) {\n            return false;\n        }\n\n        $json = trim($json);\n        // Any non-numeric JSON string must be longer than 2 characters.\n        if (strlen($json) < 2) {\n            return false;\n        }\n\n        // \"null\" is valid JSON string.\n        if ('null' === $json) {\n            return true;\n        }\n\n        // \"true\" and \"false\" are valid JSON strings.\n        if ('true' === $json) {\n            return true;\n        }\n        if ('false' === $json) {\n            return false;\n        }\n\n        // Any other JSON string has to be wrapped in {}, [] or \"\".\n        if ('{' != $json[0] && '[' != $json[0] && '\"' != $json[0]) {\n            return false;\n        }\n\n        // Verify that the trailing character matches the first character.\n        $last_char = $json[strlen($json) - 1];\n        if ('{' == $json[0] && '}' != $last_char) {\n            return false;\n        }\n        if ('[' == $json[0] && ']' != $last_char) {\n            return false;\n        }\n        if ('\"' == $json[0] && '\"' != $last_char) {\n            return false;\n        }\n\n        // See if the string contents are valid JSON.\n        return null !== json_decode($json);\n    }\n\n    /**\n     * Checks if a string starts with another one\n     *\n     * @since 9.1.5\n     *\n     * @param string $haystack String to check\n     * @param string $needle   String to find\n     *\n     * @return boolean\n     *\n     * @deprecated 10.0.0\n     */\n    public static function startsWith($haystack, $needle)\n    {\n        Toolbox::deprecated('Use native str_starts_with() function.');\n        return str_starts_with($haystack, $needle);\n    }\n\n    /**\n     * Checks if a string starts with another one\n     *\n     * @since 9.2\n     *\n     * @param string $haystack String to check\n     * @param string $needle   String to find\n     *\n     * @return boolean\n     *\n     * @deprecated 10.0.0\n     */\n    public static function endsWith($haystack, $needle)\n    {\n        Toolbox::deprecated('Use native str_ends_with() function.');\n        return str_ends_with($haystack, $needle);\n    }\n\n    /**\n     * gets the IP address of the client\n     *\n     * @since 9.2\n     *\n     * @return string the IP address\n     */\n    public static function getRemoteIpAddress()\n    {\n        return $_SERVER[\"REMOTE_ADDR\"];\n    }\n\n    /**\n     * Get available date formats\n     *\n     * @since 9.2\n     *\n     * @param string $type Type for (either 'php' or 'js')\n     *\n     * @return array\n     */\n    public static function getDateFormats($type)\n    {\n        $formats = [];\n        switch ($type) {\n            case 'js':\n                $formats = [\n                    0 => 'Y-m-d',\n                    1 => 'd-m-Y',\n                    2 => 'm-d-Y'\n                ];\n                break;\n            case 'php':\n                $formats = [\n                    0 => __('YYYY-MM-DD'),\n                    1 => __('DD-MM-YYYY'),\n                    2 => __('MM-DD-YYYY')\n                ];\n                break;\n            default:\n                throw new \\RuntimeException(\"Unknown type $type to get date formats.\");\n        }\n        return $formats;\n    }\n\n    /**\n     * Get current date format\n     *\n     * @since 9.2\n     *\n     * @param string $type Type for (either 'php', 'js')\n     *\n     * @return string\n     */\n    public static function getDateFormat($type)\n    {\n        $formats = self::getDateFormats($type);\n        $format = $formats[$_SESSION[\"glpidate_format\"] ?? 0];\n        return $format;\n    }\n\n    /**\n     * Get current date format for php\n     *\n     * @since 9.2\n     *\n     * @return string\n     */\n    public static function phpDateFormat()\n    {\n        return self::getDateFormat('php');\n    }\n\n    /**\n     * Get available date formats for php\n     *\n     * @since 9.2\n     *\n     * @return array\n     */\n    public static function phpDateFormats()\n    {\n        return self::getDateFormats('php');\n    }\n\n    /**\n     * Get current date format for javascript\n     *\n     * @since 9.2\n     *\n     * @return string\n     */\n    public static function jsDateFormat()\n    {\n        return self::getDateFormat('js');\n    }\n\n    /**\n     * Get available date formats for javascript\n     *\n     * @since 9.2\n     *\n     * @return array\n     */\n    public static function jsDateFormats()\n    {\n        return self::getDateFormats('js');\n    }\n\n    /**\n     * Format a web link adding http:// if missing\n     *\n     * @param string $link link to format\n     *\n     * @return string formatted link.\n     **/\n    public static function formatOutputWebLink($link)\n    {\n        if (!preg_match(\"/^https?/\", $link)) {\n            return \"http://\" . $link;\n        }\n        return $link;\n    }\n\n    /**\n     * Convert a integer index into an excel like alpha index (A, B, ..., AA, AB, ...)\n     * @since 9.3\n     * @param  integer $index the numeric index\n     * @return string         excel like string index\n     */\n    public static function getBijectiveIndex($index = 0)\n    {\n        $bij_str = \"\";\n        while ((int) $index > 0) {\n            $index--;\n            $bij_str = chr($index % 26 + ord(\"A\")) . $bij_str;\n            $index = floor($index / 26);\n        }\n        return $bij_str;\n    }\n\n    /**\n     * Get HTML content to display (cleaned)\n     *\n     * @since 9.1.8\n     *\n     * @param string $content Content to display\n     *\n     * @return string\n     *\n     * @deprecated 10.0.0\n     */\n    public static function getHtmlToDisplay($content)\n    {\n        Toolbox::deprecated('Use Glpi\\Toolbox\\RichText::getEnhancedHtml()');\n\n        $content = Toolbox::unclean_cross_side_scripting_deep(\n            $content\n        );\n\n        $content = Html::clean($content, false, 1);\n\n       // If content does not contain <br> or <p> html tag, use nl2br\n       // Required to correctly render linebreaks from \"simple text mode\" from GLPI prior to 9.4.0.\n        if (!preg_match('/<br\\s?\\/?>/', $content) && !preg_match('/<p>/', $content)) {\n            $content = nl2br($content);\n        }\n\n        return $content;\n    }\n\n    /**\n     * Strip HTML tags from a string.\n     *\n     * @since 10.0.0\n     *\n     * @param string  $str\n     *\n     * @return string\n     *\n     * @TODO Unit test\n     */\n    public static function stripTags(string $str): string\n    {\n        $str = Sanitizer::getVerbatimValue($str);\n\n        return strip_tags($str);\n    }\n\n    /**\n     * Save a picture and return destination filepath.\n     * /!\\ This method is made to handle uploaded files and removes the source file filesystem.\n     *\n     * @param string|null $src          Source path of the picture\n     * @param string      $uniq_prefix  Unique prefix that can be used to improve uniqueness of destination filename\n     *\n     * @return boolean|string      Destination filepath, relative to GLPI_PICTURE_DIR, or false on failure\n     *\n     * @since 9.5.0\n     */\n    public static function savePicture($src, $uniq_prefix = '')\n    {\n\n        if (!Document::isImage($src)) {\n            return false;\n        }\n\n        $filename     = uniqid($uniq_prefix);\n        $ext          = pathinfo($src, PATHINFO_EXTENSION);\n        $subdirectory = substr($filename, -2); // subdirectory based on last 2 hex digit\n\n        $i = 0;\n        do {\n           // Iterate on possible suffix while dest exists.\n           // This case will almost never exists as dest is based on an unique id.\n            $dest = GLPI_PICTURE_DIR\n            . '/' . $subdirectory\n            . '/' . $filename . ($i > 0 ? '_' . $i : '') . '.' . $ext;\n            $i++;\n        } while (file_exists($dest));\n\n        if (!is_dir(GLPI_PICTURE_DIR . '/' . $subdirectory) && !mkdir(GLPI_PICTURE_DIR . '/' . $subdirectory)) {\n            return false;\n        }\n\n        if (!rename($src, $dest)) {\n            return false;\n        }\n\n        return substr($dest, strlen(GLPI_PICTURE_DIR . '/')); // Return dest relative to GLPI_PICTURE_DIR\n    }\n\n\n    /**\n     * Delete a picture.\n     *\n     * @param string $path\n     *\n     * @return boolean\n     *\n     * @since 9.5.0\n     */\n    public static function deletePicture($path)\n    {\n\n        $fullpath = GLPI_PICTURE_DIR . '/' . $path;\n\n        if (!file_exists($fullpath)) {\n            return false;\n        }\n\n        $fullpath = realpath($fullpath);\n        if (!str_starts_with($fullpath, realpath(GLPI_PICTURE_DIR))) {\n           // Prevent deletion of a file ouside pictures directory\n            return false;\n        }\n\n        return @unlink($fullpath);\n    }\n\n\n    /**\n     * Get picture URL.\n     *\n     * @param string $path\n     * @param bool  bool get full path\n     *\n     * @return null|string\n     *\n     * @since 9.5.0\n     */\n    public static function getPictureUrl($path, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $path = Html::cleanInputText($path); // prevent xss\n\n        if (empty($path)) {\n            return null;\n        }\n\n        return ($full ? $CFG_GLPI[\"root_doc\"] : \"\") . '/front/document.send.php?file=_pictures/' . $path;\n    }\n\n    /**\n     * Return a shortened number with a suffix (K, M, B, T)\n     *\n     * @param int $number to shorten\n     * @param int $precision how much number after comma we need\n     * @param bool $html do we return an html or a single string\n     *\n     * @return string shortened number\n     */\n    public static function shortenNumber($number = 0, $precision = 1, bool $html = true): string\n    {\n\n        $suffix = \"\";\n        if (!is_numeric($number)) {\n            if (preg_match(\"/^([0-9\\.]+)(.*)/\", $number, $matches)) {\n                // Preformatted value: {Number}{Suffix}\n                $formatted = $matches[1];\n                $suffix = $matches[2];\n            } else {\n               // Unknwown format\n                $formatted = $number;\n            }\n        } else if ($number < 900) {\n            $formatted = number_format($number);\n        } else if ($number < 900000) {\n            $formatted = number_format($number / 1000, $precision);\n            $suffix = \"K\";\n        } else if ($number < 900000000) {\n            $formatted = number_format($number / 1000000, $precision);\n            $suffix = \"M\";\n        } else if ($number < 900000000000) {\n            $formatted = number_format($number / 1000000000, $precision);\n            $suffix = \"B\";\n        } else {\n            $formatted = number_format($number / 1000000000000, $precision);\n            $suffix = \"T\";\n        }\n\n        if (strpos($formatted, '.') === false) {\n            $precision = 0;\n        }\n\n        if ($html) {\n            $formatted = <<<HTML\n            <span title=\"{$number}\"\n                  class=\"formatted-number\"\n                  data-precision='{$precision}'>\n               <span class=\"number\">$formatted</span>\n               <span class=\"suffix\">$suffix</span>\n            </span>\nHTML;\n        } else {\n            $formatted .= $suffix;\n        }\n\n        return $formatted;\n    }\n\n\n    /**\n     * Get a fixed hex color for a input string\n     * Inpsired by shahonseven/php-color-hash\n     * @since 9.5\n     *\n     * @param string $str\n     *\n     * @return string hex color (ex #FAFAFA)\n     */\n    public static function getColorForString(string $str = \"\"): string\n    {\n        $seed  = 131;\n        $seed2 = 137;\n        $hash  = 0;\n       // Make hash more sensitive for short string like 'a', 'b', 'c'\n        $str .= 'x';\n        $max = intval(9007199254740991 / $seed2);\n\n       // Backport of Javascript function charCodeAt()\n        $getCharCode = function ($c) {\n            list(, $ord) = unpack('N', mb_convert_encoding($c, 'UCS-4BE', 'UTF-8'));\n            return $ord;\n        };\n\n       // generate integer hash\n        for ($i = 0, $ilen = mb_strlen($str, 'UTF-8'); $i < $ilen; $i++) {\n            if ($hash > $max) {\n                $hash = intval($hash / $seed2);\n            }\n            $hash = $hash * $seed + $getCharCode(mb_substr($str, $i, 1, 'UTF-8'));\n        }\n\n       //get Hsl\n        $base_L = $base_S = [0.6, 0.65, 0.7];\n        $H = $hash % 359;\n        $hash = intval($hash / 360);\n        $S = $base_S[$hash % count($base_S)];\n        $hash = intval($hash / count($base_S));\n        $L = $base_L[$hash % count($base_L)];\n        $hsl = [\n            'H' => $H,\n            'S' => $S,\n            'L' => $L\n        ];\n\n       // return hex\n        return \"#\" . Color::hslToHex($hsl);\n    }\n\n\n    /**\n     * Return a frontground color for a given background color\n     * if bg color is light, we'll return dark fg color\n     * else a light fg color\n     *\n     * @param string $color the background color in hexadecimal notation (ex #FFFFFF) to compute\n     * @param int $offset how much we need to darken/lighten the color\n     * @param bool $inherit_if_transparent if color contains an opacity value, and if this value is too transparent return 'inherit'\n     *\n     * @return string hexadecimal fg color (ex #FFFFFF)\n     */\n    public static function getFgColor(string $color = \"\", int $offset = 40, bool $inherit_if_transparent = false): string\n    {\n        $fg_color = \"FFFFFF\";\n        if ($color !== \"\") {\n            $color = str_replace(\"#\", \"\", $color);\n\n           // if transparency present, get only the color part\n            if (strlen($color) === 8 && preg_match('/^[a-fA-F0-9]+$/', $color)) {\n                $tmp = $color;\n                $alpha = hexdec(substr($tmp, 6, 2));\n                $color = substr($color, 0, 6);\n\n                if ($alpha <= 100) {\n                    return \"inherit\";\n                }\n            }\n\n            $color_inst = new Color($color);\n\n           // adapt luminance part\n            if ($color_inst->isLight()) {\n                $hsl = Color::hexToHsl($color);\n                $hsl['L'] = max(0, $hsl['L'] - ($offset / 100));\n                $fg_color = Color::hslToHex($hsl);\n            } else {\n                $hsl = Color::hexToHsl($color);\n                $hsl['L'] = min(1, $hsl['L'] + ($offset / 100));\n                $fg_color = Color::hslToHex($hsl);\n            }\n        }\n\n        return \"#\" . $fg_color;\n    }\n\n    /**\n     * Get an HTTP header value\n     *\n     * @since 9.5\n     *\n     * @param string $name\n     *\n     * @return mixed The header value or null if not found\n     */\n    public static function getHeader(string $name)\n    {\n       // Format expected header name\n        $name = \"HTTP_\" . str_replace(\"-\", \"_\", strtoupper($name));\n\n        return $_SERVER[$name] ?? null;\n    }\n\n    /**\n     * Check if the given class exist and extends CommonDBTM\n     *\n     * @param string $class\n     * @return bool\n     */\n    public static function isCommonDBTM(string $class): bool\n    {\n        return class_exists($class) && is_subclass_of($class, 'CommonDBTM');\n    }\n\n    /**\n     * Check if the given class exist and implement DeprecatedInterface\n     *\n     * @param string $class\n     * @return bool\n     */\n    public static function isAPIDeprecated(string $class): bool\n    {\n        $deprecated = \"Glpi\\Api\\Deprecated\\DeprecatedInterface\";\n\n       // Insert namespace if missing\n        if (strpos($class, \"Glpi\\Api\\Deprecated\") === false) {\n            $class = \"Glpi\\Api\\Deprecated\\\\$class\";\n        }\n\n        return class_exists($class) && is_a($class, $deprecated, true);\n    }\n\n    /**\n     * Check URL validity\n     *\n     * @param string $url The URL to check\n     *\n     * @return boolean\n     */\n    public static function isValidWebUrl($url): bool\n    {\n       // Verify absence of known disallowed characters.\n       // It is still possible to have false positives, but a fireproof check would be too complex\n       // (or would require usage of a dedicated lib).\n        return (preg_match(\n            \"/^(?:http[s]?:\\/\\/(?:[^\\s`!(){};'\\\",<>\u00ab\u00bb\u201c\u201d\u2018\u2019+]+|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019+]))$/iu\",\n            $url\n        ) === 1);\n    }\n\n    /**\n     * Checks if the given class or object has the specified trait.\n     * This function checks the class itself and all parent classes for the trait.\n     * @since 10.0.0\n     * @param string|object $class The class or object\n     * @param string $trait The trait\n     * @return bool True if the class or its parents have the specified trait\n     */\n    public static function hasTrait($class, string $trait): bool\n    {\n       // Get traits of all parent classes\n        do {\n            $traits = class_uses($class, true);\n            if (in_array($trait, $traits, true)) {\n                return true;\n            }\n        } while ($class = get_parent_class($class));\n\n        return false;\n    }\n\n   /*\n    * Normalizes file name\n    *\n    * @param string filename\n    *\n    * @return string\n    */\n    public static function filename($filename): string\n    {\n       //remove extension\n        $ext = pathinfo($filename, PATHINFO_EXTENSION);\n        $filename = self::slugify(\n            preg_replace(\n                '/\\.' . $ext . '$/',\n                '',\n                $filename\n            ),\n            '' //no prefix on filenames\n        );\n\n        $namesize = strlen($filename) + strlen($ext) + 1;\n        if ($namesize > 255) {\n           //limit to 255 characters\n            $filename = substr($filename, 0, $namesize - 255);\n        }\n\n        if (!empty($ext)) {\n            $filename .= '.' . $ext;\n        }\n\n        return $filename;\n    }\n\n    /**\n     * Clean _target argument\n     *\n     * @param string $target Target argument\n     *\n     * @return string\n     */\n    public static function cleanTarget(string $target): string\n    {\n        global $CFG_GLPI;\n\n        $file = preg_replace('/^' . preg_quote($CFG_GLPI['root_doc'], '/') . '/', '', $target);\n        if (file_exists(GLPI_ROOT . $file)) {\n            return $target;\n        }\n\n        return '';\n    }\n\n    /**\n     * Get available tabs for a given item\n     *\n     * @param string   $itemtype Type of the item\n     * @param int|string|null $itemtype Id the item, optional\n     *\n     * @return array\n     */\n    public static function getAvailablesTabs(string $itemtype, $id = null): array\n    {\n        $item = getItemForItemtype($itemtype);\n\n        if (!$item) {\n            return [];\n        }\n\n        if (!is_null($id) && !$item->isNewID($id)) {\n            $item->getFromDB($id);\n        }\n\n        $tabs = $item->defineAllTabs();\n        if (isset($tabs['no_all_tab'])) {\n            unset($tabs['no_all_tab']);\n        }\n       // Add all tab\n        $tabs[-1] = 'All';\n\n        return $tabs;\n    }\n\n    /**\n     * Handle redirect after a profile switch.\n     * Must be called after a right check failure.\n     */\n    public static function handleProfileChangeRedirect(): void\n    {\n        global $CFG_GLPI;\n\n        $redirect = $_SESSION['_redirected_from_profile_selector'] ?? false;\n\n        if ($redirect) {\n            unset($_SESSION['_redirected_from_profile_selector']);\n            Html::redirect($CFG_GLPI['root_doc'] . \"/front/central.php\");\n        }\n    }\n\n    /**\n     * Check if a mixed value (possibly a string) is an integer or a float\n     *\n     * @param mixed $value A possible float\n     *\n     * @return bool\n     */\n    public static function isFloat($value): bool\n    {\n        if ($value === null || $value === '') {\n            return false;\n        }\n\n        if (!is_numeric($value)) {\n            $type = gettype($value);\n\n            trigger_error(\n                \"Calling isFloat on $type\",\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        return (floatval($value) - intval($value)) > 0;\n    }\n\n    /**\n     * Get the number of decimals for a given value\n     *\n     * @param mixed $value A possible float\n     *\n     * @return int\n     */\n    public static function getDecimalNumbers($value): int\n    {\n        if (!is_numeric($value)) {\n            $type = gettype($value);\n\n            trigger_error(\n                \"Calling getDecimalNumbers on $type\",\n                E_USER_WARNING\n            );\n            return 0;\n        }\n\n        if (floatval($value) == intval($value)) {\n            return 0;\n        }\n\n        return strlen(preg_replace('/\\d*\\./', '', floatval($value)));\n    }\n\n    /**\n     * Try to convert to Mio the given input\n     *\n     * @param string $size Input string\n     *\n     * @return mixed The Mio value as an integer if we were able to parse the\n     * input, else the unchanged input string\n     */\n    public static function getMioSizeFromString(string $size)\n    {\n        if (is_numeric($size)) {\n            // Already a numeric value, no work to be done\n            return $size;\n        }\n\n        if (!preg_match('/(\\d+).*?(\\w+)/', $size, $matches)) {\n            // Unkown format, keep the string as it is\n            return $size;\n        }\n        $supported_sizes = [\n            'mo'  => 0,\n            'mio' => 0,\n            'go'  => 1,\n            'gio' => 1,\n            'to'  => 2,\n            'tio' => 2,\n        ];\n        $exp = $supported_sizes[strtolower($matches[2]) ?? null];\n        if ($exp === null) {\n            // Unkown format, keep the string as it is\n            return $size;\n        }\n        return $matches[1] * pow(1024, $exp);\n    }\n}\n", "{#\n # ---------------------------------------------------------------------\n #\n # GLPI - Gestionnaire Libre de Parc Informatique\n #\n # http://glpi-project.org\n #\n # @copyright 2015-2022 Teclib' and contributors.\n # @copyright 2003-2014 by the INDEPNET Development Team.\n # @licence   https://www.gnu.org/licenses/gpl-3.0.html\n #\n # ---------------------------------------------------------------------\n #\n # LICENSE\n #\n # This file is part of GLPI.\n #\n # This program is free software: you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation, either version 3 of the License, or\n # (at your option) any later version.\n #\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n #\n # ---------------------------------------------------------------------\n #}\n\n<div class=\"firstbloc\">\n   {% if rss_feed.error is defined and rss_feed.error is not null %}\n      {{ rss_feed.error }}\n   {% endif %}\n   <table class=\"table table-striped table-hover\">\n      <thead>\n         <tr>\n            <th colspan=\"3\">{{ rss_feed.title }}</th>\n         </tr>\n      </thead>\n      {% for rss_item in rss_feed.items %}\n         <tr class=\"tab_bg_1\">\n            <td>{{ rss_item.timestamp }}</td>\n            <td>\n               {% if rss_item.link is defined and rss_item.link is not null %}\n                  <a target=\"_blank\" href=\"{{ rss_item.link }}\">{{ rss_item.title }}</a>\n               {% else %}\n                  {{ rss_item.title }}\n               {% endif %}\n            </td>\n            <td>\n               {% set rand = random() %}\n               {% set preview = rss_item.content|html_to_text %}\n               {% set preview = preview|length > 1000 ? preview|slice(0, 1000) ~ ' (...)' : preview %}\n               <span id=\"rssitem{{ rand }}\" class=\"pointer\">{{ preview }}</span>\n               {% do call('Html::showToolTip', [rss_item.content, {\n                  'applyto': 'rssitem' ~ rand,\n                  'display': true\n               }]) %}\n            </td>\n         </tr>\n      {% endfor %}\n   </table>\n</div>\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\Cache\\CacheManager;\nuse Glpi\\Cache\\SimpleCache;\nuse Glpi\\Socket;\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\n\nini_set('display_errors', 'On');\nerror_reporting(E_ALL);\n\ndefine('GLPI_ROOT', __DIR__ . '/../');\ndefine('GLPI_CONFIG_DIR', getenv('GLPI_CONFIG_DIR') ?: __DIR__ . '/config');\ndefine('GLPI_VAR_DIR', getenv('GLPI_VAR_DIR') ?: __DIR__ . '/files');\ndefine('GLPI_URI', getenv('GLPI_URI') ?: 'http://localhost:8088');\n\ndefine(\n    'PLUGINS_DIRECTORIES',\n    [\n        GLPI_ROOT . '/plugins',\n        GLPI_ROOT . '/tests/fixtures/plugins',\n    ]\n);\n\ndefine(\n    'GLPI_SERVERSIDE_URL_ALLOWLIST',\n    [\n        '/^(https?|feed):\\/\\/[^@:]+(\\/.*)?$/', // default allowlist entry\n        '/^file:\\/\\/.*\\.ics$/', // calendar mockups\n    ]\n);\n\ndefine('TU_USER', '_test_user');\ndefine('TU_PASS', 'PhpUnit_4');\n\nglobal $CFG_GLPI, $GLPI_CACHE;\n\ninclude(GLPI_ROOT . \"/inc/based_config.php\");\n\nif (!file_exists(GLPI_CONFIG_DIR . '/config_db.php')) {\n    die(\"\\nConfiguration file for tests not found\\n\\nrun: bin/console glpi:database:install --config-dir=\" . GLPI_CONFIG_DIR . \" ...\\n\\n\");\n}\n\n\\Glpi\\Tests\\BootstrapUtils::initVarDirectories();\n\n//init cache\nif (file_exists(GLPI_CONFIG_DIR . DIRECTORY_SEPARATOR . CacheManager::CONFIG_FILENAME)) {\n   // Use configured cache for cache tests\n    $cache_manager = new CacheManager();\n    $GLPI_CACHE = $cache_manager->getCoreCacheInstance();\n} else {\n   // Use \"in-memory\" cache for other tests\n    $GLPI_CACHE = new SimpleCache(new ArrayAdapter());\n}\n\ninclude_once __DIR__ . '/../inc/includes.php';\n\ninclude_once __DIR__ . '/GLPITestCase.php';\ninclude_once __DIR__ . '/DbTestCase.php';\ninclude_once __DIR__ . '/CsvTestCase.php';\ninclude_once __DIR__ . '/APIBaseClass.php';\ninclude_once __DIR__ . '/InventoryTestCase.php';\ninclude_once __DIR__ . '/functionnal/CommonITILRecurrent.php';\ninclude_once __DIR__ . '/functionnal/Glpi/ContentTemplates/Parameters/AbstractParameters.php';\ninclude_once __DIR__ . '/units/AbstractRightsDropdown.php';\n\n// check folder exists instead of class_exists('\\GuzzleHttp\\Client'), to prevent global includes\nif (file_exists(__DIR__ . '/../vendor/autoload.php') && !file_exists(__DIR__ . '/../vendor/guzzlehttp/guzzle')) {\n    die(\"\\nDevelopment dependencies not found\\n\\nrun: composer install -o\\n\\n\");\n}\n\nfunction loadDataset()\n{\n    global $CFG_GLPI, $DB;\n\n   // Unit test data definition\n    $data = [\n      // bump this version to force reload of the full dataset, when content change\n        '_version' => '4.8',\n\n      // Type => array of entries\n        'Entity' => [\n            [\n                'name'        => '_test_root_entity',\n                'entities_id' => 0,\n            ], [\n                'name'        => '_test_child_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'        => '_test_child_2',\n                'entities_id' => '_test_root_entity',\n            ]\n        ], 'Computer' => [\n            [\n                'name'        => '_test_pc01',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc01',\n            ], [\n                'name'        => '_test_pc02',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc02',\n            ], [\n                'name'        => '_test_pc03',\n                'entities_id' => '_test_root_entity',\n                'comment'     => 'Comment for computer _test_pc03',\n                'contact'     => 'johndoe',\n            ], [\n                'name'        => '_test_pc11',\n                'entities_id' => '_test_child_1',\n            ], [\n                'name'        => '_test_pc12',\n                'entities_id' => '_test_child_1',\n            ], [\n                'name'        => '_test_pc13',\n                'entities_id' => '_test_child_1',\n                'comment'     => 'Comment for computer _test_pc13',\n                'contact'     => 'johndoe',\n            ], [\n                'name'        => '_test_pc21',\n                'entities_id' => '_test_child_2',\n            ], [\n                'name'        => '_test_pc22',\n                'entities_id' => '_test_child_2',\n            ], [\n                'name'        => '_test_pc_with_encoded_comment',\n                'entities_id' => '_test_root_entity',\n                'comment'     => '&#60;&#62;', // \"&#60;\" => \"<\", \"&#62;\" => \">\"\n            ]\n        ], 'ComputerModel' => [\n            [\n                'name'           => '_test_computermodel_1',\n                'product_number' => 'CMP_ADEAF5E1',\n            ], [\n                'name'           => '_test_computermodel_2',\n                'product_number' => 'CMP_567AEC68',\n            ],\n        ], 'Monitor' => [\n            [\n                'name'           => '_test_monitor_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_monitor_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Software' => [\n            [\n                'name'         => '_test_soft',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ], [\n                'name'         => '_test_soft2',\n                'entities_id'  => '_test_child_2',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_soft_3',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ]\n\n        ], 'SoftwareVersion' => [\n            [\n                'name'        => '_test_softver_1',\n                'entities_id' => '_test_root_entity',\n                'is_recursive' => 1,\n                'softwares_id' => '_test_soft',\n            ], [\n                'name'        => '_test_softver_2',\n                'entities_id' => '_test_root_entity',\n                'is_recursive' => 1,\n                'softwares_id' => '_test_soft',\n            ]\n        ], 'NetworkEquipment' => [\n            [\n                'name'           => '_test_networkequipment_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_networkequipment_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Peripheral' => [\n            [\n                'name'           => '_test_peripheral_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_peripheral_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'Printer' => [\n            [\n                'name'         => '_test_printer_all',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n            ], [\n                'name'         => '_test_printer_ent0',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_printer_ent1',\n                'entities_id'  => '_test_child_1',\n                'is_recursive' => 0,\n            ], [\n                'name'         => '_test_printer_ent2',\n                'entities_id'  => '_test_child_2',\n                'is_recursive' => 0,\n            ]\n        ], 'Phone' => [\n            [\n                'name'           => '_test_phone_1',\n                'entities_id' => '_test_root_entity',\n            ], [\n                'name'           => '_test_phone_2',\n                'entities_id' => '_test_root_entity',\n            ],\n        ], 'User' => [\n            [\n                'name'          => TU_USER,\n                'password'      => TU_PASS,\n                'password2'     => TU_PASS,\n                'entities_id'   => '_test_root_entity',\n                'profiles_id'   => 4, // TODO manage test profiles\n                '_entities_id'  => 0,\n                '_profiles_id'  => 4,\n                '_is_recursive' => 1,\n            ]\n        ], 'Group'   => [\n            [\n                'name'         => '_test_group_1',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'is_usergroup' => 1,\n                'is_requester' => 1,\n                'is_watcher'   => 1,\n                'is_assign'    => 1,\n            ],\n            [\n                'name'         => '_test_group_2',\n                'entities_id'  => '_test_root_entity',\n                'groups_id'    => '_test_group_1',\n                'is_recursive' => 1,\n                'is_usergroup' => 1,\n                'is_requester' => 1,\n                'is_watcher'   => 1,\n                'is_assign'    => 1,\n            ],\n        ], 'TaskCategory' => [\n            [\n                'is_recursive' => 1,\n                'name'         => '_cat_1',\n                'completename' => '_cat_1',\n                'comment'      => 'Comment for category _cat_1',\n                'level'        => 1,\n            ],\n            [\n                'is_recursive' => 1,\n                'taskcategories_id' => '_cat_1',\n                'name'         => '_subcat_1',\n                'completename' => '_cat_1 > _subcat_1',\n                'comment'      => 'Comment for sub-category _subcat_1',\n                'level'        => 2,\n            ]\n        ], 'DropdownTranslation' => [\n            [\n                'items_id'   => '_cat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'name',\n                'value'      => 'FR - _cat_1'\n            ],\n            [\n                'items_id'   => '_cat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'comment',\n                'value'      => 'FR - Commentaire pour cat\u00e9gorie _cat_1'\n            ],\n            [\n                'items_id'   => '_subcat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'name',\n                'value'      => 'FR - _subcat_1'\n            ],\n            [\n                'items_id'   => '_subcat_1',\n                'itemtype'   => 'TaskCategory',\n                'language'   => 'fr_FR',\n                'field'      => 'comment',\n                'value'      => 'FR - Commentaire pour sous-cat\u00e9gorie _subcat_1'\n            ]\n        ], 'Contact' => [\n            [\n                'name'         => '_contact01_name',\n                'firstname'    => '_contact01_firstname',\n                'phone'        => '0123456789',\n                'phone2'       => '0123456788',\n                'mobile'       => '0623456789',\n                'fax'          => '0123456787',\n                'email'        => '_contact01_firstname._contact01_name@glpi.com',\n                'comment'      => 'Comment for contact _contact01_name',\n                'entities_id'  => '_test_root_entity'\n            ]\n        ], 'Supplier' => [\n            [\n                'name'         => '_suplier01_name',\n                'phonenumber'  => '0123456789',\n                'fax'          => '0123456787',\n                'email'        => 'info@_supplier01_name.com',\n                'comment'      => 'Comment for supplier _suplier01_name',\n                'entities_id'  => '_test_root_entity'\n            ]\n        ], 'Location' => [\n            [\n                'name'         => '_location01',\n                'comment'      => 'Comment for location _location01'\n            ],\n            [\n                'name'         => '_location01 > _sublocation01',\n                'comment'      => 'Comment for location _sublocation01'\n            ],\n            [\n                'name'         => '_location02',\n                'comment'      => 'Comment for location _sublocation02'\n            ]\n        ], Socket::class => [\n            [\n                'name'         => '_socket01',\n                'locations_id' => '_location01',\n                'comment'      => 'Comment for socket _socket01'\n            ]\n        ], 'BudgetType' => [\n            [\n                'name'         => '_budgettype01',\n                'comment'      => 'Comment for budgettype _budgettype01'\n            ]\n        ], 'Budget' => [\n            [\n                'name'           => '_budget01',\n                'comment'        => 'Comment for budget _budget01',\n                'locations_id'   => '_location01',\n                'budgettypes_id' => '_budgettype01',\n                'begin_date'     => '2016-10-18',\n                'end_date'       => '2016-12-31',\n                'entities_id'     => '_test_root_entity'\n            ]\n        ], 'Ticket' => [\n            [\n                'name'           => '_ticket01',\n                'content'        => 'Content for ticket _ticket01',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'name'           => '_ticket02',\n                'content'        => 'Content for ticket _ticket02',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'name'           => '_ticket03',\n                'content'        => 'Content for ticket _ticket03',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_child_1'\n            ],\n            [\n                'id'             => 100, // Force ID that will be used in imap test suite fixtures\n                'name'           => '_ticket100',\n                'content'        => 'Content for ticket _ticket100',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n            [\n                'id'             => 101, // Force ID that will be used in imap test suite fixtures\n                'name'           => '_ticket101',\n                'content'        => 'Content for ticket _ticket101',\n                'users_id_recipient' => TU_USER,\n                'entities_id'    => '_test_root_entity'\n            ],\n        ], 'TicketTask' => [\n            [\n                'tickets_id'         => '_ticket01',\n                'taskcategories_id'  => '_subcat_1',\n                'users_id'           => TU_USER,\n                'content'            => 'Task to be done',\n                'is_private'         => 0,\n                'users_id_tech'      => TU_USER,\n                'date'               => '2016-10-19 11:50:50'\n            ]\n        ], 'UserEmail' => [\n            [\n                'users_id'     => TU_USER,\n                'is_default'   => '1',\n                'is_dynamic'   => '0',\n                'email'        => TU_USER . '@glpi.com'\n            ]\n        ], 'KnowbaseItem' => [\n            [\n                'name'     => '_knowbaseitem01',\n                'answer'   => 'Answer for Knowledge base entry _knowbaseitem01',\n                'is_faq'   => 0,\n                'users_id' => TU_USER,\n                'date'     => '2016-11-17 12:27:48',\n            ],\n            [\n                'name'     => '_knowbaseitem02',\n                'answer'   => 'Answer for Knowledge base entry _knowbaseitem02',\n                'is_faq'   => 0,\n                'users_id' => TU_USER,\n                'date'     => '2016-11-17 12:27:48',\n            ]\n        ], 'KnowbaseItem_Item' => [\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket01',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket02',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket03',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'itemtype'         => 'Ticket',\n                'items_id'         => '_ticket03',\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'itemtype'         => 'Computer',\n                'items_id'         => '_test_pc21',\n            ]\n        ], 'Entity_KnowbaseItem' => [\n            [\n                'knowbaseitems_id' => '_knowbaseitem01',\n                'entities_id'      => '_test_root_entity'\n            ],\n            [\n                'knowbaseitems_id' => '_knowbaseitem02',\n                'entities_id'      => '_test_child_1'\n            ]\n        ], 'DocumentType' => [\n            [\n                'name'          => 'markdown',\n                'is_uploadable' => '1',\n                'ext'           => 'md'\n            ]\n        ], 'Manufacturer' => [\n            [\n                'name'          => 'My Manufacturer',\n            ]\n        ], 'SoftwareLicense' => [\n            [\n                'name'         => '_test_softlic_1',\n                'completename' => '_test_softlic_1',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 2,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_2',\n                'completename' => '_test_softlic_2',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 3,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_3',\n                'completename' => '_test_softlic_3',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 5,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_4',\n                'completename' => '_test_softlic_4',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 2,\n                'softwares_id' => '_test_soft',\n            ],\n            [\n                'name'         => '_test_softlic_child',\n                'completename' => '_test_softlic_child',\n                'level'        => 0,\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'number'       => 1,\n                'softwares_id' => '_test_soft',\n                'softwarelicenses_id' => '_test_softlic_1',\n            ],\n        ], 'Item_SoftwareLicense' => [\n            [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc01',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_1',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_2',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_3',\n                'items_id'              => '_test_pc02',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_3',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ], [\n                'softwarelicenses_id'   => '_test_softlic_2',\n                'items_id'              => '_test_pc21',\n                'itemtype'              => 'Computer',\n            ]\n        ], 'DeviceSimcard' => [\n            [\n                'designation'         => '_test_simcard_1',\n                'entities_id'         => '_test_root_entity',\n                'is_recursive'        => 1,\n            ]\n        ], 'DeviceSensor' => [\n            [\n                'designation'  => '_test_sensor_1',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1\n            ]\n        ], 'AuthLDAP' => [\n            [\n                'name'            => '_local_ldap',\n                'host'            => 'openldap',\n                'basedn'          => 'dc=glpi,dc=org',\n                'rootdn'          => 'cn=Manager,dc=glpi,dc=org',\n                'port'            => '3890',\n                'condition'       => '(objectclass=inetOrgPerson)',\n                'login_field'     => 'uid',\n                'rootdn_passwd'   => 'insecure',\n                'is_default'      => 1,\n                'is_active'       => 0,\n                'use_tls'         => 0,\n                'email1_field'    => 'mail',\n                'realname_field'  => 'cn',\n                'firstname_field' => 'sn',\n                'phone_field'     => 'telephonenumber',\n                'comment_field'   => 'description',\n                'title_field'     => 'title',\n                'category_field'  => 'businesscategory',\n                'language_field'  => 'preferredlanguage',\n                'group_search_type'  => \\AuthLDAP::GROUP_SEARCH_GROUP,\n                'group_condition' => '(objectclass=groupOfNames)',\n                'group_member_field' => 'member'\n            ]\n        ], 'Holiday'   => [\n            [\n                'name'         => 'X-Mas',\n                'entities_id'  => '_test_root_entity',\n                'is_recursive' => 1,\n                'begin_date'   => '2018-12-29',\n                'end_date'     => '2019-01-06'\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Dashboard' => [\n            [\n                'key'     => 'test_dashboard',\n                'name'    => 'Test_Dashboard',\n                'context' => 'core',\n            ], [\n                'key'     => 'test_dashboard2',\n                'name'    => 'Test_Dashboard_2',\n                'context' => 'core'\n            ], [\n                'key'     => 'test_dashboard3',\n                'name'    => 'Test_Dashboard_3',\n                'context' => 'oustide_core',\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Item' => [\n            [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_1',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 0,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_2',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 2,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'gridstack_id'             => 'bn_count_Computer_3',\n                'card_id'                  => 'bn_count_Computer',\n                'x'                        => 4,\n                'y'                        => 0,\n                'width'                    => 2,\n                'height'                   => 2,\n                'card_options'             => '{\"color\": \"#FFFFFF\"}'\n            ]\n        ], 'Glpi\\\\Dashboard\\\\Right' => [\n            [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'itemtype'                 => 'Entity',\n                'items_id'                 => 0,\n            ], [\n                'dashboards_dashboards_id' => 'Test_Dashboard',\n                'itemtype'                 => 'Profile',\n                'items_id'                 => 3,\n            ]\n        ], 'Plugin' => [\n            [\n                'directory'    => 'tester',\n                'name'         => 'tester',\n                'version'      => '1.0.0',\n                'state'        => 1,\n            ]\n        ],\n    ];\n\n   // To bypass various right checks\n    $session_bak = $_SESSION;\n    $_SESSION['glpishowallentities'] = 1;\n    $_SESSION['glpicronuserrunning'] = \"cron_phpunit\";\n    $_SESSION['glpi_use_mode']       = Session::NORMAL_MODE;\n    $_SESSION['glpiactive_entity']   = 0;\n    $_SESSION['glpiactiveentities']  = [0];\n    $_SESSION['glpiactiveentities_string'] = \"'0'\";\n    $CFG_GLPI['root_doc']            = '/glpi';\n\n    $DB->beginTransaction();\n\n    Config::setConfigurationValues('core', ['url_base'     => GLPI_URI,\n        'url_base_api' => GLPI_URI . '/apirest.php'\n    ]);\n    $CFG_GLPI['url_base']      = GLPI_URI;\n    $CFG_GLPI['url_base_api']  = GLPI_URI . '/apirest.php';\n\n   // make all caldav component available for tests (for default usage we don't VTODO)\n    $CFG_GLPI['caldav_supported_components']  = ['VEVENT', 'VJOURNAL', 'VTODO'];\n\n    $conf = Config::getConfigurationValues('phpunit');\n    if (isset($conf['dataset']) && $conf['dataset'] == $data['_version']) {\n        printf(\"\\nGLPI dataset version %s already loaded\\n\\n\", $data['_version']);\n    } else {\n        printf(\"\\nLoading GLPI dataset version %s\\n\", $data['_version']);\n\n        $ids = [];\n        foreach ($data as $type => $inputs) {\n            if ($type[0] == '_') {\n                continue;\n            }\n            foreach ($inputs as $input) {\n               // Resolve FK\n                foreach ($input as $k => $v) {\n                    // $foreigntype = $type; // by default same type than current type (is the case of the dropdowns)\n                    $foreigntype = false;\n                    $match = [];\n                    if (isForeignKeyField($k) && (preg_match(\"/(.*s)_id$/\", $k, $match) || preg_match(\"/(.*s)_id_/\", $k, $match))) {\n                        $foreigntypetxt = array_pop($match);\n                        if (substr($foreigntypetxt, 0, 1) !== '_') {\n                            $foreigntype = getItemTypeForTable(\"glpi_$foreigntypetxt\");\n                        }\n                    }\n                    if ($foreigntype && isset($ids[$foreigntype][$v]) && !is_numeric($v)) {\n                        $input[$k] = $ids[$foreigntype][$v];\n                    } else if ($k == 'items_id'  &&  isset($input['itemtype']) && isset($ids[$input['itemtype']][$v]) && !is_numeric($v)) {\n                        $input[$k] = $ids[$input['itemtype']][$v];\n                    } else if ($foreigntype && $foreigntype != 'UNKNOWN' && !is_numeric($v)) {\n                       // not found in ids array, then must get it from DB\n                        if ($obj = getItemByTypeName($foreigntype, $v)) {\n                            $input[$k] = $obj->getID();\n                        }\n                    }\n                }\n\n                if (isset($input['name']) && $item = getItemByTypeName($type, $input['name'])) {\n                    $input['id'] = $ids[$type][$input['name']] = $item->getField('id');\n                    $item->update($input);\n                    echo \".\";\n                } else {\n                   // Not found, create it\n                    $item = getItemForItemtype($type);\n                    $id = $item->add($input);\n                    echo \"+\";\n                    if (isset($input['name'])) {\n                        $ids[$type][$input['name']] = $id;\n                    }\n                }\n            }\n        }\n        Search::$search = [];\n        echo \"\\nDone\\n\\n\";\n        Config::setConfigurationValues('phpunit', ['dataset' => $data['_version']]);\n    }\n    $DB->commit();\n\n    $_SESSION = $session_bak; // Unset force session variables\n\n   // Ensure cache is clear after dataset reload\n    global $GLPI_CACHE;\n    $GLPI_CACHE->clear();\n}\n\n/**\n * Test helper, search an item from its type and name\n *\n * @param string  $type\n * @param string  $name\n * @param boolean $onlyid\n * @return CommonDBTM|false the item, or its id\n */\nfunction getItemByTypeName($type, $name, $onlyid = false)\n{\n\n    $item = getItemForItemtype($type);\n    $nameField = $type::getNameField();\n    if ($item->getFromDBByCrit([$nameField => $name])) {\n        return ($onlyid ? $item->getField('id') : $item);\n    }\n    return false;\n}\n\nloadDataset();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units;\n\nuse DbTestCase;\nuse Generator;\nuse Glpi\\Api\\Deprecated\\TicketFollowup;\nuse Glpi\\Features\\Clonable;\nuse Glpi\\Features\\DCBreadcrumb;\nuse Glpi\\Features\\Kanban;\nuse Glpi\\Features\\PlanningEvent;\nuse Glpi\\Toolbox\\Sanitizer;\nuse ITILFollowup;\nuse stdClass;\nuse Ticket;\nuse Psr\\Log\\LogLevel;\n\n/* Test for inc/toolbox.class.php */\n\nclass Toolbox extends DbTestCase\n{\n    public function testGetRandomString()\n    {\n        for ($len = 20; $len < 50; $len += 5) {\n           // Low strength\n            $str = \\Toolbox::getRandomString($len);\n            $this->integer(strlen($str))->isIdenticalTo($len);\n            $this->boolean(ctype_alnum($str))->isTrue();\n        }\n    }\n\n    protected function slugifyProvider()\n    {\n        return [\n            [\n                'string'   => 'My - string \u251c\u00a9\u251c\u00ae  \u251c\u0156 \u251c\u0106 \u251c\u00a4',\n                'expected' => 'my-string-ee-e-a-ss'\n            ], [\n            //https://github.com/glpi-project/glpi/issues/2946\n                'string'   => '\u256c\u0142\u017d\u00fc\u256c\u0104\u017d\u0123\u256c\u012e\u256c\u2592 \u256c\u2563\u256c\u2551\u256c\u2592\u256c\u012e\u256c\u2510\u017d\u0106\u256c\u2510\u256c\u00bb\u256c\u0118\u017d\u0101\u256c\u0118\u017d\u00e9 - \u256c\u00e6\u256c\u2563\u017d\u00e4\u256c\u00ab\u256c\u255d\u256c\u2592\u017d\u00e4\u256c\u2592',\n                'expected' => 'ereuna-ikanopoieses-aitemata'\n            ], [\n                'string'   => 'a-valid-one',\n                'expected' => 'a-valid-one',\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider slugifyProvider\n     */\n    public function testSlugify($string, $expected)\n    {\n        $this->string(\\Toolbox::slugify($string))->isIdenticalTo($expected);\n    }\n\n    protected function filenameProvider()\n    {\n        return [\n            [\n                'name'  => '00-logoteclib.png',\n                'expected'  => '00-logoteclib.png',\n            ], [\n            // Space is missing between \"France\" and \"tr\u251c\u00a9s\" due to a bug in laminas-mail\n                'name'  => '01-Screenshot-2018-4-12 Observatoire - Francetr\u251c\u00a9s haut d\u251c\u00aebit.png',\n                'expected'  => '01-screenshot-2018-4-12-observatoire-francetres-haut-debit.png',\n            ], [\n                'name'  => '01-test.JPG',\n                'expected'  => '01-test.JPG',\n            ], [\n                'name'  => '15-image001.png',\n                'expected'  => '15-image001.png',\n            ], [\n                'name'  => '18-blank.gif',\n                'expected'  => '18-blank.gif',\n            ], [\n                'name'  => '19-\u2569\u00e9\u016a\u0118\u251c\u00a9\u2554\u0122\u2554\u00ae\u2554\u00c9\u2554\u00bd \u255a\u255d\u2554\u201d\u251c\u00f3\u2569\u00fc\u255a\u2510.gif',\n                'expected'  => '19-secl-chas.gif',\n            ], [\n                'name'  => '20-spec\u251c\u00bbal chars.gif',\n                'expected'  => '20-special-chars.gif',\n            ], [\n                'name'  => '24.1-\u0137\u0122\u2510\u00b5\u00a2\u0107\u00f5\u2557\u010c\u00d5\u00c9\u0179\u2019\u255d\u012b\u00d5\u2591\u00e5\u00d5\u00bb\u255d\u0136\u0107\u2524\u00d5\u00e5\u0123\u00d5\u00ab\u2563\u00d5\u017c\u00e4\u0144\u012e\u00ab\u00b5\u0100\u0107\u00d5\u017c\u2524\u00f5\u0116\u0141\u0144\u00dc\u00e4\u0136\u2510\u00d7\u0144\u2557\u0141\u0136\u012a\u012b.txt',\n                'expected'  => '24.1-zhang-wen-jian-ming-jiang-dao-zhi-nei-rong-chu-zhi-biao-tou-zhong-de-lian-xu-xing.txt',\n            ], [\n                'name'  => '24.2-\u00f5\u0116\u0141\u00d5\u00f8\u012e\u00d5\u0141\u015a\u0144\u00bc\u201d.txt',\n                'expected'  => '24.2-zhong-guo-zi-fu.txt',\n            ], [\n                'name'  => '25-New Text - Document.txt',\n                'expected'  => '25-new-text-document.txt',\n            ], [\n                'name'     => '\u256c\u0142\u017d\u00fc\u256c\u0104\u017d\u0123\u256c\u012e\u256c\u2592 \u256c\u2563\u256c\u2551\u256c\u2592\u256c\u012e\u256c\u2510\u017d\u0106\u256c\u2510\u256c\u00bb\u256c\u0118\u017d\u0101\u256c\u0118\u017d\u00e9 - \u256c\u00e6\u256c\u2563\u017d\u00e4\u256c\u00ab\u256c\u255d\u256c\u2592\u017d\u00e4\u256c\u2592',\n                'expected' => 'ereuna-ikanopoieses-aitemata'\n            ], [\n                'name'     => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc gravida, nisi vel scelerisque feugiat, tellus purus volutpat justo, vel aliquam nibh nibh sit amet risus. Aenean eget urna et felis molestie elementum nec sit amet magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum nec malesuada elit, non luctus mi. Aliquam quis velit justo. Donec id pulvinar nunc. Phasellus.txt',\n                'expected' => 'lorem-ipsum-dolor-sit-amet-consectetur-adipiscing-elit.-nunc-gravida-nisi-vel-scelerisque-feugiat-tellus-purus-volutpat-justo-vel-aliquam-.txt'\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider filenameProvider\n     */\n    public function testFilename($name, $expected)\n    {\n        $this->string(\\Toolbox::filename($name))->isIdenticalTo($expected);\n        $this->integer(strlen($expected))->isLessThanOrEqualTo(255);\n    }\n\n    public function dataGetSize()\n    {\n        return [\n            [1,                   '1 o'],\n            [1025,                '1 Kio'],\n            [1100000,             '1.05 Mio'],\n            [1100000000,          '1.02 Gio'],\n            [1100000000000,       '1 Tio'],\n        ];\n    }\n\n    /**\n     * @dataProvider dataGetSize\n     */\n    public function testGetSize($input, $expected)\n    {\n        $this->string(\\Toolbox::getSize($input))->isIdenticalTo($expected);\n    }\n\n    public function testGetIPAddress()\n    {\n       // Save values\n        $saveServer = $_SERVER;\n\n       // Test REMOTE_ADDR\n        $_SERVER['REMOTE_ADDR'] = '123.123.123.123';\n        $ip = \\Toolbox::getRemoteIpAddress();\n        $this->variable($ip)->isEqualTo('123.123.123.123');\n\n       // Restore values\n        $_SERVER = $saveServer;\n    }\n\n    public function testFormatOutputWebLink()\n    {\n        $this->string(\\Toolbox::formatOutputWebLink('www.glpi-project.org/'))\n         ->isIdenticalTo('http://www.glpi-project.org/');\n        $this->string(\\Toolbox::formatOutputWebLink('http://www.glpi-project.org/'))\n         ->isIdenticalTo('http://www.glpi-project.org/');\n        $this->string(\\Toolbox::formatOutputWebLink('https://www.glpi-project.org/'))\n         ->isIdenticalTo('https://www.glpi-project.org/');\n    }\n\n    public function testgetBijectiveIndex()\n    {\n        foreach (\n            [\n                1   => 'A',\n                2   => 'B',\n                27  => 'AA',\n                28  => 'AB',\n                53  => 'BA',\n                702 => 'ZZ',\n                703 => 'AAA',\n            ] as $number => $bij_string\n        ) {\n            $this->string(\\Toolbox::getBijectiveIndex($number))->isIdenticalTo($bij_string);\n        }\n    }\n\n    protected function cleanIntegerProvider()\n    {\n        return [\n            [1, '1'],\n            ['1', '1'],\n            ['a1', '1'],\n            ['-1', '-1'],\n            ['-a1', '-1'],\n        ];\n    }\n\n    /**\n     * @dataProvider cleanIntegerProvider\n     */\n    public function testCleanInteger($value, $expected)\n    {\n        $this->variable(\\Toolbox::cleanInteger($value))->isIdenticalTo($expected);\n    }\n\n    protected function jsonDecodeProvider()\n    {\n        return [\n            [\n                '{\"Monitor\":[6],\"Computer\":[35]}',\n                ['Monitor' => [6], 'Computer' => [35]]\n            ], [\n                '{\\\"Monitor\\\":[\\\"6\\\"],\\\"Computer\\\":[\\\"35\\\"]}',\n                ['Monitor' => [\"6\"], 'Computer' => [\"35\"]]\n            ], [\n                '{\\\"content\\\":\\\"&#60;p&#62;HTML !&#60;/p&#62;\\\"}',\n                ['content' => '<p>HTML !</p>']\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider jsonDecodeProvider\n     */\n    public function testJsonDecode($json, $expected)\n    {\n        $this\n         ->variable(\\Toolbox::jsonDecode($json, true))\n         ->isIdenticalTo($expected);\n    }\n\n\n    protected function isJSONProvider()\n    {\n        return [\n            [\n                '{\"validJson\":true}',\n                true\n            ], [\n                '{\"invalidJson\":true',\n                false\n            ], [\n                '\"valid\"',\n                true\n            ], [\n                'null',\n                true\n            ], [\n                1000,\n                true\n            ], [\n                [1, 2, 3],\n                false\n            ], [\n                (object) ['json' => true],\n                false\n            ], [\n                '{ bad content',\n                false\n            ], [\n                file_get_contents(GLPI_ROOT . '/vendor/glpi-project/inventory_format/examples/computer_1.json'),\n                true\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider isJsonProvider\n     */\n    public function testIsJSON($json, $expected)\n    {\n        $this\n         ->variable(\\Toolbox::isJSON($json, true))\n         ->isIdenticalTo($expected);\n    }\n\n\n\n    public function testInvalidJsonDecode()\n    {\n        $invalid = '\"Monitor\":\"6\",\"Computer\":\"35\"';\n        $this->variable(\\Toolbox::jsonDecode($invalid, true))->isIdenticalTo($invalid);\n        $this->hasPhpLogRecordThatContains('Unable to decode JSON string! Is this really JSON?', LogLevel::NOTICE);\n    }\n\n    protected function ucProvider()\n    {\n        return [\n            ['hello you', 'Hello you'],\n            ['HEllO you', 'HEllO you'],\n            ['\u251c\u00ae\u251c\u00a9', '\u251c\u0113\u251c\u00a9'],\n            ['\u251c\u0113\u251c\u0142', '\u251c\u0113\u251c\u0142']\n        ];\n    }\n\n    /**\n     * @dataProvider ucProvider\n     */\n    public function testUcfirst($in, $out)\n    {\n        $this->string(\\Toolbox::ucfirst($in))->isIdenticalTo($out);\n    }\n\n    protected function shortcutProvider()\n    {\n        return [\n            ['My menu', 'm', '<u>M</u>y menu'],\n            ['Do something', 't', 'Do some<u>t</u>hing'],\n            ['Any menu entry', 'z', 'Any menu entry'],\n            ['Computer', 'O', 'C<u>o</u>mputer']\n        ];\n    }\n\n    /**\n     * @dataProvider shortcutProvider\n     */\n    public function testShortcut($string, $letter, $expected)\n    {\n        $this->string(\\Toolbox::shortcut($string, $letter))->isIdenticalTo($expected);\n    }\n\n    protected function strposProvider()\n    {\n        return [\n            ['Where is Charlie?', 'W', 0, 0],\n            ['Where is Charlie?', 'W', 1, false],\n            ['Where is Charlie?', 'w', 0, false],\n            ['Where is Charlie?', '?', 0, 16],\n            ['Where is Charlie?', '?', 3, 16],\n            ['Where is Charlie?', 'e', 0, 2],\n            ['Where is Charlie?', 'e', 2, 2],\n            ['Where is Charlie?', 'e', 3, 4],\n            ['O\u251c\u2563 est Charlie ?', '\u251c\u2563', 0, 1]\n        ];\n    }\n\n    /**\n     * @dataProvider strposProvider\n     */\n    public function testStrpos($string, $search, $offset, $expected)\n    {\n        $this->variable(\\Toolbox::strpos($string, $search, $offset))->isIdenticalTo($expected);\n    }\n\n    protected function padProvider()\n    {\n        return [\n            ['GLPI', 10, \" \", STR_PAD_RIGHT, 'GLPI      '],\n            ['\u251c\u00ae\u251c\u00a9', 10, \" \", STR_PAD_RIGHT, '\u251c\u00ae\u251c\u00a9        '],\n            ['GLPI', 10, \" \", STR_PAD_LEFT, '      GLPI'],\n            ['\u251c\u00ae\u251c\u00a9', 10, \" \", STR_PAD_LEFT, '        \u251c\u00ae\u251c\u00a9'],\n            ['GLPI', 10, \" \", STR_PAD_BOTH, '   GLPI   '],\n            ['\u251c\u00ae\u251c\u00a9', 10, \" \", STR_PAD_BOTH, '    \u251c\u00ae\u251c\u00a9    '],\n            ['123', 10, \" \", STR_PAD_BOTH, '   123    ']\n        ];\n    }\n\n    /**\n     * @dataProvider padProvider\n     */\n    public function testStr_pad($string, $length, $char, $pad, $expected)\n    {\n        $this->string(\\Toolbox::str_pad($string, $length, $char, $pad))\n         ->isIdenticalTo($expected);\n    }\n\n    protected function strlenProvider()\n    {\n        return [\n            ['GLPI', 4],\n            ['O\u251c\u2563 \u251c\u00a6a ?', 7]\n        ];\n    }\n\n    /**\n     * @dataProvider strlenProvider\n     */\n    public function testStrlen($string, $length)\n    {\n        $this->integer(\\Toolbox::strlen($string))->isIdenticalTo($length);\n    }\n\n    protected function substrProvider()\n    {\n        return [\n            ['I want a substring', 0, -1, 'I want a substring'],\n            ['I want a substring', 9, -1, 'substring'],\n            ['I want a substring', 9, 3, 'sub'],\n            ['Caract\u251c\u00a9res accentu\u251c\u00aes', 0, -1, 'Caract\u251c\u00a9res accentu\u251c\u00aes'],\n            ['Caract\u251c\u00a9res accentu\u251c\u00aes', 11, -1, 'accentu\u251c\u00aes'],\n            ['Caract\u251c\u00a9res accentu\u251c\u00aes', 11, 8, 'accentu\u251c\u00ae']\n        ];\n    }\n\n    /**\n     * @dataProvider substrProvider\n     */\n    public function testSubstr($string, $start, $length, $expected)\n    {\n        $this->string(\\Toolbox::substr($string, $start, $length))\n         ->isIdenticalTo($expected);\n    }\n\n    protected function lowercaseProvider()\n    {\n        return [\n            ['GLPI', 'glpi'],\n            ['\u251c\u0113\u251c\u0142', '\u251c\u00ae\u251c\u00a9'],\n            ['glpi', 'glpi']\n        ];\n    }\n\n    /**\n     * @dataProvider lowercaseProvider\n     */\n    public function testStrtolower($upper, $lower)\n    {\n        $this->string(\\Toolbox::strtolower($upper))->isIdenticalTo($lower);\n    }\n\n    protected function uppercaseProvider()\n    {\n        return [\n            ['glpi', 'GLPI'],\n            ['\u251c\u00ae\u251c\u00a9', '\u251c\u0113\u251c\u0142'],\n            ['GlPI', 'GLPI']\n        ];\n    }\n\n    /**\n     * @dataProvider uppercaseProvider\n     */\n    public function testStrtoupper($lower, $upper)\n    {\n        $this->string(\\Toolbox::strtoupper($lower))->isIdenticalTo($upper);\n    }\n\n    protected function utfProvider()\n    {\n        return [\n            ['a simple string', true],\n            ['caract\u251c\u00a9re', true],\n            [mb_convert_encoding('caract\u251c\u00a9re', 'ISO-8859-15'), false],\n            [mb_convert_encoding('simple string', 'ISO-8859-15'), true]\n        ];\n    }\n\n    /**\n     * @dataProvider utfProvider\n     */\n    public function testSeems_utf8($string, $utf)\n    {\n        $this->boolean(\\Toolbox::seems_utf8($string))->isIdenticalTo($utf);\n    }\n\n    public function testSaveAndDeletePicture()\n    {\n       // Save an image twice\n        $test_file = __DIR__ . '/../files/test.png';\n        copy(__DIR__ . '/../../pics/add_dropdown.png', $test_file); // saved image will be removed from FS\n        $first_pict = \\Toolbox::savePicture($test_file);\n        $this->string($first_pict)->matches('#[^/]+/.+\\.png#'); // generated random name inside subdir\n\n        copy(__DIR__ . '/../../pics/add_dropdown.png', $test_file); // saved image will be removed from FS\n        $second_pict = \\Toolbox::savePicture($test_file);\n        $this->string($second_pict)->matches('#[^/]+/.+\\.png#'); // generated random name inside subdir\n\n       // Check that second saving of same image is not overriding first saved image.\n        $this->string($first_pict)->isNotEqualTo($second_pict);\n\n       // Delete saved images\n        $this->boolean(\\Toolbox::deletePicture($first_pict))->isTrue();\n        $this->boolean(\\Toolbox::deletePicture($second_pict))->isTrue();\n\n       // Save not an image\n        $this->boolean(\\Toolbox::savePicture(__DIR__ . '/../notanimage.jpg'))->isFalse();\n\n       // Save and delete unexisting files\n        $this->boolean(\\Toolbox::savePicture('notafile.jpg'))->isFalse();\n        $this->boolean(\\Toolbox::deletePicture('notafile.jpg'))->isFalse();\n    }\n\n    protected function getPictureUrlProvider()\n    {\n        global $CFG_GLPI;\n\n        return [\n            [\n                'path' => '',\n                'url'  => null,\n            ],\n            [\n                'path' => 'image.jpg',\n                'url'  => $CFG_GLPI['root_doc'] . '/front/document.send.php?file=_pictures/image.jpg',\n            ],\n            [\n                'path' => 'xss\\' onclick=\"alert(\\'PWNED\\')\".jpg',\n                'url'  => $CFG_GLPI['root_doc'] . '/front/document.send.php?file=_pictures/xss&apos; onclick=&quot;alert(&apos;PWNED&apos;)&quot;.jpg',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider getPictureUrlProvider\n     */\n    public function testGetPictureUrl($path, $url)\n    {\n        $this->variable(\\Toolbox::getPictureUrl($path))->isIdenticalTo($url);\n    }\n\n    /**\n     * Data provider for self::testConvertTagToImage().\n     */\n    protected function convertTagToImageProvider()\n    {\n        $data = [];\n\n        foreach ([\\Computer::class, \\Change::class, \\Problem::class, \\Ticket::class] as $itemtype) {\n            $item = new $itemtype();\n            $item->fields['id'] = mt_rand(1, 50);\n\n            $img_url = '/front/document.send.php?docid={docid}'; //{docid} to replace by generated doc id\n            if ($item instanceof \\CommonDBTM) {\n                $img_url .= '&itemtype=' . $item->getType();\n                $img_url .= '&items_id=' . $item->fields['id'];\n            }\n\n            $data[] = [\n                'item'         => $item,\n                'expected_url' => $img_url,\n            ];\n\n            if ($item instanceof \\CommonITILObject) {\n                $fup = new \\ITILFollowup();\n                $fup->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $fup,\n                    'expected_url' => $img_url,\n                ];\n\n                $solution = new \\ITILSolution();\n                $solution->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $solution,\n                    'expected_url' => $img_url,\n                ];\n\n                $task_itemtype = $itemtype . 'Task';\n                $task = new $task_itemtype();\n                $task->input['_job'] = $item;\n                $data[] = [\n                    'item'         => $task,\n                    'expected_url' => $img_url,\n                ];\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * Check conversion of tags to images.\n     *\n     * @dataProvider convertTagToImageProvider\n     */\n    public function testConvertTagToImage($item, $expected_url)\n    {\n\n        $img_tag = uniqid('', true);\n\n       // Create document in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'basic document',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text   = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url   = str_replace('{docid}', $doc_id, $expected_url);\n        $expected_result = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result);\n    }\n\n    /**\n     * Data provider for self::testBaseUrlInConvertTagToImage().\n     */\n    protected function convertTagToImageBaseUrlProvider()\n    {\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n        $img_url = '/front/document.send.php?docid={docid}'; //{docid} to replace by generated doc id\n        $img_url .= '&itemtype=' . $item->getType();\n        $img_url .= '&items_id=' . $item->fields['id'];\n\n        return [\n            [\n                'url_base'     => 'http://glpi.domain.org',\n                'item'         => $item,\n                'expected_url' => $img_url,\n            ],\n            [\n                'url_base'     => 'http://www.domain.org/glpi/v9.4/',\n                'item'         => $item,\n                'expected_url' => '/glpi/v9.4/' . $img_url,\n            ],\n        ];\n    }\n\n    /**\n     * Check base url handling in conversion of tags to images.\n     *\n     * @dataProvider convertTagToImageBaseUrlProvider\n     */\n    public function testBaseUrlInConvertTagToImage($url_base, $item, $expected_url)\n    {\n\n        $img_tag = uniqid('', true);\n\n       // Create document in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'basic document',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text   = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url   = str_replace('{docid}', $doc_id, $expected_url);\n        $expected_result = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n\n       // Save old config\n        global $CFG_GLPI;\n        $old_url_base = $CFG_GLPI['url_base'];\n\n       // Get result\n        $CFG_GLPI['url_base'] = $url_base;\n        $result = \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]]);\n\n       // Restore config\n        $CFG_GLPI['url_base'] = $old_url_base;\n\n       // Validate result\n        $this->string($result)->isEqualTo($expected_result);\n    }\n\n    /**\n     * Check conversion of tags to images when contents contains multiple inlined images.\n     */\n    public function testConvertTagToImageWithMultipleInlinedImg()\n    {\n\n        $img_tag_1 = uniqid('', true);\n        $img_tag_2 = uniqid('', true);\n        $img_tag_3 = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id_1 = $document->add([\n            'name'     => 'document 1',\n            'filename' => 'img1.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_1,\n        ]);\n        $this->integer((int)$doc_id_1)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_2 = $document->add([\n            'name'     => 'document 2',\n            'filename' => 'img2.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_2,\n        ]);\n        $this->integer((int)$doc_id_2)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_3 = $document->add([\n            'name'     => 'document 3',\n            'filename' => 'img3.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag_3,\n        ]);\n        $this->integer((int)$doc_id_3)->isGreaterThan(0);\n\n        $doc_data = [\n            $doc_id_1 => ['tag' => $img_tag_1],\n            $doc_id_2 => ['tag' => $img_tag_2],\n            $doc_id_3 => ['tag' => $img_tag_3],\n        ];\n\n        $content_text    = '';\n        $expected_result = '';\n        foreach ($doc_data as $doc_id => $doc) {\n            $expected_url    = '/front/document.send.php?docid=' . $doc_id;\n            $expected_url    .= '&itemtype=' . $item->getType();\n            $expected_url    .= '&items_id=' . $item->fields['id'];\n            $content_text    .= '<img id=\"' . $doc['tag'] . '\" width=\"10\" height=\"10\" />';\n            $expected_result .= '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $doc['tag'] . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n        }\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, $doc_data)\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, $doc_data)\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, $doc_data)\n        )->isEqualTo($expected_result);\n    }\n\n    /**\n     * Check conversion of tags to images when multiple document matches same tag.\n     */\n    public function testConvertTagToImageWithMultipleDocMatchesSameTag()\n    {\n\n        $img_tag = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id_1 = $document->add([\n            'name'     => 'duplicated document 1',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id_1)->isGreaterThan(0);\n\n        $document = new \\Document();\n        $doc_id_2 = $document->add([\n            'name'     => 'duplicated document 2',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id_2)->isGreaterThan(0);\n\n        $content_text    = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $expected_url_1    = '/front/document.send.php?docid=' . $doc_id_1;\n        $expected_url_1     .= '&itemtype=' . $item->getType();\n        $expected_url_1     .= '&items_id=' . $item->fields['id'];\n        $expected_result_1 = '<a href=\"' . $expected_url_1 . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url_1 . '\" /></a>';\n        $expected_url_2    = '/front/document.send.php?docid=' . $doc_id_2;\n        $expected_url_2     .= '&itemtype=' . $item->getType();\n        $expected_url_2     .= '&items_id=' . $item->fields['id'];\n        $expected_result_2 = '<a href=\"' . $expected_url_2 . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url_2 . '\" /></a>';\n\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result_1));\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result_2));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result_1));\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result_2));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id_1 => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result_1);\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id_2 => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result_2);\n    }\n\n    /**\n     * Check conversion of tags to images when content contains multiple times same inlined image.\n     */\n    public function testConvertTagToImageWithDuplicatedInlinedImg()\n    {\n\n        $img_tag = uniqid('', true);\n\n        $item = new \\Ticket();\n        $item->fields['id'] = mt_rand(1, 50);\n\n       // Create multiple documents in DB\n        $document = new \\Document();\n        $doc_id = $document->add([\n            'name'     => 'img 1',\n            'filename' => 'img.png',\n            'mime'     => 'image/png',\n            'tag'      => $img_tag,\n        ]);\n        $this->integer((int)$doc_id)->isGreaterThan(0);\n\n        $content_text     = '<img id=\"' . $img_tag . '\" width=\"10\" height=\"10\" />';\n        $content_text    .= $content_text;\n        $expected_url     = '/front/document.send.php?docid=' . $doc_id;\n        $expected_url    .= '&itemtype=' . $item->getType();\n        $expected_url    .= '&items_id=' . $item->fields['id'];\n        $expected_result  = '<a href=\"' . $expected_url . '\" target=\"_blank\" ><img alt=\"' . $img_tag . '\" width=\"10\" src=\"' . $expected_url . '\" /></a>';\n        $expected_result .= $expected_result;\n\n        // Processed data is expected to be sanitized, and expected result should remain sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage(Sanitizer::sanitize($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(Sanitizer::sanitize($expected_result));\n\n        // Processed data may also be escaped using Toolbox::addslashes_deep(), and expected result should be escaped too\n        $this->string(\n            \\Toolbox::convertTagToImage(\\Toolbox::addslashes_deep($content_text), $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo(\\Toolbox::addslashes_deep($expected_result));\n\n        // Processed data may also be not sanitized, and expected result should not be sanitized\n        $this->string(\n            \\Toolbox::convertTagToImage($content_text, $item, [$doc_id => ['tag' => $img_tag]])\n        )->isEqualTo($expected_result);\n    }\n\n    protected function shortenNumbers()\n    {\n        return [\n            [\n                'number'    => 1500,\n                'precision' => 1,\n                'expected'  => '1.5K',\n            ], [\n                'number'    => 1600,\n                'precision' => 0,\n                'expected'  => '2K',\n            ], [\n                'number'    => 1600000,\n                'precision' => 1,\n                'expected'  => '1.6M',\n            ], [\n                'number'    => 1660000,\n                'precision' => 1,\n                'expected'  => '1.7M',\n            ], [\n                'number'    => 1600000000,\n                'precision' => 1,\n                'expected'  => '1.6B',\n            ], [\n                'number'    => 1600000000000,\n                'precision' => 1,\n                'expected'  => '1.6T',\n            ], [\n                'number'    => \"14%\",\n                'precision' => 1,\n                'expected'  => '14%',\n            ], [\n                'number'    => \"test\",\n                'precision' => 1,\n                'expected'  => 'test',\n            ]\n        ];\n    }\n\n    /**\n     * @dataProvider shortenNumbers\n     */\n    public function testShortenNumber($number, int $precision, string $expected)\n    {\n        $this->string(\\Toolbox::shortenNumber($number, $precision, false))\n         ->isEqualTo($expected);\n    }\n\n    protected function colors()\n    {\n        return [\n            [\n                'bg_color' => \"#FFFFFF\",\n                'offset'   => 40,\n                'fg_color' => '#999999',\n            ], [\n                'bg_color' => \"#FFFFFF\",\n                'offset'   => 50,\n                'fg_color' => '#808080',\n            ], [\n                'bg_color' => \"#000000\",\n                'offset'   => 40,\n                'fg_color' => '#666666',\n            ], [\n                'bg_color' => \"#000000\",\n                'offset'   => 50,\n                'fg_color' => '#808080',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider colors\n     */\n    public function testGetFgColor(string $bg_color, int $offset, string $fg_color)\n    {\n        $this->string(\\Toolbox::getFgColor($bg_color, $offset))\n         ->isEqualTo($fg_color);\n    }\n\n    protected function testIsCommonDBTMProvider()\n    {\n        return [\n            [\n                'class'         => TicketFollowup::class,\n                'is_commondbtm' => false,\n            ],\n            [\n                'class'         => Ticket::class,\n                'is_commondbtm' => true,\n            ],\n            [\n                'class'         => ITILFollowup::class,\n                'is_commondbtm' => true,\n            ],\n            [\n                'class'         => \"Not a real class\",\n                'is_commondbtm' => false,\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider testIsCommonDBTMProvider\n     */\n    public function testIsCommonDBTM(string $class, bool $is_commondbtm)\n    {\n        $this->boolean(\\Toolbox::isCommonDBTM($class))->isEqualTo($is_commondbtm);\n    }\n\n    protected function testIsAPIDeprecatedProvider()\n    {\n        return [\n            [\n                'class'         => TicketFollowup::class,\n                'is_deprecated' => true,\n            ],\n            [\n                'class'         => Ticket::class,\n                'is_deprecated' => false,\n            ],\n            [\n                'class'         => ITILFollowup::class,\n                'is_deprecated' => false,\n            ],\n            [\n                'class'         => \"Not a real class\",\n                'is_deprecated' => false,\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider testIsAPIDeprecatedProvider\n     */\n    public function testIsAPIDeprecated(string $class, bool $is_deprecated)\n    {\n        $this->boolean(\\Toolbox::isAPIDeprecated($class))->isEqualTo($is_deprecated);\n    }\n\n    protected function urlProvider()\n    {\n        return [\n            ['http://localhost', true],\n            ['https://localhost', true],\n            ['https;//localhost', false],\n            ['https://glpi-project.org', true],\n            ['https://glpi+project-org', false],\n            [' http://my.host.com', false],\n            ['http://my.host.com', true],\n            ['http://my.host.com/', true],\n            ['http://my.host.com/glpi/', true],\n            ['http://my.host.com /', false],\n            ['http://localhost:8080', true],\n            ['http://localhost:8080/', true],\n            ['http://my.host.com:8080/glpi/', true],\n            ['http://my.host.com:8080 /', false],\n            ['http://my.host.com: 8080/', false],\n            ['http://my.host.com :8080/', false],\n            ['http://helpdesk.global.glpi-project.org', true],\n            ['http://dev.helpdesk.global.glpi-project.org', true],\n            ['http://127.0.0.1', true],\n            ['http://127.0.0.1/glpi', true],\n            ['http://127.0.0.1:8080', true],\n            ['http://127.0.0.1:8080/', true],\n            ['http://127.0.0.1 :8080/', false],\n            ['http://127.0.0.1 :8080 /', false],\n            ['http://::1', true],\n            ['http://::1/glpi', true],\n            ['http://::1:8080/', true],\n            ['http://::1:8080/', true],\n            ['HTTPS://::1:8080/', true],\n            ['www.my.host.com', false],\n            ['127.0.0.1', false],\n            ['::1', false],\n            ['http://my.host.com/subdir/glpi/', true],\n            ['http://my.host.com/~subdir/glpi/', true],\n            ['https://localhost<', false],\n            ['https://localhost\"', false],\n            ['https://localhost\\'', false],\n            ['https://localhost?test=true', true],\n            ['https://localhost?test=true&othertest=false', true],\n            ['https://localhost/front/computer.php?is_deleted=0&as_map=0&criteria[0][link]=AND&criteria[0][field]=80&criteria[0][searchtype]=equals&criteria[0][value]=254&search=Search&itemtype=Computer', true],\n        ];\n    }\n\n    /**\n     * @dataProvider urlProvider\n     */\n    public function testIsValidWebUrl($url, $result)\n    {\n        $this->boolean(\\Toolbox::isValidWebUrl($url))->isIdenticalTo((bool)$result, $url);\n    }\n\n    public function testDeprecated()\n    {\n        $this->when(\n            function () {\n                \\Toolbox::deprecated('Calling this function is deprecated');\n            }\n        )->error()\n         ->withType(E_USER_DEPRECATED)\n         ->withMessage('Calling this function is deprecated')\n         ->exists();\n    }\n\n    public function hasTraitProvider()\n    {\n        return [\n            [\\Computer::class, Clonable::class, true],\n            [\\Monitor::class, Clonable::class, true],\n            [\\CommonITILObject::class, Clonable::class, true],\n            [\\Ticket::class, Clonable::class, true],\n            [\\Plugin::class, Clonable::class, false],\n            [\\Project::class, Kanban::class, true],\n            [\\Computer::class, Kanban::class, false],\n            [\\Computer::class, DCBreadcrumb::class, true],\n            [\\Ticket::class, DCBreadcrumb::class, false],\n            [\\CommonITILTask::class, PlanningEvent::class, true],\n            [\\Computer::class, PlanningEvent::class, false],\n        ];\n    }\n\n    /**\n     * @dataProvider hasTraitProvider\n     */\n    public function testHasTrait($class, $trait, $result)\n    {\n        $this->boolean(\\Toolbox::hasTrait($class, $trait))->isIdenticalTo((bool)$result);\n    }\n\n    public function testGetDocumentsFromTag()\n    {\n       // No tag provided in the tested text\n        $output = \\Toolbox::getDocumentsFromTag('');\n        $this->array($output)->hasSize(0);\n\n       // Create a document to emulate a document upload\n        $filename = 'foo.png';\n        copy(__DIR__ . '/../fixtures/uploads/foo.png', GLPI_TMP_DIR . '/' . $filename);\n        $tag = \\Rule::getUuid();\n        $input = [\n            'filename' => 'foo.png',\n            '_filename' => [\n                $filename,\n            ],\n            '_tag_filename' => [\n                $tag,\n            ],\n            '_prefix_filename' => [\n                '5e5e92ffd9bd91.11111111',\n            ]\n        ];\n        $document = new \\Document();\n        $document->add($input);\n        $this->boolean($document->isnewItem())->isFalse();\n\n        $output = \\Toolbox::getDocumentsFromTag(\"foo #$tag# bar \");\n        $this->array($output)->hasSize(1);\n    }\n\n    public function appendParametersProvider()\n    {\n        return [\n            [\n                [\n                    'a'   => 'test1',\n                    'b'   => 'test2'\n                ], '&', 'a=test1&b=test2'\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3'\n                ], '&', 'a%5B0%5D=test1&a%5B1%5D=test2&b=test3' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3*'\n                ], '&', 'a%5B0%5D=test1&a%5B1%5D=test2&b=test3%2A' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => 'test1',\n                    'b'   => 'test2'\n                ], '_', 'a=test1_b=test2'\n            ],\n            [\n                [\n                    'a'   => [\n                        'test1', 'test2'\n                    ],\n                    'b'   => 'test3'\n                ], '_', 'a%5B0%5D=test1_a%5B1%5D=test2_b=test3' // '[' converted to %5B, ']' converted to %5D\n            ],\n            [\n                [\n                    'a'   => 'test1',\n                    [], // Empty array Should be ignored\n                    'b'   => 'test2'\n                ], '&', 'a=test1&b=test2'\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider appendParametersProvider\n     */\n    public function testAppendParameters(array $params, string $separator, string $expected)\n    {\n        $this->string(\\Toolbox::append_params($params, $separator))->isEqualTo($expected);\n    }\n\n    /**\n     * Data provider for testIsFloat\n     *\n     * @return Generator\n     */\n    protected function testIsFloatProvider(): Generator\n    {\n        yield [\n            'value'    => null,\n            'expected' => false,\n        ];\n\n        yield [\n            'value'    => \"\",\n            'expected' => false,\n        ];\n\n        yield [\n            'value' => \"1\",\n            'expected' => false\n        ];\n\n        yield [\n            'value' => \"1.5\",\n            'expected' => true\n        ];\n\n        yield [\n            'value' => \"7.5569569\",\n            'expected' => true\n        ];\n\n        yield [\n            'value' => \"0\",\n            'expected' => false\n        ];\n\n        yield [\n            'value' => 3.4,\n            'expected' => true\n        ];\n\n        yield [\n            'value' => 3,\n            'expected' => false\n        ];\n\n        yield [\n            'value' => \"not a float\",\n            'expected' => false,\n            'warning' => \"Calling isFloat on string\"\n        ];\n\n        yield [\n            'value' => new stdClass(),\n            'expected' => false,\n            'warning' => \"Calling isFloat on object\"\n        ];\n\n        yield [\n            'value' => [],\n            'expected' => false,\n            'warning' => \"Calling isFloat on array\"\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::IsFloat()\n     *\n     * @dataprovider testIsFloatProvider\n     *\n     * @param mixed $value\n     * @param bool $expected\n     * @param string|null $warning\n     *\n     * @return void\n     */\n    public function testIsFloat($value, bool $expected, ?string $warning = null): void\n    {\n        $result = null;\n\n        if (! is_null($warning)) {\n            $this->when(function () use ($value, &$result) {\n                $result = \\Toolbox::isFloat($value);\n            })\n                ->error()\n                ->withType(E_USER_WARNING)\n                ->withMessage($warning)\n                ->exists();\n        } else {\n            $result = \\Toolbox::isFloat($value);\n        }\n\n        $this->boolean($result)->isEqualTo($expected);\n    }\n\n    /**\n     * Data provider for testgetDecimalNumbers\n     *\n     * @return Generator\n     */\n    protected function testgetDecimalNumbersProvider(): Generator\n    {\n        yield [\n            'value' => \"1\",\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => \"1.5\",\n            'decimals' => 1\n        ];\n\n        yield [\n            'value' => \"7.5569569\",\n            'decimals' => 7\n        ];\n\n        yield [\n            'value' => \"0\",\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => 3.4,\n            'decimals' => 1\n        ];\n\n        yield [\n            'value' => 3,\n            'decimals' => 0\n        ];\n\n        yield [\n            'value' => \"not a float\",\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on string\"\n        ];\n\n        yield [\n            'value' => new stdClass(),\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on object\"\n        ];\n\n        yield [\n            'value' => [],\n            'decimals' => 0,\n            'warning' => \"Calling getDecimalNumbers on array\"\n        ];\n\n        yield [\n            'value' => 3.141592653589791415926535897914159265358979,\n            'decimals' => 13 // floatval() round up after 13 decimals\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::getDecimalNumbers()\n     *\n     * @dataprovider testgetDecimalNumbersProvider\n     *\n     * @param mixed $value\n     * @param int $decimals\n     * @param string|null $warning\n     *\n     * @return void\n     */\n    public function testGetDecimalNumbers($value, int $decimals, ?string $warning = null): void\n    {\n        $result = null;\n\n        if (! is_null($warning)) {\n            $this->when(function () use ($value, &$result) {\n                $result = \\Toolbox::getDecimalNumbers($value);\n            })\n                ->error()\n                ->withType(E_USER_WARNING)\n                ->withMessage($warning)\n                ->exists();\n        } else {\n            $result = \\Toolbox::getDecimalNumbers($value);\n        }\n\n        $this->integer($result)->isEqualTo($decimals);\n    }\n\n    /**\n     * Data provider for testGetMioSizeFromString\n     *\n     * @return Generator\n     */\n    protected function testGetMioSizeFromStringProvider(): Generator\n    {\n        yield [\n            'size'     => \"1024\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024 mo\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024 mio\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"1024MO\",\n            'expected' => 1024,\n        ];\n\n        yield [\n            'size'     => \"2 gio\",\n            'expected' => 2048,\n        ];\n\n        yield [\n            'size'     => \"2gO\",\n            'expected' => 2048,\n        ];\n\n        yield [\n            'size'     => \"2 tio\",\n            'expected' => 2097152,\n        ];\n\n        yield [\n            'size'     => \"2TO\",\n            'expected' => 2097152,\n        ];\n    }\n\n    /**\n     * Tests for Toolbox::getMioSizeFromString()\n     *\n     * @dataprovider testGetMioSizeFromStringProvider\n     *\n     * @param string $value\n     * @param mixed $expected\n     *\n     * @return void\n     */\n    public function testGetMioSizeFromString(string $size, $expected): void\n    {\n        $result = \\Toolbox::getMioSizeFromString($size);\n        $this->variable($result)->isEqualTo($expected);\n    }\n\n    protected function safeUrlProvider(): iterable\n    {\n        // Invalid URLs are refused\n        yield [\n            'url'      => '',\n            'expected' => false,\n        ];\n        yield [\n            'url'      => ' ',\n            'expected' => false,\n        ];\n\n        // Invalid schemes are refused\n        yield [\n            'url'      => 'file://tmp/test',\n            'expected' => false,\n        ];\n        yield [\n            'url'      => 'test://localhost/',\n            'expected' => false,\n        ];\n\n        // Local file are refused\n        yield [\n            'url'      => '//tmp/test',\n            'expected' => false,\n        ];\n\n        // http, https and feed URLs are accepted, unless they contains a user or port information\n        foreach (['http', 'https', 'feed'] as $scheme) {\n            foreach (['', '/', '/path/to/feed.php'] as $path) {\n                yield [\n                    'url'      => sprintf('%s://localhost%s', $scheme, $path),\n                    'expected' => true,\n                ];\n                yield [\n                    'url'      => sprintf('%s://localhost:8080%s', $scheme, $path),\n                    'expected' => false,\n                ];\n                yield [\n                    'url'      => sprintf('%s://test@localhost%s', $scheme, $path),\n                    'expected' => false,\n                ];\n                yield [\n                    'url'      => sprintf('%s://test:pass@localhost%s', $scheme, $path),\n                    'expected' => false,\n                ];\n            }\n        }\n\n        // Custom allowlist with multiple entries\n        $custom_allowlist = [\n            '|^https://\\w+:[^/]+@calendar.mydomain.tld/|',\n            '|//intra.mydomain.tld/|',\n        ];\n        yield [\n            'url'       => 'https://calendar.external.tld/',\n            'expected'  => false,\n            'allowlist' => $custom_allowlist,\n        ];\n        yield [\n            'url'       => 'https://user:pass@calendar.mydomain.tld/',\n            'expected'  => true, // validates first item of allowlist\n            'allowlist' => $custom_allowlist,\n        ];\n        yield [\n            'url'       => 'http://intra.mydomain.tld/news.feed.php',\n            'expected'  => true, // validates second item of allowlist\n            'allowlist' => $custom_allowlist,\n        ];\n    }\n\n\n    /**\n     * @dataProvider safeUrlProvider\n     */\n    public function testIsUrlSafe(string $url, bool $expected, ?array $allowlist = null): void\n    {\n        $params = [$url];\n        if ($allowlist !== null) {\n            $params[] = $allowlist;\n        }\n        $this->boolean(call_user_func_array('Toolbox::isUrlSafe', $params))->isEqualTo($expected);\n    }\n}\n"], "filenames": [".composer-require-checker.config.json", "css/legacy/includes/_planning.scss", "inc/based_config.php", "src/Planning.php", "src/RSSFeed.php", "src/System/Status/StatusChecker.php", "src/Toolbox.php", "templates/components/rss_feed.html.twig", "tests/bootstrap.php", "tests/functionnal/Toolbox.php"], "buggy_code_start_loc": [37, 110, 84, 1006, 606, 395, 1096, 36, 54, 69], "buggy_code_end_loc": [38, 110, 131, 1398, 905, 400, 1359, 37, 54, 1433], "fixing_code_start_loc": [37, 111, 85, 1006, 605, 395, 1097, 36, 55, 69], "fixing_code_end_loc": [38, 116, 136, 1414, 934, 410, 1408, 37, 63, 1519], "type": "CWE-918", "message": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Usage of RSS feeds or extenal calendar in planning is subject to SSRF exploit. Server-side requests can be used to scan server port or services opened on GLPI server or its private network. Queries responses are not exposed to end-user (blind SSRF). Users are advised to upgrade to version 10.0.3 to resolve this issue. There are no known workarounds.", "other": {"cve": {"id": "CVE-2022-36112", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-14T18:15:10.697", "lastModified": "2022-09-19T16:13:17.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Usage of RSS feeds or extenal calendar in planning is subject to SSRF exploit. Server-side requests can be used to scan server port or services opened on GLPI server or its private network. Queries responses are not exposed to end-user (blind SSRF). Users are advised to upgrade to version 10.0.3 to resolve this issue. There are no known workarounds."}, {"lang": "es", "value": "GLPI son las siglas de Gestionnaire Libre de Parc Informatique y es un Paquete de Software Libre de Administraci\u00f3n de Activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. El uso de los canales RSS o del calendario externo en la planificaci\u00f3n est\u00e1 sujeto a una explotaci\u00f3n de tipo SSRF. Las peticiones del lado del servidor pueden usarse para escanear el puerto del servidor o los servicios abiertos en el servidor GLPI o su red privada. Las respuestas a las consultas no est\u00e1n expuestas al usuario final (SSRF ciego). Es recomendado a usuarios actualizar a versi\u00f3n 10.0.3 para resolver este problema. No se presentan mitigaciones conocidas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.3", "matchCriteriaId": "F1118A51-CFED-4D17-8344-EA94C8F77EAD"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/ad66d69049ae02bead8ed0f4ee654a458643244e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-rqgx-gqhp-x8vv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/ad66d69049ae02bead8ed0f4ee654a458643244e"}}