{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/concatenation.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace concatenation {\n\n// This file has two implementation of Concatenation.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  int num_inputs = node->inputs->size;\n\n  // The number of dimensions of the input tensors must match, and all\n  // dimensions except 'axis' must be equal.\n  const TfLiteTensor* t0;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &t0));\n  TfLiteType input_type = t0->type;\n  if (axis < 0) axis += t0->dims->size;\n  TF_LITE_ENSURE(context, axis >= 0);\n  TF_LITE_ENSURE(context, axis < t0->dims->size);\n\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n  TF_LITE_ENSURE(context,\n                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||\n                     input_type == kTfLiteInt8 || input_type == kTfLiteInt16 ||\n                     input_type == kTfLiteInt32 || input_type == kTfLiteInt64 ||\n                     input_type == kTfLiteBool);\n\n  // Output dimensions will match input dimensions, except 'axis', which\n  // will be the sum of inputs\n  int sum_axis = t0->dims->data[axis];\n  for (int i = 1; i < num_inputs; ++i) {\n    const TfLiteTensor* t;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));\n    TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);\n    TF_LITE_ENSURE_EQ(context, t->type, input_type);\n    for (int d = 0; d < t0->dims->size; ++d) {\n      if (d == axis) {\n        sum_axis += t->dims->data[axis];\n      } else {\n        TF_LITE_ENSURE_EQ(context, t->dims->data[d], t0->dims->data[d]);\n      }\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(t0->dims->size);\n  for (int d = 0; d < t0->dims->size; ++d) {\n    output_size->data[d] = (d == axis) ? sum_axis : t0->dims->data[d];\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input_type);\n\n  if (input_type == kTfLiteInt8) {\n    // Make sure there is no re-scaling needed for Int8 quantized kernel. This\n    // is a restriction we introduced to Int8 kernels.\n    VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);\n    for (int i = 0; i < node->inputs->size; ++i) {\n      const TfLiteTensor* t;\n      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));\n      TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);\n      TF_LITE_ENSURE_EQ(context, t->params.zero_point,\n                        output->params.zero_point);\n    }\n  }\n\n  if (input_type == kTfLiteInt16) {\n    // Make sure that all Int16 inputs have a null zero-point.\n    for (int i = 0; i < node->inputs->size; ++i) {\n      const TfLiteTensor* t = GetInput(context, node, i);\n      TF_LITE_ENSURE_EQ(context, t->params.zero_point, 0);\n    }\n    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  if (axis < 0) axis += output->dims->size;\n\n// TODO(ahentz): Creating 'all_inputs' below is not very efficient. We should\n// allocate and populate these during Prepare().\n// TODO(ycling): Activation function parameter is ignored. For now we don't have\n// a model with a Concatenation with fused activation function.\n#define TF_LITE_CONCATENATION(scalar)                                         \\\n  {                                                                           \\\n    VectorOfTensors<scalar> all_inputs(*context, *node->inputs);              \\\n    tflite::ConcatenationParams op_params;                                    \\\n    op_params.axis = axis;                                                    \\\n    op_params.inputs_count = node->inputs->size;                              \\\n    if (kernel_type == kReference) {                                          \\\n      reference_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    } else {                                                                  \\\n      optimized_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    }                                                                         \\\n  }\n\n#define TF_LITE_CONCATENATION_QUANTIZED()                         \\\n  {                                                               \\\n    VectorOfQuantizedTensors all_inputs(*context, *node->inputs); \\\n    tflite::ConcatenationParams op_params;                        \\\n    op_params.axis = axis;                                        \\\n    op_params.input_zeropoint = all_inputs.zero_point();          \\\n    op_params.input_scale = all_inputs.scale();                   \\\n    op_params.inputs_count = node->inputs->size;                  \\\n    op_params.output_zeropoint = output->params.zero_point;       \\\n    op_params.output_scale = output->params.scale;                \\\n    if (kernel_type == kReference) {                              \\\n      reference_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    } else {                                                      \\\n      optimized_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    }                                                             \\\n  }\n\n  switch (output->type) {  // Already know in/outtypes are same.\n    case kTfLiteFloat32:\n      TF_LITE_CONCATENATION(float);\n      break;\n    case kTfLiteInt32:\n      TF_LITE_CONCATENATION(int32);\n      break;\n    case kTfLiteUInt8:\n      TF_LITE_CONCATENATION_QUANTIZED();\n      break;\n    case kTfLiteInt8:\n      TF_LITE_CONCATENATION(int8_t);\n      break;\n    case kTfLiteInt64:\n      TF_LITE_CONCATENATION(int64_t);\n      break;\n    case kTfLiteInt16:\n      TF_LITE_CONCATENATION(int16_t);\n      break;\n    case kTfLiteBool:\n      TF_LITE_CONCATENATION(bool);\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' is not supported currently.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n#undef TF_LITE_CONCATENATION_QUANTIZED\n#undef TF_LITE_CONCATENATION\n\n  return kTfLiteOk;\n}\n\n#undef TF_LITE_MACRO_DISPATCH\n\n}  // namespace concatenation\n\nTfLiteRegistration* Register_CONCATENATION_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION() {\n  // TODO(ahentz): It turns out the two versions of Concatenation are almost\n  // identical, so we should consider removing one.\n  return Register_CONCATENATION_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/concatenation.h\"\n\n#include <stdint.h>\n\n#include <limits>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace concatenation {\n\n// This file has two implementation of Concatenation.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  int num_inputs = node->inputs->size;\n\n  // The number of dimensions of the input tensors must match, and all\n  // dimensions except 'axis' must be equal.\n  const TfLiteTensor* t0;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &t0));\n  TfLiteType input_type = t0->type;\n  if (axis < 0) axis += t0->dims->size;\n  TF_LITE_ENSURE(context, axis >= 0);\n  TF_LITE_ENSURE(context, axis < t0->dims->size);\n\n  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);\n  TF_LITE_ENSURE(context,\n                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||\n                     input_type == kTfLiteInt8 || input_type == kTfLiteInt16 ||\n                     input_type == kTfLiteInt32 || input_type == kTfLiteInt64 ||\n                     input_type == kTfLiteBool);\n\n  // Output dimensions will match input dimensions, except 'axis', which\n  // will be the sum of inputs\n  int sum_axis = t0->dims->data[axis];\n  for (int i = 1; i < num_inputs; ++i) {\n    const TfLiteTensor* t;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));\n    TF_LITE_ENSURE_EQ(context, t->dims->size, t0->dims->size);\n    TF_LITE_ENSURE_EQ(context, t->type, input_type);\n    for (int d = 0; d < t0->dims->size; ++d) {\n      if (d == axis) {\n        // Avoid integer overflow in sum_axis below\n        TF_LITE_ENSURE(context, t->dims->data[axis] >= 0);\n        TF_LITE_ENSURE(context, t->dims->data[axis] <=\n                                    std::numeric_limits<int>::max() - sum_axis);\n        sum_axis += t->dims->data[axis];\n      } else {\n        TF_LITE_ENSURE_EQ(context, t->dims->data[d], t0->dims->data[d]);\n      }\n    }\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(t0->dims->size);\n  for (int d = 0; d < t0->dims->size; ++d) {\n    output_size->data[d] = (d == axis) ? sum_axis : t0->dims->data[d];\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input_type);\n\n  if (input_type == kTfLiteInt8) {\n    // Make sure there is no re-scaling needed for Int8 quantized kernel. This\n    // is a restriction we introduced to Int8 kernels.\n    VectorOfTensors<int8_t> all_inputs(*context, *node->inputs);\n    for (int i = 0; i < node->inputs->size; ++i) {\n      const TfLiteTensor* t;\n      TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, i, &t));\n      TF_LITE_ENSURE_EQ(context, t->params.scale, output->params.scale);\n      TF_LITE_ENSURE_EQ(context, t->params.zero_point,\n                        output->params.zero_point);\n    }\n  }\n\n  if (input_type == kTfLiteInt16) {\n    // Make sure that all Int16 inputs have a null zero-point.\n    for (int i = 0; i < node->inputs->size; ++i) {\n      const TfLiteTensor* t = GetInput(context, node, i);\n      TF_LITE_ENSURE_EQ(context, t->params.zero_point, 0);\n    }\n    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);\n  }\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteConcatenationParams*>(node->builtin_data);\n  int axis = params->axis;\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  if (axis < 0) axis += output->dims->size;\n\n// TODO(ahentz): Creating 'all_inputs' below is not very efficient. We should\n// allocate and populate these during Prepare().\n// TODO(ycling): Activation function parameter is ignored. For now we don't have\n// a model with a Concatenation with fused activation function.\n#define TF_LITE_CONCATENATION(scalar)                                         \\\n  {                                                                           \\\n    VectorOfTensors<scalar> all_inputs(*context, *node->inputs);              \\\n    tflite::ConcatenationParams op_params;                                    \\\n    op_params.axis = axis;                                                    \\\n    op_params.inputs_count = node->inputs->size;                              \\\n    if (kernel_type == kReference) {                                          \\\n      reference_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    } else {                                                                  \\\n      optimized_ops::Concatenation(op_params, all_inputs.shapes(),            \\\n                                   all_inputs.data(), GetTensorShape(output), \\\n                                   GetTensorData<scalar>(output));            \\\n    }                                                                         \\\n  }\n\n#define TF_LITE_CONCATENATION_QUANTIZED()                         \\\n  {                                                               \\\n    VectorOfQuantizedTensors all_inputs(*context, *node->inputs); \\\n    tflite::ConcatenationParams op_params;                        \\\n    op_params.axis = axis;                                        \\\n    op_params.input_zeropoint = all_inputs.zero_point();          \\\n    op_params.input_scale = all_inputs.scale();                   \\\n    op_params.inputs_count = node->inputs->size;                  \\\n    op_params.output_zeropoint = output->params.zero_point;       \\\n    op_params.output_scale = output->params.scale;                \\\n    if (kernel_type == kReference) {                              \\\n      reference_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    } else {                                                      \\\n      optimized_ops::ConcatenationWithScaling(                    \\\n          op_params, all_inputs.shapes(), all_inputs.data(),      \\\n          GetTensorShape(output), GetTensorData<uint8>(output));  \\\n    }                                                             \\\n  }\n\n  switch (output->type) {  // Already know in/outtypes are same.\n    case kTfLiteFloat32:\n      TF_LITE_CONCATENATION(float);\n      break;\n    case kTfLiteInt32:\n      TF_LITE_CONCATENATION(int32);\n      break;\n    case kTfLiteUInt8:\n      TF_LITE_CONCATENATION_QUANTIZED();\n      break;\n    case kTfLiteInt8:\n      TF_LITE_CONCATENATION(int8_t);\n      break;\n    case kTfLiteInt64:\n      TF_LITE_CONCATENATION(int64_t);\n      break;\n    case kTfLiteInt16:\n      TF_LITE_CONCATENATION(int16_t);\n      break;\n    case kTfLiteBool:\n      TF_LITE_CONCATENATION(bool);\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' is not supported currently.\",\n                           TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n#undef TF_LITE_CONCATENATION_QUANTIZED\n#undef TF_LITE_CONCATENATION\n\n  return kTfLiteOk;\n}\n\n#undef TF_LITE_MACRO_DISPATCH\n\n}  // namespace concatenation\n\nTfLiteRegistration* Register_CONCATENATION_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, concatenation::Prepare,\n      concatenation::Eval<concatenation::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_CONCATENATION() {\n  // TODO(ahentz): It turns out the two versions of Concatenation are almost\n  // identical, so we should consider removing one.\n  return Register_CONCATENATION_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/concatenation.cc"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [71], "fixing_code_start_loc": [18], "fixing_code_end_loc": [78], "type": "CWE-190", "message": "TensorFlow is an end-to-end open source platform for machine learning. The TFLite implementation of concatenation is vulnerable to an integer overflow issue(https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76). An attacker can craft a model such that the dimensions of one of the concatenation input overflow the values of `int`. TFLite uses `int` to represent tensor dimensions, whereas TF uses `int64`. Hence, valid TF models can trigger an integer overflow when converted to TFLite format. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29601", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.487", "lastModified": "2021-05-20T16:01:15.770", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. The TFLite implementation of concatenation is vulnerable to an integer overflow issue(https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76). An attacker can craft a model such that the dimensions of one of the concatenation input overflow the values of `int`. TFLite uses `int` to represent tensor dimensions, whereas TF uses `int64`. Hence, valid TF models can trigger an integer overflow when converted to TFLite format. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;La implementaci\u00f3n de TFLite de la concatenaci\u00f3n es vulnerable a un problema de desbordamiento de enteros (https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76).&#xa0;Un atacante puede dise\u00f1ar un modelo tal que las dimensiones de una de las entradas de concatenaci\u00f3n desborden los valores de \"int\".&#xa0;TFLite usa \"int\" para representar las dimensiones del tensor, mientras que TF usa \"int64\".&#xa0;Por lo tanto, los modelos TF v\u00e1lidos pueden desencadenar un desbordamiento de enteros cuando se convierten al formato TFLite.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 3.6}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/4253f96a58486ffe84b61c0415bb234a4632ee73", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c84-4hx6-xmm4", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/4253f96a58486ffe84b61c0415bb234a4632ee73"}}