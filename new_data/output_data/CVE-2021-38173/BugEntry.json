{"buggy_code": ["#!/bin/bash\n\nset -e\nset -u\n\nexport PATH=/sbin:/bin:/usr/sbin:/usr/bin\n\nenable_log=\nrestrict_path_list=\nallow_list=\nallow_exact_list=\nallow_rate_limit=1\nallow_stream_buffer=1\nallow_compress=1\ncompress_list=\"gzip|pigz|bzip2|pbzip2|xz|lzop|lz4|zstd\"\n\n# note that the backslash is NOT a metacharacter in a POSIX bracket expression!\noption_match='-[a-zA-Z0-9=-]+'   # matches short as well as long options\nfile_match='[0-9a-zA-Z_@+./-]*'  # matches file path (equal to $file_match in btrbk)\n\nlog_cmd()\n{\n    if [[ -n \"$enable_log\" ]]; then\n        logger -p $1 -t ssh_filter_btrbk.sh \"$2 (Name: ${LOGNAME:-<unknown>}; Remote: ${SSH_CLIENT:-<unknown>})${3:+: $3}: $SSH_ORIGINAL_COMMAND\"\n    fi\n}\n\nallow_cmd()\n{\n    allow_list=\"${allow_list}|$1\"\n}\n\nallow_exact_cmd()\n{\n    allow_exact_list=\"${allow_exact_list}|$1\"\n}\n\nreject_and_die()\n{\n    local reason=$1\n    log_cmd \"auth.err\" \"btrbk REJECT\" \"$reason\"\n    echo \"ERROR: ssh_filter_btrbk.sh: ssh command rejected: $reason: $SSH_ORIGINAL_COMMAND\" 1>&2\n    exit 255\n}\n\nrun_cmd()\n{\n    log_cmd \"auth.info\" \"btrbk ACCEPT\"\n    eval \" $SSH_ORIGINAL_COMMAND\"\n}\n\nreject_filtered_cmd()\n{\n    if [[ -n \"$restrict_path_list\" ]]; then\n\t# match any of restrict_path_list with or without trailing slash,\n\t# or any file/directory (matching file_match) below restrict_path\n\tpath_match=\"(${restrict_path_list})(/${file_match})?\"\n    else\n\t# match any absolute file/directory (matching file_match)\n\tpath_match=\"/${file_match}\"\n    fi\n\n    if [[ -n \"$allow_compress\" ]]; then\n        decompress_match=\"(${compress_list}) -d -c( -[pT][0-9]+)?\"\n        compress_match=\"(${compress_list}) -c( -[0-9])?( -[pT][0-9]+)?\"\n    else\n        decompress_match=\n        compress_match=\n    fi\n\n    # rate_limit_remote and stream_buffer_remote use combined\n    # \"mbuffer\" as of btrbk-0.29.0\n    if [[ -n \"$allow_stream_buffer\" ]] || [[ -n \"$allow_rate_limit\" ]]; then\n        mbuffer_match=\"mbuffer -v 1 -q( -s [0-9]+[kmgKMG]?)?( -m [0-9]+[kmgKMG]?)?( -[rR] [0-9]+[kmgtKMGT]?)?\"\n    else\n        mbuffer_match=\n    fi\n\n    # allow multiple paths (e.g. \"btrfs subvolume snapshot <src> <dst>\")\n    allow_cmd_match=\"(${allow_list})( ${option_match})*( ${path_match})+\"\n    stream_in_match=\"(${decompress_match} \\| )?(${mbuffer_match} \\| )?\"\n    stream_out_match=\"( \\| ${mbuffer_match})?( \\| ${compress_match}$)?\"\n\n    allow_stream_match=\"^${stream_in_match}${allow_cmd_match}${stream_out_match}\"\n    if [[ $SSH_ORIGINAL_COMMAND =~ $allow_stream_match ]] ; then\n        return 0\n    fi\n\n    exact_cmd_match=\"^${allow_exact_list}$\";\n    if [[ $SSH_ORIGINAL_COMMAND =~ $exact_cmd_match ]] ; then\n        return 0\n    fi\n\n    reject_and_die \"disallowed command${restrict_path_list:+ (restrict-path: \\\"${restrict_path_list//|/\\\", \\\"}\\\")}\"\n}\n\n\n# check for \"--sudo\" option before processing other options\nsudo_prefix=\nfor key; do\n    [[ \"$key\" == \"--sudo\" ]] && sudo_prefix=\"sudo -n \"\ndone\n\nwhile [[ \"$#\" -ge 1 ]]; do\n    key=\"$1\"\n\n    case $key in\n      -l|--log)\n          enable_log=1\n          ;;\n\n      --sudo)\n          # already processed above\n          ;;\n\n      -p|--restrict-path)\n          restrict_path_list=\"${restrict_path_list}|${2%/}\"  # add to list while removing trailing slash\n          shift # past argument\n          ;;\n\n      -s|--source)\n          allow_cmd \"${sudo_prefix}btrfs subvolume snapshot\"\n          allow_cmd \"${sudo_prefix}btrfs send\"\n          ;;\n\n      -t|--target)\n          allow_cmd \"${sudo_prefix}btrfs receive\"\n          allow_cmd \"${sudo_prefix}mkdir\"\n          ;;\n\n      -c|--compress)\n          # deprecated option, compression is always allowed\n          ;;\n\n      -d|--delete)\n          allow_cmd \"${sudo_prefix}btrfs subvolume delete\"\n          ;;\n\n      -i|--info)\n          allow_cmd \"${sudo_prefix}btrfs subvolume find-new\"\n          allow_cmd \"${sudo_prefix}btrfs filesystem usage\"\n          ;;\n\n      --snapshot)\n          allow_cmd \"${sudo_prefix}btrfs subvolume snapshot\"\n          ;;\n\n      --send)\n          allow_cmd \"${sudo_prefix}btrfs send\"\n          ;;\n\n      --receive)\n          allow_cmd \"${sudo_prefix}btrfs receive\"\n          ;;\n\n      *)\n          echo \"ERROR: ssh_filter_btrbk.sh: failed to parse command line option: $key\" 1>&2\n          exit 255\n          ;;\n    esac\n    shift\ndone\n\n# NOTE: subvolume queries are NOT affected by \"--restrict-path\":\n# btrbk also calls show/list on the mount point of the subvolume\nallow_exact_cmd \"${sudo_prefix}btrfs subvolume (show|list)( ${option_match})* ${file_match}\";\nallow_cmd \"${sudo_prefix}readlink\"                    # resolve symlink\nallow_exact_cmd \"${sudo_prefix}test -d ${file_match}\" # check directory (only for compat=busybox)\nallow_exact_cmd \"cat /proc/self/mountinfo\"            # resolve mountpoints\nallow_exact_cmd \"cat /proc/self/mounts\"               # legacy, for btrbk < 0.27.0\n\n# remove leading \"|\" on alternation lists\nallow_list=${allow_list#\\|}\nallow_exact_list=${allow_exact_list#\\|}\nrestrict_path_list=${restrict_path_list#\\|}\n\ncase \"$SSH_ORIGINAL_COMMAND\" in\n    *\\.\\./*)  reject_and_die 'directory traversal'  ;;\n    *\\$*)     reject_and_die 'unsafe character \"$\"' ;;\n    *\\&*)     reject_and_die 'unsafe character \"&\"' ;;\n    *\\(*)     reject_and_die 'unsafe character \"(\"' ;;\n    *\\{*)     reject_and_die 'unsafe character \"{\"' ;;\n    *\\;*)     reject_and_die 'unsafe character \";\"' ;;\n    *\\<*)     reject_and_die 'unsafe character \"<\"' ;;\n    *\\>*)     reject_and_die 'unsafe character \">\"' ;;\n    *\\`*)     reject_and_die 'unsafe character \"`\"' ;;\n    *\\|*)     [[ -n \"$allow_compress\" ]] || [[ -n \"$allow_rate_limit\" ]] || [[ -n \"$allow_stream_buffer\" ]] || reject_and_die 'unsafe character \"|\"' ;;\nesac\n\nreject_filtered_cmd\nrun_cmd\n"], "fixing_code": ["#!/bin/bash\n\nset -e\nset -u\n\nexport PATH=/sbin:/bin:/usr/sbin:/usr/bin\n\nenable_log=\nrestrict_path_list=\nallow_list=\nallow_exact_list=\nallow_rate_limit=1\nallow_stream_buffer=1\nallow_compress=1\ncompress_list=\"gzip|pigz|bzip2|pbzip2|xz|lzop|lz4|zstd\"\n\n# note that the backslash is NOT a metacharacter in a POSIX bracket expression!\noption_match='-[a-zA-Z0-9=-]+'   # matches short as well as long options\nfile_match='[0-9a-zA-Z_@+./-]*'  # matches file path (equal to $file_match in btrbk)\n\nlog_cmd()\n{\n    if [[ -n \"$enable_log\" ]]; then\n        logger -p $1 -t ssh_filter_btrbk.sh \"$2 (Name: ${LOGNAME:-<unknown>}; Remote: ${SSH_CLIENT:-<unknown>})${3:+: $3}: $SSH_ORIGINAL_COMMAND\"\n    fi\n}\n\nallow_cmd()\n{\n    allow_list=\"${allow_list}|$1\"\n}\n\nallow_exact_cmd()\n{\n    allow_exact_list=\"${allow_exact_list}|$1\"\n}\n\nreject_and_die()\n{\n    local reason=$1\n    log_cmd \"auth.err\" \"btrbk REJECT\" \"$reason\"\n    echo \"ERROR: ssh_filter_btrbk.sh: ssh command rejected: $reason: $SSH_ORIGINAL_COMMAND\" 1>&2\n    exit 255\n}\n\nrun_cmd()\n{\n    log_cmd \"auth.info\" \"btrbk ACCEPT\"\n    eval \" $SSH_ORIGINAL_COMMAND\"\n}\n\nreject_filtered_cmd()\n{\n    if [[ -n \"$restrict_path_list\" ]]; then\n\t# match any of restrict_path_list with or without trailing slash,\n\t# or any file/directory (matching file_match) below restrict_path\n\tpath_match=\"(${restrict_path_list})(/${file_match})?\"\n    else\n\t# match any absolute file/directory (matching file_match)\n\tpath_match=\"/${file_match}\"\n    fi\n\n    if [[ -n \"$allow_compress\" ]]; then\n        decompress_match=\"(${compress_list}) -d -c( -[pT][0-9]+)?\"\n        compress_match=\"(${compress_list}) -c( -[0-9])?( -[pT][0-9]+)?\"\n    else\n        decompress_match=\n        compress_match=\n    fi\n\n    # rate_limit_remote and stream_buffer_remote use combined\n    # \"mbuffer\" as of btrbk-0.29.0\n    if [[ -n \"$allow_stream_buffer\" ]] || [[ -n \"$allow_rate_limit\" ]]; then\n        mbuffer_match=\"mbuffer -v 1 -q( -s [0-9]+[kmgKMG]?)?( -m [0-9]+[kmgKMG]?)?( -[rR] [0-9]+[kmgtKMGT]?)?\"\n    else\n        mbuffer_match=\n    fi\n\n    # allow multiple paths (e.g. \"btrfs subvolume snapshot <src> <dst>\")\n    allow_cmd_match=\"(${allow_list})( ${option_match})*( ${path_match})+\"\n    stream_in_match=\"(${decompress_match} \\| )?(${mbuffer_match} \\| )?\"\n    stream_out_match=\"( \\| ${mbuffer_match})?( \\| ${compress_match}$)?\"\n\n    allow_stream_match=\"^${stream_in_match}${allow_cmd_match}${stream_out_match}\"\n    if [[ $SSH_ORIGINAL_COMMAND =~ $allow_stream_match ]] ; then\n        return 0\n    fi\n\n    exact_cmd_match=\"^(${allow_exact_list})$\";\n    if [[ $SSH_ORIGINAL_COMMAND =~ $exact_cmd_match ]] ; then\n        return 0\n    fi\n\n    reject_and_die \"disallowed command${restrict_path_list:+ (restrict-path: \\\"${restrict_path_list//|/\\\", \\\"}\\\")}\"\n}\n\n\n# check for \"--sudo\" option before processing other options\nsudo_prefix=\nfor key; do\n    [[ \"$key\" == \"--sudo\" ]] && sudo_prefix=\"sudo -n \"\ndone\n\nwhile [[ \"$#\" -ge 1 ]]; do\n    key=\"$1\"\n\n    case $key in\n      -l|--log)\n          enable_log=1\n          ;;\n\n      --sudo)\n          # already processed above\n          ;;\n\n      -p|--restrict-path)\n          restrict_path_list=\"${restrict_path_list}|${2%/}\"  # add to list while removing trailing slash\n          shift # past argument\n          ;;\n\n      -s|--source)\n          allow_cmd \"${sudo_prefix}btrfs subvolume snapshot\"\n          allow_cmd \"${sudo_prefix}btrfs send\"\n          ;;\n\n      -t|--target)\n          allow_cmd \"${sudo_prefix}btrfs receive\"\n          allow_cmd \"${sudo_prefix}mkdir\"\n          ;;\n\n      -c|--compress)\n          # deprecated option, compression is always allowed\n          ;;\n\n      -d|--delete)\n          allow_cmd \"${sudo_prefix}btrfs subvolume delete\"\n          ;;\n\n      -i|--info)\n          allow_cmd \"${sudo_prefix}btrfs subvolume find-new\"\n          allow_cmd \"${sudo_prefix}btrfs filesystem usage\"\n          ;;\n\n      --snapshot)\n          allow_cmd \"${sudo_prefix}btrfs subvolume snapshot\"\n          ;;\n\n      --send)\n          allow_cmd \"${sudo_prefix}btrfs send\"\n          ;;\n\n      --receive)\n          allow_cmd \"${sudo_prefix}btrfs receive\"\n          ;;\n\n      *)\n          echo \"ERROR: ssh_filter_btrbk.sh: failed to parse command line option: $key\" 1>&2\n          exit 255\n          ;;\n    esac\n    shift\ndone\n\n# NOTE: subvolume queries are NOT affected by \"--restrict-path\":\n# btrbk also calls show/list on the mount point of the subvolume\nallow_exact_cmd \"${sudo_prefix}btrfs subvolume (show|list)( ${option_match})* ${file_match}\";\nallow_cmd \"${sudo_prefix}readlink\"                    # resolve symlink\nallow_exact_cmd \"${sudo_prefix}test -d ${file_match}\" # check directory (only for compat=busybox)\nallow_exact_cmd \"cat /proc/self/mountinfo\"            # resolve mountpoints\nallow_exact_cmd \"cat /proc/self/mounts\"               # legacy, for btrbk < 0.27.0\n\n# remove leading \"|\" on alternation lists\nallow_list=${allow_list#\\|}\nallow_exact_list=${allow_exact_list#\\|}\nrestrict_path_list=${restrict_path_list#\\|}\n\ncase \"$SSH_ORIGINAL_COMMAND\" in\n    *\\.\\./*)  reject_and_die 'directory traversal'  ;;\n    *\\$*)     reject_and_die 'unsafe character \"$\"' ;;\n    *\\&*)     reject_and_die 'unsafe character \"&\"' ;;\n    *\\(*)     reject_and_die 'unsafe character \"(\"' ;;\n    *\\{*)     reject_and_die 'unsafe character \"{\"' ;;\n    *\\;*)     reject_and_die 'unsafe character \";\"' ;;\n    *\\<*)     reject_and_die 'unsafe character \"<\"' ;;\n    *\\>*)     reject_and_die 'unsafe character \">\"' ;;\n    *\\`*)     reject_and_die 'unsafe character \"`\"' ;;\n    *\\|*)     [[ -n \"$allow_compress\" ]] || [[ -n \"$allow_rate_limit\" ]] || [[ -n \"$allow_stream_buffer\" ]] || reject_and_die 'unsafe character \"|\"' ;;\nesac\n\nreject_filtered_cmd\nrun_cmd\n"], "filenames": ["ssh_filter_btrbk.sh"], "buggy_code_start_loc": [89], "buggy_code_end_loc": [90], "fixing_code_start_loc": [89], "fixing_code_end_loc": [90], "type": "CWE-77", "message": "Btrbk before 0.31.2 allows command execution because of the mishandling of remote hosts filtering SSH commands using ssh_filter_btrbk.sh in authorized_keys.", "other": {"cve": {"id": "CVE-2021-38173", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-07T19:15:06.997", "lastModified": "2022-03-25T15:43:20.427", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Btrbk before 0.31.2 allows command execution because of the mishandling of remote hosts filtering SSH commands using ssh_filter_btrbk.sh in authorized_keys."}, {"lang": "es", "value": "Btrbk versiones anteriores a 0.31.2, permite una ejecuci\u00f3n de comandos debido a un manejo inapropiado de los hosts remotos que filtran los comandos SSH usando el archivo ssh_filter_btrbk.sh en la funci\u00f3n authorized_keys"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:digint:btrbk:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.31.2", "matchCriteriaId": "9093C079-EC4E-409C-BA85-5FB57A05C789"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}]}]}], "references": [{"url": "https://github.com/digint/btrbk/blob/master/ChangeLog", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/digint/btrbk/commit/58212de771c381cd4fa05625927080bf264e9584", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/09/msg00002.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BP2T32JMENJFRP2HWXR7FTTZVRTTPECL/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LM7GLTUN5YS4KE2RNBX732EAMVVGNEX3/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/digint/btrbk/commit/58212de771c381cd4fa05625927080bf264e9584"}}