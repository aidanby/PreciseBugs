{"buggy_code": ["<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39760';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * Gets the email message from the user's mailbox to add as\n * a WordPress post. Mailbox connection information must be\n * configured under Settings > Writing\n *\n * @package WordPress\n */\n\n/** Make sure that the WordPress bootstrap has run before continuing. */\nrequire(dirname(__FILE__) . '/wp-load.php');\n\n/** This filter is documented in wp-admin/options.php */\nif ( ! apply_filters( 'enable_post_by_email_configuration', true ) )\n\twp_die( __( 'This action has been disabled by the administrator.' ), 403 );\n\n/**\n * Fires to allow a plugin to do a complete takeover of Post by Email.\n *\n * @since 2.9.0\n */\ndo_action( 'wp-mail.php' );\n\n/** Get the POP3 class with which to access the mailbox. */\nrequire_once( ABSPATH . WPINC . '/class-pop3.php' );\n\n/** Only check at this interval for new messages. */\nif ( !defined('WP_MAIL_INTERVAL') )\n\tdefine('WP_MAIL_INTERVAL', 300); // 5 minutes\n\n$last_checked = get_transient('mailserver_last_checked');\n\nif ( $last_checked )\n\twp_die(__('Slow down cowboy, no need to check for new mails so often!'));\n\nset_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);\n\n$time_difference = get_option('gmt_offset') * HOUR_IN_SECONDS;\n\n$phone_delim = '::';\n\n$pop3 = new POP3();\n\nif ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )\n\twp_die( esc_html( $pop3->ERROR ) );\n\n$count = $pop3->pass( get_option('mailserver_pass') );\n\nif( false === $count )\n\twp_die( esc_html( $pop3->ERROR ) );\n\nif( 0 === $count ) {\n\t$pop3->quit();\n\twp_die( __('There doesn&#8217;t seem to be any new mail.') );\n}\n\nfor ( $i = 1; $i <= $count; $i++ ) {\n\n\t$message = $pop3->get($i);\n\n\t$bodysignal = false;\n\t$boundary = '';\n\t$charset = '';\n\t$content = '';\n\t$content_type = '';\n\t$content_transfer_encoding = '';\n\t$post_author = 1;\n\t$author_found = false;\n\tforeach ($message as $line) {\n\t\t// Body signal.\n\t\tif ( strlen($line) < 3 )\n\t\t\t$bodysignal = true;\n\t\tif ( $bodysignal ) {\n\t\t\t$content .= $line;\n\t\t} else {\n\t\t\tif ( preg_match('/Content-Type: /i', $line) ) {\n\t\t\t\t$content_type = trim($line);\n\t\t\t\t$content_type = substr($content_type, 14, strlen($content_type) - 14);\n\t\t\t\t$content_type = explode(';', $content_type);\n\t\t\t\tif ( ! empty( $content_type[1] ) ) {\n\t\t\t\t\t$charset = explode('=', $content_type[1]);\n\t\t\t\t\t$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';\n\t\t\t\t}\n\t\t\t\t$content_type = $content_type[0];\n\t\t\t}\n\t\t\tif ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {\n\t\t\t\t$content_transfer_encoding = trim($line);\n\t\t\t\t$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);\n\t\t\t\t$content_transfer_encoding = explode(';', $content_transfer_encoding);\n\t\t\t\t$content_transfer_encoding = $content_transfer_encoding[0];\n\t\t\t}\n\t\t\tif ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary=\"') ) && ( '' == $boundary ) ) {\n\t\t\t\t$boundary = trim($line);\n\t\t\t\t$boundary = explode('\"', $boundary);\n\t\t\t\t$boundary = $boundary[1];\n\t\t\t}\n\t\t\tif (preg_match('/Subject: /i', $line)) {\n\t\t\t\t$subject = trim($line);\n\t\t\t\t$subject = substr($subject, 9, strlen($subject) - 9);\n\t\t\t\t// Captures any text in the subject before $phone_delim as the subject\n\t\t\t\tif ( function_exists('iconv_mime_decode') ) {\n\t\t\t\t\t$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));\n\t\t\t\t} else {\n\t\t\t\t\t$subject = wp_iso_descrambler($subject);\n\t\t\t\t}\n\t\t\t\t$subject = explode($phone_delim, $subject);\n\t\t\t\t$subject = $subject[0];\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Set the author using the email address (From or Reply-To, the last used)\n\t\t\t * otherwise use the site admin.\n\t\t\t */\n\t\t\tif ( ! $author_found && preg_match( '/^(From|Reply-To): /', $line ) ) {\n\t\t\t\tif ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )\n\t\t\t\t\t$author = $matches[0];\n\t\t\t\telse\n\t\t\t\t\t$author = trim($line);\n\t\t\t\t$author = sanitize_email($author);\n\t\t\t\tif ( is_email($author) ) {\n\t\t\t\t\t/* translators: Post author email address */\n\t\t\t\t\techo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';\n\t\t\t\t\t$userdata = get_user_by('email', $author);\n\t\t\t\t\tif ( ! empty( $userdata ) ) {\n\t\t\t\t\t\t$post_author = $userdata->ID;\n\t\t\t\t\t\t$author_found = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( preg_match( '/Date: /i', $line ) ) { // of the form '20 Mar 2002 20:32:37 +0100'\n\t\t\t\t$ddate = str_replace( 'Date: ', '', trim( $line ) );\n\t\t\t\t$ddate = preg_replace( '!\\s*\\(.+\\)\\s*$!', '', $ddate );\t// remove parenthesised timezone string if it exists, as this confuses strtotime\n\t\t\t\t$ddate_U = strtotime( $ddate );\n\t\t\t\t$post_date = gmdate( 'Y-m-d H:i:s', $ddate_U + $time_difference );\n\t\t\t\t$post_date_gmt = gmdate( 'Y-m-d H:i:s', $ddate_U );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set $post_status based on $author_found and on author's publish_posts capability\n\tif ( $author_found ) {\n\t\t$user = new WP_User($post_author);\n\t\t$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';\n\t} else {\n\t\t// Author not found in DB, set status to pending. Author already set to admin.\n\t\t$post_status = 'pending';\n\t}\n\n\t$subject = trim($subject);\n\n\tif ( $content_type == 'multipart/alternative' ) {\n\t\t$content = explode('--'.$boundary, $content);\n\t\t$content = $content[2];\n\n\t\t// Match case-insensitive content-transfer-encoding.\n\t\tif ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {\n\t\t\t$content = explode($delim[0], $content);\n\t\t\t$content = $content[1];\n\t\t}\n\t\t$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');\n\t}\n\t$content = trim($content);\n\n\t/**\n\t * Filters the original content of the email.\n\t *\n\t * Give Post-By-Email extending plugins full access to the content, either\n\t * the raw content, or the content of the last quoted-printable section.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $content The original email content.\n\t */\n\t$content = apply_filters( 'wp_mail_original_content', $content );\n\n\tif ( false !== stripos($content_transfer_encoding, \"quoted-printable\") ) {\n\t\t$content = quoted_printable_decode($content);\n\t}\n\n\tif ( function_exists('iconv') && ! empty( $charset ) ) {\n\t\t$content = iconv($charset, get_option('blog_charset'), $content);\n\t}\n\n\t// Captures any text in the body after $phone_delim as the body\n\t$content = explode($phone_delim, $content);\n\t$content = empty( $content[1] ) ? $content[0] : $content[1];\n\n\t$content = trim($content);\n\n\t/**\n\t * Filters the content of the post submitted by email before saving.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The email content.\n\t */\n\t$post_content = apply_filters( 'phone_content', $content );\n\n\t$post_title = xmlrpc_getposttitle($content);\n\n\tif ($post_title == '') $post_title = $subject;\n\n\t$post_category = array(get_option('default_email_category'));\n\n\t$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');\n\t$post_data = wp_slash($post_data);\n\n\t$post_ID = wp_insert_post($post_data);\n\tif ( is_wp_error( $post_ID ) )\n\t\techo \"\\n\" . $post_ID->get_error_message();\n\n\t// We couldn't post, for whatever reason. Better move forward to the next email.\n\tif ( empty( $post_ID ) )\n\t\tcontinue;\n\n\t/**\n\t * Fires after a post submitted by email is published.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param int $post_ID The post ID.\n\t */\n\tdo_action( 'publish_phone', $post_ID );\n\n\techo \"\\n<p><strong>\" . __( 'Author:' ) . '</strong> ' . esc_html( $post_author ) . '</p>';\n\techo \"\\n<p><strong>\" . __( 'Posted title:' ) . '</strong> ' . esc_html( $post_title ) . '</p>';\n\n\tif(!$pop3->delete($i)) {\n\t\techo '<p>' . sprintf(\n\t\t\t/* translators: %s: POP3 error */\n\t\t\t__( 'Oops: %s' ),\n\t\t\tesc_html( $pop3->ERROR )\n\t\t) . '</p>';\n\t\t$pop3->reset();\n\t\texit;\n\t} else {\n\t\techo '<p>' . sprintf(\n\t\t\t/* translators: %s: the message ID */\n\t\t\t__( 'Mission complete. Message %s deleted.' ),\n\t\t\t'<strong>' . $i . '</strong>'\n\t\t) . '</p>';\n\t}\n\n}\n\n$pop3->quit();\n"], "fixing_code": ["<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39772';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * Gets the email message from the user's mailbox to add as\n * a WordPress post. Mailbox connection information must be\n * configured under Settings > Writing\n *\n * @package WordPress\n */\n\n/** Make sure that the WordPress bootstrap has run before continuing. */\nrequire(dirname(__FILE__) . '/wp-load.php');\n\n/** This filter is documented in wp-admin/options.php */\nif ( ! apply_filters( 'enable_post_by_email_configuration', true ) )\n\twp_die( __( 'This action has been disabled by the administrator.' ), 403 );\n\n$mailserver_url = get_option( 'mailserver_url' );\n\nif ( 'mail.example.com' === $mailserver_url || empty( $mailserver_url ) ) {\n\twp_die( __( 'This action has been disabled by the administrator.' ), 403 );\n}\n\n/**\n * Fires to allow a plugin to do a complete takeover of Post by Email.\n *\n * @since 2.9.0\n */\ndo_action( 'wp-mail.php' );\n\n/** Get the POP3 class with which to access the mailbox. */\nrequire_once( ABSPATH . WPINC . '/class-pop3.php' );\n\n/** Only check at this interval for new messages. */\nif ( !defined('WP_MAIL_INTERVAL') )\n\tdefine('WP_MAIL_INTERVAL', 300); // 5 minutes\n\n$last_checked = get_transient('mailserver_last_checked');\n\nif ( $last_checked )\n\twp_die(__('Slow down cowboy, no need to check for new mails so often!'));\n\nset_transient('mailserver_last_checked', true, WP_MAIL_INTERVAL);\n\n$time_difference = get_option('gmt_offset') * HOUR_IN_SECONDS;\n\n$phone_delim = '::';\n\n$pop3 = new POP3();\n\nif ( !$pop3->connect( get_option('mailserver_url'), get_option('mailserver_port') ) || !$pop3->user( get_option('mailserver_login') ) )\n\twp_die( esc_html( $pop3->ERROR ) );\n\n$count = $pop3->pass( get_option('mailserver_pass') );\n\nif( false === $count )\n\twp_die( esc_html( $pop3->ERROR ) );\n\nif( 0 === $count ) {\n\t$pop3->quit();\n\twp_die( __('There doesn&#8217;t seem to be any new mail.') );\n}\n\nfor ( $i = 1; $i <= $count; $i++ ) {\n\n\t$message = $pop3->get($i);\n\n\t$bodysignal = false;\n\t$boundary = '';\n\t$charset = '';\n\t$content = '';\n\t$content_type = '';\n\t$content_transfer_encoding = '';\n\t$post_author = 1;\n\t$author_found = false;\n\tforeach ($message as $line) {\n\t\t// Body signal.\n\t\tif ( strlen($line) < 3 )\n\t\t\t$bodysignal = true;\n\t\tif ( $bodysignal ) {\n\t\t\t$content .= $line;\n\t\t} else {\n\t\t\tif ( preg_match('/Content-Type: /i', $line) ) {\n\t\t\t\t$content_type = trim($line);\n\t\t\t\t$content_type = substr($content_type, 14, strlen($content_type) - 14);\n\t\t\t\t$content_type = explode(';', $content_type);\n\t\t\t\tif ( ! empty( $content_type[1] ) ) {\n\t\t\t\t\t$charset = explode('=', $content_type[1]);\n\t\t\t\t\t$charset = ( ! empty( $charset[1] ) ) ? trim($charset[1]) : '';\n\t\t\t\t}\n\t\t\t\t$content_type = $content_type[0];\n\t\t\t}\n\t\t\tif ( preg_match('/Content-Transfer-Encoding: /i', $line) ) {\n\t\t\t\t$content_transfer_encoding = trim($line);\n\t\t\t\t$content_transfer_encoding = substr($content_transfer_encoding, 27, strlen($content_transfer_encoding) - 27);\n\t\t\t\t$content_transfer_encoding = explode(';', $content_transfer_encoding);\n\t\t\t\t$content_transfer_encoding = $content_transfer_encoding[0];\n\t\t\t}\n\t\t\tif ( ( $content_type == 'multipart/alternative' ) && ( false !== strpos($line, 'boundary=\"') ) && ( '' == $boundary ) ) {\n\t\t\t\t$boundary = trim($line);\n\t\t\t\t$boundary = explode('\"', $boundary);\n\t\t\t\t$boundary = $boundary[1];\n\t\t\t}\n\t\t\tif (preg_match('/Subject: /i', $line)) {\n\t\t\t\t$subject = trim($line);\n\t\t\t\t$subject = substr($subject, 9, strlen($subject) - 9);\n\t\t\t\t// Captures any text in the subject before $phone_delim as the subject\n\t\t\t\tif ( function_exists('iconv_mime_decode') ) {\n\t\t\t\t\t$subject = iconv_mime_decode($subject, 2, get_option('blog_charset'));\n\t\t\t\t} else {\n\t\t\t\t\t$subject = wp_iso_descrambler($subject);\n\t\t\t\t}\n\t\t\t\t$subject = explode($phone_delim, $subject);\n\t\t\t\t$subject = $subject[0];\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Set the author using the email address (From or Reply-To, the last used)\n\t\t\t * otherwise use the site admin.\n\t\t\t */\n\t\t\tif ( ! $author_found && preg_match( '/^(From|Reply-To): /', $line ) ) {\n\t\t\t\tif ( preg_match('|[a-z0-9_.-]+@[a-z0-9_.-]+(?!.*<)|i', $line, $matches) )\n\t\t\t\t\t$author = $matches[0];\n\t\t\t\telse\n\t\t\t\t\t$author = trim($line);\n\t\t\t\t$author = sanitize_email($author);\n\t\t\t\tif ( is_email($author) ) {\n\t\t\t\t\t/* translators: Post author email address */\n\t\t\t\t\techo '<p>' . sprintf(__('Author is %s'), $author) . '</p>';\n\t\t\t\t\t$userdata = get_user_by('email', $author);\n\t\t\t\t\tif ( ! empty( $userdata ) ) {\n\t\t\t\t\t\t$post_author = $userdata->ID;\n\t\t\t\t\t\t$author_found = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( preg_match( '/Date: /i', $line ) ) { // of the form '20 Mar 2002 20:32:37 +0100'\n\t\t\t\t$ddate = str_replace( 'Date: ', '', trim( $line ) );\n\t\t\t\t$ddate = preg_replace( '!\\s*\\(.+\\)\\s*$!', '', $ddate );\t// remove parenthesised timezone string if it exists, as this confuses strtotime\n\t\t\t\t$ddate_U = strtotime( $ddate );\n\t\t\t\t$post_date = gmdate( 'Y-m-d H:i:s', $ddate_U + $time_difference );\n\t\t\t\t$post_date_gmt = gmdate( 'Y-m-d H:i:s', $ddate_U );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set $post_status based on $author_found and on author's publish_posts capability\n\tif ( $author_found ) {\n\t\t$user = new WP_User($post_author);\n\t\t$post_status = ( $user->has_cap('publish_posts') ) ? 'publish' : 'pending';\n\t} else {\n\t\t// Author not found in DB, set status to pending. Author already set to admin.\n\t\t$post_status = 'pending';\n\t}\n\n\t$subject = trim($subject);\n\n\tif ( $content_type == 'multipart/alternative' ) {\n\t\t$content = explode('--'.$boundary, $content);\n\t\t$content = $content[2];\n\n\t\t// Match case-insensitive content-transfer-encoding.\n\t\tif ( preg_match( '/Content-Transfer-Encoding: quoted-printable/i', $content, $delim) ) {\n\t\t\t$content = explode($delim[0], $content);\n\t\t\t$content = $content[1];\n\t\t}\n\t\t$content = strip_tags($content, '<img><p><br><i><b><u><em><strong><strike><font><span><div>');\n\t}\n\t$content = trim($content);\n\n\t/**\n\t * Filters the original content of the email.\n\t *\n\t * Give Post-By-Email extending plugins full access to the content, either\n\t * the raw content, or the content of the last quoted-printable section.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $content The original email content.\n\t */\n\t$content = apply_filters( 'wp_mail_original_content', $content );\n\n\tif ( false !== stripos($content_transfer_encoding, \"quoted-printable\") ) {\n\t\t$content = quoted_printable_decode($content);\n\t}\n\n\tif ( function_exists('iconv') && ! empty( $charset ) ) {\n\t\t$content = iconv($charset, get_option('blog_charset'), $content);\n\t}\n\n\t// Captures any text in the body after $phone_delim as the body\n\t$content = explode($phone_delim, $content);\n\t$content = empty( $content[1] ) ? $content[0] : $content[1];\n\n\t$content = trim($content);\n\n\t/**\n\t * Filters the content of the post submitted by email before saving.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The email content.\n\t */\n\t$post_content = apply_filters( 'phone_content', $content );\n\n\t$post_title = xmlrpc_getposttitle($content);\n\n\tif ($post_title == '') $post_title = $subject;\n\n\t$post_category = array(get_option('default_email_category'));\n\n\t$post_data = compact('post_content','post_title','post_date','post_date_gmt','post_author','post_category', 'post_status');\n\t$post_data = wp_slash($post_data);\n\n\t$post_ID = wp_insert_post($post_data);\n\tif ( is_wp_error( $post_ID ) )\n\t\techo \"\\n\" . $post_ID->get_error_message();\n\n\t// We couldn't post, for whatever reason. Better move forward to the next email.\n\tif ( empty( $post_ID ) )\n\t\tcontinue;\n\n\t/**\n\t * Fires after a post submitted by email is published.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param int $post_ID The post ID.\n\t */\n\tdo_action( 'publish_phone', $post_ID );\n\n\techo \"\\n<p><strong>\" . __( 'Author:' ) . '</strong> ' . esc_html( $post_author ) . '</p>';\n\techo \"\\n<p><strong>\" . __( 'Posted title:' ) . '</strong> ' . esc_html( $post_title ) . '</p>';\n\n\tif(!$pop3->delete($i)) {\n\t\techo '<p>' . sprintf(\n\t\t\t/* translators: %s: POP3 error */\n\t\t\t__( 'Oops: %s' ),\n\t\t\tesc_html( $pop3->ERROR )\n\t\t) . '</p>';\n\t\t$pop3->reset();\n\t\texit;\n\t} else {\n\t\techo '<p>' . sprintf(\n\t\t\t/* translators: %s: the message ID */\n\t\t\t__( 'Mission complete. Message %s deleted.' ),\n\t\t\t'<strong>' . $i . '</strong>'\n\t\t) . '</p>';\n\t}\n\n}\n\n$pop3->quit();\n"], "filenames": ["wp-includes/version.php", "wp-mail.php"], "buggy_code_start_loc": [7, 15], "buggy_code_end_loc": [8, 15], "fixing_code_start_loc": [7, 16], "fixing_code_end_loc": [8, 22], "type": "CWE-1188", "message": "wp-mail.php in WordPress before 4.7.1 might allow remote attackers to bypass intended posting restrictions via a spoofed mail server with the mail.example.com name.", "other": {"cve": {"id": "CVE-2017-5491", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-15T02:59:02.987", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "wp-mail.php in WordPress before 4.7.1 might allow remote attackers to bypass intended posting restrictions via a spoofed mail server with the mail.example.com name."}, {"lang": "es", "value": "wp-mail.php en WordPress en versiones anteriores a 4.7.1 podr\u00eda permitir a atacantes remotos eludir las restricciones de publicaci\u00f3n previstas a trav\u00e9s de un servidor de correo falsificado con el nombre mail.example.com."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1188"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7", "matchCriteriaId": "5C55F44C-4A71-4C47-9908-071A23D46939"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3779", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/14/6", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95406", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1037591", "source": "cve@mitre.org"}, {"url": "https://codex.wordpress.org/Version_4.7.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/061e8788814ac87706d8b95688df276fe3c8596a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/news/2017/01/wordpress-4-7-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8719", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/061e8788814ac87706d8b95688df276fe3c8596a"}}