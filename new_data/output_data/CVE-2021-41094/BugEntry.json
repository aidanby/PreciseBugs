{"buggy_code": ["// swiftlint:disable all\n// Generated using SwiftGen \u2014 https://github.com/SwiftGen/SwiftGen\n\nimport Foundation\n\n// swiftlint:disable superfluous_disable_command file_length implicit_return\n\n// MARK: - Strings\n\n// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length\n// swiftlint:disable nesting type_body_length type_name vertical_whitespace_opening_braces\ninternal enum L10n {\n  internal enum InfoPlist {\n    /// Allow Wire to access your camera so you can place video calls and send photos.\n    internal static let nsCameraUsageDescription = L10n.tr(\"InfoPlist\", \"NSCameraUsageDescription\")\n    /// Allow Wire to access your contacts to connect you with others. We anonymize all information before uploading it to our server and do not share it with anyone else.\n    internal static let nsContactsUsageDescription = L10n.tr(\"InfoPlist\", \"NSContactsUsageDescription\")\n    /// In order to authenticate in the app allow Wire to access the Face ID feature.\n    internal static let nsFaceIDUsageDescription = L10n.tr(\"InfoPlist\", \"NSFaceIDUsageDescription\")\n    /// Allow Wire to access your location so you can send your location to others.\n    internal static let nsLocationWhenInUseUsageDescription = L10n.tr(\"InfoPlist\", \"NSLocationWhenInUseUsageDescription\")\n    /// Allow Wire to access your microphone so you can talk to people and send audio messages.\n    internal static let nsMicrophoneUsageDescription = L10n.tr(\"InfoPlist\", \"NSMicrophoneUsageDescription\")\n    /// Allow Wire to store pictures you take in the photo library.\n    internal static let nsPhotoLibraryAddUsageDescription = L10n.tr(\"InfoPlist\", \"NSPhotoLibraryAddUsageDescription\")\n    /// Allow Wire to access pictures stored in photo library.\n    internal static let nsPhotoLibraryUsageDescription = L10n.tr(\"InfoPlist\", \"NSPhotoLibraryUsageDescription\")\n  }\n  internal enum Localizable {\n    /// Connection Request\n    internal static let connectionRequestPendingTitle = L10n.tr(\"Localizable\", \"connection_request_pending_title\")\n    internal enum About {\n      internal enum Copyright {\n        /// \u00a9 Wire Swiss GmbH\n        internal static let title = L10n.tr(\"Localizable\", \"about.copyright.title\")\n      }\n      internal enum License {\n        /// Acknowledgements\n        internal static let licenseHeader = L10n.tr(\"Localizable\", \"about.license.license_header\")\n        /// View Project Page\n        internal static let openProjectButton = L10n.tr(\"Localizable\", \"about.license.open_project_button\")\n        /// Details\n        internal static let projectHeader = L10n.tr(\"Localizable\", \"about.license.project_header\")\n        /// License Information\n        internal static let title = L10n.tr(\"Localizable\", \"about.license.title\")\n      }\n      internal enum Privacy {\n        /// Privacy Policy\n        internal static let title = L10n.tr(\"Localizable\", \"about.privacy.title\")\n      }\n      internal enum Tos {\n        /// Terms of Use\n        internal static let title = L10n.tr(\"Localizable\", \"about.tos.title\")\n      }\n      internal enum Website {\n        /// Wire Website\n        internal static let title = L10n.tr(\"Localizable\", \"about.website.title\")\n      }\n    }\n    internal enum AccountDeletedSessionExpiredAlert {\n      /// The application did not communicate with the server for a long period of time, or your session has been remotely invalidated.\n      internal static let message = L10n.tr(\"Localizable\", \"account_deleted_session_expired_alert.message\")\n      /// Your session expired\n      internal static let title = L10n.tr(\"Localizable\", \"account_deleted_session_expired_alert.title\")\n    }\n    internal enum AddParticipants {\n      /// Everyone\u2019s here.\n      internal static let allContactsAdded = L10n.tr(\"Localizable\", \"add_participants.all_contacts_added\")\n      internal enum Alert {\n        /// The group is full\n        internal static let title = L10n.tr(\"Localizable\", \"add_participants.alert.title\")\n        internal enum Message {\n          /// Up to %1$d people can join a conversation. Currently there is only room for %2$d more.\n          internal static func existingConversation(_ p1: Int, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"add_participants.alert.message.existing_conversation\", p1, p2)\n          }\n          /// Up to %d people can join a conversation.\n          internal static func newConversation(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"add_participants.alert.message.new_conversation\", p1)\n          }\n        }\n      }\n    }\n    internal enum AppLockModule {\n      internal enum GoToSettingsButton {\n        /// Go to settings\n        internal static let title = L10n.tr(\"Localizable\", \"appLockModule.goToSettingsButton.title\")\n      }\n      internal enum Message {\n        /// Unlock Wire with Face ID or Passcode\n        internal static let faceID = L10n.tr(\"Localizable\", \"appLockModule.message.faceID\")\n        /// Unlock Wire with Passcode\n        internal static let passcode = L10n.tr(\"Localizable\", \"appLockModule.message.passcode\")\n        /// To unlock Wire, turn on Passcode in your device settings\n        internal static let passcodeUnavailable = L10n.tr(\"Localizable\", \"appLockModule.message.passcodeUnavailable\")\n        /// Unlock Wire with Touch ID or Passcode\n        internal static let touchID = L10n.tr(\"Localizable\", \"appLockModule.message.touchID\")\n      }\n      internal enum UnlockButton {\n        /// Unlock\n        internal static let title = L10n.tr(\"Localizable\", \"appLockModule.unlockButton.title\")\n      }\n    }\n    internal enum ArchivedList {\n      /// archive\n      internal static let title = L10n.tr(\"Localizable\", \"archived_list.title\")\n    }\n    internal enum Availability {\n      /// Available\n      internal static let available = L10n.tr(\"Localizable\", \"availability.available\")\n      /// Away\n      internal static let away = L10n.tr(\"Localizable\", \"availability.away\")\n      /// Busy\n      internal static let busy = L10n.tr(\"Localizable\", \"availability.busy\")\n      /// None\n      internal static let `none` = L10n.tr(\"Localizable\", \"availability.none\")\n      internal enum AccessibilityLabel {\n        /// Change Status\n        internal static let changeStatus = L10n.tr(\"Localizable\", \"availability.accessibility_label.change_status\")\n        /// Status\n        internal static let status = L10n.tr(\"Localizable\", \"availability.accessibility_label.status\")\n      }\n      internal enum Message {\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"availability.message.cancel\")\n        /// Set a status\n        internal static let setStatus = L10n.tr(\"Localizable\", \"availability.message.set_status\")\n      }\n      internal enum Reminder {\n        internal enum Action {\n          /// Do not display this information again\n          internal static let dontRemindMe = L10n.tr(\"Localizable\", \"availability.reminder.action.dont_remind_me\")\n          /// OK\n          internal static let ok = L10n.tr(\"Localizable\", \"availability.reminder.action.ok\")\n        }\n        internal enum Available {\n          /// You will appear as Available to other people. You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.available.message\")\n          /// You are set to Available\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.available.title\")\n        }\n        internal enum Away {\n          /// You will appear as Away to other people. You will not receive notifications about any incoming calls or messages.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.away.message\")\n          /// You are set to Away\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.away.title\")\n        }\n        internal enum Busy {\n          /// You will appear as Busy to other people. You will only receive notifications for mentions, replies, and calls in conversations that are not muted.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.busy.message\")\n          /// You are set to Busy\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.busy.title\")\n        }\n        internal enum None {\n          /// You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.none.message\")\n          /// No status set\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.none.title\")\n        }\n      }\n    }\n    internal enum ButtonMessageCell {\n      /// Your answer can't be sent, please retry.\n      internal static let genericError = L10n.tr(\"Localizable\", \"button_message_cell.generic_error\")\n      internal enum State {\n        /// confirmed\n        internal static let confirmed = L10n.tr(\"Localizable\", \"button_message_cell.state.confirmed\")\n        /// selected\n        internal static let selected = L10n.tr(\"Localizable\", \"button_message_cell.state.selected\")\n        /// unselected\n        internal static let unselected = L10n.tr(\"Localizable\", \"button_message_cell.state.unselected\")\n      }\n    }\n    internal enum Call {\n      internal enum Actions {\n        internal enum Label {\n          /// Accept call\n          internal static let acceptCall = L10n.tr(\"Localizable\", \"call.actions.label.accept_call\")\n          /// Flip camera\n          internal static let flipCamera = L10n.tr(\"Localizable\", \"call.actions.label.flip_camera\")\n          /// Join call\n          internal static let joinCall = L10n.tr(\"Localizable\", \"call.actions.label.join_call\")\n          /// Start audio call\n          internal static let makeAudioCall = L10n.tr(\"Localizable\", \"call.actions.label.make_audio_call\")\n          /// Start video call\n          internal static let makeVideoCall = L10n.tr(\"Localizable\", \"call.actions.label.make_video_call\")\n          /// Minimize call\n          internal static let minimizeCall = L10n.tr(\"Localizable\", \"call.actions.label.minimize_call\")\n          /// Decline call\n          internal static let rejectCall = L10n.tr(\"Localizable\", \"call.actions.label.reject_call\")\n          /// Switch to back camera\n          internal static let switchToBackCamera = L10n.tr(\"Localizable\", \"call.actions.label.switch_to_back_camera\")\n          /// Switch to front camera\n          internal static let switchToFrontCamera = L10n.tr(\"Localizable\", \"call.actions.label.switch_to_front_camera\")\n          /// End call\n          internal static let terminateCall = L10n.tr(\"Localizable\", \"call.actions.label.terminate_call\")\n          /// Unmute\n          internal static let toggleMuteOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_mute_off\")\n          /// Mute\n          internal static let toggleMuteOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_mute_on\")\n          /// Disable speaker\n          internal static let toggleSpeakerOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_speaker_off\")\n          /// Enable speaker\n          internal static let toggleSpeakerOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_speaker_on\")\n          /// Turn off camera\n          internal static let toggleVideoOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_video_off\")\n          /// Turn on camera\n          internal static let toggleVideoOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_video_on\")\n        }\n      }\n      internal enum Alert {\n        internal enum Ongoing {\n          /// This will end your other call.\n          internal static let alertTitle = L10n.tr(\"Localizable\", \"call.alert.ongoing.alert_title\")\n          internal enum Join {\n            /// Join anyway\n            internal static let button = L10n.tr(\"Localizable\", \"call.alert.ongoing.join.button\")\n            /// A call is active in another conversation.\\nJoining this call will hang up the other one.\n            internal static let message = L10n.tr(\"Localizable\", \"call.alert.ongoing.join.message\")\n          }\n          internal enum Start {\n            /// Call anyway\n            internal static let button = L10n.tr(\"Localizable\", \"call.alert.ongoing.start.button\")\n            /// A call is active in another conversation.\\nCalling here will hang up the other call.\n            internal static let message = L10n.tr(\"Localizable\", \"call.alert.ongoing.start.message\")\n          }\n        }\n      }\n      internal enum Announcement {\n        /// Incoming call from %@\n        internal static func incoming(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"call.announcement.incoming\", String(describing: p1))\n        }\n      }\n      internal enum Degraded {\n        internal enum Alert {\n          /// New Device\n          internal static let title = L10n.tr(\"Localizable\", \"call.degraded.alert.title\")\n          internal enum Action {\n            /// Call anyway\n            internal static let `continue` = L10n.tr(\"Localizable\", \"call.degraded.alert.action.continue\")\n          }\n          internal enum Message {\n            /// You started using a new device.\n            internal static let `self` = L10n.tr(\"Localizable\", \"call.degraded.alert.message.self\")\n            /// Someone started using a new device.\n            internal static let unknown = L10n.tr(\"Localizable\", \"call.degraded.alert.message.unknown\")\n            /// %@ started using a new device.\n            internal static func user(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"call.degraded.alert.message.user\", String(describing: p1))\n            }\n          }\n        }\n        internal enum Ended {\n          internal enum Alert {\n            /// Call ended\n            internal static let title = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.title\")\n            internal enum Message {\n              /// The call was disconnected because you started using a new device.\n              internal static let `self` = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.self\")\n              /// The call was disconnected because someone is no longer a verified contact.\n              internal static let unknown = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.unknown\")\n              /// The call was disconnected because %@ is no longer a verified contact.\n              internal static func user(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.user\", String(describing: p1))\n              }\n            }\n          }\n        }\n      }\n      internal enum Grid {\n        /// No active video speakers...\n        internal static let noActiveSpeakers = L10n.tr(\"Localizable\", \"call.grid.no_active_speakers\")\n        internal enum Hints {\n          /// Double Tap on a tile for fullscreen\n          internal static let fullscreen = L10n.tr(\"Localizable\", \"call.grid.hints.fullscreen\")\n          /// Double Tap to go back, pinch to zoom\n          internal static let goBackOrZoom = L10n.tr(\"Localizable\", \"call.grid.hints.go_back_or_zoom\")\n          /// Pinch to zoom\n          internal static let zoom = L10n.tr(\"Localizable\", \"call.grid.hints.zoom\")\n        }\n      }\n      internal enum Overlay {\n        internal enum SwitchTo {\n          /// ALL\n          internal static let all = L10n.tr(\"Localizable\", \"call.overlay.switch_to.all\")\n          /// SPEAKERS\n          internal static let speakers = L10n.tr(\"Localizable\", \"call.overlay.switch_to.speakers\")\n        }\n      }\n      internal enum Participants {\n        /// Show All (%@)\n        internal static func showAll(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"call.participants.show_all\", String(describing: p1))\n        }\n        internal enum List {\n          /// Participants\n          internal static let title = L10n.tr(\"Localizable\", \"call.participants.list.title\")\n        }\n      }\n      internal enum Quality {\n        internal enum Indicator {\n          /// Your calling relay is not reachable. This may affect your call experience.\n          internal static let message = L10n.tr(\"Localizable\", \"call.quality.indicator.message\")\n          internal enum MoreInfo {\n            internal enum Button {\n              /// More info\n              internal static let text = L10n.tr(\"Localizable\", \"call.quality.indicator.more_info.button.text\")\n            }\n          }\n        }\n      }\n      internal enum Status {\n        /// Connecting\u2026\n        internal static let connecting = L10n.tr(\"Localizable\", \"call.status.connecting\")\n        /// Constant Bit Rate\n        internal static let constantBitrate = L10n.tr(\"Localizable\", \"call.status.constant_bitrate\")\n        /// Calling\u2026\n        internal static let incoming = L10n.tr(\"Localizable\", \"call.status.incoming\")\n        /// Ringing\u2026\n        internal static let outgoing = L10n.tr(\"Localizable\", \"call.status.outgoing\")\n        /// Reconnecting\u2026\n        internal static let reconnecting = L10n.tr(\"Localizable\", \"call.status.reconnecting\")\n        /// Hanging up\u2026\n        internal static let terminating = L10n.tr(\"Localizable\", \"call.status.terminating\")\n        /// Variable Bit Rate\n        internal static let variableBitrate = L10n.tr(\"Localizable\", \"call.status.variable_bitrate\")\n        internal enum Incoming {\n          /// %@ is calling\u2026\n          internal static func user(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"call.status.incoming.user\", String(describing: p1))\n          }\n        }\n        internal enum Outgoing {\n          /// Calling %@\u2026\n          internal static func user(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"call.status.outgoing.user\", String(describing: p1))\n          }\n        }\n      }\n      internal enum Video {\n        /// Video paused\n        internal static let paused = L10n.tr(\"Localizable\", \"call.video.paused\")\n        internal enum TooMany {\n          internal enum Alert {\n            /// Video calls only work in groups of 4 or less.\n            internal static let message = L10n.tr(\"Localizable\", \"call.video.too_many.alert.message\")\n            /// Too many people for Video\n            internal static let title = L10n.tr(\"Localizable\", \"call.video.too_many.alert.title\")\n          }\n        }\n      }\n    }\n    internal enum Calling {\n      internal enum QualitySurvey {\n        /// How do you rate the overall quality of the call?\n        internal static let question = L10n.tr(\"Localizable\", \"calling.quality_survey.question\")\n        /// Skip\n        internal static let skipButtonTitle = L10n.tr(\"Localizable\", \"calling.quality_survey.skip_button_title\")\n        /// Call Quality Feedback\n        internal static let title = L10n.tr(\"Localizable\", \"calling.quality_survey.title\")\n        internal enum Answer {\n          /// Bad\n          internal static let _1 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.1\")\n          /// Poor\n          internal static let _2 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.2\")\n          /// Fair\n          internal static let _3 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.3\")\n          /// Good\n          internal static let _4 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.4\")\n          /// Excellent\n          internal static let _5 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.5\")\n        }\n      }\n    }\n    internal enum CameraAccess {\n      /// Wire needs access to the camera\n      internal static let denied = L10n.tr(\"Localizable\", \"camera_access.denied\")\n      internal enum Denied {\n        /// \n        internal static let instruction = L10n.tr(\"Localizable\", \"camera_access.denied.instruction\")\n        /// Enable it in Wire Settings\n        internal static let openSettings = L10n.tr(\"Localizable\", \"camera_access.denied.open_settings\")\n      }\n    }\n    internal enum CameraControls {\n      /// AE/AF Lock\n      internal static let aeafLock = L10n.tr(\"Localizable\", \"camera_controls.aeaf_lock\")\n    }\n    internal enum Collections {\n      internal enum ImageViewer {\n        internal enum Copied {\n          /// Picture copied\n          internal static let title = L10n.tr(\"Localizable\", \"collections.image_viewer.copied.title\")\n        }\n      }\n      internal enum Search {\n        /// No results\n        internal static let noItems = L10n.tr(\"Localizable\", \"collections.search.no_items\")\n        internal enum Field {\n          /// Search text messages\n          internal static let placeholder = L10n.tr(\"Localizable\", \"collections.search.field.placeholder\")\n        }\n      }\n      internal enum Section {\n        /// No items in collection\n        internal static let noItems = L10n.tr(\"Localizable\", \"collections.section.no_items\")\n        internal enum All {\n          /// Show all %d \u2192\n          internal static func button(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"collections.section.all.button\", p1)\n          }\n        }\n        internal enum Files {\n          /// Files\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.files.title\")\n        }\n        internal enum Images {\n          /// Pictures\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.images.title\")\n        }\n        internal enum Links {\n          /// Links\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.links.title\")\n        }\n        internal enum Videos {\n          /// Videos\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.videos.title\")\n        }\n      }\n    }\n    internal enum Compose {\n      internal enum Contact {\n        /// Conversation\n        internal static let title = L10n.tr(\"Localizable\", \"compose.contact.title\")\n      }\n      internal enum Drafts {\n        /// Messages\n        internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.title\")\n        internal enum Compose {\n          /// Type a message\n          internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.title\")\n          internal enum Delete {\n            internal enum Confirm {\n              /// This action will permanently delete this draft and cannot be undone.\n              internal static let message = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.message\")\n              /// Confirm Deletion\n              internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.title\")\n              internal enum Action {\n                /// Delete\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.action.title\")\n              }\n            }\n          }\n          internal enum Dismiss {\n            internal enum Confirm {\n              /// Save as draft\n              internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.confirm.title\")\n              internal enum Action {\n                /// Save\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.confirm.action.title\")\n              }\n            }\n            internal enum Delete {\n              internal enum Action {\n                /// Delete\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.delete.action.title\")\n              }\n            }\n          }\n          internal enum Subject {\n            /// Tap to set a subject\n            internal static let placeholder = L10n.tr(\"Localizable\", \"compose.drafts.compose.subject.placeholder\")\n          }\n        }\n        internal enum Empty {\n          /// Tap + to compose one\n          internal static let subtitle = L10n.tr(\"Localizable\", \"compose.drafts.empty.subtitle\")\n          /// No messages\n          internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.empty.title\")\n        }\n      }\n      internal enum Message {\n        /// Message\n        internal static let title = L10n.tr(\"Localizable\", \"compose.message.title\")\n      }\n    }\n    internal enum ConnectionRequest {\n      /// Connect\n      internal static let sendButtonTitle = L10n.tr(\"Localizable\", \"connection_request.send_button_title\")\n      /// Connect to %@\n      internal static func title(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"connection_request.title\", String(describing: p1))\n      }\n    }\n    internal enum ContactsUi {\n      /// Requested to connect\n      internal static let connectionRequest = L10n.tr(\"Localizable\", \"contacts_ui.connection_request\")\n      /// Invite others\n      internal static let inviteOthers = L10n.tr(\"Localizable\", \"contacts_ui.invite_others\")\n      /// %@ in Contacts\n      internal static func nameInContacts(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"contacts_ui.name_in_contacts\", String(describing: p1))\n      }\n      /// Search by name\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"contacts_ui.search_placeholder\")\n      /// Invite people\n      internal static let title = L10n.tr(\"Localizable\", \"contacts_ui.title\")\n      internal enum ActionButton {\n        /// Invite\n        internal static let invite = L10n.tr(\"Localizable\", \"contacts_ui.action_button.invite\")\n        /// Open\n        internal static let `open` = L10n.tr(\"Localizable\", \"contacts_ui.action_button.open\")\n      }\n      internal enum InviteSheet {\n        /// Cancel\n        internal static let cancelButtonTitle = L10n.tr(\"Localizable\", \"contacts_ui.invite_sheet.cancel_button_title\")\n      }\n      internal enum Notification {\n        /// Failed to send invitation\n        internal static let invitationFailed = L10n.tr(\"Localizable\", \"contacts_ui.notification.invitation_failed\")\n        /// Invitation sent\n        internal static let invitationSent = L10n.tr(\"Localizable\", \"contacts_ui.notification.invitation_sent\")\n      }\n    }\n    internal enum Content {\n      internal enum File {\n        /// Browse\n        internal static let browse = L10n.tr(\"Localizable\", \"content.file.browse\")\n        /// Downloading\u2026\n        internal static let downloading = L10n.tr(\"Localizable\", \"content.file.downloading\")\n        /// Save\n        internal static let saveAudio = L10n.tr(\"Localizable\", \"content.file.save_audio\")\n        /// Save\n        internal static let saveVideo = L10n.tr(\"Localizable\", \"content.file.save_video\")\n        /// Record a video\n        internal static let takeVideo = L10n.tr(\"Localizable\", \"content.file.take_video\")\n        /// You can send files up to %@\n        internal static func tooBig(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.file.too_big\", String(describing: p1))\n        }\n        /// Upload cancelled\n        internal static let uploadCancelled = L10n.tr(\"Localizable\", \"content.file.upload_cancelled\")\n        /// Upload failed\n        internal static let uploadFailed = L10n.tr(\"Localizable\", \"content.file.upload_failed\")\n        /// Videos\n        internal static let uploadVideo = L10n.tr(\"Localizable\", \"content.file.upload_video\")\n        /// Uploading\u2026\n        internal static let uploading = L10n.tr(\"Localizable\", \"content.file.uploading\")\n      }\n      internal enum Image {\n        /// Save\n        internal static let saveImage = L10n.tr(\"Localizable\", \"content.image.save_image\")\n      }\n      internal enum Message {\n        /// Copy\n        internal static let copy = L10n.tr(\"Localizable\", \"content.message.copy\")\n        /// Delete\n        internal static let delete = L10n.tr(\"Localizable\", \"content.message.delete\")\n        /// Delete\u2026\n        internal static let deleteEllipsis = L10n.tr(\"Localizable\", \"content.message.delete_ellipsis\")\n        /// Details\n        internal static let details = L10n.tr(\"Localizable\", \"content.message.details\")\n        /// Download\n        internal static let download = L10n.tr(\"Localizable\", \"content.message.download\")\n        /// Share\n        internal static let forward = L10n.tr(\"Localizable\", \"content.message.forward\")\n        /// Reveal\n        internal static let goToConversation = L10n.tr(\"Localizable\", \"content.message.go_to_conversation\")\n        /// Like\n        internal static let like = L10n.tr(\"Localizable\", \"content.message.like\")\n        /// Open\n        internal static let `open` = L10n.tr(\"Localizable\", \"content.message.open\")\n        /// Original message\n        internal static let originalLabel = L10n.tr(\"Localizable\", \"content.message.original_label\")\n        /// Reply\n        internal static let reply = L10n.tr(\"Localizable\", \"content.message.reply\")\n        /// Resend\n        internal static let resend = L10n.tr(\"Localizable\", \"content.message.resend\")\n        /// Save\n        internal static let save = L10n.tr(\"Localizable\", \"content.message.save\")\n        /// Sign\n        internal static let sign = L10n.tr(\"Localizable\", \"content.message.sign\")\n        /// Unlike\n        internal static let unlike = L10n.tr(\"Localizable\", \"content.message.unlike\")\n        internal enum AudioMessage {\n          /// Play the audio message\n          internal static let accessibility = L10n.tr(\"Localizable\", \"content.message.audio_message.accessibility\")\n        }\n        internal enum Forward {\n          /// Search\u2026\n          internal static let to = L10n.tr(\"Localizable\", \"content.message.forward.to\")\n        }\n        internal enum LinkAttachment {\n          internal enum AccessibilityLabel {\n            /// SoundCloud playlist preview\n            internal static let soundcloudSet = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.soundcloud_set\")\n            /// SoundCloud song preview\n            internal static let soundcloudSong = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.soundcloud_song\")\n            /// YouTube video preview\n            internal static let youtube = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.youtube\")\n          }\n        }\n        internal enum OpenLinkAlert {\n          /// This will take you to\\n%@\n          internal static func message(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.message.open_link_alert.message\", String(describing: p1))\n          }\n          /// Open\n          internal static let `open` = L10n.tr(\"Localizable\", \"content.message.open_link_alert.open\")\n          /// Visit Link\n          internal static let title = L10n.tr(\"Localizable\", \"content.message.open_link_alert.title\")\n        }\n        internal enum Reply {\n          /// You cannot see this message.\n          internal static let brokenMessage = L10n.tr(\"Localizable\", \"content.message.reply.broken_message\")\n          /// Edited\n          internal static let editedMessage = L10n.tr(\"Localizable\", \"content.message.reply.edited_message\")\n          internal enum OriginalTimestamp {\n            /// Original message from %@\n            internal static func date(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.message.reply.original_timestamp.date\", String(describing: p1))\n            }\n            /// Original message from %@\n            internal static func time(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.message.reply.original_timestamp.time\", String(describing: p1))\n            }\n          }\n        }\n      }\n      internal enum Ping {\n        /// %@ pinged\n        internal static func text(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.ping.text\", String(describing: p1))\n        }\n        /// %@ pinged\n        internal static func textYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.ping.text-you\", String(describing: p1))\n        }\n        internal enum Text {\n          /// You\n          internal static let you = L10n.tr(\"Localizable\", \"content.ping.text.you\")\n        }\n      }\n      internal enum Player {\n        /// UNABLE TO PLAY TRACK\n        internal static let unableToPlay = L10n.tr(\"Localizable\", \"content.player.unable_to_play\")\n      }\n      internal enum ReactionsList {\n        /// Liked by\n        internal static let likers = L10n.tr(\"Localizable\", \"content.reactions_list.likers\")\n      }\n      internal enum System {\n        /// and you\n        internal static let andYouDative = L10n.tr(\"Localizable\", \"content.system.and_you_dative\")\n        /// Connected to %@\\nStart a conversation\n        internal static func connectedTo(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.connected_to\", String(describing: p1))\n        }\n        /// Connecting to %@.\\nStart a conversation\n        internal static func connectingTo(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.connecting_to\", String(describing: p1))\n        }\n        /// Start a conversation with %@\n        internal static func continuedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.continued_conversation\", String(describing: p1))\n        }\n        /// Deleted: %@\n        internal static func deletedMessagePrefixTimestamp(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.deleted_message_prefix_timestamp\", String(describing: p1))\n        }\n        /// Edited: %@\n        internal static func editedMessagePrefixTimestamp(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.edited_message_prefix_timestamp\", String(describing: p1))\n        }\n        /// %@ left\n        internal static func ephemeralTimeRemaining(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.ephemeral_time_remaining\", String(describing: p1))\n        }\n        /// Sending failed.\n        internal static let failedtosendMessageTimestamp = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp\")\n        /// Delete\n        internal static let failedtosendMessageTimestampDelete = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp_delete\")\n        /// Resend\n        internal static let failedtosendMessageTimestampResend = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp_resend\")\n        /// All fingerprints are verified\n        internal static let isVerified = L10n.tr(\"Localizable\", \"content.system.is_verified\")\n        /// Tap to like\n        internal static let likeTooltip = L10n.tr(\"Localizable\", \"content.system.like_tooltip\")\n        /// Delivered\n        internal static let messageDeliveredTimestamp = L10n.tr(\"Localizable\", \"content.system.message_delivered_timestamp\")\n        /// %@ turned read receipts off for everyone\n        internal static func messageReadReceiptOff(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_off\", String(describing: p1))\n        }\n        /// %@ turned read receipts off for everyone\n        internal static func messageReadReceiptOffYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_off-you\", String(describing: p1))\n        }\n        /// %@ turned read receipts on for everyone\n        internal static func messageReadReceiptOn(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on\", String(describing: p1))\n        }\n        /// %@ turned read receipts on for everyone\n        internal static func messageReadReceiptOnYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on-you\", String(describing: p1))\n        }\n        /// Read receipts are on\n        internal static let messageReadReceiptOnAddToGroup = L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on_add_to_group\")\n        /// Seen\n        internal static let messageReadTimestamp = L10n.tr(\"Localizable\", \"content.system.message_read_timestamp\")\n        /// Sent\n        internal static let messageSentTimestamp = L10n.tr(\"Localizable\", \"content.system.message_sent_timestamp\")\n        /// %@ set the message timer to %@\n        internal static func messageTimerChanges(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_changes\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ set the message timer to %@\n        internal static func messageTimerChangesYou(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_changes-you\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ turned off the message timer\n        internal static func messageTimerOff(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_off\", String(describing: p1))\n        }\n        /// %@ turned off the message timer\n        internal static func messageTimerOffYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_off-you\", String(describing: p1))\n        }\n        /// Plural format key: \"%#@d_new_devices@\"\n        internal static func newDevices(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.new_devices\", p1)\n        }\n        /// New user joined.\n        internal static let newUsers = L10n.tr(\"Localizable\", \"content.system.new_users\")\n        /// %@ added %@\n        internal static func otherAddedParticipant(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_added_participant\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ added you\n        internal static func otherAddedYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_added_you\", String(describing: p1))\n        }\n        /// %@ left\n        internal static func otherLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_left\", String(describing: p1))\n        }\n        /// %@ removed %@\n        internal static func otherRemovedOther(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_removed_other\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ removed you\n        internal static func otherRemovedYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_removed_you\", String(describing: p1))\n        }\n        /// %@ removed the conversation name\n        internal static func otherRenamedConvToNothing(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_renamed_conv_to_nothing\", String(describing: p1))\n        }\n        /// %@ started a conversation with %@\n        internal static func otherStartedConversation(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_started_conversation\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ called\n        internal static func otherWantedToTalk(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_wanted_to_talk\", String(describing: p1))\n        }\n        /// %@ and %@\n        internal static func participants1Other(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.participants_1_other\", String(describing: p1), String(describing: p2))\n        }\n        /// Plural format key: \"%@ %#@and_number_of_others@\"\n        internal static func participantsNOthers(_ p1: Any, _ p2: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.participants_n_others\", String(describing: p1), p2)\n        }\n        /// You\n        internal static let participantsYou = L10n.tr(\"Localizable\", \"content.system.participants_you\")\n        /// Sending\u2026\n        internal static let pendingMessageTimestamp = L10n.tr(\"Localizable\", \"content.system.pending_message_timestamp\")\n        /// Plural format key: \"%@%#@d_number_of_others@ started using %#@d_new_devices@\"\n        internal static func peopleStartedUsing(_ p1: Any, _ p2: Int, _ p3: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.people_started_using\", String(describing: p1), p2, p3)\n        }\n        /// You started using [this device](%@) again. Messages sent in the meantime will not appear here.\n        internal static func reactivatedDevice(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.reactivated_device\", String(describing: p1))\n        }\n        /// **You** started using [a new device](%@)\n        internal static func selfUserNewClient(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.self_user_new_client\", String(describing: p1))\n        }\n        /// **You** started using [this device](%@)\n        internal static func selfUserNewSelfClient(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.self_user_new_self_client\", String(describing: p1))\n        }\n        /// **You** unverified one of [%1$@\u2019s devices](%2$@)\n        internal static func unverifiedOtherDevices(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.unverified_other_devices\", String(describing: p1), String(describing: p2))\n        }\n        /// **You** unverified one of [your devices](%@)\n        internal static func unverifiedSelfDevices(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.unverified_self_devices\", String(describing: p1))\n        }\n        /// Verify devices\n        internal static let verifyDevices = L10n.tr(\"Localizable\", \"content.system.verify_devices\")\n        /// you\n        internal static let youAccusative = L10n.tr(\"Localizable\", \"content.system.you_accusative\")\n        /// You added %@\n        internal static func youAddedParticipant(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_added_participant\", String(describing: p1))\n        }\n        /// you\n        internal static let youDative = L10n.tr(\"Localizable\", \"content.system.you_dative\")\n        /// You left\n        internal static let youLeft = L10n.tr(\"Localizable\", \"content.system.you_left\")\n        /// you\n        internal static let youNominative = L10n.tr(\"Localizable\", \"content.system.you_nominative\")\n        /// You removed %@\n        internal static func youRemovedOther(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_removed_other\", String(describing: p1))\n        }\n        /// You removed the conversation name\n        internal static let youRenamedConvToNothing = L10n.tr(\"Localizable\", \"content.system.you_renamed_conv_to_nothing\")\n        /// You\n        internal static let youStarted = L10n.tr(\"Localizable\", \"content.system.you_started\")\n        /// You started a conversation with %@\n        internal static func youStartedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_started_conversation\", String(describing: p1))\n        }\n        /// You called\n        internal static let youWantedToTalk = L10n.tr(\"Localizable\", \"content.system.you_wanted_to_talk\")\n        internal enum Call {\n          /// %@ called\n          internal static func called(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.called\", String(describing: p1))\n          }\n          /// %@ called\n          internal static func calledYou(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.called-you\", String(describing: p1))\n          }\n          /// Plural format key: \"%#@missed_call@\"\n          internal static func missedCall(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.missed-call\", p1)\n          }\n          /// Missed call\n          internal static let missedCallYou = L10n.tr(\"Localizable\", \"content.system.call.missed-call-you\")\n          internal enum Called {\n            /// You\n            internal static let you = L10n.tr(\"Localizable\", \"content.system.call.called.you\")\n          }\n          internal enum MissedCall {\n            /// Plural format key: \"%#@missed_call_from@\"\n            internal static func groups(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups\", p1)\n            }\n            /// Plural format key: \"%#@missed_call_from@\"\n            internal static func groupsYou(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups-you\", p1)\n            }\n            internal enum Groups {\n              /// You\n              internal static let you = L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups.you\")\n            }\n          }\n        }\n        internal enum CannotDecrypt {\n          /// (Fixed error: %d ID: %@)\n          internal static func errorDetails(_ p1: Int, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.error_details\", p1, String(describing: p2))\n          }\n          /// A message from **%@** could not be decrypted.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.other\", String(describing: p1))\n          }\n          /// Fix future messages\n          internal static let resetSession = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.reset_session\")\n          /// A message from **you** could not be decrypted.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.self\")\n        }\n        internal enum CannotDecryptIdentityChanged {\n          /// **%@\u2019s** device identity changed. Undelivered message.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_identity_changed.other\", String(describing: p1))\n          }\n          /// **Your** device identity changed. Undelivered message.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_identity_changed.self\")\n        }\n        internal enum CannotDecryptResolved {\n          /// You can now decrypt messages from **%1$@**. To recover lost messages, **ask %1$@ to resend them.**\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_resolved.other\", String(describing: p1))\n          }\n          /// You can now decrypt messages from yourself. To recover lost messages, **you need to resend them.**\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_resolved.self\")\n        }\n        internal enum Conversation {\n          internal enum Guest {\n            /// %@ joined\n            internal static func joined(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.guest.joined\", String(describing: p1))\n            }\n          }\n          internal enum Invite {\n            /// Invite people\n            internal static let button = L10n.tr(\"Localizable\", \"content.system.conversation.invite.button\")\n            /// Services and people outside your team can join this conversation.\n            internal static let title = L10n.tr(\"Localizable\", \"content.system.conversation.invite.title\")\n          }\n          internal enum Other {\n            /// %@ added %@\n            internal static func added(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.added\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ left\n            internal static func `left`(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.left\", String(describing: p1))\n            }\n            /// %@ removed %@\n            internal static func removed(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.removed\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ started a conversation with %@\n            internal static func started(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.started\", String(describing: p1), String(describing: p2))\n            }\n          }\n          internal enum Team {\n            /// %@ was removed from the team.\n            internal static func memberLeave(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.team.member-leave\", String(describing: p1))\n            }\n          }\n          internal enum WithName {\n            /// with\n            internal static let participants = L10n.tr(\"Localizable\", \"content.system.conversation.with_name.participants\")\n            /// %@ started the conversation\n            internal static func title(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.with_name.title\", String(describing: p1))\n            }\n            /// %@ started the conversation\n            internal static func titleYou(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.with_name.title-you\", String(describing: p1))\n            }\n          }\n          internal enum You {\n            /// %@ added %@\n            internal static func added(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.added\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ left\n            internal static func `left`(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.left\", String(describing: p1))\n            }\n            /// %@ removed %@\n            internal static func removed(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.removed\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ started a conversation with %@\n            internal static func started(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.started\", String(describing: p1), String(describing: p2))\n            }\n          }\n        }\n        internal enum MessageLegalHold {\n          /// Legal hold deactivated for this conversation\n          internal static let disabled = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.disabled\")\n          /// This conversation is under legal hold\n          internal static let enabled = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.enabled\")\n          /// Learn more\n          internal static let learnMore = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.learn_more\")\n        }\n        internal enum MissingMessages {\n          /// Plural format key: \"%@ %#@lu_number_of_users@\"\n          internal static func subtitleAdded(_ p1: Any, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_added\", String(describing: p1), p2)\n          }\n          /// Plural format key: \"%@ %#@lu_number_of_users@\"\n          internal static func subtitleRemoved(_ p1: Any, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_removed\", String(describing: p1), p2)\n          }\n          /// Meanwhile,\n          internal static let subtitleStart = L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_start\")\n          /// You haven\u2019t used this device for a while. Some messages may not appear here.\n          internal static let title = L10n.tr(\"Localizable\", \"content.system.missing_messages.title\")\n        }\n        internal enum RenamedConv {\n          /// %@ renamed the conversation\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.renamed_conv.title\", String(describing: p1))\n          }\n          /// %@ renamed the conversation\n          internal static func titleYou(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.renamed_conv.title-you\", String(describing: p1))\n          }\n          internal enum Title {\n            /// You\n            internal static let you = L10n.tr(\"Localizable\", \"content.system.renamed_conv.title.you\")\n          }\n        }\n        internal enum Services {\n          /// Services have access to the content of this conversation\n          internal static let warning = L10n.tr(\"Localizable\", \"content.system.services.warning\")\n        }\n        internal enum SessionReset {\n          /// **%@ was unable to decrypt some of your messages but has solved the issue**. This affected all conversations you share together.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.session_reset.other\", String(describing: p1))\n          }\n          /// **You were unable to decrypt some of your messages but you solved the issue**. This affected all conversations.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.session_reset.self\")\n        }\n        internal enum StartedConversation {\n          /// all team members\n          internal static let completeTeam = L10n.tr(\"Localizable\", \"content.system.started_conversation.complete_team\")\n          /// and %@\n          internal static func truncatedPeople(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.started_conversation.truncated_people\", String(describing: p1))\n          }\n          internal enum CompleteTeam {\n            /// all team members and %@ guests\n            internal static func guests(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.started_conversation.complete_team.guests\", String(describing: p1))\n            }\n          }\n          internal enum TruncatedPeople {\n            /// %@ others\n            internal static func others(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.started_conversation.truncated_people.others\", String(describing: p1))\n            }\n          }\n        }\n        internal enum UnknownMessage {\n          /// This message can\u2019t be displayed. You may be using an older version of Wire.\n          internal static let body = L10n.tr(\"Localizable\", \"content.system.unknown_message.body\")\n        }\n      }\n    }\n    internal enum Conversation {\n      /// Guests are present\n      internal static let guestsPresent = L10n.tr(\"Localizable\", \"conversation.guests_present\")\n      /// Guests and services are present\n      internal static let guestsServicesPresent = L10n.tr(\"Localizable\", \"conversation.guests_services_present\")\n      /// Services are active\n      internal static let servicesPresent = L10n.tr(\"Localizable\", \"conversation.services_present\")\n      internal enum Action {\n        /// Search\n        internal static let search = L10n.tr(\"Localizable\", \"conversation.action.search\")\n      }\n      internal enum Alert {\n        /// The message is deleted.\n        internal static let messageDeleted = L10n.tr(\"Localizable\", \"conversation.alert.message_deleted\")\n      }\n      internal enum Call {\n        internal enum ManyParticipantsConfirmation {\n          /// Call\n          internal static let call = L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.call\")\n          /// This will call %d people\n          internal static func message(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.message\", p1)\n          }\n          /// Start a call\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.title\")\n        }\n      }\n      internal enum ConnectionView {\n        /// in Contacts\n        internal static let inAddressBook = L10n.tr(\"Localizable\", \"conversation.connection_view.in_address_book\")\n      }\n      internal enum Create {\n        internal enum GroupName {\n          /// Group name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"conversation.create.group_name.placeholder\")\n          /// Create group\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.group_name.title\")\n        }\n        internal enum Guests {\n          /// Open this conversation to services and people outside your team.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"conversation.create.guests.subtitle\")\n          /// Allow guests and services\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.guests.title\")\n        }\n        internal enum Guidance {\n          /// At least 1 character\n          internal static let empty = L10n.tr(\"Localizable\", \"conversation.create.guidance.empty\")\n          /// Too many characters\n          internal static let toolong = L10n.tr(\"Localizable\", \"conversation.create.guidance.toolong\")\n        }\n        internal enum Options {\n          /// Guests and services: %@, Read receipts: %@\n          internal static func subtitle(_ p1: Any, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.create.options.subtitle\", String(describing: p1), String(describing: p2))\n          }\n          /// Conversation options\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.options.title\")\n        }\n        internal enum Receipts {\n          /// When this is on, people can see when their messages in this conversation are read.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"conversation.create.receipts.subtitle\")\n          /// Read receipts\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.receipts.title\")\n        }\n      }\n      internal enum DeleteRequestDialog {\n        /// This will delete the group and all content for all participants on all devices. There is no option to restore the content. All participants will be notified.\n        internal static let message = L10n.tr(\"Localizable\", \"conversation.delete_request_dialog.message\")\n        /// Delete group conversation?\n        internal static let title = L10n.tr(\"Localizable\", \"conversation.delete_request_dialog.title\")\n      }\n      internal enum DeleteRequestErrorDialog {\n        /// Delete Group\n        internal static let buttonDeleteGroup = L10n.tr(\"Localizable\", \"conversation.delete_request_error_dialog.button_delete_group\")\n        /// An error occurred while trying to delete the group %@. Please try again.\n        internal static func title(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.delete_request_error_dialog.title\", String(describing: p1))\n        }\n      }\n      internal enum Displayname {\n        /// Empty group conversation\n        internal static let emptygroup = L10n.tr(\"Localizable\", \"conversation.displayname.emptygroup\")\n      }\n      internal enum InputBar {\n        /// Cancel reply\n        internal static let closeReply = L10n.tr(\"Localizable\", \"conversation.input_bar.close_reply\")\n        /// Type a message\n        internal static let placeholder = L10n.tr(\"Localizable\", \"conversation.input_bar.placeholder\")\n        /// Timed message\n        internal static let placeholderEphemeral = L10n.tr(\"Localizable\", \"conversation.input_bar.placeholder_ephemeral\")\n        /// Verified\n        internal static let verified = L10n.tr(\"Localizable\", \"conversation.input_bar.verified\")\n        internal enum AudioMessage {\n          /// Send\n          internal static let send = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.send\")\n          internal enum Keyboard {\n            /// Choose a filter above\n            internal static let filterTip = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.keyboard.filter_tip\")\n            /// Tap to record\\nYou can  %@  it after that\n            internal static func recordTip(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.keyboard.record_tip\", String(describing: p1))\n            }\n          }\n          internal enum TooLong {\n            /// Audio messages are limited to %@.\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long.message\", String(describing: p1))\n            }\n            /// Recording Stopped\n            internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long.title\")\n          }\n          internal enum TooLongSize {\n            /// File size for audio messages is limited to %@.\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long_size.message\", String(describing: p1))\n            }\n          }\n          internal enum Tooltip {\n            /// Swipe up to send\n            internal static let pullSend = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.tooltip.pull_send\")\n            /// Tap to send\n            internal static let tapSend = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.tooltip.tap_send\")\n          }\n        }\n        internal enum MessagePreview {\n          /// Replying to message: %@\n          internal static func accessibilityDescription(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility_description\", String(describing: p1))\n          }\n          /// Audio Message\n          internal static let audio = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.audio\")\n          /// File\n          internal static let file = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.file\")\n          /// Image\n          internal static let image = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.image\")\n          /// Location\n          internal static let location = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.location\")\n          /// Video\n          internal static let video = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.video\")\n          internal enum Accessibility {\n            /// Audio message\n            internal static let audioMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.audio_message\")\n            /// File message (%@)\n            internal static func fileMessage(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.file_message\", String(describing: p1))\n            }\n            /// Image message\n            internal static let imageMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.image_message\")\n            /// Location message\n            internal static let locationMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.location_message\")\n            /// %@ from %@\n            internal static func messageFrom(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.message_from\", String(describing: p1), String(describing: p2))\n            }\n            /// Unknown message\n            internal static let unknownMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.unknown_message\")\n            /// Video message\n            internal static let videoMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.video_message\")\n          }\n        }\n        internal enum MessageTooLong {\n          /// You can send messages up to %d characters long.\n          internal static func message(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.input_bar.message_too_long.message\", p1)\n          }\n          /// Message too long\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.message_too_long.title\")\n        }\n        internal enum OngoingCallAlert {\n          /// Ongoing call\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.title\")\n          internal enum Audio {\n            /// You can\u2019t record an audio message during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.audio.message\")\n          }\n          internal enum Photo {\n            /// You can\u2019t take a picture during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.photo.message\")\n          }\n          internal enum Video {\n            /// You can\u2019t record a video during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.video.message\")\n          }\n        }\n        internal enum Shortcut {\n          /// Cancel\n          internal static let cancelEditingMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.cancel_editing_message\")\n          /// Choose next mention\n          internal static let chooseNextMention = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.choose_next_mention\")\n          /// Choose previous mention\n          internal static let choosePreviousMention = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.choose_previous_mention\")\n          /// Edit Last Message\n          internal static let editLastMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.edit_last_message\")\n          /// Insert line break\n          internal static let newline = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.newline\")\n          /// Send Message\n          internal static let send = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.send\")\n        }\n      }\n      internal enum InviteMorePeople {\n        /// Add People\n        internal static let buttonTitle = L10n.tr(\"Localizable\", \"conversation.invite_more_people.button_title\")\n        /// Add people to this conversation\n        internal static let description = L10n.tr(\"Localizable\", \"conversation.invite_more_people.description\")\n        /// https://support.wire.com\n        internal static let explanationUrl = L10n.tr(\"Localizable\", \"conversation.invite_more_people.explanation_url\")\n        /// Spread the word!\n        internal static let title = L10n.tr(\"Localizable\", \"conversation.invite_more_people.title\")\n      }\n      internal enum Silenced {\n        internal enum Status {\n          internal enum Message {\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func genericMessage(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.generic_message\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func knock(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.knock\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func mention(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.mention\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func missedcall(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.missedcall\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func reply(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.reply\", p1)\n            }\n          }\n        }\n      }\n      internal enum Status {\n        /// Blocked\n        internal static let blocked = L10n.tr(\"Localizable\", \"conversation.status.blocked\")\n        /// %@ is calling\u2026\n        internal static func incomingCall(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.incoming_call\", String(describing: p1))\n        }\n        /// Poor connection\n        internal static let poorConnection = L10n.tr(\"Localizable\", \"conversation.status.poor_connection\")\n        /// Muted\n        internal static let silenced = L10n.tr(\"Localizable\", \"conversation.status.silenced\")\n        /// Someone\n        internal static let someone = L10n.tr(\"Localizable\", \"conversation.status.someone\")\n        /// %@ started a conversation\n        internal static func startedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.started_conversation\", String(describing: p1))\n        }\n        /// Typing a message\u2026\n        internal static let typing = L10n.tr(\"Localizable\", \"conversation.status.typing\")\n        /// \u26a0\ufe0f Unsent message\n        internal static let unsent = L10n.tr(\"Localizable\", \"conversation.status.unsent\")\n        /// You\n        internal static let you = L10n.tr(\"Localizable\", \"conversation.status.you\")\n        /// You left\n        internal static let youLeft = L10n.tr(\"Localizable\", \"conversation.status.you_left\")\n        /// %@ added you\n        internal static func youWasAdded(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.you_was_added\", String(describing: p1))\n        }\n        /// You were removed\n        internal static let youWereRemoved = L10n.tr(\"Localizable\", \"conversation.status.you_were_removed\")\n        internal enum IncomingCall {\n          /// Someone is calling\u2026\n          internal static let unknown = L10n.tr(\"Localizable\", \"conversation.status.incoming_call.unknown\")\n        }\n        internal enum Message {\n          /// Shared an audio message\n          internal static let audio = L10n.tr(\"Localizable\", \"conversation.status.message.audio\")\n          /// Sent a message\n          internal static let ephemeral = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral\")\n          /// Shared a file\n          internal static let file = L10n.tr(\"Localizable\", \"conversation.status.message.file\")\n          /// Shared a picture\n          internal static let image = L10n.tr(\"Localizable\", \"conversation.status.message.image\")\n          /// Pinged\n          internal static let knock = L10n.tr(\"Localizable\", \"conversation.status.message.knock\")\n          /// Shared a link\n          internal static let link = L10n.tr(\"Localizable\", \"conversation.status.message.link\")\n          /// Shared a location\n          internal static let location = L10n.tr(\"Localizable\", \"conversation.status.message.location\")\n          /// %@\n          internal static func mention(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.mention\", String(describing: p1))\n          }\n          /// Missed call\n          internal static let missedcall = L10n.tr(\"Localizable\", \"conversation.status.message.missedcall\")\n          /// %@\n          internal static func reply(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.reply\", String(describing: p1))\n          }\n          /// %@\n          internal static func text(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.text\", String(describing: p1))\n          }\n          /// Shared a video\n          internal static let video = L10n.tr(\"Localizable\", \"conversation.status.message.video\")\n          internal enum Ephemeral {\n            /// Someone sent a message\n            internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.group\")\n            /// Pinged\n            internal static let knock = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.knock\")\n            /// Mentioned you\n            internal static let mention = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.mention\")\n            /// Replied to your message\n            internal static let reply = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.reply\")\n            internal enum Knock {\n              /// Someone pinged\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.knock.group\")\n            }\n            internal enum Mention {\n              /// Someone mentioned you\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.mention.group\")\n            }\n            internal enum Reply {\n              /// Someone replied to your message\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.reply.group\")\n            }\n          }\n          internal enum Missedcall {\n            /// Missed call from %@\n            internal static func groups(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.status.message.missedcall.groups\", String(describing: p1))\n            }\n          }\n        }\n        internal enum SecutityAlert {\n          /// New security alert\n          internal static let `default` = L10n.tr(\"Localizable\", \"conversation.status.secutity_alert.default\")\n        }\n        internal enum Typing {\n          /// %@: typing a message\u2026\n          internal static func group(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.typing.group\", String(describing: p1))\n          }\n        }\n      }\n      internal enum Voiceover {\n        /// legal hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"conversation.voiceover.legalhold\")\n        /// verified\n        internal static let verified = L10n.tr(\"Localizable\", \"conversation.voiceover.verified\")\n        internal enum Value {\n          /// active\n          internal static let active = L10n.tr(\"Localizable\", \"conversation.voiceover.value.active\")\n          /// disabled\n          internal static let disabled = L10n.tr(\"Localizable\", \"conversation.voiceover.value.disabled\")\n        }\n      }\n    }\n    internal enum ConversationDetails {\n      internal enum OpenButton {\n        /// Double tap to view the details of the conversation.\n        internal static let accessibilityHint = L10n.tr(\"Localizable\", \"conversation_details.open_button.accessibility_hint\")\n      }\n    }\n    internal enum ConversationList {\n      internal enum DataUsagePermissionAlert {\n        /// I Agree\n        internal static let agree = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.agree\")\n        /// No\n        internal static let disagree = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.disagree\")\n        /// I agree that Wire may create and use anonymous usage and error reports to improve the Wire App. I can revoke this consent at any time.\n        internal static let message = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.message\")\n        /// Help us make Wire better\n        internal static let title = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.title\")\n      }\n      internal enum Empty {\n        internal enum AllArchived {\n          /// Everything archived\n          internal static let message = L10n.tr(\"Localizable\", \"conversation_list.empty.all_archived.message\")\n        }\n        internal enum NoContacts {\n          /// Start a conversation or\\ncreate a group.\n          internal static let message = L10n.tr(\"Localizable\", \"conversation_list.empty.no_contacts.message\")\n        }\n      }\n      internal enum Header {\n        internal enum SelfTeam {\n          /// %@ account.\n          internal static func accessibilityValue(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value\", String(describing: p1))\n          }\n          internal enum AccessibilityValue {\n            /// Active now.\n            internal static let active = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.active\")\n            /// Has new messages.\n            internal static let hasNewMessages = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.has_new_messages\")\n            /// Tap to activate.\n            internal static let inactive = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.inactive\")\n          }\n        }\n      }\n      internal enum RightAccessory {\n        internal enum JoinButton {\n          /// Join\n          internal static let title = L10n.tr(\"Localizable\", \"conversation_list.right_accessory.join_button.title\")\n        }\n      }\n      internal enum Voiceover {\n        internal enum BottomBar {\n          internal enum ArchivedButton {\n            /// list of archived conversations\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.archived_button.hint\")\n            /// archived\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.archived_button.label\")\n          }\n          internal enum CameraButton {\n            /// take picture and send quickly\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.camera_button.hint\")\n            /// camera\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.camera_button.label\")\n          }\n          internal enum ComposeButton {\n            /// compose messages and save for later\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.compose_button.hint\")\n            /// compose\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.compose_button.label\")\n          }\n          internal enum ContactsButton {\n            /// search for people on Wire\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.contacts_button.hint\")\n            /// contacts\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.contacts_button.label\")\n          }\n          internal enum FolderButton {\n            /// list of conversations organized in folders\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.folder_button.hint\")\n            /// folders\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.folder_button.label\")\n          }\n          internal enum RecentButton {\n            /// list of recent conversations\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.recent_button.hint\")\n            /// recent\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.recent_button.label\")\n          }\n        }\n        internal enum OpenConversation {\n          /// Open conversation\n          internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.open_conversation.hint\")\n        }\n        internal enum Status {\n          /// active call\n          internal static let activeCall = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.active_call\")\n          /// you are mentioned\n          internal static let mention = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.mention\")\n          /// missed call\n          internal static let missedCall = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.missed_call\")\n          /// pause media\n          internal static let pauseMedia = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.pause_media\")\n          /// pending\n          internal static let pendingConnection = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.pending_connection\")\n          /// ping\n          internal static let ping = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.ping\")\n          /// play media\n          internal static let playMedia = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.play_media\")\n          /// reply\n          internal static let reply = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.reply\")\n          /// silenced\n          internal static let silenced = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.silenced\")\n          /// typing\n          internal static let typing = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.typing\")\n        }\n        internal enum UnreadMessages {\n          /// You have unread messages.\n          internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.unread_messages.hint\")\n        }\n      }\n    }\n    internal enum CreatePasscode {\n      /// It will be used to unlock Wire. If you forget this passcode **it can not be recovered.**\n      internal static let infoLabel = L10n.tr(\"Localizable\", \"create_passcode.info_label\")\n      /// Create a passcode to unlock Wire. Please remember it, as **it can not be recovered.**\n      internal static let infoLabelForcedApplock = L10n.tr(\"Localizable\", \"create_passcode.info_label_forced_applock\")\n      /// Create a passcode\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"create_passcode.title_label\")\n      internal enum CreateButton {\n        /// create passcode\n        internal static let title = L10n.tr(\"Localizable\", \"create_passcode.create_button.title\")\n      }\n      internal enum Textfield {\n        /// \n        internal static let placeholder = L10n.tr(\"Localizable\", \"create_passcode.textfield.placeholder\")\n      }\n      internal enum Validation {\n        /// A lowercase letter\n        internal static let noLowercaseChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_lowercase_char\")\n        /// A number\n        internal static let noNumber = L10n.tr(\"Localizable\", \"create_passcode.validation.no_number\")\n        /// A special character\n        internal static let noSpecialChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_special_char\")\n        /// An uppercase letter\n        internal static let noUppercaseChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_uppercase_char\")\n        /// At least eight characters long\n        internal static let tooShort = L10n.tr(\"Localizable\", \"create_passcode.validation.too_short\")\n      }\n    }\n    internal enum DarkTheme {\n      internal enum Option {\n        /// Dark\n        internal static let dark = L10n.tr(\"Localizable\", \"dark_theme.option.dark\")\n        /// Light\n        internal static let light = L10n.tr(\"Localizable\", \"dark_theme.option.light\")\n        /// Sync with system settings\n        internal static let system = L10n.tr(\"Localizable\", \"dark_theme.option.system\")\n      }\n    }\n    internal enum Databaseloadingfailure {\n      internal enum Alert {\n        /// Delete Database\n        internal static let deleteDatabase = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database\")\n        /// The database could not be loaded due to insufficient storage. Review your device storage usage and try again.\n        internal static let message = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.message\")\n        /// Go to Settings\n        internal static let settings = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.settings\")\n        /// Not Enough Storage\n        internal static let title = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.title\")\n        internal enum DeleteDatabase {\n          /// Continue\n          internal static let `continue` = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database.continue\")\n          /// By deleting the database, all local data and messages for this account will be permanently deleted.\n          internal static let message = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database.message\")\n        }\n      }\n    }\n    internal enum Device {\n      /// Not Verified\n      internal static let notVerified = L10n.tr(\"Localizable\", \"device.not_verified\")\n      /// Verified\n      internal static let verified = L10n.tr(\"Localizable\", \"device.verified\")\n      internal enum Class {\n        /// Desktop\n        internal static let desktop = L10n.tr(\"Localizable\", \"device.class.desktop\")\n        /// Legal Hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"device.class.legalhold\")\n        /// Phone\n        internal static let phone = L10n.tr(\"Localizable\", \"device.class.phone\")\n        /// Tablet\n        internal static let tablet = L10n.tr(\"Localizable\", \"device.class.tablet\")\n        /// Unknown\n        internal static let unknown = L10n.tr(\"Localizable\", \"device.class.unknown\")\n      }\n      internal enum `Type` {\n        /// Legal Hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"device.type.legalhold\")\n        /// Permanent\n        internal static let permanent = L10n.tr(\"Localizable\", \"device.type.permanent\")\n        /// Temporary\n        internal static let temporary = L10n.tr(\"Localizable\", \"device.type.temporary\")\n        /// Unknown\n        internal static let unknown = L10n.tr(\"Localizable\", \"device.type.unknown\")\n      }\n    }\n    internal enum DigitalSignature {\n      internal enum Alert {\n        /// Please save and read the document before signing it.\n        internal static let downloadNecessary = L10n.tr(\"Localizable\", \"digital_signature.alert.download_necessary\")\n        /// Unfortunately, your digital signature failed.\n        internal static let error = L10n.tr(\"Localizable\", \"digital_signature.alert.error\")\n        internal enum Error {\n          /// Unfortunately, the signature form did not open. Please try again.\n          internal static let noConsentUrl = L10n.tr(\"Localizable\", \"digital_signature.alert.error.no_consent_url\")\n          /// Unfortunately, your digital signature failed. Please try again.\n          internal static let noSignature = L10n.tr(\"Localizable\", \"digital_signature.alert.error.no_signature\")\n        }\n      }\n    }\n    internal enum Email {\n      /// Email\n      internal static let placeholder = L10n.tr(\"Localizable\", \"email.placeholder\")\n      internal enum Guidance {\n        /// Invalid email address\n        internal static let invalid = L10n.tr(\"Localizable\", \"email.guidance.invalid\")\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"email.guidance.toolong\")\n        /// Email is too short\n        internal static let tooshort = L10n.tr(\"Localizable\", \"email.guidance.tooshort\")\n      }\n    }\n    internal enum Error {\n      /// Please enter a valid email address\n      internal static let email = L10n.tr(\"Localizable\", \"error.email\")\n      /// Please enter your full name\n      internal static let fullName = L10n.tr(\"Localizable\", \"error.full_name\")\n      /// Please enter your full name and a valid email address\n      internal static let nameAndEmail = L10n.tr(\"Localizable\", \"error.name_and_email\")\n      /// Couldn\u2019t update your password.\n      internal static let updatingPassword = L10n.tr(\"Localizable\", \"error.updating_password\")\n      internal enum Call {\n        /// Please try calling again in several minutes.\n        internal static let general = L10n.tr(\"Localizable\", \"error.call.general\")\n        /// Please cancel the cellular call before calling on Wire.\n        internal static let gsmOngoing = L10n.tr(\"Localizable\", \"error.call.gsm_ongoing\")\n        /// You might experience issues during the call\n        internal static let slowConnection = L10n.tr(\"Localizable\", \"error.call.slow_connection\")\n        internal enum General {\n          /// Call error\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.general.title\")\n        }\n        internal enum GsmOngoing {\n          /// Cellular call\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.gsm_ongoing.title\")\n        }\n        internal enum SlowConnection {\n          /// Call anyway\n          internal static let callAnyway = L10n.tr(\"Localizable\", \"error.call.slow_connection.call_anyway\")\n          /// Slow connection\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.slow_connection.title\")\n        }\n      }\n      internal enum Conversation {\n        /// Adding the participant failed\n        internal static let cannotAdd = L10n.tr(\"Localizable\", \"error.conversation.cannot_add\")\n        /// Removing the participant failed\n        internal static let cannotRemove = L10n.tr(\"Localizable\", \"error.conversation.cannot_remove\")\n        /// There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\n        internal static let offline = L10n.tr(\"Localizable\", \"error.conversation.offline\")\n        /// Error\n        internal static let title = L10n.tr(\"Localizable\", \"error.conversation.title\")\n        /// The conversation is full\n        internal static let tooManyMembers = L10n.tr(\"Localizable\", \"error.conversation.too_many_members\")\n      }\n      internal enum Email {\n        /// Please enter a valid email address\n        internal static let invalid = L10n.tr(\"Localizable\", \"error.email.invalid\")\n      }\n      internal enum GroupCall {\n        /// Calls work in conversations with up to %d people.\n        internal static func tooManyMembersInConversation(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"error.group_call.too_many_members_in_conversation\", p1)\n        }\n        /// There\u2019s only room for %d participants in here.\n        internal static func tooManyParticipantsInTheCall(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"error.group_call.too_many_participants_in_the_call\", p1)\n        }\n        internal enum TooManyMembersInConversation {\n          /// Too many people to call\n          internal static let title = L10n.tr(\"Localizable\", \"error.group_call.too_many_members_in_conversation.title\")\n        }\n        internal enum TooManyParticipantsInTheCall {\n          /// The call is full\n          internal static let title = L10n.tr(\"Localizable\", \"error.group_call.too_many_participants_in_the_call.title\")\n        }\n      }\n      internal enum Input {\n        /// Please enter a shorter username\n        internal static let tooLong = L10n.tr(\"Localizable\", \"error.input.too_long\")\n        /// Please enter a longer username\n        internal static let tooShort = L10n.tr(\"Localizable\", \"error.input.too_short\")\n      }\n      internal enum Invite {\n        /// Please configure your email client to be able to send the invites via email\n        internal static let noEmailProvider = L10n.tr(\"Localizable\", \"error.invite.no_email_provider\")\n        /// Please configure your SMS to be able to send the invites via SMS\n        internal static let noMessagingProvider = L10n.tr(\"Localizable\", \"error.invite.no_messaging_provider\")\n      }\n      internal enum Phone {\n        /// Please enter a valid phone number\n        internal static let invalid = L10n.tr(\"Localizable\", \"error.phone.invalid\")\n      }\n      internal enum User {\n        /// You can\u2019t add more than 3 accounts.\n        internal static let accountLimitReached = L10n.tr(\"Localizable\", \"error.user.account_limit_reached\")\n        /// The account you are trying access is pending activation. Please verify your details.\n        internal static let accountPendingActivation = L10n.tr(\"Localizable\", \"error.user.account_pending_activation\")\n        /// This account is no longer authorized to log in.\n        internal static let accountSuspended = L10n.tr(\"Localizable\", \"error.user.account_suspended\")\n        /// You have been logged out from another device.\n        internal static let deviceDeletedRemotely = L10n.tr(\"Localizable\", \"error.user.device_deleted_remotely\")\n        /// This email requires a team invitation. Contact your organization's IT administrators to receive an invite.\n        internal static let domainBlocked = L10n.tr(\"Localizable\", \"error.user.domain_blocked\")\n        /// The email address you provided has already been registered. Please try again.\n        internal static let emailIsTaken = L10n.tr(\"Localizable\", \"error.user.email_is_taken\")\n        /// Please verify your details and try again.\n        internal static let invalidCredentials = L10n.tr(\"Localizable\", \"error.user.invalid_credentials\")\n        /// Either an email address or a phone number is required.\n        internal static let lastIdentityCantBeDeleted = L10n.tr(\"Localizable\", \"error.user.last_identity_cant_be_deleted\")\n        /// Please verify your details and try again.\n        internal static let needsCredentials = L10n.tr(\"Localizable\", \"error.user.needs_credentials\")\n        /// There seems to be a problem with your network. Please try again later.\n        internal static let networkError = L10n.tr(\"Localizable\", \"error.user.network_error\")\n        /// Please enter a valid code\n        internal static let phoneCodeInvalid = L10n.tr(\"Localizable\", \"error.user.phone_code_invalid\")\n        /// We already sent you a code via SMS. Tap Resend after 10 minutes to get a new one.\n        internal static let phoneCodeTooMany = L10n.tr(\"Localizable\", \"error.user.phone_code_too_many\")\n        /// The phone number you provided has already been registered. Please try again.\n        internal static let phoneIsTaken = L10n.tr(\"Localizable\", \"error.user.phone_is_taken\")\n        /// Something went wrong. Please try again.\n        internal static let registrationUnknownError = L10n.tr(\"Localizable\", \"error.user.registration_unknown_error\")\n        /// Something went wrong, please try again\n        internal static let unkownError = L10n.tr(\"Localizable\", \"error.user.unkown_error\")\n      }\n    }\n    internal enum Folder {\n      internal enum Creation {\n        internal enum Name {\n          /// Maximum 64 characters\n          internal static let footer = L10n.tr(\"Localizable\", \"folder.creation.name.footer\")\n          /// Move the conversation \"%@\" to a new folder.\n          internal static func header(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"folder.creation.name.header\", String(describing: p1))\n          }\n          /// Folder name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"folder.creation.name.placeholder\")\n          /// Create new folder\n          internal static let title = L10n.tr(\"Localizable\", \"folder.creation.name.title\")\n          internal enum Button {\n            /// Create\n            internal static let create = L10n.tr(\"Localizable\", \"folder.creation.name.button.create\")\n          }\n        }\n      }\n      internal enum Picker {\n        /// Move to\n        internal static let title = L10n.tr(\"Localizable\", \"folder.picker.title\")\n        internal enum Empty {\n          /// Create a new folder by pressing the + button\n          internal static let hint = L10n.tr(\"Localizable\", \"folder.picker.empty.hint\")\n        }\n      }\n    }\n    internal enum Force {\n      internal enum Update {\n        /// You are missing out on new features.\\nGet the latest version of Wire in the App Store.\n        internal static let message = L10n.tr(\"Localizable\", \"force.update.message\")\n        /// Go to App Store\n        internal static let okButton = L10n.tr(\"Localizable\", \"force.update.ok_button\")\n        /// Update necessary\n        internal static let title = L10n.tr(\"Localizable\", \"force.update.title\")\n      }\n    }\n    internal enum General {\n      /// Accept\n      internal static let accept = L10n.tr(\"Localizable\", \"general.accept\")\n      /// Back\n      internal static let back = L10n.tr(\"Localizable\", \"general.back\")\n      /// Cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"general.cancel\")\n      /// Close\n      internal static let close = L10n.tr(\"Localizable\", \"general.close\")\n      /// OK\n      internal static let confirm = L10n.tr(\"Localizable\", \"general.confirm\")\n      /// No, thanks\n      internal static let decline = L10n.tr(\"Localizable\", \"general.decline\")\n      /// Done\n      internal static let done = L10n.tr(\"Localizable\", \"general.done\")\n      /// Edit\n      internal static let edit = L10n.tr(\"Localizable\", \"general.edit\")\n      /// Something went wrong\n      internal static let failure = L10n.tr(\"Localizable\", \"general.failure\")\n      /// Guest room\n      internal static let guestRoomName = L10n.tr(\"Localizable\", \"general.guest-room-name\")\n      /// Later\n      internal static let later = L10n.tr(\"Localizable\", \"general.later\")\n      /// Loading\u2026\n      internal static let loading = L10n.tr(\"Localizable\", \"general.loading\")\n      /// Next\n      internal static let next = L10n.tr(\"Localizable\", \"general.next\")\n      /// Off\n      internal static let off = L10n.tr(\"Localizable\", \"general.off\")\n      /// OK\n      internal static let ok = L10n.tr(\"Localizable\", \"general.ok\")\n      /// On\n      internal static let on = L10n.tr(\"Localizable\", \"general.on\")\n      /// Open Wire Settings\n      internal static let openSettings = L10n.tr(\"Localizable\", \"general.open_settings\")\n      /// Paste\n      internal static let paste = L10n.tr(\"Localizable\", \"general.paste\")\n      /// Service\n      internal static let service = L10n.tr(\"Localizable\", \"general.service\")\n      /// Not Now\n      internal static let skip = L10n.tr(\"Localizable\", \"general.skip\")\n      ///  \n      internal static let spaceBetweenWords = L10n.tr(\"Localizable\", \"general.space_between_words\")\n      internal enum Failure {\n        /// Please try again.\n        internal static let tryAgain = L10n.tr(\"Localizable\", \"general.failure.try_again\")\n      }\n    }\n    internal enum Giphy {\n      /// cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"giphy.cancel\")\n      /// send\n      internal static let confirm = L10n.tr(\"Localizable\", \"giphy.confirm\")\n      /// Search Giphy\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"giphy.search_placeholder\")\n      internal enum Conversation {\n        /// %@ \u00b7 via giphy.com\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"giphy.conversation.message\", String(describing: p1))\n        }\n        /// via giphy.com\n        internal static let randomMessage = L10n.tr(\"Localizable\", \"giphy.conversation.random_message\")\n      }\n      internal enum Error {\n        /// no more gifs\n        internal static let noMoreResults = L10n.tr(\"Localizable\", \"giphy.error.no_more_results\")\n        /// no gif found\n        internal static let noResult = L10n.tr(\"Localizable\", \"giphy.error.no_result\")\n      }\n    }\n    internal enum GroupDetails {\n      internal enum ConversationAdminsHeader {\n        /// Group admins\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.conversation_admins_header.title\")\n      }\n      internal enum ConversationMembersHeader {\n        /// Group members\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.conversation_members_header.title\")\n      }\n      internal enum GuestOptionsCell {\n        /// Off\n        internal static let disabled = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.disabled\")\n        /// On\n        internal static let enabled = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.enabled\")\n        /// Guests and services\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.title\")\n      }\n      internal enum NotificationOptionsCell {\n        /// You can be notified about everything (including audio and video calls) or only when someone mentions you or replies to one of your messages.\n        internal static let description = L10n.tr(\"Localizable\", \"group_details.notification_options_cell.description\")\n        /// Notifications\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.notification_options_cell.title\")\n      }\n      internal enum ReceiptOptionsCell {\n        /// When this is on, people can see when their messages in this conversation are read.\n        internal static let description = L10n.tr(\"Localizable\", \"group_details.receipt_options_cell.description\")\n        /// Read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.receipt_options_cell.title\")\n      }\n      internal enum TimeoutOptionsCell {\n        /// Timed messages\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.timeout_options_cell.title\")\n      }\n    }\n    internal enum GuestRoom {\n      internal enum Actions {\n        /// Link Copied!\n        internal static let copiedLink = L10n.tr(\"Localizable\", \"guest_room.actions.copied_link\")\n        /// Copy Link\n        internal static let copyLink = L10n.tr(\"Localizable\", \"guest_room.actions.copy_link\")\n        /// Revoke Link\u2026\n        internal static let revokeLink = L10n.tr(\"Localizable\", \"guest_room.actions.revoke_link\")\n        /// Share Link\n        internal static let shareLink = L10n.tr(\"Localizable\", \"guest_room.actions.share_link\")\n      }\n      internal enum AllowGuests {\n        /// Open this conversation to services and people outside your team.\n        internal static let subtitle = L10n.tr(\"Localizable\", \"guest_room.allow_guests.subtitle\")\n        /// Allow guests and services\n        internal static let title = L10n.tr(\"Localizable\", \"guest_room.allow_guests.title\")\n      }\n      internal enum Error {\n        internal enum Generic {\n          /// Check your connection and try again\n          internal static let message = L10n.tr(\"Localizable\", \"guest_room.error.generic.message\")\n          /// Something went wrong\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.error.generic.title\")\n        }\n      }\n      internal enum Expiration {\n        /// %@h left\n        internal static func hoursLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.expiration.hours_left\", String(describing: p1))\n        }\n        /// Less than %@m left\n        internal static func lessThanMinutesLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.expiration.less_than_minutes_left\", String(describing: p1))\n        }\n      }\n      internal enum Link {\n        internal enum Button {\n          /// Create Link\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.link.button.title\")\n        }\n        internal enum Header {\n          /// Anyone with the link can join the conversation, even if they don\u2019t have Wire.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"guest_room.link.header.subtitle\")\n          /// Invite others with a link\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.link.header.title\")\n        }\n      }\n      internal enum RemoveGuests {\n        /// Remove\n        internal static let action = L10n.tr(\"Localizable\", \"guest_room.remove_guests.action\")\n        /// Current guests and services will be removed from the conversation. New guests and services will not be allowed.\n        internal static let message = L10n.tr(\"Localizable\", \"guest_room.remove_guests.message\")\n      }\n      internal enum RevokeLink {\n        /// Revoke Link\n        internal static let action = L10n.tr(\"Localizable\", \"guest_room.revoke_link.action\")\n        /// New guests will not be able to join with this link. Current guests will still have access.\n        internal static let message = L10n.tr(\"Localizable\", \"guest_room.revoke_link.message\")\n      }\n      internal enum Share {\n        /// Join me in a conversation on Wire:\\n%@\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.share.message\", String(describing: p1))\n        }\n      }\n    }\n    internal enum Image {\n      /// Add an emoji\n      internal static let addEmoji = L10n.tr(\"Localizable\", \"image.add_emoji\")\n      /// Add a sketch\n      internal static let addSketch = L10n.tr(\"Localizable\", \"image.add_sketch\")\n      /// Edit image\n      internal static let editImage = L10n.tr(\"Localizable\", \"image.edit_image\")\n    }\n    internal enum ImageConfirmer {\n      /// Cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"image_confirmer.cancel\")\n      /// OK\n      internal static let confirm = L10n.tr(\"Localizable\", \"image_confirmer.confirm\")\n    }\n    internal enum Inbox {\n      internal enum ConnectionRequest {\n        /// Connect\n        internal static let connectButtonTitle = L10n.tr(\"Localizable\", \"inbox.connection_request.connect_button_title\")\n        /// Ignore\n        internal static let ignoreButtonTitle = L10n.tr(\"Localizable\", \"inbox.connection_request.ignore_button_title\")\n      }\n    }\n    internal enum Input {\n      internal enum Ephemeral {\n        /// Set a time for the message to disappear\n        internal static let title = L10n.tr(\"Localizable\", \"input.ephemeral.title\")\n        internal enum Timeout {\n          /// Off\n          internal static let `none` = L10n.tr(\"Localizable\", \"input.ephemeral.timeout.none\")\n        }\n      }\n    }\n    internal enum InviteBanner {\n      /// Invite more people\n      internal static let inviteButtonTitle = L10n.tr(\"Localizable\", \"invite_banner.invite_button_title\")\n      /// Enjoy calls, messages, sketches, GIFs and more in private or with groups.\n      internal static let message = L10n.tr(\"Localizable\", \"invite_banner.message\")\n      /// Bring your friends to Wire!\n      internal static let title = L10n.tr(\"Localizable\", \"invite_banner.title\")\n    }\n    internal enum Jailbrokendevice {\n      internal enum Alert {\n        /// For security reasons, Wire can't be used on this device. Any existing Wire data has been erased.\n        internal static let message = L10n.tr(\"Localizable\", \"jailbrokendevice.alert.message\")\n        /// Jailbreak detected\n        internal static let title = L10n.tr(\"Localizable\", \"jailbrokendevice.alert.title\")\n      }\n    }\n    internal enum KeyboardPhotosAccess {\n      internal enum Denied {\n        internal enum Keyboard {\n          /// Wire needs access to your camera.\n          internal static let camera = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.camera\")\n          /// Wire needs access to your\\ncamera and photos.\n          internal static let cameraAndPhotos = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.camera_and_photos\")\n          /// You can\u2019t access the camera while you are on a video call.\n          internal static let ongoingCall = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.ongoing_call\")\n          /// Wire needs access to your photos.\n          internal static let photos = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.photos\")\n          /// Settings\n          internal static let settings = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.settings\")\n        }\n      }\n    }\n    internal enum Landing {\n      /// Wire. Add your Account.\n      internal static let header = L10n.tr(\"Localizable\", \"landing.header\")\n      /// Trying to create a Pro or Enterprise account for your business or organization?\n      internal static let welcomeMessage = L10n.tr(\"Localizable\", \"landing.welcome_message\")\n      /// Unfortunately, that's not possible in the app - once you have created your team, you can log in here\n      internal static let welcomeSubmessage = L10n.tr(\"Localizable\", \"landing.welcome_submessage\")\n      internal enum CreateAccount {\n        /// Chat with friends and family?\n        internal static let infotitle = L10n.tr(\"Localizable\", \"landing.create_account.infotitle\")\n        /// Chat privately with groups of friends\u00a0and\u00a0family\n        internal static let subtitle = L10n.tr(\"Localizable\", \"landing.create_account.subtitle\")\n        /// Create a Wire personal account\n        internal static let title = L10n.tr(\"Localizable\", \"landing.create_account.title\")\n      }\n      internal enum CreateTeam {\n        /// Secure collaboration for businesses, institutions and professional\u00a0organizations\n        internal static let subtitle = L10n.tr(\"Localizable\", \"landing.create_team.subtitle\")\n        /// Pro\n        internal static let title = L10n.tr(\"Localizable\", \"landing.create_team.title\")\n      }\n      internal enum CustomBackend {\n        /// Connected to \"%@\"\n        internal static func title(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"landing.custom_backend.title\", String(describing: p1))\n        }\n        internal enum MoreInfo {\n          internal enum Alert {\n            ///  You are connected to a third-party server: %@\n            internal static func title(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"landing.custom_backend.more_info.alert.title\", String(describing: p1))\n            }\n          }\n          internal enum Button {\n            /// Show more\n            internal static let title = L10n.tr(\"Localizable\", \"landing.custom_backend.more_info.button.title\")\n          }\n        }\n      }\n      internal enum Login {\n        /// Already have an account?\n        internal static let hints = L10n.tr(\"Localizable\", \"landing.login.hints\")\n        internal enum Button {\n          /// Log in\n          internal static let title = L10n.tr(\"Localizable\", \"landing.login.button.title\")\n        }\n        internal enum Email {\n          internal enum Button {\n            /// Log in with email\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.email.button.title\")\n          }\n        }\n        internal enum Enterprise {\n          internal enum Button {\n            /// Enterprise log in\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.enterprise.button.title\")\n          }\n        }\n        internal enum Sso {\n          internal enum Button {\n            /// Log in with SSO\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.sso.button.title\")\n          }\n        }\n      }\n    }\n    internal enum LegalHold {\n      internal enum Deactivated {\n        /// Future messages will not be recorded.\n        internal static let message = L10n.tr(\"Localizable\", \"legal_hold.deactivated.message\")\n        /// Legal Hold Deactivated\n        internal static let title = L10n.tr(\"Localizable\", \"legal_hold.deactivated.title\")\n      }\n    }\n    internal enum Legalhold {\n      /// Legal hold details\n      internal static let accessibility = L10n.tr(\"Localizable\", \"legalhold.accessibility\")\n      internal enum Header {\n        /// Legal Hold has been activated for at least one person in this conversation.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\n        internal static let otherDescription = L10n.tr(\"Localizable\", \"legalhold.header.other_description\")\n        /// Legal Hold has been activated for your account.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\\nYour conversation partners will be aware of the recording.\n        internal static let selfDescription = L10n.tr(\"Localizable\", \"legalhold.header.self_description\")\n        /// Legal Hold\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold.header.title\")\n      }\n      internal enum Participants {\n        internal enum Section {\n          /// Legal hold subjects\n          internal static let title = L10n.tr(\"Localizable\", \"legalhold.participants.section.title\")\n        }\n      }\n    }\n    internal enum LegalholdActive {\n      internal enum Alert {\n        /// Learn More\n        internal static let learnMore = L10n.tr(\"Localizable\", \"legalhold_active.alert.learn_more\")\n        /// Legal Hold has been activated for your account. All messages will be preserved for future access, including deleted, edited, and timed messages.\\n\\nYour conversation partners will be aware of the recording.\n        internal static let message = L10n.tr(\"Localizable\", \"legalhold_active.alert.message\")\n        /// Legal Hold is Active\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold_active.alert.title\")\n      }\n    }\n    internal enum LegalholdRequest {\n      internal enum Alert {\n        /// All future messages will be recorded by the device with fingerprint:\\n\\n%@\\n\\nThis includes deleted, edited, and timed messages in all conversations.\n        internal static func detail(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"legalhold_request.alert.detail\", String(describing: p1))\n        }\n        /// Wrong Password\n        internal static let errorWrongPassword = L10n.tr(\"Localizable\", \"legalhold_request.alert.error_wrong_password\")\n        /// Legal Hold Requested\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold_request.alert.title\")\n        internal enum Detail {\n          /// Enter your password to confirm.\n          internal static let enterPassword = L10n.tr(\"Localizable\", \"legalhold_request.alert.detail.enter_password\")\n        }\n      }\n      internal enum Button {\n        /// Pending approval.\n        internal static let accessibility = L10n.tr(\"Localizable\", \"legalhold_request.button.accessibility\")\n      }\n    }\n    internal enum Library {\n      internal enum Alert {\n        internal enum PermissionWarning {\n          /// Wire needs access to your Photos\n          internal static let title = L10n.tr(\"Localizable\", \"library.alert.permission_warning.title\")\n          internal enum NotAllowed {\n            /// Go to Settings and allow Wire to access your photos.\n            internal static let explaination = L10n.tr(\"Localizable\", \"library.alert.permission_warning.not_allowed.explaination\")\n          }\n          internal enum Restrictions {\n            /// Wire cannot access your library because restrictions are enabled.\n            internal static let explaination = L10n.tr(\"Localizable\", \"library.alert.permission_warning.restrictions.explaination\")\n          }\n        }\n      }\n    }\n    internal enum List {\n      /// ARCHIVE\n      internal static let archivedConversations = L10n.tr(\"Localizable\", \"list.archived_conversations\")\n      /// Close archive\n      internal static let archivedConversationsClose = L10n.tr(\"Localizable\", \"list.archived_conversations_close\")\n      /// Conversations\n      internal static let title = L10n.tr(\"Localizable\", \"list.title\")\n      internal enum ConnectRequest {\n        /// Plural format key: \"%#@d_number_of_people@ waiting\"\n        internal static func peopleWaiting(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"list.connect_request.people_waiting\", p1)\n        }\n      }\n      internal enum Section {\n        /// People\n        internal static let contacts = L10n.tr(\"Localizable\", \"list.section.contacts\")\n        /// Favorites\n        internal static let favorites = L10n.tr(\"Localizable\", \"list.section.favorites\")\n        /// Groups\n        internal static let groups = L10n.tr(\"Localizable\", \"list.section.groups\")\n        /// Requests\n        internal static let requests = L10n.tr(\"Localizable\", \"list.section.requests\")\n      }\n    }\n    internal enum Location {\n      internal enum SendButton {\n        /// Send\n        internal static let title = L10n.tr(\"Localizable\", \"location.send_button.title\")\n      }\n      internal enum UnauthorizedAlert {\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"location.unauthorized_alert.cancel\")\n        /// To send your location, enable Location Services and allow Wire to access your location.\n        internal static let message = L10n.tr(\"Localizable\", \"location.unauthorized_alert.message\")\n        /// Settings\n        internal static let settings = L10n.tr(\"Localizable\", \"location.unauthorized_alert.settings\")\n        /// Enable Location Services\n        internal static let title = L10n.tr(\"Localizable\", \"location.unauthorized_alert.title\")\n      }\n    }\n    internal enum Login {\n      internal enum Sso {\n        /// This link is not valid. Please contact your administrator to resolve the issue.\n        internal static let linkErrorMessage = L10n.tr(\"Localizable\", \"login.sso.link_error_message\")\n        /// Cannot Start Enterprise Login\n        internal static let startErrorTitle = L10n.tr(\"Localizable\", \"login.sso.start_error_title\")\n        internal enum Alert {\n          /// Log in\n          internal static let action = L10n.tr(\"Localizable\", \"login.sso.alert.action\")\n          /// Enterprise Login\n          internal static let title = L10n.tr(\"Localizable\", \"login.sso.alert.title\")\n          internal enum Message {\n            /// Please enter your email or SSO code. If your email matches an enterprise installation of Wire, this app will connect to that server.\n            internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.alert.message.sso_and_email\")\n            /// Please enter your SSO code:\n            internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.alert.message.sso_only\")\n          }\n          internal enum TextField {\n            internal enum Placeholder {\n              /// email or SSO access code\n              internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.alert.text_field.placeholder.sso_and_email\")\n              /// SSO access code\n              internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.alert.text_field.placeholder.sso_only\")\n            }\n          }\n        }\n        internal enum BackendSwitch {\n          /// Provide credentials only if you're sure this is your organization's log in.\n          internal static let information = L10n.tr(\"Localizable\", \"login.sso.backend_switch.information\")\n          /// You are being redirected to your dedicated enterprise service.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"login.sso.backend_switch.subtitle\")\n          /// Redirecting...\n          internal static let title = L10n.tr(\"Localizable\", \"login.sso.backend_switch.title\")\n        }\n        internal enum Error {\n          internal enum Alert {\n            /// Please contact your team administrator for details (error %@).\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"login.sso.error.alert.message\", String(describing: p1))\n            }\n            internal enum DomainAssociatedWithWrongServer {\n              /// This email is linked to a different server, but the app can only be connected to one server at a time. Please log out of all Wire accounts on this device and try to login again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.domain_associated_with_wrong_server.message\")\n            }\n            internal enum DomainNotRegistered {\n              /// This email cannot be used for enterprise login. Please enter the SSO code to proceed.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.domain_not_registered.message\")\n            }\n            internal enum InvalidCode {\n              /// Please verify your company SSO access code and try again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_code.message\")\n            }\n            internal enum InvalidFormat {\n              internal enum Message {\n                /// Please enter a valid email or SSO access code\n                internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_format.message.sso_and_email\")\n                /// Please enter a valid SSO access code\n                internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_format.message.sso_only\")\n              }\n            }\n            internal enum InvalidStatus {\n              /// Please try again later (error %@).\n              internal static func message(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_status.message\", String(describing: p1))\n              }\n            }\n            internal enum Unknown {\n              /// Please try again later.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.unknown.message\")\n            }\n          }\n          internal enum Offline {\n            internal enum Alert {\n              /// Please check your Internet connection and try again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.offline.alert.message\")\n            }\n          }\n        }\n      }\n    }\n    internal enum Message {\n      internal enum DeleteDialog {\n        /// This cannot be undone.\n        internal static let message = L10n.tr(\"Localizable\", \"message.delete_dialog.message\")\n        internal enum Action {\n          /// Cancel\n          internal static let cancel = L10n.tr(\"Localizable\", \"message.delete_dialog.action.cancel\")\n          /// Delete for Everyone\n          internal static let delete = L10n.tr(\"Localizable\", \"message.delete_dialog.action.delete\")\n          /// Delete for Me\n          internal static let hide = L10n.tr(\"Localizable\", \"message.delete_dialog.action.hide\")\n        }\n      }\n      internal enum Menu {\n        internal enum Edit {\n          /// Edit\n          internal static let title = L10n.tr(\"Localizable\", \"message.menu.edit.title\")\n        }\n      }\n    }\n    internal enum MessageDetails {\n      /// Message Details\n      internal static let combinedTitle = L10n.tr(\"Localizable\", \"message_details.combined_title\")\n      /// No one has liked this message yet.\n      internal static let emptyLikes = L10n.tr(\"Localizable\", \"message_details.empty_likes\")\n      /// No one has read this message yet.\n      internal static let emptyReadReceipts = L10n.tr(\"Localizable\", \"message_details.empty_read_receipts\")\n      /// Liked\n      internal static let likesTitle = L10n.tr(\"Localizable\", \"message_details.likes_title\")\n      /// Read receipts were not on when this message was sent.\n      internal static let readReceiptsDisabled = L10n.tr(\"Localizable\", \"message_details.read_receipts_disabled\")\n      /// Read\n      internal static let receiptsTitle = L10n.tr(\"Localizable\", \"message_details.receipts_title\")\n      /// Edited: %@\n      internal static func subtitleEditDate(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"message_details.subtitle_edit_date\", String(describing: p1))\n      }\n      /// Message Details\n      internal static let subtitleLabelVoiceOver = L10n.tr(\"Localizable\", \"message_details.subtitle_label_voiceOver\")\n      /// Sent: %@\n      internal static func subtitleSendDate(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"message_details.subtitle_send_date\", String(describing: p1))\n      }\n      /// Username\n      internal static let userHandleSubtitleLabel = L10n.tr(\"Localizable\", \"message_details.user_handle_subtitle_label\")\n      /// Read at\n      internal static let userReadTimestampSubtitleLabel = L10n.tr(\"Localizable\", \"message_details.user_read_timestamp_subtitle_label\")\n      internal enum Tabs {\n        /// Liked (%d)\n        internal static func likes(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"message_details.tabs.likes\", p1)\n        }\n        /// Read (%d)\n        internal static func seen(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"message_details.tabs.seen\", p1)\n        }\n      }\n    }\n    internal enum Meta {\n      /// Cancel\n      internal static let leaveConversationButtonCancel = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_cancel\")\n      /// Leave\n      internal static let leaveConversationButtonLeave = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_leave\")\n      /// Leave and clear content\n      internal static let leaveConversationButtonLeaveAndDelete = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_leave_and_delete\")\n      /// The participants will be notified and the conversation will be removed from your list.\n      internal static let leaveConversationDialogMessage = L10n.tr(\"Localizable\", \"meta.leave_conversation_dialog_message\")\n      /// Leave conversation?\n      internal static let leaveConversationDialogTitle = L10n.tr(\"Localizable\", \"meta.leave_conversation_dialog_title\")\n      internal enum Degraded {\n        /// Cancel\n        internal static let cancelSendingButton = L10n.tr(\"Localizable\", \"meta.degraded.cancel_sending_button\")\n        /// Do you still want to send your message?\n        internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.degraded.dialog_message\")\n        /// Send Anyway\n        internal static let sendAnywayButton = L10n.tr(\"Localizable\", \"meta.degraded.send_anyway_button\")\n        /// Verify Devices\u2026\n        internal static let verifyDevicesButton = L10n.tr(\"Localizable\", \"meta.degraded.verify_devices_button\")\n        internal enum DegradationReasonMessage {\n          /// %@ started using new devices.\n          internal static func plural(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.plural\", String(describing: p1))\n          }\n          /// %@ started using a new device.\n          internal static func singular(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.singular\", String(describing: p1))\n          }\n          /// Someone started using a new device.\n          internal static let someone = L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.someone\")\n        }\n      }\n      internal enum LeaveConversation {\n        /// Also clear the content\n        internal static let deleteContentAsWellMessage = L10n.tr(\"Localizable\", \"meta.leave_conversation.delete_content_as_well_message\")\n      }\n      internal enum Legalhold {\n        /// What Is Legal Hold?\n        internal static let infoButton = L10n.tr(\"Localizable\", \"meta.legalhold.info_button\")\n        /// The conversation is now subject to legal hold.\n        internal static let sendAlertTitle = L10n.tr(\"Localizable\", \"meta.legalhold.send_alert_title\")\n      }\n      internal enum Menu {\n        /// More actions\n        internal static let accessibilityMoreOptionsButton = L10n.tr(\"Localizable\", \"meta.menu.accessibility_more_options_button\")\n        /// Archive\n        internal static let archive = L10n.tr(\"Localizable\", \"meta.menu.archive\")\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"meta.menu.cancel\")\n        /// Cancel Request\n        internal static let cancelConnectionRequest = L10n.tr(\"Localizable\", \"meta.menu.cancel_connection_request\")\n        /// Clear Content\u2026\n        internal static let clearContent = L10n.tr(\"Localizable\", \"meta.menu.clear_content\")\n        /// Notifications\u2026\n        internal static let configureNotifications = L10n.tr(\"Localizable\", \"meta.menu.configure_notifications\")\n        /// Delete Group\u2026\n        internal static let delete = L10n.tr(\"Localizable\", \"meta.menu.delete\")\n        /// Leave Group\u2026\n        internal static let leave = L10n.tr(\"Localizable\", \"meta.menu.leave\")\n        /// Mark as Read\n        internal static let markRead = L10n.tr(\"Localizable\", \"meta.menu.mark_read\")\n        /// Mark as Unread\n        internal static let markUnread = L10n.tr(\"Localizable\", \"meta.menu.mark_unread\")\n        /// Move to\u2026\n        internal static let moveToFolder = L10n.tr(\"Localizable\", \"meta.menu.move_to_folder\")\n        /// Open Profile\n        internal static let openSelfProfile = L10n.tr(\"Localizable\", \"meta.menu.open_self_profile\")\n        /// Remove from \"%@\"\n        internal static func removeFromFolder(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"meta.menu.remove_from_folder\", String(describing: p1))\n        }\n        /// Rename\n        internal static let rename = L10n.tr(\"Localizable\", \"meta.menu.rename\")\n        /// Unarchive\n        internal static let unarchive = L10n.tr(\"Localizable\", \"meta.menu.unarchive\")\n        internal enum ConfigureNotification {\n          /// Cancel\n          internal static let buttonCancel = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_cancel\")\n          /// Everything\n          internal static let buttonEverything = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_everything\")\n          /// Mentions and Replies\n          internal static let buttonMentionsAndReplies = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_mentions_and_replies\")\n          /// Nothing\n          internal static let buttonNothing = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_nothing\")\n          /// Notify me about:\n          internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.dialog_message\")\n        }\n        internal enum DeleteContent {\n          /// Cancel\n          internal static let buttonCancel = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_cancel\")\n          /// Clear\n          internal static let buttonDelete = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_delete\")\n          /// Clear and leave\n          internal static let buttonDeleteAndLeave = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_delete_and_leave\")\n          /// This will clear the conversation history on all your devices.\n          internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.menu.delete_content.dialog_message\")\n          /// Clear content?\n          internal static let dialogTitle = L10n.tr(\"Localizable\", \"meta.menu.delete_content.dialog_title\")\n          /// Also leave the conversation\n          internal static let leaveAsWellMessage = L10n.tr(\"Localizable\", \"meta.menu.delete_content.leave_as_well_message\")\n        }\n        internal enum Silence {\n          /// Mute\n          internal static let mute = L10n.tr(\"Localizable\", \"meta.menu.silence.mute\")\n          /// Unmute\n          internal static let unmute = L10n.tr(\"Localizable\", \"meta.menu.silence.unmute\")\n        }\n      }\n    }\n    internal enum Migration {\n      /// One moment, please\n      internal static let pleaseWaitMessage = L10n.tr(\"Localizable\", \"migration.please_wait_message\")\n    }\n    internal enum Missive {\n      internal enum ConnectionRequest {\n        /// Hi %@,\\nLet\u2019s connect on Wire.\\n%@\n        internal static func defaultMessage(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"missive.connection_request.default_message\", String(describing: p1), String(describing: p2))\n        }\n      }\n    }\n    internal enum Name {\n      /// Your full name\n      internal static let placeholder = L10n.tr(\"Localizable\", \"name.placeholder\")\n      internal enum Guidance {\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"name.guidance.toolong\")\n        /// At least 2 characters\n        internal static let tooshort = L10n.tr(\"Localizable\", \"name.guidance.tooshort\")\n      }\n    }\n    internal enum NewsOffers {\n      internal enum Consent {\n        /// You can unsubscribe at any time.\n        internal static let message = L10n.tr(\"Localizable\", \"news_offers.consent.message\")\n        /// Do you want to receive news and product updates from Wire via email?\n        internal static let title = L10n.tr(\"Localizable\", \"news_offers.consent.title\")\n        internal enum Button {\n          internal enum PrivacyPolicy {\n            /// Privacy Policy\n            internal static let title = L10n.tr(\"Localizable\", \"news_offers.consent.button.privacy_policy.title\")\n          }\n        }\n      }\n    }\n    internal enum Notifications {\n      /// %@ - %@\n      internal static func inConversation(_ p1: Any, _ p2: Any) -> String {\n        return L10n.tr(\"Localizable\", \"notifications.in_conversation\", String(describing: p1), String(describing: p2))\n      }\n      /// pinged\n      internal static let pinged = L10n.tr(\"Localizable\", \"notifications.pinged\")\n      /// shared an audio\n      internal static let sentAudio = L10n.tr(\"Localizable\", \"notifications.sent_audio\")\n      /// shared a file\n      internal static let sentFile = L10n.tr(\"Localizable\", \"notifications.sent_file\")\n      /// shared a location\n      internal static let sentLocation = L10n.tr(\"Localizable\", \"notifications.sent_location\")\n      /// shared a video\n      internal static let sentVideo = L10n.tr(\"Localizable\", \"notifications.sent_video\")\n      /// shared a picture\n      internal static let sharedAPhoto = L10n.tr(\"Localizable\", \"notifications.shared_a_photo\")\n      /// %@ in this conversation\n      internal static func thisConversation(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"notifications.this_conversation\", String(describing: p1))\n      }\n    }\n    internal enum OpenLink {\n      internal enum Browser {\n        internal enum Option {\n          /// Brave\n          internal static let brave = L10n.tr(\"Localizable\", \"open_link.browser.option.brave\")\n          /// Chrome\n          internal static let chrome = L10n.tr(\"Localizable\", \"open_link.browser.option.chrome\")\n          /// Firefox\n          internal static let firefox = L10n.tr(\"Localizable\", \"open_link.browser.option.firefox\")\n          /// Safari\n          internal static let safari = L10n.tr(\"Localizable\", \"open_link.browser.option.safari\")\n          /// SnowHaze\n          internal static let snowhaze = L10n.tr(\"Localizable\", \"open_link.browser.option.snowhaze\")\n        }\n      }\n      internal enum Maps {\n        /// Some location links will always open in Apple Maps.\n        internal static let footer = L10n.tr(\"Localizable\", \"open_link.maps.footer\")\n        internal enum Option {\n          /// Maps\n          internal static let apple = L10n.tr(\"Localizable\", \"open_link.maps.option.apple\")\n          /// Google Maps\n          internal static let google = L10n.tr(\"Localizable\", \"open_link.maps.option.google\")\n        }\n      }\n      internal enum Twitter {\n        internal enum Option {\n          /// Browser / Twitter\n          internal static let `default` = L10n.tr(\"Localizable\", \"open_link.twitter.option.default\")\n          /// Tweetbot\n          internal static let tweetbot = L10n.tr(\"Localizable\", \"open_link.twitter.option.tweetbot\")\n          /// Twitterrific\n          internal static let twitterrific = L10n.tr(\"Localizable\", \"open_link.twitter.option.twitterrific\")\n        }\n      }\n    }\n    internal enum Participants {\n      /// Add\n      internal static let addPeopleButtonTitle = L10n.tr(\"Localizable\", \"participants.add_people_button_title\")\n      /// Details\n      internal static let title = L10n.tr(\"Localizable\", \"participants.title\")\n      internal enum All {\n        /// People\n        internal static let title = L10n.tr(\"Localizable\", \"participants.all.title\")\n      }\n      internal enum Avatar {\n        internal enum Guest {\n          /// Guest\n          internal static let title = L10n.tr(\"Localizable\", \"participants.avatar.guest.title\")\n        }\n      }\n      internal enum Footer {\n        /// Add Participants\n        internal static let addTitle = L10n.tr(\"Localizable\", \"participants.footer.add_title\")\n      }\n      internal enum People {\n        /// Plural format key: \"%#@lu_number_of_people@\"\n        internal static func count(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.people.count\", p1)\n        }\n      }\n      internal enum Section {\n        /// People (%d)\n        internal static func participants(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.section.participants\", p1)\n        }\n        /// Services (%d)\n        internal static func services(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.section.services\", p1)\n        }\n        /// Options\n        internal static let settings = L10n.tr(\"Localizable\", \"participants.section.settings\")\n        internal enum Admins {\n          /// There are no admins.\n          internal static let footer = L10n.tr(\"Localizable\", \"participants.section.admins.footer\")\n        }\n        internal enum Members {\n          /// There are no members.\n          internal static let footer = L10n.tr(\"Localizable\", \"participants.section.members.footer\")\n        }\n        internal enum Name {\n          /// Up to %1$d participants can join a group conversation.\n          internal static func footer(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"participants.section.name.footer\", p1)\n          }\n        }\n      }\n      internal enum Services {\n        internal enum RemoveIntegration {\n          /// remove integration\n          internal static let button = L10n.tr(\"Localizable\", \"participants.services.remove_integration.button\")\n        }\n      }\n    }\n    internal enum Passcode {\n      /// Passcode\n      internal static let hintLabel = L10n.tr(\"Localizable\", \"passcode.hint_label\")\n    }\n    internal enum Password {\n      /// Password\n      internal static let placeholder = L10n.tr(\"Localizable\", \"password.placeholder\")\n      internal enum Guidance {\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"password.guidance.toolong\")\n      }\n    }\n    internal enum Peoplepicker {\n      /// Hide\n      internal static let hideSearchResult = L10n.tr(\"Localizable\", \"peoplepicker.hide_search_result\")\n      /// Hiding\u2026\n      internal static let hideSearchResultProgress = L10n.tr(\"Localizable\", \"peoplepicker.hide_search_result_progress\")\n      /// Invite more people\n      internal static let inviteMorePeople = L10n.tr(\"Localizable\", \"peoplepicker.invite_more_people\")\n      /// Invite people to join the team\n      internal static let inviteTeamMembers = L10n.tr(\"Localizable\", \"peoplepicker.invite_team_members\")\n      /// No Contacts.\n      internal static let noContactsTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_contacts_title\")\n      /// share contacts\n      internal static let noMatchingResultsAfterAddressBookUploadButton = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_button\")\n      /// Enter a full email address or\n      internal static let noMatchingResultsAfterAddressBookUploadMessage = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_message\")\n      /// No results.\n      internal static let noMatchingResultsAfterAddressBookUploadTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_title\")\n      /// Enter a full email address.\n      internal static let noMatchingResultsMessage = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_message\")\n      /// Please enter a valid email address\n      internal static let noMatchingResultsProvideValidEmail = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_provide_valid_email\")\n      /// Services are helpers that can improve your workflow.\n      internal static let noMatchingResultsServicesAdminTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_admin_title\")\n      /// Manage Services\n      internal static let noMatchingResultsServicesManageServicesTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_manage_services_title\")\n      /// Services are helpers that can improve your workflow. To enable them, ask your administrator.\n      internal static let noMatchingResultsServicesTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_title\")\n      /// No results.\n      internal static let noMatchingResultsTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_title\")\n      /// No matching results. Try entering a different name.\n      internal static let noSearchResults = L10n.tr(\"Localizable\", \"peoplepicker.no_search_results\")\n      /// Search by name or username\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"peoplepicker.search_placeholder\")\n      internal enum Button {\n        /// Add Participants to Group\n        internal static let addToConversation = L10n.tr(\"Localizable\", \"peoplepicker.button.add_to_conversation\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.button.create_conversation\")\n      }\n      internal enum Federation {\n        /// The federated domain is currently not available. [Learn more](%@)\n        internal static func domainUnvailable(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.federation.domain_unvailable\", String(describing: p1))\n        }\n      }\n      internal enum Group {\n        /// Create\n        internal static let create = L10n.tr(\"Localizable\", \"peoplepicker.group.create\")\n        /// Done\n        internal static let done = L10n.tr(\"Localizable\", \"peoplepicker.group.done\")\n        /// Skip\n        internal static let skip = L10n.tr(\"Localizable\", \"peoplepicker.group.skip\")\n        internal enum Title {\n          /// Add Participants (%d)\n          internal static func plural(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"peoplepicker.group.title.plural\", p1)\n          }\n          /// Add Participants\n          internal static let singular = L10n.tr(\"Localizable\", \"peoplepicker.group.title.singular\")\n        }\n      }\n      internal enum Header {\n        /// Contacts\n        internal static let contacts = L10n.tr(\"Localizable\", \"peoplepicker.header.contacts\")\n        /// Personal Contacts\n        internal static let contactsPersonal = L10n.tr(\"Localizable\", \"peoplepicker.header.contacts_personal\")\n        /// Groups\n        internal static let conversations = L10n.tr(\"Localizable\", \"peoplepicker.header.conversations\")\n        /// Connect\n        internal static let directory = L10n.tr(\"Localizable\", \"peoplepicker.header.directory\")\n        /// Connect with other domain\n        internal static let federation = L10n.tr(\"Localizable\", \"peoplepicker.header.federation\")\n        /// People\n        internal static let people = L10n.tr(\"Localizable\", \"peoplepicker.header.people\")\n        /// Invite\n        internal static let sendInvitation = L10n.tr(\"Localizable\", \"peoplepicker.header.send_invitation\")\n        /// Services\n        internal static let services = L10n.tr(\"Localizable\", \"peoplepicker.header.services\")\n        /// %@ Groups\n        internal static func teamConversations(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.header.team_conversations\", String(describing: p1))\n        }\n        /// Top people\n        internal static let topPeople = L10n.tr(\"Localizable\", \"peoplepicker.header.top_people\")\n      }\n      internal enum NoMatchingResults {\n        internal enum Action {\n          /// Send an invitation\n          internal static let sendInvite = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results.action.send_invite\")\n          /// Share contacts\n          internal static let shareContacts = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results.action.share_contacts\")\n        }\n      }\n      internal enum QuickAction {\n        /// Manage Services\n        internal static let adminServices = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.admin-services\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.create-conversation\")\n        /// Create guest room\n        internal static let createGuestRoom = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.create-guest-room\")\n        /// Open\n        internal static let openConversation = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.open-conversation\")\n      }\n      internal enum SendInvitation {\n        internal enum Dialog {\n          /// It can be used for 2 weeks. Send a new one if it expires.\n          internal static let message = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.message\")\n          /// OK\n          internal static let ok = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.ok\")\n          /// Invitation sent\n          internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.title\")\n        }\n      }\n      internal enum Services {\n        internal enum AddService {\n          /// Add service\n          internal static let button = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.button\")\n          internal enum Error {\n            /// The service is unavailable at the moment\n            internal static let `default` = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.default\")\n            /// The conversation is full\n            internal static let full = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.full\")\n            /// The service can\u2019t be added\n            internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.title\")\n          }\n        }\n        internal enum OpenConversation {\n          /// Open conversation\n          internal static let item = L10n.tr(\"Localizable\", \"peoplepicker.services.open_conversation.item\")\n        }\n      }\n      internal enum ShareContacts {\n        internal enum NoResults {\n          /// Find people by name or email address\n          internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.share_contacts.no_results.title\")\n        }\n      }\n      internal enum Suggested {\n        /// Plural format key: \"Knows %@ and %#@d_number_of_others@\"\n        internal static func knowsMore(_ p1: Any, _ p2: Int) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_more\", String(describing: p1), p2)\n        }\n        /// Knows %@\n        internal static func knowsOne(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_one\", String(describing: p1))\n        }\n        /// Knows %@ and %@\n        internal static func knowsTwo(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_two\", String(describing: p1), String(describing: p2))\n        }\n      }\n      internal enum Title {\n        /// Add participants\n        internal static let addToConversation = L10n.tr(\"Localizable\", \"peoplepicker.title.add_to_conversation\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.title.create_conversation\")\n      }\n    }\n    internal enum Phone {\n      internal enum Guidance {\n        /// Invalid phone number\n        internal static let invalid = L10n.tr(\"Localizable\", \"phone.guidance.invalid\")\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"phone.guidance.toolong\")\n        /// Phone number is too short\n        internal static let tooshort = L10n.tr(\"Localizable\", \"phone.guidance.tooshort\")\n      }\n    }\n    internal enum Profile {\n      /// Block\u2026\n      internal static let blockButtonTitle = L10n.tr(\"Localizable\", \"profile.block_button_title\")\n      /// Block\n      internal static let blockButtonTitleAction = L10n.tr(\"Localizable\", \"profile.block_button_title_action\")\n      /// CANCEL REQUEST\n      internal static let cancelConnectionButtonTitle = L10n.tr(\"Localizable\", \"profile.cancel_connection_button_title\")\n      /// Create group\n      internal static let createConversationButtonTitle = L10n.tr(\"Localizable\", \"profile.create_conversation_button_title\")\n      /// Add to Favorites\n      internal static let favoriteButtonTitle = L10n.tr(\"Localizable\", \"profile.favorite_button_title\")\n      /// Open conversation\n      internal static let openConversationButtonTitle = L10n.tr(\"Localizable\", \"profile.open_conversation_button_title\")\n      /// Cancel\n      internal static let removeDialogButtonCancel = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_cancel\")\n      /// Remove From Group\u2026\n      internal static let removeDialogButtonRemove = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_remove\")\n      /// Remove From Group\n      internal static let removeDialogButtonRemoveConfirm = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_remove_confirm\")\n      /// %@ won\u2019t be able to send or receive messages in this conversation.\n      internal static func removeDialogMessage(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"profile.remove_dialog_message\", String(describing: p1))\n      }\n      /// Remove?\n      internal static let removeDialogTitle = L10n.tr(\"Localizable\", \"profile.remove_dialog_title\")\n      /// Unblock\u2026\n      internal static let unblockButtonTitle = L10n.tr(\"Localizable\", \"profile.unblock_button_title\")\n      /// Unblock\n      internal static let unblockButtonTitleAction = L10n.tr(\"Localizable\", \"profile.unblock_button_title_action\")\n      /// Remove from Favorites\n      internal static let unfavoriteButtonTitle = L10n.tr(\"Localizable\", \"profile.unfavorite_button_title\")\n      internal enum BlockDialog {\n        /// Block\n        internal static let buttonBlock = L10n.tr(\"Localizable\", \"profile.block_dialog.button_block\")\n        /// Cancel\n        internal static let buttonCancel = L10n.tr(\"Localizable\", \"profile.block_dialog.button_cancel\")\n        /// %@ won\u2019t be able to contact you or add you to group conversations.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.block_dialog.message\", String(describing: p1))\n        }\n        /// Block?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.block_dialog.title\")\n      }\n      internal enum CancelConnectionRequestDialog {\n        /// No\n        internal static let buttonNo = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.button_no\")\n        /// Yes\n        internal static let buttonYes = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.button_yes\")\n        /// Cancel your connection request to %@?\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.message\", String(describing: p1))\n        }\n        /// Cancel Request?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.title\")\n      }\n      internal enum ConnectionRequestDialog {\n        /// Ignore\n        internal static let buttonCancel = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.button_cancel\")\n        /// Connect\n        internal static let buttonConnect = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.button_connect\")\n        /// This will connect you and open the conversation with %@.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.connection_request_dialog.message\", String(describing: p1))\n        }\n        /// Accept?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.title\")\n      }\n      internal enum ConnectionRequestState {\n        /// BLOCKED\n        internal static let blocked = L10n.tr(\"Localizable\", \"profile.connection_request_state.blocked\")\n      }\n      internal enum Details {\n        /// Group admin\n        internal static let groupAdmin = L10n.tr(\"Localizable\", \"profile.details.group_admin\")\n        /// Guest\n        internal static let guest = L10n.tr(\"Localizable\", \"profile.details.guest\")\n        /// external\n        internal static let partner = L10n.tr(\"Localizable\", \"profile.details.partner\")\n        /// Details\n        internal static let title = L10n.tr(\"Localizable\", \"profile.details.title\")\n      }\n      internal enum Devices {\n        /// %@ is using an old version of Wire. No devices are shown here.\n        internal static func fingerprintMessageUnencrypted(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message_unencrypted\", String(describing: p1))\n        }\n        /// Devices\n        internal static let title = L10n.tr(\"Localizable\", \"profile.devices.title\")\n        internal enum Detail {\n          /// Verify that this matches the fingerprint shown on %@\u2019s device.\n          internal static func verifyMessage(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"profile.devices.detail.verify_message\", String(describing: p1))\n          }\n          internal enum ResetSession {\n            /// Reset Session\n            internal static let title = L10n.tr(\"Localizable\", \"profile.devices.detail.reset_session.title\")\n          }\n          internal enum ShowMyDevice {\n            /// Show my device fingerprint\n            internal static let title = L10n.tr(\"Localizable\", \"profile.devices.detail.show_my_device.title\")\n          }\n          internal enum VerifyMessage {\n            /// How do I do that?\n            internal static let link = L10n.tr(\"Localizable\", \"profile.devices.detail.verify_message.link\")\n          }\n        }\n        internal enum FingerprintMessage {\n          /// Why verify conversations?\n          internal static let link = L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message.link\")\n          /// Wire gives every device a unique fingerprint. Compare them with %@ and verify your conversation.\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum ExtendedMetadata {\n        /// Information\n        internal static let header = L10n.tr(\"Localizable\", \"profile.extended_metadata.header\")\n      }\n      internal enum GroupAdminStatusMemo {\n        /// When this is on, the admin can add or remove people and services, update group settings, and change a participant's role.\n        internal static let body = L10n.tr(\"Localizable\", \"profile.group_admin_status_memo.body\")\n      }\n      internal enum Profile {\n        internal enum GroupAdminOptions {\n          /// Group admin\n          internal static let title = L10n.tr(\"Localizable\", \"profile.profile.group_admin_options.title\")\n        }\n      }\n      internal enum ReadReceiptsDisabledMemo {\n        /// YOU HAVE DISABLED READ RECEIPTS\n        internal static let header = L10n.tr(\"Localizable\", \"profile.read_receipts_disabled_memo.header\")\n      }\n      internal enum ReadReceiptsEnabledMemo {\n        /// YOU HAVE ENABLED READ RECEIPTS\n        internal static let header = L10n.tr(\"Localizable\", \"profile.read_receipts_enabled_memo.header\")\n      }\n      internal enum ReadReceiptsMemo {\n        /// If both sides turn on read receipts, you can see when messages are read.\\n\\nYou can change this option in your account settings.\n        internal static let body = L10n.tr(\"Localizable\", \"profile.read_receipts_memo.body\")\n      }\n    }\n    internal enum ProfileView {\n      internal enum Accessibility {\n        /// Username\n        internal static let handle = L10n.tr(\"Localizable\", \"profile_view.accessibility.handle\")\n        /// Display name\n        internal static let name = L10n.tr(\"Localizable\", \"profile_view.accessibility.name\")\n        /// Team name\n        internal static let teamName = L10n.tr(\"Localizable\", \"profile_view.accessibility.team_name\")\n      }\n    }\n    internal enum Push {\n      internal enum Notification {\n        /// New message\n        internal static let newMessage = L10n.tr(\"Localizable\", \"push.notification.new_message\")\n        /// %@ joined Wire\n        internal static func newUser(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"push.notification.new_user\", String(describing: p1))\n        }\n      }\n    }\n    internal enum Registration {\n      /// Sign Up\n      internal static let confirm = L10n.tr(\"Localizable\", \"registration.confirm\")\n      /// Country Code\n      internal static let phoneCode = L10n.tr(\"Localizable\", \"registration.phone_code\")\n      /// Country\n      internal static let phoneCountry = L10n.tr(\"Localizable\", \"registration.phone_country\")\n      /// Email\n      internal static let registerByEmail = L10n.tr(\"Localizable\", \"registration.register_by_email\")\n      /// Phone\n      internal static let registerByPhone = L10n.tr(\"Localizable\", \"registration.register_by_phone\")\n      /// Registration\n      internal static let title = L10n.tr(\"Localizable\", \"registration.title\")\n      internal enum AddEmailPassword {\n        internal enum Hero {\n          /// This lets you use Wire on multiple devices.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.add_email_password.hero.paragraph\")\n          /// Add your email and password\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_email_password.hero.title\")\n        }\n      }\n      internal enum AddPhoneNumber {\n        internal enum Hero {\n          /// This helps us find people you may know. We never share it.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.add_phone_number.hero.paragraph\")\n          /// Add phone number\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_phone_number.hero.title\")\n        }\n        internal enum SkipButton {\n          /// Not now\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_phone_number.skip_button.title\")\n        }\n      }\n      internal enum AddressBookAccessDenied {\n        internal enum Hero {\n          /// Wire helps find your friends if you share your contacts.\n          internal static let paragraph1 = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.paragraph1\")\n          /// To enable access tap Settings and turn on Contacts.\n          internal static let paragraph2 = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.paragraph2\")\n          /// Wire does not have access to your contacts.\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.title\")\n        }\n        internal enum MaybeLaterButton {\n          /// Maybe later\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.maybe_later_button.title\")\n        }\n        internal enum SettingsButton {\n          /// Settings\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.settings_button.title\")\n        }\n      }\n      internal enum Alert {\n        /// Register with Another Email\n        internal static let changeEmailAction = L10n.tr(\"Localizable\", \"registration.alert.change_email_action\")\n        /// Register with Another Number\n        internal static let changePhoneAction = L10n.tr(\"Localizable\", \"registration.alert.change_phone_action\")\n        /// Log In\n        internal static let changeSigninAction = L10n.tr(\"Localizable\", \"registration.alert.change_signin_action\")\n        internal enum AccountExists {\n          /// The email address you used to register is already linked to an account.\\n\\n Use another email address, or try to log in if you own this account.\n          internal static let messageEmail = L10n.tr(\"Localizable\", \"registration.alert.account_exists.message_email\")\n          /// The phone number you used to register is already linked to an account.\\n\\nUse another phone number, or try to log in if you own this account.\n          internal static let messagePhone = L10n.tr(\"Localizable\", \"registration.alert.account_exists.message_phone\")\n          /// Account Exists\n          internal static let title = L10n.tr(\"Localizable\", \"registration.alert.account_exists.title\")\n        }\n      }\n      internal enum CloseEmailInvitationButton {\n        /// Use another email\n        internal static let emailTitle = L10n.tr(\"Localizable\", \"registration.close_email_invitation_button.email_title\")\n        /// Register by phone\n        internal static let phoneTitle = L10n.tr(\"Localizable\", \"registration.close_email_invitation_button.phone_title\")\n      }\n      internal enum ClosePhoneInvitationButton {\n        /// Register by email\n        internal static let emailTitle = L10n.tr(\"Localizable\", \"registration.close_phone_invitation_button.email_title\")\n        /// Use another phone\n        internal static let phoneTitle = L10n.tr(\"Localizable\", \"registration.close_phone_invitation_button.phone_title\")\n      }\n      internal enum CountrySelect {\n        /// Country\n        internal static let title = L10n.tr(\"Localizable\", \"registration.country_select.title\")\n      }\n      internal enum Devices {\n        /// Activated %@\n        internal static func activated(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.devices.activated\", String(describing: p1))\n        }\n        /// Active\n        internal static let activeListHeader = L10n.tr(\"Localizable\", \"registration.devices.active_list_header\")\n        /// If you don\u2019t recognize a device above, remove it and reset your password.\n        internal static let activeListSubtitle = L10n.tr(\"Localizable\", \"registration.devices.active_list_subtitle\")\n        /// Current\n        internal static let currentListHeader = L10n.tr(\"Localizable\", \"registration.devices.current_list_header\")\n        /// ID:\n        internal static let id = L10n.tr(\"Localizable\", \"registration.devices.id\")\n        /// Devices\n        internal static let title = L10n.tr(\"Localizable\", \"registration.devices.title\")\n      }\n      internal enum EmailFlow {\n        /// Register by Email\n        internal static let title = L10n.tr(\"Localizable\", \"registration.email_flow.title\")\n        internal enum EmailStep {\n          /// Edit Details\n          internal static let title = L10n.tr(\"Localizable\", \"registration.email_flow.email_step.title\")\n        }\n      }\n      internal enum EmailInvitation {\n        /// Invitation\n        internal static let title = L10n.tr(\"Localizable\", \"registration.email_invitation.title\")\n        internal enum Hero {\n          /// Choose a password to create your account.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.email_invitation.hero.paragraph\")\n          /// Hello, %@\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.email_invitation.hero.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum EnterName {\n        /// What should we call you?\n        internal static let hero = L10n.tr(\"Localizable\", \"registration.enter_name.hero\")\n        /// Your full name\n        internal static let placeholder = L10n.tr(\"Localizable\", \"registration.enter_name.placeholder\")\n        /// Edit Name\n        internal static let title = L10n.tr(\"Localizable\", \"registration.enter_name.title\")\n      }\n      internal enum EnterPhoneNumber {\n        /// Phone number\n        internal static let placeholder = L10n.tr(\"Localizable\", \"registration.enter_phone_number.placeholder\")\n        /// Edit phone number\n        internal static let title = L10n.tr(\"Localizable\", \"registration.enter_phone_number.title\")\n      }\n      internal enum LaunchBackButton {\n        /// Back\n        internal static let label = L10n.tr(\"Localizable\", \"registration.launch_back_button.label\")\n      }\n      internal enum NoHistory {\n        /// OK\n        internal static let gotIt = L10n.tr(\"Localizable\", \"registration.no_history.got_it\")\n        /// It\u2019s the first time you\u2019re using Wire on this device.\n        internal static let hero = L10n.tr(\"Localizable\", \"registration.no_history.hero\")\n        /// Restore from backup\n        internal static let restoreBackup = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup\")\n        /// For privacy reasons, your conversation history will not appear here.\n        internal static let subtitle = L10n.tr(\"Localizable\", \"registration.no_history.subtitle\")\n        internal enum LoggedOut {\n          /// OK\n          internal static let gotIt = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.got_it\")\n          /// You\u2019ve used Wire on this device before.\n          internal static let hero = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.hero\")\n          /// Messages sent in the meantime will not appear.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.subtitle\")\n        }\n        internal enum RestoreBackup {\n          /// Completed\n          internal static let completed = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.completed\")\n          /// Restoring\u2026\n          internal static let restoring = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.restoring\")\n          internal enum Password {\n            /// The password is required to restore this backup.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.message\")\n            /// Password\n            internal static let placeholder = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.placeholder\")\n            /// This backup is password protected.\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.title\")\n          }\n          internal enum PasswordError {\n            /// Wrong Password\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password_error.title\")\n          }\n        }\n        internal enum RestoreBackupFailed {\n          /// Your history could not be restored.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.message\")\n          /// Something went wrong\n          internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.title\")\n          /// Try again\n          internal static let tryAgain = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.try_again\")\n          internal enum WrongAccount {\n            /// You cannot restore history from a different account.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_account.message\")\n            /// Incompatible backup\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_account.title\")\n          }\n          internal enum WrongVersion {\n            /// This backup was created by a newer or outdated version of Wire and cannot be restored here.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_version.message\")\n            /// Incompatible backup\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_version.title\")\n          }\n        }\n        internal enum RestoreBackupWarning {\n          /// The backup contents will replace the conversation history on this device.\\nYou can only restore history from a backup of the same platform.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.message\")\n          /// Choose Backup File\n          internal static let proceed = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.proceed\")\n          /// Restore history\n          internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.title\")\n        }\n      }\n      internal enum Password {\n        internal enum Rules {\n          /// Plural format key: \"%#@character_count@\"\n          internal static func lowercase(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.lowercase\", p1)\n          }\n          /// Plural format key: \"at least %#@character_count@\"\n          internal static func minLength(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.min_length\", p1)\n          }\n          /// Use %@.\n          internal static func noRequirements(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.no_requirements\", String(describing: p1))\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func number(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.number\", p1)\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func special(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.special\", p1)\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func uppercase(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.uppercase\", p1)\n          }\n          /// Use %@, with %@.\n          internal static func withRequirements(_ p1: Any, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.with_requirements\", String(describing: p1), String(describing: p2))\n          }\n        }\n      }\n      internal enum Personal {\n        /// Create an account\n        internal static let title = L10n.tr(\"Localizable\", \"registration.personal.title\")\n      }\n      internal enum Phone {\n        internal enum CountryCode {\n          /// Double tap to use a phone number from this country.\n          internal static let hint = L10n.tr(\"Localizable\", \"registration.phone.country_code.hint\")\n        }\n        internal enum Verify {\n          /// Verify phone number\n          internal static let label = L10n.tr(\"Localizable\", \"registration.phone.verify.label\")\n        }\n        internal enum VerifyField {\n          /// Verification Code\n          internal static let label = L10n.tr(\"Localizable\", \"registration.phone.verify_field.label\")\n        }\n      }\n      internal enum PhoneCode {\n        /// Double tap to select another country code.\n        internal static let hint = L10n.tr(\"Localizable\", \"registration.phone_code.hint\")\n      }\n      internal enum PhoneCountry {\n        /// Double tap to select another country.\n        internal static let hint = L10n.tr(\"Localizable\", \"registration.phone_country.hint\")\n      }\n      internal enum PhoneInvitation {\n        /// Invitation\n        internal static let title = L10n.tr(\"Localizable\", \"registration.phone_invitation.title\")\n        internal enum Hero {\n          /// You are one step away from creating your account.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.phone_invitation.hero.paragraph\")\n          /// Hello, %@\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.phone_invitation.hero.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum PushAccessDenied {\n        internal enum Hero {\n          /// Enable Notifications in Settings.\n          internal static let paragraph1 = L10n.tr(\"Localizable\", \"registration.push_access_denied.hero.paragraph1\")\n          /// Never miss a call or a message.\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.hero.title\")\n        }\n        internal enum MaybeLaterButton {\n          /// Maybe later\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.maybe_later_button.title\")\n        }\n        internal enum SettingsButton {\n          /// Go to Settings\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.settings_button.title\")\n        }\n      }\n      internal enum SelectHandle {\n        internal enum Takeover {\n          /// Choose yours\n          internal static let chooseOwn = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.choose_own\")\n          /// Keep this one\n          internal static let keepSuggested = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.keep_suggested\")\n          /// Claim your unique name on Wire.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.subtitle\")\n          /// Learn more\n          internal static let subtitleLink = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.subtitle_link\")\n        }\n      }\n      internal enum ShareContacts {\n        internal enum FindFriendsButton {\n          /// Share contacts\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.find_friends_button.title\")\n        }\n        internal enum Hero {\n          /// Share your contacts so we can connect you with others. We anonymize all information and do not share it with anyone else.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.share_contacts.hero.paragraph\")\n          /// Find people on Wire\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.hero.title\")\n        }\n        internal enum SkipButton {\n          /// Not now\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.skip_button.title\")\n        }\n      }\n      internal enum Signin {\n        /// Log in\n        internal static let title = L10n.tr(\"Localizable\", \"registration.signin.title\")\n        internal enum Alert {\n          internal enum PasswordNeeded {\n            /// Please enter your Password in order to log in.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.signin.alert.password_needed.message\")\n            /// Password needed\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.alert.password_needed.title\")\n          }\n        }\n        internal enum TooManyDevices {\n          /// Remove one of your other devices to start using Wire on this one.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.subtitle\")\n          /// Too Many Devices\n          internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.title\")\n          internal enum ManageButton {\n            /// Manage devices\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.manage_button.title\")\n          }\n          internal enum ManageScreen {\n            /// Remove a Device\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.manage_screen.title\")\n          }\n          internal enum SignOutButton {\n            /// Log out\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.sign_out_button.title\")\n          }\n        }\n      }\n      internal enum TermsOfUse {\n        /// Accept\n        internal static let accept = L10n.tr(\"Localizable\", \"registration.terms_of_use.accept\")\n        /// I agree\n        internal static let agree = L10n.tr(\"Localizable\", \"registration.terms_of_use.agree\")\n        /// By continuing you agree to the Wire Terms of Use.\n        internal static let terms = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms\")\n        /// Welcome to Wire.\n        internal static let title = L10n.tr(\"Localizable\", \"registration.terms_of_use.title\")\n        internal enum Terms {\n          /// Terms of Use\n          internal static let link = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.link\")\n          /// Please accept the Terms of Use to continue.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.message\")\n          /// Terms of Use\n          internal static let title = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.title\")\n          /// View\n          internal static let view = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.view\")\n        }\n      }\n      internal enum VerifyEmail {\n        /// We sent an email to %@.\\n Follow the link to verify your address.\n        internal static func instructions(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_email.instructions\", String(describing: p1))\n        }\n        internal enum Resend {\n          /// Re-send\n          internal static let buttonTitle = L10n.tr(\"Localizable\", \"registration.verify_email.resend.button_title\")\n          /// Didn\u2019t get the message?\n          internal static let instructions = L10n.tr(\"Localizable\", \"registration.verify_email.resend.instructions\")\n        }\n      }\n      internal enum VerifyPhoneNumber {\n        /// Enter the verification code we sent to %@\n        internal static func instructions(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_phone_number.instructions\", String(describing: p1))\n        }\n        /// Resend\n        internal static let resend = L10n.tr(\"Localizable\", \"registration.verify_phone_number.resend\")\n        /// No code showing up?\\nYou can request a new one in %.0f seconds\n        internal static func resendPlaceholder(_ p1: Float) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_phone_number.resend_placeholder\", p1)\n        }\n      }\n    }\n    internal enum `Self` {\n      /// About\n      internal static let about = L10n.tr(\"Localizable\", \"self.about\")\n      /// Account\n      internal static let account = L10n.tr(\"Localizable\", \"self.account\")\n      /// Add email address and password\n      internal static let addEmailPassword = L10n.tr(\"Localizable\", \"self.add_email_password\")\n      /// Add phone number\n      internal static let addPhoneNumber = L10n.tr(\"Localizable\", \"self.add_phone_number\")\n      /// Support\n      internal static let helpCenter = L10n.tr(\"Localizable\", \"self.help_center\")\n      /// Profile\n      internal static let profile = L10n.tr(\"Localizable\", \"self.profile\")\n      /// Report Misuse\n      internal static let reportAbuse = L10n.tr(\"Localizable\", \"self.report_abuse\")\n      /// Settings\n      internal static let settings = L10n.tr(\"Localizable\", \"self.settings\")\n      /// Log Out\n      internal static let signOut = L10n.tr(\"Localizable\", \"self.sign_out\")\n      internal enum Accessibility {\n        /// Change profile picture\n        internal static let profilePhotoEditButton = L10n.tr(\"Localizable\", \"self.accessibility.profile_photo_edit_button\")\n        /// Profile picture\n        internal static let profilePhotoImage = L10n.tr(\"Localizable\", \"self.accessibility.profile_photo_image\")\n      }\n      internal enum HelpCenter {\n        /// Contact Support\n        internal static let contactSupport = L10n.tr(\"Localizable\", \"self.help_center.contact_support\")\n        /// Wire Support Website\n        internal static let supportWebsite = L10n.tr(\"Localizable\", \"self.help_center.support_website\")\n      }\n      internal enum NewDevice {\n        internal enum Voiceover {\n          /// Profile, new devices added\n          internal static let label = L10n.tr(\"Localizable\", \"self.new-device.voiceover.label\")\n        }\n      }\n      internal enum NewDeviceAlert {\n        /// Manage devices\n        internal static let manageDevices = L10n.tr(\"Localizable\", \"self.new_device_alert.manage_devices\")\n        /// \\n%@\\n\\nIf you don\u2019t recognize the device above, remove it and reset your password.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"self.new_device_alert.message\", String(describing: p1))\n        }\n        /// \\n%@\\n\\nIf you don\u2019t recognize the devices above, remove them and reset your password.\n        internal static func messagePlural(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"self.new_device_alert.message_plural\", String(describing: p1))\n        }\n        /// Your account was used on:\n        internal static let title = L10n.tr(\"Localizable\", \"self.new_device_alert.title\")\n        /// OK\n        internal static let trustDevices = L10n.tr(\"Localizable\", \"self.new_device_alert.trust_devices\")\n        internal enum TitlePrefix {\n          /// Plural format key: \"%#@device_count@\"\n          internal static func devices(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"self.new_device_alert.title_prefix.devices\", p1)\n          }\n        }\n      }\n      internal enum ReadReceiptsDescription {\n        /// You can change this option in your account settings.\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_description.title\")\n      }\n      internal enum ReadReceiptsDisabled {\n        /// You have disabled read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_disabled.title\")\n      }\n      internal enum ReadReceiptsEnabled {\n        /// You have enabled read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_enabled.title\")\n      }\n      internal enum Settings {\n        /// Account\n        internal static let accountSection = L10n.tr(\"Localizable\", \"self.settings.account_section\")\n        internal enum Account {\n          internal enum DataUsagePermissions {\n            /// Data Usage Permissions\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account.data_usage_permissions.title\")\n          }\n        }\n        internal enum AccountAppearanceGroup {\n          /// Appearance\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_appearance_group.title\")\n        }\n        internal enum AccountDetails {\n          internal enum Actions {\n            /// Actions\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.actions.title\")\n          }\n          internal enum DeleteAccount {\n            /// Delete Account\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.title\")\n            internal enum Alert {\n              /// We will send you a message via email or SMS. Follow the link to permanently delete your account.\n              internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.alert.message\")\n              /// Delete Account\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.alert.title\")\n            }\n          }\n          internal enum KeyFingerprint {\n            /// Key Fingerprint\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.key_fingerprint.title\")\n          }\n          internal enum LogOut {\n            internal enum Alert {\n              /// Your message history will be erased on this device.\n              internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.message\")\n              /// Password\n              internal static let password = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.password\")\n              /// Log out\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.title\")\n            }\n          }\n          internal enum RemoveDevice {\n            /// Your password is required to remove the device\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.message\")\n            /// Password\n            internal static let password = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.password\")\n            /// Remove Device\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.title\")\n            internal enum Password {\n              /// Wrong password\n              internal static let error = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.password.error\")\n            }\n          }\n        }\n        internal enum AccountDetailsGroup {\n          internal enum Info {\n            /// People can find you with these details.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_details_group.info.footer\")\n            /// Info\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details_group.info.title\")\n          }\n          internal enum Personal {\n            /// This information is not visible .\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_details_group.personal.footer\")\n            /// Personal\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details_group.personal.title\")\n          }\n        }\n        internal enum AccountPersonalInformationGroup {\n          /// Personal Information\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_personal_information_group.title\")\n        }\n        internal enum AccountPictureGroup {\n          /// Color\n          internal static let color = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.color\")\n          /// Picture\n          internal static let picture = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.picture\")\n          /// Theme\n          internal static let theme = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.theme\")\n        }\n        internal enum AccountSection {\n          internal enum AddHandle {\n            /// Add username\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.add_handle.title\")\n          }\n          internal enum Email {\n            /// Email\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.title\")\n            internal enum Change {\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.save\")\n              /// Email\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.title\")\n              internal enum Resend {\n                /// Confirmation email was resent to %@. Check your email inbox and follow the instructions.\n                internal static func message(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.resend.message\", String(describing: p1))\n                }\n                /// Email resent\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.resend.title\")\n              }\n              internal enum Verify {\n                /// Check your email inbox and follow the instructions.\n                internal static let description = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.description\")\n                /// Resend to %@\n                internal static func resend(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.resend\", String(describing: p1))\n                }\n                /// Verify email\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.title\")\n              }\n            }\n          }\n          internal enum Handle {\n            /// Username\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.title\")\n            internal enum Change {\n              /// At least 2 characters. a\u2014z, 0\u20149, and  '.', '-', '_'  only.\n              internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.footer\")\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.save\")\n              /// Username\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.title\")\n              internal enum FailureAlert {\n                /// There was an error setting your username. Please try again.\n                internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.failure_alert.message\")\n                /// Unable to set username\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.failure_alert.title\")\n              }\n              internal enum Footer {\n                /// Already taken\n                internal static let unavailable = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.footer.unavailable\")\n              }\n            }\n          }\n          internal enum Name {\n            /// Name\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.name.title\")\n          }\n          internal enum Phone {\n            /// Phone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone.title\")\n          }\n          internal enum PhoneNumber {\n            internal enum Change {\n              /// Remove Phone Number\n              internal static let remove = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.remove\")\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.save\")\n              /// Phone\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.title\")\n              internal enum Remove {\n                /// Remove Phone Number\n                internal static let action = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.remove.action\")\n              }\n              internal enum Resend {\n                /// Verification code was resent to %@.\n                internal static func message(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.resend.message\", String(describing: p1))\n                }\n                /// Code resent\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.resend.title\")\n              }\n              internal enum Verify {\n                /// Enter code\n                internal static let codePlaceholder = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.code_placeholder\")\n                /// Enter the verification code we sent to: %@.\n                internal static func description(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.description\", String(describing: p1))\n                }\n                /// Resend Code\n                internal static let resend = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.resend\")\n                /// No code showing up?\\nYou can request a new one every 30 seconds.\n                internal static let resendDescription = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.resend_description\")\n                /// Save\n                internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.save\")\n                /// Verify\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.title\")\n              }\n            }\n          }\n        }\n        internal enum AddAccount {\n          /// Add an account\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_account.title\")\n          internal enum Error {\n            /// You can only be logged in with three accounts at once. Log out from one to add another.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.add_account.error.message\")\n            /// Three accounts active\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_account.error.title\")\n          }\n        }\n        internal enum AddTeamOrAccount {\n          /// Add Account\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_team_or_account.title\")\n        }\n        internal enum Advanced {\n          /// Advanced\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.title\")\n          internal enum DebuggingTools {\n            /// Debugging Tools\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.title\")\n            internal enum EnterDebugCommand {\n              /// Enter debug command\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.enter_debug_command.title\")\n            }\n            internal enum FirstUnreadConversation {\n              /// Find first unread conversation\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.first_unread_conversation.title\")\n            }\n            internal enum ShowUserId {\n              /// Show my user ID\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.show_user_id.title\")\n            }\n          }\n          internal enum ResetPushToken {\n            /// If you experience problems with push notifications, Wire Support may ask you to reset this token.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token.subtitle\")\n            /// Reset Push Notifications Token\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token.title\")\n          }\n          internal enum ResetPushTokenAlert {\n            /// Notifications will be restored in a few seconds.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token_alert.message\")\n            /// Push token has been reset\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token_alert.title\")\n          }\n          internal enum Troubleshooting {\n            /// Troubleshooting\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.title\")\n            internal enum SubmitDebug {\n              /// This information helps Wire Support diagnose calling problems and improve the overall app experience.\n              internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.submit_debug.subtitle\")\n              /// Debug Report\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.submit_debug.title\")\n            }\n          }\n          internal enum VersionTechnicalDetails {\n            /// Version Technical Details\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.version_technical_details.title\")\n          }\n        }\n        internal enum ApnsLogging {\n          /// APNS Logging\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.apns_logging.title\")\n        }\n        internal enum Callkit {\n          /// Share with iOS\n          internal static let caption = L10n.tr(\"Localizable\", \"self.settings.callkit.caption\")\n          /// Show Wire calls on the lock screen and in iOS call history. If iCloud is enabled, call history is shared with Apple.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.callkit.description\")\n          /// Calls\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.callkit.title\")\n        }\n        internal enum Conversations {\n          /// History\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.conversations.title\")\n        }\n        internal enum CreateTeam {\n          /// Create a team\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.create_team.title\")\n        }\n        internal enum DeveloperOptions {\n          /// Developer Options\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.developer_options.title\")\n        }\n        internal enum DeviceDetails {\n          internal enum Fingerprint {\n            /// Wire gives every device a unique fingerprint. Compare them and verify your devices and conversations.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.fingerprint.subtitle\")\n          }\n          internal enum RemoveDevice {\n            /// Remove this device if you have stopped using it. You will be logged out of this device immediately.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.remove_device.subtitle\")\n          }\n          internal enum ResetSession {\n            /// If fingerprints don\u2019t match, reset the session to generate new encryption keys on both sides.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.reset_session.subtitle\")\n            /// The session has been reset\n            internal static let success = L10n.tr(\"Localizable\", \"self.settings.device_details.reset_session.success\")\n          }\n        }\n        internal enum EnableReadReceipts {\n          /// Send Read Receipts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.enable_read_receipts.title\")\n        }\n        internal enum EncryptMessagesAtRest {\n          /// Encrypt messages at rest\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.encrypt_messages_at_rest.title\")\n        }\n        internal enum ExternalApps {\n          /// Open With\n          internal static let header = L10n.tr(\"Localizable\", \"self.settings.external_apps.header\")\n        }\n        internal enum HistoryBackup {\n          /// Back Up Now\n          internal static let action = L10n.tr(\"Localizable\", \"self.settings.history_backup.action\")\n          /// Create a backup to preserve your conversation history. You can use this to restore history if you lose your device or switch to a new one.\\n\\nChoose a strong password to protect the backup file.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.history_backup.description\")\n          /// Back Up Conversations\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.title\")\n          internal enum Error {\n            /// Error\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.error.title\")\n          }\n          internal enum Password {\n            /// Cancel\n            internal static let cancel = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.cancel\")\n            /// The backup will be compressed and encrypted with the password you set here.\n            internal static let description = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.description\")\n            /// Next\n            internal static let next = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.next\")\n            /// Password\n            internal static let placeholder = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.placeholder\")\n            /// Set Password\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.title\")\n          }\n          internal enum SetEmail {\n            /// You need an email and a password in order to back up your conversation history. You can do it from the account page in Settings.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.history_backup.set_email.message\")\n            /// Set an email and password.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.set_email.title\")\n          }\n        }\n        internal enum InviteFriends {\n          /// Invite people\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.invite_friends.title\")\n        }\n        internal enum LinkOptions {\n          internal enum Browser {\n            /// Browser\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.browser.title\")\n          }\n          internal enum Maps {\n            /// Locations\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.maps.title\")\n          }\n          internal enum Twitter {\n            /// Tweets\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.twitter.title\")\n          }\n        }\n        internal enum ManageTeam {\n          /// Manage Team\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.manage_team.title\")\n        }\n        internal enum Notifications {\n          internal enum ChatAlerts {\n            /// New messages in other conversations.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.notifications.chat_alerts.footer\")\n            /// Message Banners\n            internal static let toggle = L10n.tr(\"Localizable\", \"self.settings.notifications.chat_alerts.toggle\")\n          }\n          internal enum PushNotification {\n            /// Sender name and message on the lock screen and in Notification Center.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.footer\")\n            /// Notifications\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.title\")\n            /// Message Previews\n            internal static let toogle = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.toogle\")\n          }\n        }\n        internal enum OptionsMenu {\n          /// Options\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.options_menu.title\")\n        }\n        internal enum PasswordResetMenu {\n          /// Reset Password\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.password_reset_menu.title\")\n        }\n        internal enum PopularDemand {\n          /// By popular demand\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.popular_demand.title\")\n          internal enum DarkMode {\n            /// Switch between dark and light theme.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.popular_demand.dark_mode.footer\")\n          }\n          internal enum SendButton {\n            /// Disable to send via the return key.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.popular_demand.send_button.footer\")\n            /// Send Button\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.popular_demand.send_button.title\")\n          }\n        }\n        internal enum Privacy {\n          internal enum ClearHistory {\n            /// This will permanently erase the content of all your conversations.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.privacy.clear_history.subtitle\")\n            /// Clear History\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy.clear_history.title\")\n          }\n        }\n        internal enum PrivacyAnalytics {\n          /// Send anonymous usage data\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics.title\")\n        }\n        internal enum PrivacyAnalyticsMenu {\n          internal enum Description {\n            /// Usage data allows Wire to understand how the app is being used and how it can be improved. The data is anonymous and does not include the content of your communications (such as messages, files or calls).\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_menu.description.title\")\n          }\n          internal enum Devices {\n            /// Devices\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_menu.devices.title\")\n          }\n        }\n        internal enum PrivacyAnalyticsSection {\n          /// Usage and Crash Reports\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_section.title\")\n        }\n        internal enum PrivacyContactsMenu {\n          internal enum DescriptionDisabled {\n            /// This helps you connect with others. We anonymize all the information and do not share it with anyone else. Allow access via Settings > Privacy > Contacts.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_menu.description_disabled.title\")\n          }\n          internal enum SettingsButton {\n            /// Open Contacts Settings\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_menu.settings_button.title\")\n          }\n        }\n        internal enum PrivacyContactsSection {\n          /// Contacts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_section.title\")\n        }\n        internal enum PrivacyCrash {\n          /// Send anonymous crash data\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_crash.title\")\n        }\n        internal enum PrivacyCrashMenu {\n          internal enum Description {\n            /// Send anonymous crash reports and basic data like version number and operating system to help Wire identify and solve issues in the app.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_crash_menu.description.title\")\n          }\n        }\n        internal enum PrivacySectionGroup {\n          /// When this is off, you won\u2019t be able to see read receipts from other people.\\n\\nThis setting does not apply to group conversations.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.privacy_section_group.subtitle\")\n          /// Privacy\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_section_group.title\")\n        }\n        internal enum PrivacySecurity {\n          /// Lock With Passcode\n          internal static let lockApp = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app\")\n          internal enum DisableLinkPreviews {\n            /// Previews may still be shown for links from other people.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.privacy_security.disable_link_previews.footer\")\n            /// Create Link Previews\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_security.disable_link_previews.title\")\n          }\n          internal enum LockApp {\n            /// Unlock Wire\n            internal static let description = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.description\")\n            internal enum Subtitle {\n              /// If forgotten, your passcode can not be recovered.\n              internal static let customAppLockReminder = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.custom_app_lock_reminder\")\n              /// Unlock with Face ID or enter your passcode.\n              internal static let faceId = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.face_id\")\n              /// Lock Wire after %@ in the background.\n              internal static func lockDescription(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.lock_description\", String(describing: p1))\n              }\n              /// Unlock by entering your passcode.\n              internal static let `none` = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.none\")\n              /// Unlock with Touch ID or enter your passcode.\n              internal static let touchId = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.touch_id\")\n            }\n          }\n          internal enum LockPassword {\n            internal enum Description {\n              /// Unlock with your password.\n              internal static let unlock = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.unlock\")\n              /// Wrong password. If you recently changed your password, connect to the internet and try again.\n              internal static let wrongOfflinePassword = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.wrong_offline_password\")\n              /// Wrong password. Please try again.\n              internal static let wrongPassword = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.wrong_password\")\n            }\n          }\n        }\n        internal enum ReceiveNewsAndOffers {\n          /// Receive Newsletter\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.receiveNews_and_offers.title\")\n          internal enum Description {\n            /// Receive news and product updates from Wire via email.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.receiveNews_and_offers.description.title\")\n          }\n        }\n        internal enum SoundMenu {\n          /// Sound Alerts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.title\")\n          internal enum AllSounds {\n            /// All\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.all_sounds.title\")\n          }\n          internal enum Message {\n            /// Text Tone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.message.title\")\n          }\n          internal enum MuteWhileTalking {\n            /// First message and pings\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.mute_while_talking.title\")\n          }\n          internal enum NoSounds {\n            /// None\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.no_sounds.title\")\n          }\n          internal enum Ping {\n            /// Ping\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ping.title\")\n          }\n          internal enum Ringtone {\n            /// Ringtone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ringtone.title\")\n          }\n          internal enum Ringtones {\n            /// Ringtones\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ringtones.title\")\n          }\n          internal enum Sounds {\n            /// None\n            internal static let `none` = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.none\")\n            /// Sounds\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.title\")\n            /// Wire Call\n            internal static let wireCall = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_call\")\n            /// Wire Message\n            internal static let wireMessage = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_message\")\n            /// Wire Ping\n            internal static let wirePing = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_ping\")\n            /// Wire\n            internal static let wireSound = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_sound\")\n          }\n        }\n        internal enum SwitchAccount {\n          /// Switch anyway\n          internal static let action = L10n.tr(\"Localizable\", \"self.settings.switch_account.action\")\n          /// A call is active in this account.\\nSwitching accounts will hang up the current call.\n          internal static let message = L10n.tr(\"Localizable\", \"self.settings.switch_account.message\")\n        }\n        internal enum TechnicalReport {\n          /// Include detailed log\n          internal static let includeLog = L10n.tr(\"Localizable\", \"self.settings.technical_report.include_log\")\n          /// No mail client detected. Tap \"OK\" and send logs manually to: \n          internal static let noMailAlert = L10n.tr(\"Localizable\", \"self.settings.technical_report.no_mail_alert\")\n          /// Detailed logs could contain personal data\n          internal static let privacyWarning = L10n.tr(\"Localizable\", \"self.settings.technical_report.privacy_warning\")\n          /// Send report to Wire\n          internal static let sendReport = L10n.tr(\"Localizable\", \"self.settings.technical_report.send_report\")\n          internal enum Mail {\n            /// Wire Debug Report\n            internal static let subject = L10n.tr(\"Localizable\", \"self.settings.technical_report.mail.subject\")\n          }\n        }\n        internal enum TechnicalReportSection {\n          /// Technical Report\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.technical_report_section.title\")\n        }\n        internal enum Vbr {\n          /// This makes audio calls use less data and work better on slower networks. Turn off to use Constant Bitrate Encoding.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.vbr.description\")\n          /// Variable Bit Rate Encoding\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.vbr.title\")\n        }\n      }\n      internal enum Voiceover {\n        /// Open profile and settings\n        internal static let hint = L10n.tr(\"Localizable\", \"self.voiceover.hint\")\n        /// Profile\n        internal static let label = L10n.tr(\"Localizable\", \"self.voiceover.label\")\n      }\n    }\n    internal enum SendInvitation {\n      /// Connect with me on Wire\n      internal static let subject = L10n.tr(\"Localizable\", \"send_invitation.subject\")\n      /// I\u2019m on Wire, search for %@ or visit get.wire.com\n      internal static func text(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"send_invitation.text\", String(describing: p1))\n      }\n    }\n    internal enum SendInvitationNoEmail {\n      /// I\u2019m on Wire. Visit get.wire.com to connect with me.\n      internal static let text = L10n.tr(\"Localizable\", \"send_invitation_no_email.text\")\n    }\n    internal enum ShareExtension {\n      internal enum Voiceover {\n        /// All clients verified.\n        internal static let conversationSecure = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_secure\")\n        /// Not all clients verified.\n        internal static let conversationSecureWithIgnored = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_secure_with_ignored\")\n        /// Under legal hold.\n        internal static let conversationUnderLegalHold = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_under_legal_hold\")\n      }\n    }\n    internal enum Shortcut {\n      internal enum MarkAllAsRead {\n        /// Mark All as Read\n        internal static let title = L10n.tr(\"Localizable\", \"shortcut.mark_all_as_read.title\")\n      }\n    }\n    internal enum Signin {\n      /// Log In\n      internal static let confirm = L10n.tr(\"Localizable\", \"signin.confirm\")\n      /// Forgot password?\n      internal static let forgotPassword = L10n.tr(\"Localizable\", \"signin.forgot_password\")\n      internal enum CompanyIdp {\n        internal enum Button {\n          /// For Companies\n          internal static let title = L10n.tr(\"Localizable\", \"signin.company_idp.button.title\")\n        }\n      }\n      internal enum Email {\n        internal enum MissingPassword {\n          /// Enter your email address and password to continue.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"signin.email.missing_password.subtitle\")\n        }\n      }\n      internal enum Phone {\n        internal enum MissingPassword {\n          /// Enter your phone number to continue.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"signin.phone.missing_password.subtitle\")\n        }\n      }\n      internal enum UseEmail {\n        /// Login with Email\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_email.label\")\n      }\n      internal enum UseOnePassword {\n        /// Double tap to fill your password with 1Password\n        internal static let hint = L10n.tr(\"Localizable\", \"signin.use_one_password.hint\")\n        /// Log in with 1Password\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_one_password.label\")\n      }\n      internal enum UsePhone {\n        /// Login with Phone\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_phone.label\")\n      }\n    }\n    internal enum SigninLogout {\n      /// Your session expired. You need to log in again to continue.\n      internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.subheadline\")\n      internal enum Email {\n        /// Your session expired. Enter your email address and password to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.email.subheadline\")\n      }\n      internal enum Phone {\n        /// Your session expired. Enter your phone number to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.phone.subheadline\")\n      }\n      internal enum Sso {\n        /// Enterprise log in\n        internal static let buton = L10n.tr(\"Localizable\", \"signin_logout.sso.buton\")\n        /// Your session expired. Log in with your enterprise account to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.sso.subheadline\")\n      }\n    }\n    internal enum Sketchpad {\n      /// Tap colors to change brush size\n      internal static let initialHint = L10n.tr(\"Localizable\", \"sketchpad.initial_hint\")\n    }\n    internal enum SystemStatusBar {\n      internal enum NoInternet {\n        /// There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\n        internal static let explanation = L10n.tr(\"Localizable\", \"system_status_bar.no_internet.explanation\")\n        /// No Internet\n        internal static let title = L10n.tr(\"Localizable\", \"system_status_bar.no_internet.title\")\n      }\n      internal enum PoorConnectivity {\n        /// We can\u2019t guarantee voice quality. Connect to Wi-Fi or try changing your location.\n        internal static let explanation = L10n.tr(\"Localizable\", \"system_status_bar.poor_connectivity.explanation\")\n        /// Slow Internet, can\u2019t call now\n        internal static let title = L10n.tr(\"Localizable\", \"system_status_bar.poor_connectivity.title\")\n      }\n    }\n    internal enum Team {\n      internal enum ActivationCode {\n        /// You\u2019ve got mail\n        internal static let headline = L10n.tr(\"Localizable\", \"team.activation_code.headline\")\n        /// Enter the verification code we sent to %@.\n        internal static func subheadline(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"team.activation_code.subheadline\", String(describing: p1))\n        }\n        internal enum Button {\n          /// Change email\n          internal static let changeEmail = L10n.tr(\"Localizable\", \"team.activation_code.button.change_email\")\n          /// Change phone number\n          internal static let changePhone = L10n.tr(\"Localizable\", \"team.activation_code.button.change_phone\")\n          /// Resend code\n          internal static let resend = L10n.tr(\"Localizable\", \"team.activation_code.button.resend\")\n        }\n      }\n      internal enum Email {\n        /// Your account\n        internal static let headline = L10n.tr(\"Localizable\", \"team.email.headline\")\n        /// Enter your work email address.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"team.email.subheadline\")\n        internal enum Button {\n          /// Learn More\n          internal static let learnMore = L10n.tr(\"Localizable\", \"team.email.button.learn_more\")\n        }\n        internal enum Textfield {\n          /// Your company email\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.email.textfield.placeholder\")\n        }\n      }\n      internal enum FullName {\n        /// Your name\n        internal static let headline = L10n.tr(\"Localizable\", \"team.full_name.headline\")\n        internal enum Textfield {\n          /// Set full name\n          internal static let accessibility = L10n.tr(\"Localizable\", \"team.full_name.textfield.accessibility\")\n          /// Full name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.full_name.textfield.placeholder\")\n        }\n      }\n      internal enum Invite {\n        internal enum Error {\n          /// This email has already been invited\n          internal static let alreadyInvited = L10n.tr(\"Localizable\", \"team.invite.error.already_invited\")\n          /// This email address is already in use\n          internal static let alreadyRegistered = L10n.tr(\"Localizable\", \"team.invite.error.already_registered\")\n          /// Something went wrong, please try again\n          internal static let generic = L10n.tr(\"Localizable\", \"team.invite.error.generic\")\n          /// No Internet Connection\n          internal static let noInternet = L10n.tr(\"Localizable\", \"team.invite.error.no_internet\")\n          /// The maximum number of invitations has been sent\n          internal static let tooManyInvitations = L10n.tr(\"Localizable\", \"team.invite.error.too_many_invitations\")\n        }\n        internal enum Header {\n          /// Your Wire team is ready to go. Invite your colleagues as members.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"team.invite.header.subtitle\")\n          /// Build your team\n          internal static let title = L10n.tr(\"Localizable\", \"team.invite.header.title\")\n        }\n        internal enum LearnMore {\n          /// Learn more\n          internal static let title = L10n.tr(\"Localizable\", \"team.invite.learn_more.title\")\n        }\n        internal enum Textfield {\n          /// Enter email address for colleague to invite.\n          internal static let accesibility = L10n.tr(\"Localizable\", \"team.invite.textfield.accesibility\")\n          /// Colleague's email\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.invite.textfield.placeholder\")\n        }\n        internal enum TopBar {\n          /// Done\n          internal static let done = L10n.tr(\"Localizable\", \"team.invite.top_bar.done\")\n          /// Skip\n          internal static let skip = L10n.tr(\"Localizable\", \"team.invite.top_bar.skip\")\n        }\n      }\n      internal enum Name {\n        /// Name your team\n        internal static let headline = L10n.tr(\"Localizable\", \"team.name.headline\")\n        /// You can always change it later.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"team.name.subheadline\")\n        /// What is Wire Pro?\n        internal static let whatiswireforteams = L10n.tr(\"Localizable\", \"team.name.whatiswireforteams\")\n        internal enum Textfield {\n          /// Set team name\n          internal static let accessibility = L10n.tr(\"Localizable\", \"team.name.textfield.accessibility\")\n          /// team name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.name.textfield.placeholder\")\n        }\n      }\n      internal enum Password {\n        /// Set password\n        internal static let headline = L10n.tr(\"Localizable\", \"team.password.headline\")\n      }\n      internal enum PhoneActivationCode {\n        /// Verification\n        internal static let headline = L10n.tr(\"Localizable\", \"team.phone_activation_code.headline\")\n      }\n    }\n    internal enum ToolTip {\n      internal enum Contacts {\n        /// Start a conversation. Call, message and share in private or with groups.\n        internal static let message = L10n.tr(\"Localizable\", \"tool_tip.contacts.message\")\n        /// Conversations start here\n        internal static let title = L10n.tr(\"Localizable\", \"tool_tip.contacts.title\")\n      }\n    }\n    internal enum TwitterStatus {\n      /// %@ on Twitter\n      internal static func onTwitter(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"twitter_status.on_twitter\", String(describing: p1))\n      }\n    }\n    internal enum Unlock {\n      /// Wrong passcode\n      internal static let errorLabel = L10n.tr(\"Localizable\", \"unlock.error_label\")\n      /// Enter passcode to unlock Wire\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"unlock.title_label\")\n      /// Access as new device\n      internal static let wipeButton = L10n.tr(\"Localizable\", \"unlock.wipe_button\")\n      internal enum SubmitButton {\n        /// unlock\n        internal static let title = L10n.tr(\"Localizable\", \"unlock.submit_button.title\")\n      }\n      internal enum Textfield {\n        /// Enter your passcode\n        internal static let placeholder = L10n.tr(\"Localizable\", \"unlock.textfield.placeholder\")\n      }\n    }\n    internal enum UrlAction {\n      /// Confirm\n      internal static let confirm = L10n.tr(\"Localizable\", \"url_action.confirm\")\n      /// Confirm URL action\n      internal static let title = L10n.tr(\"Localizable\", \"url_action.title\")\n      internal enum AuthorizationRequired {\n        /// You need to log in to view this content.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.authorization_required.message\")\n        /// Authorization required.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.authorization_required.title\")\n      }\n      internal enum ConnectToBot {\n        /// Would you like to connect to the bot?\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.connect_to_bot.message\")\n      }\n      internal enum InvalidConversation {\n        /// You may not have permission with this account or the person may not be on Wire.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_conversation.message\")\n        /// Wire can't open this conversation.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_conversation.title\")\n      }\n      internal enum InvalidLink {\n        /// The link you opened is not valid.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_link.message\")\n        /// Invalid link.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_link.title\")\n      }\n      internal enum InvalidUser {\n        /// You may not have permission with this account or it no longer exists.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_user.message\")\n        /// Wire can't find this person.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_user.title\")\n      }\n      internal enum SwitchBackend {\n        /// This configuration will connect the app to a third-party server:\\n%@\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"url_action.switch_backend.message\", String(describing: p1))\n        }\n        /// Connect to server\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.title\")\n        internal enum Error {\n          /// Please check your internet connection, verify the link and try again.\n          internal static let invalidBackend = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.invalid_backend\")\n          /// You are already logged in. To switch to this server, log out of all accounts and try again.\n          internal static let loggedIn = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.logged_in\")\n          internal enum InvalidBackend {\n            /// The server is not responding\n            internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.invalid_backend.title\")\n          }\n          internal enum LoggedIn {\n            /// Can\u2019t switch servers\n            internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.logged_in.title\")\n          }\n        }\n      }\n    }\n    internal enum UserCell {\n      internal enum Title {\n        ///  (You)\n        internal static let youSuffix = L10n.tr(\"Localizable\", \"user_cell.title.you_suffix\")\n      }\n    }\n    internal enum Verification {\n      /// Double tap to enter the code.\n      internal static let codeHint = L10n.tr(\"Localizable\", \"verification.code_hint\")\n      /// Six-digit code. Text field.\n      internal static let codeLabel = L10n.tr(\"Localizable\", \"verification.code_label\")\n    }\n    internal enum VideoCall {\n      internal enum CameraAccess {\n        /// Wire doesn\u2019t have access to the camera\n        internal static let denied = L10n.tr(\"Localizable\", \"video_call.camera_access.denied\")\n      }\n    }\n    internal enum Voice {\n      internal enum AcceptButton {\n        /// Accept\n        internal static let title = L10n.tr(\"Localizable\", \"voice.accept_button.title\")\n      }\n      internal enum Alert {\n        internal enum CallInProgress {\n          /// OK\n          internal static let confirm = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.confirm\")\n          /// You can have only one active call at a time\n          internal static let message = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.message\")\n          /// Call in progress\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.title\")\n        }\n        internal enum CameraWarning {\n          /// Wire needs access to the camera\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.camera_warning.title\")\n        }\n        internal enum MicrophoneWarning {\n          /// Wire needs access to the microphone\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.microphone_warning.title\")\n        }\n      }\n      internal enum CallButton {\n        /// Call\n        internal static let title = L10n.tr(\"Localizable\", \"voice.call_button.title\")\n      }\n      internal enum CallError {\n        internal enum UnsupportedVersion {\n          /// Later\n          internal static let dismiss = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.dismiss\")\n          /// You received a call that isn't supported by this version of Wire.\\nGet the latest version in the App Store.\n          internal static let message = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.message\")\n          /// Please update Wire\n          internal static let title = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.title\")\n        }\n      }\n      internal enum CancelButton {\n        /// Cancel\n        internal static let title = L10n.tr(\"Localizable\", \"voice.cancel_button.title\")\n      }\n      internal enum DeclineButton {\n        /// Decline\n        internal static let title = L10n.tr(\"Localizable\", \"voice.decline_button.title\")\n      }\n      internal enum Degradation {\n        /// You started using a new device.\n        internal static let newSelfDevice = L10n.tr(\"Localizable\", \"voice.degradation.new_self_device\")\n        /// %@ started using a new device.\n        internal static func newUserDevice(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.degradation.new_user_device\", String(describing: p1))\n        }\n      }\n      internal enum DegradationIncoming {\n        /// Do you still want to accept the call?\n        internal static let prompt = L10n.tr(\"Localizable\", \"voice.degradation_incoming.prompt\")\n      }\n      internal enum DegradationOutgoing {\n        /// Do you still want to place the call?\n        internal static let prompt = L10n.tr(\"Localizable\", \"voice.degradation_outgoing.prompt\")\n      }\n      internal enum EndCallButton {\n        /// End Call\n        internal static let title = L10n.tr(\"Localizable\", \"voice.end_call_button.title\")\n      }\n      internal enum FlipVideoButton {\n        /// Flip\n        internal static let title = L10n.tr(\"Localizable\", \"voice.flip_video_button.title\")\n      }\n      internal enum HangUpButton {\n        /// Hang Up\n        internal static let title = L10n.tr(\"Localizable\", \"voice.hang_up_button.title\")\n      }\n      internal enum MuteButton {\n        /// Mute\n        internal static let title = L10n.tr(\"Localizable\", \"voice.mute_button.title\")\n      }\n      internal enum NetworkError {\n        /// You must be online to call. Check your connection and try again.\n        internal static let body = L10n.tr(\"Localizable\", \"voice.network_error.body\")\n        /// No Internet Connection\n        internal static let title = L10n.tr(\"Localizable\", \"voice.network_error.title\")\n      }\n      internal enum SpeakerButton {\n        /// Speaker\n        internal static let title = L10n.tr(\"Localizable\", \"voice.speaker_button.title\")\n      }\n      internal enum Status {\n        /// Constant Bit Rate\n        internal static let cbr = L10n.tr(\"Localizable\", \"voice.status.cbr\")\n        /// %@\\nConnecting\n        internal static func joining(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.status.joining\", String(describing: p1))\n        }\n        /// %@\\nCall ended\n        internal static func leaving(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.status.leaving\", String(describing: p1))\n        }\n        /// Bad connection\n        internal static let lowConnection = L10n.tr(\"Localizable\", \"voice.status.low_connection\")\n        /// Video turned off\n        internal static let videoNotAvailable = L10n.tr(\"Localizable\", \"voice.status.video_not_available\")\n        internal enum GroupCall {\n          /// %@\\nringing\n          internal static func incoming(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.group_call.incoming\", String(describing: p1))\n          }\n        }\n        internal enum OneToOne {\n          /// %@\\ncalling\n          internal static func incoming(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.one_to_one.incoming\", String(describing: p1))\n          }\n          /// %@\\nringing\n          internal static func outgoing(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.one_to_one.outgoing\", String(describing: p1))\n          }\n        }\n      }\n      internal enum TopOverlay {\n        /// Ongoing call\n        internal static let accessibilityTitle = L10n.tr(\"Localizable\", \"voice.top_overlay.accessibility_title\")\n        /// Tap to return to call\n        internal static let tapToReturn = L10n.tr(\"Localizable\", \"voice.top_overlay.tap_to_return\")\n      }\n      internal enum VideoButton {\n        /// Video\n        internal static let title = L10n.tr(\"Localizable\", \"voice.video_button.title\")\n      }\n    }\n    internal enum WarningScreen {\n      /// There was a change in Wire\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"warning_screen.title_label\")\n      internal enum InfoLabel {\n        /// Next time, unlock Wire the same way you unlock your phone.\n        internal static let forcedApplock = L10n.tr(\"Localizable\", \"warning_screen.info_label.forced_applock\")\n        /// Your organization does not need app lock anymore. From now, you can access Wire without any obstacles.\n        internal static let nonForcedApplock = L10n.tr(\"Localizable\", \"warning_screen.info_label.non_forced_applock\")\n      }\n      internal enum MainInfo {\n        /// Your organization needs to lock your app when Wire is not in use to keep the team safe.\n        internal static let forcedApplock = L10n.tr(\"Localizable\", \"warning_screen.main_info.forced_applock\")\n      }\n    }\n    internal enum WipeDatabase {\n      /// The data stored on this device can only be accessed with your passcode.\\n\\nIf you have forgotten your passcode, you can delete the database to log in again as a new device.\\n\\nBy deleting the database, \n      internal static let infoLabel = L10n.tr(\"Localizable\", \"wipe_database.info_label\")\n      /// Access as new device\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"wipe_database.title_label\")\n      internal enum Alert {\n        /// Delete\n        internal static let confirm = L10n.tr(\"Localizable\", \"wipe_database.alert.confirm\")\n        /// Delete\n        internal static let confirmInput = L10n.tr(\"Localizable\", \"wipe_database.alert.confirm_input\")\n        /// Confirm database deletion\n        internal static let description = L10n.tr(\"Localizable\", \"wipe_database.alert.description\")\n        /// Type 'Delete' to verify you want to delete all data in this device.\n        internal static let message = L10n.tr(\"Localizable\", \"wipe_database.alert.message\")\n        /// Type 'Delete'\n        internal static let placeholder = L10n.tr(\"Localizable\", \"wipe_database.alert.placeholder\")\n      }\n      internal enum Button {\n        /// I want to delete the database\n        internal static let title = L10n.tr(\"Localizable\", \"wipe_database.button.title\")\n      }\n      internal enum InfoLabel {\n        /// all local data and messages for this account will be permanently deleted.\n        internal static let highlighted = L10n.tr(\"Localizable\", \"wipe_database.info_label.highlighted\")\n      }\n    }\n    internal enum WipeDatabaseCompletion {\n      /// Your data and messages have been deleted. You can now log in again as a new device.\n      internal static let subtitle = L10n.tr(\"Localizable\", \"wipe_database_completion.subtitle\")\n      /// Database deleted\n      internal static let title = L10n.tr(\"Localizable\", \"wipe_database_completion.title\")\n    }\n  }\n}\n// swiftlint:enable explicit_type_interface function_parameter_count identifier_name line_length\n// swiftlint:enable nesting type_body_length type_name vertical_whitespace_opening_braces\n\n// MARK: - Implementation Details\n\nextension L10n {\n  private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {\n    let format = BundleToken.bundle.localizedString(forKey: key, value: nil, table: table)\n    return String(format: format, locale: Locale.current, arguments: args)\n  }\n}\n\n// swiftlint:disable convenience_type\nprivate final class BundleToken {\n  static let bundle: Bundle = {\n    #if SWIFT_PACKAGE\n    return Bundle.module\n    #else\n    return Bundle(for: BundleToken.self)\n    #endif\n  }()\n}\n// swiftlint:enable convenience_type\n", "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\n\n// General strings\n\"general.ok\" = \"OK\";\n\"general.next\" = \"Next\";\n\"general.cancel\" = \"Cancel\";\n\"general.close\" = \"Close\";\n\"general.back\" = \"Back\";\n\"general.open_settings\" = \"Open Wire Settings\";\n\"general.edit\" = \"Edit\";\n\"general.done\" = \"Done\";\n\"general.confirm\" = \"OK\";\n\"general.later\" = \"Later\";\n\"general.skip\" = \"Not Now\";\n\"general.accept\" = \"Accept\";\n\"general.decline\" = \"No, thanks\";\n\"general.failure\" = \"Something went wrong\";\n\"general.failure.try_again\" = \"Please try again.\";\n\"general.service\" = \"Service\";\n\"general.off\" = \"Off\";\n\"general.on\" = \"On\";\n\"general.loading\" = \"Loading\u2026\";\n\"general.paste\" = \"Paste\";\n\n// Language like Chinese does not use space to sperate words or sentences.\n\"general.space_between_words\" = \" \";\n\n\"general.guest-room-name\" = \"Guest room\";\n\n// User Cell\n\"user_cell.title.you_suffix\" = \" (You)\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// People picker/start UI\n\"peoplepicker.search_placeholder\" = \"Search by name or username\";\n\"peoplepicker.header.top_people\" = \"Top people\";\n\"peoplepicker.button.create_conversation\" = \"Create group\";\n\"peoplepicker.button.add_to_conversation\" = \"Add Participants to Group\";\n\"peoplepicker.header.conversations\" = \"Groups\";\n\"peoplepicker.header.team_conversations\" = \"%@ Groups\";\n\"peoplepicker.header.send_invitation\" = \"Invite\";\n\"peoplepicker.header.contacts\" = \"Contacts\";\n\"peoplepicker.header.contacts_personal\" = \"Personal Contacts\";\n\"peoplepicker.header.directory\" = \"Connect\";\n\"peoplepicker.header.federation\" = \"Connect with other domain\";\n\n\"peoplepicker.group.title.singular\" = \"Add Participants\";\n\"peoplepicker.group.title.plural\" = \"Add Participants (%d)\";\n\"peoplepicker.group.skip\" = \"Skip\";\n\"peoplepicker.group.done\" = \"Done\";\n\"peoplepicker.group.create\" = \"Create\";\n\n\"peoplepicker.header.people\" = \"People\";\n\"peoplepicker.header.services\" = \"Services\";\n\"peoplepicker.services.open_conversation.item\" = \"Open conversation\";\n\"peoplepicker.services.add_service.button\" = \"Add service\";\n\"peoplepicker.services.add_service.error.title\" = \"The service can\u2019t be added\";\n\"peoplepicker.services.add_service.error.default\" = \"The service is unavailable at the moment\";\n\"peoplepicker.services.add_service.error.full\" = \"The conversation is full\";\n\n\"peoplepicker.title.create_conversation\" = \"Create group\";\n\"peoplepicker.title.add_to_conversation\" = \"Add participants\";\n\n\"peoplepicker.no_contacts_title\" = \"No Contacts.\";\n\n\"peoplepicker.no_matching_results_title\" = \"No results.\";\n\"peoplepicker.no_matching_results_message\" = \"Enter a full email address.\";\n\"peoplepicker.no_search_results\" = \"No matching results. Try entering a different name.\";\n\n\"peoplepicker.no_matching_results.action.send_invite\" = \"Send an invitation\";\n\"peoplepicker.no_matching_results.action.share_contacts\" = \"Share contacts\";\n\n\"peoplepicker.no_matching_results_provide_valid_email\" = \"Please enter a valid email address\";\n\"peoplepicker.no_matching_results_after_address_book_upload_title\" = \"No results.\";\n\"peoplepicker.no_matching_results_services_title\" = \"Services are helpers that can improve your workflow. To enable them, ask your administrator.\";\n\"peoplepicker.no_matching_results_services_admin_title\" = \"Services are helpers that can improve your workflow.\";\n\"peoplepicker.no_matching_results_services_manage_services_title\" = \"Manage Services\";\n/* This sentence ends with button title, contained in peoplepicker.no_matching_results_after_address_book_upload_button */\n\"peoplepicker.no_matching_results_after_address_book_upload_message\" = \"Enter a full email address or\";\n/*  */\n\"peoplepicker.no_matching_results_after_address_book_upload_button\" = \"share contacts\";\n\n\"peoplepicker.share_contacts.no_results.title\" = \"Find people by name or email address\";\n\n\"peoplepicker.send_invitation.dialog.title\" = \"Invitation sent\";\n\"peoplepicker.send_invitation.dialog.message\" = \"It can be used for 2 weeks. Send a new one if it expires.\";\n\"peoplepicker.send_invitation.dialog.ok\" = \"OK\";\n\n\"peoplepicker.invite_more_people\" = \"Invite more people\";\n\"peoplepicker.invite_team_members\" = \"Invite people to join the team\";\n\"peoplepicker.quick-action.open-conversation\" = \"Open\";\n\"peoplepicker.quick-action.create-conversation\" = \"Create group\";\n\"peoplepicker.quick-action.create-guest-room\" = \"Create guest room\";\n\"peoplepicker.quick-action.admin-services\" = \"Manage Services\";\n\n\"peoplepicker.federation.domain_unvailable\" = \"The federated domain is currently not available. [Learn more](%@)\";\n\n\"add_participants.all_contacts_added\" = \"Everyone\u2019s here.\";\n\n\"add_participants.alert.title\" = \"The group is full\";\n\"add_participants.alert.message.new_conversation\" = \"Up to %d people can join a conversation.\";\n\"add_participants.alert.message.existing_conversation\" = \"Up to %1$d people can join a conversation. Currently there is only room for %2$d more.\";\n\n// Contacts UI\n\"contacts_ui.search_placeholder\" = \"Search by name\";\n\"contacts_ui.invite_others\" = \"Invite others\";\n\"contacts_ui.name_in_contacts\" = \"%@ in Contacts\";\n\"contacts_ui.connection_request\" = \"Requested to connect\";\n\"contacts_ui.action_button.invite\" = \"Invite\";\n\"contacts_ui.action_button.open\" = \"Open\";\n\"contacts_ui.invite_sheet.cancel_button_title\" = \"Cancel\";\n\"contacts_ui.notification.invitation_sent\" = \"Invitation sent\";\n\"contacts_ui.notification.invitation_failed\" = \"Failed to send invitation\";\n\"contacts_ui.title\" = \"Invite people\";\n\n\"conversation_list.empty.all_archived.message\" = \"Everything archived\";\n\"conversation_list.empty.no_contacts.message\" = \"Start a conversation or\\ncreate a group.\";\n\n\n// Conversation List Indicator\n\"conversation_list.right_accessory.join_button.title\" = \"Join\";\n\"conversation_list.header.self_team.accessibility_value\" = \"%@ account.\";\n\"conversation_list.header.self_team.accessibility_value.inactive\" = \"Tap to activate.\";\n\"conversation_list.header.self_team.accessibility_value.active\" = \"Active now.\";\n\"conversation_list.header.self_team.accessibility_value.has_new_messages\" = \"Has new messages.\";\n\n// Conversation List Data Usage Permission Dialog\n\"conversation_list.data_usage_permission_alert.title\" = \"Help us make Wire better\";\n\"conversation_list.data_usage_permission_alert.message\" = \"I agree that Wire may create and use anonymous usage and error reports to improve the Wire App. I can revoke this consent at any time.\";\n\"conversation_list.data_usage_permission_alert.disagree\" = \"No\";\n\"conversation_list.data_usage_permission_alert.agree\" = \"I Agree\";\n\n// Profile Header View\n\"conversation.connection_view.in_address_book\" = \"in Contacts\";\n\n// Conversation list voiceover accessibility\n\"conversation_list.voiceover.open_conversation.hint\" = \"Open conversation\";\n\"conversation_list.voiceover.status.pending_connection\" = \"pending\";\n\"conversation_list.voiceover.status.active_call\" = \"active call\";\n\"conversation_list.voiceover.status.missed_call\" = \"missed call\";\n\"conversation_list.voiceover.status.pause_media\" = \"pause media\";\n\"conversation_list.voiceover.status.play_media\" = \"play media\";\n\"conversation_list.voiceover.status.silenced\" = \"silenced\";\n\"conversation_list.voiceover.status.typing\" = \"typing\";\n\"conversation_list.voiceover.status.ping\" = \"ping\";\n\"conversation_list.voiceover.status.mention\" = \"you are mentioned\";\n\"conversation_list.voiceover.status.reply\" = \"reply\";\n\"conversation_list.voiceover.bottom_bar.recent_button.label\" = \"recent\";\n\"conversation_list.voiceover.bottom_bar.recent_button.hint\" = \"list of recent conversations\";\n\"conversation_list.voiceover.bottom_bar.folder_button.label\" = \"folders\";\n\"conversation_list.voiceover.bottom_bar.folder_button.hint\" = \"list of conversations organized in folders\";\n\"conversation_list.voiceover.bottom_bar.archived_button.label\" = \"archived\";\n\"conversation_list.voiceover.bottom_bar.archived_button.hint\" = \"list of archived conversations\";\n\"conversation_list.voiceover.bottom_bar.contacts_button.label\" = \"contacts\";\n\"conversation_list.voiceover.bottom_bar.contacts_button.hint\" = \"search for people on Wire\";\n\"conversation_list.voiceover.bottom_bar.compose_button.label\" = \"compose\";\n\"conversation_list.voiceover.bottom_bar.compose_button.hint\" = \"compose messages and save for later\";\n\"conversation_list.voiceover.bottom_bar.camera_button.label\" = \"camera\";\n\"conversation_list.voiceover.bottom_bar.camera_button.hint\" = \"take picture and send quickly\";\n\"conversation_list.voiceover.unread_messages.hint\" = \"You have unread messages.\";\n\n// Archived List\n\"archived_list.title\" = \"archive\";\n\n// Add contact tool tip\n\"tool_tip.contacts.title\" = \"Conversations start here\";\n\"tool_tip.contacts.message\" = \"Start a conversation. Call, message and share in private or with groups.\";\n\n// \"Knows\" subtitle in cell: \"Knows Indrek\", \"Knows Indrek and Jane\", \"Knows Indrek and 5 others\"\n\"peoplepicker.suggested.knows_one\" = \"Knows %@\";\n\"peoplepicker.suggested.knows_two\" = \"Knows %@ and %@\";\n\"peoplepicker.hide_search_result\" = \"Hide\";\n\"peoplepicker.hide_search_result_progress\" = \"Hiding\u2026\";\n\n\"send_invitation.subject\" = \"Connect with me on Wire\";\n\"send_invitation.text\" = \"I\u2019m on Wire, search for %@ or visit get.wire.com\";\n\"send_invitation_no_email.text\" = \"I\u2019m on Wire. Visit get.wire.com to connect with me.\";\n\n// Folders\n\n\"folder.creation.name.title\" = \"Create new folder\";\n\"folder.creation.name.button.create\" = \"Create\";\n\"folder.creation.name.header\" = \"Move the conversation \\\"%@\\\" to a new folder.\";\n\"folder.creation.name.footer\" = \"Maximum 64 characters\";\n\"folder.creation.name.placeholder\" = \"Folder name\";\n\n\"folder.picker.title\" = \"Move to\";\n\"folder.picker.empty.hint\" = \"Create a new folder by pressing the + button\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++x\n// In-app notifications (chat heads)\n\"notifications.shared_a_photo\" = \"shared a picture\";\n\"notifications.pinged\" = \"pinged\";\n\"notifications.sent_file\" = \"shared a file\";\n\"notifications.sent_location\" = \"shared a location\";\n\"notifications.sent_video\" = \"shared a video\";\n\"notifications.sent_audio\" = \"shared an audio\";\n\"notifications.in_conversation\" = \"%@ - %@\";\n\"notifications.this_conversation\" = \"%@ in this conversation\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// List (labels) - Needs to be revised with updated guidance\n\"list.title\" = \"Conversations\";\n\"list.archived_conversations\" = \"ARCHIVE\";\n\"list.archived_conversations_close\" = \"Close archive\";\n\n\"list.section.groups\" = \"Groups\";\n\"list.section.contacts\" = \"People\";\n\"list.section.requests\" = \"Requests\";\n\"list.section.favorites\" = \"Favorites\";\n\n\"conversation.voiceover.verified\" = \"verified\";\n\"conversation.voiceover.legalhold\" = \"legal hold\";\n\"conversation.voiceover.value.active\" = \"active\";\n\"conversation.voiceover.value.disabled\" = \"disabled\";\n\n\"conversation.status.secutity_alert.default\" = \"New security alert\";\n\n\"conversation.status.typing\" = \"Typing a message\u2026\";\n\"conversation.status.typing.group\" = \"%@: typing a message\u2026\";\n\"conversation.status.silenced\" = \"Muted\";\n\"conversation.status.poor_connection\" = \"Poor connection\";\n\"conversation.status.blocked\" = \"Blocked\";\n\"conversation.status.incoming_call\" = \"%@ is calling\u2026\";\n\"conversation.status.incoming_call.unknown\" = \"Someone is calling\u2026\";\n\n\"conversation.status.message.text\" = \"%@\";\n\"conversation.status.message.link\" = \"Shared a link\";\n\"conversation.status.message.image\" = \"Shared a picture\";\n\"conversation.status.message.location\" = \"Shared a location\";\n\"conversation.status.message.audio\" = \"Shared an audio message\";\n\"conversation.status.message.video\" = \"Shared a video\";\n\"conversation.status.message.file\" = \"Shared a file\";\n\"conversation.status.message.knock\" = \"Pinged\";\n\"conversation.status.message.missedcall\" = \"Missed call\";\n\"conversation.status.message.missedcall.groups\" = \"Missed call from %@\";\n\"conversation.status.message.mention\" = \"%@\";\n\"conversation.status.message.reply\" = \"%@\";\n\"conversation.status.message.ephemeral\" = \"Sent a message\";\n\"conversation.status.message.ephemeral.group\" = \"Someone sent a message\";\n\"conversation.status.message.ephemeral.mention\" = \"Mentioned you\";\n\"conversation.status.message.ephemeral.mention.group\" = \"Someone mentioned you\";\n\"conversation.status.message.ephemeral.reply\" = \"Replied to your message\";\n\"conversation.status.message.ephemeral.reply.group\" = \"Someone replied to your message\";\n\"conversation.status.message.ephemeral.knock\" = \"Pinged\";\n\"conversation.status.message.ephemeral.knock.group\" = \"Someone pinged\";\n\n\"conversation.status.unsent\" = \"\u26a0\ufe0f Unsent message\";\n\"conversation.status.you\" = \"You\";\n\"conversation.status.someone\" = \"Someone\";\n\"conversation.status.you_was_added\" = \"%@ added you\";\n\"conversation.status.you_were_removed\" = \"You were removed\";\n\"conversation.status.you_left\" = \"You left\";\n\"conversation.status.started_conversation\" = \"%@ started a conversation\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Compose Entry Point\n\n\"compose.contact.title\" = \"Conversation\";\n\"compose.message.title\" = \"Message\";\n\n\"conversation_details.open_button.accessibility_hint\" = \"Double tap to view the details of the conversation.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Conversation\n\"conversation.invite_more_people.title\" = \"Spread the word!\";\n\"conversation.invite_more_people.description\" = \"Add people to this conversation\";\n\"conversation.invite_more_people.explanation_url\" = \"https://support.wire.com\";\n\"conversation.invite_more_people.button_title\" = \"Add People\";\n\n// Conversation names\n\"conversation.displayname.emptygroup\" = \"Empty group conversation\";\n\n\"conversation.input_bar.verified\" = \"Verified\";\n\"conversation.input_bar.placeholder\" = \"Type a message\";\n\"conversation.input_bar.placeholder_ephemeral\" = \"Timed message\";\n\n\"conversation.input_bar.audio_message.tooltip.pull_send\" = \"Swipe up to send\";\n\"conversation.input_bar.audio_message.tooltip.tap_send\" = \"Tap to send\";\n\"conversation.input_bar.audio_message.too_long.title\" = \"Recording Stopped\";\n\"conversation.input_bar.audio_message.too_long.message\" = \"Audio messages are limited to %@.\";\n\n\"conversation.input_bar.audio_message.too_long_size.message\" = \"File size for audio messages is limited to %@.\";\n\n\"conversation.input_bar.audio_message.send\" = \"Send\";\n\n\"conversation.input_bar.audio_message.keyboard.record_tip\" = \"Tap to record\\nYou can  %@  it after that\";\n\"conversation.input_bar.audio_message.keyboard.filter_tip\" = \"Choose a filter above\";\n\n\"conversation.call.many_participants_confirmation.title\" = \"Start a call\";\n\"conversation.call.many_participants_confirmation.message\" = \"This will call %d people\";\n\"conversation.call.many_participants_confirmation.call\" = \"Call\";\n\n\"conversation.connection_view.in_address_book\" = \"in Contacts\";\n\n\"conversation.input_bar.shortcut.send\" = \"Send Message\";\n\"conversation.input_bar.shortcut.newline\" = \"Insert line break\";\n\"conversation.input_bar.shortcut.edit_last_message\" = \"Edit Last Message\";\n\"conversation.input_bar.shortcut.cancel_editing_message\" = \"Cancel\";\n\"conversation.input_bar.shortcut.choose_previous_mention\" = \"Choose previous mention\";\n\"conversation.input_bar.shortcut.choose_next_mention\" = \"Choose next mention\";\n\n\"conversation.input_bar.message_too_long.title\" = \"Message too long\";\n\"conversation.input_bar.message_too_long.message\" = \"You can send messages up to %d characters long.\";\n\n\"conversation.create.group_name.title\" = \"Create group\";\n\"conversation.create.group_name.placeholder\" = \"Group name\";\n\"conversation.create.guidance.empty\" = \"At least 1 character\";\n\"conversation.create.guidance.toolong\" = \"Too many characters\";\n\"conversation.create.options.title\" = \"Conversation options\";\n\"conversation.create.options.subtitle\" = \"Guests and services: %@, Read receipts: %@\";\n\"conversation.create.guests.title\" = \"Allow guests and services\";\n\"conversation.create.guests.subtitle\" = \"Open this conversation to services and people outside your team.\";\n\"conversation.create.receipts.title\" = \"Read receipts\";\n\"conversation.create.receipts.subtitle\" = \"When this is on, people can see when their messages in this conversation are read.\";\n\n\"conversation.input_bar.ongoing_call_alert.title\" = \"Ongoing call\";\n\"conversation.input_bar.ongoing_call_alert.audio.message\" = \"You can\u2019t record an audio message during a call.\";\n\"conversation.input_bar.ongoing_call_alert.video.message\" = \"You can\u2019t record a video during a call.\";\n\"conversation.input_bar.ongoing_call_alert.photo.message\" = \"You can\u2019t take a picture during a call.\";\n\n\"conversation.alert.message_deleted\" = \"The message is deleted.\";\n\n\"conversation.guests_present\" = \"Guests are present\";\n\"conversation.services_present\" = \"Services are active\";\n\"conversation.guests_services_present\" = \"Guests and services are present\";\n\"conversation.action.search\" = \"Search\";\n\n// Reply message preview\n\"conversation.input_bar.message_preview.image\" = \"Image\";\n\"conversation.input_bar.message_preview.location\" = \"Location\";\n\"conversation.input_bar.message_preview.video\" = \"Video\";\n\"conversation.input_bar.message_preview.audio\" = \"Audio Message\";\n\"conversation.input_bar.message_preview.file\" = \"File\";\n\"conversation.input_bar.close_reply\" = \"Cancel reply\";\n\n\"conversation.input_bar.message_preview.accessibility_description\" = \"Replying to message: %@\";\n\"conversation.input_bar.message_preview.accessibility.image_message\" = \"Image message\";\n\"conversation.input_bar.message_preview.accessibility.location_message\" = \"Location message\";\n\"conversation.input_bar.message_preview.accessibility.video_message\" = \"Video message\";\n\"conversation.input_bar.message_preview.accessibility.audio_message\" = \"Audio message\";\n\"conversation.input_bar.message_preview.accessibility.file_message\" = \"File message (%@)\";\n\"conversation.input_bar.message_preview.accessibility.unknown_message\" = \"Unknown message\";\n\"conversation.input_bar.message_preview.accessibility.message_from\" = \"%@ from %@\";\n\n\"image_confirmer.confirm\" = \"OK\";\n\"image_confirmer.cancel\" = \"Cancel\";\n\"image.add_sketch\" = \"Add a sketch\";\n\"image.add_emoji\" = \"Add an emoji\";\n\"image.edit_image\" = \"Edit image\";\n\n// Camera access\n\"camera_access.denied\" = \"Wire needs access to the camera\";\n\"video_call.camera_access.denied\" = \"Wire doesn\u2019t have access to the camera\";\n\"camera_access.denied.instruction\" = \"\";\n\"camera_access.denied.open_settings\" = \"Enable it in Wire Settings\";\n\n// Camera and photos access, keyboard\n\"keyboard_photos_access.denied.keyboard.settings\" = \"Settings\";\n\"keyboard_photos_access.denied.keyboard.camera_and_photos\" = \"Wire needs access to your\\ncamera and photos.\"; // split text on two lines for a better text balance\n\"keyboard_photos_access.denied.keyboard.photos\" = \"Wire needs access to your photos.\";\n\"keyboard_photos_access.denied.keyboard.camera\" = \"Wire needs access to your camera.\";\n\"keyboard_photos_access.denied.keyboard.ongoing_call\" = \"You can\u2019t access the camera while you are on a video call.\";\n\n// Camera Controls\n\"camera_controls.aeaf_lock\" = \"AE/AF Lock\";\n\n// Location\n\"location.send_button.title\" = \"Send\";\n\"location.unauthorized_alert.title\" = \"Enable Location Services\";\n\"location.unauthorized_alert.message\" = \"To send your location, enable Location Services and allow Wire to access your location.\";\n\"location.unauthorized_alert.cancel\" = \"Cancel\";\n\"location.unauthorized_alert.settings\" = \"Settings\";\n\n// Twitter\n\"twitter_status.on_twitter\" = \"%@ on Twitter\";\n\n// Ephemeral message\n\"input.ephemeral.timeout.none\" = \"Off\";\n\"input.ephemeral.title\" = \"Set a time for the message to disappear\";\n\n// System messages\n\"content.system.you_nominative\" = \"you\";\n\"content.system.you_dative\" = \"you\";\n\"content.system.and_you_dative\" = \"and you\";\n\"content.system.you_accusative\" = \"you\";\n\n\"content.system.continued_conversation\" = \"Start a conversation with %@\";\n\"content.system.started_conversation.truncated_people\" = \"and %@\";\n\"content.system.started_conversation.truncated_people.others\" = \"%@ others\";\n\"content.system.started_conversation.complete_team\" = \"all team members\";\n\"content.system.started_conversation.complete_team.guests\" = \"all team members and %@ guests\";\n\n\"content.system.other_started_conversation\" = \"%@ started a conversation with %@\";\n\"content.system.you_started_conversation\" = \"You started a conversation with %@\";\n\n\"content.system.you_added_participant\" = \"You added %@\";\n\"content.system.other_added_participant\" = \"%@ added %@\";\n\"content.system.other_added_you\" = \"%@ added you\";\n\n\"content.system.participants_you\" = \"You\";\n\"content.system.participants_1_other\" = \"%@ and %@\";\n\"content.system.other_left\" = \"%@ left\";\n\"content.system.you_left\" = \"You left\";\n\"content.system.other_removed_other\" = \"%@ removed %@\";\n\"content.system.other_removed_you\" = \"%@ removed you\";\n\"content.system.you_removed_other\" = \"You removed %@\";\n\n\"content.system.services.warning\" = \"Services have access to the content of this conversation\";\n\n// Link attachment messages\n\n\"content.message.link_attachment.accessibility_label.youtube\" = \"YouTube video preview\";\n\"content.message.link_attachment.accessibility_label.soundcloud_song\" = \"SoundCloud song preview\";\n\"content.message.link_attachment.accessibility_label.soundcloud_set\" = \"SoundCloud playlist preview\";\n\n// Digital signature\n\"digital_signature.alert.error\" = \"Unfortunately, your digital signature failed.\";\n\"digital_signature.alert.error.no_consent_url\" = \"Unfortunately, the signature form did not open. Please try again.\";\n\"digital_signature.alert.error.no_signature\" = \"Unfortunately, your digital signature failed. Please try again.\";\n\"digital_signature.alert.download_necessary\" = \"Please save and read the document before signing it.\";\n\n// New conversation participants added / removed / started system message\n\n\"content.system.conversation.other.started\" = \"%@ started a conversation with %@\";\n\"content.system.conversation.other.added\" = \"%@ added %@\";\n\"content.system.conversation.other.removed\" = \"%@ removed %@\";\n\"content.system.conversation.other.left\" = \"%@ left\";\n\n\"content.system.conversation.you.started\" = \"%@ started a conversation with %@\";\n\"content.system.conversation.you.added\" = \"%@ added %@\";\n\"content.system.conversation.you.removed\" = \"%@ removed %@\";\n\"content.system.conversation.you.left\" = \"%@ left\";\n\"content.system.conversation.team.member-leave\" = \"%@ was removed from the team.\";\n\"content.system.conversation.guest.joined\" = \"%@ joined\";\n\n\"content.system.conversation.invite.title\" = \"Services and people outside your team can join this conversation.\";\n\"content.system.conversation.invite.button\" = \"Invite people\";\n\n\"content.system.other_renamed_conv_to_nothing\" = \"%@ removed the conversation name\";\n\"content.system.you_renamed_conv_to_nothing\" = \"You removed the conversation name\";\n\"content.system.pending_message_timestamp\" = \"Sending\u2026\";\n\"content.system.message_sent_timestamp\" = \"Sent\";\n\"content.system.message_delivered_timestamp\" = \"Delivered\";\n\"content.system.message_read_timestamp\" = \"Seen\";\n\"content.system.failedtosend_message_timestamp\" = \"Sending failed.\";\n\"content.system.failedtosend_message_timestamp_resend\" = \"Resend\";\n\"content.system.failedtosend_message_timestamp_delete\" = \"Delete\";\n\"content.system.like_tooltip\" = \"Tap to like\";\n\"content.system.deleted_message_prefix_timestamp\" = \"Deleted: %@\";\n\"content.system.edited_message_prefix_timestamp\" = \"Edited: %@\";\n\"content.system.connecting_to\" = \"Connecting to %@.\\nStart a conversation\";\n\"content.system.connected_to\" = \"Connected to %@\\nStart a conversation\";\n\"content.system.other_wanted_to_talk\" = \"%@ called\";\n\"content.system.you_wanted_to_talk\" = \"You called\";\n\"content.system.ephemeral_time_remaining\" = \"%@ left\";\n\n\"content.system.self_user_new_client\" = \"**You** started using [a new device](%@)\";\n\"content.system.self_user_new_self_client\" = \"**You** started using [this device](%@)\";\n\n\"content.system.you_started\" = \"You\";\n\n\"content.system.call.called\" = \"%@ called\";\n\"content.system.call.called-you\" = \"%@ called\";\n\"content.system.call.called.you\" = \"You\";\n\n\"content.system.call.missed-call\" = \"Missed call\";\n\"content.system.call.missed-call-you\" = \"Missed call\";\n\n\"content.system.call.missed-call.groups\" = \"Missed call from %@\";\n\"content.system.call.missed-call.groups-you\" = \"Missed call from %2$@\";\n\"content.system.call.missed-call.groups.you\" = \"You\";\n\n\"content.system.renamed_conv.title\" = \"%@ renamed the conversation\";\n\"content.system.renamed_conv.title-you\" = \"%@ renamed the conversation\";\n\"content.system.renamed_conv.title.you\" = \"You\";\n\n\"content.system.conversation.with_name.title\" = \"%@ started the conversation\";\n\"content.system.conversation.with_name.title-you\" = \"%@ started the conversation\";\n\n\"content.system.conversation.with_name.participants\" = \"with\";\n\n\"content.system.message_timer_changes\" = \"%@ set the message timer to %@\";\n\"content.system.message_timer_changes-you\" = \"%@ set the message timer to %@\";\n\n\"content.system.message_timer_off\" = \"%@ turned off the message timer\";\n\"content.system.message_timer_off-you\" = \"%@ turned off the message timer\";\n\n// read receipt\n\n\"content.system.message_read_receipt_on\" = \"%@ turned read receipts on for everyone\";\n\"content.system.message_read_receipt_on-you\" = \"%@ turned read receipts on for everyone\";\n\n\"content.system.message_read_receipt_off\" = \"%@ turned read receipts off for everyone\";\n\"content.system.message_read_receipt_off-you\" = \"%@ turned read receipts off for everyone\";\n\n\"content.system.message_read_receipt_on_add_to_group\" = \"Read receipts are on\";\n\n// legal hold\n\n\"content.system.message_legal_hold.enabled\" = \"This conversation is under legal hold\";\n\"content.system.message_legal_hold.disabled\" = \"Legal hold deactivated for this conversation\";\n\n\"content.system.message_legal_hold.learn_more\" = \"Learn more\";\n\n//\n\n\"content.system.reactivated_device\" = \"You started using [this device](%@) again. Messages sent in the meantime will not appear here.\";\n\n\"content.system.is_verified\" = \"All fingerprints are verified\";\n\n\"content.system.new_users\" = \"New user joined.\";\n\"content.system.verify_devices\" = \"Verify devices\";\n\n\"content.system.unverified_self_devices\" = \"**You** unverified one of [your devices](%@)\";\n\"content.system.unverified_other_devices\" = \"**You** unverified one of [%1$@\u2019s devices](%2$@)\";\n\n\"content.system.missing_messages.title\" = \"You haven\u2019t used this device for a while. Some messages may not appear here.\";\n\"content.system.missing_messages.subtitle_start\" = \"Meanwhile,\";\n\n\"content.system.cannot_decrypt.self\" = \"A message from **you** could not be decrypted.\";\n\"content.system.cannot_decrypt.other\" = \"A message from **%@** could not be decrypted.\";\n\"content.system.cannot_decrypt.reset_session\" = \"Fix future messages\";\n\"content.system.cannot_decrypt.error_details\" = \"(Fixed error: %d ID: %@)\";\n\n\"content.system.cannot_decrypt_resolved.self\" = \"You can now decrypt messages from yourself. To recover lost messages, **you need to resend them.**\";\n\"content.system.cannot_decrypt_resolved.other\" = \"You can now decrypt messages from **%1$@**. To recover lost messages, **ask %1$@ to resend them.**\";\n\n\"content.system.cannot_decrypt_identity_changed.self\" = \"**Your** device identity changed. Undelivered message.\";\n\"content.system.cannot_decrypt_identity_changed.other\" = \"**%@\u2019s** device identity changed. Undelivered message.\"; // possessive apostrophe - might differ in different languages\n\n\"content.system.session_reset.other\" = \"**%@ was unable to decrypt some of your messages but has solved the issue**. This affected all conversations you share together.\";\n\"content.system.session_reset.self\" = \"**You were unable to decrypt some of your messages but you solved the issue**. This affected all conversations.\";\n\n\"content.system.unknown_message.body\" = \"This message can\u2019t be displayed. You may be using an older version of Wire.\";\n\n\"content.file.uploading\" = \"Uploading\u2026\";\n\"content.file.downloading\" = \"Downloading\u2026\";\n\"content.file.upload_failed\" = \"Upload failed\";\n\"content.file.upload_cancelled\" = \"Upload cancelled\";\n\"content.file.upload_video\" = \"Videos\";\n\"content.file.take_video\" = \"Record a video\";\n\"content.file.browse\" = \"Browse\";\n\n\"content.file.save_video\" = \"Save\";\n\"content.file.save_audio\" = \"Save\";\n\"content.image.save_image\" = \"Save\";\n\n\"content.message.delete\" = \"Delete\";\n\"content.message.save\" = \"Save\";\n\"content.message.resend\" = \"Resend\";\n\n\"content.message.delete_ellipsis\" = \"Delete\u2026\";\n\n\"content.message.like\" = \"Like\";\n\"content.message.unlike\" = \"Unlike\";\n\"content.message.forward\" = \"Share\";\n\"content.message.go_to_conversation\" = \"Reveal\";\n\"content.message.forward.to\" = \"Search\u2026\";\n\"content.message.open\" = \"Open\";\n\"content.message.sign\" = \"Sign\";\n\"content.message.copy\" = \"Copy\";\n\"content.message.download\" = \"Download\";\n\"content.message.details\" = \"Details\";\n\n// Reply\n\"content.message.reply\" = \"Reply\";\n\"content.message.original_label\" = \"Original message\";\n\"content.message.reply.original_timestamp.date\" = \"Original message from %@\";\n\"content.message.reply.original_timestamp.time\" = \"Original message from %@\";\n\"content.message.reply.broken_message\" = \"You cannot see this message.\";\n\"content.message.reply.edited_message\" = \"Edited\";\n\n\"content.message.open_link_alert.title\" = \"Visit Link\";\n\"content.message.open_link_alert.message\" = \"This will take you to\\n%@\";\n\"content.message.open_link_alert.open\" = \"Open\";\n\n\"content.message.audio_message.accessibility\" = \"Play the audio message\";\n\n\"content.reactions_list.likers\" = \"Liked by\";\n\n\"content.file.too_big\" = \"You can send files up to %@\";\n// Someone pinged\n\"content.ping.text\" = \"%@ pinged\";\n\"content.ping.text-you\" = \"%@ pinged\";\n\n// Current user pinged\n\"content.ping.text.you\" = \"You\";\n\n// Inline Player\n\"content.player.unable_to_play\" = \"UNABLE TO PLAY TRACK\";\n\n// Connecting (NEW IMPLEMENTATION, REVIEW LATER)\n\"connection_request.title\" = \"Connect to %@\"; //check UPPERCASE implementation in code\n\n// Default connect message to be shown\n\"missive.connection_request.default_message\" = \"Hi %@,\\nLet\u2019s connect on Wire.\\n%@\";\n\n\"connection_request_pending_title\" = \"Connection Request\";\n\"connection_request.send_button_title\" = \"Connect\";\n\"inbox.connection_request.connect_button_title\" = \"Connect\";\n\"inbox.connection_request.ignore_button_title\" = \"Ignore\";\n\n// Save image errors\n\"library.alert.permission_warning.title\" = \"Wire needs access to your Photos\";\n\"library.alert.permission_warning.restrictions.explaination\" = \"Wire cannot access your library because restrictions are enabled.\";\n\"library.alert.permission_warning.not_allowed.explaination\" = \"Go to Settings and allow Wire to access your photos.\";\n\n// Voice\n\"voice.status.one_to_one.incoming\" = \"%@\\ncalling\";\n\"voice.status.group_call.incoming\" = \"%@\\nringing\";\n\"voice.status.one_to_one.outgoing\" = \"%@\\nringing\";\n\"voice.status.joining\" = \"%@\\nConnecting\";\n\"voice.status.leaving\" = \"%@\\nCall ended\";\n\"voice.status.video_not_available\" = \"Video turned off\";\n\"voice.status.low_connection\" = \"Bad connection\";\n\"voice.network_error.title\" = \"No Internet Connection\";\n\"voice.status.cbr\" = \"Constant Bit Rate\";\n\"voice.network_error.body\" = \"You must be online to call. Check your connection and try again.\";\n\"voice.degradation.new_self_device\" = \"You started using a new device.\";\n\"voice.degradation.new_user_device\" = \"%@ started using a new device.\";\n\"voice.degradation_outgoing.prompt\" = \"Do you still want to place the call?\";\n\"voice.degradation_incoming.prompt\" = \"Do you still want to accept the call?\";\n\"voice.accept_button.title\" = \"Accept\";\n\"voice.decline_button.title\" = \"Decline\";\n\"voice.hang_up_button.title\" = \"Hang Up\";\n\"voice.mute_button.title\" = \"Mute\";\n\"voice.video_button.title\" = \"Video\";\n\"voice.flip_video_button.title\" = \"Flip\";\n\"voice.speaker_button.title\" = \"Speaker\";\n\"voice.cancel_button.title\" = \"Cancel\";\n\"voice.call_button.title\" = \"Call\";\n\"voice.end_call_button.title\" = \"End Call\";\n\"voice.call_error.unsupported_version.title\" = \"Please update Wire\";\n\"voice.call_error.unsupported_version.message\" = \"You received a call that isn't supported by this version of Wire.\\nGet the latest version in the App Store.\";\n\"voice.call_error.unsupported_version.dismiss\" = \"Later\";\n\n\"voice.alert.call_in_progress.title\" = \"Call in progress\";\n\"voice.alert.call_in_progress.message\" = \"You can have only one active call at a time\";\n\"voice.alert.call_in_progress.confirm\" = \"OK\";\n\n\"voice.alert.microphone_warning.title\" = \"Wire needs access to the microphone\";\n\n\"voice.alert.camera_warning.title\" = \"Wire needs access to the camera\";\n\n\"voice.top_overlay.tap_to_return\" = \"Tap to return to call\";\n\"voice.top_overlay.accessibility_title\" = \"Ongoing call\";\n\n// Voice New\n\n\"call.status.connecting\" = \"Connecting\u2026\";\n\"call.status.incoming.user\" = \"%@ is calling\u2026\";\n\"call.status.incoming\" = \"Calling\u2026\";\n\"call.status.outgoing\" = \"Ringing\u2026\";\n\"call.status.outgoing.user\" = \"Calling %@\u2026\";\n\"call.status.reconnecting\" = \"Reconnecting\u2026\";\n\"call.status.terminating\" = \"Hanging up\u2026\";\n\"call.status.constant_bitrate\" = \"Constant Bit Rate\";\n\"call.status.variable_bitrate\" = \"Variable Bit Rate\";\n\n\"call.participants.show_all\" = \"Show All (%@)\";\n\"call.participants.list.title\" = \"Participants\";\n\n\"call.overlay.switch_to.speakers\" = \"SPEAKERS\";\n\"call.overlay.switch_to.all\" = \"ALL\";\n\n\"call.grid.no_active_speakers\" = \"No active video speakers...\";\n\n\"call.grid.hints.fullscreen\" = \"Double Tap on a tile for fullscreen\";\n\"call.grid.hints.go_back_or_zoom\" = \"Double Tap to go back, pinch to zoom\";\n\"call.grid.hints.zoom\" = \"Pinch to zoom\";\n\n\"call.video.paused\" = \"Video paused\";\n\"call.video.too_many.alert.title\" = \"Too many people for Video\";\n\"call.video.too_many.alert.message\" = \"Video calls only work in groups of 4 or less.\";\n\n\"call.degraded.alert.title\" = \"New Device\";\n\"call.degraded.alert.message.self\" = \"You started using a new device.\";\n\"call.degraded.alert.message.user\" = \"%@ started using a new device.\";\n\"call.degraded.alert.message.unknown\" = \"Someone started using a new device.\";\n\"call.degraded.alert.action.continue\" = \"Call anyway\";\n\n\"call.degraded.ended.alert.title\" = \"Call ended\";\n\"call.degraded.ended.alert.message.self\" = \"The call was disconnected because you started using a new device.\";\n\"call.degraded.ended.alert.message.user\" = \"The call was disconnected because %@ is no longer a verified contact.\";\n\"call.degraded.ended.alert.message.unknown\" = \"The call was disconnected because someone is no longer a verified contact.\";\n\n\"call.alert.ongoing.alert_title\" = \"This will end your other call.\";\n\n\"call.alert.ongoing.start.message\" = \"A call is active in another conversation.\\nCalling here will hang up the other call.\";\n\"call.alert.ongoing.join.message\" = \"A call is active in another conversation.\\nJoining this call will hang up the other one.\";\n\"call.alert.ongoing.start.button\" = \"Call anyway\";\n\"call.alert.ongoing.join.button\" = \"Join anyway\";\n\n\"call.quality.indicator.message\" = \"Your calling relay is not reachable. This may affect your call experience.\";\n\"call.quality.indicator.more_info.button.text\" = \"More info\";\n\n// Call Actions (accessibility)\n\n\"call.announcement.incoming\" = \"Incoming call from %@\";\n\"call.actions.label.toggle_mute_on\" = \"Mute\";\n\"call.actions.label.toggle_mute_off\" = \"Unmute\";\n\"call.actions.label.flip_camera\" = \"Flip camera\";\n\"call.actions.label.toggle_speaker_on\" = \"Enable speaker\";\n\"call.actions.label.toggle_speaker_off\" = \"Disable speaker\";\n\"call.actions.label.accept_call\" = \"Accept call\";\n\"call.actions.label.reject_call\" = \"Decline call\";\n\"call.actions.label.terminate_call\" = \"End call\";\n\"call.actions.label.toggle_video_on\" = \"Turn on camera\";\n\"call.actions.label.toggle_video_off\" = \"Turn off camera\";\n\"call.actions.label.switch_to_back_camera\" = \"Switch to back camera\";\n\"call.actions.label.switch_to_front_camera\" = \"Switch to front camera\";\n\"call.actions.label.minimize_call\" = \"Minimize call\";\n\"call.actions.label.make_audio_call\" = \"Start audio call\";\n\"call.actions.label.make_video_call\" = \"Start video call\";\n\"call.actions.label.join_call\" = \"Join call\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Profile and Participants\n\n\"participants.add_people_button_title\" = \"Add\";\n\"participants.avatar.guest.title\" = \"Guest\";\n\n\"participants.title\" = \"Details\";\n\"participants.all.title\" = \"People\";\n\"participants.section.participants\" = \"People (%d)\";\n\"participants.section.services\" = \"Services (%d)\";\n\"participants.section.settings\" = \"Options\";\n\"participants.footer.add_title\" = \"Add Participants\";\n\"participants.section.name.footer\" = \"Up to %1$d participants can join a group conversation.\";\n\"participants.section.admins.footer\" = \"There are no admins.\";\n\"participants.section.members.footer\" = \"There are no members.\";\n\n\"profile.profile.group_admin_options.title\" = \"Group admin\";\n\n// Meta Menu\n\"meta.menu.accessibility_more_options_button\" = \"More actions\";\n\"meta.menu.rename\" = \"Rename\";\n\"meta.menu.leave\" = \"Leave Group\u2026\";\n\"meta.menu.archive\" = \"Archive\";\n\"meta.menu.unarchive\" = \"Unarchive\";\n\"meta.menu.delete\" = \"Delete Group\u2026\";\n\"meta.menu.clear_content\" = \"Clear Content\u2026\";\n\"meta.menu.move_to_folder\" = \"Move to\u2026\";\n\"meta.menu.remove_from_folder\" = \"Remove from \\\"%@\\\"\";\n\"meta.menu.silence.mute\" = \"Mute\";\n\"meta.menu.silence.unmute\" = \"Unmute\";\n\"meta.menu.cancel\" = \"Cancel\";\n\"meta.menu.cancel_connection_request\" = \"Cancel Request\";\n\"meta.menu.mark_unread\" = \"Mark as Unread\";\n\"meta.menu.mark_read\" = \"Mark as Read\";\n\"shortcut.mark_all_as_read.title\" = \"Mark All as Read\";\n\"meta.menu.configure_notifications\" = \"Notifications\u2026\";\n\"meta.menu.open_self_profile\" = \"Open Profile\";\n\n// Delete conversation\n\"meta.menu.delete_content.dialog_title\" = \"Clear content?\";\n\"meta.menu.delete_content.dialog_message\" = \"This will clear the conversation history on all your devices.\";\n\"meta.menu.delete_content.leave_as_well_message\" = \"Also leave the conversation\";\n\"meta.menu.delete_content.button_cancel\" = \"Cancel\";\n\"meta.menu.delete_content.button_delete\" = \"Clear\";\n\"meta.menu.delete_content.button_delete_and_leave\" = \"Clear and leave\";\n\n// Configure conversation notifications\n\"meta.menu.configure_notification.dialog_message\" = \"Notify me about:\";\n\"meta.menu.configure_notification.button_everything\" = \"Everything\";\n\"meta.menu.configure_notification.button_mentions_and_replies\" = \"Mentions and Replies\";\n\"meta.menu.configure_notification.button_nothing\" = \"Nothing\";\n\"meta.menu.configure_notification.button_cancel\" = \"Cancel\";\n\n// Leave conversation\n\"meta.leave_conversation_dialog_title\" = \"Leave conversation?\";\n\"meta.leave_conversation_dialog_message\" = \"The participants will be notified and the conversation will be removed from your list.\";\n\"meta.leave_conversation.delete_content_as_well_message\" = \"Also clear the content\";\n\"meta.leave_conversation_button_cancel\" = \"Cancel\";\n\"meta.leave_conversation_button_leave\" = \"Leave\";\n\"meta.leave_conversation_button_leave_and_delete\" = \"Leave and clear content\";\n\n// Conversation Degraded (security level lowered)\n\"meta.degraded.degradation_reason_message.singular\" = \"%@ started using a new device.\";\n\"meta.degraded.degradation_reason_message.plural\" = \"%@ started using new devices.\";\n\"meta.degraded.degradation_reason_message.someone\" = \"Someone started using a new device.\";\n\"meta.degraded.dialog_message\" = \"Do you still want to send your message?\";\n\"meta.degraded.verify_devices_button\" = \"Verify Devices\u2026\";\n\"meta.degraded.send_anyway_button\" = \"Send Anyway\";\n\"meta.degraded.cancel_sending_button\" = \"Cancel\";\n\"meta.legalhold.info_button\" = \"What Is Legal Hold?\";\n\"meta.legalhold.send_alert_title\" = \"The conversation is now subject to legal hold.\";\n\n// Remove from conversation dialogue\n\"profile.remove_dialog_title\" = \"Remove?\";\n\"profile.remove_dialog_message\" = \"%@ won\u2019t be able to send or receive messages in this conversation.\";\n\"profile.remove_dialog_button_cancel\" = \"Cancel\";\n\"profile.remove_dialog_button_remove\" = \"Remove From Group\u2026\";\n\"profile.remove_dialog_button_remove_confirm\" = \"Remove From Group\";\n\n// Block dialog\n\"profile.block_dialog.title\" = \"Block?\";\n\"profile.block_dialog.message\" = \"%@ won\u2019t be able to contact you or add you to group conversations.\";\n\"profile.block_dialog.button_cancel\" = \"Cancel\";\n\"profile.block_dialog.button_block\" = \"Block\";\n\n// Delete message dialog\n\"message.delete_dialog.message\" = \"This cannot be undone.\";\n\"message.delete_dialog.action.cancel\" = \"Cancel\";\n\"message.delete_dialog.action.hide\" = \"Delete for Me\";\n\"message.delete_dialog.action.delete\" = \"Delete for Everyone\";\n\n// Edit message\n\"message.menu.edit.title\" = \"Edit\";\n\n// Accept connection request\n\"profile.connection_request_dialog.title\" = \"Accept?\";\n\"profile.connection_request_dialog.message\" = \"This will connect you and open the conversation with %@.\";\n\"profile.connection_request_dialog.button_cancel\" = \"Ignore\";\n\"profile.connection_request_dialog.button_connect\" = \"Connect\";\n\n// Delete group\n\"conversation.delete_request_dialog.title\" = \"Delete group conversation?\";\n\"conversation.delete_request_dialog.message\" = \"This will delete the group and all content for all participants on all devices. There is no option to restore the content. All participants will be notified.\";\n\"conversation.delete_request_error_dialog.title\" = \"An error occurred while trying to delete the group %@. Please try again.\";\n\"conversation.delete_request_error_dialog.button_delete_group\" = \"Delete Group\";\n\n// Cancel connection request\n\"profile.cancel_connection_request_dialog.title\" = \"Cancel Request?\";\n\"profile.cancel_connection_request_dialog.message\" = \"Cancel your connection request to %@?\";\n\"profile.cancel_connection_request_dialog.button_no\" = \"No\";\n\"profile.cancel_connection_request_dialog.button_yes\" = \"Yes\";\n\n// Unblock button\n\"profile.block_button_title\" = \"Block\u2026\";\n\"profile.unblock_button_title\" = \"Unblock\u2026\";\n\n// Favorite button\n\"profile.favorite_button_title\" = \"Add to Favorites\";\n\"profile.unfavorite_button_title\" = \"Remove from Favorites\";\n\n\"profile.block_button_title_action\" = \"Block\";\n\"profile.unblock_button_title_action\" = \"Unblock\";\n\n\"profile.cancel_connection_button_title\" = \"CANCEL REQUEST\";\n\"profile.connection_request_state.blocked\" = \"BLOCKED\";\n\"profile.create_conversation_button_title\" = \"Create group\";\n\"profile.open_conversation_button_title\" = \"Open conversation\";\n\n\"profile.read_receipts_enabled_memo.header\" = \"YOU HAVE ENABLED READ RECEIPTS\";\n\"profile.read_receipts_disabled_memo.header\" = \"YOU HAVE DISABLED READ RECEIPTS\";\n\"profile.read_receipts_memo.body\" = \"If both sides turn on read receipts, you can see when messages are read.\\n\\nYou can change this option in your account settings.\";\n\n\"profile.group_admin_status_memo.body\" = \"When this is on, the admin can add or remove people and services, update group settings, and change a participant's role.\";\n\n\"profile.extended_metadata.header\" = \"Information\";\n\n// User Details\n\"profile.details.title\" = \"Details\";\n\"profile.details.guest\" = \"Guest\";\n\"profile.details.group_admin\" = \"Group admin\";\n\"profile.details.partner\" = \"external\";\n\n\"profile_view.accessibility.handle\" = \"Username\";\n\"profile_view.accessibility.name\" = \"Display name\";\n\"profile_view.accessibility.team_name\" = \"Team name\";\n\n// Device list\n\"profile.devices.title\" = \"Devices\";\n\"profile.devices.fingerprint_message_unencrypted\" = \"%@ is using an old version of Wire. No devices are shown here.\";\n\"profile.devices.fingerprint_message.title\" = \"Wire gives every device a unique fingerprint. Compare them with %@ and verify your conversation.\";\n\"profile.devices.fingerprint_message.link\" = \"Why verify conversations?\";\n\n// Device detail\n\"profile.devices.detail.verify_message\" = \"Verify that this matches the fingerprint shown on %@\u2019s device.\";\n\"profile.devices.detail.verify_message.link\" = \"How do I do that?\";\n\"profile.devices.detail.show_my_device.title\" = \"Show my device fingerprint\";\n\"profile.devices.detail.reset_session.title\" = \"Reset Session\";\n\"device.verified\" = \"Verified\";\n\"device.not_verified\" = \"Not Verified\";\n\n\"device.class.legalhold\" = \"Legal Hold\";\n\"device.class.desktop\" = \"Desktop\";\n\"device.class.tablet\" = \"Tablet\";\n\"device.class.phone\" = \"Phone\";\n\"device.class.unknown\" = \"Unknown\";\n\n\"device.type.permanent\" = \"Permanent\";\n\"device.type.temporary\" = \"Temporary\";\n\"device.type.legalhold\" = \"Legal Hold\";\n\"device.type.unknown\" = \"Unknown\";\n\n// Bot\n\"participants.services.remove_integration.button\" = \"remove integration\";\n\n// Group details\n\"group_details.guest_options_cell.title\" = \"Guests and services\";\n\"group_details.guest_options_cell.enabled\" = \"On\";\n\"group_details.guest_options_cell.disabled\" = \"Off\";\n\"group_details.timeout_options_cell.title\" = \"Timed messages\";\n\"group_details.notification_options_cell.title\" = \"Notifications\";\n\"group_details.notification_options_cell.description\" = \"You can be notified about everything (including audio and video calls) or only when someone mentions you or replies to one of your messages.\";\n\"group_details.receipt_options_cell.title\" = \"Read receipts\";\n\"group_details.receipt_options_cell.description\" = \"When this is on, people can see when their messages in this conversation are read.\";\n\n\"group_details.conversation_admins_header.title\" = \"Group admins\";\n\"group_details.conversation_members_header.title\" = \"Group members\";\n\n\n// Legal hold details\n\n\"legalhold.participants.section.title\" = \"Legal hold subjects\";\n\"legalhold.header.title\" = \"Legal Hold\";\n\"legalhold.header.other_description\" = \"Legal Hold has been activated for at least one person in this conversation.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\";\n\"legalhold.header.self_description\" = \"Legal Hold has been activated for your account.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\\nYour conversation partners will be aware of the recording.\";\n\"legalhold.accessibility\" = \"Legal hold details\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Self profile\n\n// Options menu contents\n\"self.settings\" = \"Settings\";\n\"self.profile\" = \"Profile\";\n\"self.account\" = \"Account\";\n\"self.help_center\" = \"Support\";\n\"self.help_center.support_website\" = \"Wire Support Website\";\n\"self.help_center.contact_support\" = \"Contact Support\";\n\"self.about\" = \"About\";\n\"self.sign_out\" = \"Log Out\";\n\"self.report_abuse\" = \"Report Misuse\";\n\"self.voiceover.label\" = \"Profile\";\n\"self.voiceover.hint\" = \"Open profile and settings\";\n\"self.new-device.voiceover.label\" = \"Profile, new devices added\";\n\n\"self.add_phone_number\" = \"Add phone number\";\n\"self.add_email_password\" = \"Add email address and password\";\n\n\"self.accessibility.profile_photo_image\" = \"Profile picture\";\n\"self.accessibility.profile_photo_edit_button\" = \"Change profile picture\";\n\n// About screen\n\"about.tos.title\"=\"Terms of Use\";\n\"about.privacy.title\"=\"Privacy Policy\";\n\"about.license.title\" = \"License Information\";\n\"about.website.title\"=\"Wire Website\";\n\"about.copyright.title\"=\"\u00a9 Wire Swiss GmbH\";\n\n// Licenses screen\n\"about.license.project_header\" = \"Details\";\n\"about.license.open_project_button\" = \"View Project Page\";\n\"about.license.license_header\" = \"Acknowledgements\";\n\n// Self new devices\n\"self.new_device_alert.title\" = \"Your account was used on:\";\n\"self.new_device_alert.message\" = \"\\n%@\\n\\nIf you don\u2019t recognize the device above, remove it and reset your password.\";\n\"self.new_device_alert.message_plural\" = \"\\n%@\\n\\nIf you don\u2019t recognize the devices above, remove them and reset your password.\";\n\"self.new_device_alert.manage_devices\" = \"Manage devices\";\n\"self.new_device_alert.trust_devices\" = \"OK\";\n\n// Settings changed alert\n\n\"self.read_receipts_enabled.title\" = \"You have enabled read receipts\";\n\"self.read_receipts_disabled.title\" = \"You have disabled read receipts\";\n\"self.read_receipts_description.title\" = \"You can change this option in your account settings.\";\n\n// Settings - top level\n\"self.settings.create_team.title\" = \"Create a team\";\n\"self.settings.manage_team.title\" = \"Manage Team\";\n\"self.settings.add_team_or_account.title\" = \"Add Account\";\n\"self.settings.add_account.title\" = \"Add an account\";\n\n\"self.settings.add_account.error.title\" = \"Three accounts active\";\n\"self.settings.add_account.error.message\" = \"You can only be logged in with three accounts at once. Log out from one to add another.\";\n\n\"self.settings.switch_account.message\" = \"A call is active in this account.\\nSwitching accounts will hang up the current call.\";\n\"self.settings.switch_account.action\" = \"Switch anyway\";\n\n// Settings - Account details\n\"self.settings.account_section\" = \"Account\";\n\n\"self.settings.account_details_group.info.title\" = \"Info\";\n\"self.settings.account_details_group.personal.title\" = \"Personal\";\n\n\"self.settings.account_section.name.title\" = \"Name\";\n\"self.settings.account_section.email.title\" = \"Email\";\n\"self.settings.account_section.phone.title\" = \"Phone\";\n\"self.settings.account_section.handle.title\" = \"Username\";\n\"self.settings.account_section.add_handle.title\" = \"Add username\";\n\n\"self.settings.account_details_group.info.footer\" = \"People can find you with these details.\";\n\"self.settings.account_details_group.personal.footer\" = \"This information is not visible .\";\n\n\"self.settings.account_details.remove_device.title\" = \"Remove Device\";\n\"self.settings.account_details.key_fingerprint.title\" = \"Key Fingerprint\";\n\"self.settings.account_details.remove_device.message\" = \"Your password is required to remove the device\";\n\"self.settings.account_details.remove_device.password\" = \"Password\";\n\"self.settings.account_details.remove_device.password.error\" = \"Wrong password\";\n\n\"self.settings.account_appearance_group.title\" = \"Appearance\";\n\n\"self.settings.privacy_section_group.title\" = \"Privacy\";\n\"self.settings.enable_read_receipts.title\" = \"Send Read Receipts\";\n\"self.settings.privacy_section_group.subtitle\" = \"When this is off, you won\u2019t be able to see read receipts from other people.\\n\\nThis setting does not apply to group conversations.\";\n\n\"self.settings.encrypt_messages_at_rest.title\" = \"Encrypt messages at rest\";\n\n\"self.settings.account_picture_group.picture\" = \"Picture\";\n\"self.settings.account_picture_group.color\" = \"Color\";\n\n\"self.settings.account_personal_information_group.title\" = \"Personal Information\";\n\n\"self.settings.account_picture_group.theme\" = \"Theme\";\n\n\"self.settings.device_details.fingerprint.subtitle\" = \"Wire gives every device a unique fingerprint. Compare them and verify your devices and conversations.\";\n\"self.settings.device_details.reset_session.subtitle\" = \"If fingerprints don\u2019t match, reset the session to generate new encryption keys on both sides.\";\n\"self.settings.device_details.remove_device.subtitle\" = \"Remove this device if you have stopped using it. You will be logged out of this device immediately.\";\n\"self.settings.device_details.reset_session.success\" = \"The session has been reset\";\n\n\"self.settings.account_details.actions.title\" = \"Actions\";\n\n\"self.settings.account_details.delete_account.title\" = \"Delete Account\";\n\n\"self.settings.account_details.delete_account.alert.title\" = \"Delete Account\";\n\"self.settings.account_details.delete_account.alert.message\" = \"We will send you a message via email or SMS. Follow the link to permanently delete your account.\";\n\n\"self.settings.account_details.log_out.alert.title\" = \"Log out\";\n\"self.settings.account_details.log_out.alert.message\" = \"Your message history will be erased on this device.\";\n\"self.settings.account_details.log_out.alert.password\" = \"Password\";\n\n// Settings - Personal information\n\"self.settings.privacy_analytics_section.title\" = \"Usage and Crash Reports\";\n\n// Crash\n\"self.settings.privacy_crash.title\" = \"Send anonymous crash data\";\n\"self.settings.privacy_crash_menu.description.title\" = \"Send anonymous crash reports and basic data like version number and operating system to help Wire identify and solve issues in the app.\";\n\n// Analytics\n\"self.settings.privacy_analytics.title\" = \"Send anonymous usage data\";\n\"self.settings.privacy_analytics_menu.description.title\" = \"Usage data allows Wire to understand how the app is being used and how it can be improved. The data is anonymous and does not include the content of your communications (such as messages, files or calls).\";\n\n\"self.settings.receiveNews_and_offers.title\" = \"Receive Newsletter\";\n\"self.settings.receiveNews_and_offers.description.title\" = \"Receive news and product updates from Wire via email.\";\n\n\n\n// Change Username\n\n\"self.settings.account_section.handle.change.title\" = \"Username\";\n\"self.settings.account_section.handle.change.save\" = \"Save\";\n\"self.settings.account_section.handle.change.footer\" = \"At least 2 characters. a\u2014z, 0\u20149, and  '.', '-', '_'  only.\";\n\"self.settings.account_section.handle.change.footer.unavailable\" = \"Already taken\";\n\n\"self.settings.account_section.handle.change.failure_alert.title\" = \"Unable to set username\";\n\"self.settings.account_section.handle.change.failure_alert.message\" = \"There was an error setting your username. Please try again.\";\n\n// Change Email\n\n\"self.settings.account_section.email.change.title\" = \"Email\";\n\"self.settings.account_section.email.change.save\" = \"Save\";\n\n\"self.settings.account_section.email.change.verify.title\" = \"Verify email\";\n\"self.settings.account_section.email.change.verify.description\" = \"Check your email inbox and follow the instructions.\";\n\"self.settings.account_section.email.change.verify.resend\" = \"Resend to %@\";\n\n\"self.settings.account_section.email.change.resend.title\" = \"Email resent\";\n\"self.settings.account_section.email.change.resend.message\" = \"Confirmation email was resent to %@. Check your email inbox and follow the instructions.\";\n\n// Change Phone Number\n\n\"self.settings.account_section.phone_number.change.title\" = \"Phone\";\n\"self.settings.account_section.phone_number.change.save\" = \"Save\";\n\"self.settings.account_section.phone_number.change.remove\" = \"Remove Phone Number\";\n\n\"self.settings.account_section.phone_number.change.remove.action\" = \"Remove Phone Number\";\n\n\"self.settings.account_section.phone_number.change.verify.save\" = \"Save\";\n\"self.settings.account_section.phone_number.change.verify.title\" = \"Verify\";\n\"self.settings.account_section.phone_number.change.verify.description\" = \"Enter the verification code we sent to: %@.\";\n\n\"self.settings.account_section.phone_number.change.verify.code_placeholder\" = \"Enter code\";\n\"self.settings.account_section.phone_number.change.verify.resend\" = \"Resend Code\";\n\"self.settings.account_section.phone_number.change.verify.resend_description\" = \"No code showing up?\\nYou can request a new one every 30 seconds.\";\n\n\"self.settings.account_section.phone_number.change.resend.title\" = \"Code resent\";\n\"self.settings.account_section.phone_number.change.resend.message\" = \"Verification code was resent to %@.\";\n\n// Chat alerts\n\"self.settings.notifications.push_notification.title\" = \"Notifications\";\n\"self.settings.notifications.push_notification.toogle\" = \"Message Previews\";\n\"self.settings.notifications.push_notification.footer\" = \"Sender name and message on the lock screen and in Notification Center.\";\n\n\"self.settings.notifications.chat_alerts.toggle\" = \"Message Banners\";\n\"self.settings.notifications.chat_alerts.footer\" = \"New messages in other conversations.\";\n\n\"self.settings.sound_menu.sounds.title\" = \"Sounds\";\n\"self.settings.sound_menu.ringtone.title\" = \"Ringtone\";\n\"self.settings.sound_menu.message.title\" = \"Text Tone\";\n\"self.settings.sound_menu.ping.title\" = \"Ping\";\n\"self.settings.sound_menu.ringtones.title\" = \"Ringtones\";\n\"self.settings.sound_menu.sounds.wire_sound\" = \"Wire\";\n\"self.settings.sound_menu.sounds.none\" = \"None\";\n\n\"self.settings.callkit.title\" = \"Calls\";\n\"self.settings.callkit.caption\" = \"Share with iOS\";\n\"self.settings.callkit.description\" = \"Show Wire calls on the lock screen and in iOS call history. If iCloud is enabled, call history is shared with Apple.\";\n\n\"self.settings.vbr.title\" = \"Variable Bit Rate Encoding\";\n\"self.settings.vbr.description\" = \"This makes audio calls use less data and work better on slower networks. Turn off to use Constant Bitrate Encoding.\";\n\n\"self.settings.sound_menu.sounds.wire_call\" = \"Wire Call\";\n\"self.settings.sound_menu.sounds.wire_message\" = \"Wire Message\";\n\"self.settings.sound_menu.sounds.wire_ping\" = \"Wire Ping\";\n\n// By popular demand\n\"self.settings.popular_demand.title\" = \"By popular demand\";\n\"self.settings.popular_demand.send_button.title\" = \"Send Button\";\n\"self.settings.popular_demand.send_button.footer\" = \"Disable to send via the return key.\";\n\"self.settings.popular_demand.dark_mode.footer\" = \"Switch between dark and light theme.\";\n\n// dark theme\n\"dark_theme.option.dark\" = \"Dark\";\n\"dark_theme.option.light\" = \"Light\";\n\"dark_theme.option.system\" = \"Sync with system settings\";\n\n// Open in\n\"self.settings.external_apps.header\" = \"Open With\";\n\n\"self.settings.link_options.twitter.title\" = \"Tweets\";\n\"self.settings.link_options.maps.title\" = \"Locations\";\n\"self.settings.link_options.browser.title\" = \"Browser\";\n\n\"open_link.twitter.option.default\" = \"Browser / Twitter\";\n\"open_link.twitter.option.tweetbot\" = \"Tweetbot\";\n\"open_link.twitter.option.twitterrific\" = \"Twitterrific\";\n\n\"open_link.maps.option.apple\" = \"Maps\";\n\"open_link.maps.option.google\" = \"Google Maps\";\n\"open_link.maps.footer\" = \"Some location links will always open in Apple Maps.\";\n\n\"open_link.browser.option.safari\" = \"Safari\";\n\"open_link.browser.option.chrome\" = \"Chrome\";\n\"open_link.browser.option.firefox\" = \"Firefox\";\n\"open_link.browser.option.snowhaze\" = \"SnowHaze\";\n\"open_link.browser.option.brave\" = \"Brave\";\n\n// Sound alerts (TO BE UPDPATED)\n\"self.settings.sound_menu.title\" = \"Sound Alerts\";\n\"self.settings.sound_menu.no_sounds.title\" = \"None\";\n\"self.settings.sound_menu.all_sounds.title\" = \"All\";\n\"self.settings.sound_menu.mute_while_talking.title\" = \"First message and pings\";\n\n// Developer options\n\"self.settings.developer_options.title\" = \"Developer Options\";\n\"self.settings.apns_logging.title\" = \"APNS Logging\";\n\n// Privacy (visibility) options\n\"self.settings.options_menu.title\" = \"Options\";\n\n\"self.settings.privacy_contacts_section.title\" = \"Contacts\";\n\"self.settings.privacy_contacts_menu.settings_button.title\" = \"Open Contacts Settings\";\n\"self.settings.privacy_contacts_menu.description_disabled.title\" = \"This helps you connect with others. We anonymize all the information and do not share it with anyone else. Allow access via Settings > Privacy > Contacts.\";\n\n\"self.settings.privacy_security.lock_app\" = \"Lock With Passcode\";\n\"self.settings.privacy_security.lock_app.subtitle.lock_description\" = \"Lock Wire after %@ in the background.\";\n\"self.settings.privacy_security.lock_app.subtitle.touch_id\" = \"Unlock with Touch ID or enter your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.face_id\" = \"Unlock with Face ID or enter your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.none\" = \"Unlock by entering your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.custom_app_lock_reminder\" = \"If forgotten, your passcode can not be recovered.\";\n\n\"self.settings.privacy_security.lock_app.description\" = \"Unlock Wire\";\n\"self.settings.privacy_security.lock_password.description.unlock\" = \"Unlock with your password.\";\n\"self.settings.privacy_security.lock_password.description.wrong_password\" = \"Wrong password. Please try again.\";\n\"self.settings.privacy_security.lock_password.description.wrong_offline_password\" = \"Wrong password. If you recently changed your password, connect to the internet and try again.\";\n\n\"self.settings.privacy_security.disable_link_previews.title\" = \"Create Link Previews\";\n\"self.settings.privacy_security.disable_link_previews.footer\" = \"Previews may still be shown for links from other people.\";\n\n\"self.settings.privacy_analytics_menu.devices.title\" = \"Devices\";\n\n\"self.settings.privacy.clear_history.title\" = \"Clear History\";\n\"self.settings.privacy.clear_history.subtitle\" = \"This will permanently erase the content of all your conversations.\";\n\n\"self.settings.advanced.title\" = \"Advanced\";\n\"self.settings.advanced.troubleshooting.title\" = \"Troubleshooting\";\n\"self.settings.advanced.troubleshooting.submit_debug.title\" = \"Debug Report\";\n\"self.settings.advanced.debugging_tools.title\" = \"Debugging Tools\";\n\"self.settings.advanced.debugging_tools.first_unread_conversation.title\" = \"Find first unread conversation\";\n\"self.settings.advanced.debugging_tools.show_user_id.title\" = \"Show my user ID\";\n\"self.settings.advanced.debugging_tools.enter_debug_command.title\" = \"Enter debug command\";\n\"self.settings.advanced.troubleshooting.submit_debug.subtitle\" = \"This information helps Wire Support diagnose calling problems and improve the overall app experience.\";\n\"self.settings.advanced.reset_push_token.title\" = \"Reset Push Notifications Token\";\n\"self.settings.advanced.reset_push_token.subtitle\" = \"If you experience problems with push notifications, Wire Support may ask you to reset this token.\";\n\"self.settings.advanced.reset_push_token_alert.title\" = \"Push token has been reset\";\n\"self.settings.advanced.reset_push_token_alert.message\" = \"Notifications will be restored in a few seconds.\";\n\"self.settings.advanced.version_technical_details.title\" = \"Version Technical Details\";\n\n// data usage permissions options\n\"self.settings.account.data_usage_permissions.title\" = \"Data Usage Permissions\";\n\n// Technical Report\n\"self.settings.technical_report_section.title\" = \"Technical Report\";\n\"self.settings.technical_report.send_report\" = \"Send report to Wire\";\n\"self.settings.technical_report.mail.subject\" = \"Wire Debug Report\";\n\"self.settings.technical_report.include_log\" = \"Include detailed log\";\n\"self.settings.technical_report.privacy_warning\" = \"Detailed logs could contain personal data\";\n\"self.settings.technical_report.no_mail_alert\" = \"No mail client detected. Tap \\\"OK\\\" and send logs manually to: \";\n\n// Password reset\n\"self.settings.password_reset_menu.title\" = \"Reset Password\";\n\n// Invite from Settings\n\"self.settings.invite_friends.title\" = \"Invite people\";\n\n// History backup\n\n\"self.settings.conversations.title\" = \"History\";\n\"self.settings.history_backup.title\" = \"Back Up Conversations\";\n\"self.settings.history_backup.description\" = \"Create a backup to preserve your conversation history. You can use this to restore history if you lose your device or switch to a new one.\\n\\nChoose a strong password to protect the backup file.\";\n\"self.settings.history_backup.action\" = \"Back Up Now\";\n\"self.settings.history_backup.error.title\" = \"Error\";\n\n\"self.settings.history_backup.set_email.title\" = \"Set an email and password.\";\n\"self.settings.history_backup.set_email.message\" = \"You need an email and a password in order to back up your conversation history. You can do it from the account page in Settings.\";\n\n// History backup password\n\n\"self.settings.history_backup.password.title\" = \"Set Password\";\n\"self.settings.history_backup.password.cancel\" = \"Cancel\";\n\"self.settings.history_backup.password.next\" = \"Next\";\n\"self.settings.history_backup.password.placeholder\" = \"Password\";\n\"self.settings.history_backup.password.description\" = \"The backup will be compressed and encrypted with the password you set here.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// System status\n\"system_status_bar.no_internet.title\" = \"No Internet\";\n\"system_status_bar.no_internet.explanation\" = \"There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\";\n\"system_status_bar.poor_connectivity.title\" = \"Slow Internet, can\u2019t call now\";\n\"system_status_bar.poor_connectivity.explanation\" = \"We can\u2019t guarantee voice quality. Connect to Wi-Fi or try changing your location.\";\n\n// View user profile and options menu & text field validation\n\"name.placeholder\" = \"Your full name\";\n\"name.guidance.tooshort\" = \"At least 2 characters\";\n\"name.guidance.toolong\" = \"Too many characters\";\n\n\"email.placeholder\" = \"Email\";\n\"email.guidance.invalid\" = \"Invalid email address\";\n\"email.guidance.tooshort\" = \"Email is too short\";\n\"email.guidance.toolong\" = \"Too many characters\";\n\n\"password.placeholder\" = \"Password\";\n\"password.guidance.toolong\" = \"Too many characters\";\n\n\"phone.guidance.invalid\" = \"Invalid phone number\";\n\"phone.guidance.tooshort\" = \"Phone number is too short\";\n\"phone.guidance.toolong\" = \"Too many characters\";\n\n// Landing screen\n\n\"landing.header\" = \"Wire. Add your Account.\";\n\"landing.welcome_message\" = \"Trying to create a Pro or Enterprise account for your business or organization?\";\n\"landing.welcome_submessage\" = \"Unfortunately, that's not possible in the app - once you have created your team, you can log in here\";\n\"landing.create_account.title\" = \"Create a Wire personal account\";\n\"landing.create_account.infotitle\" = \"Chat with friends and family?\";\n\"landing.create_account.subtitle\" = \"Chat privately with groups of friends\\U00A0and\\U00A0family\";\n\"landing.create_team.title\" = \"Pro\";\n\"landing.create_team.subtitle\" = \"Secure collaboration for businesses, institutions and professional\\U00A0organizations\";\n\"landing.login.hints\" = \"Already have an account?\";\n\"landing.login.button.title\" = \"Log in\";\n\"landing.login.email.button.title\" = \"Log in with email\";\n\"landing.login.enterprise.button.title\" = \"Enterprise log in\";\n\"landing.login.sso.button.title\" = \"Log in with SSO\";\n\n\"landing.custom_backend.title\" = \"Connected to \\\"%@\\\"\";\n\"landing.custom_backend.more_info.button.title\" = \"Show more\";\n\"landing.custom_backend.more_info.alert.title\" = \" You are connected to a third-party server: %@\";\n\n// Create team\n\n\"team.name.headline\" = \"Name your team\";\n\"team.name.subheadline\" = \"You can always change it later.\";\n\"team.name.textfield.placeholder\" = \"team name\";\n\"team.name.textfield.accessibility\" = \"Set team name\";\n\"team.name.whatiswireforteams\" = \"What is Wire Pro?\";\n\n\"team.email.headline\" = \"Your account\";\n\"team.email.subheadline\" = \"Enter your work email address.\";\n\"team.email.textfield.placeholder\" = \"Your company email\";\n\"team.email.button.learn_more\" = \"Learn More\";\n\n\"team.activation_code.headline\" = \"You\u2019ve got mail\";\n\"team.phone_activation_code.headline\" = \"Verification\";\n\"team.activation_code.subheadline\" = \"Enter the verification code we sent to %@.\";\n\"team.activation_code.button.resend\" = \"Resend code\";\n\"team.activation_code.button.change_email\" = \"Change email\";\n\"team.activation_code.button.change_phone\" = \"Change phone number\";\n\n\"team.full_name.headline\" = \"Your name\";\n\"team.full_name.textfield.placeholder\" = \"Full name\";\n\"team.full_name.textfield.accessibility\" = \"Set full name\";\n\n\"team.password.headline\" = \"Set password\";\n\n\"verification.code_label\" = \"Six-digit code. Text field.\";\n\"verification.code_hint\" = \"Double tap to enter the code.\";\n\n// Invite Team Members\n\n\"team.invite.header.title\" = \"Build your team\";\n\"team.invite.header.subtitle\" = \"Your Wire team is ready to go. Invite your colleagues as members.\";\n\"team.invite.textfield.placeholder\" = \"Colleague's email\";\n\"team.invite.textfield.accesibility\" = \"Enter email address for colleague to invite.\";\n\"team.invite.learn_more.title\" = \"Learn more\";\n\"team.invite.top_bar.skip\" = \"Skip\";\n\"team.invite.top_bar.done\" = \"Done\";\n\n// Team Invite Errors\n\"team.invite.error.generic\" = \"Something went wrong, please try again\";\n\"team.invite.error.already_registered\" = \"This email address is already in use\";\n\"team.invite.error.already_invited\" = \"This email has already been invited\";\n\"team.invite.error.too_many_invitations\" = \"The maximum number of invitations has been sent\";\n\"team.invite.error.no_internet\" = \"No Internet Connection\";\n\n// Guest Room\n\n\"guest_room.allow_guests.title\" = \"Allow guests and services\";\n\"guest_room.allow_guests.subtitle\" = \"Open this conversation to services and people outside your team.\";\n\"guest_room.remove_guests.message\" = \"Current guests and services will be removed from the conversation. New guests and services will not be allowed.\";\n\"guest_room.remove_guests.action\" = \"Remove\";\n\"guest_room.revoke_link.message\" = \"New guests will not be able to join with this link. Current guests will still have access.\";\n\"guest_room.revoke_link.action\" = \"Revoke Link\";\n\n\"guest_room.error.generic.title\" = \"Something went wrong\";\n\"guest_room.error.generic.message\" = \"Check your connection and try again\";\n\n\"guest_room.link.header.title\" = \"Invite others with a link\";\n\"guest_room.link.header.subtitle\" = \"Anyone with the link can join the conversation, even if they don\u2019t have Wire.\";\n\n\"guest_room.link.button.title\" = \"Create Link\";\n\n\"guest_room.actions.copy_link\" = \"Copy Link\";\n\"guest_room.actions.copied_link\" = \"Link Copied!\";\n\"guest_room.actions.share_link\" = \"Share Link\";\n\"guest_room.actions.revoke_link\" = \"Revoke Link\u2026\";\n\n\"guest_room.share.message\" = \"Join me in a conversation on Wire:\\n%@\";\n\n\"guest_room.expiration.hours_left\" = \"%@h left\";\n\"guest_room.expiration.less_than_minutes_left\" = \"Less than %@m left\";\n\n// Registration\n\n\"registration.launch_back_button.label\" = \"Back\";\n\n\"registration.title\" = \"Registration\";\n\"registration.close_email_invitation_button.email_title\" = \"Use another email\";\n\"registration.close_email_invitation_button.phone_title\" = \"Register by phone\";\n\"registration.close_phone_invitation_button.email_title\" = \"Register by email\";\n\"registration.close_phone_invitation_button.phone_title\" = \"Use another phone\";\n\n\"registration.register_by_phone\" = \"Phone\";\n\"registration.register_by_email\" = \"Email\";\n\n\"registration.enter_phone_number.title\" = \"Edit phone number\";\n\"registration.enter_phone_number.placeholder\" = \"Phone number\";\n\n\"registration.verify_phone_number.instructions\" = \"Enter the verification code we sent to %@\";\n\"registration.verify_phone_number.resend\" = \"Resend\";\n\"registration.verify_phone_number.resend_placeholder\" = \"No code showing up?\\nYou can request a new one in %.0f seconds\";\n\n\"registration.verify_email.instructions\" = \"We sent an email to %@.\\n Follow the link to verify your address.\";\n\"registration.verify_email.resend.instructions\" = \"Didn\u2019t get the message?\";\n\"registration.verify_email.resend.button_title\" = \"Re-send\";\n\n\"registration.no_history.hero\" = \"It\u2019s the first time you\u2019re using Wire on this device.\";\n\"registration.no_history.subtitle\" = \"For privacy reasons, your conversation history will not appear here.\";\n\"registration.no_history.got_it\" = \"OK\";\n\"registration.no_history.restore_backup\" = \"Restore from backup\";\n\n\"registration.alert.account_exists.title\" = \"Account Exists\";\n\"registration.alert.account_exists.message_phone\" = \"The phone number you used to register is already linked to an account.\\n\\nUse another phone number, or try to log in if you own this account.\";\n\"registration.alert.account_exists.message_email\" = \"The email address you used to register is already linked to an account.\\n\\n Use another email address, or try to log in if you own this account.\";\n\"registration.alert.change_email_action\" = \"Register with Another Email\";\n\"registration.alert.change_phone_action\" = \"Register with Another Number\";\n\"registration.alert.change_signin_action\" = \"Log In\";\n\n// Restore History Warning Alert\n\"registration.no_history.restore_backup_warning.title\" = \"Restore history\";\n\"registration.no_history.restore_backup_warning.message\" = \"The backup contents will replace the conversation history on this device.\\nYou can only restore history from a backup of the same platform.\";\n\"registration.no_history.restore_backup_warning.proceed\" = \"Choose Backup File\";\n\n/// Restore History Failure Alerts\n\"registration.no_history.restore_backup_failed.try_again\" = \"Try again\";\n\n// Generic\n\"registration.no_history.restore_backup_failed.title\" = \"Something went wrong\";\n\"registration.no_history.restore_backup_failed.message\" = \"Your history could not be restored.\";\n\n// Wrong Account\n\"registration.no_history.restore_backup_failed.wrong_account.title\" = \"Incompatible backup\";\n\"registration.no_history.restore_backup_failed.wrong_account.message\" = \"You cannot restore history from a different account.\";\n\n// Incompatible Version\n\"registration.no_history.restore_backup_failed.wrong_version.title\" = \"Incompatible backup\";\n\"registration.no_history.restore_backup_failed.wrong_version.message\" = \"This backup was created by a newer or outdated version of Wire and cannot be restored here.\";\n\n// SSO \u2013 Company Login\n\"login.sso.alert.title\" = \"Enterprise Login\";\n\"login.sso.alert.message.sso_and_email\" = \"Please enter your email or SSO code. If your email matches an enterprise installation of Wire, this app will connect to that server.\";\n\"login.sso.alert.message.sso_only\" = \"Please enter your SSO code:\";\n\"login.sso.alert.action\" = \"Log in\";\n\"login.sso.alert.text_field.placeholder.sso_and_email\" = \"email or SSO access code\";\n\"login.sso.alert.text_field.placeholder.sso_only\" = \"SSO access code\";\n\n\"login.sso.start_error_title\" = \"Cannot Start Enterprise Login\";\n\"login.sso.link_error_message\" = \"This link is not valid. Please contact your administrator to resolve the issue.\";\n\n\"login.sso.error.offline.alert.message\" = \"Please check your Internet connection and try again.\";\n\"login.sso.error.alert.message\" = \"Please contact your team administrator for details (error %@).\";\n\n\"login.sso.error.alert.invalid_code.message\" = \"Please verify your company SSO access code and try again.\";\n\"login.sso.error.alert.invalid_status.message\" = \"Please try again later (error %@).\";\n\"login.sso.error.alert.invalid_format.message.sso_only\" = \"Please enter a valid SSO access code\";\n\"login.sso.error.alert.invalid_format.message.sso_and_email\" = \"Please enter a valid email or SSO access code\";\n\"login.sso.error.alert.domain_not_registered.message\" = \"This email cannot be used for enterprise login. Please enter the SSO code to proceed.\";\n\"login.sso.error.alert.domain_associated_with_wrong_server.message\" = \"This email is linked to a different server, but the app can only be connected to one server at a time. Please log out of all Wire accounts on this device and try to login again.\";\n\"login.sso.error.alert.unknown.message\" = \"Please try again later.\";\n\"login.sso.backend_switch.title\" = \"Redirecting...\";\n\"login.sso.backend_switch.subtitle\" = \"You are being redirected to your dedicated enterprise service.\";\n\"login.sso.backend_switch.information\" = \"Provide credentials only if you're sure this is your organization's log in.\";\n\n\n// Restore In Progress Loading Titles\n\"registration.no_history.restore_backup.restoring\" = \"Restoring\u2026\";\n\"registration.no_history.restore_backup.completed\" = \"Completed\";\n\n// Password Import Alert\n\"registration.no_history.restore_backup.password.title\" = \"This backup is password protected.\";\n\"registration.no_history.restore_backup.password.message\" = \"The password is required to restore this backup.\";\n\"registration.no_history.restore_backup.password.placeholder\" = \"Password\";\n\"registration.no_history.restore_backup.password_error.title\" = \"Wrong Password\";\n\n\"registration.no_history.logged_out.hero\" = \"You\u2019ve used Wire on this device before.\";\n\"registration.no_history.logged_out.subtitle\" = \"Messages sent in the meantime will not appear.\";\n\"registration.no_history.logged_out.got_it\" = \"OK\";\n\n\"registration.enter_name.title\" = \"Edit Name\";\n\"registration.enter_name.hero\" = \"What should we call you?\";\n\"registration.enter_name.placeholder\" = \"Your full name\";\n\n\"registration.terms_of_use.title\" = \"Welcome to Wire.\";\n\"registration.terms_of_use.terms\" = \"By continuing you agree to the Wire Terms of Use.\";\n\"registration.terms_of_use.terms.link\" = \"Terms of Use\";\n\"registration.terms_of_use.agree\" = \"I agree\";\n\n\"registration.terms_of_use.terms.title\" = \"Terms of Use\";\n\"registration.terms_of_use.terms.message\" = \"Please accept the Terms of Use to continue.\";\n\"registration.terms_of_use.terms.view\" = \"View\";\n\"registration.terms_of_use.accept\" = \"Accept\";\n\n\"registration.email_flow.title\" = \"Register by Email\";\n\"registration.email_flow.email_step.title\" = \"Edit Details\";\n\n\"registration.country_select.title\" = \"Country\";\n\n\"registration.share_contacts.hero.title\" = \"Find people on Wire\";\n\"registration.share_contacts.hero.paragraph\"  = \"Share your contacts so we can connect you with others. We anonymize all information and do not share it with anyone else.\";\n\"registration.share_contacts.find_friends_button.title\" = \"Share contacts\";\n\"registration.share_contacts.skip_button.title\" = \"Not now\";\n\n\"registration.address_book_access_denied.hero.title\" = \"Wire does not have access to your contacts.\";\n\"registration.address_book_access_denied.hero.paragraph1\" = \"Wire helps find your friends if you share your contacts.\";\n\"registration.address_book_access_denied.hero.paragraph2\" = \"To enable access tap Settings and turn on Contacts.\";\n\"registration.address_book_access_denied.settings_button.title\" = \"Settings\";\n\"registration.address_book_access_denied.maybe_later_button.title\" = \"Maybe later\";\n\n\"registration.push_access_denied.hero.title\" = \"Never miss a call or a message.\";\n\"registration.push_access_denied.hero.paragraph1\" = \"Enable Notifications in Settings.\";\n\"registration.push_access_denied.settings_button.title\" = \"Go to Settings\";\n\"registration.push_access_denied.maybe_later_button.title\" = \"Maybe later\";\n\n\"registration.personal.title\" = \"Create an account\";\n\"registration.signin.title\" = \"Log in\";\n\"registration.signin.too_many_devices.title\" = \"Too Many Devices\";\n\"registration.signin.too_many_devices.subtitle\" = \"Remove one of your other devices to start using Wire on this one.\";\n\"registration.signin.too_many_devices.manage_button.title\" = \"Manage devices\";\n\"registration.signin.too_many_devices.sign_out_button.title\" = \"Log out\";\n\n\"registration.signin.too_many_devices.manage_screen.title\" = \"Remove a Device\";\n\n\"registration.signin.alert.password_needed.title\" = \"Password needed\";\n\"registration.signin.alert.password_needed.message\" = \"Please enter your Password in order to log in.\";\n\n\"registration.devices.title\" = \"Devices\";\n\"registration.devices.active_list_header\" = \"Active\";\n\"registration.devices.current_list_header\" = \"Current\";\n\"registration.devices.active_list_subtitle\" = \"If you don\u2019t recognize a device above, remove it and reset your password.\";\n\"registration.devices.activated\"  = \"Activated %@\";\n\"registration.devices.id\" = \"ID:\";\n\n\"signin.use_email.label\" = \"Login with Email\";\n\"signin.use_phone.label\" = \"Login with Phone\";\n\"signin.forgot_password\" = \"Forgot password?\";\n\"signin.use_one_password.label\" = \"Log in with 1Password\";\n\"signin.use_one_password.hint\" = \"Double tap to fill your password with 1Password\";\n\"signin.confirm\" = \"Log In\";\n\"signin.company_idp.button.title\" = \"For Companies\";\n\n\"signin_logout.subheadline\" = \"Your session expired. You need to log in again to continue.\";\n\"signin_logout.email.subheadline\" = \"Your session expired. Enter your email address and password to continue.\";\n\"signin_logout.phone.subheadline\" = \"Your session expired. Enter your phone number to continue.\";\n\"signin_logout.sso.subheadline\" = \"Your session expired. Log in with your enterprise account to continue.\";\n\"signin_logout.sso.buton\" = \"Enterprise log in\";\n\n\"signin.email.missing_password.subtitle\" = \"Enter your email address and password to continue.\";\n\"signin.phone.missing_password.subtitle\" = \"Enter your phone number to continue.\";\n\n\"registration.phone_country\" = \"Country\";\n\"registration.phone_code\" = \"Country Code\";\n\"registration.phone_country.hint\" = \"Double tap to select another country.\";\n\"registration.phone_code.hint\" = \"Double tap to select another country code.\";\n\"registration.phone.verify.label\" = \"Verify phone number\";\n\"registration.phone.verify_field.label\" = \"Verification Code\";\n\n\"registration.add_phone_number.hero.title\" = \"Add phone number\";\n\"registration.add_phone_number.hero.paragraph\" = \"This helps us find people you may know. We never share it.\";\n\"registration.add_phone_number.skip_button.title\" = \"Not now\";\n\n\"registration.add_email_password.hero.title\" = \"Add your email and password\";\n\"registration.add_email_password.hero.paragraph\" = \"This lets you use Wire on multiple devices.\";\n\n\"registration.email_invitation.title\" = \"Invitation\";\n\"registration.email_invitation.hero.title\" = \"Hello, %@\";\n\"registration.email_invitation.hero.paragraph\" = \"Choose a password to create your account.\";\n\n\"registration.phone_invitation.title\" = \"Invitation\";\n\"registration.phone_invitation.hero.title\" = \"Hello, %@\";\n\"registration.phone_invitation.hero.paragraph\" = \"You are one step away from creating your account.\";\n\n\"registration.confirm\" = \"Sign Up\";\n\"registration.phone.country_code.hint\" = \"Double tap to use a phone number from this country.\";\n\n\"error.name_and_email\" = \"Please enter your full name and a valid email address\";\n\"error.full_name\" = \"Please enter your full name\";\n\"error.email\" = \"Please enter a valid email address\";\n\"error.input.too_long\" = \"Please enter a shorter username\";\n\"error.input.too_short\" = \"Please enter a longer username\";\n\"error.email.invalid\" = \"Please enter a valid email address\";\n\"error.phone.invalid\" = \"Please enter a valid phone number\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Username takeover screen\n\"registration.select_handle.takeover.subtitle\" = \"Claim your unique name on Wire.\";\n\"registration.select_handle.takeover.subtitle_link\" = \"Learn more\";\n\n\"registration.select_handle.takeover.choose_own\" = \"Choose yours\";\n\"registration.select_handle.takeover.keep_suggested\" = \"Keep this one\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// ZMUserSessionErrorCode mapping. Used during registration and profile edit\n\"error.user.unkown_error\" = \"Something went wrong, please try again\";\n\"error.user.needs_credentials\" = \"Please verify your details and try again.\";\n\"error.user.domain_blocked\" = \"This email requires a team invitation. Contact your organization's IT administrators to receive an invite.\";\n\"error.user.invalid_credentials\" = \"Please verify your details and try again.\";\n\"error.user.account_pending_activation\" = \"The account you are trying access is pending activation. Please verify your details.\";\n\"error.user.network_error\" = \"There seems to be a problem with your network. Please try again later.\";\n\"error.user.email_is_taken\" = \"The email address you provided has already been registered. Please try again.\";\n\"error.user.phone_is_taken\" = \"The phone number you provided has already been registered. Please try again.\";\n\"error.user.phone_code_invalid\" = \"Please enter a valid code\";\n\"error.user.phone_code_too_many\" = \"We already sent you a code via SMS. Tap Resend after 10 minutes to get a new one.\";\n\"error.user.registration_unknown_error\" = \"Something went wrong. Please try again.\";\n\"error.user.device_deleted_remotely\" = \"You have been logged out from another device.\";\n\"error.user.last_identity_cant_be_deleted\" = \"Either an email address or a phone number is required.\";\n\"error.user.account_suspended\" = \"This account is no longer authorized to log in.\";\n\"error.user.account_limit_reached\" = \"You can\u2019t add more than 3 accounts.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Those are caught by the UI without involving the SE validation. Basically very similar to ZMUserSessionErrorCode onces\n\"error.updating_password\" = \"Couldn\u2019t update your password.\";\n\n\"error.group_call.too_many_members_in_conversation.title\" = \"Too many people to call\";\n\"error.group_call.too_many_members_in_conversation\" = \"Calls work in conversations with up to %d people.\";\n\"error.group_call.too_many_participants_in_the_call.title\" = \"The call is full\";\n\"error.group_call.too_many_participants_in_the_call\" = \"There\u2019s only room for %d participants in here.\";\n\"error.call.gsm_ongoing.title\" = \"Cellular call\";\n\"error.call.gsm_ongoing\" = \"Please cancel the cellular call before calling on Wire.\";\n\"error.call.general.title\" = \"Call error\";\n\"error.call.general\" = \"Please try calling again in several minutes.\";\n\"error.call.slow_connection.title\" = \"Slow connection\";\n\"error.call.slow_connection\" = \"You might experience issues during the call\";\n\"error.call.slow_connection.call_anyway\" = \"Call anyway\";\n\n\"error.invite.no_email_provider\" = \"Please configure your email client to be able to send the invites via email\";\n\"error.invite.no_messaging_provider\" = \"Please configure your SMS to be able to send the invites via SMS\";\n\n\"error.conversation.title\" = \"Error\";\n\"error.conversation.cannot_add\" = \"Adding the participant failed\";\n\"error.conversation.cannot_remove\" = \"Removing the participant failed\";\n\"error.conversation.too_many_members\" = \"The conversation is full\";\n\"error.conversation.offline\" = \"There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\";\n\n\"sketchpad.initial_hint\" = \"Tap colors to change brush size\";\n\n\"migration.please_wait_message\" = \"One moment, please\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Those are used by the backend to localize APNS\n\"push.notification.new_user\" = \"%@ joined Wire\";\n\"push.notification.new_message\" = \"New message\";\n\n\n//Force Update\n\"force.update.title\" = \"Update necessary\";\n\"force.update.message\" = \"You are missing out on new features.\\nGet the latest version of Wire in the App Store.\";\n\"force.update.ok_button\" = \"Go to App Store\";\n\n//Jailbroken alert\n\"jailbrokendevice.alert.title\" = \"Jailbreak detected\";\n\"jailbrokendevice.alert.message\" = \"For security reasons, Wire can't be used on this device. Any existing Wire data has been erased.\";\n\n// Database Loading Failure alert\n\"databaseloadingfailure.alert.title\" = \"Not Enough Storage\";\n\"databaseloadingfailure.alert.message\" = \"The database could not be loaded due to insufficient storage. Review your device storage usage and try again.\";\n\"databaseloadingfailure.alert.settings\" = \"Go to Settings\";\n\"databaseloadingfailure.alert.delete_database\" = \"Delete Database\";\n\"databaseloadingfailure.alert.delete_database.message\" = \"By deleting the database, all local data and messages for this account will be permanently deleted.\";\n\"databaseloadingfailure.alert.delete_database.continue\" = \"Continue\";\n\n// Third Party\n\"giphy.conversation.message\" = \"%@ \u00b7 via giphy.com\";\n\"giphy.conversation.random_message\" = \"via giphy.com\";\n\"giphy.error.no_more_results\" = \"no more gifs\";\n\"giphy.error.no_result\" = \"no gif found\";\n\n\"giphy.confirm\" = \"send\";\n\"giphy.cancel\" = \"cancel\";\n\"giphy.search_placeholder\" = \"Search Giphy\";\n\n\"invite_banner.title\" = \"Bring your friends to Wire!\";\n\"invite_banner.message\" = \"Enjoy calls, messages, sketches, GIFs and more in private or with groups.\";\n\"invite_banner.invite_button_title\" = \"Invite more people\";\n\n// Collections\n\"collections.section.images.title\" = \"Pictures\";\n\"collections.section.files.title\" = \"Files\";\n\"collections.section.videos.title\" = \"Videos\";\n\"collections.section.links.title\" = \"Links\";\n\"collections.section.all.button\" = \"Show all %d \u2192\";\n\"collections.section.no_items\" = \"No items in collection\";\n\"collections.image_viewer.copied.title\" = \"Picture copied\";\n\n\"collections.search.field.placeholder\" = \"Search text messages\";\n\"collections.search.no_items\" = \"No results\";\n\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Message composing / drafts\n\n\"compose.drafts.title\" = \"Messages\";\n\"compose.drafts.empty.title\" = \"No messages\";\n\"compose.drafts.empty.subtitle\" = \"Tap + to compose one\";\n\"compose.drafts.compose.title\" = \"Type a message\";\n\"compose.drafts.compose.subject.placeholder\" = \"Tap to set a subject\";\n\n\"compose.drafts.compose.delete.confirm.title\" = \"Confirm Deletion\";\n\"compose.drafts.compose.delete.confirm.message\" = \"This action will permanently delete this draft and cannot be undone.\";\n\"compose.drafts.compose.delete.confirm.action.title\" = \"Delete\";\n\n\"compose.drafts.compose.dismiss.confirm.title\" = \"Save as draft\";\n\"compose.drafts.compose.dismiss.confirm.action.title\" = \"Save\";\n\"compose.drafts.compose.dismiss.delete.action.title\" = \"Delete\";\n\n\"availability.message.cancel\" = \"Cancel\";\n\"availability.message.set_status\" = \"Set a status\";\n\"availability.accessibility_label.change_status\" = \"Change Status\";\n\"availability.accessibility_label.status\" = \"Status\";\n\n\"availability.none\" = \"None\";\n\"availability.available\" = \"Available\";\n\"availability.away\" = \"Away\";\n\"availability.busy\" = \"Busy\";\n\n\"availability.reminder.away.title\" = \"You are set to Away\";\n\"availability.reminder.away.message\" = \"You will appear as Away to other people. You will not receive notifications about any incoming calls or messages.\";\n\"availability.reminder.busy.title\" = \"You are set to Busy\";\n\"availability.reminder.busy.message\" = \"You will appear as Busy to other people. You will only receive notifications for mentions, replies, and calls in conversations that are not muted.\";\n\"availability.reminder.available.title\" = \"You are set to Available\";\n\"availability.reminder.available.message\" = \"You will appear as Available to other people. You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\";\n\"availability.reminder.none.title\" = \"No status set\";\n\"availability.reminder.none.message\" = \"You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\";\n\"availability.reminder.action.dont_remind_me\" = \"Do not display this information again\";\n\"availability.reminder.action.ok\" = \"OK\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Call Quality Survey\n\n\"calling.quality_survey.title\" = \"Call Quality Feedback\";\n\"calling.quality_survey.question\" = \"How do you rate the overall quality of the call?\";\n\"calling.quality_survey.answer.1\" = \"Bad\";\n\"calling.quality_survey.answer.2\" = \"Poor\";\n\"calling.quality_survey.answer.3\" = \"Fair\";\n\"calling.quality_survey.answer.4\" = \"Good\";\n\"calling.quality_survey.answer.5\" = \"Excellent\";\n\"calling.quality_survey.skip_button_title\" = \"Skip\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// URL Action\n\n\"url_action.confirm\" = \"Confirm\";\n\"url_action.title\" = \"Confirm URL action\";\n\"url_action.connect_to_bot.message\" = \"Would you like to connect to the bot?\";\n\n\"url_action.switch_backend.title\" = \"Connect to server\";\n\"url_action.switch_backend.message\" = \"This configuration will connect the app to a third-party server:\\n%@\";\n\n\"url_action.switch_backend.error.logged_in.title\" = \"Can\u2019t switch servers\";\n\"url_action.switch_backend.error.logged_in\" = \"You are already logged in. To switch to this server, log out of all accounts and try again.\";\n\n\"url_action.switch_backend.error.invalid_backend.title\" = \"The server is not responding\";\n\"url_action.switch_backend.error.invalid_backend\" = \"Please check your internet connection, verify the link and try again.\";\n\n\n// Deep Link\n\"url_action.invalid_user.title\" = \"Wire can't find this person.\";\n\"url_action.invalid_user.message\" = \"You may not have permission with this account or it no longer exists.\";\n\n\"url_action.invalid_conversation.title\" = \"Wire can't open this conversation.\";\n\"url_action.invalid_conversation.message\" = \"You may not have permission with this account or the person may not be on Wire.\";\n\n\"url_action.authorization_required.title\" = \"Authorization required.\";\n\"url_action.authorization_required.message\" = \"You need to log in to view this content.\";\n\n\"url_action.invalid_link.title\" = \"Invalid link.\";\n\"url_action.invalid_link.message\" = \"The link you opened is not valid.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// News and offers consent prompt\n\n\"news_offers.consent.title\" = \"Do you want to receive news and product updates from Wire via email?\";\n\"news_offers.consent.message\" = \"You can unsubscribe at any time.\";\n\"news_offers.consent.button.privacy_policy.title\" = \"Privacy Policy\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Message Details\n\"message_details.empty_likes\" = \"No one has liked this message yet.\";\n\"message_details.empty_read_receipts\" = \"No one has read this message yet.\";\n\"message_details.read_receipts_disabled\" = \"Read receipts were not on when this message was sent.\";\n\"message_details.combined_title\" = \"Message Details\";\n\"message_details.likes_title\" = \"Liked\";\n\"message_details.receipts_title\" = \"Read\";\n\"message_details.tabs.seen\" = \"Read (%d)\";\n\"message_details.tabs.likes\" = \"Liked (%d)\";\n\"message_details.subtitle_send_date\" = \"Sent: %@\";\n\"message_details.subtitle_edit_date\" = \"Edited: %@\";\n\"message_details.subtitle_label_voiceOver\" = \"Message Details\";\n\"message_details.user_handle_subtitle_label\" = \"Username\";\n\"message_details.user_read_timestamp_subtitle_label\" = \"Read at\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Password Rules\n\"registration.password.rules.no_requirements\" = \"Use %@.\";\n\"registration.password.rules.with_requirements\" = \"Use %@, with %@.\";\n\n// Legal Hold Deactivation\n\"legal_hold.deactivated.title\" = \"Legal Hold Deactivated\";\n\"legal_hold.deactivated.message\" = \"Future messages will not be recorded.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Share Extension\n\"share_extension.voiceover.conversation_under_legal_hold\" = \"Under legal hold.\";\n\"share_extension.voiceover.conversation_secure\" = \"All clients verified.\";\n\"share_extension.voiceover.conversation_secure_with_ignored\" = \"Not all clients verified.\";\n\n// Legal hold - alert\n\"legalhold_request.button.accessibility\" = \"Pending approval.\";\n\"legalhold_request.alert.title\" = \"Legal Hold Requested\";\n\"legalhold_request.alert.detail\" = \"All future messages will be recorded by the device with fingerprint:\\n\\n%@\\n\\nThis includes deleted, edited, and timed messages in all conversations.\";\n\"legalhold_request.alert.detail.enter_password\" = \"Enter your password to confirm.\";\n\"legalhold_request.alert.error_wrong_password\" = \"Wrong Password\";\n\n// Legal hold activated\n\"legalhold_active.alert.title\" = \"Legal Hold is Active\";\n\"legalhold_active.alert.learn_more\" = \"Learn More\";\n\"legalhold_active.alert.message\" = \"Legal Hold has been activated for your account. All messages will be preserved for future access, including deleted, edited, and timed messages.\\n\\nYour conversation partners will be aware of the recording.\";\n\n// Account deleted alert\n\"account_deleted_session_expired_alert.title\" = \"Your session expired\";\n\"account_deleted_session_expired_alert.message\" = \"The application did not communicate with the server for a long period of time, or your session has been remotely invalidated.\";\n\n// Button cell state\n\"button_message_cell.state.unselected\" = \"unselected\";\n\"button_message_cell.state.selected\" = \"selected\";\n\"button_message_cell.state.confirmed\" = \"confirmed\";\n\n\"button_message_cell.generic_error\" = \"Your answer can't be sent, please retry.\";\n\n// Custom app lock\n\n\"passcode.hint_label\" = \"Passcode\";\n\n// Custom app lock - create passcode\n\"create_passcode.textfield.placeholder\" = \"\";\n\"create_passcode.title_label\" = \"Create a passcode\";\n\"create_passcode.info_label\" = \"It will be used to unlock Wire. If you forget this passcode **it can not be recovered.**\";\n\"create_passcode.info_label_forced_applock\" = \"Create a passcode to unlock Wire. Please remember it, as **it can not be recovered.**\";\n\"create_passcode.create_button.title\" = \"create passcode\";\n\n// Custom app lock - create passcode validation\n\"create_passcode.validation.too_short\" = \"At least eight characters long\";\n\"create_passcode.validation.no_lowercase_char\" = \"A lowercase letter\";\n\"create_passcode.validation.no_uppercase_char\" = \"An uppercase letter\";\n\"create_passcode.validation.no_number\" = \"A number\";\n\"create_passcode.validation.no_special_char\" = \"A special character\";\n\n// Custom app lock - unlock\n\"unlock.textfield.placeholder\" = \"Enter your passcode\";\n\"unlock.title_label\" = \"Enter passcode to unlock Wire\";\n\"unlock.wipe_button\" = \"Access as new device\";\n\"unlock.error_label\" = \"Wrong passcode\";\n\"unlock.submit_button.title\" = \"unlock\";\n\n// Custom app lock - warning screen\n\"warning_screen.title_label\" = \"There was a change in Wire\";\n\"warning_screen.main_info.forced_applock\" = \"Your organization needs to lock your app when Wire is not in use to keep the team safe.\";\n\"warning_screen.info_label.forced_applock\" = \"Next time, unlock Wire the same way you unlock your phone.\";\n\"warning_screen.info_label.non_forced_applock\" = \"Your organization does not need app lock anymore. From now, you can access Wire without any obstacles.\";\n\n// Wipe database\n\n\"wipe_database.title_label\" = \"Access as new device\";\n\"wipe_database.info_label\" = \"The data stored on this device can only be accessed with your passcode.\\n\\nIf you have forgotten your passcode, you can delete the database to log in again as a new device.\\n\\nBy deleting the database, \";\n\"wipe_database.info_label.highlighted\" = \"all local data and messages for this account will be permanently deleted.\";\n\n\"wipe_database.button.title\" = \"I want to delete the database\";\n\n// Wipe database alert\n\n\"wipe_database.alert.description\" = \"Confirm database deletion\";\n\"wipe_database.alert.message\" = \"Type 'Delete' to verify you want to delete all data in this device.\";\n\"wipe_database.alert.placeholder\" = \"Type 'Delete'\";\n\"wipe_database.alert.confirm\" = \"Delete\";\n\"wipe_database.alert.confirm_input\" = \"Delete\";\n\n// Wipe database completion\n\n\"wipe_database_completion.title\" = \"Database deleted\";\n\"wipe_database_completion.subtitle\" = \"Your data and messages have been deleted. You can now log in again as a new device.\";\n\n// MARK: - App lock module\n\n\"appLockModule.message.faceID\" = \"Unlock Wire with Face ID or Passcode\";\n\"appLockModule.message.touchID\" = \"Unlock Wire with Touch ID or Passcode\";\n\"appLockModule.message.passcode\" = \"Unlock Wire with Passcode\";\n\"appLockModule.message.passcodeUnavailable\" = \"To unlock Wire, turn on Passcode in your device settings\";\n\"appLockModule.unlockButton.title\" = \"Unlock\";\n\"appLockModule.goToSettingsButton.title\" = \"Go to settings\";\n\n", "//\n// Wire\n// Copyright (C) 2020 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\nimport UIKit\nimport WireSyncEngine\nimport avs\n\n// MARK: - AppRootRouter\npublic class AppRootRouter: NSObject {\n\n    // MARK: - Public Property\n    let screenCurtain = ScreenCurtain()\n\n    // MARK: - Private Property\n    private let navigator: NavigatorProtocol\n    private var appStateCalculator: AppStateCalculator\n    private var urlActionRouter: URLActionRouter\n\n    private var authenticationCoordinator: AuthenticationCoordinator?\n    private var switchingAccountRouter: SwitchingAccountRouter\n    private var sessionManagerLifeCycleObserver: SessionManagerLifeCycleObserver\n    private let foregroundNotificationFilter: ForegroundNotificationFilter\n    private var quickActionsManager: QuickActionsManager\n    private var authenticatedRouter: AuthenticatedRouter? {\n        didSet {\n            setupAnalyticsSharing()\n        }\n    }\n\n    private var observerTokens: [NSObjectProtocol] = []\n    private var authenticatedBlocks: [() -> Void] = []\n    private let teamMetadataRefresher = TeamMetadataRefresher()\n\n    // MARK: - Private Set Property\n    private(set) var sessionManager: SessionManager\n\n    // TO DO: This should be private\n    private(set) var rootViewController: RootViewController\n\n    // MARK: - Initialization\n\n    init(viewController: RootViewController,\n         navigator: NavigatorProtocol,\n         sessionManager: SessionManager,\n         appStateCalculator: AppStateCalculator) {\n        self.rootViewController = viewController\n        self.navigator = navigator\n        self.sessionManager = sessionManager\n        self.appStateCalculator = appStateCalculator\n        self.urlActionRouter = URLActionRouter(viewController: viewController)\n        self.switchingAccountRouter = SwitchingAccountRouter()\n        self.quickActionsManager = QuickActionsManager()\n        self.foregroundNotificationFilter = ForegroundNotificationFilter()\n        self.sessionManagerLifeCycleObserver = SessionManagerLifeCycleObserver()\n\n        urlActionRouter.sessionManager = sessionManager\n        sessionManagerLifeCycleObserver.sessionManager = sessionManager\n        foregroundNotificationFilter.sessionManager = sessionManager\n        quickActionsManager.sessionManager = sessionManager\n\n        sessionManager.foregroundNotificationResponder = foregroundNotificationFilter\n        sessionManager.switchingDelegate = switchingAccountRouter\n        sessionManager.presentationDelegate = urlActionRouter\n\n        super.init()\n\n        setupAppStateCalculator()\n        setupURLActionRouter()\n        setupNotifications()\n        setupAdditionalWindows()\n\n        AppRootRouter.configureAppearance()\n\n        createLifeCycleObserverTokens()\n        setCallingSettings()\n    }\n\n    // MARK: - Public implementation\n\n    public func start(launchOptions: LaunchOptions) {\n        showInitial(launchOptions: launchOptions)\n    }\n\n    public func openDeepLinkURL(_ deepLinkURL: URL) -> Bool {\n        return urlActionRouter.open(url: deepLinkURL)\n    }\n\n    public func performQuickAction(for shortcutItem: UIApplicationShortcutItem,\n                                   completionHandler: ((Bool) -> Void)?) {\n        quickActionsManager.performAction(for: shortcutItem,\n                                          completionHandler: completionHandler)\n    }\n\n    // MARK: - Private implementation\n    private func setupAppStateCalculator() {\n        appStateCalculator.delegate = self\n    }\n\n    private func setupURLActionRouter() {\n        urlActionRouter.delegate = self\n    }\n\n    private func setupNotifications() {\n        setupApplicationNotifications()\n        setupContentSizeCategoryNotifications()\n        setupAudioPermissionsNotifications()\n    }\n\n    private func setupAdditionalWindows() {\n        screenCurtain.makeKeyAndVisible()\n        screenCurtain.isHidden = true\n    }\n\n    private func createLifeCycleObserverTokens() {\n        sessionManagerLifeCycleObserver.createLifeCycleObserverTokens()\n    }\n\n    private func setCallingSettings() {\n        sessionManager.updateCallNotificationStyleFromSettings()\n        sessionManager.useConstantBitRateAudio = SecurityFlags.forceConstantBitRateCalls.isEnabled\n            ? true\n            : Settings.shared[.callingConstantBitRate] ?? false\n    }\n\n    // MARK: - Transition\n\n    /// A queue on which we disspatch app state transitions.\n\n    private let appStateTransitionQueue = DispatchQueue(label: \"AppRootRouter.appStateTransitionQueue\")\n\n    /// A group to encapsulate the entire transition to a new app state.\n\n    private let appStateTransitionGroup = DispatchGroup()\n\n    /// Synchronously enqueues a transition to a new app state.\n    ///\n    /// The transition will only begin once a previous transition has completed.\n    ///\n    /// - Parameters:\n    ///     - appState: The new state to transition to.\n    ///     - completion: A block executed after the transition has completed.\n\n    private func enqueueTransition(to appState: AppState, completion: @escaping () -> Void = {}) {\n        // Perform the wait on a background queue so we don't cause a\n        // deadlock on the main queue.\n        appStateTransitionQueue.async { [weak self] in\n            guard let `self` = self else { return }\n\n            self.appStateTransitionGroup.wait()\n\n            DispatchQueue.main.async {\n                self.transition(to: appState, completion: completion)\n            }\n        }\n    }\n\n}\n\n// MARK: - AppStateCalculatorDelegate\nextension AppRootRouter: AppStateCalculatorDelegate {\n    func appStateCalculator(_: AppStateCalculator,\n                            didCalculate appState: AppState,\n                            completion: @escaping () -> Void) {\n        enqueueTransition(to: appState, completion: completion)\n    }\n\n    private func transition(to appState: AppState, completion: @escaping () -> Void) {\n        applicationWillTransition(to: appState)\n\n        resetAuthenticationCoordinatorIfNeeded(for: appState)\n\n        let completionBlock = { [weak self] in\n            completion()\n            self?.applicationDidTransition(to: appState)\n        }\n\n        switch appState {\n        case .blacklisted:\n            showBlacklisted(completion: completionBlock)\n        case .jailbroken:\n            showJailbroken(completion: completionBlock)\n        case .databaseFailure:\n            showDatabaseLoadingFailure(completion: completionBlock)\n        case .migrating:\n            showLaunchScreen(isLoading: true, completion: completionBlock)\n        case .unauthenticated(error: let error):\n            screenCurtain.delegate = nil\n            configureUnauthenticatedAppearance()\n            showUnauthenticatedFlow(error: error, completion: completionBlock)\n        case .authenticated(completedRegistration: let completedRegistration):\n            configureAuthenticatedAppearance()\n            executeAuthenticatedBlocks()\n            // TODO: [John] Avoid singleton.\n            screenCurtain.delegate = ZMUserSession.shared()\n            showAuthenticated(isComingFromRegistration: completedRegistration,\n                              completion: completionBlock)\n        case .headless:\n            showLaunchScreen(completion: completionBlock)\n        case .loading(account: let toAccount, from: let fromAccount):\n            showSkeleton(fromAccount: fromAccount,\n                         toAccount: toAccount,\n                         completion: completionBlock)\n        case .locked:\n            // TODO: [John] Avoid singleton.\n            screenCurtain.delegate = ZMUserSession.shared()\n            showAppLock(completion: completionBlock)\n        }\n    }\n\n    private func resetAuthenticationCoordinatorIfNeeded(for state: AppState) {\n        switch state {\n        case .authenticated:\n            authenticationCoordinator = nil\n        default:\n            break\n        }\n    }\n\n    func performWhenAuthenticated(_ block : @escaping () -> Void) {\n        if case .authenticated = appStateCalculator.appState {\n            block()\n        } else {\n            authenticatedBlocks.append(block)\n        }\n    }\n\n    func executeAuthenticatedBlocks() {\n        while !authenticatedBlocks.isEmpty {\n            authenticatedBlocks.removeFirst()()\n        }\n    }\n\n    func reload() {\n        enqueueTransition(to: .headless)\n        enqueueTransition(to: appStateCalculator.appState)\n    }\n}\n\nextension AppRootRouter {\n    // MARK: - Navigation Helpers\n    private func showInitial(launchOptions: LaunchOptions) {\n        enqueueTransition(to: .headless) { [weak self] in\n            Analytics.shared.tagEvent(\"app.open\")\n            self?.sessionManager.start(launchOptions: launchOptions)\n        }\n    }\n\n    private func showBlacklisted(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .blacklist)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showJailbroken(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .jailbroken)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showDatabaseLoadingFailure(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .databaseFailure,\n                                                          sessionManager: sessionManager)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showLaunchScreen(isLoading: Bool = false, completion: @escaping () -> Void) {\n        let launchViewController = LaunchImageViewController()\n        isLoading\n            ? launchViewController.showLoadingScreen()\n            : ()\n        rootViewController.set(childViewController: launchViewController,\n                               completion: completion)\n    }\n\n    private func showUnauthenticatedFlow(error: NSError?, completion: @escaping () -> Void) {\n        // Only execute handle events if there is no current flow\n        guard\n            self.authenticationCoordinator == nil ||\n                error?.userSessionErrorCode == .addAccountRequested ||\n                error?.userSessionErrorCode == .accountDeleted,\n            let sessionManager = SessionManager.shared\n        else {\n            completion()\n            return\n        }\n\n        let navigationController = SpinnerCapableNavigationController(navigationBarClass: AuthenticationNavigationBar.self,\n                                                                      toolbarClass: nil)\n\n        authenticationCoordinator = AuthenticationCoordinator(presenter: navigationController,\n                                                              sessionManager: sessionManager,\n                                                              featureProvider: BuildSettingAuthenticationFeatureProvider(),\n                                                              statusProvider: AuthenticationStatusProvider())\n\n        guard let authenticationCoordinator = authenticationCoordinator else {\n            completion()\n            return\n        }\n\n        authenticationCoordinator.delegate = appStateCalculator\n        authenticationCoordinator.startAuthentication(with: error,\n                                                      numberOfAccounts: SessionManager.numberOfAccounts)\n\n        rootViewController.set(childViewController: navigationController,\n                               completion: completion)\n    }\n\n    private func showAuthenticated(isComingFromRegistration: Bool, completion: @escaping () -> Void) {\n        guard\n            let selectedAccount = SessionManager.shared?.accountManager.selectedAccount,\n            let authenticatedRouter = buildAuthenticatedRouter(account: selectedAccount,\n                                                               isComingFromRegistration: isComingFromRegistration)\n        else {\n            completion()\n            return\n        }\n\n        self.authenticatedRouter = authenticatedRouter\n\n        rootViewController.set(childViewController: authenticatedRouter.viewController,\n                               completion: completion)\n    }\n\n    private func showSkeleton(fromAccount: Account?, toAccount: Account, completion: @escaping () -> Void) {\n        let skeletonViewController = SkeletonViewController(from: fromAccount, to: toAccount)\n        rootViewController.set(childViewController: skeletonViewController,\n                               completion: completion)\n    }\n\n    private func showAppLock(completion: @escaping () -> Void) {\n        guard let session = ZMUserSession.shared() else { fatalError() }\n        rootViewController.set(childViewController: AppLockModule.build(session: session),\n                               completion: completion)\n    }\n\n    // MARK: - Helpers\n    private func configureUnauthenticatedAppearance() {\n        rootViewController.view.window?.tintColor = UIColor.Wire.primaryLabel\n        ValidatedTextField.appearance(whenContainedInInstancesOf: [AuthenticationStepController.self]).tintColor = UIColor.Team.activeButton\n    }\n\n    private func configureAuthenticatedAppearance() {\n        rootViewController.view.window?.tintColor = .accent()\n        UIColor.setAccentOverride(.undefined)\n    }\n\n    private func setupAnalyticsSharing() {\n        guard\n            appStateCalculator.wasUnauthenticated,\n            let selfUser = SelfUser.provider?.selfUser,\n            selfUser.isTeamMember\n        else {\n            return\n        }\n\n        TrackingManager.shared.disableCrashSharing = true\n        TrackingManager.shared.disableAnalyticsSharing = false\n        Analytics.shared.provider?.selfUser = selfUser\n    }\n\n    private func buildAuthenticatedRouter(account: Account, isComingFromRegistration: Bool) -> AuthenticatedRouter? {\n\n        let needToShowDataUsagePermissionDialog = appStateCalculator.wasUnauthenticated\n                                                    && !SelfUser.current.isTeamMember\n\n        return AuthenticatedRouter(rootViewController: rootViewController,\n                                   account: account,\n                                   selfUser: ZMUser.selfUser(),\n                                   isComingFromRegistration: isComingFromRegistration,\n                                   needToShowDataUsagePermissionDialog: needToShowDataUsagePermissionDialog)\n    }\n}\n\n// TO DO: THIS PART MUST BE CLENED UP\nextension AppRootRouter {\n    private func applicationWillTransition(to appState: AppState) {\n        appStateTransitionGroup.enter()\n        configureSelfUserProviderIfNeeded(for: appState)\n        configureColorScheme()\n    }\n\n    private func applicationDidTransition(to appState: AppState) {\n        if case .unauthenticated(let error) = appState {\n            presentAlertForDeletedAccountIfNeeded(error)\n        }\n\n        if case .authenticated = appState {\n            authenticatedRouter?.updateActiveCallPresentationState()\n\n            ZClientViewController.shared?.legalHoldDisclosureController?.discloseCurrentState(cause: .appOpen)\n        }\n\n        resetSelfUserProviderIfNeeded(for: appState)\n        urlActionRouter.openDeepLink(for: appState)\n        appStateTransitionGroup.leave()\n    }\n\n    private func resetSelfUserProviderIfNeeded(for appState: AppState) {\n        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }\n\n        switch appState {\n        case .authenticated: break\n        default:\n            SelfUser.provider = nil\n        }\n    }\n\n    private func configureSelfUserProviderIfNeeded(for appState: AppState) {\n        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }\n\n        if case .authenticated = appState {\n            SelfUser.provider = ZMUserSession.shared()\n        }\n    }\n\n    private func configureColorScheme() {\n        let colorScheme = ColorScheme.default\n        colorScheme.accentColor = .accent()\n        colorScheme.variant = Settings.shared.colorSchemeVariant\n    }\n\n    private func presentAlertForDeletedAccountIfNeeded(_ error: NSError?) {\n        guard\n            error?.userSessionErrorCode == .accountDeleted,\n            let reason = error?.userInfo[ZMAccountDeletedReasonKey] as? ZMAccountDeletedReason\n        else {\n            return\n        }\n\n        switch reason {\n        case .sessionExpired:\n            rootViewController.presentAlertWithOKButton(title: \"account_deleted_session_expired_alert.title\".localized,\n                                                        message: \"account_deleted_session_expired_alert.message\".localized)\n\n        case .databaseWiped:\n            let wipeCompletionViewController = WipeCompletionViewController()\n            wipeCompletionViewController.modalPresentationStyle = .fullScreen\n            rootViewController.present(wipeCompletionViewController, animated: true)\n\n        default:\n            break\n        }\n    }\n}\n\n// MARK: - URLActionRouterDelegete\nextension AppRootRouter: URLActionRouterDelegete {\n    func urlActionRouterWillShowCompanyLoginError() {\n        authenticationCoordinator?.cancelCompanyLogin()\n    }\n}\n\n// MARK: - ApplicationStateObserving\nextension AppRootRouter: ApplicationStateObserving {\n    func addObserverToken(_ token: NSObjectProtocol) {\n        observerTokens.append(token)\n    }\n\n    func applicationDidBecomeActive() {\n        updateOverlayWindowFrame()\n        teamMetadataRefresher.triggerRefreshIfNeeded()\n    }\n\n    func applicationDidEnterBackground() {\n        let unreadConversations = sessionManager.accountManager.totalUnreadCount\n        UIApplication.shared.applicationIconBadgeNumber = unreadConversations\n    }\n\n    func applicationWillEnterForeground() {\n        updateOverlayWindowFrame()\n    }\n\n    func updateOverlayWindowFrame(size: CGSize? = nil) {\n        if let size = size {\n            screenCurtain.frame.size = size\n        } else {\n            screenCurtain.frame = UIApplication.shared.keyWindow?.frame ?? UIScreen.main.bounds\n        }\n    }\n}\n\n// MARK: - ContentSizeCategoryObserving\nextension AppRootRouter: ContentSizeCategoryObserving {\n    func contentSizeCategoryDidChange() {\n        NSAttributedString.invalidateParagraphStyle()\n        NSAttributedString.invalidateMarkdownStyle()\n        ConversationListCell.invalidateCachedCellSize()\n        defaultFontScheme = FontScheme(contentSizeCategory: UIApplication.shared.preferredContentSizeCategory)\n        AppRootRouter.configureAppearance()\n    }\n\n    public static func configureAppearance() {\n        let navigationBarTitleBaselineOffset: CGFloat = 2.5\n\n        let attributes: [NSAttributedString.Key: Any] = [.font: UIFont.systemFont(ofSize: 11, weight: .semibold), .baselineOffset: navigationBarTitleBaselineOffset]\n        let barButtonItemAppearance = UIBarButtonItem.appearance(whenContainedInInstancesOf: [DefaultNavigationBar.self])\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .normal)\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .highlighted)\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .disabled)\n    }\n}\n\n// MARK: - AudioPermissionsObserving\nextension AppRootRouter: AudioPermissionsObserving {\n    func userDidGrantAudioPermissions() {\n        sessionManager.updateCallNotificationStyleFromSettings()\n    }\n}\n"], "fixing_code": ["// swiftlint:disable all\n// Generated using SwiftGen \u2014 https://github.com/SwiftGen/SwiftGen\n\nimport Foundation\n\n// swiftlint:disable superfluous_disable_command file_length implicit_return\n\n// MARK: - Strings\n\n// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length\n// swiftlint:disable nesting type_body_length type_name vertical_whitespace_opening_braces\ninternal enum L10n {\n  internal enum InfoPlist {\n    /// Allow Wire to access your camera so you can place video calls and send photos.\n    internal static let nsCameraUsageDescription = L10n.tr(\"InfoPlist\", \"NSCameraUsageDescription\")\n    /// Allow Wire to access your contacts to connect you with others. We anonymize all information before uploading it to our server and do not share it with anyone else.\n    internal static let nsContactsUsageDescription = L10n.tr(\"InfoPlist\", \"NSContactsUsageDescription\")\n    /// In order to authenticate in the app allow Wire to access the Face ID feature.\n    internal static let nsFaceIDUsageDescription = L10n.tr(\"InfoPlist\", \"NSFaceIDUsageDescription\")\n    /// Allow Wire to access your location so you can send your location to others.\n    internal static let nsLocationWhenInUseUsageDescription = L10n.tr(\"InfoPlist\", \"NSLocationWhenInUseUsageDescription\")\n    /// Allow Wire to access your microphone so you can talk to people and send audio messages.\n    internal static let nsMicrophoneUsageDescription = L10n.tr(\"InfoPlist\", \"NSMicrophoneUsageDescription\")\n    /// Allow Wire to store pictures you take in the photo library.\n    internal static let nsPhotoLibraryAddUsageDescription = L10n.tr(\"InfoPlist\", \"NSPhotoLibraryAddUsageDescription\")\n    /// Allow Wire to access pictures stored in photo library.\n    internal static let nsPhotoLibraryUsageDescription = L10n.tr(\"InfoPlist\", \"NSPhotoLibraryUsageDescription\")\n  }\n  internal enum Localizable {\n    /// Connection Request\n    internal static let connectionRequestPendingTitle = L10n.tr(\"Localizable\", \"connection_request_pending_title\")\n    internal enum About {\n      internal enum Copyright {\n        /// \u00a9 Wire Swiss GmbH\n        internal static let title = L10n.tr(\"Localizable\", \"about.copyright.title\")\n      }\n      internal enum License {\n        /// Acknowledgements\n        internal static let licenseHeader = L10n.tr(\"Localizable\", \"about.license.license_header\")\n        /// View Project Page\n        internal static let openProjectButton = L10n.tr(\"Localizable\", \"about.license.open_project_button\")\n        /// Details\n        internal static let projectHeader = L10n.tr(\"Localizable\", \"about.license.project_header\")\n        /// License Information\n        internal static let title = L10n.tr(\"Localizable\", \"about.license.title\")\n      }\n      internal enum Privacy {\n        /// Privacy Policy\n        internal static let title = L10n.tr(\"Localizable\", \"about.privacy.title\")\n      }\n      internal enum Tos {\n        /// Terms of Use\n        internal static let title = L10n.tr(\"Localizable\", \"about.tos.title\")\n      }\n      internal enum Website {\n        /// Wire Website\n        internal static let title = L10n.tr(\"Localizable\", \"about.website.title\")\n      }\n    }\n    internal enum AccountDeletedMissingPasscodeAlert {\n      /// In order to use Wire, please set a passcode in your device settings.\n      internal static let message = L10n.tr(\"Localizable\", \"account_deleted_missing_passcode_alert.message\")\n      /// No Device Passcode\n      internal static let title = L10n.tr(\"Localizable\", \"account_deleted_missing_passcode_alert.title\")\n    }\n    internal enum AccountDeletedSessionExpiredAlert {\n      /// The application did not communicate with the server for a long period of time, or your session has been remotely invalidated.\n      internal static let message = L10n.tr(\"Localizable\", \"account_deleted_session_expired_alert.message\")\n      /// Your session expired\n      internal static let title = L10n.tr(\"Localizable\", \"account_deleted_session_expired_alert.title\")\n    }\n    internal enum AddParticipants {\n      /// Everyone\u2019s here.\n      internal static let allContactsAdded = L10n.tr(\"Localizable\", \"add_participants.all_contacts_added\")\n      internal enum Alert {\n        /// The group is full\n        internal static let title = L10n.tr(\"Localizable\", \"add_participants.alert.title\")\n        internal enum Message {\n          /// Up to %1$d people can join a conversation. Currently there is only room for %2$d more.\n          internal static func existingConversation(_ p1: Int, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"add_participants.alert.message.existing_conversation\", p1, p2)\n          }\n          /// Up to %d people can join a conversation.\n          internal static func newConversation(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"add_participants.alert.message.new_conversation\", p1)\n          }\n        }\n      }\n    }\n    internal enum AppLockModule {\n      internal enum GoToSettingsButton {\n        /// Go to settings\n        internal static let title = L10n.tr(\"Localizable\", \"appLockModule.goToSettingsButton.title\")\n      }\n      internal enum Message {\n        /// Unlock Wire with Face ID or Passcode\n        internal static let faceID = L10n.tr(\"Localizable\", \"appLockModule.message.faceID\")\n        /// Unlock Wire with Passcode\n        internal static let passcode = L10n.tr(\"Localizable\", \"appLockModule.message.passcode\")\n        /// To unlock Wire, turn on Passcode in your device settings\n        internal static let passcodeUnavailable = L10n.tr(\"Localizable\", \"appLockModule.message.passcodeUnavailable\")\n        /// Unlock Wire with Touch ID or Passcode\n        internal static let touchID = L10n.tr(\"Localizable\", \"appLockModule.message.touchID\")\n      }\n      internal enum UnlockButton {\n        /// Unlock\n        internal static let title = L10n.tr(\"Localizable\", \"appLockModule.unlockButton.title\")\n      }\n    }\n    internal enum ArchivedList {\n      /// archive\n      internal static let title = L10n.tr(\"Localizable\", \"archived_list.title\")\n    }\n    internal enum Availability {\n      /// Available\n      internal static let available = L10n.tr(\"Localizable\", \"availability.available\")\n      /// Away\n      internal static let away = L10n.tr(\"Localizable\", \"availability.away\")\n      /// Busy\n      internal static let busy = L10n.tr(\"Localizable\", \"availability.busy\")\n      /// None\n      internal static let `none` = L10n.tr(\"Localizable\", \"availability.none\")\n      internal enum AccessibilityLabel {\n        /// Change Status\n        internal static let changeStatus = L10n.tr(\"Localizable\", \"availability.accessibility_label.change_status\")\n        /// Status\n        internal static let status = L10n.tr(\"Localizable\", \"availability.accessibility_label.status\")\n      }\n      internal enum Message {\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"availability.message.cancel\")\n        /// Set a status\n        internal static let setStatus = L10n.tr(\"Localizable\", \"availability.message.set_status\")\n      }\n      internal enum Reminder {\n        internal enum Action {\n          /// Do not display this information again\n          internal static let dontRemindMe = L10n.tr(\"Localizable\", \"availability.reminder.action.dont_remind_me\")\n          /// OK\n          internal static let ok = L10n.tr(\"Localizable\", \"availability.reminder.action.ok\")\n        }\n        internal enum Available {\n          /// You will appear as Available to other people. You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.available.message\")\n          /// You are set to Available\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.available.title\")\n        }\n        internal enum Away {\n          /// You will appear as Away to other people. You will not receive notifications about any incoming calls or messages.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.away.message\")\n          /// You are set to Away\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.away.title\")\n        }\n        internal enum Busy {\n          /// You will appear as Busy to other people. You will only receive notifications for mentions, replies, and calls in conversations that are not muted.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.busy.message\")\n          /// You are set to Busy\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.busy.title\")\n        }\n        internal enum None {\n          /// You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\n          internal static let message = L10n.tr(\"Localizable\", \"availability.reminder.none.message\")\n          /// No status set\n          internal static let title = L10n.tr(\"Localizable\", \"availability.reminder.none.title\")\n        }\n      }\n    }\n    internal enum ButtonMessageCell {\n      /// Your answer can't be sent, please retry.\n      internal static let genericError = L10n.tr(\"Localizable\", \"button_message_cell.generic_error\")\n      internal enum State {\n        /// confirmed\n        internal static let confirmed = L10n.tr(\"Localizable\", \"button_message_cell.state.confirmed\")\n        /// selected\n        internal static let selected = L10n.tr(\"Localizable\", \"button_message_cell.state.selected\")\n        /// unselected\n        internal static let unselected = L10n.tr(\"Localizable\", \"button_message_cell.state.unselected\")\n      }\n    }\n    internal enum Call {\n      internal enum Actions {\n        internal enum Label {\n          /// Accept call\n          internal static let acceptCall = L10n.tr(\"Localizable\", \"call.actions.label.accept_call\")\n          /// Flip camera\n          internal static let flipCamera = L10n.tr(\"Localizable\", \"call.actions.label.flip_camera\")\n          /// Join call\n          internal static let joinCall = L10n.tr(\"Localizable\", \"call.actions.label.join_call\")\n          /// Start audio call\n          internal static let makeAudioCall = L10n.tr(\"Localizable\", \"call.actions.label.make_audio_call\")\n          /// Start video call\n          internal static let makeVideoCall = L10n.tr(\"Localizable\", \"call.actions.label.make_video_call\")\n          /// Minimize call\n          internal static let minimizeCall = L10n.tr(\"Localizable\", \"call.actions.label.minimize_call\")\n          /// Decline call\n          internal static let rejectCall = L10n.tr(\"Localizable\", \"call.actions.label.reject_call\")\n          /// Switch to back camera\n          internal static let switchToBackCamera = L10n.tr(\"Localizable\", \"call.actions.label.switch_to_back_camera\")\n          /// Switch to front camera\n          internal static let switchToFrontCamera = L10n.tr(\"Localizable\", \"call.actions.label.switch_to_front_camera\")\n          /// End call\n          internal static let terminateCall = L10n.tr(\"Localizable\", \"call.actions.label.terminate_call\")\n          /// Unmute\n          internal static let toggleMuteOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_mute_off\")\n          /// Mute\n          internal static let toggleMuteOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_mute_on\")\n          /// Disable speaker\n          internal static let toggleSpeakerOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_speaker_off\")\n          /// Enable speaker\n          internal static let toggleSpeakerOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_speaker_on\")\n          /// Turn off camera\n          internal static let toggleVideoOff = L10n.tr(\"Localizable\", \"call.actions.label.toggle_video_off\")\n          /// Turn on camera\n          internal static let toggleVideoOn = L10n.tr(\"Localizable\", \"call.actions.label.toggle_video_on\")\n        }\n      }\n      internal enum Alert {\n        internal enum Ongoing {\n          /// This will end your other call.\n          internal static let alertTitle = L10n.tr(\"Localizable\", \"call.alert.ongoing.alert_title\")\n          internal enum Join {\n            /// Join anyway\n            internal static let button = L10n.tr(\"Localizable\", \"call.alert.ongoing.join.button\")\n            /// A call is active in another conversation.\\nJoining this call will hang up the other one.\n            internal static let message = L10n.tr(\"Localizable\", \"call.alert.ongoing.join.message\")\n          }\n          internal enum Start {\n            /// Call anyway\n            internal static let button = L10n.tr(\"Localizable\", \"call.alert.ongoing.start.button\")\n            /// A call is active in another conversation.\\nCalling here will hang up the other call.\n            internal static let message = L10n.tr(\"Localizable\", \"call.alert.ongoing.start.message\")\n          }\n        }\n      }\n      internal enum Announcement {\n        /// Incoming call from %@\n        internal static func incoming(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"call.announcement.incoming\", String(describing: p1))\n        }\n      }\n      internal enum Degraded {\n        internal enum Alert {\n          /// New Device\n          internal static let title = L10n.tr(\"Localizable\", \"call.degraded.alert.title\")\n          internal enum Action {\n            /// Call anyway\n            internal static let `continue` = L10n.tr(\"Localizable\", \"call.degraded.alert.action.continue\")\n          }\n          internal enum Message {\n            /// You started using a new device.\n            internal static let `self` = L10n.tr(\"Localizable\", \"call.degraded.alert.message.self\")\n            /// Someone started using a new device.\n            internal static let unknown = L10n.tr(\"Localizable\", \"call.degraded.alert.message.unknown\")\n            /// %@ started using a new device.\n            internal static func user(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"call.degraded.alert.message.user\", String(describing: p1))\n            }\n          }\n        }\n        internal enum Ended {\n          internal enum Alert {\n            /// Call ended\n            internal static let title = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.title\")\n            internal enum Message {\n              /// The call was disconnected because you started using a new device.\n              internal static let `self` = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.self\")\n              /// The call was disconnected because someone is no longer a verified contact.\n              internal static let unknown = L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.unknown\")\n              /// The call was disconnected because %@ is no longer a verified contact.\n              internal static func user(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"call.degraded.ended.alert.message.user\", String(describing: p1))\n              }\n            }\n          }\n        }\n      }\n      internal enum Grid {\n        /// No active video speakers...\n        internal static let noActiveSpeakers = L10n.tr(\"Localizable\", \"call.grid.no_active_speakers\")\n        internal enum Hints {\n          /// Double Tap on a tile for fullscreen\n          internal static let fullscreen = L10n.tr(\"Localizable\", \"call.grid.hints.fullscreen\")\n          /// Double Tap to go back, pinch to zoom\n          internal static let goBackOrZoom = L10n.tr(\"Localizable\", \"call.grid.hints.go_back_or_zoom\")\n          /// Pinch to zoom\n          internal static let zoom = L10n.tr(\"Localizable\", \"call.grid.hints.zoom\")\n        }\n      }\n      internal enum Overlay {\n        internal enum SwitchTo {\n          /// ALL\n          internal static let all = L10n.tr(\"Localizable\", \"call.overlay.switch_to.all\")\n          /// SPEAKERS\n          internal static let speakers = L10n.tr(\"Localizable\", \"call.overlay.switch_to.speakers\")\n        }\n      }\n      internal enum Participants {\n        /// Show All (%@)\n        internal static func showAll(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"call.participants.show_all\", String(describing: p1))\n        }\n        internal enum List {\n          /// Participants\n          internal static let title = L10n.tr(\"Localizable\", \"call.participants.list.title\")\n        }\n      }\n      internal enum Quality {\n        internal enum Indicator {\n          /// Your calling relay is not reachable. This may affect your call experience.\n          internal static let message = L10n.tr(\"Localizable\", \"call.quality.indicator.message\")\n          internal enum MoreInfo {\n            internal enum Button {\n              /// More info\n              internal static let text = L10n.tr(\"Localizable\", \"call.quality.indicator.more_info.button.text\")\n            }\n          }\n        }\n      }\n      internal enum Status {\n        /// Connecting\u2026\n        internal static let connecting = L10n.tr(\"Localizable\", \"call.status.connecting\")\n        /// Constant Bit Rate\n        internal static let constantBitrate = L10n.tr(\"Localizable\", \"call.status.constant_bitrate\")\n        /// Calling\u2026\n        internal static let incoming = L10n.tr(\"Localizable\", \"call.status.incoming\")\n        /// Ringing\u2026\n        internal static let outgoing = L10n.tr(\"Localizable\", \"call.status.outgoing\")\n        /// Reconnecting\u2026\n        internal static let reconnecting = L10n.tr(\"Localizable\", \"call.status.reconnecting\")\n        /// Hanging up\u2026\n        internal static let terminating = L10n.tr(\"Localizable\", \"call.status.terminating\")\n        /// Variable Bit Rate\n        internal static let variableBitrate = L10n.tr(\"Localizable\", \"call.status.variable_bitrate\")\n        internal enum Incoming {\n          /// %@ is calling\u2026\n          internal static func user(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"call.status.incoming.user\", String(describing: p1))\n          }\n        }\n        internal enum Outgoing {\n          /// Calling %@\u2026\n          internal static func user(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"call.status.outgoing.user\", String(describing: p1))\n          }\n        }\n      }\n      internal enum Video {\n        /// Video paused\n        internal static let paused = L10n.tr(\"Localizable\", \"call.video.paused\")\n        internal enum TooMany {\n          internal enum Alert {\n            /// Video calls only work in groups of 4 or less.\n            internal static let message = L10n.tr(\"Localizable\", \"call.video.too_many.alert.message\")\n            /// Too many people for Video\n            internal static let title = L10n.tr(\"Localizable\", \"call.video.too_many.alert.title\")\n          }\n        }\n      }\n    }\n    internal enum Calling {\n      internal enum QualitySurvey {\n        /// How do you rate the overall quality of the call?\n        internal static let question = L10n.tr(\"Localizable\", \"calling.quality_survey.question\")\n        /// Skip\n        internal static let skipButtonTitle = L10n.tr(\"Localizable\", \"calling.quality_survey.skip_button_title\")\n        /// Call Quality Feedback\n        internal static let title = L10n.tr(\"Localizable\", \"calling.quality_survey.title\")\n        internal enum Answer {\n          /// Bad\n          internal static let _1 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.1\")\n          /// Poor\n          internal static let _2 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.2\")\n          /// Fair\n          internal static let _3 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.3\")\n          /// Good\n          internal static let _4 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.4\")\n          /// Excellent\n          internal static let _5 = L10n.tr(\"Localizable\", \"calling.quality_survey.answer.5\")\n        }\n      }\n    }\n    internal enum CameraAccess {\n      /// Wire needs access to the camera\n      internal static let denied = L10n.tr(\"Localizable\", \"camera_access.denied\")\n      internal enum Denied {\n        /// \n        internal static let instruction = L10n.tr(\"Localizable\", \"camera_access.denied.instruction\")\n        /// Enable it in Wire Settings\n        internal static let openSettings = L10n.tr(\"Localizable\", \"camera_access.denied.open_settings\")\n      }\n    }\n    internal enum CameraControls {\n      /// AE/AF Lock\n      internal static let aeafLock = L10n.tr(\"Localizable\", \"camera_controls.aeaf_lock\")\n    }\n    internal enum Collections {\n      internal enum ImageViewer {\n        internal enum Copied {\n          /// Picture copied\n          internal static let title = L10n.tr(\"Localizable\", \"collections.image_viewer.copied.title\")\n        }\n      }\n      internal enum Search {\n        /// No results\n        internal static let noItems = L10n.tr(\"Localizable\", \"collections.search.no_items\")\n        internal enum Field {\n          /// Search text messages\n          internal static let placeholder = L10n.tr(\"Localizable\", \"collections.search.field.placeholder\")\n        }\n      }\n      internal enum Section {\n        /// No items in collection\n        internal static let noItems = L10n.tr(\"Localizable\", \"collections.section.no_items\")\n        internal enum All {\n          /// Show all %d \u2192\n          internal static func button(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"collections.section.all.button\", p1)\n          }\n        }\n        internal enum Files {\n          /// Files\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.files.title\")\n        }\n        internal enum Images {\n          /// Pictures\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.images.title\")\n        }\n        internal enum Links {\n          /// Links\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.links.title\")\n        }\n        internal enum Videos {\n          /// Videos\n          internal static let title = L10n.tr(\"Localizable\", \"collections.section.videos.title\")\n        }\n      }\n    }\n    internal enum Compose {\n      internal enum Contact {\n        /// Conversation\n        internal static let title = L10n.tr(\"Localizable\", \"compose.contact.title\")\n      }\n      internal enum Drafts {\n        /// Messages\n        internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.title\")\n        internal enum Compose {\n          /// Type a message\n          internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.title\")\n          internal enum Delete {\n            internal enum Confirm {\n              /// This action will permanently delete this draft and cannot be undone.\n              internal static let message = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.message\")\n              /// Confirm Deletion\n              internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.title\")\n              internal enum Action {\n                /// Delete\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.delete.confirm.action.title\")\n              }\n            }\n          }\n          internal enum Dismiss {\n            internal enum Confirm {\n              /// Save as draft\n              internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.confirm.title\")\n              internal enum Action {\n                /// Save\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.confirm.action.title\")\n              }\n            }\n            internal enum Delete {\n              internal enum Action {\n                /// Delete\n                internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.compose.dismiss.delete.action.title\")\n              }\n            }\n          }\n          internal enum Subject {\n            /// Tap to set a subject\n            internal static let placeholder = L10n.tr(\"Localizable\", \"compose.drafts.compose.subject.placeholder\")\n          }\n        }\n        internal enum Empty {\n          /// Tap + to compose one\n          internal static let subtitle = L10n.tr(\"Localizable\", \"compose.drafts.empty.subtitle\")\n          /// No messages\n          internal static let title = L10n.tr(\"Localizable\", \"compose.drafts.empty.title\")\n        }\n      }\n      internal enum Message {\n        /// Message\n        internal static let title = L10n.tr(\"Localizable\", \"compose.message.title\")\n      }\n    }\n    internal enum ConnectionRequest {\n      /// Connect\n      internal static let sendButtonTitle = L10n.tr(\"Localizable\", \"connection_request.send_button_title\")\n      /// Connect to %@\n      internal static func title(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"connection_request.title\", String(describing: p1))\n      }\n    }\n    internal enum ContactsUi {\n      /// Requested to connect\n      internal static let connectionRequest = L10n.tr(\"Localizable\", \"contacts_ui.connection_request\")\n      /// Invite others\n      internal static let inviteOthers = L10n.tr(\"Localizable\", \"contacts_ui.invite_others\")\n      /// %@ in Contacts\n      internal static func nameInContacts(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"contacts_ui.name_in_contacts\", String(describing: p1))\n      }\n      /// Search by name\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"contacts_ui.search_placeholder\")\n      /// Invite people\n      internal static let title = L10n.tr(\"Localizable\", \"contacts_ui.title\")\n      internal enum ActionButton {\n        /// Invite\n        internal static let invite = L10n.tr(\"Localizable\", \"contacts_ui.action_button.invite\")\n        /// Open\n        internal static let `open` = L10n.tr(\"Localizable\", \"contacts_ui.action_button.open\")\n      }\n      internal enum InviteSheet {\n        /// Cancel\n        internal static let cancelButtonTitle = L10n.tr(\"Localizable\", \"contacts_ui.invite_sheet.cancel_button_title\")\n      }\n      internal enum Notification {\n        /// Failed to send invitation\n        internal static let invitationFailed = L10n.tr(\"Localizable\", \"contacts_ui.notification.invitation_failed\")\n        /// Invitation sent\n        internal static let invitationSent = L10n.tr(\"Localizable\", \"contacts_ui.notification.invitation_sent\")\n      }\n    }\n    internal enum Content {\n      internal enum File {\n        /// Browse\n        internal static let browse = L10n.tr(\"Localizable\", \"content.file.browse\")\n        /// Downloading\u2026\n        internal static let downloading = L10n.tr(\"Localizable\", \"content.file.downloading\")\n        /// Save\n        internal static let saveAudio = L10n.tr(\"Localizable\", \"content.file.save_audio\")\n        /// Save\n        internal static let saveVideo = L10n.tr(\"Localizable\", \"content.file.save_video\")\n        /// Record a video\n        internal static let takeVideo = L10n.tr(\"Localizable\", \"content.file.take_video\")\n        /// You can send files up to %@\n        internal static func tooBig(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.file.too_big\", String(describing: p1))\n        }\n        /// Upload cancelled\n        internal static let uploadCancelled = L10n.tr(\"Localizable\", \"content.file.upload_cancelled\")\n        /// Upload failed\n        internal static let uploadFailed = L10n.tr(\"Localizable\", \"content.file.upload_failed\")\n        /// Videos\n        internal static let uploadVideo = L10n.tr(\"Localizable\", \"content.file.upload_video\")\n        /// Uploading\u2026\n        internal static let uploading = L10n.tr(\"Localizable\", \"content.file.uploading\")\n      }\n      internal enum Image {\n        /// Save\n        internal static let saveImage = L10n.tr(\"Localizable\", \"content.image.save_image\")\n      }\n      internal enum Message {\n        /// Copy\n        internal static let copy = L10n.tr(\"Localizable\", \"content.message.copy\")\n        /// Delete\n        internal static let delete = L10n.tr(\"Localizable\", \"content.message.delete\")\n        /// Delete\u2026\n        internal static let deleteEllipsis = L10n.tr(\"Localizable\", \"content.message.delete_ellipsis\")\n        /// Details\n        internal static let details = L10n.tr(\"Localizable\", \"content.message.details\")\n        /// Download\n        internal static let download = L10n.tr(\"Localizable\", \"content.message.download\")\n        /// Share\n        internal static let forward = L10n.tr(\"Localizable\", \"content.message.forward\")\n        /// Reveal\n        internal static let goToConversation = L10n.tr(\"Localizable\", \"content.message.go_to_conversation\")\n        /// Like\n        internal static let like = L10n.tr(\"Localizable\", \"content.message.like\")\n        /// Open\n        internal static let `open` = L10n.tr(\"Localizable\", \"content.message.open\")\n        /// Original message\n        internal static let originalLabel = L10n.tr(\"Localizable\", \"content.message.original_label\")\n        /// Reply\n        internal static let reply = L10n.tr(\"Localizable\", \"content.message.reply\")\n        /// Resend\n        internal static let resend = L10n.tr(\"Localizable\", \"content.message.resend\")\n        /// Save\n        internal static let save = L10n.tr(\"Localizable\", \"content.message.save\")\n        /// Sign\n        internal static let sign = L10n.tr(\"Localizable\", \"content.message.sign\")\n        /// Unlike\n        internal static let unlike = L10n.tr(\"Localizable\", \"content.message.unlike\")\n        internal enum AudioMessage {\n          /// Play the audio message\n          internal static let accessibility = L10n.tr(\"Localizable\", \"content.message.audio_message.accessibility\")\n        }\n        internal enum Forward {\n          /// Search\u2026\n          internal static let to = L10n.tr(\"Localizable\", \"content.message.forward.to\")\n        }\n        internal enum LinkAttachment {\n          internal enum AccessibilityLabel {\n            /// SoundCloud playlist preview\n            internal static let soundcloudSet = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.soundcloud_set\")\n            /// SoundCloud song preview\n            internal static let soundcloudSong = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.soundcloud_song\")\n            /// YouTube video preview\n            internal static let youtube = L10n.tr(\"Localizable\", \"content.message.link_attachment.accessibility_label.youtube\")\n          }\n        }\n        internal enum OpenLinkAlert {\n          /// This will take you to\\n%@\n          internal static func message(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.message.open_link_alert.message\", String(describing: p1))\n          }\n          /// Open\n          internal static let `open` = L10n.tr(\"Localizable\", \"content.message.open_link_alert.open\")\n          /// Visit Link\n          internal static let title = L10n.tr(\"Localizable\", \"content.message.open_link_alert.title\")\n        }\n        internal enum Reply {\n          /// You cannot see this message.\n          internal static let brokenMessage = L10n.tr(\"Localizable\", \"content.message.reply.broken_message\")\n          /// Edited\n          internal static let editedMessage = L10n.tr(\"Localizable\", \"content.message.reply.edited_message\")\n          internal enum OriginalTimestamp {\n            /// Original message from %@\n            internal static func date(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.message.reply.original_timestamp.date\", String(describing: p1))\n            }\n            /// Original message from %@\n            internal static func time(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.message.reply.original_timestamp.time\", String(describing: p1))\n            }\n          }\n        }\n      }\n      internal enum Ping {\n        /// %@ pinged\n        internal static func text(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.ping.text\", String(describing: p1))\n        }\n        /// %@ pinged\n        internal static func textYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.ping.text-you\", String(describing: p1))\n        }\n        internal enum Text {\n          /// You\n          internal static let you = L10n.tr(\"Localizable\", \"content.ping.text.you\")\n        }\n      }\n      internal enum Player {\n        /// UNABLE TO PLAY TRACK\n        internal static let unableToPlay = L10n.tr(\"Localizable\", \"content.player.unable_to_play\")\n      }\n      internal enum ReactionsList {\n        /// Liked by\n        internal static let likers = L10n.tr(\"Localizable\", \"content.reactions_list.likers\")\n      }\n      internal enum System {\n        /// and you\n        internal static let andYouDative = L10n.tr(\"Localizable\", \"content.system.and_you_dative\")\n        /// Connected to %@\\nStart a conversation\n        internal static func connectedTo(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.connected_to\", String(describing: p1))\n        }\n        /// Connecting to %@.\\nStart a conversation\n        internal static func connectingTo(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.connecting_to\", String(describing: p1))\n        }\n        /// Start a conversation with %@\n        internal static func continuedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.continued_conversation\", String(describing: p1))\n        }\n        /// Deleted: %@\n        internal static func deletedMessagePrefixTimestamp(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.deleted_message_prefix_timestamp\", String(describing: p1))\n        }\n        /// Edited: %@\n        internal static func editedMessagePrefixTimestamp(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.edited_message_prefix_timestamp\", String(describing: p1))\n        }\n        /// %@ left\n        internal static func ephemeralTimeRemaining(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.ephemeral_time_remaining\", String(describing: p1))\n        }\n        /// Sending failed.\n        internal static let failedtosendMessageTimestamp = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp\")\n        /// Delete\n        internal static let failedtosendMessageTimestampDelete = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp_delete\")\n        /// Resend\n        internal static let failedtosendMessageTimestampResend = L10n.tr(\"Localizable\", \"content.system.failedtosend_message_timestamp_resend\")\n        /// All fingerprints are verified\n        internal static let isVerified = L10n.tr(\"Localizable\", \"content.system.is_verified\")\n        /// Tap to like\n        internal static let likeTooltip = L10n.tr(\"Localizable\", \"content.system.like_tooltip\")\n        /// Delivered\n        internal static let messageDeliveredTimestamp = L10n.tr(\"Localizable\", \"content.system.message_delivered_timestamp\")\n        /// %@ turned read receipts off for everyone\n        internal static func messageReadReceiptOff(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_off\", String(describing: p1))\n        }\n        /// %@ turned read receipts off for everyone\n        internal static func messageReadReceiptOffYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_off-you\", String(describing: p1))\n        }\n        /// %@ turned read receipts on for everyone\n        internal static func messageReadReceiptOn(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on\", String(describing: p1))\n        }\n        /// %@ turned read receipts on for everyone\n        internal static func messageReadReceiptOnYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on-you\", String(describing: p1))\n        }\n        /// Read receipts are on\n        internal static let messageReadReceiptOnAddToGroup = L10n.tr(\"Localizable\", \"content.system.message_read_receipt_on_add_to_group\")\n        /// Seen\n        internal static let messageReadTimestamp = L10n.tr(\"Localizable\", \"content.system.message_read_timestamp\")\n        /// Sent\n        internal static let messageSentTimestamp = L10n.tr(\"Localizable\", \"content.system.message_sent_timestamp\")\n        /// %@ set the message timer to %@\n        internal static func messageTimerChanges(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_changes\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ set the message timer to %@\n        internal static func messageTimerChangesYou(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_changes-you\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ turned off the message timer\n        internal static func messageTimerOff(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_off\", String(describing: p1))\n        }\n        /// %@ turned off the message timer\n        internal static func messageTimerOffYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.message_timer_off-you\", String(describing: p1))\n        }\n        /// Plural format key: \"%#@d_new_devices@\"\n        internal static func newDevices(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.new_devices\", p1)\n        }\n        /// New user joined.\n        internal static let newUsers = L10n.tr(\"Localizable\", \"content.system.new_users\")\n        /// %@ added %@\n        internal static func otherAddedParticipant(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_added_participant\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ added you\n        internal static func otherAddedYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_added_you\", String(describing: p1))\n        }\n        /// %@ left\n        internal static func otherLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_left\", String(describing: p1))\n        }\n        /// %@ removed %@\n        internal static func otherRemovedOther(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_removed_other\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ removed you\n        internal static func otherRemovedYou(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_removed_you\", String(describing: p1))\n        }\n        /// %@ removed the conversation name\n        internal static func otherRenamedConvToNothing(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_renamed_conv_to_nothing\", String(describing: p1))\n        }\n        /// %@ started a conversation with %@\n        internal static func otherStartedConversation(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_started_conversation\", String(describing: p1), String(describing: p2))\n        }\n        /// %@ called\n        internal static func otherWantedToTalk(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.other_wanted_to_talk\", String(describing: p1))\n        }\n        /// %@ and %@\n        internal static func participants1Other(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.participants_1_other\", String(describing: p1), String(describing: p2))\n        }\n        /// Plural format key: \"%@ %#@and_number_of_others@\"\n        internal static func participantsNOthers(_ p1: Any, _ p2: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.participants_n_others\", String(describing: p1), p2)\n        }\n        /// You\n        internal static let participantsYou = L10n.tr(\"Localizable\", \"content.system.participants_you\")\n        /// Sending\u2026\n        internal static let pendingMessageTimestamp = L10n.tr(\"Localizable\", \"content.system.pending_message_timestamp\")\n        /// Plural format key: \"%@%#@d_number_of_others@ started using %#@d_new_devices@\"\n        internal static func peopleStartedUsing(_ p1: Any, _ p2: Int, _ p3: Int) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.people_started_using\", String(describing: p1), p2, p3)\n        }\n        /// You started using [this device](%@) again. Messages sent in the meantime will not appear here.\n        internal static func reactivatedDevice(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.reactivated_device\", String(describing: p1))\n        }\n        /// **You** started using [a new device](%@)\n        internal static func selfUserNewClient(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.self_user_new_client\", String(describing: p1))\n        }\n        /// **You** started using [this device](%@)\n        internal static func selfUserNewSelfClient(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.self_user_new_self_client\", String(describing: p1))\n        }\n        /// **You** unverified one of [%1$@\u2019s devices](%2$@)\n        internal static func unverifiedOtherDevices(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.unverified_other_devices\", String(describing: p1), String(describing: p2))\n        }\n        /// **You** unverified one of [your devices](%@)\n        internal static func unverifiedSelfDevices(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.unverified_self_devices\", String(describing: p1))\n        }\n        /// Verify devices\n        internal static let verifyDevices = L10n.tr(\"Localizable\", \"content.system.verify_devices\")\n        /// you\n        internal static let youAccusative = L10n.tr(\"Localizable\", \"content.system.you_accusative\")\n        /// You added %@\n        internal static func youAddedParticipant(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_added_participant\", String(describing: p1))\n        }\n        /// you\n        internal static let youDative = L10n.tr(\"Localizable\", \"content.system.you_dative\")\n        /// You left\n        internal static let youLeft = L10n.tr(\"Localizable\", \"content.system.you_left\")\n        /// you\n        internal static let youNominative = L10n.tr(\"Localizable\", \"content.system.you_nominative\")\n        /// You removed %@\n        internal static func youRemovedOther(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_removed_other\", String(describing: p1))\n        }\n        /// You removed the conversation name\n        internal static let youRenamedConvToNothing = L10n.tr(\"Localizable\", \"content.system.you_renamed_conv_to_nothing\")\n        /// You\n        internal static let youStarted = L10n.tr(\"Localizable\", \"content.system.you_started\")\n        /// You started a conversation with %@\n        internal static func youStartedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"content.system.you_started_conversation\", String(describing: p1))\n        }\n        /// You called\n        internal static let youWantedToTalk = L10n.tr(\"Localizable\", \"content.system.you_wanted_to_talk\")\n        internal enum Call {\n          /// %@ called\n          internal static func called(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.called\", String(describing: p1))\n          }\n          /// %@ called\n          internal static func calledYou(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.called-you\", String(describing: p1))\n          }\n          /// Plural format key: \"%#@missed_call@\"\n          internal static func missedCall(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.call.missed-call\", p1)\n          }\n          /// Missed call\n          internal static let missedCallYou = L10n.tr(\"Localizable\", \"content.system.call.missed-call-you\")\n          internal enum Called {\n            /// You\n            internal static let you = L10n.tr(\"Localizable\", \"content.system.call.called.you\")\n          }\n          internal enum MissedCall {\n            /// Plural format key: \"%#@missed_call_from@\"\n            internal static func groups(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups\", p1)\n            }\n            /// Plural format key: \"%#@missed_call_from@\"\n            internal static func groupsYou(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups-you\", p1)\n            }\n            internal enum Groups {\n              /// You\n              internal static let you = L10n.tr(\"Localizable\", \"content.system.call.missed-call.groups.you\")\n            }\n          }\n        }\n        internal enum CannotDecrypt {\n          /// (Fixed error: %d ID: %@)\n          internal static func errorDetails(_ p1: Int, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.error_details\", p1, String(describing: p2))\n          }\n          /// A message from **%@** could not be decrypted.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.other\", String(describing: p1))\n          }\n          /// Fix future messages\n          internal static let resetSession = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.reset_session\")\n          /// A message from **you** could not be decrypted.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt.self\")\n        }\n        internal enum CannotDecryptIdentityChanged {\n          /// **%@\u2019s** device identity changed. Undelivered message.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_identity_changed.other\", String(describing: p1))\n          }\n          /// **Your** device identity changed. Undelivered message.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_identity_changed.self\")\n        }\n        internal enum CannotDecryptResolved {\n          /// You can now decrypt messages from **%1$@**. To recover lost messages, **ask %1$@ to resend them.**\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_resolved.other\", String(describing: p1))\n          }\n          /// You can now decrypt messages from yourself. To recover lost messages, **you need to resend them.**\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.cannot_decrypt_resolved.self\")\n        }\n        internal enum Conversation {\n          internal enum Guest {\n            /// %@ joined\n            internal static func joined(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.guest.joined\", String(describing: p1))\n            }\n          }\n          internal enum Invite {\n            /// Invite people\n            internal static let button = L10n.tr(\"Localizable\", \"content.system.conversation.invite.button\")\n            /// Services and people outside your team can join this conversation.\n            internal static let title = L10n.tr(\"Localizable\", \"content.system.conversation.invite.title\")\n          }\n          internal enum Other {\n            /// %@ added %@\n            internal static func added(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.added\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ left\n            internal static func `left`(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.left\", String(describing: p1))\n            }\n            /// %@ removed %@\n            internal static func removed(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.removed\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ started a conversation with %@\n            internal static func started(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.other.started\", String(describing: p1), String(describing: p2))\n            }\n          }\n          internal enum Team {\n            /// %@ was removed from the team.\n            internal static func memberLeave(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.team.member-leave\", String(describing: p1))\n            }\n          }\n          internal enum WithName {\n            /// with\n            internal static let participants = L10n.tr(\"Localizable\", \"content.system.conversation.with_name.participants\")\n            /// %@ started the conversation\n            internal static func title(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.with_name.title\", String(describing: p1))\n            }\n            /// %@ started the conversation\n            internal static func titleYou(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.with_name.title-you\", String(describing: p1))\n            }\n          }\n          internal enum You {\n            /// %@ added %@\n            internal static func added(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.added\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ left\n            internal static func `left`(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.left\", String(describing: p1))\n            }\n            /// %@ removed %@\n            internal static func removed(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.removed\", String(describing: p1), String(describing: p2))\n            }\n            /// %@ started a conversation with %@\n            internal static func started(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.conversation.you.started\", String(describing: p1), String(describing: p2))\n            }\n          }\n        }\n        internal enum MessageLegalHold {\n          /// Legal hold deactivated for this conversation\n          internal static let disabled = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.disabled\")\n          /// This conversation is under legal hold\n          internal static let enabled = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.enabled\")\n          /// Learn more\n          internal static let learnMore = L10n.tr(\"Localizable\", \"content.system.message_legal_hold.learn_more\")\n        }\n        internal enum MissingMessages {\n          /// Plural format key: \"%@ %#@lu_number_of_users@\"\n          internal static func subtitleAdded(_ p1: Any, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_added\", String(describing: p1), p2)\n          }\n          /// Plural format key: \"%@ %#@lu_number_of_users@\"\n          internal static func subtitleRemoved(_ p1: Any, _ p2: Int) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_removed\", String(describing: p1), p2)\n          }\n          /// Meanwhile,\n          internal static let subtitleStart = L10n.tr(\"Localizable\", \"content.system.missing_messages.subtitle_start\")\n          /// You haven\u2019t used this device for a while. Some messages may not appear here.\n          internal static let title = L10n.tr(\"Localizable\", \"content.system.missing_messages.title\")\n        }\n        internal enum RenamedConv {\n          /// %@ renamed the conversation\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.renamed_conv.title\", String(describing: p1))\n          }\n          /// %@ renamed the conversation\n          internal static func titleYou(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.renamed_conv.title-you\", String(describing: p1))\n          }\n          internal enum Title {\n            /// You\n            internal static let you = L10n.tr(\"Localizable\", \"content.system.renamed_conv.title.you\")\n          }\n        }\n        internal enum Services {\n          /// Services have access to the content of this conversation\n          internal static let warning = L10n.tr(\"Localizable\", \"content.system.services.warning\")\n        }\n        internal enum SessionReset {\n          /// **%@ was unable to decrypt some of your messages but has solved the issue**. This affected all conversations you share together.\n          internal static func other(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.session_reset.other\", String(describing: p1))\n          }\n          /// **You were unable to decrypt some of your messages but you solved the issue**. This affected all conversations.\n          internal static let `self` = L10n.tr(\"Localizable\", \"content.system.session_reset.self\")\n        }\n        internal enum StartedConversation {\n          /// all team members\n          internal static let completeTeam = L10n.tr(\"Localizable\", \"content.system.started_conversation.complete_team\")\n          /// and %@\n          internal static func truncatedPeople(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"content.system.started_conversation.truncated_people\", String(describing: p1))\n          }\n          internal enum CompleteTeam {\n            /// all team members and %@ guests\n            internal static func guests(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.started_conversation.complete_team.guests\", String(describing: p1))\n            }\n          }\n          internal enum TruncatedPeople {\n            /// %@ others\n            internal static func others(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"content.system.started_conversation.truncated_people.others\", String(describing: p1))\n            }\n          }\n        }\n        internal enum UnknownMessage {\n          /// This message can\u2019t be displayed. You may be using an older version of Wire.\n          internal static let body = L10n.tr(\"Localizable\", \"content.system.unknown_message.body\")\n        }\n      }\n    }\n    internal enum Conversation {\n      /// Guests are present\n      internal static let guestsPresent = L10n.tr(\"Localizable\", \"conversation.guests_present\")\n      /// Guests and services are present\n      internal static let guestsServicesPresent = L10n.tr(\"Localizable\", \"conversation.guests_services_present\")\n      /// Services are active\n      internal static let servicesPresent = L10n.tr(\"Localizable\", \"conversation.services_present\")\n      internal enum Action {\n        /// Search\n        internal static let search = L10n.tr(\"Localizable\", \"conversation.action.search\")\n      }\n      internal enum Alert {\n        /// The message is deleted.\n        internal static let messageDeleted = L10n.tr(\"Localizable\", \"conversation.alert.message_deleted\")\n      }\n      internal enum Call {\n        internal enum ManyParticipantsConfirmation {\n          /// Call\n          internal static let call = L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.call\")\n          /// This will call %d people\n          internal static func message(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.message\", p1)\n          }\n          /// Start a call\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.call.many_participants_confirmation.title\")\n        }\n      }\n      internal enum ConnectionView {\n        /// in Contacts\n        internal static let inAddressBook = L10n.tr(\"Localizable\", \"conversation.connection_view.in_address_book\")\n      }\n      internal enum Create {\n        internal enum GroupName {\n          /// Group name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"conversation.create.group_name.placeholder\")\n          /// Create group\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.group_name.title\")\n        }\n        internal enum Guests {\n          /// Open this conversation to services and people outside your team.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"conversation.create.guests.subtitle\")\n          /// Allow guests and services\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.guests.title\")\n        }\n        internal enum Guidance {\n          /// At least 1 character\n          internal static let empty = L10n.tr(\"Localizable\", \"conversation.create.guidance.empty\")\n          /// Too many characters\n          internal static let toolong = L10n.tr(\"Localizable\", \"conversation.create.guidance.toolong\")\n        }\n        internal enum Options {\n          /// Guests and services: %@, Read receipts: %@\n          internal static func subtitle(_ p1: Any, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.create.options.subtitle\", String(describing: p1), String(describing: p2))\n          }\n          /// Conversation options\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.options.title\")\n        }\n        internal enum Receipts {\n          /// When this is on, people can see when their messages in this conversation are read.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"conversation.create.receipts.subtitle\")\n          /// Read receipts\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.create.receipts.title\")\n        }\n      }\n      internal enum DeleteRequestDialog {\n        /// This will delete the group and all content for all participants on all devices. There is no option to restore the content. All participants will be notified.\n        internal static let message = L10n.tr(\"Localizable\", \"conversation.delete_request_dialog.message\")\n        /// Delete group conversation?\n        internal static let title = L10n.tr(\"Localizable\", \"conversation.delete_request_dialog.title\")\n      }\n      internal enum DeleteRequestErrorDialog {\n        /// Delete Group\n        internal static let buttonDeleteGroup = L10n.tr(\"Localizable\", \"conversation.delete_request_error_dialog.button_delete_group\")\n        /// An error occurred while trying to delete the group %@. Please try again.\n        internal static func title(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.delete_request_error_dialog.title\", String(describing: p1))\n        }\n      }\n      internal enum Displayname {\n        /// Empty group conversation\n        internal static let emptygroup = L10n.tr(\"Localizable\", \"conversation.displayname.emptygroup\")\n      }\n      internal enum InputBar {\n        /// Cancel reply\n        internal static let closeReply = L10n.tr(\"Localizable\", \"conversation.input_bar.close_reply\")\n        /// Type a message\n        internal static let placeholder = L10n.tr(\"Localizable\", \"conversation.input_bar.placeholder\")\n        /// Timed message\n        internal static let placeholderEphemeral = L10n.tr(\"Localizable\", \"conversation.input_bar.placeholder_ephemeral\")\n        /// Verified\n        internal static let verified = L10n.tr(\"Localizable\", \"conversation.input_bar.verified\")\n        internal enum AudioMessage {\n          /// Send\n          internal static let send = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.send\")\n          internal enum Keyboard {\n            /// Choose a filter above\n            internal static let filterTip = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.keyboard.filter_tip\")\n            /// Tap to record\\nYou can  %@  it after that\n            internal static func recordTip(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.keyboard.record_tip\", String(describing: p1))\n            }\n          }\n          internal enum TooLong {\n            /// Audio messages are limited to %@.\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long.message\", String(describing: p1))\n            }\n            /// Recording Stopped\n            internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long.title\")\n          }\n          internal enum TooLongSize {\n            /// File size for audio messages is limited to %@.\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.too_long_size.message\", String(describing: p1))\n            }\n          }\n          internal enum Tooltip {\n            /// Swipe up to send\n            internal static let pullSend = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.tooltip.pull_send\")\n            /// Tap to send\n            internal static let tapSend = L10n.tr(\"Localizable\", \"conversation.input_bar.audio_message.tooltip.tap_send\")\n          }\n        }\n        internal enum MessagePreview {\n          /// Replying to message: %@\n          internal static func accessibilityDescription(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility_description\", String(describing: p1))\n          }\n          /// Audio Message\n          internal static let audio = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.audio\")\n          /// File\n          internal static let file = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.file\")\n          /// Image\n          internal static let image = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.image\")\n          /// Location\n          internal static let location = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.location\")\n          /// Video\n          internal static let video = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.video\")\n          internal enum Accessibility {\n            /// Audio message\n            internal static let audioMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.audio_message\")\n            /// File message (%@)\n            internal static func fileMessage(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.file_message\", String(describing: p1))\n            }\n            /// Image message\n            internal static let imageMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.image_message\")\n            /// Location message\n            internal static let locationMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.location_message\")\n            /// %@ from %@\n            internal static func messageFrom(_ p1: Any, _ p2: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.message_from\", String(describing: p1), String(describing: p2))\n            }\n            /// Unknown message\n            internal static let unknownMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.unknown_message\")\n            /// Video message\n            internal static let videoMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.message_preview.accessibility.video_message\")\n          }\n        }\n        internal enum MessageTooLong {\n          /// You can send messages up to %d characters long.\n          internal static func message(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.input_bar.message_too_long.message\", p1)\n          }\n          /// Message too long\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.message_too_long.title\")\n        }\n        internal enum OngoingCallAlert {\n          /// Ongoing call\n          internal static let title = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.title\")\n          internal enum Audio {\n            /// You can\u2019t record an audio message during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.audio.message\")\n          }\n          internal enum Photo {\n            /// You can\u2019t take a picture during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.photo.message\")\n          }\n          internal enum Video {\n            /// You can\u2019t record a video during a call.\n            internal static let message = L10n.tr(\"Localizable\", \"conversation.input_bar.ongoing_call_alert.video.message\")\n          }\n        }\n        internal enum Shortcut {\n          /// Cancel\n          internal static let cancelEditingMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.cancel_editing_message\")\n          /// Choose next mention\n          internal static let chooseNextMention = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.choose_next_mention\")\n          /// Choose previous mention\n          internal static let choosePreviousMention = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.choose_previous_mention\")\n          /// Edit Last Message\n          internal static let editLastMessage = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.edit_last_message\")\n          /// Insert line break\n          internal static let newline = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.newline\")\n          /// Send Message\n          internal static let send = L10n.tr(\"Localizable\", \"conversation.input_bar.shortcut.send\")\n        }\n      }\n      internal enum InviteMorePeople {\n        /// Add People\n        internal static let buttonTitle = L10n.tr(\"Localizable\", \"conversation.invite_more_people.button_title\")\n        /// Add people to this conversation\n        internal static let description = L10n.tr(\"Localizable\", \"conversation.invite_more_people.description\")\n        /// https://support.wire.com\n        internal static let explanationUrl = L10n.tr(\"Localizable\", \"conversation.invite_more_people.explanation_url\")\n        /// Spread the word!\n        internal static let title = L10n.tr(\"Localizable\", \"conversation.invite_more_people.title\")\n      }\n      internal enum Silenced {\n        internal enum Status {\n          internal enum Message {\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func genericMessage(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.generic_message\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func knock(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.knock\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func mention(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.mention\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func missedcall(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.missedcall\", p1)\n            }\n            /// Plural format key: \"%#@d_number_of_new@\"\n            internal static func reply(_ p1: Int) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.silenced.status.message.reply\", p1)\n            }\n          }\n        }\n      }\n      internal enum Status {\n        /// Blocked\n        internal static let blocked = L10n.tr(\"Localizable\", \"conversation.status.blocked\")\n        /// %@ is calling\u2026\n        internal static func incomingCall(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.incoming_call\", String(describing: p1))\n        }\n        /// Poor connection\n        internal static let poorConnection = L10n.tr(\"Localizable\", \"conversation.status.poor_connection\")\n        /// Muted\n        internal static let silenced = L10n.tr(\"Localizable\", \"conversation.status.silenced\")\n        /// Someone\n        internal static let someone = L10n.tr(\"Localizable\", \"conversation.status.someone\")\n        /// %@ started a conversation\n        internal static func startedConversation(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.started_conversation\", String(describing: p1))\n        }\n        /// Typing a message\u2026\n        internal static let typing = L10n.tr(\"Localizable\", \"conversation.status.typing\")\n        /// \u26a0\ufe0f Unsent message\n        internal static let unsent = L10n.tr(\"Localizable\", \"conversation.status.unsent\")\n        /// You\n        internal static let you = L10n.tr(\"Localizable\", \"conversation.status.you\")\n        /// You left\n        internal static let youLeft = L10n.tr(\"Localizable\", \"conversation.status.you_left\")\n        /// %@ added you\n        internal static func youWasAdded(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"conversation.status.you_was_added\", String(describing: p1))\n        }\n        /// You were removed\n        internal static let youWereRemoved = L10n.tr(\"Localizable\", \"conversation.status.you_were_removed\")\n        internal enum IncomingCall {\n          /// Someone is calling\u2026\n          internal static let unknown = L10n.tr(\"Localizable\", \"conversation.status.incoming_call.unknown\")\n        }\n        internal enum Message {\n          /// Shared an audio message\n          internal static let audio = L10n.tr(\"Localizable\", \"conversation.status.message.audio\")\n          /// Sent a message\n          internal static let ephemeral = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral\")\n          /// Shared a file\n          internal static let file = L10n.tr(\"Localizable\", \"conversation.status.message.file\")\n          /// Shared a picture\n          internal static let image = L10n.tr(\"Localizable\", \"conversation.status.message.image\")\n          /// Pinged\n          internal static let knock = L10n.tr(\"Localizable\", \"conversation.status.message.knock\")\n          /// Shared a link\n          internal static let link = L10n.tr(\"Localizable\", \"conversation.status.message.link\")\n          /// Shared a location\n          internal static let location = L10n.tr(\"Localizable\", \"conversation.status.message.location\")\n          /// %@\n          internal static func mention(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.mention\", String(describing: p1))\n          }\n          /// Missed call\n          internal static let missedcall = L10n.tr(\"Localizable\", \"conversation.status.message.missedcall\")\n          /// %@\n          internal static func reply(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.reply\", String(describing: p1))\n          }\n          /// %@\n          internal static func text(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.message.text\", String(describing: p1))\n          }\n          /// Shared a video\n          internal static let video = L10n.tr(\"Localizable\", \"conversation.status.message.video\")\n          internal enum Ephemeral {\n            /// Someone sent a message\n            internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.group\")\n            /// Pinged\n            internal static let knock = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.knock\")\n            /// Mentioned you\n            internal static let mention = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.mention\")\n            /// Replied to your message\n            internal static let reply = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.reply\")\n            internal enum Knock {\n              /// Someone pinged\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.knock.group\")\n            }\n            internal enum Mention {\n              /// Someone mentioned you\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.mention.group\")\n            }\n            internal enum Reply {\n              /// Someone replied to your message\n              internal static let group = L10n.tr(\"Localizable\", \"conversation.status.message.ephemeral.reply.group\")\n            }\n          }\n          internal enum Missedcall {\n            /// Missed call from %@\n            internal static func groups(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"conversation.status.message.missedcall.groups\", String(describing: p1))\n            }\n          }\n        }\n        internal enum SecutityAlert {\n          /// New security alert\n          internal static let `default` = L10n.tr(\"Localizable\", \"conversation.status.secutity_alert.default\")\n        }\n        internal enum Typing {\n          /// %@: typing a message\u2026\n          internal static func group(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation.status.typing.group\", String(describing: p1))\n          }\n        }\n      }\n      internal enum Voiceover {\n        /// legal hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"conversation.voiceover.legalhold\")\n        /// verified\n        internal static let verified = L10n.tr(\"Localizable\", \"conversation.voiceover.verified\")\n        internal enum Value {\n          /// active\n          internal static let active = L10n.tr(\"Localizable\", \"conversation.voiceover.value.active\")\n          /// disabled\n          internal static let disabled = L10n.tr(\"Localizable\", \"conversation.voiceover.value.disabled\")\n        }\n      }\n    }\n    internal enum ConversationDetails {\n      internal enum OpenButton {\n        /// Double tap to view the details of the conversation.\n        internal static let accessibilityHint = L10n.tr(\"Localizable\", \"conversation_details.open_button.accessibility_hint\")\n      }\n    }\n    internal enum ConversationList {\n      internal enum DataUsagePermissionAlert {\n        /// I Agree\n        internal static let agree = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.agree\")\n        /// No\n        internal static let disagree = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.disagree\")\n        /// I agree that Wire may create and use anonymous usage and error reports to improve the Wire App. I can revoke this consent at any time.\n        internal static let message = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.message\")\n        /// Help us make Wire better\n        internal static let title = L10n.tr(\"Localizable\", \"conversation_list.data_usage_permission_alert.title\")\n      }\n      internal enum Empty {\n        internal enum AllArchived {\n          /// Everything archived\n          internal static let message = L10n.tr(\"Localizable\", \"conversation_list.empty.all_archived.message\")\n        }\n        internal enum NoContacts {\n          /// Start a conversation or\\ncreate a group.\n          internal static let message = L10n.tr(\"Localizable\", \"conversation_list.empty.no_contacts.message\")\n        }\n      }\n      internal enum Header {\n        internal enum SelfTeam {\n          /// %@ account.\n          internal static func accessibilityValue(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value\", String(describing: p1))\n          }\n          internal enum AccessibilityValue {\n            /// Active now.\n            internal static let active = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.active\")\n            /// Has new messages.\n            internal static let hasNewMessages = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.has_new_messages\")\n            /// Tap to activate.\n            internal static let inactive = L10n.tr(\"Localizable\", \"conversation_list.header.self_team.accessibility_value.inactive\")\n          }\n        }\n      }\n      internal enum RightAccessory {\n        internal enum JoinButton {\n          /// Join\n          internal static let title = L10n.tr(\"Localizable\", \"conversation_list.right_accessory.join_button.title\")\n        }\n      }\n      internal enum Voiceover {\n        internal enum BottomBar {\n          internal enum ArchivedButton {\n            /// list of archived conversations\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.archived_button.hint\")\n            /// archived\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.archived_button.label\")\n          }\n          internal enum CameraButton {\n            /// take picture and send quickly\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.camera_button.hint\")\n            /// camera\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.camera_button.label\")\n          }\n          internal enum ComposeButton {\n            /// compose messages and save for later\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.compose_button.hint\")\n            /// compose\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.compose_button.label\")\n          }\n          internal enum ContactsButton {\n            /// search for people on Wire\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.contacts_button.hint\")\n            /// contacts\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.contacts_button.label\")\n          }\n          internal enum FolderButton {\n            /// list of conversations organized in folders\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.folder_button.hint\")\n            /// folders\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.folder_button.label\")\n          }\n          internal enum RecentButton {\n            /// list of recent conversations\n            internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.recent_button.hint\")\n            /// recent\n            internal static let label = L10n.tr(\"Localizable\", \"conversation_list.voiceover.bottom_bar.recent_button.label\")\n          }\n        }\n        internal enum OpenConversation {\n          /// Open conversation\n          internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.open_conversation.hint\")\n        }\n        internal enum Status {\n          /// active call\n          internal static let activeCall = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.active_call\")\n          /// you are mentioned\n          internal static let mention = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.mention\")\n          /// missed call\n          internal static let missedCall = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.missed_call\")\n          /// pause media\n          internal static let pauseMedia = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.pause_media\")\n          /// pending\n          internal static let pendingConnection = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.pending_connection\")\n          /// ping\n          internal static let ping = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.ping\")\n          /// play media\n          internal static let playMedia = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.play_media\")\n          /// reply\n          internal static let reply = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.reply\")\n          /// silenced\n          internal static let silenced = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.silenced\")\n          /// typing\n          internal static let typing = L10n.tr(\"Localizable\", \"conversation_list.voiceover.status.typing\")\n        }\n        internal enum UnreadMessages {\n          /// You have unread messages.\n          internal static let hint = L10n.tr(\"Localizable\", \"conversation_list.voiceover.unread_messages.hint\")\n        }\n      }\n    }\n    internal enum CreatePasscode {\n      /// It will be used to unlock Wire. If you forget this passcode **it can not be recovered.**\n      internal static let infoLabel = L10n.tr(\"Localizable\", \"create_passcode.info_label\")\n      /// Create a passcode to unlock Wire. Please remember it, as **it can not be recovered.**\n      internal static let infoLabelForcedApplock = L10n.tr(\"Localizable\", \"create_passcode.info_label_forced_applock\")\n      /// Create a passcode\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"create_passcode.title_label\")\n      internal enum CreateButton {\n        /// create passcode\n        internal static let title = L10n.tr(\"Localizable\", \"create_passcode.create_button.title\")\n      }\n      internal enum Textfield {\n        /// \n        internal static let placeholder = L10n.tr(\"Localizable\", \"create_passcode.textfield.placeholder\")\n      }\n      internal enum Validation {\n        /// A lowercase letter\n        internal static let noLowercaseChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_lowercase_char\")\n        /// A number\n        internal static let noNumber = L10n.tr(\"Localizable\", \"create_passcode.validation.no_number\")\n        /// A special character\n        internal static let noSpecialChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_special_char\")\n        /// An uppercase letter\n        internal static let noUppercaseChar = L10n.tr(\"Localizable\", \"create_passcode.validation.no_uppercase_char\")\n        /// At least eight characters long\n        internal static let tooShort = L10n.tr(\"Localizable\", \"create_passcode.validation.too_short\")\n      }\n    }\n    internal enum DarkTheme {\n      internal enum Option {\n        /// Dark\n        internal static let dark = L10n.tr(\"Localizable\", \"dark_theme.option.dark\")\n        /// Light\n        internal static let light = L10n.tr(\"Localizable\", \"dark_theme.option.light\")\n        /// Sync with system settings\n        internal static let system = L10n.tr(\"Localizable\", \"dark_theme.option.system\")\n      }\n    }\n    internal enum Databaseloadingfailure {\n      internal enum Alert {\n        /// Delete Database\n        internal static let deleteDatabase = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database\")\n        /// The database could not be loaded due to insufficient storage. Review your device storage usage and try again.\n        internal static let message = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.message\")\n        /// Go to Settings\n        internal static let settings = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.settings\")\n        /// Not Enough Storage\n        internal static let title = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.title\")\n        internal enum DeleteDatabase {\n          /// Continue\n          internal static let `continue` = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database.continue\")\n          /// By deleting the database, all local data and messages for this account will be permanently deleted.\n          internal static let message = L10n.tr(\"Localizable\", \"databaseloadingfailure.alert.delete_database.message\")\n        }\n      }\n    }\n    internal enum Device {\n      /// Not Verified\n      internal static let notVerified = L10n.tr(\"Localizable\", \"device.not_verified\")\n      /// Verified\n      internal static let verified = L10n.tr(\"Localizable\", \"device.verified\")\n      internal enum Class {\n        /// Desktop\n        internal static let desktop = L10n.tr(\"Localizable\", \"device.class.desktop\")\n        /// Legal Hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"device.class.legalhold\")\n        /// Phone\n        internal static let phone = L10n.tr(\"Localizable\", \"device.class.phone\")\n        /// Tablet\n        internal static let tablet = L10n.tr(\"Localizable\", \"device.class.tablet\")\n        /// Unknown\n        internal static let unknown = L10n.tr(\"Localizable\", \"device.class.unknown\")\n      }\n      internal enum `Type` {\n        /// Legal Hold\n        internal static let legalhold = L10n.tr(\"Localizable\", \"device.type.legalhold\")\n        /// Permanent\n        internal static let permanent = L10n.tr(\"Localizable\", \"device.type.permanent\")\n        /// Temporary\n        internal static let temporary = L10n.tr(\"Localizable\", \"device.type.temporary\")\n        /// Unknown\n        internal static let unknown = L10n.tr(\"Localizable\", \"device.type.unknown\")\n      }\n    }\n    internal enum DigitalSignature {\n      internal enum Alert {\n        /// Please save and read the document before signing it.\n        internal static let downloadNecessary = L10n.tr(\"Localizable\", \"digital_signature.alert.download_necessary\")\n        /// Unfortunately, your digital signature failed.\n        internal static let error = L10n.tr(\"Localizable\", \"digital_signature.alert.error\")\n        internal enum Error {\n          /// Unfortunately, the signature form did not open. Please try again.\n          internal static let noConsentUrl = L10n.tr(\"Localizable\", \"digital_signature.alert.error.no_consent_url\")\n          /// Unfortunately, your digital signature failed. Please try again.\n          internal static let noSignature = L10n.tr(\"Localizable\", \"digital_signature.alert.error.no_signature\")\n        }\n      }\n    }\n    internal enum Email {\n      /// Email\n      internal static let placeholder = L10n.tr(\"Localizable\", \"email.placeholder\")\n      internal enum Guidance {\n        /// Invalid email address\n        internal static let invalid = L10n.tr(\"Localizable\", \"email.guidance.invalid\")\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"email.guidance.toolong\")\n        /// Email is too short\n        internal static let tooshort = L10n.tr(\"Localizable\", \"email.guidance.tooshort\")\n      }\n    }\n    internal enum Error {\n      /// Please enter a valid email address\n      internal static let email = L10n.tr(\"Localizable\", \"error.email\")\n      /// Please enter your full name\n      internal static let fullName = L10n.tr(\"Localizable\", \"error.full_name\")\n      /// Please enter your full name and a valid email address\n      internal static let nameAndEmail = L10n.tr(\"Localizable\", \"error.name_and_email\")\n      /// Couldn\u2019t update your password.\n      internal static let updatingPassword = L10n.tr(\"Localizable\", \"error.updating_password\")\n      internal enum Call {\n        /// Please try calling again in several minutes.\n        internal static let general = L10n.tr(\"Localizable\", \"error.call.general\")\n        /// Please cancel the cellular call before calling on Wire.\n        internal static let gsmOngoing = L10n.tr(\"Localizable\", \"error.call.gsm_ongoing\")\n        /// You might experience issues during the call\n        internal static let slowConnection = L10n.tr(\"Localizable\", \"error.call.slow_connection\")\n        internal enum General {\n          /// Call error\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.general.title\")\n        }\n        internal enum GsmOngoing {\n          /// Cellular call\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.gsm_ongoing.title\")\n        }\n        internal enum SlowConnection {\n          /// Call anyway\n          internal static let callAnyway = L10n.tr(\"Localizable\", \"error.call.slow_connection.call_anyway\")\n          /// Slow connection\n          internal static let title = L10n.tr(\"Localizable\", \"error.call.slow_connection.title\")\n        }\n      }\n      internal enum Conversation {\n        /// Adding the participant failed\n        internal static let cannotAdd = L10n.tr(\"Localizable\", \"error.conversation.cannot_add\")\n        /// Removing the participant failed\n        internal static let cannotRemove = L10n.tr(\"Localizable\", \"error.conversation.cannot_remove\")\n        /// There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\n        internal static let offline = L10n.tr(\"Localizable\", \"error.conversation.offline\")\n        /// Error\n        internal static let title = L10n.tr(\"Localizable\", \"error.conversation.title\")\n        /// The conversation is full\n        internal static let tooManyMembers = L10n.tr(\"Localizable\", \"error.conversation.too_many_members\")\n      }\n      internal enum Email {\n        /// Please enter a valid email address\n        internal static let invalid = L10n.tr(\"Localizable\", \"error.email.invalid\")\n      }\n      internal enum GroupCall {\n        /// Calls work in conversations with up to %d people.\n        internal static func tooManyMembersInConversation(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"error.group_call.too_many_members_in_conversation\", p1)\n        }\n        /// There\u2019s only room for %d participants in here.\n        internal static func tooManyParticipantsInTheCall(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"error.group_call.too_many_participants_in_the_call\", p1)\n        }\n        internal enum TooManyMembersInConversation {\n          /// Too many people to call\n          internal static let title = L10n.tr(\"Localizable\", \"error.group_call.too_many_members_in_conversation.title\")\n        }\n        internal enum TooManyParticipantsInTheCall {\n          /// The call is full\n          internal static let title = L10n.tr(\"Localizable\", \"error.group_call.too_many_participants_in_the_call.title\")\n        }\n      }\n      internal enum Input {\n        /// Please enter a shorter username\n        internal static let tooLong = L10n.tr(\"Localizable\", \"error.input.too_long\")\n        /// Please enter a longer username\n        internal static let tooShort = L10n.tr(\"Localizable\", \"error.input.too_short\")\n      }\n      internal enum Invite {\n        /// Please configure your email client to be able to send the invites via email\n        internal static let noEmailProvider = L10n.tr(\"Localizable\", \"error.invite.no_email_provider\")\n        /// Please configure your SMS to be able to send the invites via SMS\n        internal static let noMessagingProvider = L10n.tr(\"Localizable\", \"error.invite.no_messaging_provider\")\n      }\n      internal enum Phone {\n        /// Please enter a valid phone number\n        internal static let invalid = L10n.tr(\"Localizable\", \"error.phone.invalid\")\n      }\n      internal enum User {\n        /// You can\u2019t add more than 3 accounts.\n        internal static let accountLimitReached = L10n.tr(\"Localizable\", \"error.user.account_limit_reached\")\n        /// The account you are trying access is pending activation. Please verify your details.\n        internal static let accountPendingActivation = L10n.tr(\"Localizable\", \"error.user.account_pending_activation\")\n        /// This account is no longer authorized to log in.\n        internal static let accountSuspended = L10n.tr(\"Localizable\", \"error.user.account_suspended\")\n        /// You have been logged out from another device.\n        internal static let deviceDeletedRemotely = L10n.tr(\"Localizable\", \"error.user.device_deleted_remotely\")\n        /// This email requires a team invitation. Contact your organization's IT administrators to receive an invite.\n        internal static let domainBlocked = L10n.tr(\"Localizable\", \"error.user.domain_blocked\")\n        /// The email address you provided has already been registered. Please try again.\n        internal static let emailIsTaken = L10n.tr(\"Localizable\", \"error.user.email_is_taken\")\n        /// Please verify your details and try again.\n        internal static let invalidCredentials = L10n.tr(\"Localizable\", \"error.user.invalid_credentials\")\n        /// Either an email address or a phone number is required.\n        internal static let lastIdentityCantBeDeleted = L10n.tr(\"Localizable\", \"error.user.last_identity_cant_be_deleted\")\n        /// Please verify your details and try again.\n        internal static let needsCredentials = L10n.tr(\"Localizable\", \"error.user.needs_credentials\")\n        /// There seems to be a problem with your network. Please try again later.\n        internal static let networkError = L10n.tr(\"Localizable\", \"error.user.network_error\")\n        /// Please enter a valid code\n        internal static let phoneCodeInvalid = L10n.tr(\"Localizable\", \"error.user.phone_code_invalid\")\n        /// We already sent you a code via SMS. Tap Resend after 10 minutes to get a new one.\n        internal static let phoneCodeTooMany = L10n.tr(\"Localizable\", \"error.user.phone_code_too_many\")\n        /// The phone number you provided has already been registered. Please try again.\n        internal static let phoneIsTaken = L10n.tr(\"Localizable\", \"error.user.phone_is_taken\")\n        /// Something went wrong. Please try again.\n        internal static let registrationUnknownError = L10n.tr(\"Localizable\", \"error.user.registration_unknown_error\")\n        /// Something went wrong, please try again\n        internal static let unkownError = L10n.tr(\"Localizable\", \"error.user.unkown_error\")\n      }\n    }\n    internal enum Folder {\n      internal enum Creation {\n        internal enum Name {\n          /// Maximum 64 characters\n          internal static let footer = L10n.tr(\"Localizable\", \"folder.creation.name.footer\")\n          /// Move the conversation \"%@\" to a new folder.\n          internal static func header(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"folder.creation.name.header\", String(describing: p1))\n          }\n          /// Folder name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"folder.creation.name.placeholder\")\n          /// Create new folder\n          internal static let title = L10n.tr(\"Localizable\", \"folder.creation.name.title\")\n          internal enum Button {\n            /// Create\n            internal static let create = L10n.tr(\"Localizable\", \"folder.creation.name.button.create\")\n          }\n        }\n      }\n      internal enum Picker {\n        /// Move to\n        internal static let title = L10n.tr(\"Localizable\", \"folder.picker.title\")\n        internal enum Empty {\n          /// Create a new folder by pressing the + button\n          internal static let hint = L10n.tr(\"Localizable\", \"folder.picker.empty.hint\")\n        }\n      }\n    }\n    internal enum Force {\n      internal enum Update {\n        /// You are missing out on new features.\\nGet the latest version of Wire in the App Store.\n        internal static let message = L10n.tr(\"Localizable\", \"force.update.message\")\n        /// Go to App Store\n        internal static let okButton = L10n.tr(\"Localizable\", \"force.update.ok_button\")\n        /// Update necessary\n        internal static let title = L10n.tr(\"Localizable\", \"force.update.title\")\n      }\n    }\n    internal enum General {\n      /// Accept\n      internal static let accept = L10n.tr(\"Localizable\", \"general.accept\")\n      /// Back\n      internal static let back = L10n.tr(\"Localizable\", \"general.back\")\n      /// Cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"general.cancel\")\n      /// Close\n      internal static let close = L10n.tr(\"Localizable\", \"general.close\")\n      /// OK\n      internal static let confirm = L10n.tr(\"Localizable\", \"general.confirm\")\n      /// No, thanks\n      internal static let decline = L10n.tr(\"Localizable\", \"general.decline\")\n      /// Done\n      internal static let done = L10n.tr(\"Localizable\", \"general.done\")\n      /// Edit\n      internal static let edit = L10n.tr(\"Localizable\", \"general.edit\")\n      /// Something went wrong\n      internal static let failure = L10n.tr(\"Localizable\", \"general.failure\")\n      /// Guest room\n      internal static let guestRoomName = L10n.tr(\"Localizable\", \"general.guest-room-name\")\n      /// Later\n      internal static let later = L10n.tr(\"Localizable\", \"general.later\")\n      /// Loading\u2026\n      internal static let loading = L10n.tr(\"Localizable\", \"general.loading\")\n      /// Next\n      internal static let next = L10n.tr(\"Localizable\", \"general.next\")\n      /// Off\n      internal static let off = L10n.tr(\"Localizable\", \"general.off\")\n      /// OK\n      internal static let ok = L10n.tr(\"Localizable\", \"general.ok\")\n      /// On\n      internal static let on = L10n.tr(\"Localizable\", \"general.on\")\n      /// Open Wire Settings\n      internal static let openSettings = L10n.tr(\"Localizable\", \"general.open_settings\")\n      /// Paste\n      internal static let paste = L10n.tr(\"Localizable\", \"general.paste\")\n      /// Service\n      internal static let service = L10n.tr(\"Localizable\", \"general.service\")\n      /// Not Now\n      internal static let skip = L10n.tr(\"Localizable\", \"general.skip\")\n      ///  \n      internal static let spaceBetweenWords = L10n.tr(\"Localizable\", \"general.space_between_words\")\n      internal enum Failure {\n        /// Please try again.\n        internal static let tryAgain = L10n.tr(\"Localizable\", \"general.failure.try_again\")\n      }\n    }\n    internal enum Giphy {\n      /// cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"giphy.cancel\")\n      /// send\n      internal static let confirm = L10n.tr(\"Localizable\", \"giphy.confirm\")\n      /// Search Giphy\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"giphy.search_placeholder\")\n      internal enum Conversation {\n        /// %@ \u00b7 via giphy.com\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"giphy.conversation.message\", String(describing: p1))\n        }\n        /// via giphy.com\n        internal static let randomMessage = L10n.tr(\"Localizable\", \"giphy.conversation.random_message\")\n      }\n      internal enum Error {\n        /// no more gifs\n        internal static let noMoreResults = L10n.tr(\"Localizable\", \"giphy.error.no_more_results\")\n        /// no gif found\n        internal static let noResult = L10n.tr(\"Localizable\", \"giphy.error.no_result\")\n      }\n    }\n    internal enum GroupDetails {\n      internal enum ConversationAdminsHeader {\n        /// Group admins\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.conversation_admins_header.title\")\n      }\n      internal enum ConversationMembersHeader {\n        /// Group members\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.conversation_members_header.title\")\n      }\n      internal enum GuestOptionsCell {\n        /// Off\n        internal static let disabled = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.disabled\")\n        /// On\n        internal static let enabled = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.enabled\")\n        /// Guests and services\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.guest_options_cell.title\")\n      }\n      internal enum NotificationOptionsCell {\n        /// You can be notified about everything (including audio and video calls) or only when someone mentions you or replies to one of your messages.\n        internal static let description = L10n.tr(\"Localizable\", \"group_details.notification_options_cell.description\")\n        /// Notifications\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.notification_options_cell.title\")\n      }\n      internal enum ReceiptOptionsCell {\n        /// When this is on, people can see when their messages in this conversation are read.\n        internal static let description = L10n.tr(\"Localizable\", \"group_details.receipt_options_cell.description\")\n        /// Read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.receipt_options_cell.title\")\n      }\n      internal enum TimeoutOptionsCell {\n        /// Timed messages\n        internal static let title = L10n.tr(\"Localizable\", \"group_details.timeout_options_cell.title\")\n      }\n    }\n    internal enum GuestRoom {\n      internal enum Actions {\n        /// Link Copied!\n        internal static let copiedLink = L10n.tr(\"Localizable\", \"guest_room.actions.copied_link\")\n        /// Copy Link\n        internal static let copyLink = L10n.tr(\"Localizable\", \"guest_room.actions.copy_link\")\n        /// Revoke Link\u2026\n        internal static let revokeLink = L10n.tr(\"Localizable\", \"guest_room.actions.revoke_link\")\n        /// Share Link\n        internal static let shareLink = L10n.tr(\"Localizable\", \"guest_room.actions.share_link\")\n      }\n      internal enum AllowGuests {\n        /// Open this conversation to services and people outside your team.\n        internal static let subtitle = L10n.tr(\"Localizable\", \"guest_room.allow_guests.subtitle\")\n        /// Allow guests and services\n        internal static let title = L10n.tr(\"Localizable\", \"guest_room.allow_guests.title\")\n      }\n      internal enum Error {\n        internal enum Generic {\n          /// Check your connection and try again\n          internal static let message = L10n.tr(\"Localizable\", \"guest_room.error.generic.message\")\n          /// Something went wrong\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.error.generic.title\")\n        }\n      }\n      internal enum Expiration {\n        /// %@h left\n        internal static func hoursLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.expiration.hours_left\", String(describing: p1))\n        }\n        /// Less than %@m left\n        internal static func lessThanMinutesLeft(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.expiration.less_than_minutes_left\", String(describing: p1))\n        }\n      }\n      internal enum Link {\n        internal enum Button {\n          /// Create Link\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.link.button.title\")\n        }\n        internal enum Header {\n          /// Anyone with the link can join the conversation, even if they don\u2019t have Wire.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"guest_room.link.header.subtitle\")\n          /// Invite others with a link\n          internal static let title = L10n.tr(\"Localizable\", \"guest_room.link.header.title\")\n        }\n      }\n      internal enum RemoveGuests {\n        /// Remove\n        internal static let action = L10n.tr(\"Localizable\", \"guest_room.remove_guests.action\")\n        /// Current guests and services will be removed from the conversation. New guests and services will not be allowed.\n        internal static let message = L10n.tr(\"Localizable\", \"guest_room.remove_guests.message\")\n      }\n      internal enum RevokeLink {\n        /// Revoke Link\n        internal static let action = L10n.tr(\"Localizable\", \"guest_room.revoke_link.action\")\n        /// New guests will not be able to join with this link. Current guests will still have access.\n        internal static let message = L10n.tr(\"Localizable\", \"guest_room.revoke_link.message\")\n      }\n      internal enum Share {\n        /// Join me in a conversation on Wire:\\n%@\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"guest_room.share.message\", String(describing: p1))\n        }\n      }\n    }\n    internal enum Image {\n      /// Add an emoji\n      internal static let addEmoji = L10n.tr(\"Localizable\", \"image.add_emoji\")\n      /// Add a sketch\n      internal static let addSketch = L10n.tr(\"Localizable\", \"image.add_sketch\")\n      /// Edit image\n      internal static let editImage = L10n.tr(\"Localizable\", \"image.edit_image\")\n    }\n    internal enum ImageConfirmer {\n      /// Cancel\n      internal static let cancel = L10n.tr(\"Localizable\", \"image_confirmer.cancel\")\n      /// OK\n      internal static let confirm = L10n.tr(\"Localizable\", \"image_confirmer.confirm\")\n    }\n    internal enum Inbox {\n      internal enum ConnectionRequest {\n        /// Connect\n        internal static let connectButtonTitle = L10n.tr(\"Localizable\", \"inbox.connection_request.connect_button_title\")\n        /// Ignore\n        internal static let ignoreButtonTitle = L10n.tr(\"Localizable\", \"inbox.connection_request.ignore_button_title\")\n      }\n    }\n    internal enum Input {\n      internal enum Ephemeral {\n        /// Set a time for the message to disappear\n        internal static let title = L10n.tr(\"Localizable\", \"input.ephemeral.title\")\n        internal enum Timeout {\n          /// Off\n          internal static let `none` = L10n.tr(\"Localizable\", \"input.ephemeral.timeout.none\")\n        }\n      }\n    }\n    internal enum InviteBanner {\n      /// Invite more people\n      internal static let inviteButtonTitle = L10n.tr(\"Localizable\", \"invite_banner.invite_button_title\")\n      /// Enjoy calls, messages, sketches, GIFs and more in private or with groups.\n      internal static let message = L10n.tr(\"Localizable\", \"invite_banner.message\")\n      /// Bring your friends to Wire!\n      internal static let title = L10n.tr(\"Localizable\", \"invite_banner.title\")\n    }\n    internal enum Jailbrokendevice {\n      internal enum Alert {\n        /// For security reasons, Wire can't be used on this device. Any existing Wire data has been erased.\n        internal static let message = L10n.tr(\"Localizable\", \"jailbrokendevice.alert.message\")\n        /// Jailbreak detected\n        internal static let title = L10n.tr(\"Localizable\", \"jailbrokendevice.alert.title\")\n      }\n    }\n    internal enum KeyboardPhotosAccess {\n      internal enum Denied {\n        internal enum Keyboard {\n          /// Wire needs access to your camera.\n          internal static let camera = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.camera\")\n          /// Wire needs access to your\\ncamera and photos.\n          internal static let cameraAndPhotos = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.camera_and_photos\")\n          /// You can\u2019t access the camera while you are on a video call.\n          internal static let ongoingCall = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.ongoing_call\")\n          /// Wire needs access to your photos.\n          internal static let photos = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.photos\")\n          /// Settings\n          internal static let settings = L10n.tr(\"Localizable\", \"keyboard_photos_access.denied.keyboard.settings\")\n        }\n      }\n    }\n    internal enum Landing {\n      /// Wire. Add your Account.\n      internal static let header = L10n.tr(\"Localizable\", \"landing.header\")\n      /// Trying to create a Pro or Enterprise account for your business or organization?\n      internal static let welcomeMessage = L10n.tr(\"Localizable\", \"landing.welcome_message\")\n      /// Unfortunately, that's not possible in the app - once you have created your team, you can log in here\n      internal static let welcomeSubmessage = L10n.tr(\"Localizable\", \"landing.welcome_submessage\")\n      internal enum CreateAccount {\n        /// Chat with friends and family?\n        internal static let infotitle = L10n.tr(\"Localizable\", \"landing.create_account.infotitle\")\n        /// Chat privately with groups of friends\u00a0and\u00a0family\n        internal static let subtitle = L10n.tr(\"Localizable\", \"landing.create_account.subtitle\")\n        /// Create a Wire personal account\n        internal static let title = L10n.tr(\"Localizable\", \"landing.create_account.title\")\n      }\n      internal enum CreateTeam {\n        /// Secure collaboration for businesses, institutions and professional\u00a0organizations\n        internal static let subtitle = L10n.tr(\"Localizable\", \"landing.create_team.subtitle\")\n        /// Pro\n        internal static let title = L10n.tr(\"Localizable\", \"landing.create_team.title\")\n      }\n      internal enum CustomBackend {\n        /// Connected to \"%@\"\n        internal static func title(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"landing.custom_backend.title\", String(describing: p1))\n        }\n        internal enum MoreInfo {\n          internal enum Alert {\n            ///  You are connected to a third-party server: %@\n            internal static func title(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"landing.custom_backend.more_info.alert.title\", String(describing: p1))\n            }\n          }\n          internal enum Button {\n            /// Show more\n            internal static let title = L10n.tr(\"Localizable\", \"landing.custom_backend.more_info.button.title\")\n          }\n        }\n      }\n      internal enum Login {\n        /// Already have an account?\n        internal static let hints = L10n.tr(\"Localizable\", \"landing.login.hints\")\n        internal enum Button {\n          /// Log in\n          internal static let title = L10n.tr(\"Localizable\", \"landing.login.button.title\")\n        }\n        internal enum Email {\n          internal enum Button {\n            /// Log in with email\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.email.button.title\")\n          }\n        }\n        internal enum Enterprise {\n          internal enum Button {\n            /// Enterprise log in\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.enterprise.button.title\")\n          }\n        }\n        internal enum Sso {\n          internal enum Button {\n            /// Log in with SSO\n            internal static let title = L10n.tr(\"Localizable\", \"landing.login.sso.button.title\")\n          }\n        }\n      }\n    }\n    internal enum LegalHold {\n      internal enum Deactivated {\n        /// Future messages will not be recorded.\n        internal static let message = L10n.tr(\"Localizable\", \"legal_hold.deactivated.message\")\n        /// Legal Hold Deactivated\n        internal static let title = L10n.tr(\"Localizable\", \"legal_hold.deactivated.title\")\n      }\n    }\n    internal enum Legalhold {\n      /// Legal hold details\n      internal static let accessibility = L10n.tr(\"Localizable\", \"legalhold.accessibility\")\n      internal enum Header {\n        /// Legal Hold has been activated for at least one person in this conversation.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\n        internal static let otherDescription = L10n.tr(\"Localizable\", \"legalhold.header.other_description\")\n        /// Legal Hold has been activated for your account.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\\nYour conversation partners will be aware of the recording.\n        internal static let selfDescription = L10n.tr(\"Localizable\", \"legalhold.header.self_description\")\n        /// Legal Hold\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold.header.title\")\n      }\n      internal enum Participants {\n        internal enum Section {\n          /// Legal hold subjects\n          internal static let title = L10n.tr(\"Localizable\", \"legalhold.participants.section.title\")\n        }\n      }\n    }\n    internal enum LegalholdActive {\n      internal enum Alert {\n        /// Learn More\n        internal static let learnMore = L10n.tr(\"Localizable\", \"legalhold_active.alert.learn_more\")\n        /// Legal Hold has been activated for your account. All messages will be preserved for future access, including deleted, edited, and timed messages.\\n\\nYour conversation partners will be aware of the recording.\n        internal static let message = L10n.tr(\"Localizable\", \"legalhold_active.alert.message\")\n        /// Legal Hold is Active\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold_active.alert.title\")\n      }\n    }\n    internal enum LegalholdRequest {\n      internal enum Alert {\n        /// All future messages will be recorded by the device with fingerprint:\\n\\n%@\\n\\nThis includes deleted, edited, and timed messages in all conversations.\n        internal static func detail(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"legalhold_request.alert.detail\", String(describing: p1))\n        }\n        /// Wrong Password\n        internal static let errorWrongPassword = L10n.tr(\"Localizable\", \"legalhold_request.alert.error_wrong_password\")\n        /// Legal Hold Requested\n        internal static let title = L10n.tr(\"Localizable\", \"legalhold_request.alert.title\")\n        internal enum Detail {\n          /// Enter your password to confirm.\n          internal static let enterPassword = L10n.tr(\"Localizable\", \"legalhold_request.alert.detail.enter_password\")\n        }\n      }\n      internal enum Button {\n        /// Pending approval.\n        internal static let accessibility = L10n.tr(\"Localizable\", \"legalhold_request.button.accessibility\")\n      }\n    }\n    internal enum Library {\n      internal enum Alert {\n        internal enum PermissionWarning {\n          /// Wire needs access to your Photos\n          internal static let title = L10n.tr(\"Localizable\", \"library.alert.permission_warning.title\")\n          internal enum NotAllowed {\n            /// Go to Settings and allow Wire to access your photos.\n            internal static let explaination = L10n.tr(\"Localizable\", \"library.alert.permission_warning.not_allowed.explaination\")\n          }\n          internal enum Restrictions {\n            /// Wire cannot access your library because restrictions are enabled.\n            internal static let explaination = L10n.tr(\"Localizable\", \"library.alert.permission_warning.restrictions.explaination\")\n          }\n        }\n      }\n    }\n    internal enum List {\n      /// ARCHIVE\n      internal static let archivedConversations = L10n.tr(\"Localizable\", \"list.archived_conversations\")\n      /// Close archive\n      internal static let archivedConversationsClose = L10n.tr(\"Localizable\", \"list.archived_conversations_close\")\n      /// Conversations\n      internal static let title = L10n.tr(\"Localizable\", \"list.title\")\n      internal enum ConnectRequest {\n        /// Plural format key: \"%#@d_number_of_people@ waiting\"\n        internal static func peopleWaiting(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"list.connect_request.people_waiting\", p1)\n        }\n      }\n      internal enum Section {\n        /// People\n        internal static let contacts = L10n.tr(\"Localizable\", \"list.section.contacts\")\n        /// Favorites\n        internal static let favorites = L10n.tr(\"Localizable\", \"list.section.favorites\")\n        /// Groups\n        internal static let groups = L10n.tr(\"Localizable\", \"list.section.groups\")\n        /// Requests\n        internal static let requests = L10n.tr(\"Localizable\", \"list.section.requests\")\n      }\n    }\n    internal enum Location {\n      internal enum SendButton {\n        /// Send\n        internal static let title = L10n.tr(\"Localizable\", \"location.send_button.title\")\n      }\n      internal enum UnauthorizedAlert {\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"location.unauthorized_alert.cancel\")\n        /// To send your location, enable Location Services and allow Wire to access your location.\n        internal static let message = L10n.tr(\"Localizable\", \"location.unauthorized_alert.message\")\n        /// Settings\n        internal static let settings = L10n.tr(\"Localizable\", \"location.unauthorized_alert.settings\")\n        /// Enable Location Services\n        internal static let title = L10n.tr(\"Localizable\", \"location.unauthorized_alert.title\")\n      }\n    }\n    internal enum Login {\n      internal enum Sso {\n        /// This link is not valid. Please contact your administrator to resolve the issue.\n        internal static let linkErrorMessage = L10n.tr(\"Localizable\", \"login.sso.link_error_message\")\n        /// Cannot Start Enterprise Login\n        internal static let startErrorTitle = L10n.tr(\"Localizable\", \"login.sso.start_error_title\")\n        internal enum Alert {\n          /// Log in\n          internal static let action = L10n.tr(\"Localizable\", \"login.sso.alert.action\")\n          /// Enterprise Login\n          internal static let title = L10n.tr(\"Localizable\", \"login.sso.alert.title\")\n          internal enum Message {\n            /// Please enter your email or SSO code. If your email matches an enterprise installation of Wire, this app will connect to that server.\n            internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.alert.message.sso_and_email\")\n            /// Please enter your SSO code:\n            internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.alert.message.sso_only\")\n          }\n          internal enum TextField {\n            internal enum Placeholder {\n              /// email or SSO access code\n              internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.alert.text_field.placeholder.sso_and_email\")\n              /// SSO access code\n              internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.alert.text_field.placeholder.sso_only\")\n            }\n          }\n        }\n        internal enum BackendSwitch {\n          /// Provide credentials only if you're sure this is your organization's log in.\n          internal static let information = L10n.tr(\"Localizable\", \"login.sso.backend_switch.information\")\n          /// You are being redirected to your dedicated enterprise service.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"login.sso.backend_switch.subtitle\")\n          /// Redirecting...\n          internal static let title = L10n.tr(\"Localizable\", \"login.sso.backend_switch.title\")\n        }\n        internal enum Error {\n          internal enum Alert {\n            /// Please contact your team administrator for details (error %@).\n            internal static func message(_ p1: Any) -> String {\n              return L10n.tr(\"Localizable\", \"login.sso.error.alert.message\", String(describing: p1))\n            }\n            internal enum DomainAssociatedWithWrongServer {\n              /// This email is linked to a different server, but the app can only be connected to one server at a time. Please log out of all Wire accounts on this device and try to login again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.domain_associated_with_wrong_server.message\")\n            }\n            internal enum DomainNotRegistered {\n              /// This email cannot be used for enterprise login. Please enter the SSO code to proceed.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.domain_not_registered.message\")\n            }\n            internal enum InvalidCode {\n              /// Please verify your company SSO access code and try again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_code.message\")\n            }\n            internal enum InvalidFormat {\n              internal enum Message {\n                /// Please enter a valid email or SSO access code\n                internal static let ssoAndEmail = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_format.message.sso_and_email\")\n                /// Please enter a valid SSO access code\n                internal static let ssoOnly = L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_format.message.sso_only\")\n              }\n            }\n            internal enum InvalidStatus {\n              /// Please try again later (error %@).\n              internal static func message(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"login.sso.error.alert.invalid_status.message\", String(describing: p1))\n              }\n            }\n            internal enum Unknown {\n              /// Please try again later.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.alert.unknown.message\")\n            }\n          }\n          internal enum Offline {\n            internal enum Alert {\n              /// Please check your Internet connection and try again.\n              internal static let message = L10n.tr(\"Localizable\", \"login.sso.error.offline.alert.message\")\n            }\n          }\n        }\n      }\n    }\n    internal enum Message {\n      internal enum DeleteDialog {\n        /// This cannot be undone.\n        internal static let message = L10n.tr(\"Localizable\", \"message.delete_dialog.message\")\n        internal enum Action {\n          /// Cancel\n          internal static let cancel = L10n.tr(\"Localizable\", \"message.delete_dialog.action.cancel\")\n          /// Delete for Everyone\n          internal static let delete = L10n.tr(\"Localizable\", \"message.delete_dialog.action.delete\")\n          /// Delete for Me\n          internal static let hide = L10n.tr(\"Localizable\", \"message.delete_dialog.action.hide\")\n        }\n      }\n      internal enum Menu {\n        internal enum Edit {\n          /// Edit\n          internal static let title = L10n.tr(\"Localizable\", \"message.menu.edit.title\")\n        }\n      }\n    }\n    internal enum MessageDetails {\n      /// Message Details\n      internal static let combinedTitle = L10n.tr(\"Localizable\", \"message_details.combined_title\")\n      /// No one has liked this message yet.\n      internal static let emptyLikes = L10n.tr(\"Localizable\", \"message_details.empty_likes\")\n      /// No one has read this message yet.\n      internal static let emptyReadReceipts = L10n.tr(\"Localizable\", \"message_details.empty_read_receipts\")\n      /// Liked\n      internal static let likesTitle = L10n.tr(\"Localizable\", \"message_details.likes_title\")\n      /// Read receipts were not on when this message was sent.\n      internal static let readReceiptsDisabled = L10n.tr(\"Localizable\", \"message_details.read_receipts_disabled\")\n      /// Read\n      internal static let receiptsTitle = L10n.tr(\"Localizable\", \"message_details.receipts_title\")\n      /// Edited: %@\n      internal static func subtitleEditDate(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"message_details.subtitle_edit_date\", String(describing: p1))\n      }\n      /// Message Details\n      internal static let subtitleLabelVoiceOver = L10n.tr(\"Localizable\", \"message_details.subtitle_label_voiceOver\")\n      /// Sent: %@\n      internal static func subtitleSendDate(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"message_details.subtitle_send_date\", String(describing: p1))\n      }\n      /// Username\n      internal static let userHandleSubtitleLabel = L10n.tr(\"Localizable\", \"message_details.user_handle_subtitle_label\")\n      /// Read at\n      internal static let userReadTimestampSubtitleLabel = L10n.tr(\"Localizable\", \"message_details.user_read_timestamp_subtitle_label\")\n      internal enum Tabs {\n        /// Liked (%d)\n        internal static func likes(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"message_details.tabs.likes\", p1)\n        }\n        /// Read (%d)\n        internal static func seen(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"message_details.tabs.seen\", p1)\n        }\n      }\n    }\n    internal enum Meta {\n      /// Cancel\n      internal static let leaveConversationButtonCancel = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_cancel\")\n      /// Leave\n      internal static let leaveConversationButtonLeave = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_leave\")\n      /// Leave and clear content\n      internal static let leaveConversationButtonLeaveAndDelete = L10n.tr(\"Localizable\", \"meta.leave_conversation_button_leave_and_delete\")\n      /// The participants will be notified and the conversation will be removed from your list.\n      internal static let leaveConversationDialogMessage = L10n.tr(\"Localizable\", \"meta.leave_conversation_dialog_message\")\n      /// Leave conversation?\n      internal static let leaveConversationDialogTitle = L10n.tr(\"Localizable\", \"meta.leave_conversation_dialog_title\")\n      internal enum Degraded {\n        /// Cancel\n        internal static let cancelSendingButton = L10n.tr(\"Localizable\", \"meta.degraded.cancel_sending_button\")\n        /// Do you still want to send your message?\n        internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.degraded.dialog_message\")\n        /// Send Anyway\n        internal static let sendAnywayButton = L10n.tr(\"Localizable\", \"meta.degraded.send_anyway_button\")\n        /// Verify Devices\u2026\n        internal static let verifyDevicesButton = L10n.tr(\"Localizable\", \"meta.degraded.verify_devices_button\")\n        internal enum DegradationReasonMessage {\n          /// %@ started using new devices.\n          internal static func plural(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.plural\", String(describing: p1))\n          }\n          /// %@ started using a new device.\n          internal static func singular(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.singular\", String(describing: p1))\n          }\n          /// Someone started using a new device.\n          internal static let someone = L10n.tr(\"Localizable\", \"meta.degraded.degradation_reason_message.someone\")\n        }\n      }\n      internal enum LeaveConversation {\n        /// Also clear the content\n        internal static let deleteContentAsWellMessage = L10n.tr(\"Localizable\", \"meta.leave_conversation.delete_content_as_well_message\")\n      }\n      internal enum Legalhold {\n        /// What Is Legal Hold?\n        internal static let infoButton = L10n.tr(\"Localizable\", \"meta.legalhold.info_button\")\n        /// The conversation is now subject to legal hold.\n        internal static let sendAlertTitle = L10n.tr(\"Localizable\", \"meta.legalhold.send_alert_title\")\n      }\n      internal enum Menu {\n        /// More actions\n        internal static let accessibilityMoreOptionsButton = L10n.tr(\"Localizable\", \"meta.menu.accessibility_more_options_button\")\n        /// Archive\n        internal static let archive = L10n.tr(\"Localizable\", \"meta.menu.archive\")\n        /// Cancel\n        internal static let cancel = L10n.tr(\"Localizable\", \"meta.menu.cancel\")\n        /// Cancel Request\n        internal static let cancelConnectionRequest = L10n.tr(\"Localizable\", \"meta.menu.cancel_connection_request\")\n        /// Clear Content\u2026\n        internal static let clearContent = L10n.tr(\"Localizable\", \"meta.menu.clear_content\")\n        /// Notifications\u2026\n        internal static let configureNotifications = L10n.tr(\"Localizable\", \"meta.menu.configure_notifications\")\n        /// Delete Group\u2026\n        internal static let delete = L10n.tr(\"Localizable\", \"meta.menu.delete\")\n        /// Leave Group\u2026\n        internal static let leave = L10n.tr(\"Localizable\", \"meta.menu.leave\")\n        /// Mark as Read\n        internal static let markRead = L10n.tr(\"Localizable\", \"meta.menu.mark_read\")\n        /// Mark as Unread\n        internal static let markUnread = L10n.tr(\"Localizable\", \"meta.menu.mark_unread\")\n        /// Move to\u2026\n        internal static let moveToFolder = L10n.tr(\"Localizable\", \"meta.menu.move_to_folder\")\n        /// Open Profile\n        internal static let openSelfProfile = L10n.tr(\"Localizable\", \"meta.menu.open_self_profile\")\n        /// Remove from \"%@\"\n        internal static func removeFromFolder(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"meta.menu.remove_from_folder\", String(describing: p1))\n        }\n        /// Rename\n        internal static let rename = L10n.tr(\"Localizable\", \"meta.menu.rename\")\n        /// Unarchive\n        internal static let unarchive = L10n.tr(\"Localizable\", \"meta.menu.unarchive\")\n        internal enum ConfigureNotification {\n          /// Cancel\n          internal static let buttonCancel = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_cancel\")\n          /// Everything\n          internal static let buttonEverything = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_everything\")\n          /// Mentions and Replies\n          internal static let buttonMentionsAndReplies = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_mentions_and_replies\")\n          /// Nothing\n          internal static let buttonNothing = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.button_nothing\")\n          /// Notify me about:\n          internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.menu.configure_notification.dialog_message\")\n        }\n        internal enum DeleteContent {\n          /// Cancel\n          internal static let buttonCancel = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_cancel\")\n          /// Clear\n          internal static let buttonDelete = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_delete\")\n          /// Clear and leave\n          internal static let buttonDeleteAndLeave = L10n.tr(\"Localizable\", \"meta.menu.delete_content.button_delete_and_leave\")\n          /// This will clear the conversation history on all your devices.\n          internal static let dialogMessage = L10n.tr(\"Localizable\", \"meta.menu.delete_content.dialog_message\")\n          /// Clear content?\n          internal static let dialogTitle = L10n.tr(\"Localizable\", \"meta.menu.delete_content.dialog_title\")\n          /// Also leave the conversation\n          internal static let leaveAsWellMessage = L10n.tr(\"Localizable\", \"meta.menu.delete_content.leave_as_well_message\")\n        }\n        internal enum Silence {\n          /// Mute\n          internal static let mute = L10n.tr(\"Localizable\", \"meta.menu.silence.mute\")\n          /// Unmute\n          internal static let unmute = L10n.tr(\"Localizable\", \"meta.menu.silence.unmute\")\n        }\n      }\n    }\n    internal enum Migration {\n      /// One moment, please\n      internal static let pleaseWaitMessage = L10n.tr(\"Localizable\", \"migration.please_wait_message\")\n    }\n    internal enum Missive {\n      internal enum ConnectionRequest {\n        /// Hi %@,\\nLet\u2019s connect on Wire.\\n%@\n        internal static func defaultMessage(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"missive.connection_request.default_message\", String(describing: p1), String(describing: p2))\n        }\n      }\n    }\n    internal enum Name {\n      /// Your full name\n      internal static let placeholder = L10n.tr(\"Localizable\", \"name.placeholder\")\n      internal enum Guidance {\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"name.guidance.toolong\")\n        /// At least 2 characters\n        internal static let tooshort = L10n.tr(\"Localizable\", \"name.guidance.tooshort\")\n      }\n    }\n    internal enum NewsOffers {\n      internal enum Consent {\n        /// You can unsubscribe at any time.\n        internal static let message = L10n.tr(\"Localizable\", \"news_offers.consent.message\")\n        /// Do you want to receive news and product updates from Wire via email?\n        internal static let title = L10n.tr(\"Localizable\", \"news_offers.consent.title\")\n        internal enum Button {\n          internal enum PrivacyPolicy {\n            /// Privacy Policy\n            internal static let title = L10n.tr(\"Localizable\", \"news_offers.consent.button.privacy_policy.title\")\n          }\n        }\n      }\n    }\n    internal enum Notifications {\n      /// %@ - %@\n      internal static func inConversation(_ p1: Any, _ p2: Any) -> String {\n        return L10n.tr(\"Localizable\", \"notifications.in_conversation\", String(describing: p1), String(describing: p2))\n      }\n      /// pinged\n      internal static let pinged = L10n.tr(\"Localizable\", \"notifications.pinged\")\n      /// shared an audio\n      internal static let sentAudio = L10n.tr(\"Localizable\", \"notifications.sent_audio\")\n      /// shared a file\n      internal static let sentFile = L10n.tr(\"Localizable\", \"notifications.sent_file\")\n      /// shared a location\n      internal static let sentLocation = L10n.tr(\"Localizable\", \"notifications.sent_location\")\n      /// shared a video\n      internal static let sentVideo = L10n.tr(\"Localizable\", \"notifications.sent_video\")\n      /// shared a picture\n      internal static let sharedAPhoto = L10n.tr(\"Localizable\", \"notifications.shared_a_photo\")\n      /// %@ in this conversation\n      internal static func thisConversation(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"notifications.this_conversation\", String(describing: p1))\n      }\n    }\n    internal enum OpenLink {\n      internal enum Browser {\n        internal enum Option {\n          /// Brave\n          internal static let brave = L10n.tr(\"Localizable\", \"open_link.browser.option.brave\")\n          /// Chrome\n          internal static let chrome = L10n.tr(\"Localizable\", \"open_link.browser.option.chrome\")\n          /// Firefox\n          internal static let firefox = L10n.tr(\"Localizable\", \"open_link.browser.option.firefox\")\n          /// Safari\n          internal static let safari = L10n.tr(\"Localizable\", \"open_link.browser.option.safari\")\n          /// SnowHaze\n          internal static let snowhaze = L10n.tr(\"Localizable\", \"open_link.browser.option.snowhaze\")\n        }\n      }\n      internal enum Maps {\n        /// Some location links will always open in Apple Maps.\n        internal static let footer = L10n.tr(\"Localizable\", \"open_link.maps.footer\")\n        internal enum Option {\n          /// Maps\n          internal static let apple = L10n.tr(\"Localizable\", \"open_link.maps.option.apple\")\n          /// Google Maps\n          internal static let google = L10n.tr(\"Localizable\", \"open_link.maps.option.google\")\n        }\n      }\n      internal enum Twitter {\n        internal enum Option {\n          /// Browser / Twitter\n          internal static let `default` = L10n.tr(\"Localizable\", \"open_link.twitter.option.default\")\n          /// Tweetbot\n          internal static let tweetbot = L10n.tr(\"Localizable\", \"open_link.twitter.option.tweetbot\")\n          /// Twitterrific\n          internal static let twitterrific = L10n.tr(\"Localizable\", \"open_link.twitter.option.twitterrific\")\n        }\n      }\n    }\n    internal enum Participants {\n      /// Add\n      internal static let addPeopleButtonTitle = L10n.tr(\"Localizable\", \"participants.add_people_button_title\")\n      /// Details\n      internal static let title = L10n.tr(\"Localizable\", \"participants.title\")\n      internal enum All {\n        /// People\n        internal static let title = L10n.tr(\"Localizable\", \"participants.all.title\")\n      }\n      internal enum Avatar {\n        internal enum Guest {\n          /// Guest\n          internal static let title = L10n.tr(\"Localizable\", \"participants.avatar.guest.title\")\n        }\n      }\n      internal enum Footer {\n        /// Add Participants\n        internal static let addTitle = L10n.tr(\"Localizable\", \"participants.footer.add_title\")\n      }\n      internal enum People {\n        /// Plural format key: \"%#@lu_number_of_people@\"\n        internal static func count(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.people.count\", p1)\n        }\n      }\n      internal enum Section {\n        /// People (%d)\n        internal static func participants(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.section.participants\", p1)\n        }\n        /// Services (%d)\n        internal static func services(_ p1: Int) -> String {\n          return L10n.tr(\"Localizable\", \"participants.section.services\", p1)\n        }\n        /// Options\n        internal static let settings = L10n.tr(\"Localizable\", \"participants.section.settings\")\n        internal enum Admins {\n          /// There are no admins.\n          internal static let footer = L10n.tr(\"Localizable\", \"participants.section.admins.footer\")\n        }\n        internal enum Members {\n          /// There are no members.\n          internal static let footer = L10n.tr(\"Localizable\", \"participants.section.members.footer\")\n        }\n        internal enum Name {\n          /// Up to %1$d participants can join a group conversation.\n          internal static func footer(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"participants.section.name.footer\", p1)\n          }\n        }\n      }\n      internal enum Services {\n        internal enum RemoveIntegration {\n          /// remove integration\n          internal static let button = L10n.tr(\"Localizable\", \"participants.services.remove_integration.button\")\n        }\n      }\n    }\n    internal enum Passcode {\n      /// Passcode\n      internal static let hintLabel = L10n.tr(\"Localizable\", \"passcode.hint_label\")\n    }\n    internal enum Password {\n      /// Password\n      internal static let placeholder = L10n.tr(\"Localizable\", \"password.placeholder\")\n      internal enum Guidance {\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"password.guidance.toolong\")\n      }\n    }\n    internal enum Peoplepicker {\n      /// Hide\n      internal static let hideSearchResult = L10n.tr(\"Localizable\", \"peoplepicker.hide_search_result\")\n      /// Hiding\u2026\n      internal static let hideSearchResultProgress = L10n.tr(\"Localizable\", \"peoplepicker.hide_search_result_progress\")\n      /// Invite more people\n      internal static let inviteMorePeople = L10n.tr(\"Localizable\", \"peoplepicker.invite_more_people\")\n      /// Invite people to join the team\n      internal static let inviteTeamMembers = L10n.tr(\"Localizable\", \"peoplepicker.invite_team_members\")\n      /// No Contacts.\n      internal static let noContactsTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_contacts_title\")\n      /// share contacts\n      internal static let noMatchingResultsAfterAddressBookUploadButton = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_button\")\n      /// Enter a full email address or\n      internal static let noMatchingResultsAfterAddressBookUploadMessage = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_message\")\n      /// No results.\n      internal static let noMatchingResultsAfterAddressBookUploadTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_after_address_book_upload_title\")\n      /// Enter a full email address.\n      internal static let noMatchingResultsMessage = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_message\")\n      /// Please enter a valid email address\n      internal static let noMatchingResultsProvideValidEmail = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_provide_valid_email\")\n      /// Services are helpers that can improve your workflow.\n      internal static let noMatchingResultsServicesAdminTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_admin_title\")\n      /// Manage Services\n      internal static let noMatchingResultsServicesManageServicesTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_manage_services_title\")\n      /// Services are helpers that can improve your workflow. To enable them, ask your administrator.\n      internal static let noMatchingResultsServicesTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_services_title\")\n      /// No results.\n      internal static let noMatchingResultsTitle = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results_title\")\n      /// No matching results. Try entering a different name.\n      internal static let noSearchResults = L10n.tr(\"Localizable\", \"peoplepicker.no_search_results\")\n      /// Search by name or username\n      internal static let searchPlaceholder = L10n.tr(\"Localizable\", \"peoplepicker.search_placeholder\")\n      internal enum Button {\n        /// Add Participants to Group\n        internal static let addToConversation = L10n.tr(\"Localizable\", \"peoplepicker.button.add_to_conversation\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.button.create_conversation\")\n      }\n      internal enum Federation {\n        /// The federated domain is currently not available. [Learn more](%@)\n        internal static func domainUnvailable(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.federation.domain_unvailable\", String(describing: p1))\n        }\n      }\n      internal enum Group {\n        /// Create\n        internal static let create = L10n.tr(\"Localizable\", \"peoplepicker.group.create\")\n        /// Done\n        internal static let done = L10n.tr(\"Localizable\", \"peoplepicker.group.done\")\n        /// Skip\n        internal static let skip = L10n.tr(\"Localizable\", \"peoplepicker.group.skip\")\n        internal enum Title {\n          /// Add Participants (%d)\n          internal static func plural(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"peoplepicker.group.title.plural\", p1)\n          }\n          /// Add Participants\n          internal static let singular = L10n.tr(\"Localizable\", \"peoplepicker.group.title.singular\")\n        }\n      }\n      internal enum Header {\n        /// Contacts\n        internal static let contacts = L10n.tr(\"Localizable\", \"peoplepicker.header.contacts\")\n        /// Personal Contacts\n        internal static let contactsPersonal = L10n.tr(\"Localizable\", \"peoplepicker.header.contacts_personal\")\n        /// Groups\n        internal static let conversations = L10n.tr(\"Localizable\", \"peoplepicker.header.conversations\")\n        /// Connect\n        internal static let directory = L10n.tr(\"Localizable\", \"peoplepicker.header.directory\")\n        /// Connect with other domain\n        internal static let federation = L10n.tr(\"Localizable\", \"peoplepicker.header.federation\")\n        /// People\n        internal static let people = L10n.tr(\"Localizable\", \"peoplepicker.header.people\")\n        /// Invite\n        internal static let sendInvitation = L10n.tr(\"Localizable\", \"peoplepicker.header.send_invitation\")\n        /// Services\n        internal static let services = L10n.tr(\"Localizable\", \"peoplepicker.header.services\")\n        /// %@ Groups\n        internal static func teamConversations(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.header.team_conversations\", String(describing: p1))\n        }\n        /// Top people\n        internal static let topPeople = L10n.tr(\"Localizable\", \"peoplepicker.header.top_people\")\n      }\n      internal enum NoMatchingResults {\n        internal enum Action {\n          /// Send an invitation\n          internal static let sendInvite = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results.action.send_invite\")\n          /// Share contacts\n          internal static let shareContacts = L10n.tr(\"Localizable\", \"peoplepicker.no_matching_results.action.share_contacts\")\n        }\n      }\n      internal enum QuickAction {\n        /// Manage Services\n        internal static let adminServices = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.admin-services\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.create-conversation\")\n        /// Create guest room\n        internal static let createGuestRoom = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.create-guest-room\")\n        /// Open\n        internal static let openConversation = L10n.tr(\"Localizable\", \"peoplepicker.quick-action.open-conversation\")\n      }\n      internal enum SendInvitation {\n        internal enum Dialog {\n          /// It can be used for 2 weeks. Send a new one if it expires.\n          internal static let message = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.message\")\n          /// OK\n          internal static let ok = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.ok\")\n          /// Invitation sent\n          internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.send_invitation.dialog.title\")\n        }\n      }\n      internal enum Services {\n        internal enum AddService {\n          /// Add service\n          internal static let button = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.button\")\n          internal enum Error {\n            /// The service is unavailable at the moment\n            internal static let `default` = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.default\")\n            /// The conversation is full\n            internal static let full = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.full\")\n            /// The service can\u2019t be added\n            internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.services.add_service.error.title\")\n          }\n        }\n        internal enum OpenConversation {\n          /// Open conversation\n          internal static let item = L10n.tr(\"Localizable\", \"peoplepicker.services.open_conversation.item\")\n        }\n      }\n      internal enum ShareContacts {\n        internal enum NoResults {\n          /// Find people by name or email address\n          internal static let title = L10n.tr(\"Localizable\", \"peoplepicker.share_contacts.no_results.title\")\n        }\n      }\n      internal enum Suggested {\n        /// Plural format key: \"Knows %@ and %#@d_number_of_others@\"\n        internal static func knowsMore(_ p1: Any, _ p2: Int) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_more\", String(describing: p1), p2)\n        }\n        /// Knows %@\n        internal static func knowsOne(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_one\", String(describing: p1))\n        }\n        /// Knows %@ and %@\n        internal static func knowsTwo(_ p1: Any, _ p2: Any) -> String {\n          return L10n.tr(\"Localizable\", \"peoplepicker.suggested.knows_two\", String(describing: p1), String(describing: p2))\n        }\n      }\n      internal enum Title {\n        /// Add participants\n        internal static let addToConversation = L10n.tr(\"Localizable\", \"peoplepicker.title.add_to_conversation\")\n        /// Create group\n        internal static let createConversation = L10n.tr(\"Localizable\", \"peoplepicker.title.create_conversation\")\n      }\n    }\n    internal enum Phone {\n      internal enum Guidance {\n        /// Invalid phone number\n        internal static let invalid = L10n.tr(\"Localizable\", \"phone.guidance.invalid\")\n        /// Too many characters\n        internal static let toolong = L10n.tr(\"Localizable\", \"phone.guidance.toolong\")\n        /// Phone number is too short\n        internal static let tooshort = L10n.tr(\"Localizable\", \"phone.guidance.tooshort\")\n      }\n    }\n    internal enum Profile {\n      /// Block\u2026\n      internal static let blockButtonTitle = L10n.tr(\"Localizable\", \"profile.block_button_title\")\n      /// Block\n      internal static let blockButtonTitleAction = L10n.tr(\"Localizable\", \"profile.block_button_title_action\")\n      /// CANCEL REQUEST\n      internal static let cancelConnectionButtonTitle = L10n.tr(\"Localizable\", \"profile.cancel_connection_button_title\")\n      /// Create group\n      internal static let createConversationButtonTitle = L10n.tr(\"Localizable\", \"profile.create_conversation_button_title\")\n      /// Add to Favorites\n      internal static let favoriteButtonTitle = L10n.tr(\"Localizable\", \"profile.favorite_button_title\")\n      /// Open conversation\n      internal static let openConversationButtonTitle = L10n.tr(\"Localizable\", \"profile.open_conversation_button_title\")\n      /// Cancel\n      internal static let removeDialogButtonCancel = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_cancel\")\n      /// Remove From Group\u2026\n      internal static let removeDialogButtonRemove = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_remove\")\n      /// Remove From Group\n      internal static let removeDialogButtonRemoveConfirm = L10n.tr(\"Localizable\", \"profile.remove_dialog_button_remove_confirm\")\n      /// %@ won\u2019t be able to send or receive messages in this conversation.\n      internal static func removeDialogMessage(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"profile.remove_dialog_message\", String(describing: p1))\n      }\n      /// Remove?\n      internal static let removeDialogTitle = L10n.tr(\"Localizable\", \"profile.remove_dialog_title\")\n      /// Unblock\u2026\n      internal static let unblockButtonTitle = L10n.tr(\"Localizable\", \"profile.unblock_button_title\")\n      /// Unblock\n      internal static let unblockButtonTitleAction = L10n.tr(\"Localizable\", \"profile.unblock_button_title_action\")\n      /// Remove from Favorites\n      internal static let unfavoriteButtonTitle = L10n.tr(\"Localizable\", \"profile.unfavorite_button_title\")\n      internal enum BlockDialog {\n        /// Block\n        internal static let buttonBlock = L10n.tr(\"Localizable\", \"profile.block_dialog.button_block\")\n        /// Cancel\n        internal static let buttonCancel = L10n.tr(\"Localizable\", \"profile.block_dialog.button_cancel\")\n        /// %@ won\u2019t be able to contact you or add you to group conversations.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.block_dialog.message\", String(describing: p1))\n        }\n        /// Block?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.block_dialog.title\")\n      }\n      internal enum CancelConnectionRequestDialog {\n        /// No\n        internal static let buttonNo = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.button_no\")\n        /// Yes\n        internal static let buttonYes = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.button_yes\")\n        /// Cancel your connection request to %@?\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.message\", String(describing: p1))\n        }\n        /// Cancel Request?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.cancel_connection_request_dialog.title\")\n      }\n      internal enum ConnectionRequestDialog {\n        /// Ignore\n        internal static let buttonCancel = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.button_cancel\")\n        /// Connect\n        internal static let buttonConnect = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.button_connect\")\n        /// This will connect you and open the conversation with %@.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.connection_request_dialog.message\", String(describing: p1))\n        }\n        /// Accept?\n        internal static let title = L10n.tr(\"Localizable\", \"profile.connection_request_dialog.title\")\n      }\n      internal enum ConnectionRequestState {\n        /// BLOCKED\n        internal static let blocked = L10n.tr(\"Localizable\", \"profile.connection_request_state.blocked\")\n      }\n      internal enum Details {\n        /// Group admin\n        internal static let groupAdmin = L10n.tr(\"Localizable\", \"profile.details.group_admin\")\n        /// Guest\n        internal static let guest = L10n.tr(\"Localizable\", \"profile.details.guest\")\n        /// external\n        internal static let partner = L10n.tr(\"Localizable\", \"profile.details.partner\")\n        /// Details\n        internal static let title = L10n.tr(\"Localizable\", \"profile.details.title\")\n      }\n      internal enum Devices {\n        /// %@ is using an old version of Wire. No devices are shown here.\n        internal static func fingerprintMessageUnencrypted(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message_unencrypted\", String(describing: p1))\n        }\n        /// Devices\n        internal static let title = L10n.tr(\"Localizable\", \"profile.devices.title\")\n        internal enum Detail {\n          /// Verify that this matches the fingerprint shown on %@\u2019s device.\n          internal static func verifyMessage(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"profile.devices.detail.verify_message\", String(describing: p1))\n          }\n          internal enum ResetSession {\n            /// Reset Session\n            internal static let title = L10n.tr(\"Localizable\", \"profile.devices.detail.reset_session.title\")\n          }\n          internal enum ShowMyDevice {\n            /// Show my device fingerprint\n            internal static let title = L10n.tr(\"Localizable\", \"profile.devices.detail.show_my_device.title\")\n          }\n          internal enum VerifyMessage {\n            /// How do I do that?\n            internal static let link = L10n.tr(\"Localizable\", \"profile.devices.detail.verify_message.link\")\n          }\n        }\n        internal enum FingerprintMessage {\n          /// Why verify conversations?\n          internal static let link = L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message.link\")\n          /// Wire gives every device a unique fingerprint. Compare them with %@ and verify your conversation.\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"profile.devices.fingerprint_message.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum ExtendedMetadata {\n        /// Information\n        internal static let header = L10n.tr(\"Localizable\", \"profile.extended_metadata.header\")\n      }\n      internal enum GroupAdminStatusMemo {\n        /// When this is on, the admin can add or remove people and services, update group settings, and change a participant's role.\n        internal static let body = L10n.tr(\"Localizable\", \"profile.group_admin_status_memo.body\")\n      }\n      internal enum Profile {\n        internal enum GroupAdminOptions {\n          /// Group admin\n          internal static let title = L10n.tr(\"Localizable\", \"profile.profile.group_admin_options.title\")\n        }\n      }\n      internal enum ReadReceiptsDisabledMemo {\n        /// YOU HAVE DISABLED READ RECEIPTS\n        internal static let header = L10n.tr(\"Localizable\", \"profile.read_receipts_disabled_memo.header\")\n      }\n      internal enum ReadReceiptsEnabledMemo {\n        /// YOU HAVE ENABLED READ RECEIPTS\n        internal static let header = L10n.tr(\"Localizable\", \"profile.read_receipts_enabled_memo.header\")\n      }\n      internal enum ReadReceiptsMemo {\n        /// If both sides turn on read receipts, you can see when messages are read.\\n\\nYou can change this option in your account settings.\n        internal static let body = L10n.tr(\"Localizable\", \"profile.read_receipts_memo.body\")\n      }\n    }\n    internal enum ProfileView {\n      internal enum Accessibility {\n        /// Username\n        internal static let handle = L10n.tr(\"Localizable\", \"profile_view.accessibility.handle\")\n        /// Display name\n        internal static let name = L10n.tr(\"Localizable\", \"profile_view.accessibility.name\")\n        /// Team name\n        internal static let teamName = L10n.tr(\"Localizable\", \"profile_view.accessibility.team_name\")\n      }\n    }\n    internal enum Push {\n      internal enum Notification {\n        /// New message\n        internal static let newMessage = L10n.tr(\"Localizable\", \"push.notification.new_message\")\n        /// %@ joined Wire\n        internal static func newUser(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"push.notification.new_user\", String(describing: p1))\n        }\n      }\n    }\n    internal enum Registration {\n      /// Sign Up\n      internal static let confirm = L10n.tr(\"Localizable\", \"registration.confirm\")\n      /// Country Code\n      internal static let phoneCode = L10n.tr(\"Localizable\", \"registration.phone_code\")\n      /// Country\n      internal static let phoneCountry = L10n.tr(\"Localizable\", \"registration.phone_country\")\n      /// Email\n      internal static let registerByEmail = L10n.tr(\"Localizable\", \"registration.register_by_email\")\n      /// Phone\n      internal static let registerByPhone = L10n.tr(\"Localizable\", \"registration.register_by_phone\")\n      /// Registration\n      internal static let title = L10n.tr(\"Localizable\", \"registration.title\")\n      internal enum AddEmailPassword {\n        internal enum Hero {\n          /// This lets you use Wire on multiple devices.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.add_email_password.hero.paragraph\")\n          /// Add your email and password\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_email_password.hero.title\")\n        }\n      }\n      internal enum AddPhoneNumber {\n        internal enum Hero {\n          /// This helps us find people you may know. We never share it.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.add_phone_number.hero.paragraph\")\n          /// Add phone number\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_phone_number.hero.title\")\n        }\n        internal enum SkipButton {\n          /// Not now\n          internal static let title = L10n.tr(\"Localizable\", \"registration.add_phone_number.skip_button.title\")\n        }\n      }\n      internal enum AddressBookAccessDenied {\n        internal enum Hero {\n          /// Wire helps find your friends if you share your contacts.\n          internal static let paragraph1 = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.paragraph1\")\n          /// To enable access tap Settings and turn on Contacts.\n          internal static let paragraph2 = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.paragraph2\")\n          /// Wire does not have access to your contacts.\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.hero.title\")\n        }\n        internal enum MaybeLaterButton {\n          /// Maybe later\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.maybe_later_button.title\")\n        }\n        internal enum SettingsButton {\n          /// Settings\n          internal static let title = L10n.tr(\"Localizable\", \"registration.address_book_access_denied.settings_button.title\")\n        }\n      }\n      internal enum Alert {\n        /// Register with Another Email\n        internal static let changeEmailAction = L10n.tr(\"Localizable\", \"registration.alert.change_email_action\")\n        /// Register with Another Number\n        internal static let changePhoneAction = L10n.tr(\"Localizable\", \"registration.alert.change_phone_action\")\n        /// Log In\n        internal static let changeSigninAction = L10n.tr(\"Localizable\", \"registration.alert.change_signin_action\")\n        internal enum AccountExists {\n          /// The email address you used to register is already linked to an account.\\n\\n Use another email address, or try to log in if you own this account.\n          internal static let messageEmail = L10n.tr(\"Localizable\", \"registration.alert.account_exists.message_email\")\n          /// The phone number you used to register is already linked to an account.\\n\\nUse another phone number, or try to log in if you own this account.\n          internal static let messagePhone = L10n.tr(\"Localizable\", \"registration.alert.account_exists.message_phone\")\n          /// Account Exists\n          internal static let title = L10n.tr(\"Localizable\", \"registration.alert.account_exists.title\")\n        }\n      }\n      internal enum CloseEmailInvitationButton {\n        /// Use another email\n        internal static let emailTitle = L10n.tr(\"Localizable\", \"registration.close_email_invitation_button.email_title\")\n        /// Register by phone\n        internal static let phoneTitle = L10n.tr(\"Localizable\", \"registration.close_email_invitation_button.phone_title\")\n      }\n      internal enum ClosePhoneInvitationButton {\n        /// Register by email\n        internal static let emailTitle = L10n.tr(\"Localizable\", \"registration.close_phone_invitation_button.email_title\")\n        /// Use another phone\n        internal static let phoneTitle = L10n.tr(\"Localizable\", \"registration.close_phone_invitation_button.phone_title\")\n      }\n      internal enum CountrySelect {\n        /// Country\n        internal static let title = L10n.tr(\"Localizable\", \"registration.country_select.title\")\n      }\n      internal enum Devices {\n        /// Activated %@\n        internal static func activated(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.devices.activated\", String(describing: p1))\n        }\n        /// Active\n        internal static let activeListHeader = L10n.tr(\"Localizable\", \"registration.devices.active_list_header\")\n        /// If you don\u2019t recognize a device above, remove it and reset your password.\n        internal static let activeListSubtitle = L10n.tr(\"Localizable\", \"registration.devices.active_list_subtitle\")\n        /// Current\n        internal static let currentListHeader = L10n.tr(\"Localizable\", \"registration.devices.current_list_header\")\n        /// ID:\n        internal static let id = L10n.tr(\"Localizable\", \"registration.devices.id\")\n        /// Devices\n        internal static let title = L10n.tr(\"Localizable\", \"registration.devices.title\")\n      }\n      internal enum EmailFlow {\n        /// Register by Email\n        internal static let title = L10n.tr(\"Localizable\", \"registration.email_flow.title\")\n        internal enum EmailStep {\n          /// Edit Details\n          internal static let title = L10n.tr(\"Localizable\", \"registration.email_flow.email_step.title\")\n        }\n      }\n      internal enum EmailInvitation {\n        /// Invitation\n        internal static let title = L10n.tr(\"Localizable\", \"registration.email_invitation.title\")\n        internal enum Hero {\n          /// Choose a password to create your account.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.email_invitation.hero.paragraph\")\n          /// Hello, %@\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.email_invitation.hero.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum EnterName {\n        /// What should we call you?\n        internal static let hero = L10n.tr(\"Localizable\", \"registration.enter_name.hero\")\n        /// Your full name\n        internal static let placeholder = L10n.tr(\"Localizable\", \"registration.enter_name.placeholder\")\n        /// Edit Name\n        internal static let title = L10n.tr(\"Localizable\", \"registration.enter_name.title\")\n      }\n      internal enum EnterPhoneNumber {\n        /// Phone number\n        internal static let placeholder = L10n.tr(\"Localizable\", \"registration.enter_phone_number.placeholder\")\n        /// Edit phone number\n        internal static let title = L10n.tr(\"Localizable\", \"registration.enter_phone_number.title\")\n      }\n      internal enum LaunchBackButton {\n        /// Back\n        internal static let label = L10n.tr(\"Localizable\", \"registration.launch_back_button.label\")\n      }\n      internal enum NoHistory {\n        /// OK\n        internal static let gotIt = L10n.tr(\"Localizable\", \"registration.no_history.got_it\")\n        /// It\u2019s the first time you\u2019re using Wire on this device.\n        internal static let hero = L10n.tr(\"Localizable\", \"registration.no_history.hero\")\n        /// Restore from backup\n        internal static let restoreBackup = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup\")\n        /// For privacy reasons, your conversation history will not appear here.\n        internal static let subtitle = L10n.tr(\"Localizable\", \"registration.no_history.subtitle\")\n        internal enum LoggedOut {\n          /// OK\n          internal static let gotIt = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.got_it\")\n          /// You\u2019ve used Wire on this device before.\n          internal static let hero = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.hero\")\n          /// Messages sent in the meantime will not appear.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.no_history.logged_out.subtitle\")\n        }\n        internal enum RestoreBackup {\n          /// Completed\n          internal static let completed = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.completed\")\n          /// Restoring\u2026\n          internal static let restoring = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.restoring\")\n          internal enum Password {\n            /// The password is required to restore this backup.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.message\")\n            /// Password\n            internal static let placeholder = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.placeholder\")\n            /// This backup is password protected.\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password.title\")\n          }\n          internal enum PasswordError {\n            /// Wrong Password\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup.password_error.title\")\n          }\n        }\n        internal enum RestoreBackupFailed {\n          /// Your history could not be restored.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.message\")\n          /// Something went wrong\n          internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.title\")\n          /// Try again\n          internal static let tryAgain = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.try_again\")\n          internal enum WrongAccount {\n            /// You cannot restore history from a different account.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_account.message\")\n            /// Incompatible backup\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_account.title\")\n          }\n          internal enum WrongVersion {\n            /// This backup was created by a newer or outdated version of Wire and cannot be restored here.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_version.message\")\n            /// Incompatible backup\n            internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_failed.wrong_version.title\")\n          }\n        }\n        internal enum RestoreBackupWarning {\n          /// The backup contents will replace the conversation history on this device.\\nYou can only restore history from a backup of the same platform.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.message\")\n          /// Choose Backup File\n          internal static let proceed = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.proceed\")\n          /// Restore history\n          internal static let title = L10n.tr(\"Localizable\", \"registration.no_history.restore_backup_warning.title\")\n        }\n      }\n      internal enum Password {\n        internal enum Rules {\n          /// Plural format key: \"%#@character_count@\"\n          internal static func lowercase(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.lowercase\", p1)\n          }\n          /// Plural format key: \"at least %#@character_count@\"\n          internal static func minLength(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.min_length\", p1)\n          }\n          /// Use %@.\n          internal static func noRequirements(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.no_requirements\", String(describing: p1))\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func number(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.number\", p1)\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func special(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.special\", p1)\n          }\n          /// Plural format key: \"%#@character_count@\"\n          internal static func uppercase(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.uppercase\", p1)\n          }\n          /// Use %@, with %@.\n          internal static func withRequirements(_ p1: Any, _ p2: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.password.rules.with_requirements\", String(describing: p1), String(describing: p2))\n          }\n        }\n      }\n      internal enum Personal {\n        /// Create an account\n        internal static let title = L10n.tr(\"Localizable\", \"registration.personal.title\")\n      }\n      internal enum Phone {\n        internal enum CountryCode {\n          /// Double tap to use a phone number from this country.\n          internal static let hint = L10n.tr(\"Localizable\", \"registration.phone.country_code.hint\")\n        }\n        internal enum Verify {\n          /// Verify phone number\n          internal static let label = L10n.tr(\"Localizable\", \"registration.phone.verify.label\")\n        }\n        internal enum VerifyField {\n          /// Verification Code\n          internal static let label = L10n.tr(\"Localizable\", \"registration.phone.verify_field.label\")\n        }\n      }\n      internal enum PhoneCode {\n        /// Double tap to select another country code.\n        internal static let hint = L10n.tr(\"Localizable\", \"registration.phone_code.hint\")\n      }\n      internal enum PhoneCountry {\n        /// Double tap to select another country.\n        internal static let hint = L10n.tr(\"Localizable\", \"registration.phone_country.hint\")\n      }\n      internal enum PhoneInvitation {\n        /// Invitation\n        internal static let title = L10n.tr(\"Localizable\", \"registration.phone_invitation.title\")\n        internal enum Hero {\n          /// You are one step away from creating your account.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.phone_invitation.hero.paragraph\")\n          /// Hello, %@\n          internal static func title(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"registration.phone_invitation.hero.title\", String(describing: p1))\n          }\n        }\n      }\n      internal enum PushAccessDenied {\n        internal enum Hero {\n          /// Enable Notifications in Settings.\n          internal static let paragraph1 = L10n.tr(\"Localizable\", \"registration.push_access_denied.hero.paragraph1\")\n          /// Never miss a call or a message.\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.hero.title\")\n        }\n        internal enum MaybeLaterButton {\n          /// Maybe later\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.maybe_later_button.title\")\n        }\n        internal enum SettingsButton {\n          /// Go to Settings\n          internal static let title = L10n.tr(\"Localizable\", \"registration.push_access_denied.settings_button.title\")\n        }\n      }\n      internal enum SelectHandle {\n        internal enum Takeover {\n          /// Choose yours\n          internal static let chooseOwn = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.choose_own\")\n          /// Keep this one\n          internal static let keepSuggested = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.keep_suggested\")\n          /// Claim your unique name on Wire.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.subtitle\")\n          /// Learn more\n          internal static let subtitleLink = L10n.tr(\"Localizable\", \"registration.select_handle.takeover.subtitle_link\")\n        }\n      }\n      internal enum ShareContacts {\n        internal enum FindFriendsButton {\n          /// Share contacts\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.find_friends_button.title\")\n        }\n        internal enum Hero {\n          /// Share your contacts so we can connect you with others. We anonymize all information and do not share it with anyone else.\n          internal static let paragraph = L10n.tr(\"Localizable\", \"registration.share_contacts.hero.paragraph\")\n          /// Find people on Wire\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.hero.title\")\n        }\n        internal enum SkipButton {\n          /// Not now\n          internal static let title = L10n.tr(\"Localizable\", \"registration.share_contacts.skip_button.title\")\n        }\n      }\n      internal enum Signin {\n        /// Log in\n        internal static let title = L10n.tr(\"Localizable\", \"registration.signin.title\")\n        internal enum Alert {\n          internal enum PasswordNeeded {\n            /// Please enter your Password in order to log in.\n            internal static let message = L10n.tr(\"Localizable\", \"registration.signin.alert.password_needed.message\")\n            /// Password needed\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.alert.password_needed.title\")\n          }\n        }\n        internal enum TooManyDevices {\n          /// Remove one of your other devices to start using Wire on this one.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.subtitle\")\n          /// Too Many Devices\n          internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.title\")\n          internal enum ManageButton {\n            /// Manage devices\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.manage_button.title\")\n          }\n          internal enum ManageScreen {\n            /// Remove a Device\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.manage_screen.title\")\n          }\n          internal enum SignOutButton {\n            /// Log out\n            internal static let title = L10n.tr(\"Localizable\", \"registration.signin.too_many_devices.sign_out_button.title\")\n          }\n        }\n      }\n      internal enum TermsOfUse {\n        /// Accept\n        internal static let accept = L10n.tr(\"Localizable\", \"registration.terms_of_use.accept\")\n        /// I agree\n        internal static let agree = L10n.tr(\"Localizable\", \"registration.terms_of_use.agree\")\n        /// By continuing you agree to the Wire Terms of Use.\n        internal static let terms = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms\")\n        /// Welcome to Wire.\n        internal static let title = L10n.tr(\"Localizable\", \"registration.terms_of_use.title\")\n        internal enum Terms {\n          /// Terms of Use\n          internal static let link = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.link\")\n          /// Please accept the Terms of Use to continue.\n          internal static let message = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.message\")\n          /// Terms of Use\n          internal static let title = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.title\")\n          /// View\n          internal static let view = L10n.tr(\"Localizable\", \"registration.terms_of_use.terms.view\")\n        }\n      }\n      internal enum VerifyEmail {\n        /// We sent an email to %@.\\n Follow the link to verify your address.\n        internal static func instructions(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_email.instructions\", String(describing: p1))\n        }\n        internal enum Resend {\n          /// Re-send\n          internal static let buttonTitle = L10n.tr(\"Localizable\", \"registration.verify_email.resend.button_title\")\n          /// Didn\u2019t get the message?\n          internal static let instructions = L10n.tr(\"Localizable\", \"registration.verify_email.resend.instructions\")\n        }\n      }\n      internal enum VerifyPhoneNumber {\n        /// Enter the verification code we sent to %@\n        internal static func instructions(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_phone_number.instructions\", String(describing: p1))\n        }\n        /// Resend\n        internal static let resend = L10n.tr(\"Localizable\", \"registration.verify_phone_number.resend\")\n        /// No code showing up?\\nYou can request a new one in %.0f seconds\n        internal static func resendPlaceholder(_ p1: Float) -> String {\n          return L10n.tr(\"Localizable\", \"registration.verify_phone_number.resend_placeholder\", p1)\n        }\n      }\n    }\n    internal enum `Self` {\n      /// About\n      internal static let about = L10n.tr(\"Localizable\", \"self.about\")\n      /// Account\n      internal static let account = L10n.tr(\"Localizable\", \"self.account\")\n      /// Add email address and password\n      internal static let addEmailPassword = L10n.tr(\"Localizable\", \"self.add_email_password\")\n      /// Add phone number\n      internal static let addPhoneNumber = L10n.tr(\"Localizable\", \"self.add_phone_number\")\n      /// Support\n      internal static let helpCenter = L10n.tr(\"Localizable\", \"self.help_center\")\n      /// Profile\n      internal static let profile = L10n.tr(\"Localizable\", \"self.profile\")\n      /// Report Misuse\n      internal static let reportAbuse = L10n.tr(\"Localizable\", \"self.report_abuse\")\n      /// Settings\n      internal static let settings = L10n.tr(\"Localizable\", \"self.settings\")\n      /// Log Out\n      internal static let signOut = L10n.tr(\"Localizable\", \"self.sign_out\")\n      internal enum Accessibility {\n        /// Change profile picture\n        internal static let profilePhotoEditButton = L10n.tr(\"Localizable\", \"self.accessibility.profile_photo_edit_button\")\n        /// Profile picture\n        internal static let profilePhotoImage = L10n.tr(\"Localizable\", \"self.accessibility.profile_photo_image\")\n      }\n      internal enum HelpCenter {\n        /// Contact Support\n        internal static let contactSupport = L10n.tr(\"Localizable\", \"self.help_center.contact_support\")\n        /// Wire Support Website\n        internal static let supportWebsite = L10n.tr(\"Localizable\", \"self.help_center.support_website\")\n      }\n      internal enum NewDevice {\n        internal enum Voiceover {\n          /// Profile, new devices added\n          internal static let label = L10n.tr(\"Localizable\", \"self.new-device.voiceover.label\")\n        }\n      }\n      internal enum NewDeviceAlert {\n        /// Manage devices\n        internal static let manageDevices = L10n.tr(\"Localizable\", \"self.new_device_alert.manage_devices\")\n        /// \\n%@\\n\\nIf you don\u2019t recognize the device above, remove it and reset your password.\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"self.new_device_alert.message\", String(describing: p1))\n        }\n        /// \\n%@\\n\\nIf you don\u2019t recognize the devices above, remove them and reset your password.\n        internal static func messagePlural(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"self.new_device_alert.message_plural\", String(describing: p1))\n        }\n        /// Your account was used on:\n        internal static let title = L10n.tr(\"Localizable\", \"self.new_device_alert.title\")\n        /// OK\n        internal static let trustDevices = L10n.tr(\"Localizable\", \"self.new_device_alert.trust_devices\")\n        internal enum TitlePrefix {\n          /// Plural format key: \"%#@device_count@\"\n          internal static func devices(_ p1: Int) -> String {\n            return L10n.tr(\"Localizable\", \"self.new_device_alert.title_prefix.devices\", p1)\n          }\n        }\n      }\n      internal enum ReadReceiptsDescription {\n        /// You can change this option in your account settings.\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_description.title\")\n      }\n      internal enum ReadReceiptsDisabled {\n        /// You have disabled read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_disabled.title\")\n      }\n      internal enum ReadReceiptsEnabled {\n        /// You have enabled read receipts\n        internal static let title = L10n.tr(\"Localizable\", \"self.read_receipts_enabled.title\")\n      }\n      internal enum Settings {\n        /// Account\n        internal static let accountSection = L10n.tr(\"Localizable\", \"self.settings.account_section\")\n        internal enum Account {\n          internal enum DataUsagePermissions {\n            /// Data Usage Permissions\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account.data_usage_permissions.title\")\n          }\n        }\n        internal enum AccountAppearanceGroup {\n          /// Appearance\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_appearance_group.title\")\n        }\n        internal enum AccountDetails {\n          internal enum Actions {\n            /// Actions\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.actions.title\")\n          }\n          internal enum DeleteAccount {\n            /// Delete Account\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.title\")\n            internal enum Alert {\n              /// We will send you a message via email or SMS. Follow the link to permanently delete your account.\n              internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.alert.message\")\n              /// Delete Account\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.delete_account.alert.title\")\n            }\n          }\n          internal enum KeyFingerprint {\n            /// Key Fingerprint\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.key_fingerprint.title\")\n          }\n          internal enum LogOut {\n            internal enum Alert {\n              /// Your message history will be erased on this device.\n              internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.message\")\n              /// Password\n              internal static let password = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.password\")\n              /// Log out\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.log_out.alert.title\")\n            }\n          }\n          internal enum RemoveDevice {\n            /// Your password is required to remove the device\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.message\")\n            /// Password\n            internal static let password = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.password\")\n            /// Remove Device\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.title\")\n            internal enum Password {\n              /// Wrong password\n              internal static let error = L10n.tr(\"Localizable\", \"self.settings.account_details.remove_device.password.error\")\n            }\n          }\n        }\n        internal enum AccountDetailsGroup {\n          internal enum Info {\n            /// People can find you with these details.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_details_group.info.footer\")\n            /// Info\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details_group.info.title\")\n          }\n          internal enum Personal {\n            /// This information is not visible .\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_details_group.personal.footer\")\n            /// Personal\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_details_group.personal.title\")\n          }\n        }\n        internal enum AccountPersonalInformationGroup {\n          /// Personal Information\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_personal_information_group.title\")\n        }\n        internal enum AccountPictureGroup {\n          /// Color\n          internal static let color = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.color\")\n          /// Picture\n          internal static let picture = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.picture\")\n          /// Theme\n          internal static let theme = L10n.tr(\"Localizable\", \"self.settings.account_picture_group.theme\")\n        }\n        internal enum AccountSection {\n          internal enum AddHandle {\n            /// Add username\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.add_handle.title\")\n          }\n          internal enum Email {\n            /// Email\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.title\")\n            internal enum Change {\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.save\")\n              /// Email\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.title\")\n              internal enum Resend {\n                /// Confirmation email was resent to %@. Check your email inbox and follow the instructions.\n                internal static func message(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.resend.message\", String(describing: p1))\n                }\n                /// Email resent\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.resend.title\")\n              }\n              internal enum Verify {\n                /// Check your email inbox and follow the instructions.\n                internal static let description = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.description\")\n                /// Resend to %@\n                internal static func resend(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.resend\", String(describing: p1))\n                }\n                /// Verify email\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.email.change.verify.title\")\n              }\n            }\n          }\n          internal enum Handle {\n            /// Username\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.title\")\n            internal enum Change {\n              /// At least 2 characters. a\u2014z, 0\u20149, and  '.', '-', '_'  only.\n              internal static let footer = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.footer\")\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.save\")\n              /// Username\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.title\")\n              internal enum FailureAlert {\n                /// There was an error setting your username. Please try again.\n                internal static let message = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.failure_alert.message\")\n                /// Unable to set username\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.failure_alert.title\")\n              }\n              internal enum Footer {\n                /// Already taken\n                internal static let unavailable = L10n.tr(\"Localizable\", \"self.settings.account_section.handle.change.footer.unavailable\")\n              }\n            }\n          }\n          internal enum Name {\n            /// Name\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.name.title\")\n          }\n          internal enum Phone {\n            /// Phone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone.title\")\n          }\n          internal enum PhoneNumber {\n            internal enum Change {\n              /// Remove Phone Number\n              internal static let remove = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.remove\")\n              /// Save\n              internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.save\")\n              /// Phone\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.title\")\n              internal enum Remove {\n                /// Remove Phone Number\n                internal static let action = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.remove.action\")\n              }\n              internal enum Resend {\n                /// Verification code was resent to %@.\n                internal static func message(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.resend.message\", String(describing: p1))\n                }\n                /// Code resent\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.resend.title\")\n              }\n              internal enum Verify {\n                /// Enter code\n                internal static let codePlaceholder = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.code_placeholder\")\n                /// Enter the verification code we sent to: %@.\n                internal static func description(_ p1: Any) -> String {\n                  return L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.description\", String(describing: p1))\n                }\n                /// Resend Code\n                internal static let resend = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.resend\")\n                /// No code showing up?\\nYou can request a new one every 30 seconds.\n                internal static let resendDescription = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.resend_description\")\n                /// Save\n                internal static let save = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.save\")\n                /// Verify\n                internal static let title = L10n.tr(\"Localizable\", \"self.settings.account_section.phone_number.change.verify.title\")\n              }\n            }\n          }\n        }\n        internal enum AddAccount {\n          /// Add an account\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_account.title\")\n          internal enum Error {\n            /// You can only be logged in with three accounts at once. Log out from one to add another.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.add_account.error.message\")\n            /// Three accounts active\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_account.error.title\")\n          }\n        }\n        internal enum AddTeamOrAccount {\n          /// Add Account\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.add_team_or_account.title\")\n        }\n        internal enum Advanced {\n          /// Advanced\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.title\")\n          internal enum DebuggingTools {\n            /// Debugging Tools\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.title\")\n            internal enum EnterDebugCommand {\n              /// Enter debug command\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.enter_debug_command.title\")\n            }\n            internal enum FirstUnreadConversation {\n              /// Find first unread conversation\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.first_unread_conversation.title\")\n            }\n            internal enum ShowUserId {\n              /// Show my user ID\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.debugging_tools.show_user_id.title\")\n            }\n          }\n          internal enum ResetPushToken {\n            /// If you experience problems with push notifications, Wire Support may ask you to reset this token.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token.subtitle\")\n            /// Reset Push Notifications Token\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token.title\")\n          }\n          internal enum ResetPushTokenAlert {\n            /// Notifications will be restored in a few seconds.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token_alert.message\")\n            /// Push token has been reset\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.reset_push_token_alert.title\")\n          }\n          internal enum Troubleshooting {\n            /// Troubleshooting\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.title\")\n            internal enum SubmitDebug {\n              /// This information helps Wire Support diagnose calling problems and improve the overall app experience.\n              internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.submit_debug.subtitle\")\n              /// Debug Report\n              internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.troubleshooting.submit_debug.title\")\n            }\n          }\n          internal enum VersionTechnicalDetails {\n            /// Version Technical Details\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.advanced.version_technical_details.title\")\n          }\n        }\n        internal enum ApnsLogging {\n          /// APNS Logging\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.apns_logging.title\")\n        }\n        internal enum Callkit {\n          /// Share with iOS\n          internal static let caption = L10n.tr(\"Localizable\", \"self.settings.callkit.caption\")\n          /// Show Wire calls on the lock screen and in iOS call history. If iCloud is enabled, call history is shared with Apple.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.callkit.description\")\n          /// Calls\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.callkit.title\")\n        }\n        internal enum Conversations {\n          /// History\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.conversations.title\")\n        }\n        internal enum CreateTeam {\n          /// Create a team\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.create_team.title\")\n        }\n        internal enum DeveloperOptions {\n          /// Developer Options\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.developer_options.title\")\n        }\n        internal enum DeviceDetails {\n          internal enum Fingerprint {\n            /// Wire gives every device a unique fingerprint. Compare them and verify your devices and conversations.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.fingerprint.subtitle\")\n          }\n          internal enum RemoveDevice {\n            /// Remove this device if you have stopped using it. You will be logged out of this device immediately.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.remove_device.subtitle\")\n          }\n          internal enum ResetSession {\n            /// If fingerprints don\u2019t match, reset the session to generate new encryption keys on both sides.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.device_details.reset_session.subtitle\")\n            /// The session has been reset\n            internal static let success = L10n.tr(\"Localizable\", \"self.settings.device_details.reset_session.success\")\n          }\n        }\n        internal enum EnableReadReceipts {\n          /// Send Read Receipts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.enable_read_receipts.title\")\n        }\n        internal enum EncryptMessagesAtRest {\n          /// Encrypt messages at rest\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.encrypt_messages_at_rest.title\")\n        }\n        internal enum ExternalApps {\n          /// Open With\n          internal static let header = L10n.tr(\"Localizable\", \"self.settings.external_apps.header\")\n        }\n        internal enum HistoryBackup {\n          /// Back Up Now\n          internal static let action = L10n.tr(\"Localizable\", \"self.settings.history_backup.action\")\n          /// Create a backup to preserve your conversation history. You can use this to restore history if you lose your device or switch to a new one.\\n\\nChoose a strong password to protect the backup file.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.history_backup.description\")\n          /// Back Up Conversations\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.title\")\n          internal enum Error {\n            /// Error\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.error.title\")\n          }\n          internal enum Password {\n            /// Cancel\n            internal static let cancel = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.cancel\")\n            /// The backup will be compressed and encrypted with the password you set here.\n            internal static let description = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.description\")\n            /// Next\n            internal static let next = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.next\")\n            /// Password\n            internal static let placeholder = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.placeholder\")\n            /// Set Password\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.password.title\")\n          }\n          internal enum SetEmail {\n            /// You need an email and a password in order to back up your conversation history. You can do it from the account page in Settings.\n            internal static let message = L10n.tr(\"Localizable\", \"self.settings.history_backup.set_email.message\")\n            /// Set an email and password.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.history_backup.set_email.title\")\n          }\n        }\n        internal enum InviteFriends {\n          /// Invite people\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.invite_friends.title\")\n        }\n        internal enum LinkOptions {\n          internal enum Browser {\n            /// Browser\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.browser.title\")\n          }\n          internal enum Maps {\n            /// Locations\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.maps.title\")\n          }\n          internal enum Twitter {\n            /// Tweets\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.link_options.twitter.title\")\n          }\n        }\n        internal enum ManageTeam {\n          /// Manage Team\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.manage_team.title\")\n        }\n        internal enum Notifications {\n          internal enum ChatAlerts {\n            /// New messages in other conversations.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.notifications.chat_alerts.footer\")\n            /// Message Banners\n            internal static let toggle = L10n.tr(\"Localizable\", \"self.settings.notifications.chat_alerts.toggle\")\n          }\n          internal enum PushNotification {\n            /// Sender name and message on the lock screen and in Notification Center.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.footer\")\n            /// Notifications\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.title\")\n            /// Message Previews\n            internal static let toogle = L10n.tr(\"Localizable\", \"self.settings.notifications.push_notification.toogle\")\n          }\n        }\n        internal enum OptionsMenu {\n          /// Options\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.options_menu.title\")\n        }\n        internal enum PasswordResetMenu {\n          /// Reset Password\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.password_reset_menu.title\")\n        }\n        internal enum PopularDemand {\n          /// By popular demand\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.popular_demand.title\")\n          internal enum DarkMode {\n            /// Switch between dark and light theme.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.popular_demand.dark_mode.footer\")\n          }\n          internal enum SendButton {\n            /// Disable to send via the return key.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.popular_demand.send_button.footer\")\n            /// Send Button\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.popular_demand.send_button.title\")\n          }\n        }\n        internal enum Privacy {\n          internal enum ClearHistory {\n            /// This will permanently erase the content of all your conversations.\n            internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.privacy.clear_history.subtitle\")\n            /// Clear History\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy.clear_history.title\")\n          }\n        }\n        internal enum PrivacyAnalytics {\n          /// Send anonymous usage data\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics.title\")\n        }\n        internal enum PrivacyAnalyticsMenu {\n          internal enum Description {\n            /// Usage data allows Wire to understand how the app is being used and how it can be improved. The data is anonymous and does not include the content of your communications (such as messages, files or calls).\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_menu.description.title\")\n          }\n          internal enum Devices {\n            /// Devices\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_menu.devices.title\")\n          }\n        }\n        internal enum PrivacyAnalyticsSection {\n          /// Usage and Crash Reports\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_analytics_section.title\")\n        }\n        internal enum PrivacyContactsMenu {\n          internal enum DescriptionDisabled {\n            /// This helps you connect with others. We anonymize all the information and do not share it with anyone else. Allow access via Settings > Privacy > Contacts.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_menu.description_disabled.title\")\n          }\n          internal enum SettingsButton {\n            /// Open Contacts Settings\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_menu.settings_button.title\")\n          }\n        }\n        internal enum PrivacyContactsSection {\n          /// Contacts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_contacts_section.title\")\n        }\n        internal enum PrivacyCrash {\n          /// Send anonymous crash data\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_crash.title\")\n        }\n        internal enum PrivacyCrashMenu {\n          internal enum Description {\n            /// Send anonymous crash reports and basic data like version number and operating system to help Wire identify and solve issues in the app.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_crash_menu.description.title\")\n          }\n        }\n        internal enum PrivacySectionGroup {\n          /// When this is off, you won\u2019t be able to see read receipts from other people.\\n\\nThis setting does not apply to group conversations.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"self.settings.privacy_section_group.subtitle\")\n          /// Privacy\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_section_group.title\")\n        }\n        internal enum PrivacySecurity {\n          /// Lock With Passcode\n          internal static let lockApp = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app\")\n          internal enum DisableLinkPreviews {\n            /// Previews may still be shown for links from other people.\n            internal static let footer = L10n.tr(\"Localizable\", \"self.settings.privacy_security.disable_link_previews.footer\")\n            /// Create Link Previews\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.privacy_security.disable_link_previews.title\")\n          }\n          internal enum LockApp {\n            /// Unlock Wire\n            internal static let description = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.description\")\n            internal enum Subtitle {\n              /// If forgotten, your passcode can not be recovered.\n              internal static let customAppLockReminder = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.custom_app_lock_reminder\")\n              /// Unlock with Face ID or enter your passcode.\n              internal static let faceId = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.face_id\")\n              /// Lock Wire after %@ in the background.\n              internal static func lockDescription(_ p1: Any) -> String {\n                return L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.lock_description\", String(describing: p1))\n              }\n              /// Unlock by entering your passcode.\n              internal static let `none` = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.none\")\n              /// Unlock with Touch ID or enter your passcode.\n              internal static let touchId = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_app.subtitle.touch_id\")\n            }\n          }\n          internal enum LockPassword {\n            internal enum Description {\n              /// Unlock with your password.\n              internal static let unlock = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.unlock\")\n              /// Wrong password. If you recently changed your password, connect to the internet and try again.\n              internal static let wrongOfflinePassword = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.wrong_offline_password\")\n              /// Wrong password. Please try again.\n              internal static let wrongPassword = L10n.tr(\"Localizable\", \"self.settings.privacy_security.lock_password.description.wrong_password\")\n            }\n          }\n        }\n        internal enum ReceiveNewsAndOffers {\n          /// Receive Newsletter\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.receiveNews_and_offers.title\")\n          internal enum Description {\n            /// Receive news and product updates from Wire via email.\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.receiveNews_and_offers.description.title\")\n          }\n        }\n        internal enum SoundMenu {\n          /// Sound Alerts\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.title\")\n          internal enum AllSounds {\n            /// All\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.all_sounds.title\")\n          }\n          internal enum Message {\n            /// Text Tone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.message.title\")\n          }\n          internal enum MuteWhileTalking {\n            /// First message and pings\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.mute_while_talking.title\")\n          }\n          internal enum NoSounds {\n            /// None\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.no_sounds.title\")\n          }\n          internal enum Ping {\n            /// Ping\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ping.title\")\n          }\n          internal enum Ringtone {\n            /// Ringtone\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ringtone.title\")\n          }\n          internal enum Ringtones {\n            /// Ringtones\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.ringtones.title\")\n          }\n          internal enum Sounds {\n            /// None\n            internal static let `none` = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.none\")\n            /// Sounds\n            internal static let title = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.title\")\n            /// Wire Call\n            internal static let wireCall = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_call\")\n            /// Wire Message\n            internal static let wireMessage = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_message\")\n            /// Wire Ping\n            internal static let wirePing = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_ping\")\n            /// Wire\n            internal static let wireSound = L10n.tr(\"Localizable\", \"self.settings.sound_menu.sounds.wire_sound\")\n          }\n        }\n        internal enum SwitchAccount {\n          /// Switch anyway\n          internal static let action = L10n.tr(\"Localizable\", \"self.settings.switch_account.action\")\n          /// A call is active in this account.\\nSwitching accounts will hang up the current call.\n          internal static let message = L10n.tr(\"Localizable\", \"self.settings.switch_account.message\")\n        }\n        internal enum TechnicalReport {\n          /// Include detailed log\n          internal static let includeLog = L10n.tr(\"Localizable\", \"self.settings.technical_report.include_log\")\n          /// No mail client detected. Tap \"OK\" and send logs manually to: \n          internal static let noMailAlert = L10n.tr(\"Localizable\", \"self.settings.technical_report.no_mail_alert\")\n          /// Detailed logs could contain personal data\n          internal static let privacyWarning = L10n.tr(\"Localizable\", \"self.settings.technical_report.privacy_warning\")\n          /// Send report to Wire\n          internal static let sendReport = L10n.tr(\"Localizable\", \"self.settings.technical_report.send_report\")\n          internal enum Mail {\n            /// Wire Debug Report\n            internal static let subject = L10n.tr(\"Localizable\", \"self.settings.technical_report.mail.subject\")\n          }\n        }\n        internal enum TechnicalReportSection {\n          /// Technical Report\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.technical_report_section.title\")\n        }\n        internal enum Vbr {\n          /// This makes audio calls use less data and work better on slower networks. Turn off to use Constant Bitrate Encoding.\n          internal static let description = L10n.tr(\"Localizable\", \"self.settings.vbr.description\")\n          /// Variable Bit Rate Encoding\n          internal static let title = L10n.tr(\"Localizable\", \"self.settings.vbr.title\")\n        }\n      }\n      internal enum Voiceover {\n        /// Open profile and settings\n        internal static let hint = L10n.tr(\"Localizable\", \"self.voiceover.hint\")\n        /// Profile\n        internal static let label = L10n.tr(\"Localizable\", \"self.voiceover.label\")\n      }\n    }\n    internal enum SendInvitation {\n      /// Connect with me on Wire\n      internal static let subject = L10n.tr(\"Localizable\", \"send_invitation.subject\")\n      /// I\u2019m on Wire, search for %@ or visit get.wire.com\n      internal static func text(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"send_invitation.text\", String(describing: p1))\n      }\n    }\n    internal enum SendInvitationNoEmail {\n      /// I\u2019m on Wire. Visit get.wire.com to connect with me.\n      internal static let text = L10n.tr(\"Localizable\", \"send_invitation_no_email.text\")\n    }\n    internal enum ShareExtension {\n      internal enum Voiceover {\n        /// All clients verified.\n        internal static let conversationSecure = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_secure\")\n        /// Not all clients verified.\n        internal static let conversationSecureWithIgnored = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_secure_with_ignored\")\n        /// Under legal hold.\n        internal static let conversationUnderLegalHold = L10n.tr(\"Localizable\", \"share_extension.voiceover.conversation_under_legal_hold\")\n      }\n    }\n    internal enum Shortcut {\n      internal enum MarkAllAsRead {\n        /// Mark All as Read\n        internal static let title = L10n.tr(\"Localizable\", \"shortcut.mark_all_as_read.title\")\n      }\n    }\n    internal enum Signin {\n      /// Log In\n      internal static let confirm = L10n.tr(\"Localizable\", \"signin.confirm\")\n      /// Forgot password?\n      internal static let forgotPassword = L10n.tr(\"Localizable\", \"signin.forgot_password\")\n      internal enum CompanyIdp {\n        internal enum Button {\n          /// For Companies\n          internal static let title = L10n.tr(\"Localizable\", \"signin.company_idp.button.title\")\n        }\n      }\n      internal enum Email {\n        internal enum MissingPassword {\n          /// Enter your email address and password to continue.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"signin.email.missing_password.subtitle\")\n        }\n      }\n      internal enum Phone {\n        internal enum MissingPassword {\n          /// Enter your phone number to continue.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"signin.phone.missing_password.subtitle\")\n        }\n      }\n      internal enum UseEmail {\n        /// Login with Email\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_email.label\")\n      }\n      internal enum UseOnePassword {\n        /// Double tap to fill your password with 1Password\n        internal static let hint = L10n.tr(\"Localizable\", \"signin.use_one_password.hint\")\n        /// Log in with 1Password\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_one_password.label\")\n      }\n      internal enum UsePhone {\n        /// Login with Phone\n        internal static let label = L10n.tr(\"Localizable\", \"signin.use_phone.label\")\n      }\n    }\n    internal enum SigninLogout {\n      /// Your session expired. You need to log in again to continue.\n      internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.subheadline\")\n      internal enum Email {\n        /// Your session expired. Enter your email address and password to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.email.subheadline\")\n      }\n      internal enum Phone {\n        /// Your session expired. Enter your phone number to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.phone.subheadline\")\n      }\n      internal enum Sso {\n        /// Enterprise log in\n        internal static let buton = L10n.tr(\"Localizable\", \"signin_logout.sso.buton\")\n        /// Your session expired. Log in with your enterprise account to continue.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"signin_logout.sso.subheadline\")\n      }\n    }\n    internal enum Sketchpad {\n      /// Tap colors to change brush size\n      internal static let initialHint = L10n.tr(\"Localizable\", \"sketchpad.initial_hint\")\n    }\n    internal enum SystemStatusBar {\n      internal enum NoInternet {\n        /// There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\n        internal static let explanation = L10n.tr(\"Localizable\", \"system_status_bar.no_internet.explanation\")\n        /// No Internet\n        internal static let title = L10n.tr(\"Localizable\", \"system_status_bar.no_internet.title\")\n      }\n      internal enum PoorConnectivity {\n        /// We can\u2019t guarantee voice quality. Connect to Wi-Fi or try changing your location.\n        internal static let explanation = L10n.tr(\"Localizable\", \"system_status_bar.poor_connectivity.explanation\")\n        /// Slow Internet, can\u2019t call now\n        internal static let title = L10n.tr(\"Localizable\", \"system_status_bar.poor_connectivity.title\")\n      }\n    }\n    internal enum Team {\n      internal enum ActivationCode {\n        /// You\u2019ve got mail\n        internal static let headline = L10n.tr(\"Localizable\", \"team.activation_code.headline\")\n        /// Enter the verification code we sent to %@.\n        internal static func subheadline(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"team.activation_code.subheadline\", String(describing: p1))\n        }\n        internal enum Button {\n          /// Change email\n          internal static let changeEmail = L10n.tr(\"Localizable\", \"team.activation_code.button.change_email\")\n          /// Change phone number\n          internal static let changePhone = L10n.tr(\"Localizable\", \"team.activation_code.button.change_phone\")\n          /// Resend code\n          internal static let resend = L10n.tr(\"Localizable\", \"team.activation_code.button.resend\")\n        }\n      }\n      internal enum Email {\n        /// Your account\n        internal static let headline = L10n.tr(\"Localizable\", \"team.email.headline\")\n        /// Enter your work email address.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"team.email.subheadline\")\n        internal enum Button {\n          /// Learn More\n          internal static let learnMore = L10n.tr(\"Localizable\", \"team.email.button.learn_more\")\n        }\n        internal enum Textfield {\n          /// Your company email\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.email.textfield.placeholder\")\n        }\n      }\n      internal enum FullName {\n        /// Your name\n        internal static let headline = L10n.tr(\"Localizable\", \"team.full_name.headline\")\n        internal enum Textfield {\n          /// Set full name\n          internal static let accessibility = L10n.tr(\"Localizable\", \"team.full_name.textfield.accessibility\")\n          /// Full name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.full_name.textfield.placeholder\")\n        }\n      }\n      internal enum Invite {\n        internal enum Error {\n          /// This email has already been invited\n          internal static let alreadyInvited = L10n.tr(\"Localizable\", \"team.invite.error.already_invited\")\n          /// This email address is already in use\n          internal static let alreadyRegistered = L10n.tr(\"Localizable\", \"team.invite.error.already_registered\")\n          /// Something went wrong, please try again\n          internal static let generic = L10n.tr(\"Localizable\", \"team.invite.error.generic\")\n          /// No Internet Connection\n          internal static let noInternet = L10n.tr(\"Localizable\", \"team.invite.error.no_internet\")\n          /// The maximum number of invitations has been sent\n          internal static let tooManyInvitations = L10n.tr(\"Localizable\", \"team.invite.error.too_many_invitations\")\n        }\n        internal enum Header {\n          /// Your Wire team is ready to go. Invite your colleagues as members.\n          internal static let subtitle = L10n.tr(\"Localizable\", \"team.invite.header.subtitle\")\n          /// Build your team\n          internal static let title = L10n.tr(\"Localizable\", \"team.invite.header.title\")\n        }\n        internal enum LearnMore {\n          /// Learn more\n          internal static let title = L10n.tr(\"Localizable\", \"team.invite.learn_more.title\")\n        }\n        internal enum Textfield {\n          /// Enter email address for colleague to invite.\n          internal static let accesibility = L10n.tr(\"Localizable\", \"team.invite.textfield.accesibility\")\n          /// Colleague's email\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.invite.textfield.placeholder\")\n        }\n        internal enum TopBar {\n          /// Done\n          internal static let done = L10n.tr(\"Localizable\", \"team.invite.top_bar.done\")\n          /// Skip\n          internal static let skip = L10n.tr(\"Localizable\", \"team.invite.top_bar.skip\")\n        }\n      }\n      internal enum Name {\n        /// Name your team\n        internal static let headline = L10n.tr(\"Localizable\", \"team.name.headline\")\n        /// You can always change it later.\n        internal static let subheadline = L10n.tr(\"Localizable\", \"team.name.subheadline\")\n        /// What is Wire Pro?\n        internal static let whatiswireforteams = L10n.tr(\"Localizable\", \"team.name.whatiswireforteams\")\n        internal enum Textfield {\n          /// Set team name\n          internal static let accessibility = L10n.tr(\"Localizable\", \"team.name.textfield.accessibility\")\n          /// team name\n          internal static let placeholder = L10n.tr(\"Localizable\", \"team.name.textfield.placeholder\")\n        }\n      }\n      internal enum Password {\n        /// Set password\n        internal static let headline = L10n.tr(\"Localizable\", \"team.password.headline\")\n      }\n      internal enum PhoneActivationCode {\n        /// Verification\n        internal static let headline = L10n.tr(\"Localizable\", \"team.phone_activation_code.headline\")\n      }\n    }\n    internal enum ToolTip {\n      internal enum Contacts {\n        /// Start a conversation. Call, message and share in private or with groups.\n        internal static let message = L10n.tr(\"Localizable\", \"tool_tip.contacts.message\")\n        /// Conversations start here\n        internal static let title = L10n.tr(\"Localizable\", \"tool_tip.contacts.title\")\n      }\n    }\n    internal enum TwitterStatus {\n      /// %@ on Twitter\n      internal static func onTwitter(_ p1: Any) -> String {\n        return L10n.tr(\"Localizable\", \"twitter_status.on_twitter\", String(describing: p1))\n      }\n    }\n    internal enum Unlock {\n      /// Wrong passcode\n      internal static let errorLabel = L10n.tr(\"Localizable\", \"unlock.error_label\")\n      /// Enter passcode to unlock Wire\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"unlock.title_label\")\n      /// Access as new device\n      internal static let wipeButton = L10n.tr(\"Localizable\", \"unlock.wipe_button\")\n      internal enum SubmitButton {\n        /// unlock\n        internal static let title = L10n.tr(\"Localizable\", \"unlock.submit_button.title\")\n      }\n      internal enum Textfield {\n        /// Enter your passcode\n        internal static let placeholder = L10n.tr(\"Localizable\", \"unlock.textfield.placeholder\")\n      }\n    }\n    internal enum UrlAction {\n      /// Confirm\n      internal static let confirm = L10n.tr(\"Localizable\", \"url_action.confirm\")\n      /// Confirm URL action\n      internal static let title = L10n.tr(\"Localizable\", \"url_action.title\")\n      internal enum AuthorizationRequired {\n        /// You need to log in to view this content.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.authorization_required.message\")\n        /// Authorization required.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.authorization_required.title\")\n      }\n      internal enum ConnectToBot {\n        /// Would you like to connect to the bot?\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.connect_to_bot.message\")\n      }\n      internal enum InvalidConversation {\n        /// You may not have permission with this account or the person may not be on Wire.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_conversation.message\")\n        /// Wire can't open this conversation.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_conversation.title\")\n      }\n      internal enum InvalidLink {\n        /// The link you opened is not valid.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_link.message\")\n        /// Invalid link.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_link.title\")\n      }\n      internal enum InvalidUser {\n        /// You may not have permission with this account or it no longer exists.\n        internal static let message = L10n.tr(\"Localizable\", \"url_action.invalid_user.message\")\n        /// Wire can't find this person.\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.invalid_user.title\")\n      }\n      internal enum SwitchBackend {\n        /// This configuration will connect the app to a third-party server:\\n%@\n        internal static func message(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"url_action.switch_backend.message\", String(describing: p1))\n        }\n        /// Connect to server\n        internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.title\")\n        internal enum Error {\n          /// Please check your internet connection, verify the link and try again.\n          internal static let invalidBackend = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.invalid_backend\")\n          /// You are already logged in. To switch to this server, log out of all accounts and try again.\n          internal static let loggedIn = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.logged_in\")\n          internal enum InvalidBackend {\n            /// The server is not responding\n            internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.invalid_backend.title\")\n          }\n          internal enum LoggedIn {\n            /// Can\u2019t switch servers\n            internal static let title = L10n.tr(\"Localizable\", \"url_action.switch_backend.error.logged_in.title\")\n          }\n        }\n      }\n    }\n    internal enum UserCell {\n      internal enum Title {\n        ///  (You)\n        internal static let youSuffix = L10n.tr(\"Localizable\", \"user_cell.title.you_suffix\")\n      }\n    }\n    internal enum Verification {\n      /// Double tap to enter the code.\n      internal static let codeHint = L10n.tr(\"Localizable\", \"verification.code_hint\")\n      /// Six-digit code. Text field.\n      internal static let codeLabel = L10n.tr(\"Localizable\", \"verification.code_label\")\n    }\n    internal enum VideoCall {\n      internal enum CameraAccess {\n        /// Wire doesn\u2019t have access to the camera\n        internal static let denied = L10n.tr(\"Localizable\", \"video_call.camera_access.denied\")\n      }\n    }\n    internal enum Voice {\n      internal enum AcceptButton {\n        /// Accept\n        internal static let title = L10n.tr(\"Localizable\", \"voice.accept_button.title\")\n      }\n      internal enum Alert {\n        internal enum CallInProgress {\n          /// OK\n          internal static let confirm = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.confirm\")\n          /// You can have only one active call at a time\n          internal static let message = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.message\")\n          /// Call in progress\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.call_in_progress.title\")\n        }\n        internal enum CameraWarning {\n          /// Wire needs access to the camera\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.camera_warning.title\")\n        }\n        internal enum MicrophoneWarning {\n          /// Wire needs access to the microphone\n          internal static let title = L10n.tr(\"Localizable\", \"voice.alert.microphone_warning.title\")\n        }\n      }\n      internal enum CallButton {\n        /// Call\n        internal static let title = L10n.tr(\"Localizable\", \"voice.call_button.title\")\n      }\n      internal enum CallError {\n        internal enum UnsupportedVersion {\n          /// Later\n          internal static let dismiss = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.dismiss\")\n          /// You received a call that isn't supported by this version of Wire.\\nGet the latest version in the App Store.\n          internal static let message = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.message\")\n          /// Please update Wire\n          internal static let title = L10n.tr(\"Localizable\", \"voice.call_error.unsupported_version.title\")\n        }\n      }\n      internal enum CancelButton {\n        /// Cancel\n        internal static let title = L10n.tr(\"Localizable\", \"voice.cancel_button.title\")\n      }\n      internal enum DeclineButton {\n        /// Decline\n        internal static let title = L10n.tr(\"Localizable\", \"voice.decline_button.title\")\n      }\n      internal enum Degradation {\n        /// You started using a new device.\n        internal static let newSelfDevice = L10n.tr(\"Localizable\", \"voice.degradation.new_self_device\")\n        /// %@ started using a new device.\n        internal static func newUserDevice(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.degradation.new_user_device\", String(describing: p1))\n        }\n      }\n      internal enum DegradationIncoming {\n        /// Do you still want to accept the call?\n        internal static let prompt = L10n.tr(\"Localizable\", \"voice.degradation_incoming.prompt\")\n      }\n      internal enum DegradationOutgoing {\n        /// Do you still want to place the call?\n        internal static let prompt = L10n.tr(\"Localizable\", \"voice.degradation_outgoing.prompt\")\n      }\n      internal enum EndCallButton {\n        /// End Call\n        internal static let title = L10n.tr(\"Localizable\", \"voice.end_call_button.title\")\n      }\n      internal enum FlipVideoButton {\n        /// Flip\n        internal static let title = L10n.tr(\"Localizable\", \"voice.flip_video_button.title\")\n      }\n      internal enum HangUpButton {\n        /// Hang Up\n        internal static let title = L10n.tr(\"Localizable\", \"voice.hang_up_button.title\")\n      }\n      internal enum MuteButton {\n        /// Mute\n        internal static let title = L10n.tr(\"Localizable\", \"voice.mute_button.title\")\n      }\n      internal enum NetworkError {\n        /// You must be online to call. Check your connection and try again.\n        internal static let body = L10n.tr(\"Localizable\", \"voice.network_error.body\")\n        /// No Internet Connection\n        internal static let title = L10n.tr(\"Localizable\", \"voice.network_error.title\")\n      }\n      internal enum SpeakerButton {\n        /// Speaker\n        internal static let title = L10n.tr(\"Localizable\", \"voice.speaker_button.title\")\n      }\n      internal enum Status {\n        /// Constant Bit Rate\n        internal static let cbr = L10n.tr(\"Localizable\", \"voice.status.cbr\")\n        /// %@\\nConnecting\n        internal static func joining(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.status.joining\", String(describing: p1))\n        }\n        /// %@\\nCall ended\n        internal static func leaving(_ p1: Any) -> String {\n          return L10n.tr(\"Localizable\", \"voice.status.leaving\", String(describing: p1))\n        }\n        /// Bad connection\n        internal static let lowConnection = L10n.tr(\"Localizable\", \"voice.status.low_connection\")\n        /// Video turned off\n        internal static let videoNotAvailable = L10n.tr(\"Localizable\", \"voice.status.video_not_available\")\n        internal enum GroupCall {\n          /// %@\\nringing\n          internal static func incoming(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.group_call.incoming\", String(describing: p1))\n          }\n        }\n        internal enum OneToOne {\n          /// %@\\ncalling\n          internal static func incoming(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.one_to_one.incoming\", String(describing: p1))\n          }\n          /// %@\\nringing\n          internal static func outgoing(_ p1: Any) -> String {\n            return L10n.tr(\"Localizable\", \"voice.status.one_to_one.outgoing\", String(describing: p1))\n          }\n        }\n      }\n      internal enum TopOverlay {\n        /// Ongoing call\n        internal static let accessibilityTitle = L10n.tr(\"Localizable\", \"voice.top_overlay.accessibility_title\")\n        /// Tap to return to call\n        internal static let tapToReturn = L10n.tr(\"Localizable\", \"voice.top_overlay.tap_to_return\")\n      }\n      internal enum VideoButton {\n        /// Video\n        internal static let title = L10n.tr(\"Localizable\", \"voice.video_button.title\")\n      }\n    }\n    internal enum WarningScreen {\n      /// There was a change in Wire\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"warning_screen.title_label\")\n      internal enum InfoLabel {\n        /// Next time, unlock Wire the same way you unlock your phone.\n        internal static let forcedApplock = L10n.tr(\"Localizable\", \"warning_screen.info_label.forced_applock\")\n        /// Your organization does not need app lock anymore. From now, you can access Wire without any obstacles.\n        internal static let nonForcedApplock = L10n.tr(\"Localizable\", \"warning_screen.info_label.non_forced_applock\")\n      }\n      internal enum MainInfo {\n        /// Your organization needs to lock your app when Wire is not in use to keep the team safe.\n        internal static let forcedApplock = L10n.tr(\"Localizable\", \"warning_screen.main_info.forced_applock\")\n      }\n    }\n    internal enum WipeDatabase {\n      /// The data stored on this device can only be accessed with your passcode.\\n\\nIf you have forgotten your passcode, you can delete the database to log in again as a new device.\\n\\nBy deleting the database, \n      internal static let infoLabel = L10n.tr(\"Localizable\", \"wipe_database.info_label\")\n      /// Access as new device\n      internal static let titleLabel = L10n.tr(\"Localizable\", \"wipe_database.title_label\")\n      internal enum Alert {\n        /// Delete\n        internal static let confirm = L10n.tr(\"Localizable\", \"wipe_database.alert.confirm\")\n        /// Delete\n        internal static let confirmInput = L10n.tr(\"Localizable\", \"wipe_database.alert.confirm_input\")\n        /// Confirm database deletion\n        internal static let description = L10n.tr(\"Localizable\", \"wipe_database.alert.description\")\n        /// Type 'Delete' to verify you want to delete all data in this device.\n        internal static let message = L10n.tr(\"Localizable\", \"wipe_database.alert.message\")\n        /// Type 'Delete'\n        internal static let placeholder = L10n.tr(\"Localizable\", \"wipe_database.alert.placeholder\")\n      }\n      internal enum Button {\n        /// I want to delete the database\n        internal static let title = L10n.tr(\"Localizable\", \"wipe_database.button.title\")\n      }\n      internal enum InfoLabel {\n        /// all local data and messages for this account will be permanently deleted.\n        internal static let highlighted = L10n.tr(\"Localizable\", \"wipe_database.info_label.highlighted\")\n      }\n    }\n    internal enum WipeDatabaseCompletion {\n      /// Your data and messages have been deleted. You can now log in again as a new device.\n      internal static let subtitle = L10n.tr(\"Localizable\", \"wipe_database_completion.subtitle\")\n      /// Database deleted\n      internal static let title = L10n.tr(\"Localizable\", \"wipe_database_completion.title\")\n    }\n  }\n}\n// swiftlint:enable explicit_type_interface function_parameter_count identifier_name line_length\n// swiftlint:enable nesting type_body_length type_name vertical_whitespace_opening_braces\n\n// MARK: - Implementation Details\n\nextension L10n {\n  private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {\n    let format = BundleToken.bundle.localizedString(forKey: key, value: nil, table: table)\n    return String(format: format, locale: Locale.current, arguments: args)\n  }\n}\n\n// swiftlint:disable convenience_type\nprivate final class BundleToken {\n  static let bundle: Bundle = {\n    #if SWIFT_PACKAGE\n    return Bundle.module\n    #else\n    return Bundle(for: BundleToken.self)\n    #endif\n  }()\n}\n// swiftlint:enable convenience_type\n", "//\n// Wire\n// Copyright (C) 2016 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\n\n// General strings\n\"general.ok\" = \"OK\";\n\"general.next\" = \"Next\";\n\"general.cancel\" = \"Cancel\";\n\"general.close\" = \"Close\";\n\"general.back\" = \"Back\";\n\"general.open_settings\" = \"Open Wire Settings\";\n\"general.edit\" = \"Edit\";\n\"general.done\" = \"Done\";\n\"general.confirm\" = \"OK\";\n\"general.later\" = \"Later\";\n\"general.skip\" = \"Not Now\";\n\"general.accept\" = \"Accept\";\n\"general.decline\" = \"No, thanks\";\n\"general.failure\" = \"Something went wrong\";\n\"general.failure.try_again\" = \"Please try again.\";\n\"general.service\" = \"Service\";\n\"general.off\" = \"Off\";\n\"general.on\" = \"On\";\n\"general.loading\" = \"Loading\u2026\";\n\"general.paste\" = \"Paste\";\n\n// Language like Chinese does not use space to sperate words or sentences.\n\"general.space_between_words\" = \" \";\n\n\"general.guest-room-name\" = \"Guest room\";\n\n// User Cell\n\"user_cell.title.you_suffix\" = \" (You)\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// People picker/start UI\n\"peoplepicker.search_placeholder\" = \"Search by name or username\";\n\"peoplepicker.header.top_people\" = \"Top people\";\n\"peoplepicker.button.create_conversation\" = \"Create group\";\n\"peoplepicker.button.add_to_conversation\" = \"Add Participants to Group\";\n\"peoplepicker.header.conversations\" = \"Groups\";\n\"peoplepicker.header.team_conversations\" = \"%@ Groups\";\n\"peoplepicker.header.send_invitation\" = \"Invite\";\n\"peoplepicker.header.contacts\" = \"Contacts\";\n\"peoplepicker.header.contacts_personal\" = \"Personal Contacts\";\n\"peoplepicker.header.directory\" = \"Connect\";\n\"peoplepicker.header.federation\" = \"Connect with other domain\";\n\n\"peoplepicker.group.title.singular\" = \"Add Participants\";\n\"peoplepicker.group.title.plural\" = \"Add Participants (%d)\";\n\"peoplepicker.group.skip\" = \"Skip\";\n\"peoplepicker.group.done\" = \"Done\";\n\"peoplepicker.group.create\" = \"Create\";\n\n\"peoplepicker.header.people\" = \"People\";\n\"peoplepicker.header.services\" = \"Services\";\n\"peoplepicker.services.open_conversation.item\" = \"Open conversation\";\n\"peoplepicker.services.add_service.button\" = \"Add service\";\n\"peoplepicker.services.add_service.error.title\" = \"The service can\u2019t be added\";\n\"peoplepicker.services.add_service.error.default\" = \"The service is unavailable at the moment\";\n\"peoplepicker.services.add_service.error.full\" = \"The conversation is full\";\n\n\"peoplepicker.title.create_conversation\" = \"Create group\";\n\"peoplepicker.title.add_to_conversation\" = \"Add participants\";\n\n\"peoplepicker.no_contacts_title\" = \"No Contacts.\";\n\n\"peoplepicker.no_matching_results_title\" = \"No results.\";\n\"peoplepicker.no_matching_results_message\" = \"Enter a full email address.\";\n\"peoplepicker.no_search_results\" = \"No matching results. Try entering a different name.\";\n\n\"peoplepicker.no_matching_results.action.send_invite\" = \"Send an invitation\";\n\"peoplepicker.no_matching_results.action.share_contacts\" = \"Share contacts\";\n\n\"peoplepicker.no_matching_results_provide_valid_email\" = \"Please enter a valid email address\";\n\"peoplepicker.no_matching_results_after_address_book_upload_title\" = \"No results.\";\n\"peoplepicker.no_matching_results_services_title\" = \"Services are helpers that can improve your workflow. To enable them, ask your administrator.\";\n\"peoplepicker.no_matching_results_services_admin_title\" = \"Services are helpers that can improve your workflow.\";\n\"peoplepicker.no_matching_results_services_manage_services_title\" = \"Manage Services\";\n/* This sentence ends with button title, contained in peoplepicker.no_matching_results_after_address_book_upload_button */\n\"peoplepicker.no_matching_results_after_address_book_upload_message\" = \"Enter a full email address or\";\n/*  */\n\"peoplepicker.no_matching_results_after_address_book_upload_button\" = \"share contacts\";\n\n\"peoplepicker.share_contacts.no_results.title\" = \"Find people by name or email address\";\n\n\"peoplepicker.send_invitation.dialog.title\" = \"Invitation sent\";\n\"peoplepicker.send_invitation.dialog.message\" = \"It can be used for 2 weeks. Send a new one if it expires.\";\n\"peoplepicker.send_invitation.dialog.ok\" = \"OK\";\n\n\"peoplepicker.invite_more_people\" = \"Invite more people\";\n\"peoplepicker.invite_team_members\" = \"Invite people to join the team\";\n\"peoplepicker.quick-action.open-conversation\" = \"Open\";\n\"peoplepicker.quick-action.create-conversation\" = \"Create group\";\n\"peoplepicker.quick-action.create-guest-room\" = \"Create guest room\";\n\"peoplepicker.quick-action.admin-services\" = \"Manage Services\";\n\n\"peoplepicker.federation.domain_unvailable\" = \"The federated domain is currently not available. [Learn more](%@)\";\n\n\"add_participants.all_contacts_added\" = \"Everyone\u2019s here.\";\n\n\"add_participants.alert.title\" = \"The group is full\";\n\"add_participants.alert.message.new_conversation\" = \"Up to %d people can join a conversation.\";\n\"add_participants.alert.message.existing_conversation\" = \"Up to %1$d people can join a conversation. Currently there is only room for %2$d more.\";\n\n// Contacts UI\n\"contacts_ui.search_placeholder\" = \"Search by name\";\n\"contacts_ui.invite_others\" = \"Invite others\";\n\"contacts_ui.name_in_contacts\" = \"%@ in Contacts\";\n\"contacts_ui.connection_request\" = \"Requested to connect\";\n\"contacts_ui.action_button.invite\" = \"Invite\";\n\"contacts_ui.action_button.open\" = \"Open\";\n\"contacts_ui.invite_sheet.cancel_button_title\" = \"Cancel\";\n\"contacts_ui.notification.invitation_sent\" = \"Invitation sent\";\n\"contacts_ui.notification.invitation_failed\" = \"Failed to send invitation\";\n\"contacts_ui.title\" = \"Invite people\";\n\n\"conversation_list.empty.all_archived.message\" = \"Everything archived\";\n\"conversation_list.empty.no_contacts.message\" = \"Start a conversation or\\ncreate a group.\";\n\n\n// Conversation List Indicator\n\"conversation_list.right_accessory.join_button.title\" = \"Join\";\n\"conversation_list.header.self_team.accessibility_value\" = \"%@ account.\";\n\"conversation_list.header.self_team.accessibility_value.inactive\" = \"Tap to activate.\";\n\"conversation_list.header.self_team.accessibility_value.active\" = \"Active now.\";\n\"conversation_list.header.self_team.accessibility_value.has_new_messages\" = \"Has new messages.\";\n\n// Conversation List Data Usage Permission Dialog\n\"conversation_list.data_usage_permission_alert.title\" = \"Help us make Wire better\";\n\"conversation_list.data_usage_permission_alert.message\" = \"I agree that Wire may create and use anonymous usage and error reports to improve the Wire App. I can revoke this consent at any time.\";\n\"conversation_list.data_usage_permission_alert.disagree\" = \"No\";\n\"conversation_list.data_usage_permission_alert.agree\" = \"I Agree\";\n\n// Profile Header View\n\"conversation.connection_view.in_address_book\" = \"in Contacts\";\n\n// Conversation list voiceover accessibility\n\"conversation_list.voiceover.open_conversation.hint\" = \"Open conversation\";\n\"conversation_list.voiceover.status.pending_connection\" = \"pending\";\n\"conversation_list.voiceover.status.active_call\" = \"active call\";\n\"conversation_list.voiceover.status.missed_call\" = \"missed call\";\n\"conversation_list.voiceover.status.pause_media\" = \"pause media\";\n\"conversation_list.voiceover.status.play_media\" = \"play media\";\n\"conversation_list.voiceover.status.silenced\" = \"silenced\";\n\"conversation_list.voiceover.status.typing\" = \"typing\";\n\"conversation_list.voiceover.status.ping\" = \"ping\";\n\"conversation_list.voiceover.status.mention\" = \"you are mentioned\";\n\"conversation_list.voiceover.status.reply\" = \"reply\";\n\"conversation_list.voiceover.bottom_bar.recent_button.label\" = \"recent\";\n\"conversation_list.voiceover.bottom_bar.recent_button.hint\" = \"list of recent conversations\";\n\"conversation_list.voiceover.bottom_bar.folder_button.label\" = \"folders\";\n\"conversation_list.voiceover.bottom_bar.folder_button.hint\" = \"list of conversations organized in folders\";\n\"conversation_list.voiceover.bottom_bar.archived_button.label\" = \"archived\";\n\"conversation_list.voiceover.bottom_bar.archived_button.hint\" = \"list of archived conversations\";\n\"conversation_list.voiceover.bottom_bar.contacts_button.label\" = \"contacts\";\n\"conversation_list.voiceover.bottom_bar.contacts_button.hint\" = \"search for people on Wire\";\n\"conversation_list.voiceover.bottom_bar.compose_button.label\" = \"compose\";\n\"conversation_list.voiceover.bottom_bar.compose_button.hint\" = \"compose messages and save for later\";\n\"conversation_list.voiceover.bottom_bar.camera_button.label\" = \"camera\";\n\"conversation_list.voiceover.bottom_bar.camera_button.hint\" = \"take picture and send quickly\";\n\"conversation_list.voiceover.unread_messages.hint\" = \"You have unread messages.\";\n\n// Archived List\n\"archived_list.title\" = \"archive\";\n\n// Add contact tool tip\n\"tool_tip.contacts.title\" = \"Conversations start here\";\n\"tool_tip.contacts.message\" = \"Start a conversation. Call, message and share in private or with groups.\";\n\n// \"Knows\" subtitle in cell: \"Knows Indrek\", \"Knows Indrek and Jane\", \"Knows Indrek and 5 others\"\n\"peoplepicker.suggested.knows_one\" = \"Knows %@\";\n\"peoplepicker.suggested.knows_two\" = \"Knows %@ and %@\";\n\"peoplepicker.hide_search_result\" = \"Hide\";\n\"peoplepicker.hide_search_result_progress\" = \"Hiding\u2026\";\n\n\"send_invitation.subject\" = \"Connect with me on Wire\";\n\"send_invitation.text\" = \"I\u2019m on Wire, search for %@ or visit get.wire.com\";\n\"send_invitation_no_email.text\" = \"I\u2019m on Wire. Visit get.wire.com to connect with me.\";\n\n// Folders\n\n\"folder.creation.name.title\" = \"Create new folder\";\n\"folder.creation.name.button.create\" = \"Create\";\n\"folder.creation.name.header\" = \"Move the conversation \\\"%@\\\" to a new folder.\";\n\"folder.creation.name.footer\" = \"Maximum 64 characters\";\n\"folder.creation.name.placeholder\" = \"Folder name\";\n\n\"folder.picker.title\" = \"Move to\";\n\"folder.picker.empty.hint\" = \"Create a new folder by pressing the + button\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++x\n// In-app notifications (chat heads)\n\"notifications.shared_a_photo\" = \"shared a picture\";\n\"notifications.pinged\" = \"pinged\";\n\"notifications.sent_file\" = \"shared a file\";\n\"notifications.sent_location\" = \"shared a location\";\n\"notifications.sent_video\" = \"shared a video\";\n\"notifications.sent_audio\" = \"shared an audio\";\n\"notifications.in_conversation\" = \"%@ - %@\";\n\"notifications.this_conversation\" = \"%@ in this conversation\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// List (labels) - Needs to be revised with updated guidance\n\"list.title\" = \"Conversations\";\n\"list.archived_conversations\" = \"ARCHIVE\";\n\"list.archived_conversations_close\" = \"Close archive\";\n\n\"list.section.groups\" = \"Groups\";\n\"list.section.contacts\" = \"People\";\n\"list.section.requests\" = \"Requests\";\n\"list.section.favorites\" = \"Favorites\";\n\n\"conversation.voiceover.verified\" = \"verified\";\n\"conversation.voiceover.legalhold\" = \"legal hold\";\n\"conversation.voiceover.value.active\" = \"active\";\n\"conversation.voiceover.value.disabled\" = \"disabled\";\n\n\"conversation.status.secutity_alert.default\" = \"New security alert\";\n\n\"conversation.status.typing\" = \"Typing a message\u2026\";\n\"conversation.status.typing.group\" = \"%@: typing a message\u2026\";\n\"conversation.status.silenced\" = \"Muted\";\n\"conversation.status.poor_connection\" = \"Poor connection\";\n\"conversation.status.blocked\" = \"Blocked\";\n\"conversation.status.incoming_call\" = \"%@ is calling\u2026\";\n\"conversation.status.incoming_call.unknown\" = \"Someone is calling\u2026\";\n\n\"conversation.status.message.text\" = \"%@\";\n\"conversation.status.message.link\" = \"Shared a link\";\n\"conversation.status.message.image\" = \"Shared a picture\";\n\"conversation.status.message.location\" = \"Shared a location\";\n\"conversation.status.message.audio\" = \"Shared an audio message\";\n\"conversation.status.message.video\" = \"Shared a video\";\n\"conversation.status.message.file\" = \"Shared a file\";\n\"conversation.status.message.knock\" = \"Pinged\";\n\"conversation.status.message.missedcall\" = \"Missed call\";\n\"conversation.status.message.missedcall.groups\" = \"Missed call from %@\";\n\"conversation.status.message.mention\" = \"%@\";\n\"conversation.status.message.reply\" = \"%@\";\n\"conversation.status.message.ephemeral\" = \"Sent a message\";\n\"conversation.status.message.ephemeral.group\" = \"Someone sent a message\";\n\"conversation.status.message.ephemeral.mention\" = \"Mentioned you\";\n\"conversation.status.message.ephemeral.mention.group\" = \"Someone mentioned you\";\n\"conversation.status.message.ephemeral.reply\" = \"Replied to your message\";\n\"conversation.status.message.ephemeral.reply.group\" = \"Someone replied to your message\";\n\"conversation.status.message.ephemeral.knock\" = \"Pinged\";\n\"conversation.status.message.ephemeral.knock.group\" = \"Someone pinged\";\n\n\"conversation.status.unsent\" = \"\u26a0\ufe0f Unsent message\";\n\"conversation.status.you\" = \"You\";\n\"conversation.status.someone\" = \"Someone\";\n\"conversation.status.you_was_added\" = \"%@ added you\";\n\"conversation.status.you_were_removed\" = \"You were removed\";\n\"conversation.status.you_left\" = \"You left\";\n\"conversation.status.started_conversation\" = \"%@ started a conversation\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Compose Entry Point\n\n\"compose.contact.title\" = \"Conversation\";\n\"compose.message.title\" = \"Message\";\n\n\"conversation_details.open_button.accessibility_hint\" = \"Double tap to view the details of the conversation.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Conversation\n\"conversation.invite_more_people.title\" = \"Spread the word!\";\n\"conversation.invite_more_people.description\" = \"Add people to this conversation\";\n\"conversation.invite_more_people.explanation_url\" = \"https://support.wire.com\";\n\"conversation.invite_more_people.button_title\" = \"Add People\";\n\n// Conversation names\n\"conversation.displayname.emptygroup\" = \"Empty group conversation\";\n\n\"conversation.input_bar.verified\" = \"Verified\";\n\"conversation.input_bar.placeholder\" = \"Type a message\";\n\"conversation.input_bar.placeholder_ephemeral\" = \"Timed message\";\n\n\"conversation.input_bar.audio_message.tooltip.pull_send\" = \"Swipe up to send\";\n\"conversation.input_bar.audio_message.tooltip.tap_send\" = \"Tap to send\";\n\"conversation.input_bar.audio_message.too_long.title\" = \"Recording Stopped\";\n\"conversation.input_bar.audio_message.too_long.message\" = \"Audio messages are limited to %@.\";\n\n\"conversation.input_bar.audio_message.too_long_size.message\" = \"File size for audio messages is limited to %@.\";\n\n\"conversation.input_bar.audio_message.send\" = \"Send\";\n\n\"conversation.input_bar.audio_message.keyboard.record_tip\" = \"Tap to record\\nYou can  %@  it after that\";\n\"conversation.input_bar.audio_message.keyboard.filter_tip\" = \"Choose a filter above\";\n\n\"conversation.call.many_participants_confirmation.title\" = \"Start a call\";\n\"conversation.call.many_participants_confirmation.message\" = \"This will call %d people\";\n\"conversation.call.many_participants_confirmation.call\" = \"Call\";\n\n\"conversation.connection_view.in_address_book\" = \"in Contacts\";\n\n\"conversation.input_bar.shortcut.send\" = \"Send Message\";\n\"conversation.input_bar.shortcut.newline\" = \"Insert line break\";\n\"conversation.input_bar.shortcut.edit_last_message\" = \"Edit Last Message\";\n\"conversation.input_bar.shortcut.cancel_editing_message\" = \"Cancel\";\n\"conversation.input_bar.shortcut.choose_previous_mention\" = \"Choose previous mention\";\n\"conversation.input_bar.shortcut.choose_next_mention\" = \"Choose next mention\";\n\n\"conversation.input_bar.message_too_long.title\" = \"Message too long\";\n\"conversation.input_bar.message_too_long.message\" = \"You can send messages up to %d characters long.\";\n\n\"conversation.create.group_name.title\" = \"Create group\";\n\"conversation.create.group_name.placeholder\" = \"Group name\";\n\"conversation.create.guidance.empty\" = \"At least 1 character\";\n\"conversation.create.guidance.toolong\" = \"Too many characters\";\n\"conversation.create.options.title\" = \"Conversation options\";\n\"conversation.create.options.subtitle\" = \"Guests and services: %@, Read receipts: %@\";\n\"conversation.create.guests.title\" = \"Allow guests and services\";\n\"conversation.create.guests.subtitle\" = \"Open this conversation to services and people outside your team.\";\n\"conversation.create.receipts.title\" = \"Read receipts\";\n\"conversation.create.receipts.subtitle\" = \"When this is on, people can see when their messages in this conversation are read.\";\n\n\"conversation.input_bar.ongoing_call_alert.title\" = \"Ongoing call\";\n\"conversation.input_bar.ongoing_call_alert.audio.message\" = \"You can\u2019t record an audio message during a call.\";\n\"conversation.input_bar.ongoing_call_alert.video.message\" = \"You can\u2019t record a video during a call.\";\n\"conversation.input_bar.ongoing_call_alert.photo.message\" = \"You can\u2019t take a picture during a call.\";\n\n\"conversation.alert.message_deleted\" = \"The message is deleted.\";\n\n\"conversation.guests_present\" = \"Guests are present\";\n\"conversation.services_present\" = \"Services are active\";\n\"conversation.guests_services_present\" = \"Guests and services are present\";\n\"conversation.action.search\" = \"Search\";\n\n// Reply message preview\n\"conversation.input_bar.message_preview.image\" = \"Image\";\n\"conversation.input_bar.message_preview.location\" = \"Location\";\n\"conversation.input_bar.message_preview.video\" = \"Video\";\n\"conversation.input_bar.message_preview.audio\" = \"Audio Message\";\n\"conversation.input_bar.message_preview.file\" = \"File\";\n\"conversation.input_bar.close_reply\" = \"Cancel reply\";\n\n\"conversation.input_bar.message_preview.accessibility_description\" = \"Replying to message: %@\";\n\"conversation.input_bar.message_preview.accessibility.image_message\" = \"Image message\";\n\"conversation.input_bar.message_preview.accessibility.location_message\" = \"Location message\";\n\"conversation.input_bar.message_preview.accessibility.video_message\" = \"Video message\";\n\"conversation.input_bar.message_preview.accessibility.audio_message\" = \"Audio message\";\n\"conversation.input_bar.message_preview.accessibility.file_message\" = \"File message (%@)\";\n\"conversation.input_bar.message_preview.accessibility.unknown_message\" = \"Unknown message\";\n\"conversation.input_bar.message_preview.accessibility.message_from\" = \"%@ from %@\";\n\n\"image_confirmer.confirm\" = \"OK\";\n\"image_confirmer.cancel\" = \"Cancel\";\n\"image.add_sketch\" = \"Add a sketch\";\n\"image.add_emoji\" = \"Add an emoji\";\n\"image.edit_image\" = \"Edit image\";\n\n// Camera access\n\"camera_access.denied\" = \"Wire needs access to the camera\";\n\"video_call.camera_access.denied\" = \"Wire doesn\u2019t have access to the camera\";\n\"camera_access.denied.instruction\" = \"\";\n\"camera_access.denied.open_settings\" = \"Enable it in Wire Settings\";\n\n// Camera and photos access, keyboard\n\"keyboard_photos_access.denied.keyboard.settings\" = \"Settings\";\n\"keyboard_photos_access.denied.keyboard.camera_and_photos\" = \"Wire needs access to your\\ncamera and photos.\"; // split text on two lines for a better text balance\n\"keyboard_photos_access.denied.keyboard.photos\" = \"Wire needs access to your photos.\";\n\"keyboard_photos_access.denied.keyboard.camera\" = \"Wire needs access to your camera.\";\n\"keyboard_photos_access.denied.keyboard.ongoing_call\" = \"You can\u2019t access the camera while you are on a video call.\";\n\n// Camera Controls\n\"camera_controls.aeaf_lock\" = \"AE/AF Lock\";\n\n// Location\n\"location.send_button.title\" = \"Send\";\n\"location.unauthorized_alert.title\" = \"Enable Location Services\";\n\"location.unauthorized_alert.message\" = \"To send your location, enable Location Services and allow Wire to access your location.\";\n\"location.unauthorized_alert.cancel\" = \"Cancel\";\n\"location.unauthorized_alert.settings\" = \"Settings\";\n\n// Twitter\n\"twitter_status.on_twitter\" = \"%@ on Twitter\";\n\n// Ephemeral message\n\"input.ephemeral.timeout.none\" = \"Off\";\n\"input.ephemeral.title\" = \"Set a time for the message to disappear\";\n\n// System messages\n\"content.system.you_nominative\" = \"you\";\n\"content.system.you_dative\" = \"you\";\n\"content.system.and_you_dative\" = \"and you\";\n\"content.system.you_accusative\" = \"you\";\n\n\"content.system.continued_conversation\" = \"Start a conversation with %@\";\n\"content.system.started_conversation.truncated_people\" = \"and %@\";\n\"content.system.started_conversation.truncated_people.others\" = \"%@ others\";\n\"content.system.started_conversation.complete_team\" = \"all team members\";\n\"content.system.started_conversation.complete_team.guests\" = \"all team members and %@ guests\";\n\n\"content.system.other_started_conversation\" = \"%@ started a conversation with %@\";\n\"content.system.you_started_conversation\" = \"You started a conversation with %@\";\n\n\"content.system.you_added_participant\" = \"You added %@\";\n\"content.system.other_added_participant\" = \"%@ added %@\";\n\"content.system.other_added_you\" = \"%@ added you\";\n\n\"content.system.participants_you\" = \"You\";\n\"content.system.participants_1_other\" = \"%@ and %@\";\n\"content.system.other_left\" = \"%@ left\";\n\"content.system.you_left\" = \"You left\";\n\"content.system.other_removed_other\" = \"%@ removed %@\";\n\"content.system.other_removed_you\" = \"%@ removed you\";\n\"content.system.you_removed_other\" = \"You removed %@\";\n\n\"content.system.services.warning\" = \"Services have access to the content of this conversation\";\n\n// Link attachment messages\n\n\"content.message.link_attachment.accessibility_label.youtube\" = \"YouTube video preview\";\n\"content.message.link_attachment.accessibility_label.soundcloud_song\" = \"SoundCloud song preview\";\n\"content.message.link_attachment.accessibility_label.soundcloud_set\" = \"SoundCloud playlist preview\";\n\n// Digital signature\n\"digital_signature.alert.error\" = \"Unfortunately, your digital signature failed.\";\n\"digital_signature.alert.error.no_consent_url\" = \"Unfortunately, the signature form did not open. Please try again.\";\n\"digital_signature.alert.error.no_signature\" = \"Unfortunately, your digital signature failed. Please try again.\";\n\"digital_signature.alert.download_necessary\" = \"Please save and read the document before signing it.\";\n\n// New conversation participants added / removed / started system message\n\n\"content.system.conversation.other.started\" = \"%@ started a conversation with %@\";\n\"content.system.conversation.other.added\" = \"%@ added %@\";\n\"content.system.conversation.other.removed\" = \"%@ removed %@\";\n\"content.system.conversation.other.left\" = \"%@ left\";\n\n\"content.system.conversation.you.started\" = \"%@ started a conversation with %@\";\n\"content.system.conversation.you.added\" = \"%@ added %@\";\n\"content.system.conversation.you.removed\" = \"%@ removed %@\";\n\"content.system.conversation.you.left\" = \"%@ left\";\n\"content.system.conversation.team.member-leave\" = \"%@ was removed from the team.\";\n\"content.system.conversation.guest.joined\" = \"%@ joined\";\n\n\"content.system.conversation.invite.title\" = \"Services and people outside your team can join this conversation.\";\n\"content.system.conversation.invite.button\" = \"Invite people\";\n\n\"content.system.other_renamed_conv_to_nothing\" = \"%@ removed the conversation name\";\n\"content.system.you_renamed_conv_to_nothing\" = \"You removed the conversation name\";\n\"content.system.pending_message_timestamp\" = \"Sending\u2026\";\n\"content.system.message_sent_timestamp\" = \"Sent\";\n\"content.system.message_delivered_timestamp\" = \"Delivered\";\n\"content.system.message_read_timestamp\" = \"Seen\";\n\"content.system.failedtosend_message_timestamp\" = \"Sending failed.\";\n\"content.system.failedtosend_message_timestamp_resend\" = \"Resend\";\n\"content.system.failedtosend_message_timestamp_delete\" = \"Delete\";\n\"content.system.like_tooltip\" = \"Tap to like\";\n\"content.system.deleted_message_prefix_timestamp\" = \"Deleted: %@\";\n\"content.system.edited_message_prefix_timestamp\" = \"Edited: %@\";\n\"content.system.connecting_to\" = \"Connecting to %@.\\nStart a conversation\";\n\"content.system.connected_to\" = \"Connected to %@\\nStart a conversation\";\n\"content.system.other_wanted_to_talk\" = \"%@ called\";\n\"content.system.you_wanted_to_talk\" = \"You called\";\n\"content.system.ephemeral_time_remaining\" = \"%@ left\";\n\n\"content.system.self_user_new_client\" = \"**You** started using [a new device](%@)\";\n\"content.system.self_user_new_self_client\" = \"**You** started using [this device](%@)\";\n\n\"content.system.you_started\" = \"You\";\n\n\"content.system.call.called\" = \"%@ called\";\n\"content.system.call.called-you\" = \"%@ called\";\n\"content.system.call.called.you\" = \"You\";\n\n\"content.system.call.missed-call\" = \"Missed call\";\n\"content.system.call.missed-call-you\" = \"Missed call\";\n\n\"content.system.call.missed-call.groups\" = \"Missed call from %@\";\n\"content.system.call.missed-call.groups-you\" = \"Missed call from %2$@\";\n\"content.system.call.missed-call.groups.you\" = \"You\";\n\n\"content.system.renamed_conv.title\" = \"%@ renamed the conversation\";\n\"content.system.renamed_conv.title-you\" = \"%@ renamed the conversation\";\n\"content.system.renamed_conv.title.you\" = \"You\";\n\n\"content.system.conversation.with_name.title\" = \"%@ started the conversation\";\n\"content.system.conversation.with_name.title-you\" = \"%@ started the conversation\";\n\n\"content.system.conversation.with_name.participants\" = \"with\";\n\n\"content.system.message_timer_changes\" = \"%@ set the message timer to %@\";\n\"content.system.message_timer_changes-you\" = \"%@ set the message timer to %@\";\n\n\"content.system.message_timer_off\" = \"%@ turned off the message timer\";\n\"content.system.message_timer_off-you\" = \"%@ turned off the message timer\";\n\n// read receipt\n\n\"content.system.message_read_receipt_on\" = \"%@ turned read receipts on for everyone\";\n\"content.system.message_read_receipt_on-you\" = \"%@ turned read receipts on for everyone\";\n\n\"content.system.message_read_receipt_off\" = \"%@ turned read receipts off for everyone\";\n\"content.system.message_read_receipt_off-you\" = \"%@ turned read receipts off for everyone\";\n\n\"content.system.message_read_receipt_on_add_to_group\" = \"Read receipts are on\";\n\n// legal hold\n\n\"content.system.message_legal_hold.enabled\" = \"This conversation is under legal hold\";\n\"content.system.message_legal_hold.disabled\" = \"Legal hold deactivated for this conversation\";\n\n\"content.system.message_legal_hold.learn_more\" = \"Learn more\";\n\n//\n\n\"content.system.reactivated_device\" = \"You started using [this device](%@) again. Messages sent in the meantime will not appear here.\";\n\n\"content.system.is_verified\" = \"All fingerprints are verified\";\n\n\"content.system.new_users\" = \"New user joined.\";\n\"content.system.verify_devices\" = \"Verify devices\";\n\n\"content.system.unverified_self_devices\" = \"**You** unverified one of [your devices](%@)\";\n\"content.system.unverified_other_devices\" = \"**You** unverified one of [%1$@\u2019s devices](%2$@)\";\n\n\"content.system.missing_messages.title\" = \"You haven\u2019t used this device for a while. Some messages may not appear here.\";\n\"content.system.missing_messages.subtitle_start\" = \"Meanwhile,\";\n\n\"content.system.cannot_decrypt.self\" = \"A message from **you** could not be decrypted.\";\n\"content.system.cannot_decrypt.other\" = \"A message from **%@** could not be decrypted.\";\n\"content.system.cannot_decrypt.reset_session\" = \"Fix future messages\";\n\"content.system.cannot_decrypt.error_details\" = \"(Fixed error: %d ID: %@)\";\n\n\"content.system.cannot_decrypt_resolved.self\" = \"You can now decrypt messages from yourself. To recover lost messages, **you need to resend them.**\";\n\"content.system.cannot_decrypt_resolved.other\" = \"You can now decrypt messages from **%1$@**. To recover lost messages, **ask %1$@ to resend them.**\";\n\n\"content.system.cannot_decrypt_identity_changed.self\" = \"**Your** device identity changed. Undelivered message.\";\n\"content.system.cannot_decrypt_identity_changed.other\" = \"**%@\u2019s** device identity changed. Undelivered message.\"; // possessive apostrophe - might differ in different languages\n\n\"content.system.session_reset.other\" = \"**%@ was unable to decrypt some of your messages but has solved the issue**. This affected all conversations you share together.\";\n\"content.system.session_reset.self\" = \"**You were unable to decrypt some of your messages but you solved the issue**. This affected all conversations.\";\n\n\"content.system.unknown_message.body\" = \"This message can\u2019t be displayed. You may be using an older version of Wire.\";\n\n\"content.file.uploading\" = \"Uploading\u2026\";\n\"content.file.downloading\" = \"Downloading\u2026\";\n\"content.file.upload_failed\" = \"Upload failed\";\n\"content.file.upload_cancelled\" = \"Upload cancelled\";\n\"content.file.upload_video\" = \"Videos\";\n\"content.file.take_video\" = \"Record a video\";\n\"content.file.browse\" = \"Browse\";\n\n\"content.file.save_video\" = \"Save\";\n\"content.file.save_audio\" = \"Save\";\n\"content.image.save_image\" = \"Save\";\n\n\"content.message.delete\" = \"Delete\";\n\"content.message.save\" = \"Save\";\n\"content.message.resend\" = \"Resend\";\n\n\"content.message.delete_ellipsis\" = \"Delete\u2026\";\n\n\"content.message.like\" = \"Like\";\n\"content.message.unlike\" = \"Unlike\";\n\"content.message.forward\" = \"Share\";\n\"content.message.go_to_conversation\" = \"Reveal\";\n\"content.message.forward.to\" = \"Search\u2026\";\n\"content.message.open\" = \"Open\";\n\"content.message.sign\" = \"Sign\";\n\"content.message.copy\" = \"Copy\";\n\"content.message.download\" = \"Download\";\n\"content.message.details\" = \"Details\";\n\n// Reply\n\"content.message.reply\" = \"Reply\";\n\"content.message.original_label\" = \"Original message\";\n\"content.message.reply.original_timestamp.date\" = \"Original message from %@\";\n\"content.message.reply.original_timestamp.time\" = \"Original message from %@\";\n\"content.message.reply.broken_message\" = \"You cannot see this message.\";\n\"content.message.reply.edited_message\" = \"Edited\";\n\n\"content.message.open_link_alert.title\" = \"Visit Link\";\n\"content.message.open_link_alert.message\" = \"This will take you to\\n%@\";\n\"content.message.open_link_alert.open\" = \"Open\";\n\n\"content.message.audio_message.accessibility\" = \"Play the audio message\";\n\n\"content.reactions_list.likers\" = \"Liked by\";\n\n\"content.file.too_big\" = \"You can send files up to %@\";\n// Someone pinged\n\"content.ping.text\" = \"%@ pinged\";\n\"content.ping.text-you\" = \"%@ pinged\";\n\n// Current user pinged\n\"content.ping.text.you\" = \"You\";\n\n// Inline Player\n\"content.player.unable_to_play\" = \"UNABLE TO PLAY TRACK\";\n\n// Connecting (NEW IMPLEMENTATION, REVIEW LATER)\n\"connection_request.title\" = \"Connect to %@\"; //check UPPERCASE implementation in code\n\n// Default connect message to be shown\n\"missive.connection_request.default_message\" = \"Hi %@,\\nLet\u2019s connect on Wire.\\n%@\";\n\n\"connection_request_pending_title\" = \"Connection Request\";\n\"connection_request.send_button_title\" = \"Connect\";\n\"inbox.connection_request.connect_button_title\" = \"Connect\";\n\"inbox.connection_request.ignore_button_title\" = \"Ignore\";\n\n// Save image errors\n\"library.alert.permission_warning.title\" = \"Wire needs access to your Photos\";\n\"library.alert.permission_warning.restrictions.explaination\" = \"Wire cannot access your library because restrictions are enabled.\";\n\"library.alert.permission_warning.not_allowed.explaination\" = \"Go to Settings and allow Wire to access your photos.\";\n\n// Voice\n\"voice.status.one_to_one.incoming\" = \"%@\\ncalling\";\n\"voice.status.group_call.incoming\" = \"%@\\nringing\";\n\"voice.status.one_to_one.outgoing\" = \"%@\\nringing\";\n\"voice.status.joining\" = \"%@\\nConnecting\";\n\"voice.status.leaving\" = \"%@\\nCall ended\";\n\"voice.status.video_not_available\" = \"Video turned off\";\n\"voice.status.low_connection\" = \"Bad connection\";\n\"voice.network_error.title\" = \"No Internet Connection\";\n\"voice.status.cbr\" = \"Constant Bit Rate\";\n\"voice.network_error.body\" = \"You must be online to call. Check your connection and try again.\";\n\"voice.degradation.new_self_device\" = \"You started using a new device.\";\n\"voice.degradation.new_user_device\" = \"%@ started using a new device.\";\n\"voice.degradation_outgoing.prompt\" = \"Do you still want to place the call?\";\n\"voice.degradation_incoming.prompt\" = \"Do you still want to accept the call?\";\n\"voice.accept_button.title\" = \"Accept\";\n\"voice.decline_button.title\" = \"Decline\";\n\"voice.hang_up_button.title\" = \"Hang Up\";\n\"voice.mute_button.title\" = \"Mute\";\n\"voice.video_button.title\" = \"Video\";\n\"voice.flip_video_button.title\" = \"Flip\";\n\"voice.speaker_button.title\" = \"Speaker\";\n\"voice.cancel_button.title\" = \"Cancel\";\n\"voice.call_button.title\" = \"Call\";\n\"voice.end_call_button.title\" = \"End Call\";\n\"voice.call_error.unsupported_version.title\" = \"Please update Wire\";\n\"voice.call_error.unsupported_version.message\" = \"You received a call that isn't supported by this version of Wire.\\nGet the latest version in the App Store.\";\n\"voice.call_error.unsupported_version.dismiss\" = \"Later\";\n\n\"voice.alert.call_in_progress.title\" = \"Call in progress\";\n\"voice.alert.call_in_progress.message\" = \"You can have only one active call at a time\";\n\"voice.alert.call_in_progress.confirm\" = \"OK\";\n\n\"voice.alert.microphone_warning.title\" = \"Wire needs access to the microphone\";\n\n\"voice.alert.camera_warning.title\" = \"Wire needs access to the camera\";\n\n\"voice.top_overlay.tap_to_return\" = \"Tap to return to call\";\n\"voice.top_overlay.accessibility_title\" = \"Ongoing call\";\n\n// Voice New\n\n\"call.status.connecting\" = \"Connecting\u2026\";\n\"call.status.incoming.user\" = \"%@ is calling\u2026\";\n\"call.status.incoming\" = \"Calling\u2026\";\n\"call.status.outgoing\" = \"Ringing\u2026\";\n\"call.status.outgoing.user\" = \"Calling %@\u2026\";\n\"call.status.reconnecting\" = \"Reconnecting\u2026\";\n\"call.status.terminating\" = \"Hanging up\u2026\";\n\"call.status.constant_bitrate\" = \"Constant Bit Rate\";\n\"call.status.variable_bitrate\" = \"Variable Bit Rate\";\n\n\"call.participants.show_all\" = \"Show All (%@)\";\n\"call.participants.list.title\" = \"Participants\";\n\n\"call.overlay.switch_to.speakers\" = \"SPEAKERS\";\n\"call.overlay.switch_to.all\" = \"ALL\";\n\n\"call.grid.no_active_speakers\" = \"No active video speakers...\";\n\n\"call.grid.hints.fullscreen\" = \"Double Tap on a tile for fullscreen\";\n\"call.grid.hints.go_back_or_zoom\" = \"Double Tap to go back, pinch to zoom\";\n\"call.grid.hints.zoom\" = \"Pinch to zoom\";\n\n\"call.video.paused\" = \"Video paused\";\n\"call.video.too_many.alert.title\" = \"Too many people for Video\";\n\"call.video.too_many.alert.message\" = \"Video calls only work in groups of 4 or less.\";\n\n\"call.degraded.alert.title\" = \"New Device\";\n\"call.degraded.alert.message.self\" = \"You started using a new device.\";\n\"call.degraded.alert.message.user\" = \"%@ started using a new device.\";\n\"call.degraded.alert.message.unknown\" = \"Someone started using a new device.\";\n\"call.degraded.alert.action.continue\" = \"Call anyway\";\n\n\"call.degraded.ended.alert.title\" = \"Call ended\";\n\"call.degraded.ended.alert.message.self\" = \"The call was disconnected because you started using a new device.\";\n\"call.degraded.ended.alert.message.user\" = \"The call was disconnected because %@ is no longer a verified contact.\";\n\"call.degraded.ended.alert.message.unknown\" = \"The call was disconnected because someone is no longer a verified contact.\";\n\n\"call.alert.ongoing.alert_title\" = \"This will end your other call.\";\n\n\"call.alert.ongoing.start.message\" = \"A call is active in another conversation.\\nCalling here will hang up the other call.\";\n\"call.alert.ongoing.join.message\" = \"A call is active in another conversation.\\nJoining this call will hang up the other one.\";\n\"call.alert.ongoing.start.button\" = \"Call anyway\";\n\"call.alert.ongoing.join.button\" = \"Join anyway\";\n\n\"call.quality.indicator.message\" = \"Your calling relay is not reachable. This may affect your call experience.\";\n\"call.quality.indicator.more_info.button.text\" = \"More info\";\n\n// Call Actions (accessibility)\n\n\"call.announcement.incoming\" = \"Incoming call from %@\";\n\"call.actions.label.toggle_mute_on\" = \"Mute\";\n\"call.actions.label.toggle_mute_off\" = \"Unmute\";\n\"call.actions.label.flip_camera\" = \"Flip camera\";\n\"call.actions.label.toggle_speaker_on\" = \"Enable speaker\";\n\"call.actions.label.toggle_speaker_off\" = \"Disable speaker\";\n\"call.actions.label.accept_call\" = \"Accept call\";\n\"call.actions.label.reject_call\" = \"Decline call\";\n\"call.actions.label.terminate_call\" = \"End call\";\n\"call.actions.label.toggle_video_on\" = \"Turn on camera\";\n\"call.actions.label.toggle_video_off\" = \"Turn off camera\";\n\"call.actions.label.switch_to_back_camera\" = \"Switch to back camera\";\n\"call.actions.label.switch_to_front_camera\" = \"Switch to front camera\";\n\"call.actions.label.minimize_call\" = \"Minimize call\";\n\"call.actions.label.make_audio_call\" = \"Start audio call\";\n\"call.actions.label.make_video_call\" = \"Start video call\";\n\"call.actions.label.join_call\" = \"Join call\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Profile and Participants\n\n\"participants.add_people_button_title\" = \"Add\";\n\"participants.avatar.guest.title\" = \"Guest\";\n\n\"participants.title\" = \"Details\";\n\"participants.all.title\" = \"People\";\n\"participants.section.participants\" = \"People (%d)\";\n\"participants.section.services\" = \"Services (%d)\";\n\"participants.section.settings\" = \"Options\";\n\"participants.footer.add_title\" = \"Add Participants\";\n\"participants.section.name.footer\" = \"Up to %1$d participants can join a group conversation.\";\n\"participants.section.admins.footer\" = \"There are no admins.\";\n\"participants.section.members.footer\" = \"There are no members.\";\n\n\"profile.profile.group_admin_options.title\" = \"Group admin\";\n\n// Meta Menu\n\"meta.menu.accessibility_more_options_button\" = \"More actions\";\n\"meta.menu.rename\" = \"Rename\";\n\"meta.menu.leave\" = \"Leave Group\u2026\";\n\"meta.menu.archive\" = \"Archive\";\n\"meta.menu.unarchive\" = \"Unarchive\";\n\"meta.menu.delete\" = \"Delete Group\u2026\";\n\"meta.menu.clear_content\" = \"Clear Content\u2026\";\n\"meta.menu.move_to_folder\" = \"Move to\u2026\";\n\"meta.menu.remove_from_folder\" = \"Remove from \\\"%@\\\"\";\n\"meta.menu.silence.mute\" = \"Mute\";\n\"meta.menu.silence.unmute\" = \"Unmute\";\n\"meta.menu.cancel\" = \"Cancel\";\n\"meta.menu.cancel_connection_request\" = \"Cancel Request\";\n\"meta.menu.mark_unread\" = \"Mark as Unread\";\n\"meta.menu.mark_read\" = \"Mark as Read\";\n\"shortcut.mark_all_as_read.title\" = \"Mark All as Read\";\n\"meta.menu.configure_notifications\" = \"Notifications\u2026\";\n\"meta.menu.open_self_profile\" = \"Open Profile\";\n\n// Delete conversation\n\"meta.menu.delete_content.dialog_title\" = \"Clear content?\";\n\"meta.menu.delete_content.dialog_message\" = \"This will clear the conversation history on all your devices.\";\n\"meta.menu.delete_content.leave_as_well_message\" = \"Also leave the conversation\";\n\"meta.menu.delete_content.button_cancel\" = \"Cancel\";\n\"meta.menu.delete_content.button_delete\" = \"Clear\";\n\"meta.menu.delete_content.button_delete_and_leave\" = \"Clear and leave\";\n\n// Configure conversation notifications\n\"meta.menu.configure_notification.dialog_message\" = \"Notify me about:\";\n\"meta.menu.configure_notification.button_everything\" = \"Everything\";\n\"meta.menu.configure_notification.button_mentions_and_replies\" = \"Mentions and Replies\";\n\"meta.menu.configure_notification.button_nothing\" = \"Nothing\";\n\"meta.menu.configure_notification.button_cancel\" = \"Cancel\";\n\n// Leave conversation\n\"meta.leave_conversation_dialog_title\" = \"Leave conversation?\";\n\"meta.leave_conversation_dialog_message\" = \"The participants will be notified and the conversation will be removed from your list.\";\n\"meta.leave_conversation.delete_content_as_well_message\" = \"Also clear the content\";\n\"meta.leave_conversation_button_cancel\" = \"Cancel\";\n\"meta.leave_conversation_button_leave\" = \"Leave\";\n\"meta.leave_conversation_button_leave_and_delete\" = \"Leave and clear content\";\n\n// Conversation Degraded (security level lowered)\n\"meta.degraded.degradation_reason_message.singular\" = \"%@ started using a new device.\";\n\"meta.degraded.degradation_reason_message.plural\" = \"%@ started using new devices.\";\n\"meta.degraded.degradation_reason_message.someone\" = \"Someone started using a new device.\";\n\"meta.degraded.dialog_message\" = \"Do you still want to send your message?\";\n\"meta.degraded.verify_devices_button\" = \"Verify Devices\u2026\";\n\"meta.degraded.send_anyway_button\" = \"Send Anyway\";\n\"meta.degraded.cancel_sending_button\" = \"Cancel\";\n\"meta.legalhold.info_button\" = \"What Is Legal Hold?\";\n\"meta.legalhold.send_alert_title\" = \"The conversation is now subject to legal hold.\";\n\n// Remove from conversation dialogue\n\"profile.remove_dialog_title\" = \"Remove?\";\n\"profile.remove_dialog_message\" = \"%@ won\u2019t be able to send or receive messages in this conversation.\";\n\"profile.remove_dialog_button_cancel\" = \"Cancel\";\n\"profile.remove_dialog_button_remove\" = \"Remove From Group\u2026\";\n\"profile.remove_dialog_button_remove_confirm\" = \"Remove From Group\";\n\n// Block dialog\n\"profile.block_dialog.title\" = \"Block?\";\n\"profile.block_dialog.message\" = \"%@ won\u2019t be able to contact you or add you to group conversations.\";\n\"profile.block_dialog.button_cancel\" = \"Cancel\";\n\"profile.block_dialog.button_block\" = \"Block\";\n\n// Delete message dialog\n\"message.delete_dialog.message\" = \"This cannot be undone.\";\n\"message.delete_dialog.action.cancel\" = \"Cancel\";\n\"message.delete_dialog.action.hide\" = \"Delete for Me\";\n\"message.delete_dialog.action.delete\" = \"Delete for Everyone\";\n\n// Edit message\n\"message.menu.edit.title\" = \"Edit\";\n\n// Accept connection request\n\"profile.connection_request_dialog.title\" = \"Accept?\";\n\"profile.connection_request_dialog.message\" = \"This will connect you and open the conversation with %@.\";\n\"profile.connection_request_dialog.button_cancel\" = \"Ignore\";\n\"profile.connection_request_dialog.button_connect\" = \"Connect\";\n\n// Delete group\n\"conversation.delete_request_dialog.title\" = \"Delete group conversation?\";\n\"conversation.delete_request_dialog.message\" = \"This will delete the group and all content for all participants on all devices. There is no option to restore the content. All participants will be notified.\";\n\"conversation.delete_request_error_dialog.title\" = \"An error occurred while trying to delete the group %@. Please try again.\";\n\"conversation.delete_request_error_dialog.button_delete_group\" = \"Delete Group\";\n\n// Cancel connection request\n\"profile.cancel_connection_request_dialog.title\" = \"Cancel Request?\";\n\"profile.cancel_connection_request_dialog.message\" = \"Cancel your connection request to %@?\";\n\"profile.cancel_connection_request_dialog.button_no\" = \"No\";\n\"profile.cancel_connection_request_dialog.button_yes\" = \"Yes\";\n\n// Unblock button\n\"profile.block_button_title\" = \"Block\u2026\";\n\"profile.unblock_button_title\" = \"Unblock\u2026\";\n\n// Favorite button\n\"profile.favorite_button_title\" = \"Add to Favorites\";\n\"profile.unfavorite_button_title\" = \"Remove from Favorites\";\n\n\"profile.block_button_title_action\" = \"Block\";\n\"profile.unblock_button_title_action\" = \"Unblock\";\n\n\"profile.cancel_connection_button_title\" = \"CANCEL REQUEST\";\n\"profile.connection_request_state.blocked\" = \"BLOCKED\";\n\"profile.create_conversation_button_title\" = \"Create group\";\n\"profile.open_conversation_button_title\" = \"Open conversation\";\n\n\"profile.read_receipts_enabled_memo.header\" = \"YOU HAVE ENABLED READ RECEIPTS\";\n\"profile.read_receipts_disabled_memo.header\" = \"YOU HAVE DISABLED READ RECEIPTS\";\n\"profile.read_receipts_memo.body\" = \"If both sides turn on read receipts, you can see when messages are read.\\n\\nYou can change this option in your account settings.\";\n\n\"profile.group_admin_status_memo.body\" = \"When this is on, the admin can add or remove people and services, update group settings, and change a participant's role.\";\n\n\"profile.extended_metadata.header\" = \"Information\";\n\n// User Details\n\"profile.details.title\" = \"Details\";\n\"profile.details.guest\" = \"Guest\";\n\"profile.details.group_admin\" = \"Group admin\";\n\"profile.details.partner\" = \"external\";\n\n\"profile_view.accessibility.handle\" = \"Username\";\n\"profile_view.accessibility.name\" = \"Display name\";\n\"profile_view.accessibility.team_name\" = \"Team name\";\n\n// Device list\n\"profile.devices.title\" = \"Devices\";\n\"profile.devices.fingerprint_message_unencrypted\" = \"%@ is using an old version of Wire. No devices are shown here.\";\n\"profile.devices.fingerprint_message.title\" = \"Wire gives every device a unique fingerprint. Compare them with %@ and verify your conversation.\";\n\"profile.devices.fingerprint_message.link\" = \"Why verify conversations?\";\n\n// Device detail\n\"profile.devices.detail.verify_message\" = \"Verify that this matches the fingerprint shown on %@\u2019s device.\";\n\"profile.devices.detail.verify_message.link\" = \"How do I do that?\";\n\"profile.devices.detail.show_my_device.title\" = \"Show my device fingerprint\";\n\"profile.devices.detail.reset_session.title\" = \"Reset Session\";\n\"device.verified\" = \"Verified\";\n\"device.not_verified\" = \"Not Verified\";\n\n\"device.class.legalhold\" = \"Legal Hold\";\n\"device.class.desktop\" = \"Desktop\";\n\"device.class.tablet\" = \"Tablet\";\n\"device.class.phone\" = \"Phone\";\n\"device.class.unknown\" = \"Unknown\";\n\n\"device.type.permanent\" = \"Permanent\";\n\"device.type.temporary\" = \"Temporary\";\n\"device.type.legalhold\" = \"Legal Hold\";\n\"device.type.unknown\" = \"Unknown\";\n\n// Bot\n\"participants.services.remove_integration.button\" = \"remove integration\";\n\n// Group details\n\"group_details.guest_options_cell.title\" = \"Guests and services\";\n\"group_details.guest_options_cell.enabled\" = \"On\";\n\"group_details.guest_options_cell.disabled\" = \"Off\";\n\"group_details.timeout_options_cell.title\" = \"Timed messages\";\n\"group_details.notification_options_cell.title\" = \"Notifications\";\n\"group_details.notification_options_cell.description\" = \"You can be notified about everything (including audio and video calls) or only when someone mentions you or replies to one of your messages.\";\n\"group_details.receipt_options_cell.title\" = \"Read receipts\";\n\"group_details.receipt_options_cell.description\" = \"When this is on, people can see when their messages in this conversation are read.\";\n\n\"group_details.conversation_admins_header.title\" = \"Group admins\";\n\"group_details.conversation_members_header.title\" = \"Group members\";\n\n\n// Legal hold details\n\n\"legalhold.participants.section.title\" = \"Legal hold subjects\";\n\"legalhold.header.title\" = \"Legal Hold\";\n\"legalhold.header.other_description\" = \"Legal Hold has been activated for at least one person in this conversation.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\";\n\"legalhold.header.self_description\" = \"Legal Hold has been activated for your account.\\nAll messages will be preserved for future access, including deleted, edited, and timed messages.\\nYour conversation partners will be aware of the recording.\";\n\"legalhold.accessibility\" = \"Legal hold details\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Self profile\n\n// Options menu contents\n\"self.settings\" = \"Settings\";\n\"self.profile\" = \"Profile\";\n\"self.account\" = \"Account\";\n\"self.help_center\" = \"Support\";\n\"self.help_center.support_website\" = \"Wire Support Website\";\n\"self.help_center.contact_support\" = \"Contact Support\";\n\"self.about\" = \"About\";\n\"self.sign_out\" = \"Log Out\";\n\"self.report_abuse\" = \"Report Misuse\";\n\"self.voiceover.label\" = \"Profile\";\n\"self.voiceover.hint\" = \"Open profile and settings\";\n\"self.new-device.voiceover.label\" = \"Profile, new devices added\";\n\n\"self.add_phone_number\" = \"Add phone number\";\n\"self.add_email_password\" = \"Add email address and password\";\n\n\"self.accessibility.profile_photo_image\" = \"Profile picture\";\n\"self.accessibility.profile_photo_edit_button\" = \"Change profile picture\";\n\n// About screen\n\"about.tos.title\"=\"Terms of Use\";\n\"about.privacy.title\"=\"Privacy Policy\";\n\"about.license.title\" = \"License Information\";\n\"about.website.title\"=\"Wire Website\";\n\"about.copyright.title\"=\"\u00a9 Wire Swiss GmbH\";\n\n// Licenses screen\n\"about.license.project_header\" = \"Details\";\n\"about.license.open_project_button\" = \"View Project Page\";\n\"about.license.license_header\" = \"Acknowledgements\";\n\n// Self new devices\n\"self.new_device_alert.title\" = \"Your account was used on:\";\n\"self.new_device_alert.message\" = \"\\n%@\\n\\nIf you don\u2019t recognize the device above, remove it and reset your password.\";\n\"self.new_device_alert.message_plural\" = \"\\n%@\\n\\nIf you don\u2019t recognize the devices above, remove them and reset your password.\";\n\"self.new_device_alert.manage_devices\" = \"Manage devices\";\n\"self.new_device_alert.trust_devices\" = \"OK\";\n\n// Settings changed alert\n\n\"self.read_receipts_enabled.title\" = \"You have enabled read receipts\";\n\"self.read_receipts_disabled.title\" = \"You have disabled read receipts\";\n\"self.read_receipts_description.title\" = \"You can change this option in your account settings.\";\n\n// Settings - top level\n\"self.settings.create_team.title\" = \"Create a team\";\n\"self.settings.manage_team.title\" = \"Manage Team\";\n\"self.settings.add_team_or_account.title\" = \"Add Account\";\n\"self.settings.add_account.title\" = \"Add an account\";\n\n\"self.settings.add_account.error.title\" = \"Three accounts active\";\n\"self.settings.add_account.error.message\" = \"You can only be logged in with three accounts at once. Log out from one to add another.\";\n\n\"self.settings.switch_account.message\" = \"A call is active in this account.\\nSwitching accounts will hang up the current call.\";\n\"self.settings.switch_account.action\" = \"Switch anyway\";\n\n// Settings - Account details\n\"self.settings.account_section\" = \"Account\";\n\n\"self.settings.account_details_group.info.title\" = \"Info\";\n\"self.settings.account_details_group.personal.title\" = \"Personal\";\n\n\"self.settings.account_section.name.title\" = \"Name\";\n\"self.settings.account_section.email.title\" = \"Email\";\n\"self.settings.account_section.phone.title\" = \"Phone\";\n\"self.settings.account_section.handle.title\" = \"Username\";\n\"self.settings.account_section.add_handle.title\" = \"Add username\";\n\n\"self.settings.account_details_group.info.footer\" = \"People can find you with these details.\";\n\"self.settings.account_details_group.personal.footer\" = \"This information is not visible .\";\n\n\"self.settings.account_details.remove_device.title\" = \"Remove Device\";\n\"self.settings.account_details.key_fingerprint.title\" = \"Key Fingerprint\";\n\"self.settings.account_details.remove_device.message\" = \"Your password is required to remove the device\";\n\"self.settings.account_details.remove_device.password\" = \"Password\";\n\"self.settings.account_details.remove_device.password.error\" = \"Wrong password\";\n\n\"self.settings.account_appearance_group.title\" = \"Appearance\";\n\n\"self.settings.privacy_section_group.title\" = \"Privacy\";\n\"self.settings.enable_read_receipts.title\" = \"Send Read Receipts\";\n\"self.settings.privacy_section_group.subtitle\" = \"When this is off, you won\u2019t be able to see read receipts from other people.\\n\\nThis setting does not apply to group conversations.\";\n\n\"self.settings.encrypt_messages_at_rest.title\" = \"Encrypt messages at rest\";\n\n\"self.settings.account_picture_group.picture\" = \"Picture\";\n\"self.settings.account_picture_group.color\" = \"Color\";\n\n\"self.settings.account_personal_information_group.title\" = \"Personal Information\";\n\n\"self.settings.account_picture_group.theme\" = \"Theme\";\n\n\"self.settings.device_details.fingerprint.subtitle\" = \"Wire gives every device a unique fingerprint. Compare them and verify your devices and conversations.\";\n\"self.settings.device_details.reset_session.subtitle\" = \"If fingerprints don\u2019t match, reset the session to generate new encryption keys on both sides.\";\n\"self.settings.device_details.remove_device.subtitle\" = \"Remove this device if you have stopped using it. You will be logged out of this device immediately.\";\n\"self.settings.device_details.reset_session.success\" = \"The session has been reset\";\n\n\"self.settings.account_details.actions.title\" = \"Actions\";\n\n\"self.settings.account_details.delete_account.title\" = \"Delete Account\";\n\n\"self.settings.account_details.delete_account.alert.title\" = \"Delete Account\";\n\"self.settings.account_details.delete_account.alert.message\" = \"We will send you a message via email or SMS. Follow the link to permanently delete your account.\";\n\n\"self.settings.account_details.log_out.alert.title\" = \"Log out\";\n\"self.settings.account_details.log_out.alert.message\" = \"Your message history will be erased on this device.\";\n\"self.settings.account_details.log_out.alert.password\" = \"Password\";\n\n// Settings - Personal information\n\"self.settings.privacy_analytics_section.title\" = \"Usage and Crash Reports\";\n\n// Crash\n\"self.settings.privacy_crash.title\" = \"Send anonymous crash data\";\n\"self.settings.privacy_crash_menu.description.title\" = \"Send anonymous crash reports and basic data like version number and operating system to help Wire identify and solve issues in the app.\";\n\n// Analytics\n\"self.settings.privacy_analytics.title\" = \"Send anonymous usage data\";\n\"self.settings.privacy_analytics_menu.description.title\" = \"Usage data allows Wire to understand how the app is being used and how it can be improved. The data is anonymous and does not include the content of your communications (such as messages, files or calls).\";\n\n\"self.settings.receiveNews_and_offers.title\" = \"Receive Newsletter\";\n\"self.settings.receiveNews_and_offers.description.title\" = \"Receive news and product updates from Wire via email.\";\n\n\n\n// Change Username\n\n\"self.settings.account_section.handle.change.title\" = \"Username\";\n\"self.settings.account_section.handle.change.save\" = \"Save\";\n\"self.settings.account_section.handle.change.footer\" = \"At least 2 characters. a\u2014z, 0\u20149, and  '.', '-', '_'  only.\";\n\"self.settings.account_section.handle.change.footer.unavailable\" = \"Already taken\";\n\n\"self.settings.account_section.handle.change.failure_alert.title\" = \"Unable to set username\";\n\"self.settings.account_section.handle.change.failure_alert.message\" = \"There was an error setting your username. Please try again.\";\n\n// Change Email\n\n\"self.settings.account_section.email.change.title\" = \"Email\";\n\"self.settings.account_section.email.change.save\" = \"Save\";\n\n\"self.settings.account_section.email.change.verify.title\" = \"Verify email\";\n\"self.settings.account_section.email.change.verify.description\" = \"Check your email inbox and follow the instructions.\";\n\"self.settings.account_section.email.change.verify.resend\" = \"Resend to %@\";\n\n\"self.settings.account_section.email.change.resend.title\" = \"Email resent\";\n\"self.settings.account_section.email.change.resend.message\" = \"Confirmation email was resent to %@. Check your email inbox and follow the instructions.\";\n\n// Change Phone Number\n\n\"self.settings.account_section.phone_number.change.title\" = \"Phone\";\n\"self.settings.account_section.phone_number.change.save\" = \"Save\";\n\"self.settings.account_section.phone_number.change.remove\" = \"Remove Phone Number\";\n\n\"self.settings.account_section.phone_number.change.remove.action\" = \"Remove Phone Number\";\n\n\"self.settings.account_section.phone_number.change.verify.save\" = \"Save\";\n\"self.settings.account_section.phone_number.change.verify.title\" = \"Verify\";\n\"self.settings.account_section.phone_number.change.verify.description\" = \"Enter the verification code we sent to: %@.\";\n\n\"self.settings.account_section.phone_number.change.verify.code_placeholder\" = \"Enter code\";\n\"self.settings.account_section.phone_number.change.verify.resend\" = \"Resend Code\";\n\"self.settings.account_section.phone_number.change.verify.resend_description\" = \"No code showing up?\\nYou can request a new one every 30 seconds.\";\n\n\"self.settings.account_section.phone_number.change.resend.title\" = \"Code resent\";\n\"self.settings.account_section.phone_number.change.resend.message\" = \"Verification code was resent to %@.\";\n\n// Chat alerts\n\"self.settings.notifications.push_notification.title\" = \"Notifications\";\n\"self.settings.notifications.push_notification.toogle\" = \"Message Previews\";\n\"self.settings.notifications.push_notification.footer\" = \"Sender name and message on the lock screen and in Notification Center.\";\n\n\"self.settings.notifications.chat_alerts.toggle\" = \"Message Banners\";\n\"self.settings.notifications.chat_alerts.footer\" = \"New messages in other conversations.\";\n\n\"self.settings.sound_menu.sounds.title\" = \"Sounds\";\n\"self.settings.sound_menu.ringtone.title\" = \"Ringtone\";\n\"self.settings.sound_menu.message.title\" = \"Text Tone\";\n\"self.settings.sound_menu.ping.title\" = \"Ping\";\n\"self.settings.sound_menu.ringtones.title\" = \"Ringtones\";\n\"self.settings.sound_menu.sounds.wire_sound\" = \"Wire\";\n\"self.settings.sound_menu.sounds.none\" = \"None\";\n\n\"self.settings.callkit.title\" = \"Calls\";\n\"self.settings.callkit.caption\" = \"Share with iOS\";\n\"self.settings.callkit.description\" = \"Show Wire calls on the lock screen and in iOS call history. If iCloud is enabled, call history is shared with Apple.\";\n\n\"self.settings.vbr.title\" = \"Variable Bit Rate Encoding\";\n\"self.settings.vbr.description\" = \"This makes audio calls use less data and work better on slower networks. Turn off to use Constant Bitrate Encoding.\";\n\n\"self.settings.sound_menu.sounds.wire_call\" = \"Wire Call\";\n\"self.settings.sound_menu.sounds.wire_message\" = \"Wire Message\";\n\"self.settings.sound_menu.sounds.wire_ping\" = \"Wire Ping\";\n\n// By popular demand\n\"self.settings.popular_demand.title\" = \"By popular demand\";\n\"self.settings.popular_demand.send_button.title\" = \"Send Button\";\n\"self.settings.popular_demand.send_button.footer\" = \"Disable to send via the return key.\";\n\"self.settings.popular_demand.dark_mode.footer\" = \"Switch between dark and light theme.\";\n\n// dark theme\n\"dark_theme.option.dark\" = \"Dark\";\n\"dark_theme.option.light\" = \"Light\";\n\"dark_theme.option.system\" = \"Sync with system settings\";\n\n// Open in\n\"self.settings.external_apps.header\" = \"Open With\";\n\n\"self.settings.link_options.twitter.title\" = \"Tweets\";\n\"self.settings.link_options.maps.title\" = \"Locations\";\n\"self.settings.link_options.browser.title\" = \"Browser\";\n\n\"open_link.twitter.option.default\" = \"Browser / Twitter\";\n\"open_link.twitter.option.tweetbot\" = \"Tweetbot\";\n\"open_link.twitter.option.twitterrific\" = \"Twitterrific\";\n\n\"open_link.maps.option.apple\" = \"Maps\";\n\"open_link.maps.option.google\" = \"Google Maps\";\n\"open_link.maps.footer\" = \"Some location links will always open in Apple Maps.\";\n\n\"open_link.browser.option.safari\" = \"Safari\";\n\"open_link.browser.option.chrome\" = \"Chrome\";\n\"open_link.browser.option.firefox\" = \"Firefox\";\n\"open_link.browser.option.snowhaze\" = \"SnowHaze\";\n\"open_link.browser.option.brave\" = \"Brave\";\n\n// Sound alerts (TO BE UPDPATED)\n\"self.settings.sound_menu.title\" = \"Sound Alerts\";\n\"self.settings.sound_menu.no_sounds.title\" = \"None\";\n\"self.settings.sound_menu.all_sounds.title\" = \"All\";\n\"self.settings.sound_menu.mute_while_talking.title\" = \"First message and pings\";\n\n// Developer options\n\"self.settings.developer_options.title\" = \"Developer Options\";\n\"self.settings.apns_logging.title\" = \"APNS Logging\";\n\n// Privacy (visibility) options\n\"self.settings.options_menu.title\" = \"Options\";\n\n\"self.settings.privacy_contacts_section.title\" = \"Contacts\";\n\"self.settings.privacy_contacts_menu.settings_button.title\" = \"Open Contacts Settings\";\n\"self.settings.privacy_contacts_menu.description_disabled.title\" = \"This helps you connect with others. We anonymize all the information and do not share it with anyone else. Allow access via Settings > Privacy > Contacts.\";\n\n\"self.settings.privacy_security.lock_app\" = \"Lock With Passcode\";\n\"self.settings.privacy_security.lock_app.subtitle.lock_description\" = \"Lock Wire after %@ in the background.\";\n\"self.settings.privacy_security.lock_app.subtitle.touch_id\" = \"Unlock with Touch ID or enter your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.face_id\" = \"Unlock with Face ID or enter your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.none\" = \"Unlock by entering your passcode.\";\n\"self.settings.privacy_security.lock_app.subtitle.custom_app_lock_reminder\" = \"If forgotten, your passcode can not be recovered.\";\n\n\"self.settings.privacy_security.lock_app.description\" = \"Unlock Wire\";\n\"self.settings.privacy_security.lock_password.description.unlock\" = \"Unlock with your password.\";\n\"self.settings.privacy_security.lock_password.description.wrong_password\" = \"Wrong password. Please try again.\";\n\"self.settings.privacy_security.lock_password.description.wrong_offline_password\" = \"Wrong password. If you recently changed your password, connect to the internet and try again.\";\n\n\"self.settings.privacy_security.disable_link_previews.title\" = \"Create Link Previews\";\n\"self.settings.privacy_security.disable_link_previews.footer\" = \"Previews may still be shown for links from other people.\";\n\n\"self.settings.privacy_analytics_menu.devices.title\" = \"Devices\";\n\n\"self.settings.privacy.clear_history.title\" = \"Clear History\";\n\"self.settings.privacy.clear_history.subtitle\" = \"This will permanently erase the content of all your conversations.\";\n\n\"self.settings.advanced.title\" = \"Advanced\";\n\"self.settings.advanced.troubleshooting.title\" = \"Troubleshooting\";\n\"self.settings.advanced.troubleshooting.submit_debug.title\" = \"Debug Report\";\n\"self.settings.advanced.debugging_tools.title\" = \"Debugging Tools\";\n\"self.settings.advanced.debugging_tools.first_unread_conversation.title\" = \"Find first unread conversation\";\n\"self.settings.advanced.debugging_tools.show_user_id.title\" = \"Show my user ID\";\n\"self.settings.advanced.debugging_tools.enter_debug_command.title\" = \"Enter debug command\";\n\"self.settings.advanced.troubleshooting.submit_debug.subtitle\" = \"This information helps Wire Support diagnose calling problems and improve the overall app experience.\";\n\"self.settings.advanced.reset_push_token.title\" = \"Reset Push Notifications Token\";\n\"self.settings.advanced.reset_push_token.subtitle\" = \"If you experience problems with push notifications, Wire Support may ask you to reset this token.\";\n\"self.settings.advanced.reset_push_token_alert.title\" = \"Push token has been reset\";\n\"self.settings.advanced.reset_push_token_alert.message\" = \"Notifications will be restored in a few seconds.\";\n\"self.settings.advanced.version_technical_details.title\" = \"Version Technical Details\";\n\n// data usage permissions options\n\"self.settings.account.data_usage_permissions.title\" = \"Data Usage Permissions\";\n\n// Technical Report\n\"self.settings.technical_report_section.title\" = \"Technical Report\";\n\"self.settings.technical_report.send_report\" = \"Send report to Wire\";\n\"self.settings.technical_report.mail.subject\" = \"Wire Debug Report\";\n\"self.settings.technical_report.include_log\" = \"Include detailed log\";\n\"self.settings.technical_report.privacy_warning\" = \"Detailed logs could contain personal data\";\n\"self.settings.technical_report.no_mail_alert\" = \"No mail client detected. Tap \\\"OK\\\" and send logs manually to: \";\n\n// Password reset\n\"self.settings.password_reset_menu.title\" = \"Reset Password\";\n\n// Invite from Settings\n\"self.settings.invite_friends.title\" = \"Invite people\";\n\n// History backup\n\n\"self.settings.conversations.title\" = \"History\";\n\"self.settings.history_backup.title\" = \"Back Up Conversations\";\n\"self.settings.history_backup.description\" = \"Create a backup to preserve your conversation history. You can use this to restore history if you lose your device or switch to a new one.\\n\\nChoose a strong password to protect the backup file.\";\n\"self.settings.history_backup.action\" = \"Back Up Now\";\n\"self.settings.history_backup.error.title\" = \"Error\";\n\n\"self.settings.history_backup.set_email.title\" = \"Set an email and password.\";\n\"self.settings.history_backup.set_email.message\" = \"You need an email and a password in order to back up your conversation history. You can do it from the account page in Settings.\";\n\n// History backup password\n\n\"self.settings.history_backup.password.title\" = \"Set Password\";\n\"self.settings.history_backup.password.cancel\" = \"Cancel\";\n\"self.settings.history_backup.password.next\" = \"Next\";\n\"self.settings.history_backup.password.placeholder\" = \"Password\";\n\"self.settings.history_backup.password.description\" = \"The backup will be compressed and encrypted with the password you set here.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// System status\n\"system_status_bar.no_internet.title\" = \"No Internet\";\n\"system_status_bar.no_internet.explanation\" = \"There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\";\n\"system_status_bar.poor_connectivity.title\" = \"Slow Internet, can\u2019t call now\";\n\"system_status_bar.poor_connectivity.explanation\" = \"We can\u2019t guarantee voice quality. Connect to Wi-Fi or try changing your location.\";\n\n// View user profile and options menu & text field validation\n\"name.placeholder\" = \"Your full name\";\n\"name.guidance.tooshort\" = \"At least 2 characters\";\n\"name.guidance.toolong\" = \"Too many characters\";\n\n\"email.placeholder\" = \"Email\";\n\"email.guidance.invalid\" = \"Invalid email address\";\n\"email.guidance.tooshort\" = \"Email is too short\";\n\"email.guidance.toolong\" = \"Too many characters\";\n\n\"password.placeholder\" = \"Password\";\n\"password.guidance.toolong\" = \"Too many characters\";\n\n\"phone.guidance.invalid\" = \"Invalid phone number\";\n\"phone.guidance.tooshort\" = \"Phone number is too short\";\n\"phone.guidance.toolong\" = \"Too many characters\";\n\n// Landing screen\n\n\"landing.header\" = \"Wire. Add your Account.\";\n\"landing.welcome_message\" = \"Trying to create a Pro or Enterprise account for your business or organization?\";\n\"landing.welcome_submessage\" = \"Unfortunately, that's not possible in the app - once you have created your team, you can log in here\";\n\"landing.create_account.title\" = \"Create a Wire personal account\";\n\"landing.create_account.infotitle\" = \"Chat with friends and family?\";\n\"landing.create_account.subtitle\" = \"Chat privately with groups of friends\\U00A0and\\U00A0family\";\n\"landing.create_team.title\" = \"Pro\";\n\"landing.create_team.subtitle\" = \"Secure collaboration for businesses, institutions and professional\\U00A0organizations\";\n\"landing.login.hints\" = \"Already have an account?\";\n\"landing.login.button.title\" = \"Log in\";\n\"landing.login.email.button.title\" = \"Log in with email\";\n\"landing.login.enterprise.button.title\" = \"Enterprise log in\";\n\"landing.login.sso.button.title\" = \"Log in with SSO\";\n\n\"landing.custom_backend.title\" = \"Connected to \\\"%@\\\"\";\n\"landing.custom_backend.more_info.button.title\" = \"Show more\";\n\"landing.custom_backend.more_info.alert.title\" = \" You are connected to a third-party server: %@\";\n\n// Create team\n\n\"team.name.headline\" = \"Name your team\";\n\"team.name.subheadline\" = \"You can always change it later.\";\n\"team.name.textfield.placeholder\" = \"team name\";\n\"team.name.textfield.accessibility\" = \"Set team name\";\n\"team.name.whatiswireforteams\" = \"What is Wire Pro?\";\n\n\"team.email.headline\" = \"Your account\";\n\"team.email.subheadline\" = \"Enter your work email address.\";\n\"team.email.textfield.placeholder\" = \"Your company email\";\n\"team.email.button.learn_more\" = \"Learn More\";\n\n\"team.activation_code.headline\" = \"You\u2019ve got mail\";\n\"team.phone_activation_code.headline\" = \"Verification\";\n\"team.activation_code.subheadline\" = \"Enter the verification code we sent to %@.\";\n\"team.activation_code.button.resend\" = \"Resend code\";\n\"team.activation_code.button.change_email\" = \"Change email\";\n\"team.activation_code.button.change_phone\" = \"Change phone number\";\n\n\"team.full_name.headline\" = \"Your name\";\n\"team.full_name.textfield.placeholder\" = \"Full name\";\n\"team.full_name.textfield.accessibility\" = \"Set full name\";\n\n\"team.password.headline\" = \"Set password\";\n\n\"verification.code_label\" = \"Six-digit code. Text field.\";\n\"verification.code_hint\" = \"Double tap to enter the code.\";\n\n// Invite Team Members\n\n\"team.invite.header.title\" = \"Build your team\";\n\"team.invite.header.subtitle\" = \"Your Wire team is ready to go. Invite your colleagues as members.\";\n\"team.invite.textfield.placeholder\" = \"Colleague's email\";\n\"team.invite.textfield.accesibility\" = \"Enter email address for colleague to invite.\";\n\"team.invite.learn_more.title\" = \"Learn more\";\n\"team.invite.top_bar.skip\" = \"Skip\";\n\"team.invite.top_bar.done\" = \"Done\";\n\n// Team Invite Errors\n\"team.invite.error.generic\" = \"Something went wrong, please try again\";\n\"team.invite.error.already_registered\" = \"This email address is already in use\";\n\"team.invite.error.already_invited\" = \"This email has already been invited\";\n\"team.invite.error.too_many_invitations\" = \"The maximum number of invitations has been sent\";\n\"team.invite.error.no_internet\" = \"No Internet Connection\";\n\n// Guest Room\n\n\"guest_room.allow_guests.title\" = \"Allow guests and services\";\n\"guest_room.allow_guests.subtitle\" = \"Open this conversation to services and people outside your team.\";\n\"guest_room.remove_guests.message\" = \"Current guests and services will be removed from the conversation. New guests and services will not be allowed.\";\n\"guest_room.remove_guests.action\" = \"Remove\";\n\"guest_room.revoke_link.message\" = \"New guests will not be able to join with this link. Current guests will still have access.\";\n\"guest_room.revoke_link.action\" = \"Revoke Link\";\n\n\"guest_room.error.generic.title\" = \"Something went wrong\";\n\"guest_room.error.generic.message\" = \"Check your connection and try again\";\n\n\"guest_room.link.header.title\" = \"Invite others with a link\";\n\"guest_room.link.header.subtitle\" = \"Anyone with the link can join the conversation, even if they don\u2019t have Wire.\";\n\n\"guest_room.link.button.title\" = \"Create Link\";\n\n\"guest_room.actions.copy_link\" = \"Copy Link\";\n\"guest_room.actions.copied_link\" = \"Link Copied!\";\n\"guest_room.actions.share_link\" = \"Share Link\";\n\"guest_room.actions.revoke_link\" = \"Revoke Link\u2026\";\n\n\"guest_room.share.message\" = \"Join me in a conversation on Wire:\\n%@\";\n\n\"guest_room.expiration.hours_left\" = \"%@h left\";\n\"guest_room.expiration.less_than_minutes_left\" = \"Less than %@m left\";\n\n// Registration\n\n\"registration.launch_back_button.label\" = \"Back\";\n\n\"registration.title\" = \"Registration\";\n\"registration.close_email_invitation_button.email_title\" = \"Use another email\";\n\"registration.close_email_invitation_button.phone_title\" = \"Register by phone\";\n\"registration.close_phone_invitation_button.email_title\" = \"Register by email\";\n\"registration.close_phone_invitation_button.phone_title\" = \"Use another phone\";\n\n\"registration.register_by_phone\" = \"Phone\";\n\"registration.register_by_email\" = \"Email\";\n\n\"registration.enter_phone_number.title\" = \"Edit phone number\";\n\"registration.enter_phone_number.placeholder\" = \"Phone number\";\n\n\"registration.verify_phone_number.instructions\" = \"Enter the verification code we sent to %@\";\n\"registration.verify_phone_number.resend\" = \"Resend\";\n\"registration.verify_phone_number.resend_placeholder\" = \"No code showing up?\\nYou can request a new one in %.0f seconds\";\n\n\"registration.verify_email.instructions\" = \"We sent an email to %@.\\n Follow the link to verify your address.\";\n\"registration.verify_email.resend.instructions\" = \"Didn\u2019t get the message?\";\n\"registration.verify_email.resend.button_title\" = \"Re-send\";\n\n\"registration.no_history.hero\" = \"It\u2019s the first time you\u2019re using Wire on this device.\";\n\"registration.no_history.subtitle\" = \"For privacy reasons, your conversation history will not appear here.\";\n\"registration.no_history.got_it\" = \"OK\";\n\"registration.no_history.restore_backup\" = \"Restore from backup\";\n\n\"registration.alert.account_exists.title\" = \"Account Exists\";\n\"registration.alert.account_exists.message_phone\" = \"The phone number you used to register is already linked to an account.\\n\\nUse another phone number, or try to log in if you own this account.\";\n\"registration.alert.account_exists.message_email\" = \"The email address you used to register is already linked to an account.\\n\\n Use another email address, or try to log in if you own this account.\";\n\"registration.alert.change_email_action\" = \"Register with Another Email\";\n\"registration.alert.change_phone_action\" = \"Register with Another Number\";\n\"registration.alert.change_signin_action\" = \"Log In\";\n\n// Restore History Warning Alert\n\"registration.no_history.restore_backup_warning.title\" = \"Restore history\";\n\"registration.no_history.restore_backup_warning.message\" = \"The backup contents will replace the conversation history on this device.\\nYou can only restore history from a backup of the same platform.\";\n\"registration.no_history.restore_backup_warning.proceed\" = \"Choose Backup File\";\n\n/// Restore History Failure Alerts\n\"registration.no_history.restore_backup_failed.try_again\" = \"Try again\";\n\n// Generic\n\"registration.no_history.restore_backup_failed.title\" = \"Something went wrong\";\n\"registration.no_history.restore_backup_failed.message\" = \"Your history could not be restored.\";\n\n// Wrong Account\n\"registration.no_history.restore_backup_failed.wrong_account.title\" = \"Incompatible backup\";\n\"registration.no_history.restore_backup_failed.wrong_account.message\" = \"You cannot restore history from a different account.\";\n\n// Incompatible Version\n\"registration.no_history.restore_backup_failed.wrong_version.title\" = \"Incompatible backup\";\n\"registration.no_history.restore_backup_failed.wrong_version.message\" = \"This backup was created by a newer or outdated version of Wire and cannot be restored here.\";\n\n// SSO \u2013 Company Login\n\"login.sso.alert.title\" = \"Enterprise Login\";\n\"login.sso.alert.message.sso_and_email\" = \"Please enter your email or SSO code. If your email matches an enterprise installation of Wire, this app will connect to that server.\";\n\"login.sso.alert.message.sso_only\" = \"Please enter your SSO code:\";\n\"login.sso.alert.action\" = \"Log in\";\n\"login.sso.alert.text_field.placeholder.sso_and_email\" = \"email or SSO access code\";\n\"login.sso.alert.text_field.placeholder.sso_only\" = \"SSO access code\";\n\n\"login.sso.start_error_title\" = \"Cannot Start Enterprise Login\";\n\"login.sso.link_error_message\" = \"This link is not valid. Please contact your administrator to resolve the issue.\";\n\n\"login.sso.error.offline.alert.message\" = \"Please check your Internet connection and try again.\";\n\"login.sso.error.alert.message\" = \"Please contact your team administrator for details (error %@).\";\n\n\"login.sso.error.alert.invalid_code.message\" = \"Please verify your company SSO access code and try again.\";\n\"login.sso.error.alert.invalid_status.message\" = \"Please try again later (error %@).\";\n\"login.sso.error.alert.invalid_format.message.sso_only\" = \"Please enter a valid SSO access code\";\n\"login.sso.error.alert.invalid_format.message.sso_and_email\" = \"Please enter a valid email or SSO access code\";\n\"login.sso.error.alert.domain_not_registered.message\" = \"This email cannot be used for enterprise login. Please enter the SSO code to proceed.\";\n\"login.sso.error.alert.domain_associated_with_wrong_server.message\" = \"This email is linked to a different server, but the app can only be connected to one server at a time. Please log out of all Wire accounts on this device and try to login again.\";\n\"login.sso.error.alert.unknown.message\" = \"Please try again later.\";\n\"login.sso.backend_switch.title\" = \"Redirecting...\";\n\"login.sso.backend_switch.subtitle\" = \"You are being redirected to your dedicated enterprise service.\";\n\"login.sso.backend_switch.information\" = \"Provide credentials only if you're sure this is your organization's log in.\";\n\n\n// Restore In Progress Loading Titles\n\"registration.no_history.restore_backup.restoring\" = \"Restoring\u2026\";\n\"registration.no_history.restore_backup.completed\" = \"Completed\";\n\n// Password Import Alert\n\"registration.no_history.restore_backup.password.title\" = \"This backup is password protected.\";\n\"registration.no_history.restore_backup.password.message\" = \"The password is required to restore this backup.\";\n\"registration.no_history.restore_backup.password.placeholder\" = \"Password\";\n\"registration.no_history.restore_backup.password_error.title\" = \"Wrong Password\";\n\n\"registration.no_history.logged_out.hero\" = \"You\u2019ve used Wire on this device before.\";\n\"registration.no_history.logged_out.subtitle\" = \"Messages sent in the meantime will not appear.\";\n\"registration.no_history.logged_out.got_it\" = \"OK\";\n\n\"registration.enter_name.title\" = \"Edit Name\";\n\"registration.enter_name.hero\" = \"What should we call you?\";\n\"registration.enter_name.placeholder\" = \"Your full name\";\n\n\"registration.terms_of_use.title\" = \"Welcome to Wire.\";\n\"registration.terms_of_use.terms\" = \"By continuing you agree to the Wire Terms of Use.\";\n\"registration.terms_of_use.terms.link\" = \"Terms of Use\";\n\"registration.terms_of_use.agree\" = \"I agree\";\n\n\"registration.terms_of_use.terms.title\" = \"Terms of Use\";\n\"registration.terms_of_use.terms.message\" = \"Please accept the Terms of Use to continue.\";\n\"registration.terms_of_use.terms.view\" = \"View\";\n\"registration.terms_of_use.accept\" = \"Accept\";\n\n\"registration.email_flow.title\" = \"Register by Email\";\n\"registration.email_flow.email_step.title\" = \"Edit Details\";\n\n\"registration.country_select.title\" = \"Country\";\n\n\"registration.share_contacts.hero.title\" = \"Find people on Wire\";\n\"registration.share_contacts.hero.paragraph\"  = \"Share your contacts so we can connect you with others. We anonymize all information and do not share it with anyone else.\";\n\"registration.share_contacts.find_friends_button.title\" = \"Share contacts\";\n\"registration.share_contacts.skip_button.title\" = \"Not now\";\n\n\"registration.address_book_access_denied.hero.title\" = \"Wire does not have access to your contacts.\";\n\"registration.address_book_access_denied.hero.paragraph1\" = \"Wire helps find your friends if you share your contacts.\";\n\"registration.address_book_access_denied.hero.paragraph2\" = \"To enable access tap Settings and turn on Contacts.\";\n\"registration.address_book_access_denied.settings_button.title\" = \"Settings\";\n\"registration.address_book_access_denied.maybe_later_button.title\" = \"Maybe later\";\n\n\"registration.push_access_denied.hero.title\" = \"Never miss a call or a message.\";\n\"registration.push_access_denied.hero.paragraph1\" = \"Enable Notifications in Settings.\";\n\"registration.push_access_denied.settings_button.title\" = \"Go to Settings\";\n\"registration.push_access_denied.maybe_later_button.title\" = \"Maybe later\";\n\n\"registration.personal.title\" = \"Create an account\";\n\"registration.signin.title\" = \"Log in\";\n\"registration.signin.too_many_devices.title\" = \"Too Many Devices\";\n\"registration.signin.too_many_devices.subtitle\" = \"Remove one of your other devices to start using Wire on this one.\";\n\"registration.signin.too_many_devices.manage_button.title\" = \"Manage devices\";\n\"registration.signin.too_many_devices.sign_out_button.title\" = \"Log out\";\n\n\"registration.signin.too_many_devices.manage_screen.title\" = \"Remove a Device\";\n\n\"registration.signin.alert.password_needed.title\" = \"Password needed\";\n\"registration.signin.alert.password_needed.message\" = \"Please enter your Password in order to log in.\";\n\n\"registration.devices.title\" = \"Devices\";\n\"registration.devices.active_list_header\" = \"Active\";\n\"registration.devices.current_list_header\" = \"Current\";\n\"registration.devices.active_list_subtitle\" = \"If you don\u2019t recognize a device above, remove it and reset your password.\";\n\"registration.devices.activated\"  = \"Activated %@\";\n\"registration.devices.id\" = \"ID:\";\n\n\"signin.use_email.label\" = \"Login with Email\";\n\"signin.use_phone.label\" = \"Login with Phone\";\n\"signin.forgot_password\" = \"Forgot password?\";\n\"signin.use_one_password.label\" = \"Log in with 1Password\";\n\"signin.use_one_password.hint\" = \"Double tap to fill your password with 1Password\";\n\"signin.confirm\" = \"Log In\";\n\"signin.company_idp.button.title\" = \"For Companies\";\n\n\"signin_logout.subheadline\" = \"Your session expired. You need to log in again to continue.\";\n\"signin_logout.email.subheadline\" = \"Your session expired. Enter your email address and password to continue.\";\n\"signin_logout.phone.subheadline\" = \"Your session expired. Enter your phone number to continue.\";\n\"signin_logout.sso.subheadline\" = \"Your session expired. Log in with your enterprise account to continue.\";\n\"signin_logout.sso.buton\" = \"Enterprise log in\";\n\n\"signin.email.missing_password.subtitle\" = \"Enter your email address and password to continue.\";\n\"signin.phone.missing_password.subtitle\" = \"Enter your phone number to continue.\";\n\n\"registration.phone_country\" = \"Country\";\n\"registration.phone_code\" = \"Country Code\";\n\"registration.phone_country.hint\" = \"Double tap to select another country.\";\n\"registration.phone_code.hint\" = \"Double tap to select another country code.\";\n\"registration.phone.verify.label\" = \"Verify phone number\";\n\"registration.phone.verify_field.label\" = \"Verification Code\";\n\n\"registration.add_phone_number.hero.title\" = \"Add phone number\";\n\"registration.add_phone_number.hero.paragraph\" = \"This helps us find people you may know. We never share it.\";\n\"registration.add_phone_number.skip_button.title\" = \"Not now\";\n\n\"registration.add_email_password.hero.title\" = \"Add your email and password\";\n\"registration.add_email_password.hero.paragraph\" = \"This lets you use Wire on multiple devices.\";\n\n\"registration.email_invitation.title\" = \"Invitation\";\n\"registration.email_invitation.hero.title\" = \"Hello, %@\";\n\"registration.email_invitation.hero.paragraph\" = \"Choose a password to create your account.\";\n\n\"registration.phone_invitation.title\" = \"Invitation\";\n\"registration.phone_invitation.hero.title\" = \"Hello, %@\";\n\"registration.phone_invitation.hero.paragraph\" = \"You are one step away from creating your account.\";\n\n\"registration.confirm\" = \"Sign Up\";\n\"registration.phone.country_code.hint\" = \"Double tap to use a phone number from this country.\";\n\n\"error.name_and_email\" = \"Please enter your full name and a valid email address\";\n\"error.full_name\" = \"Please enter your full name\";\n\"error.email\" = \"Please enter a valid email address\";\n\"error.input.too_long\" = \"Please enter a shorter username\";\n\"error.input.too_short\" = \"Please enter a longer username\";\n\"error.email.invalid\" = \"Please enter a valid email address\";\n\"error.phone.invalid\" = \"Please enter a valid phone number\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Username takeover screen\n\"registration.select_handle.takeover.subtitle\" = \"Claim your unique name on Wire.\";\n\"registration.select_handle.takeover.subtitle_link\" = \"Learn more\";\n\n\"registration.select_handle.takeover.choose_own\" = \"Choose yours\";\n\"registration.select_handle.takeover.keep_suggested\" = \"Keep this one\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// ZMUserSessionErrorCode mapping. Used during registration and profile edit\n\"error.user.unkown_error\" = \"Something went wrong, please try again\";\n\"error.user.needs_credentials\" = \"Please verify your details and try again.\";\n\"error.user.domain_blocked\" = \"This email requires a team invitation. Contact your organization's IT administrators to receive an invite.\";\n\"error.user.invalid_credentials\" = \"Please verify your details and try again.\";\n\"error.user.account_pending_activation\" = \"The account you are trying access is pending activation. Please verify your details.\";\n\"error.user.network_error\" = \"There seems to be a problem with your network. Please try again later.\";\n\"error.user.email_is_taken\" = \"The email address you provided has already been registered. Please try again.\";\n\"error.user.phone_is_taken\" = \"The phone number you provided has already been registered. Please try again.\";\n\"error.user.phone_code_invalid\" = \"Please enter a valid code\";\n\"error.user.phone_code_too_many\" = \"We already sent you a code via SMS. Tap Resend after 10 minutes to get a new one.\";\n\"error.user.registration_unknown_error\" = \"Something went wrong. Please try again.\";\n\"error.user.device_deleted_remotely\" = \"You have been logged out from another device.\";\n\"error.user.last_identity_cant_be_deleted\" = \"Either an email address or a phone number is required.\";\n\"error.user.account_suspended\" = \"This account is no longer authorized to log in.\";\n\"error.user.account_limit_reached\" = \"You can\u2019t add more than 3 accounts.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Those are caught by the UI without involving the SE validation. Basically very similar to ZMUserSessionErrorCode onces\n\"error.updating_password\" = \"Couldn\u2019t update your password.\";\n\n\"error.group_call.too_many_members_in_conversation.title\" = \"Too many people to call\";\n\"error.group_call.too_many_members_in_conversation\" = \"Calls work in conversations with up to %d people.\";\n\"error.group_call.too_many_participants_in_the_call.title\" = \"The call is full\";\n\"error.group_call.too_many_participants_in_the_call\" = \"There\u2019s only room for %d participants in here.\";\n\"error.call.gsm_ongoing.title\" = \"Cellular call\";\n\"error.call.gsm_ongoing\" = \"Please cancel the cellular call before calling on Wire.\";\n\"error.call.general.title\" = \"Call error\";\n\"error.call.general\" = \"Please try calling again in several minutes.\";\n\"error.call.slow_connection.title\" = \"Slow connection\";\n\"error.call.slow_connection\" = \"You might experience issues during the call\";\n\"error.call.slow_connection.call_anyway\" = \"Call anyway\";\n\n\"error.invite.no_email_provider\" = \"Please configure your email client to be able to send the invites via email\";\n\"error.invite.no_messaging_provider\" = \"Please configure your SMS to be able to send the invites via SMS\";\n\n\"error.conversation.title\" = \"Error\";\n\"error.conversation.cannot_add\" = \"Adding the participant failed\";\n\"error.conversation.cannot_remove\" = \"Removing the participant failed\";\n\"error.conversation.too_many_members\" = \"The conversation is full\";\n\"error.conversation.offline\" = \"There seems to be a problem with your Internet connection. Please make sure it\u2019s working.\";\n\n\"sketchpad.initial_hint\" = \"Tap colors to change brush size\";\n\n\"migration.please_wait_message\" = \"One moment, please\";\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Those are used by the backend to localize APNS\n\"push.notification.new_user\" = \"%@ joined Wire\";\n\"push.notification.new_message\" = \"New message\";\n\n\n//Force Update\n\"force.update.title\" = \"Update necessary\";\n\"force.update.message\" = \"You are missing out on new features.\\nGet the latest version of Wire in the App Store.\";\n\"force.update.ok_button\" = \"Go to App Store\";\n\n//Jailbroken alert\n\"jailbrokendevice.alert.title\" = \"Jailbreak detected\";\n\"jailbrokendevice.alert.message\" = \"For security reasons, Wire can't be used on this device. Any existing Wire data has been erased.\";\n\n// Database Loading Failure alert\n\"databaseloadingfailure.alert.title\" = \"Not Enough Storage\";\n\"databaseloadingfailure.alert.message\" = \"The database could not be loaded due to insufficient storage. Review your device storage usage and try again.\";\n\"databaseloadingfailure.alert.settings\" = \"Go to Settings\";\n\"databaseloadingfailure.alert.delete_database\" = \"Delete Database\";\n\"databaseloadingfailure.alert.delete_database.message\" = \"By deleting the database, all local data and messages for this account will be permanently deleted.\";\n\"databaseloadingfailure.alert.delete_database.continue\" = \"Continue\";\n\n// Third Party\n\"giphy.conversation.message\" = \"%@ \u00b7 via giphy.com\";\n\"giphy.conversation.random_message\" = \"via giphy.com\";\n\"giphy.error.no_more_results\" = \"no more gifs\";\n\"giphy.error.no_result\" = \"no gif found\";\n\n\"giphy.confirm\" = \"send\";\n\"giphy.cancel\" = \"cancel\";\n\"giphy.search_placeholder\" = \"Search Giphy\";\n\n\"invite_banner.title\" = \"Bring your friends to Wire!\";\n\"invite_banner.message\" = \"Enjoy calls, messages, sketches, GIFs and more in private or with groups.\";\n\"invite_banner.invite_button_title\" = \"Invite more people\";\n\n// Collections\n\"collections.section.images.title\" = \"Pictures\";\n\"collections.section.files.title\" = \"Files\";\n\"collections.section.videos.title\" = \"Videos\";\n\"collections.section.links.title\" = \"Links\";\n\"collections.section.all.button\" = \"Show all %d \u2192\";\n\"collections.section.no_items\" = \"No items in collection\";\n\"collections.image_viewer.copied.title\" = \"Picture copied\";\n\n\"collections.search.field.placeholder\" = \"Search text messages\";\n\"collections.search.no_items\" = \"No results\";\n\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Message composing / drafts\n\n\"compose.drafts.title\" = \"Messages\";\n\"compose.drafts.empty.title\" = \"No messages\";\n\"compose.drafts.empty.subtitle\" = \"Tap + to compose one\";\n\"compose.drafts.compose.title\" = \"Type a message\";\n\"compose.drafts.compose.subject.placeholder\" = \"Tap to set a subject\";\n\n\"compose.drafts.compose.delete.confirm.title\" = \"Confirm Deletion\";\n\"compose.drafts.compose.delete.confirm.message\" = \"This action will permanently delete this draft and cannot be undone.\";\n\"compose.drafts.compose.delete.confirm.action.title\" = \"Delete\";\n\n\"compose.drafts.compose.dismiss.confirm.title\" = \"Save as draft\";\n\"compose.drafts.compose.dismiss.confirm.action.title\" = \"Save\";\n\"compose.drafts.compose.dismiss.delete.action.title\" = \"Delete\";\n\n\"availability.message.cancel\" = \"Cancel\";\n\"availability.message.set_status\" = \"Set a status\";\n\"availability.accessibility_label.change_status\" = \"Change Status\";\n\"availability.accessibility_label.status\" = \"Status\";\n\n\"availability.none\" = \"None\";\n\"availability.available\" = \"Available\";\n\"availability.away\" = \"Away\";\n\"availability.busy\" = \"Busy\";\n\n\"availability.reminder.away.title\" = \"You are set to Away\";\n\"availability.reminder.away.message\" = \"You will appear as Away to other people. You will not receive notifications about any incoming calls or messages.\";\n\"availability.reminder.busy.title\" = \"You are set to Busy\";\n\"availability.reminder.busy.message\" = \"You will appear as Busy to other people. You will only receive notifications for mentions, replies, and calls in conversations that are not muted.\";\n\"availability.reminder.available.title\" = \"You are set to Available\";\n\"availability.reminder.available.message\" = \"You will appear as Available to other people. You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\";\n\"availability.reminder.none.title\" = \"No status set\";\n\"availability.reminder.none.message\" = \"You will receive notifications for incoming calls and for messages according to the Notifications setting in each conversation.\";\n\"availability.reminder.action.dont_remind_me\" = \"Do not display this information again\";\n\"availability.reminder.action.ok\" = \"OK\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Call Quality Survey\n\n\"calling.quality_survey.title\" = \"Call Quality Feedback\";\n\"calling.quality_survey.question\" = \"How do you rate the overall quality of the call?\";\n\"calling.quality_survey.answer.1\" = \"Bad\";\n\"calling.quality_survey.answer.2\" = \"Poor\";\n\"calling.quality_survey.answer.3\" = \"Fair\";\n\"calling.quality_survey.answer.4\" = \"Good\";\n\"calling.quality_survey.answer.5\" = \"Excellent\";\n\"calling.quality_survey.skip_button_title\" = \"Skip\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// URL Action\n\n\"url_action.confirm\" = \"Confirm\";\n\"url_action.title\" = \"Confirm URL action\";\n\"url_action.connect_to_bot.message\" = \"Would you like to connect to the bot?\";\n\n\"url_action.switch_backend.title\" = \"Connect to server\";\n\"url_action.switch_backend.message\" = \"This configuration will connect the app to a third-party server:\\n%@\";\n\n\"url_action.switch_backend.error.logged_in.title\" = \"Can\u2019t switch servers\";\n\"url_action.switch_backend.error.logged_in\" = \"You are already logged in. To switch to this server, log out of all accounts and try again.\";\n\n\"url_action.switch_backend.error.invalid_backend.title\" = \"The server is not responding\";\n\"url_action.switch_backend.error.invalid_backend\" = \"Please check your internet connection, verify the link and try again.\";\n\n\n// Deep Link\n\"url_action.invalid_user.title\" = \"Wire can't find this person.\";\n\"url_action.invalid_user.message\" = \"You may not have permission with this account or it no longer exists.\";\n\n\"url_action.invalid_conversation.title\" = \"Wire can't open this conversation.\";\n\"url_action.invalid_conversation.message\" = \"You may not have permission with this account or the person may not be on Wire.\";\n\n\"url_action.authorization_required.title\" = \"Authorization required.\";\n\"url_action.authorization_required.message\" = \"You need to log in to view this content.\";\n\n\"url_action.invalid_link.title\" = \"Invalid link.\";\n\"url_action.invalid_link.message\" = \"The link you opened is not valid.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// News and offers consent prompt\n\n\"news_offers.consent.title\" = \"Do you want to receive news and product updates from Wire via email?\";\n\"news_offers.consent.message\" = \"You can unsubscribe at any time.\";\n\"news_offers.consent.button.privacy_policy.title\" = \"Privacy Policy\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Message Details\n\"message_details.empty_likes\" = \"No one has liked this message yet.\";\n\"message_details.empty_read_receipts\" = \"No one has read this message yet.\";\n\"message_details.read_receipts_disabled\" = \"Read receipts were not on when this message was sent.\";\n\"message_details.combined_title\" = \"Message Details\";\n\"message_details.likes_title\" = \"Liked\";\n\"message_details.receipts_title\" = \"Read\";\n\"message_details.tabs.seen\" = \"Read (%d)\";\n\"message_details.tabs.likes\" = \"Liked (%d)\";\n\"message_details.subtitle_send_date\" = \"Sent: %@\";\n\"message_details.subtitle_edit_date\" = \"Edited: %@\";\n\"message_details.subtitle_label_voiceOver\" = \"Message Details\";\n\"message_details.user_handle_subtitle_label\" = \"Username\";\n\"message_details.user_read_timestamp_subtitle_label\" = \"Read at\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Password Rules\n\"registration.password.rules.no_requirements\" = \"Use %@.\";\n\"registration.password.rules.with_requirements\" = \"Use %@, with %@.\";\n\n// Legal Hold Deactivation\n\"legal_hold.deactivated.title\" = \"Legal Hold Deactivated\";\n\"legal_hold.deactivated.message\" = \"Future messages will not be recorded.\";\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Share Extension\n\"share_extension.voiceover.conversation_under_legal_hold\" = \"Under legal hold.\";\n\"share_extension.voiceover.conversation_secure\" = \"All clients verified.\";\n\"share_extension.voiceover.conversation_secure_with_ignored\" = \"Not all clients verified.\";\n\n// Legal hold - alert\n\"legalhold_request.button.accessibility\" = \"Pending approval.\";\n\"legalhold_request.alert.title\" = \"Legal Hold Requested\";\n\"legalhold_request.alert.detail\" = \"All future messages will be recorded by the device with fingerprint:\\n\\n%@\\n\\nThis includes deleted, edited, and timed messages in all conversations.\";\n\"legalhold_request.alert.detail.enter_password\" = \"Enter your password to confirm.\";\n\"legalhold_request.alert.error_wrong_password\" = \"Wrong Password\";\n\n// Legal hold activated\n\"legalhold_active.alert.title\" = \"Legal Hold is Active\";\n\"legalhold_active.alert.learn_more\" = \"Learn More\";\n\"legalhold_active.alert.message\" = \"Legal Hold has been activated for your account. All messages will be preserved for future access, including deleted, edited, and timed messages.\\n\\nYour conversation partners will be aware of the recording.\";\n\n// Account deleted alert\n\"account_deleted_session_expired_alert.title\" = \"Your session expired\";\n\"account_deleted_session_expired_alert.message\" = \"The application did not communicate with the server for a long period of time, or your session has been remotely invalidated.\";\n\n\"account_deleted_missing_passcode_alert.title\" = \"No device passcode\";\n\"account_deleted_missing_passcode_alert.message\" = \"In order to use Wire, please set a passcode in your device settings.\";\n\n// Button cell state\n\"button_message_cell.state.unselected\" = \"unselected\";\n\"button_message_cell.state.selected\" = \"selected\";\n\"button_message_cell.state.confirmed\" = \"confirmed\";\n\n\"button_message_cell.generic_error\" = \"Your answer can't be sent, please retry.\";\n\n// Custom app lock\n\n\"passcode.hint_label\" = \"Passcode\";\n\n// Custom app lock - create passcode\n\"create_passcode.textfield.placeholder\" = \"\";\n\"create_passcode.title_label\" = \"Create a passcode\";\n\"create_passcode.info_label\" = \"It will be used to unlock Wire. If you forget this passcode **it can not be recovered.**\";\n\"create_passcode.info_label_forced_applock\" = \"Create a passcode to unlock Wire. Please remember it, as **it can not be recovered.**\";\n\"create_passcode.create_button.title\" = \"create passcode\";\n\n// Custom app lock - create passcode validation\n\"create_passcode.validation.too_short\" = \"At least eight characters long\";\n\"create_passcode.validation.no_lowercase_char\" = \"A lowercase letter\";\n\"create_passcode.validation.no_uppercase_char\" = \"An uppercase letter\";\n\"create_passcode.validation.no_number\" = \"A number\";\n\"create_passcode.validation.no_special_char\" = \"A special character\";\n\n// Custom app lock - unlock\n\"unlock.textfield.placeholder\" = \"Enter your passcode\";\n\"unlock.title_label\" = \"Enter passcode to unlock Wire\";\n\"unlock.wipe_button\" = \"Access as new device\";\n\"unlock.error_label\" = \"Wrong passcode\";\n\"unlock.submit_button.title\" = \"unlock\";\n\n// Custom app lock - warning screen\n\"warning_screen.title_label\" = \"There was a change in Wire\";\n\"warning_screen.main_info.forced_applock\" = \"Your organization needs to lock your app when Wire is not in use to keep the team safe.\";\n\"warning_screen.info_label.forced_applock\" = \"Next time, unlock Wire the same way you unlock your phone.\";\n\"warning_screen.info_label.non_forced_applock\" = \"Your organization does not need app lock anymore. From now, you can access Wire without any obstacles.\";\n\n// Wipe database\n\n\"wipe_database.title_label\" = \"Access as new device\";\n\"wipe_database.info_label\" = \"The data stored on this device can only be accessed with your passcode.\\n\\nIf you have forgotten your passcode, you can delete the database to log in again as a new device.\\n\\nBy deleting the database, \";\n\"wipe_database.info_label.highlighted\" = \"all local data and messages for this account will be permanently deleted.\";\n\n\"wipe_database.button.title\" = \"I want to delete the database\";\n\n// Wipe database alert\n\n\"wipe_database.alert.description\" = \"Confirm database deletion\";\n\"wipe_database.alert.message\" = \"Type 'Delete' to verify you want to delete all data in this device.\";\n\"wipe_database.alert.placeholder\" = \"Type 'Delete'\";\n\"wipe_database.alert.confirm\" = \"Delete\";\n\"wipe_database.alert.confirm_input\" = \"Delete\";\n\n// Wipe database completion\n\n\"wipe_database_completion.title\" = \"Database deleted\";\n\"wipe_database_completion.subtitle\" = \"Your data and messages have been deleted. You can now log in again as a new device.\";\n\n// MARK: - App lock module\n\n\"appLockModule.message.faceID\" = \"Unlock Wire with Face ID or Passcode\";\n\"appLockModule.message.touchID\" = \"Unlock Wire with Touch ID or Passcode\";\n\"appLockModule.message.passcode\" = \"Unlock Wire with Passcode\";\n\"appLockModule.message.passcodeUnavailable\" = \"To unlock Wire, turn on Passcode in your device settings\";\n\"appLockModule.unlockButton.title\" = \"Unlock\";\n\"appLockModule.goToSettingsButton.title\" = \"Go to settings\";\n\n", "//\n// Wire\n// Copyright (C) 2020 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\nimport UIKit\nimport WireSyncEngine\nimport avs\n\n// MARK: - AppRootRouter\npublic class AppRootRouter: NSObject {\n\n    // MARK: - Public Property\n    let screenCurtain = ScreenCurtain()\n\n    // MARK: - Private Property\n    private let navigator: NavigatorProtocol\n    private var appStateCalculator: AppStateCalculator\n    private var urlActionRouter: URLActionRouter\n\n    private var authenticationCoordinator: AuthenticationCoordinator?\n    private var switchingAccountRouter: SwitchingAccountRouter\n    private var sessionManagerLifeCycleObserver: SessionManagerLifeCycleObserver\n    private let foregroundNotificationFilter: ForegroundNotificationFilter\n    private var quickActionsManager: QuickActionsManager\n    private var authenticatedRouter: AuthenticatedRouter? {\n        didSet {\n            setupAnalyticsSharing()\n        }\n    }\n\n    private var observerTokens: [NSObjectProtocol] = []\n    private var authenticatedBlocks: [() -> Void] = []\n    private let teamMetadataRefresher = TeamMetadataRefresher()\n\n    // MARK: - Private Set Property\n    private(set) var sessionManager: SessionManager\n\n    // TO DO: This should be private\n    private(set) var rootViewController: RootViewController\n\n    // MARK: - Initialization\n\n    init(viewController: RootViewController,\n         navigator: NavigatorProtocol,\n         sessionManager: SessionManager,\n         appStateCalculator: AppStateCalculator) {\n        self.rootViewController = viewController\n        self.navigator = navigator\n        self.sessionManager = sessionManager\n        self.appStateCalculator = appStateCalculator\n        self.urlActionRouter = URLActionRouter(viewController: viewController)\n        self.switchingAccountRouter = SwitchingAccountRouter()\n        self.quickActionsManager = QuickActionsManager()\n        self.foregroundNotificationFilter = ForegroundNotificationFilter()\n        self.sessionManagerLifeCycleObserver = SessionManagerLifeCycleObserver()\n\n        urlActionRouter.sessionManager = sessionManager\n        sessionManagerLifeCycleObserver.sessionManager = sessionManager\n        foregroundNotificationFilter.sessionManager = sessionManager\n        quickActionsManager.sessionManager = sessionManager\n\n        sessionManager.foregroundNotificationResponder = foregroundNotificationFilter\n        sessionManager.switchingDelegate = switchingAccountRouter\n        sessionManager.presentationDelegate = urlActionRouter\n\n        super.init()\n\n        setupAppStateCalculator()\n        setupURLActionRouter()\n        setupNotifications()\n        setupAdditionalWindows()\n\n        AppRootRouter.configureAppearance()\n\n        createLifeCycleObserverTokens()\n        setCallingSettings()\n    }\n\n    // MARK: - Public implementation\n\n    public func start(launchOptions: LaunchOptions) {\n        showInitial(launchOptions: launchOptions)\n    }\n\n    public func openDeepLinkURL(_ deepLinkURL: URL) -> Bool {\n        return urlActionRouter.open(url: deepLinkURL)\n    }\n\n    public func performQuickAction(for shortcutItem: UIApplicationShortcutItem,\n                                   completionHandler: ((Bool) -> Void)?) {\n        quickActionsManager.performAction(for: shortcutItem,\n                                          completionHandler: completionHandler)\n    }\n\n    // MARK: - Private implementation\n    private func setupAppStateCalculator() {\n        appStateCalculator.delegate = self\n    }\n\n    private func setupURLActionRouter() {\n        urlActionRouter.delegate = self\n    }\n\n    private func setupNotifications() {\n        setupApplicationNotifications()\n        setupContentSizeCategoryNotifications()\n        setupAudioPermissionsNotifications()\n    }\n\n    private func setupAdditionalWindows() {\n        screenCurtain.makeKeyAndVisible()\n        screenCurtain.isHidden = true\n    }\n\n    private func createLifeCycleObserverTokens() {\n        sessionManagerLifeCycleObserver.createLifeCycleObserverTokens()\n    }\n\n    private func setCallingSettings() {\n        sessionManager.updateCallNotificationStyleFromSettings()\n        sessionManager.useConstantBitRateAudio = SecurityFlags.forceConstantBitRateCalls.isEnabled\n            ? true\n            : Settings.shared[.callingConstantBitRate] ?? false\n    }\n\n    // MARK: - Transition\n\n    /// A queue on which we disspatch app state transitions.\n\n    private let appStateTransitionQueue = DispatchQueue(label: \"AppRootRouter.appStateTransitionQueue\")\n\n    /// A group to encapsulate the entire transition to a new app state.\n\n    private let appStateTransitionGroup = DispatchGroup()\n\n    /// Synchronously enqueues a transition to a new app state.\n    ///\n    /// The transition will only begin once a previous transition has completed.\n    ///\n    /// - Parameters:\n    ///     - appState: The new state to transition to.\n    ///     - completion: A block executed after the transition has completed.\n\n    private func enqueueTransition(to appState: AppState, completion: @escaping () -> Void = {}) {\n        // Perform the wait on a background queue so we don't cause a\n        // deadlock on the main queue.\n        appStateTransitionQueue.async { [weak self] in\n            guard let `self` = self else { return }\n\n            self.appStateTransitionGroup.wait()\n\n            DispatchQueue.main.async {\n                self.transition(to: appState, completion: completion)\n            }\n        }\n    }\n\n}\n\n// MARK: - AppStateCalculatorDelegate\nextension AppRootRouter: AppStateCalculatorDelegate {\n    func appStateCalculator(_: AppStateCalculator,\n                            didCalculate appState: AppState,\n                            completion: @escaping () -> Void) {\n        enqueueTransition(to: appState, completion: completion)\n    }\n\n    private func transition(to appState: AppState, completion: @escaping () -> Void) {\n        applicationWillTransition(to: appState)\n\n        resetAuthenticationCoordinatorIfNeeded(for: appState)\n\n        let completionBlock = { [weak self] in\n            completion()\n            self?.applicationDidTransition(to: appState)\n        }\n\n        switch appState {\n        case .blacklisted:\n            showBlacklisted(completion: completionBlock)\n        case .jailbroken:\n            showJailbroken(completion: completionBlock)\n        case .databaseFailure:\n            showDatabaseLoadingFailure(completion: completionBlock)\n        case .migrating:\n            showLaunchScreen(isLoading: true, completion: completionBlock)\n        case .unauthenticated(error: let error):\n            screenCurtain.delegate = nil\n            configureUnauthenticatedAppearance()\n            showUnauthenticatedFlow(error: error, completion: completionBlock)\n        case .authenticated(completedRegistration: let completedRegistration):\n            configureAuthenticatedAppearance()\n            executeAuthenticatedBlocks()\n            // TODO: [John] Avoid singleton.\n            screenCurtain.delegate = ZMUserSession.shared()\n            showAuthenticated(isComingFromRegistration: completedRegistration,\n                              completion: completionBlock)\n        case .headless:\n            showLaunchScreen(completion: completionBlock)\n        case .loading(account: let toAccount, from: let fromAccount):\n            showSkeleton(fromAccount: fromAccount,\n                         toAccount: toAccount,\n                         completion: completionBlock)\n        case .locked:\n            // TODO: [John] Avoid singleton.\n            screenCurtain.delegate = ZMUserSession.shared()\n            showAppLock(completion: completionBlock)\n        }\n    }\n\n    private func resetAuthenticationCoordinatorIfNeeded(for state: AppState) {\n        switch state {\n        case .authenticated:\n            authenticationCoordinator = nil\n        default:\n            break\n        }\n    }\n\n    func performWhenAuthenticated(_ block : @escaping () -> Void) {\n        if case .authenticated = appStateCalculator.appState {\n            block()\n        } else {\n            authenticatedBlocks.append(block)\n        }\n    }\n\n    func executeAuthenticatedBlocks() {\n        while !authenticatedBlocks.isEmpty {\n            authenticatedBlocks.removeFirst()()\n        }\n    }\n\n    func reload() {\n        enqueueTransition(to: .headless)\n        enqueueTransition(to: appStateCalculator.appState)\n    }\n}\n\nextension AppRootRouter {\n    // MARK: - Navigation Helpers\n    private func showInitial(launchOptions: LaunchOptions) {\n        enqueueTransition(to: .headless) { [weak self] in\n            Analytics.shared.tagEvent(\"app.open\")\n            self?.sessionManager.start(launchOptions: launchOptions)\n        }\n    }\n\n    private func showBlacklisted(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .blacklist)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showJailbroken(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .jailbroken)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showDatabaseLoadingFailure(completion: @escaping () -> Void) {\n        let blockerViewController = BlockerViewController(context: .databaseFailure,\n                                                          sessionManager: sessionManager)\n        rootViewController.set(childViewController: blockerViewController,\n                               completion: completion)\n    }\n\n    private func showLaunchScreen(isLoading: Bool = false, completion: @escaping () -> Void) {\n        let launchViewController = LaunchImageViewController()\n        isLoading\n            ? launchViewController.showLoadingScreen()\n            : ()\n        rootViewController.set(childViewController: launchViewController,\n                               completion: completion)\n    }\n\n    private func showUnauthenticatedFlow(error: NSError?, completion: @escaping () -> Void) {\n        // Only execute handle events if there is no current flow\n        guard\n            self.authenticationCoordinator == nil ||\n                error?.userSessionErrorCode == .addAccountRequested ||\n                error?.userSessionErrorCode == .accountDeleted,\n            let sessionManager = SessionManager.shared\n        else {\n            completion()\n            return\n        }\n\n        let navigationController = SpinnerCapableNavigationController(navigationBarClass: AuthenticationNavigationBar.self,\n                                                                      toolbarClass: nil)\n\n        authenticationCoordinator = AuthenticationCoordinator(presenter: navigationController,\n                                                              sessionManager: sessionManager,\n                                                              featureProvider: BuildSettingAuthenticationFeatureProvider(),\n                                                              statusProvider: AuthenticationStatusProvider())\n\n        guard let authenticationCoordinator = authenticationCoordinator else {\n            completion()\n            return\n        }\n\n        authenticationCoordinator.delegate = appStateCalculator\n        authenticationCoordinator.startAuthentication(with: error,\n                                                      numberOfAccounts: SessionManager.numberOfAccounts)\n\n        rootViewController.set(childViewController: navigationController,\n                               completion: completion)\n    }\n\n    private func showAuthenticated(isComingFromRegistration: Bool, completion: @escaping () -> Void) {\n        guard\n            let selectedAccount = SessionManager.shared?.accountManager.selectedAccount,\n            let authenticatedRouter = buildAuthenticatedRouter(account: selectedAccount,\n                                                               isComingFromRegistration: isComingFromRegistration)\n        else {\n            completion()\n            return\n        }\n\n        self.authenticatedRouter = authenticatedRouter\n\n        rootViewController.set(childViewController: authenticatedRouter.viewController,\n                               completion: completion)\n    }\n\n    private func showSkeleton(fromAccount: Account?, toAccount: Account, completion: @escaping () -> Void) {\n        let skeletonViewController = SkeletonViewController(from: fromAccount, to: toAccount)\n        rootViewController.set(childViewController: skeletonViewController,\n                               completion: completion)\n    }\n\n    private func showAppLock(completion: @escaping () -> Void) {\n        guard let session = ZMUserSession.shared() else { fatalError() }\n        rootViewController.set(childViewController: AppLockModule.build(session: session),\n                               completion: completion)\n    }\n\n    // MARK: - Helpers\n    private func configureUnauthenticatedAppearance() {\n        rootViewController.view.window?.tintColor = UIColor.Wire.primaryLabel\n        ValidatedTextField.appearance(whenContainedInInstancesOf: [AuthenticationStepController.self]).tintColor = UIColor.Team.activeButton\n    }\n\n    private func configureAuthenticatedAppearance() {\n        rootViewController.view.window?.tintColor = .accent()\n        UIColor.setAccentOverride(.undefined)\n    }\n\n    private func setupAnalyticsSharing() {\n        guard\n            appStateCalculator.wasUnauthenticated,\n            let selfUser = SelfUser.provider?.selfUser,\n            selfUser.isTeamMember\n        else {\n            return\n        }\n\n        TrackingManager.shared.disableCrashSharing = true\n        TrackingManager.shared.disableAnalyticsSharing = false\n        Analytics.shared.provider?.selfUser = selfUser\n    }\n\n    private func buildAuthenticatedRouter(account: Account, isComingFromRegistration: Bool) -> AuthenticatedRouter? {\n\n        let needToShowDataUsagePermissionDialog = appStateCalculator.wasUnauthenticated\n                                                    && !SelfUser.current.isTeamMember\n\n        return AuthenticatedRouter(rootViewController: rootViewController,\n                                   account: account,\n                                   selfUser: ZMUser.selfUser(),\n                                   isComingFromRegistration: isComingFromRegistration,\n                                   needToShowDataUsagePermissionDialog: needToShowDataUsagePermissionDialog)\n    }\n}\n\n// TO DO: THIS PART MUST BE CLENED UP\nextension AppRootRouter {\n    private func applicationWillTransition(to appState: AppState) {\n        appStateTransitionGroup.enter()\n        configureSelfUserProviderIfNeeded(for: appState)\n        configureColorScheme()\n    }\n\n    private func applicationDidTransition(to appState: AppState) {\n        if case .unauthenticated(let error) = appState {\n            presentAlertForDeletedAccountIfNeeded(error)\n        }\n\n        if case .authenticated = appState {\n            authenticatedRouter?.updateActiveCallPresentationState()\n\n            ZClientViewController.shared?.legalHoldDisclosureController?.discloseCurrentState(cause: .appOpen)\n        }\n\n        resetSelfUserProviderIfNeeded(for: appState)\n        urlActionRouter.openDeepLink(for: appState)\n        appStateTransitionGroup.leave()\n    }\n\n    private func resetSelfUserProviderIfNeeded(for appState: AppState) {\n        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }\n\n        switch appState {\n        case .authenticated: break\n        default:\n            SelfUser.provider = nil\n        }\n    }\n\n    private func configureSelfUserProviderIfNeeded(for appState: AppState) {\n        guard AppDelegate.shared.shouldConfigureSelfUserProvider else { return }\n\n        if case .authenticated = appState {\n            SelfUser.provider = ZMUserSession.shared()\n        }\n    }\n\n    private func configureColorScheme() {\n        let colorScheme = ColorScheme.default\n        colorScheme.accentColor = .accent()\n        colorScheme.variant = Settings.shared.colorSchemeVariant\n    }\n\n    private func presentAlertForDeletedAccountIfNeeded(_ error: NSError?) {\n        guard\n            error?.userSessionErrorCode == .accountDeleted,\n            let reason = error?.userInfo[ZMAccountDeletedReasonKey] as? ZMAccountDeletedReason\n        else {\n            return\n        }\n\n        switch reason {\n        case .sessionExpired:\n            rootViewController.presentAlertWithOKButton(\n                title: L10n.Localizable.AccountDeletedSessionExpiredAlert.title,\n                message: L10n.Localizable.AccountDeletedSessionExpiredAlert.message)\n\n        case .biometricPasscodeNotAvailable:\n            rootViewController.presentAlertWithOKButton(\n                title: L10n.Localizable.AccountDeletedMissingPasscodeAlert.title,\n                message: L10n.Localizable.AccountDeletedMissingPasscodeAlert.message)\n\n        case .databaseWiped:\n            let wipeCompletionViewController = WipeCompletionViewController()\n            wipeCompletionViewController.modalPresentationStyle = .fullScreen\n            rootViewController.present(wipeCompletionViewController, animated: true)\n\n        default:\n            break\n        }\n    }\n}\n\n// MARK: - URLActionRouterDelegete\nextension AppRootRouter: URLActionRouterDelegete {\n    func urlActionRouterWillShowCompanyLoginError() {\n        authenticationCoordinator?.cancelCompanyLogin()\n    }\n}\n\n// MARK: - ApplicationStateObserving\nextension AppRootRouter: ApplicationStateObserving {\n    func addObserverToken(_ token: NSObjectProtocol) {\n        observerTokens.append(token)\n    }\n\n    func applicationDidBecomeActive() {\n        updateOverlayWindowFrame()\n        teamMetadataRefresher.triggerRefreshIfNeeded()\n    }\n\n    func applicationDidEnterBackground() {\n        let unreadConversations = sessionManager.accountManager.totalUnreadCount\n        UIApplication.shared.applicationIconBadgeNumber = unreadConversations\n    }\n\n    func applicationWillEnterForeground() {\n        updateOverlayWindowFrame()\n    }\n\n    func updateOverlayWindowFrame(size: CGSize? = nil) {\n        if let size = size {\n            screenCurtain.frame.size = size\n        } else {\n            screenCurtain.frame = UIApplication.shared.keyWindow?.frame ?? UIScreen.main.bounds\n        }\n    }\n}\n\n// MARK: - ContentSizeCategoryObserving\nextension AppRootRouter: ContentSizeCategoryObserving {\n    func contentSizeCategoryDidChange() {\n        NSAttributedString.invalidateParagraphStyle()\n        NSAttributedString.invalidateMarkdownStyle()\n        ConversationListCell.invalidateCachedCellSize()\n        defaultFontScheme = FontScheme(contentSizeCategory: UIApplication.shared.preferredContentSizeCategory)\n        AppRootRouter.configureAppearance()\n    }\n\n    public static func configureAppearance() {\n        let navigationBarTitleBaselineOffset: CGFloat = 2.5\n\n        let attributes: [NSAttributedString.Key: Any] = [.font: UIFont.systemFont(ofSize: 11, weight: .semibold), .baselineOffset: navigationBarTitleBaselineOffset]\n        let barButtonItemAppearance = UIBarButtonItem.appearance(whenContainedInInstancesOf: [DefaultNavigationBar.self])\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .normal)\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .highlighted)\n        barButtonItemAppearance.setTitleTextAttributes(attributes, for: .disabled)\n    }\n}\n\n// MARK: - AudioPermissionsObserving\nextension AppRootRouter: AudioPermissionsObserving {\n    func userDidGrantAudioPermissions() {\n        sessionManager.updateCallNotificationStyleFromSettings()\n    }\n}\n"], "filenames": ["Wire-iOS/Generated/Strings+Generated.swift", "Wire-iOS/Resources/Base.lproj/Localizable.strings", "Wire-iOS/Sources/AppRootRouter.swift"], "buggy_code_start_loc": [58, 1806, 448], "buggy_code_end_loc": [58, 1806, 450], "fixing_code_start_loc": [59, 1807, 448], "fixing_code_end_loc": [65, 1810, 456], "type": "NVD-CWE-Other", "message": "Wire is an open source secure messenger. Users of Wire by Bund may bypass the mandatory encryption at rest feature by simply disabling their device passcode. Upon launching, the app will attempt to enable encryption at rest by generating encryption keys via the Secure Enclave, however it will fail silently if no device passcode is set. The user has no indication that encryption at rest is not active since the feature is hidden to them. This issue has been resolved in version 3.70", "other": {"cve": {"id": "CVE-2021-41094", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-04T19:15:08.377", "lastModified": "2022-08-12T16:49:44.387", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wire is an open source secure messenger. Users of Wire by Bund may bypass the mandatory encryption at rest feature by simply disabling their device passcode. Upon launching, the app will attempt to enable encryption at rest by generating encryption keys via the Secure Enclave, however it will fail silently if no device passcode is set. The user has no indication that encryption at rest is not active since the feature is hidden to them. This issue has been resolved in version 3.70"}, {"lang": "es", "value": "Wire es una mensajer\u00eda segura de c\u00f3digo abierto. Los usuarios de Wire by Bund pueden omitir la funcionalidad mandatory encryption at rest simplemente deshabilitando el c\u00f3digo de acceso de su dispositivo. Al iniciarse, la aplicaci\u00f3n intentar\u00e1 habilitar el cifrado en reposo al generar claves de cifrado por medio del Enclave Seguro, pero fallar\u00e1 silenciosamente si no se ha establecido un c\u00f3digo de acceso en el dispositivo. El usuario no presenta ninguna indicaci\u00f3n de que el cifrado en reposo no est\u00e1 activo, ya que la funcionalidad est\u00e1 oculta para \u00e9l. Este problema ha sido resuelto en la versi\u00f3n 3.70"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "PHYSICAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-668"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wire:wire:*:*:*:*:*:iphone_os:*:*", "versionStartIncluding": "3.68", "versionEndExcluding": "3.70", "matchCriteriaId": "406E9C9E-C863-4786-8E78-BA2DDE01FAAE"}]}]}], "references": [{"url": "https://github.com/wireapp/wire-ios/commit/5ba3eb180efc3fc795d095f9c84ae7f109b84746", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-h4m7-pr8h-j7rf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wireapp/wire-ios/commit/5ba3eb180efc3fc795d095f9c84ae7f109b84746"}}