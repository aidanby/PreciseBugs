{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Data.SQLite;\nusing System.IO;\n\nnamespace PTwoManage\n{\n    public sealed class Database\n    {\n        static readonly Database _instance = new Database();\n        public string[] userTableColumns = new string[9]{\"id\", \"username\", \"password\", \"name\", \"cprNumber\", \"phone\", \"email\", \"tag\", \"points\"};\n        public string[] ShiftTemplateTableColumns = new string[4] { \"id\", \"start\", \"end\", \"tag\" };\n        public string[] TagTableColumns = new string[1] { \"tag\" };\n        public string[] ShiftTableColumns = new string[6] { \"id\", \"start\", \"end\", \"tag\", \"employeeName\", \"weekNumber\" };\n        public string[] FreeTimeRequestColumns = new string[4] { \"start\", \"end\", \"text\", \"userID\" };\n        public string[] HolidayTableColumns = new string[1] { \"day\" };\n        SQLiteConnection m_dbConnection;\n        public List<string> readInfo = new List<string>();\n\n        public static Database Instance\n        {\n            get { return _instance; }\n        }\n\n        Database()\n        {\n            readInfo = new List<string>();\n\n            string file = AppDomain.CurrentDomain.BaseDirectory + \"MyDatabase.sqlite\";\n            if (!File.Exists(file))\n                SQLiteConnection.CreateFile(\"MyDatabase.sqlite\");\n            \n            m_dbConnection = new SQLiteConnection(\"Data Source=MyDatabase.sqlite;Version=3;\");\n            m_dbConnection.Open();\n\n            Execute(\"CREATE TABLE IF NOT EXISTS userTable (id INTEGER PRIMARY KEY AUTOINCREMENT, username VARCHAR(50), password VARCHAR(50), name VARCHAR(50), cprNumber VARCHAR(50), phone VARCHAR(50), email VARCHAR(50), tag VARCHAR(1000), points VARCHAR(1000))\");\n           // Execute(\"CREATE TABLE IF NOT EXISTS Shifts (id int NOT NULL, employeeId INT, weekNumber INT\");\n\t\t   \n            Execute(\"CREATE TABLE IF NOT EXISTS ShiftTable (id INTEGER PRIMARY KEY AUTOINCREMENT, start VARCHAR(50), end VARCHAR(50), tag VARCHAR(1000), employeeName VARCHAR(50), weekNumber INT)\");\n            Execute(\"CREATE TABLE IF NOT EXISTS ShiftTemplate (id INTEGER PRIMARY KEY AUTOINCREMENT, start VARCHAR(50), end VARCHAR(50), tag VARCHAR(1000))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS TagTable (tag VARCHAR(1000))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS FreeRequestTable (start VARCHAR(50), end VARCHAR(50), text VARCHAR(300), userID varchar(50))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS HolidayTable (day VARCHAR(50))\");\n\n        }\n\n        public void Execute(string sql)\n        {\n            SQLiteCommand command = new SQLiteCommand(sql, m_dbConnection);\n            command.ExecuteNonQuery();\n        }\n\n        public void Read(string sql, ref List<string> resultData, params string[] elements)\n        {\n            resultData.Clear();\n            SQLiteCommand command = new SQLiteCommand(sql, m_dbConnection);\n            SQLiteDataReader reader = command.ExecuteReader();\n            while(reader.Read())\n            {\n                string s = \"\";\n                foreach (string el in elements)\n                {\n                    s += reader[el] + \",\";\n                }\n                resultData.Add(s);\n            }\n        }\n\n        public string ListToString(List<string> inputList)\n        {\n            string returnString = string.Join(\":\", inputList.ToArray());\n            Console.WriteLine(returnString);\n            return (returnString);\n        }\n\n        public List<string> StringToList(string inputString)\n        {\n            List<string> outputList = inputString.Split(':').ToList();\n            return (outputList);\n        }\n\n        public void DatabaseInit()\n        {\n            Console.WriteLine(\"Database activated\");\n\t\t}\n    }\n}\n"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Data.SQLite;\nusing System.IO;\n\nnamespace PTwoManage\n{\n    public sealed class Database\n    {\n        static readonly Database _instance = new Database();\n        public string[] userTableColumns = new string[9]{\"id\", \"username\", \"password\", \"name\", \"cprNumber\", \"phone\", \"email\", \"tag\", \"points\"};\n        public string[] ShiftTemplateTableColumns = new string[4] { \"id\", \"start\", \"end\", \"tag\" };\n        public string[] TagTableColumns = new string[1] { \"tag\" };\n        public string[] ShiftTableColumns = new string[6] { \"id\", \"start\", \"end\", \"tag\", \"employeeName\", \"weekNumber\" };\n        public string[] FreeTimeRequestColumns = new string[4] { \"start\", \"end\", \"text\", \"userID\" };\n        public string[] HolidayTableColumns = new string[1] { \"day\" };\n        SQLiteConnection m_dbConnection;\n        public List<string> readInfo = new List<string>();\n\n        public static Database Instance\n        {\n            get { return _instance; }\n        }\n\n        Database()\n        {\n            readInfo = new List<string>();\n\n            string file = AppDomain.CurrentDomain.BaseDirectory + \"MyDatabase.sqlite\";\n            if (!File.Exists(file))\n                SQLiteConnection.CreateFile(\"MyDatabase.sqlite\");\n            \n            m_dbConnection = new SQLiteConnection(\"Data Source=MyDatabase.sqlite;Version=3;\");\n            m_dbConnection.Open();\n\n            Execute(\"CREATE TABLE IF NOT EXISTS userTable (id INTEGER PRIMARY KEY AUTOINCREMENT, username VARCHAR(50), password VARCHAR(50), name VARCHAR(50), cprNumber VARCHAR(50), phone VARCHAR(50), email VARCHAR(50), tag VARCHAR(1000), points VARCHAR(1000))\");\n           // Execute(\"CREATE TABLE IF NOT EXISTS Shifts (id int NOT NULL, employeeId INT, weekNumber INT\");\n\t\t   \n            Execute(\"CREATE TABLE IF NOT EXISTS ShiftTable (id INTEGER PRIMARY KEY AUTOINCREMENT, start VARCHAR(50), end VARCHAR(50), tag VARCHAR(1000), employeeName VARCHAR(50), weekNumber INT)\");\n            Execute(\"CREATE TABLE IF NOT EXISTS ShiftTemplate (id INTEGER PRIMARY KEY AUTOINCREMENT, start VARCHAR(50), end VARCHAR(50), tag VARCHAR(1000))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS TagTable (tag VARCHAR(1000))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS FreeRequestTable (start VARCHAR(50), end VARCHAR(50), text VARCHAR(300), userID varchar(50))\");\n            Execute(\"CREATE TABLE IF NOT EXISTS HolidayTable (day VARCHAR(50))\");\n\n        }\n\n        public void Execute(string sql)\n        {\n            if(sql.Contains(\";\"))\n            {\n                System.Windows.Forms.MessageBox.Show(\"Cannot execute database request, please do not use semicolon ';' anywhere\");\n                return;\n            }\n            SQLiteCommand command = new SQLiteCommand(sql, m_dbConnection);\n            command.ExecuteNonQuery();\n        }\n\n        public void Read(string sql, ref List<string> resultData, params string[] elements)\n        {\n            resultData.Clear();\n            SQLiteCommand command = new SQLiteCommand(sql, m_dbConnection);\n            SQLiteDataReader reader = command.ExecuteReader();\n            while(reader.Read())\n            {\n                string s = \"\";\n                foreach (string el in elements)\n                {\n                    s += reader[el] + \",\";\n                }\n                resultData.Add(s);\n            }\n        }\n\n        public string ListToString(List<string> inputList)\n        {\n            string returnString = string.Join(\":\", inputList.ToArray());\n            Console.WriteLine(returnString);\n            return (returnString);\n        }\n\n        public List<string> StringToList(string inputString)\n        {\n            List<string> outputList = inputString.Split(':').ToList();\n            return (outputList);\n        }\n\n        public void DatabaseInit()\n        {\n            Console.WriteLine(\"Database activated\");\n\t\t}\n    }\n}\n"], "filenames": ["PTwoManage/Database.cs"], "buggy_code_start_loc": [51], "buggy_code_end_loc": [51], "fixing_code_start_loc": [52], "fixing_code_end_loc": [57], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, was found in githuis P2Manage. This affects the function Execute of the file PTwoManage/Database.cs. The manipulation of the argument sql leads to sql injection. The name of the patch is 717380aba80002414f82d93c770035198b7858cc. It is recommended to apply a patch to fix this issue. The identifier VDB-218397 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10054", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T18:15:10.233", "lastModified": "2023-01-24T19:32:49.507", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, was found in githuis P2Manage. This affects the function Execute of the file PTwoManage/Database.cs. The manipulation of the argument sql leads to sql injection. The name of the patch is 717380aba80002414f82d93c770035198b7858cc. It is recommended to apply a patch to fix this issue. The identifier VDB-218397 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:p2manage_project:p2manage:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-05-15", "matchCriteriaId": "E8E70D29-3DAB-478C-B8D8-2A2159E2DAA5"}]}]}], "references": [{"url": "https://github.com/githuis/P2Manage/commit/717380aba80002414f82d93c770035198b7858cc", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218397", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218397", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/githuis/P2Manage/commit/717380aba80002414f82d93c770035198b7858cc"}}