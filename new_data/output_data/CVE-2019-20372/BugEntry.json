{"buggy_code": ["\n/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n#include <nginx.h>\n\n\nstatic ngx_int_t ngx_http_send_error_page(ngx_http_request_t *r,\n    ngx_http_err_page_t *err_page);\nstatic ngx_int_t ngx_http_send_special_response(ngx_http_request_t *r,\n    ngx_http_core_loc_conf_t *clcf, ngx_uint_t err);\nstatic ngx_int_t ngx_http_send_refresh(ngx_http_request_t *r);\n\n\nstatic u_char ngx_http_error_full_tail[] =\n\"<hr><center>\" NGINX_VER \"</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_error_build_tail[] =\n\"<hr><center>\" NGINX_VER_BUILD \"</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_error_tail[] =\n\"<hr><center>nginx</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_msie_padding[] =\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n;\n\n\nstatic u_char ngx_http_msie_refresh_head[] =\n\"<html><head><meta http-equiv=\\\"Refresh\\\" content=\\\"0; URL=\";\n\n\nstatic u_char ngx_http_msie_refresh_tail[] =\n\"\\\"></head><body></body></html>\" CRLF;\n\n\nstatic char ngx_http_error_301_page[] =\n\"<html>\" CRLF\n\"<head><title>301 Moved Permanently</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>301 Moved Permanently</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_302_page[] =\n\"<html>\" CRLF\n\"<head><title>302 Found</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>302 Found</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_303_page[] =\n\"<html>\" CRLF\n\"<head><title>303 See Other</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>303 See Other</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_307_page[] =\n\"<html>\" CRLF\n\"<head><title>307 Temporary Redirect</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>307 Temporary Redirect</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_308_page[] =\n\"<html>\" CRLF\n\"<head><title>308 Permanent Redirect</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>308 Permanent Redirect</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_400_page[] =\n\"<html>\" CRLF\n\"<head><title>400 Bad Request</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_401_page[] =\n\"<html>\" CRLF\n\"<head><title>401 Authorization Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>401 Authorization Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_402_page[] =\n\"<html>\" CRLF\n\"<head><title>402 Payment Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>402 Payment Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_403_page[] =\n\"<html>\" CRLF\n\"<head><title>403 Forbidden</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>403 Forbidden</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_404_page[] =\n\"<html>\" CRLF\n\"<head><title>404 Not Found</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>404 Not Found</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_405_page[] =\n\"<html>\" CRLF\n\"<head><title>405 Not Allowed</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>405 Not Allowed</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_406_page[] =\n\"<html>\" CRLF\n\"<head><title>406 Not Acceptable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>406 Not Acceptable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_408_page[] =\n\"<html>\" CRLF\n\"<head><title>408 Request Time-out</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>408 Request Time-out</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_409_page[] =\n\"<html>\" CRLF\n\"<head><title>409 Conflict</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>409 Conflict</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_410_page[] =\n\"<html>\" CRLF\n\"<head><title>410 Gone</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>410 Gone</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_411_page[] =\n\"<html>\" CRLF\n\"<head><title>411 Length Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>411 Length Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_412_page[] =\n\"<html>\" CRLF\n\"<head><title>412 Precondition Failed</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>412 Precondition Failed</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_413_page[] =\n\"<html>\" CRLF\n\"<head><title>413 Request Entity Too Large</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>413 Request Entity Too Large</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_414_page[] =\n\"<html>\" CRLF\n\"<head><title>414 Request-URI Too Large</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>414 Request-URI Too Large</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_415_page[] =\n\"<html>\" CRLF\n\"<head><title>415 Unsupported Media Type</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>415 Unsupported Media Type</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_416_page[] =\n\"<html>\" CRLF\n\"<head><title>416 Requested Range Not Satisfiable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>416 Requested Range Not Satisfiable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_421_page[] =\n\"<html>\" CRLF\n\"<head><title>421 Misdirected Request</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>421 Misdirected Request</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_429_page[] =\n\"<html>\" CRLF\n\"<head><title>429 Too Many Requests</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>429 Too Many Requests</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_494_page[] =\n\"<html>\" CRLF\n\"<head><title>400 Request Header Or Cookie Too Large</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>Request Header Or Cookie Too Large</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_495_page[] =\n\"<html>\" CRLF\n\"<head><title>400 The SSL certificate error</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>The SSL certificate error</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_496_page[] =\n\"<html>\" CRLF\n\"<head><title>400 No required SSL certificate was sent</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>No required SSL certificate was sent</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_497_page[] =\n\"<html>\" CRLF\n\"<head><title>400 The plain HTTP request was sent to HTTPS port</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>The plain HTTP request was sent to HTTPS port</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_500_page[] =\n\"<html>\" CRLF\n\"<head><title>500 Internal Server Error</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>500 Internal Server Error</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_501_page[] =\n\"<html>\" CRLF\n\"<head><title>501 Not Implemented</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>501 Not Implemented</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_502_page[] =\n\"<html>\" CRLF\n\"<head><title>502 Bad Gateway</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>502 Bad Gateway</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_503_page[] =\n\"<html>\" CRLF\n\"<head><title>503 Service Temporarily Unavailable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>503 Service Temporarily Unavailable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_504_page[] =\n\"<html>\" CRLF\n\"<head><title>504 Gateway Time-out</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>504 Gateway Time-out</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_505_page[] =\n\"<html>\" CRLF\n\"<head><title>505 HTTP Version Not Supported</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>505 HTTP Version Not Supported</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_507_page[] =\n\"<html>\" CRLF\n\"<head><title>507 Insufficient Storage</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>507 Insufficient Storage</h1></center>\" CRLF\n;\n\n\nstatic ngx_str_t ngx_http_error_pages[] = {\n\n    ngx_null_string,                     /* 201, 204 */\n\n#define NGX_HTTP_LAST_2XX  202\n#define NGX_HTTP_OFF_3XX   (NGX_HTTP_LAST_2XX - 201)\n\n    /* ngx_null_string, */               /* 300 */\n    ngx_string(ngx_http_error_301_page),\n    ngx_string(ngx_http_error_302_page),\n    ngx_string(ngx_http_error_303_page),\n    ngx_null_string,                     /* 304 */\n    ngx_null_string,                     /* 305 */\n    ngx_null_string,                     /* 306 */\n    ngx_string(ngx_http_error_307_page),\n    ngx_string(ngx_http_error_308_page),\n\n#define NGX_HTTP_LAST_3XX  309\n#define NGX_HTTP_OFF_4XX   (NGX_HTTP_LAST_3XX - 301 + NGX_HTTP_OFF_3XX)\n\n    ngx_string(ngx_http_error_400_page),\n    ngx_string(ngx_http_error_401_page),\n    ngx_string(ngx_http_error_402_page),\n    ngx_string(ngx_http_error_403_page),\n    ngx_string(ngx_http_error_404_page),\n    ngx_string(ngx_http_error_405_page),\n    ngx_string(ngx_http_error_406_page),\n    ngx_null_string,                     /* 407 */\n    ngx_string(ngx_http_error_408_page),\n    ngx_string(ngx_http_error_409_page),\n    ngx_string(ngx_http_error_410_page),\n    ngx_string(ngx_http_error_411_page),\n    ngx_string(ngx_http_error_412_page),\n    ngx_string(ngx_http_error_413_page),\n    ngx_string(ngx_http_error_414_page),\n    ngx_string(ngx_http_error_415_page),\n    ngx_string(ngx_http_error_416_page),\n    ngx_null_string,                     /* 417 */\n    ngx_null_string,                     /* 418 */\n    ngx_null_string,                     /* 419 */\n    ngx_null_string,                     /* 420 */\n    ngx_string(ngx_http_error_421_page),\n    ngx_null_string,                     /* 422 */\n    ngx_null_string,                     /* 423 */\n    ngx_null_string,                     /* 424 */\n    ngx_null_string,                     /* 425 */\n    ngx_null_string,                     /* 426 */\n    ngx_null_string,                     /* 427 */\n    ngx_null_string,                     /* 428 */\n    ngx_string(ngx_http_error_429_page),\n\n#define NGX_HTTP_LAST_4XX  430\n#define NGX_HTTP_OFF_5XX   (NGX_HTTP_LAST_4XX - 400 + NGX_HTTP_OFF_4XX)\n\n    ngx_string(ngx_http_error_494_page), /* 494, request header too large */\n    ngx_string(ngx_http_error_495_page), /* 495, https certificate error */\n    ngx_string(ngx_http_error_496_page), /* 496, https no certificate */\n    ngx_string(ngx_http_error_497_page), /* 497, http to https */\n    ngx_string(ngx_http_error_404_page), /* 498, canceled */\n    ngx_null_string,                     /* 499, client has closed connection */\n\n    ngx_string(ngx_http_error_500_page),\n    ngx_string(ngx_http_error_501_page),\n    ngx_string(ngx_http_error_502_page),\n    ngx_string(ngx_http_error_503_page),\n    ngx_string(ngx_http_error_504_page),\n    ngx_string(ngx_http_error_505_page),\n    ngx_null_string,                     /* 506 */\n    ngx_string(ngx_http_error_507_page)\n\n#define NGX_HTTP_LAST_5XX  508\n\n};\n\n\nngx_int_t\nngx_http_special_response_handler(ngx_http_request_t *r, ngx_int_t error)\n{\n    ngx_uint_t                 i, err;\n    ngx_http_err_page_t       *err_page;\n    ngx_http_core_loc_conf_t  *clcf;\n\n    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,\n                   \"http special response: %i, \\\"%V?%V\\\"\",\n                   error, &r->uri, &r->args);\n\n    r->err_status = error;\n\n    if (r->keepalive) {\n        switch (error) {\n            case NGX_HTTP_BAD_REQUEST:\n            case NGX_HTTP_REQUEST_ENTITY_TOO_LARGE:\n            case NGX_HTTP_REQUEST_URI_TOO_LARGE:\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n            case NGX_HTTP_INTERNAL_SERVER_ERROR:\n            case NGX_HTTP_NOT_IMPLEMENTED:\n                r->keepalive = 0;\n        }\n    }\n\n    if (r->lingering_close) {\n        switch (error) {\n            case NGX_HTTP_BAD_REQUEST:\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n                r->lingering_close = 0;\n        }\n    }\n\n    r->headers_out.content_type.len = 0;\n\n    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);\n\n    if (!r->error_page && clcf->error_pages && r->uri_changes != 0) {\n\n        if (clcf->recursive_error_pages == 0) {\n            r->error_page = 1;\n        }\n\n        err_page = clcf->error_pages->elts;\n\n        for (i = 0; i < clcf->error_pages->nelts; i++) {\n            if (err_page[i].status == error) {\n                return ngx_http_send_error_page(r, &err_page[i]);\n            }\n        }\n    }\n\n    r->expect_tested = 1;\n\n    if (ngx_http_discard_request_body(r) != NGX_OK) {\n        r->keepalive = 0;\n    }\n\n    if (clcf->msie_refresh\n        && r->headers_in.msie\n        && (error == NGX_HTTP_MOVED_PERMANENTLY\n            || error == NGX_HTTP_MOVED_TEMPORARILY))\n    {\n        return ngx_http_send_refresh(r);\n    }\n\n    if (error == NGX_HTTP_CREATED) {\n        /* 201 */\n        err = 0;\n\n    } else if (error == NGX_HTTP_NO_CONTENT) {\n        /* 204 */\n        err = 0;\n\n    } else if (error >= NGX_HTTP_MOVED_PERMANENTLY\n               && error < NGX_HTTP_LAST_3XX)\n    {\n        /* 3XX */\n        err = error - NGX_HTTP_MOVED_PERMANENTLY + NGX_HTTP_OFF_3XX;\n\n    } else if (error >= NGX_HTTP_BAD_REQUEST\n               && error < NGX_HTTP_LAST_4XX)\n    {\n        /* 4XX */\n        err = error - NGX_HTTP_BAD_REQUEST + NGX_HTTP_OFF_4XX;\n\n    } else if (error >= NGX_HTTP_NGINX_CODES\n               && error < NGX_HTTP_LAST_5XX)\n    {\n        /* 49X, 5XX */\n        err = error - NGX_HTTP_NGINX_CODES + NGX_HTTP_OFF_5XX;\n        switch (error) {\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n            case NGX_HTTP_REQUEST_HEADER_TOO_LARGE:\n                r->err_status = NGX_HTTP_BAD_REQUEST;\n        }\n\n    } else {\n        /* unknown code, zero body */\n        err = 0;\n    }\n\n    return ngx_http_send_special_response(r, clcf, err);\n}\n\n\nngx_int_t\nngx_http_filter_finalize_request(ngx_http_request_t *r, ngx_module_t *m,\n    ngx_int_t error)\n{\n    void       *ctx;\n    ngx_int_t   rc;\n\n    ngx_http_clean_header(r);\n\n    ctx = NULL;\n\n    if (m) {\n        ctx = r->ctx[m->ctx_index];\n    }\n\n    /* clear the modules contexts */\n    ngx_memzero(r->ctx, sizeof(void *) * ngx_http_max_module);\n\n    if (m) {\n        r->ctx[m->ctx_index] = ctx;\n    }\n\n    r->filter_finalize = 1;\n\n    rc = ngx_http_special_response_handler(r, error);\n\n    /* NGX_ERROR resets any pending data */\n\n    switch (rc) {\n\n    case NGX_OK:\n    case NGX_DONE:\n        return NGX_ERROR;\n\n    default:\n        return rc;\n    }\n}\n\n\nvoid\nngx_http_clean_header(ngx_http_request_t *r)\n{\n    ngx_memzero(&r->headers_out.status,\n                sizeof(ngx_http_headers_out_t)\n                    - offsetof(ngx_http_headers_out_t, status));\n\n    r->headers_out.headers.part.nelts = 0;\n    r->headers_out.headers.part.next = NULL;\n    r->headers_out.headers.last = &r->headers_out.headers.part;\n\n    r->headers_out.content_length_n = -1;\n    r->headers_out.last_modified_time = -1;\n}\n\n\nstatic ngx_int_t\nngx_http_send_error_page(ngx_http_request_t *r, ngx_http_err_page_t *err_page)\n{\n    ngx_int_t                  overwrite;\n    ngx_str_t                  uri, args;\n    ngx_table_elt_t           *location;\n    ngx_http_core_loc_conf_t  *clcf;\n\n    overwrite = err_page->overwrite;\n\n    if (overwrite && overwrite != NGX_HTTP_OK) {\n        r->expect_tested = 1;\n    }\n\n    if (overwrite >= 0) {\n        r->err_status = overwrite;\n    }\n\n    if (ngx_http_complex_value(r, &err_page->value, &uri) != NGX_OK) {\n        return NGX_ERROR;\n    }\n\n    if (uri.len && uri.data[0] == '/') {\n\n        if (err_page->value.lengths) {\n            ngx_http_split_args(r, &uri, &args);\n\n        } else {\n            args = err_page->args;\n        }\n\n        if (r->method != NGX_HTTP_HEAD) {\n            r->method = NGX_HTTP_GET;\n            r->method_name = ngx_http_core_get_method;\n        }\n\n        return ngx_http_internal_redirect(r, &uri, &args);\n    }\n\n    if (uri.len && uri.data[0] == '@') {\n        return ngx_http_named_location(r, &uri);\n    }\n\n    location = ngx_list_push(&r->headers_out.headers);\n\n    if (location == NULL) {\n        return NGX_ERROR;\n    }\n\n    if (overwrite != NGX_HTTP_MOVED_PERMANENTLY\n        && overwrite != NGX_HTTP_MOVED_TEMPORARILY\n        && overwrite != NGX_HTTP_SEE_OTHER\n        && overwrite != NGX_HTTP_TEMPORARY_REDIRECT\n        && overwrite != NGX_HTTP_PERMANENT_REDIRECT)\n    {\n        r->err_status = NGX_HTTP_MOVED_TEMPORARILY;\n    }\n\n    location->hash = 1;\n    ngx_str_set(&location->key, \"Location\");\n    location->value = uri;\n\n    ngx_http_clear_location(r);\n\n    r->headers_out.location = location;\n\n    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);\n\n    if (clcf->msie_refresh && r->headers_in.msie) {\n        return ngx_http_send_refresh(r);\n    }\n\n    return ngx_http_send_special_response(r, clcf, r->err_status\n                                                   - NGX_HTTP_MOVED_PERMANENTLY\n                                                   + NGX_HTTP_OFF_3XX);\n}\n\n\nstatic ngx_int_t\nngx_http_send_special_response(ngx_http_request_t *r,\n    ngx_http_core_loc_conf_t *clcf, ngx_uint_t err)\n{\n    u_char       *tail;\n    size_t        len;\n    ngx_int_t     rc;\n    ngx_buf_t    *b;\n    ngx_uint_t    msie_padding;\n    ngx_chain_t   out[3];\n\n    if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {\n        len = sizeof(ngx_http_error_full_tail) - 1;\n        tail = ngx_http_error_full_tail;\n\n    } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {\n        len = sizeof(ngx_http_error_build_tail) - 1;\n        tail = ngx_http_error_build_tail;\n\n    } else {\n        len = sizeof(ngx_http_error_tail) - 1;\n        tail = ngx_http_error_tail;\n    }\n\n    msie_padding = 0;\n\n    if (ngx_http_error_pages[err].len) {\n        r->headers_out.content_length_n = ngx_http_error_pages[err].len + len;\n        if (clcf->msie_padding\n            && (r->headers_in.msie || r->headers_in.chrome)\n            && r->http_version >= NGX_HTTP_VERSION_10\n            && err >= NGX_HTTP_OFF_4XX)\n        {\n            r->headers_out.content_length_n +=\n                                         sizeof(ngx_http_msie_padding) - 1;\n            msie_padding = 1;\n        }\n\n        r->headers_out.content_type_len = sizeof(\"text/html\") - 1;\n        ngx_str_set(&r->headers_out.content_type, \"text/html\");\n        r->headers_out.content_type_lowcase = NULL;\n\n    } else {\n        r->headers_out.content_length_n = 0;\n    }\n\n    if (r->headers_out.content_length) {\n        r->headers_out.content_length->hash = 0;\n        r->headers_out.content_length = NULL;\n    }\n\n    ngx_http_clear_accept_ranges(r);\n    ngx_http_clear_last_modified(r);\n    ngx_http_clear_etag(r);\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || r->header_only) {\n        return rc;\n    }\n\n    if (ngx_http_error_pages[err].len == 0) {\n        return ngx_http_send_special(r, NGX_HTTP_LAST);\n    }\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->memory = 1;\n    b->pos = ngx_http_error_pages[err].data;\n    b->last = ngx_http_error_pages[err].data + ngx_http_error_pages[err].len;\n\n    out[0].buf = b;\n    out[0].next = &out[1];\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->memory = 1;\n\n    b->pos = tail;\n    b->last = tail + len;\n\n    out[1].buf = b;\n    out[1].next = NULL;\n\n    if (msie_padding) {\n        b = ngx_calloc_buf(r->pool);\n        if (b == NULL) {\n            return NGX_ERROR;\n        }\n\n        b->memory = 1;\n        b->pos = ngx_http_msie_padding;\n        b->last = ngx_http_msie_padding + sizeof(ngx_http_msie_padding) - 1;\n\n        out[1].next = &out[2];\n        out[2].buf = b;\n        out[2].next = NULL;\n    }\n\n    if (r == r->main) {\n        b->last_buf = 1;\n    }\n\n    b->last_in_chain = 1;\n\n    return ngx_http_output_filter(r, &out[0]);\n}\n\n\nstatic ngx_int_t\nngx_http_send_refresh(ngx_http_request_t *r)\n{\n    u_char       *p, *location;\n    size_t        len, size;\n    uintptr_t     escape;\n    ngx_int_t     rc;\n    ngx_buf_t    *b;\n    ngx_chain_t   out;\n\n    len = r->headers_out.location->value.len;\n    location = r->headers_out.location->value.data;\n\n    escape = 2 * ngx_escape_uri(NULL, location, len, NGX_ESCAPE_REFRESH);\n\n    size = sizeof(ngx_http_msie_refresh_head) - 1\n           + escape + len\n           + sizeof(ngx_http_msie_refresh_tail) - 1;\n\n    r->err_status = NGX_HTTP_OK;\n\n    r->headers_out.content_type_len = sizeof(\"text/html\") - 1;\n    ngx_str_set(&r->headers_out.content_type, \"text/html\");\n    r->headers_out.content_type_lowcase = NULL;\n\n    r->headers_out.location->hash = 0;\n    r->headers_out.location = NULL;\n\n    r->headers_out.content_length_n = size;\n\n    if (r->headers_out.content_length) {\n        r->headers_out.content_length->hash = 0;\n        r->headers_out.content_length = NULL;\n    }\n\n    ngx_http_clear_accept_ranges(r);\n    ngx_http_clear_last_modified(r);\n    ngx_http_clear_etag(r);\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || r->header_only) {\n        return rc;\n    }\n\n    b = ngx_create_temp_buf(r->pool, size);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    p = ngx_cpymem(b->pos, ngx_http_msie_refresh_head,\n                   sizeof(ngx_http_msie_refresh_head) - 1);\n\n    if (escape == 0) {\n        p = ngx_cpymem(p, location, len);\n\n    } else {\n        p = (u_char *) ngx_escape_uri(p, location, len, NGX_ESCAPE_REFRESH);\n    }\n\n    b->last = ngx_cpymem(p, ngx_http_msie_refresh_tail,\n                         sizeof(ngx_http_msie_refresh_tail) - 1);\n\n    b->last_buf = (r == r->main) ? 1 : 0;\n    b->last_in_chain = 1;\n\n    out.buf = b;\n    out.next = NULL;\n\n    return ngx_http_output_filter(r, &out);\n}\n"], "fixing_code": ["\n/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#include <ngx_config.h>\n#include <ngx_core.h>\n#include <ngx_http.h>\n#include <nginx.h>\n\n\nstatic ngx_int_t ngx_http_send_error_page(ngx_http_request_t *r,\n    ngx_http_err_page_t *err_page);\nstatic ngx_int_t ngx_http_send_special_response(ngx_http_request_t *r,\n    ngx_http_core_loc_conf_t *clcf, ngx_uint_t err);\nstatic ngx_int_t ngx_http_send_refresh(ngx_http_request_t *r);\n\n\nstatic u_char ngx_http_error_full_tail[] =\n\"<hr><center>\" NGINX_VER \"</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_error_build_tail[] =\n\"<hr><center>\" NGINX_VER_BUILD \"</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_error_tail[] =\n\"<hr><center>nginx</center>\" CRLF\n\"</body>\" CRLF\n\"</html>\" CRLF\n;\n\n\nstatic u_char ngx_http_msie_padding[] =\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n\"<!-- a padding to disable MSIE and Chrome friendly error page -->\" CRLF\n;\n\n\nstatic u_char ngx_http_msie_refresh_head[] =\n\"<html><head><meta http-equiv=\\\"Refresh\\\" content=\\\"0; URL=\";\n\n\nstatic u_char ngx_http_msie_refresh_tail[] =\n\"\\\"></head><body></body></html>\" CRLF;\n\n\nstatic char ngx_http_error_301_page[] =\n\"<html>\" CRLF\n\"<head><title>301 Moved Permanently</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>301 Moved Permanently</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_302_page[] =\n\"<html>\" CRLF\n\"<head><title>302 Found</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>302 Found</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_303_page[] =\n\"<html>\" CRLF\n\"<head><title>303 See Other</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>303 See Other</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_307_page[] =\n\"<html>\" CRLF\n\"<head><title>307 Temporary Redirect</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>307 Temporary Redirect</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_308_page[] =\n\"<html>\" CRLF\n\"<head><title>308 Permanent Redirect</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>308 Permanent Redirect</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_400_page[] =\n\"<html>\" CRLF\n\"<head><title>400 Bad Request</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_401_page[] =\n\"<html>\" CRLF\n\"<head><title>401 Authorization Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>401 Authorization Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_402_page[] =\n\"<html>\" CRLF\n\"<head><title>402 Payment Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>402 Payment Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_403_page[] =\n\"<html>\" CRLF\n\"<head><title>403 Forbidden</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>403 Forbidden</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_404_page[] =\n\"<html>\" CRLF\n\"<head><title>404 Not Found</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>404 Not Found</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_405_page[] =\n\"<html>\" CRLF\n\"<head><title>405 Not Allowed</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>405 Not Allowed</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_406_page[] =\n\"<html>\" CRLF\n\"<head><title>406 Not Acceptable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>406 Not Acceptable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_408_page[] =\n\"<html>\" CRLF\n\"<head><title>408 Request Time-out</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>408 Request Time-out</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_409_page[] =\n\"<html>\" CRLF\n\"<head><title>409 Conflict</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>409 Conflict</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_410_page[] =\n\"<html>\" CRLF\n\"<head><title>410 Gone</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>410 Gone</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_411_page[] =\n\"<html>\" CRLF\n\"<head><title>411 Length Required</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>411 Length Required</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_412_page[] =\n\"<html>\" CRLF\n\"<head><title>412 Precondition Failed</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>412 Precondition Failed</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_413_page[] =\n\"<html>\" CRLF\n\"<head><title>413 Request Entity Too Large</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>413 Request Entity Too Large</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_414_page[] =\n\"<html>\" CRLF\n\"<head><title>414 Request-URI Too Large</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>414 Request-URI Too Large</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_415_page[] =\n\"<html>\" CRLF\n\"<head><title>415 Unsupported Media Type</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>415 Unsupported Media Type</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_416_page[] =\n\"<html>\" CRLF\n\"<head><title>416 Requested Range Not Satisfiable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>416 Requested Range Not Satisfiable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_421_page[] =\n\"<html>\" CRLF\n\"<head><title>421 Misdirected Request</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>421 Misdirected Request</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_429_page[] =\n\"<html>\" CRLF\n\"<head><title>429 Too Many Requests</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>429 Too Many Requests</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_494_page[] =\n\"<html>\" CRLF\n\"<head><title>400 Request Header Or Cookie Too Large</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>Request Header Or Cookie Too Large</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_495_page[] =\n\"<html>\" CRLF\n\"<head><title>400 The SSL certificate error</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>The SSL certificate error</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_496_page[] =\n\"<html>\" CRLF\n\"<head><title>400 No required SSL certificate was sent</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>No required SSL certificate was sent</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_497_page[] =\n\"<html>\" CRLF\n\"<head><title>400 The plain HTTP request was sent to HTTPS port</title></head>\"\nCRLF\n\"<body>\" CRLF\n\"<center><h1>400 Bad Request</h1></center>\" CRLF\n\"<center>The plain HTTP request was sent to HTTPS port</center>\" CRLF\n;\n\n\nstatic char ngx_http_error_500_page[] =\n\"<html>\" CRLF\n\"<head><title>500 Internal Server Error</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>500 Internal Server Error</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_501_page[] =\n\"<html>\" CRLF\n\"<head><title>501 Not Implemented</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>501 Not Implemented</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_502_page[] =\n\"<html>\" CRLF\n\"<head><title>502 Bad Gateway</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>502 Bad Gateway</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_503_page[] =\n\"<html>\" CRLF\n\"<head><title>503 Service Temporarily Unavailable</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>503 Service Temporarily Unavailable</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_504_page[] =\n\"<html>\" CRLF\n\"<head><title>504 Gateway Time-out</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>504 Gateway Time-out</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_505_page[] =\n\"<html>\" CRLF\n\"<head><title>505 HTTP Version Not Supported</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>505 HTTP Version Not Supported</h1></center>\" CRLF\n;\n\n\nstatic char ngx_http_error_507_page[] =\n\"<html>\" CRLF\n\"<head><title>507 Insufficient Storage</title></head>\" CRLF\n\"<body>\" CRLF\n\"<center><h1>507 Insufficient Storage</h1></center>\" CRLF\n;\n\n\nstatic ngx_str_t ngx_http_error_pages[] = {\n\n    ngx_null_string,                     /* 201, 204 */\n\n#define NGX_HTTP_LAST_2XX  202\n#define NGX_HTTP_OFF_3XX   (NGX_HTTP_LAST_2XX - 201)\n\n    /* ngx_null_string, */               /* 300 */\n    ngx_string(ngx_http_error_301_page),\n    ngx_string(ngx_http_error_302_page),\n    ngx_string(ngx_http_error_303_page),\n    ngx_null_string,                     /* 304 */\n    ngx_null_string,                     /* 305 */\n    ngx_null_string,                     /* 306 */\n    ngx_string(ngx_http_error_307_page),\n    ngx_string(ngx_http_error_308_page),\n\n#define NGX_HTTP_LAST_3XX  309\n#define NGX_HTTP_OFF_4XX   (NGX_HTTP_LAST_3XX - 301 + NGX_HTTP_OFF_3XX)\n\n    ngx_string(ngx_http_error_400_page),\n    ngx_string(ngx_http_error_401_page),\n    ngx_string(ngx_http_error_402_page),\n    ngx_string(ngx_http_error_403_page),\n    ngx_string(ngx_http_error_404_page),\n    ngx_string(ngx_http_error_405_page),\n    ngx_string(ngx_http_error_406_page),\n    ngx_null_string,                     /* 407 */\n    ngx_string(ngx_http_error_408_page),\n    ngx_string(ngx_http_error_409_page),\n    ngx_string(ngx_http_error_410_page),\n    ngx_string(ngx_http_error_411_page),\n    ngx_string(ngx_http_error_412_page),\n    ngx_string(ngx_http_error_413_page),\n    ngx_string(ngx_http_error_414_page),\n    ngx_string(ngx_http_error_415_page),\n    ngx_string(ngx_http_error_416_page),\n    ngx_null_string,                     /* 417 */\n    ngx_null_string,                     /* 418 */\n    ngx_null_string,                     /* 419 */\n    ngx_null_string,                     /* 420 */\n    ngx_string(ngx_http_error_421_page),\n    ngx_null_string,                     /* 422 */\n    ngx_null_string,                     /* 423 */\n    ngx_null_string,                     /* 424 */\n    ngx_null_string,                     /* 425 */\n    ngx_null_string,                     /* 426 */\n    ngx_null_string,                     /* 427 */\n    ngx_null_string,                     /* 428 */\n    ngx_string(ngx_http_error_429_page),\n\n#define NGX_HTTP_LAST_4XX  430\n#define NGX_HTTP_OFF_5XX   (NGX_HTTP_LAST_4XX - 400 + NGX_HTTP_OFF_4XX)\n\n    ngx_string(ngx_http_error_494_page), /* 494, request header too large */\n    ngx_string(ngx_http_error_495_page), /* 495, https certificate error */\n    ngx_string(ngx_http_error_496_page), /* 496, https no certificate */\n    ngx_string(ngx_http_error_497_page), /* 497, http to https */\n    ngx_string(ngx_http_error_404_page), /* 498, canceled */\n    ngx_null_string,                     /* 499, client has closed connection */\n\n    ngx_string(ngx_http_error_500_page),\n    ngx_string(ngx_http_error_501_page),\n    ngx_string(ngx_http_error_502_page),\n    ngx_string(ngx_http_error_503_page),\n    ngx_string(ngx_http_error_504_page),\n    ngx_string(ngx_http_error_505_page),\n    ngx_null_string,                     /* 506 */\n    ngx_string(ngx_http_error_507_page)\n\n#define NGX_HTTP_LAST_5XX  508\n\n};\n\n\nngx_int_t\nngx_http_special_response_handler(ngx_http_request_t *r, ngx_int_t error)\n{\n    ngx_uint_t                 i, err;\n    ngx_http_err_page_t       *err_page;\n    ngx_http_core_loc_conf_t  *clcf;\n\n    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,\n                   \"http special response: %i, \\\"%V?%V\\\"\",\n                   error, &r->uri, &r->args);\n\n    r->err_status = error;\n\n    if (r->keepalive) {\n        switch (error) {\n            case NGX_HTTP_BAD_REQUEST:\n            case NGX_HTTP_REQUEST_ENTITY_TOO_LARGE:\n            case NGX_HTTP_REQUEST_URI_TOO_LARGE:\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n            case NGX_HTTP_INTERNAL_SERVER_ERROR:\n            case NGX_HTTP_NOT_IMPLEMENTED:\n                r->keepalive = 0;\n        }\n    }\n\n    if (r->lingering_close) {\n        switch (error) {\n            case NGX_HTTP_BAD_REQUEST:\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n                r->lingering_close = 0;\n        }\n    }\n\n    r->headers_out.content_type.len = 0;\n\n    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);\n\n    if (!r->error_page && clcf->error_pages && r->uri_changes != 0) {\n\n        if (clcf->recursive_error_pages == 0) {\n            r->error_page = 1;\n        }\n\n        err_page = clcf->error_pages->elts;\n\n        for (i = 0; i < clcf->error_pages->nelts; i++) {\n            if (err_page[i].status == error) {\n                return ngx_http_send_error_page(r, &err_page[i]);\n            }\n        }\n    }\n\n    r->expect_tested = 1;\n\n    if (ngx_http_discard_request_body(r) != NGX_OK) {\n        r->keepalive = 0;\n    }\n\n    if (clcf->msie_refresh\n        && r->headers_in.msie\n        && (error == NGX_HTTP_MOVED_PERMANENTLY\n            || error == NGX_HTTP_MOVED_TEMPORARILY))\n    {\n        return ngx_http_send_refresh(r);\n    }\n\n    if (error == NGX_HTTP_CREATED) {\n        /* 201 */\n        err = 0;\n\n    } else if (error == NGX_HTTP_NO_CONTENT) {\n        /* 204 */\n        err = 0;\n\n    } else if (error >= NGX_HTTP_MOVED_PERMANENTLY\n               && error < NGX_HTTP_LAST_3XX)\n    {\n        /* 3XX */\n        err = error - NGX_HTTP_MOVED_PERMANENTLY + NGX_HTTP_OFF_3XX;\n\n    } else if (error >= NGX_HTTP_BAD_REQUEST\n               && error < NGX_HTTP_LAST_4XX)\n    {\n        /* 4XX */\n        err = error - NGX_HTTP_BAD_REQUEST + NGX_HTTP_OFF_4XX;\n\n    } else if (error >= NGX_HTTP_NGINX_CODES\n               && error < NGX_HTTP_LAST_5XX)\n    {\n        /* 49X, 5XX */\n        err = error - NGX_HTTP_NGINX_CODES + NGX_HTTP_OFF_5XX;\n        switch (error) {\n            case NGX_HTTP_TO_HTTPS:\n            case NGX_HTTPS_CERT_ERROR:\n            case NGX_HTTPS_NO_CERT:\n            case NGX_HTTP_REQUEST_HEADER_TOO_LARGE:\n                r->err_status = NGX_HTTP_BAD_REQUEST;\n        }\n\n    } else {\n        /* unknown code, zero body */\n        err = 0;\n    }\n\n    return ngx_http_send_special_response(r, clcf, err);\n}\n\n\nngx_int_t\nngx_http_filter_finalize_request(ngx_http_request_t *r, ngx_module_t *m,\n    ngx_int_t error)\n{\n    void       *ctx;\n    ngx_int_t   rc;\n\n    ngx_http_clean_header(r);\n\n    ctx = NULL;\n\n    if (m) {\n        ctx = r->ctx[m->ctx_index];\n    }\n\n    /* clear the modules contexts */\n    ngx_memzero(r->ctx, sizeof(void *) * ngx_http_max_module);\n\n    if (m) {\n        r->ctx[m->ctx_index] = ctx;\n    }\n\n    r->filter_finalize = 1;\n\n    rc = ngx_http_special_response_handler(r, error);\n\n    /* NGX_ERROR resets any pending data */\n\n    switch (rc) {\n\n    case NGX_OK:\n    case NGX_DONE:\n        return NGX_ERROR;\n\n    default:\n        return rc;\n    }\n}\n\n\nvoid\nngx_http_clean_header(ngx_http_request_t *r)\n{\n    ngx_memzero(&r->headers_out.status,\n                sizeof(ngx_http_headers_out_t)\n                    - offsetof(ngx_http_headers_out_t, status));\n\n    r->headers_out.headers.part.nelts = 0;\n    r->headers_out.headers.part.next = NULL;\n    r->headers_out.headers.last = &r->headers_out.headers.part;\n\n    r->headers_out.content_length_n = -1;\n    r->headers_out.last_modified_time = -1;\n}\n\n\nstatic ngx_int_t\nngx_http_send_error_page(ngx_http_request_t *r, ngx_http_err_page_t *err_page)\n{\n    ngx_int_t                  overwrite;\n    ngx_str_t                  uri, args;\n    ngx_table_elt_t           *location;\n    ngx_http_core_loc_conf_t  *clcf;\n\n    overwrite = err_page->overwrite;\n\n    if (overwrite && overwrite != NGX_HTTP_OK) {\n        r->expect_tested = 1;\n    }\n\n    if (overwrite >= 0) {\n        r->err_status = overwrite;\n    }\n\n    if (ngx_http_complex_value(r, &err_page->value, &uri) != NGX_OK) {\n        return NGX_ERROR;\n    }\n\n    if (uri.len && uri.data[0] == '/') {\n\n        if (err_page->value.lengths) {\n            ngx_http_split_args(r, &uri, &args);\n\n        } else {\n            args = err_page->args;\n        }\n\n        if (r->method != NGX_HTTP_HEAD) {\n            r->method = NGX_HTTP_GET;\n            r->method_name = ngx_http_core_get_method;\n        }\n\n        return ngx_http_internal_redirect(r, &uri, &args);\n    }\n\n    if (uri.len && uri.data[0] == '@') {\n        return ngx_http_named_location(r, &uri);\n    }\n\n    r->expect_tested = 1;\n\n    if (ngx_http_discard_request_body(r) != NGX_OK) {\n        r->keepalive = 0;\n    }\n\n    location = ngx_list_push(&r->headers_out.headers);\n\n    if (location == NULL) {\n        return NGX_ERROR;\n    }\n\n    if (overwrite != NGX_HTTP_MOVED_PERMANENTLY\n        && overwrite != NGX_HTTP_MOVED_TEMPORARILY\n        && overwrite != NGX_HTTP_SEE_OTHER\n        && overwrite != NGX_HTTP_TEMPORARY_REDIRECT\n        && overwrite != NGX_HTTP_PERMANENT_REDIRECT)\n    {\n        r->err_status = NGX_HTTP_MOVED_TEMPORARILY;\n    }\n\n    location->hash = 1;\n    ngx_str_set(&location->key, \"Location\");\n    location->value = uri;\n\n    ngx_http_clear_location(r);\n\n    r->headers_out.location = location;\n\n    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);\n\n    if (clcf->msie_refresh && r->headers_in.msie) {\n        return ngx_http_send_refresh(r);\n    }\n\n    return ngx_http_send_special_response(r, clcf, r->err_status\n                                                   - NGX_HTTP_MOVED_PERMANENTLY\n                                                   + NGX_HTTP_OFF_3XX);\n}\n\n\nstatic ngx_int_t\nngx_http_send_special_response(ngx_http_request_t *r,\n    ngx_http_core_loc_conf_t *clcf, ngx_uint_t err)\n{\n    u_char       *tail;\n    size_t        len;\n    ngx_int_t     rc;\n    ngx_buf_t    *b;\n    ngx_uint_t    msie_padding;\n    ngx_chain_t   out[3];\n\n    if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {\n        len = sizeof(ngx_http_error_full_tail) - 1;\n        tail = ngx_http_error_full_tail;\n\n    } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {\n        len = sizeof(ngx_http_error_build_tail) - 1;\n        tail = ngx_http_error_build_tail;\n\n    } else {\n        len = sizeof(ngx_http_error_tail) - 1;\n        tail = ngx_http_error_tail;\n    }\n\n    msie_padding = 0;\n\n    if (ngx_http_error_pages[err].len) {\n        r->headers_out.content_length_n = ngx_http_error_pages[err].len + len;\n        if (clcf->msie_padding\n            && (r->headers_in.msie || r->headers_in.chrome)\n            && r->http_version >= NGX_HTTP_VERSION_10\n            && err >= NGX_HTTP_OFF_4XX)\n        {\n            r->headers_out.content_length_n +=\n                                         sizeof(ngx_http_msie_padding) - 1;\n            msie_padding = 1;\n        }\n\n        r->headers_out.content_type_len = sizeof(\"text/html\") - 1;\n        ngx_str_set(&r->headers_out.content_type, \"text/html\");\n        r->headers_out.content_type_lowcase = NULL;\n\n    } else {\n        r->headers_out.content_length_n = 0;\n    }\n\n    if (r->headers_out.content_length) {\n        r->headers_out.content_length->hash = 0;\n        r->headers_out.content_length = NULL;\n    }\n\n    ngx_http_clear_accept_ranges(r);\n    ngx_http_clear_last_modified(r);\n    ngx_http_clear_etag(r);\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || r->header_only) {\n        return rc;\n    }\n\n    if (ngx_http_error_pages[err].len == 0) {\n        return ngx_http_send_special(r, NGX_HTTP_LAST);\n    }\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->memory = 1;\n    b->pos = ngx_http_error_pages[err].data;\n    b->last = ngx_http_error_pages[err].data + ngx_http_error_pages[err].len;\n\n    out[0].buf = b;\n    out[0].next = &out[1];\n\n    b = ngx_calloc_buf(r->pool);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    b->memory = 1;\n\n    b->pos = tail;\n    b->last = tail + len;\n\n    out[1].buf = b;\n    out[1].next = NULL;\n\n    if (msie_padding) {\n        b = ngx_calloc_buf(r->pool);\n        if (b == NULL) {\n            return NGX_ERROR;\n        }\n\n        b->memory = 1;\n        b->pos = ngx_http_msie_padding;\n        b->last = ngx_http_msie_padding + sizeof(ngx_http_msie_padding) - 1;\n\n        out[1].next = &out[2];\n        out[2].buf = b;\n        out[2].next = NULL;\n    }\n\n    if (r == r->main) {\n        b->last_buf = 1;\n    }\n\n    b->last_in_chain = 1;\n\n    return ngx_http_output_filter(r, &out[0]);\n}\n\n\nstatic ngx_int_t\nngx_http_send_refresh(ngx_http_request_t *r)\n{\n    u_char       *p, *location;\n    size_t        len, size;\n    uintptr_t     escape;\n    ngx_int_t     rc;\n    ngx_buf_t    *b;\n    ngx_chain_t   out;\n\n    len = r->headers_out.location->value.len;\n    location = r->headers_out.location->value.data;\n\n    escape = 2 * ngx_escape_uri(NULL, location, len, NGX_ESCAPE_REFRESH);\n\n    size = sizeof(ngx_http_msie_refresh_head) - 1\n           + escape + len\n           + sizeof(ngx_http_msie_refresh_tail) - 1;\n\n    r->err_status = NGX_HTTP_OK;\n\n    r->headers_out.content_type_len = sizeof(\"text/html\") - 1;\n    ngx_str_set(&r->headers_out.content_type, \"text/html\");\n    r->headers_out.content_type_lowcase = NULL;\n\n    r->headers_out.location->hash = 0;\n    r->headers_out.location = NULL;\n\n    r->headers_out.content_length_n = size;\n\n    if (r->headers_out.content_length) {\n        r->headers_out.content_length->hash = 0;\n        r->headers_out.content_length = NULL;\n    }\n\n    ngx_http_clear_accept_ranges(r);\n    ngx_http_clear_last_modified(r);\n    ngx_http_clear_etag(r);\n\n    rc = ngx_http_send_header(r);\n\n    if (rc == NGX_ERROR || r->header_only) {\n        return rc;\n    }\n\n    b = ngx_create_temp_buf(r->pool, size);\n    if (b == NULL) {\n        return NGX_ERROR;\n    }\n\n    p = ngx_cpymem(b->pos, ngx_http_msie_refresh_head,\n                   sizeof(ngx_http_msie_refresh_head) - 1);\n\n    if (escape == 0) {\n        p = ngx_cpymem(p, location, len);\n\n    } else {\n        p = (u_char *) ngx_escape_uri(p, location, len, NGX_ESCAPE_REFRESH);\n    }\n\n    b->last = ngx_cpymem(p, ngx_http_msie_refresh_tail,\n                         sizeof(ngx_http_msie_refresh_tail) - 1);\n\n    b->last_buf = (r == r->main) ? 1 : 0;\n    b->last_in_chain = 1;\n\n    out.buf = b;\n    out.next = NULL;\n\n    return ngx_http_output_filter(r, &out);\n}\n"], "filenames": ["src/http/ngx_http_special_response.c"], "buggy_code_start_loc": [625], "buggy_code_end_loc": [625], "fixing_code_start_loc": [626], "fixing_code_end_loc": [632], "type": "CWE-444", "message": "NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer.", "other": {"cve": {"id": "CVE-2019-20372", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-09T21:15:12.027", "lastModified": "2022-04-06T16:10:54.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "NGINX before 1.17.7, with certain error_page configurations, allows HTTP request smuggling, as demonstrated by the ability of an attacker to read unauthorized web pages in environments where NGINX is being fronted by a load balancer."}, {"lang": "es", "value": "NGINX versiones anteriores a 1.17.7, con ciertas configuraciones de error_page, permite el trafico no autorizado de peticiones HTTP, como es demostrado por la capacidad de un atacante para leer p\u00e1ginas web no autorizadas en entornos donde NGINX est\u00e1 al frente de un equilibrador de carga."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-444"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:f5:nginx:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.17.7", "matchCriteriaId": "4B1CA2FC-6A59-4EC9-8F86-BFA903DE28AE"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apple:xcode:*:*:*:*:*:*:*:*", "versionEndExcluding": "13.0", "matchCriteriaId": "BB279F6B-EE4C-4885-9CD4-657F6BD2548F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:esm:*:*:*", "matchCriteriaId": "815D70A8-47D3-459C-A32C-9FEACA0659D1"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:cloud_backup:-:*:*:*:*:*:*:*", "matchCriteriaId": "5C2089EE-5D7F-47EC-8EA5-0F69790564C4"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-02/msg00013.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://nginx.org/en/CHANGES", "source": "cve@mitre.org", "tags": ["Mitigation", "Release Notes", "Vendor Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2021/Sep/36", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://bertjwregeer.keybase.pub/2019-12-10%20-%20error_page%20request%20smuggling.pdf", "source": "cve@mitre.org", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://duo.com/docs/dng-notes#version-1.5.4-january-2020", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/kubernetes/ingress-nginx/pull/4859", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nginx/nginx/commit/c1be55f97211d38b69ac0c2027e6812ab8b1b94e", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20200127-0003/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://support.apple.com/kb/HT212818", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4235-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4235-2/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nginx/nginx/commit/c1be55f97211d38b69ac0c2027e6812ab8b1b94e"}}