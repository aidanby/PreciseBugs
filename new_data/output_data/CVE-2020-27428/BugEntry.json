{"buggy_code": ["/**\n * Fixup svg string prior to parsing.\n * @param {!string} svgString String of the svg to fix.\n * @returns {!string} fixed svg that should be parseable.\n */\nmodule.exports = function (svgString) {\n    // Add root svg namespace if it does not exist.\n    const svgAttrs = svgString.match(/<svg [^>]*>/);\n    if (svgAttrs && svgAttrs[0].indexOf('xmlns=') === -1) {\n        svgString = svgString.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" ');\n    }\n\n    // There are some SVGs from Illustrator that use undeclared entities.\n    // Just replace those entities with fake namespace references to prevent\n    // DOMParser from crashing\n    if (svgAttrs && svgAttrs[0].indexOf('&ns_') !== -1 && svgString.indexOf('<!DOCTYPE') === -1) {\n        svgString = svgString.replace(svgAttrs[0],\n            svgAttrs[0].replace(/&ns_[^;]+;/g, 'http://ns.adobe.com/Extensibility/1.0/'));\n    }\n\n    // Some SVGs exported from Photoshop have been found to have an invalid mime type\n    // Chrome and Safari won't render these SVGs, so we correct it here\n    if (svgString.includes('data:img/png')) {\n        svgString = svgString.replace(\n            // capture entire image tag with xlink:href=and the quote - dont capture data: bit\n            /(<image[^>]+?xlink:href=[\"'])data:img\\/png/g,\n            // use the captured <image ..... xlink:href=\" then append the right data uri mime type\n            ($0, $1) => `${$1}data:image/png`\n        );\n    }\n\n    // Some SVGs from Inkscape attempt to bind a prefix to a reserved namespace name.\n    // This will cause SVG parsing to fail, so replace these with a dummy namespace name.\n    // This namespace name is only valid for \"xml\", and if we bind \"xmlns:xml\" to the dummy namespace,\n    // parsing will fail yet again, so exclude \"xmlns:xml\" declarations.\n    if (svgString.match(/xmlns:(?!xml=)[^ ]+=\"http:\\/\\/www.w3.org\\/XML\\/1998\\/namespace\"/) !== null) {\n        svgString = svgString.replace(\n            // capture the entire attribute\n            /(xmlns:(?!xml=)[^ ]+)=\"http:\\/\\/www.w3.org\\/XML\\/1998\\/namespace\"/g,\n            // use the captured attribute name; replace only the URL\n            ($0, $1) => `${$1}=\"http://dummy.namespace\"`\n        );\n    }\n\n    // The <metadata> element is not needed for rendering and sometimes contains\n    // unparseable garbage from Illustrator :( Empty out the contents.\n    // Note: [\\s\\S] matches everything including newlines, which .* does not\n    svgString = svgString.replace(/<metadata>[\\s\\S]*<\\/metadata>/, '<metadata></metadata>');\n\n    // Empty script tags and javascript executing\n    svgString = svgString.replace(/<script[\\s\\S]*>[\\s\\S]*<\\/script>/, '<script></script>');\n    \n    // Remove error handlers\n    svgString = svgString.replace(/onerror=[\\s\\S]*['\"].*?['\"]/i, '');\n\n    return svgString;\n};\n"], "fixing_code": ["/**\n * Fixup svg string prior to parsing.\n * @param {!string} svgString String of the svg to fix.\n * @returns {!string} fixed svg that should be parseable.\n */\nmodule.exports = function (svgString) {\n    // Add root svg namespace if it does not exist.\n    const svgAttrs = svgString.match(/<svg [^>]*>/);\n    if (svgAttrs && svgAttrs[0].indexOf('xmlns=') === -1) {\n        svgString = svgString.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" ');\n    }\n\n    // There are some SVGs from Illustrator that use undeclared entities.\n    // Just replace those entities with fake namespace references to prevent\n    // DOMParser from crashing\n    if (svgAttrs && svgAttrs[0].indexOf('&ns_') !== -1 && svgString.indexOf('<!DOCTYPE') === -1) {\n        svgString = svgString.replace(svgAttrs[0],\n            svgAttrs[0].replace(/&ns_[^;]+;/g, 'http://ns.adobe.com/Extensibility/1.0/'));\n    }\n\n    // Some SVGs exported from Photoshop have been found to have an invalid mime type\n    // Chrome and Safari won't render these SVGs, so we correct it here\n    if (svgString.includes('data:img/png')) {\n        svgString = svgString.replace(\n            // capture entire image tag with xlink:href=and the quote - dont capture data: bit\n            /(<image[^>]+?xlink:href=[\"'])data:img\\/png/g,\n            // use the captured <image ..... xlink:href=\" then append the right data uri mime type\n            ($0, $1) => `${$1}data:image/png`\n        );\n    }\n\n    // Some SVGs from Inkscape attempt to bind a prefix to a reserved namespace name.\n    // This will cause SVG parsing to fail, so replace these with a dummy namespace name.\n    // This namespace name is only valid for \"xml\", and if we bind \"xmlns:xml\" to the dummy namespace,\n    // parsing will fail yet again, so exclude \"xmlns:xml\" declarations.\n    if (svgString.match(/xmlns:(?!xml=)[^ ]+=\"http:\\/\\/www.w3.org\\/XML\\/1998\\/namespace\"/) !== null) {\n        svgString = svgString.replace(\n            // capture the entire attribute\n            /(xmlns:(?!xml=)[^ ]+)=\"http:\\/\\/www.w3.org\\/XML\\/1998\\/namespace\"/g,\n            // use the captured attribute name; replace only the URL\n            ($0, $1) => `${$1}=\"http://dummy.namespace\"`\n        );\n    }\n\n    // The <metadata> element is not needed for rendering and sometimes contains\n    // unparseable garbage from Illustrator :( Empty out the contents.\n    // Note: [\\s\\S] matches everything including newlines, which .* does not\n    svgString = svgString.replace(/<metadata>[\\s\\S]*<\\/metadata>/, '<metadata></metadata>');\n\n    // Empty script tags and javascript executing\n    svgString = svgString.replace(/<script[\\s\\S]*>[\\s\\S]*<\\/script>/, '<script></script>');\n    \n    // Remove event handlers\n    const eventNames = [\n        'onbegin', 'onend', 'onrepeat', 'onabort', 'onerror', 'onresize', 'onscroll', 'onunload', 'oncopy',\n        'oncut', 'onpaste', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose',\n        'oncuechange', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave',\n        'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onloadeddata', 'onloadedmetadata',\n        'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove',\n        'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress',\n        'onkeyup', 'onload', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpause', 'onplay',\n        'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onseeked', 'onseeking',\n        'onselect', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange',\n        'onwaiting', 'onactivate', 'onfocusin', 'onfocusout'\n    ];\n    const eventsRegex = new RegExp(`(${eventNames.join('|')})\\\\s*=\\\\s*['\"].*['\"]`, 'i');\n    svgString = svgString.replace(eventsRegex, '');\n\n    return svgString;\n};\n"], "filenames": ["src/fixup-svg-string.js"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [55], "fixing_code_start_loc": [53], "fixing_code_end_loc": [68], "type": "CWE-79", "message": "A DOM-based cross-site scripting (XSS) vulnerability in Scratch-Svg-Renderer v0.2.0 allows attackers to execute arbitrary web scripts or HTML via a crafted sb3 file.", "other": {"cve": {"id": "CVE-2020-27428", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-06T00:15:07.790", "lastModified": "2022-01-12T17:17:56.067", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A DOM-based cross-site scripting (XSS) vulnerability in Scratch-Svg-Renderer v0.2.0 allows attackers to execute arbitrary web scripts or HTML via a crafted sb3 file."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) basada en DOM en Scratch-Svg-Renderer versi\u00f3n v0.2.0, permite a atacantes ejecutar scripts web o HTML arbitrarios por medio de un archivo sb3 dise\u00f1ado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mit:scratch-svg-renderer:0.2.0:*:*:*:*:node.js:*:*", "matchCriteriaId": "97CF850D-4EA7-424E-8DF4-10F214436443"}]}]}], "references": [{"url": "https://github.com/LLK/scratch-svg-renderer/commit/7c74ec7de3254143ec3c557677f5355a90a3d07f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LLK/scratch-svg-renderer/commit/7c74ec7de3254143ec3c557677f5355a90a3d07f"}}