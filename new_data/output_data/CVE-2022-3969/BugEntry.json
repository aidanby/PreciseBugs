{"buggy_code": ["/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2017  Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.util;\n\nimport com.openkm.core.Config;\nimport com.openkm.core.DatabaseException;\nimport com.openkm.dao.MimeTypeDAO;\nimport com.openkm.dao.bean.MimeType;\nimport com.openkm.util.impexp.RepositoryImporter;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class FileUtils {\n\tprivate static Logger log = LoggerFactory.getLogger(FileUtils.class);\n\n\t/**\n\t * Returns the name of the file without the extension.\n\t */\n\tpublic static String getFileName(String file) {\n\t\tlog.debug(\"getFileName({})\", file);\n\t\tint idx = file.lastIndexOf(\".\");\n\t\tString ret = idx >= 0 ? file.substring(0, idx) : file;\n\t\tlog.debug(\"getFileName: {}\", ret);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns the filename extension.\n\t */\n\tpublic static String getFileExtension(String file) {\n\t\tlog.debug(\"getFileExtension({})\", file);\n\t\tint idx = file.lastIndexOf(\".\");\n\t\tString ret = idx >= 0 ? file.substring(idx + 1) : \"\";\n\t\tlog.debug(\"getFileExtension: {}\", ret);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Creates a temporal and unique directory\n\t *\n\t * @throws IOException If something fails.\n\t */\n\tpublic static File createTempDir() throws IOException {\n\t\tFile tmpFile = File.createTempFile(\"okm\", null);\n\n\t\tif (!tmpFile.delete())\n\t\t\tthrow new IOException();\n\t\tif (!tmpFile.mkdir())\n\t\t\tthrow new IOException();\n\t\treturn tmpFile;\n\t}\n\n\t/**\n\t * Create temp file\n\t */\n\tpublic static File createTempFile() throws IOException {\n\t\treturn File.createTempFile(\"okm\", \".tmp\");\n\t}\n\n\t/**\n\t * Create temp file\n\t */\n\tpublic static File createTempFile(String ext) throws IOException {\n\t\treturn File.createTempFile(\"okm\", \".\" + ext);\n\t}\n\n\t/**\n\t * Create temp file with extension from mime\n\t */\n\tpublic static File createTempFileFromMime(String mimeType) throws DatabaseException, IOException {\n\t\tMimeType mt = MimeTypeDAO.findByName(mimeType);\n\t\tString ext = mt.getExtensions().iterator().next();\n\t\treturn File.createTempFile(\"okm\", \".\" + ext);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.deleteQuietly\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static boolean deleteQuietly(File file) {\n\t\treturn org.apache.commons.io.FileUtils.deleteQuietly(file);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.cleanDirectory\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static void cleanDirectory(File directory) throws IOException {\n\t\torg.apache.commons.io.FileUtils.cleanDirectory(directory);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.listFiles\n\t *\n\t * @param file File or directory to be listed.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {\n\t\treturn org.apache.commons.io.FileUtils.listFiles(directory, extensions, recursive);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.readFileToByteArray\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static byte[] readFileToByteArray(File file) throws IOException {\n\t\treturn org.apache.commons.io.FileUtils.readFileToByteArray(file);\n\t}\n\n\t/**\n\t * Delete directory if empty\n\t */\n\tpublic static void deleteEmpty(File file) {\n\t\tif (file.isDirectory()) {\n\t\t\tif (file.list().length == 0) {\n\t\t\t\tfile.delete();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Count files and directories from a selected directory.\n\t */\n\tpublic static int countFiles(File dir) {\n\t\tFile[] found = dir.listFiles();\n\t\tint ret = 0;\n\n\t\tif (found != null) {\n\t\t\tfor (int i = 0; i < found.length; i++) {\n\t\t\t\tif (found[i].isDirectory()) {\n\t\t\t\t\tret += countFiles(found[i]);\n\t\t\t\t}\n\n\t\t\t\tret++;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Count files and directories from a selected directory.\n\t * This version exclude .okm files\n\t */\n\tpublic static int countImportFiles(File dir) {\n\t\tFile[] found = dir.listFiles(new RepositoryImporter.NoVersionFilenameFilter());\n\t\tint ret = 0;\n\n\t\tif (found != null) {\n\t\t\tfor (int i = 0; i < found.length; i++) {\n\t\t\t\t//log.info(\"File: {}\", found[i].getPath());\n\n\t\t\t\tif (found[i].isDirectory()) {\n\t\t\t\t\tret += countImportFiles(found[i]);\n\t\t\t\t}\n\n\t\t\t\t// NAND\n\t\t\t\tif (!(found[i].isFile() && found[i].getName().toLowerCase().endsWith(Config.EXPORT_METADATA_EXT))) {\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Copy InputStream to File.\n\t */\n\tpublic static void copy(InputStream input, File output) throws IOException {\n\t\tFileOutputStream fos = new FileOutputStream(output);\n\t\tIOUtils.copy(input, fos);\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n\n\t/**\n\t * Copy Reader to File.\n\t */\n\tpublic static void copy(Reader input, File output) throws IOException {\n\t\tFileOutputStream fos = new FileOutputStream(output);\n\t\tIOUtils.copy(input, fos);\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n\n\t/**\n\t * Copy File to OutputStream\n\t */\n\tpublic static void copy(File input, OutputStream output) throws IOException {\n\t\tFileInputStream fis = new FileInputStream(input);\n\t\tIOUtils.copy(fis, output);\n\t\tfis.close();\n\t}\n\n\t/**\n\t * Copy File to File\n\t */\n\tpublic static void copy(File input, File output) throws IOException {\n\t\torg.apache.commons.io.FileUtils.copyFile(input, output);\n\t}\n\n\t/**\n\t * Create \"year / month / day\" directory structure. \n\t */\n\tpublic static File createDateDir(String parent) {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy\" + File.separator + \"MM\" + File.separator + \"dd\");\n\t\tFile dateDir = new File(parent, sdf.format(new Date()));\n\n\t\tif (!dateDir.exists()) {\n\t\t\tdateDir.mkdirs();\n\t\t}\n\n\t\treturn dateDir;\n\t}\n\n\t/**\n\t * Remove reserved characters from filename\n\t *\n\t * https://msdn.microsoft.com/en-us/library/aa365247\n\t */\n\tpublic static String toValidFilename(String filename) {\n\t\treturn filename.replaceAll(\"[\\\\\\\\/:\\\"*?<>|]+\", \"\");\n\t}\n}\n"], "fixing_code": ["/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2017  Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.util;\n\nimport com.openkm.core.Config;\nimport com.openkm.core.DatabaseException;\nimport com.openkm.dao.MimeTypeDAO;\nimport com.openkm.dao.bean.MimeType;\nimport com.openkm.util.impexp.RepositoryImporter;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class FileUtils {\n\tprivate static Logger log = LoggerFactory.getLogger(FileUtils.class);\n\n\t/**\n\t * Returns the name of the file without the extension.\n\t */\n\tpublic static String getFileName(String file) {\n\t\tlog.debug(\"getFileName({})\", file);\n\t\tint idx = file.lastIndexOf(\".\");\n\t\tString ret = idx >= 0 ? file.substring(0, idx) : file;\n\t\tlog.debug(\"getFileName: {}\", ret);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns the filename extension.\n\t */\n\tpublic static String getFileExtension(String file) {\n\t\tlog.debug(\"getFileExtension({})\", file);\n\t\tint idx = file.lastIndexOf(\".\");\n\t\tString ret = idx >= 0 ? file.substring(idx + 1) : \"\";\n\t\tlog.debug(\"getFileExtension: {}\", ret);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Creates a temporal and unique directory\n\t *\n\t * @throws IOException If something fails.\n\t */\n\tpublic static File createTempDir() throws IOException {\n\t\treturn Files.createTempDirectory(\"okm\").toFile();\n\t}\n\n\t/**\n\t * Create temp file\n\t */\n\tpublic static File createTempFile() throws IOException {\n\t\treturn File.createTempFile(\"okm\", \".tmp\");\n\t}\n\n\t/**\n\t * Create temp file\n\t */\n\tpublic static File createTempFile(String ext) throws IOException {\n\t\treturn File.createTempFile(\"okm\", \".\" + ext);\n\t}\n\n\t/**\n\t * Create temp file with extension from mime\n\t */\n\tpublic static File createTempFileFromMime(String mimeType) throws DatabaseException, IOException {\n\t\tMimeType mt = MimeTypeDAO.findByName(mimeType);\n\t\tString ext = mt.getExtensions().iterator().next();\n\t\treturn File.createTempFile(\"okm\", \".\" + ext);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.deleteQuietly\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static boolean deleteQuietly(File file) {\n\t\treturn org.apache.commons.io.FileUtils.deleteQuietly(file);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.cleanDirectory\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static void cleanDirectory(File directory) throws IOException {\n\t\torg.apache.commons.io.FileUtils.cleanDirectory(directory);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.listFiles\n\t *\n\t * @param file File or directory to be listed.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {\n\t\treturn org.apache.commons.io.FileUtils.listFiles(directory, extensions, recursive);\n\t}\n\n\t/**\n\t * Wrapper for FileUtils.readFileToByteArray\n\t *\n\t * @param file File or directory to be deleted.\n\t */\n\tpublic static byte[] readFileToByteArray(File file) throws IOException {\n\t\treturn org.apache.commons.io.FileUtils.readFileToByteArray(file);\n\t}\n\n\t/**\n\t * Delete directory if empty\n\t */\n\tpublic static void deleteEmpty(File file) {\n\t\tif (file.isDirectory()) {\n\t\t\tif (file.list().length == 0) {\n\t\t\t\tfile.delete();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Count files and directories from a selected directory.\n\t */\n\tpublic static int countFiles(File dir) {\n\t\tFile[] found = dir.listFiles();\n\t\tint ret = 0;\n\n\t\tif (found != null) {\n\t\t\tfor (int i = 0; i < found.length; i++) {\n\t\t\t\tif (found[i].isDirectory()) {\n\t\t\t\t\tret += countFiles(found[i]);\n\t\t\t\t}\n\n\t\t\t\tret++;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Count files and directories from a selected directory.\n\t * This version exclude .okm files\n\t */\n\tpublic static int countImportFiles(File dir) {\n\t\tFile[] found = dir.listFiles(new RepositoryImporter.NoVersionFilenameFilter());\n\t\tint ret = 0;\n\n\t\tif (found != null) {\n\t\t\tfor (int i = 0; i < found.length; i++) {\n\t\t\t\t//log.info(\"File: {}\", found[i].getPath());\n\n\t\t\t\tif (found[i].isDirectory()) {\n\t\t\t\t\tret += countImportFiles(found[i]);\n\t\t\t\t}\n\n\t\t\t\t// NAND\n\t\t\t\tif (!(found[i].isFile() && found[i].getName().toLowerCase().endsWith(Config.EXPORT_METADATA_EXT))) {\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Copy InputStream to File.\n\t */\n\tpublic static void copy(InputStream input, File output) throws IOException {\n\t\tFileOutputStream fos = new FileOutputStream(output);\n\t\tIOUtils.copy(input, fos);\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n\n\t/**\n\t * Copy Reader to File.\n\t */\n\tpublic static void copy(Reader input, File output) throws IOException {\n\t\tFileOutputStream fos = new FileOutputStream(output);\n\t\tIOUtils.copy(input, fos);\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n\n\t/**\n\t * Copy File to OutputStream\n\t */\n\tpublic static void copy(File input, OutputStream output) throws IOException {\n\t\tFileInputStream fis = new FileInputStream(input);\n\t\tIOUtils.copy(fis, output);\n\t\tfis.close();\n\t}\n\n\t/**\n\t * Copy File to File\n\t */\n\tpublic static void copy(File input, File output) throws IOException {\n\t\torg.apache.commons.io.FileUtils.copyFile(input, output);\n\t}\n\n\t/**\n\t * Create \"year / month / day\" directory structure.\n\t */\n\tpublic static File createDateDir(String parent) {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy\" + File.separator + \"MM\" + File.separator + \"dd\");\n\t\tFile dateDir = new File(parent, sdf.format(new Date()));\n\n\t\tif (!dateDir.exists()) {\n\t\t\tdateDir.mkdirs();\n\t\t}\n\n\t\treturn dateDir;\n\t}\n\n\t/**\n\t * Remove reserved characters from filename\n\t *\n\t * https://msdn.microsoft.com/en-us/library/aa365247\n\t */\n\tpublic static String toValidFilename(String filename) {\n\t\treturn filename.replaceAll(\"[\\\\\\\\/:\\\"*?<>|]+\", \"\");\n\t}\n}\n"], "filenames": ["src/main/java/com/openkm/util/FileUtils.java"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [233], "fixing_code_start_loc": [34], "fixing_code_end_loc": [228], "type": "CWE-377", "message": "A vulnerability was found in OpenKM up to 6.3.11 and classified as problematic. Affected by this issue is the function getFileExtension of the file src/main/java/com/openkm/util/FileUtils.java. The manipulation leads to insecure temporary file. Upgrading to version 6.3.12 is able to address this issue. The name of the patch is c069e4d73ab8864345c25119d8459495f45453e1. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-213548.", "other": {"cve": {"id": "CVE-2022-3969", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-13T08:15:15.950", "lastModified": "2022-11-17T18:36:03.480", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in OpenKM up to 6.3.11 and classified as problematic. Affected by this issue is the function getFileExtension of the file src/main/java/com/openkm/util/FileUtils.java. The manipulation leads to insecure temporary file. Upgrading to version 6.3.12 is able to address this issue. The name of the patch is c069e4d73ab8864345c25119d8459495f45453e1. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-213548."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-377"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openkm:openkm:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.3.12", "matchCriteriaId": "84B08097-0383-4C7F-A58B-A89D6851F522"}]}]}], "references": [{"url": "https://github.com/openkm/document-management-system/commit/c069e4d73ab8864345c25119d8459495f45453e1", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openkm/document-management-system/pull/332", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/openkm/document-management-system/releases/tag/v6.3.12", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.213548", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openkm/document-management-system/commit/c069e4d73ab8864345c25119d8459495f45453e1"}}